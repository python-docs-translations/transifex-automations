# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 17:29+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (https://app.transifex.com/python-doc/teams/5390/"
"zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Obiekt Liczby Zespolonej"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Python-owe obiekty liczby zespolonej są stworzone w C jako dwa oddzielne "
"typy: jeden jest strukturą w która reprezentuje prawdziwe liczby zespolone, "
"a drugi ujawnia tą strukturę dla Python-owego kodu. API ma funkcje do "
"operacji na obydwu typach."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Liczby zespolone jako struktury w C"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Зауважте, що функції, які приймають ці структури як параметри та повертають "
"їх як результати, роблять це *за значенням*, а не розіменовують їх через "
"покажчики. Це узгоджено в усьому API."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"这是一个对应Python复数对象的值部分的C结构体。绝大部分处理复数对象的函数都用这"
"类型的结构体作为输入或者输出值，它可近似地定义为："

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Zwraca sumę dwóch liczb zespolonych wykorzystując strukturę :c:type:"
"`Py_complex` jako reprezentację."

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Zwraca różnicę dwóch liczb zespolonych wykorzystując strukturę :c:type:"
"`Py_complex` jako reprezentację."

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Повертає заперечення комплексного числа *num*, використовуючи представлення "
"C :c:type:`Py_complex`."

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Zwraca iloczyn dwóch liczb zespolonych wykorzystując strukturę :c:type:"
"`Py_complex` jako reprezentację."

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Zwraca iloraz dwóch liczb zespolonych wykorzystując strukturę :c:type:"
"`Py_complex` jako reprezentację."

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:macro:`!EDOM`."
msgstr ""
"Если *divisor* равен нулю, этот метод возвращает ноль и устанавливает :c:"
"data:`errno` в :c:macro:`!EDOM`."

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Повертає піднесення *num* до степеня *exp*, використовуючи представлення C :"
"c:type:`Py_complex`."

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"Если *num* имеет значение null и *exp* не является положительным "
"действительным числом, этот метод возвращает ноль и устанавливает :c:data:"
"`errno` в :c:macro:`!EDOM`."

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Комплексні числа як об’єкти Python"

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Цей підтип :c:type:`PyObject` представляє об’єкт комплексного числа Python."

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Цей екземпляр :c:type:`PyTypeObject` представляє тип комплексного числа "
"Python. Це той самий об’єкт, що й :class:`complex` на рівні Python."

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject` або підтипом :"
"c:type:`PyComplexObject`. Ця функція завжди успішна."

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject`, але не "
"підтипом :c:type:`PyComplexObject`. Ця функція завжди успішна."

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr "根据C类型 :c:type:`Py_complex` 的值生成一个新的Python复数对象。"

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""
"根据 *real* 和 *imag* 返回一个新的C类型 :c:type:`PyComplexObject` 对象。"

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "Верните действительную часть *op* как C :c:expr:`double`."

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "Верните мнимую часть *op* как C :c:expr:`double`."

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Повертає значення :c:type:`Py_complex` комплексного числа *op*."

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`.  Upon failure, this "
"method returns ``-1.0`` as a real value."
msgstr ""
"如果 *op* 不是一个 Python 复数对象但是具有 :meth:`~object.__complex__` 方法，"
"则会先调用该方法将 *op* 转换为 Python 复数对象。 如果 :meth:`!__complex__` 未"
"定义则将回退至 :meth:`~object.__float__`。 如果 :meth:`!__float__` 未定义则将"
"回退至 :meth:`~object.__index__`。 当失败时，该方法将返回实数值 ``-1.0``。"

#: ../../c-api/complex.rst:137
msgid "Use :meth:`~object.__index__` if available."
msgstr "Используйте :meth:`~object.__index__`, если доступно."

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "obiekt"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "liczba zespolona"
