# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Wey-Han Liaw <adrianliaw2000@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:07+0000\n"
"Last-Translator: Wey-Han Liaw <adrianliaw2000@gmail.com>, 2021\n"
"Language-Team: Chinese (Taiwan) (https://app.transifex.com/python-doc/"
"teams/5390/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/heapq.rst:2
msgid ":mod:`!heapq` --- Heap queue algorithm"
msgstr ""

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**原始碼：** :source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr ""
"這個模組實作了堆積佇列 (heap queue) 演算法，亦被稱為優先佇列 (priority "
"queue) 演算法。"

#: ../../library/heapq.rst:19
msgid ""
"Min-heaps are binary trees for which every parent node has a value less than "
"or equal to any of its children. We refer to this condition as the heap "
"invariant."
msgstr ""

#: ../../library/heapq.rst:23
msgid ""
"For min-heaps, this implementation uses lists for which ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]`` for all *k* for which the "
"compared elements exist.  Elements are counted from zero.  The interesting "
"property of a min-heap is that its smallest element is always the root, "
"``heap[0]``."
msgstr ""

#: ../../library/heapq.rst:29
msgid ""
"Max-heaps satisfy the reverse invariant: every parent node has a value "
"*greater* than any of its children.  These are implemented as lists for "
"which ``maxheap[2*k+1] <= maxheap[k]`` and ``maxheap[2*k+2] <= maxheap[k]`` "
"for all *k* for which the compared elements exist. The root, ``maxheap[0]``, "
"contains the *largest* element; ``heap.sort(reverse=True)`` maintains the "
"max-heap invariant."
msgstr ""

#: ../../library/heapq.rst:36
msgid ""
"The :mod:`!heapq` API differs from textbook heap algorithms in two aspects: "
"(a) We use zero-based indexing.  This makes the relationship between the "
"index for a node and the indexes for its children slightly less obvious, but "
"is more suitable since Python uses zero-based indexing. (b) Textbooks often "
"focus on max-heaps, due to their suitability for in-place sorting. Our "
"implementation favors min-heaps as they better correspond to Python :class:"
"`lists <list>`."
msgstr ""

#: ../../library/heapq.rst:43
msgid ""
"These two aspects make it possible to view the heap as a regular Python list "
"without surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` "
"maintains the heap invariant!"
msgstr ""

#: ../../library/heapq.rst:47
msgid ""
"Like :meth:`list.sort`, this implementation uses only the ``<`` operator for "
"comparisons, for both min-heaps and max-heaps."
msgstr ""

#: ../../library/heapq.rst:50
msgid ""
"In the API below, and in this documentation, the unqualified term *heap* "
"generally refers to a min-heap. The API for max-heaps is named using a "
"``_max``  suffix."
msgstr ""

#: ../../library/heapq.rst:54
msgid ""
"To create a heap, use a list initialized as ``[]``, or transform an existing "
"list into a min-heap or max-heap using the :func:`heapify` or :func:"
"`heapify_max` functions, respectively."
msgstr ""

#: ../../library/heapq.rst:58
msgid "The following functions are provided for min-heaps:"
msgstr ""

#: ../../library/heapq.rst:63
msgid ""
"Push the value *item* onto the *heap*, maintaining the min-heap invariant."
msgstr ""

#: ../../library/heapq.rst:68
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the min-heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""

#: ../../library/heapq.rst:75
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"將 *item* 放入 heap ，接著從 *heap* 取出並回傳最小的元素。這個組合函式比呼"
"叫 :func:`heappush` 之後呼叫 :func:`heappop` 更有效率。"

#: ../../library/heapq.rst:82
msgid "Transform list *x* into a min-heap, in-place, in linear time."
msgstr ""

#: ../../library/heapq.rst:87
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""
"從 *heap* 取出並回傳最小的元素，接著將新的 *item* 放進heap。heap 的大小不會改"
"變。如果 heap 是空的會產生 :exc:`IndexError` 錯誤。"

#: ../../library/heapq.rst:90
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed "
"by :func:`heappush` and can be more appropriate when using a fixed-size "
"heap. The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"這個一次完成的操作會比呼叫 :func:`heappop` 之後呼叫 :func:`heappush` 更有效"
"率，並在維護 heap 的大小不變時更為適當，取出/放入的組合函式一定會從 heap 回傳"
"一個元素並用 *item* 取代他。"

#: ../../library/heapq.rst:95
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"函式的回傳值可能會大於被加入的 *item* 。如果這不是你期望發生的，可以考慮使"
"用 :func:`heappushpop` 替代，他會回傳 heap 的最小值和 *item* 兩個當中比較小的"
"那個，並將大的留在 heap 內。"

#: ../../library/heapq.rst:101
msgid "For max-heaps, the following functions are provided:"
msgstr ""

#: ../../library/heapq.rst:106
msgid "Transform list *x* into a max-heap, in-place, in linear time."
msgstr ""

#: ../../library/heapq.rst:113
msgid ""
"Push the value *item* onto the max-heap *heap*, maintaining the max-heap "
"invariant."
msgstr ""

#: ../../library/heapq.rst:121
msgid ""
"Pop and return the largest item from the max-heap *heap*, maintaining the "
"max-heap invariant.  If the max-heap is empty, :exc:`IndexError` is raised. "
"To access the largest item without popping it, use ``maxheap[0]``."
msgstr ""

#: ../../library/heapq.rst:130
msgid ""
"Push *item* on the max-heap *heap*, then pop and return the largest item "
"from *heap*. The combined action runs more efficiently than :func:"
"`heappush_max` followed by a separate call to :func:`heappop_max`."
msgstr ""

#: ../../library/heapq.rst:140
msgid ""
"Pop and return the largest item from the max-heap *heap* and also push the "
"new *item*. The max-heap size doesn't change. If the max-heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""

#: ../../library/heapq.rst:145
msgid ""
"The value returned may be smaller than the *item* added.  Refer to the "
"analogous function :func:`heapreplace` for detailed usage notes."
msgstr ""

#: ../../library/heapq.rst:151
msgid "The module also offers three general purpose functions based on heaps."
msgstr "這個模組也提供三個利用 heap 實作的一般用途函式"

#: ../../library/heapq.rst:156
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge "
"timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"合併多個已排序的輸入並產生單一且已排序的輸出（舉例：合併來自多個 log 檔中有時"
"間戳記的項目）。回傳一個 :term:`iterator` 包含已經排序的值。"

#: ../../library/heapq.rst:160
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the "
"input streams is already sorted (smallest to largest)."
msgstr ""
"和 ``sorted(itertools.chain(*iterables))`` 類似但回傳值是一個 iterable ，不會"
"一次把所有資料都放進記憶體中，並且假設每一個輸入都已經（由小到大）排序過了。"

#: ../../library/heapq.rst:164
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr "有兩個選用參數，指定時必須被當作關鍵字參數指定。"

#: ../../library/heapq.rst:166
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* 參數指定了一個 :term:`key function`  引數，用來從每一個輸入的元素中決定"
"一個比較的依據。預設的值是 ``None`` （直接比較元素）。"

#: ../../library/heapq.rst:170
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must "
"be sorted from largest to smallest."
msgstr ""

#: ../../library/heapq.rst:175
msgid "Added the optional *key* and *reverse* parameters."
msgstr "加入選用參數 *key* 和 *reverse* 。"

#: ../../library/heapq.rst:181
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""

#: ../../library/heapq.rst:190
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key)[:"
"n]``."
msgstr ""

#: ../../library/heapq.rst:196
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger "
"values, it is more efficient to use the :func:`sorted` function.  Also, when "
"``n==1``, it is more efficient to use the built-in :func:`min` and :func:"
"`max` functions.  If repeated usage of these functions is required, consider "
"turning the iterable into an actual heap."
msgstr ""
"後兩個函式在 *n* 值比較小時有最好的表現。對於較大的 *n* 值，只用 :func:"
"`sorted` 函式會更有效率。同樣地，當 ``n==1`` 時，使用內建函式 :func:`min` "
"和 :func:`max` 會有更好的效率。如果需要重複使用這些函式，可以考慮將 iterable "
"轉成真正的 heap 。"

#: ../../library/heapq.rst:204
msgid "Basic Examples"
msgstr "基礎範例"

#: ../../library/heapq.rst:206
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by "
"pushing all values onto a heap and then popping off the smallest values one "
"at a time::"
msgstr ""

#: ../../library/heapq.rst:210
msgid ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""

#: ../../library/heapq.rst:219
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr ""
"雖然類似 ``sorted(iterable)`` ，但跟 :func:`sorted` 不同的是，這個實作不是 "
"stable 的排序。"

#: ../../library/heapq.rst:222
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values "
"(such as task priorities) alongside the main record being tracked::"
msgstr ""
"Heap 中的元素可以是 tuple 。這有利於將要比較的值（例如一個 task 的優先度）和"
"主要資料放在一起排序。"

#: ../../library/heapq.rst:225
msgid ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"
msgstr ""

#: ../../library/heapq.rst:235
msgid "Priority Queue Implementation Notes"
msgstr "優先佇列  (Priority Queue) 實作細節"

#: ../../library/heapq.rst:237
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common "
"use for a heap, and it presents several implementation challenges:"
msgstr ""

#: ../../library/heapq.rst:240
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr ""
"排序的穩定性：你如何將兩個擁有相同 priority 的 task 按照他們被加入的順序回"
"傳。"

#: ../../library/heapq.rst:243
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr ""
"Tuple的排序在某些情況下會壞掉，例如當 Tuple (priority, task) 的 priorities 相"
"等且 tasks 沒有一個預設的排序時。"

#: ../../library/heapq.rst:246
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr ""
"當一個 heap 中 task 的 priority 改變時，你如何將它移到 heap 正確的位置上。"

#: ../../library/heapq.rst:249
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr ""
"或者一個還沒被解決的 task 需要被刪除時，你要如何從佇列中找到並刪除指定的 "
"task。"

#: ../../library/heapq.rst:252
msgid ""
"A solution to the first two challenges is to store entries as 3-element list "
"including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the "
"same, the tuple comparison will never attempt to directly compare two tasks."
msgstr ""
"一個針對前兩個問題的解法是：儲存一個包含 priority 、 entry count 和 task 三個"
"元素的 tuple 。兩個 task 有相同 priority 時， entry count 會讓兩個 task 能根"
"據加入的順序排序。因為沒有任何兩個 task 擁有相同的 entry count ，所以永遠不會"
"直接使用 task 做比較。"

#: ../../library/heapq.rst:258
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr ""

#: ../../library/heapq.rst:261
msgid ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"
msgstr ""

#: ../../library/heapq.rst:269
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done "
"with a dictionary pointing to an entry in the queue."
msgstr ""
"剩下的問題可以藉由找到要刪除的 task 並更改它的 priority 或者直接將它移除。尋"
"找一個 task 可以使用一個 dictionary 指向佇列當中的 entry 。"

#: ../../library/heapq.rst:273
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"移除 entry 或更改它的 priority 更為困難，因為這會破壞 heap 的性質。所以一個可"
"行的方案是將原本的 entry 做一個標記表示它已經被刪除，並新增一個擁有新的 "
"priority 的 entry 。"

#: ../../library/heapq.rst:277
msgid ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"
msgstr ""

#: ../../library/heapq.rst:307
msgid "Theory"
msgstr "原理"

#: ../../library/heapq.rst:309
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for "
"all *k*, counting elements from 0.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that ``a[0]`` is always its smallest element."
msgstr ""
"Heap 是一個陣列對於所有從0開始的 index *k* 都存在性質 ``a[k] <= a[2*k+1]`` "
"和 ``a[k] <= a[2*k+2]`` 。為了方便比較，不存在的元素被視為無限大。一個有趣的 "
"heap 性質是 ``a[0]`` 永遠是最小的元素。"

#: ../../library/heapq.rst:314
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr ""

#: ../../library/heapq.rst:317
msgid ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""

#: ../../library/heapq.rst:327
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""

#: ../../library/heapq.rst:336
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an *O*\\ (*n* log *n*) sort."
msgstr ""

#: ../../library/heapq.rst:343
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not "
"\"better\" than the last 0'th element you extracted.  This is especially "
"useful in simulation contexts, where the tree holds all incoming events, and "
"the \"win\" condition means the smallest scheduled time.  When an event "
"schedules other events for execution, they are scheduled into the future, so "
"they can easily go into the heap.  So, a heap is a good structure for "
"implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""

#: ../../library/heapq.rst:352
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""

#: ../../library/heapq.rst:358
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for "
"input fuzzily ordered."
msgstr ""

#: ../../library/heapq.rst:368
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not "
"fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap "
"decreases.  The freed memory could be cleverly reused immediately for "
"progressively building a second heap, which grows at exactly the same rate "
"the first heap is melting.  When the first heap completely vanishes, you "
"switch heaps and start a new run.  Clever and quite effective!"
msgstr ""

#: ../../library/heapq.rst:376
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr ""

#: ../../library/heapq.rst:380
msgid "Footnotes"
msgstr "註解"

#: ../../library/heapq.rst:381
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying "
"than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
