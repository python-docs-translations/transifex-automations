# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (Taiwan) (https://app.transifex.com/python-doc/"
"teams/5390/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ":mod:`bisect` --- 陣列二分演算法 (Array bisection algorithm)"

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**原始碼：** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic "
"bisection algorithm to do its work.  The source code may be most useful as a "
"working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""
"這個模組維護一個已經排序過的 list ，當我們每次做完插入後不需要再次排序整個 "
"list 。一個很長的 list 的比較操作很花費時間，為了改進這點，這個模組是其中一個"
"常用的方法。這個模組被命名為 :mod:`bisect` 來自他使用一個基礎的 bisection 演"
"算法實作。模組的原始碼是這個演算法的一個完善的實作（邊界條件已經是正確的"
"了）。"

#: ../../library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "此模組提供下面的函式"

#: ../../library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already "
"present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"在 *a* 當中找到一個位置，讓 *x*  插入後 *a* 仍然是排序好的。參數 *lo* 和 "
"*hi* 用來指定 list 中應該被考慮的子區間，預設是考慮整個 list 。如果 *a* 裡面"
"已經有 *x* 出現，插入的位置會在所有 *x* 的前面（左邊）。回傳值可以被當作 "
"``list.insert()`` 的第一個參數，但列表 *a* 必須先排序過。"

#: ../../library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val < x for val in a[lo : i])`` for the left side and ``all(val "
">= x for val in a[i : hi])`` for the right side."
msgstr ""
"Повернена точка вставки *i* ділить масив *a* на дві половини так, що "
"``all(val < x for val in a[lo : i])`` for the left side and ``all(val > = x "
"for val in a[i : hi])`` для правої сторони."

#: ../../library/bisect.rst:37 ../../library/bisect.rst:58
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each element in the array.  To support "
"searching complex records, the key function is not applied to the *x* value."
msgstr ""
"*key* визначає :term:`key function` одного аргументу, який використовується "
"для отримання ключа порівняння з кожного елемента в масиві. Для підтримки "
"пошуку складних записів функція ключа не застосовується до значення *x*."

#: ../../library/bisect.rst:41 ../../library/bisect.rst:62
msgid ""
"If *key* is ``None``, the elements are compared directly with no intervening "
"function call."
msgstr ""
"Якщо *key* має значення ``None``, елементи порівнюються безпосередньо без "
"виклику функції."

#: ../../library/bisect.rst:44 ../../library/bisect.rst:65
#: ../../library/bisect.rst:83 ../../library/bisect.rst:103
msgid "Added the *key* parameter."
msgstr "Додано параметр *key*."

#: ../../library/bisect.rst:51
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""
"類似 :func:`bisect_left` ，但回傳的插入位置會在所有 *a* 當中的 *x* 的後面（右"
"邊）。"

#: ../../library/bisect.rst:54
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so "
"that ``all(val <= x for val in a[lo : i])`` for the left side and ``all(val "
"> x for val in a[i : hi])`` for the right side."
msgstr ""
"Повернена точка вставки *i* ділить масив *a* на дві половини так, що "
"``all(val <= x for val in a[lo : i])`` for the left side and ``all(val > x "
"for val in a[i : hi])`` для правої сторони."

#: ../../library/bisect.rst:71
msgid "Insert *x* in *a* in sorted order."
msgstr "Вставте *x* у *a* в порядку сортування."

#: ../../library/bisect.rst:73
msgid ""
"This function first runs :func:`bisect_left` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:77 ../../library/bisect.rst:97
msgid ""
"To support inserting records in a table, the *key* function (if any) is "
"applied to *x* for the search step but not for the insertion step."
msgstr ""
"Щоб підтримувати вставлення записів у таблицю, функція *key* (якщо є) "
"застосовується до *x* для кроку пошуку, але не для кроку вставки."

#: ../../library/bisect.rst:80 ../../library/bisect.rst:100
msgid ""
"Keep in mind that the ``O(log n)`` search is dominated by the slow O(n) "
"insertion step."
msgstr ""

#: ../../library/bisect.rst:90
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""
"類似 :func:`insort_left` ，但插入的位置會在所有 *a* 當中的 *x* 的後面（右"
"邊）。"

#: ../../library/bisect.rst:93
msgid ""
"This function first runs :func:`bisect_right` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:108
msgid "Performance Notes"
msgstr "Примітки щодо продуктивності"

#: ../../library/bisect.rst:110
msgid ""
"When writing time sensitive code using *bisect()* and *insort()*, keep these "
"thoughts in mind:"
msgstr ""
"Під час написання чутливого до часу коду за допомогою *bisect()* і "
"*insort()* пам’ятайте про такі думки:"

#: ../../library/bisect.rst:113
msgid ""
"Bisection is effective for searching ranges of values. For locating specific "
"values, dictionaries are more performant."
msgstr ""
"Ділення навпіл ефективне для пошуку діапазонів значень. Для пошуку "
"конкретних значень словники більш ефективні."

#: ../../library/bisect.rst:116
msgid ""
"The *insort()* functions are ``O(n)`` because the logarithmic search step is "
"dominated by the linear time insertion step."
msgstr ""

#: ../../library/bisect.rst:119
msgid ""
"The search functions are stateless and discard key function results after "
"they are used.  Consequently, if the search functions are used in a loop, "
"the key function may be called again and again on the same array elements. "
"If the key function isn't fast, consider wrapping it with :func:`functools."
"cache` to avoid duplicate computations.  Alternatively, consider searching "
"an array of precomputed keys to locate the insertion point (as shown in the "
"examples section below)."
msgstr ""

#: ../../library/bisect.rst:129
msgid ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ is a "
"high performance module that uses *bisect* to managed sorted collections of "
"data."
msgstr ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ — это "
"высокопроизводительный модуль, который использует *bisect* для управления "
"отсортированными коллекциями данных."

#: ../../library/bisect.rst:133
msgid ""
"The `SortedCollection recipe <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ uses bisect to build a full-featured collection class "
"with straight-forward search methods and support for a key-function.  The "
"keys are precomputed to save unnecessary calls to the key function during "
"searches."
msgstr ""
"`Рецепт SortedCollection <https://code.activestate.com/recipes/577197-"
"sortedcollection/>`_ використовує bisect для створення повнофункціонального "
"класу колекції з прямими методами пошуку та підтримкою функції ключа. Ключі "
"попередньо обчислені, щоб уникнути непотрібних викликів функції клавіш під "
"час пошуку."

#: ../../library/bisect.rst:141
msgid "Searching Sorted Lists"
msgstr "Пошук у відсортованих списках"

#: ../../library/bisect.rst:143
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""

#: ../../library/bisect.rst:185
msgid "Examples"
msgstr "範例"

#: ../../library/bisect.rst:189
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80 "
"to 89 is a 'B', and so on::"
msgstr ""

#: ../../library/bisect.rst:201
msgid ""
"The :func:`bisect` and :func:`insort` functions also work with lists of "
"tuples.  The *key* argument can serve to extract the field used for ordering "
"records in a table::"
msgstr ""

#: ../../library/bisect.rst:235
msgid ""
"If the key function is expensive, it is possible to avoid repeated function "
"calls by searching a list of precomputed keys to find the index of a record::"
msgstr ""
"Якщо функція ключа є дорогою, можна уникнути повторних викликів функції "
"шляхом пошуку списку попередньо обчислених ключів, щоб знайти індекс запису::"
