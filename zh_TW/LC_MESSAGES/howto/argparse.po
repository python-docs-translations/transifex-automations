# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Chinese (Taiwan) (https://app.transifex.com/python-doc/"
"teams/5390/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Argparse 教學"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr ""

#: ../../howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr ""

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""
"這個教學傾向簡介 Python 官方標準含式庫中推薦的命令列解析模組 :mod:"
"`argparse`。"

#: ../../howto/argparse.rst:16
msgid ""
"There are two other modules that fulfill the same task, namely :mod:`getopt` "
"(an equivalent for ``getopt()`` from the C language) and the deprecated :mod:"
"`optparse`. Note also that :mod:`argparse` is based on :mod:`optparse`, and "
"therefore very similar in terms of usage."
msgstr ""

#: ../../howto/argparse.rst:24
msgid "Concepts"
msgstr "概念"

#: ../../howto/argparse.rst:26
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr "藉由命令 :command:`ls` 的使用開始這些功能的介紹："

#: ../../howto/argparse.rst:29
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""

#: ../../howto/argparse.rst:48
msgid "A few concepts we can learn from the four commands:"
msgstr "我們可以從四個命令中可以學到的幾個概念："

#: ../../howto/argparse.rst:50
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
"命令 :command:`ls` 在執行時不用其他參數就可以顯示出當前目錄底下的內容。"

#: ../../howto/argparse.rst:53
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because "
"the program should know what to do with the value, solely based on where it "
"appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"根據這樣的概念延伸後來舉個例子，如果我們想秀出一個不在目錄的資料夾 ``pypy`` "
"的內容。我們可以在命令後加上一個位置參數。會用位置參數這樣的名稱是因為程式會"
"知道輸入的參數該做的事情。這樣的概念很像另一個命令 :command:`cp`\\ ，基本的使"
"用方式是 ``cp SRC DEST``\\ 。第一個位置參數代表的是\\ *想要複製的目標*\\，第"
"二個位置的參數代表的則是\\ *想要複製到的地方*\\ 。"

#: ../../howto/argparse.rst:62
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"現在我們想再增加一些，要顯示除了檔名之外更多的資訊。在這裡就可以選擇加上 ``-"
"l`` 這個參數。"

#: ../../howto/argparse.rst:66
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works "
"simply by reading its help text."
msgstr ""
"這是 help 文件的片段。對於以前從未使用過的程序來說非常有用，可以透過這些 "
"help 文件來了解這些該怎麼使用。"

#: ../../howto/argparse.rst:72
msgid "The basics"
msgstr "基本用法"

#: ../../howto/argparse.rst:74
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr ""
"我們以一個很簡單的例子開始下面的介紹：\n"
"\n"
"::"

#: ../../howto/argparse.rst:76
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""

#: ../../howto/argparse.rst:80 ../../howto/argparse.rst:188
#: ../../howto/argparse.rst:209
msgid "Following is a result of running the code:"
msgstr "下面是運行這些代碼的結果："

#: ../../howto/argparse.rst:82
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""

#: ../../howto/argparse.rst:97 ../../howto/argparse.rst:254
#: ../../howto/argparse.rst:298
msgid "Here is what is happening:"
msgstr "接者是發生的情況："

#: ../../howto/argparse.rst:99
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"運行這個腳本而沒有給與任何參數時就不會顯示任何東西至標準輸出畫面上。這裡並不"
"是這麼的有用。"

#: ../../howto/argparse.rst:102
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"第二個我們呈現出了 :mod:`argparse` 模組的用處。我們幾乎沒有做什麼事情，但已經"
"得到一個很好的幫助信息。"

#: ../../howto/argparse.rst:105
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"這個 ``--help`` 選項可以簡短的表示成 ``-h`` , 這是唯一一個選項我們不用去指明"
"的（意即，沒有必要在這個參數後加上任何數值）。如果指定其他參數給他會造成錯"
"誤。也因為這樣，我們得到了一個免費的信息。"

#: ../../howto/argparse.rst:112
msgid "Introducing Positional arguments"
msgstr "介紹位置參數"

#: ../../howto/argparse.rst:114
msgid "An example::"
msgstr "例子::"

#: ../../howto/argparse.rst:116
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:122
msgid "And running the code:"
msgstr "運行這段代碼："

#: ../../howto/argparse.rst:124
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""

#: ../../howto/argparse.rst:140
msgid "Here is what's happening:"
msgstr "接者是發生的情況："

#: ../../howto/argparse.rst:142
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""

#: ../../howto/argparse.rst:146
msgid "Calling our program now requires us to specify an option."
msgstr "現在呼叫我們的程序時需要指定一個參數選項。"

#: ../../howto/argparse.rst:148
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""

#: ../../howto/argparse.rst:151
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""

#: ../../howto/argparse.rst:156
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more "
"useful::"
msgstr ""
"注意, 雖然 help 秀出了看起來不錯的信息, 但現在並沒有給予到實質幫助。像剛剛增"
"加的 ``echo`` 這個位置參數，除了猜測和讀原始碼之外，我們根本不曉得該怎麼使用"
"他。因此我們來做一點事讓他變得更有用："

#: ../../howto/argparse.rst:161
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:167
msgid "And we get:"
msgstr "然後我們得到："

#: ../../howto/argparse.rst:169
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../howto/argparse.rst:180
msgid "Now, how about doing something even more useful::"
msgstr ""
"現在來做一些更有用處的事情：\n"
"\n"
"::"

#: ../../howto/argparse.rst:182
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:190
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:198
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we "
"give it as strings, unless we tell it otherwise. So, let's tell :mod:"
"`argparse` to treat that input as an integer::"
msgstr ""
"那並沒有如預期這樣。這是因為 :mod:`argparse` 將我們給予選項的值當成字串，除然"
"我們告訴他要怎麼做。所以我們來告訴 :mod:`argparse` 將這個輸入值當成整數來使"
"用：\n"
"\n"
"::"

#: ../../howto/argparse.rst:202
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:211
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""

#: ../../howto/argparse.rst:219
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""
"這樣很順利。現在程序在開始之前會因為錯誤的輸入而回報有用的訊息並結束掉。"

#: ../../howto/argparse.rst:224
msgid "Introducing Optional arguments"
msgstr "介紹選項參數"

#: ../../howto/argparse.rst:226
msgid ""
"So far we have been playing with positional arguments. Let us have a look on "
"how to add optional ones::"
msgstr ""

#: ../../howto/argparse.rst:229
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:236 ../../howto/argparse.rst:282
#: ../../howto/argparse.rst:398 ../../howto/argparse.rst:432
msgid "And the output:"
msgstr "接者是結果："

#: ../../howto/argparse.rst:238
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""

#: ../../howto/argparse.rst:256
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""
"這個程式是寫成如果有指名 ``--verbosity`` 這個參數選項那才顯示些資訊，反之亦"
"然。"

#: ../../howto/argparse.rst:259
msgid ""
"To show that the option is actually optional, there is no error when running "
"the program without it. Note that by default, if an optional argument isn't "
"used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the :"
"keyword:`if` statement."
msgstr ""

#: ../../howto/argparse.rst:265
msgid "The help message is a bit different."
msgstr "Help 訊息稍微有些不一樣。"

#: ../../howto/argparse.rst:267
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any "
"value."
msgstr "當使用 ``--verbosity`` 參數選項時必須要指定一個數值。"

#: ../../howto/argparse.rst:270
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"在上面的例子中 ``--verbosity``，接受任意的整數，但對我們的程式來說只接受兩個"
"輸入值， ``True`` 或 ``False``。所以我們來修改一下程式碼使其符合：\n"
"\n"
"::"

#: ../../howto/argparse.rst:274
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:284
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:300
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``. "
"This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""

#: ../../howto/argparse.rst:307
msgid ""
"It complains when you specify a value, in true spirit of what flags actually "
"are."
msgstr ""

#: ../../howto/argparse.rst:310
msgid "Notice the different help text."
msgstr "注意不同的 help 文件。"

#: ../../howto/argparse.rst:314
msgid "Short options"
msgstr ""

#: ../../howto/argparse.rst:316
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""
"如果你很熟悉命令列的使用的話，你將會發現我還沒講到關於短參數。其實這很簡"
"單：\n"
"\n"
"::"

#: ../../howto/argparse.rst:320
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output "
"verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:328
msgid "And here goes:"
msgstr ""

#: ../../howto/argparse.rst:330
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:341
msgid "Note that the new ability is also reflected in the help text."
msgstr "注意新的表示對於幫助文件也是一樣的"

#: ../../howto/argparse.rst:345
msgid "Combining Positional and Optional arguments"
msgstr "現在結合位置與選項參數"

#: ../../howto/argparse.rst:347
msgid "Our program keeps growing in complexity::"
msgstr ""
"我們的程式成長的越來越複雜：\n"
"\n"
"::"

#: ../../howto/argparse.rst:349
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:362
msgid "And now the output:"
msgstr "然後現在的輸出結果："

#: ../../howto/argparse.rst:364
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""

#: ../../howto/argparse.rst:376
msgid "We've brought back a positional argument, hence the complaint."
msgstr ""

#: ../../howto/argparse.rst:378
msgid "Note that the order does not matter."
msgstr "注意現在的順序對於程式來說已經不再重要了."

#: ../../howto/argparse.rst:380
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""

#: ../../howto/argparse.rst:383
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:400
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:414
msgid ""
"These all look good except the last one, which exposes a bug in our program. "
"Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""

#: ../../howto/argparse.rst:417
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:434
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, "
"1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v {0,1,2}, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:450
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""

#: ../../howto/argparse.rst:453
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""

#: ../../howto/argparse.rst:457
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:472
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""

#: ../../howto/argparse.rst:476
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:501
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""

#: ../../howto/argparse.rst:504
msgid "It also behaves similar to \"store_true\" action."
msgstr ""

#: ../../howto/argparse.rst:506
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""
"現在來秀一下 \"count\" 這個動作會給予什麼。你可能之前就有見過這種用法。"

#: ../../howto/argparse.rst:509
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr ""

#: ../../howto/argparse.rst:512
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr "應該要如預期那樣，就算給予長選項我們也要獲得一樣的輸出結果。"

#: ../../howto/argparse.rst:515
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""

#: ../../howto/argparse.rst:519
msgid "That last output exposes a bug in our program."
msgstr ""

#: ../../howto/argparse.rst:522
msgid "Let's fix::"
msgstr "讓我們來解決問題"

#: ../../howto/argparse.rst:524
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:541
msgid "And this is what it gives:"
msgstr "而這也正是它給的："

#: ../../howto/argparse.rst:543
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:556
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""

#: ../../howto/argparse.rst:559
msgid "Third output not so good."
msgstr "第三個輸出不是這麼的好。"

#: ../../howto/argparse.rst:561
msgid "Let's fix that bug::"
msgstr ""
"我們來修復這個錯誤：\n"
"\n"
"::"

#: ../../howto/argparse.rst:563
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:578
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the :exc:"
"`TypeError` exception)."
msgstr ""

#: ../../howto/argparse.rst:585
msgid "And:"
msgstr "而且"

#: ../../howto/argparse.rst:587
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:592
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""

#: ../../howto/argparse.rst:599
msgid "Getting a little more advanced"
msgstr ""

#: ../../howto/argparse.rst:601
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""
"如果我們想要擴展我們的小程式做比範例更多的事：\n"
"\n"
"::"

#: ../../howto/argparse.rst:604
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:618 ../../howto/argparse.rst:656
#: ../../howto/argparse.rst:872
msgid "Output:"
msgstr "結果："

#: ../../howto/argparse.rst:620
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:639
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""

#: ../../howto/argparse.rst:643
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""

#: ../../howto/argparse.rst:658
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:672
msgid "Specifying ambiguous arguments"
msgstr ""

#: ../../howto/argparse.rst:674
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for "
"an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""

#: ../../howto/argparse.rst:678
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""

#: ../../howto/argparse.rst:699
msgid "Conflicting options"
msgstr ""

#: ../../howto/argparse.rst:701
msgid ""
"So far, we have been working with two methods of an :class:`argparse."
"ArgumentParser` instance. Let's introduce a third one, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to specify "
"options that conflict with each other. Let's also change the rest of the "
"program so that the new functionality makes more sense: we'll introduce the "
"``--quiet`` option, which will be the opposite of the ``--verbose`` one::"
msgstr ""

#: ../../howto/argparse.rst:709
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:727
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""

#: ../../howto/argparse.rst:730
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""

#: ../../howto/argparse.rst:745
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""

#: ../../howto/argparse.rst:749
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of "
"your program, just in case they don't know::"
msgstr ""
"在我們結論之前，你可能想告訴你的用戶這個程式的主要目的，以防萬一他們不知"
"道：\n"
"\n"
"::"

#: ../../howto/argparse.rst:752
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of "
"Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:770
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which "
"tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""

#: ../../howto/argparse.rst:774 ../../howto/argparse.rst:801
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""

#: ../../howto/argparse.rst:792
msgid "How to translate the argparse output"
msgstr ""

#: ../../howto/argparse.rst:794
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`. "
"See also :ref:`i18n-howto`."
msgstr ""

#: ../../howto/argparse.rst:799
msgid "For instance, in this :mod:`argparse` output:"
msgstr ""

#: ../../howto/argparse.rst:817
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""

#: ../../howto/argparse.rst:820
msgid ""
"In order to translate these strings, they must first be extracted into a ``."
"po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run this "
"command:"
msgstr ""

#: ../../howto/argparse.rst:824
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr ""

#: ../../howto/argparse.rst:828
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""

#: ../../howto/argparse.rst:832
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""

#: ../../howto/argparse.rst:835
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""

#: ../../howto/argparse.rst:838
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""

#: ../../howto/argparse.rst:842
msgid ""
"To translate your own strings in the :mod:`argparse` output, use :mod:"
"`gettext`."
msgstr ""

#: ../../howto/argparse.rst:845
msgid "Custom type converters"
msgstr ""

#: ../../howto/argparse.rst:847
msgid ""
"The :mod:`argparse` module allows you to specify custom type converters for "
"your command-line arguments. This allows you to modify user input before "
"it's stored in the :class:`argparse.Namespace`. This can be useful when you "
"need to pre-process the input before it is used in your program."
msgstr ""

#: ../../howto/argparse.rst:852
msgid ""
"When using a custom type converter, you can use any callable that takes a "
"single string argument (the argument value) and returns the converted value. "
"However, if you need to handle more complex scenarios, you can use a custom "
"action class with the **action** parameter instead."
msgstr ""

#: ../../howto/argparse.rst:857
msgid ""
"For example, let's say you want to handle arguments with different prefixes "
"and process them accordingly::"
msgstr ""

#: ../../howto/argparse.rst:860
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(prefix_chars='-+')\n"
"\n"
"parser.add_argument('-a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('-', x))\n"
"parser.add_argument('+a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('+', x))\n"
"\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""

#: ../../howto/argparse.rst:874
msgid ""
"$ python prog.py -a value1 +a value2\n"
"Namespace(a=[('-', 'value1'), ('+', 'value2')])"
msgstr ""

#: ../../howto/argparse.rst:879
msgid "In this example, we:"
msgstr ""

#: ../../howto/argparse.rst:881
msgid ""
"Created a parser with custom prefix characters using the ``prefix_chars`` "
"parameter."
msgstr ""

#: ../../howto/argparse.rst:884
msgid ""
"Defined two arguments, ``-a`` and ``+a``, which used the ``type`` parameter "
"to create custom type converters to store the value in a tuple with the "
"prefix."
msgstr ""

#: ../../howto/argparse.rst:887
msgid ""
"Without the custom type converters, the arguments would have treated the ``-"
"a`` and ``+a`` as the same argument, which would have been undesirable. By "
"using custom type converters, we were able to differentiate between the two "
"arguments."
msgstr ""

#: ../../howto/argparse.rst:892
msgid "Conclusion"
msgstr "結論"

#: ../../howto/argparse.rst:894
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
":mod:`argparse` 模組提供了比這裡展示更多的功能。它的文件是非常全面詳細且充滿"
"了例子。通過本教學，你應該比較容易消化它們了。"
