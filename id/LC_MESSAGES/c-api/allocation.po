# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Muh Hanif, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 15:09+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Muh Hanif, 2025\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/"
"id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Mengalokasikan objek kedalam struktur data (heap)"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  Other fields of the object are "
"not affected."
msgstr ""
"Inisialisasi objek *op* yang baru dialokasikan dengan tipe dan referensi "
"awalnya. Mengembalikan objek yang telah diinisialisasi. Kolom lain dari "
"objek tersebut tidak terpengaruh."

#: ../../c-api/allocation.rst:24
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Ini melakukan segalanya :c:func:`PyObject_Init`, dan juga menginisialiasi "
"panjang informasi pada sebuah ukuran object variabel."

#: ../../c-api/allocation.rst:30
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized. The caller will own the only "
"reference to the object (i.e. its reference count will be one). The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Alokasikan objek Python baru menggunakan tipe struktur C *TYPE* dan objek "
"tipe Python *typeobj*(``PyTypeObject*``). Kolom yang tidak didefinisikan "
"oleh header objek Python tidak diinisialisasi. Pemanggil akan memiliki satu-"
"satunya referensi ke objek tersebut (yaitu, jumlah referensinya akan menjadi "
"satu). Ukuran alokasi memori ditentukan dari :c:member:`~PyTypeObject."
"tp_basicsize` kolom objek tipe tersebut."

#: ../../c-api/allocation.rst:38
msgid ""
"Note that this function is unsuitable if *typeobj* has :c:macro:"
"`Py_TPFLAGS_HAVE_GC` set. For such objects, use :c:func:`PyObject_GC_New` "
"instead."
msgstr ""
"Perhatikan bahwa fungsi ini tidak cocok jika *typeobj* telah :c:macro:"
"`Py_TPFLAGS_HAVE_GC` disetel. Untuk objek seperti itu, gunakan :c:func:"
"`PyObject_GC_New` sebagai gantinya."

#: ../../c-api/allocation.rst:45
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized.  The allocated memory allows for "
"the *TYPE* structure plus *size* (``Py_ssize_t``) fields of the size given "
"by the :c:member:`~PyTypeObject.tp_itemsize` field of *typeobj*.  This is "
"useful for implementing objects like tuples, which are able to determine "
"their size at construction time.  Embedding the array of fields into the "
"same allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""
"Alokasikan objek Python baru menggunakan tipe struktur C *TYPE* dan objek "
"tipe Python *typeobj*(``PyTypeObject*``). Kolom yang tidak didefinisikan "
"oleh header objek Python tidak diinisialisasi. Memori yang dialokasikan "
"memungkinkan kolom struktur *TYPE* ditambah kolom *size*(``Py_ssize_t``) "
"dengan ukuran yang ditentukan oleh :c:member:`~PyTypeObject.tp_itemsize` "
"kolom *typeobj*. Hal ini berguna untuk mengimplementasikan objek seperti "
"tuple, yang dapat menentukan ukurannya pada saat konstruksi. Menanamkan "
"larik kolom ke dalam alokasi yang sama akan mengurangi jumlah alokasi, "
"sehingga meningkatkan efisiensi manajemen memori."

#: ../../c-api/allocation.rst:56
msgid ""
"Note that this function is unsuitable if *typeobj* has :c:macro:"
"`Py_TPFLAGS_HAVE_GC` set. For such objects, use :c:func:`PyObject_GC_NewVar` "
"instead."
msgstr ""
"Perhatikan bahwa fungsi ini tidak cocok jika *typeobj* :c:macro:"
"`Py_TPFLAGS_HAVE_GC` telah disetel. Untuk objek seperti itu, gunakan :c:func:"
"`PyObject_GC_NewVar` sebagai gantinya."

#: ../../c-api/allocation.rst:63
msgid ""
"Releases memory allocated to an object using :c:macro:`PyObject_New` or :c:"
"macro:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Melepaskan memori yang dialokasikan ke suatu objek menggunakan :c:macro:"
"`PyObject_New` atau :c:macro:`PyObject_NewVar` . Biasanya, ini dipanggil "
"dari :c:member:`~PyTypeObject.tp_dealloc` pengendali yang ditentukan dalam "
"tipe objek. Kolom objek tidak boleh diakses setelah pemanggilan ini karena "
"memori tersebut bukan lagi objek Python yang valid."

#: ../../c-api/allocation.rst:72
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Object yang terlihat di Python sebagai ``None``. Ini seharusnya hanya dapat "
"diakses menggunakan makro :c:macro:`Py_None`, yang mengevaluasi ke sebuah "
"pointer ke object ini."

#: ../../c-api/allocation.rst:79
msgid ":ref:`moduleobjects`"
msgstr ":ref:`moduleobjects`"

#: ../../c-api/allocation.rst:80
msgid "To allocate and create extension modules."
msgstr "Untuk mengalokasikan dan membuat modul ekstensi."
