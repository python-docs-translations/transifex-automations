# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-17 14:21+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/"
"id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Mengalokasikan objek kedalam struktur data (heap)"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  Other fields of the object are "
"not initialized.  Despite its name, this function is unrelated to the "
"object's :meth:`~object.__init__` method (:c:member:`~PyTypeObject.tp_init` "
"slot).  Specifically, this function does **not** call the object's :meth:`!"
"__init__` method."
msgstr ""
"Menginisialisasi objek *op* yang baru dialokasikan dengan tipe dan referensi "
"awalnya.  Mengembalikan objek yang telah diinisialisasi.  Bidang lain dari "
"objek tidak diinisialisasi.  Terlepas dari namanya, fungsi ini tidak terkait "
"dengan metode :meth:`~object.__init__` objek (slot:c:member:`~PyTypeObject."
"tp_init` ).  Secara khusus, fungsi ini tidak **tidak** memanggil metode :"
"meth:`!__init__` objek."

#: ../../c-api/allocation.rst:24
msgid ""
"In general, consider this function to be a low-level routine. Use :c:member:"
"`~PyTypeObject.tp_alloc` where possible. For implementing :c:member:`!"
"tp_alloc` for your type, prefer :c:func:`PyType_GenericAlloc` or :c:func:"
"`PyObject_New`."
msgstr ""
"Secara umum, anggaplah fungsi ini sebagai rutinitas tingkat rendah. Gunakan :"
"c:member:`~PyTypeObject.tp_alloc` jika memungkinkan. Untuk "
"mengimplementasikan :c:member:`!tp_alloc` untuk tipe Anda, pilih :c:func:"
"`PyType_GenericAlloc` atau :c:func:`PyObject_New`."

#: ../../c-api/allocation.rst:31
msgid ""
"This function only initializes the object's memory corresponding to the "
"initial :c:type:`PyObject` structure.  It does not zero the rest."
msgstr ""
"Fungsi ini hanya menginisialisasi memori objek yang sesuai dengan struktur "
"awal :c:type:`PyObject`.  Fungsi ini tidak mengosongkan sisanya."

#: ../../c-api/allocation.rst:37
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Ini melakukan segalanya :c:func:`PyObject_Init`, dan juga menginisialiasi "
"panjang informasi pada sebuah ukuran object variabel."

#: ../../c-api/allocation.rst:42
msgid ""
"This function only initializes some of the object's memory.  It does not "
"zero the rest."
msgstr ""
"Fungsi ini hanya menginisialisasi sebagian memori objek.  Fungsi ini tidak "
"mengosongkan sisanya."

#: ../../c-api/allocation.rst:48
msgid ""
"Allocates a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``) by calling :c:func:"
"`PyObject_Malloc` to allocate memory and initializing it like :c:func:"
"`PyObject_Init`.  The caller will own the only reference to the object (i.e. "
"its reference count will be one)."
msgstr ""
"Mengalokasikan objek Python baru menggunakan tipe struktur C *TYPE* dan "
"objek tipe Python *typeobj* (``PyTypeObject*``) dengan memanggil :c:func:"
"`PyObject_Malloc` untuk mengalokasikan memori dan menginisialisasinya "
"sebagai :c:func:`PyObject_Init`.  Pemanggil akan memiliki satu-satunya "
"referensi ke objek tersebut (misal: jumlah referensinya adalah satu)."

#: ../../c-api/allocation.rst:54 ../../c-api/allocation.rst:107
msgid ""
"Avoid calling this directly to allocate memory for an object; call the "
"type's :c:member:`~PyTypeObject.tp_alloc` slot instead."
msgstr ""
"Hindari memanggil ini secara langsung untuk mengalokasikan memori untuk "
"sebuah objek; panggil slot :c:member:`~PyTypeObject.tp_alloc` dari tipe "
"sebagai gantinya."

#: ../../c-api/allocation.rst:57 ../../c-api/allocation.rst:110
msgid ""
"When populating a type's :c:member:`~PyTypeObject.tp_alloc` slot, :c:func:"
"`PyType_GenericAlloc` is preferred over a custom function that simply calls "
"this macro."
msgstr ""
"Ketika mengisi slot tipe :c:member:`~PyTypeObject.tp_alloc` , :c:func:"
"`PyType_GenericAlloc` lebih direkomendasikan daripada fungsi kustom yang "
"hanya memanggil makro ini."

#: ../../c-api/allocation.rst:61
msgid ""
"This macro does not call :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), or :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."
msgstr ""
"Makro ini tidak memanggil :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), atau :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."

#: ../../c-api/allocation.rst:65
msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_New` instead."
msgstr ""
"Ini tidak dapat digunakan untuk objek dengan :c:macro:`Py_TPFLAGS_HAVE_GC` "
"yang diatur di :c:member:`~PyTypeObject.tp_flags`; gunakan :c:macro:"
"`PyObject_GC_New` sebagai gantinya."

#: ../../c-api/allocation.rst:68
msgid ""
"Memory allocated by this macro must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"Memori yang dialokasikan oleh makro ini harus dibebaskan dengan :c:func:"
"`PyObject_Free` (biasanya dipanggil melalui slot objek :c:member:"
"`~PyTypeObject.tp_free` )."

#: ../../c-api/allocation.rst:73 ../../c-api/allocation.rst:123
msgid ""
"The returned memory is not guaranteed to have been completely zeroed before "
"it was initialized."
msgstr ""
"Memori yang dikembalikan tidak dijamin telah di-nol-kan sepenuhnya sebelum "
"diinisialisasi."

#: ../../c-api/allocation.rst:78 ../../c-api/allocation.rst:128
msgid ""
"This macro does not construct a fully initialized object of the given type; "
"it merely allocates memory and prepares it for further initialization by :c:"
"member:`~PyTypeObject.tp_init`.  To construct a fully initialized object, "
"call *typeobj* instead.  For example::"
msgstr ""
"Makro ini tidak membuat objek yang diinisialisasi penuh dari tipe yang "
"diberikan; makro ini hanya mengalokasikan memori dan mempersiapkannya untuk "
"inisialisasi lebih lanjut oleh :c:member:`~PyTypeObject.tp_init`.  Untuk "
"membuat objek yang diinisialisasi secara penuh, panggil *typeobj* sebagai "
"gantinya.  Sebagai contoh::"

#: ../../c-api/allocation.rst:83
msgid "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"
msgstr "PyObject * foo = PyObject_CallNoArgs((PyObject *) & PyFoo_Type);"

#: ../../c-api/allocation.rst:87 ../../c-api/allocation.rst:137
msgid ":c:func:`PyObject_Free`"
msgstr ":c:func:`PyObject_Free`"

#: ../../c-api/allocation.rst:88
msgid ":c:macro:`PyObject_GC_New`"
msgstr ":c:macro:`PyObject_GC_New`"

#: ../../c-api/allocation.rst:89 ../../c-api/allocation.rst:139
msgid ":c:func:`PyType_GenericAlloc`"
msgstr ":c:func:`PyType_GenericAlloc`"

#: ../../c-api/allocation.rst:90 ../../c-api/allocation.rst:140
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ":c:member:`~PyTypeObject.tp_alloc`"

#: ../../c-api/allocation.rst:95
msgid "Like :c:macro:`PyObject_New` except:"
msgstr "Seperti :c:macro:`PyObject_New` kecuali:"

#: ../../c-api/allocation.rst:97
msgid ""
"It allocates enough memory for the *TYPE* structure plus *size* "
"(``Py_ssize_t``) fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *typeobj*."
msgstr ""
"Ini mengalokasikan cukup memori untuk struktur *TYPE* ditambah bidang *size* "
"(``Py_ssize_t``) dengan ukuran yang diberikan oleh bidang :c:member:"
"`~PyTypeObject.tp_itemsize` dari *typeobj*."

#: ../../c-api/allocation.rst:100
msgid "The memory is initialized like :c:func:`PyObject_InitVar`."
msgstr "Memori diinisialisasi seperti :c:func:`PyObject_InitVar`."

#: ../../c-api/allocation.rst:102
msgid ""
"This is useful for implementing objects like tuples, which are able to "
"determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""
"Hal ini berguna untuk mengimplementasikan objek seperti tuple, yang dapat "
"menentukan ukurannya pada saat konstruksi.  Menanamkan array of fields ke "
"dalam alokasi yang sama akan mengurangi jumlah alokasi, sehingga "
"meningkatkan efisiensi manajemen memori."

#: ../../c-api/allocation.rst:114
msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_NewVar` instead."
msgstr ""
"Ini tidak dapat digunakan untuk objek dengan :c:macro:`Py_TPFLAGS_HAVE_GC` "
"yang diatur di :c:member:`~PyTypeObject.tp_flags`; gunakan :c:macro:"
"`PyObject_GC_NewVar` sebagai gantinya."

#: ../../c-api/allocation.rst:118
msgid ""
"Memory allocated by this function must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"Memori yang dialokasikan oleh fungsi ini harus dibebaskan dengan :c:func:"
"`PyObject_Free` (biasanya dipanggil melalui slot :c:member:`~PyTypeObject."
"tp_free` objek)."

#: ../../c-api/allocation.rst:133
msgid ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"
msgstr ""
"PyObject * list_instance = PyObject_CallNoArgs((PyObject *) & PyList_Type);"

#: ../../c-api/allocation.rst:138
msgid ":c:macro:`PyObject_GC_NewVar`"
msgstr ":c:macro:`PyObject_GC_NewVar`"

#: ../../c-api/allocation.rst:145
msgid "Same as :c:func:`PyObject_Free`."
msgstr "Sama seperti :c:func:`PyObject_Free`."

#: ../../c-api/allocation.rst:149
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Object yang terlihat di Python sebagai ``None``. Ini seharusnya hanya dapat "
"diakses menggunakan makro :c:macro:`Py_None`, yang mengevaluasi ke sebuah "
"pointer ke object ini."

#: ../../c-api/allocation.rst:156
msgid ":ref:`moduleobjects`"
msgstr ":ref:`moduleobjects`"

#: ../../c-api/allocation.rst:157
msgid "To allocate and create extension modules."
msgstr "Untuk mengalokasikan dan membuat modul ekstensi."
