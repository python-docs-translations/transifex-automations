1
00:00:00,800 --> 00:00:04,901
Você achava que o Python ia ser
popular desde o início?

2
00:00:05,520 --> 00:00:08,956
[Música]

3
00:00:14,533 --> 00:00:21,280
Python contribuiu para tornar o pensamento crítico
um pouco mais acessível para mais pessoas.

4
00:00:21,280 --> 00:00:23,478
Você pode dedicar uma ou duas horas

5
00:00:23,478 --> 00:00:25,520
aprendendo os fundamentos de programação

6
00:00:25,520 --> 00:00:28,120
e, em seguida, você consegue escrever
10 a 20 linhas de código

7
00:00:28,120 --> 00:00:29,353
que faça algo interessante.

8
00:00:29,353 --> 00:00:32,400
A linguagem, a comunidade, o ecossistema,

9
00:00:32,400 --> 00:00:37,464
o mercado, tudo isso teve um grande
impacto na humanidade.

10
00:00:37,464 --> 00:00:40,575
Hoje, podemos dizer com segurança que quase
qualquer lugar que tem um computador,

11
00:00:40,575 --> 00:00:42,200
provavelmente tem Python.

12
00:00:42,200 --> 00:00:44,360
Ele literalmente está em Marte.

13
00:00:45,306 --> 00:00:49,056
O impacto da IA, penso que ainda
veremos o que vai ser.

14
00:00:49,056 --> 00:00:51,240
Python é incrivelmente importante para isso.

15
00:00:52,147 --> 00:00:56,880
Para entender como Python ficou tão grande,
temos que voltar no tempo.

16
00:01:00,000 --> 00:01:01,600
Talvez não tanto.

17
00:01:02,746 --> 00:01:05,240
Tudo começou em Amsterdã nos anos 80

18
00:01:05,240 --> 00:01:08,920
durante meu tempo no CWI, um centro de pesquisa holandês.

19
00:01:11,440 --> 00:01:17,263
O CWI esteve por trás de muitos dos principais
desenvolvimentos de linguagens de programação.

20
00:01:17,520 --> 00:01:20,503
Algol 60 e Algol 68, por exemplo.

21
00:01:20,880 --> 00:01:25,748
E Lambert Meertens tentou
ensinar programação para artistas

22
00:01:25,748 --> 00:01:28,240
e descobriu coisas sobre

23
00:01:28,240 --> 00:01:34,720
programação que são fáceis, se você é um cientista
ou um geek. Mas para alguém como um artista,

24
00:01:34,720 --> 00:01:39,732
essas coisas não eram óbvias porque você tinha
saber algumas coisas sobre o computador.

25
00:01:39,732 --> 00:01:44,240
A causa da frustração era o baixo nível
das linguagens que estavam disponíveis.

26
00:01:44,240 --> 00:01:48,466
Os computadores eram imensamente
caros e, comparados com isso,

27
00:01:48,466 --> 00:01:51,361
um programador era muito, muito barato

28
00:01:51,361 --> 00:01:53,680
e, com isso, linguagens de progamação

29
00:01:53,680 --> 00:01:57,223
foram projetadas com essa
relação de economia em mente.

30
00:01:57,579 --> 00:02:00,168
Não importava se levasse muito tempo para

31
00:02:00,168 --> 00:02:06,880
programar desde que isso não demandasse muito
do computador porque era aí que estava o custo.

32
00:02:06,880 --> 00:02:11,440
Olhamos um para o outro e dizemos: não podemos fazer
algo melhor? Não podemos projetar uma linguagem que seja

33
00:02:11,440 --> 00:02:15,600
fácil de aprender, fácil de ensinar,
mas também fácil de usar.


34
00:02:15,600 --> 00:02:18,400
De forma que os iniciantes possam
entender como programar

35
00:02:18,400 --> 00:02:22,348
sem ter que entrar em todos aqueles
detalhes complicados de hardware.

36
00:02:22,348 --> 00:02:25,320
e foi assim que o projeto ABC nasceu.

37
00:02:27,920 --> 00:02:31,652
Um dos membros do time era
Guido van Rossum.

38
00:02:31,652 --> 00:02:37,496
[Música]

39
00:02:39,680 --> 00:02:46,320
Fui contratado para trabalhar na ABC, para a qual
havia um pequeno protótipo, mas cada

40
00:02:46,320 --> 00:02:52,560
parte do protótipo tinha que ser expandido para
funcionar totalmente em conformidade com a especificação.

41
00:02:54,160 --> 00:03:01,840
Em 1985, foi feito um lançamento da ABC.
E, então, tivemos o problema: como fazer

42
00:03:01,840 --> 00:03:05,120
o mundo saber que existia a ABC?

43
00:03:05,120 --> 00:03:11,080
Não tínhamos uma forma boa de
alcançar nosso público-alvo.

44
00:03:11,080 --> 00:03:12,840
A web não existia.

45
00:03:12,840 --> 00:03:17,560
A maioria das pessoas não tinha ouvido falar de
um computador ou se quer tinha visto um.

46
00:03:17,600 --> 00:03:23,182
Se alguém quisesse uma cópia, tinha que nos enviar
uma carta e nós enviaríamos um disquete de volta.

47
00:03:24,300 --> 00:03:30,640
Então, receio que ABC tenha alcançado muito poucas pessoas e,
em algum momento, os diretores, por algum motivo,

48
00:03:30,640 --> 00:03:33,960
que eu desconheço, arquivaram o projeto.

49
00:03:33,960 --> 00:03:38,720
Eu gastei, bom, 3 anos e meio de trabalho árduo.

50
00:03:39,202 --> 00:03:44,481
nesta linguagem e na implementação
para torná-la a melhor possível.

51
00:03:44,481 --> 00:03:45,812
Então foi decepcionante.

52
00:03:46,320 --> 00:03:49,594
[Música]

53
00:03:49,594 --> 00:03:55,280
Guido foi transferido para outro projeto
em um sistema operacional distribuído,

54
00:03:55,280 --> 00:03:56,680
o sistema amoeba.

55
00:03:58,763 --> 00:04:03,360
Uma das minhas tarefas naquele projeto
como programador, não como pesquisador,

56
00:04:03,360 --> 00:04:09,569
era escrever, ou ajudar a escrever, um grande
número de aplicações de usuário.

57
00:04:09,920 --> 00:04:12,169
E eu realmente não achava

58
00:04:12,169 --> 00:04:16,860
que, para muitos daqueles utilitários, C era uma linguagem muito boa.

59
00:04:18,181 --> 00:04:19,992
e eu pensava, bom,

60
00:04:19,992 --> 00:04:27,120
cara, se nós pudéssemos programar em ABC em vez de C,
cada um daqueles utilitários seria algo como metade de

61
00:04:27,120 --> 00:04:32,960
uma página de código e eu poderia escrever toda
a suíte de utilitários em duas semanas em vez de

62
00:04:32,960 --> 00:04:35,800
anos que parecia que
nos levaria.

63
00:04:35,800 --> 00:04:40,840
Exceto que ABC era de nível tão alto e abstrato,

64
00:04:40,880 --> 00:04:49,120
que não era uma boa linguagem para falar com servidores
e sistemas de arquivos e processos e meio que

65
00:04:49,120 --> 00:04:56,080
todos detalhes do sistema operacional foram abstraídos
na ABC. Então, eu pensei, bom, deveria

66
00:04:56,080 --> 00:05:03,040
haver uma linguagem que servisse de ponte entre
o C e o shell. E nós olhamos para o Perl e

67
00:05:03,040 --> 00:05:11,120
não achávamos que era uma boa como linguagem de
programação. Ela era quase tão ruim quanto o Basic,

68
00:05:11,120 --> 00:05:18,880
em diferentes formas. Então, Python também foi criado
em parte como uma alternativa ao Perl. Foi aí

69
00:05:18,880 --> 00:05:24,120
que eu decidi, bom, vamos ver se eu consigo
fazer minha própria linguagem de programação.

70
00:05:24,120 --> 00:05:27,602
[Música]

71
00:05:28,720 --> 00:05:34,800
Acredito que em um feriado de Natal ele decidiu
passar o seu tempo projetando e construindo uma

72
00:05:34,800 --> 00:05:39,360
nova linguagem de programação para o sistema operacional
baseada nos princípios que ele

73
00:05:39,360 --> 00:05:40,808
aprendeu enquanto estava no projeto ABC.

74
00:05:41,773 --> 00:05:46,080
Era lógico que eu começaria com
ABC como exemplo.

75
00:05:46,080 --> 00:05:51,840
A característica mais proeminente que o
Python tomou emprestado do ABC é, na verdade, o uso

76
00:05:51,840 --> 00:05:59,040
de indentação para agrupamento de instruções.
Mas também era lógico que eu descartei as

77
00:05:59,040 --> 00:06:04,632
coisas do ABC que eu particularmente não gostava.
Foi assim que chegamos ao Python.

78
00:06:10,000 --> 00:06:18,720
Ok. Finalmente eu estava confiante o suficiente de que
o interpretador era completo o suficiente, então eu

79
00:06:18,720 --> 00:06:24,800
mostrei a Lambert. Ele mostrou-me uma linguagem que tinha desenvolvido furtivamente,

80
00:06:24,800 --> 00:06:31,120
que ele chamou de Python, em homenagem a Monty
Python. Eu disse: olha o que eu fiz. Estava

81
00:06:31,120 --> 00:06:36,320
claro para mim que tinha alguma semelhança com
o ABC. O prompt da linha de comando é

82
00:06:36,320 --> 00:06:43,920
o mesmo. Então Lambert me observou digitar
algumas coisas e... Guido ficou animado com isso e ele

83
00:06:43,920 --> 00:06:48,240
aparentemente pensou que eu também ficaria animado.
Em algum momento ele já tinha visto o suficiente e disse:

84
00:06:48,240 --> 00:06:54,827
"Posso tentar uma coisa?" E ele digita uma linha muito
curta de código e isso travou o interpretador.

85
00:06:56,960 --> 00:07:02,640
And he knew that that it would. The point 
escaped me. I didn't know why he thought  

86
00:07:02,640 --> 00:07:08,400
this was better than ABC and why he had 
done this whole project. I went back and  

87
00:07:08,400 --> 00:07:15,120
the next day I had a fix for it. But it was 
a pretty crushing experience to be honest.

88
00:07:28,480 --> 00:07:32,720
It must have been at least half a year 
later, that I first got acquainted with  

89
00:07:32,720 --> 00:07:40,240
Python. So this is the office where Guido 
and I were holed up when he created Python.  

90
00:07:40,240 --> 00:07:47,360
There were two important users. Sjoerd was 
one of them and the other was Jack Jansen.

91
00:07:47,360 --> 00:07:54,720
Guido was sitting over there and I was sitting 
over there. If you want to prototype a program,  

92
00:07:54,720 --> 00:08:01,280
you sort of write the outlines of the program, 
but it doesn't actually work. When you do this  

93
00:08:01,280 --> 00:08:07,920
in Python, it actually works. It's readable. 
It's very easy to program and the indentation  

94
00:08:07,920 --> 00:08:13,680
is totally natural as far as I'm concerned 
anyway. Sjoerd and Jack were the most active  

95
00:08:13,680 --> 00:08:18,960
in using Python. You find bugs, you find the 
things that you want to extend and then telling  

96
00:08:18,960 --> 00:08:26,000
me about it because all they had to do was say, 
"Hey, Guido." It was the first real interactive  

97
00:08:26,640 --> 00:08:30,960
systems programming language. So, you could just 
sit and write and run it immediately without any  

98
00:08:30,960 --> 00:08:39,040
compilation. So, it was much more fun to use 
than the old programming languages, but slower.

99
00:08:39,040 --> 00:08:43,440
I think it was mostly Jack's idea in 
the end, while we all worked on it,  

100
00:08:43,440 --> 00:08:50,880
to make an open-source release. CWI allowed 
Guido to distribute Python to the world as  

101
00:08:50,880 --> 00:08:55,760
long as its copyright notice was there. They 
would have held back if they had known it  

102
00:08:55,760 --> 00:09:00,560
would be such an incredible success, which 
is good that they didn't know. Nobody knew.  

103
00:09:00,560 --> 00:09:07,200
I didn't either. Because if they had held back, 
it would never have become an incredible success.

104
00:09:08,720 --> 00:09:13,200
Then we had to actually physically do 
the release which turned out to be an  

105
00:09:13,200 --> 00:09:22,640
incredible pain because Usenet was 
the only thing we had to release it.

106
00:09:22,640 --> 00:09:30,400
Usenet was a network of, you could say, bulletin 
boards. People would write messages. They would  

107
00:09:30,400 --> 00:09:35,600
get distributed over the world and then there 
were the groups for all the different computer  

108
00:09:35,600 --> 00:09:44,800
languages. Usenet had a very strict limit on 
the size of a single post. First put your entire  

109
00:09:44,800 --> 00:09:52,080
source tree in a tarball. Then compress it and you 
have to do another step where you turn the binary  

110
00:09:52,080 --> 00:10:01,360
data into ASCII encoding. So you have this huge 
file with gobblygook, but it's at least printable  

111
00:10:01,360 --> 00:10:09,040
gobblygook. And then you apply another tool that 
snips it into pieces. Then there is a script where  

112
00:10:09,040 --> 00:10:16,400
if you have downloaded all 21 parts, you can 
undo all those operations in reverse. That was  

113
00:10:16,400 --> 00:10:22,400
what people put up with. So we did all the work on 
our side and plenty of people did all the work on  

114
00:10:22,400 --> 00:10:31,920
their side to unpack this because I had apparently 
written a very good teaser about what this was.

115
00:10:34,920 --> 00:10:42,240
[Music] Very quickly I started getting feedback 
via email or Usenet from people who had done  

116
00:10:42,240 --> 00:10:50,960
something exciting with it or who had 
found a bug and that just kept coming.

117
00:10:50,960 --> 00:10:57,760
We worked at Johnson Space Center. So our interest 
was putting together flight simulations and tools  

118
00:10:57,760 --> 00:11:05,680
for the design engineers that would be used 
for the shuttle program at the time. I remember  

119
00:11:05,680 --> 00:11:14,960
needing a scripting language to control a C++ 
library project we were working on at the time.  

120
00:11:14,960 --> 00:11:21,760
Not too long into that search, I found Guido's 
Python distribution at CWI. I was able to FTP  

121
00:11:21,760 --> 00:11:33,840
that down, unpack it, compile it, and run it in 
a matter of 10 minutes or so. That was my first  

122
00:11:33,840 --> 00:11:41,120
impressive experience with Python. 20 years ago, a 
computer that cost a million dollars and filled an  

123
00:11:41,120 --> 00:11:48,240
entire room had less capability than an 11 pounds 
desktop computer today. With costs going down and  

124
00:11:48,240 --> 00:11:53,600
capabilities going up, the computer has entered 
our lives quickly and unobtrusively. There were  

125
00:11:53,600 --> 00:11:59,520
lots of things changing in a major way that made 
computing particularly exciting to be in. At that  

126
00:11:59,520 --> 00:12:04,720
time, computers suddenly were coming out of the 
machine room and landing up on your desk. And  

127
00:12:04,720 --> 00:12:10,480
then of course the web happened. Then it all 
exploded. After the internet came to Europe,  

128
00:12:10,480 --> 00:12:17,920
it was much easier for software to be distributed. 
Python very slowly took off. Then there was  

129
00:12:17,920 --> 00:12:30,240
a growing Python community which was very 
supportive like a big family you could almost say.

130
00:12:30,240 --> 00:12:37,520
Part of the benefit of this is that I don't.. 
I'm like, there's no strain on my body at all.  

131
00:12:37,520 --> 00:12:45,920
I was working on developing a kind of distributed 
equipment database and a colleague at the lab,  

132
00:12:45,920 --> 00:12:51,440
Michael McLay, knew that I was looking for 
what was called a scripting language that was  

133
00:12:51,440 --> 00:12:57,200
also sophisticated that would enable you to build 
substantial things and not get bogged down in the  

134
00:12:57,200 --> 00:13:04,240
ragged edges. Scripting languages were designed 
to glue things together, to connect things that  

135
00:13:04,240 --> 00:13:10,320
already worked, that already existed. Immediately 
on trying it, I was just amazed and thought this  

136
00:13:10,320 --> 00:13:18,960
can't be as good as it is. And it was. Mike was 
interested in bringing Guido over and Guido was  

137
00:13:18,960 --> 00:13:26,320
interested in coming over. 99% of the people that 
I got in touch with were in the United States.  

138
00:13:26,320 --> 00:13:33,600
So Guido ended up coming and then Mike and Guido 
and I wanted to arrange a workshop so people who  

139
00:13:33,600 --> 00:13:38,800
were interested in Python could gather and talk 
about what they were working on and what they  

140
00:13:38,800 --> 00:13:47,280
felt was needed. This is the t-shirt for the first 
conference. And so this yeah that that was just  

141
00:13:47,280 --> 00:13:55,920
sort of flowy writing and on the on the back it 
gave the date of the conference. Spam, spam, spam,  

142
00:13:55,920 --> 00:14:02,880
spam. It's such a fantastic song. That workshop 
really is for me the beginning of the Python  

143
00:14:02,880 --> 00:14:09,280
community. November 1994, Gaithersburg, Maryland 
in this windowless government office building at  

144
00:14:09,280 --> 00:14:15,200
NIST. That was a great experience. It was about 
two days. We had 20 people. I still have the  

145
00:14:15,200 --> 00:14:20,960
t-shirt from that workshop. There was just kind 
of this feel of, hey, there's something happening.  

146
00:14:20,960 --> 00:14:26,480
This will be fun to hang out with the people 
that I chat with online, to actually see Guido  

147
00:14:26,480 --> 00:14:31,840
in person and actually make decisions. And we knew 
that if you impressed him with the feature and it  

148
00:14:31,840 --> 00:14:35,840
was an easy thing to install, he would add it to 
the language right there so that we can at least  

149
00:14:35,840 --> 00:14:39,840
try it out in beta form. There was like a whole 
room of people who knew what you were talking  

150
00:14:39,840 --> 00:14:51,680
about because they had all studied Python deeply 
or almost all. One of the people was Barry Warsaw.

151
00:14:51,680 --> 00:15:01,840
[Music] Around 1994, I joined a company, CNRI, 
Corporation for National Research Initiatives,  

152
00:15:01,840 --> 00:15:07,840
and we were building these software agents, 
little programs that can move around to  

153
00:15:07,840 --> 00:15:12,400
different computers on a network, and they pickle 
themselves up and move around to another place and  

154
00:15:12,400 --> 00:15:18,960
reconstitute themselves and do some more work. 
A friend of mine from NIST sent me an email and  

155
00:15:18,960 --> 00:15:22,880
said, "Hey, we've got this guy coming over from 
the Netherlands and he's going to talk about his  

156
00:15:22,880 --> 00:15:28,320
language. Do you want to come?" And so we went 
to the workshop and just absolutely fell in love  

157
00:15:28,320 --> 00:15:36,400
with of course Python and of course Guido. Even 
then, it had the feeling that there was a there  

158
00:15:36,400 --> 00:15:42,080
there was something that was going to happen 
that there was potential. I remember coming  

159
00:15:42,080 --> 00:15:48,080
back to CNRI saying, "Oh, this is great. we're 
going to use Python for sure in our project. And  

160
00:15:48,080 --> 00:16:04,480
one of our colleagues at CNRI said, "Well, what 
do you think? Why don't we just hire Guido?"

161
00:16:04,480 --> 00:16:11,040
CNRI was set up to sort of promote information 
infrastructure and foster research, help build  

162
00:16:11,040 --> 00:16:16,800
pilot projects, take the results and put 
them out into the public so that others  

163
00:16:16,800 --> 00:16:22,160
could then leverage it. Part of CNRI's mission 
was to cultivate internet based things. That's  

164
00:16:22,160 --> 00:16:30,560
why our name Corporation for National Research 
Initiatives has the word "initiatives" in there.

165
00:16:32,720 --> 00:16:40,880
We had a need for a language that would be easier 
for people to deal with than any other traditional  

166
00:16:40,880 --> 00:16:46,960
languages that were around at the time. I ran 
across a photograph. There was a party at CNRI,  

167
00:16:46,960 --> 00:16:56,640
years ago. It was probably I think 1996. 
And it's it's a Guido. Yeah. I used to say  

168
00:16:56,640 --> 00:17:02,560
Guido. Many people say Guido, but I said Guido 
and I'm sure I don't pronounce it right. Oh,  

169
00:17:02,560 --> 00:17:07,840
he was a very stylish person and he was a very 
strong fellow. Got introduced to him and it just  

170
00:17:07,840 --> 00:17:13,760
seemed like it was a good fit and so I made the 
job offer. For me, it was fantastic. There is no  

171
00:17:13,760 --> 00:17:18,800
doubt about that. One of the things he insists on 
if you want to get him to work for you is that he  

172
00:17:18,800 --> 00:17:25,360
has some fraction of his time, preferably as much 
as halftime if not more, to work on the language  

173
00:17:25,360 --> 00:17:31,600
itself. the fact that they could work full-time 
on Python because it turned out that the Knowbots  

174
00:17:31,600 --> 00:17:38,880
project was almost more an excuse to to hire 
me than I did much for that. I kind of feel  

175
00:17:38,880 --> 00:17:44,880
like our work on Python was a little subversive. 
You know, we tended to spend a lot more time on  

176
00:17:44,880 --> 00:17:50,640
Python than maybe we should have. I went to 
CNRI and since I had been a systems person,  

177
00:17:50,640 --> 00:17:56,800
I was responsible for setting up python.org. We 
should have also grabbed python.com even though  

178
00:17:56,800 --> 00:18:01,760
we didn't think of Python as a commercial 
enterprise because someone else got it and  

179
00:18:01,760 --> 00:18:13,680
uh used it to host a stupid porn site. For years 
we had to warn people go to python.org, not .com.

180
00:18:13,680 --> 00:18:18,960
It really was the perfect home, I think, for doing 
all of that early Python development - and develop  

181
00:18:18,960 --> 00:18:24,320
a lot of the infrastructure around Python. We 
had a meeting discussing making some kind of user  

182
00:18:24,320 --> 00:18:30,640
group or software organization where the Python 
software activity was proposed. We need a little  

183
00:18:30,640 --> 00:18:35,360
bit of governance, a little bit of organization, 
but we don't want too much because I don't think  

184
00:18:35,360 --> 00:18:40,880
any of us really liked bureaucracy. And then the 
question came up about what we should call Guido  

185
00:18:40,880 --> 00:18:48,400
as part of that. I think it was me who suggested 
that Guido be called the Benevolent Dictator and  

186
00:18:48,400 --> 00:18:55,600
then Barry suggested Benevolent Dictator for Life 
and that became an internet meme or actually a  

187
00:18:55,600 --> 00:19:05,440
software meme. Benevolent Dictator for Life was.. 
you can find it on Wikipedia. Ultimately, you  

188
00:19:05,440 --> 00:19:11,440
know, Guido was the inventor of the language and 
the final decider about yes, this is going to make  

189
00:19:11,440 --> 00:19:19,360
it in or this is not going to make it in. I think 
I developed my own style during those first years.  

190
00:19:19,360 --> 00:19:27,520
All ideas are welcome, but I will choose which 
ideas I believe are right to add to the language.  

191
00:19:27,520 --> 00:19:36,960
There's dozens and dozens of aspects of 
Python today where somebody had a vision for,  

192
00:19:36,960 --> 00:19:45,160
if you just add this to Python, look at 
all these amazing things that I can do.

193
00:19:45,160 --> 00:19:48,560
[Music]

194
00:19:48,560 --> 00:19:53,040
I'm one of the many people that came to Python, 
not as a programmer, but as a scientist. Python  

195
00:19:53,040 --> 00:19:57,920
wasn't the first language I used for science. I 
was doing satellite data processing and I used  

196
00:19:57,920 --> 00:20:01,600
Perl to do it and then a year later I would come 
back and try to figure out what I'd done and I  

197
00:20:01,600 --> 00:20:07,840
had no idea. Python had the opposite experience. I 
first started using Python in 1997. I just used it  

198
00:20:07,840 --> 00:20:12,480
to do some scripting, do some data processing with 
some medical imaging data and I was like this is  

199
00:20:12,480 --> 00:20:18,480
nice. This is pretty cool. A year later, so 1998, 
I came back to look at the code I'd written and I  

200
00:20:18,480 --> 00:20:23,040
could read it. I understood what I did. And that 
was kind of for me the convincing data that said,  

201
00:20:23,040 --> 00:20:28,240
"Oh, I need to dig in on this language." 
And there were a few really key people at  

202
00:20:28,240 --> 00:20:32,640
that time who were publishing or talking about 
how to use Python for science. Not very many,  

203
00:20:32,640 --> 00:20:38,640
but a few. Konrad Hinsen was one of them, I 
remember, and David Ascher and Jim Hugunin.  

204
00:20:38,640 --> 00:20:45,840
There's been a number of stages in the life 
cycle of Python, when it just grew from a a core  

205
00:20:45,840 --> 00:20:52,080
language capability to a platform with a number of 
different specialty modules and packages that made  

206
00:20:52,080 --> 00:20:59,120
it very very useful for certain user communities. 
The first one was probably the numeric community,  

207
00:20:59,120 --> 00:21:04,320
the science and engineering folks that wanted 
high performance matrix operations to be done.  

208
00:21:04,320 --> 00:21:09,040
Even though Guido wasn't a scientist himself, 
wasn't necessarily deeply concerned with the  

209
00:21:09,040 --> 00:21:16,480
same things that we were concerned with as 
scientists, he was open to the suggestions.

210
00:21:16,480 --> 00:21:19,840
I think one of the things that people don't 
appreciate about the Python language as much  

211
00:21:19,840 --> 00:21:25,360
now that it's so popular and mainstream 
is how important it was that Guido was  

212
00:21:25,360 --> 00:21:31,840
open to new ideas and open to the needs of 
people who are not traditional programmers.  

213
00:21:32,640 --> 00:21:41,120
I think he had a very clear-eyed quiet focus 
on understanding some things about the future  

214
00:21:41,120 --> 00:21:46,560
that he built into the language. It was uniquely 
suited to its environment. One of the reasons I  

215
00:21:46,560 --> 00:21:50,640
used Python and I think a lot of people used 
Python at the time is that in the early 2000s,  

216
00:21:50,640 --> 00:21:55,360
the world was almost divided into here's an 
open source ecosystem or you can go and use  

217
00:21:55,360 --> 00:22:00,000
Java which is actually a paid thing. I 
was using MATLAB. I really didn't like  

218
00:22:00,000 --> 00:22:02,880
the fact that when I wrote code and I 
wanted to share that code with others,  

219
00:22:02,880 --> 00:22:07,440
I was essentially telling people they had to go 
buy a license for a software package before they  

220
00:22:07,440 --> 00:22:10,320
could even look at my or use my code. You 
know, these are the days where you have to  

221
00:22:10,320 --> 00:22:16,720
like buy the developer tools or spend a couple 
hundred bucks to get Visual Studio 6.0 and then  

222
00:22:16,720 --> 00:22:21,120
Python and then all of these libraries were open 
source and then could be adapted, could be used  

223
00:22:21,120 --> 00:22:27,120
in a commercial project. I was sort of early 
on convinced by community members that Python  

224
00:22:27,120 --> 00:22:33,440
being open- source and the particular way it was 
open source was very important so that people  

225
00:22:33,440 --> 00:22:48,000
would feel comfortable using Python to make great 
things that they would then be able to to sell.

226
00:22:51,320 --> 00:22:58,080
[Music] In 1998, Blender was published on 
the internet. The software was free and  

227
00:22:58,080 --> 00:23:04,080
then you could buy some things around it. 
We were restricted to use open source. So,  

228
00:23:04,080 --> 00:23:10,880
you didn't have a lot of options. We were doing a 
call on our website like what is the most popular  

229
00:23:10,880 --> 00:23:18,400
scripting language that we should add in Blender? 
Perl was really big and Python was upcoming and  

230
00:23:18,400 --> 00:23:24,640
there were some others. And it was interesting 
to see that everybody who was advising us to  

231
00:23:24,640 --> 00:23:32,960
use Perl as scripting language but they only 
advertised how great Perl is. And the people  

232
00:23:32,960 --> 00:23:38,880
who came more from the Python background who 
said well I think Python is a better choice.  

233
00:23:38,880 --> 00:23:43,280
They came with a balanced opinion. And they 
said okay Perl will give you this and this  

234
00:23:43,280 --> 00:23:49,760
and this and Python will give you other things 
and balancing all of it I would recommend you to  

235
00:23:49,760 --> 00:24:04,320
do Python and only for that reason I picked 
Python just because the people were nicer.

236
00:24:04,320 --> 00:24:09,360
It was honestly just a lot of enthusiasts. It was 
a lot of people who just enjoyed the language,  

237
00:24:09,360 --> 00:24:12,560
enjoyed the people involved with the 
language and it would just happen  

238
00:24:12,560 --> 00:24:16,000
to be typically motivating enough for 
people to want to help out. Ultimately,  

239
00:24:16,000 --> 00:24:21,680
there's a sense of fun that comes across 
and Guido coded that into the name of the  

240
00:24:21,680 --> 00:24:30,640
language influenced by Monty Python. It creates 
a sense of community to have your little jokes.

241
00:24:30,640 --> 00:24:37,600
Tim Peters is a famous early example of blending 
both like the aesthetics of Python and humor. Tim  

242
00:24:37,600 --> 00:24:45,360
Peters was this mythical feature.. creature in 
the world of Python, and no one had met him. He  

243
00:24:45,360 --> 00:24:51,760
was out there in the ether as a wise one to give 
us advice on what to do with numerical processing.  

244
00:24:51,760 --> 00:24:58,400
Steve Majewski sent me some email telling me about 
Python. So I started a email correspondence with  

245
00:24:58,400 --> 00:25:03,120
Guido about the language and about the design 
and I got some of the pre-release code and played  

246
00:25:03,120 --> 00:25:10,880
with it and talked to him about design decisions 
and liked it very much. Tim Peters was a Python  

247
00:25:10,880 --> 00:25:18,560
contributor and community member and mentor 
to me from very early on. Tim was a channeler  

248
00:25:18,560 --> 00:25:24,560
of Guido. He had a really unique way of saying: I 
think Guido's going to like this or I don't think  

249
00:25:24,560 --> 00:25:30,240
Guido is going to like that. There's a poem called 
the Zen of Python which is a partially humorous,  

250
00:25:30,240 --> 00:25:39,600
partially serious poem about the the aesthetics of 
of Python. I'm actually looking at the Usenet post  

251
00:25:39,600 --> 00:25:47,840
where Tim posted his first version of the Zen of 
Python, although he called it the Way of Python.  

252
00:25:47,840 --> 00:25:54,160
And it was in response to some discussion 
where people were complaining that they  

253
00:25:54,160 --> 00:25:59,680
didn't understand what was Python's philosophy. 
They couldn't figure me out. And Tim had figured  

254
00:25:59,680 --> 00:26:09,280
me out and he put it basically in poetry. Here 
is the Way of Python by Tim Peters from 1999.  

255
00:26:09,280 --> 00:26:15,920
Beautiful is better than ugly. Duh. Explicit 
is better than implicit. Simple is better than  

256
00:26:15,920 --> 00:26:23,280
complex. Complex is better than complicated. And I 
love that distinction. Flat is better than nested.  

257
00:26:23,280 --> 00:26:29,920
Sparse is better than dense. Readability counts. I 
will say it counts for a lot. Special cases aren't  

258
00:26:29,920 --> 00:26:36,400
special enough to break the rules. Although 
practicality beats purity. Errors should never  

259
00:26:36,400 --> 00:26:43,760
pass silently unless explicitly silenced. In the 
face of ambiguity, refuse the temptation to guess.  

260
00:26:43,760 --> 00:26:51,520
I did not follow that in a very key piece of NumPy 
and it's still a mess. There should be one and  

261
00:26:51,520 --> 00:26:59,280
preferably only one obvious way to do it. That's 
a direct reference to Perl's motto of there's  

262
00:26:59,280 --> 00:27:03,680
more than one way to do it by the way. Although 
that may not be obvious at first, unless you're  

263
00:27:03,680 --> 00:27:09,760
Dutch. Now is better than never. Although never is 
often better than right now. If the implementation  

264
00:27:09,760 --> 00:27:15,520
is hard to explain, it's a bad idea. That's a 
really good one. If the implementation is easy  

265
00:27:15,520 --> 00:27:21,840
to explain, it may be a good idea. Name spaces 
are one honking great idea. Let's do more of  

266
00:27:21,840 --> 00:27:31,360
those. This is so Tim. Normally 'import this', 
imports some useful library, which is very serious  

267
00:27:31,360 --> 00:27:38,000
business. Having an 'import this' that was just 
a joke was a bit of lightness that we liked to  

268
00:27:38,000 --> 00:27:43,120
add. This is from a small hobbyist community, 
right? Because if you're a corporate behemoth  

269
00:27:43,120 --> 00:27:47,120
making a a programming language, like someone's 
probably going to tell you that you can't put a  

270
00:27:47,120 --> 00:27:52,720
silly poem in your in your programming language, 
but Python's just made by dogs on the internet,  

271
00:27:52,720 --> 00:28:00,240
so they can put poems in their software. [Music] 
The different ways to make money on the internet  

272
00:28:00,240 --> 00:28:05,440
are just beginning to emerge. Entrepreneurs are 
putting their faith in a new medium to deliver  

273
00:28:05,440 --> 00:28:11,200
the big payoff. It's the dot-com bubble, all 
this money pumping into Silicon Valley software  

274
00:28:11,200 --> 00:28:19,600
and internet stuff. Early 2000, I decided to 
leave CNRI and with a few co-workers joined  

275
00:28:19,600 --> 00:28:27,120
little startup named BeOpen. While CNRI, I think, 
was an amazing home for Python in the early days,  

276
00:28:27,120 --> 00:28:31,760
everything changes and everything evolves and 
thinking, well if we're going to strike out on our  

277
00:28:31,760 --> 00:28:38,480
own this is probably the right time to do that. 
That didn't work out. I'd say within maybe a year  

278
00:28:38,480 --> 00:28:45,200
or something. BeOpen was completely incompetent. 
We spent the summer in blissful ignorance working  

279
00:28:45,200 --> 00:28:53,120
full-time on Python. We built and released Python 
2 and within 5 months it was over. We were paid  

280
00:28:53,120 --> 00:29:02,400
our salaries every 2 weeks, and then suddenly in 
late October we weren't. [Music] It was a moment  

281
00:29:02,400 --> 00:29:08,400
where the [ __ ] could have hit the fan. If all 
the Python guys went their separate ways... Python  

282
00:29:08,400 --> 00:29:14,880
wasn't big enough to survive that at the time. 
That was when I had a company Digital Creations  

283
00:29:14,880 --> 00:29:19,840
that later became Zope, which is an application 
server, database server, index server, web server,  

284
00:29:19,840 --> 00:29:26,240
etc. Very large scale commercial quality 
application written in Python. And if Python died,  

285
00:29:26,240 --> 00:29:32,560
you know who else would die? We'd die. The whole 
platform was built on Python. So they were Python  

286
00:29:32,560 --> 00:29:40,560
experts. We need to go and make sure that Python 
is secure for the future and that the team stays  

287
00:29:40,560 --> 00:29:49,520
together. So we negotiated an agreement with them 
to join my company. That was an incredibly lucky  

288
00:29:49,520 --> 00:29:53,760
rescue. We felt like we really trusted them 
and we believed in what they were doing and  

289
00:29:53,760 --> 00:30:00,320
what they wanted to do with Python and for Python. 
This is a place that I'm proud of. In hindsight,  

290
00:30:00,320 --> 00:30:06,160
it was a really critical point in Python's life. 
I think if we had chosen wrong or tried to say,  

291
00:30:06,160 --> 00:30:11,040
"Oh, well, we'll just strike out on our 
own anyway." You never know. But I'm not  

292
00:30:11,040 --> 00:30:33,913
so sure that Python would have survived 
that juncture in its life. Yeah. [Music]

293
00:30:33,913 --> 00:30:33,920
[Music]

294
00:30:33,920 --> 00:30:40,000
Python just kept sort of growing and 
the community kept self-organizing.  

295
00:30:40,000 --> 00:30:48,400
One of the I think underlying themes of Python, 
if you take it in its totality, is this sense of  

296
00:30:48,400 --> 00:30:56,720
grassroots movements. Things grow from the bottom 
up and evolve to the point where everybody sort of  

297
00:30:56,720 --> 00:31:02,880
realizes, oh, we need a little bit more structure. 
Oh, the Python Software Foundation. In my opinion,  

298
00:31:02,880 --> 00:31:10,000
the PSF, that damn thing was a success from day 
one. That came out of one of the concerns we had  

299
00:31:10,000 --> 00:31:19,280
had with BeOpen actually. So CNRI had written 
a license for Python and put its name on it and  

300
00:31:19,280 --> 00:31:26,000
BeOpen had copied a version of that license 
and put the BeOpen name on it. There was a  

301
00:31:26,000 --> 00:31:32,400
concern that at some point I might accidentally 
end up working for a company that tried to grab  

302
00:31:32,400 --> 00:31:39,040
ownership of Python. We realized that we really 
need an organization that will be independent,  

303
00:31:39,040 --> 00:31:47,760
will not be beholden to any company and their 
whims and their lawyers and will really keep  

304
00:31:47,760 --> 00:31:59,840
Python users as their first and foremost customer, 
so to speak, in mind. [Music] And then the magic  

305
00:31:59,840 --> 00:32:17,920
happened when we got into PyCon, which is maybe 
the third stool of the miracle of Python. [Music]

306
00:32:17,920 --> 00:32:24,160
What has been your take away from PyCon US this 
year? It feels like people are still willing to  

307
00:32:24,160 --> 00:32:29,440
go do hard things, work on things together, you 
know. Wow. They still do have the passion to be  

308
00:32:29,440 --> 00:32:35,280
honest. So, what was it for you? Uh, for me most 
definitely like meeting people I haven't met in  

309
00:32:35,280 --> 00:32:40,640
a while. That's cool. Yeah. And just pretty 
much hanging out with them. You try to walk,  

310
00:32:40,640 --> 00:32:45,040
Yeah, to the other side. There's like 10 
people that you want to see in between like  

311
00:32:45,040 --> 00:32:52,080
stop. I want to talk to you. Oh, I know. Pablo 
and Yuri presented as bananas and then Lukasz  

312
00:32:52,080 --> 00:32:56,480
asked the question dressed as a banana. 
And then Guido came in just as a banana  

313
00:32:56,480 --> 00:33:01,760
as well. Thank you for what you do for the 
PSF. Please don't step down. Just keep doing  

314
00:33:01,760 --> 00:33:08,080
it forever. Raise your hand if you love the 
web. Just raise your hand. Raise your hand  

315
00:33:08,080 --> 00:33:17,360
if you have done React front-ends. Raise your 
hand if you would like to come back. To React?

316
00:33:17,360 --> 00:33:24,320
No, come back to Python. All right. Good. For 
the record, 100%. I begged my mother to take  

317
00:33:24,320 --> 00:33:33,280
me to PyCon and I met all my online heroes. He 
was this distant Benevolent Dictator for life  

318
00:33:33,280 --> 00:33:38,240
who I'd been talking to over the internet, but 
here he was in person and so I was thrilled to  

319
00:33:38,240 --> 00:33:43,040
be able to finally meet him. Then I 
think everyone was aware that he was  

320
00:33:43,040 --> 00:33:49,520
a 15-year-old kid on the other end of the 
terminal. When PyCon was held in Montreal,  

321
00:33:49,520 --> 00:33:55,680
the organizer asked me if I'd be willing to 
give an opening address to the conference. Well,  

322
00:33:55,680 --> 00:34:02,160
I'm a slightly fast talker and I had some spare 
time and I just used it as an opportunity to say  

323
00:34:02,160 --> 00:34:06,160
thank you. "I like to think of it as I came for 
the language, but I stayed for the community. So,  

324
00:34:06,160 --> 00:34:10,480
I want to personally thank all of you for 
making this such a wonderful place to be  

325
00:34:10,480 --> 00:34:15,120
and such a wonderful group of people to be 
around. So, thank you". Luckily, it came  

326
00:34:15,120 --> 00:34:21,520
off well because people still quote it. I think 
it kind of speaks to the core ethos of Python.  

327
00:34:21,520 --> 00:34:28,880
We try to develop this tool that people can use 
for their needs to get their work done. But the  

328
00:34:28,880 --> 00:34:36,520
community is the true strength of Python. It's 
not just the language, right? It's the people.

329
00:34:36,520 --> 00:34:43,840
[Music] It was steadily growing every single 
year. It was getting more and more downloads,  

330
00:34:43,840 --> 00:34:50,160
more and more people making use of it. It 
became a more sophisticated language that was  

331
00:34:50,160 --> 00:34:57,760
fit for purpose for this new emerging programming 
paradigm where the the web itself is the platform.  

332
00:34:57,760 --> 00:35:04,640
He told me an interesting number that that made me 
realize that the Python user community was already  

333
00:35:04,640 --> 00:35:10,960
much bigger than I had estimated because 
he said, "Guido, you don't know the sales  

334
00:35:10,960 --> 00:35:17,600
numbers for Python books, but I am Tim O'Reilly. 
I published the two most important ones and I do  

335
00:35:17,600 --> 00:35:23,920
know the sales numbers and they are fantastic." 
I don't know if he had that much enthusiasm in  

336
00:35:23,920 --> 00:35:30,880
his voice then, but he was sharing this new 
to me important fact which made me realize,  

337
00:35:30,880 --> 00:35:38,720
oh my gosh! Python tends to get spikes when 
certain specialties, I guess you could say,  

338
00:35:38,720 --> 00:35:44,080
pick the language up and decide that this is 
a thing that they want to use in their area.  

339
00:35:44,080 --> 00:35:49,600
Everybody wanted to to do things with the 
worldwide web and Python actually became  

340
00:35:49,600 --> 00:35:57,200
a really powerful platform for for doing not 
just web pages but web servers and services and  

341
00:35:57,200 --> 00:36:07,680
suddenly we had an increase of people coming in 
from the web world. [Music] I think Dropbox was  

342
00:36:07,680 --> 00:36:12,960
one of the early companies to start building 
in Python and reaching millions of users.  

343
00:36:14,080 --> 00:36:18,480
My name's Drew and I'll be showing you a quick 
tour of Dropbox, which is a new way to store and  

344
00:36:18,480 --> 00:36:24,000
share files online. Python had been largely viewed 
as scripting language you run on the back end or  

345
00:36:24,000 --> 00:36:29,040
maybe in an academic setting or in a scientific 
setting, but not really for like production  

346
00:36:29,040 --> 00:36:33,760
desktop software that you ship to millions of 
people. But I just started writing in Python  

347
00:36:33,760 --> 00:36:38,000
and hoping that none of the roadblocks would 
completely blow me up. You can develop programs  

348
00:36:38,000 --> 00:36:43,520
much faster in Python because it's a higher level 
language and it's a very clean easy language and  

349
00:36:43,520 --> 00:36:48,960
so we could we could be a lot more competitive 
than other companies who were writing with Java  

350
00:36:48,960 --> 00:36:54,960
or C++ or Perl. Even back then we were competing 
against the Google's and Microsofts of the world  

351
00:36:54,960 --> 00:37:00,720
and you know our odds didn't seem very good. So 
we needed all the help we can get. Google had this  

352
00:37:00,720 --> 00:37:06,400
big team like a hundred people, C++ programmers, 
trying to do a video hosting site and they could  

353
00:37:06,400 --> 00:37:10,880
never keep up with this little thing over there 
called YouTube and they went and looked and it was  

354
00:37:10,880 --> 00:37:16,480
just a couple of people writing Python. Python 
ended up being a big force multiplier on our  

355
00:37:16,480 --> 00:37:25,200
effort and no other language that we considered 
had anything close to that kind of capability.

356
00:37:27,160 --> 00:37:28,160
[Music]

357
00:37:28,160 --> 00:37:32,080
The fact that data science suddenly 
became a thing that you had to do,  

358
00:37:32,080 --> 00:37:39,200
combined with the fact that Python was sort 
of well positioned to do data science stuff  

359
00:37:39,200 --> 00:37:50,080
meant a huge amount of new Python users flowed in.

360
00:37:50,080 --> 00:37:56,800
What was starting to happen in the 2009-2010 
time frame, we were seeing more and more of  

361
00:37:56,800 --> 00:38:03,360
our consulting deals tied to using Python not as 
really a replacement for MATLAB or engineering  

362
00:38:03,360 --> 00:38:09,680
type things, but using Python for doing data 
processing. We didn't call it data science at the  

363
00:38:09,680 --> 00:38:13,360
time, but it was that kind of work, right? It was 
modeling, predictive analytics, things like that.  

364
00:38:13,360 --> 00:38:18,320
This is the time of Hadoop, the time of big data, 
the time of Spark, and people were doing Java at  

365
00:38:18,320 --> 00:38:24,160
scale. We were starting to do much more consulting 
work in the financial industry and we'd walk into  

366
00:38:24,160 --> 00:38:28,880
these large very well-capitalized firms and they 
were using Python to do business data processing.  

367
00:38:28,880 --> 00:38:33,200
I realized okay if it's a research group over 
here doing some science research and they don't  

368
00:38:33,200 --> 00:38:38,640
have money and they use an open source thing 
I get it but if you have JP Morgan right which  

369
00:38:38,640 --> 00:38:43,120
has a lot of money and they're picking up and 
using these scientific tools and they're loving  

370
00:38:43,120 --> 00:38:48,800
it. I realized that we didn't just have a cheap 
free alternative. We actually had something that  

371
00:38:48,800 --> 00:38:54,480
was innovative and that was doing something fairly 
unique. Peter and I ended up leaving Enthought and  

372
00:38:55,120 --> 00:39:02,160
starting another company. We started as Continuum 
Analytics actually and its vision was to scale  

373
00:39:02,160 --> 00:39:08,640
NumPy and Pandas to large data sets and large 
clusters. We quickly ran into a simple problem,  

374
00:39:08,640 --> 00:39:12,880
very quickly in, but a very annoying problem. 
Yes. people just couldn't even install the  

375
00:39:12,880 --> 00:39:19,200
software needed to run all this Python stuff. The 
thing about the Python scientific and data stack  

376
00:39:19,200 --> 00:39:23,680
is that all of these different libraries, they're 
very different than the web development libraries  

377
00:39:23,680 --> 00:39:28,320
because these data libraries are often backed 
by a very large amount of complex C++, Fortran,  

378
00:39:28,320 --> 00:39:34,000
other kinds of software modules. And to build 
those correctly takes some work. To build them  

379
00:39:34,000 --> 00:39:38,880
correctly on every operating system takes even 
more work. And then to build them so that they  

380
00:39:38,880 --> 00:39:44,640
can actually be connected together, that requires 
you to have this entire build system rationalized.  

381
00:39:44,640 --> 00:39:48,640
And so the very first thing we did was like make 
a distribution of Python to make it easy to get  

382
00:39:48,640 --> 00:39:52,800
that installed. A lot of the data science Python 
people, they didn't even use normal Python. They  

383
00:39:52,800 --> 00:39:56,720
used this Anaconda Python distribution. Sort of 
a dumb joke that I came up with at one point.  

384
00:39:56,720 --> 00:40:03,360
It was basically Python for big data. So it's a 
big snake. So Anaconda. After like a few years,  

385
00:40:03,360 --> 00:40:07,520
we kept going to conferences and going 
to places and people wouldn't know who we  

386
00:40:07,520 --> 00:40:11,200
were. But the instant that we mentioned that 
we make Anaconda, they would say, "Oh, yeah,  

387
00:40:11,200 --> 00:40:14,880
of course. I love Anaconda. I use it all the 
time." Right? So, after that happened like the  

388
00:40:14,880 --> 00:40:19,280
thousandth time, we said, "Okay, maybe we should 
rename the company Anaconda." Data engineering  

389
00:40:19,280 --> 00:40:26,560
became a discipline where Python was incredibly 
entrenched. It was Python and R. And over time,  

390
00:40:26,560 --> 00:40:31,200
Python's data analysis libraries caught up and 
plotting libraries and stuff started to catch up  

391
00:40:31,200 --> 00:40:36,720
to what R had. And then people realized, oh well, 
with Python, I can work end to end with my data  

392
00:40:36,720 --> 00:40:42,240
versus R being very good at data analysis, but 
not necessarily like the data collection stage  

393
00:40:42,240 --> 00:40:46,960
and various other stages. I remember going to 
a Python conference at one point. I was like,  

394
00:40:46,960 --> 00:40:52,160
there's so many sciency people here like where 
are all the web developers? This is all data data  

395
00:40:52,160 --> 00:40:55,440
pipelines and stuff. I don't want to be immodest 
about this because it was a collective effort for  

396
00:40:55,440 --> 00:40:59,840
the whole community, but I think that what we 
did at Anaconda, not only making the software  

397
00:40:59,840 --> 00:41:04,640
installer that made it one click for people to 
just run, but also shephering the conferences  

398
00:41:04,640 --> 00:41:09,680
and building that community and and whatnot 
was really critical. They were incredibly  

399
00:41:09,680 --> 00:41:20,120
important contributions. I think we actually made 
Python super popular. I I think we did. [Music]  

400
00:41:24,480 --> 00:41:28,960
Well, I remember hearing from a friend of 
mine that Guido van Rossum was just working  

401
00:41:28,960 --> 00:41:34,560
at Google. And that when I thought about 
it, I'm like, wait, yeah, Guido, I guess,  

402
00:41:34,560 --> 00:41:41,120
works at a normal company and I can't remember 
the exact circumstances, but I think either  

403
00:41:41,120 --> 00:41:45,920
I got an introduction to him or I just maybe I 
think maybe just send him an email saying, "Hey,  

404
00:41:45,920 --> 00:41:52,720
um, big fan of your work." you know, it's like fan 
mail basically. And he responded and we got lunch.  

405
00:41:52,720 --> 00:41:58,400
I mean, he's a hero of mine and he was totally 
friendly and approachable. And at that talk,  

406
00:41:58,400 --> 00:42:04,480
it was revealed that Dropbox was entirely written 
in Python, both the client and the server,  

407
00:42:04,480 --> 00:42:08,640
and that was exciting. He was interested in 
what we were doing with Python. And I think  

408
00:42:08,640 --> 00:42:15,040
we were stretching the language and the runtime in 
interesting ways. He approached me again and said,  

409
00:42:15,040 --> 00:42:21,520
"Hey, we would really like you to work for us." 
And then to my surprise and delight, he ended up  

410
00:42:21,520 --> 00:42:28,400
joining the Dropbox team, which was super exciting 
for all of us. I stayed there for 7 years. We did  

411
00:42:28,400 --> 00:42:35,280
more important stuff for Python than I did during 
7 years at Google I think. I think he had a big  

412
00:42:35,280 --> 00:42:39,680
impact on the rest of the team. You know, here's 
someone who's one of the icons of computing,  

413
00:42:39,680 --> 00:42:45,360
but you would never know it just from his, you 
know, how he badges in to the office every day  

414
00:42:45,360 --> 00:42:52,720
and I think set a really great example in terms 
of being super humble and curious and friendly.  

415
00:42:52,720 --> 00:43:00,320
You know, it's hard for me to think of someone 
who has had more impact with lower ego. Uh,  

416
00:43:00,320 --> 00:43:08,400
let's start with the first Python license 
plate. Sorry, that was my car when we lived in  

417
00:43:08,400 --> 00:43:17,040
Virginia. And there was a box on the application 
- sorry, just grabbing the other one, too - uh,  

418
00:43:17,040 --> 00:43:23,040
do you want a custom license plate? So, I managed 
to get Python in Virginia and in California,  

419
00:43:23,040 --> 00:43:30,800
Python was long taken. Like someone in Silicon 
Valley probably has a Python license plate  

420
00:43:30,800 --> 00:43:40,160
somewhere. So, the best I could get was PY3K, 
which I thought was pretty pretty cute anyway.

421
00:43:40,160 --> 00:43:46,320
It became ever more popular and people 
started thinking about flaws in the  

422
00:43:46,320 --> 00:43:51,360
language. There were a lot of ideas floating 
around the core development community,  

423
00:43:51,360 --> 00:43:54,640
changes you could make to the language that 
people thought would be major improvements.  

424
00:43:54,640 --> 00:44:00,160
The only problem with them was that they would 
break old Python code that currently existed.  

425
00:44:00,160 --> 00:44:06,560
Some of that probably got away 
from us a little bit in hindsight.

426
00:44:06,560 --> 00:44:15,200
We released Python 3.0 in December of 
2007. I remember because I was actually  

427
00:44:15,200 --> 00:44:20,640
interning under Guido at the time. We were 
giving people roughly 5 years, I think,  

428
00:44:20,640 --> 00:44:25,280
to do the transition. And everyone thought 
that was just extraordinarily generous. The  

429
00:44:25,280 --> 00:44:30,560
world would totally be on Python 3 in just a few 
years. This is best for the language long term.  

430
00:44:30,560 --> 00:44:33,600
We're going to make these changes. The community 
has always come along with us. We think they'll  

431
00:44:33,600 --> 00:44:43,280
come along this journey as well. We were very 
naive about that and they they made us know it.

432
00:44:43,280 --> 00:44:47,200
The community said, "No, not worth 
it. Kill it. Don't do it. It's not  

433
00:44:47,200 --> 00:44:55,440
going to work." This included some very 
notable individuals in the community.

434
00:45:03,680 --> 00:45:09,280
So, please welcome our next speaker.

435
00:45:09,280 --> 00:45:14,400
Hi, my name is Armin. You might be familiar with 
some of the Python libraries that I wrote and  

436
00:45:14,400 --> 00:45:19,520
you might even maybe use some of them. The 
Python 2 to Python 3 transition. Initially,  

437
00:45:19,520 --> 00:45:24,000
it happened very gradually over many years. There 
was the version that everybody used and there was  

438
00:45:24,000 --> 00:45:27,920
sort of the version on the side that was built 
that nobody used. People didn't want to put in the  

439
00:45:27,920 --> 00:45:37,760
effort because their code worked, you know, why 
rewrite it. It's very hard to mix Python 2 and 3.

440
00:45:37,760 --> 00:45:41,760
It's uh it's a it's a headache. 
So I just didn't move and a lot  

441
00:45:41,760 --> 00:45:46,400
of people didn't move. It felt there's a 
likelihood that it will not go anywhere.  

442
00:45:46,400 --> 00:45:53,360
It felt much more like a top-down decision than 
any of the things in the past. And that top- down  

443
00:45:53,360 --> 00:46:00,800
decision, I think for some people felt like it 
was not inclusive of the real pains of people who  

444
00:46:00,800 --> 00:46:08,800
had a long tale of use cases. I think I severely 
underestimated how successful Python already was.  

445
00:46:08,800 --> 00:46:16,720
How many people had written so much code in 
Python 2 that it would be hard for them to  

446
00:46:16,720 --> 00:46:23,120
sort of put the effort into translate to Python 
3. I thought the most controversial thing by far  

447
00:46:23,120 --> 00:46:28,160
was that we wanted to change the way Unicode 
was handled. A way to say these things are  

448
00:46:28,160 --> 00:46:32,800
strings and they're human consumable. They're 
words that people want to read and write and  

449
00:46:32,800 --> 00:46:37,360
these things are bytes. These are things 
that computers want to read and write.

450
00:46:39,360 --> 00:46:46,080
We basically made all strings Unicode and we made 
you use a new prefix 'b' for bytes. And this was  

451
00:46:46,080 --> 00:46:50,640
incredibly disturbing. I was implementing 
a WSGI library at the time and one of the  

452
00:46:50,640 --> 00:46:54,800
things that you do when you implement WSGI, 
is that you have to parse HTTP data. You have  

453
00:46:54,800 --> 00:46:59,680
to parse cookie data. And there there was 
always a mixture of bytes and Unicode. And  

454
00:46:59,680 --> 00:47:04,400
it was very easy to work with on Python 2. And 
it was incredibly annoying to work on Python 3,  

455
00:47:04,400 --> 00:47:10,320
at least initially. There really wasn't 
a way to convert your Python 2 code to  

456
00:47:10,320 --> 00:47:14,880
Python 3. The tools didn't exist. I 
started writing blog posts about it.  

457
00:47:14,880 --> 00:47:31,600
Why I think that in the way which Python 3 
works right now, I just cannot see the move.

458
00:47:31,600 --> 00:47:37,280
He was a valued community member. And at 
the time I was actually quite surprised  

459
00:47:37,280 --> 00:47:45,040
that he was so viciously attacking Python 
3. I was probably even more negative on it  

460
00:47:45,040 --> 00:47:50,080
than appropriate. But Python had such a good 
run and I put so much energy into it. I was  

461
00:47:50,080 --> 00:47:54,160
part of like building out web frameworks 
and and all these libraries. I felt like:  

462
00:47:54,160 --> 00:47:59,200
why are we ruining all of this with this move 
that didn't even have that many benefits.  

463
00:47:59,200 --> 00:48:06,560
I had not appreciated how many people already 
had enormous code bases or were on their way  

464
00:48:06,560 --> 00:48:13,760
to building up enormous code bases. The payback 
for that was that I had to initiate the project  

465
00:48:13,760 --> 00:48:22,640
at Dropbox. We had a pretty long road to migrate 
many millions of lines of Python 2 code. 5 million  

466
00:48:22,640 --> 00:48:28,640
lines of code in the server alone and another 
million for the client. That is a very large  

467
00:48:28,640 --> 00:48:48,400
pile of code to transform. And so we had to 
invent ways of sort of doing it in in pieces.

468
00:48:55,080 --> 00:48:56,080
[Laughter]  

469
00:48:56,080 --> 00:49:01,280
A funny sticker I found in my pocket. 
There's a built tool called Bazel.  

470
00:49:01,280 --> 00:49:07,040
It's sort of a frozen version of 
Python 2. So here the sticker says  

471
00:49:07,040 --> 00:49:12,880
after re-education enemy of the people 
Python denounced their bourgeois class,  

472
00:49:12,880 --> 00:49:18,160
renounced formalist notions like Turing 
incompleteness and began a new life as  

473
00:49:18,160 --> 00:49:26,000
citizen Starlark. This is especially an 
example of Benjamin Peterson's humor.  

474
00:49:27,280 --> 00:49:33,760
I had the fortune or the misfortune depending how 
you see it to be the uh Python 2.7 release manager  

475
00:49:33,760 --> 00:49:41,920
for an entire decade. We had to adjust our plans 
for Python 3 and for Python 2 so that there was  

476
00:49:41,920 --> 00:49:48,720
a longer series of releases where there were both 
new Python 2 versions and new Python 3 versions.  

477
00:49:48,720 --> 00:49:53,680
What ended up happening is then the community was 
like maintaining 2 and 3 and that created a lot  

478
00:49:53,680 --> 00:49:59,120
of burden. And so this was happening all during 
the growth of NumPy. We made it work for Python  

479
00:49:59,120 --> 00:50:11,200
2 and then I think Python 3.1 I think or 3.2, 
we also made it work there but saw no adoption.

480
00:50:11,200 --> 00:50:17,600
We knew it was going to take a long time. 
Uh we knew it was going to be painful but  

481
00:50:17,600 --> 00:50:22,640
there is light at the end of the tunnel. The 
community contributed stuff like lib2to3 and  

482
00:50:22,640 --> 00:50:29,360
other migration tools came out. Benjamin Peterson 
wrote Six that really helped that transition. The  

483
00:50:29,360 --> 00:50:34,960
language itself became a little more backwards 
compatible. I eventually advocated to bring  

484
00:50:34,960 --> 00:50:39,360
back the 'u' prefix on the strings and that 
actually made it easier to write unified code  

485
00:50:39,360 --> 00:50:43,120
bases that target both Python 2 and Python 
3. There was a point in time where we made  

486
00:50:43,120 --> 00:50:53,360
a very strong declaration, there will never 
be a Python 2.8 and Python 3 is the future.

487
00:50:53,360 --> 00:51:00,640
Python 3 just is a better language and it 
is getting better over time. Python 2 on  

488
00:51:00,640 --> 00:51:06,960
the other hand is a fine language and it will 
remain exactly what it is. For a long time,  

489
00:51:06,960 --> 00:51:11,360
there was a lot of measurement of how much 
Python 2 usage is there, how much Python 3  

490
00:51:11,360 --> 00:51:16,080
usage is there. I think it was when Python was in 
Portland, was roughly when we started to see like  

491
00:51:16,080 --> 00:51:22,720
50/50. Once 3.4 came out, it actually added some 
features that were interesting to people like, oh,  

492
00:51:22,720 --> 00:51:30,320
I want that capability. So, to me, Python 3.4 was 
really Python 3.0. And then 3.5 was an even bigger  

493
00:51:30,320 --> 00:51:36,560
milestone. That was the one that got widespread 
adoption of Python 3. And by the time Python 3.5  

494
00:51:36,560 --> 00:51:40,880
came out, then it was clear that Python 3 would 
work. And then you started to have companies come  

495
00:51:40,880 --> 00:51:48,640
out and give talks like Instagram's talk, which 
I believe is also at Portland, was a big deal.

496
00:51:48,640 --> 00:51:54,960
Yes, you heard it right. Instagram has been 
running fully on Python 3 for a few months.  

497
00:51:54,960 --> 00:52:00,000
The whole process took I would say about 9 to 
10 months. And I think Instagram was the largest  

498
00:52:00,000 --> 00:52:06,960
production deployment for Python at the time. She 
gave a very good, very thorough talk explaining  

499
00:52:06,960 --> 00:52:12,080
why they did it. Two main things: typing and 
asyncio. How they did it. We cleaned out all  

500
00:52:12,080 --> 00:52:17,200
the libraries that are not making the migration 
from Python 2 to 3. How you should do it. Unit  

501
00:52:17,200 --> 00:52:22,880
test. What they had learned during the process. We 
had actually some good performance gains as well,  

502
00:52:22,880 --> 00:52:30,560
after our migration. It felt as vindication 
that at least there were large companies that  

503
00:52:30,560 --> 00:52:36,560
took the time to do it right and to convert all 
their code to Python 3 and were able to do it  

504
00:52:36,560 --> 00:52:41,840
successfully. It was definitely well received. 
We got a lot of people saying: we really wanted  

505
00:52:41,840 --> 00:52:47,920
to migrate as well, but we weren't getting the 
kind of support that my team or my company was  

506
00:52:47,920 --> 00:52:52,800
giving us. And now I can bring this back to 
my management. And that really gave people  

507
00:52:52,800 --> 00:52:59,760
the confidence in migrating to Python 3. It became 
like a look, Instagram can do it. Why don't you  

508
00:52:59,760 --> 00:53:12,000
do it? Instagram's getting benefits, new features, 
faster code. Why don't you also want that benefit?

509
00:53:12,000 --> 00:53:18,160
[Music]

510
00:53:18,160 --> 00:53:23,920
Projects undergo things like this. And Python 
learned a lot from it and it did actually  

511
00:53:23,920 --> 00:53:29,200
eventually end up with Python 3 being in a pretty 
good spot again that it was safe to use. And safe  

512
00:53:29,200 --> 00:53:34,400
to use sounds weird but like where I felt like I 
can actually start new projects on Python 3 now  

513
00:53:34,400 --> 00:53:40,000
because we're back to a stable situation where 
you're about as productive as I felt like I was  

514
00:53:40,000 --> 00:53:44,480
with Python 2. Hi, Anna, nice to meet you. I 
really liked your talk. But it was basically  

515
00:53:44,480 --> 00:53:50,800
time that healed it. When Python 2.7 was declared 
that there wouldn't be any more security fixes,  

516
00:53:50,800 --> 00:53:56,400
it became a security concern. That was sort 
of the final push. People who donated their  

517
00:53:56,400 --> 00:54:01,760
work to do this migration in the wider Python 
world and community eventually got the world  

518
00:54:01,760 --> 00:54:06,240
running on Python 3, but as I said like it 
was a decade long process. And I don't think  

519
00:54:06,240 --> 00:54:11,440
anybody anticipated how much work it would be 
to move to Python 3. I think Python's probably  

520
00:54:11,440 --> 00:54:19,120
too big to ever go through a transition like that 
today. The community was maybe a little too big,  

521
00:54:19,120 --> 00:54:24,880
but not too big. I even still get angry 
messages sometimes from people who are like,  

522
00:54:24,880 --> 00:54:31,840
"My code needs Python 2.7. You need to 
provide it." And I tell them, "No." I  

523
00:54:31,840 --> 00:54:37,840
never wavered in my commitment to Python 3. It 
was a lesson learned for sure. For a long time,  

524
00:54:37,840 --> 00:54:43,920
I regularly joked there would be a Python 4, but 
the transition would be handled much better than  

525
00:54:43,920 --> 00:54:50,640
the transition to Python 3. I felt I owed that 
to the community. And now, the mantra has changed  

526
00:54:50,640 --> 00:54:56,240
to there will never be even a Python 4. To be 
honest, I don't know how many people in Python  

527
00:54:56,240 --> 00:55:04,240
even know about the whole transition because 
that all ended in 2020. At least it's behind us.

528
00:55:17,000 --> 00:55:18,000
[Music]

529
00:55:18,000 --> 00:55:28,240
Okay, so now we get in the closet. So there's 
the frisbee. This is the most unique merch I've  

530
00:55:28,240 --> 00:55:35,600
ever seen related to Python. Now, here's 
a significant t-shirt. It says, "Python is  

531
00:55:35,600 --> 00:55:45,600
for girls." I received this anonymously 
in the mail at Google. And to this day,  

532
00:55:45,600 --> 00:55:50,720
I don't know exactly what the intention of the 
sender was. They never revealed themselves,  

533
00:55:50,720 --> 00:55:55,760
at least not to me. And I don't know if 
there was an intention even.. But I sort  

534
00:55:55,760 --> 00:56:04,560
of realized at that point that there wasn't a 
whole lot of women in the the Python community  

535
00:56:04,560 --> 00:56:14,400
and the community also discovered that 
and fixed it for the Python conference.

536
00:56:14,400 --> 00:56:20,000
This idea of being a place where people from 
a wide range of backgrounds can learn how to  

537
00:56:20,000 --> 00:56:26,240
program, benefit from programming, find community. 
There really was some snowballing adoption of  

538
00:56:26,240 --> 00:56:34,560
these ideas across languages at the time. Jessica 
McKellar looks at the speakers at PyCon and says,  

539
00:56:34,560 --> 00:56:40,320
"There's only 3% that are women. What can we 
do about this?" She was co-organizer of the  

540
00:56:40,320 --> 00:56:45,200
biggest Python meetup in the world in Boston. 
She knew what she was talking about. It's not  

541
00:56:45,200 --> 00:56:49,840
rocket science. It's like, ask people if they're 
interested in speaking and we just.. providing  

542
00:56:49,840 --> 00:57:01,520
like a little bit of support drove a huge shift in 
the volume and demographics of the talks that were  

543
00:57:01,520 --> 00:57:08,240
submitted. And then 3 years later, like 35% of 
the speakers are women. I forget what the number  

544
00:57:08,240 --> 00:57:15,120
was but I think it was almost even with male 
speakers. PyCon... I had an old tweet about this,  

545
00:57:15,120 --> 00:57:19,920
so I just pulled this up. Says, "Hello from your 
PyCon Diversity Chair." So, the percentage of  

546
00:57:19,920 --> 00:57:31,760
PyCon talks by women: 2011 was 1%, 2012, it was 
7%, 2013, 15%, 2014 and 2015, 33%. And in 2016,  

547
00:57:31,760 --> 00:57:38,560
40%. Problems have solutions. That was a very 
inspiring story to me also. Something that was  

548
00:57:38,560 --> 00:57:45,280
less inspiring to me was that at the language 
summit there wasn't a single woman in the room,  

549
00:57:45,280 --> 00:57:54,560
and I don't believe we have a single female 
committer to core Python. There wasn't ever  

550
00:57:54,560 --> 00:57:59,760
ill intent but unfortunately we fell into 
the trap of not doing enough diversity  

551
00:57:59,760 --> 00:58:04,160
reach out to try to get more people to 
come in. To be honest it was a lot of  

552
00:58:04,160 --> 00:58:12,480
white men. So Guido wanted to change that. 
I want at least two female core Python devs  

553
00:58:12,480 --> 00:58:18,240
in the next year and I will try to train 
them myself if that's what it takes. So  

554
00:58:18,240 --> 00:58:30,440
come talk to me. I believe one of the first 
people who took up that call was Mariatta.

555
00:58:30,440 --> 00:58:41,040
[Music] Even though I've always been 
passionate about technology and programming,  

556
00:58:41,040 --> 00:58:49,840
I also felt it wasn't a welcoming environment for 
women. My schoolmates who took computer science  

557
00:58:49,840 --> 00:58:56,720
are mostly men. Most of the professors were men 
and at work most of my co-workers were men and I  

558
00:58:56,720 --> 00:59:04,720
just didn't really have examples or role models 
of women being successful in the tech industry.

559
00:59:06,960 --> 00:59:12,560
One of my co-workers went to PyCon. He 
saw that at that conference there is  

560
00:59:12,560 --> 00:59:32,960
this community called PyLadies and 
I felt like.. I want to meet them.

561
00:59:32,960 --> 00:59:33,120
[Music]

562
00:59:33,120 --> 00:59:40,080
So in 2015, that's when I decided I 
want to go to PyCon. At this conference,  

563
00:59:40,080 --> 00:59:48,240
I got to see a lot of women speaking and 
presenting. At my previous tech conference,  

564
00:59:48,240 --> 00:59:55,680
all speakers were men, all the keynote speakers 
were men. So this was really different.

565
00:59:55,680 --> 01:00:00,320
One of the keynote speakers at that same 
conference was Guido van Rossum. Hello  

566
01:00:00,320 --> 01:00:06,640
everybody. Glad to see you all. I want to meet 
and see the creator of the Python programming  

567
01:00:06,640 --> 01:00:10,880
language. "And I will try to train them 
myself if that's what it takes". I heard  

568
01:00:10,880 --> 01:00:16,880
this speech. However, at that time, I 
just didn't think that it's something  

569
01:00:16,880 --> 01:00:22,240
I could do. I wasn't even contributing to 
the Python community. I didn't contribute  

570
01:00:22,240 --> 01:00:30,320
to open source at all. I just thought 
I'm sure they will find women next year.

571
01:00:35,200 --> 01:00:41,920
The year after I went back to PyCon US and Guido 
van Rossum gave another keynote. We still don't  

572
01:00:41,920 --> 01:00:47,440
have two female core developers. I think at 
that time that's something really clicked in me,  

573
01:00:47,440 --> 01:00:52,640
like I realized that there's something 
within me that says: if nobody's doing it,  

574
01:00:52,640 --> 01:00:59,680
I will do it. I wrote to Guido van 
Rossum and I asked him for help.  

575
01:01:00,320 --> 01:01:07,920
Somehow I felt really scared. I just didn't 
feel like I deserved mentorship from Guido  

576
01:01:07,920 --> 01:01:15,440
van Rossum. So I really hesitated to send this 
email to him. But in the end, I realized that I  

577
01:01:15,440 --> 01:01:27,280
want to try. Like I felt like this was a great 
opportunity for me. I pressed the send button.

578
01:01:27,280 --> 01:01:33,840
I got a reply. He was very friendly. He started 
sharing resources about, you know, how to get  

579
01:01:33,840 --> 01:01:40,320
started contributing to Python. He offered to 
do video chats. It's been really helpful to have  

580
01:01:40,320 --> 01:01:47,200
his moral support. We had a pretty sort of deep 
mentorship relationship for a few years. Mariatta  

581
01:01:47,200 --> 01:01:52,480
learned the process from Guido and continued to 
contribute more and more very much around tooling,  

582
01:01:52,480 --> 01:01:57,840
like she really found her niche in terms of trying 
to help make our development process easier.  

583
01:01:58,480 --> 01:02:05,840
It was scary at first, like I just didn't feel 
comfortable sharing my questions in public. I  

584
01:02:05,840 --> 01:02:11,280
didn't want people to know that I don't 
know how to do certain things, you know,  

585
01:02:11,280 --> 01:02:18,880
like I didn't want people to see that I'm actually 
not that good. But this is how it it works in open  

586
01:02:18,880 --> 01:02:27,920
source. And the community has always been kind 
and helped me with my questions without saying  

587
01:02:27,920 --> 01:02:41,200
that you're stupid. Like I never felt like I was 
being judged. I think it does start with Guido.  

588
01:02:41,200 --> 01:02:48,160
The fact that Guido was very active in bringing 
more voices into Python absolutely made Python  

589
01:02:48,160 --> 01:02:53,920
better and stronger. Just the way the whole 
community works and what we stand for,  

590
01:02:53,920 --> 01:03:06,000
thanks to Guido's leadership, is where I want to 
be. And I think that's true for a lot of people.

591
01:03:10,640 --> 01:03:15,600
About six, seven months after I 
started reaching out to Guido,  

592
01:03:15,600 --> 01:03:21,920
I was recommended to become a Python 
core developer. It really wasn't until  

593
01:03:21,920 --> 01:03:31,840
4 months ago that for the first 
time ever. There's a woman...

594
01:03:31,840 --> 01:03:38,640
There's a woman who became a Python core developer 
and earned that commit privilege. The first woman  

595
01:03:38,640 --> 01:03:43,920
ever to join our team and has continued to be 
there and participate and try to help us and  

596
01:03:43,920 --> 01:03:52,320
always a very good advocate to try to improve 
our diversity. Now that I've seen the camera,  

597
01:03:52,320 --> 01:03:59,840
I can't do it. My life really changed after 
that. A lot of opportunities opened up just  

598
01:03:59,840 --> 01:04:10,320
because I'm a Python core developer. Hi, how are 
you? [Music] Mariatta went on to give her own set  

599
01:04:10,320 --> 01:04:19,760
of talks about how important mentorship is. When 
you don't have role models who you can relate to,  

600
01:04:19,760 --> 01:04:28,720
you start believing that you cannot do it. Thank 
you. Hi everybody. Uh my name is Mariatta. I'm  

601
01:04:28,720 --> 01:04:37,200
a PyLady. I run PyLadies Vancouver. I also 
help with the PyLadies con. 10 years ago,  

602
01:04:37,200 --> 01:04:41,840
I was also in this room for the 
Pyladies luncheon at PyCon US 2015.  

603
01:04:41,840 --> 01:04:49,120
It was a life-changing event for me. It was at 
that event that I felt for the first time in  

604
01:04:49,120 --> 01:04:58,880
my life as a developer, I felt like I belong in 
tech because I see 100 women in the room with me.  

605
01:04:58,880 --> 01:05:09,040
I just want other women to have role models. 
I hope I can help inspire them and help them.  

606
01:05:09,040 --> 01:05:15,360
These opportunities belong to you, too. You're 
all the reason I do this because I know there's  

607
01:05:15,360 --> 01:05:23,600
still a lot to do and I know together we can 
help each other and support each other. Okay,  

608
01:05:23,600 --> 01:05:33,760
I think that's it. Thank you so much everybody. 
[Applause] I have been so consistently impressed  

609
01:05:33,760 --> 01:05:41,760
by the Python community's ability to have 
respectful and and real reflection and  

610
01:05:41,760 --> 01:05:51,440
dialogue about how to steward itself and how to 
move it forward in a way that I find so inspiring  

611
01:05:51,440 --> 01:05:56,480
and a vision of what is possible in other 
communities. And I mean that really sincerely.

612
01:06:06,720 --> 01:06:13,680
There were an ever growing number of sort of 
scientific disciplines where all the code was  

613
01:06:13,680 --> 01:06:21,280
written in Python or a lot of it was prototyped 
in Python at least. And then the next step was  

614
01:06:21,280 --> 01:06:28,480
machine learning packages which started with 
TensorFlow and was later followed by PyTorch.  

615
01:06:28,480 --> 01:06:35,120
For a long time, Python was seen sort of as 
a scripting language that you would just do  

616
01:06:35,120 --> 01:06:41,280
small things that you need to automate and not 
production ready code and so it wasn't given a  

617
01:06:41,280 --> 01:06:48,400
ton of attention. And then now AI/ML has sort of 
changed things where it is now a business driver.  

618
01:06:48,400 --> 01:06:57,440
It appeals to people who are not professional 
programmers but need software to do a task.  

619
01:06:57,440 --> 01:07:03,600
There are some other languages like Rm you can do 
some interesting stuff in but Python is really it  

620
01:07:03,600 --> 01:07:09,920
for a AI/ML these days. Python has probably 
like centuries of engineering time that has  

621
01:07:09,920 --> 01:07:15,040
gone into code in the ecosystem specifically 
on those topics. So if you're using Python,  

622
01:07:15,040 --> 01:07:22,160
you're able to instantly tap into those libraries. 
Meta has PyTorch, which has a amazing Python API  

623
01:07:22,160 --> 01:07:28,560
and front-end people can interact with. There's 
also SciPy, NumPy, Numba, Pandas. There's a  

624
01:07:28,560 --> 01:07:35,200
whole suite of really extensive tools. Trying to 
build a language and a language ecosystem that  

625
01:07:35,200 --> 01:07:39,840
is amendable to all of that is non-trivial. 
That actually took real design, real thought,  

626
01:07:39,840 --> 01:07:46,240
and real ecosystem collective innovation over the 
course of decades. The back-end of those tools are  

627
01:07:46,240 --> 01:07:54,800
usually C or Fortran or some other native language 
that's much faster, but would be difficult for  

628
01:07:54,800 --> 01:08:03,760
someone with an AI background to program in. And 
it continues to be used for all that by all the  

629
01:08:03,760 --> 01:08:07,920
AI scientists, developing the models, and 
the people training the models, people  

630
01:08:07,920 --> 01:08:17,320
using the models. And that brings yet another 
increment of of growth to the Python community.

631
01:08:17,320 --> 01:08:24,400
[Music] Python's a fantastic language 
even if you're not a scientist. I just  

632
01:08:24,400 --> 01:08:29,600
don't think it would have risen to the level 
of dramatic usage without the science first  

633
01:08:29,600 --> 01:08:33,760
data science and machine learning story. We 
had a massive impact in the world. You know,  

634
01:08:33,760 --> 01:08:39,120
I think one testament to the future of Python 
is, if you prompt any of the LLMs to do code  

635
01:08:39,120 --> 01:08:44,640
generation today. If it's front-end, it's going 
to be JavaScript. If it's back-end data analysis,  

636
01:08:44,640 --> 01:08:49,440
it's going to be Python. That's 
the future. And Python is a part  

637
01:08:49,440 --> 01:08:58,560
of that future. Lucky me that I that I chose 
that language and not not a different one.

638
01:08:58,560 --> 01:09:05,680
Hey, Jacob. Oh, hello, morning. Hope you don't 
mind being filmed. Yeah. Ah, okay. Ida's following  

639
01:09:05,680 --> 01:09:11,840
me. All right. Yeah, she's shooting some b-roll 
for the documentary, I think. Ah, nice. I first  

640
01:09:11,840 --> 01:09:21,760
used Python in 1997 or something like that. 
Wow, that's really early days. So, it's got  

641
01:09:21,760 --> 01:09:26,960
30 frames of animation. Oh, wow. I told everyone 
that he would hate getting the DSA, but they did  

642
01:09:26,960 --> 01:09:32,480
it anyway. Yeah. Sorry, the DSA? Distinguished 
Service Award. I labeled him in the annual report  

643
01:09:32,480 --> 01:09:37,920
as like a leader in the Python community once and 
he made me take it out. Yeah, we can see that. But  

644
01:09:37,920 --> 01:09:43,920
nevertheless, he was on the steering council for 
five years. Uhhuh. And he was a leader. I got a  

645
01:09:43,920 --> 01:09:49,520
job from a Python conference back in 2017. I grew 
up in India. I moved to Germany, changed my life.  

646
01:09:49,520 --> 01:09:54,560
So I think Python changed a lot of things for me 
and I just wanted to say thanks to you for for  

647
01:09:54,560 --> 01:10:00,560
making this language. That's very sweet. Yeah. Do 
you mind if I uh take a picture with you or that  

648
01:10:00,560 --> 01:10:06,640
you don't like it? I'm so sorry. I really don't 
like it and especially not in busy places. Okay,  

649
01:10:06,640 --> 01:10:13,200
no problem. I get it. Okay. Find me in a dark 
alley and I'll do it. Okay. Okay. I get it.  

650
01:10:14,480 --> 01:10:20,800
Ah, I always kind of looked at myself as the 
bass player of Python, which is great. You know,  

651
01:10:20,800 --> 01:10:26,320
you can do a lot, you can have fun, and the 
spotlight's not on you. And I love that. I can't  

652
01:10:26,320 --> 01:10:32,560
imagine having that kind of spotlight on you, 
you know, for so many years. I heard a story from  

653
01:10:32,560 --> 01:10:38,480
an Apple VP of engineering, that Steve Jobs had 
turned down their hire of Guido because he said,  

654
01:10:38,480 --> 01:10:48,960
he has his own following and we don't 
want to have that kind of distraction.

655
01:10:48,960 --> 01:10:54,320
Python has always been a language that changed. 
We've never been one of those languages that says  

656
01:10:54,320 --> 01:10:59,840
if you write code against this version of Python, 
it will run forever with any new version of the  

657
01:10:59,840 --> 01:11:08,800
language. We just simply have never been those 
people. A PEP is an acronym for Python Enhancement  

658
01:11:08,800 --> 01:11:14,480
Proposal. That's a document that's written 
by someone who wants to make a significant  

659
01:11:14,480 --> 01:11:19,440
change to Python. Basically, you're trying to 
convince people that this is a good idea. It  

660
01:11:19,440 --> 01:11:24,960
would be sent for discussion for a mailing 
list and then eventually Guido as the BDFL,  

661
01:11:24,960 --> 01:11:31,760
the Benevolent Dictator for Life, would decide 
whether your change was going in or not. But  

662
01:11:31,760 --> 01:11:40,640
people always have worried that the next change 
is going to be the one that changes the feel of  

663
01:11:40,640 --> 01:11:47,360
the language. It won't fit my brain anymore or it 
won't be accessible anymore. I've actually seen  

664
01:11:47,360 --> 01:11:52,640
people storm out of rooms saying, "You're ruining 
this language." Some people take it very, very  

665
01:11:52,640 --> 01:12:00,640
personally and seriously. And the Walrus operator 
was no different. Yeah so, PEP 572, I don't know  

666
01:12:00,640 --> 01:12:04,560
who coined the term the Walrus Operator, but 
if you kind of turn your head, it looks like  

667
01:12:04,560 --> 01:12:13,360
a little walrus. It was a new feature that was 
proposed, but it was also a syntax change. The  

668
01:12:13,360 --> 01:12:19,520
Walrus operator lets you do assignments, meaning 
put values into variables in places that you  

669
01:12:19,520 --> 01:12:26,000
previously could not. That was probably the most 
contentious language change, oddly enough, because  

670
01:12:26,000 --> 01:12:31,120
it's kind of a minor thing, but it it there was so 
much passionate feeling about whether that should  

671
01:12:31,120 --> 01:12:37,760
be added or not that it created kind of a bit of a 
of a ruckus. When I first saw the Walrus Operator,  

672
01:12:37,760 --> 01:12:43,040
I didn't like it. It kind of felt a little 
un-Pythonic to me, but then I started to play  

673
01:12:43,040 --> 01:12:47,840
with it. There was a particular use case that 
I came up with in my own code that I was like,  

674
01:12:47,840 --> 01:12:53,200
"Oh, you know what? This is actually pretty 
cool". And so then I was like, well, I it's  

675
01:12:53,200 --> 01:12:58,480
something that I won't use very often, but when I 
need it, it's really great to have. And I turned,  

676
01:12:58,480 --> 01:13:06,640
you know, 180° and became a fan of it. But it was 
very disruptive. [Music] Language features and  

677
01:13:06,640 --> 01:13:13,200
especially syntax can be a double-edged sword. So 
one person's succinct, elegant code can be another  

678
01:13:13,200 --> 01:13:21,600
person's unreadable puzzle or a fusticated mess. 
There were very strongly voiced predictions about  

679
01:13:21,600 --> 01:13:27,200
how bad it would be for Python. And then just 
because Python was so much more popular at the  

680
01:13:27,200 --> 01:13:31,840
time, there are so many places where people talk 
about Python. I mean Twitter, you know, at the  

681
01:13:31,840 --> 01:13:37,680
time. This is all happening in public, right? And 
everyone can kind of with low effort throw their  

682
01:13:37,680 --> 01:13:44,080
hat into the ring and not everyone is going 
to restrain themselves when they're doing it.

683
01:13:45,760 --> 01:13:50,560
I started being more and more convinced 
that PEP 572 was actually the right thing  

684
01:13:50,560 --> 01:14:04,160
to do. I was the BDFL and I accepted 
the PEP. And the next morning I woke up

685
01:14:04,160 --> 01:14:09,360
and I felt miserable

686
01:14:09,360 --> 01:14:12,640
because of all the attacks 
that had happened before.  

687
01:14:14,080 --> 01:14:23,680
I sat down at my computer, wrote a short email, 
and hit send wherein I announced that I resigned  

688
01:14:23,680 --> 01:14:33,040
at BDFL. And that had an incredible impact 
because nobody had expected I would resign  

689
01:14:33,040 --> 01:14:40,560
and certainly not that I would rage quit 
over this issue, which essentially it was.

690
01:14:55,720 --> 01:14:56,720
[Music]  

691
01:14:56,720 --> 01:15:02,240
Transfer of power. Now that PEP 572 
is done, I don't ever want to have to  

692
01:15:02,240 --> 01:15:07,760
fight so hard for a PEP and find that 
so many people despise my decisions.  

693
01:15:07,760 --> 01:15:12,880
I would like to remove myself entirely from 
the decision process. I'm basically giving  

694
01:15:12,880 --> 01:15:19,280
myself a permanent vacation from being BDFL 
and you all will be on your own. I am not  

695
01:15:19,280 --> 01:15:25,600
going to appoint a successor. So what are you 
all going to do? Create a democracy, anarchy,  

696
01:15:25,600 --> 01:15:31,200
a dictatorship, a federation? I'll still be 
here, but I'm trying to let you all figure  

697
01:15:31,200 --> 01:15:40,560
something out for yourselves. I'm tired 
and I need a very long break. That was it.

698
01:15:40,560 --> 01:15:47,520
Haven't read that.. That was I thought that 
was pretty well written. I like to say he mic  

699
01:15:47,520 --> 01:15:51,840
dropped his way out. You know, he just was like, 
I'm out. I'm done. You guys figure it out. So,  

700
01:15:51,840 --> 01:15:58,880
it was a complete and total shock to me. 
Yeah. I just felt really sad about it. I  

701
01:15:58,880 --> 01:16:06,560
wish he would have retired under better 
circumstances. I felt I needed to take a  

702
01:16:06,560 --> 01:16:13,920
step back to sort of recover myself. I think a 
lot of people really felt for Guido, you know,  

703
01:16:13,920 --> 01:16:26,480
that he could be pushed to that point like 
maybe we let him down to allow the vitriol  

704
01:16:26,480 --> 01:16:33,360
over this change to Python to push, you know, 
somebody that we cared about to that point.

705
01:16:35,600 --> 01:16:41,840
We all perceived that it was like a a momentous 
occasion or like a significant change that  

706
01:16:41,840 --> 01:16:46,560
you would put a mark in your timeline in the 
history book in the history of Python, right?  

707
01:16:46,560 --> 01:16:52,720
Because it had been run on the BDFL model for its 
entire existence. So there was a little bit of  

708
01:16:52,720 --> 01:16:57,760
uncertainty like, can this work at all without 
got Guido? It's kind of a parent saying, it's  

709
01:16:57,760 --> 01:17:02,560
time for you to grow up and figure it out on your 
own. I'm not going to solve this problem for you.

710
01:17:05,280 --> 01:17:11,040
The first order of business was deciding on 
how to decide. And it turns out some people  

711
01:17:11,040 --> 01:17:15,520
have very strong opinions on voting systems. 
Programmers love arguing about voting methods.  

712
01:17:15,520 --> 01:17:22,400
I remember thinking this isn't going to work. Lot 
of strong voices. It's really difficult when you  

713
01:17:22,400 --> 01:17:28,880
have hundreds of core developers and thousands 
of people online and millions of people in the  

714
01:17:28,880 --> 01:17:35,920
community and probably billions of dollars of 
software that run on Python. You can't think  

715
01:17:35,920 --> 01:17:42,320
about that cuz it definitely gets overwhelming. 
I will fully admit it was stressful. I had to go  

716
01:17:42,320 --> 01:17:46,720
to an ear, nose, and throat specialist because I 
actually was starting to choke on my own throat  

717
01:17:46,720 --> 01:17:52,560
from the stress. It was not fun because if we 
couldn't decide on how we were going to decide,  

718
01:17:52,560 --> 01:17:59,120
the project was done. We really approached it 
like the nerdy engineers we are. In Python classic  

719
01:17:59,120 --> 01:18:03,600
fashion, we wrote a bunch of peps. We didn't want 
to rush it because we knew we were going to have  

720
01:18:03,600 --> 01:18:10,480
to live with this potentially forever. But we also 
realized the world was watching and did not like  

721
01:18:10,480 --> 01:18:14,160
the idea of not knowing whether this language was 
going to be around in a year or not, because we  

722
01:18:14,160 --> 01:18:20,000
couldn't stop bickering among ourselves about how 
to run ourselves. People sponsored different kinds  

723
01:18:20,000 --> 01:18:23,600
of models. I think there was one which was like, 
let's pick another BDFL because that's what we  

724
01:18:23,600 --> 01:18:28,800
feel comfortable with. And then there was various 
kinds of committees and councils and we ended up  

725
01:18:28,800 --> 01:18:34,480
settling on the five person steering committee. 
Good morning PyCon! Thanks so much for joining  

726
01:18:34,480 --> 01:18:40,560
us. So, welcome to our panel with the Python 
steering council. Because there's five people,  

727
01:18:40,560 --> 01:18:45,680
you don't have the same problem of like all 
the stress and responsibility of making these  

728
01:18:45,680 --> 01:18:51,520
decisions falling on one person. I actually 
felt that it made sense for me to be on that  

729
01:18:51,520 --> 01:18:56,880
first steering council given that there was 
no longer feeling so burned out or attacked,  

730
01:18:56,880 --> 01:19:02,160
to provide some amount of continuity. "You know 
how this goes when your kid goes off to college.  

731
01:19:02,160 --> 01:19:07,840
Some of you may have experience with that. you're 
no longer directly involved in their lives maybe,  

732
01:19:07,840 --> 01:19:14,960
but you never stop worrying. And that's how 
I feel about Python at the moment. And that's  

733
01:19:14,960 --> 01:19:24,880
why I [Applause] why I nominated myself 
for the steering committee and here I am".  

734
01:19:25,920 --> 01:19:31,520
There were elections for the second year steering 
council and at first I nominated myself and then  

735
01:19:31,520 --> 01:19:37,440
withdrew because there were enough other strong 
candidates. They didn't need me and I was happy to  

736
01:19:37,440 --> 01:19:56,080
uh to sort of let go of it. [Music] The legitimacy 
that came from the replacement springing up from  

737
01:19:56,080 --> 01:20:06,080
the community is essential to it being accepted. 
It came from us, so it's accepted by us. It works.  

738
01:20:06,080 --> 01:20:11,600
I think it works for us now. There may be a time 
in the future where it doesn't work or pieces of  

739
01:20:11,600 --> 01:20:17,840
it don't work. You have to be willing to evolve. 
Change is the one universal constant of the  

740
01:20:17,840 --> 01:20:31,480
universe. And so things will always change and you 
have to be ready and willing to adapt to change.

741
01:20:31,480 --> 01:20:38,560
[Music]

742
01:20:38,560 --> 01:20:43,760
It started out as a hobby project. Definitely. 
I think I probably wanted to prove something  

743
01:20:43,760 --> 01:20:50,960
to myself more than anything. It exceeded my 
wildest expectations and it actually continues  

744
01:20:50,960 --> 01:21:00,560
to do so. I constantly hear from people whose 
lives were completely changed by Python and it  

745
01:21:00,560 --> 01:21:08,960
has created this incredible community which was 
also a complete sort of bonus over everything  

746
01:21:08,960 --> 01:21:16,880
else I had anticipated. This community that 
has like a massive conference every year and  

747
01:21:16,880 --> 01:21:26,160
smaller conferences in every continent I think 
except Antarctica. There was one of the Python  

748
01:21:26,160 --> 01:21:32,480
conferences where there was a few thousand people 
in the audience. I remember just looking around  

749
01:21:32,480 --> 01:21:40,960
and going, this is mind-blowing. That's the 
point at which I knew we had achieved something  

750
01:21:40,960 --> 01:21:50,320
important, something that made a difference in 
people's lives and in the world. Python turned out  

751
01:21:50,320 --> 01:21:57,360
to be much more successful than perhaps any of us 
thought except maybe Guido and his team. I think  

752
01:21:57,360 --> 01:22:02,160
they always believed that this was the future. 
And of course, it's now one of the most popular,  

753
01:22:02,160 --> 01:22:06,800
if not the most popular programming language 
in the world. He spent two weeks in Christmas,  

754
01:22:06,800 --> 01:22:10,880
in like 1989, writing a programming language 
because he thought it would be fun. Like who  

755
01:22:10,880 --> 01:22:16,640
would have imagined that that would be such a life 
altering and also world altering thing to have  

756
01:22:16,640 --> 01:22:23,520
done. I think it's been great for the world. I 
think it's made people feel like they can get into  

757
01:22:23,520 --> 01:22:28,320
programming when they never thought they could. 
I think it made programming accessible to people.  

758
01:22:28,320 --> 01:22:36,640
It's literally part of kindergarten through grade 
12 education around the world. And is on Mars  

759
01:22:36,640 --> 01:22:41,760
thanks to being used as a scripting language to 
process the parachute of the Perseverance rover  

760
01:22:41,760 --> 01:22:45,440
landing. Like it's hard to think of anything 
that hasn't been touched by some Python code  

761
01:22:45,440 --> 01:22:52,000
somewhere. It's mind boggling. It's an important 
language. It's a popular language. It's a vibrant  

762
01:22:52,000 --> 01:22:58,400
and relevant language today as much as it was in 
the past and I believe as much as it will be in  

763
01:22:58,400 --> 01:23:03,520
the future. Programmers 30 years from now will 
be like, "Oh yeah, you know, I I'm still using  

764
01:23:03,520 --> 01:23:09,760
Python." Just like today, people are still using 
Fortran and C and C++ and those are old languages  

765
01:23:09,760 --> 01:23:35,080
you know too in the scheme of things. Scheme 
- Lisp another old language. So yeah. [Music]

766
01:23:35,080 --> 01:23:40,400
[Music]

767
01:23:40,400 --> 01:23:43,680
Now I keep thinking of like weird 
jokes. There's this library in  

768
01:23:43,680 --> 01:23:49,920
Python called Pickles because pickle is a 
funny word I guess. The documentation used  

769
01:23:49,920 --> 01:23:57,520
to have a footnote about how you should 
imagine Guido and Jim sniffing pickles.

