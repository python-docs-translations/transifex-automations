# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Больше инструментов управления потоком выполнения программы"

#: ../../tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few "
"more that we will encounter in this chapter."
msgstr ""
"Помимо только что представленного оператора :keyword:` while `, Python "
"использует еще несколько, с которыми мы столкнемся в этой главе."

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Инструкция :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "Пожалуй, самая известный тип инструкции — это :keyword:`if`. Например:"

#: ../../tutorial/controlflow.rst:19
msgid ""
">>> x = int(input(\"Please enter an integer: \"))\n"
"Please enter an integer: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negative changed to zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Single')\n"
"... else:\n"
"...     print('More')\n"
"...\n"
"More"
msgstr ""
">>> x = int(input(\"Please enter an integer: \"))\n"
"Please enter an integer: 42\n"
">>> if x < 0:\n"
"...     x = 0\n"
"...     print('Negative changed to zero')\n"
"... elif x == 0:\n"
"...     print('Zero')\n"
"... elif x == 1:\n"
"...     print('Single')\n"
"... else:\n"
"...     print('More')\n"
"...\n"
"More"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
" В инструкции может быть ноль или больше ветвей :keyword:`elif`, и ветка :"
"keyword:`else` необязательна. Ключевое слово ':keyword:`!elif`' — сокращение "
"для 'else if' ('иначе если'), оно позволяет избежать большого количества "
"отступов. Поеследовательность :keyword:`!if` ... :keyword:`!elif` ... :"
"keyword:`!elif` ... заменяет операторы ``switch`` и ``case`` в других языках."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Если вы сравниваете одно и то же значение с несколькими константами или "
"проверяете определенные типы или атрибуты, вам также может пригодиться "
"оператор :keyword:`!match`. Для получения более подробной информации см. :"
"ref:`tut-match`."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Инструкция :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"В Python инструкция :keyword:`for`немного отличается от  :keyword:`for` в C "
"или Pascal. Вместо того, чтобы обходить арифметическую прогрессию чисел (как "
"в Pascal) или давать программисту возможность задавать шаг итерации и "
"условие остановки (как в C), цикл :keyword:`!for` в Python обходит элементы "
"любой последовательности (списка или строки) в том порядке, в котором они в "
"ней встречаются. Например:"

#: ../../tutorial/controlflow.rst:63
msgid ""
">>> # Measure some strings:\n"
">>> words = ['cat', 'window', 'defenestrate']\n"
">>> for w in words:\n"
"...     print(w, len(w))\n"
"...\n"
"cat 3\n"
"window 6\n"
"defenestrate 12"
msgstr ""
">>> # Measure some strings:\n"
">>> words = ['cat', 'window', 'defenestrate']\n"
">>> for w in words:\n"
"...     print(w, len(w))\n"
"...\n"
"cat 3\n"
"window 6\n"
"defenestrate 12"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Правильно написать цикл, изменяющий коллекцию во время её обхода, бывает "
"трудно. Обычно гораздо проще пройтись по копии коллекции или создать новую::"

#: ../../tutorial/controlflow.rst:76
msgid ""
"# Create a sample collection\n"
"users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}\n"
"\n"
"# Strategy:  Iterate over a copy\n"
"for user, status in users.copy().items():\n"
"    if status == 'inactive':\n"
"        del users[user]\n"
"\n"
"# Strategy:  Create a new collection\n"
"active_users = {}\n"
"for user, status in users.items():\n"
"    if status == 'active':\n"
"        active_users[user] = status"
msgstr ""
"# Create a sample collection\n"
"users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}\n"
"\n"
"# Strategy:  Iterate over a copy\n"
"for user, status in users.copy().items():\n"
"    if status == 'inactive':\n"
"        del users[user]\n"
"\n"
"# Strategy:  Create a new collection\n"
"active_users = {}\n"
"for user, status in users.items():\n"
"    if status == 'active':\n"
"        active_users[user] = status"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "Функция :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Если вам нужно проитерироваться по последовательности чисел, то пригодится "
"встроенная функция :func:`range`. Она генерирует арифметические прогрессии::"

#: ../../tutorial/controlflow.rst:99
msgid ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"
msgstr ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Предоставленная \"конечная точка\" никогда не входит в сгенерированную "
"последовательность; ``range(10)`` сгенерирует 10 значений, индексы элементов "
"последовательности длиной равной 10. Также возможно начать диапазон с "
"другого числа или указать другое приращение (даже отрицательное; иногда это "
"называется \"шагом\")::"

#: ../../tutorial/controlflow.rst:113
msgid ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"
msgstr ""
">>> list(range(5, 10))\n"
"[5, 6, 7, 8, 9]\n"
"\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
"\n"
">>> list(range(-10, -100, -30))\n"
"[-10, -40, -70]"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Чтобы проитерироваться по индексам последовательности, можно соединить "
"функции :func:`range` и :func:`len` следующим образом::"

#: ../../tutorial/controlflow.rst:125
msgid ""
">>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Mary\n"
"1 had\n"
"2 a\n"
"3 little\n"
"4 lamb"
msgstr ""
">>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Mary\n"
"1 had\n"
"2 a\n"
"3 little\n"
"4 lamb"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"В большинстве подобных случаев функция :func:`enumerate` более удобна, см. :"
"ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Если вы просто печатаете функцию range, происходит странная вещь::"

#: ../../tutorial/controlflow.rst:140
msgid ""
">>> range(10)\n"
"range(0, 10)"
msgstr ""
">>> range(10)\n"
"range(0, 10)"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"В множестве случаев объект, который возвращается функцией :func:`range`, "
"ведёт себя как список, но в действительности он списком не является. Это "
"объект, который возвращает следующий элемент последовательности, когда он "
"действительно нужен в процессе итерации, таким образом сохраняется память, "
"потому что список на самом деле не составляется."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Мы говорим, что такой объект является :term:`iterable`, то есть подходит в "
"качестве цели для функций и конструкций, которые ожидают чего-то, из чего "
"они могут получать последовательные элементы, пока запас не будет исчерпан. "
"Мы видели, что такой конструкцией является оператор :keyword:`for`, а "
"примером функции, принимающей итерацию, является :func:`sum`::"

#: ../../tutorial/controlflow.rst:154
msgid ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"
msgstr ""
">>> sum(range(4))  # 0 + 1 + 2 + 3\n"
"6"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Позже мы увидим больше функций, которые возвращают итерации и принимают "
"итерации в качестве аргументов. В главе :ref:`tut-structures` мы более "
"подробно обсудим :func:`list`."

#: ../../tutorial/controlflow.rst:164
msgid ":keyword:`!break` and :keyword:`!continue` Statements"
msgstr "Операторы :keyword:`!break` и :keyword:`!continue`"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing :"
"keyword:`for` or :keyword:`while` loop::"
msgstr ""
"Оператор :keyword:`break` выходит из самого внутреннего включающего цикла :"
"keyword:`for` или :keyword:` while`::"

#: ../../tutorial/controlflow.rst:169
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} equals {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 equals 2 * 2\n"
"6 equals 2 * 3\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(f\"{n} equals {x} * {n//x}\")\n"
"...             break\n"
"...\n"
"4 equals 2 * 2\n"
"6 equals 2 * 3\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"

#: ../../tutorial/controlflow.rst:180
msgid ""
"The :keyword:`continue` statement continues with the next iteration of the "
"loop::"
msgstr "Оператор :keyword:`continue` продолжает следующую итерацию цикла::"

#: ../../tutorial/controlflow.rst:183
msgid ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Found an even number {num}\")\n"
"...         continue\n"
"...     print(f\"Found an odd number {num}\")\n"
"...\n"
"Found an even number 2\n"
"Found an odd number 3\n"
"Found an even number 4\n"
"Found an odd number 5\n"
"Found an even number 6\n"
"Found an odd number 7\n"
"Found an even number 8\n"
"Found an odd number 9"
msgstr ""
">>> for num in range(2, 10):\n"
"...     if num % 2 == 0:\n"
"...         print(f\"Found an even number {num}\")\n"
"...         continue\n"
"...     print(f\"Found an odd number {num}\")\n"
"...\n"
"Found an even number 2\n"
"Found an odd number 3\n"
"Found an even number 4\n"
"Found an odd number 5\n"
"Found an even number 6\n"
"Found an odd number 7\n"
"Found an even number 8\n"
"Found an odd number 9"

#: ../../tutorial/controlflow.rst:202
msgid ":keyword:`!else` Clauses on Loops"
msgstr ":keyword:`!else` Предложения в циклах"

#: ../../tutorial/controlflow.rst:204
msgid ""
"In a :keyword:`!for` or :keyword:`!while` loop the :keyword:`!break` "
"statement may be paired with an :keyword:`!else` clause.  If the loop "
"finishes without executing the :keyword:`!break`, the :keyword:`!else` "
"clause executes."
msgstr ""
"В цикле :keyword:`!for` или :keyword:`! while` оператор :keyword:`!break` "
"может быть соединен с предложением :keyword:`!else`. Если цикл завершается "
"без выполнения :keyword:`!break`, выполняется предложение :keyword:`!else`."

#: ../../tutorial/controlflow.rst:208
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop finishes its final iteration, that is, if no break occurred."
msgstr ""
"В цикле :keyword:`for` предложение :keyword:`!else` выполняется после того, "
"как цикл завершает последнюю итерацию, то есть, если не произошло прерывания."

#: ../../tutorial/controlflow.rst:211
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes "
"false."
msgstr ""
"В цикле :keyword:` while` он выполняется после того, как условие цикла "
"становится ложным."

#: ../../tutorial/controlflow.rst:213
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`.  Of course, other ways of "
"ending the loop early, such as a :keyword:`return` or a raised exception, "
"will also skip execution of the :keyword:`else` clause."
msgstr ""
"В любом типе цикла предложение :keyword:`!else` **не** выполняется, если "
"цикл был завершен с помощью :keyword:`break`. Конечно, другие способы "
"досрочного завершения цикла, такие как :keyword:`return` или выдача "
"исключения, также пропустят выполнение предложения :keyword:`else`."

#: ../../tutorial/controlflow.rst:218
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Это иллюстрируется следующим циклом :keyword:`!for`, который ищет простые "
"числа::"

#: ../../tutorial/controlflow.rst:221
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'equals', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # loop fell through without finding a factor\n"
"...         print(n, 'is a prime number')\n"
"...\n"
"2 is a prime number\n"
"3 is a prime number\n"
"4 equals 2 * 2\n"
"5 is a prime number\n"
"6 equals 2 * 3\n"
"7 is a prime number\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'equals', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # loop fell through without finding a factor\n"
"...         print(n, 'is a prime number')\n"
"...\n"
"2 is a prime number\n"
"3 is a prime number\n"
"4 equals 2 * 2\n"
"5 is a prime number\n"
"6 equals 2 * 3\n"
"7 is a prime number\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"

#: ../../tutorial/controlflow.rst:239
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the ``for`` loop, **not** the ``if`` statement.)"
msgstr ""
"(Да, это правильный код. Посмотрите внимательно: предложение else "
"принадлежит циклу for, а не оператору if.)"

#: ../../tutorial/controlflow.rst:242
msgid ""
"One way to think of the else clause is to imagine it paired with the ``if`` "
"inside the loop.  As the loop executes, it will run a sequence like if/if/if/"
"else. The ``if`` is inside the loop, encountered a number of times. If the "
"condition is ever true, a ``break`` will happen. If the condition is never "
"true, the ``else`` clause outside the loop will execute."
msgstr ""
"Один из способов представить предложение else — представить его в паре с "
"оператором if внутри цикла. По мере выполнения цикла он будет выполнять "
"последовательность действий типа if/if/if/else. ``if`` находится внутри "
"цикла и встречается несколько раз. Если условие когда-либо будет истинным, "
"произойдет «разрыв». Если условие никогда не бывает истинным, то вне цикла "
"будет выполнено предложение else."

#: ../../tutorial/controlflow.rst:248
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of "
"``if`` statements: a ``try`` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the ``try`` statement and exceptions, see :ref:`tut-"
"handling`."
msgstr ""
"При использовании с циклом предложение ``else`` имеет больше общего с "
"предложением ``else`` оператора :keyword:`try`, чем с оператором ``if``: "
"Предложение ``else`` оператора try выполняется, когда не происходит "
"исключения, а предложение ``else`` цикла выполняется, когда не происходит "
"``break``. Дополнительную информацию об операторе try и исключениях см. в "
"разделе :ref:`tut-handling`."

#: ../../tutorial/controlflow.rst:257
msgid ":keyword:`!pass` Statements"
msgstr "Инструкция :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:259
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Инструкция :keyword:`pass` ничего не делает. Её можно использовть , когда "
"инструкция требуется в соответствии с синтаксисом, но программа при этом не "
"должна ничего делать. Например::"

#: ../../tutorial/controlflow.rst:262
msgid ""
">>> while True:\n"
"...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n"
"..."
msgstr ""
">>> while True:\n"
"...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n"
"..."

#: ../../tutorial/controlflow.rst:266
msgid "This is commonly used for creating minimal classes::"
msgstr ":keyword:`pass` часто используется при создании минимальных классов::"

#: ../../tutorial/controlflow.rst:268
msgid ""
">>> class MyEmptyClass:\n"
"...     pass\n"
"..."
msgstr ""
">>> class MyEmptyClass:\n"
"...     pass\n"
"..."

#: ../../tutorial/controlflow.rst:272
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Другое применение инструкции :keyword:`pass` — заглушка для тела функции или "
"ветки условной инструкции, когда вы работаете над новым кодом. Это позволяет "
"думаю о коде на более высоком, абстрактном уровне. Инструкция :keyword:"
"`pass` просто игнорируется::"

#: ../../tutorial/controlflow.rst:276
msgid ""
">>> def initlog(*args):\n"
"...     pass   # Remember to implement this!\n"
"..."
msgstr ""
">>> def initlog(*args):\n"
"...     pass   # Remember to implement this!\n"
"..."

#: ../../tutorial/controlflow.rst:284
msgid ":keyword:`!match` Statements"
msgstr ":keyword:`!match` Заявления"

#: ../../tutorial/controlflow.rst:286
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""
"Оператор :keyword:`match` принимает выражение и сравнивает его значение с "
"последовательными шаблонами, заданными в виде одного или нескольких блоков "
"регистра. Внешне это похоже на оператор переключения в C, Java или "
"JavaScript (и во многих других языках), но больше похоже на сопоставление с "
"образцом в таких языках, как Rust или Haskell. Выполняется только первый "
"соответствующий шаблон, а также он может извлекать компоненты (элементы "
"последовательности или атрибуты объекта) из значения в переменные."

#: ../../tutorial/controlflow.rst:294
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"Самая простая форма сравнивает значение субъекта с одним или несколькими "
"литералами:"

#: ../../tutorial/controlflow.rst:296
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""

#: ../../tutorial/controlflow.rst:307
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"Обратите внимание на последний блок: «имя переменной» ``_`` действует как "
"*подстановочный знак* и всегда соответствует. Если ни один регистр не "
"соответствует, ни одна из ветвей не выполняется."

#: ../../tutorial/controlflow.rst:310
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Вы можете объединить несколько литералов в один шаблон, используя ``|`` "
"(\"или\")::"

#: ../../tutorial/controlflow.rst:312
msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""

#: ../../tutorial/controlflow.rst:315
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Шаблоны могут выглядеть как распаковочные присваивания и использоваться для "
"привязки переменных:"

#: ../../tutorial/controlflow.rst:318
msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"

#: ../../tutorial/controlflow.rst:331
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Изучите это внимательно! Первый шаблон имеет два литерала, и его можно "
"рассматривать как расширение шаблона литералов, показанного выше. Но "
"следующие два шаблона объединяют литерал и переменную, а переменная "
"*связывает* значение субъекта («точки»). Четвертый шаблон захватывает два "
"значения, что делает его концептуально похожим на присваивание распаковки "
"``(x, y) = point``."

#: ../../tutorial/controlflow.rst:338
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Если вы используете классы для структурирования своих данных, вы можете "
"использовать имя класса, за которым следует список аргументов, напоминающий "
"конструктор, но с возможностью захвата атрибутов в переменные:"

#: ../../tutorial/controlflow.rst:342
msgid ""
"class Point:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def where_is(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Point():\n"
"            print(\"Somewhere else\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""
"class Point:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def where_is(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y}\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x}\")\n"
"        case Point():\n"
"            print(\"Somewhere else\")\n"
"        case _:\n"
"            print(\"Not a point\")"

#: ../../tutorial/controlflow.rst:360
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Вы можете использовать позиционные параметры с некоторыми встроенными "
"классами, которые обеспечивают порядок их атрибутов (например, классов "
"данных). Вы также можете определить определенное положение атрибутов в "
"шаблонах, установив в своих классах специальный атрибут ``__match_args__``. "
"Если для него установлено значение («x», «y»), все следующие шаблоны "
"эквивалентны (и все они привязывают атрибут ``y`` к переменной ``var``):"

#: ../../tutorial/controlflow.rst:366
msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"

#: ../../tutorial/controlflow.rst:371
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Рекомендуемый способ чтения шаблонов — рассматривать их как расширенную "
"форму того, что вы поместили бы слева от присваивания, чтобы понять, каким "
"переменным какое значение будет присвоено. Оператором сопоставления "
"присваиваются только автономные имена (например, ``var`` выше). Имена с "
"точками (например, ``foo.bar``), имена атрибутов (``x=`` и ``y=`` выше) или "
"имена классов (распознаваемые по знаку \"(...)\" рядом с ними, например "
"``Point`` выше) никогда не назначаются."

#: ../../tutorial/controlflow.rst:378
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Шаблоны могут быть произвольно вложены. Например, если у нас есть короткий "
"список точек с добавленным ``__match_args__``, мы могли бы сопоставить его "
"следующим образом:"

#: ../../tutorial/controlflow.rst:381
msgid ""
"class Point:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match points:\n"
"    case []:\n"
"        print(\"No points\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"Single point {x}, {y}\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two on the Y axis at {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Something else\")"
msgstr ""
"class Point:\n"
"    __match_args__ = ('x', 'y')\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"match points:\n"
"    case []:\n"
"        print(\"No points\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"Single point {x}, {y}\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two on the Y axis at {y1}, {y2}\")\n"
"    case _:\n"
"        print(\"Something else\")"

#: ../../tutorial/controlflow.rst:399
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Мы можем добавить в шаблон предложение if, известное как «защита». Если "
"защита ложна, ``match`` переходит к следующему блоку case. Обратите "
"внимание, что захват значения происходит до оценки защиты::"

#: ../../tutorial/controlflow.rst:403
msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"Y=X at {x}\")\n"
"    case Point(x, y):\n"
"        print(f\"Not on the diagonal\")"
msgstr ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"Y=X at {x}\")\n"
"    case Point(x, y):\n"
"        print(f\"Not on the diagonal\")"

#: ../../tutorial/controlflow.rst:409
msgid "Several other key features of this statement:"
msgstr "Еще несколько ключевых особенностей этого утверждения:"

#: ../../tutorial/controlflow.rst:411
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Подобно распаковке присваиваний, шаблоны кортежей и списков имеют одно и то "
"же значение и фактически соответствуют произвольным последовательностям. "
"Важным исключением является то, что они не соответствуют итераторам или "
"строкам."

#: ../../tutorial/controlflow.rst:415
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Шаблоны последовательностей поддерживают расширенную распаковку: ``[x, y, "
"*rest]`` и ``(x, y, *rest)`` работают аналогично назначениям распаковки. Имя "
"после ``*`` также может быть ``_``, поэтому ``(x, y, *_)`` соответствует "
"последовательности, состоящей как минимум из двух элементов, без привязки "
"остальных элементов."

#: ../../tutorial/controlflow.rst:420
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Шаблоны сопоставления: ``{\"bandwidth\": b, \"latency\": l}`` захватывает "
"значения ``\"bandwidth\"`` и ``\"latency\"`` из словаря. В отличие от "
"шаблонов последовательности, дополнительные ключи игнорируются. Также "
"поддерживается распаковка типа ``**rest``. (Но ``**_`` было бы лишним, "
"поэтому это не разрешено.)"

#: ../../tutorial/controlflow.rst:425
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Подшаблоны могут быть записаны с использованием ключевого слова as::"

#: ../../tutorial/controlflow.rst:427
msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Point(x1, y1), Point(x2, y2) as p2): ..."

#: ../../tutorial/controlflow.rst:429
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"захватит второй элемент ввода как ``p2`` (пока входные данные представляют "
"собой последовательность из двух точек)"

#: ../../tutorial/controlflow.rst:432
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"Большинство литералов сравниваются по принципу равенства, однако одиночные "
"элементы ``True``, ``False`` и ``None`` сравниваются по тождеству."

#: ../../tutorial/controlflow.rst:435
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Шаблоны могут использовать именованные константы. Имена должны быть "
"разделены точками, чтобы их нельзя было интерпретировать как переменную "
"захвата:"

#: ../../tutorial/controlflow.rst:438
msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 'red'\n"
"    GREEN = 'green'\n"
"    BLUE = 'blue'\n"
"\n"
"color = Color(input(\"Enter your choice of 'red', 'blue' or 'green': \"))\n"
"\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 'red'\n"
"    GREEN = 'green'\n"
"    BLUE = 'blue'\n"
"\n"
"color = Color(input(\"Enter your choice of 'red', 'blue' or 'green': \"))\n"
"\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"

#: ../../tutorial/controlflow.rst:454
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Более подробное объяснение и дополнительные примеры можно найти в :pep:"
"`636`, написанном в формате учебного пособия."

#: ../../tutorial/controlflow.rst:460
msgid "Defining Functions"
msgstr "Определение функций"

#: ../../tutorial/controlflow.rst:462
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Мы можем создать функцию, которая записывает ряд Фибоначчи в произвольную "
"границу:"

#: ../../tutorial/controlflow.rst:465
msgid ""
">>> def fib(n):    # write Fibonacci series less than n\n"
"...     \"\"\"Print a Fibonacci series less than n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Now call the function we just defined:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"
msgstr ""
">>> def fib(n):    # write Fibonacci series less than n\n"
"...     \"\"\"Print a Fibonacci series less than n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         print(a, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Now call the function we just defined:\n"
">>> fib(2000)\n"
"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"

#: ../../tutorial/controlflow.rst:482
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Ключевое слово :keyword:`def` представляет функцию *определение*. За ним "
"должно следовать имя функции и список формальных параметров в скобках. "
"Операторы, составляющие тело функции, начинаются со следующей строки и "
"должны иметь отступ."

#: ../../tutorial/controlflow.rst:487
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Первый оператор тела функции опционально может быть строковым литералом; "
"этот строковый литерал является строкой документации функции или :dfn:"
"`docstring`. (Более подробную информацию о строках документации можно найти "
"в разделе :ref:`tut-docstrings`.) Существуют инструменты, которые используют "
"строки документации для автоматического создания онлайновой или печатной "
"документации или для того, чтобы позволить пользователю интерактивно "
"просматривать код; хорошей практикой является включение строк документации в "
"код, который вы пишете, так что возьмите это за привычку."

#: ../../tutorial/controlflow.rst:494
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*Выполнение* функции вводит новую таблицу символов, используемую для "
"локальных переменных функции. Точнее, все назначения переменных в функции "
"сохраняют значение в локальной таблице символов; тогда как ссылки на "
"переменные сначала просматриваются в локальной таблице символов, затем в "
"локальных таблицах символов включающих функций, затем в глобальной таблице "
"символов и, наконец, в таблице встроенных имен. Таким образом, глобальным "
"переменным и переменным включающих функций не может быть напрямую присвоено "
"значение внутри функции (за исключением случаев, когда глобальные переменные "
"названы в операторе :keyword:`global` или переменные включающих функций "
"названы в :keyword: `nonlocal`), хотя на них можно ссылаться."

#: ../../tutorial/controlflow.rst:505
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Фактические параметры (аргументы) вызова функции вводятся в локальную "
"таблицу символов вызываемой функции при ее вызове; таким образом, аргументы "
"передаются с использованием *вызова по значению* (где *значение* всегда "
"является *ссылкой* объекта, а не значением объекта). [#]_ Когда функция "
"вызывает другую функцию или рекурсивно вызывает саму себя, для этого вызова "
"создается новая локальная таблица символов."

#: ../../tutorial/controlflow.rst:512
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Определение функции связывает имя функции с объектом функции в текущей "
"таблице символов. Интерпретатор распознает объект, на который указывает это "
"имя, как определяемую пользователем функцию. Другие имена также могут "
"указывать на тот же объект функции и также могут использоваться для доступа "
"к функции::"

#: ../../tutorial/controlflow.rst:517
msgid ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"
msgstr ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"0 1 1 2 3 5 8 13 21 34 55 89"

#: ../../tutorial/controlflow.rst:523
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Из других языков вы можете возразить, что fib — это не функция, а процедура, "
"поскольку она не возвращает значения. Фактически, даже функции без "
"оператора :keyword:`return` возвращают значение, хотя и довольно скучное. "
"Это значение называется None (это встроенное имя). Запись значения None "
"обычно подавляется интерпретатором, если это единственное записываемое "
"значение. Вы можете увидеть это, если действительно хотите использовать :"
"func:`print`::"

#: ../../tutorial/controlflow.rst:530
msgid ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"
msgstr ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"

#: ../../tutorial/controlflow.rst:534
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Написать функцию, которая возвращает список чисел ряда Фибоначчи, вместо "
"того, чтобы печатать его, просто:"

#: ../../tutorial/controlflow.rst:537
msgid ""
">>> def fib2(n):  # return Fibonacci series up to n\n"
"...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n"
"...     result = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         result.append(a)    # see below\n"
"...         a, b = b, a+b\n"
"...     return result\n"
"...\n"
">>> f100 = fib2(100)    # call it\n"
">>> f100                # write the result\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
msgstr ""
">>> def fib2(n):  # return Fibonacci series up to n\n"
"...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n"
"...     result = []\n"
"...     a, b = 0, 1\n"
"...     while a < n:\n"
"...         result.append(a)    # see below\n"
"...         a, b = b, a+b\n"
"...     return result\n"
"...\n"
">>> f100 = fib2(100)    # call it\n"
">>> f100                # write the result\n"
"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"

#: ../../tutorial/controlflow.rst:550
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""
"Этот пример, как обычно, демонстрирует некоторые новые возможности Python:"

#: ../../tutorial/controlflow.rst:552
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Оператор :keyword:`return` возвращает значение из функции. :keyword:`!"
"return` без аргумента-выражения возвращает ``None``. Выход за конец функции "
"также возвращает None."

#: ../../tutorial/controlflow.rst:556
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`!append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"Оператор result.append(a) вызывает *метод* объекта списка result. Метод — "
"это функция, которая «принадлежит» объекту и называется «obj.имя метода», "
"где «obj» — это некоторый объект (это может быть выражение), а «имя метода» "
"— это имя метод, который определяется типом объекта. Разные типы определяют "
"разные методы. Методы разных типов могут иметь одно и то же имя, не вызывая "
"двусмысленности. (Можно определить свои собственные типы и методы объектов, "
"используя *классы*, см. :ref:`tut-classes`) Метод :meth:`!append`, "
"показанный в примере, определен для объектов списка; он добавляет новый "
"элемент в конец списка. В этом примере это эквивалентно ``result = result + "
"[a]``, но более эффективно."

#: ../../tutorial/controlflow.rst:571
msgid "More on Defining Functions"
msgstr "Подробнее об определении функций"

#: ../../tutorial/controlflow.rst:573
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Также возможно определять функции с переменным количеством аргументов. Есть "
"три формы, которые можно комбинировать."

#: ../../tutorial/controlflow.rst:580
msgid "Default Argument Values"
msgstr "Значения аргументов по умолчанию"

#: ../../tutorial/controlflow.rst:582
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Наиболее полезная форма — указать значение по умолчанию для одного или "
"нескольких аргументов. Это создает функцию, которую можно вызвать с меньшим "
"количеством аргументов, чем разрешено. Например::"

#: ../../tutorial/controlflow.rst:586
msgid ""
"def ask_ok(prompt, retries=4, reminder='Please try again!'):\n"
"    while True:\n"
"        reply = input(prompt)\n"
"        if reply in {'y', 'ye', 'yes'}:\n"
"            return True\n"
"        if reply in {'n', 'no', 'nop', 'nope'}:\n"
"            return False\n"
"        retries = retries - 1\n"
"        if retries < 0:\n"
"            raise ValueError('invalid user response')\n"
"        print(reminder)"
msgstr ""
"def ask_ok(prompt, retries=4, reminder='Please try again!'):\n"
"    while True:\n"
"        reply = input(prompt)\n"
"        if reply in {'y', 'ye', 'yes'}:\n"
"            return True\n"
"        if reply in {'n', 'no', 'nop', 'nope'}:\n"
"            return False\n"
"        retries = retries - 1\n"
"        if retries < 0:\n"
"            raise ValueError('invalid user response')\n"
"        print(reminder)"

#: ../../tutorial/controlflow.rst:598
msgid "This function can be called in several ways:"
msgstr "Эту функцию можно вызвать несколькими способами:"

#: ../../tutorial/controlflow.rst:600
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"давая только обязательный аргумент: ``ask_ok('Вы действительно хотите "
"выйти?')``"

#: ../../tutorial/controlflow.rst:602
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"передавая один из необязательных аргументов: ``ask_ok('ОК, чтобы "
"перезаписать файл?', 2)``"

#: ../../tutorial/controlflow.rst:604
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"или даже приведя все аргументы: ``ask_ok('ОК перезаписать файл?', 2, 'Давай, "
"только да или нет!')``"

#: ../../tutorial/controlflow.rst:607
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"В этом примере также представлено ключевое слово :keyword:`in`. Это "
"проверяет, содержит ли последовательность определенное значение."

#: ../../tutorial/controlflow.rst:610
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Значения по умолчанию оцениваются в момент определения функции в "
"*определяющей* области, так что::"

#: ../../tutorial/controlflow.rst:613
msgid ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"
msgstr ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"

#: ../../tutorial/controlflow.rst:621
msgid "will print ``5``."
msgstr "напечатает ``5``."

#: ../../tutorial/controlflow.rst:623
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Важное предупреждение:** Значение по умолчанию оценивается только один "
"раз. Это имеет значение, когда значением по умолчанию является изменяемый "
"объект, такой как список, словарь или экземпляры большинства классов. "
"Например, следующая функция аккумулирует аргументы, передаваемые ей при "
"последующих вызовах:"

#: ../../tutorial/controlflow.rst:628
msgid ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"
msgstr ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"

#: ../../tutorial/controlflow.rst:636
msgid "This will print ::"
msgstr "будет напечатано ::"

#: ../../tutorial/controlflow.rst:638
msgid ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"
msgstr ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"

#: ../../tutorial/controlflow.rst:642
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Если вы не хотите, чтобы значение по умолчанию использовалось при "
"последующих вызовах, вы можете вместо этого написать функцию следующим "
"образом:"

#: ../../tutorial/controlflow.rst:645
msgid ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"
msgstr ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"

#: ../../tutorial/controlflow.rst:655
msgid "Keyword Arguments"
msgstr "Именованный аргумент"

#: ../../tutorial/controlflow.rst:657
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Функции также можно вызывать с использованием :term:`аргументов ключевого "
"слова <аргумент ключевого слова>` в форме ``kwarg=value``. Например, "
"следующая функция::"

#: ../../tutorial/controlflow.rst:660
msgid ""
"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n"
"    print(\"-- This parrot wouldn't\", action, end=' ')\n"
"    print(\"if you put\", voltage, \"volts through it.\")\n"
"    print(\"-- Lovely plumage, the\", type)\n"
"    print(\"-- It's\", state, \"!\")"
msgstr ""
"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n"
"    print(\"-- This parrot wouldn't\", action, end=' ')\n"
"    print(\"if you put\", voltage, \"volts through it.\")\n"
"    print(\"-- Lovely plumage, the\", type)\n"
"    print(\"-- It's\", state, \"!\")"

#: ../../tutorial/controlflow.rst:666
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"принимает один обязательный аргумент («напряжение») и три дополнительных "
"аргумента («состояние», «действие» и «тип»). Эту функцию можно вызвать любым "
"из следующих способов:"

#: ../../tutorial/controlflow.rst:670
msgid ""
"parrot(1000)                                          # 1 positional "
"argument\n"
"parrot(voltage=1000)                                  # 1 keyword argument\n"
"parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\n"
"parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\n"
"parrot('a million', 'bereft of life', 'jump')         # 3 positional "
"arguments\n"
"parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 "
"keyword"
msgstr ""
"parrot(1000)                                          # 1 positional "
"argument\n"
"parrot(voltage=1000)                                  # 1 keyword argument\n"
"parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\n"
"parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\n"
"parrot('a million', 'bereft of life', 'jump')         # 3 positional "
"arguments\n"
"parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 "
"keyword"

#: ../../tutorial/controlflow.rst:677
msgid "but all the following calls would be invalid::"
msgstr "но все следующие вызовы будут недействительны::"

#: ../../tutorial/controlflow.rst:679
msgid ""
"parrot()                     # required argument missing\n"
"parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword "
"argument\n"
"parrot(110, voltage=220)     # duplicate value for the same argument\n"
"parrot(actor='John Cleese')  # unknown keyword argument"
msgstr ""
"parrot()                     # required argument missing\n"
"parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword "
"argument\n"
"parrot(110, voltage=220)     # duplicate value for the same argument\n"
"parrot(actor='John Cleese')  # unknown keyword argument"

#: ../../tutorial/controlflow.rst:684
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"При вызове функции аргументы ключевого слова должны следовать за "
"позиционными аргументами. Все передаваемые аргументы ключевого слова должны "
"соответствовать одному из аргументов, принимаемых функцией (например, "
"«актёр» не является допустимым аргументом для функции «попугай»), и их "
"порядок не важен. Сюда также входят необязательные аргументы (например, "
"``parrot(напряжение=1000)`` тоже допустимо). Ни один аргумент не может "
"принимать значение более одного раза. Вот пример, который не работает из-за "
"этого ограничения:"

#: ../../tutorial/controlflow.rst:692
msgid ""
">>> def function(a):\n"
"...     pass\n"
"...\n"
">>> function(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: function() got multiple values for argument 'a'"
msgstr ""
">>> def function(a):\n"
"...     pass\n"
"...\n"
">>> function(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: function() got multiple values for argument 'a'"

#: ../../tutorial/controlflow.rst:700
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Когда присутствует последний формальный параметр формы ``**name``, он "
"получает словарь (см. :ref:`typesmapping`), содержащий все аргументы "
"ключевых слов, за исключением тех, которые соответствуют формальному "
"параметру. Его можно комбинировать с формальным параметром формы ``*name`` "
"(описанным в следующем подразделе), который получает :ref:`tuple <tut-"
"tuples>`, содержащий позиционные аргументы за пределами списка формальных "
"параметров. (``*name`` должно стоять перед ``**name``.) Например, если мы "
"определим функцию следующим образом:"

#: ../../tutorial/controlflow.rst:708
msgid ""
"def cheeseshop(kind, *arguments, **keywords):\n"
"    print(\"-- Do you have any\", kind, \"?\")\n"
"    print(\"-- I'm sorry, we're all out of\", kind)\n"
"    for arg in arguments:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in keywords:\n"
"        print(kw, \":\", keywords[kw])"
msgstr ""
"def cheeseshop(kind, *arguments, **keywords):\n"
"    print(\"-- Do you have any\", kind, \"?\")\n"
"    print(\"-- I'm sorry, we're all out of\", kind)\n"
"    for arg in arguments:\n"
"        print(arg)\n"
"    print(\"-\" * 40)\n"
"    for kw in keywords:\n"
"        print(kw, \":\", keywords[kw])"

#: ../../tutorial/controlflow.rst:717
msgid "It could be called like this::"
msgstr "Это можно было бы назвать так::"

#: ../../tutorial/controlflow.rst:719
msgid ""
"cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n"
"           \"It's really very, VERY runny, sir.\",\n"
"           shopkeeper=\"Michael Palin\",\n"
"           client=\"John Cleese\",\n"
"           sketch=\"Cheese Shop Sketch\")"
msgstr ""
"cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n"
"           \"It's really very, VERY runny, sir.\",\n"
"           shopkeeper=\"Michael Palin\",\n"
"           client=\"John Cleese\",\n"
"           sketch=\"Cheese Shop Sketch\")"

#: ../../tutorial/controlflow.rst:725
msgid "and of course it would print:"
msgstr "и, конечно же, он напечатает:"

#: ../../tutorial/controlflow.rst:727
msgid ""
"-- Do you have any Limburger ?\n"
"-- I'm sorry, we're all out of Limburger\n"
"It's very runny, sir.\n"
"It's really very, VERY runny, sir.\n"
"----------------------------------------\n"
"shopkeeper : Michael Palin\n"
"client : John Cleese\n"
"sketch : Cheese Shop Sketch"
msgstr ""
"-- Do you have any Limburger ?\n"
"-- I'm sorry, we're all out of Limburger\n"
"It's very runny, sir.\n"
"It's really very, VERY runny, sir.\n"
"----------------------------------------\n"
"shopkeeper : Michael Palin\n"
"client : John Cleese\n"
"sketch : Cheese Shop Sketch"

#: ../../tutorial/controlflow.rst:738
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Обратите внимание, что порядок вывода аргументов ключевого слова "
"гарантированно соответствует порядку, в котором они были указаны при вызове "
"функции."

#: ../../tutorial/controlflow.rst:742
msgid "Special parameters"
msgstr "Специальные параметры"

#: ../../tutorial/controlflow.rst:744
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"По умолчанию аргументы могут передаваться в функцию Python либо по позиции, "
"либо явно по ключевому слову. Для удобства чтения и производительности имеет "
"смысл ограничить способ передачи аргументов, чтобы разработчику нужно было "
"только просматривать определение функции, чтобы определить, передаются ли "
"элементы по позиции, по позиции или ключевому слову или по ключевому слову."

#: ../../tutorial/controlflow.rst:750
msgid "A function definition may look like:"
msgstr "Определение функции может выглядеть так:"

#: ../../tutorial/controlflow.rst:752
msgid ""
"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Positional or keyword   |\n"
"        |                                - Keyword only\n"
"         -- Positional only"
msgstr ""
"def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n"
"      -----------    ----------     ----------\n"
"        |             |                  |\n"
"        |        Positional or keyword   |\n"
"        |                                - Keyword only\n"
"         -- Positional only"

#: ../../tutorial/controlflow.rst:761
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"где ``/`` и ``*`` являются необязательными. Если эти символы используются, "
"они указывают тип параметра и способ передачи аргументов в функцию: только "
"позиционно, позиционно или по ключевому слову и только по ключевому слову. "
"Параметры ключевого слова также называются именованными параметрами."

#: ../../tutorial/controlflow.rst:768
msgid "Positional-or-Keyword Arguments"
msgstr "Позиционные или ключевые аргументы"

#: ../../tutorial/controlflow.rst:770
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Если ``/`` и ``*`` отсутствуют в определении функции, аргументы могут быть "
"переданы функции по позиции или по ключевому слову."

#: ../../tutorial/controlflow.rst:775
msgid "Positional-Only Parameters"
msgstr "Только позиционные параметры"

#: ../../tutorial/controlflow.rst:777
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Если посмотреть на это немного подробнее, можно пометить определенные "
"параметры как *только позиционные*. Если *только позиционно*, порядок "
"параметров имеет значение, и параметры не могут передаваться по ключевому "
"слову. Параметры, предназначенные только для позиции, помещаются перед ``/`` "
"(косой чертой). ``/`` используется для логического отделения позиционных "
"параметров от остальных параметров. Если в определении функции нет ``/``, то "
"нет и позиционных параметров."

#: ../../tutorial/controlflow.rst:785
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Параметры, следующие за ``/``, могут быть *позиционными или ключевыми "
"словами* или *только ключевыми словами*."

#: ../../tutorial/controlflow.rst:789
msgid "Keyword-Only Arguments"
msgstr "Аргументы, содержащие только ключевые слова"

#: ../../tutorial/controlflow.rst:791
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Чтобы пометить параметры как *только ключевое слово*, указывая, что "
"параметры должны передаваться с помощью аргумента ключевого слова, поместите "
"``*`` в список аргументов непосредственно перед первым параметром *ключевое "
"слово*."

#: ../../tutorial/controlflow.rst:797
msgid "Function Examples"
msgstr "Примеры функций"

#: ../../tutorial/controlflow.rst:799
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Рассмотрим следующие примеры определений функций, обращая пристальное "
"внимание на маркеры ``/`` и ``*``:"

#: ../../tutorial/controlflow.rst:802
msgid ""
">>> def standard_arg(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def pos_only_arg(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def kwd_only_arg(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def combined_example(pos_only, /, standard, *, kwd_only):\n"
"...     print(pos_only, standard, kwd_only)"
msgstr ""
">>> def standard_arg(arg):\n"
"...     print(arg)\n"
"...\n"
">>> def pos_only_arg(arg, /):\n"
"...     print(arg)\n"
"...\n"
">>> def kwd_only_arg(*, arg):\n"
"...     print(arg)\n"
"...\n"
">>> def combined_example(pos_only, /, standard, *, kwd_only):\n"
"...     print(pos_only, standard, kwd_only)"

#: ../../tutorial/controlflow.rst:815
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"Первое определение функции, «standard_arg», наиболее знакомая форма, не "
"накладывает никаких ограничений на соглашение о вызовах, а аргументы могут "
"передаваться по позиции или ключевому слову::"

#: ../../tutorial/controlflow.rst:819
msgid ""
">>> standard_arg(2)\n"
"2\n"
"\n"
">>> standard_arg(arg=2)\n"
"2"
msgstr ""
">>> standard_arg(2)\n"
"2\n"
"\n"
">>> standard_arg(arg=2)\n"
"2"

#: ../../tutorial/controlflow.rst:825
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"Вторая функция ``pos_only_arg`` ограничена использованием только позиционных "
"параметров, поскольку в определении функции есть ``/``:"

#: ../../tutorial/controlflow.rst:828
msgid ""
">>> pos_only_arg(1)\n"
"1\n"
"\n"
">>> pos_only_arg(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: pos_only_arg() got some positional-only arguments passed as "
"keyword arguments: 'arg'"
msgstr ""
">>> pos_only_arg(1)\n"
"1\n"
"\n"
">>> pos_only_arg(arg=1)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: pos_only_arg() got some positional-only arguments passed as "
"keyword arguments: 'arg'"

#: ../../tutorial/controlflow.rst:836
msgid ""
"The third function ``kwd_only_arg`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"Третья функция ``kwd_only_arg`` допускает только ключевые аргументы, "
"указанные символом ``*`` в определении функции::"

#: ../../tutorial/controlflow.rst:839
msgid ""
">>> kwd_only_arg(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n"
"\n"
">>> kwd_only_arg(arg=3)\n"
"3"
msgstr ""
">>> kwd_only_arg(3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n"
"\n"
">>> kwd_only_arg(arg=3)\n"
"3"

#: ../../tutorial/controlflow.rst:847
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"И последний использует все три соглашения о вызовах в одном определении "
"функции:"

#: ../../tutorial/controlflow.rst:850
msgid ""
">>> combined_example(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() takes 2 positional arguments but 3 were given\n"
"\n"
">>> combined_example(1, 2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(1, standard=2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(pos_only=1, standard=2, kwd_only=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() got some positional-only arguments passed as "
"keyword arguments: 'pos_only'"
msgstr ""
">>> combined_example(1, 2, 3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() takes 2 positional arguments but 3 were given\n"
"\n"
">>> combined_example(1, 2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(1, standard=2, kwd_only=3)\n"
"1 2 3\n"
"\n"
">>> combined_example(pos_only=1, standard=2, kwd_only=3)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: combined_example() got some positional-only arguments passed as "
"keyword arguments: 'pos_only'"

#: ../../tutorial/controlflow.rst:867
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Наконец, рассмотрим это определение функции, которое потенциально может "
"конфликтовать между позиционным аргументом ``name`` и ``**kwds``, имеющим "
"``name`` в качестве ключа:"

#: ../../tutorial/controlflow.rst:869
msgid ""
"def foo(name, **kwds):\n"
"    return 'name' in kwds"
msgstr ""
"def foo(name, **kwds):\n"
"    return 'name' in kwds"

#: ../../tutorial/controlflow.rst:872
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Невозможно выполнить вызов, который заставил бы его вернуть ``True``, "
"поскольку ключевое слово ``'name'`` всегда будет привязано к первому "
"параметру. Например::"

#: ../../tutorial/controlflow.rst:875
msgid ""
">>> foo(1, **{'name': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() got multiple values for argument 'name'\n"
">>>"
msgstr ""
">>> foo(1, **{'name': 2})\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: foo() got multiple values for argument 'name'\n"
">>>"

#: ../../tutorial/controlflow.rst:881
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Но используя ``/`` (только позиционные аргументы), это возможно, поскольку "
"оно позволяет использовать ``name`` в качестве позиционного аргумента и "
"``'name'`` в качестве ключа в аргументах ключевого слова::"

#: ../../tutorial/controlflow.rst:883
msgid ""
">>> def foo(name, /, **kwds):\n"
"...     return 'name' in kwds\n"
"...\n"
">>> foo(1, **{'name': 2})\n"
"True"
msgstr ""
">>> def foo(name, /, **kwds):\n"
"...     return 'name' in kwds\n"
"...\n"
">>> foo(1, **{'name': 2})\n"
"True"

#: ../../tutorial/controlflow.rst:889
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Другими словами, имена позиционных параметров могут использоваться в "
"``**kwds`` без двусмысленности."

#: ../../tutorial/controlflow.rst:894
msgid "Recap"
msgstr "Резюме"

#: ../../tutorial/controlflow.rst:896
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"Вариант использования будет определять, какие параметры использовать в "
"определении функции:"

#: ../../tutorial/controlflow.rst:898
msgid "def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):"
msgstr "def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):"

#: ../../tutorial/controlflow.rst:900
msgid "As guidance:"
msgstr "В качестве руководства:"

#: ../../tutorial/controlflow.rst:902
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Используйте позиционный-only, если вы хотите, чтобы имена параметров были "
"недоступны пользователю. Это полезно, когда имена параметров не имеют "
"реального значения, если вы хотите обеспечить соблюдение порядка аргументов "
"при вызове функции или если вам нужно взять некоторые позиционные параметры "
"и произвольные ключевые слова."

#: ../../tutorial/controlflow.rst:907
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Используйте только ключевые слова, когда имена имеют значение, а определение "
"функции более понятно, если имена указаны явно, или вы хотите, чтобы "
"пользователи не полагались на позицию передаваемого аргумента."

#: ../../tutorial/controlflow.rst:910
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Для API используйте только позиционирование, чтобы предотвратить нарушение "
"изменений API, если имя параметра будет изменено в будущем."

#: ../../tutorial/controlflow.rst:916
msgid "Arbitrary Argument Lists"
msgstr "Произвольные списки аргументов"

#: ../../tutorial/controlflow.rst:921
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Наконец, наименее часто используемый вариант — указать, что функцию можно "
"вызывать с произвольным количеством аргументов. Эти аргументы будут "
"заключены в кортеж (см. :ref:`tut-tuples`). Перед переменным числом "
"аргументов может встречаться ноль или более нормальных аргументов. ::"

#: ../../tutorial/controlflow.rst:926
msgid ""
"def write_multiple_items(file, separator, *args):\n"
"    file.write(separator.join(args))"
msgstr ""
"def write_multiple_items(file, separator, *args):\n"
"    file.write(separator.join(args))"

#: ../../tutorial/controlflow.rst:930
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Обычно эти *вариативные* аргументы будут последними в списке формальных "
"параметров, поскольку они собирают все оставшиеся входные аргументы, "
"передаваемые функции. Любые формальные параметры, которые встречаются после "
"параметра ``*args``, являются аргументами «только для ключевых слов», то "
"есть их можно использовать только как ключевые слова, а не как позиционные "
"аргументы. ::"

#: ../../tutorial/controlflow.rst:936
msgid ""
">>> def concat(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concat(\"earth\", \"mars\", \"venus\")\n"
"'earth/mars/venus'\n"
">>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n"
"'earth.mars.venus'"
msgstr ""
">>> def concat(*args, sep=\"/\"):\n"
"...     return sep.join(args)\n"
"...\n"
">>> concat(\"earth\", \"mars\", \"venus\")\n"
"'earth/mars/venus'\n"
">>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n"
"'earth.mars.venus'"

#: ../../tutorial/controlflow.rst:947
msgid "Unpacking Argument Lists"
msgstr "Распаковка списков аргументов"

#: ../../tutorial/controlflow.rst:949
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"Обратная ситуация возникает, когда аргументы уже находятся в списке или "
"кортеже, но их необходимо распаковать для вызова функции, требующей "
"отдельных позиционных аргументов. Например, встроенная функция :func:`range` "
"ожидает отдельные аргументы *start* и *stop*. Если они недоступны отдельно, "
"напишите вызов функции с оператором ``*``\\, чтобы распаковать аргументы из "
"списка или кортежа::"

#: ../../tutorial/controlflow.rst:956
msgid ""
">>> list(range(3, 6))            # normal call with separate arguments\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # call with arguments unpacked from a "
"list\n"
"[3, 4, 5]"
msgstr ""
">>> list(range(3, 6))            # normal call with separate arguments\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # call with arguments unpacked from a "
"list\n"
"[3, 4, 5]"

#: ../../tutorial/controlflow.rst:965
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Таким же образом словари могут доставлять аргументы ключевых слов с помощью "
"оператора ``**``\\::"

#: ../../tutorial/controlflow.rst:968
msgid ""
">>> def parrot(voltage, state='a stiff', action='voom'):\n"
"...     print(\"-- This parrot wouldn't\", action, end=' ')\n"
"...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n"
"...     print(\"E's\", state, \"!\")\n"
"...\n"
">>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", "
"\"action\": \"VOOM\"}\n"
">>> parrot(**d)\n"
"-- This parrot wouldn't VOOM if you put four million volts through it. E's "
"bleedin' demised !"
msgstr ""
">>> def parrot(voltage, state='a stiff', action='voom'):\n"
"...     print(\"-- This parrot wouldn't\", action, end=' ')\n"
"...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n"
"...     print(\"E's\", state, \"!\")\n"
"...\n"
">>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", "
"\"action\": \"VOOM\"}\n"
">>> parrot(**d)\n"
"-- This parrot wouldn't VOOM if you put four million volts through it. E's "
"bleedin' demised !"

#: ../../tutorial/controlflow.rst:981
msgid "Lambda Expressions"
msgstr "Лямбда-выражения"

#: ../../tutorial/controlflow.rst:983
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Небольшие анонимные функции можно создавать с помощью ключевого слова :"
"keyword:`lambda`. Эта функция возвращает сумму двух своих аргументов: "
"``лямбда a, b: a+b``. Лямбда-функции можно использовать везде, где требуются "
"функциональные объекты. Они синтаксически ограничены одним выражением. "
"Семантически они являются просто синтаксическим сахаром для обычного "
"определения функции. Как и определения вложенных функций, лямбда-функции "
"могут ссылаться на переменные из содержащей их области::"

#: ../../tutorial/controlflow.rst:991
msgid ""
">>> def make_incrementor(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = make_incrementor(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"
msgstr ""
">>> def make_incrementor(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = make_incrementor(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"

#: ../../tutorial/controlflow.rst:1000
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"В приведенном выше примере используется лямбда-выражение для возврата "
"функции. Другое использование — передать небольшую функцию в качестве "
"аргумента:"

#: ../../tutorial/controlflow.rst:1003
msgid ""
">>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n"
">>> pairs.sort(key=lambda pair: pair[1])\n"
">>> pairs\n"
"[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]"
msgstr ""
">>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n"
">>> pairs.sort(key=lambda pair: pair[1])\n"
">>> pairs\n"
"[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]"

#: ../../tutorial/controlflow.rst:1012
msgid "Documentation Strings"
msgstr "Строки документации"

#: ../../tutorial/controlflow.rst:1019
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Вот некоторые соглашения о содержании и форматировании строк документации."

#: ../../tutorial/controlflow.rst:1022
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Первая строка всегда должна представлять собой краткое и лаконичное "
"изложение назначения объекта. Для краткости не следует явно указывать имя "
"или тип объекта, поскольку они доступны другими способами (за исключением "
"случаев, когда имя является глаголом, описывающим работу функции). Эта "
"строка должна начинаться с заглавной буквы и заканчиваться точкой."

#: ../../tutorial/controlflow.rst:1028
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Если в строке документации больше строк, вторая строка должна быть пустой, "
"визуально отделяя краткое изложение от остального описания. Следующие строки "
"должны представлять собой один или несколько абзацев, описывающих соглашения "
"о вызовах объекта, его побочные эффекты и т. д."

#: ../../tutorial/controlflow.rst:1033
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Анализатор Python не удаляет отступы из многострочных строковых литералов в "
"Python, поэтому инструменты, обрабатывающие документацию, при необходимости "
"должны удалять отступы. Это делается с использованием следующего соглашения. "
"Первая непустая строка *после* первой строки строки определяет величину "
"отступа для всей строки документации. (Мы не можем использовать первую "
"строку, поскольку она обычно примыкает к открывающим кавычкам строки, "
"поэтому ее отступ не виден в строковом литерале.) Пробелы, «эквивалентные» "
"этому отступу, затем удаляются из начала всех строк строки. . Строки с "
"меньшим отступом не должны встречаться, но если они встречаются, все ведущие "
"пробелы должны быть удалены. Эквивалентность пробелов следует проверять "
"после расширения табуляции (обычно до 8 пробелов)."

#: ../../tutorial/controlflow.rst:1045
msgid "Here is an example of a multi-line docstring::"
msgstr "Вот пример многострочной строки документации:"

#: ../../tutorial/controlflow.rst:1047
msgid ""
">>> def my_function():\n"
"...     \"\"\"Do nothing, but document it.\n"
"...\n"
"...     No, really, it doesn't do anything.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(my_function.__doc__)\n"
"Do nothing, but document it.\n"
"\n"
"    No, really, it doesn't do anything."
msgstr ""
">>> def my_function():\n"
"...     \"\"\"Do nothing, but document it.\n"
"...\n"
"...     No, really, it doesn't do anything.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(my_function.__doc__)\n"
"Do nothing, but document it.\n"
"\n"
"    No, really, it doesn't do anything."

#: ../../tutorial/controlflow.rst:1063
msgid "Function Annotations"
msgstr "Аннотации функций"

#: ../../tutorial/controlflow.rst:1071
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Аннотации функций <function>` — это совершенно необязательная "
"информация метаданных о типах, используемых пользовательскими функциями "
"(дополнительную информацию см. в :pep:`3107` и :pep:`484`)."

#: ../../tutorial/controlflow.rst:1075
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:`!"
"__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""
":term:`Аннотации <аннотация функции>` хранятся в атрибуте :attr:`!"
"__annotations__` функции как словарь и не влияют на любую другую часть "
"функции. Аннотации параметров определяются двоеточием после имени параметра, "
"за которым следует выражение, вычисляющее значение аннотации. Аннотации "
"возврата определяются литералом ``->``, за которым следует выражение, между "
"списком параметров и двоеточием, обозначающим конец оператора :keyword:"
"`def`. В следующем примере есть обязательный аргумент, необязательный "
"аргумент и аннотированное возвращаемое значение:"

#: ../../tutorial/controlflow.rst:1084
msgid ""
">>> def f(ham: str, eggs: str = 'eggs') -> str:\n"
"...     print(\"Annotations:\", f.__annotations__)\n"
"...     print(\"Arguments:\", ham, eggs)\n"
"...     return ham + ' and ' + eggs\n"
"...\n"
">>> f('spam')\n"
"Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class "
"'str'>}\n"
"Arguments: spam eggs\n"
"'spam and eggs'"
msgstr ""
">>> def f(ham: str, eggs: str = 'eggs') -> str:\n"
"...     print(\"Annotations:\", f.__annotations__)\n"
"...     print(\"Arguments:\", ham, eggs)\n"
"...     return ham + ' and ' + eggs\n"
"...\n"
">>> f('spam')\n"
"Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class "
"'str'>}\n"
"Arguments: spam eggs\n"
"'spam and eggs'"

#: ../../tutorial/controlflow.rst:1097
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Coding Style"

#: ../../tutorial/controlflow.rst:1102
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Теперь, когда вы собираетесь писать более длинные и сложные фрагменты "
"Python, самое время поговорить о *стиле кодирования*. Большинство языков "
"могут быть написаны (или, более кратко, *отформатированы*) в разных стилях; "
"некоторые более читабельны, чем другие. Всегда полезно облегчить другим "
"чтение вашего кода, и принятие хорошего стиля кодирования очень помогает в "
"этом."

#: ../../tutorial/controlflow.rst:1108
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Для Python :pep:`8` стал руководством по стилю, которого придерживается "
"большинство проектов; он способствует очень читабельному и приятному для "
"глаз стилю кодирования. Каждый разработчик Python должен когда-нибудь "
"прочитать его; вот наиболее важные моменты, извлеченные для вас:"

#: ../../tutorial/controlflow.rst:1113
msgid "Use 4-space indentation, and no tabs."
msgstr "Используйте отступы в 4 пробела и не используйте табуляцию."

#: ../../tutorial/controlflow.rst:1115
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 пробела — хороший компромисс между небольшим отступом (позволяет увеличить "
"глубину вложенности) и большим отступом (облегчает чтение). Вкладки вносят "
"путаницу, поэтому их лучше не использовать."

#: ../../tutorial/controlflow.rst:1119
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Переносите строки так, чтобы они не превышали 79 символов."

#: ../../tutorial/controlflow.rst:1121
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Это помогает пользователям с небольшими дисплеями и позволяет размещать "
"несколько файлов кода рядом на больших дисплеях."

#: ../../tutorial/controlflow.rst:1124
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Используйте пустые строки для разделения функций и классов, а также более "
"крупных блоков кода внутри функций."

#: ../../tutorial/controlflow.rst:1127
msgid "When possible, put comments on a line of their own."
msgstr "По возможности помещайте комментарии в отдельную строку."

#: ../../tutorial/controlflow.rst:1129
msgid "Use docstrings."
msgstr "Use docstrings."

#: ../../tutorial/controlflow.rst:1131
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Используйте пробелы вокруг операторов и после запятых, но не непосредственно "
"внутри конструкций скобок: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1134
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Называйте свои классы и функции последовательно; соглашение заключается в "
"использовании ``UpperCamelCase`` для классов и "
"``lowercase_with_underscores`` для функций и методов. Всегда используйте "
"self в качестве имени первого аргумента метода (подробнее о классах и "
"методах см. :ref:`tut-firstclasses`)."

#: ../../tutorial/controlflow.rst:1139
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Не используйте сложные кодировки, если ваш код предназначен для "
"использования в международных средах. В любом случае лучше всего работают "
"значения по умолчанию Python, UTF-8 или даже простой ASCII."

#: ../../tutorial/controlflow.rst:1143
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Аналогично, не используйте в идентификаторах символы, отличные от ASCII, "
"если есть лишь малейшая вероятность того, что люди, говорящие на другом "
"языке, будут читать или поддерживать код."

#: ../../tutorial/controlflow.rst:1149
msgid "Footnotes"
msgstr "Сноски"

#: ../../tutorial/controlflow.rst:1150
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"На самом деле, *вызов по ссылке на объект* было бы лучшим описанием, "
"поскольку, если передается изменяемый объект, вызывающий объект увидит любые "
"изменения, которые вызываемый объект вносит в него (элементы, вставленные в "
"список)."

#: ../../tutorial/controlflow.rst:48
msgid "statement"
msgstr "инструкция"

#: ../../tutorial/controlflow.rst:48
msgid "for"
msgstr "for"

#: ../../tutorial/controlflow.rst:477 ../../tutorial/controlflow.rst:1014
msgid "documentation strings"
msgstr "строки документации"

#: ../../tutorial/controlflow.rst:477 ../../tutorial/controlflow.rst:1014
msgid "docstrings"
msgstr "docstrings"

#: ../../tutorial/controlflow.rst:477 ../../tutorial/controlflow.rst:1014
msgid "strings, documentation"
msgstr "strings, documentation"

#: ../../tutorial/controlflow.rst:918
msgid "* (asterisk)"
msgstr "* (звёздочка)"

#: ../../tutorial/controlflow.rst:918 ../../tutorial/controlflow.rst:962
msgid "in function calls"
msgstr "в вызовах функций"

#: ../../tutorial/controlflow.rst:962
msgid "**"
msgstr "**"

#: ../../tutorial/controlflow.rst:1066
msgid "function"
msgstr "функция"

#: ../../tutorial/controlflow.rst:1066
msgid "annotations"
msgstr "аннотации"

#: ../../tutorial/controlflow.rst:1066
msgid "->"
msgstr "->"

#: ../../tutorial/controlflow.rst:1066
msgid "function annotations"
msgstr "function annotations"

#: ../../tutorial/controlflow.rst:1066
msgid ": (colon)"
msgstr ": (двоеточие)"

#: ../../tutorial/controlflow.rst:1100
msgid "coding"
msgstr "кодирование"

#: ../../tutorial/controlflow.rst:1100
msgid "style"
msgstr "стиль"
