# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 15:26+0000\n"
"PO-Revision-Date: 2023-05-24 02:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Больше инструментов управления потоком выполнения программы"

#: ../../tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few "
"more that we will encounter in this chapter."
msgstr ""
"Помимо только что представленного оператора :keyword:` while `, Python "
"использует еще несколько, с которыми мы столкнемся в этой главе."

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Инструкция :keyword:`!if`"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "Пожалуй, самая известный тип инструкции — это :keyword:`if`. Например:"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
" В инструкции может быть ноль или больше ветвей :keyword:`elif`, и ветка :"
"keyword:`else` необязательна. Ключевое слово ':keyword:`!elif`' — сокращение "
"для 'else if' ('иначе если'), оно позволяет избежать большого количества "
"отступов. Поеследовательность :keyword:`!if` ... :keyword:`!elif` ... :"
"keyword:`!elif` ... заменяет операторы ``switch`` и ``case`` в других языках."

#: ../../tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Если вы сравниваете одно и то же значение с несколькими константами или "
"проверяете определенные типы или атрибуты, вам также может пригодиться "
"оператор :keyword:`!match`. Для получения более подробной информации см. :"
"ref:`tut-match`."

#: ../../tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Инструкция :keyword:`!for`"

#: ../../tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"В Python инструкция :keyword:`for`немного отличается от  :keyword:`for` в C "
"или Pascal. Вместо того, чтобы обходить арифметическую прогрессию чисел (как "
"в Pascal) или давать программисту возможность задавать шаг итерации и "
"условие остановки (как в C), цикл :keyword:`!for` в Python обходит элементы "
"любой последовательности (списка или строки) в том порядке, в котором они в "
"ней встречаются. Например:"

#: ../../tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Правильно написать цикл, изменяющий коллекцию во время её обхода, бывает "
"трудно. Обычно гораздо проще пройтись по копии коллекции или создать новую::"

#: ../../tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "Функция :func:`range`"

#: ../../tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Если вам нужно проитерироваться по последовательности чисел, то пригодится "
"встроенная функция :func:`range`. Она генерирует арифметические прогрессии::"

#: ../../tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Предоставленная \"конечная точка\" никогда не входит в сгенерированную "
"последовательность; ``range(10)`` сгенерирует 10 значений, индексы элементов "
"последовательности длиной равной 10. Также возможно начать диапазон с "
"другого числа или указать другое приращение (даже отрицательное; иногда это "
"называется \"шагом\")::"

#: ../../tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Чтобы проитерироваться по индексам последовательности, можно соединить "
"функции :func:`range` и :func:`len` следующим образом::"

#: ../../tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"В большинстве подобных случаев функция :func:`enumerate` более удобна, см. :"
"ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Если вы просто печатаете функцию range, происходит странная вещь::"

#: ../../tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"В множестве случаев объект, который возвращается функцией :func:`range`, "
"ведёт себя как список, но в действительности он списком не является. Это "
"объект, который возвращает следующий элемент последовательности, когда он "
"действительно нужен в процессе итерации, таким образом сохраняется память, "
"потому что список на самом деле не составляется."

#: ../../tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Мы говорим, что такой объект является :term:`iterable`, то есть подходит в "
"качестве цели для функций и конструкций, которые ожидают чего-то, из чего "
"они могут получать последовательные элементы, пока запас не будет исчерпан. "
"Мы видели, что такой конструкцией является оператор :keyword:`for`, а "
"примером функции, принимающей итерацию, является :func:`sum`::"

#: ../../tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Позже мы увидим больше функций, которые возвращают итерации и принимают "
"итерации в качестве аргументов. В главе :ref:`tut-structures` мы более "
"подробно обсудим :func:`list`."

#: ../../tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
"Инструкции :keyword:`!break` и :keyword:`!continue`; фраза :keyword:`!else` "
"у циклов"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing :"
"keyword:`for` or :keyword:`while` loop."
msgstr ""

#: ../../tutorial/controlflow.rst:169
msgid ""
"A :keyword:`!for` or :keyword:`!while` loop can include an :keyword:`!else` "
"clause."
msgstr ""

#: ../../tutorial/controlflow.rst:171
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop reaches its final iteration."
msgstr ""

#: ../../tutorial/controlflow.rst:174
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes "
"false."
msgstr ""
"В цикле :keyword:` while` он выполняется после того, как условие цикла "
"становится ложным."

#: ../../tutorial/controlflow.rst:176
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`."
msgstr ""

#: ../../tutorial/controlflow.rst:179
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Это иллюстрируется следующим циклом :keyword:`!for`, который ищет простые "
"числа::"

#: ../../tutorial/controlflow.rst:200
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Да, это корректный код. Посмотрите внимательнее: ветка ``else`` относится к "
"циклу :keyword:`for`, а **не** к оператору :keyword:`if`.)"

#: ../../tutorial/controlflow.rst:203
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""
"При использовании с циклом ветка ``else`` больше похожа на ветку ``else`` у "
"инструкции :keyword:`try`, нежели чем у инструкций :keyword:` if`: ветка "
"``else`` при использовании с :keyword:`try` выполняется, если исключения не "
"случилось, и ветка ``else`` в цикле :keyword:`for` выполняется, если "
"инструкция ``break`` не была вызвана. Более подробно с инструкцией :keyword:"
"`!try` и исключениями можно познакомиться в разделе :ref:`tut-handling`."

#: ../../tutorial/controlflow.rst:210
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
" Инструкция :keyword:`continue`, которая также позаимоствована из C, "
"продолжает выполнения цикла со следующей итерации::"

#: ../../tutorial/controlflow.rst:231
msgid ":keyword:`!pass` Statements"
msgstr "Инструкция :keyword:`!pass`"

#: ../../tutorial/controlflow.rst:233
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Инструкция :keyword:`pass` ничего не делает. Её можно использовть , когда "
"инструкция требуется в соответствии с синтаксисом, но программа при этом не "
"должна ничего делать. Например::"

#: ../../tutorial/controlflow.rst:240
msgid "This is commonly used for creating minimal classes::"
msgstr ":keyword:`pass` часто используется при создании минимальных классов::"

#: ../../tutorial/controlflow.rst:246
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Другое применение инструкции :keyword:`pass` — заглушка для тела функции или "
"ветки условной инструкции, когда вы работаете над новым кодом. Это позволяет "
"думаю о коде на более высоком, абстрактном уровне. Инструкция :keyword:"
"`pass` просто игнорируется::"

#: ../../tutorial/controlflow.rst:258
msgid ":keyword:`!match` Statements"
msgstr ":keyword:`!match` Заявления"

#: ../../tutorial/controlflow.rst:260
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""
"Оператор :keyword:`match` принимает выражение и сравнивает его значение с "
"последовательными шаблонами, заданными в виде одного или нескольких блоков "
"регистра. Внешне это похоже на оператор переключения в C, Java или "
"JavaScript (и во многих других языках), но больше похоже на сопоставление с "
"образцом в таких языках, как Rust или Haskell. Выполняется только первый "
"соответствующий шаблон, а также он может извлекать компоненты (элементы "
"последовательности или атрибуты объекта) из значения в переменные."

#: ../../tutorial/controlflow.rst:268
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"Самая простая форма сравнивает значение субъекта с одним или несколькими "
"литералами:"

#: ../../tutorial/controlflow.rst:281
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"Обратите внимание на последний блок: «имя переменной» ``_`` действует как "
"*подстановочный знак* и всегда соответствует. Если ни один регистр не "
"соответствует, ни одна из ветвей не выполняется."

#: ../../tutorial/controlflow.rst:284
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Вы можете объединить несколько литералов в один шаблон, используя ``|`` "
"(\"или\")::"

#: ../../tutorial/controlflow.rst:289
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Шаблоны могут выглядеть как распаковочные присваивания и использоваться для "
"привязки переменных:"

#: ../../tutorial/controlflow.rst:305
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Изучите это внимательно! Первый шаблон имеет два литерала, и его можно "
"рассматривать как расширение шаблона литералов, показанного выше. Но "
"следующие два шаблона объединяют литерал и переменную, а переменная "
"*связывает* значение субъекта («точки»). Четвертый шаблон захватывает два "
"значения, что делает его концептуально похожим на присваивание распаковки "
"``(x, y) = point``."

#: ../../tutorial/controlflow.rst:312
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Если вы используете классы для структурирования своих данных, вы можете "
"использовать имя класса, за которым следует список аргументов, напоминающий "
"конструктор, но с возможностью захвата атрибутов в переменные:"

#: ../../tutorial/controlflow.rst:334
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Вы можете использовать позиционные параметры с некоторыми встроенными "
"классами, которые обеспечивают порядок их атрибутов (например, классов "
"данных). Вы также можете определить определенное положение атрибутов в "
"шаблонах, установив в своих классах специальный атрибут ``__match_args__``. "
"Если для него установлено значение («x», «y»), все следующие шаблоны "
"эквивалентны (и все они привязывают атрибут ``y`` к переменной ``var``):"

#: ../../tutorial/controlflow.rst:345
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Рекомендуемый способ чтения шаблонов — рассматривать их как расширенную "
"форму того, что вы поместили бы слева от присваивания, чтобы понять, каким "
"переменным какое значение будет присвоено. Оператором сопоставления "
"присваиваются только автономные имена (например, ``var`` выше). Имена с "
"точками (например, ``foo.bar``), имена атрибутов (``x=`` и ``y=`` выше) или "
"имена классов (распознаваемые по знаку \"(...)\" рядом с ними, например "
"``Point`` выше) никогда не назначаются."

#: ../../tutorial/controlflow.rst:352
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Шаблоны могут быть произвольно вложены. Например, если у нас есть короткий "
"список точек с добавленным ``__match_args__``, мы могли бы сопоставить его "
"следующим образом:"

#: ../../tutorial/controlflow.rst:373
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Мы можем добавить в шаблон предложение if, известное как «защита». Если "
"защита ложна, ``match`` переходит к следующему блоку case. Обратите "
"внимание, что захват значения происходит до оценки защиты::"

#: ../../tutorial/controlflow.rst:383
msgid "Several other key features of this statement:"
msgstr "Еще несколько ключевых особенностей этого утверждения:"

#: ../../tutorial/controlflow.rst:385
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Подобно распаковке присваиваний, шаблоны кортежей и списков имеют одно и то "
"же значение и фактически соответствуют произвольным последовательностям. "
"Важным исключением является то, что они не соответствуют итераторам или "
"строкам."

#: ../../tutorial/controlflow.rst:389
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Шаблоны последовательностей поддерживают расширенную распаковку: ``[x, y, "
"*rest]`` и ``(x, y, *rest)`` работают аналогично назначениям распаковки. Имя "
"после ``*`` также может быть ``_``, поэтому ``(x, y, *_)`` соответствует "
"последовательности, состоящей как минимум из двух элементов, без привязки "
"остальных элементов."

#: ../../tutorial/controlflow.rst:394
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Шаблоны сопоставления: ``{\"bandwidth\": b, \"latency\": l}`` захватывает "
"значения ``\"bandwidth\"`` и ``\"latency\"`` из словаря. В отличие от "
"шаблонов последовательности, дополнительные ключи игнорируются. Также "
"поддерживается распаковка типа ``**rest``. (Но ``**_`` было бы лишним, "
"поэтому это не разрешено.)"

#: ../../tutorial/controlflow.rst:399
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Подшаблоны могут быть записаны с использованием ключевого слова as::"

#: ../../tutorial/controlflow.rst:403
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"захватит второй элемент ввода как ``p2`` (пока входные данные представляют "
"собой последовательность из двух точек)"

#: ../../tutorial/controlflow.rst:406
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"Большинство литералов сравниваются по принципу равенства, однако одиночные "
"элементы ``True``, ``False`` и ``None`` сравниваются по тождеству."

#: ../../tutorial/controlflow.rst:409
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Шаблоны могут использовать именованные константы. Имена должны быть "
"разделены точками, чтобы их нельзя было интерпретировать как переменную "
"захвата:"

#: ../../tutorial/controlflow.rst:428
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Более подробное объяснение и дополнительные примеры можно найти в :pep:"
"`636`, написанном в формате учебного пособия."

#: ../../tutorial/controlflow.rst:434
msgid "Defining Functions"
msgstr "Определение функций"

#: ../../tutorial/controlflow.rst:436
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Мы можем создать функцию, которая записывает ряд Фибоначчи в произвольную "
"границу:"

#: ../../tutorial/controlflow.rst:456
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Ключевое слово :keyword:`def` представляет функцию *определение*. За ним "
"должно следовать имя функции и список формальных параметров в скобках. "
"Операторы, составляющие тело функции, начинаются со следующей строки и "
"должны иметь отступ."

#: ../../tutorial/controlflow.rst:461
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Первый оператор тела функции опционально может быть строковым литералом; "
"этот строковый литерал является строкой документации функции или :dfn:"
"`docstring`. (Более подробную информацию о строках документации можно найти "
"в разделе :ref:`tut-docstrings`.) Существуют инструменты, которые используют "
"строки документации для автоматического создания онлайновой или печатной "
"документации или для того, чтобы позволить пользователю интерактивно "
"просматривать код; хорошей практикой является включение строк документации в "
"код, который вы пишете, так что возьмите это за привычку."

#: ../../tutorial/controlflow.rst:468
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*Выполнение* функции вводит новую таблицу символов, используемую для "
"локальных переменных функции. Точнее, все назначения переменных в функции "
"сохраняют значение в локальной таблице символов; тогда как ссылки на "
"переменные сначала просматриваются в локальной таблице символов, затем в "
"локальных таблицах символов включающих функций, затем в глобальной таблице "
"символов и, наконец, в таблице встроенных имен. Таким образом, глобальным "
"переменным и переменным включающих функций не может быть напрямую присвоено "
"значение внутри функции (за исключением случаев, когда глобальные переменные "
"названы в операторе :keyword:`global` или переменные включающих функций "
"названы в :keyword: `nonlocal`), хотя на них можно ссылаться."

#: ../../tutorial/controlflow.rst:479
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Фактические параметры (аргументы) вызова функции вводятся в локальную "
"таблицу символов вызываемой функции при ее вызове; таким образом, аргументы "
"передаются с использованием *вызова по значению* (где *значение* всегда "
"является *ссылкой* объекта, а не значением объекта). [#]_ Когда функция "
"вызывает другую функцию или рекурсивно вызывает саму себя, для этого вызова "
"создается новая локальная таблица символов."

#: ../../tutorial/controlflow.rst:486
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Определение функции связывает имя функции с объектом функции в текущей "
"таблице символов. Интерпретатор распознает объект, на который указывает это "
"имя, как определяемую пользователем функцию. Другие имена также могут "
"указывать на тот же объект функции и также могут использоваться для доступа "
"к функции::"

#: ../../tutorial/controlflow.rst:497
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Из других языков вы можете возразить, что fib — это не функция, а процедура, "
"поскольку она не возвращает значения. Фактически, даже функции без "
"оператора :keyword:`return` возвращают значение, хотя и довольно скучное. "
"Это значение называется None (это встроенное имя). Запись значения None "
"обычно подавляется интерпретатором, если это единственное записываемое "
"значение. Вы можете увидеть это, если действительно хотите использовать :"
"func:`print`::"

#: ../../tutorial/controlflow.rst:508
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Написать функцию, которая возвращает список чисел ряда Фибоначчи, вместо "
"того, чтобы печатать его, просто:"

#: ../../tutorial/controlflow.rst:524
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""
"Этот пример, как обычно, демонстрирует некоторые новые возможности Python:"

#: ../../tutorial/controlflow.rst:526
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Оператор :keyword:`return` возвращает значение из функции. :keyword:`!"
"return` без аргумента-выражения возвращает ``None``. Выход за конец функции "
"также возвращает None."

#: ../../tutorial/controlflow.rst:530
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`!append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"Оператор result.append(a) вызывает *метод* объекта списка result. Метод — "
"это функция, которая «принадлежит» объекту и называется «obj.имя метода», "
"где «obj» — это некоторый объект (это может быть выражение), а «имя метода» "
"— это имя метод, который определяется типом объекта. Разные типы определяют "
"разные методы. Методы разных типов могут иметь одно и то же имя, не вызывая "
"двусмысленности. (Можно определить свои собственные типы и методы объектов, "
"используя *классы*, см. :ref:`tut-classes`) Метод :meth:`!append`, "
"показанный в примере, определен для объектов списка; он добавляет новый "
"элемент в конец списка. В этом примере это эквивалентно ``result = result + "
"[a]``, но более эффективно."

#: ../../tutorial/controlflow.rst:545
msgid "More on Defining Functions"
msgstr "Подробнее об определении функций"

#: ../../tutorial/controlflow.rst:547
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Также возможно определять функции с переменным количеством аргументов. Есть "
"три формы, которые можно комбинировать."

#: ../../tutorial/controlflow.rst:554
msgid "Default Argument Values"
msgstr "Значения аргументов по умолчанию"

#: ../../tutorial/controlflow.rst:556
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Наиболее полезная форма — указать значение по умолчанию для одного или "
"нескольких аргументов. Это создает функцию, которую можно вызвать с меньшим "
"количеством аргументов, чем разрешено. Например::"

#: ../../tutorial/controlflow.rst:572
msgid "This function can be called in several ways:"
msgstr "Эту функцию можно вызвать несколькими способами:"

#: ../../tutorial/controlflow.rst:574
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"давая только обязательный аргумент: ``ask_ok('Вы действительно хотите "
"выйти?')``"

#: ../../tutorial/controlflow.rst:576
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"передавая один из необязательных аргументов: ``ask_ok('ОК, чтобы "
"перезаписать файл?', 2)``"

#: ../../tutorial/controlflow.rst:578
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"или даже приведя все аргументы: ``ask_ok('ОК перезаписать файл?', 2, 'Давай, "
"только да или нет!')``"

#: ../../tutorial/controlflow.rst:581
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"В этом примере также представлено ключевое слово :keyword:`in`. Это "
"проверяет, содержит ли последовательность определенное значение."

#: ../../tutorial/controlflow.rst:584
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Значения по умолчанию оцениваются в момент определения функции в "
"*определяющей* области, так что::"

#: ../../tutorial/controlflow.rst:595
msgid "will print ``5``."
msgstr "напечатает ``5``."

#: ../../tutorial/controlflow.rst:597
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Важное предупреждение:** Значение по умолчанию оценивается только один "
"раз. Это имеет значение, когда значением по умолчанию является изменяемый "
"объект, такой как список, словарь или экземпляры большинства классов. "
"Например, следующая функция аккумулирует аргументы, передаваемые ей при "
"последующих вызовах:"

#: ../../tutorial/controlflow.rst:610
msgid "This will print ::"
msgstr "будет напечатано ::"

#: ../../tutorial/controlflow.rst:616
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Если вы не хотите, чтобы значение по умолчанию использовалось при "
"последующих вызовах, вы можете вместо этого написать функцию следующим "
"образом:"

#: ../../tutorial/controlflow.rst:629
msgid "Keyword Arguments"
msgstr "Именованный аргумент"

#: ../../tutorial/controlflow.rst:631
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Функции также можно вызывать с использованием :term:`аргументов ключевого "
"слова <аргумент ключевого слова>` в форме ``kwarg=value``. Например, "
"следующая функция::"

#: ../../tutorial/controlflow.rst:640
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"принимает один обязательный аргумент («напряжение») и три дополнительных "
"аргумента («состояние», «действие» и «тип»). Эту функцию можно вызвать любым "
"из следующих способов:"

#: ../../tutorial/controlflow.rst:651
msgid "but all the following calls would be invalid::"
msgstr "но все следующие вызовы будут недействительны::"

#: ../../tutorial/controlflow.rst:658
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"При вызове функции аргументы ключевого слова должны следовать за "
"позиционными аргументами. Все передаваемые аргументы ключевого слова должны "
"соответствовать одному из аргументов, принимаемых функцией (например, "
"«актёр» не является допустимым аргументом для функции «попугай»), и их "
"порядок не важен. Сюда также входят необязательные аргументы (например, "
"``parrot(напряжение=1000)`` тоже допустимо). Ни один аргумент не может "
"принимать значение более одного раза. Вот пример, который не работает из-за "
"этого ограничения:"

#: ../../tutorial/controlflow.rst:674
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Когда присутствует последний формальный параметр формы ``**name``, он "
"получает словарь (см. :ref:`typesmapping`), содержащий все аргументы "
"ключевых слов, за исключением тех, которые соответствуют формальному "
"параметру. Его можно комбинировать с формальным параметром формы ``*name`` "
"(описанным в следующем подразделе), который получает :ref:`tuple <tut-"
"tuples>`, содержащий позиционные аргументы за пределами списка формальных "
"параметров. (``*name`` должно стоять перед ``**name``.) Например, если мы "
"определим функцию следующим образом:"

#: ../../tutorial/controlflow.rst:691
msgid "It could be called like this::"
msgstr "Это можно было бы назвать так::"

#: ../../tutorial/controlflow.rst:699
msgid "and of course it would print:"
msgstr "и, конечно же, он напечатает:"

#: ../../tutorial/controlflow.rst:712
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Обратите внимание, что порядок вывода аргументов ключевого слова "
"гарантированно соответствует порядку, в котором они были указаны при вызове "
"функции."

#: ../../tutorial/controlflow.rst:716
msgid "Special parameters"
msgstr "Специальные параметры"

#: ../../tutorial/controlflow.rst:718
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"По умолчанию аргументы могут передаваться в функцию Python либо по позиции, "
"либо явно по ключевому слову. Для удобства чтения и производительности имеет "
"смысл ограничить способ передачи аргументов, чтобы разработчику нужно было "
"только просматривать определение функции, чтобы определить, передаются ли "
"элементы по позиции, по позиции или ключевому слову или по ключевому слову."

#: ../../tutorial/controlflow.rst:724
msgid "A function definition may look like:"
msgstr "Определение функции может выглядеть так:"

#: ../../tutorial/controlflow.rst:735
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"где ``/`` и ``*`` являются необязательными. Если эти символы используются, "
"они указывают тип параметра и способ передачи аргументов в функцию: только "
"позиционно, позиционно или по ключевому слову и только по ключевому слову. "
"Параметры ключевого слова также называются именованными параметрами."

#: ../../tutorial/controlflow.rst:742
msgid "Positional-or-Keyword Arguments"
msgstr "Позиционные или ключевые аргументы"

#: ../../tutorial/controlflow.rst:744
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Если ``/`` и ``*`` отсутствуют в определении функции, аргументы могут быть "
"переданы функции по позиции или по ключевому слову."

#: ../../tutorial/controlflow.rst:749
msgid "Positional-Only Parameters"
msgstr "Только позиционные параметры"

#: ../../tutorial/controlflow.rst:751
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Если посмотреть на это немного подробнее, можно пометить определенные "
"параметры как *только позиционные*. Если *только позиционно*, порядок "
"параметров имеет значение, и параметры не могут передаваться по ключевому "
"слову. Параметры, предназначенные только для позиции, помещаются перед ``/`` "
"(косой чертой). ``/`` используется для логического отделения позиционных "
"параметров от остальных параметров. Если в определении функции нет ``/``, то "
"нет и позиционных параметров."

#: ../../tutorial/controlflow.rst:759
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Параметры, следующие за ``/``, могут быть *позиционными или ключевыми "
"словами* или *только ключевыми словами*."

#: ../../tutorial/controlflow.rst:763
msgid "Keyword-Only Arguments"
msgstr "Аргументы, содержащие только ключевые слова"

#: ../../tutorial/controlflow.rst:765
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Чтобы пометить параметры как *только ключевое слово*, указывая, что "
"параметры должны передаваться с помощью аргумента ключевого слова, поместите "
"``*`` в список аргументов непосредственно перед первым параметром *ключевое "
"слово*."

#: ../../tutorial/controlflow.rst:771
msgid "Function Examples"
msgstr "Примеры функций"

#: ../../tutorial/controlflow.rst:773
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Рассмотрим следующие примеры определений функций, обращая пристальное "
"внимание на маркеры ``/`` и ``*``:"

#: ../../tutorial/controlflow.rst:789
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"Первое определение функции, «standard_arg», наиболее знакомая форма, не "
"накладывает никаких ограничений на соглашение о вызовах, а аргументы могут "
"передаваться по позиции или ключевому слову::"

#: ../../tutorial/controlflow.rst:799
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"Вторая функция ``pos_only_arg`` ограничена использованием только позиционных "
"параметров, поскольку в определении функции есть ``/``:"

#: ../../tutorial/controlflow.rst:810
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"Третья функция ``kwd_only_args`` допускает только ключевые аргументы, "
"указанные символом ``*`` в определении функции::"

#: ../../tutorial/controlflow.rst:821
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"И последний использует все три соглашения о вызовах в одном определении "
"функции:"

#: ../../tutorial/controlflow.rst:841
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Наконец, рассмотрим это определение функции, которое потенциально может "
"конфликтовать между позиционным аргументом ``name`` и ``**kwds``, имеющим "
"``name`` в качестве ключа:"

#: ../../tutorial/controlflow.rst:846
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Невозможно выполнить вызов, который заставил бы его вернуть ``True``, "
"поскольку ключевое слово ``'name'`` всегда будет привязано к первому "
"параметру. Например::"

#: ../../tutorial/controlflow.rst:855
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Но используя ``/`` (только позиционные аргументы), это возможно, поскольку "
"оно позволяет использовать ``name`` в качестве позиционного аргумента и "
"``'name'`` в качестве ключа в аргументах ключевого слова::"

#: ../../tutorial/controlflow.rst:863
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Другими словами, имена позиционных параметров могут использоваться в "
"``**kwds`` без двусмысленности."

#: ../../tutorial/controlflow.rst:868
msgid "Recap"
msgstr "Резюме"

#: ../../tutorial/controlflow.rst:870
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"Вариант использования будет определять, какие параметры использовать в "
"определении функции:"

#: ../../tutorial/controlflow.rst:874
msgid "As guidance:"
msgstr "В качестве руководства:"

#: ../../tutorial/controlflow.rst:876
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Используйте позиционный-only, если вы хотите, чтобы имена параметров были "
"недоступны пользователю. Это полезно, когда имена параметров не имеют "
"реального значения, если вы хотите обеспечить соблюдение порядка аргументов "
"при вызове функции или если вам нужно взять некоторые позиционные параметры "
"и произвольные ключевые слова."

#: ../../tutorial/controlflow.rst:881
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Используйте только ключевые слова, когда имена имеют значение, а определение "
"функции более понятно, если имена указаны явно, или вы хотите, чтобы "
"пользователи не полагались на позицию передаваемого аргумента."

#: ../../tutorial/controlflow.rst:884
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Для API используйте только позиционирование, чтобы предотвратить нарушение "
"изменений API, если имя параметра будет изменено в будущем."

#: ../../tutorial/controlflow.rst:890
msgid "Arbitrary Argument Lists"
msgstr "Произвольные списки аргументов"

#: ../../tutorial/controlflow.rst:895
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Наконец, наименее часто используемый вариант — указать, что функцию можно "
"вызывать с произвольным количеством аргументов. Эти аргументы будут "
"заключены в кортеж (см. :ref:`tut-tuples`). Перед переменным числом "
"аргументов может встречаться ноль или более нормальных аргументов. ::"

#: ../../tutorial/controlflow.rst:904
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Обычно эти *вариативные* аргументы будут последними в списке формальных "
"параметров, поскольку они собирают все оставшиеся входные аргументы, "
"передаваемые функции. Любые формальные параметры, которые встречаются после "
"параметра ``*args``, являются аргументами «только для ключевых слов», то "
"есть их можно использовать только как ключевые слова, а не как позиционные "
"аргументы. ::"

#: ../../tutorial/controlflow.rst:921
msgid "Unpacking Argument Lists"
msgstr "Распаковка списков аргументов"

#: ../../tutorial/controlflow.rst:923
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"Обратная ситуация возникает, когда аргументы уже находятся в списке или "
"кортеже, но их необходимо распаковать для вызова функции, требующей "
"отдельных позиционных аргументов. Например, встроенная функция :func:`range` "
"ожидает отдельные аргументы *start* и *stop*. Если они недоступны отдельно, "
"напишите вызов функции с оператором ``*``\\, чтобы распаковать аргументы из "
"списка или кортежа::"

#: ../../tutorial/controlflow.rst:939
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Таким же образом словари могут доставлять аргументы ключевых слов с помощью "
"оператора ``**``\\::"

#: ../../tutorial/controlflow.rst:955
msgid "Lambda Expressions"
msgstr "Лямбда-выражения"

#: ../../tutorial/controlflow.rst:957
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Небольшие анонимные функции можно создавать с помощью ключевого слова :"
"keyword:`lambda`. Эта функция возвращает сумму двух своих аргументов: "
"``лямбда a, b: a+b``. Лямбда-функции можно использовать везде, где требуются "
"функциональные объекты. Они синтаксически ограничены одним выражением. "
"Семантически они являются просто синтаксическим сахаром для обычного "
"определения функции. Как и определения вложенных функций, лямбда-функции "
"могут ссылаться на переменные из содержащей их области::"

#: ../../tutorial/controlflow.rst:974
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"В приведенном выше примере используется лямбда-выражение для возврата "
"функции. Другое использование — передать небольшую функцию в качестве "
"аргумента:"

#: ../../tutorial/controlflow.rst:986
msgid "Documentation Strings"
msgstr "Строки документации"

#: ../../tutorial/controlflow.rst:993
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Вот некоторые соглашения о содержании и форматировании строк документации."

#: ../../tutorial/controlflow.rst:996
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Первая строка всегда должна представлять собой краткое и лаконичное "
"изложение назначения объекта. Для краткости не следует явно указывать имя "
"или тип объекта, поскольку они доступны другими способами (за исключением "
"случаев, когда имя является глаголом, описывающим работу функции). Эта "
"строка должна начинаться с заглавной буквы и заканчиваться точкой."

#: ../../tutorial/controlflow.rst:1002
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Если в строке документации больше строк, вторая строка должна быть пустой, "
"визуально отделяя краткое изложение от остального описания. Следующие строки "
"должны представлять собой один или несколько абзацев, описывающих соглашения "
"о вызовах объекта, его побочные эффекты и т. д."

#: ../../tutorial/controlflow.rst:1007
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Анализатор Python не удаляет отступы из многострочных строковых литералов в "
"Python, поэтому инструменты, обрабатывающие документацию, при необходимости "
"должны удалять отступы. Это делается с использованием следующего соглашения. "
"Первая непустая строка *после* первой строки строки определяет величину "
"отступа для всей строки документации. (Мы не можем использовать первую "
"строку, поскольку она обычно примыкает к открывающим кавычкам строки, "
"поэтому ее отступ не виден в строковом литерале.) Пробелы, «эквивалентные» "
"этому отступу, затем удаляются из начала всех строк строки. . Строки с "
"меньшим отступом не должны встречаться, но если они встречаются, все ведущие "
"пробелы должны быть удалены. Эквивалентность пробелов следует проверять "
"после расширения табуляции (обычно до 8 пробелов)."

#: ../../tutorial/controlflow.rst:1019
msgid "Here is an example of a multi-line docstring::"
msgstr "Вот пример многострочной строки документации:"

#: ../../tutorial/controlflow.rst:1037
msgid "Function Annotations"
msgstr "Аннотации функций"

#: ../../tutorial/controlflow.rst:1045
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Аннотации функций <function>` — это совершенно необязательная "
"информация метаданных о типах, используемых пользовательскими функциями "
"(дополнительную информацию см. в :pep:`3107` и :pep:`484`)."

#: ../../tutorial/controlflow.rst:1049
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:`!"
"__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""
":term:`Аннотации <аннотация функции>` хранятся в атрибуте :attr:`!"
"__annotations__` функции как словарь и не влияют на любую другую часть "
"функции. Аннотации параметров определяются двоеточием после имени параметра, "
"за которым следует выражение, вычисляющее значение аннотации. Аннотации "
"возврата определяются литералом ``->``, за которым следует выражение, между "
"списком параметров и двоеточием, обозначающим конец оператора :keyword:"
"`def`. В следующем примере есть обязательный аргумент, необязательный "
"аргумент и аннотированное возвращаемое значение:"

#: ../../tutorial/controlflow.rst:1071
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Coding Style"

#: ../../tutorial/controlflow.rst:1076
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Теперь, когда вы собираетесь писать более длинные и сложные фрагменты "
"Python, самое время поговорить о *стиле кодирования*. Большинство языков "
"могут быть написаны (или, более кратко, *отформатированы*) в разных стилях; "
"некоторые более читабельны, чем другие. Всегда полезно облегчить другим "
"чтение вашего кода, и принятие хорошего стиля кодирования очень помогает в "
"этом."

#: ../../tutorial/controlflow.rst:1082
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Для Python :pep:`8` стал руководством по стилю, которого придерживается "
"большинство проектов; он способствует очень читабельному и приятному для "
"глаз стилю кодирования. Каждый разработчик Python должен когда-нибудь "
"прочитать его; вот наиболее важные моменты, извлеченные для вас:"

#: ../../tutorial/controlflow.rst:1087
msgid "Use 4-space indentation, and no tabs."
msgstr "Используйте отступы в 4 пробела и не используйте табуляцию."

#: ../../tutorial/controlflow.rst:1089
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 пробела — хороший компромисс между небольшим отступом (позволяет увеличить "
"глубину вложенности) и большим отступом (облегчает чтение). Вкладки вносят "
"путаницу, поэтому их лучше не использовать."

#: ../../tutorial/controlflow.rst:1093
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Переносите строки так, чтобы они не превышали 79 символов."

#: ../../tutorial/controlflow.rst:1095
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Это помогает пользователям с небольшими дисплеями и позволяет размещать "
"несколько файлов кода рядом на больших дисплеях."

#: ../../tutorial/controlflow.rst:1098
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Используйте пустые строки для разделения функций и классов, а также более "
"крупных блоков кода внутри функций."

#: ../../tutorial/controlflow.rst:1101
msgid "When possible, put comments on a line of their own."
msgstr "По возможности помещайте комментарии в отдельную строку."

#: ../../tutorial/controlflow.rst:1103
msgid "Use docstrings."
msgstr "Use docstrings."

#: ../../tutorial/controlflow.rst:1105
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Используйте пробелы вокруг операторов и после запятых, но не непосредственно "
"внутри конструкций скобок: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:1108
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Называйте свои классы и функции последовательно; соглашение заключается в "
"использовании ``UpperCamelCase`` для классов и "
"``lowercase_with_underscores`` для функций и методов. Всегда используйте "
"self в качестве имени первого аргумента метода (подробнее о классах и "
"методах см. :ref:`tut-firstclasses`)."

#: ../../tutorial/controlflow.rst:1113
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Не используйте сложные кодировки, если ваш код предназначен для "
"использования в международных средах. В любом случае лучше всего работают "
"значения по умолчанию Python, UTF-8 или даже простой ASCII."

#: ../../tutorial/controlflow.rst:1117
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Аналогично, не используйте в идентификаторах символы, отличные от ASCII, "
"если есть лишь малейшая вероятность того, что люди, говорящие на другом "
"языке, будут читать или поддерживать код."

#: ../../tutorial/controlflow.rst:1123
msgid "Footnotes"
msgstr "Сноски"

#: ../../tutorial/controlflow.rst:1124
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"На самом деле, *вызов по ссылке на объект* было бы лучшим описанием, "
"поскольку, если передается изменяемый объект, вызывающий объект увидит любые "
"изменения, которые вызываемый объект вносит в него (элементы, вставленные в "
"список)."

#: ../../tutorial/controlflow.rst:48
msgid "statement"
msgstr "инструкция"

#: ../../tutorial/controlflow.rst:48
msgid "for"
msgstr "for"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "documentation strings"
msgstr "строки документации"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "docstrings"
msgstr "docstrings"

#: ../../tutorial/controlflow.rst:451 ../../tutorial/controlflow.rst:988
msgid "strings, documentation"
msgstr "strings, documentation"

#: ../../tutorial/controlflow.rst:892
msgid "* (asterisk)"
msgstr "* (звёздочка)"

#: ../../tutorial/controlflow.rst:892 ../../tutorial/controlflow.rst:936
msgid "in function calls"
msgstr "в вызовах функций"

#: ../../tutorial/controlflow.rst:936
msgid "**"
msgstr "**"

#: ../../tutorial/controlflow.rst:1040
msgid "function"
msgstr "функция"

#: ../../tutorial/controlflow.rst:1040
msgid "annotations"
msgstr "аннотации"

#: ../../tutorial/controlflow.rst:1040
msgid "->"
msgstr "->"

#: ../../tutorial/controlflow.rst:1040
msgid "function annotations"
msgstr "function annotations"

#: ../../tutorial/controlflow.rst:1040
msgid ": (colon)"
msgstr ": (двоеточие)"

#: ../../tutorial/controlflow.rst:1074
msgid "coding"
msgstr "кодирование"

#: ../../tutorial/controlflow.rst:1074
msgid "style"
msgstr "стиль"
