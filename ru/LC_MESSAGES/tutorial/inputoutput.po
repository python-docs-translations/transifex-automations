# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr "Ввод и вывод"

#: ../../tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""
"Есть несколько способов представить вывод программы. Данные могут быть "
"напечатаны в человекочитаемом виде или записаны в файл для дальнейшего "
"использования. В этой главе мы рассмотрим разные возможности ввода и вывода."

#: ../../tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr "Продвинутое форматирование выводв"

#: ../../tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :func:`print` function.  (A third way is using the :meth:`~io."
"TextIOBase.write` method of file objects; the standard output file can be "
"referenced as ``sys.stdout``. See the Library Reference for more information "
"on this.)"
msgstr ""
"Пока мы столкнулись с двумя способами записи значений: *выражениями* и "
"функцией :func:`print`. (Третий способ - использование метода :meth:`~io."
"TextIOBase.write` объектов файлов; на стандартный выходной файл можно "
"ссылаться как на ``sys.stdout``. См. Справочник по библиотеке для получения "
"дополнительной информации об этом.)"

#: ../../tutorial/inputoutput.rst:22
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values. There are several ways to format "
"output."
msgstr ""
"Часто вам захочется иметь больше контроля над выводом, а не просто выводить "
"значения, разделённые пробелами. Есть несколько способов форматировать вывод."

#: ../../tutorial/inputoutput.rst:25
msgid ""
"To use :ref:`formatted string literals <tut-f-strings>`, begin a string with "
"``f`` or ``F`` before the opening quotation mark or triple quotation mark. "
"Inside this string, you can write a Python expression between ``{`` and ``}"
"`` characters that can refer to variables or literal values."
msgstr ""
"Чтобы использовать :ref`форматные литералы <tut-f-strings>` (\"f-строки\"), "
"поставьте ``f`` или ``F`` перед открывающей одинарной или тройной кавычкой у "
"строкового литерала. Внутри форматного литерала между символами ``{`` и ``}"
"`` можно вставить выражение на Python. Оно может содержать переменные и "
"другие литералы."

#: ../../tutorial/inputoutput.rst:32
msgid ""
">>> year = 2016\n"
">>> event = 'Referendum'\n"
">>> f'Results of the {year} {event}'\n"
"'Results of the 2016 Referendum'"
msgstr ""
">>> year = 2016\n"
">>> event = 'Referendum'\n"
">>> f'Results of the {year} {event}'\n"
"'Results of the 2016 Referendum'"

#: ../../tutorial/inputoutput.rst:37
msgid ""
"The :meth:`str.format` method of strings requires more manual effort.  "
"You'll still use ``{`` and ``}`` to mark where a variable will be "
"substituted and can provide detailed formatting directives, but you'll also "
"need to provide the information to be formatted. In the following code block "
"there are two examples of how to format variables:"
msgstr ""
"Метод строк :meth:`str.format` требует больше ручных усилий. Вы по-прежнему "
"будете использовать ``{`` и ``}``, чтобы отметить, где будет подставлена ​​"
"переменная, и сможете предоставить подробные директивы форматирования, но "
"вам также необходимо будет предоставить информацию для форматирования. В "
"следующем блоке кода приведены два примера форматирования переменных:"

#: ../../tutorial/inputoutput.rst:46
msgid ""
">>> yes_votes = 42_572_654\n"
">>> total_votes = 85_705_149\n"
">>> percentage = yes_votes / total_votes\n"
">>> '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)\n"
"' 42572654 YES votes  49.67%'"
msgstr ""
">>> yes_votes = 42_572_654\n"
">>> total_votes = 85_705_149\n"
">>> percentage = yes_votes / total_votes\n"
">>> '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)\n"
"' 42572654 YES votes  49.67%'"

#: ../../tutorial/inputoutput.rst:52
msgid ""
"Notice how the ``yes_votes`` are padded with spaces and a negative sign only "
"for negative numbers. The example also prints ``percentage`` multiplied by "
"100, with 2 decimal places and followed by a percent sign (see :ref:"
"`formatspec` for details)."
msgstr ""
"Обратите внимание, что ``yes_votes`` дополняется пробелами и отрицательным "
"знаком только для отрицательных чисел. В примере также выводится "
"``процент``, умноженный на 100, с двумя десятичными знаками, за которым "
"следует знак процента (подробности см. в :ref:`formatspec`)."

#: ../../tutorial/inputoutput.rst:57
msgid ""
"Finally, you can do all the string handling yourself by using string slicing "
"and concatenation operations to create any layout you can imagine.  The "
"string type has some methods that perform useful operations for padding "
"strings to a given column width."
msgstr ""
"Наконец, чтобы добиться любого желаемого результата, можно манипулировать "
"строками самому с помощью срезов строки и операции конкатенации. Строковой "
"тип данных поддерживает некоторые методы для некоторых полезных операций, "
"например, для выравнивания строки до определённой длины."

#: ../../tutorial/inputoutput.rst:62
msgid ""
"When you don't need fancy output but just want a quick display of some "
"variables for debugging purposes, you can convert any value to a string with "
"the :func:`repr` or :func:`str` functions."
msgstr ""
"Если вам не нужен шикарный вывод, а вы просто хотите вывести значения каких-"
"то переменных для отладки, вы можете привести любое значение к строковому "
"типу с помощью функций :func:`repr` или :func`str`."

#: ../../tutorial/inputoutput.rst:66
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is no equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings, in particular, have two distinct representations."
msgstr ""
"Функция :func:`str` представляет значения, предназначенные для чтения "
"человеком, тогда как :func:`repr` предназначена для создания представлений, "
"которые понимает интерпретатор (или которые вызовут синтаксическую ошибку, "
"если эквивалентного синтаксиса нет). Для объектов, которые нельзя "
"представить в человекочитаемом виде, :func:`str` вернёт то же значение, что :"
"func:`repr`. Многие значения, например, числа, списки, словари, "
"представляются одинаково этими функциями. Строки, однако, имеют разное "
"представление при использовании :func:`str` и :func:`repr`."

#: ../../tutorial/inputoutput.rst:75
msgid "Some examples::"
msgstr "Несколько примеров::"

#: ../../tutorial/inputoutput.rst:77
msgid ""
">>> s = 'Hello, world.'\n"
">>> str(s)\n"
"'Hello, world.'\n"
">>> repr(s)\n"
"\"'Hello, world.'\"\n"
">>> str(1/7)\n"
"'0.14285714285714285'\n"
">>> x = 10 * 3.25\n"
">>> y = 200 * 200\n"
">>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\n"
">>> print(s)\n"
"The value of x is 32.5, and y is 40000...\n"
">>> # The repr() of a string adds string quotes and backslashes:\n"
">>> hello = 'hello, world\\n'\n"
">>> hellos = repr(hello)\n"
">>> print(hellos)\n"
"'hello, world\\n'\n"
">>> # The argument to repr() may be any Python object:\n"
">>> repr((x, y, ('spam', 'eggs')))\n"
"\"(32.5, 40000, ('spam', 'eggs'))\""
msgstr ""
">>> s = 'Hello, world.'\n"
">>> str(s)\n"
"'Hello, world.'\n"
">>> repr(s)\n"
"\"'Hello, world.'\"\n"
">>> str(1/7)\n"
"'0.14285714285714285'\n"
">>> x = 10 * 3.25\n"
">>> y = 200 * 200\n"
">>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\n"
">>> print(s)\n"
"The value of x is 32.5, and y is 40000...\n"
">>> # The repr() of a string adds string quotes and backslashes:\n"
">>> hello = 'hello, world\\n'\n"
">>> hellos = repr(hello)\n"
">>> print(hellos)\n"
"'hello, world\\n'\n"
">>> # The argument to repr() may be any Python object:\n"
">>> repr((x, y, ('spam', 'eggs')))\n"
"\"(32.5, 40000, ('spam', 'eggs'))\""

#: ../../tutorial/inputoutput.rst:98
msgid ""
"The :mod:`string` module contains a :class:`~string.Template` class that "
"offers yet another way to substitute values into strings, using placeholders "
"like ``$x`` and replacing them with values from a dictionary, but offers "
"much less control of the formatting."
msgstr ""
"Модуль :mod:`string` содержит класс :class:`string.Template`, который "
"предоставляет ещё один способ подстановки значений в строки, используя "
"заполнители, например, ``$x``, и и заменяя их с помощью значений из словаря, "
"но даёт меньше контроля над форматированием."

#: ../../tutorial/inputoutput.rst:114
msgid "Formatted String Literals"
msgstr "Форматные литералы"

#: ../../tutorial/inputoutput.rst:116
msgid ""
":ref:`Formatted string literals <f-strings>` (also called f-strings for "
"short) let you include the value of Python expressions inside a string by "
"prefixing the string with ``f`` or ``F`` and writing expressions as "
"``{expression}``."
msgstr ""
":ref:`Форматные литералы <f-strings>` (также называемые \"f-строками\") "
"позволяют вставить значение любого выражения на Python в строку, приписав "
"``f`` или ``F`` в начало строкового литерала и записывая каждое выражение "
"как ``{выражение}``."

#: ../../tutorial/inputoutput.rst:121
msgid ""
"An optional format specifier can follow the expression. This allows greater "
"control over how the value is formatted. The following example rounds pi to "
"three places after the decimal::"
msgstr ""
"За выражением может следовать необязательный спецификатор формата. Он "
"позволяет точнее контролировать, как именно значение будет отформатировано. "
"Например, так можно округлить число пи до трёх цифр после точки::"

#: ../../tutorial/inputoutput.rst:125
msgid ""
">>> import math\n"
">>> print(f'The value of pi is approximately {math.pi:.3f}.')\n"
"The value of pi is approximately 3.142."
msgstr ""
">>> import math\n"
">>> print(f'The value of pi is approximately {math.pi:.3f}.')\n"
"The value of pi is approximately 3.142."

#: ../../tutorial/inputoutput.rst:129
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making columns line up. ::"
msgstr ""
"Если передать целое число после ``':'``, можно указать минимальную длину "
"этого поля. Это полезно для выравнивания столбцов. ::"

#: ../../tutorial/inputoutput.rst:132
msgid ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\n"
">>> for name, phone in table.items():\n"
"...     print(f'{name:10} ==> {phone:10d}')\n"
"...\n"
"Sjoerd     ==>       4127\n"
"Jack       ==>       4098\n"
"Dcab       ==>       7678"
msgstr ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\n"
">>> for name, phone in table.items():\n"
"...     print(f'{name:10} ==> {phone:10d}')\n"
"...\n"
"Sjoerd     ==>       4127\n"
"Jack       ==>       4098\n"
"Dcab       ==>       7678"

#: ../../tutorial/inputoutput.rst:140
msgid ""
"Other modifiers can be used to convert the value before it is formatted. ``'!"
"a'`` applies :func:`ascii`, ``'!s'`` applies :func:`str`, and ``'!r'`` "
"applies :func:`repr`::"
msgstr ""
"Другие модификаторы преобразуют значение перед форматированием. ``'!a'`` "
"применяет :func:`ascii`, ``'!s'`` применяет :func:`str`, а ``'!r'`` "
"применяет :func:`repr` к значению::"

#: ../../tutorial/inputoutput.rst:144
msgid ""
">>> animals = 'eels'\n"
">>> print(f'My hovercraft is full of {animals}.')\n"
"My hovercraft is full of eels.\n"
">>> print(f'My hovercraft is full of {animals!r}.')\n"
"My hovercraft is full of 'eels'."
msgstr ""
">>> animals = 'eels'\n"
">>> print(f'My hovercraft is full of {animals}.')\n"
"My hovercraft is full of eels.\n"
">>> print(f'My hovercraft is full of {animals!r}.')\n"
"My hovercraft is full of 'eels'."

#: ../../tutorial/inputoutput.rst:150
msgid ""
"The ``=`` specifier can be used to expand an expression to the text of the "
"expression, an equal sign, then the representation of the evaluated "
"expression:"
msgstr ""
"Спецификатор ``=`` может быть использован для расширения выражения в текст "
"выражения, знак равенства, а затем представление вычисленного выражения."

#: ../../tutorial/inputoutput.rst:159
msgid ""
"See :ref:`self-documenting expressions <bpo-36817-whatsnew>` for more "
"information on the ``=`` specifier. For a reference on these format "
"specifications, see the reference guide for the :ref:`formatspec`."
msgstr ""
"См. :ref:`self-documenting expressions <bpo-36817-whatsnew>` для получения "
"дополнительной информации о спецификаторе ``=``. Для ссылки на эти "
"спецификации формата см. руководство по :ref:`formatspec`."

#: ../../tutorial/inputoutput.rst:166
msgid "The String format() Method"
msgstr "Строковой метод format()"

#: ../../tutorial/inputoutput.rst:168
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr "Базовое использование :meth:`str.format` выглядит так::"

#: ../../tutorial/inputoutput.rst:170
msgid ""
">>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\n"
"We are the knights who say \"Ni!\""
msgstr ""
">>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\n"
"We are the knights who say \"Ni!\""

#: ../../tutorial/inputoutput.rst:173
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`str.format` method.  A number in the "
"brackets can be used to refer to the position of the object passed into the :"
"meth:`str.format` method. ::"
msgstr ""
"Фигурные скобки и символы между ними заменяются объектами, которые были "
"переданы в метод :meth:`str.format`. Можно поместить внутри скобок число -- "
"оно будет указывать на позицию объекта, переданного в :meth:`str.format`. ::"

#: ../../tutorial/inputoutput.rst:178
msgid ""
">>> print('{0} and {1}'.format('spam', 'eggs'))\n"
"spam and eggs\n"
">>> print('{1} and {0}'.format('spam', 'eggs'))\n"
"eggs and spam"
msgstr ""
">>> print('{0} and {1}'.format('spam', 'eggs'))\n"
"spam and eggs\n"
">>> print('{1} and {0}'.format('spam', 'eggs'))\n"
"eggs and spam"

#: ../../tutorial/inputoutput.rst:183
msgid ""
"If keyword arguments are used in the :meth:`str.format` method, their values "
"are referred to by using the name of the argument. ::"
msgstr ""
"Если в :meth:`str.format` используются именованные аргументы, к их значениям "
"можно обратиться, используя вместо числа имя аргумента. ::"

#: ../../tutorial/inputoutput.rst:186
msgid ""
">>> print('This {food} is {adjective}.'.format(\n"
"...       food='spam', adjective='absolutely horrible'))\n"
"This spam is absolutely horrible."
msgstr ""
">>> print('This {food} is {adjective}.'.format(\n"
"...       food='spam', adjective='absolutely horrible'))\n"
"This spam is absolutely horrible."

#: ../../tutorial/inputoutput.rst:190
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr ""
"Позиционные и именованные аргументы могут быть использованы вместе "
"произвольным образом::"

#: ../../tutorial/inputoutput.rst:192
msgid ""
">>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n"
"...                                                    other='Georg'))\n"
"The story of Bill, Manfred, and Georg."
msgstr ""
">>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n"
"...                                                    other='Georg'))\n"
"The story of Bill, Manfred, and Georg."

#: ../../tutorial/inputoutput.rst:196
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys. ::"
msgstr ""
"Если у вас есть очень длинная форматная строка, которую вы не хотите "
"разделять, удобно ссылаться на переменные, используемые в форматировании, по "
"имени, а не по позиции. Это можно сделать, если передать в качестве "
"аргумента словарь и использовать квадратные скобки ``'[]'`` для доступа к "
"ключам. ::"

#: ../../tutorial/inputoutput.rst:201
msgid ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n"
">>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n"
"...       'Dcab: {0[Dcab]:d}'.format(table))\n"
"Jack: 4098; Sjoerd: 4127; Dcab: 8637678"
msgstr ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n"
">>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n"
"...       'Dcab: {0[Dcab]:d}'.format(table))\n"
"Jack: 4098; Sjoerd: 4127; Dcab: 8637678"

#: ../../tutorial/inputoutput.rst:206
msgid ""
"This could also be done by passing the ``table`` dictionary as keyword "
"arguments with the ``**`` notation. ::"
msgstr ""
"Это также можно сделать, передавая словарь ``table`` в качестве именованных "
"аргументов с помощью обозначения ``**``. ::"

#: ../../tutorial/inputoutput.rst:209
msgid ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n"
">>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'."
"format(**table))\n"
"Jack: 4098; Sjoerd: 4127; Dcab: 8637678"
msgstr ""
">>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n"
">>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'."
"format(**table))\n"
"Jack: 4098; Sjoerd: 4127; Dcab: 8637678"

#: ../../tutorial/inputoutput.rst:213
msgid ""
"This is particularly useful in combination with the built-in function :func:"
"`vars`, which returns a dictionary containing all local variables::"
msgstr ""
"Это особенно полезно в сочетании со встроенной функцией :func:`vars`, "
"которая возвращает словарь, содержащий все локальные переменные::"

#: ../../tutorial/inputoutput.rst:216
msgid ""
">>> table = {k: str(v) for k, v in vars().items()}\n"
">>> message = \" \".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])\n"
">>> print(message.format(**table))\n"
"__name__: __main__; __doc__: None; __package__: None; __loader__: ..."
msgstr ""
">>> table = {k: str(v) for k, v in vars().items()}\n"
">>> message = \" \".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])\n"
">>> print(message.format(**table))\n"
"__name__: __main__; __doc__: None; __package__: None; __loader__: ..."

#: ../../tutorial/inputoutput.rst:221
msgid ""
"As an example, the following lines produce a tidily aligned set of columns "
"giving integers and their squares and cubes::"
msgstr ""
"Как пример, следующие строки создают аккуратно выровненный набор столбцов, "
"содержащих целые числа и их квадраты и кубы::"

#: ../../tutorial/inputoutput.rst:224
msgid ""
">>> for x in range(1, 11):\n"
"...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))\n"
"...\n"
" 1   1    1\n"
" 2   4    8\n"
" 3   9   27\n"
" 4  16   64\n"
" 5  25  125\n"
" 6  36  216\n"
" 7  49  343\n"
" 8  64  512\n"
" 9  81  729\n"
"10 100 1000"
msgstr ""
">>> for x in range(1, 11):\n"
"...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))\n"
"...\n"
" 1   1    1\n"
" 2   4    8\n"
" 3   9   27\n"
" 4  16   64\n"
" 5  25  125\n"
" 6  36  216\n"
" 7  49  343\n"
" 8  64  512\n"
" 9  81  729\n"
"10 100 1000"

#: ../../tutorial/inputoutput.rst:238
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""
"Для полного обзова форматиорвания строк с помощью :meth:`str.format`, см. :"
"ref:`formatstrings`."

#: ../../tutorial/inputoutput.rst:243
msgid "Manual String Formatting"
msgstr "Ручное форматирование строк"

#: ../../tutorial/inputoutput.rst:245
msgid "Here's the same table of squares and cubes, formatted manually::"
msgstr ""
"Ту же таблицу из квадратов и кубов можно было отформатировать вручную::"

#: ../../tutorial/inputoutput.rst:247
msgid ""
">>> for x in range(1, 11):\n"
"...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')\n"
"...     # Note use of 'end' on previous line\n"
"...     print(repr(x*x*x).rjust(4))\n"
"...\n"
" 1   1    1\n"
" 2   4    8\n"
" 3   9   27\n"
" 4  16   64\n"
" 5  25  125\n"
" 6  36  216\n"
" 7  49  343\n"
" 8  64  512\n"
" 9  81  729\n"
"10 100 1000"
msgstr ""
">>> for x in range(1, 11):\n"
"...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')\n"
"...     # Note use of 'end' on previous line\n"
"...     print(repr(x*x*x).rjust(4))\n"
"...\n"
" 1   1    1\n"
" 2   4    8\n"
" 3   9   27\n"
" 4  16   64\n"
" 5  25  125\n"
" 6  36  216\n"
" 7  49  343\n"
" 8  64  512\n"
" 9  81  729\n"
"10 100 1000"

#: ../../tutorial/inputoutput.rst:263
msgid ""
"(Note that the one space between each column was added by the way :func:"
"`print` works: it always adds spaces between its arguments.)"
msgstr ""
"(Заметьте, что пробелы между столбцами были добавлены функцией :func:`print` "
"как разделители между аргументами.)"

#: ../../tutorial/inputoutput.rst:266
msgid ""
"The :meth:`str.rjust` method of string objects right-justifies a string in a "
"field of a given width by padding it with spaces on the left. There are "
"similar methods :meth:`str.ljust` and :meth:`str.center`. These methods do "
"not write anything, they just return a new string. If the input string is "
"too long, they don't truncate it, but return it unchanged; this will mess up "
"your column lay-out but that's usually better than the alternative, which "
"would be lying about a value. (If you really want truncation you can always "
"add a slice operation, as in ``x.ljust(n)[:n]``.)"
msgstr ""
"Метод строк :meth:`str.rjust` выравнивает строку по правому краю до "
"определённой длины, добавляя пробелы в наало. Существуют родственные методы :"
"meth:`str.ljust` и :meth:`str.center`. Эти методы не меняют строку, а "
"возвращают новую. Если данная строка слишком длинная, они не обрежут её, а "
"вернут неизменной. Это испортит вывод, но это лучше, чем другой вариант --- "
"показывать неверное значение (например, обрезать число). (Если вам хочется "
"обрезать строку, всегда можно использовать срез: ``x.ljust(n)[:n]``.)"

#: ../../tutorial/inputoutput.rst:275
msgid ""
"There is another method, :meth:`str.zfill`, which pads a numeric string on "
"the left with zeros.  It understands about plus and minus signs::"
msgstr ""
"Есть ещё один метод, :meth:`str.zfill`, который выравнивает численную строку "
"нулями. Он учитывает знак (``+`` или ``-``)::"

#: ../../tutorial/inputoutput.rst:278
msgid ""
">>> '12'.zfill(5)\n"
"'00012'\n"
">>> '-3.14'.zfill(7)\n"
"'-003.14'\n"
">>> '3.14159265359'.zfill(5)\n"
"'3.14159265359'"
msgstr ""
">>> '12'.zfill(5)\n"
"'00012'\n"
">>> '-3.14'.zfill(7)\n"
"'-003.14'\n"
">>> '3.14159265359'.zfill(5)\n"
"'3.14159265359'"

#: ../../tutorial/inputoutput.rst:287
msgid "Old string formatting"
msgstr "Старый способ форматирования строк"

#: ../../tutorial/inputoutput.rst:289
msgid ""
"The % operator (modulo) can also be used for string formatting. Given "
"``format % values`` (where *format* is a string), ``%`` conversion "
"specifications in *format* are replaced with zero or more elements of "
"*values*. This operation is commonly known as string interpolation. For "
"example::"
msgstr ""
"Оператор % (по модулю) также можно использовать для форматирования строк. "
"Учитывая ``формат % значений`` (где *format* — это строка), спецификации "
"преобразования ``%`` в *format* заменяются нулем или более элементами "
"*values*. Эта операция широко известна как строковая интерполяция. Например::"

#: ../../tutorial/inputoutput.rst:296
msgid ""
">>> import math\n"
">>> print('The value of pi is approximately %5.3f.' % math.pi)\n"
"The value of pi is approximately 3.142."
msgstr ""
">>> import math\n"
">>> print('The value of pi is approximately %5.3f.' % math.pi)\n"
"The value of pi is approximately 3.142."

#: ../../tutorial/inputoutput.rst:300
msgid ""
"More information can be found in the :ref:`old-string-formatting` section."
msgstr "Больше информации можно найти в разделе :ref:`old-string-formatting`."

#: ../../tutorial/inputoutput.rst:306
msgid "Reading and Writing Files"
msgstr "Чтение и запись файлов"

#: ../../tutorial/inputoutput.rst:312
msgid ""
":func:`open` returns a :term:`file object`, and is most commonly used with "
"two positional arguments and one keyword argument: ``open(filename, mode, "
"encoding=None)``"
msgstr ""
":func:`open` возвращает :term:`file object` и наиболее часто используется с "
"двумя позиционными аргументами и одним именованным аргументом: "
"``open(filename, mode, encoding=None)``"

#: ../../tutorial/inputoutput.rst:318
msgid ">>> f = open('workfile', 'w', encoding=\"utf-8\")"
msgstr ">>> f = open('workfile', 'w', encoding=\"utf-8\")"

#: ../../tutorial/inputoutput.rst:325
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""
"Первый аргумент --- строка, содержащая имя файла. Второй аргумент --- "
"строка, содержащая несколько символов, которые описывают, каким образом файл "
"будет использован. *mode* может быть ``'r'`` для чтения (от английского "
"*read*), ``'w'`` для записи (от английского *write*) (существующий файл с "
"этим именем будет очищен), и ``'a'`` для добавления информации в конец файла "
"(от английского *append*). ``r+`` открывает файл для чтения и записи "
"одновременно. Аргумент *mode* необязательный, если режим не указан, он "
"считается равным ``'r'``."

#: ../../tutorial/inputoutput.rst:334
msgid ""
"Normally, files are opened in :dfn:`text mode`, that means, you read and "
"write strings from and to the file, which are encoded in a specific "
"*encoding*. If *encoding* is not specified, the default is platform "
"dependent (see :func:`open`). Because UTF-8 is the modern de-facto standard, "
"``encoding=\"utf-8\"`` is recommended unless you know that you need to use a "
"different encoding. Appending a ``'b'`` to the mode opens the file in :dfn:"
"`binary mode`. Binary mode data is read and written as :class:`bytes` "
"objects. You can not specify *encoding* when opening file in binary mode."
msgstr ""
"Обычно файлы открываются в :dfn:`текстовом режиме`, что означает, что вы "
"читаете и записываете строки из файла, которые закодированы в определенной "
"кодировке. Если *encoding* не указана, то значение по умолчанию зависит от "
"платформы (см. :func:`open`). Поскольку UTF-8 является современным "
"стандартом де-факто, рекомендуется использовать ``encoding=\"utf-8\"``, если "
"вы не знаете, что вам нужно использовать другую кодировку. Добавление "
"``'b'`` к режиму открывает файл в :dfn:`бинарном режиме`. Данные в бинарном "
"режиме читаются и записываются в виде объектов :class:`bytes`. Вы не можете "
"указывать *encoding* при открытии файла в бинарном режиме."

#: ../../tutorial/inputoutput.rst:344
msgid ""
"In text mode, the default when reading is to convert platform-specific line "
"endings (``\\n`` on Unix, ``\\r\\n`` on Windows) to just ``\\n``.  When "
"writing in text mode, the default is to convert occurrences of ``\\n`` back "
"to platform-specific line endings.  This behind-the-scenes modification to "
"file data is fine for text files, but will corrupt binary data like that in :"
"file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files."
msgstr ""
"В текстовом режиме поведение по умолчанию --- преобразовывать специфичные "
"для платформы окончания строк (``\\n`` на Unix, ``\\r\\n`` на Windows) в "
"просто ``\\n``. При записи в текстовом режиме происходит обратное --- "
"``\\n`` превращаются в специфичные для платформы окончания строк. Такие "
"изменения подходят для текстовых файлов, но испортят двоичные данные, "
"например, :file:`JPEG` или :file:`EXE`. Будьте осторожны и используйте "
"только двоичный режим при чтении и записи таких файлов."

#: ../../tutorial/inputoutput.rst:352
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  The advantage is that the file is properly closed after its "
"suite finishes, even if an exception is raised at some point.  Using :"
"keyword:`!with` is also much shorter than writing equivalent :keyword:"
"`try`\\ -\\ :keyword:`finally` blocks::"
msgstr ""
"При работе с файлами использование конструкции :keyword:`with` --- хорошая "
"практика. Преимущество в том, что файл точно будет закрыт после того, как "
"его обработка завершена, даже если в какой-то момент было порождено "
"исключение. Также код, использующий :keyword:`!with`, получается короче, чем "
"эквивалентные блоки keyword:`try`\\ -\\ :keyword:`finally` ::"

#: ../../tutorial/inputoutput.rst:358
msgid ""
">>> with open('workfile', encoding=\"utf-8\") as f:\n"
"...     read_data = f.read()\n"
"\n"
">>> # We can check that the file has been automatically closed.\n"
">>> f.closed\n"
"True"
msgstr ""
">>> with open('workfile', encoding=\"utf-8\") as f:\n"
"...     read_data = f.read()\n"
"\n"
">>> # We can check that the file has been automatically closed.\n"
">>> f.closed\n"
"True"

#: ../../tutorial/inputoutput.rst:365
msgid ""
"If you're not using the :keyword:`with` keyword, then you should call ``f."
"close()`` to close the file and immediately free up any system resources "
"used by it."
msgstr ""
"Если вы не используете конструкцию :keyword:`with`, вам придётся вызвать ``f."
"close()``, чтобы закрыть файл и вернуть системные ресурсы, которые он "
"использовал."

#: ../../tutorial/inputoutput.rst:370
msgid ""
"Calling ``f.write()`` without using the :keyword:`!with` keyword or calling "
"``f.close()`` **might** result in the arguments of ``f.write()`` not being "
"completely written to the disk, even if the program exits successfully."
msgstr ""
"Если вы вызовите ``f.write()`` , но забудете закрыть файл (с помощью :"
"keyword:`!with` или вызова ``f.close()``), данные могут не до конца "
"записаться на диск, даже если программа завершится нормально."

#: ../../tutorial/inputoutput.rst:378
msgid ""
"After a file object is closed, either by a :keyword:`with` statement or by "
"calling ``f.close()``, attempts to use the file object will automatically "
"fail. ::"
msgstr ""
"После того, как файловый объект закрывается либо с помощью инструкции :"
"keyword:`with`, либо с помощью вызова ``f.close()``, попытки использовать "
"этот файловый объект автоматически провалятся. ::"

#: ../../tutorial/inputoutput.rst:382
msgid ""
">>> f.close()\n"
">>> f.read()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: I/O operation on closed file."
msgstr ""
">>> f.close()\n"
">>> f.read()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: I/O operation on closed file."

#: ../../tutorial/inputoutput.rst:392
msgid "Methods of File Objects"
msgstr "Методы файловых объектов"

#: ../../tutorial/inputoutput.rst:394
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""
"Примеры в данном разделе предполагают, что файловый объект ``f`` уже был "
"создан."

#: ../../tutorial/inputoutput.rst:397
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string (in text mode) or bytes object (in binary "
"mode). *size* is an optional numeric argument.  When *size* is omitted or "
"negative, the entire contents of the file will be read and returned; it's "
"your problem if the file is twice as large as your machine's memory. "
"Otherwise, at most *size* characters (in text mode) or *size* bytes (in "
"binary mode) are read and returned. If the end of the file has been reached, "
"``f.read()`` will return an empty string (``''``).  ::"
msgstr ""
"Чтобы прочитать содержимое файла, можно вызвать ``f.read(size)``, что "
"прочтёт некоторое количество данных и вернёт их в виде строки (в текстовом "
"режими) или объекта байтов (в двоичном режиме). *size* --- необязательный "
"числовой аргумент. Если *size* опущен или отрицательный, всё содержимое "
"файла будет прочитано и возвращено. К этому надо относиться осторожно, "
"особенно если файл большой и может не поместиться в оперативную память. В "
"противном случае не более *size* символов (в текстовом режиме) или *size* "
"байтов (в двоичном режиме) будет прочитано и возвращено. Если достигнут "
"конец файла, ``f.read()`` вернёт пустую строку (``''``). ::)"

#: ../../tutorial/inputoutput.rst:406
msgid ""
">>> f.read()\n"
"'This is the entire file.\\n'\n"
">>> f.read()\n"
"''"
msgstr ""
">>> f.read()\n"
"'This is the entire file.\\n'\n"
">>> f.read()\n"
"''"

#: ../../tutorial/inputoutput.rst:411
msgid ""
"``f.readline()`` reads a single line from the file; a newline character "
"(``\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.  ::"
msgstr ""
"``f.readline()`` считывает одну строку из файла; символ перевода строки "
"(``\\n``) остаётся в конце строки и отсутствует только у последней строки, "
"если она не кончается символом перевода строки. Это делает возвращаемое "
"значение однозначным: если метод ``f.readline()`` вернул пустую строку, "
"достигнут конец файла, а пустая строка представлена как ``'\\n'`` --- "
"строка, содержащая только символ перевода строки. ::"

#: ../../tutorial/inputoutput.rst:418
msgid ""
">>> f.readline()\n"
"'This is the first line of the file.\\n'\n"
">>> f.readline()\n"
"'Second line of the file\\n'\n"
">>> f.readline()\n"
"''"
msgstr ""
">>> f.readline()\n"
"'This is the first line of the file.\\n'\n"
">>> f.readline()\n"
"'Second line of the file\\n'\n"
">>> f.readline()\n"
"''"

#: ../../tutorial/inputoutput.rst:425
msgid ""
"For reading lines from a file, you can loop over the file object. This is "
"memory efficient, fast, and leads to simple code::"
msgstr ""
"Для чтения строк из файла можно пройтись циклом по файловому объекту. Это "
"эффективно с точки зрения памяти, быстро и делает код проще::"

#: ../../tutorial/inputoutput.rst:428
msgid ""
">>> for line in f:\n"
"...     print(line, end='')\n"
"...\n"
"This is the first line of the file.\n"
"Second line of the file"
msgstr ""
">>> for line in f:\n"
"...     print(line, end='')\n"
"...\n"
"This is the first line of the file.\n"
"Second line of the file"

#: ../../tutorial/inputoutput.rst:434
msgid ""
"If you want to read all the lines of a file in a list you can also use "
"``list(f)`` or ``f.readlines()``."
msgstr ""
"Если вам нужно прочитать все строки из файла в виде списка, можете "
"использовать ``list(f)`` или ``f.readlines()``."

#: ../../tutorial/inputoutput.rst:437
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"the number of characters written. ::"
msgstr ""
"``f.write(string)`` записывает содержимое ``string`` в файл и возвращает "
"количество записанных символов. ::"

#: ../../tutorial/inputoutput.rst:440
msgid ""
">>> f.write('This is a test\\n')\n"
"15"
msgstr ""
">>> f.write('This is a test\\n')\n"
"15"

#: ../../tutorial/inputoutput.rst:443
msgid ""
"Other types of objects need to be converted -- either to a string (in text "
"mode) or a bytes object (in binary mode) -- before writing them::"
msgstr ""
"Другие объекты нуждаются в преобразовании -- либо в строку (в текстовом "
"режиме), либо в объект байтов (в двоичном режиме) -- перед записью::"

#: ../../tutorial/inputoutput.rst:446
msgid ""
">>> value = ('the answer', 42)\n"
">>> s = str(value)  # convert the tuple to string\n"
">>> f.write(s)\n"
"18"
msgstr ""
">>> value = ('the answer', 42)\n"
">>> s = str(value)  # convert the tuple to string\n"
">>> f.write(s)\n"
"18"

#: ../../tutorial/inputoutput.rst:451
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file represented as number of bytes from the beginning of the file when "
"in binary mode and an opaque number when in text mode."
msgstr ""
"``f.tell()`` возвращает целое число, указывающее на текущую позицию в файле "
"и представленное как количество байт с начала файла в двоичном режиме и "
"непрозрачное значение в текстовом режиме."

#: ../../tutorial/inputoutput.rst:455
msgid ""
"To change the file object's position, use ``f.seek(offset, whence)``.  The "
"position is computed from adding *offset* to a reference point; the "
"reference point is selected by the *whence* argument.  A *whence* value of 0 "
"measures from the beginning of the file, 1 uses the current file position, "
"and 2 uses the end of the file as the reference point.  *whence* can be "
"omitted and defaults to 0, using the beginning of the file as the reference "
"point. ::"
msgstr ""
"Чтобы поменять позицию файлового объекта, используйте ``f.seek(offset, "
"whence)``. Позиция будет посчитана путём добавления *offset* к некоторой "
"точке отсчёта. Точка отсчёта выбрана аргументом *whence*. Значение 0 выберет "
"точкой отсчёта  начало файла, 1 выберет текущее положение, 2 выберет конец "
"файла. *whence* может быть опущен, в таком случае его значение будет 0 и "
"точкой отсчёта будет начало файла. ::"

#: ../../tutorial/inputoutput.rst:462
msgid ""
">>> f = open('workfile', 'rb+')\n"
">>> f.write(b'0123456789abcdef')\n"
"16\n"
">>> f.seek(5)      # Go to the 6th byte in the file\n"
"5\n"
">>> f.read(1)\n"
"b'5'\n"
">>> f.seek(-3, 2)  # Go to the 3rd byte before the end\n"
"13\n"
">>> f.read(1)\n"
"b'd'"
msgstr ""
">>> f = open('workfile', 'rb+')\n"
">>> f.write(b'0123456789abcdef')\n"
"16\n"
">>> f.seek(5)      # Go to the 6th byte in the file\n"
"5\n"
">>> f.read(1)\n"
"b'5'\n"
">>> f.seek(-3, 2)  # Go to the 3rd byte before the end\n"
"13\n"
">>> f.read(1)\n"
"b'd'"

#: ../../tutorial/inputoutput.rst:474
msgid ""
"In text files (those opened without a ``b`` in the mode string), only seeks "
"relative to the beginning of the file are allowed (the exception being "
"seeking to the very file end with ``seek(0, 2)``) and the only valid "
"*offset* values are those returned from the ``f.tell()``, or zero. Any other "
"*offset* value produces undefined behaviour."
msgstr ""
"В текстовых файлах (открытых в режиме без ``b`` в строке режима) разрешены "
"прыжки только относительно начала файла и ровно в конец (``seek(0, 2)``), "
"причём в качестве значения *offset* допускаются только числа, которые вернул "
"метод ``f.tell()`` и 0. Любое другое значение для *offset* приведёт к "
"неопределённому поведению."

#: ../../tutorial/inputoutput.rst:480
msgid ""
"File objects have some additional methods, such as :meth:`~io.IOBase.isatty` "
"and :meth:`~io.IOBase.truncate` which are less frequently used; consult the "
"Library Reference for a complete guide to file objects."
msgstr ""
"Файловые объекты имеют некоторые дополнительные методы, такие как :meth:`~io."
"IOBase.isatty` и :meth:`~io.IOBase.truncate`, которые используются реже; см. "
"Справочник по библиотеке для полного руководства по файловым объектам."

#: ../../tutorial/inputoutput.rst:488
msgid "Saving structured data with :mod:`json`"
msgstr "Сохранение структурированных данных с :mod:`json`"

#: ../../tutorial/inputoutput.rst:492
msgid ""
"Strings can easily be written to and read from a file.  Numbers take a bit "
"more effort, since the :meth:`~io.TextIOBase.read` method only returns "
"strings, which will have to be passed to a function like :func:`int`, which "
"takes a string like ``'123'`` and returns its numeric value 123.  When you "
"want to save more complex data types like nested lists and dictionaries, "
"parsing and serializing by hand becomes complicated."
msgstr ""
"Строки могут быть легко записаны в файл и считаны из него. Числа требуют "
"немного больше усилий, так как метод :meth:`~io.TextIOBase.read` возвращает "
"только строки, которые должны быть переданы в функцию, такую как :func:"
"`int`, которая принимает строку, например, ``'123'``, и возвращает ее "
"числовое значение 123. Когда вы хотите сохранить более сложные типы данных, "
"такие как вложенные списки и словари, парсинг и сериализация вручную "
"становятся сложными."

#: ../../tutorial/inputoutput.rst:499
msgid ""
"Rather than having users constantly writing and debugging code to save "
"complicated data types to files, Python allows you to use the popular data "
"interchange format called `JSON (JavaScript Object Notation) <https://json."
"org>`_.  The standard module called :mod:`json` can take Python data "
"hierarchies, and convert them to string representations; this process is "
"called :dfn:`serializing`.  Reconstructing the data from the string "
"representation is called :dfn:`deserializing`.  Between serializing and "
"deserializing, the string representing the object may have been stored in a "
"file or data, or sent over a network connection to some distant machine."
msgstr ""
"Вместо того, чтобы заставлять пользователей постоянно писать и отлаживать "
"код для сохранения сложных типов данных в файлах, Python позволяет "
"использовать популярный формат обмена данными, называемый `JSON (JavaScript "
"Object Notation) <https://json.org>`_.  Стандартный модуль под названием :"
"mod:`json` может принимать иерархии данных Python и преобразовывать их в "
"строковые представления; этот процесс называется :dfn:`serializing`.  "
"Восстановление данных из строкового представления называется :dfn:"
"`deserializing`. Между сериализацией и десериализацией строка, "
"представляющая объект, могла быть сохранена в файле или данных или "
"отправлена по сетевому соединению на какой-либо удаленный компьютер."

#: ../../tutorial/inputoutput.rst:510
msgid ""
"The JSON format is commonly used by modern applications to allow for data "
"exchange.  Many programmers are already familiar with it, which makes it a "
"good choice for interoperability."
msgstr ""
"Формат JSON часто используется современными приложениями для передачи "
"данных. Многие программисты уже знакомы с ним, что делает его хорошим "
"форматом для взаимодействия с другими системами."

#: ../../tutorial/inputoutput.rst:514
msgid ""
"If you have an object ``x``, you can view its JSON string representation "
"with a simple line of code::"
msgstr ""
"Если у вас есть объект ``x``, вы можете получить его строковое представление "
"в формате JSON с помощью одной строки кода::"

#: ../../tutorial/inputoutput.rst:517
msgid ""
">>> import json\n"
">>> x = [1, 'simple', 'list']\n"
">>> json.dumps(x)\n"
"'[1, \"simple\", \"list\"]'"
msgstr ""
">>> import json\n"
">>> x = [1, 'simple', 'list']\n"
">>> json.dumps(x)\n"
"'[1, \"simple\", \"list\"]'"

#: ../../tutorial/inputoutput.rst:522
msgid ""
"Another variant of the :func:`~json.dumps` function, called :func:`~json."
"dump`, simply serializes the object to a :term:`text file`.  So if ``f`` is "
"a :term:`text file` object opened for writing, we can do this::"
msgstr ""
"Другой вариант функции :func:`~json.dumps` -- :func:`~json.dump`, "
"сериализует объект прямо в :term:`текстовый файл`. Так, если ``f`` -- :term:"
"`файловый объект`, открытый для записи, можно сделать следующее::"

#: ../../tutorial/inputoutput.rst:526
msgid "json.dump(x, f)"
msgstr "json.dump(x, f)"

#: ../../tutorial/inputoutput.rst:528
msgid ""
"To decode the object again, if ``f`` is a :term:`binary file` or :term:`text "
"file` object which has been opened for reading::"
msgstr ""
"Чтобы снова декодировать объект, если ``f`` - это объект :term:`binary file` "
"или :term:`text file`, который был открыт для чтения::"

#: ../../tutorial/inputoutput.rst:531
msgid "x = json.load(f)"
msgstr "x = json.load(f)"

#: ../../tutorial/inputoutput.rst:534
msgid ""
"JSON files must be encoded in UTF-8. Use ``encoding=\"utf-8\"`` when opening "
"JSON file as a :term:`text file` for both of reading and writing."
msgstr ""
"Файлы JSON должны быть закодированы в UTF-8. Используйте "
"``encoding=\"utf-8\"``  при открытии файла JSON как :term:`text file` как "
"для чтения, так и для записи."

#: ../../tutorial/inputoutput.rst:537
msgid ""
"This simple serialization technique can handle lists and dictionaries, but "
"serializing arbitrary class instances in JSON requires a bit of extra "
"effort. The reference for the :mod:`json` module contains an explanation of "
"this."
msgstr ""
"Такой простой способ сериализации работает со списками и словарями, но чтобы "
"сериализовывать экземпляры произвольных классов в формате JSON, требуется "
"чуть больше работы. Справка по модулю :mod:`json` расскажет, как это сделать."

#: ../../tutorial/inputoutput.rst:543
msgid ":mod:`pickle` - the pickle module"
msgstr ":mod:`pickle` -- \"консервирование\" объектов"

#: ../../tutorial/inputoutput.rst:545
msgid ""
"Contrary to :ref:`JSON <tut-json>`, *pickle* is a protocol which allows the "
"serialization of arbitrarily complex Python objects.  As such, it is "
"specific to Python and cannot be used to communicate with applications "
"written in other languages.  It is also insecure by default: deserializing "
"pickle data coming from an untrusted source can execute arbitrary code, if "
"the data was crafted by a skilled attacker."
msgstr ""
"В отличие от :ref:`JSON <tut-json>`, *pickle* -- протокол, позволяющий "
"сериализовывать и десериализовывать произвольные объекты в Python. Он "
"специфичен для Python и не может быть использован для взаимодействия с "
"приложениями, написанными на других языках. Ещё он небезопасен по умолчанию: "
"десериализация данных в формате *pickle* из недоверенного источника может "
"привести к выполнению произвольного кода, если данные сфабрикованы "
"подкованным недоброжелателем."

#: ../../tutorial/inputoutput.rst:103
msgid "formatted string literal"
msgstr "форматированный строковый литерал"

#: ../../tutorial/inputoutput.rst:103
msgid "interpolated string literal"
msgstr "интерполированный строковый литерал"

#: ../../tutorial/inputoutput.rst:103
msgid "string"
msgstr "строка"

#: ../../tutorial/inputoutput.rst:103
msgid "formatted literal"
msgstr "форматированный литерал"

#: ../../tutorial/inputoutput.rst:103
msgid "interpolated literal"
msgstr "интерполированный литерал"

#: ../../tutorial/inputoutput.rst:103
msgid "f-string"
msgstr "f-строка"

#: ../../tutorial/inputoutput.rst:103
msgid "fstring"
msgstr "f-строка"

#: ../../tutorial/inputoutput.rst:308
msgid "built-in function"
msgstr "встроенная функция"

#: ../../tutorial/inputoutput.rst:308
msgid "open"
msgstr "открыть"

#: ../../tutorial/inputoutput.rst:308
msgid "object"
msgstr "объект"

#: ../../tutorial/inputoutput.rst:308
msgid "file"
msgstr "файл"

#: ../../tutorial/inputoutput.rst:490
msgid "module"
msgstr "модуль"

#: ../../tutorial/inputoutput.rst:490
msgid "json"
msgstr "json"
