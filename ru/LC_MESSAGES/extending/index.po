# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../extending/index.rst:5
msgid "Extending and Embedding the Python Interpreter"
msgstr "Расширение и встраивание интерпретатора Python"

#: ../../extending/index.rst:7
msgid ""
"This document describes how to write modules in C or C++ to extend the "
"Python interpreter with new modules.  Those modules can not only define new "
"functions but also new object types and their methods.  The document also "
"describes how to embed the Python interpreter in another application, for "
"use as an extension language.  Finally, it shows how to compile and link "
"extension modules so that they can be loaded dynamically (at run time) into "
"the interpreter, if the underlying operating system supports this feature."
msgstr ""
"В этом документе описывается, как писать модули на C или C++, чтобы "
"расширить интерпретатор Python новыми модулями. Эти модули могут определять "
"не только новые функции, но также новые типы объектов и их методы. В "
"документе также описывается, как встроить интерпретатор Python в другое "
"приложение для использования в качестве языка расширения. Наконец, показано, "
"как скомпилировать и связать модули расширения, чтобы их можно было "
"динамически загружать (во время выполнения) в интерпретатор, если базовая "
"операционная система поддерживает эту функцию."

#: ../../extending/index.rst:15
msgid ""
"This document assumes basic knowledge about Python.  For an informal "
"introduction to the language, see :ref:`tutorial-index`.  :ref:`reference-"
"index` gives a more formal definition of the language.  :ref:`library-index` "
"documents the existing object types, functions and modules (both built-in "
"and written in Python) that give the language its wide application range."
msgstr ""
"Этот документ предполагает базовые знания о Python. Неофициальное введение в "
"язык см. в :ref:`tutorial-index`. :ref:`reference-index` дает более "
"формальное определение языка. :ref:`library-index` документирует "
"существующие типы объектов, функции и модули (как встроенные, так и "
"написанные на Python), которые обеспечивают широкий спектр применения языка."

#: ../../extending/index.rst:21
msgid ""
"For a detailed description of the whole Python/C API, see the separate :ref:"
"`c-api-index`."
msgstr ""
"Подробное описание всего API Python/C см. в отдельном документе :ref:`c-api-"
"index`."

#: ../../extending/index.rst:26
msgid "Recommended third party tools"
msgstr "Рекомендуемые сторонние инструменты"

#: ../../extending/index.rst:28
msgid ""
"This guide only covers the basic tools for creating extensions provided as "
"part of this version of CPython. Third party tools like `Cython <https://"
"cython.org/>`_, `cffi <https://cffi.readthedocs.io>`_, `SWIG <https://www."
"swig.org>`_ and `Numba <https://numba.pydata.org/>`_ offer both simpler and "
"more sophisticated approaches to creating C and C++ extensions for Python."
msgstr ""
"В этом руководстве описаны только основные инструменты для создания "
"расширений, входящие в состав этой версии CPython. Сторонние инструменты, "
"такие как Cython <https://cython.org/>`_, `cffi <https://cffi.readthedocs."
"io>`_, `SWIG <https://www.swig.org>`_ и `Numba <https://numba.pydata.org/>`_ "
"предлагают как более простые, так и более сложные подходы к созданию "
"расширений C и C++ для Python."

#: ../../extending/index.rst:37
msgid ""
"`Python Packaging User Guide: Binary Extensions <https://packaging.python."
"org/guides/packaging-binary-extensions/>`_"
msgstr ""
"`Руководство пользователя по упаковке Python: двоичные расширения <https://"
"packaging.python.org/guides/packaging-binary-extensions/>`_"

#: ../../extending/index.rst:38
msgid ""
"The Python Packaging User Guide not only covers several available tools that "
"simplify the creation of binary extensions, but also discusses the various "
"reasons why creating an extension module may be desirable in the first place."
msgstr ""
"Руководство пользователя упаковки Python не только описывает несколько "
"доступных инструментов, которые упрощают создание двоичных расширений, но "
"также обсуждает различные причины, по которым создание модуля расширения "
"может быть желательным в первую очередь."

#: ../../extending/index.rst:45
msgid "Creating extensions without third party tools"
msgstr "Создание расширений без сторонних инструментов"

#: ../../extending/index.rst:47
msgid ""
"This section of the guide covers creating C and C++ extensions without "
"assistance from third party tools. It is intended primarily for creators of "
"those tools, rather than being a recommended way to create your own C "
"extensions."
msgstr ""
"В этом разделе руководства рассматривается создание расширений C и C++ без "
"помощи сторонних инструментов. Он предназначен в первую очередь для "
"создателей этих инструментов, а не является рекомендуемым способом создания "
"собственных расширений C."

#: ../../extending/index.rst:63
msgid "Embedding the CPython runtime in a larger application"
msgstr "Встраивание среды выполнения CPython в более крупное приложение"

#: ../../extending/index.rst:65
msgid ""
"Sometimes, rather than creating an extension that runs inside the Python "
"interpreter as the main application, it is desirable to instead embed the "
"CPython runtime inside a larger application. This section covers some of the "
"details involved in doing that successfully."
msgstr ""
"Иногда вместо создания расширения, которое запускается внутри интерпретатора "
"Python в качестве основного приложения, желательно встроить среду выполнения "
"CPython в более крупное приложение. В этом разделе рассматриваются некоторые "
"детали, необходимые для успешного выполнения этой задачи."
