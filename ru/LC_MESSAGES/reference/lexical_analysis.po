# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kristina Mironova, 2021
# alex alev <alex.alev@bk.ru>, 2021
# Daniil Kolesnikov, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Илья Панфилов, 2024
# Roustam Khamidoulline, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 14:21+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Roustam Khamidoulline, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr "Лексический анализ"

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of :"
"term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""
"Программа Python читается *парсером*. Входными данными для парсера является "
"поток :term:`tokens <token>`, сгенерированный *лексическим анализатором* "
"(также известным как *токенизатор*). В этой главе описывается, как "
"лексический анализатор разбивает файл на токены."

#: ../../reference/lexical_analysis.rst:15
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""
"Python читает текст программы как кодовые точки Unicode; кодировка исходного "
"файла может быть задана в объявлении кодировки и по умолчанию используется "
"UTF-8, подробности см. в :pep:`3120`. Если исходный файл не может быть "
"декодирован, выдается ошибка :exc:`SyntaxError`."

#: ../../reference/lexical_analysis.rst:24
msgid "Line structure"
msgstr "Линейная структура"

#: ../../reference/lexical_analysis.rst:28
msgid "A Python program is divided into a number of *logical lines*."
msgstr "Программа Python разделена на несколько *логических строк*."

#: ../../reference/lexical_analysis.rst:34
msgid "Logical lines"
msgstr "Логические линии"

#: ../../reference/lexical_analysis.rst:38
msgid ""
"The end of a logical line is represented by the token :data:`~token."
"NEWLINE`. Statements cannot cross logical line boundaries except where :data:"
"`!NEWLINE` is allowed by the syntax (e.g., between statements in compound "
"statements). A logical line is constructed from one or more *physical lines* "
"by following the explicit or implicit *line joining* rules."
msgstr ""

#: ../../reference/lexical_analysis.rst:48
msgid "Physical lines"
msgstr "Физические линии"

#: ../../reference/lexical_analysis.rst:50
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed), "
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character.  "
"All of these forms can be used equally, regardless of platform. The end of "
"input also serves as an implicit terminator for the final physical line."
msgstr ""
"Физическая строка — это последовательность символов, заканчивающаяся "
"последовательностью конца строки. В исходных файлах и строках можно "
"использовать любую стандартную последовательность завершения строки "
"платформы: форму Unix с использованием ASCII LF (перевод строки), форму "
"Windows с использованием последовательности ASCII CR LF (возврат с "
"последующим переводом строки) или старую форму Macintosh с использованием "
"символ ASCII CR (возврат). Все эти формы можно использовать одинаково, "
"независимо от платформы. Конец ввода также служит неявным ограничителем "
"последней физической строки."

#: ../../reference/lexical_analysis.rst:58
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""
"При встраивании Python строки исходного кода должны передаваться в API "
"Python с использованием стандартных соглашений C для символов новой строки "
"(символ ``\\n``, представляющий ASCII LF, является признаком конца строки)."

#: ../../reference/lexical_analysis.rst:66
msgid "Comments"
msgstr "Комментарии"

#: ../../reference/lexical_analysis.rst:71
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""
"Комментарий начинается с символа решетки (``#``), который не является частью "
"строкового литерала, и заканчивается в конце физической строки. Комментарий "
"означает конец логической строки, если не вызываются неявные правила "
"объединения строк. Комментарии игнорируются синтаксисом."

#: ../../reference/lexical_analysis.rst:80
msgid "Encoding declarations"
msgstr "Объявления кодирования"

#: ../../reference/lexical_analysis.rst:85
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""
"Если комментарий в первой или второй строке скрипта Python соответствует "
"регулярному выражению ``coding[=:]\\s*([-\\w.]+)``, этот комментарий "
"обрабатывается как объявление кодировки; первая группа этого выражения "
"называет кодировку файла исходного кода. Объявление кодировки должно "
"располагаться на отдельной строке. Если это вторая строка, первая строка "
"также должна быть строкой только для комментариев. Рекомендуемые формы "
"выражения кодировки:::"

#: ../../reference/lexical_analysis.rst:92
msgid "# -*- coding: <encoding-name> -*-"
msgstr "# -*- coding: <encoding-name> -*-"

#: ../../reference/lexical_analysis.rst:94
msgid "which is recognized also by GNU Emacs, and ::"
msgstr "который также признается GNU Emacs, и ::"

#: ../../reference/lexical_analysis.rst:96
msgid "# vim:fileencoding=<encoding-name>"
msgstr "# vim:fileencoding=<encoding-name>"

#: ../../reference/lexical_analysis.rst:98
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr "который признан VIM Брэма Муленаара."

#: ../../reference/lexical_analysis.rst:100
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""

#: ../../reference/lexical_analysis.rst:104
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""
"Если кодировка объявлена, имя кодировки должно распознаваться Python (см. :"
"ref:`standard-encodings`). Кодировка используется для всего лексического "
"анализа, включая строковые литералы, комментарии и идентификаторы."

#: ../../reference/lexical_analysis.rst:113
msgid "Explicit line joining"
msgstr "Явное соединение строк"

#: ../../reference/lexical_analysis.rst:117
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""
"Две или более физические строки могут быть объединены в логические строки с "
"использованием символов обратной косой черты (``\\``) следующим образом: "
"когда физическая строка заканчивается обратной косой чертой, которая не "
"является частью строкового литерала или комментария, она объединяется с "
"помощью следующего формирование одной логической строки, удаление обратной "
"косой черты и следующего за ней символа конца строки. Например::"

#: ../../reference/lexical_analysis.rst:123
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"

#: ../../reference/lexical_analysis.rst:128
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""
"Строка, заканчивающаяся обратной косой чертой, не может содержать "
"комментарий. Обратная косая черта не продолжает комментарий. Обратная косая "
"черта не продолжает токен, за исключением строковых литералов (т. е. токены, "
"отличные от строковых литералов, не могут быть разделены на физические "
"строки с помощью обратной косой черты). Обратная косая черта недопустима в "
"любом месте строки за пределами строкового литерала."

#: ../../reference/lexical_analysis.rst:138
msgid "Implicit line joining"
msgstr "Неявное соединение строк"

#: ../../reference/lexical_analysis.rst:140
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""
"Выражения в круглых, квадратных или фигурных скобках можно разделить на "
"несколько физических строк без использования обратной косой черты. Например::"

#: ../../reference/lexical_analysis.rst:143
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"

#: ../../reference/lexical_analysis.rst:148
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""
"Неявно продолженные строки могут содержать комментарии. Отступ строк "
"продолжения не важен. Допускаются пустые строки продолжения. Между строками "
"неявного продолжения нет токена NEWLINE. Неявно продолжающиеся строки также "
"могут встречаться в строках, заключенных в тройные кавычки (см. ниже); в "
"этом случае они не могут нести комментарии."

#: ../../reference/lexical_analysis.rst:158
msgid "Blank lines"
msgstr "Пустые строки"

#: ../../reference/lexical_analysis.rst:162
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard "
"interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:174
msgid "Indentation"
msgstr "Отступ"

#: ../../reference/lexical_analysis.rst:178
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""
"Ведущие пробелы (пробелы и табуляции) в начале логической строки "
"используются для вычисления уровня отступа строки, который, в свою очередь, "
"используется для определения группировки операторов."

#: ../../reference/lexical_analysis.rst:182
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""
"Табуляция заменяется (слева направо) на от одного до восьми пробелов, так "
"что общее количество символов до замены включительно кратно восьми (это то "
"же самое правило, которое используется в Unix). Общее количество пробелов, "
"предшествующих первому непустому символу, определяет отступ строки. Отступ "
"нельзя разделить на несколько физических строк с помощью обратной косой "
"черты; пробелы до первой обратной косой черты определяют отступ."

#: ../../reference/lexical_analysis.rst:190
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""
"Отступы отклоняются как непоследовательные, если в исходном файле табуляция "
"и пробелы смешаны таким образом, что значение зависит от значения табуляции "
"в пробелах; В этом случае возникает :exc:`TabError`."

#: ../../reference/lexical_analysis.rst:194
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""
"**Примечание о межплатформенной совместимости:** из-за особенностей "
"текстовых редакторов на платформах, отличных от UNIX, неразумно использовать "
"сочетание пробелов и табуляции для отступов в одном исходном файле. Также "
"следует отметить, что разные платформы могут явно ограничивать максимальный "
"уровень отступов."

#: ../../reference/lexical_analysis.rst:199
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""
"Символ перевода страницы может присутствовать в начале строки; он будет "
"игнорироваться при расчете отступов, приведенном выше. Символы перевода "
"страницы, встречающиеся в других местах начального пробела, имеют "
"неопределенный эффект (например, они могут сбросить счетчик пробелов на "
"ноль)."

#: ../../reference/lexical_analysis.rst:206
msgid ""
"The indentation levels of consecutive lines are used to generate :data:"
"`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as follows."
msgstr ""

#: ../../reference/lexical_analysis.rst:210
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one :data:`!INDENT` token is generated.  If it is smaller, it "
"*must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a :data:"
"`!DEDENT` token is generated. At the end of the file, a :data:`!DEDENT` "
"token is generated for each number remaining on the stack that is larger "
"than zero."
msgstr ""
"Перед чтением первой строки файла в стек помещается один ноль; он больше "
"никогда не будет извлечен. Числа, помещаемые в стек, всегда будут строго "
"возрастать снизу вверх. В начале каждой логической строки уровень отступа "
"строки сравнивается с верхом стека. Если он равен, ничего не происходит. "
"Если он больше, он помещается в стек, и генерируется один токен :data:`!"
"INDENT`. Если он меньше, это *должно* быть одно из чисел, находящихся в "
"стеке; все числа в стеке, которые больше, извлекаются, и для каждого "
"извлеченного числа генерируется токен :data:`!DEDENT`. В конце файла для "
"каждого числа, оставшегося в стеке, которое больше нуля, генерируется токен :"
"data:`!DEDENT`."

#: ../../reference/lexical_analysis.rst:221
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""
"Вот пример правильно (хотя и сбивчиво) фрагмента кода Python с отступами:"

#: ../../reference/lexical_analysis.rst:224
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"

#: ../../reference/lexical_analysis.rst:236
msgid "The following example shows various indentation errors::"
msgstr "В следующем примере показаны различные ошибки отступов:"

#: ../../reference/lexical_analysis.rst:238
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"

#: ../../reference/lexical_analysis.rst:246
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""
"(На самом деле синтаксический анализатор обнаруживает первые три ошибки; "
"лексический анализатор находит только последнюю ошибку --- отступ ``return "
"r`` не соответствует уровню, извлеченному из стека.)"

#: ../../reference/lexical_analysis.rst:254
msgid "Whitespace between tokens"
msgstr "Пробелы между токенами"

#: ../../reference/lexical_analysis.rst:256
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and "
"``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""

#: ../../reference/lexical_analysis.rst:267
msgid "End marker"
msgstr ""

#: ../../reference/lexical_analysis.rst:269
msgid ""
"At the end of non-interactive input, the lexical analyzer generates an :data:"
"`~token.ENDMARKER` token."
msgstr ""

#: ../../reference/lexical_analysis.rst:276
msgid "Other tokens"
msgstr "Другие токены"

#: ../../reference/lexical_analysis.rst:278
msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and :data:`~token."
"DEDENT`, the following categories of tokens exist: *identifiers* and "
"*keywords* (:data:`~token.NAME`), *literals* (such as :data:`~token.NUMBER` "
"and :data:`~token.STRING`), and other symbols (*operators* and "
"*delimiters*, :data:`~token.OP`). Whitespace characters (other than logical "
"line terminators, discussed earlier) are not tokens, but serve to delimit "
"tokens. Where ambiguity exists, a token comprises the longest possible "
"string that forms a legal token, when read from left to right."
msgstr ""

#: ../../reference/lexical_analysis.rst:292
msgid "Names (identifiers and keywords)"
msgstr ""

#: ../../reference/lexical_analysis.rst:296
msgid ""
":data:`~token.NAME` tokens represent *identifiers*, *keywords*, and *soft "
"keywords*."
msgstr ""

#: ../../reference/lexical_analysis.rst:299
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for names "
"include the uppercase and lowercase letters (``A-Z`` and ``a-z``), the "
"underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``."
msgstr ""

#: ../../reference/lexical_analysis.rst:304
msgid ""
"Names must contain at least one character, but have no upper length limit. "
"Case is significant."
msgstr ""

#: ../../reference/lexical_analysis.rst:307
msgid ""
"Besides ``A-Z``, ``a-z``, ``_`` and ``0-9``, names can also use \"letter-"
"like\" and \"number-like\" characters from outside the ASCII range, as "
"detailed below."
msgstr ""

#: ../../reference/lexical_analysis.rst:310
msgid ""
"All identifiers are converted into the `normalization form`_ NFKC while "
"parsing; comparison of identifiers is based on NFKC."
msgstr ""

#: ../../reference/lexical_analysis.rst:313
msgid ""
"Formally, the first character of a normalized identifier must belong to the "
"set ``id_start``, which is the union of:"
msgstr ""

#: ../../reference/lexical_analysis.rst:316
msgid "Unicode category ``<Lu>`` - uppercase letters (includes ``A`` to ``Z``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:317
msgid "Unicode category ``<Ll>`` - lowercase letters (includes ``a`` to ``z``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:318
msgid "Unicode category ``<Lt>`` - titlecase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:319
msgid "Unicode category ``<Lm>`` - modifier letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:320
msgid "Unicode category ``<Lo>`` - other letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:321
msgid "Unicode category ``<Nl>`` - letter numbers"
msgstr ""

#: ../../reference/lexical_analysis.rst:322
msgid "{``\"_\"``} - the underscore"
msgstr ""

#: ../../reference/lexical_analysis.rst:323
msgid ""
"``<Other_ID_Start>`` - an explicit set of characters in `PropList.txt`_ to "
"support backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:326
msgid ""
"The remaining characters must belong to the set ``id_continue``, which is "
"the union of:"
msgstr ""

#: ../../reference/lexical_analysis.rst:329
msgid "all characters in ``id_start``"
msgstr ""

#: ../../reference/lexical_analysis.rst:330
msgid "Unicode category ``<Nd>`` - decimal numbers (includes ``0`` to ``9``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:331
msgid "Unicode category ``<Pc>`` - connector punctuations"
msgstr ""

#: ../../reference/lexical_analysis.rst:332
msgid "Unicode category ``<Mn>`` - nonspacing marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:333
msgid "Unicode category ``<Mc>`` - spacing combining marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:334
msgid ""
"``<Other_ID_Continue>`` - another explicit set of characters in `PropList."
"txt`_ to support backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:337
msgid ""
"Unicode categories use the version of the Unicode Character Database as "
"included in the :mod:`unicodedata` module."
msgstr ""

#: ../../reference/lexical_analysis.rst:340
msgid ""
"These sets are based on the Unicode standard annex `UAX-31`_. See also :pep:"
"`3131` for further details."
msgstr ""

#: ../../reference/lexical_analysis.rst:343
msgid ""
"Even more formally, names are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:357
msgid ""
"A non-normative listing of all valid identifier characters as defined by "
"Unicode is available in the `DerivedCoreProperties.txt`_ file in the Unicode "
"Character Database."
msgstr ""

#: ../../reference/lexical_analysis.rst:371
msgid "Keywords"
msgstr "Ключевые слова"

#: ../../reference/lexical_analysis.rst:377
msgid ""
"The following names are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

#: ../../reference/lexical_analysis.rst:381
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""
"Ложь, ожидайте еще прохода импорта Ни одного брейка, кроме рейза Истинный "
"класс, наконец, возвращается и продолжите попытку лямбды как определение из "
"нелокального while утверждать del global не с помощью асинхронный elif if "
"или выход"

#: ../../reference/lexical_analysis.rst:395
msgid "Soft Keywords"
msgstr "Мягкие ключевые слова"

#: ../../reference/lexical_analysis.rst:401
msgid ""
"Some names are only reserved under specific contexts. These are known as "
"*soft keywords*:"
msgstr ""

#: ../../reference/lexical_analysis.rst:404
msgid ""
"``match``, ``case``, and ``_``, when used in the :keyword:`match` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:405
msgid "``type``, when used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:407
msgid ""
"These syntactically act as keywords in their specific contexts, but this "
"distinction is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:410
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""
"В качестве мягких ключевых слов их использование в грамматике возможно при "
"сохранении совместимости с существующим кодом, который использует эти имена "
"в качестве имен-идентификаторов."

#: ../../reference/lexical_analysis.rst:414
msgid "``type`` is now a soft keyword."
msgstr "``type`` теперь является мягким ключевым словом."

#: ../../reference/lexical_analysis.rst:423
msgid "Reserved classes of identifiers"
msgstr "Зарезервированные классы идентификаторов"

#: ../../reference/lexical_analysis.rst:425
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""
"Определенные классы идентификаторов (кроме ключевых слов) имеют особое "
"значение. Эти классы идентифицируются по шаблонам начальных и конечных "
"символов подчеркивания:"

#: ../../reference/lexical_analysis.rst:429
msgid "``_*``"
msgstr "``_*``"

#: ../../reference/lexical_analysis.rst:430
msgid "Not imported by ``from module import *``."
msgstr "Не импортируется из ``from module import *``."

#: ../../reference/lexical_analysis.rst:432
msgid "``_``"
msgstr "``_``"

#: ../../reference/lexical_analysis.rst:433
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""
"В шаблоне ``case`` в операторе :keyword:`match` ``_`` представляет собой :"
"ref:`мягкое ключевое слово <soft-keywords>`, которое обозначает :ref:"
"`wildcard <wildcard-patterns> `."

#: ../../reference/lexical_analysis.rst:437
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""
"Отдельно интерактивный интерпретатор делает результат последней оценки "
"доступным в переменной ``_``. (Он хранится в модуле :mod:`builtins` вместе "
"со встроенными функциями, такими как ``print``.)"

#: ../../reference/lexical_analysis.rst:442
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""
"В других местах ``_`` является обычным идентификатором. Его часто используют "
"для обозначения «специальных» элементов, но он не является чем-то особенным "
"для самого Python."

#: ../../reference/lexical_analysis.rst:447
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""
"Имя ``_`` часто используется в сочетании с интернационализацией; обратитесь "
"к документации модуля :mod:`gettext` для получения дополнительной информации "
"об этом соглашении."

#: ../../reference/lexical_analysis.rst:451
msgid "It is also commonly used for unused variables."
msgstr "Он также часто используется для неиспользуемых переменных."

#: ../../reference/lexical_analysis.rst:453
msgid "``__*__``"
msgstr "``__*__``"

#: ../../reference/lexical_analysis.rst:454
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""
"Определенные системой имена, неофициально известные как имена «dunder». Эти "
"имена определяются интерпретатором и его реализацией (включая стандартную "
"библиотеку). Текущие системные имена обсуждаются в разделе :ref:"
"`specialnames` и других местах. Скорее всего, больше будет определено в "
"будущих версиях Python. *Любое* использование имен ``__*__`` в любом "
"контексте, которое не соответствует явно задокументированному использованию, "
"может быть нарушено без предупреждения."

#: ../../reference/lexical_analysis.rst:461
msgid "``__*``"
msgstr "``__*``"

#: ../../reference/lexical_analysis.rst:462
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""
"Частные имена классов. Имена в этой категории, когда они используются в "
"контексте определения класса, переписываются в искаженной форме, чтобы "
"избежать конфликтов имен между «частными» атрибутами базового и производных "
"классов. См. раздел :ref:`атом-идентификаторы`."

#: ../../reference/lexical_analysis.rst:471
msgid "Literals"
msgstr "Литералы"

#: ../../reference/lexical_analysis.rst:475
msgid "Literals are notations for constant values of some built-in types."
msgstr ""
"Литералы — это обозначения постоянных значений некоторых встроенных типов."

#: ../../reference/lexical_analysis.rst:486
msgid "String and Bytes literals"
msgstr "Строковые и байтовые литералы"

#: ../../reference/lexical_analysis.rst:488
msgid "String literals are described by the following lexical definitions:"
msgstr "Строковые литералы описываются следующими лексическими определениями:"

#: ../../reference/lexical_analysis.rst:514
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`~python-grammar:stringprefix` "
"or :token:`~python-grammar:bytesprefix` and the rest of the literal. The "
"source character set is defined by the encoding declaration; it is UTF-8 if "
"no encoding declaration is given in the source file; see section :ref:"
"`encodings`."
msgstr ""
"Одно синтаксическое ограничение, не указанное в этих продуктах, заключается "
"в том, что пробелы не допускаются между :token:`~python-grammar:"
"stringprefix` или :token:`~python-grammar:bytesprefix` и остальной частью "
"литерала. Исходный набор символов определяется объявлением кодировки; это "
"UTF-8, если в исходном файле не указано объявление кодировки; см. раздел :"
"ref:`кодировки`."

#: ../../reference/lexical_analysis.rst:524
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*). The backslash (``\\``) character is "
"used to give special meaning to otherwise ordinary characters like ``n``, "
"which means 'newline' when escaped (``\\n``). It can also be used to escape "
"characters that otherwise have a special meaning, such as newline, backslash "
"itself, or the quote character. See :ref:`escape sequences <escape-"
"sequences>` below for examples."
msgstr ""
"На простом английском языке: оба типа литералов могут быть заключены в "
"соответствующие одинарные кавычки (``'``) или двойные кавычки (``\"``). Они "
"также могут быть заключены в соответствующие группы из трех одинарных или "
"двойных кавычек (это обычно называется *строками в тройных кавычках*). "
"Символ обратной косой черты (``\\``) используется для придания особого "
"значения обычным символам, таким как ``n``, который при экранировании "
"означает \"новую строку\" (``\\). n``). Его также можно использовать для "
"escape-символов, которые в противном случае имеют специальное значение, "
"таких как новая строка, обратная косая черта или символ кавычки. Примеры см. "
"в разделе :ref:`escape-sequences <escape-sequences>` ниже."

#: ../../reference/lexical_analysis.rst:537
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""
"Байтовые литералы всегда имеют префикс ``'b'`` или ``'B'``; они создают "
"экземпляр типа :class:`bytes` вместо типа :class:`str`. Они могут содержать "
"только символы ASCII; байты с числовым значением 128 или больше должны быть "
"выражены с помощью escape-символов."

#: ../../reference/lexical_analysis.rst:546
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters.  As a result, in raw string literals, ``'\\U'`` and ``'\\u'`` "
"escapes are not treated specially."
msgstr ""
"Как строковые, так и байтовые литералы могут иметь префикс буквы ``'r'`` или "
"``'R'``; такие конструкции называются :dfn:`raw string literals` и :dfn:`raw "
"bytes literals` соответственно и обрабатывают обратную косую черту как "
"буквальные символы. В результате в необработанных строковых литералах escape-"
"символы ``'\\U'`` и ``'\\u'`` не обрабатываются особым образом."

#: ../../reference/lexical_analysis.rst:552
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""
"Префикс ``'rb'`` для литералов необработанных байтов был добавлен как "
"синоним ``'br'``."

#: ../../reference/lexical_analysis.rst:556
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""
"Поддержка устаревшего литерала Unicode («u'value») была вновь введена для "
"упрощения обслуживания двойных кодовых баз Python 2.x и 3.x. См. :pep:`414` "
"для получения дополнительной информации."

#: ../../reference/lexical_analysis.rst:564
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""
"Строковый литерал с префиксом ``'f'`` или ``'F'`` является :dfn:"
"`форматированным строковым литералом`; см. :ref:`f-strings`. ``'f'`` можно "
"комбинировать с ``'r'``, но не с ``'b'`` или ``'u'``, поэтому возможны "
"необработанные форматированные строки, но форматированные байтовые литералы "
"нет."

#: ../../reference/lexical_analysis.rst:569
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""
"В литералах с тройными кавычками разрешены (и сохраняются) неэкранированные "
"символы новой строки и кавычки, за исключением того, что три "
"неэкранированные кавычки подряд завершают литерал. («Кавычка» — это символ, "
"используемый для открытия литерала, т. е. либо ``'``, либо ``'``.)"

#: ../../reference/lexical_analysis.rst:592
msgid "Escape sequences"
msgstr "Escape-последовательности"

#: ../../reference/lexical_analysis.rst:594
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""
"Если не присутствует префикс ``'r'`` или ``'R'``, escape-последовательности "
"в строковых и байтовых литералах интерпретируются в соответствии с "
"правилами, аналогичными тем, которые используются в стандарте C. "
"Распознаваемые escape-последовательности:"

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Escape Sequence"
msgstr "Escape-последовательность"

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Meaning"
msgstr "Значение"

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Notes"
msgstr "Примечания"

#: ../../reference/lexical_analysis.rst:601
msgid "``\\``\\ <newline>"
msgstr "``\\``\\ <newline>"

#: ../../reference/lexical_analysis.rst:601
msgid "Backslash and newline ignored"
msgstr "Обратная косая черта и новая строка игнорируются"

#: ../../reference/lexical_analysis.rst:601
msgid "\\(1)"
msgstr "\\(1)"

#: ../../reference/lexical_analysis.rst:603
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../reference/lexical_analysis.rst:603
msgid "Backslash (``\\``)"
msgstr "Обратный слэш (``\\``)"

#: ../../reference/lexical_analysis.rst:605
msgid "``\\'``"
msgstr "``\\'``"

#: ../../reference/lexical_analysis.rst:605
msgid "Single quote (``'``)"
msgstr "Одиночная кавычка (``'``)"

#: ../../reference/lexical_analysis.rst:607
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../reference/lexical_analysis.rst:607
msgid "Double quote (``\"``)"
msgstr "Двойная кавычка (``\"``)"

#: ../../reference/lexical_analysis.rst:609
msgid "``\\a``"
msgstr "``\\a``"

#: ../../reference/lexical_analysis.rst:609
msgid "ASCII Bell (BEL)"
msgstr "ASCII Bell (BEL)"

#: ../../reference/lexical_analysis.rst:611
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:611
msgid "ASCII Backspace (BS)"
msgstr "ASCII Backspace (BS)"

#: ../../reference/lexical_analysis.rst:613
msgid "``\\f``"
msgstr "``\\f``"

#: ../../reference/lexical_analysis.rst:613
msgid "ASCII Formfeed (FF)"
msgstr "Подача форм в формате ASCII (FF)"

#: ../../reference/lexical_analysis.rst:615
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:615
msgid "ASCII Linefeed (LF)"
msgstr "ASCII Linefeed (LF)"

#: ../../reference/lexical_analysis.rst:617
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:617
msgid "ASCII Carriage Return (CR)"
msgstr "ASCII Carriage Return (CR)"

#: ../../reference/lexical_analysis.rst:619
msgid "``\\t``"
msgstr "``\\t``"

#: ../../reference/lexical_analysis.rst:619
msgid "ASCII Horizontal Tab (TAB)"
msgstr "ASCII Horizontal Tab (TAB)"

#: ../../reference/lexical_analysis.rst:621
msgid "``\\v``"
msgstr "``\\v``"

#: ../../reference/lexical_analysis.rst:621
msgid "ASCII Vertical Tab (VT)"
msgstr "ASCII Vertical Tab (VT)"

#: ../../reference/lexical_analysis.rst:623
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ":samp:`\\\\\\\\{ooo}`"

#: ../../reference/lexical_analysis.rst:623
msgid "Character with octal value *ooo*"
msgstr "Символ восьмеричного значения *ооо*"

#: ../../reference/lexical_analysis.rst:623
msgid "(2,4)"
msgstr "(2,4)"

#: ../../reference/lexical_analysis.rst:626
msgid ":samp:`\\\\x{hh}`"
msgstr ":samp:`\\\\x{hh}`"

#: ../../reference/lexical_analysis.rst:626
msgid "Character with hex value *hh*"
msgstr "Символ с шестнадцатеричным значением *чч*"

#: ../../reference/lexical_analysis.rst:626
msgid "(3,4)"
msgstr "(3,4)"

#: ../../reference/lexical_analysis.rst:629
msgid "Escape sequences only recognized in string literals are:"
msgstr ""
"Escape-последовательности, распознаваемые только в строковых литералах:"

#: ../../reference/lexical_analysis.rst:634
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ":samp:`\\\\N\\\\{{name}\\\\}`"

#: ../../reference/lexical_analysis.rst:634
msgid "Character named *name* in the Unicode database"
msgstr "Символ с именем *имя* в базе данных Юникода"

#: ../../reference/lexical_analysis.rst:634
msgid "\\(5)"
msgstr "\\(5)"

#: ../../reference/lexical_analysis.rst:637
msgid ":samp:`\\\\u{xxxx}`"
msgstr ":samp:`\\\\u{xxxx}`"

#: ../../reference/lexical_analysis.rst:637
msgid "Character with 16-bit hex value *xxxx*"
msgstr "Символ с 16-битным шестнадцатеричным значением *xxxx*"

#: ../../reference/lexical_analysis.rst:637
msgid "\\(6)"
msgstr "\\(6)"

#: ../../reference/lexical_analysis.rst:640
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ":samp:`\\\\U{xxxxxxxx}`"

#: ../../reference/lexical_analysis.rst:640
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr "Символ с 32-битным шестнадцатеричным значением *xxxxxxxxxx*"

#: ../../reference/lexical_analysis.rst:640
msgid "\\(7)"
msgstr "\\(7)"

#: ../../reference/lexical_analysis.rst:644
msgid "Notes:"
msgstr "Примечания:"

#: ../../reference/lexical_analysis.rst:647
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""
"В конце строки можно добавить обратную косую черту, чтобы игнорировать новую "
"строку:"

#: ../../reference/lexical_analysis.rst:649
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""
">>> 'Эта строка не будет включать \\ ... обратная косая черта или символы "
"новой строки.' «Эта строка не будет содержать обратную косую черту или "
"символы новой строки»."

#: ../../reference/lexical_analysis.rst:653
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""
"Того же результата можно добиться, используя :ref:`строки в тройных кавычках "
"<strings>` или круглые скобки и :ref:`конкатенацию строковых литералов "
"<string-concatenation>`."

#: ../../reference/lexical_analysis.rst:658
msgid "As in Standard C, up to three octal digits are accepted."
msgstr "Как и в стандарте C, допускается до трех восьмеричных цифр."

#: ../../reference/lexical_analysis.rst:660
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`DeprecationWarning`."
msgstr ""
"Восьмеричные escape-последовательности со значением больше 0o377 создают :"
"exc:`DeprecationWarning`."

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`SyntaxWarning`. In a future Python version they will be eventually a :exc:"
"`SyntaxError`."
msgstr ""
"Восьмеричные escape-символы со значением больше 0o377 создают :exc:"
"`SyntaxWarning`. В будущей версии Python они в конечном итоге станут :exc:"
"`SyntaxError`."

#: ../../reference/lexical_analysis.rst:670
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""
"В отличие от стандарта C, здесь требуется ровно две шестнадцатеричные цифры."

#: ../../reference/lexical_analysis.rst:673
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""
"В литерале байтов шестнадцатеричные и восьмеричные escape-символы обозначают "
"байт с заданным значением. В строковом литерале эти escape-символы "
"обозначают символ Юникода с заданным значением."

#: ../../reference/lexical_analysis.rst:678
msgid "Support for name aliases [#]_ has been added."
msgstr "Поддержка псевдонимов имен [#]_ был добавлен."

#: ../../reference/lexical_analysis.rst:682
msgid "Exactly four hex digits are required."
msgstr "Требуется ровно четыре шестнадцатеричные цифры."

#: ../../reference/lexical_analysis.rst:685
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are "
"required."
msgstr ""
"Таким образом можно закодировать любой символ Юникода. Требуется ровно "
"восемь шестнадцатеричных цифр."

#: ../../reference/lexical_analysis.rst:691
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""
"В отличие от стандарта C, все нераспознанные escape-последовательности "
"остаются в строке неизмененными, т.е. *обратная косая черта остается в "
"результате*. (Такое поведение полезно при отладке: если escape-"
"последовательность введена с ошибкой, результирующий вывод легче распознать "
"как поврежденный.) Также важно отметить, что escape-последовательности, "
"распознаваемые только в строковых литералах, попадают в категорию "
"нераспознанных escape-последовательностей для байтов. литералы."

#: ../../reference/lexical_analysis.rst:698
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""
"Нераспознанные escape-последовательности создают :exc:`DeprecationWarning`."

#: ../../reference/lexical_analysis.rst:701
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will be eventually a :exc:`SyntaxError`."
msgstr ""
"Нераспознанные escape-последовательности создают :exc:`SyntaxWarning`. В "
"будущей версии Python они в конечном итоге станут :exc:`SyntaxError`."

#: ../../reference/lexical_analysis.rst:705
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""
"Даже в необработанном литерале кавычки можно экранировать обратной косой "
"чертой, но в результате обратная косая черта останется; например, ``r\"\\"
"\"\"`` является допустимым строковым литералом, состоящим из двух символов: "
"обратной косой черты и двойной кавычки; ``r\"\\\"`` не является допустимым "
"строковым литералом (даже необработанная строка не может заканчиваться в "
"нечетном количестве обратных косых черт). В частности, *необработанный "
"литерал не может заканчиваться одной обратной косой чертой* (поскольку "
"обратная косая черта будет экранировать следующий символ кавычки). Обратите "
"также внимание, что одиночная обратная косая черта, за которой следует "
"символ новой строки, интерпретируется как эти два символа. часть литерала, "
"*не* как продолжение строки."

#: ../../reference/lexical_analysis.rst:718
msgid "String literal concatenation"
msgstr "Объединение строковых литералов"

#: ../../reference/lexical_analysis.rst:720
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning "
"is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long "
"lines, or even to add comments to parts of strings, for example::"
msgstr ""
"Допускаются несколько смежных строковых или байтовых литералов (разделенных "
"пробелами), возможно, с использованием разных соглашений о кавычках, и их "
"значение такое же, как и их объединение. Таким образом, ``\"hello\" "
"'world'`` эквивалентен ``\"helloworld\"``. Эту функцию можно использовать "
"для уменьшения количества необходимых обратных косых черт, для удобного "
"разделения длинных строк на длинные строки или даже для добавления "
"комментариев к частям строк, например:"

#: ../../reference/lexical_analysis.rst:727
msgid ""
"re.compile(\"[A-Za-z_]\"       # letter or underscore\n"
"           \"[A-Za-z0-9_]*\"   # letter, digit or underscore\n"
"          )"
msgstr ""
"re.compile(\"[A-Za-z_]\"       # letter or underscore\n"
"           \"[A-Za-z0-9_]*\"   # letter, digit or underscore\n"
"          )"

#: ../../reference/lexical_analysis.rst:731
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""
"Обратите внимание, что эта функция определена на синтаксическом уровне, но "
"реализуется во время компиляции. Оператор «+» необходимо использовать для "
"объединения строковых выражений во время выполнения. Также обратите "
"внимание, что при конкатенации литералов могут использоваться разные стили "
"кавычек для каждого компонента (даже смешивание необработанных строк и строк "
"в тройных кавычках), а форматированные строковые литералы могут быть "
"объединены с простыми строковыми литералами."

#: ../../reference/lexical_analysis.rst:754
msgid "f-strings"
msgstr "f-strings"

#: ../../reference/lexical_analysis.rst:758
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""
":dfn:`форматированный строковый литерал` или :dfn:`f-string` — это строковый "
"литерал с префиксом ``'f'`` или ``'F'``. Эти строки могут содержать поля "
"замены, которые представляют собой выражения, разделенные фигурными скобками "
"``{}``. В то время как другие строковые литералы всегда имеют постоянное "
"значение, форматированные строки на самом деле являются выражениями, "
"вычисляемыми во время выполнения."

#: ../../reference/lexical_analysis.rst:764
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""
"Escape-последовательности декодируются так же, как и обычные строковые "
"литералы (кроме случаев, когда литерал также помечен как необработанная "
"строка). После декодирования грамматика содержимого строки будет следующей:"

#: ../../reference/lexical_analysis.rst:778
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""
"Части строки за пределами фигурных скобок обрабатываются буквально, за "
"исключением того, что любые двойные фигурные скобки ``'{{'`` или ``'}}'`` "
"заменяются соответствующей одинарной фигурной скобкой. Одиночная открывающая "
"фигурная скобка ``'{'`` отмечает поле замены, которое начинается с выражения "
"Python. Чтобы отобразить как текст выражения, так и его значение после "
"вычисления (полезно при отладке), после выражения можно добавить знак "
"равенства ``'='``. После этого может следовать поле преобразования, "
"представляемое восклицательным знаком ``'!'``. Также может быть добавлен "
"спецификатор формата, обозначаемый двоеточием ``':'``. Поле замены "
"заканчивается закрывающей фигурной скобкой ``'}'``."

#: ../../reference/lexical_analysis.rst:788
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""
"Выражения в литералах форматированной строки обрабатываются как обычные "
"выражения Python, заключенные в круглые скобки, за некоторыми исключениями. "
"Пустое выражение не допускается, и выражения :keyword:`lambda` и "
"присваивания ``:=`` должны быть заключены в явные круглые скобки. Каждое "
"выражение оценивается в контексте, где появляется форматированный строковый "
"литерал, в порядке слева направо. Выражения замены могут содержать символы "
"новой строки как в одинарных, так и в тройных кавычках, а также могут "
"содержать комментарии. Все, что идет после ``#`` внутри поля замены, "
"является комментарием (даже закрывающими скобками и кавычками). В этом "
"случае поля замены необходимо закрыть в другой строке."

#: ../../reference/lexical_analysis.rst:799
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"

#: ../../reference/lexical_analysis.rst:805
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""
"До Python 3.7 выражение :keyword:`await` и выражения, содержащие "
"предложение :keyword:`async for`, были недопустимы в выражениях в "
"форматированных строковых литералах из-за проблем с реализацией."

#: ../../reference/lexical_analysis.rst:810
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""
"До Python 3.12 комментарии не допускались внутри полей замены f-строки."

#: ../../reference/lexical_analysis.rst:814
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""
"Если указан знак равенства ``'='``, выходные данные будут содержать текст "
"выражения, ``'='`` и вычисленное значение. Пробелы после открывающей скобки "
"``'{'``, внутри выражения и после ``'='`` все сохраняются в выводе. По "
"умолчанию ``'='`` приводит к предоставлению :func:`repr` выражения, если не "
"указан формат. Когда указан формат, по умолчанию используется :func:`str` "
"выражения, если не объявлено преобразование ``'!r'``."

#: ../../reference/lexical_analysis.rst:822
msgid "The equal sign ``'='``."
msgstr "Знак равенства ``'='``."

#: ../../reference/lexical_analysis.rst:825
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""
"Если указано преобразование, результат вычисления выражения преобразуется "
"перед форматированием. Преобразование ``'!s'`` вызывает :func:`str` для "
"результата, ``'!r'`` вызывает :func:`repr`, а ``'!a'`` вызывает :func:` "
"ascii`."

#: ../../reference/lexical_analysis.rst:829
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""
"Затем результат форматируется с использованием протокола :func:`format`. "
"Спецификатор формата передается методу :meth:`~object.__format__` выражения "
"или результата преобразования. Пустая строка передается, если спецификатор "
"формата опущен. Отформатированный результат затем включается в окончательное "
"значение всей строки."

#: ../../reference/lexical_analysis.rst:835
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""
"Спецификаторы формата верхнего уровня могут включать вложенные поля замены. "
"Эти вложенные поля могут включать в себя собственные поля преобразования и :"
"ref:`описатели формата <formatspec>`, но не могут включать более глубоко "
"вложенные поля замены. Мини-язык спецификатора формата <formatspec>` "
"аналогичен тому, который используется в методе :meth:`str.format`."

#: ../../reference/lexical_analysis.rst:841
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr ""
"Отформатированные строковые литералы можно объединять, но поля замены нельзя "
"разделить на литералы."

#: ../../reference/lexical_analysis.rst:844
msgid "Some examples of formatted string literals::"
msgstr "Некоторые примеры форматированных строковых литералов:"

#: ../../reference/lexical_analysis.rst:846
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"

#: ../../reference/lexical_analysis.rst:876
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""
"Разрешено повторное использование внешнего типа цитирования f-строки внутри "
"поля замены:"

#: ../../reference/lexical_analysis.rst:879
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"

#: ../../reference/lexical_analysis.rst:883
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""
"До Python 3.12 повторное использование одного и того же типа кавычек внешней "
"f-строки внутри поля замены было невозможно."

#: ../../reference/lexical_analysis.rst:887
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""
"Обратная косая черта также разрешена в полях замены и оценивается так же, "
"как и в любом другом контексте:"

#: ../../reference/lexical_analysis.rst:890
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"

#: ../../reference/lexical_analysis.rst:897
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""
"До Python 3.12 обратная косая черта не допускалась внутри поля замены f-"
"строки."

#: ../../reference/lexical_analysis.rst:901
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""
"Отформатированные строковые литералы нельзя использовать в качестве строк "
"документации, даже если они не содержат выражений."

#: ../../reference/lexical_analysis.rst:906
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"

#: ../../reference/lexical_analysis.rst:912
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""
"См. также :pep:`498` о предложении, в котором добавлены литералы "
"форматированной строки, и :meth:`str.format`, который использует "
"соответствующий механизм форматирования строк."

#: ../../reference/lexical_analysis.rst:919
msgid "Numeric literals"
msgstr "Числовые литералы"

#: ../../reference/lexical_analysis.rst:925
msgid ""
":data:`~token.NUMBER` tokens represent numeric literals, of which there are "
"three types: integers, floating-point numbers, and imaginary numbers."
msgstr ""

#: ../../reference/lexical_analysis.rst:933
msgid ""
"The numeric value of a numeric literal is the same as if it were passed as a "
"string to the :class:`int`, :class:`float` or :class:`complex` class "
"constructor, respectively. Note that not all valid inputs for those "
"constructors are also valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:938
msgid ""
"Numeric literals do not include a sign; a phrase like ``-1`` is actually an "
"expression composed of the unary operator '``-``' and the literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:952
msgid "Integer literals"
msgstr "Целочисленные литералы"

#: ../../reference/lexical_analysis.rst:954
msgid "Integer literals denote whole numbers. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:956
msgid ""
"7\n"
"3\n"
"2147483647"
msgstr ""

#: ../../reference/lexical_analysis.rst:960
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory::"
msgstr ""

#: ../../reference/lexical_analysis.rst:963
msgid "7922816251426433759354395033679228162514264337593543950336"
msgstr ""

#: ../../reference/lexical_analysis.rst:965
msgid ""
"Underscores can be used to group digits for enhanced readability, and are "
"ignored for determining the numeric value of the literal. For example, the "
"following literals are equivalent::"
msgstr ""

#: ../../reference/lexical_analysis.rst:969
msgid ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"
msgstr ""

#: ../../reference/lexical_analysis.rst:973
msgid ""
"Underscores can only occur between digits. For example, ``_123``, ``321_``, "
"and ``123__321`` are *not* valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:976
msgid ""
"Integers can be specified in binary (base 2), octal (base 8), or hexadecimal "
"(base 16) using the prefixes ``0b``, ``0o`` and ``0x``, respectively. "
"Hexadecimal digits 10 through 15 are represented by letters ``A``-``F``, "
"case-insensitive.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:981
msgid ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"
msgstr ""

#: ../../reference/lexical_analysis.rst:988
msgid ""
"An underscore can follow the base specifier. For example, ``0x_1f`` is a "
"valid literal, but ``0_x1f`` and ``0x__1f`` are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:992
msgid ""
"Leading zeros in a non-zero decimal number are not allowed. For example, "
"``0123`` is not a valid literal. This is for disambiguation with C-style "
"octal literals, which Python used before version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:997
msgid ""
"Formally, integer literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1014
#: ../../reference/lexical_analysis.rst:1078
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr "Символы подчеркивания теперь разрешены для группировки в литералах."

#: ../../reference/lexical_analysis.rst:1025
msgid "Floating-point literals"
msgstr "Литералы с плавающей запятой"

#: ../../reference/lexical_analysis.rst:1027
msgid ""
"Floating-point (float) literals, such as ``3.14`` or ``1.5``, denote :ref:"
"`approximations of real numbers <datamodel-float>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:1030
msgid ""
"They consist of *integer* and *fraction* parts, each composed of decimal "
"digits. The parts are separated by a decimal point, ``.``::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1033
msgid ""
"2.71828\n"
"4.0"
msgstr ""

#: ../../reference/lexical_analysis.rst:1036
msgid ""
"Unlike in integer literals, leading zeros are allowed in the numeric parts. "
"For example, ``077.010`` is legal, and denotes the same number as ``77.10``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1039
msgid ""
"As in integer literals, single underscores may occur between digits to help "
"readability::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1042
msgid ""
"96_485.332_123\n"
"3.14_15_93"
msgstr ""

#: ../../reference/lexical_analysis.rst:1045
msgid "Either of these parts, but not both, can be empty. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1047
msgid ""
"10.  # (equivalent to 10.0)\n"
".001  # (equivalent to 0.001)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1050
msgid ""
"Optionally, the integer and fraction may be followed by an *exponent*: the "
"letter ``e`` or ``E``, followed by an optional sign, ``+`` or ``-``, and a "
"number in the same format as the integer and fraction parts. The ``e`` or "
"``E`` represents \"times ten raised to the power of\"::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1055
msgid ""
"1.0e3  # (represents 1.0×10³, or 1000.0)\n"
"1.166e-5  # (represents 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (represents 6.02214076×10²³, or 602214076000000000000000.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1059
msgid ""
"In floats with only integer and exponent parts, the decimal point may be "
"omitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1062
msgid ""
"1e3  # (equivalent to 1.e3 and 1.0e3)\n"
"0e0  # (equivalent to 0.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1065
msgid ""
"Formally, floating-point literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1087
msgid "Imaginary literals"
msgstr "Воображаемые литералы"

#: ../../reference/lexical_analysis.rst:1089
msgid ""
"Python has :ref:`complex number <typesnumeric>` objects, but no complex "
"literals. Instead, *imaginary literals* denote complex numbers with a zero "
"real part."
msgstr ""

#: ../../reference/lexical_analysis.rst:1094
msgid ""
"For example, in math, the complex number 3+4.2\\ *i* is written as the real "
"number 3 added to the imaginary number 4.2\\ *i*. Python uses a similar "
"syntax, except the imaginary unit is written as ``j`` rather than *i*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1099
msgid "3+4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1101
msgid ""
"This is an expression composed of the :ref:`integer literal <integers>` "
"``3``, the :ref:`operator <operators>` '``+``', and the :ref:`imaginary "
"literal <imaginary>` ``4.2j``. Since these are three separate tokens, "
"whitespace is allowed between them::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1107
msgid "3 + 4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1109
msgid ""
"No whitespace is allowed *within* each token. In particular, the ``j`` "
"suffix, may not be separated from the number before it."
msgstr ""

#: ../../reference/lexical_analysis.rst:1113
msgid ""
"The number before the ``j`` has the same syntax as a floating-point literal. "
"Thus, the following are valid imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1116
msgid ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1124
msgid ""
"Unlike in a floating-point literal the decimal point can be omitted if the "
"imaginary number only has an integer part. The number is still evaluated as "
"a floating-point number, not an integer::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1128
msgid ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # equivalent to 1e+24j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1132
msgid ""
"The ``j`` suffix is case-insensitive. That means you can use ``J`` instead::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1135
msgid "3.14J   # equivalent to 3.14j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1137
msgid ""
"Formally, imaginary literals are described by the following lexical "
"definition:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1148
msgid "Operators"
msgstr "Операторы"

#: ../../reference/lexical_analysis.rst:1152
msgid "The following tokens are operators:"
msgstr "The following tokens are operators:"

#: ../../reference/lexical_analysis.rst:1154
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="

#: ../../reference/lexical_analysis.rst:1165
msgid "Delimiters"
msgstr "Delimiters"

#: ../../reference/lexical_analysis.rst:1169
msgid "The following tokens serve as delimiters in the grammar:"
msgstr "Следующие токены служат разделителями в грамматике:"

#: ../../reference/lexical_analysis.rst:1171
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="

#: ../../reference/lexical_analysis.rst:1178
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically "
"as delimiters, but also perform an operation."
msgstr ""
"Точка также может встречаться в литералах с плавающей запятой и воображаемых "
"литералах. Последовательность трех периодов имеет особое значение как "
"литерал с многоточием. Вторая половина списка — расширенные операторы "
"присваивания — лексически служат разделителями, но также выполняют операции."

#: ../../reference/lexical_analysis.rst:1183
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""
"Следующие печатные символы ASCII имеют особое значение как часть других "
"токенов или иным образом важны для лексического анализатора:"

#: ../../reference/lexical_analysis.rst:1186
msgid "'       \"       #       \\"
msgstr "'       \"       #       \\"

#: ../../reference/lexical_analysis.rst:1190
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""
"Следующие печатные символы ASCII не используются в Python. Их появление вне "
"строковых литералов и комментариев является безусловной ошибкой:"

#: ../../reference/lexical_analysis.rst:1193
msgid "$       ?       `"
msgstr "$       ?       `"

#: ../../reference/lexical_analysis.rst:1199
msgid "Footnotes"
msgstr "Сноски"

#: ../../reference/lexical_analysis.rst:1200
msgid "https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr "лексический анализ"

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr "парсер"

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr "token (жетон)"

#: ../../reference/lexical_analysis.rst:26
msgid "line structure"
msgstr "линейная структура"

#: ../../reference/lexical_analysis.rst:36
msgid "logical line"
msgstr "строка логики"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
#: ../../reference/lexical_analysis.rst:573
msgid "physical line"
msgstr "физическая линия"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
msgid "line joining"
msgstr "соединение линий"

#: ../../reference/lexical_analysis.rst:36
msgid "NEWLINE token"
msgstr "NEWLINE token"

#: ../../reference/lexical_analysis.rst:68
msgid "comment"
msgstr "комментарий"

#: ../../reference/lexical_analysis.rst:68
msgid "hash character"
msgstr "хэш-символ"

#: ../../reference/lexical_analysis.rst:68
#: ../../reference/lexical_analysis.rst:82
msgid "# (hash)"
msgstr "# (hash)"

#: ../../reference/lexical_analysis.rst:82
msgid "source character set"
msgstr "исходный набор символов"

#: ../../reference/lexical_analysis.rst:82
msgid "encoding declarations (source file)"
msgstr "объявления кодирования (исходный файл)"

#: ../../reference/lexical_analysis.rst:82
msgid "source encoding declaration"
msgstr "объявление исходной кодировки"

#: ../../reference/lexical_analysis.rst:115
msgid "line continuation"
msgstr "продолжение строки"

#: ../../reference/lexical_analysis.rst:115
msgid "backslash character"
msgstr "символ обратной косой черты"

#: ../../reference/lexical_analysis.rst:160
msgid "blank line"
msgstr "пустая строка"

#: ../../reference/lexical_analysis.rst:176
msgid "indentation"
msgstr "отступ"

#: ../../reference/lexical_analysis.rst:176
msgid "leading whitespace"
msgstr "ведущие пробелы"

#: ../../reference/lexical_analysis.rst:176
msgid "space"
msgstr "space"

#: ../../reference/lexical_analysis.rst:176
msgid "tab"
msgstr "tab"

#: ../../reference/lexical_analysis.rst:176
msgid "grouping"
msgstr "группировка"

#: ../../reference/lexical_analysis.rst:176
msgid "statement grouping"
msgstr "группировка операторов"

#: ../../reference/lexical_analysis.rst:204
msgid "INDENT token"
msgstr "токен отступа"

#: ../../reference/lexical_analysis.rst:204
msgid "DEDENT token"
msgstr "DEDENT token"

#: ../../reference/lexical_analysis.rst:294
msgid "identifier"
msgstr "идентификатор"

#: ../../reference/lexical_analysis.rst:294
msgid "name"
msgstr "имя"

#: ../../reference/lexical_analysis.rst:373
#: ../../reference/lexical_analysis.rst:397
msgid "keyword"
msgstr "keyword"

#: ../../reference/lexical_analysis.rst:373
msgid "reserved word"
msgstr "зарезервированное слово"

#: ../../reference/lexical_analysis.rst:397
msgid "soft keyword"
msgstr "мягкое ключевое слово"

#: ../../reference/lexical_analysis.rst:417
msgid "_, identifiers"
msgstr "_, identifiers"

#: ../../reference/lexical_analysis.rst:417
msgid "__, identifiers"
msgstr "__, identifiers"

#: ../../reference/lexical_analysis.rst:473
msgid "literal"
msgstr "literal"

#: ../../reference/lexical_analysis.rst:473
msgid "constant"
msgstr "constant"

#: ../../reference/lexical_analysis.rst:478
#: ../../reference/lexical_analysis.rst:520
msgid "string literal"
msgstr "строковый литерал"

#: ../../reference/lexical_analysis.rst:478
#: ../../reference/lexical_analysis.rst:533
msgid "bytes literal"
msgstr "байтовый литерал"

#: ../../reference/lexical_analysis.rst:478
msgid "ASCII"
msgstr "ASCII"

#: ../../reference/lexical_analysis.rst:478
msgid "' (single quote)"
msgstr "' (одинарная кавычка)"

#: ../../reference/lexical_analysis.rst:478
msgid "\" (double quote)"
msgstr "\"(двойная кавычка)"

#: ../../reference/lexical_analysis.rst:478
msgid "u'"
msgstr "u'"

#: ../../reference/lexical_analysis.rst:478
msgid "u\""
msgstr "u\""

#: ../../reference/lexical_analysis.rst:520
msgid "triple-quoted string"
msgstr "строка в тройных кавычках"

#: ../../reference/lexical_analysis.rst:520
msgid "Unicode Consortium"
msgstr "Консорциум Юникод"

#: ../../reference/lexical_analysis.rst:520
msgid "raw string"
msgstr "необработанная строка"

#: ../../reference/lexical_analysis.rst:520
msgid "\"\"\""
msgstr "\"\"\""

#: ../../reference/lexical_analysis.rst:520
msgid "'''"
msgstr "'''"

#: ../../reference/lexical_analysis.rst:533
msgid "b'"
msgstr "b'"

#: ../../reference/lexical_analysis.rst:533
msgid "b\""
msgstr "b\""

#: ../../reference/lexical_analysis.rst:542
msgid "r'"
msgstr "r'"

#: ../../reference/lexical_analysis.rst:542
msgid "raw string literal"
msgstr "необработанный строковый литерал"

#: ../../reference/lexical_analysis.rst:542
msgid "r\""
msgstr "r\""

#: ../../reference/lexical_analysis.rst:560
msgid "f'"
msgstr "f'"

#: ../../reference/lexical_analysis.rst:560
#: ../../reference/lexical_analysis.rst:738
msgid "formatted string literal"
msgstr "форматированный строковый литерал"

#: ../../reference/lexical_analysis.rst:560
msgid "f\""
msgstr "f\""

#: ../../reference/lexical_analysis.rst:573
msgid "escape sequence"
msgstr "escape-последовательность"

#: ../../reference/lexical_analysis.rst:573
msgid "Standard C"
msgstr "Стандарт С"

#: ../../reference/lexical_analysis.rst:573
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:573
msgid "\\ (backslash)"
msgstr "\\ (обратная косая черта)"

#: ../../reference/lexical_analysis.rst:573
msgid "\\\\"
msgstr "\\\\"

#: ../../reference/lexical_analysis.rst:573
msgid "\\a"
msgstr "\\a"

#: ../../reference/lexical_analysis.rst:573
msgid "\\b"
msgstr "\\b"

#: ../../reference/lexical_analysis.rst:573
msgid "\\f"
msgstr "\\f"

#: ../../reference/lexical_analysis.rst:573
msgid "\\n"
msgstr "\\n"

#: ../../reference/lexical_analysis.rst:573
msgid "\\r"
msgstr "\\r"

#: ../../reference/lexical_analysis.rst:573
msgid "\\t"
msgstr "\\t"

#: ../../reference/lexical_analysis.rst:573
msgid "\\v"
msgstr "\\v"

#: ../../reference/lexical_analysis.rst:573
msgid "\\x"
msgstr "\\x"

#: ../../reference/lexical_analysis.rst:573
msgid "\\u"
msgstr "\\u"

#: ../../reference/lexical_analysis.rst:573
msgid "\\U"
msgstr "\\U"

#: ../../reference/lexical_analysis.rst:689
msgid "unrecognized escape sequence"
msgstr "нераспознанная escape-последовательность"

#: ../../reference/lexical_analysis.rst:738
msgid "interpolated string literal"
msgstr "интерполированный строковый литерал"

#: ../../reference/lexical_analysis.rst:738
msgid "string"
msgstr "строка"

#: ../../reference/lexical_analysis.rst:738
msgid "formatted literal"
msgstr "форматированный литерал"

#: ../../reference/lexical_analysis.rst:738
msgid "interpolated literal"
msgstr "интерполированный литерал"

#: ../../reference/lexical_analysis.rst:738
msgid "f-string"
msgstr "f-строка"

#: ../../reference/lexical_analysis.rst:738
msgid "fstring"
msgstr "f-строка"

#: ../../reference/lexical_analysis.rst:738
msgid "{} (curly brackets)"
msgstr "{} (фигурные скобки)"

#: ../../reference/lexical_analysis.rst:738
msgid "in formatted string literal"
msgstr "в форматированном строковом литерале"

#: ../../reference/lexical_analysis.rst:738
msgid "! (exclamation)"
msgstr "! (восклицание)"

#: ../../reference/lexical_analysis.rst:738
msgid ": (colon)"
msgstr ": (двоеточие)"

#: ../../reference/lexical_analysis.rst:738
msgid "= (equals)"
msgstr "= (равно)"

#: ../../reference/lexical_analysis.rst:738
msgid "for help in debugging using string literals"
msgstr "за помощь в отладке с использованием строковых литералов"

#: ../../reference/lexical_analysis.rst:921
msgid "number"
msgstr "число"

#: ../../reference/lexical_analysis.rst:921
msgid "numeric literal"
msgstr "числовой литерал"

#: ../../reference/lexical_analysis.rst:921
#: ../../reference/lexical_analysis.rst:943
msgid "integer literal"
msgstr "целочисленный литерал"

#: ../../reference/lexical_analysis.rst:921
msgid "floating-point literal"
msgstr "литерал с плавающей запятой"

#: ../../reference/lexical_analysis.rst:921
msgid "hexadecimal literal"
msgstr "шестнадцатеричный литерал"

#: ../../reference/lexical_analysis.rst:921
msgid "octal literal"
msgstr "восьмеричный литерал"

#: ../../reference/lexical_analysis.rst:921
msgid "binary literal"
msgstr "двоичный литерал"

#: ../../reference/lexical_analysis.rst:921
msgid "decimal literal"
msgstr "десятичный литерал"

#: ../../reference/lexical_analysis.rst:921
msgid "imaginary literal"
msgstr "воображаемый literal"

#: ../../reference/lexical_analysis.rst:921
msgid "complex literal"
msgstr "сложный литерал"

#: ../../reference/lexical_analysis.rst:943
msgid "0b"
msgstr "0b"

#: ../../reference/lexical_analysis.rst:943
msgid "0o"
msgstr "0o"

#: ../../reference/lexical_analysis.rst:943
msgid "0x"
msgstr "0x"

#: ../../reference/lexical_analysis.rst:943
#: ../../reference/lexical_analysis.rst:1018
msgid "_ (underscore)"
msgstr "_ (подчеркивание)"

#: ../../reference/lexical_analysis.rst:943
#: ../../reference/lexical_analysis.rst:1018
#: ../../reference/lexical_analysis.rst:1082
msgid "in numeric literal"
msgstr "в числовом литерале"

#: ../../reference/lexical_analysis.rst:1018
msgid ". (dot)"
msgstr ". (точка)"

#: ../../reference/lexical_analysis.rst:1018
msgid "e"
msgstr "e"

#: ../../reference/lexical_analysis.rst:1082
msgid "j"
msgstr "j"

#: ../../reference/lexical_analysis.rst:1150
msgid "operators"
msgstr "операторы"

#: ../../reference/lexical_analysis.rst:1167
msgid "delimiters"
msgstr "разделители"
