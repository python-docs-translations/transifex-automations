# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/importlib.resources.rst:2
msgid ""
":mod:`!importlib.resources` -- Package resource reading, opening and access"
msgstr ""
":mod:`!importlib.resources` -- Чтение, открытие и доступ к ресурсам пакета"

#: ../../library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/__init__.py`"
msgstr "**исходный код:** :source:`Lib/importlib/resources/__init__.py`"

#: ../../library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*."
msgstr ""
"Этот модуль использует систему импорта Python для предоставления доступа к "
"*ресурсам* внутри *пакетов*."

#: ../../library/importlib.resources.rst:16
msgid ""
"\"Resources\" are file-like resources associated with a module or package in "
"Python. The resources may be contained directly in a package, within a "
"subdirectory contained in that package, or adjacent to modules outside a "
"package. Resources may be text or binary. As a result, Python module sources "
"(.py) of a package and compilation artifacts (pycache) are technically de-"
"facto resources of that package. In practice, however, resources are "
"primarily those non-Python artifacts exposed specifically by the package "
"author."
msgstr ""
"«Ресурсы» — это файловые ресурсы, связанные с модулем или пакетом в Python. "
"Ресурсы могут содержаться непосредственно в пакете, в подкаталоге, "
"содержащемся в этом пакете, или рядом с модулями вне пакета. Ресурсы могут "
"быть текстовыми или двоичными. В результате исходные коды модулей Python "
"(.py) пакета и артефакты компиляции (pycache) технически де-факто являются "
"ресурсами этого пакета. Однако на практике ресурсы — это в первую очередь "
"артефакты, не относящиеся к Python, специально предоставленные автором "
"пакета."

#: ../../library/importlib.resources.rst:25
msgid "Resources can be opened or read in either binary or text mode."
msgstr ""
"Ресурсы можно открывать или читать как в двоичном, так и в текстовом режиме."

#: ../../library/importlib.resources.rst:27
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on the "
"file system: for example, a package and its resources can be imported from a "
"zip file using :py:mod:`zipimport`."
msgstr ""
"Ресурсы примерно аналогичны файлам внутри каталогов, хотя важно помнить, что "
"это всего лишь метафора. Ресурсы и пакеты **не** должны существовать в виде "
"физических файлов и каталогов в файловой системе: например, пакет и его "
"ресурсы можно импортировать из zip-файла с помощью :py:mod:`zipimport`."

#: ../../library/importlib.resources.rst:35
msgid ""
"This module provides functionality similar to `pkg_resources <https://"
"setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic Resource "
"Access <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  This "
"makes reading resources included in packages easier, with more stable and "
"consistent semantics."
msgstr ""
"Этот модуль предоставляет функциональность, аналогичную `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic "
"Resource Access <https://setuptools.readthedocs.io/en/latest/pkg_resources. "
"html#basic-resource-access>`_ без снижения производительности этого пакета. "
"Это упрощает чтение ресурсов, включенных в пакеты, с более стабильной и "
"последовательной семантикой."

#: ../../library/importlib.resources.rst:43
msgid ""
"The standalone backport of this module provides more information on `using "
"importlib.resources <https://importlib-resources.readthedocs.io/en/latest/"
"using.html>`_ and `migrating from pkg_resources to importlib.resources "
"<https://importlib-resources.readthedocs.io/en/latest/migration.html>`_."
msgstr ""
"Автономный резервный порт этого модуля предоставляет дополнительную "
"информацию об использовании importlib.resources <https://importlib-"
"resources.readthedocs.io/en/latest/using.html>`_ и `_ переходе с "
"pkg_resources на importlib.resources <https: //importlib-"
"resources.readthedocs.io/en/latest/migration.html>`_."

#: ../../library/importlib.resources.rst:49
msgid ""
":class:`Loaders <importlib.abc.Loader>` that wish to support resource "
"reading should implement a ``get_resource_reader(fullname)`` method as "
"specified by :class:`importlib.resources.abc.ResourceReader`."
msgstr ""
":class:`Загрузчики <importlib.abc.Loader>`, которые хотят поддерживать "
"чтение ресурсов, должны реализовать метод ``get_resource_reader(fullname)``, "
"как указано в :class:`importlib.resources.abc.ResourceReader`."

#: ../../library/importlib.resources.rst:55
msgid ""
"Represents an anchor for resources, either a :class:`module object "
"<types.ModuleType>` or a module name as a string. Defined as ``Union[str, "
"ModuleType]``."
msgstr ""
"Представляет привязку для ресурсов: объект модуля <types.ModuleType> или имя "
"модуля в виде строки. Определяется как ``Union[str, ModuleType]``."

#: ../../library/importlib.resources.rst:61
msgid ""
"Returns a :class:`~importlib.resources.abc.Traversable` object representing "
"the resource container (think directory) and its resources (think files). A "
"Traversable may contain other containers (think subdirectories)."
msgstr ""
"Возвращает объект :class:`~importlib.resources.abc.Traversable`, "
"представляющий контейнер ресурсов (каталог think) и его ресурсы (файлы "
"think). Traversable может содержать другие контейнеры (например, "
"подкаталоги)."

#: ../../library/importlib.resources.rst:66
msgid ""
"*anchor* is an optional :class:`Anchor`. If the anchor is a package, "
"resources are resolved from that package. If a module, resources are "
"resolved adjacent to that module (in the same package or the package root). "
"If the anchor is omitted, the caller's module is used."
msgstr ""
"*anchor* — необязательный :class:`Anchor`. Если привязкой является пакет, "
"ресурсы разрешаются из этого пакета. Если это модуль, ресурсы разрешаются "
"рядом с этим модулем (в том же пакете или в корне пакета). Если привязка "
"опущена, используется модуль вызывающего объекта."

#: ../../library/importlib.resources.rst:74
msgid ""
"*package* parameter was renamed to *anchor*. *anchor* can now be a non-"
"package module and if omitted will default to the caller's module. *package* "
"is still accepted for compatibility but will raise "
"a :exc:`DeprecationWarning`. Consider passing the anchor positionally or "
"using ``importlib_resources >= 5.10`` for a compatible interface on older "
"Pythons."
msgstr ""
"Параметр *package* переименован в *anchor*. *anchor* теперь может быть "
"модулем, не относящимся к пакету, и, если он опущен, по умолчанию будет "
"использоваться модуль вызывающего объекта. *package* по-прежнему принимается "
"для совместимости, но вызывает предупреждение :exc:`DeprecationWarning`. "
"Рассмотрите возможность передачи привязки позиционно или использования "
"importlib_resources >= 5.10 для совместимого интерфейса на старых Python."

#: ../../library/importlib.resources.rst:84
msgid ""
"Given a :class:`~importlib.resources.abc.Traversable` object representing a "
"file or directory, typically from :func:`importlib.resources.files`, return "
"a context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""
"Учитывая объект :class:`~importlib.resources.abc.Traversable`, "
"представляющий файл или каталог, обычно "
"из :func:`importlib.resources.files`, возвращает менеджер контекста для "
"использования в операторе :keyword:`with` . Менеджер контекста предоставляет "
"объект :class:`pathlib.Path`."

#: ../../library/importlib.resources.rst:89
msgid ""
"Exiting the context manager cleans up any temporary file or directory "
"created when the resource was extracted from e.g. a zip file."
msgstr ""
"Выход из контекстного менеджера очищает любой временный файл или каталог, "
"созданный при извлечении ресурса, например, из zip-файла."

#: ../../library/importlib.resources.rst:92
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file or directory on the file system is required."
msgstr ""
"Используйте as_file, когда методы Traversable («read_text» и т. д.) "
"недостаточны и требуется реальный файл или каталог в файловой системе."

#: ../../library/importlib.resources.rst:98
msgid "Added support for *traversable* representing a directory."
msgstr "Добавлена ​​поддержка *traversable*, представляющего каталог."

#: ../../library/importlib.resources.rst:105
msgid "Functional API"
msgstr "функциональный API"

#: ../../library/importlib.resources.rst:107
msgid ""
"A set of simplified, backwards-compatible helpers is available. These allow "
"common operations in a single function call."
msgstr ""
"Доступен набор упрощенных обратно совместимых помощников. Они позволяют "
"выполнять общие операции за один вызов функции."

#: ../../library/importlib.resources.rst:110
msgid "For all the following functions:"
msgstr "Для всех следующих функций:"

#: ../../library/importlib.resources.rst:112
msgid ""
"*anchor* is an :class:`~importlib.resources.Anchor`, as "
"in :func:`~importlib.resources.files`. Unlike in ``files``, it may not be "
"omitted."
msgstr ""
"*anchor* — это :class:`~importlib.resources.Anchor`, "
"например :func:`~importlib.resources.files`. В отличие от ``files``, его "
"нельзя опустить."

#: ../../library/importlib.resources.rst:116
msgid ""
"*path_names* are components of a resource's path name, relative to the "
"anchor. For example, to get the text of resource named ``info.txt``, use::"
msgstr ""
"*path_names* — это компоненты пути к ресурсу относительно привязки. "
"Например, чтобы получить текст ресурса с именем ``info.txt``, используйте::"

#: ../../library/importlib.resources.rst:120
msgid "importlib.resources.read_text(my_module, \"info.txt\")"
msgstr "importlib.resources.read_text(my_module, \"info.txt\")"

#: ../../library/importlib.resources.rst:122
msgid ""
"Like :meth:`Traversable.joinpath <importlib.resources.abc.Traversable>`, The "
"individual components should use forward slashes (``/``) as path separators. "
"For example, the following are equivalent::"
msgstr ""
"Подобно :meth:`Traversable.joinpath <importlib.resources.abc.Traversable>`, "
"отдельные компоненты должны использовать косую черту (``/``) в качестве "
"разделителей путей. Например, следующие эквивалентны:"

#: ../../library/importlib.resources.rst:127
msgid ""
"importlib.resources.read_binary(my_module, \"pics/painting.png\")\n"
"importlib.resources.read_binary(my_module, \"pics\", \"painting.png\")"
msgstr ""
"importlib.resources.read_binary(my_module, \"pics/painting.png\")\n"
"importlib.resources.read_binary(my_module, \"pics\", \"painting.png\")"

#: ../../library/importlib.resources.rst:130
msgid ""
"For backward compatibility reasons, functions that read text require an "
"explicit *encoding* argument if multiple *path_names* are given. For "
"example, to get the text of ``info/chapter1.txt``, use::"
msgstr ""
"По соображениям обратной совместимости функции, читающие текст, требуют "
"явного аргумента *encoding*, если задано несколько *path_names*. Например, "
"чтобы получить текст ``info/chapter1.txt``, используйте::"

#: ../../library/importlib.resources.rst:134
msgid ""
"importlib.resources.read_text(my_module, \"info\", \"chapter1.txt\",\n"
"                              encoding='utf-8')"
msgstr ""
"importlib.resources.read_text(my_module, \"info\", \"chapter1.txt\",\n"
"                              encoding='utf-8')"

#: ../../library/importlib.resources.rst:139
msgid "Open the named resource for binary reading."
msgstr "Откройте указанный ресурс для двоичного чтения."

#: ../../library/importlib.resources.rst:141
#: ../../library/importlib.resources.rst:184
#: ../../library/importlib.resources.rst:232
#: ../../library/importlib.resources.rst:249
#: ../../library/importlib.resources.rst:267
msgid ""
"See :ref:`the introduction <importlib_resources_functional>` for details on "
"*anchor* and *path_names*."
msgstr ""
"См. :ref:`введение в <importlib_resources_functional>` для получения "
"подробной информации о *anchor* и *path_names*."

#: ../../library/importlib.resources.rst:144
msgid ""
"This function returns a :class:`~typing.BinaryIO` object, that is, a binary "
"stream open for reading."
msgstr ""
"Эта функция возвращает объект :class:`~typing.BinaryIO`, то есть бинарный "
"поток, открытый для чтения."

#: ../../library/importlib.resources.rst:147
#: ../../library/importlib.resources.rst:171
#: ../../library/importlib.resources.rst:187
#: ../../library/importlib.resources.rst:208
#: ../../library/importlib.resources.rst:235
#: ../../library/importlib.resources.rst:252
#: ../../library/importlib.resources.rst:270
msgid "This function is roughly equivalent to::"
msgstr "Эта функция примерно эквивалентна::"

#: ../../library/importlib.resources.rst:149
msgid "files(anchor).joinpath(*path_names).open('rb')"
msgstr "files(anchor).joinpath(*path_names).open('rb')"

#: ../../library/importlib.resources.rst:151
#: ../../library/importlib.resources.rst:191
#: ../../library/importlib.resources.rst:256
msgid "Multiple *path_names* are accepted."
msgstr "Multiple *path_names* are accepted."

#: ../../library/importlib.resources.rst:157
msgid ""
"Open the named resource for text reading. By default, the contents are read "
"as strict UTF-8."
msgstr ""
"Откройте названный ресурс для чтения текста. По умолчанию содержимое "
"читается как строгий UTF-8."

#: ../../library/importlib.resources.rst:160
#: ../../library/importlib.resources.rst:200
msgid ""
"See :ref:`the introduction <importlib_resources_functional>` for details on "
"*anchor* and *path_names*. *encoding* and *errors* have the same meaning as "
"in built-in :func:`open`."
msgstr ""
"См. :ref:`введение в <importlib_resources_functional>` для получения "
"подробной информации о *anchor* и *path_names*. *кодирование* и *ошибки* "
"имеют то же значение, что и встроенная функция :func:`open`."

#: ../../library/importlib.resources.rst:164
#: ../../library/importlib.resources.rst:204
msgid ""
"For backward compatibility reasons, the *encoding* argument must be given "
"explicitly if there are multiple *path_names*. This limitation is scheduled "
"to be removed in Python 3.15."
msgstr ""
"В целях обратной совместимости аргумент *encoding* должен быть указан явно, "
"если существует несколько *path_names*. Это ограничение планируется снять в "
"Python 3.15."

#: ../../library/importlib.resources.rst:168
msgid ""
"This function returns a :class:`~typing.TextIO` object, that is, a text "
"stream open for reading."
msgstr ""
"Эта функция возвращает объект :class:`~typing.TextIO`, то есть текстовый "
"поток, открытый для чтения."

#: ../../library/importlib.resources.rst:173
msgid "files(anchor).joinpath(*path_names).open('r', encoding=encoding)"
msgstr "files(anchor).joinpath(*path_names).open('r', encoding=encoding)"

#: ../../library/importlib.resources.rst:175
#: ../../library/importlib.resources.rst:212
#: ../../library/importlib.resources.rst:239
msgid ""
"Multiple *path_names* are accepted. *encoding* and *errors* must be given as "
"keyword arguments."
msgstr ""
"Допускаются несколько *path_names*. *кодирование* и *ошибки* должны быть "
"указаны в качестве аргументов ключевых слов."

#: ../../library/importlib.resources.rst:182
msgid "Read and return the contents of the named resource as :class:`bytes`."
msgstr ""
"Прочитайте и верните содержимое именованного ресурса в виде :class:`bytes`."

#: ../../library/importlib.resources.rst:189
msgid "files(anchor).joinpath(*path_names).read_bytes()"
msgstr "files(anchor).joinpath(*path_names).read_bytes()"

#: ../../library/importlib.resources.rst:197
msgid ""
"Read and return the contents of the named resource as :class:`str`. By "
"default, the contents are read as strict UTF-8."
msgstr ""
"Прочитайте и верните содержимое именованного ресурса как :class:`str`. По "
"умолчанию содержимое читается как строгий UTF-8."

#: ../../library/importlib.resources.rst:210
msgid "files(anchor).joinpath(*path_names).read_text(encoding=encoding)"
msgstr "files(anchor).joinpath(*path_names).read_text(encoding=encoding)"

#: ../../library/importlib.resources.rst:219
msgid ""
"Provides the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` statement. "
"The context manager provides a :class:`pathlib.Path` object."
msgstr ""
"Предоставляет путь к *ресурсу* как фактический путь к файловой системе. Эта "
"функция возвращает менеджер контекста для использования в "
"операторе :keyword:`with`. Менеджер контекста предоставляет "
"объект :class:`pathlib.Path`."

#: ../../library/importlib.resources.rst:223
msgid ""
"Exiting the context manager cleans up any temporary files created, e.g. when "
"the resource needs to be extracted from a zip file."
msgstr ""
"Выход из контекстного менеджера очищает все созданные временные файлы, "
"например, когда ресурс необходимо извлечь из zip-файла."

#: ../../library/importlib.resources.rst:226
msgid ""
"For example, the :meth:`~pathlib.Path.stat` method requires an actual file "
"system path; it can be used like this::"
msgstr ""
"Например, метод :meth:`~pathlib.Path.stat` требует фактического пути к "
"файловой системе; его можно использовать так::"

#: ../../library/importlib.resources.rst:229
msgid ""
"with importlib.resources.path(anchor, \"resource.txt\") as fspath:\n"
"    result = fspath.stat()"
msgstr ""
"with importlib.resources.path(anchor, \"resource.txt\") as fspath:\n"
"    result = fspath.stat()"

#: ../../library/importlib.resources.rst:237
msgid "as_file(files(anchor).joinpath(*path_names))"
msgstr "as_file(files(anchor).joinpath(*path_names))"

#: ../../library/importlib.resources.rst:246
msgid ""
"Return ``True`` if the named resource exists, otherwise ``False``. This "
"function does not consider directories to be resources."
msgstr ""
"Возвращайте True, если именованный ресурс существует, в противном случае — "
"False. Эта функция не считает каталоги ресурсами."

#: ../../library/importlib.resources.rst:254
msgid "files(anchor).joinpath(*path_names).is_file()"
msgstr "files(anchor).joinpath(*path_names).is_file()"

#: ../../library/importlib.resources.rst:262
msgid ""
"Return an iterable over the named items within the package or path. The "
"iterable returns names of resources (e.g. files) and non-resources (e.g. "
"directories) as :class:`str`. The iterable does not recurse into "
"subdirectories."
msgstr ""
"Возвращает итерацию по именованным элементам в пакете или пути. Итерируемый "
"объект возвращает имена ресурсов (например, файлов) и нересурсов (например, "
"каталогов) в виде :class:`str`. Итерация не рекурсивно переходит в "
"подкаталоги."

#: ../../library/importlib.resources.rst:272
msgid ""
"for resource in files(anchor).joinpath(*path_names).iterdir():\n"
"    yield resource.name"
msgstr ""
"for resource in files(anchor).joinpath(*path_names).iterdir():\n"
"    yield resource.name"

#: ../../library/importlib.resources.rst:275
msgid ""
"Prefer ``iterdir()`` as above, which offers more control over the results "
"and richer functionality."
msgstr ""
"Предпочитайте ``iterdir()``, как указано выше, который предлагает больший "
"контроль над результатами и более богатую функциональность."
