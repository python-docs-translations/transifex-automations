# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-18 14:52+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/importlib.resources.rst:2
msgid ""
":mod:`!importlib.resources` -- Package resource reading, opening and access"
msgstr ""
":mod:`!importlib.resources` -- Чтение, открытие и доступ к ресурсам пакета"

#: ../../library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/__init__.py`"
msgstr "**исходный код:** :source:`Lib/importlib/resources/__init__.py`"

#: ../../library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*."
msgstr ""
"Этот модуль использует систему импорта Python для предоставления доступа к "
"*ресурсам* внутри *пакетов*."

#: ../../library/importlib.resources.rst:16
msgid ""
"\"Resources\" are file-like resources associated with a module or package in "
"Python. The resources may be contained directly in a package, within a "
"subdirectory contained in that package, or adjacent to modules outside a "
"package. Resources may be text or binary. As a result, Python module sources "
"(.py) of a package and compilation artifacts (pycache) are technically de-"
"facto resources of that package. In practice, however, resources are "
"primarily those non-Python artifacts exposed specifically by the package "
"author."
msgstr ""
"«Ресурсы» — это файловые ресурсы, связанные с модулем или пакетом в Python. "
"Ресурсы могут содержаться непосредственно в пакете, в подкаталоге, "
"содержащемся в этом пакете, или рядом с модулями вне пакета. Ресурсы могут "
"быть текстовыми или двоичными. В результате исходные коды модулей Python (."
"py) пакета и артефакты компиляции (pycache) технически де-факто являются "
"ресурсами этого пакета. Однако на практике ресурсы — это в первую очередь "
"артефакты, не относящиеся к Python, специально предоставленные автором "
"пакета."

#: ../../library/importlib.resources.rst:25
msgid "Resources can be opened or read in either binary or text mode."
msgstr ""
"Ресурсы можно открывать или читать как в двоичном, так и в текстовом режиме."

#: ../../library/importlib.resources.rst:27
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on the "
"file system: for example, a package and its resources can be imported from a "
"zip file using :py:mod:`zipimport`."
msgstr ""
"Ресурсы примерно аналогичны файлам внутри каталогов, хотя важно помнить, что "
"это всего лишь метафора. Ресурсы и пакеты **не** должны существовать в виде "
"физических файлов и каталогов в файловой системе: например, пакет и его "
"ресурсы можно импортировать из zip-файла с помощью :py:mod:`zipimport`."

#: ../../library/importlib.resources.rst:35
msgid ""
"This module provides functionality similar to `pkg_resources <https://"
"setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic Resource "
"Access <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  This "
"makes reading resources included in packages easier, with more stable and "
"consistent semantics."
msgstr ""
"Этот модуль предоставляет функциональность, аналогичную `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic "
"Resource Access <https://setuptools.readthedocs.io/en/latest/pkg_resources. "
"html#basic-resource-access>`_ без снижения производительности этого пакета. "
"Это упрощает чтение ресурсов, включенных в пакеты, с более стабильной и "
"последовательной семантикой."

#: ../../library/importlib.resources.rst:43
msgid ""
"The standalone backport of this module provides more information on `using "
"importlib.resources <https://importlib-resources.readthedocs.io/en/latest/"
"using.html>`_ and `migrating from pkg_resources to importlib.resources "
"<https://importlib-resources.readthedocs.io/en/latest/migration.html>`_."
msgstr ""
"Автономный резервный порт этого модуля предоставляет дополнительную "
"информацию об использовании importlib.resources <https://importlib-resources."
"readthedocs.io/en/latest/using.html>`_ и `_ переходе с pkg_resources на "
"importlib.resources <https: //importlib-resources.readthedocs.io/en/latest/"
"migration.html>`_."

#: ../../library/importlib.resources.rst:49
msgid ""
":class:`Loaders <importlib.abc.Loader>` that wish to support resource "
"reading should implement a ``get_resource_reader(fullname)`` method as "
"specified by :class:`importlib.resources.abc.ResourceReader`."
msgstr ""
":class:`Загрузчики <importlib.abc.Loader>`, которые хотят поддерживать "
"чтение ресурсов, должны реализовать метод ``get_resource_reader(fullname)``, "
"как указано в :class:`importlib.resources.abc.ResourceReader`."

#: ../../library/importlib.resources.rst:55
msgid ""
"Represents an anchor for resources, either a :class:`module object <types."
"ModuleType>` or a module name as a string. Defined as ``Union[str, "
"ModuleType]``."
msgstr ""
"Представляет привязку для ресурсов: объект модуля <types.ModuleType> или имя "
"модуля в виде строки. Определяется как ``Union[str, ModuleType]``."

#: ../../library/importlib.resources.rst:61
msgid ""
"Returns a :class:`~importlib.resources.abc.Traversable` object representing "
"the resource container (think directory) and its resources (think files). A "
"Traversable may contain other containers (think subdirectories)."
msgstr ""
"Возвращает объект :class:`~importlib.resources.abc.Traversable`, "
"представляющий контейнер ресурсов (каталог think) и его ресурсы (файлы "
"think). Traversable может содержать другие контейнеры (например, "
"подкаталоги)."

#: ../../library/importlib.resources.rst:66
msgid ""
"*anchor* is an optional :class:`Anchor`. If the anchor is a package, "
"resources are resolved from that package. If a module, resources are "
"resolved adjacent to that module (in the same package or the package root). "
"If the anchor is omitted, the caller's module is used."
msgstr ""
"*anchor* — необязательный :class:`Anchor`. Если привязкой является пакет, "
"ресурсы разрешаются из этого пакета. Если это модуль, ресурсы разрешаются "
"рядом с этим модулем (в том же пакете или в корне пакета). Если привязка "
"опущена, используется модуль вызывающего объекта."

#: ../../library/importlib.resources.rst:74
msgid ""
"*package* parameter was renamed to *anchor*. *anchor* can now be a non-"
"package module and if omitted will default to the caller's module. *package* "
"is still accepted for compatibility but will raise a :exc:"
"`DeprecationWarning`. Consider passing the anchor positionally or using "
"``importlib_resources >= 5.10`` for a compatible interface on older Pythons."
msgstr ""
"Параметр *package* переименован в *anchor*. *anchor* теперь может быть "
"модулем, не относящимся к пакету, и, если он опущен, по умолчанию будет "
"использоваться модуль вызывающего объекта. *package* по-прежнему принимается "
"для совместимости, но вызывает предупреждение :exc:`DeprecationWarning`. "
"Рассмотрите возможность передачи привязки позиционно или использования "
"importlib_resources >= 5.10 для совместимого интерфейса на старых Python."

#: ../../library/importlib.resources.rst:84
msgid ""
"Given a :class:`~importlib.resources.abc.Traversable` object representing a "
"file or directory, typically from :func:`importlib.resources.files`, return "
"a context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""
"Учитывая объект :class:`~importlib.resources.abc.Traversable`, "
"представляющий файл или каталог, обычно из :func:`importlib.resources."
"files`, возвращает менеджер контекста для использования в операторе :keyword:"
"`with` . Менеджер контекста предоставляет объект :class:`pathlib.Path`."

#: ../../library/importlib.resources.rst:89
msgid ""
"Exiting the context manager cleans up any temporary file or directory "
"created when the resource was extracted from e.g. a zip file."
msgstr ""
"Выход из контекстного менеджера очищает любой временный файл или каталог, "
"созданный при извлечении ресурса, например, из zip-файла."

#: ../../library/importlib.resources.rst:92
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file or directory on the file system is required."
msgstr ""
"Используйте as_file, когда методы Traversable («read_text» и т. д.) "
"недостаточны и требуется реальный файл или каталог в файловой системе."

#: ../../library/importlib.resources.rst:98
msgid "Added support for *traversable* representing a directory."
msgstr "Добавлена ​​поддержка *traversable*, представляющего каталог."

#: ../../library/importlib.resources.rst:103
msgid "Functional API"
msgstr "функциональный API"

#: ../../library/importlib.resources.rst:105
msgid ""
"An older, previously deprecated set of functions is still available. The "
"main drawback of these functions is that they do not support directories: "
"they assume all resources are located directly within a *package*."
msgstr ""

#: ../../library/importlib.resources.rst:111
msgid ""
"Whenever a function accepts a ``Package`` argument, you can pass in either "
"a :class:`module object <types.ModuleType>` or a module name as a string.  "
"You can only pass module objects whose ``__spec__."
"submodule_search_locations`` is not ``None``."
msgstr ""
"Всякий раз, когда функция принимает аргумент «Пакет», вы можете передать "
"либо объект модуля <types.ModuleType>, либо имя модуля в виде строки. Вы "
"можете передавать только объекты модулей, для которых ``__spec__."
"submodule_search_locations`` не имеет значения ``None``."

#: ../../library/importlib.resources.rst:116
msgid "The ``Package`` type is defined as ``Union[str, ModuleType]``."
msgstr "Тип Package определяется как Union[str, ModuleType]``."

#: ../../library/importlib.resources.rst:121
msgid ""
"For *resource* arguments of the functions below, you can pass in the name of "
"a resource as a string or a :class:`path-like object <os.PathLike>`."
msgstr ""
"В качестве аргументов *resource* функций, указанных ниже, вы можете передать "
"имя ресурса в виде строки или :class:`path-подобного объекта <os.PathLike>`."

#: ../../library/importlib.resources.rst:125
msgid "The ``Resource`` type is defined as ``Union[str, os.PathLike]``."
msgstr "Тип Resource определяется как Union[str, os.PathLike]``."

#: ../../library/importlib.resources.rst:130
msgid "Open for binary reading the *resource* within *package*."
msgstr "Открыть для двоичного чтения *ресурса* внутри *пакета*."

#: ../../library/importlib.resources.rst:132
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  This function returns a ``typing."
"BinaryIO`` instance, a binary I/O stream open for reading."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``. *resource* — имя ресурса, который нужно открыть в "
"*package*; он не может содержать разделителей путей и не может иметь "
"подресурсов (т. е. он не может быть каталогом). Эта функция возвращает "
"экземпляр typing.BinaryIO, двоичный поток ввода-вывода, открытый для чтения."

#: ../../library/importlib.resources.rst:138
#: ../../library/importlib.resources.rst:157
#: ../../library/importlib.resources.rst:173
#: ../../library/importlib.resources.rst:190
#: ../../library/importlib.resources.rst:222
#: ../../library/importlib.resources.rst:236
msgid "This function is roughly equivalent to::"
msgstr "Эта функция примерно эквивалентна::"

#: ../../library/importlib.resources.rst:140
msgid "files(package).joinpath(resource).open('rb')"
msgstr "files(package).joinpath(resource).open('rb')"

#: ../../library/importlib.resources.rst:145
msgid ""
"Open for text reading the *resource* within *package*.  By default, the "
"resource is opened for reading as UTF-8."
msgstr ""
"Открыть для чтения текста *ресурса* внутри *пакета*. По умолчанию ресурс "
"открыт для чтения в формате UTF-8."

#: ../../library/importlib.resources.rst:148
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  *encoding* and *errors* have the "
"same meaning as with built-in :func:`open`."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``. *resource* — имя ресурса, который нужно открыть в "
"*package*; он не может содержать разделителей путей и не может иметь "
"подресурсов (т. е. он не может быть каталогом). *кодирование* и *ошибки* "
"имеют то же значение, что и встроенная функция :func:`open`."

#: ../../library/importlib.resources.rst:154
msgid ""
"This function returns a ``typing.TextIO`` instance, a text I/O stream open "
"for reading."
msgstr ""
"Эта функция возвращает экземпляр typing.TextIO, текстовый поток ввода-"
"вывода, открытый для чтения."

#: ../../library/importlib.resources.rst:159
msgid "files(package).joinpath(resource).open('r', encoding=encoding)"
msgstr "файлы (пакет).joinpath(ресурс).open('r',coding=encoding)"

#: ../../library/importlib.resources.rst:164
msgid ""
"Read and return the contents of the *resource* within *package* as ``bytes``."
msgstr ""
"Прочитайте и верните содержимое *ресурса* внутри *пакета* в виде ``байтов``."

#: ../../library/importlib.resources.rst:167
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  This function returns the "
"contents of the resource as :class:`bytes`."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``. *resource* — имя ресурса, который нужно открыть в "
"*package*; он не может содержать разделителей путей и не может иметь "
"подресурсов (т. е. он не может быть каталогом). Эта функция возвращает "
"содержимое ресурса в виде :class:`bytes`."

#: ../../library/importlib.resources.rst:175
msgid "files(package).joinpath(resource).read_bytes()"
msgstr "files(package).joinpath(resource).read_bytes()"

#: ../../library/importlib.resources.rst:180
msgid ""
"Read and return the contents of *resource* within *package* as a ``str``. By "
"default, the contents are read as strict UTF-8."
msgstr ""
"Прочитайте и верните содержимое *resource* внутри *package* как ``str``. По "
"умолчанию содержимое читается как строгий UTF-8."

#: ../../library/importlib.resources.rst:183
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  *encoding* and *errors* have the "
"same meaning as with built-in :func:`open`.  This function returns the "
"contents of the resource as :class:`str`."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``. *resource* — имя ресурса, который нужно открыть в "
"*package*; он не может содержать разделителей путей и не может иметь "
"подресурсов (т. е. он не может быть каталогом). *кодирование* и *ошибки* "
"имеют то же значение, что и встроенная функция :func:`open`. Эта функция "
"возвращает содержимое ресурса в виде :class:`str`."

#: ../../library/importlib.resources.rst:192
msgid "files(package).joinpath(resource).read_text(encoding=encoding)"
msgstr "files(package).joinpath(resource).read_text(encoding=encoding)"

#: ../../library/importlib.resources.rst:197
msgid ""
"Return the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` statement. "
"The context manager provides a :class:`pathlib.Path` object."
msgstr ""
"Верните путь к *ресурсу* как фактический путь к файловой системе. Эта "
"функция возвращает менеджер контекста для использования в операторе :keyword:"
"`with`. Менеджер контекста предоставляет объект :class:`pathlib.Path`."

#: ../../library/importlib.resources.rst:201
msgid ""
"Exiting the context manager cleans up any temporary file created when the "
"resource needs to be extracted from e.g. a zip file."
msgstr ""
"Выход из контекстного менеджера очищает любой временный файл, созданный, "
"когда ресурс необходимо извлечь, например, из zip-файла."

#: ../../library/importlib.resources.rst:204
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory)."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``. *resource* — имя ресурса, который нужно открыть в "
"*package*; он не может содержать разделителей путей и не может иметь "
"подресурсов (т. е. он не может быть каталогом)."

#: ../../library/importlib.resources.rst:209
msgid "This function is roughly equivalent to ::"
msgstr ""

#: ../../library/importlib.resources.rst:211
msgid "as_file(files(package).joinpath(resource))"
msgstr "as_file(files(package).joinpath(resource))"

#: ../../library/importlib.resources.rst:216
msgid ""
"Return ``True`` if there is a resource named *name* in the package, "
"otherwise ``False``. This function does not consider directories to be "
"resources. *package* is either a name or a module object which conforms to "
"the ``Package`` requirements."
msgstr ""
"Возвращайте ``True``, если в пакете есть ресурс с именем *name*, в противном "
"случае ``False``. Эта функция не считает каталоги ресурсами. *package* — это "
"либо имя, либо объект модуля, который соответствует требованиям ``Package``."

#: ../../library/importlib.resources.rst:224
msgid "files(package).joinpath(resource).is_file()"
msgstr "files(package).joinpath(resource).is_file()"

#: ../../library/importlib.resources.rst:229
msgid ""
"Return an iterable over the named items within the package.  The iterable "
"returns :class:`str` resources (e.g. files) and non-resources (e.g. "
"directories).  The iterable does not recurse into subdirectories."
msgstr ""
"Возвращает итерацию по именованным элементам внутри пакета. Итерируемый "
"объект возвращает ресурсы :class:`str` (например, файлы) и нересурсы "
"(например, каталоги). Итерация не рекурсивно переходит в подкаталоги."

#: ../../library/importlib.resources.rst:233
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements."
msgstr ""
"*package* — это либо имя, либо объект модуля, который соответствует "
"требованиям ``Package``."

#: ../../library/importlib.resources.rst:238
msgid ""
"(resource.name for resource in files(package).iterdir() if resource."
"is_file())"
msgstr ""
"(resource.name for resource in files(package).iterdir() if resource."
"is_file())"
