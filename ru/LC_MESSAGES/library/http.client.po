# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 16:02+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/http.client.rst:2
msgid ":mod:`http.client` --- HTTP protocol client"
msgstr ""

#: ../../library/http.client.rst:7
msgid "**Source code:** :source:`Lib/http/client.py`"
msgstr "**Исходный код:** :source:`Lib/http/client.py`"

#: ../../library/http.client.rst:17
msgid ""
"This module defines classes that implement the client side of the HTTP and "
"HTTPS protocols.  It is normally not used directly --- the module :mod:"
"`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""
"Этот модуль определяет классы, реализующие клиентскую часть протоколов HTTP "
"и HTTPS. Обычно он не используется напрямую — модуль :mod:`urllib.request` "
"использует его для обработки URL-адресов, использующих HTTP и HTTPS."

#: ../../library/http.client.rst:23
msgid ""
"The `Requests package <https://requests.readthedocs.io/en/master/>`_ is "
"recommended for a higher-level HTTP client interface."
msgstr ""
"`Пакет Requests <https://requests.readthedocs.io/en/master/>`_ рекомендуется "
"для клиентского интерфейса HTTP более высокого уровня."

#: ../../library/http.client.rst:28
msgid ""
"HTTPS support is only available if Python was compiled with SSL support "
"(through the :mod:`ssl` module)."
msgstr ""
"Поддержка HTTPS доступна только в том случае, если Python был скомпилирован "
"с поддержкой SSL (через модуль :mod:`ssl`)."

#: ../../library/http.client.rst:31
msgid "The module provides the following classes:"
msgstr "Модуль предоставляет следующие классы:"

#: ../../library/http.client.rst:37
msgid ""
"An :class:`HTTPConnection` instance represents one transaction with an HTTP "
"server.  It should be instantiated by passing it a host and optional port "
"number.  If no port number is passed, the port is extracted from the host "
"string if it has the form ``host:port``, else the default HTTP port (80) is "
"used.  If the optional *timeout* parameter is given, blocking operations "
"(like connection attempts) will timeout after that many seconds (if it is "
"not given, the global default timeout setting is used). The optional "
"*source_address* parameter may be a tuple of a (host, port) to use as the "
"source address the HTTP connection is made from. The optional *blocksize* "
"parameter sets the buffer size in bytes for sending a file-like message body."
msgstr ""
"Экземпляр :class:`HTTPConnection` представляет одну транзакцию с HTTP-"
"сервером. Его следует создать, передав ему хост и необязательный номер "
"порта. Если номер порта не передается, порт извлекается из строки хоста, "
"если он имеет форму «хост:порт», в противном случае используется порт HTTP "
"по умолчанию (80). Если указан необязательный параметр *timeout*, операции "
"блокировки (например, попытки подключения) истечет по истечении этого "
"количества секунд (если он не указан, используется глобальная настройка "
"таймаута по умолчанию). Необязательный параметр *source_address* может "
"представлять собой кортеж (хост, порт), который будет использоваться в "
"качестве исходного адреса, с которого осуществляется HTTP-соединение. "
"Необязательный параметр *blocksize* устанавливает размер буфера в байтах для "
"отправки тела сообщения в виде файла."

#: ../../library/http.client.rst:49
msgid ""
"For example, the following calls all create instances that connect to the "
"server at the same host and port::"
msgstr ""
"Например, следующий вызов вызывает все экземпляры create, подключающиеся к "
"серверу через один и тот же хост и порт:"

#: ../../library/http.client.rst:57
msgid "*source_address* was added."
msgstr "Был добавлен *адрес_источника*."

#: ../../library/http.client.rst:60
msgid ""
"The  *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"Параметр *strict* был удален. «Простые ответы» в стиле HTTP 0.9 больше не "
"поддерживаются."

#: ../../library/http.client.rst:64
msgid "*blocksize* parameter was added."
msgstr "Добавлен параметр *blocksize*."

#: ../../library/http.client.rst:73
msgid ""
"A subclass of :class:`HTTPConnection` that uses SSL for communication with "
"secure servers.  Default port is ``443``.  If *context* is specified, it "
"must be a :class:`ssl.SSLContext` instance describing the various SSL "
"options."
msgstr ""
"Подкласс :class:`HTTPConnection`, который использует SSL для связи с "
"защищенными серверами. Порт по умолчанию — ``443``. Если указан *context*, "
"это должен быть экземпляр :class:`ssl.SSLContext`, описывающий различные "
"параметры SSL."

#: ../../library/http.client.rst:78
msgid "Please read :ref:`ssl-security` for more information on best practices."
msgstr ""
"Пожалуйста, прочтите :ref:`ssl-security` для получения дополнительной "
"информации о лучших практиках."

#: ../../library/http.client.rst:80
msgid "*source_address*, *context* and *check_hostname* were added."
msgstr "Были добавлены *source_address*, *context* и *check_hostname*."

#: ../../library/http.client.rst:83
msgid ""
"This class now supports HTTPS virtual hosts if possible (that is, if :data:"
"`ssl.HAS_SNI` is true)."
msgstr ""

#: ../../library/http.client.rst:87
msgid ""
"The *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"Параметр *strict* был удален. «Простые ответы» в стиле HTTP 0.9 больше не "
"поддерживаются."

#: ../../library/http.client.rst:91
msgid ""
"This class now performs all the necessary certificate and hostname checks by "
"default. To revert to the previous, unverified, behavior :func:`ssl."
"_create_unverified_context` can be passed to the *context* parameter."
msgstr ""

#: ../../library/http.client.rst:97
msgid ""
"This class now enables TLS 1.3 :attr:`ssl.SSLContext.post_handshake_auth` "
"for the default *context* or when *cert_file* is passed with a custom "
"*context*."
msgstr ""
"Этот класс теперь включает TLS 1.3 :attr:`ssl.SSLContext."
"post_handshake_auth` для *контекста* по умолчанию или когда *cert_file* "
"передается с пользовательским *контекстом*."

#: ../../library/http.client.rst:102
msgid ""
"This class now sends an ALPN extension with protocol indicator ``http/1.1`` "
"when no *context* is given. Custom *context* should set ALPN protocols with :"
"meth:`~ssl.SSLContext.set_alpn_protocol`."
msgstr ""

#: ../../library/http.client.rst:109
msgid ""
"*key_file* and *cert_file* are deprecated in favor of *context*. Please use :"
"meth:`ssl.SSLContext.load_cert_chain` instead, or let :func:`ssl."
"create_default_context` select the system's trusted CA certificates for you."
msgstr ""

#: ../../library/http.client.rst:114
msgid ""
"The *check_hostname* parameter is also deprecated; the :attr:`ssl.SSLContext."
"check_hostname` attribute of *context* should be used instead."
msgstr ""

#: ../../library/http.client.rst:121
msgid ""
"Class whose instances are returned upon successful connection.  Not "
"instantiated directly by user."
msgstr ""
"Класс, экземпляры которого возвращаются при успешном подключении. Не "
"создается экземпляром напрямую пользователем."

#: ../../library/http.client.rst:124
msgid ""
"The *strict* parameter was removed. HTTP 0.9 style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"Параметр *strict* был удален. HTTP 0.9 style \"Simple Responses\" больше не "
"поддерживается."

#: ../../library/http.client.rst:128
msgid "This module provides the following function:"
msgstr "Этот модуль обеспечивает следующую функцию:"

#: ../../library/http.client.rst:132
msgid ""
"Parse the headers from a file pointer *fp* representing a HTTP request/"
"response. The file has to be a :class:`BufferedIOBase` reader (i.e. not "
"text) and must provide a valid :rfc:`2822` style header."
msgstr ""

#: ../../library/http.client.rst:136
msgid ""
"This function returns an instance of :class:`http.client.HTTPMessage` that "
"holds the header fields, but no payload (the same as :attr:`HTTPResponse."
"msg` and :attr:`http.server.BaseHTTPRequestHandler.headers`). After "
"returning, the file pointer *fp* is ready to read the HTTP body."
msgstr ""
"Эта функция возвращает экземпляр :class:`http.client.HTTPMessage`, который "
"содержит поля заголовка, но не содержит полезных данных (так же, как :attr:"
"`HTTPResponse.msg` и :attr:`http.server.BaseHTTPRequestHandler.headers` ). "
"После возврата указатель файла *fp* готов прочитать тело HTTP."

#: ../../library/http.client.rst:143
msgid ""
":meth:`parse_headers` does not parse the start-line of a HTTP message; it "
"only parses the ``Name: value`` lines. The file has to be ready to read "
"these field lines, so the first line should already be consumed before "
"calling the function."
msgstr ""
":meth:`parse_headers` не анализирует начальную строку HTTP-сообщения; он "
"анализирует только строки ``Name: value``. Файл должен быть готов прочитать "
"эти строки полей, поэтому первая строка должна быть использована еще до "
"вызова функции."

#: ../../library/http.client.rst:148
msgid "The following exceptions are raised as appropriate:"
msgstr "При необходимости возникают следующие исключения:"

#: ../../library/http.client.rst:153
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of :"
"exc:`Exception`."
msgstr ""
"Базовый класс других исключений в этом модуле. Это подкласс :exc:`Exception`."

#: ../../library/http.client.rst:159 ../../library/http.client.rst:170
#: ../../library/http.client.rst:175 ../../library/http.client.rst:180
#: ../../library/http.client.rst:185 ../../library/http.client.rst:190
msgid "A subclass of :exc:`HTTPException`."
msgstr "Подкласс :exc:`HTTPException`."

#: ../../library/http.client.rst:164
msgid ""
"A subclass of :exc:`HTTPException`, raised if a port is given and is either "
"non-numeric or empty."
msgstr ""
"Подкласс :exc:`HTTPException`, вызываемый, если порт указан и является "
"нечисловым или пустым."

#: ../../library/http.client.rst:195 ../../library/http.client.rst:200
#: ../../library/http.client.rst:205
msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr "Подкласс :exc:`ImproperConnectionState`."

#: ../../library/http.client.rst:210
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP "
"status code that we don't understand."
msgstr ""
"Подкласс :exc:`HTTPException`. Поднимается, если сервер отвечает кодом "
"состояния HTTP, который мы не понимаем."

#: ../../library/http.client.rst:216
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if an excessively long line is "
"received in the HTTP protocol from the server."
msgstr ""
"Подкласс :exc:`HTTPException`. Поднимается, если по протоколу HTTP от "
"сервера получена слишком длинная строка."

#: ../../library/http.client.rst:222
msgid ""
"A subclass of :exc:`ConnectionResetError` and :exc:`BadStatusLine`.  Raised "
"by :meth:`HTTPConnection.getresponse` when the attempt to read the response "
"results in no data read from the connection, indicating that the remote end "
"has closed the connection."
msgstr ""
"Подкласс :exc:`ConnectionResetError` и :exc:`BadStatusLine`. Вызывается :"
"meth:`HTTPConnection.getresponse`, когда попытка прочитать ответ не приводит "
"к чтению данных из соединения, что указывает на то, что удаленный конец "
"закрыл соединение."

#: ../../library/http.client.rst:227
msgid "Previously, :exc:`BadStatusLine`\\ ``('')`` was raised."
msgstr "Ранее было поднято исключение :exc:`BadStatusLine`\\ ``('')``."

#: ../../library/http.client.rst:231
msgid "The constants defined in this module are:"
msgstr "В этом модуле определены следующие константы:"

#: ../../library/http.client.rst:235
msgid "The default port for the HTTP protocol (always ``80``)."
msgstr "Порт по умолчанию для протокола HTTP (всегда ``80``)."

#: ../../library/http.client.rst:239
msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr "Порт по умолчанию для протокола HTTPS (всегда «443»)."

#: ../../library/http.client.rst:243
msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr "Этот словарь сопоставляет коды состояния HTTP 1.1 с именами W3C."

#: ../../library/http.client.rst:245
msgid ""
"Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not Found'``."
msgstr ""
"Пример: ``http.client.responses[http.client.NOT_FOUND]`` — ``'Не найден'``."

#: ../../library/http.client.rst:247
msgid ""
"See :ref:`http-status-codes` for a list of HTTP status codes that are "
"available in this module as constants."
msgstr ""
"См. :ref:`http-status-codes` для получения списка кодов состояния HTTP, "
"которые доступны в этом модуле как константы."

#: ../../library/http.client.rst:254
msgid "HTTPConnection Objects"
msgstr "Объекты HTTPConnection"

#: ../../library/http.client.rst:256
msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr "Экземпляры :class:`HTTPConnection` имеют следующие методы:"

#: ../../library/http.client.rst:262
msgid ""
"This will send a request to the server using the HTTP request method "
"*method* and the selector *url*."
msgstr ""

#: ../../library/http.client.rst:265
msgid ""
"If *body* is specified, the specified data is sent after the headers are "
"finished.  It may be a :class:`str`, a :term:`bytes-like object`, an open :"
"term:`file object`, or an iterable of :class:`bytes`.  If *body* is a "
"string, it is encoded as ISO-8859-1, the default for HTTP.  If it is a bytes-"
"like object, the bytes are sent as is.  If it is a :term:`file object`, the "
"contents of the file is sent; this file object should support at least the "
"``read()`` method.  If the file object is an instance of :class:`io."
"TextIOBase`, the data returned by the ``read()`` method will be encoded as "
"ISO-8859-1, otherwise the data returned by ``read()`` is sent as is.  If "
"*body* is an iterable, the elements of the iterable are sent as is until the "
"iterable is exhausted."
msgstr ""
"Если указано *body*, указанные данные отправляются после завершения "
"обработки заголовков. Это может быть :class:`str`, :term:`bytes-подобный "
"объект`, открытый :term:`файловый объект` или итерируемый :class:`bytes`. "
"Если *body* — это строка, она кодируется как ISO-8859-1, значение по "
"умолчанию для HTTP. Если это байтовый объект, байты отправляются как есть. "
"Если это :term:`файловый объект`, отправляется содержимое файла; этот "
"файловый объект должен поддерживать как минимум метод read(). Если объект "
"файла является экземпляром :class:`io.TextIOBase`, данные, возвращаемые "
"методом ``read()``, будут закодированы как ISO-8859-1, в противном случае "
"данные, возвращаемые ``read()`` `` отправляется как есть. Если *body* "
"является итерируемым, элементы итерируемого объекта отправляются как есть до "
"тех пор, пока итерируемый объект не будет исчерпан."

#: ../../library/http.client.rst:277
msgid ""
"The *headers* argument should be a mapping of extra HTTP headers to send "
"with the request."
msgstr ""

#: ../../library/http.client.rst:280
msgid ""
"If *headers* contains neither Content-Length nor Transfer-Encoding, but "
"there is a request body, one of those header fields will be added "
"automatically.  If *body* is ``None``, the Content-Length header is set to "
"``0`` for methods that expect a body (``PUT``, ``POST``, and ``PATCH``).  If "
"*body* is a string or a bytes-like object that is not also a :term:`file "
"<file object>`, the Content-Length header is set to its length.  Any other "
"type of *body* (files and iterables in general) will be chunk-encoded, and "
"the Transfer-Encoding header will automatically be set instead of Content-"
"Length."
msgstr ""
"Если *headers* не содержит ни Content-Length, ни Transfer-Encoding, но есть "
"тело запроса, одно из этих полей заголовка будет добавлено автоматически. "
"Если *body* имеет значение None, заголовок Content-Length устанавливается в "
"0 для методов, ожидающих тело (PUT, POST и PATCH). . Если *body* "
"представляет собой строку или байтовый объект, который не является также :"
"term:`file <file object>`, заголовку Content-Length присваивается его длина. "
"Любой другой тип *body* (файлы и итерации в целом) будет закодирован по "
"частям, а заголовок Transfer-Encoding будет автоматически установлен вместо "
"Content-Length."

#: ../../library/http.client.rst:292
msgid ""
"The *encode_chunked* argument is only relevant if Transfer-Encoding is "
"specified in *headers*.  If *encode_chunked* is ``False``, the "
"HTTPConnection object assumes that all encoding is handled by the calling "
"code.  If it is ``True``, the body will be chunk-encoded."
msgstr ""
"Аргумент *encode_chunked* имеет значение только в том случае, если в "
"*headers* указано Transfer-Encoding. Если *encode_chunked* имеет значение "
"False, объект HTTPConnection предполагает, что все кодирование "
"обрабатывается вызывающим кодом. Если это ``True``, тело будет закодировано "
"чанками."

#: ../../library/http.client.rst:298
msgid ""
"Chunked transfer encoding has been added to the HTTP protocol version 1.1.  "
"Unless the HTTP server is known to handle HTTP 1.1, the caller must either "
"specify the Content-Length, or must pass a :class:`str` or bytes-like object "
"that is not also a file as the body representation."
msgstr ""
"Кодирование передачи фрагментов было добавлено в протокол HTTP версии 1.1. "
"Если не известно, что HTTP-сервер обрабатывает HTTP 1.1, вызывающая сторона "
"должна либо указать Content-Length, либо передать :class:`str` или объект, "
"подобный байтам, который не является также файлом в качестве представления "
"тела."

#: ../../library/http.client.rst:304
msgid "*body* can now be an iterable."
msgstr "*body* теперь может быть итерируемым."

#: ../../library/http.client.rst:307
msgid ""
"If neither Content-Length nor Transfer-Encoding are set in *headers*, file "
"and iterable *body* objects are now chunk-encoded. The *encode_chunked* "
"argument was added. No attempt is made to determine the Content-Length for "
"file objects."
msgstr ""
"Если ни Content-Length, ни Transfer-Encoding не заданы в *headers*, файлы и "
"итерируемые объекты *body* теперь кодируются по частям. Был добавлен "
"аргумент *encode_chunked*. Никаких попыток определить Content-Length для "
"файловых объектов не предпринимается."

#: ../../library/http.client.rst:316
msgid ""
"Should be called after a request is sent to get the response from the "
"server. Returns an :class:`HTTPResponse` instance."
msgstr ""
"Должен вызываться после отправки запроса для получения ответа от сервера. "
"Возвращает экземпляр :class:`HTTPResponse`."

#: ../../library/http.client.rst:321
msgid ""
"Note that you must have read the whole response before you can send a new "
"request to the server."
msgstr ""
"Обратите внимание: вы должны прочитать весь ответ, прежде чем сможете "
"отправить новый запрос на сервер."

#: ../../library/http.client.rst:324
msgid ""
"If a :exc:`ConnectionError` or subclass is raised, the :class:"
"`HTTPConnection` object will be ready to reconnect when a new request is "
"sent."
msgstr ""
"Если возникает :exc:`ConnectionError` или подкласс, объект :class:"
"`HTTPConnection` будет готов к повторному подключению при отправке нового "
"запроса."

#: ../../library/http.client.rst:332
msgid ""
"Set the debugging level.  The default debug level is ``0``, meaning no "
"debugging output is printed.  Any value greater than ``0`` will cause all "
"currently defined debug output to be printed to stdout.  The ``debuglevel`` "
"is passed to any new :class:`HTTPResponse` objects that are created."
msgstr ""
"Установите уровень отладки. Уровень отладки по умолчанию — «0», что "
"означает, что выходные данные отладки не выводятся. Любое значение больше "
"``0`` приведет к тому, что все определенные в данный момент выходные данные "
"отладки будут выведены на стандартный вывод. Уровень отладки передается всем "
"новым создаваемым объектам :class:`HTTPResponse`."

#: ../../library/http.client.rst:342
msgid ""
"Set the host and the port for HTTP Connect Tunnelling. This allows running "
"the connection through a proxy server."
msgstr ""
"Установите хост и порт для туннелирования HTTP Connect. Это позволяет "
"запустить соединение через прокси-сервер."

#: ../../library/http.client.rst:345
msgid ""
"The host and port arguments specify the endpoint of the tunneled connection "
"(i.e. the address included in the CONNECT request, *not* the address of the "
"proxy server)."
msgstr ""

#: ../../library/http.client.rst:349
msgid ""
"The headers argument should be a mapping of extra HTTP headers to send with "
"the CONNECT request."
msgstr ""

#: ../../library/http.client.rst:352
msgid ""
"For example, to tunnel through a HTTPS proxy server running locally on port "
"8080, we would pass the address of the proxy to the :class:`HTTPSConnection` "
"constructor, and the address of the host that we eventually want to reach to "
"the :meth:`~HTTPConnection.set_tunnel` method::"
msgstr ""
"Например, чтобы туннелировать через прокси-сервер HTTPS, работающий локально "
"на порту 8080, мы должны передать адрес прокси-сервера конструктору :class:"
"`HTTPSConnection`, а адрес хоста, к которому мы в конечном итоге хотим "
"достичь :meth. :`~HTTPConnection.set_tunnel` метод::"

#: ../../library/http.client.rst:367
msgid ""
"Connect to the server specified when the object was created.  By default, "
"this is called automatically when making a request if the client does not "
"already have a connection."
msgstr ""
"Подключиться к серверу, указанному при создании объекта. По умолчанию это "
"вызывается автоматически при выполнении запроса, если у клиента еще нет "
"подключения."

#: ../../library/http.client.rst:371
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.connect`` with "
"arguments ``self``, ``host``, ``port``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``http.client.connect`` с "
"аргументами ``self``, ``host``, ``port``."

#: ../../library/http.client.rst:376
msgid "Close the connection to the server."
msgstr "Закройте соединение с сервером."

#: ../../library/http.client.rst:381
msgid "Buffer size in bytes for sending a file-like message body."
msgstr "Размер буфера в байтах для отправки тела сообщения в виде файла."

#: ../../library/http.client.rst:386
msgid ""
"As an alternative to using the :meth:`request` method described above, you "
"can also send your request step by step, by using the four functions below."
msgstr ""

#: ../../library/http.client.rst:393
msgid ""
"This should be the first call after the connection to the server has been "
"made. It sends a line to the server consisting of the *method* string, the "
"*url* string, and the HTTP version (``HTTP/1.1``).  To disable automatic "
"sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept "
"additional content encodings), specify *skip_host* or *skip_accept_encoding* "
"with non-False values."
msgstr ""
"Это должен быть первый вызов после установления соединения с сервером. Он "
"отправляет на сервер строку, состоящую из строки *method*, строки *url* и ​​"
"версии HTTP (``HTTP/1.1``). Чтобы отключить автоматическую отправку "
"заголовков ``Host:`` или ``Accept-Encoding:`` (например, чтобы принять "
"дополнительные кодировки контента), укажите *skip_host* или "
"*skip_accept_encoding* со значениями, отличными от False."

#: ../../library/http.client.rst:403
msgid ""
"Send an :rfc:`822`\\ -style header to the server.  It sends a line to the "
"server consisting of the header, a colon and a space, and the first "
"argument.  If more arguments are given, continuation lines are sent, each "
"consisting of a tab and an argument."
msgstr ""
"Отправьте на сервер заголовок в стиле :rfc:`822`\\. Он отправляет на сервер "
"строку, состоящую из заголовка, двоеточия, пробела и первого аргумента. Если "
"задано больше аргументов, отправляются строки продолжения, каждая из которых "
"состоит из табуляции и аргумента."

#: ../../library/http.client.rst:411
msgid ""
"Send a blank line to the server, signalling the end of the headers. The "
"optional *message_body* argument can be used to pass a message body "
"associated with the request."
msgstr ""
"Отправьте пустую строку на сервер, сигнализируя об окончании заголовков. "
"Необязательный аргумент *message_body* может использоваться для передачи "
"тела сообщения, связанного с запросом."

#: ../../library/http.client.rst:415
msgid ""
"If *encode_chunked* is ``True``, the result of each iteration of "
"*message_body* will be chunk-encoded as specified in :rfc:`7230`, Section "
"3.3.1.  How the data is encoded is dependent on the type of *message_body*.  "
"If *message_body* implements the :ref:`buffer interface <bufferobjects>` the "
"encoding will result in a single chunk. If *message_body* is a :class:"
"`collections.abc.Iterable`, each iteration of *message_body* will result in "
"a chunk.  If *message_body* is a :term:`file object`, each call to ``."
"read()`` will result in a chunk. The method automatically signals the end of "
"the chunk-encoded data immediately after *message_body*."
msgstr ""
"Если *encode_chunked* имеет значение True, результат каждой итерации "
"*message_body* будет закодирован по частям, как указано в :rfc:`7230`, "
"раздел 3.3.1. Способ кодирования данных зависит от типа *message_body*. Если "
"*message_body* реализует :ref:`buffer интерфейс <bufferobjects>`, "
"кодирование приведет к созданию одного фрагмента. Если *message_body* "
"представляет собой :class:`collections.abc.Iterable`, каждая итерация "
"*message_body* приведет к созданию фрагмента. Если *message_body* является "
"файловым объектом, каждый вызов ``.read()`` приведет к созданию фрагмента. "
"Этот метод автоматически сигнализирует об окончании данных, закодированных "
"чанками, сразу после *message_body*."

#: ../../library/http.client.rst:426
msgid ""
"Due to the chunked encoding specification, empty chunks yielded by an "
"iterator body will be ignored by the chunk-encoder. This is to avoid "
"premature termination of the read of the request by the target server due to "
"malformed encoding."
msgstr ""
"Из-за спецификации кодирования chunked пустые куски, выдаваемые телом "
"итератора, будут игнорироваться chunk-encoder. Это делается для того, чтобы "
"избежать преждевременного завершения чтения запроса целевым сервером из-за "
"неправильно сформированного кодирования."

#: ../../library/http.client.rst:431
msgid "Chunked encoding support.  The *encode_chunked* parameter was added."
msgstr ""

#: ../../library/http.client.rst:438
msgid ""
"Send data to the server.  This should be used directly only after the :meth:"
"`endheaders` method has been called and before :meth:`getresponse` is called."
msgstr ""
"Отправьте данные на сервер. Его следует использовать непосредственно только "
"после вызова метода :meth:`endheaders` и до вызова :meth:`getresponse`."

#: ../../library/http.client.rst:442
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.send`` with "
"arguments ``self``, ``data``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``http.client.send`` с аргументами "
"``self``, ``data``."

#: ../../library/http.client.rst:448
msgid "HTTPResponse Objects"
msgstr "Объекты HTTPResponse"

#: ../../library/http.client.rst:450
msgid ""
"An :class:`HTTPResponse` instance wraps the HTTP response from the server.  "
"It provides access to the request headers and the entity body.  The response "
"is an iterable object and can be used in a with statement."
msgstr ""
"Экземпляр :class:`HTTPResponse` оборачивает HTTP-ответ от сервера. Он "
"обеспечивает доступ к заголовкам запроса и телу объекта. Ответ представляет "
"собой итерируемый объект и может использоваться в операторе with."

#: ../../library/http.client.rst:455
msgid ""
"The :class:`io.BufferedIOBase` interface is now implemented and all of its "
"reader operations are supported."
msgstr ""
"Интерфейс :class:`io.BufferedIOBase` теперь реализован и поддерживаются все "
"его операции чтения."

#: ../../library/http.client.rst:462
msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr "Считывает и возвращает тело ответа или до следующих *amt* байтов."

#: ../../library/http.client.rst:466
msgid ""
"Reads up to the next len(b) bytes of the response body into the buffer *b*. "
"Returns the number of bytes read."
msgstr ""
"Считывает до следующих len(b) байт тела ответа в буфер *b*. Возвращает "
"количество прочитанных байт."

#: ../../library/http.client.rst:473
msgid ""
"Return the value of the header *name*, or *default* if there is no header "
"matching *name*.  If there is more than one  header with the name *name*, "
"return all of the values joined by ', '.  If *default* is any iterable other "
"than a single string, its elements are similarly returned joined by commas."
msgstr ""
"Возвращает значение заголовка *name* или *default*, если заголовок, "
"соответствующий *name*, отсутствует. Если существует более одного заголовка "
"с именем *name*, верните все значения, соединенные символами ', '. Если "
"*default* — это любая итерация, отличная от одной строки, ее элементы "
"возвращаются аналогичным образом, соединенные запятыми."

#: ../../library/http.client.rst:480
msgid "Return a list of (header, value) tuples."
msgstr "Возвращает список кортежей (заголовок, значение)."

#: ../../library/http.client.rst:484
msgid "Return the ``fileno`` of the underlying socket."
msgstr "Вернуть ``fileno`` базового сокета."

#: ../../library/http.client.rst:488
msgid ""
"A :class:`http.client.HTTPMessage` instance containing the response "
"headers.  :class:`http.client.HTTPMessage` is a subclass of :class:`email."
"message.Message`."
msgstr ""
"Экземпляр :class:`http.client.HTTPMessage`, содержащий заголовки ответов. :"
"class:`http.client.HTTPMessage` является подклассом :class:`email.message."
"Message`."

#: ../../library/http.client.rst:494
msgid ""
"HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr ""
"Версия протокола HTTP, используемая сервером. 10 для HTTP/1.0, 11 для "
"HTTP/1.1."

#: ../../library/http.client.rst:498
msgid ""
"URL of the resource retrieved, commonly used to determine if a redirect was "
"followed."
msgstr ""
"URL-адрес полученного ресурса, обычно используемый для определения того, "
"было ли выполнено перенаправление."

#: ../../library/http.client.rst:502
msgid ""
"Headers of the response in the form of an :class:`email.message."
"EmailMessage` instance."
msgstr ""
"Заголовки ответа в виде экземпляра :class:`email.message.EmailMessage`."

#: ../../library/http.client.rst:506
msgid "Status code returned by server."
msgstr "Код состояния, возвращенный сервером."

#: ../../library/http.client.rst:510
msgid "Reason phrase returned by server."
msgstr "Причинная фраза, возвращенная сервером."

#: ../../library/http.client.rst:514
msgid ""
"A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will "
"be printed to stdout as the response is read and parsed."
msgstr ""
"Отладочный крючок. Если :attr:`debuglevel` больше нуля, сообщения будут "
"выводиться на стандартный вывод по мере чтения и анализа ответа."

#: ../../library/http.client.rst:519
msgid "Is ``True`` if the stream is closed."
msgstr "Имеет значение True, если поток закрыт."

#: ../../library/http.client.rst:523
msgid "Deprecated in favor of :attr:`~HTTPResponse.url`."
msgstr "Отклонено в пользу :attr:`~HttpResponse.url`."

#: ../../library/http.client.rst:528
msgid "Deprecated in favor of :attr:`~HTTPResponse.headers`."
msgstr "Устарело в пользу :attr:`~HTTPResponse.headers`"

#: ../../library/http.client.rst:533
msgid "Deprecated in favor of :attr:`~HTTPResponse.status`."
msgstr "Устарело в пользу :attr:`~HTTPResponse.status`."

#: ../../library/http.client.rst:537
msgid "Examples"
msgstr "Примеры"

#: ../../library/http.client.rst:539
msgid "Here is an example session that uses the ``GET`` method::"
msgstr "Вот пример сеанса, в котором используется метод GET::"

#: ../../library/http.client.rst:564
msgid ""
"Here is an example session that uses the ``HEAD`` method.  Note that the "
"``HEAD`` method never returns any data. ::"
msgstr ""
"Вот пример сеанса, в котором используется метод HEAD. Обратите внимание, что "
"метод HEAD никогда не возвращает никаких данных. ::"

#: ../../library/http.client.rst:579
msgid "Here is an example session that uses the ``POST`` method::"
msgstr "Вот пример сеанса, в котором используется метод POST:"

#: ../../library/http.client.rst:595
msgid ""
"Client side HTTP ``PUT`` requests are very similar to ``POST`` requests. The "
"difference lies only on the server side where HTTP servers will allow "
"resources to be created via ``PUT`` requests. It should be noted that custom "
"HTTP methods are also handled in :class:`urllib.request.Request` by setting "
"the appropriate method attribute. Here is an example session that uses the "
"``PUT`` method::"
msgstr ""
"Клиентские HTTP-запросы PUT очень похожи на запросы POST. Разница "
"заключается только на стороне сервера, где HTTP-серверы позволяют создавать "
"ресурсы с помощью запросов PUT. Следует отметить, что пользовательские "
"методы HTTP также обрабатываются в :class:`urllib.request.Request` путем "
"установки соответствующего атрибута метода. Вот пример сеанса, в котором "
"используется метод PUT::"

#: ../../library/http.client.rst:616
msgid "HTTPMessage Objects"
msgstr "Объекты HTTPMessage"

#: ../../library/http.client.rst:618
msgid ""
"An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP "
"response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""
"Экземпляр :class:`http.client.HTTPMessage` содержит заголовки HTTP-ответа. "
"Это реализовано с помощью класса :class:`email.message.Message`."
