# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/fileinput.rst:2
msgid ":mod:`!fileinput` --- Iterate over lines from multiple input streams"
msgstr ":mod:`!fileinput` --- Перебирать строки из нескольких входных потоков."

#: ../../library/fileinput.rst:10
msgid "**Source code:** :source:`Lib/fileinput.py`"
msgstr "**Исходный код:** :source:`Lib/fileinput.py`"

#: ../../library/fileinput.rst:14
msgid ""
"This module implements a helper class and functions to quickly write a loop "
"over standard input or a list of files. If you just want to read or write "
"one file see :func:`open`."
msgstr ""
"Этот модуль реализует вспомогательный класс и функции для быстрого написания "
"цикла над стандартным вводом или списком файлов. Если вы просто хотите "
"прочитать или записать один файл, используйте :func:`open`."

#: ../../library/fileinput.rst:18
msgid "The typical use is::"
msgstr "Типичное использование:"

#: ../../library/fileinput.rst:20
msgid ""
"import fileinput\n"
"for line in fileinput.input(encoding=\"utf-8\"):\n"
"    process(line)"
msgstr ""
"import fileinput\n"
"for line in fileinput.input(encoding=\"utf-8\"):\n"
"    process(line)"

#: ../../library/fileinput.rst:24
msgid ""
"This iterates over the lines of all files listed in ``sys.argv[1:]``, "
"defaulting to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``, "
"it is also replaced by ``sys.stdin`` and the optional arguments *mode* and "
"*openhook* are ignored.  To specify an alternative list of filenames, pass "
"it as the first argument to :func:`.input`.  A single file name is also "
"allowed."
msgstr ""
"Это перебирает строки всех файлов, перечисленных в ``sys.argv[1:]``, по "
"умолчанию используется ``sys.stdin``, если список пуст. Если имя файла "
"``'-'``, оно также заменяется на ``sys.stdin``, а необязательные аргументы "
"*mode* и *openhook* игнорируются. Чтобы указать альтернативный список имен "
"файлов, передайте его в качестве первого аргумента в :func:`.input`. Также "
"допускается одно имя файла."

#: ../../library/fileinput.rst:30
msgid ""
"All files are opened in text mode by default, but you can override this by "
"specifying the *mode* parameter in the call to :func:`.input` or :class:"
"`FileInput`.  If an I/O error occurs during opening or reading a file, :exc:"
"`OSError` is raised."
msgstr ""
"По умолчанию все файлы открываются в текстовом режиме, но вы можете "
"переопределить это, указав параметр *mode* при вызове :func:`.input` или :"
"class:`FileInput`. Если во время открытия или чтения файла возникает ошибка "
"ввода-вывода, возникает :exc:`OSError`."

#: ../../library/fileinput.rst:35
msgid ":exc:`IOError` used to be raised; it is now an alias of :exc:`OSError`."
msgstr ":exc:`IOError` раньше вызывался; теперь это псевдоним :exc:`OSError`."

#: ../../library/fileinput.rst:38
msgid ""
"If ``sys.stdin`` is used more than once, the second and further use will "
"return no lines, except perhaps for interactive use, or if it has been "
"explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""
"Если ``sys.stdin`` используется более одного раза, второе и последующее "
"использование не вернут никаких строк, за исключением, возможно, "
"интерактивного использования или если он был явно сброшен (например, с "
"помощью ``sys.stdin.seek(0) ``)."

#: ../../library/fileinput.rst:42
msgid ""
"Empty files are opened and immediately closed; the only time their presence "
"in the list of filenames is noticeable at all is when the last file opened "
"is empty."
msgstr ""
"Пустые файлы открываются и сразу закрываются; единственный раз, когда их "
"присутствие в списке имен файлов вообще заметно, это когда последний "
"открытый файл пуст."

#: ../../library/fileinput.rst:46
msgid ""
"Lines are returned with any newlines intact, which means that the last line "
"in a file may not have one."
msgstr ""
"Строки возвращаются с неизмененными символами новой строки, а это означает, "
"что в последней строке файла ее может не быть."

#: ../../library/fileinput.rst:49
msgid ""
"You can control how files are opened by providing an opening hook via the "
"*openhook* parameter to :func:`fileinput.input` or :func:`FileInput`. The "
"hook must be a function that takes two arguments, *filename* and *mode*, and "
"returns an accordingly opened file-like object. If *encoding* and/or "
"*errors* are specified, they will be passed to the hook as additional "
"keyword arguments. This module provides a :func:`hook_compressed` to support "
"compressed files."
msgstr ""
"Вы можете контролировать открытие файлов, предоставив перехватчик открытия "
"через параметр *openhook* для :func:`fileinput.input` или :func:`FileInput`. "
"Перехватчик должен быть функцией, которая принимает два аргумента: "
"*имя_файла* и *режим* и возвращает соответственно открытый объект, подобный "
"файлу. Если указаны *кодировка* и/или *ошибки*, они будут переданы в "
"перехватчик в качестве дополнительных аргументов ключевого слова. Этот "
"модуль предоставляет :func:`hook_compressed` для поддержки сжатых файлов."

#: ../../library/fileinput.rst:56
msgid "The following function is the primary interface of this module:"
msgstr "Следующая функция является основным интерфейсом этого модуля:"

#: ../../library/fileinput.rst:61
msgid ""
"Create an instance of the :class:`FileInput` class.  The instance will be "
"used as global state for the functions of this module, and is also returned "
"to use during iteration.  The parameters to this function will be passed "
"along to the constructor of the :class:`FileInput` class."
msgstr ""
"Создайте экземпляр класса :class:`FileInput`. Экземпляр будет использоваться "
"как глобальное состояние для функций этого модуля, а также будет возвращен "
"для использования во время итерации. Параметры этой функции будут переданы "
"конструктору класса :class:`FileInput`."

#: ../../library/fileinput.rst:66
msgid ""
"The :class:`FileInput` instance can be used as a context manager in the :"
"keyword:`with` statement.  In this example, *input* is closed after the :"
"keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
"Экземпляр :class:`FileInput` можно использовать в качестве менеджера "
"контекста в операторе :keyword:`with`. В этом примере *input* закрывается "
"после выхода из оператора :keyword:`!with`, даже если возникает исключение::"

#: ../../library/fileinput.rst:70
msgid ""
"with fileinput.input(files=('spam.txt', 'eggs.txt'), encoding=\"utf-8\") as "
"f:\n"
"    for line in f:\n"
"        process(line)"
msgstr ""
"with fileinput.input(files=('spam.txt', 'eggs.txt'), encoding=\"utf-8\") as "
"f:\n"
"    for line in f:\n"
"        process(line)"

#: ../../library/fileinput.rst:74 ../../library/fileinput.rst:170
msgid "Can be used as a context manager."
msgstr "Может использоваться как менеджер контекста."

#: ../../library/fileinput.rst:77
msgid "The keyword parameters *mode* and *openhook* are now keyword-only."
msgstr ""
"Параметры ключевых слов *mode* и *openhook* теперь доступны только для "
"ключевых слов."

#: ../../library/fileinput.rst:80 ../../library/fileinput.rst:176
#: ../../library/fileinput.rst:210
msgid "The keyword-only parameter *encoding* and *errors* are added."
msgstr "Добавлены параметры только для ключевых слов *encoding* и *errors*."

#: ../../library/fileinput.rst:84
msgid ""
"The following functions use the global state created by :func:`fileinput."
"input`; if there is no active state, :exc:`RuntimeError` is raised."
msgstr ""
"Следующие функции используют глобальное состояние, созданное :func:"
"`fileinput.input`; если активного состояния нет, возникает :exc:"
"`RuntimeError`."

#: ../../library/fileinput.rst:90
msgid ""
"Return the name of the file currently being read.  Before the first line has "
"been read, returns ``None``."
msgstr ""
"Возвращает имя файла, который читается в данный момент. Прежде чем первая "
"строка будет прочитана, возвращает None."

#: ../../library/fileinput.rst:96
msgid ""
"Return the integer \"file descriptor\" for the current file. When no file is "
"opened (before the first line and between files), returns ``-1``."
msgstr ""
"Возвращает целочисленный «дескриптор файла» для текущего файла. Если ни один "
"файл не открыт (до первой строки и между файлами), возвращается ``-1``."

#: ../../library/fileinput.rst:102
msgid ""
"Return the cumulative line number of the line that has just been read.  "
"Before the first line has been read, returns ``0``.  After the last line of "
"the last file has been read, returns the line number of that line."
msgstr ""
"Возвращает совокупный номер только что прочитанной строки. Прежде чем первая "
"строка будет прочитана, возвращается ``0``. После прочтения последней строки "
"последнего файла возвращает номер этой строки."

#: ../../library/fileinput.rst:109
msgid ""
"Return the line number in the current file.  Before the first line has been "
"read, returns ``0``.  After the last line of the last file has been read, "
"returns the line number of that line within the file."
msgstr ""
"Возвращает номер строки в текущем файле. Прежде чем первая строка будет "
"прочитана, возвращается ``0``. После прочтения последней строки последнего "
"файла возвращает номер этой строки в файле."

#: ../../library/fileinput.rst:116
msgid ""
"Return ``True`` if the line just read is the first line of its file, "
"otherwise return ``False``."
msgstr ""
"Верните «True», если только что прочитанная строка является первой строкой "
"файла, в противном случае верните «False»."

#: ../../library/fileinput.rst:122
msgid ""
"Return ``True`` if the last line was read from ``sys.stdin``, otherwise "
"return ``False``."
msgstr ""
"Верните True, если последняя строка была прочитана из sys.stdin, в противном "
"случае верните False."

#: ../../library/fileinput.rst:128
msgid ""
"Close the current file so that the next iteration will read the first line "
"from the next file (if any); lines not read from the file will not count "
"towards the cumulative line count.  The filename is not changed until after "
"the first line of the next file has been read.  Before the first line has "
"been read, this function has no effect; it cannot be used to skip the first "
"file.  After the last line of the last file has been read, this function has "
"no effect."
msgstr ""
"Закройте текущий файл, чтобы следующая итерация прочитала первую строку из "
"следующего файла (если есть); строки, не прочитанные из файла, не будут "
"учитываться при подсчете совокупного количества строк. Имя файла не "
"изменяется до тех пор, пока не будет прочитана первая строка следующего "
"файла. До того, как первая строка будет прочитана, эта функция не действует; "
"его нельзя использовать для пропуска первого файла. После прочтения "
"последней строки последнего файла эта функция не действует."

#: ../../library/fileinput.rst:138
msgid "Close the sequence."
msgstr "Закройте последовательность."

#: ../../library/fileinput.rst:140
msgid ""
"The class which implements the sequence behavior provided by the module is "
"available for subclassing as well:"
msgstr ""
"Класс, который реализует поведение последовательности, предоставляемое "
"модулем, также доступен для создания подклассов:"

#: ../../library/fileinput.rst:146
msgid ""
"Class :class:`FileInput` is the implementation; its methods :meth:"
"`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, :meth:"
"`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` "
"correspond to the functions of the same name in the module. In addition it "
"is :term:`iterable` and has a :meth:`~io.TextIOBase.readline` method which "
"returns the next input line. The sequence must be accessed in strictly "
"sequential order; random access and :meth:`~io.TextIOBase.readline` cannot "
"be mixed."
msgstr ""
"Класс :class:`FileInput` — это реализация; его методы :meth:`filename`, :"
"meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, :meth:`isfirstline`, :"
"meth:`isstdin`, :meth:`nextfile` и :meth:`close` соответствуют одноименным "
"функциям в модуле. Кроме того, он :term:`iterable` и имеет :meth:`~io."
"TextIOBase.readline` метод, который возвращает следующую строку ввода. "
"Доступ к последовательности должен осуществляться строго последовательно; "
"произвольный доступ и :meth:`~io.TextIOBase.readline` нельзя смешивать."

#: ../../library/fileinput.rst:154
msgid ""
"With *mode* you can specify which file mode will be passed to :func:`open`. "
"It must be one of ``'r'`` and ``'rb'``."
msgstr ""
"С помощью *mode* вы можете указать, какой режим файла будет передан в :func:"
"`open`. Это должен быть один из ``'r'`` и ``'rb'``."

#: ../../library/fileinput.rst:157
msgid ""
"The *openhook*, when given, must be a function that takes two arguments, "
"*filename* and *mode*, and returns an accordingly opened file-like object. "
"You cannot use *inplace* and *openhook* together."
msgstr ""
"*openhook*, если он задан, должен быть функцией, которая принимает два "
"аргумента, *filename* и *mode*, и возвращает соответствующий открытый "
"файловоподобный объект. Вы не можете использовать *inplace* и *openhook* "
"вместе."

#: ../../library/fileinput.rst:161
msgid ""
"You can specify *encoding* and *errors* that is passed to :func:`open` or "
"*openhook*."
msgstr ""
"Вы можете указать *кодировку* и *ошибки*, которые передаются в :func:`open` "
"или *openhook*."

#: ../../library/fileinput.rst:163
msgid ""
"A :class:`FileInput` instance can be used as a context manager in the :"
"keyword:`with` statement.  In this example, *input* is closed after the :"
"keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
"Экземпляр :class:`FileInput` можно использовать в качестве менеджера "
"контекста в операторе :keyword:`with`. В этом примере *input* закрывается "
"после выхода из оператора :keyword:`!with`, даже если возникает исключение::"

#: ../../library/fileinput.rst:167
msgid ""
"with FileInput(files=('spam.txt', 'eggs.txt')) as input:\n"
"    process(input)"
msgstr ""
"with FileInput(files=('spam.txt', 'eggs.txt')) as input:\n"
"    process(input)"

#: ../../library/fileinput.rst:173
msgid "The keyword parameter *mode* and *openhook* are now keyword-only."
msgstr ""
"Параметры ключевого слова *mode* и *openhook* теперь доступны только для "
"ключевых слов."

#: ../../library/fileinput.rst:179
msgid ""
"The ``'rU'`` and ``'U'`` modes and the :meth:`!__getitem__` method have been "
"removed."
msgstr "Режимы ``'rU'`` и ``'U'`` и метод :meth:`!__getitem__` были удалены."

#: ../../library/fileinput.rst:184
msgid ""
"**Optional in-place filtering:** if the keyword argument ``inplace=True`` is "
"passed to :func:`fileinput.input` or to the :class:`FileInput` constructor, "
"the file is moved to a backup file and standard output is directed to the "
"input file (if a file of the same name as the backup file already exists, it "
"will be replaced silently).  This makes it possible to write a filter that "
"rewrites its input file in place.  If the *backup* parameter is given "
"(typically as ``backup='.<some extension>'``), it specifies the extension "
"for the backup file, and the backup file remains around; by default, the "
"extension is ``'.bak'`` and it is deleted when the output file is closed.  "
"In-place filtering is disabled when standard input is read."
msgstr ""
"**Дополнительная фильтрация на месте:** если аргумент ключевого слова "
"``inplace=True`` передается в :func:`fileinput.input` или в конструктор :"
"class:`FileInput`, файл перемещается в резервную копию. файл и стандартный "
"вывод направляются во входной файл (если файл с тем же именем, что и файл "
"резервной копии, уже существует, он будет заменен автоматически). Это "
"позволяет написать фильтр, который перезаписывает входной файл на месте. "
"Если задан параметр *backup* (обычно как ``backup='.<некоторое "
"расширение>'``), он определяет расширение файла резервной копии, и файл "
"резервной копии остается; по умолчанию расширением является ``'.bak'`` и оно "
"удаляется при закрытии выходного файла. Фильтрация на месте отключается при "
"чтении стандартного ввода."

#: ../../library/fileinput.rst:196
msgid "The two following opening hooks are provided by this module:"
msgstr "Этот модуль предоставляет два следующих открывающих крючка:"

#: ../../library/fileinput.rst:200
msgid ""
"Transparently opens files compressed with gzip and bzip2 (recognized by the "
"extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2` "
"modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file "
"is opened normally (ie, using :func:`open` without any decompression)."
msgstr ""
"Прозрачно открывает файлы, сжатые с помощью gzip и bzip2 (распознаваемые по "
"расширениям ``'.gz'`` и ``'.bz2'``, используя модули :mod:`gzip` и :mod:"
"`bz2`. Если расширение имени файла не ``'.gz'`` или ``'.bz2'``, файл "
"открывается обычным образом (т.е. с использованием :func:`open` без какой-"
"либо распаковки)."

#: ../../library/fileinput.rst:205
msgid ""
"The *encoding* and *errors* values are passed to :class:`io.TextIOWrapper` "
"for compressed files and open for normal files."
msgstr ""
"Значения *encoding* и *errors* передаются в :class:`io.TextIOWrapper` для "
"сжатых файлов и открываются для обычных файлов."

#: ../../library/fileinput.rst:208
msgid ""
"Usage example:  ``fi = fileinput.FileInput(openhook=fileinput."
"hook_compressed, encoding=\"utf-8\")``"
msgstr ""
"Пример использования: ``fi = fileinput.FileInput(openhook=fileinput."
"hook_compressed,coding=\"utf-8\")``"

#: ../../library/fileinput.rst:216
msgid ""
"Returns a hook which opens each file with :func:`open`, using the given "
"*encoding* and *errors* to read the file."
msgstr ""
"Возвращает перехватчик, который открывает каждый файл с помощью :func:"
"`open`, используя заданную *кодировку* и *ошибки* для чтения файла."

#: ../../library/fileinput.rst:219
msgid ""
"Usage example: ``fi = fileinput.FileInput(openhook=fileinput."
"hook_encoded(\"utf-8\", \"surrogateescape\"))``"
msgstr ""
"Пример использования: ``fi = fileinput.FileInput(openhook=fileinput."
"hook_encoded(\"utf-8\", \"surrogateescape\"))``"

#: ../../library/fileinput.rst:223
msgid "Added the optional *errors* parameter."
msgstr "Добавлен необязательный параметр *errors*."

#: ../../library/fileinput.rst:226
msgid ""
"This function is deprecated since :func:`fileinput.input` and :class:"
"`FileInput` now have *encoding* and *errors* parameters."
msgstr ""
"Эта функция устарела, поскольку :func:`fileinput.input` и :class:`FileInput` "
"теперь имеют параметры *encoding* и *errors*."
