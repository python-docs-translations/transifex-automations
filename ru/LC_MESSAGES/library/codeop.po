# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/codeop.rst:2
msgid ":mod:`codeop` --- Compile Python code"
msgstr ""

#: ../../library/codeop.rst:10
msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Мсходный код:** :source:`Lib/codeop.py`"

#: ../../library/codeop.rst:14
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"Модуль :mod:`codeop` предоставляет утилиты, с помощью которых можно "
"эмулировать цикл чтения-оценки-печати Python, как это сделано в модуле :mod:"
"`code`. В результате вы, вероятно, не захотите использовать модуль напрямую; "
"если вы хотите включить такой цикл в свою программу, вы, вероятно, захотите "
"вместо этого использовать модуль :mod:`code`."

#: ../../library/codeop.rst:20
msgid "There are two parts to this job:"
msgstr "Эта работа состоит из двух частей:"

#: ../../library/codeop.rst:22
msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Возможность определить, завершает ли строка ввода оператор Python: короче "
"говоря, указание, следует ли печатать «``>>>>``' или '``...``' дальше."

#: ../../library/codeop.rst:25
msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr ""
"Запоминает, какие будущие операторы ввел пользователь, поэтому последующий "
"ввод может быть скомпилирован с их учетом."

#: ../../library/codeop.rst:28
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"Модуль :mod:`codeop` предоставляет возможность выполнения каждой из этих "
"задач, а также возможность выполнения обеих."

#: ../../library/codeop.rst:31
msgid "To do just the former:"
msgstr "Чтобы сделать только первое:"

#: ../../library/codeop.rst:35
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Пытается скомпилировать *source*, который должен представлять собой строку "
"кода Python, и вернуть объект кода, если *source* является допустимым кодом "
"Python. В этом случае атрибутом имени файла объекта кода будет *filename*, "
"который по умолчанию имеет значение ``'<input>'``. Возвращает ``None``, если "
"*source* *не* является допустимым кодом Python, но является префиксом "
"допустимого кода Python."

#: ../../library/codeop.rst:41
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Если есть проблема с *source*, будет выдано исключение. :exc:`SyntaxError` "
"возникает, если существует неверный синтаксис Python, и :exc:`OverflowError` "
"или :exc:`ValueError`, если существует недопустимый литерал."

#: ../../library/codeop.rst:45
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) "
"or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to be raised."
msgstr ""
"Аргумент *symbol* определяет, компилируется ли *source* как оператор "
"(«single», по умолчанию), как последовательность :term:`statement` "
"(``'exec'``) или как :term:`expression` (``'eval'``). Любое другое значение "
"приведет к возникновению :exc:`ValueError`."

#: ../../library/codeop.rst:52
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Возможно (но маловероятно), что анализатор прекратит анализ с успешным "
"результатом до достижения конца источника; в этом случае конечные символы "
"могут игнорироваться, а не вызывать ошибку. Например, за обратной косой "
"чертой, за которой следуют две новые строки, может следовать произвольный "
"мусор. Это будет исправлено, как только API для парсера станет лучше."

#: ../../library/codeop.rst:61
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to the built-in function :func:`compile`, but with the difference "
"that if the instance compiles program text containing a :mod:`__future__` "
"statement, the instance 'remembers' and compiles all subsequent program "
"texts with the statement in force."
msgstr ""
"Экземпляры этого класса имеют методы :meth:`~object.__call__`, идентичные по "
"сигнатуре встроенной функции :func:`compile`, но с той разницей, что если "
"экземпляр компилирует текст программы, содержащий :mod:`__future__` "
"оператор, экземпляр «запоминает» и компилирует все последующие тексты "
"программы с действующим оператором."

#: ../../library/codeop.rst:70
msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to :func:`compile_command`; the difference is that if the instance "
"compiles program text containing a :mod:`__future__` statement, the instance "
"'remembers' and compiles all subsequent program texts with the statement in "
"force."
msgstr ""
"Экземпляры этого класса имеют методы :meth:`~object.__call__`, идентичные по "
"сигнатуре методам :func:`compile_command`; разница в том, что если экземпляр "
"компилирует текст программы, содержащий оператор :mod:`__future__`, "
"экземпляр \"запоминает\" и компилирует все последующие тексты программы с "
"действующим оператором."
