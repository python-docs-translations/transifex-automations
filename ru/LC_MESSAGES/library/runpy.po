# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/runpy.rst:2
msgid ":mod:`!runpy` --- Locating and executing Python modules"
msgstr ":mod:`!runpy` --- Поиск и выполнение модулей Python"

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**Исходный код:** :source:`Lib/runpy.py`"

#: ../../library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""
"Модуль :mod:`runpy` используется для поиска и запуска модулей Python без их "
"предварительного импорта. Его основное назначение — реализация переключателя "
"командной строки :option:`-m`, который позволяет размещать сценарии с "
"использованием пространства имен модуля Python, а не файловой системы."

#: ../../library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""
"Обратите внимание, что это *не* модуль песочницы — весь код выполняется в "
"текущем процессе, и любые побочные эффекты (например, кэшированный импорт "
"других модулей) останутся на месте после возвращения функций."

#: ../../library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""
"Более того, не гарантируется правильная работа любых функций и классов, "
"определенных в исполняемом коде, после возврата из функции :mod:`runpy`. "
"Если это ограничение неприемлемо для данного варианта использования, :mod:"
"`importlib`, вероятно, будет более подходящим выбором, чем этот модуль."

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr "Модуль :mod:`runpy` предоставляет две функции:"

#: ../../library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""
"Выполнить код указанного модуля и вернуть результирующий словарь глобальных "
"переменных модуля. Код модуля сначала находится с использованием "
"стандартного механизма импорта (подробности см. в :pep:`302`), а затем "
"выполняется в новом пространстве имен модуля."

#: ../../library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the :mod:`__main__` submodule within that package is then "
"executed and the resulting module globals dictionary returned."
msgstr ""
"Аргумент *mod_name* должен быть абсолютным именем модуля. Если имя модуля "
"относится к пакету, а не к обычному модулю, то этот пакет импортируется, а "
"затем выполняется подмодуль :mod:`__main__` внутри этого пакета и "
"возвращается результирующий словарь глобальных переменных модуля."

#: ../../library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"Необязательный аргумент словаря *init_globals* может использоваться для "
"предварительного заполнения словаря глобальных переменных модуля перед "
"выполнением кода. Поставляемый словарь не будет изменен. Если какие-либо из "
"приведенных ниже специальных глобальных переменных определены в "
"предоставленном словаре, эти определения переопределяются функцией :func:"
"`run_module`."

#: ../../library/runpy.rst:52 ../../library/runpy.rst:127
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""
"Специальные глобальные переменные ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` и ``__package__`` устанавливаются в словаре "
"глобальных переменных перед кодом модуля. выполняется (обратите внимание, "
"что это минимальный набор переменных — другие переменные могут быть "
"установлены неявно как деталь реализации интерпретатора)."

#: ../../library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""
"``__name__`` устанавливается в *run_name*, если этот необязательный аргумент "
"не равен :const:`None`, в ``mod_name + '.__main__'``, если именованный "
"модуль является пакетом, и в аргумент *mod_name* в противном случае. ."

#: ../../library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + '."
"__main__``, never *run_name*)."
msgstr ""
"``__spec__`` будет установлен соответствующим образом для *фактически* "
"импортированного модуля (то есть ``__spec__.name`` всегда будет *mod_name* "
"или ``mod_name + '.__main__``, никогда *run_name*)."

#: ../../library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are :ref:"
"`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"``__file__``, ``__cached__``, ``__loader__`` и ``__package__`` "
"устанавливаются как обычный <import-mod-attrs>` на основе спецификации "
"модуля."

#: ../../library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""
"Если аргумент *alter_sys* указан и его значение равно :const:`True`, тогда "
"``sys.argv[0]`` обновляется значением ``__file__`` и ``sys."
"modules[__name__]` ` обновляется временным объектом модуля для исполняемого "
"модуля. И ``sys.argv[0]``, и ``sys.modules[__name__]`` восстанавливаются до "
"своих исходных значений перед возвратом функции."

#: ../../library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the ``sys`` module be left alone when "
"invoking this function from threaded code."
msgstr ""
"Обратите внимание, что эта манипуляция с :mod:`sys` не является "
"потокобезопасной. Другие потоки могут видеть частично инициализированный "
"модуль, а также измененный список аргументов. Рекомендуется оставлять модуль "
"``sys`` в покое при вызове этой функции из многопоточного кода."

#: ../../library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ""
"Опция :option:`-m` предлагает эквивалентную функциональность из командной "
"строки."

#: ../../library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a :mod:`__main__` submodule."
msgstr ""
"Добавлена ​​возможность запускать пакеты путем поиска подмодуля :mod:"
"`__main__`."

#: ../../library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "Добавлена ​​глобальная переменная ``__cached__`` (см. :pep:`3147`)."

#: ../../library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as ``__spec__."
"name``."
msgstr ""
"Обновлено, чтобы использовать преимущества функции спецификации модуля, "
"добавленной :pep:`451`. Это позволяет правильно установить ``__cached__`` "
"для модулей, запускаемых таким образом, а также гарантировать, что реальное "
"имя модуля всегда будет доступно как ``__spec__.name``."

#: ../../library/runpy.rst:96
msgid ""
"The setting of ``__cached__``, ``__loader__``, and ``__package__`` are "
"deprecated. See :class:`~importlib.machinery.ModuleSpec` for alternatives."
msgstr ""
"Настройки ``__cached__``, ``__loader__`` и ``__package__`` устарели. См. "
"альтернативы в :class:`~importlib.machinery.ModuleSpec`."

#: ../../library/runpy.rst:106
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid :data:`sys.path` entry containing a :mod:"
"`__main__` module (e.g. a zipfile containing a top-level ``__main__.py`` "
"file)."
msgstr ""
"Выполните код в указанном месте файловой системы и верните результирующий "
"словарь глобальных переменных модуля. Как и в случае с именем сценария, "
"передаваемым в командную строку CPython, указанный путь может относиться к "
"исходному файлу Python, скомпилированному файлу байт-кода или допустимой "
"записи :data:`sys.path`, содержащей модуль :mod:`__main__` (например, zip-"
"файл, содержащий файл ``__main__.py`` верхнего уровня)."

#: ../../library/runpy.rst:113
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid :data:`sys.path` entry (typically a zipfile or "
"directory), the entry is first added to the beginning of ``sys.path``. The "
"function then looks for and executes a :mod:`__main__` module using the "
"updated path. Note that there is no special protection against invoking an "
"existing ``__main__`` entry located elsewhere on ``sys.path`` if there is no "
"such module at the specified location."
msgstr ""
"Для простого сценария указанный код просто выполняется в новом пространстве "
"имен модуля. Для допустимой записи :data:`sys.path` (обычно это zip-файл или "
"каталог) запись сначала добавляется в начало ``sys.path``. Затем функция "
"ищет и выполняет модуль :mod:`__main__`, используя обновленный путь. "
"Обратите внимание, что не существует специальной защиты от вызова "
"существующей записи ``__main__``, расположенной в другом месте в ``sys."
"path``, если в указанном месте нет такого модуля."

#: ../../library/runpy.rst:121
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"Необязательный аргумент словаря *init_globals* может использоваться для "
"предварительного заполнения словаря глобальных переменных модуля перед "
"выполнением кода. Поставляемый словарь не будет изменен. Если какие-либо из "
"приведенных ниже специальных глобальных переменных определены в "
"предоставленном словаре, эти определения переопределяются функцией :func:"
"`run_path`."

#: ../../library/runpy.rst:133
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__`` устанавливается в *run_name*, если этот необязательный аргумент "
"не равен :const:`None`, и в ``'<run_path>'`` в противном случае."

#: ../../library/runpy.rst:136
msgid ""
"If the supplied path directly references a script file (whether as source or "
"as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""
"Если указанный путь напрямую ссылается на файл сценария (будь то исходный "
"код или предварительно скомпилированный байт-код), то для ``__file__`` будет "
"установлен указанный путь, а ``__spec__``, ``__cached__``, ``__loader__ `` и "
"``__package__`` будут установлены на :const:`None`."

#: ../../library/runpy.rst:141
msgid ""
"If the supplied path is a reference to a valid :data:`sys.path` entry, then "
"``__spec__`` will be set appropriately for the imported :mod:`__main__` "
"module (that is, ``__spec__.name`` will always be ``__main__``). "
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` will be :"
"ref:`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"Если указанный путь является ссылкой на действительную запись :data:`sys."
"path`, то ``__spec__`` будет установлен соответствующим образом для "
"импортированного модуля :mod:`__main__` (то есть ``__spec__.name`) ` всегда "
"будет ``__main__``). ``__file__``, ``__cached__``, ``__loader__`` и "
"``__package__`` будут :ref:`установлены как обычные <import-mod-attrs>` на "
"основе спецификации модуля."

#: ../../library/runpy.rst:147
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, :"
"data:`sys.path` may be altered as described above. ``sys.argv[0]`` is "
"updated with the value of ``path_name`` and ``sys.modules[__name__]`` is "
"updated with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""
"Ряд изменений также внесен в модуль :mod:`sys`. Во-первых, :data:`sys.path` "
"можно изменить, как описано выше. ``sys.argv[0]`` обновляется значением "
"``path_name``, а ``sys.modules[__name__]`` обновляется временным объектом "
"модуля для исполняемого модуля. Все изменения элементов в :mod:`sys` "
"отменяются до возврата из функции."

#: ../../library/runpy.rst:154
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of :data:`sys.path` entries. As the thread-safety limitations "
"still apply, use of this function in threaded code should be either "
"serialised with the import lock or delegated to a separate process."
msgstr ""
"Обратите внимание, что, в отличие от :func:`run_module`, изменения, "
"внесенные в :mod:`sys`, не являются обязательными в этой функции, поскольку "
"эти настройки необходимы для разрешения выполнения записей :data:`sys.path`. "
"Поскольку ограничения потокобезопасности по-прежнему применяются, "
"использование этой функции в многопоточном коде должно быть либо "
"сериализовано с блокировкой импорта, либо делегировано отдельному процессу."

#: ../../library/runpy.rst:161
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
":ref:`using-on-interface-options` для эквивалентной функциональности в "
"командной строке (``python path/to/script``)."

#: ../../library/runpy.rst:166
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid :data:`sys.path` entry rather than "
"being executed directly."
msgstr ""
"Обновлено, чтобы использовать преимущества функции спецификации модуля, "
"добавленной :pep:`451`. Это позволяет правильно установить ``__cached__`` в "
"случае, когда ``__main__`` импортируется из допустимой записи :data:`sys."
"path`, а не выполняется напрямую."

#: ../../library/runpy.rst:172
msgid ""
"The setting of ``__cached__``, ``__loader__``, and ``__package__`` are "
"deprecated."
msgstr "Настройки ``__cached__``, ``__loader__`` и ``__package__`` устарели."

#: ../../library/runpy.rst:178
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- Выполнение модулей как скриптов"

#: ../../library/runpy.rst:179 ../../library/runpy.rst:182
msgid "PEP written and implemented by Nick Coghlan."
msgstr "PEP написан и реализован Ником Когланом."

#: ../../library/runpy.rst:181
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` -- Явный относительный импорт основного модуля"

#: ../../library/runpy.rst:184
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` -- Тип ModuleSpec для системы импорта."

#: ../../library/runpy.rst:185
msgid "PEP written and implemented by Eric Snow"
msgstr "PEP написан и реализован Эриком Сноу"

#: ../../library/runpy.rst:187
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` — подробности командной строки CPython"

#: ../../library/runpy.rst:189
msgid "The :func:`importlib.import_module` function"
msgstr "Функция :func:`importlib.import_module`"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:103
msgid "module"
msgstr "модуль"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:103
msgid "__main__"
msgstr "__main__"
