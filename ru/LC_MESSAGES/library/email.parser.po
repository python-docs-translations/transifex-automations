# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/email.parser.rst:2
msgid ":mod:`email.parser`: Parsing email messages"
msgstr ""

#: ../../library/email.parser.rst:7
msgid "**Source code:** :source:`Lib/email/parser.py`"
msgstr "**Исходный код:** :source:`Lib/email/parser.py`"

#: ../../library/email.parser.rst:11
msgid ""
"Message object structures can be created in one of two ways: they can be "
"created from whole cloth by creating an :class:`~email.message.EmailMessage` "
"object, adding headers using the dictionary interface, and adding payload(s) "
"using :meth:`~email.message.EmailMessage.set_content` and related methods, "
"or they can be created by parsing a serialized representation of the email "
"message."
msgstr ""
"Структуры объектов сообщений могут быть созданы одним из двух способов: их "
"можно создать целиком, создав объект :class:`~email.message.EmailMessage`, "
"добавив заголовки с помощью интерфейса словаря и добавив полезные данные с "
"помощью: meth:`~email.message.EmailMessage.set_content` и связанные методы, "
"или их можно создать путем анализа сериализованного представления сообщения "
"электронной почты."

#: ../../library/email.parser.rst:18
msgid ""
"The :mod:`email` package provides a standard parser that understands most "
"email document structures, including MIME documents.  You can pass the "
"parser a bytes, string or file object, and the parser will return to you the "
"root :class:`~email.message.EmailMessage` instance of the object structure.  "
"For simple, non-MIME messages the payload of this root object will likely be "
"a string containing the text of the message.  For MIME messages, the root "
"object will return ``True`` from its :meth:`~email.message.EmailMessage."
"is_multipart` method, and the subparts can be accessed via the payload "
"manipulation methods, such as :meth:`~email.message.EmailMessage.get_body`, :"
"meth:`~email.message.EmailMessage.iter_parts`, and :meth:`~email.message."
"EmailMessage.walk`."
msgstr ""
"Пакет :mod:`email` предоставляет стандартный анализатор, который понимает "
"большинство структур документов электронной почты, включая документы MIME. "
"Вы можете передать анализатору байтовый, строковый или файловый объект, и "
"анализатор вернет вам корневой экземпляр :class:`~email.message."
"EmailMessage` структуры объекта. Для простых сообщений, отличных от MIME, "
"полезные данные этого корневого объекта, скорее всего, будут строкой, "
"содержащей текст сообщения. Для сообщений MIME корневой объект вернет True "
"из своего метода :meth:`~email.message.EmailMessage.is_multipart`, а доступ "
"к подчастям можно получить с помощью методов манипулирования полезной "
"нагрузкой, таких как :meth:`~ email.message.EmailMessage.get_body`, :meth:"
"`~email.message.EmailMessage.iter_parts` и :meth:`~email.message."
"EmailMessage.walk`."

#: ../../library/email.parser.rst:30
msgid ""
"There are actually two parser interfaces available for use, the :class:"
"`Parser` API and the incremental :class:`FeedParser` API.  The :class:"
"`Parser` API is most useful if you have the entire text of the message in "
"memory, or if the entire message lives in a file on the file system.  :class:"
"`FeedParser` is more appropriate when you are reading the message from a "
"stream which might block waiting for more input (such as reading an email "
"message from a socket).  The :class:`FeedParser` can consume and parse the "
"message incrementally, and only returns the root object when you close the "
"parser."
msgstr ""
"На самом деле для использования доступны два интерфейса синтаксического "
"анализатора: API :class:`Parser` и инкрементальный API :class:`FeedParser`. "
"API :class:`Parser` наиболее полезен, если у вас есть весь текст сообщения в "
"памяти или если все сообщение находится в файле в файловой системе. :class:"
"`FeedParser` больше подходит, когда вы читаете сообщение из потока, который "
"может заблокировать ожидание дополнительных входных данных (например, чтение "
"сообщения электронной почты из сокета). :class:`FeedParser` может "
"обрабатывать и анализировать сообщение постепенно и возвращает корневой "
"объект только при закрытии анализатора."

#: ../../library/email.parser.rst:39
msgid ""
"Note that the parser can be extended in limited ways, and of course you can "
"implement your own parser completely from scratch.  All of the logic that "
"connects the :mod:`email` package's bundled parser and the :class:`~email."
"message.EmailMessage` class is embodied in the :mod:`policy` class, so a "
"custom parser can create message object trees any way it finds necessary by "
"implementing custom versions of the appropriate :mod:`policy` methods."
msgstr ""

#: ../../library/email.parser.rst:49
msgid "FeedParser API"
msgstr "FeedParser API"

#: ../../library/email.parser.rst:51
msgid ""
"The :class:`BytesFeedParser`, imported from the :mod:`email.feedparser` "
"module, provides an API that is conducive to incremental parsing of email "
"messages, such as would be necessary when reading the text of an email "
"message from a source that can block (such as a socket).  The :class:"
"`BytesFeedParser` can of course be used to parse an email message fully "
"contained in a :term:`bytes-like object`, string, or file, but the :class:"
"`BytesParser` API may be more convenient for such use cases.  The semantics "
"and results of the two parser APIs are identical."
msgstr ""
":class:`BytesFeedParser`, импортированный из модуля :mod:`email.feedparser`, "
"предоставляет API, который способствует поэтапному анализу сообщений "
"электронной почты, например, который может быть необходим при чтении текста "
"сообщения электронной почты из источника. которые могут блокироваться "
"(например, сокет). :class:`BytesFeedParser`, конечно, можно использовать для "
"анализа сообщения электронной почты, полностью содержащегося в :term:`bytes-"
"подобном объекте`, строке или файле, но API :class:`BytesParser` может быть "
"более удобным для такие варианты использования. Семантика и результаты двух "
"API-интерфейсов синтаксического анализатора идентичны."

#: ../../library/email.parser.rst:60
msgid ""
"The :class:`BytesFeedParser`'s API is simple; you create an instance, feed "
"it a bunch of bytes until there's no more to feed it, then close the parser "
"to retrieve the root message object.  The :class:`BytesFeedParser` is "
"extremely accurate when parsing standards-compliant messages, and it does a "
"very good job of parsing non-compliant messages, providing information about "
"how a message was deemed broken.  It will populate a message object's :attr:"
"`~email.message.EmailMessage.defects` attribute with a list of any problems "
"it found in a message.  See the :mod:`email.errors` module for the list of "
"defects that it can find."
msgstr ""
"API :class:`BytesFeedParser` прост; вы создаете экземпляр, передаете ему "
"кучу байтов до тех пор, пока его больше не останется, а затем закрываете "
"анализатор, чтобы получить корневой объект сообщения. :class:"
"`BytesFeedParser` чрезвычайно точен при анализе сообщений, соответствующих "
"стандартам, и очень хорошо справляется с анализом несоответствующих "
"сообщений, предоставляя информацию о том, как сообщение было признано "
"поврежденным. Он заполнит атрибут :attr:`~email.message.EmailMessage."
"defects` объекта сообщения списком всех проблем, обнаруженных в сообщении. "
"См. модуль :mod:`email.errors` для получения списка дефектов, которые он "
"может обнаружить."

#: ../../library/email.parser.rst:70
msgid "Here is the API for the :class:`BytesFeedParser`:"
msgstr "Вот API для :class:`BytesFeedParser`:"

#: ../../library/email.parser.rst:75
msgid ""
"Create a :class:`BytesFeedParser` instance.  Optional *_factory* is a no-"
"argument callable; if not specified use the :attr:`~email.policy.Policy."
"message_factory` from the *policy*.  Call *_factory* whenever a new message "
"object is needed."
msgstr ""
"Создайте экземпляр :class:`BytesFeedParser`. Необязательный *_factory* — это "
"вызываемый объект без аргументов; если не указано, используйте :attr:`~email."
"policy.Policy.message_factory` из *policy*. Вызовите *_factory* всякий раз, "
"когда необходим новый объект сообщения."

#: ../../library/email.parser.rst:80
msgid ""
"If *policy* is specified use the rules it specifies to update the "
"representation of the message.  If *policy* is not set, use the :class:"
"`compat32 <email.policy.Compat32>` policy, which maintains backward "
"compatibility with the Python 3.2 version of the email package and provides :"
"class:`~email.message.Message` as the default factory.  All other policies "
"provide :class:`~email.message.EmailMessage` as the default *_factory*. For "
"more information on what else *policy* controls, see the :mod:`~email."
"policy` documentation."
msgstr ""
"Если указана *policy*, используйте указанные ею правила для обновления "
"представления сообщения. Если *policy* не задано, используйте политику :"
"class:`compat32 <email.policy.Compat32>`, которая поддерживает обратную "
"совместимость с версией пакета электронной почты Python 3.2 и предоставляет :"
"class:`~email.message.Message ` как фабрика по умолчанию. Все остальные "
"политики предоставляют :class:`~email.message.EmailMessage` в качестве "
"*_factory* по умолчанию. Для получения дополнительной информации о том, что "
"еще контролирует *policy*, смотрите документацию :mod:`~email.policy`."

#: ../../library/email.parser.rst:89 ../../library/email.parser.rst:145
msgid ""
"Note: **The policy keyword should always be specified**; The default will "
"change to :data:`email.policy.default` in a future version of Python."
msgstr ""
"Примечание. **Ключевое слово политики должно указываться всегда**; В будущей "
"версии Python значение по умолчанию изменится на :data:`email.policy."
"default`."

#: ../../library/email.parser.rst:94 ../../library/email.parser.rst:122
msgid "Added the *policy* keyword."
msgstr "Добавлено ключевое слово *policy*."

#: ../../library/email.parser.rst:95
msgid "*_factory* defaults to the policy ``message_factory``."
msgstr "*_factory* по умолчанию использует политику ``message_factory``."

#: ../../library/email.parser.rst:100
msgid ""
"Feed the parser some more data.  *data* should be a :term:`bytes-like "
"object` containing one or more lines.  The lines can be partial and the "
"parser will stitch such partial lines together properly.  The lines can have "
"any of the three common line endings: carriage return, newline, or carriage "
"return and newline (they can even be mixed)."
msgstr ""
"Передайте парсеру еще немного данных. *данные* должны представлять собой :"
"term:`байтовый объект`, содержащий одну или несколько строк. Строки могут "
"быть частичными, и анализатор правильно склеит такие частичные строки. "
"Строки могут иметь любое из трех общих окончаний строки: возврат каретки, "
"новую строку или возврат каретки и новую строку (их можно даже смешивать)."

#: ../../library/email.parser.rst:109
msgid ""
"Complete the parsing of all previously fed data and return the root message "
"object.  It is undefined what happens if :meth:`~feed` is called after this "
"method has been called."
msgstr ""
"Завершите анализ всех ранее переданных данных и верните корневой объект "
"сообщения. Неизвестно, что произойдет, если :meth:`~feed` будет вызван после "
"вызова этого метода."

#: ../../library/email.parser.rst:116
msgid ""
"Works like :class:`BytesFeedParser` except that the input to the :meth:"
"`~BytesFeedParser.feed` method must be a string.  This is of limited "
"utility, since the only way for such a message to be valid is for it to "
"contain only ASCII text or, if :attr:`~email.policy.Policy.utf8` is "
"``True``, no binary attachments."
msgstr ""
"Работает как :class:`BytesFeedParser`, за исключением того, что входные "
"данные для метода :meth:`~BytesFeedParser.feed` должны быть строкой. Это "
"имеет ограниченную полезность, поскольку единственный способ сделать такое "
"сообщение действительным — это содержать только текст ASCII или, если :attr:"
"`~email.policy.Policy.utf8` имеет значение ``True``, никаких двоичных "
"файлов. вложения."

#: ../../library/email.parser.rst:126
msgid "Parser API"
msgstr "API анализатора"

#: ../../library/email.parser.rst:128
msgid ""
"The :class:`BytesParser` class, imported from the :mod:`email.parser` "
"module, provides an API that can be used to parse a message when the "
"complete contents of the message are available in a :term:`bytes-like "
"object` or file.  The :mod:`email.parser` module also provides :class:"
"`Parser` for parsing strings, and header-only parsers, :class:"
"`BytesHeaderParser` and :class:`HeaderParser`, which can be used if you're "
"only interested in the headers of the message.  :class:`BytesHeaderParser` "
"and :class:`HeaderParser` can be much faster in these situations, since they "
"do not attempt to parse the message body, instead setting the payload to the "
"raw body."
msgstr ""
"Класс :class:`BytesParser`, импортированный из модуля :mod:`email.parser`, "
"предоставляет API, который можно использовать для анализа сообщения, когда "
"полное содержимое сообщения доступно в :term:`bytes- как объект или файл. "
"Модуль :mod:`email.parser` также предоставляет :class:`Parser` для анализа "
"строк и анализаторы только заголовков :class:`BytesHeaderParser` и :class:"
"`HeaderParser`, которые можно использовать, если вы интересуют только "
"заголовки сообщений. :class:`BytesHeaderParser` и :class:`HeaderParser` "
"могут работать намного быстрее в таких ситуациях, поскольку они не пытаются "
"анализировать тело сообщения, а вместо этого устанавливают полезную нагрузку "
"в необработанное тело."

#: ../../library/email.parser.rst:141
msgid ""
"Create a :class:`BytesParser` instance.  The *_class* and *policy* arguments "
"have the same meaning and semantics as the *_factory* and *policy* arguments "
"of :class:`BytesFeedParser`."
msgstr ""
"Создайте экземпляр :class:`BytesParser`. Аргументы *_class* и *policy* имеют "
"то же значение и семантику, что и аргументы *_factory* и *policy* :class:"
"`BytesFeedParser`."

#: ../../library/email.parser.rst:148
msgid ""
"Removed the *strict* argument that was deprecated in 2.4.  Added the "
"*policy* keyword."
msgstr ""
"Удален аргумент *strict*, который устарел в версии 2.4. Добавлено ключевое "
"слово *policy*."

#: ../../library/email.parser.rst:151 ../../library/email.parser.rst:200
#: ../../library/email.parser.rst:280
msgid "*_class* defaults to the policy ``message_factory``."
msgstr "*_class* по умолчанию использует политику ``message_factory``."

#: ../../library/email.parser.rst:156
msgid ""
"Read all the data from the binary file-like object *fp*, parse the resulting "
"bytes, and return the message object.  *fp* must support both the :meth:`~io."
"IOBase.readline` and the :meth:`~io.IOBase.read` methods."
msgstr ""
"Считайте все данные из двоичного файловоподобного объекта *fp*, "
"проанализируйте полученные байты и верните объект сообщения. *fp* должен "
"поддерживать методы :meth:`~io.IOBase.readline` и :meth:`~io.IOBase.read`."

#: ../../library/email.parser.rst:161
msgid ""
"The bytes contained in *fp* must be formatted as a block of :rfc:`5322` (or, "
"if :attr:`~email.policy.Policy.utf8` is ``True``, :rfc:`6532`) style headers "
"and header continuation lines, optionally preceded by an envelope header.  "
"The header block is terminated either by the end of the data or by a blank "
"line.  Following the header block is the body of the message (which may "
"contain MIME-encoded subparts, including subparts with a :mailheader:"
"`Content-Transfer-Encoding` of ``8bit``)."
msgstr ""
"Байты, содержащиеся в *fp*, должны быть отформатированы как блок :rfc:`5322` "
"(или, если :attr:`~email.policy.Policy.utf8` имеет значение ``True``, :rfc:"
"`6532` ) заголовки стиля и строки продолжения заголовка, которым "
"необязательно предшествует заголовок конверта. Блок заголовка завершается "
"либо концом данных, либо пустой строкой. За блоком заголовка следует тело "
"сообщения (которое может содержать подразделы в кодировке MIME, включая "
"подразделы с :mailheader:`Content-Transfer-Encoding```8bit``)."

#: ../../library/email.parser.rst:169
msgid ""
"Optional *headersonly* is a flag specifying whether to stop parsing after "
"reading the headers or not.  The default is ``False``, meaning it parses the "
"entire contents of the file."
msgstr ""
"Необязательный *headersonly* — это флаг, указывающий, следует ли остановить "
"анализ после чтения заголовков или нет. По умолчанию установлено значение "
"«False», что означает, что оно анализирует все содержимое файла."

#: ../../library/email.parser.rst:176
msgid ""
"Similar to the :meth:`parse` method, except it takes a :term:`bytes-like "
"object` instead of a file-like object.  Calling this method on a :term:"
"`bytes-like object` is equivalent to wrapping *bytes* in a :class:`~io."
"BytesIO` instance first and calling :meth:`parse`."
msgstr ""
"Похож на метод :meth:`parse`, за исключением того, что он принимает :term:"
"`байтовый объект` вместо файлового объекта. Вызов этого метода для :term:"
"`bytes-подобного объекта` эквивалентен тому, чтобы сначала заключить *bytes* "
"в экземпляр :class:`~io.BytesIO` и вызвать :meth:`parse`."

#: ../../library/email.parser.rst:181 ../../library/email.parser.rst:221
msgid "Optional *headersonly* is as with the :meth:`parse` method."
msgstr "Необязательный *headersonly* аналогичен методу :meth:`parse`."

#: ../../library/email.parser.rst:188
msgid ""
"Exactly like :class:`BytesParser`, except that *headersonly* defaults to "
"``True``."
msgstr ""
"Точно так же, как :class:`BytesParser`, за исключением того, что "
"*headersonly* по умолчанию имеет значение ``True``."

#: ../../library/email.parser.rst:196
msgid ""
"This class is parallel to :class:`BytesParser`, but handles string input."
msgstr ""
"Этот класс аналогичен :class:`BytesParser`, но обрабатывает строковый ввод."

#: ../../library/email.parser.rst:198 ../../library/email.parser.rst:245
#: ../../library/email.parser.rst:258 ../../library/email.parser.rst:268
#: ../../library/email.parser.rst:278
msgid "Removed the *strict* argument.  Added the *policy* keyword."
msgstr "Удален аргумент *strict*. Добавлено ключевое слово *policy*."

#: ../../library/email.parser.rst:205
msgid ""
"Read all the data from the text-mode file-like object *fp*, parse the "
"resulting text, and return the root message object.  *fp* must support both "
"the :meth:`~io.TextIOBase.readline` and the :meth:`~io.TextIOBase.read` "
"methods on file-like objects."
msgstr ""
"Считайте все данные из файлового объекта текстового режима *fp*, "
"проанализируйте полученный текст и верните корневой объект сообщения. *fp* "
"должен поддерживать как методы :meth:`~io.TextIOBase.readline`, так и "
"методы :meth:`~io.TextIOBase.read` для файловоподобных объектов."

#: ../../library/email.parser.rst:210
msgid ""
"Other than the text mode requirement, this method operates like :meth:"
"`BytesParser.parse`."
msgstr ""
"За исключением требования текстового режима, этот метод работает как :meth:"
"`BytesParser.parse`."

#: ../../library/email.parser.rst:216
msgid ""
"Similar to the :meth:`parse` method, except it takes a string object instead "
"of a file-like object.  Calling this method on a string is equivalent to "
"wrapping *text* in a :class:`~io.StringIO` instance first and calling :meth:"
"`parse`."
msgstr ""
"Похож на метод :meth:`parse`, за исключением того, что он принимает "
"строковый объект вместо файлового объекта. Вызов этого метода для строки "
"эквивалентен первому заключению *text* в экземпляр :class:`~io.StringIO` и "
"вызову :meth:`parse`."

#: ../../library/email.parser.rst:226
msgid ""
"Exactly like :class:`Parser`, except that *headersonly* defaults to ``True``."
msgstr ""
"Точно так же, как :class:`Parser`, за исключением того, что *headersonly* по "
"умолчанию имеет значение ``True``."

#: ../../library/email.parser.rst:230
msgid ""
"Since creating a message object structure from a string or a file object is "
"such a common task, four functions are provided as a convenience.  They are "
"available in the top-level :mod:`email` package namespace."
msgstr ""
"Поскольку создание структуры объекта сообщения из строки или файлового "
"объекта является довольно распространенной задачей, для удобства "
"предусмотрены четыре функции. Они доступны в пространстве имен пакета "
"верхнего уровня :mod:`email`."

#: ../../library/email.parser.rst:239
msgid ""
"Return a message object structure from a :term:`bytes-like object`.  This is "
"equivalent to ``BytesParser().parsebytes(s)``.  Optional *_class* and "
"*policy* are interpreted as with the :class:`~email.parser.BytesParser` "
"class constructor."
msgstr ""
"Возвращает структуру объекта сообщения из объекта типа :term:`bytes`. Это "
"эквивалентно ``BytesParser().parsebytes(s)``. Необязательные *_class* и "
"*policy* интерпретируются как конструктор класса :class:`~email.parser."
"BytesParser`."

#: ../../library/email.parser.rst:252
msgid ""
"Return a message object structure tree from an open binary :term:`file "
"object`.  This is equivalent to ``BytesParser().parse(fp)``.  *_class* and "
"*policy* are interpreted as with the :class:`~email.parser.BytesParser` "
"class constructor."
msgstr ""
"Возвращает дерево структуры объекта сообщения из открытого двоичного файла :"
"term:`file object`. Это эквивалентно ``BytesParser().parse(fp)``. *_class* и "
"*policy* интерпретируются как конструктор класса :class:`~email.parser."
"BytesParser`."

#: ../../library/email.parser.rst:264
msgid ""
"Return a message object structure from a string.  This is equivalent to "
"``Parser().parsestr(s)``.  *_class* and *policy* are interpreted as with "
"the :class:`~email.parser.Parser` class constructor."
msgstr ""
"Возвращает структуру объекта сообщения из строки. Это эквивалентно "
"``Parser().parsestr(s)``. *_class* и *policy* интерпретируются как "
"конструктор класса :class:`~email.parser.Parser`."

#: ../../library/email.parser.rst:274
msgid ""
"Return a message object structure tree from an open :term:`file object`. "
"This is equivalent to ``Parser().parse(fp)``.  *_class* and *policy* are "
"interpreted as with the :class:`~email.parser.Parser` class constructor."
msgstr ""
"Возвращает дерево структуры объекта сообщения из открытого :term:`файлового "
"объекта`. Это эквивалентно ``Parser().parse(fp)``. *_class* и *policy* "
"интерпретируются как конструктор класса :class:`~email.parser.Parser`."

#: ../../library/email.parser.rst:283
msgid ""
"Here's an example of how you might use :func:`message_from_bytes` at an "
"interactive Python prompt::"
msgstr ""
"Вот пример того, как вы можете использовать :func:`message_from_bytes` в "
"интерактивной командной строке Python:"

#: ../../library/email.parser.rst:291
msgid "Additional notes"
msgstr "Дополнительные примечания"

#: ../../library/email.parser.rst:293
msgid "Here are some notes on the parsing semantics:"
msgstr "Вот некоторые примечания по семантике синтаксического анализа:"

#: ../../library/email.parser.rst:295
msgid ""
"Most non-\\ :mimetype:`multipart` type messages are parsed as a single "
"message object with a string payload.  These objects will return ``False`` "
"for :meth:`~email.message.EmailMessage.is_multipart`, and :meth:`~email."
"message.EmailMessage.iter_parts` will yield an empty list."
msgstr ""
"Большинство сообщений, отличных от \\ :mimetype:`multipart`, анализируются "
"как один объект сообщения со строковой полезной нагрузкой. Эти объекты "
"вернут ``False`` для :meth:`~email.message.EmailMessage.is_multipart`, а :"
"meth:`~email.message.EmailMessage.iter_parts` вернет пустой список."

#: ../../library/email.parser.rst:300
msgid ""
"All :mimetype:`multipart` type messages will be parsed as a container "
"message object with a list of sub-message objects for their payload.  The "
"outer container message will return ``True`` for :meth:`~email.message."
"EmailMessage.is_multipart`, and :meth:`~email.message.EmailMessage."
"iter_parts` will yield a list of subparts."
msgstr ""
"Все сообщения типа :mimetype:`multipart` будут анализироваться как объект "
"сообщения-контейнера со списком объектов подсообщения для их полезной "
"нагрузки. Сообщение внешнего контейнера вернет True для :meth:`~email."
"message.EmailMessage.is_multipart`, а :meth:`~email.message.EmailMessage."
"iter_parts` вернет список подразделов."

#: ../../library/email.parser.rst:306
msgid ""
"Most messages with a content type of :mimetype:`message/\\*` (such as :"
"mimetype:`message/delivery-status` and :mimetype:`message/rfc822`) will also "
"be parsed as container object containing a list payload of length 1.  Their :"
"meth:`~email.message.EmailMessage.is_multipart` method will return ``True``. "
"The single element yielded by :meth:`~email.message.EmailMessage.iter_parts` "
"will be a sub-message object."
msgstr ""
"Большинство сообщений с типом контента :mimetype:`message/\\*` (например, :"
"mimetype:`message/delivery-status` и :mimetype:`message/rfc822`) также будут "
"анализироваться как объект-контейнер, содержащий полезную нагрузку списка. "
"длиной 1. Их метод :meth:`~email.message.EmailMessage.is_multipart` вернет "
"``True``. Единственный элемент, полученный с помощью :meth:`~email.message."
"EmailMessage.iter_parts`, будет объектом подсообщения."

#: ../../library/email.parser.rst:313
msgid ""
"Some non-standards-compliant messages may not be internally consistent about "
"their :mimetype:`multipart`\\ -edness.  Such messages may have a :mailheader:"
"`Content-Type` header of type :mimetype:`multipart`, but their :meth:`~email."
"message.EmailMessage.is_multipart` method may return ``False``. If such "
"messages were parsed with the :class:`~email.parser.FeedParser`, they will "
"have an instance of the :class:`~email.errors."
"MultipartInvariantViolationDefect` class in their *defects* attribute list.  "
"See :mod:`email.errors` for details."
msgstr ""
"Некоторые не соответствующие стандартам сообщения могут быть внутренне "
"несогласованными в отношении их :mimetype:`multipart`\\ -edness. Такие "
"сообщения могут иметь заголовок :mailheader:`Content-Type` типа :mimetype:"
"`multipart`, но их метод :meth:`~email.message.EmailMessage.is_multipart` "
"может возвращать ``False``. Если такие сообщения были проанализированы с "
"помощью :class:`~email.parser.FeedParser`, они будут иметь экземпляр класса :"
"class:`~email.errors.MultipartInvariantViolationDefect` в списке атрибутов "
"*defects*. Подробности смотрите в :mod:`email.errors`."
