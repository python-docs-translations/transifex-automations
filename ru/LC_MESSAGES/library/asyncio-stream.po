# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-28 14:56+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr "Потоки"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**Исходный код:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""
"Потоки — это примитивы высокого уровня, готовые к асинхронности и ожиданию, "
"для работы с сетевыми подключениями. Потоки позволяют отправлять и получать "
"данные без использования обратных вызовов или низкоуровневых протоколов и "
"транспортов."

#: ../../library/asyncio-stream.rst:19
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""
"Вот пример эхо-клиента TCP, написанного с использованием потоков asyncio:"

#: ../../library/asyncio-stream.rst:22 ../../library/asyncio-stream.rst:415
msgid ""
"import asyncio\n"
"\n"
"async def tcp_echo_client(message):\n"
"    reader, writer = await asyncio.open_connection(\n"
"        '127.0.0.1', 8888)\n"
"\n"
"    print(f'Send: {message!r}')\n"
"    writer.write(message.encode())\n"
"    await writer.drain()\n"
"\n"
"    data = await reader.read(100)\n"
"    print(f'Received: {data.decode()!r}')\n"
"\n"
"    print('Close the connection')\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"asyncio.run(tcp_echo_client('Hello World!'))"
msgstr ""
"import asyncio\n"
"\n"
"async def tcp_echo_client(message):\n"
"    reader, writer = await asyncio.open_connection(\n"
"        '127.0.0.1', 8888)\n"
"\n"
"    print(f'Send: {message!r}')\n"
"    writer.write(message.encode())\n"
"    await writer.drain()\n"
"\n"
"    data = await reader.read(100)\n"
"    print(f'Received: {data.decode()!r}')\n"
"\n"
"    print('Close the connection')\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"asyncio.run(tcp_echo_client('Hello World!'))"

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "См. также раздел «Примеры» ниже."

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr "Потоковые функции"

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""
"Следующие функции asyncio верхнего уровня можно использовать для создания "
"потоков и работы с ними:"

#: ../../library/asyncio-stream.rst:59
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""
"Установите сетевое соединение и верните пару объектов (читатель, писатель)."

#: ../../library/asyncio-stream.rst:62
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""
"Возвращенные объекты *reader* и *writer* являются экземплярами классов :"
"class:`StreamReader` и :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:65 ../../library/asyncio-stream.rst:111
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""
"*limit* определяет предел размера буфера, используемый возвращаемым "
"экземпляром :class:`StreamReader`. По умолчанию *предел* установлен на 64 "
"КиБ."

#: ../../library/asyncio-stream.rst:69
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""
"Остальные аргументы передаются непосредственно в :meth:`loop."
"create_connection`."

#: ../../library/asyncio-stream.rst:74 ../../library/asyncio-stream.rst:150
msgid ""
"The *sock* argument transfers ownership of the socket to the :class:"
"`StreamWriter` created. To close the socket, call its :meth:`~asyncio."
"StreamWriter.close` method."
msgstr ""
"Аргумент *sock* передает право собственности на сокет созданному :class:"
"`StreamWriter`. Чтобы закрыть сокет, вызовите его метод :meth:`~asyncio."
"StreamWriter.close`."

#: ../../library/asyncio-stream.rst:78
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "Добавлен параметр *ssl_handshake_timeout*."

#: ../../library/asyncio-stream.rst:81
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr "Добавлены параметры *happy_eyeballs_delay* и *interleave*."

#: ../../library/asyncio-stream.rst:84 ../../library/asyncio-stream.rst:127
#: ../../library/asyncio-stream.rst:160 ../../library/asyncio-stream.rst:191
msgid "Removed the *loop* parameter."
msgstr "Удален параметр *loop*."

#: ../../library/asyncio-stream.rst:87 ../../library/asyncio-stream.rst:130
#: ../../library/asyncio-stream.rst:163 ../../library/asyncio-stream.rst:194
#: ../../library/asyncio-stream.rst:382
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr "Добавлен параметр *ssl_shutdown_timeout*."

#: ../../library/asyncio-stream.rst:100
msgid "Start a socket server."
msgstr "Запустите сервер сокетов."

#: ../../library/asyncio-stream.rst:102
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""
"Обратный вызов *client_connected_cb* вызывается всякий раз, когда "
"устанавливается новое клиентское соединение. Он получает пару ``(читатель, "
"писатель)`` в качестве двух аргументов, экземпляров классов :class:"
"`StreamReader` и :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:107
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""
"*client_connected_cb* может быть простой вызываемой функцией или функцией "
"сопрограммы <coroutine>`; если это функция сопрограммы, она будет "
"автоматически запланирована как :class:`Task`."

#: ../../library/asyncio-stream.rst:115
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""
"Остальные аргументы передаются непосредственно в :meth:`loop.create_server`."

#: ../../library/asyncio-stream.rst:120 ../../library/asyncio-stream.rst:181
msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""
"Аргумент *sock* передает право собственности на сокет созданному серверу. "
"Чтобы закрыть сокет, вызовите метод сервера :meth:`~asyncio.Server.close`."

#: ../../library/asyncio-stream.rst:124
msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr "Добавлены параметры *ssl_handshake_timeout* и *start_serving*."

#: ../../library/asyncio-stream.rst:135
msgid "Unix Sockets"
msgstr "Сокеты Unix"

#: ../../library/asyncio-stream.rst:141
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""
"Установите соединение с сокетом Unix и верните пару ``(reader, Writer)``."

#: ../../library/asyncio-stream.rst:144
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr "Похож на :func:`open_connection`, но работает с сокетами Unix."

#: ../../library/asyncio-stream.rst:146
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr "См. также документацию :meth:`loop.create_unix_connection`."

#: ../../library/asyncio-stream.rst:154 ../../library/asyncio-stream.rst:185
msgid "Availability"
msgstr "Доступность"

#: ../../library/asyncio-stream.rst:156
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`"
msgstr ""
"Добавлен параметр *ssl_handshake_timeout*. Параметр *path* теперь может "
"быть :term:`путеподобным объектом`"

#: ../../library/asyncio-stream.rst:173
msgid "Start a Unix socket server."
msgstr "Запустите сервер сокетов Unix."

#: ../../library/asyncio-stream.rst:175
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr "Похож на :func:`start_server`, но работает с сокетами Unix."

#: ../../library/asyncio-stream.rst:177
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "См. также документацию :meth:`loop.create_unix_server`."

#: ../../library/asyncio-stream.rst:187
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :term:`path-like object`."
msgstr ""
"Добавлены параметры *ssl_handshake_timeout* и *start_serving*. Параметр "
"*path* теперь может быть объектом, похожим на путь."

#: ../../library/asyncio-stream.rst:199
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:203
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream. As an :term:`asynchronous iterable`, the object supports the :"
"keyword:`async for` statement."
msgstr ""
"Представляет объект чтения, предоставляющий API для чтения данных из потока "
"ввода-вывода. Как :term:`асинхронный итерируемый` объект поддерживает "
"оператор :keyword:`async for`."

#: ../../library/asyncio-stream.rst:207
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Не рекомендуется создавать экземпляры объектов *StreamReader* напрямую; "
"вместо этого используйте :func:`open_connection` и :func:`start_server`."

#: ../../library/asyncio-stream.rst:213
msgid "Acknowledge the EOF."
msgstr "Подтвердите EOF."

#: ../../library/asyncio-stream.rst:218
msgid "Read up to *n* bytes from the stream."
msgstr "Считайте до *n* байт из потока."

#: ../../library/asyncio-stream.rst:220
msgid ""
"If *n* is not provided or set to ``-1``, read until EOF, then return all "
"read :class:`bytes`. If EOF was received and the internal buffer is empty, "
"return an empty ``bytes`` object."
msgstr ""
"Если *n* не указано или установлено в ``-1``, читайте до EOF, затем "
"возвращайте все прочитанные :class:`bytes`. Если получен EOF и внутренний "
"буфер пуст, верните пустой объект ``bytes``."

#: ../../library/asyncio-stream.rst:225
msgid "If *n* is ``0``, return an empty ``bytes`` object immediately."
msgstr "Если *n* равно ``0``, немедленно вернуть пустой объект ``bytes``."

#: ../../library/asyncio-stream.rst:227
msgid ""
"If *n* is positive, return at most *n* available ``bytes`` as soon as at "
"least 1 byte is available in the internal buffer. If EOF is received before "
"any byte is read, return an empty ``bytes`` object."
msgstr ""
"Если *n* положительное значение, вернуть не более *n* доступных ``байтов``, "
"как только во внутреннем буфере станет доступен хотя бы 1 байт. Если EOF "
"получен до того, как прочитан какой-либо байт, верните пустой объект "
"``bytes``."

#: ../../library/asyncio-stream.rst:235
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""
"Прочитайте одну строку, где «строка» — это последовательность байтов, "
"заканчивающаяся ``\\n``."

#: ../../library/asyncio-stream.rst:238
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""
"Если получен EOF и ``\\n`` не найден, метод возвращает частично прочитанные "
"данные."

#: ../../library/asyncio-stream.rst:241
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""
"Если получен EOF и внутренний буфер пуст, верните пустой объект ``bytes``."

#: ../../library/asyncio-stream.rst:247
msgid "Read exactly *n* bytes."
msgstr "Прочитайте ровно *n* байт."

#: ../../library/asyncio-stream.rst:249
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""
"Вызовите :exc:`IncompleteReadError`, если EOF достигнут до того, как *n* "
"может быть прочитано. Используйте атрибут :attr:`IncompleteReadError."
"partial`, чтобы получить частично прочитанные данные."

#: ../../library/asyncio-stream.rst:256
msgid "Read data from the stream until *separator* is found."
msgstr ""
"Чтение данных из потока до тех пор, пока не будет найден *разделитель*."

#: ../../library/asyncio-stream.rst:258
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"В случае успеха данные и разделитель будут удалены из внутреннего буфера "
"(израсходованы). Возвращенные данные будут содержать разделитель в конце."

#: ../../library/asyncio-stream.rst:262
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""
"Если объем прочитанных данных превышает настроенный предел потока, возникает "
"исключение :exc:`LimitOverrunError`, и данные остаются во внутреннем буфере "
"и могут быть прочитаны снова."

#: ../../library/asyncio-stream.rst:266
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""
"Если EOF достигается до того, как будет найден полный разделитель, возникает "
"исключение :exc:`IncompleteReadError` и внутренний буфер сбрасывается. "
"Атрибут :attr:`IncompleteReadError.partial` может содержать часть "
"разделителя."

#: ../../library/asyncio-stream.rst:275
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr "Верните ``True``, если буфер пуст и был вызван :meth:`feed_eof`."

#: ../../library/asyncio-stream.rst:280
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:284
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""
"Представляет объект записи, предоставляющий API для записи данных в поток "
"ввода-вывода."

#: ../../library/asyncio-stream.rst:287
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Не рекомендуется создавать экземпляры объектов *StreamWriter* напрямую; "
"вместо этого используйте :func:`open_connection` и :func:`start_server`."

#: ../../library/asyncio-stream.rst:293
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Метод пытается немедленно записать *данные* в базовый сокет. Если это не "
"удается, данные помещаются в очередь во внутреннем буфере записи до тех пор, "
"пока их нельзя будет отправить."

#: ../../library/asyncio-stream.rst:297 ../../library/asyncio-stream.rst:309
msgid "The method should be used along with the ``drain()`` method::"
msgstr "Этот метод следует использовать вместе с методом ``drain()``::"

#: ../../library/asyncio-stream.rst:299
msgid ""
"stream.write(data)\n"
"await stream.drain()"
msgstr ""
"stream.write(data)\n"
"await stream.drain()"

#: ../../library/asyncio-stream.rst:304
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Метод немедленно записывает список (или любой итерируемый объект) байтов в "
"базовый сокет. Если это не удается, данные помещаются в очередь во "
"внутреннем буфере записи до тех пор, пока их нельзя будет отправить."

#: ../../library/asyncio-stream.rst:311
msgid ""
"stream.writelines(lines)\n"
"await stream.drain()"
msgstr ""
"stream.writelines(lines)\n"
"await stream.drain()"

#: ../../library/asyncio-stream.rst:316
msgid "The method closes the stream and the underlying socket."
msgstr "Метод закрывает поток и базовый сокет."

#: ../../library/asyncio-stream.rst:318
msgid ""
"The method should be used, though not mandatory, along with the "
"``wait_closed()`` method::"
msgstr ""
"Этот метод следует использовать, хотя и не обязательно, вместе с методом "
"wait_closed():"

#: ../../library/asyncio-stream.rst:321
msgid ""
"stream.close()\n"
"await stream.wait_closed()"
msgstr ""
"stream.close()\n"
"await stream.wait_closed()"

#: ../../library/asyncio-stream.rst:326
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""
"Возвращайте True, если базовый транспорт поддерживает метод :meth:write_eof, "
"в противном случае — False."

#: ../../library/asyncio-stream.rst:331
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""
"Закройте конец записи потока после того, как буферизованные данные записи "
"будут очищены."

#: ../../library/asyncio-stream.rst:336
msgid "Return the underlying asyncio transport."
msgstr "Верните базовый транспорт asyncio."

#: ../../library/asyncio-stream.rst:340
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""
"Доступ к дополнительной транспортной информации; подробности см. в :meth:"
"`BaseTransport.get_extra_info`."

#: ../../library/asyncio-stream.rst:346
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""
"Подождите, пока не станет возможным возобновить запись в поток. Пример::"

#: ../../library/asyncio-stream.rst:349
msgid ""
"writer.write(data)\n"
"await writer.drain()"
msgstr ""
"writer.write(data)\n"
"await writer.drain()"

#: ../../library/asyncio-stream.rst:352
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""
"Это метод управления потоком, который взаимодействует с базовым буфером "
"записи ввода-вывода. Когда размер буфера достигает верхнего уровня, "
"*drain()* блокируется до тех пор, пока размер буфера не опустошится до "
"нижнего уровня и запись не будет возобновлена. Когда ждать нечего, :meth:"
"`drain` возвращается немедленно."

#: ../../library/asyncio-stream.rst:363
msgid "Upgrade an existing stream-based connection to TLS."
msgstr "Обновите существующее потоковое соединение до TLS."

#: ../../library/asyncio-stream.rst:365
msgid "Parameters:"
msgstr "Параметры:"

#: ../../library/asyncio-stream.rst:367
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext*: настроенный экземпляр :class:`~ssl.SSLContext`."

#: ../../library/asyncio-stream.rst:369
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""
"*server_hostname*: устанавливает или переопределяет имя хоста, с которым "
"будет сопоставляться сертификат целевого сервера."

#: ../../library/asyncio-stream.rst:372
msgid ""
"*ssl_handshake_timeout* is the time in seconds to wait for the TLS handshake "
"to complete before aborting the connection.  ``60.0`` seconds if ``None`` "
"(default)."
msgstr ""
"*ssl_handshake_timeout* — время в секундах ожидания завершения подтверждения "
"TLS перед прерыванием соединения. ``60,0`` секунд, если ``Нет`` (по "
"умолчанию)."

#: ../../library/asyncio-stream.rst:376
msgid ""
"*ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown "
"to complete before aborting the connection. ``30.0`` seconds if ``None`` "
"(default)."
msgstr ""
"*ssl_shutdown_timeout* — время в секундах ожидания завершения завершения "
"работы SSL перед прерыванием соединения. ``30,0`` секунд, если ``Нет`` (по "
"умолчанию)."

#: ../../library/asyncio-stream.rst:388
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr "Верните True, если поток закрыт или находится в процессе закрытия."

#: ../../library/asyncio-stream.rst:396
msgid "Wait until the stream is closed."
msgstr "Подождите, пока поток не закроется."

#: ../../library/asyncio-stream.rst:398
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed, ensuring that all data has been flushed before e.g. exiting the "
"program."
msgstr ""
"Должен вызываться после :meth:`close`, чтобы дождаться закрытия базового "
"соединения, гарантируя, что все данные были сброшены, например, перед "
"выходом из программы."

#: ../../library/asyncio-stream.rst:406
msgid "Examples"
msgstr "Примеры"

#: ../../library/asyncio-stream.rst:411
msgid "TCP echo client using streams"
msgstr "TCP-эхо-клиент, использующий потоки"

#: ../../library/asyncio-stream.rst:413
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr "Эхо-клиент TCP, использующий функцию :func:`asyncio.open_connection`::"

#: ../../library/asyncio-stream.rst:437
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""
"В примере протокола клиента TCP echo "
"<asyncio_example_tcp_echo_client_protocol>` используется низкоуровневый "
"метод :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:444
msgid "TCP echo server using streams"
msgstr "TCP-эхо-сервер, использующий потоки"

#: ../../library/asyncio-stream.rst:446
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr "Эхо-сервер TCP, использующий функцию :func:`asyncio.start_server`::"

#: ../../library/asyncio-stream.rst:448
msgid ""
"import asyncio\n"
"\n"
"async def handle_echo(reader, writer):\n"
"    data = await reader.read(100)\n"
"    message = data.decode()\n"
"    addr = writer.get_extra_info('peername')\n"
"\n"
"    print(f\"Received {message!r} from {addr!r}\")\n"
"\n"
"    print(f\"Send: {message!r}\")\n"
"    writer.write(data)\n"
"    await writer.drain()\n"
"\n"
"    print(\"Close the connection\")\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"async def main():\n"
"    server = await asyncio.start_server(\n"
"        handle_echo, '127.0.0.1', 8888)\n"
"\n"
"    addrs = ', '.join(str(sock.getsockname()) for sock in server.sockets)\n"
"    print(f'Serving on {addrs}')\n"
"\n"
"    async with server:\n"
"        await server.serve_forever()\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def handle_echo(reader, writer):\n"
"    data = await reader.read(100)\n"
"    message = data.decode()\n"
"    addr = writer.get_extra_info('peername')\n"
"\n"
"    print(f\"Received {message!r} from {addr!r}\")\n"
"\n"
"    print(f\"Send: {message!r}\")\n"
"    writer.write(data)\n"
"    await writer.drain()\n"
"\n"
"    print(\"Close the connection\")\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"async def main():\n"
"    server = await asyncio.start_server(\n"
"        handle_echo, '127.0.0.1', 8888)\n"
"\n"
"    addrs = ', '.join(str(sock.getsockname()) for sock in server.sockets)\n"
"    print(f'Serving on {addrs}')\n"
"\n"
"    async with server:\n"
"        await server.serve_forever()\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio-stream.rst:480
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""
"В примере протокола эхо-сервера TCP "
"<asyncio_example_tcp_echo_server_protocol>` используется метод :meth:`loop."
"create_server`."

#: ../../library/asyncio-stream.rst:485
msgid "Get HTTP headers"
msgstr "Получить HTTP-заголовки"

#: ../../library/asyncio-stream.rst:487
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""
"Простой пример запроса HTTP-заголовков URL-адреса, переданного в командной "
"строке:"

#: ../../library/asyncio-stream.rst:489
msgid ""
"import asyncio\n"
"import urllib.parse\n"
"import sys\n"
"\n"
"async def print_http_headers(url):\n"
"    url = urllib.parse.urlsplit(url)\n"
"    if url.scheme == 'https':\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 443, ssl=True)\n"
"    else:\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 80)\n"
"\n"
"    query = (\n"
"        f\"HEAD {url.path or '/'} HTTP/1.0\\r\\n\"\n"
"        f\"Host: {url.hostname}\\r\\n\"\n"
"        f\"\\r\\n\"\n"
"    )\n"
"\n"
"    writer.write(query.encode('latin-1'))\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        if not line:\n"
"            break\n"
"\n"
"        line = line.decode('latin1').rstrip()\n"
"        if line:\n"
"            print(f'HTTP header> {line}')\n"
"\n"
"    # Ignore the body, close the socket\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"url = sys.argv[1]\n"
"asyncio.run(print_http_headers(url))"
msgstr ""
"import asyncio\n"
"import urllib.parse\n"
"import sys\n"
"\n"
"async def print_http_headers(url):\n"
"    url = urllib.parse.urlsplit(url)\n"
"    if url.scheme == 'https':\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 443, ssl=True)\n"
"    else:\n"
"        reader, writer = await asyncio.open_connection(\n"
"            url.hostname, 80)\n"
"\n"
"    query = (\n"
"        f\"HEAD {url.path or '/'} HTTP/1.0\\r\\n\"\n"
"        f\"Host: {url.hostname}\\r\\n\"\n"
"        f\"\\r\\n\"\n"
"    )\n"
"\n"
"    writer.write(query.encode('latin-1'))\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        if not line:\n"
"            break\n"
"\n"
"        line = line.decode('latin1').rstrip()\n"
"        if line:\n"
"            print(f'HTTP header> {line}')\n"
"\n"
"    # Ignore the body, close the socket\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"url = sys.argv[1]\n"
"asyncio.run(print_http_headers(url))"

#: ../../library/asyncio-stream.rst:526
msgid "Usage::"
msgstr "Использование::"

#: ../../library/asyncio-stream.rst:528
msgid "python example.py http://example.com/path/page.html"
msgstr "python example.py http://example.com/path/page.html"

#: ../../library/asyncio-stream.rst:530
msgid "or with HTTPS::"
msgstr "или с HTTPS::"

#: ../../library/asyncio-stream.rst:532
msgid "python example.py https://example.com/path/page.html"
msgstr "python example.py https://example.com/path/page.html"

#: ../../library/asyncio-stream.rst:538
msgid "Register an open socket to wait for data using streams"
msgstr "Зарегистрируйте открытый сокет для ожидания данных с помощью потоков"

#: ../../library/asyncio-stream.rst:540
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""
"Сопрограмма ожидает, пока сокет не получит данные, используя функцию :func:"
"`open_connection`::"

#: ../../library/asyncio-stream.rst:543
msgid ""
"import asyncio\n"
"import socket\n"
"\n"
"async def wait_for_data():\n"
"    # Get a reference to the current event loop because\n"
"    # we want to access low-level APIs.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a pair of connected sockets.\n"
"    rsock, wsock = socket.socketpair()\n"
"\n"
"    # Register the open socket to wait for data.\n"
"    reader, writer = await asyncio.open_connection(sock=rsock)\n"
"\n"
"    # Simulate the reception of data from the network\n"
"    loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"    # Wait for data\n"
"    data = await reader.read(100)\n"
"\n"
"    # Got data, we are done: close the socket\n"
"    print(\"Received:\", data.decode())\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"    # Close the second socket\n"
"    wsock.close()\n"
"\n"
"asyncio.run(wait_for_data())"
msgstr ""
"import asyncio\n"
"import socket\n"
"\n"
"async def wait_for_data():\n"
"    # Get a reference to the current event loop because\n"
"    # we want to access low-level APIs.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a pair of connected sockets.\n"
"    rsock, wsock = socket.socketpair()\n"
"\n"
"    # Register the open socket to wait for data.\n"
"    reader, writer = await asyncio.open_connection(sock=rsock)\n"
"\n"
"    # Simulate the reception of data from the network\n"
"    loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"    # Wait for data\n"
"    data = await reader.read(100)\n"
"\n"
"    # Got data, we are done: close the socket\n"
"    print(\"Received:\", data.decode())\n"
"    writer.close()\n"
"    await writer.wait_closed()\n"
"\n"
"    # Close the second socket\n"
"    wsock.close()\n"
"\n"
"asyncio.run(wait_for_data())"

#: ../../library/asyncio-stream.rst:575
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""
"В примере :ref:`регистрации открытого сокета для ожидания данных с "
"использованием протокола <asyncio_example_create_connection>` используется "
"протокол низкого уровня и метод :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:579
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
"В примере :ref:`наблюдения за файловым дескриптором на предмет событий "
"чтения <asyncio_example_watch_fd>` используется низкоуровневый метод :meth:"
"`loop.add_reader` для просмотра файлового дескриптора."
