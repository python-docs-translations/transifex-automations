# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- Рациональные числа"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Исходный код:** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""
"Модуль :mod:`fractions` обеспечивает поддержку арифметики рациональных чисел."

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"Экземпляр Fraction может быть создан из пары целых чисел, другого "
"рационального числа или строки."

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""

#: ../../library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are :term:`hashable`, and should be "
"treated as immutable.  In addition, :class:`Fraction` has the following "
"properties and methods:"
msgstr ""
"Класс :class:`Fraction` наследует абстрактный базовый класс :class:`numbers."
"Rational` и реализует все методы и операции этого класса. Экземпляры :class:"
"`Fraction` :term:`hashable` и должны рассматриваться как неизменяемые. Кроме "
"того, :class:`Fraction` имеет следующие свойства и методы:"

#: ../../library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
"Конструктор :class:`Fraction` теперь принимает экземпляры :class:`float` и :"
"class:`decimal.Decimal`."

#: ../../library/fractions.rst:87
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always return a :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""

#: ../../library/fractions.rst:94
msgid "Numerator of the Fraction in lowest term."
msgstr "Числитель дроби в наименьшем члене."

#: ../../library/fractions.rst:98
msgid "Denominator of the Fraction in lowest term."
msgstr "Знаменатель дроби в наименьшем члене."

#: ../../library/fractions.rst:103
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr ""

#: ../../library/fractions.rst:110
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or :"
"class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"Альтернативный конструктор, который принимает только экземпляры :class:"
"`float` или :class:`numbers.Integral`. Помните, что Fraction.from_float(0.3) "
"— это не то же самое значение, что Fraction(3, 10)``."

#: ../../library/fractions.rst:116
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"Начиная с Python 3.2, вы также можете создать экземпляр :class:`Fraction` "
"непосредственно из :class:`float`."

#: ../../library/fractions.rst:122
msgid ""
"Alternative constructor which only accepts instances of :class:`decimal."
"Decimal` or :class:`numbers.Integral`."
msgstr ""
"Альтернативный конструктор, который принимает только экземпляры :class:"
"`decimal.Decimal` или :class:`numbers.Integral`."

#: ../../library/fractions.rst:127
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"Начиная с Python 3.2, вы также можете создать экземпляр :class:`Fraction` "
"непосредственно из экземпляра :class:`decimal.Decimal`."

#: ../../library/fractions.rst:134
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"Находит и возвращает ближайшую :class:`Fraction` к ``self``, знаменатель "
"которой не превышает max_denominator. Этот метод полезен для поиска "
"рациональных приближений к заданному числу с плавающей запятой:"

#: ../../library/fractions.rst:142
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""
"или для восстановления рационального числа, представленного в виде числа с "
"плавающей запятой:"

#: ../../library/fractions.rst:155
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"Возвращает наибольшее :class:`int` ``<= self``. Доступ к этому методу также "
"можно получить через функцию :func:`math.floor`:"

#: ../../library/fractions.rst:165
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"Возвращает наименьшее значение :class:`int` ``>= self``. Доступ к этому "
"методу также можно получить через функцию :func:`math.ceil`."

#: ../../library/fractions.rst:172
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"Первая версия возвращает ближайшее :class:`int` к ``self``, округляя "
"половину до четного. Вторая версия округляет ``self`` до ближайшего числа, "
"кратного ``Fraction(1, 10**ndigits)`` (логически, если ``ndigits`` "
"отрицательно), снова округляя половину в сторону четности. Доступ к этому "
"методу также можно получить через функцию :func:`round`."

#: ../../library/fractions.rst:181
msgid "Module :mod:`numbers`"
msgstr "Модуль :mod:`numbers`"

#: ../../library/fractions.rst:182
msgid "The abstract base classes making up the numeric tower."
msgstr "Абстрактные базовые классы, составляющие числовую башню."
