# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/signal.rst:2
msgid ":mod:`!signal` --- Set handlers for asynchronous events"
msgstr ":mod:`!signal` --- Set handlers for asynchronous events"

#: ../../library/signal.rst:7
msgid "**Source code:** :source:`Lib/signal.py`"
msgstr "**Исходный код:** :source:`Lib/signal.py`"

#: ../../library/signal.rst:11
msgid "This module provides mechanisms to use signal handlers in Python."
msgstr ""
"Этот модуль предоставляет механизмы для использования обработчиков сигналов "
"в Python."

#: ../../library/signal.rst:15
msgid "General rules"
msgstr "Общие правила"

#: ../../library/signal.rst:17
msgid ""
"The :func:`signal.signal` function allows defining custom handlers to be "
"executed when a signal is received.  A small number of default handlers are "
"installed: :const:`SIGPIPE` is ignored (so write errors on pipes and sockets "
"can be reported as ordinary Python exceptions) and :const:`SIGINT` is "
"translated into a :exc:`KeyboardInterrupt` exception if the parent process "
"has not changed it."
msgstr ""
"Функция :func:`signal.signal` позволяет определить пользовательские "
"обработчики, которые будут выполняться при получении сигнала. "
"Устанавливается небольшое количество обработчиков по умолчанию: :const:"
"`SIGPIPE` игнорируется (поэтому ошибки записи в каналах и сокетах могут "
"сообщаться как обычные исключения Python), а :const:`SIGINT` преобразуется "
"в :exc:`KeyboardInterrupt` исключение, если родительский процесс не изменил "
"его."

#: ../../library/signal.rst:24
msgid ""
"A handler for a particular signal, once set, remains installed until it is "
"explicitly reset (Python emulates the BSD style interface regardless of the "
"underlying implementation), with the exception of the handler for :const:"
"`SIGCHLD`, which follows the underlying implementation."
msgstr ""
"Обработчик для определенного сигнала, однажды установленный, остается "
"установленным до тех пор, пока он не будет явно сброшен (Python эмулирует "
"интерфейс стиля BSD независимо от базовой реализации), за исключением "
"обработчика :const:`SIGCHLD`, который следует базовой реализации. ."

#: ../../library/signal.rst:29
msgid ""
"On WebAssembly platforms ``wasm32-emscripten`` and ``wasm32-wasi``, signals "
"are emulated and therefore behave differently. Several functions and signals "
"are not available on these platforms."
msgstr ""
"На платформах WebAssembly «wasm32-emscripten» и «wasm32-wasi» сигналы "
"эмулируются и поэтому ведут себя по-разному. Некоторые функции и сигналы "
"недоступны на этих платформах."

#: ../../library/signal.rst:34
msgid "Execution of Python signal handlers"
msgstr "Выполнение обработчиков сигналов Python"

#: ../../library/signal.rst:36
msgid ""
"A Python signal handler does not get executed inside the low-level (C) "
"signal handler.  Instead, the low-level signal handler sets a flag which "
"tells the :term:`virtual machine` to execute the corresponding Python signal "
"handler at a later point(for example at the next :term:`bytecode` "
"instruction). This has consequences:"
msgstr ""
"Обработчик сигналов Python не выполняется внутри обработчика сигналов "
"низкого уровня (C). Вместо этого обработчик сигнала низкого уровня "
"устанавливает флаг, который указывает виртуальной машине выполнить "
"соответствующий обработчик сигнала Python на более позднем этапе (например, "
"при следующей инструкции :term:`bytecode`). Это имеет последствия:"

#: ../../library/signal.rst:42
msgid ""
"It makes little sense to catch synchronous errors like :const:`SIGFPE` or :"
"const:`SIGSEGV` that are caused by an invalid operation in C code.  Python "
"will return from the signal handler to the C code, which is likely to raise "
"the same signal again, causing Python to apparently hang.  From Python 3.3 "
"onwards, you can use the :mod:`faulthandler` module to report on synchronous "
"errors."
msgstr ""
"Нет смысла ловить синхронные ошибки, такие как :const:`SIGFPE` или :const:"
"`SIGSEGV`, которые вызваны недопустимой операцией в коде C. Python вернется "
"из обработчика сигнала в код C, который, скорее всего, снова выдаст тот же "
"сигнал, что, по-видимому, приведет к зависанию Python. Начиная с Python 3.3, "
"вы можете использовать модуль :mod:`faulthandler` для сообщения о синхронных "
"ошибках."

#: ../../library/signal.rst:49
msgid ""
"A long-running calculation implemented purely in C (such as regular "
"expression matching on a large body of text) may run uninterrupted for an "
"arbitrary amount of time, regardless of any signals received.  The Python "
"signal handlers will be called when the calculation finishes."
msgstr ""
"Длительные вычисления, реализованные исключительно на C (например, "
"сопоставление регулярных выражений с большим объемом текста), могут "
"выполняться непрерывно в течение произвольного периода времени, независимо "
"от каких-либо полученных сигналов. Обработчики сигналов Python будут вызваны "
"после завершения расчета."

#: ../../library/signal.rst:54
msgid ""
"If the handler raises an exception, it will be raised \"out of thin air\" in "
"the main thread. See the :ref:`note below <handlers-and-exceptions>` for a "
"discussion."
msgstr ""
"Если обработчик вызывает исключение, оно будет вызвано «из воздуха» в "
"основном потоке. См. обсуждение в примечании ниже <handlers-and-Exceptions>."

#: ../../library/signal.rst:62
msgid "Signals and threads"
msgstr "Сигналы и потоки"

#: ../../library/signal.rst:64
msgid ""
"Python signal handlers are always executed in the main Python thread of the "
"main interpreter, even if the signal was received in another thread.  This "
"means that signals can't be used as a means of inter-thread communication.  "
"You can use the synchronization primitives from the :mod:`threading` module "
"instead."
msgstr ""
"Обработчики сигналов Python всегда выполняются в основном потоке Python "
"основного интерпретатора, даже если сигнал был получен в другом потоке. Это "
"означает, что сигналы не могут использоваться в качестве средства "
"межпотоковой связи. Вместо этого вы можете использовать примитивы "
"синхронизации из модуля :mod:`threading`."

#: ../../library/signal.rst:69
msgid ""
"Besides, only the main thread of the main interpreter is allowed to set a "
"new signal handler."
msgstr ""
"Кроме того, только основному потоку основного интерпретатора разрешено "
"устанавливать новый обработчик сигнала."

#: ../../library/signal.rst:73
msgid "Module contents"
msgstr "Содержимое модуля"

#: ../../library/signal.rst:75
msgid ""
"signal (SIG*), handler (:const:`SIG_DFL`, :const:`SIG_IGN`) and sigmask (:"
"const:`SIG_BLOCK`, :const:`SIG_UNBLOCK`, :const:`SIG_SETMASK`) related "
"constants listed below were turned into :class:`enums <enum.IntEnum>` (:"
"class:`Signals`, :class:`Handlers` and :class:`Sigmasks` respectively). :"
"func:`getsignal`, :func:`pthread_sigmask`, :func:`sigpending` and :func:"
"`sigwait` functions return human-readable :class:`enums <enum.IntEnum>` as :"
"class:`Signals` objects."
msgstr ""
"сигнал (SIG*), обработчик (:const:`SIG_DFL`, :const:`SIG_IGN`) и сигмаска (:"
"const:`SIG_BLOCK`, :const:`SIG_UNBLOCK`, :const:`SIG_SETMASK`), связанные "
"константы, перечисленные ниже были преобразованы в :class:`enums <enum."
"IntEnum>` (:class:`Signals`, :class:`Handlers` и :class:`Sigmasks` "
"соответственно). Функции :func:`getsignal`, :func:`pthread_sigmask`, :func:"
"`sigpending` и :func:`sigwait` возвращают удобочитаемые для человека :class:"
"`enums <enum.IntEnum>` как :class:`Signals` объекты."

#: ../../library/signal.rst:85
msgid "The signal module defines three enums:"
msgstr "Модуль сигнала определяет три перечисления:"

#: ../../library/signal.rst:89
msgid ""
":class:`enum.IntEnum` collection of SIG* constants and the CTRL_* constants."
msgstr ":class:`enum.IntEnum` коллекция констант SIG* и констант CTRL_*."

#: ../../library/signal.rst:95
msgid ""
":class:`enum.IntEnum` collection the constants :const:`SIG_DFL` and :const:"
"`SIG_IGN`."
msgstr ""
":class:`enum.IntEnum` собирает константы :const:`SIG_DFL` и :const:`SIG_IGN`."

#: ../../library/signal.rst:101
msgid ""
":class:`enum.IntEnum` collection the constants :const:`SIG_BLOCK`, :const:"
"`SIG_UNBLOCK` and :const:`SIG_SETMASK`."
msgstr ""
":class:`enum.IntEnum` собирает константы :const:`SIG_BLOCK`, :const:"
"`SIG_UNBLOCK` и :const:`SIG_SETMASK`."

#: ../../library/signal.rst:103 ../../library/signal.rst:136
#: ../../library/signal.rst:142 ../../library/signal.rst:148
#: ../../library/signal.rst:154 ../../library/signal.rst:160
#: ../../library/signal.rst:166 ../../library/signal.rst:180
#: ../../library/signal.rst:198 ../../library/signal.rst:206
#: ../../library/signal.rst:217 ../../library/signal.rst:232
#: ../../library/signal.rst:238 ../../library/signal.rst:244
#: ../../library/signal.rst:262 ../../library/signal.rst:272
#: ../../library/signal.rst:351 ../../library/signal.rst:390
#: ../../library/signal.rst:414 ../../library/signal.rst:437
#: ../../library/signal.rst:471 ../../library/signal.rst:501
#: ../../library/signal.rst:508 ../../library/signal.rst:561
#: ../../library/signal.rst:603 ../../library/signal.rst:618
#: ../../library/signal.rst:644 ../../library/signal.rst:664
msgid "Availability"
msgstr "Доступность"

#: ../../library/signal.rst:105 ../../library/signal.rst:473
msgid ""
"See the man page :manpage:`sigprocmask(2)` and :manpage:`pthread_sigmask(3)` "
"for further information."
msgstr ""
"Дополнительную информацию смотрите на страницах руководства :manpage:"
"`sigprocmask(2)` и :manpage:`pthread_sigmask(3)`."

#: ../../library/signal.rst:111
msgid "The variables defined in the :mod:`signal` module are:"
msgstr "Переменные, определенные в модуле :mod:`signal`:"

#: ../../library/signal.rst:116
msgid ""
"This is one of two standard signal handling options; it will simply perform "
"the default function for the signal.  For example, on most systems the "
"default action for :const:`SIGQUIT` is to dump core and exit, while the "
"default action for :const:`SIGCHLD` is to simply ignore it."
msgstr ""
"Это один из двух стандартных вариантов обработки сигналов; он просто "
"выполнит функцию по умолчанию для сигнала. Например, в большинстве систем "
"действием по умолчанию для :const:`SIGQUIT` является сброс ядра и выход, "
"тогда как действием по умолчанию для :const:`SIGCHLD` является просто "
"игнорировать его."

#: ../../library/signal.rst:124
msgid ""
"This is another standard signal handler, which will simply ignore the given "
"signal."
msgstr ""
"Это еще один стандартный обработчик сигналов, который просто игнорирует "
"данный сигнал."

#: ../../library/signal.rst:130
msgid "Abort signal from :manpage:`abort(3)`."
msgstr "Сигнал прерывания из :manpage:`abort(3)`."

#: ../../library/signal.rst:134
msgid "Timer signal from :manpage:`alarm(2)`."
msgstr "Сигнал таймера из :manpage:`alarm(2)`."

#: ../../library/signal.rst:140
msgid "Interrupt from keyboard (CTRL + BREAK)."
msgstr "Прерывание с клавиатуры (CTRL+BREAK)."

#: ../../library/signal.rst:146
msgid "Bus error (bad memory access)."
msgstr "Ошибка шины (плохой доступ к памяти)."

#: ../../library/signal.rst:152
msgid "Child process stopped or terminated."
msgstr "Дочерний процесс остановлен или завершен."

#: ../../library/signal.rst:158
msgid "Alias to :data:`SIGCHLD`."
msgstr "Псевдоним :data:`SIGCHLD`."

#: ../../library/signal.rst:164
msgid "Continue the process if it is currently stopped"
msgstr "Продолжить процесс, если он в данный момент остановлен"

#: ../../library/signal.rst:170
msgid "Floating-point exception. For example, division by zero."
msgstr "Исключение с плавающей запятой. Например, деление на ноль."

#: ../../library/signal.rst:173
msgid ""
":exc:`ZeroDivisionError` is raised when the second argument of a division or "
"modulo operation is zero."
msgstr ""
":exc:`ZeroDivisionError` возникает, когда второй аргумент операции деления "
"или деления по модулю равен нулю."

#: ../../library/signal.rst:178
msgid ""
"Hangup detected on controlling terminal or death of controlling process."
msgstr ""
"Обнаружено зависание на управляющем терминале или прекращение процесса "
"управления."

#: ../../library/signal.rst:184
msgid "Illegal instruction."
msgstr "Нелегальный инструкция."

#: ../../library/signal.rst:188
msgid "Interrupt from keyboard (CTRL + C)."
msgstr "Прерывание с клавиатуры (CTRL+C)."

#: ../../library/signal.rst:190
msgid "Default action is to raise :exc:`KeyboardInterrupt`."
msgstr "Действием по умолчанию является вызов :exc:`KeyboardInterrupt`."

#: ../../library/signal.rst:194
msgid "Kill signal."
msgstr "Сигнал убийства."

#: ../../library/signal.rst:196
msgid "It cannot be caught, blocked, or ignored."
msgstr "Его невозможно перехватить, заблокировать или проигнорировать."

#: ../../library/signal.rst:202
msgid "Broken pipe: write to pipe with no readers."
msgstr "Сломанный канал: запись в канал без читателей."

#: ../../library/signal.rst:204
msgid "Default action is to ignore the signal."
msgstr "Действие по умолчанию — игнорировать сигнал."

#: ../../library/signal.rst:210
msgid "Segmentation fault: invalid memory reference."
msgstr "Ошибка сегментации: неверная ссылка на память."

#: ../../library/signal.rst:214
msgid ""
"Stack fault on coprocessor. The Linux kernel does not raise this signal: it "
"can only be raised in user space."
msgstr ""
"Ошибка стека сопроцессора. Ядро Linux не выдает этот сигнал: он может быть "
"поднят только в пользовательском пространстве."

#: ../../library/signal.rst:219
msgid ""
"On architectures where the signal is available. See the man page :manpage:"
"`signal(7)` for further information."
msgstr ""
"На архитектурах, где сигнал доступен. Дополнительную информацию смотрите на "
"странице руководства :manpage:`signal(7)`."

#: ../../library/signal.rst:226
msgid "Termination signal."
msgstr "Сигнал завершения."

#: ../../library/signal.rst:230
msgid "User-defined signal 1."
msgstr "Определяемый пользователем сигнал 1."

#: ../../library/signal.rst:236
msgid "User-defined signal 2."
msgstr "Определяемый пользователем сигнал 2."

#: ../../library/signal.rst:242
msgid "Window resize signal."
msgstr "Сигнал изменения размера окна."

#: ../../library/signal.rst:248
msgid ""
"All the signal numbers are defined symbolically.  For example, the hangup "
"signal is defined as :const:`signal.SIGHUP`; the variable names are "
"identical to the names used in C programs, as found in ``<signal.h>``.  The "
"Unix man page for ':c:func:`signal`' lists the existing signals (on some "
"systems this is :manpage:`signal(2)`, on others the list is in :manpage:"
"`signal(7)`). Note that not all systems define the same set of signal names; "
"only those names defined by the system are defined by this module."
msgstr ""
"Все номера сигналов определены символически. Например, сигнал зависания "
"определяется как :const:`signal.SIGHUP`; имена переменных идентичны именам, "
"используемым в программах на языке C, как показано в ``<signal.h>``. На "
"странице руководства Unix для ':c:func:`signal`' перечислены существующие "
"сигналы (в некоторых системах это :manpage:`signal(2)`, в других список "
"находится в :manpage:`signal(7)` ). Обратите внимание, что не все системы "
"определяют один и тот же набор имен сигналов; только те имена, которые "
"определены системой, определяются этим модулем."

#: ../../library/signal.rst:259
msgid ""
"The signal corresponding to the :kbd:`Ctrl+C` keystroke event. This signal "
"can only be used with :func:`os.kill`."
msgstr ""
"Сигнал, соответствующий событию нажатия клавиши :kbd:`Ctrl+C`. Этот сигнал "
"можно использовать только с :func:`os.kill`."

#: ../../library/signal.rst:269
msgid ""
"The signal corresponding to the :kbd:`Ctrl+Break` keystroke event. This "
"signal can only be used with :func:`os.kill`."
msgstr ""
"Сигнал, соответствующий событию нажатия клавиши :kbd:`Ctrl+Break`. Этот "
"сигнал можно использовать только с :func:`os.kill`."

#: ../../library/signal.rst:279
msgid ""
"One more than the number of the highest signal number. Use :func:"
"`valid_signals` to get valid signal numbers."
msgstr ""
"На единицу больше, чем номер наивысшего номера сигнала. Используйте :func:"
"`valid_signals` для получения действительных номеров сигналов."

#: ../../library/signal.rst:285
msgid ""
"Decrements interval timer in real time, and delivers :const:`SIGALRM` upon "
"expiration."
msgstr ""
"Уменьшает интервальный таймер в реальном времени и доставляет :const:"
"`SIGALRM` по истечении срока действия."

#: ../../library/signal.rst:291
msgid ""
"Decrements interval timer only when the process is executing, and delivers "
"SIGVTALRM upon expiration."
msgstr ""
"Уменьшает интервальный таймер только во время выполнения процесса и "
"доставляет SIGVTALRM по истечении срока действия."

#: ../../library/signal.rst:297
msgid ""
"Decrements interval timer both when the process executes and when the system "
"is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this "
"timer is usually used to profile the time spent by the application in user "
"and kernel space. SIGPROF is delivered upon expiration."
msgstr ""
"Уменьшает интервальный таймер как при выполнении процесса, так и при "
"выполнении системы от имени процесса. В сочетании с ITIMER_VIRTUAL этот "
"таймер обычно используется для профилирования времени, проведенного "
"приложением в пространстве пользователя и ядра. SIGPROF поставляется по "
"истечении срока годности."

#: ../../library/signal.rst:305
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be blocked."
msgstr ""
"Возможное значение параметра *how* для :func:`pthread_sigmask`, указывающее, "
"что сигналы должны быть заблокированы."

#: ../../library/signal.rst:312
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be unblocked."
msgstr ""
"Возможное значение параметра *how* для :func:`pthread_sigmask`, указывающее, "
"что сигналы должны быть разблокированы."

#: ../../library/signal.rst:319
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that the signal mask is to be replaced."
msgstr ""
"Возможное значение параметра *how* для :func:`pthread_sigmask`, указывающее, "
"что маска сигнала должна быть заменена."

#: ../../library/signal.rst:325
msgid "The :mod:`signal` module defines one exception:"
msgstr "Модуль :mod:`signal` определяет одно исключение:"

#: ../../library/signal.rst:329
msgid ""
"Raised to signal an error from the underlying :func:`setitimer` or :func:"
"`getitimer` implementation. Expect this error if an invalid interval timer "
"or a negative time is passed to :func:`setitimer`. This error is a subtype "
"of :exc:`OSError`."
msgstr ""
"Вызывается, чтобы сигнализировать об ошибке базовой реализации :func:"
"`setitimer` или :func:`getitimer`. Эту ошибку следует ожидать, если в :func:"
"`setitimer` передан неверный интервальный таймер или отрицательное время. "
"Эта ошибка является подтипом :exc:`OSError`."

#: ../../library/signal.rst:334
msgid ""
"This error used to be a subtype of :exc:`IOError`, which is now an alias of :"
"exc:`OSError`."
msgstr ""
"Раньше эта ошибка была подтипом :exc:`IOError`, который теперь является "
"псевдонимом :exc:`OSError`."

#: ../../library/signal.rst:339
msgid "The :mod:`signal` module defines the following functions:"
msgstr "Модуль :mod:`signal` определяет следующие функции:"

#: ../../library/signal.rst:344
msgid ""
"If *time* is non-zero, this function requests that a :const:`SIGALRM` signal "
"be sent to the process in *time* seconds. Any previously scheduled alarm is "
"canceled (only one alarm can be scheduled at any time).  The returned value "
"is then the number of seconds before any previously set alarm was to have "
"been delivered. If *time* is zero, no alarm is scheduled, and any scheduled "
"alarm is canceled.  If the return value is zero, no alarm is currently "
"scheduled."
msgstr ""
"Если *time* не равно нулю, эта функция запрашивает отправку сигнала :const:"
"`SIGALRM` процессу через *time* секунд. Любой ранее запланированный сигнал "
"тревоги отменяется (в любой момент времени можно запланировать только один "
"сигнал тревоги). Возвращаемое значение представляет собой количество секунд "
"до того, как должен был быть доставлен какой-либо ранее установленный сигнал "
"тревоги. Если *время* равно нулю, будильник не запланирован, и любой "
"запланированный будильник отменяется. Если возвращаемое значение равно нулю, "
"в настоящее время тревога не запланирована."

#: ../../library/signal.rst:353
msgid "See the man page :manpage:`alarm(2)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`alarm(2)`."

#: ../../library/signal.rst:358
msgid ""
"Return the current signal handler for the signal *signalnum*. The returned "
"value may be a callable Python object, or one of the special values :const:"
"`signal.SIG_IGN`, :const:`signal.SIG_DFL` or :const:`None`.  Here, :const:"
"`signal.SIG_IGN` means that the signal was previously ignored, :const:"
"`signal.SIG_DFL` means that the default way of handling the signal was "
"previously in use, and ``None`` means that the previous signal handler was "
"not installed from Python."
msgstr ""
"Возвращает текущий обработчик сигнала *signalnum*. Возвращаемое значение "
"может быть вызываемым объектом Python или одним из специальных значений :"
"const:`signal.SIG_IGN`, :const:`signal.SIG_DFL` или :const:`None`. Здесь :"
"const:`signal.SIG_IGN` означает, что сигнал ранее игнорировался, :const:"
"`signal.SIG_DFL` означает, что ранее использовался способ обработки сигнала "
"по умолчанию, а ``None`` означает, что предыдущий обработчик сигнала не был "
"установлен из Python."

#: ../../library/signal.rst:369
msgid ""
"Returns the description of signal *signalnum*, such as \"Interrupt\" for :"
"const:`SIGINT`. Returns :const:`None` if *signalnum* has no description. "
"Raises :exc:`ValueError` if *signalnum* is invalid."
msgstr ""
"Возвращает описание сигнала *signalnum*, например «Прерывание» для :const:"
"`SIGINT`. Возвращает :const:`None`, если *signalnum* не имеет описания. "
"Вызывает :exc:`ValueError`, если *signalnum* недействителен."

#: ../../library/signal.rst:378
msgid ""
"Return the set of valid signal numbers on this platform.  This can be less "
"than ``range(1, NSIG)`` if some signals are reserved by the system for "
"internal use."
msgstr ""
"Верните набор действительных номеров сигналов на этой платформе. Это может "
"быть меньше, чем «диапазон(1, NSIG)», если некоторые сигналы зарезервированы "
"системой для внутреннего использования."

#: ../../library/signal.rst:387
msgid ""
"Cause the process to sleep until a signal is received; the appropriate "
"handler will then be called.  Returns nothing."
msgstr ""
"Приостановить процесс до тех пор, пока не будет получен сигнал; затем будет "
"вызван соответствующий обработчик. Ничего не возвращает."

#: ../../library/signal.rst:392
msgid "See the man page :manpage:`signal(2)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`signal(2)`."

#: ../../library/signal.rst:394
msgid ""
"See also :func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` and :"
"func:`sigpending`."
msgstr ""
"См. также :func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` и :func:"
"`sigpending`."

#: ../../library/signal.rst:400
msgid "Sends a signal to the calling process. Returns nothing."
msgstr "Отправляет сигнал вызывающему процессу. Ничего не возвращает."

#: ../../library/signal.rst:407
msgid ""
"Send signal *sig* to the process referred to by file descriptor *pidfd*. "
"Python does not currently support the *siginfo* parameter; it must be "
"``None``.  The *flags* argument is provided for future extensions; no flag "
"values are currently defined."
msgstr ""
"Отправьте сигнал *sig* процессу, указанному файловым дескриптором *pidfd*. "
"Python в настоящее время не поддерживает параметр *siginfo*; это должно быть "
"``Нет``. Аргумент *flags* предоставляется для будущих расширений; значения "
"флагов в настоящее время не определены."

#: ../../library/signal.rst:412
msgid "See the :manpage:`pidfd_send_signal(2)` man page for more information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`pidfd_send_signal(2)`."

#: ../../library/signal.rst:420
msgid ""
"Send the signal *signalnum* to the thread *thread_id*, another thread in the "
"same process as the caller.  The target thread can be executing any code "
"(Python or not).  However, if the target thread is executing the Python "
"interpreter, the Python signal handlers will be :ref:`executed by the main "
"thread of the main interpreter <signals-and-threads>`.  Therefore, the only "
"point of sending a signal to a particular Python thread would be to force a "
"running system call to fail with :exc:`InterruptedError`."
msgstr ""
"Отправьте сигнал *signalnum* в поток *thread_id*, другой поток в том же "
"процессе, что и вызывающий. Целевой поток может выполнять любой код (Python "
"или нет). Однако, если целевой поток выполняет интерпретатор Python, "
"обработчики сигналов Python будут :ref:`исполняться основным потоком "
"основного интерпретатора <signals-and-threads>`. Следовательно, единственным "
"способом отправки сигнала в конкретный поток Python будет принудительное "
"завершение работающего системного вызова с помощью :exc:`InterruptedError`."

#: ../../library/signal.rst:428
msgid ""
"Use :func:`threading.get_ident` or the :attr:`~threading.Thread.ident` "
"attribute of :class:`threading.Thread` objects to get a suitable value for "
"*thread_id*."
msgstr ""
"Используйте :func:`threading.get_ident` или атрибут :attr:`~threading.Thread."
"ident` объектов :class:`threading.Thread`, чтобы получить подходящее "
"значение для *thread_id*."

#: ../../library/signal.rst:432
msgid ""
"If *signalnum* is 0, then no signal is sent, but error checking is still "
"performed; this can be used to check if the target thread is still running."
msgstr ""
"Если *signalnum* равен 0, сигнал не отправляется, но проверка ошибок все "
"равно выполняется; это можно использовать для проверки, работает ли целевой "
"поток."

#: ../../library/signal.rst:435
msgid ""
"Raises an :ref:`auditing event <auditing>` ``signal.pthread_kill`` with "
"arguments ``thread_id``, ``signalnum``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``signal.pthread_kill`` с "
"аргументами ``thread_id``, ``signalnum``."

#: ../../library/signal.rst:439
msgid "See the man page :manpage:`pthread_kill(3)` for further  information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`pthread_kill(3)`."

#: ../../library/signal.rst:441
msgid "See also :func:`os.kill`."
msgstr "См. также :func:`os.kill`."

#: ../../library/signal.rst:448
msgid ""
"Fetch and/or change the signal mask of the calling thread.  The signal mask "
"is the set of signals whose delivery is currently blocked for the caller. "
"Return the old signal mask as a set of signals."
msgstr ""
"Получите и/или измените маску сигнала вызывающего потока. Маска сигнала — "
"это набор сигналов, доставка которых в данный момент заблокирована для "
"вызывающего абонента. Верните старую маску сигнала как набор сигналов."

#: ../../library/signal.rst:452
msgid ""
"The behavior of the call is dependent on the value of *how*, as follows."
msgstr "Поведение вызова зависит от значения *how* следующим образом."

#: ../../library/signal.rst:454
msgid ""
":data:`SIG_BLOCK`: The set of blocked signals is the union of the current "
"set and the *mask* argument."
msgstr ""
":data:`SIG_BLOCK`: Набор заблокированных сигналов представляет собой "
"объединение текущего набора и аргумента *маска*."

#: ../../library/signal.rst:456
msgid ""
":data:`SIG_UNBLOCK`: The signals in *mask* are removed from the current set "
"of blocked signals.  It is permissible to attempt to unblock a signal which "
"is not blocked."
msgstr ""
":data:`SIG_UNBLOCK`: Сигналы в *маске* удаляются из текущего набора "
"заблокированных сигналов. Разрешается попытаться разблокировать "
"незаблокированный сигнал."

#: ../../library/signal.rst:459
msgid ""
":data:`SIG_SETMASK`: The set of blocked signals is set to the *mask* "
"argument."
msgstr ""
":data:`SIG_SETMASK`: Набор заблокированных сигналов устанавливается в "
"аргумент *mask*."

#: ../../library/signal.rst:462
msgid ""
"*mask* is a set of signal numbers (e.g. {:const:`signal.SIGINT`, :const:"
"`signal.SIGTERM`}). Use :func:`~signal.valid_signals` for a full mask "
"including all signals."
msgstr ""
"*маска* — это набор номеров сигналов (например, {:const:`signal.SIGINT`, :"
"const:`signal.SIGTERM`}). Используйте :func:`~signal.valid_signals` для "
"полной маски, включающей все сигналы."

#: ../../library/signal.rst:466
msgid ""
"For example, ``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` reads the "
"signal mask of the calling thread."
msgstr ""
"Например, ``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` считывает маску "
"сигнала вызывающего потока."

#: ../../library/signal.rst:469
msgid ":data:`SIGKILL` and :data:`SIGSTOP` cannot be blocked."
msgstr ":data:`SIGKILL` и :data:`SIGSTOP` не могут быть заблокированы."

#: ../../library/signal.rst:476
msgid "See also :func:`pause`, :func:`sigpending` and :func:`sigwait`."
msgstr "См. также :func:`pause`, :func:`sigpending` и :func:`sigwait`."

#: ../../library/signal.rst:483
msgid ""
"Sets given interval timer (one of :const:`signal.ITIMER_REAL`, :const:"
"`signal.ITIMER_VIRTUAL` or :const:`signal.ITIMER_PROF`) specified by *which* "
"to fire after *seconds* (float is accepted, different from :func:`alarm`) "
"and after that every *interval* seconds (if *interval* is non-zero). The "
"interval timer specified by *which* can be cleared by setting *seconds* to "
"zero."
msgstr ""
"Устанавливает заданный интервальный таймер (один из :const:`signal."
"ITIMER_REAL`, :const:`signal.ITIMER_VIRTUAL` или :const:`signal."
"ITIMER_PROF`), указанный в параметре *который* срабатывать через *секунды* "
"(допустимо число с плавающей запятой, отличается от :func:`alarm`) и после "
"этого каждые *интервал* секунд (если *интервал* не равен нулю). Интервальный "
"таймер, указанный *который*, можно очистить, установив *секунды* на ноль."

#: ../../library/signal.rst:490
msgid ""
"When an interval timer fires, a signal is sent to the process. The signal "
"sent is dependent on the timer being used; :const:`signal.ITIMER_REAL` will "
"deliver :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` sends :const:"
"`SIGVTALRM`, and :const:`signal.ITIMER_PROF` will deliver :const:`SIGPROF`."
msgstr ""
"Когда срабатывает интервальный таймер, процессу отправляется сигнал. "
"Отправляемый сигнал зависит от используемого таймера; :const:`signal."
"ITIMER_REAL` доставит :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` "
"отправит :const:`SIGVTALRM`, а :const:`signal.ITIMER_PROF` доставит :const:"
"`SIGPROF` ."

#: ../../library/signal.rst:496
msgid "The old values are returned as a tuple: (delay, interval)."
msgstr "Старые значения возвращаются в виде кортежа: (задержка, интервал)."

#: ../../library/signal.rst:498
msgid ""
"Attempting to pass an invalid interval timer will cause an :exc:"
"`ItimerError`."
msgstr ""
"Попытка передать неверный интервальный таймер приведет к ошибке :exc:"
"`ItimerError`."

#: ../../library/signal.rst:506
msgid "Returns current value of a given interval timer specified by *which*."
msgstr ""
"Возвращает текущее значение заданного интервального таймера, указанного "
"*который*."

#: ../../library/signal.rst:513
msgid ""
"Set the wakeup file descriptor to *fd*.  When a signal is received, the "
"signal number is written as a single byte into the fd.  This can be used by "
"a library to wakeup a poll or select call, allowing the signal to be fully "
"processed."
msgstr ""
"Установите дескриптор файла пробуждения на *fd*. Когда сигнал получен, номер "
"сигнала записывается в виде одного байта в fd. Это может использоваться "
"библиотекой для запуска опроса или выбора вызова, что позволяет полностью "
"обработать сигнал."

#: ../../library/signal.rst:518
msgid ""
"The old wakeup fd is returned (or -1 if file descriptor wakeup was not "
"enabled).  If *fd* is -1, file descriptor wakeup is disabled. If not -1, "
"*fd* must be non-blocking.  It is up to the library to remove any bytes from "
"*fd* before calling poll or select again."
msgstr ""
"Возвращается старый файл пробуждения (или -1, если пробуждение файлового "
"дескриптора не было включено). Если *fd* равно -1, пробуждение файлового "
"дескриптора отключено. Если не -1, *fd* должен быть неблокирующим. "
"Библиотека должна удалить все байты из *fd* перед вызовом опроса или "
"повторным выбором."

#: ../../library/signal.rst:523 ../../library/signal.rst:578
msgid ""
"When threads are enabled, this function can only be called from :ref:`the "
"main thread of the main interpreter <signals-and-threads>`; attempting to "
"call it from other threads will cause a :exc:`ValueError` exception to be "
"raised."
msgstr ""
"Когда потоки включены, эту функцию можно вызвать только из :ref:`основного "
"потока главного интерпретатора <signals-and-threads>`; попытка вызвать его "
"из других потоков приведет к возникновению исключения :exc:`ValueError`."

#: ../../library/signal.rst:528
msgid ""
"There are two common ways to use this function. In both approaches, you use "
"the fd to wake up when a signal arrives, but then they differ in how they "
"determine *which* signal or signals have arrived."
msgstr ""
"Есть два распространенных способа использования этой функции. В обоих "
"подходах вы используете fd для пробуждения при поступлении сигнала, но они "
"различаются тем, как определяют *какой* сигнал или сигналы поступили."

#: ../../library/signal.rst:533
msgid ""
"In the first approach, we read the data out of the fd's buffer, and the byte "
"values give you the signal numbers. This is simple, but in rare cases it can "
"run into a problem: generally the fd will have a limited amount of buffer "
"space, and if too many signals arrive too quickly, then the buffer may "
"become full, and some signals may be lost. If you use this approach, then "
"you should set ``warn_on_full_buffer=True``, which will at least cause a "
"warning to be printed to stderr when signals are lost."
msgstr ""
"В первом подходе мы считываем данные из буфера fd, а значения байтов дают "
"вам номера сигналов. Это просто, но в редких случаях может возникнуть "
"проблема: обычно fd будет иметь ограниченный объем буферного пространства, и "
"если слишком много сигналов поступает слишком быстро, то буфер может "
"переполниться, и некоторые сигналы могут быть потеряны. Если вы используете "
"этот подход, вам следует установить ``warn_on_full_buffer=True``, что, по "
"крайней мере, приведет к выводу предупреждения в stderr при потере сигналов."

#: ../../library/signal.rst:542
msgid ""
"In the second approach, we use the wakeup fd *only* for wakeups, and ignore "
"the actual byte values. In this case, all we care about is whether the fd's "
"buffer is empty or non-empty; a full buffer doesn't indicate a problem at "
"all. If you use this approach, then you should set "
"``warn_on_full_buffer=False``, so that your users are not confused by "
"spurious warning messages."
msgstr ""
"Во втором подходе мы используем пробуждение *только* для пробуждения и "
"игнорируем фактические значения байтов. В этом случае нас волнует только то, "
"пуст ли буфер fd или непуст; полный буфер вообще не указывает на проблему. "
"Если вы используете этот подход, вам следует установить "
"``warn_on_full_buffer=False``, чтобы ваши пользователи не были сбиты с толку "
"ложными предупреждающими сообщениями."

#: ../../library/signal.rst:549
msgid "On Windows, the function now also supports socket handles."
msgstr "В Windows эта функция теперь также поддерживает дескрипторы сокетов."

#: ../../library/signal.rst:552
msgid "Added ``warn_on_full_buffer`` parameter."
msgstr "Добавлен параметр ``warn_on_full_buffer``."

#: ../../library/signal.rst:557
msgid ""
"Change system call restart behaviour: if *flag* is :const:`False`, system "
"calls will be restarted when interrupted by signal *signalnum*, otherwise "
"system calls will be interrupted.  Returns nothing."
msgstr ""
"Изменить поведение перезапуска системного вызова: если *flag* имеет "
"значение :const:`False`, системные вызовы будут перезапущены при прерывании "
"сигналом *signalnum*, в противном случае системные вызовы будут прерваны. "
"Ничего не возвращает."

#: ../../library/signal.rst:563
msgid "See the man page :manpage:`siginterrupt(3)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`siginterrupt(3)`."

#: ../../library/signal.rst:565
msgid ""
"Note that installing a signal handler with :func:`signal` will reset the "
"restart behaviour to interruptible by implicitly calling :c:func:`!"
"siginterrupt` with a true *flag* value for the given signal."
msgstr ""
"Обратите внимание, что установка обработчика сигнала с помощью :func:"
"`signal` сбросит режим перезапуска на прерываемый путем неявного вызова :c:"
"func:`!siginterrupt` с истинным значением *flag* для данного сигнала."

#: ../../library/signal.rst:572
msgid ""
"Set the handler for signal *signalnum* to the function *handler*.  *handler* "
"can be a callable Python object taking two arguments (see below), or one of "
"the special values :const:`signal.SIG_IGN` or :const:`signal.SIG_DFL`.  The "
"previous signal handler will be returned (see the description of :func:"
"`getsignal` above).  (See the Unix man page :manpage:`signal(2)` for further "
"information.)"
msgstr ""
"Установите обработчик сигнала *signalnum* на функцию *handler*. *handler* "
"может быть вызываемым объектом Python, принимающим два аргумента (см. ниже) "
"или одно из специальных значений :const:`signal.SIG_IGN` или :const:`signal."
"SIG_DFL`. Будет возвращен предыдущий обработчик сигнала (см. описание :func:"
"`getsignal` выше). (Для получения дополнительной информации см. справочную "
"страницу Unix :manpage:`signal(2)`.)"

#: ../../library/signal.rst:583
msgid ""
"The *handler* is called with two arguments: the signal number and the "
"current stack frame (``None`` or a frame object; for a description of frame "
"objects, see the :ref:`description in the type hierarchy <frame-objects>` or "
"see the attribute descriptions in the :mod:`inspect` module)."
msgstr ""
"*Обработчик* вызывается с двумя аргументами: номером сигнала и текущим "
"кадром стека («None» или объектом кадра; описание объектов кадра см. в "
"описании в иерархии типов <frame- объекты>` или посмотрите описания "
"атрибутов в модуле :mod:`inspect`)."

#: ../../library/signal.rst:588
msgid ""
"On Windows, :func:`signal` can only be called with :const:`SIGABRT`, :const:"
"`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, :const:"
"`SIGTERM`, or :const:`SIGBREAK`. A :exc:`ValueError` will be raised in any "
"other case. Note that not all systems define the same set of signal names; "
"an :exc:`AttributeError` will be raised if a signal name is not defined as "
"``SIG*`` module level constant."
msgstr ""
"В Windows :func:`signal` можно вызвать только с помощью :const:`SIGABRT`, :"
"const:`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, : const:"
"`SIGTERM` или :const:`SIGBREAK`. В любом другом случае будет выдано :exc:"
"`ValueError`. Обратите внимание, что не все системы определяют один и тот же "
"набор имен сигналов; :exc:`AttributeError` будет вызвано, если имя сигнала "
"не определено как константа уровня модуля ``SIG*``."

#: ../../library/signal.rst:599
msgid ""
"Examine the set of signals that are pending for delivery to the calling "
"thread (i.e., the signals which have been raised while blocked).  Return the "
"set of the pending signals."
msgstr ""
"Проверьте набор сигналов, ожидающих доставки в вызывающий поток (т. е. "
"сигналы, которые были созданы во время блокировки). Возвращает набор "
"ожидающих сигналов."

#: ../../library/signal.rst:605
msgid "See the man page :manpage:`sigpending(2)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`sigpending(2)`."

#: ../../library/signal.rst:607
msgid "See also :func:`pause`, :func:`pthread_sigmask` and :func:`sigwait`."
msgstr "См. также :func:`pause`, :func:`pthread_sigmask` и :func:`sigwait`."

#: ../../library/signal.rst:614
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal (removes it from the pending list of signals), and returns the signal "
"number."
msgstr ""
"Приостановить выполнение вызывающего потока до доставки одного из сигналов, "
"указанных в наборе сигналов *sigset*. Функция принимает сигнал (удаляет его "
"из списка ожидающих сигналов) и возвращает номер сигнала."

#: ../../library/signal.rst:620
msgid "See the man page :manpage:`sigwait(3)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`sigwait(3)`."

#: ../../library/signal.rst:622
msgid ""
"See also :func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, :func:"
"`sigwaitinfo` and :func:`sigtimedwait`."
msgstr ""
"См. также :func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, :func:"
"`sigwaitinfo` и :func:`sigtimedwait`."

#: ../../library/signal.rst:630
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal and removes it from the pending list of signals. If one of the "
"signals in *sigset* is already pending for the calling thread, the function "
"will return immediately with information about that signal. The signal "
"handler is not called for the delivered signal. The function raises an :exc:"
"`InterruptedError` if it is interrupted by a signal that is not in *sigset*."
msgstr ""
"Приостановить выполнение вызывающего потока до доставки одного из сигналов, "
"указанных в наборе сигналов *sigset*. Функция принимает сигнал и удаляет его "
"из списка ожидающих сигналов. Если один из сигналов в *sigset* уже ожидает "
"вызывающего потока, функция немедленно вернет информацию об этом сигнале. "
"Обработчик сигнала не вызывается для доставленного сигнала. Функция "
"вызывает :exc:`InterruptedError`, если она прерывается сигналом, которого "
"нет в *sigset*."

#: ../../library/signal.rst:639
msgid ""
"The return value is an object representing the data contained in the :c:type:"
"`siginfo_t` structure, namely: :attr:`si_signo`, :attr:`si_code`, :attr:"
"`si_errno`, :attr:`si_pid`, :attr:`si_uid`, :attr:`si_status`, :attr:"
"`si_band`."
msgstr ""
"Возвращаемое значение — это объект, представляющий данные, содержащиеся в "
"структуре :c:type:`siginfo_t`, а именно: :attr:`si_signo`, :attr:`si_code`, :"
"attr:`si_errno`, :attr:`si_pid `, :attr:`si_uid`, :attr:`si_status`, :attr:"
"`si_band`."

#: ../../library/signal.rst:646
msgid "See the man page :manpage:`sigwaitinfo(2)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`sigwaitinfo(2)`."

#: ../../library/signal.rst:648
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigtimedwait`."
msgstr "См. также :func:`pause`, :func:`sigwait` и :func:`sigtimedwait`."

#: ../../library/signal.rst:652
msgid ""
"The function is now retried if interrupted by a signal not in *sigset* and "
"the signal handler does not raise an exception (see :pep:`475` for the "
"rationale)."
msgstr ""
"Функция теперь повторяется, если она прерывается сигналом, которого нет в "
"*sigset*, и обработчик сигнала не вызывает исключение (обоснование см. в :"
"pep:`475`)."

#: ../../library/signal.rst:660
msgid ""
"Like :func:`sigwaitinfo`, but takes an additional *timeout* argument "
"specifying a timeout. If *timeout* is specified as ``0``, a poll is "
"performed. Returns :const:`None` if a timeout occurs."
msgstr ""
"Аналогично :func:`sigwaitinfo`, но принимает дополнительный аргумент "
"*timeout*, определяющий время ожидания. Если для *timeout* указано ``0``, "
"выполняется опрос. Возвращает :const:`None`, если произошел тайм-аут."

#: ../../library/signal.rst:666
msgid "See the man page :manpage:`sigtimedwait(2)` for further information."
msgstr ""
"Дополнительную информацию смотрите на странице руководства :manpage:"
"`sigtimedwait(2)`."

#: ../../library/signal.rst:668
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigwaitinfo`."
msgstr "См. также :func:`pause`, :func:`sigwait` и :func:`sigwaitinfo`."

#: ../../library/signal.rst:672
msgid ""
"The function is now retried with the recomputed *timeout* if interrupted by "
"a signal not in *sigset* and the signal handler does not raise an exception "
"(see :pep:`475` for the rationale)."
msgstr ""
"Функция теперь повторяется с пересчитанным *тайм-аутом*, если она "
"прерывается сигналом, не входящим в *sigset*, и обработчик сигнала не "
"вызывает исключение (обоснование см. в :pep:`475`)."

#: ../../library/signal.rst:681
msgid "Examples"
msgstr "Примеры"

#: ../../library/signal.rst:683
msgid ""
"Here is a minimal example program. It uses the :func:`alarm` function to "
"limit the time spent waiting to open a file; this is useful if the file is "
"for a serial device that may not be turned on, which would normally cause "
"the :func:`os.open` to hang indefinitely.  The solution is to set a 5-second "
"alarm before opening the file; if the operation takes too long, the alarm "
"signal will be sent, and the handler raises an exception. ::"
msgstr ""
"Вот минимальный пример программы. Он использует функцию :func:`alarm` для "
"ограничения времени ожидания открытия файла; это полезно, если файл "
"предназначен для последовательного устройства, которое может быть не "
"включено, что обычно приводит к зависанию :func:`os.open` на неопределенный "
"срок. Решение — установить 5-секундный сигнал перед открытием файла; если "
"операция занимает слишком много времени, будет отправлен сигнал тревоги, и "
"обработчик вызовет исключение. ::"

#: ../../library/signal.rst:690
msgid ""
"import signal, os\n"
"\n"
"def handler(signum, frame):\n"
"    signame = signal.Signals(signum).name\n"
"    print(f'Signal handler called with signal {signame} ({signum})')\n"
"    raise OSError(\"Couldn't open device!\")\n"
"\n"
"# Set the signal handler and a 5-second alarm\n"
"signal.signal(signal.SIGALRM, handler)\n"
"signal.alarm(5)\n"
"\n"
"# This open() may hang indefinitely\n"
"fd = os.open('/dev/ttyS0', os.O_RDWR)\n"
"\n"
"signal.alarm(0)          # Disable the alarm"
msgstr ""
"import signal, os\n"
"\n"
"def handler(signum, frame):\n"
"    signame = signal.Signals(signum).name\n"
"    print(f'Signal handler called with signal {signame} ({signum})')\n"
"    raise OSError(\"Couldn't open device!\")\n"
"\n"
"# Set the signal handler and a 5-second alarm\n"
"signal.signal(signal.SIGALRM, handler)\n"
"signal.alarm(5)\n"
"\n"
"# This open() may hang indefinitely\n"
"fd = os.open('/dev/ttyS0', os.O_RDWR)\n"
"\n"
"signal.alarm(0)          # Disable the alarm"

#: ../../library/signal.rst:707
msgid "Note on SIGPIPE"
msgstr "Заметка о SIGPIPE"

#: ../../library/signal.rst:709
msgid ""
"Piping output of your program to tools like :manpage:`head(1)` will cause a :"
"const:`SIGPIPE` signal to be sent to your process when the receiver of its "
"standard output closes early.  This results in an exception like :code:"
"`BrokenPipeError: [Errno 32] Broken pipe`.  To handle this case, wrap your "
"entry point to catch this exception as follows::"
msgstr ""
"Передача вывода вашей программы по каналам в такие инструменты, как :manpage:"
"`head(1)`, приведет к отправке сигнала :const:`SIGPIPE` в ваш процесс, когда "
"приемник его стандартного вывода закрывается раньше времени. Это приводит к "
"исключению типа :code:`BrokenPipeError: [Errno 32] Broken Pipe`. Чтобы "
"обработать этот случай, оберните точку входа, чтобы перехватить это "
"исключение, следующим образом:"

#: ../../library/signal.rst:715
msgid ""
"import os\n"
"import sys\n"
"\n"
"def main():\n"
"    try:\n"
"        # simulate large output (your code replaces this loop)\n"
"        for x in range(10000):\n"
"            print(\"y\")\n"
"        # flush output here to force SIGPIPE to be triggered\n"
"        # while inside this try block.\n"
"        sys.stdout.flush()\n"
"    except BrokenPipeError:\n"
"        # Python flushes standard streams on exit; redirect remaining "
"output\n"
"        # to devnull to avoid another BrokenPipeError at shutdown\n"
"        devnull = os.open(os.devnull, os.O_WRONLY)\n"
"        os.dup2(devnull, sys.stdout.fileno())\n"
"        sys.exit(1)  # Python exits with error code 1 on EPIPE\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""
"import os\n"
"import sys\n"
"\n"
"def main():\n"
"    try:\n"
"        # simulate large output (your code replaces this loop)\n"
"        for x in range(10000):\n"
"            print(\"y\")\n"
"        # flush output here to force SIGPIPE to be triggered\n"
"        # while inside this try block.\n"
"        sys.stdout.flush()\n"
"    except BrokenPipeError:\n"
"        # Python flushes standard streams on exit; redirect remaining "
"output\n"
"        # to devnull to avoid another BrokenPipeError at shutdown\n"
"        devnull = os.open(os.devnull, os.O_WRONLY)\n"
"        os.dup2(devnull, sys.stdout.fileno())\n"
"        sys.exit(1)  # Python exits with error code 1 on EPIPE\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"

#: ../../library/signal.rst:736
msgid ""
"Do not set :const:`SIGPIPE`'s disposition to :const:`SIG_DFL` in order to "
"avoid :exc:`BrokenPipeError`.  Doing that would cause your program to exit "
"unexpectedly whenever any socket connection is interrupted while your "
"program is still writing to it."
msgstr ""
"Не устанавливайте расположение :const:`SIGPIPE` в :const:`SIG_DFL`, чтобы "
"избежать :exc:`BrokenPipeError`. Это приведет к неожиданному завершению "
"вашей программы всякий раз, когда какое-либо соединение с сокетом "
"прерывается, пока ваша программа все еще записывает в него данные."

#: ../../library/signal.rst:745
msgid "Note on Signal Handlers and Exceptions"
msgstr "Примечание об обработчиках сигналов и исключениях"

#: ../../library/signal.rst:747
msgid ""
"If a signal handler raises an exception, the exception will be propagated to "
"the main thread and may be raised after any :term:`bytecode` instruction. "
"Most notably, a :exc:`KeyboardInterrupt` may appear at any point during "
"execution. Most Python code, including the standard library, cannot be made "
"robust against this, and so a :exc:`KeyboardInterrupt` (or any other "
"exception resulting from a signal handler) may on rare occasions put the "
"program in an unexpected state."
msgstr ""
"Если обработчик сигнала вызывает исключение, оно будет передано в основной "
"поток и может быть вызвано после любой инструкции :term:`bytecode`. В "
"частности, :exc:`KeyboardInterrupt` может появиться в любой момент во время "
"выполнения. Большую часть кода Python, включая стандартную библиотеку, "
"невозможно сделать устойчивым к этому, поэтому :exc:`KeyboardInterrupt` (или "
"любое другое исключение, возникающее из-за обработчика сигнала) может в "
"редких случаях перевести программу в неожиданное состояние."

#: ../../library/signal.rst:754
msgid "To illustrate this issue, consider the following code::"
msgstr "Чтобы проиллюстрировать эту проблему, рассмотрим следующий код:"

#: ../../library/signal.rst:756
msgid ""
"class SpamContext:\n"
"    def __init__(self):\n"
"        self.lock = threading.Lock()\n"
"\n"
"    def __enter__(self):\n"
"        # If KeyboardInterrupt occurs here, everything is fine\n"
"        self.lock.acquire()\n"
"        # If KeyboardInterrupt occurs here, __exit__ will not be called\n"
"        ...\n"
"        # KeyboardInterrupt could occur just before the function returns\n"
"\n"
"    def __exit__(self, exc_type, exc_val, exc_tb):\n"
"        ...\n"
"        self.lock.release()"
msgstr ""
"class SpamContext:\n"
"    def __init__(self):\n"
"        self.lock = threading.Lock()\n"
"\n"
"    def __enter__(self):\n"
"        # If KeyboardInterrupt occurs here, everything is fine\n"
"        self.lock.acquire()\n"
"        # If KeyboardInterrupt occurs here, __exit__ will not be called\n"
"        ...\n"
"        # KeyboardInterrupt could occur just before the function returns\n"
"\n"
"    def __exit__(self, exc_type, exc_val, exc_tb):\n"
"        ...\n"
"        self.lock.release()"

#: ../../library/signal.rst:771
msgid ""
"For many programs, especially those that merely want to exit on :exc:"
"`KeyboardInterrupt`, this is not a problem, but applications that are "
"complex or require high reliability should avoid raising exceptions from "
"signal handlers. They should also avoid catching :exc:`KeyboardInterrupt` as "
"a means of gracefully shutting down.  Instead, they should install their "
"own :const:`SIGINT` handler. Below is an example of an HTTP server that "
"avoids :exc:`KeyboardInterrupt`::"
msgstr ""
"Для многих программ, особенно тех, которые просто хотят завершить работу по :"
"exc:`KeyboardInterrupt`, это не проблема, но приложениям, которые сложны или "
"требуют высокой надежности, следует избегать вызова исключений из "
"обработчиков сигналов. Им также следует избегать перехвата :exc:"
"`KeyboardInterrupt` как средства корректного завершения работы. Вместо этого "
"им следует установить собственный обработчик :const:`SIGINT`. Ниже приведен "
"пример HTTP-сервера, который избегает :exc:`KeyboardInterrupt`::"

#: ../../library/signal.rst:779
msgid ""
"import signal\n"
"import socket\n"
"from selectors import DefaultSelector, EVENT_READ\n"
"from http.server import HTTPServer, SimpleHTTPRequestHandler\n"
"\n"
"interrupt_read, interrupt_write = socket.socketpair()\n"
"\n"
"def handler(signum, frame):\n"
"    print('Signal handler called with signal', signum)\n"
"    interrupt_write.send(b'\\0')\n"
"signal.signal(signal.SIGINT, handler)\n"
"\n"
"def serve_forever(httpd):\n"
"    sel = DefaultSelector()\n"
"    sel.register(interrupt_read, EVENT_READ)\n"
"    sel.register(httpd, EVENT_READ)\n"
"\n"
"    while True:\n"
"        for key, _ in sel.select():\n"
"            if key.fileobj == interrupt_read:\n"
"                interrupt_read.recv(1)\n"
"                return\n"
"            if key.fileobj == httpd:\n"
"                httpd.handle_request()\n"
"\n"
"print(\"Serving on port 8000\")\n"
"httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)\n"
"serve_forever(httpd)\n"
"print(\"Shutdown...\")"
msgstr ""
"import signal\n"
"import socket\n"
"from selectors import DefaultSelector, EVENT_READ\n"
"from http.server import HTTPServer, SimpleHTTPRequestHandler\n"
"\n"
"interrupt_read, interrupt_write = socket.socketpair()\n"
"\n"
"def handler(signum, frame):\n"
"    print('Signal handler called with signal', signum)\n"
"    interrupt_write.send(b'\\0')\n"
"signal.signal(signal.SIGINT, handler)\n"
"\n"
"def serve_forever(httpd):\n"
"    sel = DefaultSelector()\n"
"    sel.register(interrupt_read, EVENT_READ)\n"
"    sel.register(httpd, EVENT_READ)\n"
"\n"
"    while True:\n"
"        for key, _ in sel.select():\n"
"            if key.fileobj == interrupt_read:\n"
"                interrupt_read.recv(1)\n"
"                return\n"
"            if key.fileobj == httpd:\n"
"                httpd.handle_request()\n"
"\n"
"print(\"Serving on port 8000\")\n"
"httpd = HTTPServer(('', 8000), SimpleHTTPRequestHandler)\n"
"serve_forever(httpd)\n"
"print(\"Shutdown...\")"
