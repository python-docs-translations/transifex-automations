# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "Раньше этот модуль был частью модуля :mod:`collections`."

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**Исходный код:** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a :term:"
"`mapping`."
msgstr ""
"Этот модуль предоставляет :term:`абстрактные базовые классы <абстрактный "
"базовый класс>`, которые можно использовать для проверки того, предоставляет "
"ли класс определенный интерфейс; например, является ли это :term:`hashable` "
"или :term:`mapping`."

#: ../../library/collections.abc.rst:27
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""
"Тест :func:`issubclass` или :func:`isinstance` для интерфейса работает одним "
"из трёх способов."

#: ../../library/collections.abc.rst:30
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""
"1) Недавно написанный класс может наследовать непосредственно от одного из "
"абстрактных базовых классов. Класс должен предоставить необходимые "
"абстрактные методы. Остальные методы миксина наследуются и при желании могут "
"быть переопределены. При необходимости могут быть добавлены другие методы:"

#: ../../library/collections.abc.rst:50
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the API:"
msgstr ""
"2) Существующие классы и встроенные классы могут быть зарегистрированы как "
"«виртуальные подклассы» ABC. Эти классы должны определять полный API, "
"включая все абстрактные методы и все методы примесей. Это позволяет "
"пользователям полагаться на тесты :func:`issubclass` или :func:`isinstance`, "
"чтобы определить, поддерживается ли полный интерфейс. Исключением из этого "
"правила являются методы, которые автоматически выводятся из остальной части "
"API:"

#: ../../library/collections.abc.rst:76
msgid ""
"In this example, class :class:`!D` does not need to define ``__contains__``, "
"``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the :func:"
"`reversed` function automatically fall back to using ``__getitem__`` and "
"``__len__``."
msgstr ""
"В этом примере классу :class:`!D` не требуется определять ``__contains__``, "
"``__iter__`` и ``__reversed__``, поскольку :ref:`in-operator "
"<comparisons>`, :term:`iteration <iterable>`, и функция :func:`reversed` "
"автоматически возвращается к использованию ``__getitem__`` и ``__len__``."

#: ../../library/collections.abc.rst:82
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""
"3) Некоторые простые интерфейсы можно сразу узнать по наличию необходимых "
"методов (если для этих методов не установлено значение :const:`None`):"

#: ../../library/collections.abc.rst:99
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""
"Сложные интерфейсы не поддерживают этот последний метод, поскольку интерфейс "
"— это нечто большее, чем просто наличие имен методов. Интерфейсы определяют "
"семантику и отношения между методами, которые нельзя вывести только из "
"наличия конкретных имен методов. Например, знание того, что класс "
"предоставляет ``__getitem__``, ``__len__`` и ``__iter__``, недостаточно для "
"того, чтобы отличить :class:`Sequence` от :class:`Mapping`."

#: ../../library/collections.abc.rst:107
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"Эти абстрактные классы теперь поддерживают ``[]``. См. :ref:`types-"
"genericalias` и :pep:`585`."

#: ../../library/collections.abc.rst:114
msgid "Collections Abstract Base Classes"
msgstr "Коллекции Абстрактные базовые классы"

#: ../../library/collections.abc.rst:116
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""
"Модуль коллекций предлагает следующие :term:`ABC <абстрактный базовый "
"класс>`:"

#: ../../library/collections.abc.rst:121
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:121
msgid "Inherits from"
msgstr "Наследует от"

#: ../../library/collections.abc.rst:121
msgid "Abstract Methods"
msgstr "Абстрактные методы"

#: ../../library/collections.abc.rst:121
msgid "Mixin Methods"
msgstr "Смешанные методы"

#: ../../library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ":class:`Container` [1]_"

#: ../../library/collections.abc.rst:123
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ":class:`Hashable` [1]_"

#: ../../library/collections.abc.rst:124
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ":class:`Iterable` [1]_ [2]_"

#: ../../library/collections.abc.rst:125 ../../library/collections.abc.rst:126
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ":class:`Iterator` [1]_"

#: ../../library/collections.abc.rst:126 ../../library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:126
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ":class:`Reversible` [1]_"

#: ../../library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ":class:`Generator`  [1]_"

#: ../../library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:128 ../../library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../../library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ":class:`Sized`  [1]_"

#: ../../library/collections.abc.rst:129 ../../library/collections.abc.rst:168
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ":class:`Callable`  [1]_"

#: ../../library/collections.abc.rst:130
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ":class:`Collection`  [1]_"

#: ../../library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:131 ../../library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:138
#: ../../library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, и ``count``"

#: ../../library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../../library/collections.abc.rst:138
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``clear``, ``reverse``, "
"``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"Унаследованные методы :class:`Sequence`, ``append``, ``clear``, ``reverse``, "
"``extend``, ``pop``, ``remove`` и ``__iadd__` `"

#: ../../library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:144
msgid "Inherited :class:`Sequence` methods"
msgstr "Унаследованные методы :class:`Sequence`."

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"

#: ../../library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:151
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Унаследованные методы :class:`Set` и ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, и ``__isub__``"

#: ../../library/collections.abc.rst:157 ../../library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, и "
"``__ne__``"

#: ../../library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:161
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"Наследуемые методы :class:`Mapping` и ``pop``, ``popitem``, ``clear``, "
"``update``, и ``setdefault``"

#: ../../library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
#: ../../library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ":class:`Awaitable` [1]_"

#: ../../library/collections.abc.rst:175
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ":class:`Coroutine` [1]_"

#: ../../library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:176
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ":class:`AsyncIterable` [1]_"

#: ../../library/collections.abc.rst:177 ../../library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ":class:`AsyncIterator` [1]_"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:178
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ":class:`AsyncGenerator` [1]_"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:184
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/collections.abc.rst:185
msgid ""
"These ABCs override :meth:`~abc.ABCMeta.__subclasshook__` to support testing "
"an interface by verifying the required methods are present and have not been "
"set to :const:`None`.  This only works for simple interfaces.  More complex "
"interfaces require registration or direct subclassing."
msgstr ""
"Эти ABC переопределяют :meth:`~abc.ABCMeta.__subclasshook__` для поддержки "
"тестирования интерфейса путем проверки наличия требуемых методов и того, что "
"для них не установлено значение :const:`None`. Это работает только для "
"простых интерфейсов. Более сложные интерфейсы требуют регистрации или "
"прямого создания подклассов."

#: ../../library/collections.abc.rst:191
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but "
"it does not detect classes that iterate with the :meth:`~object.__getitem__` "
"method.  The only reliable way to determine whether an object is :term:"
"`iterable` is to call ``iter(obj)``."
msgstr ""
"Проверка ``isinstance(obj, Iterable)`` обнаруживает классы, "
"зарегистрированные как :class:`Iterable` или имеющие метод :meth:`~container."
"__iter__`, но не обнаруживает классы, которые выполняют итерацию с помощью :"
"meth :`~object.__getitem__` метод. Единственный надежный способ определить, "
"является ли объект :term:`iterable`, это вызвать ``iter(obj)``."

#: ../../library/collections.abc.rst:199
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr "Коллекции Абстрактные базовые классы – подробные описания"

#: ../../library/collections.abc.rst:204
msgid "ABC for classes that provide the :meth:`~object.__contains__` method."
msgstr "ABC для классов, предоставляющих метод :meth:`~object.__contains__`."

#: ../../library/collections.abc.rst:208
msgid "ABC for classes that provide the :meth:`~object.__hash__` method."
msgstr "ABC для классов, предоставляющих метод :meth:`~object.__hash__`."

#: ../../library/collections.abc.rst:212
msgid "ABC for classes that provide the :meth:`~object.__len__` method."
msgstr "ABC для классов, предоставляющих метод :meth:`~object.__len__`."

#: ../../library/collections.abc.rst:216
msgid "ABC for classes that provide the :meth:`~object.__call__` method."
msgstr "ABC для классов, предоставляющих метод :meth:`~object.__call__`."

#: ../../library/collections.abc.rst:220
msgid "ABC for classes that provide the :meth:`~container.__iter__` method."
msgstr "ABC для классов, предоставляющих метод :meth:`~container.__iter__`."

#: ../../library/collections.abc.rst:222
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but "
"it does not detect classes that iterate with the :meth:`~object.__getitem__` "
"method. The only reliable way to determine whether an object is :term:"
"`iterable` is to call ``iter(obj)``."
msgstr ""
"Проверка ``isinstance(obj, Iterable)`` обнаруживает классы, "
"зарегистрированные как :class:`Iterable` или имеющие метод :meth:`~container."
"__iter__`, но не обнаруживает классы, которые выполняют итерацию с помощью :"
"meth :`~object.__getitem__` метод. Единственный надежный способ определить, "
"является ли объект :term:`iterable`, это вызвать ``iter(obj)``."

#: ../../library/collections.abc.rst:231
msgid "ABC for sized iterable container classes."
msgstr "ABC для повторяющихся классов контейнеров определенного размера."

#: ../../library/collections.abc.rst:237
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"ABC для классов, предоставляющих методы :meth:`~iterator.__iter__` и :meth:"
"`~iterator.__next__`. См. также определение :term:`iterator`."

#: ../../library/collections.abc.rst:243
msgid ""
"ABC for iterable classes that also provide the :meth:`~object.__reversed__` "
"method."
msgstr ""
"ABC для итерируемых классов, которые также предоставляют метод :meth:"
"`~object.__reversed__`."

#: ../../library/collections.abc.rst:250
msgid ""
"ABC for :term:`generator` classes that implement the protocol defined in :"
"pep:`342` that extends :term:`iterators <iterator>` with the :meth:"
"`~generator.send`, :meth:`~generator.throw` and :meth:`~generator.close` "
"methods."
msgstr ""
"ABC для классов :term:`generator`, которые реализуют протокол, определенный "
"в :pep:`342`, который расширяет :term:`iterators <iterator>` с помощью :meth:"
"`~generator.send`, :meth:`~generator Методы .throw` и :meth:`~generator."
"close`."

#: ../../library/collections.abc.rst:261
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""
"ABC для доступных только для чтения и изменяемых :term:`последовательностей "
"<sequence>`."

#: ../../library/collections.abc.rst:263
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`~container."
"__iter__`, :meth:`~object.__reversed__` and :meth:`index`, make repeated "
"calls to the underlying :meth:`~object.__getitem__` method. Consequently, "
"if :meth:`~object.__getitem__` is implemented with constant access speed, "
"the mixin methods will have linear performance; however, if the underlying "
"method is linear (as it would be with a linked list), the mixins will have "
"quadratic performance and will likely need to be overridden."
msgstr ""
"Примечание по реализации: некоторые методы примеси, такие как :meth:"
"`~container.__iter__`, :meth:`~object.__reversed__` и :meth:`index`, "
"выполняют повторные вызовы базового :meth:`~объекта. .__getitem__` метод. "
"Следовательно, если :meth:`~object.__getitem__` реализован с постоянной "
"скоростью доступа, методы примеси будут иметь линейную производительность; "
"однако, если базовый метод является линейным (как это было бы со связанным "
"списком), примеси будут иметь квадратичную производительность и, вероятно, "
"их придется переопределить."

#: ../../library/collections.abc.rst:272
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "В метод index() добавлена ​​поддержка аргументов *stop* и *start*."

#: ../../library/collections.abc.rst:279
msgid "ABCs for read-only and mutable :ref:`sets <types-set>`."
msgstr "ABC для доступных только для чтения и изменяемых наборов <types-set>."

#: ../../library/collections.abc.rst:284
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""
"ABC для доступных только для чтения и изменяемых сопоставлений <mapping>`."

#: ../../library/collections.abc.rst:291
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"ABC для сопоставления, элементов, ключей и значений :term:`views <dictionary "
"view>`."

#: ../../library/collections.abc.rst:295
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`~object."
"__await__` method."
msgstr ""
"ABC для объектов :term:`awaitable`, которые можно использовать в выражениях :"
"keyword:`await`. Пользовательские реализации должны предоставлять метод :"
"meth:`~object.__await__`."

#: ../../library/collections.abc.rst:299
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
"Объекты :term:`Coroutine <coroutine>` и экземпляры :class:`~collections.abc."
"Coroutine` ABC являются экземплярами этого ABC."

#: ../../library/collections.abc.rst:303
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*, "
"even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"В CPython сопрограммы на основе генератора (:term:`generators <generator>`, "
"украшенные :func:`@types.coroutine <types.coroutine>`) являются "
"*awaitables*, хотя у них нет :meth:` Метод ~object.__await__`. Использование "
"isinstance(gencoro, Awaitable) для них вернет False. Используйте :func:"
"`inspect.isawaitable` для их обнаружения."

#: ../../library/collections.abc.rst:313
msgid ""
"ABC for :term:`coroutine` compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`~object.__await__`.  All :class:`Coroutine` "
"instances are also instances of :class:`Awaitable`."
msgstr ""
"ABC для классов, совместимых с :term:`coroutine`. Они реализуют следующие "
"методы, определенные в :ref:`coroutine-objects`: :meth:`~coroutine.send`, :"
"meth:`~coroutine.throw` и :meth:`~coroutine.close`. Пользовательские "
"реализации также должны реализовывать :meth:`~object.__await__`. Все "
"экземпляры :class:`Coroutine` также являются экземплярами :class:`Awaitable`."

#: ../../library/collections.abc.rst:321
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*, "
"even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"В CPython сопрограммы на основе генератора (:term:`generators <generator>`, "
"украшенные :func:`@types.coroutine <types.coroutine>`) являются "
"*awaitables*, хотя у них нет :meth:` Метод ~object.__await__`. Использование "
"isinstance(gencoro, Coroutine) для них вернет False. Используйте :func:"
"`inspect.isawaitable` для их обнаружения."

#: ../../library/collections.abc.rst:331
msgid ""
"ABC for classes that provide an ``__aiter__`` method.  See also the "
"definition of :term:`asynchronous iterable`."
msgstr ""
"ABC для классов, предоставляющих метод ``__aiter__``. См. также определение :"
"term:`асинхронного итерируемого`."

#: ../../library/collections.abc.rst:338
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC для классов, предоставляющих методы __aiter__ и __anext__. См. также "
"определение :term:`асинхронного итератора`."

#: ../../library/collections.abc.rst:345
msgid ""
"ABC for :term:`asynchronous generator` classes that implement the protocol "
"defined in :pep:`525` and :pep:`492`."
msgstr ""
"ABC для классов асинхронного генератора, которые реализуют протокол, "
"определенный в :pep:`525` и :pep:`492`."

#: ../../library/collections.abc.rst:351
msgid "Examples and Recipes"
msgstr "Примеры и рецепты"

#: ../../library/collections.abc.rst:353
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""
"ABC позволяют нам спрашивать классы или экземпляры, предоставляют ли они "
"определенную функциональность, например:"

#: ../../library/collections.abc.rst:360
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`~object.__contains__`, :meth:`~container."
"__iter__`, and :meth:`~object.__len__`. The ABC supplies the remaining "
"methods such as :meth:`!__and__` and :meth:`~frozenset.isdisjoint`::"
msgstr ""
"Некоторые из ABC также полезны в качестве примесей, которые упрощают "
"разработку классов, поддерживающих API-интерфейсы контейнеров. Например, "
"чтобы написать класс, поддерживающий полный API :class:`Set`, необходимо "
"только предоставить три базовых абстрактных метода: :meth:`~object."
"__contains__`, :meth:`~container.__iter__`, и :meth:`~object.__len__`. ABC "
"предоставляет остальные методы, такие как :meth:`!__and__` и :meth:"
"`~frozenset.isdisjoint`::"

#: ../../library/collections.abc.rst:389
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""
"Примечания по использованию :class:`Set` и :class:`MutableSet` в качестве "
"примеси:"

#: ../../library/collections.abc.rst:392
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an :term:`iterable`. The class constructor "
"is assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal :class:`classmethod` called :meth:"
"`!_from_iterable` which calls ``cls(iterable)`` to produce a new set. If "
"the :class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`!_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"Поскольку некоторые операции над множествами создают новые наборы, методам "
"примеси по умолчанию нужен способ создания новых экземпляров из :term:"
"`iterable`. Предполагается, что конструктор класса имеет подпись в форме "
"ClassName(iterable). Это предположение переносится во внутренний :class:"
"`classmethod`, называемый :meth:`!_from_iterable`, который вызывает "
"``cls(iterable)`` для создания нового набора. Если миксин :class:`Set` "
"используется в классе с другой сигнатурой конструктора, вам необходимо "
"переопределить :meth:`!_from_iterable` с помощью метода класса или обычного "
"метода, который может создавать новые экземпляры из итерируемого аргумента."

#: ../../library/collections.abc.rst:403
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`~object.__le__` and :meth:`~object.__ge__`, then the "
"other operations will automatically follow suit."
msgstr ""
"Чтобы переопределить сравнения (предположительно для скорости, поскольку "
"семантика фиксирована), переопределите :meth:`~object.__le__` и :meth:"
"`~object.__ge__`, тогда другие операции автоматически последуют этому "
"примеру."

#: ../../library/collections.abc.rst:409
msgid ""
"The :class:`Set` mixin provides a :meth:`!_hash` method to compute a hash "
"value for the set; however, :meth:`~object.__hash__` is not defined because "
"not all sets are :term:`hashable` or immutable.  To add set hashability "
"using mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then "
"define ``__hash__ = Set._hash``."
msgstr ""
"Миксин :class:`Set` предоставляет метод :meth:`!_hash` для вычисления хеш-"
"значения для набора; однако :meth:`~object.__hash__` не определен, поскольку "
"не все наборы являются :term:`hashable` или неизменяемыми. Чтобы добавить "
"хешируемость набора с помощью миксинов, наследуйте как :meth:`Set`, так и :"
"meth:`Hashable`, затем определите ``__hash__ = Set._hash``."

#: ../../library/collections.abc.rst:417
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`Рецепт OrderedSet <https://code.activestate.com/recipes/576694/>`_ для "
"примера, построенного на :class:`MutableSet`."

#: ../../library/collections.abc.rst:420
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"Дополнительную информацию об ABC см. в модулях :mod:`abc` и :pep:`3119`."
