# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/zipimport.rst:2
msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ""

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**Исходный код:** :source:`Lib/zipimport.py`"

#: ../../library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"Этот модуль добавляет возможность импортировать модули Python (:file:`\\*."
"py`, :file:`\\*.pyc`) и пакеты из архивов формата ZIP. Обычно нет "
"необходимости явно использовать модуль :mod:`zipimport`; он автоматически "
"используется встроенным механизмом :keyword:`import` для элементов :data:"
"`sys.path`, которые являются путями к ZIP-архивам."

#: ../../library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"Обычно :data:`sys.path` представляет собой список имен каталогов в виде "
"строк. Этот модуль также позволяет элементу :data:`sys.path` быть строкой, "
"именующей ZIP-архив. ZIP-архив может содержать структуру подкаталогов для "
"поддержки импорта пакетов, а путь внутри архива можно указать только для "
"импорта из подкаталога. Например, путь :file:`example.zip/lib/` будет "
"импортироваться только из подкаталога :file:`lib/` внутри архива."

#: ../../library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"В ZIP-архиве могут присутствовать любые файлы, но импортеры вызываются "
"только для файлов :file:`.py` и :file:`.pyc`. Импорт динамических модулей в "
"формате ZIP (:file:`.pyd`, :file:`.so`) запрещен. Обратите внимание: если "
"архив содержит только файлы :file:`.py`, Python не будет пытаться изменить "
"архив, добавляя соответствующий файл :file:`.pyc`, а это означает, что если "
"ZIP-архив не содержит :file: `.pyc`, импорт может быть довольно медленным."

#: ../../library/zipimport.rst:33
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr "Ранее ZIP-архивы с архивным комментарием не поддерживались."

#: ../../library/zipimport.rst:40
msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`Примечания по применению PKZIP <https://pkware.cachefly.net/webdocs/"
"casestudies/APPNOTE.TXT>`_"

#: ../../library/zipimport.rst:39
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""
"Документация по формату файла ZIP от Фила Каца, создателя формата и "
"используемых алгоритмов."

#: ../../library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Импорт модулей из Zip-архивов"

#: ../../library/zipimport.rst:43
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"Написано Джеймсом К. Альстромом, который также предоставил реализацию. "
"Python 2.3 следует спецификации :pep:`273`, но использует реализацию, "
"написанную Джастом ван Россумом, которая использует перехватчики импорта, "
"описанные в :pep:`302`."

#: ../../library/zipimport.rst:48
msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - Реализация механизма импорта"

#: ../../library/zipimport.rst:48
msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr ""
"Пакет, содержащий соответствующие протоколы для внедрения всеми импортерами."

#: ../../library/zipimport.rst:52
msgid "This module defines an exception:"
msgstr "Этот модуль определяет исключение:"

#: ../../library/zipimport.rst:56
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"Исключение, вызываемое объектами zipimporter. Это подкласс :exc:"
"`ImportError`, поэтому его также можно перехватить как :exc:`ImportError`."

#: ../../library/zipimport.rst:63
msgid "zipimporter Objects"
msgstr "Объекты zipimporter"

#: ../../library/zipimport.rst:65
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` — класс для импорта ZIP-файлов."

#: ../../library/zipimport.rst:69
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"Создайте новый экземпляр zipimporter. *archivepath* должен быть путем к ZIP-"
"файлу или к определенному пути внутри ZIP-файла. Например, *archivepath* :"
"file:`foo/bar.zip/lib` будет искать модули в каталоге :file:`lib` внутри ZIP-"
"файла :file:`foo/bar.zip` (при условии, что оно существует)."

#: ../../library/zipimport.rst:74
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""
":exc:`ZipImportError` возникает, если *archivepath* не указывает на "
"действительный ZIP-архив."

#: ../../library/zipimport.rst:79
msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns :"
"const:`None` to explicitly request the default semantics."
msgstr ""
"Реализация :meth:`importlib.abc.Loader.create_module`, который возвращает :"
"const:`None` для явного запроса семантики по умолчанию."

#: ../../library/zipimport.rst:87
msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr "Реализация :meth:`importlib.abc.Loader.exec_module`."

#: ../../library/zipimport.rst:94
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_loader`."
msgstr ""

#: ../../library/zipimport.rst:98 ../../library/zipimport.rst:111
msgid "Use :meth:`find_spec` instead."
msgstr ""

#: ../../library/zipimport.rst:103
msgid ""
"Search for a module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the zipimporter instance itself "
"if the module was found, or :const:`None` if it wasn't. The optional *path* "
"argument is ignored---it's there for compatibility with the importer "
"protocol."
msgstr ""

#: ../../library/zipimport.rst:116
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr "Реализация :meth:`importlib.abc.PathEntryFinder.find_spec`."

#: ../../library/zipimport.rst:123
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be imported."
msgstr ""
"Верните объект кода для указанного модуля. Поднимите :exc:`ZipImportError`, "
"если модуль не удалось импортировать."

#: ../../library/zipimport.rst:129
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr ""
"Верните данные, связанные с *pathname*. Поднимите :exc:`OSError`, если файл "
"не найден."

#: ../../library/zipimport.rst:132
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ""

#: ../../library/zipimport.rst:138
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr ""
"Возвращает значение ``__file__``, которое будет установлено, если указанный "
"модуль был импортирован. Поднимите :exc:`ZipImportError`, если модуль не "
"удалось импортировать."

#: ../../library/zipimport.rst:147
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"Верните исходный код для указанного модуля. Вызовите :exc:`ZipImportError`, "
"если модуль не удалось найти, верните :const:`None`, если архив содержит "
"модуль, но не имеет для него источника."

#: ../../library/zipimport.rst:155
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"Возвращайте ``True``, если модуль, указанный *fullname*, является пакетом. "
"Поднимите :exc:`ZipImportError`, если модуль не найден."

#: ../../library/zipimport.rst:161
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""
"Загрузите модуль, указанный *полное имя*. *полное имя* должно быть полным "
"именем модуля (через точки). Возвращает импортированный модуль в случае "
"успеха, вызывает :exc:`ZipImportError` в случае неудачи."

#: ../../library/zipimport.rst:167
msgid "Use :meth:`exec_module` instead."
msgstr "Вместо этого используйте :meth:`exec_module`."

#: ../../library/zipimport.rst:172
msgid ""
"Clear out the internal cache of information about files found within the ZIP "
"archive."
msgstr "Очистите внутренний кэш информации о файлах, найденных в ZIP-архиве."

#: ../../library/zipimport.rst:180
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr "Имя файла ZIP, связанного с импортером, без возможного подпути."

#: ../../library/zipimport.rst:186
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""
"Подпуть в ZIP-файле, по которому осуществляется поиск модулей. Это пустая "
"строка для объектов zipimporter, указывающих на корень ZIP-файла."

#: ../../library/zipimport.rst:190
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
"Атрибуты :attr:`archive` и :attr:`prefix`, объединенные косой чертой, равны "
"исходному аргументу *archivepath*, переданному конструктору :class:"
"`zipimporter`."

#: ../../library/zipimport.rst:198
msgid "Examples"
msgstr "Примеры"

#: ../../library/zipimport.rst:200
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr ""
"Вот пример импорта модуля из ZIP-архива — обратите внимание, что модуль :mod:"
"`zipimport` явно не используется."
