# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 16:02+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/warnings.rst:2
msgid ":mod:`warnings` --- Warning control"
msgstr ""

#: ../../library/warnings.rst:7
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**Исходный код:** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:13
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program uses "
"an obsolete module."
msgstr ""
"Предупреждающие сообщения обычно выдаются в ситуациях, когда полезно "
"предупредить пользователя о каком-либо состоянии в программе, когда это "
"условие (обычно) не требует создания исключения и завершения программы. "
"Например, может потребоваться выдать предупреждение, если программа "
"использует устаревший модуль."

#: ../../library/warnings.rst:18
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see :ref:"
"`exceptionhandling` for details)."
msgstr ""
"Программисты Python выдают предупреждения, вызывая функцию :func:`warn`, "
"определенную в этом модуле. (Программисты на языке C используют :c:func:"
"`PyErr_WarnEx`; подробности см. в :ref:`Exceptionhandling`)."

#: ../../library/warnings.rst:22
msgid ""
"Warning messages are normally written to :data:`sys.stderr`, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the :"
"ref:`warning category <warning-categories>`, the text of the warning "
"message, and the source location where it is issued.  Repetitions of a "
"particular warning for the same source location are typically suppressed."
msgstr ""
"Предупреждающие сообщения обычно записываются в :data:`sys.stderr`, но их "
"расположение можно гибко менять: от игнорирования всех предупреждений до "
"превращения их в исключения. Расположение предупреждений может различаться в "
"зависимости от :ref:`категории предупреждения <warning-categories>`, текста "
"предупреждающего сообщения и исходного местоположения, где оно выдается. "
"Повторение определенного предупреждения для одного и того же исходного "
"местоположения обычно подавляется."

#: ../../library/warnings.rst:29
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a user-"
"settable hook."
msgstr ""
"Контроль предупреждений состоит из двух этапов: во-первых, каждый раз при "
"выдаче предупреждения определяется, следует ли выдавать сообщение или нет; "
"затем, если сообщение должно быть выдано, оно форматируется и печатается с "
"использованием настраиваемого пользователем перехватчика."

#: ../../library/warnings.rst:33
msgid ""
"The determination whether to issue a warning message is controlled by the :"
"ref:`warning filter <warning-filter>`, which is a sequence of matching rules "
"and actions. Rules can be added to the filter by calling :func:"
"`filterwarnings` and reset to its default state by calling :func:"
"`resetwarnings`."
msgstr ""
"Решение о выдаче предупреждающего сообщения контролируется :ref:`фильтром "
"предупреждений <warning-filter>`, который представляет собой "
"последовательность соответствующих правил и действий. Правила можно добавить "
"в фильтр, вызвав :func:`filterwarnings`, и сбросить их в состояние по "
"умолчанию, вызвав :func:`resetwarnings`."

#: ../../library/warnings.rst:38
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats "
"the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""
"Печать предупреждающих сообщений осуществляется вызовом :func:`showwarning`, "
"который можно переопределить; реализация этой функции по умолчанию "
"форматирует сообщение, вызывая :func:`formatwarning`, который также доступен "
"для использования пользовательскими реализациями."

#: ../../library/warnings.rst:44
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with the "
"standard logging infrastructure."
msgstr ""
":func:`logging.captureWarnings` позволяет обрабатывать все предупреждения с "
"помощью стандартной инфраструктуры журналирования."

#: ../../library/warnings.rst:51
msgid "Warning Categories"
msgstr "Категории предупреждений"

#: ../../library/warnings.rst:53
msgid ""
"There are a number of built-in exceptions that represent warning categories. "
"This categorization is useful to be able to filter out groups of warnings."
msgstr ""
"Существует ряд встроенных исключений, которые представляют категории "
"предупреждений. Эта категоризация полезна для фильтрации групп "
"предупреждений."

#: ../../library/warnings.rst:56
msgid ""
"While these are technically :ref:`built-in exceptions <warning-categories-as-"
"exceptions>`, they are documented here, because conceptually they belong to "
"the warnings mechanism."
msgstr ""
"Хотя технически это :ref:`встроенные исключения <warning-categories-as-"
"Exceptions>`, они документированы здесь, поскольку концептуально они "
"принадлежат механизму предупреждений."

#: ../../library/warnings.rst:60
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr ""
"Пользовательский код может определять дополнительные категории "
"предупреждений путем создания подкласса одной из стандартных категорий "
"предупреждений. Категория предупреждения всегда должна быть подклассом "
"класса :exc:`Warning`."

#: ../../library/warnings.rst:64
msgid "The following warnings category classes are currently defined:"
msgstr ""
"В настоящее время определены следующие классы категорий предупреждений:"

#: ../../library/warnings.rst:69
msgid "Class"
msgstr "Класс"

#: ../../library/warnings.rst:69
msgid "Description"
msgstr "Описание"

#: ../../library/warnings.rst:71
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:71
msgid ""
"This is the base class of all warning category classes.  It is a subclass "
"of :exc:`Exception`."
msgstr ""
"Это базовый класс всех классов категорий предупреждений. Это подкласс :exc:"
"`Exception`."

#: ../../library/warnings.rst:75
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:75
msgid "The default category for :func:`warn`."
msgstr "Категория по умолчанию для :func:`warn`."

#: ../../library/warnings.rst:77
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:77
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for other Python developers (ignored by default, unless triggered "
"by code in ``__main__``)."
msgstr ""
"Базовая категория для предупреждений об устаревших функциях, когда эти "
"предупреждения предназначены для других разработчиков Python (по умолчанию "
"игнорируются, если не активируются кодом в ``__main__``)."

#: ../../library/warnings.rst:82
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:82
msgid "Base category for warnings about dubious syntactic features."
msgstr ""
"Базовая категория для предупреждений о сомнительных синтаксических "
"особенностях."

#: ../../library/warnings.rst:85
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:85
msgid "Base category for warnings about dubious runtime features."
msgstr ""
"Базовая категория для предупреждений о сомнительных функциях среды "
"выполнения."

#: ../../library/warnings.rst:88
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:88
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""
"Базовая категория для предупреждений об устаревших функциях, когда эти "
"предупреждения предназначены для конечных пользователей приложений, "
"написанных на Python."

#: ../../library/warnings.rst:93
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:93
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr ""
"Базовая категория для предупреждений о функциях, которые в будущем станут "
"устаревшими (по умолчанию игнорируются)."

#: ../../library/warnings.rst:97
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:97
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr ""
"Базовая категория для предупреждений, возникающих в процессе импорта модуля "
"(по умолчанию игнорируется)."

#: ../../library/warnings.rst:101
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:101
msgid "Base category for warnings related to Unicode."
msgstr "Базовая категория для предупреждений, связанных с Unicode."

#: ../../library/warnings.rst:104
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:104
msgid ""
"Base category for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""
"Базовая категория для предупреждений, связанных с :class:`bytes` и :class:"
"`bytearray`."

#: ../../library/warnings.rst:107
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/warnings.rst:107
msgid ""
"Base category for warnings related to resource usage (ignored by default)."
msgstr ""
"Базовая категория для предупреждений, связанных с использованием ресурсов "
"(по умолчанию игнорируется)."

#: ../../library/warnings.rst:111
msgid ""
"Previously :exc:`DeprecationWarning` and :exc:`FutureWarning` were "
"distinguished based on whether a feature was being removed entirely or "
"changing its behaviour. They are now distinguished based on their intended "
"audience and the way they're handled by the default warnings filters."
msgstr ""
"Раньше :exc:`DeprecationWarning` и :exc:`FutureWarning` различались в "
"зависимости от того, удалялась ли функция полностью или менялось ее "
"поведение. Теперь они различаются по целевой аудитории и по способу их "
"обработки фильтрами предупреждений по умолчанию."

#: ../../library/warnings.rst:122
msgid "The Warnings Filter"
msgstr "Фильтр предупреждений"

#: ../../library/warnings.rst:124
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""
"Фильтр предупреждений контролирует, будут ли предупреждения игнорироваться, "
"отображаться или превращаться в ошибки (вызывая исключение)."

#: ../../library/warnings.rst:127
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the filter "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"Концептуально фильтр предупреждений поддерживает упорядоченный список "
"спецификаций фильтра; любое конкретное предупреждение поочередно "
"сопоставляется с каждой спецификацией фильтра в списке, пока не будет "
"найдено совпадение; фильтр определяет расположение матча. Каждая запись "
"представляет собой кортеж вида (*действие*, *сообщение*, *категория*, "
"*модуль*, *lineno*), где:"

#: ../../library/warnings.rst:133
msgid "*action* is one of the following strings:"
msgstr "*действие* — это одна из следующих строк:"

#: ../../library/warnings.rst:136
msgid "Value"
msgstr "Значение"

#: ../../library/warnings.rst:136
msgid "Disposition"
msgstr "Расположение"

#: ../../library/warnings.rst:138
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each location (module + "
"line number) where the warning is issued"
msgstr ""
"распечатать первое появление совпадающего предупреждения для каждого места "
"(модуль + номер строки), где выдается предупреждение"

#: ../../library/warnings.rst:142
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:142
msgid "turn matching warnings into exceptions"
msgstr "превратить соответствующие предупреждения в исключения"

#: ../../library/warnings.rst:144
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:144
msgid "never print matching warnings"
msgstr "никогда не печатать соответствующие предупреждения"

#: ../../library/warnings.rst:146
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:146
msgid "always print matching warnings"
msgstr "всегда печатать соответствующие предупреждения"

#: ../../library/warnings.rst:148
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:148
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued (regardless of line number)"
msgstr ""
"вывести первое появление совпадающего предупреждения для каждого модуля, в "
"котором выдано предупреждение (независимо от номера строки)"

#: ../../library/warnings.rst:152
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:152
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr ""
"печатать только первое появление соответствующих предупреждений, независимо "
"от местоположения"

#: ../../library/warnings.rst:156
msgid ""
"*message* is a string containing a regular expression that the start of the "
"warning message must match, case-insensitively.  In :option:`-W` and :envvar:"
"`PYTHONWARNINGS`, *message* is a literal string that the start of the "
"warning message must contain (case-insensitively), ignoring any whitespace "
"at the start or end of *message*."
msgstr ""
"*message* — это строка, содержащая регулярное выражение, которому должно "
"соответствовать начало предупреждающего сообщения, без учета регистра. В :"
"option:`-W` и :envvar:`PYTHONWARNINGS` *message* — это литеральная строка, "
"которую должно содержать начало предупреждающего сообщения (без учета "
"регистра), игнорируя любые пробелы в начале или конце *message*. ."

#: ../../library/warnings.rst:162
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match."
msgstr ""
"*category* — это класс (подкласс :exc:`Warning`), для которого категория "
"предупреждения должна быть подклассом, чтобы соответствовать."

#: ../../library/warnings.rst:165
msgid ""
"*module* is a string containing a regular expression that the start of the "
"fully qualified module name must match, case-sensitively.  In :option:`-W` "
"and :envvar:`PYTHONWARNINGS`, *module* is a literal string that the fully "
"qualified module name must be equal to (case-sensitively), ignoring any "
"whitespace at the start or end of *module*."
msgstr ""
"*модуль* — это строка, содержащая регулярное выражение, которому должно "
"соответствовать начало полного имени модуля, с учетом регистра. В :option:`-"
"W` и :envvar:`PYTHONWARNINGS` *module* — это литеральная строка, которой "
"должно быть равно полное имя модуля (с учетом регистра), игнорируя любые "
"пробелы в начале или конце *module. *."

#: ../../library/warnings.rst:171
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers."
msgstr ""
"*lineno* — целое число, которому должен соответствовать номер строки, в "
"которой возникло предупреждение, или ``0``, чтобы соответствовать всем "
"номерам строк."

#: ../../library/warnings.rst:174
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""
"Поскольку класс :exc:`Warning` является производным от встроенного класса :"
"exc:`Exception`, чтобы превратить предупреждение в ошибку, мы просто "
"вызываем ``category(message)``."

#: ../../library/warnings.rst:177
msgid ""
"If a warning is reported and doesn't match any registered filter then the "
"\"default\" action is applied (hence its name)."
msgstr ""
"Если выдается предупреждение и оно не соответствует ни одному из "
"зарегистрированных фильтров, применяется действие «по умолчанию» (отсюда и "
"его название)."

#: ../../library/warnings.rst:184
msgid "Describing Warning Filters"
msgstr "Описание фильтров предупреждений"

#: ../../library/warnings.rst:186
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line and the :envvar:`PYTHONWARNINGS` environment "
"variable. The interpreter saves the arguments for all supplied entries "
"without interpretation in :data:`sys.warnoptions`; the :mod:`warnings` "
"module parses these when it is first imported (invalid options are ignored, "
"after printing a message to :data:`sys.stderr`)."
msgstr ""
"Фильтр предупреждений инициализируется параметрами :option:`-W`, "
"передаваемыми в командную строку интерпретатора Python, и переменной среды :"
"envvar:`PYTHONWARNINGS`. Интерпретатор сохраняет аргументы для всех "
"предоставленных записей без интерпретации в :data:`sys.warnoptions`; модуль :"
"mod:`warnings` анализирует их при первом импорте (неверные параметры "
"игнорируются после печати сообщения в :data:`sys.stderr`)."

#: ../../library/warnings.rst:193
msgid ""
"Individual warnings filters are specified as a sequence of fields separated "
"by colons::"
msgstr ""
"Фильтры индивидуальных предупреждений задаются в виде последовательности "
"полей, разделенных двоеточиями::"

#: ../../library/warnings.rst:198
msgid ""
"The meaning of each of these fields is as described in :ref:`warning-"
"filter`. When listing multiple filters on a single line (as for :envvar:"
"`PYTHONWARNINGS`), the individual filters are separated by commas and the "
"filters listed later take precedence over those listed before them (as "
"they're applied left-to-right, and the most recently applied filters take "
"precedence over earlier ones)."
msgstr ""
"Значение каждого из этих полей описано в :ref:`warning-filter`. При "
"перечислении нескольких фильтров в одной строке (как в :envvar:"
"`PYTHONWARNINGS`) отдельные фильтры разделяются запятыми, а фильтры, "
"перечисленные позже, имеют приоритет над фильтрами, перечисленными до них "
"(поскольку они применяются слева направо, и фильтры, примененные последними, "
"имеют приоритет над более ранними)."

#: ../../library/warnings.rst:205
msgid ""
"Commonly used warning filters apply to either all warnings, warnings in a "
"particular category, or warnings raised by particular modules or packages. "
"Some examples::"
msgstr ""
"Обычно используемые фильтры предупреждений применяются ко всем "
"предупреждениям, предупреждениям определенной категории или предупреждениям, "
"создаваемым определенными модулями или пакетами. Несколько примеров::"

#: ../../library/warnings.rst:221
msgid "Default Warning Filter"
msgstr "Фильтр предупреждений по умолчанию"

#: ../../library/warnings.rst:223
msgid ""
"By default, Python installs several warning filters, which can be overridden "
"by the :option:`-W` command-line option, the :envvar:`PYTHONWARNINGS` "
"environment variable and calls to :func:`filterwarnings`."
msgstr ""
"По умолчанию Python устанавливает несколько фильтров предупреждений, которые "
"можно переопределить с помощью параметра командной строки :option:`-W`, "
"переменной среды :envvar:`PYTHONWARNINGS` и вызова :func:`filterwarnings`."

#: ../../library/warnings.rst:227
msgid ""
"In regular release builds, the default warning filter has the following "
"entries (in order of precedence)::"
msgstr ""
"В сборках обычных выпусков фильтр предупреждений по умолчанию имеет "
"следующие записи (в порядке приоритета):"

#: ../../library/warnings.rst:236
msgid ""
"In a :ref:`debug build <debug-build>`, the list of default warning filters "
"is empty."
msgstr ""
"В :ref:`debug build <debug-build>` список фильтров предупреждений по "
"умолчанию пуст."

#: ../../library/warnings.rst:238
msgid ""
":exc:`DeprecationWarning` is now ignored by default in addition to :exc:"
"`PendingDeprecationWarning`."
msgstr ""
":exc:`DeprecationWarning` теперь игнорируется по умолчанию в дополнение к :"
"exc:`PendingDeprecationWarning`."

#: ../../library/warnings.rst:242
msgid ""
":exc:`DeprecationWarning` is once again shown by default when triggered "
"directly by code in ``__main__``."
msgstr ""
":exc:`DeprecationWarning` снова отображается по умолчанию, если он "
"запускается непосредственно кодом в ``__main__``."

#: ../../library/warnings.rst:246
msgid ""
":exc:`BytesWarning` no longer appears in the default filter list and is "
"instead configured via :data:`sys.warnoptions` when :option:`-b` is "
"specified twice."
msgstr ""
":exc:`BytesWarning` больше не отображается в списке фильтров по умолчанию и "
"вместо этого настраивается через :data:`sys.warnoptions`, когда :option:`-b` "
"указан дважды."

#: ../../library/warnings.rst:255
msgid "Overriding the default filter"
msgstr "Переопределение фильтра по умолчанию"

#: ../../library/warnings.rst:257
msgid ""
"Developers of applications written in Python may wish to hide *all* Python "
"level warnings from their users by default, and only display them when "
"running tests or otherwise working on the application. The :data:`sys."
"warnoptions` attribute used to pass filter configurations to the interpreter "
"can be used as a marker to indicate whether or not warnings should be "
"disabled::"
msgstr ""
"Разработчики приложений, написанных на Python, могут захотеть по умолчанию "
"скрыть *все* предупреждения уровня Python от своих пользователей и "
"отображать их только при запуске тестов или другой работе с приложением. "
"Атрибут :data:`sys.warnoptions`, используемый для передачи конфигураций "
"фильтра интерпретатору, может использоваться в качестве маркера, "
"указывающего, следует ли отключать предупреждения:"

#: ../../library/warnings.rst:269
msgid ""
"Developers of test runners for Python code are advised to instead ensure "
"that *all* warnings are displayed by default for the code under test, using "
"code like::"
msgstr ""
"Разработчикам средств запуска тестов для кода Python рекомендуется вместо "
"этого убедиться, что *все* предупреждения отображаются по умолчанию для "
"тестируемого кода, используя такой код::"

#: ../../library/warnings.rst:280
msgid ""
"Finally, developers of interactive shells that run user code in a namespace "
"other than ``__main__`` are advised to ensure that :exc:`DeprecationWarning` "
"messages are made visible by default, using code like the following (where "
"``user_ns`` is the module used to execute code entered interactively)::"
msgstr ""
"Наконец, разработчикам интерактивных оболочек, которые запускают "
"пользовательский код в пространстве имен, отличном от ``__main__``, "
"рекомендуется обеспечить, чтобы сообщения :exc:`DeprecationWarning` были "
"видимыми по умолчанию, используя код, подобный следующему (где ``user_ns`` "
"модуль, используемый для выполнения кода, введенного в интерактивном "
"режиме)::"

#: ../../library/warnings.rst:293
msgid "Temporarily Suppressing Warnings"
msgstr "Временное подавление предупреждений"

#: ../../library/warnings.rst:295
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning (even when warnings "
"have been explicitly configured via the command line), then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""
"Если вы используете код, который, как вы знаете, вызовет предупреждение, "
"например устаревшую функцию, но не хотите видеть предупреждение (даже если "
"предупреждения были явно настроены через командную строку), то "
"предупреждение можно подавить с помощью контекстный менеджер :class:"
"`catch_warnings`::"

#: ../../library/warnings.rst:309
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code.  Note: this can only be guaranteed in a single-"
"threaded application. If two or more threads use the :class:`catch_warnings` "
"context manager at the same time, the behavior is undefined."
msgstr ""
"В то время как внутри контекстного менеджера все предупреждения будут просто "
"игнорироваться. Это позволяет вам использовать заведомо устаревший код, не "
"видя предупреждения, и при этом не подавлять предупреждение для другого "
"кода, который может не знать об использовании устаревшего кода. Примечание: "
"это может быть гарантировано только в однопоточном приложении. Если два или "
"более потоков одновременно используют контекстный менеджер :class:"
"`catch_warnings`, поведение не определено."

#: ../../library/warnings.rst:321
msgid "Testing Warnings"
msgstr "Предупреждения о тестировании"

#: ../../library/warnings.rst:323
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""
"Чтобы проверить предупреждения, выдаваемые кодом, используйте контекстный "
"менеджер :class:`catch_warnings`. С его помощью вы можете временно изменить "
"фильтр предупреждений, чтобы облегчить тестирование. Например, сделайте "
"следующее, чтобы захватить все выдаваемые предупреждения для проверки:"

#: ../../library/warnings.rst:343
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""
"Можно также сделать все предупреждения исключениями, используя ``error`` "
"вместо ``always``. Следует иметь в виду, что если предупреждение уже было "
"выдано из-за правила ``ones``/``default``, то независимо от того, какие "
"фильтры установлены, предупреждение не будет отображаться снова, если только "
"это не связано с реестром предупреждений. чтобы предупреждение было снято."

#: ../../library/warnings.rst:349
msgid ""
"Once the context manager exits, the warnings filter is restored to its state "
"when the context was entered. This prevents tests from changing the warnings "
"filter in unexpected ways between tests and leading to indeterminate test "
"results. The :func:`showwarning` function in the module is also restored to "
"its original value.  Note: this can only be guaranteed in a single-threaded "
"application. If two or more threads use the :class:`catch_warnings` context "
"manager at the same time, the behavior is undefined."
msgstr ""
"После выхода из контекстного менеджера фильтр предупреждений "
"восстанавливается в то состояние, в котором он был введен в контекст. Это "
"предотвращает неожиданное изменение фильтра предупреждений между тестами, "
"что приводит к неопределенным результатам теста. Функция :func:`showwarning` "
"в модуле также восстанавливается до исходного значения. Примечание: это "
"может быть гарантировано только в однопоточном приложении. Если два или "
"более потоков одновременно используют контекстный менеджер :class:"
"`catch_warnings`, поведение не определено."

#: ../../library/warnings.rst:357
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a "
"new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""
"При тестировании нескольких операций, вызывающих одно и то же "
"предупреждение, важно тестировать их таким образом, чтобы подтвердить, что "
"каждая операция вызывает новое предупреждение (например, установить "
"предупреждения, которые будут выдаваться как исключения, и проверить, что "
"операции вызывают исключения, проверить, что длина списка предупреждений "
"продолжает увеличиваться после каждой операции, или же удаляйте предыдущие "
"записи из списка предупреждений перед каждой новой операцией)."

#: ../../library/warnings.rst:368
msgid "Updating Code For New Versions of Dependencies"
msgstr "Обновление кода для новых версий зависимостей"

#: ../../library/warnings.rst:370
msgid ""
"Warning categories that are primarily of interest to Python developers "
"(rather than end users of applications written in Python) are ignored by "
"default."
msgstr ""
"Категории предупреждений, которые в первую очередь представляют интерес для "
"разработчиков Python (а не для конечных пользователей приложений, написанных "
"на Python), по умолчанию игнорируются."

#: ../../library/warnings.rst:373
msgid ""
"Notably, this \"ignored by default\" list includes :exc:`DeprecationWarning` "
"(for every module except ``__main__``), which means developers should make "
"sure to test their code with typically ignored warnings made visible in "
"order to receive timely notifications of future breaking API changes "
"(whether in the standard library or third party packages)."
msgstr ""
"Примечательно, что этот список «игнорируемых по умолчанию» включает :exc:"
"`DeprecationWarning` (для каждого модуля, кроме ``__main__``), что означает, "
"что разработчики должны обязательно тестировать свой код с видимыми обычно "
"игнорируемыми предупреждениями, чтобы получать своевременные уведомления. "
"будущих критических изменений API (будь то в стандартной библиотеке или "
"сторонних пакетах)."

#: ../../library/warnings.rst:379
msgid ""
"In the ideal case, the code will have a suitable test suite, and the test "
"runner will take care of implicitly enabling all warnings when running tests "
"(the test runner provided by the :mod:`unittest` module does this)."
msgstr ""
"В идеальном случае код будет иметь подходящий набор тестов, и программа "
"запуска тестов позаботится о неявном включении всех предупреждений при "
"запуске тестов (это делает программа запуска тестов, предоставляемая "
"модулем :mod:`unittest`)."

#: ../../library/warnings.rst:383
msgid ""
"In less ideal cases, applications can be checked for use of deprecated "
"interfaces by passing :option:`-Wd <-W>` to the Python interpreter (this is "
"shorthand for :option:`!-W default`) or setting ``PYTHONWARNINGS=default`` "
"in the environment. This enables default handling for all warnings, "
"including those that are ignored by default. To change what action is taken "
"for encountered warnings you can change what argument is passed to :option:`-"
"W` (e.g. :option:`!-W error`). See the :option:`-W` flag for more details on "
"what is possible."
msgstr ""
"В менее идеальных случаях приложения можно проверить на использование "
"устаревших интерфейсов, передав :option:`-Wd <-W>` интерпретатору Python "
"(это сокращение от :option:`!-W default`) или установив `` "
"PYTHONWARNINGS=default`` в среде. Это включает обработку по умолчанию для "
"всех предупреждений, включая те, которые по умолчанию игнорируются. Чтобы "
"изменить действие, предпринимаемое при обнаружении предупреждений, вы можете "
"изменить аргумент, передаваемый в :option:`-W` (например, :option:`!-W "
"error`). См. флаг :option:`-W` для получения более подробной информации о "
"том, что возможно."

#: ../../library/warnings.rst:396
msgid "Available Functions"
msgstr "Доступные функции"

#: ../../library/warnings.rst:401
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a :ref:`warning category class <warning-"
"categories>`; it defaults to :exc:`UserWarning`.  Alternatively, *message* "
"can be a :exc:`Warning` instance, in which case *category* will be ignored "
"and ``message.__class__`` will be used. In this case, the message text will "
"be ``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the :ref:`warnings filter "
"<warning-filter>`.  The *stacklevel* argument can be used by wrapper "
"functions written in Python, like this::"
msgstr ""
"Выдайте предупреждение или, возможно, проигнорируйте его или создайте "
"исключение. Аргумент *category*, если он указан, должен быть :ref:`классом "
"категории предупреждений <warning-categories>`; по умолчанию это :exc:"
"`UserWarning`. В качестве альтернативы *message* может быть экземпляром :exc:"
"`Warning`, и в этом случае *category* будет игнорироваться и будет "
"использоваться ``message.__class__``. В этом случае текст сообщения будет "
"``str(message)``. Эта функция вызывает исключение, если конкретное выданное "
"предупреждение изменено на ошибку фильтром предупреждений <warning-filter>`. "
"Аргумент *stacklevel* может использоваться функциями-оболочками, написанными "
"на Python, например:"

#: ../../library/warnings.rst:413
msgid ""
"This makes the warning refer to :func:`deprecation`'s caller, rather than to "
"the source of :func:`deprecation` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""

#: ../../library/warnings.rst:417 ../../library/warnings.rst:440
msgid ""
"*source*, if supplied, is the destroyed object which emitted a :exc:"
"`ResourceWarning`."
msgstr ""
"*source*, если он указан, — это уничтоженный объект, выдавший :exc:"
"`ResourceWarning`."

#: ../../library/warnings.rst:420
msgid "Added *source* parameter."
msgstr "Добавлен параметр *source*."

#: ../../library/warnings.rst:426
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults "
"to the filename with ``.py`` stripped; if no registry is passed, the warning "
"is never suppressed. *message* must be a string and *category* a subclass "
"of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which "
"case *category* will be ignored."
msgstr ""
"Это низкоуровневый интерфейс для функциональности :func:`warn`, в котором "
"явно передаются сообщение, категория, имя файла и номер строки, а также, при "
"необходимости, имя модуля и реестр (который должен быть словарем "
"``__warningregistry__`` модуля). Имя модуля по умолчанию соответствует имени "
"файла с удаленным ``.py``; если реестр не передается, предупреждение никогда "
"не подавляется. *message* должно быть строкой, а *category* является "
"подклассом :exc:`Warning` или *message* может быть экземпляром :exc:"
"`Warning`, и в этом случае *category* будет игнорироваться."

#: ../../library/warnings.rst:435
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr ""
"*module_globals*, если он указан, должен быть глобальным пространством имен, "
"используемым кодом, для которого выдается предупреждение. (Этот аргумент "
"используется для поддержки отображения источника модулей, найденных в zip-"
"файлах или других источниках импорта, не относящихся к файловой системе)."

#: ../../library/warnings.rst:443
msgid "Add the *source* parameter."
msgstr "Добавьте параметр *source*."

#: ../../library/warnings.rst:449
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to :data:`sys.stderr`.  You may "
"replace this function with any callable by assigning to ``warnings."
"showwarning``. *line* is a line of source code to be included in the warning "
"message; if *line* is not supplied, :func:`showwarning` will try to read the "
"line specified by *filename* and *lineno*."
msgstr ""
"Записать предупреждение в файл. Реализация по умолчанию вызывает "
"formatwarning(message,category,filename,lineno,line)`` и записывает "
"полученную строку в *file*, который по умолчанию имеет значение :data:`sys."
"stderr`. Вы можете заменить эту функцию любой вызываемой функцией, назначив "
"ее ``warnings.showwarning``. *строка* — строка исходного кода, которая будет "
"включена в предупреждающее сообщение; если *line* не указана, :func:"
"`showwarning` попытается прочитать строку, указанную *filename* и *lineno*."

#: ../../library/warnings.rst:460
msgid ""
"Format a warning the standard way.  This returns a string which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to "
"be included in the warning message; if *line* is not supplied, :func:"
"`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""
"Отформатируйте предупреждение стандартным способом. Возвращает строку, "
"которая может содержать встроенные символы новой строки и заканчивается "
"новой строкой. *строка* — строка исходного кода, которая будет включена в "
"предупреждающее сообщение; если *line* не указана, :func:`formatwarning` "
"попытается прочитать строку, указанную *filename* и *lineno*."

#: ../../library/warnings.rst:469
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of the "
"arguments, compiles the *message* and *module* regular expressions, and "
"inserts them as a tuple in the list of warnings filters.  Entries closer to "
"the front of the list override entries later in the list, if both match a "
"particular warning.  Omitted arguments default to a value that matches "
"everything."
msgstr ""
"Вставьте запись в список :ref:`спецификаций фильтра предупреждений <warning-"
"filter>`. По умолчанию запись вставляется спереди; если *append* имеет "
"значение true, оно вставляется в конец. При этом проверяются типы "
"аргументов, компилируются регулярные выражения *message* и *module* и "
"вставляются их кортежем в список фильтров предупреждений. Записи, "
"расположенные ближе к началу списка, переопределяют записи, расположенные "
"дальше в списке, если обе соответствуют определенному предупреждению. "
"Пропущенные аргументы по умолчанию принимают значение, которое соответствует "
"всему."

#: ../../library/warnings.rst:481
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The meaning of the function parameters is as for :func:"
"`filterwarnings`, but regular expressions are not needed as the filter "
"inserted always matches any message in any module as long as the category "
"and line number match."
msgstr ""
"Вставьте простую запись в список :ref:`спецификаций фильтра предупреждений "
"<warning-filter>`. Значение параметров функции такое же, как у :func:"
"`filterwarnings`, но регулярные выражения не нужны, поскольку вставленный "
"фильтр всегда соответствует любому сообщению в любом модуле, если категория "
"и номер строки совпадают."

#: ../../library/warnings.rst:490
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""
"Сбросьте фильтр предупреждений. Это отменяет эффект всех предыдущих вызовов :"
"func:`filterwarnings`, включая параметры командной строки :option:`-W` и "
"вызовы :func:`simplefilter`."

#: ../../library/warnings.rst:496
msgid "Available Context Managers"
msgstr "Доступные контекстные менеджеры"

#: ../../library/warnings.rst:500
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is :const:"
"`False` (the default) the context manager returns :class:`None` on entry. If "
"*record* is :const:`True`, a list is returned that is progressively "
"populated with objects as seen by a custom :func:`showwarning` function "
"(which also suppresses output to ``sys.stdout``). Each object in the list "
"has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""
"Контекстный менеджер, который копирует и при выходе восстанавливает фильтр "
"предупреждений и функцию :func:`showwarning`. Если аргумент *record* равен :"
"const:`False` (по умолчанию), контекстный менеджер возвращает :class:`None` "
"при вводе. Если *record* имеет значение :const:`True`, возвращается список, "
"который постепенно заполняется объектами, видимыми специальной функцией :"
"func:`showwarning` (которая также подавляет вывод в ``sys.stdout``). Каждый "
"объект в списке имеет атрибуты с теми же именами, что и аргументы :func:"
"`showwarning`."

#: ../../library/warnings.rst:509
msgid ""
"The *module* argument takes a module that will be used instead of the module "
"returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""
"Аргумент *module* принимает модуль, который будет использоваться вместо "
"модуля, возвращаемого при импорте :mod:`warnings`, фильтр которого будет "
"защищен. Этот аргумент существует в первую очередь для тестирования самого "
"модуля :mod:`warnings`."

#: ../../library/warnings.rst:516
msgid ""
"The :class:`catch_warnings` manager works by replacing and then later "
"restoring the module's :func:`showwarning` function and internal list of "
"filter specifications.  This means the context manager is modifying global "
"state and therefore is not thread-safe."
msgstr ""
"Менеджер :class:`catch_warnings` работает путем замены, а затем "
"восстановления функции :func:`showwarning` модуля и внутреннего списка "
"спецификаций фильтра. Это означает, что диспетчер контекста изменяет "
"глобальное состояние и, следовательно, не является потокобезопасным."
