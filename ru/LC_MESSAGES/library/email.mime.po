# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`!email.mime`: Creating email and MIME objects from scratch"
msgstr ":mod:`!email.mime`: Создание объектов электронной почты и MIME с нуля."

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Исходный код:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Этот модуль является частью устаревшего API электронной почты (Compat32). "
"Его функциональность частично заменена :mod:`~email.contentmanager` в новом "
"API, но в некоторых приложениях эти классы все еще могут быть полезны, даже "
"в устаревшем коде."

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new :class:"
"`~email.message.Message` objects, move them around, etc.  This makes a very "
"convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Обычно вы получаете структуру объекта сообщения, передавая файл или "
"некоторый текст синтаксическому анализатору, который анализирует текст и "
"возвращает корневой объект сообщения. Однако вы также можете создать полную "
"структуру сообщения с нуля или даже отдельные объекты :class:`~email.message."
"Message` вручную. Фактически, вы также можете взять существующую структуру и "
"добавить новые объекты :class:`~email.message.Message`, перемещать их и т. "
"д. Это создает очень удобный интерфейс для разделения MIME-сообщений."

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating :class:`~email.message."
"Message` instances, adding attachments and all the appropriate headers "
"manually.  For MIME messages though, the :mod:`email` package provides some "
"convenient subclasses to make things easier."
msgstr ""
"Вы можете создать новую структуру объекта, создав экземпляры :class:`~email."
"message.Message`, добавив вложения и все соответствующие заголовки вручную. "
"Однако для сообщений MIME пакет :mod:`email` предоставляет несколько удобных "
"подклассов, упрощающих работу."

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Вот классы:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Модуль: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is "
"provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"Это базовый класс для всех MIME-подклассов :class:`~email.message.Message`. "
"Обычно вы не будете создавать экземпляры конкретно :class:`MIMEBase`, хотя "
"могли бы. :class:`MIMEBase` предоставляется в первую очередь как удобный "
"базовый класс для более конкретных подклассов, поддерживающих MIME."

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype* — это основной тип :mailheader:`Content-Type` (например, :"
"mimetype:`text` или :mimetype:`image`), а *_subtype* — это второстепенный "
"тип :mailheader:`Content-Type` (например, :mimetype:`plain` или :mimetype:"
"`gif`). *_params* — это словарь ключей/значений параметров, который "
"передается непосредственно в :meth:`Message.add_header <email.message."
"Message.add_header>`."

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 <email.policy."
"Compat32>` policy) it will be passed to :class:`~email.message.Message`."
msgstr ""
"Если указана *policy* (по умолчанию политика :class:`compat32 <email.policy."
"Compat32>`), она будет передана в :class:`~email.message.Message`."

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"Класс :class:`MIMEBase` всегда добавляет заголовок :mailheader:`Content-"
"Type` (на основе *_maintype*, *_subtype* и *_params*) и заголовок :"
"mailheader:`MIME-Version` (всегда установлен на ``1.0``)."

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:205 ../../library/email.mime.rst:225
#: ../../library/email.mime.rst:259
msgid "Added *policy* keyword-only parameter."
msgstr "Добавлен параметр *policy*, доступный только по ключевым словам."

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Модуль: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the :meth:`~email."
"message.Message.attach` method, which only makes sense for :mimetype:"
"`multipart` messages.  If :meth:`~email.message.Message.attach` is called, "
"a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""
"Подкласс :class:`~email.mime.base.MIMEBase`, это промежуточный базовый класс "
"для сообщений MIME, которые не являются :mimetype:`multipart`. Основная цель "
"этого класса — предотвратить использование метода :meth:`~email.message."
"Message.attach`, который имеет смысл только для :mimetype:`multipart` "
"сообщений. Если вызывается :meth:`~email.message.Message.attach`, возникает "
"исключение :exc:`~email.errors.MultipartConversionError`."

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Модуль: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:"
"`multipart/_subtype` will be added to the message object.  A :mailheader:"
"`MIME-Version` header will also be added."
msgstr ""
"Подкласс :class:`~email.mime.base.MIMEBase`, это промежуточный базовый класс "
"для сообщений MIME, которые являются :mimetype:`multipart`. Необязательный "
"*_subtype* по умолчанию имеет значение :mimetype:`mixed`, но может "
"использоваться для указания подтипа сообщения. Заголовок :mailheader:"
"`Content-Type` :mimetype:`multipart/_subtype` будет добавлен к объекту "
"сообщения. Также будет добавлен заголовок :mailheader:`MIME-Version`."

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"Необязательная *граница* — это составная граничная строка. Если установлено "
"значение «Нет» (по умолчанию), граница вычисляется при необходимости "
"(например, при сериализации сообщения)."

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach <email.message."
"Message.attach>` method."
msgstr ""
"*_subparts* — это последовательность начальных частей полезной нагрузки. "
"Должна быть возможность преобразовать эту последовательность в список. Вы "
"всегда можете прикрепить к сообщению новые подразделы, используя метод :meth:"
"`Message.attach <email.message.Message.attach>`."

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:200
#: ../../library/email.mime.rst:223 ../../library/email.mime.rst:254
msgid ""
"Optional *policy* argument defaults to :class:`compat32 <email.policy."
"Compat32>`."
msgstr ""
"Необязательный аргумент *policy* по умолчанию имеет значение :class:"
"`compat32 <email.policy.Compat32>`."

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Дополнительные параметры для заголовка :mailheader:`Content-Type` берутся из "
"аргументов ключевого слова или передаются в аргумент *_params*, который "
"является словарем ключевых слов."

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "модуль: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEApplication` class is used to represent MIME message objects of major "
"type :mimetype:`application`.  *_data* contains the bytes for the raw "
"application data.  Optional *_subtype* specifies the MIME subtype and "
"defaults to :mimetype:`octet-stream`."
msgstr ""
"Подкласс :class:`~email.mime.nonmultipart.MIMENonMultipart`, класс :class:"
"`MIMEApplication` используется для представления объектов сообщения MIME "
"основного типа :mimetype:`application`. *_data* содержит байты "
"необработанных данных приложения. Необязательный *_subtype* указывает подтип "
"MIME и по умолчанию имеет значение :mimetype:`octet-stream`."

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"Необязательный *_encoder* — это вызываемая функция (т. е. функция), которая "
"будет выполнять фактическое кодирование данных для транспортировки. Этот "
"вызываемый объект принимает один аргумент, которым является экземпляр :class:"
"`MIMEApplication`. Он должен использовать :meth:`~email.message.Message."
"get_payload` и :meth:`~email.message.Message.set_payload` для изменения "
"полезной нагрузки на закодированную форму. При необходимости ему также "
"следует добавить к объекту сообщения любые :mailheader:`Content-Transfer-"
"Encoding` или другие заголовки. Кодировка по умолчанию — base64. См. модуль :"
"mod:`email.encoders` для получения списка встроенных кодировщиков."

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* передаются напрямую в конструктор базового класса."

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Модуль: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEAudio` class is used to create MIME message objects of major type :"
"mimetype:`audio`. *_audiodata* contains the bytes for the raw audio data.  "
"If this data can be decoded as au, wav, aiff, or aifc, then the subtype will "
"be automatically included in the :mailheader:`Content-Type` header. "
"Otherwise you can explicitly specify the audio subtype via the *_subtype* "
"argument.  If the minor type could not be guessed and *_subtype* was not "
"given, then :exc:`TypeError` is raised."
msgstr ""
"Подкласс :class:`~email.mime.nonmultipart.MIMENonMultipart`, класс :class:"
"`MIMEAudio` используется для создания объектов сообщений MIME основного "
"типа :mimetype:`audio`. *_audiodata* содержит байты необработанных "
"аудиоданных. Если эти данные можно декодировать как au, wav, aiff или aifc, "
"то подтип будет автоматически включен в заголовок :mailheader:`Content-"
"Type`. В противном случае вы можете явно указать подтип аудио с помощью "
"аргумента *_subtype*. Если младший тип не удалось угадать и *_subtype* не "
"был указан, то возникает :exc:`TypeError`."

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"Необязательный *_encoder* — это вызываемая функция (т.е. функция), которая "
"будет выполнять фактическое кодирование аудиоданных для транспортировки. "
"Этот вызываемый объект принимает один аргумент, которым является экземпляр :"
"class:`MIMEAudio`. Он должен использовать :meth:`~email.message.Message."
"get_payload` и :meth:`~email.message.Message.set_payload` для изменения "
"полезной нагрузки на закодированную форму. При необходимости ему также "
"следует добавить к объекту сообщения любые :mailheader:`Content-Transfer-"
"Encoding` или другие заголовки. Кодировка по умолчанию — base64. См. модуль :"
"mod:`email.encoders` для получения списка встроенных кодировщиков."

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Модуль: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEImage` class is used to create MIME message objects of major type :"
"mimetype:`image`. *_imagedata* contains the bytes for the raw image data.  "
"If this data type can be detected (jpeg, png, gif, tiff, rgb, pbm, pgm, ppm, "
"rast, xbm, bmp, webp, and exr attempted), then the subtype will be "
"automatically included in the :mailheader:`Content-Type` header. Otherwise "
"you can explicitly specify the image subtype via the *_subtype* argument. If "
"the minor type could not be guessed and *_subtype* was not given, then :exc:"
"`TypeError` is raised."
msgstr ""
"Подкласс :class:`~email.mime.nonmultipart.MIMENonMultipart`, класс :class:"
"`MIMEImage` используется для создания объектов сообщений MIME основного "
"типа :mimetype:`image`. *_imagedata* содержит байты необработанных данных "
"изображения. Если этот тип данных может быть обнаружен (попытка JPEG, PNG, "
"GIF, Tiff, RGB, PBM, PGM, PPM, rast, xbm, BMP, WebP и exr), то подтип будет "
"автоматически включен в :mailheader:` Заголовок Content-Type. В противном "
"случае вы можете явно указать подтип изображения с помощью аргумента "
"*_subtype*. Если младший тип не удалось угадать и *_subtype* не был указан, "
"то возникает :exc:`TypeError`."

#: ../../library/email.mime.rst:190
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"Необязательный *_encoder* — это вызываемая функция (т.е. функция), которая "
"будет выполнять фактическое кодирование данных изображения для "
"транспортировки. Этот вызываемый объект принимает один аргумент, которым "
"является экземпляр :class:`MIMEImage`. Он должен использовать :meth:`~email."
"message.Message.get_payload` и :meth:`~email.message.Message.set_payload` "
"для изменения полезной нагрузки на закодированную форму. При необходимости "
"ему также следует добавить к объекту сообщения любые :mailheader:`Content-"
"Transfer-Encoding` или другие заголовки. Кодировка по умолчанию — base64. "
"См. модуль :mod:`email.encoders` для получения списка встроенных "
"кодировщиков."

#: ../../library/email.mime.rst:202
msgid ""
"*_params* are passed straight through to the :class:`~email.mime.base."
"MIMEBase` constructor."
msgstr ""
"*_params* передаются напрямую в конструктор :class:`~email.mime.base."
"MIMEBase`."

#: ../../library/email.mime.rst:212
msgid "Module: :mod:`email.mime.message`"
msgstr "Модуль: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:214
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEMessage` class is used to create MIME objects of main type :mimetype:"
"`message`. *_msg* is used as the payload, and must be an instance of class :"
"class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:"
"`TypeError` is raised."
msgstr ""
"Подкласс :class:`~email.mime.nonmultipart.MIMENonMultipart`, класс :class:"
"`MIMEMessage` используется для создания объектов MIME основного типа :"
"mimetype:`message`. *_msg* используется в качестве полезных данных и должен "
"быть экземпляром класса :class:`~email.message.Message` (или его подкласса), "
"в противном случае возникает ошибка :exc:`TypeError`."

#: ../../library/email.mime.rst:220
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""
"Необязательный *_subtype* устанавливает подтип сообщения; по умолчанию это :"
"mimetype:`rfc822`."

#: ../../library/email.mime.rst:232
msgid "Module: :mod:`email.mime.text`"
msgstr "Модуль: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:234
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEText` class is used to create MIME objects of major type :mimetype:"
"`text`. *_text* is the string for the payload.  *_subtype* is the minor type "
"and defaults to :mimetype:`plain`.  *_charset* is the character set of the "
"text and is passed as an argument to the :class:`~email.mime.nonmultipart."
"MIMENonMultipart` constructor; it defaults to ``us-ascii`` if the string "
"contains only ``ascii`` code points, and ``utf-8`` otherwise.  The "
"*_charset* parameter accepts either a string or a :class:`~email.charset."
"Charset` instance."
msgstr ""
"Подкласс :class:`~email.mime.nonmultipart.MIMENonMultipart`, класс :class:"
"`MIMEText` используется для создания объектов MIME основного типа :mimetype:"
"`text`. *_text* — это строка полезных данных. *_subtype* является "
"второстепенным типом и по умолчанию имеет значение :mimetype:`plain`. "
"*_charset* — это набор символов текста, который передается в качестве "
"аргумента конструктору :class:`~email.mime.nonmultipart.MIMENonMultipart`; "
"по умолчанию используется ``us-ascii``, если строка содержит только кодовые "
"точки ``ascii``, и ``utf-8`` в противном случае. Параметр *_charset* "
"принимает либо строку, либо экземпляр :class:`~email.charset.Charset`."

#: ../../library/email.mime.rst:244
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` "
"header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"Если для аргумента *_charset* явно не установлено значение ``None``, "
"созданный объект MIMEText будет иметь как заголовок :mailheader:`Content-"
"Type` с параметром ``charset``, так и :mailheader:`Content- Заголовок "
"Transfer-Encoding`. Это означает, что последующий вызов set_payload не "
"приведет к получению закодированной полезной нагрузки, даже если в команде "
"set_payload передается кодировка. Вы можете «сбросить» это поведение, удалив "
"заголовок Content-Transfer-Encoding, после чего вызов set_payload "
"автоматически закодирует новую полезную нагрузку (и добавит новый :"
"mailheader:`Content-Transfer-Encoding). `заголовок)."

#: ../../library/email.mime.rst:256
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr "*_charset* также принимает экземпляры :class:`~email.charset.Charset`."
