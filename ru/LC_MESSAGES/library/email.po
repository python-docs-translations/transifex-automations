# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/email.rst:2
msgid ":mod:`email` --- An email and MIME handling package"
msgstr ""

#: ../../library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**Исходный код:** :source:`Lib/email/__init__.py`"

#: ../../library/email.rst:15
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP (:"
"rfc:`2821`), NNTP, or other servers; those are functions of modules such as :"
"mod:`smtplib` and :mod:`nntplib`.  The :mod:`email` package attempts to be "
"as RFC-compliant as possible, supporting :rfc:`5322` and :rfc:`6532`, as "
"well as such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :"
"rfc:`2183`, and :rfc:`2231`."
msgstr ""
"Пакет :mod:`email` — это библиотека для управления сообщениями электронной "
"почты. Он специально *не* предназначен для отправки сообщений электронной "
"почты на SMTP (:rfc:`2821`), NNTP или другие серверы; это функции таких "
"модулей, как :mod:`smtplib` и :mod:`nntplib`. Пакет :mod:`email` пытается "
"быть максимально совместимым с RFC, поддерживая :rfc:`5322` и :rfc:`6532`, а "
"также такие RFC, связанные с MIME, как :rfc:`2045`, : rfc:`2046`, :rfc:"
"`2047`, :rfc:`2183` и :rfc:`2231`."

#: ../../library/email.rst:23
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr ""
"Общую структуру пакета электронной почты можно разделить на три основных "
"компонента, а также четвертый компонент, который управляет поведением других "
"компонентов."

#: ../../library/email.rst:27
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through "
"the object model interface defined in the :mod:`~email.message` sub-module.  "
"The application can use this API to ask questions about an existing email, "
"to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the :class:`~email."
"message.EmailMessage` API."
msgstr ""
"Центральным компонентом пакета является «объектная модель», представляющая "
"сообщения электронной почты. Приложение взаимодействует с пакетом в основном "
"через интерфейс объектной модели, определенный в подмодуле :mod:`~email."
"message`. Приложение может использовать этот API, чтобы задавать вопросы о "
"существующем электронном письме, создавать новое электронное письмо или "
"добавлять или удалять подкомпоненты электронной почты, которые сами "
"используют тот же интерфейс объектной модели. То есть, следуя природе "
"сообщений электронной почты и их подкомпонентов MIME, объектная модель "
"электронной почты представляет собой древовидную структуру объектов, каждый "
"из которых предоставляет API :class:`~email.message.EmailMessage`."

#: ../../library/email.rst:37
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of "
"an email message (a stream of bytes) and converts it into a tree of :class:"
"`~email.message.EmailMessage` objects.  The generator takes an :class:"
"`~email.message.EmailMessage` and turns it back into a serialized byte "
"stream.  (The parser and generator also handle streams of text characters, "
"but this usage is discouraged as it is too easy to end up with messages that "
"are not valid in one way or another.)"
msgstr ""
"Два других основных компонента пакета — это :mod:`~email.parser` и :mod:"
"`~email.generator`. Анализатор берет сериализованную версию сообщения "
"электронной почты (поток байтов) и преобразует ее в дерево объектов :class:"
"`~email.message.EmailMessage`. Генератор принимает :class:`~email.message."
"EmailMessage` и превращает его обратно в сериализованный поток байтов. "
"(Парсер и генератор также обрабатывают потоки текстовых символов, но такое "
"использование не рекомендуется, так как слишком легко получить сообщения, "
"которые тем или иным образом недействительны.)"

#: ../../library/email.rst:46
msgid ""
"The control component is the :mod:`~email.policy` module.  Every :class:"
"`~email.message.EmailMessage`, every :mod:`~email.generator`, and every :mod:"
"`~email.parser` has an associated :mod:`~email.policy` object that controls "
"its behavior.  Usually an application only needs to specify the policy when "
"an :class:`~email.message.EmailMessage` is created, either by directly "
"instantiating an :class:`~email.message.EmailMessage`  to create a new "
"email, or by parsing an input stream using a :mod:`~email.parser`.  But the "
"policy can be changed when the message is serialized using a :mod:`~email."
"generator`. This allows, for example, a generic email message to be parsed "
"from disk, but to serialize it using standard SMTP settings when sending it "
"to an email server."
msgstr ""
"Компонент управления — это модуль :mod:`~email.policy`. Каждый :class:"
"`~email.message.EmailMessage`, каждый :mod:`~email.generator` и каждый :mod:"
"`~email.parser` имеет связанный с ним объект :mod:`~email.policy`, который "
"управляет его поведение. Обычно приложению необходимо указать политику "
"только при создании :class:`~email.message.EmailMessage`, либо путем "
"непосредственного создания экземпляра :class:`~email.message.EmailMessage` "
"для создания нового электронного письма, либо путем анализа входной поток с "
"использованием :mod:`~email.parser`. Но политику можно изменить, когда "
"сообщение сериализуется с помощью :mod:`~email.generator`. Это позволяет, "
"например, анализировать общее сообщение электронной почты с диска, но "
"сериализовать его с использованием стандартных настроек SMTP при отправке на "
"сервер электронной почты."

#: ../../library/email.rst:58
msgid ""
"The email package does its best to hide the details of the various governing "
"RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they "
"identify multipart documents.  For the most part this knowledge should only "
"be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"Пакет электронной почты делает все возможное, чтобы скрыть от приложения "
"детали различных регулирующих RFC. Концептуально приложение должно иметь "
"возможность обрабатывать сообщение электронной почты как структурированное "
"дерево текста в Юникоде и двоичных вложений, не беспокоясь о том, как они "
"будут представлены при сериализации. Однако на практике часто необходимо "
"знать хотя бы некоторые правила, регулирующие сообщения MIME и их структуру, "
"в частности, имена и природу «типов контента» MIME и то, как они "
"идентифицируют составные документы. По большей части эти знания должны "
"требоваться только для более сложных приложений, и даже тогда это должна "
"быть только рассматриваемая структура высокого уровня, а не детали того, как "
"эти структуры представлены. Поскольку типы контента MIME широко используются "
"в современном интернет-программном обеспечении (не только в электронной "
"почте), это понятие знакомо многим программистам."

#: ../../library/email.rst:71
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the :mod:"
"`~email.parser` and :mod:`~email.generator` components.  Then we cover the :"
"mod:`~email.policy` controls, which completes the treatment of the main "
"components of the library."
msgstr ""
"В следующих разделах описываются функциональные возможности пакета :mod:"
"`email`. Мы начнем с объектной модели :mod:`~email.message`, которая "
"является основным интерфейсом, который будет использовать приложение, а "
"затем :mod:`~email.parser` и :mod:`~email.generator` компоненты. Затем мы "
"рассмотрим элементы управления :mod:`~email.policy`, которые завершают "
"обработку основных компонентов библиотеки."

#: ../../library/email.rst:78
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the :mod:`~email."
"contentmanager` sub-components, which provide tools for doing more detailed "
"manipulation of headers and payloads, respectively.  Both of these "
"components contain features relevant to consuming and producing non-trivial "
"messages, but also document their extensibility APIs, which will be of "
"interest to advanced applications."
msgstr ""
"Следующие три раздела описывают исключения, которые может вызвать пакет, и "
"дефекты (несоответствие RFC), которые может обнаружить :mod:`~email.parser`. "
"Затем мы рассмотрим подкомпоненты :mod:`~email.headerregistry` и :mod:"
"`~email.contentmanager`, которые предоставляют инструменты для более "
"детального манипулирования заголовками и полезными данными соответственно. "
"Оба этих компонента содержат функции, необходимые для получения и создания "
"нетривиальных сообщений, а также документируют свои API-интерфейсы "
"расширяемости, которые будут представлять интерес для продвинутых приложений."

#: ../../library/email.rst:87
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr ""
"После этого приводится набор примеров использования фундаментальных частей "
"API, описанных в предыдущих разделах."

#: ../../library/email.rst:90
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the :class:`~email.message."
"Message` class, cover the legacy :data:`~email.policy.compat32` API that "
"deals much more directly with the details of how email messages are "
"represented.  The :data:`~email.policy.compat32` API does *not* hide the "
"details of the RFCs from the application, but for applications that need to "
"operate at that level, they can be useful tools.  This documentation is also "
"relevant for applications that are still using the :mod:`~email.policy."
"compat32` API for backward compatibility reasons."
msgstr ""
"Вышеупомянутое представляет собой современный (совместимый с Unicode) API "
"пакета электронной почты. Остальные разделы, начиная с класса :class:`~email."
"message.Message`, охватывают устаревший API :data:`~email.policy.compat32`, "
"который гораздо более непосредственно занимается деталями представления "
"сообщений электронной почты. API :data:`~email.policy.compat32` *не* "
"скрывает детали RFC от приложения, но для приложений, которым необходимо "
"работать на этом уровне, они могут быть полезными инструментами. Эта "
"документация также актуальна для приложений, которые все еще используют API :"
"mod:`~email.policy.compat32` из соображений обратной совместимости."

#: ../../library/email.rst:100
msgid ""
"Docs reorganized and rewritten to promote the new :class:`~email.message."
"EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"Документы реорганизованы и переписаны для продвижения нового API :class:"
"`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy`."

#: ../../library/email.rst:105
msgid "Contents of the :mod:`email` package documentation:"
msgstr "Содержимое документации по пакету :mod:`email`:"

#: ../../library/email.rst:120
msgid "Legacy API:"
msgstr "Устаревший API:"

#: ../../library/email.rst:136
msgid "Module :mod:`smtplib`"
msgstr "Модуль :mod:`smtplib`"

#: ../../library/email.rst:136
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "Клиент SMTP (Simple Mail Transport Protocol)"

#: ../../library/email.rst:139
msgid "Module :mod:`poplib`"
msgstr "Модуль :mod:`poplib`"

#: ../../library/email.rst:139
msgid "POP (Post Office Protocol) client"
msgstr "Клиент POP (Post Office Protocol)"

#: ../../library/email.rst:142
msgid "Module :mod:`imaplib`"
msgstr "Модуль :mod:`imaplib`"

#: ../../library/email.rst:142
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "Клиент IMAP (Internet Message Access Protocol)"

#: ../../library/email.rst:145
msgid "Module :mod:`nntplib`"
msgstr "Модуль :mod:`nntplib`"

#: ../../library/email.rst:145
msgid "NNTP (Net News Transport Protocol) client"
msgstr "Клиент NNTP (Net News Transport Protocol)"

#: ../../library/email.rst:149
msgid "Module :mod:`mailbox`"
msgstr "Модуль :mod:`mailbox`"

#: ../../library/email.rst:148
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr ""
"Инструменты для создания, чтения и управления коллекциями сообщений на диске "
"с использованием различных стандартных форматов."

#: ../../library/email.rst:151
msgid "Module :mod:`smtpd`"
msgstr ""

#: ../../library/email.rst:152
msgid "SMTP server framework (primarily useful for testing)"
msgstr ""
