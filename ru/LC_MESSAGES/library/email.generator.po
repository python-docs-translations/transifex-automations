# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/email.generator.rst:2
msgid ":mod:`!email.generator`: Generating MIME documents"
msgstr ":mod:`!email.generator`: Генерация документов MIME"

#: ../../library/email.generator.rst:7
msgid "**Source code:** :source:`Lib/email/generator.py`"
msgstr "**Исходный код:** :source:`Lib/email/generator.py`"

#: ../../library/email.generator.rst:11
msgid ""
"One of the most common tasks is to generate the flat (serialized) version of "
"the email message represented by a message object structure.  You will need "
"to do this if you want to send your message via :meth:`smtplib.SMTP."
"sendmail` or the :mod:`nntplib` module, or print the message on the "
"console.  Taking a message object structure and producing a serialized "
"representation is the job of the generator classes."
msgstr ""
"Одной из наиболее распространенных задач является создание плоской "
"(сериализованной) версии сообщения электронной почты, представленной "
"структурой объекта сообщения. Вам нужно будет сделать это, если вы хотите "
"отправить сообщение через :meth:`smtplib.SMTP.sendmail` или модуль :mod:"
"`nntplib`, или распечатать сообщение на консоли. Задача классов-генераторов "
"— взять структуру объекта сообщения и создать сериализованное представление."

#: ../../library/email.generator.rst:18
msgid ""
"As with the :mod:`email.parser` module, you aren't limited to the "
"functionality of the bundled generator; you could write one from scratch "
"yourself.  However the bundled generator knows how to generate most email in "
"a standards-compliant way, should handle MIME and non-MIME email messages "
"just fine, and is designed so that the bytes-oriented parsing and generation "
"operations are inverses, assuming the same non-transforming :mod:`~email."
"policy` is used for both.  That is, parsing the serialized byte stream via "
"the :class:`~email.parser.BytesParser` class and then regenerating the "
"serialized byte stream using :class:`BytesGenerator` should produce output "
"identical to the input [#]_.  (On the other hand, using the generator on an :"
"class:`~email.message.EmailMessage` constructed by program may result in "
"changes to the :class:`~email.message.EmailMessage` object as defaults are "
"filled in.)"
msgstr ""
"Как и в случае с модулем :mod:`email.parser`, вы не ограничены "
"функциональностью встроенного генератора; вы могли бы написать его с нуля "
"самостоятельно. Однако встроенный генератор знает, как генерировать большую "
"часть электронной почты в соответствии со стандартами, должен прекрасно "
"обрабатывать сообщения электронной почты в формате MIME и не-MIME и "
"спроектирован таким образом, что операции байт-ориентированного анализа и "
"генерации являются обратными, предполагая, что одни и те же не-MIME-"
"сообщения являются обратными. Transforming :mod:`~email.policy` используется "
"для обоих. То есть анализ сериализованного потока байтов с помощью класса :"
"class:`~email.parser.BytesParser` и последующая генерация сериализованного "
"потока байтов с помощью :class:`BytesGenerator` должны давать выходные "
"данные, идентичные входным. [#]_ . (С другой стороны, использование "
"генератора в :class:`~email.message.EmailMessage`, созданном программой, "
"может привести к изменениям в объекте :class:`~email.message.EmailMessage`, "
"поскольку значения по умолчанию заполнены.)"

#: ../../library/email.generator.rst:32
msgid ""
"The :class:`Generator` class can be used to flatten a message into a text "
"(as opposed to binary) serialized representation, but since Unicode cannot "
"represent binary data directly, the message is of necessity transformed into "
"something that contains only ASCII characters, using the standard email RFC "
"Content Transfer Encoding techniques for encoding email messages for "
"transport over channels that are not \"8 bit clean\"."
msgstr ""
"Класс :class:`Generator` может использоваться для преобразования сообщения в "
"текстовое (в отличие от двоичного) сериализованное представление, но "
"поскольку Unicode не может представлять двоичные данные напрямую, сообщение "
"неизбежно преобразуется во что-то, содержащее только символы ASCII, "
"использование стандартных методов кодирования передачи контента RFC "
"электронной почты для кодирования сообщений электронной почты для передачи "
"по каналам, которые не являются «8-битными чистыми»."

#: ../../library/email.generator.rst:39
msgid ""
"To accommodate reproducible processing of SMIME-signed messages :class:"
"`Generator` disables header folding for message parts of type ``multipart/"
"signed`` and all subparts."
msgstr ""
"Чтобы обеспечить воспроизводимую обработку сообщений, подписанных SMIME, :"
"class:`Generator` отключает свертывание заголовков для частей сообщения типа "
"``multipart/signed`` и всех подчастей."

#: ../../library/email.generator.rst:47
msgid ""
"Return a :class:`BytesGenerator` object that will write any message provided "
"to the :meth:`flatten` method, or any surrogateescape encoded text provided "
"to the :meth:`write` method, to the :term:`file-like object` *outfp*. "
"*outfp* must support a ``write`` method that accepts binary data."
msgstr ""
"Возвращает объект :class:`BytesGenerator`, который будет записывать любое "
"сообщение, предоставленное методу :meth:` Flatten`, или любой закодированный "
"суррогатным кодом текст, предоставленный методу :meth:`write`, в файл :term:"
"`like объект` *outfp*. *outfp* должен поддерживать метод записи, который "
"принимает двоичные данные."

#: ../../library/email.generator.rst:52 ../../library/email.generator.rst:153
msgid ""
"If optional *mangle_from_* is ``True``, put a ``>`` character in front of "
"any line in the body that starts with the exact string ``\"From \"``, that "
"is ``From`` followed by a space at the beginning of a line.  *mangle_from_* "
"defaults to the value of the :attr:`~email.policy.Policy.mangle_from_` "
"setting of the *policy* (which is ``True`` for the :data:`~email.policy."
"compat32` policy and ``False`` for all others). *mangle_from_* is intended "
"for use when messages are stored in Unix mbox format (see :mod:`mailbox` and "
"`WHY THE CONTENT-LENGTH FORMAT IS BAD <https://www.jwz.org/doc/content-"
"length.html>`_)."
msgstr ""
"Если необязательный параметр *mangle_from_* имеет значение ``True``, "
"поместите символ ``>`` перед любой строкой в ​​теле, которая начинается с "
"точной строки ``\"From \"``, то есть после ``From`` через пробел в начале "
"строки. *mangle_from_* по умолчанию принимает значение параметра :attr:"
"`~email.policy.Policy.mangle_from_` для *policy* (что является ``True`` для "
"политики :data:`~email.policy.compat32` и «False» для всех остальных). "
"*mangle_from_* предназначен для использования, когда сообщения хранятся в "
"формате Unix mbox (см. :mod:`mailbox` и `ПОЧЕМУ ФОРМАТ ДЛИНЫ СОДЕРЖИМОГО "
"ПЛОХО <https://www.jwz.org/doc/content-length. html>`_)."

#: ../../library/email.generator.rst:62 ../../library/email.generator.rst:163
msgid ""
"If *maxheaderlen* is not ``None``, refold any header lines that are longer "
"than *maxheaderlen*, or if ``0``, do not rewrap any headers.  If "
"*manheaderlen* is ``None`` (the default), wrap headers and other message "
"lines according to the *policy* settings."
msgstr ""
"Если *maxheaderlen* не «None», переверните все строки заголовков, которые "
"длиннее *maxheaderlen*, или, если «0», не переносите никакие заголовки. Если "
"для *manheaderlen* установлено значение «Нет» (по умолчанию), заголовки и "
"другие строки сообщений переносятся в соответствии с настройками *policy*."

#: ../../library/email.generator.rst:67 ../../library/email.generator.rst:168
msgid ""
"If *policy* is specified, use that policy to control message generation.  If "
"*policy* is ``None`` (the default), use the policy associated with the :"
"class:`~email.message.Message` or :class:`~email.message.EmailMessage` "
"object passed to ``flatten`` to control the message generation.  See :mod:"
"`email.policy` for details on what *policy* controls."
msgstr ""
"Если указана *policy*, используйте эту политику для управления созданием "
"сообщений. Если *policy* имеет значение «None» (по умолчанию), используйте "
"политику, связанную с объектом :class:`~email.message.Message` или :class:"
"`~email.message.EmailMessage`, переданным в `` Flatten `` для управления "
"генерацией сообщений. См. :mod:`email.policy` для получения подробной "
"информации о том, что контролирует *policy*."

#: ../../library/email.generator.rst:75 ../../library/email.generator.rst:174
msgid "Added the *policy* keyword."
msgstr "Добавлено ключевое слово *policy*."

#: ../../library/email.generator.rst:77 ../../library/email.generator.rst:176
msgid ""
"The default behavior of the *mangle_from_* and *maxheaderlen* parameters is "
"to follow the policy."
msgstr ""
"По умолчанию параметры *mangle_from_* и *maxheaderlen* соответствуют "
"политике."

#: ../../library/email.generator.rst:83
msgid ""
"Print the textual representation of the message object structure rooted at "
"*msg* to the output file specified when the :class:`BytesGenerator` instance "
"was created."
msgstr ""
"Выведите текстовое представление структуры объекта сообщения с корнем в "
"*msg* в выходной файл, указанный при создании экземпляра :class:"
"`BytesGenerator`."

#: ../../library/email.generator.rst:87
msgid ""
"If the :mod:`~email.policy` option :attr:`~email.policy.Policy.cte_type` is "
"``8bit`` (the default), copy any headers in the original parsed message that "
"have not been modified to the output with any bytes with the high bit set "
"reproduced as in the original, and preserve the non-ASCII :mailheader:"
"`Content-Transfer-Encoding` of any body parts that have them. If "
"``cte_type`` is ``7bit``, convert the bytes with the high bit set as needed "
"using an ASCII-compatible :mailheader:`Content-Transfer-Encoding`. That is, "
"transform parts with non-ASCII :mailheader:`Content-Transfer-Encoding` (:"
"mailheader:`Content-Transfer-Encoding: 8bit`) to an ASCII compatible :"
"mailheader:`Content-Transfer-Encoding`, and encode RFC-invalid non-ASCII "
"bytes in headers using the MIME ``unknown-8bit`` character set, thus "
"rendering them RFC-compliant."
msgstr ""
"Если опция :mod:`~email.policy` :attr:`~email.policy.Policy.cte_type` имеет "
"значение ``8bit`` (по умолчанию), скопируйте все заголовки исходного "
"проанализированного сообщения, которые не были изменены на вывод с любыми "
"байтами с установленным старшим битом воспроизводится, как в оригинале, и "
"сохраняет не-ASCII :mailheader:`Content-Transfer-Encoding` любых частей "
"тела, в которых они есть. Если ``cte_type`` равен ``7bit``, преобразуйте "
"байты с установленным старшим битом по мере необходимости, используя ASCII-"
"совместимый :mailheader:`Content-Transfer-Encoding`. То есть преобразуйте "
"части с не-ASCII :mailheader:`Content-Transfer-Encoding` (:mailheader:"
"`Content-Transfer-Encoding: 8bit`) в ASCII-совместимый :mailheader:`Content-"
"Transfer-Encoding` и кодируйте Недопустимые RFC байты, не относящиеся к "
"ASCII, в заголовках с использованием набора символов MIME ``unknown-8bit``, "
"что делает их совместимыми с RFC."

#: ../../library/email.generator.rst:104 ../../library/email.generator.rst:197
msgid ""
"If *unixfrom* is ``True``, print the envelope header delimiter used by the "
"Unix mailbox format (see :mod:`mailbox`) before the first of the :rfc:`5322` "
"headers of the root message object.  If the root object has no envelope "
"header, craft a standard one.  The default is ``False``. Note that for "
"subparts, no envelope header is ever printed."
msgstr ""
"Если *unixfrom* имеет значение «True», выведите разделитель заголовка "
"конверта, используемый форматом почтового ящика Unix (см. :mod:`mailbox`) "
"перед первым из заголовков :rfc:`5322` корневого объекта сообщения. Если у "
"корневого объекта нет заголовка конверта, создайте стандартный. По умолчанию "
"установлено значение «Ложь». Обратите внимание, что для подразделов "
"заголовок конверта никогда не печатается."

#: ../../library/email.generator.rst:110 ../../library/email.generator.rst:203
msgid ""
"If *linesep* is not ``None``, use it as the separator character between all "
"the lines of the flattened message.  If *linesep* is ``None`` (the default), "
"use the value specified in the *policy*."
msgstr ""
"Если *linesep* не равен None, используйте его в качестве символа-разделителя "
"между всеми строками сведенного сообщения. Если *linesep* имеет значение "
"«None» (по умолчанию), используйте значение, указанное в *policy*."

#: ../../library/email.generator.rst:119
msgid ""
"Return an independent clone of this :class:`BytesGenerator` instance with "
"the exact same option settings, and *fp* as the new *outfp*."
msgstr ""
"Верните независимый клон этого экземпляра :class:`BytesGenerator` с точно "
"такими же настройками параметров и *fp*, что и новый *outfp*."

#: ../../library/email.generator.rst:125
msgid ""
"Encode *s* using the ``ASCII`` codec and the ``surrogateescape`` error "
"handler, and pass it to the *write* method of the *outfp* passed to the :"
"class:`BytesGenerator`'s constructor."
msgstr ""
"Закодируйте *s*, используя кодек ``ASCII`` и обработчик ошибок "
"``surrogateescape``, и передайте его в метод *write* *outfp*, переданный в "
"конструктор :class:`BytesGenerator`."

#: ../../library/email.generator.rst:130
msgid ""
"As a convenience, :class:`~email.message.EmailMessage` provides the methods :"
"meth:`~email.message.EmailMessage.as_bytes` and ``bytes(aMessage)`` (a.k.a. :"
"meth:`~email.message.EmailMessage.__bytes__`), which simplify the generation "
"of a serialized binary representation of a message object.  For more detail, "
"see :mod:`email.message`."
msgstr ""
"Для удобства :class:`~email.message.EmailMessage` предоставляет методы :meth:"
"`~email.message.EmailMessage.as_bytes` и ``bytes(aMessage)`` (также "
"известные как :meth:`~email.message .EmailMessage.__bytes__`), которые "
"упрощают создание сериализованного двоичного представления объекта "
"сообщения. Более подробную информацию см. в :mod:`email.message`."

#: ../../library/email.generator.rst:137
msgid ""
"Because strings cannot represent binary data, the :class:`Generator` class "
"must convert any binary data in any message it flattens to an ASCII "
"compatible format, by converting them to an ASCII compatible :mailheader:"
"`Content-Transfer_Encoding`.  Using the terminology of the email RFCs, you "
"can think of this as :class:`Generator` serializing to an I/O stream that is "
"not \"8 bit clean\".  In other words, most applications will want to be "
"using :class:`BytesGenerator`, and not :class:`Generator`."
msgstr ""
"Поскольку строки не могут представлять двоичные данные, класс :class:"
"`Generator` должен преобразовывать любые двоичные данные в любом сообщении, "
"которое он сглаживает, в формат, совместимый с ASCII, путем преобразования "
"их в совместимый с ASCII :mailheader:`Content-Transfer_Encoding`. Используя "
"терминологию RFC по электронной почте, вы можете думать об этом как о "
"сериализации :class:`Generator` в поток ввода-вывода, который не является «8-"
"битным чистым». Другими словами, большинство приложений захотят "
"использовать :class:`BytesGenerator`, а не :class:`Generator`."

#: ../../library/email.generator.rst:148
msgid ""
"Return a :class:`Generator` object that will write any message provided to "
"the :meth:`flatten` method, or any text provided to the :meth:`write` "
"method, to the :term:`file-like object` *outfp*.  *outfp* must support a "
"``write`` method that accepts string data."
msgstr ""
"Возвращает объект :class:`Generator`, который будет записывать любое "
"сообщение, предоставленное методу :meth:`flatten`, или любой текст, "
"предоставленный методу :meth:`write`, в :term:`файлоподобный объект` "
"*аутфп*. *outfp* должен поддерживать метод ``write``, который принимает "
"строковые данные."

#: ../../library/email.generator.rst:182
msgid ""
"Print the textual representation of the message object structure rooted at "
"*msg* to the output file specified when the :class:`Generator` instance was "
"created."
msgstr ""
"Выведите текстовое представление структуры объекта сообщения с корнем в "
"*msg* в выходной файл, указанный при создании экземпляра :class:`Generator`."

#: ../../library/email.generator.rst:186
msgid ""
"If the :mod:`~email.policy` option :attr:`~email.policy.Policy.cte_type` is "
"``8bit``, generate the message as if the option were set to ``7bit``. (This "
"is required because strings cannot represent non-ASCII bytes.) Convert any "
"bytes with the high bit set as needed using an ASCII-compatible :mailheader:"
"`Content-Transfer-Encoding`.  That is, transform parts with non-ASCII :"
"mailheader:`Content-Transfer-Encoding` (:mailheader:`Content-Transfer-"
"Encoding: 8bit`) to an ASCII compatible :mailheader:`Content-Transfer-"
"Encoding`, and encode RFC-invalid non-ASCII bytes in headers using the MIME "
"``unknown-8bit`` character set, thus rendering them RFC-compliant."
msgstr ""
"Если опция :mod:`~email.policy` :attr:`~email.policy.Policy.cte_type` имеет "
"значение ``8bit``, сгенерируйте сообщение так, как если бы для этой опции "
"было установлено значение ``7bit``. (Это необходимо, поскольку строки не "
"могут представлять байты, отличные от ASCII.) При необходимости преобразуйте "
"любые байты с установленным старшим битом, используя ASCII-совместимый :"
"mailheader:`Content-Transfer-Encoding`. То есть преобразуйте части с не-"
"ASCII :mailheader:`Content-Transfer-Encoding` (:mailheader:`Content-Transfer-"
"Encoding: 8bit`) в ASCII-совместимый :mailheader:`Content-Transfer-Encoding` "
"и кодируйте Недопустимые RFC байты, не относящиеся к ASCII, в заголовках с "
"использованием набора символов MIME ``unknown-8bit``, что делает их "
"совместимыми с RFC."

#: ../../library/email.generator.rst:209
msgid ""
"Added support for re-encoding ``8bit`` message bodies, and the *linesep* "
"argument."
msgstr ""
"Добавлена ​​поддержка перекодирования тела сообщения ``8bit`` и аргумент "
"*linesep*."

#: ../../library/email.generator.rst:216
msgid ""
"Return an independent clone of this :class:`Generator` instance with the "
"exact same options, and *fp* as the new *outfp*."
msgstr ""
"Верните независимый клон этого экземпляра :class:`Generator` с теми же "
"параметрами и *fp*, что и новый *outfp*."

#: ../../library/email.generator.rst:222
msgid ""
"Write *s* to the *write* method of the *outfp* passed to the :class:"
"`Generator`'s constructor.  This provides just enough file-like API for :"
"class:`Generator` instances to be used in the :func:`print` function."
msgstr ""
"Запишите *s* в метод *write* *outfp*, переданного конструктору :class:"
"`Generator`. Это обеспечивает достаточно файлового API для экземпляров :"
"class:`Generator`, которые можно использовать в функции :func:`print`."

#: ../../library/email.generator.rst:228
msgid ""
"As a convenience, :class:`~email.message.EmailMessage` provides the methods :"
"meth:`~email.message.EmailMessage.as_string` and ``str(aMessage)`` (a.k.a. :"
"meth:`~email.message.EmailMessage.__str__`), which simplify the generation "
"of a formatted string representation of a message object.  For more detail, "
"see :mod:`email.message`."
msgstr ""
"Для удобства :class:`~email.message.EmailMessage` предоставляет методы :meth:"
"`~email.message.EmailMessage.as_string` и ``str(aMessage)`` (также известные "
"как :meth:`~email.message .EmailMessage.__str__`), которые упрощают создание "
"форматированного строкового представления объекта сообщения. Более подробную "
"информацию см. в :mod:`email.message`."

#: ../../library/email.generator.rst:235
msgid ""
"The :mod:`email.generator` module also provides a derived class, :class:"
"`DecodedGenerator`, which is like the :class:`Generator` base class, except "
"that non-\\ :mimetype:`text` parts are not serialized, but are instead "
"represented in the output stream by a string derived from a template filled "
"in with information about the part."
msgstr ""
"Модуль :mod:`email.generator` также предоставляет производный класс :class:"
"`DecodedGenerator`, который подобен базовому классу :class:`Generator`, за "
"исключением того, что части, отличные от \\ :mimetype:`text`, не являются "
"сериализуются, но вместо этого представлены в выходном потоке строкой, "
"полученной из шаблона, заполненного информацией о детали."

#: ../../library/email.generator.rst:244
msgid ""
"Act like :class:`Generator`, except that for any subpart of the message "
"passed to :meth:`Generator.flatten`, if the subpart is of main type :"
"mimetype:`text`, print the decoded payload of the subpart, and if the main "
"type is not :mimetype:`text`, instead of printing it fill in the string "
"*fmt* using information from the part and print the resulting filled-in "
"string."
msgstr ""
"Действует как :class:`Generator`, за исключением того, что для любой части "
"сообщения, переданной :meth:`Generator.flatten`, если эта часть имеет "
"основной тип :mimetype:`text`, выводит декодированную полезную нагрузку "
"части, и если основной тип не :mimetype:`text`, вместо печати заполните "
"строку *fmt*, используя информацию из части, и распечатайте полученную "
"заполненную строку."

#: ../../library/email.generator.rst:251
msgid ""
"To fill in *fmt*, execute ``fmt % part_info``, where ``part_info`` is a "
"dictionary composed of the following keys and values:"
msgstr ""
"Чтобы заполнить *fmt*, выполните ``fmt % part_info``, где ``part_info`` — "
"это словарь, состоящий из следующих ключей и значений:"

#: ../../library/email.generator.rst:254
msgid "``type`` -- Full MIME type of the non-\\ :mimetype:`text` part"
msgstr "``type`` -- Полный MIME-тип части, отличной от \\ :mimetype:`text`"

#: ../../library/email.generator.rst:256
msgid "``maintype`` -- Main MIME type of the non-\\ :mimetype:`text` part"
msgstr "``maintype`` -- Основной тип MIME не-\\ :mimetype:`text` части"

#: ../../library/email.generator.rst:258
msgid "``subtype`` -- Sub-MIME type of the non-\\ :mimetype:`text` part"
msgstr "``subtype`` -- Sub-MIME-тип части, отличной от \\ :mimetype:`text`"

#: ../../library/email.generator.rst:260
msgid "``filename`` -- Filename of the non-\\ :mimetype:`text` part"
msgstr "``filename`` -- Имя файла не\\ :mimetype:`text` части"

#: ../../library/email.generator.rst:262
msgid ""
"``description`` -- Description associated with the non-\\ :mimetype:`text` "
"part"
msgstr ""
"``description`` -- Описание, связанное с частью, отличной от \\ :mimetype:"
"`text`"

#: ../../library/email.generator.rst:264
msgid ""
"``encoding`` -- Content transfer encoding of the non-\\ :mimetype:`text` part"
msgstr ""
"``encoding`` -- Кодирование передачи контента не-\\ :mimetype:`text` части"

#: ../../library/email.generator.rst:266
msgid "If *fmt* is ``None``, use the following default *fmt*:"
msgstr ""
"Если *fmt* имеет значение «None», используйте следующий *fmt* по умолчанию:"

#: ../../library/email.generator.rst:268
msgid ""
"\"[Non-text (%(type)s) part of message omitted, filename %(filename)s]\""
msgstr ""
"\"[Нетекст( %(тип)с ) часть сообщения опущена, имя файла %(имя файла)с ]\""

#: ../../library/email.generator.rst:270
msgid ""
"Optional *_mangle_from_* and *maxheaderlen* are as with the :class:"
"`Generator` base class."
msgstr ""
"Необязательные *_mangle_from_* и *maxheaderlen* аналогичны базовому классу :"
"class:`Generator`."

#: ../../library/email.generator.rst:275
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/email.generator.rst:276
msgid ""
"This statement assumes that you use the appropriate setting for "
"``unixfrom``, and that there are no :mod:`email.policy` settings calling for "
"automatic adjustments (for example, :attr:`~email.policy.EmailPolicy."
"refold_source` must be ``none``, which is *not* the default).  It is also "
"not 100% true, since if the message does not conform to the RFC standards "
"occasionally information about the exact original text is lost during "
"parsing error recovery.  It is a goal to fix these latter edge cases when "
"possible."
msgstr ""
"Этот оператор предполагает, что вы используете соответствующие настройки для "
"``unixfrom`` и что нет настроек :mod:`email.policy`, требующих "
"автоматической настройки (например, :attr:`~email.policy.EmailPolicy."
"refold_source). ` должно быть ``none``, что *не* является значением по "
"умолчанию). Это также не на 100% верно, поскольку, если сообщение не "
"соответствует стандартам RFC, иногда информация о точном исходном тексте "
"теряется во время восстановления ошибок синтаксического анализа. Целью "
"является по возможности исправить эти последние крайние случаи."
