# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmitriy Q, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:14+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**Исходный код:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""
":mod:`dbm` — это общий интерфейс для вариантов базы данных DBM --- :mod:`dbm."
"gnu` или :mod:`dbm.ndbm`. Если ни один из этих модулей не установлен, будет "
"использоваться медленная, но простая реализация в модуле :mod:`dbm.dumb`. "
"Существует `сторонний интерфейс <https://www.jcea.es/programacion/pybsddb."
"htm>`_ для Oracle Berkeley DB."

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"Кортеж, содержащий исключения, которые могут быть вызваны каждым из "
"поддерживаемых модулей, с уникальным исключением, также называемым :exc:`dbm."
"error` в качестве первого элемента --- последний используется, когда :exc:"
"`dbm.error` поднят."

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""
"Эта функция пытается угадать, какой из нескольких доступных простых модулей "
"базы данных --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` или :mod:`dbm.dumb` --- "
"следует использовать для открытия данный файл."

#: ../../library/dbm.rst:31
msgid "Return one of the following values:"
msgstr "Верните одно из следующих значений:"

#: ../../library/dbm.rst:33
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""
"``Нет``, если файл не может быть открыт, потому что он не читается или не "
"существует."

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr "пустая строка (``''``), если формат файла невозможно угадать"

#: ../../library/dbm.rst:35
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""
"строка, содержащая необходимое имя модуля, например ``'dbm.ndbm'`` или "
"``'dbm.gnu'``"

#: ../../library/dbm.rst:37 ../../library/dbm.rst:202 ../../library/dbm.rst:386
msgid "*filename* accepts a :term:`path-like object`."
msgstr "*filename* принимает :term:`объект, похожий на путь`."

#: ../../library/dbm.rst:61
msgid "Open a database and return the corresponding database object."
msgstr "Откройте базу данных и верните соответствующий объект базы данных."

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../../library/dbm.rst:63
msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""
"Файл базы данных, который нужно открыть. Если файл базы данных уже "
"существует, функция :func:`whatdb` используется для определения его типа и "
"используется соответствующий модуль; если он не существует, используется "
"первый субмодуль из списка выше, который можно импортировать."

#: ../../library/dbm.rst:64 ../../library/dbm.rst:174
msgid "The database file to open."
msgstr "Файл базы данных, который нужно открыть."

#: ../../library/dbm.rst:66
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""
"Если файл базы данных уже существует, функция :func:`whatdb` используется "
"для определения его типа и используется соответствующий модуль; если он не "
"существует, используется первый субмодуль из списка выше, который можно "
"импортировать."

#: ../../library/dbm.rst:71 ../../library/dbm.rst:297
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"

#: ../../library/dbm.rst:72 ../../library/dbm.rst:179 ../../library/dbm.rst:298
msgid "``'r'`` (default): |flag_r|"
msgstr "``'r'`` (default): |flag_r|"

#: ../../library/dbm.rst:73 ../../library/dbm.rst:180 ../../library/dbm.rst:299
#: ../../library/dbm.rst:367
msgid "``'w'``: |flag_w|"
msgstr "``'w'``: |flag_w|"

#: ../../library/dbm.rst:74 ../../library/dbm.rst:181 ../../library/dbm.rst:300
msgid "``'c'``: |flag_c|"
msgstr "``'c'``: |flag_c|"

#: ../../library/dbm.rst:75 ../../library/dbm.rst:182 ../../library/dbm.rst:301
#: ../../library/dbm.rst:369
msgid "``'n'``: |flag_n|"
msgstr "``'n'``: |flag_n|"

#: ../../library/dbm.rst:77 ../../library/dbm.rst:196 ../../library/dbm.rst:303
#: ../../library/dbm.rst:371
msgid "|mode_param_doc|"
msgstr "|mode_param_doc|"

#: ../../library/dbm.rst:80
msgid "*file* accepts a :term:`path-like object`."
msgstr "*file* принимает :term:`объект, похожий на путь`."

#: ../../library/dbm.rst:83
msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be "
"stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:"
"`!keys` method are available, as well as :meth:`!get` and :meth:`!"
"setdefault` methods."
msgstr ""
"Объект, возвращаемый :func:`~dbm.open`, поддерживает ту же базовую "
"функциональность, что и :class:`dict`; ключи и соответствующие им значения "
"можно сохранять, извлекать и удалять, доступны оператор :keyword:`in` и "
"метод :meth:`!keys`, а также :meth:`!get` и :meth: Методы `!setdefault`."

#: ../../library/dbm.rst:88
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""
"Ключ и значения всегда сохраняются как :class:`bytes`. Это означает, что при "
"использовании строк они неявно преобразуются в кодировку по умолчанию перед "
"сохранением."

#: ../../library/dbm.rst:92
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"Эти объекты также поддерживают использование в операторе :keyword:`with`, "
"который автоматически закроет их после завершения."

#: ../../library/dbm.rst:95
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""
"Методы :meth:`!get` и :meth:`!setdefault` теперь доступны для всех серверов :"
"mod:`dbm`."

#: ../../library/dbm.rst:99
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""
"Добавлена ​​встроенная поддержка протокола управления контекстом для объектов, "
"возвращаемых :func:`~dbm.open`."

#: ../../library/dbm.rst:103
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""
"Удаление ключа из базы данных, доступной только для чтения, вызывает "
"исключение, специфичное для модуля базы данных, а не :exc:`KeyError`."

#: ../../library/dbm.rst:107
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""
"В следующем примере записываются некоторые имена хостов и соответствующий "
"заголовок, а затем распечатывается содержимое базы данных::"

#: ../../library/dbm.rst:137
msgid "Module :mod:`shelve`"
msgstr "Модуль :mod:`shelve`"

#: ../../library/dbm.rst:138
msgid "Persistence module which stores non-string data."
msgstr "Модуль сохраняемости, который хранит нестроковые данные."

#: ../../library/dbm.rst:141
msgid "The individual submodules are described in the following sections."
msgstr "Отдельные субмодули описаны в следующих разделах."

#: ../../library/dbm.rst:145
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ":mod:`dbm.gnu` --- Менеджер баз данных GNU"

#: ../../library/dbm.rst:151
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**Исходный код:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:155
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""
"Модуль :mod:`dbm.gnu` предоставляет интерфейс к библиотеке :abbr:`GDBM (GNU "
"dbm)`, аналогичный модулю :mod:`dbm.ndbm`, но с дополнительными функциями, "
"такими как устойчивость к сбоям."

#: ../../library/dbm.rst:161 ../../library/dbm.rst:267
msgid ""
"The file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible and can not be used interchangeably."
msgstr ""
"Форматы файлов, созданные :mod:`dbm.gnu` и :mod:`dbm.ndbm`, несовместимы и "
"не могут использоваться взаимозаменяемо."

#: ../../library/dbm.rst:166
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Возникает из-за ошибок, специфичных для :mod:`dbm.gnu`, таких как ошибки "
"ввода-вывода. :exc:`KeyError` возникает в случае общих ошибок сопоставления, "
"таких как указание неправильного ключа."

#: ../../library/dbm.rst:172
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr "Откройте базу данных GDBM и верните объект :class:`!gdbm`."

#: ../../library/dbm.rst:178
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."

#: ../../library/dbm.rst:184
msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr ""
"Следующие дополнительные символы могут быть добавлены для управления "
"способом открытия базы данных:"

#: ../../library/dbm.rst:187
msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr ""
"``'f'``: открыть базу данных в быстром режиме. Запись в базу данных не будет "
"синхронизирована."

#: ../../library/dbm.rst:189
msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr ""
"``'s'``: Синхронный режим. Изменения в базе данных будут сразу записаны в "
"файл."

#: ../../library/dbm.rst:191
msgid "``'u'``: Do not lock database."
msgstr "``'u'``: Не блокировать базу данных."

#: ../../library/dbm.rst:193
msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags` "
"member for a list of supported flag characters."
msgstr ""
"Не все флаги действительны для всех версий GDBM. См. элемент :data:"
"`open_flags` для получения списка поддерживаемых символов флагов."

#: ../../library/dbm.rst:0
msgid "Raises"
msgstr "Поднимает"

#: ../../library/dbm.rst:199
msgid "If an invalid *flag* argument is passed."
msgstr "Если передан недопустимый аргумент *flag*."

#: ../../library/dbm.rst:207
msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr ""
"Строка символов, которую поддерживает параметр *flag* в :meth:`~dbm.gnu."
"open`."

#: ../../library/dbm.rst:209
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
"Объекты :class:`!gdbm` ведут себя аналогично :term:`mappings <mapping>`, но "
"методы :meth:`!items` и :meth:`!values` не поддерживаются. Также "
"предусмотрены следующие методы:"

#: ../../library/dbm.rst:215
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""
"Можно перебрать каждый ключ в базе данных, используя этот метод и метод :"
"meth:`nextkey`. Обход упорядочивается по внутренним хеш-значениям GDBM и не "
"сортируется по значениям ключей. Этот метод возвращает стартовый ключ."

#: ../../library/dbm.rst:222
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"Возвращает ключ, следующий за *key* при обходе. Следующий код печатает "
"каждый ключ из базы данных ``db`` без необходимости создавать в памяти "
"список, содержащий их все:"

#: ../../library/dbm.rst:233
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""
"Если вы выполнили большое количество удалений и хотите уменьшить "
"пространство, используемое файлом GDBM, эта процедура реорганизует базу "
"данных. Объекты :class:`!gdbm` не будут сокращать длину файла базы данных, "
"за исключением использования этой реорганизации; в противном случае "
"удаленное файловое пространство будет сохранено и повторно использовано при "
"добавлении новых пар (ключ, значение)."

#: ../../library/dbm.rst:241
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""
"Когда база данных открыта в быстром режиме, этот метод принудительно "
"записывает на диск любые незаписанные данные."

#: ../../library/dbm.rst:246
msgid "Close the GDBM database."
msgstr "Закройте базу данных GDBM."

#: ../../library/dbm.rst:250
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ":mod:`dbm.ndbm` --- Новый менеджер баз данных"

#: ../../library/dbm.rst:256
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**Исходный код:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:260
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. This module can be used with the \"classic\" "
"NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""
"Модуль :mod:`dbm.ndbm` предоставляет интерфейс к библиотеке :abbr:`NDBM (New "
"Database Manager)`. Этот модуль можно использовать с «классическим» "
"интерфейсом NDBM или интерфейсом совместимости GDBM (GNU dbm)."

#: ../../library/dbm.rst:272
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""
"Библиотека NDBM, поставляемая как часть macOS, имеет недокументированное "
"ограничение на размер значений, что может привести к повреждению файлов базы "
"данных при сохранении значений, превышающих этот предел. Чтение таких "
"поврежденных файлов может привести к серьезному сбою (ошибке сегментации)."

#: ../../library/dbm.rst:279
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Возникает из-за ошибок, специфичных для :mod:`dbm.ndbm`, таких как ошибки "
"ввода-вывода. :exc:`KeyError` возникает в случае общих ошибок сопоставления, "
"таких как указание неправильного ключа."

#: ../../library/dbm.rst:285
msgid "Name of the NDBM implementation library used."
msgstr "Имя используемой библиотеки реализации NDBM."

#: ../../library/dbm.rst:290
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr "Откройте базу данных NDBM и верните объект :class:`!ndbm`."

#: ../../library/dbm.rst:292
msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""
"Базовое имя файла базы данных (без расширений :file:`.dir` или :file:`.pag`)."

#: ../../library/dbm.rst:306
msgid ""
":class:`!ndbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
"Объекты :class:`!ndbm` ведут себя аналогично :term:`mappings <mapping>`, но "
"методы :meth:`!items` и :meth:`!values` не поддерживаются. Также "
"предусмотрены следующие методы:"

#: ../../library/dbm.rst:310
msgid "Accepts :term:`path-like object` for filename."
msgstr "Принимает :term:`путеподобный объект` в качестве имени файла."

#: ../../library/dbm.rst:315
msgid "Close the NDBM database."
msgstr "Закройте базу данных NDBM."

#: ../../library/dbm.rst:319
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- Портативная реализация DBM"

#: ../../library/dbm.rst:324
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**Исходный код:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:330
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
"Модуль :mod:`dbm.dumb` предназначен в качестве запасного варианта для "
"модуля :mod:`dbm`, когда более надежный модуль недоступен. Модуль :mod:`dbm."
"dumb` написан не ради скорости и не так интенсивно используется, как другие "
"модули базы данных."

#: ../../library/dbm.rst:337
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""
"Модуль :mod:`dbm.dumb` предоставляет постоянный интерфейс, подобный :class:"
"`dict`, который полностью написан на Python. В отличие от других :mod:`dbm` "
"бэкэндов, таких как :mod:`dbm.gnu`, внешняя библиотека не требуется."

#: ../../library/dbm.rst:342
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr "Модуль :mod:`!dbm.dumb` определяет следующее:"

#: ../../library/dbm.rst:346
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Возникает из-за ошибок, специфичных для :mod:`dbm.dumb`, таких как ошибки "
"ввода-вывода. :exc:`KeyError` возникает в случае общих ошибок сопоставления, "
"таких как указание неправильного ключа."

#: ../../library/dbm.rst:352
msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` "
"and :meth:`~dumbdbm.close` methods."
msgstr ""
"Откройте базу данных :mod:`!dbm.dumb`. Возвращенный объект базы данных ведет "
"себя аналогично :term:`mapping`, в дополнение к предоставлению методов :meth:"
"`~dumbdbm.sync` и :meth:`~dumbdbm.close`."

#: ../../library/dbm.rst:357
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""
"Базовое имя файла базы данных (без расширений). Новая база данных создает "
"следующие файлы: - :file:`{filename}.dat` - :file:`{filename}.dir`"

#: ../../library/dbm.rst:358
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""
"Базовое имя файла базы данных (без расширений). Новая база данных создает "
"следующие файлы:"

#: ../../library/dbm.rst:361
msgid ":file:`{filename}.dat`"
msgstr ":file:`{filename}.dat`"

#: ../../library/dbm.rst:362
msgid ":file:`{filename}.dir`"
msgstr ":file:`{filename}.dir`"

#: ../../library/dbm.rst:365
msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"

#: ../../library/dbm.rst:366
msgid "``'r'``: |flag_r|"
msgstr "``'r'``: |flag_r|"

#: ../../library/dbm.rst:368
msgid "``'c'`` (default): |flag_c|"
msgstr "``'c'`` (default): |flag_c|"

#: ../../library/dbm.rst:375
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"Интерпретатор Python может выйти из строя при загрузке базы данных с "
"достаточно большой/сложной записью из-за ограничений глубины стека в "
"компиляторе Python AST."

#: ../../library/dbm.rst:379
msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""
":func:`~dbm.dumb.open` всегда создает новую базу данных, если *flag* равен "
"``'n'``."

#: ../../library/dbm.rst:382
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""
"База данных открывается только для чтения, если *flag* равен ``'r'``. База "
"данных не создается, если она не существует, если *flag* равен ``'r'`` или "
"``'w'``."

#: ../../library/dbm.rst:389
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, the following methods are provided:"
msgstr ""
"В дополнение к методам, предоставляемым классом :class:`collections.abc."
"MutableMapping`, предусмотрены следующие методы:"

#: ../../library/dbm.rst:395
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""
"Синхронизируйте каталог на диске и файлы данных. Этот метод вызывается "
"методом :meth:`Shelve.sync`."

#: ../../library/dbm.rst:400
msgid "Close the database."
msgstr "Закройте базу данных."

#: ../../library/dbm.rst:326
msgid "databases"
msgstr "базы данных"
