# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-future.rst:8
msgid "Futures"
msgstr "Фьючерсы"

#: ../../library/asyncio-future.rst:10
msgid ""
"**Source code:** :source:`Lib/asyncio/futures.py`, :source:`Lib/asyncio/"
"base_futures.py`"
msgstr ""
"**Исходный код:** :source:`Lib/asyncio/futures.py`, :source:`Lib/asyncio/"
"base_futures.py`"

#: ../../library/asyncio-future.rst:15
msgid ""
"*Future* objects are used to bridge **low-level callback-based code** with "
"high-level async/await code."
msgstr ""
"Объекты *Future* используются для соединения **низкоуровневого кода "
"обратного вызова** с высокоуровневым кодом async/await."

#: ../../library/asyncio-future.rst:20
msgid "Future Functions"
msgstr "Будущие функции"

#: ../../library/asyncio-future.rst:24
msgid "Return ``True`` if *obj* is either of:"
msgstr "Верните ``True``, если *obj* имеет одно из следующих значений:"

#: ../../library/asyncio-future.rst:26
msgid "an instance of :class:`asyncio.Future`,"
msgstr "экземпляр :class:`asyncio.Future`,"

#: ../../library/asyncio-future.rst:27
msgid "an instance of :class:`asyncio.Task`,"
msgstr "экземпляр :class:`asyncio.Task`,"

#: ../../library/asyncio-future.rst:28
msgid "a Future-like object with a ``_asyncio_future_blocking`` attribute."
msgstr "объект типа Future с атрибутом ``_asyncio_future_blocking``."

#: ../../library/asyncio-future.rst:36
msgid "Return:"
msgstr "Возвращаться:"

#: ../../library/asyncio-future.rst:38
msgid ""
"*obj* argument as is, if *obj* is a :class:`Future`, a :class:`Task`, or a "
"Future-like object (:func:`isfuture` is used for the test.)"
msgstr ""
"Аргумент *obj* как есть, если *obj* является :class:`Future`, :class:`Task` "
"или объектом, подобным Future (для теста используется :func:`isfuture`.)"

#: ../../library/asyncio-future.rst:42
msgid ""
"a :class:`Task` object wrapping *obj*, if *obj* is a coroutine (:func:"
"`iscoroutine` is used for the test); in this case the coroutine will be "
"scheduled by ``ensure_future()``."
msgstr ""
"обертка объекта :class:`Task` *obj*, если *obj* является сопрограммой (для "
"теста используется :func:`iscoroutine`); в этом случае сопрограмма будет "
"запланирована с помощью ``ensure_future()``."

#: ../../library/asyncio-future.rst:47
msgid ""
"a :class:`Task` object that would await on *obj*, if *obj* is an awaitable (:"
"func:`inspect.isawaitable` is used for the test.)"
msgstr ""
"объект :class:`Task`, который будет ожидать *obj*, если *obj* является "
"ожидаемым (для теста используется :func:`inspect.isawaitable`)."

#: ../../library/asyncio-future.rst:50
msgid "If *obj* is neither of the above a :exc:`TypeError` is raised."
msgstr ""
"Если *obj* не является ни одним из вышеперечисленных, возникает ошибка :exc:"
"`TypeError`."

#: ../../library/asyncio-future.rst:54
msgid ""
"See also the :func:`create_task` function which is the preferred way for "
"creating new Tasks."
msgstr ""
"См. также функцию :func:`create_task`, которая является предпочтительным "
"способом создания новых задач."

#: ../../library/asyncio-future.rst:57
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution."
msgstr ""
"Сохраните ссылку на результат этой функции, чтобы избежать исчезновения "
"задачи в середине выполнения."

#: ../../library/asyncio-future.rst:60
msgid "The function accepts any :term:`awaitable` object."
msgstr "Функция принимает любой объект :term:`awaitable`."

#: ../../library/asyncio-future.rst:63
msgid ""
"Deprecation warning is emitted if *obj* is not a Future-like object and "
"*loop* is not specified and there is no running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если *obj* не является объектом типа "
"Future, а *loop* не указан и нет текущего цикла событий."

#: ../../library/asyncio-future.rst:70
msgid ""
"Wrap a :class:`concurrent.futures.Future` object in a :class:`asyncio."
"Future` object."
msgstr ""
"Оберните объект :class:`concurrent.futures.Future` в объект :class:`asyncio."
"Future`."

#: ../../library/asyncio-future.rst:73
msgid ""
"Deprecation warning is emitted if *future* is not a Future-like object and "
"*loop* is not specified and there is no running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если *future* не является объектом "
"типа Future, а *loop* не указан и нет текущего цикла событий."

#: ../../library/asyncio-future.rst:79
msgid "Future Object"
msgstr "Будущий объект"

#: ../../library/asyncio-future.rst:83
msgid ""
"A Future represents an eventual result of an asynchronous operation.  Not "
"thread-safe."
msgstr ""
"Future представляет собой конечный результат асинхронной операции. Не "
"потокобезопасный."

#: ../../library/asyncio-future.rst:86
msgid ""
"Future is an :term:`awaitable` object.  Coroutines can await on Future "
"objects until they either have a result or an exception set, or until they "
"are cancelled. A Future can be awaited multiple times and the result is same."
msgstr ""
"Future — это :term:`awaitable` объект. Сопрограммы могут ожидать объектов "
"Future до тех пор, пока для них не будет установлен результат или "
"исключение, или пока они не будут отменены. Future можно ожидать несколько "
"раз, и результат будет одинаковым."

#: ../../library/asyncio-future.rst:91
msgid ""
"Typically Futures are used to enable low-level callback-based code (e.g. in "
"protocols implemented using asyncio :ref:`transports <asyncio-transports-"
"protocols>`) to interoperate with high-level async/await code."
msgstr ""
"Обычно Futures используются для обеспечения возможности низкоуровневого кода "
"на основе обратного вызова (например, в протоколах, реализованных с "
"использованием asyncio :ref:`transports <asyncio-transports-protocols>`) для "
"взаимодействия с высокоуровневым кодом async/await."

#: ../../library/asyncio-future.rst:96
msgid ""
"The rule of thumb is to never expose Future objects in user-facing APIs, and "
"the recommended way to create a Future object is to call :meth:`loop."
"create_future`.  This way alternative event loop implementations can inject "
"their own optimized implementations of a Future object."
msgstr ""
"Эмпирическое правило заключается в том, чтобы никогда не раскрывать объекты "
"Future в API-интерфейсах, ориентированных на пользователя, и рекомендуемый "
"способ создания объекта Future — вызвать :meth:`loop.create_future`. Таким "
"образом, альтернативные реализации цикла событий могут внедрять собственные "
"оптимизированные реализации объекта Future."

#: ../../library/asyncio-future.rst:102
msgid "Added support for the :mod:`contextvars` module."
msgstr "Добавлена ​​поддержка модуля :mod:`contextvars`."

#: ../../library/asyncio-future.rst:105
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если *loop* не указан и нет "
"работающего цикла событий."

#: ../../library/asyncio-future.rst:111
msgid "Return the result of the Future."
msgstr "Вернуть результат Future."

#: ../../library/asyncio-future.rst:113
msgid ""
"If the Future is *done* and has a result set by the :meth:`set_result` "
"method, the result value is returned."
msgstr ""
"Если Future выполнено *done* и имеет результат, установленный методом :meth:"
"`set_result`, возвращается значение результата."

#: ../../library/asyncio-future.rst:116
msgid ""
"If the Future is *done* and has an exception set by the :meth:"
"`set_exception` method, this method raises the exception."
msgstr ""
"Если Future *done* и имеет исключение, установленное методом :meth:"
"`set_Exception`, этот метод вызывает исключение."

#: ../../library/asyncio-future.rst:119 ../../library/asyncio-future.rst:207
msgid ""
"If the Future has been *cancelled*, this method raises a :exc:"
"`CancelledError` exception."
msgstr ""
"Если Future было *отменено*, этот метод вызывает исключение :exc:"
"`CancelledError`."

#: ../../library/asyncio-future.rst:122
msgid ""
"If the Future's result isn't yet available, this method raises an :exc:"
"`InvalidStateError` exception."
msgstr ""
"Если результат Future еще недоступен, этот метод вызывает исключение :exc:"
"`InvalidStateError`."

#: ../../library/asyncio-future.rst:127
msgid "Mark the Future as *done* and set its result."
msgstr "Отметьте будущее как *готовое* и установите его результат."

#: ../../library/asyncio-future.rst:129 ../../library/asyncio-future.rst:136
msgid ""
"Raises an :exc:`InvalidStateError` error if the Future is already *done*."
msgstr "Вызывает ошибку :exc:`InvalidStateError`, если Future уже *сделано*."

#: ../../library/asyncio-future.rst:134
msgid "Mark the Future as *done* and set an exception."
msgstr "Отметьте будущее как *выполненное* и установите исключение."

#: ../../library/asyncio-future.rst:141
msgid "Return ``True`` if the Future is *done*."
msgstr "Верните ``True``, если Future *сделано*."

#: ../../library/asyncio-future.rst:143
msgid ""
"A Future is *done* if it was *cancelled* or if it has a result or an "
"exception set with :meth:`set_result` or :meth:`set_exception` calls."
msgstr ""
"Фьючерс считается *выполненным*, если он был *отменен* или если у него есть "
"результат или исключение, установленное с помощью вызовов :meth:`set_result` "
"или :meth:`set_Exception`."

#: ../../library/asyncio-future.rst:149
msgid "Return ``True`` if the Future was *cancelled*."
msgstr "Верните ``True``, если Future было *отменено*."

#: ../../library/asyncio-future.rst:151
msgid ""
"The method is usually used to check if a Future is not *cancelled* before "
"setting a result or an exception for it::"
msgstr ""
"Этот метод обычно используется для проверки того, не *отменено* ли будущее, "
"прежде чем устанавливать для него результат или исключение::"

#: ../../library/asyncio-future.rst:154
msgid ""
"if not fut.cancelled():\n"
"    fut.set_result(42)"
msgstr ""
"if not fut.cancelled():\n"
"    fut.set_result(42)"

#: ../../library/asyncio-future.rst:159
msgid "Add a callback to be run when the Future is *done*."
msgstr ""
"Добавьте обратный вызов, который будет выполняться, когда Future *готово*."

#: ../../library/asyncio-future.rst:161
msgid "The *callback* is called with the Future object as its only argument."
msgstr ""
"*Обратный вызов* вызывается с объектом Future в качестве единственного "
"аргумента."

#: ../../library/asyncio-future.rst:164
msgid ""
"If the Future is already *done* when this method is called, the callback is "
"scheduled with :meth:`loop.call_soon`."
msgstr ""
"Если Future уже *сделано*, когда вызывается этот метод, обратный вызов "
"запланирован с помощью :meth:`loop.call_soon`."

#: ../../library/asyncio-future.rst:167
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"позволяет указать собственный :class:`contextvars.Context` для выполнения "
"*обратного вызова*. Текущий контекст используется, когда *context* не указан."

#: ../../library/asyncio-future.rst:171
msgid ""
":func:`functools.partial` can be used to pass parameters to the callback, e."
"g.::"
msgstr ""
":func:`functools.partial` можно использовать для передачи параметров "
"обратному вызову, например::"

#: ../../library/asyncio-future.rst:174
msgid ""
"# Call 'print(\"Future:\", fut)' when \"fut\" is done.\n"
"fut.add_done_callback(\n"
"    functools.partial(print, \"Future:\"))"
msgstr ""
"# Вызовите 'print(\"Future:\", fut)', когда \"fut\" будет выполнен. fut."
"add_done_callback( functools.partial(print, \"Будущее:\"))"

#: ../../library/asyncio-future.rst:178
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""
"Был добавлен параметр *context*, доступный только по ключевым словам. См. :"
"pep:`567` для более подробной информации."

#: ../../library/asyncio-future.rst:184
msgid "Remove *callback* from the callbacks list."
msgstr "Удалите *callback* из списка обратных вызовов."

#: ../../library/asyncio-future.rst:186
msgid ""
"Returns the number of callbacks removed, which is typically 1, unless a "
"callback was added more than once."
msgstr ""
"Возвращает количество удаленных обратных вызовов, которое обычно равно 1, "
"если обратный вызов не добавлялся более одного раза."

#: ../../library/asyncio-future.rst:191
msgid "Cancel the Future and schedule callbacks."
msgstr "Отмените будущее и запланируйте обратные вызовы."

#: ../../library/asyncio-future.rst:193
msgid ""
"If the Future is already *done* or *cancelled*, return ``False``. Otherwise, "
"change the Future's state to *cancelled*, schedule the callbacks, and return "
"``True``."
msgstr ""
"Если Future уже *сделано* или *отменено*, верните ``False``. В противном "
"случае измените состояние Future на *cancelled*, запланируйте обратные "
"вызовы и верните ``True``."

#: ../../library/asyncio-future.rst:197
msgid "Added the *msg* parameter."
msgstr "Добавлен параметр *msg*."

#: ../../library/asyncio-future.rst:202
msgid "Return the exception that was set on this Future."
msgstr "Верните исключение, которое было установлено в этом будущем."

#: ../../library/asyncio-future.rst:204
msgid ""
"The exception (or ``None`` if no exception was set) is returned only if the "
"Future is *done*."
msgstr ""
"Исключение (или None, если исключение не было установлено) возвращается "
"только в том случае, если Future выполнено *done*."

#: ../../library/asyncio-future.rst:210
msgid ""
"If the Future isn't *done* yet, this method raises an :exc:"
"`InvalidStateError` exception."
msgstr ""
"Если Future еще не *сделано*, этот метод вызывает исключение :exc:"
"`InvalidStateError`."

#: ../../library/asyncio-future.rst:215
msgid "Return the event loop the Future object is bound to."
msgstr "Верните цикл событий, к которому привязан объект Future."

#: ../../library/asyncio-future.rst:222
msgid ""
"This example creates a Future object, creates and schedules an asynchronous "
"Task to set result for the Future, and waits until the Future has a result::"
msgstr ""
"В этом примере создается объект Future, создается и планируется асинхронная "
"задача для установки результата для Future, и ожидается, пока Future не "
"получит результат:"

#: ../../library/asyncio-future.rst:226
msgid ""
"async def set_after(fut, delay, value):\n"
"    # Sleep for *delay* seconds.\n"
"    await asyncio.sleep(delay)\n"
"\n"
"    # Set *value* as a result of *fut* Future.\n"
"    fut.set_result(value)\n"
"\n"
"async def main():\n"
"    # Get the current event loop.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a new Future object.\n"
"    fut = loop.create_future()\n"
"\n"
"    # Run \"set_after()\" coroutine in a parallel Task.\n"
"    # We are using the low-level \"loop.create_task()\" API here because\n"
"    # we already have a reference to the event loop at hand.\n"
"    # Otherwise we could have just used \"asyncio.create_task()\".\n"
"    loop.create_task(\n"
"        set_after(fut, 1, '... world'))\n"
"\n"
"    print('hello ...')\n"
"\n"
"    # Wait until *fut* has a result (1 second) and print it.\n"
"    print(await fut)\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def set_after(fut, delay, value):\n"
"    # Sleep for *delay* seconds.\n"
"    await asyncio.sleep(delay)\n"
"\n"
"    # Set *value* as a result of *fut* Future.\n"
"    fut.set_result(value)\n"
"\n"
"async def main():\n"
"    # Get the current event loop.\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    # Create a new Future object.\n"
"    fut = loop.create_future()\n"
"\n"
"    # Run \"set_after()\" coroutine in a parallel Task.\n"
"    # We are using the low-level \"loop.create_task()\" API here because\n"
"    # we already have a reference to the event loop at hand.\n"
"    # Otherwise we could have just used \"asyncio.create_task()\".\n"
"    loop.create_task(\n"
"        set_after(fut, 1, '... world'))\n"
"\n"
"    print('hello ...')\n"
"\n"
"    # Wait until *fut* has a result (1 second) and print it.\n"
"    print(await fut)\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio-future.rst:257
msgid ""
"The Future object was designed to mimic :class:`concurrent.futures.Future`.  "
"Key differences include:"
msgstr ""
"Объект Future был разработан для имитации :class:`concurrent.futures."
"Future`. Ключевые различия включают в себя:"

#: ../../library/asyncio-future.rst:260
msgid ""
"unlike asyncio Futures, :class:`concurrent.futures.Future` instances cannot "
"be awaited."
msgstr ""
"в отличие от asyncio Futures, экземпляры :class:`concurrent.futures.Future` "
"не могут быть ожидаемы."

#: ../../library/asyncio-future.rst:263
msgid ""
":meth:`asyncio.Future.result` and :meth:`asyncio.Future.exception` do not "
"accept the *timeout* argument."
msgstr ""
":meth:`asyncio.Future.result` и :meth:`asyncio.Future.Exception` не "
"принимают аргумент *timeout*."

#: ../../library/asyncio-future.rst:266
msgid ""
":meth:`asyncio.Future.result` and :meth:`asyncio.Future.exception` raise an :"
"exc:`InvalidStateError` exception when the Future is not *done*."
msgstr ""
":meth:`asyncio.Future.result` и :meth:`asyncio.Future.Exception` вызывают "
"исключение :exc:`InvalidStateError`, когда Future не *выполнено*."

#: ../../library/asyncio-future.rst:270
msgid ""
"Callbacks registered with :meth:`asyncio.Future.add_done_callback` are not "
"called immediately.  They are scheduled with :meth:`loop.call_soon` instead."
msgstr ""
"Обратные вызовы, зарегистрированные с помощью :meth:`asyncio.Future."
"add_done_callback`, не вызываются немедленно. Вместо этого они планируются с "
"помощью :meth:`loop.call_soon`."

#: ../../library/asyncio-future.rst:274
msgid ""
"asyncio Future is not compatible with the :func:`concurrent.futures.wait` "
"and :func:`concurrent.futures.as_completed` functions."
msgstr ""
"asyncio Future несовместим с функциями :func:`concurrent.futures.wait` и :"
"func:`concurrent.futures.as_completed`."

#: ../../library/asyncio-future.rst:278
msgid ""
":meth:`asyncio.Future.cancel` accepts an optional ``msg`` argument, but :"
"meth:`concurrent.futures.Future.cancel` does not."
msgstr ""
":meth:`asyncio.Future.cancel` принимает необязательный аргумент ``msg``, а :"
"meth:`concurrent.futures.Future.cancel` — нет."
