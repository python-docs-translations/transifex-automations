# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/html.parser.rst:2
msgid ":mod:`!html.parser` --- Simple HTML and XHTML parser"
msgstr ":mod:`!html.parser` --- Простой парсер HTML и XHTML."

#: ../../library/html.parser.rst:7
msgid "**Source code:** :source:`Lib/html/parser.py`"
msgstr "**Исходный код:** :source:`Lib/html/parser.py`"

#: ../../library/html.parser.rst:15
msgid ""
"This module defines a class :class:`HTMLParser` which serves as the basis "
"for parsing text files formatted in HTML (HyperText Mark-up Language) and "
"XHTML."
msgstr ""
"Этот модуль определяет класс :class:`HTMLParser`, который служит основой для "
"анализа текстовых файлов, отформатированных в HTML (язык гипертекстовой "
"разметки) и XHTML."

#: ../../library/html.parser.rst:20
msgid "Create a parser instance able to parse invalid markup."
msgstr ""
"Создайте экземпляр синтаксического анализатора, способный анализировать "
"недопустимую разметку."

#: ../../library/html.parser.rst:22
msgid ""
"If *convert_charrefs* is ``True`` (the default), all character references "
"(except the ones in ``script``/``style`` elements) are automatically "
"converted to the corresponding Unicode characters."
msgstr ""
"Если *convert_charrefs* имеет значение True (по умолчанию), все ссылки на "
"символы (кроме тех, которые находятся в элементах script/style) "
"автоматически преобразуются в соответствующие символы Юникода."

#: ../../library/html.parser.rst:26
msgid ""
"An :class:`.HTMLParser` instance is fed HTML data and calls handler methods "
"when start tags, end tags, text, comments, and other markup elements are "
"encountered.  The user should subclass :class:`.HTMLParser` and override its "
"methods to implement the desired behavior."
msgstr ""
"Экземпляр :class:`.HTMLParser` получает данные HTML и вызывает методы-"
"обработчики при обнаружении начальных тегов, конечных тегов, текста, "
"комментариев и других элементов разметки. Пользователь должен создать "
"подкласс :class:`.HTMLParser` и переопределить его методы для реализации "
"желаемого поведения."

#: ../../library/html.parser.rst:31
msgid ""
"This parser does not check that end tags match start tags or call the end-"
"tag handler for elements which are closed implicitly by closing an outer "
"element."
msgstr ""
"Этот синтаксический анализатор не проверяет соответствие конечных тегов "
"начальным тегам и не вызывает обработчик конечного тега для элементов, "
"которые закрываются неявно путем закрытия внешнего элемента."

#: ../../library/html.parser.rst:34
msgid "*convert_charrefs* keyword argument added."
msgstr "Добавлен аргумент ключевого слова *convert_charrefs*."

#: ../../library/html.parser.rst:37
msgid "The default value for argument *convert_charrefs* is now ``True``."
msgstr ""
"Значением по умолчанию для аргумента *convert_charrefs* теперь является "
"``True``."

#: ../../library/html.parser.rst:42
msgid "Example HTML Parser Application"
msgstr "Пример приложения HTML-парсера"

#: ../../library/html.parser.rst:44
msgid ""
"As a basic example, below is a simple HTML parser that uses the :class:"
"`HTMLParser` class to print out start tags, end tags, and data as they are "
"encountered::"
msgstr ""
"В качестве базового примера ниже приведен простой анализатор HTML, который "
"использует класс :class:`HTMLParser` для вывода начальных тегов, конечных "
"тегов и данных по мере их появления:"

#: ../../library/html.parser.rst:48
msgid ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"
msgstr ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"

#: ../../library/html.parser.rst:64
msgid "The output will then be:"
msgstr "Результатом будет:"

#: ../../library/html.parser.rst:66
msgid ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"
msgstr ""
"Обнаружен начальный тег: html. Обнаружен начальный тег: head Обнаружен "
"начальный тег: title Обнаружены некоторые данные: Тест Обнаружен конечный "
"тег: заголовок. Обнаружен конечный тег: head Обнаружен начальный тег: body "
"Обнаружен начальный тег: h1. Обнаружены некоторые данные: Разберите меня! "
"Обнаружен закрывающий тег: h1. Обнаружен конечный тег: тело Обнаружен "
"закрывающий тег: html."

#: ../../library/html.parser.rst:83
msgid ":class:`.HTMLParser` Methods"
msgstr "Методы :class:`.HTMLParser`"

#: ../../library/html.parser.rst:85
msgid ":class:`HTMLParser` instances have the following methods:"
msgstr "Экземпляры :class:`HTMLParser` имеют следующие методы:"

#: ../../library/html.parser.rst:90
msgid ""
"Feed some text to the parser.  It is processed insofar as it consists of "
"complete elements; incomplete data is buffered until more data is fed or :"
"meth:`close` is called.  *data* must be :class:`str`."
msgstr ""
"Подайте некоторый текст в парсер. Он обрабатывается постольку, поскольку "
"состоит из целостных элементов; неполные данные буферизуются до тех пор, "
"пока не будут переданы дополнительные данные или не будет вызван :meth:"
"`close`. *данные* должны быть :class:`str`."

#: ../../library/html.parser.rst:97
msgid ""
"Force processing of all buffered data as if it were followed by an end-of-"
"file mark.  This method may be redefined by a derived class to define "
"additional processing at the end of the input, but the redefined version "
"should always call the :class:`HTMLParser` base class method :meth:`close`."
msgstr ""
"Принудительная обработка всех буферизованных данных, как если бы за ними "
"следовала метка конца файла. Этот метод может быть переопределен производным "
"классом для определения дополнительной обработки в конце ввода, но "
"переопределенная версия всегда должна вызывать метод базового класса :class:"
"`HTMLParser` :meth:`close`."

#: ../../library/html.parser.rst:105
msgid ""
"Reset the instance.  Loses all unprocessed data.  This is called implicitly "
"at instantiation time."
msgstr ""
"Сбросьте экземпляр. Теряет все необработанные данные. Это вызывается неявно "
"во время создания экземпляра."

#: ../../library/html.parser.rst:111
msgid "Return current line number and offset."
msgstr "Возвращает текущий номер строки и смещение."

#: ../../library/html.parser.rst:116
msgid ""
"Return the text of the most recently opened start tag.  This should not "
"normally be needed for structured processing, but may be useful in dealing "
"with HTML \"as deployed\" or for re-generating input with minimal changes "
"(whitespace between attributes can be preserved, etc.)."
msgstr ""
"Возвращает текст последнего открытого начального тега. Обычно это не "
"требуется для структурированной обработки, но может быть полезно при работе "
"с HTML «в том виде, в котором он развернут» или для повторного создания "
"входных данных с минимальными изменениями (можно сохранить пробелы между "
"атрибутами и т. д.)."

#: ../../library/html.parser.rst:122
msgid ""
"The following methods are called when data or markup elements are "
"encountered and they are meant to be overridden in a subclass.  The base "
"class implementations do nothing (except for :meth:`~HTMLParser."
"handle_startendtag`):"
msgstr ""
"Следующие методы вызываются при обнаружении элементов данных или разметки и "
"предназначены для переопределения в подклассе. Реализации базового класса "
"ничего не делают (за исключением :meth:`~HTMLParser.handle_startendtag`):"

#: ../../library/html.parser.rst:129
msgid ""
"This method is called to handle the start tag of an element (e.g. ``<div "
"id=\"main\">``)."
msgstr ""
"Этот метод вызывается для обработки начального тега элемента (например, "
"``<div id=\"main\">``)."

#: ../../library/html.parser.rst:131
msgid ""
"The *tag* argument is the name of the tag converted to lower case. The "
"*attrs* argument is a list of ``(name, value)`` pairs containing the "
"attributes found inside the tag's ``<>`` brackets.  The *name* will be "
"translated to lower case, and quotes in the *value* have been removed, and "
"character and entity references have been replaced."
msgstr ""
"Аргумент *tag* — это имя тега, преобразованное в нижний регистр. Аргумент "
"*attrs* представляет собой список пар ``(имя, значение)``, содержащих "
"атрибуты, находящиеся внутри скобок тега ``<>``. *имя* будет переведено в "
"нижний регистр, кавычки в *значении* будут удалены, а ссылки на символы и "
"сущности заменены."

#: ../../library/html.parser.rst:137
msgid ""
"For instance, for the tag ``<A HREF=\"https://www.cwi.nl/\">``, this method "
"would be called as ``handle_starttag('a', [('href', 'https://www.cwi."
"nl/')])``."
msgstr ""
"Например, для тега ``<A HREF=\"https://www.cwi.nl/\">`` этот метод будет "
"вызываться как ``handle_starttag('a', [('href', 'https ://www.cwi.nl/')])``."

#: ../../library/html.parser.rst:140
msgid ""
"All entity references from :mod:`html.entities` are replaced in the "
"attribute values."
msgstr ""
"Все ссылки на сущности из :mod:`html.entities` заменяются в значениях "
"атрибутов."

#: ../../library/html.parser.rst:146
msgid ""
"This method is called to handle the end tag of an element (e.g. ``</div>``)."
msgstr ""
"Этот метод вызывается для обработки конечного тега элемента (например, ``</"
"div>``)."

#: ../../library/html.parser.rst:148
msgid "The *tag* argument is the name of the tag converted to lower case."
msgstr "Аргумент *tag* — это имя тега, преобразованное в нижний регистр."

#: ../../library/html.parser.rst:153
msgid ""
"Similar to :meth:`handle_starttag`, but called when the parser encounters an "
"XHTML-style empty tag (``<img ... />``).  This method may be overridden by "
"subclasses which require this particular lexical information; the default "
"implementation simply calls :meth:`handle_starttag` and :meth:"
"`handle_endtag`."
msgstr ""
"Похож на :meth:`handle_starttag`, но вызывается, когда парсер обнаруживает "
"пустой тег в стиле XHTML (``<img ... />``). Этот метод может быть "
"переопределен подклассами, которым требуется эта конкретная лексическая "
"информация; реализация по умолчанию просто вызывает :meth:`handle_starttag` "
"и :meth:`handle_endtag`."

#: ../../library/html.parser.rst:161
msgid ""
"This method is called to process arbitrary data (e.g. text nodes and the "
"content of ``<script>...</script>`` and ``<style>...</style>``)."
msgstr ""
"Этот метод вызывается для обработки произвольных данных (например, текстовых "
"узлов и содержимого ``<script>...</script>`` и ``<style>...</style>``)."

#: ../../library/html.parser.rst:167
msgid ""
"This method is called to process a named character reference of the form "
"``&name;`` (e.g. ``&gt;``), where *name* is a general entity reference (e.g. "
"``'gt'``).  This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"Этот метод вызывается для обработки именованной ссылки на символ в форме "
"``&name;`` (например, ``>``), где *name* — это общая ссылка на объект "
"(например, ``'gt'``). Этот метод никогда не вызывается, если "
"*convert_charrefs* имеет значение True."

#: ../../library/html.parser.rst:175
msgid ""
"This method is called to process decimal and hexadecimal numeric character "
"references of the form :samp:`&#{NNN};` and :samp:`&#x{NNN};`.  For example, "
"the decimal equivalent for ``&gt;`` is ``&#62;``, whereas the hexadecimal is "
"``&#x3E;``; in this case the method will receive ``'62'`` or ``'x3E'``.  "
"This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"Этот метод вызывается для обработки десятичных и шестнадцатеричных числовых "
"ссылок на символы вида :samp:`&#{NNN};` и :samp:`&#x{NNN};`. Например, "
"десятичный эквивалент ``>`` — это ``&#62;``, тогда как шестнадцатеричный "
"эквивалент ``&#x3E;``; в этом случае метод получит ``'62'`` или ``'x3E'``. "
"Этот метод никогда не вызывается, если *convert_charrefs* имеет значение "
"True."

#: ../../library/html.parser.rst:184
msgid ""
"This method is called when a comment is encountered (e.g. ``<!--comment--"
">``)."
msgstr ""
"Этот метод вызывается при обнаружении комментария (например, ``<!--comment--"
">``)."

#: ../../library/html.parser.rst:186
msgid ""
"For example, the comment ``<!-- comment -->`` will cause this method to be "
"called with the argument ``' comment '``."
msgstr ""
"Например, комментарий ``<!-- comment -->`` приведет к вызову этого метода с "
"аргументом ``' comment '``."

#: ../../library/html.parser.rst:189
msgid ""
"The content of Internet Explorer conditional comments (condcoms) will also "
"be sent to this method, so, for ``<!--[if IE 9]>IE9-specific content<!"
"[endif]-->``, this method will receive ``'[if IE 9]>IE9-specific content<!"
"[endif]'``."
msgstr ""
"Содержимое условных комментариев Internet Explorer (condcoms) также будет "
"отправлено в этот метод, поэтому для ``<!--[if IE 9]>контента, специфичного "
"для IE9<![endif]-->``, этот метод получит ``'[if IE 9]>контент, специфичный "
"для IE9<![endif]'``."

#: ../../library/html.parser.rst:196
msgid ""
"This method is called to handle an HTML doctype declaration (e.g. ``<!"
"DOCTYPE html>``)."
msgstr ""
"Этот метод вызывается для обработки объявления типа документа HTML "
"(например, ``<!DOCTYPE html>``)."

#: ../../library/html.parser.rst:199
msgid ""
"The *decl* parameter will be the entire contents of the declaration inside "
"the ``<!...>`` markup (e.g. ``'DOCTYPE html'``)."
msgstr ""
"Параметр *decl* будет всем содержимым объявления внутри разметки ``<!...>`` "
"(например, ``'DOCTYPE html'``)."

#: ../../library/html.parser.rst:205
msgid ""
"Method called when a processing instruction is encountered.  The *data* "
"parameter will contain the entire processing instruction. For example, for "
"the processing instruction ``<?proc color='red'>``, this method would be "
"called as ``handle_pi(\"proc color='red'\")``.  It is intended to be "
"overridden by a derived class; the base class implementation does nothing."
msgstr ""
"Метод вызывается при обнаружении инструкции обработки. Параметр *data* будет "
"содержать всю инструкцию обработки. Например, для инструкции обработки ``<?"
"proc color='red'>`` этот метод будет вызываться как ``handle_pi(\"proc "
"color='red'\")``. Он предназначен для переопределения производным классом; "
"реализация базового класса ничего не делает."

#: ../../library/html.parser.rst:213
msgid ""
"The :class:`HTMLParser` class uses the SGML syntactic rules for processing "
"instructions.  An XHTML processing instruction using the trailing ``'?'`` "
"will cause the ``'?'`` to be included in *data*."
msgstr ""
"Класс :class:`HTMLParser` использует синтаксические правила SGML для "
"обработки инструкций. Инструкция обработки XHTML, использующая завершающий "
"``'?'``, приведет к включению ``'?'`` в *data*."

#: ../../library/html.parser.rst:220
msgid ""
"This method is called when an unrecognized declaration is read by the parser."
msgstr ""
"Этот метод вызывается, когда синтаксический анализатор читает нераспознанное "
"объявление."

#: ../../library/html.parser.rst:222
msgid ""
"The *data* parameter will be the entire contents of the declaration inside "
"the ``<![...]>`` markup.  It is sometimes useful to be overridden by a "
"derived class.  The base class implementation does nothing."
msgstr ""
"Параметр *data* будет всем содержимым объявления внутри разметки ``<!"
"[...]>``. Иногда бывает полезно переопределить производный класс. Реализация "
"базового класса ничего не делает."

#: ../../library/html.parser.rst:230
msgid "Examples"
msgstr "Примеры"

#: ../../library/html.parser.rst:232
msgid ""
"The following class implements a parser that will be used to illustrate more "
"examples::"
msgstr ""
"Следующий класс реализует синтаксический анализатор, который будет "
"использоваться для иллюстрации дополнительных примеров:"

#: ../../library/html.parser.rst:235
msgid ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"
msgstr ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"

#: ../../library/html.parser.rst:269
msgid "Parsing a doctype::"
msgstr "Анализ типа документа::"

#: ../../library/html.parser.rst:271
msgid ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3."
"org/TR/html4/strict.dtd\""
msgstr ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3."
"org/TR/html4/strict.dtd\""

#: ../../library/html.parser.rst:275
msgid "Parsing an element with a few attributes and a title::"
msgstr "Разбор элемента с несколькими атрибутами и заголовком::"

#: ../../library/html.parser.rst:277
msgid ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"
msgstr ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"

#: ../../library/html.parser.rst:287
msgid ""
"The content of ``script`` and ``style`` elements is returned as is, without "
"further parsing::"
msgstr ""
"Содержимое элементов ``script`` и ``style`` возвращается как есть, без "
"дальнейшего анализа:"

#: ../../library/html.parser.rst:290
msgid ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</"
"style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"
msgstr ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</"
"style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"

#: ../../library/html.parser.rst:303
msgid "Parsing comments::"
msgstr "Разбор комментариев::"

#: ../../library/html.parser.rst:305
msgid ""
">>> parser.feed('<!-- a comment -->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  :  a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"
msgstr ""
">>> parser.feed('<!-- a comment -->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  :  a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"

#: ../../library/html.parser.rst:310
msgid ""
"Parsing named and numeric character references and converting them to the "
"correct char (note: these 3 references are all equivalent to ``'>'``)::"
msgstr ""
"Анализ именованных и числовых ссылок на символы и преобразование их в "
"правильный символ (примечание: все эти 3 ссылки эквивалентны ``'>'``)::"

#: ../../library/html.parser.rst:313
msgid ""
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"
msgstr ""
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"

#: ../../library/html.parser.rst:318
msgid ""
"Feeding incomplete chunks to :meth:`~HTMLParser.feed` works, but :meth:"
"`~HTMLParser.handle_data` might be called more than once (unless "
"*convert_charrefs* is set to ``True``)::"
msgstr ""
"Передача неполных фрагментов в :meth:`~HTMLParser.feed` работает, но :meth:"
"`~HTMLParser.handle_data` может вызываться более одного раза (если для "
"параметра *convert_charrefs* установлено значение ``True``)::"

#: ../../library/html.parser.rst:322
msgid ""
">>> for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     : text\n"
"End tag  : span"
msgstr ""
">>> for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     : text\n"
"End tag  : span"

#: ../../library/html.parser.rst:331
msgid "Parsing invalid HTML (e.g. unquoted attributes) also works::"
msgstr ""
"Анализ недопустимого HTML (например, атрибутов без кавычек) также работает::"

#: ../../library/html.parser.rst:333
msgid ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"
msgstr ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"

#: ../../library/html.parser.rst:9
msgid "HTML"
msgstr "HTML"

#: ../../library/html.parser.rst:9
msgid "XHTML"
msgstr "XHTML"
