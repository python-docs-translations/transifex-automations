# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/venv.rst:2
msgid ":mod:`!venv` --- Creation of virtual environments"
msgstr ""
"Дополнительную информацию об ABC см. в модулях :mod:`abc` и :pep:`3119`."

#: ../../library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr "**Исходный код:** :source:`Lib/venv/`"

#: ../../library/venv.rst:21
msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created "
"on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and may optionally be isolated from the "
"packages in the base environment, so only those explicitly installed in the "
"virtual environment are available."
msgstr ""
"Модуль :mod:`!venv` поддерживает создание облегченных «виртуальных сред», "
"каждая из которых имеет свой собственный независимый набор пакетов Python, "
"установленных в их каталогах :mod:`site`. Виртуальная среда создается поверх "
"существующей установки Python, известная как «базовый» Python виртуальной "
"среды, и при необходимости может быть изолирована от пакетов в базовой "
"среде, поэтому доступны только те пакеты, которые явно установлены в "
"виртуальной среде."

#: ../../library/venv.rst:29
msgid ""
"When used from within a virtual environment, common installation tools such "
"as :pypi:`pip` will install Python packages into a virtual environment "
"without needing to be told to do so explicitly."
msgstr ""
"При использовании в виртуальной среде обычные инструменты установки, такие "
"как :pypi:`pip`, установят пакеты Python в виртуальную среду без "
"необходимости явного указания сделать это."

#: ../../library/venv.rst:33
msgid "A virtual environment is (amongst other things):"
msgstr "Виртуальная среда – это (помимо прочего):"

#: ../../library/venv.rst:35
msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""
"Используется для хранения определенного интерпретатора Python, а также "
"программных библиотек и двоичных файлов, необходимых для поддержки проекта "
"(библиотеки или приложения). По умолчанию они изолированы от программного "
"обеспечения в других виртуальных средах, а также от интерпретаторов и "
"библиотек Python, установленных в операционной системе."

#: ../../library/venv.rst:40
msgid ""
"Contained in a directory, conventionally named ``.venv`` or ``venv`` in the "
"project directory, or under a container directory for lots of virtual "
"environments, such as ``~/.virtualenvs``."
msgstr ""
"Содержится в каталоге с традиционным именем ``.venv`` или ``venv`` в "
"каталоге проекта или в каталоге контейнера для множества виртуальных сред, "
"например ``~/.virtualenvs``."

#: ../../library/venv.rst:44
msgid "Not checked into source control systems such as Git."
msgstr "Не проверено в системах контроля версий, таких как Git."

#: ../../library/venv.rst:46
msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment."
msgstr ""
"Считается одноразовым — его должно быть легко удалить и воссоздать с нуля. "
"Вы не размещаете код проекта в среде."

#: ../../library/venv.rst:49
msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""
"Не считается переносимым или копируемым — вы просто воссоздаете ту же среду "
"в целевом месте."

#: ../../library/venv.rst:52
msgid "See :pep:`405` for more background on Python virtual environments."
msgstr ""
"См. :pep:`405` для получения дополнительной информации о виртуальных средах "
"Python."

#: ../../library/venv.rst:56
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""
"`Руководство пользователя по упаковке Python: Создание и использование "
"виртуальных сред <https://packaging.python.org/guides/installing-using-pip-"
"and-virtual-environments/#create-and-use-virtual-environments>`__"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Доступность"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"Этот модуль не работает или недоступен на платформах WebAssembly «wasm32-"
"emscripten» и «wasm32-wasi». См. :ref:`wasm-availability` для получения "
"дополнительной информации."

#: ../../library/venv.rst:62
msgid "Creating virtual environments"
msgstr "Создание виртуальных сред"

#: ../../library/venv.rst:64
msgid ""
":ref:`Virtual environments <venv-def>` are created by executing the ``venv`` "
"module:"
msgstr ""
":ref:`Виртуальные среды <venv-def>` создаются путем выполнения модуля "
"``venv``:"

#: ../../library/venv.rst:67
msgid "python -m venv /path/to/new/virtual/environment"
msgstr "python -m venv /path/to/new/virtual/environment"

#: ../../library/venv.rst:71
msgid ""
"This creates the target directory (including parent directories as needed) "
"and places a :file:`pyvenv.cfg` file in it with a ``home`` key pointing to "
"the Python installation from which the command was run. It also creates a :"
"file:`bin` (or :file:`Scripts` on Windows) subdirectory containing a copy or "
"symlink of the Python executable (as appropriate for the platform or "
"arguments used at environment creation time). It also creates a :file:`lib/"
"pythonX.Y/site-packages` subdirectory (on Windows, this is :file:`Lib\\site-"
"packages`). If an existing directory is specified, it will be re-used."
msgstr ""
"При этом создается целевой каталог (включая родительские каталоги, если "
"необходимо) и помещается в него файл :file:`pyvenv.cfg` с ключом ``home``, "
"указывающим на установку Python, из которой была запущена команда. Он также "
"создает подкаталог :file:`bin` (или :file:`Scripts` в Windows), содержащий "
"копию или символическую ссылку исполняемого файла Python (в зависимости от "
"платформы или аргументов, используемых во время создания среды). Он также "
"создает подкаталог :file:`lib/pythonX.Y/site-packages` (в Windows это :file:"
"`Lib\\site-packages`). Если указан существующий каталог, он будет "
"использован повторно."

#: ../../library/venv.rst:81
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr "Теперь для создания виртуальных сред рекомендуется использовать venv."

#: ../../library/venv.rst:84
msgid ""
":program:`pyvenv` was the recommended tool for creating virtual environments "
"for Python 3.3 and 3.4, and replaced in 3.5 by executing ``venv`` directly."
msgstr ""
":program:`pyvenv` был рекомендуемым инструментом для создания виртуальных "
"сред для Python 3.3 и 3.4 и заменен в версии 3.5 прямым запуском ``venv``."

#: ../../library/venv.rst:90
msgid "On Windows, invoke the ``venv`` command as follows:"
msgstr "В Windows вызовите команду venv следующим образом:"

#: ../../library/venv.rst:92
msgid "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"
msgstr "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"

#: ../../library/venv.rst:96
msgid "The command, if run with ``-h``, will show the available options::"
msgstr "Команда, если ее запустить с ``-h``, покажет доступные параметры:"

#: ../../library/venv.rst:98
msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory\n"
"                        if it already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been\n"
"                        upgraded in-place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"  --prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"  --upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."
msgstr ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"  ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"  --symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"  --copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"  --clear               Delete the contents of the environment directory\n"
"                        if it already exists, before environment creation.\n"
"  --upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been\n"
"                        upgraded in-place.\n"
"  --without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"  --prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"  --upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."

#: ../../library/venv.rst:132
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options."
msgstr ""
"Устанавливает pip по умолчанию, добавлены опции ``--without-pip`` и ``--"
"copies``."

#: ../../library/venv.rst:136
msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""
"В более ранних версиях, если целевой каталог уже существовал, возникала "
"ошибка, если не была предоставлена ​​опция ``--clear`` или ``--upgrade``."

#: ../../library/venv.rst:140
msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI."
msgstr ""
"Добавьте опцию --upgrade-deps для обновления pip + setuptools до последней "
"версии PyPI."

#: ../../library/venv.rst:145
msgid "``setuptools`` is no longer a core venv dependency."
msgstr "``setuptools`` больше не является основной зависимостью venv."

#: ../../library/venv.rst:148
msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will "
"resolve the symlink eagerly and ignore the virtual environment."
msgstr ""
"Хотя символические ссылки поддерживаются в Windows, использовать их не "
"рекомендуется. Особо следует отметить, что двойной щелчок по ``python.exe`` "
"в проводнике быстро разрешает символическую ссылку и игнорирует виртуальную "
"среду."

#: ../../library/venv.rst:153
msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""
"В Microsoft Windows может потребоваться включить сценарий «Activate.ps1», "
"установив политику выполнения для пользователя. Вы можете сделать это, введя "
"следующую команду PowerShell:"

#: ../../library/venv.rst:157
msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
msgstr ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"

#: ../../library/venv.rst:161
msgid ""
"See `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ for more information."
msgstr ""
"Дополнительную информацию см. в разделе `О политиках выполнения <https://go."
"microsoft.com/fwlink/?LinkID=135170>`_."

#: ../../library/venv.rst:165
msgid ""
"The created :file:`pyvenv.cfg` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""
"Созданный файл :file:`pyvenv.cfg` также включает ключ ``include-system-site-"
"packages``, установленный в ``true``, если ``venv`` запускается с ``--"
"system- site-packages``, в противном случае ``false``."

#: ../../library/venv.rst:169
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""
"Если не указана опция ``--without-pip``, :mod:`ensurepip` будет вызываться "
"для загрузки ``pip`` в виртуальную среду."

#: ../../library/venv.rst:172
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""
"Для ``venv`` может быть задано несколько путей, и в этом случае на каждом "
"предоставленном пути будет создана идентичная виртуальная среда в "
"соответствии с заданными параметрами."

#: ../../library/venv.rst:179
msgid "How venvs work"
msgstr "Как работают венвсы"

#: ../../library/venv.rst:181
msgid ""
"When a Python interpreter is running from a virtual environment, :data:`sys."
"prefix` and :data:`sys.exec_prefix` point to the directories of the virtual "
"environment, whereas :data:`sys.base_prefix` and :data:`sys."
"base_exec_prefix` point to those of the base Python used to create the "
"environment. It is sufficient to check ``sys.prefix != sys.base_prefix`` to "
"determine if the current interpreter is running from a virtual environment."
msgstr ""
"Когда интерпретатор Python запускается из виртуальной среды, :data:`sys."
"prefix` и :data:`sys.exec_prefix` указывают на каталоги виртуальной среды, "
"тогда как :data:`sys.base_prefix` и :data: `sys.base_exec_prefix` указывает "
"на базовый Python, используемый для создания среды. Достаточно проверить "
"``sys.prefix != sys.base_prefix``, чтобы определить, запущен ли текущий "
"интерпретатор из виртуальной среды."

#: ../../library/venv.rst:190
msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that "
"directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by "
"the path to the directory containing the virtual environment):"
msgstr ""
"Виртуальную среду можно «активировать» с помощью сценария в ее двоичном "
"каталоге («bin» в POSIX; «Scripts» в Windows). Это добавит этот каталог к ​​"
"вашему :envvar:`PATH`, так что запуск :program:`python` вызовет "
"интерпретатор Python среды, и вы сможете запускать установленные сценарии "
"без необходимости использовать их полный путь. Вызов сценария активации "
"зависит от платформы (:samp:`{<venv>}` необходимо заменить путем к каталогу, "
"содержащему виртуальную среду):"

#: ../../library/venv.rst:200
msgid "Platform"
msgstr "Платформа"

#: ../../library/venv.rst:200
msgid "Shell"
msgstr "Командная оболочка"

#: ../../library/venv.rst:200
msgid "Command to activate virtual environment"
msgstr "Команда активации виртуальной среды"

#: ../../library/venv.rst:202
msgid "POSIX"
msgstr "POSIX"

#: ../../library/venv.rst:202
msgid "bash/zsh"
msgstr "bash/zsh"

#: ../../library/venv.rst:202
msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr ":samp:`$ source {<venv>}/bin/activate`"

#: ../../library/venv.rst:204
msgid "fish"
msgstr "рыба"

#: ../../library/venv.rst:204
msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr ":samp:`$ source {<venv>}/bin/activate.fish`"

#: ../../library/venv.rst:206
msgid "csh/tcsh"
msgstr "csh/tcsh"

#: ../../library/venv.rst:206
msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr ":samp:`$ source {<venv>}/bin/activate.csh`"

#: ../../library/venv.rst:208
msgid "pwsh"
msgstr "pwsh"

#: ../../library/venv.rst:208
msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr ":samp:`$ {<venv>}/bin/Activate.ps1`"

#: ../../library/venv.rst:210
msgid "Windows"
msgstr "Windows"

#: ../../library/venv.rst:210
msgid "cmd.exe"
msgstr "cmd.exe"

#: ../../library/venv.rst:210
msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"

#: ../../library/venv.rst:212
msgid "PowerShell"
msgstr "PowerShell"

#: ../../library/venv.rst:212
msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"

#: ../../library/venv.rst:215
msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr "Скрипты активации :program:`fish` и :program:`csh`."

#: ../../library/venv.rst:218
msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr ""
"Сценарии активации PowerShell, установленные в соответствии с POSIX, для "
"поддержки PowerShell Core."

#: ../../library/venv.rst:222
msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""
"Вам не *нужно* специально активировать виртуальную среду, поскольку вы "
"можете просто указать полный путь к интерпретатору Python этой среды при "
"вызове Python. Более того, все скрипты, установленные в среде, должны "
"запускаться без ее активации."

#: ../../library/venv.rst:228
msgid ""
"In order to achieve this, scripts installed into virtual environments have a "
"\"shebang\" line which points to the environment's Python interpreter, :samp:"
"`#!/{<path-to-venv>}/bin/python`. This means that the script will run with "
"that interpreter regardless of the value of :envvar:`PATH`. On Windows, "
"\"shebang\" line processing is supported if you have the :ref:`launcher` "
"installed. Thus, double-clicking an installed script in a Windows Explorer "
"window should run it with the correct interpreter without the environment "
"needing to be activated or on the :envvar:`PATH`."
msgstr ""
"Для этого в сценариях, установленных в виртуальных средах, есть строка "
"«шебанг», указывающая на интерпретатор Python среды: :samp:`#!/{<path-to-"
"venv>}/bin/python`. Это означает, что сценарий будет работать с этим "
"интерпретатором независимо от значения :envvar:`PATH`. В Windows обработка "
"строк «shebang» поддерживается, если у вас установлен :ref:`launcher`. Таким "
"образом, двойной щелчок установленного сценария в окне проводника Windows "
"должен запустить его с правильным интерпретатором без необходимости "
"активации среды или по :envvar:`PATH`."

#: ../../library/venv.rst:237
msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly "
"activating a virtual environment is not required to use it, :envvar:`!"
"VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""
"Когда виртуальная среда активирована, переменной среды :envvar:`!"
"VIRTUAL_ENV` присваивается путь к среде. Поскольку для ее использования не "
"требуется явная активация виртуальной среды, на :envvar:`!VIRTUAL_ENV` "
"нельзя полагаться при определении того, используется ли виртуальная среда."

#: ../../library/venv.rst:243
msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently non-"
"portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the "
"environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""
"Поскольку сценарии, установленные в средах, не должны ожидать активации "
"среды, их строки shebang содержат абсолютные пути к интерпретаторам их "
"среды. Из-за этого среды в общем случае по своей сути непереносимы. У вас "
"всегда должны быть простые средства воссоздания среды (например, если у вас "
"есть файл требований ``requirements.txt``, вы можете вызвать ``pip install -"
"r require.txt``, используя ``pip` среды. `чтобы установить все пакеты, "
"необходимые для среды). Если по какой-либо причине вам необходимо "
"переместить среду в новое место, вам следует воссоздать ее в нужном месте и "
"удалить среду в старом месте. Если вы перемещаете среду из-за перемещения ее "
"родительского каталога, вам следует воссоздать среду в новом месте. В "
"противном случае программное обеспечение, установленное в среде, может "
"работать не так, как ожидалось."

#: ../../library/venv.rst:257
msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""
"Вы можете деактивировать виртуальную среду, набрав в своей оболочке "
"``deactivate``. Точный механизм зависит от платформы и является деталью "
"внутренней реализации (обычно используется сценарий или функция оболочки)."

#: ../../library/venv.rst:265
msgid "API"
msgstr "API"

#: ../../library/venv.rst:269
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the :class:"
"`EnvBuilder` class."
msgstr ""
"Описанный выше высокоуровневый метод использует простой API, который "
"предоставляет сторонним создателям виртуальной среды механизмы для настройки "
"создания среды в соответствии со своими потребностями, класс :class:"
"`EnvBuilder`."

#: ../../library/venv.rst:277
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""
"Класс :class:`EnvBuilder` принимает следующие ключевые слова при создании "
"экземпляра:"

#: ../../library/venv.rst:280
msgid ""
"*system_site_packages* -- a boolean value indicating that the system Python "
"site-packages should be available to the environment (defaults to ``False``)."
msgstr ""
"*system_site_packages* — логическое значение, указывающее, что системные "
"пакеты сайта Python должны быть доступны для среды (по умолчанию — «False»)."

#: ../../library/venv.rst:283
msgid ""
"*clear* -- a boolean value which, if true, will delete the contents of any "
"existing target directory, before creating the environment."
msgstr ""
"*clear* — логическое значение, которое, если оно истинно, удалит содержимое "
"любого существующего целевого каталога перед созданием среды."

#: ../../library/venv.rst:286
msgid ""
"*symlinks* -- a boolean value indicating whether to attempt to symlink the "
"Python binary rather than copying."
msgstr ""
"*symlinks* — логическое значение, указывающее, следует ли пытаться создать "
"символическую ссылку на двоичный файл Python вместо копирования."

#: ../../library/venv.rst:289
msgid ""
"*upgrade* -- a boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""
"*upgrade* — логическое значение, которое, если оно истинно, обновит "
"существующую среду с работающим Python — для использования, когда этот "
"Python был обновлен на месте (по умолчанию — «False»)."

#: ../../library/venv.rst:293
msgid ""
"*with_pip* -- a boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""
"*with_pip* — логическое значение, которое, если оно истинно, гарантирует, "
"что pip установлен в виртуальной среде. При этом используется :mod:"
"`ensurepip` с опцией ``--default-pip``."

#: ../../library/venv.rst:297
msgid ""
"*prompt* -- a string to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be "
"used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""
"*prompt* — строка, которая будет использоваться после активации виртуальной "
"среды (по умолчанию «Нет», что означает, что будет использоваться имя "
"каталога среды). Если указана специальная строка ``\".\"``, в качестве "
"подсказки используется базовое имя текущего каталога."

#: ../../library/venv.rst:302
msgid "*upgrade_deps* -- Update the base venv modules to the latest on PyPI"
msgstr ""
"*upgrade_deps* — Обновите базовые модули venv до последней версии PyPI."

#: ../../library/venv.rst:304
msgid "Added the ``with_pip`` parameter"
msgstr "Добавлен параметр ``with_pip``."

#: ../../library/venv.rst:307
msgid "Added the ``prompt`` parameter"
msgstr "Добавлен параметр ``prompt``."

#: ../../library/venv.rst:310
msgid "Added the ``upgrade_deps`` parameter"
msgstr "Добавлен параметр ``upgrade_deps``."

#: ../../library/venv.rst:313
msgid ":class:`EnvBuilder` may be used as a base class."
msgstr ":class:`EnvBuilder` можно использовать в качестве базового класса."

#: ../../library/venv.rst:317
msgid ""
"Create a virtual environment by specifying the target directory (absolute or "
"relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""
"Создайте виртуальную среду, указав целевой каталог (абсолютный или "
"относительный к текущему каталогу), в котором должна находиться виртуальная "
"среда. Метод create либо создаст среду в указанном каталоге, либо вызовет "
"соответствующее исключение."

#: ../../library/venv.rst:323
msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks "
"available for subclass customization::"
msgstr ""
"Метод ``create`` класса :class:`EnvBuilder` иллюстрирует перехватчики, "
"доступные для настройки подкласса:"

#: ../../library/venv.rst:326
msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"

#: ../../library/venv.rst:338
msgid ""
"Each of the methods :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` and :"
"meth:`post_setup` can be overridden."
msgstr ""
"Каждый из методов :meth:`ensure_directories`, :meth:`create_configuration`, :"
"meth:`setup_python`, :meth:`setup_scripts` и :meth:`post_setup` может быть "
"переопределен."

#: ../../library/venv.rst:344
msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""
"Создает каталог среды и все необходимые подкаталоги, которые еще не "
"существуют, и возвращает объект контекста. Этот объект контекста является "
"просто хранилищем атрибутов (например, путей) для использования другими "
"методами. Если :class:`EnvBuilder` создается с аргументом ``clear=True``, "
"содержимое каталога среды будет очищено, а затем все необходимые подкаталоги "
"будут созданы заново."

#: ../../library/venv.rst:351
msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""
"Возвращаемый объект контекста представляет собой :class:`types."
"SimpleNamespace` со следующими атрибутами:"

#: ../../library/venv.rst:354
msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_dir`` — расположение виртуальной среды. Используется для "
"``__VENV_DIR__`` в сценариях активации (см. :meth:`install_scripts`)."

#: ../../library/venv.rst:357
msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_name`` — имя виртуальной среды. Используется для ``__VENV_NAME__`` в "
"сценариях активации (см. :meth:`install_scripts`)."

#: ../../library/venv.rst:360
msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``prompt`` — приглашение, которое будет использоваться сценариями активации. "
"Используется для ``__VENV_PROMPT__`` в сценариях активации (см. :meth:"
"`install_scripts`)."

#: ../../library/venv.rst:363
msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is "
"created from another virtual environment."
msgstr ""
"``исполняемый файл`` — базовый исполняемый файл Python, используемый "
"виртуальной средой. При этом учитывается случай, когда виртуальная среда "
"создается из другой виртуальной среды."

#: ../../library/venv.rst:367
msgid "``inc_path`` - The include path for the virtual environment."
msgstr "``inc_path`` — путь включения для виртуальной среды."

#: ../../library/venv.rst:369
msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr "``lib_path`` — путь к чистой библиотеке виртуальной среды."

#: ../../library/venv.rst:371
msgid "``bin_path`` - The script path for the virtual environment."
msgstr "``bin_path`` — путь к сценарию для виртуальной среды."

#: ../../library/venv.rst:373
msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""
"``bin_name`` — имя пути сценария относительно местоположения виртуальной "
"среды. Используется для ``__VENV_BIN_NAME__`` в сценариях активации (см. :"
"meth:`install_scripts`)."

#: ../../library/venv.rst:377
msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment. "
"Used for ``__VENV_PYTHON__`` in activation scripts (see :meth:"
"`install_scripts`)."
msgstr ""
"``env_exe`` — имя интерпретатора Python в виртуальной среде. Используется "
"для ``__VENV_PYTHON__`` в сценариях активации (см. :meth:`install_scripts`)."

#: ../../library/venv.rst:381
msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""
"``env_exec_cmd`` — имя интерпретатора Python с учетом перенаправления "
"файловой системы. Это можно использовать для запуска Python в виртуальной "
"среде."

#: ../../library/venv.rst:386
msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used "
"to construct the paths of the created directories."
msgstr ""
"Схема установки *venv* :ref:`sysconfig <installation_paths>` используется "
"для построения путей к создаваемым каталогам."

#: ../../library/venv.rst:391
msgid ""
"The attribute ``lib_path`` was added to the context, and the context object "
"was documented."
msgstr ""
"Атрибут lib_path был добавлен в контекст, и объект контекста был "
"задокументирован."

#: ../../library/venv.rst:397
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr "Создает файл конфигурации pyvenv.cfg в среде."

#: ../../library/venv.rst:401
msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""
"Создает копию или символическую ссылку на исполняемый файл Python в среде. В "
"системах POSIX, если использовался определенный исполняемый файл ``python3."
"x``, будут созданы символические ссылки на ``python`` и ``python3``, "
"указывающие на этот исполняемый файл, если файлы с такими именами уже не "
"существуют."

#: ../../library/venv.rst:408
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""
"Устанавливает в виртуальную среду сценарии активации, соответствующие "
"платформе."

#: ../../library/venv.rst:413
msgid ""
"Upgrades the core venv dependency packages (currently :pypi:`pip`) in the "
"environment. This is done by shelling out to the ``pip`` executable in the "
"environment."
msgstr ""
"Обновляет основные пакеты зависимостей venv (в настоящее время :pypi:`pip`) "
"в среде. Это делается путем вызова исполняемого файла ``pip`` в среде."

#: ../../library/venv.rst:420
msgid ":pypi:`setuptools` is no longer a core venv dependency."
msgstr ":pypi:`setuptools` больше не является основной зависимостью venv."

#: ../../library/venv.rst:424
msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""
"Метод-заполнитель, который можно переопределить в сторонних реализациях для "
"предварительной установки пакетов в виртуальной среде или выполнения других "
"шагов после создания."

#: ../../library/venv.rst:430
msgid ""
"This method can be called from :meth:`setup_scripts` or :meth:`post_setup` "
"in subclasses to assist in installing custom scripts into the virtual "
"environment."
msgstr ""
"Этот метод можно вызвать из :meth:`setup_scripts` или :meth:`post_setup` в "
"подклассах, чтобы помочь в установке пользовательских сценариев в "
"виртуальную среду."

#: ../../library/venv.rst:434
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"``common``, ``posix``, ``nt``; each containing scripts destined for the "
"``bin`` directory in the environment.  The contents of ``common`` and the "
"directory corresponding to :data:`os.name` are copied after some text "
"replacement of placeholders:"
msgstr ""
"*path* — путь к каталогу, который должен содержать подкаталоги ``common``, "
"``posix``, ``nt``; каждый из которых содержит сценарии, предназначенные для "
"каталога ``bin`` в среде. Содержимое ``common`` и каталог, соответствующий :"
"data:`os.name`, копируются после некоторой текстовой замены заполнителей:"

#: ../../library/venv.rst:440
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr "``__VENV_DIR__`` заменяется абсолютным путем к каталогу среды."

#: ../../library/venv.rst:443
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""
"``__VENV_NAME__`` заменяется именем среды (конечный сегмент пути к каталогу "
"среды)."

#: ../../library/venv.rst:446
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""
"``__VENV_PROMPT__`` заменяется приглашением (имя среды, заключенное в "
"круглые скобки и следующий за ним пробел)"

#: ../../library/venv.rst:449
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either "
"``bin`` or ``Scripts``)."
msgstr ""
"``__VENV_BIN_NAME__`` заменяется именем каталога bin (либо ``bin``, либо "
"``Scripts``)."

#: ../../library/venv.rst:452
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""
"``__VENV_PYTHON__`` заменяется абсолютным путем к исполняемому файлу среды."

#: ../../library/venv.rst:455
msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr "Каталогам разрешено существование (при обновлении существующей среды)."

#: ../../library/venv.rst:458
msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying "
"the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless "
"running from a build in the source tree."
msgstr ""
"Windows теперь использует сценарии перенаправления для ``python[w].exe`` "
"вместо копирования реальных двоичных файлов. Только в версии 3.7.2 :meth:"
"`setup_python` ничего не делает, если не запускается из сборки в дереве "
"исходного кода."

#: ../../library/venv.rst:463
msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using "
"symlinks, the original executables will be linked."
msgstr ""
"Windows копирует сценарии перенаправления как часть :meth:`setup_python` "
"вместо :meth:`setup_scripts`. В 3.7.2 этого не было. При использовании "
"символических ссылок будут связаны исходные исполняемые файлы."

#: ../../library/venv.rst:468
msgid "There is also a module-level convenience function:"
msgstr "Также имеется удобная функция на уровне модуля:"

#: ../../library/venv.rst:474
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""
"Создайте :class:`EnvBuilder` с заданными аргументами ключевого слова и "
"вызовите его метод :meth:`~EnvBuilder.create` с аргументом *env_dir*."

#: ../../library/venv.rst:479
msgid "Added the *with_pip* parameter"
msgstr "Добавлен параметр *with_pip*."

#: ../../library/venv.rst:482
msgid "Added the *prompt* parameter"
msgstr "Добавлен параметр *prompt*"

#: ../../library/venv.rst:485
msgid "Added the *upgrade_deps* parameter"
msgstr "Добавлен параметр *upgrade_deps*."

#: ../../library/venv.rst:489
msgid "An example of extending ``EnvBuilder``"
msgstr "Пример расширения EnvBuilder"

#: ../../library/venv.rst:491
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing "
"a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""
"Следующий скрипт показывает, как расширить :class:`EnvBuilder` путем "
"реализации подкласса, который устанавливает инструменты настройки и pip в "
"созданную виртуальную среду:"

#: ../../library/venv.rst:494
msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"

#: ../../library/venv.rst:702
msgid ""
"This script is also available for download `online <https://gist.github.com/"
"vsajip/4673395>`_."
msgstr ""
"Этот сценарий также доступен для загрузки онлайн <https://gist.github.com/"
"vsajip/4673395>_."

#: ../../library/venv.rst:14
msgid "Environments"
msgstr "Окружающая среда"

#: ../../library/venv.rst:14
msgid "virtual"
msgstr "виртуальный"
