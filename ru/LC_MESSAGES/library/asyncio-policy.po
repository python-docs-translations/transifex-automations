# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr "Политика"

#: ../../library/asyncio-policy.rst:10
msgid ""
"An event loop policy is a global object used to get and set the current :ref:"
"`event loop <asyncio-event-loop>`, as well as create new event loops. The "
"default policy can be :ref:`replaced <asyncio-policy-get-set>` with :ref:"
"`built-in alternatives <asyncio-policy-builtin>` to use different event loop "
"implementations, or substituted by a :ref:`custom policy <asyncio-custom-"
"policies>` that can override these behaviors."
msgstr ""
"Политика цикла событий — это глобальный объект, используемый для получения и "
"установки текущего цикла событий <asyncio-event-loop>`, а также для создания "
"новых циклов событий. Политику по умолчанию можно :ref:`заменить <asyncio-"
"policy-get-set>` на :ref:`встроенные альтернативы <asyncio-policy-builtin>` "
"для использования различных реализаций цикла событий или заменить :ref :"
"`custom policy <asyncio-custom-policies>`, которая может переопределить это "
"поведение."

#: ../../library/asyncio-policy.rst:19
msgid ""
"The :ref:`policy object <asyncio-policy-objects>` gets and sets a separate "
"event loop per *context*. This is per-thread by default, though custom "
"policies could define *context* differently."
msgstr ""
"Объект политики <asyncio-policy-objects>` получает и устанавливает отдельный "
"цикл событий для каждого *контекста*. По умолчанию это делается для каждого "
"потока, хотя пользовательские политики могут определять *контекст* по-"
"другому."

#: ../../library/asyncio-policy.rst:24
msgid ""
"Custom event loop policies can control the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop`."
msgstr ""
"Пользовательские политики цикла событий могут контролировать поведение :func:"
"`get_event_loop`, :func:`set_event_loop` и :func:`new_event_loop`."

#: ../../library/asyncio-policy.rst:27
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""
"Объекты политики должны реализовывать API, определенные в абстрактном "
"базовом классе :class:`AbstractEventLoopPolicy`."

#: ../../library/asyncio-policy.rst:34
msgid "Getting and Setting the Policy"
msgstr "Получение и настройка политики"

#: ../../library/asyncio-policy.rst:36
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""
"Следующие функции можно использовать для получения и установки политики для "
"текущего процесса:"

#: ../../library/asyncio-policy.rst:41
msgid "Return the current process-wide policy."
msgstr "Верните текущую политику всего процесса."

#: ../../library/asyncio-policy.rst:45
msgid "Set the current process-wide policy to *policy*."
msgstr "Установите для текущей общепроцессной политики значение *policy*."

#: ../../library/asyncio-policy.rst:47
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""
"Если для *policy* установлено значение None, восстанавливается политика по "
"умолчанию."

#: ../../library/asyncio-policy.rst:53
msgid "Policy Objects"
msgstr "Объекты политик"

#: ../../library/asyncio-policy.rst:55
msgid "The abstract event loop policy base class is defined as follows:"
msgstr ""
"Базовый класс политики абстрактного цикла событий определяется следующим "
"образом:"

#: ../../library/asyncio-policy.rst:59
msgid "An abstract base class for asyncio policies."
msgstr "Абстрактный базовый класс для политик asyncio."

#: ../../library/asyncio-policy.rst:63
msgid "Get the event loop for the current context."
msgstr "Получите цикл событий для текущего контекста."

#: ../../library/asyncio-policy.rst:65
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""
"Возвращает объект цикла событий, реализующий интерфейс :class:"
"`AbstractEventLoop`."

#: ../../library/asyncio-policy.rst:68 ../../library/asyncio-policy.rst:80
msgid "This method should never return ``None``."
msgstr "Этот метод никогда не должен возвращать None."

#: ../../library/asyncio-policy.rst:74
msgid "Set the event loop for the current context to *loop*."
msgstr "Установите цикл событий для текущего контекста на *loop*."

#: ../../library/asyncio-policy.rst:78
msgid "Create and return a new event loop object."
msgstr "Создайте и верните новый объект цикла событий."

#: ../../library/asyncio-policy.rst:84
msgid "Get a child process watcher object."
msgstr "Получите объект наблюдателя дочерних процессов."

#: ../../library/asyncio-policy.rst:86
msgid ""
"Return a watcher object implementing the :class:`AbstractChildWatcher` "
"interface."
msgstr ""
"Возвращает объект-наблюдатель, реализующий интерфейс :class:"
"`AbstractChildWatcher`."

#: ../../library/asyncio-policy.rst:89 ../../library/asyncio-policy.rst:95
msgid "This function is Unix specific."
msgstr "Эта функция специфична для Unix."

#: ../../library/asyncio-policy.rst:93
msgid "Set the current child process watcher to *watcher*."
msgstr "Установите наблюдателя текущего дочернего процесса на *watcher*."

#: ../../library/asyncio-policy.rst:100
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio поставляется со следующими встроенными политиками:"

#: ../../library/asyncio-policy.rst:105
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on Unix and :"
"class:`ProactorEventLoop` on Windows."
msgstr ""
"Политика asyncio по умолчанию. Использует :class:`SelectorEventLoop` в Unix "
"и :class:`ProactorEventLoop` в Windows."

#: ../../library/asyncio-policy.rst:108
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""
"Нет необходимости устанавливать политику по умолчанию вручную. asyncio "
"настроен на автоматическое использование политики по умолчанию."

#: ../../library/asyncio-policy.rst:113
msgid "On Windows, :class:`ProactorEventLoop` is now used by default."
msgstr "В Windows :class:`ProactorEventLoop` теперь используется по умолчанию."

#: ../../library/asyncio-policy.rst:116
msgid ""
"In Python versions 3.10.9, 3.11.1 and 3.12 the :meth:`get_event_loop` method "
"of the default asyncio policy emits a :exc:`DeprecationWarning` if there is "
"no running event loop and no current loop is set. In some future Python "
"release this will become an error."
msgstr ""

#: ../../library/asyncio-policy.rst:124
msgid ""
"An alternative event loop policy that uses the :class:`SelectorEventLoop` "
"event loop implementation."
msgstr ""
"Альтернативная политика цикла событий, использующая реализацию цикла "
"событий :class:`SelectorEventLoop`."

#: ../../library/asyncio-policy.rst:127 ../../library/asyncio-policy.rst:135
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`Availability <availability>`: Windows."

#: ../../library/asyncio-policy.rst:132
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""
"Альтернативная политика цикла событий, использующая реализацию цикла "
"событий :class:`ProactorEventLoop`."

#: ../../library/asyncio-policy.rst:141
msgid "Process Watchers"
msgstr "Наблюдатели за процессом"

#: ../../library/asyncio-policy.rst:143
msgid ""
"A process watcher allows customization of how an event loop monitors child "
"processes on Unix. Specifically, the event loop needs to know when a child "
"process has exited."
msgstr ""
"Наблюдатель процессов позволяет настроить способ мониторинга дочерних "
"процессов в Unix с помощью цикла событий. В частности, цикл событий должен "
"знать, когда дочерний процесс завершился."

#: ../../library/asyncio-policy.rst:147
msgid ""
"In asyncio, child processes are created with :func:`create_subprocess_exec` "
"and :meth:`loop.subprocess_exec` functions."
msgstr ""
"В asyncio дочерние процессы создаются с помощью функций :func:"
"`create_subprocess_exec` и :meth:`loop.subprocess_exec`."

#: ../../library/asyncio-policy.rst:151
msgid ""
"asyncio defines the :class:`AbstractChildWatcher` abstract base class, which "
"child watchers should implement, and has four different implementations: :"
"class:`ThreadedChildWatcher` (configured to be used by default), :class:"
"`MultiLoopChildWatcher`, :class:`SafeChildWatcher`, and :class:"
"`FastChildWatcher`."
msgstr ""
"asyncio определяет абстрактный базовый класс :class:`AbstractChildWatcher`, "
"который должны реализовать наблюдатели за детьми, и имеет четыре различных "
"реализации: :class:`ThreadedChildWatcher` (настроен для использования по "
"умолчанию), :class:`MultiLoopChildWatcher`, :class: `SafeChildWatcher` и :"
"class:`FastChildWatcher`."

#: ../../library/asyncio-policy.rst:157
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
"См. также раздел :ref:`Подпроцесс и потоки <asyncio-subprocess-threads>`."

#: ../../library/asyncio-policy.rst:160
msgid ""
"The following two functions can be used to customize the child process "
"watcher implementation used by the asyncio event loop:"
msgstr ""
"Следующие две функции можно использовать для настройки реализации "
"наблюдателя дочерних процессов, используемой циклом событий asyncio:"

#: ../../library/asyncio-policy.rst:165
msgid "Return the current child watcher for the current policy."
msgstr "Возвращает текущего дочернего наблюдателя для текущей политики."

#: ../../library/asyncio-policy.rst:169
msgid ""
"Set the current child watcher to *watcher* for the current policy.  "
"*watcher* must implement methods defined in the :class:"
"`AbstractChildWatcher` base class."
msgstr ""
"Установите для текущего дочернего наблюдателя значение *watcher* для текущей "
"политики. *watcher* должен реализовывать методы, определенные в базовом "
"классе :class:`AbstractChildWatcher`."

#: ../../library/asyncio-policy.rst:174
msgid ""
"Third-party event loops implementations might not support custom child "
"watchers.  For such event loops, using :func:`set_child_watcher` might be "
"prohibited or have no effect."
msgstr ""
"Сторонние реализации циклов событий могут не поддерживать пользовательские "
"дочерние наблюдатели. Для таких циклов событий использование :func:"
"`set_child_watcher` может быть запрещено или не иметь никакого эффекта."

#: ../../library/asyncio-policy.rst:182
msgid "Register a new child handler."
msgstr "Зарегистрируйте новый дочерний обработчик."

#: ../../library/asyncio-policy.rst:184
msgid ""
"Arrange for ``callback(pid, returncode, *args)`` to be called when a process "
"with PID equal to *pid* terminates.  Specifying another callback for the "
"same process replaces the previous handler."
msgstr ""
"Организуйте вызов ``callback(pid, returncode, *args)``, когда процесс с PID, "
"равным *pid*, завершается. Указание другого обратного вызова для того же "
"процесса заменяет предыдущий обработчик."

#: ../../library/asyncio-policy.rst:189
msgid "The *callback* callable must be thread-safe."
msgstr "Вызываемая функция *callback* должна быть потокобезопасной."

#: ../../library/asyncio-policy.rst:193
msgid "Removes the handler for process with PID equal to *pid*."
msgstr "Удаляет обработчик процесса с PID, равным *pid*."

#: ../../library/asyncio-policy.rst:195
msgid ""
"The function returns ``True`` if the handler was successfully removed, "
"``False`` if there was nothing to remove."
msgstr ""
"Функция возвращает True, если обработчик был успешно удален, и False, если "
"удалять нечего."

#: ../../library/asyncio-policy.rst:200
msgid "Attach the watcher to an event loop."
msgstr "Присоедините наблюдателя к циклу событий."

#: ../../library/asyncio-policy.rst:202
msgid ""
"If the watcher was previously attached to an event loop, then it is first "
"detached before attaching to the new loop."
msgstr ""
"Если наблюдатель ранее был подключен к циклу событий, то перед подключением "
"к новому циклу он сначала отключается."

#: ../../library/asyncio-policy.rst:205
msgid "Note: loop may be ``None``."
msgstr "Примечание: цикл может иметь значение «Нет»."

#: ../../library/asyncio-policy.rst:209
msgid "Return ``True`` if the watcher is ready to use."
msgstr "Верните True, если наблюдатель готов к использованию."

#: ../../library/asyncio-policy.rst:211
msgid ""
"Spawning a subprocess with *inactive* current child watcher raises :exc:"
"`RuntimeError`."
msgstr ""
"Порождение подпроцесса с *неактивным* текущим дочерним наблюдателем "
"вызывает :exc:`RuntimeError`."

#: ../../library/asyncio-policy.rst:218
msgid "Close the watcher."
msgstr "Закройте наблюдатель."

#: ../../library/asyncio-policy.rst:220
msgid ""
"This method has to be called to ensure that underlying resources are cleaned-"
"up."
msgstr ""
"Этот метод необходимо вызвать, чтобы гарантировать очистку базовых ресурсов."

#: ../../library/asyncio-policy.rst:225
msgid ""
"This implementation starts a new waiting thread for every subprocess spawn."
msgstr ""
"Эта реализация запускает новый поток ожидания для каждого запуска "
"подпроцесса."

#: ../../library/asyncio-policy.rst:227
msgid ""
"It works reliably even when the asyncio event loop is run in a non-main OS "
"thread."
msgstr ""
"Он работает надежно, даже если цикл событий asyncio запускается в неосновном "
"потоке ОС."

#: ../../library/asyncio-policy.rst:229
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates), but starting a thread per process "
"requires extra memory."
msgstr ""

#: ../../library/asyncio-policy.rst:232
msgid "This watcher is used by default."
msgstr "Этот наблюдатель используется по умолчанию."

#: ../../library/asyncio-policy.rst:238
msgid ""
"This implementation registers a :py:data:`SIGCHLD` signal handler on "
"instantiation. That can break third-party code that installs a custom "
"handler for :py:data:`SIGCHLD` signal."
msgstr ""
"Эта реализация регистрирует обработчик сигнала :py:data:`SIGCHLD` при "
"создании экземпляра. Это может привести к поломке стороннего кода, который "
"устанавливает собственный обработчик для сигнала :py:data:`SIGCHLD`."

#: ../../library/asyncio-policy.rst:242 ../../library/asyncio-policy.rst:260
msgid ""
"The watcher avoids disrupting other code spawning processes by polling every "
"process explicitly on a :py:data:`SIGCHLD` signal."
msgstr ""
"Наблюдатель избегает нарушения других процессов создания кода, явно "
"опрашивая каждый процесс по сигналу :py:data:`SIGCHLD`."

#: ../../library/asyncio-policy.rst:245
msgid ""
"There is no limitation for running subprocesses from different threads once "
"the watcher is installed."
msgstr ""
"После установки наблюдателя нет ограничений на запуск подпроцессов из разных "
"потоков."

#: ../../library/asyncio-policy.rst:248
msgid ""
"The solution is safe but it has a significant overhead when handling a big "
"number of processes (*O(n)* each time a :py:data:`SIGCHLD` is received)."
msgstr ""

#: ../../library/asyncio-policy.rst:256
msgid ""
"This implementation uses active event loop from the main thread to handle :"
"py:data:`SIGCHLD` signal. If the main thread has no running event loop "
"another thread cannot spawn a subprocess (:exc:`RuntimeError` is raised)."
msgstr ""
"Эта реализация использует активный цикл событий из основного потока для "
"обработки сигнала :py:data:`SIGCHLD`. Если в основном потоке нет работающего "
"цикла событий, другой поток не может запустить подпроцесс (возникает:exc:"
"`RuntimeError`)."

#: ../../library/asyncio-policy.rst:263
msgid ""
"This solution is as safe as :class:`MultiLoopChildWatcher` and has the same "
"*O(N)* complexity but requires a running event loop in the main thread to "
"work."
msgstr ""

#: ../../library/asyncio-policy.rst:268
msgid ""
"This implementation reaps every terminated processes by calling ``os."
"waitpid(-1)`` directly, possibly breaking other code spawning processes and "
"waiting for their termination."
msgstr ""
"Эта реализация извлекает все завершенные процессы путем прямого вызова ``os."
"waitpid(-1)``, возможно, прерывая другие процессы, порождающие код, и ожидая "
"их завершения."

#: ../../library/asyncio-policy.rst:272
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates)."
msgstr ""

#: ../../library/asyncio-policy.rst:275
msgid ""
"This solution requires a running event loop in the main thread to work, as :"
"class:`SafeChildWatcher`."
msgstr ""
"Для работы этого решения требуется работающий цикл событий в основном "
"потоке, как :class:`SafeChildWatcher`."

#: ../../library/asyncio-policy.rst:280
msgid ""
"This implementation polls process file descriptors (pidfds) to await child "
"process termination. In some respects, :class:`PidfdChildWatcher` is a "
"\"Goldilocks\" child watcher implementation. It doesn't require signals or "
"threads, doesn't interfere with any processes launched outside the event "
"loop, and scales linearly with the number of subprocesses launched by the "
"event loop. The main disadvantage is that pidfds are specific to Linux, and "
"only work on recent (5.3+) kernels."
msgstr ""
"Эта реализация опрашивает дескрипторы файлов процессов (pidfds) в ожидании "
"завершения дочернего процесса. В некотором смысле :class:`PidfdChildWatcher` "
"является реализацией наблюдателя за детьми типа \"Златовласка\". Он не "
"требует сигналов или потоков, не мешает никаким процессам, запускаемым вне "
"цикла событий, и линейно масштабируется в зависимости от количества "
"подпроцессов, запускаемых циклом событий. Основным недостатком является то, "
"что pidfds специфичны для Linux и работают только с последними ядрами (5.3+)."

#: ../../library/asyncio-policy.rst:294
msgid "Custom Policies"
msgstr "Пользовательские политики"

#: ../../library/asyncio-policy.rst:296
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""
"Чтобы реализовать новую политику цикла событий, рекомендуется создать "
"подкласс :class:`DefaultEventLoopPolicy` и переопределить методы, для "
"которых требуется пользовательское поведение, например::"
