# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/2to3.rst:4
msgid "2to3 --- Automated Python 2 to 3 code translation"
msgstr "2to3 --- Автоматический перевод кода Python 2 на 3."

#: ../../library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard "
"library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3."
msgstr ""
"2to3 - это программа на Python, которая считывает исходный код на Python 2.x "
"и применяет ряд исправлений, чтобы преобразовать его в корректный код на "
"Python 3.x. Стандартная библиотека содержит богатый набор исправлений, "
"которые будут обрабатывать практически весь код. Поддерживающая библиотека "
"2to3 :mod:`lib2to3`, однако, является гибкой и универсальной, поэтому для "
"нее можно написать свои собственные исправления."

#: ../../library/2to3.rst:18
msgid "Using 2to3"
msgstr "Использование 2to3"

#: ../../library/2to3.rst:20
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""
"2to3 обычно устанавливается вместе с интерпретатором Python в виде сценария. "
"Он также находится в каталоге :file:`Tools/scripts` в корне Python."

#: ../../library/2to3.rst:23
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The "
"directories are recursively traversed for Python sources."
msgstr ""
"Основные аргументы 2to3 — это список файлов или каталогов для "
"преобразования. Каталоги рекурсивно просматриваются в поисках источников "
"Python."

#: ../../library/2to3.rst:26
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr "Вот пример исходного файла Python 2.x: :file:`example.py`::"

#: ../../library/2to3.rst:34
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr ""
"Его можно преобразовать в код Python 3.x с помощью 2to3 в командной строке:"

#: ../../library/2to3.rst:40
msgid ""
"A diff against the original source file is printed.  2to3 can also write the "
"needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""
"Распечатывается разница с исходным файлом. 2to3 также может записать "
"необходимые изменения обратно в исходный файл. (Создается резервная копия "
"исходного файла, если также не указан :option:`!-n`.) Обратная запись "
"изменений включается с помощью флага :option:`!-w`:"

#: ../../library/2to3.rst:49
msgid "After transformation, :file:`example.py` looks like this::"
msgstr "После преобразования :file:`example.py` выглядит так::"

#: ../../library/2to3.rst:57
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr ""
"Комментарии и точные отступы сохраняются на протяжении всего процесса "
"перевода."

#: ../../library/2to3.rst:59
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :"
"option:`!-l` flag lists all available fixers.  An explicit set of fixers to "
"run can be given with :option:`!-f`.  Likewise the :option:`!-x` explicitly "
"disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""
"По умолчанию 2to3 запускает набор :ref:`предопределенных фиксаторов <2to3-"
"fixers>`. Флаг :option:`!-l` перечисляет все доступные исправления. Явный "
"набор исправлений для запуска можно задать с помощью :option:`!-f`. "
"Аналогично, :option:`!-x` явно отключает средство исправления. В следующем "
"примере запускаются только фиксаторы imports и has_key:"

#: ../../library/2to3.rst:68
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr "Эта команда запускает все исправления, кроме исправления ``apply``:"

#: ../../library/2to3.rst:74
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""
"Некоторые исправления являются *явными*, то есть они не запускаются по "
"умолчанию и должны быть указаны в командной строке для запуска. Здесь, в "
"дополнение к фиксерам по умолчанию, запускается фиксер ``idioms``:"

#: ../../library/2to3.rst:82
msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""
"Обратите внимание, как передача ``all`` включает все исправления по "
"умолчанию."

#: ../../library/2to3.rst:84
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a "
"warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""
"Иногда 2to3 находит место в исходном коде, которое необходимо изменить, но "
"2to3 не может исправить это автоматически. В этом случае 2to3 выведет "
"предупреждение под различием файла. Вам следует устранить это "
"предупреждение, чтобы иметь код, совместимый с версией 3.x."

#: ../../library/2to3.rst:89
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d` "
"flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""
"2to3 также может реорганизовать документацию. Чтобы включить этот режим, "
"используйте флаг :option:`!-d`. Обратите внимание, что рефакторингу будут "
"подвергаться *только* документы. Это также не требует, чтобы модуль был "
"действительным Python. Например, примеры, подобные doctest, в документе reST "
"также могут быть реорганизованы с помощью этой опции."

#: ../../library/2to3.rst:94
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ""
"Опция :option:`!-v` включает вывод дополнительной информации о процессе "
"перевода."

#: ../../library/2to3.rst:97
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret :func:"
"`print` as a function.  This change can also be enabled manually with the :"
"option:`!-p` flag.  Use :option:`!-p` to run fixers on code that already has "
"had its print statements converted. Also :option:`!-e` can be used to make :"
"func:`exec` a function."
msgstr ""
"Поскольку некоторые операторы печати могут быть проанализированы как вызовы "
"функций или операторы, 2to3 не всегда может читать файлы, содержащие функцию "
"печати. Когда 2to3 обнаруживает наличие директивы компилятора from "
"__future__ import print_function, он изменяет свою внутреннюю грамматику, "
"чтобы интерпретировать :func:`print` как функцию. Это изменение также можно "
"включить вручную с помощью флага :option:`!-p`. Используйте :option:`!-p` "
"для запуска исправлений в коде, операторы печати которого уже преобразованы. "
"Также :option:`!-e` можно использовать для создания :func:`exec` функции."

#: ../../library/2to3.rst:105
msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification of "
"an alternate directory for processed output files to be written to.  The :"
"option:`!-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""
"Опция :option:`!-o` или :option:`!--output-dir` позволяет указать "
"альтернативный каталог для записи обработанных выходных файлов. Флаг :option:"
"`!-n` необходим при его использовании, поскольку файлы резервных копий не "
"имеют смысла, если входные файлы не перезаписываются."

#: ../../library/2to3.rst:110
msgid "The :option:`!-o` option was added."
msgstr "Добавлена ​​опция :option:`!-o`."

#: ../../library/2to3.rst:113
msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`!-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`!-w` flag as it would not make sense otherwise."
msgstr ""
"Флаг :option:`!-W` или :option:`!--write-unchanged-files` указывает 2to3 "
"всегда записывать выходные файлы, даже если в файл не требуется никаких "
"изменений. Это наиболее полезно с :option:`!-o`, так что все дерево "
"исходного кода Python копируется с переводом из одного каталога в другой. "
"Эта опция подразумевает наличие флага :option:`!-w`, поскольку в противном "
"случае это не имело бы смысла."

#: ../../library/2to3.rst:119
msgid "The :option:`!-W` flag was added."
msgstr "Был добавлен флаг :option:`!-W`."

#: ../../library/2to3.rst:122
msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying this "
"as backups are not necessary when writing to different filenames.  Example:"
msgstr ""
"Опция :option:`!--add-suffix` указывает строку, добавляемую ко всем именам "
"выходных файлов. При указании этого параметра требуется флаг :option:`!-n`, "
"поскольку резервное копирование не требуется при записи в файлы с разными "
"именами. Пример:"

#: ../../library/2to3.rst:130
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr "Приведёт к записи преобразованного файла с именем ``example.py3``."

#: ../../library/2to3.rst:132
msgid "The :option:`!--add-suffix` option was added."
msgstr "Добавлена ​​опция :option:`!--add-suffix`."

#: ../../library/2to3.rst:135
msgid "To translate an entire project from one directory tree to another use:"
msgstr ""
"Чтобы перевести весь проект из одного дерева каталогов в другое, используйте:"

#: ../../library/2to3.rst:145
msgid "Fixers"
msgstr "Фиксаторы"

#: ../../library/2to3.rst:147
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""
"Каждый шаг преобразования кода инкапсулируется в фиксаторе. Команда ``2to3 -"
"l`` выводит их список. Как описано выше <2to3-using>`, каждый из них можно "
"включать и выключать индивидуально. Более подробно они описаны здесь."

#: ../../library/2to3.rst:154
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""
"Удаляет использование :func:`apply`. Например, ``apply(function, *args, "
"**kwargs)`` преобразуется в ``function(*args, **kwargs)``."

#: ../../library/2to3.rst:159
msgid "Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr "Заменяет устаревшие имена методов :mod:`unittest` на правильные."

#: ../../library/2to3.rst:162 ../../library/2to3.rst:351
msgid "From"
msgstr "Из"

#: ../../library/2to3.rst:162 ../../library/2to3.rst:351
msgid "To"
msgstr "В"

#: ../../library/2to3.rst:164
msgid "``failUnlessEqual(a, b)``"
msgstr "``failUnlessEqual(a, b)``"

#: ../../library/2to3.rst:164 ../../library/2to3.rst:166
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"

#: ../../library/2to3.rst:166
msgid "``assertEquals(a, b)``"
msgstr "``assertEquals(a, b)``"

#: ../../library/2to3.rst:168
msgid "``failIfEqual(a, b)``"
msgstr "``failIfEqual(a, b)``"

#: ../../library/2to3.rst:168 ../../library/2to3.rst:170
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"

#: ../../library/2to3.rst:170
msgid "``assertNotEquals(a, b)``"
msgstr "``assertNotEquals(a, b)``"

#: ../../library/2to3.rst:172
msgid "``failUnless(a)``"
msgstr "``failUnless(a)``"

#: ../../library/2to3.rst:172 ../../library/2to3.rst:174
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"

#: ../../library/2to3.rst:174
msgid "``assert_(a)``"
msgstr "``assert_(a)``"

#: ../../library/2to3.rst:176
msgid "``failIf(a)``"
msgstr "``failIf(a)``"

#: ../../library/2to3.rst:176
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"

#: ../../library/2to3.rst:178
msgid "``failUnlessRaises(exc, cal)``"
msgstr "``failUnlessRaises(exc, cal)``"

#: ../../library/2to3.rst:178
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"

#: ../../library/2to3.rst:180
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr "``failUnlessAlmostEqual(a, b)``"

#: ../../library/2to3.rst:180 ../../library/2to3.rst:182
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"

#: ../../library/2to3.rst:182
msgid "``assertAlmostEquals(a, b)``"
msgstr "``assertAlmostEquals(a, b)``"

#: ../../library/2to3.rst:184
msgid "``failIfAlmostEqual(a, b)``"
msgstr "``failIfAlmostEqual(a, b)``"

#: ../../library/2to3.rst:184 ../../library/2to3.rst:186
msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"

#: ../../library/2to3.rst:186
msgid "``assertNotAlmostEquals(a, b)``"
msgstr "``assertNotAlmostEquals(a, b)``"

#: ../../library/2to3.rst:192
msgid "Converts :class:`basestring` to :class:`str`."
msgstr "Преобразует :class:`basestring` в :class:`str`."

#: ../../library/2to3.rst:196
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""
"Преобразует :class:`buffer` в :class:`memoryview`. Это исправление "
"необязательно, поскольку API :class:`memoryview` похож, но не совсем такой "
"же, как у :class:`buffer`."

#: ../../library/2to3.rst:202
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :"
"meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:"
"`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted "
"respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict."
"values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict."
"keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""
"Исправлены методы итерации по словарю. :meth:`dict.iteritems` преобразуется "
"в :meth:`dict.items`, :meth:`dict.iterkeys` - в :meth:`dict.keys`, а :meth:"
"`dict.itervalues` - в :meth:`dict.values`. Аналогично, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` и :meth:`dict.viewvalues` преобразуются "
"соответственно в :meth:`dict.items`, :meth:`dict.keys` и :meth:`dict."
"values`. Он также переносит существующие способы использования :meth:`dict."
"items`, :meth:`dict.keys` и :meth:`dict.values` в вызов :class:`list`."

#: ../../library/2to3.rst:212
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "Преобразует ``кроме X, T`` в ``кроме X как T``."

#: ../../library/2to3.rst:216
msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr "Преобразует инструкцию ``exec`` в функцию :func:`exec`."

#: ../../library/2to3.rst:220
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""
"Устраняет использование :func:`execfile`. Аргумент :func:`execfile` заключен "
"в вызовы :func:`open`, :func:`compile` и :func:`exec`."

#: ../../library/2to3.rst:225
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ""
"Изменяет назначение :attr:`sys.exitfunc` для использования модуля :mod:"
"`atexit`."

#: ../../library/2to3.rst:230
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr "Обертывает использование :func:`filter` в вызове :class:`list`."

#: ../../library/2to3.rst:234
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""
"Исправляет переименованные атрибуты функций. Например, ``my_function."
"func_closure`` преобразуется в ``my_function.__closure__``."

#: ../../library/2to3.rst:239
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr "Удаляет инструкции ``from __future__ import new_feature``."

#: ../../library/2to3.rst:243
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr "Переименовывает :func:`os.getcwdu` в :func:`os.getcwd`."

#: ../../library/2to3.rst:247
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "Изменяет ``dict.has_key(key)`` на ``key in dict``."

#: ../../library/2to3.rst:251
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of :"
"func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""
"Этот дополнительный фиксатор выполняет несколько преобразований, которые "
"делают код Python более идиоматичным. Сравнения типов, такие как ``type(x) "
"is SomeClass`` и ``type(x) == SomeClass``, преобразуются в ``isinstance(x, "
"SomeClass)``. `` while 1`` становится `` while True``. Этот фиксатор также "
"пытается использовать :func:`sorted` в соответствующих местах. Например, "
"этот блок::"

#: ../../library/2to3.rst:260
msgid "is changed to ::"
msgstr "меняется на ::"

#: ../../library/2to3.rst:266
msgid "Detects sibling imports and converts them to relative imports."
msgstr ""
"Обнаруживает одноуровневый импорт и преобразует его в относительный импорт."

#: ../../library/2to3.rst:270
msgid "Handles module renames in the standard library."
msgstr "Обрабатывает переименования модулей в стандартной библиотеке."

#: ../../library/2to3.rst:274
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""
"Обрабатывает переименования других модулей стандартной библиотеки. Он "
"отделен от фиксатора :2to3fixer:`imports` только из-за технических "
"ограничений."

#: ../../library/2to3.rst:279
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr "Преобразует ``input(приглашение)`` в ``eval(ввод(приглашение))``."

#: ../../library/2to3.rst:283
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr "Преобразует :func:`intern` в :func:`sys.intern`."

#: ../../library/2to3.rst:287
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""
"Исправляет повторяющиеся типы во втором аргументе :func:`isinstance`. "
"Например, ``isinstance(x, (int, int))`` преобразуется в ``isinstance(x, "
"int)``, а ``isinstance(x, (int, float, int))`` преобразуется в "
"``isinstance(x, (int, float))``."

#: ../../library/2to3.rst:294
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""
"Удаляет импорт :func:`itertools.ifilter`, :func:`itertools.izip` и :func:"
"`itertools.imap`. Импорт :func:`itertools.ifilterfalse` также изменяется на :"
"func:`itertools.filterfalse`."

#: ../../library/2to3.rst:300
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap` to their built-in equivalents. :func:`itertools."
"ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""
"Изменяет использование :func:`itertools.ifilter`, :func:`itertools.izip` и :"
"func:`itertools.imap` на их встроенные эквиваленты. :func:`itertools."
"ifilterfalse` изменен на :func:`itertools.filterfalse`."

#: ../../library/2to3.rst:306
msgid "Renames :class:`long` to :class:`int`."
msgstr "Переименовывает :class:`long` в :class:`int`."

#: ../../library/2to3.rst:310
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` "
"to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""
"Обертывает :func:`map` в вызов :class:`list`. Он также меняет ``map(None, "
"x)`` на ``list(x)``. Использование карты импорта from Future_builtins "
"отключает этот фиксатор."

#: ../../library/2to3.rst:316
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"Преобразует старый синтаксис метакласса (``__metaclass__ = Meta`` в теле "
"класса) в новый (``class X(metaclass=Meta)``)."

#: ../../library/2to3.rst:321
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""
"Исправляет старые имена атрибутов метода. Например, ``meth.im_func`` "
"преобразуется в ``meth.__func__``."

#: ../../library/2to3.rst:326
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr "Преобразует старый синтаксис неравенства ``<>`` в ``!=``."

#: ../../library/2to3.rst:330
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the :func:"
"`next` function.  It also renames :meth:`next` methods to :meth:`~iterator."
"__next__`."
msgstr ""
"Преобразует использование методов итератора :meth:`~iterator.next` в "
"функцию :func:`next`. Он также переименовывает методы :meth:`next` в :meth:"
"`~iterator.__next__`."

#: ../../library/2to3.rst:336
msgid ""
"Renames definitions of methods called :meth:`__nonzero__` to :meth:`~object."
"__bool__`."
msgstr ""
"Переименовывает определения методов с именем :meth:`__nonzero__` в :meth:"
"`~object.__bool__`."

#: ../../library/2to3.rst:341
msgid "Converts octal literals into the new syntax."
msgstr "Преобразует восьмеричные литералы в новый синтаксис."

#: ../../library/2to3.rst:345
msgid ""
"Converts calls to various functions in the :mod:`operator` module to other, "
"but equivalent, function calls.  When needed, the appropriate ``import`` "
"statements are added, e.g. ``import collections.abc``.  The following "
"mapping are made:"
msgstr ""
"Преобразует вызовы различных функций в модуле :mod:`operator` в другие, но "
"эквивалентные вызовы функций. При необходимости добавляются соответствующие "
"операторы импорта, например, импорт коллекций.abc. Выполняется следующее "
"картографирование:"

#: ../../library/2to3.rst:353
msgid "``operator.isCallable(obj)``"
msgstr "``operator.isCallable(obj)``"

#: ../../library/2to3.rst:353
msgid "``callable(obj)``"
msgstr "``callable(obj)``"

#: ../../library/2to3.rst:354
msgid "``operator.sequenceIncludes(obj)``"
msgstr "``operator.sequenceIncludes(obj)``"

#: ../../library/2to3.rst:354
msgid "``operator.contains(obj)``"
msgstr "``operator.contains(obj)``"

#: ../../library/2to3.rst:355
msgid "``operator.isSequenceType(obj)``"
msgstr "``operator.isSequenceType(obj)``"

#: ../../library/2to3.rst:355
msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr "``isinstance(obj, collections.abc.Sequence)``"

#: ../../library/2to3.rst:356
msgid "``operator.isMappingType(obj)``"
msgstr "``operator.isMappingType(obj)``"

#: ../../library/2to3.rst:356
msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr "``isinstance(obj, collections.abc.Mapping)``"

#: ../../library/2to3.rst:357
msgid "``operator.isNumberType(obj)``"
msgstr "``operator.isNumberType(obj)``"

#: ../../library/2to3.rst:357
msgid "``isinstance(obj, numbers.Number)``"
msgstr "``isinstance(obj, numbers.Number)``"

#: ../../library/2to3.rst:358
msgid "``operator.repeat(obj, n)``"
msgstr "``operator.repeat(obj, n)``"

#: ../../library/2to3.rst:358
msgid "``operator.mul(obj, n)``"
msgstr "``operator.mul(obj, n)``"

#: ../../library/2to3.rst:359
msgid "``operator.irepeat(obj, n)``"
msgstr "``operator.irepeat(obj, n)``"

#: ../../library/2to3.rst:359
msgid "``operator.imul(obj, n)``"
msgstr "``operator.imul(obj, n)``"

#: ../../library/2to3.rst:364
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""
"Добавьте дополнительные круглые скобки там, где они необходимы при включении "
"списка. Например, ``[x для x в 1, 2]`` становится ``[x для x в (1, 2)]``."

#: ../../library/2to3.rst:369
msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr "Преобразует оператор print в функцию :func:`print`."

#: ../../library/2to3.rst:373
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in 3.0."
msgstr ""
"Преобразует ``raise E, V`` в ``raise E(V)``, а ``raise E, V, T`` в ``raise "
"E(V).with_traceback(T)``. Если ``E`` является кортежем, перевод будет "
"неправильным, поскольку замена исключений кортежами была удалена в версии "
"3.0."

#: ../../library/2to3.rst:379
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr "Преобразует :func:`raw_input` в :func:`input`."

#: ../../library/2to3.rst:383
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr "Обрабатывает перемещение :func:`reduce` в :func:`functools.reduce`."

#: ../../library/2to3.rst:387
msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr "Преобразует :func:`reload` в :func:`importlib.reload`."

#: ../../library/2to3.rst:391
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr "Изменяется :data:`sys.maxint` на :data:`sys.maxsize`."

#: ../../library/2to3.rst:395
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr "Заменяет повтор обратного кавычка на функцию :func:`repr`."

#: ../../library/2to3.rst:399
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ""
"Заменяет использование конструктора :class:`set` на набор литералов. Этот "
"фиксатор не является обязательным."

#: ../../library/2to3.rst:404
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr "Переименовывает :exc:`StandardError` в :exc:`Exception`."

#: ../../library/2to3.rst:408
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:"
"`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""
"Заменяет устаревшие :data:`sys.exc_value`, :data:`sys.exc_type`, :data:`sys."
"exc_traceback` на использование :func:`sys.exc_info`."

#: ../../library/2to3.rst:413
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr "Исправляет изменение API в методе :meth:`throw` генератора."

#: ../../library/2to3.rst:417
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr ""
"Удаляет неявную распаковку параметров кортежа. Этот фиксатор вставляет "
"временные переменные."

#: ../../library/2to3.rst:422
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ""
"Исправляет код, поврежденный из-за удаления некоторых членов в модуле :mod:"
"`types`."

#: ../../library/2to3.rst:427
msgid "Renames :class:`unicode` to :class:`str`."
msgstr "Переименовывает :class:`unicode` в :class:`str`."

#: ../../library/2to3.rst:431
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ""
"Обрабатывает переименование :mod:`urllib` и :mod:`urllib2` в пакет :mod:"
"`urllib`."

#: ../../library/2to3.rst:436
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr ""
"Удаляет лишние пробелы из элементов, разделенных запятыми. Этот фиксатор не "
"является обязательным."

#: ../../library/2to3.rst:441
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""
"Переименовывает :func:`xrange` в :func:`range` и оборачивает существующие "
"вызовы :func:`range` в :class:`list`."

#: ../../library/2to3.rst:446
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr "Изменяет ``for x in file.xreadlines()`` на ``for x in file``."

#: ../../library/2to3.rst:450
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""
"Обертывает использование :func:`zip` в вызов :class:`list`. Это отключено, "
"когда появляется ``from Future_builtins import zip``."

#: ../../library/2to3.rst:455
msgid ":mod:`lib2to3` --- 2to3's library"
msgstr ":mod:`lib2to3` --- библиотека 2to3"

#: ../../library/2to3.rst:464
msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr "**Исходный код:** :source:`Lib/lib2to3/`"

#: ../../library/2to3.rst:477
msgid ""
"Python 3.9 switched to a PEG parser (see :pep:`617`) while lib2to3 is using "
"a less flexible LL(1) parser.  Python 3.10 includes new language syntax that "
"is not parsable by lib2to3's LL(1) parser (see :pep:`634`). The ``lib2to3`` "
"module was marked pending for deprecation in Python 3.9 (raising :exc:"
"`PendingDeprecationWarning` on import) and fully deprecated in Python 3.11 "
"(raising :exc:`DeprecationWarning`). It will be removed from the standard "
"library in Python 3.13. Consider third-party alternatives such as `LibCST`_ "
"or `parso`_."
msgstr ""
"Python 3.9 перешёл на парсер PEG (см. :pep:`617`), тогда как lib2to3 "
"использует менее гибкий парсер LL(1). Python 3.10 включает новый синтаксис "
"языка, который не анализируется синтаксическим анализатором LL(1) lib2to3 "
"(см. :pep:`634`). Модуль ``lib2to3`` был отмечен как ожидающий прекращения "
"поддержки в Python 3.9 (вызывая :exc:`PendingDeprecationWarning` при "
"импорте) и полностью устарел в Python 3.11 (вызывая :exc:"
"`DeprecationWarning`). Он будет удален из стандартной библиотеки Python "
"3.13. Рассмотрите сторонние альтернативы, такие как `LibCST`_ или `parso`_."

#: ../../library/2to3.rst:480
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ""
"API :mod:`lib2to3` следует считать нестабильным и может радикально "
"измениться в будущем."
