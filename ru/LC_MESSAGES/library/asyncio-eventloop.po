# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-eventloop.rst:8
msgid "Event Loop"
msgstr "Цикл событий"

#: ../../library/asyncio-eventloop.rst:10
msgid ""
"**Source code:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"
msgstr ""
"**Исходный код:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"

#: ../../library/asyncio-eventloop.rst:16
msgid "Preface"
msgstr "Введение"

#: ../../library/asyncio-eventloop.rst:17
msgid ""
"The event loop is the core of every asyncio application. Event loops run "
"asynchronous tasks and callbacks, perform network IO operations, and run "
"subprocesses."
msgstr ""
"Цикл событий — это ядро ​​каждого асинхронного приложения. Циклы событий "
"запускают асинхронные задачи и обратные вызовы, выполняют сетевые операции "
"ввода-вывода и запускают подпроцессы."

#: ../../library/asyncio-eventloop.rst:21
msgid ""
"Application developers should typically use the high-level asyncio "
"functions, such as :func:`asyncio.run`, and should rarely need to reference "
"the loop object or call its methods.  This section is intended mostly for "
"authors of lower-level code, libraries, and frameworks, who need finer "
"control over the event loop behavior."
msgstr ""
"Разработчикам приложений обычно следует использовать функции asyncio "
"высокого уровня, такие как :func:`asyncio.run`, и им редко приходится "
"ссылаться на объект цикла или вызывать его методы. Этот раздел предназначен "
"в основном для авторов низкоуровневого кода, библиотек и фреймворков, "
"которым требуется более тонкий контроль над поведением цикла событий."

#: ../../library/asyncio-eventloop.rst:28
msgid "Obtaining the Event Loop"
msgstr "Получение цикла событий"

#: ../../library/asyncio-eventloop.rst:29
msgid ""
"The following low-level functions can be used to get, set, or create an "
"event loop:"
msgstr ""
"Следующие низкоуровневые функции можно использовать для получения, установки "
"или создания цикла событий:"

#: ../../library/asyncio-eventloop.rst:34
msgid "Return the running event loop in the current OS thread."
msgstr "Верните текущий цикл событий в текущий поток ОС."

#: ../../library/asyncio-eventloop.rst:36
msgid "Raise a :exc:`RuntimeError` if there is no running event loop."
msgstr "Вызовите :exc:`RuntimeError`, если нет текущего цикла событий."

#: ../../library/asyncio-eventloop.rst:38
msgid "This function can only be called from a coroutine or a callback."
msgstr "Эту функцию можно вызвать только из сопрограммы или обратного вызова."

#: ../../library/asyncio-eventloop.rst:44
msgid "Get the current event loop."
msgstr "Получить текущий цикл событий."

#: ../../library/asyncio-eventloop.rst:46
msgid ""
"When called from a coroutine or a callback (e.g. scheduled with call_soon or "
"similar API), this function will always return the running event loop."
msgstr ""
"При вызове из сопрограммы или обратного вызова (например, запланированного с "
"помощью call_soon или аналогичного API) эта функция всегда будет возвращать "
"текущий цикл событий."

#: ../../library/asyncio-eventloop.rst:50
msgid ""
"If there is no running event loop set, the function will return the result "
"of the ``get_event_loop_policy().get_event_loop()`` call."
msgstr ""
"Если не установлен текущий цикл событий, функция вернет результат вызова "
"``get_event_loop_policy().get_event_loop()``."

#: ../../library/asyncio-eventloop.rst:53
msgid ""
"Because this function has rather complex behavior (especially when custom "
"event loop policies are in use), using the :func:`get_running_loop` function "
"is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""
"Поскольку эта функция имеет довольно сложное поведение (особенно когда "
"используются пользовательские политики цикла событий), использование "
"функции :func:`get_running_loop` предпочтительнее, чем :func:"
"`get_event_loop` в сопрограммах и обратных вызовах."

#: ../../library/asyncio-eventloop.rst:58
msgid ""
"As noted above, consider using the higher-level :func:`asyncio.run` "
"function, instead of using these lower level functions to manually create "
"and close an event loop."
msgstr ""
"Как отмечалось выше, рассмотрите возможность использования функции :func:"
"`asyncio.run` более высокого уровня вместо использования этих функций более "
"низкого уровня для ручного создания и закрытия цикла событий."

#: ../../library/asyncio-eventloop.rst:63
msgid ""
"In Python versions 3.10.0--3.10.8 and 3.11.0 this function (and other "
"functions which use it implicitly) emitted a :exc:`DeprecationWarning` if "
"there was no running event loop, even if the current loop was set on the "
"policy. In Python versions 3.10.9, 3.11.1 and 3.12 they emit a :exc:"
"`DeprecationWarning` if there is no running event loop and no current loop "
"is set. In some future Python release this will become an error."
msgstr ""

#: ../../library/asyncio-eventloop.rst:74
msgid "Set *loop* as the current event loop for the current OS thread."
msgstr ""
"Установите *loop* в качестве текущего цикла событий для текущего потока ОС."

#: ../../library/asyncio-eventloop.rst:78
msgid "Create and return a new event loop object."
msgstr "Создайте и верните новый объект цикла событий."

#: ../../library/asyncio-eventloop.rst:80
msgid ""
"Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, "
"and :func:`new_event_loop` functions can be altered by :ref:`setting a "
"custom event loop policy <asyncio-policies>`."
msgstr ""
"Обратите внимание, что поведение функций :func:`get_event_loop`, :func:"
"`set_event_loop` и :func:`new_event_loop` можно изменить, :ref:`устанавливая "
"пользовательскую политику цикла событий <asyncio-policies>`."

#: ../../library/asyncio-eventloop.rst:86
msgid "Contents"
msgstr " Содержание"

#: ../../library/asyncio-eventloop.rst:87
msgid "This documentation page contains the following sections:"
msgstr "Эта страница документации содержит следующие разделы:"

#: ../../library/asyncio-eventloop.rst:89
msgid ""
"The `Event Loop Methods`_ section is the reference documentation of the "
"event loop APIs;"
msgstr ""
"Раздел «Методы цикла событий» представляет собой справочную документацию по "
"API цикла событий;"

#: ../../library/asyncio-eventloop.rst:92
msgid ""
"The `Callback Handles`_ section documents the :class:`Handle` and :class:"
"`TimerHandle` instances which are returned from scheduling methods such as :"
"meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""
"В разделе `Callback Handles`_ описаны экземпляры :class:`Handle` и :class:"
"`TimerHandle`, которые возвращаются из методов планирования, таких как :meth:"
"`loop.call_soon` и :meth:`loop.call_later`;"

#: ../../library/asyncio-eventloop.rst:96
msgid ""
"The `Server Objects`_ section documents types returned from event loop "
"methods like :meth:`loop.create_server`;"
msgstr ""
"Типы документов раздела `Server Objects`_, возвращаемые методами цикла "
"событий, такими как :meth:`loop.create_server`;"

#: ../../library/asyncio-eventloop.rst:99
msgid ""
"The `Event Loop Implementations`_ section documents the :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""
"В разделе `Реализации цикла событий`_ описаны классы :class:"
"`SelectorEventLoop` и :class:`ProactorEventLoop`;"

#: ../../library/asyncio-eventloop.rst:102
msgid ""
"The `Examples`_ section showcases how to work with some event loop APIs."
msgstr ""
"В разделе «Примеры» показано, как работать с некоторыми API-интерфейсами "
"цикла событий."

#: ../../library/asyncio-eventloop.rst:109
msgid "Event Loop Methods"
msgstr "Методы цикла событий"

#: ../../library/asyncio-eventloop.rst:111
msgid "Event loops have **low-level** APIs for the following:"
msgstr "Циклы событий имеют **низкоуровневые** API для следующих целей:"

#: ../../library/asyncio-eventloop.rst:119
msgid "Running and stopping the loop"
msgstr "Запуск и остановка цикла"

#: ../../library/asyncio-eventloop.rst:123
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr ""
"Выполнять до тех пор, пока *future* (экземпляр :class:`Future`) не "
"завершится."

#: ../../library/asyncio-eventloop.rst:126
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>` it is implicitly "
"scheduled to run as a :class:`asyncio.Task`."
msgstr ""
"Если аргументом является :ref:`объект сопрограммы <coroutine>`, он неявно "
"запланирован для запуска как :class:`asyncio.Task`."

#: ../../library/asyncio-eventloop.rst:129
msgid "Return the Future's result or raise its exception."
msgstr "Верните результат Future или вызовите его исключение."

#: ../../library/asyncio-eventloop.rst:133
msgid "Run the event loop until :meth:`stop` is called."
msgstr "Запускайте цикл событий до тех пор, пока не будет вызван :meth:`stop`."

#: ../../library/asyncio-eventloop.rst:135
msgid ""
"If :meth:`stop` is called before :meth:`run_forever()` is called, the loop "
"will poll the I/O selector once with a timeout of zero, run all callbacks "
"scheduled in response to I/O events (and those that were already scheduled), "
"and then exit."
msgstr ""

#: ../../library/asyncio-eventloop.rst:140
msgid ""
"If :meth:`stop` is called while :meth:`run_forever` is running, the loop "
"will run the current batch of callbacks and then exit. Note that new "
"callbacks scheduled by callbacks will not run in this case; instead, they "
"will run the next time :meth:`run_forever` or :meth:`run_until_complete` is "
"called."
msgstr ""
"Если :meth:`stop` вызывается во время работы :meth:`run_forever`, цикл "
"выполнит текущий пакет обратных вызовов и затем завершит работу. Обратите "
"внимание, что новые обратные вызовы, запланированные обратными вызовами, в "
"этом случае не будут выполняться; вместо этого они будут запущены при "
"следующем вызове :meth:`run_forever` или :meth:`run_until_complete`."

#: ../../library/asyncio-eventloop.rst:148
msgid "Stop the event loop."
msgstr "Остановите цикл событий."

#: ../../library/asyncio-eventloop.rst:152
msgid "Return ``True`` if the event loop is currently running."
msgstr ""
"Верните ``True``, если цикл обработки событий в данный момент выполняется."

#: ../../library/asyncio-eventloop.rst:156
msgid "Return ``True`` if the event loop was closed."
msgstr "Верните True, если цикл обработки событий был закрыт."

#: ../../library/asyncio-eventloop.rst:160
msgid "Close the event loop."
msgstr "Закройте цикл событий."

#: ../../library/asyncio-eventloop.rst:162
msgid ""
"The loop must not be running when this function is called. Any pending "
"callbacks will be discarded."
msgstr ""
"Цикл не должен выполняться при вызове этой функции. Любые ожидающие обратные "
"вызовы будут отменены."

#: ../../library/asyncio-eventloop.rst:165
msgid ""
"This method clears all queues and shuts down the executor, but does not wait "
"for the executor to finish."
msgstr ""
"Этот метод очищает все очереди и завершает работу исполнителя, но не "
"дожидается его завершения."

#: ../../library/asyncio-eventloop.rst:168
msgid ""
"This method is idempotent and irreversible.  No other methods should be "
"called after the event loop is closed."
msgstr ""
"Этот метод идемпотентен и необратим. Никакие другие методы не должны "
"вызываться после закрытия цикла обработки событий."

#: ../../library/asyncio-eventloop.rst:173
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose()` call.  After calling this method, the event "
"loop will issue a warning if a new asynchronous generator is iterated. This "
"should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""

#: ../../library/asyncio-eventloop.rst:179
msgid ""
"Note that there is no need to call this function when :func:`asyncio.run` is "
"used."
msgstr ""
"Обратите внимание, что нет необходимости вызывать эту функцию, когда "
"используется :func:`asyncio.run`."

#: ../../library/asyncio-eventloop.rst:182
#: ../../library/asyncio-eventloop.rst:1127
#: ../../library/asyncio-eventloop.rst:1519
msgid "Example::"
msgstr "Пример::"

#: ../../library/asyncio-eventloop.rst:194
msgid ""
"Schedule the closure of the default executor and wait for it to join all of "
"the threads in the :class:`~concurrent.futures.ThreadPoolExecutor`. Once "
"this method has been called, using the default executor with :meth:`loop."
"run_in_executor` will raise a :exc:`RuntimeError`."
msgstr ""
"Запланируйте закрытие исполнителя по умолчанию и подождите, пока он "
"присоединится ко всем потокам в :class:`~concurrent.futures."
"ThreadPoolExecutor`. После вызова этого метода использование исполнителя по "
"умолчанию с :meth:`loop.run_in_executor` вызовет :exc:`RuntimeError`."

#: ../../library/asyncio-eventloop.rst:202
msgid ""
"Do not call this method when using :func:`asyncio.run`, as the latter "
"handles default executor shutdown automatically."
msgstr ""
"Не вызывайте этот метод при использовании :func:`asyncio.run`, поскольку "
"последний автоматически обрабатывает завершение работы исполнителя по "
"умолчанию."

#: ../../library/asyncio-eventloop.rst:209
msgid "Scheduling callbacks"
msgstr "Планирование обратных вызовов"

#: ../../library/asyncio-eventloop.rst:213
msgid ""
"Schedule the *callback* :term:`callback` to be called with *args* arguments "
"at the next iteration of the event loop."
msgstr ""
"Запланируйте вызов *callback* :term:`callback` с аргументами *args* на "
"следующей итерации цикла обработки событий."

#: ../../library/asyncio-eventloop.rst:216
msgid ""
"Return an instance of :class:`asyncio.Handle`, which can be used later to "
"cancel the callback."
msgstr ""
"Верните экземпляр :class:`asyncio.Handle`, который можно использовать позже "
"для отмены обратного вызова."

#: ../../library/asyncio-eventloop.rst:219
msgid ""
"Callbacks are called in the order in which they are registered. Each "
"callback will be called exactly once."
msgstr ""
"Обратные вызовы вызываются в том порядке, в котором они зарегистрированы. "
"Каждый обратный вызов будет вызван ровно один раз."

#: ../../library/asyncio-eventloop.rst:222
msgid ""
"The optional keyword-only *context* argument specifies a custom :class:"
"`contextvars.Context` for the *callback* to run in. Callbacks use the "
"current context when no *context* is provided."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"указывает пользовательский :class:`contextvars.Context` для выполнения "
"*обратного вызова*. Обратные вызовы используют текущий контекст, если "
"*context* не указан."

#: ../../library/asyncio-eventloop.rst:226
msgid "Unlike :meth:`call_soon_threadsafe`, this method is not thread-safe."
msgstr ""
"В отличие от :meth:`call_soon_threadsafe`, этот метод не является "
"потокобезопасным."

#: ../../library/asyncio-eventloop.rst:230
msgid ""
"A thread-safe variant of :meth:`call_soon`. When scheduling callbacks from "
"another thread, this function *must* be used, since :meth:`call_soon` is not "
"thread-safe."
msgstr ""
"Потокобезопасный вариант :meth:`call_soon`. При планировании обратных "
"вызовов из другого потока эта функция *должна* использоваться, поскольку :"
"meth:`call_soon` не является потокобезопасным."

#: ../../library/asyncio-eventloop.rst:234
msgid ""
"Raises :exc:`RuntimeError` if called on a loop that's been closed. This can "
"happen on a secondary thread when the main application is shutting down."
msgstr ""
"Вызывает :exc:`RuntimeError`, если вызывается в закрытом цикле. Это может "
"произойти во вторичном потоке, когда основное приложение завершает работу."

#: ../../library/asyncio-eventloop.rst:238
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"См. раздел документации о :ref:`параллелизме и многопоточности <asyncio-"
"multithreading>`."

#: ../../library/asyncio-eventloop.rst:241
#: ../../library/asyncio-eventloop.rst:291
#: ../../library/asyncio-eventloop.rst:311
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""
"Был добавлен параметр *context*, доступный только по ключевым словам. См. :"
"pep:`567` для более подробной информации."

#: ../../library/asyncio-eventloop.rst:249
msgid ""
"Most :mod:`asyncio` scheduling functions don't allow passing keyword "
"arguments.  To do that, use :func:`functools.partial`::"
msgstr ""
"Большинство функций планирования :mod:`asyncio` не позволяют передавать "
"аргументы ключевых слов. Для этого используйте :func:`functools.partial`::"

#: ../../library/asyncio-eventloop.rst:256
msgid ""
"Using partial objects is usually more convenient than using lambdas, as "
"asyncio can render partial objects better in debug and error messages."
msgstr ""
"Использование частичных объектов обычно более удобно, чем использование "
"лямбда-выражений, поскольку asyncio может лучше отображать частичные объекты "
"в сообщениях отладки и ошибках."

#: ../../library/asyncio-eventloop.rst:264
msgid "Scheduling delayed callbacks"
msgstr "Планирование отложенных обратных вызовов"

#: ../../library/asyncio-eventloop.rst:266
msgid ""
"Event loop provides mechanisms to schedule callback functions to be called "
"at some point in the future.  Event loop uses monotonic clocks to track time."
msgstr ""
"Цикл событий предоставляет механизмы для планирования вызова функций "
"обратного вызова в определенный момент в будущем. Цикл событий использует "
"монотонные часы для отслеживания времени."

#: ../../library/asyncio-eventloop.rst:273
msgid ""
"Schedule *callback* to be called after the given *delay* number of seconds "
"(can be either an int or a float)."
msgstr ""
"Запланируйте вызов *callback* через заданное *delay* количество секунд "
"(может быть как int, так и с плавающей запятой)."

#: ../../library/asyncio-eventloop.rst:276
#: ../../library/asyncio-eventloop.rst:308
msgid ""
"An instance of :class:`asyncio.TimerHandle` is returned which can be used to "
"cancel the callback."
msgstr ""
"Возвращается экземпляр :class:`asyncio.TimerHandle`, который можно "
"использовать для отмены обратного вызова."

#: ../../library/asyncio-eventloop.rst:279
msgid ""
"*callback* will be called exactly once.  If two callbacks are scheduled for "
"exactly the same time, the order in which they are called is undefined."
msgstr ""
"*callback* будет вызван ровно один раз. Если два обратных вызова "
"запланированы на одно и то же время, порядок их вызова не определен."

#: ../../library/asyncio-eventloop.rst:283
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with keyword arguments use :"
"func:`functools.partial`."
msgstr ""
"Необязательный позиционный *args* будет передан обратному вызову при его "
"вызове. Если вы хотите, чтобы обратный вызов вызывался с ключевыми словами, "
"используйте :func:`functools.partial`."

#: ../../library/asyncio-eventloop.rst:287
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""
"Необязательный аргумент *context*, содержащий только ключевые слова, "
"позволяет указать собственный :class:`contextvars.Context` для выполнения "
"*обратного вызова*. Текущий контекст используется, когда *context* не указан."

#: ../../library/asyncio-eventloop.rst:295
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"*delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr ""
"В Python 3.7 и более ранних версиях с реализацией цикла событий по умолчанию "
"*задержка* не могла превышать одного дня. Это было исправлено в Python 3.8."

#: ../../library/asyncio-eventloop.rst:302
msgid ""
"Schedule *callback* to be called at the given absolute timestamp *when* (an "
"int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""
"Запланируйте вызов *callback* в заданную абсолютную временную метку *when* "
"(int или float), используя ту же ссылку на время, что и :meth:`loop.time`."

#: ../../library/asyncio-eventloop.rst:306
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr "Поведение этого метода такое же, как и у :meth:`call_later`."

#: ../../library/asyncio-eventloop.rst:315
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"difference between *when* and the current time could not exceed one day.  "
"This has been fixed in Python 3.8."
msgstr ""
"В Python 3.7 и более ранних версиях с реализацией цикла событий по умолчанию "
"разница между *when* и текущим временем не могла превышать одного дня. Это "
"было исправлено в Python 3.8."

#: ../../library/asyncio-eventloop.rst:322
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal monotonic clock."
msgstr ""
"Возвращает текущее время в виде значения :class:`float` в соответствии с "
"внутренними монотонными часами цикла событий."

#: ../../library/asyncio-eventloop.rst:326
msgid ""
"In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) "
"should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""
"В Python 3.7 и более ранних версиях таймауты (относительная *задержка* или "
"абсолютные *когда*) не должны превышать один день. Это было исправлено в "
"Python 3.8."

#: ../../library/asyncio-eventloop.rst:332
msgid "The :func:`asyncio.sleep` function."
msgstr "Функция :func:`asyncio.sleep`"

#: ../../library/asyncio-eventloop.rst:336
msgid "Creating Futures and Tasks"
msgstr "Создание будущего и задач"

#: ../../library/asyncio-eventloop.rst:340
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr ""
"Создайте объект :class:`asyncio.Future`, прикрепленный к циклу событий."

#: ../../library/asyncio-eventloop.rst:342
msgid ""
"This is the preferred way to create Futures in asyncio. This lets third-"
"party event loops provide alternative implementations of the Future object "
"(with better performance or instrumentation)."
msgstr ""
"Это предпочтительный способ создания фьючерсов в asyncio. Это позволяет "
"сторонним циклам событий предоставлять альтернативные реализации объекта "
"Future (с лучшей производительностью или инструментированием)."

#: ../../library/asyncio-eventloop.rst:350
msgid ""
"Schedule the execution of :ref:`coroutine <coroutine>` *coro*. Return a :"
"class:`Task` object."
msgstr ""
"Запланируйте выполнение :ref:`coroutine <coroutine>` *coro*. Верните объект :"
"class:`Task`."

#: ../../library/asyncio-eventloop.rst:353
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of :class:"
"`Task`."
msgstr ""
"Сторонние циклы событий могут использовать собственный подкласс :class:"
"`Task` для обеспечения совместимости. В этом случае тип результата является "
"подклассом :class:`Task`."

#: ../../library/asyncio-eventloop.rst:357
msgid ""
"If the *name* argument is provided and not ``None``, it is set as the name "
"of the task using :meth:`Task.set_name`."
msgstr ""
"Если указан аргумент *name*, а не ``None``, он устанавливается как имя "
"задачи с использованием :meth:`Task.set_name`."

#: ../../library/asyncio-eventloop.rst:360
msgid "Added the *name* parameter."
msgstr "Добавлен параметр *имя*."

#: ../../library/asyncio-eventloop.rst:365
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr ""
"Установите фабрику задач, которая будет использоваться :meth:`loop."
"create_task`."

#: ../../library/asyncio-eventloop.rst:368
msgid ""
"If *factory* is ``None`` the default task factory will be set. Otherwise, "
"*factory* must be a *callable* with the signature matching ``(loop, coro)``, "
"where *loop* is a reference to the active event loop, and *coro* is a "
"coroutine object.  The callable must return a :class:`asyncio.Future`-"
"compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:376
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""
"Возвращает фабрику задач или None, если используется фабрика по умолчанию."

#: ../../library/asyncio-eventloop.rst:380
msgid "Opening network connections"
msgstr "Открытие сетевых подключений"

#: ../../library/asyncio-eventloop.rst:389
msgid ""
"Open a streaming transport connection to a given address specified by *host* "
"and *port*."
msgstr ""
"Откройте потоковое транспортное соединение по заданному адресу, указанному "
"*host* и *port*."

#: ../../library/asyncio-eventloop.rst:392
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET` or :py:data:"
"`~socket.AF_INET6` depending on *host* (or the *family* argument, if "
"provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:396
msgid "The socket type will be :py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:398
#: ../../library/asyncio-eventloop.rst:1043
#: ../../library/asyncio-eventloop.rst:1059
msgid ""
"*protocol_factory* must be a callable returning an :ref:`asyncio protocol "
"<asyncio-protocol>` implementation."
msgstr ""
"*protocol_factory* должен быть вызываемым объектом, возвращающим реализацию "
"протокола asyncio <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:401
msgid ""
"This method will try to establish the connection in the background. When "
"successful, it returns a ``(transport, protocol)`` pair."
msgstr ""
"Этот метод попытается установить соединение в фоновом режиме. В случае "
"успеха он возвращает пару ``(транспорт, протокол)``."

#: ../../library/asyncio-eventloop.rst:404
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr "Хронологический синопсис основной операции следующий:"

#: ../../library/asyncio-eventloop.rst:406
msgid ""
"The connection is established and a :ref:`transport <asyncio-transport>` is "
"created for it."
msgstr ""
"Соединение устанавливается и для него создается транспорт <asyncio-"
"transport>`."

#: ../../library/asyncio-eventloop.rst:409
msgid ""
"*protocol_factory* is called without arguments and is expected to return a :"
"ref:`protocol <asyncio-protocol>` instance."
msgstr ""
"*protocol_factory* вызывается без аргументов и, как ожидается, вернет "
"экземпляр протокола <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:412
msgid ""
"The protocol instance is coupled with the transport by calling its :meth:"
"`~BaseProtocol.connection_made` method."
msgstr ""
"Экземпляр протокола соединяется с транспортом путем вызова его метода :meth:"
"`~BaseProtocol.connection_made`."

#: ../../library/asyncio-eventloop.rst:415
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr "В случае успеха возвращается кортеж ``(транспорт, протокол)``."

#: ../../library/asyncio-eventloop.rst:417
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""
"Созданный транспорт представляет собой двунаправленный поток, зависящий от "
"реализации."

#: ../../library/asyncio-eventloop.rst:420
#: ../../library/asyncio-eventloop.rst:548
msgid "Other arguments:"
msgstr "Другие аргументы:"

#: ../../library/asyncio-eventloop.rst:422
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is :const:"
"`True`, a default context returned from :func:`ssl.create_default_context` "
"is used."
msgstr ""
"*ssl*: если задано и не является ложным, создается транспорт SSL/TLS (по "
"умолчанию создается простой транспорт TCP). Если *ssl* является объектом :"
"class:`ssl.SSLContext`, этот контекст используется для создания транспорта; "
"если *ssl* имеет значение :const:`True`, используется контекст по умолчанию, "
"возвращаемый из :func:`ssl.create_default_context`."

#: ../../library/asyncio-eventloop.rst:428
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ":ref:`SSL/TLS security considerations <ssl-security>`"

#: ../../library/asyncio-eventloop.rst:430
msgid ""
"*server_hostname* sets or overrides the hostname that the target server's "
"certificate will be matched against.  Should only be passed if *ssl* is not "
"``None``.  By default the value of the *host* argument is used.  If *host* "
"is empty, there is no default and you must pass a value for "
"*server_hostname*.  If *server_hostname* is an empty string, hostname "
"matching is disabled (which is a serious security risk, allowing for "
"potential man-in-the-middle attacks)."
msgstr ""
"*server_hostname* устанавливает или переопределяет имя хоста, с которым "
"будет сопоставляться сертификат целевого сервера. Следует передавать только "
"в том случае, если *ssl* не равен None. По умолчанию используется значение "
"аргумента *host*. Если *host* пуст, значения по умолчанию нет, и вам "
"необходимо передать значение для *server_hostname*. Если *server_hostname* — "
"пустая строка, сопоставление имен хостов отключено (что представляет собой "
"серьезную угрозу безопасности, допускающую потенциальные атаки «человек "
"посередине»)."

#: ../../library/asyncio-eventloop.rst:438
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given, "
"these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""
"*family*, *proto*, *flags* — это необязательное семейство адресов, протокол "
"и флаги, которые необходимо передать в getaddrinfo() для разрешения *host*. "
"Если они заданы, все они должны быть целыми числами из соответствующих "
"констант модуля :mod:`socket`."

#: ../../library/asyncio-eventloop.rst:443
msgid ""
"*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this "
"connection. It should be a floating-point number representing the amount of "
"time in seconds to wait for a connection attempt to complete, before "
"starting the next attempt in parallel. This is the \"Connection Attempt "
"Delay\" as defined in :rfc:`8305`. A sensible default value recommended by "
"the RFC is ``0.25`` (250 milliseconds)."
msgstr ""
"*happy_eyeballs_delay*, если задано, включает функцию Happy Eyeballs для "
"этого соединения. Это должно быть число с плавающей запятой, обозначающее "
"время в секундах ожидания завершения попытки подключения перед параллельным "
"запуском следующей попытки. Это «Задержка попытки подключения», как "
"определено в :rfc:`8305`. Разумное значение по умолчанию, рекомендованное "
"RFC, составляет «0,25» (250 миллисекунд)."

#: ../../library/asyncio-eventloop.rst:451
msgid ""
"*interleave* controls address reordering when a host name resolves to "
"multiple IP addresses. If ``0`` or unspecified, no reordering is done, and "
"addresses are tried in the order returned by :meth:`getaddrinfo`. If a "
"positive integer is specified, the addresses are interleaved by address "
"family, and the given integer is interpreted as \"First Address Family "
"Count\" as defined in :rfc:`8305`. The default is ``0`` if "
"*happy_eyeballs_delay* is not specified, and ``1`` if it is."
msgstr ""
"*interleave* управляет переупорядочением адресов, когда имя хоста "
"преобразуется в несколько IP-адресов. Если ``0`` или не указано, "
"переупорядочение не производится, и адреса проверяются в порядке, "
"возвращаемом :meth:`getaddrinfo`. Если указано положительное целое число, "
"адреса чередуются по семействам адресов, и данное целое число "
"интерпретируется как «Счетчик первого семейства адресов», как определено в :"
"rfc:`8305`. По умолчанию установлено ``0``, если *happy_eyeballs_delay* не "
"указано, и ``1``, если оно указано."

#: ../../library/asyncio-eventloop.rst:460
msgid ""
"*sock*, if given, should be an existing, already connected :class:`socket."
"socket` object to be used by the transport. If *sock* is given, none of "
"*host*, *port*, *family*, *proto*, *flags*, *happy_eyeballs_delay*, "
"*interleave* and *local_addr* should be specified."
msgstr ""
"*sock*, если он указан, должен быть существующим, уже подключенным объектом :"
"class:`socket.socket`, который будет использоваться транспортом. Если указан "
"*sock*, не следует указывать ни одно из *host*, *port*, *family*, *proto*, "
"*flags*, *happy_eyeballs_delay*, *interleave* и *local_addr*."

#: ../../library/asyncio-eventloop.rst:468
#: ../../library/asyncio-eventloop.rst:579
#: ../../library/asyncio-eventloop.rst:765
msgid ""
"The *sock* argument transfers ownership of the socket to the transport "
"created. To close the socket, call the transport's :meth:`~asyncio."
"BaseTransport.close` method."
msgstr ""
"Аргумент *sock* передает право собственности на сокет созданному транспорту. "
"Чтобы закрыть сокет, вызовите метод транспорта :meth:`~asyncio.BaseTransport."
"close`."

#: ../../library/asyncio-eventloop.rst:472
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using "
"``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""
"*local_addr*, если он указан, представляет собой кортеж ``(local_host, "
"local_port)``, используемый для локальной привязки сокета. *local_host* и "
"*local_port* ищутся с помощью ``getaddrinfo()``, аналогично *host* и *port*."

#: ../../library/asyncio-eventloop.rst:476
#: ../../library/asyncio-eventloop.rst:850
msgid ""
"*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to "
"wait for the TLS handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* — это (для TLS-соединения) время в секундах ожидания "
"завершения TLS-квитирования перед прерыванием соединения. ``60,0`` секунд, "
"если ``Нет`` (по умолчанию)."

#: ../../library/asyncio-eventloop.rst:482
#: ../../library/asyncio-eventloop.rst:706
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr "Добавлена ​​поддержка SSL/TLS в :class:`ProactorEventLoop`."

#: ../../library/asyncio-eventloop.rst:486
msgid ""
"The socket option :py:data:`~socket.TCP_NODELAY` is set by default for all "
"TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:491
#: ../../library/asyncio-eventloop.rst:782
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr "Добавлен параметр *ssl_handshake_timeout*."

#: ../../library/asyncio-eventloop.rst:495
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr "Добавлены параметры *happy_eyeballs_delay* и *interleave*."

#: ../../library/asyncio-eventloop.rst:497
msgid ""
"Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server's "
"IPv4 path and protocol are working, but the server's IPv6 path and protocol "
"are not working, a dual-stack client application experiences significant "
"connection delay compared to an IPv4-only client.  This is undesirable "
"because it causes the dual-stack client to have a worse user experience.  "
"This document specifies requirements for algorithms that reduce this user-"
"visible delay and provides an algorithm."
msgstr ""
"Алгоритм счастливых глаз: успех с хостами с двумя стеками. Если путь и "
"протокол IPv4 сервера работают, но путь и протокол IPv6 сервера не работают, "
"клиентское приложение с двойным стеком испытывает значительную задержку "
"подключения по сравнению с клиентом, поддерживающим только IPv4. Это "
"нежелательно, поскольку это приводит к ухудшению пользовательского опыта "
"клиента с двойным стеком. Этот документ определяет требования к алгоритмам, "
"которые уменьшают эту видимую пользователю задержку, и предоставляет "
"алгоритм."

#: ../../library/asyncio-eventloop.rst:506
msgid "For more information: https://tools.ietf.org/html/rfc6555"
msgstr ""

#: ../../library/asyncio-eventloop.rst:510
msgid ""
"The :func:`open_connection` function is a high-level alternative API.  It "
"returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be "
"used directly in async/await code."
msgstr ""
"Функция :func:`open_connection` — это альтернативный API высокого уровня. Он "
"возвращает пару (:class:`StreamReader`, :class:`StreamWriter`), которую "
"можно использовать непосредственно в коде async/await."

#: ../../library/asyncio-eventloop.rst:521
msgid ""
"The parameter *reuse_address* is no longer supported, as using :py:data:"
"`~sockets.SO_REUSEADDR` poses a significant security concern for UDP. "
"Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:525
msgid ""
"When multiple processes with differing UIDs assign sockets to an identical "
"UDP socket address with ``SO_REUSEADDR``, incoming packets can become "
"randomly distributed among the sockets."
msgstr ""
"Когда несколько процессов с разными UID назначают сокетам одинаковый адрес "
"сокета UDP с помощью SO_REUSEADDR, входящие пакеты могут случайным образом "
"распределяться между сокетами."

#: ../../library/asyncio-eventloop.rst:529
msgid ""
"For supported platforms, *reuse_port* can be used as a replacement for "
"similar functionality. With *reuse_port*, :py:data:`~sockets.SO_REUSEPORT` "
"is used instead, which specifically prevents processes with differing UIDs "
"from assigning sockets to the same socket address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:535
msgid "Create a datagram connection."
msgstr "Создайте дейтаграммное соединение."

#: ../../library/asyncio-eventloop.rst:537
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET`, :py:data:"
"`~socket.AF_INET6`, or :py:data:`~socket.AF_UNIX`, depending on *host* (or "
"the *family* argument, if provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:541
msgid "The socket type will be :py:data:`~socket.SOCK_DGRAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:543
#: ../../library/asyncio-eventloop.rst:641
#: ../../library/asyncio-eventloop.rst:757
msgid ""
"*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-"
"protocol>` implementation."
msgstr ""
"*protocol_factory* должен быть вызываемым объектом, возвращающим реализацию "
"протокола <asyncio-protocol>`."

#: ../../library/asyncio-eventloop.rst:546
#: ../../library/asyncio-eventloop.rst:606
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr "В случае успеха возвращается кортеж ``(транспорт, протокол)``."

#: ../../library/asyncio-eventloop.rst:550
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using :"
"meth:`getaddrinfo`."
msgstr ""
"*local_addr*, если он указан, представляет собой кортеж ``(local_host, "
"local_port)``, используемый для локальной привязки сокета. *local_host* и "
"*local_port* ищутся с помощью :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:554
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port* "
"are looked up using :meth:`getaddrinfo`."
msgstr ""
"*remote_addr*, если он указан, представляет собой кортеж ``(remote_host, "
"Remote_port)``, используемый для подключения сокета к удаленному адресу. "
"*remote_host* и *remote_port* ищутся с помощью :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:558
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""
"*family*, *proto*, *flags* — это необязательное семейство адресов, протокол "
"и флаги, которые необходимо передать в :meth:`getaddrinfo` для разрешения "
"*host*. Если они заданы, все они должны быть целыми числами из "
"соответствующих констант модуля :mod:`socket`."

#: ../../library/asyncio-eventloop.rst:563
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows and some "
"Unixes. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then "
"this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:569
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""
"*allow_broadcast* сообщает ядру, что нужно разрешить этой конечной точке "
"отправлять сообщения на широковещательный адрес."

#: ../../library/asyncio-eventloop.rst:572
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be :const:"
"`None`)."
msgstr ""
"*sock* может быть указан дополнительно, чтобы использовать уже существующий, "
"уже подключенный объект :class:`socket.socket`, который будет использоваться "
"транспортом. Если указано, *local_addr* и *remote_addr* следует опустить "
"(должно быть :const:`None`)."

#: ../../library/asyncio-eventloop.rst:583
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :"
"ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""
"См. примеры протокола эхо-клиента UDP <asyncio-udp-echo-client-protocol> и "
"протокола эхо-сервера UDP <asyncio-udp-echo-server-protocol>."

#: ../../library/asyncio-eventloop.rst:586
msgid ""
"The *family*, *proto*, *flags*, *reuse_address*, *reuse_port, "
"*allow_broadcast*, and *sock* parameters were added."
msgstr ""

#: ../../library/asyncio-eventloop.rst:590
msgid ""
"The *reuse_address* parameter is no longer supported due to security "
"concerns."
msgstr ""

#: ../../library/asyncio-eventloop.rst:594
msgid "Added support for Windows."
msgstr "Добавлена поддержка Windows."

#: ../../library/asyncio-eventloop.rst:601
msgid "Create a Unix connection."
msgstr "Создайте соединение с Unix."

#: ../../library/asyncio-eventloop.rst:603
msgid ""
"The socket family will be :py:data:`~socket.AF_UNIX`; socket type will be :"
"py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:608
msgid ""
"*path* is the name of a Unix domain socket and is required, unless a *sock* "
"parameter is specified.  Abstract Unix sockets, :class:`str`, :class:"
"`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""
"*path* — это имя сокета домена Unix, оно является обязательным, если не "
"указан параметр *sock*. Поддерживаются абстрактные сокеты Unix, пути :class:"
"`str`, :class:`bytes` и :class:`~pathlib.Path`."

#: ../../library/asyncio-eventloop.rst:613
msgid ""
"See the documentation of the :meth:`loop.create_connection` method for "
"information about arguments to this method."
msgstr ""
"См. документацию метода :meth:`loop.create_connection` для получения "
"информации об аргументах этого метода."

#: ../../library/asyncio-eventloop.rst:617
#: ../../library/asyncio-eventloop.rst:741
#: ../../library/asyncio-eventloop.rst:1110
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Availability <availability>`: Unix."

#: ../../library/asyncio-eventloop.rst:618
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`."
msgstr ""
"Добавлен параметр *ssl_handshake_timeout*. Параметр *path* теперь может быть "
"объектом, похожим на путь."

#: ../../library/asyncio-eventloop.rst:624
msgid "Creating network servers"
msgstr "Создание сетевых серверов"

#: ../../library/asyncio-eventloop.rst:634
msgid ""
"Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) listening on "
"*port* of the *host* address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:637
msgid "Returns a :class:`Server` object."
msgstr "Возвращает объект :class:`Server`."

#: ../../library/asyncio-eventloop.rst:639
msgid "Arguments:"
msgstr "Аргументы:"

#: ../../library/asyncio-eventloop.rst:644
msgid ""
"The *host* parameter can be set to several types which determine where the "
"server would be listening:"
msgstr ""
"Параметру *host* можно задать несколько типов, которые определяют, где "
"сервер будет прослушивать:"

#: ../../library/asyncio-eventloop.rst:647
msgid ""
"If *host* is a string, the TCP server is bound to a single network interface "
"specified by *host*."
msgstr ""
"Если *host* — это строка, TCP-сервер привязан к одному сетевому интерфейсу, "
"указанному *host*."

#: ../../library/asyncio-eventloop.rst:650
msgid ""
"If *host* is a sequence of strings, the TCP server is bound to all network "
"interfaces specified by the sequence."
msgstr ""
"Если *host* представляет собой последовательность строк, TCP-сервер привязан "
"ко всем сетевым интерфейсам, указанным в этой последовательности."

#: ../../library/asyncio-eventloop.rst:653
msgid ""
"If *host* is an empty string or ``None``, all interfaces are assumed and a "
"list of multiple sockets will be returned (most likely one for IPv4 and "
"another one for IPv6)."
msgstr ""
"Если *host* — пустая строка или ``None``, предполагаются все интерфейсы и "
"будет возвращен список нескольких сокетов (скорее всего, один для IPv4, а "
"другой для IPv6)."

#: ../../library/asyncio-eventloop.rst:657
msgid ""
"The *port* parameter can be set to specify which port the server should "
"listen on. If ``0`` or ``None`` (the default), a random unused port will be "
"selected (note that if *host* resolves to multiple network interfaces, a "
"different random port will be selected for each interface)."
msgstr ""
"Параметр *port* можно установить, чтобы указать, какой порт должен "
"прослушивать сервер. Если ``0`` или ``None`` (по умолчанию), будет выбран "
"случайный неиспользуемый порт (обратите внимание, что если *host* "
"разрешается для нескольких сетевых интерфейсов, для каждого интерфейса будет "
"выбран другой случайный порт)."

#: ../../library/asyncio-eventloop.rst:662
msgid ""
"*family* can be set to either :data:`socket.AF_INET` or :data:`~socket."
"AF_INET6` to force the socket to use IPv4 or IPv6. If not set, the *family* "
"will be determined from host name (defaults to :data:`~socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:667
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr "*flags* — это битовая маска для :meth:`getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:669
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* must not be specified."
msgstr ""
"*sock* можно указать дополнительно, чтобы использовать уже существующий "
"объект сокета. Если указано, *хост* и *порт* указывать нельзя."

#: ../../library/asyncio-eventloop.rst:674
msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""
"Аргумент *sock* передает право собственности на сокет созданному серверу. "
"Чтобы закрыть сокет, вызовите метод сервера :meth:`~asyncio.Server.close`."

#: ../../library/asyncio-eventloop.rst:678
msgid ""
"*backlog* is the maximum number of queued connections passed to :meth:"
"`~socket.socket.listen` (defaults to 100)."
msgstr ""
"*backlog* — максимальное количество соединений в очереди, передаваемых в :"
"meth:`~socket.socket.listen` (по умолчанию 100)."

#: ../../library/asyncio-eventloop.rst:681
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over "
"the accepted connections."
msgstr ""
"Для *ssl* может быть установлен экземпляр :class:`~ssl.SSLContext`, чтобы "
"включить TLS для принятых соединений."

#: ../../library/asyncio-eventloop.rst:684
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` "
"state, without waiting for its natural timeout to expire. If not specified "
"will automatically be set to ``True`` on Unix."
msgstr ""
"*reuse_address* сообщает ядру повторно использовать локальный сокет в "
"состоянии ``TIME_WAIT``, не дожидаясь истечения его естественного таймаута. "
"Если не указано, в Unix автоматически будет установлено значение «True»."

#: ../../library/asyncio-eventloop.rst:689
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows."
msgstr ""
"*reuse_port* указывает ядру разрешить привязку этой конечной точки к тому же "
"порту, к которому привязаны другие существующие конечные точки, при условии, "
"что все они установили этот флаг при создании. Этот параметр не "
"поддерживается в Windows."

#: ../../library/asyncio-eventloop.rst:694
msgid ""
"*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait "
"for the TLS handshake to complete before aborting the connection. ``60.0`` "
"seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* — это (для сервера TLS) время в секундах ожидания "
"завершения подтверждения TLS перед прерыванием соединения. ``60,0`` секунд, "
"если ``Нет`` (по умолчанию)."

#: ../../library/asyncio-eventloop.rst:698
msgid ""
"*start_serving* set to ``True`` (the default) causes the created server to "
"start accepting connections immediately.  When set to ``False``, the user "
"should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever` "
"to make the server to start accepting connections."
msgstr ""
"Для параметра *start_serving* установлено значение ``True`` (по умолчанию) "
"созданный сервер немедленно начинает принимать соединения. Если установлено "
"значение «False», пользователь должен дождаться :meth:`Server.start_serving` "
"или :meth:`Server.serve_forever`, чтобы сервер начал принимать соединения."

#: ../../library/asyncio-eventloop.rst:710
msgid "The *host* parameter can be a sequence of strings."
msgstr "Параметр *host* может представлять собой последовательность строк."

#: ../../library/asyncio-eventloop.rst:714
msgid ""
"Added *ssl_handshake_timeout* and *start_serving* parameters. The socket "
"option :py:data:`~socket.TCP_NODELAY` is set by default for all TCP "
"connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:720
msgid ""
"The :func:`start_server` function is a higher-level alternative API that "
"returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can "
"be used in an async/await code."
msgstr ""
"Функция :func:`start_server` — это альтернативный API более высокого уровня, "
"который возвращает пару :class:`StreamReader` и :class:`StreamWriter`, "
"которые можно использовать в асинхронном/ожидающем коде."

#: ../../library/asyncio-eventloop.rst:729
msgid ""
"Similar to :meth:`loop.create_server` but works with the :py:data:`~socket."
"AF_UNIX` socket family."
msgstr ""

#: ../../library/asyncio-eventloop.rst:732
msgid ""
"*path* is the name of a Unix domain socket, and is required, unless a *sock* "
"argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`, "
"and :class:`~pathlib.Path` paths are supported."
msgstr ""
"*path* — это имя сокета домена Unix. Оно является обязательным, если не "
"указан аргумент *sock*. Поддерживаются абстрактные сокеты Unix, пути :class:"
"`str`, :class:`bytes` и :class:`~pathlib.Path`."

#: ../../library/asyncio-eventloop.rst:737
msgid ""
"See the documentation of the :meth:`loop.create_server` method for "
"information about arguments to this method."
msgstr ""
"См. документацию метода :meth:`loop.create_server` для получения информации "
"об аргументах этого метода."

#: ../../library/asyncio-eventloop.rst:744
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :class:`~pathlib.Path` object."
msgstr ""
"Добавлены параметры *ssl_handshake_timeout* и *start_serving*. Параметр "
"*path* теперь может быть объектом :class:`~pathlib.Path`."

#: ../../library/asyncio-eventloop.rst:750
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr "Оберните уже принятое соединение в пару транспорт/протокол."

#: ../../library/asyncio-eventloop.rst:752
msgid ""
"This method can be used by servers that accept connections outside of "
"asyncio but that use asyncio to handle them."
msgstr ""
"Этот метод может использоваться серверами, которые принимают соединения вне "
"asyncio, но используют asyncio для их обработки."

#: ../../library/asyncio-eventloop.rst:755
#: ../../library/asyncio-eventloop.rst:836
msgid "Parameters:"
msgstr "Параметры:"

#: ../../library/asyncio-eventloop.rst:760
msgid ""
"*sock* is a preexisting socket object returned from :meth:`socket.accept "
"<socket.socket.accept>`."
msgstr ""
"*sock* — это уже существующий объект сокета, возвращаемый из :meth:`socket."
"accept <socket.socket.accept>`."

#: ../../library/asyncio-eventloop.rst:769
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""
"Для *ssl* можно установить :class:`~ssl.SSLContext`, чтобы включить SSL для "
"принятых соединений."

#: ../../library/asyncio-eventloop.rst:772
msgid ""
"*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to "
"wait for the SSL handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* — это (для SSL-соединения) время в секундах ожидания "
"завершения SSL-квитирования перед прерыванием соединения. ``60,0`` секунд, "
"если ``Нет`` (по умолчанию)."

#: ../../library/asyncio-eventloop.rst:776
msgid "Returns a ``(transport, protocol)`` pair."
msgstr "Возвращает пару ``(транспорт, протокол)``."

#: ../../library/asyncio-eventloop.rst:786
msgid "Transferring files"
msgstr "Передача файлов"

#: ../../library/asyncio-eventloop.rst:791
msgid ""
"Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""
"Отправьте *файл* через *транспорт*. Возвращает общее количество отправленных "
"байтов."

#: ../../library/asyncio-eventloop.rst:794
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr ""
"Этот метод использует высокопроизводительный :meth:`os.sendfile`, если он "
"доступен."

#: ../../library/asyncio-eventloop.rst:796
msgid "*file* must be a regular file object opened in binary mode."
msgstr ""
"*файл* должен быть обычным файловым объектом, открытым в двоичном режиме."

#: ../../library/asyncio-eventloop.rst:798
#: ../../library/asyncio-eventloop.rst:998
msgid ""
"*offset* tells from where to start reading the file. If specified, *count* "
"is the total number of bytes to transmit as opposed to sending the file "
"until EOF is reached. File position is always updated, even when this method "
"raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to "
"obtain the actual number of bytes sent."
msgstr ""
"*offset* указывает, с чего начать чтение файла. Если указано, *count* — это "
"общее количество байтов для передачи вместо отправки файла до достижения "
"EOF. Позиция файла всегда обновляется, даже если этот метод вызывает ошибку, "
"и :meth:`file.tell() <io.IOBase.tell>` можно использовать для получения "
"фактического количества отправленных байтов."

#: ../../library/asyncio-eventloop.rst:805
msgid ""
"*fallback* set to ``True`` makes asyncio to manually read and send the file "
"when the platform does not support the sendfile system call (e.g. Windows or "
"SSL socket on Unix)."
msgstr ""
"*fallback*, установленный в ``True``, заставляет asyncio вручную читать и "
"отправлять файл, когда платформа не поддерживает системный вызов sendfile "
"(например, сокет Windows или SSL в Unix)."

#: ../../library/asyncio-eventloop.rst:809
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support the "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""
"Поднимите :exc:`SendfileNotAvailableError`, если система не поддерживает "
"системный вызов *sendfile* и *fallback* имеет значение ``False``."

#: ../../library/asyncio-eventloop.rst:816
msgid "TLS Upgrade"
msgstr "Обновление TLS"

#: ../../library/asyncio-eventloop.rst:822
msgid "Upgrade an existing transport-based connection to TLS."
msgstr "Обновите существующее транспортное соединение до TLS."

#: ../../library/asyncio-eventloop.rst:824
msgid ""
"Create a TLS coder/decoder instance and insert it between the *transport* "
"and the *protocol*. The coder/decoder implements both *transport*-facing "
"protocol and *protocol*-facing transport."
msgstr ""
"Создайте экземпляр кодера/декодера TLS и вставьте его между *транспортом* и "
"*протоколом*. Кодер/декодер реализует как протокол, ориентированный на "
"*транспорт*, так и транспорт, ориентированный на *протокол*."

#: ../../library/asyncio-eventloop.rst:828
msgid ""
"Return the created two-interface instance. After *await*, the *protocol* "
"must stop using the original *transport* and communicate with the returned "
"object only because the coder caches *protocol*-side data and sporadically "
"exchanges extra TLS session packets with *transport*."
msgstr ""
"Верните созданный двухинтерфейсный экземпляр. После *await* *протокол* "
"должен прекратить использование исходного *транспорта* и взаимодействовать с "
"возвращаемым объектом только потому, что кодер кэширует данные на стороне "
"*протокола* и время от времени обменивается дополнительными пакетами сеанса "
"TLS с *транспортом*."

#: ../../library/asyncio-eventloop.rst:833
msgid ""
"In some situations (e.g. when the passed transport is already closing) this "
"may return ``None``."
msgstr ""
"В некоторых ситуациях (например, когда переданный транспорт уже закрывается) "
"это может возвращать None."

#: ../../library/asyncio-eventloop.rst:838
msgid ""
"*transport* and *protocol* instances that methods like :meth:`~loop."
"create_server` and :meth:`~loop.create_connection` return."
msgstr ""
"экземпляры *transport* и *protocol*, возвращаемые такими методами, как :meth:"
"`~loop.create_server` и :meth:`~loop.create_connection`."

#: ../../library/asyncio-eventloop.rst:842
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext*: настроенный экземпляр :class:`~ssl.SSLContext`."

#: ../../library/asyncio-eventloop.rst:844
msgid ""
"*server_side* pass ``True`` when a server-side connection is being upgraded "
"(like the one created by :meth:`~loop.create_server`)."
msgstr ""
"*server_side* передает ``True`` при обновлении соединения на стороне сервера "
"(например, созданного :meth:`~loop.create_server`)."

#: ../../library/asyncio-eventloop.rst:847
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""
"*server_hostname*: устанавливает или переопределяет имя хоста, с которым "
"будет сопоставляться сертификат целевого сервера."

#: ../../library/asyncio-eventloop.rst:858
msgid "Watching file descriptors"
msgstr "Наблюдение за дескрипторами файлов"

#: ../../library/asyncio-eventloop.rst:862
msgid ""
"Start monitoring the *fd* file descriptor for read availability and invoke "
"*callback* with the specified arguments once *fd* is available for reading."
msgstr ""
"Начните отслеживать файловый дескриптор *fd* на доступность чтения и "
"вызовите *callback* с указанными аргументами, как только *fd* станет "
"доступным для чтения."

#: ../../library/asyncio-eventloop.rst:868
msgid ""
"Stop monitoring the *fd* file descriptor for read availability. Returns "
"``True`` if *fd* was previously being monitored for reads."
msgstr ""
"Прекратите мониторинг файлового дескриптора *fd* на предмет доступности "
"чтения. Возвращает ``True``, если *fd* ранее отслеживался на предмет чтения."

#: ../../library/asyncio-eventloop.rst:873
msgid ""
"Start monitoring the *fd* file descriptor for write availability and invoke "
"*callback* with the specified arguments once *fd* is available for writing."
msgstr ""
"Начните отслеживать файловый дескриптор *fd* на доступность записи и "
"вызовите *callback* с указанными аргументами, как только *fd* станет "
"доступен для записи."

#: ../../library/asyncio-eventloop.rst:877
#: ../../library/asyncio-eventloop.rst:1097
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *callback*."
msgstr ""
"Используйте :func:`functools.partial` :ref:`для передачи аргументов "
"ключевого слова <asyncio-pass-keywords>` в *callback*."

#: ../../library/asyncio-eventloop.rst:882
msgid ""
"Stop monitoring the *fd* file descriptor for write availability. Returns "
"``True`` if *fd* was previously being monitored for writes."
msgstr ""
"Прекратите мониторинг файлового дескриптора *fd* на предмет доступности "
"записи. Возвращает ``True``, если *fd* ранее отслеживался на предмет записи."

#: ../../library/asyncio-eventloop.rst:885
msgid ""
"See also :ref:`Platform Support <asyncio-platform-support>` section for some "
"limitations of these methods."
msgstr ""
"См. также раздел :ref:`Поддержка платформы <asyncio-platform-support>`, где "
"описаны некоторые ограничения этих методов."

#: ../../library/asyncio-eventloop.rst:890
msgid "Working with socket objects directly"
msgstr "Работа с объектами сокетов напрямую"

#: ../../library/asyncio-eventloop.rst:892
msgid ""
"In general, protocol implementations that use transport-based APIs such as :"
"meth:`loop.create_connection` and :meth:`loop.create_server` are faster than "
"implementations that work with sockets directly. However, there are some use "
"cases when performance is not critical, and working with :class:`~socket."
"socket` objects directly is more convenient."
msgstr ""
"В общем, реализации протоколов, использующие API на основе транспорта, такие "
"как :meth:`loop.create_connection` и :meth:`loop.create_server`, работают "
"быстрее, чем реализации, которые работают с сокетами напрямую. Однако есть "
"случаи использования, когда производительность не критична и удобнее "
"работать напрямую с объектами :class:`~socket.socket`."

#: ../../library/asyncio-eventloop.rst:901
msgid ""
"Receive up to *nbytes* from *sock*.  Asynchronous version of :meth:`socket."
"recv() <socket.socket.recv>`."
msgstr ""
"Получите до *нбайт* от *sock*. Асинхронная версия :meth:`socket.recv() "
"<socket.socket.recv>`."

#: ../../library/asyncio-eventloop.rst:904
msgid "Return the received data as a bytes object."
msgstr "Верните полученные данные в виде байтового объекта."

#: ../../library/asyncio-eventloop.rst:906
#: ../../library/asyncio-eventloop.rst:920
#: ../../library/asyncio-eventloop.rst:935
#: ../../library/asyncio-eventloop.rst:948
#: ../../library/asyncio-eventloop.rst:974
#: ../../library/asyncio-eventloop.rst:1012
msgid "*sock* must be a non-blocking socket."
msgstr "*sock* должен быть неблокирующим сокетом."

#: ../../library/asyncio-eventloop.rst:908
msgid ""
"Even though this method was always documented as a coroutine method, "
"releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this "
"is an ``async def`` method."
msgstr ""
"Несмотря на то, что этот метод всегда документировался как метод "
"сопрограммы, версии до Python 3.7 возвращали :class:`Future`. Начиная с "
"Python 3.7, это метод ``async def``."

#: ../../library/asyncio-eventloop.rst:915
msgid ""
"Receive data from *sock* into the *buf* buffer.  Modeled after the blocking :"
"meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""
"Получите данные из *sock* в буфер *buf*. Создано по образцу блокирующего "
"метода :meth:`socket.recv_into() <socket.socket.recv_into>`."

#: ../../library/asyncio-eventloop.rst:918
msgid "Return the number of bytes written to the buffer."
msgstr "Возвращает количество байтов, записанных в буфер."

#: ../../library/asyncio-eventloop.rst:926
msgid ""
"Send *data* to the *sock* socket. Asynchronous version of :meth:`socket."
"sendall() <socket.socket.sendall>`."
msgstr ""
"Отправьте *данные* в сокет *sock*. Асинхронная версия :meth:`socket."
"sendall() <socket.socket.sendall>`."

#: ../../library/asyncio-eventloop.rst:929
msgid ""
"This method continues to send to the socket until either all data in *data* "
"has been sent or an error occurs.  ``None`` is returned on success.  On "
"error, an exception is raised. Additionally, there is no way to determine "
"how much data, if any, was successfully processed by the receiving end of "
"the connection."
msgstr ""
"Этот метод продолжает отправлять данные в сокет до тех пор, пока не будут "
"отправлены все данные в *data* или не произойдет ошибка. ``None`` "
"возвращается в случае успеха. В случае ошибки возникает исключение. Кроме "
"того, невозможно определить, какой объем данных (если таковые имеются) был "
"успешно обработан принимающей стороной соединения."

#: ../../library/asyncio-eventloop.rst:937
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned an :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:944
msgid "Connect *sock* to a remote socket at *address*."
msgstr "Подключите *sock* к удаленному сокету по *адресу*."

#: ../../library/asyncio-eventloop.rst:946
msgid ""
"Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr "Асинхронная версия :meth:`socket.connect() <socket.socket.connect>`."

#: ../../library/asyncio-eventloop.rst:950
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling :func:`socket."
"inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to resolve the "
"*address*."
msgstr ""
"``адрес`` больше не требует разрешения. ``sock_connect`` попытается "
"проверить, разрешен ли уже *адрес*, вызвав :func:`socket.inet_pton`. В "
"противном случае для разрешения *адреса* будет использоваться :meth:`loop."
"getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:959
msgid ""
":meth:`loop.create_connection` and  :func:`asyncio.open_connection() "
"<open_connection>`."
msgstr ""
":meth:`loop.create_connection` и  :func:`asyncio.open_connection() "
"<open_connection>`."

#: ../../library/asyncio-eventloop.rst:965
msgid ""
"Accept a connection.  Modeled after the blocking :meth:`socket.accept() "
"<socket.socket.accept>` method."
msgstr ""
"Примите соединение. Создано по образцу блокирующего метода :meth:`socket."
"accept() <socket.socket.accept>`."

#: ../../library/asyncio-eventloop.rst:968
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""
"Сокет должен быть привязан к адресу и прослушивать соединения. Возвращаемое "
"значение представляет собой пару ``(conn, адрес)``, где *conn* — это *новый* "
"объект сокета, используемый для отправки и получения данных по соединению, а "
"*address* — это адрес, привязанный к сокету на другом конец соединения."

#: ../../library/asyncio-eventloop.rst:976
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""
"Несмотря на то, что этот метод всегда документировался как метод "
"сопрограммы, до Python 3.7 он возвращал :class:`Future`. Начиная с Python "
"3.7, это метод ``async def``."

#: ../../library/asyncio-eventloop.rst:983
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ":meth:`loop.create_server` и :func:`start_server`."

#: ../../library/asyncio-eventloop.rst:988
msgid ""
"Send a file using high-performance :mod:`os.sendfile` if possible. Return "
"the total number of bytes sent."
msgstr ""
"Если возможно, отправьте файл, используя высокопроизводительный :mod:`os."
"sendfile`. Возвращает общее количество отправленных байтов."

#: ../../library/asyncio-eventloop.rst:991
msgid ""
"Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr "Асинхронная версия :meth:`socket.sendfile() <socket.socket.sendfile>`."

#: ../../library/asyncio-eventloop.rst:993
msgid ""
"*sock* must be a non-blocking :const:`socket.SOCK_STREAM` :class:`~socket."
"socket`."
msgstr ""
"*sock* должен быть неблокирующим :const:`socket.SOCK_STREAM` :class:`~socket."
"socket`."

#: ../../library/asyncio-eventloop.rst:996
msgid "*file* must be a regular file object open in binary mode."
msgstr ""
"*файл* должен быть обычным файловым объектом, открытым в двоичном режиме."

#: ../../library/asyncio-eventloop.rst:1005
msgid ""
"*fallback*, when set to ``True``, makes asyncio manually read and send the "
"file when the platform does not support the sendfile syscall (e.g. Windows "
"or SSL socket on Unix)."
msgstr ""
"*fallback*, если установлено значение ``True``, заставляет asyncio вручную "
"читать и отправлять файл, когда платформа не поддерживает системный вызов "
"sendfile (например, сокет Windows или SSL в Unix)."

#: ../../library/asyncio-eventloop.rst:1009
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""
"Поднимите :exc:`SendfileNotAvailableError`, если система не поддерживает "
"системный вызов *sendfile* и *fallback* имеет значение ``False``."

#: ../../library/asyncio-eventloop.rst:1018
msgid "DNS"
msgstr "DNS"

#: ../../library/asyncio-eventloop.rst:1023
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr "Асинхронная версия :meth:`socket.getaddrinfo`."

#: ../../library/asyncio-eventloop.rst:1027
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr "Асинхронная версия :meth:`socket.getnameinfo`."

#: ../../library/asyncio-eventloop.rst:1029
msgid ""
"Both *getaddrinfo* and *getnameinfo* methods were always documented to "
"return a coroutine, but prior to Python 3.7 they were, in fact, returning :"
"class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are "
"coroutines."
msgstr ""
"Оба метода *getaddrinfo* и *getnameinfo* всегда были документированы для "
"возврата сопрограммы, но до Python 3.7 они фактически возвращали объекты :"
"class:`asyncio.Future`. Начиная с Python 3.7, оба метода являются "
"сопрограммами."

#: ../../library/asyncio-eventloop.rst:1037
msgid "Working with pipes"
msgstr "Работа с трубами"

#: ../../library/asyncio-eventloop.rst:1041
msgid "Register the read end of *pipe* in the event loop."
msgstr "Зарегистрируйте конец чтения *pipe* в цикле событий."

#: ../../library/asyncio-eventloop.rst:1046
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr "*pipe* — это :term:`файлоподобный объект <файловый объект>`."

#: ../../library/asyncio-eventloop.rst:1048
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports the :class:"
"`ReadTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""
"Возвращаемая пара ``(транспорт, протокол)``, где *transport* поддерживает "
"интерфейс :class:`ReadTransport`, а *protocol* — это объект, экземпляр "
"которого создается *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1052
#: ../../library/asyncio-eventloop.rst:1068
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""
"В цикле событий :class:`SelectorEventLoop` *pipe* устанавливается в "
"неблокирующий режим."

#: ../../library/asyncio-eventloop.rst:1057
msgid "Register the write end of *pipe* in the event loop."
msgstr "Зарегистрируйте конец записи *pipe* в цикле событий."

#: ../../library/asyncio-eventloop.rst:1062
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr "*pipe* — это :term:`файлоподобный объект <файловый объект>`."

#: ../../library/asyncio-eventloop.rst:1064
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports :class:"
"`WriteTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""
"Возвращаемая пара ``(транспорт, протокол)``, где *transport* поддерживает "
"интерфейс :class:`WriteTransport`, а *protocol* — это объект, экземпляр "
"которого создается *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1073
msgid ""
":class:`SelectorEventLoop` does not support the above methods on Windows.  "
"Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""
":class:`SelectorEventLoop` не поддерживает вышеуказанные методы в Windows. "
"Вместо этого используйте :class:`ProactorEventLoop` для Windows."

#: ../../library/asyncio-eventloop.rst:1078
msgid ""
"The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr "Методы :meth:`loop.subprocess_exec` и :meth:`loop.subprocess_shell`."

#: ../../library/asyncio-eventloop.rst:1083
msgid "Unix signals"
msgstr "Сигналы Unix"

#: ../../library/asyncio-eventloop.rst:1087
msgid "Set *callback* as the handler for the *signum* signal."
msgstr "Установите *callback* в качестве обработчика сигнала *signum*."

#: ../../library/asyncio-eventloop.rst:1089
msgid ""
"The callback will be invoked by *loop*, along with other queued callbacks "
"and runnable coroutines of that event loop. Unlike signal handlers "
"registered using :func:`signal.signal`, a callback registered with this "
"function is allowed to interact with the event loop."
msgstr ""
"Обратный вызов будет вызван *loop* вместе с другими обратными вызовами в "
"очереди и выполняемыми сопрограммами этого цикла событий. В отличие от "
"обработчиков сигналов, зарегистрированных с помощью :func:`signal.signal`, "
"обратному вызову, зарегистрированному с помощью этой функции, разрешено "
"взаимодействовать с циклом событий."

#: ../../library/asyncio-eventloop.rst:1094
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""
"Поднимите :exc:`ValueError`, если номер сигнала недействителен или не может "
"быть перехвачен. Поднимите :exc:`RuntimeError`, если возникла проблема с "
"настройкой обработчика."

#: ../../library/asyncio-eventloop.rst:1100
msgid ""
"Like :func:`signal.signal`, this function must be invoked in the main thread."
msgstr ""
"Как и :func:`signal.signal`, эта функция должна вызываться в основном потоке."

#: ../../library/asyncio-eventloop.rst:1105
msgid "Remove the handler for the *sig* signal."
msgstr "Удалите обработчик сигнала *sig*."

#: ../../library/asyncio-eventloop.rst:1107
msgid ""
"Return ``True`` if the signal handler was removed, or ``False`` if no "
"handler was set for the given signal."
msgstr ""
"Верните True, если обработчик сигнала был удален, или False, если для "
"данного сигнала не был установлен обработчик."

#: ../../library/asyncio-eventloop.rst:1114
msgid "The :mod:`signal` module."
msgstr "Модуль :mod:`signal`"

#: ../../library/asyncio-eventloop.rst:1118
msgid "Executing code in thread or process pools"
msgstr "Выполнение кода в пулах потоков или процессов"

#: ../../library/asyncio-eventloop.rst:1122
msgid "Arrange for *func* to be called in the specified executor."
msgstr "Организуйте вызов *func* в указанном исполнителе."

#: ../../library/asyncio-eventloop.rst:1124
msgid ""
"The *executor* argument should be an :class:`concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1169
msgid ""
"Note that the entry point guard (``if __name__ == '__main__'``) is required "
"for option 3 due to the peculiarities of :mod:`multiprocessing`, which is "
"used by :class:`~concurrent.futures.ProcessPoolExecutor`. See :ref:`Safe "
"importing of main module <multiprocessing-safe-main-import>`."
msgstr ""
"Обратите внимание, что защита точки входа (``if __name__ == '__main__'``) "
"требуется для варианта 3 из-за особенностей :mod:`multiprocessing`, который "
"используется :class:`~concurrent.futures.ProcessPoolExecutor `. См. :ref:"
"`Безопасный импорт основного модуля <multiprocessing-safe-main-import>`."

#: ../../library/asyncio-eventloop.rst:1174
msgid "This method returns a :class:`asyncio.Future` object."
msgstr "Этот метод возвращает объект :class:`asyncio.Future`."

#: ../../library/asyncio-eventloop.rst:1176
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *func*."
msgstr ""
"Используйте :func:`functools.partial` :ref:`для передачи аргументов "
"ключевого слова <asyncio-pass-keywords>` в *func*."

#: ../../library/asyncio-eventloop.rst:1179
msgid ""
":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the "
"thread pool executor it creates, instead leaving it up to the thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the "
"default."
msgstr ""
":meth:`loop.run_in_executor` больше не настраивает ``max_workers`` "
"исполнителя пула потоков, который он создает, вместо этого оставляя это на "
"усмотрение исполнителя пула потоков (:class:`~concurrent.futures."
"ThreadPoolExecutor`) для установки по умолчанию."

#: ../../library/asyncio-eventloop.rst:1188
msgid ""
"Set *executor* as the default executor used by :meth:`run_in_executor`. "
"*executor* should be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1192
msgid ""
"Using an executor that is not an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor` is deprecated and will trigger an error in Python 3.9."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1197
msgid ""
"*executor* must be an instance of :class:`concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1202
msgid "Error Handling API"
msgstr "API для обработки ошибок"

#: ../../library/asyncio-eventloop.rst:1204
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr "Позволяет настраивать обработку исключений в цикле событий."

#: ../../library/asyncio-eventloop.rst:1208
msgid "Set *handler* as the new event loop exception handler."
msgstr ""
"Установите *handler* в качестве нового обработчика исключений цикла событий."

#: ../../library/asyncio-eventloop.rst:1210
msgid ""
"If *handler* is ``None``, the default exception handler will be set.  "
"Otherwise, *handler* must be a callable with the signature matching ``(loop, "
"context)``, where ``loop`` is a reference to the active event loop, and "
"``context`` is a ``dict`` object containing the details of the exception "
"(see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""
"Если *handler* имеет значение «None», будет установлен обработчик исключений "
"по умолчанию. В противном случае *handler* должен быть вызываемым объектом с "
"сигнатурой, соответствующей ``(loop, context)``, где ``loop`` — это ссылка "
"на активный цикл событий, а ``context`` — это ``dict`. `объект, содержащий "
"подробную информацию об исключении (более подробную информацию о контексте "
"см. в документации :meth:`call_Exception_handler`)."

#: ../../library/asyncio-eventloop.rst:1220
msgid ""
"Return the current exception handler, or ``None`` if no custom exception "
"handler was set."
msgstr ""
"Возвращает текущий обработчик исключений или None, если специальный "
"обработчик исключений не был установлен."

#: ../../library/asyncio-eventloop.rst:1227
msgid "Default exception handler."
msgstr "Обработчик исключений по умолчанию."

#: ../../library/asyncio-eventloop.rst:1229
msgid ""
"This is called when an exception occurs and no exception handler is set. "
"This can be called by a custom exception handler that wants to defer to the "
"default handler behavior."
msgstr ""
"Он вызывается, когда возникает исключение и обработчик исключений не "
"установлен. Это может быть вызвано пользовательским обработчиком исключений, "
"который хочет перейти к поведению обработчика по умолчанию."

#: ../../library/asyncio-eventloop.rst:1233
msgid ""
"*context* parameter has the same meaning as in :meth:"
"`call_exception_handler`."
msgstr ""
"Параметр *context* имеет то же значение, что и в :meth:"
"`call_Exception_handler`."

#: ../../library/asyncio-eventloop.rst:1238
msgid "Call the current event loop exception handler."
msgstr "Вызовите текущий обработчик исключений цикла событий."

#: ../../library/asyncio-eventloop.rst:1240
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced in future Python versions):"
msgstr ""
"*context* — это объект ``dict``, содержащий следующие ключи (новые ключи "
"могут быть добавлены в будущих версиях Python):"

#: ../../library/asyncio-eventloop.rst:1243
msgid "'message': Error message;"
msgstr "«сообщение»: сообщение об ошибке;"

#: ../../library/asyncio-eventloop.rst:1244
msgid "'exception' (optional): Exception object;"
msgstr "«исключение» (необязательно): объект исключения;"

#: ../../library/asyncio-eventloop.rst:1245
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr "'future' (необязательно): экземпляр :class:`asyncio.Future`;"

#: ../../library/asyncio-eventloop.rst:1246
msgid "'task' (optional): :class:`asyncio.Task` instance;"
msgstr "'task' (необязательно): экземпляр :class:`asyncio.Task`;"

#: ../../library/asyncio-eventloop.rst:1247
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr "'handle' (необязательно): экземпляр :class:`asyncio.Handle`;"

#: ../../library/asyncio-eventloop.rst:1248
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""
"'protocol' (необязательно): :ref:`Protocol <asyncio-protocol>` экземпляр;"

#: ../../library/asyncio-eventloop.rst:1249
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""
"'transport' (необязательно): :ref:`Transport <asyncio-transport>` экземпляр;"

#: ../../library/asyncio-eventloop.rst:1250
msgid "'socket' (optional): :class:`socket.socket` instance;"
msgstr "'socket' (необязательно): экземпляр :class:`socket.socket`;"

#: ../../library/asyncio-eventloop.rst:1252
msgid "'asyncgen' (optional): Asynchronous generator that caused"
msgstr "'asyncgen' (необязательно): асинхронный генератор, вызвавший"

#: ../../library/asyncio-eventloop.rst:1252
msgid "the exception."
msgstr "Исключение."

#: ../../library/asyncio-eventloop.rst:1256
msgid ""
"This method should not be overloaded in subclassed event loops.  For custom "
"exception handling, use the :meth:`set_exception_handler()` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1261
msgid "Enabling debug mode"
msgstr "Включение режима отладки"

#: ../../library/asyncio-eventloop.rst:1265
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr "Получите режим отладки (:class:`bool`) цикла событий."

#: ../../library/asyncio-eventloop.rst:1267
msgid ""
"The default value is ``True`` if the environment variable :envvar:"
"`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""
"Значением по умолчанию является ``True``, если для переменной среды :envvar:"
"`PYTHONASYNCIODEBUG` задана непустая строка, в противном случае ``False``."

#: ../../library/asyncio-eventloop.rst:1273
msgid "Set the debug mode of the event loop."
msgstr "Установите режим отладки цикла событий."

#: ../../library/asyncio-eventloop.rst:1277
msgid ""
"The new :ref:`Python Development Mode <devmode>` can now also be used to "
"enable the debug mode."
msgstr ""
"Новый :ref:`Режим разработки Python <devmode>` теперь также можно "
"использовать для включения режима отладки."

#: ../../library/asyncio-eventloop.rst:1282
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ":ref:`Режим отладки asyncio <asyncio-debug-mode>`."

#: ../../library/asyncio-eventloop.rst:1286
msgid "Running Subprocesses"
msgstr "Исполняемые подпроцессы"

#: ../../library/asyncio-eventloop.rst:1288
msgid ""
"Methods described in this subsections are low-level.  In regular async/await "
"code consider using the high-level :func:`asyncio.create_subprocess_shell` "
"and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""
"Методы, описанные в этом подразделе, являются низкоуровневыми. В обычном "
"коде async/await вместо этого рассмотрите возможность использования "
"вспомогательных функций высокого уровня :func:`asyncio."
"create_subprocess_shell` и :func:`asyncio.create_subprocess_exec`."

#: ../../library/asyncio-eventloop.rst:1295
msgid ""
"On Windows, the default event loop :class:`ProactorEventLoop` supports "
"subprocesses, whereas :class:`SelectorEventLoop` does not. See :ref:"
"`Subprocess Support on Windows <asyncio-windows-subprocess>` for details."
msgstr ""
"В Windows цикл событий по умолчанию :class:`ProactorEventLoop` поддерживает "
"подпроцессы, а :class:`SelectorEventLoop` — нет. Подробности см. в разделе "
"«Поддержка подпроцессов в Windows <asyncio-windows-subprocess>»."

#: ../../library/asyncio-eventloop.rst:1304
msgid ""
"Create a subprocess from one or more string arguments specified by *args*."
msgstr ""
"Создайте подпроцесс из одного или нескольких строковых аргументов, указанных "
"в *args*."

#: ../../library/asyncio-eventloop.rst:1307
msgid "*args* must be a list of strings represented by:"
msgstr "*args* должен быть списком строк, представленных:"

#: ../../library/asyncio-eventloop.rst:1309
msgid ":class:`str`;"
msgstr ":class:`str`;"

#: ../../library/asyncio-eventloop.rst:1310
msgid ""
"or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`."
msgstr ""
"или :class:`bytes`, закодированный в :ref:`кодировке файловой системы "
"<filesystem-encoding>`."

#: ../../library/asyncio-eventloop.rst:1313
msgid ""
"The first string specifies the program executable, and the remaining strings "
"specify the arguments.  Together, string arguments form the ``argv`` of the "
"program."
msgstr ""
"Первая строка указывает исполняемый файл программы, а остальные строки "
"указывают аргументы. Вместе строковые аргументы образуют argv программы."

#: ../../library/asyncio-eventloop.rst:1317
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=False`` and the list of strings passed as the first "
"argument; however, where :class:`~subprocess.Popen` takes a single argument "
"which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""
"Это похоже на класс стандартной библиотеки :class:`subprocess.Popen`, "
"вызываемый с ``shell=False`` и списком строк, передаваемых в качестве "
"первого аргумента; однако, где :class:`~subprocess.Popen` принимает один "
"аргумент, который представляет собой список строк, *subprocess_exec* "
"принимает несколько строковых аргументов."

#: ../../library/asyncio-eventloop.rst:1323
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`asyncio.SubprocessProtocol` class."
msgstr ""
"*protocol_factory* должен быть вызываемым объектом, возвращающим подкласс "
"класса :class:`asyncio.SubprocessProtocol`."

#: ../../library/asyncio-eventloop.rst:1326
msgid "Other parameters:"
msgstr "Другие параметры:"

#: ../../library/asyncio-eventloop.rst:1328
msgid "*stdin* can be any of these:"
msgstr "*stdin* может быть любым из следующих:"

#: ../../library/asyncio-eventloop.rst:1330
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard input stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1333
#: ../../library/asyncio-eventloop.rst:1345
#: ../../library/asyncio-eventloop.rst:1357
msgid ""
"the :const:`subprocess.PIPE` constant (default) which will create a new pipe "
"and connect it,"
msgstr ""
"константа :const:`subprocess.PIPE` (по умолчанию), которая создаст новый "
"канал и подключит его,"

#: ../../library/asyncio-eventloop.rst:1335
#: ../../library/asyncio-eventloop.rst:1347
#: ../../library/asyncio-eventloop.rst:1359
msgid ""
"the value ``None`` which will make the subprocess inherit the file "
"descriptor from this process"
msgstr ""
"значение ``None``, которое заставит подпроцесс наследовать файловый "
"дескриптор от этого процесса"

#: ../../library/asyncio-eventloop.rst:1337
#: ../../library/asyncio-eventloop.rst:1349
#: ../../library/asyncio-eventloop.rst:1361
msgid ""
"the :const:`subprocess.DEVNULL` constant which indicates that the special :"
"data:`os.devnull` file will be used"
msgstr ""
"константа :const:`subprocess.DEVNULL`, которая указывает, что будет "
"использоваться специальный файл :data:`os.devnull`"

#: ../../library/asyncio-eventloop.rst:1340
msgid "*stdout* can be any of these:"
msgstr "*stdout* может быть любым из следующих:"

#: ../../library/asyncio-eventloop.rst:1342
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard output stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1352
msgid "*stderr* can be any of these:"
msgstr "*stderr* может быть любым из следующих:"

#: ../../library/asyncio-eventloop.rst:1354
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard error stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1363
msgid ""
"the :const:`subprocess.STDOUT` constant which will connect the standard "
"error stream to the process' standard output stream"
msgstr ""
"константа :const:`subprocess.STDOUT`, которая соединит стандартный поток "
"ошибок со стандартным потоком вывода процесса."

#: ../../library/asyncio-eventloop.rst:1366
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*, "
"*encoding* and *errors*, which should not be specified at all."
msgstr ""
"Все остальные аргументы ключевого слова передаются в :class:`subprocess."
"Popen` без интерпретации, за исключением *bufsize*, *universal_newlines*, "
"*shell*, *text*, *encoding* и *errors*, которые не следует указывать в все."

#: ../../library/asyncio-eventloop.rst:1371
msgid ""
"The ``asyncio`` subprocess API does not support decoding the streams as "
"text. :func:`bytes.decode` can be used to convert the bytes returned from "
"the stream to text."
msgstr ""
"API подпроцесса asyncio не поддерживает декодирование потоков в текст. :func:"
"`bytes.decode` можно использовать для преобразования байтов, возвращаемых из "
"потока, в текст."

#: ../../library/asyncio-eventloop.rst:1375
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for documentation "
"on other arguments."
msgstr ""
"См. конструктор класса :class:`subprocess.Popen` для получения документации "
"по другим аргументам."

#: ../../library/asyncio-eventloop.rst:1378
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`asyncio.SubprocessTransport` base class and *protocol* is an "
"object instantiated by the *protocol_factory*."
msgstr ""
"Возвращает пару ``(транспорт, протокол)``, где *transport* соответствует "
"базовому классу :class:`asyncio.SubprocessTransport`, а *protocol* — это "
"объект, экземпляр которого создается *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1386
msgid ""
"Create a subprocess from *cmd*, which can be a :class:`str` or a :class:"
"`bytes` string encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`, using the platform's \"shell\" syntax."
msgstr ""
"Создайте подпроцесс из *cmd*, который может представлять собой строку :class:"
"`str` или :class:`bytes`, закодированную в :ref:`кодировку файловой системы "
"<filesystem-encoding>`, используя синтаксис оболочки платформы. ."

#: ../../library/asyncio-eventloop.rst:1391
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=True``."
msgstr ""
"Это похоже на класс стандартной библиотеки :class:`subprocess.Popen`, "
"вызываемый с ``shell=True``."

#: ../../library/asyncio-eventloop.rst:1394
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`SubprocessProtocol` class."
msgstr ""
"*protocol_factory* должен быть вызываемым объектом, возвращающим подкласс "
"класса :class:`SubprocessProtocol`."

#: ../../library/asyncio-eventloop.rst:1397
msgid ""
"See :meth:`~loop.subprocess_exec` for more details about the remaining "
"arguments."
msgstr ""
"См. :meth:`~loop.subprocess_exec` для получения более подробной информации "
"об остальных аргументах."

#: ../../library/asyncio-eventloop.rst:1400
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`SubprocessTransport` base class and *protocol* is an object "
"instantiated by the *protocol_factory*."
msgstr ""
"Возвращает пару ``(транспорт, протокол)``, где *transport* соответствует "
"базовому классу :class:`SubprocessTransport`, а *protocol* — это объект, "
"экземпляр которого создается *protocol_factory*."

#: ../../library/asyncio-eventloop.rst:1405
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special characters in strings that are going to be "
"used to construct shell commands."
msgstr ""
"Приложение несет ответственность за то, чтобы все пробелы и специальные "
"символы были заключены в кавычки соответствующим образом, чтобы избежать `_ "
"уязвимостей внедрения оболочки <https://en.wikipedia.org/wiki/"
"Shell_injection#Shell_injection>`_. Функцию :func:`shlex.quote` можно "
"использовать для правильного экранирования пробелов и специальных символов в "
"строках, которые будут использоваться для создания команд оболочки."

#: ../../library/asyncio-eventloop.rst:1414
msgid "Callback Handles"
msgstr "Дескрипторы обратного вызова"

#: ../../library/asyncio-eventloop.rst:1418
msgid ""
"A callback wrapper object returned by :meth:`loop.call_soon`, :meth:`loop."
"call_soon_threadsafe`."
msgstr ""
"Объект-оболочка обратного вызова, возвращаемый :meth:`loop.call_soon`, :meth:"
"`loop.call_soon_threadsafe`."

#: ../../library/asyncio-eventloop.rst:1423
msgid ""
"Cancel the callback.  If the callback has already been canceled or executed, "
"this method has no effect."
msgstr ""
"Отмените обратный звонок. Если обратный вызов уже был отменен или выполнен, "
"этот метод не имеет никакого эффекта."

#: ../../library/asyncio-eventloop.rst:1428
msgid "Return ``True`` if the callback was cancelled."
msgstr "Верните True, если обратный вызов был отменен."

#: ../../library/asyncio-eventloop.rst:1434
msgid ""
"A callback wrapper object returned by :meth:`loop.call_later`, and :meth:"
"`loop.call_at`."
msgstr ""
"Объект-оболочка обратного вызова, возвращаемый :meth:`loop.call_later` и :"
"meth:`loop.call_at`."

#: ../../library/asyncio-eventloop.rst:1437
msgid "This class is a subclass of :class:`Handle`."
msgstr "Этот класс является подклассом :class:`Handle`."

#: ../../library/asyncio-eventloop.rst:1441
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""
"Возвращает запланированное время обратного вызова в виде :class:`float` "
"секунд."

#: ../../library/asyncio-eventloop.rst:1443
msgid ""
"The time is an absolute timestamp, using the same time reference as :meth:"
"`loop.time`."
msgstr ""
"Время представляет собой абсолютную временную метку, использующую ту же "
"ссылку времени, что и :meth:`loop.time`."

#: ../../library/asyncio-eventloop.rst:1450
msgid "Server Objects"
msgstr "Объекты сервера"

#: ../../library/asyncio-eventloop.rst:1452
msgid ""
"Server objects are created by :meth:`loop.create_server`, :meth:`loop."
"create_unix_server`, :func:`start_server`, and :func:`start_unix_server` "
"functions."
msgstr ""
"Объекты сервера создаются функциями :meth:`loop.create_server`, :meth:`loop."
"create_unix_server`, :func:`start_server` и :func:`start_unix_server`."

#: ../../library/asyncio-eventloop.rst:1456
msgid "Do not instantiate the class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1460
msgid ""
"*Server* objects are asynchronous context managers.  When used in an ``async "
"with`` statement, it's guaranteed that the Server object is closed and not "
"accepting new connections when the ``async with`` statement is completed::"
msgstr ""
"Объекты *Server* представляют собой асинхронные менеджеры контекста. При "
"использовании в операторе ``async with`` гарантируется, что объект Сервер "
"закроется и не будет принимать новые соединения после завершения оператора "
"``async with``:"

#: ../../library/asyncio-eventloop.rst:1473
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr ""
"Объект сервера является асинхронным контекстным менеджером, начиная с Python "
"3.7."

#: ../../library/asyncio-eventloop.rst:1478
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""
"Прекратите обслуживание: закройте сокеты прослушивания и установите для "
"атрибута :attr:`sockets` значение ``None``."

#: ../../library/asyncio-eventloop.rst:1481
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""
"Сокеты, представляющие существующие входящие клиентские соединения, остаются "
"открытыми."

#: ../../library/asyncio-eventloop.rst:1484
msgid ""
"The server is closed asynchronously, use the :meth:`wait_closed` coroutine "
"to wait until the server is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1489
msgid "Return the event loop associated with the server object."
msgstr "Верните цикл событий, связанный с объектом сервера."

#: ../../library/asyncio-eventloop.rst:1495
msgid "Start accepting connections."
msgstr "Начните принимать соединения."

#: ../../library/asyncio-eventloop.rst:1497
msgid ""
"This method is idempotent, so it can be called when the server is already "
"being serving."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1500
msgid ""
"The *start_serving* keyword-only parameter to :meth:`loop.create_server` "
"and :meth:`asyncio.start_server` allows creating a Server object that is not "
"accepting connections initially.  In this case ``Server.start_serving()``, "
"or :meth:`Server.serve_forever` can be used to make the Server start "
"accepting connections."
msgstr ""
"Параметр *start_serving*, содержащий только ключевые слова, для :meth:`loop."
"create_server` и :meth:`asyncio.start_server` позволяет создать объект "
"Сервера, который изначально не принимает соединения. В этом случае можно "
"использовать ``Server.start_serving()`` или :meth:`Server.serve_forever`, "
"чтобы заставить Сервер начать принимать соединения."

#: ../../library/asyncio-eventloop.rst:1511
msgid ""
"Start accepting connections until the coroutine is cancelled. Cancellation "
"of ``serve_forever`` task causes the server to be closed."
msgstr ""
"Начните принимать соединения, пока сопрограмма не будет отменена. Отмена "
"задачи «serve_forever» приводит к закрытию сервера."

#: ../../library/asyncio-eventloop.rst:1515
msgid ""
"This method can be called if the server is already accepting connections.  "
"Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""
"Этот метод можно вызвать, если сервер уже принимает соединения. Для одного "
"объекта *Server* может существовать только одна задача ``serve_forever``."

#: ../../library/asyncio-eventloop.rst:1537
msgid "Return ``True`` if the server is accepting new connections."
msgstr "Верните True, если сервер принимает новые соединения."

#: ../../library/asyncio-eventloop.rst:1543
msgid "Wait until the :meth:`close` method completes."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1547
msgid "List of :class:`socket.socket` objects the server is listening on."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1549
msgid ""
"Prior to Python 3.7 ``Server.sockets`` used to return an internal list of "
"server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""
"До Python 3.7 ``Server.sockets`` использовался для прямого возврата "
"внутреннего списка сокетов сервера. В версии 3.7 возвращается копия этого "
"списка."

#: ../../library/asyncio-eventloop.rst:1559
msgid "Event Loop Implementations"
msgstr "Реализации цикла событий"

#: ../../library/asyncio-eventloop.rst:1561
msgid ""
"asyncio ships with two different event loop implementations: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""
"asyncio поставляется с двумя различными реализациями цикла событий: :class:"
"`SelectorEventLoop` и :class:`ProactorEventLoop`."

#: ../../library/asyncio-eventloop.rst:1564
msgid ""
"By default asyncio is configured to use :class:`SelectorEventLoop` on Unix "
"and :class:`ProactorEventLoop` on Windows."
msgstr ""
"По умолчанию asyncio настроен на использование :class:`SelectorEventLoop` в "
"Unix и :class:`ProactorEventLoop` в Windows."

#: ../../library/asyncio-eventloop.rst:1570
msgid "An event loop based on the :mod:`selectors` module."
msgstr "Цикл событий, основанный на модуле :mod:`selectors`."

#: ../../library/asyncio-eventloop.rst:1572
msgid ""
"Uses the most efficient *selector* available for the given platform.  It is "
"also possible to manually configure the exact selector implementation to be "
"used::"
msgstr ""
"Использует наиболее эффективный *селектор*, доступный для данной платформы. "
"Также можно вручную настроить конкретную реализацию селектора, которая будет "
"использоваться:"

#: ../../library/asyncio-eventloop.rst:1587
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ""
":ref:`Наличие\n"
"`: Юникс, Windows."

#: ../../library/asyncio-eventloop.rst:1592
msgid "An event loop for Windows that uses \"I/O Completion Ports\" (IOCP)."
msgstr ""
"Цикл событий для Windows, использующий «Порты завершения ввода-"
"вывода» (IOCP)."

#: ../../library/asyncio-eventloop.rst:1595
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`Availability <availability>`: Windows."

#: ../../library/asyncio-eventloop.rst:1598
msgid ""
"`MSDN documentation on I/O Completion Ports <https://docs.microsoft.com/en-"
"ca/windows/desktop/FileIO/i-o-completion-ports>`_."
msgstr ""
"`Документация MSDN по портам завершения ввода-вывода <https://docs.microsoft."
"com/en-ca/windows/desktop/FileIO/io-completion-ports>`_."

#: ../../library/asyncio-eventloop.rst:1604
msgid "Abstract base class for asyncio-compliant event loops."
msgstr "Абстрактный базовый класс для асинхронных циклов событий."

#: ../../library/asyncio-eventloop.rst:1606
msgid ""
"The :ref:`asyncio-event-loop-methods` section lists all methods that an "
"alternative implementation of ``AbstractEventLoop`` should have defined."
msgstr ""
"В разделе :ref:`asyncio-event-loop-methods` перечислены все методы, которые "
"должна была определить альтернативная реализация ``AbstractEventLoop``."

#: ../../library/asyncio-eventloop.rst:1612
msgid "Examples"
msgstr "Примеры"

#: ../../library/asyncio-eventloop.rst:1614
msgid ""
"Note that all examples in this section **purposefully** show how to use the "
"low-level event loop APIs, such as :meth:`loop.run_forever` and :meth:`loop."
"call_soon`.  Modern asyncio applications rarely need to be written this way; "
"consider using the high-level functions like :func:`asyncio.run`."
msgstr ""
"Обратите внимание, что все примеры в этом разделе **целенаправленно** "
"показывают, как использовать API-интерфейсы низкоуровневого цикла событий, "
"такие как :meth:`loop.run_forever` и :meth:`loop.call_soon`. Современные "
"асинхронные приложения редко требуют написания таким образом; рассмотрите "
"возможность использования функций высокого уровня, таких как :func:`asyncio."
"run`."

#: ../../library/asyncio-eventloop.rst:1624
msgid "Hello World with call_soon()"
msgstr "Привет, мир с помощью call_soon()"

#: ../../library/asyncio-eventloop.rst:1626
msgid ""
"An example using the :meth:`loop.call_soon` method to schedule a callback. "
"The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""
"Пример использования метода :meth:`loop.call_soon` для планирования "
"обратного вызова. Обратный вызов отображает ``Hello World'`, а затем "
"останавливает цикл обработки событий::"

#: ../../library/asyncio-eventloop.rst:1650
msgid ""
"A similar :ref:`Hello World <coroutine>` example created with a coroutine "
"and the :func:`run` function."
msgstr ""
"Аналогичный пример Hello World <coroutine>, созданный с помощью сопрограммы "
"и функции :func:`run`."

#: ../../library/asyncio-eventloop.rst:1657
msgid "Display the current date with call_later()"
msgstr "Отобразите текущую дату с помощью call_later()"

#: ../../library/asyncio-eventloop.rst:1659
msgid ""
"An example of a callback displaying the current date every second. The "
"callback uses the :meth:`loop.call_later` method to reschedule itself after "
"5 seconds, and then stops the event loop::"
msgstr ""
"Пример обратного вызова, отображающего текущую дату каждую секунду. Обратный "
"вызов использует метод :meth:`loop.call_later` для перепланирования себя "
"через 5 секунд, а затем останавливает цикл событий::"

#: ../../library/asyncio-eventloop.rst:1687
msgid ""
"A similar :ref:`current date <asyncio_example_sleep>` example created with a "
"coroutine and the :func:`run` function."
msgstr ""
"Аналогичный пример текущей даты <asyncio_example_sleep>, созданный с помощью "
"сопрограммы и функции :func:`run`."

#: ../../library/asyncio-eventloop.rst:1694
msgid "Watch a file descriptor for read events"
msgstr "Следите за дескриптором файла на предмет событий чтения"

#: ../../library/asyncio-eventloop.rst:1696
msgid ""
"Wait until a file descriptor received some data using the :meth:`loop."
"add_reader` method and then close the event loop::"
msgstr ""
"Подождите, пока дескриптор файла не получит некоторые данные с помощью "
"метода :meth:`loop.add_reader`, а затем закройте цикл обработки событий::"

#: ../../library/asyncio-eventloop.rst:1734
msgid ""
"A similar :ref:`example <asyncio_example_create_connection>` using "
"transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""
"Аналогичный :ref:`пример <asyncio_example_create_connection>` с "
"использованием транспортов, протоколов и метода :meth:`loop."
"create_connection`."

#: ../../library/asyncio-eventloop.rst:1738
msgid ""
"Another similar :ref:`example <asyncio_example_create_connection-streams>` "
"using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""
"Другой похожий :ref:`пример <asyncio_example_create_connection-streams>` с "
"использованием высокоуровневой :func:`asyncio.open_connection` функции и "
"потоков."

#: ../../library/asyncio-eventloop.rst:1746
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr "Установите обработчики сигналов для SIGINT и SIGTERM"

#: ../../library/asyncio-eventloop.rst:1748
msgid "(This ``signals`` example only works on Unix.)"
msgstr "(Этот пример сигналов работает только в Unix.)"

#: ../../library/asyncio-eventloop.rst:1750
msgid ""
"Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using "
"the :meth:`loop.add_signal_handler` method::"
msgstr ""
