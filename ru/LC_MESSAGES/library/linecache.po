# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/linecache.rst:2
msgid ":mod:`!linecache` --- Random access to text lines"
msgstr ":mod:`!linecache` --- Произвольный доступ к текстовым строкам"

#: ../../library/linecache.rst:9
msgid "**Source code:** :source:`Lib/linecache.py`"
msgstr "**Исходный код:** :source:`Lib/linecache.py`"

#: ../../library/linecache.rst:13
msgid ""
"The :mod:`linecache` module allows one to get any line from a Python source "
"file, while attempting to optimize internally, using a cache, the common "
"case where many lines are read from a single file.  This is used by the :mod:"
"`traceback` module to retrieve source lines for inclusion in  the formatted "
"traceback."
msgstr ""
"Модуль :mod:`linecache` позволяет получить любую строку из исходного файла "
"Python, одновременно пытаясь выполнить внутреннюю оптимизацию, используя "
"кэш, что является распространенным случаем, когда из одного файла "
"считывается много строк. Это используется модулем :mod:`traceback` для "
"извлечения исходных строк для включения в отформатированную обратную "
"трассировку."

#: ../../library/linecache.rst:18
msgid ""
"The :func:`tokenize.open` function is used to open files. This function "
"uses :func:`tokenize.detect_encoding` to get the encoding of the file; in "
"the absence of an encoding token, the file encoding defaults to UTF-8."
msgstr ""
"Функция :func:`tokenize.open` используется для открытия файлов. Эта функция "
"использует :func:`tokenize.detect_encoding` для получения кодировки файла; "
"при отсутствии маркера кодировки по умолчанию она установлена UTF-8."

#: ../../library/linecache.rst:22
msgid "The :mod:`linecache` module defines the following functions:"
msgstr "Модуль :mod:`linecache` определяет следующие функции:"

#: ../../library/linecache.rst:27
msgid ""
"Get line *lineno* from file named *filename*. This function will never raise "
"an exception --- it will return ``''`` on errors (the terminating newline "
"character will be included for lines that are found)."
msgstr ""
"Получает строку *lineno* из файла с именем *filename*. Эта функция никогда "
"не вызовет исключение - она вернет ``''`` при ошибках (для найденных строк "
"будет включен завершающий символ новой строки)."

#: ../../library/linecache.rst:33
msgid ""
"If a file named *filename* is not found, the function first checks for a :"
"pep:`302` ``__loader__`` in *module_globals*. If there is such a loader and "
"it defines a ``get_source`` method, then that determines the source lines "
"(if ``get_source()`` returns ``None``, then ``''`` is returned). Finally, if "
"*filename* is a relative filename, it is looked up relative to the entries "
"in the module search path, ``sys.path``."
msgstr ""
"Если файл с именем *filename* не найден, функция сначала проверяет наличие :"
"pep:`302` ``__loader__`` в *module_globals*. Если такой загрузчик существует "
"и он определяет метод ``get_source``, то он определяет исходные строки (если "
"``get_source()`` возвращает ``None``, то возвращается ``''``). Наконец, если "
"*filename* является относительным именем файла, оно ищется относительно "
"записей в пути поиска модуля ``sys.path``."

#: ../../library/linecache.rst:44
msgid ""
"Clear the cache.  Use this function if you no longer need lines from files "
"previously read using :func:`getline`."
msgstr ""
"Очищает кэш. Используйте эту функцию, если вам больше не нужны строки из "
"файлов, которые ранее считывались с помощью :func:`getline`."

#: ../../library/linecache.rst:50
msgid ""
"Check the cache for validity.  Use this function if files in the cache  may "
"have changed on disk, and you require the updated version.  If *filename* is "
"omitted, it will check all the entries in the cache."
msgstr ""
"Проверяет работоспособность кэша. Используйте эту функцию, если файлы в кэше "
"на диске могли измениться и вам требуется обновленная версия. Если *имя "
"файла* опущено, программа проверит все записи в кэше."

#: ../../library/linecache.rst:56
msgid ""
"Capture enough detail about a non-file-based module to permit getting its "
"lines later via :func:`getline` even if *module_globals* is ``None`` in the "
"later call. This avoids doing I/O until a line is actually needed, without "
"having to carry the module globals around indefinitely."
msgstr ""
"Собирает достаточно подробностей о модуле, не основанном на файлах, чтобы "
"позже можно было получить его строки с помощью :func:`getline`, даже если "
"*module_globals* имеет значение ``None`` при последующем вызове. Это "
"позволяет избежать выполнения операций ввода-вывода до тех пор, пока строка "
"действительно не понадобится, без необходимости бесконечно переносить "
"глобальные значения модуля."

#: ../../library/linecache.rst:63
msgid "Example::"
msgstr "Пример::"

#: ../../library/linecache.rst:65
msgid ""
">>> import linecache\n"
">>> linecache.getline(linecache.__file__, 8)\n"
"'import sys\\n'"
msgstr ""
">>> import linecache\n"
">>> linecache.getline(linecache.__file__, 8)\n"
"'import sys\\n'"

#: ../../library/linecache.rst:31
msgid "module"
msgstr "модуль"

#: ../../library/linecache.rst:31
msgid "search"
msgstr "поиск"

#: ../../library/linecache.rst:31
msgid "path"
msgstr "путь"
