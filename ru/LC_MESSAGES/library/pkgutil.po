# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`!pkgutil` --- Package extension utility"
msgstr ":mod:`!pkgutil` --- Утилита расширения пакета"

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**Исходный код:** :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""
"Этот модуль предоставляет утилиты для системы импорта, в частности поддержку "
"пакетов."

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr "Именованный кортеж, содержащий краткую информацию о модуле."

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""
"Расширьте путь поиска модулей, входящих в пакет. Предполагаемое "
"использование — поместить следующий код в :file:`__init__.py`::"

#: ../../library/pkgutil.rst:25
msgid ""
"from pkgutil import extend_path\n"
"__path__ = extend_path(__path__, __name__)"
msgstr ""
"from pkgutil import extend_path\n"
"__path__ = extend_path(__path__, __name__)"

#: ../../library/pkgutil.rst:28
msgid ""
"For each directory on :data:`sys.path` that has a subdirectory that matches "
"the package name, add the subdirectory to the package's :attr:`~module."
"__path__`. This is useful if one wants to distribute different parts of a "
"single logical package as multiple directories."
msgstr ""
"Для каждого каталога в :data:`sys.path`, у которого есть подкаталог, "
"соответствующий имени пакета, добавьте подкаталог в :attr:`~module.__path__` "
"пакета. Это полезно, если вы хотите распределить разные части одного "
"логического пакета по нескольким каталогам."

#: ../../library/pkgutil.rst:34
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from skipping blank lines and ignoring comments, all entries "
"found in a :file:`\\*.pkg` file are added to the path, regardless of whether "
"they exist on the filesystem (this is a feature)."
msgstr ""
"Он также ищет файлы :file:`\\*.pkg`, начинающиеся с которых ``*`` "
"соответствует аргументу *name*. Эта функция аналогична файлам :file:`\\*."
"pth` (дополнительную информацию см. в модуле :mod:`site`), за исключением "
"того, что в ней нет специальных строк, начинающихся с ``import``. Файлу :"
"file:`\\*.pkg` доверяют по номинальной стоимости: помимо пропуска пустых "
"строк и игнорирования комментариев, все записи, найденные в файле :file:`\\*."
"pkg`, добавляются к пути, независимо от того, они существуют в файловой "
"системе (это особенность)."

#: ../../library/pkgutil.rst:42
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""
"Если входной путь не является списком (как в случае с замороженными "
"пакетами), он возвращается без изменений. Путь ввода не изменяется; "
"возвращается расширенная копия. Элементы добавляются к копии только в конце."

#: ../../library/pkgutil.rst:46
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not strings referring to existing directories are ignored. "
"Unicode items on :data:`sys.path` that cause errors when used as filenames "
"may cause this function to raise an exception (in line with :func:`os.path."
"isdir` behavior)."
msgstr ""
"Предполагается, что :data:`sys.path` представляет собой последовательность. "
"Элементы :data:`sys.path`, которые не являются строками, ссылающимися на "
"существующие каталоги, игнорируются. Элементы Unicode в :data:`sys.path`, "
"которые вызывают ошибки при использовании в качестве имен файлов, могут "
"привести к тому, что эта функция вызовет исключение (в соответствии с "
"поведением :func:`os.path.isdir`)."

#: ../../library/pkgutil.rst:54
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr "Получить модуль :term:`loader` для данного *полного имени*."

#: ../../library/pkgutil.rst:56
msgid ""
"This is a backwards compatibility wrapper around :func:`importlib.util."
"find_spec` that converts most failures to :exc:`ImportError` and only "
"returns the loader rather than the full :class:`importlib.machinery."
"ModuleSpec`."
msgstr ""
"Это оболочка обратной совместимости вокруг :func:`importlib.util.find_spec`, "
"которая преобразует большинство ошибок в :exc:`ImportError` и возвращает "
"только загрузчик, а не полный :class:`importlib.machinery.ModuleSpec`."

#: ../../library/pkgutil.rst:61 ../../library/pkgutil.rst:82
#: ../../library/pkgutil.rst:97 ../../library/pkgutil.rst:121
#: ../../library/pkgutil.rst:142 ../../library/pkgutil.rst:181
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal :pep:`302` import emulation."
msgstr ""
"Обновлен, чтобы основываться непосредственно на :mod:`importlib`, а не "
"полагаться на внутреннюю эмуляцию импорта :pep:`302` пакета."

#: ../../library/pkgutil.rst:65 ../../library/pkgutil.rst:101
msgid "Updated to be based on :pep:`451`"
msgstr "Обновлено на основе :pep:`451`"

#: ../../library/pkgutil.rst:68 ../../library/pkgutil.rst:104
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr "Вместо этого используйте :func:`importlib.util.find_spec`."

#: ../../library/pkgutil.rst:74
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr "Получите :term:`finder` для данного *path_item*."

#: ../../library/pkgutil.rst:76
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""
"Возвращенный искатель кэшируется в :data:`sys.path_importer_cache`, если он "
"был вновь создан с помощью перехватчика пути."

#: ../../library/pkgutil.rst:79
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""
"Кэш (или его часть) можно очистить вручную, если необходимо повторное "
"сканирование :data:`sys.path_hooks`."

#: ../../library/pkgutil.rst:89
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr "Получите объект :term:`loader` для *module_or_name*."

#: ../../library/pkgutil.rst:91
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"Если модуль или пакет доступен через обычный механизм импорта, возвращается "
"оболочка соответствующей части этого механизма. Возвращает None, если модуль "
"не может быть найден или импортирован. Если указанный модуль еще не "
"импортирован, импортируется содержащий его пакет (если таковой имеется), "
"чтобы установить пакет ``__path__``."

#: ../../library/pkgutil.rst:110
msgid "Yield :term:`finder` objects for the given module name."
msgstr "Возвращает объекты :term:`finder` для данного имени модуля."

#: ../../library/pkgutil.rst:112
msgid ""
"If fullname contains a ``'.'``, the finders will be for the package "
"containing fullname, otherwise they will be all registered top level finders "
"(i.e. those on both :data:`sys.meta_path` and :data:`sys.path_hooks`)."
msgstr ""
"Если полное имя содержит ``'.'``, средства поиска будут относиться к пакету, "
"содержащему полное имя, в противном случае все они будут зарегистрированными "
"средствами поиска верхнего уровня (т. е. как в :data:`sys.meta_path`, так и "
"в :data:`sys). .path_hooks`)."

#: ../../library/pkgutil.rst:116
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""
"Если указанный модуль находится в пакете, этот пакет импортируется как "
"побочный эффект вызова этой функции."

#: ../../library/pkgutil.rst:119
msgid "If no module name is specified, all top level finders are produced."
msgstr ""
"Если имя модуля не указано, создаются все средства поиска верхнего уровня."

#: ../../library/pkgutil.rst:128
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on :data:`sys.path`."
msgstr ""
"Возвращает :class:`ModuleInfo` для всех подмодулей в *path* или, если *path* "
"имеет значение ``None``, для всех модулей верхнего уровня в :data:`sys.path`."

#: ../../library/pkgutil.rst:131 ../../library/pkgutil.rst:152
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""
"*path* должно быть либо ``None``, либо списком путей для поиска модулей."

#: ../../library/pkgutil.rst:133 ../../library/pkgutil.rst:154
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr ""
"*префикс* — это строка, которая выводится перед каждым именем модуля при "
"выводе."

#: ../../library/pkgutil.rst:137 ../../library/pkgutil.rst:176
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and :class:`zipimport."
"zipimporter`."
msgstr ""
"Работает только для :term:`finder`, который определяет метод "
"``iter_modules()``. Этот интерфейс нестандартен, поэтому модуль также "
"предоставляет реализации для :class:`importlib.machinery.FileFinder` и :"
"class:`zipimport.zipimporter`."

#: ../../library/pkgutil.rst:149
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""
"Возвращает :class:`ModuleInfo` для всех модулей рекурсивно по *path* или, "
"если *path* имеет значение ``None``, для всех доступных модулей."

#: ../../library/pkgutil.rst:156
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""
"Обратите внимание, что эта функция должна импортировать все *пакеты* (*не* "
"все модули!) по заданному *пути*, чтобы получить доступ к атрибуту "
"``__path__`` для поиска подмодулей."

#: ../../library/pkgutil.rst:160
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""
"*onerror* — это функция, которая вызывается с одним аргументом (имя "
"импортируемого пакета), если при попытке импортировать пакет возникает какое-"
"либо исключение. Если функция *onerror* не указана, ошибки :exc:"
"`ImportError`\\ перехватываются и игнорируются, в то время как все остальные "
"исключения распространяются, прекращая поиск."

#: ../../library/pkgutil.rst:166
msgid "Examples::"
msgstr "Примеры::"

#: ../../library/pkgutil.rst:168
msgid ""
"# list all modules python can access\n"
"walk_packages()\n"
"\n"
"# list all submodules of ctypes\n"
"walk_packages(ctypes.__path__, ctypes.__name__ + '.')"
msgstr ""
"# list all modules python can access\n"
"walk_packages()\n"
"\n"
"# list all submodules of ctypes\n"
"walk_packages(ctypes.__path__, ctypes.__name__ + '.')"

#: ../../library/pkgutil.rst:188
msgid "Get a resource from a package."
msgstr "Получить ресурс из пакета."

#: ../../library/pkgutil.rst:190
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` API.  The *package* argument should be the name of "
"a package, in standard module format (``foo.bar``).  The *resource* argument "
"should be in the form of a relative filename, using ``/`` as the path "
"separator.  The parent directory name ``..`` is not allowed, and nor is a "
"rooted name (starting with a ``/``)."
msgstr ""
"Это оболочка для API :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>`. Аргумент *package* должен быть именем пакета в "
"стандартном формате модуля (``foo.bar``). Аргумент *resource* должен быть в "
"форме относительного имени файла с использованием ``/`` в качестве "
"разделителя пути. Имя родительского каталога ``..`` не допускается, а также "
"не является корневым именем (начинающимся с ``/``)."

#: ../../library/pkgutil.rst:197
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr ""
"Функция возвращает двоичную строку, которая является содержимым указанного "
"ресурса."

#: ../../library/pkgutil.rst:200
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""
"Для пакетов, расположенных в файловой системе и уже импортированных, это "
"грубый эквивалент:"

#: ../../library/pkgutil.rst:203
msgid ""
"d = os.path.dirname(sys.modules[package].__file__)\n"
"data = open(os.path.join(d, resource), 'rb').read()"
msgstr ""
"d = os.path.dirname(sys.modules[package].__file__)\n"
"data = open(os.path.join(d, resource), 'rb').read()"

#: ../../library/pkgutil.rst:206
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>`, then ``None`` is returned.  In particular, the :term:`loader` "
"for :term:`namespace packages <namespace package>` does not support :meth:"
"`get_data <importlib.abc.ResourceLoader.get_data>`."
msgstr ""
"Если пакет не может быть найден или загружен, или он использует :term:"
"`loader`, который не поддерживает :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>`, то возвращается ``None``. В частности, :term:"
"`loader` для :term:`namespace packages <namespace package>` не поддерживает :"
"meth:`get_data <importlib.abc.ResourceLoader.get_data>`."

#: ../../library/pkgutil.rst:215
msgid "Resolve a name to an object."
msgstr "Сопоставить имя с объектом."

#: ../../library/pkgutil.rst:217
msgid ""
"This functionality is used in numerous places in the standard library (see :"
"issue:`12915`) - and equivalent functionality is also in widely used third-"
"party packages such as setuptools, Django and Pyramid."
msgstr ""
"Эта функциональность используется во многих местах стандартной библиотеки "
"(см. :issue:`12915`), а эквивалентная функциональность также имеется в "
"широко используемых сторонних пакетах, таких как setuptools, Django и "
"Pyramid."

#: ../../library/pkgutil.rst:221
msgid ""
"It is expected that *name* will be a string in one of the following formats, "
"where W is shorthand for a valid Python identifier and dot stands for a "
"literal period in these pseudo-regexes:"
msgstr ""
"Ожидается, что *name* будет строкой в ​​одном из следующих форматов, где W — "
"сокращение допустимого идентификатора Python, а точка — буквальная точка в "
"этих псевдорегулярных выражениях:"

#: ../../library/pkgutil.rst:225
msgid "``W(.W)*``"
msgstr "``W(.W)*``"

#: ../../library/pkgutil.rst:226
msgid "``W(.W)*:(W(.W)*)?``"
msgstr "``W(.W)*:(W(.W)*)?``"

#: ../../library/pkgutil.rst:228
msgid ""
"The first form is intended for backward compatibility only. It assumes that "
"some part of the dotted name is a package, and the rest is an object "
"somewhere within that package, possibly nested inside other objects. Because "
"the place where the package stops and the object hierarchy starts can't be "
"inferred by inspection, repeated attempts to import must be done with this "
"form."
msgstr ""
"Первая форма предназначена только для обратной совместимости. "
"Предполагается, что некоторая часть точечного имени представляет собой "
"пакет, а остальная часть — это объект где-то внутри этого пакета, возможно, "
"вложенный в другие объекты. Поскольку место, где заканчивается пакет и "
"начинается иерархия объектов, невозможно определить путем проверки, "
"повторные попытки импорта необходимо выполнять с помощью этой формы."

#: ../../library/pkgutil.rst:235
msgid ""
"In the second form, the caller makes the division point clear through the "
"provision of a single colon: the dotted name to the left of the colon is a "
"package to be imported, and the dotted name to the right is the object "
"hierarchy within that package. Only one import is needed in this form. If it "
"ends with the colon, then a module object is returned."
msgstr ""
"Во второй форме вызывающий объект четко указывает точку разделения, ставя "
"одно двоеточие: имя с точкой слева от двоеточия — это пакет, который нужно "
"импортировать, а имя с точкой справа — это иерархия объектов внутри этого "
"пакета. . В этой форме необходим только один импорт. Если он заканчивается "
"двоеточием, возвращается объект модуля."

#: ../../library/pkgutil.rst:241
msgid ""
"The function will return an object (which might be a module), or raise one "
"of the following exceptions:"
msgstr ""
"Функция вернет объект (который может быть модулем) или вызовет одно из "
"следующих исключений:"

#: ../../library/pkgutil.rst:244
msgid ":exc:`ValueError` -- if *name* isn't in a recognised format."
msgstr ":exc:`ValueError` -- если *имя* не имеет распознаваемого формата."

#: ../../library/pkgutil.rst:246
msgid ":exc:`ImportError` -- if an import failed when it shouldn't have."
msgstr ":exc:`ImportError` — если импорт не удался, хотя этого быть не должно."

#: ../../library/pkgutil.rst:248
msgid ""
":exc:`AttributeError` -- If a failure occurred when traversing the object "
"hierarchy within the imported package to get to the desired object."
msgstr ""
":exc:`AttributeError` -- Если произошел сбой при обходе иерархии объектов "
"внутри импортированного пакета для достижения нужного объекта."
