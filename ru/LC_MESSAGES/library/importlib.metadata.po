# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-02 14:54+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- Доступ к метаданным пакета"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` больше не является временным."

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Исходный код:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` — это библиотека, которая обеспечивает доступ к "
"метаданным установленного ``Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_, например в качестве "
"точек входа или имен верхнего уровня (`Import Package <https://packaging."
"python.org/en/latest/glossary/#term-Import-Package>`_\\s, модули, если "
"таковые имеются). Эта библиотека, частично созданная на основе системы "
"импорта Python, призвана заменить аналогичную функциональность в `` API "
"точки входа`_ и `API метаданных`_ ``pkg_resources``. Вместе с :mod:"
"`importlib.resources` этот пакет может устранить необходимость использования "
"более старого и менее эффективного пакета ``pkg_resources``."

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib.metadata`` работает со сторонними *дистрибутивами*, "
"установленными в каталог ``site-packages`` Python с помощью таких "
"инструментов, как :pypi:`pip`. В частности, он работает с дистрибутивами с "
"обнаруживаемыми каталогами ``dist-info`` или ``egg-info``, а также "
"метаданными, определенными ``Основными спецификациями метаданных'' <https://"
"packaging.python.org/en/latest/specifications. /core-metadata/#core-"
"metadata>`_."

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`package_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"Они *не* обязательно эквивалентны или соответствуют 1:1 именам *импортных "
"пакетов* верхнего уровня, которые можно импортировать внутри кода Python. "
"Один *дистрибутивный пакет* может содержать несколько *импортных пакетов* (и "
"отдельных модулей), а один *импортный пакет* верхнего уровня может "
"сопоставляться с несколькими *дистрибутивными пакетами*, если это пакет "
"пространства имен. Вы можете использовать :ref:`package_distributions() "
"<package-distributions>`, чтобы получить сопоставление между ними."

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"По умолчанию метаданные дистрибутива могут находиться в файловой системе или "
"в zip-архивах по адресу :data:`sys.path`. Благодаря механизму расширения "
"метаданные могут находиться практически где угодно."

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"Документация для importlib_metadata, которая предоставляет резервную копию "
"importlib.metadata. Сюда входит `ссылка на API <https://importlib-metadata."
"readthedocs.io/en/latest/api.html>`__ для классов и функций этого модуля, а "
"также `руководство по миграции <https://importlib- Metadata.readthedocs.io/"
"en/latest/migration.html>`__ для существующих пользователей "
"``pkg_resources``."

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "Обзор"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"Допустим, вы хотите получить строку версии для `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, который вы установили с помощью ``pip`` . Начнем с создания "
"виртуальной среды и установки в нее чего-нибудь:"

#: ../../library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"Вы можете получить строку версии для ``wheel``, выполнив следующую команду:"

#: ../../library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version\n"
">>> version('wheel')\n"
"'0.32.3'"
msgstr ""
"(example) $ python\n"
">>> from importlib.metadata import version\n"
">>> version('wheel')\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"Вы также можете получить коллекцию точек входа, выбираемых по свойствам "
"EntryPoint (обычно «группа» или «имя»), таким как «console_scripts», "
"«distutils.commands» и другие. Каждая группа содержит коллекцию объектов :"
"ref:`EntryPoint <entry-points>`."

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "Вы можете получить :ref:`метаданные для дистрибутива <metadata>`::"

#: ../../library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))\n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""
">>> list(metadata('wheel'))\n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"Вы также можете получить :ref:`номер версии дистрибутива <version>`, "
"перечислить его :ref:`составляющие файлы <files>` и получить список :ref:"
"`требований` дистрибутива."

#: ../../library/importlib.metadata.rst:105
msgid ""
"Subclass of :class:`ModuleNotFoundError` raised by several functions in this "
"module when queried for a distribution package which is not installed in the "
"current Python environment."
msgstr ""
"Подкласс :class:`ModuleNotFoundError`, вызываемый несколькими функциями в "
"этом модуле при запросе дистрибутивного пакета, который не установлен в "
"текущей среде Python."

#: ../../library/importlib.metadata.rst:111
msgid "Functional API"
msgstr "функциональный API"

#: ../../library/importlib.metadata.rst:113
msgid "This package provides the following functionality via its public API."
msgstr ""
"Этот пакет предоставляет следующие функции через свой общедоступный API."

#: ../../library/importlib.metadata.rst:119
msgid "Entry points"
msgstr "Точки входа"

#: ../../library/importlib.metadata.rst:123
msgid ""
"Returns a :class:`EntryPoints` instance describing entry points for the "
"current environment. Any given keyword parameters are passed to the :meth:`!"
"select` method for comparison to the attributes of the individual entry "
"point definitions."
msgstr ""
"Возвращает экземпляр :class:`EntryPoints`, описывающий точки входа для "
"текущей среды. Любые заданные параметры ключевого слова передаются методу :"
"meth:`!select` для сравнения с атрибутами определений отдельных точек входа."

#: ../../library/importlib.metadata.rst:128
msgid ""
"Note: it is not currently possible to query for entry points based on their :"
"attr:`!EntryPoint.dist` attribute (as different :class:`!Distribution` "
"instances do not currently compare equal, even if they have the same "
"attributes)"
msgstr ""
"Примечание. В настоящее время невозможно выполнить запрос точек входа на "
"основе их атрибута :attr:`!EntryPoint.dist` (поскольку разные экземпляры :"
"class:`!Distribution` в настоящее время не сравниваются равными, даже если "
"они имеют одинаковые атрибуты)."

#: ../../library/importlib.metadata.rst:134
msgid "Details of a collection of installed entry points."
msgstr "Подробная информация о коллекции установленных точек входа."

#: ../../library/importlib.metadata.rst:136
msgid ""
"Also provides a ``.groups`` attribute that reports all identified entry "
"point groups, and a ``.names`` attribute that reports all identified entry "
"point names."
msgstr ""
"Также предоставляет атрибут .groups, который сообщает обо всех "
"идентифицированных группах точек входа, и атрибут .names, который сообщает "
"обо всех идентифицированных именах точек входа."

#: ../../library/importlib.metadata.rst:142
msgid "Details of an installed entry point."
msgstr "Подробная информация об установленной точке входа."

#: ../../library/importlib.metadata.rst:144
msgid ""
"Each :class:`!EntryPoint` instance has ``.name``, ``.group``, and ``.value`` "
"attributes and a ``.load()`` method to resolve the value. There are also ``."
"module``, ``.attr``, and ``.extras`` attributes for getting the components "
"of the ``.value`` attribute, and ``.dist`` for obtaining information "
"regarding the distribution package that provides the entry point."
msgstr ""
"Каждый экземпляр :class:`!EntryPoint` имеет атрибуты .name, .group и .value, "
"а также метод .load() для разрешения значения. Существуют также атрибуты ."
"module, .attr и .extras для получения компонентов атрибута .value и .dist "
"для получения информации о пакет распространения, предоставляющий точку "
"входа."

#: ../../library/importlib.metadata.rst:150
msgid "Query all entry points::"
msgstr "Запросить все точки входа::"

#: ../../library/importlib.metadata.rst:152
msgid ">>> eps = entry_points()"
msgstr ">>> eps = entry_points()"

#: ../../library/importlib.metadata.rst:154
msgid ""
"The :func:`!entry_points` function returns a :class:`!EntryPoints` object, a "
"collection of all :class:`!EntryPoint` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"Функция :func:`!entry_points` возвращает объект :class:`!EntryPoints`, "
"коллекцию всех объектов :class:`!EntryPoint` с атрибутами ``names`` и "
"``groups`` для удобства::"

#: ../../library/importlib.metadata.rst:158
msgid ""
">>> sorted(eps.groups)\n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""
">>> sorted(eps.groups)\n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"

#: ../../library/importlib.metadata.rst:161
msgid ""
":class:`!EntryPoints` has a :meth:`!select` method to select entry points "
"matching specific properties. Select entry points in the ``console_scripts`` "
"group::"
msgstr ""
":class:`!EntryPoints` имеет метод :meth:`!select` для выбора точек входа, "
"соответствующих определенным свойствам. Выберите точки входа в группе "
"console_scripts::"

#: ../../library/importlib.metadata.rst:165
msgid ">>> scripts = eps.select(group='console_scripts')"
msgstr ">>> scripts = eps.select(group='console_scripts')"

#: ../../library/importlib.metadata.rst:167
msgid ""
"Equivalently, since :func:`!entry_points` passes keyword arguments through "
"to select::"
msgstr ""
"Аналогично, поскольку :func:`!entry_points` передает аргументы ключевого "
"слова в select::"

#: ../../library/importlib.metadata.rst:170
msgid ">>> scripts = entry_points(group='console_scripts')"
msgstr ">>> scripts = entry_points(group='console_scripts')"

#: ../../library/importlib.metadata.rst:172
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Выберите конкретный скрипт с именем «колесо» (находится в проекте колеса)::"

#: ../../library/importlib.metadata.rst:174
msgid ""
">>> 'wheel' in scripts.names\n"
"True\n"
">>> wheel = scripts['wheel']"
msgstr ""
">>> 'wheel' in scripts.names\n"
"True\n"
">>> wheel = scripts['wheel']"

#: ../../library/importlib.metadata.rst:178
msgid "Equivalently, query for that entry point during selection::"
msgstr "Аналогично, запросите эту точку входа во время выбора::"

#: ../../library/importlib.metadata.rst:180
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')\n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')"
msgstr ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')\n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')"

#: ../../library/importlib.metadata.rst:183
msgid "Inspect the resolved entry point::"
msgstr "Проверьте решенную точку входа::"

#: ../../library/importlib.metadata.rst:185
msgid ""
">>> wheel\n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module\n"
"'wheel.cli'\n"
">>> wheel.attr\n"
"'main'\n"
">>> wheel.extras\n"
"[]\n"
">>> main = wheel.load()\n"
">>> main\n"
"<function main at 0x103528488>"
msgstr ""
">>> wheel\n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module\n"
"'wheel.cli'\n"
">>> wheel.attr\n"
"'main'\n"
">>> wheel.extras\n"
"[]\n"
">>> main = wheel.load()\n"
">>> main\n"
"<function main at 0x103528488>"

#: ../../library/importlib.metadata.rst:197
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"«Группа» и «имя» — это произвольные значения, определенные автором пакета, и "
"обычно клиент желает разрешить все точки входа для определенной группы. "
"Прочтите документацию по setuptools <https://setuptools.pypa.io/en/latest/"
"userguide/entry_point.html>`_ для получения дополнительной информации о "
"точках входа, их определении и использовании."

#: ../../library/importlib.metadata.rst:203
msgid "*Compatibility Note*"
msgstr "*Примечание о совместимости*"

#: ../../library/importlib.metadata.rst:205
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""
"«Выбираемые» точки входа были представлены в importlib_metadata 3.6 и Python "
"3.10. До этих изменений ``entry_points`` не принимал никаких параметров и "
"всегда возвращал словарь точек входа, объединенных по группам. В "
"``importlib_metadata`` 5.0 и Python 3.12 ``entry_points`` всегда возвращает "
"объект ``EntryPoints``. См. :pypi:`backports.entry_points_selectable` для "
"опций совместимости."

#: ../../library/importlib.metadata.rst:217
msgid "Distribution metadata"
msgstr "Метаданные распространения"

#: ../../library/importlib.metadata.rst:221
msgid ""
"Return the distribution metadata corresponding to the named distribution "
"package as a :class:`PackageMetadata` instance."
msgstr ""
"Верните метаданные распространения, соответствующие указанному "
"дистрибутивному пакету, в виде экземпляра :class:`PackageMetadata`."

#: ../../library/importlib.metadata.rst:224
#: ../../library/importlib.metadata.rst:273
#: ../../library/importlib.metadata.rst:294
#: ../../library/importlib.metadata.rst:357
#: ../../library/importlib.metadata.rst:408
msgid ""
"Raises :exc:`PackageNotFoundError` if the named distribution package is not "
"installed in the current Python environment."
msgstr ""
"Вызывает :exc:`PackageNotFoundError`, если указанный дистрибутив не "
"установлен в текущей среде Python."

#: ../../library/importlib.metadata.rst:229
msgid ""
"A concrete implementation of the `PackageMetadata protocol <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata."
"PackageMetadata>`_."
msgstr ""
"Конкретная реализация протокола PackageMetadata <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."

#: ../../library/importlib.metadata.rst:232
msgid ""
"In addition to providing the defined protocol methods and attributes, "
"subscripting the instance is equivalent to calling the :meth:`!get` method."
msgstr ""
"Помимо предоставления определенных методов и атрибутов протокола, подписка "
"на экземпляр эквивалентна вызову метода :meth:`!get`."

#: ../../library/importlib.metadata.rst:235
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the :func:`!metadata` function::"
msgstr ""
"Каждый `Дистрибутивный пакет <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ ​​включает в себя некоторые метаданные, "
"которые вы можете извлечь с помощью функции :func:`!metadata`::"

#: ../../library/importlib.metadata.rst:238
msgid ">>> wheel_metadata = metadata('wheel')"
msgstr ">>> wheel_metadata = metadata('wheel')"

#: ../../library/importlib.metadata.rst:240
msgid ""
"The keys of the returned data structure name the metadata keywords, and the "
"values are returned unparsed from the distribution metadata::"
msgstr ""
"Ключи возвращаемой структуры данных называют ключевые слова метаданных, а "
"значения возвращаются без анализа из метаданных распределения:"

#: ../../library/importlib.metadata.rst:243
msgid ""
">>> wheel_metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""
">>> wheel_metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"

#: ../../library/importlib.metadata.rst:246
msgid ""
":class:`PackageMetadata` also presents a :attr:`!json` attribute that "
"returns all the metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
":class:`PackageMetadata` также представляет атрибут :attr:`!json`, который "
"возвращает все метаданные в JSON-совместимой форме согласно :PEP:`566`::"

#: ../../library/importlib.metadata.rst:249
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"

#: ../../library/importlib.metadata.rst:252
#: ../../library/importlib.metadata.rst:445
msgid ""
"The full set of available metadata is not described here. See the PyPA `Core "
"metadata specification <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"Полный набор доступных метаданных здесь не описан. Дополнительные сведения "
"см. в спецификации основных метаданных PyPA <https://packaging.python.org/en/"
"latest/specifications/core-metadata/#core-metadata>`_."

#: ../../library/importlib.metadata.rst:255
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"«Описание» теперь включается в метаданные при представлении через полезную "
"нагрузку. Символы продолжения строки были удалены."

#: ../../library/importlib.metadata.rst:259
msgid "The ``json`` attribute was added."
msgstr "Был добавлен атрибут ``json``."

#: ../../library/importlib.metadata.rst:265
msgid "Distribution versions"
msgstr "Версии распространения"

#: ../../library/importlib.metadata.rst:269
msgid ""
"Return the installed distribution package `version <https://packaging.python."
"org/en/latest/specifications/core-metadata/#version>`__ for the named "
"distribution package."
msgstr ""

#: ../../library/importlib.metadata.rst:276
msgid ""
"The :func:`!version` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"Функция :func:`!version` — это самый быстрый способ получить номер версии `_ "
"пакета дистрибутива <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_, как нить::"

#: ../../library/importlib.metadata.rst:280
msgid ""
">>> version('wheel')\n"
"'0.32.3'"
msgstr ""
">>> version('wheel')\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:287
msgid "Distribution files"
msgstr "Файлы дистрибутива"

#: ../../library/importlib.metadata.rst:291
msgid ""
"Return the full set of files contained within the named distribution package."
msgstr "Вернуть полный набор файлов, содержащихся в указанном дистрибутиве."

#: ../../library/importlib.metadata.rst:297
msgid ""
"Returns :const:`None` if the distribution is found but the installation "
"database records reporting the files associated with the distribuion package "
"are missing."
msgstr ""
"Возвращает :const:`None`, если дистрибутив найден, но записи базы данных "
"установки, сообщающие об отсутствии файлов, связанных с пакетом дистрибутива."

#: ../../library/importlib.metadata.rst:303
msgid ""
"A :class:`pathlib.PurePath` derived object with additional ``dist``, "
"``size``, and ``hash`` properties corresponding to the distribution "
"package's installation metadata for that file."
msgstr ""
"Производный объект :class:`pathlib.PurePath` с дополнительными свойствами "
"``dist``, ``size`` и ``hash``, соответствующими метаданным установки "
"дистрибутива для этого файла."

#: ../../library/importlib.metadata.rst:307
msgid ""
"The :func:`!files` function takes a `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name and returns "
"all of the files installed by this distribution. Each file is reported as a :"
"class:`PackagePath` instance. For example::"
msgstr ""
"Функция :func:`!files` принимает имя `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_ ​​и "
"возвращает все файлы, установленные этим распределение. Каждый файл "
"сообщается как экземпляр :class:`PackagePath`. Например::"

#: ../../library/importlib.metadata.rst:312
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]\n"
">>> util\n"
"PackagePath('wheel/util.py')\n"
">>> util.size\n"
"859\n"
">>> util.dist\n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash\n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]\n"
">>> util\n"
"PackagePath('wheel/util.py')\n"
">>> util.size\n"
"859\n"
">>> util.dist\n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash\n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"

#: ../../library/importlib.metadata.rst:322
msgid "Once you have the file, you can also read its contents::"
msgstr "Получив файл, вы также можете прочитать его содержимое:"

#: ../../library/importlib.metadata.rst:324
msgid ""
">>> print(util.read_text())\n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""
">>> print(util.read_text())\n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"

#: ../../library/importlib.metadata.rst:333
msgid ""
"You can also use the :meth:`!locate` method to get the absolute path to the "
"file::"
msgstr ""
"Вы также можете использовать метод :meth:`!locate`, чтобы получить "
"абсолютный путь к файлу::"

#: ../../library/importlib.metadata.rst:336
msgid ""
">>> util.locate()\n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""
">>> util.locate()\n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"

#: ../../library/importlib.metadata.rst:339
msgid ""
"In the case where the metadata file listing files (``RECORD`` or ``SOURCES."
"txt``) is missing, :func:`!files` will return :const:`None`. The caller may "
"wish to wrap calls to :func:`!files` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ or otherwise guard against this condition if the target "
"distribution is not known to have the metadata present."
msgstr ""
"В случае, если файлы со списком файлов метаданных (``RECORD`` или ``SOURCES."
"txt``) отсутствуют, :func:`!files` вернет :const:`None`. Вызывающий может "
"пожелать обернуть вызовы :func:`!files` в `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ или иным образом защититься от этого. условие, если "
"неизвестно, что в целевом дистрибутиве присутствуют метаданные."

#: ../../library/importlib.metadata.rst:350
msgid "Distribution requirements"
msgstr "Требования к распространению"

#: ../../library/importlib.metadata.rst:354
msgid ""
"Return the declared dependency specifiers for the named distribution package."
msgstr ""
"Верните объявленные спецификаторы зависимостей для именованного дистрибутива."

#: ../../library/importlib.metadata.rst:360
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the :func:`!requires` function::"
msgstr ""
"Чтобы получить полный набор требований для `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, "
"используйте функцию :func:`!requires`: :"

#: ../../library/importlib.metadata.rst:364
msgid ""
">>> requires('wheel')\n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""
">>> requires('wheel')\n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"

#: ../../library/importlib.metadata.rst:372
msgid "Mapping import to distribution packages"
msgstr "Сопоставление импорта с дистрибутивными пакетами"

#: ../../library/importlib.metadata.rst:376
msgid ""
"Return a mapping from the top level module and import package names found "
"via :data:`sys.meta_path` to the names of the distribution packages (if any) "
"that provide the corresponding files."
msgstr ""
"Верните сопоставление из модуля верхнего уровня и импортируйте имена "
"пакетов, найденные с помощью :data:`sys.meta_path`, в имена пакетов "
"дистрибутивов (если таковые имеются), которые предоставляют соответствующие "
"файлы."

#: ../../library/importlib.metadata.rst:380
msgid ""
"To allow for namespace packages (which may have members provided by multiple "
"distribution packages), each top level import name maps to a list of "
"distribution names rather than mapping directly to a single name."
msgstr ""
"Чтобы разрешить использование пакетов пространства имен (члены которых могут "
"быть предоставлены несколькими пакетами распространения), каждое имя импорта "
"верхнего уровня сопоставляется со списком имен распространения, а не "
"сопоставляется непосредственно с одним именем."

#: ../../library/importlib.metadata.rst:384
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"Удобный метод разрешения имени `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ ​​(или имен, в "
"случае пакета пространства имен), которые предоставляют каждый импортируемый "
"модуль Python верхнего уровня или `Import Package <https://packaging.python."
"org/en/latest/glossary/#term-Import-Package>`_::"

#: ../../library/importlib.metadata.rst:389
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"

#: ../../library/importlib.metadata.rst:392
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""
"Некоторые редактируемые установки `_ не предоставляют имена верхнего уровня "
"<https://github.com/pypa/packaging-problems/issues/609>`_, поэтому эта "
"функция ненадежна при таких установках."

#: ../../library/importlib.metadata.rst:401
msgid "Distributions"
msgstr "Распределения"

#: ../../library/importlib.metadata.rst:405
msgid ""
"Return a :class:`Distribution` instance describing the named distribution "
"package."
msgstr ""
"Возвращает экземпляр :class:`Distribution`, описывающий названный "
"дистрибутив."

#: ../../library/importlib.metadata.rst:413
msgid "Details of an installed distribution package."
msgstr "Подробная информация об установленном дистрибутиве."

#: ../../library/importlib.metadata.rst:415
msgid ""
"Note: different :class:`!Distribution` instances do not currently compare "
"equal, even if they relate to the same installed distribution and "
"accordingly have the same attributes."
msgstr ""
"Примечание. Различные экземпляры :class:`!Distribution` в настоящее время не "
"сравниваются равными, даже если они относятся к одному и тому же "
"установленному дистрибутиву и, соответственно, имеют одинаковые атрибуты."

#: ../../library/importlib.metadata.rst:419
msgid ""
"While the module level API described above is the most common and convenient "
"usage, you can get all of that information from the :class:`!Distribution` "
"class. :class:`!Distribution` is an abstract object that represents the "
"metadata for a Python `Distribution Package <https://packaging.python.org/en/"
"latest/glossary/#term-Distribution-Package>`_. You can get the concrete :"
"class:`!Distribution` subclass instance for an installed distribution "
"package by calling the :func:`distribution` function::"
msgstr ""
"Хотя API уровня модуля, описанный выше, является наиболее распространенным и "
"удобным использованием, вы можете получить всю эту информацию из класса :"
"class:`!Distribution`. :class:`!Distribution` - это абстрактный объект, "
"представляющий метаданные для Python `Пакета распространения <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_. Вы "
"можете получить конкретный экземпляр подкласса :class:`!Distribution` для "
"установленного пакета распространения, вызвав функцию :func:`distribution`::"

#: ../../library/importlib.metadata.rst:426
msgid ""
">>> from importlib.metadata import distribution\n"
">>> dist = distribution('wheel')\n"
">>> type(dist)\n"
"<class 'importlib.metadata.PathDistribution'>"
msgstr ""
">>> from importlib.metadata import distribution\n"
">>> dist = distribution('wheel')\n"
">>> type(dist)\n"
"<class 'importlib.metadata.PathDistribution'>"

#: ../../library/importlib.metadata.rst:431
msgid ""
"Thus, an alternative way to get the version number is through the :class:`!"
"Distribution` instance::"
msgstr ""
"Таким образом, альтернативный способ получить номер версии — через "
"экземпляр :class:`!Distribution`::"

#: ../../library/importlib.metadata.rst:434
msgid ""
">>> dist.version\n"
"'0.32.3'"
msgstr ""
">>> dist.version\n"
"'0.32.3'"

#: ../../library/importlib.metadata.rst:437
msgid ""
"There are all kinds of additional metadata available on :class:`!"
"Distribution` instances::"
msgstr ""
"В экземплярах :class:`!Distribution` доступны все виды дополнительных "
"метаданных::"

#: ../../library/importlib.metadata.rst:440
msgid ""
">>> dist.metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']\n"
"'MIT'"
msgstr ""
">>> dist.metadata['Requires-Python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']\n"
"'MIT'"

#: ../../library/importlib.metadata.rst:450
msgid "Distribution Discovery"
msgstr "Открытие распространения"

#: ../../library/importlib.metadata.rst:452
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"По умолчанию этот пакет предоставляет встроенную поддержку обнаружения "
"метаданных для файловой системы и zip-файла `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_\\ с. "
"Этот поиск метаданных по умолчанию использует ``sys.path``, но интерпретация "
"этих значений немного отличается от того, как это делают другие механизмы "
"импорта. В частности:"

#: ../../library/importlib.metadata.rst:456
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` не учитывает объекты :class:`bytes` в ``sys.path``."

#: ../../library/importlib.metadata.rst:457
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` будет случайно учитывать объекты :py:class:`pathlib."
"Path` в ``sys.path``, хотя такие значения будут игнорироваться при импорте."

#: ../../library/importlib.metadata.rst:461
msgid "Extending the search algorithm"
msgstr "Расширение алгоритма поиска"

#: ../../library/importlib.metadata.rst:463
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""
"Поскольку метаданные `Distribution Package <https://packaging.python.org/en/"
"latest/glossary/#term-Distribution-Package>`_ ​​недоступны через поиск :data:"
"`sys.path` или напрямую через загрузчики пакетов, метаданные для "
"дистрибутива можно найти через систему импорта :ref:`finders <finders-and-"
"loaders>`. Чтобы найти метаданные пакета распространения, ``importlib."
"metadata`` запрашивает список :term:`мета-поисковиков <мета-пути искателя>` "
"на :data:`sys.meta_path`."

#: ../../library/importlib.metadata.rst:471
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"По умолчанию importlib.metadata устанавливает средство поиска дистрибутивных "
"пакетов, найденных в файловой системе. Этот поисковик на самом деле не "
"находит никаких *дистрибутивов*, ​​но может найти их метаданные."

#: ../../library/importlib.metadata.rst:476
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"Абстрактный класс :py:class:`importlib.abc.MetaPathFinder` определяет "
"интерфейс, ожидаемый от средств поиска системой импорта Python. ``importlib."
"metadata`` расширяет этот протокол, ища дополнительный "
"``find_distributions``, вызываемый в средствах поиска из :data:`sys."
"meta_path`, и представляет этот расширенный интерфейс как абстрактный "
"базовый класс ``DistributionFinder``, который определяет этот абстрактный "
"метод::"

#: ../../library/importlib.metadata.rst:484
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""

#: ../../library/importlib.metadata.rst:490
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"Объект DistributionFinder.Context предоставляет свойства .path и .name, "
"указывающие путь для поиска и имя для сопоставления, а также может "
"предоставлять другой соответствующий контекст."

#: ../../library/importlib.metadata.rst:494
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"На практике это означает, что для поддержки поиска метаданных пакета "
"распространения в местах, отличных от файловой системы, необходимо создать "
"подкласс Distribution и реализовать абстрактные методы. Затем из "
"пользовательского средства поиска верните экземпляры этого производного "
"``Distribution`` в методе ``find_distributions()``."
