# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:16+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- Доступ к метаданным пакета"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` больше не является временным."

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Исходный код:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` — это библиотека, которая обеспечивает доступ к "
"метаданным установленного ``Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_, например в качестве "
"точек входа или имен верхнего уровня (`Import Package <https://packaging."
"python.org/en/latest/glossary/#term-Import-Package>`_\\s, модули, если "
"таковые имеются). Эта библиотека, частично созданная на основе системы "
"импорта Python, призвана заменить аналогичную функциональность в `` API "
"точки входа`_ и `API метаданных`_ ``pkg_resources``. Вместе с :mod:"
"`importlib.resources` этот пакет может устранить необходимость использования "
"более старого и менее эффективного пакета ``pkg_resources``."

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as `pip "
"<https://pypi.org/project/pip/>`_. Specifically, it works with distributions "
"with discoverable ``dist-info`` or ``egg-info`` directories, and metadata "
"defined by the `Core metadata specifications <https://packaging.python.org/"
"en/latest/specifications/core-metadata/#core-metadata>`_."
msgstr ""

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`package_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"Они *не* обязательно эквивалентны или соответствуют 1:1 именам *импортных "
"пакетов* верхнего уровня, которые можно импортировать внутри кода Python. "
"Один *дистрибутивный пакет* может содержать несколько *импортных пакетов* (и "
"отдельных модулей), а один *импортный пакет* верхнего уровня может "
"сопоставляться с несколькими *дистрибутивными пакетами*, если это пакет "
"пространства имен. Вы можете использовать :ref:`package_distributions() "
"<package-distributions>`, чтобы получить сопоставление между ними."

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"По умолчанию метаданные дистрибутива могут находиться в файловой системе или "
"в zip-архивах по адресу :data:`sys.path`. Благодаря механизму расширения "
"метаданные могут находиться практически где угодно."

#: ../../library/importlib.metadata.rst:62
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"Документация для importlib_metadata, которая предоставляет резервную копию "
"importlib.metadata. Сюда входит `ссылка на API <https://importlib-metadata."
"readthedocs.io/en/latest/api.html>`__ для классов и функций этого модуля, а "
"также `руководство по миграции <https://importlib- Metadata.readthedocs.io/"
"en/latest/migration.html>`__ для существующих пользователей "
"``pkg_resources``."

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "Обзор"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"Допустим, вы хотите получить строку версии для `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, который вы установили с помощью ``pip`` . Начнем с создания "
"виртуальной среды и установки в нее чего-нибудь:"

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"Вы можете получить строку версии для ``wheel``, выполнив следующую команду:"

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"Вы также можете получить коллекцию точек входа, выбираемых по свойствам "
"EntryPoint (обычно «группа» или «имя»), таким как «console_scripts», "
"«distutils.commands» и другие. Каждая группа содержит коллекцию объектов :"
"ref:`EntryPoint <entry-points>`."

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "Вы можете получить :ref:`метаданные для дистрибутива <metadata>`::"

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"Вы также можете получить :ref:`номер версии дистрибутива <version>`, "
"перечислить его :ref:`составляющие файлы <files>` и получить список :ref:"
"`требований` дистрибутива."

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "функциональный API"

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr ""
"Этот пакет предоставляет следующие функции через свой общедоступный API."

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr "Точки входа"

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr "Запросить все точки входа::"

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""

#: ../../library/importlib.metadata.rst:143
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Выберите конкретный скрипт с именем «колесо» (находится в проекте колеса)::"

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr "Аналогично, запросите эту точку входа во время выбора::"

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr "Проверьте решенную точку входа::"

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"«Группа» и «имя» — это произвольные значения, определенные автором пакета, и "
"обычно клиент желает разрешить все точки входа для определенной группы. "
"Прочтите документацию по setuptools <https://setuptools.pypa.io/en/latest/"
"userguide/entry_point.html>`_ для получения дополнительной информации о "
"точках входа, их определении и использовании."

#: ../../library/importlib.metadata.rst:174
msgid "*Compatibility Note*"
msgstr "*Примечание о совместимости*"

#: ../../library/importlib.metadata.rst:176
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"For compatibility, if no parameters are passed to entry_points, a "
"``SelectableGroups`` object is returned, implementing that dict interface. "
"In the future, calling ``entry_points`` with no parameters will return an "
"``EntryPoints`` object. Users should rely on the selection interface to "
"retrieve entry points by group."
msgstr ""

#: ../../library/importlib.metadata.rst:189
msgid "Distribution metadata"
msgstr "Метаданные распространения"

#: ../../library/importlib.metadata.rst:191
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:197
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:204
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""

#: ../../library/importlib.metadata.rst:212
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""

#: ../../library/importlib.metadata.rst:217
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"«Описание» теперь включается в метаданные при представлении через полезную "
"нагрузку. Символы продолжения строки были удалены."

#: ../../library/importlib.metadata.rst:221
msgid "The ``json`` attribute was added."
msgstr "Был добавлен атрибут ``json``."

#: ../../library/importlib.metadata.rst:227
msgid "Distribution versions"
msgstr "Версии распространения"

#: ../../library/importlib.metadata.rst:229
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""

#: ../../library/importlib.metadata.rst:240
msgid "Distribution files"
msgstr "Файлы дистрибутива"

#: ../../library/importlib.metadata.rst:242
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""

#: ../../library/importlib.metadata.rst:259
msgid "Once you have the file, you can also read its contents::"
msgstr "Получив файл, вы также можете прочитать его содержимое:"

#: ../../library/importlib.metadata.rst:270
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""

#: ../../library/importlib.metadata.rst:276
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: ../../library/importlib.metadata.rst:287
msgid "Distribution requirements"
msgstr "Требования к распространению"

#: ../../library/importlib.metadata.rst:289
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:301
msgid "Mapping import to distribution packages"
msgstr "Сопоставление импорта с дистрибутивными пакетами"

#: ../../library/importlib.metadata.rst:303
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"Удобный метод разрешения имени `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ ​​(или имен, в "
"случае пакета пространства имен), которые предоставляют каждый импортируемый "
"модуль Python верхнего уровня или `Import Package <https://packaging.python."
"org/en/latest/glossary/#term-Import-Package>`_::"

#: ../../library/importlib.metadata.rst:316
msgid "Distributions"
msgstr "Распределения"

#: ../../library/importlib.metadata.rst:318
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:327
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:333
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:341
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""

#: ../../library/importlib.metadata.rst:346
msgid "Distribution Discovery"
msgstr "Открытие распространения"

#: ../../library/importlib.metadata.rst:348
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"По умолчанию этот пакет предоставляет встроенную поддержку обнаружения "
"метаданных для файловой системы и zip-файла `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_\\ с. "
"Этот поиск метаданных по умолчанию использует ``sys.path``, но интерпретация "
"этих значений немного отличается от того, как это делают другие механизмы "
"импорта. В частности:"

#: ../../library/importlib.metadata.rst:352
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` не учитывает объекты :class:`bytes` в ``sys.path``."

#: ../../library/importlib.metadata.rst:353
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` будет случайно учитывать объекты :py:class:`pathlib."
"Path` в ``sys.path``, хотя такие значения будут игнорироваться при импорте."

#: ../../library/importlib.metadata.rst:357
msgid "Extending the search algorithm"
msgstr "Расширение алгоритма поиска"

#: ../../library/importlib.metadata.rst:359
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system `finders`_.  To find a "
"distribution package's metadata, ``importlib.metadata`` queries the list of :"
"term:`meta path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:367
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"По умолчанию importlib.metadata устанавливает средство поиска дистрибутивных "
"пакетов, найденных в файловой системе. Этот поисковик на самом деле не "
"находит никаких *дистрибутивов*, ​​но может найти их метаданные."

#: ../../library/importlib.metadata.rst:372
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"Абстрактный класс :py:class:`importlib.abc.MetaPathFinder` определяет "
"интерфейс, ожидаемый от средств поиска системой импорта Python. ``importlib."
"metadata`` расширяет этот протокол, ища дополнительный "
"``find_distributions``, вызываемый в средствах поиска из :data:`sys."
"meta_path`, и представляет этот расширенный интерфейс как абстрактный "
"базовый класс ``DistributionFinder``, который определяет этот абстрактный "
"метод::"

#: ../../library/importlib.metadata.rst:386
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"Объект DistributionFinder.Context предоставляет свойства .path и .name, "
"указывающие путь для поиска и имя для сопоставления, а также может "
"предоставлять другой соответствующий контекст."

#: ../../library/importlib.metadata.rst:390
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"На практике это означает, что для поддержки поиска метаданных пакета "
"распространения в местах, отличных от файловой системы, необходимо создать "
"подкласс Distribution и реализовать абстрактные методы. Затем из "
"пользовательского средства поиска верните экземпляры этого производного "
"``Distribution`` в методе ``find_distributions()``."
