# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-19 14:16+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`!argparse` --- Parser for command-line options, arguments and "
"subcommands"
msgstr ""
":mod:`!argparse` --- Анализатор параметров командной строки, аргументов и "
"подкоманд"

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Исходный код:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rst:16
msgid ""
"While :mod:`argparse` is the default recommended standard library module for "
"implementing basic command line applications, authors with more exacting "
"requirements for exactly how their command line applications behave may find "
"it doesn't provide the necessary level of control. Refer to :ref:`choosing-"
"an-argument-parser` for alternatives to consider when ``argparse`` doesn't "
"support behaviors that the application requires (such as entirely disabling "
"support for interspersed options and positional arguments, or accepting "
"option parameter values that start with ``-`` even when they correspond to "
"another defined option)."
msgstr ""
"Хотя :mod:`argparse` является рекомендуемым стандартным библиотечным модулем "
"по умолчанию для реализации основных приложений командной строки, авторы с "
"более строгими требованиями к поведению своих приложений командной строки "
"могут обнаружить, что он не обеспечивает необходимый уровень контроля. "
"Обратитесь к :ref:`choosing-an-argument-parser`, чтобы узнать об "
"альтернативах, которые следует учитывать, когда argparse`` не поддерживает "
"поведение, необходимое приложению (например, полное отключение поддержки "
"вкраплений параметров и позиционных аргументов или принятие параметра "
"option). значения, начинающиеся с ``-``, даже если они соответствуют другому "
"определенному параметру)."

#: ../../library/argparse.rst-1
msgid "Tutorial"
msgstr "Руководство"

#: ../../library/argparse.rst:30
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the :ref:"
"`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Эта страница содержит справочную информацию по API. Для более подробного "
"ознакомления с синтаксическим анализом командной строки Python ознакомьтесь "
"с :ref:`учебником по argparse <argparse-tutorial>`."

#: ../../library/argparse.rst:34
msgid ""
"The :mod:`!argparse` module makes it easy to write user-friendly command-"
"line interfaces. The program defines what arguments it requires, and :mod:`!"
"argparse` will figure out how to parse those out of :data:`sys.argv`.  The :"
"mod:`!argparse` module also automatically generates help and usage "
"messages.  The module will also issue errors when users give the program "
"invalid arguments."
msgstr ""
"Модуль :mod:`!argparse` позволяет легко писать удобные интерфейсы командной "
"строки. Программа определяет, какие аргументы ей требуются, а :mod:`!"
"argparse` выяснит, как их проанализировать из :data:`sys.argv`. Модуль :mod:"
"`!argparse` также автоматически генерирует справочные сообщения и сообщения "
"об использовании. Модуль также выдает ошибки, когда пользователи "
"предоставляют программе неверные аргументы."

#: ../../library/argparse.rst:40
msgid ""
"The :mod:`!argparse` module's support for command-line interfaces is built "
"around an instance of :class:`argparse.ArgumentParser`.  It is a container "
"for argument specifications and has options that apply to the parser as "
"whole::"
msgstr ""
"Поддержка модуля :mod:`!argparse` для интерфейсов командной строки построена "
"на экземпляре :class:`argparse.ArgumentParser`. Это контейнер для "
"спецификаций аргументов, который имеет параметры, применимые ко всему "
"анализатору:"

#: ../../library/argparse.rst:44
msgid ""
"parser = argparse.ArgumentParser(\n"
"                    prog='ProgramName',\n"
"                    description='What the program does',\n"
"                    epilog='Text at the bottom of help')"
msgstr ""
"parser = argparse.ArgumentParser(\n"
"                    prog='ProgramName',\n"
"                    description='What the program does',\n"
"                    epilog='Text at the bottom of help')"

#: ../../library/argparse.rst:49
msgid ""
"The :meth:`ArgumentParser.add_argument` method attaches individual argument "
"specifications to the parser.  It supports positional arguments, options "
"that accept values, and on/off flags::"
msgstr ""
"Метод :meth:`ArgumentParser.add_argument` присоединяет к анализатору "
"отдельные спецификации аргументов. Он поддерживает позиционные аргументы, "
"параметры, принимающие значения, и флаги включения/выключения::"

#: ../../library/argparse.rst:53
msgid ""
"parser.add_argument('filename')           # positional argument\n"
"parser.add_argument('-c', '--count')      # option that takes a value\n"
"parser.add_argument('-v', '--verbose',\n"
"                    action='store_true')  # on/off flag"
msgstr ""
"parser.add_argument('filename')           # positional argument\n"
"parser.add_argument('-c', '--count')      # option that takes a value\n"
"parser.add_argument('-v', '--verbose',\n"
"                    action='store_true')  # on/off flag"

#: ../../library/argparse.rst:58
msgid ""
"The :meth:`ArgumentParser.parse_args` method runs the parser and places the "
"extracted data in a :class:`argparse.Namespace` object::"
msgstr ""
"Метод :meth:`ArgumentParser.parse_args` запускает анализатор и помещает "
"извлеченные данные в объект :class:`argparse.Namespace`::"

#: ../../library/argparse.rst:61
msgid ""
"args = parser.parse_args()\n"
"print(args.filename, args.count, args.verbose)"
msgstr ""
"args = parser.parse_args()\n"
"print(args.filename, args.count, args.verbose)"

#: ../../library/argparse.rst:65
msgid ""
"If you're looking for a guide about how to upgrade :mod:`optparse` code to :"
"mod:`!argparse`, see :ref:`Upgrading Optparse Code <upgrading-optparse-"
"code>`."
msgstr ""
"Если вы ищете руководство по обновлению кода :mod:`optparse` до :mod:`!"
"argparse`, см. :ref:`Обновление кода Optparse <upgrading-optparse-code>`."

#: ../../library/argparse.rst:69
msgid "ArgumentParser objects"
msgstr "Объекты ArgumentParser"

#: ../../library/argparse.rst:79
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed "
"as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Создайте новый объект :class:`ArgumentParser`. Все параметры должны "
"передаваться как аргументы ключевого слова. Каждый параметр имеет свое более "
"подробное описание ниже, а вкратце они таковы:"

#: ../../library/argparse.rst:83
msgid ""
"prog_ - The name of the program (default: generated from the ``__main__`` "
"module attributes and ``sys.argv[0]``)"
msgstr ""

#: ../../library/argparse.rst:86
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"Usage_ — строка, описывающая использование программы (по умолчанию: "
"генерируется из аргументов, добавленных в парсер)"

#: ../../library/argparse.rst:89
msgid ""
"description_ - Text to display before the argument help (by default, no text)"
msgstr ""
"описание_ — текст, отображаемый перед справкой по аргументам (по умолчанию "
"нет текста)"

#: ../../library/argparse.rst:92
msgid "epilog_ - Text to display after the argument help (by default, no text)"
msgstr ""
"epilog_ — текст, отображаемый после справки по аргументам (по умолчанию без "
"текста)"

#: ../../library/argparse.rst:94
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"Родители_ — список объектов :class:`ArgumentParser`, аргументы которых также "
"должны быть включены."

#: ../../library/argparse.rst:97
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ — класс для настройки вывода справки."

#: ../../library/argparse.rst:99
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr "formatter_class_ — класс для настройки вывода справки."

#: ../../library/argparse.rst:102
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ — набор символов, которые префиксируют файлы, из "
"которых следует считывать дополнительные аргументы (по умолчанию: ``None``)"

#: ../../library/argparse.rst:105
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"аргумент_default_ — глобальное значение по умолчанию для аргументов (по "
"умолчанию: ``Нет``)"

#: ../../library/argparse.rst:108
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"аргумент_default_ — глобальное значение по умолчанию для аргументов (по "
"умолчанию: ``Нет``)"

#: ../../library/argparse.rst:111
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ — добавить в парсер параметр ``-h/--help`` (по умолчанию: ``True``)"

#: ../../library/argparse.rst:113
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is "
"unambiguous (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:116
msgid ""
"exit_on_error_ - Determines whether or not :class:`!ArgumentParser` exits "
"with error info when an error occurs. (default: ``True``)"
msgstr ""
"exit_on_error_ - Определяет, завершается ли :class:`!ArgumentParser` с "
"информацией об ошибке при возникновении ошибки. (по умолчанию: ``True``)"

#: ../../library/argparse.rst:119
msgid ""
"suggest_on_error_ - Enables suggestions for mistyped argument choices and "
"subparser names (default: ``False``)"
msgstr ""

#: ../../library/argparse.rst:122
msgid "color_ - Allow color output (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:124
msgid "*allow_abbrev* parameter was added."
msgstr "Добавлен параметр *allow_abbrev*."

#: ../../library/argparse.rst:127
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"В предыдущих версиях *allow_abbrev* также отключал группировку коротких "
"флагов, таких как ``-vv``, чтобы означать ``-v -v``."

#: ../../library/argparse.rst:131
msgid "*exit_on_error* parameter was added."
msgstr "Добавлен параметр *exit_on_error*."

#: ../../library/argparse.rst:134
msgid "*suggest_on_error* and *color* parameters were added."
msgstr ""

#: ../../library/argparse.rst:137 ../../library/argparse.rst:684
msgid "The following sections describe how each of these are used."
msgstr "В следующих разделах описано, как используется каждый из них."

#: ../../library/argparse.rst:143
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:146
msgid ""
"By default, :class:`ArgumentParser` calculates the name of the program to "
"display in help messages depending on the way the Python interpreter was run:"
msgstr ""
"По умолчанию :class:`ArgumentParser` вычисляет имя программы для отображения "
"в справочных сообщениях в зависимости от способа запуска интерпретатора "
"Python:"

#: ../../library/argparse.rst:149
msgid ""
"The :func:`base name <os.path.basename>` of ``sys.argv[0]`` if a file was "
"passed as argument."
msgstr ""
"Базовое имя <os.path.basename> для ``sys.argv[0]``, если файл был передан в "
"качестве аргумента."

#: ../../library/argparse.rst:151
msgid ""
"The Python interpreter name followed by ``sys.argv[0]`` if a directory or a "
"zipfile was passed as argument."
msgstr ""
"Имя интерпретатора Python, за которым следует ``sys.argv[0]``, если в "
"качестве аргумента был передан каталог или zip-файл."

#: ../../library/argparse.rst:153
msgid ""
"The Python interpreter name followed by ``-m`` followed by the module or "
"package name if the :option:`-m` option was used."
msgstr ""
"Имя интерпретатора Python, за которым следует ``-m``, а затем имя модуля или "
"пакета, если использовался параметр :option:`-m`."

#: ../../library/argparse.rst:156
msgid ""
"This default is almost always desirable because it will make the help "
"messages match the string that was used to invoke the program on the command "
"line. However, to change this default behavior, another value can be "
"supplied using the ``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Это значение по умолчанию почти всегда желательно, поскольку при нем "
"справочные сообщения будут соответствовать строке, которая использовалась "
"для вызова программы в командной строке. Однако, чтобы изменить это "
"поведение по умолчанию, можно указать другое значение, используя аргумент "
"``prog=`` для :class:`ArgumentParser`::"

#: ../../library/argparse.rst:161
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"

#: ../../library/argparse.rst:168
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]``, from "
"the ``__main__`` module attributes or from the ``prog=`` argument, is "
"available to help messages using the ``%(prog)s`` format specifier."
msgstr ""

#: ../../library/argparse.rst:175
msgid ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.add_argument('--foo', help='foo of the %(prog)s program')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   foo of the myprogram program"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='myprogram')\n"
">>> parser.add_argument('--foo', help='foo of the %(prog)s program')\n"
">>> parser.print_help()\n"
"usage: myprogram [-h] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   foo of the myprogram program"

#: ../../library/argparse.rst:184
msgid ""
"The default ``prog`` value now reflects how ``__main__`` was actually "
"executed, rather than always being ``os.path.basename(sys.argv[0])``."
msgstr ""

#: ../../library/argparse.rst:189
msgid "usage"
msgstr "использование"

#: ../../library/argparse.rst:191
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains. The default message can be overridden with the "
"``usage=`` keyword argument::"
msgstr ""
"По умолчанию :class:`ArgumentParser` вычисляет сообщение об использовании на "
"основе содержащихся в нем аргументов. Сообщение по умолчанию можно "
"переопределить с помощью аргумента ключевого слова ``usage=``::"

#: ../../library/argparse.rst:195
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s "
"[options]')\n"
">>> parser.add_argument('--foo', nargs='?', help='foo help')\n"
">>> parser.add_argument('bar', nargs='+', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [options]\n"
"\n"
"positional arguments:\n"
" bar          bar help\n"
"\n"
"options:\n"
" -h, --help   show this help message and exit\n"
" --foo [FOO]  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s "
"[options]')\n"
">>> parser.add_argument('--foo', nargs='?', help='foo help')\n"
">>> parser.add_argument('bar', nargs='+', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [options]\n"
"\n"
"positional arguments:\n"
" bar          bar help\n"
"\n"
"options:\n"
" -h, --help   show this help message and exit\n"
" --foo [FOO]  foo help"

#: ../../library/argparse.rst:208
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"`` %(прог)с `` Спецификатор формата доступен для заполнения имени программы "
"в сообщениях об использовании."

#: ../../library/argparse.rst:211
msgid ""
"When a custom usage message is specified for the main parser, you may also "
"want to consider passing  the ``prog`` argument to :meth:`~ArgumentParser."
"add_subparsers` or the ``prog`` and the ``usage`` arguments to :meth:"
"`~_SubParsersAction.add_parser`, to ensure consistent command prefixes and "
"usage information across subparsers."
msgstr ""

#: ../../library/argparse.rst:221
msgid "description"
msgstr "описание"

#: ../../library/argparse.rst:223
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments."
msgstr ""
"Большинство вызовов конструктора :class:`ArgumentParser` будут использовать "
"аргумент ключевого слова ``description=``. Этот аргумент дает краткое "
"описание того, что делает программа и как она работает. В справочных "
"сообщениях описание отображается между строкой использования командной "
"строки и справочными сообщениями для различных аргументов."

#: ../../library/argparse.rst:229
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"По умолчанию описание будет перенесено по строкам, чтобы оно помещалось в "
"заданное пространство. Чтобы изменить это поведение, см. аргумент "
"formatter_class_."

#: ../../library/argparse.rst:234
msgid "epilog"
msgstr "эпилог"

#: ../../library/argparse.rst:236
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Некоторые программы любят отображать дополнительное описание программы после "
"описания аргументов. Такой текст можно указать с помощью аргумента "
"``epilog=`` для :class:`ArgumentParser`::"

#: ../../library/argparse.rst:240
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     description='A foo that bars',\n"
"...     epilog=\"And that's how you'd foo a bar\")\n"
">>> parser.print_help()\n"
"usage: argparse.py [-h]\n"
"\n"
"A foo that bars\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"And that's how you'd foo a bar"
msgstr ""
">>> parser = argparse.ArgumentParser(\n"
"...     description='A foo that bars',\n"
"...     epilog=\"And that's how you'd foo a bar\")\n"
">>> parser.print_help()\n"
"usage: argparse.py [-h]\n"
"\n"
"A foo that bars\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"And that's how you'd foo a bar"

#: ../../library/argparse.rst:253
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Как и в случае с аргументомdescription_, текст ``epilog=`` по умолчанию "
"переносится на строки, но это поведение можно настроить с помощью аргумента "
"formatter_class_ на :class:`ArgumentParser`."

#: ../../library/argparse.rst:259
msgid "parents"
msgstr "родители"

#: ../../library/argparse.rst:261
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to :class:"
"`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :"
"class:`ArgumentParser` objects, collects all the positional and optional "
"actions from them, and adds these actions to the :class:`ArgumentParser` "
"object being constructed::"
msgstr ""
"Иногда несколько парсеров имеют общий набор аргументов. Вместо повторения "
"определений этих аргументов можно использовать один анализатор со всеми "
"общими аргументами и аргументом ``parents=`` в :class:`ArgumentParser`. "
"Аргумент ``parents=`` принимает список объектов :class:`ArgumentParser`, "
"собирает из них все позиционные и необязательные действия и добавляет эти "
"действия в конструируемый объект :class:`ArgumentParser`::"

#: ../../library/argparse.rst:268
msgid ""
">>> parent_parser = argparse.ArgumentParser(add_help=False)\n"
">>> parent_parser.add_argument('--parent', type=int)\n"
"\n"
">>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> foo_parser.add_argument('foo')\n"
">>> foo_parser.parse_args(['--parent', '2', 'XXX'])\n"
"Namespace(foo='XXX', parent=2)\n"
"\n"
">>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> bar_parser.add_argument('--bar')\n"
">>> bar_parser.parse_args(['--bar', 'YYY'])\n"
"Namespace(bar='YYY', parent=None)"
msgstr ""
">>> parent_parser = argparse.ArgumentParser(add_help=False)\n"
">>> parent_parser.add_argument('--parent', type=int)\n"
"\n"
">>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> foo_parser.add_argument('foo')\n"
">>> foo_parser.parse_args(['--parent', '2', 'XXX'])\n"
"Namespace(foo='XXX', parent=2)\n"
"\n"
">>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])\n"
">>> bar_parser.add_argument('--bar')\n"
">>> bar_parser.parse_args(['--bar', 'YYY'])\n"
"Namespace(bar='YYY', parent=None)"

#: ../../library/argparse.rst:281
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Обратите внимание, что большинство родительских парсеров указывают "
"``add_help=False``. В противном случае :class:`ArgumentParser` увидит два "
"параметра ``-h/--help`` (один в родительском и один в дочернем) и выдаст "
"ошибку."

#: ../../library/argparse.rst:286
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Вы должны полностью инициализировать парсеры перед передачей их через "
"``parents=``. Если вы измените родительские парсеры после дочернего парсера, "
"эти изменения не будут отражены в дочернем."

#: ../../library/argparse.rst:294
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:296
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such "
"classes:"
msgstr ""
"Объекты :class:`ArgumentParser` позволяют настраивать форматирование справки "
"путем указания альтернативного класса форматирования. На данный момент "
"существует четыре таких класса:"

#: ../../library/argparse.rst:305
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, :class:"
"`ArgumentParser` objects line-wrap the description_ and epilog_ texts in "
"command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` и :class:`RawTextHelpFormatter` дают "
"больше контроля над тем, как отображаются текстовые описания. По умолчанию "
"объекты :class:`ArgumentParser` переносят тексты описания_ и эпилог_ в "
"справочных сообщениях командной строки::"

#: ../../library/argparse.rst:310
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     description='''this description\n"
"...         was indented weird\n"
"...             but that is okay''',\n"
"...     epilog='''\n"
"...             likewise for this epilog whose whitespace will\n"
"...         be cleaned up and whose words will be wrapped\n"
"...         across a couple lines''')\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"this description was indented weird but that is okay\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"likewise for this epilog whose whitespace will be cleaned up and whose "
"words\n"
"will be wrapped across a couple lines"
msgstr ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     description='''this description\n"
"...         was indented weird\n"
"...             but that is okay''',\n"
"...     epilog='''\n"
"...             likewise for this epilog whose whitespace will\n"
"...         be cleaned up and whose words will be wrapped\n"
"...         across a couple lines''')\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"this description was indented weird but that is okay\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
"\n"
"likewise for this epilog whose whitespace will be cleaned up and whose "
"words\n"
"will be wrapped across a couple lines"

#: ../../library/argparse.rst:330
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Передача :class:`RawDescriptionHelpFormatter` как ``formatter_class=`` "
"указывает, что описание_ и эпилог_ уже отформатированы правильно и их не "
"следует переносить по строкам::"

#: ../../library/argparse.rst:334
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.RawDescriptionHelpFormatter,\n"
"...     description=textwrap.dedent('''\\\n"
"...         Please do not mess up this text!\n"
"...         --------------------------------\n"
"...             I have indented it\n"
"...             exactly the way\n"
"...             I want it\n"
"...         '''))\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"Please do not mess up this text!\n"
"--------------------------------\n"
"   I have indented it\n"
"   exactly the way\n"
"   I want it\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.RawDescriptionHelpFormatter,\n"
"...     description=textwrap.dedent('''\\\n"
"...         Please do not mess up this text!\n"
"...         --------------------------------\n"
"...             I have indented it\n"
"...             exactly the way\n"
"...             I want it\n"
"...         '''))\n"
">>> parser.print_help()\n"
"usage: PROG [-h]\n"
"\n"
"Please do not mess up this text!\n"
"--------------------------------\n"
"   I have indented it\n"
"   exactly the way\n"
"   I want it\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"

#: ../../library/argparse.rst:356
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple newlines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""
":class:`RawTextHelpFormatter` сохраняет пробелы для всех видов справочного "
"текста, включая описания аргументов. Однако несколько новых строк заменяются "
"одним. Если вы хотите сохранить несколько пустых строк, добавьте пробелы "
"между символами новой строки."

#: ../../library/argparse.rst:361
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` автоматически добавляет информацию о "
"значениях по умолчанию в каждое из справочных сообщений по аргументам::"

#: ../../library/argparse.rst:364
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int, default=42, help='FOO!')\n"
">>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo FOO] [bar ...]\n"
"\n"
"positional arguments:\n"
" bar         BAR! (default: [1, 2, 3])\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   FOO! (default: 42)"
msgstr ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int, default=42, help='FOO!')\n"
">>> parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo FOO] [bar ...]\n"
"\n"
"positional arguments:\n"
" bar         BAR! (default: [1, 2, 3])\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO   FOO! (default: 42)"

#: ../../library/argparse.rst:379
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` использует имя аргумента type_ для каждого "
"аргумента в качестве отображаемого имени для его значений (вместо "
"использования dest_, как это делает обычный форматтер)::"

#: ../../library/argparse.rst:383
msgid ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.MetavarTypeHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', type=float)\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo int] float\n"
"\n"
"positional arguments:\n"
"  float\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo int"
msgstr ""
">>> parser = argparse.ArgumentParser(\n"
"...     prog='PROG',\n"
"...     formatter_class=argparse.MetavarTypeHelpFormatter)\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', type=float)\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [--foo int] float\n"
"\n"
"positional arguments:\n"
"  float\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo int"

#: ../../library/argparse.rst:400
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:402
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g. "
"for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the :class:`ArgumentParser` constructor::"
msgstr ""
"Большинство параметров командной строки будут использовать ``-`` в качестве "
"префикса, например ``-f/--foo``. Парсеры, которым необходимо поддерживать "
"другие или дополнительные символы префикса, например, для таких параметров, "
"как ``+f`` или ``/foo``, могут указать их с помощью аргумента "
"``prefix_chars=`` в конструкторе :class:`ArgumentParser` ::"

#: ../../library/argparse.rst:408
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')\n"
">>> parser.add_argument('+f')\n"
">>> parser.add_argument('++bar')\n"
">>> parser.parse_args('+f X ++bar Y'.split())\n"
"Namespace(bar='Y', f='X')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')\n"
">>> parser.add_argument('+f')\n"
">>> parser.add_argument('++bar')\n"
">>> parser.parse_args('+f X ++bar Y'.split())\n"
"Namespace(bar='Y', f='X')"

#: ../../library/argparse.rst:414
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be "
"disallowed."
msgstr ""
"Аргумент ``prefix_chars=`` по умолчанию имеет значение ``'-'``. "
"Предоставление набора символов, не включающего ``-``, приведет к запрещению "
"опций ``-f/--foo``."

#: ../../library/argparse.rst:420
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:422
msgid ""
"Sometimes, when dealing with a particularly long argument list, it may make "
"sense to keep the list of arguments in a file rather than typing it out at "
"the command line.  If the ``fromfile_prefix_chars=`` argument is given to "
"the :class:`ArgumentParser` constructor, then arguments that start with any "
"of the specified characters will be treated as files, and will be replaced "
"by the arguments they contain.  For example::"
msgstr ""
"Иногда, имея дело с особенно длинным списком аргументов, может иметь смысл "
"сохранить список аргументов в файле, а не вводить его в командной строке. "
"Если аргумент fromfile_prefix_chars=`` передан конструктору :class:"
"`ArgumentParser`, то аргументы, начинающиеся с любого из указанных символов, "
"будут рассматриваться как файлы и будут заменены аргументами, которые они "
"содержат. Например::"

#: ../../library/argparse.rst:429
msgid ""
">>> with open('args.txt', 'w', encoding=sys.getfilesystemencoding()) as fp:\n"
"...     fp.write('-f\\nbar')\n"
"...\n"
">>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')\n"
">>> parser.add_argument('-f')\n"
">>> parser.parse_args(['-f', 'foo', '@args.txt'])\n"
"Namespace(f='bar')"
msgstr ""
">>> with open('args.txt', 'w', encoding=sys.getfilesystemencoding()) as fp:\n"
"...     fp.write('-f\\nbar')\n"
"...\n"
">>> parser = argparse.ArgumentParser(fromfile_prefix_chars='@')\n"
">>> parser.add_argument('-f')\n"
">>> parser.parse_args(['-f', 'foo', '@args.txt'])\n"
"Namespace(f='bar')"

#: ../../library/argparse.rst:437
msgid ""
"Arguments read from a file must be one per line by default (but see also :"
"meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they "
"were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-"
"f', 'bar']``."
msgstr ""

#: ../../library/argparse.rst:445
msgid ""
"Empty lines are treated as empty strings (``''``), which are allowed as "
"values but not as arguments. Empty lines that are read as arguments will "
"result in an \"unrecognized arguments\" error."
msgstr ""

#: ../../library/argparse.rst:449
msgid ""
":class:`ArgumentParser` uses :term:`filesystem encoding and error handler` "
"to read the file containing arguments."
msgstr ""
":class:`ArgumentParser` использует :term:`кодировку файловой системы и "
"обработчик ошибок` для чтения файла, содержащего аргументы."

#: ../../library/argparse.rst:452
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"Аргумент fromfile_prefix_chars=`` по умолчанию имеет значение None, что "
"означает, что аргументы никогда не будут рассматриваться как ссылки на файлы."

#: ../../library/argparse.rst:455
msgid ""
":class:`ArgumentParser` changed encoding and errors to read arguments files "
"from default (e.g. :func:`locale.getpreferredencoding(False) <locale."
"getpreferredencoding>` and ``\"strict\"``) to the :term:`filesystem encoding "
"and error handler`. Arguments file should be encoded in UTF-8 instead of "
"ANSI Codepage on Windows."
msgstr ""
":class:`ArgumentParser` изменил кодировку и ошибки для чтения файлов "
"аргументов со стандартного (например, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>` и ``\"strict\"``) "
"на файловую систему :term:` кодировка и обработчик ошибок`. Файл аргументов "
"должен быть закодирован в UTF-8 вместо кодовой страницы ANSI в Windows."

#: ../../library/argparse.rst:463
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:465
msgid ""
"Generally, argument defaults are specified either by passing a default to :"
"meth:`~ArgumentParser.add_argument` or by calling the :meth:`~ArgumentParser."
"set_defaults` methods with a specific set of name-value pairs.  Sometimes "
"however, it may be useful to specify a single parser-wide default for "
"arguments.  This can be accomplished by passing the ``argument_default=`` "
"keyword argument to :class:`ArgumentParser`.  For example, to globally "
"suppress attribute creation on :meth:`~ArgumentParser.parse_args` calls, we "
"supply ``argument_default=SUPPRESS``::"
msgstr ""
"Обычно значения аргументов по умолчанию указываются либо путем передачи "
"значения по умолчанию в :meth:`~ArgumentParser.add_argument`, либо путем "
"вызова методов :meth:`~ArgumentParser.set_defaults` с определенным набором "
"пар имя-значение. Однако иногда может оказаться полезным указать для "
"аргументов одно значение по умолчанию для всего синтаксического анализатора. "
"Этого можно добиться, передав аргумент ключевого слова ``argument_default=`` "
"в :class:`ArgumentParser`. Например, чтобы глобально подавить создание "
"атрибутов при вызовах :meth:`~ArgumentParser.parse_args`, мы предоставляем "
"``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:474
msgid ""
">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar', nargs='?')\n"
">>> parser.parse_args(['--foo', '1', 'BAR'])\n"
"Namespace(bar='BAR', foo='1')\n"
">>> parser.parse_args([])\n"
"Namespace()"
msgstr ""
">>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar', nargs='?')\n"
">>> parser.parse_args(['--foo', '1', 'BAR'])\n"
"Namespace(bar='BAR', foo='1')\n"
">>> parser.parse_args([])\n"
"Namespace()"

#: ../../library/argparse.rst:485
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:487
msgid ""
"Normally, when you pass an argument list to the :meth:`~ArgumentParser."
"parse_args` method of an :class:`ArgumentParser`, it :ref:`recognizes "
"abbreviations <prefix-matching>` of long options."
msgstr ""
"Обычно, когда вы передаете список аргументов методу :meth:`~ArgumentParser."
"parse_args` :class:`ArgumentParser`, он :ref:`распознаёт сокращения <prefix-"
"matching>` длинных опций."

#: ../../library/argparse.rst:491
msgid "This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Эту функцию можно отключить, установив для ``allow_abbrev`` значение "
"``False``::"

#: ../../library/argparse.rst:493
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)\n"
">>> parser.add_argument('--foobar', action='store_true')\n"
">>> parser.add_argument('--foonley', action='store_false')\n"
">>> parser.parse_args(['--foon'])\n"
"usage: PROG [-h] [--foobar] [--foonley]\n"
"PROG: error: unrecognized arguments: --foon"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', allow_abbrev=False)\n"
">>> parser.add_argument('--foobar', action='store_true')\n"
">>> parser.add_argument('--foonley', action='store_false')\n"
">>> parser.parse_args(['--foon'])\n"
"usage: PROG [-h] [--foobar] [--foonley]\n"
"PROG: error: unrecognized arguments: --foon"

#: ../../library/argparse.rst:504
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:506
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
"Объекты :class:`ArgumentParser` не допускают двух действий с одной и той же "
"строкой параметров. По умолчанию объекты :class:`ArgumentParser` вызывают "
"исключение, если предпринимается попытка создать аргумент со строкой "
"параметра, которая уже используется::"

#: ../../library/argparse.rst:511
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
"Traceback (most recent call last):\n"
" ..\n"
"ArgumentError: argument --foo: conflicting option string(s): --foo"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
"Traceback (most recent call last):\n"
" ..\n"
"ArgumentError: argument --foo: conflicting option string(s): --foo"

#: ../../library/argparse.rst:518
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any "
"older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument "
"of :class:`ArgumentParser`::"
msgstr ""
"Иногда (например, при использовании родителей_) может быть полезно просто "
"переопределить любые старые аргументы с той же строкой параметров. Чтобы "
"получить такое поведение, значение ``'resolve'`` может быть передано в "
"аргумент ``conflict_handler=`` :class:`ArgumentParser`::"

#: ../../library/argparse.rst:523
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', "
"conflict_handler='resolve')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-f FOO] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" -f FOO      old foo help\n"
" --foo FOO   new foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', "
"conflict_handler='resolve')\n"
">>> parser.add_argument('-f', '--foo', help='old foo help')\n"
">>> parser.add_argument('--foo', help='new foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-f FOO] [--foo FOO]\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" -f FOO      old foo help\n"
" --foo FOO   new foo help"

#: ../../library/argparse.rst:534
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old ``-f/--"
"foo`` action is retained as the ``-f`` action, because only the ``--foo`` "
"option string was overridden."
msgstr ""
"Обратите внимание, что объекты :class:`ArgumentParser` удаляют действие "
"только в том случае, если все его строки параметров переопределены. Итак, в "
"приведенном выше примере старое действие ``-f/--foo`` сохраняется как "
"действие ``-f``, поскольку была переопределена только строка параметра ``--"
"foo``."

#: ../../library/argparse.rst:541
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:543
msgid ""
"By default, :class:`ArgumentParser` objects add an option which simply "
"displays the parser's help message. If ``-h`` or ``--help`` is supplied at "
"the command line, the :class:`!ArgumentParser` help will be printed."
msgstr ""
"По умолчанию объекты :class:`ArgumentParser` добавляют опцию, которая просто "
"отображает справочное сообщение анализатора. Если в командной строке указан "
"``-h`` или ``--help``, будет напечатана справка :class:`!ArgumentParser`."

#: ../../library/argparse.rst:547
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to :"
"class:`ArgumentParser`::"
msgstr ""
"Иногда может быть полезно отключить добавление этой опции справки. Этого "
"можно добиться, передав False в качестве аргумента add_help=`` в :class:"
"`ArgumentParser`::"

#: ../../library/argparse.rst:551
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> parser.add_argument('--foo', help='foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO]\n"
"\n"
"options:\n"
" --foo FOO  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> parser.add_argument('--foo', help='foo help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO]\n"
"\n"
"options:\n"
" --foo FOO  foo help"

#: ../../library/argparse.rst:559
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case ``-"
"h`` and ``--help`` are not valid options.  In this case, the first character "
"in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"Опцией справки обычно является ``-h/--help``. Исключением является случай, "
"когда указан ``prefix_chars=`` и он не включает ``-``, и в этом случае ``-"
"h`` и ``--help`` не являются допустимыми параметрами. В этом случае первый "
"символ в ``prefix_chars`` используется для префикса опций справки::"

#: ../../library/argparse.rst:565
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')\n"
">>> parser.print_help()\n"
"usage: PROG [+h]\n"
"\n"
"options:\n"
"  +h, ++help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/')\n"
">>> parser.print_help()\n"
"usage: PROG [+h]\n"
"\n"
"options:\n"
"  +h, ++help  show this help message and exit"

#: ../../library/argparse.rst:574
msgid "exit_on_error"
msgstr "выход_при_ошибке"

#: ../../library/argparse.rst:576
msgid ""
"Normally, when you pass an invalid argument list to the :meth:"
"`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it will "
"print a *message* to :data:`sys.stderr` and exit with a status code of 2."
msgstr ""
"Обычно, когда вы передаете недопустимый список аргументов методу :meth:"
"`~ArgumentParser.parse_args` :class:`ArgumentParser`, он печатает "
"*сообщение* в :data:`sys.stderr` и завершается с ошибкой код состояния 2."

#: ../../library/argparse.rst:580
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr ""
"Если пользователь хочет отслеживать ошибки вручную, эту функцию можно "
"включить, установив для ``exit_on_error`` значение ``False``::"

#: ../../library/argparse.rst:583
msgid ""
">>> parser = argparse.ArgumentParser(exit_on_error=False)\n"
">>> parser.add_argument('--integers', type=int)\n"
"_StoreAction(option_strings=['--integers'], dest='integers', nargs=None, "
"const=None, default=None, type=<class 'int'>, choices=None, help=None, "
"metavar=None)\n"
">>> try:\n"
"...     parser.parse_args('--integers a'.split())\n"
"... except argparse.ArgumentError:\n"
"...     print('Catching an argumentError')\n"
"...\n"
"Catching an argumentError"
msgstr ""
">>> parser = argparse.ArgumentParser(exit_on_error=False)\n"
">>> parser.add_argument('--integers', type=int)\n"
"_StoreAction(option_strings=['--integers'], dest='integers', nargs=None, "
"const=None, default=None, type=<class 'int'>, choices=None, help=None, "
"metavar=None)\n"
">>> try:\n"
"...     parser.parse_args('--integers a'.split())\n"
"... except argparse.ArgumentError:\n"
"...     print('Catching an argumentError')\n"
"...\n"
"Catching an argumentError"

#: ../../library/argparse.rst:596
msgid "suggest_on_error"
msgstr ""

#: ../../library/argparse.rst:598
msgid ""
"By default, when a user passes an invalid argument choice or subparser "
"name, :class:`ArgumentParser` will exit with error info and list the "
"permissible argument choices (if specified) or subparser names as part of "
"the error message."
msgstr ""

#: ../../library/argparse.rst:602
msgid ""
"If the user would like to enable suggestions for mistyped argument choices "
"and subparser names, the feature can be enabled by setting "
"``suggest_on_error`` to ``True``. Note that this only applies for arguments "
"when the choices specified are strings::"
msgstr ""

#: ../../library/argparse.rst:607
msgid ""
">>> parser = argparse.ArgumentParser(description='Process some integers.',\n"
"                                     suggest_on_error=True)\n"
">>> parser.add_argument('--action', choices=['sum', 'max'])\n"
">>> parser.add_argument('integers', metavar='N', type=int, nargs='+',\n"
"...                     help='an integer for the accumulator')\n"
">>> parser.parse_args(['--action', 'sumn', 1, 2, 3])\n"
"tester.py: error: argument --action: invalid choice: 'sumn', maybe you meant "
"'sum'? (choose from 'sum', 'max')"
msgstr ""

#: ../../library/argparse.rst:615
msgid ""
"If you're writing code that needs to be compatible with older Python "
"versions and want to opportunistically use ``suggest_on_error`` when it's "
"available, you can set it as an attribute after initializing the parser "
"instead of using the keyword argument::"
msgstr ""

#: ../../library/argparse.rst:620
msgid ""
">>> parser = argparse.ArgumentParser(description='Process some integers.')\n"
">>> parser.suggest_on_error = True"
msgstr ""

#: ../../library/argparse.rst:627
msgid "color"
msgstr "цвет"

#: ../../library/argparse.rst:629
msgid ""
"By default, the help message is printed in color using `ANSI escape "
"sequences <https://en.wikipedia.org/wiki/ANSI_escape_code>`__. If you want "
"plain text help messages, you can disable this :ref:`in your local "
"environment <using-on-controlling-color>`, or in the argument parser itself "
"by setting ``color`` to ``False``::"
msgstr ""

#: ../../library/argparse.rst:635
msgid ""
">>> parser = argparse.ArgumentParser(description='Process some integers.',\n"
"...                                  color=False)\n"
">>> parser.add_argument('--action', choices=['sum', 'max'])\n"
">>> parser.add_argument('integers', metavar='N', type=int, nargs='+',\n"
"...                     help='an integer for the accumulator')\n"
">>> parser.parse_args(['--help'])"
msgstr ""

#: ../../library/argparse.rst:646
msgid "The add_argument() method"
msgstr "Метод add_argument()"

#: ../../library/argparse.rst:652
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Определите, как следует анализировать один аргумент командной строки. Каждый "
"параметр имеет свое более подробное описание ниже, а вкратце они таковы:"

#: ../../library/argparse.rst:655
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``'foo'`` "
"or ``'-f', '--foo'``."
msgstr ""
"`name or flags`_ ​​— либо имя, либо список строк опций, например ``'foo'`` или "
"``'-f', '--foo'``."

#: ../../library/argparse.rst:658
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ — основной тип действия, которое необходимо предпринять, когда этот "
"аргумент встречается в командной строке."

#: ../../library/argparse.rst:661
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ — количество аргументов командной строки, которые следует "
"использовать."

#: ../../library/argparse.rst:663
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ — постоянное значение, необходимое для некоторых вариантов выбора "
"action_ и nargs_."

#: ../../library/argparse.rst:665
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr ""
"default_ — значение, создаваемое, если аргумент отсутствует в командной "
"строке и если он отсутствует в объекте пространства имен."

#: ../../library/argparse.rst:668
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr ""
"type_ — тип, в который должен быть преобразован аргумент командной строки."

#: ../../library/argparse.rst:670
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr "choice_ — последовательность допустимых значений аргумента."

#: ../../library/argparse.rst:672
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals "
"only)."
msgstr ""
"required_ — можно ли опустить параметр командной строки (необязательно)."

#: ../../library/argparse.rst:675
msgid "help_ - A brief description of what the argument does."
msgstr "help_ — краткое описание того, что делает аргумент."

#: ../../library/argparse.rst:677
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ — имя аргумента в сообщениях об использовании."

#: ../../library/argparse.rst:679
msgid ""
"dest_ - The name of the attribute to be added to the object returned by :"
"meth:`parse_args`."
msgstr ""
"dest_ — имя атрибута, добавляемого к объекту, возвращаемому :meth:"
"`parse_args`."

#: ../../library/argparse.rst:682
msgid "deprecated_ - Whether or not use of the argument is deprecated."
msgstr "deprecated_ — устарело или нет использование аргумента."

#: ../../library/argparse.rst:690
msgid "name or flags"
msgstr "имя или флаги"

#: ../../library/argparse.rst:692
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to :meth:"
"`~ArgumentParser.add_argument` must therefore be either a series of flags, "
"or a simple argument name."
msgstr ""
"Метод :meth:`~ArgumentParser.add_argument` должен знать, ожидается ли "
"необязательный аргумент, например ``-f`` или ``--foo``, или позиционный "
"аргумент, например список имен файлов. Поэтому первые аргументы, "
"передаваемые в :meth:`~ArgumentParser.add_argument`, должны быть либо серией "
"флагов, либо простым именем аргумента."

#: ../../library/argparse.rst:698
msgid "For example, an optional argument could be created like::"
msgstr "Например, необязательный аргумент может быть создан следующим образом:"

#: ../../library/argparse.rst:700
msgid ">>> parser.add_argument('-f', '--foo')"
msgstr ">>> parser.add_argument('-f', '--foo')"

#: ../../library/argparse.rst:702
msgid "while a positional argument could be created like::"
msgstr ""
"в то время как позиционный аргумент может быть создан следующим образом::"

#: ../../library/argparse.rst:704
msgid ">>> parser.add_argument('bar')"
msgstr ">>> parser.add_argument('bar')"

#: ../../library/argparse.rst:706
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"При вызове :meth:`~ArgumentParser.parse_args` необязательные аргументы будут "
"обозначаться префиксом ``-``, а остальные аргументы будут считаться "
"позиционными::"

#: ../../library/argparse.rst:710
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['BAR'])\n"
"Namespace(bar='BAR', foo=None)\n"
">>> parser.parse_args(['BAR', '--foo', 'FOO'])\n"
"Namespace(bar='BAR', foo='FOO')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"usage: PROG [-h] [-f FOO] bar\n"
"PROG: error: the following arguments are required: bar"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-f', '--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['BAR'])\n"
"Namespace(bar='BAR', foo=None)\n"
">>> parser.parse_args(['BAR', '--foo', 'FOO'])\n"
"Namespace(bar='BAR', foo='FOO')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"usage: PROG [-h] [-f FOO] bar\n"
"PROG: error: the following arguments are required: bar"

#: ../../library/argparse.rst:721
msgid ""
"By default, :mod:`!argparse` automatically handles the internal naming and "
"display names of arguments, simplifying the process without requiring "
"additional configuration. As such, you do not need to specify the dest_ and "
"metavar_ parameters. The dest_ parameter defaults to the argument name with "
"underscores ``_`` replacing hyphens ``-`` . The metavar_ parameter defaults "
"to the upper-cased name. For example::"
msgstr ""

#: ../../library/argparse.rst:729
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo-bar')\n"
">>> parser.parse_args(['--foo-bar', 'FOO-BAR']\n"
"Namespace(foo_bar='FOO-BAR')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo-bar FOO-BAR]\n"
"\n"
"optional arguments:\n"
" -h, --help  show this help message and exit\n"
" --foo-bar FOO-BAR"
msgstr ""

#: ../../library/argparse.rst:744
msgid "action"
msgstr "действие"

#: ../../library/argparse.rst:746
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
"Объекты :class:`ArgumentParser` связывают аргументы командной строки с "
"действиями. Эти действия могут делать практически все что угодно с "
"связанными с ними аргументами командной строки, хотя большинство действий "
"просто добавляют атрибут к объекту, возвращаемому :meth:`~ArgumentParser."
"parse_args`. Аргумент ключевого слова ``action`` определяет, как следует "
"обрабатывать аргументы командной строки. Предоставленные действия:"

#: ../../library/argparse.rst:752
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action."
msgstr ""
"``'store'`` - просто сохраняет значение аргумента. Это действие по умолчанию."

#: ../../library/argparse.rst:755
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument; note that the const_ keyword argument defaults to ``None``.  The "
"``'store_const'`` action is most commonly used with optional arguments that "
"specify some sort of flag.  For example::"
msgstr ""
"``'store_const'`` - сохраняет значение, указанное аргументом ключевого слова "
"const_; обратите внимание, что аргумент ключевого слова const_ по умолчанию "
"имеет значение None. Действие ``'store_const'` чаще всего используется с "
"дополнительными аргументами, которые определяют какой-либо флаг. Например::"

#: ../../library/argparse.rst:760
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_const', const=42)\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_const', const=42)\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(foo=42)"

#: ../../library/argparse.rst:765
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively::"
msgstr ""
"``'store_true'`` и ``'store_false'`` — это особые случаи ``'store_const'``, "
"используемые для хранения значений ``True`` и ``False`` соответственно. "
"Кроме того, они создают значения по умолчанию «False» и «True» "
"соответственно:"

#: ../../library/argparse.rst:770
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('--bar', action='store_false')\n"
">>> parser.add_argument('--baz', action='store_false')\n"
">>> parser.parse_args('--foo --bar'.split())\n"
"Namespace(foo=True, bar=False, baz=True)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('--bar', action='store_false')\n"
">>> parser.add_argument('--baz', action='store_false')\n"
">>> parser.parse_args('--foo --bar'.split())\n"
"Namespace(foo=True, bar=False, baz=True)"

#: ../../library/argparse.rst:777
msgid ""
"``'append'`` - This appends each argument value to a list. It is useful for "
"allowing an option to be specified multiple times. If the default value is a "
"non-empty list, the parsed value will start with the default list's elements "
"and any values from the command line will be appended after those default "
"values. Example usage::"
msgstr ""

#: ../../library/argparse.rst:783
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='append', default=['0'])\n"
">>> parser.parse_args('--foo 1 --foo 2'.split())\n"
"Namespace(foo=['0', '1', '2'])"
msgstr ""

#: ../../library/argparse.rst:788
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list; note that the const_ keyword "
"argument defaults to ``None``. The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For "
"example::"
msgstr ""
"``'append_const'`` - сохраняет список и добавляет к списку значение, "
"указанное аргументом ключевого слова const_; обратите внимание, что аргумент "
"ключевого слова const_ по умолчанию имеет значение None. Действие "
"``'append_const'` обычно полезно, когда несколько аргументов должны хранить "
"константы в одном списке. Например::"

#: ../../library/argparse.rst:794
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--str', dest='types', action='append_const', "
"const=str)\n"
">>> parser.add_argument('--int', dest='types', action='append_const', "
"const=int)\n"
">>> parser.parse_args('--str --int'.split())\n"
"Namespace(types=[<class 'str'>, <class 'int'>])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--str', dest='types', action='append_const', "
"const=str)\n"
">>> parser.add_argument('--int', dest='types', action='append_const', "
"const=int)\n"
">>> parser.parse_args('--str --int'.split())\n"
"Namespace(types=[<class 'str'>, <class 'int'>])"

#: ../../library/argparse.rst:800
msgid ""
"``'extend'`` - This stores a list and appends each item from the multi-value "
"argument list to it. The ``'extend'`` action is typically used with the "
"nargs_ keyword argument value ``'+'`` or ``'*'``. Note that when nargs_ is "
"``None`` (the default) or ``'?'``, each character of the argument string "
"will be appended to the list. Example usage::"
msgstr ""
"``'extend'`` - сохраняет список и добавляет к нему каждый элемент из списка "
"многозначных аргументов. Действие ``'extend'`` обычно используется со "
"значением аргумента ключевого слова nargs_ ``'+'`` или ``'*'``. Обратите "
"внимание, что когда nargs_ имеет значение None (по умолчанию) или ``'?'``, "
"каждый символ строки аргумента будет добавлен в список. Пример "
"использования::"

#: ../../library/argparse.rst:808
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\"--foo\", action=\"extend\", nargs=\"+\", "
"type=str)\n"
">>> parser.parse_args([\"--foo\", \"f1\", \"--foo\", \"f2\", \"f3\", "
"\"f4\"])\n"
"Namespace(foo=['f1', 'f2', 'f3', 'f4'])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\"--foo\", action=\"extend\", nargs=\"+\", "
"type=str)\n"
">>> parser.parse_args([\"--foo\", \"f1\", \"--foo\", \"f2\", \"f3\", "
"\"f4\"])\n"
"Namespace(foo=['f1', 'f2', 'f3', 'f4'])"

#: ../../library/argparse.rst:815
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For "
"example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` — подсчитывает количество раз, когда встречается аргумент "
"ключевого слова. Например, это полезно для повышения уровня детализации:"

#: ../../library/argparse.rst:818
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--verbose', '-v', action='count', default=0)\n"
">>> parser.parse_args(['-vvv'])\n"
"Namespace(verbose=3)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--verbose', '-v', action='count', default=0)\n"
">>> parser.parse_args(['-vvv'])\n"
"Namespace(verbose=3)"

#: ../../library/argparse.rst:823
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Обратите внимание: *по умолчанию* будет «Нет», если явно не установлено "
"значение *0*."

#: ../../library/argparse.rst:825
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - выводит полное справочное сообщение для всех опций текущего "
"анализатора, а затем завершает работу. По умолчанию в анализатор "
"автоматически добавляется справочное действие. См. :class:`ArgumentParser` "
"для получения подробной информации о том, как создаются выходные данные."

#: ../../library/argparse.rst:830
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the :meth:"
"`~ArgumentParser.add_argument` call, and prints version information and "
"exits when invoked::"
msgstr ""
"``'version'`` - ожидает ключевого аргумента ``version=`` в вызове :meth:"
"`~ArgumentParser.add_argument`, печатает информацию о версии и завершает "
"работу при вызове::"

#: ../../library/argparse.rst:834
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--version', action='version', version='%(prog)s "
"2.0')\n"
">>> parser.parse_args(['--version'])\n"
"PROG 2.0"
msgstr ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--version', action='version', version='%(prog)s "
"2.0')\n"
">>> parser.parse_args(['--version'])\n"
"PROG 2.0"

#: ../../library/argparse.rst:840
msgid ""
"You may also specify an arbitrary action by passing an :class:`Action` "
"subclass (e.g. :class:`BooleanOptionalAction`) or other object that "
"implements the same interface. Only actions that consume command-line "
"arguments (e.g. ``'store'``, ``'append'``, ``'extend'``, or custom actions "
"with non-zero ``nargs``) can be used with positional arguments."
msgstr ""

#: ../../library/argparse.rst:846
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the :meth:`!__call__` method and optionally the :meth:`!__init__` "
"and :meth:`!format_usage` methods. You can also register custom actions "
"using the :meth:`~ArgumentParser.register` method and reference them by "
"their registered name."
msgstr ""
"Рекомендуемый способ создания специального действия — расширить :class:"
"`Action`, переопределив метод :meth:`!__call__` и, при необходимости, "
"методы :meth:`!__init__` и :meth:`!format_usage`. Вы также можете "
"зарегистрировать пользовательские действия с помощью метода :meth:"
"`~ArgumentParser.register` и ссылаться на них по их зарегистрированному "
"имени."

#: ../../library/argparse.rst:851
msgid "An example of a custom action::"
msgstr "Пример специального действия:"

#: ../../library/argparse.rst:853
msgid ""
">>> class FooAction(argparse.Action):\n"
"...     def __init__(self, option_strings, dest, nargs=None, **kwargs):\n"
"...         if nargs is not None:\n"
"...             raise ValueError(\"nargs not allowed\")\n"
"...         super().__init__(option_strings, dest, **kwargs)\n"
"...     def __call__(self, parser, namespace, values, option_string=None):\n"
"...         print('%r %r %r' % (namespace, values, option_string))\n"
"...         setattr(namespace, self.dest, values)\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=FooAction)\n"
">>> parser.add_argument('bar', action=FooAction)\n"
">>> args = parser.parse_args('1 --foo 2'.split())\n"
"Namespace(bar=None, foo=None) '1' None\n"
"Namespace(bar='1', foo=None) '2' '--foo'\n"
">>> args\n"
"Namespace(bar='1', foo='2')"
msgstr ""
">>> class FooAction(argparse.Action):\n"
"...     def __init__(self, option_strings, dest, nargs=None, **kwargs):\n"
"...         if nargs is not None:\n"
"...             raise ValueError(\"nargs not allowed\")\n"
"...         super().__init__(option_strings, dest, **kwargs)\n"
"...     def __call__(self, parser, namespace, values, option_string=None):\n"
"...         print('%r %r %r' % (namespace, values, option_string))\n"
"...         setattr(namespace, self.dest, values)\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=FooAction)\n"
">>> parser.add_argument('bar', action=FooAction)\n"
">>> args = parser.parse_args('1 --foo 2'.split())\n"
"Namespace(bar=None, foo=None) '1' None\n"
"Namespace(bar='1', foo=None) '2' '--foo'\n"
">>> args\n"
"Namespace(bar='1', foo='2')"

#: ../../library/argparse.rst:871
msgid "For more details, see :class:`Action`."
msgstr "Для получения более подробной информации см. :class:`Action`."

#: ../../library/argparse.rst:877
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:879
msgid ""
":class:`ArgumentParser` objects usually associate a single command-line "
"argument with a single action to be taken.  The ``nargs`` keyword argument "
"associates a different number of command-line arguments with a single "
"action. See also :ref:`specifying-ambiguous-arguments`. The supported values "
"are:"
msgstr ""
"Объекты :class:`ArgumentParser` обычно связывают один аргумент командной "
"строки с одним выполняемым действием. Аргумент ключевого слова nargs "
"связывает различное количество аргументов командной строки с одним "
"действием. См. также :ref:`указание-неоднозначных-аргументов`. "
"Поддерживаемые значения:"

#: ../../library/argparse.rst:884
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (целое число). ``N`` аргументы из командной строки будут собраны в "
"список. Например::"

#: ../../library/argparse.rst:887
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs=2)\n"
">>> parser.add_argument('bar', nargs=1)\n"
">>> parser.parse_args('c --foo a b'.split())\n"
"Namespace(bar=['c'], foo=['a', 'b'])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs=2)\n"
">>> parser.add_argument('bar', nargs=1)\n"
">>> parser.parse_args('c --foo a b'.split())\n"
"Namespace(bar=['c'], foo=['a', 'b'])"

#: ../../library/argparse.rst:893
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Обратите внимание, что ``nargs=1`` создает список из одного элемента. Это "
"отличается от значения по умолчанию, в котором элемент создается сам по себе."

#: ../../library/argparse.rst:898
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Если возможно, один аргумент будет использован из командной строки "
"и создан как один элемент. Если аргумент командной строки отсутствует, будет "
"получено значение из default_. Обратите внимание, что для необязательных "
"аргументов существует дополнительный случай: строка параметра присутствует, "
"но за ней не следует аргумент командной строки. В этом случае будет получено "
"значение из const_. Несколько примеров, иллюстрирующих это:"

#: ../../library/argparse.rst:905
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='?', const='c', default='d')\n"
">>> parser.add_argument('bar', nargs='?', default='d')\n"
">>> parser.parse_args(['XX', '--foo', 'YY'])\n"
"Namespace(bar='XX', foo='YY')\n"
">>> parser.parse_args(['XX', '--foo'])\n"
"Namespace(bar='XX', foo='c')\n"
">>> parser.parse_args([])\n"
"Namespace(bar='d', foo='d')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='?', const='c', default='d')\n"
">>> parser.add_argument('bar', nargs='?', default='d')\n"
">>> parser.parse_args(['XX', '--foo', 'YY'])\n"
"Namespace(bar='XX', foo='YY')\n"
">>> parser.parse_args(['XX', '--foo'])\n"
"Namespace(bar='XX', foo='c')\n"
">>> parser.parse_args([])\n"
"Namespace(bar='d', foo='d')"

#: ../../library/argparse.rst:915
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"Одним из наиболее распространенных вариантов использования ``nargs='?'`` "
"является разрешение дополнительных входных и выходных файлов::"

#: ../../library/argparse.rst:918
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', nargs='?')\n"
">>> parser.add_argument('outfile', nargs='?')\n"
">>> parser.parse_args(['input.txt', 'output.txt'])\n"
"Namespace(infile='input.txt', outfile='output.txt')\n"
">>> parser.parse_args(['input.txt'])\n"
"Namespace(infile='input.txt', outfile=None)\n"
">>> parser.parse_args([])\n"
"Namespace(infile=None, outfile=None)"
msgstr ""

#: ../../library/argparse.rst:930
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note "
"that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``. Все имеющиеся аргументы командной строки собираются в список. "
"Обратите внимание, что обычно нет смысла иметь более одного позиционного "
"аргумента с ``nargs='*'``, но возможно несколько дополнительных аргументов с "
"``nargs='*'``. Например::"

#: ../../library/argparse.rst:935
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='*')\n"
">>> parser.add_argument('--bar', nargs='*')\n"
">>> parser.add_argument('baz', nargs='*')\n"
">>> parser.parse_args('a b --foo x y --bar 1 2'.split())\n"
"Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', nargs='*')\n"
">>> parser.add_argument('--bar', nargs='*')\n"
">>> parser.add_argument('baz', nargs='*')\n"
">>> parser.parse_args('a b --foo x y --bar 1 2'.split())\n"
"Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y'])"

#: ../../library/argparse.rst:944
msgid ""
"``'+'``. Just like ``'*'``, all command-line arguments present are gathered "
"into a list.  Additionally, an error message will be generated if there "
"wasn't at least one command-line argument present.  For example::"
msgstr ""

#: ../../library/argparse.rst:948
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('foo', nargs='+')\n"
">>> parser.parse_args(['a', 'b'])\n"
"Namespace(foo=['a', 'b'])\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] foo [foo ...]\n"
"PROG: error: the following arguments are required: foo"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('foo', nargs='+')\n"
">>> parser.parse_args(['a', 'b'])\n"
"Namespace(foo=['a', 'b'])\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] foo [foo ...]\n"
"PROG: error: the following arguments are required: foo"

#: ../../library/argparse.rst:956
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced. Actions that do not consume command-line arguments (e.g. "
"``'store_const'``) set ``nargs=0``."
msgstr ""
"Если аргумент ключевого слова ``nargs`` не указан, количество используемых "
"аргументов определяется параметром action_. Обычно это означает, что будет "
"использован один аргумент командной строки и будет создан один элемент (не "
"список). Действия, которые не используют аргументы командной строки "
"(например, store_const), устанавливают nargs=0."

#: ../../library/argparse.rst:966
msgid "const"
msgstr "const"

#: ../../library/argparse.rst:968
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"Аргумент ``const`` :meth:`~ArgumentParser.add_argument` используется для "
"хранения константных значений, которые не считываются из командной строки, "
"но необходимы для различных действий :class:`ArgumentParser`. Два наиболее "
"распространенных варианта его использования:"

#: ../../library/argparse.rst:972
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by :meth:"
"`~ArgumentParser.parse_args`. See the action_ description for examples. If "
"``const`` is not provided to :meth:`~ArgumentParser.add_argument`, it will "
"receive a default value of ``None``."
msgstr ""
"Когда :meth:`~ArgumentParser.add_argument` вызывается с "
"``action='store_const'`` или ``action='append_const'``. Эти действия "
"добавляют значение const к одному из атрибутов объекта, возвращаемого :meth:"
"`~ArgumentParser.parse_args`. Примеры см. в описании action_. Если ``const`` "
"не указан для :meth:`~ArgumentParser.add_argument`, он получит значение по "
"умолчанию ``None``."

#: ../../library/argparse.rst:980
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value from ``const`` will be used. "
"See the nargs_ description for examples."
msgstr ""

#: ../../library/argparse.rst:987
msgid ""
"``const=None`` by default, including when ``action='append_const'`` or "
"``action='store_const'``."
msgstr ""
"``const=None`` по умолчанию, включая случаи ``action='append_const'`` или "
"``action='store_const'``."

#: ../../library/argparse.rst:994
msgid "default"
msgstr "значение по умолчанию"

#: ../../library/argparse.rst:996
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of :meth:`~ArgumentParser."
"add_argument`, whose value defaults to ``None``, specifies what value should "
"be used if the command-line argument is not present. For optional arguments, "
"the ``default`` value is used when the option string was not present at the "
"command line::"
msgstr ""
"Все необязательные аргументы и некоторые позиционные аргументы могут быть "
"опущены в командной строке. Аргумент ключевого слова ``default`` для :meth:"
"`~ArgumentParser.add_argument`, значение которого по умолчанию равно "
"``None``, определяет, какое значение следует использовать, если аргумент "
"командной строки отсутствует. Для необязательных аргументов значение «по "
"умолчанию» используется, когда строка параметра не присутствует в командной "
"строке:"

#: ../../library/argparse.rst:1003
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args(['--foo', '2'])\n"
"Namespace(foo='2')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args(['--foo', '2'])\n"
"Namespace(foo='2')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"

#: ../../library/argparse.rst:1010
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not overwrite it::"
msgstr ""
"Если в целевом пространстве имен уже установлен атрибут, действие *default* "
"не перезапишет его::"

#: ../../library/argparse.rst:1013
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args([], namespace=argparse.Namespace(foo=101))\n"
"Namespace(foo=101)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=42)\n"
">>> parser.parse_args([], namespace=argparse.Namespace(foo=101))\n"
"Namespace(foo=101)"

#: ../../library/argparse.rst:1018
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the :class:"
"`Namespace` return value.  Otherwise, the parser uses the value as is::"
msgstr ""
"Если значение ``default`` является строкой, синтаксический анализатор "
"анализирует значение, как если бы оно было аргументом командной строки. В "
"частности, анализатор применяет любой аргумент преобразования type_, если он "
"предусмотрен, перед установкой атрибута в возвращаемом значении :class:"
"`Namespace`. В противном случае анализатор использует значение как есть::"

#: ../../library/argparse.rst:1023
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--length', default='10', type=int)\n"
">>> parser.add_argument('--width', default=10.5, type=int)\n"
">>> parser.parse_args()\n"
"Namespace(length=10, width=10.5)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--length', default='10', type=int)\n"
">>> parser.add_argument('--width', default=10.5, type=int)\n"
">>> parser.parse_args()\n"
"Namespace(length=10, width=10.5)"

#: ../../library/argparse.rst:1029
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"Для позиционных аргументов с nargs_, равным ``?`` или ``*``, значение "
"``default`` используется, когда аргумент командной строки не присутствует:"

#: ../../library/argparse.rst:1032
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', nargs='?', default=42)\n"
">>> parser.parse_args(['a'])\n"
"Namespace(foo='a')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', nargs='?', default=42)\n"
">>> parser.parse_args(['a'])\n"
"Namespace(foo='a')\n"
">>> parser.parse_args([])\n"
"Namespace(foo=42)"

#: ../../library/argparse.rst:1039
msgid ""
"For required_ arguments, the ``default`` value is ignored. For example, this "
"applies to positional arguments with nargs_ values other than ``?`` or "
"``*``, or optional arguments marked as ``required=True``."
msgstr ""
"Для аргументов «required_» значение «default» игнорируется. Например, это "
"относится к позиционным аргументам со значениями nargs_, отличными от ``?`` "
"или ``*``, или к необязательным аргументам, помеченным как ``required=True``."

#: ../../library/argparse.rst:1043
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Предоставление ``default=argparse.SUPPRESS`` не приводит к добавлению "
"атрибута, если аргумент командной строки отсутствует::"

#: ../../library/argparse.rst:1046
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=argparse.SUPPRESS)\n"
">>> parser.parse_args([])\n"
"Namespace()\n"
">>> parser.parse_args(['--foo', '1'])\n"
"Namespace(foo='1')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default=argparse.SUPPRESS)\n"
">>> parser.parse_args([])\n"
"Namespace()\n"
">>> parser.parse_args(['--foo', '1'])\n"
"Namespace(foo='1')"

#: ../../library/argparse.rst:1057
msgid "type"
msgstr "тип"

#: ../../library/argparse.rst:1059
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"По умолчанию анализатор считывает аргументы командной строки как простые "
"строки. Однако довольно часто строку командной строки следует "
"интерпретировать как другой тип, например :class:`float` или :class:`int`. "
"Ключевое слово ``type`` для :meth:`~ArgumentParser.add_argument` позволяет "
"выполнять любую необходимую проверку типов и преобразования типов."

#: ../../library/argparse.rst:1065
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr ""
"Если ключевое слово type_ используется с ключевым словом default_, "
"преобразователь типов применяется только в том случае, если значением по "
"умолчанию является строка."

#: ../../library/argparse.rst:1068
msgid ""
"The argument to ``type`` can be a callable that accepts a single string or "
"the name of a registered type (see :meth:`~ArgumentParser.register`) If the "
"function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or :exc:"
"`ValueError`, the exception is caught and a nicely formatted error message "
"is displayed. Other exception types are not handled."
msgstr ""
"Аргументом ``type`` может быть вызываемый объект, который принимает одну "
"строку или имя зарегистрированного типа (см. :meth:`~ArgumentParser."
"register`). Если функция вызывает :exc:`ArgumentTypeError`, :exc: "
"`TypeError` или :exc:`ValueError`, исключение перехватывается и отображается "
"красиво отформатированное сообщение об ошибке. Другие типы исключений не "
"обрабатываются."

#: ../../library/argparse.rst:1074
msgid "Common built-in types and functions can be used as type converters:"
msgstr ""
"В качестве преобразователей типов можно использовать общие встроенные типы и "
"функции:"

#: ../../library/argparse.rst:1076
msgid ""
"import argparse\n"
"import pathlib\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('count', type=int)\n"
"parser.add_argument('distance', type=float)\n"
"parser.add_argument('street', type=ascii)\n"
"parser.add_argument('code_point', type=ord)\n"
"parser.add_argument('datapath', type=pathlib.Path)"
msgstr ""

#: ../../library/argparse.rst:1088
msgid "User defined functions can be used as well:"
msgstr "Также можно использовать пользовательские функции:"

#: ../../library/argparse.rst:1090
msgid ""
">>> def hyphenated(string):\n"
"...     return '-'.join([word[:4] for word in string.casefold().split()])\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> _ = parser.add_argument('short_title', type=hyphenated)\n"
">>> parser.parse_args(['\"The Tale of Two Cities\"'])\n"
"Namespace(short_title='\"the-tale-of-two-citi')"
msgstr ""
">>> def hyphenated(string):\n"
"...     return '-'.join([word[:4] for word in string.casefold().split()])\n"
"...\n"
">>> parser = argparse.ArgumentParser()\n"
">>> _ = parser.add_argument('short_title', type=hyphenated)\n"
">>> parser.parse_args(['\"The Tale of Two Cities\"'])\n"
"Namespace(short_title='\"the-tale-of-two-citi')"

#: ../../library/argparse.rst:1100
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"Функцию :func:`bool` не рекомендуется использовать в качестве "
"преобразователя типов. Все, что он делает, это преобразует пустые строки в "
"``False``, а непустые строки в ``True``. Обычно это не то, что желательно."

#: ../../library/argparse.rst:1104
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"В общем, ключевое слово type — это удобство, которое следует использовать "
"только для простых преобразований, которые могут вызвать только одно из трех "
"поддерживаемых исключений. Все, что связано с более интересной обработкой "
"ошибок или управлением ресурсами, должно выполняться ниже по потоку после "
"анализа аргументов."

#: ../../library/argparse.rst:1109
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A :exc:`~json."
"JSONDecodeError` would not be well formatted and a :exc:`FileNotFoundError` "
"exception would not be handled at all."
msgstr ""
"Например, преобразования JSON или YAML имеют сложные случаи ошибок, которые "
"требуют лучшего отчета, чем может быть предоставлено ключевым словом "
"``type``. :exc:`~json.JSONDecodeError` не будет правильно отформатирован, а "
"исключение :exc:`FileNotFoundError` не будет обработано вообще."

#: ../../library/argparse.rst:1114
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses :class:`~argparse.FileType` and then "
"a subsequent argument fails, an error is reported but the file is not "
"automatically closed.  In this case, it would be better to wait until after "
"the parser has run and then use the :keyword:`with`-statement to manage the "
"files."
msgstr ""
"Даже :class:`~argparse.FileType` имеет свои ограничения на использование с "
"ключевым словом ``type``. Если один аргумент использует :class:`~argparse."
"FileType`, а затем последующий аргумент терпит неудачу, сообщается об "
"ошибке, но файл не закрывается автоматически. В этом случае было бы лучше "
"подождать, пока парсер запустится, а затем использовать оператор :keyword:"
"`with` для управления файлами."

#: ../../library/argparse.rst:1121
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr ""
"Для средств проверки типов, которые просто проверяют фиксированный набор "
"значений, рассмотрите возможность использования вместо этого ключевого слова "
"choice_."

#: ../../library/argparse.rst:1128
msgid "choices"
msgstr "выбор"

#: ../../library/argparse.rst:1130
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""
"Некоторые аргументы командной строки следует выбирать из ограниченного "
"набора значений. Их можно обработать, передав объект последовательности в "
"качестве аргумента ключевого слова *choices* в :meth:`~ArgumentParser."
"add_argument`. При анализе командной строки будут проверены значения "
"аргументов и отображено сообщение об ошибке, если аргумент не был одним из "
"допустимых значений:"

#: ../../library/argparse.rst:1136
msgid ""
">>> parser = argparse.ArgumentParser(prog='game.py')\n"
">>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])\n"
">>> parser.parse_args(['rock'])\n"
"Namespace(move='rock')\n"
">>> parser.parse_args(['fire'])\n"
"usage: game.py [-h] {rock,paper,scissors}\n"
"game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',\n"
"'paper', 'scissors')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='game.py')\n"
">>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])\n"
">>> parser.parse_args(['rock'])\n"
"Namespace(move='rock')\n"
">>> parser.parse_args(['fire'])\n"
"usage: game.py [-h] {rock,paper,scissors}\n"
"game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',\n"
"'paper', 'scissors')"

#: ../../library/argparse.rst:1145
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` "
"objects, :class:`tuple` objects, and custom sequences are all supported."
msgstr ""
"В качестве значения *choices* может быть передана любая последовательность, "
"поэтому поддерживаются все объекты :class:`list`, :class:`tuple` и "
"пользовательские последовательности."

#: ../../library/argparse.rst:1148
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr ""
"Использование :class:`enum.Enum` не рекомендуется, поскольку сложно "
"контролировать его появление в сообщениях об использовании, справке и "
"ошибках."

#: ../../library/argparse.rst:1151
msgid ""
"Note that *choices* are checked after any type_ conversions have been "
"performed, so objects in *choices* should match the type_ specified. This "
"can make *choices* appear unfamiliar in usage, help, or error messages."
msgstr ""

#: ../../library/argparse.rst:1156
msgid ""
"To keep *choices* user-friendly, consider a custom type wrapper that "
"converts and formats values, or omit type_ and handle conversion in your "
"application code."
msgstr ""

#: ../../library/argparse.rst:1160
msgid ""
"Formatted choices override the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""
"Варианты форматирования переопределяют стандартный *метавар*, который обычно "
"получается из *dest*. Обычно это то, что вам нужно, потому что пользователь "
"никогда не видит параметр *dest*. Если такое отображение нежелательно "
"(возможно, из-за большого количества вариантов), просто укажите явный "
"метавар_."

#: ../../library/argparse.rst:1169
msgid "required"
msgstr "обязательное"

#: ../../library/argparse.rst:1171
msgid ""
"In general, the :mod:`!argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""
"В общем, модуль :mod:`!argparse` предполагает, что такие флаги, как ``-f`` и "
"``--bar`` обозначают *необязательные* аргументы, которые всегда можно "
"опустить в командной строке. Чтобы сделать опцию *обязательной*, можно "
"указать ``True`` для аргумента ключевого слова ``required=`` для :meth:"
"`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1176
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', required=True)\n"
">>> parser.parse_args(['--foo', 'BAR'])\n"
"Namespace(foo='BAR')\n"
">>> parser.parse_args([])\n"
"usage: [-h] --foo FOO\n"
": error: the following arguments are required: --foo"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', required=True)\n"
">>> parser.parse_args(['--foo', 'BAR'])\n"
"Namespace(foo='BAR')\n"
">>> parser.parse_args([])\n"
"usage: [-h] --foo FOO\n"
": error: the following arguments are required: --foo"

#: ../../library/argparse.rst:1184
msgid ""
"As the example shows, if an option is marked as ``required``, :meth:"
"`~ArgumentParser.parse_args` will report an error if that option is not "
"present at the command line."
msgstr ""
"Как показано в примере, если параметр помечен как обязательный, :meth:"
"`~ArgumentParser.parse_args` сообщит об ошибке, если этот параметр "
"отсутствует в командной строке."

#: ../../library/argparse.rst:1190
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Обязательные параметры обычно считаются дурным тоном, поскольку пользователи "
"ожидают, что *опции* будут *необязательными*, и поэтому их следует избегать, "
"когда это возможно."

#: ../../library/argparse.rst:1197
msgid "help"
msgstr "помощь"

#: ../../library/argparse.rst:1199
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument."
msgstr ""
"Значение help представляет собой строку, содержащую краткое описание "
"аргумента. Когда пользователь запрашивает помощь (обычно используя ``-h`` "
"или ``--help`` в командной строке), эти описания ``help`` будут отображаться "
"с каждым аргументом."

#: ../../library/argparse.rst:1204
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword "
"arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"Строки ``help`` могут включать в себя различные спецификаторы формата, чтобы "
"избежать повторения таких вещей, как имя программы или аргумент default_. "
"Доступные спецификаторы включают имя программы, `` %(прог)с `` и большинство "
"ключевых аргументов для :meth:`~ArgumentParser.add_argument`, например `` "
"%(по умолчанию)с ``, `` %(тип)с `` и т. д.::"

#: ../../library/argparse.rst:1209
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('bar', nargs='?', type=int, default=42,\n"
"...                     help='the bar to %(prog)s (default: %(default)s)')\n"
">>> parser.print_help()\n"
"usage: frobble [-h] [bar]\n"
"\n"
"positional arguments:\n"
" bar     the bar to frobble (default: 42)\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('bar', nargs='?', type=int, default=42,\n"
"...                     help='the bar to %(prog)s (default: %(default)s)')\n"
">>> parser.print_help()\n"
"usage: frobble [-h] [bar]\n"
"\n"
"positional arguments:\n"
" bar     the bar to frobble (default: 42)\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit"

#: ../../library/argparse.rst:1221
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Поскольку строка справки поддерживает %-f При форматировании, если вы "
"хотите, чтобы в строке справки появлялся литерал ``%``, вы должны "
"экранировать его как ``%%``."

#: ../../library/argparse.rst:1224
msgid ""
":mod:`!argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""
":mod:`!argparse` поддерживает отключение записи справки для определенных "
"параметров, устанавливая значение ``help`` на ``argparse.SUPPRESS``::"

#: ../../library/argparse.rst:1227
msgid ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('--foo', help=argparse.SUPPRESS)\n"
">>> parser.print_help()\n"
"usage: frobble [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='frobble')\n"
">>> parser.add_argument('--foo', help=argparse.SUPPRESS)\n"
">>> parser.print_help()\n"
"usage: frobble [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"

#: ../../library/argparse.rst:1239
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1241
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, :class:`!ArgumentParser` "
"objects use the dest_ value as the \"name\" of each object.  By default, for "
"positional argument actions, the dest_ value is used directly, and for "
"optional argument actions, the dest_ value is uppercased.  So, a single "
"positional argument with ``dest='bar'`` will be referred to as ``bar``. A "
"single optional argument ``--foo`` that should be followed by a single "
"command-line argument will be referred to as ``FOO``.  An example::"
msgstr ""
"Когда :class:`ArgumentParser` генерирует справочные сообщения, ему нужен "
"какой-то способ ссылки на каждый ожидаемый аргумент. По умолчанию объекты :"
"class:`!ArgumentParser` используют значение dest_ в качестве «имени» каждого "
"объекта. По умолчанию для действий с позиционным аргументом значение dest_ "
"используется напрямую, а для необязательных действий с аргументом значение "
"dest_ указывается в верхнем регистре. Таким образом, один позиционный "
"аргумент с ``dest='bar'`` будет называться ``bar``. Один необязательный "
"аргумент ``--foo``, за которым должен следовать один аргумент командной "
"строки, будет называться ``FOO``. Пример::"

#: ../../library/argparse.rst:1250
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo FOO] bar\n"
"\n"
"positional arguments:\n"
" bar\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo FOO] bar\n"
"\n"
"positional arguments:\n"
" bar\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo FOO"

#: ../../library/argparse.rst:1265
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Альтернативное имя можно указать с помощью ``metavar``::"

#: ../../library/argparse.rst:1267
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', metavar='YYY')\n"
">>> parser.add_argument('bar', metavar='XXX')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo YYY] XXX\n"
"\n"
"positional arguments:\n"
" XXX\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo YYY"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', metavar='YYY')\n"
">>> parser.add_argument('bar', metavar='XXX')\n"
">>> parser.parse_args('X --foo Y'.split())\n"
"Namespace(bar='X', foo='Y')\n"
">>> parser.print_help()\n"
"usage:  [-h] [--foo YYY] XXX\n"
"\n"
"positional arguments:\n"
" XXX\n"
"\n"
"options:\n"
" -h, --help  show this help message and exit\n"
" --foo YYY"

#: ../../library/argparse.rst:1282
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Обратите внимание, что ``metavar`` меняет только *отображаемое* имя — имя "
"атрибута в объекте :meth:`~ArgumentParser.parse_args` по-прежнему "
"определяется значением dest_."

#: ../../library/argparse.rst:1286
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Различные значения ``nargs`` могут привести к многократному использованию "
"метавара. Предоставление кортежа для ``metavar`` задает разное отображение "
"для каждого из аргументов:"

#: ../../library/argparse.rst:1290
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', nargs=2)\n"
">>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-x X X] [--foo bar baz]\n"
"\n"
"options:\n"
" -h, --help     show this help message and exit\n"
" -x X X\n"
" --foo bar baz"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', nargs=2)\n"
">>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))\n"
">>> parser.print_help()\n"
"usage: PROG [-h] [-x X X] [--foo bar baz]\n"
"\n"
"options:\n"
" -h, --help     show this help message and exit\n"
" -x X X\n"
" --foo bar baz"

#: ../../library/argparse.rst:1305
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1307
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of :meth:"
"`~ArgumentParser.add_argument`.  For positional argument actions, ``dest`` "
"is normally supplied as the first argument to :meth:`~ArgumentParser."
"add_argument`::"
msgstr ""
"Большинство действий :class:`ArgumentParser` добавляют некоторое значение в "
"качестве атрибута объекта, возвращаемого :meth:`~ArgumentParser.parse_args`. "
"Имя этого атрибута определяется аргументом ключевого слова ``dest`` :meth:"
"`~ArgumentParser.add_argument`. Для действий с позиционными аргументами "
"``dest`` обычно предоставляется в качестве первого аргумента :meth:"
"`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1314
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['XXX'])\n"
"Namespace(bar='XXX')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_args(['XXX'])\n"
"Namespace(bar='XXX')"

#: ../../library/argparse.rst:1319
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"Для необязательных действий аргументов значение ``dest`` обычно выводится из "
"строк опций. :class:`ArgumentParser` генерирует значение ``dest``, беря "
"первую длинную строку опций и удаляя начальную строку ``--``. Если длинные "
"строки параметров не были предоставлены, ``dest`` будет получен из первой "
"короткой строки параметров путем удаления начального символа ``-``. Любые "
"внутренние символы ``-`` будут преобразованы в символы ``_``, чтобы "
"убедиться, что строка является допустимым именем атрибута. Примеры ниже "
"иллюстрируют такое поведение:"

#: ../../library/argparse.rst:1328
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('-f', '--foo-bar', '--foo')\n"
">>> parser.add_argument('-x', '-y')\n"
">>> parser.parse_args('-f 1 -x 2'.split())\n"
"Namespace(foo_bar='1', x='2')\n"
">>> parser.parse_args('--foo 1 -y 2'.split())\n"
"Namespace(foo_bar='1', x='2')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('-f', '--foo-bar', '--foo')\n"
">>> parser.add_argument('-x', '-y')\n"
">>> parser.parse_args('-f 1 -x 2'.split())\n"
"Namespace(foo_bar='1', x='2')\n"
">>> parser.parse_args('--foo 1 -y 2'.split())\n"
"Namespace(foo_bar='1', x='2')"

#: ../../library/argparse.rst:1336
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` позволяет указать имя пользовательского атрибута::"

#: ../../library/argparse.rst:1338
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', dest='bar')\n"
">>> parser.parse_args('--foo XXX'.split())\n"
"Namespace(bar='XXX')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', dest='bar')\n"
">>> parser.parse_args('--foo XXX'.split())\n"
"Namespace(bar='XXX')"

#: ../../library/argparse.rst:1347
msgid "deprecated"
msgstr "устарел"

#: ../../library/argparse.rst:1349
msgid ""
"During a project's lifetime, some arguments may need to be removed from the "
"command line. Before removing them, you should inform your users that the "
"arguments are deprecated and will be removed. The ``deprecated`` keyword "
"argument of :meth:`~ArgumentParser.add_argument`, which defaults to "
"``False``, specifies if the argument is deprecated and will be removed in "
"the future. For arguments, if ``deprecated`` is ``True``, then a warning "
"will be printed to :data:`sys.stderr` when the argument is used::"
msgstr ""
"Во время существования проекта может потребоваться удалить некоторые "
"аргументы из командной строки. Прежде чем удалять их, вы должны сообщить "
"своим пользователям, что аргументы устарели и будут удалены. Аргумент "
"ключевого слова ``deprecated`` для :meth:`~ArgumentParser.add_argument`, "
"который по умолчанию имеет значение ``False``, указывает, является ли "
"аргумент устаревшим и будет ли он удален в будущем. Для аргументов, если "
"``deprecated`` имеет значение ``True``, то при использовании аргумента в :"
"data:`sys.stderr` будет выведено предупреждение::"

#: ../../library/argparse.rst:1359
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='snake.py')\n"
">>> parser.add_argument('--legs', default=0, type=int, deprecated=True)\n"
">>> parser.parse_args([])\n"
"Namespace(legs=0)\n"
">>> parser.parse_args(['--legs', '4'])\n"
"snake.py: warning: option '--legs' is deprecated\n"
"Namespace(legs=4)"
msgstr ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser(prog='snake.py')\n"
">>> parser.add_argument('--legs', default=0, type=int, deprecated=True)\n"
">>> parser.parse_args([])\n"
"Namespace(legs=0)\n"
">>> parser.parse_args(['--legs', '4'])\n"
"snake.py: warning: option '--legs' is deprecated\n"
"Namespace(legs=4)"

#: ../../library/argparse.rst:1372
msgid "Action classes"
msgstr "Классы действий"

#: ../../library/argparse.rst:1374
msgid ""
":class:`!Action` classes implement the Action API, a callable which returns "
"a callable which processes arguments from the command-line. Any object which "
"follows this API may be passed as the ``action`` parameter to :meth:"
"`~ArgumentParser.add_argument`."
msgstr ""
"Классы :class:`!Action` реализуют Action API, вызываемый объект, который "
"возвращает вызываемый объект, который обрабатывает аргументы из командной "
"строки. Любой объект, следующий за этим API, может быть передан в качестве "
"параметра action в :meth:`~ArgumentParser.add_argument`."

#: ../../library/argparse.rst:1383
msgid ""
":class:`!Action` objects are used by an :class:`ArgumentParser` to represent "
"the information needed to parse a single argument from one or more strings "
"from the command line. The :class:`!Action` class must accept the two "
"positional arguments plus any keyword arguments passed to :meth:"
"`ArgumentParser.add_argument` except for the ``action`` itself."
msgstr ""
"Объекты :class:`!Action` используются :class:`ArgumentParser` для "
"представления информации, необходимой для анализа одного аргумента из одной "
"или нескольких строк из командной строки. Класс :class:`!Action` должен "
"принимать два позиционных аргумента плюс любые аргументы ключевого слова, "
"передаваемые в :meth:`ArgumentParser.add_argument`, за исключением самого "
"``action``."

#: ../../library/argparse.rst:1389
msgid ""
"Instances of :class:`!Action` (or return value of any callable to the "
"``action`` parameter) should have attributes :attr:`!dest`, :attr:`!"
"option_strings`, :attr:`!default`, :attr:`!type`, :attr:`!required`, :attr:`!"
"help`, etc. defined. The easiest way to ensure these attributes are defined "
"is to call :meth:`!Action.__init__`."
msgstr ""
"Экземпляры :class:`!Action` (или возвращаемое значение любого вызываемого "
"параметра ``action``) должны иметь атрибуты :attr:`!dest`, :attr:`!"
"option_strings`, :attr:`!default `, :attr:`!type`, :attr:`!required`, :attr:"
"`!help` и т. д. определены. Самый простой способ убедиться, что эти атрибуты "
"определены, — вызвать :meth:`!Action.__init__`."

#: ../../library/argparse.rst:1397
msgid ""
":class:`!Action` instances should be callable, so subclasses must override "
"the :meth:`!__call__` method, which should accept four parameters:"
msgstr ""
"Экземпляры :class:`!Action` должны быть вызываемыми, поэтому подклассы "
"должны переопределять метод :meth:`!__call__`, который должен принимать "
"четыре параметра:"

#: ../../library/argparse.rst:1400
msgid ""
"*parser* - The :class:`ArgumentParser` object which contains this action."
msgstr ""
"*parser* — объект :class:`ArgumentParser`, который содержит это действие."

#: ../../library/argparse.rst:1402
msgid ""
"*namespace* - The :class:`Namespace` object that will be returned by :meth:"
"`~ArgumentParser.parse_args`.  Most actions add an attribute to this object "
"using :func:`setattr`."
msgstr ""
"*namespace* — объект :class:`Namespace`, который будет возвращен :meth:"
"`~ArgumentParser.parse_args`. Большинство действий добавляют атрибут к этому "
"объекту, используя :func:`setattr`."

#: ../../library/argparse.rst:1406
msgid ""
"*values* - The associated command-line arguments, with any type conversions "
"applied.  Type conversions are specified with the type_ keyword argument to :"
"meth:`~ArgumentParser.add_argument`."
msgstr ""
"*значения* — связанные аргументы командной строки с любыми примененными "
"преобразованиями типов. Преобразования типов задаются с помощью аргумента "
"ключевого слова type_ для :meth:`~ArgumentParser.add_argument`."

#: ../../library/argparse.rst:1410
msgid ""
"*option_string* - The option string that was used to invoke this action. The "
"``option_string`` argument is optional, and will be absent if the action is "
"associated with a positional argument."
msgstr ""
"*option_string* — строка параметра, которая использовалась для вызова этого "
"действия. Аргумент ``option_string`` не является обязательным и будет "
"отсутствовать, если действие связано с позиционным аргументом."

#: ../../library/argparse.rst:1414
msgid ""
"The :meth:`!__call__` method may perform arbitrary actions, but will "
"typically set attributes on the ``namespace`` based on ``dest`` and "
"``values``."
msgstr ""
"Метод :meth:`!__call__` может выполнять произвольные действия, но обычно "
"устанавливает атрибуты в ``пространстве имен`` на основе ``dest`` и "
"``values``."

#: ../../library/argparse.rst:1419
msgid ""
":class:`!Action` subclasses can define a :meth:`!format_usage` method that "
"takes no argument and return a string which will be used when printing the "
"usage of the program. If such method is not provided, a sensible default "
"will be used."
msgstr ""
"Подклассы :class:`!Action` могут определять метод :meth:`!format_usage`, "
"который не принимает аргументов и возвращает строку, которая будет "
"использоваться при печати использования программы. Если такой метод не "
"предусмотрен, будет использоваться разумное значение по умолчанию."

#: ../../library/argparse.rst:1425
msgid ""
"A subclass of :class:`Action` for handling boolean flags with positive and "
"negative options. Adding a single argument such as ``--foo`` automatically "
"creates both ``--foo`` and ``--no-foo`` options, storing ``True`` and "
"``False`` respectively::"
msgstr ""

#: ../../library/argparse.rst:1430
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)\n"
">>> parser.parse_args(['--no-foo'])\n"
"Namespace(foo=False)"
msgstr ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)\n"
">>> parser.parse_args(['--no-foo'])\n"
"Namespace(foo=False)"

#: ../../library/argparse.rst:1440
msgid "The parse_args() method"
msgstr "Метод parse_args()"

#: ../../library/argparse.rst:1444
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""
"Преобразуйте строки аргументов в объекты и назначьте их как атрибуты "
"пространства имен. Верните заполненное пространство имен."

#: ../../library/argparse.rst:1447
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for :meth:`!"
"add_argument` for details."
msgstr ""
"Предыдущие вызовы :meth:`add_argument` точно определяли, какие объекты "
"создаются и как они назначаются. Подробности смотрите в документации по :"
"meth:`!add_argument`."

#: ../../library/argparse.rst:1451
msgid ""
"args_ - List of strings to parse.  The default is taken from :data:`sys."
"argv`."
msgstr ""
"args_ — список строк для анализа. Значение по умолчанию взято из :data:`sys."
"argv`."

#: ../../library/argparse.rst:1454
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty :"
"class:`Namespace` object."
msgstr ""
"namespace_ — объект, принимающий атрибуты. По умолчанию используется новый "
"пустой объект :class:`Namespace`."

#: ../../library/argparse.rst:1459
msgid "Option value syntax"
msgstr "Синтаксис значения параметра"

#: ../../library/argparse.rst:1461
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` поддерживает несколько способов "
"указания значения опции (если оно принимается). В простейшем случае опция и "
"ее значение передаются как два отдельных аргумента:"

#: ../../library/argparse.rst:1465
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(['-x', 'X'])\n"
"Namespace(foo=None, x='X')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(['-x', 'X'])\n"
"Namespace(foo=None, x='X')\n"
">>> parser.parse_args(['--foo', 'FOO'])\n"
"Namespace(foo='FOO', x=None)"

#: ../../library/argparse.rst:1473
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using "
"``=`` to separate them::"
msgstr ""
"Для длинных опций (опций с именами длиннее одного символа) опция и значение "
"также могут быть переданы как один аргумент командной строки, используя "
"``=`` для их разделения:"

#: ../../library/argparse.rst:1477
msgid ""
">>> parser.parse_args(['--foo=FOO'])\n"
"Namespace(foo='FOO', x=None)"
msgstr ""
">>> parser.parse_args(['--foo=FOO'])\n"
"Namespace(foo='FOO', x=None)"

#: ../../library/argparse.rst:1480
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""
"Для коротких опций (опции длиной всего один символ) опция и ее значение "
"могут быть объединены:"

#: ../../library/argparse.rst:1483
msgid ""
">>> parser.parse_args(['-xX'])\n"
"Namespace(foo=None, x='X')"
msgstr ""
">>> parser.parse_args(['-xX'])\n"
"Namespace(foo=None, x='X')"

#: ../../library/argparse.rst:1486
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"Несколько коротких опций можно объединить вместе, используя только один "
"префикс ``-``, при условии, что только последняя опция (или ни одна из них) "
"не требует значения::"

#: ../../library/argparse.rst:1489
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', action='store_true')\n"
">>> parser.add_argument('-y', action='store_true')\n"
">>> parser.add_argument('-z')\n"
">>> parser.parse_args(['-xyzZ'])\n"
"Namespace(x=True, y=True, z='Z')"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x', action='store_true')\n"
">>> parser.add_argument('-y', action='store_true')\n"
">>> parser.add_argument('-z')\n"
">>> parser.parse_args(['-xyzZ'])\n"
"Namespace(x=True, y=True, z='Z')"

#: ../../library/argparse.rst:1498
msgid "Invalid arguments"
msgstr "Недопустимые аргументы"

#: ../../library/argparse.rst:1500
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid "
"options, wrong number of positional arguments, etc.  When it encounters such "
"an error, it exits and prints the error along with a usage message::"
msgstr ""
"При анализе командной строки :meth:`~ArgumentParser.parse_args` проверяет "
"наличие множества ошибок, включая неоднозначные параметры, недопустимые "
"типы, недопустимые параметры, неправильное количество позиционных аргументов "
"и т. д. Когда он сталкивается с такой ошибкой, он завершает работу и "
"печатает ошибку вместе с сообщением об использовании::"

#: ../../library/argparse.rst:1505
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', type=int)\n"
">>> parser.add_argument('bar', nargs='?')\n"
"\n"
">>> # invalid type\n"
">>> parser.parse_args(['--foo', 'spam'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: argument --foo: invalid int value: 'spam'\n"
"\n"
">>> # invalid option\n"
">>> parser.parse_args(['--bar'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: no such option: --bar\n"
"\n"
">>> # wrong number of arguments\n"
">>> parser.parse_args(['spam', 'badger'])\n"
"usage: PROG [-h] [--foo FOO] [bar]\n"
"PROG: error: extra arguments found: badger"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG') >>> parser.add_argument('--"
"foo', type=int) >>> parser.add_argument('bar', nargs='?') >>> # неверный тип "
">>> parser.parse_args(['--foo', 'спам']) использование: PROG [-h] [--foo "
"FOO] [бар] PROG: ошибка: аргумент --foo: неверное значение int: «спам» >>> # "
"неверный вариант >>> parser.parse_args(['--bar']) использование: PROG [-h] "
"[--foo FOO] [бар] ПРОГ: ошибка: нет такой опции: --bar >>> # неправильное "
"количество аргументов >>> parser.parse_args(['спам', 'барсук']) "
"использование: PROG [-h] [--foo FOO] [бар] ПРОГ: ошибка: найдены лишние "
"аргументы: барсук"

#: ../../library/argparse.rst:1526
msgid "Arguments containing ``-``"
msgstr "Аргументы, содержащие `-`"

#: ../../library/argparse.rst:1528
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` пытается выдавать ошибки всякий "
"раз, когда пользователь явно допустил ошибку, но некоторые ситуации по своей "
"сути неоднозначны. Например, аргумент командной строки ``-1`` может быть "
"либо попыткой указать параметр, либо попыткой предоставить позиционный "
"аргумент. Метод :meth:`~ArgumentParser.parse_args` здесь осторожен: "
"позиционные аргументы могут начинаться с ``-`` только в том случае, если они "
"выглядят как отрицательные числа и в анализаторе нет опций, которые выглядят "
"как отрицательные числа::"

#: ../../library/argparse.rst:1536
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # no negative number options, so -1 is a positional argument\n"
">>> parser.parse_args(['-x', '-1'])\n"
"Namespace(foo=None, x='-1')\n"
"\n"
">>> # no negative number options, so -1 and -5 are positional arguments\n"
">>> parser.parse_args(['-x', '-1', '-5'])\n"
"Namespace(foo='-5', x='-1')\n"
"\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-1', dest='one')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # negative number options present, so -1 is an option\n"
">>> parser.parse_args(['-1', 'X'])\n"
"Namespace(foo=None, one='X')\n"
"\n"
">>> # negative number options present, so -2 is an option\n"
">>> parser.parse_args(['-2'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: no such option: -2\n"
"\n"
">>> # negative number options present, so both -1s are options\n"
">>> parser.parse_args(['-1', '-1'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: argument -1: expected one argument"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-x')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # no negative number options, so -1 is a positional argument\n"
">>> parser.parse_args(['-x', '-1'])\n"
"Namespace(foo=None, x='-1')\n"
"\n"
">>> # no negative number options, so -1 and -5 are positional arguments\n"
">>> parser.parse_args(['-x', '-1', '-5'])\n"
"Namespace(foo='-5', x='-1')\n"
"\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-1', dest='one')\n"
">>> parser.add_argument('foo', nargs='?')\n"
"\n"
">>> # negative number options present, so -1 is an option\n"
">>> parser.parse_args(['-1', 'X'])\n"
"Namespace(foo=None, one='X')\n"
"\n"
">>> # negative number options present, so -2 is an option\n"
">>> parser.parse_args(['-2'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: no such option: -2\n"
"\n"
">>> # negative number options present, so both -1s are options\n"
">>> parser.parse_args(['-1', '-1'])\n"
"usage: PROG [-h] [-1 ONE] [foo]\n"
"PROG: error: argument -1: expected one argument"

#: ../../library/argparse.rst:1566
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"Если у вас есть позиционные аргументы, которые должны начинаться с ``-`` и "
"не выглядеть как отрицательные числа, вы можете вставить псевдоаргумент "
"``'--'``, который сообщает :meth:`~ArgumentParser.parse_args`, что все, что "
"после этого, является позиционным аргументом::"

#: ../../library/argparse.rst:1571
msgid ""
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(foo='-f', one=None)"
msgstr ""
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(foo='-f', one=None)"

#: ../../library/argparse.rst:1574
msgid ""
"See also :ref:`the argparse howto on ambiguous arguments <specifying-"
"ambiguous-arguments>` for more details."
msgstr ""
"См. также :ref:`инструкцию по argparse для неоднозначных аргументов "
"<specifying-ambiguous-arguments>` для более подробной информации."

#: ../../library/argparse.rst:1580
msgid "Argument abbreviations (prefix matching)"
msgstr "Сокращения аргументов (сопоставление префиксов)"

#: ../../library/argparse.rst:1582
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` :ref:`по умолчанию <allow_abbrev>` "
"позволяет сокращать длинные параметры до префикса, если аббревиатура "
"однозначна (префикс соответствует уникальному параметру)::"

#: ../../library/argparse.rst:1586
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-bacon')\n"
">>> parser.add_argument('-badger')\n"
">>> parser.parse_args('-bac MMM'.split())\n"
"Namespace(bacon='MMM', badger=None)\n"
">>> parser.parse_args('-bad WOOD'.split())\n"
"Namespace(bacon=None, badger='WOOD')\n"
">>> parser.parse_args('-ba BA'.split())\n"
"usage: PROG [-h] [-bacon BACON] [-badger BADGER]\n"
"PROG: error: ambiguous option: -ba could match -badger, -bacon"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-bacon')\n"
">>> parser.add_argument('-badger')\n"
">>> parser.parse_args('-bac MMM'.split())\n"
"Namespace(bacon='MMM', badger=None)\n"
">>> parser.parse_args('-bad WOOD'.split())\n"
"Namespace(bacon=None, badger='WOOD')\n"
">>> parser.parse_args('-ba BA'.split())\n"
"usage: PROG [-h] [-bacon BACON] [-badger BADGER]\n"
"PROG: error: ambiguous option: -ba could match -badger, -bacon"

#: ../../library/argparse.rst:1597
msgid ""
"An error is produced for arguments that could produce more than one options. "
"This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""
"Ошибка выдается для аргументов, которые могут возвращать более одного "
"параметра. Эту функцию можно отключить, установив для параметра :ref:"
"`allow_abbrev` значение ``False``."

#: ../../library/argparse.rst:1603
msgid "Beyond ``sys.argv``"
msgstr "За пределами ``sys.argv``"

#: ../../library/argparse.rst:1605
msgid ""
"Sometimes it may be useful to have an :class:`ArgumentParser` parse "
"arguments other than those of :data:`sys.argv`.  This can be accomplished by "
"passing a list of strings to :meth:`~ArgumentParser.parse_args`.  This is "
"useful for testing at the interactive prompt::"
msgstr ""
"Иногда может быть полезно иметь аргументы анализа :class:`ArgumentParser`, "
"отличные от аргументов :data:`sys.argv`. Это можно сделать, передав список "
"строк в :meth:`~ArgumentParser.parse_args`. Это полезно для тестирования в "
"интерактивной подсказке::"

#: ../../library/argparse.rst:1610
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\n"
"...     'integers', metavar='int', type=int, choices=range(10),\n"
"...     nargs='+', help='an integer in the range 0..9')\n"
">>> parser.add_argument(\n"
"...     '--sum', dest='accumulate', action='store_const', const=sum,\n"
"...     default=max, help='sum the integers (default: find the max)')\n"
">>> parser.parse_args(['1', '2', '3', '4'])\n"
"Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])\n"
">>> parser.parse_args(['1', '2', '3', '4', '--sum'])\n"
"Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument(\n"
"...     'integers', metavar='int', type=int, choices=range(10),\n"
"...     nargs='+', help='an integer in the range 0..9')\n"
">>> parser.add_argument(\n"
"...     '--sum', dest='accumulate', action='store_const', const=sum,\n"
"...     default=max, help='sum the integers (default: find the max)')\n"
">>> parser.parse_args(['1', '2', '3', '4'])\n"
"Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])\n"
">>> parser.parse_args(['1', '2', '3', '4', '--sum'])\n"
"Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])"

#: ../../library/argparse.rst:1625
msgid "The Namespace object"
msgstr "Объект пространства имен"

#: ../../library/argparse.rst:1629
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create "
"an object holding attributes and return it."
msgstr ""
"Простой класс, используемый по умолчанию :meth:`~ArgumentParser.parse_args` "
"для создания объекта, содержащего атрибуты, и его возврата."

#: ../../library/argparse.rst:1632
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"Этот класс намеренно прост: это всего лишь подкласс :class:`object` с "
"читаемым строковым представлением. Если вы предпочитаете представление "
"атрибутов в виде словаря, вы можете использовать стандартную идиому Python: :"
"func:`vars`::"

#: ../../library/argparse.rst:1636
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> args = parser.parse_args(['--foo', 'BAR'])\n"
">>> vars(args)\n"
"{'foo': 'BAR'}"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> args = parser.parse_args(['--foo', 'BAR'])\n"
">>> vars(args)\n"
"{'foo': 'BAR'}"

#: ../../library/argparse.rst:1642
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object.  "
"This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"Также может быть полезно, чтобы :class:`ArgumentParser` назначал атрибуты "
"уже существующему объекту, а не новому :class:`Namespace` объекту. Этого "
"можно добиться, указав аргумент ключевого слова ``namespace=``::"

#: ../../library/argparse.rst:1646
msgid ""
">>> class C:\n"
"...     pass\n"
"...\n"
">>> c = C()\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)\n"
">>> c.foo\n"
"'BAR'"
msgstr ""
">>> class C:\n"
"...     pass\n"
"...\n"
">>> c = C()\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)\n"
">>> c.foo\n"
"'BAR'"

#: ../../library/argparse.rst:1658
msgid "Other utilities"
msgstr "Другие утилиты"

#: ../../library/argparse.rst:1661
msgid "Sub-commands"
msgstr "Подкоманды"

#: ../../library/argparse.rst:1668
msgid ""
"Many programs split up their functionality into a number of subcommands, for "
"example, the ``svn`` program can invoke subcommands like ``svn checkout``, "
"``svn update``, and ``svn commit``.  Splitting up functionality this way can "
"be a particularly good idea when a program performs several different "
"functions which require different kinds of command-line arguments. :class:"
"`ArgumentParser` supports the creation of such subcommands with the :meth:`!"
"add_subparsers` method.  The :meth:`!add_subparsers` method is normally "
"called with no arguments and returns a special action object.  This object "
"has a single method, :meth:`~_SubParsersAction.add_parser`, which takes a "
"command name and any :class:`!ArgumentParser` constructor arguments, and "
"returns an :class:`!ArgumentParser` object that can be modified as usual."
msgstr ""
"Многие программы разделяют свою функциональность на несколько подкоманд, "
"например, программа ``svn`` может вызывать такие подкоманды, как ``svn "
"checkout``, ``svn update`` и ``svn commit``. Такое разделение "
"функциональности может быть особенно хорошей идеей, когда программа "
"выполняет несколько разных функций, требующих разных типов аргументов "
"командной строки. :class:`ArgumentParser` поддерживает создание таких "
"подкоманд с помощью метода :meth:`!add_subparsers`. Метод :meth:`!"
"add_subparsers` обычно вызывается без аргументов и возвращает объект "
"специального действия. Этот объект имеет единственный метод :meth:"
"`~_SubParsersAction.add_parser`, который принимает имя команды и любые "
"аргументы конструктора :class:`!ArgumentParser` и возвращает объект :class:`!"
"ArgumentParser`, который можно изменить как обычный."

#: ../../library/argparse.rst:1680
msgid "Description of parameters:"
msgstr "Описание параметров:"

#: ../../library/argparse.rst:1682
msgid ""
"*title* - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""
"*title* - заголовок группы субпарсера в выводе справки; по умолчанию "
"«подкоманды», если указано описание, в противном случае для позиционных "
"аргументов используется заголовок."

#: ../../library/argparse.rst:1686
msgid ""
"*description* - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""
"*description* - описание группы субпарсера в выводе справки, по умолчанию "
"``Нет``"

#: ../../library/argparse.rst:1689
msgid ""
"*prog* - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""
"*prog* — информация об использовании, которая будет отображаться с помощью "
"подкоманды help, по умолчанию имя программы и любые позиционные аргументы "
"перед аргументом субпарсера."

#: ../../library/argparse.rst:1693
msgid ""
"*parser_class* - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. :class:`ArgumentParser`)"
msgstr ""
"*parser_class* - класс, который будет использоваться для создания "
"экземпляров субпарсера, по умолчанию это класс текущего парсера (например, :"
"class:`ArgumentParser`)"

#: ../../library/argparse.rst:1696
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""
"action_ — основной тип действия, которое необходимо предпринять, когда этот "
"аргумент встречается в командной строке."

#: ../../library/argparse.rst:1699
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""
"dest_ — имя атрибута, под которым будет храниться имя подкоманды; по "
"умолчанию ``None`` и никакое значение не сохраняется"

#: ../../library/argparse.rst:1702
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""
"требуется_ - Должна ли быть предоставлена ​​подкоманда, по умолчанию ``False`` "
"(добавлено в версии 3.7)"

#: ../../library/argparse.rst:1705
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""
"help_ - справка для группы субпарсера в выводе справки, по умолчанию ``Нет``"

#: ../../library/argparse.rst:1707
msgid ""
"metavar_ - string presenting available subcommands in help; by default it is "
"``None`` and presents subcommands in form {cmd1, cmd2, ..}"
msgstr ""
"метавар_ — строка, представляющая доступные подкоманды в справке; по "
"умолчанию это ``Нет`` и представляет подкоманды в виде {cmd1, cmd2, ..}"

#: ../../library/argparse.rst:1710
msgid "Some example usage::"
msgstr "Некоторые примеры использования::"

#: ../../library/argparse.rst:1712
msgid ""
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', action='store_true', help='foo help')\n"
">>> subparsers = parser.add_subparsers(help='subcommand help')\n"
">>>\n"
">>> # create the parser for the \"a\" command\n"
">>> parser_a = subparsers.add_parser('a', help='a help')\n"
">>> parser_a.add_argument('bar', type=int, help='bar help')\n"
">>>\n"
">>> # create the parser for the \"b\" command\n"
">>> parser_b = subparsers.add_parser('b', help='b help')\n"
">>> parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz "
"help')\n"
">>>\n"
">>> # parse some argument lists\n"
">>> parser.parse_args(['a', '12'])\n"
"Namespace(bar=12, foo=False)\n"
">>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])\n"
"Namespace(baz='Z', foo=True)"
msgstr ""
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('--foo', action='store_true', help='foo help')\n"
">>> subparsers = parser.add_subparsers(help='subcommand help')\n"
">>>\n"
">>> # create the parser for the \"a\" command\n"
">>> parser_a = subparsers.add_parser('a', help='a help')\n"
">>> parser_a.add_argument('bar', type=int, help='bar help')\n"
">>>\n"
">>> # create the parser for the \"b\" command\n"
">>> parser_b = subparsers.add_parser('b', help='b help')\n"
">>> parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz "
"help')\n"
">>>\n"
">>> # parse some argument lists\n"
">>> parser.parse_args(['a', '12'])\n"
"Namespace(bar=12, foo=False)\n"
">>> parser.parse_args(['--foo', 'b', '--baz', 'Z'])\n"
"Namespace(baz='Z', foo=True)"

#: ../../library/argparse.rst:1731
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"Обратите внимание, что объект, возвращаемый :meth:`parse_args`, будет "
"содержать только атрибуты основного синтаксического анализатора и "
"субпарсера, выбранного в командной строке (а не каких-либо других "
"субпарсеров). Таким образом, в приведенном выше примере, когда указана "
"команда ``a``, присутствуют только атрибуты ``foo`` и ``bar``, а когда "
"указана команда ``b``, только атрибут `` Атрибуты foo`` и ``baz`` "
"присутствуют."

#: ../../library/argparse.rst:1738
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument "
"to :meth:`~_SubParsersAction.add_parser` as above.)"
msgstr ""
"Аналогично, когда от субпарсера запрашивается справочное сообщение, будет "
"напечатана только справка для этого конкретного парсера. Справочное "
"сообщение не будет включать сообщения родительского или родственного "
"анализатора. (Однако справочное сообщение для каждой команды субпарсера "
"можно предоставить, указав аргумент ``help=`` в :meth:`~_SubParsersAction."
"add_parser`, как указано выше.)"

#: ../../library/argparse.rst:1746
msgid ""
">>> parser.parse_args(['--help'])\n"
"usage: PROG [-h] [--foo] {a,b} ...\n"
"\n"
"positional arguments:\n"
"  {a,b}   subcommand help\n"
"    a     a help\n"
"    b     b help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo   foo help\n"
"\n"
">>> parser.parse_args(['a', '--help'])\n"
"usage: PROG a [-h] bar\n"
"\n"
"positional arguments:\n"
"  bar     bar help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
">>> parser.parse_args(['b', '--help'])\n"
"usage: PROG b [-h] [--baz {X,Y,Z}]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  --baz {X,Y,Z}  baz help"
msgstr ""
">>> parser.parse_args(['--help'])\n"
"usage: PROG [-h] [--foo] {a,b} ...\n"
"\n"
"positional arguments:\n"
"  {a,b}   subcommand help\n"
"    a     a help\n"
"    b     b help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --foo   foo help\n"
"\n"
">>> parser.parse_args(['a', '--help'])\n"
"usage: PROG a [-h] bar\n"
"\n"
"positional arguments:\n"
"  bar     bar help\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
">>> parser.parse_args(['b', '--help'])\n"
"usage: PROG b [-h] [--baz {X,Y,Z}]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  --baz {X,Y,Z}  baz help"

#: ../../library/argparse.rst:1774
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
"Метод :meth:`add_subparsers` также поддерживает ключевые аргументы ``title`` "
"и ``description``. Если любой из них присутствует, команды субпарсера "
"появятся в отдельной группе в выводе справки. Например::"

#: ../../library/argparse.rst:1778
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(title='subcommands',\n"
"...                                    description='valid subcommands',\n"
"...                                    help='additional help')\n"
">>> subparsers.add_parser('foo')\n"
">>> subparsers.add_parser('bar')\n"
">>> parser.parse_args(['-h'])\n"
"usage:  [-h] {foo,bar} ...\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"subcommands:\n"
"  valid subcommands\n"
"\n"
"  {foo,bar}   additional help"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(title='subcommands',\n"
"...                                    description='valid subcommands',\n"
"...                                    help='additional help')\n"
">>> subparsers.add_parser('foo')\n"
">>> subparsers.add_parser('bar')\n"
">>> parser.parse_args(['-h'])\n"
"usage:  [-h] {foo,bar} ...\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"subcommands:\n"
"  valid subcommands\n"
"\n"
"  {foo,bar}   additional help"

#: ../../library/argparse.rst:1795
msgid ""
"Furthermore, :meth:`~_SubParsersAction.add_parser` supports an additional "
"*aliases* argument, which allows multiple strings to refer to the same "
"subparser. This example, like ``svn``, aliases ``co`` as a shorthand for "
"``checkout``::"
msgstr ""
"Более того, :meth:`~_SubParsersAction.add_parser` поддерживает "
"дополнительный аргумент *aliases*, который позволяет нескольким строкам "
"ссылаться на один и тот же поданализатор. В этом примере, как и в ``svn``, "
"используется псевдоним ``co`` как сокращение для ``checkout``::"

#: ../../library/argparse.rst:1800
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers()\n"
">>> checkout = subparsers.add_parser('checkout', aliases=['co'])\n"
">>> checkout.add_argument('foo')\n"
">>> parser.parse_args(['co', 'bar'])\n"
"Namespace(foo='bar')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers()\n"
">>> checkout = subparsers.add_parser('checkout', aliases=['co'])\n"
">>> checkout.add_argument('foo')\n"
">>> parser.parse_args(['co', 'bar'])\n"
"Namespace(foo='bar')"

#: ../../library/argparse.rst:1807
msgid ""
":meth:`~_SubParsersAction.add_parser` supports also an additional "
"*deprecated* argument, which allows to deprecate the subparser."
msgstr ""
":meth:`~_SubParsersAction.add_parser` также поддерживает дополнительный "
"аргумент *deprecated*, который позволяет объявить субпарсер устаревшим."

#: ../../library/argparse.rst:1821
msgid ""
"One particularly effective way of handling subcommands is to combine the use "
"of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` so "
"that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""
"Одним из особенно эффективных способов обработки подкоманд является "
"объединение использования метода :meth:`add_subparsers` с вызовами :meth:"
"`set_defaults`, чтобы каждый субпарсер знал, какую функцию Python он должен "
"выполнить. Например::"

#: ../../library/argparse.rst:1826
msgid ""
">>> # subcommand functions\n"
">>> def foo(args):\n"
"...     print(args.x * args.y)\n"
"...\n"
">>> def bar(args):\n"
"...     print('((%s))' % args.z)\n"
"...\n"
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(required=True)\n"
">>>\n"
">>> # create the parser for the \"foo\" command\n"
">>> parser_foo = subparsers.add_parser('foo')\n"
">>> parser_foo.add_argument('-x', type=int, default=1)\n"
">>> parser_foo.add_argument('y', type=float)\n"
">>> parser_foo.set_defaults(func=foo)\n"
">>>\n"
">>> # create the parser for the \"bar\" command\n"
">>> parser_bar = subparsers.add_parser('bar')\n"
">>> parser_bar.add_argument('z')\n"
">>> parser_bar.set_defaults(func=bar)\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('foo 1 -x 2'.split())\n"
">>> args.func(args)\n"
"2.0\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('bar XYZYX'.split())\n"
">>> args.func(args)\n"
"((XYZYX))"
msgstr ""
">>> # subcommand functions\n"
">>> def foo(args):\n"
"...     print(args.x * args.y)\n"
"...\n"
">>> def bar(args):\n"
"...     print('((%s))' % args.z)\n"
"...\n"
">>> # create the top-level parser\n"
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(required=True)\n"
">>>\n"
">>> # create the parser for the \"foo\" command\n"
">>> parser_foo = subparsers.add_parser('foo')\n"
">>> parser_foo.add_argument('-x', type=int, default=1)\n"
">>> parser_foo.add_argument('y', type=float)\n"
">>> parser_foo.set_defaults(func=foo)\n"
">>>\n"
">>> # create the parser for the \"bar\" command\n"
">>> parser_bar = subparsers.add_parser('bar')\n"
">>> parser_bar.add_argument('z')\n"
">>> parser_bar.set_defaults(func=bar)\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('foo 1 -x 2'.split())\n"
">>> args.func(args)\n"
"2.0\n"
">>>\n"
">>> # parse the args and call whatever function was selected\n"
">>> args = parser.parse_args('bar XYZYX'.split())\n"
">>> args.func(args)\n"
"((XYZYX))"

#: ../../library/argparse.rst:1858
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"Таким образом, вы можете позволить :meth:`parse_args` выполнить вызов "
"соответствующей функции после завершения анализа аргументов. Связывание "
"функций с подобными действиями обычно является самым простым способом "
"обработки различных действий для каждого из ваших субпарсеров. Однако, если "
"необходимо проверить имя вызванного субпарсера, будет работать аргумент "
"ключевого слова ``dest`` для вызова :meth:`add_subparsers`:"

#: ../../library/argparse.rst:1865
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(dest='subparser_name')\n"
">>> subparser1 = subparsers.add_parser('1')\n"
">>> subparser1.add_argument('-x')\n"
">>> subparser2 = subparsers.add_parser('2')\n"
">>> subparser2.add_argument('y')\n"
">>> parser.parse_args(['2', 'frobble'])\n"
"Namespace(subparser_name='2', y='frobble')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> subparsers = parser.add_subparsers(dest='subparser_name')\n"
">>> subparser1 = subparsers.add_parser('1')\n"
">>> subparser1.add_argument('-x')\n"
">>> subparser2 = subparsers.add_parser('2')\n"
">>> subparser2.add_argument('y')\n"
">>> parser.parse_args(['2', 'frobble'])\n"
"Namespace(subparser_name='2', y='frobble')"

#: ../../library/argparse.rst:1874
msgid "New *required* keyword-only parameter."
msgstr "Новый *обязательный* параметр, содержащий только ключевые слова."

#: ../../library/argparse.rst:1877
msgid ""
"Subparser's *prog* is no longer affected by a custom usage message in the "
"main parser."
msgstr ""

#: ../../library/argparse.rst:1883
msgid "FileType objects"
msgstr "Объекты FileType"

#: ../../library/argparse.rst:1887
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type "
"argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:"
"`FileType` objects as their type will open command-line arguments as files "
"with the requested modes, buffer sizes, encodings and error handling (see "
"the :func:`open` function for more details)::"
msgstr ""
"Фабрика :class:`FileType` создает объекты, которые можно передать в аргумент "
"типа :meth:`ArgumentParser.add_argument`. Аргументы, имеющие в качестве типа "
"объекты :class:`FileType`, откроют аргументы командной строки как файлы с "
"запрошенными режимами, размерами буфера, кодировками и обработкой ошибок "
"(более подробную информацию см. в функции :func:`open`)::"

#: ../../library/argparse.rst:1893
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n"
">>> parser.add_argument('out', type=argparse.FileType('w', "
"encoding='UTF-8'))\n"
">>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n"
"Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, "
"raw=<_io.FileIO name='raw.dat' mode='wb'>)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n"
">>> parser.add_argument('out', type=argparse.FileType('w', "
"encoding='UTF-8'))\n"
">>> parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n"
"Namespace(out=<_io.TextIOWrapper name='file.txt' mode='w' encoding='UTF-8'>, "
"raw=<_io.FileIO name='raw.dat' mode='wb'>)"

#: ../../library/argparse.rst:1899
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""
"Объекты FileType понимают псевдоаргумент ``'-'`` и автоматически преобразуют "
"его в :data:`sys.stdin` для читаемых объектов :class:`FileType` и :data:`sys."
"stdout` для записываемых :class: Объекты `FileType`::"

#: ../../library/argparse.rst:1903
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', type=argparse.FileType('r'))\n"
">>> parser.parse_args(['-'])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('infile', type=argparse.FileType('r'))\n"
">>> parser.parse_args(['-'])\n"
"Namespace(infile=<_io.TextIOWrapper name='<stdin>' encoding='UTF-8'>)"

#: ../../library/argparse.rst:1910
msgid ""
"If one argument uses *FileType* and then a subsequent argument fails, an "
"error is reported but the file is not automatically closed. This can also "
"clobber the output files. In this case, it would be better to wait until "
"after the parser has run and then use the :keyword:`with`-statement to "
"manage the files."
msgstr ""

#: ../../library/argparse.rst:1916
msgid "Added the *encodings* and *errors* parameters."
msgstr "Добавлены параметры *encodings* и *errors*."

#: ../../library/argparse.rst:1923
msgid "Argument groups"
msgstr "Группы аргументов"

#: ../../library/argparse.rst:1928
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"options\" when displaying help messages. When "
"there is a better conceptual grouping of arguments than this default one, "
"appropriate groups can be created using the :meth:`!add_argument_group` "
"method::"
msgstr ""
"По умолчанию :class:`ArgumentParser` группирует аргументы командной строки в "
"«позиционные аргументы» и «опции» при отображении справочных сообщений. Если "
"существует более удачная концептуальная группировка аргументов, чем эта по "
"умолчанию, соответствующие группы можно создать с помощью метода :meth:`!"
"add_argument_group`::"

#: ../../library/argparse.rst:1934
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group = parser.add_argument_group('group')\n"
">>> group.add_argument('--foo', help='foo help')\n"
">>> group.add_argument('bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO] bar\n"
"\n"
"group:\n"
"  bar    bar help\n"
"  --foo FOO  foo help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group = parser.add_argument_group('group')\n"
">>> group.add_argument('--foo', help='foo help')\n"
">>> group.add_argument('bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--foo FOO] bar\n"
"\n"
"group:\n"
"  bar    bar help\n"
"  --foo FOO  foo help"

#: ../../library/argparse.rst:1945
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which "
"has an :meth:`~ArgumentParser.add_argument` method just like a regular :"
"class:`ArgumentParser`.  When an argument is added to the group, the parser "
"treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`!add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""
"Метод :meth:`add_argument_group` возвращает объект группы аргументов, "
"который имеет метод :meth:`~ArgumentParser.add_argument`, как и обычный :"
"class:`ArgumentParser`. Когда аргумент добавляется в группу, анализатор "
"обрабатывает его как обычный аргумент, но отображает аргумент в отдельной "
"группе для справочных сообщений. Метод :meth:`!add_argument_group` принимает "
"аргументы *title* и *description*, которые можно использовать для настройки "
"этого отображения::"

#: ../../library/argparse.rst:1953
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group1 = parser.add_argument_group('group1', 'group1 description')\n"
">>> group1.add_argument('foo', help='foo help')\n"
">>> group2 = parser.add_argument_group('group2', 'group2 description')\n"
">>> group2.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--bar BAR] foo\n"
"\n"
"group1:\n"
"  group1 description\n"
"\n"
"  foo    foo help\n"
"\n"
"group2:\n"
"  group2 description\n"
"\n"
"  --bar BAR  bar help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n"
">>> group1 = parser.add_argument_group('group1', 'group1 description')\n"
">>> group1.add_argument('foo', help='foo help')\n"
">>> group2 = parser.add_argument_group('group2', 'group2 description')\n"
">>> group2.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [--bar BAR] foo\n"
"\n"
"group1:\n"
"  group1 description\n"
"\n"
"  foo    foo help\n"
"\n"
"group2:\n"
"  group2 description\n"
"\n"
"  --bar BAR  bar help"

#: ../../library/argparse.rst:1971
msgid ""
"The optional, keyword-only parameters argument_default_ and "
"conflict_handler_ allow for finer-grained control of the behavior of the "
"argument group. These parameters have the same meaning as in the :class:"
"`ArgumentParser` constructor, but apply specifically to the argument group "
"rather than the entire parser."
msgstr ""
"Необязательные параметры аргумента_default_ и конфликта_обработчика_, "
"содержащие только ключевые слова, позволяют более детально контролировать "
"поведение группы аргументов. Эти параметры имеют то же значение, что и в "
"конструкторе :class:`ArgumentParser`, но применяются конкретно к группе "
"аргументов, а не ко всему синтаксическому анализатору."

#: ../../library/argparse.rst:1976
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Обратите внимание, что любые аргументы, не входящие в пользовательские "
"группы, вернутся в обычные разделы «позиционные аргументы» и «необязательные "
"аргументы»."

#: ../../library/argparse.rst:1979
msgid ""
"Calling :meth:`add_argument_group` on an argument group now raises an "
"exception. This nesting was never supported, often failed to work correctly, "
"and was unintentionally exposed through inheritance."
msgstr ""

#: ../../library/argparse.rst:1984
msgid "Passing prefix_chars_ to :meth:`add_argument_group` is now deprecated."
msgstr ""

#: ../../library/argparse.rst:1990
msgid "Mutual exclusion"
msgstr "Взаимное исключение"

#: ../../library/argparse.rst:1994
msgid ""
"Create a mutually exclusive group. :mod:`!argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""
"Создайте взаимоисключающую группу. :mod:`!argparse` будет следить за тем, "
"чтобы в командной строке присутствовал только один из аргументов "
"взаимоисключающей группы::"

#: ../../library/argparse.rst:1998
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group()\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(bar=True, foo=True)\n"
">>> parser.parse_args(['--bar'])\n"
"Namespace(bar=False, foo=False)\n"
">>> parser.parse_args(['--foo', '--bar'])\n"
"usage: PROG [-h] [--foo | --bar]\n"
"PROG: error: argument --bar: not allowed with argument --foo"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group()\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args(['--foo'])\n"
"Namespace(bar=True, foo=True)\n"
">>> parser.parse_args(['--bar'])\n"
"Namespace(bar=False, foo=False)\n"
">>> parser.parse_args(['--foo', '--bar'])\n"
"usage: PROG [-h] [--foo | --bar]\n"
"PROG: error: argument --bar: not allowed with argument --foo"

#: ../../library/argparse.rst:2010
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
"Метод :meth:`add_mutually_exclusive_group` также принимает *обязательный* "
"аргумент, указывающий, что требуется хотя бы один из взаимоисключающих "
"аргументов::"

#: ../../library/argparse.rst:2014
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group(required=True)\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] (--foo | --bar)\n"
"PROG: error: one of the arguments --foo --bar is required"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_mutually_exclusive_group(required=True)\n"
">>> group.add_argument('--foo', action='store_true')\n"
">>> group.add_argument('--bar', action='store_false')\n"
">>> parser.parse_args([])\n"
"usage: PROG [-h] (--foo | --bar)\n"
"PROG: error: one of the arguments --foo --bar is required"

#: ../../library/argparse.rst:2022
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of :meth:`~ArgumentParser."
"add_argument_group`. However, a mutually exclusive group can be added to an "
"argument group that has a title and description. For example::"
msgstr ""
"Обратите внимание, что в настоящее время взаимоисключающие группы аргументов "
"не поддерживают аргументы *title* и *description* :meth:`~ArgumentParser."
"add_argument_group`. Однако к группе аргументов, имеющей заголовок и "
"описание, можно добавить взаимоисключающую группу. Например::"

#: ../../library/argparse.rst:2028
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_argument_group('Group title', 'Group description')\n"
">>> exclusive_group = group.add_mutually_exclusive_group(required=True)\n"
">>> exclusive_group.add_argument('--foo', help='foo help')\n"
">>> exclusive_group.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] (--foo FOO | --bar BAR)\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"Group title:\n"
"  Group description\n"
"\n"
"  --foo FOO   foo help\n"
"  --bar BAR   bar help"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> group = parser.add_argument_group('Group title', 'Group description')\n"
">>> exclusive_group = group.add_mutually_exclusive_group(required=True)\n"
">>> exclusive_group.add_argument('--foo', help='foo help')\n"
">>> exclusive_group.add_argument('--bar', help='bar help')\n"
">>> parser.print_help()\n"
"usage: PROG [-h] (--foo FOO | --bar BAR)\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"\n"
"Group title:\n"
"  Group description\n"
"\n"
"  --foo FOO   foo help\n"
"  --bar BAR   bar help"

#: ../../library/argparse.rst:2045
msgid ""
"Calling :meth:`add_argument_group` or :meth:`add_mutually_exclusive_group` "
"on a mutually exclusive group now raises an exception. This nesting was "
"never supported, often failed to work correctly, and was unintentionally "
"exposed through inheritance."
msgstr ""

#: ../../library/argparse.rst:2053
msgid "Parser defaults"
msgstr "Значения синтаксического анализатора по умолчанию"

#: ../../library/argparse.rst:2057
msgid ""
"Most of the time, the attributes of the object returned by :meth:"
"`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"В большинстве случаев атрибуты объекта, возвращаемого :meth:`parse_args`, "
"будут полностью определены путем проверки аргументов командной строки и "
"действий с аргументами. :meth:`set_defaults` позволяет добавлять некоторые "
"дополнительные атрибуты, которые определяются без какой-либо проверки "
"командной строки::"

#: ../../library/argparse.rst:2063
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', type=int)\n"
">>> parser.set_defaults(bar=42, baz='badger')\n"
">>> parser.parse_args(['736'])\n"
"Namespace(bar=42, baz='badger', foo=736)"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('foo', type=int)\n"
">>> parser.set_defaults(bar=42, baz='badger')\n"
">>> parser.parse_args(['736'])\n"
"Namespace(bar=42, baz='badger', foo=736)"

#: ../../library/argparse.rst:2069
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Обратите внимание, что значения по умолчанию на уровне синтаксического "
"анализатора всегда переопределяют значения по умолчанию на уровне аргумента::"

#: ../../library/argparse.rst:2071
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='bar')\n"
">>> parser.set_defaults(foo='spam')\n"
">>> parser.parse_args([])\n"
"Namespace(foo='spam')"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='bar')\n"
">>> parser.set_defaults(foo='spam')\n"
">>> parser.parse_args([])\n"
"Namespace(foo='spam')"

#: ../../library/argparse.rst:2077
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"Значения по умолчанию на уровне парсера могут быть особенно полезны при "
"работе с несколькими парсерами. Пример этого типа см. в методе :meth:"
"`~ArgumentParser.add_subparsers`."

#: ../../library/argparse.rst:2083
msgid ""
"Get the default value for a namespace attribute, as set by either :meth:"
"`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Получите значение по умолчанию для атрибута пространства имен, установленное "
"либо :meth:`~ArgumentParser.add_argument`, либо :meth:`~ArgumentParser."
"set_defaults`::"

#: ../../library/argparse.rst:2087
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='badger')\n"
">>> parser.get_default('foo')\n"
"'badger'"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', default='badger')\n"
">>> parser.get_default('foo')\n"
"'badger'"

#: ../../library/argparse.rst:2094
msgid "Printing help"
msgstr "Справка по печати"

#: ../../library/argparse.rst:2096
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"В большинстве типичных приложений :meth:`~ArgumentParser.parse_args` "
"позаботится о форматировании и печати любых сообщений об использовании или "
"ошибках. Однако доступно несколько методов форматирования:"

#: ../../library/argparse.rst:2102
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"Выведите краткое описание того, как :class:`ArgumentParser` следует вызывать "
"из командной строки. Если *file* имеет значение ``None``, предполагается :"
"data:`sys.stdout`."

#: ../../library/argparse.rst:2108
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"Распечатайте справочное сообщение, включая информацию об использовании "
"программы и информацию об аргументах, зарегистрированных в :class:"
"`ArgumentParser`. Если *file* имеет значение ``None``, предполагается :data:"
"`sys.stdout`."

#: ../../library/argparse.rst:2112
msgid ""
"There are also variants of these methods that simply return a string instead "
"of printing it:"
msgstr ""
"Существуют также варианты этих методов, которые просто возвращают строку, а "
"не печатают ее:"

#: ../../library/argparse.rst:2117
msgid ""
"Return a string containing a brief description of how the :class:"
"`ArgumentParser` should be invoked on the command line."
msgstr ""
"Возвращает строку, содержащую краткое описание того, как следует вызывать :"
"class:`ArgumentParser` в командной строке."

#: ../../library/argparse.rst:2122
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Возвращает строку, содержащую справочное сообщение, включая использование "
"программы и информацию об аргументах, зарегистрированных в :class:"
"`ArgumentParser`."

#: ../../library/argparse.rst:2127
msgid "Partial parsing"
msgstr "Частичный синтаксический анализ"

#: ../../library/argparse.rst:2131
msgid ""
"Sometimes a script only needs to handle a specific set of command-line "
"arguments, leaving any unrecognized arguments for another script or program. "
"In these cases, the :meth:`~ArgumentParser.parse_known_args` method can be "
"useful."
msgstr ""

#: ../../library/argparse.rst:2136
msgid ""
"This method works similarly to :meth:`~ArgumentParser.parse_args`, but it "
"does not raise an error for extra, unrecognized arguments. Instead, it "
"parses the known arguments and returns a two item tuple that contains the "
"populated namespace and the list of any unrecognized arguments."
msgstr ""

#: ../../library/argparse.rst:2143
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n"
"(Namespace(bar='BAR', foo=True), ['--badger', 'spam'])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo', action='store_true')\n"
">>> parser.add_argument('bar')\n"
">>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n"
"(Namespace(bar='BAR', foo=True), ['--badger', 'spam'])"

#: ../../library/argparse.rst:2150
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to :meth:"
"`~ArgumentParser.parse_known_args`. The parser may consume an option even if "
"it's just a prefix of one of its known options, instead of leaving it in the "
"remaining arguments list."
msgstr ""
":ref:`Правила сопоставления префиксов <prefix-matching>` применяются к :meth:"
"`~ArgumentParser.parse_known_args`. Анализатор может использовать опцию, "
"даже если это просто префикс одной из известных опций, вместо того, чтобы "
"оставлять ее в списке остальных аргументов."

#: ../../library/argparse.rst:2157
msgid "Customizing file parsing"
msgstr "Настройка анализа файлов"

#: ../../library/argparse.rst:2161
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword "
"argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"Аргументы, считываемые из файла (см. аргумент ключевого слова "
"*fromfile_prefix_chars* конструктора :class:`ArgumentParser`), считываются "
"по одному аргументу в каждой строке. :meth:`convert_arg_line_to_args` можно "
"переопределить для более удобного чтения."

#: ../../library/argparse.rst:2166
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"Этот метод принимает один аргумент *arg_line*, который представляет собой "
"строку, считанную из файла аргументов. Он возвращает список аргументов, "
"проанализированных из этой строки. Метод вызывается один раз для каждой "
"строки, считанной из файла аргументов, по порядку."

#: ../../library/argparse.rst:2170
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""
"Полезным переопределением этого метода является то, что каждое слово, "
"разделенное пробелом, рассматривается как аргумент. Следующий пример "
"демонстрирует, как это сделать:"

#: ../../library/argparse.rst:2173
msgid ""
"class MyArgumentParser(argparse.ArgumentParser):\n"
"    def convert_arg_line_to_args(self, arg_line):\n"
"        return arg_line.split()"
msgstr ""
"class MyArgumentParser(argparse.ArgumentParser):\n"
"    def convert_arg_line_to_args(self, arg_line):\n"
"        return arg_line.split()"

#: ../../library/argparse.rst:2179
msgid "Exiting methods"
msgstr "Методы выхода"

#: ../../library/argparse.rst:2183
msgid ""
"This method terminates the program, exiting with the specified *status* and, "
"if given, it prints a *message* to :data:`sys.stderr` before that. The user "
"can override this method to handle these steps differently::"
msgstr ""
"Этот метод завершает работу программы, завершая ее с указанным *статусом* и, "
"если он задан, перед этим печатает *сообщение* в :data:`sys.stderr`. "
"Пользователь может переопределить этот метод, чтобы обрабатывать эти шаги по-"
"другому:"

#: ../../library/argparse.rst:2187
msgid ""
"class ErrorCatchingArgumentParser(argparse.ArgumentParser):\n"
"    def exit(self, status=0, message=None):\n"
"        if status:\n"
"            raise Exception(f'Exiting because of an error: {message}')\n"
"        exit(status)"
msgstr ""
"class ErrorCatchingArgumentParser(argparse.ArgumentParser):\n"
"    def exit(self, status=0, message=None):\n"
"        if status:\n"
"            raise Exception(f'Exiting because of an error: {message}')\n"
"        exit(status)"

#: ../../library/argparse.rst:2195
msgid ""
"This method prints a usage message, including the *message*, to :data:`sys."
"stderr` and terminates the program with a status code of 2."
msgstr ""
"Этот метод печатает сообщение об использовании, включая *message*, в :data:"
"`sys.stderr` и завершает программу с кодом состояния 2."

#: ../../library/argparse.rst:2200
msgid "Intermixed parsing"
msgstr "Смешанный анализ"

#: ../../library/argparse.rst:2205
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with "
"positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this "
"parsing style."
msgstr ""
"Ряд команд Unix позволяют пользователю смешивать необязательные аргументы с "
"позиционными аргументами. Методы :meth:`~ArgumentParser."
"parse_intermixed_args` и :meth:`~ArgumentParser.parse_known_intermixed_args` "
"поддерживают этот стиль анализа."

#: ../../library/argparse.rst:2210
msgid ""
"These parsers do not support all the :mod:`!argparse` features, and will "
"raise exceptions if unsupported features are used.  In particular, "
"subparsers, and mutually exclusive groups that include both optionals and "
"positionals are not supported."
msgstr ""
"Эти парсеры не поддерживают все функции :mod:`!argparse` и выдают "
"исключения, если используются неподдерживаемые функции. В частности, не "
"поддерживаются поданализаторы и взаимоисключающие группы, включающие как "
"опциональные, так и позиционные параметры."

#: ../../library/argparse.rst:2215
msgid ""
"The following example shows the difference between :meth:`~ArgumentParser."
"parse_known_args` and :meth:`~ArgumentParser.parse_intermixed_args`: the "
"former returns ``['2', '3']`` as unparsed arguments, while the latter "
"collects all the positionals into ``rest``.  ::"
msgstr ""
"В следующем примере показана разница между :meth:`~ArgumentParser."
"parse_known_args` и :meth:`~ArgumentParser.parse_intermixed_args`: первый "
"возвращает ``['2', '3']`` как неанализированные аргументы, а второй собирает "
"все позиции в ``rest``. ::"

#: ../../library/argparse.rst:2221
msgid ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('cmd')\n"
">>> parser.add_argument('rest', nargs='*', type=int)\n"
">>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())\n"
"(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])\n"
">>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())\n"
"Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])"
msgstr ""
">>> parser = argparse.ArgumentParser()\n"
">>> parser.add_argument('--foo')\n"
">>> parser.add_argument('cmd')\n"
">>> parser.add_argument('rest', nargs='*', type=int)\n"
">>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())\n"
"(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])\n"
">>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())\n"
"Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])"

#: ../../library/argparse.rst:2230
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple "
"containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` возвращает кортеж из "
"двух элементов, содержащий заполненное пространство имен и список оставшихся "
"строк аргументов. :meth:`~ArgumentParser.parse_intermixed_args` выдает "
"ошибку, если остались непроанализированные строки аргументов."

#: ../../library/argparse.rst:2239
msgid "Registering custom types or actions"
msgstr "Регистрация пользовательских типов или действий"

#: ../../library/argparse.rst:2243
msgid ""
"Sometimes it's desirable to use a custom string in error messages to provide "
"more user-friendly output. In these cases, :meth:`!register` can be used to "
"register custom actions or types with a parser and allow you to reference "
"the type by their registered name instead of their callable name."
msgstr ""
"Иногда желательно использовать специальную строку в сообщениях об ошибках, "
"чтобы обеспечить более удобный вывод. В этих случаях :meth:`!register` может "
"использоваться для регистрации пользовательских действий или типов с помощью "
"синтаксического анализатора и позволяет вам ссылаться на тип по его "
"зарегистрированному имени, а не по вызываемому имени."

#: ../../library/argparse.rst:2248
msgid ""
"The :meth:`!register` method accepts three arguments - a *registry_name*, "
"specifying the internal registry where the object will be stored (e.g., "
"``action``, ``type``), *value*, which is the key under which the object will "
"be registered, and object, the callable to be registered."
msgstr ""
"Метод :meth:`!register` принимает три аргумента - *имя_регистра*, "
"определяющее внутренний реестр, в котором будет храниться объект (например, "
"``действие``, ``тип``), *значение*, которое ключ, под которым будет "
"зарегистрирован объект, и объект, вызываемый объект, который необходимо "
"зарегистрировать."

#: ../../library/argparse.rst:2253
msgid ""
"The following example shows how to register a custom type with a parser::"
msgstr ""
"В следующем примере показано, как зарегистрировать пользовательский тип с "
"помощью анализатора:"

#: ../../library/argparse.rst:2255
msgid ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))\n"
">>> parser.add_argument('--foo', type='hexadecimal integer')\n"
"_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, "
"default=None, type='hexadecimal integer', choices=None, required=False, "
"help=None, metavar=None, deprecated=False)\n"
">>> parser.parse_args(['--foo', '0xFA'])\n"
"Namespace(foo=250)\n"
">>> parser.parse_args(['--foo', '1.2'])\n"
"usage: PROG [-h] [--foo FOO]\n"
"PROG: error: argument --foo: invalid 'hexadecimal integer' value: '1.2'"
msgstr ""
">>> import argparse\n"
">>> parser = argparse.ArgumentParser()\n"
">>> parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))\n"
">>> parser.add_argument('--foo', type='hexadecimal integer')\n"
"_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, "
"default=None, type='hexadecimal integer', choices=None, required=False, "
"help=None, metavar=None, deprecated=False)\n"
">>> parser.parse_args(['--foo', '0xFA'])\n"
"Namespace(foo=250)\n"
">>> parser.parse_args(['--foo', '1.2'])\n"
"usage: PROG [-h] [--foo FOO]\n"
"PROG: error: argument --foo: invalid 'hexadecimal integer' value: '1.2'"

#: ../../library/argparse.rst:2267
msgid "Exceptions"
msgstr "Исключения"

#: ../../library/argparse.rst:2271
msgid "An error from creating or using an argument (optional or positional)."
msgstr ""
"Ошибка при создании или использовании аргумента (необязательного или "
"позиционного)."

#: ../../library/argparse.rst:2273
msgid ""
"The string value of this exception is the message, augmented with "
"information about the argument that caused it."
msgstr ""
"Строковое значение этого исключения представляет собой сообщение, "
"дополненное информацией об аргументе, вызвавшем его."

#: ../../library/argparse.rst:2278
msgid ""
"Raised when something goes wrong converting a command line string to a type."
msgstr ""
"Возникает, когда что-то идет не так при преобразовании строки командной "
"строки в тип."

#: ../../library/argparse.rst:2282
msgid "Guides and Tutorials"
msgstr "Руководства и туториалы"

#: ../../library/argparse.rst:896
msgid "? (question mark)"
msgstr "? (знак вопроса)"

#: ../../library/argparse.rst:896 ../../library/argparse.rst:928
#: ../../library/argparse.rst:942
msgid "in argparse module"
msgstr "в модуле argparse"

#: ../../library/argparse.rst:928
msgid "* (asterisk)"
msgstr "* (звёздочка)"

#: ../../library/argparse.rst:942
msgid "+ (plus)"
msgstr "+ (плюс)"
