# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`pickletools` --- Tools for pickle developers"
msgstr ""

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**Исходный код:** :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this "
"module are useful for Python core developers who are working on the :mod:"
"`pickle`; ordinary users of the :mod:`pickle` module probably won't find "
"the :mod:`pickletools` module relevant."
msgstr ""
"Этот модуль содержит различные константы, относящиеся к интимным деталям "
"модуля :mod:`pickle`, некоторые длинные комментарии о реализации и несколько "
"полезных функций для анализа маринованных данных. Содержимое этого модуля "
"будет полезно разработчикам ядра Python, работающим над :mod:`pickle`; "
"обычные пользователи модуля :mod:`pickle`, вероятно, не найдут модуль :mod:"
"`pickletools` подходящим."

#: ../../library/pickletools.rst:23
msgid "Command line usage"
msgstr "Использование командной строки"

#: ../../library/pickletools.rst:27
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want "
"to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"При вызове из командной строки ``python -m Pickletools`` дизассемблирует "
"содержимое одного или нескольких файлов Pickle. Обратите внимание: если вы "
"хотите видеть объект Python, хранящийся в рассоле, а не подробности формата "
"рассола, вы можете вместо этого использовать ``-m Pickle``. Однако, если "
"файл Pickle, который вы хотите проверить, получен из ненадежного источника, "
"``-m Pickletools`` является более безопасным вариантом, поскольку он не "
"выполняет байт-код Pickle."

#: ../../library/pickletools.rst:35
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr ""
"Например, с кортежем ``(1, 2)``, консервированным в файле ``x.pickle``:"

#: ../../library/pickletools.rst:52
msgid "Command line options"
msgstr "Параметры командной строки"

#: ../../library/pickletools.rst:58
msgid "Annotate each line with a short opcode description."
msgstr "Аннотируйте каждую строку кратким описанием кода операции."

#: ../../library/pickletools.rst:62
msgid "Name of a file where the output should be written."
msgstr "Имя файла, в который должны быть записаны выходные данные."

#: ../../library/pickletools.rst:66
msgid "The number of blanks by which to indent a new MARK level."
msgstr "Количество пробелов для отступа нового уровня MARK."

#: ../../library/pickletools.rst:70
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr "При разборке нескольких объектов сохраняйте заметки между разборками."

#: ../../library/pickletools.rst:75
msgid ""
"When more than one pickle file are specified, print given preamble before "
"each disassembly."
msgstr ""
"Если указано более одного файла Pickle, перед каждой дизассемблированием "
"печатайте данную преамбулу."

#: ../../library/pickletools.rst:81
msgid "Programmatic Interface"
msgstr "Программный интерфейс"

#: ../../library/pickletools.rst:86
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's "
"memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column "
"where annotation should start."
msgstr ""
"Выводит символическую дизассемблирование рассола в файлоподобный объект "
"*out*, по умолчанию используется ``sys.stdout``. *pickle* может быть строкой "
"или файловым объектом. *memo* может быть словарем Python, который будет "
"использоваться в качестве заметки рассола; его можно использовать для "
"выполнения дизассемблирования нескольких пиклов, созданных одним и тем же "
"пиклером. Последовательные уровни, обозначаемые в потоке кодами операций "
"MARK, имеют отступы *indentlevel*. Если для *annotate* задано ненулевое "
"значение, каждый код операции в выходных данных сопровождается кратким "
"описанием. Значение *annotate* используется как подсказка для столбца, с "
"которого должна начинаться аннотация."

#: ../../library/pickletools.rst:97
msgid "Added the *annotate* parameter."
msgstr "Добавлен параметр *annotate*."

#: ../../library/pickletools.rst:102
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of "
"an :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python "
"object, of the opcode's argument; *pos* is the position at which this opcode "
"is located. *pickle* can be a string or a file-like object."
msgstr ""
"Предоставляет :term:`итератор` для всех кодов операций в Pickle, возвращая "
"последовательность троек ``(opcode, arg, pos)``. *opcode* — это экземпляр "
"класса :class:`OpcodeInfo`; *arg* — это декодированное значение аргумента "
"кода операции в виде объекта Python; *pos* — это позиция, в которой "
"находится этот код операции. *pickle* может быть строкой или файловым "
"объектом."

#: ../../library/pickletools.rst:110
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"Возвращает новую эквивалентную строку Pickle после исключения неиспользуемых "
"кодов операций PUT. Оптимизированное травление короче, занимает меньше "
"времени на передачу, требует меньше места для хранения и обеспечивает более "
"эффективное травление."
