# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:53+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr "Сопрограммы и задачи"

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""
"В этом разделе описываются высокоуровневые API-интерфейсы asyncio для работы "
"с сопрограммами и задачами."

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:125
msgid "Coroutines"
msgstr "Сопрограммы"

#: ../../library/asyncio-task.rst:21
msgid "**Source code:** :source:`Lib/asyncio/coroutines.py`"
msgstr "**Исходный код:** :source:`Lib/asyncio/coroutines.py`"

#: ../../library/asyncio-task.rst:25
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""
":term:`Сопрограммы <coroutine>`, объявленные с синтаксисом async/await, "
"являются предпочтительным способом написания асинхронных приложений. "
"Например, следующий фрагмент кода печатает «привет», ждет 1 секунду, а затем "
"печатает «мир»::"

#: ../../library/asyncio-task.rst:41
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""
"Обратите внимание, что простой вызов сопрограммы не запланирует ее "
"выполнение::"

#: ../../library/asyncio-task.rst:47
msgid "To actually run a coroutine, asyncio provides three main mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:49
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\" "
"function (see the above example.)"
msgstr ""
"Функция :func:`asyncio.run` для запуска функции main() точки входа верхнего "
"уровня (см. пример выше)."

#: ../../library/asyncio-task.rst:52
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\" "
"after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""
"Ожидание сопрограммы. Следующий фрагмент кода выведет «hello» после ожидания "
"в течение 1 секунды, а затем выведет «world» после ожидания *еще* 2 секунд::"

#: ../../library/asyncio-task.rst:73
msgid "Expected output::"
msgstr "Ожидаемый результат::"

#: ../../library/asyncio-task.rst:80
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""
"Функция :func:`asyncio.create_task` для одновременного запуска сопрограмм "
"как asyncio :class:`Tasks <Task>`."

#: ../../library/asyncio-task.rst:83
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""
"Давайте изменим приведенный выше пример и запустим две сопрограммы Say_after "
"*параллельно*::"

#: ../../library/asyncio-task.rst:102
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""
"Обратите внимание, что ожидаемый результат теперь показывает, что фрагмент "
"выполняется на 1 секунду быстрее, чем раньше:"

#: ../../library/asyncio-task.rst:114
msgid "Awaitables"
msgstr "Ожидаемые события"

#: ../../library/asyncio-task.rst:116
msgid ""
"We say that an object is an **awaitable** object if it can be used in an :"
"keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""
"Мы говорим, что объект является **ожидаемым** объектом, если его можно "
"использовать в выражении :keyword:`await`. Многие API-интерфейсы asyncio "
"предназначены для приема ожидаемых данных."

#: ../../library/asyncio-task.rst:120
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""
"Существует три основных типа *ожидаемых* объектов: **сопрограммы**, "
"**Задачи** и **Фьючерсы**."

#: ../../library/asyncio-task.rst:126
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""
"Сопрограммы Python являются *ожидаемыми* и поэтому их можно ожидать от "
"других сопрограмм::"

#: ../../library/asyncio-task.rst:147
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""
"В этой документации термин «сопрограмма» может использоваться для двух тесно "
"связанных понятий:"

#: ../../library/asyncio-task.rst:150
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr "*функция сопрограммы*: функция :keyword:`async def`;"

#: ../../library/asyncio-task.rst:152
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""
"*объект сопрограммы*: объект, возвращаемый вызовом *функции сопрограммы*."

#: ../../library/asyncio-task.rst:155
msgid ""
"asyncio also supports legacy :ref:`generator-based "
"<asyncio_generator_based_coro>` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:160
msgid "Tasks"
msgstr "Задачи"

#: ../../library/asyncio-task.rst:161
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr "*Задачи* используются для планирования сопрограмм *одновременно*."

#: ../../library/asyncio-task.rst:163
msgid ""
"When a coroutine is wrapped into a *Task* with functions like :func:`asyncio."
"create_task` the coroutine is automatically scheduled to run soon::"
msgstr ""
"Когда сопрограмма заключена в *Task* с такими функциями, как :func:`asyncio."
"create_task`, сопрограмма автоматически планируется к скорому запуску::"

#: ../../library/asyncio-task.rst:185
msgid "Futures"
msgstr "Фьючерсы"

#: ../../library/asyncio-task.rst:186
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""
":class:`Future` — это специальный **низкоуровневый** ожидаемый объект, "
"который представляет **конечный результат** асинхронной операции."

#: ../../library/asyncio-task.rst:189
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""
"Когда объект Future является *ожидаемым*, это означает, что сопрограмма "
"будет ждать, пока Future не будет разрешена в каком-то другом месте."

#: ../../library/asyncio-task.rst:192
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used "
"with async/await."
msgstr ""
"Будущие объекты в asyncio необходимы, чтобы разрешить использование кода "
"обратного вызова с async/await."

#: ../../library/asyncio-task.rst:195
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""
"Обычно **нет необходимости** создавать объекты Future на уровне кода "
"приложения."

#: ../../library/asyncio-task.rst:198
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be "
"awaited::"
msgstr ""
"Будущие объекты, иногда предоставляемые библиотеками и некоторыми API-"
"интерфейсами asyncio, могут ожидаться:"

#: ../../library/asyncio-task.rst:210
msgid ""
"A good example of a low-level function that returns a Future object is :meth:"
"`loop.run_in_executor`."
msgstr ""
"Хорошим примером низкоуровневой функции, возвращающей объект Future, "
"является :meth:`loop.run_in_executor`."

#: ../../library/asyncio-task.rst:215
msgid "Running an asyncio Program"
msgstr "Запуск программы asyncio"

#: ../../library/asyncio-task.rst:219
msgid "Execute the :term:`coroutine` *coro* and return the result."
msgstr "Выполните :term:`coroutine` *coro* и верните результат."

#: ../../library/asyncio-task.rst:221
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio "
"event loop, *finalizing asynchronous generators*, and closing the threadpool."
msgstr ""

#: ../../library/asyncio-task.rst:225
msgid ""
"This function cannot be called when another asyncio event loop is running in "
"the same thread."
msgstr ""
"Эту функцию нельзя вызвать, когда в том же потоке выполняется другой цикл "
"событий asyncio."

#: ../../library/asyncio-task.rst:228
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../../library/asyncio-task.rst:230
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr ""

#: ../../library/asyncio-task.rst:234 ../../library/asyncio-task.rst:382
#: ../../library/asyncio-task.rst:524 ../../library/asyncio-task.rst:657
msgid "Example::"
msgstr "Пример::"

#: ../../library/asyncio-task.rst:244
msgid "Updated to use :meth:`loop.shutdown_default_executor`."
msgstr "Обновлено для использования :meth:`loop.shutdown_default_executor` ."

#: ../../library/asyncio-task.rst:248
msgid ""
"The source code for ``asyncio.run()`` can be found in :source:`Lib/asyncio/"
"runners.py`."
msgstr ""

#: ../../library/asyncio-task.rst:252
msgid "Creating Tasks"
msgstr "Создание задач"

#: ../../library/asyncio-task.rst:254
msgid "**Source code:** :source:`Lib/asyncio/tasks.py`"
msgstr "**Исходный код:** :source:`Lib/asyncio/tasks.py`"

#: ../../library/asyncio-task.rst:260
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""
"Оберните *coro* :ref:`coroutine <coroutine>` в :class:`Task` и запланируйте "
"его выполнение. Верните объект Task."

#: ../../library/asyncio-task.rst:263
msgid ""
"If *name* is not ``None``, it is set as the name of the task using :meth:"
"`Task.set_name`."
msgstr ""
"Если *name* не ``None``, оно устанавливается как имя задачи с помощью :meth:"
"`Task.set_name`."

#: ../../library/asyncio-task.rst:266
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, :exc:"
"`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""
"Задача выполняется в цикле, возвращаемом :func:`get_running_loop`, :exc:"
"`RuntimeError` возникает, если в текущем потоке нет работающего цикла."

#: ../../library/asyncio-task.rst:272
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done. For reliable \"fire-and-forget\" background "
"tasks, gather them in a collection::"
msgstr ""
"Сохраните ссылку на результат этой функции, чтобы избежать исчезновения "
"задачи в середине выполнения. Цикл событий сохраняет только слабые ссылки на "
"задачи. Задача, на которую нигде нет ссылок, может быть удалена сборщиком "
"мусора в любое время, даже до того, как она будет выполнена. Для надежных "
"фоновых задач по принципу «выстрелил и забыл» соберите их в коллекцию:"

#: ../../library/asyncio-task.rst:294 ../../library/asyncio-task.rst:846
msgid "Added the *name* parameter."
msgstr "Добавлен параметр *имя*."

#: ../../library/asyncio-task.rst:299
msgid "Sleeping"
msgstr "Спящий"

#: ../../library/asyncio-task.rst:303
msgid "Block for *delay* seconds."
msgstr "Блокировка на *delay* секунд."

#: ../../library/asyncio-task.rst:305
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""
"Если указан *result*, он возвращается вызывающей стороне после завершения "
"сопрограммы."

#: ../../library/asyncio-task.rst:308
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""
"``sleep()`` всегда приостанавливает текущую задачу, позволяя запустить "
"другие задачи."

#: ../../library/asyncio-task.rst:311
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr ""
"Установка задержки на 0 обеспечивает оптимизированный путь для запуска "
"других задач. Это может использоваться долго выполняющимися функциями, чтобы "
"избежать блокировки цикла событий на весь период вызова функции."

#: ../../library/asyncio-task.rst:320
msgid ""
"The ``loop`` parameter.  This function has been implicitly getting the "
"current running loop since 3.7.  See :ref:`What's New in 3.10's Removed "
"section <whatsnew310-removed>` for more information."
msgstr ""

#: ../../library/asyncio-task.rst:323
msgid ""
"Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""
"Пример сопрограммы, отображающей текущую дату каждую секунду в течение 5 "
"секунд::"

#: ../../library/asyncio-task.rst:341 ../../library/asyncio-task.rst:377
#: ../../library/asyncio-task.rst:431 ../../library/asyncio-task.rst:485
#: ../../library/asyncio-task.rst:519 ../../library/asyncio-task.rst:549
#: ../../library/asyncio-task.rst:608 ../../library/asyncio-task.rst:643
#: ../../library/asyncio-task.rst:663
msgid "Removed the *loop* parameter."
msgstr "Удален параметр *loop*."

#: ../../library/asyncio-task.rst:346
msgid "Running Tasks Concurrently"
msgstr "Одновременное выполнение задач"

#: ../../library/asyncio-task.rst:350
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""
"Запустите :ref:`awaitable объекты <asyncio-awaitables>` в последовательности "
"*aws* *параллельно*."

#: ../../library/asyncio-task.rst:353
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task."
msgstr ""
"Если какое-либо ожидаемое событие в *aws* является сопрограммой, оно "
"автоматически назначается как Задача."

#: ../../library/asyncio-task.rst:356
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""
"Если все ожидаемые объекты выполнены успешно, результатом является "
"совокупный список возвращаемых значений. Порядок значений результатов "
"соответствует порядку ожидаемых объектов в *aws*."

#: ../../library/asyncio-task.rst:360
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is "
"immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to "
"run."
msgstr ""
"Если *return_Exceptions* имеет значение False (по умолчанию), первое "
"возникшее исключение немедленно распространяется на задачу, ожидающую "
"Gather(). Другие ожидаемые объекты в последовательности *aws* **не будут "
"отменены** и продолжат выполняться."

#: ../../library/asyncio-task.rst:365
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""
"Если *return_Exceptions* имеет значение True, исключения обрабатываются так "
"же, как успешные результаты, и объединяются в список результатов."

#: ../../library/asyncio-task.rst:368
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""
"Если ``gather()`` *отменяется*, все отправленные ожидаемые объекты (которые "
"еще не завершены) также *отменяются*."

#: ../../library/asyncio-task.rst:371
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""
"Если какая-либо Задача или Future из последовательности *aws* *отменена*, "
"она рассматривается так, как если бы она вызвала :exc:`CancelledError` — "
"вызов ``gather()`` в этом случае **не** отменяется. . Это сделано для того, "
"чтобы предотвратить отмену одной отправленной задачи/фьючерса, которая может "
"привести к отмене других задач/фьючерсов."

#: ../../library/asyncio-task.rst:420
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:427
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""
"Если сам *сбор* отменен, отмена распространяется независимо от "
"*return_Exceptions*."

#: ../../library/asyncio-task.rst:434
msgid ""
"Deprecation warning is emitted if no positional arguments are provided or "
"not all positional arguments are Future-like objects and there is no running "
"event loop."
msgstr ""
"Предупреждение об устаревании выдается, если позиционные аргументы не "
"предоставлены или не все позиционные аргументы являются объектами типа "
"Future и нет текущего цикла событий."

#: ../../library/asyncio-task.rst:441
msgid "Shielding From Cancellation"
msgstr "Защита от отмены"

#: ../../library/asyncio-task.rst:445
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:"
"`cancelled <Task.cancel>`."
msgstr ""
"Защитите :ref:`ожидаемый объект <asyncio-awaitables>` от :meth:`отмены <Task."
"cancel>`."

#: ../../library/asyncio-task.rst:448 ../../library/asyncio-task.rst:501
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""
"Если *aw* является сопрограммой, она автоматически назначается как Задача."

#: ../../library/asyncio-task.rst:450
msgid "The statement::"
msgstr "Заявление::"

#: ../../library/asyncio-task.rst:455
msgid "is equivalent to::"
msgstr "эквивалентно::"

#: ../../library/asyncio-task.rst:459
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a :exc:"
"`CancelledError`."
msgstr ""
"*за исключением* того, что если сопрограмма, содержащая ее, отменена, "
"Задача, выполняющаяся в ``something()``, не отменяется. С точки зрения "
"``something()`` отмены не произошло. Хотя вызывающая сторона по-прежнему "
"отменяется, выражение await по-прежнему вызывает ошибку :exc:"
"`CancelledError`."

#: ../../library/asyncio-task.rst:465
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""
"Если ``something()`` отменяется другими способами (т.е. изнутри самого "
"себя), это также отменяет ``shield()``."

#: ../../library/asyncio-task.rst:468
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""
"Если желательно полностью игнорировать отмену (не рекомендуется), функцию "
"«shield()» следует объединить с предложением try/Exception следующим образом:"

#: ../../library/asyncio-task.rst:480
msgid ""
"Save a reference to tasks passed to this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done."
msgstr ""
"Сохраните ссылку на задачи, переданные в эту функцию, чтобы задача не "
"исчезла в середине выполнения. Цикл событий сохраняет только слабые ссылки "
"на задачи. Задача, на которую нигде нет ссылок, может быть удалена сборщиком "
"мусора в любое время, даже до того, как она будет выполнена."

#: ../../library/asyncio-task.rst:488
msgid ""
"Deprecation warning is emitted if *aw* is not Future-like object and there "
"is no running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если *aw* не является объектом типа "
"Future и нет текущего цикла событий."

#: ../../library/asyncio-task.rst:494
msgid "Timeouts"
msgstr "Таймауты"

#: ../../library/asyncio-task.rst:498
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""
"Подождите, пока *aw* :ref:`awaitable <asyncio-awaitables>` завершится с "
"таймаутом."

#: ../../library/asyncio-task.rst:503
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait "
"for.  If *timeout* is ``None``, block until the future completes."
msgstr ""
"*timeout* может быть либо ``None``, либо числом с плавающей запятой или "
"целым числом секунд ожидания. Если *timeout* имеет значение «None», "
"блокируется до завершения будущего."

#: ../../library/asyncio-task.rst:507
msgid ""
"If a timeout occurs, it cancels the task and raises :exc:`asyncio."
"TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:510
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:"
"`shield`."
msgstr ""
"Чтобы избежать выполнения задачи :meth:`cancellation <Task.cancel>`, "
"оберните ее в :func:`shield`."

#: ../../library/asyncio-task.rst:513
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr ""
"Функция будет ждать до тех пор, пока фьючерс не будет фактически отменен, "
"поэтому общее время ожидания может превысить *таймаут*. Если во время отмены "
"возникает исключение, оно распространяется."

#: ../../library/asyncio-task.rst:517
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr "Если ожидание отменяется, будущее *aw* также отменяется."

#: ../../library/asyncio-task.rst:544
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:554
msgid "Waiting Primitives"
msgstr "Ожидающие примитивы"

#: ../../library/asyncio-task.rst:558
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:562
msgid "The *aws* iterable must not be empty."
msgstr ""

#: ../../library/asyncio-task.rst:564
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr "Возвращает два набора задач/фьючерсов: ``(выполнено, ожидается)``."

#: ../../library/asyncio-task.rst:566
msgid "Usage::"
msgstr "Использование::"

#: ../../library/asyncio-task.rst:570
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum "
"number of seconds to wait before returning."
msgstr ""
"*timeout* (число с плавающей запятой или целое число), если указано, можно "
"использовать для управления максимальным количеством секунд ожидания перед "
"возвратом."

#: ../../library/asyncio-task.rst:573
msgid ""
"Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures "
"or Tasks that aren't done when the timeout occurs are simply returned in the "
"second set."
msgstr ""

#: ../../library/asyncio-task.rst:577
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""
"*return_when* указывает, когда эта функция должна вернуться. Это должна быть "
"одна из следующих констант:"

#: ../../library/asyncio-task.rst:583
msgid "Constant"
msgstr "Константа"

#: ../../library/asyncio-task.rst:583
msgid "Description"
msgstr "Описание"

#: ../../library/asyncio-task.rst:585
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:585
msgid "The function will return when any future finishes or is cancelled."
msgstr "Функция вернется, когда любое будущее завершится или будет отменено."

#: ../../library/asyncio-task.rst:588
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../library/asyncio-task.rst:588
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:594
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:594
msgid "The function will return when all futures finish or are cancelled."
msgstr "Функция вернется, когда все фьючерсы закончатся или будут отменены."

#: ../../library/asyncio-task.rst:598
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""
"В отличие от :func:`~asyncio.wait_for`, ``wait()`` не отменяет фьючерсы, "
"когда происходит таймаут."

#: ../../library/asyncio-task.rst:603
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task.  Passing coroutines objects to ``wait()`` directly is deprecated as it "
"leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:614
msgid ""
"``wait()`` schedules coroutines as Tasks automatically and later returns "
"those implicitly created Task objects in ``(done, pending)`` sets.  "
"Therefore the following code won't work as expected::"
msgstr ""

#: ../../library/asyncio-task.rst:627
msgid "Here is how the above snippet can be fixed::"
msgstr ""

#: ../../library/asyncio-task.rst:640
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr ""

#: ../../library/asyncio-task.rst:649
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently.  Return an iterator of coroutines. Each coroutine returned can "
"be awaited to get the earliest next result from the iterable of the "
"remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:654
msgid ""
"Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures "
"are done."
msgstr ""

#: ../../library/asyncio-task.rst:666
msgid ""
"Deprecation warning is emitted if not all awaitable objects in the *aws* "
"iterable are Future-like objects and there is no running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если не все ожидаемые объекты в "
"итерации *aws* являются объектами типа Future и не выполняется цикл "
"обработки событий."

#: ../../library/asyncio-task.rst:672
msgid "Running in Threads"
msgstr "Работа в потоках"

#: ../../library/asyncio-task.rst:676
msgid "Asynchronously run function *func* in a separate thread."
msgstr "Асинхронно запустите функцию *func* в отдельном потоке."

#: ../../library/asyncio-task.rst:678
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""
"Любые \\*args и \\*\\*kwargs, предоставленные для этой функции, напрямую "
"передаются в *func*. Кроме того, распространяется текущий :class:"
"`contextvars.Context`, позволяя получать доступ к контекстным переменным из "
"потока цикла событий в отдельном потоке."

#: ../../library/asyncio-task.rst:683
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr ""
"Возвращает сопрограмму, которую можно ожидать, чтобы получить конечный "
"результат *func*."

#: ../../library/asyncio-task.rst:685
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were ran in the main thread. For example::"
msgstr ""

#: ../../library/asyncio-task.rst:715
msgid ""
"Directly calling ``blocking_io()`` in any coroutine would block the event "
"loop for its duration, resulting in an additional 1 second of run time. "
"Instead, by using ``asyncio.to_thread()``, we can run it in a separate "
"thread without blocking the event loop."
msgstr ""
"Непосредственный вызов ``blocking_io()`` в любой сопрограмме заблокирует "
"цикл событий на время его выполнения, что приведет к дополнительной 1 "
"секунде выполнения. Вместо этого, используя asyncio.to_thread(), мы можем "
"запустить его в отдельном потоке, не блокируя цикл событий."

#: ../../library/asyncio-task.rst:722
msgid ""
"Due to the :term:`GIL`, ``asyncio.to_thread()`` can typically only be used "
"to make IO-bound functions non-blocking. However, for extension modules that "
"release the GIL or alternative Python implementations that don't have one, "
"``asyncio.to_thread()`` can also be used for CPU-bound functions."
msgstr ""
"Из-за :term:`GIL`, ``asyncio.to_thread()`` обычно можно использовать только "
"для того, чтобы сделать неблокирующими функции, связанные с вводом-выводом. "
"Однако для модулей расширения, выпускающих GIL, или альтернативных "
"реализаций Python, у которых его нет, asyncio.to_thread() также можно "
"использовать для функций, связанных с ЦП."

#: ../../library/asyncio-task.rst:731
msgid "Scheduling From Other Threads"
msgstr "Планирование из других потоков"

#: ../../library/asyncio-task.rst:735
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr "Отправьте сопрограмму в данный цикл событий. Потокобезопасный."

#: ../../library/asyncio-task.rst:737
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""
"Верните :class:`concurrent.futures.Future`, чтобы дождаться результата из "
"другого потока ОС."

#: ../../library/asyncio-task.rst:740
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""
"Эта функция предназначена для вызова из другого потока ОС, отличного от "
"того, в котором выполняется цикл событий. Пример::"

#: ../../library/asyncio-task.rst:752
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""
"Если в сопрограмме возникает исключение, возвращаемое Future будет "
"уведомлено. Его также можно использовать для отмены задачи в цикле событий:"

#: ../../library/asyncio-task.rst:766
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"См. раздел документации о :ref:`параллелизме и многопоточности <asyncio-"
"multithreading>`."

#: ../../library/asyncio-task.rst:769
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to "
"be passed explicitly."
msgstr ""
"В отличие от других функций asyncio, эта функция требует явной передачи "
"аргумента *loop*."

#: ../../library/asyncio-task.rst:776
msgid "Introspection"
msgstr "самоанализ"

#: ../../library/asyncio-task.rst:781
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""
"Возвращает текущий запущенный экземпляр :class:`Task` или ``None``, если ни "
"одна задача не выполняется."

#: ../../library/asyncio-task.rst:784
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""
"Если *loop* имеет значение ``None``, для получения текущего цикла "
"используется :func:`get_running_loop`."

#: ../../library/asyncio-task.rst:792
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""
"Возвращает набор еще не завершенных объектов :class:`Task`, запущенных в "
"цикле."

#: ../../library/asyncio-task.rst:795
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""
"Если *loop* равен ``None``, для получения текущего цикла используется :func:"
"`get_running_loop`."

#: ../../library/asyncio-task.rst:802
msgid "Task Object"
msgstr "Объект задачи"

#: ../../library/asyncio-task.rst:806
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""
":class:`Future-подобный объект <Future>`, который запускает Python :ref:"
"`coroutine <coroutine>`. Не потокобезопасный."

#: ../../library/asyncio-task.rst:809
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""
"Задачи используются для запуска сопрограмм в циклах событий. Если "
"сопрограмма ожидает выполнения Future, Задача приостанавливает выполнение "
"сопрограммы и ожидает завершения Future. Когда Future *done*, выполнение "
"обернутой сопрограммы возобновляется."

#: ../../library/asyncio-task.rst:815
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""
"Циклы событий используют совместное планирование: цикл событий запускает "
"одну задачу за раз. Пока Задача ожидает завершения Будущего, цикл событий "
"запускает другие Задачи, обратные вызовы или выполняет операции ввода-вывода."

#: ../../library/asyncio-task.rst:820
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""
"Используйте функцию высокого уровня :func:`asyncio.create_task` для создания "
"задач или функции низкого уровня :meth:`loop.create_task` или :func:"
"`ensure_future`. Создание экземпляров задач вручную не рекомендуется."

#: ../../library/asyncio-task.rst:825
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""
"Чтобы отменить запущенную Задачу, используйте метод :meth:`cancel`. Его "
"вызов приведет к тому, что Задача выдаст исключение :exc:`CancelledError` в "
"обернутую сопрограмму. Если сопрограмма ожидает объекта Future во время "
"отмены, объект Future будет отменен."

#: ../../library/asyncio-task.rst:830
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method "
"returns ``True`` if the wrapped coroutine did not suppress the :exc:"
"`CancelledError` exception and was actually cancelled."
msgstr ""
":meth:`cancelled` можно использовать, чтобы проверить, была ли задача "
"отменена. Метод возвращает True, если обернутая сопрограмма не подавила "
"исключение :exc:`CancelledError` и была фактически отменена."

#: ../../library/asyncio-task.rst:835
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :"
"meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""
":class:`asyncio.Task` наследует от :class:`Future` все его API, кроме :meth:"
"`Future.set_result` и :meth:`Future.set_Exception`."

#: ../../library/asyncio-task.rst:839
msgid ""
"Tasks support the :mod:`contextvars` module.  When a Task is created it "
"copies the current context and later runs its coroutine in the copied "
"context."
msgstr ""

#: ../../library/asyncio-task.rst:843
msgid "Added support for the :mod:`contextvars` module."
msgstr "Добавлена ​​поддержка модуля :mod:`contextvars`."

#: ../../library/asyncio-task.rst:849
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr ""
"Предупреждение об устаревании выдается, если *loop* не указан и нет "
"работающего цикла событий."

#: ../../library/asyncio-task.rst:855
msgid "Request the Task to be cancelled."
msgstr "Запросить отмену задачи."

#: ../../library/asyncio-task.rst:857
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""
"Это обеспечивает выдачу исключения :exc:`CancelledError` в обернутую "
"сопрограмму в следующем цикле цикла событий."

#: ../../library/asyncio-task.rst:860
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:"
"`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will "
"be cancelled, although suppressing cancellation completely is not common and "
"is actively discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:868
msgid "Added the *msg* parameter."
msgstr "Добавлен параметр *msg*."

#: ../../library/asyncio-task.rst:873
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""
"Следующий пример иллюстрирует, как сопрограммы могут перехватить запрос на "
"отмену:"

#: ../../library/asyncio-task.rst:912
msgid "Return ``True`` if the Task is *cancelled*."
msgstr "Верните ``True``, если Задача *отменена*."

#: ../../library/asyncio-task.rst:914
msgid ""
"The Task is *cancelled* when the cancellation was requested with :meth:"
"`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` "
"exception thrown into it."
msgstr ""
"Задача *отменяется*, когда отмена была запрошена с помощью :meth:`cancel` и "
"обернутая сопрограмма распространила в нее исключение :exc:`CancelledError`."

#: ../../library/asyncio-task.rst:920
msgid "Return ``True`` if the Task is *done*."
msgstr "Верните ``True``, если Задача *done*."

#: ../../library/asyncio-task.rst:922
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""
"Задача считается *выполненной*, когда обернутая сопрограмма либо вернула "
"значение, вызвала исключение, либо Задача была отменена."

#: ../../library/asyncio-task.rst:927
msgid "Return the result of the Task."
msgstr "Вернуть результат задачи."

#: ../../library/asyncio-task.rst:929
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""
"Если Задача *done*, возвращается результат обернутой сопрограммы (или, если "
"сопрограмма вызвала исключение, это исключение вызывается повторно.)"

#: ../../library/asyncio-task.rst:933 ../../library/asyncio-task.rst:947
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError` "
"exception."
msgstr ""
"Если Задача была *отменена*, этот метод вызывает исключение :exc:"
"`CancelledError`."

#: ../../library/asyncio-task.rst:936
msgid ""
"If the Task's result isn't yet available, this method raises a :exc:"
"`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:941
msgid "Return the exception of the Task."
msgstr "Вернуть исключение задачи."

#: ../../library/asyncio-task.rst:943
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If "
"the wrapped coroutine returned normally this method returns ``None``."
msgstr ""
"Если обернутая сопрограмма вызвала исключение, это исключение возвращается. "
"Если обернутая сопрограмма вернулась нормально, этот метод возвращает None."

#: ../../library/asyncio-task.rst:950
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError` "
"exception."
msgstr ""
"Если Задача еще не *выполнена*, этот метод вызывает исключение :exc:"
"`InvalidStateError`."

#: ../../library/asyncio-task.rst:955
msgid "Add a callback to be run when the Task is *done*."
msgstr ""
"Добавьте обратный вызов, который будет выполняться, когда Задача *выполнена*."

#: ../../library/asyncio-task.rst:957 ../../library/asyncio-task.rst:966
msgid "This method should only be used in low-level callback-based code."
msgstr ""
"Этот метод следует использовать только в низкоуровневом коде, основанном на "
"обратном вызове."

#: ../../library/asyncio-task.rst:959
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""
"Дополнительную информацию смотрите в документации :meth:`Future."
"add_done_callback`."

#: ../../library/asyncio-task.rst:964
msgid "Remove *callback* from the callbacks list."
msgstr "Удалите *callback* из списка обратных вызовов."

#: ../../library/asyncio-task.rst:968
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""
"Дополнительную информацию смотрите в документации :meth:`Future."
"remove_done_callback`."

#: ../../library/asyncio-task.rst:973
msgid "Return the list of stack frames for this Task."
msgstr "Верните список кадров стека для этой задачи."

#: ../../library/asyncio-task.rst:975
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception, "
"this returns the list of traceback frames."
msgstr ""
"Если обернутая сопрограмма не завершена, возвращается стек, в котором она "
"приостановлена. Если сопрограмма завершилась успешно или была отменена, "
"возвращается пустой список. Если сопрограмма была прервана из-за исключения, "
"возвращается список кадров обратной трассировки."

#: ../../library/asyncio-task.rst:981
msgid "The frames are always ordered from oldest to newest."
msgstr ""
"Кадры всегда располагаются в порядке от самого старого к самому новому."

#: ../../library/asyncio-task.rst:983
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr "Для приостановленной сопрограммы возвращается только один кадр стека."

#: ../../library/asyncio-task.rst:985
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""
"Необязательный аргумент *limit* устанавливает максимальное количество "
"возвращаемых кадров; по умолчанию возвращаются все доступные кадры. Порядок "
"возвращаемого списка различается в зависимости от того, возвращается ли стек "
"или обратная трассировка: возвращаются самые новые кадры стека, но "
"возвращаются самые старые кадры обратной трассировки. (Это соответствует "
"поведению модуля трассировки.)"

#: ../../library/asyncio-task.rst:994
msgid "Print the stack or traceback for this Task."
msgstr "Распечатайте стек или обратную трассировку для этой задачи."

#: ../../library/asyncio-task.rst:996
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""
"Это создает выходные данные, аналогичные выводам модуля трассировки для "
"кадров, полученных с помощью :meth:`get_stack`."

#: ../../library/asyncio-task.rst:999
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr "Аргумент *limit* передается непосредственно в :meth:`get_stack`."

#: ../../library/asyncio-task.rst:1001
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stdout`."
msgstr ""
"Аргумент *file* представляет собой поток ввода-вывода, в который "
"записываются выходные данные; по умолчанию вывод записывается в :data:`sys."
"stdout`."

#: ../../library/asyncio-task.rst:1006
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr "Верните объект сопрограммы, завернутый в :class:`Task`."

#: ../../library/asyncio-task.rst:1012
msgid "Return the name of the Task."
msgstr "Верните имя задачи."

#: ../../library/asyncio-task.rst:1014
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr ""
"Если задаче явно не присвоено имя, реализация задачи asyncio по умолчанию "
"генерирует имя по умолчанию во время создания экземпляра."

#: ../../library/asyncio-task.rst:1022
msgid "Set the name of the Task."
msgstr "Задайте имя задачи."

#: ../../library/asyncio-task.rst:1024
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr ""
"Аргументом *value* может быть любой объект, который затем преобразуется в "
"строку."

#: ../../library/asyncio-task.rst:1027
msgid ""
"In the default Task implementation, the name will be visible in the :func:"
"`repr` output of a task object."
msgstr ""
"В реализации задачи по умолчанию имя будет видно в выводе :func:`repr` "
"объекта задачи."

#: ../../library/asyncio-task.rst:1036
msgid "Generator-based Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:1040
msgid ""
"Support for generator-based coroutines is **deprecated** and is removed in "
"Python 3.11."
msgstr ""

#: ../../library/asyncio-task.rst:1043
msgid ""
"Generator-based coroutines predate async/await syntax.  They are Python "
"generators that use ``yield from`` expressions to await on Futures and other "
"coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1047
msgid ""
"Generator-based coroutines should be decorated with :func:`@asyncio."
"coroutine <asyncio.coroutine>`, although this is not enforced."
msgstr ""

#: ../../library/asyncio-task.rst:1054
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1056
msgid ""
"This decorator enables legacy generator-based coroutines to be compatible "
"with async/await code::"
msgstr ""

#: ../../library/asyncio-task.rst:1066
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1071
msgid "Use :keyword:`async def` instead."
msgstr ""

#: ../../library/asyncio-task.rst:1075
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1077
msgid ""
"This method is different from :func:`inspect.iscoroutine` because it returns "
"``True`` for generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1082
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1085
msgid ""
"This method is different from :func:`inspect.iscoroutinefunction` because it "
"returns ``True`` for generator-based coroutine functions decorated with :"
"func:`@coroutine <coroutine>`."
msgstr ""
