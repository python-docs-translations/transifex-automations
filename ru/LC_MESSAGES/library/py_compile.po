# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:19+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/py_compile.rst:2
msgid ":mod:`py_compile` --- Compile Python source files"
msgstr ""

#: ../../library/py_compile.rst:10
msgid "**Source code:** :source:`Lib/py_compile.py`"
msgstr "**Исходный код:** "

#: ../../library/py_compile.rst:16
msgid ""
"The :mod:`py_compile` module provides a function to generate a byte-code "
"file from a source file, and another function used when the module source "
"file is invoked as a script."
msgstr ""
"Модуль :mod:`py_compile` предоставляет функцию для создания файла байт-кода "
"из исходного файла, а также другую функцию, используемую, когда исходный "
"файл модуля вызывается как скрипт."

#: ../../library/py_compile.rst:20
msgid ""
"Though not often needed, this function can be useful when installing modules "
"for shared use, especially if some of the users may not have permission to "
"write the byte-code cache files in the directory containing the source code."
msgstr ""
"Хотя эта функция требуется нечасто, она может быть полезна при установке "
"модулей для совместного использования, особенно если у некоторых "
"пользователей нет разрешения на запись файлов кэша байт-кода в каталог, "
"содержащий исходный код."

#: ../../library/py_compile.rst:27
msgid ""
"Exception raised when an error occurs while attempting to compile the file."
msgstr ""
"Исключение возникает, когда возникает ошибка при попытке скомпилировать файл."

#: ../../library/py_compile.rst:32
msgid ""
"Compile a source file to byte-code and write out the byte-code cache file. "
"The source code is loaded from the file named *file*.  The byte-code is "
"written to *cfile*, which defaults to the :pep:`3147`/:pep:`488` path, "
"ending in ``.pyc``. For example, if *file* is ``/foo/bar/baz.py`` *cfile* "
"will default to ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2.  "
"If *dfile* is specified, it is used instead of *file* as the name of the "
"source file from which source lines are obtained for display in exception "
"tracebacks. If *doraise* is true, a :exc:`PyCompileError` is raised when an "
"error is encountered while compiling *file*. If *doraise* is false (the "
"default), an error string is written to ``sys.stderr``, but no exception is "
"raised.  This function returns the path to byte-compiled file, i.e. whatever "
"*cfile* value was used."
msgstr ""
"Скомпилируйте исходный файл в байт-код и запишите файл кэша байт-кода. "
"Исходный код загружается из файла с именем *file*. Байт-код записывается в "
"*cfile*, который по умолчанию соответствует пути :pep:`3147`/:pep:`488`, "
"оканчивающемуся на ``.pyc``. Например, если *file* равен ``/foo/bar/baz."
"py``, *cfile* по умолчанию будет иметь значение ``/foo/bar/__pycache__/baz."
"cpython-32.pyc`` для Python 3.2. Если указано *dfile*, оно используется "
"вместо *file* в качестве имени исходного файла, из которого извлекаются "
"исходные строки для отображения в обратных трассировках исключений. Если "
"*doraise* истинно, при компиляции *file* возникает ошибка :exc:"
"`PyCompileError`. Если *doraise* имеет значение false (по умолчанию), строка "
"ошибки записывается в ``sys.stderr``, но исключение не создается. Эта "
"функция возвращает путь к скомпилированному побайтно файлу, т.е. любое "
"использованное значение *cfile*."

#: ../../library/py_compile.rst:46
msgid ""
"The *doraise* and *quiet* arguments determine how errors are handled while "
"compiling file. If *quiet* is 0 or 1, and *doraise* is false, the default "
"behaviour is enabled: an error string is written to ``sys.stderr``, and the "
"function returns ``None`` instead of a path. If *doraise* is true, a :exc:"
"`PyCompileError` is raised instead. However if *quiet* is 2, no message is "
"written, and *doraise* has no effect."
msgstr ""
"Аргументы *doraise* и *quiet* определяют, как обрабатываются ошибки при "
"компиляции файла. Если *quiet* имеет значение 0 или 1, а *doraise* имеет "
"значение false, включается поведение по умолчанию: строка ошибки "
"записывается в ``sys.stderr``, и функция возвращает ``None`` вместо пути. "
"Если *doraise* истинно, вместо этого возникает ошибка :exc:`PyCompileError`. "
"Однако если *quiet* равно 2, сообщение не записывается, и *doraise* не имеет "
"никакого эффекта."

#: ../../library/py_compile.rst:53
msgid ""
"If the path that *cfile* becomes (either explicitly specified or computed) "
"is a symlink or non-regular file, :exc:`FileExistsError` will be raised. "
"This is to act as a warning that import will turn those paths into regular "
"files if it is allowed to write byte-compiled files to those paths. This is "
"a side-effect of import using file renaming to place the final byte-compiled "
"file into place to prevent concurrent file writing issues."
msgstr ""
"Если путь, которым становится *cfile* (явно указанный или вычисленный), "
"является символической ссылкой или нерегулярным файлом, будет поднято :exc:"
"`FileExistsError`. Это предупреждение о том, что импорт превратит эти пути в "
"обычные файлы, если разрешено записывать в эти пути скомпилированные "
"побайтно файлы. Это побочный эффект импорта с использованием переименования "
"файлов для размещения окончательного скомпилированного побайтно файла на "
"месте во избежание проблем с одновременной записью файлов."

#: ../../library/py_compile.rst:60
msgid ""
"*optimize* controls the optimization level and is passed to the built-in :"
"func:`compile` function.  The default of ``-1`` selects the optimization "
"level of the current interpreter."
msgstr ""
"*optimize* контролирует уровень оптимизации и передается встроенной функции :"
"func:`compile`. Значение по умолчанию ``-1`` выбирает уровень оптимизации "
"текущего интерпретатора."

#: ../../library/py_compile.rst:64
msgid ""
"*invalidation_mode* should be a member of the :class:`PycInvalidationMode` "
"enum and controls how the generated bytecode cache is invalidated at "
"runtime.  The default is :attr:`PycInvalidationMode.CHECKED_HASH` if the :"
"envvar:`SOURCE_DATE_EPOCH` environment variable is set, otherwise the "
"default is :attr:`PycInvalidationMode.TIMESTAMP`."
msgstr ""
"*invalidation_mode* должен быть членом перечисления :class:"
"`PycInvalidationMode` и управляет тем, как сгенерированный кеш байт-кода "
"становится недействительным во время выполнения. По умолчанию используется :"
"attr:`PycInvalidationMode.CHECKED_HASH`, если установлена ​​переменная среды :"
"envvar:`SOURCE_DATE_EPOCH`, в противном случае значением по умолчанию "
"является :attr:`PycInvalidationMode.TIMESTAMP`."

#: ../../library/py_compile.rst:70
msgid ""
"Changed default value of *cfile* to be :PEP:`3147`-compliant.  Previous "
"default was *file* + ``'c'`` (``'o'`` if optimization was enabled). Also "
"added the *optimize* parameter."
msgstr ""
"Изменено значение по умолчанию *cfile*, чтобы оно соответствовало :PEP:"
"`3147`. Предыдущее значение по умолчанию было *file* + ``'c'`` (``'o'``, "
"если оптимизация была включена). Также добавлен параметр *optimize*."

#: ../../library/py_compile.rst:75
msgid ""
"Changed code to use :mod:`importlib` for the byte-code cache file writing. "
"This means file creation/writing semantics now match what :mod:`importlib` "
"does, e.g. permissions, write-and-move semantics, etc. Also added the caveat "
"that :exc:`FileExistsError` is raised if *cfile* is a symlink or non-regular "
"file."
msgstr ""
"Изменен код для использования :mod:`importlib` для записи файла кэша байт-"
"кода. Это означает, что семантика создания/записи файлов теперь "
"соответствует тому, что делает :mod:`importlib`, например разрешения, "
"семантика записи и перемещения и т. д. Также добавлено предупреждение о том, "
"что :exc:`FileExistsError` возникает, если *cfile* является символической "
"ссылкой. или нестандартный файл."

#: ../../library/py_compile.rst:82
msgid ""
"The *invalidation_mode* parameter was added as specified in :pep:`552`. If "
"the :envvar:`SOURCE_DATE_EPOCH` environment variable is set, "
"*invalidation_mode* will be forced to :attr:`PycInvalidationMode."
"CHECKED_HASH`."
msgstr ""
"Параметр *invalidation_mode* был добавлен, как указано в :pep:`552`. Если "
"установлена ​​переменная среды :envvar:`SOURCE_DATE_EPOCH`, для "
"*invalidation_mode* будет принудительно установлено значение :attr:"
"`PycInvalidationMode.CHECKED_HASH`."

#: ../../library/py_compile.rst:88
msgid ""
"The :envvar:`SOURCE_DATE_EPOCH` environment variable no longer overrides the "
"value of the *invalidation_mode* argument, and determines its default value "
"instead."
msgstr ""
"Переменная среды :envvar:`SOURCE_DATE_EPOCH` больше не переопределяет "
"значение аргумента *invalidation_mode*, а вместо этого определяет значение "
"по умолчанию."

#: ../../library/py_compile.rst:93
msgid "The *quiet* parameter was added."
msgstr "Добавлен параметр *quiet*."

#: ../../library/py_compile.rst:99
msgid ""
"A enumeration of possible methods the interpreter can use to determine "
"whether a bytecode file is up to date with a source file. The ``.pyc`` file "
"indicates the desired invalidation mode in its header. See :ref:`pyc-"
"invalidation` for more information on how Python invalidates ``.pyc`` files "
"at runtime."
msgstr ""

#: ../../library/py_compile.rst:109
msgid ""
"The ``.pyc`` file includes the timestamp and size of the source file, which "
"Python will compare against the metadata of the source file at runtime to "
"determine if the ``.pyc`` file needs to be regenerated."
msgstr ""
"Файл ``.pyc`` включает в себя временную метку и размер исходного файла, "
"которые Python будет сравнивать с метаданными исходного файла во время "
"выполнения, чтобы определить, нужно ли перегенерировать файл ``.pyc``."

#: ../../library/py_compile.rst:115
msgid ""
"The ``.pyc`` file includes a hash of the source file content, which Python "
"will compare against the source at runtime to determine if the ``.pyc`` file "
"needs to be regenerated."
msgstr ""
"Файл ``.pyc`` включает в себя хэш содержимого исходного файла, который "
"Python будет сравнивать с исходным кодом во время выполнения, чтобы "
"определить, нужно ли повторно создавать файл ``.pyc``."

#: ../../library/py_compile.rst:121
msgid ""
"Like :attr:`CHECKED_HASH`, the ``.pyc`` file includes a hash of the source "
"file content. However, Python will at runtime assume the ``.pyc`` file is up "
"to date and not validate the ``.pyc`` against the source file at all."
msgstr ""
"Как и :attr:`CHECKED_HASH`, файл ``.pyc`` включает в себя хэш содержимого "
"исходного файла. Однако во время выполнения Python будет считать, что файл "
"``.pyc`` обновлен, и вообще не будет проверять ``.pyc`` на соответствие "
"исходному файлу."

#: ../../library/py_compile.rst:125
msgid ""
"This option is useful when the ``.pycs`` are kept up to date by some system "
"external to Python like a build system."
msgstr ""
"Эта опция полезна, когда ``.pycs`` обновляется какой-либо системой, внешней "
"по отношению к Python, например системой сборки."

#: ../../library/py_compile.rst:131
msgid "Command-Line Interface"
msgstr "Интерфейс командной строки"

#: ../../library/py_compile.rst:133
msgid ""
"This module can be invoked as a script to compile several source files.  The "
"files named in *filenames* are compiled and the resulting bytecode is cached "
"in the normal manner.  This program does not search a directory structure to "
"locate source files; it only compiles files named explicitly. The exit "
"status is nonzero if one of the files could not be compiled."
msgstr ""
"Этот модуль можно вызвать как скрипт для компиляции нескольких исходных "
"файлов. Файлы, указанные в *filenames*, компилируются, а полученный байт-код "
"кэшируется обычным способом. Эта программа не выполняет поиск в структуре "
"каталогов для поиска исходных файлов; он компилирует только файлы с явно "
"указанными именами. Статус выхода ненулевой, если один из файлов не удалось "
"скомпилировать."

#: ../../library/py_compile.rst:145
msgid ""
"Positional arguments are files to compile.  If ``-`` is the only parameter, "
"the list of files is taken from standard input."
msgstr ""
"Позиционные аргументы — это файлы для компиляции. Если ``-`` является "
"единственным параметром, список файлов берется из стандартного ввода."

#: ../../library/py_compile.rst:150
msgid "Suppress errors output."
msgstr "Подавить вывод ошибок."

#: ../../library/py_compile.rst:152
msgid "Added support for ``-``."
msgstr "Добавлена ​​поддержка ``-``."

#: ../../library/py_compile.rst:155
msgid "Added support for :option:`-q`."
msgstr "Добавлена ​​поддержка :option:`-q`."

#: ../../library/py_compile.rst:161
msgid "Module :mod:`compileall`"
msgstr "Модуль :mod:`compileall`"

#: ../../library/py_compile.rst:162
msgid "Utilities to compile all Python source files in a directory tree."
msgstr "Утилиты для компиляции всех исходных файлов Python в дереве каталогов."

#: ../../library/py_compile.rst:12
msgid "file"
msgstr "файл"

#: ../../library/py_compile.rst:12
msgid "byte-code"
msgstr "байт-код"
