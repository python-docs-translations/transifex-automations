# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/dis.rst:2
msgid ":mod:`!dis` --- Disassembler for Python bytecode"
msgstr ":mod:`!dis` --- Дизассемблер для байт-кода Python"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Исходный код:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:17
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
"Модуль :mod:`dis` поддерживает анализ :term:`bytecode` CPython путем его "
"дизассемблирования. Байт-код CPython, который этот модуль принимает в "
"качестве входных данных, определен в файле :file:`Include/opcode.h` и "
"используется компилятором и интерпретатором."

#: ../../library/dis.rst:24
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"Байткод — это деталь реализации интерпретатора CPython. Нет никаких "
"гарантий, что байт-код не будет добавлен, удален или изменен между версиями "
"Python. Не следует считать, что использование этого модуля работает на "
"виртуальных машинах Python или в выпусках Python."

#: ../../library/dis.rst:29
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr ""
"Используйте 2 байта для каждой инструкции. Раньше количество байтов "
"варьировалось в зависимости от инструкции."

#: ../../library/dis.rst:33
msgid ""
"The argument of jump, exception handling and loop instructions is now the "
"instruction offset rather than the byte offset."
msgstr ""
"Аргументом инструкций перехода, обработки исключений и цикла теперь является "
"смещение инструкции, а не смещение байта."

#: ../../library/dis.rst:37
msgid ""
"Some instructions are accompanied by one or more inline cache entries, which "
"take the form of :opcode:`CACHE` instructions. These instructions are hidden "
"by default, but can be shown by passing ``show_caches=True`` to any :mod:"
"`dis` utility. Furthermore, the interpreter now adapts the bytecode to "
"specialize it for different runtime conditions. The adaptive bytecode can be "
"shown by passing ``adaptive=True``."
msgstr ""
"Некоторые инструкции сопровождаются одной или несколькими встроенными "
"записями кэша, которые имеют форму инструкций :opcode:`CACHE`. Эти "
"инструкции по умолчанию скрыты, но их можно отобразить, передав "
"``show_caches=True`` любой утилите :mod:`dis`. Более того, интерпретатор "
"теперь адаптирует байт-код, чтобы адаптировать его к различным условиям "
"выполнения. Адаптивный байт-код можно отобразить, передав ``adaptive=True``."

#: ../../library/dis.rst:45
msgid ""
"The argument of a jump is the offset of the target instruction relative to "
"the instruction that appears immediately after the jump instruction's :"
"opcode:`CACHE` entries."
msgstr ""
"Аргументом перехода является смещение целевой инструкции относительно "
"инструкции, которое появляется сразу после записей :opcode:`CACHE` "
"инструкции перехода."

#: ../../library/dis.rst:50
msgid ""
"As a consequence, the presence of the :opcode:`CACHE` instructions is "
"transparent for forward jumps but needs to be taken into account when "
"reasoning about backward jumps."
msgstr ""
"Как следствие, наличие инструкций :opcode:`CACHE` прозрачно для переходов "
"вперед, но их необходимо учитывать при рассуждениях о переходах назад."

#: ../../library/dis.rst:54
msgid "Example: Given the function :func:`!myfunc`::"
msgstr "Пример: Учитывая функцию :func:`!myfunc`::"

#: ../../library/dis.rst:56
msgid ""
"def myfunc(alist):\n"
"    return len(alist)"
msgstr ""
"def myfunc(alist):\n"
"    return len(alist)"

#: ../../library/dis.rst:59
msgid ""
"the following command can be used to display the disassembly of :func:`!"
"myfunc`:"
msgstr ""
"следующую команду можно использовать для отображения дизассемблирования :"
"func:`!myfunc`:"

#: ../../library/dis.rst:62
msgid ""
">>> dis.dis(myfunc)\n"
"  2           0 RESUME                   0\n"
"\n"
"  3           2 LOAD_GLOBAL              1 (NULL + len)\n"
"             12 LOAD_FAST                0 (alist)\n"
"             14 CALL                     1\n"
"             22 RETURN_VALUE"
msgstr ""
">>> dis.dis(myfunc)\n"
"  2           0 RESUME                   0\n"
"\n"
"  3           2 LOAD_GLOBAL              1 (NULL + len)\n"
"             12 LOAD_FAST                0 (alist)\n"
"             14 CALL                     1\n"
"             22 RETURN_VALUE"

#: ../../library/dis.rst:72
msgid "(The \"2\" is a line number)."
msgstr "(«2» — это номер строки)."

#: ../../library/dis.rst:77
msgid "Command-line interface"
msgstr "Интерфейс командной строки"

#: ../../library/dis.rst:79
msgid "The :mod:`dis` module can be invoked as a script from the command line:"
msgstr "Модуль :mod:`dis` можно вызвать как скрипт из командной строки:"

#: ../../library/dis.rst:81
msgid "python -m dis [-h] [infile]"
msgstr "python -m dis [-h] [infile]"

#: ../../library/dis.rst:85
msgid "The following options are accepted:"
msgstr "Принимаются следующие варианты:"

#: ../../library/dis.rst:91
msgid "Display usage and exit."
msgstr "Отобразить использование и выйти."

#: ../../library/dis.rst:93
msgid ""
"If :file:`infile` is specified, its disassembled code will be written to "
"stdout. Otherwise, disassembly is performed on compiled source code recieved "
"from stdin."
msgstr ""
"Если указан :file:`infile`, его дизассемблированный код будет записан на "
"стандартный вывод. В противном случае дизассемблирование выполняется на "
"скомпилированном исходном коде, полученном со стандартного ввода."

#: ../../library/dis.rst:97
msgid "Bytecode analysis"
msgstr "Анализ байт-кода"

#: ../../library/dis.rst:101
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a :"
"class:`Bytecode` object that provides easy access to details of the compiled "
"code."
msgstr ""
"API анализа байт-кода позволяет заключать фрагменты кода Python в объект :"
"class:`Bytecode`, который обеспечивает легкий доступ к деталям "
"скомпилированного кода."

#: ../../library/dis.rst:108
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr ""
"Анализируйте байт-код, соответствующий функции, генератору, асинхронному "
"генератору, сопрограмме, методу, строке исходного кода или объекту кода "
"(возвращенному :func:`compile`)."

#: ../../library/dis.rst:112
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode` "
"instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"Это удобная оболочка для многих функций, перечисленных ниже, в первую "
"очередь :func:`get_instructions`, поскольку итерация по экземпляру :class:"
"`Bytecode` дает операции с байт-кодом как экземпляры :class:`Instruction`."

#: ../../library/dis.rst:116 ../../library/dis.rst:304
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be "
"reported for the first source line in the disassembled code.  Otherwise, the "
"source line information (if any) is taken directly from the disassembled "
"code object."
msgstr ""
"Если *first_line* не ``None``, он указывает номер строки, который должен "
"быть указан для первой строки исходного кода в дизассемблированном коде. В "
"противном случае информация о строке исходного кода (если таковая имеется) "
"берется непосредственно из объекта дизассемблированного кода."

#: ../../library/dis.rst:121
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"Если *current_offset* не равен None, это относится к смещению инструкции в "
"дизассемблированном коде. Установка этого значения означает, что :meth:`."
"dis` будет отображать маркер «текущей инструкции» напротив указанного кода "
"операции."

#: ../../library/dis.rst:125
msgid ""
"If *show_caches* is ``True``, :meth:`.dis` will display inline cache entries "
"used by the interpreter to specialize the bytecode."
msgstr ""
"Если *show_caches* имеет значение True, :meth:`.dis` будет отображать записи "
"встроенного кэша, используемые интерпретатором для специализации байт-кода."

#: ../../library/dis.rst:128
msgid ""
"If *adaptive* is ``True``, :meth:`.dis` will display specialized bytecode "
"that may be different from the original bytecode."
msgstr ""
"Если *adaptive* имеет значение True, :meth:`.dis` будет отображать "
"специализированный байт-код, который может отличаться от исходного байт-кода."

#: ../../library/dis.rst:133
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr ""
"Создайте экземпляр :class:`Bytecode` из заданной трассировки, установив "
"*current_offset* в инструкцию, ответственную за исключение."

#: ../../library/dis.rst:138
msgid "The compiled code object."
msgstr "Объект скомпилированного кода."

#: ../../library/dis.rst:142
msgid "The first source line of the code object (if available)"
msgstr "Первая строка исходного кода объекта кода (если доступна)."

#: ../../library/dis.rst:146
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by :"
"func:`dis.dis`, but returned as a multi-line string)."
msgstr ""
"Возвращает форматированное представление операций с байт-кодом (то же самое, "
"что напечатано :func:`dis.dis`, но возвращается в виде многострочной строки)."

#: ../../library/dis.rst:151
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr ""
"Возвращает форматированную многострочную строку с подробной информацией об "
"объекте кода, например :func:`code_info`."

#: ../../library/dis.rst:154 ../../library/dis.rst:194
#: ../../library/dis.rst:246
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr ""
"Теперь он может обрабатывать объекты сопрограммы и асинхронного генератора."

#: ../../library/dis.rst:157 ../../library/dis.rst:249
#: ../../library/dis.rst:265 ../../library/dis.rst:292
#: ../../library/dis.rst:313
msgid "Added the *show_caches* and *adaptive* parameters."
msgstr "Добавлены параметры *show_caches* и *adaptive*."

#: ../../library/dis.rst:160
msgid "Example:"
msgstr "Пример:"

#: ../../library/dis.rst:162
msgid ""
">>> bytecode = dis.Bytecode(myfunc)\n"
">>> for instr in bytecode:\n"
"...     print(instr.opname)\n"
"...\n"
"RESUME\n"
"LOAD_GLOBAL\n"
"LOAD_FAST\n"
"CALL\n"
"RETURN_VALUE"
msgstr ""
">>> bytecode = dis.Bytecode(myfunc)\n"
">>> for instr in bytecode:\n"
"...     print(instr.opname)\n"
"...\n"
"RESUME\n"
"LOAD_GLOBAL\n"
"LOAD_FAST\n"
"CALL\n"
"RETURN_VALUE"

#: ../../library/dis.rst:176
msgid "Analysis functions"
msgstr "Аналитические функции"

#: ../../library/dis.rst:178
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only "
"a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ""
"Модуль :mod:`dis` также определяет следующие функции анализа, которые "
"преобразуют входные данные непосредственно в желаемые выходные данные. Они "
"могут быть полезны, если выполняется только одна операция, поэтому "
"промежуточный объект анализа бесполезен:"

#: ../../library/dis.rst:184
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr ""
"Возвращает форматированную многострочную строку с подробной информацией об "
"объекте кода для предоставленной функции, генератора, асинхронного "
"генератора, сопрограммы, метода, строки исходного кода или объекта кода."

#: ../../library/dis.rst:188
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr ""
"Обратите внимание, что точное содержимое строк информации о коде сильно "
"зависит от реализации и может произвольно меняться в разных виртуальных "
"машинах или выпусках Python."

#: ../../library/dis.rst:200
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"Распечатать подробную информацию об объекте кода для предоставленной "
"функции, метода, строки исходного кода или объекта кода в *файл* (или в "
"``sys.stdout``, если *file* не указан)."

#: ../../library/dis.rst:204
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr ""
"Это удобное сокращение для ``print(code_info(x), file=file)``, "
"предназначенное для интерактивного исследования по приглашению "
"интерпретатора."

#: ../../library/dis.rst:209 ../../library/dis.rst:240
#: ../../library/dis.rst:262 ../../library/dis.rst:289
msgid "Added *file* parameter."
msgstr "Добавлен параметр *file*."

#: ../../library/dis.rst:215
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For "
"a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects. These can include generator "
"expressions, nested functions, the bodies of nested classes, and the code "
"objects used for :ref:`annotation scopes <annotation-scopes>`. Strings are "
"first compiled to code objects with the :func:`compile` built-in function "
"before being disassembled.  If no object is provided, this function "
"disassembles the last traceback."
msgstr ""
"Дизассемблируйте объект *x*. *x* может обозначать модуль, класс, метод, "
"функцию, генератор, асинхронный генератор, сопрограмму, объект кода, строку "
"исходного кода или последовательность байтов необработанного байт-кода. Для "
"модуля дизассемблирует все функции. Для класса он дизассемблирует все методы "
"(включая классовые и статические методы). Для объекта кода или "
"последовательности необработанного байт-кода он печатает одну строку на "
"каждую инструкцию байт-кода. Он также рекурсивно дизассемблирует вложенные "
"объекты кода. Они могут включать в себя выражения генератора, вложенные "
"функции, тела вложенных классов и объекты кода, используемые для :ref:"
"`областей аннотаций <annotation-scopes>`. Строки сначала компилируются в "
"объекты кода с помощью встроенной функции :func:`compile`, а затем их "
"дизассемблируют. Если объект не указан, эта функция дизассемблирует "
"последнюю обратную трассировку."

#: ../../library/dis.rst:228 ../../library/dis.rst:259
#: ../../library/dis.rst:286
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr ""
"Дизассемблирование записывается в виде текста в предоставленный аргумент "
"*file*, если он указан, и в ``sys.stdout`` в противном случае."

#: ../../library/dis.rst:231
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr ""
"Максимальная глубина рекурсии ограничена *глубиной*, если только она не "
"равна «Нет». ``глубина=0`` означает отсутствие рекурсии."

#: ../../library/dis.rst:234
msgid ""
"If *show_caches* is ``True``, this function will display inline cache "
"entries used by the interpreter to specialize the bytecode."
msgstr ""
"Если *show_caches* имеет значение True, эта функция будет отображать записи "
"встроенного кэша, используемые интерпретатором для специализации байт-кода."

#: ../../library/dis.rst:237
msgid ""
"If *adaptive* is ``True``, this function will display specialized bytecode "
"that may be different from the original bytecode."
msgstr ""
"Если *adaptive* имеет значение «True», эта функция будет отображать "
"специализированный байт-код, который может отличаться от исходного байт-кода."

#: ../../library/dis.rst:243
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr ""
"Реализован рекурсивный дизассемблирование и добавлен параметр *глубина*."

#: ../../library/dis.rst:255
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""
"Дизассемблируйте функцию вершины стека обратной трассировки, используя "
"последнюю обратную трассировку, если она не была передана. Указывается "
"инструкция, вызвавшая исключение."

#: ../../library/dis.rst:272
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""
"Дизассемблируйте объект кода, указав последнюю инструкцию, если было указано "
"*lasti*. Вывод разделен на следующие столбцы:"

#: ../../library/dis.rst:275
msgid "the line number, for the first instruction of each line"
msgstr "номер строки для первой инструкции каждой строки"

#: ../../library/dis.rst:276
msgid "the current instruction, indicated as ``-->``,"
msgstr "текущая инструкция, обозначенная как ``-->``,"

#: ../../library/dis.rst:277
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "помеченная инструкция, обозначенная ``>>``,"

#: ../../library/dis.rst:278
msgid "the address of the instruction,"
msgstr "адрес инструкции,"

#: ../../library/dis.rst:279
msgid "the operation code name,"
msgstr "название кода операции,"

#: ../../library/dis.rst:280
msgid "operation parameters, and"
msgstr "параметры работы и"

#: ../../library/dis.rst:281
msgid "interpretation of the parameters in parentheses."
msgstr "интерпретация параметров в скобках."

#: ../../library/dis.rst:283
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""
"Интерпретация параметров распознает имена локальных и глобальных переменных, "
"значения констант, цели ветвления и операторы сравнения."

#: ../../library/dis.rst:298
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr ""
"Возвращает итератор по инструкциям в предоставленной функции, методе, строке "
"исходного кода или объекте кода."

#: ../../library/dis.rst:301
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr ""
"Итератор генерирует серию именованных кортежей :class:`Instruction`, "
"предоставляющих подробную информацию о каждой операции в предоставленном "
"коде."

#: ../../library/dis.rst:309
msgid ""
"The *show_caches* and *adaptive* parameters work as they do in :func:`dis`."
msgstr ""
"Параметры *show_caches* и *adaptive* работают так же, как и в :func:`dis`."

#: ../../library/dis.rst:319
msgid ""
"This generator function uses the :meth:`~codeobject.co_lines` method of the :"
"ref:`code object <code-objects>` *code* to find the offsets which are starts "
"of lines in the source code.  They are generated as ``(offset, lineno)`` "
"pairs."
msgstr ""
"Эта функция-генератор использует метод :meth:`~codeobject.co_lines` объекта :"
"ref:`code <code-objects>` *code* для поиска смещений, которые являются "
"началом строк в исходном коде. Они генерируются как пары ``(offset, "
"lineno)``."

#: ../../library/dis.rst:324
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr "Номера строк могут уменьшаться. Раньше они всегда увеличивались."

#: ../../library/dis.rst:327
msgid ""
"The :pep:`626` :meth:`~codeobject.co_lines` method is used instead of the :"
"attr:`~codeobject.co_firstlineno` and :attr:`~codeobject.co_lnotab` "
"attributes of the :ref:`code object <code-objects>`."
msgstr ""
"Метод :pep:`626` :meth:`~codeobject.co_lines` используется вместо атрибутов :"
"attr:`~codeobject.co_firstlineno` и :attr:`~codeobject.co_lnotab` объекта :"
"ref:`code. <объекты кода>`."

#: ../../library/dis.rst:335
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump "
"targets, and return a list of these offsets."
msgstr ""
"Обнаруживает все смещения в необработанной скомпилированной строке байт-кода "
"*code*, которые являются целями перехода, и возвращает список этих смещений."

#: ../../library/dis.rst:341
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "Вычислите эффект стека *opcode* с аргументом *oparg*."

#: ../../library/dis.rst:343
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default), "
"it will return the maximal stack effect of both cases."
msgstr ""
"Если в коде есть цель перехода и *jump* имеет значение True, :func:"
"`~stack_effect` вернет эффект стека прыжка. Если *jump* имеет значение "
"«False», он вернет эффект стека отсутствия прыжка. А если *jump* имеет "
"значение «None» (по умолчанию), он вернет максимальный эффект стека в обоих "
"случаях."

#: ../../library/dis.rst:350
msgid "Added *jump* parameter."
msgstr "Добавлен параметр *jump*."

#: ../../library/dis.rst:357
msgid "Python Bytecode Instructions"
msgstr "Инструкции по байт-коду Python"

#: ../../library/dis.rst:359
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
"Функция :func:`get_instructions` и класс :class:`Bytecode` предоставляют "
"подробную информацию об инструкциях байт-кода в виде экземпляров :class:"
"`Instruction`:"

#: ../../library/dis.rst:364
msgid "Details for a bytecode operation"
msgstr "Подробности операции с байт-кодом"

#: ../../library/dis.rst:368
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr ""
"числовой код для операции, соответствующий значениям кода операции, "
"перечисленным ниже, и значениям байт-кода в :ref:`opcode_collections`."

#: ../../library/dis.rst:374
msgid "human readable name for operation"
msgstr "удобочитаемое название операции"

#: ../../library/dis.rst:379
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr "числовой аргумент операции (если есть), в противном случае ``None``"

#: ../../library/dis.rst:384
msgid "resolved arg value (if any), otherwise ``None``"
msgstr ""
"разрешенное значение аргумента (если есть), в противном случае ``None``"

#: ../../library/dis.rst:389
msgid ""
"human readable description of operation argument (if any), otherwise an "
"empty string."
msgstr ""
"Удобочитаемое описание аргумента операции (если есть), в противном случае — "
"пустая строка."

#: ../../library/dis.rst:395
msgid "start index of operation within bytecode sequence"
msgstr "начальный индекс операции в последовательности байт-кода"

#: ../../library/dis.rst:400
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr ""
"строка, начинающаяся с этого кода операции (если есть), в противном случае "
"``Нет``"

#: ../../library/dis.rst:405
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "``True``, если сюда переходит другой код, иначе ``False``"

#: ../../library/dis.rst:410
msgid ""
":class:`dis.Positions` object holding the start and end locations that are "
"covered by this instruction."
msgstr ""
"индекс байт-кода цели перехода, если это операция перехода, в противном "
"случае ``None``"

#: ../../library/dis.rst:417
msgid "Field ``positions`` is added."
msgstr "Добавлено поле ``positions``."

#: ../../library/dis.rst:422
msgid ""
"In case the information is not available, some fields might be ``None``."
msgstr "Если информация недоступна, некоторые поля могут иметь значение «Нет»."

#: ../../library/dis.rst:432
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr ""
"Компилятор Python в настоящее время генерирует следующие инструкции байт-"
"кода."

#: ../../library/dis.rst:435
msgid "**General instructions**"
msgstr "**Общие инструкции**"

#: ../../library/dis.rst:437
msgid ""
"In the following, We will refer to the interpreter stack as ``STACK`` and "
"describe operations on it as if it was a Python list. The top of the stack "
"corresponds to ``STACK[-1]`` in this language."
msgstr ""
"Далее мы будем называть стек интерпретатора STACK и описывать операции над "
"ним, как если бы это был список Python. Вершина стека соответствует "
"STACK[-1] на этом языке."

#: ../../library/dis.rst:443
msgid ""
"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to "
"generate line tracing events."
msgstr ""
"Ничего не делайте, кодируйте. Используется в качестве заполнителя "
"оптимизатором байт-кода и для генерации событий трассировки строк."

#: ../../library/dis.rst:449
msgid "Removes the top-of-stack item::"
msgstr "Удаляет элемент вершины стека::"

#: ../../library/dis.rst:451
msgid "STACK.pop()"
msgstr "STACK.pop()"

#: ../../library/dis.rst:456
msgid ""
"Removes the top two values from the stack. Equivalent to ``POP_TOP``; "
"``POP_TOP``. Used to clean up at the end of loops, hence the name."
msgstr ""
"Удаляет два верхних значения из стека. Эквивалент ``POP_TOP``; ``POP_TOP``. "
"Используется для очистки в конце циклов, отсюда и название."

#: ../../library/dis.rst:465
msgid "Implements ``del STACK[-2]``. Used to clean up when a generator exits."
msgstr ""
"Реализует del STACK[-2]``. Используется для очистки при выходе генератора."

#: ../../library/dis.rst:473
msgid ""
"Push the i-th item to the top of the stack without removing it from its "
"original location::"
msgstr ""
"Переместите i-й элемент на вершину стека, не удаляя его с исходного места::"

#: ../../library/dis.rst:476
msgid ""
"assert i > 0\n"
"STACK.append(STACK[-i])"
msgstr ""
"assert i > 0\n"
"STACK.append(STACK[-i])"

#: ../../library/dis.rst:484
msgid "Swap the top of the stack with the i-th element::"
msgstr "Поменяйте местами вершину стека с i-м элементом::"

#: ../../library/dis.rst:486
msgid "STACK[-i], STACK[-1] = STACK[-1], STACK[-i]"
msgstr "STACK[-i], STACK[-1] = STACK[-1], STACK[-i]"

#: ../../library/dis.rst:493
msgid ""
"Rather than being an actual instruction, this opcode is used to mark extra "
"space for the interpreter to cache useful data directly in the bytecode "
"itself. It is automatically hidden by all ``dis`` utilities, but can be "
"viewed with ``show_caches=True``."
msgstr ""
"Вместо того, чтобы быть реальной инструкцией, этот код операции используется "
"для обозначения дополнительного места, которое интерпретатор может "
"кэшировать полезные данные непосредственно в самом байт-коде. Он "
"автоматически скрывается всеми утилитами dis, но его можно просмотреть с "
"помощью show_caches=True."

#: ../../library/dis.rst:498
msgid ""
"Logically, this space is part of the preceding instruction. Many opcodes "
"expect to be followed by an exact number of caches, and will instruct the "
"interpreter to skip over them at runtime."
msgstr ""
"Логически это пространство является частью предыдущей инструкции. Многие "
"коды операций ожидают, что за ними последует точное количество кэшей, и "
"интерпретатору будет дано указание пропустить их во время выполнения."

#: ../../library/dis.rst:502
msgid ""
"Populated caches can look like arbitrary instructions, so great care should "
"be taken when reading or modifying raw, adaptive bytecode containing "
"quickened data."
msgstr ""
"Заполненные кэши могут выглядеть как произвольные инструкции, поэтому "
"следует проявлять особую осторожность при чтении или изменении "
"необработанного адаптивного байт-кода, содержащего ускоренные данные."

#: ../../library/dis.rst:509
msgid "**Unary operations**"
msgstr "**Унарные операции**"

#: ../../library/dis.rst:511
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""
"Унарные операции занимают верхнюю часть стека, применяют операцию и помещают "
"результат обратно в стек."

#: ../../library/dis.rst:517
msgid "Implements ``STACK[-1] = -STACK[-1]``."
msgstr "Реализует ``STACK[-1] = -STACK[-1]``."

#: ../../library/dis.rst:522
msgid "Implements ``STACK[-1] = not STACK[-1]``."
msgstr "Реализует ``STACK[-1] = не STACK[-1]``."

#: ../../library/dis.rst:527
msgid "Implements ``STACK[-1] = ~STACK[-1]``."
msgstr "Реализует ``STACK[-1] = ~STACK[-1]``."

#: ../../library/dis.rst:532
msgid "Implements ``STACK[-1] = iter(STACK[-1])``."
msgstr "Реализует ``STACK[-1] = iter(STACK[-1])``."

#: ../../library/dis.rst:537
msgid ""
"If ``STACK[-1]`` is a :term:`generator iterator` or :term:`coroutine` object "
"it is left as is.  Otherwise, implements ``STACK[-1] = iter(STACK[-1])``."
msgstr ""
"Если ``STACK[-1]`` является объектом :term:`генератора-итератора` или :term:"
"`coroutine`, он остается как есть. В противном случае реализуется "
"``STACK[-1] = iter(STACK[-1])``."

#: ../../library/dis.rst:543
msgid "**Binary and in-place operations**"
msgstr "**Двоичные и локальные операции**"

#: ../../library/dis.rst:545
msgid ""
"Binary operations remove the top two items from the stack (``STACK[-1]`` and "
"``STACK[-2]``). They perform the operation, then put the result back on the "
"stack."
msgstr ""
"Бинарные операции удаляют два верхних элемента из стека (``STACK[-1]`` и "
"``STACK[-2]``. Они выполняют операцию, а затем помещают результат обратно в "
"стек."

#: ../../library/dis.rst:548
msgid ""
"In-place operations are like binary operations, but the operation is done in-"
"place when ``STACK[-2]`` supports it, and the resulting ``STACK[-1]`` may be "
"(but does not have to be) the original ``STACK[-2]``."
msgstr ""
"Операции на месте подобны бинарным операциям, но операция выполняется на "
"месте, если STACK[-2]`` поддерживает ее, и результирующий STACK[-1]`` может "
"(но не обязательно) быть) исходный ``STACK[-2]``."

#: ../../library/dis.rst:555
msgid ""
"Implements the binary and in-place operators (depending on the value of "
"*op*)::"
msgstr ""
"Реализует бинарные операторы и операторы на месте (в зависимости от значения "
"*op*)::"

#: ../../library/dis.rst:558
msgid ""
"rhs = STACK.pop()\n"
"lhs = STACK.pop()\n"
"STACK.append(lhs op rhs)"
msgstr ""
"rhs = STACK.pop()\n"
"lhs = STACK.pop()\n"
"STACK.append(lhs op rhs)"

#: ../../library/dis.rst:567 ../../library/dis.rst:576
#: ../../library/dis.rst:586 ../../library/dis.rst:594
#: ../../library/dis.rst:606 ../../library/dis.rst:694
#: ../../library/dis.rst:704 ../../library/dis.rst:714
#: ../../library/dis.rst:935 ../../library/dis.rst:946
#: ../../library/dis.rst:1050 ../../library/dis.rst:1062
#: ../../library/dis.rst:1074
msgid "Implements::"
msgstr "Реализует::"

#: ../../library/dis.rst:569
msgid ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[key])"
msgstr ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[key])"

#: ../../library/dis.rst:578
msgid ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"value = STACK.pop()\n"
"container[key] = value"
msgstr ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"value = STACK.pop()\n"
"container[key] = value"

#: ../../library/dis.rst:588
msgid ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"del container[key]"
msgstr ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"del container[key]"

#: ../../library/dis.rst:596
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[start:end])"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[start:end])"

#: ../../library/dis.rst:608
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"values = STACK.pop()\n"
"container[start:end] = value"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"values = STACK.pop()\n"
"container[start:end] = value"

#: ../../library/dis.rst:617
msgid "**Coroutine opcodes**"
msgstr "**Коды операций сопрограммы**"

#: ../../library/dis.rst:621
msgid ""
"Implements ``STACK[-1] = get_awaitable(STACK[-1])``, where "
"``get_awaitable(o)`` returns ``o`` if ``o`` is a coroutine object or a "
"generator object with the :data:`~inspect.CO_ITERABLE_COROUTINE` flag, or "
"resolves ``o.__await__``."
msgstr ""
"Реализует ``STACK[-1] = get_awaitable(STACK[-1])``, где ``get_awaitable(o)`` "
"возвращает ``o``, если ``o`` является объектом сопрограммы или объектом-"
"генератором с флаг :data:`~inspect.CO_ITERABLE_COROUTINE` или разрешает ``o."
"__await__``."

#: ../../library/dis.rst:626
msgid ""
"If the ``where`` operand is nonzero, it indicates where the instruction "
"occurs:"
msgstr ""
"Если операнд ``where`` не равен нулю, он указывает, где происходит "
"выполнение инструкции:"

#: ../../library/dis.rst:629
msgid "``1``: After a call to ``__aenter__``"
msgstr "``1``: После вызова ``__aenter__``"

#: ../../library/dis.rst:630
msgid "``2``: After a call to ``__aexit__``"
msgstr "``2``: После вызова ``__aexit__``"

#: ../../library/dis.rst:634
msgid "Previously, this instruction did not have an oparg."
msgstr "Раньше эта инструкция не имела oparg."

#: ../../library/dis.rst:640
msgid "Implements ``STACK[-1] = STACK[-1].__aiter__()``."
msgstr "Реализует ``STACK[-1] = STACK[-1].__aiter__()``."

#: ../../library/dis.rst:643
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "Возврат ожидаемых объектов из ``__aiter__`` больше не поддерживается."

#: ../../library/dis.rst:650
msgid ""
"Implement ``STACK.append(get_awaitable(STACK[-1].__anext__()))`` to the "
"stack. See ``GET_AWAITABLE`` for details about ``get_awaitable``."
msgstr ""
"Внедрите ``STACK.append(get_awaitable(STACK[-1].__anext__()))`` в стек. См. "
"GET_AWAITABLE для получения подробной информации о get_awaitable."

#: ../../library/dis.rst:658
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item. The stack contains the async iterable in ``STACK[-2]`` "
"and the raised exception in ``STACK[-1]``. Both are popped. If the exception "
"is not :exc:`StopAsyncIteration`, it is re-raised."
msgstr ""
"Завершает цикл :keyword:`async for`. Обрабатывает исключение, возникающее "
"при ожидании следующего элемента. Стек содержит асинхронную итерацию в "
"``STACK[-2]`` и возникшее исключение в ``STACK[-1]``. Оба лопнули. Если "
"исключение не :exc:`StopAsyncIteration`, оно возбуждается повторно."

#: ../../library/dis.rst:665 ../../library/dis.rst:770
#: ../../library/dis.rst:781
msgid ""
"Exception representation on the stack now consist of one, not three, items."
msgstr ""
"Представление исключений в стеке теперь состоит из одного, а не трех "
"элементов."

#: ../../library/dis.rst:671
msgid ""
"Handles an exception raised during a :meth:`~generator.throw` or :meth:"
"`~generator.close` call through the current frame.  If ``STACK[-1]`` is an "
"instance of :exc:`StopIteration`, pop three values from the stack and push "
"its ``value`` member.  Otherwise, re-raise ``STACK[-1]``."
msgstr ""
"Обрабатывает исключение, возникающее во время вызова :meth:`~generator."
"throw` или :meth:`~generator.close` в текущем кадре. Если ``STACK[-1]`` "
"является экземпляром :exc:`StopIteration`, извлеките три значения из стека и "
"поместите его член ``value``. В противном случае повторно поднимите "
"``STACK[-1]``."

#: ../../library/dis.rst:681
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from ``STACK[-1]``. Pushes "
"``__aexit__`` and result of ``__aenter__()`` to the stack::"
msgstr ""
"Разрешает ``__aenter__`` и ``__aexit__`` из ``STACK[-1]``. Помещает "
"``__aexit__`` и результат ``__aenter__()`` в стек::"

#: ../../library/dis.rst:684
msgid "STACK.extend((__aexit__, __aenter__())"
msgstr "STACK.extend((__aexit__, __aenter__())"

#: ../../library/dis.rst:690
msgid "**Miscellaneous opcodes**"
msgstr "**Различные коды операций**."

#: ../../library/dis.rst:696
msgid ""
"item = STACK.pop()\n"
"set.add(STACK[-i], item)"
msgstr ""
"item = STACK.pop()\n"
"set.add(STACK[-i], item)"

#: ../../library/dis.rst:699
msgid "Used to implement set comprehensions."
msgstr "Используется для реализации понимания множеств."

#: ../../library/dis.rst:706
msgid ""
"item = STACK.pop()\n"
"list.append(STACK[-i], item)"
msgstr ""
"item = STACK.pop()\n"
"list.append(STACK[-i], item)"

#: ../../library/dis.rst:709
msgid "Used to implement list comprehensions."
msgstr "Используется для реализации понимания списков."

#: ../../library/dis.rst:716
msgid ""
"value = STACK.pop()\n"
"key = STACK.pop()\n"
"dict.__setitem__(STACK[-i], key, value)"
msgstr ""
"value = STACK.pop()\n"
"key = STACK.pop()\n"
"dict.__setitem__(STACK[-i], key, value)"

#: ../../library/dis.rst:720
msgid "Used to implement dict comprehensions."
msgstr "Используется для реализации понимания dict."

#: ../../library/dis.rst:723
msgid ""
"Map value is ``STACK[-1]`` and map key is ``STACK[-2]``. Before, those were "
"reversed."
msgstr ""
"Значение карты — STACK[-1]``, а ключ карты — STACK[-2]``. Раньше они были "
"обратными."

#: ../../library/dis.rst:727
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:"
"`MAP_ADD` instructions, while the added value or key/value pair is popped "
"off, the container object remains on the stack so that it is available for "
"further iterations of the loop."
msgstr ""
"Для всех инструкций :opcode:`SET_ADD`, :opcode:`LIST_APPEND` и :opcode:"
"`MAP_ADD`, пока добавленное значение или пара ключ/значение извлекается, "
"объект-контейнер остается в стеке, так что он доступен для дальнейших "
"итераций цикла."

#: ../../library/dis.rst:735
msgid "Returns with ``STACK[-1]`` to the caller of the function."
msgstr "Возвращается с STACK[-1]`` вызвавшему функцию."

#: ../../library/dis.rst:740
msgid "Returns with ``co_consts[consti]`` to the caller of the function."
msgstr "Возвращается с ``co_consts[consti]`` вызвавшему функцию."

#: ../../library/dis.rst:747
msgid "Yields ``STACK.pop()`` from a :term:`generator`."
msgstr "Возвращает ``STACK.pop()`` из :term:`генератора`."

#: ../../library/dis.rst:749
msgid "oparg set to be the stack depth."
msgstr "oparg установлен как глубина стека."

#: ../../library/dis.rst:752
msgid ""
"oparg set to be the exception block depth, for efficient closing of "
"generators."
msgstr ""
"oparg установлен как глубина блока исключений для эффективного закрытия "
"генераторов."

#: ../../library/dis.rst:758
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"Проверяет, определено ли ``__annotations__`` в ``locals()``, если нет, то "
"устанавливается пустой ``dict``. Этот код операции генерируется только в том "
"случае, если тело класса или модуля содержит :term:`variable annotations "
"<variable annotation>` статически."

#: ../../library/dis.rst:768
msgid ""
"Pops a value from the stack, which is used to restore the exception state."
msgstr ""
"Извлекает значение из стека, которое используется для восстановления "
"состояния исключения."

#: ../../library/dis.rst:775
msgid ""
"Re-raises the exception currently on top of the stack. If oparg is non-zero, "
"pops an additional value from the stack which is used to set :attr:`~frame."
"f_lasti` of the current frame."
msgstr ""
"Повторно вызывает исключение, находящееся в данный момент на вершине стека. "
"Если oparg ненулевое, извлекает дополнительное значение из стека, которое "
"используется для установки :attr:`~frame.f_lasti` текущего кадра."

#: ../../library/dis.rst:786
msgid ""
"Pops a value from the stack. Pushes the current exception to the top of the "
"stack. Pushes the value originally popped back to the stack. Used in "
"exception handlers."
msgstr ""
"Извлекает значение из стека. Помещает текущее исключение в начало стека. "
"Помещает первоначально полученное значение обратно в стек. Используется в "
"обработчиках исключений."

#: ../../library/dis.rst:794
msgid ""
"Performs exception matching for ``except``. Tests whether the ``STACK[-2]`` "
"is an exception matching ``STACK[-1]``. Pops ``STACK[-1]`` and pushes the "
"boolean result of the test."
msgstr ""
"Выполняет сопоставление исключений для ``кроме``. Проверяет, является ли "
"STACK[-2]`` исключением, соответствующим ``STACK[-1]``. Вызывает "
"``STACK[-1]`` и отправляет логический результат теста."

#: ../../library/dis.rst:802
msgid ""
"Performs exception matching for ``except*``. Applies ``split(STACK[-1])`` on "
"the exception group representing ``STACK[-2]``."
msgstr ""
"Выполняет сопоставление исключений для ``кроме*``. Применяет "
"``split(STACK[-1])`` к группе исключений, представляющей ``STACK[-2]``."

#: ../../library/dis.rst:805
msgid ""
"In case of a match, pops two items from the stack and pushes the non-"
"matching subgroup (``None`` in case of full match) followed by the matching "
"subgroup. When there is no match, pops one item (the match type) and pushes "
"``None``."
msgstr ""
"В случае совпадения извлекает два элемента из стека и помещает несовпадающую "
"подгруппу («Нет» в случае полного совпадения), за которой следует "
"совпадающая подгруппа. Если совпадения нет, извлекается один элемент (тип "
"соответствия) и нажимается «Нет»."

#: ../../library/dis.rst:814
msgid ""
"Calls the function in position 4 on the stack with arguments (type, val, tb) "
"representing the exception at the top of the stack. Used to implement the "
"call ``context_manager.__exit__(*exc_info())`` when an exception has "
"occurred in a :keyword:`with` statement."
msgstr ""
"Вызывает функцию в позиции 4 в стеке с аргументами (type, val, tb), "
"представляющими исключение в верхней части стека. Используется для "
"реализации вызова ``context_manager.__exit__(*exc_info())``, когда в "
"операторе :keyword:`with` произошло исключение."

#: ../../library/dis.rst:821
msgid ""
"The ``__exit__`` function is in position 4 of the stack rather than 7. "
"Exception representation on the stack now consist of one, not three, items."
msgstr ""
"Функция ``__exit__`` находится в позиции 4 стека, а не 7. Представление "
"исключений в стеке теперь состоит из одного, а не трех элементов."

#: ../../library/dis.rst:828
msgid ""
"Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert` "
"statement."
msgstr ""
"Помещает :exc:`AssertionError` в стек. Используется оператором :keyword:"
"`assert`."

#: ../../library/dis.rst:836
msgid ""
"Pushes :func:`!builtins.__build_class__` onto the stack.  It is later called "
"to construct a class."
msgstr ""
"Помещает :func:`!builtins.__build_class__` в стек. Позже он вызывается для "
"создания класса."

#: ../../library/dis.rst:842
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_EXCEPT_START`.  Then, :meth:"
"`~object.__enter__` is called. Finally, the result of calling the "
"``__enter__()`` method is pushed onto the stack."
msgstr ""
"Этот код операции выполняет несколько операций перед началом блока with. "
"Сначала он загружает :meth:`~object.__exit__` из контекстного менеджера и "
"помещает его в стек для последующего использования :opcode:"
"`WITH_EXCEPT_START`. Затем вызывается :meth:`~object.__enter__`. Наконец, "
"результат вызова метода ``__enter__()`` помещается в стек."

#: ../../library/dis.rst:853
msgid ""
"Perform ``STACK.append(len(STACK[-1]))``. Used in :keyword:`match` "
"statements where comparison with structure of pattern is needed."
msgstr ""
"Выполните ``STACK.append(len(STACK[-1]))``. Используется в операторах :"
"keyword:`match`, где необходимо сравнение со структурой шаблона."

#: ../../library/dis.rst:861
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Mapping` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_MAPPING` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"Если ``STACK[-1]`` является экземпляром :class:`collections.abc.Mapping` "
"(или, более технически: если в его :c:member установлен флаг :c:macro:"
"`Py_TPFLAGS_MAPPING`` :`~PyTypeObject.tp_flags`), поместите ``True`` в стек. "
"В противном случае нажмите «False»."

#: ../../library/dis.rst:871
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Sequence` and is "
"*not* an instance of :class:`str`/:class:`bytes`/:class:`bytearray` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_SEQUENCE` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"Если ``STACK[-1]`` является экземпляром :class:`collections.abc.Sequence` и "
"*не* является экземпляром :class:`str`/:class:`bytes`/:class:` bytearray` "
"(или, более технически: если в его :c:member:`~PyTypeObject.tp_flags` "
"установлен флаг :c:macro:`Py_TPFLAGS_SEQUENCE`), поместите ``True`` в стек. "
"В противном случае нажмите «False»."

#: ../../library/dis.rst:881
msgid ""
"``STACK[-1]`` is a tuple of mapping keys, and ``STACK[-2]`` is the match "
"subject. If ``STACK[-2]`` contains all of the keys in ``STACK[-1]``, push a :"
"class:`tuple` containing the corresponding values. Otherwise, push ``None``."
msgstr ""
"``STACK[-1]`` — это кортеж ключей сопоставления, а ``STACK[-2]`` — это "
"объект сопоставления. Если ``STACK[-2]`` содержит все ключи из "
"``STACK[-1]``, отправьте :class:`tuple`, содержащий соответствующие "
"значения. В противном случае нажмите «Нет»."

#: ../../library/dis.rst:887 ../../library/dis.rst:1521
msgid ""
"Previously, this instruction also pushed a boolean value indicating success "
"(``True``) or failure (``False``)."
msgstr ""
"Ранее эта инструкция также передала логическое значение, указывающее успех "
"(«True») или неудачу («False»)."

#: ../../library/dis.rst:894
msgid ""
"Implements ``name = STACK.pop()``. *namei* is the index of *name* in the "
"attribute :attr:`~codeobject.co_names` of the :ref:`code object <code-"
"objects>`. The compiler tries to use :opcode:`STORE_FAST` or :opcode:"
"`STORE_GLOBAL` if possible."
msgstr ""
"Реализует ``name = STACK.pop()``. *namei* — это индекс *name* в атрибуте :"
"attr:`~codeobject.co_names` :ref:`объекта кода <code-objects>`. Компилятор "
"пытается использовать :opcode:`STORE_FAST` или :opcode:`STORE_GLOBAL`, если "
"это возможно."

#: ../../library/dis.rst:901
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`~codeobject."
"co_names` attribute of the :ref:`code object <code-objects>`."
msgstr ""
"Реализует ``del name``, где *namei* — индекс атрибута :attr:`~codeobject."
"co_names` объекта :ref:`code <code-objects>`."

#: ../../library/dis.rst:907
msgid ""
"Unpacks ``STACK[-1]`` into *count* individual values, which are put onto the "
"stack right-to-left. Require there to be exactly *count* values.::"
msgstr ""
"Распаковывает ``STACK[-1]`` в *count* отдельные значения, которые помещаются "
"в стек справа налево. Требовать, чтобы было ровно *count* значений.::"

#: ../../library/dis.rst:910
msgid ""
"assert(len(STACK[-1]) == count)\n"
"STACK.extend(STACK.pop()[:-count-1:-1])"
msgstr ""
"assert(len(STACK[-1]) == count)\n"
"STACK.extend(STACK.pop()[:-count-1:-1])"

#: ../../library/dis.rst:916
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in "
"``STACK[-1]`` into individual values, where the total number of values can "
"be smaller than the number of items in the iterable: one of the new values "
"will be a list of all leftover items."
msgstr ""
"Реализует присвоение со звездочкой: распаковывает итерируемый объект в "
"STACK[-1]`` на отдельные значения, где общее количество значений может быть "
"меньше количества элементов в итерируемом: одно из новых значений будет "
"список всех остатков."

#: ../../library/dis.rst:921
msgid "The number of values before and after the list value is limited to 255."
msgstr "Количество значений до и после значения списка ограничено 255."

#: ../../library/dis.rst:923
msgid ""
"The number of values before the list value is encoded in the argument of the "
"opcode. The number of values after the list if any is encoded using an "
"``EXTENDED_ARG``. As a consequence, the argument can be seen as a two bytes "
"values where the low byte of *counts* is the number of values before the "
"list value, the high byte of *counts* the number of values after it."
msgstr ""
"Количество значений перед значением списка закодировано в аргументе кода "
"операции. Количество значений после списка, если таковые имеются, кодируется "
"с использованием EXTENDED_ARG. Как следствие, аргумент можно рассматривать "
"как двухбайтовое значение, где младший байт *counts* — это количество "
"значений до значения списка, а старший байт *counts* — количество значений "
"после него."

#: ../../library/dis.rst:929
msgid ""
"The extracted values are put onto the stack right-to-left, i.e. ``a, *b, c = "
"d`` will be stored after execution as ``STACK.extend((a, b, c))``."
msgstr ""
"Извлеченные значения помещаются в стек справа налево, т.е. ``a, *b, c = d`` "
"будут сохранены после выполнения как ``STACK.extend((a, b, c))``."

#: ../../library/dis.rst:937
msgid ""
"obj = STACK.pop()\n"
"value = STACK.pop()\n"
"obj.name = value"
msgstr ""
"obj = STACK.pop()\n"
"value = STACK.pop()\n"
"obj.name = value"

#: ../../library/dis.rst:941
msgid ""
"where *namei* is the index of name in :attr:`~codeobject.co_names` of the :"
"ref:`code object <code-objects>`."
msgstr ""
"где *namei* — индекс имени в :attr:`~codeobject.co_names` :ref:`кодового "
"объекта <code-objects>`."

#: ../../library/dis.rst:948
msgid ""
"obj = STACK.pop()\n"
"del obj.name"
msgstr ""
"obj = STACK.pop()\n"
"del obj.name"

#: ../../library/dis.rst:951
msgid ""
"where *namei* is the index of name into :attr:`~codeobject.co_names` of the :"
"ref:`code object <code-objects>`."
msgstr ""
"где *namei* — индекс имени в :attr:`~codeobject.co_names` :ref:`кодового "
"объекта <code-objects>`."

#: ../../library/dis.rst:957
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr "Работает как :opcode:`STORE_NAME`, но имя сохраняется как глобальное."

#: ../../library/dis.rst:962
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "Работает как :opcode:`DELETE_NAME`, но удаляет глобальное имя."

#: ../../library/dis.rst:967
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "Помещает ``co_consts[consti]`` в стек."

#: ../../library/dis.rst:972
msgid ""
"Pushes the value associated with ``co_names[namei]`` onto the stack. The "
"name is looked up within the locals, then the globals, then the builtins."
msgstr ""
"Помещает значение, связанное с ``co_names[namei]``, в стек. Имя ищется в "
"локальных переменных, затем в глобальных, а затем во встроенных."

#: ../../library/dis.rst:978
msgid ""
"Pushes a reference to the locals dictionary onto the stack.  This is used to "
"prepare namespace dictionaries for :opcode:`LOAD_FROM_DICT_OR_DEREF` and :"
"opcode:`LOAD_FROM_DICT_OR_GLOBALS`."
msgstr ""
"Помещает ссылку на локальный словарь в стек. Это используется для подготовки "
"словарей пространства имен для :opcode:`LOAD_FROM_DICT_OR_DEREF` и :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`."

#: ../../library/dis.rst:987
msgid ""
"Pops a mapping off the stack and looks up the value for ``co_names[namei]``. "
"If the name is not found there, looks it up in the globals and then the "
"builtins, similar to :opcode:`LOAD_GLOBAL`. This is used for loading global "
"variables in :ref:`annotation scopes <annotation-scopes>` within class "
"bodies."
msgstr ""
"Извлекает отображение из стека и ищет значение для ``co_names[namei]``. Если "
"имя там не найдено, ищет его в глобальных переменных, а затем во встроенных, "
"аналогично :opcode:`LOAD_GLOBAL`. Это используется для загрузки глобальных "
"переменных в :ref:`областях аннотаций <annotation-scopes>` внутри тел "
"классов."

#: ../../library/dis.rst:998
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack::"
msgstr ""
"Создает кортеж, потребляющий элементы *count* из стека, и помещает "
"полученный кортеж в стек::"

#: ../../library/dis.rst:1001
msgid ""
"if count == 0:\n"
"    value = ()\n"
"else:\n"
"    value = tuple(STACK[-count:])\n"
"    STACK = STACK[:-count]\n"
"\n"
"STACK.append(value)"
msgstr ""
"if count == 0:\n"
"    value = ()\n"
"else:\n"
"    value = tuple(STACK[-count:])\n"
"    STACK = STACK[:-count]\n"
"\n"
"STACK.append(value)"

#: ../../library/dis.rst:1012
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr "Работает как :opcode:`BUILD_TUPLE`, но создает список."

#: ../../library/dis.rst:1017
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr "Работает как :opcode:`BUILD_TUPLE`, но создает набор."

#: ../../library/dis.rst:1022
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., STACK[-4]: STACK[-3], "
"STACK[-2]: STACK[-1]}``."
msgstr ""
"Помещает новый объект словаря в стек. Извлекает элементы ``2 * count``, "
"чтобы словарь содержал записи *count*: ``{..., STACK[-4]: STACK[-3], "
"STACK[-2]: STACK[-1]} ``."

#: ../../library/dis.rst:1026
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr ""
"Словарь создается из элементов стека, а не из пустого словаря, размер "
"которого предварительно рассчитан на хранение элементов *count*."

#: ../../library/dis.rst:1033
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``STACK[-2]``, pops *count* values to form values in the built dictionary."
msgstr ""
"Версия :opcode:`BUILD_MAP` специализирована для постоянных ключей. Извлекает "
"верхний элемент стека, который содержит кортеж ключей, затем, начиная со "
"STACK[-2]``, извлекает значения *count* для формирования значений во "
"встроенном словаре."

#: ../../library/dis.rst:1042
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr ""
"Объединяет *count* строки из стека и помещает полученную строку в стек."

#: ../../library/dis.rst:1052
msgid ""
"seq = STACK.pop()\n"
"list.extend(STACK[-i], seq)"
msgstr ""
"seq = STACK.pop()\n"
"list.extend(STACK[-i], seq)"

#: ../../library/dis.rst:1055
msgid "Used to build lists."
msgstr "Используется для построения списков."

#: ../../library/dis.rst:1064
msgid ""
"seq = STACK.pop()\n"
"set.update(STACK[-i], seq)"
msgstr ""
"seq = STACK.pop()\n"
"set.update(STACK[-i], seq)"

#: ../../library/dis.rst:1067
msgid "Used to build sets."
msgstr "Используется для создания наборов."

#: ../../library/dis.rst:1076
msgid ""
"map = STACK.pop()\n"
"dict.update(STACK[-i], map)"
msgstr ""
"map = STACK.pop()\n"
"dict.update(STACK[-i], map)"

#: ../../library/dis.rst:1079
msgid "Used to build dicts."
msgstr "Используется для построения диктов."

#: ../../library/dis.rst:1086
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr ""
"Как :opcode:`DICT_UPDATE`, но вызывает исключение для дубликатов ключей."

#: ../../library/dis.rst:1093
msgid ""
"If the low bit of ``namei`` is not set, this replaces ``STACK[-1]`` with "
"``getattr(STACK[-1], co_names[namei>>1])``."
msgstr ""
"Если младший бит ``namei`` не установлен, ``STACK[-1]`` заменяется на "
"``getattr(STACK[-1], co_names[namei>>1])``."

#: ../../library/dis.rst:1096
msgid ""
"If the low bit of ``namei`` is set, this will attempt to load a method named "
"``co_names[namei>>1]`` from the ``STACK[-1]`` object. ``STACK[-1]`` is "
"popped. This bytecode distinguishes two cases: if ``STACK[-1]`` has a method "
"with the correct name, the bytecode pushes the unbound method and "
"``STACK[-1]``. ``STACK[-1]`` will be used as the first argument (``self``) "
"by :opcode:`CALL` when calling the unbound method. Otherwise, ``NULL`` and "
"the object returned by the attribute lookup are pushed."
msgstr ""
"Если установлен младший бит ``namei``, будет предпринята попытка загрузить "
"метод с именем ``co_names[namei>>1]`` из объекта ``STACK[-1]``. "
"``STACK[-1]`` извлекается. Этот байт-код различает два случая: если "
"``STACK[-1]`` имеет метод с правильным именем, байт-код отправляет "
"несвязанный метод и ``STACK[-1]``. ``STACK[-1]`` будет использоваться в "
"качестве первого аргумента (``self``) :opcode:`CALL` при вызове несвязанного "
"метода. В противном случае помещаются ``NULL`` и объект, возвращаемый "
"поиском атрибута."

#: ../../library/dis.rst:1104
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` or ``self`` is pushed to "
"the stack before the attribute or unbound method respectively."
msgstr ""
"Если установлен младший бит ``namei``, то ``NULL`` или ``self`` помещаются в "
"стек перед атрибутом или несвязанным методом соответственно."

#: ../../library/dis.rst:1111
msgid ""
"This opcode implements :func:`super`, both in its zero-argument and two-"
"argument forms (e.g. ``super().method()``, ``super().attr`` and ``super(cls, "
"self).method()``, ``super(cls, self).attr``)."
msgstr ""
"Этот код операции реализует :func:`super`, как в форме с нулевым аргументом, "
"так и в форме с двумя аргументами (например, ``super().method()``, ``super()."
"attr`` и ``super(cls , self).method()``, ``super(cls, self).attr``)."

#: ../../library/dis.rst:1115
msgid ""
"It pops three values from the stack (from top of stack down): - ``self``: "
"the first argument to the current method -  ``cls``: the class within which "
"the current method was defined -  the global ``super``"
msgstr ""
"Он извлекает три значения из стека (сверху стека вниз): - self: первый "
"аргумент текущего метода - cls: класс, в котором был определен текущий метод "
"- глобальный аргумент супер``"

#: ../../library/dis.rst:1120
msgid ""
"With respect to its argument, it works similarly to :opcode:`LOAD_ATTR`, "
"except that ``namei`` is shifted left by 2 bits instead of 1."
msgstr ""
"Что касается аргумента, он работает аналогично :opcode:`LOAD_ATTR`, за "
"исключением того, что ``namei`` сдвигается влево на 2 бита вместо 1."

#: ../../library/dis.rst:1123
msgid ""
"The low bit of ``namei`` signals to attempt a method load, as with :opcode:"
"`LOAD_ATTR`, which results in pushing ``NULL`` and the loaded method. When "
"it is unset a single value is pushed to the stack."
msgstr ""
"Младший бит namei сигнализирует о попытке загрузки метода, как в случае с :"
"opcode:`LOAD_ATTR`, что приводит к передаче ``NULL`` и загруженного метода. "
"Когда он не установлен, в стек помещается одно значение."

#: ../../library/dis.rst:1127
msgid ""
"The second-low bit of ``namei``, if set, means that this was a two-argument "
"call to :func:`super` (unset means zero-argument)."
msgstr ""
"Второй младший бит ``namei``, если он установлен, означает, что это был "
"вызов :func:`super` с двумя аргументами (не установленный означает нулевой "
"аргумент)."

#: ../../library/dis.rst:1135
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname >> 4]``."
msgstr ""
"Выполняет логическую операцию. Имя операции можно найти в ``cmp_op[opname >> "
"4]``."

#: ../../library/dis.rst:1138
msgid ""
"The cmp_op index is now stored in the four-highest bits of oparg instead of "
"the four-lowest bits of oparg."
msgstr ""
"Индекс cmp_op теперь хранится в четырех старших битах oparg вместо четырех "
"младших битов oparg."

#: ../../library/dis.rst:1144
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr "Выполняет сравнение «есть» или «нет», если «invert» равно 1."

#: ../../library/dis.rst:1151
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr "Выполняет сравнение ``in`` или ``not in``, если ``invert`` равен 1."

#: ../../library/dis.rst:1158
msgid ""
"Imports the module ``co_names[namei]``.  ``STACK[-1]`` and ``STACK[-2]`` are "
"popped and provide the *fromlist* and *level* arguments of :func:"
"`__import__`. The module object is pushed onto the stack.  The current "
"namespace is not affected: for a proper import statement, a subsequent :"
"opcode:`STORE_FAST` instruction modifies the namespace."
msgstr ""
"Импортирует модуль ``co_names[namei]``. ``STACK[-1]`` и ``STACK[-2]`` "
"извлекаются и предоставляют аргументы *fromlist* и *level* для :func:"
"`__import__`. Объект модуля помещается в стек. Текущее пространство имен не "
"затрагивается: для правильного оператора импорта последующая инструкция :"
"opcode:`STORE_FAST` изменяет пространство имен."

#: ../../library/dis.rst:1166
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in "
"``STACK[-1]``. The resulting object is pushed onto the stack, to be "
"subsequently stored by a :opcode:`STORE_FAST` instruction."
msgstr ""
"Загружает атрибут ``co_names[namei]`` из модуля, найденного в ``STACK[-1]``. "
"Результирующий объект помещается в стек для последующего сохранения с "
"помощью инструкции :opcode:`STORE_FAST`."

#: ../../library/dis.rst:1173
msgid "Increments bytecode counter by *delta*."
msgstr "Увеличивает счетчик байт-кода на *дельту*."

#: ../../library/dis.rst:1178
msgid "Decrements bytecode counter by *delta*. Checks for interrupts."
msgstr "Уменьшает счетчик байт-кода на *delta*. Проверяет прерывания."

#: ../../library/dis.rst:1185
msgid "Decrements bytecode counter by *delta*. Does not check for interrupts."
msgstr "Уменьшает счетчик байт-кода на *delta*. Не проверяет прерывания."

#: ../../library/dis.rst:1192
msgid ""
"If ``STACK[-1]`` is true, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""
"Если ``STACK[-1]`` имеет значение true, счетчик байт-кода увеличивается на "
"*delta*. ``STACK[-1]`` извлекается."

#: ../../library/dis.rst:1195 ../../library/dis.rst:1208
msgid ""
"The oparg is now a relative delta rather than an absolute target. This "
"opcode is a pseudo-instruction, replaced in final bytecode by the directed "
"versions (forward/backward)."
msgstr ""
"Опарг теперь является относительной дельтой, а не абсолютной целью. Этот код "
"операции представляет собой псевдоинструкцию, замененную в конечном байт-"
"коде направленными версиями (вперед/назад)."

#: ../../library/dis.rst:1200 ../../library/dis.rst:1213
#: ../../library/dis.rst:1226 ../../library/dis.rst:1240
msgid "This is no longer a pseudo-instruction."
msgstr "Это уже не псевдоинструкция."

#: ../../library/dis.rst:1205
msgid ""
"If ``STACK[-1]`` is false, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""
"Если ``STACK[-1]`` имеет значение false, счетчик байт-кода увеличивается на "
"*delta*. ``STACK[-1]`` извлекается."

#: ../../library/dis.rst:1218
msgid ""
"If ``STACK[-1]`` is not ``None``, increments the bytecode counter by "
"*delta*. ``STACK[-1]`` is popped."
msgstr ""
"Если ``STACK[-1]`` не ``None``, счетчик байт-кода увеличивается на *delta*. "
"``STACK[-1]`` извлекается."

#: ../../library/dis.rst:1221 ../../library/dis.rst:1235
msgid ""
"This opcode is a pseudo-instruction, replaced in final bytecode by the "
"directed versions (forward/backward)."
msgstr ""
"Этот код операции представляет собой псевдоинструкцию, замененную в конечном "
"байт-коде направленными версиями (вперед/назад)."

#: ../../library/dis.rst:1232
msgid ""
"If ``STACK[-1]`` is ``None``, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr ""
"Если ``STACK[-1]`` имеет значение ``None``, счетчик байт-кода увеличивается "
"на *delta*. ``STACK[-1]`` извлекается."

#: ../../library/dis.rst:1245
msgid ""
"``STACK[-1]`` is an :term:`iterator`.  Call its :meth:`~iterator.__next__` "
"method. If this yields a new value, push it on the stack (leaving the "
"iterator below it).  If the iterator indicates it is exhausted then the byte "
"code counter is incremented by *delta*."
msgstr ""
"``STACK[-1]`` — это :term:`итератор`. Вызовите его метод :meth:`~iterator."
"__next__`. Если это дает новое значение, поместите его в стек (оставив "
"итератор под ним). Если итератор указывает, что он исчерпан, счетчик байт-"
"кода увеличивается на *дельта*."

#: ../../library/dis.rst:1250
msgid "Up until 3.11 the iterator was popped when it was exhausted."
msgstr "Вплоть до версии 3.11 итератор выскакивал, когда он был исчерпан."

#: ../../library/dis.rst:1255
msgid "Loads the global named ``co_names[namei>>1]`` onto the stack."
msgstr "Загружает глобальный объект с именем ``co_names[namei>>1]`` в стек."

#: ../../library/dis.rst:1257
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` is pushed to the stack "
"before the global variable."
msgstr ""
"Если установлен младший бит ``namei``, то ``NULL`` помещается в стек перед "
"глобальной переменной."

#: ../../library/dis.rst:1263
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr "Помещает ссылку на локальный ``co_varnames[var_num]`` в стек."

#: ../../library/dis.rst:1265
msgid ""
"This opcode is now only used in situations where the local variable is "
"guaranteed to be initialized. It cannot raise :exc:`UnboundLocalError`."
msgstr ""
"Этот код операции теперь используется только в ситуациях, когда локальная "
"переменная гарантированно инициализируется. Он не может вызвать :exc:"
"`UnboundLocalError`."

#: ../../library/dis.rst:1271
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack, "
"raising an :exc:`UnboundLocalError` if the local variable has not been "
"initialized."
msgstr ""
"Помещает ссылку на локальную переменную co_varnames[var_num] в стек, "
"вызывая :exc:`UnboundLocalError`, если локальная переменная не была "
"инициализирована."

#: ../../library/dis.rst:1279
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack (or "
"pushes ``NULL`` onto the stack if the local variable has not been "
"initialized) and sets ``co_varnames[var_num]`` to ``NULL``."
msgstr ""
"Помещает ссылку на локальную ``co_varnames[var_num]`` в стек (или помещает "
"``NULL`` в стек, если локальная переменная не была инициализирована) и "
"устанавливает для ``co_varnames[var_num]`` значение `` НУЛЬ``."

#: ../../library/dis.rst:1287
msgid "Stores ``STACK.pop()`` into the local ``co_varnames[var_num]``."
msgstr "Сохраняет ``STACK.pop()`` в локальном ``co_varnames[var_num]``."

#: ../../library/dis.rst:1292
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "Удаляет локальные ``co_varnames[var_num]``."

#: ../../library/dis.rst:1297
msgid ""
"Creates a new cell in slot ``i``.  If that slot is nonempty then that value "
"is stored into the new cell."
msgstr ""
"Создает новую ячейку в слоте ``i``. Если этот слот непуст, это значение "
"сохраняется в новой ячейке."

#: ../../library/dis.rst:1305
msgid ""
"Pushes a reference to the cell contained in slot ``i`` of the \"fast "
"locals\" storage.  The name of the variable is ``co_fastlocalnames[i]``."
msgstr ""
"Отправляет ссылку на ячейку, содержащуюся в слоте «i» хранилища «быстрых "
"локальных значений». Имя переменной — ``co_fastlocalnames[i]``."

#: ../../library/dis.rst:1308
msgid ""
"Note that ``LOAD_CLOSURE`` is effectively an alias for ``LOAD_FAST``. It "
"exists to keep bytecode a little more readable."
msgstr ""
"Обратите внимание, что LOAD_CLOSURE по сути является псевдонимом LOAD_FAST. "
"Он существует для того, чтобы сделать байт-код более читабельным."

#: ../../library/dis.rst:1311
msgid "``i`` is no longer offset by the length of ``co_varnames``."
msgstr "``i`` больше не компенсируется длиной ``co_varnames``."

#: ../../library/dis.rst:1317
msgid ""
"Loads the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""
"Загружает ячейку, содержащуюся в слоте ``i`` хранилища \"быстрых локальных "
"файлов\". Помещает ссылку на объект, содержащийся в ячейке, в стеке."

#: ../../library/dis.rst:1320 ../../library/dis.rst:1342
#: ../../library/dis.rst:1353
msgid ""
"``i`` is no longer offset by the length of :attr:`~codeobject.co_varnames`."
msgstr "``i`` больше не компенсируется длиной :attr:`~codeobject.co_varnames`."

#: ../../library/dis.rst:1326
msgid ""
"Pops a mapping off the stack and looks up the name associated with slot "
"``i`` of the \"fast locals\" storage in this mapping. If the name is not "
"found there, loads it from the cell contained in slot ``i``, similar to :"
"opcode:`LOAD_DEREF`. This is used for loading free variables in class bodies "
"(which previously used :opcode:`!LOAD_CLASSDEREF`) and in :ref:`annotation "
"scopes <annotation-scopes>` within class bodies."
msgstr ""
"Извлекает сопоставление из стека и ищет имя, связанное со слотом ``i`` "
"хранилища «быстрых локальных значений» в этом сопоставлении. Если имя там не "
"найдено, загружает его из ячейки, содержащейся в слоте ``i``, аналогично :"
"opcode:`LOAD_DEREF`. Это используется для загрузки свободных переменных в "
"телах классов (которые ранее использовали :opcode:`!LOAD_CLASSDEREF`) и в :"
"ref:`областях аннотаций <annotation-scopes>` внутри тел классов."

#: ../../library/dis.rst:1339
msgid ""
"Stores ``STACK.pop()`` into the cell contained in slot ``i`` of the \"fast "
"locals\" storage."
msgstr ""
"Сохраняет ``STACK.pop()`` в ячейку, содержащуюся в слоте ``i`` хранилища "
"\"быстрых локальных значений\"."

#: ../../library/dis.rst:1348
msgid ""
"Empties the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Used by the :keyword:`del` statement."
msgstr ""
"Очищает ячейку, содержащуюся в слоте ``i`` хранилища «быстрых локальных "
"значений». Используется оператором :keyword:`del`."

#: ../../library/dis.rst:1359
msgid ""
"Copies the ``n`` free variables from the closure into the frame. Removes the "
"need for special code on the caller's side when calling closures."
msgstr ""
"Копирует n свободных переменных из замыкания в фрейм. Устраняет "
"необходимость использования специального кода на стороне вызывающей стороны "
"при вызове замыканий."

#: ../../library/dis.rst:1368
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr ""
"Вызывает исключение, используя одну из трех форм оператора ``raise``, в "
"зависимости от значения *argc*:"

#: ../../library/dis.rst:1371
msgid "0: ``raise`` (re-raise previous exception)"
msgstr "0: ``raise`` (повторно поднять предыдущее исключение)"

#: ../../library/dis.rst:1372
msgid ""
"1: ``raise STACK[-1]`` (raise exception instance or type at ``STACK[-1]``)"
msgstr ""
"1: ``raise STACK[-1]`` (вызов экземпляра исключения или введите "
"``STACK[-1]``)"

#: ../../library/dis.rst:1373
msgid ""
"2: ``raise STACK[-2] from STACK[-1]`` (raise exception instance or type at "
"``STACK[-2]`` with ``__cause__`` set to ``STACK[-1]``)"
msgstr ""
"2: ``поднять STACK[-2] из STACK[-1]`` (поднять экземпляр исключения или "
"ввести ``STACK[-2]`` с ``__cause__``, установленным в ``STACK[-1]` `)"

#: ../../library/dis.rst:1379
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``, "
"including the named arguments specified by the preceding :opcode:`KW_NAMES`, "
"if any. On the stack are (in ascending order), either:"
msgstr ""
"Вызывает вызываемый объект с количеством аргументов, указанным в ``argc``, "
"включая именованные аргументы, указанные предыдущим :opcode:`KW_NAMES`, если "
"таковые имеются. В стеке находятся (в порядке возрастания) либо:"

#: ../../library/dis.rst:1384
msgid "NULL"
msgstr "NULL"

#: ../../library/dis.rst:1385 ../../library/dis.rst:1391
msgid "The callable"
msgstr "вызываемый"

#: ../../library/dis.rst:1386
msgid "The positional arguments"
msgstr "Позиционные аргументы"

#: ../../library/dis.rst:1387 ../../library/dis.rst:1394
msgid "The named arguments"
msgstr "Именованные аргументы"

#: ../../library/dis.rst:1389
msgid "or:"
msgstr "или:"

#: ../../library/dis.rst:1392
msgid "``self``"
msgstr "``self``"

#: ../../library/dis.rst:1393
msgid "The remaining positional arguments"
msgstr "Остальные позиционные аргументы"

#: ../../library/dis.rst:1396
msgid ""
"``argc`` is the total of the positional and named arguments, excluding "
"``self`` when a ``NULL`` is not present."
msgstr ""
"``argc`` — это сумма позиционных и именованных аргументов, исключая "
"``self``, когда ``NULL`` отсутствует."

#: ../../library/dis.rst:1399
msgid ""
"``CALL`` pops all arguments and the callable object off the stack, calls the "
"callable object with those arguments, and pushes the return value returned "
"by the callable object."
msgstr ""
"``CALL`` извлекает все аргументы и вызываемый объект из стека, вызывает "
"вызываемый объект с этими аргументами и помещает возвращаемое значение, "
"возвращенное вызываемым объектом."

#: ../../library/dis.rst:1408
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"Вызывает вызываемый объект с переменным набором позиционных и ключевых "
"аргументов. Если установлен младший бит *flags*, вершина стека содержит "
"объект сопоставления, содержащий дополнительные аргументы ключевого слова. "
"Перед вызовом вызываемого объекта объект сопоставления и итерируемый объект "
"«распаковываются», и их содержимое передается в качестве ключевого слова и "
"позиционных аргументов соответственно. ``CALL_FUNCTION_EX`` извлекает все "
"аргументы и вызываемый объект из стека, вызывает вызываемый объект с этими "
"аргументами и помещает возвращаемое значение, возвращенное вызываемым "
"объектом."

#: ../../library/dis.rst:1423
msgid ""
"Pushes a ``NULL`` to the stack. Used in the call sequence to match the "
"``NULL`` pushed by :opcode:`LOAD_METHOD` for non-method calls."
msgstr ""
"Помещает NULL в стек. Используется в последовательности вызовов для "
"соответствия значению NULL, передаваемому :opcode:`LOAD_METHOD` для вызовов, "
"не связанных с методом."

#: ../../library/dis.rst:1432
msgid ""
"Prefixes :opcode:`CALL`. Stores a reference to ``co_consts[consti]`` into an "
"internal variable for use by :opcode:`CALL`. ``co_consts[consti]`` must be a "
"tuple of strings."
msgstr ""
"Префиксы :opcode:`CALL`. Сохраняет ссылку на ``co_consts[consti]`` во "
"внутреннюю переменную для использования :opcode:`CALL`. "
"``co_consts[consti]`` должен быть кортежем строк."

#: ../../library/dis.rst:1441
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed "
"stack must consist of values if the argument carries a specified flag value"
msgstr ""
"Помещает новый объект функции в стек. Снизу вверх потребляемый стек должен "
"состоять из значений, если аргумент содержит указанное значение флага."

#: ../../library/dis.rst:1444
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr ""
"``0x01`` кортеж значений по умолчанию для позиционных параметров и "
"параметров, содержащих только позиционные слова или ключевые слова, в "
"позиционном порядке."

#: ../../library/dis.rst:1446
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr ""
"``0x02`` словарь значений по умолчанию параметров, содержащих только "
"ключевые слова."

#: ../../library/dis.rst:1447
msgid "``0x04`` a tuple of strings containing parameters' annotations"
msgstr "``0x04`` кортеж строк, содержащий аннотации параметров"

#: ../../library/dis.rst:1448
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr ""
"``0x08`` кортеж, содержащий ячейки для свободных переменных, образующий "
"замыкание"

#: ../../library/dis.rst:1449
msgid "the code associated with the function (at ``STACK[-1]``)"
msgstr "код, связанный с функцией (в ``STACK[-1]``)"

#: ../../library/dis.rst:1451
msgid "Flag value ``0x04`` is a tuple of strings instead of dictionary"
msgstr ""
"Значение флага ``0x04`` представляет собой кортеж строк вместо словаря."

#: ../../library/dis.rst:1454
msgid "Qualified name at ``STACK[-1]`` was removed."
msgstr "Полное имя в ``STACK[-1]`` было удалено."

#: ../../library/dis.rst:1462
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"implements::"
msgstr ""
"Помещает объект фрагмента в стек. *argc* должно быть 2 или 3. Если оно равно "
"2, реализуется::"

#: ../../library/dis.rst:1464
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end))"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end))"

#: ../../library/dis.rst:1468
msgid "if it is 3, implements::"
msgstr "если это 3, реализует::"

#: ../../library/dis.rst:1470
msgid ""
"step = STACK.pop()\n"
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end, step))"
msgstr ""
"step = STACK.pop()\n"
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end, step))"

#: ../../library/dis.rst:1475
msgid "See the :func:`slice` built-in function for more information."
msgstr ""
"Дополнительную информацию смотрите во встроенной функции :func:`slice`."

#: ../../library/dis.rst:1480
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""
"Добавляет префикс к любому коду операции, аргумент которого слишком велик, "
"чтобы уместиться в один байт по умолчанию. *ext* содержит дополнительный "
"байт, который действует как старшие биты аргумента. Для каждого кода "
"операции разрешено не более трех префиксов EXTENDED_ARG, образующих аргумент "
"от двухбайтового до четырехбайтового размера."

#: ../../library/dis.rst:1488
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""
"Используется для реализации форматированных литеральных строк (f-строк). "
"Извлекает необязательную *fmt_spec* из стека, а затем необходимое "
"*значение*. *flags* интерпретируется следующим образом:"

#: ../../library/dis.rst:1492
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr "``(flags & 0x03) == 0x00``: *value* форматируется как есть."

#: ../../library/dis.rst:1493
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting it."
msgstr ""
"``(flags & 0x03) == 0x01``: вызовите :func:`str` для *value* перед его "
"форматированием."

#: ../../library/dis.rst:1495
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr ""
"``(flags & 0x03) == 0x02``: вызовите :func:`repr` для *value* перед его "
"форматированием."

#: ../../library/dis.rst:1497
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr ""
"``(flags & 0x03) == 0x03``: вызовите :func:`ascii` для *value* перед его "
"форматированием."

#: ../../library/dis.rst:1499
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr ""
"``(flags & 0x04) == 0x04``: извлеките *fmt_spec* из стека и используйте его, "
"в противном случае используйте пустой *fmt_spec*."

#: ../../library/dis.rst:1502
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr ""
"Форматирование выполняется с помощью :c:func:`PyObject_Format`. Результат "
"помещается в стек."

#: ../../library/dis.rst:1510
msgid ""
"``STACK[-1]`` is a tuple of keyword attribute names, ``STACK[-2]`` is the "
"class being matched against, and ``STACK[-3]`` is the match subject.  "
"*count* is the number of positional sub-patterns."
msgstr ""
"``STACK[-1]`` — это кортеж имен атрибутов ключевых слов, ``STACK[-2]`` — это "
"сопоставляемый класс, а ``STACK[-3]`` — это объект сопоставления. *count* — "
"количество позиционных подшаблонов."

#: ../../library/dis.rst:1514
msgid ""
"Pop ``STACK[-1]``, ``STACK[-2]``, and ``STACK[-3]``. If ``STACK[-3]`` is an "
"instance of ``STACK[-2]`` and has the positional and keyword attributes "
"required by *count* and ``STACK[-1]``, push a tuple of extracted attributes. "
"Otherwise, push ``None``."
msgstr ""
"Воспользуйтесь ``STACK[-1]``, ``STACK[-2]`` и ``STACK[-3]``. Если "
"``STACK[-3]`` является экземпляром ``STACK[-2]`` и имеет позиционные и "
"ключевые атрибуты, требуемые *count* и ``STACK[-1]``, отправьте кортеж "
"извлеченные атрибуты. В противном случае нажмите «Нет»."

#: ../../library/dis.rst:1528
msgid "A no-op. Performs internal tracing, debugging and optimization checks."
msgstr ""
"Нет операции. Выполняет внутреннюю трассировку, проверки отладки и "
"оптимизации."

#: ../../library/dis.rst:1530
msgid "The ``where`` operand marks where the ``RESUME`` occurs:"
msgstr "Операнд ``where`` указывает, где происходит ``RESUME``:"

#: ../../library/dis.rst:1532
msgid ""
"``0`` The start of a function, which is neither a generator, coroutine nor "
"an async generator"
msgstr ""
"``0`` Начало функции, которая не является ни генератором, ни сопрограммой, "
"ни асинхронным генератором."

#: ../../library/dis.rst:1534
msgid "``1`` After a ``yield`` expression"
msgstr "``1`` После выражения ``yield``"

#: ../../library/dis.rst:1535
msgid "``2`` After a ``yield from`` expression"
msgstr "``2`` После выражения ``yield from``"

#: ../../library/dis.rst:1536
msgid "``3`` After an ``await`` expression"
msgstr "``3`` После выражения ``await``"

#: ../../library/dis.rst:1543
msgid ""
"Create a generator, coroutine, or async generator from the current frame. "
"Used as first opcode of in code object for the above mentioned callables. "
"Clear the current frame and return the newly created generator."
msgstr ""
"Создайте генератор, сопрограмму или асинхронный генератор из текущего кадра. "
"Используется в качестве первого кода операции объекта кода для "
"вышеупомянутых вызываемых объектов. Очистите текущий кадр и верните вновь "
"созданный генератор."

#: ../../library/dis.rst:1552
msgid ""
"Equivalent to ``STACK[-1] = STACK[-2].send(STACK[-1])``. Used in ``yield "
"from`` and ``await`` statements."
msgstr ""
"Эквивалентно ``STACK[-1] = STACK[-2].send(STACK[-1])``. Используется в "
"операторах «yield from» и «await»."

#: ../../library/dis.rst:1555
msgid ""
"If the call raises :exc:`StopIteration`, pop the top value from the stack, "
"push the exception's ``value`` attribute, and increment the bytecode counter "
"by *delta*."
msgstr ""
"Если вызов вызывает :exc:`StopIteration`, извлекает верхнее значение из "
"стека, помещает в него атрибут ``value`` исключения и увеличивает счетчик "
"байт-кода на *delta*."

#: ../../library/dis.rst:1564
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes in the range [0,255] which don't use their argument and those that "
"do (``< HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""
"На самом деле это не код операции. Он определяет разделительную линию между "
"кодами операций в диапазоне [0,255], которые не используют свои аргументы, и "
"теми, которые используют их (``< HAVE_ARGUMENT`` и ``>= HAVE_ARGUMENT`` "
"соответственно)."

#: ../../library/dis.rst:1568
msgid ""
"If your application uses pseudo instructions, use the :data:`hasarg` "
"collection instead."
msgstr ""
"Если ваше приложение использует псевдоинструкции, используйте вместо этого "
"коллекцию :data:`hasarg`."

#: ../../library/dis.rst:1571
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""
"Теперь каждая инструкция имеет аргумент, но коды операций ``< "
"HAVE_ARGUMENT`` игнорируют его. Раньше аргументы имели только коды операций "
"``>= HAVE_ARGUMENT``."

#: ../../library/dis.rst:1575
msgid ""
"Pseudo instructions were added to the :mod:`dis` module, and for them it is "
"not true that comparison with ``HAVE_ARGUMENT`` indicates whether they use "
"their arg."
msgstr ""
"В модуль :mod:`dis` были добавлены псевдоинструкции, и для них неверно, что "
"сравнение с ``HAVE_ARGUMENT`` указывает, используют ли они свой аргумент."

#: ../../library/dis.rst:1583
msgid ""
"Calls an intrinsic function with one argument. Passes ``STACK[-1]`` as the "
"argument and sets ``STACK[-1]`` to the result. Used to implement "
"functionality that is not performance critical."
msgstr ""
"Вызывает встроенную функцию с одним аргументом. Передаёт STACK[-1]`` в "
"качестве аргумента и присваивает ``STACK[-1]`` результату. Используется для "
"реализации функций, не критичных к производительности."

#: ../../library/dis.rst:1587 ../../library/dis.rst:1641
msgid "The operand determines which intrinsic function is called:"
msgstr "Операнд определяет, какая внутренняя функция вызывается:"

#: ../../library/dis.rst:1590 ../../library/dis.rst:1644
msgid "Operand"
msgstr "Операнд"

#: ../../library/dis.rst:1590 ../../library/dis.rst:1644
msgid "Description"
msgstr "Описание"

#: ../../library/dis.rst:1592
msgid "``INTRINSIC_1_INVALID``"
msgstr "``INTRINSIC_1_INVALID``"

#: ../../library/dis.rst:1592 ../../library/dis.rst:1646
msgid "Not valid"
msgstr "Недействительно"

#: ../../library/dis.rst:1594
msgid "``INTRINSIC_PRINT``"
msgstr "``INTRINSIC_PRINT``"

#: ../../library/dis.rst:1594
msgid "Prints the argument to standard out. Used in the REPL."
msgstr "Выводит аргумент на стандартный вывод. Используется в REPL."

#: ../../library/dis.rst:1597
msgid "``INTRINSIC_IMPORT_STAR``"
msgstr "``INTRINSIC_IMPORT_STAR``"

#: ../../library/dis.rst:1597
msgid "Performs ``import *`` for the named module."
msgstr "Выполняет ``импорт *`` для именованного модуля."

#: ../../library/dis.rst:1600
msgid "``INTRINSIC_STOPITERATION_ERROR``"
msgstr "``INTRINSIC_STOPITERATION_ERROR``"

#: ../../library/dis.rst:1600
msgid "Extracts the return value from a ``StopIteration`` exception."
msgstr "Извлекает возвращаемое значение из исключения StopIteration."

#: ../../library/dis.rst:1603
msgid "``INTRINSIC_ASYNC_GEN_WRAP``"
msgstr "``INTRINSIC_ASYNC_GEN_WRAP``"

#: ../../library/dis.rst:1603
msgid "Wraps an async generator value"
msgstr "Обертывает значение асинхронного генератора"

#: ../../library/dis.rst:1605
msgid "``INTRINSIC_UNARY_POSITIVE``"
msgstr "``INTRINSIC_UNARY_POSITIVE``"

#: ../../library/dis.rst:1605
msgid "Performs the unary ``+`` operation"
msgstr "Выполняет унарную операцию ``+``"

#: ../../library/dis.rst:1608
msgid "``INTRINSIC_LIST_TO_TUPLE``"
msgstr "``INTRINSIC_LIST_TO_TUPLE``"

#: ../../library/dis.rst:1608
msgid "Converts a list to a tuple"
msgstr "Преобразует список в кортеж"

#: ../../library/dis.rst:1610
msgid "``INTRINSIC_TYPEVAR``"
msgstr "``INTRINSIC_TYPEVAR``"

#: ../../library/dis.rst:1610
msgid "Creates a :class:`typing.TypeVar`"
msgstr "Создает :class:`typing.TypeVar`"

#: ../../library/dis.rst:1612
msgid "``INTRINSIC_PARAMSPEC``"
msgstr "``INTRINSIC_PARAMSPEC``"

#: ../../library/dis.rst:1612
msgid "Creates a :class:`typing.ParamSpec`"
msgstr "Создает :class:`typing.ParamSpec`"

#: ../../library/dis.rst:1615
msgid "``INTRINSIC_TYPEVARTUPLE``"
msgstr "``INTRINSIC_TYPEVARTUPLE``"

#: ../../library/dis.rst:1615
msgid "Creates a :class:`typing.TypeVarTuple`"
msgstr "Создает :class:`typing.TypeVarTuple`"

#: ../../library/dis.rst:1618
msgid "``INTRINSIC_SUBSCRIPT_GENERIC``"
msgstr "``INTRINSIC_SUBSCRIPT_GENERIC``"

#: ../../library/dis.rst:1618
msgid "Returns :class:`typing.Generic` subscripted with the argument"
msgstr "Возвращает :class:`typing.Generic` с индексом аргумента"

#: ../../library/dis.rst:1621
msgid "``INTRINSIC_TYPEALIAS``"
msgstr "``INTRINSIC_TYPEALIAS``"

#: ../../library/dis.rst:1621
msgid ""
"Creates a :class:`typing.TypeAliasType`; used in the :keyword:`type` "
"statement. The argument is a tuple of the type alias's name, type "
"parameters, and value."
msgstr ""
"Создает :class:`typing.TypeAliasType`; используется в операторе :keyword:"
"`type`. Аргумент представляет собой кортеж из имени псевдонима типа, "
"параметров типа и значения."

#: ../../library/dis.rst:1633
msgid ""
"Calls an intrinsic function with two arguments. Used to implement "
"functionality that is not performance critical::"
msgstr ""
"Вызывает встроенную функцию с двумя аргументами. Используется для реализации "
"функций, не критичных к производительности::"

#: ../../library/dis.rst:1636
msgid ""
"arg2 = STACK.pop()\n"
"arg1 = STACK.pop()\n"
"result = intrinsic2(arg1, arg2)\n"
"STACK.push(result)"
msgstr ""
"arg2 = STACK.pop()\n"
"arg1 = STACK.pop()\n"
"result = intrinsic2(arg1, arg2)\n"
"STACK.push(result)"

#: ../../library/dis.rst:1646
msgid "``INTRINSIC_2_INVALID``"
msgstr "``INTRINSIC_2_INVALID``"

#: ../../library/dis.rst:1648
msgid "``INTRINSIC_PREP_RERAISE_STAR``"
msgstr "``INTRINSIC_PREP_RERAISE_STAR``"

#: ../../library/dis.rst:1648
msgid "Calculates the :exc:`ExceptionGroup` to raise from a ``try-except*``."
msgstr "Вычисляет :exc:`ExceptionGroup` для поднятия из ``try-Exception*``."

#: ../../library/dis.rst:1652
msgid "``INTRINSIC_TYPEVAR_WITH_BOUND``"
msgstr "``INTRINSIC_TYPEVAR_WITH_BOUND``"

#: ../../library/dis.rst:1652
msgid "Creates a :class:`typing.TypeVar` with a bound."
msgstr "Создает :class:`typing.TypeVar` с привязкой."

#: ../../library/dis.rst:1655
msgid "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"
msgstr "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"

#: ../../library/dis.rst:1655
msgid "Creates a :class:`typing.TypeVar` with constraints."
msgstr "Создает :class:`typing.TypeVar` с ограничениями."

#: ../../library/dis.rst:1659
msgid "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"
msgstr "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"

#: ../../library/dis.rst:1659
msgid "Sets the ``__type_params__`` attribute of a function."
msgstr "Устанавливает атрибут ``__type_params__`` функции."

#: ../../library/dis.rst:1666
msgid "**Pseudo-instructions**"
msgstr "**Псевдоинструкции**"

#: ../../library/dis.rst:1668
msgid ""
"These opcodes do not appear in Python bytecode. They are used by the "
"compiler but are replaced by real opcodes or removed before bytecode is "
"generated."
msgstr ""
"Эти коды операций не отображаются в байт-коде Python. Они используются "
"компилятором, но заменяются реальными кодами операций или удаляются до "
"генерации байт-кода."

#: ../../library/dis.rst:1673
msgid ""
"Set up an exception handler for the following code block. If an exception "
"occurs, the value stack level is restored to its current state and control "
"is transferred to the exception handler at ``target``."
msgstr ""
"Настройте обработчик исключений для следующего блока кода. Если возникает "
"исключение, уровень стека значений восстанавливается до текущего состояния, "
"и управление передается обработчику исключения в ``target``."

#: ../../library/dis.rst:1680
msgid ""
"Like ``SETUP_FINALLY``, but in case of an exception also pushes the last "
"instruction (``lasti``) to the stack so that ``RERAISE`` can restore it. If "
"an exception occurs, the value stack level and the last instruction on the "
"frame are restored to their current state, and control is transferred to the "
"exception handler at ``target``."
msgstr ""
"Подобно SETUP_FINALLY, но в случае исключения также помещает последнюю "
"инструкцию («lasti») в стек, чтобы RERAISE мог ее восстановить. Если "
"возникает исключение, уровень стека значений и последняя инструкция в кадре "
"восстанавливаются до текущего состояния, а управление передается обработчику "
"исключения в ``target``."

#: ../../library/dis.rst:1689
msgid ""
"Like ``SETUP_CLEANUP``, but in case of an exception one more item is popped "
"from the stack before control is transferred to the exception handler at "
"``target``."
msgstr ""
"Подобно ``SETUP_CLEANUP``, но в случае исключения из стека извлекается еще "
"один элемент, прежде чем управление будет передано обработчику исключения в "
"``target``."

#: ../../library/dis.rst:1693
msgid ""
"This variant is used in :keyword:`with` and :keyword:`async with` "
"constructs, which push the return value of the context manager's :meth:"
"`~object.__enter__` or :meth:`~object.__aenter__` to the stack."
msgstr ""
"Этот вариант используется в конструкциях :keyword:`with` и :keyword:`async "
"with`, которые помещают возвращаемое значение контекстного менеджера :meth:"
"`~object.__enter__` или :meth:`~object.__aenter__` в стек."

#: ../../library/dis.rst:1700
msgid ""
"Marks the end of the code block associated with the last ``SETUP_FINALLY``, "
"``SETUP_CLEANUP`` or ``SETUP_WITH``."
msgstr ""
"Отмечает конец блока кода, связанного с последним SETUP_FINALLY, "
"SETUP_CLEANUP или SETUP_WITH."

#: ../../library/dis.rst:1706
msgid ""
"Undirected relative jump instructions which are replaced by their directed "
"(forward/backward) counterparts by the assembler."
msgstr ""
"Инструкции ненаправленного относительного перехода, которые ассемблер "
"заменяет их направленными (вперед/назад) аналогами."

#: ../../library/dis.rst:1711
msgid ""
"Optimized unbound method lookup. Emitted as a ``LOAD_ATTR`` opcode with a "
"flag set in the arg."
msgstr ""
"Оптимизирован поиск несвязанных методов. Выдается как опкод ``LOAD_ATTR`` с "
"флагом, установленным в аргументе."

#: ../../library/dis.rst:1718
msgid "Opcode collections"
msgstr "Коллекции опкода"

#: ../../library/dis.rst:1720
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr ""
"Эти коллекции предназначены для автоматического анализа инструкций байт-кода:"

#: ../../library/dis.rst:1723
msgid ""
"The collections now contain pseudo instructions and instrumented "
"instructions as well. These are opcodes with values ``>= MIN_PSEUDO_OPCODE`` "
"and ``>= MIN_INSTRUMENTED_OPCODE``."
msgstr ""
"Коллекции теперь также содержат псевдоинструкции и инструментированные "
"инструкции. Это коды операций со значениями ``>= MIN_PSEUDO_OPCODE`` и ``>= "
"MIN_INSTRUMENTED_OPCODE``."

#: ../../library/dis.rst:1730
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "Последовательность имен операций, индексируемая с помощью байт-кода."

#: ../../library/dis.rst:1735
msgid "Dictionary mapping operation names to bytecodes."
msgstr "Словарь отображает имена операций в байт-коды."

#: ../../library/dis.rst:1740
msgid "Sequence of all compare operation names."
msgstr "Последовательность имен всех операций сравнения."

#: ../../library/dis.rst:1745
msgid "Sequence of bytecodes that use their argument."
msgstr "Последовательность байт-кодов, использующих свой аргумент."

#: ../../library/dis.rst:1752
msgid "Sequence of bytecodes that access a constant."
msgstr "Последовательность байт-кодов, которые обращаются к константе."

#: ../../library/dis.rst:1757
msgid ""
"Sequence of bytecodes that access a free variable. 'free' in this context "
"refers to names in the current scope that are referenced by inner scopes or "
"names in outer scopes that are referenced from this scope.  It does *not* "
"include references to global or builtin scopes."
msgstr ""
"Последовательность байт-кодов, которые обращаются к свободной переменной. "
"«свободный» в этом контексте относится к именам в текущей области, на "
"которые ссылаются внутренние области, или именам во внешних областях, на "
"которые ссылаются из этой области. Он *не* включает ссылки на глобальные или "
"встроенные области видимости."

#: ../../library/dis.rst:1765
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "Последовательность байт-кодов, которые обращаются к атрибуту по имени."

#: ../../library/dis.rst:1770
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "Последовательность байт-кодов, имеющих относительную цель перехода."

#: ../../library/dis.rst:1775
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "Последовательность байт-кодов, имеющих абсолютную цель перехода."

#: ../../library/dis.rst:1780
msgid "Sequence of bytecodes that access a local variable."
msgstr ""
"Последовательность байт-кодов, которые обращаются к локальной переменной."

#: ../../library/dis.rst:1785
msgid "Sequence of bytecodes of Boolean operations."
msgstr "Последовательность байт-кодов логических операций."

#: ../../library/dis.rst:1789
msgid "Sequence of bytecodes that set an exception handler."
msgstr "Последовательность байт-кодов, устанавливающая обработчик исключений."

#: ../../library/dis.rst:1460
msgid "built-in function"
msgstr "встроенная функция"

#: ../../library/dis.rst:1460
msgid "slice"
msgstr "срез"
