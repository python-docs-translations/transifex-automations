# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-25 14:54+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/http.server.rst:2
msgid ":mod:`!http.server` --- HTTP servers"
msgstr ":mod:`!http.server` --- HTTP-серверы"

#: ../../library/http.server.rst:7
msgid "**Source code:** :source:`Lib/http/server.py`"
msgstr "**Исходный код:** :source:`Lib/http/server.py`"

#: ../../library/http.server.rst:17
msgid "This module defines classes for implementing HTTP servers."
msgstr "Этот модуль определяет классы для реализации HTTP-серверов."

#: ../../library/http.server.rst:22
msgid ""
":mod:`http.server` is not recommended for production. It only implements :"
"ref:`basic security checks <http.server-security>`."
msgstr ""
":mod:`http.server` не рекомендуется для производства. Он реализует только :"
"ref:`базовые проверки безопасности <http.server-security>`."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Доступность"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"Этот модуль не работает или недоступен на платформах WebAssembly «wasm32-"
"emscripten» и «wasm32-wasi». См. :ref:`wasm-availability` для получения "
"дополнительной информации."

#: ../../library/http.server.rst:27
msgid ""
"One class, :class:`HTTPServer`, is a :class:`socketserver.TCPServer` "
"subclass. It creates and listens at the HTTP socket, dispatching the "
"requests to a handler.  Code to create and run the server looks like this::"
msgstr ""
"Один класс, :class:`HTTPServer`, является подклассом :class:`socketserver."
"TCPServer`. Он создает и прослушивает HTTP-сокет, отправляя запросы "
"обработчику. Код для создания и запуска сервера выглядит следующим образом:"

#: ../../library/http.server.rst:31
msgid ""
"def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    httpd.serve_forever()"
msgstr ""
"def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    httpd.serve_forever()"

#: ../../library/http.server.rst:39
msgid ""
"This class builds on the :class:`~socketserver.TCPServer` class by storing "
"the server address as instance variables named :attr:`server_name` and :attr:"
"`server_port`. The server is accessible by the handler, typically through "
"the handler's :attr:`server` instance variable."
msgstr ""
"Этот класс основан на классе :class:`~socketserver.TCPServer`, сохраняя "
"адрес сервера в виде переменных экземпляра с именами :attr:`server_name` и :"
"attr:`server_port`. Сервер доступен обработчику, обычно через переменную "
"экземпляра :attr:`server` обработчика."

#: ../../library/http.server.rst:46
msgid ""
"This class is identical to HTTPServer but uses threads to handle requests by "
"using the :class:`~socketserver.ThreadingMixIn`. This is useful to handle "
"web browsers pre-opening sockets, on which :class:`HTTPServer` would wait "
"indefinitely."
msgstr ""
"Этот класс идентичен HTTPServer, но использует потоки для обработки запросов "
"с помощью :class:`~socketserver.ThreadingMixIn`. Это полезно для обработки "
"веб-браузерами предварительного открытия сокетов, на которых :class:"
"`HTTPServer` будет ждать бесконечно."

#: ../../library/http.server.rst:54
msgid ""
"The :class:`HTTPServer` and :class:`ThreadingHTTPServer` must be given a "
"*RequestHandlerClass* on instantiation, of which this module provides three "
"different variants:"
msgstr ""
":class:`HTTPServer` и :class:`ThreadingHTTPServer` должны иметь "
"*RequestHandlerClass* при создании экземпляра, из которых этот модуль "
"предоставляет три различных варианта:"

#: ../../library/http.server.rst:60
msgid ""
"This class is used to handle the HTTP requests that arrive at the server.  "
"By itself, it cannot respond to any actual HTTP requests; it must be "
"subclassed to handle each request method (e.g. GET or POST). :class:"
"`BaseHTTPRequestHandler` provides a number of class and instance variables, "
"and methods for use by subclasses."
msgstr ""
"Этот класс используется для обработки HTTP-запросов, поступающих на сервер. "
"Сам по себе он не может отвечать ни на какие реальные HTTP-запросы; он "
"должен быть подклассом для обработки каждого метода запроса (например, GET "
"или POST). :class:`BaseHTTPRequestHandler` предоставляет ряд переменных "
"класса и экземпляра, а также методов для использования подклассами."

#: ../../library/http.server.rst:66
msgid ""
"The handler will parse the request and the headers, then call a method "
"specific to the request type. The method name is constructed from the "
"request. For example, for the request method ``SPAM``, the :meth:`!do_SPAM` "
"method will be called with no arguments. All of the relevant information is "
"stored in instance variables of the handler.  Subclasses should not need to "
"override or extend the :meth:`!__init__` method."
msgstr ""
"Обработчик проанализирует запрос и заголовки, а затем вызовет метод, "
"специфичный для типа запроса. Имя метода создается на основе запроса. "
"Например, для метода запроса ``SPAM`` метод :meth:`!do_SPAM` будет "
"вызываться без аргументов. Вся соответствующая информация хранится в "
"переменных экземпляра обработчика. Подклассам не нужно переопределять или "
"расширять метод :meth:`!__init__`."

#: ../../library/http.server.rst:73
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ":class:`BaseHTTPRequestHandler` имеет следующие переменные экземпляра:"

#: ../../library/http.server.rst:77
msgid ""
"Contains a tuple of the form ``(host, port)`` referring to the client's "
"address."
msgstr "Содержит кортеж вида ``(хост, порт)``, ссылающийся на адрес клиента."

#: ../../library/http.server.rst:82
msgid "Contains the server instance."
msgstr "Содержит экземпляр сервера."

#: ../../library/http.server.rst:86
msgid ""
"Boolean that should be set before :meth:`handle_one_request` returns, "
"indicating if another request may be expected, or if the connection should "
"be shut down."
msgstr ""
"Логическое значение, которое должно быть установлено до возврата :meth:"
"`handle_one_request`, указывая, можно ли ожидать еще одного запроса или "
"следует закрыть соединение."

#: ../../library/http.server.rst:92
msgid ""
"Contains the string representation of the HTTP request line. The terminating "
"CRLF is stripped. This attribute should be set by :meth:"
"`handle_one_request`. If no valid request line was processed, it should be "
"set to the empty string."
msgstr ""
"Содержит строковое представление строки HTTP-запроса. Завершающий CRLF "
"удаляется. Этот атрибут должен быть установлен :meth:`handle_one_request`. "
"Если ни одна допустимая строка запроса не была обработана, она должна быть "
"установлена ​​в пустую строку."

#: ../../library/http.server.rst:99
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr "Содержит команду (тип запроса). Например, ``'GET'``."

#: ../../library/http.server.rst:103
msgid ""
"Contains the request path. If query component of the URL is present, then "
"``path`` includes the query. Using the terminology of :rfc:`3986`, ``path`` "
"here includes ``hier-part`` and the ``query``."
msgstr ""
"Содержит путь запроса. Если компонент запроса URL-адреса присутствует, то "
"``path`` включает запрос. Используя терминологию :rfc:`3986`, ``path`` здесь "
"включает ``hier-part`` и ``query``."

#: ../../library/http.server.rst:109
msgid ""
"Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr "Содержит строку версии из запроса. Например, ``'HTTP/1.0'``."

#: ../../library/http.server.rst:113
msgid ""
"Holds an instance of the class specified by the :attr:`MessageClass` class "
"variable. This instance parses and manages the headers in the HTTP request. "
"The :func:`~http.client.parse_headers` function from :mod:`http.client` is "
"used to parse the headers and it requires that the HTTP request provide a "
"valid :rfc:`2822` style header."
msgstr ""
"Содержит экземпляр класса, указанного переменной класса :attr:"
"`MessageClass`. Этот экземпляр анализирует и управляет заголовками HTTP-"
"запроса. Функция :func:`~http.client.parse_headers` из :mod:`http.client` "
"используется для анализа заголовков и требует, чтобы HTTP-запрос "
"предоставлял действительный заголовок стиля :rfc:`2822`."

#: ../../library/http.server.rst:121
msgid ""
"An :class:`io.BufferedIOBase` input stream, ready to read from the start of "
"the optional input data."
msgstr ""
"Входной поток :class:`io.BufferedIOBase`, готовый к чтению с начала "
"необязательных входных данных."

#: ../../library/http.server.rst:126
msgid ""
"Contains the output stream for writing a response back to the client. Proper "
"adherence to the HTTP protocol must be used when writing to this stream in "
"order to achieve successful interoperation with HTTP clients."
msgstr ""
"Содержит выходной поток для записи ответа обратно клиенту. При записи в этот "
"поток необходимо использовать надлежащее соблюдение протокола HTTP для "
"достижения успешного взаимодействия с клиентами HTTP."

#: ../../library/http.server.rst:131
msgid "This is an :class:`io.BufferedIOBase` stream."
msgstr "Это поток :class:`io.BufferedIOBase`."

#: ../../library/http.server.rst:134
msgid ":class:`BaseHTTPRequestHandler` has the following attributes:"
msgstr ":class:`BaseHTTPRequestHandler` имеет следующие атрибуты:"

#: ../../library/http.server.rst:138
msgid ""
"Specifies the server software version.  You may want to override this. The "
"format is multiple whitespace-separated strings, where each string is of the "
"form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""
"Указывает версию программного обеспечения сервера. Возможно, вы захотите "
"переопределить это. Формат представляет собой несколько строк, разделенных "
"пробелами, где каждая строка имеет форму имя[/версия]. Например, "
"``'BaseHTTP/0.2'``."

#: ../../library/http.server.rst:144
msgid ""
"Contains the Python system version, in a form usable by the :attr:"
"`version_string` method and the :attr:`server_version` class variable. For "
"example, ``'Python/1.4'``."
msgstr ""
"Содержит версию системы Python в форме, используемой методом :attr:"
"`version_string` и переменной класса :attr:`server_version`. Например, "
"``'Python/1.4'``."

#: ../../library/http.server.rst:150
msgid ""
"Specifies a format string that should be used by :meth:`send_error` method "
"for building an error response to the client. The string is filled by "
"default with variables from :attr:`responses` based on the status code that "
"passed to :meth:`send_error`."
msgstr ""
"Указывает строку формата, которая должна использоваться методом :meth:"
"`send_error` для формирования ответа об ошибке клиенту. По умолчанию строка "
"заполняется переменными из :attr:`responses` на основе кода состояния, "
"переданного в :meth:`send_error`."

#: ../../library/http.server.rst:157
msgid ""
"Specifies the Content-Type HTTP header of error responses sent to the "
"client.  The default value is ``'text/html'``."
msgstr ""
"Указывает HTTP-заголовок Content-Type ответов об ошибках, отправляемых "
"клиенту. Значением по умолчанию является ``'text/html'``."

#: ../../library/http.server.rst:162
msgid ""
"Specifies the HTTP version to which the server is conformant. It is sent in "
"responses to let the client know the server's communication capabilities for "
"future requests. If set to ``'HTTP/1.1'``, the server will permit HTTP "
"persistent connections; however, your server *must* then include an accurate "
"``Content-Length`` header (using :meth:`send_header`) in all of its "
"responses to clients. For backwards compatibility, the setting defaults to "
"``'HTTP/1.0'``."
msgstr ""
"Указывает версию HTTP, которой соответствует сервер. Он отправляется в "
"ответах, чтобы сообщить клиенту о возможностях связи сервера для будущих "
"запросов. Если установлено значение ``'HTTP/1.1'``, сервер будет разрешать "
"постоянные соединения HTTP; однако ваш сервер *должен* затем включать точный "
"заголовок Content-Length (используя :meth:`send_header`) во все свои ответы "
"клиентам. Для обратной совместимости по умолчанию установлено значение "
"«HTTP/1.0»."

#: ../../library/http.server.rst:172
msgid ""
"Specifies an :class:`email.message.Message`\\ -like class to parse HTTP "
"headers.  Typically, this is not overridden, and it defaults to :class:`http."
"client.HTTPMessage`."
msgstr ""
"Указывает класс, подобный :class:`email.message.Message`\\, для анализа "
"заголовков HTTP. Обычно это значение не переопределяется и по умолчанию "
"используется :class:`http.client.HTTPMessage`."

#: ../../library/http.server.rst:178
msgid ""
"This attribute contains a mapping of error code integers to two-element "
"tuples containing a short and long message. For example, ``{code: "
"(shortmessage, longmessage)}``. The *shortmessage* is usually used as the "
"*message* key in an error response, and *longmessage* as the *explain* key.  "
"It is used by :meth:`send_response_only` and :meth:`send_error` methods."
msgstr ""
"Этот атрибут содержит сопоставление целых чисел кода ошибки с "
"двухэлементными кортежами, содержащими короткое и длинное сообщение. "
"Например, ``{code: (shortmessage, longmessage)}``. *shortmessage* обычно "
"используется в качестве ключа *message* в ответе об ошибке, а *longmessage* "
"— в качестве ключа *explain*. Он используется методами :meth:"
"`send_response_only` и :meth:`send_error`."

#: ../../library/http.server.rst:184
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr "Экземпляр :class:`BaseHTTPRequestHandler` имеет следующие методы:"

#: ../../library/http.server.rst:188
msgid ""
"Calls :meth:`handle_one_request` once (or, if persistent connections are "
"enabled, multiple times) to handle incoming HTTP requests. You should never "
"need to override it; instead, implement appropriate :meth:`!do_\\*` methods."
msgstr ""
"Вызывает :meth:`handle_one_request` один раз (или, если постоянные "
"соединения включены, несколько раз) для обработки входящих HTTP-запросов. "
"Вам никогда не придется переопределять его; вместо этого реализуйте "
"соответствующие методы :meth:`!do_\\*`."

#: ../../library/http.server.rst:195
msgid ""
"This method will parse and dispatch the request to the appropriate :meth:`!"
"do_\\*` method.  You should never need to override it."
msgstr ""
"Этот метод будет анализировать и отправлять запрос соответствующему методу :"
"meth:`!do_\\*`. Вам никогда не придется переопределять его."

#: ../../library/http.server.rst:200
msgid ""
"When an HTTP/1.1 conformant server receives an ``Expect: 100-continue`` "
"request header it responds back with a ``100 Continue`` followed by ``200 "
"OK`` headers. This method can be overridden to raise an error if the server "
"does not want the client to continue.  For e.g. server can choose to send "
"``417 Expectation Failed`` as a response header and ``return False``."
msgstr ""
"Когда сервер, соответствующий HTTP/1.1, получает заголовок запроса «Expect: "
"100-continue», он отвечает ответом «100 Continue», за которым следуют "
"заголовки «200 OK». Этот метод можно переопределить, чтобы вызвать ошибку, "
"если сервер не хочет, чтобы клиент продолжал работу. Например, сервер может "
"выбрать отправку «417 Expectation Failed» в качестве заголовка ответа и "
"«вернуть False»."

#: ../../library/http.server.rst:211
msgid ""
"Sends and logs a complete error reply to the client. The numeric *code* "
"specifies the HTTP error code, with *message* as an optional, short, human "
"readable description of the error.  The *explain* argument can be used to "
"provide more detailed information about the error; it will be formatted "
"using the :attr:`error_message_format` attribute and emitted, after a "
"complete set of headers, as the response body.  The :attr:`responses` "
"attribute holds the default values for *message* and *explain* that will be "
"used if no value is provided; for unknown codes the default value for both "
"is the string ``???``. The body will be empty if the method is HEAD or the "
"response code is one of the following: :samp:`1{xx}`, ``204 No Content``, "
"``205 Reset Content``, ``304 Not Modified``."
msgstr ""
"Отправляет и регистрирует полный ответ об ошибке клиенту. Числовой *код* "
"указывает код ошибки HTTP, а *сообщение* — необязательное, краткое, "
"удобочитаемое описание ошибки. Аргумент *explain* можно использовать для "
"предоставления более подробной информации об ошибке; он будет отформатирован "
"с использованием атрибута :attr:`error_message_format` и отправлен после "
"полного набора заголовков в качестве тела ответа. Атрибут :attr:`responses` "
"содержит значения по умолчанию для *message* и *explain*, которые будут "
"использоваться, если значение не указано; для неизвестных кодов значением по "
"умолчанию для обоих является строка ``???``. Тело будет пустым, если метод "
"HEAD или код ответа один из следующих: :samp:`1{xx}`, ``204 No Content``, "
"``205 Reset Content``, ``304 Not Модифицированный``."

#: ../../library/http.server.rst:223
msgid ""
"The error response includes a Content-Length header. Added the *explain* "
"argument."
msgstr ""
"Ответ об ошибке включает заголовок Content-Length. Добавлен аргумент "
"*объясните*."

#: ../../library/http.server.rst:229
msgid ""
"Adds a response header to the headers buffer and logs the accepted request. "
"The HTTP response line is written to the internal buffer, followed by "
"*Server* and *Date* headers. The values for these two headers are picked up "
"from the :meth:`version_string` and :meth:`date_time_string` methods, "
"respectively. If the server does not intend to send any other headers using "
"the :meth:`send_header` method, then :meth:`send_response` should be "
"followed by an :meth:`end_headers` call."
msgstr ""
"Добавляет заголовок ответа в буфер заголовков и регистрирует принятый "
"запрос. Строка ответа HTTP записывается во внутренний буфер, за ней следуют "
"заголовки *Server* и *Date*. Значения для этих двух заголовков берутся из "
"методов :meth:`version_string` и :meth:`date_time_string` соответственно. "
"Если сервер не намерен отправлять какие-либо другие заголовки с помощью "
"метода :meth:`send_header`, то за :meth:`send_response` должен следовать "
"вызов :meth:`end_headers`."

#: ../../library/http.server.rst:238
msgid ""
"Headers are stored to an internal buffer and :meth:`end_headers` needs to be "
"called explicitly."
msgstr ""
"Заголовки сохраняются во внутреннем буфере, и :meth:`end_headers` необходимо "
"вызывать явно."

#: ../../library/http.server.rst:244
msgid ""
"Adds the HTTP header to an internal buffer which will be written to the "
"output stream when either :meth:`end_headers` or :meth:`flush_headers` is "
"invoked. *keyword* should specify the header keyword, with *value* "
"specifying its value. Note that, after the send_header calls are done, :meth:"
"`end_headers` MUST BE called in order to complete the operation."
msgstr ""
"Добавляет заголовок HTTP во внутренний буфер, который будет записан в "
"выходной поток при вызове :meth:`end_headers` или :meth:`flush_headers`. "
"*keyword* должно указывать ключевое слово заголовка, а *value* — его "
"значение. Обратите внимание, что после выполнения вызовов send_header ДОЛЖЕН "
"БЫТЬ вызван :meth:`end_headers` для завершения операции."

#: ../../library/http.server.rst:250
msgid "Headers are stored in an internal buffer."
msgstr "Заголовки хранятся во внутреннем буфере."

#: ../../library/http.server.rst:255
msgid ""
"Sends the response header only, used for the purposes when ``100 Continue`` "
"response is sent by the server to the client. The headers not buffered and "
"sent directly the output stream.If the *message* is not specified, the HTTP "
"message corresponding the response *code*  is sent."
msgstr ""
"Отправляет только заголовок ответа, используемый для целей, когда ответ «100 "
"Продолжить» отправляется сервером клиенту. Заголовки не буферизуются и "
"отправляются непосредственно в выходной поток. Если *сообщение* не указано, "
"отправляется HTTP-сообщение, соответствующее *коду* ответа."

#: ../../library/http.server.rst:264
msgid ""
"Adds a blank line (indicating the end of the HTTP headers in the response) "
"to the headers buffer and calls :meth:`flush_headers`."
msgstr ""
"Добавляет пустую строку (обозначающую конец HTTP-заголовков в ответе) в "
"буфер заголовков и вызывает :meth:`flush_headers`."

#: ../../library/http.server.rst:268
msgid "The buffered headers are written to the output stream."
msgstr "Буферизованные заголовки записываются в выходной поток."

#: ../../library/http.server.rst:273
msgid ""
"Finally send the headers to the output stream and flush the internal headers "
"buffer."
msgstr ""
"Наконец, отправьте заголовки в выходной поток и очистите внутренний буфер "
"заголовков."

#: ../../library/http.server.rst:280
msgid ""
"Logs an accepted (successful) request. *code* should specify the numeric "
"HTTP code associated with the response. If a size of the response is "
"available, then it should be passed as the *size* parameter."
msgstr ""
"Регистрирует принятый (успешный) запрос. *code* должен указывать числовой "
"HTTP-код, связанный с ответом. Если доступен размер ответа, то его следует "
"передать как параметр *size*."

#: ../../library/http.server.rst:286
msgid ""
"Logs an error when a request cannot be fulfilled. By default, it passes the "
"message to :meth:`log_message`, so it takes the same arguments (*format* and "
"additional values)."
msgstr ""
"Регистрирует ошибку, когда запрос не может быть выполнен. По умолчанию он "
"передает сообщение в :meth:`log_message`, поэтому он принимает те же "
"аргументы (*формат* и дополнительные значения)."

#: ../../library/http.server.rst:293
msgid ""
"Logs an arbitrary message to ``sys.stderr``. This is typically overridden to "
"create custom error logging mechanisms. The *format* argument is a standard "
"printf-style format string, where the additional arguments to :meth:"
"`log_message` are applied as inputs to the formatting. The client ip address "
"and current date and time are prefixed to every message logged."
msgstr ""
"Записывает произвольное сообщение в ``sys.stderr``. Обычно это "
"переопределяется для создания пользовательских механизмов регистрации "
"ошибок. Аргумент *format* представляет собой стандартную строку формата в "
"стиле printf, где дополнительные аргументы :meth:`log_message` применяются в "
"качестве входных данных для форматирования. IP-адрес клиента, а также "
"текущая дата и время добавляются к каждому зарегистрированному сообщению."

#: ../../library/http.server.rst:301
msgid ""
"Returns the server software's version string. This is a combination of the :"
"attr:`server_version` and :attr:`sys_version` attributes."
msgstr ""
"Возвращает строку версии серверного программного обеспечения. Это комбинация "
"атрибутов :attr:`server_version` и :attr:`sys_version`."

#: ../../library/http.server.rst:306
msgid ""
"Returns the date and time given by *timestamp* (which must be ``None`` or in "
"the format returned by :func:`time.time`), formatted for a message header. "
"If *timestamp* is omitted, it uses the current date and time."
msgstr ""
"Возвращает дату и время, заданные *timestamp* (которое должно быть ``None`` "
"или в формате, возвращаемом :func:`time.time`), отформатированные для "
"заголовка сообщения. Если *timestamp* опущено, используются текущие дата и "
"время."

#: ../../library/http.server.rst:310
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr "Результат выглядит так: «Sun, 06 Nov 1994 08:49:37 GMT»."

#: ../../library/http.server.rst:314
msgid "Returns the current date and time, formatted for logging."
msgstr ""
"Возвращает текущую дату и время, отформатированные для ведения журнала."

#: ../../library/http.server.rst:318
msgid "Returns the client address."
msgstr "Возвращает адрес клиента."

#: ../../library/http.server.rst:320
msgid ""
"Previously, a name lookup was performed. To avoid name resolution delays, it "
"now always returns the IP address."
msgstr ""
"Раньше выполнялся поиск имени. Чтобы избежать задержек разрешения имени, "
"теперь всегда возвращается IP-адрес."

#: ../../library/http.server.rst:327
msgid ""
"This class serves files from the directory *directory* and below, or the "
"current directory if *directory* is not provided, directly mapping the "
"directory structure to HTTP requests."
msgstr ""
"Этот класс обслуживает файлы из каталога *directory* и ниже или из текущего "
"каталога, если *directory* не указан, напрямую сопоставляя структуру "
"каталогов с HTTP-запросами."

#: ../../library/http.server.rst:331
msgid "Added the *directory* parameter."
msgstr "Добавлен параметр *directory*."

#: ../../library/http.server.rst:334
msgid "The *directory* parameter accepts a :term:`path-like object`."
msgstr "Параметр *directory* принимает :term:`объект, похожий на путь`."

#: ../../library/http.server.rst:337
msgid ""
"A lot of the work, such as parsing the request, is done by the base class :"
"class:`BaseHTTPRequestHandler`.  This class implements the :func:`do_GET` "
"and :func:`do_HEAD` functions."
msgstr ""
"Большую часть работы, например анализ запроса, выполняет базовый класс :"
"class:`BaseHTTPRequestHandler`. Этот класс реализует функции :func:`do_GET` "
"и :func:`do_HEAD`."

#: ../../library/http.server.rst:341
msgid ""
"The following are defined as class-level attributes of :class:"
"`SimpleHTTPRequestHandler`:"
msgstr ""
"Следующие атрибуты определены как атрибуты уровня класса :class:"
"`SimpleHTTPRequestHandler`:"

#: ../../library/http.server.rst:346
msgid ""
"This will be ``\"SimpleHTTP/\" + __version__``, where ``__version__`` is "
"defined at the module level."
msgstr ""
"Это будет ``\"SimpleHTTP/\" + __version__``, где ``__version__`` "
"определяется на уровне модуля."

#: ../../library/http.server.rst:351
msgid ""
"A dictionary mapping suffixes into MIME types, contains custom overrides for "
"the default system mappings. The mapping is used case-insensitively, and so "
"should contain only lower-cased keys."
msgstr ""
"Словарь, отображающий суффиксы в типы MIME, содержит пользовательские "
"переопределения для системных отображений по умолчанию. Отображение "
"используется без учета регистра, поэтому должно содержать только ключи в "
"нижнем регистре."

#: ../../library/http.server.rst:355
msgid ""
"This dictionary is no longer filled with the default system mappings, but "
"only contains overrides."
msgstr ""
"Этот словарь больше не заполнен системными сопоставлениями по умолчанию, а "
"содержит только переопределения."

#: ../../library/http.server.rst:359
msgid ""
"The :class:`SimpleHTTPRequestHandler` class defines the following methods:"
msgstr "Класс :class:`SimpleHTTPRequestHandler` определяет следующие методы:"

#: ../../library/http.server.rst:363
msgid ""
"This method serves the ``'HEAD'`` request type: it sends the headers it "
"would send for the equivalent ``GET`` request. See the :meth:`do_GET` method "
"for a more complete explanation of the possible headers."
msgstr ""
"Этот метод обслуживает тип запроса HEAD: он отправляет заголовки, которые он "
"отправил бы для эквивалентного запроса GET. См. метод :meth:`do_GET` для "
"более полного объяснения возможных заголовков."

#: ../../library/http.server.rst:369
msgid ""
"The request is mapped to a local file by interpreting the request as a path "
"relative to the current working directory."
msgstr ""
"Запрос сопоставляется с локальным файлом путем интерпретации запроса как "
"пути относительно текущего рабочего каталога."

#: ../../library/http.server.rst:372
msgid ""
"If the request was mapped to a directory, the directory is checked for a "
"file named ``index.html`` or ``index.htm`` (in that order). If found, the "
"file's contents are returned; otherwise a directory listing is generated by "
"calling the :meth:`list_directory` method. This method uses :func:`os."
"listdir` to scan the directory, and returns a ``404`` error response if the :"
"func:`~os.listdir` fails."
msgstr ""
"Если запрос был сопоставлен с каталогом, каталог проверяется на наличие "
"файла с именем index.html или index.htm (в указанном порядке). Если найдено, "
"возвращается содержимое файла; в противном случае список каталогов "
"генерируется путем вызова метода :meth:`list_directory`. Этот метод "
"использует :func:`os.listdir` для сканирования каталога и возвращает ответ "
"об ошибке ``404``, если :func:`~os.listdir` завершается неудачно."

#: ../../library/http.server.rst:379
msgid ""
"If the request was mapped to a file, it is opened. Any :exc:`OSError` "
"exception in opening the requested file is mapped to a ``404``, ``'File not "
"found'`` error. If there was an ``'If-Modified-Since'`` header in the "
"request, and the file was not modified after this time, a ``304``, ``'Not "
"Modified'`` response is sent. Otherwise, the content type is guessed by "
"calling the :meth:`guess_type` method, which in turn uses the "
"*extensions_map* variable, and the file contents are returned."
msgstr ""
"Если запрос был сопоставлен с файлом, он открывается. Любое исключение :exc:"
"`OSError` при открытии запрошенного файла отображается в ошибку ``404``, "
"``Файл не найден'`. Если в запросе был заголовок «If-Modified-Since», и файл "
"не был изменен после этого времени, отправляется ответ «304», «Not "
"Modified». В противном случае тип контента угадывается путем вызова метода :"
"meth:`guess_type`, который, в свою очередь, использует переменную "
"*extensions_map*, и возвращается содержимое файла."

#: ../../library/http.server.rst:387
msgid ""
"A ``'Content-type:'`` header with the guessed content type is output, "
"followed by a ``'Content-Length:'`` header with the file's size and a "
"``'Last-Modified:'`` header with the file's modification time."
msgstr ""
"Выводится заголовок ``'Content-type:'`` с предполагаемым типом контента, за "
"которым следует заголовок ``'Content-Length:'`` с размером файла и ``'Last-"
"Modified:'`` заголовок со временем модификации файла."

#: ../../library/http.server.rst:391
msgid ""
"Then follows a blank line signifying the end of the headers, and then the "
"contents of the file are output. If the file's MIME type starts with ``text/"
"`` the file is opened in text mode; otherwise binary mode is used."
msgstr ""
"Затем следует пустая строка, обозначающая конец заголовков, а затем "
"выводится содержимое файла. Если MIME-тип файла начинается с ``text/``, файл "
"открывается в текстовом режиме; в противном случае используется двоичный "
"режим."

#: ../../library/http.server.rst:395
msgid ""
"For example usage, see the implementation of the ``test`` function in :"
"source:`Lib/http/server.py`."
msgstr ""
"Пример использования см. в реализации функции test в :source:`Lib/http/"
"server.py`."

#: ../../library/http.server.rst:398
msgid "Support of the ``'If-Modified-Since'`` header."
msgstr "Поддержка заголовка If-Modified-Since."

#: ../../library/http.server.rst:401
msgid ""
"The :class:`SimpleHTTPRequestHandler` class can be used in the following "
"manner in order to create a very basic webserver serving files relative to "
"the current directory::"
msgstr ""
"Класс :class:`SimpleHTTPRequestHandler` можно использовать следующим образом "
"для создания очень простого веб-сервера, обслуживающего файлы относительно "
"текущего каталога:"

#: ../../library/http.server.rst:405
msgid ""
"import http.server\n"
"import socketserver\n"
"\n"
"PORT = 8000\n"
"\n"
"Handler = http.server.SimpleHTTPRequestHandler\n"
"\n"
"with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n"
"    print(\"serving at port\", PORT)\n"
"    httpd.serve_forever()"
msgstr ""
"import http.server\n"
"import socketserver\n"
"\n"
"PORT = 8000\n"
"\n"
"Handler = http.server.SimpleHTTPRequestHandler\n"
"\n"
"with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n"
"    print(\"serving at port\", PORT)\n"
"    httpd.serve_forever()"

#: ../../library/http.server.rst:417
msgid ""
":class:`SimpleHTTPRequestHandler` can also be subclassed to enhance "
"behavior, such as using different index file names by overriding the class "
"attribute :attr:`index_pages`."
msgstr ""
":class:`SimpleHTTPRequestHandler` также может быть подклассом для улучшения "
"поведения, например, для использования разных имен индексных файлов путем "
"переопределения атрибута класса :attr:`index_pages`."

#: ../../library/http.server.rst:424
msgid ""
"This class is used to serve either files or output of CGI scripts from the "
"current directory and below. Note that mapping HTTP hierarchic structure to "
"local directory structure is exactly as in :class:`SimpleHTTPRequestHandler`."
msgstr ""
"Этот класс используется для обслуживания файлов или вывода сценариев CGI из "
"текущего каталога и ниже. Обратите внимание, что сопоставление иерархической "
"структуры HTTP со структурой локальных каталогов происходит точно так же, "
"как в :class:`SimpleHTTPRequestHandler`."

#: ../../library/http.server.rst:430
msgid ""
"CGI scripts run by the :class:`CGIHTTPRequestHandler` class cannot execute "
"redirects (HTTP code 302), because code 200 (script output follows) is sent "
"prior to execution of the CGI script.  This pre-empts the status code."
msgstr ""
"Сценарии CGI, запускаемые классом :class:`CGIHTTPRequestHandler`, не могут "
"выполнять перенаправления (HTTP-код 302), поскольку код 200 (следующий вывод "
"сценария) отправляется до выполнения сценария CGI. Это предшествует коду "
"состояния."

#: ../../library/http.server.rst:435
msgid ""
"The class will however, run the CGI script, instead of serving it as a file, "
"if it guesses it to be a CGI script.  Only directory-based CGI are used --- "
"the other common server configuration is to treat special extensions as "
"denoting CGI scripts."
msgstr ""
"Однако класс запустит скрипт CGI, а не будет обслуживать его как файл, если "
"он угадает, что это скрипт CGI. Используются только CGI на основе каталогов "
"--- другая распространенная конфигурация сервера заключается в том, чтобы "
"рассматривать специальные расширения как обозначение скриптов CGI."

#: ../../library/http.server.rst:440
msgid ""
"The :func:`do_GET` and :func:`do_HEAD` functions are modified to run CGI "
"scripts and serve the output, instead of serving files, if the request leads "
"to somewhere below the ``cgi_directories`` path."
msgstr ""
"Функции :func:`do_GET` и :func:`do_HEAD` изменены для запуска CGI-скриптов и "
"обработки вывода вместо обслуживания файлов, если запрос ведет куда-то ниже "
"пути ``cgi_directories``."

#: ../../library/http.server.rst:444
msgid "The :class:`CGIHTTPRequestHandler` defines the following data member:"
msgstr ":class:`CGIHTTPRequestHandler` определяет следующий элемент данных:"

#: ../../library/http.server.rst:448
msgid ""
"This defaults to ``['/cgi-bin', '/htbin']`` and describes directories to "
"treat as containing CGI scripts."
msgstr ""
"По умолчанию это ``['/cgi-bin', '/htbin']`` и описывает каталоги, которые "
"следует рассматривать как содержащие CGI-скрипты."

#: ../../library/http.server.rst:451
msgid "The :class:`CGIHTTPRequestHandler` defines the following method:"
msgstr ":class:`CGIHTTPRequestHandler` определяет следующий метод:"

#: ../../library/http.server.rst:455
msgid ""
"This method serves the ``'POST'`` request type, only allowed for CGI "
"scripts.  Error 501, \"Can only POST to CGI scripts\", is output when trying "
"to POST to a non-CGI url."
msgstr ""
"Этот метод обслуживает тип запроса POST, разрешенный только для сценариев "
"CGI. Ошибка 501 «Может только POST для сценариев CGI» выводится при попытке "
"отправить POST на URL-адрес, отличный от CGI."

#: ../../library/http.server.rst:459
msgid ""
"Note that CGI scripts will be run with UID of user nobody, for security "
"reasons.  Problems with the CGI script will be translated to error 403."
msgstr ""
"Обратите внимание, что сценарии CGI будут запускаться с UID пользователя "
"none по соображениям безопасности. Проблемы с CGI-скриптом будут "
"транслироваться в ошибку 403."

#: ../../library/http.server.rst:466
msgid "Command-line interface"
msgstr "Интерфейс командной строки"

#: ../../library/http.server.rst:468
msgid ""
":mod:`http.server` can also be invoked directly using the :option:`-m` "
"switch of the interpreter.  The following example illustrates how to serve "
"files relative to the current directory::"
msgstr ""

#: ../../library/http.server.rst:472
msgid "python -m http.server [OPTIONS] [port]"
msgstr "python -m http.server [OPTIONS] [port]"

#: ../../library/http.server.rst:474
msgid "The following options are accepted:"
msgstr "Принимаются следующие варианты:"

#: ../../library/http.server.rst:480
msgid ""
"The server listens to port 8000 by default. The default can be overridden by "
"passing the desired port number as an argument::"
msgstr ""
"По умолчанию сервер прослушивает порт 8000. Значение по умолчанию можно "
"переопределить, передав желаемый номер порта в качестве аргумента::"

#: ../../library/http.server.rst:483
msgid "python -m http.server 9000"
msgstr "python -m http.server 9000"

#: ../../library/http.server.rst:487
msgid ""
"Specifies a specific address to which it should bind. Both IPv4 and IPv6 "
"addresses are supported. By default, the server binds itself to all "
"interfaces. For example, the following command causes the server to bind to "
"localhost only::"
msgstr ""
"Указывает конкретный адрес, к которому он должен привязываться. "
"Поддерживаются адреса как IPv4, так и IPv6. По умолчанию сервер "
"привязывается ко всем интерфейсам. Например, следующая команда заставляет "
"сервер привязываться только к localhost::"

#: ../../library/http.server.rst:492
msgid "python -m http.server --bind 127.0.0.1"
msgstr "python -m http.server --bind 127.0.0.1"

#: ../../library/http.server.rst:496
msgid "Support IPv6 in the ``--bind`` option."
msgstr "Поддержка IPv6 в опции ``--bind``."

#: ../../library/http.server.rst:501
msgid ""
"Specifies a directory to which it should serve the files. By default, the "
"server uses the current directory. For example, the following command uses a "
"specific directory::"
msgstr ""

#: ../../library/http.server.rst:505
msgid "python -m http.server --directory /tmp/"
msgstr "python -m http.server --directory /tmp/"

#: ../../library/http.server.rst:511
msgid ""
"Specifies the HTTP version to which the server is conformant. By default, "
"the server is conformant to HTTP/1.0. For example, the following command "
"runs an HTTP/1.1 conformant server::"
msgstr ""

#: ../../library/http.server.rst:515
msgid "python -m http.server --protocol HTTP/1.1"
msgstr "python -m http.server --protocol HTTP/1.1"

#: ../../library/http.server.rst:521
msgid ""
":class:`CGIHTTPRequestHandler` can be enabled in the command line by passing "
"the ``--cgi`` option::"
msgstr ""
":class:`CGIHTTPRequestHandler` можно включить в командной строке, передав "
"опцию ``--cgi``::"

#: ../../library/http.server.rst:524
msgid "python -m http.server --cgi"
msgstr "python -m http.server --cgi"

#: ../../library/http.server.rst:528
msgid ""
":class:`CGIHTTPRequestHandler` and the ``--cgi`` command-line option are not "
"intended for use by untrusted clients and may be vulnerable to exploitation. "
"Always use within a secure environment."
msgstr ""

#: ../../library/http.server.rst:536
msgid "Security considerations"
msgstr "Соображения безопасности"

#: ../../library/http.server.rst:540
msgid ""
":class:`SimpleHTTPRequestHandler` will follow symbolic links when handling "
"requests, this makes it possible for files outside of the specified "
"directory to be served."
msgstr ""
":class:`SimpleHTTPRequestHandler` будет следовать символическим ссылкам при "
"обработке запросов, это позволяет обслуживать файлы за пределами указанного "
"каталога."

#: ../../library/http.server.rst:544
msgid ""
"Earlier versions of Python did not scrub control characters from the log "
"messages emitted to stderr from ``python -m http.server`` or the default :"
"class:`BaseHTTPRequestHandler` ``.log_message`` implementation. This could "
"allow remote clients connecting to your server to send nefarious control "
"codes to your terminal."
msgstr ""
"Более ранние версии Python не удаляли управляющие символы из сообщений "
"журнала, отправляемых в stderr из ``python -m http.server`` или реализации :"
"class:`BaseHTTPRequestHandler``.log_message`` по умолчанию. Это может "
"позволить удаленным клиентам, подключающимся к вашему серверу, отправлять на "
"ваш терминал гнусные управляющие коды."

#: ../../library/http.server.rst:550
msgid "Control characters are scrubbed in stderr logs."
msgstr "Управляющие символы очищаются в журналах stderr."

#: ../../library/http.server.rst:9
msgid "WWW"
msgstr "WWW"

#: ../../library/http.server.rst:9
msgid "server"
msgstr "сервер"

#: ../../library/http.server.rst:9
msgid "HTTP"
msgstr "HTTP"

#: ../../library/http.server.rst:9
msgid "protocol"
msgstr "протокол"

#: ../../library/http.server.rst:9
msgid "URL"
msgstr "URL"

#: ../../library/http.server.rst:9
msgid "httpd"
msgstr "httpd"

#: ../../library/http.server.rst:538
msgid "http.server"
msgstr "http.server"

#: ../../library/http.server.rst:538
msgid "security"
msgstr "безопасность"
