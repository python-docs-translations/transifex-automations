# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 15:26+0000\n"
"PO-Revision-Date: 2023-05-24 02:13+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/collections.rst:2
msgid ":mod:`collections` --- Container datatypes"
msgstr ":mod:`collections` --- Контейнер типов данных"

#: ../../library/collections.rst:10
msgid "**Source code:** :source:`Lib/collections/__init__.py`"
msgstr "**Source code:** :source:`Lib/collections/__init__.py`"

#: ../../library/collections.rst:20
msgid ""
"This module implements specialized container datatypes providing "
"alternatives to Python's general purpose built-in containers, :class:"
"`dict`, :class:`list`, :class:`set`, and :class:`tuple`."
msgstr ""
"Модуль реализует специализированные контейнеры типов данных, предоставляя "
"альтернативу встроенным контейнерам Python общего назначения, :class:"
"`dict`, :class:`list`, :class:`set`, and :class:`tuple`."

#: ../../library/collections.rst:25
msgid ":func:`namedtuple`"
msgstr ":func:`namedtuple`"

#: ../../library/collections.rst:25
msgid "factory function for creating tuple subclasses with named fields"
msgstr "функция для создания подклассов кортежей с именованными полями"

#: ../../library/collections.rst:26
msgid ":class:`deque`"
msgstr ":class:`deque`"

#: ../../library/collections.rst:26
msgid "list-like container with fast appends and pops on either end"
msgstr "список с быстрым добавление и извлечением последнего элемента"

#: ../../library/collections.rst:27
msgid ":class:`ChainMap`"
msgstr ":class:`ChainMap`"

#: ../../library/collections.rst:27
msgid "dict-like class for creating a single view of multiple mappings"
msgstr ""
"dict-подобный класс для создания единого представления нескольких "
"сопоставлений"

#: ../../library/collections.rst:28
msgid ":class:`Counter`"
msgstr ":class:`Counter`"

#: ../../library/collections.rst:28
msgid "dict subclass for counting :term:`hashable` objects"
msgstr "Подкласс dict для подсчета :term:`hashable` объектов"

#: ../../library/collections.rst:29
msgid ":class:`OrderedDict`"
msgstr ":class:`OrderedDict`"

#: ../../library/collections.rst:29
msgid "dict subclass that remembers the order entries were added"
msgstr "подскласс словаря, запоминающий порядок добавленных записей"

#: ../../library/collections.rst:30
msgid ":class:`defaultdict`"
msgstr ":class:`defaultdict`"

#: ../../library/collections.rst:30
msgid "dict subclass that calls a factory function to supply missing values"
msgstr ""
"подскласс словаря который вызывает функцию для заполнения отсутствующих "
"значений"

#: ../../library/collections.rst:31
msgid ":class:`UserDict`"
msgstr ":class:`UserDict`"

#: ../../library/collections.rst:31
msgid "wrapper around dictionary objects for easier dict subclassing"
msgstr "оболочка вокруг объектов словаря для упрощения подклассов dict"

#: ../../library/collections.rst:32
msgid ":class:`UserList`"
msgstr ":class:`UserList`"

#: ../../library/collections.rst:32
msgid "wrapper around list objects for easier list subclassing"
msgstr ""
"оболочка вокруг объектов списка для упрощения создания подклассов списка"

#: ../../library/collections.rst:33
msgid ":class:`UserString`"
msgstr ":class:`UserString`"

#: ../../library/collections.rst:33
msgid "wrapper around string objects for easier string subclassing"
msgstr ""
"оболочка вокруг строковых объектов для упрощения создания подклассов строк"

#: ../../library/collections.rst:38
msgid ":class:`ChainMap` objects"
msgstr ":class:`ChainMap` objects"

#: ../../library/collections.rst:42
msgid ""
"A :class:`ChainMap` class is provided for quickly linking a number of "
"mappings so they can be treated as a single unit.  It is often much faster "
"than creating a new dictionary and running multiple :meth:`~dict.update` "
"calls."
msgstr ""
"Класс :class:`ChainMap` предназначен для быстрого связывания нескольких "
"отображений, чтобы их можно было рассматривать как единое целое. Зачастую "
"это намного быстрее, чем создавать новый словарь и выполнять несколько "
"вызовов :meth:`~dict.update`."

#: ../../library/collections.rst:46
msgid ""
"The class can be used to simulate nested scopes and is useful in templating."
msgstr ""
"Класс можно использовать для моделирования вложенных областей и полезен при "
"создании шаблонов."

#: ../../library/collections.rst:50
msgid ""
"A :class:`ChainMap` groups multiple dicts or other mappings together to "
"create a single, updateable view.  If no *maps* are specified, a single "
"empty dictionary is provided so that a new chain always has at least one "
"mapping."
msgstr ""
":class:`ChainMap` группирует несколько диктовок или других сопоставлений "
"вместе, чтобы создать единое обновляемое представление. Если *maps* не "
"указаны, предоставляется один пустой словарь, так что новая цепочка всегда "
"имеет хотя бы одно сопоставление."

#: ../../library/collections.rst:54
msgid ""
"The underlying mappings are stored in a list.  That list is public and can "
"be accessed or updated using the *maps* attribute.  There is no other state."
msgstr ""
"Базовые сопоставления хранятся в списке. Этот список является общедоступным, "
"и к нему можно получить доступ или обновить его с помощью атрибута *maps*. "
"Другого государства нет."

#: ../../library/collections.rst:57
msgid ""
"Lookups search the underlying mappings successively until a key is found.  "
"In contrast, writes, updates, and deletions only operate on the first "
"mapping."
msgstr ""
"Поиски последовательно ищут базовые сопоставления, пока не будет найден "
"ключ. Напротив, записи, обновления и удаления выполняются только при первом "
"сопоставлении."

#: ../../library/collections.rst:60
msgid ""
"A :class:`ChainMap` incorporates the underlying mappings by reference.  So, "
"if one of the underlying mappings gets updated, those changes will be "
"reflected in :class:`ChainMap`."
msgstr ""
":class:`ChainMap` включает базовые сопоставления по ссылке. Таким образом, "
"если одно из базовых сопоставлений будет обновлено, эти изменения будут "
"отражены в :class:`ChainMap`."

#: ../../library/collections.rst:64
msgid ""
"All of the usual dictionary methods are supported.  In addition, there is a "
"*maps* attribute, a method for creating new subcontexts, and a property for "
"accessing all but the first mapping:"
msgstr ""
"Поддерживаются все обычные словарные методы. Кроме того, существует атрибут "
"*maps*, метод для создания новых подконтекстов и свойство для доступа ко "
"всем сопоставлениям, кроме первого:"

#: ../../library/collections.rst:70
msgid ""
"A user updateable list of mappings.  The list is ordered from first-searched "
"to last-searched.  It is the only stored state and can be modified to change "
"which mappings are searched.  The list should always contain at least one "
"mapping."
msgstr ""
"Обновляемый пользователем список сопоставлений. Список упорядочен от первого "
"к последнему поиску. Это единственное сохраненное состояние, и его можно "
"изменить, чтобы изменить поиск сопоставлений. Список всегда должен содержать "
"хотя бы одно сопоставление."

#: ../../library/collections.rst:77
msgid ""
"Returns a new :class:`ChainMap` containing a new map followed by all of the "
"maps in the current instance.  If ``m`` is specified, it becomes the new map "
"at the front of the list of mappings; if not specified, an empty dict is "
"used, so that a call to ``d.new_child()`` is equivalent to: ``ChainMap({}, "
"*d.maps)``. If any keyword arguments are specified, they update passed map "
"or new empty dict. This method is used for creating subcontexts that can be "
"updated without altering values in any of the parent mappings."
msgstr ""
"Возвращает новый :class:`ChainMap`, содержащий новую карту, за которой "
"следуют все карты в текущем экземпляре. Если указано ``m``, она становится "
"новой картой в начале списка сопоставлений; если не указано, используется "
"пустой dict, так что вызов ``d.new_child()`` эквивалентен: ``ChainMap({}, *d."
"maps)``. Если указаны какие-либо аргументы ключевого слова, они обновляют "
"переданную карту или новый пустой словарь. Этот метод используется для "
"создания подконтекстов, которые можно обновлять без изменения значений в "
"любом из родительских сопоставлений."

#: ../../library/collections.rst:86
msgid "The optional ``m`` parameter was added."
msgstr "Был добавлен необязательный параметр ``m``."

#: ../../library/collections.rst:89
msgid "Keyword arguments support was added."
msgstr "Добавлена ​​поддержка аргументов ключевых слов."

#: ../../library/collections.rst:94
msgid ""
"Property returning a new :class:`ChainMap` containing all of the maps in the "
"current instance except the first one.  This is useful for skipping the "
"first map in the search.  Use cases are similar to those for the :keyword:"
"`nonlocal` keyword used in :term:`nested scopes <nested scope>`.  The use "
"cases also parallel those for the built-in :func:`super` function.  A "
"reference to ``d.parents`` is equivalent to: ``ChainMap(*d.maps[1:])``."
msgstr ""
"Свойство, возвращающее новый :class:`ChainMap`, содержащий все карты "
"текущего экземпляра, кроме первой. Это полезно для пропуска первой карты в "
"поиске. Варианты использования аналогичны сценариям использования ключевого "
"слова :keyword:`nonlocal`, используемого в :term:`вложенных областях "
"<вложенная область>`. Варианты использования также аналогичны сценариям "
"использования встроенной функции :func:`super`. Ссылка на ``d.parents`` "
"эквивалентна: ``ChainMap(*d.maps[1:])``."

#: ../../library/collections.rst:102
msgid ""
"Note, the iteration order of a :class:`ChainMap()` is determined by scanning "
"the mappings last to first::"
msgstr ""

#: ../../library/collections.rst:110
msgid ""
"This gives the same ordering as a series of :meth:`dict.update` calls "
"starting with the last mapping::"
msgstr ""
"Это дает тот же порядок, что и серия вызовов :meth:`dict.update`, начиная с "
"последнего сопоставления::"

#: ../../library/collections.rst:118
msgid "Added support for ``|`` and ``|=`` operators, specified in :pep:`584`."
msgstr "Добавлена ​​поддержка операторов ``|`` и ``|=``, указанных в :pep:`584`."

#: ../../library/collections.rst:123
msgid ""
"The `MultiContext class <https://github.com/enthought/codetools/blob/4.0.0/"
"codetools/contexts/multi_context.py>`_ in the Enthought `CodeTools package "
"<https://github.com/enthought/codetools>`_ has options to support writing to "
"any mapping in the chain."
msgstr ""
"Класс MultiContext <https://github.com/enought/codetools/blob/4.0.0/"
"codetools/contexts/multi_context.py>`_ в пакете En Thought `CodeTools "
"<https://github.com/en Thought/ codetools>`_ имеет опции для поддержки "
"записи в любое отображение в цепочке."

#: ../../library/collections.rst:129
msgid ""
"Django's `Context class <https://github.com/django/django/blob/main/django/"
"template/context.py>`_ for templating is a read-only chain of mappings.  It "
"also features pushing and popping of contexts similar to the :meth:"
"`~collections.ChainMap.new_child` method and the :attr:`~collections."
"ChainMap.parents` property."
msgstr ""
"Класс контекста Django <https://github.com/django/django/blob/main/django/"
"template/context.py>`_ для шаблонов представляет собой цепочку "
"сопоставлений, доступную только для чтения. Он также поддерживает отправку и "
"извлечение контекстов, аналогично методу :meth:`~collections.ChainMap."
"new_child` и свойству :attr:`~collections.ChainMap.parents`."

#: ../../library/collections.rst:136
msgid ""
"The `Nested Contexts recipe <https://code.activestate.com/recipes/577434/>`_ "
"has options to control whether writes and other mutations apply only to the "
"first mapping or to any mapping in the chain."
msgstr ""

#: ../../library/collections.rst:141
msgid ""
"A `greatly simplified read-only version of Chainmap <https://code."
"activestate.com/recipes/305268/>`_."
msgstr ""
"`Значительно упрощенная версия Chainmap, доступная только для чтения "
"<https://code.activestate.com/recipes/305268/>`_."

#: ../../library/collections.rst:146
msgid ":class:`ChainMap` Examples and Recipes"
msgstr ":class:`ChainMap` Примеры и рецепты"

#: ../../library/collections.rst:148
msgid "This section shows various approaches to working with chained maps."
msgstr "В этом разделе показаны различные подходы к работе с цепочками карт."

#: ../../library/collections.rst:151
msgid "Example of simulating Python's internal lookup chain::"
msgstr "Пример моделирования внутренней цепочки поиска Python::"

#: ../../library/collections.rst:156
msgid ""
"Example of letting user specified command-line arguments take precedence "
"over environment variables which in turn take precedence over default "
"values::"
msgstr ""
"Пример предоставления права аргументам командной строки, указанным "
"пользователем, иметь приоритет над переменными среды, которые, в свою "
"очередь, имеют приоритет над значениями по умолчанию:"

#: ../../library/collections.rst:173
msgid ""
"Example patterns for using the :class:`ChainMap` class to simulate nested "
"contexts::"
msgstr ""
"Примеры шаблонов использования класса :class:`ChainMap` для имитации "
"вложенных контекстов::"

#: ../../library/collections.rst:192
msgid ""
"The :class:`ChainMap` class only makes updates (writes and deletions) to the "
"first mapping in the chain while lookups will search the full chain.  "
"However, if deep writes and deletions are desired, it is easy to make a "
"subclass that updates keys found deeper in the chain::"
msgstr ""
"Класс :class:`ChainMap` обновляет (записывает и удаляет) только первое "
"сопоставление в цепочке, тогда как поиск будет выполнять поиск по всей "
"цепочке. Однако, если желательны глубокие записи и удаления, легко создать "
"подкласс, который обновляет ключи, находящиеся глубже в цепочке:"

#: ../../library/collections.rst:223
msgid ":class:`Counter` objects"
msgstr ":class:`Counter` Счетчик"

#: ../../library/collections.rst:225
msgid ""
"A counter tool is provided to support convenient and rapid tallies. For "
"example::"
msgstr ""
"Инструмент счетчик предназначен для поддержки удобных и быстрых подсчетов. "
"Например::"

#: ../../library/collections.rst:244
msgid ""
"A :class:`Counter` is a :class:`dict` subclass for counting :term:`hashable` "
"objects. It is a collection where elements are stored as dictionary keys and "
"their counts are stored as dictionary values.  Counts are allowed to be any "
"integer value including zero or negative counts.  The :class:`Counter` class "
"is similar to bags or multisets in other languages."
msgstr ""
":class:`Counter` — это подкласс :class:`dict` для подсчёта :term:`hashable` "
"объектов. Это коллекция, в которой элементы хранятся как ключи словаря, а их "
"количество — как значения словаря. Число может иметь любое целочисленное "
"значение, включая нулевое или отрицательное значение. Класс :class:`Counter` "
"похож на сумки или мультинаборы в других языках."

#: ../../library/collections.rst:250
msgid ""
"Elements are counted from an *iterable* or initialized from another "
"*mapping* (or counter):"
msgstr ""
"Элементы подсчитываются из *итерируемого объекта* или инициализируются от "
"иного *маппинг объекта* (или счетчика):"

#: ../../library/collections.rst:258
msgid ""
"Counter objects have a dictionary interface except that they return a zero "
"count for missing items instead of raising a :exc:`KeyError`:"
msgstr ""
"Объекты Counter имеют интерфейс словаря за исключением того, что они "
"возвращают ноль для отсутствующего элемента вместо выбрасывания исключения :"
"exc:`KeyError`:"

#: ../../library/collections.rst:265
msgid ""
"Setting a count to zero does not remove an element from a counter. Use "
"``del`` to remove it entirely:"
msgstr ""
"Установка нулевого количества не удаляет элемент из счетчика. Используйте "
"``del`` чтобы удалить его полностью."

#: ../../library/collections.rst:273
msgid ""
"As a :class:`dict` subclass, :class:`Counter` inherited the capability to "
"remember insertion order.  Math operations on *Counter* objects also "
"preserve order.  Results are ordered according to when an element is first "
"encountered in the left operand and then by the order encountered in the "
"right operand."
msgstr ""
"Как подкласс :class:`dict`, :class:`Counter` унаследовал способность "
"запоминать порядок вставки. Математические операции над объектами *Counter* "
"также сохраняют порядок. Результаты упорядочены в соответствии с тем, когда "
"элемент впервые встречается в левом операнде, а затем по порядку, который "
"встречается в правом операнде."

#: ../../library/collections.rst:279
msgid ""
"Counter objects support additional methods beyond those available for all "
"dictionaries:"
msgstr ""
"Объекты-счетчики поддерживают дополнительные методы, помимо тех, которые "
"доступны для всех словарей:"

#: ../../library/collections.rst:284
msgid ""
"Return an iterator over elements repeating each as many times as its count.  "
"Elements are returned in the order first encountered. If an element's count "
"is less than one, :meth:`elements` will ignore it."
msgstr ""
"Возвращает итератор для элементов, повторяющих каждый столько раз, сколько "
"его счетчик. Элементы возвращаются в том порядке, в котором они впервые "
"встретились. Если количество элементов меньше единицы, :meth:`elements` "
"проигнорирует его."

#: ../../library/collections.rst:294
msgid ""
"Return a list of the *n* most common elements and their counts from the most "
"common to the least.  If *n* is omitted or ``None``, :meth:`most_common` "
"returns *all* elements in the counter. Elements with equal counts are "
"ordered in the order first encountered:"
msgstr ""
"Возвращает список *n* наиболее распространенных элементов и их количество от "
"самого распространенного до наименьшего. Если *n* опущено или ``None``, :"
"meth:`most_common` возвращает *все* элементы в счетчике. Элементы с "
"одинаковым количеством упорядочены в порядке их первого появления:"

#: ../../library/collections.rst:304
msgid ""
"Elements are subtracted from an *iterable* or from another *mapping* (or "
"counter).  Like :meth:`dict.update` but subtracts counts instead of "
"replacing them.  Both inputs and outputs may be zero or negative."
msgstr ""
"Элементы вычитаются из *итерируемого объекта* или из иного *маппинг объекта* "
"(или счетчика). Похожий на метод :meth:`dict.update` метод substract "
"подсчитывает элементы, вместо того, чтобы заменить их. Входы и выходы могут "
"быть нулевыми или отрицательными."

#: ../../library/collections.rst:318
msgid "Compute the sum of the counts."
msgstr "Вычислите сумму чисел."

#: ../../library/collections.rst:326
msgid ""
"The usual dictionary methods are available for :class:`Counter` objects "
"except for two which work differently for counters."
msgstr ""
"Обычные методы словарей доступны для объектов :class:`Counter` , кроме двух, "
"которые работают по-другому для счетчиков."

#: ../../library/collections.rst:331
msgid "This class method is not implemented for :class:`Counter` objects."
msgstr "Этот метод класса не реализован для объектов :class:`Counter`."

#: ../../library/collections.rst:335
msgid ""
"Elements are counted from an *iterable* or added-in from another *mapping* "
"(or counter).  Like :meth:`dict.update` but adds counts instead of replacing "
"them.  Also, the *iterable* is expected to be a sequence of elements, not a "
"sequence of ``(key, value)`` pairs."
msgstr ""
"Элементы подсчитываются из *итерируемого* или добавляются из другого "
"*отображения* (или счетчика). Подобно :meth:`dict.update`, но добавляет "
"счетчики, а не заменяет их. Кроме того, ожидается, что *iterable* будет "
"последовательностью элементов, а не последовательностью пар «(ключ, "
"значение)»."

#: ../../library/collections.rst:340
msgid ""
"Counters support rich comparison operators for equality, subset, and "
"superset relationships: ``==``, ``!=``, ``<``, ``<=``, ``>``, ``>=``. All of "
"those tests treat missing elements as having zero counts so that "
"``Counter(a=1) == Counter(a=1, b=0)`` returns true."
msgstr ""
"Счетчики поддерживают расширенные операторы сравнения для отношений "
"равенства, подмножества и надмножества: ``==``, ``!=``, ``<``, ``<=``, "
"``>``, ``> =``. Все эти тесты рассматривают отсутствующие элементы как "
"имеющие нулевое количество, поэтому ``Counter(a=1) == Counter(a=1, b=0)`` "
"возвращает true."

#: ../../library/collections.rst:345
msgid "Rich comparison operations were added."
msgstr "Были добавлены расширенные операции сравнения."

#: ../../library/collections.rst:348
msgid ""
"In equality tests, missing elements are treated as having zero counts. "
"Formerly, ``Counter(a=3)`` and ``Counter(a=3, b=0)`` were considered "
"distinct."
msgstr ""
"В тестах на равенство отсутствующие элементы считаются имеющими нулевое "
"значение. Раньше ``Counter(a=3)`` и ``Counter(a=3, b=0)`` считались разными."

#: ../../library/collections.rst:353
msgid "Common patterns for working with :class:`Counter` objects::"
msgstr "Общие шаблоны работы с объектами :class:`Counter`::"

#: ../../library/collections.rst:365
msgid ""
"Several mathematical operations are provided for combining :class:`Counter` "
"objects to produce multisets (counters that have counts greater than zero). "
"Addition and subtraction combine counters by adding or subtracting the "
"counts of corresponding elements.  Intersection and union return the minimum "
"and maximum of corresponding counts.  Equality and inclusion compare "
"corresponding counts.  Each operation can accept inputs with signed counts, "
"but the output will exclude results with counts of zero or less."
msgstr ""
"Предусмотрено несколько математических операций для объединения объектов :"
"class:`Counter` для создания мультимножеств (счетчиков со счетчиком больше "
"нуля). Сложение и вычитание объединяют счетчики путем сложения или вычитания "
"счетчиков соответствующих элементов. Пересечение и объединение возвращают "
"минимум и максимум соответствующих значений. Равенство и инклюзивность "
"сравнивают соответствующие значения. Каждая операция может принимать входные "
"данные со знаковыми счетчиками, но выходные данные будут исключать "
"результаты со счетчиками, равными нулю или меньше."

#: ../../library/collections.rst:390
msgid ""
"Unary addition and subtraction are shortcuts for adding an empty counter or "
"subtracting from an empty counter."
msgstr ""
"Унарное сложение и вычитание — это ярлыки для добавления пустого счетчика "
"или вычитания из пустого счетчика."

#: ../../library/collections.rst:399
msgid ""
"Added support for unary plus, unary minus, and in-place multiset operations."
msgstr ""
"Добавлена ​​поддержка унарных операций плюс, унарный минус и операций с "
"несколькими множествами на месте."

#: ../../library/collections.rst:404
msgid ""
"Counters were primarily designed to work with positive integers to represent "
"running counts; however, care was taken to not unnecessarily preclude use "
"cases needing other types or negative values.  To help with those use cases, "
"this section documents the minimum range and type restrictions."
msgstr ""
"Счетчики в первую очередь были разработаны для работы с положительными "
"целыми числами для представления текущих значений; однако были приняты меры, "
"чтобы не исключать без необходимости варианты использования, требующие "
"других типов или отрицательных значений. Чтобы помочь в таких случаях "
"использования, в этом разделе документированы ограничения минимального "
"диапазона и типа."

#: ../../library/collections.rst:409
msgid ""
"The :class:`Counter` class itself is a dictionary subclass with no "
"restrictions on its keys and values.  The values are intended to be numbers "
"representing counts, but you *could* store anything in the value field."
msgstr ""
"Класс :class:`Counter` сам по себе является подклассом словаря без "
"ограничений на его ключи и значения. Значения задуманы как числа, "
"представляющие количество, но вы *можете* хранить в поле значения что угодно."

#: ../../library/collections.rst:413
msgid ""
"The :meth:`~Counter.most_common` method requires only that the values be "
"orderable."
msgstr ""
"Метод :meth:`~Counter.most_common` требует только того, чтобы значения можно "
"было упорядочивать."

#: ../../library/collections.rst:415
msgid ""
"For in-place operations such as ``c[key] += 1``, the value type need only "
"support addition and subtraction.  So fractions, floats, and decimals would "
"work and negative values are supported.  The same is also true for :meth:"
"`~Counter.update` and :meth:`~Counter.subtract` which allow negative and "
"zero values for both inputs and outputs."
msgstr ""
"Для операций на месте, таких как ``c[key] += 1``, ​​тип значения должен "
"поддерживать только сложение и вычитание. Таким образом, будут работать "
"дроби, числа с плавающей запятой и десятичные дроби, а также поддерживаются "
"отрицательные значения. То же самое справедливо и для :meth:`~Counter."
"update` и :meth:`~Counter.subtract`, которые допускают отрицательные и "
"нулевые значения как для входных, так и для выходных данных."

#: ../../library/collections.rst:421
msgid ""
"The multiset methods are designed only for use cases with positive values. "
"The inputs may be negative or zero, but only outputs with positive values "
"are created.  There are no type restrictions, but the value type needs to "
"support addition, subtraction, and comparison."
msgstr ""
"Мультимножественные методы предназначены только для случаев использования с "
"положительными значениями. Входные данные могут быть отрицательными или "
"нулевыми, но создаются только выходные данные с положительными значениями. "
"Ограничений по типам нет, но тип значения должен поддерживать сложение, "
"вычитание и сравнение."

#: ../../library/collections.rst:426
msgid ""
"The :meth:`~Counter.elements` method requires integer counts.  It ignores "
"zero and negative counts."
msgstr ""
"Метод :meth:`~Counter.elements` требует подсчета целых чисел. Он игнорирует "
"нулевые и отрицательные значения."

#: ../../library/collections.rst:431
msgid ""
"`Bag class <https://www.gnu.org/software/smalltalk/manual-base/html_node/Bag."
"html>`_ in Smalltalk."
msgstr ""
"`Класс Bag <https://www.gnu.org/software/smalltalk/manual-base/html_node/Bag."
"html>`_ в Smalltalk."

#: ../../library/collections.rst:434
msgid ""
"Wikipedia entry for `Multisets <https://en.wikipedia.org/wiki/Multiset>`_."
msgstr ""
"Запись в Википедии о `Multisets <https://en.wikipedia.org/wiki/Multiset>`_."

#: ../../library/collections.rst:436
msgid ""
"`C++ multisets <http://www.java2s.com/Tutorial/Cpp/0380__set-multiset/"
"Catalog0380__set-multiset.htm>`_ tutorial with examples."
msgstr ""
"`Мультимножества C++ <http://www.java2s.com/Tutorial/Cpp/0380__set-multiset/"
"Catalog0380__set-multiset.htm>`_ учебник с примерами."

#: ../../library/collections.rst:439
msgid ""
"For mathematical operations on multisets and their use cases, see *Knuth, "
"Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise "
"19*."
msgstr ""
"О математических операциях над мультимножествами и вариантах их "
"использования см. *Knuth, Donald. Искусство компьютерного программирования, "
"том II, раздел 4.6.3, упражнение 19*."

#: ../../library/collections.rst:443
msgid ""
"To enumerate all distinct multisets of a given size over a given set of "
"elements, see :func:`itertools.combinations_with_replacement`::"
msgstr ""
"Чтобы перечислить все различные мультимножества заданного размера по "
"заданному набору элементов, см. :func:`itertools."
"combinations_with_replacement`::"

#: ../../library/collections.rst:450
msgid ":class:`deque` objects"
msgstr "Объекты :class:`deque`"

#: ../../library/collections.rst:454
msgid ""
"Returns a new deque object initialized left-to-right (using :meth:`append`) "
"with data from *iterable*.  If *iterable* is not specified, the new deque is "
"empty."
msgstr ""
"Возвращает новый объект двухсторонней очереди, инициализированный слева "
"направо (с использованием :meth:`append`) с данными из *iterable*. Если "
"*iterable* не указано, новая дек пуста."

#: ../../library/collections.rst:457
msgid ""
"Deques are a generalization of stacks and queues (the name is pronounced "
"\"deck\" and is short for \"double-ended queue\").  Deques support thread-"
"safe, memory efficient appends and pops from either side of the deque with "
"approximately the same *O*\\ (1) performance in either direction."
msgstr ""
"Деки — это обобщение стеков и очередей (название произносится как «колода» и "
"является сокращением от «двусторонняя очередь»). Деки поддерживают поточно-"
"ориентированное и эффективное использование памяти при добавлении и "
"извлечении с любой стороны дека с примерно одинаковой производительностью "
"*O*\\ (1) в любом направлении."

#: ../../library/collections.rst:462
msgid ""
"Though :class:`list` objects support similar operations, they are optimized "
"for fast fixed-length operations and incur *O*\\ (*n*) memory movement costs "
"for ``pop(0)`` and ``insert(0, v)`` operations which change both the size "
"and position of the underlying data representation."
msgstr ""
"Хотя объекты :class:`list` поддерживают аналогичные операции, они "
"оптимизированы для быстрых операций фиксированной длины и требуют *O*\\ "
"(*n*) затрат на перемещение памяти для ``pop(0)`` и ``insert(0) , v)`` "
"операции, которые изменяют как размер, так и положение базового "
"представления данных."

#: ../../library/collections.rst:468
msgid ""
"If *maxlen* is not specified or is ``None``, deques may grow to an arbitrary "
"length.  Otherwise, the deque is bounded to the specified maximum length.  "
"Once a bounded length deque is full, when new items are added, a "
"corresponding number of items are discarded from the opposite end.  Bounded "
"length deques provide functionality similar to the ``tail`` filter in Unix. "
"They are also useful for tracking transactions and other pools of data where "
"only the most recent activity is of interest."
msgstr ""
"Если *maxlen* не указан или имеет значение None, деки могут вырасти до "
"произвольной длины. В противном случае дек ограничен указанной максимальной "
"длиной. После заполнения очереди ограниченной длины при добавлении новых "
"элементов соответствующее количество элементов отбрасывается с "
"противоположного конца. Деки ограниченной длины предоставляют "
"функциональность, аналогичную хвостовому фильтру в Unix. Они также полезны "
"для отслеживания транзакций и других пулов данных, где интерес представляют "
"только самые последние действия."

#: ../../library/collections.rst:477
msgid "Deque objects support the following methods:"
msgstr "Объекты Deque поддерживают следующие методы:"

#: ../../library/collections.rst:481
msgid "Add *x* to the right side of the deque."
msgstr "Добавьте *x* в правую часть дека."

#: ../../library/collections.rst:486
msgid "Add *x* to the left side of the deque."
msgstr "Добавьте *x* в левую часть дека."

#: ../../library/collections.rst:491
msgid "Remove all elements from the deque leaving it with length 0."
msgstr "Удалите все элементы из дека, оставив его длину 0."

#: ../../library/collections.rst:496
msgid "Create a shallow copy of the deque."
msgstr "Создайте неглубокую копию дека."

#: ../../library/collections.rst:503
msgid "Count the number of deque elements equal to *x*."
msgstr "Подсчитайте количество элементов дека, равное *x*."

#: ../../library/collections.rst:510
msgid ""
"Extend the right side of the deque by appending elements from the iterable "
"argument."
msgstr ""
"Расширьте правую часть дека, добавив элементы из итерируемого аргумента."

#: ../../library/collections.rst:516
msgid ""
"Extend the left side of the deque by appending elements from *iterable*. "
"Note, the series of left appends results in reversing the order of elements "
"in the iterable argument."
msgstr ""
"Расширьте левую часть дека, добавив элементы из *iterable*. Обратите "
"внимание: серия левых добавлений приводит к изменению порядка элементов в "
"итерируемом аргументе."

#: ../../library/collections.rst:523
msgid ""
"Return the position of *x* in the deque (at or after index *start* and "
"before index *stop*).  Returns the first match or raises :exc:`ValueError` "
"if not found."
msgstr ""
"Возвращает позицию *x* в двухсторонней очереди (в месте или после индекса "
"*start* и перед индексом *stop*). Возвращает первое совпадение или выдает :"
"exc:`ValueError`, если не найдено."

#: ../../library/collections.rst:532
msgid "Insert *x* into the deque at position *i*."
msgstr "Вставьте *x* в дек в позиции *i*."

#: ../../library/collections.rst:534
msgid ""
"If the insertion would cause a bounded deque to grow beyond *maxlen*, an :"
"exc:`IndexError` is raised."
msgstr ""
"Если вставка приведет к тому, что ограниченная дека выйдет за пределы "
"*maxlen*, выдается ошибка :exc:`IndexError`."

#: ../../library/collections.rst:542
msgid ""
"Remove and return an element from the right side of the deque. If no "
"elements are present, raises an :exc:`IndexError`."
msgstr ""
"Удалить и вернуть элемент из правой части двухсторонней очереди. Если "
"элементы отсутствуют, выдается :exc:`IndexError`."

#: ../../library/collections.rst:548
msgid ""
"Remove and return an element from the left side of the deque. If no elements "
"are present, raises an :exc:`IndexError`."
msgstr ""
"Удалить и вернуть элемент из левой части двухсторонней очереди. Если "
"элементы отсутствуют, выдается :exc:`IndexError`."

#: ../../library/collections.rst:554
msgid ""
"Remove the first occurrence of *value*.  If not found, raises a :exc:"
"`ValueError`."
msgstr ""
"Удалите первое вхождение *значения*. Если не найден, выдает :exc:"
"`ValueError`."

#: ../../library/collections.rst:560
msgid "Reverse the elements of the deque in-place and then return ``None``."
msgstr ""
"Поменяйте местами элементы двухсторонней очереди, а затем верните None."

#: ../../library/collections.rst:567
msgid ""
"Rotate the deque *n* steps to the right.  If *n* is negative, rotate to the "
"left."
msgstr ""
"Поверните дек *n* шагов вправо. Если *n* отрицательно, поверните влево."

#: ../../library/collections.rst:570
msgid ""
"When the deque is not empty, rotating one step to the right is equivalent to "
"``d.appendleft(d.pop())``, and rotating one step to the left is equivalent "
"to ``d.append(d.popleft())``."
msgstr ""
"Когда дек не пуст, поворот на один шаг вправо эквивалентен ``d.appendleft(d."
"pop())``, а поворот на один шаг влево эквивалентен ``d.append(d.popleft) "
"())``."

#: ../../library/collections.rst:575
msgid "Deque objects also provide one read-only attribute:"
msgstr "Объекты Deque также предоставляют один атрибут только для чтения:"

#: ../../library/collections.rst:579
msgid "Maximum size of a deque or ``None`` if unbounded."
msgstr "Максимальный размер дека или «Нет», если он неограничен."

#: ../../library/collections.rst:584
msgid ""
"In addition to the above, deques support iteration, pickling, ``len(d)``, "
"``reversed(d)``, ``copy.copy(d)``, ``copy.deepcopy(d)``, membership testing "
"with the :keyword:`in` operator, and subscript references such as ``d[0]`` "
"to access the first element.  Indexed access is *O*\\ (1) at both ends but "
"slows to *O*\\ (*n*) in the middle.  For fast random access, use lists "
"instead."
msgstr ""
"В дополнение к вышесказанному, деки поддерживают итерацию, травление, "
"``len(d)``, ``reversed(d)``, ``copy.copy(d)``, ``copy.deepcopy(d)` `, "
"проверка членства с помощью оператора :keyword:`in` и ссылки на индексы, "
"такие как ``d[0]`` для доступа к первому элементу. Индексированный доступ "
"равен *O*\\ (1) на обоих концах, но замедляется до *O*\\ (*n*) в середине. "
"Для быстрого произвольного доступа используйте вместо этого списки."

#: ../../library/collections.rst:590
msgid ""
"Starting in version 3.5, deques support ``__add__()``, ``__mul__()``, and "
"``__imul__()``."
msgstr ""
"Начиная с версии 3.5, деки поддерживают ``__add__()``, ``__mul__()`` и "
"``__imul__()``."

#: ../../library/collections.rst:593
msgid "Example:"
msgstr "Пример:"

#: ../../library/collections.rst:650
msgid ":class:`deque` Recipes"
msgstr "Рецепты :class:`deque`"

#: ../../library/collections.rst:652
msgid "This section shows various approaches to working with deques."
msgstr "В этом разделе показаны различные подходы к работе с деками."

#: ../../library/collections.rst:654
msgid ""
"Bounded length deques provide functionality similar to the ``tail`` filter "
"in Unix::"
msgstr ""
"Деки ограниченной длины предоставляют функциональность, аналогичную фильтру "
"«хвост» в Unix:"

#: ../../library/collections.rst:662
msgid ""
"Another approach to using deques is to maintain a sequence of recently added "
"elements by appending to the right and popping to the left::"
msgstr ""
"Другой подход к использованию деков — поддерживать последовательность "
"недавно добавленных элементов путем добавления справа и удаления слева:"

#: ../../library/collections.rst:677
msgid ""
"A `round-robin scheduler <https://en.wikipedia.org/wiki/Round-"
"robin_scheduling>`_ can be implemented with input iterators stored in a :"
"class:`deque`.  Values are yielded from the active iterator in position "
"zero.  If that iterator is exhausted, it can be removed with :meth:`~deque."
"popleft`; otherwise, it can be cycled back to the end with the :meth:`~deque."
"rotate` method::"
msgstr ""
"`Планировщик циклического перебора <https://en.wikipedia.org/wiki/Round-"
"robin_scheduling>`_ может быть реализован с помощью входных итераторов, "
"хранящихся в :class:`deque`. Значения получаются из активного итератора в "
"нулевой позиции. Если этот итератор исчерпан, его можно удалить с помощью :"
"meth:`~deque.popleft`; в противном случае его можно вернуться к концу с "
"помощью метода :meth:`~deque.rotate`::"

#: ../../library/collections.rst:696
msgid ""
"The :meth:`~deque.rotate` method provides a way to implement :class:`deque` "
"slicing and deletion.  For example, a pure Python implementation of ``del "
"d[n]`` relies on the ``rotate()`` method to position elements to be popped::"
msgstr ""
"Метод :meth:`~deque.rotate` предоставляет способ реализации нарезки и "
"удаления :class:`deque`. Например, реализация del d[n]`` на чистом Python "
"использует метод Rotate() для позиционирования элементов, которые необходимо "
"вытолкнуть:"

#: ../../library/collections.rst:705
msgid ""
"To implement :class:`deque` slicing, use a similar approach applying :meth:"
"`~deque.rotate` to bring a target element to the left side of the deque. "
"Remove old entries with :meth:`~deque.popleft`, add new entries with :meth:"
"`~deque.extend`, and then reverse the rotation. With minor variations on "
"that approach, it is easy to implement Forth style stack manipulations such "
"as ``dup``, ``drop``, ``swap``, ``over``, ``pick``, ``rot``, and ``roll``."
msgstr ""
"Чтобы реализовать нарезку :class:`deque`, используйте аналогичный подход, "
"применяя :meth:`~deque.rotate`, чтобы переместить целевой элемент в левую "
"часть дека. Удалите старые записи с помощью :meth:`~deque.popleft`, добавьте "
"новые записи с помощью :meth:`~deque.extend`, а затем измените вращение. С "
"небольшими вариациями этого подхода легко реализовать такие манипуляции со "
"стеком в стиле Форта, как ``dup``, ``drop``, ``swap``, ``over``, ``pick``, "
"`` гниль`` и ``ролл``."

#: ../../library/collections.rst:715
msgid ":class:`defaultdict` objects"
msgstr "Объекты :class:`defaultdict`"

#: ../../library/collections.rst:719
msgid ""
"Return a new dictionary-like object.  :class:`defaultdict` is a subclass of "
"the built-in :class:`dict` class.  It overrides one method and adds one "
"writable instance variable.  The remaining functionality is the same as for "
"the :class:`dict` class and is not documented here."
msgstr ""
"Верните новый объект, подобный словарю. :class:`defaultdict` является "
"подклассом встроенного класса :class:`dict`. Он переопределяет один метод и "
"добавляет одну записываемую переменную экземпляра. Остальная "
"функциональность такая же, как и у класса :class:`dict`, и здесь не "
"документирована."

#: ../../library/collections.rst:724
msgid ""
"The first argument provides the initial value for the :attr:"
"`default_factory` attribute; it defaults to ``None``. All remaining "
"arguments are treated the same as if they were passed to the :class:`dict` "
"constructor, including keyword arguments."
msgstr ""
"Первый аргумент предоставляет начальное значение атрибута :attr:"
"`default_factory`; по умолчанию установлено значение «Нет». Все остальные "
"аргументы обрабатываются так же, как если бы они были переданы конструктору :"
"class:`dict`, включая аргументы ключевых слов."

#: ../../library/collections.rst:730
msgid ""
":class:`defaultdict` objects support the following method in addition to the "
"standard :class:`dict` operations:"
msgstr ""
"Объекты :class:`defaultdict` поддерживают следующий метод в дополнение к "
"стандартным операциям :class:`dict`:"

#: ../../library/collections.rst:735
msgid ""
"If the :attr:`default_factory` attribute is ``None``, this raises a :exc:"
"`KeyError` exception with the *key* as argument."
msgstr ""
"Если атрибут :attr:`default_factory` имеет значение ``None``, это вызывает "
"исключение :exc:`KeyError` с аргументом *key*."

#: ../../library/collections.rst:738
msgid ""
"If :attr:`default_factory` is not ``None``, it is called without arguments "
"to provide a default value for the given *key*, this value is inserted in "
"the dictionary for the *key*, and returned."
msgstr ""
"Если :attr:`default_factory` не равен ``None``, он вызывается без "
"аргументов, чтобы предоставить значение по умолчанию для данного *ключа*, "
"это значение вставляется в словарь для *ключа* и возвращается."

#: ../../library/collections.rst:742
msgid ""
"If calling :attr:`default_factory` raises an exception this exception is "
"propagated unchanged."
msgstr ""
"Если вызов :attr:`default_factory` вызывает исключение, это исключение "
"распространяется без изменений."

#: ../../library/collections.rst:745
msgid ""
"This method is called by the :meth:`~object.__getitem__` method of the :"
"class:`dict` class when the requested key is not found; whatever it returns "
"or raises is then returned or raised by :meth:`~object.__getitem__`."
msgstr ""
"Этот метод вызывается методом :meth:`~object.__getitem__` класса :class:"
"`dict`, когда запрошенный ключ не найден; все, что он возвращает или "
"генерирует, затем возвращается или вызывается :meth:`~object.__getitem__`."

#: ../../library/collections.rst:749
msgid ""
"Note that :meth:`__missing__` is *not* called for any operations besides :"
"meth:`~object.__getitem__`. This means that :meth:`get` will, like normal "
"dictionaries, return ``None`` as a default rather than using :attr:"
"`default_factory`."
msgstr ""
"Обратите внимание, что :meth:`__missing__` *не* вызывается ни для каких "
"операций, кроме :meth:`~object.__getitem__`. Это означает, что :meth:`get`, "
"как и обычные словари, будет возвращать ``None`` по умолчанию, а не "
"использовать :attr:`default_factory`."

#: ../../library/collections.rst:755
msgid ":class:`defaultdict` objects support the following instance variable:"
msgstr ""
"Объекты :class:`defaultdict` поддерживают следующую переменную экземпляра:"

#: ../../library/collections.rst:760
msgid ""
"This attribute is used by the :meth:`__missing__` method; it is initialized "
"from the first argument to the constructor, if present, or to ``None``, if "
"absent."
msgstr ""
"Этот атрибут используется методом :meth:`__missing__`; он инициализируется "
"первым аргументом конструктора, если он присутствует, или значением None, "
"если он отсутствует."

#: ../../library/collections.rst:764 ../../library/collections.rst:1180
msgid ""
"Added merge (``|``) and update (``|=``) operators, specified in :pep:`584`."
msgstr ""
"Добавлены операторы слияния (``|``) и обновления (``|=``), указанные в :pep:"
"`584`."

#: ../../library/collections.rst:770
msgid ":class:`defaultdict` Examples"
msgstr ":class:`defaultdict` примеры"

#: ../../library/collections.rst:772
msgid ""
"Using :class:`list` as the :attr:`~defaultdict.default_factory`, it is easy "
"to group a sequence of key-value pairs into a dictionary of lists:"
msgstr ""
"Используя :class:`list` в качестве :attr:`~defaultdict.default_factory`, "
"можно легко сгруппировать последовательность пар ключ-значение в словарь "
"списков:"

#: ../../library/collections.rst:783
msgid ""
"When each key is encountered for the first time, it is not already in the "
"mapping; so an entry is automatically created using the :attr:`~defaultdict."
"default_factory` function which returns an empty :class:`list`.  The :meth:"
"`list.append` operation then attaches the value to the new list.  When keys "
"are encountered again, the look-up proceeds normally (returning the list for "
"that key) and the :meth:`list.append` operation adds another value to the "
"list. This technique is simpler and faster than an equivalent technique "
"using :meth:`dict.setdefault`:"
msgstr ""
"Когда каждый ключ встречается впервые, его еще нет в сопоставлении; поэтому "
"запись создается автоматически с помощью функции :attr:`~defaultdict."
"default_factory`, которая возвращает пустой :class:`list`. Затем операция :"
"meth:`list.append` присоединяет значение к новому списку. Когда ключи "
"встречаются снова, поиск продолжается обычным образом (возвращается список "
"для этого ключа), а операция :meth:`list.append` добавляет в список еще одно "
"значение. Этот метод проще и быстрее, чем эквивалентный метод, использующий :"
"meth:`dict.setdefault`:"

#: ../../library/collections.rst:798
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`int` makes the :"
"class:`defaultdict` useful for counting (like a bag or multiset in other "
"languages):"
msgstr ""
"Установка :attr:`~defaultdict.default_factory` в :class:`int` делает :class:"
"`defaultdict` полезным для подсчета (как мешок или мультимножество на других "
"языках):"

#: ../../library/collections.rst:810
msgid ""
"When a letter is first encountered, it is missing from the mapping, so the :"
"attr:`~defaultdict.default_factory` function calls :func:`int` to supply a "
"default count of zero.  The increment operation then builds up the count for "
"each letter."
msgstr ""
"Когда буква встречается впервые, она отсутствует в сопоставлении, поэтому "
"функция :attr:`~defaultdict.default_factory` вызывает :func:`int`, чтобы "
"предоставить нулевой счетчик по умолчанию. Затем операция приращения "
"увеличивает счетчик для каждой буквы."

#: ../../library/collections.rst:814
msgid ""
"The function :func:`int` which always returns zero is just a special case of "
"constant functions.  A faster and more flexible way to create constant "
"functions is to use a lambda function which can supply any constant value "
"(not just zero):"
msgstr ""
"Функция :func:`int`, которая всегда возвращает ноль, является частным "
"случаем константных функций. Более быстрый и гибкий способ создания "
"константных функций — использовать лямбда-функцию, которая может "
"предоставлять любое постоянное значение (не только ноль):"

#: ../../library/collections.rst:826
msgid ""
"Setting the :attr:`~defaultdict.default_factory` to :class:`set` makes the :"
"class:`defaultdict` useful for building a dictionary of sets:"
msgstr ""
"Установка для :attr:`~defaultdict.default_factory` значения :class:`set` "
"делает :class:`defaultdict` полезным для создания словаря множеств:"

#: ../../library/collections.rst:839
msgid ":func:`namedtuple` Factory Function for Tuples with Named Fields"
msgstr ":func:`namedtuple` фабрика функций для кортежей с именованными полями"

#: ../../library/collections.rst:841
msgid ""
"Named tuples assign meaning to each position in a tuple and allow for more "
"readable, self-documenting code.  They can be used wherever regular tuples "
"are used, and they add the ability to access fields by name instead of "
"position index."
msgstr ""
"Именованные кортежи присваивают значение каждой позиции в кортеже и "
"обеспечивают более читаемый самодокументированный код. Они могут быть "
"использованы там же, гже используются обычные кортежи и добавляют "
"способность доступа к полю по имени вместо индекса позиции."

#: ../../library/collections.rst:847
msgid ""
"Returns a new tuple subclass named *typename*.  The new subclass is used to "
"create tuple-like objects that have fields accessible by attribute lookup as "
"well as being indexable and iterable.  Instances of the subclass also have a "
"helpful docstring (with typename and field_names) and a helpful :meth:"
"`__repr__` method which lists the tuple contents in a ``name=value`` format."
msgstr ""
"Возвращает новый подкласс кортежей с именем *typename*. Новый подкласс "
"используется для создания кортеж-подобных объектов, которые имеют поля, "
"доступные для поиска атрибутов, также, как и индексируемые и итерируемые. "
"Экземпляры подкласса также имеют полезную строку (с typename и field_name) и "
"полезный метод :meth:`__repr__`, который перечисляет содержимое кортежа в "
"формате ``name=value``."

#: ../../library/collections.rst:853
msgid ""
"The *field_names* are a sequence of strings such as ``['x', 'y']``. "
"Alternatively, *field_names* can be a single string with each fieldname "
"separated by whitespace and/or commas, for example ``'x y'`` or ``'x, y'``."
msgstr ""
"*field_names* это последовательность строк типа ``['x', 'y']``. Кроме того, "
"*field_names* может быть одной строкой с каждым именем поля, разделенным "
"пробелами и/или запятыми, например ``'x y'`` или ``'x, y'``."

#: ../../library/collections.rst:857
msgid ""
"Any valid Python identifier may be used for a fieldname except for names "
"starting with an underscore.  Valid identifiers consist of letters, digits, "
"and underscores but do not start with a digit or underscore and cannot be a :"
"mod:`keyword` such as *class*, *for*, *return*, *global*, *pass*, or *raise*."
msgstr ""
"Для имени поля может использоваться любой допустимый идентификатор Python, "
"за исключением имен, начинающихся с символа подчеркивания. Допустимые "
"идентификаторы состоят из букв, подчеркивания, но не начинаются с цифры или "
"подчеркивания и не могут быть ключевым словом :mod:`keyword`, таким как "
"*class*, *for*, *return*, *global*, *pass*, or *raise*."

#: ../../library/collections.rst:863
msgid ""
"If *rename* is true, invalid fieldnames are automatically replaced with "
"positional names.  For example, ``['abc', 'def', 'ghi', 'abc']`` is "
"converted to ``['abc', '_1', 'ghi', '_3']``, eliminating the keyword ``def`` "
"and the duplicate fieldname ``abc``."
msgstr ""
"Если *rename* имеет значение true, недопустимые имена полей автоматически "
"заменяются позиционными именами. Например, ``['abc', 'def', 'ghi', 'abc']`` "
"преобразуется в ``['abc', '_1', 'ghi', '_3']``, исключая ключевое слово "
"``def`` и повторяющееся имя поля ``abc``."

#: ../../library/collections.rst:868
msgid ""
"*defaults* can be ``None`` or an :term:`iterable` of default values. Since "
"fields with a default value must come after any fields without a default, "
"the *defaults* are applied to the rightmost parameters.  For example, if the "
"fieldnames are ``['x', 'y', 'z']`` and the defaults are ``(1, 2)``, then "
"``x`` will be a required argument, ``y`` will default to ``1``, and ``z`` "
"will default to ``2``."
msgstr ""
"*defaults* может быть ``None`` или :term:`iterable` значений по умолчанию. "
"Поскольку поля со значением по умолчанию должны идти после полей без "
"значений по умолчанию, *значения по умолчанию* применяются к самым правым "
"параметрам. Например, если имена полей — ``['x', 'y', 'z']`` и значения по "
"умолчанию: ``(1, 2)``, то ``x`` будет обязательным аргументом, ``y`` будет "
"иметь значение по умолчанию ``1``, а ``z`` будет иметь значение по умолчанию "
"``2``."

#: ../../library/collections.rst:875
msgid ""
"If *module* is defined, the ``__module__`` attribute of the named tuple is "
"set to that value."
msgstr ""

#: ../../library/collections.rst:878
msgid ""
"Named tuple instances do not have per-instance dictionaries, so they are "
"lightweight and require no more memory than regular tuples."
msgstr ""
"Именованные экземпляры кортежей не имеют словарей для каждого экземпляра, "
"поэтому они легкие и требуют не больше памяти, чем обычные кортежи."

#: ../../library/collections.rst:881
msgid ""
"To support pickling, the named tuple class should be assigned to a variable "
"that matches *typename*."
msgstr ""
"Для поддержки травления именованный класс кортежа должен быть присвоен "
"переменной, соответствующей *typename*."

#: ../../library/collections.rst:884
msgid "Added support for *rename*."
msgstr "Добавлена поддержка *rename*."

#: ../../library/collections.rst:887
msgid ""
"The *verbose* and *rename* parameters became :ref:`keyword-only arguments "
"<keyword-only_parameter>`."
msgstr ""
"Параметры *verbose* и *rename* стали :ref:`аргументами только для ключевых "
"слов <keyword-only_parameter>`."

#: ../../library/collections.rst:891
msgid "Added the *module* parameter."
msgstr "Добавлен параметр *module*."

#: ../../library/collections.rst:894
msgid "Removed the *verbose* parameter and the :attr:`_source` attribute."
msgstr "Удален параметр *verbose* и атрибут :attr:`_source`."

#: ../../library/collections.rst:897
msgid ""
"Added the *defaults* parameter and the :attr:`_field_defaults` attribute."
msgstr "Добавлен параметр *defaults* и атрибут :attr:`_field_defaults`."

#: ../../library/collections.rst:917
msgid ""
"Named tuples are especially useful for assigning field names to result "
"tuples returned by the :mod:`csv` or :mod:`sqlite3` modules::"
msgstr ""
"Именованные кортежи особенно полезны для назначения имен полей к "
"результирующим кортежам, возвращаемым через модули :mod:`csv` или :mod:"
"`sqlite3` modules::"

#: ../../library/collections.rst:933
msgid ""
"In addition to the methods inherited from tuples, named tuples support three "
"additional methods and two attributes.  To prevent conflicts with field "
"names, the method and attribute names start with an underscore."
msgstr ""
"Помимо методов, унаследованных от кортежей, именованные кортежи поддерживают "
"три дополнительных метода и два атрибута. Чтобы предотвратить конфликты с "
"именами полей, имена методов и атрибутов начинаются с подчеркивания."

#: ../../library/collections.rst:939
msgid ""
"Class method that makes a new instance from an existing sequence or iterable."
msgstr ""
"Метод класса создает новый экземпляр класса из существующей "
"последовательности или итерируемого объекта."

#: ../../library/collections.rst:949
msgid ""
"Return a new :class:`dict` which maps field names to their corresponding "
"values:"
msgstr ""
"Верните новый :class:`dict`, который сопоставляет имена полей с "
"соответствующими значениями:"

#: ../../library/collections.rst:958
msgid "Returns an :class:`OrderedDict` instead of a regular :class:`dict`."
msgstr "Возвращает :class:`OrderedDict` вместо обычного :class:`dict`."

#: ../../library/collections.rst:961
msgid ""
"Returns a regular :class:`dict` instead of an :class:`OrderedDict`. As of "
"Python 3.7, regular dicts are guaranteed to be ordered.  If the extra "
"features of :class:`OrderedDict` are required, the suggested remediation is "
"to cast the result to the desired type: ``OrderedDict(nt._asdict())``."
msgstr ""
"Возвращает обычный :class:`dict` вместо :class:`OrderedDict`. Начиная с "
"Python 3.7, обычные словари гарантированно упорядочиваются. Если требуются "
"дополнительные возможности :class:`OrderedDict`, предлагаемое исправление "
"состоит в том, чтобы привести результат к желаемому типу: ``OrderedDict(nt."
"_asdict())``."

#: ../../library/collections.rst:970
msgid ""
"Return a new instance of the named tuple replacing specified fields with new "
"values::"
msgstr ""
"Вернуть новый экземпляр именованного кортежа, заменив указанные поля новыми "
"значениями::"

#: ../../library/collections.rst:982
msgid ""
"Tuple of strings listing the field names.  Useful for introspection and for "
"creating new named tuple types from existing named tuples."
msgstr ""
"Кортеж строк, в котором перечислены имена полей. Полезно для самоанализа и "
"создания новых именованных типов кортежей из существующих именованных "
"кортежей."

#: ../../library/collections.rst:997
msgid "Dictionary mapping field names to default values."
msgstr "Сопоставление имен полей словаря со значениями по умолчанию."

#: ../../library/collections.rst:1007
msgid ""
"To retrieve a field whose name is stored in a string, use the :func:"
"`getattr` function:"
msgstr ""
"Чтобы получить поле, имя которого хранится в строке, используйте функцию :"
"func:`getattr`:"

#: ../../library/collections.rst:1013
msgid ""
"To convert a dictionary to a named tuple, use the double-star-operator (as "
"described in :ref:`tut-unpacking-arguments`):"
msgstr ""
"Чтобы преобразовать словарь в именованный кортеж, используйте оператор "
"двойной звезды (как описано в :ref:`tut-unpacking-arguments`):"

#: ../../library/collections.rst:1020
msgid ""
"Since a named tuple is a regular Python class, it is easy to add or change "
"functionality with a subclass.  Here is how to add a calculated field and a "
"fixed-width print format:"
msgstr ""
"Поскольку именованный кортеж является обычным классом Python, "
"функциональность легко добавить или изменить с помощью подкласса. Вот как "
"добавить вычисляемое поле и формат печати фиксированной ширины:"

#: ../../library/collections.rst:1039
msgid ""
"The subclass shown above sets ``__slots__`` to an empty tuple.  This helps "
"keep memory requirements low by preventing the creation of instance "
"dictionaries."
msgstr ""
"Показанный выше подкласс устанавливает ``__slots__`` в пустой кортеж. Это "
"помогает снизить требования к памяти, предотвращая создание словарей "
"экземпляров."

#: ../../library/collections.rst:1042
msgid ""
"Subclassing is not useful for adding new, stored fields.  Instead, simply "
"create a new named tuple type from the :attr:`~somenamedtuple._fields` "
"attribute:"
msgstr ""
"Создание подклассов бесполезно для добавления новых сохраненных полей. "
"Вместо этого просто создайте новый именованный тип кортежа из атрибута :attr:"
"`~somenamedtuple._fields`:"

#: ../../library/collections.rst:1047
msgid ""
"Docstrings can be customized by making direct assignments to the ``__doc__`` "
"fields:"
msgstr ""
"Строки документации можно настроить путем прямого присвоения полям "
"``__doc__``:"

#: ../../library/collections.rst:1056
msgid "Property docstrings became writeable."
msgstr "Строки документации свойств стали доступны для записи."

#: ../../library/collections.rst:1061
msgid ""
"See :class:`typing.NamedTuple` for a way to add type hints for named "
"tuples.  It also provides an elegant notation using the :keyword:`class` "
"keyword::"
msgstr ""
"См. :class:`typing.NamedTuple`, чтобы узнать, как добавить подсказки типа "
"для именованных кортежей. Он также предоставляет элегантную нотацию с "
"использованием ключевого слова :keyword:`class`::"

#: ../../library/collections.rst:1070
msgid ""
"See :meth:`types.SimpleNamespace` for a mutable namespace based on an "
"underlying dictionary instead of a tuple."
msgstr ""
"См. :meth:`types.SimpleNamespace` для получения информации об изменяемом "
"пространстве имен, основанном на базовом словаре, а не на кортеже."

#: ../../library/collections.rst:1073
msgid ""
"The :mod:`dataclasses` module provides a decorator and functions for "
"automatically adding generated special methods to user-defined classes."
msgstr ""
"Модуль :mod:`dataclasses` предоставляет декоратор и функции для "
"автоматического добавления сгенерированных специальных методов в "
"определяемые пользователем классы."

#: ../../library/collections.rst:1078
msgid ":class:`OrderedDict` objects"
msgstr "Объекты :class:`OrderedDict`"

#: ../../library/collections.rst:1080
msgid ""
"Ordered dictionaries are just like regular dictionaries but have some extra "
"capabilities relating to ordering operations.  They have become less "
"important now that the built-in :class:`dict` class gained the ability to "
"remember insertion order (this new behavior became guaranteed in Python 3.7)."
msgstr ""
"Упорядоченные словари аналогичны обычным словарям, но имеют некоторые "
"дополнительные возможности, связанные с операциями упорядочивания. Они стали "
"менее важными теперь, когда встроенный класс :class:`dict` получил "
"возможность запоминать порядок вставки (это новое поведение стало "
"гарантированным в Python 3.7)."

#: ../../library/collections.rst:1086
msgid "Some differences from :class:`dict` still remain:"
msgstr "Некоторые отличия от :class:`dict` все еще остаются:"

#: ../../library/collections.rst:1088
msgid ""
"The regular :class:`dict` was designed to be very good at mapping "
"operations.  Tracking insertion order was secondary."
msgstr ""
"Обычный :class:`dict` был разработан, чтобы очень хорошо справляться с "
"операциями сопоставления. Отслеживание заказа на размещение было "
"второстепенным."

#: ../../library/collections.rst:1091
msgid ""
"The :class:`OrderedDict` was designed to be good at reordering operations. "
"Space efficiency, iteration speed, and the performance of update operations "
"were secondary."
msgstr ""
":class:`OrderedDict` был разработан для удобного изменения порядка операций. "
"Эффективность использования пространства, скорость итераций и "
"производительность операций обновления были второстепенными."

#: ../../library/collections.rst:1095
msgid ""
"The :class:`OrderedDict` algorithm can handle frequent reordering operations "
"better than :class:`dict`.  As shown in the recipes below, this makes it "
"suitable for implementing various kinds of LRU caches."
msgstr ""
"Алгоритм :class:`OrderedDict` может обрабатывать частые операции изменения "
"порядка лучше, чем :class:`dict`. Как показано в рецептах ниже, это делает "
"его подходящим для реализации различных типов кэшей LRU."

#: ../../library/collections.rst:1099
msgid ""
"The equality operation for :class:`OrderedDict` checks for matching order."
msgstr ""
"Операция равенства для :class:`OrderedDict` проверяет соответствие порядка."

#: ../../library/collections.rst:1101
msgid ""
"A regular :class:`dict` can emulate the order sensitive equality test with "
"``p == q and all(k1 == k2 for k1, k2 in zip(p, q))``."
msgstr ""
"Обычный :class:`dict` может эмулировать чувствительную к порядку проверку "
"равенства с помощью ``p == q и all(k1 == k2 for k1, k2 in zip(p, q))``."

#: ../../library/collections.rst:1104
msgid ""
"The :meth:`popitem` method of :class:`OrderedDict` has a different "
"signature.  It accepts an optional argument to specify which item is popped."
msgstr ""
"Метод :meth:`popitem` класса :class:`OrderedDict` имеет другую сигнатуру. Он "
"принимает необязательный аргумент, указывающий, какой элемент вытаскивается."

#: ../../library/collections.rst:1107
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.popitem(last=True)`` "
"with ``d.popitem()`` which is guaranteed to pop the rightmost (last) item."
msgstr ""
"Обычный :class:`dict` может эмулировать ``od.popitem(last=True)`` "
"OrderedDict с помощью ``d.popitem()``, который гарантированно выталкивает "
"самый правый (последний) элемент."

#: ../../library/collections.rst:1110
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.popitem(last=False)`` "
"with ``(k := next(iter(d)), d.pop(k))`` which will return and remove the "
"leftmost (first) item if it exists."
msgstr ""
"Обычный :class:`dict` может эмулировать ``od.popitem(last=False)`` "
"OrderedDict с помощью ``(k := next(iter(d)), d.pop(k))``, который вернет и "
"удалите самый левый (первый) элемент, если он существует."

#: ../../library/collections.rst:1114
msgid ""
":class:`OrderedDict` has a :meth:`move_to_end` method to efficiently "
"reposition an element to an endpoint."
msgstr ""
":class:`OrderedDict` имеет метод :meth:`move_to_end` для эффективного "
"перемещения элемента в конечную точку."

#: ../../library/collections.rst:1117
msgid ""
"A regular :class:`dict` can emulate OrderedDict's ``od.move_to_end(k, "
"last=True)`` with ``d[k] = d.pop(k)`` which will move the key and its "
"associated value to the rightmost (last) position."
msgstr ""
"Обычный :class:`dict` может эмулировать ``od.move_to_end(k, Last=True)`` "
"OrderedDict с ``d[k] = d.pop(k)``, который переместит ключ и связанное с ним "
"значение. в крайнее правое (последнее) положение."

#: ../../library/collections.rst:1121
msgid ""
"A regular :class:`dict` does not have an efficient equivalent for "
"OrderedDict's ``od.move_to_end(k, last=False)`` which moves the key and its "
"associated value to the leftmost (first) position."
msgstr ""
"Обычный :class:`dict` не имеет эффективного эквивалента ``od.move_to_end(k,"
"last=False)`` OrderedDict, который перемещает ключ и связанное с ним "
"значение в самую левую (первую) позицию."

#: ../../library/collections.rst:1125
msgid "Until Python 3.8, :class:`dict` lacked a :meth:`__reversed__` method."
msgstr "До Python 3.8 в :class:`dict` не было метода :meth:`__reversed__`."

#: ../../library/collections.rst:1130
msgid ""
"Return an instance of a :class:`dict` subclass that has methods specialized "
"for rearranging dictionary order."
msgstr ""
"Возвращает экземпляр подкласса :class:`dict`, который имеет методы, "
"специализированные для изменения порядка словаря."

#: ../../library/collections.rst:1137
msgid ""
"The :meth:`popitem` method for ordered dictionaries returns and removes a "
"(key, value) pair.  The pairs are returned in :abbr:`LIFO (last-in, first-"
"out)` order if *last* is true or :abbr:`FIFO (first-in, first-out)` order if "
"false."
msgstr ""
"Метод :meth:`popitem` для упорядоченных словарей возвращает и удаляет пару "
"(ключ, значение). Пары возвращаются в порядке :abbr:`LIFO (последний вошел, "
"первый обслужен)`, если *last* имеет значение true, или в порядке :abbr:"
"`FIFO (первым вошел, первым обслужен)`, если значение false."

#: ../../library/collections.rst:1144
msgid ""
"Move an existing *key* to either end of an ordered dictionary.  The item is "
"moved to the right end if *last* is true (the default) or to the beginning "
"if *last* is false.  Raises :exc:`KeyError` if the *key* does not exist:"
msgstr ""
"Переместите существующий *ключ* в любой конец упорядоченного словаря. "
"Элемент перемещается в правый конец, если *last* имеет значение true (по "
"умолчанию), или в начало, если *last* имеет значение false. Вызывает :exc:"
"`KeyError`, если *ключ* не существует:"

#: ../../library/collections.rst:1161
msgid ""
"In addition to the usual mapping methods, ordered dictionaries also support "
"reverse iteration using :func:`reversed`."
msgstr ""
"В дополнение к обычным методам отображения упорядоченные словари также "
"поддерживают обратную итерацию с использованием :func:`reversed`."

#: ../../library/collections.rst:1164
msgid ""
"Equality tests between :class:`OrderedDict` objects are order-sensitive and "
"are implemented as ``list(od1.items())==list(od2.items())``. Equality tests "
"between :class:`OrderedDict` objects and other :class:`~collections.abc."
"Mapping` objects are order-insensitive like regular dictionaries.  This "
"allows :class:`OrderedDict` objects to be substituted anywhere a regular "
"dictionary is used."
msgstr ""

#: ../../library/collections.rst:1171
msgid ""
"The items, keys, and values :term:`views <dictionary view>` of :class:"
"`OrderedDict` now support reverse iteration using :func:`reversed`."
msgstr ""
"Элементы, ключи и значения :term:`views <dictionary view>` :class:"
"`OrderedDict` теперь поддерживают обратную итерацию с использованием :func:"
"`reversed`."

#: ../../library/collections.rst:1175
msgid ""
"With the acceptance of :pep:`468`, order is retained for keyword arguments "
"passed to the :class:`OrderedDict` constructor and its :meth:`update` method."
msgstr ""
"При принятии :pep:`468` порядок сохраняется для аргументов ключевых слов, "
"передаваемых конструктору :class:`OrderedDict` и его методу :meth:`update`."

#: ../../library/collections.rst:1185
msgid ":class:`OrderedDict` Examples and Recipes"
msgstr ":class:`OrderedDict` Примеры и рецепты"

#: ../../library/collections.rst:1187
msgid ""
"It is straightforward to create an ordered dictionary variant that remembers "
"the order the keys were *last* inserted. If a new entry overwrites an "
"existing entry, the original insertion position is changed and moved to the "
"end::"
msgstr ""
"Создать упорядоченный вариант словаря, который запоминает порядок "
"*последней* вставки* ключей, несложно. Если новая запись перезаписывает "
"существующую, исходная позиция вставки изменяется и перемещается в конец:"

#: ../../library/collections.rst:1199
msgid ""
"An :class:`OrderedDict` would also be useful for implementing variants of :"
"func:`functools.lru_cache`:"
msgstr ""
":class:`OrderedDict` также будет полезен для реализации вариантов :func:"
"`functools.lru_cache`:"

#: ../../library/collections.rst:1297
msgid ":class:`UserDict` objects"
msgstr "Объекты :class:`UserDict`"

#: ../../library/collections.rst:1299
msgid ""
"The class, :class:`UserDict` acts as a wrapper around dictionary objects. "
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`dict`; however, this class can be easier to "
"work with because the underlying dictionary is accessible as an attribute."
msgstr ""
"Класс :class:`UserDict` действует как оболочка вокруг объектов словаря. "
"Потребность в этом классе была частично заменена возможностью создания "
"подкласса непосредственно из :class:`dict`; однако с этим классом может быть "
"проще работать, поскольку базовый словарь доступен как атрибут."

#: ../../library/collections.rst:1307
msgid ""
"Class that simulates a dictionary.  The instance's contents are kept in a "
"regular dictionary, which is accessible via the :attr:`data` attribute of :"
"class:`UserDict` instances.  If *initialdata* is provided, :attr:`data` is "
"initialized with its contents; note that a reference to *initialdata* will "
"not be kept, allowing it to be used for other purposes."
msgstr ""
"Класс, имитирующий словарь. Содержимое экземпляра хранится в обычном "
"словаре, доступ к которому осуществляется через атрибут :attr:`data` "
"экземпляров :class:`UserDict`. Если указано *initialdata*, :attr:`data` "
"инициализируется своим содержимым; обратите внимание, что ссылка на "
"*initialdata* не будет сохранена, что позволит использовать ее для других "
"целей."

#: ../../library/collections.rst:1313
msgid ""
"In addition to supporting the methods and operations of mappings, :class:"
"`UserDict` instances provide the following attribute:"
msgstr ""
"Помимо поддержки методов и операций сопоставлений, экземпляры :class:"
"`UserDict` предоставляют следующий атрибут:"

#: ../../library/collections.rst:1318
msgid ""
"A real dictionary used to store the contents of the :class:`UserDict` class."
msgstr ""
"Настоящий словарь, используемый для хранения содержимого класса :class:"
"`UserDict`."

#: ../../library/collections.rst:1324
msgid ":class:`UserList` objects"
msgstr "Объекты :class:`UserList`"

#: ../../library/collections.rst:1326
msgid ""
"This class acts as a wrapper around list objects.  It is a useful base class "
"for your own list-like classes which can inherit from them and override "
"existing methods or add new ones.  In this way, one can add new behaviors to "
"lists."
msgstr ""
"Этот класс действует как оболочка объектов списка. Это полезный базовый "
"класс для ваших собственных классов, похожих на списки, которые могут "
"наследовать от них и переопределять существующие методы или добавлять новые. "
"Таким образом, в списки можно добавлять новые варианты поведения."

#: ../../library/collections.rst:1331
msgid ""
"The need for this class has been partially supplanted by the ability to "
"subclass directly from :class:`list`; however, this class can be easier to "
"work with because the underlying list is accessible as an attribute."
msgstr ""
"Потребность в этом классе была частично заменена возможностью создания "
"подкласса непосредственно из :class:`list`; однако с этим классом проще "
"работать, поскольку базовый список доступен как атрибут."

#: ../../library/collections.rst:1337
msgid ""
"Class that simulates a list.  The instance's contents are kept in a regular "
"list, which is accessible via the :attr:`data` attribute of :class:"
"`UserList` instances.  The instance's contents are initially set to a copy "
"of *list*, defaulting to the empty list ``[]``.  *list* can be any iterable, "
"for example a real Python list or a :class:`UserList` object."
msgstr ""
"Класс, имитирующий список. Содержимое экземпляра хранится в обычном списке, "
"доступ к которому осуществляется через атрибут :attr:`data` экземпляров :"
"class:`UserList`. Содержимое экземпляра изначально установлено в копию "
"*list*, по умолчанию используется пустой список ``[]``. *list* может быть "
"любым итерируемым объектом, например реальным списком Python или объектом :"
"class:`UserList`."

#: ../../library/collections.rst:1343
msgid ""
"In addition to supporting the methods and operations of mutable sequences, :"
"class:`UserList` instances provide the following attribute:"
msgstr ""
"Помимо поддержки методов и операций изменяемых последовательностей, "
"экземпляры :class:`UserList` предоставляют следующий атрибут:"

#: ../../library/collections.rst:1348
msgid ""
"A real :class:`list` object used to store the contents of the :class:"
"`UserList` class."
msgstr ""
"Настоящий объект :class:`list`, используемый для хранения содержимого "
"класса :class:`UserList`."

#: ../../library/collections.rst:1351
msgid ""
"**Subclassing requirements:** Subclasses of :class:`UserList` are expected "
"to offer a constructor which can be called with either no arguments or one "
"argument.  List operations which return a new sequence attempt to create an "
"instance of the actual implementation class.  To do so, it assumes that the "
"constructor can be called with a single parameter, which is a sequence "
"object used as a data source."
msgstr ""
"**Требования к созданию подклассов:** Ожидается, что подклассы :class:"
"`UserList` будут предлагать конструктор, который можно вызывать либо без "
"аргументов, либо с одним аргументом. Операции со списком, которые возвращают "
"новую последовательность, пытаются создать экземпляр фактического класса "
"реализации. Для этого предполагается, что конструктор можно вызвать с одним "
"параметром, который представляет собой объект последовательности, "
"используемый в качестве источника данных."

#: ../../library/collections.rst:1358
msgid ""
"If a derived class does not wish to comply with this requirement, all of the "
"special methods supported by this class will need to be overridden; please "
"consult the sources for information about the methods which need to be "
"provided in that case."
msgstr ""
"Если производный класс не желает соответствовать этому требованию, все "
"специальные методы, поддерживаемые этим классом, необходимо будет "
"переопределить; пожалуйста, обратитесь к источникам за информацией о "
"методах, которые необходимо предоставить в этом случае."

#: ../../library/collections.rst:1364
msgid ":class:`UserString` objects"
msgstr "Объекты :class:`UserString`"

#: ../../library/collections.rst:1366
msgid ""
"The class, :class:`UserString` acts as a wrapper around string objects. The "
"need for this class has been partially supplanted by the ability to subclass "
"directly from :class:`str`; however, this class can be easier to work with "
"because the underlying string is accessible as an attribute."
msgstr ""
"Класс :class:`UserString` действует как оболочка строковых объектов. "
"Потребность в этом классе была частично заменена возможностью создания "
"подкласса непосредственно из :class:`str`; однако с этим классом проще "
"работать, поскольку базовая строка доступна как атрибут."

#: ../../library/collections.rst:1374
msgid ""
"Class that simulates a string object.  The instance's content is kept in a "
"regular string object, which is accessible via the :attr:`data` attribute "
"of :class:`UserString` instances.  The instance's contents are initially set "
"to a copy of *seq*.  The *seq* argument can be any object which can be "
"converted into a string using the built-in :func:`str` function."
msgstr ""
"Класс, имитирующий строковый объект. Содержимое экземпляра хранится в "
"обычном строковом объекте, доступ к которому осуществляется через атрибут :"
"attr:`data` экземпляров :class:`UserString`. Содержимое экземпляра "
"изначально установлено в копию *seq*. Аргументом *seq* может быть любой "
"объект, который можно преобразовать в строку с помощью встроенной функции :"
"func:`str`."

#: ../../library/collections.rst:1381
msgid ""
"In addition to supporting the methods and operations of strings, :class:"
"`UserString` instances provide the following attribute:"
msgstr ""
"Помимо поддержки методов и операций со строками, экземпляры :class:"
"`UserString` предоставляют следующий атрибут:"

#: ../../library/collections.rst:1386
msgid ""
"A real :class:`str` object used to store the contents of the :class:"
"`UserString` class."
msgstr ""
"Настоящий объект :class:`str`, используемый для хранения содержимого класса :"
"class:`UserString`."

#: ../../library/collections.rst:1389
msgid ""
"New methods ``__getnewargs__``, ``__rmod__``, ``casefold``, ``format_map``, "
"``isprintable``, and ``maketrans``."
msgstr ""
"Новые методы ``__getnewargs__``, ``__rmod__``, ``casefold``, ``format_map``, "
"``isprintable`` и ``maketrans``."
