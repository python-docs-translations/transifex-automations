# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/concurrent.futures.rst:2
msgid ":mod:`!concurrent.futures` --- Launching parallel tasks"
msgstr ":mod:`!concurrent.futures` --- Запуск параллельных задач"

#: ../../library/concurrent.futures.rst:9
msgid ""
"**Source code:** :source:`Lib/concurrent/futures/thread.py` and :source:`Lib/"
"concurrent/futures/process.py`"
msgstr ""
"**Исходный код:** :source:`Lib/concurrent/futures/thread.py` и :source:`Lib/"
"concurrent/futures/process.py`"

#: ../../library/concurrent.futures.rst:14
msgid ""
"The :mod:`concurrent.futures` module provides a high-level interface for "
"asynchronously executing callables."
msgstr ""
"Модуль :mod:`concurrent.futures` предоставляет высокоуровневый интерфейс для "
"асинхронного выполнения вызываемых объектов."

#: ../../library/concurrent.futures.rst:17
msgid ""
"The asynchronous execution can be performed with threads, using :class:"
"`ThreadPoolExecutor`, or separate processes, using :class:"
"`ProcessPoolExecutor`.  Both implement the same interface, which is defined "
"by the abstract :class:`Executor` class."
msgstr ""
"Асинхронное выполнение может выполняться с помощью потоков, используя :class:"
"`ThreadPoolExecutor`, или отдельных процессов, используя :class:"
"`ProcessPoolExecutor`. Оба реализуют один и тот же интерфейс, который "
"определяется абстрактным классом :class:`Executor`."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Доступность"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"Этот модуль не работает или недоступен на платформах WebAssembly «wasm32-"
"emscripten» и «wasm32-wasi». См. :ref:`wasm-availability` для получения "
"дополнительной информации."

#: ../../library/concurrent.futures.rst:25
msgid "Executor Objects"
msgstr "Объекты исполнителя"

#: ../../library/concurrent.futures.rst:29
msgid ""
"An abstract class that provides methods to execute calls asynchronously.  It "
"should not be used directly, but through its concrete subclasses."
msgstr ""
"Абстрактный класс, предоставляющий методы для асинхронного выполнения "
"вызовов. Его следует использовать не напрямую, а через его конкретные "
"подклассы."

#: ../../library/concurrent.futures.rst:34
msgid ""
"Schedules the callable, *fn*, to be executed as ``fn(*args, **kwargs)`` and "
"returns a :class:`Future` object representing the execution of the "
"callable. ::"
msgstr ""
"Планирует выполнение вызываемого объекта *fn* как ``fn(*args, **kwargs)`` и "
"возвращает объект :class:`Future`, представляющий выполнение вызываемого "
"объекта. ::"

#: ../../library/concurrent.futures.rst:38
msgid ""
"with ThreadPoolExecutor(max_workers=1) as executor:\n"
"    future = executor.submit(pow, 323, 1235)\n"
"    print(future.result())"
msgstr ""
"с ThreadPoolExecutor(max_workers=1) в качестве исполнителя: будущее = "
"executor.submit(pow, 323, 1235) печать(будущее.результат())"

#: ../../library/concurrent.futures.rst:44
msgid "Similar to :func:`map(fn, *iterables) <map>` except:"
msgstr "Аналогично :func:`map(fn, *iterables) <map>`, за исключением:"

#: ../../library/concurrent.futures.rst:46
msgid "the *iterables* are collected immediately rather than lazily;"
msgstr "*итерации* собираются немедленно, а не лениво;"

#: ../../library/concurrent.futures.rst:48
msgid ""
"*fn* is executed asynchronously and several calls to *fn* may be made "
"concurrently."
msgstr ""
"*fn* выполняется асинхронно, и несколько вызовов *fn* могут выполняться "
"одновременно."

#: ../../library/concurrent.futures.rst:51
msgid ""
"The returned iterator raises a :exc:`TimeoutError` if :meth:`~iterator."
"__next__` is called and the result isn't available after *timeout* seconds "
"from the original call to :meth:`Executor.map`. *timeout* can be an int or a "
"float.  If *timeout* is not specified or ``None``, there is no limit to the "
"wait time."
msgstr ""
"Возвращенный итератор вызывает :exc:`TimeoutError`, если :meth:`~iterator."
"__next__` вызывается и результат недоступен по истечении *timeout* секунд с "
"момента исходного вызова :meth:`Executor.map`. *timeout* может быть целым "
"числом или числом с плавающей запятой. Если *timeout* не указан или "
"``None``, время ожидания не ограничено."

#: ../../library/concurrent.futures.rst:57
msgid ""
"If a *fn* call raises an exception, then that exception will be raised when "
"its value is retrieved from the iterator."
msgstr ""
"Если вызов *fn* вызывает исключение, то это исключение будет вызвано при "
"получении его значения от итератора."

#: ../../library/concurrent.futures.rst:60
msgid ""
"When using :class:`ProcessPoolExecutor`, this method chops *iterables* into "
"a number of chunks which it submits to the pool as separate tasks.  The "
"(approximate) size of these chunks can be specified by setting *chunksize* "
"to a positive integer.  For very long iterables, using a large value for "
"*chunksize* can significantly improve performance compared to the default "
"size of 1.  With :class:`ThreadPoolExecutor`, *chunksize* has no effect."
msgstr ""
"При использовании :class:`ProcessPoolExecutor` этот метод разбивает "
"*итерации* на несколько фрагментов, которые отправляются в пул как отдельные "
"задачи. (Приблизительный) размер этих фрагментов можно указать, задав для "
"параметра *chunksize* положительное целое число. Для очень длинных итераций "
"использование большого значения *chunksize* может значительно улучшить "
"производительность по сравнению с размером по умолчанию, равным 1. При "
"использовании :class:`ThreadPoolExecutor` *chunksize* не имеет никакого "
"эффекта."

#: ../../library/concurrent.futures.rst:68
msgid "Added the *chunksize* argument."
msgstr "Добавлен аргумент *chunksize*."

#: ../../library/concurrent.futures.rst:73
msgid ""
"Signal the executor that it should free any resources that it is using when "
"the currently pending futures are done executing.  Calls to :meth:`Executor."
"submit` and :meth:`Executor.map` made after shutdown will raise :exc:"
"`RuntimeError`."
msgstr ""
"Сообщите исполнителю, что он должен освободить все ресурсы, которые он "
"использует, когда выполнение ожидающих в данный момент фьючерсов будет "
"завершено. Вызовы :meth:`Executor.submit` и :meth:`Executor.map`, сделанные "
"после завершения работы, вызовут :exc:`RuntimeError`."

#: ../../library/concurrent.futures.rst:78
msgid ""
"If *wait* is ``True`` then this method will not return until all the pending "
"futures are done executing and the resources associated with the executor "
"have been freed.  If *wait* is ``False`` then this method will return "
"immediately and the resources associated with the executor will be freed "
"when all pending futures are done executing.  Regardless of the value of "
"*wait*, the entire Python program will not exit until all pending futures "
"are done executing."
msgstr ""
"Если *wait* имеет значение True, то этот метод не вернет результат до тех "
"пор, пока все ожидающие фьючерсы не будут выполнены и ресурсы, связанные с "
"исполнителем, не будут освобождены. Если *wait* имеет значение «False», то "
"этот метод немедленно завершит работу, и ресурсы, связанные с исполнителем, "
"будут освобождены, когда все ожидающие фьючерсы будут выполнены. Независимо "
"от значения *wait*, вся программа Python не завершится до тех пор, пока не "
"будут выполнены все ожидающие фьючерсы."

#: ../../library/concurrent.futures.rst:86
msgid ""
"If *cancel_futures* is ``True``, this method will cancel all pending futures "
"that the executor has not started running. Any futures that are completed or "
"running won't be cancelled, regardless of the value of *cancel_futures*."
msgstr ""
"Если *cancel_futures* имеет значение True, этот метод отменит все ожидающие "
"фьючерсы, которые исполнитель не начал запускать. Любые фьючерсы, которые "
"завершены или запущены, не будут отменены, независимо от значения "
"*cancel_futures*."

#: ../../library/concurrent.futures.rst:91
msgid ""
"If both *cancel_futures* and *wait* are ``True``, all futures that the "
"executor has started running will be completed prior to this method "
"returning. The remaining futures are cancelled."
msgstr ""
"Если оба *cancel_futures* и *wait* имеют значение True, все фьючерсы, "
"которые начал выполнять исполнитель, будут завершены до возврата этого "
"метода. Остальные фьючерсы аннулируются."

#: ../../library/concurrent.futures.rst:95
msgid ""
"You can avoid having to call this method explicitly if you use the :keyword:"
"`with` statement, which will shutdown the :class:`Executor` (waiting as if :"
"meth:`Executor.shutdown` were called with *wait* set to ``True``)::"
msgstr ""
"Вы можете избежать необходимости явного вызова этого метода, если "
"используете оператор :keyword:`with`, который завершит работу :class:"
"`Executor` (ожидание, как если бы :meth:`Executor.shutdown` был вызван с "
"установленным *wait* на ``True``)::"

#: ../../library/concurrent.futures.rst:100
msgid ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"
msgstr ""
"import shutil\n"
"with ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src4.txt', 'dest4.txt')"

#: ../../library/concurrent.futures.rst:107
msgid "Added *cancel_futures*."
msgstr "Добавлено *cancel_futures*."

#: ../../library/concurrent.futures.rst:112
msgid "ThreadPoolExecutor"
msgstr "ThreadPoolExecutor"

#: ../../library/concurrent.futures.rst:114
msgid ""
":class:`ThreadPoolExecutor` is an :class:`Executor` subclass that uses a "
"pool of threads to execute calls asynchronously."
msgstr ""
":class:`ThreadPoolExecutor` — это подкласс :class:`Executor`, который "
"использует пул потоков для асинхронного выполнения вызовов."

#: ../../library/concurrent.futures.rst:117
msgid ""
"Deadlocks can occur when the callable associated with a :class:`Future` "
"waits on the results of another :class:`Future`.  For example::"
msgstr ""
"Взаимные блокировки могут возникать, когда вызываемый объект, связанный с :"
"class:`Future`, ожидает результатов другого :class:`Future`. Например::"

#: ../../library/concurrent.futures.rst:120
msgid ""
"import time\n"
"def wait_on_b():\n"
"    time.sleep(5)\n"
"    print(b.result())  # b will never complete because it is waiting on a.\n"
"    return 5\n"
"\n"
"def wait_on_a():\n"
"    time.sleep(5)\n"
"    print(a.result())  # a will never complete because it is waiting on b.\n"
"    return 6\n"
"\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=2)\n"
"a = executor.submit(wait_on_b)\n"
"b = executor.submit(wait_on_a)"
msgstr ""
"import time\n"
"def wait_on_b():\n"
"    time.sleep(5)\n"
"    print(b.result())  # b will never complete because it is waiting on a.\n"
"    return 5\n"
"\n"
"def wait_on_a():\n"
"    time.sleep(5)\n"
"    print(a.result())  # a will never complete because it is waiting on b.\n"
"    return 6\n"
"\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=2)\n"
"a = executor.submit(wait_on_b)\n"
"b = executor.submit(wait_on_a)"

#: ../../library/concurrent.futures.rst:136
msgid "And::"
msgstr "И::"

#: ../../library/concurrent.futures.rst:138
msgid ""
"def wait_on_future():\n"
"    f = executor.submit(pow, 5, 2)\n"
"    # This will never complete because there is only one worker thread and\n"
"    # it is executing this function.\n"
"    print(f.result())\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=1)\n"
"executor.submit(wait_on_future)"
msgstr ""
"def wait_on_future():\n"
"    f = executor.submit(pow, 5, 2)\n"
"    # This will never complete because there is only one worker thread and\n"
"    # it is executing this function.\n"
"    print(f.result())\n"
"\n"
"executor = ThreadPoolExecutor(max_workers=1)\n"
"executor.submit(wait_on_future)"

#: ../../library/concurrent.futures.rst:150
msgid ""
"An :class:`Executor` subclass that uses a pool of at most *max_workers* "
"threads to execute calls asynchronously."
msgstr ""
"Подкласс :class:`Executor`, который использует пул не более чем "
"*max_workers* потоков для асинхронного выполнения вызовов."

#: ../../library/concurrent.futures.rst:153
msgid ""
"All threads enqueued to ``ThreadPoolExecutor`` will be joined before the "
"interpreter can exit. Note that the exit handler which does this is executed "
"*before* any exit handlers added using ``atexit``. This means exceptions in "
"the main thread must be caught and handled in order to signal threads to "
"exit gracefully. For this reason, it is recommended that "
"``ThreadPoolExecutor`` not be used for long-running tasks."
msgstr ""
"Все потоки, поставленные в очередь в ThreadPoolExecutor, будут объединены до "
"того, как интерпретатор сможет выйти. Обратите внимание, что обработчик "
"выхода, который это делает, выполняется *перед* любыми обработчиками выхода, "
"добавленными с помощью ``atexit``. Это означает, что исключения в основном "
"потоке должны перехватываться и обрабатываться, чтобы сигнализировать "
"потокам о корректном выходе. По этой причине не рекомендуется использовать "
"ThreadPoolExecutor для долго выполняющихся задач."

#: ../../library/concurrent.futures.rst:160
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker thread; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.thread.BrokenThreadPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* — это необязательный вызываемый объект, который вызывается в "
"начале каждого рабочего потока; *initargs* — это кортеж аргументов, "
"передаваемых инициализатору. Если *initializer* вызовет исключение, все "
"ожидающие в данный момент задания вызовут :exc:`~concurrent.futures.thread."
"BrokenThreadPool`, а также любая попытка отправить больше заданий в пул."

#: ../../library/concurrent.futures.rst:166
msgid ""
"If *max_workers* is ``None`` or not given, it will default to the number of "
"processors on the machine, multiplied by ``5``, assuming that :class:"
"`ThreadPoolExecutor` is often used to overlap I/O instead of CPU work and "
"the number of workers should be higher than the number of workers for :class:"
"`ProcessPoolExecutor`."
msgstr ""
"Если *max_workers* имеет значение «None» или не задано, по умолчанию оно "
"будет равно количеству процессоров на машине, умноженному на «5», "
"предполагая, что :class:`ThreadPoolExecutor` часто используется для "
"перекрытия операций ввода-вывода. вместо работы процессора, и количество "
"рабочих должно быть больше, чем количество рабочих для :class:"
"`ProcessPoolExecutor`."

#: ../../library/concurrent.futures.rst:174
msgid ""
"Added the *thread_name_prefix* parameter to allow users to control the :"
"class:`threading.Thread` names for worker threads created by the pool for "
"easier debugging."
msgstr ""
"Добавлен параметр *thread_name_prefix*, позволяющий пользователям управлять "
"именами :class:`threading.Thread` для рабочих потоков, созданных пулом, для "
"упрощения отладки."

#: ../../library/concurrent.futures.rst:179
#: ../../library/concurrent.futures.rst:283
msgid "Added the *initializer* and *initargs* arguments."
msgstr "Добавлены аргументы *initializer* и *initargs*."

#: ../../library/concurrent.futures.rst:182
msgid ""
"Default value of *max_workers* is changed to ``min(32, os.cpu_count() + "
"4)``. This default value preserves at least 5 workers for I/O bound tasks. "
"It utilizes at most 32 CPU cores for CPU bound tasks which release the GIL. "
"And it avoids using very large resources implicitly on many-core machines."
msgstr ""
"Значение по умолчанию *max_workers* изменено на ``min(32, os.cpu_count() + "
"4)``. Это значение по умолчанию сохраняет как минимум 5 рабочих процессов "
"для задач, связанных с вводом-выводом. Он использует не более 32 ядер ЦП для "
"задач, связанных с ЦП, которые освобождают GIL. И это позволяет избежать "
"неявного использования очень больших ресурсов на многоядерных машинах."

#: ../../library/concurrent.futures.rst:188
msgid ""
"ThreadPoolExecutor now reuses idle worker threads before starting "
"*max_workers* worker threads too."
msgstr ""
"ThreadPoolExecutor теперь повторно использует простаивающие рабочие потоки "
"перед запуском рабочих потоков *max_workers*."

#: ../../library/concurrent.futures.rst:195
msgid "ThreadPoolExecutor Example"
msgstr "Пример ThreadPoolExecutor"

#: ../../library/concurrent.futures.rst:198
msgid ""
"import concurrent.futures\n"
"import urllib.request\n"
"\n"
"URLS = ['http://www.foxnews.com/',\n"
"        'http://www.cnn.com/',\n"
"        'http://europe.wsj.com/',\n"
"        'http://www.bbc.co.uk/',\n"
"        'http://nonexistant-subdomain.python.org/']\n"
"\n"
"# Retrieve a single page and report the URL and contents\n"
"def load_url(url, timeout):\n"
"    with urllib.request.urlopen(url, timeout=timeout) as conn:\n"
"        return conn.read()\n"
"\n"
"# We can use a with statement to ensure threads are cleaned up promptly\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n"
"    # Start the load operations and mark each future with its URL\n"
"    future_to_url = {executor.submit(load_url, url, 60): url for url in "
"URLS}\n"
"    for future in concurrent.futures.as_completed(future_to_url):\n"
"        url = future_to_url[future]\n"
"        try:\n"
"            data = future.result()\n"
"        except Exception as exc:\n"
"            print('%r generated an exception: %s' % (url, exc))\n"
"        else:\n"
"            print('%r page is %d bytes' % (url, len(data)))"
msgstr ""
"import concurrent.futures\n"
"import urllib.request\n"
"\n"
"URLS = ['http://www.foxnews.com/',\n"
"        'http://www.cnn.com/',\n"
"        'http://europe.wsj.com/',\n"
"        'http://www.bbc.co.uk/',\n"
"        'http://nonexistant-subdomain.python.org/']\n"
"\n"
"# Retrieve a single page and report the URL and contents\n"
"def load_url(url, timeout):\n"
"    with urllib.request.urlopen(url, timeout=timeout) as conn:\n"
"        return conn.read()\n"
"\n"
"# We can use a with statement to ensure threads are cleaned up promptly\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n"
"    # Start the load operations and mark each future with its URL\n"
"    future_to_url = {executor.submit(load_url, url, 60): url for url in "
"URLS}\n"
"    for future in concurrent.futures.as_completed(future_to_url):\n"
"        url = future_to_url[future]\n"
"        try:\n"
"            data = future.result()\n"
"        except Exception as exc:\n"
"            print('%r generated an exception: %s' % (url, exc))\n"
"        else:\n"
"            print('%r page is %d bytes' % (url, len(data)))"

#: ../../library/concurrent.futures.rst:227
msgid "ProcessPoolExecutor"
msgstr "ProcessPoolExecutor"

#: ../../library/concurrent.futures.rst:229
msgid ""
"The :class:`ProcessPoolExecutor` class is an :class:`Executor` subclass that "
"uses a pool of processes to execute calls asynchronously. :class:"
"`ProcessPoolExecutor` uses the :mod:`multiprocessing` module, which allows "
"it to side-step the :term:`Global Interpreter Lock <global interpreter "
"lock>` but also means that only picklable objects can be executed and "
"returned."
msgstr ""
"Класс :class:`ProcessPoolExecutor` является подклассом :class:`Executor`, "
"который использует пул процессов для асинхронного выполнения вызовов. :class:"
"`ProcessPoolExecutor` использует модуль :mod:`multiprocessing`, который "
"позволяет ему обойти :term:`Global Interpreter Lock <глобальную блокировку "
"интерпретатора>`, но также означает, что могут выполняться и возвращаться "
"только поддающиеся выбору объекты."

#: ../../library/concurrent.futures.rst:236
msgid ""
"The ``__main__`` module must be importable by worker subprocesses. This "
"means that :class:`ProcessPoolExecutor` will not work in the interactive "
"interpreter."
msgstr ""
"Модуль ``__main__`` должен быть доступен для импорта рабочими подпроцессами. "
"Это означает, что :class:`ProcessPoolExecutor` не будет работать в "
"интерактивном интерпретаторе."

#: ../../library/concurrent.futures.rst:239
msgid ""
"Calling :class:`Executor` or :class:`Future` methods from a callable "
"submitted to a :class:`ProcessPoolExecutor` will result in deadlock."
msgstr ""
"Вызов методов :class:`Executor` или :class:`Future` из вызываемого объекта, "
"отправленного в :class:`ProcessPoolExecutor`, приведет к взаимоблокировке."

#: ../../library/concurrent.futures.rst:244
msgid ""
"An :class:`Executor` subclass that executes calls asynchronously using a "
"pool of at most *max_workers* processes.  If *max_workers* is ``None`` or "
"not given, it will default to the number of processors on the machine. If "
"*max_workers* is less than or equal to ``0``, then a :exc:`ValueError` will "
"be raised. On Windows, *max_workers* must be less than or equal to ``61``. "
"If it is not then :exc:`ValueError` will be raised. If *max_workers* is "
"``None``, then the default chosen will be at most ``61``, even if more "
"processors are available. *mp_context* can be a :mod:`multiprocessing` "
"context or ``None``. It will be used to launch the workers. If *mp_context* "
"is ``None`` or not given, the default :mod:`multiprocessing` context is "
"used. See :ref:`multiprocessing-start-methods`."
msgstr ""
"Подкласс :class:`Executor`, который выполняет вызовы асинхронно, используя "
"пул, содержащий не более *max_workers* процессов. Если *max_workers* имеет "
"значение «None» или не указано, по умолчанию будет установлено количество "
"процессоров на машине. Если *max_workers* меньше или равно «0», то будет "
"выдано :exc:`ValueError`. В Windows *max_workers* должно быть меньше или "
"равно ``61``. Если это не так, то будет выдано :exc:`ValueError`. Если "
"*max_workers* имеет значение None, то по умолчанию будет выбрано не более "
"61, даже если доступно больше процессоров. *mp_context* может быть "
"контекстом :mod:`многопроцессорности` или ``Нет``. Он будет использоваться "
"для запуска рабочих. Если *mp_context* имеет значение ``None`` или не "
"задано, используется контекст :mod:`multiprocessing` по умолчанию. См. :ref:"
"`мультипроцессорные-стартовые методы`."

#: ../../library/concurrent.futures.rst:258
msgid ""
"*initializer* is an optional callable that is called at the start of each "
"worker process; *initargs* is a tuple of arguments passed to the "
"initializer.  Should *initializer* raise an exception, all currently pending "
"jobs will raise a :exc:`~concurrent.futures.process.BrokenProcessPool`, as "
"well as any attempt to submit more jobs to the pool."
msgstr ""
"*initializer* — это необязательный вызываемый объект, который вызывается в "
"начале каждого рабочего процесса; *initargs* — это кортеж аргументов, "
"передаваемых инициализатору. Если *initializer* выдаст исключение, все "
"ожидающие в данный момент задания вызовут :exc:`~concurrent.futures.process."
"BrokenProcessPool`, а также любая попытка отправить больше заданий в пул."

#: ../../library/concurrent.futures.rst:264
msgid ""
"*max_tasks_per_child* is an optional argument that specifies the maximum "
"number of tasks a single process can execute before it will exit and be "
"replaced with a fresh worker process. By default *max_tasks_per_child* is "
"``None`` which means worker processes will live as long as the pool. When a "
"max is specified, the \"spawn\" multiprocessing start method will be used by "
"default in absence of a *mp_context* parameter. This feature is incompatible "
"with the \"fork\" start method."
msgstr ""
"*max_tasks_per_child* — это необязательный аргумент, указывающий "
"максимальное количество задач, которые может выполнить один процесс, прежде "
"чем он завершится и будет заменен новым рабочим процессом. По умолчанию "
"*max_tasks_per_child* имеет значение «Нет», что означает, что рабочие "
"процессы будут существовать до тех пор, пока пул. Если указано максимальное "
"значение, метод запуска многопроцессорной обработки «spawn» будет "
"использоваться по умолчанию при отсутствии параметра *mp_context*. Эта "
"функция несовместима с методом запуска «вилка»."

#: ../../library/concurrent.futures.rst:272
msgid ""
"When one of the worker processes terminates abruptly, a :exc:`~concurrent."
"futures.process.BrokenProcessPool` error is now raised. Previously, "
"behaviour was undefined but operations on the executor or its futures would "
"often freeze or deadlock."
msgstr ""
"Когда один из рабочих процессов внезапно завершается, теперь возникает "
"ошибка :exc:`~concurrent.futures.process.BrokenProcessPool`. Раньше "
"поведение было неопределенным, но операции с исполнителем или его фьючерсами "
"часто зависали или блокировались."

#: ../../library/concurrent.futures.rst:279
msgid ""
"The *mp_context* argument was added to allow users to control the "
"start_method for worker processes created by the pool."
msgstr ""
"Аргумент *mp_context* был добавлен, чтобы позволить пользователям управлять "
"start_method для рабочих процессов, созданных пулом."

#: ../../library/concurrent.futures.rst:286
msgid ""
"The default :mod:`multiprocessing` start method (see :ref:`multiprocessing-"
"start-methods`) will change away from *fork* in Python 3.14.  Code that "
"requires *fork* be used for their :class:`ProcessPoolExecutor` should "
"explicitly specify that by passing a ``mp_context=multiprocessing."
"get_context(\"fork\")`` parameter."
msgstr ""
"Метод запуска :mod:`multiprocessing` по умолчанию (см. :ref:`multiprocessing-"
"start-methods`) изменится с *fork* в Python 3.14. Код, который требует "
"использования *fork* для своего :class:`ProcessPoolExecutor`, должен явно "
"указать это, передав параметр mp_context=multiprocessing."
"get_context(\"fork\")``."

#: ../../library/concurrent.futures.rst:293
msgid ""
"The *max_tasks_per_child* argument was added to allow users to control the "
"lifetime of workers in the pool."
msgstr ""
"Аргумент *max_tasks_per_child* был добавлен, чтобы позволить пользователям "
"контролировать время жизни воркеров в пуле."

#: ../../library/concurrent.futures.rst:297
msgid ""
"On POSIX systems, if your application has multiple threads and the :mod:"
"`multiprocessing` context uses the ``\"fork\"`` start method: The :func:`os."
"fork` function called internally to spawn workers may raise a :exc:"
"`DeprecationWarning`. Pass a *mp_context* configured to use a different "
"start method. See the :func:`os.fork` documentation for further explanation."
msgstr ""
"В системах POSIX, если ваше приложение имеет несколько потоков и контекст :"
"mod:`multiprocessing`` использует метод запуска ``\"fork\"``: Функция :func:"
"`os.fork`, вызываемая внутренне для создания рабочих процессов, может "
"вызвать : exc:`DeprecationWarning`. Передайте *mp_context*, настроенный на "
"использование другого метода запуска. Дополнительную информацию смотрите в "
"документации :func:`os.fork`."

#: ../../library/concurrent.futures.rst:308
msgid "ProcessPoolExecutor Example"
msgstr "Пример ProcessPoolExecutor"

#: ../../library/concurrent.futures.rst:311
msgid ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""
"import concurrent.futures\n"
"import math\n"
"\n"
"PRIMES = [\n"
"    112272535095293,\n"
"    112582705942171,\n"
"    112272535095293,\n"
"    115280095190773,\n"
"    115797848077099,\n"
"    1099726899285419]\n"
"\n"
"def is_prime(n):\n"
"    if n < 2:\n"
"        return False\n"
"    if n == 2:\n"
"        return True\n"
"    if n % 2 == 0:\n"
"        return False\n"
"\n"
"    sqrt_n = int(math.floor(math.sqrt(n)))\n"
"    for i in range(3, sqrt_n + 1, 2):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"def main():\n"
"    with concurrent.futures.ProcessPoolExecutor() as executor:\n"
"        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n"
"            print('%d is prime: %s' % (number, prime))\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"

#: ../../library/concurrent.futures.rst:346
msgid "Future Objects"
msgstr "Объекты будущего"

#: ../../library/concurrent.futures.rst:348
msgid ""
"The :class:`Future` class encapsulates the asynchronous execution of a "
"callable. :class:`Future` instances are created by :meth:`Executor.submit`."
msgstr ""
"Класс :class:`Future` инкапсулирует асинхронное выполнение вызываемого "
"объекта. Экземпляры :class:`Future` создаются с помощью :meth:`Executor."
"submit`."

#: ../../library/concurrent.futures.rst:353
msgid ""
"Encapsulates the asynchronous execution of a callable.  :class:`Future` "
"instances are created by :meth:`Executor.submit` and should not be created "
"directly except for testing."
msgstr ""
"Инкапсулирует асинхронное выполнение вызываемого объекта. Экземпляры :class:"
"`Future` создаются :meth:`Executor.submit` и не должны создаваться напрямую, "
"за исключением случаев тестирования."

#: ../../library/concurrent.futures.rst:359
msgid ""
"Attempt to cancel the call.  If the call is currently being executed or "
"finished running and cannot be cancelled then the method will return "
"``False``, otherwise the call will be cancelled and the method will return "
"``True``."
msgstr ""
"Попытайтесь отменить звонок. Если вызов в данный момент выполняется или "
"завершен и не может быть отменен, метод вернет «False», в противном случае "
"вызов будет отменен, и метод вернет «True»."

#: ../../library/concurrent.futures.rst:366
msgid "Return ``True`` if the call was successfully cancelled."
msgstr "Верните True, если вызов был успешно отменен."

#: ../../library/concurrent.futures.rst:370
msgid ""
"Return ``True`` if the call is currently being executed and cannot be "
"cancelled."
msgstr ""
"Верните True, если вызов в данный момент выполняется и не может быть отменен."

#: ../../library/concurrent.futures.rst:375
msgid ""
"Return ``True`` if the call was successfully cancelled or finished running."
msgstr "Верните True, если вызов был успешно отменен или завершен."

#: ../../library/concurrent.futures.rst:380
msgid ""
"Return the value returned by the call. If the call hasn't yet completed then "
"this method will wait up to *timeout* seconds.  If the call hasn't completed "
"in *timeout* seconds, then a :exc:`TimeoutError` will be raised. *timeout* "
"can be an int or float.  If *timeout* is not specified or ``None``, there is "
"no limit to the wait time."
msgstr ""
"Верните значение, возвращенное вызовом. Если вызов еще не завершен, этот "
"метод будет ждать до *timeout* секунд. Если вызов не завершился в течение "
"*timeout* секунд, то будет выдано :exc:`TimeoutError`. *timeout* может быть "
"целым числом или числом с плавающей запятой. Если *timeout* не указан или "
"``None``, время ожидания не ограничено."

#: ../../library/concurrent.futures.rst:387
#: ../../library/concurrent.futures.rst:401
msgid ""
"If the future is cancelled before completing then :exc:`.CancelledError` "
"will be raised."
msgstr ""
"Если будущее отменено до завершения, то будет поднято :exc:`.CancelledError`."

#: ../../library/concurrent.futures.rst:390
msgid ""
"If the call raised an exception, this method will raise the same exception."
msgstr "Если вызов вызвал исключение, этот метод вызовет то же исключение."

#: ../../library/concurrent.futures.rst:394
msgid ""
"Return the exception raised by the call.  If the call hasn't yet completed "
"then this method will wait up to *timeout* seconds.  If the call hasn't "
"completed in *timeout* seconds, then a :exc:`TimeoutError` will be raised.  "
"*timeout* can be an int or float.  If *timeout* is not specified or "
"``None``, there is no limit to the wait time."
msgstr ""
"Верните исключение, вызванное вызовом. Если вызов еще не завершен, этот "
"метод будет ждать до *timeout* секунд. Если вызов не завершился в течение "
"*timeout* секунд, то будет выдано :exc:`TimeoutError`. *timeout* может быть "
"целым числом или числом с плавающей запятой. Если *timeout* не указан или "
"``None``, время ожидания не ограничено."

#: ../../library/concurrent.futures.rst:404
msgid "If the call completed without raising, ``None`` is returned."
msgstr "Если вызов завершен без поднятия, возвращается None."

#: ../../library/concurrent.futures.rst:408
msgid ""
"Attaches the callable *fn* to the future.  *fn* will be called, with the "
"future as its only argument, when the future is cancelled or finishes "
"running."
msgstr ""
"Прикрепляет вызываемую *fn* к будущему. *fn* будет вызываться с будущим в "
"качестве единственного аргумента, когда будущее будет отменено или "
"закончится."

#: ../../library/concurrent.futures.rst:412
msgid ""
"Added callables are called in the order that they were added and are always "
"called in a thread belonging to the process that added them.  If the "
"callable raises an :exc:`Exception` subclass, it will be logged and "
"ignored.  If the callable raises a :exc:`BaseException` subclass, the "
"behavior is undefined."
msgstr ""
"Добавленные вызываемые объекты вызываются в том порядке, в котором они были "
"добавлены, и всегда вызываются в потоке, принадлежащем процессу, который их "
"добавил. Если вызываемый объект вызывает подкласс :exc:`Exception`, он будет "
"зарегистрирован и проигнорирован. Если вызываемый объект вызывает подкласс :"
"exc:`BaseException`, поведение не определено."

#: ../../library/concurrent.futures.rst:418
msgid ""
"If the future has already completed or been cancelled, *fn* will be called "
"immediately."
msgstr ""
"Если будущее уже завершено или отменено, *fn* будет вызвана немедленно."

#: ../../library/concurrent.futures.rst:421
msgid ""
"The following :class:`Future` methods are meant for use in unit tests and :"
"class:`Executor` implementations."
msgstr ""
"Следующие методы :class:`Future` предназначены для использования в модульных "
"тестах и ​​реализациях :class:`Executor`."

#: ../../library/concurrent.futures.rst:426
msgid ""
"This method should only be called by :class:`Executor` implementations "
"before executing the work associated with the :class:`Future` and by unit "
"tests."
msgstr ""
"Этот метод следует вызывать только реализациями :class:`Executor` перед "
"выполнением работы, связанной с :class:`Future`, а также с помощью модульных "
"тестов."

#: ../../library/concurrent.futures.rst:430
msgid ""
"If the method returns ``False`` then the :class:`Future` was cancelled, i."
"e. :meth:`Future.cancel` was called and returned ``True``.  Any threads "
"waiting on the :class:`Future` completing (i.e. through :func:`as_completed` "
"or :func:`wait`) will be woken up."
msgstr ""
"Если метод возвращает ``False``, то :class:`Future` был отменен, т.е. :meth:"
"`Future.cancel` был вызван и вернул ``True``. Любые потоки, ожидающие "
"завершения :class:`Future` (т.е. через :func:`as_completed` или :func:"
"`wait`), будут пробуждаться."

#: ../../library/concurrent.futures.rst:435
msgid ""
"If the method returns ``True`` then the :class:`Future` was not cancelled "
"and has been put in the running state, i.e. calls to :meth:`Future.running` "
"will return ``True``."
msgstr ""
"Если метод возвращает ``True``, то :class:`Future` не был отменен и "
"переведен в рабочее состояние, т.е. вызовы :meth:`Future.running` вернут "
"``True``."

#: ../../library/concurrent.futures.rst:439
msgid ""
"This method can only be called once and cannot be called after :meth:`Future."
"set_result` or :meth:`Future.set_exception` have been called."
msgstr ""
"Этот метод можно вызвать только один раз и нельзя вызвать после вызова :meth:"
"`Future.set_result` или :meth:`Future.set_Exception`."

#: ../../library/concurrent.futures.rst:445
msgid ""
"Sets the result of the work associated with the :class:`Future` to *result*."
msgstr ""
"Устанавливает результат работы, связанной с :class:`Future`, в *result*."

#: ../../library/concurrent.futures.rst:448
#: ../../library/concurrent.futures.rst:461
msgid ""
"This method should only be used by :class:`Executor` implementations and "
"unit tests."
msgstr ""
"Этот метод следует использовать только реализациями :class:`Executor` и "
"модульными тестами."

#: ../../library/concurrent.futures.rst:451
#: ../../library/concurrent.futures.rst:464
msgid ""
"This method raises :exc:`concurrent.futures.InvalidStateError` if the :class:"
"`Future` is already done."
msgstr ""
"Этот метод вызывает :exc:`concurrent.futures.InvalidStateError`, если :class:"
"`Future` уже выполнен."

#: ../../library/concurrent.futures.rst:458
msgid ""
"Sets the result of the work associated with the :class:`Future` to the :"
"class:`Exception` *exception*."
msgstr ""
"Устанавливает результат работы, связанной с :class:`Future`, в :class:"
"`Exception` *Exception*."

#: ../../library/concurrent.futures.rst:470
msgid "Module Functions"
msgstr "Функции модуля"

#: ../../library/concurrent.futures.rst:474
msgid ""
"Wait for the :class:`Future` instances (possibly created by different :class:"
"`Executor` instances) given by *fs* to complete. Duplicate futures given to "
"*fs* are removed and will be returned only once. Returns a named 2-tuple of "
"sets.  The first set, named ``done``, contains the futures that completed "
"(finished or cancelled futures) before the wait completed.  The second set, "
"named ``not_done``, contains the futures that did not complete (pending or "
"running futures)."
msgstr ""
"Подождите, пока экземпляры :class:`Future` (возможно, созданные разными "
"экземплярами :class:`Executor`), заданные *fs*, завершатся. Повторяющиеся "
"фьючерсы, переданные *fs*, удаляются и возвращаются только один раз. "
"Возвращает именованный кортеж из двух множеств. Первый набор, названный "
"«done», содержит фьючерсы, которые завершились (завершившиеся или отмененные "
"фьючерсы) до завершения ожидания. Второй набор, названный ``not_done``, "
"содержит незавершенные фьючерсы (ожидающие или текущие фьючерсы)."

#: ../../library/concurrent.futures.rst:482
msgid ""
"*timeout* can be used to control the maximum number of seconds to wait "
"before returning.  *timeout* can be an int or float.  If *timeout* is not "
"specified or ``None``, there is no limit to the wait time."
msgstr ""
"*timeout* можно использовать для управления максимальным количеством секунд "
"ожидания перед возвратом. *timeout* может быть целым числом или числом с "
"плавающей запятой. Если *timeout* не указан или ``None``, время ожидания не "
"ограничено."

#: ../../library/concurrent.futures.rst:486
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""
"*return_when* указывает, когда эта функция должна вернуться. Это должна быть "
"одна из следующих констант:"

#: ../../library/concurrent.futures.rst:492
msgid "Constant"
msgstr "Константа"

#: ../../library/concurrent.futures.rst:493
msgid "Description"
msgstr "Описание"

#: ../../library/concurrent.futures.rst:496
msgid "The function will return when any future finishes or is cancelled."
msgstr "Функция вернется, когда любое будущее завершится или будет отменено."

#: ../../library/concurrent.futures.rst:499
msgid ""
"The function will return when any future finishes by raising an exception. "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""
"Функция вернется, когда любое будущее завершится вызовом исключения. Если "
"никакое будущее не вызывает исключение, это эквивалентно :const:"
"`ALL_COMPLETED`."

#: ../../library/concurrent.futures.rst:504
msgid "The function will return when all futures finish or are cancelled."
msgstr "Функция вернется, когда все фьючерсы закончатся или будут отменены."

#: ../../library/concurrent.futures.rst:508
msgid ""
"Returns an iterator over the :class:`Future` instances (possibly created by "
"different :class:`Executor` instances) given by *fs* that yields futures as "
"they complete (finished or cancelled futures). Any futures given by *fs* "
"that are duplicated will be returned once. Any futures that completed "
"before :func:`as_completed` is called will be yielded first.  The returned "
"iterator raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` is "
"called and the result isn't available after *timeout* seconds from the "
"original call to :func:`as_completed`.  *timeout* can be an int or float. If "
"*timeout* is not specified or ``None``, there is no limit to the wait time."
msgstr ""
"Возвращает итератор для экземпляров :class:`Future` (возможно, созданных "
"разными экземплярами :class:`Executor`), заданных *fs*, который возвращает "
"фьючерсы по мере их завершения (завершенные или отмененные фьючерсы). Любые "
"дублированные фьючерсы, заданные *fs*, будут возвращены один раз. Любые "
"фьючерсы, которые завершились до вызова :func:`as_completed`, будут выданы "
"первыми. Возвращенный итератор вызывает :exc:`TimeoutError`, если :meth:"
"`~iterator.__next__` вызывается и результат недоступен по истечении "
"*timeout* секунд с момента исходного вызова :func:`as_completed`. *timeout* "
"может быть целым числом или числом с плавающей запятой. Если *timeout* не "
"указан или ``None``, время ожидания не ограничено."

#: ../../library/concurrent.futures.rst:521
msgid ":pep:`3148` -- futures - execute computations asynchronously"
msgstr ":pep:`3148` -- фьючерсы - выполнять вычисления асинхронно"

#: ../../library/concurrent.futures.rst:522
msgid ""
"The proposal which described this feature for inclusion in the Python "
"standard library."
msgstr ""
"Предложение, описывающее эту функцию для включения в стандартную библиотеку "
"Python."

#: ../../library/concurrent.futures.rst:527
msgid "Exception classes"
msgstr "Классы исключений"

#: ../../library/concurrent.futures.rst:533
msgid "Raised when a future is cancelled."
msgstr "Поднимается, когда будущее отменяется."

#: ../../library/concurrent.futures.rst:537
msgid ""
"A deprecated alias of :exc:`TimeoutError`, raised when a future operation "
"exceeds the given timeout."
msgstr ""
"Устаревший псевдоним :exc:`TimeoutError`, вызываемый, когда будущая операция "
"превышает заданное время ожидания."

#: ../../library/concurrent.futures.rst:542
msgid "This class was made an alias of :exc:`TimeoutError`."
msgstr "Этот класс стал псевдонимом :exc:`TimeoutError`."

#: ../../library/concurrent.futures.rst:547
msgid ""
"Derived from :exc:`RuntimeError`, this exception class is raised when an "
"executor is broken for some reason, and cannot be used to submit or execute "
"new tasks."
msgstr ""
"Этот класс исключений, производный от :exc:`RuntimeError`, вызывается, когда "
"исполнитель по какой-либо причине выходит из строя, и его нельзя "
"использовать для отправки или выполнения новых задач."

#: ../../library/concurrent.futures.rst:555
msgid ""
"Raised when an operation is performed on a future that is not allowed in the "
"current state."
msgstr ""
"Возникает, когда операция выполняется в будущем, что не разрешено в текущем "
"состоянии."

#: ../../library/concurrent.futures.rst:564
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor`, this exception class "
"is raised when one of the workers of a :class:`~concurrent.futures."
"ThreadPoolExecutor` has failed initializing."
msgstr ""
"Этот класс исключений, производный от :exc:`~concurrent.futures."
"BrokenExecutor`, вызывается, когда один из рабочих :class:`~concurrent."
"futures.ThreadPoolExecutor` не смог инициализироваться."

#: ../../library/concurrent.futures.rst:575
msgid ""
"Derived from :exc:`~concurrent.futures.BrokenExecutor` (formerly :exc:"
"`RuntimeError`), this exception class is raised when one of the workers of "
"a :class:`~concurrent.futures.ProcessPoolExecutor` has terminated in a non-"
"clean fashion (for example, if it was killed from the outside)."
msgstr ""
"Этот класс исключений, производный от :exc:`~concurrent.futures."
"BrokenExecutor` (ранее :exc:`RuntimeError`), вызывается, когда один из "
"рабочих процессов :class:`~concurrent.futures.ProcessPoolExecutor` "
"завершается в нечистый мод (например, если его убили снаружи)."
