# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/pathlib.rst:2
msgid ":mod:`!pathlib` --- Object-oriented filesystem paths"
msgstr ":mod:`!pathlib` --- Пути к объектно-ориентированной файловой системе"

#: ../../library/pathlib.rst:9
msgid "**Source code:** :source:`Lib/pathlib/`"
msgstr "**Исходный код:** :source:`Lib/pathlib/`"

#: ../../library/pathlib.rst:15
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""
"Этот модуль предлагает классы, представляющие пути файловой системы с "
"семантикой, подходящей для разных операционных систем. Классы путей делятся "
"на :ref:`pure paths <pure-paths>`, которые обеспечивают чисто вычислительные "
"операции без ввода-вывода, и :ref:`concrete paths <concrete-paths>`, которые "
"наследуются от чистых путей, но также предоставляют Операции ввода-вывода."

#: ../../library/pathlib.rst:21
msgid ""
"Inheritance diagram showing the classes available in pathlib. The\n"
"most basic class is PurePath, which has three direct subclasses:\n"
"PurePosixPath, PureWindowsPath, and Path. Further to these four\n"
"classes, there are two classes that use multiple inheritance:\n"
"PosixPath subclasses PurePosixPath and Path, and WindowsPath\n"
"subclasses PureWindowsPath and Path."
msgstr ""
"Диаграмма наследования, показывающая классы, доступные в pathlib. Самый "
"базовый класс — PurePath, у которого есть три прямых подкласса: "
"PurePosixPath, PureWindowsPath и Path. В дополнение к этим четырем классов, "
"есть два класса, которые используют множественное наследование: PosixPath "
"является подклассами PurePosixPath и Path, а также WindowsPath. подклассы "
"PureWindowsPath и Path."

#: ../../library/pathlib.rst:31
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""
"Если вы никогда раньше не использовали этот модуль или просто не уверены, "
"какой класс подходит для вашей задачи, :class:`Path`, скорее всего, вам "
"нужен. Он создает экземпляр :ref:`конкретного пути <concrete-paths>` для "
"платформы, на которой выполняется код."

#: ../../library/pathlib.rst:35
msgid "Pure paths are useful in some special cases; for example:"
msgstr "Чистые пути полезны в некоторых особых случаях; например:"

#: ../../library/pathlib.rst:37
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""
"Если вы хотите манипулировать путями Windows на компьютере с Unix (или "
"наоборот). Вы не можете создать экземпляр :class:`WindowsPath` при работе в "
"Unix, но вы можете создать экземпляр :class:`PureWindowsPath`."

#: ../../library/pathlib.rst:40
msgid ""
"You want to make sure that your code only manipulates paths without actually "
"accessing the OS. In this case, instantiating one of the pure classes may be "
"useful since those simply don't have any OS-accessing operations."
msgstr ""
"Вы хотите быть уверены, что ваш код только манипулирует путями, не обращаясь "
"к ОС. В этом случае может оказаться полезным создание экземпляра одного из "
"чистых классов, поскольку у них просто нет никаких операций доступа к ОС."

#: ../../library/pathlib.rst:45
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""
":pep:`428`: Модуль pathlib — пути к объектно-ориентированной файловой "
"системе."

#: ../../library/pathlib.rst:48
msgid ""
"For low-level path manipulation on strings, you can also use the :mod:`os."
"path` module."
msgstr ""
"Для низкоуровневых манипуляций с путями строк вы также можете использовать "
"модуль :mod:`os.path`."

#: ../../library/pathlib.rst:53
msgid "Basic use"
msgstr "Основное использование"

#: ../../library/pathlib.rst:55
msgid "Importing the main class::"
msgstr "Импорт основного класса::"

#: ../../library/pathlib.rst:57
msgid ">>> from pathlib import Path"
msgstr ">>> from pathlib import Path"

#: ../../library/pathlib.rst:59
msgid "Listing subdirectories::"
msgstr "Перечисление подкаталогов::"

#: ../../library/pathlib.rst:61
msgid ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"
msgstr ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"

#: ../../library/pathlib.rst:66
msgid "Listing Python source files in this directory tree::"
msgstr "Листинг исходных файлов Python в этом дереве каталогов::"

#: ../../library/pathlib.rst:68
msgid ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"
msgstr ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"

#: ../../library/pathlib.rst:73
msgid "Navigating inside a directory tree::"
msgstr "Навигация внутри дерева каталогов::"

#: ../../library/pathlib.rst:75
msgid ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"
msgstr ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"

#: ../../library/pathlib.rst:82
msgid "Querying path properties::"
msgstr "Запрос свойств пути::"

#: ../../library/pathlib.rst:84
msgid ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"
msgstr ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"

#: ../../library/pathlib.rst:89
msgid "Opening a file::"
msgstr "Открытие файла::"

#: ../../library/pathlib.rst:91
msgid ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"
msgstr ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"

#: ../../library/pathlib.rst:97
msgid "Exceptions"
msgstr "Исключения"

#: ../../library/pathlib.rst:101
msgid ""
"An exception inheriting :exc:`NotImplementedError` that is raised when an "
"unsupported operation is called on a path object."
msgstr ""
"Исключение, наследующее :exc:`NotImplementedError`, которое возникает, когда "
"неподдерживаемая операция вызывается для объекта пути."

#: ../../library/pathlib.rst:110
msgid "Pure paths"
msgstr "Чистые пути"

#: ../../library/pathlib.rst:112
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we "
"also call *flavours*:"
msgstr ""
"Объекты чистого пути предоставляют операции обработки пути, которые "
"фактически не обращаются к файловой системе. Есть три способа доступа к этим "
"классам, которые мы также называем *ароматы*:"

#: ../../library/pathlib.rst:118
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""
"Общий класс, который представляет вариант системного пути (при его создании "
"создается либо :class:`PurePosixPath`, либо :class:`PureWindowsPath`)::"

#: ../../library/pathlib.rst:121
msgid ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"
msgstr ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"

#: ../../library/pathlib.rst:124
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another "
"path object::"
msgstr ""
"Каждый элемент *pathsegments* может быть либо строкой, представляющей "
"сегмент пути, либо объектом, реализующим интерфейс :class:`os.PathLike`, где "
"метод :meth:`~os.PathLike.__fspath__` возвращает строку, например другой "
"объект пути::"

#: ../../library/pathlib.rst:129
msgid ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"
msgstr ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"

#: ../../library/pathlib.rst:134
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "Если *pathsegments* пусто, подразумевается текущий каталог::"

#: ../../library/pathlib.rst:136
msgid ""
">>> PurePath()\n"
"PurePosixPath('.')"
msgstr ""
">>> PurePath()\n"
"PurePosixPath('.')"

#: ../../library/pathlib.rst:139
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like :"
"func:`os.path.join`)::"
msgstr ""
"Если сегмент представляет собой абсолютный путь, все предыдущие сегменты "
"игнорируются (например, :func:`os.path.join`)::"

#: ../../library/pathlib.rst:142
msgid ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"
msgstr ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"

#: ../../library/pathlib.rst:147
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment (e."
"g., ``r'\\foo'``) is encountered::"
msgstr ""
"В Windows диск не сбрасывается при обнаружении корневого сегмента "
"относительного пути (например, ``r'\\foo'``)::"

#: ../../library/pathlib.rst:150
msgid ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:153
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""
"Ложные косые черты и одиночные точки сворачиваются, а двойные точки "
"(``'..'``) и ведущие двойные косые черты (``'//'``) - нет, поскольку это "
"может изменить смысл пути по разным причинам. (например, символические "
"ссылки, пути UNC)::"

#: ../../library/pathlib.rst:157
msgid ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"
msgstr ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"

#: ../../library/pathlib.rst:166
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""
"(при наивном подходе ``PurePosixPath('foo/../bar')`` эквивалентен "
"``PurePosixPath('bar')``, что неверно, если ``foo`` является символической "
"ссылкой на другой каталог. )"

#: ../../library/pathlib.rst:170
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""
"Объекты чистого пути реализуют интерфейс :class:`os.PathLike`, что позволяет "
"использовать их везде, где этот интерфейс принят."

#: ../../library/pathlib.rst:173
msgid "Added support for the :class:`os.PathLike` interface."
msgstr "Добавлена ​​поддержка интерфейса :class:`os.PathLike`."

#: ../../library/pathlib.rst:178
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr ""
"Подкласс :class:`PurePath`, этот вариант пути представляет пути файловой "
"системы, отличные от Windows::"

#: ../../library/pathlib.rst:181
msgid ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"
msgstr ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:184 ../../library/pathlib.rst:196
#: ../../library/pathlib.rst:766 ../../library/pathlib.rst:776
#: ../../library/pathlib.rst:791
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments* указывается аналогично :class:`PurePath`."

#: ../../library/pathlib.rst:188
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ""
"Подкласс :class:`PurePath`, этот вариант пути представляет пути файловой "
"системы Windows, включая `UNC-пути`_::"

#: ../../library/pathlib.rst:191
msgid ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"
msgstr ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"

#: ../../library/pathlib.rst:200
msgid ""
"Regardless of the system you're running on, you can instantiate all of these "
"classes, since they don't provide any operation that does system calls."
msgstr ""
"Независимо от системы, в которой вы работаете, вы можете создать экземпляры "
"всех этих классов, поскольку они не предоставляют никаких операций, "
"выполняющих системные вызовы."

#: ../../library/pathlib.rst:205
msgid "General properties"
msgstr "Общие свойства"

#: ../../library/pathlib.rst:207
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""
"Пути являются неизменяемыми и :term:`хэшируемыми`. Пути одного и того же "
"вкуса сопоставимы и доступны для заказа. Эти свойства учитывают семантику "
"свертывания регистра аромата:"

#: ../../library/pathlib.rst:211
msgid ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"
msgstr ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"

#: ../../library/pathlib.rst:220
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""
"Пути разного вкуса сравниваются неравными и не могут быть упорядочены::"

#: ../../library/pathlib.rst:222
msgid ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and "
"'PurePosixPath'"
msgstr ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and "
"'PurePosixPath'"

#: ../../library/pathlib.rst:231
msgid "Operators"
msgstr "Операторы"

#: ../../library/pathlib.rst:233
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""
"Оператор косой черты помогает создавать дочерние пути, например :func:`os."
"path.join`. Если аргумент представляет собой абсолютный путь, предыдущий "
"путь игнорируется. В Windows диск не сбрасывается, если аргументом является "
"корневой относительный путь (например, ``r'\\foo'``)::"

#: ../../library/pathlib.rst:238
msgid ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:251
msgid ""
"A path object can be used anywhere an object implementing :class:`os."
"PathLike` is accepted::"
msgstr ""
"Объект пути можно использовать везде, где принят объект, реализующий :class:"
"`os.PathLike`::"

#: ../../library/pathlib.rst:254
msgid ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"
msgstr ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"

#: ../../library/pathlib.rst:259
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any "
"function taking a file path as a string::"
msgstr ""
"Строковое представление пути — это сам необработанный путь файловой системы "
"(в собственной форме, например, с обратной косой чертой в Windows), который "
"вы можете передать любой функции, принимающей путь к файлу в виде строки::"

#: ../../library/pathlib.rst:263
msgid ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"
msgstr ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"

#: ../../library/pathlib.rst:270
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as "
"a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"Аналогично, вызов :class:`bytes` для пути дает необработанный путь файловой "
"системы в виде байтового объекта, закодированного :func:`os.fsencode`::"

#: ../../library/pathlib.rst:273
msgid ""
">>> bytes(p)\n"
"b'/etc'"
msgstr ""
">>> bytes(p)\n"
"b'/etc'"

#: ../../library/pathlib.rst:277
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""
"Вызов :class:`bytes` рекомендуется только в Unix. В Windows форма Юникода "
"является каноническим представлением путей файловой системы."

#: ../../library/pathlib.rst:282
msgid "Accessing individual parts"
msgstr "Доступ к отдельным частям"

#: ../../library/pathlib.rst:284
msgid ""
"To access the individual \"parts\" (components) of a path, use the following "
"property:"
msgstr ""
"Чтобы получить доступ к отдельным «частям» (компонентам) пути, используйте "
"следующее свойство:"

#: ../../library/pathlib.rst:289
msgid "A tuple giving access to the path's various components::"
msgstr "Кортеж, предоставляющий доступ к различным компонентам пути:"

#: ../../library/pathlib.rst:291
msgid ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"
msgstr ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"

#: ../../library/pathlib.rst:299
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""
"(обратите внимание, как диск и локальный корень перегруппированы в одну "
"часть)"

#: ../../library/pathlib.rst:303
msgid "Methods and properties"
msgstr "Методы и свойства"

#: ../../library/pathlib.rst:309
msgid "Pure paths provide the following methods and properties:"
msgstr "Чистые пути предоставляют следующие методы и свойства:"

#: ../../library/pathlib.rst:313
msgid ""
"The implementation of the :mod:`os.path` module used for low-level path "
"parsing and joining: either :mod:`posixpath` or :mod:`ntpath`."
msgstr ""
"Реализация модуля :mod:`os.path`, используемого для низкоуровневого анализа "
"и объединения путей: либо :mod:`posixpath`, либо :mod:`ntpath`."

#: ../../library/pathlib.rst:320
msgid "A string representing the drive letter or name, if any::"
msgstr "Строка, представляющая букву или имя диска, если таковое имеется::"

#: ../../library/pathlib.rst:322
msgid ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"

#: ../../library/pathlib.rst:329
msgid "UNC shares are also considered drives::"
msgstr "Общие ресурсы UNC также считаются дисками:"

#: ../../library/pathlib.rst:331
msgid ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"
msgstr ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"

#: ../../library/pathlib.rst:336
msgid "A string representing the (local or global) root, if any::"
msgstr ""
"Строка, представляющая корень (локальный или глобальный), если таковой "
"имеется::"

#: ../../library/pathlib.rst:338
msgid ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"

#: ../../library/pathlib.rst:345
msgid "UNC shares always have a root::"
msgstr "UNC-акции всегда имеют корень::"

#: ../../library/pathlib.rst:347
msgid ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"
msgstr ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"

#: ../../library/pathlib.rst:350
msgid ""
"If the path starts with more than two successive slashes, :class:`~pathlib."
"PurePosixPath` collapses them::"
msgstr ""
"Если путь начинается с более чем двух последовательных косых черт, :class:"
"`~pathlib.PurePosixPath` сворачивает их::"

#: ../../library/pathlib.rst:353
msgid ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"
msgstr ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"

#: ../../library/pathlib.rst:362
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution <https://pubs.opengroup.org/"
"onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""
"Такое поведение соответствует *Базовым спецификациям открытой группы, выпуск "
"6*, параграф `4.11 Разрешение пути <https://pubs.opengroup.org/"
"onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"

#: ../../library/pathlib.rst:366
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr ""
"*\"Имя пути, которое начинается с двух последовательных косых черт, может "
"интерпретироваться в зависимости от реализации, хотя более двух ведущих "
"косых черт должны рассматриваться как одна косая черта.\"*"

#: ../../library/pathlib.rst:372
msgid "The concatenation of the drive and root::"
msgstr "Объединение диска и корня::"

#: ../../library/pathlib.rst:374
msgid ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"

#: ../../library/pathlib.rst:386
msgid ""
"An immutable sequence providing access to the logical ancestors of the path::"
msgstr ""
"Неизменяемая последовательность, обеспечивающая доступ к логическим предкам "
"пути::"

#: ../../library/pathlib.rst:389
msgid ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"
msgstr ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"

#: ../../library/pathlib.rst:397
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr ""
"Родительская последовательность теперь поддерживает :term:`slices <slice>` и "
"отрицательные значения индекса."

#: ../../library/pathlib.rst:402
msgid "The logical parent of the path::"
msgstr "Логический родитель пути::"

#: ../../library/pathlib.rst:404
msgid ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"
msgstr ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"

#: ../../library/pathlib.rst:408
msgid "You cannot go past an anchor, or empty path::"
msgstr "Вы не можете пройти мимо привязки или пустого пути::"

#: ../../library/pathlib.rst:410
msgid ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"
msgstr ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"

#: ../../library/pathlib.rst:418
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "Это чисто лексическая операция, отсюда и следующее поведение:"

#: ../../library/pathlib.rst:420
msgid ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"
msgstr ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"

#: ../../library/pathlib.rst:424
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr ""
"Если вы хотите пройти по произвольному пути файловой системы вверх, "
"рекомендуется сначала вызвать :meth:`Path.resolve`, чтобы разрешить "
"символические ссылки и исключить компоненты ``\"..\"``."

#: ../../library/pathlib.rst:431
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""
"Строка, представляющая конечный компонент пути, исключая диск и корень, если "
"таковые имеются::"

#: ../../library/pathlib.rst:434
msgid ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"
msgstr ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"

#: ../../library/pathlib.rst:437
msgid "UNC drive names are not considered::"
msgstr "Имена дисков UNC не учитываются::"

#: ../../library/pathlib.rst:439
msgid ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"
msgstr ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"

#: ../../library/pathlib.rst:447
msgid "The last dot-separated portion of the final component, if any::"
msgstr ""
"Последняя часть конечного компонента, разделенная точкой, если таковая "
"имеется:"

#: ../../library/pathlib.rst:449
msgid ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"
msgstr ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"

#: ../../library/pathlib.rst:456
msgid "This is commonly called the file extension."
msgstr "Это обычно называют расширением файла."

#: ../../library/pathlib.rst:460
msgid "A list of the path's suffixes, often called file extensions::"
msgstr "Список суффиксов пути, часто называемых расширениями файлов::"

#: ../../library/pathlib.rst:462
msgid ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"
msgstr ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"

#: ../../library/pathlib.rst:472
msgid "The final path component, without its suffix::"
msgstr "Последний компонент пути без суффикса::"

#: ../../library/pathlib.rst:474
msgid ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"
msgstr ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"

#: ../../library/pathlib.rst:484
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr "Возвращает строковое представление пути с косой чертой (``/``)::"

#: ../../library/pathlib.rst:486
msgid ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"
msgstr ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"

#: ../../library/pathlib.rst:495
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""
"Возвращает значение, является ли путь абсолютным или нет. Путь считается "
"абсолютным, если он имеет как корень, так и (если позволяет версия) диск::"

#: ../../library/pathlib.rst:498
msgid ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"
msgstr ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"

#: ../../library/pathlib.rst:515
msgid "Return whether or not this path is relative to the *other* path."
msgstr ""
"Возвращает значение, является ли этот путь относительно *другого* пути."

#: ../../library/pathlib.rst:523
msgid ""
"This method is string-based; it neither accesses the filesystem nor treats "
"\"``..``\" segments specially. The following code is equivalent:"
msgstr ""
"Этот метод основан на строках; он не обращается к файловой системе и не "
"обрабатывает сегменты «``..``» особым образом. Следующий код эквивалентен:"

#: ../../library/pathlib.rst:534
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""
"Передача дополнительных аргументов не рекомендуется; если они указаны, они "
"соединяются с *other*."

#: ../../library/pathlib.rst:539
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""
"С помощью :class:`PureWindowsPath` верните ``True``, если путь считается "
"зарезервированным под Windows, ``False`` в противном случае. При "
"использовании :class:`PurePosixPath` всегда возвращается ``False``."

#: ../../library/pathlib.rst:543
msgid ""
"Windows path names that contain a colon, or end with a dot or a space, are "
"considered reserved. UNC paths may be reserved."
msgstr ""
"Имена путей Windows, которые содержат двоеточие или заканчиваются точкой или "
"пробелом, считаются зарезервированными. UNC-пути могут быть зарезервированы."

#: ../../library/pathlib.rst:547
msgid ""
"This method is deprecated; use :func:`os.path.isreserved` to detect reserved "
"paths on Windows."
msgstr ""
"Этот метод устарел; используйте :func:`os.path.isreserved` для обнаружения "
"зарезервированных путей в Windows."

#: ../../library/pathlib.rst:553
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr ""
"Вызов этого метода эквивалентен объединению пути с каждым из заданных "
"*pathsegments* по очереди::"

#: ../../library/pathlib.rst:556
msgid ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:568
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if "
"matching is successful, ``False`` otherwise.  For example::"
msgstr ""
"Сопоставьте этот путь с предоставленным шаблоном в стиле glob. Возвращайте "
"``True``, если сопоставление прошло успешно, и ``False`` в противном случае. "
"Например::"

#: ../../library/pathlib.rst:571
msgid ""
">>> PurePath('a/b.py').full_match('a/*.py')\n"
"True\n"
">>> PurePath('a/b.py').full_match('*.py')\n"
"False\n"
">>> PurePath('/a/b/c.py').full_match('/a/**')\n"
"True\n"
">>> PurePath('/a/b/c.py').full_match('**/*.py')\n"
"True"
msgstr ""
">>> PurePath('a/b.py').full_match('a/*.py')\n"
"True\n"
">>> PurePath('a/b.py').full_match('*.py')\n"
"False\n"
">>> PurePath('/a/b/c.py').full_match('/a/**')\n"
"True\n"
">>> PurePath('/a/b/c.py').full_match('**/*.py')\n"
"True"

#: ../../library/pathlib.rst:581 ../../library/pathlib.rst:1291
msgid ":ref:`pathlib-pattern-language` documentation."
msgstr ":ref:`pathlib-pattern-language` документация."

#: ../../library/pathlib.rst:583
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr ""
"Как и в других методах, чувствительность к регистру соответствует настройкам "
"платформы по умолчанию:"

#: ../../library/pathlib.rst:585
msgid ""
">>> PurePosixPath('b.py').full_match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').full_match('*.PY')\n"
"True"
msgstr ""
">>> PurePosixPath('b.py').full_match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').full_match('*.PY')\n"
"True"

#: ../../library/pathlib.rst:590
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"Установите для *case_sensitivity* значение True или False, чтобы "
"переопределить это поведение."

#: ../../library/pathlib.rst:597
msgid ""
"Match this path against the provided non-recursive glob-style pattern. "
"Return ``True`` if matching is successful, ``False`` otherwise."
msgstr ""
"Сопоставьте этот путь с предоставленным нерекурсивным шаблоном в стиле glob. "
"Возвращайте ``True``, если сопоставление прошло успешно, и ``False`` в "
"противном случае."

#: ../../library/pathlib.rst:600
msgid ""
"This method is similar to :meth:`~PurePath.full_match`, but empty patterns "
"aren't allowed (:exc:`ValueError` is raised), the recursive wildcard "
"\"``**``\" isn't supported (it acts like non-recursive \"``*``\"), and if a "
"relative pattern is provided, then matching is done from the right::"
msgstr ""
"Этот метод аналогичен :meth:`~PurePath.full_match`, но пустые шаблоны не "
"допускаются (возникает :exc:`ValueError`), рекурсивный подстановочный знак "
"\"``**``\" не поддерживается (он действует как нерекурсивный \"``*``\"), и "
"если указан относительный шаблон, то сопоставление выполняется справа::"

#: ../../library/pathlib.rst:605
msgid ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"
msgstr ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"

#: ../../library/pathlib.rst:612 ../../library/pathlib.rst:1310
#: ../../library/pathlib.rst:1335
msgid "The *pattern* parameter accepts a :term:`path-like object`."
msgstr "Параметр *pattern* принимает объект, похожий на путь."

#: ../../library/pathlib.rst:615 ../../library/pathlib.rst:1304
#: ../../library/pathlib.rst:1329
msgid "The *case_sensitive* parameter was added."
msgstr "Добавлен параметр *case_sensitivity*."

#: ../../library/pathlib.rst:621
msgid ""
"Compute a version of this path relative to the path represented by *other*.  "
"If it's impossible, :exc:`ValueError` is raised::"
msgstr ""
"Вычислите версию этого пути относительно пути, представленного *other*. Если "
"это невозможно, возникает :exc:`ValueError`::"

#: ../../library/pathlib.rst:624
msgid ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is "
"relative and the other is absolute."
msgstr ""
">>> p = PurePosixPath('/etc/passwd') >>> p.relative_to('/') "
"PurePosixPath('etc/passwd') >>> p.relative_to('/etc') "
"PurePosixPath('passwd') >>> p.relative_to('/usr') Traceback (последний вызов "
"последний): Файл «<stdin>», строка 1, в <модуле> Файл «pathlib.py», строка "
"941, в относительных_to поднять ValueError(error_message.format(str(self), "
"str(formatted))) ValueError: «/etc/passwd» не находится в подпути «/usr» ИЛИ "
"один путь является относительным, а другой — абсолютным."

#: ../../library/pathlib.rst:636
msgid ""
"When *walk_up* is false (the default), the path must start with *other*. "
"When the argument is true, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different drives, :"
"exc:`ValueError` is raised.::"
msgstr ""
"Если *walk_up* имеет значение false (по умолчанию), путь должен начинаться с "
"*other*. Если аргумент равен true, записи ``..`` могут быть добавлены для "
"формирования относительного пути. Во всех остальных случаях, например, когда "
"пути ссылаются на разные диски, возникает :exc:`ValueError`.::"

#: ../../library/pathlib.rst:641
msgid ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is "
"relative and the other is absolute."
msgstr ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is "
"relative and the other is absolute."

#: ../../library/pathlib.rst:651
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""
"Эта функция является частью :class:`PurePath` и работает со строками. Он не "
"проверяет базовую файловую структуру и не получает к ней доступа. Это может "
"повлиять на параметр *walk_up*, поскольку он предполагает, что в пути нет "
"символических ссылок; сначала вызовите :meth:`~Path.resolve`, если "
"необходимо разрешить символические ссылки."

#: ../../library/pathlib.rst:657
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr ""
"Был добавлен параметр *walk_up* (старое поведение такое же, как "
"``walk_up=False``)."

#: ../../library/pathlib.rst:662
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are "
"joined with *other*."
msgstr ""
"Передача дополнительных позиционных аргументов не рекомендуется; если они "
"указаны, они соединяются с *other*."

#: ../../library/pathlib.rst:667
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"Вернуть новый путь с измененным :attr:`name`. Если исходный путь не имеет "
"имени, возникает ValueError::"

#: ../../library/pathlib.rst:670
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"

#: ../../library/pathlib.rst:684
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"Вернуть новый путь с измененным :attr:`stem`. Если исходный путь не имеет "
"имени, возникает ValueError::"

#: ../../library/pathlib.rst:687
msgid ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in "
"with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in "
"with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"

#: ../../library/pathlib.rst:708
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
"Вернуть новый путь с измененным суффиксом :attr:`suffix`. Если исходный путь "
"не имеет суффикса, вместо него добавляется новый *суффикс*. Если *суффикс* "
"представляет собой пустую строку, исходный суффикс удаляется::"

#: ../../library/pathlib.rst:712
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"

#: ../../library/pathlib.rst:725
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created, "
"such as from :attr:`parent` and :meth:`relative_to`. Subclasses may override "
"this method to pass information to derivative paths, for example::"
msgstr ""
"Создайте новый объект пути того же типа, объединив заданные *сегменты пути*. "
"Этот метод вызывается всякий раз, когда создается производный путь, "
"например, из :attr:`parent` и :meth:`relative_to`. Подклассы могут "
"переопределять этот метод для передачи информации в производные пути, "
"например:"

#: ../../library/pathlib.rst:730
msgid ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"
msgstr ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"

#: ../../library/pathlib.rst:751
msgid "Concrete paths"
msgstr "Конкретные пути"

#: ../../library/pathlib.rst:753
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""
"Конкретные пути являются подклассами классов чистых путей. В дополнение к "
"операциям, предоставляемым последними, они также предоставляют методы для "
"выполнения системных вызовов объектов пути. Существует три способа создания "
"конкретных путей:"

#: ../../library/pathlib.rst:759
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the "
"system's path flavour (instantiating it creates either a :class:`PosixPath` "
"or a :class:`WindowsPath`)::"
msgstr ""
"Подкласс :class:`PurePath`, этот класс представляет конкретные пути "
"системного пути (при его создании создается либо :class:`PosixPath`, либо :"
"class:`WindowsPath`)::"

#: ../../library/pathlib.rst:763
msgid ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"
msgstr ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"

#: ../../library/pathlib.rst:770
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
"Подкласс :class:`Path` и :class:`PurePosixPath`, этот класс представляет "
"конкретные пути к файловой системе, отличной от Windows::"

#: ../../library/pathlib.rst:773
msgid ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:778
msgid ""
"Raises :exc:`UnsupportedOperation` on Windows. In previous versions, :exc:"
"`NotImplementedError` was raised instead."
msgstr ""
"Вызывает :exc:`UnsupportedOperation` в Windows. В предыдущих версиях вместо "
"этого вызывалось :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:785
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
"Подкласс :class:`Path` и :class:`PureWindowsPath`, этот класс представляет "
"конкретные пути к файловой системе Windows::"

#: ../../library/pathlib.rst:788
msgid ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"
msgstr ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"

#: ../../library/pathlib.rst:793
msgid ""
"Raises :exc:`UnsupportedOperation` on non-Windows platforms. In previous "
"versions, :exc:`NotImplementedError` was raised instead."
msgstr ""
"Вызывает :exc:`UnsupportedOperation` на платформах, отличных от Windows. В "
"предыдущих версиях вместо этого вызывалось :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:798
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or "
"failures in your application)::"
msgstr ""
"Вы можете создать экземпляр только того класса, который соответствует вашей "
"системе (разрешение системных вызовов по несовместимым вариантам путей может "
"привести к ошибкам или сбоям в вашем приложении)::"

#: ../../library/pathlib.rst:802
msgid ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"UnsupportedOperation: cannot instantiate 'WindowsPath' on your system"
msgstr ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"UnsupportedOperation: cannot instantiate 'WindowsPath' on your system"

#: ../../library/pathlib.rst:816
msgid ""
"Some concrete path methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""
"Некоторые методы конкретного пути могут вызвать ошибку :exc:`OSError` в "
"случае сбоя системного вызова (например, из-за того, что путь не существует)."

#: ../../library/pathlib.rst:821
msgid "Parsing and generating URIs"
msgstr "Парсинг и генерация URI"

#: ../../library/pathlib.rst:823
msgid ""
"Concrete path objects can be created from, and represented as, 'file' URIs "
"conforming to :rfc:`8089`."
msgstr ""
"Объекты конкретного пути могут быть созданы и представлены как «файловые» "
"URI, соответствующие :rfc:`8089`."

#: ../../library/pathlib.rst:828
msgid ""
"File URIs are not portable across machines with different :ref:`filesystem "
"encodings <filesystem-encoding>`."
msgstr ""
"Файловые URI не переносятся между компьютерами с разными кодировками "
"файловой системы <filesystem-encoding>`."

#: ../../library/pathlib.rst:833
msgid "Return a new path object from parsing a 'file' URI. For example::"
msgstr "Вернуть новый объект пути в результате анализа URI «файла». Например::"

#: ../../library/pathlib.rst:835
msgid ""
">>> p = Path.from_uri('file:///etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""
">>> p = Path.from_uri('file:///etc/hosts')\n"
"PosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:838
msgid "On Windows, DOS device and UNC paths may be parsed from URIs::"
msgstr ""
"В Windows устройства DOS и пути UNC могут быть проанализированы из URI::"

#: ../../library/pathlib.rst:840
msgid ""
">>> p = Path.from_uri('file:///c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file://server/share')\n"
"WindowsPath('//server/share')"
msgstr ""
">>> p = Path.from_uri('file:///c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file://server/share')\n"
"WindowsPath('//server/share')"

#: ../../library/pathlib.rst:845
msgid "Several variant forms are supported::"
msgstr "Поддерживаются несколько вариантов форм:"

#: ../../library/pathlib.rst:847
msgid ""
">>> p = Path.from_uri('file:////server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file://///server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file:c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file:/c|/windows')\n"
"WindowsPath('c:/windows')"
msgstr ""
">>> p = Path.from_uri('file:////server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file://///server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file:c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file:/c|/windows')\n"
"WindowsPath('c:/windows')"

#: ../../library/pathlib.rst:856
msgid ""
":exc:`ValueError` is raised if the URI does not start with ``file:``, or the "
"parsed path isn't absolute."
msgstr ""
":exc:`ValueError` возникает, если URI не начинается с ``file:`` или "
"проанализированный путь не является абсолютным."

#: ../../library/pathlib.rst:864
msgid ""
"Represent the path as a 'file' URI.  :exc:`ValueError` is raised if the path "
"isn't absolute."
msgstr ""
"Представьте путь как URI «файла». :exc:`ValueError` возникает, если путь не "
"является абсолютным."

#: ../../library/pathlib.rst:867
msgid ""
">>> p = PosixPath('/etc/passwd')\n"
">>> p.as_uri()\n"
"'file:///etc/passwd'\n"
">>> p = WindowsPath('c:/Windows')\n"
">>> p.as_uri()\n"
"'file:///c:/Windows'"
msgstr ""
">>> p = PosixPath('/etc/passwd')\n"
">>> p.as_uri()\n"
"'file:///etc/passwd'\n"
">>> p = WindowsPath('c:/Windows')\n"
">>> p.as_uri()\n"
"'file:///c:/Windows'"

#: ../../library/pathlib.rst:876
msgid ""
"For historical reasons, this method is also available from :class:`PurePath` "
"objects. However, its use of :func:`os.fsencode` makes it strictly impure."
msgstr ""
"По историческим причинам этот метод также доступен из объектов :class:"
"`PurePath`. Однако использование :func:`os.fsencode` делает его строго "
"нечистым."

#: ../../library/pathlib.rst:882
msgid "Expanding and resolving paths"
msgstr "Расширение и разрешение путей"

#: ../../library/pathlib.rst:886
msgid ""
"Return a new path object representing the user's home directory (as returned "
"by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""
"Возвращает новый объект пути, представляющий домашний каталог пользователя "
"(возвращаемый :func:`os.path.expanduser` с конструкцией ``~``). Если "
"домашний каталог не может быть разрешен, возникает :exc:`RuntimeError`."

#: ../../library/pathlib.rst:892
msgid ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"
msgstr ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"

#: ../../library/pathlib.rst:900
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be resolved, :exc:"
"`RuntimeError` is raised."
msgstr ""
"Возвращает новый путь с расширенными конструкциями ``~`` и ``~user``, как "
"это возвращает :meth:`os.path.expanduser`. Если домашний каталог не может "
"быть разрешен, возникает :exc:`RuntimeError`."

#: ../../library/pathlib.rst:906
msgid ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"
msgstr ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"

#: ../../library/pathlib.rst:915
msgid ""
"Return a new path object representing the current directory (as returned by :"
"func:`os.getcwd`)::"
msgstr ""
"Вернуть новый объект пути, представляющий текущий каталог (возвращенный :"
"func:`os.getcwd`)::"

#: ../../library/pathlib.rst:918
msgid ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"

#: ../../library/pathlib.rst:924
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns "
"a new path object::"
msgstr ""
"Сделайте путь абсолютным, без нормализации или разрешения символических "
"ссылок. Возвращает новый объект пути::"

#: ../../library/pathlib.rst:927
msgid ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"
msgstr ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"

#: ../../library/pathlib.rst:936
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""
"Сделайте путь абсолютным, разрешая любые символические ссылки. Возвращается "
"новый объект пути::"

#: ../../library/pathlib.rst:939
msgid ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"

#: ../../library/pathlib.rst:945
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""
"Компоненты \"``..``\" также удаляются (это единственный способ сделать это)::"

#: ../../library/pathlib.rst:947
msgid ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"
msgstr ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"

#: ../../library/pathlib.rst:951
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is "
"``True``, :exc:`OSError` is raised.  If *strict* is ``False``, the path is "
"resolved as far as possible and any remainder is appended without checking "
"whether it exists."
msgstr ""
"Если путь не существует или обнаружен цикл символической ссылки, а *strict* "
"имеет значение True, возникает :exc:`OSError`. Если *strict* имеет значение "
"False, путь разрешается, насколько это возможно, и любой остаток добавляется "
"без проверки его существования."

#: ../../library/pathlib.rst:956
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr "Был добавлен параметр *strict* (до версии 3.6 поведение было строгим)."

#: ../../library/pathlib.rst:959
msgid ""
"Symlink loops are treated like other errors: :exc:`OSError` is raised in "
"strict mode, and no exception is raised in non-strict mode. In previous "
"versions, :exc:`RuntimeError` is raised no matter the value of *strict*."
msgstr ""
"Циклы символических ссылок обрабатываются так же, как и другие ошибки: :exc:"
"`OSError` возникает в строгом режиме, а в нестрогом режиме не возникает "
"никаких исключений. В предыдущих версиях :exc:`RuntimeError` возникал "
"независимо от значения *strict*."

#: ../../library/pathlib.rst:967
msgid ""
"Return the path to which the symbolic link points (as returned by :func:`os."
"readlink`)::"
msgstr ""
"Возвращает путь, на который указывает символическая ссылка (возвращенная :"
"func:`os.readlink`)::"

#: ../../library/pathlib.rst:970
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"
msgstr ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"

#: ../../library/pathlib.rst:977
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.readlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"Вызывает :exc:`UnsupportedOperation`, если :func:`os.readlink` недоступен. В "
"предыдущих версиях возникало :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:983
msgid "Querying file type and status"
msgstr "Запрос типа и статуса файла"

#: ../../library/pathlib.rst:987
msgid ""
":meth:`~Path.exists`, :meth:`~Path.is_dir`, :meth:`~Path.is_file`, :meth:"
"`~Path.is_mount`, :meth:`~Path.is_symlink`, :meth:`~Path.is_block_device`, :"
"meth:`~Path.is_char_device`, :meth:`~Path.is_fifo`, :meth:`~Path.is_socket` "
"now return ``False`` instead of raising an exception for paths that contain "
"characters unrepresentable at the OS level."
msgstr ""
":meth:`~Path.exists`, :meth:`~Path.is_dir`, :meth:`~Path.is_file`, :meth:"
"`~Path.is_mount`, :meth:`~Path.is_symlink`, :meth:`~Path.is_block_device`, :"
"meth:`~Path.is_char_device`, :meth:`~Path.is_fifo`, :meth:`~Path.is_socket` "
"теперь возвращают ``False`` вместо вызова исключение для путей, содержащих "
"символы, непредставимые на уровне ОС."

#: ../../library/pathlib.rst:997
msgid ""
"Return an :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""
"Верните объект :class:`os.stat_result`, содержащий информацию об этом пути, "
"например :func:`os.stat`. Результат просматривается при каждом вызове этого "
"метода."

#: ../../library/pathlib.rst:1000
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""
"Этот метод обычно следует за символическими ссылками; для проверки "
"символической ссылки добавьте аргумент ``follow_symlinks=False`` или "
"используйте :meth:`~Path.lstat`."

#: ../../library/pathlib.rst:1005
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"
msgstr ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"

#: ../../library/pathlib.rst:1011 ../../library/pathlib.rst:1039
#: ../../library/pathlib.rst:1054 ../../library/pathlib.rst:1069
#: ../../library/pathlib.rst:1600 ../../library/pathlib.rst:1616
#: ../../library/pathlib.rst:1637
msgid "The *follow_symlinks* parameter was added."
msgstr "Добавлен параметр *follow_symlinks*."

#: ../../library/pathlib.rst:1017
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""
"Подобно :meth:`Path.stat`, но если путь указывает на символическую ссылку, "
"возвращайте информацию о символической ссылке, а не о ее цели."

#: ../../library/pathlib.rst:1023
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr "Верните True, если путь указывает на существующий файл или каталог."

#: ../../library/pathlib.rst:1025
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the "
"argument ``follow_symlinks=False``."
msgstr ""
"Этот метод обычно следует за символическими ссылками; чтобы проверить, "
"существует ли символическая ссылка, добавьте аргумент "
"«follow_symlinks=False»."

#: ../../library/pathlib.rst:1030
msgid ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"
msgstr ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"

#: ../../library/pathlib.rst:1045
msgid ""
"Return ``True`` if the path points to a regular file, ``False`` if it points "
"to another kind of file."
msgstr ""
"Возвращайте True, если путь указывает на обычный файл, и False, если он "
"указывает на файл другого типа."

#: ../../library/pathlib.rst:1048 ../../library/pathlib.rst:1063
#: ../../library/pathlib.rst:1111 ../../library/pathlib.rst:1120
#: ../../library/pathlib.rst:1129 ../../library/pathlib.rst:1138
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink; "
"other errors (such as permission errors) are propagated."
msgstr ""
"``False`` также возвращается, если путь не существует или является "
"неработающей символической ссылкой; другие ошибки (например, ошибки "
"разрешений) распространяются."

#: ../../library/pathlib.rst:1051
msgid ""
"This method normally follows symlinks; to exclude symlinks, add the argument "
"``follow_symlinks=False``."
msgstr ""
"Этот метод обычно следует за символическими ссылками; чтобы исключить "
"символические ссылки, добавьте аргумент «follow_symlinks=False»."

#: ../../library/pathlib.rst:1060
msgid ""
"Return ``True`` if the path points to a directory, ``False`` if it points to "
"another kind of file."
msgstr ""
"Возвращайте ``True``, если путь указывает на каталог, ``False``, если он "
"указывает на другой тип файла."

#: ../../library/pathlib.rst:1066
msgid ""
"This method normally follows symlinks; to exclude symlinks to directories, "
"add the argument ``follow_symlinks=False``."
msgstr ""
"Этот метод обычно следует за символическими ссылками; чтобы исключить "
"символические ссылки на каталоги, добавьте аргумент «follow_symlinks=False»."

#: ../../library/pathlib.rst:1075
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""
"Возвращайте True, если путь указывает на символическую ссылку, и False в "
"противном случае."

#: ../../library/pathlib.rst:1077
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""
"``False`` также возвращается, если путь не существует; другие ошибки "
"(например, ошибки разрешений) распространяются."

#: ../../library/pathlib.rst:1083
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr ""
"Возвращайте True, если путь указывает на перекресток, и False для любого "
"другого типа файла. В настоящее время только Windows поддерживает соединения."

#: ../../library/pathlib.rst:1091
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""
"Верните ``True``, если путь представляет собой :dfn:`точку монтирования`: "
"точку в файловой системе, где была смонтирована другая файловая система. В "
"POSIX функция проверяет, находится ли родительский элемент *path*, :file:"
"`path/..`, на другом устройстве, чем *path*, или находятся ли :file:`path/.."
"` и *path* точки к одному и тому же i-узлу на том же устройстве --- это "
"должно обнаружить точки монтирования для всех вариантов Unix и POSIX. В "
"Windows точкой монтирования считается корень диска (например, ``c:\\``), "
"общий ресурс UNC (например, ``\\\\server\\share``) или смонтированный "
"каталог файловой системы."

#: ../../library/pathlib.rst:1102
msgid "Windows support was added."
msgstr "Добавлена ​​поддержка Windows."

#: ../../library/pathlib.rst:1108
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""
"Возвращайте ``True``, если путь указывает на сокет Unix (или символическую "
"ссылку, указывающую на сокет Unix), ``False``, если он указывает на файл "
"другого типа."

#: ../../library/pathlib.rst:1117
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to "
"a FIFO), ``False`` if it points to another kind of file."
msgstr ""
"Возвращайте ``True``, если путь указывает на FIFO (или символическую ссылку, "
"указывающую на FIFO), ``False``, если он указывает на файл другого типа."

#: ../../library/pathlib.rst:1126
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""
"Возвращайте ``True``, если путь указывает на блочное устройство (или "
"символическую ссылку, указывающую на блочное устройство), ``False``, если он "
"указывает на другой тип файла."

#: ../../library/pathlib.rst:1135
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link "
"pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""
"Возвращайте ``True``, если путь указывает на символьное устройство (или "
"символическую ссылку, указывающую на символьное устройство), ``False``, если "
"он указывает на файл другого типа."

#: ../../library/pathlib.rst:1144
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to :func:"
"`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""
"Возвращает значение, указывает ли этот путь на тот же файл, что и "
"*other_path*, который может быть либо объектом Path, либо строкой. Семантика "
"аналогична :func:`os.path.samefile` и :func:`os.path.samestat`."

#: ../../library/pathlib.rst:1148
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""
"Ошибка :exc:`OSError` может быть выдана, если по какой-либо причине доступ к "
"одному из файлов невозможен."

#: ../../library/pathlib.rst:1153
msgid ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"
msgstr ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"

#: ../../library/pathlib.rst:1164
msgid "Reading and writing files"
msgstr "Чтение и запись файлов"

#: ../../library/pathlib.rst:1169
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""
"Откройте файл, на который указывает путь, как это делает встроенная функция :"
"func:`open`::"

#: ../../library/pathlib.rst:1172
msgid ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"
msgstr ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"

#: ../../library/pathlib.rst:1181
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr "Вернуть декодированное содержимое указанного файла в виде строки::"

#: ../../library/pathlib.rst:1183 ../../library/pathlib.rst:1216
msgid ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"
msgstr ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"

#: ../../library/pathlib.rst:1189
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr ""
"Файл открывается, а затем закрывается. Необязательные параметры имеют то же "
"значение, что и в :func:`open`."

#: ../../library/pathlib.rst:1194 ../../library/pathlib.rst:1227
msgid "The *newline* parameter was added."
msgstr "Добавлен параметр *newline*."

#: ../../library/pathlib.rst:1200
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""
"Вернуть двоичное содержимое указанного файла в виде байтового объекта::"

#: ../../library/pathlib.rst:1202 ../../library/pathlib.rst:1236
msgid ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"
msgstr ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"

#: ../../library/pathlib.rst:1213
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""
"Откройте указанный файл в текстовом режиме, напишите в него *данные* и "
"закройте файл::"

#: ../../library/pathlib.rst:1222
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr ""
"Существующий файл с таким же именем будет перезаписан. Необязательные "
"параметры имеют то же значение, что и в :func:`open`."

#: ../../library/pathlib.rst:1233
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""
"Откройте указанный файл в байтовом режиме, запишите в него *данные* и "
"закройте файл::"

#: ../../library/pathlib.rst:1242
msgid "An existing file of the same name is overwritten."
msgstr "Существующий файл с таким же именем будет перезаписан."

#: ../../library/pathlib.rst:1248
msgid "Reading directories"
msgstr "Чтение каталогов"

#: ../../library/pathlib.rst:1252
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""
"Когда путь указывает на каталог, выведите объекты пути содержимого каталога::"

#: ../../library/pathlib.rst:1255
msgid ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"
msgstr ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"

#: ../../library/pathlib.rst:1266
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'`` "
"and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, it is unspecified whether a path "
"object for that file is included."
msgstr ""
"Дочерние элементы выводятся в произвольном порядке, а специальные записи "
"``'.'`` и ``'..'`` не включаются. Если файл удаляется из каталога или "
"добавляется в него после создания итератора, не указано, включен ли объект "
"пути для этого файла."

#: ../../library/pathlib.rst:1271
msgid ""
"If the path is not a directory or otherwise inaccessible, :exc:`OSError` is "
"raised."
msgstr ""
"Если путь не является каталогом или недоступен по какой-либо причине, "
"возникает :exc:`OSError`."

#: ../../library/pathlib.rst:1276
msgid ""
"Glob the given relative *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr ""
"Добавьте заданный относительный *шаблон* в каталог, представленный этим "
"путем, получив все соответствующие файлы (любого типа)::"

#: ../../library/pathlib.rst:1279
msgid ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib."
"py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]\n"
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib."
"py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]\n"
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"

#: ../../library/pathlib.rst:1293
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"По умолчанию или когда для аргумента только ключевого слова "
"*case_sensitivity* установлено значение ``None``, этот метод сопоставляет "
"пути с использованием правил регистра, специфичных для платформы: обычно с "
"учетом регистра в POSIX и без учета регистра в Windows. Установите для "
"*case_sensitivity* значение True или False, чтобы переопределить это "
"поведение."

#: ../../library/pathlib.rst:1298
msgid ""
"By default, or when the *recurse_symlinks* keyword-only argument is set to "
"``False``, this method follows symlinks except when expanding \"``**``\" "
"wildcards. Set *recurse_symlinks* to ``True`` to always follow symlinks."
msgstr ""
"По умолчанию или когда для аргумента только ключевого слова "
"*recurse_symlinks* установлено значение ``False``, этот метод следует за "
"символическими ссылками, за исключением случаев расширения подстановочных "
"знаков \"``**``\". Установите для *recurse_symlinks* значение ``True``, "
"чтобы всегда переходить по символическим ссылкам."

#: ../../library/pathlib.rst:1302
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"Вызывает событие аудита <auditing>`pathlib.Path.glob`` с аргументами "
"``self``, ``pattern``."

#: ../../library/pathlib.rst:1307 ../../library/pathlib.rst:1332
msgid "The *recurse_symlinks* parameter was added."
msgstr "Добавлен параметр *recurse_symlinks*."

#: ../../library/pathlib.rst:1313
msgid ""
"Any :exc:`OSError` exceptions raised from scanning the filesystem are "
"suppressed. In previous versions, such exceptions are suppressed in many "
"cases, but not all."
msgstr ""
"Любые исключения :exc:`OSError`, возникающие при сканировании файловой "
"системы, подавляются. В предыдущих версиях такие исключения подавлялись во "
"многих случаях, но не во всех."

#: ../../library/pathlib.rst:1321
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling :func:"
"`Path.glob` with \"``**/``\" added in front of the *pattern*."
msgstr ""
"Рекурсивно добавьте заданный относительный *шаблон*. Это похоже на вызов :"
"func:`Path.glob` с добавлением \"``**/``\" перед *шаблоном*."

#: ../../library/pathlib.rst:1325
msgid ":ref:`pathlib-pattern-language` and :meth:`Path.glob` documentation."
msgstr "Документация :ref:`pathlib-pattern-language` и :meth:`Path.glob`."

#: ../../library/pathlib.rst:1327
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"Вызывает событие аудита <auditing>`pathlib.Path.rglob`` с аргументами "
"``self``, ``pattern``."

#: ../../library/pathlib.rst:1341
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr ""
"Сгенерируйте имена файлов в дереве каталогов, пройдя по дереву сверху вниз "
"или снизу вверх."

#: ../../library/pathlib.rst:1344
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""
"Для каждого каталога в дереве каталогов, корнем которого является *self* "
"(включая *self*, но исключая «.» и «..»), метод возвращает тройной кортеж "
"``(dirpath, dirnames, filenames)``."

#: ../../library/pathlib.rst:1348
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath* "
"(excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which "
"begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""
"*dirpath* — это :class:`Путь` к текущему каталогу, *dirnames* — это список "
"строк с именами подкаталогов в *dirpath* (исключая ``'.'`` и ``'.. '``), а "
"*filenames* — это список строк для имен файлов, не являющихся каталогами, в "
"*dirpath*. Чтобы получить полный путь (который начинается с *self*) к файлу "
"или каталогу в *dirpath*, выполните ``dirpath / name``. Сортировка списков "
"зависит от файловой системы."

#: ../../library/pathlib.rst:1356
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""
"Если необязательный аргумент *top_down* имеет значение true (это значение по "
"умолчанию), тройка для каталога генерируется раньше троек для любого из его "
"подкаталогов (каталоги просматриваются сверху вниз). Если *top_down* имеет "
"значение false, тройка для каталога генерируется после троек для всех его "
"подкаталогов (каталоги просматриваются снизу вверх). Независимо от значения "
"*top_down*, список подкаталогов извлекается до того, как будут пройдены "
"тройки каталога и его подкаталогов."

#: ../../library/pathlib.rst:1364
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), and :meth:`Path."
"walk` will only recurse into the subdirectories whose names remain in "
"*dirnames*. This can be used to prune the search, or to impose a specific "
"order of visiting, or even to inform :meth:`Path.walk` about directories the "
"caller creates or renames before it resumes :meth:`Path.walk` again. "
"Modifying *dirnames* when *top_down* is false has no effect on the behavior "
"of :meth:`Path.walk` since the directories in *dirnames* have already been "
"generated by the time *dirnames* is yielded to the caller."
msgstr ""
"Когда *top_down* имеет значение true, вызывающая сторона может изменить "
"список *dirnames* на месте (например, используя :keyword:`del` или "
"назначение фрагмента), а :meth:`Path.walk` будет рекурсивно обращаться "
"только к подкаталогам. чьи имена остаются в *dirnames*. Это можно "
"использовать для ограничения поиска или для установления определенного "
"порядка посещения, или даже для информирования :meth:`Path.walk` о "
"каталогах, которые вызывающий объект создает или переименовывает, прежде чем "
"он снова возобновит :meth:`Path.walk`. Изменение *dirnames*, когда "
"*top_down* имеет значение false, не влияет на поведение :meth:`Path.walk`, "
"поскольку каталоги в *dirnames* уже созданы к моменту передачи *dirnames* "
"вызывающему объекту."

#: ../../library/pathlib.rst:1374
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called "
"with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""
"По умолчанию ошибки из :func:`os.scandir` игнорируются. Если указан "
"необязательный аргумент *on_error*, он должен быть вызываемым; он будет "
"вызываться с одним аргументом — экземпляром :exc:`OSError`. Вызываемый "
"объект может обработать ошибку, чтобы продолжить обход, или повторно поднять "
"его, чтобы остановить обход. Обратите внимание, что имя файла доступно как "
"атрибут filename объекта исключения."

#: ../../library/pathlib.rst:1380
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""
"По умолчанию :meth:`Path.walk` не следует по символическим ссылкам, а вместо "
"этого добавляет их в список *filenames*. Установите для параметра "
"*follow_symlinks* значение true, чтобы разрешать символические ссылки и "
"размещать их в *dirnames* и *filenames* в соответствии с их целями и, "
"следовательно, посещать каталоги, на которые указывают символические ссылки "
"(где это поддерживается)."

#: ../../library/pathlib.rst:1387
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. :meth:`Path."
"walk` does not keep track of the directories it has already visited."
msgstr ""
"Имейте в виду, что установка для *follow_symlinks* значения true может "
"привести к бесконечной рекурсии, если ссылка указывает на собственный "
"родительский каталог. :meth:`Path.walk` не отслеживает каталоги, которые он "
"уже посетил."

#: ../../library/pathlib.rst:1392
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""
":meth:`Path.walk` предполагает, что каталоги, по которым он проходит, не "
"изменяются во время выполнения. Например, если каталог из *dirnames* был "
"заменен символической ссылкой, а *follow_symlinks* имеет значение false, :"
"meth:`Path.walk` все равно попытается спуститься в него. Чтобы предотвратить "
"такое поведение, удалите каталоги из *dirnames*, если это необходимо."

#: ../../library/pathlib.rst:1400
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""
"В отличие от :func:`os.walk`, :meth:`Path.walk` перечисляет символические "
"ссылки на каталоги в *filenames*, если *follow_symlinks* имеет значение "
"false."

#: ../../library/pathlib.rst:1403
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""
"В этом примере отображается количество байтов, используемых всеми файлами в "
"каждом каталоге, игнорируя каталоги ``__pycache__``::"

#: ../../library/pathlib.rst:1406
msgid ""
"from pathlib import Path\n"
"for root, dirs, files in Path(\"cpython/Lib/concurrent\")."
"walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"
msgstr ""
"from pathlib import Path\n"
"for root, dirs, files in Path(\"cpython/Lib/concurrent\")."
"walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"

#: ../../library/pathlib.rst:1419
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""
"Следующий пример представляет собой простую реализацию :func:`shutil."
"rmtree`. Прогулка по дереву снизу вверх очень важна, поскольку :func:`rmdir` "
"не позволяет удалить каталог, пока он не станет пустым::"

#: ../../library/pathlib.rst:1423
msgid ""
"# Delete everything reachable from the directory \"top\".\n"
"# CAUTION:  This is dangerous! For example, if top == Path('/'),\n"
"# it could delete all of your files.\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"
msgstr ""
"# Delete everything reachable from the directory \"top\".\n"
"# CAUTION:  This is dangerous! For example, if top == Path('/'),\n"
"# it could delete all of your files.\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"

#: ../../library/pathlib.rst:1436
msgid "Creating files and directories"
msgstr "Создание файлов и каталогов"

#: ../../library/pathlib.rst:1440
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process's ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds when *exist_ok* is true "
"(and its modification time is updated to the current time), otherwise :exc:"
"`FileExistsError` is raised."
msgstr ""
"Создайте файл по данному пути. Если указан *mode*, он объединяется со "
"значением ``umask`` процесса для определения режима файла и флагов доступа. "
"Если файл уже существует, функция завершается успешно, если *exist_ok* имеет "
"значение true (и время его модификации обновляется до текущего времени), в "
"противном случае выдается :exc:`FileExistsError`."

#: ../../library/pathlib.rst:1447
msgid ""
"The :meth:`~Path.open`, :meth:`~Path.write_text` and :meth:`~Path."
"write_bytes` methods are often used to create files."
msgstr ""
"Методы :meth:`~Path.open`, :meth:`~Path.write_text` и :meth:`~Path."
"write_bytes` часто используются для создания файлов."

#: ../../library/pathlib.rst:1453
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process's ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""
"Создайте новый каталог по данному пути. Если указан *mode*, он объединяется "
"со значением ``umask`` процесса для определения режима файла и флагов "
"доступа. Если путь уже существует, возникает :exc:`FileExistsError`."

#: ../../library/pathlib.rst:1458
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""
"Если *parents* имеет значение true, все отсутствующие родительские элементы "
"этого пути создаются по мере необходимости; они создаются с разрешениями по "
"умолчанию без учета *mode* (имитируя команду POSIX ``mkdir -p``)."

#: ../../library/pathlib.rst:1462
msgid ""
"If *parents* is false (the default), a missing parent raises :exc:"
"`FileNotFoundError`."
msgstr ""
"Если *parents* имеет значение false (по умолчанию), отсутствующий родитель "
"вызывает :exc:`FileNotFoundError`."

#: ../../library/pathlib.rst:1465
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""
"Если *exist_ok* имеет значение false (по умолчанию), :exc:`FileExistsError` "
"возникает, если целевой каталог уже существует."

#: ../../library/pathlib.rst:1468
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` will not be raised unless the "
"given path already exists in the file system and is not a directory (same "
"behavior as the POSIX ``mkdir -p`` command)."
msgstr ""
"Если *exist_ok* имеет значение true, :exc:`FileExistsError` не будет "
"вызываться, если данный путь уже не существует в файловой системе и не "
"является каталогом (то же поведение, что и у команды POSIX ``mkdir -p``)."

#: ../../library/pathlib.rst:1472
msgid "The *exist_ok* parameter was added."
msgstr "Добавлен параметр *exist_ok*."

#: ../../library/pathlib.rst:1478
msgid "Make this path a symbolic link pointing to *target*."
msgstr "Сделайте этот путь символической ссылкой, указывающей на *цель*."

#: ../../library/pathlib.rst:1480
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is true or a file symlink (the default) "
"otherwise.  On non-Windows platforms, *target_is_directory* is ignored."
msgstr ""
"В Windows символическая ссылка представляет либо файл, либо каталог и не "
"преобразуется в цель динамически. Если цель присутствует, тип символической "
"ссылки будет создан соответствующий. В противном случае символическая ссылка "
"будет создана как каталог, если *target_is_directory* имеет значение true, "
"или как символическая ссылка на файл (по умолчанию) в противном случае. На "
"платформах, отличных от Windows, *target_is_directory* игнорируется."

#: ../../library/pathlib.rst:1488
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"
msgstr ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"

#: ../../library/pathlib.rst:1498
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.symlink`'s."
msgstr ""
"Порядок аргументов (ссылка, цель) обратный порядку аргументов :func:`os."
"symlink`."

#: ../../library/pathlib.rst:1501
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.symlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"Вызывает :exc:`UnsupportedOperation`, если :func:`os.symlink` недоступен. В "
"предыдущих версиях возникало :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:1508
msgid "Make this path a hard link to the same file as *target*."
msgstr "Сделайте этот путь жесткой ссылкой на тот же файл, что и *target*."

#: ../../library/pathlib.rst:1511
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr ""
"Порядок аргументов (ссылка, цель) обратный порядку аргументов :func:`os."
"link`."

#: ../../library/pathlib.rst:1516
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.link` is not available. In "
"previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"Вызывает :exc:`UnsupportedOperation`, если :func:`os.link` недоступен. В "
"предыдущих версиях возникало :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:1522
msgid "Renaming and deleting"
msgstr "Переименование и удаление"

#: ../../library/pathlib.rst:1526
msgid ""
"Rename this file or directory to the given *target*, and return a new :class:"
"`!Path` instance pointing to *target*.  On Unix, if *target* exists and is a "
"file, it will be replaced silently if the user has permission. On Windows, "
"if *target* exists, :exc:`FileExistsError` will be raised. *target* can be "
"either a string or another path object::"
msgstr ""
"Переименуйте этот файл или каталог в указанную *target* и верните новый "
"экземпляр :class:`!Path`, указывающий на *target*. В Unix, если *target* "
"существует и является файлом, он будет заменен автоматически, если у "
"пользователя есть разрешение. В Windows, если *target* существует, будет "
"вызвано :exc:`FileExistsError`. *target* может быть строкой или другим "
"объектом пути::"

#: ../../library/pathlib.rst:1532
msgid ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"
msgstr ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"

#: ../../library/pathlib.rst:1541 ../../library/pathlib.rst:1557
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the :class:"
"`!Path` object."
msgstr ""
"Целевой путь может быть абсолютным или относительным. Относительные пути "
"интерпретируются относительно текущего рабочего каталога, *а не* каталога "
"объекта :class:`!Path`."

#: ../../library/pathlib.rst:1545
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr "Он реализован с помощью :func:`os.rename` и дает те же гарантии."

#: ../../library/pathlib.rst:1547 ../../library/pathlib.rst:1561
msgid "Added return value, return the new :class:`!Path` instance."
msgstr ""
"Добавлено возвращаемое значение, возвращает новый экземпляр :class:`!Path`."

#: ../../library/pathlib.rst:1553
msgid ""
"Rename this file or directory to the given *target*, and return a new :class:"
"`!Path` instance pointing to *target*.  If *target* points to an existing "
"file or empty directory, it will be unconditionally replaced."
msgstr ""
"Переименуйте этот файл или каталог в указанную *target* и верните новый "
"экземпляр :class:`!Path`, указывающий на *target*. Если *target* указывает "
"на существующий файл или пустой каталог, он будет безоговорочно заменен."

#: ../../library/pathlib.rst:1567
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use :"
"func:`Path.rmdir` instead."
msgstr ""
"Удалите этот файл или символическую ссылку. Если путь указывает на каталог, "
"используйте вместо него :func:`Path.rmdir`."

#: ../../library/pathlib.rst:1570
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr ""
"Если *missing_ok* имеет значение false (по умолчанию), :exc:"
"`FileNotFoundError` возникает, если путь не существует."

#: ../../library/pathlib.rst:1573
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored "
"(same behavior as the POSIX ``rm -f`` command)."
msgstr ""
"Если *missing_ok* истинно, исключения :exc:`FileNotFoundError` будут "
"игнорироваться (то же поведение, что и у команды POSIX ``rm -f``)."

#: ../../library/pathlib.rst:1576
msgid "The *missing_ok* parameter was added."
msgstr "Добавлен параметр *missing_ok*."

#: ../../library/pathlib.rst:1582
msgid "Remove this directory.  The directory must be empty."
msgstr "Удалите этот каталог. Каталог должен быть пустым."

#: ../../library/pathlib.rst:1586
msgid "Permissions and ownership"
msgstr "Разрешения и право собственности"

#: ../../library/pathlib.rst:1590
msgid ""
"Return the name of the user owning the file. :exc:`KeyError` is raised if "
"the file's user identifier (UID) isn't found in the system database."
msgstr ""
"Возвращает имя пользователя, владеющего файлом. :exc:`KeyError` возникает, "
"если идентификатор пользователя файла (UID) не найден в системной базе "
"данных."

#: ../../library/pathlib.rst:1593
msgid ""
"This method normally follows symlinks; to get the owner of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr ""
"Этот метод обычно следует за символическими ссылками; чтобы узнать владельца "
"символической ссылки, добавьте аргумент «follow_symlinks=False»."

#: ../../library/pathlib.rst:1596
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`pwd` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""
"Вызывает :exc:`UnsupportedOperation`, если модуль :mod:`pwd` недоступен. В "
"более ранних версиях возникало :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:1606
msgid ""
"Return the name of the group owning the file. :exc:`KeyError` is raised if "
"the file's group identifier (GID) isn't found in the system database."
msgstr ""
"Возвращает имя группы, владеющей файлом. :exc:`KeyError` возникает, если "
"идентификатор группы файла (GID) не найден в системной базе данных."

#: ../../library/pathlib.rst:1609
msgid ""
"This method normally follows symlinks; to get the group of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr ""
"Этот метод обычно следует за символическими ссылками; чтобы получить группу "
"символической ссылки, добавьте аргумент «follow_symlinks=False»."

#: ../../library/pathlib.rst:1612
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`grp` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""
"Вызывает :exc:`UnsupportedOperation`, если модуль :mod:`grp` недоступен. В "
"более ранних версиях возникало :exc:`NotImplementedError`."

#: ../../library/pathlib.rst:1622
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr "Измените режим файла и разрешения, например :func:`os.chmod`."

#: ../../library/pathlib.rst:1624
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""
"Этот метод обычно следует за символическими ссылками. Некоторые версии Unix "
"поддерживают изменение разрешений для самой символической ссылки; на этих "
"платформах вы можете добавить аргумент ``follow_symlinks=False`` или "
"использовать :meth:`~Path.lchmod`."

#: ../../library/pathlib.rst:1630
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"
msgstr ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"

#: ../../library/pathlib.rst:1643
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""
"Подобно :meth:`Path.chmod`, но если путь указывает на символическую ссылку, "
"изменяется режим символической ссылки, а не ее целевой."

#: ../../library/pathlib.rst:1650
msgid "Pattern language"
msgstr "Язык шаблонов"

#: ../../library/pathlib.rst:1652
msgid ""
"The following wildcards are supported in patterns for :meth:`~PurePath."
"full_match`, :meth:`~Path.glob` and :meth:`~Path.rglob`:"
msgstr ""
"Следующие подстановочные знаки поддерживаются в шаблонах для :meth:"
"`~PurePath.full_match`, :meth:`~Path.glob` и :meth:`~Path.rglob`:"

#: ../../library/pathlib.rst:1655
msgid "``**`` (entire segment)"
msgstr "``**`` (весь сегмент)"

#: ../../library/pathlib.rst:1656
msgid "Matches any number of file or directory segments, including zero."
msgstr ""
"Соответствует любому количеству сегментов файла или каталога, включая ноль."

#: ../../library/pathlib.rst:1657
msgid "``*`` (entire segment)"
msgstr "``*`` (весь сегмент)"

#: ../../library/pathlib.rst:1658
msgid "Matches one file or directory segment."
msgstr "Соответствует одному сегменту файла или каталога."

#: ../../library/pathlib.rst:1659
msgid "``*`` (part of a segment)"
msgstr "``*`` (часть сегмента)"

#: ../../library/pathlib.rst:1660
msgid "Matches any number of non-separator characters, including zero."
msgstr ""
"Соответствует любому количеству символов без разделителей, включая ноль."

#: ../../library/pathlib.rst:1661
msgid "``?``"
msgstr "``?``"

#: ../../library/pathlib.rst:1662
msgid "Matches one non-separator character."
msgstr "Соответствует одному символу, не являющемуся разделителем."

#: ../../library/pathlib.rst:1663
msgid "``[seq]``"
msgstr "``[seq]``"

#: ../../library/pathlib.rst:1664
msgid ""
"Matches one character in *seq*, where *seq* is a sequence of characters. "
"Range expressions are supported; for example, ``[a-z]`` matches any "
"lowercase ASCII letter. Multiple ranges can be combined: ``[a-zA-Z0-9_]`` "
"matches any ASCII letter, digit, or underscore."
msgstr ""

#: ../../library/pathlib.rst:1668
msgid "``[!seq]``"
msgstr "``[!seq]``"

#: ../../library/pathlib.rst:1669
msgid ""
"Matches one character not in *seq*, where *seq* follows the same rules as "
"above."
msgstr ""

#: ../../library/pathlib.rst:1671
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``\"[?]\"`` matches the character ``\"?\"``."
msgstr ""
"Для буквального совпадения заключите метасимволы в скобки. Например, "
"``\"[?]\"`` соответствует символу ``\"?\"``."

#: ../../library/pathlib.rst:1674
msgid "The \"``**``\" wildcard enables recursive globbing. A few examples:"
msgstr ""
"Подстановочный знак «``**``» включает рекурсивное подстановку. Несколько "
"примеров:"

#: ../../library/pathlib.rst:1677
msgid "Pattern"
msgstr "Шаблон"

#: ../../library/pathlib.rst:1677
msgid "Meaning"
msgstr "Значение"

#: ../../library/pathlib.rst:1679
msgid "\"``**/*``\""
msgstr "\"``**/*``\""

#: ../../library/pathlib.rst:1679
msgid "Any path with at least one segment."
msgstr "Любой путь, содержащий хотя бы один сегмент."

#: ../../library/pathlib.rst:1680
msgid "\"``**/*.py``\""
msgstr "\"``**/*.py``\""

#: ../../library/pathlib.rst:1680
msgid "Any path with a final segment ending \"``.py``\"."
msgstr "Любой путь с конечным сегментом, заканчивающимся «``.py``»."

#: ../../library/pathlib.rst:1681
msgid "\"``assets/**``\""
msgstr "\"``assets/**``\""

#: ../../library/pathlib.rst:1681
msgid "Any path starting with \"``assets/``\"."
msgstr "Любой путь, начинающийся с «``assets/``»."

#: ../../library/pathlib.rst:1682
msgid "\"``assets/**/*``\""
msgstr "\"``assets/**/*``\""

#: ../../library/pathlib.rst:1682
msgid ""
"Any path starting with \"``assets/``\", excluding \"``assets/``\" itself."
msgstr ""
"Любой путь, начинающийся с «``assets/``», за исключением самого «``assets/"
"``»."

#: ../../library/pathlib.rst:1686
msgid ""
"Globbing with the \"``**``\" wildcard visits every directory in the tree. "
"Large directory trees may take a long time to search."
msgstr ""
"Подстановка с помощью подстановочного знака «``**``» позволяет посетить "
"каждый каталог в дереве. Поиск в больших деревьях каталогов может занять "
"много времени."

#: ../../library/pathlib.rst:1689
msgid ""
"Globbing with a pattern that ends with \"``**``\" returns both files and "
"directories. In previous versions, only directories were returned."
msgstr ""
"Подстановка по шаблону, заканчивающемуся на \"``**``\", возвращает как "
"файлы, так и каталоги. В предыдущих версиях возвращались только каталоги."

#: ../../library/pathlib.rst:1693
msgid ""
"In :meth:`Path.glob` and :meth:`~Path.rglob`, a trailing slash may be added "
"to the pattern to match only directories."
msgstr ""
"В :meth:`Path.glob` и :meth:`~Path.rglob` к шаблону может быть добавлена ​​"
"косая черта, чтобы соответствовать только каталогам."

#: ../../library/pathlib.rst:1696
msgid ""
"Globbing with a pattern that ends with a pathname components separator (:"
"data:`~os.sep` or :data:`~os.altsep`) returns only directories."
msgstr ""
"Подстановка по шаблону, который заканчивается разделителем компонентов имени "
"пути (:data:`~os.sep` или :data:`~os.altsep`), возвращает только каталоги."

#: ../../library/pathlib.rst:1702
msgid "Comparison to the :mod:`glob` module"
msgstr "Сравнение с модулем :mod:`glob`"

#: ../../library/pathlib.rst:1704
msgid ""
"The patterns accepted and results generated by :meth:`Path.glob` and :meth:"
"`Path.rglob` differ slightly from those by the :mod:`glob` module:"
msgstr ""
"Принимаемые шаблоны и результаты, генерируемые :meth:`Path.glob` и :meth:"
"`Path.rglob`, немного отличаются от результатов модуля :mod:`glob`:"

#: ../../library/pathlib.rst:1707
msgid ""
"Files beginning with a dot are not special in pathlib. This is like passing "
"``include_hidden=True`` to :func:`glob.glob`."
msgstr ""
"Файлы, начинающиеся с точки, не являются особенными в pathlib. Это похоже на "
"передачу ``include_hidden=True`` в :func:`glob.glob`."

#: ../../library/pathlib.rst:1709
msgid ""
"\"``**``\" pattern components are always recursive in pathlib. This is like "
"passing ``recursive=True`` to :func:`glob.glob`."
msgstr ""
"Компоненты шаблона «``**``» всегда рекурсивны в pathlib. Это похоже на "
"передачу ``recursive=True`` в :func:`glob.glob`."

#: ../../library/pathlib.rst:1711
msgid ""
"\"``**``\" pattern components do not follow symlinks by default in pathlib. "
"This behaviour has no equivalent in :func:`glob.glob`, but you can pass "
"``recurse_symlinks=True`` to :meth:`Path.glob` for compatible behaviour."
msgstr ""
"Компоненты шаблона «``**``» по умолчанию не следуют по символическим ссылкам "
"в pathlib. Это поведение не имеет эквивалента в :func:`glob.glob`, но вы "
"можете передать ``recurse_symlinks=True`` в :meth:`Path.glob` для "
"совместимого поведения."

#: ../../library/pathlib.rst:1714
msgid ""
"Like all :class:`PurePath` and :class:`Path` objects, the values returned "
"from :meth:`Path.glob` and :meth:`Path.rglob` don't include trailing slashes."
msgstr ""
"Как и все объекты :class:`PurePath` и :class:`Path`, значения, возвращаемые "
"из :meth:`Path.glob` и :meth:`Path.rglob`, не включают конечные косые черты."

#: ../../library/pathlib.rst:1717
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` "
"include the *path* as a prefix, unlike the results of ``glob."
"glob(root_dir=path)``."
msgstr ""
"Значения, возвращаемые из ``path.glob()`` и ``path.rglob()`` библиотеки "
"pathlib, включают *path* в качестве префикса, в отличие от результатов "
"``glob.glob(root_dir=path)``."

#: ../../library/pathlib.rst:1720
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` may "
"include *path* itself, for example when globbing \"``**``\", whereas the "
"results of ``glob.glob(root_dir=path)`` never include an empty string that "
"would correspond to *path*."
msgstr ""
"Значения, возвращаемые из ``path.glob()`` и ``path.rglob()`` библиотеки "
"pathlib, могут включать сам *path*, например, при подстановке \"``**``\", "
"тогда как результаты `` glob.glob(root_dir=path)`` никогда не включает "
"пустую строку, соответствующую *path*."

#: ../../library/pathlib.rst:1727
msgid "Comparison to the :mod:`os` and :mod:`os.path` modules"
msgstr "Сравнение с модулями :mod:`os` и :mod:`os.path`"

#: ../../library/pathlib.rst:1729
msgid ""
"pathlib implements path operations using :class:`PurePath` and :class:`Path` "
"objects, and so it's said to be *object-oriented*. On the other hand, the :"
"mod:`os` and :mod:`os.path` modules supply functions that work with low-"
"level ``str`` and ``bytes`` objects, which is a more *procedural* approach. "
"Some users consider the object-oriented style to be more readable."
msgstr ""
"pathlib реализует операции с путями, используя объекты :class:`PurePath` и :"
"class:`Path`, поэтому его называют *объектно-ориентированным*. С другой "
"стороны, модули :mod:`os` и :mod:`os.path` предоставляют функции, которые "
"работают с низкоуровневыми объектами ``str`` и ``bytes``, что является более "
"*процедурным* подход. Некоторые пользователи считают объектно-"
"ориентированный стиль более читабельным."

#: ../../library/pathlib.rst:1735
msgid ""
"Many functions in :mod:`os` and :mod:`os.path` support ``bytes`` paths and :"
"ref:`paths relative to directory descriptors <dir_fd>`. These features "
"aren't available in pathlib."
msgstr ""
"Многие функции в :mod:`os` и :mod:`os.path` поддерживают ``байтовые`` пути "
"и :ref:`пути относительно дескрипторов каталогов <dir_fd>`. Эти функции "
"недоступны в pathlib."

#: ../../library/pathlib.rst:1739
msgid ""
"Python's ``str`` and ``bytes`` types, and portions of the :mod:`os` and :mod:"
"`os.path` modules, are written in C and are very speedy. pathlib is written "
"in pure Python and is often slower, but rarely slow enough to matter."
msgstr ""
"Типы Python ``str`` и ``bytes``, а также части модулей :mod:`os` и :mod:`os."
"path` написаны на C и работают очень быстро. pathlib написан на чистом "
"Python и часто работает медленнее, но редко настолько медленный, чтобы это "
"имело значение."

#: ../../library/pathlib.rst:1743
msgid ""
"pathlib's path normalization is slightly more opinionated and consistent "
"than :mod:`os.path`. For example, whereas :func:`os.path.abspath` eliminates "
"\"``..``\" segments from a path, which may change its meaning if symlinks "
"are involved, :meth:`Path.absolute` preserves these segments for greater "
"safety."
msgstr ""
"Нормализация пути в pathlib немного более самоуверенна и последовательна, "
"чем в :mod:`os.path`. Например, в то время как :func:`os.path.abspath` "
"удаляет из пути сегменты \"``..``\", которые могут изменить его значение, "
"если задействованы символические ссылки, :meth:`Path.absolute` сохраняет эти "
"сегменты для большая безопасность."

#: ../../library/pathlib.rst:1748
msgid ""
"pathlib's path normalization may render it unsuitable for some applications:"
msgstr ""
"Нормализация пути в pathlib может сделать его непригодным для некоторых "
"приложений:"

#: ../../library/pathlib.rst:1750
msgid ""
"pathlib normalizes ``Path(\"my_folder/\")`` to ``Path(\"my_folder\")``, "
"which changes a path's meaning when supplied to various operating system "
"APIs and command-line utilities. Specifically, the absence of a trailing "
"separator may allow the path to be resolved as either a file or directory, "
"rather than a directory only."
msgstr ""
"pathlib нормализует ``Path(\"my_folder/\")`` до ``Path(\"my_folder\")``, что "
"меняет значение пути при его передаче различным API-интерфейсам операционной "
"системы и утилитам командной строки. В частности, отсутствие завершающего "
"разделителя может позволить разрешить путь либо как файл, либо как каталог, "
"а не только как каталог."

#: ../../library/pathlib.rst:1755
msgid ""
"pathlib normalizes ``Path(\"./my_program\")`` to ``Path(\"my_program\")``, "
"which changes a path's meaning when used as an executable search path, such "
"as in a shell or when spawning a child process. Specifically, the absence of "
"a separator in the path may force it to be looked up in :envvar:`PATH` "
"rather than the current directory."
msgstr ""
"pathlib нормализует ``Path(\"./my_program\")`` до ``Path(\"my_program\")``, "
"что меняет значение пути при использовании в качестве пути поиска "
"исполняемого файла, например, в оболочке или при создании дочернего "
"процесса . В частности, отсутствие разделителя в пути может привести к тому, "
"что его придется искать в :envvar:`PATH`, а не в текущем каталоге."

#: ../../library/pathlib.rst:1761
msgid ""
"As a consequence of these differences, pathlib is not a drop-in replacement "
"for :mod:`os.path`."
msgstr ""
"Как следствие этих различий, pathlib не является полной заменой :mod:`os."
"path`."

#: ../../library/pathlib.rst:1766
msgid "Corresponding tools"
msgstr "Соответствующие инструменты"

#: ../../library/pathlib.rst:1768
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding :"
"class:`PurePath`/:class:`Path` equivalent."
msgstr ""
"Ниже приведена таблица, сопоставляющая различные функции :mod:`os` с их "
"соответствующими эквивалентами :class:`PurePath`/:class:`Path`."

#: ../../library/pathlib.rst:1772
msgid ":mod:`os` and :mod:`os.path`"
msgstr ":mod:`os` и :mod:`os.path`"

#: ../../library/pathlib.rst:1772
msgid ":mod:`pathlib`"
msgstr ":mod:`pathlib`"

#: ../../library/pathlib.rst:1774
msgid ":func:`os.path.dirname`"
msgstr ":func:`os.path.dirname`"

#: ../../library/pathlib.rst:1774
msgid ":attr:`PurePath.parent`"
msgstr ":attr:`PurePath.parent`"

#: ../../library/pathlib.rst:1775
msgid ":func:`os.path.basename`"
msgstr ":func:`os.path.basename`"

#: ../../library/pathlib.rst:1775
msgid ":attr:`PurePath.name`"
msgstr ":attr:`PurePath.name`"

#: ../../library/pathlib.rst:1776
msgid ":func:`os.path.splitext`"
msgstr ":func:`os.path.splitext`"

#: ../../library/pathlib.rst:1776
msgid ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"
msgstr ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"

#: ../../library/pathlib.rst:1777
msgid ":func:`os.path.join`"
msgstr ":func:`os.path.join`"

#: ../../library/pathlib.rst:1777
msgid ":meth:`PurePath.joinpath`"
msgstr ":meth:`PurePath.joinpath`"

#: ../../library/pathlib.rst:1778
msgid ":func:`os.path.isabs`"
msgstr ":func:`os.path.isabs`"

#: ../../library/pathlib.rst:1778
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1779
msgid ":func:`os.path.relpath`"
msgstr ":func:`os.path.relpath`"

#: ../../library/pathlib.rst:1779
msgid ":meth:`PurePath.relative_to` [1]_"
msgstr ":meth:`PurePath.relative_to` [1]_"

#: ../../library/pathlib.rst:1780
msgid ":func:`os.path.expanduser`"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1780
msgid ":meth:`Path.expanduser` [2]_"
msgstr ":meth:`Path.expanduser` [2]_"

#: ../../library/pathlib.rst:1781
msgid ":func:`os.path.realpath`"
msgstr ":func:`os.path.realpath`"

#: ../../library/pathlib.rst:1781
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1782
msgid ":func:`os.path.abspath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1782
msgid ":meth:`Path.absolute` [3]_"
msgstr ":meth:`Path.absolute` [3]_"

#: ../../library/pathlib.rst:1783
msgid ":func:`os.path.exists`"
msgstr ":func:`os.path.exists`"

#: ../../library/pathlib.rst:1783
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1784
msgid ":func:`os.path.isfile`"
msgstr ":func:`os.path.isfile`"

#: ../../library/pathlib.rst:1784
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1785
msgid ":func:`os.path.isdir`"
msgstr ":func:`os.path.isdir`"

#: ../../library/pathlib.rst:1785
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1786
msgid ":func:`os.path.islink`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1786
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1787
msgid ":func:`os.path.isjunction`"
msgstr ":func:`os.path.isjunction`"

#: ../../library/pathlib.rst:1787
msgid ":meth:`Path.is_junction`"
msgstr ":meth:`Path.is_junction`"

#: ../../library/pathlib.rst:1788
msgid ":func:`os.path.ismount`"
msgstr ":func:`os.path.ismount`"

#: ../../library/pathlib.rst:1788
msgid ":meth:`Path.is_mount`"
msgstr ":meth:`Path.is_mount`"

#: ../../library/pathlib.rst:1789
msgid ":func:`os.path.samefile`"
msgstr ":func:`os.path.samefile`"

#: ../../library/pathlib.rst:1789
msgid ":meth:`Path.samefile`"
msgstr ":meth:`Path.samefile`"

#: ../../library/pathlib.rst:1790
msgid ":func:`os.getcwd`"
msgstr ":func:`os.getcwd`"

#: ../../library/pathlib.rst:1790
msgid ":meth:`Path.cwd`"
msgstr ":meth:`Path.cwd`"

#: ../../library/pathlib.rst:1791
msgid ":func:`os.stat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1791
msgid ":meth:`Path.stat`"
msgstr ":meth:`Path.stat`"

#: ../../library/pathlib.rst:1792
msgid ":func:`os.lstat`"
msgstr ":func:`os.lstat`"

#: ../../library/pathlib.rst:1792
msgid ":meth:`Path.lstat`"
msgstr ":meth:`Path.lstat`"

#: ../../library/pathlib.rst:1793
msgid ":func:`os.listdir`"
msgstr ":func:`os.listdir`"

#: ../../library/pathlib.rst:1793
msgid ":meth:`Path.iterdir`"
msgstr ":meth:`Path.iterdir`"

#: ../../library/pathlib.rst:1794
msgid ":func:`os.walk`"
msgstr ":func:`os.walk`"

#: ../../library/pathlib.rst:1794
msgid ":meth:`Path.walk` [4]_"
msgstr ":meth:`Path.walk` [4]_"

#: ../../library/pathlib.rst:1795
msgid ":func:`os.mkdir`, :func:`os.makedirs`"
msgstr ":func:`os.mkdir`, :func:`os.makedirs`"

#: ../../library/pathlib.rst:1795
msgid ":meth:`Path.mkdir`"
msgstr ":meth:`Path.mkdir`"

#: ../../library/pathlib.rst:1796
msgid ":func:`os.link`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1796
msgid ":meth:`Path.hardlink_to`"
msgstr ":meth:`Path.hardlink_to`"

#: ../../library/pathlib.rst:1797
msgid ":func:`os.symlink`"
msgstr ":func:`os.symlink`"

#: ../../library/pathlib.rst:1797
msgid ":meth:`Path.symlink_to`"
msgstr ":meth:`Path.symlink_to`"

#: ../../library/pathlib.rst:1798
msgid ":func:`os.readlink`"
msgstr ":func:`os.readlink`"

#: ../../library/pathlib.rst:1798
msgid ":meth:`Path.readlink`"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1799
msgid ":func:`os.rename`"
msgstr ":func:`os.rename`"

#: ../../library/pathlib.rst:1799
msgid ":meth:`Path.rename`"
msgstr ":meth:`Path.rename`"

#: ../../library/pathlib.rst:1800
msgid ":func:`os.replace`"
msgstr ":func:`os.replace`"

#: ../../library/pathlib.rst:1800
msgid ":meth:`Path.replace`"
msgstr ":meth:`Path.replace`"

#: ../../library/pathlib.rst:1801
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1801
msgid ":meth:`Path.unlink`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1802
msgid ":func:`os.rmdir`"
msgstr ":func:`os.rmdir`"

#: ../../library/pathlib.rst:1802
msgid ":meth:`Path.rmdir`"
msgstr ":meth:`Path.rmdir`"

#: ../../library/pathlib.rst:1803
msgid ":func:`os.chmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1803
msgid ":meth:`Path.chmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1804
msgid ":func:`os.lchmod`"
msgstr ":func:`os.lchmod`"

#: ../../library/pathlib.rst:1804
msgid ":meth:`Path.lchmod`"
msgstr ":meth:`Path.lchmod`"

#: ../../library/pathlib.rst:1808
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/pathlib.rst:1809
msgid ""
":func:`os.path.relpath` calls :func:`~os.path.abspath` to make paths "
"absolute and remove \"``..``\" parts, whereas :meth:`PurePath.relative_to` "
"is a lexical operation that raises :exc:`ValueError` when its inputs' "
"anchors differ (e.g. if one path is absolute and the other relative.)"
msgstr ""
":func:`os.path.relpath` вызывает :func:`~os.path.abspath`, чтобы сделать "
"пути абсолютными и удалить части \"``..``\", тогда как :meth:`PurePath."
"relative_to` является лексическим операция, которая вызывает :exc:"
"`ValueError`, когда ее входные привязки различаются (например, если один "
"путь является абсолютным, а другой относительным)."

#: ../../library/pathlib.rst:1813
msgid ""
":func:`os.path.expanduser` returns the path unchanged if the home directory "
"can't be resolved, whereas :meth:`Path.expanduser` raises :exc:"
"`RuntimeError`."
msgstr ""
":func:`os.path.expanduser` возвращает путь без изменений, если домашний "
"каталог не может быть разрешен, тогда как :meth:`Path.expanduser` вызывает :"
"exc:`RuntimeError`."

#: ../../library/pathlib.rst:1816
msgid ""
":func:`os.path.abspath` removes \"``..``\" components without resolving "
"symlinks, which may change the meaning of the path, whereas :meth:`Path."
"absolute` leaves any \"``..``\" components in the path."
msgstr ""
":func:`os.path.abspath` удаляет компоненты \"``..``\" без разрешения "
"символических ссылок, что может изменить значение пути, тогда как :meth:"
"`Path.absolute` оставляет любые \"``..` `\" компоненты в пути."

#: ../../library/pathlib.rst:1819
msgid ""
":func:`os.walk` always follows symlinks when categorizing paths into "
"*dirnames* and *filenames*, whereas :meth:`Path.walk` categorizes all "
"symlinks into *filenames* when *follow_symlinks* is false (the default.)"
msgstr ""
":func:`os.walk` всегда следует по символическим ссылкам при классификации "
"путей на *имена каталогов* и *имена файлов*, тогда как :meth:`Path.walk` "
"классифицирует все символические ссылки на *имена файлов*, когда "
"*follow_symlinks* имеет значение false (по умолчанию)."

#: ../../library/pathlib.rst:11
msgid "path"
msgstr "путь"

#: ../../library/pathlib.rst:11
msgid "operations"
msgstr "операции"
