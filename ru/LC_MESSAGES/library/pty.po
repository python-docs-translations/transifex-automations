# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/pty.rst:2
msgid ":mod:`!pty` --- Pseudo-terminal utilities"
msgstr ":mod:`!pty` --- Утилиты псевдотерминала"

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Исходный код:** "

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Модуль :mod:`pty` определяет операции для обработки концепции "
"псевдотерминала: запуск другого процесса и возможность программной записи и "
"чтения с его управляющего терминала."

#: ../../library/pty.rst:19
msgid "Availability"
msgstr "Доступность"

#: ../../library/pty.rst:21
msgid ""
"Pseudo-terminal handling is highly platform dependent. This code is mainly "
"tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX "
"platforms but it's not been thoroughly tested)."
msgstr ""
"Обработка псевдотерминала сильно зависит от платформы. Этот код в основном "
"тестировался на Linux, FreeBSD и macOS (предполагается, что он будет "
"работать на других платформах POSIX, но он не был тщательно протестирован)."

#: ../../library/pty.rst:25
msgid "The :mod:`pty` module defines the following functions:"
msgstr "Модуль :mod:`pty` определяет следующие функции:"

#: ../../library/pty.rst:30
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"Вилка. Подключите управляющий терминал ребенка к псевдотерминалу. "
"Возвращаемое значение: ``(pid, fd)``. Обратите внимание, что дочерний "
"элемент получает *pid* 0, а *fd* является *недействительным*. Возвращаемое "
"значение родителя — это *pid* дочернего элемента, а *fd* — это файловый "
"дескриптор, подключенный к управляющему терминалу дочернего элемента (а "
"также к стандартному вводу и выводу дочернего элемента)."

#: ../../library/pty.rst:36
msgid ""
"On macOS the use of this function is unsafe when mixed with using higher-"
"level system APIs, and that includes using :mod:`urllib.request`."
msgstr ""
"В macOS использование этой функции небезопасно в сочетании с использованием "
"системных API более высокого уровня, включая использование :mod:`urllib."
"request` ."

#: ../../library/pty.rst:42
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Откройте новую пару псевдотерминалов, используя :func:`os.openpty`, если это "
"возможно, или код эмуляции для общих систем Unix. Возвращает пару файловых "
"дескрипторов ``(master, подчиненный)`` для главного и подчиненного конца "
"соответственно."

#: ../../library/pty.rst:49
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Создайте процесс и подключите его управляющий терминал к стандартному io. "
"Это часто используется, чтобы сбить с толку программы, которые настаивают на "
"чтении с управляющего терминала. Ожидается, что процесс, порожденный за pty, "
"в конечном итоге завершится, и когда это произойдет, *spawn* вернется."

#: ../../library/pty.rst:55
msgid ""
"A loop copies STDIN of the current process to the child and data received "
"from the child to STDOUT of the current process. It is not signaled to the "
"child if STDIN of the current process closes down."
msgstr ""
"Цикл копирует STDIN текущего процесса в дочерний процесс, а данные, "
"полученные от дочернего процесса, в STDOUT текущего процесса. Дочернему "
"процессу не сообщается, если STDIN текущего процесса закрывается."

#: ../../library/pty.rst:59
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an empty byte "
"array should be returned to signal end of file."
msgstr ""
"Функциям *master_read* и *stdin_read* передается дескриптор файла, из "
"которого они должны читать, и они всегда должны возвращать строку байтов. "
"Чтобы заставить spawn вернуться до того, как дочерний процесс завершится, "
"пустой массив байтов должен быть возвращен в сигнальный конец файла."

#: ../../library/pty.rst:64
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"Реализация по умолчанию для обеих функций будет считывать и возвращать до "
"1024 байтов при каждом вызове функции. Обратному вызову *master_read* "
"передается главный файловый дескриптор псевдотерминала для чтения выходных "
"данных дочернего процесса, а *stdin_read* передается файловый дескриптор 0 "
"для чтения из стандартного ввода родительского процесса."

#: ../../library/pty.rst:70
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"Возврат пустой строки байтов из любого обратного вызова интерпретируется как "
"условие конца файла (EOF), и после этого обратный вызов не будет вызываться. "
"Если *stdin_read* сигнализирует EOF, управляющий терминал больше не может "
"взаимодействовать с родительским процессом ИЛИ дочерним процессом. Если "
"дочерний процесс не завершится без каких-либо входных данных, *spawn* будет "
"зацикливаться навсегда. Если *master_read* сигнализирует EOF, результат "
"будет таким же (по крайней мере, в Linux)."

#: ../../library/pty.rst:77
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
"Верните значение статуса завершения из :func:`os.waitpid` в дочернем "
"процессе."

#: ../../library/pty.rst:79
msgid ""
":func:`os.waitstatus_to_exitcode` can be used to convert the exit status "
"into an exit code."
msgstr ""
":func:`os.waitstatus_to_exitcode` можно использовать для преобразования "
"статуса выхода в код выхода."

#: ../../library/pty.rst:82
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr "Вызывает событие аудита <auditing>``pty.spawn`` с аргументом ``argv``."

#: ../../library/pty.rst:84
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` теперь возвращает значение статуса из :func:`os.waitpid` "
"дочернего процесса."

#: ../../library/pty.rst:89
msgid "Example"
msgstr "Пример"

#: ../../library/pty.rst:93
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"Следующая программа действует как команда Unix :manpage:`script(1)`, "
"используя псевдотерминал для записи всех входных и выходных данных сеанса "
"терминала в «машинописный текст». ::"

#: ../../library/pty.rst:97
msgid ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL', "
"'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
msgstr ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL', "
"'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
