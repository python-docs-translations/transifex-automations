# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ""

#: ../../library/functools.rst:14
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**Исходный код:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:23
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
"Модуль :mod:`functools` предназначен для функций высшего порядка: функций, "
"которые воздействуют на другие функции или возвращают их. В общем, любой "
"вызываемый объект можно рассматривать как функцию для целей этого модуля."

#: ../../library/functools.rst:27
msgid "The :mod:`functools` module defines the following functions:"
msgstr "Модуль :mod:`functools` определяет следующие функции:"

#: ../../library/functools.rst:31
msgid ""
"Simple lightweight unbounded function cache.  Sometimes called `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."
msgstr ""
"Простой, легкий, неограниченный кеш функций. Иногда называется `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."

#: ../../library/functools.rst:34
msgid ""
"Returns the same as ``lru_cache(maxsize=None)``, creating a thin wrapper "
"around a dictionary lookup for the function arguments.  Because it never "
"needs to evict old values, this is smaller and faster than :func:"
"`lru_cache()` with a size limit."
msgstr ""

#: ../../library/functools.rst:39 ../../library/functools.rst:264
msgid "For example::"
msgstr "Например::"

#: ../../library/functools.rst:57
msgid ""
"Transform a method of a class into a property whose value is computed once "
"and then cached as a normal attribute for the life of the instance. Similar "
"to :func:`property`, with the addition of caching. Useful for expensive "
"computed properties of instances that are otherwise effectively immutable."
msgstr ""
"Преобразуйте метод класса в свойство, значение которого вычисляется один "
"раз, а затем кэшируется как обычный атрибут на весь срок существования "
"экземпляра. Аналогично :func:`property`, но с добавлением кэширования. "
"Полезно для дорогостоящих вычисляемых свойств экземпляров, которые в "
"противном случае фактически являются неизменяемыми."

#: ../../library/functools.rst:62 ../../library/functools.rst:127
#: ../../library/functools.rst:356
msgid "Example::"
msgstr "Пример::"

#: ../../library/functools.rst:73
msgid ""
"The mechanics of :func:`cached_property` are somewhat different from :func:"
"`property`.  A regular property blocks attribute writes unless a setter is "
"defined. In contrast, a *cached_property* allows writes."
msgstr ""
"Механизм :func:`cached_property` несколько отличается от :func:`property`. "
"Атрибут обычного свойства блокирует запись, если не определен установщик. "
"Напротив, *cached_property* разрешает запись."

#: ../../library/functools.rst:77
msgid ""
"The *cached_property* decorator only runs on lookups and only when an "
"attribute of the same name doesn't exist.  When it does run, the "
"*cached_property* writes to the attribute with the same name. Subsequent "
"attribute reads and writes take precedence over the *cached_property* method "
"and it works like a normal attribute."
msgstr ""
"Декоратор *cached_property* работает только при поиске и только тогда, когда "
"атрибут с таким же именем не существует. Когда он запускается, "
"*cached_property* записывает в атрибут с тем же именем. Последующие операции "
"чтения и записи атрибута имеют приоритет над методом *cached_property* и "
"работают как обычный атрибут."

#: ../../library/functools.rst:83
msgid ""
"The cached value can be cleared by deleting the attribute.  This allows the "
"*cached_property* method to run again."
msgstr ""
"Кэшированное значение можно очистить, удалив атрибут. Это позволит методу "
"*cached_property* запуститься снова."

#: ../../library/functools.rst:86
msgid ""
"Note, this decorator interferes with the operation of :pep:`412` key-sharing "
"dictionaries.  This means that instance dictionaries can take more space "
"than usual."
msgstr ""
"Обратите внимание, что этот декоратор мешает работе словарей совместного "
"использования ключей :pep:`412`. Это означает, что словари экземпляров могут "
"занимать больше места, чем обычно."

#: ../../library/functools.rst:90
msgid ""
"Also, this decorator requires that the ``__dict__`` attribute on each "
"instance be a mutable mapping. This means it will not work with some types, "
"such as metaclasses (since the ``__dict__`` attributes on type instances are "
"read-only proxies for the class namespace), and those that specify "
"``__slots__`` without including ``__dict__`` as one of the defined slots (as "
"such classes don't provide a ``__dict__`` attribute at all)."
msgstr ""
"Кроме того, этот декоратор требует, чтобы атрибут ``__dict__`` в каждом "
"экземпляре был изменяемым сопоставлением. Это означает, что он не будет "
"работать с некоторыми типами, такими как метаклассы (поскольку атрибуты "
"``__dict__`` в экземплярах типа являются прокси-серверами только для чтения "
"для пространства имен класса) и теми, которые указывают ``__slots__`` без "
"включения ``__dict__ `` как один из определенных слотов (поскольку такие "
"классы вообще не предоставляют атрибут ``__dict__``)."

#: ../../library/functools.rst:97
msgid ""
"If a mutable mapping is not available or if space-efficient key sharing is "
"desired, an effect similar to :func:`cached_property` can be achieved by a "
"stacking :func:`property` on top of :func:`cache`::"
msgstr ""

#: ../../library/functools.rst:115
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, :"
"func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:"
"`itertools.groupby`).  This function is primarily used as a transition tool "
"for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"Преобразуйте функцию сравнения старого стиля в :term:`ключевую функцию`. "
"Используется с инструментами, которые принимают ключевые функции (такие как :"
"func:`sorted`, :func:`min`, :func:`max`, :func:`heapq.nlargest`, :func:"
"`heapq.nsmallest`, : func:`itertools.groupby`). Эта функция в основном "
"используется как инструмент перехода для программ, конвертируемых из Python "
"2, которые поддерживают использование функций сравнения."

#: ../../library/functools.rst:122
msgid ""
"A comparison function is any callable that accepts two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts "
"one argument and returns another value to be used as the sort key."
msgstr ""
"Функция сравнения — это любой вызываемый объект, который принимает два "
"аргумента, сравнивает их и возвращает отрицательное число для меньшего, ноль "
"для равенства или положительное число для большего. Ключевая функция — это "
"вызываемый объект, который принимает один аргумент и возвращает другое "
"значение, которое будет использоваться в качестве ключа сортировки."

#: ../../library/functools.rst:131
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"Для примеров сортировки и краткого руководства по сортировке см. :ref:"
"`sortinghowto`."

#: ../../library/functools.rst:139
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"Декоратор для обертывания функции вызываемым объектом с запоминанием, "
"сохраняющим до *maxsize* последних вызовов. Это может сэкономить время, "
"когда дорогостоящая функция или функция, связанная с вводом-выводом, "
"периодически вызывается с одними и теми же аргументами."

#: ../../library/functools.rst:143
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be :term:`hashable`."
msgstr ""
"Поскольку для кэширования результатов используется словарь, позиционные и "
"ключевые аргументы функции должны быть :term:`hashable`."

#: ../../library/functools.rst:146
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, `f(a=1, b=2)` and `f(b=2, a=1)` differ "
"in their keyword argument order and may have two separate cache entries."
msgstr ""

#: ../../library/functools.rst:151
msgid ""
"If *user_function* is specified, it must be a callable. This allows the "
"*lru_cache* decorator to be applied directly to a user function, leaving the "
"*maxsize* at its default value of 128::"
msgstr ""
"Если указана *user_function*, она должна быть вызываемой. Это позволяет "
"применять декоратор *lru_cache* непосредственно к пользовательской функции, "
"оставляя для *maxsize* значение по умолчанию 128::"

#: ../../library/functools.rst:159
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound."
msgstr ""
"Если для *maxsize* установлено значение «Нет», функция LRU отключена, и кэш "
"может расти без ограничений."

#: ../../library/functools.rst:162
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  If *typed* is false, the implementation will usually "
"regard them as equivalent calls and only cache a single result. (Some types "
"such as *str* and *int* may be cached separately even when *typed* is false.)"
msgstr ""
"Если для параметра *typed* установлено значение true, аргументы функции "
"разных типов будут кэшироваться отдельно. Если *typed* имеет значение false, "
"реализация обычно будет рассматривать их как эквивалентные вызовы и "
"кэшировать только один результат. (Некоторые типы, такие как *str* и *int*, "
"могут кэшироваться отдельно, даже если *typed* имеет значение false.)"

#: ../../library/functools.rst:168
msgid ""
"Note, type specificity applies only to the function's immediate arguments "
"rather than their contents.  The scalar arguments, ``Decimal(42)`` and "
"``Fraction(42)`` are be treated as distinct calls with distinct results. In "
"contrast, the tuple arguments ``('answer', Decimal(42))`` and ``('answer', "
"Fraction(42))`` are treated as equivalent."
msgstr ""
"Обратите внимание: специфичность типа применяется только к непосредственным "
"аргументам функции, а не к их содержимому. Скалярные аргументы Decimal(42) и "
"Fraction(42) рассматриваются как отдельные вызовы с разными результатами. "
"Напротив, аргументы кортежа ``('ответ', Decimal(42))`` и ``('ответ', "
"Fraction(42))`` рассматриваются как эквивалентные."

#: ../../library/functools.rst:174
msgid ""
"The wrapped function is instrumented with a :func:`cache_parameters` "
"function that returns a new :class:`dict` showing the values for *maxsize* "
"and *typed*.  This is for information purposes only.  Mutating the values "
"has no effect."
msgstr ""

#: ../../library/functools.rst:179
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*."
msgstr ""
"Чтобы измерить эффективность кэша и настроить параметр *maxsize*, обернутая "
"функция оснащена функцией :func:`cache_info`, которая возвращает :term:"
"`именованный кортеж`, показывающий *попадания*, *промахи*, * maxsize* и "
"*currsize*."

#: ../../library/functools.rst:184
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr ""
"Декоратор также предоставляет функцию :func:`cache_clear` для очистки или "
"аннулирования кеша."

#: ../../library/functools.rst:187
msgid ""
"The original underlying function is accessible through the :attr:"
"`__wrapped__` attribute.  This is useful for introspection, for bypassing "
"the cache, or for rewrapping the function with a different cache."
msgstr ""
"Исходная базовая функция доступна через атрибут :attr:`__wrapped__`. Это "
"полезно для самоанализа, обхода кеша или переобертывания функции с "
"использованием другого кеша."

#: ../../library/functools.rst:191
msgid ""
"The cache keeps references to the arguments and return values until they age "
"out of the cache or until the cache is cleared."
msgstr ""
"В кеше хранятся ссылки на аргументы и возвращаемые значения до тех пор, пока "
"они не устареют или пока кеш не будет очищен."

#: ../../library/functools.rst:194
msgid ""
"An `LRU (least recently used) cache <https://en.wikipedia.org/wiki/"
"Cache_replacement_policies#Least_recently_used_(LRU)>`_ works best when the "
"most recent calls are the best predictors of upcoming calls (for example, "
"the most popular articles on a news server tend to change each day).  The "
"cache's size limit assures that the cache does not grow without bound on "
"long-running processes such as web servers."
msgstr ""

#: ../../library/functools.rst:201
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call, or impure functions such as time() or random()."
msgstr ""

#: ../../library/functools.rst:206
msgid "Example of an LRU cache for static web content::"
msgstr "Пример кэша LRU для статического веб-контента:"

#: ../../library/functools.rst:225
msgid ""
"Example of efficiently computing `Fibonacci numbers <https://en.wikipedia."
"org/wiki/Fibonacci_number>`_ using a cache to implement a `dynamic "
"programming <https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"Пример эффективного вычисления `числа Фибоначчи <https://en.wikipedia.org/"
"wiki/Fibonacci_number>`_ с использованием кэша для реализации `динамического "
"программирования <https://en.wikipedia.org/wiki/Dynamic_programming>`_ "
"техника::"

#: ../../library/functools.rst:245
msgid "Added the *typed* option."
msgstr "Добавлена ​​опция *напечатано*."

#: ../../library/functools.rst:248
msgid "Added the *user_function* option."
msgstr "Добавлен параметр *user_function*."

#: ../../library/functools.rst:251
msgid "Added the function :func:`cache_parameters`"
msgstr ""

#: ../../library/functools.rst:256
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""
"Учитывая класс, определяющий один или несколько методов упорядочивания "
"расширенного сравнения, этот декоратор класса предоставляет все остальное. "
"Это упрощает работу по определению всех возможных операций расширенного "
"сравнения:"

#: ../../library/functools.rst:260
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, "
"or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""
"Класс должен определить один из :meth:`__lt__`, :meth:`__le__`, :meth:"
"`__gt__` или :meth:`__ge__`. Кроме того, класс должен предоставить метод :"
"meth:`__eq__`."

#: ../../library/functools.rst:284
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack "
"traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six "
"rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""
"Хотя этот декоратор позволяет легко создавать полностью упорядоченные типы с "
"хорошим поведением, за это *действительно* приходится платить более "
"медленным выполнением и более сложными трассировками стека для производных "
"методов сравнения. Если тесты производительности показывают, что это узкое "
"место для данного приложения, вместо этого реализация всех шести расширенных "
"методов сравнения, вероятно, обеспечит легкий прирост скорости."

#: ../../library/functools.rst:293
msgid ""
"This decorator makes no attempt to override methods that have been declared "
"in the class *or its superclasses*. Meaning that if a superclass defines a "
"comparison operator, *total_ordering* will not implement it again, even if "
"the original method is abstract."
msgstr ""
"Этот декоратор не пытается переопределить методы, объявленные в классе *или "
"его суперклассах*. Это означает, что если суперкласс определяет оператор "
"сравнения, *total_ordering* не будет реализовывать его снова, даже если "
"исходный метод является абстрактным."

#: ../../library/functools.rst:300
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr ""

#: ../../library/functools.rst:306
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"Возвращает новый :ref:`partial object<partial-objects>`, который при вызове "
"будет вести себя как *func*, вызванный с позиционными аргументами *args* и "
"ключевыми словами *keywords*. Если при вызове передаются дополнительные "
"аргументы, они добавляются к *args*. Если указаны дополнительные аргументы "
"ключевого слова, они расширяют и переопределяют *keywords*. Примерно "
"эквивалентно::"

#: ../../library/functools.rst:322
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""
":func:`partial` используется для применения частичной функции, которая "
"\"замораживает\" некоторую часть аргументов и/или ключевых слов функции, в "
"результате чего создается новый объект с упрощенной сигнатурой. Например, :"
"func:`partial` можно использовать для создания вызываемого объекта, который "
"ведет себя как функция :func:`int`, где аргумент *base* по умолчанию равен "
"двум:"

#: ../../library/functools.rst:337
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like :class:"
"`partial` except that it is designed to be used as a method definition "
"rather than being directly callable."
msgstr ""
"Возвращает новый дескриптор :class:`partialmethod`, который ведет себя как :"
"class:`partial`, за исключением того, что он предназначен для использования "
"в качестве определения метода, а не для прямого вызова."

#: ../../library/functools.rst:341
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr ""
"*func* должен быть :term:`дескриптором` или вызываемым объектом (объекты, "
"которые оба, как и обычные функции, обрабатываются как дескрипторы)."

#: ../../library/functools.rst:344
msgid ""
"When *func* is a descriptor (such as a normal Python function, :func:"
"`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another "
"instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""
"Когда *func* является дескриптором (например, обычной функцией Python, :func:"
"`classmethod`, :func:`staticmethod`, :func:`abstractmethod` или другим "
"экземпляром :class:`partialmethod`), вызывается ` `__get__`` делегируются "
"базовому дескриптору, и в качестве результата возвращается соответствующий :"
"ref:`partial object<partial-objects>`."

#: ../../library/functools.rst:350
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as "
"a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the :class:"
"`partialmethod` constructor."
msgstr ""
"Если *func* является вызываемым объектом, не являющимся дескриптором, "
"соответствующий связанный метод создается динамически. При использовании в "
"качестве метода это ведет себя как обычная функция Python: аргумент *self* "
"будет вставлен в качестве первого позиционного аргумента, даже до того, как "
"*args* и *keywords* будут переданы в конструктор :class:`partialmethod`."

#: ../../library/functools.rst:381
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item, "
"the first item is returned."
msgstr ""
"Примените *функцию* двух аргументов кумулятивно к элементам *iterable* слева "
"направо, чтобы свести итерируемый объект к одному значению. Например, "
"``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` вычисляет ``((((1+2)+3)+4)+5) "
"``. Левый аргумент *x* — это накопленное значение, а правый аргумент *y* — "
"это значение обновления из *iterable*. Если присутствует необязательный "
"*инициализатор*, он помещается перед элементами итерируемого объекта в "
"вычислении и служит значением по умолчанию, когда итерируемый объект пуст. "
"Если *initializer* не указан и *iterable* содержит только один элемент, "
"возвращается первый элемент."

#: ../../library/functools.rst:390
msgid "Roughly equivalent to::"
msgstr "Примерно эквивалентно::"

#: ../../library/functools.rst:402
msgid ""
"See :func:`itertools.accumulate` for an iterator that yields all "
"intermediate values."
msgstr ""
"См. :func:`itertools.accumulate` для получения информации об итераторе, "
"который возвращает все промежуточные значения."

#: ../../library/functools.rst:407
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"Преобразуйте функцию в :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."

#: ../../library/functools.rst:410
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. When defining a function using ``@singledispatch``, note that the "
"dispatch happens on the type of the first argument::"
msgstr ""
"Чтобы определить общую функцию, украсьте ее декоратором @singledispatch. При "
"определении функции с использованием @singledispatch обратите внимание, что "
"отправка происходит по типу первого аргумента:"

#: ../../library/functools.rst:421
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function, which can be used as a decorator.  For "
"functions annotated with types, the decorator will infer the type of the "
"first argument automatically::"
msgstr ""
"Чтобы добавить к функции перегруженные реализации, используйте атрибут :func:"
"`register` универсальной функции, который можно использовать в качестве "
"декоратора. Для функций, аннотированных типами, декоратор автоматически "
"определяет тип первого аргумента:"

#: ../../library/functools.rst:439
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr ""
"Для кода, который не использует аннотации типов, соответствующий аргумент "
"типа может быть явно передан самому декоратору:"

#: ../../library/functools.rst:450
msgid ""
"To enable registering :term:`lambdas<lambda>` and pre-existing functions, "
"the :func:`register` attribute can also be used in a functional form::"
msgstr ""
"Чтобы включить регистрацию :term:`lambdas<lambda>` и ранее существовавших "
"функций, атрибут :func:`register` также можно использовать в функциональной "
"форме::"

#: ../../library/functools.rst:458
msgid ""
"The :func:`register` attribute returns the undecorated function. This "
"enables decorator stacking, :mod:`pickling<pickle>`, and the creation of "
"unit tests for each variant independently::"
msgstr ""
"Атрибут :func:`register` возвращает недекорированную функцию. Это позволяет "
"использовать стек декораторов, :mod:`pickling<pickle>` и создавать модульные "
"тесты для каждого варианта независимо:"

#: ../../library/functools.rst:472
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr ""
"При вызове универсальная функция отправляет информацию о типе первого "
"аргумента:"

#: ../../library/functools.rst:492
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original "
"function decorated with ``@singledispatch`` is registered for the base :"
"class:`object` type, which means it is used if no better implementation is "
"found."
msgstr ""
"Если для определенного типа нет зарегистрированной реализации, порядок "
"разрешения его методов используется для поиска более общей реализации. "
"Исходная функция, украшенная @singledispatch, зарегистрирована для базового "
"типа :class:`object`, что означает, что она используется, если не найдена "
"лучшая реализация."

#: ../../library/functools.rst:498
msgid ""
"If an implementation is registered to an :term:`abstract base class`, "
"virtual subclasses of the base class will be dispatched to that "
"implementation::"
msgstr ""
"Если реализация зарегистрирована в :term:`абстрактном базовом классе`, "
"виртуальные подклассы базового класса будут отправлены в эту реализацию:"

#: ../../library/functools.rst:513
msgid ""
"To check which implementation the generic function will choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr ""
"Чтобы проверить, какую реализацию выберет универсальная функция для данного "
"типа, используйте атрибут dispatch():"

#: ../../library/functools.rst:521
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr ""
"Чтобы получить доступ ко всем зарегистрированным реализациям, используйте "
"атрибут ``registry``, доступный только для чтения::"

#: ../../library/functools.rst:535
msgid "The :func:`register` attribute now supports using type annotations."
msgstr ""
"Атрибут :func:`register` теперь поддерживает использование аннотаций типов."

#: ../../library/functools.rst:541
msgid ""
"Transform a method into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"Преобразуйте метод в :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."

#: ../../library/functools.rst:544
msgid ""
"To define a generic method, decorate it with the ``@singledispatchmethod`` "
"decorator. When defining a function using ``@singledispatchmethod``, note "
"that the dispatch happens on the type of the first non-*self* or non-*cls* "
"argument::"
msgstr ""
"Чтобы определить общий метод, украсьте его декоратором "
"@singledispatchmethod. При определении функции с использованием "
"``@singledispatchmethod`` обратите внимание, что отправка происходит по типу "
"первого аргумента, отличного от *self* или отличного от *cls*:"

#: ../../library/functools.rst:562
msgid ""
"``@singledispatchmethod`` supports nesting with other decorators such as :"
"func:`@classmethod<classmethod>`. Note that to allow for ``dispatcher."
"register``, ``singledispatchmethod`` must be the *outer most* decorator. "
"Here is the ``Negator`` class with the ``neg`` methods bound to the class, "
"rather than an instance of the class::"
msgstr ""
"``@singledispatchmethod`` поддерживает вложение с другими декораторами, "
"такими как :func:`@classmethod<classmethod>`. Обратите внимание: чтобы "
"разрешить использование ``dispatcher.register``, ``singledispatchmethod`` "
"должен быть *самым внешним* декоратором. Вот класс Negator с методами neg, "
"привязанными к классу, а не к экземпляру класса:"

#: ../../library/functools.rst:584
msgid ""
"The same pattern can be used for other similar decorators: :func:"
"`@staticmethod<staticmethod>`, :func:`@abstractmethod<abc.abstractmethod>`, "
"and others."
msgstr ""
"Тот же шаблон можно использовать и для других подобных декораторов: :func:"
"`@staticmethod<staticmethod>`, :func:`@abstractmethod<abc.abstractmethod>` и "
"других."

#: ../../library/functools.rst:593
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""

#: ../../library/functools.rst:603
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""
"Чтобы разрешить доступ к исходной функции для самоанализа и других целей "
"(например, в обход декоратора кэширования, такого как :func:`lru_cache`), "
"эта функция автоматически добавляет к оболочке атрибут ``__wrapped__``, "
"который ссылается на обертываемую функцию."

#: ../../library/functools.rst:608
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"Основное назначение этой функции — функции :term:`decorator`, которые "
"оборачивают декорированную функцию и возвращают оболочку. Если функция-"
"оболочка не обновляется, метаданные возвращаемой функции будут отражать "
"определение оболочки, а не исходное определение функции, что обычно не очень "
"полезно."

#: ../../library/functools.rst:614
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object "
"being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""
":func:`update_wrapper` может использоваться с вызываемыми объектами, "
"отличными от функций. Любые атрибуты, указанные в *assigned* или *updated*, "
"которые отсутствуют в обертываемом объекте, игнорируются (т. е. эта функция "
"не будет пытаться установить их в функции-оболочке). :exc:`AttributeError` "
"по-прежнему вызывается, если в самой функции-оболочке отсутствуют какие-либо "
"атрибуты, указанные в *updated*."

#: ../../library/functools.rst:620
msgid "Automatic addition of the ``__wrapped__`` attribute."
msgstr ""

#: ../../library/functools.rst:623
msgid "Copying of the ``__annotations__`` attribute by default."
msgstr ""

#: ../../library/functools.rst:626
msgid "Missing attributes no longer trigger an :exc:`AttributeError`."
msgstr ""

#: ../../library/functools.rst:629
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see :issue:"
"`17482`)"
msgstr ""
"Атрибут ``__wrapped__`` теперь всегда ссылается на обернутую функцию, даже "
"если эта функция определила атрибут ``__wrapped__``. (см. :issue:`17482`)"

#: ../../library/functools.rst:637
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"Это удобная функция для вызова :func:`update_wrapper` в качестве декоратора "
"функции при определении функции-обертки. Это эквивалентно "
"``partial(update_wrapper, обернутый=обернутый, назначенный=назначенный, "
"обновленный=обновленный)``. Например::"

#: ../../library/functools.rst:663
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""
"Без использования этой фабрики декораторов имя функции-примера было бы "
"``'обертка'``, а строка документации исходного :func:`example` была бы "
"потеряна."

#: ../../library/functools.rst:671
msgid ":class:`partial` Objects"
msgstr "Объекты :class:`partial`"

#: ../../library/functools.rst:673
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""
"Объекты :class:`partial` — это вызываемые объекты, созданные :func:"
"`partial`. У них есть три атрибута, доступных только для чтения:"

#: ../../library/functools.rst:679
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""
"Вызываемый объект или функция. Вызовы объекта :class:`partial` будут "
"перенаправлены в :attr:`func` с новыми аргументами и ключевыми словами."

#: ../../library/functools.rst:685
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""
"Крайние левые позиционные аргументы, которые будут добавлены к позиционным "
"аргументам, предоставленным при вызове объекта :class:`partial`."

#: ../../library/functools.rst:691
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""
"Аргументы ключевого слова, которые будут предоставлены при вызове объекта :"
"class:`partial`."

#: ../../library/functools.rst:694
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes are not created automatically.  Also, :class:"
"`partial` objects defined in classes behave like static methods and do not "
"transform into bound methods during instance attribute look-up."
msgstr ""
