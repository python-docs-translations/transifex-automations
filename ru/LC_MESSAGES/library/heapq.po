# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/heapq.rst:2
msgid ":mod:`!heapq` --- Heap queue algorithm"
msgstr ":mod:`!heapq` --- Алгоритм очереди в куче"

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**Исходный код:** :source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr ""
"Этот модуль обеспечивает реализацию алгоритма очереди кучи, также известного "
"как алгоритм очереди с приоритетами."

#: ../../library/heapq.rst:19
msgid ""
"Heaps are binary trees for which every parent node has a value less than or "
"equal to any of its children.  We refer to this condition as the heap "
"invariant."
msgstr ""
"Кучи — это двоичные деревья, в которых каждый родительский узел имеет "
"значение, меньшее или равное любому из его дочерних узлов. Мы называем это "
"условие инвариантом кучи."

#: ../../library/heapq.rst:22
msgid ""
"This implementation uses arrays for which ``heap[k] <= heap[2*k+1]`` and "
"``heap[k] <= heap[2*k+2]`` for all *k*, counting elements from zero.  For "
"the sake of comparison, non-existing elements are considered to be "
"infinite.  The interesting property of a heap is that its smallest element "
"is always the root, ``heap[0]``."
msgstr ""
"В этой реализации используются массивы, для которых ``heap[k] <= "
"heap[2*k+1]`` и ``heap[k] <= heap[2*k+2]`` для всех *k*, считая элементы с "
"нуля. Для сравнения несуществующие элементы считаются бесконечными. "
"Интересное свойство кучи заключается в том, что ее наименьший элемент всегда "
"является корнем, ``куча[0]``."

#: ../../library/heapq.rst:28
msgid ""
"The API below differs from textbook heap algorithms in two aspects: (a) We "
"use zero-based indexing.  This makes the relationship between the index for "
"a node and the indexes for its children slightly less obvious, but is more "
"suitable since Python uses zero-based indexing. (b) Our pop method returns "
"the smallest item, not the largest (called a \"min heap\" in textbooks; a "
"\"max heap\" is more common in texts because of its suitability for in-place "
"sorting)."
msgstr ""
"API ниже отличается от алгоритмов кучи учебника в двух аспектах: (a) Мы "
"используем индексацию с нуля. Это делает связь между индексом для узла и "
"индексами для его потомков немного менее очевидной, но более подходящей, "
"поскольку Python использует индексацию с нуля. (b) Наш метод pop возвращает "
"наименьший элемент, а не наибольший (называемый «min heap» в учебниках; «max "
"heap» чаще встречается в текстах из-за его пригодности для сортировки на "
"месте)."

#: ../../library/heapq.rst:35
msgid ""
"These two make it possible to view the heap as a regular Python list without "
"surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` maintains "
"the heap invariant!"
msgstr ""
"Эти два параметра позволяют без сюрпризов рассматривать кучу как обычный "
"список Python: «heap[0]» — это самый маленький элемент, а «heap.sort()» "
"сохраняет инвариант кучи!"

#: ../../library/heapq.rst:39
msgid ""
"To create a heap, use a list initialized to ``[]``, or you can transform a "
"populated list into a heap via function :func:`heapify`."
msgstr ""
"Чтобы создать кучу, используйте список, инициализированный как ``[]``, или "
"вы можете преобразовать заполненный список в кучу с помощью функции :func:"
"`heapify`."

#: ../../library/heapq.rst:42
msgid "The following functions are provided:"
msgstr "Предусмотрены следующие функции:"

#: ../../library/heapq.rst:47
msgid "Push the value *item* onto the *heap*, maintaining the heap invariant."
msgstr "Помещаем значение *item* в *кучу*, сохраняя кучность инвариантной."

#: ../../library/heapq.rst:52
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""
"Извлеките и верните самый маленький элемент из *кучи*, сохраняя инвариант "
"кучи. Если куча пуста, возникает :exc:`IndexError`. Чтобы получить доступ к "
"самому маленькому элементу, не извлекая его, используйте heap[0]``."

#: ../../library/heapq.rst:59
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"Нажмите *item* в куче, затем извлеките и верните самый маленький элемент из "
"*кучи*. Комбинированное действие выполняется более эффективно, чем :func:"
"`heappush`, за которым следует отдельный вызов :func:`heappop`."

#: ../../library/heapq.rst:66
msgid "Transform list *x* into a heap, in-place, in linear time."
msgstr "Преобразовать список *x* в кучу на месте за линейное время."

#: ../../library/heapq.rst:71
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""
"Извлеките и верните самый маленький элемент из *кучи*, а также нажмите новый "
"*элемент*. Размер кучи не меняется. Если куча пуста, возникает :exc:"
"`IndexError`."

#: ../../library/heapq.rst:74
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed "
"by :func:`heappush` and can be more appropriate when using a fixed-size "
"heap. The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"Эта одношаговая операция более эффективна, чем :func:`heappop`, за которой "
"следует :func:`heappush`, и может быть более подходящей при использовании "
"кучи фиксированного размера. Комбинация pop/push всегда возвращает элемент "
"из кучи и заменяет его на *item*."

#: ../../library/heapq.rst:79
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"Возвращенное значение может быть больше, чем добавленный *элемент*. Если это "
"нежелательно, рассмотрите возможность использования вместо этого :func:"
"`heappushpop`. Его комбинация push/pop возвращает меньшее из двух значений, "
"оставляя большее значение в куче."

#: ../../library/heapq.rst:85
msgid "The module also offers three general purpose functions based on heaps."
msgstr "Модуль также предлагает три функции общего назначения на основе куч."

#: ../../library/heapq.rst:90
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge "
"timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"Объединить несколько отсортированных входов в один отсортированный выход "
"(например, объединить записи с метками времени из нескольких файлов "
"журнала). Возвращает :term:`iterator` по отсортированным значениям."

#: ../../library/heapq.rst:94
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the "
"input streams is already sorted (smallest to largest)."
msgstr ""
"Похож на ``sorted(itertools.chain(*iterables))``, но возвращает итерируемый "
"объект, не извлекает данные в память сразу и предполагает, что каждый из "
"входных потоков уже отсортирован (от меньшего к большему)."

#: ../../library/heapq.rst:98
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""
"Имеет два необязательных аргумента, которые должны быть указаны как "
"именованные аргументы."

#: ../../library/heapq.rst:100
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* определяет :term:`ключевую функцию` с одним аргументом, которая "
"используется для извлечения ключа сравнения из каждого входного элемента. "
"Значение по умолчанию — None (сравнивать элементы напрямую)."

#: ../../library/heapq.rst:104
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must "
"be sorted from largest to smallest."
msgstr ""
"*reverse* — логическое значение. Если установлено значение «True», то "
"входные элементы объединяются, как если бы каждое сравнение было обратным. "
"Чтобы добиться поведения, аналогичного sorted(itertools.chain(*iterables),"
"verse=True)``, все итерации должны быть отсортированы от наибольшего к "
"наименьшему."

#: ../../library/heapq.rst:109
msgid "Added the optional *key* and *reverse* parameters."
msgstr "Добавлены необязательные параметры *key* и *reverse*."

#: ../../library/heapq.rst:115
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""
"Возвращает список с *n* самыми большими элементами из набора данных, "
"определенного *iterable*. *key*, если он указан, определяет функцию одного "
"аргумента, которая используется для извлечения ключа сравнения из каждого "
"элемента в *iterable* (например, ``key=str.lower``). Эквивалентно: "
"``sorted(iterable, key=key,verse=True)[:n]``."

#: ../../library/heapq.rst:124
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key)[:"
"n]``."
msgstr ""
"Возвращает список с *n* наименьшими элементами из набора данных, "
"определенного *iterable*. *key*, если он указан, определяет функцию одного "
"аргумента, которая используется для извлечения ключа сравнения из каждого "
"элемента в *iterable* (например, ``key=str.lower``). Эквивалентно: "
"``sorted(iterable, key=key)[:n]``."

#: ../../library/heapq.rst:130
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger "
"values, it is more efficient to use the :func:`sorted` function.  Also, when "
"``n==1``, it is more efficient to use the built-in :func:`min` and :func:"
"`max` functions.  If repeated usage of these functions is required, consider "
"turning the iterable into an actual heap."
msgstr ""
"Последние две функции лучше всего работают при меньших значениях *n*. Для "
"больших значений более эффективно использовать функцию :func:`sorted`. Кроме "
"того, когда ``n==1``, более эффективно использовать встроенные функции :func:"
"`min` и :func:`max`. Если требуется повторное использование этих функций, "
"рассмотрите возможность превращения итерации в настоящую кучу."

#: ../../library/heapq.rst:138
msgid "Basic Examples"
msgstr "Основные примеры"

#: ../../library/heapq.rst:140
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by "
"pushing all values onto a heap and then popping off the smallest values one "
"at a time::"
msgstr ""
"`Кучная сортировка <https://en.wikipedia.org/wiki/Heapsort>`_ может быть "
"реализована путем помещения всех значений в кучу и последующего извлечения "
"наименьших значений по одному::"

#: ../../library/heapq.rst:144
msgid ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"

#: ../../library/heapq.rst:153
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr ""
"Это похоже на sorted(iterable), но в отличие от :func:sorted эта реализация "
"не стабильна."

#: ../../library/heapq.rst:156
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values "
"(such as task priorities) alongside the main record being tracked::"
msgstr ""
"Элементы кучи могут быть кортежами. Это полезно для назначения значений "
"сравнения (например, приоритетов задач) рядом с основной отслеживаемой "
"записью:"

#: ../../library/heapq.rst:159
msgid ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"
msgstr ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"

#: ../../library/heapq.rst:169
msgid "Priority Queue Implementation Notes"
msgstr "Замечания по реализации очереди приоритетов"

#: ../../library/heapq.rst:171
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common "
"use for a heap, and it presents several implementation challenges:"
msgstr ""
"`Очередь с приоритетами <https://en.wikipedia.org/wiki/Priority_queue>`_ "
"обычно используется для кучи и создает несколько проблем реализации:"

#: ../../library/heapq.rst:174
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr ""
"Стабильность сортировки: как добиться того, чтобы две задачи с одинаковым "
"приоритетом возвращались в том порядке, в котором они были изначально "
"добавлены?"

#: ../../library/heapq.rst:177
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr ""
"Сравнение кортежей прерывается для пар (приоритет, задача), если приоритеты "
"равны и задачи не имеют порядка сравнения по умолчанию."

#: ../../library/heapq.rst:180
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr ""
"Если приоритет задачи изменится, как переместить ее на новую позицию в куче?"

#: ../../library/heapq.rst:183
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr ""
"Или, если ожидающую задачу необходимо удалить, как ее найти и удалить из "
"очереди?"

#: ../../library/heapq.rst:186
msgid ""
"A solution to the first two challenges is to store entries as 3-element list "
"including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the "
"same, the tuple comparison will never attempt to directly compare two tasks."
msgstr ""
"Решением первых двух проблем является хранение записей в виде списка из трех "
"элементов, включая приоритет, количество записей и задачу. Счетчик записей "
"служит для разрешения конфликтов, поэтому две задачи с одинаковым "
"приоритетом возвращаются в том порядке, в котором они были добавлены. А "
"поскольку не существует двух одинаковых значений количества записей, "
"сравнение кортежей никогда не будет пытаться напрямую сравнить две задачи."

#: ../../library/heapq.rst:192
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr ""
"Другим решением проблемы несопоставимых задач является создание класса-"
"обертки, который игнорирует элемент задачи и сравнивает только поле "
"приоритета::"

#: ../../library/heapq.rst:195
msgid ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"
msgstr ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"

#: ../../library/heapq.rst:203
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done "
"with a dictionary pointing to an entry in the queue."
msgstr ""
"Остальные проблемы связаны с поиском ожидающей задачи и изменением ее "
"приоритета или полным ее удалением. Найти задачу можно с помощью словаря, "
"указывающего на запись в очереди."

#: ../../library/heapq.rst:207
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"Удаление записи или изменение ее приоритета сложнее, поскольку это нарушит "
"инварианты структуры кучи. Итак, возможное решение — пометить запись как "
"удаленную и добавить новую запись с измененным приоритетом:"

#: ../../library/heapq.rst:211
msgid ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"
msgstr ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"

#: ../../library/heapq.rst:241
msgid "Theory"
msgstr "Теория"

#: ../../library/heapq.rst:243
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for "
"all *k*, counting elements from 0.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that ``a[0]`` is always its smallest element."
msgstr ""
"Кучи — это массивы, для которых ``a[k] <= a[2*k+1]`` и ``a[k] <= a[2*k+2]`` "
"для всех *k*, считая элементы от 0. Для сравнения несуществующие элементы "
"считаются бесконечными. Интересное свойство кучи заключается в том, что "
"``a[0]`` всегда является ее наименьшим элементом."

#: ../../library/heapq.rst:248
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr ""
"Странный инвариант, приведенный выше, предназначен для эффективного "
"представления памяти для турнира. Числа ниже — *k*, а не ``a[k]``::"

#: ../../library/heapq.rst:251
msgid ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"

#: ../../library/heapq.rst:261
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""
"В дереве выше каждая ячейка *k* является вершиной ``2*k+1`` и ``2*k+2``. В "
"обычном бинарном турнире, который мы видим в спорте, каждая ячейка является "
"победителем над двумя ячейками, которые она возглавляет, и мы можем "
"проследить победителя вниз по дереву, чтобы увидеть всех противников, "
"которые у него были. Однако во многих компьютерных приложениях таких "
"турниров нам не нужно отслеживать историю победителя. Чтобы повысить "
"эффективность использования памяти, когда победитель повышается, мы пытаемся "
"заменить его чем-то другим на более низком уровне, и правило становится "
"таким, что ячейка и две ячейки, которые она возглавляет, содержат три разных "
"элемента, но верхняя ячейка «побеждает». над двумя верхними ячейками."

#: ../../library/heapq.rst:270
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an *O*\\ (*n* log *n*) sort."
msgstr ""
"Если этот инвариант кучи всегда защищен, индекс 0 явно будет абсолютным "
"победителем. Самый простой алгоритмический способ удалить его и найти "
"«следующего» победителя — переместить какого-нибудь проигравшего (скажем, "
"ячейку 30 на диаграмме выше) в позицию 0, а затем просачивать этот новый 0 "
"вниз по дереву, меняя значения, пока не будет найден инвариант "
"восстанавливается. Это явно логарифмическая зависимость от общего количества "
"элементов в дереве. Перебирая все элементы, вы получаете сортировку *O*\\ "
"(*n* log *n*)."

#: ../../library/heapq.rst:277
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not "
"\"better\" than the last 0'th element you extracted.  This is especially "
"useful in simulation contexts, where the tree holds all incoming events, and "
"the \"win\" condition means the smallest scheduled time.  When an event "
"schedules other events for execution, they are scheduled into the future, so "
"they can easily go into the heap.  So, a heap is a good structure for "
"implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""
"Приятной особенностью такого рода является то, что вы можете эффективно "
"вставлять новые элементы во время сортировки, при условии, что вставленные "
"элементы не \"лучше\", чем последний 0-й элемент, который вы извлекли. Это "
"особенно полезно в контекстах моделирования, где дерево содержит все "
"входящие события, а условие \"победы\" означает наименьшее запланированное "
"время. Когда событие планирует другие события для выполнения, они "
"планируются на будущее, поэтому их можно легко поместить в кучу. Таким "
"образом, куча является хорошей структурой для реализации планировщиков (это "
"то, что я использовал для своего MIDI-секвенсора :-)."

#: ../../library/heapq.rst:286
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""
"Различные структуры для реализации планировщиков были тщательно изучены, и "
"кучи хороши для этого, поскольку они достаточно быстры, скорость почти "
"постоянна, и худший случай не сильно отличается от среднего. Однако есть и "
"другие представления, которые в целом более эффективны, но худшие случаи "
"могут быть ужасными."

#: ../../library/heapq.rst:292
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for "
"input fuzzily ordered."
msgstr ""
"Кучи также очень полезны при сортировке больших дисков. Вы, скорее всего, "
"все знаете, что большая сортировка подразумевает создание "
"«прогонов» (которые представляют собой предварительно отсортированные "
"последовательности, размер которых обычно зависит от объема памяти "
"процессора), за которым следуют проходы слияния для этих прогонов, причем "
"слияние часто выполняется очень умно. организованный [#]_ . Очень важно, "
"чтобы первоначальная сортировка давала как можно более длинные прогоны. "
"Турниры – хороший способ добиться этого. Если, используя всю доступную "
"память для проведения турнира, вы замените и просеиваете элементы, которые "
"соответствуют текущему прогону, вы создадите прогоны, которые в два раза "
"превышают размер памяти для случайного ввода и намного лучше для ввода "
"нечетко упорядоченных."

#: ../../library/heapq.rst:302
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not "
"fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap "
"decreases.  The freed memory could be cleverly reused immediately for "
"progressively building a second heap, which grows at exactly the same rate "
"the first heap is melting.  When the first heap completely vanishes, you "
"switch heaps and start a new run.  Clever and quite effective!"
msgstr ""
"Более того, если вы выводите 0-й элемент на диск и получаете входные данные, "
"которые могут не поместиться в текущем турнире (потому что значение "
"\"выигрывает\" над последним выходным значением), оно не может поместиться в "
"кучу, поэтому размер кучи уменьшается. Освобожденную память можно было бы "
"ловко использовать повторно немедленно для постепенного построения второй "
"кучи, которая растет точно с той же скоростью, с которой тает первая куча. "
"Когда первая куча полностью исчезает, вы переключаете кучи и начинаете новый "
"запуск. Умно и довольно эффективно!"

#: ../../library/heapq.rst:310
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr ""
"Одним словом, кучи — это полезные структуры памяти, которые нужно знать. Я "
"использую их в нескольких приложениях, и я думаю, что хорошо иметь модуль "
"«кучи» поблизости. :-)"

#: ../../library/heapq.rst:314
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/heapq.rst:315
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying "
"than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
"Алгоритмы балансировки дисков, которые сейчас актуальны, скорее раздражают, "
"чем умны, и это следствие возможностей поиска дисков. На устройствах, "
"которые не могут искать, таких как большие ленточные накопители, история "
"была совсем другой, и нужно было быть очень умным, чтобы гарантировать "
"(задолго до этого), что каждое движение ленты будет максимально эффективным "
"(то есть будет наилучшим образом участвовать в «продвижении» слияния). "
"Некоторые ленты даже могли читать в обратном направлении, и это также "
"использовалось, чтобы избежать времени перемотки. Поверьте мне, "
"действительно хорошие сортировки лент были довольно захватывающими! Во все "
"времена сортировка всегда была Великим Искусством! :-)"
