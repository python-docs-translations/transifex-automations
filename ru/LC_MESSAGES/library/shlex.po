# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:19+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/shlex.rst:2
msgid ":mod:`shlex` --- Simple lexical analysis"
msgstr ""

#: ../../library/shlex.rst:12
msgid "**Source code:** :source:`Lib/shlex.py`"
msgstr "**Исходный код:** :source:`Lib/shlex.py`"

#: ../../library/shlex.rst:16
msgid ""
"The :class:`~shlex.shlex` class makes it easy to write lexical analyzers for "
"simple syntaxes resembling that of the Unix shell.  This will often be "
"useful for writing minilanguages, (for example, in run control files for "
"Python applications) or for parsing quoted strings."
msgstr ""
"Класс :class:`~shlex.shlex` позволяет легко писать лексические анализаторы "
"для простых синтаксисов, напоминающих синтаксис оболочки Unix. Это часто "
"бывает полезно для написания мини-языков (например, в файлах управления "
"запуском приложений Python) или для анализа строк в кавычках."

#: ../../library/shlex.rst:21
msgid "The :mod:`shlex` module defines the following functions:"
msgstr "Модуль :mod:`shlex` определяет следующие функции:"

#: ../../library/shlex.rst:26
msgid ""
"Split the string *s* using shell-like syntax. If *comments* is :const:"
"`False` (the default), the parsing of comments in the given string will be "
"disabled (setting the :attr:`~shlex.commenters` attribute of the :class:"
"`~shlex.shlex` instance to the empty string).  This function operates in "
"POSIX mode by default, but uses non-POSIX mode if the *posix* argument is "
"false."
msgstr ""
"Разделите строку *s*, используя синтаксис оболочки. Если *comments* имеет "
"значение :const:`False` (по умолчанию), анализ комментариев в данной строке "
"будет отключен (установка атрибута :attr:`~shlex.commenters` файла :class:"
"`~shlex.shlex `экземпляр для пустой строки). По умолчанию эта функция "
"работает в режиме POSIX, но использует режим, отличный от POSIX, если "
"аргумент *posix* имеет значение false."

#: ../../library/shlex.rst:35
msgid ""
"Since the :func:`split` function instantiates a :class:`~shlex.shlex` "
"instance, passing ``None`` for *s* will read the string to split from "
"standard input."
msgstr ""

#: ../../library/shlex.rst:39
msgid ""
"Passing ``None`` for *s* will raise an exception in future Python versions."
msgstr ""

#: ../../library/shlex.rst:45
msgid ""
"Concatenate the tokens of the list *split_command* and return a string. This "
"function is the inverse of :func:`split`."
msgstr ""
"Объедините токены списка *split_command* и верните строку. Эта функция "
"является обратной функцией :func:`split`."

#: ../../library/shlex.rst:52
msgid ""
"The returned value is shell-escaped to protect against injection "
"vulnerabilities (see :func:`quote`)."
msgstr ""
"Возвращаемое значение экранируется оболочкой для защиты от уязвимостей "
"внедрения (см. :func:`quote`)."

#: ../../library/shlex.rst:60
msgid ""
"Return a shell-escaped version of the string *s*.  The returned value is a "
"string that can safely be used as one token in a shell command line, for "
"cases where you cannot use a list."
msgstr ""
"Возвращает экранированную оболочкой версию строки *s*. Возвращаемое значение "
"представляет собой строку, которую можно безопасно использовать как один "
"токен в командной строке оболочки в тех случаях, когда вы не можете "
"использовать список."

#: ../../library/shlex.rst:68
msgid "The ``shlex`` module is **only designed for Unix shells**."
msgstr "Модуль shlex **разработан только для оболочек Unix**."

#: ../../library/shlex.rst:70
msgid ""
"The :func:`quote` function is not guaranteed to be correct on non-POSIX "
"compliant shells or shells from other operating systems such as Windows. "
"Executing commands quoted by this module on such shells can open up the "
"possibility of a command injection vulnerability."
msgstr ""
"Не гарантируется корректность функции :func:`quote` в оболочках, не "
"совместимых с POSIX, или в оболочках других операционных систем, таких как "
"Windows. Выполнение команд, указанных в этом модуле, в таких оболочках может "
"открыть возможность уязвимости внедрения команд."

#: ../../library/shlex.rst:75
msgid ""
"Consider using functions that pass command arguments with lists such as :"
"func:`subprocess.run` with ``shell=False``."
msgstr ""
"Рассмотрите возможность использования функций, которые передают аргументы "
"команды со списками, например :func:`subprocess.run` с ``shell=False``."

#: ../../library/shlex.rst:78
msgid "This idiom would be unsafe:"
msgstr "Эта идиома была бы небезопасной:"

#: ../../library/shlex.rst:85
msgid ":func:`quote` lets you plug the security hole:"
msgstr ":func:`quote` позволяет закрыть дыру в безопасности:"

#: ../../library/shlex.rst:95
msgid "The quoting is compatible with UNIX shells and with :func:`split`:"
msgstr "Цитирование совместимо с оболочками UNIX и с :func:`split`:"

#: ../../library/shlex.rst:107
msgid "The :mod:`shlex` module defines the following class:"
msgstr "Модуль :mod:`shlex` определяет следующий класс:"

#: ../../library/shlex.rst:112
msgid ""
"A :class:`~shlex.shlex` instance or subclass instance is a lexical analyzer "
"object.  The initialization argument, if present, specifies where to read "
"characters from.  It must be a file-/stream-like object with :meth:`~io."
"TextIOBase.read` and :meth:`~io.TextIOBase.readline` methods, or a string.  "
"If no argument is given, input will be taken from ``sys.stdin``. The second "
"optional argument is a filename string, which sets the initial value of the :"
"attr:`~shlex.infile` attribute.  If the *instream* argument is omitted or "
"equal to ``sys.stdin``, this second argument defaults to \"stdin\".  The "
"*posix* argument defines the operational mode: when *posix* is not true "
"(default), the :class:`~shlex.shlex` instance will operate in compatibility "
"mode.  When operating in POSIX mode, :class:`~shlex.shlex` will try to be as "
"close as possible to the POSIX shell parsing rules.  The *punctuation_chars* "
"argument provides a way to make the behaviour even closer to how real shells "
"parse.  This can take a number of values: the default value, ``False``, "
"preserves the behaviour seen under Python 3.5 and earlier.  If set to "
"``True``, then parsing of the characters ``();<>|&`` is changed: any run of "
"these characters (considered punctuation characters) is returned as a single "
"token.  If set to a non-empty string of characters, those characters will be "
"used as the punctuation characters.  Any characters in the :attr:`wordchars` "
"attribute that appear in *punctuation_chars* will be removed from :attr:"
"`wordchars`.  See :ref:`improved-shell-compatibility` for more information. "
"*punctuation_chars* can be set only upon :class:`~shlex.shlex` instance "
"creation and can't be modified later."
msgstr ""
"Экземпляр или подкласс :class:`~shlex.shlex` является объектом лексического "
"анализатора. Аргумент инициализации, если он присутствует, указывает, откуда "
"читать символы. Это должен быть объект, подобный файлу/потоку, с методами :"
"meth:`~io.TextIOBase.read` и :meth:`~io.TextIOBase.readline`, или строка. "
"Если аргумент не указан, входные данные будут взяты из ``sys.stdin``. Второй "
"необязательный аргумент — это строка имени файла, которая устанавливает "
"начальное значение атрибута :attr:`~shlex.infile`. Если аргумент *instream* "
"опущен или равен ``sys.stdin``, этот второй аргумент по умолчанию равен "
"«stdin». Аргумент *posix* определяет рабочий режим: если значение *posix* "
"неверно (по умолчанию), экземпляр :class:`~shlex.shlex` будет работать в "
"режиме совместимости. При работе в режиме POSIX :class:`~shlex.shlex` будет "
"стараться быть как можно ближе к правилам синтаксического анализа оболочки "
"POSIX. Аргумент *punctuation_chars* позволяет еще больше приблизить "
"поведение к тому, как анализируются реальные оболочки. Оно может принимать "
"несколько значений: значение по умолчанию «False» сохраняет поведение, "
"наблюдаемое в Python 3.5 и более ранних версиях. Если установлено значение "
"``True``, то синтаксический анализ символов ``();<>|&`` изменяется: любая "
"серия этих символов (считающихся знаками пунктуации) возвращается как один "
"токен. Если задана непустая строка символов, эти символы будут "
"использоваться в качестве знаков пунктуации. Любые символы в атрибуте :attr:"
"`wordchars`, которые появляются в *punctuation_chars*, будут удалены из :"
"attr:`wordchars`. Дополнительную информацию смотрите в разделе :ref:"
"`improved-shell-compatibility`. *punctuation_chars* может быть установлен "
"только при создании экземпляра :class:`~shlex.shlex` и не может быть изменен "
"позже."

#: ../../library/shlex.rst:137
msgid "The *punctuation_chars* parameter was added."
msgstr "Добавлен параметр *punctuation_chars*."

#: ../../library/shlex.rst:142
msgid "Module :mod:`configparser`"
msgstr "Модуль :mod:`configparser`"

#: ../../library/shlex.rst:143
msgid ""
"Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr "Анализатор файлов конфигурации, похожих на файлы Windows :file:`.ini`."

#: ../../library/shlex.rst:149
msgid "shlex Objects"
msgstr "Объекты shlex"

#: ../../library/shlex.rst:151
msgid "A :class:`~shlex.shlex` instance has the following methods:"
msgstr "Экземпляр :class:`~shlex.shlex` имеет следующие методы:"

#: ../../library/shlex.rst:156
msgid ""
"Return a token.  If tokens have been stacked using :meth:`push_token`, pop a "
"token off the stack.  Otherwise, read one from the input stream.  If reading "
"encounters an immediate end-of-file, :attr:`eof` is returned (the empty "
"string (``''``) in non-POSIX mode, and ``None`` in POSIX mode)."
msgstr ""
"Вернуть жетон. Если токены были сложены с помощью :meth:`push_token`, "
"извлеките токен из стека. В противном случае прочитайте его из входного "
"потока. Если при чтении обнаруживается немедленный конец файла, "
"возвращается :attr:`eof` (пустая строка (``''``) в режиме, отличном от "
"POSIX, и ``None`` в режиме POSIX)."

#: ../../library/shlex.rst:164
msgid "Push the argument onto the token stack."
msgstr "Поместите аргумент в стек токенов."

#: ../../library/shlex.rst:169
msgid ""
"Read a raw token.  Ignore the pushback stack, and do not interpret source "
"requests.  (This is not ordinarily a useful entry point, and is documented "
"here only for the sake of completeness.)"
msgstr ""
"Прочитайте необработанный токен. Игнорируйте стек возвратов и не "
"интерпретируйте запросы источника. (Обычно это не очень полезная точка "
"входа, и она описана здесь только для полноты картины.)"

#: ../../library/shlex.rst:176
msgid ""
"When :class:`~shlex.shlex` detects a source request (see :attr:`source` "
"below) this method is given the following token as argument, and expected to "
"return a tuple consisting of a filename and an open file-like object."
msgstr ""
"Когда :class:`~shlex.shlex` обнаруживает запрос источника (см. :attr:"
"`source` ниже), этому методу в качестве аргумента передается следующий "
"токен, и ожидается, что он вернет кортеж, состоящий из имени файла и "
"открытого файла, подобного объект."

#: ../../library/shlex.rst:180
msgid ""
"Normally, this method first strips any quotes off the argument.  If the "
"result is an absolute pathname, or there was no previous source request in "
"effect, or the previous source was a stream (such as ``sys.stdin``), the "
"result is left alone.  Otherwise, if the result is a relative pathname, the "
"directory part of the name of the file immediately before it on the source "
"inclusion stack is prepended (this behavior is like the way the C "
"preprocessor handles ``#include \"file.h\"``)."
msgstr ""
"Обычно этот метод сначала удаляет все кавычки из аргумента. Если результатом "
"является абсолютный путь, или предыдущий запрос источника не действовал, или "
"предыдущий источник был потоком (например, ``sys.stdin``), результат "
"остается в покое. В противном случае, если результатом является "
"относительный путь, к началу добавляется часть каталога имени файла "
"непосредственно перед ним в стеке включения источника (это поведение "
"аналогично тому, как препроцессор C обрабатывает ``#include \"file.h\"` `)."

#: ../../library/shlex.rst:188
msgid ""
"The result of the manipulations is treated as a filename, and returned as "
"the first component of the tuple, with :func:`open` called on it to yield "
"the second component. (Note: this is the reverse of the order of arguments "
"in instance initialization!)"
msgstr ""
"Результат манипуляций обрабатывается как имя файла и возвращается как первый "
"компонент кортежа с вызовом :func:`open` для получения второго компонента. "
"(Примечание: это обратный порядок аргументов при инициализации экземпляра!)"

#: ../../library/shlex.rst:193
msgid ""
"This hook is exposed so that you can use it to implement directory search "
"paths, addition of file extensions, and other namespace hacks. There is no "
"corresponding 'close' hook, but a shlex instance will call the :meth:`~io."
"IOBase.close` method of the sourced input stream when it returns EOF."
msgstr ""
"Этот хук доступен для того, чтобы вы могли использовать его для реализации "
"путей поиска в каталогах, добавления расширений файлов и других хаков "
"пространства имен. Соответствующего хука close нет, но экземпляр shlex "
"вызовет метод :meth:`~io.IOBase.close` исходного входного потока, когда он "
"возвращает EOF."

#: ../../library/shlex.rst:199
msgid ""
"For more explicit control of source stacking, use the :meth:`push_source` "
"and :meth:`pop_source` methods."
msgstr ""
"Для более явного управления стеком исходного кода используйте методы :meth:"
"`push_source` и :meth:`pop_source`."

#: ../../library/shlex.rst:205
msgid ""
"Push an input source stream onto the input stack.  If the filename argument "
"is specified it will later be available for use in error messages.  This is "
"the same method used internally by the :meth:`sourcehook` method."
msgstr ""
"Поместите входной исходный поток во входной стек. Если указан аргумент имени "
"файла, позже он будет доступен для использования в сообщениях об ошибках. "
"Это тот же метод, который используется внутри метода :meth:`sourcehook`."

#: ../../library/shlex.rst:212
msgid ""
"Pop the last-pushed input source from the input stack. This is the same "
"method used internally when the lexer reaches EOF on a stacked input stream."
msgstr ""
"Извлеките последний загруженный источник входного сигнала из стека входных "
"данных. Это тот же метод, который используется внутри, когда лексер "
"достигает EOF в составном входном потоке."

#: ../../library/shlex.rst:218
msgid ""
"This method generates an error message leader in the format of a Unix C "
"compiler error label; the format is ``'\"%s\", line %d: '``, where the "
"``%s`` is replaced with the name of the current source file and the ``%d`` "
"with the current input line number (the optional arguments can be used to "
"override these)."
msgstr ""
"Этот метод генерирует заголовок сообщения об ошибке в формате метки ошибки "
"компилятора Unix C; формат ``'\" %s \", линия %д : '``, где `` %s `` "
"заменяется именем текущего исходного файла и `` %д `` с текущим номером "
"входной строки (необязательные аргументы можно использовать для их "
"переопределения)."

#: ../../library/shlex.rst:223
msgid ""
"This convenience is provided to encourage :mod:`shlex` users to generate "
"error messages in the standard, parseable format understood by Emacs and "
"other Unix tools."
msgstr ""
"Это удобство сделано для того, чтобы побудить пользователей :mod:`shlex` "
"генерировать сообщения об ошибках в стандартном, поддающемся синтаксическому "
"анализу формате, понятном Emacs и другим инструментам Unix."

#: ../../library/shlex.rst:227
msgid ""
"Instances of :class:`~shlex.shlex` subclasses have some public instance "
"variables which either control lexical analysis or can be used for debugging:"
msgstr ""
"Экземпляры подклассов :class:`~shlex.shlex` имеют некоторые общедоступные "
"переменные экземпляра, которые либо управляют лексическим анализом, либо "
"могут использоваться для отладки:"

#: ../../library/shlex.rst:233
msgid ""
"The string of characters that are recognized as comment beginners. All "
"characters from the comment beginner to end of line are ignored. Includes "
"just ``'#'`` by default."
msgstr ""
"Строка символов, которые распознаются как комментарии начинающих. Все "
"символы от начала комментария до конца строки игнорируются. По умолчанию "
"включает только ``'#'``."

#: ../../library/shlex.rst:240
msgid ""
"The string of characters that will accumulate into multi-character tokens.  "
"By default, includes all ASCII alphanumerics and underscore.  In POSIX mode, "
"the accented characters in the Latin-1 set are also included.  If :attr:"
"`punctuation_chars` is not empty, the characters ``~-./*?=``, which can "
"appear in filename specifications and command line parameters, will also be "
"included in this attribute, and any characters which appear in "
"``punctuation_chars`` will be removed from ``wordchars`` if they are present "
"there. If :attr:`whitespace_split` is set to ``True``, this will have no "
"effect."
msgstr ""
"Строка символов, которая будет накапливаться в многосимвольные токены. По "
"умолчанию включает все буквы и цифры ASCII и подчеркивание. В режиме POSIX "
"также включаются символы с диакритическими знаками из набора Latin-1. Если :"
"attr:`punctuation_chars` не пуст, в этот атрибут также будут включены "
"символы ``~-./*?=``, которые могут встречаться в спецификациях имени файла и "
"параметрах командной строки, а также любые символы, которые появляются в "
"``punctuation_chars`` будет удален из ``wordchars``, если они там "
"присутствуют. Если для :attr:`whitespace_split` установлено значение "
"``True``, это не будет иметь никакого эффекта."

#: ../../library/shlex.rst:253
msgid ""
"Characters that will be considered whitespace and skipped.  Whitespace "
"bounds tokens.  By default, includes space, tab, linefeed and carriage-"
"return."
msgstr ""
"Символы, которые будут считаться пробелами и пропускаться. Пробелы "
"ограничивают токены. По умолчанию включает пробел, табуляцию, перевод строки "
"и возврат каретки."

#: ../../library/shlex.rst:259
msgid ""
"Characters that will be considered as escape. This will be only used in "
"POSIX mode, and includes just ``'\\'`` by default."
msgstr ""
"Персонажи, которые будут рассматриваться как побег. Он будет использоваться "
"только в режиме POSIX и по умолчанию включает только ``'\\'``."

#: ../../library/shlex.rst:265
msgid ""
"Characters that will be considered string quotes.  The token accumulates "
"until the same quote is encountered again (thus, different quote types "
"protect each other as in the shell.)  By default, includes ASCII single and "
"double quotes."
msgstr ""
"Символы, которые будут считаться строковыми кавычками. Токен накапливается "
"до тех пор, пока та же кавычка не встретится снова (таким образом, разные "
"типы кавычек защищают друг друга, как и в оболочке). По умолчанию включает "
"одинарные и двойные кавычки ASCII."

#: ../../library/shlex.rst:272
msgid ""
"Characters in :attr:`quotes` that will interpret escape characters defined "
"in :attr:`escape`.  This is only used in POSIX mode, and includes just "
"``'\"'`` by default."
msgstr ""
"Символы в :attr:`quotes`, которые будут интерпретировать escape-символы, "
"определенные в :attr:`escape`. Он используется только в режиме POSIX и по "
"умолчанию включает только ``'''``."

#: ../../library/shlex.rst:279
msgid ""
"If ``True``, tokens will only be split in whitespaces.  This is useful, for "
"example, for parsing command lines with :class:`~shlex.shlex`, getting "
"tokens in a similar way to shell arguments.  When used in combination with :"
"attr:`punctuation_chars`, tokens will be split on whitespace in addition to "
"those characters."
msgstr ""
"Если ``True``, токены будут разделяться только пробелами. Это полезно, "
"например, для анализа командных строк с помощью :class:`~shlex.shlex` и "
"получения токенов аналогично аргументам оболочки. При использовании в "
"сочетании с :attr:`punctuation_chars` токены будут разделены на пробелы в "
"дополнение к этим символам."

#: ../../library/shlex.rst:285
msgid ""
"The :attr:`punctuation_chars` attribute was made compatible with the :attr:"
"`whitespace_split` attribute."
msgstr ""
"Атрибут :attr:`punctuation_chars` стал совместимым с атрибутом :attr:"
"`whitespace_split`."

#: ../../library/shlex.rst:292
msgid ""
"The name of the current input file, as initially set at class instantiation "
"time or stacked by later source requests.  It may be useful to examine this "
"when constructing error messages."
msgstr ""
"Имя текущего входного файла, первоначально установленное во время создания "
"экземпляра класса или сложенное более поздними запросами источника. Это "
"может быть полезно изучить при построении сообщений об ошибках."

#: ../../library/shlex.rst:299
msgid ""
"The input stream from which this :class:`~shlex.shlex` instance is reading "
"characters."
msgstr ""
"Входной поток, из которого этот экземпляр :class:`~shlex.shlex` читает "
"символы."

#: ../../library/shlex.rst:305
msgid ""
"This attribute is ``None`` by default.  If you assign a string to it, that "
"string will be recognized as a lexical-level inclusion request similar to "
"the ``source`` keyword in various shells.  That is, the immediately "
"following token will be opened as a filename and input will be taken from "
"that stream until EOF, at which point the :meth:`~io.IOBase.close` method of "
"that stream will be called and the input source will again become the "
"original input stream.  Source requests may be stacked any number of levels "
"deep."
msgstr ""
"По умолчанию этот атрибут имеет значение «Нет». Если вы присвоите ему "
"строку, эта строка будет распознана как запрос на включение на лексическом "
"уровне, аналогичный ключевому слову ``source`` в различных оболочках. То "
"есть, следующий токен будет открыт как имя файла, и входные данные будут "
"приниматься из этого потока до конца EOF, после чего будет вызван метод :"
"meth:`~io.IOBase.close` этого потока и источник входных данных. снова станет "
"исходным входным потоком. Исходные запросы могут быть уложены на любое "
"количество уровней."

#: ../../library/shlex.rst:316
msgid ""
"If this attribute is numeric and ``1`` or more, a :class:`~shlex.shlex` "
"instance will print verbose progress output on its behavior.  If you need to "
"use this, you can read the module source code to learn the details."
msgstr ""
"Если этот атрибут числовой и имеет ``1`` или больше, экземпляр :class:"
"`~shlex.shlex` будет печатать подробный вывод о ходе выполнения своего "
"поведения. Если вам нужно это использовать, вы можете прочитать исходный код "
"модуля, чтобы узнать подробности."

#: ../../library/shlex.rst:323
msgid "Source line number (count of newlines seen so far plus one)."
msgstr ""
"Номер исходной строки (количество просмотренных новых строк плюс один)."

#: ../../library/shlex.rst:328
msgid ""
"The token buffer.  It may be useful to examine this when catching exceptions."
msgstr "Буфер токена. Это может быть полезно изучить при перехвате исключений."

#: ../../library/shlex.rst:333
msgid ""
"Token used to determine end of file. This will be set to the empty string "
"(``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr ""
"Токен, используемый для определения конца файла. Будет установлена ​​пустая "
"строка (``''``) в режиме, отличном от POSIX, и значение ``None`` в режиме "
"POSIX."

#: ../../library/shlex.rst:339
msgid ""
"A read-only property. Characters that will be considered punctuation. Runs "
"of punctuation characters will be returned as a single token. However, note "
"that no semantic validity checking will be performed: for example, '>>>' "
"could be returned as a token, even though it may not be recognised as such "
"by shells."
msgstr ""
"Свойство, доступное только для чтения. Символы, которые будут считаться "
"пунктуационными. Наборы знаков препинания будут возвращены как один токен. "
"Однако обратите внимание, что проверка семантической достоверности "
"выполняться не будет: например, '>>>' может быть возвращено как токен, даже "
"если оболочки не распознают его как таковой."

#: ../../library/shlex.rst:350
msgid "Parsing Rules"
msgstr "Правила синтаксического анализа"

#: ../../library/shlex.rst:352
msgid ""
"When operating in non-POSIX mode, :class:`~shlex.shlex` will try to obey to "
"the following rules."
msgstr ""
"При работе в режиме, отличном от POSIX, :class:`~shlex.shlex` попытается "
"подчиняться следующим правилам."

#: ../../library/shlex.rst:355
msgid ""
"Quote characters are not recognized within words (``Do\"Not\"Separate`` is "
"parsed as the single word ``Do\"Not\"Separate``);"
msgstr ""
"Символы кавычек не распознаются внутри слов (``Do\"Not\"Separate`` "
"анализируется как одно слово ``Do\"Not\"Separate``);"

#: ../../library/shlex.rst:358
msgid "Escape characters are not recognized;"
msgstr "Escape-символы не распознаются;"

#: ../../library/shlex.rst:360
msgid ""
"Enclosing characters in quotes preserve the literal value of all characters "
"within the quotes;"
msgstr ""
"Заключение символов в кавычки сохраняет буквальное значение всех символов в "
"кавычках;"

#: ../../library/shlex.rst:363
msgid ""
"Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"`` "
"and ``Separate``);"
msgstr ""
"Закрывающие кавычки - отдельные слова (``\"Do\"Separate`` анализируется как "
"``\"Do\"`` и ``Separate``);"

#: ../../library/shlex.rst:366
msgid ""
"If :attr:`~shlex.whitespace_split` is ``False``, any character not declared "
"to be a word character, whitespace, or a quote will be returned as a single-"
"character token. If it is ``True``, :class:`~shlex.shlex` will only split "
"words in whitespaces;"
msgstr ""
"Если :attr:`~shlex.whitespace_split` имеет значение ``False``, любой символ, "
"не объявленный как символ слова, пробел или кавычка, будет возвращен как "
"односимвольный токен. Если это ``True``, :class:`~shlex.shlex` будет "
"разделять слова только пробелами;"

#: ../../library/shlex.rst:371
msgid "EOF is signaled with an empty string (``''``);"
msgstr "EOF сигнализируется пустой строкой (``''``);"

#: ../../library/shlex.rst:373
msgid "It's not possible to parse empty strings, even if quoted."
msgstr ""
"Невозможно анализировать пустые строки, даже если они заключены в кавычки."

#: ../../library/shlex.rst:375
msgid ""
"When operating in POSIX mode, :class:`~shlex.shlex` will try to obey to the "
"following parsing rules."
msgstr ""
"При работе в режиме POSIX :class:`~shlex.shlex` попытается подчиняться "
"следующим правилам синтаксического анализа."

#: ../../library/shlex.rst:378
msgid ""
"Quotes are stripped out, and do not separate words "
"(``\"Do\"Not\"Separate\"`` is parsed as the single word ``DoNotSeparate``);"
msgstr ""
"Кавычки удаляются и не разделяют слова («Do»Not»Separate» анализируется как "
"одно слово «DoNotSeparate»);"

#: ../../library/shlex.rst:381
msgid ""
"Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value of "
"the next character that follows;"
msgstr ""
"Escape-символы, не заключенные в кавычки (например, ``'\\'``), сохраняют "
"буквальное значение следующего за ним символа;"

#: ../../library/shlex.rst:384
msgid ""
"Enclosing characters in quotes which are not part of :attr:`~shlex."
"escapedquotes` (e.g. ``\"'\"``) preserve the literal value of all characters "
"within the quotes;"
msgstr ""
"Заключение символов в кавычки, которые не являются частью :attr:`~shlex."
"escapedquotes` (например, ``\"'\"``), сохраняет буквальное значение всех "
"символов в кавычках;"

#: ../../library/shlex.rst:388
msgid ""
"Enclosing characters in quotes which are part of :attr:`~shlex."
"escapedquotes` (e.g. ``'\"'``) preserves the literal value of all characters "
"within the quotes, with the exception of the characters mentioned in :attr:"
"`~shlex.escape`.  The escape characters retain its special meaning only when "
"followed by the quote in use, or the escape character itself. Otherwise the "
"escape character will be considered a normal character."
msgstr ""
"Заключение символов в кавычки, которые являются частью :attr:`~shlex."
"escapedquotes` (например, ``'\"'``), сохраняет буквальное значение всех "
"символов в кавычках, за исключением символов, упомянутых в :attr:` ~shlex."
"escape`. escape-символы сохраняют свое особое значение только тогда, когда "
"за ними следует используемая кавычка или сам escape-символ. В противном "
"случае escape-символ будет считаться обычным символом."

#: ../../library/shlex.rst:396
msgid "EOF is signaled with a :const:`None` value;"
msgstr "EOF сигнализируется значением :const:`None`;"

#: ../../library/shlex.rst:398
msgid "Quoted empty strings (``''``) are allowed."
msgstr "Допускаются пустые строки в кавычках (``''``)."

#: ../../library/shlex.rst:403
msgid "Improved Compatibility with Shells"
msgstr "Улучшенная совместимость с оболочками"

#: ../../library/shlex.rst:407
msgid ""
"The :class:`shlex` class provides compatibility with the parsing performed "
"by common Unix shells like ``bash``, ``dash``, and ``sh``.  To take "
"advantage of this compatibility, specify the ``punctuation_chars`` argument "
"in the constructor.  This defaults to ``False``, which preserves pre-3.6 "
"behaviour. However, if it is set to ``True``, then parsing of the characters "
"``();<>|&`` is changed: any run of these characters is returned as a single "
"token.  While this is short of a full parser for shells (which would be out "
"of scope for the standard library, given the multiplicity of shells out "
"there), it does allow you to perform processing of command lines more easily "
"than you could otherwise.  To illustrate, you can see the difference in the "
"following snippet:"
msgstr ""
"Класс :class:`shlex` обеспечивает совместимость с синтаксическим анализом, "
"выполняемым обычными оболочками Unix, такими как ``bash``, ``dash`` и "
"``sh``. Чтобы воспользоваться преимуществами этой совместимости, укажите в "
"конструкторе аргумент punctuation_chars. По умолчанию установлено значение "
"«False», что сохраняет поведение до версии 3.6. Однако, если для него "
"установлено значение «True», то синтаксический анализ символов «();<>|&» "
"изменяется: любая серия этих символов возвращается как один токен. Хотя "
"этого недостаточно для полноценного синтаксического анализатора оболочек "
"(который вышел бы за рамки стандартной библиотеки, учитывая множество "
"существующих оболочек), он позволяет вам выполнять обработку командных строк "
"более легко, чем вы могли бы в противном случае. Для иллюстрации вы можете "
"увидеть разницу в следующем фрагменте:"

#: ../../library/shlex.rst:433
msgid ""
"Of course, tokens will be returned which are not valid for shells, and "
"you'll need to implement your own error checks on the returned tokens."
msgstr ""
"Конечно, будут возвращены токены, которые недействительны для оболочек, и "
"вам придется реализовать собственные проверки ошибок в возвращаемых токенах."

#: ../../library/shlex.rst:436
msgid ""
"Instead of passing ``True`` as the value for the punctuation_chars "
"parameter, you can pass a string with specific characters, which will be "
"used to determine which characters constitute punctuation. For example::"
msgstr ""
"Вместо передачи True в качестве значения параметра punctuation_chars вы "
"можете передать строку с определенными символами, которая будет "
"использоваться для определения того, какие символы составляют пунктуацию. "
"Например::"

#: ../../library/shlex.rst:445
msgid ""
"When ``punctuation_chars`` is specified, the :attr:`~shlex.wordchars` "
"attribute is augmented with the characters ``~-./*?=``.  That is because "
"these characters can appear in file names (including wildcards) and command-"
"line arguments (e.g. ``--color=auto``). Hence::"
msgstr ""
"Если указан ``punctuation_chars``, атрибут :attr:`~shlex.wordchars` "
"дополняется символами ``~-./*?=``. Это связано с тем, что эти символы могут "
"появляться в именах файлов (включая подстановочные знаки) и аргументах "
"командной строки (например, ``--color=auto``). Следовательно::"

#: ../../library/shlex.rst:456
msgid ""
"However, to match the shell as closely as possible, it is recommended to "
"always use ``posix`` and :attr:`~shlex.whitespace_split` when using :attr:"
"`~shlex.punctuation_chars`, which will negate :attr:`~shlex.wordchars` "
"entirely."
msgstr ""
"Однако, чтобы максимально точно соответствовать оболочке, рекомендуется "
"всегда использовать ``posix`` и :attr:`~shlex.whitespace_split` при "
"использовании :attr:`~shlex.punctuation_chars`, что будет отрицать :attr: "
"`~shlex.wordchars` полностью."

#: ../../library/shlex.rst:461
msgid ""
"For best effect, ``punctuation_chars`` should be set in conjunction with "
"``posix=True``. (Note that ``posix=False`` is the default for :class:`~shlex."
"shlex`.)"
msgstr ""
"Для достижения наилучшего эффекта ``punctuation_chars`` следует "
"устанавливать вместе с ``posix=True``. (Обратите внимание, что "
"``posix=False`` является значением по умолчанию для :class:`~shlex.shlex`.)"
