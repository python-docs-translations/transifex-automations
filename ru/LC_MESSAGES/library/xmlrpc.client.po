# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-21 14:55+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/xmlrpc.client.rst:2
msgid ":mod:`!xmlrpc.client` --- XML-RPC client access"
msgstr ":mod:`!xmlrpc.client` --- Клиентский доступ XML-RPC"

#: ../../library/xmlrpc.client.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/client.py`"
msgstr "**Исходный код:** :source:`Lib/xmlrpc/client.py`"

#: ../../library/xmlrpc.client.rst:17
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details "
"of translating between conformable Python objects and XML on the wire."
msgstr ""
"XML-RPC — это метод удаленного вызова процедур, который использует XML, "
"передаваемый через HTTP(S), в качестве транспорта. С его помощью клиент "
"может вызывать методы с параметрами на удаленном сервере (сервер именуется "
"по URI) и получать обратно структурированные данные. Этот модуль "
"поддерживает написание клиентского кода XML-RPC; он обрабатывает все детали "
"трансляции между совместимыми объектами Python и XML в сети."

#: ../../library/xmlrpc.client.rst:26
msgid ""
"The :mod:`xmlrpc.client` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
"Модуль :mod:`xmlrpc.client` не защищен от вредоносно созданных данных. Если "
"вам нужно проанализировать ненадежные или неаутентифицированные данные, см. :"
"ref:`xml-vulnerabilities`."

#: ../../library/xmlrpc.client.rst:32
msgid ""
"For HTTPS URIs, :mod:`xmlrpc.client` now performs all the necessary "
"certificate and hostname checks by default."
msgstr ""
"Для HTTPS URI :mod:`xmlrpc.client` теперь по умолчанию выполняет все "
"необходимые проверки сертификатов и имен хостов."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Доступность"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"Этот модуль не работает или недоступен на платформах WebAssembly «wasm32-"
"emscripten» и «wasm32-wasi». См. :ref:`wasm-availability` для получения "
"дополнительной информации."

#: ../../library/xmlrpc.client.rst:41
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with "
"a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""
"Экземпляр :class:`ServerProxy` — это объект, который управляет связью с "
"удаленным сервером XML-RPC. Обязательным первым аргументом является URI "
"(унифицированный индикатор ресурса), обычно это URL-адрес сервера. "
"Необязательный второй аргумент — это экземпляр транспортной фабрики; по "
"умолчанию это внутренний экземпляр :class:`SafeTransport` для URL-адресов "
"https: и внутренний экземпляр HTTP :class:`Transport` в противном случае. "
"Необязательный третий аргумент — это кодировка, по умолчанию UTF-8. "
"Необязательный четвертый аргумент — это флаг отладки."

#: ../../library/xmlrpc.client.rst:49
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This "
"is a commonly used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-rpc/"
"extensions.php <https://web.archive.org/web/20130120074804/http://ontosys."
"com/xml-rpc/extensions.php>`_ for a description. The *use_builtin_types* "
"flag can be used to cause date/time values to be presented as :class:"
"`datetime.datetime` objects and binary data to be presented as :class:"
"`bytes` objects; this flag is false by default. :class:`datetime.datetime`, :"
"class:`bytes` and :class:`bytearray` objects may be passed to calls. The "
"*headers* parameter is an optional sequence of HTTP headers to send with "
"each request, expressed as a sequence of 2-tuples representing the header "
"name and value. (e.g. ``[('Header-Name', 'value')]``). If an HTTPS URL is "
"provided, *context* may be :class:`ssl.SSLContext` and configures the SSL "
"settings of the underlying HTTPS connection. The obsolete *use_datetime* "
"flag is similar to *use_builtin_types* but it applies only to date/time "
"values."
msgstr ""
"Следующие параметры регулируют использование возвращаемого экземпляра "
"прокси. Если * allow_none * это правда, константа питона `` none`` будет "
"переведен в XML; Поведение по умолчанию предназначено для `` none``, чтобы "
"поднять: exc: `typeerror Это обычно используемое расширение для спецификации "
"XML-RPC, но не поддерживается всеми клиентами и серверами; См. Флаг * "
"use_builtin_types * может использоваться, чтобы привести к представлению "
"значений даты/времени как: класс: `datetime.datetime` Объекты и двоичные "
"данные, которые будут представлены как: класс:` bytes` объекты; Этот флаг "
"ложный по умолчанию. : class: `datetime.datetime`,: class:` bytes` и: class: "
"`Объекты Bytearray` могут быть переданы на вызовы. Параметр * Заголовки * "
"представляет собой необязательную последовательность заголовков HTTP для "
"отправки с каждым запросом, выраженной в виде последовательности из 2-х "
"верхов, представляющих имя заголовка и значение. (например, `[('header-"
"name', 'value')]` `). Если предоставлен URL -адрес HTTPS, * контекст * может "
"быть: класс: `ssl.sslcontext` и настраивает настройки SSL базового "
"подключения HTTPS. Устаревший * use_datetime * флаг похож на * "
"use_builtin_types *, но он применяется только к дате/значениям времени."

#: ../../library/xmlrpc.client.rst:69 ../../library/xmlrpc.client.rst:549
msgid "The *use_builtin_types* flag was added."
msgstr "Был добавлен флаг *use_builtin_types*."

#: ../../library/xmlrpc.client.rst:72
msgid "The *headers* parameter was added."
msgstr "Добавлен параметр *headers*."

#: ../../library/xmlrpc.client.rst:75
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP "
"Basic Authentication: ``http://user:pass@host:port/path``.  The  ``user:"
"pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and "
"sent to the remote server as part of the connection process when invoking an "
"XML-RPC method.  You only need to use this if the remote server requires a "
"Basic Authentication user and password."
msgstr ""
"Как транспорты HTTP, так и HTTPS поддерживают расширение синтаксиса URL для "
"базовой аутентификации HTTP: `http: // user: pass@host: port/path`. Часть `` "
"user: pass` `` `` будет основан на заголовке авторизации http 'и отправлена ​​"
"на удаленный сервер как часть процесса соединения при вызове метода XML-RPC. "
"Вам нужно использовать это только в том случае, если удаленный сервер "
"требует базового пользователя аутентификации и пароля."

#: ../../library/xmlrpc.client.rst:82
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""
"Возвращенный экземпляр представляет собой прокси-объект с методами, которые "
"можно использовать для вызова соответствующих вызовов RPC на удаленном "
"сервере. Если удаленный сервер поддерживает API интроспекции, прокси-сервер "
"также можно использовать для запроса удаленного сервера о поддерживаемых им "
"методах (обнаружение служб) и получения других метаданных, связанных с "
"сервером."

#: ../../library/xmlrpc.client.rst:88
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""
"Типы, которые являются совместимыми (например, которые могут быть "
"маршализованы через XML), включают следующее (и, если не указано иное, они "
"не маршализуются как один и тот же тип Python):"

#: ../../library/xmlrpc.client.rst:95
msgid "XML-RPC type"
msgstr "Тип XML-RPC"

#: ../../library/xmlrpc.client.rst:95
msgid "Python type"
msgstr "Тип Python"

#: ../../library/xmlrpc.client.rst:97
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpc.client.rst:97
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpc.client.rst:99
msgid "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"
msgstr "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"

#: ../../library/xmlrpc.client.rst:99
msgid ""
":class:`int` in range from -2147483648 to 2147483647. Values get the "
"``<int>`` tag."
msgstr ""
":class:`int` в диапазоне от -2147483648 до 2147483647. Значениям "
"присваивается тег ``<int>``."

#: ../../library/xmlrpc.client.rst:104
msgid "``double`` or ``float``"
msgstr "``double`` или ``float``"

#: ../../library/xmlrpc.client.rst:104
msgid ":class:`float`.  Values get the ``<double>`` tag."
msgstr ":class:`плавать`. Значения получают тег ``<double>``."

#: ../../library/xmlrpc.client.rst:107
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpc.client.rst:107
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/xmlrpc.client.rst:109
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpc.client.rst:109
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are "
"returned as :class:`lists <list>`."
msgstr ""
":class:`list` или :class:`tuple`, содержащий соответствующие элементы. "
"Массивы возвращаются как :class:`lists <list>`."

#: ../../library/xmlrpc.client.rst:113
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpc.client.rst:113
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their :attr:`~object."
"__dict__` attribute is transmitted."
msgstr ""
":class:`dict`. Ключи должны быть строками, значения могут быть любого "
"соответствующего типа. Можно передавать объекты пользовательских классов; "
"передается только их атрибут :attr:`~object.__dict__`."

#: ../../library/xmlrpc.client.rst:118
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpc.client.rst:118
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of *use_builtin_types* and *use_datetime* flags."
msgstr ""
":class:`DateTime` или :class:`datetime.datetime`. Возвращаемый тип зависит "
"от значений флагов *use_builtin_types* и *use_datetime*."

#: ../../library/xmlrpc.client.rst:122
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpc.client.rst:122
msgid ""
":class:`Binary`, :class:`bytes` or :class:`bytearray`.  Returned type "
"depends on the value of the *use_builtin_types* flag."
msgstr ""
":class:`Binary`, :class:`bytes` или :class:`bytearray`. Возвращаемый тип "
"зависит от значения флага *use_builtin_types*."

#: ../../library/xmlrpc.client.rst:126
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpc.client.rst:126
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr ""
"Константа ``None``. Передача разрешена, только если *allow_none* имеет "
"значение true."

#: ../../library/xmlrpc.client.rst:129
msgid "``bigdecimal``"
msgstr "``bigdecimal``"

#: ../../library/xmlrpc.client.rst:129
msgid ":class:`decimal.Decimal`.  Returned type only."
msgstr ":class:`decimal.Decimal`. Только возвращаемый тип."

#: ../../library/xmlrpc.client.rst:132
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that the xmlrpc client module "
"currently does not marshal instances of subclasses of built-in types."
msgstr ""
"Это полный набор типов данных, поддерживаемых XML-RPC. Вызовы методов также "
"могут вызывать специальный экземпляр :exc:`Fault`, используемый для "
"сигнализации об ошибках сервера XML-RPC, или :exc:`ProtocolError`, "
"используемый для сигнализации об ошибке на транспортном уровне HTTP/HTTPS. "
"Оба :exc:`Fault` и :exc:`ProtocolError` являются производными от базового "
"класса :exc:`Error`. Обратите внимание, что клиентский модуль xmlrpc в "
"настоящее время не маршалирует экземпляры подклассов встроенных типов."

#: ../../library/xmlrpc.client.rst:139
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary bytes via XML-RPC, use :class:`bytes` or :class:"
"`bytearray` classes or the :class:`Binary` wrapper class described below."
msgstr ""
"При передаче строк символы, специальные для XML, такие как ``<``, ``>`` и "
"``&``, будут автоматически экранироваться. Однако вызывающая сторона несет "
"ответственность за то, чтобы строка не содержала символов, которые не "
"разрешены в XML, таких как управляющие символы со значениями ASCII от 0 до "
"31 (кроме, конечно, табуляции, новой строки и возврата каретки); Если этого "
"не сделать, запрос XML-RPC будет неправильно сформированным XML. Если вам "
"нужно передать произвольные байты через XML-RPC, используйте классы :class:"
"`bytes` или :class:`bytearray` или класс-оболочку :class:`Binary`, описанный "
"ниже."

#: ../../library/xmlrpc.client.rst:148
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server` сохраняется как псевдоним для :class:`ServerProxy` для "
"обеспечения обратной совместимости. В новом коде следует использовать :class:"
"`ServerProxy`."

#: ../../library/xmlrpc.client.rst:151
msgid "Added the *context* argument."
msgstr "Добавлен аргумент *context*."

#: ../../library/xmlrpc.client.rst:154
msgid ""
"Added support of type tags with prefixes (e.g. ``ex:nil``). Added support of "
"unmarshalling additional types used by Apache XML-RPC implementation for "
"numerics: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` and "
"``bigdecimal``. See https://ws.apache.org/xmlrpc/types.html for a "
"description."
msgstr ""
"Добавлена ​​поддержка тегов типов с префиксами (например, ex:nil). Добавлена ​​"
"поддержка демаршаллинга дополнительных типов, используемых реализацией "
"Apache XML-RPC для числовых значений: i1, i2, i8, biginteger, float и "
"bigdecimal. `. Описание см. на https://ws.apache.org/xmlrpc/types.html."

#: ../../library/xmlrpc.client.rst:164
msgid "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"

#: ../../library/xmlrpc.client.rst:165
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs "
"to know."
msgstr ""
"Хорошее описание работы XML-RPC и клиентского программного обеспечения на "
"нескольких языках. Содержит практически все, что необходимо знать "
"разработчику клиента XML-RPC."

#: ../../library/xmlrpc.client.rst:168
msgid ""
"`XML-RPC Introspection <https://xmlrpc-c.sourceforge.io/introspection.html>`_"
msgstr ""
"`Интроспекция XML-RPC <https://xmlrpc-c.sourceforge.io/introspection.html>`_"

#: ../../library/xmlrpc.client.rst:169
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr "Описывает расширение протокола XML-RPC для самоанализа."

#: ../../library/xmlrpc.client.rst:171
msgid "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"
msgstr "`Спецификация XML-RPC <http://xmlrpc.scripting.com/spec.html>`_"

#: ../../library/xmlrpc.client.rst:172
msgid "The official specification."
msgstr "Официальная спецификация."

#: ../../library/xmlrpc.client.rst:177
msgid "ServerProxy Objects"
msgstr "Объекты ServerProxy"

#: ../../library/xmlrpc.client.rst:179
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method "
"name can be overloaded with multiple argument signatures).  The RPC finishes "
"by returning a value, which may be either returned data in a conformant type "
"or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""
"Экземпляр :class:`ServerProxy` имеет метод, соответствующий каждому "
"удаленному вызову процедуры, принимаемому сервером XML-RPC. При вызове "
"метода выполняется RPC, отправляемый как по имени, так и по сигнатуре "
"аргумента (например, одно и то же имя метода может быть перегружено "
"несколькими сигнатурами аргументов). RPC завершается возвратом значения, "
"которое может быть либо возвращенными данными соответствующего типа, либо "
"объектом :class:`Fault` или :class:`ProtocolError`, указывающим на ошибку."

#: ../../library/xmlrpc.client.rst:186
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""
"Серверы, поддерживающие API-интерфейс интроспекции XML, поддерживают "
"некоторые общие методы, сгруппированные по зарезервированному атрибуту :attr:"
"`~ServerProxy.system`:"

#: ../../library/xmlrpc.client.rst:192
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr ""
"Этот метод возвращает список строк, по одной для каждого (несистемного) "
"метода, поддерживаемого сервером XML-RPC."

#: ../../library/xmlrpc.client.rst:198
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server. It returns an array of possible signatures for this method. A "
"signature is an array of types. The first of these types is the return type "
"of the method, the rest are parameters."
msgstr ""
"Этот метод принимает один параметр — имя метода, реализованного сервером XML-"
"RPC. Он возвращает массив возможных сигнатур для этого метода. Сигнатура "
"представляет собой массив типов. Первый из этих типов — это возвращаемый тип "
"метода, остальные — параметры."

#: ../../library/xmlrpc.client.rst:203
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr ""
"Поскольку разрешено несколько подписей (т. е. перегрузка), этот метод "
"возвращает список подписей, а не один элемент."

#: ../../library/xmlrpc.client.rst:206
msgid ""
"Signatures themselves are restricted to the top level parameters expected by "
"a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is "
"\"string, int, int, int\"."
msgstr ""
"Сами сигнатуры ограничены параметрами верхнего уровня, ожидаемыми методом. "
"Например, если метод ожидает в качестве параметра один массив структур и "
"возвращает строку, его сигнатура — это просто «строка, массив». Если он "
"ожидает три целых числа и возвращает строку, его сигнатура — «строка, int, "
"int, int»."

#: ../../library/xmlrpc.client.rst:211
msgid ""
"If no signature is defined for the method, a non-array value is returned. In "
"Python this means that the type of the returned  value will be something "
"other than list."
msgstr ""
"Если для метода не определена подпись, возвращается значение, не являющееся "
"массивом. В Python это означает, что тип возвращаемого значения будет "
"отличным от списка."

#: ../../library/xmlrpc.client.rst:218
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server.  It returns a documentation string describing the use of that "
"method. If no such string is available, an empty string is returned. The "
"documentation string may contain HTML markup."
msgstr ""
"Этот метод принимает один параметр — имя метода, реализованного сервером XML-"
"RPC. Он возвращает строку документации, описывающую использование этого "
"метода. Если такой строки нет, возвращается пустая строка. Строка "
"документации может содержать HTML-разметку."

#: ../../library/xmlrpc.client.rst:225
msgid ""
"Instances of :class:`ServerProxy` support the :term:`context manager` "
"protocol for closing the underlying transport."
msgstr ""
"Экземпляры :class:`ServerProxy` поддерживают протокол :term:`контекстного "
"менеджера` для закрытия базового транспорта."

#: ../../library/xmlrpc.client.rst:229 ../../library/xmlrpc.client.rst:276
msgid "A working example follows. The server code::"
msgstr "Далее следует рабочий пример. Код сервера::"

#: ../../library/xmlrpc.client.rst:231
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def is_even(n):\n"
"    return n % 2 == 0\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(is_even, \"is_even\")\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def is_even(n):\n"
"    return n % 2 == 0\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(is_even, \"is_even\")\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:241 ../../library/xmlrpc.client.rst:291
#: ../../library/xmlrpc.client.rst:401 ../../library/xmlrpc.client.rst:507
msgid "The client code for the preceding server::"
msgstr "Клиентский код предыдущего сервера::"

#: ../../library/xmlrpc.client.rst:243
msgid ""
"import xmlrpc.client\n"
"\n"
"with xmlrpc.client.ServerProxy(\"http://localhost:8000/\") as proxy:\n"
"    print(\"3 is even: %s\" % str(proxy.is_even(3)))\n"
"    print(\"100 is even: %s\" % str(proxy.is_even(100)))"
msgstr ""
"import xmlrpc.client\n"
"\n"
"with xmlrpc.client.ServerProxy(\"http://localhost:8000/\") as proxy:\n"
"    print(\"3 is even: %s\" % str(proxy.is_even(3)))\n"
"    print(\"100 is even: %s\" % str(proxy.is_even(100)))"

#: ../../library/xmlrpc.client.rst:252
msgid "DateTime Objects"
msgstr "Объекты даты и времени"

#: ../../library/xmlrpc.client.rst:256
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an "
"ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has "
"the following methods, supported mainly for internal use by the marshalling/"
"unmarshalling code:"
msgstr ""
"Этот класс может быть инициализирован секундами с начала эпохи, кортежем "
"времени, строкой времени/даты ISO 8601 или экземпляром :class:`datetime."
"datetime`. Он имеет следующие методы, поддерживаемые в основном для "
"внутреннего использования кодом маршаллинга/демаршаллинга:"

#: ../../library/xmlrpc.client.rst:264
msgid "Accept a string as the instance's new time value."
msgstr "Примите строку в качестве нового значения времени экземпляра."

#: ../../library/xmlrpc.client.rst:269
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr ""
"Запишите кодировку XML-RPC этого элемента :class:`DateTime` в объект потока "
"*out*."

#: ../../library/xmlrpc.client.rst:272
msgid ""
"It also supports certain of Python's built-in operators through :meth:`rich "
"comparison <object.__lt__>` and :meth:`~object.__repr__` methods."
msgstr ""
"Он также поддерживает некоторые встроенные операторы Python с помощью "
"методов :meth:`rich сравнение <object.__lt__>` и :meth:`~object.__repr__`."

#: ../../library/xmlrpc.client.rst:278
msgid ""
"import datetime\n"
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def today():\n"
"    today = datetime.datetime.today()\n"
"    return xmlrpc.client.DateTime(today)\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(today, \"today\")\n"
"server.serve_forever()"
msgstr ""
"import datetime\n"
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def today():\n"
"    today = datetime.datetime.today()\n"
"    return xmlrpc.client.DateTime(today)\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(today, \"today\")\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:293
msgid ""
"import xmlrpc.client\n"
"import datetime\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"\n"
"today = proxy.today()\n"
"# convert the ISO8601 string to a datetime object\n"
"converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\")\n"
"print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"
msgstr ""
"import xmlrpc.client\n"
"import datetime\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"\n"
"today = proxy.today()\n"
"# convert the ISO8601 string to a datetime object\n"
"converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\")\n"
"print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"

#: ../../library/xmlrpc.client.rst:306
msgid "Binary Objects"
msgstr "Бинарные объекты"

#: ../../library/xmlrpc.client.rst:310
msgid ""
"This class may be initialized from bytes data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr ""
"Этот класс может быть инициализирован из байтовых данных (которые могут "
"включать NUL). Первичный доступ к содержимому объекта :class:`Binary` "
"обеспечивается атрибутом:"

#: ../../library/xmlrpc.client.rst:317
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as a :class:`bytes` object."
msgstr ""
"Двоичные данные, инкапсулированные экземпляром :class:`Binary`. Данные "
"предоставляются в виде объекта :class:`bytes`."

#: ../../library/xmlrpc.client.rst:320
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ""
"Объекты :class:`Binary` имеют следующие методы, поддерживаемые в основном "
"для внутреннего использования кодом маршаллинга/демаршаллинга:"

#: ../../library/xmlrpc.client.rst:326
msgid ""
"Accept a base64 :class:`bytes` object and decode it as the instance's new "
"data."
msgstr ""
"Примите объект base64 :class:`bytes` и декодируйте его как новые данные "
"экземпляра."

#: ../../library/xmlrpc.client.rst:331
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr ""
"Запишите кодировку XML-RPC base 64 этого двоичного элемента в объект потока "
"*out*."

#: ../../library/xmlrpc.client.rst:333
msgid ""
"The encoded data will have newlines every 76 characters as per :rfc:`RFC "
"2045 section 6.8 <2045#section-6.8>`, which was the de facto standard base64 "
"specification when the XML-RPC spec was written."
msgstr ""
"Закодированные данные будут иметь символы новой строки через каждые 76 "
"символов в соответствии с :rfc:`RFC 2045, раздел 6.8 <2045#section-6.8>`, "
"который де-факто был стандартной спецификацией base64 на момент написания "
"спецификации XML-RPC."

#: ../../library/xmlrpc.client.rst:338
msgid ""
"It also supports certain of Python's built-in operators through :meth:"
"`~object.__eq__` and :meth:`~object.__ne__` methods."
msgstr ""
"Он также поддерживает некоторые встроенные операторы Python посредством "
"методов :meth:`~object.__eq__` и :meth:`~object.__ne__`."

#: ../../library/xmlrpc.client.rst:341
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr ""
"Пример использования бинарных объектов. Мы собираемся передать изображение "
"через XMLRPC::"

#: ../../library/xmlrpc.client.rst:344
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def python_logo():\n"
"    with open(\"python_logo.jpg\", \"rb\") as handle:\n"
"        return xmlrpc.client.Binary(handle.read())\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(python_logo, 'python_logo')\n"
"\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def python_logo():\n"
"    with open(\"python_logo.jpg\", \"rb\") as handle:\n"
"        return xmlrpc.client.Binary(handle.read())\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(python_logo, 'python_logo')\n"
"\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:357
msgid "The client gets the image and saves it to a file::"
msgstr "Клиент получает изображение и сохраняет его в файл::"

#: ../../library/xmlrpc.client.rst:359
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"with open(\"fetched_python_logo.jpg\", \"wb\") as handle:\n"
"    handle.write(proxy.python_logo().data)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"with open(\"fetched_python_logo.jpg\", \"wb\") as handle:\n"
"    handle.write(proxy.python_logo().data)"

#: ../../library/xmlrpc.client.rst:368
msgid "Fault Objects"
msgstr "Объекты неисправностей"

#: ../../library/xmlrpc.client.rst:372
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ""
"Объект :class:`Fault` инкапсулирует содержимое тега ошибки XML-RPC. Объекты "
"неисправностей имеют следующие атрибуты:"

#: ../../library/xmlrpc.client.rst:378
msgid "An int indicating the fault type."
msgstr "Целое число, указывающее тип ошибки."

#: ../../library/xmlrpc.client.rst:383
msgid "A string containing a diagnostic message associated with the fault."
msgstr ""
"Строка, содержащая диагностическое сообщение, связанное с неисправностью."

#: ../../library/xmlrpc.client.rst:385
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr ""
"В следующем примере мы собираемся намеренно вызвать :exc:`Fault`, возвращая "
"объект сложного типа. Код сервера::"

#: ../../library/xmlrpc.client.rst:388
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"# A marshalling error is going to occur because we're returning a\n"
"# complex number\n"
"def add(x, y):\n"
"    return x+y+0j\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(add, 'add')\n"
"\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"# A marshalling error is going to occur because we're returning a\n"
"# complex number\n"
"def add(x, y):\n"
"    return x+y+0j\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(add, 'add')\n"
"\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:403
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"try:\n"
"    proxy.add(2, 5)\n"
"except xmlrpc.client.Fault as err:\n"
"    print(\"A fault occurred\")\n"
"    print(\"Fault code: %d\" % err.faultCode)\n"
"    print(\"Fault string: %s\" % err.faultString)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"try:\n"
"    proxy.add(2, 5)\n"
"except xmlrpc.client.Fault as err:\n"
"    print(\"A fault occurred\")\n"
"    print(\"Fault code: %d\" % err.faultCode)\n"
"    print(\"Fault string: %s\" % err.faultString)"

#: ../../library/xmlrpc.client.rst:418
msgid "ProtocolError Objects"
msgstr "Объекты ProtocolError"

#: ../../library/xmlrpc.client.rst:422
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying "
"transport layer (such as a 404 'not found' error if the server named by the "
"URI does not exist).  It has the following attributes:"
msgstr ""
"A :class:`ProtocolError` object describes a protocol error in the underlying "
"transport layer (such as a 404 'not found' error if the server named by the "
"URI does not exist).  It has the following attributes:"

#: ../../library/xmlrpc.client.rst:429
msgid "The URI or URL that triggered the error."
msgstr "URI или URL-адрес, вызвавший ошибку."

#: ../../library/xmlrpc.client.rst:434
msgid "The error code."
msgstr "Код ошибки."

#: ../../library/xmlrpc.client.rst:439
msgid "The error message or diagnostic string."
msgstr "Сообщение об ошибке или диагностическая строка."

#: ../../library/xmlrpc.client.rst:444
msgid ""
"A dict containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr "Словарь, содержащий заголовки запроса HTTP/HTTPS, вызвавшего ошибку."

#: ../../library/xmlrpc.client.rst:447
msgid ""
"In the following example we're going to intentionally cause a :exc:"
"`ProtocolError` by providing an invalid URI::"
msgstr ""
"В следующем примере мы собираемся намеренно вызвать ошибку :exc:"
"`ProtocolError`, указав неверный URI::"

#: ../../library/xmlrpc.client.rst:450
msgid ""
"import xmlrpc.client\n"
"\n"
"# create a ServerProxy with a URI that doesn't respond to XMLRPC requests\n"
"proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")\n"
"\n"
"try:\n"
"    proxy.some_method()\n"
"except xmlrpc.client.ProtocolError as err:\n"
"    print(\"A protocol error occurred\")\n"
"    print(\"URL: %s\" % err.url)\n"
"    print(\"HTTP/HTTPS headers: %s\" % err.headers)\n"
"    print(\"Error code: %d\" % err.errcode)\n"
"    print(\"Error message: %s\" % err.errmsg)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"# create a ServerProxy with a URI that doesn't respond to XMLRPC requests\n"
"proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")\n"
"\n"
"try:\n"
"    proxy.some_method()\n"
"except xmlrpc.client.ProtocolError as err:\n"
"    print(\"A protocol error occurred\")\n"
"    print(\"URL: %s\" % err.url)\n"
"    print(\"HTTP/HTTPS headers: %s\" % err.headers)\n"
"    print(\"Error code: %d\" % err.errcode)\n"
"    print(\"Error message: %s\" % err.errmsg)"

#: ../../library/xmlrpc.client.rst:465
msgid "MultiCall Objects"
msgstr "Объекты мультивызова"

#: ../../library/xmlrpc.client.rst:467
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ""
"Объект :class:`MultiCall` позволяет инкапсулировать несколько вызовов к "
"удаленному серверу в один запрос. [#]_ ."

#: ../../library/xmlrpc.client.rst:473
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result "
"of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""
"Создайте объект, используемый для вызовов методов boxcar. *сервер* — "
"конечная цель вызова. Вызовы могут быть сделаны к объекту результата, но они "
"немедленно вернут ``None`` и сохранят только имя вызова и параметры в "
"объекте :class:`MultiCall`. Вызов самого объекта приводит к тому, что все "
"сохраненные вызовы передаются как один запрос system.multicall. Результатом "
"этого вызова является :term:`generator`; итерация по этому генератору дает "
"отдельные результаты."

#: ../../library/xmlrpc.client.rst:481
msgid "A usage example of this class follows.  The server code::"
msgstr "Ниже приведен пример использования этого класса. Код сервера::"

#: ../../library/xmlrpc.client.rst:483
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def add(x, y):\n"
"    return x + y\n"
"\n"
"def subtract(x, y):\n"
"    return x - y\n"
"\n"
"def multiply(x, y):\n"
"    return x * y\n"
"\n"
"def divide(x, y):\n"
"    return x // y\n"
"\n"
"# A simple server with simple arithmetic functions\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_multicall_functions()\n"
"server.register_function(add, 'add')\n"
"server.register_function(subtract, 'subtract')\n"
"server.register_function(multiply, 'multiply')\n"
"server.register_function(divide, 'divide')\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def add(x, y):\n"
"    return x + y\n"
"\n"
"def subtract(x, y):\n"
"    return x - y\n"
"\n"
"def multiply(x, y):\n"
"    return x * y\n"
"\n"
"def divide(x, y):\n"
"    return x // y\n"
"\n"
"# A simple server with simple arithmetic functions\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_multicall_functions()\n"
"server.register_function(add, 'add')\n"
"server.register_function(subtract, 'subtract')\n"
"server.register_function(multiply, 'multiply')\n"
"server.register_function(divide, 'divide')\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:509
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"multicall = xmlrpc.client.MultiCall(proxy)\n"
"multicall.add(7, 3)\n"
"multicall.subtract(7, 3)\n"
"multicall.multiply(7, 3)\n"
"multicall.divide(7, 3)\n"
"result = multicall()\n"
"\n"
"print(\"7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d\" % tuple(result))"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"multicall = xmlrpc.client.MultiCall(proxy)\n"
"multicall.add(7, 3)\n"
"multicall.subtract(7, 3)\n"
"multicall.multiply(7, 3)\n"
"multicall.divide(7, 3)\n"
"result = multicall()\n"
"\n"
"print(\"7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d\" % tuple(result))"

#: ../../library/xmlrpc.client.rst:523
msgid "Convenience Functions"
msgstr "Удобные функции"

#: ../../library/xmlrpc.client.rst:527
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length "
"1. *encoding*, if supplied, is the encoding to use in the generated XML; the "
"default is UTF-8. Python's :const:`None` value cannot be used in standard "
"XML-RPC; to allow using it via an extension,  provide a true value for "
"*allow_none*."
msgstr ""
"Преобразуйте *params* в запрос XML-RPC. или в ответ, если *methodresponse* "
"истинно. *params* может быть либо кортежем аргументов, либо экземпляром "
"класса исключений :exc:`Fault`. Если *methodresponse* имеет значение true, "
"может быть возвращено только одно значение, а это означает, что *params* "
"должно иметь длину 1. *encoding*, если оно указано, — это кодировка, которая "
"будет использоваться в сгенерированном XML; по умолчанию — UTF-8. Значение "
"Python :const:`None` не может использоваться в стандартном XML-RPC; чтобы "
"разрешить его использование через расширение, укажите истинное значение для "
"*allow_none*."

#: ../../library/xmlrpc.client.rst:538
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault` "
"exception. The *use_builtin_types* flag can be used to cause date/time "
"values to be presented as :class:`datetime.datetime` objects and binary data "
"to be presented as :class:`bytes` objects; this flag is false by default."
msgstr ""
"Преобразуйте запрос или ответ XML-RPC в объекты Python, ``(params, имя "
"метода)``. *params* — кортеж аргументов; *имя_метода* — это строка или "
"``Нет``, если в пакете нет имени метода. Если пакет XML-RPC представляет "
"состояние ошибки, эта функция вызовет исключение :exc:`Fault`. Флаг "
"*use_builtin_types* может использоваться для представления значений даты/"
"времени как объектов :class:`datetime.datetime`, а двоичных данных - как "
"объектов :class:`bytes`; по умолчанию этот флаг имеет значение false."

#: ../../library/xmlrpc.client.rst:546
msgid ""
"The obsolete *use_datetime* flag is similar to *use_builtin_types* but it "
"applies only to date/time values."
msgstr ""
"Устаревший флаг *use_datetime* аналогичен флагу *use_builtin_types*, но "
"применяется только к значениям даты и времени."

#: ../../library/xmlrpc.client.rst:556
msgid "Example of Client Usage"
msgstr "Пример использования клиента"

#: ../../library/xmlrpc.client.rst:560
msgid ""
"# simple test program (from the XML-RPC specification)\n"
"from xmlrpc.client import ServerProxy, Error\n"
"\n"
"# server = ServerProxy(\"http://localhost:8000\") # local server\n"
"with ServerProxy(\"http://betty.userland.com\") as proxy:\n"
"\n"
"    print(proxy)\n"
"\n"
"    try:\n"
"        print(proxy.examples.getStateName(41))\n"
"    except Error as v:\n"
"        print(\"ERROR\", v)"
msgstr ""
"# simple test program (from the XML-RPC specification)\n"
"from xmlrpc.client import ServerProxy, Error\n"
"\n"
"# server = ServerProxy(\"http://localhost:8000\") # local server\n"
"with ServerProxy(\"http://betty.userland.com\") as proxy:\n"
"\n"
"    print(proxy)\n"
"\n"
"    try:\n"
"        print(proxy.examples.getStateName(41))\n"
"    except Error as v:\n"
"        print(\"ERROR\", v)"

#: ../../library/xmlrpc.client.rst:573
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how::"
msgstr ""
"Чтобы получить доступ к серверу XML-RPC через HTTP-прокси, вам необходимо "
"определить собственный транспорт. В следующем примере показано, как:"

#: ../../library/xmlrpc.client.rst:576
msgid ""
"import http.client\n"
"import xmlrpc.client\n"
"\n"
"class ProxiedTransport(xmlrpc.client.Transport):\n"
"\n"
"    def set_proxy(self, host, port=None, headers=None):\n"
"        self.proxy = host, port\n"
"        self.proxy_headers = headers\n"
"\n"
"    def make_connection(self, host):\n"
"        connection = http.client.HTTPConnection(*self.proxy)\n"
"        connection.set_tunnel(host, headers=self.proxy_headers)\n"
"        self._connection = host, connection\n"
"        return connection\n"
"\n"
"transport = ProxiedTransport()\n"
"transport.set_proxy('proxy-server', 8080)\n"
"server = xmlrpc.client.ServerProxy('http://betty.userland.com', "
"transport=transport)\n"
"print(server.examples.getStateName(41))"
msgstr ""
"import http.client\n"
"import xmlrpc.client\n"
"\n"
"class ProxiedTransport(xmlrpc.client.Transport):\n"
"\n"
"    def set_proxy(self, host, port=None, headers=None):\n"
"        self.proxy = host, port\n"
"        self.proxy_headers = headers\n"
"\n"
"    def make_connection(self, host):\n"
"        connection = http.client.HTTPConnection(*self.proxy)\n"
"        connection.set_tunnel(host, headers=self.proxy_headers)\n"
"        self._connection = host, connection\n"
"        return connection\n"
"\n"
"transport = ProxiedTransport()\n"
"transport.set_proxy('proxy-server', 8080)\n"
"server = xmlrpc.client.ServerProxy('http://betty.userland.com', "
"transport=transport)\n"
"print(server.examples.getStateName(41))"

#: ../../library/xmlrpc.client.rst:598
msgid "Example of Client and Server Usage"
msgstr "Пример использования клиента и сервера"

#: ../../library/xmlrpc.client.rst:600
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr "См. :ref:`simplexmlrpcserver-example`."

#: ../../library/xmlrpc.client.rst:604
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/xmlrpc.client.rst:605
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/"
"msgReader$1208?mode=topic>`_."
msgstr ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/"
"msgReader$1208?mode=topic>`_."
