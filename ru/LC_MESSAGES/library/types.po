# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/types.rst:2
msgid ":mod:`types` --- Dynamic type creation and names for built-in types"
msgstr ""

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**Исходный код:** :source:`Lib/types.py`"

#: ../../library/types.rst:11
msgid ""
"This module defines utility functions to assist in dynamic creation of new "
"types."
msgstr ""
"Этот модуль определяет служебные функции, помогающие в динамическом создании "
"новых типов."

#: ../../library/types.rst:14
msgid ""
"It also defines names for some object types that are used by the standard "
"Python interpreter, but not exposed as builtins like :class:`int` or :class:"
"`str` are."
msgstr ""
"Он также определяет имена для некоторых типов объектов, которые используются "
"стандартным интерпретатором Python, но не отображаются как встроенные "
"функции, такие как :class:`int` или :class:`str`."

#: ../../library/types.rst:18
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr ""
"Наконец, он предоставляет некоторые дополнительные служебные классы и "
"функции, связанные с типами, которые недостаточно фундаментальны, чтобы быть "
"встроенными."

#: ../../library/types.rst:23
msgid "Dynamic Type Creation"
msgstr "Создание динамических типов"

#: ../../library/types.rst:27
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr ""
"Создает объект класса динамически, используя соответствующий метакласс."

#: ../../library/types.rst:29
msgid ""
"The first three arguments are the components that make up a class definition "
"header: the class name, the base classes (in order), the keyword arguments "
"(such as ``metaclass``)."
msgstr ""
"Первые три аргумента — это компоненты, составляющие заголовок определения "
"класса: имя класса, базовые классы (по порядку), аргументы ключевого слова "
"(например, «метакласс»)."

#: ../../library/types.rst:33
msgid ""
"The *exec_body* argument is a callback that is used to populate the freshly "
"created class namespace. It should accept the class namespace as its sole "
"argument and update the namespace directly with the class contents. If no "
"callback is provided, it has the same effect as passing in ``lambda ns: "
"None``."
msgstr ""
"Аргумент *exec_body* — это обратный вызов, который используется для "
"заполнения пространства имен только что созданного класса. Он должен принять "
"пространство имен класса в качестве единственного аргумента и обновить "
"пространство имен непосредственно содержимым класса. Если обратный вызов не "
"указан, это имеет тот же эффект, что и передача ``lambda ns: None``."

#: ../../library/types.rst:43
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr ""
"Вычисляет соответствующий метакласс и создает пространство имен класса."

#: ../../library/types.rst:45
msgid ""
"The arguments are the components that make up a class definition header: the "
"class name, the base classes (in order) and the keyword arguments (such as "
"``metaclass``)."
msgstr ""
"Аргументы — это компоненты, составляющие заголовок определения класса: имя "
"класса, базовые классы (по порядку) и аргументы ключевого слова (например, "
"«метакласс»)."

#: ../../library/types.rst:49
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr ""
"Возвращаемое значение представляет собой тройной кортеж: ``метакласс, "
"пространство имен, kwds``"

#: ../../library/types.rst:51
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared class "
"namespace and *kwds* is an updated copy of the passed in *kwds* argument "
"with any ``'metaclass'`` entry removed. If no *kwds* argument is passed in, "
"this will be an empty dict."
msgstr ""
"*metaclass* — это соответствующий метакласс, *namespace* — это "
"подготовленное пространство имен класса, а *kwds* — это обновленная копия "
"переданного аргумента *kwds* с удаленной записью ``'metaclass'``. Если "
"аргумент *kwds* не передан, это будет пустой словарь."

#: ../../library/types.rst:60
msgid ""
"The default value for the ``namespace`` element of the returned tuple has "
"changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method."
msgstr ""
"Значение по умолчанию для элемента namespace возвращаемого кортежа "
"изменилось. Теперь отображение, сохраняющее порядок вставки, используется, "
"когда метакласс не имеет метода ``__prepare__``."

#: ../../library/types.rst:67
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
msgid "Full details of the class creation process supported by these functions"
msgstr ""
"Полная информация о процессе создания классов, поддерживаемом этими "
"функциями."

#: ../../library/types.rst:69
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Метаклассы в Python 3000"

#: ../../library/types.rst:70
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "Представлен хук пространства имен ``__prepare__``."

#: ../../library/types.rst:74
msgid "Resolve MRO entries dynamically as specified by :pep:`560`."
msgstr "Разрешайте записи MRO динамически, как указано в :pep:`560`."

#: ../../library/types.rst:76
msgid ""
"This function looks for items in *bases* that are not instances of :class:"
"`type`, and returns a tuple where each such object that has an "
"``__mro_entries__`` method is replaced with an unpacked result of calling "
"this method.  If a *bases* item is an instance of :class:`type`, or it "
"doesn't have an ``__mro_entries__`` method, then it is included in the "
"return tuple unchanged."
msgstr ""

#: ../../library/types.rst:87
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ""
":pep:`560` - Основная поддержка модуля типизации и универсальных типов."

#: ../../library/types.rst:91
msgid "Standard Interpreter Types"
msgstr "Стандартные типы интерпретаторов"

#: ../../library/types.rst:93
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of the "
"types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"Этот модуль предоставляет имена для многих типов, которые необходимы для "
"реализации интерпретатора Python. Он намеренно избегает включения некоторых "
"типов, которые возникают случайно во время обработки, таких как тип "
"listiterator."

#: ../../library/types.rst:98
msgid ""
"Typical use of these names is for :func:`isinstance` or :func:`issubclass` "
"checks."
msgstr ""
"Обычно эти имена используются для проверок :func:`isinstance` или :func:"
"`issubclass`."

#: ../../library/types.rst:102
msgid ""
"If you instantiate any of these types, note that signatures may vary between "
"Python versions."
msgstr ""
"Если вы создаете экземпляр любого из этих типов, обратите внимание, что "
"сигнатуры могут различаться в зависимости от версии Python."

#: ../../library/types.rst:104
msgid "Standard names are defined for the following types:"
msgstr "Стандартные имена определены для следующих типов:"

#: ../../library/types.rst:108
msgid "The type of :data:`None`."
msgstr "Тип :data:`Нет`."

#: ../../library/types.rst:116
msgid ""
"The type of user-defined functions and functions created by :keyword:"
"`lambda`  expressions."
msgstr ""
"Тип пользовательских функций и функций, созданных с помощью :keyword:"
"`lambda`-выражений."

#: ../../library/types.rst:119
msgid ""
"Raises an :ref:`auditing event <auditing>` ``function.__new__`` with "
"argument ``code``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``function.__new__`` с аргументом "
"``code``."

#: ../../library/types.rst:121
msgid ""
"The audit event only occurs for direct instantiation of function objects, "
"and is not raised for normal compilation."
msgstr ""
"Событие аудита возникает только при прямом создании экземпляров "
"функциональных объектов и не возникает при обычной компиляции."

#: ../../library/types.rst:127
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr ""
"Тип объектов :term:`generator`-итератора, созданных функциями-генераторами."

#: ../../library/types.rst:133
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ""
"Тип объектов :term:`coroutine`, создаваемых функциями :keyword:`async def`."

#: ../../library/types.rst:141
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr ""
"Тип объектов-итераторов асинхронного генератора, созданных функциями "
"асинхронного генератора."

#: ../../library/types.rst:151
msgid "The type for code objects such as returned by :func:`compile`."
msgstr ""

#: ../../library/types.rst:153
msgid ""
"Raises an :ref:`auditing event <auditing>` ``code.__new__`` with arguments "
"``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount``, "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``code.__new__`` с аргументами "
"``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount`` , "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``."

#: ../../library/types.rst:155
msgid ""
"Note that the audited arguments may not match the names or positions "
"required by the initializer.  The audit event only occurs for direct "
"instantiation of code objects, and is not raised for normal compilation."
msgstr ""
"Обратите внимание, что проверяемые аргументы могут не соответствовать именам "
"или позициям, требуемым инициализатором. Событие аудита возникает только при "
"прямом создании экземпляров объектов кода и не возникает при обычной "
"компиляции."

#: ../../library/types.rst:161
msgid ""
"Return a copy of the code object with new values for the specified fields."
msgstr "Верните копию объекта кода с новыми значениями для указанных полей."

#: ../../library/types.rst:167
msgid ""
"The type for cell objects: such objects are used as containers for a "
"function's free variables."
msgstr ""
"Тип объектов ячеек: такие объекты используются в качестве контейнеров для "
"свободных переменных функции."

#: ../../library/types.rst:175
msgid "The type of methods of user-defined class instances."
msgstr "Тип методов экземпляров определяемого пользователем класса."

#: ../../library/types.rst:181
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means \"written "
"in C\".)"
msgstr ""
"Тип встроенных функций, таких как :func:`len` или :func:`sys.exit`, а также "
"методы встроенных классов. (Здесь термин «встроенный» означает «написанный "
"на C».)"

#: ../../library/types.rst:188
msgid ""
"The type of methods of some built-in data types and base classes such as :"
"meth:`object.__init__` or :meth:`object.__lt__`."
msgstr ""
"Тип методов некоторых встроенных типов данных и базовых классов, таких как :"
"meth:`object.__init__` или :meth:`object.__lt__`."

#: ../../library/types.rst:196
msgid ""
"The type of *bound* methods of some built-in data types and base classes. "
"For example it is the type of :code:`object().__str__`."
msgstr ""
"Тип *связанных* методов некоторых встроенных типов данных и базовых классов. "
"Например, это тип :code:`object().__str__`."

#: ../../library/types.rst:204
msgid "The type of :data:`NotImplemented`."
msgstr "Тип :data:`NotImplemented`."

#: ../../library/types.rst:211
msgid ""
"The type of methods of some built-in data types such as :meth:`str.join`."
msgstr ""
"Тип методов некоторых встроенных типов данных, таких как :meth:`str.join`."

#: ../../library/types.rst:218
msgid ""
"The type of *unbound* class methods of some built-in data types such as "
"``dict.__dict__['fromkeys']``."
msgstr ""
"Тип *несвязанных* методов класса некоторых встроенных типов данных, таких "
"как ``dict.__dict__['fromkeys']``."

#: ../../library/types.rst:226
msgid ""
"The type of :term:`modules <module>`. The constructor takes the name of the "
"module to be created and optionally its :term:`docstring`."
msgstr ""
"Тип :term:`модулей <модуль>`. Конструктор принимает имя создаваемого модуля "
"и, при необходимости, его :term:`docstring`."

#: ../../library/types.rst:230
msgid ""
"Use :func:`importlib.util.module_from_spec` to create a new module if you "
"wish to set the various import-controlled attributes."
msgstr ""

#: ../../library/types.rst:235
msgid "The :term:`docstring` of the module. Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:239
msgid "The :term:`loader` which loaded the module. Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:241
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.loader` as "
"stored in the :attr:`__spec__` object."
msgstr ""

#: ../../library/types.rst:245
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the :attr:"
"`__spec__` attribute instead or use ``getattr(module, \"__loader__\", "
"None)`` if you explicitly need to use this attribute."
msgstr ""

#: ../../library/types.rst:251 ../../library/types.rst:276
msgid "Defaults to ``None``. Previously the attribute was optional."
msgstr ""

#: ../../library/types.rst:256
msgid ""
"The name of the module. Expected to match :attr:`importlib.machinery."
"ModuleSpec.name`."
msgstr ""

#: ../../library/types.rst:261
msgid ""
"Which :term:`package` a module belongs to. If the module is top-level (i.e. "
"not a part of any specific package) then the attribute should be set to "
"``''``, else it should be set to the name of the package (which can be :attr:"
"`__name__` if the module is a package itself). Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:266
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.parent` as "
"stored in the :attr:`__spec__` object."
msgstr ""

#: ../../library/types.rst:270
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the :attr:"
"`__spec__` attribute instead or use ``getattr(module, \"__package__\", "
"None)`` if you explicitly need to use this attribute."
msgstr ""

#: ../../library/types.rst:281
msgid ""
"A record of the module's import-system-related state. Expected to be an "
"instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""

#: ../../library/types.rst:289
msgid "The type of :data:`Ellipsis`."
msgstr "Тип :data:`Ellipsis`."

#: ../../library/types.rst:295
msgid ""
"The type of :ref:`parameterized generics <types-genericalias>` such as "
"``list[int]``."
msgstr ""
"Тип параметризованных дженериков <types-genericalias>, например list[int]``."

#: ../../library/types.rst:298
msgid ""
"``t_origin`` should be a non-parameterized generic class, such as ``list``, "
"``tuple`` or ``dict``.  ``t_args`` should be a :class:`tuple` (possibly of "
"length 1) of types which parameterize ``t_origin``::"
msgstr ""
"``t_origin`` должен быть непараметризованным универсальным классом, таким "
"как ``list``, ``tuple`` или ``dict``. ``t_args`` должен быть :class:`tuple` "
"(возможно, длиной 1) типов, которые параметризуют ``t_origin``::"

#: ../../library/types.rst:311
msgid "This type can now be subclassed."
msgstr "Теперь этот тип можно разделить на подклассы."

#: ../../library/types.rst:317
msgid "The type of :ref:`union type expressions<types-union>`."
msgstr "Тип :ref:`выражений типа объединения<types-union>`."

#: ../../library/types.rst:323
msgid "The type of traceback objects such as found in ``sys.exc_info()[2]``."
msgstr ""

#: ../../library/types.rst:325
msgid ""
"See :ref:`the language reference <traceback-objects>` for details of the "
"available attributes and operations, and guidance on creating tracebacks "
"dynamically."
msgstr ""
"См. :ref:`Справочник по языку <traceback-objects>` для получения подробной "
"информации о доступных атрибутах и ​​операциях, а также рекомендаций по "
"динамическому созданию обратных трассировок."

#: ../../library/types.rst:332
msgid ""
"The type of frame objects such as found in ``tb.tb_frame`` if ``tb`` is a "
"traceback object."
msgstr ""

#: ../../library/types.rst:335
msgid ""
"See :ref:`the language reference <frame-objects>` for details of the "
"available attributes and operations."
msgstr ""

#: ../../library/types.rst:341
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, such "
"as ``FrameType.f_locals`` or ``array.array.typecode``.  This type is used as "
"descriptor for object attributes; it has the same purpose as the :class:"
"`property` type, but for classes defined in extension modules."
msgstr ""

#: ../../library/types.rst:349
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, such "
"as ``datetime.timedelta.days``.  This type is used as descriptor for simple "
"C data members which use standard conversion functions; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"Тип объектов, определенных в модулях расширения с помощью PyMemberDef, "
"например datetime.timedelta.days. Этот тип используется в качестве "
"дескриптора для простых членов данных C, которые используют стандартные "
"функции преобразования; он имеет ту же цель, что и тип :class:`property`, но "
"для классов, определенных в модулях расширения."

#: ../../library/types.rst:356
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr ""
"В других реализациях Python этот тип может быть идентичен "
"GetSetDescriptorType."

#: ../../library/types.rst:361
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's "
"entries, which means that when the mapping changes, the view reflects these "
"changes."
msgstr ""
"Прокси-сервер сопоставления, доступный только для чтения. Он обеспечивает "
"динамическое представление записей сопоставления, что означает, что при "
"изменении сопоставления представление отражает эти изменения."

#: ../../library/types.rst:369
msgid ""
"Updated to support the new union (``|``) operator from :pep:`584`, which "
"simply delegates to the underlying mapping."
msgstr ""
"Обновлено для поддержки нового оператора объединения (``|``) из :pep:`584`, "
"который просто делегирует базовое сопоставление."

#: ../../library/types.rst:374
msgid ""
"Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr ""
"Возвращайте ``True``, если базовое сопоставление имеет ключ *key*, иначе "
"``False``."

#: ../../library/types.rst:379
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a :exc:"
"`KeyError` if *key* is not in the underlying mapping."
msgstr ""
"Верните элемент базового сопоставления с ключом *key*. Вызывает :exc:"
"`KeyError`, если *key* отсутствует в базовом сопоставлении."

#: ../../library/types.rst:384
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr ""
"Возвращает итератор по ключам базового сопоставления. Это ярлык для "
"``iter(proxy.keys())``."

#: ../../library/types.rst:389
msgid "Return the number of items in the underlying mapping."
msgstr "Возвращает количество элементов в базовом сопоставлении."

#: ../../library/types.rst:393
msgid "Return a shallow copy of the underlying mapping."
msgstr "Верните неглубокую копию базового сопоставления."

#: ../../library/types.rst:397
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that this "
"method never raises a :exc:`KeyError`."
msgstr ""
"Возвращает значение *key*, если *key* находится в базовом сопоставлении, "
"иначе *default*. Если *default* не задано, по умолчанию используется "
"значение None, так что этот метод никогда не вызывает :exc:`KeyError`."

#: ../../library/types.rst:403
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` pairs)."
msgstr ""
"Возвращает новое представление элементов базового сопоставления (пары "
"``(ключ, значение)``).(``(key, value)`` pairs)."

#: ../../library/types.rst:408
msgid "Return a new view of the underlying mapping's keys."
msgstr "Верните новое представление ключей базового сопоставления."

#: ../../library/types.rst:412
msgid "Return a new view of the underlying mapping's values."
msgstr "Верните новое представление значений базового сопоставления."

#: ../../library/types.rst:416
msgid "Return a reverse iterator over the keys of the underlying mapping."
msgstr "Верните обратный итератор по ключам базового сопоставления."

#: ../../library/types.rst:422
msgid "Additional Utility Classes and Functions"
msgstr "Дополнительные служебные классы и функции"

#: ../../library/types.rst:426
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr ""
"Простой подкласс :class:`object`, который обеспечивает доступ к атрибутам "
"своего пространства имен, а также значимое представление."

#: ../../library/types.rst:429
msgid ""
"Unlike :class:`object`, with ``SimpleNamespace`` you can add and remove "
"attributes.  If a ``SimpleNamespace`` object is initialized with keyword "
"arguments, those are directly added to the underlying namespace."
msgstr ""
"В отличие от :class:`object`, с помощью ``SimpleNamespace`` вы можете "
"добавлять и удалять атрибуты. Если объект SimpleNamespace инициализируется "
"аргументами ключевого слова, они напрямую добавляются в базовое пространство "
"имен."

#: ../../library/types.rst:433
msgid "The type is roughly equivalent to the following code::"
msgstr "Тип примерно эквивалентен следующему коду:"

#: ../../library/types.rst:448
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: pass``. "
"However, for a structured record type use :func:`~collections.namedtuple` "
"instead."
msgstr ""
"``SimpleNamespace`` может быть полезен в качестве замены ``class NS: pass``. "
"Однако для типа структурированной записи вместо этого используйте :func:"
"`~collections.namedtuple`."

#: ../../library/types.rst:454
msgid ""
"Attribute order in the repr changed from alphabetical to insertion (like "
"``dict``)."
msgstr ""
"Порядок атрибутов в представлении изменен с алфавитного на порядок вставки "
"(как в ``dict``)."

#: ../../library/types.rst:460
msgid "Route attribute access on a class to __getattr__."
msgstr "Направьте доступ к атрибутам класса к __getattr__."

#: ../../library/types.rst:462
msgid ""
"This is a descriptor, used to define attributes that act differently when "
"accessed through an instance and through a class.  Instance access remains "
"normal, but access to an attribute through a class will be routed to the "
"class's __getattr__ method; this is done by raising AttributeError."
msgstr ""
"Это дескриптор, используемый для определения атрибутов, которые действуют по-"
"разному при доступе через экземпляр и через класс. Доступ к экземпляру "
"остается обычным, но доступ к атрибуту через класс будет перенаправлен на "
"метод __getattr__ класса; это делается путем поднятия AttributeError."

#: ../../library/types.rst:467
msgid ""
"This allows one to have properties active on an instance, and have virtual "
"attributes on the class with the same name (see :class:`enum.Enum` for an "
"example)."
msgstr ""
"Это позволяет иметь активные свойства экземпляра и виртуальные атрибуты "
"класса с тем же именем (пример см. в :class:`enum.Enum`)."

#: ../../library/types.rst:474
msgid "Coroutine Utility Functions"
msgstr "Служебные функции сопрограммы"

#: ../../library/types.rst:478
msgid ""
"This function transforms a :term:`generator` function into a :term:"
"`coroutine function` which returns a generator-based coroutine. The "
"generator-based coroutine is still a :term:`generator iterator`, but is also "
"considered to be a :term:`coroutine` object and is :term:`awaitable`.  "
"However, it may not necessarily implement the :meth:`~object.__await__` "
"method."
msgstr ""
"Эта функция преобразует функцию :term:`generator` в :term:`coroutine "
"function`, которая возвращает сопрограмму на основе генератора. Сопрограмма "
"на основе генератора по-прежнему является :term:`итератором-генератором`, но "
"также считается объектом :term:`сопрограммы` и является :term:`awaitable`. "
"Однако он не обязательно реализует метод :meth:`~object.__await__`."

#: ../../library/types.rst:485
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr ""
"Если *gen_func* является функцией-генератором, она будет изменена на месте."

#: ../../library/types.rst:487
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it returns "
"an instance of :class:`collections.abc.Generator`, the instance will be "
"wrapped in an *awaitable* proxy object.  All other types of objects will be "
"returned as is."
msgstr ""
"Если *gen_func* не является функцией-генератором, она будет обернута. Если "
"он возвращает экземпляр :class:`collections.abc.Generator`, этот экземпляр "
"будет заключен в *ожидаемый* прокси-объект. Все остальные типы объектов "
"будут возвращены как есть."
