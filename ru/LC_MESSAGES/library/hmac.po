# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/hmac.rst:2
msgid ":mod:`!hmac` --- Keyed-Hashing for Message Authentication"
msgstr ":mod:`!hmac` --- Хеширование ключей для аутентификации сообщений"

#: ../../library/hmac.rst:10
msgid "**Source code:** :source:`Lib/hmac.py`"
msgstr "**Исходный код:** :source:`Lib/hmac.py`"

#: ../../library/hmac.rst:14
msgid "This module implements the HMAC algorithm as described by :rfc:`2104`."
msgstr "Этот модуль реализует алгоритм HMAC, как описано в :rfc:`2104`."

#: ../../library/hmac.rst:19
msgid ""
"Return a new hmac object.  *key* is a bytes or bytearray object giving the "
"secret key.  If *msg* is present, the method call ``update(msg)`` is made. "
"*digestmod* is the digest name, digest constructor or module for the HMAC "
"object to use.  It may be any name suitable to :func:`hashlib.new`. Despite "
"its argument position, it is required."
msgstr ""
"Верните новый объект hmac. *key* — это байтовый или байтовый объект, дающий "
"секретный ключ. Если присутствует *msg*, выполняется вызов метода "
"update(msg). *digestmod* — это имя дайджеста, конструктор или модуль "
"дайджеста, который будет использовать объект HMAC. Это может быть любое имя, "
"подходящее для :func:`hashlib.new`. Несмотря на свою аргументированную "
"позицию, она необходима."

#: ../../library/hmac.rst:25
msgid ""
"Parameter *key* can be a bytes or bytearray object. Parameter *msg* can be "
"of any type supported by :mod:`hashlib`. Parameter *digestmod* can be the "
"name of a hash algorithm."
msgstr ""
"Параметр *key* может быть объектом bytes или bytearray. Параметр *msg* может "
"иметь любой тип, поддерживаемый :mod:`hashlib`. Параметр *digestmod* может "
"быть именем алгоритма хеширования."

#: ../../library/hmac.rst:30
msgid ""
"The *digestmod* argument is now required.  Pass it as a keyword argument to "
"avoid awkwardness when you do not have an initial *msg*."
msgstr ""
"Аргумент *digestmod* теперь является обязательным. Передайте его как "
"аргумент ключевого слова, чтобы избежать неловкости, если у вас нет "
"начального *msg*."

#: ../../library/hmac.rst:37
msgid ""
"Return digest of *msg* for given secret *key* and *digest*. The function is "
"equivalent to ``HMAC(key, msg, digest).digest()``, but uses an optimized C "
"or inline implementation, which is faster for messages that fit into memory. "
"The parameters *key*, *msg*, and *digest* have the same meaning as in :func:"
"`~hmac.new`."
msgstr ""
"Возвращает дайджест *msg* для заданного секретного *ключа* и *дайджеста*. "
"Эта функция эквивалентна ``HMAC(key, msg, Digest).digest()``, но использует "
"оптимизированную C или встроенную реализацию, которая работает быстрее для "
"сообщений, помещающихся в память. Параметры *key*, *msg* и *digest* имеют то "
"же значение, что и в :func:`~hmac.new`."

#: ../../library/hmac.rst:43
msgid ""
"CPython implementation detail, the optimized C implementation is only used "
"when *digest* is a string and name of a digest algorithm, which is supported "
"by OpenSSL."
msgstr ""
"Подробности реализации CPython: оптимизированная реализация C используется "
"только в том случае, если *digest* — это строка и имя алгоритма дайджеста, "
"который поддерживается OpenSSL."

#: ../../library/hmac.rst:50
msgid "An HMAC object has the following methods:"
msgstr "Объект HMAC имеет следующие методы:"

#: ../../library/hmac.rst:54
msgid ""
"Update the hmac object with *msg*.  Repeated calls are equivalent to a "
"single call with the concatenation of all the arguments: ``m.update(a); m."
"update(b)`` is equivalent to ``m.update(a + b)``."
msgstr ""
"Обновите объект hmac с помощью *msg*. Повторные вызовы эквивалентны одному "
"вызову с объединением всех аргументов: ``m.update(a); m.update(b)`` "
"эквивалентен ``m.update(a + b)``."

#: ../../library/hmac.rst:58
msgid "Parameter *msg* can be of any type supported by :mod:`hashlib`."
msgstr "Параметр *msg* может иметь любой тип, поддерживаемый :mod:`hashlib`."

#: ../../library/hmac.rst:64
msgid ""
"Return the digest of the bytes passed to the :meth:`update` method so far. "
"This bytes object will be the same length as the *digest_size* of the digest "
"given to the constructor.  It may contain non-ASCII bytes, including NUL "
"bytes."
msgstr ""
"Возвращает дайджест байтов, переданных методу :meth:`update`. Этот байтовый "
"объект будет иметь ту же длину, что и *digest_size* дайджеста, переданного "
"конструктору. Он может содержать байты, отличные от ASCII, включая NUL-байты."

#: ../../library/hmac.rst:71
msgid ""
"When comparing the output of :meth:`digest` to an externally supplied digest "
"during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""
"При сравнении вывода :meth:`digest` с внешним дайджестом во время процедуры "
"проверки рекомендуется использовать функцию :func:`compare_digest` вместо "
"оператора ``==``, чтобы уменьшить уязвимость к времени. атаки."

#: ../../library/hmac.rst:79
msgid ""
"Like :meth:`digest` except the digest is returned as a string twice the "
"length containing only hexadecimal digits.  This may be used to exchange the "
"value safely in email or other non-binary environments."
msgstr ""
"Аналогично :meth:`digest`, за исключением того, что дайджест возвращается в "
"виде строки, в два раза превышающей длину, содержащей только "
"шестнадцатеричные цифры. Это можно использовать для безопасного обмена "
"значениями по электронной почте или в других недвоичных средах."

#: ../../library/hmac.rst:85
msgid ""
"When comparing the output of :meth:`hexdigest` to an externally supplied "
"digest during a verification routine, it is recommended to use the :func:"
"`compare_digest` function instead of the ``==`` operator to reduce the "
"vulnerability to timing attacks."
msgstr ""
"При сравнении вывода :meth:`hexdigest` с внешним дайджестом во время "
"процедуры проверки рекомендуется использовать функцию :func:`compare_digest` "
"вместо оператора ``==``, чтобы уменьшить уязвимость к времени. атаки."

#: ../../library/hmac.rst:93
msgid ""
"Return a copy (\"clone\") of the hmac object.  This can be used to "
"efficiently compute the digests of strings that share a common initial "
"substring."
msgstr ""
"Верните копию («клон») объекта hmac. Это можно использовать для эффективного "
"вычисления дайджестов строк, имеющих общую начальную подстроку."

#: ../../library/hmac.rst:97
msgid "A hash object has the following attributes:"
msgstr "Хэш-объект имеет следующие атрибуты:"

#: ../../library/hmac.rst:101
msgid "The size of the resulting HMAC digest in bytes."
msgstr "Размер полученного дайджеста HMAC в байтах."

#: ../../library/hmac.rst:105
msgid "The internal block size of the hash algorithm in bytes."
msgstr "Размер внутреннего блока хэш-алгоритма в байтах."

#: ../../library/hmac.rst:111
msgid "The canonical name of this HMAC, always lowercase, e.g. ``hmac-md5``."
msgstr ""
"Каноническое имя этого HMAC, всегда в нижнем регистре, например, «hmac-md5»."

#: ../../library/hmac.rst:116
msgid ""
"Removed the undocumented attributes ``HMAC.digest_cons``, ``HMAC.inner``, "
"and ``HMAC.outer``."
msgstr ""
"Удалены недокументированные атрибуты HMAC.digest_cons, HMAC.inner и HMAC."
"outer."

#: ../../library/hmac.rst:120
msgid "This module also provides the following helper function:"
msgstr "Этот модуль также предоставляет следующую вспомогательную функцию:"

#: ../../library/hmac.rst:124
msgid ""
"Return ``a == b``.  This function uses an approach designed to prevent "
"timing analysis by avoiding content-based short circuiting behaviour, making "
"it appropriate for cryptography.  *a* and *b* must both be of the same type: "
"either :class:`str` (ASCII only, as e.g. returned by :meth:`HMAC."
"hexdigest`), or a :term:`bytes-like object`."
msgstr ""
"Верните ``a == b``. Эта функция использует подход, предназначенный для "
"предотвращения временного анализа за счет предотвращения короткого замыкания "
"на основе контента, что делает его подходящим для криптографии. *a* и *b* "
"должны быть одного и того же типа: либо :class:`str` (только ASCII, "
"например, возвращаемый :meth:`HMAC.hexdigest`), либо :term:`bytes-подобный "
"объект `."

#: ../../library/hmac.rst:132
msgid ""
"If *a* and *b* are of different lengths, or if an error occurs, a timing "
"attack could theoretically reveal information about the types and lengths of "
"*a* and *b*—but not their values."
msgstr ""
"Если *a* и *b* имеют разную длину или возникает ошибка, временная атака "
"теоретически может раскрыть информацию о типах и длинах *a* и *b*, но не их "
"значения."

#: ../../library/hmac.rst:140
msgid ""
"The function uses OpenSSL's ``CRYPTO_memcmp()`` internally when available."
msgstr "Функция использует OpenSSL ``CRYPTO_memcmp()``, если она доступна."

#: ../../library/hmac.rst:146
msgid "Module :mod:`hashlib`"
msgstr "Модуль :mod:`hashlib`"

#: ../../library/hmac.rst:147
msgid "The Python module providing secure hash functions."
msgstr "Модуль Python, обеспечивающий безопасные хэш-функции."
