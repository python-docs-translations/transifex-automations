# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-14 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr "Подпроцессы"

#: ../../library/asyncio-subprocess.rst:9
msgid ""
"**Source code:** :source:`Lib/asyncio/subprocess.py`, :source:`Lib/asyncio/"
"base_subprocess.py`"
msgstr ""
"**Исходный код:** :source:`Lib/asyncio/subprocess.py`, :source:`Lib/asyncio/"
"base_subprocess.py`"

#: ../../library/asyncio-subprocess.rst:14
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr ""
"В этом разделе описываются высокоуровневые API-интерфейсы async/await "
"asyncio для создания подпроцессов и управления ими."

#: ../../library/asyncio-subprocess.rst:19
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr ""
"Вот пример того, как asyncio может запустить команду оболочки и получить ее "
"результат:"

#: ../../library/asyncio-subprocess.rst:22
msgid ""
"import asyncio\n"
"\n"
"async def run(cmd):\n"
"    proc = await asyncio.create_subprocess_shell(\n"
"        cmd,\n"
"        stdout=asyncio.subprocess.PIPE,\n"
"        stderr=asyncio.subprocess.PIPE)\n"
"\n"
"    stdout, stderr = await proc.communicate()\n"
"\n"
"    print(f'[{cmd!r} exited with {proc.returncode}]')\n"
"    if stdout:\n"
"        print(f'[stdout]\\n{stdout.decode()}')\n"
"    if stderr:\n"
"        print(f'[stderr]\\n{stderr.decode()}')\n"
"\n"
"asyncio.run(run('ls /zzz'))"
msgstr ""
"import asyncio\n"
"\n"
"async def run(cmd):\n"
"    proc = await asyncio.create_subprocess_shell(\n"
"        cmd,\n"
"        stdout=asyncio.subprocess.PIPE,\n"
"        stderr=asyncio.subprocess.PIPE)\n"
"\n"
"    stdout, stderr = await proc.communicate()\n"
"\n"
"    print(f'[{cmd!r} exited with {proc.returncode}]')\n"
"    if stdout:\n"
"        print(f'[stdout]\\n{stdout.decode()}')\n"
"    if stderr:\n"
"        print(f'[stderr]\\n{stderr.decode()}')\n"
"\n"
"asyncio.run(run('ls /zzz'))"

#: ../../library/asyncio-subprocess.rst:40
msgid "will print::"
msgstr "будет напечатано::"

#: ../../library/asyncio-subprocess.rst:42
msgid ""
"['ls /zzz' exited with 1]\n"
"[stderr]\n"
"ls: /zzz: No such file or directory"
msgstr ""
"['ls /zzz' exited with 1]\n"
"[stderr]\n"
"ls: /zzz: No such file or directory"

#: ../../library/asyncio-subprocess.rst:46
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute and "
"monitor multiple subprocesses in parallel.  It is indeed trivial to modify "
"the above example to run several commands simultaneously::"
msgstr ""
"Поскольку все функции подпроцесса asyncio являются асинхронными, а asyncio "
"предоставляет множество инструментов для работы с такими функциями, можно "
"легко выполнять и отслеживать несколько подпроцессов параллельно. "
"Модифицировать приведенный выше пример для одновременного запуска нескольких "
"команд действительно тривиально:"

#: ../../library/asyncio-subprocess.rst:51
msgid ""
"async def main():\n"
"    await asyncio.gather(\n"
"        run('ls /zzz'),\n"
"        run('sleep 1; echo \"hello\"'))\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def main():\n"
"    await asyncio.gather(\n"
"        run('ls /zzz'),\n"
"        run('sleep 1; echo \"hello\"'))\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio-subprocess.rst:58
msgid "See also the `Examples`_ subsection."
msgstr "См. также подраздел `Примеры`_."

#: ../../library/asyncio-subprocess.rst:62
msgid "Creating Subprocesses"
msgstr "Создание подпроцессов"

#: ../../library/asyncio-subprocess.rst:68
msgid "Create a subprocess."
msgstr "Создайте подпроцесс."

#: ../../library/asyncio-subprocess.rst:70
#: ../../library/asyncio-subprocess.rst:89
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`~asyncio.subprocess.Process.stdout` and :attr:`~asyncio."
"subprocess.Process.stderr` (if :const:`subprocess.PIPE` is passed to "
"*stdout* and *stderr* arguments)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:74
#: ../../library/asyncio-subprocess.rst:93
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr "Верните экземпляр :class:`~asyncio.subprocess.Process`."

#: ../../library/asyncio-subprocess.rst:76
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other parameters."
msgstr "Другие параметры смотрите в документации :meth:`loop.subprocess_exec`."

#: ../../library/asyncio-subprocess.rst:79
#: ../../library/asyncio-subprocess.rst:107
msgid "Removed the *loop* parameter."
msgstr "Удален параметр *loop*."

#: ../../library/asyncio-subprocess.rst:87
msgid "Run the *cmd* shell command."
msgstr "Запустите команду оболочки *cmd*."

#: ../../library/asyncio-subprocess.rst:95
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other parameters."
msgstr ""
"Другие параметры смотрите в документации :meth:`loop.subprocess_shell`."

#: ../../library/asyncio-subprocess.rst:100
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special shell characters in strings that are going to "
"be used to construct shell commands."
msgstr ""
"Приложение несет ответственность за то, чтобы все пробелы и специальные "
"символы были заключены в кавычки соответствующим образом, чтобы избежать `_ "
"уязвимостей внедрения оболочки <https://en.wikipedia.org/wiki/"
"Shell_injection#Shell_injection>`_. Функцию :func:`shlex.quote` можно "
"использовать для правильного экранирования пробелов и специальных символов "
"оболочки в строках, которые будут использоваться для создания команд "
"оболочки."

#: ../../library/asyncio-subprocess.rst:112
msgid ""
"Subprocesses are available for Windows if a :class:`ProactorEventLoop` is "
"used. See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` "
"for details."
msgstr ""
"Подпроцессы доступны для Windows, если используется :class:"
"`ProactorEventLoop`. Подробности см. в разделе «Поддержка подпроцессов в "
"Windows <asyncio-windows-subprocess>»."

#: ../../library/asyncio-subprocess.rst:118
msgid ""
"asyncio also has the following *low-level* APIs to work with subprocesses: :"
"meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :meth:`loop."
"connect_read_pipe`, :meth:`loop.connect_write_pipe`, as well as the :ref:"
"`Subprocess Transports <asyncio-subprocess-transports>` and :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`."
msgstr ""
"asyncio также имеет следующие *низкоуровневые* API для работы с "
"подпроцессами: :meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :"
"meth:`loop.connect_read_pipe`, :meth:`loop.connect_write_pipe `, а также :"
"ref:`Транспорты подпроцессов <asyncio-subprocess-transports>` и :ref:"
"`Протоколы подпроцессов <asyncio-subprocess-protocols>`."

#: ../../library/asyncio-subprocess.rst:126
msgid "Constants"
msgstr "Константы"

#: ../../library/asyncio-subprocess.rst:131
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr "Может передаваться в параметры *stdin*, *stdout* или *stderr*."

#: ../../library/asyncio-subprocess.rst:133
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin <asyncio."
"subprocess.Process.stdin>` attribute will point to a :class:`~asyncio."
"StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-subprocess.rst:137
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the :attr:`Process."
"stdout <asyncio.subprocess.Process.stdout>` and :attr:`Process.stderr "
"<asyncio.subprocess.Process.stderr>` attributes will point to :class:"
"`~asyncio.StreamReader` instances."
msgstr ""

#: ../../library/asyncio-subprocess.rst:145
msgid ""
"Special value that can be used as the *stderr* argument and indicates that "
"standard error should be redirected into standard output."
msgstr ""
"Специальное значение, которое можно использовать в качестве аргумента "
"*stderr* и указывает, что стандартная ошибка должна быть перенаправлена ​​в "
"стандартный вывод."

#: ../../library/asyncio-subprocess.rst:151
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to process creation functions.  It indicates that the special file :data:`os."
"devnull` will be used for the corresponding subprocess stream."
msgstr ""
"Специальное значение, которое можно использовать в качестве аргумента "
"*stdin*, *stdout* или *stderr* для функций создания процессов. Это указывает "
"на то, что специальный файл :data:`os.devnull` будет использоваться для "
"соответствующего потока подпроцесса."

#: ../../library/asyncio-subprocess.rst:157
msgid "Interacting with Subprocesses"
msgstr "Взаимодействие с подпроцессами"

#: ../../library/asyncio-subprocess.rst:159
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching for "
"their completion."
msgstr ""
"Обе функции :func:`create_subprocess_exec` и :func:`create_subprocess_shell` "
"возвращают экземпляры класса *Process*. *Процесс* — это высокоуровневая "
"оболочка, позволяющая взаимодействовать с подпроцессами и следить за их "
"завершением."

#: ../../library/asyncio-subprocess.rst:167
msgid ""
"An object that wraps OS processes created by the :func:`~asyncio."
"create_subprocess_exec` and :func:`~asyncio.create_subprocess_shell` "
"functions."
msgstr ""

#: ../../library/asyncio-subprocess.rst:171
msgid ""
"This class is designed to have a similar API to the :class:`subprocess."
"Popen` class, but there are some notable differences:"
msgstr ""
"Этот класс спроектирован так, чтобы иметь API, аналогичный классу :class:"
"`subprocess.Popen`, но есть некоторые заметные различия:"

#: ../../library/asyncio-subprocess.rst:175
msgid ""
"unlike Popen, Process instances do not have an equivalent to the :meth:"
"`~subprocess.Popen.poll` method;"
msgstr ""
"в отличие от Popen, экземпляры Process не имеют эквивалента метода :meth:"
"`~subprocess.Popen.poll`;"

#: ../../library/asyncio-subprocess.rst:178
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and :meth:`~asyncio."
"subprocess.Process.wait` methods don't have a *timeout* parameter: use the :"
"func:`~asyncio.wait_for` function;"
msgstr ""
"методы :meth:`~asyncio.subprocess.Process.communicate` и :meth:`~asyncio."
"subprocess.Process.wait` не имеют параметра *timeout*: используйте :func:"
"`~asyncio.wait_for` функция;"

#: ../../library/asyncio-subprocess.rst:182
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented as "
"a blocking busy loop;"
msgstr ""
"метод :meth:`Process.wait() <asyncio.subprocess.Process.wait>` является "
"асинхронным, тогда как метод :meth:`subprocess.Popen.wait` реализован как "
"блокирующий цикл занятости;"

#: ../../library/asyncio-subprocess.rst:186
msgid "the *universal_newlines* parameter is not supported."
msgstr "параметр *universal_newlines* не поддерживается."

#: ../../library/asyncio-subprocess.rst:188
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "Этот класс :ref:`не потокобезопасен <asyncio-multithreading>`."

#: ../../library/asyncio-subprocess.rst:190
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
"См. также раздел :ref:`Подпроцесс и потоки <asyncio-subprocess-threads>`."

#: ../../library/asyncio-subprocess.rst:196
msgid "Wait for the child process to terminate."
msgstr "Подождите, пока дочерний процесс завершится."

#: ../../library/asyncio-subprocess.rst:198
msgid "Set and return the :attr:`returncode` attribute."
msgstr "Установите и верните атрибут :attr:`returncode`."

#: ../../library/asyncio-subprocess.rst:202
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and "
"the child process generates so much output that it blocks waiting for the OS "
"pipe buffer to accept more data. Use the :meth:`communicate` method when "
"using pipes to avoid this condition."
msgstr ""
"Этот метод может заблокироваться при использовании stdout=PIPE или "
"stderr=PIPE, а дочерний процесс генерирует так много выходных данных, что "
"блокируется ожидание, пока буфер канала ОС примет больше данных. Используйте "
"метод :meth:`communicate` при использовании каналов, чтобы избежать этой "
"ситуации."

#: ../../library/asyncio-subprocess.rst:211
msgid "Interact with process:"
msgstr "Взаимодействуйте с процессом:"

#: ../../library/asyncio-subprocess.rst:213
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr "отправить данные на *stdin* (если *input* не ``None``);"

#: ../../library/asyncio-subprocess.rst:214
msgid "closes *stdin*;"
msgstr "закрывает *stdin*;"

#: ../../library/asyncio-subprocess.rst:215
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr "читать данные из *stdout* и *stderr*, пока не будет достигнут EOF;"

#: ../../library/asyncio-subprocess.rst:216
msgid "wait for process to terminate."
msgstr "дождитесь завершения процесса."

#: ../../library/asyncio-subprocess.rst:218
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that will "
"be sent to the child process."
msgstr ""
"Необязательный аргумент *input* — это данные (объект:class:`bytes`), которые "
"будут отправлены дочернему процессу."

#: ../../library/asyncio-subprocess.rst:221
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr "Вернуть кортеж ``(stdout_data, stderr_data)``."

#: ../../library/asyncio-subprocess.rst:223
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is "
"raised when writing *input* into *stdin*, the exception is ignored.  This "
"condition occurs when the process exits before all data are written into "
"*stdin*."
msgstr ""
"Если при записи *input* в *stdin* возникает исключение :exc:"
"`BrokenPipeError` или :exc:`ConnectionResetError`, это исключение "
"игнорируется. Это условие возникает, когда процесс завершается до того, как "
"все данные будут записаны в *stdin*."

#: ../../library/asyncio-subprocess.rst:228
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs to "
"be created with ``stdin=PIPE``.  Similarly, to get anything other than "
"``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""
"Если необходимо отправить данные в процесс *stdin*, процесс необходимо "
"создать с помощью ``stdin=PIPE``. Аналогично, чтобы получить в кортеже "
"результатов что-либо, кроме None, процесс должен быть создан с аргументами "
"stdout=PIPE и/или stderr=PIPE."

#: ../../library/asyncio-subprocess.rst:234
msgid ""
"Note, that the data read is buffered in memory, so do not use this method if "
"the data size is large or unlimited."
msgstr ""
"Обратите внимание, что считанные данные буферизуются в памяти, поэтому не "
"используйте этот метод, если размер данных большой или неограниченный."

#: ../../library/asyncio-subprocess.rst:239
msgid "*stdin* gets closed when ``input=None`` too."
msgstr ""

#: ../../library/asyncio-subprocess.rst:243
msgid "Sends the signal *signal* to the child process."
msgstr "Отправляет сигнал *signal* дочернему процессу."

#: ../../library/asyncio-subprocess.rst:247
msgid ""
"On Windows, :py:const:`~signal.SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes ``CREATE_NEW_PROCESS_GROUP``."
msgstr ""
"В Windows :py:const:`~signal.SIGTERM` является псевдонимом для :meth:"
"`terminate`. ``CTRL_C_EVENT`` и ``CTRL_BREAK_EVENT`` могут быть отправлены "
"процессам, запущенным с параметром *creationflags*, который включает "
"``CREATE_NEW_PROCESS_GROUP``."

#: ../../library/asyncio-subprocess.rst:254
msgid "Stop the child process."
msgstr "Остановите дочерний процесс."

#: ../../library/asyncio-subprocess.rst:256
msgid ""
"On POSIX systems this method sends :py:const:`~signal.SIGTERM` to the child "
"process."
msgstr ""
"В системах POSIX этот метод отправляет :py:const:`~signal.SIGTERM` дочернему "
"процессу."

#: ../../library/asyncio-subprocess.rst:259
msgid ""
"On Windows the Win32 API function :c:func:`!TerminateProcess` is called to "
"stop the child process."
msgstr ""
"В Windows функция Win32 API :c:func:`!TerminateProcess` вызывается для "
"остановки дочернего процесса."

#: ../../library/asyncio-subprocess.rst:264
msgid "Kill the child process."
msgstr "Убейте дочерний процесс."

#: ../../library/asyncio-subprocess.rst:266
msgid ""
"On POSIX systems this method sends :py:data:`~signal.SIGKILL` to the child "
"process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:269
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr "В Windows этот метод является псевдонимом :meth:`terminate`."

#: ../../library/asyncio-subprocess.rst:273
msgid ""
"Standard input stream (:class:`~asyncio.StreamWriter`) or ``None`` if the "
"process was created with ``stdin=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:278
msgid ""
"Standard output stream (:class:`~asyncio.StreamReader`) or ``None`` if the "
"process was created with ``stdout=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:283
msgid ""
"Standard error stream (:class:`~asyncio.StreamReader`) or ``None`` if the "
"process was created with ``stderr=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:288
msgid ""
"Use the :meth:`communicate` method rather than :attr:`process.stdin.write() "
"<stdin>`, :attr:`await process.stdout.read() <stdout>` or :attr:`await "
"process.stderr.read() <stderr>`. This avoids deadlocks due to streams "
"pausing reading or writing and blocking the child process."
msgstr ""
"Используйте метод :meth:`communicate` вместо :attr:`process.stdin.write() "
"<stdin>`, :attr:`awaitprocess.stdout.read() <stdout>` или :attr:`await "
"процесса .stderr.read() <stderr>`. Это позволяет избежать взаимоблокировок "
"из-за того, что потоки приостанавливают чтение или запись и блокируют "
"дочерний процесс."

#: ../../library/asyncio-subprocess.rst:297
msgid "Process identification number (PID)."
msgstr "Идентификатор процесса (PID)."

#: ../../library/asyncio-subprocess.rst:299
msgid ""
"Note that for processes created by the :func:`~asyncio."
"create_subprocess_shell` function, this attribute is the PID of the spawned "
"shell."
msgstr ""

#: ../../library/asyncio-subprocess.rst:304
msgid "Return code of the process when it exits."
msgstr "Код возврата процесса при его выходе."

#: ../../library/asyncio-subprocess.rst:306
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr "Значение None указывает, что процесс еще не завершен."

#: ../../library/asyncio-subprocess.rst:308
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr ""
"Отрицательное значение ``-N`` указывает, что дочерний процесс был завершен "
"сигналом ``N`` (только POSIX)."

#: ../../library/asyncio-subprocess.rst:315
msgid "Subprocess and Threads"
msgstr "Подпроцессы и потоки"

#: ../../library/asyncio-subprocess.rst:317
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads by default."
msgstr ""
"Стандартный цикл событий asyncio по умолчанию поддерживает запуск "
"подпроцессов из разных потоков."

#: ../../library/asyncio-subprocess.rst:320
msgid ""
"On Windows subprocesses are provided by :class:`ProactorEventLoop` only "
"(default), :class:`SelectorEventLoop` has no subprocess support."
msgstr ""
"В Windows подпроцессы предоставляются только :class:`ProactorEventLoop` (по "
"умолчанию), :class:`SelectorEventLoop` не имеет поддержки подпроцессов."

#: ../../library/asyncio-subprocess.rst:323
msgid ""
"On UNIX *child watchers* are used for subprocess finish waiting, see :ref:"
"`asyncio-watchers` for more info."
msgstr ""
"В UNIX *дочерние наблюдатели* используются для ожидания завершения "
"подпроцесса, дополнительную информацию см. в разделе :ref:`asyncio-watchers`."

#: ../../library/asyncio-subprocess.rst:329
msgid ""
"UNIX switched to use :class:`ThreadedChildWatcher` for spawning subprocesses "
"from different threads without any limitation."
msgstr ""
"UNIX перешел на использование :class:`ThreadedChildWatcher` для создания "
"подпроцессов из разных потоков без каких-либо ограничений."

#: ../../library/asyncio-subprocess.rst:332
msgid ""
"Spawning a subprocess with *inactive* current child watcher raises :exc:"
"`RuntimeError`."
msgstr ""
"Порождение подпроцесса с *неактивным* текущим дочерним наблюдателем "
"вызывает :exc:`RuntimeError`."

#: ../../library/asyncio-subprocess.rst:335
msgid ""
"Note that alternative event loop implementations might have own limitations; "
"please refer to their documentation."
msgstr ""
"Обратите внимание, что альтернативные реализации цикла событий могут иметь "
"свои ограничения; пожалуйста, обратитесь к их документации."

#: ../../library/asyncio-subprocess.rst:340
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ""
"Раздел :ref:`Параллелизм и многопоточность в asyncio <asyncio-"
"multithreading>`."

#: ../../library/asyncio-subprocess.rst:345
msgid "Examples"
msgstr "Примеры"

#: ../../library/asyncio-subprocess.rst:347
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to control a "
"subprocess and the :class:`StreamReader` class to read from its standard "
"output."
msgstr ""
"Пример использования класса :class:`~asyncio.subprocess.Process` для "
"управления подпроцессом и класса :class:`StreamReader` для чтения из его "
"стандартного вывода."

#: ../../library/asyncio-subprocess.rst:353
msgid ""
"The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr "Подпроцесс создается функцией :func:`create_subprocess_exec`::"

#: ../../library/asyncio-subprocess.rst:356
msgid ""
"import asyncio\n"
"import sys\n"
"\n"
"async def get_date():\n"
"    code = 'import datetime; print(datetime.datetime.now())'\n"
"\n"
"    # Create the subprocess; redirect the standard output\n"
"    # into a pipe.\n"
"    proc = await asyncio.create_subprocess_exec(\n"
"        sys.executable, '-c', code,\n"
"        stdout=asyncio.subprocess.PIPE)\n"
"\n"
"    # Read one line of output.\n"
"    data = await proc.stdout.readline()\n"
"    line = data.decode('ascii').rstrip()\n"
"\n"
"    # Wait for the subprocess exit.\n"
"    await proc.wait()\n"
"    return line\n"
"\n"
"date = asyncio.run(get_date())\n"
"print(f\"Current date: {date}\")"
msgstr ""
"import asyncio\n"
"import sys\n"
"\n"
"async def get_date():\n"
"    code = 'import datetime; print(datetime.datetime.now())'\n"
"\n"
"    # Create the subprocess; redirect the standard output\n"
"    # into a pipe.\n"
"    proc = await asyncio.create_subprocess_exec(\n"
"        sys.executable, '-c', code,\n"
"        stdout=asyncio.subprocess.PIPE)\n"
"\n"
"    # Read one line of output.\n"
"    data = await proc.stdout.readline()\n"
"    line = data.decode('ascii').rstrip()\n"
"\n"
"    # Wait for the subprocess exit.\n"
"    await proc.wait()\n"
"    return line\n"
"\n"
"date = asyncio.run(get_date())\n"
"print(f\"Current date: {date}\")"

#: ../../library/asyncio-subprocess.rst:380
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` written "
"using low-level APIs."
msgstr ""
"См. также тот же пример <asyncio_example_subprocess_proto>, написанный с "
"использованием низкоуровневых API."
