# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/netrc.rst:3
msgid ":mod:`netrc` --- netrc file processing"
msgstr ""

#: ../../library/netrc.rst:11
msgid "**Source code:** :source:`Lib/netrc.py`"
msgstr "**Исходный код:** :source:`Lib/netrc.py`"

#: ../../library/netrc.rst:15
msgid ""
"The :class:`~netrc.netrc` class parses and encapsulates the netrc file "
"format used by the Unix :program:`ftp` program and other FTP clients."
msgstr ""
"Класс :class:`~netrc.netrc` анализирует и инкапсулирует формат файла netrc, "
"используемый программой Unix :program:`ftp` и другими FTP-клиентами."

#: ../../library/netrc.rst:21
msgid ""
"A :class:`~netrc.netrc` instance or subclass instance encapsulates data "
"from  a netrc file.  The initialization argument, if present, specifies the "
"file to parse.  If no argument is given, the file :file:`.netrc` in the "
"user's home directory -- as determined by :func:`os.path.expanduser` -- will "
"be read.  Otherwise, a :exc:`FileNotFoundError` exception will be raised. "
"Parse errors will raise :exc:`NetrcParseError` with diagnostic information "
"including the file name, line number, and terminating token. If no argument "
"is specified on a POSIX system, the presence of passwords in the :file:`."
"netrc` file will raise a :exc:`NetrcParseError` if the file ownership or "
"permissions are insecure (owned by a user other than the user running the "
"process, or accessible for read or write by any other user). This implements "
"security behavior equivalent to that of ftp and other programs that use :"
"file:`.netrc`."
msgstr ""
"Экземпляр :class:`~netrc.netrc` или экземпляр подкласса инкапсулирует данные "
"из файла netrc. Аргумент инициализации, если он присутствует, указывает файл "
"для анализа. Если аргумент не указан, будет прочитан файл :file:`.netrc` в "
"домашнем каталоге пользователя, как определено :func:`os.path.expanduser`. В "
"противном случае будет выдано исключение :exc:`FileNotFoundError`. Ошибки "
"анализа вызывают ошибку :exc:`NetrcParseError` с диагностической "
"информацией, включая имя файла, номер строки и завершающий токен. Если в "
"системе POSIX аргумент не указан, наличие паролей в файле :file:`.netrc` "
"вызовет ошибку :exc:`NetrcParseError`, если владение файлом или разрешения "
"небезопасны (принадлежат пользователю, отличному от пользователя). "
"запущенный процесс или доступный для чтения или записи любому другому "
"пользователю). Это реализует поведение безопасности, эквивалентное поведению "
"ftp и других программ, использующих :file:`.netrc`."

#: ../../library/netrc.rst:35
msgid "Added the POSIX permission check."
msgstr "Добавлена ​​проверка разрешений POSIX."

#: ../../library/netrc.rst:37
msgid ""
":func:`os.path.expanduser` is used to find the location of the :file:`."
"netrc` file when *file* is not passed as argument."
msgstr ""
":func:`os.path.expanduser` используется для поиска местоположения файла :"
"file:`.netrc`, когда *file* не передается в качестве аргумента."

#: ../../library/netrc.rst:41
msgid ""
":class:`netrc` try UTF-8 encoding before using locale specific encoding. The "
"entry in the netrc file no longer needs to contain all tokens.  The missing "
"tokens' value default to an empty string.  All the tokens and their values "
"now can contain arbitrary characters, like whitespace and non-ASCII "
"characters. If the login name is anonymous, it won't trigger the security "
"check."
msgstr ""
":class:`netrc` попробуйте кодировку UTF-8, прежде чем использовать "
"кодировку, специфичную для локали. Запись в файле netrc больше не "
"обязательно должна содержать все токены. Значением отсутствующих токенов по "
"умолчанию является пустая строка. Все токены и их значения теперь могут "
"содержать произвольные символы, например пробелы и символы, отличные от "
"ASCII. Если имя входа анонимно, оно не вызовет проверку безопасности."

#: ../../library/netrc.rst:52
msgid ""
"Exception raised by the :class:`~netrc.netrc` class when syntactical errors "
"are encountered in source text.  Instances of this exception provide three "
"interesting attributes:"
msgstr ""
"Исключение, вызываемое классом :class:`~netrc.netrc`, когда в исходном "
"тексте встречаются синтаксические ошибки. Экземпляры этого исключения "
"обладают тремя интересными атрибутами:"

#: ../../library/netrc.rst:58
msgid "Textual explanation of the error."
msgstr "Текстовое объяснение ошибки."

#: ../../library/netrc.rst:62
msgid "The name of the source file."
msgstr "Имя исходного файла."

#: ../../library/netrc.rst:66
msgid "The line number on which the error was found."
msgstr "Номер строки, в которой была обнаружена ошибка."

#: ../../library/netrc.rst:72
msgid "netrc Objects"
msgstr "netrc Объекты"

#: ../../library/netrc.rst:74
msgid "A :class:`~netrc.netrc` instance has the following methods:"
msgstr "Экземпляр :class:`~netrc.netrc` имеет следующие методы:"

#: ../../library/netrc.rst:79
msgid ""
"Return a 3-tuple ``(login, account, password)`` of authenticators for "
"*host*. If the netrc file did not contain an entry for the given host, "
"return the tuple associated with the 'default' entry.  If neither matching "
"host nor default entry is available, return ``None``."
msgstr ""
"Возвращает три кортежа (логин, учетная запись, пароль) аутентификаторов для "
"*host*. Если файл netrc не содержит записи для данного хоста, верните "
"кортеж, связанный с записью «по умолчанию». Если ни соответствующий хост, ни "
"запись по умолчанию недоступны, верните None."

#: ../../library/netrc.rst:87
msgid ""
"Dump the class data as a string in the format of a netrc file. (This "
"discards comments and may reorder the entries.)"
msgstr ""
"Дамп данных класса в виде строки в формате файла netrc. (При этом "
"комментарии будут удалены, а порядок записей может быть изменен.)"

#: ../../library/netrc.rst:90
msgid "Instances of :class:`~netrc.netrc` have public instance variables:"
msgstr ""
"Экземпляры :class:`~netrc.netrc` имеют общедоступные переменные экземпляра:"

#: ../../library/netrc.rst:95
msgid ""
"Dictionary mapping host names to ``(login, account, password)`` tuples.  The "
"'default' entry, if any, is represented as a pseudo-host by that name."
msgstr ""
"Словарь сопоставляет имена хостов с кортежами ``(логин, учетная запись, "
"пароль)``. Запись «по умолчанию», если таковая имеется, представлена ​​как "
"псевдохост с этим именем."

#: ../../library/netrc.rst:101
msgid "Dictionary mapping macro names to string lists."
msgstr "Словарь сопоставляет имена макросов со списками строк."
