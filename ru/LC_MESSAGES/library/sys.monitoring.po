# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Илья Панфилов, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 14:22+0000\n"
"PO-Revision-Date: 2023-09-08 14:16+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/sys.monitoring.rst:2
msgid ":mod:`!sys.monitoring` --- Execution event monitoring"
msgstr ":mod:`!sys.monitoring` --- Мониторинг событий выполнения"

#: ../../library/sys.monitoring.rst:13
msgid ""
":mod:`sys.monitoring` is a namespace within the :mod:`sys` module, not an "
"independent module, so there is no need to ``import sys.monitoring``, simply "
"``import sys`` and then use ``sys.monitoring``."
msgstr ""
":mod:`sys.monitoring` — это пространство имен внутри модуля :mod:`sys`, а не "
"независимый модуль, поэтому нет необходимости ``импортировать sys."
"monitoring``, просто ``импортируйте sys``, а затем используйте ``sys."
"monitoring``."

#: ../../library/sys.monitoring.rst:19
msgid ""
"This namespace provides access to the functions and constants necessary to "
"activate and control event monitoring."
msgstr ""
"Это пространство имен обеспечивает доступ к функциям и константам, "
"необходимым для активации и управления мониторингом событий."

#: ../../library/sys.monitoring.rst:22
msgid ""
"As programs execute, events occur that might be of interest to tools that "
"monitor execution. The :mod:`sys.monitoring` namespace provides means to "
"receive callbacks when events of interest occur."
msgstr ""
"Во время выполнения программ происходят события, которые могут представлять "
"интерес для инструментов, отслеживающих выполнение. Пространство имен :mod:"
"`sys.monitoring` предоставляет средства для получения обратных вызовов при "
"возникновении интересующих событий."

#: ../../library/sys.monitoring.rst:26
msgid "The monitoring API consists of three components:"
msgstr "API мониторинга состоит из трех компонентов:"

#: ../../library/sys.monitoring.rst:28
msgid "`Tool identifiers`_"
msgstr "`Идентификаторы инструментов`_"

#: ../../library/sys.monitoring.rst:29
msgid "`Events`_"
msgstr "`Events`_"

#: ../../library/sys.monitoring.rst:30
msgid ":ref:`Callbacks <callbacks>`"
msgstr ":ref:`Callbacks <callbacks>`"

#: ../../library/sys.monitoring.rst:33
msgid "Tool identifiers"
msgstr "Идентификаторы инструментов"

#: ../../library/sys.monitoring.rst:35
msgid ""
"A tool identifier is an integer and the associated name. Tool identifiers "
"are used to discourage tools from interfering with each other and to allow "
"multiple tools to operate at the same time. Currently tools are completely "
"independent and cannot be used to monitor each other. This restriction may "
"be lifted in the future."
msgstr ""
"Идентификатор инструмента представляет собой целое число и связанное с ним "
"имя. Идентификаторы инструментов используются для предотвращения "
"взаимодействия инструментов друг с другом и для обеспечения одновременной "
"работы нескольких инструментов. На данный момент инструменты полностью "
"независимы и не могут использоваться для мониторинга друг друга. В будущем "
"это ограничение может быть снято."

#: ../../library/sys.monitoring.rst:41
msgid ""
"Before registering or activating events, a tool should choose an identifier. "
"Identifiers are integers in the range 0 to 5 inclusive."
msgstr ""
"Прежде чем регистрировать или активировать события, инструмент должен "
"выбрать идентификатор. Идентификаторы представляют собой целые числа в "
"диапазоне от 0 до 5 включительно."

#: ../../library/sys.monitoring.rst:45
msgid "Registering and using tools"
msgstr "Регистрация и использование инструментов"

#: ../../library/sys.monitoring.rst:49
msgid ""
"Must be called before *tool_id* can be used. *tool_id* must be in the range "
"0 to 5 inclusive. Raises a :exc:`ValueError` if *tool_id* is in use."
msgstr ""
"Должен быть вызван перед использованием *tool_id*. *tool_id* должен "
"находиться в диапазоне от 0 до 5 включительно. Вызывает :exc:`ValueError`, "
"если *tool_id* используется."

#: ../../library/sys.monitoring.rst:55
msgid "Unregister all events and callback functions associated with *tool_id*."
msgstr ""

#: ../../library/sys.monitoring.rst:59
msgid ""
"Should be called once a tool no longer requires *tool_id*. Will call :func:"
"`clear_tool_id` before releasing *tool_id*."
msgstr ""

#: ../../library/sys.monitoring.rst:64
msgid ""
"Returns the name of the tool if *tool_id* is in use, otherwise it returns "
"``None``. *tool_id* must be in the range 0 to 5 inclusive."
msgstr ""
"Возвращает имя инструмента, если *tool_id* используется, в противном случае "
"возвращается ``None``. *tool_id* должен находиться в диапазоне от 0 до 5 "
"включительно."

#: ../../library/sys.monitoring.rst:68
msgid ""
"All IDs are treated the same by the VM with regard to events, but the "
"following IDs are pre-defined to make co-operation of tools easier::"
msgstr ""
"Все идентификаторы обрабатываются виртуальной машиной одинаково в отношении "
"событий, но следующие идентификаторы предопределены для упрощения "
"взаимодействия инструментов:"

#: ../../library/sys.monitoring.rst:71
msgid ""
"sys.monitoring.DEBUGGER_ID = 0\n"
"sys.monitoring.COVERAGE_ID = 1\n"
"sys.monitoring.PROFILER_ID = 2\n"
"sys.monitoring.OPTIMIZER_ID = 5"
msgstr ""
"sys.monitoring.DEBUGGER_ID = 0\n"
"sys.monitoring.COVERAGE_ID = 1\n"
"sys.monitoring.PROFILER_ID = 2\n"
"sys.monitoring.OPTIMIZER_ID = 5"

#: ../../library/sys.monitoring.rst:78
msgid "Events"
msgstr "События"

#: ../../library/sys.monitoring.rst:80
msgid "The following events are supported:"
msgstr "Поддерживаются следующие события:"

#: ../../library/sys.monitoring.rst:84
msgid "A conditional branch goes left."
msgstr ""

#: ../../library/sys.monitoring.rst:86
msgid ""
"It is up to the tool to determine how to present \"left\" and \"right\" "
"branches. There is no guarantee which branch is \"left\" and which is "
"\"right\", except that it will be consistent for the duration of the program."
msgstr ""

#: ../../library/sys.monitoring.rst:92
msgid "A conditional branch goes right."
msgstr ""

#: ../../library/sys.monitoring.rst:96
msgid "A call in Python code (event occurs before the call)."
msgstr "Вызов в коде Python (событие происходит перед вызовом)."

#: ../../library/sys.monitoring.rst:100
msgid ""
"An exception raised from any callable, except for Python functions (event "
"occurs after the exit)."
msgstr ""
"Исключение, возникающее из любого вызываемого объекта, кроме функций Python "
"(событие возникает после выхода)."

#: ../../library/sys.monitoring.rst:104
msgid ""
"Return from any callable, except for Python functions (event occurs after "
"the return)."
msgstr ""
"Возврат из любого вызываемого объекта, кроме функций Python (событие "
"происходит после возврата)."

#: ../../library/sys.monitoring.rst:108
msgid "An exception is handled."
msgstr "Исключение обрабатывается."

#: ../../library/sys.monitoring.rst:112
msgid "A VM instruction is about to be executed."
msgstr "Инструкция VM скоро будет выполнена."

#: ../../library/sys.monitoring.rst:116
msgid "An unconditional jump in the control flow graph is made."
msgstr "Производится безусловный переход в графе потока управления."

#: ../../library/sys.monitoring.rst:120
msgid ""
"An instruction is about to be executed that has a different line number from "
"the preceding instruction."
msgstr ""
"Скоро будет выполнена инструкция, номер строки которой отличается от номера "
"предыдущей инструкции."

#: ../../library/sys.monitoring.rst:124
msgid ""
"Resumption of a Python function (for generator and coroutine functions), "
"except for ``throw()`` calls."
msgstr ""
"Возобновление работы функции Python (для функций генератора и сопрограммы), "
"за исключением вызовов ``throw()``."

#: ../../library/sys.monitoring.rst:128
msgid ""
"Return from a Python function (occurs immediately before the return, the "
"callee's frame will be on the stack)."
msgstr ""
"Возврат из функции Python (происходит непосредственно перед возвратом, кадр "
"вызываемого объекта будет находиться в стеке)."

#: ../../library/sys.monitoring.rst:132
msgid ""
"Start of a Python function (occurs immediately after the call, the callee's "
"frame will be on the stack)"
msgstr ""
"Запуск функции Python (происходит сразу после вызова, кадр вызываемого "
"объекта будет в стеке)"

#: ../../library/sys.monitoring.rst:136
msgid "A Python function is resumed by a ``throw()`` call."
msgstr "Функция Python возобновляется вызовом throw()."

#: ../../library/sys.monitoring.rst:140
msgid ""
"Exit from a Python function during exception unwinding. This includes "
"exceptions raised directly within the function and that are allowed to "
"continue to propagate."
msgstr ""

#: ../../library/sys.monitoring.rst:145
msgid ""
"Yield from a Python function (occurs immediately before the yield, the "
"callee's frame will be on the stack)."
msgstr ""
"Выход из функции Python (происходит непосредственно перед выходом, кадр "
"вызываемого объекта будет в стеке)."

#: ../../library/sys.monitoring.rst:149
msgid ""
"An exception is raised, except those that cause a :monitoring-event:"
"`STOP_ITERATION` event."
msgstr ""
"Вызывается исключение, за исключением тех, которые вызывают событие :"
"monitoring-event:`STOP_ITERATION`."

#: ../../library/sys.monitoring.rst:153
msgid ""
"An exception is re-raised, for example at the end of a :keyword:`finally` "
"block."
msgstr ""
"Исключение возникает повторно, например, в конце блока :keyword:`finally`."

#: ../../library/sys.monitoring.rst:157
msgid ""
"An artificial :exc:`StopIteration` is raised; see `the STOP_ITERATION "
"event`_."
msgstr ""
"Вызывается искусственный :exc:`StopIteration`; см. `событие STOP_ITERATION`_."

#: ../../library/sys.monitoring.rst:160
msgid "More events may be added in the future."
msgstr "В будущем могут быть добавлены и другие мероприятия."

#: ../../library/sys.monitoring.rst:162
msgid ""
"These events are attributes of the :mod:`!sys.monitoring.events` namespace. "
"Each event is represented as a power-of-2 integer constant. To define a set "
"of events, simply bitwise OR the individual events together. For example, to "
"specify both :monitoring-event:`PY_RETURN` and :monitoring-event:`PY_START` "
"events, use the expression ``PY_RETURN | PY_START``."
msgstr ""

#: ../../library/sys.monitoring.rst:170
msgid "An alias for ``0`` so users can do explicit comparisons like::"
msgstr ""
"Псевдоним для ``0``, чтобы пользователи могли выполнять явные сравнения, "
"например:"

#: ../../library/sys.monitoring.rst:172
msgid ""
"if get_events(DEBUGGER_ID) == NO_EVENTS:\n"
"    ..."
msgstr ""
"if get_events(DEBUGGER_ID) == NO_EVENTS:\n"
"    ..."

#: ../../library/sys.monitoring.rst:175
msgid "Setting this event deactivates all events."
msgstr ""

#: ../../library/sys.monitoring.rst:180
msgid "Local events"
msgstr "Местные события"

#: ../../library/sys.monitoring.rst:182
msgid ""
"Local events are associated with normal execution of the program and happen "
"at clearly defined locations. All local events can be disabled. The local "
"events are:"
msgstr ""
"Локальные события связаны с обычным выполнением программы и происходят в "
"четко определенных местах. Все локальные события можно отключить. Местные "
"мероприятия:"

#: ../../library/sys.monitoring.rst:186
msgid ":monitoring-event:`PY_START`"
msgstr ":monitoring-event:`PY_START`"

#: ../../library/sys.monitoring.rst:187
msgid ":monitoring-event:`PY_RESUME`"
msgstr ":monitoring-event:`PY_RESUME`"

#: ../../library/sys.monitoring.rst:188
msgid ":monitoring-event:`PY_RETURN`"
msgstr ":monitoring-event:`PY_RETURN`"

#: ../../library/sys.monitoring.rst:189
msgid ":monitoring-event:`PY_YIELD`"
msgstr ":monitoring-event:`PY_YIELD`"

#: ../../library/sys.monitoring.rst:190
msgid ":monitoring-event:`CALL`"
msgstr ":monitoring-event:`CALL`"

#: ../../library/sys.monitoring.rst:191
msgid ":monitoring-event:`LINE`"
msgstr ":monitoring-event:`LINE`"

#: ../../library/sys.monitoring.rst:192
msgid ":monitoring-event:`INSTRUCTION`"
msgstr ":monitoring-event:`INSTRUCTION`"

#: ../../library/sys.monitoring.rst:193
msgid ":monitoring-event:`JUMP`"
msgstr ":monitoring-event:`JUMP`"

#: ../../library/sys.monitoring.rst:194
msgid ":monitoring-event:`BRANCH_LEFT`"
msgstr ""

#: ../../library/sys.monitoring.rst:195
msgid ":monitoring-event:`BRANCH_RIGHT`"
msgstr ""

#: ../../library/sys.monitoring.rst:196
msgid ":monitoring-event:`STOP_ITERATION`"
msgstr ":monitoring-event:`STOP_ITERATION`"

#: ../../library/sys.monitoring.rst:199
msgid "Deprecated event"
msgstr ""

#: ../../library/sys.monitoring.rst:201
msgid "``BRANCH``"
msgstr ""

#: ../../library/sys.monitoring.rst:203
msgid ""
"The ``BRANCH`` event is deprecated in 3.14. Using :monitoring-event:"
"`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events will give much "
"better performance as they can be disabled independently."
msgstr ""

#: ../../library/sys.monitoring.rst:209
msgid "Ancillary events"
msgstr "Вспомогательные мероприятия"

#: ../../library/sys.monitoring.rst:211
msgid ""
"Ancillary events can be monitored like other events, but are controlled by "
"another event:"
msgstr ""
"Вспомогательные события можно отслеживать, как и другие события, но они "
"контролируются другим событием:"

#: ../../library/sys.monitoring.rst:214
msgid ":monitoring-event:`C_RAISE`"
msgstr ":monitoring-event:`C_RAISE`"

#: ../../library/sys.monitoring.rst:215
msgid ":monitoring-event:`C_RETURN`"
msgstr ":monitoring-event:`C_RETURN`"

#: ../../library/sys.monitoring.rst:217
msgid ""
"The :monitoring-event:`C_RETURN` and :monitoring-event:`C_RAISE` events are "
"controlled by the :monitoring-event:`CALL` event. :monitoring-event:"
"`C_RETURN` and :monitoring-event:`C_RAISE` events will only be seen if the "
"corresponding :monitoring-event:`CALL` event is being monitored."
msgstr ""
"События :monitoring-event:`C_RETURN` и :monitoring-event:`C_RAISE` "
"управляются событием :monitoring-event:`CALL`. События :monitoring-event:"
"`C_RETURN` и :monitoring-event:`C_RAISE` будут видны только в том случае, "
"если отслеживается соответствующее событие :monitoring-event:`CALL`."

#: ../../library/sys.monitoring.rst:223
msgid "Other events"
msgstr "Другие события"

#: ../../library/sys.monitoring.rst:225
msgid ""
"Other events are not necessarily tied to a specific location in the program "
"and cannot be individually disabled."
msgstr ""
"Другие события не обязательно привязаны к определенному месту в программе и "
"не могут быть отключены индивидуально."

#: ../../library/sys.monitoring.rst:228
msgid "The other events that can be monitored are:"
msgstr "Другие события, которые можно отслеживать:"

#: ../../library/sys.monitoring.rst:230
msgid ":monitoring-event:`PY_THROW`"
msgstr ":monitoring-event:`PY_THROW`"

#: ../../library/sys.monitoring.rst:231
msgid ":monitoring-event:`PY_UNWIND`"
msgstr ":monitoring-event:`PY_UNWIND`"

#: ../../library/sys.monitoring.rst:232
msgid ":monitoring-event:`RAISE`"
msgstr ":monitoring-event:`RAISE`"

#: ../../library/sys.monitoring.rst:233
msgid ":monitoring-event:`EXCEPTION_HANDLED`"
msgstr ":monitoring-event:`EXCEPTION_HANDLED`"

#: ../../library/sys.monitoring.rst:237
msgid "The STOP_ITERATION event"
msgstr "Событие STOP_ITERATION"

#: ../../library/sys.monitoring.rst:239
msgid ""
":pep:`PEP 380 <380#use-of-stopiteration-to-return-values>` specifies that a :"
"exc:`StopIteration` exception is raised when returning a value from a "
"generator or coroutine. However, this is a very inefficient way to return a "
"value, so some Python implementations, notably CPython 3.12+, do not raise "
"an exception unless it would be visible to other code."
msgstr ""
":pep:`PEP 380 <380#use-of-stopiteration-to-return-values>` указывает, что "
"исключение :exc:`StopIteration` возникает при возврате значения из "
"генератора или сопрограммы. Однако это очень неэффективный способ вернуть "
"значение, поэтому некоторые реализации Python, особенно CPython 3.12+, не "
"вызывают исключение, если оно не будет видно другому коду."

#: ../../library/sys.monitoring.rst:245
msgid ""
"To allow tools to monitor for real exceptions without slowing down "
"generators and coroutines, the :monitoring-event:`STOP_ITERATION` event is "
"provided. :monitoring-event:`STOP_ITERATION` can be locally disabled, "
"unlike :monitoring-event:`RAISE`."
msgstr ""
"Чтобы инструменты могли отслеживать реальные исключения, не замедляя работу "
"генераторов и сопрограмм, предусмотрено событие :monitoring-event:"
"`STOP_ITERATION`. :monitoring-event:`STOP_ITERATION` можно отключить "
"локально, в отличие от :monitoring-event:`RAISE`."

#: ../../library/sys.monitoring.rst:250
msgid ""
"Note that the :monitoring-event:`STOP_ITERATION` event and the :monitoring-"
"event:`RAISE` event for a :exc:`StopIteration` exception are equivalent, and "
"are treated as interchangeable when generating events. Implementations will "
"favor :monitoring-event:`STOP_ITERATION` for performance reasons, but may "
"generate a :monitoring-event:`RAISE` event with a :exc:`StopIteration`."
msgstr ""

#: ../../library/sys.monitoring.rst:258
msgid "Turning events on and off"
msgstr "Включение и выключение событий"

#: ../../library/sys.monitoring.rst:260
msgid ""
"In order to monitor an event, it must be turned on and a corresponding "
"callback must be registered. Events can be turned on or off by setting the "
"events either globally and/or for a particular code object. An event will "
"trigger only once, even if it is turned on both globally and locally."
msgstr ""

#: ../../library/sys.monitoring.rst:267
msgid "Setting events globally"
msgstr "Глобальная настройка событий"

#: ../../library/sys.monitoring.rst:269
msgid ""
"Events can be controlled globally by modifying the set of events being "
"monitored."
msgstr ""
"Событиями можно управлять глобально, изменяя набор отслеживаемых событий."

#: ../../library/sys.monitoring.rst:273
msgid "Returns the ``int`` representing all the active events."
msgstr "Возвращает int, представляющий все активные события."

#: ../../library/sys.monitoring.rst:277
msgid ""
"Activates all events which are set in *event_set*. Raises a :exc:"
"`ValueError` if *tool_id* is not in use."
msgstr ""
"Активирует все события, заданные в *event_set*. Вызывает :exc:`ValueError`, "
"если *tool_id* не используется."

#: ../../library/sys.monitoring.rst:280
msgid "No events are active by default."
msgstr "По умолчанию ни одно событие не является активным."

#: ../../library/sys.monitoring.rst:283
msgid "Per code object events"
msgstr "События объекта кода"

#: ../../library/sys.monitoring.rst:285
msgid ""
"Events can also be controlled on a per code object basis. The functions "
"defined below which accept a :class:`types.CodeType` should be prepared to "
"accept a look-alike object from functions which are not defined in Python "
"(see :ref:`c-api-monitoring`)."
msgstr ""
"Событиями также можно управлять для каждого объекта кода. Определенные ниже "
"функции, которые принимают :class:`types.CodeType`, должны быть готовы "
"принять похожий объект из функций, которые не определены в Python (см. :ref:"
"`c-api-monitoring`)."

#: ../../library/sys.monitoring.rst:292
msgid "Returns all the local events for *code*"
msgstr "Возвращает все локальные события для *кода*"

#: ../../library/sys.monitoring.rst:296
msgid ""
"Activates all the local events for *code* which are set in *event_set*. "
"Raises a :exc:`ValueError` if *tool_id* is not in use."
msgstr ""
"Активирует все локальные события для *code*, которые установлены в "
"*event_set*. Вызывает :exc:`ValueError`, если *tool_id* не используется."

#: ../../library/sys.monitoring.rst:301
msgid "Disabling events"
msgstr "Отключение событий"

#: ../../library/sys.monitoring.rst:305
msgid ""
"A special value that can be returned from a callback function to disable "
"events for the current code location."
msgstr ""
"Специальное значение, которое может быть возвращено функцией обратного "
"вызова для отключения событий для текущего местоположения кода."

#: ../../library/sys.monitoring.rst:308
msgid ""
"Local events can be disabled for a specific code location by returning :data:"
"`sys.monitoring.DISABLE` from a callback function. This does not change "
"which events are set, or any other code locations for the same event."
msgstr ""
"Локальные события можно отключить для определенного места кода, вернув :data:"
"`sys.monitoring.DISABLE` из функции обратного вызова. Это не влияет на то, "
"какие события установлены или какие-либо другие места кода для того же "
"события."

#: ../../library/sys.monitoring.rst:312
msgid ""
"Disabling events for specific locations is very important for high "
"performance monitoring. For example, a program can be run under a debugger "
"with no overhead if the debugger disables all monitoring except for a few "
"breakpoints."
msgstr ""
"Отключение событий для определенных мест очень важно для обеспечения высокой "
"производительности мониторинга. Например, программу можно запустить под "
"отладчиком без дополнительных затрат, если отладчик отключит весь "
"мониторинг, за исключением нескольких точек останова."

#: ../../library/sys.monitoring.rst:319
msgid ""
"Enable all the events that were disabled by :data:`sys.monitoring.DISABLE` "
"for all tools."
msgstr ""
"Включите все события, которые были отключены с помощью :data:`sys.monitoring."
"DISABLE` для всех инструментов."

#: ../../library/sys.monitoring.rst:326
msgid "Registering callback functions"
msgstr "Регистрация функций обратного вызова"

#: ../../library/sys.monitoring.rst:330
msgid "Registers the callable *func* for the *event* with the given *tool_id*"
msgstr "Регистрирует вызываемую *функцию* для *события* с заданным *tool_id*."

#: ../../library/sys.monitoring.rst:332
msgid ""
"If another callback was registered for the given *tool_id* and *event*, it "
"is unregistered and returned. Otherwise :func:`register_callback` returns "
"``None``."
msgstr ""
"Если для заданных *tool_id* и *event* был зарегистрирован другой обратный "
"вызов, он отменяется и возвращается. В противном случае :func:"
"`register_callback` возвращает ``None``."

#: ../../library/sys.monitoring.rst:336
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.monitoring."
"register_callback`` with argument ``func``."
msgstr ""

#: ../../library/sys.monitoring.rst:338
msgid ""
"Functions can be unregistered by calling ``sys.monitoring."
"register_callback(tool_id, event, None)``."
msgstr ""
"Регистрация функций может быть отменена путем вызова ``sys.monitoring."
"register_callback(tool_id, event, None)``."

#: ../../library/sys.monitoring.rst:341
msgid "Callback functions can be registered and unregistered at any time."
msgstr ""
"Функции обратного вызова можно зарегистрировать и отменить регистрацию в "
"любое время."

#: ../../library/sys.monitoring.rst:343
msgid ""
"Callbacks are called only once regardless if the event is turned on both "
"globally and locally. As such, if an event could be turned on for both "
"global and local events by your code then the callback needs to be written "
"to handle either trigger."
msgstr ""

#: ../../library/sys.monitoring.rst:350
msgid "Callback function arguments"
msgstr "Аргументы функции обратного вызова"

#: ../../library/sys.monitoring.rst:354
msgid ""
"A special value that is passed to a callback function to indicate that there "
"are no arguments to the call."
msgstr ""
"Специальное значение, которое передается в функцию обратного вызова, чтобы "
"указать, что у вызова нет аргументов."

#: ../../library/sys.monitoring.rst:357
msgid ""
"When an active event occurs, the registered callback function is called. "
"Callback functions returning an object other than :data:`DISABLE` will have "
"no effect. Different events will provide the callback function with "
"different arguments, as follows:"
msgstr ""

#: ../../library/sys.monitoring.rst:361
msgid ":monitoring-event:`PY_START` and :monitoring-event:`PY_RESUME`::"
msgstr ":monitoring-event:`PY_START` и :monitoring-event:`PY_RESUME`::"

#: ../../library/sys.monitoring.rst:363 ../../library/sys.monitoring.rst:400
msgid "func(code: CodeType, instruction_offset: int) -> object"
msgstr ""

#: ../../library/sys.monitoring.rst:365
msgid ":monitoring-event:`PY_RETURN` and :monitoring-event:`PY_YIELD`::"
msgstr ":monitoring-event:`PY_RETURN` и :monitoring-event:`PY_YIELD`::"

#: ../../library/sys.monitoring.rst:367
msgid "func(code: CodeType, instruction_offset: int, retval: object) -> object"
msgstr ""

#: ../../library/sys.monitoring.rst:369
msgid ""
":monitoring-event:`CALL`, :monitoring-event:`C_RAISE` and :monitoring-event:"
"`C_RETURN` (*arg0* can be :data:`MISSING` specifically)::"
msgstr ""

#: ../../library/sys.monitoring.rst:372
msgid ""
"func(code: CodeType, instruction_offset: int, callable: object, arg0: "
"object) -> object"
msgstr ""

#: ../../library/sys.monitoring.rst:374
msgid ""
"*code* represents the code object where the call is being made, while "
"*callable* is the object that is about to be called (and thus triggered the "
"event). If there are no arguments, *arg0* is set to :data:`sys.monitoring."
"MISSING`."
msgstr ""

#: ../../library/sys.monitoring.rst:379
msgid ""
"For instance methods, *callable* will be the function object as found on the "
"class with *arg0* set to the instance (i.e. the ``self`` argument to the "
"method)."
msgstr ""

#: ../../library/sys.monitoring.rst:383
msgid ""
":monitoring-event:`RAISE`, :monitoring-event:`RERAISE`, :monitoring-event:"
"`EXCEPTION_HANDLED`, :monitoring-event:`PY_UNWIND`, :monitoring-event:"
"`PY_THROW` and :monitoring-event:`STOP_ITERATION`::"
msgstr ""
":monitoring-event:`RAISE`, :monitoring-event:`RERAISE`, :monitoring-event:"
"`EXCEPTION_HANDLED`, :monitoring-event:`PY_UNWIND`, :monitoring-event:"
"`PY_THROW` и :monitoring-event: `STOP_ITERATION`::"

#: ../../library/sys.monitoring.rst:386
msgid ""
"func(code: CodeType, instruction_offset: int, exception: BaseException) -> "
"object"
msgstr ""

#: ../../library/sys.monitoring.rst:388
msgid ":monitoring-event:`LINE`::"
msgstr ":monitoring-event:`LINE`::"

#: ../../library/sys.monitoring.rst:390
msgid "func(code: CodeType, line_number: int) -> object"
msgstr ""

#: ../../library/sys.monitoring.rst:392
msgid ""
":monitoring-event:`BRANCH_LEFT`, :monitoring-event:`BRANCH_RIGHT` and :"
"monitoring-event:`JUMP`::"
msgstr ""

#: ../../library/sys.monitoring.rst:394
msgid ""
"func(code: CodeType, instruction_offset: int, destination_offset: int) -> "
"object"
msgstr ""

#: ../../library/sys.monitoring.rst:396
msgid "Note that the *destination_offset* is where the code will next execute."
msgstr ""

#: ../../library/sys.monitoring.rst:398
msgid ":monitoring-event:`INSTRUCTION`::"
msgstr ":monitoring-event:`INSTRUCTION`::"
