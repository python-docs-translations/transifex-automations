# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/asyncio-queue.rst:7
msgid "Queues"
msgstr "Очереди"

#: ../../library/asyncio-queue.rst:9
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**Исходный код:** :source:`Lib/asyncio/queues.py`"

#: ../../library/asyncio-queue.rst:13
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""
"Очереди asyncio созданы так, чтобы быть похожими на классы модуля :mod:"
"`queue`. Хотя очереди asyncio не являются потокобезопасными, они "
"предназначены для использования специально в коде async/await."

#: ../../library/asyncio-queue.rst:17
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""
"Обратите внимание, что методы очередей asyncio не имеют параметра *timeout*; "
"используйте функцию :func:`asyncio.wait_for` для выполнения операций с "
"очередью с таймаутом."

#: ../../library/asyncio-queue.rst:21
msgid "See also the `Examples`_ section below."
msgstr "См. также раздел «Примеры» ниже."

#: ../../library/asyncio-queue.rst:24
msgid "Queue"
msgstr "Очередь"

#: ../../library/asyncio-queue.rst:28
msgid "A first in, first out (FIFO) queue."
msgstr "Очередь «первым пришел — первым обслужен» (FIFO)."

#: ../../library/asyncio-queue.rst:30
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""
"Если *maxsize* меньше или равно нулю, размер очереди бесконечен. Если это "
"целое число больше ``0``, то ``await put()`` блокируется, когда очередь "
"достигает *maxsize*, пока элемент не будет удален с помощью :meth:`get`."

#: ../../library/asyncio-queue.rst:35
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""
"В отличие от потоковой обработки стандартной библиотеки :mod:`queue`, размер "
"очереди всегда известен и может быть возвращен путем вызова метода :meth:"
"`qsize`."

#: ../../library/asyncio-queue.rst:39
msgid "Removed the *loop* parameter."
msgstr "Удален параметр *loop*."

#: ../../library/asyncio-queue.rst:43
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "Этот класс :ref:`не потокобезопасен <asyncio-multithreading>`."

#: ../../library/asyncio-queue.rst:47
msgid "Number of items allowed in the queue."
msgstr "Количество элементов, разрешенных в очереди."

#: ../../library/asyncio-queue.rst:51
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "Верните True, если очередь пуста, и False в противном случае."

#: ../../library/asyncio-queue.rst:55
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "Верните ``True``, если в очереди есть элементы :attr:`maxsize`."

#: ../../library/asyncio-queue.rst:57
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` never returns ``True``."
msgstr ""

#: ../../library/asyncio-queue.rst:62
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""
"Удалить и вернуть элемент из очереди. Если очередь пуста, подождите, пока "
"элемент не станет доступен."

#: ../../library/asyncio-queue.rst:67
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""
"Вернуть элемент, если он доступен сразу, иначе поднять :exc:`QueueEmpty`."

#: ../../library/asyncio-queue.rst:72
msgid "Block until all items in the queue have been received and processed."
msgstr ""
"Блокировать до тех пор, пока все элементы в очереди не будут получены и "
"обработаны."

#: ../../library/asyncio-queue.rst:74
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""
"Количество незавершенных задач увеличивается каждый раз, когда элемент "
"добавляется в очередь. Счетчик уменьшается всякий раз, когда сопрограмма "
"потребителя вызывает :meth:`task_done`, чтобы указать, что элемент был "
"получен и вся работа над ним завершена. Когда количество незавершенных задач "
"падает до нуля, :meth:`join` разблокируется."

#: ../../library/asyncio-queue.rst:82
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""
"Поместите элемент в очередь. Если очередь заполнена, подождите, пока "
"освободится свободное место, прежде чем добавлять элемент."

#: ../../library/asyncio-queue.rst:87
msgid "Put an item into the queue without blocking."
msgstr "Поместите элемент в очередь без блокировки."

#: ../../library/asyncio-queue.rst:89
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr "Если в данный момент свободного места нет, поднимите :exc:`QueueFull`."

#: ../../library/asyncio-queue.rst:93
msgid "Return the number of items in the queue."
msgstr "Возвращает количество элементов в очереди."

#: ../../library/asyncio-queue.rst:97
msgid "Indicate that a formerly enqueued task is complete."
msgstr "Указывает, что ранее поставленная в очередь задача завершена."

#: ../../library/asyncio-queue.rst:99
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""
"Используется потребителями очереди. Для каждого :meth:`~Queue.get`, "
"используемого для получения задачи, последующий вызов :meth:`task_done` "
"сообщает очереди, что обработка задачи завершена."

#: ../../library/asyncio-queue.rst:103
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
"Если :meth:`join` в данный момент блокируется, оно возобновится, когда все "
"элементы будут обработаны (это означает, что вызов :meth:`task_done` был "
"получен для каждого элемента, который был :meth:`~Queue.put` в очередь)."

#: ../../library/asyncio-queue.rst:108
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""
"Вызывает :exc:`ValueError`, если вызывается больше раз, чем было помещено в "
"очередь элементов."

#: ../../library/asyncio-queue.rst:113
msgid "Priority Queue"
msgstr "Приоритетная очередь"

#: ../../library/asyncio-queue.rst:117
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""
"Вариант :class:`Queue`; извлекает записи в порядке приоритета (сначала самый "
"низкий)."

#: ../../library/asyncio-queue.rst:120
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr ""
"Записи обычно представляют собой кортежи формы ``(priority_number, data)``."

#: ../../library/asyncio-queue.rst:125
msgid "LIFO Queue"
msgstr "Очередь LIFO"

#: ../../library/asyncio-queue.rst:129
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""
"Вариант :class:`Queue`, который сначала извлекает самые последние "
"добавленные записи (последними вошли, первыми вышли)."

#: ../../library/asyncio-queue.rst:134
msgid "Exceptions"
msgstr "Исключения"

#: ../../library/asyncio-queue.rst:138
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""
"Это исключение возникает, когда метод :meth:`~Queue.get_nowait` вызывается в "
"пустой очереди."

#: ../../library/asyncio-queue.rst:144
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""
"Исключение возникает, когда метод :meth:`~Queue.put_nowait` вызывается для "
"очереди, достигшей своего *максимального размера*."

#: ../../library/asyncio-queue.rst:149
msgid "Examples"
msgstr "Примеры"

#: ../../library/asyncio-queue.rst:153
msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""
"Очереди можно использовать для распределения рабочей нагрузки между "
"несколькими одновременными задачами:"
