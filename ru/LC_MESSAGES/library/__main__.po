# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/__main__.rst:2
msgid ":mod:`!__main__` --- Top-level code environment"
msgstr ":mod:`!__main__` --- Среда кода верхнего уровня"

#: ../../library/__main__.rst:10
msgid ""
"In Python, the special name ``__main__`` is used for two important "
"constructs:"
msgstr ""
"В Python специальное имя __main__ используется для двух важных конструкций:"

#: ../../library/__main__.rst:12
msgid ""
"the name of the top-level environment of the program, which can be checked "
"using the ``__name__ == '__main__'`` expression; and"
msgstr ""
"имя среды верхнего уровня программы, которое можно проверить с помощью "
"выражения ``__name__ == '__main__'``; и"

#: ../../library/__main__.rst:14
msgid "the ``__main__.py`` file in Python packages."
msgstr "файл ``__main__.py`` в пакетах Python."

#: ../../library/__main__.rst:16
msgid ""
"Both of these mechanisms are related to Python modules; how users interact "
"with them and how they interact with each other.  They are explained in "
"detail below.  If you're new to Python modules, see the tutorial section :"
"ref:`tut-modules` for an introduction."
msgstr ""
"Оба эти механизма связаны с модулями Python; как пользователи "
"взаимодействуют с ними и как они взаимодействуют друг с другом. Они подробно "
"описаны ниже. Если вы новичок в модулях Python, ознакомьтесь с разделом "
"учебника :ref:`tut-modules` для ознакомления."

#: ../../library/__main__.rst:25
msgid "``__name__ == '__main__'``"
msgstr "``__name__ == '__main__'``"

#: ../../library/__main__.rst:27
msgid ""
"When a Python module or package is imported, ``__name__`` is set to the "
"module's name.  Usually, this is the name of the Python file itself without "
"the ``.py`` extension::"
msgstr ""
"Когда импортируется модуль или пакет Python, ``__name__`` устанавливается "
"как имя модуля. Обычно это имя самого файла Python без расширения .py:"

#: ../../library/__main__.rst:31
msgid ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"
msgstr ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"

#: ../../library/__main__.rst:35
msgid ""
"If the file is part of a package, ``__name__`` will also include the parent "
"package's path::"
msgstr ""
"Если файл является частью пакета, ``__name__`` также будет включать путь "
"родительского пакета::"

#: ../../library/__main__.rst:38
msgid ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"
msgstr ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"

#: ../../library/__main__.rst:42
msgid ""
"However, if the module is executed in the top-level code environment, its "
"``__name__`` is set to the string ``'__main__'``."
msgstr ""
"Однако, если модуль выполняется в среде кода верхнего уровня, его "
"``__name__`` устанавливается в строку ``'__main__'``."

#: ../../library/__main__.rst:46
msgid "What is the \"top-level code environment\"?"
msgstr "Что такое «среда кода верхнего уровня»?"

#: ../../library/__main__.rst:48
msgid ""
"``__main__`` is the name of the environment where top-level code is run. "
"\"Top-level code\" is the first user-specified Python module that starts "
"running. It's \"top-level\" because it imports all other modules that the "
"program needs. Sometimes \"top-level code\" is called an *entry point* to "
"the application."
msgstr ""
"``__main__`` — это имя среды, в которой выполняется код верхнего уровня. "
"«Код верхнего уровня» — это первый указанный пользователем модуль Python, "
"который начинает работать. Это «верхний уровень», поскольку он импортирует "
"все остальные модули, необходимые программе. Иногда «код верхнего уровня» "
"называют *точкой входа* в приложение."

#: ../../library/__main__.rst:53
msgid "The top-level code environment can be:"
msgstr "Среда кода верхнего уровня может быть:"

#: ../../library/__main__.rst:55
msgid "the scope of an interactive prompt::"
msgstr "объем интерактивной подсказки::"

#: ../../library/__main__.rst:57
msgid ""
">>> __name__\n"
"'__main__'"
msgstr ""
">>> __name__\n"
"'__main__'"

#: ../../library/__main__.rst:60
msgid "the Python module passed to the Python interpreter as a file argument:"
msgstr ""
"модуль Python передается интерпретатору Python в качестве аргумента файла:"

#: ../../library/__main__.rst:62
msgid ""
"$ python helloworld.py\n"
"Hello, world!"
msgstr ""
"$ python helloworld.py\n"
"Hello, world!"

#: ../../library/__main__.rst:67
msgid ""
"the Python module or package passed to the Python interpreter with the :"
"option:`-m` argument:"
msgstr ""
"модуль или пакет Python, передаваемый интерпретатору Python с аргументом :"
"option:`-m`:"

#: ../../library/__main__.rst:70
msgid ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"
msgstr ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"

#: ../../library/__main__.rst:75
msgid "Python code read by the Python interpreter from standard input:"
msgstr "Код Python, считываемый интерпретатором Python со стандартного ввода:"

#: ../../library/__main__.rst:77
msgid ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."

#: ../../library/__main__.rst:86
msgid ""
"Python code passed to the Python interpreter with the :option:`-c` argument:"
msgstr "Код Python передается интерпретатору Python с аргументом :option:`-c`:"

#: ../../library/__main__.rst:88
msgid ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."

#: ../../library/__main__.rst:97
msgid ""
"In each of these situations, the top-level module's ``__name__`` is set to "
"``'__main__'``."
msgstr ""
"В каждой из этих ситуаций ``__name__`` модуля верхнего уровня "
"устанавливается в ``'__main__'``."

#: ../../library/__main__.rst:100
msgid ""
"As a result, a module can discover whether or not it is running in the top-"
"level environment by checking its own ``__name__``, which allows a common "
"idiom for conditionally executing code when the module is not initialized "
"from an import statement::"
msgstr ""
"В результате модуль может определить, работает ли он в среде верхнего "
"уровня, проверив свое собственное ``__name__``, что позволяет использовать "
"общепринятую идиому для условного выполнения кода, когда модуль не "
"инициализируется из оператора импорта: :"

#: ../../library/__main__.rst:105
msgid ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."
msgstr ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."

#: ../../library/__main__.rst:111
msgid ""
"For a more detailed look at how ``__name__`` is set in all situations, see "
"the tutorial section :ref:`tut-modules`."
msgstr ""
"Для более подробного ознакомления с тем, как устанавливается ``__name__`` во "
"всех ситуациях, см. раздел руководства :ref:`tut-modules`."

#: ../../library/__main__.rst:116 ../../library/__main__.rst:239
msgid "Idiomatic Usage"
msgstr "Идиоматическое использование"

#: ../../library/__main__.rst:118
msgid ""
"Some modules contain code that is intended for script use only, like parsing "
"command-line arguments or fetching data from standard input.  If a module "
"like this was imported from a different module, for example to unit test it, "
"the script code would unintentionally execute as well."
msgstr ""
"Некоторые модули содержат код, предназначенный только для использования в "
"сценариях, например анализ аргументов командной строки или получение данных "
"из стандартного ввода. Если такой модуль был импортирован из другого модуля, "
"например, для его модульного тестирования, код сценария также будет "
"непреднамеренно выполнен."

#: ../../library/__main__.rst:123
msgid ""
"This is where using the ``if __name__ == '__main__'`` code block comes in "
"handy. Code within this block won't run unless the module is executed in the "
"top-level environment."
msgstr ""
"Вот тут-то и пригодится блок кода ``if __name__ == '__main__'``. Код внутри "
"этого блока не будет выполняться, если модуль не будет выполнен в среде "
"верхнего уровня."

#: ../../library/__main__.rst:127
msgid ""
"Putting as few statements as possible in the block below ``if __name__ == "
"'__main__'`` can improve code clarity and correctness. Most often, a "
"function named ``main`` encapsulates the program's primary behavior::"
msgstr ""
"Размещение как можно меньшего количества операторов в блоке ниже ``if "
"__name__ == '__main__'`` может улучшить ясность и правильность кода. Чаще "
"всего функция с именем main инкапсулирует основное поведение программы:"

#: ../../library/__main__.rst:131
msgid ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"
msgstr ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"

#: ../../library/__main__.rst:151
msgid ""
"Note that if the module didn't encapsulate code inside the ``main`` function "
"but instead put it directly within the ``if __name__ == '__main__'`` block, "
"the ``phrase`` variable would be global to the entire module.  This is error-"
"prone as other functions within the module could be unintentionally using "
"the global variable instead of a local name.  A ``main`` function solves "
"this problem."
msgstr ""
"Обратите внимание: если модуль не инкапсулировал код внутри функции main, а "
"вместо этого поместил его непосредственно в блок if __name__ == '__main__'`, "
"переменная ``phrase`` была бы глобальной для весь модуль. Это чревато "
"ошибками, поскольку другие функции внутри модуля могут непреднамеренно "
"использовать глобальную переменную вместо локального имени. Функция main "
"решает эту проблему."

#: ../../library/__main__.rst:158
msgid ""
"Using a ``main`` function has the added benefit of the ``echo`` function "
"itself being isolated and importable elsewhere. When ``echo.py`` is "
"imported, the ``echo`` and ``main`` functions will be defined, but neither "
"of them will be called, because ``__name__ != '__main__'``."
msgstr ""
"Использование функции main имеет дополнительное преимущество, заключающееся "
"в том, что сама функция echo изолирована и может быть импортирована в другое "
"место. При импорте ``echo.py`` функции ``echo`` и ``main`` будут определены, "
"но ни одна из них не будет вызвана, потому что ``__name__ != '__main__'``."

#: ../../library/__main__.rst:165
msgid "Packaging Considerations"
msgstr "Рекомендации по упаковке"

#: ../../library/__main__.rst:167
msgid ""
"``main`` functions are often used to create command-line tools by specifying "
"them as entry points for console scripts.  When this is done, `pip <https://"
"pip.pypa.io/>`_ inserts the function call into a template script, where the "
"return value of ``main`` is passed into :func:`sys.exit`. For example::"
msgstr ""
"Функции ``main`` часто используются для создания инструментов командной "
"строки, определяя их в качестве точек входа для консольных сценариев. Когда "
"это будет сделано, ``pip <https://pip.pypa.io/>`_ вставит вызов функции в "
"шаблонный скрипт, где возвращаемое значение ``main`` передается в :func:`sys."
"exit. `. Например::"

#: ../../library/__main__.rst:173
msgid "sys.exit(main())"
msgstr "sys.exit(main())"

#: ../../library/__main__.rst:175
msgid ""
"Since the call to ``main`` is wrapped in :func:`sys.exit`, the expectation "
"is that your function will return some value acceptable as an input to :func:"
"`sys.exit`; typically, an integer or ``None`` (which is implicitly returned "
"if your function does not have a return statement)."
msgstr ""
"Поскольку вызов main заключен в :func:`sys.exit`, ожидается, что ваша "
"функция вернет некоторое значение, приемлемое в качестве входных данных для :"
"func:`sys.exit`; обычно это целое число или None (которое неявно "
"возвращается, если ваша функция не имеет оператора return)."

#: ../../library/__main__.rst:180
msgid ""
"By proactively following this convention ourselves, our module will have the "
"same behavior when run directly (i.e. ``python echo.py``) as it will have if "
"we later package it as a console script entry-point in a pip-installable "
"package."
msgstr ""
"Если мы сами активно следуем этому соглашению, наш модуль будет иметь такое "
"же поведение при непосредственном запуске (т. е. ``python echo.py``), как "
"если бы мы позже упаковали его как точку входа консольного сценария в пакет, "
"устанавливаемый с помощью pip. ."

#: ../../library/__main__.rst:185
msgid ""
"In particular, be careful about returning strings from your ``main`` "
"function. :func:`sys.exit` will interpret a string argument as a failure "
"message, so your program will have an exit code of ``1``, indicating "
"failure, and the string will be written to :data:`sys.stderr`.  The ``echo."
"py`` example from earlier exemplifies using the ``sys.exit(main())`` "
"convention."
msgstr ""
"В частности, будьте осторожны с возвратом строк из функции main. :func:`sys."
"exit` интерпретирует строковый аргумент как сообщение об ошибке, поэтому "
"ваша программа будет иметь код выхода ``1``, указывающий на ошибку, и строка "
"будет записана в :data:`sys.stderr. `. Приведенный ранее пример ``echo.py`` "
"иллюстрирует использование соглашения ``sys.exit(main())``."

#: ../../library/__main__.rst:193
msgid ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contains a "
"collection of tutorials and references on how to distribute and install "
"Python packages with modern tools."
msgstr ""
"`Руководство пользователя по упаковке Python <https://packaging.python.org/"
">`_ содержит коллекцию учебных пособий и справок о том, как распространять и "
"устанавливать пакеты Python с помощью современных инструментов."

#: ../../library/__main__.rst:199
msgid "``__main__.py`` in Python Packages"
msgstr "``__main__.py`` в пакетах Python"

#: ../../library/__main__.rst:201
msgid ""
"If you are not familiar with Python packages, see section :ref:`tut-"
"packages` of the tutorial.  Most commonly, the ``__main__.py`` file is used "
"to provide a command-line interface for a package. Consider the following "
"hypothetical package, \"bandclass\":"
msgstr ""
"Если вы не знакомы с пакетами Python, см. раздел :ref:`tut-packages` "
"руководства. Чаще всего файл ``__main__.py`` используется для предоставления "
"интерфейса командной строки для пакета. Рассмотрим следующий гипотетический "
"пакет «bandclass»:"

#: ../../library/__main__.rst:206
msgid ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"
msgstr ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"

#: ../../library/__main__.rst:213
msgid ""
"``__main__.py`` will be executed when the package itself is invoked directly "
"from the command line using the :option:`-m` flag. For example:"
msgstr ""
"``__main__.py`` будет выполняться, когда сам пакет вызывается "
"непосредственно из командной строки с использованием флага :option:`-m`. "
"Например:"

#: ../../library/__main__.rst:216
msgid "$ python -m bandclass"
msgstr "$ python -m bandclass"

#: ../../library/__main__.rst:220
msgid ""
"This command will cause ``__main__.py`` to run. How you utilize this "
"mechanism will depend on the nature of the package you are writing, but in "
"this hypothetical case, it might make sense to allow the teacher to search "
"for students::"
msgstr ""
"Эта команда запустит ``__main__.py``. То, как вы будете использовать этот "
"механизм, будет зависеть от характера пакета, который вы пишете, но в этом "
"гипотетическом случае может иметь смысл разрешить преподавателю искать "
"учеников:"

#: ../../library/__main__.rst:225
msgid ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"
msgstr ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"

#: ../../library/__main__.rst:233
msgid ""
"Note that ``from .student import search_students`` is an example of a "
"relative import.  This import style can be used when referencing modules "
"within a package.  For more details, see :ref:`intra-package-references` in "
"the :ref:`tut-modules` section of the tutorial."
msgstr ""
"Обратите внимание, что ``from .student import search_students`` является "
"примером относительного импорта. Этот стиль импорта можно использовать при "
"ссылке на модули внутри пакета. Более подробную информацию см. в разделе :"
"ref:`intra-package-references` в разделе :ref:`tut-modules` руководства."

#: ../../library/__main__.rst:241
msgid ""
"The content of ``__main__.py`` typically isn't fenced with an ``if __name__ "
"== '__main__'`` block.  Instead, those files are kept short and import "
"functions to execute from other modules.  Those other modules can then be "
"easily unit-tested and are properly reusable."
msgstr ""
"Содержимое ``__main__.py`` обычно не ограждено блоком ``if __name__ == "
"'__main__'``. Вместо этого эти файлы сохраняются короткими и импортируют "
"функции для выполнения из других модулей. Эти другие модули затем можно "
"легко протестировать и повторно использовать."

#: ../../library/__main__.rst:246
msgid ""
"If used, an ``if __name__ == '__main__'`` block will still work as expected "
"for a ``__main__.py`` file within a package, because its ``__name__`` "
"attribute will include the package's path if imported::"
msgstr ""
"Если он используется, блок ``if __name__ == '__main__'`` по-прежнему будет "
"работать должным образом для файла ``__main__.py`` внутри пакета, поскольку "
"его атрибут ``__name__`` будет включать путь к пакету, если он "
"импортирован. ::"

#: ../../library/__main__.rst:250
msgid ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"
msgstr ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"

#: ../../library/__main__.rst:254
msgid ""
"This won't work for ``__main__.py`` files in the root directory of a ``."
"zip`` file though.  Hence, for consistency, a minimal ``__main__.py`` "
"without a ``__name__`` check is preferred."
msgstr ""
"Однако это не будет работать для файлов ``__main__.py`` в корневом каталоге "
"файла ``.zip``. Следовательно, для обеспечения согласованности "
"предпочтителен минимальный файл ``__main__.py`` без проверки ``__name__``."

#: ../../library/__main__.rst:260
msgid ""
"See :mod:`venv` for an example of a package with a minimal ``__main__.py`` "
"in the standard library. It doesn't contain a ``if __name__ == '__main__'`` "
"block. You can invoke it with ``python -m venv [directory]``."
msgstr ""
"См. :mod:`venv` для примера пакета с минимальным ``__main__.py`` в "
"стандартной библиотеке. Он не содержит блок if __name__ == '__main__'``. Вы "
"можете вызвать его с помощью ``python -m venv [directory]``."

#: ../../library/__main__.rst:264
msgid ""
"See :mod:`runpy` for more details on the :option:`-m` flag to the "
"interpreter executable."
msgstr ""
"См. :mod:`runpy` для получения более подробной информации о флаге :option:`-"
"m` для исполняемого файла интерпретатора."

#: ../../library/__main__.rst:267
msgid ""
"See :mod:`zipapp` for how to run applications packaged as *.zip* files. In "
"this case Python looks for a ``__main__.py`` file in the root directory of "
"the archive."
msgstr ""
"См. :mod:`zipapp`, чтобы узнать, как запускать приложения, упакованные в "
"файлы *.zip*. В этом случае Python ищет файл ``__main__.py`` в корневом "
"каталоге архива."

#: ../../library/__main__.rst:274
msgid "``import __main__``"
msgstr "``import __main__``"

#: ../../library/__main__.rst:276
msgid ""
"Regardless of which module a Python program was started with, other modules "
"running within that same program can import the top-level environment's "
"scope (:term:`namespace`) by importing the ``__main__`` module.  This "
"doesn't import a ``__main__.py`` file but rather whichever module that "
"received the special name ``'__main__'``."
msgstr ""
"Независимо от того, с каким модулем была запущена программа Python, другие "
"модули, работающие в этой же программе, могут импортировать область действия "
"среды верхнего уровня (:term:`namespace`), импортировав модуль ``__main__``. "
"При этом импортируется не файл ``__main__.py``, а любой модуль, получивший "
"специальное имя ``'__main__'``."

#: ../../library/__main__.rst:282
msgid "Here is an example module that consumes the ``__main__`` namespace::"
msgstr "Вот пример модуля, который использует пространство имен ``__main__``:"

#: ../../library/__main__.rst:284
msgid ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"
msgstr ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    if '__file__' in dir(__main__):\n"
"        print(__main__.my_name, \"found in file\", __main__.__file__)\n"
"    else:\n"
"        print(__main__.my_name)"

#: ../../library/__main__.rst:300
msgid "Example usage of this module could be as follows::"
msgstr "Пример использования этого модуля может быть следующим:"

#: ../../library/__main__.rst:302
msgid ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"
msgstr ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"

#: ../../library/__main__.rst:319
msgid "Now, if we started our program, the result would look like this:"
msgstr ""
"Теперь, если бы мы запустили нашу программу, результат выглядел бы так:"

#: ../../library/__main__.rst:321
msgid ""
"$ python start.py\n"
"Define the variable `my_name`!"
msgstr ""
"$ python start.py\n"
"Define the variable `my_name`!"

#: ../../library/__main__.rst:326
msgid ""
"The exit code of the program would be 1, indicating an error. Uncommenting "
"the line with ``my_name = \"Dinsdale\"`` fixes the program and now it exits "
"with status code 0, indicating success:"
msgstr ""
"Код выхода программы будет 1, что указывает на ошибку. Раскомментирование "
"строки с ``my_name = \"Dinsdale\"`` исправляет программу, и теперь она "
"завершает работу с кодом состояния 0, что указывает на успех:"

#: ../../library/__main__.rst:330
msgid ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"
msgstr ""
"$ python start.py\n"
"Dinsdale found in file /path/to/start.py"

#: ../../library/__main__.rst:335
msgid ""
"Note that importing ``__main__`` doesn't cause any issues with "
"unintentionally running top-level code meant for script use which is put in "
"the ``if __name__ == \"__main__\"`` block of the ``start`` module. Why does "
"this work?"
msgstr ""
"Обратите внимание, что импорт ``__main__`` не вызывает проблем с "
"непреднамеренным запуском кода верхнего уровня, предназначенного для "
"использования скриптом, который помещается в блок ``if __name__ == "
"\"__main__\"`` модуля ``start``. . Почему это работает?"

#: ../../library/__main__.rst:339
msgid ""
"Python inserts an empty ``__main__`` module in :data:`sys.modules` at "
"interpreter startup, and populates it by running top-level code. In our "
"example this is the ``start`` module which runs line by line and imports "
"``namely``. In turn, ``namely`` imports ``__main__`` (which is really "
"``start``). That's an import cycle! Fortunately, since the partially "
"populated ``__main__`` module is present in :data:`sys.modules`, Python "
"passes that to ``namely``. See :ref:`Special considerations for __main__ "
"<import-dunder-main>` in the import system's reference for details on how "
"this works."
msgstr ""
"Python вставляет пустой модуль ``__main__`` в :data:`sys.modules` при "
"запуске интерпретатора и заполняет его, запуская код верхнего уровня. В "
"нашем примере это модуль «start», который выполняется построчно и "
"импортирует «а именно». В свою очередь, ``namely`` импортирует ``__main__`` "
"(который на самом деле является ``start``). Это цикл импорта! К счастью, "
"поскольку частично заполненный модуль ``__main__`` присутствует в :data:`sys."
"modules`, Python передает его ``namely``. Подробную информацию о том, как "
"это работает, см. в разделе :ref:`Особые особенности __main__ <import-dunder-"
"main>` в справочнике по системе импорта."

#: ../../library/__main__.rst:348
msgid ""
"The Python REPL is another example of a \"top-level environment\", so "
"anything defined in the REPL becomes part of the ``__main__`` scope::"
msgstr ""
"Python REPL — это еще один пример «среды верхнего уровня», поэтому все, что "
"определено в REPL, становится частью области видимости ``__main__``::"

#: ../../library/__main__.rst:351
msgid ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"
msgstr ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"

#: ../../library/__main__.rst:364
msgid ""
"Note that in this case the ``__main__`` scope doesn't contain a ``__file__`` "
"attribute as it's interactive."
msgstr ""
"Обратите внимание, что в этом случае область действия ``__main__`` не "
"содержит атрибута ``__file__``, поскольку она интерактивна."

#: ../../library/__main__.rst:367
msgid ""
"The ``__main__`` scope is used in the implementation of :mod:`pdb` and :mod:"
"`rlcompleter`."
msgstr ""
"Область ``__main__`` используется в реализации :mod:`pdb` и :mod:"
"`rlcompleter`."
