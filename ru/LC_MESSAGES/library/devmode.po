# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:14+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/devmode.rst:4
msgid "Python Development Mode"
msgstr "Режим разработки Python"

#: ../../library/devmode.rst:8
msgid ""
"The Python Development Mode introduces additional runtime checks that are "
"too expensive to be enabled by default. It should not be more verbose than "
"the default if the code is correct; new warnings are only emitted when an "
"issue is detected."
msgstr ""
"Режим разработки Python вводит дополнительные проверки во время выполнения, "
"которые слишком дороги, чтобы их можно было включить по умолчанию. Оно не "
"должно быть более подробным, чем значение по умолчанию, если код правильный; "
"новые предупреждения выдаются только при обнаружении проблемы."

#: ../../library/devmode.rst:13
msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or by "
"setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
"Его можно включить с помощью параметра командной строки :option:`-X dev <-"
"X>` или установив для переменной среды :envvar:`PYTHONDEVMODE` значение "
"``1``."

#: ../../library/devmode.rst:16
msgid "See also :ref:`Python debug build <debug-build>`."
msgstr "См. также :ref:`Отладочная сборка Python <debug-build>`."

#: ../../library/devmode.rst:19
msgid "Effects of the Python Development Mode"
msgstr "Эффекты режима разработки Python"

#: ../../library/devmode.rst:21
msgid ""
"Enabling the Python Development Mode is similar to the following command, "
"but with additional effects described below::"
msgstr ""
"Включение режима разработки Python аналогично следующей команде, но с "
"дополнительными эффектами, описанными ниже:"

#: ../../library/devmode.rst:26
msgid "Effects of the Python Development Mode:"
msgstr "Эффекты режима разработки Python:"

#: ../../library/devmode.rst:28
msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr ""
"Добавьте ``default`` :ref:`фильтр предупреждений <description-warning-"
"filters>`. Отображаются следующие предупреждения:"

#: ../../library/devmode.rst:31
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/devmode.rst:32
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/devmode.rst:33
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/devmode.rst:34
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/devmode.rst:36
msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr ""
"Обычно приведенные выше предупреждения фильтруются стандартными :ref:"
"`фильтрами предупреждений <description-warning-filters>`."

#: ../../library/devmode.rst:39
msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is used."
msgstr ""
"Он ведет себя так, как если бы использовался параметр командной строки :"
"option:`-W default <-W>`."

#: ../../library/devmode.rst:41
msgid ""
"Use the :option:`-W error <-W>` command line option or set the :envvar:"
"`PYTHONWARNINGS` environment variable to ``error`` to treat warnings as "
"errors."
msgstr ""
"Используйте параметр командной строки :option:`-W error <-W>` или установите "
"для переменной среды :envvar:`PYTHONWARNINGS` значение ``error``, чтобы "
"рассматривать предупреждения как ошибки."

#: ../../library/devmode.rst:45
msgid "Install debug hooks on memory allocators to check for:"
msgstr ""
"Установите перехватчики отладки на распределителях памяти, чтобы проверить:"

#: ../../library/devmode.rst:47
msgid "Buffer underflow"
msgstr "Опустошение буфера"

#: ../../library/devmode.rst:48
msgid "Buffer overflow"
msgstr "Переполнение буфера"

#: ../../library/devmode.rst:49
msgid "Memory allocator API violation"
msgstr "Нарушение API распределителя памяти"

#: ../../library/devmode.rst:50
msgid "Unsafe usage of the GIL"
msgstr "Небезопасное использование GIL"

#: ../../library/devmode.rst:52
msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr "См. функцию C :c:func:`PyMem_SetupDebugHooks`."

#: ../../library/devmode.rst:54
msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set to "
"``debug``."
msgstr ""
"Он ведет себя так, как будто для переменной среды :envvar:`PYTHONMALLOC` "
"установлено значение ``debug``."

#: ../../library/devmode.rst:57
msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to "
"``default``."
msgstr ""
"Чтобы включить режим разработки Python без установки перехватчиков отладки "
"на распределителях памяти, установите для переменной среды :envvar:"
"`PYTHONMALLOC` значение ``default``."

#: ../../library/devmode.rst:61
msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers for "
"the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal."
"SIGABRT`, :const:`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to "
"dump the Python traceback on a crash."
msgstr ""
"Вызовите :func:`faulthandler.enable` при запуске Python, чтобы установить "
"обработчики для :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:"
"`~signal.SIGABRT`, :const: `~signal.SIGBUS` и :const:`~signal.SIGILL` "
"сигнализируют о сбросе трассировки Python при сбое."

#: ../../library/devmode.rst:66
msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option is "
"used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is set to "
"``1``."
msgstr ""
"Он ведет себя так, как если бы использовался параметр командной строки :"
"option:`-X errorhandler <-X>` или если для переменной среды :envvar:"
"`PYTHONFAULTHANDLER` установлено значение ``1``."

#: ../../library/devmode.rst:70
msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, :mod:"
"`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
"Включите :ref:`режим отладки asyncio <asyncio-debug-mode>`. Например, :mod:"
"`asyncio` проверяет наличие неожиданных сопрограмм и записывает их."

#: ../../library/devmode.rst:73
msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is "
"set to ``1``."
msgstr ""
"Он ведет себя так, как будто для переменной среды :envvar:"
"`PYTHONASYNCIODEBUG` установлено значение ``1``."

#: ../../library/devmode.rst:76
msgid ""
"Check the *encoding* and *errors* arguments for string encoding and decoding "
"operations. Examples: :func:`open`, :meth:`str.encode` and :meth:`bytes."
"decode`."
msgstr ""
"Проверьте аргументы *encoding* и *errors* для операций кодирования и "
"декодирования строк. Примеры: :func:`open`, :meth:`str.encode` и :meth:"
"`bytes.decode`."

#: ../../library/devmode.rst:80
msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings."
msgstr ""
"По умолчанию для лучшей производительности аргумент *errors* проверяется "
"только при первой ошибке кодирования/декодирования, а аргумент *encoding* "
"иногда игнорируется для пустых строк."

#: ../../library/devmode.rst:84
msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr "Деструктор :class:`io.IOBase` регистрирует исключения ``close()``."

#: ../../library/devmode.rst:85
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :data:`sys.flags` to "
"``True``."
msgstr ""
"Установите для атрибута :attr:`~sys.flags.dev_mode` :data:`sys.flags` "
"значение ``True``."

#: ../../library/devmode.rst:88
msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module by "
"default, because the overhead cost (to performance and memory) would be too "
"large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, :exc:"
"`ResourceWarning` logs the traceback where the resource was allocated, and a "
"buffer overflow error logs the traceback where the memory block was "
"allocated."
msgstr ""
"Режим разработки Python не включает модуль :mod:`tracemalloc` по умолчанию, "
"поскольку накладные расходы (производительность и память) будут слишком "
"велики. Включение модуля :mod:`tracemalloc` предоставляет дополнительную "
"информацию о происхождении некоторых ошибок. Например, :exc:"
"`ResourceWarning` регистрирует обратную трассировку места выделения ресурса, "
"а ошибка переполнения буфера регистрирует обратную трассировку места "
"выделения блока памяти."

#: ../../library/devmode.rst:95
msgid ""
"The Python Development Mode does not prevent the :option:`-O` command line "
"option from removing :keyword:`assert` statements nor from setting :const:"
"`__debug__` to ``False``."
msgstr ""
"Режим разработки Python не запрещает параметру командной строки :option:`-O` "
"удалять операторы :keyword:`assert` и устанавливать для :const:`__debug__` "
"значение ``False``."

#: ../../library/devmode.rst:99
msgid ""
"The Python Development Mode can only be enabled at the Python startup. Its "
"value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""
"Режим разработки Python можно включить только при запуске Python. Его "
"значение можно прочитать из :data:`sys.flags.dev_mode <sys.flags>`."

#: ../../library/devmode.rst:102
msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr ""
"Деструктор :class:`io.IOBase` теперь регистрирует исключения ``close()``."

#: ../../library/devmode.rst:105
msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding "
"and decoding operations."
msgstr ""
"Аргументы *encoding* и *errors* теперь проверяются на предмет операций "
"кодирования и декодирования строк."

#: ../../library/devmode.rst:111
msgid "ResourceWarning Example"
msgstr "Пример ResourceWarning"

#: ../../library/devmode.rst:113
msgid ""
"Example of a script counting the number of lines of the text file specified "
"in the command line::"
msgstr ""
"Пример скрипта, подсчитывающего количество строк текстового файла, "
"указанного в командной строке:"

#: ../../library/devmode.rst:127
msgid ""
"The script does not close the file explicitly. By default, Python does not "
"emit any warning. Example using README.txt, which has 269 lines:"
msgstr ""
"Скрипт не закрывает файл явно. По умолчанию Python не выдает никаких "
"предупреждений. Пример использования README.txt, который имеет 269 строк:"

#: ../../library/devmode.rst:135
msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr ""
"Включение режима разработки Python отображает предупреждение :exc:"
"`ResourceWarning`:"

#: ../../library/devmode.rst:145
msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file was "
"opened:"
msgstr ""
"Кроме того, включение :mod:`tracemalloc` показывает строку, где файл был "
"открыт:"

#: ../../library/devmode.rst:160
msgid ""
"The fix is to close explicitly the file. Example using a context manager::"
msgstr ""
"Исправление заключается в явном закрытии файла. Пример использования "
"контекстного менеджера::"

#: ../../library/devmode.rst:168
msgid ""
"Not closing a resource explicitly can leave a resource open for way longer "
"than expected; it can cause severe issues upon exiting Python. It is bad in "
"CPython, but it is even worse in PyPy. Closing resources explicitly makes an "
"application more deterministic and more reliable."
msgstr ""
"Если не закрыть ресурс явно, он может остаться открытым намного дольше, чем "
"ожидалось; это может вызвать серьезные проблемы при выходе из Python. В "
"CPython всё плохо, но в PyPy ещё хуже. Явное закрытие ресурсов делает "
"приложение более детерминированным и надежным."

#: ../../library/devmode.rst:175
msgid "Bad file descriptor error example"
msgstr "Пример ошибки неверного дескриптора файла"

#: ../../library/devmode.rst:177
msgid "Script displaying the first line of itself::"
msgstr "Скрипт, отображающий первую строку самого себя::"

#: ../../library/devmode.rst:190
msgid "By default, Python does not emit any warning:"
msgstr "По умолчанию Python не выдает никаких предупреждений:"

#: ../../library/devmode.rst:197
msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a \"Bad "
"file descriptor\" error when finalizing the file object:"
msgstr ""
"В режиме разработки Python отображается :exc:`ResourceWarning` и "
"регистрируется ошибка «Неверный файловый дескриптор» при финализации "
"файлового объекта:"

#: ../../library/devmode.rst:213
msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file object "
"finalizer tries to close the file descriptor again, it fails with the ``Bad "
"file descriptor`` error. A file descriptor must be closed only once. In the "
"worst case scenario, closing it twice can lead to a crash (see :issue:"
"`18748` for an example)."
msgstr ""
"``os.close(fp.fileno())`` закрывает дескриптор файла. Когда финализатор "
"файлового объекта снова пытается закрыть дескриптор файла, он терпит неудачу "
"с ошибкой ``Bad file descriptor``. Дескриптор файла должен быть закрыт "
"только один раз. В худшем случае двойное закрытие может привести к сбою "
"(пример см. в :issue:`18748`)."

#: ../../library/devmode.rst:219
msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file "
"with ``closefd=False``."
msgstr ""
"Исправление состоит в том, чтобы удалить строку ``os.close(fp.fileno())`` "
"или открыть файл с ``closefd=False``."
