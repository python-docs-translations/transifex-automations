# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-28 14:56+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/numbers.rst:2
msgid ":mod:`!numbers` --- Numeric abstract base classes"
msgstr ":mod:`!numbers` --- Числовые абстрактные базовые классы"

#: ../../library/numbers.rst:7
msgid "**Source code:** :source:`Lib/numbers.py`"
msgstr "**Исходный код:** :source:`Lib/numbers.py`"

#: ../../library/numbers.rst:11
msgid ""
"The :mod:`!numbers` module (:pep:`3141`) defines a hierarchy of numeric :"
"term:`abstract base classes <abstract base class>` which progressively "
"define more operations.  None of the types defined in this module are "
"intended to be instantiated."
msgstr ""
"Модуль :mod:`!numbers` (:pep:`3141`) определяет иерархию числовых :term:"
"`абстрактных базовых классов <абстрактный базовый класс>`, которые "
"постепенно определяют больше операций. Ни один из типов, определенных в этом "
"модуле, не предназначен для создания экземпляров."

#: ../../library/numbers.rst:18
msgid ""
"The root of the numeric hierarchy. If you just want to check if an argument "
"*x* is a number, without caring what kind, use ``isinstance(x, Number)``."
msgstr ""
"Корень числовой иерархии. Если вы просто хотите проверить, является ли "
"аргумент *x* числом, не заботясь о том, какого типа, используйте "
"isinstance(x, Number)``."

#: ../../library/numbers.rst:23
msgid "The numeric tower"
msgstr "Числовая башня"

#: ../../library/numbers.rst:27
msgid ""
"Subclasses of this type describe complex numbers and include the operations "
"that work on the built-in :class:`complex` type. These are: conversions to :"
"class:`complex` and :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, ``-"
"``, ``*``, ``/``, ``**``, :func:`abs`, :meth:`conjugate`, ``==``, and ``!"
"=``. All except ``-`` and ``!=`` are abstract."
msgstr ""
"Подклассы этого типа описывают комплексные числа и включают операции, "
"которые работают со встроенным типом :class:`complex`. Это: преобразования "
"в :class:`complex` и :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, ``-"
"``, ``* ``, ``/``, ``**``, :func:`abs`, :meth:`conjugate`, ``==`` и ``!=``. "
"Все, кроме ``-`` и ``!=``, являются абстрактными."

#: ../../library/numbers.rst:35
msgid "Abstract. Retrieves the real component of this number."
msgstr "Абстрактный. Получает действительную составляющую этого числа."

#: ../../library/numbers.rst:39
msgid "Abstract. Retrieves the imaginary component of this number."
msgstr "Абстрактный. Получает мнимую составляющую этого числа."

#: ../../library/numbers.rst:44
msgid ""
"Abstract. Returns the complex conjugate. For example, ``(1+3j).conjugate() "
"== (1-3j)``."
msgstr ""
"Абстрактный. Возвращает комплексно-сопряженное число. Например, ``(1+3j)."
"conjugate() == (1-3j)``."

#: ../../library/numbers.rst:49
msgid ""
"To :class:`Complex`, :class:`!Real` adds the operations that work on real "
"numbers."
msgstr ""
"К :class:`Complex`, :class:`!Real` добавляются операции, которые работают с "
"действительными числами."

#: ../../library/numbers.rst:52
msgid ""
"In short, those are: a conversion to :class:`float`, :func:`math.trunc`, :"
"func:`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, ``//``, "
"``%``, ``<``, ``<=``, ``>``, and ``>=``."
msgstr ""
"Вкратце, это: преобразование в :class:`float`, :func:`math.trunc`, :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, ``//``, "
"``%``, ``<``, ``< = ``, ``>`` и ``> = ``."

#: ../../library/numbers.rst:56
msgid ""
"Real also provides defaults for :func:`complex`, :attr:`~Complex.real`, :"
"attr:`~Complex.imag`, and :meth:`~Complex.conjugate`."
msgstr ""
"Real также предоставляет значения по умолчанию для :func:`complex`, :attr:"
"`~Complex.real`, :attr:`~Complex.imag` и :meth:`~Complex.conjugate`."

#: ../../library/numbers.rst:62
msgid ""
"Subtypes :class:`Real` and adds :attr:`~Rational.numerator` and :attr:"
"`~Rational.denominator` properties. It also provides a default for :func:"
"`float`."
msgstr ""
"Подтипы :class:`Real` и добавляют свойства :attr:`~Rational.numerator` и :"
"attr:`~Rational.denominator`. Он также предоставляет значение по умолчанию "
"для :func:`float`."

#: ../../library/numbers.rst:66
msgid ""
"The :attr:`~Rational.numerator` and :attr:`~Rational.denominator` values "
"should be instances of :class:`Integral` and should be in lowest terms with :"
"attr:`~Rational.denominator` positive."
msgstr ""
"Значения :attr:`~Rational.numerator` и :attr:`~Rational.denominator` должны "
"быть экземплярами :class:`Integral` и в наименьших терминах должны быть "
"положительными."

#: ../../library/numbers.rst:72 ../../library/numbers.rst:76
msgid "Abstract."
msgstr "Абстракция."

#: ../../library/numbers.rst:81
msgid ""
"Subtypes :class:`Rational` and adds a conversion to :class:`int`.  Provides "
"defaults for :func:`float`, :attr:`~Rational.numerator`, and :attr:"
"`~Rational.denominator`.  Adds abstract methods for :func:`pow` with modulus "
"and bit-string operations: ``<<``, ``>>``, ``&``, ``^``, ``|``, ``~``."
msgstr ""
"Подтипы :class:`Rational` и добавляют преобразование в :class:`int`. "
"Предоставляет значения по умолчанию для :func:`float`, :attr:`~Rational."
"numerator` и :attr:`~Rational.denominator`. Добавляет абстрактные методы "
"для :func:`pow` с операциями с модулями и битовыми строками: ``<<``, ``>>``, "
"``&``, ``^``, ``|``, ``~``."

#: ../../library/numbers.rst:89
msgid "Notes for type implementers"
msgstr "Примечания для разработчиков типов"

#: ../../library/numbers.rst:91
msgid ""
"Implementers should be careful to make equal numbers equal and hash them to "
"the same values. This may be subtle if there are two different extensions of "
"the real numbers. For example, :class:`fractions.Fraction` implements :func:"
"`hash` as follows::"
msgstr ""
"Разработчики должны быть осторожны, чтобы сделать равные числа равными и "
"хэшировать их до одинаковых значений. Это может быть незаметно, если "
"существуют два разных расширения действительных чисел. Например, :class:"
"`fractions.Fraction` реализует :func:`hash` следующим образом:"

#: ../../library/numbers.rst:96
msgid ""
"def __hash__(self):\n"
"    if self.denominator == 1:\n"
"        # Get integers right.\n"
"        return hash(self.numerator)\n"
"    # Expensive check, but definitely correct.\n"
"    if self == float(self):\n"
"        return hash(float(self))\n"
"    else:\n"
"        # Use tuple's hash to avoid a high collision rate on\n"
"        # simple fractions.\n"
"        return hash((self.numerator, self.denominator))"
msgstr ""
"def __hash__(self):\n"
"    if self.denominator == 1:\n"
"        # Get integers right.\n"
"        return hash(self.numerator)\n"
"    # Expensive check, but definitely correct.\n"
"    if self == float(self):\n"
"        return hash(float(self))\n"
"    else:\n"
"        # Use tuple's hash to avoid a high collision rate on\n"
"        # simple fractions.\n"
"        return hash((self.numerator, self.denominator))"

#: ../../library/numbers.rst:110
msgid "Adding More Numeric ABCs"
msgstr "Добавление большего количества числовых букв ABC"

#: ../../library/numbers.rst:112
msgid ""
"There are, of course, more possible ABCs for numbers, and this would be a "
"poor hierarchy if it precluded the possibility of adding those. You can add "
"``MyFoo`` between :class:`Complex` and :class:`Real` with::"
msgstr ""
"Конечно, существует больше возможных букв ABC для чисел, и это была бы "
"плохая иерархия, если бы она исключала возможность их добавления. Вы можете "
"добавить MyFoo между :class:`Complex` и :class:`Real` с помощью::"

#: ../../library/numbers.rst:117
msgid ""
"class MyFoo(Complex): ...\n"
"MyFoo.register(Real)"
msgstr ""
"class MyFoo(Complex): ...\n"
"MyFoo.register(Real)"

#: ../../library/numbers.rst:124
msgid "Implementing the arithmetic operations"
msgstr "Реализация арифметических операций"

#: ../../library/numbers.rst:126
msgid ""
"We want to implement the arithmetic operations so that mixed-mode operations "
"either call an implementation whose author knew about the types of both "
"arguments, or convert both to the nearest built in type and do the operation "
"there. For subtypes of :class:`Integral`, this means that :meth:`~object."
"__add__` and :meth:`~object.__radd__` should be defined as::"
msgstr ""
"Мы хотим реализовать арифметические операции так, чтобы операции смешанного "
"режима либо вызывали реализацию, автор которой знал о типах обоих "
"аргументов, либо конвертировали оба типа в ближайший встроенный тип и "
"выполняли операцию там. Для подтипов :class:`Integral` это означает, что :"
"meth:`~object.__add__` и :meth:`~object.__radd__` должны быть определены "
"как::"

#: ../../library/numbers.rst:133
msgid ""
"class MyIntegral(Integral):\n"
"\n"
"    def __add__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(self, other)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(self, other)\n"
"        else:\n"
"            return NotImplemented\n"
"\n"
"    def __radd__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(other, self)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(other, self)\n"
"        elif isinstance(other, Integral):\n"
"            return int(other) + int(self)\n"
"        elif isinstance(other, Real):\n"
"            return float(other) + float(self)\n"
"        elif isinstance(other, Complex):\n"
"            return complex(other) + complex(self)\n"
"        else:\n"
"            return NotImplemented"
msgstr ""
"class MyIntegral(Integral):\n"
"\n"
"    def __add__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(self, other)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(self, other)\n"
"        else:\n"
"            return NotImplemented\n"
"\n"
"    def __radd__(self, other):\n"
"        if isinstance(other, MyIntegral):\n"
"            return do_my_adding_stuff(other, self)\n"
"        elif isinstance(other, OtherTypeIKnowAbout):\n"
"            return do_my_other_adding_stuff(other, self)\n"
"        elif isinstance(other, Integral):\n"
"            return int(other) + int(self)\n"
"        elif isinstance(other, Real):\n"
"            return float(other) + float(self)\n"
"        elif isinstance(other, Complex):\n"
"            return complex(other) + complex(self)\n"
"        else:\n"
"            return NotImplemented"

#: ../../library/numbers.rst:158
msgid ""
"There are 5 different cases for a mixed-type operation on subclasses of :"
"class:`Complex`. I'll refer to all of the above code that doesn't refer to "
"``MyIntegral`` and ``OtherTypeIKnowAbout`` as \"boilerplate\". ``a`` will be "
"an instance of ``A``, which is a subtype of :class:`Complex` (``a : A <: "
"Complex``), and ``b : B <: Complex``. I'll consider ``a + b``:"
msgstr ""
"Существует 5 различных случаев операции смешанного типа над подклассами :"
"class:`Complex`. Я буду называть весь приведенный выше код, который не "
"относится к MyIntegral и OtherTypeIKnowAbout, «шаблоном». ``a`` будет "
"экземпляром ``A``, который является подтипом :class:`Complex` (``a : A <: "
"Complex``) и ``b : B <: Complex` `. Я рассмотрю ``a + b``:"

#: ../../library/numbers.rst:165
msgid ""
"If ``A`` defines an :meth:`~object.__add__` which accepts ``b``, all is well."
msgstr ""
"Если ``A`` определяет :meth:`~object.__add__`, который принимает ``b``, все "
"в порядке."

#: ../../library/numbers.rst:167
msgid ""
"If ``A`` falls back to the boilerplate code, and it were to return a value "
"from :meth:`~object.__add__`, we'd miss the possibility that ``B`` defines a "
"more intelligent :meth:`~object.__radd__`, so the boilerplate should return :"
"data:`NotImplemented` from :meth:`!__add__`. (Or ``A`` may not implement :"
"meth:`!__add__` at all.)"
msgstr ""
"Если ``A`` вернется к шаблонному коду и будет возвращать значение из :meth:"
"`~object.__add__`, мы упустим возможность того, что ``B`` определяет более "
"интеллектуальный :meth: `~object.__radd__`, поэтому шаблон должен "
"возвращать :data:`NotImplemented` из :meth:`!__add__`. (Или ``A`` может "
"вообще не реализовывать :meth:`!__add__`.)"

#: ../../library/numbers.rst:173
msgid ""
"Then ``B``'s :meth:`~object.__radd__` gets a chance. If it accepts ``a``, "
"all is well."
msgstr ""
"Тогда :meth:`~object.__radd__` ``B`` получает шанс. Если он принимает ``a``, "
"все в порядке."

#: ../../library/numbers.rst:175
msgid ""
"If it falls back to the boilerplate, there are no more possible methods to "
"try, so this is where the default implementation should live."
msgstr ""
"Если он вернется к шаблону, возможных методов больше не будет, поэтому "
"именно здесь должна жить реализация по умолчанию."

#: ../../library/numbers.rst:178
msgid ""
"If ``B <: A``, Python tries ``B.__radd__`` before ``A.__add__``. This is ok, "
"because it was implemented with knowledge of ``A``, so it can handle those "
"instances before delegating to :class:`Complex`."
msgstr ""
"Если ``B <: A``, Python пытается использовать ``B.__radd__`` перед ``A."
"__add__``. Это нормально, потому что он был реализован с учетом ``A``, "
"поэтому он может обрабатывать эти экземпляры перед делегированием :class:"
"`Complex`."

#: ../../library/numbers.rst:183
msgid ""
"If ``A <: Complex`` and ``B <: Real`` without sharing any other knowledge, "
"then the appropriate shared operation is the one involving the built in :"
"class:`complex`, and both :meth:`~object.__radd__` s land there, so ``a+b == "
"b+a``."
msgstr ""
"Если ``A <: Complex`` и ``B <: Real`` без совместного использования каких-"
"либо других знаний, то подходящей общей операцией является та, которая "
"включает встроенный :class:`complex`, и обе :meth:`~ object.__radd__` "
"приземляется там, поэтому ``a+b == b+a``."

#: ../../library/numbers.rst:188
msgid ""
"Because most of the operations on any given type will be very similar, it "
"can be useful to define a helper function which generates the forward and "
"reverse instances of any given operator. For example, :class:`fractions."
"Fraction` uses::"
msgstr ""
"Поскольку большинство операций над любым типом будут очень похожими, может "
"быть полезно определить вспомогательную функцию, которая генерирует прямые и "
"обратные экземпляры любого данного оператора. Например, :class:`fractions."
"Fraction` использует::"

#: ../../library/numbers.rst:193
msgid ""
"def _operator_fallbacks(monomorphic_operator, fallback_operator):\n"
"    def forward(a, b):\n"
"        if isinstance(b, (int, Fraction)):\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(b, float):\n"
"            return fallback_operator(float(a), b)\n"
"        elif isinstance(b, complex):\n"
"            return fallback_operator(complex(a), b)\n"
"        else:\n"
"            return NotImplemented\n"
"    forward.__name__ = '__' + fallback_operator.__name__ + '__'\n"
"    forward.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    def reverse(b, a):\n"
"        if isinstance(a, Rational):\n"
"            # Includes ints.\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(a, Real):\n"
"            return fallback_operator(float(a), float(b))\n"
"        elif isinstance(a, Complex):\n"
"            return fallback_operator(complex(a), complex(b))\n"
"        else:\n"
"            return NotImplemented\n"
"    reverse.__name__ = '__r' + fallback_operator.__name__ + '__'\n"
"    reverse.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    return forward, reverse\n"
"\n"
"def _add(a, b):\n"
"    \"\"\"a + b\"\"\"\n"
"    return Fraction(a.numerator * b.denominator +\n"
"                    b.numerator * a.denominator,\n"
"                    a.denominator * b.denominator)\n"
"\n"
"__add__, __radd__ = _operator_fallbacks(_add, operator.add)\n"
"\n"
"# ..."
msgstr ""
"def _operator_fallbacks(monomorphic_operator, fallback_operator):\n"
"    def forward(a, b):\n"
"        if isinstance(b, (int, Fraction)):\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(b, float):\n"
"            return fallback_operator(float(a), b)\n"
"        elif isinstance(b, complex):\n"
"            return fallback_operator(complex(a), b)\n"
"        else:\n"
"            return NotImplemented\n"
"    forward.__name__ = '__' + fallback_operator.__name__ + '__'\n"
"    forward.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    def reverse(b, a):\n"
"        if isinstance(a, Rational):\n"
"            # Includes ints.\n"
"            return monomorphic_operator(a, b)\n"
"        elif isinstance(a, Real):\n"
"            return fallback_operator(float(a), float(b))\n"
"        elif isinstance(a, Complex):\n"
"            return fallback_operator(complex(a), complex(b))\n"
"        else:\n"
"            return NotImplemented\n"
"    reverse.__name__ = '__r' + fallback_operator.__name__ + '__'\n"
"    reverse.__doc__ = monomorphic_operator.__doc__\n"
"\n"
"    return forward, reverse\n"
"\n"
"def _add(a, b):\n"
"    \"\"\"a + b\"\"\"\n"
"    return Fraction(a.numerator * b.denominator +\n"
"                    b.numerator * a.denominator,\n"
"                    a.denominator * b.denominator)\n"
"\n"
"__add__, __radd__ = _operator_fallbacks(_add, operator.add)\n"
"\n"
"# ..."
