# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/atexit.rst:2
msgid ":mod:`!atexit` --- Exit handlers"
msgstr ":mod:`!atexit` --- Обработчики выхода"

#: ../../library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
"Модуль :mod:`atexit` определяет функции для регистрации и отмены регистрации "
"функций очистки. Зарегистрированные таким образом функции автоматически "
"выполняются при обычном завершении работы интерпретатора. :mod:`atexit` "
"запускает эти функции в *обратном* порядке их регистрации; если вы "
"зарегистрируете ``A``, ``B`` и ``C``, во время завершения интерпретатора они "
"будут выполняться в порядке ``C``, ``B``, ``A`` ."

#: ../../library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**Примечание:** Функции, зарегистрированные через этот модуль, не "
"вызываются, когда программа завершается сигналом, не обрабатываемым Python, "
"когда обнаруживается фатальная внутренняя ошибка Python или когда "
"вызывается :func:`os._exit`."

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a "
"cleanup function is undefined."
msgstr ""
"**Примечание.** Эффект регистрации или отмены регистрации функций внутри "
"функции очистки не определен."

#: ../../library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"При использовании с субинтерпретаторами C-API зарегистрированные функции "
"являются локальными для интерпретатора, в котором они были зарегистрированы."

#: ../../library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"Зарегистрируйте *func* как функцию, которая будет выполняться при "
"завершении. Любые необязательные аргументы, которые должны быть переданы в "
"*func*, должны быть переданы в качестве аргументов в :func:`register`. Можно "
"зарегистрировать одну и ту же функцию и аргументы более одного раза."

#: ../../library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"При обычном завершении программы (например, если вызывается :func:`sys.exit` "
"или завершается выполнение основного модуля), все зарегистрированные функции "
"вызываются в порядке последней входящей - первой исходящей. Предполагается, "
"что модули более низкого уровня обычно импортируются раньше модулей более "
"высокого уровня и, следовательно, их необходимо очистить позже."

#: ../../library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"Если во время выполнения обработчиков выхода возникает исключение, выводится "
"обратная трассировка (если не возникает :exc:`SystemExit`) и сохраняется "
"информация об исключении. После того, как все обработчики выхода получили "
"возможность выполниться, повторно вызывается последнее вызванное исключение."

#: ../../library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"Эта функция возвращает *func*, что позволяет использовать ее в качестве "
"декоратора."

#: ../../library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""
"Запуск новых потоков или вызов :func:`os.fork` из зарегистрированной функции "
"может привести к состоянию гонки между основным потоком выполнения Python, "
"освобождающим состояния потока, в то время как внутренние процедуры :mod:"
"`threading` или новый процесс пытаются использовать это состояние. Это может "
"привести к сбоям, а не к полному завершению работы."

#: ../../library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""
"Попытки запустить новый поток или :func:`os.fork` новый процесс в "
"зарегистрированной функции теперь приводят к :exc:`RuntimeError`."

#: ../../library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"Удалите *func* из списка функций, которые будут запускаться при завершении "
"работы интерпретатора. :func:`unregister` ничего не делает, если *func* не "
"была ранее зарегистрирована. Если *func* была зарегистрирована более одного "
"раза, каждое появление этой функции в стеке вызовов :mod:`atexit` будет "
"удалено. Сравнения на равенство (``==``) используются внутри во время отмены "
"регистрации, поэтому ссылки на функции не обязательно должны иметь "
"совпадающие идентификаторы."

#: ../../library/atexit.rst:74
msgid "Module :mod:`readline`"
msgstr "Модуль :mod:`readline`"

#: ../../library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
"Полезный пример :mod:`atexit` для чтения и записи :mod:`readline` файлов "
"истории."

#: ../../library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr "Пример :mod:`atexit`"

#: ../../library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"Следующий простой пример демонстрирует, как модуль может инициализировать "
"счетчик из файла при его импорте и автоматически сохранять обновленное "
"значение счетчика при завершении программы, не полагаясь на то, что "
"приложение выполняет явный вызов этого модуля при завершении. ::"

#: ../../library/atexit.rst:89
msgid ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"
msgstr ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"

#: ../../library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
"Позиционные и ключевые аргументы также могут быть переданы в :func:"
"`register` для передачи зарегистрированной функции при ее вызове:"

#: ../../library/atexit.rst:110
msgid ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"

#: ../../library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr "Использование в качестве :term:`декоратора`::"

#: ../../library/atexit.rst:121
msgid ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"
msgstr ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"

#: ../../library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr ""
"Это работает только с функциями, которые можно вызывать без аргументов."
