# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:16+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/itertools.rst:2
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""

#: ../../library/itertools.rst:20
msgid ""
"This module implements a number of :term:`iterator` building blocks inspired "
"by constructs from APL, Haskell, and SML.  Each has been recast in a form "
"suitable for Python."
msgstr ""
"Этот модуль реализует ряд строительных блоков :term:`iterator`, "
"вдохновленных конструкциями из APL, Haskell и SML. Каждый из них был "
"переработан в форму, подходящую для Python."

#: ../../library/itertools.rst:24
msgid ""
"The module standardizes a core set of fast, memory efficient tools that are "
"useful by themselves or in combination.  Together, they form an \"iterator "
"algebra\" making it possible to construct specialized tools succinctly and "
"efficiently in pure Python."
msgstr ""
"Модуль стандартизирует основной набор быстрых инструментов с эффективным "
"использованием памяти, которые полезны сами по себе или в сочетании. Вместе "
"они образуют «алгебру итераторов», позволяющую лаконично и эффективно "
"создавать специализированные инструменты на чистом Python."

#: ../../library/itertools.rst:29
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces "
"a sequence ``f(0), f(1), ...``.  The same effect can be achieved in Python "
"by combining :func:`map` and :func:`count` to form ``map(f, count())``."
msgstr ""
"Например, SML предоставляет инструмент табулирования: ``tabulate(f)``, "
"который создает последовательность ``f(0), f(1), ...``. Того же эффекта "
"можно добиться в Python, комбинируя :func:`map` и :func:`count` для "
"формирования ``map(f, count())``."

#: ../../library/itertools.rst:33
msgid ""
"These tools and their built-in counterparts also work well with the high-"
"speed functions in the :mod:`operator` module.  For example, the "
"multiplication operator can be mapped across two vectors to form an "
"efficient dot-product: ``sum(starmap(operator.mul, zip(vec1, vec2, "
"strict=True)))``."
msgstr ""
"Эти инструменты и их встроенные аналоги также хорошо работают с "
"высокоскоростными функциями модуля :mod:`operator`. Например, оператор "
"умножения можно сопоставить с двумя векторами, чтобы сформировать "
"эффективное скалярное произведение: ``sum(starmap(operator.mul, zip(vec1, "
"vec2, strict=True)))``."

#: ../../library/itertools.rst:39
msgid "**Infinite iterators:**"
msgstr "**Бесконечные итераторы:**."

#: ../../library/itertools.rst:42 ../../library/itertools.rst:52
#: ../../library/itertools.rst:72
msgid "Iterator"
msgstr "Итератор"

#: ../../library/itertools.rst:42 ../../library/itertools.rst:52
#: ../../library/itertools.rst:72
msgid "Arguments"
msgstr "Аргументы"

#: ../../library/itertools.rst:42 ../../library/itertools.rst:52
#: ../../library/itertools.rst:72 ../../library/itertools.rst:81
msgid "Results"
msgstr "Результаты"

#: ../../library/itertools.rst:42 ../../library/itertools.rst:52
msgid "Example"
msgstr "Пример"

#: ../../library/itertools.rst:44
msgid ":func:`count`"
msgstr ":func:`count`"

#: ../../library/itertools.rst:44
msgid "start, [step]"
msgstr ""

#: ../../library/itertools.rst:44
msgid "start, start+step, start+2*step, ..."
msgstr "start, start+step, start+2*step, ..."

#: ../../library/itertools.rst:44
msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr ""

#: ../../library/itertools.rst:45
msgid ":func:`cycle`"
msgstr ":func:`cycle`"

#: ../../library/itertools.rst:45
msgid "p"
msgstr "p"

#: ../../library/itertools.rst:45
msgid "p0, p1, ... plast, p0, p1, ..."
msgstr "p0, p1, ... plast, p0, p1, ..."

#: ../../library/itertools.rst:45
msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr ""

#: ../../library/itertools.rst:46
msgid ":func:`repeat`"
msgstr ":func:`repeat`"

#: ../../library/itertools.rst:46
msgid "elem [,n]"
msgstr "elem [,n]"

#: ../../library/itertools.rst:46
msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr "elem, elem, elem, ... endlessly or up to n times"

#: ../../library/itertools.rst:46
msgid "``repeat(10, 3) --> 10 10 10``"
msgstr ""

#: ../../library/itertools.rst:49
msgid "**Iterators terminating on the shortest input sequence:**"
msgstr ""
"**Итераторы, заканчивающиеся на самой короткой входной последовательности:**"

#: ../../library/itertools.rst:54
msgid ":func:`accumulate`"
msgstr ":func:`accumulate`"

#: ../../library/itertools.rst:54
msgid "p [,func]"
msgstr "p [,func]"

#: ../../library/itertools.rst:54
msgid "p0, p0+p1, p0+p1+p2, ..."
msgstr "p0, p0+p1, p0+p1+p2, ..."

#: ../../library/itertools.rst:54
msgid "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"
msgstr ""

#: ../../library/itertools.rst:55
msgid ":func:`chain`"
msgstr ":func:`chain`"

#: ../../library/itertools.rst:55 ../../library/itertools.rst:66
msgid "p, q, ..."
msgstr "p, q, ..."

#: ../../library/itertools.rst:55 ../../library/itertools.rst:56
msgid "p0, p1, ... plast, q0, q1, ..."
msgstr "p0, p1, ... plast, q0, q1, ..."

#: ../../library/itertools.rst:55
msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr ""

#: ../../library/itertools.rst:56
msgid ":func:`chain.from_iterable`"
msgstr ":func:`chain.from_iterable`"

#: ../../library/itertools.rst:56 ../../library/itertools.rst:62
msgid "iterable"
msgstr "итерируемый объект"

#: ../../library/itertools.rst:56
msgid "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"
msgstr ""

#: ../../library/itertools.rst:57
msgid ":func:`compress`"
msgstr ":func:`compress`"

#: ../../library/itertools.rst:57
msgid "data, selectors"
msgstr "данные, селекторы"

#: ../../library/itertools.rst:57
msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr "(d[0] if s[0]), (d[1] if s[1]), ..."

#: ../../library/itertools.rst:57
msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr ""

#: ../../library/itertools.rst:58
msgid ":func:`dropwhile`"
msgstr ":func:`dropwhile`"

#: ../../library/itertools.rst:58 ../../library/itertools.rst:59
#: ../../library/itertools.rst:64
msgid "pred, seq"
msgstr ""

#: ../../library/itertools.rst:58
msgid "seq[n], seq[n+1], starting when pred fails"
msgstr ""

#: ../../library/itertools.rst:58
msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr ""

#: ../../library/itertools.rst:59
msgid ":func:`filterfalse`"
msgstr ":func:`filterfalse`"

#: ../../library/itertools.rst:59
msgid "elements of seq where pred(elem) is false"
msgstr ""

#: ../../library/itertools.rst:59
msgid "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr ""

#: ../../library/itertools.rst:60
msgid ":func:`groupby`"
msgstr ":func:`groupby`"

#: ../../library/itertools.rst:60
msgid "iterable[, key]"
msgstr "итерируемый объект[, ключ]"

#: ../../library/itertools.rst:60
msgid "sub-iterators grouped by value of key(v)"
msgstr "подитераторы, сгруппированные по значению ключа (v)"

#: ../../library/itertools.rst:61
msgid ":func:`islice`"
msgstr ":func:`islice`"

#: ../../library/itertools.rst:61
msgid "seq, [start,] stop [, step]"
msgstr "seq, [start,] stop [, step]"

#: ../../library/itertools.rst:61
msgid "elements from seq[start:stop:step]"
msgstr "элементы из seq[start:stop:step]"

#: ../../library/itertools.rst:61
msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr ""

#: ../../library/itertools.rst:62
msgid ":func:`pairwise`"
msgstr ":func:`pairwise`"

#: ../../library/itertools.rst:62
msgid "(p[0], p[1]), (p[1], p[2])"
msgstr "(p[0], p[1]), (p[1], p[2])"

#: ../../library/itertools.rst:62
msgid "``pairwise('ABCDEFG') --> AB BC CD DE EF FG``"
msgstr ""

#: ../../library/itertools.rst:63
msgid ":func:`starmap`"
msgstr ":func:`starmap`"

#: ../../library/itertools.rst:63
msgid "func, seq"
msgstr "func, seq"

#: ../../library/itertools.rst:63
msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr "func(\\*seq[0]), func(\\*seq[1]), ..."

#: ../../library/itertools.rst:63
msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr ""

#: ../../library/itertools.rst:64
msgid ":func:`takewhile`"
msgstr ":func:`takewhile`"

#: ../../library/itertools.rst:64
msgid "seq[0], seq[1], until pred fails"
msgstr ""

#: ../../library/itertools.rst:64
msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr ""

#: ../../library/itertools.rst:65
msgid ":func:`tee`"
msgstr ":func:`tee`"

#: ../../library/itertools.rst:65
msgid "it, n"
msgstr "это, n"

#: ../../library/itertools.rst:65
msgid "it1, it2, ... itn  splits one iterator into n"
msgstr "it1, it2, ... itn разбивает один итератор на n"

#: ../../library/itertools.rst:66
msgid ":func:`zip_longest`"
msgstr ":func:`zip_longest`"

#: ../../library/itertools.rst:66
msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr "(p[0], q[0]), (p[1], q[1]), ..."

#: ../../library/itertools.rst:66
msgid "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr ""

#: ../../library/itertools.rst:69
msgid "**Combinatoric iterators:**"
msgstr "**Комбинаторные итераторы:**."

#: ../../library/itertools.rst:74
msgid ":func:`product`"
msgstr ":func:`product`"

#: ../../library/itertools.rst:74
msgid "p, q, ... [repeat=1]"
msgstr "p, q, ... [repeat=1]"

#: ../../library/itertools.rst:74
msgid "cartesian product, equivalent to a nested for-loop"
msgstr "декартово произведение, эквивалентное вложенному циклу for"

#: ../../library/itertools.rst:75
msgid ":func:`permutations`"
msgstr ":func:`permutations`"

#: ../../library/itertools.rst:75
msgid "p[, r]"
msgstr "p[, r]"

#: ../../library/itertools.rst:75
msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr ""
"Кортежи длины r, все возможные упорядочения, отсутствие повторяющихся "
"элементов"

#: ../../library/itertools.rst:76
msgid ":func:`combinations`"
msgstr ":func:`combinations`"

#: ../../library/itertools.rst:76 ../../library/itertools.rst:77
msgid "p, r"
msgstr "п, р"

#: ../../library/itertools.rst:76
msgid "r-length tuples, in sorted order, no repeated elements"
msgstr ""
"Кортежи длины r, в отсортированном порядке, без повторяющихся элементов"

#: ../../library/itertools.rst:77
msgid ":func:`combinations_with_replacement`"
msgstr ":func:`combinations_with_replacement`"

#: ../../library/itertools.rst:77
msgid "r-length tuples, in sorted order, with repeated elements"
msgstr "Кортежи длины r в отсортированном порядке с повторяющимися элементами"

#: ../../library/itertools.rst:81
msgid "Examples"
msgstr "Примеры"

#: ../../library/itertools.rst:83
msgid "``product('ABCD', repeat=2)``"
msgstr "``product('ABCD', repeat=2)``"

#: ../../library/itertools.rst:83
msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"

#: ../../library/itertools.rst:84
msgid "``permutations('ABCD', 2)``"
msgstr "``permutations('ABCD', 2)``"

#: ../../library/itertools.rst:84
msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr "``AB AC AD BA BC BD CA CB CD DA DB DC``"

#: ../../library/itertools.rst:85
msgid "``combinations('ABCD', 2)``"
msgstr "``combinations('ABCD', 2)``"

#: ../../library/itertools.rst:85
msgid "``AB AC AD BC BD CD``"
msgstr "``AB AC AD BC BD CD``"

#: ../../library/itertools.rst:86
msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr ""
" 2)``\" data-copy-variable=\"``combinations_with_replacement('ABCD', 2)``\" "
"dir=\"ltr\" data-num=\"1\" contenteditable=\"false\" "
"spellcheck=\"false\">``combinations_with_replacement('ABCD', 2)``"

#: ../../library/itertools.rst:86
msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr "``AA AB AC AD BB BC BD CC CD DD``"

#: ../../library/itertools.rst:93
msgid "Itertool functions"
msgstr ""

#: ../../library/itertools.rst:95
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""
"Следующий модуль выполняет функции создания и возврата итераторов. Некоторые "
"предоставляют потоки бесконечной длины, поэтому доступ к ним следует "
"осуществлять только с помощью функций или циклов, усекающих поток."

#: ../../library/itertools.rst:101
msgid ""
"Make an iterator that returns accumulated sums, or accumulated results of "
"other binary functions (specified via the optional *func* argument)."
msgstr ""

#: ../../library/itertools.rst:105
msgid ""
"If *func* is supplied, it should be a function of two arguments. Elements of "
"the input *iterable* may be any type that can be accepted as arguments to "
"*func*. (For example, with the default operation of addition, elements may "
"be any addable type including :class:`~decimal.Decimal` or :class:"
"`~fractions.Fraction`.)"
msgstr ""

#: ../../library/itertools.rst:112
msgid ""
"Usually, the number of elements output matches the input iterable. However, "
"if the keyword argument *initial* is provided, the accumulation leads off "
"with the *initial* value so that the output has one more element than the "
"input iterable."
msgstr ""

#: ../../library/itertools.rst:117 ../../library/itertools.rst:203
#: ../../library/itertools.rst:252 ../../library/itertools.rst:452
#: ../../library/itertools.rst:488 ../../library/itertools.rst:515
#: ../../library/itertools.rst:595
msgid "Roughly equivalent to::"
msgstr "Примерно эквивалентно::"

#: ../../library/itertools.rst:136
msgid ""
"There are a number of uses for the *func* argument.  It can be set to :func:"
"`min` for a running minimum, :func:`max` for a running maximum, or :func:"
"`operator.mul` for a running product.  Amortization tables can be built by "
"accumulating interest and applying payments:"
msgstr ""

#: ../../library/itertools.rst:154
msgid ""
"See :func:`functools.reduce` for a similar function that returns only the "
"final accumulated value."
msgstr ""
"См. :func:`functools.reduce`, где описана аналогичная функция, которая "
"возвращает только окончательное накопленное значение."

#: ../../library/itertools.rst:159
msgid "Added the optional *func* parameter."
msgstr ""

#: ../../library/itertools.rst:162
msgid "Added the optional *initial* parameter."
msgstr "Добавлен необязательный параметр *initial*."

#: ../../library/itertools.rst:167
msgid ""
"Make an iterator that returns elements from the first iterable until it is "
"exhausted, then proceeds to the next iterable, until all of the iterables "
"are exhausted.  Used for treating consecutive sequences as a single "
"sequence. Roughly equivalent to::"
msgstr ""
"Создайте итератор, который возвращает элементы из первой итерации, пока она "
"не будет исчерпана, а затем переходит к следующей итерации, пока все "
"итерации не будут исчерпаны. Используется для обработки последовательных "
"последовательностей как одной последовательности. Примерно эквивалентно::"

#: ../../library/itertools.rst:181
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a single "
"iterable argument that is evaluated lazily.  Roughly equivalent to::"
msgstr ""
"Альтернативный конструктор для :func:`chain`. Получает связанные входные "
"данные из одного итерируемого аргумента, который оценивается лениво. "
"Примерно эквивалентно::"

#: ../../library/itertools.rst:193
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""
"Возвращает подпоследовательности элементов длиной *r* из входных *iterable*."

#: ../../library/itertools.rst:195 ../../library/itertools.rst:244
msgid ""
"The combination tuples are emitted in lexicographic ordering according to "
"the order of the input *iterable*. So, if the input *iterable* is sorted, "
"the output tuples will be produced in sorted order."
msgstr ""

#: ../../library/itertools.rst:199
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeated values in "
"each combination."
msgstr ""

#: ../../library/itertools.rst:225
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence of :"
"func:`permutations` after filtering entries where the elements are not in "
"sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:236
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""

#: ../../library/itertools.rst:241
msgid ""
"Return *r* length subsequences of elements from the input *iterable* "
"allowing individual elements to be repeated more than once."
msgstr ""
"Возвращает подпоследовательности элементов длиной *r* из входных данных "
"*iterable*, позволяющие повторять отдельные элементы более одного раза."

#: ../../library/itertools.rst:248
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, the generated combinations will also be "
"unique."
msgstr ""

#: ../../library/itertools.rst:271
msgid ""
"The code for :func:`combinations_with_replacement` can be also expressed as "
"a subsequence of :func:`product` after filtering entries where the elements "
"are not in sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:282
msgid ""
"The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr ""

#: ../../library/itertools.rst:289
msgid ""
"Make an iterator that filters elements from *data* returning only those that "
"have a corresponding element in *selectors* that evaluates to ``True``. "
"Stops when either the *data* or *selectors* iterables has been exhausted. "
"Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:303
msgid ""
"Make an iterator that returns evenly spaced values starting with number "
"*start*. Often used as an argument to :func:`map` to generate consecutive "
"data points. Also, used with :func:`zip` to add sequence numbers.  Roughly "
"equivalent to::"
msgstr ""

#: ../../library/itertools.rst:315
msgid ""
"When counting with floating point numbers, better accuracy can sometimes be "
"achieved by substituting multiplicative code such as: ``(start + step * i "
"for i in count())``."
msgstr ""

#: ../../library/itertools.rst:319
msgid "Added *step* argument and allowed non-integer arguments."
msgstr "Добавлен аргумент *step* и разрешены нецелочисленные аргументы."

#: ../../library/itertools.rst:324
msgid ""
"Make an iterator returning elements from the iterable and saving a copy of "
"each. When the iterable is exhausted, return elements from the saved copy.  "
"Repeats indefinitely.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:338
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on the length of the iterable)."
msgstr ""

#: ../../library/itertools.rst:344
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator "
"does not produce *any* output until the predicate first becomes false, so it "
"may have a lengthy start-up time.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:361
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is false. If *predicate* is ``None``, return the "
"items that are false. Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:376
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each element.  "
"If not specified or is ``None``, *key* defaults to an identity function and "
"returns the element unchanged.  Generally, the iterable needs to already be "
"sorted on the same key function."
msgstr ""
"Создайте итератор, который возвращает последовательные ключи и группы из "
"*итератора*. *key* — это функция, вычисляющая значение ключа для каждого "
"элемента. Если не указано или установлено значение «Нет», *key* по умолчанию "
"использует функцию идентификации и возвращает элемент без изменений. Как "
"правило, итерируемый объект уже должен быть отсортирован по одной и той же "
"ключевой функции."

#: ../../library/itertools.rst:382
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  "
"It generates a break or new group every time the value of the key function "
"changes (which is why it is usually necessary to have sorted the data using "
"the same key function).  That behavior differs from SQL's GROUP BY which "
"aggregates common elements regardless of their input order."
msgstr ""
"Работа :func:`groupby` аналогична работе фильтра ``uniq`` в Unix. Он "
"генерирует разрыв или новую группу каждый раз, когда изменяется значение "
"ключевой функции (именно поэтому обычно необходимо отсортировать данные, "
"используя одну и ту же ключевую функцию). Такое поведение отличается от "
"GROUP BY в SQL, который объединяет общие элементы независимо от порядка их "
"ввода."

#: ../../library/itertools.rst:388
msgid ""
"The returned group is itself an iterator that shares the underlying iterable "
"with :func:`groupby`.  Because the source is shared, when the :func:"
"`groupby` object is advanced, the previous group is no longer visible.  So, "
"if that data is needed later, it should be stored as a list::"
msgstr ""
"Возвращенная группа сама по себе является итератором, который использует "
"базовую итерацию совместно с :func:`groupby`. Поскольку источник является "
"общим, при расширении объекта :func:`groupby` предыдущая группа больше не "
"видна. Итак, если эти данные понадобятся позже, их следует сохранить в виде "
"списка::"

#: ../../library/itertools.rst:400
msgid ":func:`groupby` is roughly equivalent to::"
msgstr ":func:`groupby` примерно эквивалентно::"

#: ../../library/itertools.rst:437
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until start "
"is reached. Afterward, elements are returned consecutively unless *step* is "
"set higher than one which results in items being skipped.  If *stop* is "
"``None``, then iteration continues until the iterator is exhausted, if at "
"all; otherwise, it stops at the specified position."
msgstr ""

#: ../../library/itertools.rst:444
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""

#: ../../library/itertools.rst:447
msgid ""
"Unlike regular slicing, :func:`islice` does not support negative values for "
"*start*, *stop*, or *step*.  Can be used to extract related fields from data "
"where the internal structure has been flattened (for example, a multi-line "
"report may list a name field on every third line)."
msgstr ""

#: ../../library/itertools.rst:482
msgid "Return successive overlapping pairs taken from the input *iterable*."
msgstr ""
"Возвращает последовательные перекрывающиеся пары, взятые из входных данных "
"*iterable*."

#: ../../library/itertools.rst:484
msgid ""
"The number of 2-tuples in the output iterator will be one fewer than the "
"number of inputs.  It will be empty if the input iterable has fewer than two "
"values."
msgstr ""
"Количество кортежей из двух кортежей в выходном итераторе будет на единицу "
"меньше, чем количество входных данных. Он будет пустым, если входная "
"итерация имеет менее двух значений."

#: ../../library/itertools.rst:501
msgid ""
"Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

#: ../../library/itertools.rst:503
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length of "
"the *iterable* and all possible full-length permutations are generated."
msgstr ""
"Если *r* не указан или имеет значение «Нет», то *r* по умолчанию "
"соответствует длине *iterable* и генерируются все возможные полноразмерные "
"перестановки."

#: ../../library/itertools.rst:507
msgid ""
"The permutation tuples are emitted in lexicographic order according to the "
"order of the input *iterable*. So, if the input *iterable* is sorted, the "
"output tuples will be produced in sorted order."
msgstr ""

#: ../../library/itertools.rst:511
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeated values within "
"a permutation."
msgstr ""

#: ../../library/itertools.rst:542
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence of :"
"func:`product`, filtered to exclude entries with repeated elements (those "
"from the same position in the input pool)::"
msgstr ""

#: ../../library/itertools.rst:554
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero "
"when ``r > n``."
msgstr ""

#: ../../library/itertools.rst:559
msgid "Cartesian product of input iterables."
msgstr "Декартово произведение входных итераций."

#: ../../library/itertools.rst:561
msgid ""
"Roughly equivalent to nested for-loops in a generator expression. For "
"example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y in "
"B)``."
msgstr ""
"Примерно эквивалентно вложенным циклам for в выражении генератора. Например, "
"``product(A, B)`` возвращает то же самое, что ``((x,y) для x в A для y в "
"B)``."

#: ../../library/itertools.rst:564
msgid ""
"The nested loops cycle like an odometer with the rightmost element advancing "
"on every iteration.  This pattern creates a lexicographic ordering so that "
"if the input's iterables are sorted, the product tuples are emitted in "
"sorted order."
msgstr ""
"Вложенные циклы цикличны, как одометр, при этом самый правый элемент "
"перемещается на каждой итерации. Этот шаблон создает лексикографическое "
"упорядочение, так что если итерации входных данных отсортированы, кортежи "
"продуктов создаются в отсортированном порядке."

#: ../../library/itertools.rst:569
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""
"Чтобы вычислить произведение итерации само на себя, укажите количество "
"повторений с помощью необязательного аргумента ключевого слова *repeat*. "
"Например, ``product(A, повтор=4)`` означает то же самое, что ``product(A, A, "
"A, A)``."

#: ../../library/itertools.rst:573
msgid ""
"This function is roughly equivalent to the following code, except that the "
"actual implementation does not build up intermediate results in memory::"
msgstr ""
"Эта функция примерно эквивалентна следующему коду, за исключением того, что "
"фактическая реализация не сохраняет в памяти промежуточные результаты:"

#: ../../library/itertools.rst:586
msgid ""
"Before :func:`product` runs, it completely consumes the input iterables, "
"keeping pools of values in memory to generate the products.  Accordingly, it "
"is only useful with finite inputs."
msgstr ""
"Перед запуском :func:`product` она полностью использует входные итерации, "
"сохраняя пулы значений в памяти для генерации продуктов. Соответственно, это "
"полезно только при ограниченных входных данных."

#: ../../library/itertools.rst:592
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified."
msgstr ""
"Создайте итератор, который снова и снова возвращает *object*. Выполняется "
"бесконечно, если не указан аргумент *times*."

#: ../../library/itertools.rst:606
msgid ""
"A common use for *repeat* is to supply a stream of constant values to *map* "
"or *zip*:"
msgstr ""
"Обычно *repeat* используется для передачи потока постоянных значений в *map* "
"или *zip*:"

#: ../../library/itertools.rst:616
msgid ""
"Make an iterator that computes the function using arguments obtained from "
"the iterable.  Used instead of :func:`map` when argument parameters are "
"already grouped in tuples from a single iterable (when the data has been "
"\"pre-zipped\")."
msgstr ""

#: ../../library/itertools.rst:621
msgid ""
"The difference between :func:`map` and :func:`starmap` parallels the "
"distinction between ``function(a,b)`` and ``function(*c)``. Roughly "
"equivalent to::"
msgstr ""
"Разница между :func:`map` и :func:`starmap` аналогична различию между "
"``function(a,b)`` и ``function(*c)``. Примерно эквивалентно::"

#: ../../library/itertools.rst:633
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:647
msgid "Return *n* independent iterators from a single iterable."
msgstr "Возвращает *n* независимых итераторов из одной итерации."

#: ../../library/itertools.rst:649
msgid ""
"The following Python code helps explain what *tee* does (although the actual "
"implementation is more complex and uses only a single underlying :abbr:`FIFO "
"(first-in, first-out)` queue)::"
msgstr ""

#: ../../library/itertools.rst:668
msgid ""
"Once a :func:`tee` has been created, the original *iterable* should not be "
"used anywhere else; otherwise, the *iterable* could get advanced without the "
"tee objects being informed."
msgstr ""
"После создания :func:`tee` исходный *iterable* больше нигде не должен "
"использоваться; в противном случае *iterable* может продвинуться вперед без "
"уведомления tee-объектов."

#: ../../library/itertools.rst:672
msgid ""
"``tee`` iterators are not threadsafe. A :exc:`RuntimeError` may be raised "
"when using simultaneously iterators returned by the same :func:`tee` call, "
"even if the original *iterable* is threadsafe."
msgstr ""

#: ../../library/itertools.rst:676
msgid ""
"This itertool may require significant auxiliary storage (depending on how "
"much temporary data needs to be stored). In general, if one iterator uses "
"most or all of the data before another iterator starts, it is faster to use :"
"func:`list` instead of :func:`tee`."
msgstr ""
"Этот инструмент itertool может потребовать значительного дополнительного "
"хранилища (в зависимости от того, сколько временных данных необходимо "
"хранить). В общем, если один итератор использует большую часть или все "
"данные до запуска другого итератора, быстрее использовать :func:`list` "
"вместо :func:`tee`."

#: ../../library/itertools.rst:684
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If the "
"iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted.  "
"Roughly equivalent to::"
msgstr ""

#: ../../library/itertools.rst:708
msgid ""
"If one of the iterables is potentially infinite, then the :func:"
"`zip_longest` function should be wrapped with something that limits the "
"number of calls (for example :func:`islice` or :func:`takewhile`).  If not "
"specified, *fillvalue* defaults to ``None``."
msgstr ""

#: ../../library/itertools.rst:717
msgid "Itertools Recipes"
msgstr "Рецепты Itertools"

#: ../../library/itertools.rst:719
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""
"В этом разделе показаны рецепты создания расширенного набора инструментов с "
"использованием существующих инструментов itertools в качестве строительных "
"блоков."

#: ../../library/itertools.rst:722
msgid ""
"The primary purpose of the itertools recipes is educational.  The recipes "
"show various ways of thinking about individual tools — for example, that "
"``chain.from_iterable`` is related to the concept of flattening.  The "
"recipes also give ideas about ways that the tools can be combined — for "
"example, how ``compress()`` and ``range()`` can work together.  The recipes "
"also show patterns for using itertools with the :mod:`operator` and :mod:"
"`collections` modules as well as with the built-in itertools such as "
"``map()``, ``filter()``, ``reversed()``, and ``enumerate()``."
msgstr ""

#: ../../library/itertools.rst:731
msgid ""
"A secondary purpose of the recipes is to serve as an incubator.  The "
"``accumulate()``, ``compress()``, and ``pairwise()`` itertools started out "
"as recipes.  Currently, the ``iter_index()`` recipe is being tested to see "
"whether it proves its worth."
msgstr ""

#: ../../library/itertools.rst:736
msgid ""
"Substantially all of these recipes and many, many others can be installed "
"from the `more-itertools project <https://pypi.org/project/more-itertools/"
">`_ found on the Python Package Index::"
msgstr ""

#: ../../library/itertools.rst:742
msgid ""
"Many of the recipes offer the same high performance as the underlying "
"toolset. Superior memory performance is kept by processing elements one at a "
"time rather than bringing the whole iterable into memory all at once. Code "
"volume is kept small by linking the tools together in a functional style "
"which helps eliminate temporary variables.  High speed is retained by "
"preferring \"vectorized\" building blocks over the use of for-loops and :"
"term:`generator`\\s which incur interpreter overhead."
msgstr ""
