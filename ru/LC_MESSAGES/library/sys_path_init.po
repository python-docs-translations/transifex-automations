# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/sys_path_init.rst:4
msgid "The initialization of the :data:`sys.path` module search path"
msgstr "Инициализация пути поиска модуля :data:`sys.path`"

#: ../../library/sys_path_init.rst:6
msgid ""
"A module search path is initialized when Python starts. This module search "
"path may be accessed at :data:`sys.path`."
msgstr ""
"Путь поиска модуля инициализируется при запуске Python. Доступ к этому пути "
"поиска модуля можно получить по адресу :data:`sys.path`."

#: ../../library/sys_path_init.rst:9
msgid ""
"The first entry in the module search path is the directory that contains the "
"input script, if there is one. Otherwise, the first entry is the current "
"directory, which is the case when executing the interactive shell, a :option:"
"`-c` command, or :option:`-m` module."
msgstr ""
"Первая запись в пути поиска модуля — это каталог, содержащий входной скрипт, "
"если таковой имеется. В противном случае первой записью является текущий "
"каталог, что имеет место при выполнении интерактивной оболочки, команды :"
"option:`-c` или модуля :option:`-m`."

#: ../../library/sys_path_init.rst:14
msgid ""
"The :envvar:`PYTHONPATH` environment variable is often used to add "
"directories to the search path. If this environment variable is found then "
"the contents are added to the module search path."
msgstr ""
"Переменная среды :envvar:`PYTHONPATH` часто используется для добавления "
"каталогов в путь поиска. Если эта переменная среды найдена, ее содержимое "
"добавляется в путь поиска модуля."

#: ../../library/sys_path_init.rst:20
msgid ""
":envvar:`PYTHONPATH` will affect all installed Python versions/environments. "
"Be wary of setting this in your shell profile or global environment "
"variables. The :mod:`site` module offers more nuanced techniques as "
"mentioned below."
msgstr ""
":envvar:`PYTHONPATH` повлияет на все установленные версии/среды Python. "
"Будьте осторожны, устанавливая это в своем профиле оболочки или глобальных "
"переменных среды. Модуль :mod:`site` предлагает более тонкие методы, "
"упомянутые ниже."

#: ../../library/sys_path_init.rst:24
msgid ""
"The next items added are the directories containing standard Python modules "
"as well as any :term:`extension module`\\s that these modules depend on. "
"Extension modules are ``.pyd`` files on Windows and ``.so`` files on other "
"platforms. The directory with the platform-independent Python modules is "
"called ``prefix``. The directory with the extension modules is called "
"``exec_prefix``."
msgstr ""
"Следующие добавленные элементы — это каталоги, содержащие стандартные модули "
"Python, а также любые модули расширения, от которых зависят эти модули. "
"Модули расширения представляют собой файлы ``.pyd`` в Windows и файлы ``."
"so`` на других платформах. Каталог с независимыми от платформы модулями "
"Python называется ``prefix``. Каталог с модулями расширения называется "
"``exec_prefix``."

#: ../../library/sys_path_init.rst:30
msgid ""
"The :envvar:`PYTHONHOME` environment variable may be used to set the "
"``prefix`` and ``exec_prefix`` locations. Otherwise these directories are "
"found by using the Python executable as a starting point and then looking "
"for various 'landmark' files and directories. Note that any symbolic links "
"are followed so the real Python executable location is used as the search "
"starting point. The Python executable location is called ``home``."
msgstr ""
"Переменная среды :envvar:`PYTHONHOME` может использоваться для установки "
"местоположений ``prefix`` и ``exec_prefix``. В противном случае эти каталоги "
"находятся с помощью исполняемого файла Python в качестве отправной точки, а "
"затем поиска различных «ориентировочных» файлов и каталогов. Обратите "
"внимание, что при переходе по любым символическим ссылкам в качестве "
"отправной точки поиска используется реальное расположение исполняемого файла "
"Python. Местоположение исполняемого файла Python называется «home»."

#: ../../library/sys_path_init.rst:37
msgid ""
"Once ``home`` is determined, the ``prefix`` directory is found by first "
"looking for :file:`python{majorversion}{minorversion}.zip` (``python311."
"zip``). On Windows the zip archive is searched for in ``home`` and on Unix "
"the archive is expected to be in :file:`lib`. Note that the expected zip "
"archive location is added to the module search path even if the archive does "
"not exist. If no archive was found, Python on Windows will continue the "
"search for ``prefix`` by looking for :file:`Lib\\\\os.py`. Python on Unix "
"will look for :file:`lib/python{majorversion}.{minorversion}/os.py` (``lib/"
"python3.11/os.py``). On Windows ``prefix`` and ``exec_prefix`` are the same, "
"however on other platforms :file:`lib/python{majorversion}.{minorversion}/"
"lib-dynload` (``lib/python3.11/lib-dynload``) is searched for and used as an "
"anchor for ``exec_prefix``. On some platforms :file:`lib` may be :file:"
"`lib64` or another value, see :data:`sys.platlibdir` and :envvar:"
"`PYTHONPLATLIBDIR`."
msgstr ""
"После определения ``home`` каталог ``prefix`` находится путем поиска :file:"
"`python{majorversion}{minorversion}.zip` (``python311.zip``). В Windows zip-"
"архив ищется в ``home``, а в Unix ожидается, что архив будет находиться в :"
"file:`lib`. Обратите внимание, что ожидаемое местоположение zip-архива "
"добавляется в путь поиска модуля, даже если архив не существует. Если архив "
"не найден, Python в Windows продолжит поиск ``prefix``, ища :file:`Lib\\\\os."
"py`. Python в Unix будет искать :file:`lib/python{majorversion}."
"{minorversion}/os.py` (``lib/python3.11/os.py``). В Windows ``prefix`` и "
"``exec_prefix`` одинаковы, однако на других платформах :file:`lib/"
"python{majorversion}.{minorversion}/lib-dynload` (``lib/python3.11/lib -"
"dynload``) ищется и используется в качестве привязки для ``exec_prefix``. На "
"некоторых платформах :file:`lib` может быть :file:`lib64` или другим "
"значением, см. :data:`sys.platlibdir` и :envvar:`PYTHONPLATLIBDIR`."

#: ../../library/sys_path_init.rst:50
msgid ""
"Once found, ``prefix`` and ``exec_prefix`` are available at :data:`sys."
"prefix` and :data:`sys.exec_prefix` respectively."
msgstr ""
"После обнаружения ``prefix`` и ``exec_prefix`` доступны по адресу :data:`sys."
"prefix` и :data:`sys.exec_prefix` соответственно."

#: ../../library/sys_path_init.rst:53
msgid ""
"Finally, the :mod:`site` module is processed and :file:`site-packages` "
"directories are added to the module search path. A common way to customize "
"the search path is to create :mod:`sitecustomize` or :mod:`usercustomize` "
"modules as described in the :mod:`site` module documentation."
msgstr ""
"Наконец, модуль :mod:`site` обрабатывается, и в путь поиска модуля "
"добавляются каталоги :file:`site-packages`. Распространенный способ "
"настройки пути поиска — создание модулей :mod:`sitecustomize` или :mod:"
"`usercustomize`, как описано в документации модуля :mod:`site`."

#: ../../library/sys_path_init.rst:60
msgid ""
"Certain command line options may further affect path calculations. See :"
"option:`-E`, :option:`-I`, :option:`-s` and :option:`-S` for further details."
msgstr ""
"Определенные параметры командной строки могут дополнительно повлиять на "
"расчет пути. Дополнительные сведения см. в :option:`-E`, :option:`-I`, :"
"option:`-s` и :option:`-S`."

#: ../../library/sys_path_init.rst:64
msgid "Virtual environments"
msgstr "Виртуальные среды"

#: ../../library/sys_path_init.rst:66
msgid ""
"If Python is run in a virtual environment (as described at :ref:`tut-venv`) "
"then ``prefix`` and ``exec_prefix`` are specific to the virtual environment."
msgstr ""
"Если Python запускается в виртуальной среде (как описано в :ref:`tut-venv`), "
"тогда ``prefix`` и ``exec_prefix`` относятся к виртуальной среде."

#: ../../library/sys_path_init.rst:69
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable, or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""
"Если файл ``pyvenv.cfg`` находится рядом с основным исполняемым файлом или в "
"каталоге на один уровень выше исполняемого файла, применяются следующие "
"варианты:"

#: ../../library/sys_path_init.rst:72
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing "
"``prefix`` and ``exec_prefix``."
msgstr ""
"Если ``home`` является абсолютным путем и :envvar:`PYTHONHOME` не "
"установлен, этот путь используется вместо пути к основному исполняемому "
"файлу при выводе ``prefix`` и ``exec_prefix``."

#: ../../library/sys_path_init.rst:77
msgid "_pth files"
msgstr "_pth-файлы"

#: ../../library/sys_path_init.rst:79
msgid ""
"To completely override :data:`sys.path` create a ``._pth`` file with the "
"same name as the shared library or executable (``python._pth`` or "
"``python311._pth``). The shared library path is always known on Windows, "
"however it may not be available on other platforms. In the ``._pth`` file "
"specify one line for each path to add to :data:`sys.path`. The file based on "
"the shared library name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if desired."
msgstr ""
"Чтобы полностью переопределить :data:`sys.path`, создайте файл ``._pth`` с "
"тем же именем, что и у общей библиотеки или исполняемого файла (``python."
"_pth`` или ``python311._pth``). Путь к общей библиотеке всегда известен в "
"Windows, однако он может быть недоступен на других платформах. В файле ``."
"_pth`` укажите по одной строке для каждого пути, который нужно добавить в :"
"data:`sys.path`. Файл, основанный на имени общей библиотеки, переопределяет "
"файл, основанный на исполняемом файле, что позволяет при желании ограничить "
"пути для любой программы, загружающей среду выполнения."

#: ../../library/sys_path_init.rst:87
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in "
"the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""
"Если файл существует, все переменные реестра и среды игнорируются, "
"включается изолированный режим и :mod:`site` не импортируется, если только "
"одна строка в файле не указывает ``import site``. Пустые пути и строки, "
"начинающиеся с ``#``, игнорируются. Каждый путь может быть абсолютным или "
"относительным к местоположению файла. Операторы импорта, отличные от "
"``site``, не допускаются, и не может быть указан произвольный код."

#: ../../library/sys_path_init.rst:94
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""
"Обратите внимание, что файлы ``.pth`` (без подчеркивания в начале) будут "
"нормально обрабатываться модулем :mod:`site`, если указан ``import site``."

#: ../../library/sys_path_init.rst:98
msgid "Embedded Python"
msgstr "Встроенный Python"

#: ../../library/sys_path_init.rst:100
msgid ""
"If Python is embedded within another application :c:func:"
"`Py_InitializeFromConfig` and the :c:type:`PyConfig` structure can be used "
"to initialize Python. The path specific details are described at :ref:`init-"
"path-config`. Alternatively the older :c:func:`Py_SetPath` can be used to "
"bypass the initialization of the module search path."
msgstr ""
"Если Python встроен в другое приложение, для инициализации Python можно "
"использовать структуру :c:func:`Py_InitializeFromConfig` и структуру :c:type:"
"`PyConfig`. Подробности пути описаны в :ref:`init-path-config`. В качестве "
"альтернативы можно использовать более старую :c:func:`Py_SetPath` для обхода "
"инициализации пути поиска модуля."

#: ../../library/sys_path_init.rst:107
msgid ":ref:`windows_finding_modules` for detailed Windows notes."
msgstr ""
":ref:`windows_finding_modules` для получения подробных примечаний по Windows."

#: ../../library/sys_path_init.rst:108
msgid ":ref:`using-on-unix` for Unix details."
msgstr ":ref:`using-on-unix` для получения подробной информации о Unix."
