# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/random.rst:2
msgid ":mod:`!random` --- Generate pseudo-random numbers"
msgstr ":mod:`!random` --- Генерация псевдослучайных чисел"

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**Исходный код:** :source:`Lib/random.py`"

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""
"Этот модуль реализует генераторы псевдослучайных чисел для различных "
"распределений."

#: ../../library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""
"Для целых чисел существует равномерный выбор из диапазона. Для "
"последовательностей есть равномерный выбор случайного элемента, функция "
"генерации случайной перестановки списка на месте и функция случайной выборки "
"без замены."

#: ../../library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"На реальной линии имеются функции для вычисления равномерного, нормального "
"(гауссовского), логнормального, отрицательного экспоненциального, гамма- и "
"бета-распределений. Для создания распределений углов доступно распределение "
"фон Мизеса."

#: ../../library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the half-open range ``0.0 <= X < "
"1.0``. Python uses the Mersenne Twister as the core generator.  It produces "
"53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"Почти все функции модуля зависят от базовой функции :func:`.random`, которая "
"равномерно генерирует случайное число с плавающей запятой в полуоткрытом "
"диапазоне ``0.0 <= X < 1.0``. Python использует Mersenne Twister в качестве "
"основного генератора. Он производит 53-битные числа с плавающей запятой и "
"имеет период 2\\*\\*19937-1. Базовая реализация на C является одновременно "
"быстрой и потокобезопасной. Mersenne Twister — один из наиболее тщательно "
"протестированных существующих генераторов случайных чисел. Однако, будучи "
"полностью детерминированным, он подходит не для всех целей и совершенно "
"непригоден для криптографических целей."

#: ../../library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""
"Функции, предоставляемые этим модулем, на самом деле являются связанными "
"методами скрытого экземпляра класса :class:`random.Random`. Вы можете "
"создать свои собственные экземпляры :class:`Random`, чтобы получить "
"генераторы, которые не имеют общего состояния."

#: ../../library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: see the documentation on that class "
"for more details."
msgstr ""
"Класс :class:`Random` также может быть подклассом, если вы хотите "
"использовать другой базовый генератор собственной разработки: более "
"подробную информацию см. в документации по этому классу."

#: ../../library/random.rst:40
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""
"Модуль :mod:`random` также предоставляет класс :class:`SystemRandom`, "
"который использует системную функцию :func:`os.urandom` для генерации "
"случайных чисел из источников, предоставляемых операционной системой."

#: ../../library/random.rst:46
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` module."
msgstr ""
"Псевдослучайные генераторы этого модуля не следует использовать в целях "
"безопасности. Для обеспечения безопасности или криптографии см. модуль :mod:"
"`secrets`."

#: ../../library/random.rst:52
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""
"М. Мацумото и Т. Нишимура, «Mersenne Twister: 623-мерный равнораспределенный "
"равномерный генератор псевдослучайных чисел», ACM Transactions on Modeling "
"and Computer Simulation Vol. 8, № 1, стр. 3-30 января 1998 г."

#: ../../library/random.rst:57
msgid ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707-long-period-random-number-generator/>`_ for a compatible "
"alternative random number generator with a long period and comparatively "
"simple update operations."
msgstr ""
"`Рецепт Complementary-Multiply-with-Carry <https://code.activestate.com/"
"recipes/576707-long- period-random-number-generator/>`_ для совместимого "
"альтернативного генератора случайных чисел с длительным периодом и "
"сравнительно простые операции обновления."

#: ../../library/random.rst:64
msgid "Bookkeeping functions"
msgstr "Бухгалтерские функции"

#: ../../library/random.rst:68
msgid "Initialize the random number generator."
msgstr "Инициализируйте генератор случайных чисел."

#: ../../library/random.rst:70
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"Если *a* опущено или ``None``, используется текущее системное время. Если "
"источники случайности предоставляются операционной системой, они "
"используются вместо системного времени (подробную информацию о доступности "
"см. в функции :func:`os.urandom`)."

#: ../../library/random.rst:75
msgid "If *a* is an int, it is used directly."
msgstr "Если *a* является целым числом, оно используется напрямую."

#: ../../library/random.rst:77
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:"
"`bytearray` object gets converted to an :class:`int` and all of its bits are "
"used."
msgstr ""
"В версии 2 (по умолчанию) объект :class:`str`, :class:`bytes` или :class:"
"`bytearray` преобразуется в :class:`int` и используются все его биты."

#: ../../library/random.rst:80
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"В версии 1 (предусмотренной для воспроизведения случайных "
"последовательностей из старых версий Python) алгоритм для :class:`str` и :"
"class:`bytes` генерирует более узкий диапазон начальных чисел."

#: ../../library/random.rst:84
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr ""
"Перешел на схему версии 2, в которой используются все биты начального числа "
"строки."

#: ../../library/random.rst:87
msgid ""
"The *seed* must be one of the following types: ``None``, :class:`int`, :"
"class:`float`, :class:`str`, :class:`bytes`, or :class:`bytearray`."
msgstr ""
"*Seed* должно быть одного из следующих типов: ``None``, :class:`int`, :class:"
"`float`, :class:`str`, :class:`bytes` или :class: `bytearray`."

#: ../../library/random.rst:94
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""
"Возвращает объект, фиксирующий текущее внутреннее состояние генератора. Этот "
"объект можно передать в :func:`setstate` для восстановления состояния."

#: ../../library/random.rst:100
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""
"*state* должно было быть получено в результате предыдущего вызова :func:"
"`getstate`, а :func:`setstate` восстанавливает внутреннее состояние "
"генератора до того, каким оно было на момент вызова :func:`getstate`."

#: ../../library/random.rst:106
msgid "Functions for bytes"
msgstr "Функции для байтов"

#: ../../library/random.rst:110
msgid "Generate *n* random bytes."
msgstr "Сгенерировать *n* случайных байтов."

#: ../../library/random.rst:112
msgid ""
"This method should not be used for generating security tokens. Use :func:"
"`secrets.token_bytes` instead."
msgstr ""
"Этот метод не следует использовать для создания токенов безопасности. Вместо "
"этого используйте :func:`secrets.token_bytes`."

#: ../../library/random.rst:119
msgid "Functions for integers"
msgstr "Функции для целых чисел"

#: ../../library/random.rst:124
msgid "Return a randomly selected element from ``range(start, stop, step)``."
msgstr ""
"Возвращает случайно выбранный элемент из диапазона (начало, остановка, шаг)."

#: ../../library/random.rst:126
msgid ""
"This is roughly equivalent to ``choice(range(start, stop, step))`` but "
"supports arbitrarily large ranges and is optimized for common cases."
msgstr ""
"Это примерно эквивалентно ``choice(range(start, stop, Step))``, но "
"поддерживает сколь угодно большие диапазоны и оптимизировано для "
"распространенных случаев."

#: ../../library/random.rst:129
msgid "The positional argument pattern matches the :func:`range` function."
msgstr "Шаблон позиционного аргумента соответствует функции :func:`range`."

#: ../../library/random.rst:131
msgid ""
"Keyword arguments should not be used because they can be interpreted in "
"unexpected ways. For example ``randrange(start=100)`` is interpreted as "
"``randrange(0, 100, 1)``."
msgstr ""
"Аргументы ключевых слов не следует использовать, поскольку они могут быть "
"интерпретированы неожиданным образом. Например, ``randrange(start=100)`` "
"интерпретируется как ``randrange(0, 100, 1)``."

#: ../../library/random.rst:135
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
":meth:`randrange` более сложен в создании равномерно распределенных "
"значений. Раньше использовался стиль типа int(random()*n), который мог "
"привести к слегка неравномерному распределению."

#: ../../library/random.rst:140
msgid ""
"Automatic conversion of non-integer types is no longer supported. Calls such "
"as ``randrange(10.0)`` and ``randrange(Fraction(10, 1))`` now raise a :exc:"
"`TypeError`."
msgstr ""
"Автоматическое преобразование нецелочисленных типов больше не "
"поддерживается. Такие вызовы, как randrange(10.0) и randrange(Fraction(10, "
"1)) теперь вызывают ошибку :exc:`TypeError`."

#: ../../library/random.rst:147
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""
"Возвращает случайное целое число *N* такое, что ``a <= N <= b``. Псевдоним "
"для randrange(a, b+1)``."

#: ../../library/random.rst:152
msgid ""
"Returns a non-negative Python integer with *k* random bits. This method is "
"supplied with the Mersenne Twister generator and some other generators may "
"also provide it as an optional part of the API. When available, :meth:"
"`getrandbits` enables :meth:`randrange` to handle arbitrarily large ranges."
msgstr ""
"Возвращает неотрицательное целое число Python со случайными битами *k*. Этот "
"метод поставляется с генератором Mersenne Twister, а некоторые другие "
"генераторы также могут предоставлять его как дополнительную часть API. Если "
"доступно, :meth:`getrandbits` позволяет :meth:`randrange` обрабатывать "
"произвольно большие диапазоны."

#: ../../library/random.rst:158
msgid "This method now accepts zero for *k*."
msgstr "Этот метод теперь принимает ноль для *k*."

#: ../../library/random.rst:163
msgid "Functions for sequences"
msgstr "Функции для последовательностей"

#: ../../library/random.rst:167
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""
"Возвращает случайный элемент из непустой последовательности *seq*. Если "
"*seq* пусто, выдается :exc:`IndexError`."

#: ../../library/random.rst:172
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""
"Возвращает список элементов размером *k*, выбранных из *популяции* с "
"заменой. Если *популяция* пуста, выдается :exc:`IndexError`."

#: ../../library/random.rst:175
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights "
"before making selections, so supplying the cumulative weights saves work."
msgstr ""
"Если указана последовательность *веса*, выбор осуществляется в соответствии "
"с относительными весами. Альтернативно, если задана последовательность "
"*cum_weights*, выбор осуществляется в соответствии с совокупными весами "
"(возможно, рассчитанными с использованием :func:`itertools.accumulate`). "
"Например, относительные веса ``[10, 5, 30, 5]`` эквивалентны совокупным "
"весам ``[10, 15, 45, 50]``. Внутренне относительные веса преобразуются в "
"совокупные веса перед выполнением выбора, поэтому предоставление совокупных "
"весов экономит работу."

#: ../../library/random.rst:184
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""
"Если ни *weights*, ни *cum_weights* не указаны, выбор осуществляется с "
"равной вероятностью. Если указана последовательность весов, она должна быть "
"той же длины, что и последовательность *population*. Это :exc:`TypeError`, "
"позволяющий указать как *weights*, так и *cum_weights*."

#: ../../library/random.rst:189
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals).  Weights are assumed "
"to be non-negative and finite.  A :exc:`ValueError` is raised if all weights "
"are zero."
msgstr ""
"*weights* или *cum_weights* могут использовать любой числовой тип, который "
"взаимодействует со значениями :class:`float`, возвращаемыми :func:`random` "
"(который включает целые числа, числа с плавающей запятой и дроби, но "
"исключает десятичные числа). Предполагается, что веса неотрицательны и "
"конечны. :exc:`ValueError` возникает, если все веса равны нулю."

#: ../../library/random.rst:195
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to :func:"
"`choice`.  The algorithm used by :func:`choices` uses floating-point "
"arithmetic for internal consistency and speed.  The algorithm used by :func:"
"`choice` defaults to integer arithmetic with repeated selections to avoid "
"small biases from round-off error."
msgstr ""
"Для данного начального значения функция :func:`choices` с равным весом "
"обычно создает последовательность, отличную от повторных вызовов :func:"
"`choice`. Алгоритм, используемый :func:`choices`, использует арифметику с "
"плавающей запятой для обеспечения внутренней согласованности и скорости. "
"Алгоритм, используемый :func:`choice`, по умолчанию использует целочисленную "
"арифметику с повторяющимся выбором, чтобы избежать небольших ошибок из-за "
"ошибки округления."

#: ../../library/random.rst:204
msgid "Raises a :exc:`ValueError` if all weights are zero."
msgstr "Вызывает :exc:`ValueError`, если все веса равны нулю."

#: ../../library/random.rst:210
msgid "Shuffle the sequence *x* in place."
msgstr "Перетасуйте последовательность *x* на месте."

#: ../../library/random.rst:212
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr ""
"Чтобы перетасовать неизменяемую последовательность и вернуть новый "
"перетасованный список, используйте вместо этого ``sample(x, k=len(x))``."

#: ../../library/random.rst:215
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x* "
"can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""
"Обратите внимание, что даже для небольшого ``len(x)`` общее количество "
"перестановок *x* может быстро превысить период большинства генераторов "
"случайных чисел. Это означает, что большинство перестановок длинной "
"последовательности никогда не могут быть созданы. Например, "
"последовательность длиной 2080 — это наибольшая последовательность, которая "
"может уместиться в период генератора случайных чисел Mersenne Twister."

#: ../../library/random.rst:221
msgid "Removed the optional parameter *random*."
msgstr "Удален необязательный параметр *random*."

#: ../../library/random.rst:227
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence.  Used for random sampling without replacement."
msgstr ""
"Возвращает список длиной *k* уникальных элементов, выбранных из "
"последовательности совокупности. Используется для случайной выборки без "
"замены."

#: ../../library/random.rst:230
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"Возвращает новый список, содержащий элементы совокупности, оставляя исходную "
"совокупность неизменной. Результирующий список находится в порядке выбора, "
"так что все подсрезы также будут действительными случайными выборками. Это "
"позволяет разделить победителей лотереи (выборку) на обладателей главного "
"приза и победителей, занявших второе место (подсрезы)."

#: ../../library/random.rst:236
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""
"Члены популяции не обязательно должны быть :term:`хэшируемыми` или "
"уникальными. Если популяция содержит повторы, то каждое появление является "
"возможным выбором в выборке."

#: ../../library/random.rst:239
msgid ""
"Repeated elements can be specified one at a time or with the optional "
"keyword-only *counts* parameter.  For example, ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` is equivalent to ``sample(['red', 'red', 'red', 'red', "
"'blue', 'blue'], k=5)``."
msgstr ""
"Повторяющиеся элементы можно указывать по одному или с помощью "
"необязательного параметра *counts*, содержащего только ключевые слова. "
"Например, ``sample(['red', 'blue'], counts=[4, 2], k=5)`` эквивалентен "
"``sample(['red', 'red', 'red' , 'красный', 'синий', 'синий'], k=5)``."

#: ../../library/random.rst:244
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""
"Чтобы выбрать образец из диапазона целых чисел, используйте объект :func:"
"`range` в качестве аргумента. Это особенно быстро и эффективно для выборки "
"из большой совокупности: ``sample(range(10000000), k=60)``."

#: ../../library/random.rst:248
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""
"Если размер выборки превышает размер генеральной совокупности, выдается "
"ошибка :exc:`ValueError`."

#: ../../library/random.rst:251
msgid "Added the *counts* parameter."
msgstr "Добавлен параметр *counts*."

#: ../../library/random.rst:256
msgid ""
"The *population* must be a sequence.  Automatic conversion of sets to lists "
"is no longer supported."
msgstr ""
"*Популяция* должна быть последовательностью. Автоматическое преобразование "
"наборов в списки больше не поддерживается."

#: ../../library/random.rst:260
msgid "Discrete distributions"
msgstr "Дискретные распределения"

#: ../../library/random.rst:262
msgid "The following function generates a discrete distribution."
msgstr "Следующая функция генерирует дискретное распределение."

#: ../../library/random.rst:266
msgid ""
"`Binomial distribution <https://mathworld.wolfram.com/BinomialDistribution."
"html>`_. Return the number of successes for *n* independent trials with the "
"probability of success in each trial being *p*:"
msgstr ""
"`Биномиальное распределение <https://mathworld.wolfram.com/"
"BinomialDistribution.html>`_. Возвращает количество успехов для *n* "
"независимых испытаний с вероятностью успеха в каждом испытании, равной *p*:"

#: ../../library/random.rst:271
msgid "Mathematically equivalent to::"
msgstr "Математически эквивалентно::"

#: ../../library/random.rst:273
msgid "sum(random() < p for i in range(n))"
msgstr "sum(random() < p for i in range(n))"

#: ../../library/random.rst:275
msgid ""
"The number of trials *n* should be a non-negative integer. The probability "
"of success *p* should be between ``0.0 <= p <= 1.0``. The result is an "
"integer in the range ``0 <= X <= n``."
msgstr ""
"Количество попыток *n* должно быть неотрицательным целым числом. Вероятность "
"успеха *p* должна находиться в диапазоне ``0,0 <= p <= 1,0``. Результатом "
"является целое число в диапазоне ``0 <= X <= n``."

#: ../../library/random.rst:285
msgid "Real-valued distributions"
msgstr "Распределения с реальными значениями"

#: ../../library/random.rst:287
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"Следующие функции генерируют конкретные распределения вещественных значений. "
"Параметры функции названы в честь соответствующих переменных в уравнении "
"распределения, используемых в обычной математической практике; большинство "
"этих уравнений можно найти в любом тексте по статистике."

#: ../../library/random.rst:295
msgid ""
"Return the next random floating-point number in the range ``0.0 <= X < 1.0``"
msgstr ""
"Вернуть следующее случайное число с плавающей запятой в диапазоне ``0.0 <= X "
"< 1.0``"

#: ../../library/random.rst:300
msgid ""
"Return a random floating-point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"Возвращает случайное число с плавающей запятой *N* такое, что ``a <= N <= "
"b`` для ``a <= b`` и ``b <= N <= a`` для ``b < a ``."

#: ../../library/random.rst:303
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the expression ``a + (b-a) * random()``."
msgstr ""
"Значение конечной точки ``b`` может быть включено или не включено в диапазон "
"в зависимости от округления с плавающей запятой в выражении ``a + (ba) * "
"random()``."

#: ../../library/random.rst:310
msgid ""
"Return a random floating-point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""
"Возвращает случайное число с плавающей запятой *N* такое, что ``low <= N <= "
"high`` и с указанным *mode* между этими границами. *Низкие* и *высокие* "
"границы по умолчанию равны нулю и единице. Аргумент *mode* по умолчанию "
"устанавливает среднюю точку между границами, обеспечивая симметричное "
"распределение."

#: ../../library/random.rst:318
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""
"Бета-дистрибутив. Условия для параметров: «альфа > 0» и «бета > 0». "
"Возвращаемые значения находятся в диапазоне от 0 до 1."

#: ../../library/random.rst:324
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""
"Экспоненциальное распределение. *лямбд* равен 1,0, разделенному на желаемое "
"среднее значение. Оно должно быть ненулевым. (Параметр мог бы называться "
"«лямбда», но в Python это зарезервированное слово.) Возвращаемые значения "
"варьируются от 0 до положительной бесконечности, если *lambd* положительное "
"значение, и от отрицательной бесконечности до 0, если *lambd* отрицательное "
"значение."

#: ../../library/random.rst:330
msgid "Added the default value for ``lambd``."
msgstr "Добавлено значение по умолчанию для ``lambd``."

#: ../../library/random.rst:336
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  The shape and scale "
"parameters, *alpha* and *beta*, must have positive values. (Calling "
"conventions vary and some sources define 'beta' as the inverse of the scale)."
msgstr ""
"Гамма-распределение. (*Не* гамма-функция!) Параметры формы и масштаба, "
"*alpha* и *beta*, должны иметь положительные значения. (Соглашения о вызовах "
"различаются, и некоторые источники определяют «бету» как обратную шкалу)."

#: ../../library/random.rst:341
msgid "The probability distribution function is::"
msgstr "Функция распределения вероятностей:"

#: ../../library/random.rst:343
msgid ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"
msgstr ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"

#: ../../library/random.rst:350
msgid ""
"Normal distribution, also called the Gaussian distribution. *mu* is the "
"mean, and *sigma* is the standard deviation.  This is slightly faster than "
"the :func:`normalvariate` function defined below."
msgstr ""
"Нормальное распределение, также называемое распределением Гаусса. *mu* — "
"среднее значение, а *сигма* — стандартное отклонение. Это немного быстрее, "
"чем функция :func:`normalvariate`, определенная ниже."

#: ../../library/random.rst:355
msgid ""
"Multithreading note:  When two threads call this function simultaneously, it "
"is possible that they will receive the same return value.  This can be "
"avoided in three ways. 1) Have each thread use a different instance of the "
"random number generator. 2) Put locks around all calls. 3) Use the slower, "
"but thread-safe :func:`normalvariate` function instead."
msgstr ""
"Примечание о многопоточности: когда два потока вызывают эту функцию "
"одновременно, возможно, они получат одно и то же возвращаемое значение. "
"Этого можно избежать тремя способами. 1) Пусть каждый поток использует "
"отдельный экземпляр генератора случайных чисел. 2) Установите блокировки на "
"все звонки. 3) Вместо этого используйте более медленную, но потокобезопасную "
"функцию :func:`normalvariate`."

#: ../../library/random.rst:362 ../../library/random.rst:378
msgid "*mu* and *sigma* now have default arguments."
msgstr "*mu* и *sigma* теперь имеют аргументы по умолчанию."

#: ../../library/random.rst:368
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"Лог нормального распределения. Если вы возьмете натуральный логарифм этого "
"распределения, вы получите нормальное распределение со средним значением "
"*mu* и стандартным отклонением *sigma*. *mu* может иметь любое значение, а "
"*sigma* должно быть больше нуля."

#: ../../library/random.rst:376
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""
"Нормальное распределение. *mu* — среднее значение, а *сигма* — стандартное "
"отклонение."

#: ../../library/random.rst:384
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"*mu* — средний угол, выраженный в радианах от 0 до 2\\*\\ *pi*, а *kappa* — "
"параметр концентрации, который должен быть больше или равен нулю. Если "
"*каппа* равно нулю, это распределение сводится к равномерному случайному "
"углу в диапазоне от 0 до 2\\*\\ *pi*."

#: ../../library/random.rst:392
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "Распределение Парето. *alpha* — параметр формы."

#: ../../library/random.rst:397
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""
"Распределение Вейбулла. *alpha* — параметр масштаба, *beta* — параметр формы."

#: ../../library/random.rst:402
msgid "Alternative Generator"
msgstr "Альтернативный генератор"

#: ../../library/random.rst:406
msgid ""
"Class that implements the default pseudo-random number generator used by "
"the :mod:`random` module."
msgstr ""
"Класс, реализующий генератор псевдослучайных чисел по умолчанию, "
"используемый модулем :mod:`random`."

#: ../../library/random.rst:409
msgid ""
"Formerly the *seed* could be any hashable object.  Now it is limited to: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, or :"
"class:`bytearray`."
msgstr ""
"Раньше *сид* мог быть любым хешируемым объектом. Теперь оно ограничено: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes` или :"
"class:`bytearray`."

#: ../../library/random.rst:414
msgid ""
"Subclasses of :class:`!Random` should override the following methods if they "
"wish to make use of a different basic generator:"
msgstr ""
"Подклассы :class:`!Random` должны переопределять следующие методы, если они "
"хотят использовать другой базовый генератор:"

#: ../../library/random.rst:419
msgid ""
"Override this method in subclasses to customise the :meth:`~random.seed` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Переопределите этот метод в подклассах, чтобы настроить поведение :meth:"
"`~random.seed` экземпляров :class:`!Random`."

#: ../../library/random.rst:424
msgid ""
"Override this method in subclasses to customise the :meth:`~random.getstate` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Переопределите этот метод в подклассах, чтобы настроить поведение :meth:"
"`~random.getstate` экземпляров :class:`!Random`."

#: ../../library/random.rst:429
msgid ""
"Override this method in subclasses to customise the :meth:`~random.setstate` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Переопределите этот метод в подклассах, чтобы настроить поведение :meth:"
"`~random.setstate` экземпляров :class:`!Random`."

#: ../../library/random.rst:434
msgid ""
"Override this method in subclasses to customise the :meth:`~random.random` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Переопределите этот метод в подклассах, чтобы настроить поведение :meth:"
"`~random.random` экземпляров :class:`!Random`."

#: ../../library/random.rst:437
msgid ""
"Optionally, a custom generator subclass can also supply the following method:"
msgstr ""
"При желании подкласс пользовательского генератора также может предоставить "
"следующий метод:"

#: ../../library/random.rst:441
msgid ""
"Override this method in subclasses to customise the :meth:`~random."
"getrandbits` behaviour of :class:`!Random` instances."
msgstr ""
"Переопределите этот метод в подклассах, чтобы настроить поведение :meth:"
"`~random.getrandbits` экземпляров :class:`!Random`."

#: ../../library/random.rst:447
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:"
"`NotImplementedError` if called."
msgstr ""
"Класс, который использует функцию :func:`os.urandom` для генерации случайных "
"чисел из источников, предоставляемых операционной системой. Доступно не во "
"всех системах. Не зависит от состояния программного обеспечения, "
"последовательности не воспроизводятся. Соответственно, метод :meth:`seed` не "
"имеет никакого эффекта и игнорируется. Методы :meth:`getstate` и :meth:"
"`setstate` вызывают :exc:`NotImplementedError` при вызове."

#: ../../library/random.rst:456
msgid "Notes on Reproducibility"
msgstr "Заметки о воспроизводимости"

#: ../../library/random.rst:458
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo-random number generator.  By reusing a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""
"Иногда полезно иметь возможность воспроизводить последовательности, заданные "
"генератором псевдослучайных чисел. При повторном использовании начального "
"значения одна и та же последовательность должна воспроизводиться от запуска "
"к запуску, пока не выполняются несколько потоков."

#: ../../library/random.rst:462
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""
"Большинство алгоритмов и начальных функций модуля случайных чисел могут быть "
"изменены в разных версиях Python, но два аспекта гарантированно не изменятся:"

#: ../../library/random.rst:465
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""
"Если будет добавлен новый метод посева, то будет предложена сеялка с "
"обратной совместимостью."

#: ../../library/random.rst:468
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""
"Метод генератора :meth:`~Random.random` будет продолжать создавать ту же "
"последовательность, когда совместимой сеялке будет предоставлено то же самое "
"начальное число."

#: ../../library/random.rst:474
msgid "Examples"
msgstr "Примеры"

#: ../../library/random.rst:476
msgid "Basic examples::"
msgstr "Основные примеры::"

#: ../../library/random.rst:478
msgid ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging "
"5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 "
"inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a "
"sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"
msgstr ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging "
"5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 "
"inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a "
"sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"

#: ../../library/random.rst:504
msgid "Simulations::"
msgstr "Моделирование::"

#: ../../library/random.rst:506
msgid ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"
msgstr ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"

#: ../../library/random.rst:529
msgid ""
"Example of `statistical bootstrapping <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ using resampling with replacement to estimate "
"a confidence interval for the mean of a sample::"
msgstr ""
"Пример `статистической начальной загрузки <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ с использованием повторной выборки с заменой "
"для оценки доверительного интервала для среднего значения выборки:"

#: ../../library/random.rst:533
msgid ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"
msgstr ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"

#: ../../library/random.rst:542
msgid ""
"Example of a `resampling permutation test <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ to determine the statistical "
"significance or `p-value <https://en.wikipedia.org/wiki/P-value>`_ of an "
"observed difference between the effects of a drug versus a placebo::"
msgstr ""
"Пример `теста перестановки повторной выборки <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ для определения статистической "
"значимости или `p-значения <https://en.wikipedia.org/ wiki/P-value>`_ "
"наблюдаемой разницы между эффектами препарата и плацебо::"

#: ../../library/random.rst:548
msgid ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a "
"difference')\n"
"print(f'at least as extreme as the observed difference of "
"{observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the "
"null')\n"
"print(f'hypothesis that there is no difference between the drug and the "
"placebo.')"
msgstr ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a "
"difference')\n"
"print(f'at least as extreme as the observed difference of "
"{observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the "
"null')\n"
"print(f'hypothesis that there is no difference between the drug and the "
"placebo.')"

#: ../../library/random.rst:569
msgid ""
"Simulation of arrival times and service deliveries for a multiserver queue::"
msgstr ""
"Моделирование времени прибытия и предоставления услуг для многосерверной "
"очереди:"

#: ../../library/random.rst:571
msgid ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, "
"stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"
msgstr ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, "
"stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"

#: ../../library/random.rst:598
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas <https://us.pycon.org/2016/speaker/"
"profile/295/>`_ on statistical analysis using just a few fundamental "
"concepts including simulation, sampling, shuffling, and cross-validation."
msgstr ""
"`Статистика для хакеров <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ "
"видеоурок `Джейка Вандерпласа <https://us.pycon.org/2016/speaker/profile/295/"
"> `_ по статистическому анализу с использованием всего нескольких "
"фундаментальных концепций, включая моделирование, выборку, перетасовку и "
"перекрестную проверку."

#: ../../library/random.rst:604
msgid ""
"`Economics Simulation <https://nbviewer.org/url/norvig.com/ipython/Economics."
"ipynb>`_ a simulation of a marketplace by `Peter Norvig <https://norvig.com/"
"bio.html>`_ that shows effective use of many of the tools and distributions "
"provided by this module (gauss, uniform, sample, betavariate, choice, "
"triangular, and randrange)."
msgstr ""
"`Экономическое моделирование <https://nbviewer.org/url/norvig.com/ipython/"
"Economics.ipynb>`_ моделирование рынка `Питера Норвига <https://norvig.com/"
"bio.html>`_ это показывает эффективное использование многих инструментов и "
"распределений, предоставляемых этим модулем (гауссовое, равномерное, "
"выборочное, бета-вариация, выбор, треугольное и рандомизированное)."

#: ../../library/random.rst:611
msgid ""
"`A Concrete Introduction to Probability (using Python) <https://nbviewer.org/"
"url/norvig.com/ipython/Probability.ipynb>`_ a tutorial by `Peter Norvig "
"<https://norvig.com/bio.html>`_ covering the basics of probability theory, "
"how to write simulations, and how to perform data analysis using Python."
msgstr ""
"`Конкретное введение в вероятность (с использованием Python) <https://"
"nbviewer.org/url/norvig.com/ipython/Probability.ipynb>`_ учебник `Питера "
"Норвига <https://norvig.com/bio. html>`_, посвященный основам теории "
"вероятностей, написанию моделирования и выполнению анализа данных с помощью "
"Python."

#: ../../library/random.rst:619
msgid "Recipes"
msgstr "Рецепты"

#: ../../library/random.rst:621
msgid ""
"These recipes show how to efficiently make random selections from the "
"combinatoric iterators in the :mod:`itertools` module:"
msgstr ""
"Эти рецепты показывают, как эффективно делать случайный выбор из "
"комбинаторных итераторов в модуле :mod:`itertools`:"

#: ../../library/random.rst:624
msgid ""
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Choose r elements with replacement.  Order the result to match the "
"iterable.\"\n"
"    # Result will be in set(itertools."
"combinations_with_replacement(iterable, r)).\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"
msgstr ""
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Choose r elements with replacement.  Order the result to match the "
"iterable.\"\n"
"    # Result will be in set(itertools."
"combinations_with_replacement(iterable, r)).\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"

#: ../../library/random.rst:653
msgid ""
"The default :func:`.random` returns multiples of 2⁻⁵³ in the range *0.0 ≤ x "
"< 1.0*.  All such numbers are evenly spaced and are exactly representable as "
"Python floats.  However, many other representable floats in that interval "
"are not possible selections.  For example, ``0.05954861408025609`` isn't an "
"integer multiple of 2⁻⁵³."
msgstr ""
"По умолчанию :func:`.random` возвращает кратные 2⁻⁵³ в диапазоне *0,0 ≤ x < "
"1,0*. Все такие числа расположены на равном расстоянии друг от друга и точно "
"представляются как числа с плавающей запятой в Python. Однако многие другие "
"представимые числа с плавающей запятой в этом интервале не являются "
"возможным выбором. Например, ``0,05954861408025609`` не является целым "
"числом, кратным 2⁻⁵³."

#: ../../library/random.rst:659
msgid ""
"The following recipe takes a different approach.  All floats in the interval "
"are possible selections.  The mantissa comes from a uniform distribution of "
"integers in the range *2⁵² ≤ mantissa < 2⁵³*.  The exponent comes from a "
"geometric distribution where exponents smaller than *-53* occur half as "
"often as the next larger exponent."
msgstr ""
"В следующем рецепте используется другой подход. Все числа с плавающей "
"запятой в интервале являются возможными вариантами выбора. Мантисса "
"получается из равномерного распределения целых чисел в диапазоне *2⁵² ≤ "
"мантисса < 2⁵³*. Показатель получается из геометрического распределения, где "
"показатели степени меньше *-53* встречаются вдвое реже, чем следующий "
"больший показатель."

#: ../../library/random.rst:667
msgid ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"
msgstr ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"

#: ../../library/random.rst:681
msgid ""
"All :ref:`real valued distributions <real-valued-distributions>` in the "
"class will use the new method::"
msgstr ""
"Все :ref:`распределения с действительными значениями <real-valued-"
"distributions>` в классе будут использовать новый метод::"

#: ../../library/random.rst:684
msgid ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"
msgstr ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"

#: ../../library/random.rst:690
msgid ""
"The recipe is conceptually equivalent to an algorithm that chooses from all "
"the multiples of 2⁻¹⁰⁷⁴ in the range *0.0 ≤ x < 1.0*.  All such numbers are "
"evenly spaced, but most have to be rounded down to the nearest representable "
"Python float.  (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float "
"and is equal to ``math.ulp(0.0)``.)"
msgstr ""
"Рецепт концептуально эквивалентен алгоритму, который выбирает из всех "
"кратных 2⁻¹⁰⁷⁴ в диапазоне *0,0 ≤ x < 1,0*. Все такие числа расположены "
"равномерно, но большинство из них необходимо округлить до ближайшего "
"представимого числа с плавающей запятой Python. (Значение 2⁻¹⁰⁷⁴ "
"представляет собой наименьшее положительное ненормализованное число с "
"плавающей запятой и равно ``math.ulp(0.0)``.)"

#: ../../library/random.rst:699
msgid ""
"`Generating Pseudo-random Floating-Point Values <https://allendowney.com/"
"research/rand/downey07randfloat.pdf>`_ a paper by Allen B. Downey describing "
"ways to generate more fine-grained floats than normally generated by :func:`."
"random`."
msgstr ""
"`Генерация псевдослучайных значений с плавающей запятой <https://allendowney."
"com/research/rand/downey07randfloat.pdf>`_ статья Аллена Б. Дауни, "
"описывающая способы генерации более мелкозернистых чисел с плавающей "
"запятой, чем обычно генерируемые :func :`.случайный`."
