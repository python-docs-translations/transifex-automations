# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniil Kolesnikov, 2024
# Илья Панфилов, 2024
# Roustam Khamidoulline, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-30 14:22+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Roustam Khamidoulline, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/fcntl.rst:2
msgid ":mod:`!fcntl` --- The ``fcntl`` and ``ioctl`` system calls"
msgstr ":mod:`!fcntl` --- Системные вызовы ``fcntl`` и ``ioctl``"

#: ../../library/fcntl.rst:16
msgid ""
"This module performs file and I/O control on file descriptors. It is an "
"interface to the :c:func:`fcntl` and :c:func:`ioctl` Unix routines. See the :"
"manpage:`fcntl(2)` and :manpage:`ioctl(2)` Unix manual pages for full "
"details."
msgstr ""
"Этот модуль выполняет управление файлами и вводом-выводом файловых "
"дескрипторов. Это интерфейс для подпрограмм Unix :c:func:`fcntl` и :c:func:"
"`ioctl`. Подробности смотрите на страницах руководства Unix :manpage:"
"`fcntl(2)` и :manpage:`ioctl(2)`."

#: ../../library/fcntl.rst:21
msgid "Availability"
msgstr "Доступность"

#: ../../library/fcntl.rst:23
msgid ""
"All functions in this module take a file descriptor *fd* as their first "
"argument.  This can be an integer file descriptor, such as returned by ``sys."
"stdin.fileno()``, or an :class:`io.IOBase` object, such as ``sys.stdin`` "
"itself, which provides a :meth:`~io.IOBase.fileno` that returns a genuine "
"file descriptor."
msgstr ""
"Все функции в этом модуле принимают файловый дескриптор *fd* в качестве "
"первого аргумента. Это может быть целочисленный файловый дескриптор, "
"например, возвращаемый ``sys.stdin.fileno()``, или объект :class:`io."
"IOBase`, например, сам ``sys.stdin``, который предоставляет :meth:`~io."
"IOBase.fileno`, который возвращает подлинный дескриптор файла."

#: ../../library/fcntl.rst:29
msgid ""
"Operations in this module used to raise an :exc:`IOError` where they now "
"raise an :exc:`OSError`."
msgstr ""
"Операции в этом модуле раньше вызывали :exc:`IOError`, а теперь они "
"вызывают :exc:`OSError`."

#: ../../library/fcntl.rst:33
msgid ""
"The :mod:`!fcntl` module now contains ``F_ADD_SEALS``, ``F_GET_SEALS``, and "
"``F_SEAL_*`` constants for sealing of :func:`os.memfd_create` file "
"descriptors."
msgstr ""
"Модуль :mod:`!fcntl` теперь содержит константы ``F_ADD_SEALS``, "
"``F_GET_SEALS`` и ``F_SEAL_*`` для запечатывания файловых дескрипторов :func:"
"`os.memfd_create`."

#: ../../library/fcntl.rst:38
msgid ""
"On macOS, the :mod:`!fcntl` module exposes the ``F_GETPATH`` constant, which "
"obtains the path of a file from a file descriptor. On Linux(>=3.15), the :"
"mod:`!fcntl` module exposes the ``F_OFD_GETLK``, ``F_OFD_SETLK`` and "
"``F_OFD_SETLKW`` constants, which are used when working with open file "
"description locks."
msgstr ""
"В macOS модуль :mod:`!fcntl` предоставляет константу ``F_GETPATH``, которая "
"получает путь к файлу из файлового дескриптора. В Linux(>=3.15) модуль :mod:"
"`!fcntl` предоставляет константы ``F_OFD_GETLK``, ``F_OFD_SETLK`` и "
"``F_OFD_SETLKW``, которые используются при работе с блокировками описаний "
"открытых файлов."

#: ../../library/fcntl.rst:45
msgid ""
"On Linux >= 2.6.11, the :mod:`!fcntl` module exposes the ``F_GETPIPE_SZ`` "
"and ``F_SETPIPE_SZ`` constants, which allow to check and modify a pipe's "
"size respectively."
msgstr ""
"В Linux >= 2.6.11 модуль :mod:`!fcntl` предоставляет константы "
"``F_GETPIPE_SZ`` и ``F_SETPIPE_SZ``, которые позволяют проверять и изменять "
"размер канала соответственно."

#: ../../library/fcntl.rst:50
msgid ""
"On FreeBSD, the :mod:`!fcntl` module exposes the ``F_DUP2FD`` and "
"``F_DUP2FD_CLOEXEC`` constants, which allow to duplicate a file descriptor, "
"the latter setting ``FD_CLOEXEC`` flag in addition."
msgstr ""
"Во FreeBSD модуль :mod:`!fcntl` предоставляет константы ``F_DUP2FD`` и "
"``F_DUP2FD_CLOEXEC``, которые позволяют дублировать файловый дескриптор, "
"последний дополнительно устанавливает флаг ``FD_CLOEXEC``."

#: ../../library/fcntl.rst:55
msgid ""
"On Linux >= 4.5, the :mod:`fcntl` module exposes the ``FICLONE`` and "
"``FICLONERANGE`` constants, which allow to share some data of one file with "
"another file by reflinking on some filesystems (e.g., btrfs, OCFS2, and "
"XFS). This behavior is commonly referred to as \"copy-on-write\"."
msgstr ""
"В Linux >= 4.5 модуль :mod:`fcntl` предоставляет константы FICLONE и "
"FICLONERANGE, которые позволяют обмениваться некоторыми данными одного файла "
"с другим файлом путем повторной ссылки на некоторые файловые системы "
"(например, btrfs). , OCFS2 и XFS). Такое поведение обычно называют "
"«копированием при записи»."

#: ../../library/fcntl.rst:61
msgid ""
"On Linux >= 2.6.32, the :mod:`!fcntl` module exposes the ``F_GETOWN_EX``, "
"``F_SETOWN_EX``, ``F_OWNER_TID``, ``F_OWNER_PID``, ``F_OWNER_PGRP`` "
"constants, which allow to direct I/O availability signals to a specific "
"thread, process, or process group. On Linux >= 4.13, the :mod:`!fcntl` "
"module exposes the ``F_GET_RW_HINT``, ``F_SET_RW_HINT``, "
"``F_GET_FILE_RW_HINT``, ``F_SET_FILE_RW_HINT``, and ``RWH_WRITE_LIFE_*`` "
"constants, which allow to inform the kernel about the relative expected "
"lifetime of writes on a given inode or via a particular open file "
"description. On Linux >= 5.1 and NetBSD, the :mod:`!fcntl` module exposes "
"the ``F_SEAL_FUTURE_WRITE`` constant for use with ``F_ADD_SEALS`` and "
"``F_GET_SEALS`` operations. On FreeBSD, the :mod:`!fcntl` module exposes the "
"``F_READAHEAD``, ``F_ISUNIONSTACK``, and ``F_KINFO`` constants. On macOS and "
"FreeBSD, the :mod:`!fcntl` module exposes the ``F_RDAHEAD`` constant. On "
"NetBSD and AIX, the :mod:`!fcntl` module exposes the ``F_CLOSEM`` constant. "
"On NetBSD, the :mod:`!fcntl` module exposes the ``F_MAXFD`` constant. On "
"macOS and NetBSD, the :mod:`!fcntl` module exposes the ``F_GETNOSIGPIPE`` "
"and ``F_SETNOSIGPIPE`` constant."
msgstr ""
"В Linux >= 2.6.32 модуль :mod:`!fcntl` предоставляет константы "
"``F_GETOWN_EX``, ``F_SETOWN_EX``, ``F_OWNER_TID``, ``F_OWNER_PID``, "
"``F_OWNER_PGRP``, которые позволяют направлять сигналы доступности ввода-"
"вывода определенному потоку, процессу или группе процессов. В Linux >= 4.13 "
"модуль :mod:`!fcntl` предоставляет константы ``F_GET_RW_HINT``, "
"``F_SET_RW_HINT``, ``F_GET_FILE_RW_HINT``, ``F_SET_FILE_RW_HINT`` и "
"``RWH_WRITE_LIFE_*``, которые позволяют информировать ядро ​​об относительном "
"ожидаемом времени записи на данный индексный дескриптор или через конкретное "
"описание открытого файла. В Linux >= 5.1 и NetBSD модуль :mod:`!fcntl` "
"предоставляет константу ``F_SEAL_FUTURE_WRITE`` для использования с "
"операциями ``F_ADD_SEALS`` и ``F_GET_SEALS``. Во FreeBSD модуль :mod:`!"
"fcntl` предоставляет константы ``F_READAHEAD``, ``F_ISUNIONSTACK`` и "
"``F_KINFO``. В macOS и FreeBSD модуль :mod:`!fcntl` предоставляет константу "
"``F_RDAHEAD``. В NetBSD и AIX модуль :mod:`!fcntl` предоставляет константу "
"``F_CLOSEM``. В NetBSD модуль :mod:`!fcntl` предоставляет константу "
"``F_MAXFD``. В macOS и NetBSD модуль :mod:`!fcntl` предоставляет константы "
"``F_GETNOSIGPIPE`` и ``F_SETNOSIGPIPE``."

#: ../../library/fcntl.rst:82
msgid ""
"On Linux >= 6.1, the :mod:`!fcntl` module exposes the ``F_DUPFD_QUERY`` to "
"query a file descriptor pointing to the same file."
msgstr ""

#: ../../library/fcntl.rst:86
msgid "The module defines the following functions:"
msgstr "Модуль определяет следующие функции:"

#: ../../library/fcntl.rst:91
msgid ""
"Perform the operation *cmd* on file descriptor *fd* (file objects providing "
"a :meth:`~io.IOBase.fileno` method are accepted as well).  The values used "
"for *cmd* are operating system dependent, and are available as constants in "
"the :mod:`fcntl` module, using the same names as used in the relevant C "
"header files. The argument *arg* can either be an integer value, a :term:"
"`bytes-like object`, or a string. The type and size of *arg* must match the "
"type and size of the argument of the operation as specified in the relevant "
"C documentation."
msgstr ""

#: ../../library/fcntl.rst:100
msgid ""
"When *arg* is an integer, the function returns the integer return value of "
"the C :c:func:`fcntl` call."
msgstr ""

#: ../../library/fcntl.rst:103
msgid ""
"When the argument is bytes-like object, it represents a binary structure, "
"for example, created by :func:`struct.pack`. A string value is encoded to "
"binary using the UTF-8 encoding. The binary data is copied to a buffer whose "
"address is passed to the C :c:func:`fcntl` call.  The return value after a "
"successful call is the contents of the buffer, converted to a :class:`bytes` "
"object. The length of the returned object will be the same as the length of "
"the *arg* argument. This is limited to 1024 bytes."
msgstr ""

#: ../../library/fcntl.rst:112
msgid "If the :c:func:`fcntl` call fails, an :exc:`OSError` is raised."
msgstr ""
"Если вызов :c:func:`fcntl` завершается неудачно, выдается ошибка :exc:"
"`OSError`."

#: ../../library/fcntl.rst:115
msgid ""
"If the type or the size of *arg* does not match the type or size of the "
"argument of the operation (for example, if an integer is passed when a "
"pointer is expected, or the information returned in the buffer by the "
"operating system is larger than 1024 bytes), this is most likely to result "
"in a segmentation violation or a more subtle data corruption."
msgstr ""

#: ../../library/fcntl.rst:122
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.fcntl`` with arguments "
"``fd``, ``cmd``, ``arg``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``fcntl.fcntl`` с аргументами "
"``fd``, ``cmd``, ``arg``."

#: ../../library/fcntl.rst:124
msgid ""
"Add support of arbitrary :term:`bytes-like objects <bytes-like object>`, not "
"only :class:`bytes`."
msgstr ""

#: ../../library/fcntl.rst:131
msgid ""
"This function is identical to the :func:`~fcntl.fcntl` function, except that "
"the argument handling is even more complicated."
msgstr ""
"Эта функция идентична функции :func:`~fcntl.fcntl`, за исключением того, что "
"обработка аргументов еще сложнее."

#: ../../library/fcntl.rst:134
msgid ""
"The *request* parameter is limited to values that can fit in 32-bits or 64-"
"bits, depending on the platform. Additional constants of interest for use as "
"the *request* argument can be found in the :mod:`termios` module, under the "
"same names as used in the relevant C header files."
msgstr ""

#: ../../library/fcntl.rst:140
msgid ""
"The parameter *arg* can be an integer, a :term:`bytes-like object`, or a "
"string. The type and size of *arg* must match the type and size of the "
"argument of the operation as specified in the relevant C documentation."
msgstr ""

#: ../../library/fcntl.rst:145
msgid ""
"If *arg* does not support the read-write buffer interface or the "
"*mutate_flag* is false, behavior is as for the :func:`~fcntl.fcntl` function."
msgstr ""

#: ../../library/fcntl.rst:149
msgid ""
"If *arg* supports the read-write buffer interface (like :class:`bytearray`) "
"and *mutate_flag* is true (the default), then the buffer is (in effect) "
"passed to the underlying :c:func:`!ioctl` system call, the latter's return "
"code is passed back to the calling Python, and the buffer's new contents "
"reflect the action of the :c:func:`ioctl`.  This is a slight simplification, "
"because if the supplied buffer is less than 1024 bytes long it is first "
"copied into a static buffer 1024 bytes long which is then passed to :func:"
"`ioctl` and copied back into the supplied buffer."
msgstr ""
"Если *arg* поддерживает интерфейс буфера чтения-записи (например, :class:"
"`bytearray`) и *mutate_flag* имеет значение true (по умолчанию), то буфер "
"(фактически) передается в базовый системный вызов :c:func:`!ioctl`, код "
"возврата последнего передается обратно в вызывающий Python, а новое "
"содержимое буфера отражает действие :c:func:`ioctl`. Это небольшое "
"упрощение, поскольку, если предоставленный буфер имеет длину менее 1024 "
"байт, он сначала копируется в статический буфер длиной 1024 байта, который "
"затем передается в :func:`ioctl` и копируется обратно в предоставленный "
"буфер."

#: ../../library/fcntl.rst:158
msgid ""
"If the :c:func:`ioctl` call fails, an :exc:`OSError` exception is raised."
msgstr ""
"Если вызов :c:func:`ioctl` завершается неудачно, возникает исключение :exc:"
"`OSError`."

#: ../../library/fcntl.rst:161
msgid ""
"If the type or size of *arg* does not match the type or size of the "
"operation's argument (for example, if an integer is passed when a pointer is "
"expected, or the information returned in the buffer by the operating system "
"is larger than 1024 bytes, or the size of the mutable bytes-like object is "
"too small), this is most likely to result in a segmentation violation or a "
"more subtle data corruption."
msgstr ""

#: ../../library/fcntl.rst:169
msgid "An example::"
msgstr "Вот пример::"

#: ../../library/fcntl.rst:171
msgid ""
">>> import array, fcntl, struct, termios, os\n"
">>> os.getpgrp()\n"
"13341\n"
">>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0]\n"
"13341\n"
">>> buf = array.array('h', [0])\n"
">>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)\n"
"0\n"
">>> buf\n"
"array('h', [13341])"
msgstr ""
">>> import array, fcntl, struct, termios, os\n"
">>> os.getpgrp()\n"
"13341\n"
">>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0]\n"
"13341\n"
">>> buf = array.array('h', [0])\n"
">>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)\n"
"0\n"
">>> buf\n"
"array('h', [13341])"

#: ../../library/fcntl.rst:182
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.ioctl`` with arguments "
"``fd``, ``request``, ``arg``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``fcntl.ioctl`` с аргументами "
"``fd``, ``request``, ``arg``."

#: ../../library/fcntl.rst:184
msgid ""
"The GIL is always released during a system call. System calls failing with "
"EINTR are automatically retried."
msgstr ""

#: ../../library/fcntl.rst:190
msgid ""
"Perform the lock operation *operation* on file descriptor *fd* (file objects "
"providing a :meth:`~io.IOBase.fileno` method are accepted as well). See the "
"Unix manual :manpage:`flock(2)` for details.  (On some systems, this "
"function is emulated using :c:func:`fcntl`.)"
msgstr ""
"Выполните операцию блокировки *operation* для файлового дескриптора *fd* "
"(также принимаются файловые объекты, предоставляющие метод :meth:`~io.IOBase."
"fileno`). Подробности смотрите в руководстве по Unix :manpage:`flock(2)`. (В "
"некоторых системах эта функция эмулируется с помощью :c:func:`fcntl`.)"

#: ../../library/fcntl.rst:195
msgid ""
"If the :c:func:`flock` call fails, an :exc:`OSError` exception is raised."
msgstr ""
"Если вызов :c:func:`flock` завершается неудачей, возникает исключение :exc:"
"`OSError`."

#: ../../library/fcntl.rst:197
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.flock`` with arguments "
"``fd``, ``operation``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``fcntl.flock`` с аргументами "
"``fd``, ``operation``."

#: ../../library/fcntl.rst:202
msgid ""
"This is essentially a wrapper around the :func:`~fcntl.fcntl` locking calls. "
"*fd* is the file descriptor (file objects providing a :meth:`~io.IOBase."
"fileno` method are accepted as well) of the file to lock or unlock, and "
"*cmd* is one of the following values:"
msgstr ""
"По сути, это оболочка вокруг вызовов блокировки :func:`~fcntl.fcntl`. *fd* — "
"это файловый дескриптор (также принимаются файловые объекты, предоставляющие "
"метод :meth:`~io.IOBase.fileno`) файла, который необходимо заблокировать или "
"разблокировать, а *cmd* — одно из следующих значений:"

#: ../../library/fcntl.rst:209
msgid "Release an existing lock."
msgstr "Снимите существующую блокировку."

#: ../../library/fcntl.rst:213
msgid "Acquire a shared lock."
msgstr "Получите общий замок."

#: ../../library/fcntl.rst:217
msgid "Acquire an exclusive lock."
msgstr "Приобретите эксклюзивный замок."

#: ../../library/fcntl.rst:221
msgid ""
"Bitwise OR with any of the other three ``LOCK_*`` constants to make the "
"request non-blocking."
msgstr ""
"Побитовое ИЛИ с любой из трех других констант ``LOCK_*``, чтобы сделать "
"запрос неблокирующим."

#: ../../library/fcntl.rst:224
msgid ""
"If :const:`!LOCK_NB` is used and the lock cannot be acquired, an :exc:"
"`OSError` will be raised and the exception will have an *errno* attribute "
"set to :const:`~errno.EACCES` or :const:`~errno.EAGAIN` (depending on the "
"operating system; for portability, check for both values).  On at least some "
"systems, :const:`!LOCK_EX` can only be used if the file descriptor refers to "
"a file opened for writing."
msgstr ""
"Если используется :const:`!LOCK_NB` и блокировка не может быть получена, "
"будет выдано сообщение :exc:`OSError` и для исключения будет установлен "
"атрибут *errno* в :const:`~errno.EACCES` или: const:`~errno.EAGAIN` (в "
"зависимости от операционной системы; для переносимости проверьте оба "
"значения). По крайней мере, в некоторых системах :const:`!LOCK_EX` можно "
"использовать только в том случае, если дескриптор файла ссылается на файл, "
"открытый для записи."

#: ../../library/fcntl.rst:231
msgid ""
"*len* is the number of bytes to lock, *start* is the byte offset at which "
"the lock starts, relative to *whence*, and *whence* is as with :func:`io."
"IOBase.seek`, specifically:"
msgstr ""
"*len* — это количество байтов для блокировки, *start* — это смещение в "
"байтах, с которого начинается блокировка, относительно *whence*, а *whence* "
"аналогично :func:`io.IOBase.seek`, а именно:"

#: ../../library/fcntl.rst:235
msgid "``0`` -- relative to the start of the file (:const:`os.SEEK_SET`)"
msgstr "``0`` -- относительно начала файла (:const:`os.SEEK_SET`)"

#: ../../library/fcntl.rst:236
msgid "``1`` -- relative to the current buffer position (:const:`os.SEEK_CUR`)"
msgstr "``1`` -- относительно текущей позиции в буфере (:const:`os.SEEK_CUR`)"

#: ../../library/fcntl.rst:237
msgid "``2`` -- relative to the end of the file (:const:`os.SEEK_END`)"
msgstr "``2`` -- относительно конца файла (:const:`os.SEEK_END`)"

#: ../../library/fcntl.rst:239
msgid ""
"The default for *start* is 0, which means to start at the beginning of the "
"file. The default for *len* is 0 which means to lock to the end of the "
"file.  The default for *whence* is also 0."
msgstr ""
"По умолчанию для *start* установлено значение 0, что означает начало с "
"начала файла. По умолчанию для *len* установлено значение 0, что означает "
"блокировку до конца файла. Значение по умолчанию для *wherece* также равно 0."

#: ../../library/fcntl.rst:243
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.lockf`` with arguments "
"``fd``, ``cmd``, ``len``, ``start``, ``whence``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>` ``fcntl.lockf`` с аргументами "
"``fd``, ``cmd``, ``len``, ``start``, ``where`` ."

#: ../../library/fcntl.rst:245
msgid "Examples (all on a SVR4 compliant system)::"
msgstr "Примеры (все в системе, совместимой с SVR4)::"

#: ../../library/fcntl.rst:247
msgid ""
"import struct, fcntl, os\n"
"\n"
"f = open(...)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)\n"
"\n"
"lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)"
msgstr ""
"import struct, fcntl, os\n"
"\n"
"f = open(...)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)\n"
"\n"
"lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)"

#: ../../library/fcntl.rst:255
msgid ""
"Note that in the first example the return value variable *rv* will hold an "
"integer value; in the second example it will hold a :class:`bytes` object.  "
"The structure lay-out for the *lockdata* variable is system dependent --- "
"therefore using the :func:`flock` call may be better."
msgstr ""
"Обратите внимание, что в первом примере переменная возвращаемого значения "
"*rv* будет содержать целочисленное значение; во втором примере он будет "
"содержать объект :class:`bytes`. Структура переменной *lockdata* зависит от "
"системы, поэтому лучше использовать вызов :func:`flock`."

#: ../../library/fcntl.rst:263
msgid "Module :mod:`os`"
msgstr "Модуль :mod:`os`"

#: ../../library/fcntl.rst:264
msgid ""
"If the locking flags :const:`~os.O_SHLOCK` and :const:`~os.O_EXLOCK` are "
"present in the :mod:`os` module (on BSD only), the :func:`os.open` function "
"provides an alternative to the :func:`lockf` and :func:`flock` functions."
msgstr ""
"Если флаги блокировки :const:`~os.O_SHLOCK` и :const:`~os.O_EXLOCK` "
"присутствуют в модуле :mod:`os` (только в BSD), функция :func:`os.open` "
"предоставляет альтернативу функциям :func:`lockf` и :func:`flock`."

#: ../../library/fcntl.rst:10
msgid "UNIX"
msgstr "UNIX"

#: ../../library/fcntl.rst:10
msgid "file control"
msgstr "управление файлами"

#: ../../library/fcntl.rst:10
msgid "I/O control"
msgstr "управление ввода/вывода"
