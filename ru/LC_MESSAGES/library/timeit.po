# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 16:02+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr ""
"**Исходный код:** :source:`Lib/timeit.py`**Исходный код:** :source:`Lib/"
"timeit.py`"

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the second edition of *Python Cookbook*, published by O'Reilly."
msgstr ""
"Этот модуль предоставляет простой способ синхронизировать небольшие "
"фрагменты кода Python. Он имеет как :ref:`timeit-command-line-interface`, "
"так и :ref:`callable <python-interface>`. Это позволяет избежать ряда "
"распространенных ловушек при измерении времени выполнения. См. также "
"введение Тима Питерса к главе «Алгоритмы» во втором издании *Python "
"Cookbook*, опубликованном O'Reilly."

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr "Основные примеры"

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can "
"be used to compare three different expressions:"
msgstr ""
"В следующем примере показано, как можно использовать :ref:`timeit-command-"
"line-interface` для сравнения трёх разных выражений:"

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "Этого можно добиться из :ref:`python-interface` с помощью::"

#: ../../library/timeit.rst:47
msgid "A callable can also be passed from the :ref:`python-interface`::"
msgstr "Вызываемый объект также можно передать из :ref:`python-interface`::"

#: ../../library/timeit.rst:52
msgid ""
"Note however that :func:`.timeit` will automatically determine the number of "
"repetitions only when the command-line interface is used.  In the :ref:"
"`timeit-examples` section you can find more advanced examples."
msgstr ""
"Однако обратите внимание, что :func:`.timeit` автоматически определит "
"количество повторений только при использовании интерфейса командной строки. "
"В разделе :ref:`timeit-examples` вы можете найти более сложные примеры."

#: ../../library/timeit.rst:60
msgid "Python Interface"
msgstr "Интерфейс Python"

#: ../../library/timeit.rst:62
msgid "The module defines three convenience functions and a public class:"
msgstr "Модуль определяет три удобные функции и публичный класс:"

#: ../../library/timeit.rst:67
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in which "
"to execute the code."
msgstr ""
"Создайте экземпляр :class:`Timer` с заданным оператором, *кодом настройки* и "
"функцией *timer* и запустите его метод :meth:`.timeit` с *количеством* "
"выполнений. Необязательный аргумент *globals* указывает пространство имен, в "
"котором будет выполняться код."

#: ../../library/timeit.rst:72 ../../library/timeit.rst:83
#: ../../library/timeit.rst:120
msgid "The optional *globals* parameter was added."
msgstr "Был добавлен необязательный параметр *globals*."

#: ../../library/timeit.rst:78
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions.  The optional *globals* argument specifies a "
"namespace in which to execute the code."
msgstr ""
"Создайте экземпляр :class:`Timer` с заданным оператором, кодом *setup* и "
"функцией *timer* и запустите его метод :meth:`.repeat` с заданным числом "
"*повторений* и *количеством* выполнений. Необязательный аргумент *globals* "
"указывает пространство имен, в котором будет выполняться код."

#: ../../library/timeit.rst:86 ../../library/timeit.rst:181
msgid "Default value of *repeat* changed from 3 to 5."
msgstr "Значение по умолчанию *repeat* изменено с 3 на 5."

#: ../../library/timeit.rst:91
msgid "The default timer, which is always :func:`time.perf_counter`."
msgstr ""

#: ../../library/timeit.rst:93
msgid ":func:`time.perf_counter` is now the default timer."
msgstr ":func:`time.perf_counter` теперь является таймером по умолчанию."

#: ../../library/timeit.rst:99
msgid "Class for timing execution speed of small code snippets."
msgstr "Класс для определения скорости выполнения небольших фрагментов кода."

#: ../../library/timeit.rst:101
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the "
"timer function is platform-dependent (see the module doc string). *stmt* and "
"*setup* may also contain multiple statements separated by ``;`` or newlines, "
"as long as they don't contain multi-line string literals.  The statement "
"will by default be executed within timeit's namespace; this behavior can be "
"controlled by passing a namespace to *globals*."
msgstr ""
"Конструктор принимает оператор для синхронизации, дополнительный оператор, "
"используемый для настройки, и функцию таймера. Оба оператора по умолчанию "
"имеют значение ``'pass'``; функция таймера зависит от платформы (см. строку "
"документации модуля). *stmt* и *setup* также могут содержать несколько "
"операторов, разделенных ``;`` или символами новой строки, если они не "
"содержат многострочных строковых литералов. По умолчанию оператор будет "
"выполнен в пространстве имен timeit; этим поведением можно управлять, "
"передав пространство имен в *globals*."

#: ../../library/timeit.rst:109
msgid ""
"To measure the execution time of the first statement, use the :meth:`."
"timeit` method.  The :meth:`.repeat` and :meth:`.autorange` methods are "
"convenience methods to call :meth:`.timeit` multiple times."
msgstr ""
"Чтобы измерить время выполнения первого оператора, используйте метод :meth:`."
"timeit`. Методы :meth:`.repeat` и :meth:`.autorange` представляют собой "
"удобные методы для многократного вызова :meth:`.timeit`."

#: ../../library/timeit.rst:113
msgid ""
"The execution time of *setup* is excluded from the overall timed execution "
"run."
msgstr "Время выполнения *setup* исключается из общего времени выполнения."

#: ../../library/timeit.rst:115
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable "
"without arguments.  This will embed calls to them in a timer function that "
"will then be executed by :meth:`.timeit`.  Note that the timing overhead is "
"a little larger in this case because of the extra function calls."
msgstr ""
"Параметры *stmt* и *setup* также могут принимать объекты, которые можно "
"вызывать без аргументов. Это встроит их вызовы в функцию таймера, которая "
"затем будет выполнена :meth:`.timeit`. Обратите внимание, что в этом случае "
"затраты времени немного больше из-за дополнительных вызовов функций."

#: ../../library/timeit.rst:125
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument is "
"the number of times through the loop, defaulting to one million.  The main "
"statement, the setup statement and the timer function to be used are passed "
"to the constructor."
msgstr ""

#: ../../library/timeit.rst:134
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection` "
"during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  The disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""
"По умолчанию :meth:`.timeit` временно отключает :term:`сборку мусора` во "
"время отсчета времени. Преимущество этого подхода в том, что он делает "
"независимые тайминги более сопоставимыми. Недостаток заключается в том, что "
"GC может быть важным компонентом производительности измеряемой функции. Если "
"это так, GC можно снова включить в качестве первого оператора в строке "
"*setup*. Например::"

#: ../../library/timeit.rst:146
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr "Автоматически определять, сколько раз вызывать :meth:`.timeit`."

#: ../../library/timeit.rst:148
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so that "
"the total time >= 0.2 second, returning the eventual (number of loops, time "
"taken for that number of loops). It calls :meth:`.timeit` with increasing "
"numbers from the sequence 1, 2, 5, 10, 20, 50, ... until the time taken is "
"at least 0.2 second."
msgstr ""

#: ../../library/timeit.rst:154
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""
"Если указан *callback*, а не None, он будет вызываться после каждого "
"испытания с двумя аргументами: ``callback(number, time_taken)``."

#: ../../library/timeit.rst:162
msgid "Call :meth:`.timeit` a few times."
msgstr "Вызовите :meth:`.timeit` несколько раз."

#: ../../library/timeit.rst:164
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to "
"call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"Это удобная функция, которая неоднократно вызывает :meth:`.timeit`, "
"возвращая список результатов. Первый аргумент указывает, сколько раз "
"вызывать :meth:`.timeit`. Второй аргумент указывает аргумент *number* для :"
"meth:`.timeit`."

#: ../../library/timeit.rst:171
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run "
"the given code snippet; higher values in the result vector are typically not "
"caused by variability in Python's speed, but by other processes interfering "
"with your timing accuracy. So the :func:`min` of the result is probably the "
"only number you should be interested in.  After that, you should look at the "
"entire vector and apply common sense rather than statistics."
msgstr ""
"Соблазнительно вычислить среднее и стандартное отклонение вектора "
"результатов и сообщить об этом. Однако это не очень полезно. В типичном "
"случае наименьшее значение дает нижнюю границу того, насколько быстро ваша "
"машина может выполнить данный фрагмент кода; более высокие значения в "
"векторе результатов обычно вызваны не изменчивостью скорости Python, а "
"другими процессами, влияющими на точность синхронизации. Таким образом, :"
"func:`min` результата, вероятно, единственное число, которое вас должно "
"интересовать. После этого вам следует посмотреть на весь вектор и применить "
"здравый смысл, а не статистику."

#: ../../library/timeit.rst:187
msgid "Helper to print a traceback from the timed code."
msgstr "Помощник для печати обратной трассировки из синхронизированного кода."

#: ../../library/timeit.rst:189
msgid "Typical use::"
msgstr "Типичное применение::"

#: ../../library/timeit.rst:197
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""
"Преимущество перед стандартной трассировкой заключается в том, что строки "
"исходного кода в скомпилированном шаблоне будут отображаться. Необязательный "
"аргумент *file* указывает, куда отправляется обратная трассировка; по "
"умолчанию это :data:`sys.stderr`."

#: ../../library/timeit.rst:205
msgid "Command-Line Interface"
msgstr "Интерфейс командной строки"

#: ../../library/timeit.rst:207
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr "При вызове программы из командной строки используется следующая форма:"

#: ../../library/timeit.rst:211
msgid "Where the following options are understood:"
msgstr "Где понимаются следующие варианты:"

#: ../../library/timeit.rst:217
msgid "how many times to execute 'statement'"
msgstr "сколько раз выполнить «оператор»"

#: ../../library/timeit.rst:221
msgid "how many times to repeat the timer (default 5)"
msgstr "сколько раз повторять таймер (по умолчанию 5)"

#: ../../library/timeit.rst:225
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""
"оператор, который будет выполнен один раз изначально (по умолчанию ``pass``)"

#: ../../library/timeit.rst:229
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time` "
"instead of :func:`time.perf_counter`, which is the default"
msgstr ""
"измеряйте время процесса, а не время настенных часов, используя :func:`time."
"process_time` вместо :func:`time.perf_counter`, который используется по "
"умолчанию."

#: ../../library/timeit.rst:236
msgid ""
"specify a time unit for timer output; can select nsec, usec, msec, or sec"
msgstr ""

#: ../../library/timeit.rst:242
msgid "print raw timing results; repeat for more digits precision"
msgstr ""
"распечатать необработанные результаты синхронизации; повторите для большей "
"точности цифр"

#: ../../library/timeit.rst:246
msgid "print a short usage message and exit"
msgstr "распечатайте короткое сообщение об использовании и выйдите"

#: ../../library/timeit.rst:248
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""
"Многострочный оператор может быть задан путем указания каждой строки в "
"качестве отдельного аргумента оператора; строки с отступом возможны, если "
"заключить аргумент в кавычки и использовать начальные пробелы. Несколько "
"опций :option:`-s` обрабатываются аналогично."

#: ../../library/timeit.rst:253
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying increasing numbers from the sequence 1, 2, 5, 10, 20, 50, ... until "
"the total time is at least 0.2 seconds."
msgstr ""
"Если :option:`-n` не указан, подходящее количество циклов рассчитывается "
"путем увеличения чисел из последовательности 1, 2, 5, 10, 20, 50,... до тех "
"пор, пока общее время не составит хотя бы 0,2 секунды. ."

#: ../../library/timeit.rst:257
msgid ""
":func:`default_timer` measurements can be affected by other programs running "
"on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The :"
"option:`-r` option is good for this; the default of 5 repetitions is "
"probably enough in most cases.  You can use :func:`time.process_time` to "
"measure CPU time."
msgstr ""
"На измерения :func:`default_timer` могут влиять другие программы, работающие "
"на том же компьютере, поэтому лучшее, что можно сделать, когда необходимо "
"точное время, — это повторить время несколько раз и использовать лучшее "
"время. Для этого подойдет опция :option:`-r`; 5 повторений по умолчанию, "
"вероятно, будет достаточно в большинстве случаев. Вы можете использовать :"
"func:`time.process_time` для измерения времени процессора."

#: ../../library/timeit.rst:265
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions."
msgstr ""
"Существуют определенные базовые накладные расходы, связанные с выполнением "
"оператора pass. Код здесь не пытается это скрыть, но вы должны об этом "
"знать. Базовые издержки можно измерить, вызвав программу без аргументов, и "
"они могут различаться в зависимости от версии Python."

#: ../../library/timeit.rst:274
msgid "Examples"
msgstr "Примеры"

#: ../../library/timeit.rst:276
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr ""
"Можно предоставить оператор установки, который вначале выполняется только "
"один раз:"

#: ../../library/timeit.rst:285
msgid ""
"In the output, there are three fields. The loop count, which tells you how "
"many times the statement body was run per timing loop repetition. The "
"repetition count ('best of 5') which tells you how many times the timing "
"loop was repeated, and finally the time the statement body took on average "
"within the best repetition of the timing loop. That is, the time the fastest "
"repetition took divided by the loop count."
msgstr ""
"В выводе есть три поля. Счетчик циклов, показывающий, сколько раз тело "
"оператора выполнялось за одно повторение цикла синхронизации. Счетчик "
"повторений («лучший из 5»), который показывает, сколько раз повторялся цикл "
"синхронизации, и, наконец, время, которое в среднем заняло тело оператора в "
"пределах лучшего повторения цикла синхронизации. То есть время, затраченное "
"на самое быстрое повторение, деленное на количество циклов."

#: ../../library/timeit.rst:300
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr ""
"То же самое можно сделать, используя класс :class:`Timer` и его методы::"

#: ../../library/timeit.rst:310
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` to test for missing and present object attributes:"
msgstr ""
"В следующих примерах показано, как синхронизировать выражения, содержащие "
"несколько строк. Здесь мы сравниваем стоимость использования :func:`hasattr` "
"и :keyword:`try`/:keyword:`Exception` для проверки отсутствующих и "
"присутствующих атрибутов объекта:"

#: ../../library/timeit.rst:356
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"Чтобы предоставить модулю :mod:`timeit` доступ к определяемым вами функциям, "
"вы можете передать параметр *setup*, который содержит оператор импорта::"

#: ../../library/timeit.rst:367
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, which "
"will cause the code to be executed within your current global namespace.  "
"This can be more convenient than individually specifying imports::"
msgstr ""
"Другой вариант — передать :func:`globals` в параметр *globals*, что приведет "
"к выполнению кода в вашем текущем глобальном пространстве имен. Это может "
"быть удобнее, чем индивидуальное указание импорта:"
