# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/modulefinder.rst:2
msgid ":mod:`!modulefinder` --- Find modules used by a script"
msgstr ":mod:`!modulefinder` --- Найти модули, используемые скриптом"

#: ../../library/modulefinder.rst:9
msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**Исходный код:** :source:`Lib/modulefinder.py`"

#: ../../library/modulefinder.rst:13
msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` can "
"also be run as a script, giving the filename of a Python script as its "
"argument, after which a report of the imported modules will be printed."
msgstr ""
"Этот модуль предоставляет класс :class:`ModuleFinder`, который можно "
"использовать для определения набора модулей, импортированных сценарием. "
"``modulefinder.py`` также можно запустить как скрипт, указав имя файла "
"скрипта Python в качестве аргумента, после чего будет распечатан отчет об "
"импортированных модулях."

#: ../../library/modulefinder.rst:21
msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr ""
"Запишите, что пакет с именем *имя_пакета* можно найти по указанному *пути*."

#: ../../library/modulefinder.rst:26
msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr ""
"Позволяет указать, что модуль с именем *oldname* на самом деле является "
"пакетом с именем *newname*."

#: ../../library/modulefinder.rst:32
msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list of "
"directories to search for modules; if not specified, ``sys.path`` is used.  "
"*debug* sets the debugging level; higher values make the class print "
"debugging messages about what it's doing. *excludes* is a list of module "
"names to exclude from the analysis. *replace_paths* is a list of ``(oldpath, "
"newpath)`` tuples that will be replaced in module paths."
msgstr ""
"Этот класс предоставляет методы :meth:`run_script` и :meth:`report` для "
"определения набора модулей, импортированных скриптом. *path* может быть "
"списком каталогов для поиска модулей; если не указано, используется ``sys."
"path``. *debug* устанавливает уровень отладки; более высокие значения "
"заставляют класс печатать отладочные сообщения о том, что он делает. "
"*исключает* — список имен модулей, которые необходимо исключить из анализа. "
"*replace_paths* — это список кортежей ``(oldpath, newpath)``, которые будут "
"заменены в путях модулей."

#: ../../library/modulefinder.rst:43
msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be "
"missing."
msgstr ""
"Выведите отчет на стандартный вывод, в котором перечислены модули, "
"импортированные сценарием, и их пути, а также модули, которые отсутствуют "
"или кажутся отсутствующими."

#: ../../library/modulefinder.rst:49
msgid ""
"Analyze the contents of the *pathname* file, which must contain Python code."
msgstr ""
"Проанализируйте содержимое файла *pathname*, который должен содержать код "
"Python."

#: ../../library/modulefinder.rst:54
msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr ""
"Имена модулей словаря сопоставлены с модулями. См. :ref:`modulefinder-"
"example`."

#: ../../library/modulefinder.rst:61
msgid "Example usage of :class:`ModuleFinder`"
msgstr "Пример использования :class:`ModuleFinder`"

#: ../../library/modulefinder.rst:63
msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "Скрипт, который будет проанализирован позже (bacon.py)::"

#: ../../library/modulefinder.rst:65
msgid ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"
msgstr ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"

#: ../../library/modulefinder.rst:78
msgid "The script that will output the report of bacon.py::"
msgstr "Скрипт, который будет выводить отчет bacon.py::"

#: ../../library/modulefinder.rst:80
msgid ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"
msgstr ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"

#: ../../library/modulefinder.rst:94
msgid "Sample output (may vary depending on the architecture)::"
msgstr "Пример вывода (может отличаться в зависимости от архитектуры):"

#: ../../library/modulefinder.rst:96
msgid ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
msgstr ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
