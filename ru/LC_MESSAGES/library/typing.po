# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmitriy Q, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`пишу` --- Поддержка подсказок типов"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Исходный код:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"Среда выполнения Python не применяет аннотации типов функций и переменных. "
"Они могут использоваться сторонними инструментами, такими как средства "
"проверки типов.\n"
"`, IDE, линтеры и т.д."

#: ../../library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. For the original "
"specification of the typing system, see :pep:`484`. For a simplified "
"introduction to type hints, see :pep:`483`."
msgstr ""

#: ../../library/typing.rst:31
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""

#: ../../library/typing.rst:36
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""

#: ../../library/typing.rst:40
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""

#: ../../library/typing.rst:44
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""

#: ../../library/typing.rst:50
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""
"`\"Шпаргалка по набору текста\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"

#: ../../library/typing.rst:50
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr "Краткий обзор подсказок по типам (размещен в документации mypy)"

#: ../../library/typing.rst:55
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""
"Раздел «Справочник по системе типов» в документации mypy <https://mypy."
"readthedocs.io/en/stable/index.html>`_"

#: ../../library/typing.rst:53
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"Система типизации Python стандартизирована с помощью PEP, поэтому эта ссылка "
"должна широко применяться к большинству средств проверки типов Python. "
"(Некоторые части могут быть специфичными для mypy.)"

#: ../../library/typing.rst:59
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""
"`\"Статическая типизация с помощью Python\" <https://typing.readthedocs.io/"
"en/latest/>`_"

#: ../../library/typing.rst:58
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"Документация, не зависящая от проверки типов, написанная сообществом, с "
"подробным описанием функций системы типов, полезных инструментов, связанных "
"с типизацией, и лучших практик типизации."

#: ../../library/typing.rst:65
msgid "Relevant PEPs"
msgstr ""

#: ../../library/typing.rst:67
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""

#: ../../library/typing.rst:77
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ""

#: ../../library/typing.rst:77
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""

#: ../../library/typing.rst:80
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:80
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""

#: ../../library/typing.rst:83
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:83
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:85
msgid ":pep:`586`: Literal Types"
msgstr ""

#: ../../library/typing.rst:86
msgid "*Introducing* :data:`Literal`"
msgstr ""

#: ../../library/typing.rst:87
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../library/typing.rst:88
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:89
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ""

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:91
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:95
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:94
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:97
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:98
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:99
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ""

#: ../../library/typing.rst:100
msgid "*Introducing* :data:`TypeAlias`"
msgstr ""

#: ../../library/typing.rst:101
msgid ":pep:`646`: Variadic Generics"
msgstr ""

#: ../../library/typing.rst:102
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr ""

#: ../../library/typing.rst:103
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:104
msgid "*Introducing* :data:`TypeGuard`"
msgstr ""

#: ../../library/typing.rst:105
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ""

#: ../../library/typing.rst:106
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr ""

#: ../../library/typing.rst:107
msgid ":pep:`673`: Self type"
msgstr ""

#: ../../library/typing.rst:108
msgid "*Introducing* :data:`Self`"
msgstr ""

#: ../../library/typing.rst:109
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ""

#: ../../library/typing.rst:110
msgid "*Introducing* :data:`LiteralString`"
msgstr ""

#: ../../library/typing.rst:112
msgid ":pep:`681`: Data Class Transforms"
msgstr ""

#: ../../library/typing.rst:112
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr ""

#: ../../library/typing.rst:122
msgid "Type aliases"
msgstr "Псевдонимы типа"

#: ../../library/typing.rst:124
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""

#: ../../library/typing.rst:135
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Псевдонимы типов полезны для упрощения сложных сигнатур типов. Например::"

#: ../../library/typing.rst:153
msgid ""
"Type aliases may be marked with :data:`TypeAlias` to make it explicit that "
"the statement is a type alias declaration, not a normal variable assignment::"
msgstr ""

#: ../../library/typing.rst:163
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:165
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Используйте :class:`NewType` помощник для создания отдельных типов::"

#: ../../library/typing.rst:172
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"Средство проверки статического типа будет обрабатывать новый тип так, как "
"если бы он был подклассом исходного типа. Это полезно для обнаружения "
"логических ошибок:"

#: ../../library/typing.rst:184
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Вы все еще можете выполнить все ``инт`` операции над переменной типа "
"``Идентификатор пользователя`` , но результат всегда будет типа ``инт`` . "
"Это позволяет вам пройти ``Идентификатор пользователя`` где бы ни был "
"``инт`` можно ожидать, но это предотвратит случайное создание "
"``Идентификатор пользователя`` неверным способом::"

#: ../../library/typing.rst:192
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Обратите внимание, что эти проверки выполняются только средством проверки "
"статического типа. Во время выполнения оператор ``Производный = "
"НовыйТип('Производный', Базовый)`` сделаю ``Производное`` вызываемый объект, "
"который немедленно возвращает любой параметр, который вы ему передаете. Это "
"означает выражение ``Производное(some_value)`` не создает новый класс и не "
"вносит больших затрат, помимо обычного вызова функции."

#: ../../library/typing.rst:198
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Точнее, выражение ``some_value является производным(some_value)`` всегда "
"верно во время выполнения."

#: ../../library/typing.rst:201
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "Недопустимо создавать подтип ``Производное`` ::"

#: ../../library/typing.rst:210
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"Однако возможно создание :class:`NewType` на основе «производного» "
"``НовыйТип`` ::"

#: ../../library/typing.rst:218
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "и проверка типов для ``ProUserId`` будет работать так, как ожидалось."

#: ../../library/typing.rst:220
msgid "See :pep:`484` for more details."
msgstr "Видеть :pep:`484` для более подробной информации."

#: ../../library/typing.rst:224
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:229
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"В отличие, ``НовыйТип`` объявляет один тип *подтипом* другого. Делает "
"``Производный = НовыйТип('Производный', Исходный)`` заставит средство "
"проверки статического типа обрабатывать ``Производное`` как *подкласс* "
"``Оригинальный`` , что означает значение типа ``Оригинальный`` нельзя "
"использовать там, где значение типа ``Производное`` ожидается. Это полезно, "
"когда вы хотите предотвратить логические ошибки с минимальными затратами во "
"время выполнения."

#: ../../library/typing.rst:238
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``НовыйТип`` теперь это класс, а не функция. В результате при вызове "
"возникают дополнительные затраты времени выполнения. ``НовыйТип`` над "
"обычной функцией."

#: ../../library/typing.rst:243
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"Производительность вызова ``НовыйТип`` был восстановлен до своего уровня в "
"Python 3.9."

#: ../../library/typing.rst:250
msgid "Annotating callable objects"
msgstr "Аннотирование вызываемых объектов"

#: ../../library/typing.rst:252
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""

#: ../../library/typing.rst:257 ../../library/typing.rst:2726
msgid "For example:"
msgstr "Например:"

#: ../../library/typing.rst:275
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""
"Синтаксис подписки всегда должен использоваться ровно с двумя значениями: "
"списком аргументов и типом возвращаемого значения. Список аргументов должен "
"представлять собой список типов, :class:`ParamSpec` , :data:`Объединить` , "
"или многоточие. Тип возвращаемого значения должен быть одного типа."

#: ../../library/typing.rst:280
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Если буквальное многоточие ``...`` указывается в качестве списка аргументов, "
"это указывает на то, что будет приемлем вызываемый объект с любым "
"произвольным списком параметров:"

#: ../../library/typing.rst:292
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Вызываемый`` не может выражать сложные сигнатуры, такие как функции, "
"принимающие переменное количество аргументов, перегруженные функции.\n"
"`или функции, которые имеют параметры только с ключевыми словами. Однако эти "
"подписи могут быть выражены путем определения :class:`Протокол` класс с :"
"meth:`~object.__call__` метод:"

#: ../../library/typing.rst:319
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Вызываемые объекты, которые принимают другие вызываемые объекты в качестве "
"аргументов, могут указывать, что их типы параметров зависят друг от друга, "
"используя :class:`ParamSpec` . Кроме того, если этот вызываемый объект "
"добавляет или удаляет аргументы из других вызываемых объектов, :data:"
"`Concatenate` можно использовать оператор. Они принимают форму "
"``Callable[ParamSpecVariable, ReturnType]`` и "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` соответственно."

#: ../../library/typing.rst:327 ../../library/typing.rst:3250
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` теперь поддерживает :class:`ParamSpec` и :data:`Concatenate`. "
"Видеть :pep:`612` для более подробной информации."

#: ../../library/typing.rst:332
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"В документации по :class:`ParamSpec` и :class:`Concatenate` представлены "
"примеры использования в ``Callable``."

#: ../../library/typing.rst:338
msgid "Generics"
msgstr "Generics"

#: ../../library/typing.rst:340
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Поскольку информация о типе объектов, хранящихся в контейнерах, не может "
"быть статически выведена общим способом, многие классы контейнеров в "
"стандартной библиотеке поддерживают подписку для обозначения ожидаемых типов "
"элементов контейнера."

#: ../../library/typing.rst:357
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""

#: ../../library/typing.rst:373
msgid "Annotating tuples"
msgstr "Аннотирование кортежей"

#: ../../library/typing.rst:375
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"Для большинства контейнеров в Python система типизации предполагает, что все "
"элементы в контейнере будут одного типа. Например::"

#: ../../library/typing.rst:390
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` принимает только один аргумент типа, поэтому программа "
"проверки типов выдаст ошибку при назначении ``y``, указанном выше. "
"Аналогично, :class:`~collections.abc.Mapping` принимает только два аргумента "
"типа: первый указывает тип ключей, а второй указывает тип значений."

#: ../../library/typing.rst:396
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"Однако, в отличие от большинства других контейнеров Python, в идиоматическом "
"коде Python кортежи часто содержат элементы одного типа. По этой причине "
"кортежи в системе типизации Python имеют особый случай. :class:`tuple` "
"принимает *любое* количество* аргументов типа::"

#: ../../library/typing.rst:412
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"Чтобы обозначить кортеж, который может иметь *любую* длину и в котором все "
"элементы имеют один и тот же тип ``T``, используйте ``tuple[T, ...]``. Чтобы "
"обозначить пустой кортеж, используйте ``tuple[()]``. Использование простого "
"``tuple`` в качестве аннотации эквивалентно использованию "
"``tuple[Any, ...]``::"

#: ../../library/typing.rst:435
msgid "The type of class objects"
msgstr "Тип объектов класса"

#: ../../library/typing.rst:437
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""

#: ../../library/typing.rst:447
msgid "Note that ``type[C]`` is covariant::"
msgstr "Обратите внимание, что ``type[C]`` является ковариантным::"

#: ../../library/typing.rst:463
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Единственными допустимыми параметрами для :class:`type` являются классы, :"
"data:`Any`, :ref:`переменные типа <generics>` и объединения любого из этих "
"типов. Например::"

#: ../../library/typing.rst:475
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` эквивалентен :class:`type`, который является корнем :ref:"
"`иерархии метаклассов <metaclasses>` в Python."

#: ../../library/typing.rst:481
msgid "User-defined generic types"
msgstr "Определяемые пользователем универсальные типы"

#: ../../library/typing.rst:483
msgid "A user-defined class can be defined as a generic class."
msgstr "Пользовательский класс можно определить как универсальный класс."

#: ../../library/typing.rst:509
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../library/typing.rst:513
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:522
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Универсальный тип может иметь любое количество переменных типа. Все "
"разновидности :class:`TypeVar` допустимы в качестве параметров "
"универсального типа::"

#: ../../library/typing.rst:534
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Каждый аргумент переменной типа для :class:`Generic` должен быть уникальным. "
"Таким образом, это недействительно::"

#: ../../library/typing.rst:545
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../library/typing.rst:555
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""
"При наследовании от универсальных классов можно было исправить некоторые "
"параметры типа:"

#: ../../library/typing.rst:565
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "В этом случае MyDict имеет единственный параметр T."

#: ../../library/typing.rst:567
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"Использование универсального класса без указания параметров типа "
"предполагает :data:`Any` для каждой позиции. В следующем примере MyIterable "
"не является универсальным, а неявно наследуется от Iterable[Any]:"

#: ../../library/typing.rst:578
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""
"Также поддерживаются определяемые пользователем псевдонимы универсального "
"типа. Примеры::"

#: ../../library/typing.rst:595
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` больше не имеет собственного метакласса."

#: ../../library/typing.rst:598
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:614
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:626
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Обратите внимание, что дженерики с :class:`ParamSpec` могут не иметь "
"правильных __parameters__`` после замены в некоторых случаях, поскольку они "
"предназначены в первую очередь для проверки статического типа."

#: ../../library/typing.rst:630
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` теперь можно параметризовать через выражения параметров. "
"См. :class:`ParamSpec` и :pep:`612` для более подробной информации."

#: ../../library/typing.rst:634
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"Пользовательский универсальный класс может иметь ABC в качестве базовых "
"классов без конфликта метаклассов. Общие метаклассы не поддерживаются. "
"Результат параметризации дженериков кэшируется, и большинство типов в модуле "
"типизации являются :term:`hashable` и сопоставимы на предмет равенства."

#: ../../library/typing.rst:641
msgid "The :data:`Any` type"
msgstr "Тип :data:`Any` "

#: ../../library/typing.rst:643
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Особый тип — :data:`Any`. Средство проверки статического типа будет "
"рассматривать каждый тип как совместимый с :data:`Any` и :data:`Any` как "
"совместимый с каждым типом."

#: ../../library/typing.rst:647
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Это означает, что можно выполнить любую операцию или вызов метода со "
"значением типа :data:`Any` и присвоить его любой переменной::"

#: ../../library/typing.rst:665
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Обратите внимание, что при присвоении значения типа :data:`Any` более "
"точному типу проверка типа не выполняется. Например, средство проверки "
"статического типа не сообщило об ошибке при присвоении ``a`` значению ``s``, "
"хотя ``s`` был объявлен как тип :class:`str` и получил :class: значение "
"`int` во время выполнения!"

#: ../../library/typing.rst:671
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Более того, все функции без типа возвращаемого значения или типов параметров "
"по умолчанию будут неявно использовать :data:`Any`::"

#: ../../library/typing.rst:684
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Такое поведение позволяет использовать :data:`Any` в качестве *аварийного "
"люка*, когда вам нужно смешивать динамически и статически типизированный код."

#: ../../library/typing.rst:687
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Сравните поведение :data:`Any` с поведением :class:`object`. Подобно :data:"
"`Any`, каждый тип является подтипом :class:`object`. Однако, в отличие от :"
"data:`Any`, обратное неверно: :class:`object` *не* является подтипом любого "
"другого типа."

#: ../../library/typing.rst:692
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Это означает, что когда типом значения является :class:`object`, средство "
"проверки типа отклонит почти все операции с ним, а присвоение его переменной "
"(или использование его в качестве возвращаемого значения) более "
"специализированного типа является типом. ошибка. Например::"

#: ../../library/typing.rst:714
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Используйте :class:`object`, чтобы указать, что значение может быть любого "
"типа типобезопасным образом. Используйте :data:`Any`, чтобы указать, что "
"значение является динамически типизированным."

#: ../../library/typing.rst:719
msgid "Nominal vs structural subtyping"
msgstr "Номинальный и структурный подтипы"

#: ../../library/typing.rst:721
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Первоначально :pep:`484` определял систему статических типов Python как "
"использующую *номинальное подтипирование*. Это означает, что класс ``A`` "
"разрешен там, где ожидается класс ``B``, тогда и только тогда, когда ``A`` "
"является подклассом ``B``."

#: ../../library/typing.rst:725
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Ранее это требование также применялось к абстрактным базовым классам, таким "
"как :class:`~collections.abc.Iterable`. Проблема с этим подходом заключается "
"в том, что класс должен быть явно помечен для их поддержки, что является "
"непитоническим и отличается от того, что обычно делается в идиоматическом "
"динамически типизированном коде Python. Например, это соответствует :pep:"
"`484`::"

#: ../../library/typing.rst:738
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` позволяет решить эту проблему, позволяя пользователям писать "
"приведенный выше код без явных базовых классов в определении класса, что "
"позволяет неявно считать Bucket подтипом как ``Sized``, так и `` "
"Iterable[int]`` с помощью средств проверки статических типов. Это известно "
"как *структурное подтипирование* (или статическая утиная типизация)::"

#: ../../library/typing.rst:754
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Более того, создав подкласс специального класса :class:`Protocol`, "
"пользователь может определить новые пользовательские протоколы, чтобы в "
"полной мере воспользоваться структурным подтипированием (см. примеры ниже)."

#: ../../library/typing.rst:759
msgid "Module contents"
msgstr "Содержимое модуля"

#: ../../library/typing.rst:761
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr "Модуль ``typing`` определяет следующие классы, функции и декораторы."

#: ../../library/typing.rst:764
msgid "Special typing primitives"
msgstr "Специальные примитивы типизации"

#: ../../library/typing.rst:767
msgid "Special types"
msgstr "Специальные типы"

#: ../../library/typing.rst:769
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Их можно использовать в качестве типов в аннотациях. Они не поддерживают "
"подписку с использованием ``[]``."

#: ../../library/typing.rst:774
msgid "Special type indicating an unconstrained type."
msgstr "Специальный тип, указывающий на неограниченный тип."

#: ../../library/typing.rst:776
msgid "Every type is compatible with :data:`Any`."
msgstr "Каждый тип совместим с :data:`Any`."

#: ../../library/typing.rst:777
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Любой` совместим со всеми типами."

#: ../../library/typing.rst:779
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` теперь можно использовать в качестве базового класса. Это может "
"быть полезно для предотвращения ошибок проверки типов в классах, которые "
"могут уклоняться от ввода где угодно или являются очень динамичными."

#: ../../library/typing.rst:786
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "Переменная ограниченного типа <typing-constrained-typevar>."

#: ../../library/typing.rst:788
msgid "Definition::"
msgstr "Определение::"

#: ../../library/typing.rst:792
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` предназначен для использования с функциями, которые могут "
"принимать аргументы :class:`str` или :class:`bytes`, но не могут допускать "
"их смешивания."

#: ../../library/typing.rst:795 ../../library/typing.rst:886
#: ../../library/typing.rst:905 ../../library/typing.rst:962
#: ../../library/typing.rst:1121 ../../library/typing.rst:1178
#: ../../library/typing.rst:1386 ../../library/typing.rst:2566
msgid "For example::"
msgstr "Например::"

#: ../../library/typing.rst:804
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""
"Обратите внимание, что, несмотря на свое название, AnyStr не имеет ничего "
"общего с типом :class:Any и не означает «любая строка». В частности, AnyStr "
"и str | bytes`` отличаются друг от друга и имеют разные варианты "
"использования::"

#: ../../library/typing.rst:821
msgid "Special type that includes only literal strings."
msgstr "Специальный тип, включающий только литеральные строки."

#: ../../library/typing.rst:823
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""
"Любой строковый литерал совместим с LiteralString, как и другой "
"LiteralString. Однако объект, набранный просто как ``str``, таковым не "
"является. Строка, созданная путем составления объектов типа LiteralString, "
"также принимается как LiteralString."

#: ../../library/typing.rst:829
msgid "Example:"
msgstr "Пример:"

#: ../../library/typing.rst:845
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` полезен для чувствительных API, где произвольные строки, "
"сгенерированные пользователем, могут вызвать проблемы. Например, два "
"приведенных выше случая, в которых генерируются ошибки проверки типов, могут "
"быть уязвимы для атаки с помощью SQL-инъекции."

#: ../../library/typing.rst:850
msgid "See :pep:`675` for more details."
msgstr "См. :pep:`675` для более подробной информации."

#: ../../library/typing.rst:856
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""

#: ../../library/typing.rst:859
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:879
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""

#: ../../library/typing.rst:884
msgid "Special type indicating that a function never returns."
msgstr ""

#: ../../library/typing.rst:893
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:903
msgid "Special type to represent the current enclosed class."
msgstr "Специальный тип для представления текущего вложенного класса."

#: ../../library/typing.rst:919
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Эта аннотация семантически эквивалентна следующей, хотя и в более краткой "
"форме:"

#: ../../library/typing.rst:931
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"В общем, если что-то возвращает «self», как в приведенных выше примерах, вам "
"следует использовать «Self» в качестве аннотации возврата. Если ``Foo."
"return_self`` был помечен как возвращающий ``\"Foo\"``, то средство проверки "
"типов будет считать, что объект, возвращаемый из ``SubclassOfFoo."
"return_self``, имеет тип ``Foo``, а не `` ПодклассOfFoo``."

#: ../../library/typing.rst:937
msgid "Other common use cases include:"
msgstr "Другие распространенные случаи использования включают в себя:"

#: ../../library/typing.rst:939
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod`\\s, которые используются в качестве альтернативных "
"конструкторов и возвращают экземпляры параметра ``cls``."

#: ../../library/typing.rst:941
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""
"Аннотирование метода :meth:`~object.__enter__`, который возвращает self."

#: ../../library/typing.rst:943
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""
"Вам не следует использовать Self в качестве аннотации возврата, если метод "
"не гарантированно возвращает экземпляр подкласса, когда класс является "
"подклассом:"

#: ../../library/typing.rst:954
msgid "See :pep:`673` for more details."
msgstr "См. :pep:`673` для более подробной информации."

#: ../../library/typing.rst:960
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Специальная аннотация для явного объявления :ref:`псевдонима типа <type-"
"aliases>`."

#: ../../library/typing.rst:968
msgid ""
"``TypeAlias`` is particularly useful for annotating aliases that make use of "
"forward references, as it can be hard for type checkers to distinguish these "
"from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:988
msgid "See :pep:`613` for more details."
msgstr "См. :pep:`613` для более подробной информации."

#: ../../library/typing.rst:993
msgid "Special forms"
msgstr "Специальные формы"

#: ../../library/typing.rst:995
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Их можно использовать в качестве типов в аннотациях. Все они поддерживают "
"подписку с использованием ``[]``, но каждый из них имеет уникальный "
"синтаксис."

#: ../../library/typing.rst:1000
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Тип союза; ``Union[X, Y]`` эквивалентен ``X | Y`` и означает либо X, либо Y."

#: ../../library/typing.rst:1002
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Чтобы определить объединение, используйте, например, ``Union[int, str]`` или "
"сокращение ``int | ул``. Рекомендуется использовать это сокращение. "
"Подробности:"

#: ../../library/typing.rst:1004
msgid "The arguments must be types and there must be at least one."
msgstr "Аргументы должны быть типами, и их должен быть хотя бы один."

#: ../../library/typing.rst:1006
msgid "Unions of unions are flattened, e.g.::"
msgstr "Союзы союзов сглаживаются, например::"

#: ../../library/typing.rst:1010
msgid "Unions of a single argument vanish, e.g.::"
msgstr "Объединения одного аргумента исчезают, например::"

#: ../../library/typing.rst:1014
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Лишние аргументы пропускаются, например::"

#: ../../library/typing.rst:1018
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "При сравнении объединений порядок аргументов игнорируется, например::"

#: ../../library/typing.rst:1022
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Вы не можете создать подкласс или создать экземпляр ``Union``."

#: ../../library/typing.rst:1024
msgid "You cannot write ``Union[X][Y]``."
msgstr "Вы не можете написать ``Union[X][Y]``."

#: ../../library/typing.rst:1026
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "Не удаляйте явные подклассы из объединений во время выполнения."

#: ../../library/typing.rst:1029
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Объединения теперь можно записать как ``X | Й``. См. :ref:`выражения типов "
"объединения<types-union>`."

#: ../../library/typing.rst:1035
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` эквивалентен ``X | None`` (или ``Union[X, None]``)."

#: ../../library/typing.rst:1037
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Обратите внимание, что это не то же самое, что необязательный аргумент, "
"который имеет значение по умолчанию. Необязательный аргумент со значением по "
"умолчанию не требует квалификатора «Optional» в аннотации его типа только "
"потому, что он не является обязательным. Например::"

#: ../../library/typing.rst:1045
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"С другой стороны, если разрешено явное значение «None», использование "
"«Optional» уместно независимо от того, является ли аргумент необязательным "
"или нет. Например::"

#: ../../library/typing.rst:1052
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Необязательное теперь можно записать как ``X | Нет``. См. :ref:`выражения "
"типов объединения<types-union>`."

#: ../../library/typing.rst:1058
msgid "Special form for annotating higher-order functions."
msgstr "Специальная форма для аннотирования функций высшего порядка."

#: ../../library/typing.rst:1060
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` можно использовать в сочетании с :ref:`Callable <annotating-"
"callables>` и :class:`ParamSpec` для аннотирования вызываемого объекта более "
"высокого порядка, который добавляет, удаляет или преобразует параметры "
"другого вызываемого объекта. Использование имеет форму "
"``Объединить[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. ``Объединение`` "
"в настоящее время допустимо только при использовании в качестве первого "
"аргумента для :ref:`Callable <annotating-callables>`. Последний параметр для "
"``Concatenate`` должен быть :class:`ParamSpec` или многоточием (``...``)."

#: ../../library/typing.rst:1069
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Например, чтобы аннотировать декоратор with_lock, который предоставляет :"
"class:`threading.Lock` декорируемой функции, можно использовать "
"``Concatenate``, чтобы указать, что ``with_lock`` ожидает вызываемый объект, "
"который принимает ``Lock`` в качестве первого аргумента и возвращает "
"вызываемый объект с сигнатурой другого типа. В этом случае :class:"
"`ParamSpec` указывает, что типы параметров возвращаемого вызываемого объекта "
"зависят от типов параметров вызываемого объекта, передаваемого в::"

#: ../../library/typing.rst:1108 ../../library/typing.rst:1769
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""
":pep:`612` -- Переменные спецификации параметров (PEP, в котором "
"представлены ``ParamSpec`` и ``Concatenate``)"

#: ../../library/typing.rst:1110
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../../library/typing.rst:1111 ../../library/typing.rst:1772
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1115
msgid "Special typing form to define \"literal types\"."
msgstr "Специальная форма ввода для определения «литеральных типов»."

#: ../../library/typing.rst:1117
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""
"``Литерал`` может использоваться, чтобы указать средствам проверки типов, "
"что аннотированный объект имеет значение, эквивалентное одному из "
"предоставленных литералов."

#: ../../library/typing.rst:1133
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` не может быть подклассом. Во время выполнения в качестве "
"аргумента типа для ``Literal[...]`` допускается произвольное значение, но "
"средства проверки типов могут налагать ограничения. См. :pep:`586` для "
"получения более подробной информации о литеральных типах."

#: ../../library/typing.rst:1139
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` теперь устраняет дубликаты параметров. Сравнения на равенство "
"объектов ``Literal`` больше не зависят от порядка. ``Литеральные`` объекты "
"теперь будут вызывать исключение :exc:`TypeError` во время сравнения на "
"равенство, если один из их параметров не :term:`hashable`."

#: ../../library/typing.rst:1147
msgid "Special type construct to mark class variables."
msgstr "Конструкция специального типа для обозначения переменных класса."

#: ../../library/typing.rst:1149
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Как было представлено в :pep:`526`, аннотация переменной, заключенная в "
"ClassVar, указывает, что данный атрибут предназначен для использования в "
"качестве переменной класса и не должен устанавливаться в экземплярах этого "
"класса. Использование::"

#: ../../library/typing.rst:1157
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` принимает только типы и не подлежит дальнейшей подписке."

#: ../../library/typing.rst:1159
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` сам по себе не является классом и не должен использоваться "
"с :func:`isinstance` или :func:`issubclass`. :data:`ClassVar` не меняет "
"поведение Python во время выполнения, но может использоваться сторонними "
"средствами проверки типов. Например, средство проверки типов может пометить "
"следующий код как ошибку:"

#: ../../library/typing.rst:1173
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""
"Специальная конструкция типизации для указания окончательных имен для "
"средств проверки типов."

#: ../../library/typing.rst:1175
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""
"Окончательные имена не могут быть переназначены ни в какой области. "
"Окончательные имена, объявленные в областях классов, не могут быть "
"переопределены в подклассах."

#: ../../library/typing.rst:1189 ../../library/typing.rst:2582
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"Проверка этих свойств во время выполнения не выполняется. См. :pep:`591` для "
"более подробной информации."

#: ../../library/typing.rst:1196
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""
"Специальная конструкция типизации для пометки ключа :class:`TypedDict` как "
"необходимого."

#: ../../library/typing.rst:1198
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""
"В основном это полезно для TypedDicts ``total=False``. См. :class:"
"`TypedDict` и :pep:`655` для более подробной информации."

#: ../../library/typing.rst:1205
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""
"Специальная конструкция типизации, позволяющая пометить ключ :class:"
"`TypedDict` как потенциально отсутствующий."

#: ../../library/typing.rst:1208
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "См. :class:`TypedDict` и :pep:`655` для более подробной информации."

#: ../../library/typing.rst:1214
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""
"Специальная форма ввода для добавления контекстно-зависимых метаданных в "
"аннотацию."

#: ../../library/typing.rst:1216
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""
"Добавьте метаданные ``x`` к заданному типу ``T``, используя аннотацию "
"``Annotated[T, x]``. Метаданные, добавленные с помощью «Аннотаций», могут "
"использоваться инструментами статического анализа или во время выполнения. "
"Во время выполнения метаданные сохраняются в атрибуте :attr:`!__metadata__`."

#: ../../library/typing.rst:1221
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"Если библиотека или инструмент встречает аннотацию «Annotated[T, x]» и не "
"имеет специальной логики для метаданных, она должна игнорировать метаданные "
"и просто рассматривать аннотацию как «T». Таким образом, Annotated может "
"быть полезен для кода, который хочет использовать аннотации для целей, "
"находящихся за пределами системы статической типизации Python."

#: ../../library/typing.rst:1227
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""
"Использование Annotated[T, x]`` в качестве аннотации по-прежнему позволяет "
"выполнять статическую проверку типов ``T``, поскольку средства проверки "
"типов просто игнорируют метаданные ``x``. Таким образом, ``Annotated`` "
"отличается от декоратора :func:`@no_type_check <no_type_check>`, который "
"также можно использовать для добавления аннотаций за пределами системы "
"типизации, но полностью отключает проверку типов для функции или класса."

#: ../../library/typing.rst:1234
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"Ответственность за интерпретацию метаданных лежит на инструменте или "
"библиотеке, обнаруживающей аннотацию «Аннотированная». Инструмент или "
"библиотека, обнаруживающая тип ``Annotated``, может сканировать элементы "
"метаданных, чтобы определить, представляют ли они интерес (например, "
"используя :func:`isinstance`)."

#: ../../library/typing.rst:1242
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""
"Вот пример того, как вы можете использовать Annotated для добавления "
"метаданных в аннотации типов, если вы выполняете анализ диапазона:"

#: ../../library/typing.rst:1255
msgid "Details of the syntax:"
msgstr "Подробности синтаксиса:"

#: ../../library/typing.rst:1257
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "Первый аргумент ``Annotated`` должен быть допустимого типа."

#: ../../library/typing.rst:1259
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""
"Могут быть предоставлены несколько элементов метаданных (Annotated "
"поддерживает переменные аргументы)::"

#: ../../library/typing.rst:1268
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""
"Инструмент, использующий аннотации, должен решить, разрешено ли клиенту "
"добавлять несколько элементов метаданных в одну аннотацию и как объединить "
"эти аннотации."

#: ../../library/typing.rst:1272
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""
"``Annotated`` должен иметь как минимум два аргумента ( ``Annotated[int]`` "
"недопустимо)"

#: ../../library/typing.rst:1275
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""
"Порядок элементов метаданных сохраняется и имеет значение для проверок на "
"равенство:"

#: ../../library/typing.rst:1282
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""
"Вложенные типы с аннотациями сглаживаются. Порядок элементов метаданных "
"начинается с самой внутренней аннотации::"

#: ../../library/typing.rst:1289
msgid "Duplicated metadata elements are not removed::"
msgstr "Дублированные элементы метаданных не удаляются::"

#: ../../library/typing.rst:1295
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr "``Annotated`` можно использовать с вложенными и общими псевдонимами:"

#: ../../library/typing.rst:1308
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""
"``Annotated`` нельзя использовать с распакованным :class:`TypeVarTuple`::"

#: ../../library/typing.rst:1312
msgid "This would be equivalent to::"
msgstr "Это будет эквивалентно::"

#: ../../library/typing.rst:1316
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""
"где ``T1``, ``T2`` и т. д. — это :class:`TypeVars <TypeVar>`. Это было бы "
"неверно: в Annotated следует передавать только один тип."

#: ../../library/typing.rst:1319
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"По умолчанию :func:`get_type_hints` удаляет метаданные из аннотаций. "
"Передайте ``include_extras=True``, чтобы сохранить метаданные:"

#: ../../library/typing.rst:1332
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""
"Во время выполнения метаданные, связанные с типом ``Annotated``, могут быть "
"получены через атрибут :attr:`!__metadata__`:"

#: ../../library/typing.rst:1346
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - Гибкие функции и аннотации переменных"

#: ../../library/typing.rst:1347
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "PEP вводит ``Annotated`` в стандартную библиотеку."

#: ../../library/typing.rst:1354
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""
"Специальная конструкция типизации для маркировки пользовательских функций "
"защиты типа."

#: ../../library/typing.rst:1356
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""
"TypeGuard можно использовать для аннотации типа возвращаемого значения "
"определяемой пользователем функции защиты типа. ``TypeGuard`` принимает "
"только один аргумент типа. Во время выполнения функции, помеченные таким "
"образом, должны возвращать логическое значение."

#: ../../library/typing.rst:1360
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""
"Целью TypeGuard является улучшение *сужения типов* — метода, используемого "
"средствами проверки статических типов для определения более точного типа "
"выражения в потоке кода программы. Обычно сужение типа выполняется путем "
"анализа потока условного кода и применения сужения к блоку кода. Условное "
"выражение здесь иногда называют «защитой типа»::"

#: ../../library/typing.rst:1375
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""
"Иногда было бы удобно использовать определяемую пользователем логическую "
"функцию в качестве защиты типа. Такая функция должна использовать "
"TypeGuard[...]`` в качестве возвращаемого типа, чтобы предупредить об этом "
"средства проверки статических типов."

#: ../../library/typing.rst:1379
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"Использование ``-> TypeGuard`` сообщает средству проверки статического типа, "
"что для данной функции:"

#: ../../library/typing.rst:1382
msgid "The return value is a boolean."
msgstr "Возвращаемое значение является логическим."

#: ../../library/typing.rst:1383
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Если возвращаемое значение — True, тип его аргумента — это тип внутри "
"TypeGuard."

#: ../../library/typing.rst:1400
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1404
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""
"Короче говоря, форма ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...`` "
"означает, что если ``foo(arg)`` возвращает ``True``, то ``arg` ` сужается от "
"``TypeA`` до ``TypeB``."

#: ../../library/typing.rst:1410
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""
"``TypeB`` не обязательно должен быть более узкой формой ``TypeA`` — это "
"может быть даже более широкая форма. Основная причина заключается в том, "
"чтобы разрешить такие вещи, как сужение ``list[object]`` до ``list[str]``, "
"хотя последний не является подтипом первого, поскольку ``list`` является "
"инвариантным. Ответственность за написание типобезопасных защитных элементов "
"возлагается на пользователя."

#: ../../library/typing.rst:1416
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""
"``TypeGuard`` также работает с переменными типа. См. :pep:`647` для более "
"подробной информации."

#: ../../library/typing.rst:1423
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""
"Оператор ввода, который концептуально помечает объект как распакованный."

#: ../../library/typing.rst:1425
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""
"Например, использование оператора распаковки ``*`` для кортежа переменных "
"типа :ref:`<typevartuple>` эквивалентно использованию ``Unpack`` для пометки "
"кортежа переменных типа как распакованного::"

#: ../../library/typing.rst:1434
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"Фактически, ``Unpack`` можно использовать взаимозаменяемо с ``*`` в "
"контексте типов :class:`typing.TypeVarTuple <TypeVarTuple>` и :class:"
"`builtins.tuple <tuple>`. Вы можете увидеть явное использование ``Unpack`` в "
"старых версиях Python, где ``*`` нельзя было использовать в определенных "
"местах:"

#: ../../library/typing.rst:1451
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1453
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types."
msgstr ""

#: ../../library/typing.rst:1459
msgid "Abstract base class for generic types."
msgstr "Абстрактный базовый класс для универсальных типов."

#: ../../library/typing.rst:1461
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:1470
msgid "This class can then be used as follows::"
msgstr "Затем этот класс можно использовать следующим образом:"

#: ../../library/typing.rst:1485
msgid "Type variable."
msgstr "Тип переменной."

#: ../../library/typing.rst:1487 ../../library/typing.rst:1584
#: ../../library/typing.rst:1694 ../../library/typing.rst:1808
#: ../../library/typing.rst:1879 ../../library/typing.rst:2766
msgid "Usage::"
msgstr "Использование::"

#: ../../library/typing.rst:1493
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""
"Переменные типа существуют в первую очередь для целей проверки статических "
"типов. Они служат параметрами для универсальных типов, а также для "
"определений универсальных функций и псевдонимов типов. См. :class:`Generic` "
"для получения дополнительной информации об универсальных типах. Общие "
"функции работают следующим образом:"

#: ../../library/typing.rst:1514
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""
"Обратите внимание, что переменные типа могут быть *связанными*, "
"*ограниченными* или ни одним из них, но не могут быть одновременно "
"*связанными* и* ограниченными."

#: ../../library/typing.rst:1517
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1521
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"Переменные связанного типа и переменные ограниченного типа имеют разную "
"семантику по нескольким важным причинам. Использование переменной типа "
"*bound* означает, что TypeVar будет решен с использованием наиболее "
"конкретного возможного типа::"

#: ../../library/typing.rst:1536
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""
"Переменные типа могут быть привязаны к конкретным типам, абстрактным типам "
"(ABC или протоколам) и даже к объединениям типов:"

#: ../../library/typing.rst:1544
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""
"Однако использование переменной типа *constrained* означает, что ``TypeVar`` "
"может быть решена только как одно из заданных ограничений:"

#: ../../library/typing.rst:1555
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr "Во время выполнения ``isinstance(x, T)`` вызовет :exc:`TypeError`."

#: ../../library/typing.rst:1559
msgid "The name of the type variable."
msgstr "Имя переменной типа."

#: ../../library/typing.rst:1563
msgid "Whether the type var has been marked as covariant."
msgstr ""

#: ../../library/typing.rst:1567
msgid "Whether the type var has been marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1571
msgid "The bound of the type variable, if any."
msgstr "Граница переменной типа, если таковая имеется."

#: ../../library/typing.rst:1575
msgid "A tuple containing the constraints of the type variable, if any."
msgstr "Кортеж, содержащий ограничения переменной типа, если таковые имеются."

#: ../../library/typing.rst:1581
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""
"Введите кортеж переменной. Специализированная форма :ref:`переменной типа "
"<typevar>`, которая позволяет использовать *вариативные* дженерики."

#: ../../library/typing.rst:1592
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"Переменная обычного типа позволяет параметризовать один тип. Кортеж "
"переменных типа, напротив, позволяет параметризовать *произвольное* "
"количество типов, действуя как *произвольное* количество переменных типа, "
"заключенных в кортеж. Например::"

#: ../../library/typing.rst:1614
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"Обратите внимание на использование оператора распаковки ``*`` в ``tuple[T, "
"*Ts]``. Концептуально, вы можете думать о «Ts» как о кортеже переменных типа "
"«(T1, T2, ...)». ``tuple[T, *Ts]`` тогда превратится в ``tuple[T, *(T1, "
"T2, ...)]``, что эквивалентно ``tuple[T, T1, T2, .. .]``. (Обратите "
"внимание, что в более старых версиях Python вы можете увидеть это, "
"написанное с использованием :data:`Unpack <Unpack>` вместо ``Unpack[Ts]``.)"

#: ../../library/typing.rst:1622
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""
"Кортежи переменных типа должны *всегда* быть распакованы. Это помогает "
"отличить кортежи переменных типа от переменных обычного типа:"

#: ../../library/typing.rst:1629
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""
"Кортежи переменных типа могут использоваться в тех же контекстах, что и "
"переменные обычного типа. Например, в определениях классов, аргументах и ​​"
"возвращаемых типах:"

#: ../../library/typing.rst:1638
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""
"Кортежи переменных типа можно удачно комбинировать с переменными обычного "
"типа:"

#: ../../library/typing.rst:1657
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""
"Однако обратите внимание, что не более одного кортежа переменных типа может "
"присутствовать в одном списке аргументов типа или параметров типа:"

#: ../../library/typing.rst:1664
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""
"Наконец, кортеж переменных распакованного типа можно использовать в качестве "
"аннотации типа ``*args``::"

#: ../../library/typing.rst:1674
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"В отличие от нераспакованных аннотаций ``*args`` - например, ``*args: int``, "
"которые указывают, что *все* аргументы являются ``int`` - ``*args: *Ts`` "
"включает ссылка на типы *индивидуальных* аргументов в ``*args``. Здесь это "
"позволяет нам гарантировать, что типы ``*args``, передаваемые в "
"``call_soon``, соответствуют типам (позиционных) аргументов ``callback``."

#: ../../library/typing.rst:1681
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""
"См. :pep:`646` для получения более подробной информации о кортежах "
"переменных типа."

#: ../../library/typing.rst:1685
msgid "The name of the type variable tuple."
msgstr "Имя кортежа переменной типа."

#: ../../library/typing.rst:1691
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""
"Переменная спецификации параметра. Специализированная версия :ref:"
"`переменных типа <typevar>`."

#: ../../library/typing.rst:1698
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"Переменные спецификации параметров существуют в первую очередь для целей "
"проверки статических типов. Они используются для пересылки типов параметров "
"одного вызываемого объекта в другой вызываемый объект — шаблон, обычно "
"встречающийся в функциях и декораторах более высокого порядка. Они "
"действительны только при использовании в ``Concatenate`` или в качестве "
"первого аргумента ``Callable``, или в качестве параметров для "
"пользовательских дженериков. См. :class:`Generic` для получения "
"дополнительной информации об универсальных типах."

#: ../../library/typing.rst:1705
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Например, чтобы добавить базовое ведение журнала к функции, можно создать "
"декоратор add_logging для регистрации вызовов функций. Переменная "
"спецификации параметра сообщает средству проверки типов, что вызываемый "
"объект, переданный в декоратор, и новый вызываемый объект, возвращаемый им, "
"имеют взаимозависимые параметры типа:"

#: ../../library/typing.rst:1729
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""
"Без ``ParamSpec`` самым простым способом аннотировать это раньше было "
"использование :class:`TypeVar` с привязкой ``Callable[..., Any]``. Однако "
"это вызывает две проблемы:"

#: ../../library/typing.rst:1733
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"Средство проверки типов не может проверить тип функции ``inner``, поскольку "
"для ``*args`` и ``**kwargs`` необходимо ввести :data:`Any`."

#: ../../library/typing.rst:1735
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` может потребоваться в теле декоратора ``add_logging`` при "
"возврате ``inner`` функции, или необходимо указать средству проверки "
"статического типа игнорировать ``return Internal``."

#: ../../library/typing.rst:1742
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Поскольку ParamSpec захватывает как позиционные, так и ключевые параметры, P."
"args и P.kwargs можно использовать для разделения ParamSpec на компоненты. "
"``P.args`` представляет собой кортеж позиционных параметров в данном вызове "
"и должен использоваться только для аннотации ``*args``. ``P.kwargs`` "
"представляет собой сопоставление параметров ключевого слова с их значениями "
"в данном вызове и должен использоваться только для аннотирования "
"``**kwargs``. Оба атрибута требуют, чтобы аннотированный параметр находился "
"в области видимости. Во время выполнения P.args и P.kwargs являются "
"экземплярами :class:`ParamSpecArgs` и :class:`ParamSpecKwargs` "
"соответственно."

#: ../../library/typing.rst:1754
msgid "The name of the parameter specification."
msgstr "Имя спецификации параметра."

#: ../../library/typing.rst:1756
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"Переменные спецификации параметров, созданные с помощью ``covariant=True`` "
"или ``contravariant=True``, могут использоваться для объявления ковариантных "
"или контравариантных универсальных типов. Также принимается аргумент "
"``bound``, аналогичный :class:`TypeVar`. Однако фактическая семантика этих "
"ключевых слов еще не определена."

#: ../../library/typing.rst:1765
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Можно травить только переменные спецификации параметров, определенные в "
"глобальной области видимости."

#: ../../library/typing.rst:1771
msgid ":data:`Concatenate`"
msgstr ":data:`Concatenate`"

#: ../../library/typing.rst:1777
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Аргументы и атрибуты аргументов ключевого слова :class:`ParamSpec`. Атрибут "
"P.args объекта ParamSpec является экземпляром ParamSpecArgs, а P.kwargs — "
"экземпляром ParamSpecKwargs. Они предназначены для самоанализа во время "
"выполнения и не имеют особого значения для средств проверки статических "
"типов."

#: ../../library/typing.rst:1782
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""
"Вызов :func:`get_origin` для любого из этих объектов вернет исходный "
"``ParamSpec``:"

#: ../../library/typing.rst:1798
msgid "Other special directives"
msgstr "Другие специальные директивы"

#: ../../library/typing.rst:1800
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""
"Эти функции и классы не следует использовать непосредственно в качестве "
"аннотаций. Их предполагаемая цель — стать строительными блоками для создания "
"и объявления типов."

#: ../../library/typing.rst:1806
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Типизированная версия :func:`collections.namedtuple`."

#: ../../library/typing.rst:1814
msgid "This is equivalent to::"
msgstr "Это эквивалентно::"

#: ../../library/typing.rst:1818
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Чтобы присвоить полю значение по умолчанию, вы можете присвоить ему значение "
"в теле класса:"

#: ../../library/typing.rst:1827
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Поля со значением по умолчанию должны идти после полей без значения по "
"умолчанию."

#: ../../library/typing.rst:1829
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"Результирующий класс имеет дополнительный атрибут ``__annotations__``, "
"задающий словарь, который сопоставляет имена полей с типами полей. (Имена "
"полей находятся в атрибуте ``_fields``, а значения по умолчанию — в атрибуте "
"``_field_defaults``, оба из которых являются частью API :func:`~collections."
"namedtuple`.)"

#: ../../library/typing.rst:1835
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "Подклассы NamedTuple также могут иметь строки документации и методы::"

#: ../../library/typing.rst:1845
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "Подклассы ``NamedTuple`` могут быть общими::"

#: ../../library/typing.rst:1851
msgid "Backward-compatible usage::"
msgstr "Использование с обратной совместимостью::"

#: ../../library/typing.rst:1855
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "Добавлена ​​поддержка синтаксиса аннотаций переменных :pep:`526`."

#: ../../library/typing.rst:1858
msgid "Added support for default values, methods, and docstrings."
msgstr ""
"Добавлена ​​поддержка значений, методов и строк документации по умолчанию."

#: ../../library/typing.rst:1861
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Атрибуты _field_types и __annotations__ теперь являются обычными словарями, "
"а не экземплярами OrderedDict."

#: ../../library/typing.rst:1865
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Удален атрибут ``_field_types`` в пользу более стандартного атрибута "
"``__annotations__``, который содержит ту же информацию."

#: ../../library/typing.rst:1869
msgid "Added support for generic namedtuples."
msgstr "Добавлена ​​поддержка общих именованных кортежей."

#: ../../library/typing.rst:1874
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""
"Вспомогательный класс для создания :ref:`различных типов <distinct>` с "
"минимальными издержками."

#: ../../library/typing.rst:1876
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""
"Средство проверки типов считает NewType отдельным типом. Однако во время "
"выполнения вызов NewType возвращает его аргумент без изменений."

#: ../../library/typing.rst:1886
msgid "The module in which the new type is defined."
msgstr "Модуль, в котором определен новый тип."

#: ../../library/typing.rst:1890
msgid "The name of the new type."
msgstr "Имя нового типа."

#: ../../library/typing.rst:1894
msgid "The type that the new type is based on."
msgstr "Тип, на котором основан новый тип."

#: ../../library/typing.rst:1898
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` теперь является классом, а не функцией."

#: ../../library/typing.rst:1903
msgid "Base class for protocol classes."
msgstr "Базовый класс для классов протоколов."

#: ../../library/typing.rst:1905
msgid "Protocol classes are defined like this::"
msgstr "Классы протоколов определяются следующим образом:"

#: ../../library/typing.rst:1911
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Такие классы в основном используются со статическими средствами проверки "
"типов, которые распознают структурные подтипы (статическую утиную "
"типизацию), например:"

#: ../../library/typing.rst:1923
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"См. :pep:`544` для более подробной информации. Классы протоколов, "
"украшенные :func:`runtime_checkable` (описаны позже), действуют как "
"простодушные протоколы времени выполнения, которые проверяют только наличие "
"заданных атрибутов, игнорируя их сигнатуры типов."

#: ../../library/typing.rst:1928
msgid "Protocol classes can be generic, for example::"
msgstr "Классы протоколов могут быть универсальными, например::"

#: ../../library/typing.rst:1940
msgid "Mark a protocol class as a runtime protocol."
msgstr "Отметьте класс протокола как протокол времени выполнения."

#: ../../library/typing.rst:1942
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""
"Такой протокол можно использовать с :func:`isinstance` и :func:`issubclass`. "
"Это вызывает :exc:`TypeError` при применении к непротокольному классу. Это "
"позволяет провести простую структурную проверку, очень похожую на «пони с "
"одним трюком» в :mod:`collections.abc`, например :class:`~collections.abc."
"Iterable`. Например::"

#: ../../library/typing.rst:1962
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` будет проверять только наличие необходимых "
"методов или атрибутов, а не их сигнатуры типов или типы. Например, :class:"
"`ssl.SSLObject` — это класс, поэтому он проходит проверку :func:`issubclass` "
"на :ref:`Callable <annotating-callables>`. Однако метод ``ssl.SSLObject."
"__init__`` существует только для того, чтобы вызвать :exc:`TypeError` с "
"более информативным сообщением, что делает невозможным вызов (создание "
"экземпляра) :class:`ssl.SSLObject`."

#: ../../library/typing.rst:1973
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"Проверка :func:`isinstance` по протоколу, проверяемому во время выполнения, "
"может быть на удивление медленной по сравнению с проверкой ``isinstance()`` "
"по непротокольному классу. Рассмотрите возможность использования "
"альтернативных идиом, таких как вызовы :func:`hasattr` для структурных "
"проверок в коде, чувствительном к производительности."

#: ../../library/typing.rst:1984
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Специальная конструкция для добавления подсказок типов в словарь. Во время "
"выполнения это обычный :class:`dict`."

#: ../../library/typing.rst:1987
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"TypedDict объявляет тип словаря, который ожидает, что все его экземпляры "
"будут иметь определенный набор ключей, где каждый ключ связан со значением "
"согласованного типа. Это ожидание не проверяется во время выполнения, а "
"обеспечивается только средствами проверки типов. Использование::"

#: ../../library/typing.rst:2003
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""
"Чтобы использовать эту функцию со старыми версиями Python, которые не "
"поддерживают :pep:`526`, ``TypedDict`` поддерживает две дополнительные "
"эквивалентные синтаксические формы:"

#: ../../library/typing.rst:2007
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "Использование литерала :class:`dict` в качестве второго аргумента::"

#: ../../library/typing.rst:2011
msgid "Using keyword arguments::"
msgstr "Использование аргументов ключевого слова::"

#: ../../library/typing.rst:2018
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""
"Синтаксис ключевого слова-аргумента устарел в версии 3.11 и будет удален в "
"версии 3.13. Он также может не поддерживаться средствами проверки "
"статических типов."

#: ../../library/typing.rst:2019
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""
"Функциональный синтаксис также следует использовать, когда какой-либо из "
"ключей недействителен :ref:`identifiers <identifiers>`, например, потому что "
"они являются ключевыми словами или содержат дефисы. Пример::"

#: ../../library/typing.rst:2031
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"По умолчанию все ключи должны присутствовать в TypedDict. Можно пометить "
"отдельные ключи как необязательные, используя :data:`NotRequired`::"

#: ../../library/typing.rst:2042
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""
"Это означает, что в ``Point2D`` ``TypedDict`` ключ ``label`` может быть "
"опущен."

#: ../../library/typing.rst:2045
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""
"Также можно пометить все ключи как необязательные по умолчанию, указав "
"совокупность ``False``::"

#: ../../library/typing.rst:2055
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Это означает, что в ``Point2D`` ``TypedDict`` любой ключ может быть опущен. "
"Ожидается, что средство проверки типов будет поддерживать только литералы "
"«False» или «True» в качестве значения аргумента «total». ``True`` является "
"значением по умолчанию и делает все элементы, определенные в теле класса, "
"обязательными."

#: ../../library/typing.rst:2060
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""
"Отдельные ключи ``total=False`` ``TypedDict`` могут быть помечены как "
"обязательные с помощью :data:`Required`::"

#: ../../library/typing.rst:2075
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"Тип TypedDict может наследовать от одного или нескольких других типов "
"TypedDict, используя синтаксис на основе классов. Использование::"

#: ../../library/typing.rst:2082
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""
"``Point3D`` имеет три элемента: ``x``, ``y`` и ``z``. Это эквивалентно этому "
"определению:"

#: ../../library/typing.rst:2090
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""
"TypedDict не может наследовать класс, отличный от TypedDict, за исключением :"
"class:`Generic`. Например::"

#: ../../library/typing.rst:2105
msgid "A ``TypedDict`` can be generic:"
msgstr ""

#: ../../library/typing.rst:2115
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"``TypedDict`` можно изучить с помощью аннотаций (дополнительную информацию о "
"лучших методах аннотаций см. в разделе :ref:`annotations-howto`), :attr:"
"`__total__`, :attr:`__required_keys__` и :attr:` __optional_keys__`."

#: ../../library/typing.rst:2121
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr "``Point2D.__total__`` возвращает значение аргумента ``total``. Пример:"

#: ../../library/typing.rst:2137
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to True may have keys "
"marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

#: ../../library/typing.rst:2150
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` и ``Point2D.__optional_keys__`` возвращают "
"объекты :class:`frozenset`, содержащие обязательные и необязательные ключи "
"соответственно."

#: ../../library/typing.rst:2153
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"Ключи, отмеченные :data:`Required`, всегда будут отображаться в "
"``__required_keys__``, а ключи, отмеченные :data:`NotRequired`, всегда будут "
"появляться в ``__optional_keys__``."

#: ../../library/typing.rst:2156
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""
"Для обратной совместимости с Python 3.10 и ниже также можно использовать "
"наследование для объявления как обязательных, так и необязательных ключей в "
"одном ``TypedDict``. Это делается путем объявления TypedDict с одним "
"значением аргумента total и последующего наследования от него другого "
"TypedDict с другим значением total:"

#: ../../library/typing.rst:2181
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""
"Если используются аннотации импорта from __future__ или аннотации задаются в "
"виде строк, аннотации не оцениваются, когда определен TypedDict. Таким "
"образом, самоанализ во время выполнения, на который полагаются "
"``__required_keys__`` и ``__optional_keys__``, может работать некорректно, а "
"значения атрибутов могут быть неправильными."

#: ../../library/typing.rst:2187
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"См. :pep:`589` для получения дополнительных примеров и подробных правил "
"использования ``TypedDict``."

#: ../../library/typing.rst:2191
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""
"Добавлена ​​поддержка маркировки отдельных ключей как :data:`Required` или :"
"data:`NotRequired`. См. :pep:`655`."

#: ../../library/typing.rst:2195
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "Добавлена ​​поддержка общих типов ``TypedDict``\\."

#: ../../library/typing.rst:2199
msgid "Protocols"
msgstr "Протоколы"

#: ../../library/typing.rst:2201
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""
"Следующие протоколы предоставляются модулем типизации. Все они украшены :"
"func:`@runtime_checkable <runtime_checkable>`."

#: ../../library/typing.rst:2206
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"ABC с одним абстрактным методом ``__abs__``, ковариантным по типу "
"возвращаемого значения."

#: ../../library/typing.rst:2211
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "ABC с одним абстрактным методом ``__bytes__``."

#: ../../library/typing.rst:2215
msgid "An ABC with one abstract method ``__complex__``."
msgstr "ABC с одним абстрактным методом ``__complex__``."

#: ../../library/typing.rst:2219
msgid "An ABC with one abstract method ``__float__``."
msgstr "ABC с одним абстрактным методом ``__float__``."

#: ../../library/typing.rst:2223
msgid "An ABC with one abstract method ``__index__``."
msgstr "ABC с одним абстрактным методом ``__index__``."

#: ../../library/typing.rst:2229
msgid "An ABC with one abstract method ``__int__``."
msgstr "ABC с одним абстрактным методом ``__int__``."

#: ../../library/typing.rst:2233
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"ABC с одним абстрактным методом ``__round__``, ковариантным по типу "
"возвращаемого значения."

#: ../../library/typing.rst:2237
msgid "ABCs for working with IO"
msgstr "Азбука работы с IO"

#: ../../library/typing.rst:2243
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"Общий тип ``IO[AnyStr]`` и его подклассы ``TextIO(IO[str])`` и "
"``BinaryIO(IO[bytes])`` представляют типы потоков ввода-вывода, например, "
"возвращаемые :func :`открыто`."

#: ../../library/typing.rst:2249
msgid "Functions and decorators"
msgstr "Функции и декораторы"

#: ../../library/typing.rst:2253
msgid "Cast a value to a type."
msgstr "Приведите значение к типу."

#: ../../library/typing.rst:2255
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"Это возвращает значение без изменений. Для средства проверки типов это "
"сигнализирует о том, что возвращаемое значение имеет назначенный тип, но во "
"время выполнения мы намеренно ничего не проверяем (мы хотим, чтобы это "
"происходило как можно быстрее)."

#: ../../library/typing.rst:2262
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""
"Попросите средство проверки статического типа подтвердить, что *val* имеет "
"предполагаемый тип *typ*."

#: ../../library/typing.rst:2264
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""
"Во время выполнения это ничего не дает: он возвращает первый аргумент без "
"изменений, без каких-либо проверок или побочных эффектов, независимо от "
"фактического типа аргумента."

#: ../../library/typing.rst:2267
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""
"Когда средство проверки статического типа встречает вызов ``assert_type()``, "
"оно выдает ошибку, если значение не относится к указанному типу:"

#: ../../library/typing.rst:2274
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""
"Эта функция полезна для обеспечения того, чтобы средство проверки типов "
"понимало сценарий в соответствии с намерениями разработчика:"

#: ../../library/typing.rst:2288
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""
"Попросите средство проверки статического типа подтвердить, что строка кода "
"недоступна."

#: ../../library/typing.rst:2290
msgid "Example::"
msgstr "Пример::"

#: ../../library/typing.rst:2301
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""
"Здесь аннотации позволяют средству проверки типов сделать вывод, что "
"последний вариант никогда не может быть выполнен, поскольку ``arg`` является "
"либо :class:`int`, либо :class:`str`, и оба варианта охватываются более "
"ранними случаями. ."

#: ../../library/typing.rst:2306
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""
"Если программа проверки типов обнаружит, что вызов ``assert_never()`` "
"достижим, она выдаст ошибку. Например, если аннотация типа для ``arg`` "
"вместо ``int | ул | float``, программа проверки типов выдаст ошибку, "
"указывающую, что ``unreachable`` имеет тип :class:`float`. Чтобы вызов "
"``assert_never`` прошел проверку типа, предполагаемый тип переданного "
"аргумента должен быть нижним типом, :data:`Never`, и никаким другим."

#: ../../library/typing.rst:2314
msgid "At runtime, this throws an exception when called."
msgstr "Во время выполнения при вызове выдается исключение."

#: ../../library/typing.rst:2317
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2325
msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""
"Попросите средство проверки статического типа выявить предполагаемый тип "
"выражения."

#: ../../library/typing.rst:2327
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""
"Когда средство проверки статического типа встречает вызов этой функции, оно "
"выдает диагностику с предполагаемым типом аргумента. Например::"

#: ../../library/typing.rst:2333
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""
"Это может быть полезно, если вы хотите отладить, как ваша программа проверки "
"типов обрабатывает определенный фрагмент кода."

#: ../../library/typing.rst:2336
msgid ""
"At runtime, this function prints the runtime type of its argument to :data:"
"`sys.stderr` and returns the argument unchanged (allowing the call to be "
"used within an expression)::"
msgstr ""
"Во время выполнения эта функция печатает тип времени выполнения своего "
"аргумента в :data:`sys.stderr` и возвращает аргумент без изменений (что "
"позволяет использовать вызов внутри выражения)::"

#: ../../library/typing.rst:2343
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""
"Обратите внимание, что тип среды выполнения может отличаться (более или "
"менее конкретный) от типа, статически выведенного средством проверки типов."

#: ../../library/typing.rst:2346
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""
"Большинство средств проверки типов поддерживают ``reveal_type()`` где "
"угодно, даже если имя не импортировано из ``типирования``. Однако импорт "
"имени из ``набора`` позволяет вашему коду работать без ошибок во время "
"выполнения и более четко передавать намерения."

#: ../../library/typing.rst:2357
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""
"Декоратор, позволяющий пометить объект как обеспечивающий поведение, "
"подобное :func:`dataclass <dataclasses.dataclass>`."

#: ../../library/typing.rst:2360
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""
"``dataclass_transform`` может использоваться для украшения класса, "
"метакласса или функции, которая сама является декоратором. Наличие "
"``@dataclass_transform()`` сообщает средству проверки статического типа, что "
"декорированный объект выполняет \"магию\" во время выполнения, которая "
"преобразует класс аналогично :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`."

#: ../../library/typing.rst:2367
msgid "Example usage with a decorator function:"
msgstr "Пример использования с функцией декоратора:"

#: ../../library/typing.rst:2383
msgid "On a base class::"
msgstr "В базовом классе::"

#: ../../library/typing.rst:2392
msgid "On a metaclass::"
msgstr "В метаклассе::"

#: ../../library/typing.rst:2403
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"Определенные выше классы ``CustomerModel`` будут обрабатываться средствами "
"проверки типов аналогично классам, созданным с помощью :func:`@dataclasses."
"dataclass <dataclasses.dataclass>`. Например, средства проверки типов "
"предполагают, что эти классы имеют методы ``__init__``, которые принимают "
"``id`` и ``name``."

#: ../../library/typing.rst:2409
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"Декорированный класс, метакласс или функция могут принимать следующие "
"логические аргументы, которые, как предполагают средства проверки типов, "
"будут иметь тот же эффект, что и для декоратора :func:`@dataclasses."
"dataclass<dataclasses.dataclass>`: ``init`` , ``eq``, ``order``, "
"``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only`` и ``slots``. Должна "
"быть предусмотрена возможность статической оценки значения этих аргументов "
"(«True» или «False»)."

#: ../../library/typing.rst:2417
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../../library/typing.rst:2421
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""
"Указывает, будет ли параметр eq иметь значение True или False, если он "
"опущен вызывающей стороной. По умолчанию установлено ``True``."

#: ../../library/typing.rst:2426
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Указывает, будет ли параметр order иметь значение True или False, если он "
"опущен вызывающей стороной. По умолчанию установлено значение «False»."

#: ../../library/typing.rst:2431
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Указывает, будет ли параметр kw_only иметь значение True или False, если он "
"опущен вызывающей стороной. По умолчанию установлено значение «False»."

#: ../../library/typing.rst:2436
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""
"Задает статический список поддерживаемых классов или функций, описывающих "
"поля, аналогично :func:`dataclasses.field`. По умолчанию ``()``."

#: ../../library/typing.rst:2442
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""
"Принимаются произвольные аргументы других ключевых слов, чтобы обеспечить "
"возможность возможных расширений в будущем."

#: ../../library/typing.rst:2446
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""
"Средства проверки типов распознают следующие дополнительные параметры в "
"спецификаторах полей:"

#: ../../library/typing.rst:2449
msgid "**Recognised parameters for field specifiers**"
msgstr "**Распознанные параметры для спецификаторов полей**"

#: ../../library/typing.rst:2453
msgid "Parameter name"
msgstr "Имя параметра"

#: ../../library/typing.rst:2454
msgid "Description"
msgstr "Описание"

#: ../../library/typing.rst:2455
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:2456
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""
"Указывает, должно ли поле быть включено в синтезируемый метод ``__init__``. "
"Если не указано, ``init`` по умолчанию имеет значение ``True``."

#: ../../library/typing.rst:2459
msgid "``default``"
msgstr "``default``"

#: ../../library/typing.rst:2460
msgid "Provides the default value for the field."
msgstr "Предоставляет значение по умолчанию для поля."

#: ../../library/typing.rst:2461
msgid "``default_factory``"
msgstr "``default_factory``"

#: ../../library/typing.rst:2462
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""
"Предоставляет обратный вызов во время выполнения, который возвращает "
"значение по умолчанию для поля. Если ни ``default``, ни ``default_factory`` "
"не указаны, предполагается, что поле не имеет значения по умолчанию, и ему "
"должно быть предоставлено значение при создании экземпляра класса."

#: ../../library/typing.rst:2467
msgid "``factory``"
msgstr "``factory``"

#: ../../library/typing.rst:2468
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr "Псевдоним параметра default_factory в спецификаторах полей."

#: ../../library/typing.rst:2469
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:2470
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"Указывает, следует ли пометить поле как предназначенное только для ключевых "
"слов. Если ``True``, поле будет содержать только ключевые слова. Если "
"``False``, оно не будет состоять только из ключевых слов. Если не указано, "
"будет использоваться значение параметра kw_only для объекта, украшенного "
"dataclass_transform, или, если оно не указано, будет использоваться значение "
"kw_only_default для dataclass_transform. ."

#: ../../library/typing.rst:2476
msgid "``alias``"
msgstr "``alias``"

#: ../../library/typing.rst:2477
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""
"Предоставляет альтернативное имя для поля. Это альтернативное имя "
"используется в синтезированном методе ``__init__``."

#: ../../library/typing.rst:2480
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""
"Во время выполнения этот декоратор записывает свои аргументы в атрибут "
"``__dataclass_transform__`` декорируемого объекта. Никакого другого эффекта "
"во время выполнения он не имеет."

#: ../../library/typing.rst:2484
msgid "See :pep:`681` for more details."
msgstr "См. :pep:`681` для более подробной информации."

#: ../../library/typing.rst:2492
msgid "Decorator for creating overloaded functions and methods."
msgstr "Декоратор для создания перегруженных функций и методов."

#: ../../library/typing.rst:2494
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""
"Декоратор @overload позволяет описывать функции и методы, которые "
"поддерживают несколько различных комбинаций типов аргументов. За серией "
"определений, декорированных ``@overload``, должно следовать ровно одно "
"определение, не декорированное ``@overload`` (для той же функции/метода)."

#: ../../library/typing.rst:2499
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""
"Определения, декорированные ``@overload``, приносят пользу только средству "
"проверки типов, поскольку они будут перезаписаны определениями, не "
"украшенными ``@overload``. Тем временем определение, не декорированное "
"``@overload``, будет использоваться во время выполнения, но должно "
"игнорироваться средством проверки типов. Во время выполнения прямой вызов "
"функции, декорированной ``@overload``, вызовет :exc:`NotImplementedError`."

#: ../../library/typing.rst:2507
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""
"Пример перегрузки, которая дает более точный тип, чем можно выразить с "
"помощью объединения или переменной типа:"

#: ../../library/typing.rst:2524
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""
"См. :pep:`484` для получения более подробной информации и сравнения с "
"другими семантиками ввода."

#: ../../library/typing.rst:2526
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""
"Перегруженные функции теперь можно анализировать во время выполнения с "
"помощью :func:`get_overloads`."

#: ../../library/typing.rst:2533
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""
"Возвращает последовательность определений, оформленных :func:`@overload "
"<overload>` для *func*."

#: ../../library/typing.rst:2536
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"*func* — это функциональный объект для реализации перегруженной функции. "
"Например, учитывая определение ``process`` в документации для :func:"
"`@overload <overload>`, ``get_overloads(process)`` вернет последовательность "
"из трех функциональных объектов для трех определенных перегрузок. Если "
"вызывается функция без перегрузок, get_overloads() возвращает пустую "
"последовательность."

#: ../../library/typing.rst:2543
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""
"``get_overloads()`` можно использовать для анализа перегруженной функции во "
"время выполнения."

#: ../../library/typing.rst:2551
msgid "Clear all registered overloads in the internal registry."
msgstr "Очистите все зарегистрированные перегрузки во внутреннем реестре."

#: ../../library/typing.rst:2553
msgid "This can be used to reclaim the memory used by the registry."
msgstr "Это можно использовать для освобождения памяти, используемой реестром."

#: ../../library/typing.rst:2560
msgid "Decorator to indicate final methods and final classes."
msgstr "Декоратор для указания финальных методов и финальных классов."

#: ../../library/typing.rst:2562
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""
"Украшение метода @final указывает средству проверки типов, что метод не "
"может быть переопределен в подклассе. Украшение класса @final указывает на "
"то, что он не может быть подклассом."

#: ../../library/typing.rst:2587
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"Декоратор теперь попытается установить атрибут ``__final__`` в ``True`` на "
"декорируемом объекте. Таким образом, проверка типа ``if getattr(obj, "
"\"__final__\", False)`` может использоваться во время выполнения, чтобы "
"определить, был ли объект ``obj`` помечен как окончательный. Если "
"декорированный объект не поддерживает установку атрибутов, декоратор "
"возвращает объект без изменений, не вызывая исключения."

#: ../../library/typing.rst:2598
msgid "Decorator to indicate that annotations are not type hints."
msgstr "Декоратор, указывающий, что аннотации не являются подсказками типа."

#: ../../library/typing.rst:2600
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""
"Это работает как класс или функция :term:`decorator`. В случае с классом он "
"применяется рекурсивно ко всем методам и классам, определенным в этом классе "
"(но не к методам, определенным в его суперклассах или подклассах). Средства "
"проверки типов будут игнорировать все аннотации в функции или классе с "
"помощью этого декоратора."

#: ../../library/typing.rst:2606
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr "``@no_type_check`` изменяет декорированный объект на месте."

#: ../../library/typing.rst:2610
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "Декоратор, чтобы дать другому декоратору эффект :func:`no_type_check`."

#: ../../library/typing.rst:2612
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"Это оборачивает декоратор чем-то, что оборачивает декорируемую функцию в :"
"func:`no_type_check`."

#: ../../library/typing.rst:2617
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""
"Декоратор, позволяющий пометить класс или функцию как недоступные во время "
"выполнения."

#: ../../library/typing.rst:2619
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"Этот декоратор сам по себе недоступен во время выполнения. В основном он "
"предназначен для маркировки классов, определенных в файлах-заглушках типов, "
"если реализация возвращает экземпляр частного класса::"

#: ../../library/typing.rst:2630
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Обратите внимание, что возвращать экземпляры частных классов не "
"рекомендуется. Обычно предпочтительнее сделать такие классы общедоступными."

#: ../../library/typing.rst:2634
msgid "Introspection helpers"
msgstr "Помощники самоанализа"

#: ../../library/typing.rst:2638
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Возвращает словарь, содержащий подсказки типов для объекта функции, метода, "
"модуля или класса."

#: ../../library/typing.rst:2641
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2647
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:2664
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2669
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"Добавлен параметр ``include_extras`` как часть :pep:`593`. Дополнительную "
"информацию смотрите в документации по :data:`Annotated`."

#: ../../library/typing.rst:2673
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""
"Ранее ``Optional[t]`` добавлялся для аннотаций функций и методов, если было "
"установлено значение по умолчанию, равное ``None``. Теперь аннотация "
"возвращается без изменений."

#: ../../library/typing.rst:2680
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""
"Получите версию типа без индекса: для типизируемого объекта формы ``X[Y, "
"Z, ...]`` верните ``X``."

#: ../../library/typing.rst:2683
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""
"Если ``X`` является псевдонимом модуля типизации для встроенного класса или "
"класса :mod:`collections`, он будет нормализован до исходного класса. Если "
"``X`` является экземпляром :class:`ParamSpecArgs` или :class:"
"`ParamSpecKwargs`, верните базовый :class:`ParamSpec`. Верните None для "
"неподдерживаемых объектов."

#: ../../library/typing.rst:2689 ../../library/typing.rst:2712
msgid "Examples:"
msgstr "Примеры:"

#: ../../library/typing.rst:2704
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""
"Получите аргументы типа со всеми выполненными заменами: для типизируемого "
"объекта формы ``X[Y, Z, ...]`` верните ``(Y, Z, ...)``."

#: ../../library/typing.rst:2707
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""
"Если ``X`` является объединением или :class:`Literal`, содержащимся в другом "
"обобщенном типе, порядок ``(Y, Z, ...)`` может отличаться от порядка "
"исходных аргументов `` [Y, Z, ...]`` из-за кэширования типов. Верните ``()`` "
"для неподдерживаемых объектов."

#: ../../library/typing.rst:2724
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Проверьте, является ли тип :class:`TypedDict`."

#: ../../library/typing.rst:2745
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""
"Класс, используемый для внутреннего представления типизации прямых ссылок на "
"строки."

#: ../../library/typing.rst:2747
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"Например, ``List[\"SomeClass\"]`` неявно преобразуется в "
"``List[ForwardRef(\"SomeClass\")]``. ``ForwardRef`` не должен создаваться "
"пользователем, но может использоваться инструментами самоанализа."

#: ../../library/typing.rst:2752
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` универсальные типы, такие как ``list[\"SomeClass\"]``, не будут "
"неявно преобразованы в ``list[ForwardRef(\"SomeClass\")]`` и, следовательно, "
"не будут автоматически разрешаться в ``list[ SomeClass]``."

#: ../../library/typing.rst:2759
msgid "Constant"
msgstr "Константа"

#: ../../library/typing.rst:2763
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""
"Специальная константа, которая сторонними средствами проверки статического "
"типа принимается за значение True. Во время выполнения это значение «False»."

#: ../../library/typing.rst:2774
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"Первая аннотация типа должна быть заключена в кавычки, что делает ее «прямой "
"ссылкой», чтобы скрыть ссылку «expensive_mod» от среды выполнения "
"интерпретатора. Аннотации типов для локальных переменных не оцениваются, "
"поэтому вторую аннотацию не нужно заключать в кавычки."

#: ../../library/typing.rst:2781
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"Если используется ``from __future__ import annotations``, аннотации не "
"оцениваются во время определения функции. Вместо этого они сохраняются в "
"виде строк в ``__annotations__``. Это делает ненужным использование кавычек "
"вокруг аннотации (см. :pep:`563`)."

#: ../../library/typing.rst:2793
msgid "Deprecated aliases"
msgstr "Устаревшие псевдонимы"

#: ../../library/typing.rst:2795
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""
"Этот модуль определяет несколько устаревших псевдонимов уже существующих "
"классов стандартной библиотеки. Первоначально они были включены в модуль "
"типизации для поддержки параметризации этих универсальных классов с помощью "
"``[]``. Однако псевдонимы стали ненужными в Python 3.9, когда "
"соответствующие ранее существовавшие классы были расширены для поддержки "
"``[]`` (см. :pep:`585`)."

#: ../../library/typing.rst:2802
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""
"Избыточные типы устарели, начиная с Python 3.9. Однако, хотя в какой-то "
"момент псевдонимы могут быть удалены, в настоящее время удаление этих "
"псевдонимов не планируется. Таким образом, в настоящее время интерпретатор "
"для этих псевдонимов не выдает никаких предупреждений об устаревании."

#: ../../library/typing.rst:2807
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""
"Если в какой-то момент будет решено удалить эти устаревшие псевдонимы, "
"интерпретатор выдаст предупреждение об устаревании как минимум для двух "
"выпусков перед удалением. Псевдонимы гарантированно останутся в модуле ввода "
"без предупреждений об устаревании, по крайней мере, до версии Python 3.14."

#: ../../library/typing.rst:2812
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""
"Специалистам по проверке типов рекомендуется отмечать использование "
"устаревших типов, если программа, которую они проверяют, предназначена для "
"минимальной версии Python 3.9 или новее."

#: ../../library/typing.rst:2818
msgid "Aliases to built-in types"
msgstr "Псевдонимы встроенных типов"

#: ../../library/typing.rst:2822
msgid "Deprecated alias to :class:`dict`."
msgstr "Устаревший псевдоним :class:`dict`."

#: ../../library/typing.rst:2824
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:2828 ../../library/typing.rst:3065
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:2833
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` теперь поддерживает индексацию (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2839
msgid "Deprecated alias to :class:`list`."
msgstr "Устаревший псевдоним :class:`list`."

#: ../../library/typing.rst:2841
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:2845
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:2855
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` теперь поддерживает индексацию (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2861
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr "Устаревший псевдоним :class:`builtins.set <set>`."

#: ../../library/typing.rst:2863
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:2867
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` теперь поддерживает индексацию (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2873
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr "Устаревший псевдоним :class:`builtins.frozenset <frozenset>`."

#: ../../library/typing.rst:2875
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` теперь поддерживает индексацию "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2882
msgid "Deprecated alias for :class:`tuple`."
msgstr "Устаревший псевдоним для :class:`tuple`."

#: ../../library/typing.rst:2884
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""
":class:`tuple` и ``Tuple`` имеют особый случай в системе типов; более "
"подробную информацию см. в :ref:`annotating-tuples`."

#: ../../library/typing.rst:2887
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` теперь поддерживает индексацию (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2893
msgid "Deprecated alias to :class:`type`."
msgstr "Устаревший псевдоним :class:`type`."

#: ../../library/typing.rst:2895
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""
"См. :ref:`type-of-class-objects` для получения подробной информации об "
"использовании :class:`type` или ``typing.Type`` в аннотациях типов."

#: ../../library/typing.rst:2900
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` теперь поддерживает индексацию (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2907
msgid "Aliases to types in :mod:`collections`"
msgstr "Псевдонимы для типов в :mod:`collections`"

#: ../../library/typing.rst:2911
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr "Устаревший псевдоним :class:`collections.defaultdict`."

#: ../../library/typing.rst:2915
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` теперь поддерживает подписку (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2921
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr "Устаревший псевдоним :class:`collections.OrderedDict`."

#: ../../library/typing.rst:2925
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` теперь поддерживает подписку (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2931
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr "Устаревший псевдоним :class:`collections.ChainMap`."

#: ../../library/typing.rst:2935
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` теперь поддерживает подписку (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2941
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr "Устаревший псевдоним :class:`collections.Counter`."

#: ../../library/typing.rst:2945
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` теперь поддерживает подписку (``[]``). См. :pep:"
"`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2951
msgid "Deprecated alias to :class:`collections.deque`."
msgstr "Устаревший псевдоним :class:`collections.deque`."

#: ../../library/typing.rst:2955
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` теперь поддерживает подписку (``[]``). См. :pep:"
"`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2962
msgid "Aliases to other concrete types"
msgstr "Псевдонимы других типов бетона"

#: ../../library/typing.rst:2967
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""
"Устаревшие псевдонимы, соответствующие типам возвращаемых значений из :func:"
"`re.compile` и :func:`re.match`."

#: ../../library/typing.rst:2970
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."

#: ../../library/typing.rst:2978
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"Пространство имен ``typing.re`` устарело и будет удалено. Вместо этого эти "
"типы следует импортировать напрямую из ``typing``."

#: ../../library/typing.rst:2979
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Классы ``Pattern`` и ``Match`` из :mod:`re` теперь поддерживают ``[]``. См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:2985
msgid "Deprecated alias for :class:`str`."
msgstr "Устаревший псевдоним для :class:`str`."

#: ../../library/typing.rst:2987
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""
"``Text`` предоставляется для предоставления прямого совместимого пути для "
"кода Python 2: в Python 2 ``Text`` является псевдонимом для ``unicode``."

#: ../../library/typing.rst:2991
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Используйте ``Text``, чтобы указать, что значение должно содержать строку "
"Юникода, совместимую как с Python 2, так и с Python 3::"

#: ../../library/typing.rst:2999
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 больше не поддерживается, и большинство средств проверки типов "
"также больше не поддерживают проверку типов кода Python 2. Удаление "
"псевдонима в настоящее время не планируется, но пользователям рекомендуется "
"использовать :class:`str` вместо ``Text``."

#: ../../library/typing.rst:3009
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr "Псевдонимы контейнеров ABC в :mod:`collections.abc`"

#: ../../library/typing.rst:3013
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr "Устаревший псевдоним :class:`collections.abc.Set`."

#: ../../library/typing.rst:3015
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` теперь поддерживает подписку (``[]``). См. :pep:"
"`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3021
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"Этот тип представляет типы :class:`bytes`, :class:`bytearray` и :class:"
"`memoryview` последовательностей байтов."

#: ../../library/typing.rst:3025
msgid ""
"Prefer ``typing_extensions.Buffer``, or a union like ``bytes | bytearray | "
"memoryview``."
msgstr ""

#: ../../library/typing.rst:3029
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr "Устаревший псевдоним :class:`collections.abc.Collection`."

#: ../../library/typing.rst:3033
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3039
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr "Устаревший псевдоним :class:`collections.abc.Container`."

#: ../../library/typing.rst:3041
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3047
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr "Устаревший псевдоним :class:`collections.abc.ItemsView`."

#: ../../library/typing.rst:3049
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3055
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr "Устаревший псевдоним :class:`collections.abc.KeysView`."

#: ../../library/typing.rst:3057
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3063
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr "Устаревший псевдоним :class:`collections.abc.Mapping`."

#: ../../library/typing.rst:3070
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` теперь поддерживает подписку (``[]``). См. :"
"pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3076
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr "Устаревший псевдоним :class:`collections.abc.MappingView`."

#: ../../library/typing.rst:3078
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3084
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr "Устаревший псевдоним :class:`collections.abc.MutableMapping`."

#: ../../library/typing.rst:3086
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` теперь поддерживает подписку "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3093
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr "Устаревший псевдоним :class:`collections.abc.MutableSequence`."

#: ../../library/typing.rst:3095
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` теперь поддерживает подписку "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3102
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr "Устаревший псевдоним :class:`collections.abc.MutableSet`."

#: ../../library/typing.rst:3104
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3110
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr "Устаревший псевдоним :class:`collections.abc.Sequence`."

#: ../../library/typing.rst:3112
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3118
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr "Устаревший псевдоним :class:`collections.abc.ValuesView`."

#: ../../library/typing.rst:3120
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3127
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr "Псевдонимы асинхронных ABC в :mod:`collections.abc`"

#: ../../library/typing.rst:3131
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr "Устаревший псевдоним :class:`collections.abc.Coroutine`."

#: ../../library/typing.rst:3133
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3144
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3150
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr "Устаревший псевдоним :class:`collections.abc.AsyncGenerator`."

#: ../../library/typing.rst:3152
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3161
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3165
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3173
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3183
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` теперь поддерживает подписку "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3190
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr "Устаревший псевдоним :class:`collections.abc.AsyncIterable`."

#: ../../library/typing.rst:3194
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` теперь поддерживает подписку "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3200
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr "Устаревший псевдоним :class:`collections.abc.AsyncIterator`."

#: ../../library/typing.rst:3204
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` теперь поддерживает подписку "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3210
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr "Устаревший псевдоним :class:`collections.abc.Awaitable`."

#: ../../library/typing.rst:3214
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3221
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr "Псевдонимы других ABC в :mod:`collections.abc`"

#: ../../library/typing.rst:3225
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr "Устаревший псевдоним :class:`collections.abc.Iterable`."

#: ../../library/typing.rst:3227
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3233
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr "Устаревший псевдоним :class:`collections.abc.Iterator`."

#: ../../library/typing.rst:3235
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3241
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr "Устаревший псевдоним :class:`collections.abc.Callable`."

#: ../../library/typing.rst:3243
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""
"См. :ref:`annotating-callables` для получения подробной информации о том, "
"как использовать :class:`collections.abc.Callable` и ``typing.Callable`` в "
"аннотациях типов."

#: ../../library/typing.rst:3246
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3256
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr "Устаревший псевдоним :class:`collections.abc.Generator`."

#: ../../library/typing.rst:3258
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3267
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3271
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"Если ваш генератор будет выдавать только значения, установите для SendType и "
"ReturnType значение None::"

#: ../../library/typing.rst:3279
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"Альтернативно, аннотируйте свой генератор как имеющий тип возвращаемого "
"значения либо ``Iterable[YieldType]``, либо ``Iterator[YieldType]``::"

#: ../../library/typing.rst:3287
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3293
msgid "Alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3297
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr "Устаревший псевдоним :class:`collections.abc.Reversible`."

#: ../../library/typing.rst:3299
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` теперь поддерживает подписку (``[]``). "
"См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3305
msgid "Alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3310
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr "Псевдонимы :mod:`contextlib` ABC"

#: ../../library/typing.rst:3314
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr "Устаревший псевдоним :class:`contextlib.AbstractContextManager`."

#: ../../library/typing.rst:3318
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` теперь поддерживает индексацию "
"(``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3325
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr "Устаревший псевдоним :class:`contextlib.AbstractAsyncContextManager`."

#: ../../library/typing.rst:3329
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` теперь поддерживает "
"индексацию (``[]``). См. :pep:`585` и :ref:`types-genericalias`."

#: ../../library/typing.rst:3335
msgid "Deprecation Timeline of Major Features"
msgstr "График прекращения поддержки основных функций"

#: ../../library/typing.rst:3337
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"Некоторые функции набора текста устарели и могут быть удалены в будущих "
"версиях Python. Для вашего удобства в следующей таблице приведены основные "
"устаревшие версии. Это может быть изменено, и не все устаревшие перечислены."

#: ../../library/typing.rst:3344
msgid "Feature"
msgstr "Особенность"

#: ../../library/typing.rst:3345
msgid "Deprecated in"
msgstr "Устарело в"

#: ../../library/typing.rst:3346
msgid "Projected removal"
msgstr "Прогнозируемое удаление"

#: ../../library/typing.rst:3347
msgid "PEP/issue"
msgstr "PEP/issue"

#: ../../library/typing.rst:3348
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr "Подмодули ``typing.io`` и ``typing.re``"

#: ../../library/typing.rst:3349
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:3350
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3351
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:3352
msgid "``typing`` versions of standard collections"
msgstr "``typing``  версии стандартных коллекций "

#: ../../library/typing.rst:3353 ../../library/typing.rst:3357
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3354
msgid "Undecided (see :ref:`deprecated-typing-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3355
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3356
msgid ":class:`typing.ByteString`"
msgstr ":class:`typing.ByteString`"

#: ../../library/typing.rst:3358
msgid "3.14"
msgstr "3.14"

#: ../../library/typing.rst:3359
msgid ":gh:`91896`"
msgstr ":gh:`91896`"

#: ../../library/typing.rst:3360
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../../library/typing.rst:3361
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3362
msgid "Undecided"
msgstr "Не определившиеся"

#: ../../library/typing.rst:3363
msgid ":gh:`92332`"
msgstr ":gh:`92332`"
