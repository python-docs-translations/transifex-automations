# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/cmd.rst:2
msgid ":mod:`cmd` --- Support for line-oriented command interpreters"
msgstr ""

#: ../../library/cmd.rst:9
msgid "**Source code:** :source:`Lib/cmd.py`"
msgstr "**Исходный код:** :source:`Lib/cmd.py`"

#: ../../library/cmd.rst:13
msgid ""
"The :class:`Cmd` class provides a simple framework for writing line-oriented "
"command interpreters.  These are often useful for test harnesses, "
"administrative tools, and prototypes that will later be wrapped in a more "
"sophisticated interface."
msgstr ""
"Класс :class:`Cmd` предоставляет простую основу для написания строко-"
"ориентированных интерпретаторов команд. Они часто полезны для тестовых "
"программ, инструментов администрирования и прототипов, которые позже будут "
"облачены в более сложный интерфейс."

#: ../../library/cmd.rst:20
msgid ""
"A :class:`Cmd` instance or subclass instance is a line-oriented interpreter "
"framework.  There is no good reason to instantiate :class:`Cmd` itself; "
"rather, it's useful as a superclass of an interpreter class you define "
"yourself in order to inherit :class:`Cmd`'s methods and encapsulate action "
"methods."
msgstr ""
"Экземпляр или подкласс :class:`Cmd` представляет собой структуру строко-"
"ориентированного интерпретатора. Нет веской причины создавать экземпляр "
"самого :class:`Cmd`; скорее, он полезен в качестве суперкласса класса "
"интерпретатора, который вы определяете сами, чтобы наследовать методы :class:"
"`Cmd` и инкапсулировать методы действий."

#: ../../library/cmd.rst:25
msgid ""
"The optional argument *completekey* is the :mod:`readline` name of a "
"completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:"
"`None` and :mod:`readline` is available, command completion is done "
"automatically."
msgstr ""
"Необязательный аргумент *completekey* — это :mod:`readline` имя ключа "
"завершения; по умолчанию это :kbd:`Tab`. Если *completekey* не равен :const:"
"`None` и доступен :mod:`readline`, завершение команды выполняется "
"автоматически."

#: ../../library/cmd.rst:29
msgid ""
"The optional arguments *stdin* and *stdout* specify the  input and output "
"file objects that the Cmd instance or subclass  instance will use for input "
"and output. If not specified, they will default to :data:`sys.stdin` and :"
"data:`sys.stdout`."
msgstr ""
"Необязательные аргументы *stdin* и *stdout* указывают объекты входного и "
"выходного файла, которые экземпляр Cmd или экземпляр подкласса будут "
"использовать для ввода и вывода. Если они не указаны, по умолчанию будут "
"использоваться :data:`sys.stdin` и :data:`sys.stdout`."

#: ../../library/cmd.rst:34
msgid ""
"If you want a given *stdin* to be used, make sure to set the instance's :"
"attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be "
"ignored."
msgstr ""
"Если вы хотите, чтобы использовался данный *stdin*, обязательно установите "
"для атрибута :attr:`use_rawinput` экземпляра значение ``False``, иначе "
"*stdin* будет игнорироваться."

#: ../../library/cmd.rst:42
msgid "Cmd Objects"
msgstr "Объекты Cmd"

#: ../../library/cmd.rst:44
msgid "A :class:`Cmd` instance has the following methods:"
msgstr "Экземпляр :class:`Cmd` имеет следующие методы:"

#: ../../library/cmd.rst:49
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the remainder "
"of the line as argument."
msgstr ""
"Повторно выдавайте приглашение, принимайте ввод, анализируйте исходный "
"префикс полученного ввода и отправляйте его методам действия, передавая им "
"оставшуюся часть строки в качестве аргумента."

#: ../../library/cmd.rst:53
msgid ""
"The optional argument is a banner or intro string to be issued before the "
"first prompt (this overrides the :attr:`intro` class attribute)."
msgstr ""
"Необязательный аргумент — это баннер или вводная строка, которая выдается "
"перед первым приглашением (это переопределяет атрибут класса :attr:`intro`)."

#: ../../library/cmd.rst:56
msgid ""
"If the :mod:`readline` module is loaded, input will automatically inherit :"
"program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls "
"back to the last command, :kbd:`Control-N` forward to the next one, :kbd:"
"`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-"
"B` moves the cursor to the left non-destructively, etc.)."
msgstr ""
"Если модуль :mod:`readline` загружен, ввод автоматически наследует :program:"
"`bash`\\ -подобное редактированию списка истории (например, :kbd:`Control-P` "
"прокручивает назад к последней команде, :kbd:` Control-N` вперед к "
"следующему, :kbd:`Control-F` перемещает курсор вправо неразрушающим "
"образом, :kbd:`Control-B` перемещает курсор влево неразрушающим образом и т."
"д.)."

#: ../../library/cmd.rst:62
msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr "Конец файла при вводе передается обратно как строка ``'EOF'``."

#: ../../library/cmd.rst:68
msgid ""
"An interpreter instance will recognize a command name ``foo`` if and only if "
"it has a method :meth:`do_foo`.  As a special case, a line beginning with "
"the character ``'?'`` is dispatched to the method :meth:`do_help`.  As "
"another special case, a line beginning with the character ``'!'`` is "
"dispatched to the method :meth:`do_shell` (if such a method is defined)."
msgstr ""

#: ../../library/cmd.rst:74
msgid ""
"This method will return when the :meth:`postcmd` method returns a true "
"value. The *stop* argument to :meth:`postcmd` is the return value from the "
"command's corresponding :meth:`do_\\*` method."
msgstr ""

#: ../../library/cmd.rst:78
msgid ""
"If completion is enabled, completing commands will be done automatically, "
"and completing of commands args is done by calling :meth:`complete_foo` with "
"arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string "
"prefix we are attempting to match: all returned matches must begin with it. "
"*line* is the current input line with leading whitespace removed, *begidx* "
"and *endidx* are the beginning and ending indexes of the prefix text, which "
"could be used to provide different completion depending upon which position "
"the argument is in."
msgstr ""

#: ../../library/cmd.rst:86
msgid ""
"All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`.  This "
"method, called with an argument ``'bar'``, invokes the corresponding method :"
"meth:`help_bar`, and if that is not present, prints the docstring of :meth:"
"`do_bar`, if available.  With no argument, :meth:`do_help` lists all "
"available help topics (that is, all commands with corresponding :meth:"
"`help_\\*` methods or commands that have docstrings), and also lists any "
"undocumented commands."
msgstr ""

#: ../../library/cmd.rst:97
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt. This may be overridden, but should not normally need to be; see the :"
"meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The "
"return value is a flag indicating whether interpretation of commands by the "
"interpreter should stop.  If there is a :meth:`do_\\*` method for the "
"command *str*, the return value of that method is returned, otherwise the "
"return value from the :meth:`default` method is returned."
msgstr ""

#: ../../library/cmd.rst:108
msgid ""
"Method called when an empty line is entered in response to the prompt. If "
"this method is not overridden, it repeats the last nonempty command entered."
msgstr ""
"Метод вызывается, когда в ответ на приглашение вводится пустая строка. Если "
"этот метод не переопределен, он повторяет последнюю введенную непустую "
"команду."

#: ../../library/cmd.rst:114
msgid ""
"Method called on an input line when the command prefix is not recognized. If "
"this method is not overridden, it prints an error message and returns."
msgstr ""
"Метод вызывается в строке ввода, когда префикс команды не распознается. Если "
"этот метод не переопределен, он выводит сообщение об ошибке и завершает "
"работу."

#: ../../library/cmd.rst:120
msgid ""
"Method called to complete an input line when no command-specific :meth:"
"`complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""

#: ../../library/cmd.rst:126
msgid ""
"Hook method executed just before the command line *line* is interpreted, but "
"after the input prompt is generated and issued.  This method is a stub in :"
"class:`Cmd`; it exists to be overridden by subclasses.  The return value is "
"used as the command which will be executed by the :meth:`onecmd` method; "
"the :meth:`precmd` implementation may re-write the command or simply return "
"*line* unchanged."
msgstr ""
"Метод-перехватчик выполняется непосредственно перед интерпретацией командной "
"строки *line*, но после того, как сгенерировано и выдано приглашение для "
"ввода. Этот метод является заглушкой в ​​:class:`Cmd`; он существует для того, "
"чтобы его переопределяли подклассы. Возвращаемое значение используется в "
"качестве команды, которая будет выполнена методом :meth:`onecmd`; "
"реализация :meth:`precmd` может переписать команду или просто вернуть "
"*строку* без изменений."

#: ../../library/cmd.rst:136
msgid ""
"Hook method executed just after a command dispatch is finished.  This method "
"is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* "
"is the command line which was executed, and *stop* is a flag which indicates "
"whether execution will be terminated after the call to :meth:`postcmd`; this "
"will be the return value of the :meth:`onecmd` method.  The return value of "
"this method will be used as the new value for the internal flag which "
"corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""
"Метод-перехватчик выполняется сразу после завершения отправки команды. Этот "
"метод является заглушкой в ​​:class:`Cmd`; он существует для того, чтобы его "
"переопределяли подклассы. *line* — это командная строка, которая была "
"выполнена, а *stop* — это флаг, указывающий, будет ли выполнение прекращено "
"после вызова :meth:`postcmd`; это будет возвращаемое значение метода :meth:"
"`onecmd`. Возвращаемое значение этого метода будет использоваться как новое "
"значение внутреннего флага, соответствующего *stop*; возврат false приведет "
"к продолжению интерпретации."

#: ../../library/cmd.rst:147
msgid ""
"Hook method executed once when :meth:`cmdloop` is called.  This method is a "
"stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Метод-перехватчик выполняется один раз при вызове :meth:`cmdloop`. Этот "
"метод является заглушкой в ​​:class:`Cmd`; он существует для того, чтобы его "
"переопределяли подклассы."

#: ../../library/cmd.rst:153
msgid ""
"Hook method executed once when :meth:`cmdloop` is about to return. This "
"method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Метод-перехватчик выполняется один раз, когда :meth:`cmdloop` собирается "
"вернуться. Этот метод является заглушкой в ​​:class:`Cmd`; он существует для "
"того, чтобы его переопределяли подклассы."

#: ../../library/cmd.rst:157
msgid ""
"Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""
"Экземпляры подклассов :class:`Cmd` имеют некоторые общедоступные переменные "
"экземпляра:"

#: ../../library/cmd.rst:161
msgid "The prompt issued to solicit input."
msgstr "Подсказка, выданная для запроса ввода."

#: ../../library/cmd.rst:166
msgid "The string of characters accepted for the command prefix."
msgstr "Строка символов, принятая в качестве префикса команды."

#: ../../library/cmd.rst:171
msgid "The last nonempty command prefix seen."
msgstr "Последний увиденный непустой командный префикс."

#: ../../library/cmd.rst:176
msgid ""
"A list of queued input lines.  The cmdqueue list is checked in :meth:"
"`cmdloop` when new input is needed; if it is nonempty, its elements will be "
"processed in order, as if entered at the prompt."
msgstr ""
"Список строк ввода в очереди. Список cmdqueue проверяется в :meth:`cmdloop`, "
"когда требуется новый ввод; если он непустой, его элементы будут "
"обрабатываться по порядку, как если бы они были введены в командной строке."

#: ../../library/cmd.rst:183
msgid ""
"A string to issue as an intro or banner.  May be overridden by giving the :"
"meth:`cmdloop` method an argument."
msgstr ""
"Строка, которая будет использоваться в качестве вступления или баннера. "
"Может быть переопределено путем передачи аргумента методу :meth:`cmdloop`."

#: ../../library/cmd.rst:189
msgid ""
"The header to issue if the help output has a section for documented commands."
msgstr ""
"Заголовок, который выдается, если в выводе справки есть раздел для "
"документированных команд."

#: ../../library/cmd.rst:194
msgid ""
"The header to issue if the help output has a section for miscellaneous  help "
"topics (that is, there are :meth:`help_\\*` methods without corresponding :"
"meth:`do_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:201
msgid ""
"The header to issue if the help output has a section for undocumented  "
"commands (that is, there are :meth:`do_\\*` methods without corresponding :"
"meth:`help_\\*` methods)."
msgstr ""

#: ../../library/cmd.rst:208
msgid ""
"The character used to draw separator lines under the help-message headers.  "
"If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""
"Символ, используемый для рисования разделительных линий под заголовками "
"справочных сообщений. Если пусто, линия линейки не рисуется. По умолчанию "
"оно равно ``'='``."

#: ../../library/cmd.rst:214
msgid ""
"A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to "
"display a prompt and read the next command; if false, :meth:`sys.stdout."
"write` and :meth:`sys.stdin.readline` are used. (This means that by "
"importing :mod:`readline`, on systems that support it, the interpreter will "
"automatically support :program:`Emacs`\\ -like line editing  and command-"
"history keystrokes.)"
msgstr ""

#: ../../library/cmd.rst:224
msgid "Cmd Example"
msgstr "Пример Cmd"

#: ../../library/cmd.rst:228
msgid ""
"The :mod:`cmd` module is mainly useful for building custom shells that let a "
"user work with a program interactively."
msgstr ""
"Модуль :mod:`cmd` в основном полезен для создания пользовательских оболочек, "
"которые позволяют пользователю работать с программой в интерактивном режиме."

#: ../../library/cmd.rst:231
msgid ""
"This section presents a simple example of how to build a shell around a few "
"of the commands in the :mod:`turtle` module."
msgstr ""
"В этом разделе представлен простой пример того, как построить оболочку на "
"основе нескольких команд модуля :mod:`turtle`."

#: ../../library/cmd.rst:234
msgid ""
"Basic turtle commands such as :meth:`~turtle.forward` are added to a :class:"
"`Cmd` subclass with method named :meth:`do_forward`.  The argument is "
"converted to a number and dispatched to the turtle module.  The docstring is "
"used in the help utility provided by the shell."
msgstr ""

#: ../../library/cmd.rst:239
msgid ""
"The example also includes a basic record and playback facility implemented "
"with the :meth:`~Cmd.precmd` method which is responsible for converting the "
"input to lowercase and writing the commands to a file.  The :meth:"
"`do_playback` method reads the file and adds the recorded commands to the :"
"attr:`cmdqueue` for immediate playback::"
msgstr ""

#: ../../library/cmd.rst:320
msgid ""
"Here is a sample session with the turtle shell showing the help functions, "
"using blank lines to repeat commands, and the simple record and playback "
"facility:"
msgstr ""
"Вот пример сеанса с оболочкой черепахи, показывающий функции справки, "
"использование пустых строк для повторения команд и простые возможности "
"записи и воспроизведения:"
