# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/contextvars.rst:2
msgid ":mod:`!contextvars` --- Context Variables"
msgstr ":mod:`!contextvars` --- Переменные контекста"

#: ../../library/contextvars.rst:11
msgid ""
"This module provides APIs to manage, store, and access context-local state.  "
"The :class:`~contextvars.ContextVar` class is used to declare and work with "
"*Context Variables*.  The :func:`~contextvars.copy_context` function and "
"the :class:`~contextvars.Context` class should be used to manage the current "
"context in asynchronous frameworks."
msgstr ""
"Этот модуль предоставляет API для управления, хранения и доступа к "
"локальному состоянию контекста. Класс :class:`~contextvars.ContextVar` "
"используется для объявления *контекстных переменных* и работы с ними. "
"Функция :func:`~contextvars.copy_context` и класс :class:`~contextvars."
"Context` должны использоваться для управления текущим контекстом в "
"асинхронных платформах."

#: ../../library/contextvars.rst:17
msgid ""
"Context managers that have state should use Context Variables instead of :"
"func:`threading.local` to prevent their state from bleeding to other code "
"unexpectedly, when used in concurrent code."
msgstr ""
"Менеджеры контекста, у которых есть состояние, должны использовать "
"переменные контекста вместо :func:`threading.local`, чтобы предотвратить "
"неожиданное попадание их состояния в другой код при использовании в "
"параллельном коде."

#: ../../library/contextvars.rst:21
msgid "See also :pep:`567` for additional details."
msgstr "Дополнительную информацию см. также в :pep:`567`."

#: ../../library/contextvars.rst:27
msgid "Context Variables"
msgstr "Контекстные переменные"

#: ../../library/contextvars.rst:31
msgid "This class is used to declare a new Context Variable, e.g.::"
msgstr ""
"Этот класс используется для объявления новой переменной контекста, например::"

#: ../../library/contextvars.rst:33
msgid "var: ContextVar[int] = ContextVar('var', default=42)"
msgstr "var: ContextVar[int] = ContextVar('var', default=42)"

#: ../../library/contextvars.rst:35
msgid ""
"The required *name* parameter is used for introspection and debug purposes."
msgstr ""
"Обязательный параметр *name* используется для целей самоанализа и отладки."

#: ../../library/contextvars.rst:38
msgid ""
"The optional keyword-only *default* parameter is returned by :meth:"
"`ContextVar.get` when no value for the variable is found in the current "
"context."
msgstr ""
"Необязательный параметр *default*, содержащий только ключевые слова, "
"возвращается :meth:`ContextVar.get`, когда в текущем контексте не найдено "
"значение для переменной."

#: ../../library/contextvars.rst:42
msgid ""
"**Important:** Context Variables should be created at the top module level "
"and never in closures.  :class:`Context` objects hold strong references to "
"context variables which prevents context variables from being properly "
"garbage collected."
msgstr ""
"**Важно!** Контекстные переменные должны создаваться на верхнем уровне "
"модуля, а не в замыканиях. Объекты :class:`Context` содержат сильные ссылки "
"на контекстные переменные, что предотвращает правильную сборку мусора для "
"контекстных переменных."

#: ../../library/contextvars.rst:49
msgid "The name of the variable.  This is a read-only property."
msgstr "Имя переменной. Это свойство доступно только для чтения."

#: ../../library/contextvars.rst:55
msgid "Return a value for the context variable for the current context."
msgstr "Верните значение контекстной переменной для текущего контекста."

#: ../../library/contextvars.rst:57
msgid ""
"If there is no value for the variable in the current context, the method "
"will:"
msgstr "Если в текущем контексте для переменной нет значения, метод:"

#: ../../library/contextvars.rst:60
msgid ""
"return the value of the *default* argument of the method, if provided; or"
msgstr ""
"вернуть значение аргумента *default* метода, если оно предусмотрено; или"

#: ../../library/contextvars.rst:63
msgid ""
"return the default value for the context variable, if it was created with "
"one; or"
msgstr ""
"вернуть значение по умолчанию для переменной контекста, если она была "
"создана с ее использованием; или"

#: ../../library/contextvars.rst:66
msgid "raise a :exc:`LookupError`."
msgstr "вызвать :exc:`LookupError`."

#: ../../library/contextvars.rst:70
msgid ""
"Call to set a new value for the context variable in the current context."
msgstr ""
"Вызов, чтобы установить новое значение для контекстной переменной в текущем "
"контексте."

#: ../../library/contextvars.rst:73
msgid ""
"The required *value* argument is the new value for the context variable."
msgstr ""
"Обязательный аргумент *value* — это новое значение контекстной переменной."

#: ../../library/contextvars.rst:76
msgid ""
"Returns a :class:`~contextvars.Token` object that can be used to restore the "
"variable to its previous value via the :meth:`ContextVar.reset` method."
msgstr ""
"Возвращает объект :class:`~contextvars.Token`, который можно использовать "
"для восстановления переменной до ее предыдущего значения с помощью метода :"
"meth:`ContextVar.reset`."

#: ../../library/contextvars.rst:82
msgid ""
"Reset the context variable to the value it had before the :meth:`ContextVar."
"set` that created the *token* was used."
msgstr ""
"Сбросьте переменную контекста до значения, которое она имела до "
"использования :meth:`ContextVar.set`, создавшего *токен*."

#: ../../library/contextvars.rst:85
msgid "For example::"
msgstr "Например::"

#: ../../library/contextvars.rst:87
msgid ""
"var = ContextVar('var')\n"
"\n"
"token = var.set('new value')\n"
"# code that uses 'var'; var.get() returns 'new value'.\n"
"var.reset(token)\n"
"\n"
"# After the reset call the var has no value again, so\n"
"# var.get() would raise a LookupError."
msgstr ""
"var = ContextVar('var')\n"
"\n"
"token = var.set('new value')\n"
"# code that uses 'var'; var.get() returns 'new value'.\n"
"var.reset(token)\n"
"\n"
"# After the reset call the var has no value again, so\n"
"# var.get() would raise a LookupError."

#: ../../library/contextvars.rst:99
msgid ""
"*Token* objects are returned by the :meth:`ContextVar.set` method. They can "
"be passed to the :meth:`ContextVar.reset` method to revert the value of the "
"variable to what it was before the corresponding *set*."
msgstr ""
"Объекты *Token* возвращаются методом :meth:`ContextVar.set`. Их можно "
"передать методу :meth:`ContextVar.reset`, чтобы вернуть значение переменной "
"к тому, которое было до соответствующего *set*."

#: ../../library/contextvars.rst:104
msgid ""
"The token supports :ref:`context manager protocol <context-managers>` to "
"restore the corresponding context variable value at the exit from :keyword:"
"`with` block::"
msgstr ""

#: ../../library/contextvars.rst:108
msgid ""
"var = ContextVar('var', default='default value')\n"
"\n"
"with var.set('new value'):\n"
"    assert var.get() == 'new value'\n"
"\n"
"assert var.get() == 'default value'"
msgstr ""

#: ../../library/contextvars.rst:117
msgid "Added support for usage as a context manager."
msgstr ""

#: ../../library/contextvars.rst:121
msgid ""
"A read-only property.  Points to the :class:`ContextVar` object that created "
"the token."
msgstr ""
"Свойство, доступное только для чтения. Указывает на объект :class:"
"`ContextVar`, который создал токен."

#: ../../library/contextvars.rst:126
msgid ""
"A read-only property.  Set to the value the variable had before the :meth:"
"`ContextVar.set` method call that created the token. It points to :attr:"
"`Token.MISSING` if the variable was not set before the call."
msgstr ""
"Свойство, доступное только для чтения. Установите значение, которое "
"переменная имела до вызова метода :meth:`ContextVar.set`, создавшего токен. "
"Он указывает на :attr:`Token.MISSING`, если переменная не была установлена ​​"
"перед вызовом."

#: ../../library/contextvars.rst:133
msgid "A marker object used by :attr:`Token.old_value`."
msgstr "Объект-маркер, используемый :attr:`Token.old_value`."

#: ../../library/contextvars.rst:137
msgid "Manual Context Management"
msgstr "Ручное управление контекстом"

#: ../../library/contextvars.rst:141
msgid "Returns a copy of the current :class:`~contextvars.Context` object."
msgstr "Возвращает копию текущего объекта :class:`~contextvars.Context`."

#: ../../library/contextvars.rst:143
msgid ""
"The following snippet gets a copy of the current context and prints all "
"variables and their values that are set in it::"
msgstr ""
"Следующий фрагмент получает копию текущего контекста и печатает все "
"переменные и их значения, которые в нем установлены:"

#: ../../library/contextvars.rst:146
msgid ""
"ctx: Context = copy_context()\n"
"print(list(ctx.items()))"
msgstr ""
"ctx: Context = copy_context()\n"
"print(list(ctx.items()))"

#: ../../library/contextvars.rst:149
msgid ""
"The function has an *O*\\ (1) complexity, i.e. works equally fast for "
"contexts with a few context variables and for contexts that have a lot of "
"them."
msgstr ""
"Функция имеет сложность *O*\\ (1), т.е. работает одинаково быстро как для "
"контекстов с небольшим количеством контекстных переменных, так и для "
"контекстов, в которых их много."

#: ../../library/contextvars.rst:156
msgid "A mapping of :class:`ContextVars <ContextVar>` to their values."
msgstr "Сопоставление :class:`ContextVars <ContextVar>` с их значениями."

#: ../../library/contextvars.rst:158
msgid ""
"``Context()`` creates an empty context with no values in it. To get a copy "
"of the current context use the :func:`~contextvars.copy_context` function."
msgstr ""
"``Context()`` создает пустой контекст без каких-либо значений. Чтобы "
"получить копию текущего контекста, используйте функцию :func:`~contextvars."
"copy_context`."

#: ../../library/contextvars.rst:162
msgid ""
"Each thread has its own effective stack of :class:`!Context` objects.  The :"
"term:`current context` is the :class:`!Context` object at the top of the "
"current thread's stack.  All :class:`!Context` objects in the stacks are "
"considered to be *entered*."
msgstr ""
"Каждый поток имеет свой собственный эффективный стек объектов :class:`!"
"Context`. :term:`текущий контекст` — это объект :class:`!Context` в верхней "
"части стека текущего потока. Все объекты :class:`!Context` в стеках "
"считаются *введенными*."

#: ../../library/contextvars.rst:167
msgid ""
"*Entering* a context, which can be done by calling its :meth:`~Context.run` "
"method, makes the context the current context by pushing it onto the top of "
"the current thread's context stack."
msgstr ""
"*Ввод* контекста, который можно выполнить, вызвав его метод :meth:`~Context."
"run`, делает контекст текущим контекстом, помещая его на вершину стека "
"контекстов текущего потока."

#: ../../library/contextvars.rst:171
msgid ""
"*Exiting* from the current context, which can be done by returning from the "
"callback passed to the :meth:`~Context.run` method, restores the current "
"context to what it was before the context was entered by popping the context "
"off the top of the context stack."
msgstr ""
"*Выход* из текущего контекста, который можно выполнить, вернувшись из "
"обратного вызова, переданного методу :meth:`~Context.run`, восстанавливает "
"текущий контекст до того, каким он был до входа в контекст, удаляя контекст "
"из контекста. верхняя часть стека контекста."

#: ../../library/contextvars.rst:176
msgid ""
"Since each thread has its own context stack, :class:`ContextVar` objects "
"behave in a similar fashion to :func:`threading.local` when values are "
"assigned in different threads."
msgstr ""
"Поскольку каждый поток имеет свой собственный стек контекста, объекты :class:"
"`ContextVar` ведут себя аналогично :func:`threading.local`, когда значения "
"присваиваются в разных потоках."

#: ../../library/contextvars.rst:180
msgid ""
"Attempting to enter an already entered context, including contexts entered "
"in other threads, raises a :exc:`RuntimeError`."
msgstr ""
"Попытка ввести уже введенный контекст, включая контексты, введенные в других "
"потоках, вызывает ошибку :exc:`RuntimeError`."

#: ../../library/contextvars.rst:183
msgid "After exiting a context, it can later be re-entered (from any thread)."
msgstr ""
"После выхода из контекста в него позже можно войти повторно (из любого "
"потока)."

#: ../../library/contextvars.rst:185
msgid ""
"Any changes to :class:`ContextVar` values via the :meth:`ContextVar.set` "
"method are recorded in the current context.  The :meth:`ContextVar.get` "
"method returns the value associated with the current context.  Exiting a "
"context effectively reverts any changes made to context variables while the "
"context was entered (if needed, the values can be restored by re-entering "
"the context)."
msgstr ""
"Любые изменения значений :class:`ContextVar` с помощью метода :meth:"
"`ContextVar.set` записываются в текущем контексте. Метод :meth:`ContextVar."
"get` возвращает значение, связанное с текущим контекстом. Выход из контекста "
"фактически отменяет любые изменения, внесенные в переменные контекста при "
"входе в контекст (при необходимости значения можно восстановить путем "
"повторного входа в контекст)."

#: ../../library/contextvars.rst:192
msgid "Context implements the :class:`collections.abc.Mapping` interface."
msgstr "Контекст реализует интерфейс :class:`collections.abc.Mapping`."

#: ../../library/contextvars.rst:196
msgid ""
"Enters the Context, executes ``callable(*args, **kwargs)``, then exits the "
"Context.  Returns *callable*'s return value, or propagates an exception if "
"one occurred."
msgstr ""
"Вход в контекст, выполнение ``callable(*args, **kwargs)``, затем выход из "
"контекста. Возвращает возвращаемое значение *callable* или распространяет "
"исключение, если оно произошло."

#: ../../library/contextvars.rst:200
msgid "Example:"
msgstr "Пример:"

#: ../../library/contextvars.rst:202
msgid ""
"import contextvars\n"
"\n"
"var = contextvars.ContextVar('var')\n"
"var.set('spam')\n"
"print(var.get())  # 'spam'\n"
"\n"
"ctx = contextvars.copy_context()\n"
"\n"
"def main():\n"
"    # 'var' was set to 'spam' before\n"
"    # calling 'copy_context()' and 'ctx.run(main)', so:\n"
"    print(var.get())  # 'spam'\n"
"    print(ctx[var])  # 'spam'\n"
"\n"
"    var.set('ham')\n"
"\n"
"    # Now, after setting 'var' to 'ham':\n"
"    print(var.get())  # 'ham'\n"
"    print(ctx[var])  # 'ham'\n"
"\n"
"# Any changes that the 'main' function makes to 'var'\n"
"# will be contained in 'ctx'.\n"
"ctx.run(main)\n"
"\n"
"# The 'main()' function was run in the 'ctx' context,\n"
"# so changes to 'var' are contained in it:\n"
"print(ctx[var])  # 'ham'\n"
"\n"
"# However, outside of 'ctx', 'var' is still set to 'spam':\n"
"print(var.get())  # 'spam'"
msgstr ""
"import contextvars\n"
"\n"
"var = contextvars.ContextVar('var')\n"
"var.set('spam')\n"
"print(var.get())  # 'spam'\n"
"\n"
"ctx = contextvars.copy_context()\n"
"\n"
"def main():\n"
"    # 'var' was set to 'spam' before\n"
"    # calling 'copy_context()' and 'ctx.run(main)', so:\n"
"    print(var.get())  # 'spam'\n"
"    print(ctx[var])  # 'spam'\n"
"\n"
"    var.set('ham')\n"
"\n"
"    # Now, after setting 'var' to 'ham':\n"
"    print(var.get())  # 'ham'\n"
"    print(ctx[var])  # 'ham'\n"
"\n"
"# Any changes that the 'main' function makes to 'var'\n"
"# will be contained in 'ctx'.\n"
"ctx.run(main)\n"
"\n"
"# The 'main()' function was run in the 'ctx' context,\n"
"# so changes to 'var' are contained in it:\n"
"print(ctx[var])  # 'ham'\n"
"\n"
"# However, outside of 'ctx', 'var' is still set to 'spam':\n"
"print(var.get())  # 'spam'"

#: ../../library/contextvars.rst:248
msgid "Return a shallow copy of the context object."
msgstr "Верните неглубокую копию объекта контекста."

#: ../../library/contextvars.rst:252
msgid ""
"Return ``True`` if the *context* has a value for *var* set; return ``False`` "
"otherwise."
msgstr ""
"Возвращает ``True``, если в *context* установлено значение *var*; в "
"противном случае верните ``False``."

#: ../../library/contextvars.rst:257
msgid ""
"Return the value of the *var* :class:`ContextVar` variable. If the variable "
"is not set in the context object, a :exc:`KeyError` is raised."
msgstr ""
"Верните значение переменной *var* :class:`ContextVar`. Если переменная не "
"установлена ​​в объекте контекста, возникает ошибка :exc:`KeyError`."

#: ../../library/contextvars.rst:263
msgid ""
"Return the value for *var* if *var* has the value in the context object.  "
"Return *default* otherwise.  If *default* is not given, return ``None``."
msgstr ""
"Возвращает значение *var*, если *var* имеет значение в объекте контекста. В "
"противном случае верните *default*. Если *default* не указано, верните "
"``None``."

#: ../../library/contextvars.rst:269
msgid "Return an iterator over the variables stored in the context object."
msgstr "Возвращает итератор для переменных, хранящихся в объекте контекста."

#: ../../library/contextvars.rst:274
msgid "Return the number of variables set in the context object."
msgstr "Возвращает количество переменных, установленных в объекте контекста."

#: ../../library/contextvars.rst:278
msgid "Return a list of all variables in the context object."
msgstr "Возвращает список всех переменных в объекте контекста."

#: ../../library/contextvars.rst:282
msgid "Return a list of all variables' values in the context object."
msgstr "Возвращает список значений всех переменных в объекте контекста."

#: ../../library/contextvars.rst:287
msgid ""
"Return a list of 2-tuples containing all variables and their values in the "
"context object."
msgstr ""
"Возвращает список кортежей из двух элементов, содержащий все переменные и их "
"значения в объекте контекста."

#: ../../library/contextvars.rst:292
msgid "asyncio support"
msgstr "поддержка asyncio"

#: ../../library/contextvars.rst:294
msgid ""
"Context variables are natively supported in :mod:`asyncio` and are ready to "
"be used without any extra configuration.  For example, here is a simple echo "
"server, that uses a context variable to make the address of a remote client "
"available in the Task that handles that client::"
msgstr ""
"Переменные контекста изначально поддерживаются в :mod:`asyncio` и готовы к "
"использованию без какой-либо дополнительной настройки. Например, вот простой "
"эхо-сервер, который использует переменную контекста, чтобы сделать адрес "
"удаленного клиента доступным в задаче, которая обрабатывает этот клиент:"

#: ../../library/contextvars.rst:300
msgid ""
"import asyncio\n"
"import contextvars\n"
"\n"
"client_addr_var = contextvars.ContextVar('client_addr')\n"
"\n"
"def render_goodbye():\n"
"    # The address of the currently handled client can be accessed\n"
"    # without passing it explicitly to this function.\n"
"\n"
"    client_addr = client_addr_var.get()\n"
"    return f'Good bye, client @ {client_addr}\\r\\n'.encode()\n"
"\n"
"async def handle_request(reader, writer):\n"
"    addr = writer.transport.get_extra_info('socket').getpeername()\n"
"    client_addr_var.set(addr)\n"
"\n"
"    # In any code that we call is now possible to get\n"
"    # client's address by calling 'client_addr_var.get()'.\n"
"\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        print(line)\n"
"        if not line.strip():\n"
"            break\n"
"\n"
"    writer.write(b'HTTP/1.1 200 OK\\r\\n')  # status line\n"
"    writer.write(b'\\r\\n')  # headers\n"
"    writer.write(render_goodbye())  # body\n"
"    writer.close()\n"
"\n"
"async def main():\n"
"    srv = await asyncio.start_server(\n"
"        handle_request, '127.0.0.1', 8081)\n"
"\n"
"    async with srv:\n"
"        await srv.serve_forever()\n"
"\n"
"asyncio.run(main())\n"
"\n"
"# To test it you can use telnet or curl:\n"
"#     telnet 127.0.0.1 8081\n"
"#     curl 127.0.0.1:8081"
msgstr ""
"import asyncio\n"
"import contextvars\n"
"\n"
"client_addr_var = contextvars.ContextVar('client_addr')\n"
"\n"
"def render_goodbye():\n"
"    # The address of the currently handled client can be accessed\n"
"    # without passing it explicitly to this function.\n"
"\n"
"    client_addr = client_addr_var.get()\n"
"    return f'Good bye, client @ {client_addr}\\r\\n'.encode()\n"
"\n"
"async def handle_request(reader, writer):\n"
"    addr = writer.transport.get_extra_info('socket').getpeername()\n"
"    client_addr_var.set(addr)\n"
"\n"
"    # In any code that we call is now possible to get\n"
"    # client's address by calling 'client_addr_var.get()'.\n"
"\n"
"    while True:\n"
"        line = await reader.readline()\n"
"        print(line)\n"
"        if not line.strip():\n"
"            break\n"
"\n"
"    writer.write(b'HTTP/1.1 200 OK\\r\\n')  # status line\n"
"    writer.write(b'\\r\\n')  # headers\n"
"    writer.write(render_goodbye())  # body\n"
"    writer.close()\n"
"\n"
"async def main():\n"
"    srv = await asyncio.start_server(\n"
"        handle_request, '127.0.0.1', 8081)\n"
"\n"
"    async with srv:\n"
"        await srv.serve_forever()\n"
"\n"
"asyncio.run(main())\n"
"\n"
"# To test it you can use telnet or curl:\n"
"#     telnet 127.0.0.1 8081\n"
"#     curl 127.0.0.1:8081"
