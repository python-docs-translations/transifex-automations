# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Илья Панфилов, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-06 17:28+0000\n"
"PO-Revision-Date: 2017-02-16 23:20+0000\n"
"Last-Translator: Roustam Khamidoulline, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ""

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/posixpath.py` (for POSIX) and :source:`Lib/"
"ntpath.py` (for Windows)."
msgstr ""
"**Исходный код:** :source:`Lib/posixpath.py` (для POSIX) и :source:`Lib/"
"ntpath.py` (для Windows)."

#: ../../library/os.path.rst:14
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as strings, or bytes, or any "
"object implementing the :class:`os.PathLike` protocol."
msgstr ""
"Этот модуль реализует некоторые полезные функции для имен путей. Для чтения "
"или записи файлов используйте :func:`open`, а для доступа к файловой системе "
"используйте модуль :mod:`os`. Параметры пути могут передаваться в виде "
"строк, байтов или любого объекта, реализующего протокол :class:`os.PathLike`."

#: ../../library/os.path.rst:19
msgid ""
"Unlike a unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""

#: ../../library/os.path.rst:26
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr "Модуль :mod:`pathlib` предлагает объекты путей высокого уровня."

#: ../../library/os.path.rst:31
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""
"Все эти функции принимают в качестве параметров либо только байты, либо "
"только строковые объекты. Результатом является объект того же типа, если "
"возвращается путь или имя файла."

#: ../../library/os.path.rst:37
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""
"Поскольку в разных операционных системах действуют разные соглашения об "
"именах путей, в стандартной библиотеке имеется несколько версий этого "
"модуля. Модуль :mod:`os.path` всегда является модулем пути, подходящим для "
"операционной системы, в которой работает Python, и, следовательно, может "
"использоваться для локальных путей. Однако вы также можете импортировать и "
"использовать отдельные модули, если хотите манипулировать путем, который "
"*всегда* находится в одном из различных форматов. Все они имеют одинаковый "
"интерфейс:"

#: ../../library/os.path.rst:45
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ":mod:`posixpath` для путей в стиле UNIX"

#: ../../library/os.path.rst:46
msgid ":mod:`ntpath` for Windows paths"
msgstr ":mod:`ntpath` для путей Windows"

#: ../../library/os.path.rst:51
msgid ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, :func:"
"`islink`, and :func:`ismount` now return ``False`` instead of raising an "
"exception for paths that contain characters or bytes unrepresentable at the "
"OS level."
msgstr ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, :func:"
"`islink` и :func:`ismount` теперь вместо этого возвращают ``False`` создания "
"исключения для путей, содержащих символы или байты, непредставимые на уровне "
"ОС."

#: ../../library/os.path.rst:59
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""
"Возвращает нормализованную абсолютную версию пути *path*. На большинстве "
"платформ это эквивалентно вызову функции :func:`normpath` следующим образом: "
"``normpath(join(os.getcwd(), path))``."

#: ../../library/os.path.rst:63 ../../library/os.path.rst:76
#: ../../library/os.path.rst:116 ../../library/os.path.rst:125
#: ../../library/os.path.rst:141 ../../library/os.path.rst:151
#: ../../library/os.path.rst:177 ../../library/os.path.rst:197
#: ../../library/os.path.rst:214 ../../library/os.path.rst:226
#: ../../library/os.path.rst:235 ../../library/os.path.rst:245
#: ../../library/os.path.rst:255 ../../library/os.path.rst:265
#: ../../library/os.path.rst:275 ../../library/os.path.rst:294
#: ../../library/os.path.rst:324 ../../library/os.path.rst:344
#: ../../library/os.path.rst:383 ../../library/os.path.rst:414
#: ../../library/os.path.rst:432 ../../library/os.path.rst:445
#: ../../library/os.path.rst:461 ../../library/os.path.rst:477
#: ../../library/os.path.rst:502 ../../library/os.path.rst:533
msgid "Accepts a :term:`path-like object`."
msgstr "Принимает :term:`объект, похожий на путь`."

#: ../../library/os.path.rst:69
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""
"Возвращает базовое имя пути *path*. Это второй элемент пары, возвращаемой "
"путем передачи *path* функции :func:`split`. Обратите внимание, что "
"результат этой функции отличается от результата программы Unix :program:"
"`basename`; где :program:`basename` для ``'/foo/bar/'`` возвращает "
"``'bar'``, функция :func:`basename` возвращает пустую строку (``''``)."

#: ../../library/os.path.rst:82
msgid ""
"Return the longest common sub-path of each pathname in the sequence "
"*paths*.  Raise :exc:`ValueError` if *paths* contain both absolute and "
"relative pathnames, the *paths* are on the different drives or if *paths* is "
"empty.  Unlike :func:`commonprefix`, this returns a valid path."
msgstr ""

#: ../../library/os.path.rst:89 ../../library/os.path.rst:413
#: ../../library/os.path.rst:425 ../../library/os.path.rst:441
#: ../../library/os.path.rst:457
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ""
":ref:`Наличие\n"
"`: Юникс, Windows."

#: ../../library/os.path.rst:92
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr ""
"Принимает последовательность :term:`path-like object <path-like object>`."

#: ../../library/os.path.rst:98
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``)."
msgstr ""
"Возвращает префикс самого длинного пути (посимвольный), который является "
"префиксом всех путей в *списке*. Если *list* пуст, верните пустую строку "
"(``''``)."

#: ../../library/os.path.rst:104
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""
"Эта функция может возвращать недопустимые пути, поскольку она обрабатывает "
"посимвольно. Чтобы получить действительный путь, см. :func:`commonpath`."

#: ../../library/os.path.rst:122
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""
"Возвращает имя каталога с именем пути *path*. Это первый элемент пары, "
"возвращаемой путем передачи *path* функции :func:`split`."

#: ../../library/os.path.rst:131
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""
"Возвращайте ``True``, если *path* относится к существующему пути или "
"дескриптору открытого файла. Возвращает False для неработающих символических "
"ссылок. На некоторых платформах эта функция может возвращать «False», если "
"не предоставлено разрешение на выполнение :func:`os.stat` для запрошенного "
"файла, даже если *path* физически существует."

#: ../../library/os.path.rst:137
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""
"*path* теперь может быть целым числом: ``True`` возвращается, если это "
"дескриптор открытого файла, ``False`` в противном случае."

#: ../../library/os.path.rst:147
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""

#: ../../library/os.path.rst:159
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""
"В Unix и Windows верните аргумент, заменяя начальный компонент ``~`` или "
"``~user`` домашним каталогом этого *user*."

#: ../../library/os.path.rst:164
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""
"В Unix начальная переменная ``~`` заменяется переменной среды :envvar:"
"`HOME`, если она установлена; в противном случае домашний каталог текущего "
"пользователя ищется в каталоге паролей с помощью встроенного модуля :mod:"
"`pwd`. Исходный ``~user`` ищется непосредственно в каталоге паролей."

#: ../../library/os.path.rst:169
msgid ""
"On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a "
"combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An "
"initial ``~user`` is handled by stripping the last directory component from "
"the created user path derived above."
msgstr ""

#: ../../library/os.path.rst:174
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""
"Если раскрытие завершается неудачей или путь не начинается с тильды, путь "
"возвращается без изменений."

#: ../../library/os.path.rst:180
msgid "No longer uses :envvar:`HOME` on Windows."
msgstr "Больше не использует :envvar:`HOME` в Windows."

#: ../../library/os.path.rst:189
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""
"Верните аргумент с расширенными переменными среды. Подстроки вида ``$name`` "
"или ``${name}`` заменяются значением переменной среды *name*. Неверные имена "
"переменных и ссылки на несуществующие переменные остаются неизменными."

#: ../../library/os.path.rst:194
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""
"В Windows `` %n Расширения ame%`` поддерживаются в дополнение к ``$name`` и "
"``${name}``."

#: ../../library/os.path.rst:203
msgid ""
"Return the time of last access of *path*.  The return value is a floating "
"point number giving the number of seconds since the epoch (see the  :mod:"
"`time` module).  Raise :exc:`OSError` if the file does not exist or is "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:210
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"floating point number giving the number of seconds since the epoch (see "
"the  :mod:`time` module). Raise :exc:`OSError` if the file does not exist or "
"is inaccessible."
msgstr ""

#: ../../library/os.path.rst:220
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""
"Возвращает системное время, которое в некоторых системах (например, Unix) "
"является временем последнего изменения метаданных, а в других (например, "
"Windows) — временем создания *path*. Возвращаемое значение — это число, "
"обозначающее количество секунд, прошедших с эпохи (см. модуль :mod:`time`). "
"Поднимите :exc:`OSError`, если файл не существует или недоступен."

#: ../../library/os.path.rst:232
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does "
"not exist or is inaccessible."
msgstr ""
"Возвращает размер *path* в байтах. Поднимите :exc:`OSError`, если файл не "
"существует или недоступен."

#: ../../library/os.path.rst:241
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""
"Верните ``True``, если *path* является абсолютным путем. В Unix это "
"означает, что оно начинается с косой черты, а в Windows — с (обратной) косой "
"черты после отрезания потенциальной буквы диска."

#: ../../library/os.path.rst:251
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This "
"follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""
"Возвращает ``True``, если *path* является :func:`existing <exists>` обычным "
"файлом. Это следует за символическими ссылками, поэтому оба :func:`islink` "
"и :func:`isfile` могут быть истинными для одного и того же пути."

#: ../../library/os.path.rst:261
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true "
"for the same path."
msgstr ""
"Возвращает ``True``, если *path* является существующим каталогом <exists>`. "
"Это следует за символическими ссылками, поэтому оба :func:`islink` и :func:"
"`isdir` могут быть истинными для одного и того же пути."

#: ../../library/os.path.rst:271
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""
"Возвращает ``True``, если *path* относится к существующей записи каталога "
"<exists>`, которая является символической ссылкой. Всегда ``False``, если "
"символические ссылки не поддерживаются средой выполнения Python."

#: ../../library/os.path.rst:281
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`{path}/..`, is on a "
"different device than *path*, or whether :file:`{path}/..` and *path* point "
"to the same i-node on the same device --- this should detect mount points "
"for all Unix and POSIX variants.  It is not able to reliably detect bind "
"mounts on the same filesystem.  On Windows, a drive letter root and a share "
"UNC are always mount points, and for any other path ``GetVolumePathName`` is "
"called to see if it is different from the input path."
msgstr ""
"Возвращает ``True``, если путь *path* представляет собой :dfn:`точку "
"монтирования`: точку в файловой системе, где была смонтирована другая "
"файловая система. В POSIX функция проверяет, находится ли родительский "
"элемент *path*, :file:`{path}/..`, на другом устройстве, чем *path*, или :"
"file:`{path}/..` и *path* указывает на один и тот же i-узел на том же "
"устройстве --- это должно определять точки монтирования для всех вариантов "
"Unix и POSIX. Он не может надежно обнаружить монтирование привязки в одной и "
"той же файловой системе. В Windows корневая буква диска и общий UNC всегда "
"являются точками монтирования, а для любого другого пути вызывается "
"GetVolumePathName, чтобы проверить, отличается ли он от входного пути."

#: ../../library/os.path.rst:291
msgid "Support for detecting non-root mount points on Windows."
msgstr ""

#: ../../library/os.path.rst:300
msgid ""
"Join one or more path components intelligently.  The return value is the "
"concatenation of *path* and any members of *\\*paths* with exactly one "
"directory separator following each non-empty part except the last, meaning "
"that the result will only end in a separator if the last part is empty.  If "
"a component is an absolute path, all previous components are thrown away and "
"joining continues from the absolute path component."
msgstr ""

#: ../../library/os.path.rst:307
msgid ""
"On Windows, the drive letter is not reset when an absolute path component (e."
"g., ``r'\\foo'``) is encountered.  If a component contains a drive letter, "
"all previous components are thrown away and the drive letter is reset.  Note "
"that since there is a current directory for each drive, ``os.path.join(\"c:"
"\", \"foo\")`` represents a path relative to the current directory on drive :"
"file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../library/os.path.rst:314
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr "Принимает объект, похожий на путь, для *path* и *paths*."

#: ../../library/os.path.rst:320
msgid ""
"Normalize the case of a pathname.  On Windows, convert all characters in the "
"pathname to lowercase, and also convert forward slashes to backward slashes. "
"On other operating systems, return the path unchanged."
msgstr ""
"Нормализуйте регистр пути. В Windows преобразуйте все символы в имени пути в "
"нижний регистр, а также преобразуйте прямые косые черты в обратные. В других "
"операционных системах верните путь без изменений."

#: ../../library/os.path.rst:330
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""
"Нормализуйте путь, свернув избыточные разделители и ссылки верхнего уровня, "
"чтобы ``A//B``, ``A/B/``, ``A/./B`` и ``A/foo/.. /B`` все становятся ``A/"
"B``. Эта манипуляция со строками может изменить значение пути, содержащего "
"символические ссылки. В Windows он преобразует косую черту в обратную. Чтобы "
"нормализовать регистр, используйте :func:`normcase`."

#: ../../library/os.path.rst:337
msgid ""
"On POSIX systems, in accordance with `IEEE Std 1003.1 2013 Edition; 4.13 "
"Pathname Resolution <http://pubs.opengroup.org/onlinepubs/9699919799/"
"basedefs/V1_chap04.html#tag_04_13>`_, if a pathname begins with exactly two "
"slashes, the first component following the leading characters may be "
"interpreted in an implementation-defined manner, although more than two "
"leading characters shall be treated as a single character."
msgstr ""

#: ../../library/os.path.rst:350
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""
"Возвращает канонический путь к указанному имени файла, исключая все "
"символические ссылки, встречающиеся в пути (если они поддерживаются "
"операционной системой)."

#: ../../library/os.path.rst:354
msgid ""
"By default, the path is evaluated up to the first component that does not "
"exist, is a symlink loop, or whose evaluation raises :exc:`OSError`. All "
"such components are appended unchanged to the existing part of the path."
msgstr ""

#: ../../library/os.path.rst:358
msgid ""
"Some errors that are handled this way include \"access denied\", \"not a "
"directory\", or \"bad argument to internal function\". Thus, the resulting "
"path may be missing or inaccessible, may still contain links or loops, and "
"may traverse non-directories."
msgstr ""

#: ../../library/os.path.rst:363
msgid "This behavior can be modified by keyword arguments:"
msgstr ""

#: ../../library/os.path.rst:365
msgid ""
"If *strict* is ``True``, the first error encountered when evaluating the "
"path is re-raised. In particular, :exc:`FileNotFoundError` is raised if "
"*path* does not exist, or another :exc:`OSError` if it is otherwise "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:370
msgid ""
"If *strict* is :py:data:`os.path.ALLOW_MISSING`, errors other than :exc:"
"`FileNotFoundError` are re-raised (as with ``strict=True``). Thus, the "
"returned path will not contain any symbolic links, but the named file and "
"some of its parent directories may be missing."
msgstr ""

#: ../../library/os.path.rst:376
msgid ""
"This function emulates the operating system's procedure for making a path "
"canonical, which differs slightly between Windows and UNIX with respect to "
"how links and subsequent path components interact."
msgstr ""
"Эта функция эмулирует процедуру операционной системы для создания "
"канонического пути, которая немного отличается в Windows и UNIX в отношении "
"взаимодействия ссылок и последующих компонентов пути."

#: ../../library/os.path.rst:380
msgid ""
"Operating system APIs make paths canonical as needed, so it's not normally "
"necessary to call this function."
msgstr ""
"API-интерфейсы операционной системы при необходимости делают пути "
"каноническими, поэтому обычно нет необходимости вызывать эту функцию."

#: ../../library/os.path.rst:386
msgid "Symbolic links and junctions are now resolved on Windows."
msgstr "Символические ссылки и соединения теперь разрешаются в Windows."

#: ../../library/os.path.rst:389
msgid "The *strict* parameter was added."
msgstr "Добавлен параметр *strict*."

#: ../../library/os.path.rst:392
msgid ""
"The :py:data:`~os.path.ALLOW_MISSING` value for the *strict* parameter was "
"added."
msgstr ""

#: ../../library/os.path.rst:398
msgid "Special value used for the *strict* argument in :func:`realpath`."
msgstr ""

#: ../../library/os.path.rst:404
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*.  On Windows, :exc:`ValueError` is raised when *path* and *start* "
"are on different drives."
msgstr ""
"Возвращает относительный путь к файлу *path* либо из текущего каталога, либо "
"из дополнительного *начального* каталога. Это вычисление пути: к файловой "
"системе не осуществляется доступ для подтверждения существования или природы "
"*path* или *start*. В Windows :exc:`ValueError` возникает, когда *path* и "
"*start* находятся на разных дисках."

#: ../../library/os.path.rst:410
msgid "*start* defaults to :attr:`os.curdir`."
msgstr ""

#: ../../library/os.path.rst:420
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""
"Верните True, если оба аргумента пути относятся к одному и тому же файлу или "
"каталогу. Это определяется номером устройства и номером i-узла и вызывает "
"исключение, если вызов :func:`os.stat` по любому пути завершается неудачно."

#: ../../library/os.path.rst:426 ../../library/os.path.rst:442
#: ../../library/os.path.rst:458
msgid "Added Windows support."
msgstr "Добавлена поддержка Windows."

#: ../../library/os.path.rst:429
msgid "Windows now uses the same implementation as all other platforms."
msgstr ""
"Windows теперь использует ту же реализацию, что и все другие платформы."

#: ../../library/os.path.rst:438
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""
"Возвращайте ``True``, если файловые дескрипторы *fp1* и *fp2* относятся к "
"одному и тому же файлу."

#: ../../library/os.path.rst:451
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""
"Верните True, если кортежи статистики *stat1* и *stat2* относятся к одному и "
"тому же файлу. Эти структуры могли быть возвращены функциями :func:`os."
"fstat`, :func:`os.lstat` или :func:`os.stat`. Эта функция реализует базовое "
"сравнение, используемое :func:`samefile` и :func:`sameopenfile`."

#: ../../library/os.path.rst:467
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""
"Разделите путь *path* на пару ``(head, Tail)``, где *tail* — это последний "
"компонент пути, а *head* — все, что к нему ведет. Часть *хвост* никогда не "
"будет содержать косую черту; если *path* заканчивается косой чертой, *tail* "
"будет пустым. Если в *path* нет косой черты, *head* будет пустым. Если "
"*path* пуст, *head* и *tail* пусты. Конечные косые черты удаляются из "
"*head*, если только это не корень (только одна или несколько косых черт). Во "
"всех случаях ``join(head, Tail)`` возвращает путь к тому же местоположению, "
"что и *path* (но строки могут отличаться). Также см. функции :func:`dirname` "
"и :func:`basename`."

#: ../../library/os.path.rst:483
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive "
"specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""
"Разделите путь *path* на пару ``(диск, хвост)``, где *диск* — это либо точка "
"монтирования, либо пустая строка. В системах, которые не используют "
"спецификации дисков, *диск* всегда будет пустой строкой. Во всех случаях "
"``drive + Tail`` будет таким же, как *path*."

#: ../../library/os.path.rst:488
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""
"В Windows разделяет путь на диск/точку доступа UNC и относительный путь."

#: ../../library/os.path.rst:490
msgid ""
"If the path contains a drive letter, drive will contain everything up to and "
"including the colon::"
msgstr ""
"Если путь содержит букву диска, диск будет содержать все, включая двоеточие::"

#: ../../library/os.path.rst:496
msgid ""
"If the path contains a UNC path, drive will contain the host name and share, "
"up to but not including the fourth separator::"
msgstr ""

#: ../../library/os.path.rst:508
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and the extension, *ext*, is empty or begins with a period "
"and contains at most one period."
msgstr ""
"Разделите имя пути *path* на пару ``(root, ext)`` так, чтобы ``root + ext == "
"path``, а расширение *ext* было пустым или начиналось с точки и содержало не "
"более один период."

#: ../../library/os.path.rst:512
msgid "If the path contains no extension, *ext* will be ``''``::"
msgstr "Если путь не содержит расширения, *ext* будет ``''``::"

#: ../../library/os.path.rst:517
msgid ""
"If the path contains an extension, then *ext* will be set to this extension, "
"including the leading period. Note that previous periods will be ignored::"
msgstr ""
"Если путь содержит расширение, то *ext* будет установлено для этого "
"расширения, включая начальную точку. Обратите внимание, что предыдущие "
"периоды будут игнорироваться::"

#: ../../library/os.path.rst:525
msgid ""
"Leading periods of the last component of the path are considered to be part "
"of the root::"
msgstr "Ведущие периоды последней компоненты пути считаются частью корня:"

#: ../../library/os.path.rst:539
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""
"``True``, если в качестве имен файлов можно использовать произвольные строки "
"Unicode (в пределах ограничений, налагаемых файловой системой)."
