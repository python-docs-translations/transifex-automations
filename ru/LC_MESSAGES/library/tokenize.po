# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-14 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/tokenize.rst:2
msgid ":mod:`!tokenize` --- Tokenizer for Python source"
msgstr ":mod:`!tokenize` --- Токенизатор для исходного кода Python"

#: ../../library/tokenize.rst:10
msgid "**Source code:** :source:`Lib/tokenize.py`"
msgstr "**Исходный код:** :source:`Lib/tokenize.py`"

#: ../../library/tokenize.rst:14
msgid ""
"The :mod:`tokenize` module provides a lexical scanner for Python source "
"code, implemented in Python.  The scanner in this module returns comments as "
"tokens as well, making it useful for implementing \"pretty-printers\", "
"including colorizers for on-screen displays."
msgstr ""
"Модуль :mod:`tokenize` предоставляет лексический сканер исходного кода "
"Python, реализованный на Python. Сканер в этом модуле также возвращает "
"комментарии в виде токенов, что делает его полезным для реализации «красивых "
"принтеров», включая раскраски для экранных дисплеев."

#: ../../library/tokenize.rst:19
msgid ""
"To simplify token stream handling, all :ref:`operator <operators>` and :ref:"
"`delimiter <delimiters>` tokens and :data:`Ellipsis` are returned using the "
"generic :data:`~token.OP` token type.  The exact type can be determined by "
"checking the ``exact_type`` property on the :term:`named tuple` returned "
"from :func:`tokenize.tokenize`."
msgstr ""
"Чтобы упростить обработку потока токенов, все токены :ref:`operator "
"<operators>` и :ref:`delimiter <delimiters>` и :data:`Ellipsis` возвращаются "
"с использованием общего типа токена :data:`~token.OP`. . Точный тип можно "
"определить, проверив свойство exact_type в :term:`named tuple`, возвращаемом "
"из :func:`tokenize.tokenize`."

#: ../../library/tokenize.rst:28
msgid ""
"Note that the functions in this module are only designed to parse "
"syntactically valid Python code (code that does not raise when parsed using :"
"func:`ast.parse`).  The behavior of the functions in this module is "
"**undefined** when providing invalid Python code and it can change at any "
"point."
msgstr ""
"Обратите внимание, что функции в этом модуле предназначены только для "
"анализа синтаксически допустимого кода Python (кода, который не вызывается "
"при анализе с использованием :func:`ast.parse`). Поведение функций в этом "
"модуле **не определено** при предоставлении недопустимого кода Python и "
"может измениться в любой момент."

#: ../../library/tokenize.rst:35
msgid "Tokenizing Input"
msgstr "Токенизация ввода"

#: ../../library/tokenize.rst:37
msgid "The primary entry point is a :term:`generator`:"
msgstr "Первичной точкой входа является :term:`генератор`:"

#: ../../library/tokenize.rst:41
msgid ""
"The :func:`.tokenize` generator requires one argument, *readline*, which "
"must be a callable object which provides the same interface as the :meth:`io."
"IOBase.readline` method of file objects.  Each call to the function should "
"return one line of input as bytes."
msgstr ""
"Генератору :func:`.tokenize` требуется один аргумент, *readline*, который "
"должен быть вызываемым объектом, предоставляющим тот же интерфейс, что и "
"метод :meth:`io.IOBase.readline` для файловых объектов. Каждый вызов функции "
"должен возвращать одну строку ввода в виде байтов."

#: ../../library/tokenize.rst:46
msgid ""
"The generator produces 5-tuples with these members: the token type; the "
"token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and "
"column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of "
"ints specifying the row and column where the token ends in the source; and "
"the line on which the token was found. The line passed (the last tuple item) "
"is the *physical* line.  The 5 tuple is returned as a :term:`named tuple` "
"with the field names: ``type string start end line``."
msgstr ""
"Генератор создает 5 кортежей со следующими элементами: тип токена; строка "
"токена; кортеж из двух целых чисел (srow, scol), определяющий строку и "
"столбец, где начинается токен в источнике; 2-кортеж ``(erow, ecol)`` целых "
"чисел, определяющий строку и столбец, где токен заканчивается в источнике; и "
"строка, на которой был найден токен. Пройденная строка (последний элемент "
"кортежа) является *физической* строкой. Кортеж 5 возвращается как "
"именованный кортеж с именами полей: ``type string start end line``."

#: ../../library/tokenize.rst:55
msgid ""
"The returned :term:`named tuple` has an additional property named "
"``exact_type`` that contains the exact operator type for :data:`~token.OP` "
"tokens.  For all other token types ``exact_type`` equals the named tuple "
"``type`` field."
msgstr ""
"Возвращенный :term:`named tuple` имеет дополнительное свойство с именем "
"``exact_type``, которое содержит точный тип оператора для токенов :data:"
"`~token.OP`. Для всех других типов токенов ``exact_type`` соответствует "
"именованному полю кортежа ``type``."

#: ../../library/tokenize.rst:60
msgid "Added support for named tuples."
msgstr "Добавлена ​​поддержка именованных кортежей."

#: ../../library/tokenize.rst:63
msgid "Added support for ``exact_type``."
msgstr "Добавлена ​​поддержка ``exact_type``."

#: ../../library/tokenize.rst:66
msgid ""
":func:`.tokenize` determines the source encoding of the file by looking for "
"a UTF-8 BOM or encoding cookie, according to :pep:`263`."
msgstr ""
":func:`.tokenize` определяет исходную кодировку файла путем поиска "
"спецификации UTF-8 или файла cookie кодирования в соответствии с :pep:`263`."

#: ../../library/tokenize.rst:71
msgid "Tokenize a source reading unicode strings instead of bytes."
msgstr "Токенизировать источник, читающий строки Юникода вместо байтов."

#: ../../library/tokenize.rst:73
msgid ""
"Like :func:`.tokenize`, the *readline* argument is a callable returning a "
"single line of input. However, :func:`generate_tokens` expects *readline* to "
"return a str object rather than bytes."
msgstr ""
"Как и :func:`.tokenize`, аргумент *readline* является вызываемым объектом, "
"возвращающим одну строку входных данных. Однако :func:`generate_tokens` "
"ожидает, что *readline* вернет объект str, а не байты."

#: ../../library/tokenize.rst:77
msgid ""
"The result is an iterator yielding named tuples, exactly like :func:`."
"tokenize`. It does not yield an :data:`~token.ENCODING` token."
msgstr ""
"Результатом является итератор, возвращающий именованные кортежи, точно так "
"же, как :func:`.tokenize`. Он не дает токена :data:`~token.ENCODING`."

#: ../../library/tokenize.rst:80
msgid ""
"All constants from the :mod:`token` module are also exported from :mod:"
"`tokenize`."
msgstr ""
"Все константы из модуля :mod:`token` также экспортируются из :mod:`tokenize`."

#: ../../library/tokenize.rst:83
msgid ""
"Another function is provided to reverse the tokenization process. This is "
"useful for creating tools that tokenize a script, modify the token stream, "
"and write back the modified script."
msgstr ""
"Предусмотрена еще одна функция для обратного процесса токенизации. Это "
"полезно для создания инструментов, которые маркируют сценарий, изменяют "
"поток токенов и записывают измененный сценарий обратно."

#: ../../library/tokenize.rst:90
msgid ""
"Converts tokens back into Python source code.  The *iterable* must return "
"sequences with at least two elements, the token type and the token string. "
"Any additional sequence elements are ignored."
msgstr ""
"Преобразует токены обратно в исходный код Python. *iterable* должен "
"возвращать последовательности, содержащие как минимум два элемента: тип "
"токена и строку токена. Любые дополнительные элементы последовательности "
"игнорируются."

#: ../../library/tokenize.rst:94
msgid ""
"The result is guaranteed to tokenize back to match the input so that the "
"conversion is lossless and round-trips are assured.  The guarantee applies "
"only to the token type and token string as the spacing between tokens "
"(column positions) may change."
msgstr ""
"Результат гарантированно будет токенизировать обратно в соответствии с "
"входом, чтобы преобразование было без потерь, а поездка в оба конца "
"гарантировано. Гарантия относится только к типу токена и токеновой строке, "
"поскольку может измениться расстояние между токенами (позиции столбца)."

#: ../../library/tokenize.rst:99
msgid ""
"It returns bytes, encoded using the :data:`~token.ENCODING` token, which is "
"the first token sequence output by :func:`.tokenize`. If there is no "
"encoding token in the input, it returns a str instead."
msgstr ""
"Он возвращает байты, закодированные с использованием токена :data:`~token."
"ENCODING`, который является первой последовательностью токенов, выводимой :"
"func:`.tokenize`. Если во входных данных нет токена кодирования, вместо "
"этого возвращается строка."

#: ../../library/tokenize.rst:104
msgid ""
":func:`.tokenize` needs to detect the encoding of source files it tokenizes. "
"The function it uses to do this is available:"
msgstr ""
":func:`.tokenize` должен определять кодировку исходных файлов, которые он "
"токенизирует. Функция, которую он использует для этого, доступна:"

#: ../../library/tokenize.rst:109
msgid ""
"The :func:`detect_encoding` function is used to detect the encoding that "
"should be used to decode a Python source file. It requires one argument, "
"readline, in the same way as the :func:`.tokenize` generator."
msgstr ""
"Функция :func:`detect_encoding` используется для определения кодировки, "
"которая должна использоваться для декодирования исходного файла Python. Ему "
"требуется один аргумент, readline, так же, как и генератору :func:`."
"tokenize`."

#: ../../library/tokenize.rst:113
msgid ""
"It will call readline a maximum of twice, and return the encoding used (as a "
"string) and a list of any lines (not decoded from bytes) it has read in."
msgstr ""
"Он вызовет readline максимум два раза и вернет использованную кодировку (в "
"виде строки) и список всех строк (не декодированных из байтов), которые он "
"прочитал."

#: ../../library/tokenize.rst:117
msgid ""
"It detects the encoding from the presence of a UTF-8 BOM or an encoding "
"cookie as specified in :pep:`263`. If both a BOM and a cookie are present, "
"but disagree, a :exc:`SyntaxError` will be raised. Note that if the BOM is "
"found, ``'utf-8-sig'`` will be returned as an encoding."
msgstr ""
"Он определяет кодировку по наличию спецификации UTF-8 или файла cookie "
"кодирования, как указано в :pep:`263`. Если присутствуют и спецификация, и "
"файл cookie, но они не совпадают, будет выдано исключение :exc:"
"`SyntaxError`. Обратите внимание, что если спецификация найдена, в качестве "
"кодировки будет возвращена ``'utf-8-sig'`."

#: ../../library/tokenize.rst:122
msgid ""
"If no encoding is specified, then the default of ``'utf-8'`` will be "
"returned."
msgstr ""
"Если кодировка не указана, то будет возвращено значение по умолчанию «utf-8»."

#: ../../library/tokenize.rst:125
msgid ""
"Use :func:`.open` to open Python source files: it uses :func:"
"`detect_encoding` to detect the file encoding."
msgstr ""
"Используйте :func:`.open` для открытия исходных файлов Python: он "
"использует :func:`detect_encoding` для определения кодировки файла."

#: ../../library/tokenize.rst:131
msgid ""
"Open a file in read only mode using the encoding detected by :func:"
"`detect_encoding`."
msgstr ""
"Откройте файл в режиме только для чтения, используя кодировку, обнаруженную :"
"func:`detect_encoding`."

#: ../../library/tokenize.rst:138
msgid ""
"Raised when either a docstring or expression that may be split over several "
"lines is not completed anywhere in the file, for example::"
msgstr ""
"Возникает, когда строка документации или выражение, которое может быть "
"разбито на несколько строк, не завершено где-либо в файле, например::"

#: ../../library/tokenize.rst:141
msgid ""
"\"\"\"Beginning of\n"
"docstring"
msgstr "\"\"\"Начало строка документации"

#: ../../library/tokenize.rst:144
msgid "or::"
msgstr "или::"

#: ../../library/tokenize.rst:146
msgid ""
"[1,\n"
" 2,\n"
" 3"
msgstr ""
"[1,\n"
" 2,\n"
" 3"

#: ../../library/tokenize.rst:153
msgid "Command-Line Usage"
msgstr "Использование командной строки"

#: ../../library/tokenize.rst:157
msgid ""
"The :mod:`tokenize` module can be executed as a script from the command "
"line. It is as simple as:"
msgstr ""
"Модуль :mod:`tokenize` можно запустить как скрипт из командной строки. Это "
"так же просто, как:"

#: ../../library/tokenize.rst:160
msgid "python -m tokenize [-e] [filename.py]"
msgstr "python -m tokenize [-e] [filename.py]"

#: ../../library/tokenize.rst:164
msgid "The following options are accepted:"
msgstr "Принимаются следующие варианты:"

#: ../../library/tokenize.rst:170
msgid "show this help message and exit"
msgstr "показать это справочное сообщение и выйти"

#: ../../library/tokenize.rst:174
msgid "display token names using the exact type"
msgstr "отображать имена токенов, используя точный тип"

#: ../../library/tokenize.rst:176
msgid ""
"If :file:`filename.py` is specified its contents are tokenized to stdout. "
"Otherwise, tokenization is performed on stdin."
msgstr ""
"Если указан :file:`filename.py`, его содержимое токенизируется в стандартный "
"вывод. В противном случае токенизация выполняется на стандартном вводе."

#: ../../library/tokenize.rst:180
msgid "Examples"
msgstr "Примеры"

#: ../../library/tokenize.rst:182
msgid ""
"Example of a script rewriter that transforms float literals into Decimal "
"objects::"
msgstr ""
"Пример переписчика скриптов, который преобразует литералы с плавающей "
"запятой в объекты Decimal:"

#: ../../library/tokenize.rst:185
msgid ""
"from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP\n"
"from io import BytesIO\n"
"\n"
"def decistmt(s):\n"
"    \"\"\"Substitute Decimals for floats in a string of statements.\n"
"\n"
"    >>> from decimal import Decimal\n"
"    >>> s = 'print(+21.3e-5*-.1234/81.7)'\n"
"    >>> decistmt(s)\n"
"    \"print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))\"\n"
"\n"
"    The format of the exponent is inherited from the platform C library.\n"
"    Known cases are \"e-007\" (Windows) and \"e-07\" (not Windows).  Since\n"
"    we're only showing 12 digits, and the 13th isn't close to 5, the\n"
"    rest of the output should be platform-independent.\n"
"\n"
"    >>> exec(s)  #doctest: +ELLIPSIS\n"
"    -3.21716034272e-0...7\n"
"\n"
"    Output from calculations with Decimal should be identical across all\n"
"    platforms.\n"
"\n"
"    >>> exec(decistmt(s))\n"
"    -3.217160342717258261933904529E-7\n"
"    \"\"\"\n"
"    result = []\n"
"    g = tokenize(BytesIO(s.encode('utf-8')).readline)  # tokenize the "
"string\n"
"    for toknum, tokval, _, _, _ in g:\n"
"        if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens\n"
"            result.extend([\n"
"                (NAME, 'Decimal'),\n"
"                (OP, '('),\n"
"                (STRING, repr(tokval)),\n"
"                (OP, ')')\n"
"            ])\n"
"        else:\n"
"            result.append((toknum, tokval))\n"
"    return untokenize(result).decode('utf-8')"
msgstr ""
"from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP\n"
"from io import BytesIO\n"
"\n"
"def decistmt(s):\n"
"    \"\"\"Substitute Decimals for floats in a string of statements.\n"
"\n"
"    >>> from decimal import Decimal\n"
"    >>> s = 'print(+21.3e-5*-.1234/81.7)'\n"
"    >>> decistmt(s)\n"
"    \"print (+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7'))\"\n"
"\n"
"    The format of the exponent is inherited from the platform C library.\n"
"    Known cases are \"e-007\" (Windows) and \"e-07\" (not Windows).  Since\n"
"    we're only showing 12 digits, and the 13th isn't close to 5, the\n"
"    rest of the output should be platform-independent.\n"
"\n"
"    >>> exec(s)  #doctest: +ELLIPSIS\n"
"    -3.21716034272e-0...7\n"
"\n"
"    Output from calculations with Decimal should be identical across all\n"
"    platforms.\n"
"\n"
"    >>> exec(decistmt(s))\n"
"    -3.217160342717258261933904529E-7\n"
"    \"\"\"\n"
"    result = []\n"
"    g = tokenize(BytesIO(s.encode('utf-8')).readline)  # tokenize the "
"string\n"
"    for toknum, tokval, _, _, _ in g:\n"
"        if toknum == NUMBER and '.' in tokval:  # replace NUMBER tokens\n"
"            result.extend([\n"
"                (NAME, 'Decimal'),\n"
"                (OP, '('),\n"
"                (STRING, repr(tokval)),\n"
"                (OP, ')')\n"
"            ])\n"
"        else:\n"
"            result.append((toknum, tokval))\n"
"    return untokenize(result).decode('utf-8')"

#: ../../library/tokenize.rst:224
msgid "Example of tokenizing from the command line.  The script::"
msgstr "Пример токенизации из командной строки. Скрипт::"

#: ../../library/tokenize.rst:226
msgid ""
"def say_hello():\n"
"    print(\"Hello, World!\")\n"
"\n"
"say_hello()"
msgstr ""
"def say_hello():\n"
"    print(\"Hello, World!\")\n"
"\n"
"say_hello()"

#: ../../library/tokenize.rst:231
msgid ""
"will be tokenized to the following output where the first column is the "
"range of the line/column coordinates where the token is found, the second "
"column is the name of the token, and the final column is the value of the "
"token (if any)"
msgstr ""
"будет преобразован в следующий вывод, где первый столбец — это диапазон "
"координат строки/столбца, в котором найден токен, второй столбец — это имя "
"токена, а последний столбец — это значение токена (если есть)"

#: ../../library/tokenize.rst:235
msgid ""
"$ python -m tokenize hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          OP             '('\n"
"1,14-1,15:          OP             ')'\n"
"1,15-1,16:          OP             ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           OP             '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          OP             ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           OP             '('\n"
"4,10-4,11:          OP             ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""
"$ python -m tokenize hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          OP             '('\n"
"1,14-1,15:          OP             ')'\n"
"1,15-1,16:          OP             ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           OP             '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          OP             ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           OP             '('\n"
"4,10-4,11:          OP             ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"

#: ../../library/tokenize.rst:259
msgid ""
"The exact token type names can be displayed using the :option:`-e` option:"
msgstr ""
"Точные имена типов токенов можно отобразить с помощью опции :option:`-e`:"

#: ../../library/tokenize.rst:261
msgid ""
"$ python -m tokenize -e hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          LPAR           '('\n"
"1,14-1,15:          RPAR           ')'\n"
"1,15-1,16:          COLON          ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           LPAR           '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          RPAR           ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           LPAR           '('\n"
"4,10-4,11:          RPAR           ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"
msgstr ""
"$ python -m tokenize -e hello.py\n"
"0,0-0,0:            ENCODING       'utf-8'\n"
"1,0-1,3:            NAME           'def'\n"
"1,4-1,13:           NAME           'say_hello'\n"
"1,13-1,14:          LPAR           '('\n"
"1,14-1,15:          RPAR           ')'\n"
"1,15-1,16:          COLON          ':'\n"
"1,16-1,17:          NEWLINE        '\\n'\n"
"2,0-2,4:            INDENT         '    '\n"
"2,4-2,9:            NAME           'print'\n"
"2,9-2,10:           LPAR           '('\n"
"2,10-2,25:          STRING         '\"Hello, World!\"'\n"
"2,25-2,26:          RPAR           ')'\n"
"2,26-2,27:          NEWLINE        '\\n'\n"
"3,0-3,1:            NL             '\\n'\n"
"4,0-4,0:            DEDENT         ''\n"
"4,0-4,9:            NAME           'say_hello'\n"
"4,9-4,10:           LPAR           '('\n"
"4,10-4,11:          RPAR           ')'\n"
"4,11-4,12:          NEWLINE        '\\n'\n"
"5,0-5,0:            ENDMARKER      ''"

#: ../../library/tokenize.rst:285
msgid ""
"Example of tokenizing a file programmatically, reading unicode strings "
"instead of bytes with :func:`generate_tokens`::"
msgstr ""
"Пример программного токенизации файла, чтения строк Юникода вместо байтов с "
"помощью :func:`generate_tokens`::"

#: ../../library/tokenize.rst:288
msgid ""
"import tokenize\n"
"\n"
"with tokenize.open('hello.py') as f:\n"
"    tokens = tokenize.generate_tokens(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"
msgstr ""
"import tokenize\n"
"\n"
"with tokenize.open('hello.py') as f:\n"
"    tokens = tokenize.generate_tokens(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"

#: ../../library/tokenize.rst:295
msgid "Or reading bytes directly with :func:`.tokenize`::"
msgstr "Или чтение байтов напрямую с помощью :func:`.tokenize`::"

#: ../../library/tokenize.rst:297
msgid ""
"import tokenize\n"
"\n"
"with open('hello.py', 'rb') as f:\n"
"    tokens = tokenize.tokenize(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"
msgstr ""
"import tokenize\n"
"\n"
"with open('hello.py', 'rb') as f:\n"
"    tokens = tokenize.tokenize(f.readline)\n"
"    for token in tokens:\n"
"        print(token)"
