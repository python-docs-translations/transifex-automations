# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:33+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/code.rst:2
msgid ":mod:`!code` --- Interpreter base classes"
msgstr ":mod:`!code` --- Базовые классы интерпретатора"

#: ../../library/code.rst:7
msgid "**Source code:** :source:`Lib/code.py`"
msgstr "**Исходный код:** :source:`Lib/code.py`"

#: ../../library/code.rst:11
msgid ""
"The ``code`` module provides facilities to implement read-eval-print loops "
"in Python.  Two classes and convenience functions are included which can be "
"used to build applications which provide an interactive interpreter prompt."
msgstr ""
"Модуль ``code`` предоставляет средства для реализации циклов чтения-оценки-"
"печати в Python. Включены два класса и удобные функции, которые можно "
"использовать для создания приложений, предоставляющих интерактивную "
"подсказку интерпретатора."

#: ../../library/code.rst:18
msgid ""
"This class deals with parsing and interpreter state (the user's namespace); "
"it does not deal with input buffering or prompting or input file naming (the "
"filename is always passed in explicitly). The optional *locals* argument "
"specifies the dictionary in which code will be executed; it defaults to a "
"newly created dictionary with key ``'__name__'`` set to ``'__console__'`` "
"and key ``'__doc__'`` set to ``None``."
msgstr ""
"Этот класс занимается синтаксическим анализом и состоянием интерпретатора "
"(пространство имен пользователя); он не занимается буферизацией ввода, "
"запросами или именованием входного файла (имя файла всегда передается явно). "
"Необязательный аргумент *locals* указывает словарь, в котором будет "
"выполняться код; по умолчанию используется вновь созданный словарь с ключом "
"``'__name__'``, установленным в ``'__console__'``, и ключом ``'__doc__'``, "
"установленным в ``None``."

#: ../../library/code.rst:28
msgid ""
"Closely emulate the behavior of the interactive Python interpreter. This "
"class builds on :class:`InteractiveInterpreter` and adds prompting using the "
"familiar ``sys.ps1`` and ``sys.ps2``, and input buffering."
msgstr ""
"Тщательно имитируйте поведение интерактивного интерпретатора Python. Этот "
"класс основан на :class:`InteractiveInterpreter` и добавляет подсказки с "
"использованием знакомых ``sys.ps1`` и ``sys.ps2``, а также буферизацию ввода."

#: ../../library/code.rst:35
msgid ""
"Convenience function to run a read-eval-print loop.  This creates a new "
"instance of :class:`InteractiveConsole` and sets *readfunc* to be used as "
"the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is "
"provided, it is passed to the :class:`InteractiveConsole` constructor for "
"use as the default namespace for the interpreter loop.  The :meth:"
"`~InteractiveConsole.interact` method of the instance is then run with "
"*banner* and *exitmsg* passed as the banner and exit message to use, if "
"provided.  The console object is discarded after use."
msgstr ""
"Удобная функция для запуска цикла чтения-оценки-печати. Это создает новый "
"экземпляр :class:`InteractiveConsole` и устанавливает *readfunc* для "
"использования в качестве метода :meth:`InteractiveConsole.raw_input`, если "
"он предусмотрен. Если указано *local*, оно передается конструктору :class:"
"`InteractiveConsole` для использования в качестве пространства имен по "
"умолчанию для цикла интерпретатора. Затем запускается метод экземпляра :meth:"
"`~InteractiveConsole.interact` с параметрами *banner* и *exitmsg*, "
"передаваемыми в качестве баннера и сообщения выхода, если они предусмотрены. "
"Объект консоли удаляется после использования."

#: ../../library/code.rst:44
msgid "Added *exitmsg* parameter."
msgstr "Добавлен параметр *exitmsg*."

#: ../../library/code.rst:50
msgid ""
"This function is useful for programs that want to emulate Python's "
"interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is "
"to determine when the user has entered an incomplete command that can be "
"completed by entering more text (as opposed to a complete command or a "
"syntax error).  This function *almost* always makes the same decision as the "
"real interpreter main loop."
msgstr ""
"Эта функция полезна для программ, которые хотят эмулировать основной цикл "
"интерпретатора Python (также известный как цикл чтения-оценки-печати). "
"Сложнее всего определить, когда пользователь ввел неполную команду, которую "
"можно завершить, введя дополнительный текст (в отличие от полной команды или "
"синтаксической ошибки). Эта функция *почти* всегда принимает то же решение, "
"что и основной цикл реального интерпретатора."

#: ../../library/code.rst:57
msgid ""
"*source* is the source string; *filename* is the optional filename from "
"which source was read, defaulting to ``'<input>'``; and *symbol* is the "
"optional grammar start symbol, which should be ``'single'`` (the default), "
"``'eval'`` or ``'exec'``."
msgstr ""
"*source* — исходная строка; *filename* — это необязательное имя файла, из "
"которого был прочитан источник, по умолчанию — ``'<input>'``; а *symbol* — "
"необязательный начальный символ грамматики, который должен быть ``'single'`` "
"(по умолчанию), ``'eval'`` или ``'exec'``."

#: ../../library/code.rst:62
msgid ""
"Returns a code object (the same as ``compile(source, filename, symbol)``) if "
"the command is complete and valid; ``None`` if the command is incomplete; "
"raises :exc:`SyntaxError` if the command is complete and contains a syntax "
"error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command "
"contains an invalid literal."
msgstr ""
"Возвращает объект кода (тот же, что и ``компилировать(источник, имя файла, "
"символ)``), если команда завершена и действительна; ``None``, если команда "
"неполная; вызывает :exc:`SyntaxError`, если команда завершена и содержит "
"синтаксическую ошибку, или вызывает :exc:`OverflowError` или :exc:"
"`ValueError`, если команда содержит недопустимый литерал."

#: ../../library/code.rst:72
msgid "Interactive Interpreter Objects"
msgstr "Интерактивные объекты интерпретатора"

#: ../../library/code.rst:77
msgid ""
"Compile and run some source in the interpreter. Arguments are the same as "
"for :func:`compile_command`; the default for *filename* is ``'<input>'``, "
"and for *symbol* is ``'single'``.  One of several things can happen:"
msgstr ""
"Скомпилируйте и запустите какой-нибудь исходник в интерпретаторе. Аргументы "
"такие же, как и для :func:`compile_command`; значением по умолчанию для "
"*filename* является ``'<input>'``, а для *symbol* — ``'single'``. Может "
"произойти одно из нескольких:"

#: ../../library/code.rst:81
msgid ""
"The input is incorrect; :func:`compile_command` raised an exception (:exc:"
"`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be printed "
"by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` returns "
"``False``."
msgstr ""
"Введенные данные неверны; :func:`compile_command` вызвал исключение (:exc:"
"`SyntaxError` или :exc:`OverflowError`). Обратная трассировка синтаксиса "
"будет напечатана путем вызова метода :meth:`showsyntaxerror`. :meth:"
"`runsource` возвращает ``False``."

#: ../../library/code.rst:86
msgid ""
"The input is incomplete, and more input is required; :func:`compile_command` "
"returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""
"Введенные данные неполны, и требуется дополнительная информация; :func:"
"`compile_command` вернул ``None``. :meth:`runsource` возвращает ``True``."

#: ../../library/code.rst:89
msgid ""
"The input is complete; :func:`compile_command` returned a code object.  The "
"code is executed by calling the :meth:`runcode` (which also handles run-time "
"exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns "
"``False``."
msgstr ""
"Ввод завершен; :func:`compile_command` вернул объект кода. Код выполняется "
"путем вызова :meth:`runcode` (который также обрабатывает исключения во время "
"выполнения, за исключением :exc:`SystemExit`). :meth:`runsource` возвращает "
"``False``."

#: ../../library/code.rst:93
msgid ""
"The return value can be used to decide whether to use ``sys.ps1`` or ``sys."
"ps2`` to prompt the next line."
msgstr ""
"Возвращаемое значение можно использовать для принятия решения о том, "
"использовать ли ``sys.ps1`` или ``sys.ps2`` для запроса следующей строки."

#: ../../library/code.rst:99
msgid ""
"Execute a code object. When an exception occurs, :meth:`showtraceback` is "
"called to display a traceback.  All exceptions are caught except :exc:"
"`SystemExit`, which is allowed to propagate."
msgstr ""
"Выполнить объект кода. При возникновении исключения вызывается :meth:"
"`showtraceback` для отображения обратной трассировки. Перехватываются все "
"исключения, кроме :exc:`SystemExit`, распространение которого разрешено."

#: ../../library/code.rst:103
msgid ""
"A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in "
"this code, and may not always be caught.  The caller should be prepared to "
"deal with it."
msgstr ""
"Примечание по поводу :exc:`KeyboardInterrupt`: это исключение может "
"возникнуть в другом месте этого кода и не всегда может быть перехвачено. "
"Звонящий должен быть готов к этому."

#: ../../library/code.rst:110
msgid ""
"Display the syntax error that just occurred.  This does not display a stack "
"trace because there isn't one for syntax errors. If *filename* is given, it "
"is stuffed into the exception instead of the default filename provided by "
"Python's parser, because it always uses ``'<string>'`` when reading from a "
"string. The output is written by the :meth:`write` method."
msgstr ""
"Отобразите только что возникшую синтаксическую ошибку. При этом трассировка "
"стека не отображается, поскольку ее нет для синтаксических ошибок. Если "
"указано *filename*, оно помещается в исключение вместо имени файла по "
"умолчанию, предоставленного синтаксическим анализатором Python, поскольку он "
"всегда использует ``'<string>'`` при чтении из строки. Вывод записывается "
"методом :meth:`write`."

#: ../../library/code.rst:119
msgid ""
"Display the exception that just occurred.  We remove the first stack item "
"because it is within the interpreter object implementation. The output is "
"written by the :meth:`write` method."
msgstr ""
"Отображение только что возникшего исключения. Мы удаляем первый элемент "
"стека, поскольку он находится в реализации объекта интерпретатора. Вывод "
"записывается методом :meth:`write`."

#: ../../library/code.rst:123
msgid ""
"The full chained traceback is displayed instead of just the primary "
"traceback."
msgstr "Вместо основной трассировки отображается полная цепочка трассировки."

#: ../../library/code.rst:129
msgid ""
"Write a string to the standard error stream (``sys.stderr``). Derived "
"classes should override this to provide the appropriate output handling as "
"needed."
msgstr ""
"Запишите строку в стандартный поток ошибок (``sys.stderr``). Производные "
"классы должны переопределить это, чтобы обеспечить соответствующую обработку "
"вывода по мере необходимости."

#: ../../library/code.rst:136
msgid "Interactive Console Objects"
msgstr "Интерактивные консольные объекты"

#: ../../library/code.rst:138
msgid ""
"The :class:`InteractiveConsole` class is a subclass of :class:"
"`InteractiveInterpreter`, and so offers all the methods of the interpreter "
"objects as well as the following additions."
msgstr ""
"Класс :class:`InteractiveConsole` является подклассом :class:"
"`InteractiveInterpreter` и поэтому предлагает все методы объектов "
"интерпретатора, а также следующие дополнения."

#: ../../library/code.rst:145
msgid ""
"Closely emulate the interactive Python console. The optional *banner* "
"argument specify the banner to print before the first interaction; by "
"default it prints a banner similar to the one printed by the standard Python "
"interpreter, followed by the class name of the console object in parentheses "
"(so as not to confuse this with the real interpreter -- since it's so "
"close!)."
msgstr ""
"Тщательно эмулируйте интерактивную консоль Python. Необязательный аргумент "
"*banner* указывает баннер, который будет напечатан перед первым "
"взаимодействием; по умолчанию он печатает баннер, аналогичный тому, который "
"печатает стандартный интерпретатор Python, за которым следует имя класса "
"объекта консоли в круглых скобках (чтобы не спутать его с настоящим "
"интерпретатором — поскольку он очень близок!)."

#: ../../library/code.rst:151
msgid ""
"The optional *exitmsg* argument specifies an exit message printed when "
"exiting. Pass the empty string to suppress the exit message. If *exitmsg* is "
"not given or ``None``, a default message is printed."
msgstr ""
"Необязательный аргумент *exitmsg* указывает сообщение о выходе, выводящееся "
"при выходе. Передайте пустую строку, чтобы подавить сообщение о выходе. Если "
"*exitmsg* не задано или ``None``, печатается сообщение по умолчанию."

#: ../../library/code.rst:155
msgid "To suppress printing any banner, pass an empty string."
msgstr "Чтобы запретить печать любого баннера, передайте пустую строку."

#: ../../library/code.rst:158
msgid "Print an exit message when exiting."
msgstr "Распечатайте сообщение о выходе при выходе."

#: ../../library/code.rst:164
msgid ""
"Push a line of source text to the interpreter. The line should not have a "
"trailing newline; it may have internal newlines.  The line is appended to a "
"buffer and the interpreter's :meth:`~InteractiveInterpreter.runsource` "
"method is called with the concatenated contents of the buffer as source.  If "
"this indicates that the command was executed or invalid, the buffer is "
"reset; otherwise, the command is incomplete, and the buffer is left as it "
"was after the line was appended.  The return value is ``True`` if more input "
"is required, ``False`` if the line was dealt with in some way (this is the "
"same as :meth:`!runsource`)."
msgstr ""
"Передайте строку исходного текста интерпретатору. В строке не должно быть "
"завершающего символа новой строки; он может иметь внутренние символы новой "
"строки. Строка добавляется в буфер, и вызывается метод интерпретатора :meth:"
"`~InteractiveInteractiveInterpreter.runsource` с объединенным содержимым "
"буфера в качестве источника. Если это указывает на то, что команда была "
"выполнена или недействительна, буфер сбрасывается; в противном случае "
"команда будет неполной, и буфер останется таким, каким он был после "
"добавления строки. Возвращаемое значение — ``True``, если требуется больше "
"входных данных, ``False``, если строка была каким-то образом обработана (это "
"то же самое, что и :meth:`!runsource`)."

#: ../../library/code.rst:176
msgid "Remove any unhandled source text from the input buffer."
msgstr "Удалите весь необработанный исходный текст из входного буфера."

#: ../../library/code.rst:181
msgid ""
"Write a prompt and read a line.  The returned line does not include the "
"trailing newline.  When the user enters the EOF key sequence, :exc:"
"`EOFError` is raised. The base implementation reads from ``sys.stdin``; a "
"subclass may replace this with a different implementation."
msgstr ""
"Напишите подсказку и прочитайте строку. Возвращенная строка не включает "
"завершающую новую строку. Когда пользователь вводит последовательность "
"клавиш EOF, возникает :exc:`EOFError`. Базовая реализация читает из ``sys."
"stdin``; подкласс может заменить это другой реализацией."
