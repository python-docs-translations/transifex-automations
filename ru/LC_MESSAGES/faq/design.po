# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 15:26+0000\n"
"PO-Revision-Date: 2023-05-24 02:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../faq/design.rst:3
msgid "Design and History FAQ"
msgstr "Часто задаваемые вопросы по дизайну и истории"

#: ../../faq/design.rst:6
msgid "Contents"
msgstr " Содержание"

#: ../../faq/design.rst:11
msgid "Why does Python use indentation for grouping of statements?"
msgstr "Почему Python использует отступы для группировки операторов?"

#: ../../faq/design.rst:13
msgid ""
"Guido van Rossum believes that using indentation for grouping is extremely "
"elegant and contributes a lot to the clarity of the average Python program. "
"Most people learn to love this feature after a while."
msgstr ""
"Гвидо ван Россум считает, что использование отступов для группировки "
"чрезвычайно элегантно и вносит большой вклад в ясность средней программы на "
"Python. Большинству людей через некоторое время полюбится эта функция."

#: ../../faq/design.rst:17
msgid ""
"Since there are no begin/end brackets there cannot be a disagreement between "
"grouping perceived by the parser and the human reader.  Occasionally C "
"programmers will encounter a fragment of code like this::"
msgstr ""
"Поскольку начальных/концевых скобок нет, не может быть разногласий между "
"группировкой, воспринимаемой синтаксическим анализатором, и читателем. "
"Иногда программисты на языке C сталкиваются с таким фрагментом кода:"

#: ../../faq/design.rst:26
msgid ""
"Only the ``x++`` statement is executed if the condition is true, but the "
"indentation leads many to believe otherwise.  Even experienced C programmers "
"will sometimes stare at it a long time wondering as to why ``y`` is being "
"decremented even for ``x > y``."
msgstr ""
"Если условие истинно, выполняется только оператор ``x++``, но отступ "
"заставляет многих думать иначе. Даже опытные программисты на C иногда долго "
"смотрят на это, задаваясь вопросом, почему ``y`` уменьшается даже для ``x > "
"y``."

#: ../../faq/design.rst:31
msgid ""
"Because there are no begin/end brackets, Python is much less prone to coding-"
"style conflicts.  In C there are many different ways to place the braces. "
"After becoming used to reading and writing code using a particular style, it "
"is normal to feel somewhat uneasy when reading (or being required to write) "
"in a different one."
msgstr ""
"Поскольку здесь нет начальных/концевых скобок, Python гораздо менее "
"подвержен конфликтам стилей кодирования. В C есть много разных способов "
"расставить фигурные скобки. После привыкания к чтению и написанию кода с "
"использованием определенного стиля вполне нормально чувствовать некоторую "
"неловкость при чтении (или необходимости писать) в другом стиле."

#: ../../faq/design.rst:38
msgid ""
"Many coding styles place begin/end brackets on a line by themselves.  This "
"makes programs considerably longer and wastes valuable screen space, making "
"it harder to get a good overview of a program.  Ideally, a function should "
"fit on one screen (say, 20--30 lines).  20 lines of Python can do a lot more "
"work than 20 lines of C.  This is not solely due to the lack of begin/end "
"brackets -- the lack of declarations and the high-level data types are also "
"responsible -- but the indentation-based syntax certainly helps."
msgstr ""
"Многие стили кодирования сами по себе помещают начальные/конечные скобки в "
"строку. Это делает программы значительно длиннее и тратит ценное "
"пространство на экране, что затрудняет получение хорошего обзора программы. "
"В идеале функция должна умещаться на одном экране (скажем, 20–30 строк). 20 "
"строк Python могут выполнить гораздо больше работы, чем 20 строк C. Это "
"связано не только с отсутствием начальных/концевых скобок (отсутствие "
"объявлений и типов данных высокого уровня также ответственно за это), но и с "
"отступами. -based синтаксис, безусловно, помогает."

#: ../../faq/design.rst:48
msgid "Why am I getting strange results with simple arithmetic operations?"
msgstr ""
"Почему я получаю странные результаты при выполнении простых арифметических "
"операций?"

#: ../../faq/design.rst:50
msgid "See the next question."
msgstr "Смотрите следующий вопрос."

#: ../../faq/design.rst:54
msgid "Why are floating-point calculations so inaccurate?"
msgstr "Почему вычисления с плавающей запятой настолько неточны?"

#: ../../faq/design.rst:56
msgid "Users are often surprised by results like this::"
msgstr "Пользователи часто удивляются таким результатам:"

#: ../../faq/design.rst:61
msgid ""
"and think it is a bug in Python.  It's not.  This has little to do with "
"Python, and much more to do with how the underlying platform handles "
"floating-point numbers."
msgstr ""
"и думаю, что это ошибка в Python. Это не. Это не имеет ничего общего с "
"Python и больше связано с тем, как базовая платформа обрабатывает числа с "
"плавающей запятой."

#: ../../faq/design.rst:65
msgid ""
"The :class:`float` type in CPython uses a C ``double`` for storage.  A :"
"class:`float` object's value is stored in binary floating-point with a fixed "
"precision (typically 53 bits) and Python uses C operations, which in turn "
"rely on the hardware implementation in the processor, to perform floating-"
"point operations. This means that as far as floating-point operations are "
"concerned, Python behaves like many popular languages including C and Java."
msgstr ""
"Тип :class:`float` в CPython использует для хранения данных тип C double. "
"Значение объекта :class:`float` хранится в двоичном формате с плавающей "
"запятой с фиксированной точностью (обычно 53 бита), а Python использует "
"операции C, которые, в свою очередь, зависят от аппаратной реализации в "
"процессоре для выполнения операций с плавающей запятой. Это означает, что в "
"отношении операций с плавающей запятой Python ведет себя так же, как многие "
"популярные языки, включая C и Java."

#: ../../faq/design.rst:72
msgid ""
"Many numbers that can be written easily in decimal notation cannot be "
"expressed exactly in binary floating-point.  For example, after::"
msgstr ""

#: ../../faq/design.rst:77
msgid ""
"the value stored for ``x`` is a (very good) approximation to the decimal "
"value ``1.2``, but is not exactly equal to it.  On a typical machine, the "
"actual stored value is::"
msgstr ""
"значение, сохраненное для ``x``, является (очень хорошим) приближением к "
"десятичному значению ``1,2``, но не совсем равно ему. На типичной машине "
"фактическое сохраненное значение равно:"

#: ../../faq/design.rst:83
msgid "which is exactly::"
msgstr "что в точности соответствует::"

#: ../../faq/design.rst:87
msgid ""
"The typical precision of 53 bits provides Python floats with 15--16 decimal "
"digits of accuracy."
msgstr ""
"Типичная точность в 53 бита обеспечивает точность чисел с плавающей запятой "
"в Python 15–16 десятичных цифр."

#: ../../faq/design.rst:90
msgid ""
"For a fuller explanation, please see the :ref:`floating point arithmetic "
"<tut-fp-issues>` chapter in the Python tutorial."
msgstr ""

#: ../../faq/design.rst:95
msgid "Why are Python strings immutable?"
msgstr "Почему строки Python неизменяемы?"

#: ../../faq/design.rst:97
msgid "There are several advantages."
msgstr "Есть несколько преимуществ."

#: ../../faq/design.rst:99
msgid ""
"One is performance: knowing that a string is immutable means we can allocate "
"space for it at creation time, and the storage requirements are fixed and "
"unchanging.  This is also one of the reasons for the distinction between "
"tuples and lists."
msgstr ""
"Одним из них является производительность: знание того, что строка является "
"неизменной, означает, что мы можем выделить для нее место во время создания, "
"а требования к хранению фиксированы и неизменны. Это также одна из причин "
"различия между кортежами и списками."

#: ../../faq/design.rst:104
msgid ""
"Another advantage is that strings in Python are considered as \"elemental\" "
"as numbers.  No amount of activity will change the value 8 to anything else, "
"and in Python, no amount of activity will change the string \"eight\" to "
"anything else."
msgstr ""
"Еще одним преимуществом является то, что строки в Python считаются такими же "
"«элементарными», как и числа. Никакие действия не изменят значение 8 ни на "
"что другое, а в Python никакие действия не изменят строку «восемь» ни на что "
"другое."

#: ../../faq/design.rst:112
msgid "Why must 'self' be used explicitly in method definitions and calls?"
msgstr ""
"Почему «self» необходимо явно использовать в определениях и вызовах методов?"

#: ../../faq/design.rst:114
msgid ""
"The idea was borrowed from Modula-3.  It turns out to be very useful, for a "
"variety of reasons."
msgstr ""
"Идея была позаимствована у Модулы-3. Это оказывается очень полезным по ряду "
"причин."

#: ../../faq/design.rst:117
msgid ""
"First, it's more obvious that you are using a method or instance attribute "
"instead of a local variable.  Reading ``self.x`` or ``self.meth()`` makes it "
"absolutely clear that an instance variable or method is used even if you "
"don't know the class definition by heart.  In C++, you can sort of tell by "
"the lack of a local variable declaration (assuming globals are rare or "
"easily recognizable) -- but in Python, there are no local variable "
"declarations, so you'd have to look up the class definition to be sure.  "
"Some C++ and Java coding standards call for instance attributes to have an "
"``m_`` prefix, so this explicitness is still useful in those languages, too."
msgstr ""
"Во-первых, более очевидно, что вы используете атрибут метода или экземпляра "
"вместо локальной переменной. Чтение ``self.x`` или ``self.meth()`` делает "
"абсолютно ясным, что используется переменная экземпляра или метод, даже если "
"вы не знаете определение класса наизусть. В C++ это можно определить по "
"отсутствию объявления локальной переменной (при условии, что глобальные "
"переменные редки или легко распознаваемы), но в Python нет объявлений "
"локальных переменных, поэтому вам придется искать определение класса, чтобы "
"будьте уверены. Некоторые стандарты кодирования C++ и Java требуют, чтобы "
"атрибуты экземпляра имели префикс ``m_``, поэтому эта явность по-прежнему "
"полезна и в этих языках."

#: ../../faq/design.rst:127
msgid ""
"Second, it means that no special syntax is necessary if you want to "
"explicitly reference or call the method from a particular class.  In C++, if "
"you want to use a method from a base class which is overridden in a derived "
"class, you have to use the ``::`` operator -- in Python you can write "
"``baseclass.methodname(self, <argument list>)``.  This is particularly "
"useful for :meth:`__init__` methods, and in general in cases where a derived "
"class method wants to extend the base class method of the same name and thus "
"has to call the base class method somehow."
msgstr ""

#: ../../faq/design.rst:136
msgid ""
"Finally, for instance variables it solves a syntactic problem with "
"assignment: since local variables in Python are (by definition!) those "
"variables to which a value is assigned in a function body (and that aren't "
"explicitly declared global), there has to be some way to tell the "
"interpreter that an assignment was meant to assign to an instance variable "
"instead of to a local variable, and it should preferably be syntactic (for "
"efficiency reasons).  C++ does this through declarations, but Python doesn't "
"have declarations and it would be a pity having to introduce them just for "
"this purpose.  Using the explicit ``self.var`` solves this nicely.  "
"Similarly, for using instance variables, having to write ``self.var`` means "
"that references to unqualified names inside a method don't have to search "
"the instance's directories.  To put it another way, local variables and "
"instance variables live in two different namespaces, and you need to tell "
"Python which namespace to use."
msgstr ""
"Наконец, например, переменные решают синтаксическую проблему с присвоением: "
"поскольку локальные переменные в Python — это (по определению!) те "
"переменные, которым присваивается значение в теле функции (и которые не "
"объявлены явно глобальными), необходимо быть каким-то способом сообщить "
"интерпретатору, что присваивание предназначено для присвоения переменной "
"экземпляра, а не локальной переменной, и желательно, чтобы оно было "
"синтаксическим (по соображениям эффективности). В C++ это делается "
"посредством объявлений, но в Python объявлений нет, и было бы жаль вводить "
"их только для этой цели. Использование явного ``self.var`` прекрасно решает "
"эту проблему. Аналогично, при использовании переменных экземпляра "
"необходимость записи self.var означает, что ссылки на неполные имена внутри "
"метода не должны искать в каталогах экземпляра. Другими словами, локальные "
"переменные и переменные экземпляра находятся в двух разных пространствах "
"имен, и вам нужно указать Python, какое пространство имен использовать."

#: ../../faq/design.rst:154
msgid "Why can't I use an assignment in an expression?"
msgstr "Почему я не могу использовать присваивание в выражении?"

#: ../../faq/design.rst:156
msgid "Starting in Python 3.8, you can!"
msgstr "Начиная с Python 3.8, вы можете!"

#: ../../faq/design.rst:158
msgid ""
"Assignment expressions using the walrus operator ``:=`` assign a variable in "
"an expression::"
msgstr ""
"Выражения присваивания с использованием оператора моржа ``:=`` присваивают "
"переменную в выражении::"

#: ../../faq/design.rst:164
msgid "See :pep:`572` for more information."
msgstr "См. :pep:`572` для получения дополнительной информации."

#: ../../faq/design.rst:169
msgid ""
"Why does Python use methods for some functionality (e.g. list.index()) but "
"functions for other (e.g. len(list))?"
msgstr ""
"Почему Python использует методы для некоторых функций (например, list."
"index()), а функции для других (например, len(list))?"

#: ../../faq/design.rst:171
msgid "As Guido said:"
msgstr "Как сказал Гвидо:"

#: ../../faq/design.rst:173
msgid ""
"(a) For some operations, prefix notation just reads better than postfix -- "
"prefix (and infix!) operations have a long tradition in mathematics which "
"likes notations where the visuals help the mathematician thinking about a "
"problem. Compare the easy with which we rewrite a formula like x*(a+b) into "
"x*a + x*b to the clumsiness of doing the same thing using a raw OO notation."
msgstr ""
"Почему Python использует методы для некоторых функций (например, list."
"index()), а функции для других (например, len(list))?"

#: ../../faq/design.rst:180
msgid ""
"(b) When I read code that says len(x) I *know* that it is asking for the "
"length of something. This tells me two things: the result is an integer, and "
"the argument is some kind of container. To the contrary, when I read x."
"len(), I have to already know that x is some kind of container implementing "
"an interface or inheriting from a class that has a standard len(). Witness "
"the confusion we occasionally have when a class that is not implementing a "
"mapping has a get() or keys() method, or something that isn't a file has a "
"write() method."
msgstr ""
"(б) Когда я читаю код, который говорит len(x), я *знаю*, что он запрашивает "
"длину чего-то. Это говорит мне о двух вещах: результат — целое число, а "
"аргумент — это своего рода контейнер. Напротив, когда я читаю x.len(), я уже "
"должен знать, что x — это своего рода контейнер, реализующий интерфейс или "
"наследуемый от класса, который имеет стандартный len(). Посмотрите, какая "
"путаница иногда возникает, когда класс, не реализующий сопоставление, имеет "
"метод get() илиkeys(), или что-то, не являющееся файлом, имеет метод write()."

#: ../../faq/design.rst:189
msgid "https://mail.python.org/pipermail/python-3000/2006-November/004643.html"
msgstr ""
"https://mail.python.org/pipermail/python-3000/2006-November/004643.html"

#: ../../faq/design.rst:193
msgid "Why is join() a string method instead of a list or tuple method?"
msgstr ""
"Почему join() является строковым методом, а не методом списка или кортежа?"

#: ../../faq/design.rst:195
msgid ""
"Strings became much more like other standard types starting in Python 1.6, "
"when methods were added which give the same functionality that has always "
"been available using the functions of the string module.  Most of these new "
"methods have been widely accepted, but the one which appears to make some "
"programmers feel uncomfortable is::"
msgstr ""
"Строки стали намного больше походить на другие стандартные типы, начиная с "
"Python 1.6, когда были добавлены методы, предоставляющие ту же "
"функциональность, которая всегда была доступна при использовании функций "
"строкового модуля. Большинство из этих новых методов получили широкое "
"признание, но один из них, по-видимому, заставляет некоторых программистов "
"чувствовать себя некомфортно:"

#: ../../faq/design.rst:203
msgid "which gives the result::"
msgstr "что дает результат::"

#: ../../faq/design.rst:207
msgid "There are two common arguments against this usage."
msgstr "Есть два распространенных аргумента против такого использования."

#: ../../faq/design.rst:209
msgid ""
"The first runs along the lines of: \"It looks really ugly using a method of "
"a string literal (string constant)\", to which the answer is that it might, "
"but a string literal is just a fixed value. If the methods are to be allowed "
"on names bound to strings there is no logical reason to make them "
"unavailable on literals."
msgstr ""
"Первый звучит примерно так: «Использование метода строкового литерала "
"(строковой константы) выглядит очень некрасиво», на что ответ таков: "
"возможно, но строковый литерал — это просто фиксированное значение. Если "
"методы должны быть разрешены для имен, связанных со строками, нет никакой "
"логической причины делать их недоступными для литералов."

#: ../../faq/design.rst:215
msgid ""
"The second objection is typically cast as: \"I am really telling a sequence "
"to join its members together with a string constant\".  Sadly, you aren't.  "
"For some reason there seems to be much less difficulty with having :meth:"
"`~str.split` as a string method, since in that case it is easy to see that ::"
msgstr ""
"Второе возражение обычно звучит так: «Я действительно говорю "
"последовательности объединить ее члены с помощью строковой константы». К "
"сожалению, это не так. По какой-то причине кажется, что гораздо меньше "
"сложностей с использованием :meth:`~str.split` в качестве строкового метода, "
"поскольку в этом случае легко увидеть, что::"

#: ../../faq/design.rst:222
msgid ""
"is an instruction to a string literal to return the substrings delimited by "
"the given separator (or, by default, arbitrary runs of white space)."
msgstr ""
"— это инструкция строковому литералу вернуть подстроки, разделенные заданным "
"разделителем (или, по умолчанию, произвольными пробелами)."

#: ../../faq/design.rst:225
msgid ""
":meth:`~str.join` is a string method because in using it you are telling the "
"separator string to iterate over a sequence of strings and insert itself "
"between adjacent elements.  This method can be used with any argument which "
"obeys the rules for sequence objects, including any new classes you might "
"define yourself. Similar methods exist for bytes and bytearray objects."
msgstr ""
":meth:`~str.join` — это строковый метод, поскольку при его использовании вы "
"сообщаете строке-разделителю перебирать последовательность строк и вставлять "
"себя между соседними элементами. Этот метод можно использовать с любым "
"аргументом, который подчиняется правилам для объектов последовательности, "
"включая любые новые классы, которые вы можете определить самостоятельно. "
"Аналогичные методы существуют для объектов bytes и bytearray."

#: ../../faq/design.rst:233
msgid "How fast are exceptions?"
msgstr "Насколько быстро возникают исключения?"

#: ../../faq/design.rst:235
msgid ""
"A try/except block is extremely efficient if no exceptions are raised.  "
"Actually catching an exception is expensive.  In versions of Python prior to "
"2.0 it was common to use this idiom::"
msgstr ""

#: ../../faq/design.rst:245
msgid ""
"This only made sense when you expected the dict to have the key almost all "
"the time.  If that wasn't the case, you coded it like this::"
msgstr ""
"Это имело смысл только в том случае, если вы ожидали, что ключ почти всегда "
"будет у диктанта. Если это не так, вы закодировали это так::"

#: ../../faq/design.rst:253
msgid ""
"For this specific case, you could also use ``value = dict.setdefault(key, "
"getvalue(key))``, but only if the ``getvalue()`` call is cheap enough "
"because it is evaluated in all cases."
msgstr ""
"В этом конкретном случае вы также можете использовать ``value = dict."
"setdefault(key, getvalue(key))``, но только если вызов ``getvalue()`` "
"достаточно дешев, поскольку он вычисляется во всех случаях."

#: ../../faq/design.rst:259
msgid "Why isn't there a switch or case statement in Python?"
msgstr "Почему в Python нет оператора switch или case?"

#: ../../faq/design.rst:261
msgid ""
"In general, structured switch statements execute one block of code when an "
"expression has a particular value or set of values. Since Python 3.10 one "
"can easily match literal values, or constants within a namespace, with a "
"``match ... case`` statement. An older alternative is a sequence of ``if... "
"elif... elif... else``."
msgstr ""
"Как правило, структурированные операторы переключения выполняют один блок "
"кода, когда выражение имеет определенное значение или набор значений. "
"Начиная с Python 3.10, можно легко сопоставить литеральные значения или "
"константы в пространстве имен с помощью оператора match...case. Более старая "
"альтернатива — это последовательность ``if... elif... elif... else``."

#: ../../faq/design.rst:267
msgid ""
"For cases where you need to choose from a very large number of "
"possibilities, you can create a dictionary mapping case values to functions "
"to call.  For example::"
msgstr ""
"В случаях, когда вам нужно выбирать из очень большого количества "
"возможностей, вы можете создать словарь, сопоставляющий значения вариантов с "
"вызываемыми функциями. Например::"

#: ../../faq/design.rst:278
msgid ""
"For calling methods on objects, you can simplify yet further by using the :"
"func:`getattr` built-in to retrieve methods with a particular name::"
msgstr ""
"Вызов методов объектов можно еще больше упростить, используя встроенную "
"функцию :func:`getattr` для получения методов с определенным именем::"

#: ../../faq/design.rst:290
msgid ""
"It's suggested that you use a prefix for the method names, such as "
"``visit_`` in this example.  Without such a prefix, if values are coming "
"from an untrusted source, an attacker would be able to call any method on "
"your object."
msgstr ""
"Предлагается использовать префикс для имен методов, например «visit_» в этом "
"примере. Без такого префикса, если значения поступают из ненадежного "
"источника, злоумышленник сможет вызвать любой метод вашего объекта."

#: ../../faq/design.rst:294
msgid ""
"Imitating switch with fallthrough, as with C's switch-case-default, is "
"possible, much harder, and less needed."
msgstr ""
"Имитация переключения с провалом, как в случае с switch-case-default в C, "
"возможна, гораздо сложнее и менее необходима."

#: ../../faq/design.rst:299
msgid ""
"Can't you emulate threads in the interpreter instead of relying on an OS-"
"specific thread implementation?"
msgstr ""
"Разве вы не можете эмулировать потоки в интерпретаторе вместо того, чтобы "
"полагаться на реализацию потоков, специфичную для ОС?"

#: ../../faq/design.rst:301
msgid ""
"Answer 1: Unfortunately, the interpreter pushes at least one C stack frame "
"for each Python stack frame.  Also, extensions can call back into Python at "
"almost random moments.  Therefore, a complete threads implementation "
"requires thread support for C."
msgstr ""
"Ответ 1: К сожалению, интерпретатор помещает как минимум один кадр стека C "
"для каждого кадра стека Python. Кроме того, расширения могут вызывать Python "
"почти в случайные моменты. Таким образом, полная реализация потоков требует "
"поддержки потоков для C."

#: ../../faq/design.rst:306
msgid ""
"Answer 2: Fortunately, there is `Stackless Python <https://github.com/"
"stackless-dev/stackless/wiki>`_, which has a completely redesigned "
"interpreter loop that avoids the C stack."
msgstr ""
"Ответ 2: К счастью, существует `Stackless Python <https://github.com/"
"stackless-dev/stackless/wiki>`_, который имеет полностью переработанный цикл "
"интерпретатора, позволяющий избежать использования стека C."

#: ../../faq/design.rst:311
msgid "Why can't lambda expressions contain statements?"
msgstr "Почему лямбда-выражения не могут содержать операторы?"

#: ../../faq/design.rst:313
msgid ""
"Python lambda expressions cannot contain statements because Python's "
"syntactic framework can't handle statements nested inside expressions.  "
"However, in Python, this is not a serious problem.  Unlike lambda forms in "
"other languages, where they add functionality, Python lambdas are only a "
"shorthand notation if you're too lazy to define a function."
msgstr ""
"Лямбда-выражения Python не могут содержать операторы, поскольку "
"синтаксическая структура Python не может обрабатывать операторы, вложенные "
"внутри выражений. Однако в Python это не является серьёзной проблемой. В "
"отличие от лямбда-форм в других языках, где они добавляют функциональности, "
"лямбда-выражения Python — это всего лишь сокращенная запись, если вам лень "
"определять функцию."

#: ../../faq/design.rst:319
msgid ""
"Functions are already first class objects in Python, and can be declared in "
"a local scope.  Therefore the only advantage of using a lambda instead of a "
"locally defined function is that you don't need to invent a name for the "
"function -- but that's just a local variable to which the function object "
"(which is exactly the same type of object that a lambda expression yields) "
"is assigned!"
msgstr ""
"Функции уже являются объектами первого класса в Python и могут быть "
"объявлены в локальной области. Поэтому единственное преимущество "
"использования лямбды вместо локально определенной функции заключается в том, "
"что вам не нужно придумывать имя для функции, а это просто локальная "
"переменная, к которой относится объект функции (который представляет собой "
"объект точно такого же типа). что дает лямбда-выражение) присваивается!"

#: ../../faq/design.rst:327
msgid "Can Python be compiled to machine code, C or some other language?"
msgstr ""
"Можно ли скомпилировать Python в машинный код, C или какой-либо другой язык?"

#: ../../faq/design.rst:329
msgid ""
"`Cython <https://cython.org/>`_ compiles a modified version of Python with "
"optional annotations into C extensions.  `Nuitka <https://www.nuitka.net/>`_ "
"is an up-and-coming compiler of Python into C++ code, aiming to support the "
"full Python language."
msgstr ""

#: ../../faq/design.rst:336
msgid "How does Python manage memory?"
msgstr "Как Python управляет памятью?"

#: ../../faq/design.rst:338
msgid ""
"The details of Python memory management depend on the implementation.  The "
"standard implementation of Python, :term:`CPython`, uses reference counting "
"to detect inaccessible objects, and another mechanism to collect reference "
"cycles, periodically executing a cycle detection algorithm which looks for "
"inaccessible cycles and deletes the objects involved. The :mod:`gc` module "
"provides functions to perform a garbage collection, obtain debugging "
"statistics, and tune the collector's parameters."
msgstr ""
"Детали управления памятью Python зависят от реализации. Стандартная "
"реализация Python, :term:`CPython`, использует подсчет ссылок для "
"обнаружения недоступных объектов и другой механизм для сбора ссылочных "
"циклов, периодически выполняя алгоритм обнаружения циклов, который ищет "
"недоступные циклы и удаляет задействованные объекты. Модуль :mod:`gc` "
"предоставляет функции для выполнения сборки мусора, получения статистики "
"отладки и настройки параметров сборщика."

#: ../../faq/design.rst:346
msgid ""
"Other implementations (such as `Jython <https://www.jython.org>`_ or `PyPy "
"<https://www.pypy.org>`_), however, can rely on a different mechanism such "
"as a full-blown garbage collector.  This difference can cause some subtle "
"porting problems if your Python code depends on the behavior of the "
"reference counting implementation."
msgstr ""

#: ../../faq/design.rst:352
msgid ""
"In some Python implementations, the following code (which is fine in "
"CPython) will probably run out of file descriptors::"
msgstr ""
"В некоторых реализациях Python в следующем коде (который подходит для "
"CPython), вероятно, не хватит файловых дескрипторов:"

#: ../../faq/design.rst:359
msgid ""
"Indeed, using CPython's reference counting and destructor scheme, each new "
"assignment to *f* closes the previous file.  With a traditional GC, however, "
"those file objects will only get collected (and closed) at varying and "
"possibly long intervals."
msgstr ""

#: ../../faq/design.rst:364
msgid ""
"If you want to write code that will work with any Python implementation, you "
"should explicitly close the file or use the :keyword:`with` statement; this "
"will work regardless of memory management scheme::"
msgstr ""
"Если вы хотите написать код, который будет работать с любой реализацией "
"Python, вам следует явно закрыть файл или использовать оператор :keyword:"
"`with`; это будет работать независимо от схемы управления памятью::"

#: ../../faq/design.rst:374
msgid "Why doesn't CPython use a more traditional garbage collection scheme?"
msgstr "Почему CPython не использует более традиционную схему сборки мусора?"

#: ../../faq/design.rst:376
msgid ""
"For one thing, this is not a C standard feature and hence it's not portable. "
"(Yes, we know about the Boehm GC library.  It has bits of assembler code for "
"*most* common platforms, not for all of them, and although it is mostly "
"transparent, it isn't completely transparent; patches are required to get "
"Python to work with it.)"
msgstr ""
"Во-первых, это не стандартная функция C и, следовательно, ее нельзя "
"переносить. (Да, мы знаем о библиотеке Boehm GC. В ней есть фрагменты "
"ассемблерного кода для *большинства* распространенных платформ, а не для "
"всех, и хотя она в основном прозрачна, она не полностью прозрачна; для "
"установки Python требуются патчи. работать с ним.)"

#: ../../faq/design.rst:382
msgid ""
"Traditional GC also becomes a problem when Python is embedded into other "
"applications.  While in a standalone Python it's fine to replace the "
"standard malloc() and free() with versions provided by the GC library, an "
"application embedding Python may want to have its *own* substitute for "
"malloc() and free(), and may not want Python's.  Right now, CPython works "
"with anything that implements malloc() and free() properly."
msgstr ""

#: ../../faq/design.rst:391
msgid "Why isn't all memory freed when CPython exits?"
msgstr "Почему не вся память освобождается при выходе из CPython?"

#: ../../faq/design.rst:393
msgid ""
"Objects referenced from the global namespaces of Python modules are not "
"always deallocated when Python exits.  This may happen if there are circular "
"references.  There are also certain bits of memory that are allocated by the "
"C library that are impossible to free (e.g. a tool like Purify will complain "
"about these).  Python is, however, aggressive about cleaning up memory on "
"exit and does try to destroy every single object."
msgstr ""
"Объекты, на которые ссылаются глобальные пространства имен модулей Python, "
"не всегда освобождаются при выходе Python. Это может произойти, если есть "
"циклические ссылки. Существуют также определенные биты памяти, выделенные "
"библиотекой C, которые невозможно освободить (например, такой инструмент, "
"как Purify, будет жаловаться на это). Однако Python агрессивно очищает "
"память при выходе и пытается уничтожить каждый объект."

#: ../../faq/design.rst:400
msgid ""
"If you want to force Python to delete certain things on deallocation use "
"the :mod:`atexit` module to run a function that will force those deletions."
msgstr ""
"Если вы хотите заставить Python удалить определенные объекты при "
"освобождении, используйте модуль :mod:`atexit` для запуска функции, которая "
"будет принудительно выполнять эти удаления."

#: ../../faq/design.rst:405
msgid "Why are there separate tuple and list data types?"
msgstr "Почему существуют отдельные типы данных кортежа и списка?"

#: ../../faq/design.rst:407
msgid ""
"Lists and tuples, while similar in many respects, are generally used in "
"fundamentally different ways.  Tuples can be thought of as being similar to "
"Pascal records or C structs; they're small collections of related data which "
"may be of different types which are operated on as a group.  For example, a "
"Cartesian coordinate is appropriately represented as a tuple of two or three "
"numbers."
msgstr ""

#: ../../faq/design.rst:414
msgid ""
"Lists, on the other hand, are more like arrays in other languages.  They "
"tend to hold a varying number of objects all of which have the same type and "
"which are operated on one-by-one.  For example, ``os.listdir('.')`` returns "
"a list of strings representing the files in the current directory.  "
"Functions which operate on this output would generally not break if you "
"added another file or two to the directory."
msgstr ""

#: ../../faq/design.rst:421
msgid ""
"Tuples are immutable, meaning that once a tuple has been created, you can't "
"replace any of its elements with a new value.  Lists are mutable, meaning "
"that you can always change a list's elements.  Only immutable elements can "
"be used as dictionary keys, and hence only tuples and not lists can be used "
"as keys."
msgstr ""
"Кортежи неизменяемы. Это означает, что после создания кортежа вы не сможете "
"заменить ни один из его элементов новым значением. Списки изменяемы, что "
"означает, что вы всегда можете изменить элементы списка. В качестве ключей "
"словаря можно использовать только неизменяемые элементы, и, следовательно, в "
"качестве ключей можно использовать только кортежи, а не списки."

#: ../../faq/design.rst:428
msgid "How are lists implemented in CPython?"
msgstr "Как списки реализованы в CPython?"

#: ../../faq/design.rst:430
msgid ""
"CPython's lists are really variable-length arrays, not Lisp-style linked "
"lists. The implementation uses a contiguous array of references to other "
"objects, and keeps a pointer to this array and the array's length in a list "
"head structure."
msgstr ""
"Списки CPython на самом деле представляют собой массивы переменной длины, а "
"не связанные списки в стиле Lisp. Реализация использует непрерывный массив "
"ссылок на другие объекты и сохраняет указатель на этот массив и длину "
"массива в структуре заголовка списка."

#: ../../faq/design.rst:434
msgid ""
"This makes indexing a list ``a[i]`` an operation whose cost is independent "
"of the size of the list or the value of the index."
msgstr ""
"Это делает индексацию списка ``a[i]`` операцией, стоимость которой не "
"зависит от размера списка или значения индекса."

#: ../../faq/design.rst:437
msgid ""
"When items are appended or inserted, the array of references is resized.  "
"Some cleverness is applied to improve the performance of appending items "
"repeatedly; when the array must be grown, some extra space is allocated so "
"the next few times don't require an actual resize."
msgstr ""
"Когда элементы добавляются или вставляются, размер массива ссылок "
"изменяется. Некоторая хитрость применена для повышения производительности "
"многократного добавления элементов; когда массив необходимо увеличить, "
"выделяется некоторое дополнительное пространство, поэтому в следующие "
"несколько раз фактического изменения размера не потребуется."

#: ../../faq/design.rst:444
msgid "How are dictionaries implemented in CPython?"
msgstr "Как словари реализованы в CPython?"

#: ../../faq/design.rst:446
msgid ""
"CPython's dictionaries are implemented as resizable hash tables.  Compared "
"to B-trees, this gives better performance for lookup (the most common "
"operation by far) under most circumstances, and the implementation is "
"simpler."
msgstr ""
"Словари CPython реализованы в виде хеш-таблиц изменяемого размера. По "
"сравнению с B-деревьями это обеспечивает более высокую производительность "
"поиска (самая распространенная операция) в большинстве случаев, а реализация "
"проще."

#: ../../faq/design.rst:450
msgid ""
"Dictionaries work by computing a hash code for each key stored in the "
"dictionary using the :func:`hash` built-in function.  The hash code varies "
"widely depending on the key and a per-process seed; for example, \"Python\" "
"could hash to -539294296 while \"python\", a string that differs by a single "
"bit, could hash to 1142331976.  The hash code is then used to calculate a "
"location in an internal array where the value will be stored.  Assuming that "
"you're storing keys that all have different hash values, this means that "
"dictionaries take constant time -- *O*\\ (1), in Big-O notation -- to "
"retrieve a key."
msgstr ""

#: ../../faq/design.rst:461
msgid "Why must dictionary keys be immutable?"
msgstr "Почему ключи словаря должны быть неизменяемыми?"

#: ../../faq/design.rst:463
msgid ""
"The hash table implementation of dictionaries uses a hash value calculated "
"from the key value to find the key.  If the key were a mutable object, its "
"value could change, and thus its hash could also change.  But since whoever "
"changes the key object can't tell that it was being used as a dictionary "
"key, it can't move the entry around in the dictionary.  Then, when you try "
"to look up the same object in the dictionary it won't be found because its "
"hash value is different. If you tried to look up the old value it wouldn't "
"be found either, because the value of the object found in that hash bin "
"would be different."
msgstr ""
"Реализация хэш-таблицы словарей использует хеш-значение, рассчитанное на "
"основе значения ключа, для поиска ключа. Если бы ключ был изменяемым "
"объектом, его значение могло бы измениться, и, следовательно, его хеш также "
"мог бы измениться. Но поскольку тот, кто меняет ключевой объект, не может "
"определить, что он использовался в качестве ключа словаря, он не может "
"перемещать запись в словаре. Затем, когда вы попытаетесь найти тот же объект "
"в словаре, он не будет найден, поскольку его хэш-значение отличается. Если "
"бы вы попытались найти старое значение, оно также не было бы найдено, "
"поскольку значение объекта, найденного в этом хеш-корзине, было бы другим."

#: ../../faq/design.rst:472
msgid ""
"If you want a dictionary indexed with a list, simply convert the list to a "
"tuple first; the function ``tuple(L)`` creates a tuple with the same entries "
"as the list ``L``.  Tuples are immutable and can therefore be used as "
"dictionary keys."
msgstr ""
"Если вы хотите, чтобы словарь индексировался со списком, просто сначала "
"преобразуйте список в кортеж; функция ``tuple(L)`` создает кортеж с теми же "
"записями, что и список ``L``. Кортежи неизменяемы и поэтому могут "
"использоваться в качестве ключей словаря."

#: ../../faq/design.rst:476
msgid "Some unacceptable solutions that have been proposed:"
msgstr "Некоторые неприемлемые решения, которые были предложены:"

#: ../../faq/design.rst:478
msgid ""
"Hash lists by their address (object ID).  This doesn't work because if you "
"construct a new list with the same value it won't be found; e.g.::"
msgstr ""
"Хэш-листы по их адресу (идентификатору объекта). Это не работает, потому что "
"если вы создадите новый список с тем же значением, он не будет найден; "
"например::"

#: ../../faq/design.rst:484
msgid ""
"would raise a :exc:`KeyError` exception because the id of the ``[1, 2]`` "
"used in the second line differs from that in the first line.  In other "
"words, dictionary keys should be compared using ``==``, not using :keyword:"
"`is`."
msgstr ""
"вызовет исключение :exc:`KeyError`, поскольку идентификатор ``[1, 2]``, "
"используемый во второй строке, отличается от идентификатора в первой строке. "
"Другими словами, ключи словаря следует сравнивать с использованием ``==``, а "
"не с использованием :keyword:`is`."

#: ../../faq/design.rst:488
msgid ""
"Make a copy when using a list as a key.  This doesn't work because the list, "
"being a mutable object, could contain a reference to itself, and then the "
"copying code would run into an infinite loop."
msgstr ""
"Сделайте копию при использовании списка в качестве ключа. Это не работает, "
"поскольку список, будучи изменяемым объектом, может содержать ссылку на "
"самого себя, и тогда код копирования запустится в бесконечный цикл."

#: ../../faq/design.rst:492
msgid ""
"Allow lists as keys but tell the user not to modify them.  This would allow "
"a class of hard-to-track bugs in programs when you forgot or modified a list "
"by accident. It also invalidates an important invariant of dictionaries: "
"every value in ``d.keys()`` is usable as a key of the dictionary."
msgstr ""
"Разрешите списки в качестве ключей, но попросите пользователя не изменять "
"их. Это позволило бы выявить класс трудно отслеживаемых ошибок в программах, "
"когда вы случайно забыли или изменили список. Это также делает "
"недействительным важный инвариант словарей: каждое значение в d.keys() можно "
"использовать в качестве ключа словаря."

#: ../../faq/design.rst:497
msgid ""
"Mark lists as read-only once they are used as a dictionary key.  The problem "
"is that it's not just the top-level object that could change its value; you "
"could use a tuple containing a list as a key.  Entering anything as a key "
"into a dictionary would require marking all objects reachable from there as "
"read-only -- and again, self-referential objects could cause an infinite "
"loop."
msgstr ""
"Помечайте списки как доступные только для чтения, если они используются в "
"качестве ключа словаря. Проблема в том, что не только объект верхнего уровня "
"может изменить свое значение; вы можете использовать кортеж, содержащий "
"список, в качестве ключа. Ввод чего-либо в качестве ключа в словарь "
"потребует пометки всех доступных оттуда объектов как доступных только для "
"чтения — и опять же, самоссылающиеся объекты могут вызвать бесконечный цикл."

#: ../../faq/design.rst:503
msgid ""
"There is a trick to get around this if you need to, but use it at your own "
"risk: You can wrap a mutable structure inside a class instance which has "
"both a :meth:`__eq__` and a :meth:`__hash__` method.  You must then make "
"sure that the hash value for all such wrapper objects that reside in a "
"dictionary (or other hash based structure), remain fixed while the object is "
"in the dictionary (or other structure). ::"
msgstr ""

#: ../../faq/design.rst:527
msgid ""
"Note that the hash computation is complicated by the possibility that some "
"members of the list may be unhashable and also by the possibility of "
"arithmetic overflow."
msgstr ""
"Обратите внимание, что вычисление хэша осложняется возможностью того, что "
"некоторые члены списка могут быть нехешируемыми, а также возможностью "
"арифметического переполнения."

#: ../../faq/design.rst:531
msgid ""
"Furthermore it must always be the case that if ``o1 == o2`` (ie ``o1."
"__eq__(o2) is True``) then ``hash(o1) == hash(o2)`` (ie, ``o1.__hash__() == "
"o2.__hash__()``), regardless of whether the object is in a dictionary or "
"not.  If you fail to meet these restrictions dictionaries and other hash "
"based structures will misbehave."
msgstr ""
"Более того, всегда должно быть так, что если ``o1 == o2`` (т.е. ``o1."
"__eq__(o2) равно True``), то ``hash(o1) == hash(o2)`` (т.е. ``o1.__hash__() "
"== o2.__hash__()``), независимо от того, находится ли объект в словаре или "
"нет. Если вы не соблюли эти ограничения, словари и другие хэш-структуры "
"будут работать неправильно."

#: ../../faq/design.rst:536
msgid ""
"In the case of ListWrapper, whenever the wrapper object is in a dictionary "
"the wrapped list must not change to avoid anomalies.  Don't do this unless "
"you are prepared to think hard about the requirements and the consequences "
"of not meeting them correctly.  Consider yourself warned."
msgstr ""

#: ../../faq/design.rst:543
msgid "Why doesn't list.sort() return the sorted list?"
msgstr "Почему list.sort() не возвращает отсортированный список?"

#: ../../faq/design.rst:545
msgid ""
"In situations where performance matters, making a copy of the list just to "
"sort it would be wasteful. Therefore, :meth:`list.sort` sorts the list in "
"place. In order to remind you of that fact, it does not return the sorted "
"list.  This way, you won't be fooled into accidentally overwriting a list "
"when you need a sorted copy but also need to keep the unsorted version "
"around."
msgstr ""
"В ситуациях, когда производительность имеет значение, создание копии списка "
"только для его сортировки было бы расточительством. Таким образом, :meth:"
"`list.sort` сортирует список на месте. Чтобы напомнить вам об этом факте, он "
"не возвращает отсортированный список. Таким образом, вы не будете обмануты, "
"случайно перезаписав список, когда вам нужна отсортированная копия, но вам "
"также необходимо сохранить неотсортированную версию."

#: ../../faq/design.rst:551
msgid ""
"If you want to return a new list, use the built-in :func:`sorted` function "
"instead.  This function creates a new list from a provided iterable, sorts "
"it and returns it.  For example, here's how to iterate over the keys of a "
"dictionary in sorted order::"
msgstr ""
"Если вы хотите вернуть новый список, используйте вместо этого встроенную "
"функцию :func:`sorted`. Эта функция создает новый список из предоставленной "
"итерации, сортирует его и возвращает. Например, вот как перебирать ключи "
"словаря в отсортированном порядке:"

#: ../../faq/design.rst:561
msgid "How do you specify and enforce an interface spec in Python?"
msgstr "Как указать и обеспечить соблюдение спецификации интерфейса в Python?"

#: ../../faq/design.rst:563
msgid ""
"An interface specification for a module as provided by languages such as C++ "
"and Java describes the prototypes for the methods and functions of the "
"module.  Many feel that compile-time enforcement of interface specifications "
"helps in the construction of large programs."
msgstr ""
"Спецификация интерфейса модуля, предоставляемая такими языками, как C++ и "
"Java, описывает прототипы методов и функций модуля. Многие считают, что "
"соблюдение спецификаций интерфейса во время компиляции помогает при создании "
"больших программ."

#: ../../faq/design.rst:568
msgid ""
"Python 2.6 adds an :mod:`abc` module that lets you define Abstract Base "
"Classes (ABCs).  You can then use :func:`isinstance` and :func:`issubclass` "
"to check whether an instance or a class implements a particular ABC.  The :"
"mod:`collections.abc` module defines a set of useful ABCs such as :class:"
"`~collections.abc.Iterable`, :class:`~collections.abc.Container`, and :class:"
"`~collections.abc.MutableMapping`."
msgstr ""
"В Python 2.6 добавлен модуль :mod:`abc`, который позволяет определять "
"абстрактные базовые классы (ABC). Затем вы можете использовать :func:"
"`isinstance` и :func:`issubclass`, чтобы проверить, реализует ли экземпляр "
"или класс определенный ABC. Модуль :mod:`collections.abc` определяет набор "
"полезных ABC, таких как :class:`~collections.abc.Iterable`, :class:"
"`~collections.abc.Container` и :class:`~collections. abc.MutableMapping`."

#: ../../faq/design.rst:575
msgid ""
"For Python, many of the advantages of interface specifications can be "
"obtained by an appropriate test discipline for components."
msgstr ""
"Для Python многие преимущества спецификаций интерфейсов могут быть получены "
"за счет соответствующей дисциплины тестирования компонентов."

#: ../../faq/design.rst:578
msgid ""
"A good test suite for a module can both provide a regression test and serve "
"as a module interface specification and a set of examples.  Many Python "
"modules can be run as a script to provide a simple \"self test.\"  Even "
"modules which use complex external interfaces can often be tested in "
"isolation using trivial \"stub\" emulations of the external interface.  The :"
"mod:`doctest` and :mod:`unittest` modules or third-party test frameworks can "
"be used to construct exhaustive test suites that exercise every line of code "
"in a module."
msgstr ""
"Хороший набор тестов для модуля может служить как регрессионным тестом, так "
"и спецификацией интерфейса модуля и набором примеров. Многие модули Python "
"можно запускать как сценарии для обеспечения простого «самотестирования». "
"Даже модули, использующие сложные внешние интерфейсы, часто можно "
"тестировать изолированно, используя тривиальную «заглушку» эмуляции внешнего "
"интерфейса. Модули :mod:`doctest` и :mod:`unittest` или сторонние среды "
"тестирования можно использовать для создания исчерпывающих наборов тестов, "
"которые проверяют каждую строку кода в модуле."

#: ../../faq/design.rst:586
msgid ""
"An appropriate testing discipline can help build large complex applications "
"in Python as well as having interface specifications would.  In fact, it can "
"be better because an interface specification cannot test certain properties "
"of a program.  For example, the :meth:`!list.append` method is expected to "
"add new elements to the end of some internal list; an interface "
"specification cannot test that your :meth:`!list.append` implementation will "
"actually do this correctly, but it's trivial to check this property in a "
"test suite."
msgstr ""
"Соответствующая дисциплина тестирования может помочь создавать большие "
"сложные приложения на Python, а также иметь спецификации интерфейса. На "
"самом деле, это может быть лучше, поскольку спецификация интерфейса не может "
"проверять определенные свойства программы. Например, ожидается, что метод :"
"meth:`!list.append` добавит новые элементы в конец некоторого внутреннего "
"списка; спецификация интерфейса не может проверить, что ваша реализация :"
"meth:`!list.append` действительно сделает это правильно, но проверить это "
"свойство в наборе тестов очень просто."

#: ../../faq/design.rst:594
msgid ""
"Writing test suites is very helpful, and you might want to design your code "
"to make it easily tested. One increasingly popular technique, test-driven "
"development, calls for writing parts of the test suite first, before you "
"write any of the actual code.  Of course Python allows you to be sloppy and "
"not write test cases at all."
msgstr ""
"Написание наборов тестов очень полезно, и вы, возможно, захотите "
"спроектировать свой код так, чтобы его можно было легко тестировать. Один из "
"все более популярных методов — разработка через тестирование — требует "
"сначала написания частей набора тестов, прежде чем писать какой-либо "
"реальный код. Конечно, Python позволяет вам быть небрежным и вообще не "
"писать тестовые примеры."

#: ../../faq/design.rst:602
msgid "Why is there no goto?"
msgstr "Почему нет перехода?"

#: ../../faq/design.rst:604
msgid ""
"In the 1970s people realized that unrestricted goto could lead to messy "
"\"spaghetti\" code that was hard to understand and revise. In a high-level "
"language, it is also unneeded as long as there are ways to branch (in "
"Python, with ``if`` statements and ``or``, ``and``, and ``if-else`` "
"expressions) and loop (with ``while`` and ``for`` statements, possibly "
"containing ``continue`` and ``break``)."
msgstr ""

#: ../../faq/design.rst:611
msgid ""
"One can also use exceptions to provide a \"structured goto\" that works even "
"across function calls.  Many feel that exceptions can conveniently emulate "
"all reasonable uses of the \"go\" or \"goto\" constructs of C, Fortran, and "
"other languages.  For example::"
msgstr ""

#: ../../faq/design.rst:627
msgid ""
"This doesn't allow you to jump into the middle of a loop, but that's usually "
"considered an abuse of goto anyway.  Use sparingly."
msgstr ""

#: ../../faq/design.rst:632
msgid "Why can't raw strings (r-strings) end with a backslash?"
msgstr ""
"Почему необработанные строки (r-строки) не могут заканчиваться обратной "
"косой чертой?"

#: ../../faq/design.rst:634
msgid ""
"More precisely, they can't end with an odd number of backslashes: the "
"unpaired backslash at the end escapes the closing quote character, leaving "
"an unterminated string."
msgstr ""
"Точнее, они не могут заканчиваться нечетным количеством обратных косых черт: "
"непарная обратная косая черта в конце экранирует символ закрывающей кавычки, "
"оставляя незавершенную строку."

#: ../../faq/design.rst:638
msgid ""
"Raw strings were designed to ease creating input for processors (chiefly "
"regular expression engines) that want to do their own backslash escape "
"processing. Such processors consider an unmatched trailing backslash to be "
"an error anyway, so raw strings disallow that.  In return, they allow you to "
"pass on the string quote character by escaping it with a backslash.  These "
"rules work well when r-strings are used for their intended purpose."
msgstr ""
"Необработанные строки были разработаны для облегчения создания входных "
"данных для процессоров (в основном механизмов регулярных выражений), которые "
"хотят выполнять собственную обработку escape-слеша. Такие процессоры в любом "
"случае считают несовпадающую обратную косую черту ошибкой, поэтому "
"необработанные строки это не допускают. В свою очередь, они позволяют вам "
"передавать символ строковой кавычки, экранируя его обратной косой чертой. "
"Эти правила хорошо работают, когда r-строки используются по назначению."

#: ../../faq/design.rst:645
msgid ""
"If you're trying to build Windows pathnames, note that all Windows system "
"calls accept forward slashes too::"
msgstr ""
"Если вы пытаетесь создать пути Windows, обратите внимание, что все системные "
"вызовы Windows также принимают косую черту::"

#: ../../faq/design.rst:650
msgid ""
"If you're trying to build a pathname for a DOS command, try e.g. one of ::"
msgstr ""
"Если вы пытаетесь создать путь для команды DOS, попробуйте, например, один "
"из ::"

#: ../../faq/design.rst:658
msgid "Why doesn't Python have a \"with\" statement for attribute assignments?"
msgstr "Почему в Python нет оператора «with» для назначения атрибутов?"

#: ../../faq/design.rst:660
msgid ""
"Python has a 'with' statement that wraps the execution of a block, calling "
"code on the entrance and exit from the block.  Some languages have a "
"construct that looks like this::"
msgstr ""

#: ../../faq/design.rst:668
msgid "In Python, such a construct would be ambiguous."
msgstr "В Python такая конструкция была бы неоднозначной."

#: ../../faq/design.rst:670
msgid ""
"Other languages, such as Object Pascal, Delphi, and C++, use static types, "
"so it's possible to know, in an unambiguous way, what member is being "
"assigned to. This is the main point of static typing -- the compiler "
"*always* knows the scope of every variable at compile time."
msgstr ""
"Другие языки, такие как Object Pascal, Delphi и C++, используют статические "
"типы, поэтому можно однозначно узнать, какому члену присваивается значение. "
"Это основной момент статической типизации — компилятор *всегда* знает "
"область действия каждой переменной во время компиляции."

#: ../../faq/design.rst:675
msgid ""
"Python uses dynamic types. It is impossible to know in advance which "
"attribute will be referenced at runtime. Member attributes may be added or "
"removed from objects on the fly. This makes it impossible to know, from a "
"simple reading, what attribute is being referenced: a local one, a global "
"one, or a member attribute?"
msgstr ""
"Python использует динамические типы. Невозможно заранее знать, на какой "
"атрибут будет ссылаться во время выполнения. Атрибуты членов можно добавлять "
"или удалять из объектов «на лету». Это делает невозможным путем простого "
"чтения определить, на какой атрибут ссылаются: локальный, глобальный или "
"атрибут-член?"

#: ../../faq/design.rst:681
msgid "For instance, take the following incomplete snippet::"
msgstr "Например, возьмите следующий неполный фрагмент:"

#: ../../faq/design.rst:687
msgid ""
"The snippet assumes that \"a\" must have a member attribute called \"x\".  "
"However, there is nothing in Python that tells the interpreter this. What "
"should happen if \"a\" is, let us say, an integer?  If there is a global "
"variable named \"x\", will it be used inside the with block?  As you see, "
"the dynamic nature of Python makes such choices much harder."
msgstr ""

#: ../../faq/design.rst:693
msgid ""
"The primary benefit of \"with\" and similar language features (reduction of "
"code volume) can, however, easily be achieved in Python by assignment.  "
"Instead of::"
msgstr ""

#: ../../faq/design.rst:700
msgid "write this::"
msgstr "напиши это::"

#: ../../faq/design.rst:707
msgid ""
"This also has the side-effect of increasing execution speed because name "
"bindings are resolved at run-time in Python, and the second version only "
"needs to perform the resolution once."
msgstr ""
"Это также имеет побочный эффект увеличения скорости выполнения, поскольку "
"привязки имен разрешаются во время выполнения в Python, а второй версии "
"требуется выполнить разрешение только один раз."

#: ../../faq/design.rst:713
msgid "Why don't generators support the with statement?"
msgstr "Почему генераторы не поддерживают оператор with?"

#: ../../faq/design.rst:715
msgid ""
"For technical reasons, a generator used directly as a context manager would "
"not work correctly.  When, as is most common, a generator is used as an "
"iterator run to completion, no closing is needed.  When it is, wrap it as "
"\"contextlib.closing(generator)\" in the 'with' statement."
msgstr ""

#: ../../faq/design.rst:722
msgid "Why are colons required for the if/while/def/class statements?"
msgstr "Почему для операторов if/ while/def/class требуются двоеточия?"

#: ../../faq/design.rst:724
msgid ""
"The colon is required primarily to enhance readability (one of the results "
"of the experimental ABC language).  Consider this::"
msgstr ""
"Двоеточие требуется в первую очередь для улучшения читаемости (один из "
"результатов экспериментального языка ABC). Подумайте об этом:"

#: ../../faq/design.rst:730
msgid "versus ::"
msgstr "против ::"

#: ../../faq/design.rst:735
msgid ""
"Notice how the second one is slightly easier to read.  Notice further how a "
"colon sets off the example in this FAQ answer; it's a standard usage in "
"English."
msgstr ""
"Обратите внимание, что второй вариант читается немного легче. Обратите "
"внимание, как двоеточие выделяет пример в этом ответе на часто задаваемые "
"вопросы; это стандартное употребление в английском языке."

#: ../../faq/design.rst:738
msgid ""
"Another minor reason is that the colon makes it easier for editors with "
"syntax highlighting; they can look for colons to decide when indentation "
"needs to be increased instead of having to do a more elaborate parsing of "
"the program text."
msgstr ""
"Другая незначительная причина заключается в том, что двоеточие упрощает "
"работу редакторов с подсветкой синтаксиса; они могут искать двоеточия, чтобы "
"решить, когда необходимо увеличить отступ, вместо того, чтобы выполнять "
"более сложный анализ текста программы."

#: ../../faq/design.rst:744
msgid "Why does Python allow commas at the end of lists and tuples?"
msgstr "Почему Python допускает запятые в конце списков и кортежей?"

#: ../../faq/design.rst:746
msgid ""
"Python lets you add a trailing comma at the end of lists, tuples, and "
"dictionaries::"
msgstr ""
"Python позволяет добавлять запятую в конце списков, кортежей и словарей:"

#: ../../faq/design.rst:757
msgid "There are several reasons to allow this."
msgstr "Есть несколько причин позволить это."

#: ../../faq/design.rst:759
msgid ""
"When you have a literal value for a list, tuple, or dictionary spread across "
"multiple lines, it's easier to add more elements because you don't have to "
"remember to add a comma to the previous line.  The lines can also be "
"reordered without creating a syntax error."
msgstr ""
"Если у вас есть буквальное значение для списка, кортежа или словаря, "
"распределенное по нескольким строкам, проще добавить больше элементов, "
"поскольку вам не нужно помнить о добавлении запятой в предыдущую строку. "
"Строки также можно переупорядочить, не создавая синтаксической ошибки."

#: ../../faq/design.rst:764
msgid ""
"Accidentally omitting the comma can lead to errors that are hard to "
"diagnose. For example::"
msgstr ""
"Случайный пропуск запятой может привести к ошибкам, которые трудно "
"диагностировать. Например::"

#: ../../faq/design.rst:774
msgid ""
"This list looks like it has four elements, but it actually contains three: "
"\"fee\", \"fiefoo\" and \"fum\".  Always adding the comma avoids this source "
"of error."
msgstr ""
"Кажется, что этот список состоит из четырех элементов, но на самом деле он "
"содержит три: «плата», «фифу» и «фум». Всегдае добавление запятой позволяет "
"избежать этого источника ошибок."

#: ../../faq/design.rst:777
msgid ""
"Allowing the trailing comma may also make programmatic code generation "
"easier."
msgstr ""
"Разрешение завершающей запятой также может упростить генерацию программного "
"кода."
