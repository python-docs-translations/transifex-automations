# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../faq/windows.rst:9
msgid "Python on Windows FAQ"
msgstr "Python в Windows: часто задаваемые вопросы"

#: ../../faq/windows.rst:12
msgid "Contents"
msgstr " Содержание"

#: ../../faq/windows.rst:22
msgid "How do I run a Python program under Windows?"
msgstr "Как запустить программу Python под Windows?"

#: ../../faq/windows.rst:24
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything "
"will seem obvious; otherwise, you might need a little more guidance."
msgstr ""
"Это не обязательно простой вопрос. Если вы уже знакомы с запуском программ "
"из командной строки Windows, то все покажется очевидным; в противном случае "
"вам может понадобиться немного больше рекомендаций."

#: ../../faq/windows.rst:28
msgid ""
"Unless you use some sort of integrated development environment, you will end "
"up *typing* Windows commands into what is referred to as a \"Command prompt "
"window\".  Usually you can create such a window from your search bar by "
"searching for ``cmd``.  You should be able to recognize when you have "
"started such a window because you will see a Windows \"command prompt\", "
"which usually looks like this:"
msgstr ""
"Если вы не используете какую-либо интегрированную среду разработки, вам "
"придется *вводить* команды Windows в так называемое «окно командной строки». "
"Обычно такое окно можно создать из панели поиска, выполнив поиск по запросу "
"«cmd». Вы сможете распознать, когда вы запустили такое окно, потому что вы "
"увидите «командную строку» Windows, которая обычно выглядит следующим "
"образом:"

#: ../../faq/windows.rst:39
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like:"
msgstr ""
"Буква может быть другой, и после нее могут быть другие слова, поэтому вы "
"можете легко увидеть что-то вроде:"

#: ../../faq/windows.rst:46
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on "
"the way to running Python programs."
msgstr ""
"в зависимости от того, как был настроен ваш компьютер и что еще вы с ним "
"недавно делали. Запустив такое окно, вы уже на пути к запуску программ "
"Python."

#: ../../faq/windows.rst:50
msgid ""
"You need to realize that your Python scripts have to be processed by another "
"program called the Python *interpreter*.  The interpreter reads your script, "
"compiles it into bytecodes, and then executes the bytecodes to run your "
"program. So, how do you arrange for the interpreter to handle your Python?"
msgstr ""
"Вы должны понимать, что ваши сценарии Python должны обрабатываться другой "
"программой, называемой *интерпретатором* Python. Интерпретатор читает ваш "
"сценарий, компилирует его в байт-коды, а затем выполняет байт-коды для "
"запуска вашей программы. Итак, как же организовать работу интерпретатора с "
"вашим Python?"

#: ../../faq/windows.rst:55
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"py\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``py`` and hitting "
"return:"
msgstr ""
"Во-первых, вам необходимо убедиться, что ваше командное окно распознает "
"слово «py» как инструкцию по запуску интерпретатора. Если вы открыли "
"командное окно, попробуйте ввести команду ``py`` и нажать return:"

#: ../../faq/windows.rst:64
msgid "You should then see something like:"
msgstr "Затем вы должны увидеть что-то вроде:"

#: ../../faq/windows.rst:72
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can "
"enter Python statements or expressions interactively and have them executed "
"or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the results:"
msgstr ""
"Вы запустили интерпретатор в «интерактивном режиме». Это означает, что вы "
"можете вводить операторы или выражения Python в интерактивном режиме и "
"выполнять или оценивать их, пока вы ждете. Это одна из самых сильных "
"особенностей Python. Проверьте это, введя несколько выражений по вашему "
"выбору и просмотрев результаты:"

#: ../../faq/windows.rst:84
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable "
"calculator.  When you want to end your interactive Python session, call the :"
"func:`exit` function or hold the :kbd:`Ctrl` key down while you enter a :kbd:"
"`Z`, then hit the \":kbd:`Enter`\" key to get back to your Windows command "
"prompt."
msgstr ""
"Многие люди используют интерактивный режим как удобный, но легко "
"программируемый калькулятор. Если вы хотите завершить интерактивный сеанс "
"Python, вызовите функцию :func:`exit` или удерживайте клавишу :kbd:`Ctrl`, "
"пока вы вводите :kbd:`Z`, а затем нажмите \":kbd:`Enter `\" для возврата в "
"командную строку Windows."

#: ../../faq/windows.rst:90
msgid ""
"You may also find that you have a Start-menu entry such as :menuselection:"
"`Start --> Programs --> Python 3.x --> Python (command line)` that results "
"in you seeing the ``>>>`` prompt in a new window.  If so, the window will "
"disappear after you call the :func:`exit` function or enter the :kbd:`Ctrl-"
"Z` character; Windows is running a single \"python\" command in the window, "
"and closes it when you terminate the interpreter."
msgstr ""
"Вы также можете обнаружить, что у вас есть запись в меню «Пуск», например :"
"menuselection:`Пуск --> Программы --> Python 3.x --> Python (командная "
"строка), в результате чего вы видите ``>>> `` запрос в новом окне. Если да, "
"то окно исчезнет после вызова функции :func:`exit` или ввода символа :kbd:"
"`Ctrl-Z`; Windows запускает в окне одну команду «python» и закрывает ее, "
"когда вы завершаете работу интерпретатора."

#: ../../faq/windows.rst:97
msgid ""
"Now that we know the ``py`` command is recognized, you can give your Python "
"script to it. You'll have to give either an absolute or a relative path to "
"the Python script. Let's say your Python script is located in your desktop "
"and is named ``hello.py``, and your command prompt is nicely opened in your "
"home directory so you're seeing something similar to::"
msgstr ""
"Теперь, когда мы знаем, что команда ``py`` распознана, вы можете передать ей "
"свой скрипт Python. Вам нужно будет указать абсолютный или относительный "
"путь к сценарию Python. Допустим, ваш скрипт Python расположен на вашем "
"рабочем столе и называется hello.py, а командная строка открывается в вашем "
"домашнем каталоге, поэтому вы видите что-то похожее на:"

#: ../../faq/windows.rst:106
msgid ""
"So now you'll ask the ``py`` command to give your script to Python by typing "
"``py`` followed by your script path::"
msgstr ""
"Итак, теперь вы попросите команду ``py`` передать ваш скрипт Python, набрав "
"``py`` и указав путь к вашему скрипту::"

#: ../../faq/windows.rst:114
msgid "How do I make Python scripts executable?"
msgstr "Как сделать скрипты Python исполняемыми?"

#: ../../faq/windows.rst:116
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple "
"typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""
"В Windows стандартный установщик Python уже связывает расширение .py с типом "
"файла (Python.File) и дает этому типу файла команду открытия, которая "
"запускает интерпретатор (``D:\\Program Files\\Python\\python.exe \"% 1\" "
"%*``). Этого достаточно, чтобы скрипты могли выполняться из командной строки "
"как «foo.py». Если вы предпочитаете выполнять сценарий, просто набрав «foo» "
"без расширения, вам нужно добавить .py в переменную среды PATHEXT."

#: ../../faq/windows.rst:124
msgid "Why does Python sometimes take so long to start?"
msgstr "Почему запуск Python иногда занимает так много времени?"

#: ../../faq/windows.rst:126
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""
"Обычно Python запускается в Windows очень быстро, но иногда появляются "
"сообщения об ошибках, из-за которых запуск Python внезапно начинает занимать "
"много времени. Это становится еще более загадочным, поскольку Python будет "
"нормально работать в других системах Windows, которые кажутся настроенными "
"идентично."

#: ../../faq/windows.rst:131
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of "
"virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read "
"activity, is a particular offender."
msgstr ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine. Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem. Try checking the configuration of "
"virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read "
"activity, is a particular offender."

#: ../../faq/windows.rst:141
msgid "How do I make an executable from a Python script?"
msgstr "Как создать исполняемый файл из сценария Python?"

#: ../../faq/windows.rst:143
msgid ""
"See :ref:`faq-create-standalone-binary` for a list of tools that can be used "
"to make executables."
msgstr ""
"См. :ref:`faq-create-standalone-binary` для получения списка инструментов, "
"которые можно использовать для создания исполняемых файлов."

#: ../../faq/windows.rst:148
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr "Is a ``*.pyd`` file the same as a DLL?"

#: ../../faq/windows.rst:150
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``PyInit_foo()``.  You "
"can then write Python \"import foo\", and Python will search for foo.pyd (as "
"well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``PyInit_foo()`` to initialize it.  You do not link your .exe with foo.lib, "
"as that would cause Windows to require the DLL to be present."
msgstr ""
"Да, файлы .pyd — это библиотеки DLL, но есть несколько отличий. Если у вас "
"есть DLL с именем ``foo.pyd``, то в ней должна быть функция "
"``PyInit_foo()``. Затем вы можете написать Python «import foo», и Python "
"будет искать foo.pyd (а также foo.py, foo.pyc) и, если найдет его, "
"попытается вызвать PyInit_foo() для его инициализации. . Вы не связываете "
"свой .exe с foo.lib, так как это приведет к тому, что Windows потребует "
"присутствия DLL."

#: ../../faq/windows.rst:157
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""
"Обратите внимание, что путь поиска для foo.pyd — PYTHONPATH, а не тот путь, "
"который Windows использует для поиска foo.dll. Кроме того, для запуска вашей "
"программы не требуется присутствие foo.pyd, тогда как если вы связали свою "
"программу с dll, эта dll потребуется. Конечно, foo.pyd необходим, если вы "
"хотите сказать «import foo». В DLL связь объявляется в исходном коде с "
"помощью ``__declspec(dllexport)``. В .pyd связь определяется в списке "
"доступных функций."

#: ../../faq/windows.rst:166
msgid "How can I embed Python into a Windows application?"
msgstr "Как я могу встроить Python в приложение Windows?"

#: ../../faq/windows.rst:168
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""
"Встраивание интерпретатора Python в приложение Windows можно резюмировать "
"следующим образом:"

#: ../../faq/windows.rst:170
msgid ""
"Do **not** build Python into your .exe file directly.  On Windows, Python "
"must be a DLL to handle importing modules that are themselves DLL's.  (This "
"is the first key undocumented fact.)  Instead, link to :file:`python{NN}."
"dll`; it is typically installed in ``C:\\Windows\\System``.  *NN* is the "
"Python version, a number such as \"33\" for Python 3.3."
msgstr ""
"**Не** встраивайте Python напрямую в свой .exe-файл. В Windows Python должен "
"быть DLL для импорта модулей, которые сами являются DLL. (Это первый "
"ключевой недокументированный факт.) Вместо этого дайте ссылку на :file:"
"`python{NN}.dll`; обычно он устанавливается в ``C:\\Windows\\System``. *NN* "
"— это версия Python, число, например «33», для Python 3.3."

#: ../../faq/windows.rst:176
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking "
"against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""
"Вы можете подключиться к Python двумя разными способами. Связывание во время "
"загрузки означает связывание с :file:`python{NN}.lib`, тогда как связывание "
"во время выполнения означает связывание с :file:`python{NN}.dll`. (Общее "
"примечание: :file:`python{NN}.lib` — это так называемая «библиотека "
"импорта», соответствующая :file:`python{NN}.dll`. Она просто определяет "
"символы для компоновщика.)"

#: ../../faq/windows.rst:182
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using "
"these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""
"Связывание во время выполнения значительно упрощает варианты связывания; все "
"происходит во время выполнения. Ваш код должен загрузить :file:`python{NN}."
"dll` с помощью процедуры Windows ``LoadLibraryEx()``. Код также должен "
"использовать процедуры доступа и данные в файле:`python{NN}.dll` (то есть "
"API C Python) с использованием указателей, полученных с помощью процедуры "
"Windows ``GetProcAddress()``. Макросы могут сделать использование этих "
"указателей прозрачным для любого кода C, который вызывает подпрограммы в C "
"API Python."

#: ../../faq/windows.rst:191
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do **not** have to create a DLL file, "
"and this also simplifies linking."
msgstr ""
"Если вы используете SWIG, легко создать «модуль расширения» Python, который "
"сделает данные и методы приложения доступными для Python. SWIG возьмет на "
"себя практически все хлопотные детали за вас. В результате вы получаете код "
"C, который вы связываете *с* вашим .exe-файлом (!) Вам **не** нужно "
"создавать файл DLL, и это также упрощает связывание."

#: ../../faq/windows.rst:197
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""
"SWIG создаст функцию инициализации (функцию C), имя которой зависит от имени "
"модуля расширения. Например, если имя модуля — leo, функция инициализации "
"будет называться initleo(). Если вы используете теневые классы SWIG, как и "
"должно быть, функция init будет вызываться initleoc(). Это инициализирует в "
"основном скрытый вспомогательный класс, используемый теневым классом."

#: ../../faq/windows.rst:203
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""
"Причина, по которой вы можете связать код C из шага 2 с вашим .exe-файлом, "
"заключается в том, что вызов функции инициализации эквивалентен импорту "
"модуля в Python! (Это второй ключевой недокументированный факт.)"

#: ../../faq/windows.rst:207
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""
"Короче говоря, вы можете использовать следующий код для инициализации "
"интерпретатора Python с вашим модулем расширения."

#: ../../faq/windows.rst:218
msgid ""
"There are two problems with Python's C API which will become apparent if you "
"use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""
"Есть две проблемы с API C Python, которые станут очевидными, если вы "
"используете компилятор, отличный от MSVC, который использовался для сборки "
"pythonNN.dll."

#: ../../faq/windows.rst:221
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take ``FILE *`` "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a ``struct FILE`` will be different.  From an "
"implementation standpoint these are very low level functions."
msgstr ""
"Проблема 1: Так называемые функции \"очень высокого уровня\", которые "
"принимают аргументы ``FILE *``, не будут работать в среде с несколькими "
"компиляторами, поскольку понятие ``struct FILE`` в каждом компиляторе будет "
"разным. С точки зрения реализации это функции очень низкого уровня."

#: ../../faq/windows.rst:226
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""
"Проблема 2: SWIG генерирует следующий код при создании оболочек для функций "
"void:"

#: ../../faq/windows.rst:235
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""
"Увы, Py_None — это макрос, который расширяется до ссылки на сложную "
"структуру данных под названием _Py_NoneStruct внутри pythonNN.dll. Опять же, "
"этот код не будет работать в среде с несколькими компиляторами. Замените "
"такой код на:"

#: ../../faq/windows.rst:243
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""
"Возможно, можно использовать команду ``%typemap`` SWIG для автоматического "
"внесения изменений, хотя мне не удалось заставить это работать (я полный "
"новичок в SWIG)."

#: ../../faq/windows.rst:247
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""
"Использование сценария оболочки Python для создания окна интерпретатора "
"Python внутри вашего приложения Windows — не очень хорошая идея; "
"результирующее окно будет независимым от оконной системы вашего приложения. "
"Скорее, вы (или класс wxPythonWindow) должны создать «родное» окно "
"интерпретатора. Это окно легко подключить к интерпретатору Python. Вы можете "
"перенаправить ввод-вывод Python на _любой_ объект, поддерживающий чтение и "
"запись, поэтому все, что вам нужно, — это объект Python (определенный в "
"вашем модуле расширения), содержащий методы read() и write()."

#: ../../faq/windows.rst:256
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr ""
"Как запретить редакторам вставлять табуляции в мой исходный код Python?"

#: ../../faq/windows.rst:258
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`, "
"recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""
"В FAQ не рекомендуется использовать табуляцию, а в руководстве по стилю "
"Python :pep:`8` рекомендуется использовать 4 пробела для распределенного "
"кода Python; это также значение по умолчанию для режима Python в Emacs."

#: ../../faq/windows.rst:262
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take :"
"menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""
"В любом редакторе смешивать табуляции и пробелы — плохая идея. MSVC ничем не "
"отличается в этом отношении и легко настраивается на использование пробелов: "
"возьмите :menuselection:`Инструменты --> Параметры --> Вкладки` и для типа "
"файла \"По умолчанию\" установите \"Размер табуляции\" и \"Размер отступа\" "
"на 4 и выберите переключатель «Вставить пробелы»."

#: ../../faq/windows.rst:267
msgid ""
"Python raises :exc:`IndentationError` or :exc:`TabError` if mixed tabs and "
"spaces are causing problems in leading whitespace. You may also run the :mod:"
"`tabnanny` module to check a directory tree in batch mode."
msgstr ""
"Python выдает :exc:`IndentationError` или :exc:`TabError`, если смешанные "
"табуляции и пробелы вызывают проблемы с ведущими пробелами. Вы также можете "
"запустить модуль :mod:`tabnanny` для проверки дерева каталогов в пакетном "
"режиме."

#: ../../faq/windows.rst:274
msgid "How do I check for a keypress without blocking?"
msgstr "Как проверить нажатие клавиши без блокировки?"

#: ../../faq/windows.rst:276
msgid ""
"Use the :mod:`msvcrt` module.  This is a standard Windows-specific extension "
"module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""
"Используйте модуль :mod:`msvcrt`. Это стандартный модуль расширения для "
"Windows. Он определяет функцию kbhit(), которая проверяет, присутствует ли "
"нажатие клавиатуры, и getch(), которая получает один символ, не повторяя его."

#: ../../faq/windows.rst:281
msgid "How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?"
msgstr "Как устранить отсутствующую ошибку api-ms-win-crt-runtime-l1-1-0.dll?"

#: ../../faq/windows.rst:283
msgid ""
"This can occur on Python 3.5 and later when using Windows 8.1 or earlier "
"without all updates having been installed. First ensure your operating "
"system is supported and is up to date, and if that does not resolve the "
"issue, visit the `Microsoft support page <https://support.microsoft.com/en-"
"us/help/3118401/>`_ for guidance on manually installing the C Runtime update."
msgstr ""
"Это может произойти в Python 3.5 и более поздних версиях при использовании "
"Windows 8.1 или более ранней версии без установки всех обновлений. Сначала "
"убедитесь, что ваша операционная система поддерживается и обновлена. Если "
"это не решит проблему, посетите `страницу поддержки Microsoft <https://"
"support.microsoft.com/en-us/help/3118401/>`_ инструкции по установке "
"обновления C Runtime вручную."
