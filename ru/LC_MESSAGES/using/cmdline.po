# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "Командная строка и среда"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"Интерпретатор CPython сканирует командную строку и среду на предмет "
"различных настроек."

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""
"Схемы командной строки других реализаций могут отличаться. Дополнительные "
"ресурсы см. в разделе «Реализации»."

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "Командная строка"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr "При вызове Python вы можете указать любую из этих опций:"

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"Самый распространенный вариант использования — это, конечно же, простой "
"вызов скрипта::"

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "Параметры интерфейса"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"Интерфейс интерпретатора напоминает интерфейс оболочки UNIX, но "
"предоставляет некоторые дополнительные методы вызова:"

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""
"При вызове со стандартным вводом, подключенным к устройству tty, он "
"запрашивает команды и выполняет их до EOF (символа конца файла, его можно "
"создать с помощью :kbd:`Ctrl-D` в UNIX или :kbd:` Ctrl-Z, Enter` в Windows) "
"читается."

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"При вызове с аргументом имени файла или с файлом в качестве стандартного "
"ввода он считывает и выполняет сценарий из этого файла."

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"При вызове с аргументом имени каталога он считывает и выполняет сценарий с "
"соответствующим именем из этого каталога."

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"При вызове с помощью ``-c команды`` он выполняет оператор(ы) Python, "
"заданные как *команда*. Здесь *команда* может содержать несколько "
"операторов, разделенных символами новой строки. Ведущие пробелы имеют важное "
"значение в операторах Python!"

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"При вызове с параметром ``-m имя-модуля`` данный модуль располагается по "
"пути к модулю Python и выполняется как скрипт."

#: ../../using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""
"В неинтерактивном режиме весь ввод анализируется перед его выполнением."

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"Опция интерфейса завершает список опций, используемых интерпретатором, все "
"последовательные аргументы окажутся в :data:`sys.argv` — обратите внимание, "
"что первый элемент, индекс нулевой (``sys.argv[0]``) , — строка, отражающая "
"источник программы."

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"Выполните код Python в *команде*. *команда* может представлять собой один "
"или несколько операторов, разделенных символами новой строки, со "
"значительными пробелами в начале, как в обычном коде модуля."

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"c\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""
"Если указана эта опция, первым элементом :data:`sys.argv` будет ``\"-c\"``, "
"а текущий каталог будет добавлен в начало :data:`sys.path` (что позволит "
"модулям в этом каталоге для импорта как модулей верхнего уровня)."

#: ../../using/cmdline.rst:73
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``cpython.run_command`` с аргументом "
"``command``."

#: ../../using/cmdline.rst:77
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""
"Найдите в :data:`sys.path` указанный модуль и выполните его содержимое как "
"модуль :mod:`__main__`."

#: ../../using/cmdline.rst:80
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""
"Поскольку аргументом является имя *модуля*, вы не должны указывать "
"расширение файла (``.py``). Имя модуля должно быть допустимым абсолютным "
"именем модуля Python, но реализация не всегда обеспечивает это (например, "
"она может позволять вам использовать имя, содержащее дефис)."

#: ../../using/cmdline.rst:85
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""
"Имена пакетов (включая пакеты пространства имен) также разрешены. Если "
"вместо обычного модуля указано имя пакета, интерпретатор выполнит ``<pkg>."
"__main__`` в качестве основного модуля. Такое поведение намеренно похоже на "
"обработку каталогов и zip-файлов, которые передаются интерпретатору в "
"качестве аргумента сценария."

#: ../../using/cmdline.rst:94
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"Эту опцию нельзя использовать со встроенными модулями и модулями расширения, "
"написанными на C, поскольку они не имеют файлов модулей Python. Однако его "
"по-прежнему можно использовать для предварительно скомпилированных модулей, "
"даже если исходный исходный файл недоступен."

#: ../../using/cmdline.rst:99
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""
"Если указана эта опция, первый элемент :data:`sys.argv` будет полным путем к "
"файлу модуля (во время поиска файла модуля первому элементу будет присвоено "
"значение ``\"-m\"` `). Как и в случае с опцией :option:`-c`, текущий каталог "
"будет добавлен в начало :data:`sys.path`."

#: ../../using/cmdline.rst:104
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the current directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too."
msgstr ""

#: ../../using/cmdline.rst:109
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"Многие модули стандартной библиотеки содержат код, который вызывается при их "
"выполнении как сценарий. Примером может служить модуль :mod:`timeit`::"

#: ../../using/cmdline.rst:115
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``cpython.run_module`` с аргументом "
"``имя-модуля``."

#: ../../using/cmdline.rst:119
msgid ":func:`runpy.run_module`"
msgstr ":func:`runpy.run_module`"

#: ../../using/cmdline.rst:119 ../../using/cmdline.rst:171
msgid "Equivalent functionality directly available to Python code"
msgstr ""
"Эквивалентная функциональность, непосредственно доступная для кода Python."

#: ../../using/cmdline.rst:121
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- Выполнение модулей как скриптов"

#: ../../using/cmdline.rst:123
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr "Укажите имя пакета для запуска подмодуля ``__main__``."

#: ../../using/cmdline.rst:126
msgid "namespace packages are also supported"
msgstr "пакеты пространства имен также поддерживаются"

#: ../../using/cmdline.rst:133
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""
"Чтение команд со стандартного ввода (:data:`sys.stdin`). Если стандартный "
"ввод является терминалом, подразумевается :option:`-i`."

#: ../../using/cmdline.rst:136
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""
"Если указана эта опция, первым элементом :data:`sys.argv` будет ``\"-\"``, а "
"текущий каталог будет добавлен в начало :data:`sys.path`."

#: ../../using/cmdline.rst:140 ../../using/cmdline.rst:629
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``cpython.run_stdin`` без аргументов."

#: ../../using/cmdline.rst:146
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""
"Выполните код Python, содержащийся в *script*, который должен представлять "
"собой путь к файловой системе (абсолютный или относительный), ссылающийся "
"либо на файл Python, либо на каталог, содержащий файл ``__main__.py``, либо "
"на zip-файл, содержащий ``__main__. py`` файл."

#: ../../using/cmdline.rst:151
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"Если указана эта опция, первым элементом :data:`sys.argv` будет имя "
"сценария, указанное в командной строке."

#: ../../using/cmdline.rst:154
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""
"Если имя сценария напрямую относится к файлу Python, каталог, содержащий "
"этот файл, добавляется в начало :data:`sys.path`, и файл выполняется как "
"модуль :mod:`__main__`."

#: ../../using/cmdline.rst:158
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"Если имя сценария относится к каталогу или zip-файлу, имя сценария "
"добавляется в начало :data:`sys.path`, а файл ``__main__.py`` в этом месте "
"выполняется как :mod:`__main__ `модуль."

#: ../../using/cmdline.rst:162
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too."
msgstr ""

#: ../../using/cmdline.rst:167
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``cpython.run_file`` с аргументом "
"``имя_файла``."

#: ../../using/cmdline.rst:170
msgid ":func:`runpy.run_path`"
msgstr ":func:`runpy.run_path`"

#: ../../using/cmdline.rst:174
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"Если опция интерфейса не указана, подразумевается :option:`-i`, ``sys."
"argv[0]`` представляет собой пустую строку (``\"\"``), и текущий каталог "
"будет добавлен в начало :data:`sys.path`. Кроме того, автоматически "
"включается заполнение табуляции и редактирование истории, если они доступны "
"на вашей платформе (см. :ref:`rlcompleter-config`)."

#: ../../using/cmdline.rst:180
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:182
msgid "Automatic enabling of tab-completion and history editing."
msgstr "Автоматическое включение табуляции и редактирования истории."

#: ../../using/cmdline.rst:187
msgid "Generic options"
msgstr "Общие параметры"

#: ../../using/cmdline.rst:193
msgid "Print a short description of all command line options."
msgstr ""

#: ../../using/cmdline.rst:199
msgid "Print the Python version number and exit.  Example output could be:"
msgstr "Распечатайте номер версии Python и выйдите. Пример вывода может быть:"

#: ../../using/cmdline.rst:205
msgid "When given twice, print more information about the build, like:"
msgstr ""
"Если задано дважды, выведите дополнительную информацию о сборке, например:"

#: ../../using/cmdline.rst:212
msgid "The ``-VV`` option."
msgstr "Параметр ``-VV``."

#: ../../using/cmdline.rst:218
msgid "Miscellaneous options"
msgstr "Разные варианты"

#: ../../using/cmdline.rst:222
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error when the "
"option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:226
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:231
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"Если задано, Python не будет пытаться записывать файлы ``.pyc`` при импорте "
"исходных модулей. См. также :envvar:`PYTHONDONTWRITEBYTECODE`."

#: ../../using/cmdline.rst:237
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref:`pyc-"
"invalidation`. When set to ``default``, checked and unchecked hash-based "
"bytecode cache files are validated according to their default semantics. "
"When set to ``always``, all hash-based ``.pyc`` files, whether checked or "
"unchecked, are validated against their corresponding source file. When set "
"to ``never``, hash-based ``.pyc`` files are not validated against their "
"corresponding source files."
msgstr ""
"Управляйте поведением проверки файлов ``.pyc`` на основе хеша. См. :ref:`pyc-"
"invalidation`. Если установлено значение ``default``, проверенные и "
"непроверенные файлы кэша байт-кода на основе хэша проверяются в соответствии "
"с их семантикой по умолчанию. Если установлено значение «всегда», все файлы "
"«.pyc» на основе хеша, независимо от того, отмечены они или нет, проверяются "
"на соответствие соответствующему исходному файлу. Если установлено значение "
"«никогда», файлы «.pyc» на основе хеша не проверяются на соответствие "
"соответствующим исходным файлам."

#: ../../using/cmdline.rst:245
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""
"Эта опция не влияет на семантику файлов ``.pyc``, основанных на временных "
"метках."

#: ../../using/cmdline.rst:251
msgid ""
"Turn on parser debugging output (for expert only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../../using/cmdline.rst:257
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:263
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""
"Если сценарий передается в качестве первого аргумента или используется "
"опция :option:`-c`, войдите в интерактивный режим после выполнения сценария "
"или команды, даже если :data:`sys.stdin` не выглядит как терминал. Файл :"
"envvar:`PYTHONSTARTUP` не читается."

#: ../../using/cmdline.rst:268
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"Это может быть полезно для проверки глобальных переменных или трассировки "
"стека, когда сценарий вызывает исключение. См. также :envvar:`PYTHONINSPECT`."

#: ../../using/cmdline.rst:274
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated mode :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too. Further restrictions may be imposed to prevent the user from injecting "
"malicious code."
msgstr ""

#: ../../using/cmdline.rst:285
msgid ""
"Remove assert statements and any code conditional on the value of :const:"
"`__debug__`.  Augment the filename for compiled (:term:`bytecode`) files by "
"adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""
"Удалите утверждения утверждения и любой код, зависящий от значения :const:"
"`__debug__`. Увеличьте имя файла для скомпилированных (:term:`bytecode`) "
"файлов, добавив ``.opt-1`` перед расширением ``.pyc`` (см. :pep:`488`). См. "
"также :envvar:`PYTHONOPTIMIZE`."

#: ../../using/cmdline.rst:290 ../../using/cmdline.rst:300
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr "Измените имена файлов ``.pyc`` в соответствии с :pep:`488`."

#: ../../using/cmdline.rst:296
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""
"Выполните :option:`-O` и также удалите строки документации. Увеличьте имя "
"файла для скомпилированных (:term:`bytecode`) файлов, добавив ``.opt-2`` "
"перед расширением ``.pyc`` (см. :pep:`488`)."

#: ../../using/cmdline.rst:306
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"Не отображайте сообщения об авторских правах и версии даже в интерактивном "
"режиме."

#: ../../using/cmdline.rst:313
msgid ""
"Turn on hash randomization. This option only has an effect if the :envvar:"
"`PYTHONHASHSEED` environment variable is set to ``0``, since hash "
"randomization is enabled by default."
msgstr ""
"Включите рандомизацию хеша. Эта опция имеет эффект только в том случае, если "
"для переменной среды :envvar:`PYTHONHASHSEED` установлено значение ``0``, "
"поскольку рандомизация хеша включена по умолчанию."

#: ../../using/cmdline.rst:317
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`__hash__` values of str and bytes objects are \"salted\" "
"with an unpredictable random value.  Although they remain constant within an "
"individual Python process, they are not predictable between repeated "
"invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:323
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully chosen inputs that exploit the worst case "
"performance of a dict construction, O(n\\ :sup:`2`) complexity.  See http://"
"www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:328
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""
":envvar:`PYTHONHASHSEED` позволяет вам установить фиксированное значение для "
"секретного значения хеша."

#: ../../using/cmdline.rst:331
msgid "The option is no longer ignored."
msgstr "Опция больше не игнорируется."

#: ../../using/cmdline.rst:339
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Не добавляйте каталог :data:`user site-packages <site.USER_SITE>` в :data:"
"`sys.path`."

#: ../../using/cmdline.rst:344 ../../using/cmdline.rst:722
#: ../../using/cmdline.rst:734
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- Каталог пакетов сайта для каждого пользователя"

#: ../../using/cmdline.rst:349
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Отключите импорт модуля :mod:`site` и связанные с ним манипуляции с :data:"
"`sys.path`, зависящие от сайта. Также отключите эти манипуляции, если :mod:"
"`site` будет явно импортирован позже (вызовите :func:`site.main`, если вы "
"хотите, чтобы они запускались)."

#: ../../using/cmdline.rst:357
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no "
"effect on the stdin stream."
msgstr ""
"Принудительно отключить буферизацию потоков stdout и stderr. Эта опция не "
"влияет на поток stdin."

#: ../../using/cmdline.rst:360
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr "См. также :envvar:`PYTHONUNBUFFERED`."

#: ../../using/cmdline.rst:362
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr "Текстовый слой потоков stdout и stderr теперь небуферизован."

#: ../../using/cmdline.rst:368
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at exit."
msgstr ""
"Выводите сообщение каждый раз при инициализации модуля, показывая место (имя "
"файла или встроенный модуль), из которого он загружен. Если задано дважды (:"
"option:`!-vv`), выведите сообщение для каждого файла, который проверяется "
"при поиске модуля. Также предоставляет информацию об очистке модуля при "
"выходе."

#: ../../using/cmdline.rst:373
msgid ""
"The :mod:`site` module reports the site-specific paths and :file:`.pth` "
"files being processed."
msgstr ""
"Модуль :mod:`site` сообщает о специфичных для сайта путях и обрабатываемых "
"файлах :file:`.pth`."

#: ../../using/cmdline.rst:377
msgid "See also :envvar:`PYTHONVERBOSE`."
msgstr "См. также :envvar:`PYTHONVERBOSE`."

#: ../../using/cmdline.rst:383
msgid ""
"Warning control. Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`."
msgstr ""
"Предупреждающий контроль. Механизм предупреждений Python по умолчанию "
"печатает предупреждающие сообщения в :data:`sys.stderr`."

#: ../../using/cmdline.rst:386 ../../using/cmdline.rst:750
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""
"Простейшие настройки безоговорочно применяют определенное действие ко всем "
"предупреждениям, выдаваемым процессом (даже к тем, которые по умолчанию "
"игнорируются)::"

#: ../../using/cmdline.rst:397
msgid ""
"The action names can be abbreviated as desired and the interpreter will "
"resolve them to the appropriate action name. For example, ``-Wi`` is the "
"same as ``-Wignore``."
msgstr ""
"Имена действий могут быть сокращены по желанию, и интерпретатор преобразует "
"их в соответствующее имя действия. Например, ``-Wi`` совпадает с ``-"
"Wignore``."

#: ../../using/cmdline.rst:401
msgid "The full form of argument is::"
msgstr "Полная форма аргумента:"

#: ../../using/cmdline.rst:405
msgid ""
"Empty fields match all values; trailing empty fields may be omitted. For "
"example ``-W ignore::DeprecationWarning`` ignores all DeprecationWarning "
"warnings."
msgstr ""
"Пустые поля соответствуют всем значениям; конечные пустые поля могут быть "
"опущены. Например, ``-W ignore::DeprecationWarning`` игнорирует все "
"предупреждения DeprecationWarning."

#: ../../using/cmdline.rst:409
msgid ""
"The *action* field is as explained above but only applies to warnings that "
"match the remaining fields."
msgstr ""
"Поле *действие* описано выше, но применяется только к предупреждениям, "
"соответствующим остальным полям."

#: ../../using/cmdline.rst:412
msgid ""
"The *message* field must match the whole warning message; this match is case-"
"insensitive."
msgstr ""
"Поле *message* должно соответствовать всему предупреждающему сообщению; это "
"совпадение нечувствительно к регистру."

#: ../../using/cmdline.rst:415
msgid ""
"The *category* field matches the warning category (ex: "
"``DeprecationWarning``). This must be a class name; the match test whether "
"the actual warning category of the message is a subclass of the specified "
"warning category."
msgstr ""
"Поле *category* соответствует категории предупреждения (например: "
"``DeprecationWarning``). Это должно быть имя класса; проверка соответствия, "
"является ли фактическая категория предупреждения сообщения подклассом "
"указанной категории предупреждения."

#: ../../using/cmdline.rst:420
msgid ""
"The *module* field matches the (fully qualified) module name; this match is "
"case-sensitive."
msgstr ""
"Поле *module* соответствует (полному) имени модуля; это совпадение "
"чувствительно к регистру."

#: ../../using/cmdline.rst:423
msgid ""
"The *lineno* field matches the line number, where zero matches all line "
"numbers and is thus equivalent to an omitted line number."
msgstr ""
"Поле *lineno* соответствует номеру строки, где ноль соответствует всем "
"номерам строк и, таким образом, эквивалентен пропущенному номеру строки."

#: ../../using/cmdline.rst:426
msgid ""
"Multiple :option:`-W` options can be given; when a warning matches more than "
"one option, the action for the last matching option is performed. Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""
"Можно указать несколько опций :option:`-W`; когда предупреждение "
"соответствует более чем одному варианту, выполняется действие для последнего "
"совпадающего варианта. Недопустимые параметры :option:`-W` игнорируются "
"(хотя при первом предупреждении выводится предупреждающее сообщение о "
"недопустимых параметрах)."

#: ../../using/cmdline.rst:431
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the :mod:"
"`warnings` module. For example, the :func:`warnings.filterwarnings` function "
"can be used to use a regular expression on the warning message."
msgstr ""
"Предупреждениями также можно управлять с помощью переменной среды :envvar:"
"`PYTHONWARNINGS` и из программы Python с помощью модуля :mod:`warnings`. "
"Например, функцию :func:`warnings.filterwarnings` можно использовать для "
"использования регулярного выражения в предупреждающем сообщении."

#: ../../using/cmdline.rst:436 ../../using/cmdline.rst:761
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""
"Дополнительную информацию см. в :ref:`warning-filter` и :ref:`description-"
"warning-filters`."

#: ../../using/cmdline.rst:441
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""
"Пропустите первую строку исходного кода, что позволит использовать не-Unix "
"формы ``#!cmd``. Это предназначено только для взлома DOS."

#: ../../using/cmdline.rst:447
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""
"Зарезервировано для различных вариантов реализации. CPython в настоящее "
"время определяет следующие возможные значения:"

#: ../../using/cmdline.rst:450
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../../using/cmdline.rst:451
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on :ref:`debug builds <debug-"
"build>`."
msgstr ""
"``-X showrefcount`` для вывода общего счетчика ссылок и количества "
"используемых блоков памяти после завершения программы или после каждого "
"оператора в интерактивном интерпретаторе. Это работает только для отладочных "
"сборок <debug-build>`."

#: ../../using/cmdline.rst:455
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See the :func:`tracemalloc.start` for "
"more information."
msgstr ""

#: ../../using/cmdline.rst:460
msgid ""
"``-X int_max_str_digits`` configures the :ref:`integer string conversion "
"length limitation <int_max_str_digits>`.  See also :envvar:"
"`PYTHONINTMAXSTRDIGITS`."
msgstr ""
"``-X int_max_str_digits`` настраивает :ref:`ограничение длины преобразования "
"целочисленной строки <int_max_str_digits>`. См. также :envvar:"
"`PYTHONINTMAXSTRDIGITS`."

#: ../../using/cmdline.rst:463
msgid ""
"``-X importtime`` to show how long each import takes. It shows module name, "
"cumulative time (including nested imports) and self time (excluding nested "
"imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python3 -X importtime -c 'import "
"asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""
"``-X importtime``, чтобы показать, сколько времени занимает каждый импорт. "
"Он показывает имя модуля, совокупное время (включая вложенный импорт) и "
"собственное время (исключая вложенный импорт). Обратите внимание, что его "
"вывод может быть нарушен в многопоточном приложении. Типичное использование "
"— ``python3 -X importtime -c 'import asyncio'``. См. также :envvar:"
"`PYTHONPROFILEIMPORTTIME`."

#: ../../using/cmdline.rst:468
msgid ""
"``-X dev``: enable :ref:`Python Development Mode <devmode>`, introducing "
"additional runtime checks that are too expensive to be enabled by default."
msgstr ""

#: ../../using/cmdline.rst:471
msgid ""
"``-X utf8`` enables the :ref:`Python UTF-8 Mode <utf8-mode>`. ``-X utf8=0`` "
"explicitly disables :ref:`Python UTF-8 Mode <utf8-mode>` (even when it would "
"otherwise activate automatically)."
msgstr ""

#: ../../using/cmdline.rst:474
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel tree "
"rooted at the given directory instead of to the code tree. See also :envvar:"
"`PYTHONPYCACHEPREFIX`."
msgstr ""
"``-X pycache_prefix=PATH`` позволяет записывать файлы ``.pyc`` в "
"параллельное дерево, находящееся в заданном каталоге, а не в дереве кода. "
"См. также :envvar:`PYTHONPYCACHEPREFIX`."

#: ../../using/cmdline.rst:477
msgid ""
"``-X warn_default_encoding`` issues a :class:`EncodingWarning` when the "
"locale-specific default encoding is used for opening files. See also :envvar:"
"`PYTHONWARNDEFAULTENCODING`."
msgstr ""
"``-X alert_default_encoding`` выдает :class:`EncodingWarning`, когда для "
"открытия файлов используется кодировка по умолчанию, специфичная для локали. "
"См. также :envvar:`PYTHONWARNDEFAULTENCODING`."

#: ../../using/cmdline.rst:481
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""
"Он также позволяет передавать произвольные значения и получать их через "
"словарь :data:`sys._xoptions`."

#: ../../using/cmdline.rst:484
msgid "The :option:`-X` option was added."
msgstr ""

#: ../../using/cmdline.rst:487
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:490
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../../using/cmdline.rst:493
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:496
msgid "The ``-X importtime``, ``-X dev`` and ``-X utf8`` options."
msgstr ""

#: ../../using/cmdline.rst:499
msgid ""
"The ``-X pycache_prefix`` option. The ``-X dev`` option now logs ``close()`` "
"exceptions in :class:`io.IOBase` destructor."
msgstr ""

#: ../../using/cmdline.rst:503
msgid ""
"Using ``-X dev`` option, check *encoding* and *errors* arguments on string "
"encoding and decoding operations."
msgstr ""

#: ../../using/cmdline.rst:507
msgid "The ``-X showalloccount`` option has been removed."
msgstr ""

#: ../../using/cmdline.rst:509
msgid "The ``-X warn_default_encoding`` option."
msgstr ""

#: ../../using/cmdline.rst:512
msgid "The ``-X int_max_str_digits`` option."
msgstr ""

#: ../../using/cmdline.rst:516
msgid "The ``-X oldparser`` option."
msgstr ""

#: ../../using/cmdline.rst:520
msgid "Options you shouldn't use"
msgstr "Опции, которые не следует использовать"

#: ../../using/cmdline.rst:524
msgid "Reserved for use by Jython_."
msgstr "Зарезервировано для использования Jython_."

#: ../../using/cmdline.rst:531
msgid "Environment variables"
msgstr "Переменные среды"

#: ../../using/cmdline.rst:533
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""
"Эти переменные среды влияют на поведение Python, они обрабатываются до "
"переключения ключей командной строки, кроме -E или -I. Обычно в случае "
"конфликта переключатели командной строки переопределяют переменные среды."

#: ../../using/cmdline.rst:540
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""
"Измените расположение стандартных библиотек Python. По умолчанию поиск "
"библиотек осуществляется в :file:`{prefix}/lib/python{version}` и :file:"
"`{exec_prefix}/lib/python{version}`, где :file:`{prefix}` и :file:"
"`{exec_prefix}` — это каталоги, зависящие от установки, оба по умолчанию "
"имеют значение :file:`/usr/local`."

#: ../../using/cmdline.rst:546
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""
"Когда :envvar:`PYTHONHOME` установлен на один каталог, его значение заменяет "
"как :file:`{prefix}`, так и :file:`{exec_prefix}`. Чтобы указать для них "
"другие значения, установите для :envvar:`PYTHONHOME` значение :file:"
"`{prefix}:{exec_prefix}`."

#: ../../using/cmdline.rst:553
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""
"Дополните путь поиска по умолчанию для файлов модулей. Формат такой же, как "
"у оболочки :envvar:`PATH`: один или несколько путей к каталогам, "
"разделенных :data:`os.pathsep` (например, двоеточиями в Unix или точками с "
"запятой в Windows). Несуществующие каталоги молча игнорируются."

#: ../../using/cmdline.rst:558
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""
"Помимо обычных каталогов, отдельные записи :envvar:`PYTHONPATH` могут "
"ссылаться на zip-файлы, содержащие чистые модули Python (в исходной или "
"скомпилированной форме). Модули расширения нельзя импортировать из zip-"
"файлов."

#: ../../using/cmdline.rst:562
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""
"Путь поиска по умолчанию зависит от установки, но обычно начинается с :file:"
"`{prefix}/lib/python{version}` (см. :envvar:`PYTHONHOME` выше). Он *всегда* "
"добавляется к :envvar:`PYTHONPATH`."

#: ../../using/cmdline.rst:566
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""
"Дополнительный каталог будет вставлен в путь поиска перед :envvar:"
"`PYTHONPATH`, как описано выше в разделе :ref:`using-on-interface-options`. "
"Путем поиска можно управлять из программы Python как переменную :data:`sys."
"path`."

#: ../../using/cmdline.rst:574
msgid ""
"If this is set to a non-empty string, it overrides the :data:`sys."
"platlibdir` value."
msgstr ""
"Если для этого параметра задана непустая строка, она переопределяет "
"значение :data:`sys.platlibdir`."

#: ../../using/cmdline.rst:582
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""
"Если это имя читаемого файла, команды Python в этом файле выполняются до "
"отображения первого приглашения в интерактивном режиме. Файл выполняется в "
"том же пространстве имен, где выполняются интерактивные команды, поэтому "
"объекты, определенные или импортированные в нем, можно использовать без "
"квалификации в интерактивном сеансе. Вы также можете изменить приглашения :"
"data:`sys.ps1` и :data:`sys.ps2` и перехватчик :data:`sys."
"__interactivehook__` в этом файле."

#: ../../using/cmdline.rst:589
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with "
"argument ``filename``."
msgstr ""

#: ../../using/cmdline.rst:591
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with the "
"filename as the argument when called on startup."
msgstr ""
"Вызывает :ref:`событие аудита <auditing>``cpython.run_startup`` с именем "
"файла в качестве аргумента при вызове при запуске."

#: ../../using/cmdline.rst:597
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""
"Если для этого параметра задана непустая строка, это эквивалентно указанию "
"опции :option:`-O`. Если установлено целое число, это эквивалентно указанию :"
"option:`-O` несколько раз."

#: ../../using/cmdline.rst:604
msgid ""
"If this is set, it names a callable using dotted-path notation.  The module "
"containing the callable will be imported and then the callable will be run "
"by the default implementation of :func:`sys.breakpointhook` which itself is "
"called by built-in :func:`breakpoint`.  If not set, or set to the empty "
"string, it is equivalent to the value \"pdb.set_trace\".  Setting this to "
"the string \"0\" causes the default implementation of :func:`sys."
"breakpointhook` to do nothing but return immediately."
msgstr ""
"Если этот параметр установлен, он называет вызываемый объект, используя "
"обозначение точечного пути. Модуль, содержащий вызываемый объект, будет "
"импортирован, а затем вызываемый объект будет запущен реализацией по "
"умолчанию :func:`sys.breakpointhook`, которая сама вызывается встроенной :"
"func:`breakpoint`. Если оно не установлено или установлена ​​пустая строка, "
"оно эквивалентно значению «pdb.set_trace». Установка этого значения в строку "
"«0» приводит к тому, что реализация :func:`sys.breakpointhook` по умолчанию "
"ничего не делает, а возвращает немедленный возврат."

#: ../../using/cmdline.rst:616
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""
"Если для этого параметра задана непустая строка, это эквивалентно указанию "
"опции :option:`-d`. Если установлено целое число, это эквивалентно указанию :"
"option:`-d` несколько раз."

#: ../../using/cmdline.rst:623
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""
"Если для этого параметра задана непустая строка, это эквивалентно указанию "
"опции :option:`-i`."

#: ../../using/cmdline.rst:626
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""
"Эту переменную также можно изменить с помощью кода Python, используя :data:"
"`os.environ`, чтобы принудительно включить режим проверки при завершении "
"программы."

#: ../../using/cmdline.rst:631
msgid "(also 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:637
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""
"Если для этого параметра задана непустая строка, это эквивалентно указанию "
"опции :option:`-u`."

#: ../../using/cmdline.rst:643
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""
"Если для этого параметра задана непустая строка, это эквивалентно указанию "
"опции :option:`-v`. Если установлено целое число, это эквивалентно указанию :"
"option:`-v` несколько раз."

#: ../../using/cmdline.rst:650
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and macOS."
msgstr ""
"Если этот параметр установлен, Python игнорирует регистр в операторах :"
"keyword:`import`. Это работает только в Windows и macOS."

#: ../../using/cmdline.rst:656
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""
"Если для этого параметра задана непустая строка, Python не будет пытаться "
"записывать файлы ``.pyc`` при импорте исходных модулей. Это эквивалентно "
"указанию опции :option:`-B`."

#: ../../using/cmdline.rst:663
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory tree "
"at this path, instead of in ``__pycache__`` directories within the source "
"tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""
"Если этот параметр установлен, Python будет записывать файлы ``.pyc`` в "
"зеркальном дереве каталогов по этому пути, а не в каталогах ``__pycache__`` "
"в дереве исходного кода. Это эквивалентно указанию опции :option:`-X` "
"``pycache_prefix=PATH``."

#: ../../using/cmdline.rst:673
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str and bytes objects."
msgstr ""
"Если эта переменная не установлена ​​или установлена ​​в случайное значение, для "
"заполнения хешей объектов str и bytes используется случайное значение."

#: ../../using/cmdline.rst:676
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""
"Если для :envvar:`PYTHONHASHSEED` задано целочисленное значение, оно "
"используется в качестве фиксированного начального значения для генерации "
"hash() типов, охватываемых рандомизацией хеша."

#: ../../using/cmdline.rst:680
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""
"Его цель — обеспечить повторяемое хеширование, например, для "
"самотестирования самого интерпретатора, или позволить кластеру процессов "
"Python совместно использовать хеш-значения."

#: ../../using/cmdline.rst:684
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""
"Целое число должно быть десятичным числом в диапазоне [0,4294967295]. "
"Указание значения 0 отключит рандомизацию хеша."

#: ../../using/cmdline.rst:691
msgid ""
"If this variable is set to an integer, it is used to configure the "
"interpreter's global :ref:`integer string conversion length limitation "
"<int_max_str_digits>`."
msgstr ""
"Если для этой переменной установлено целое число, она используется для "
"настройки глобального :ref:`ограничения длины преобразования целочисленной "
"строки интерпретатора <int_max_str_digits>`."

#: ../../using/cmdline.rst:699
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""
"Если это значение установлено перед запуском интерпретатора, оно "
"переопределяет кодировку, используемую для stdin/stdout/stderr, в синтаксисе "
"``encodingname:errorhandler``. Обе части ``encodingname`` и ``:"
"errorhandler`` являются необязательными и имеют то же значение, что и в :"
"func:`str.encode`."

#: ../../using/cmdline.rst:704
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""
"Для stderr часть ``:errorhandler`` игнорируется; обработчиком всегда будет "
"``'обратная косая черта'``."

#: ../../using/cmdline.rst:707
msgid "The ``encodingname`` part is now optional."
msgstr "Часть encodingname теперь необязательна."

#: ../../using/cmdline.rst:710
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""
"В Windows кодировка, указанная этой переменной, игнорируется для буферов "
"интерактивной консоли, если также не указан :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO`. Файлы и каналы, перенаправленные через "
"стандартные потоки, не затрагиваются."

#: ../../using/cmdline.rst:717
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""
"Если этот параметр установлен, Python не будет добавлять каталог :data:`user "
"site-packages <site.USER_SITE>` в :data:`sys.path`."

#: ../../using/cmdline.rst:727
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` "
"for ``python setup.py install --user``."
msgstr ""

#: ../../using/cmdline.rst:739
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on macOS."
msgstr ""
"Если эта переменная среды установлена, ``sys.argv[0]`` будет присвоено ее "
"значение вместо значения, полученного во время выполнения C. Работает только "
"на macOS."

#: ../../using/cmdline.rst:745
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times, with "
"filters later in the list taking precedence over those earlier in the list."
msgstr ""
"Это эквивалентно опции :option:`-W`. Если задана строка, разделенная "
"запятыми, это эквивалентно указанию :option:`-W` несколько раз, при этом "
"фильтры, расположенные позже в списке, имеют приоритет над фильтрами, "
"расположенными ранее в списке."

#: ../../using/cmdline.rst:767
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and :const:"
"`SIGILL` signals to dump the Python traceback.  This is equivalent to :"
"option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:778
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:789
msgid ""
"If this environment variable is set to a non-empty string, Python will show "
"how long each import takes.  This is exactly equivalent to setting ``-X "
"importtime`` on the command line."
msgstr ""

#: ../../using/cmdline.rst:798
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""
"Если для этой переменной среды задана непустая строка, включите режим "
"отладки <asyncio-debug-mode>` модуля :mod:`asyncio`."

#: ../../using/cmdline.rst:806
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""
"Установите распределители памяти Python и/или установите перехватчики "
"отладки."

#: ../../using/cmdline.rst:808
msgid "Set the family of memory allocators used by Python:"
msgstr "Установите семейство распределителей памяти, используемых Python:"

#: ../../using/cmdline.rst:810
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""
"``default``: используйте :ref:`распределители памяти по умолчанию <default-"
"memory-allocators>`."

#: ../../using/cmdline.rst:812
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, :c:data:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:815
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:data:"
"`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:819
msgid "Install :ref:`debug hooks <pymem-debug-hooks>`:"
msgstr "Установите :ref:`отладочные хуки <pymem-debug-hooks>`:"

#: ../../using/cmdline.rst:821
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``debug``: установите отладочные перехватчики поверх :ref:`распределителей "
"памяти по умолчанию <default-memory-allocators>`."

#: ../../using/cmdline.rst:823
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""
"``malloc_debug``: то же, что ``malloc``, но также устанавливает отладочные "
"хуки."

#: ../../using/cmdline.rst:824
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""
"``pymalloc_debug``: то же, что ``pymalloc``, но также устанавливает "
"отладочные хуки."

#: ../../using/cmdline.rst:826
msgid "Added the ``\"default\"`` allocator."
msgstr "Добавлен распределитель «по умолчанию»."

#: ../../using/cmdline.rst:834
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""
"Если установлено значение непустой строки, Python будет печатать статистику "
"распределителя памяти pymalloc <pymalloc>` каждый раз, когда создается новая "
"арена объекта pymalloc, а также при завершении работы."

#: ../../using/cmdline.rst:838
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""
"Эта переменная игнорируется, если переменная среды :envvar:`PYTHONMALLOC` "
"используется для принудительного использования распределителя :c:func:"
"`malloc` библиотеки C или если Python настроен без поддержки ``pymalloc``."

#: ../../using/cmdline.rst:842
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""
"Эту переменную теперь можно использовать и в Python, скомпилированном в "
"режиме выпуска. Теперь оно не имеет никакого эффекта, если установлено "
"пустую строку."

#: ../../using/cmdline.rst:849
msgid ""
"If set to a non-empty string, the default :term:`filesystem encoding and "
"error handler` mode will revert to their pre-3.6 values of 'mbcs' and "
"'replace', respectively.  Otherwise, the new defaults 'utf-8' and "
"'surrogatepass' are used."
msgstr ""
"Если установлено непустая строка, режим кодирования файловой системы и "
"обработчика ошибок по умолчанию вернется к значениям до версии 3.6: «mbcs» и "
"«replace» соответственно. В противном случае используются новые значения по "
"умолчанию «utf-8» и «surrogatepass»."

#: ../../using/cmdline.rst:854
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding()`."
msgstr ""

#: ../../using/cmdline.rst:858 ../../using/cmdline.rst:872
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`Availability <availability>`: Windows."

#: ../../using/cmdline.rst:859
msgid "See :pep:`529` for more details."
msgstr "См. :pep:`529` для более подробной информации."

#: ../../using/cmdline.rst:864
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""
"Если задано непустая строка, не используется новое средство чтения и записи "
"консоли. Это означает, что символы Юникода будут кодироваться в соответствии "
"с кодовой страницей активной консоли, а не с использованием utf-8."

#: ../../using/cmdline.rst:868
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""
"Эта переменная игнорируется, если стандартные потоки перенаправляются (в "
"файлы или каналы), а не обращаются к буферам консоли."

#: ../../using/cmdline.rst:878
msgid ""
"If set to the value ``0``, causes the main Python command line application "
"to skip coercing the legacy ASCII-based C and POSIX locales to a more "
"capable UTF-8 based alternative."
msgstr ""
"Если установлено значение ``0``, основное приложение командной строки Python "
"пропускает приведение устаревших локалей C и POSIX на основе ASCII к более "
"функциональной альтернативе на основе UTF-8."

#: ../../using/cmdline.rst:882
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), the "
"``LC_ALL`` locale override environment variable is also not set, and the "
"current locale reported for the ``LC_CTYPE`` category is either the default "
"``C`` locale, or else the explicitly ASCII-based ``POSIX`` locale, then the "
"Python CLI will attempt to configure the following locales for the "
"``LC_CTYPE`` category in the order listed before loading the interpreter "
"runtime:"
msgstr ""
"Если эта переменная *не* установлена ​​(или ей присвоено значение, отличное от "
"``0``), переменная среды переопределения локали ``LC_ALL`` также не "
"устанавливается, и для ``LC_CTYPE` сообщается текущая локаль. `категория - "
"это либо локаль ``C`` по умолчанию, либо явно основанная на ASCII локаль "
"``POSIX``, тогда CLI Python попытается настроить следующие локали для "
"категории ``LC_CTYPE`` в указанном порядке. перед загрузкой среды выполнения "
"интерпретатора:"

#: ../../using/cmdline.rst:890
msgid "``C.UTF-8``"
msgstr "``C.UTF-8``"

#: ../../using/cmdline.rst:891
msgid "``C.utf8``"
msgstr "``C.utf8``"

#: ../../using/cmdline.rst:892
msgid "``UTF-8``"
msgstr "``UTF-8``"

#: ../../using/cmdline.rst:894
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE`` "
"environment variable will also be set accordingly in the current process "
"environment before the Python runtime is initialized. This ensures that in "
"addition to being seen by both the interpreter itself and other locale-aware "
"components running in the same process (such as the GNU ``readline`` "
"library), the updated setting is also seen in subprocesses (regardless of "
"whether or not those processes are running a Python interpreter), as well as "
"in operations that query the environment rather than the current C locale "
"(such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""
"Если установка одной из этих категорий локали прошла успешно, то переменная "
"среды LC_CTYPE также будет установлена ​​соответствующим образом в текущей "
"среде процесса до инициализации среды выполнения Python. Это гарантирует, "
"что обновленные настройки будут видны не только самому интерпретатору, но и "
"другим компонентам, поддерживающим локаль, работающим в том же процессе "
"(например, библиотеке GNU ``readline``), и в подпроцессах (независимо от "
"того, не эти процессы используют интерпретатор Python), а также в операциях, "
"которые запрашивают среду, а не текущую локаль C (например, собственную :"
"func:`locale.getdefaultlocale`)."

#: ../../using/cmdline.rst:904
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` :ref:"
"`error handler <error-handlers>` for :data:`sys.stdin` and :data:`sys."
"stdout` (:data:`sys.stderr` continues to use ``backslashreplace`` as it does "
"in any other locale). This stream handling behavior can be overridden using :"
"envvar:`PYTHONIOENCODING` as usual."
msgstr ""
"Настройка одной из этих локалей (явно или через указанное выше неявное "
"приведение локали) автоматически включает обработчик ошибок "
"``surrogateescape`` :ref:`<error-handlers>` для :data:`sys.stdin` и :data:` "
"sys.stdout` (:data:`sys.stderr` продолжает использовать "
"``backslashreplace``, как и в любой другой локали). Это поведение обработки "
"потока можно переопределить с помощью :envvar:`PYTHONIOENCODING`, как обычно."

#: ../../using/cmdline.rst:911
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale coercion "
"activates, or else if a locale that *would* have triggered coercion is still "
"active when the Python runtime is initialized."
msgstr ""
"В целях отладки установка PYTHONCOERCECLOCALE=warn заставит Python выдавать "
"предупреждающие сообщения на stderr, если либо активируется приведение "
"локали, либо если локаль, которая *могла бы* вызвать приведение, все еще "
"активна, когда Python среда выполнения инициализируется."

#: ../../using/cmdline.rst:916
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to "
"find a suitable target locale, :envvar:`PYTHONUTF8` will still activate by "
"default in legacy ASCII-based locales. Both features must be disabled in "
"order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` for "
"system interfaces."
msgstr ""
"Также обратите внимание, что даже если приведение локали отключено или когда "
"не удается найти подходящую целевую локаль, :envvar:`PYTHONUTF8` по-прежнему "
"активируется по умолчанию в устаревших локалях на основе ASCII. Обе функции "
"должны быть отключены, чтобы заставить интерпретатор использовать ASCII "
"вместо UTF-8 для системных интерфейсов."

#: ../../using/cmdline.rst:923
msgid ":ref:`Availability <availability>`: \\*nix."
msgstr ""

#: ../../using/cmdline.rst:924
msgid "See :pep:`538` for more details."
msgstr "См. :pep:`538` для более подробной информации."

#: ../../using/cmdline.rst:930
msgid ""
"If this environment variable is set to a non-empty string, enable :ref:"
"`Python Development Mode <devmode>`, introducing additional runtime checks "
"that are too expensive to be enabled by default."
msgstr ""

#: ../../using/cmdline.rst:938
msgid "If set to ``1``, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Если установлено значение ``1``, включите :ref:`Python UTF-8 Mode <utf8-"
"mode>`."

#: ../../using/cmdline.rst:940
msgid "If set to ``0``, disable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Если установлено значение ``0``, отключите :ref:`Python UTF-8 Mode <utf8-"
"mode>`."

#: ../../using/cmdline.rst:942
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""
"Установка любой другой непустой строки приводит к ошибке во время "
"инициализации интерпретатора."

#: ../../using/cmdline.rst:949
msgid ""
"If this environment variable is set to a non-empty string, issue a :class:"
"`EncodingWarning` when the locale-specific default encoding is used."
msgstr ""
"Если для этой переменной среды задана непустая строка, выдайте :class:"
"`EncodingWarning`, когда используется кодировка по умолчанию, специфичная "
"для локали."

#: ../../using/cmdline.rst:952
msgid "See :ref:`io-encoding-warning` for details."
msgstr "Подробности см. в :ref:`io-encoding-warning`."

#: ../../using/cmdline.rst:958
msgid "Debug-mode variables"
msgstr "Переменные режима отладки"

#: ../../using/cmdline.rst:962
msgid "If set, Python will print threading debug info into stdout."
msgstr ""

#: ../../using/cmdline.rst:964
msgid "Need a :ref:`debug build of Python <debug-build>`."
msgstr ""

#: ../../using/cmdline.rst:971
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""
"Если этот параметр установлен, Python будет выгружать объекты и счетчики "
"ссылок, которые еще живы, после завершения работы интерпретатора."

#: ../../using/cmdline.rst:974
msgid ""
"Need Python configured with the :option:`--with-trace-refs` build option."
msgstr ""
"Необходимо настроить Python с опцией сборки :option:`--with-trace-refs`."
