# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "Что нового в Python 3.1"

#: ../../whatsnew/3.1.rst:0
msgid "Author"
msgstr "Автор"

#: ../../whatsnew/3.1.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.1.rst:49
msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""
"В этой статье объясняются новые возможности Python 3.1 по сравнению с "
"версией 3.0. Python 3.1 был выпущен  27 июня 2009 г."

#: ../../whatsnew/3.1.rst:54
msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: упорядоченные словари"

#: ../../whatsnew/3.1.rst:56
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"Обычные словари Python перебирают пары ключ/значение в произвольном порядке. "
"За прошедшие годы ряд авторов написали альтернативные реализации, "
"запоминающие порядок первоначальной вставки ключей. На основе опыта этих "
"реализаций был представлен новый класс :class:`collections.OrderedDict`."

#: ../../whatsnew/3.1.rst:62
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"API OrderedDict по существу аналогичен обычным словарям, но выполняет "
"перебор ключей и значений в гарантированном порядке в зависимости от того, "
"когда ключ был впервые вставлен. Если новая запись перезаписывает "
"существующую, исходная позиция вставки остается неизменной. Удаление записи "
"и повторная вставка переместит ее в конец."

#: ../../whatsnew/3.1.rst:68
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""
"Стандартная библиотека теперь поддерживает использование упорядоченных "
"словарей в нескольких модулях. Модуль :mod:`configparser` использует их по "
"умолчанию. Это позволяет читать, изменять и затем записывать файлы "
"конфигурации в исходном порядке. Метод *_asdict()* для :func:`collections."
"namedtuple` теперь возвращает упорядоченный словарь, значения которого "
"располагаются в том же порядке, что и базовые индексы кортежа. В модуль :mod:"
"`json` встроен *object_pairs_hook*, позволяющий декодеру создавать "
"OrderedDicts. Также была добавлена ​​поддержка сторонних инструментов, таких "
"как `PyYAML <https://pyyaml.org/>`_."

#: ../../whatsnew/3.1.rst:80
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - Упорядоченные словари"

#: ../../whatsnew/3.1.rst:80
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""
"PEP, написанный Армином Ронахером и Раймондом Хеттингером. Реализация "
"написана Раймондом Хеттингером."

#: ../../whatsnew/3.1.rst:83
msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""
"Поскольку упорядоченный словарь запоминает порядок вставки, его можно "
"использовать вместе с сортировкой для создания отсортированного словаря:"

#: ../../whatsnew/3.1.rst:101
msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""
"Новые отсортированные словари сохраняют свой порядок сортировки при удалении "
"записей. Но когда добавляются новые ключи, они добавляются в конец, и "
"сортировка не сохраняется."

#: ../../whatsnew/3.1.rst:107
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: спецификатор формата для разделителя тысяч"

#: ../../whatsnew/3.1.rst:109
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"Встроенная функция :func:`format` и метод :meth:`str.format` используют мини-"
"язык, который теперь включает в себя простой, не зависящий от локали способ "
"форматирования числа с разделителем тысяч. Это дает возможность очеловечить "
"вывод программы, улучшив ее профессиональный вид и читабельность:"

#: ../../whatsnew/3.1.rst:123
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"Поддерживаемые типы: :class:`int`, :class:`float`, :class:`complex` и :class:"
"`decimal.Decimal`."

#: ../../whatsnew/3.1.rst:126
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"В настоящее время ведутся дискуссии о том, как указать альтернативные "
"разделители, такие как точки, пробелы, апострофы или подчеркивания. "
"Приложения с учетом локали должны использовать существующий спецификатор "
"формата *n*, который уже имеет некоторую поддержку разделителей тысяч."

#: ../../whatsnew/3.1.rst:134
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - Описатель формата для разделителя тысяч"

#: ../../whatsnew/3.1.rst:134
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP написан Рэймондом Хеттингером и реализован Эриком Смитом и Марком "
"Дикинсоном."

#: ../../whatsnew/3.1.rst:139
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/3.1.rst:141
msgid "Some smaller changes made to the core Python language are:"
msgstr "Некоторые небольшие изменения, внесенные в основной язык Python:"

#: ../../whatsnew/3.1.rst:143
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Каталоги и zip-архивы, содержащие файл :file:`__main__.py`, теперь можно "
"запускать напрямую, передав их имя интерпретатору. Каталог/zip-файл "
"автоматически вставляется в качестве первой записи в sys.path. (Предложение "
"и первоначальный патч Энди Чу; исправленный патч Филиппа Дж. Эби и Ника "
"Коглана; :issue:`1739468`.)"

#: ../../whatsnew/3.1.rst:149
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
"Тип :func:`int` получил метод ``bit_length``, который возвращает количество "
"битов, необходимое для представления его аргумента в двоичном виде:"

#: ../../whatsnew/3.1.rst:163
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Предоставлено Фредриком Йоханссоном, Виктором Стиннером, Рэймондом "
"Хеттингером и Марком Дикинсоном; :issue:`3439`.)"

#: ../../whatsnew/3.1.rst:166
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""
"Поля в строках :func:`format` теперь могут автоматически нумероваться::"

#: ../../whatsnew/3.1.rst:172
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""
"Раньше для строки требовались пронумерованные поля, такие как: ``'Сэр {0} из "
"{1}'``."

#: ../../whatsnew/3.1.rst:175
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Предоставлено Эриком Смитом; :issue:`5237`.)"

#: ../../whatsnew/3.1.rst:177
msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""
"Функция :func:`!string.maketrans` устарела и заменена новыми статическими "
"методами: :meth:`bytes.maketrans` и :meth:`bytearray.maketrans`. Это "
"изменение решает путаницу, связанную с тем, какие типы поддерживаются "
"модулем :mod:`string`. Теперь каждый из :class:`str`, :class:`bytes` и :"
"class:`bytearray` имеет свои собственные методы **maketrans** и "
"**translate** с промежуточными таблицами перевода соответствующего типа."

#: ../../whatsnew/3.1.rst:184
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Предоставлено Георгом Брандлом; :issue:`5675`.)"

#: ../../whatsnew/3.1.rst:186
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
"Синтаксис оператора :keyword:`with` теперь позволяет использовать несколько "
"менеджеров контекста в одном операторе::"

#: ../../whatsnew/3.1.rst:194
msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""
"С новым синтаксисом функция :func:`!contextlib.nested` больше не нужна и "
"объявлена ​​устаревшей."

#: ../../whatsnew/3.1.rst:197
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Предоставлено Георгом Брандлом и Маттиасом Брендстремом; `appspot Issue "
"53094 <https://codereview.appspot.com/53094>`_.)"

#: ../../whatsnew/3.1.rst:200
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` теперь возвращает целое число, если *x* является целым "
"числом. Раньше он возвращал число с плавающей запятой::"

#: ../../whatsnew/3.1.rst:206
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Предоставлено Марком Дикинсоном; :issue:`4707`.)"

#: ../../whatsnew/3.1.rst:208
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating "
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating point numbers."
msgstr ""

#: ../../whatsnew/3.1.rst:213
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating point "
"calculations."
msgstr ""

#: ../../whatsnew/3.1.rst:221
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating point representation as being a "
"problem with Python itself)."
msgstr ""

#: ../../whatsnew/3.1.rst:230
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"Новый алгоритм repr(1.1) умнее и возвращает 1.1. По сути, он ищет все "
"эквивалентные строковые представления (те, которые хранятся с одним и тем же "
"базовым значением с плавающей запятой) и возвращает самое короткое "
"представление."

#: ../../whatsnew/3.1.rst:235
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"Новый алгоритм имеет тенденцию выдавать более чистые представления, когда "
"это возможно, но не меняет базовые значения. Таким образом, «1,1 + 2,2 != "
"3,3» по-прежнему имеет место, хотя представления могут предполагать иное."

#: ../../whatsnew/3.1.rst:239
msgid ""
"The new algorithm depends on certain features in the underlying floating "
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

#: ../../whatsnew/3.1.rst:244
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Предоставлено Эриком Смитом и Марком Дикинсоном; :issue:`1580`)"

#: ../../whatsnew/3.1.rst:247
msgid "New, Improved, and Deprecated Modules"
msgstr "Новые, улучшенные и устаревшие модули"

#: ../../whatsnew/3.1.rst:249
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""
"Добавлен класс :class:`collections.Counter` для поддержки удобного подсчета "
"уникальных элементов в последовательности или итерации::"

#: ../../whatsnew/3.1.rst:255
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Предоставлено Рэймондом Хеттингером; :issue:`1696199`.)"

#: ../../whatsnew/3.1.rst:257
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Добавлен новый модуль :mod:`tkinter.ttk` для доступа к набору виджетов на "
"тему Tk. Основная идея ttk состоит в том, чтобы отделить, насколько это "
"возможно, код, реализующий поведение виджета, от кода, реализующего его "
"внешний вид."

#: ../../whatsnew/3.1.rst:261
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Предоставлено Гильерме Поло; :issue:`2983`.)"

#: ../../whatsnew/3.1.rst:263
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
"Классы :class:`gzip.GzipFile` и :class:`bz2.BZ2File` теперь поддерживают "
"протокол управления контекстом:"

#: ../../whatsnew/3.1.rst:270
msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Предоставлено Антуаном Питру.)"

#: ../../whatsnew/3.1.rst:272
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""
"Модуль :mod:`decimal` теперь поддерживает методы создания десятичного "
"объекта из двоичного :class:`float`. Преобразование точное, но иногда может "
"быть неожиданным::"

#: ../../whatsnew/3.1.rst:279
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"Длинный десятичный результат показывает фактическую двоичную дробь, "
"сохраненную для *1,1*. Дробь имеет много цифр, поскольку *1.1* не может быть "
"точно представлено в двоичном формате."

#: ../../whatsnew/3.1.rst:283
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Сообщили Рэймонд Хеттингер и Марк Дикинсон.)"

#: ../../whatsnew/3.1.rst:285
msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
"В модуле :mod:`itertools` появились две новые функции. Функция :func:"
"`itertools.combinations_with_replacement` — одна из четырех функций для "
"генерации комбинаторики, включая перестановки и декартовы произведения. "
"Функция :func:`itertools.compress` имитирует свою тезку из APL. Кроме того, "
"существующая функция :func:`itertools.count` теперь имеет необязательный "
"аргумент *step* и может принимать любой тип последовательности счета, "
"включая :class:`fractions.Fraction` и :class:`decimal.Decimal`::"

#: ../../whatsnew/3.1.rst:304
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/3.1.rst:306
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` теперь поддерживает аргумент ключевого слова "
"*rename*, который позволяет автоматически преобразовывать недопустимые имена "
"полей в позиционные имена в форме _0, _1 и т. д. Это полезно, когда имена "
"полей создаются внешним источником, например в виде заголовка CSV, списка "
"полей SQL или пользовательского ввода::"

#: ../../whatsnew/3.1.rst:323
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Предоставлено Рэймондом Хеттингером; :issue:`1818`.)"

#: ../../whatsnew/3.1.rst:325
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
"Функции :func:`re.sub`, :func:`re.subn` и :func:`re.split` теперь принимают "
"параметр flags."

#: ../../whatsnew/3.1.rst:328
msgid "(Contributed by Gregory Smith.)"
msgstr "(Предоставлено Грегори Смитом.)"

#: ../../whatsnew/3.1.rst:330
msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
"Модуль :mod:`logging` теперь реализует простой класс :class:`logging."
"NullHandler` для приложений, которые не используют ведение журнала, но "
"вызывают код библиотеки, который его использует. Установка нулевого "
"обработчика подавляет ложные предупреждения, такие как «Не удалось найти "
"обработчики для logger foo»::"

#: ../../whatsnew/3.1.rst:338
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Предоставлено Винаем Саджипом; :issue:`4384`)."

#: ../../whatsnew/3.1.rst:340
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"Модуль :mod:`runpy`, поддерживающий ключ командной строки ``-m``, теперь "
"поддерживает выполнение пакетов путем поиска и выполнения подмодуля "
"``__main__`` при указании имени пакета."

#: ../../whatsnew/3.1.rst:344
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Предоставлено Энди Вайдой; :issue:`4195`.)"

#: ../../whatsnew/3.1.rst:346
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
"Модуль :mod:`pdb` теперь может получать доступ и отображать исходный код, "
"загруженный через :mod:`zipimport` (или любой другой совместимый :pep:`302` "
"загрузчик)."

#: ../../whatsnew/3.1.rst:349
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Contributed by Alexander Belopolsky; :issue:`4201`.)"

#: ../../whatsnew/3.1.rst:351
msgid ":class:`functools.partial` objects can now be pickled."
msgstr "Объекты :class:`functools.partial` теперь можно мариновать."

#: ../../whatsnew/3.1.rst:353
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Предложено Антуаном Питру и Джесси Ноллером. Реализовано Джеком Дидерихом; :"
"issue:`5228`.)"

#: ../../whatsnew/3.1.rst:356
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"Добавьте разделы справки :mod:`pydoc` для символов, чтобы ``help('@')`` "
"работал должным образом в интерактивной среде."

#: ../../whatsnew/3.1.rst:359
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Предоставлено Дэвидом Лабаном; :issue:`4739`.)"

#: ../../whatsnew/3.1.rst:361
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
"Модуль :mod:`unittest` теперь поддерживает пропуск отдельных тестов или "
"классов тестов. И он поддерживает пометку теста как ожидаемого сбоя, теста, "
"который, как известно, сломан, но не должен считаться сбоем в TestResult::"

#: ../../whatsnew/3.1.rst:376
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"Кроме того, были созданы тесты на исключения для работы с контекстными "
"менеджерами с использованием оператора :keyword:`with`::"

#: ../../whatsnew/3.1.rst:383
msgid ""
"In addition, several new assertion methods were added including :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, and :meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""
"Кроме того, было добавлено несколько новых методов утверждения, включая :"
"meth:`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase` .assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest .TestCase."
"assertIsNone` и :meth:`~unittest.TestCase.assertIsNotNone`."

#: ../../whatsnew/3.1.rst:394
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Сообщили Бенджамин Петерсон и Антуан Питру.)"

#: ../../whatsnew/3.1.rst:396
msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek` "
"method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and :data:`~os.SEEK_END`."
msgstr ""
"Модуль :mod:`io` имеет три новые константы для метода :meth:`~io.IOBase."
"seek`: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR` и :data. :`~os.SEEK_END`."

#: ../../whatsnew/3.1.rst:399
msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr "Кортеж :data:`sys.version_info` теперь является именованным кортежем::"

#: ../../whatsnew/3.1.rst:404
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Предоставлено Россом Лайтом; :issue:`4285`.)"

#: ../../whatsnew/3.1.rst:406
msgid "The :mod:`nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr "Модули :mod:`nntplib` и :mod:`imaplib` теперь поддерживают IPv6."

#: ../../whatsnew/3.1.rst:408
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Предоставлено Дереком Морром; :issue:`1655` и :issue:`1664`.)"

#: ../../whatsnew/3.1.rst:410
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
"Модуль :mod:`pickle` был адаптирован для лучшей совместимости с Python 2.x "
"при использовании с протоколом 2 или ниже. Реорганизация стандартной "
"библиотеки изменила формальные ссылки на многие объекты. Например, "
"``__builtin__.set`` в Python 2 называется ``builtins.set`` в Python 3. Это "
"изменение свело на нет усилия по совместному использованию данных между "
"различными версиями Python. Но теперь, когда выбран протокол 2 или ниже, "
"сборщик будет автоматически использовать старые имена Python 2 как для "
"загрузки, так и для дампа. Это переназначение включено по умолчанию, но его "
"можно отключить с помощью опции *fix_imports*::"

#: ../../whatsnew/3.1.rst:426
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"Неудачным, но неизбежным побочным эффектом этого изменения является то, что "
"огурцы протокола 2, созданные Python 3.1, не будут читабельны Python 3.0. "
"Последний протокол рассола, протокол 3, следует использовать при переносе "
"данных между реализациями Python 3.x, поскольку он не пытается оставаться "
"совместимым с Python 2.x."

#: ../../whatsnew/3.1.rst:432
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""
"(Предоставлено Александром Вассалотти и Антуаном Питру, :issue:`6137`.)"

#: ../../whatsnew/3.1.rst:434
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"Был добавлен новый модуль :mod:`importlib`. Он предоставляет полную, "
"переносимую, эталонную реализацию на чистом Python оператора :keyword:"
"`import` и его аналога, функции :func:`__import__`. Это представляет собой "
"существенный шаг вперед в документировании и определении действий, "
"происходящих во время импорта."

#: ../../whatsnew/3.1.rst:440
msgid "(Contributed by Brett Cannon.)"
msgstr "(Предоставлено Бреттом Кэнноном.)"

#: ../../whatsnew/3.1.rst:443
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/3.1.rst:445
msgid "Major performance enhancements have been added:"
msgstr "Были добавлены важные улучшения производительности:"

#: ../../whatsnew/3.1.rst:447
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"Новая библиотека ввода-вывода (как она определена в :pep:`3116`) была в "
"основном написана на Python и быстро оказалась узким местом в Python 3.0. В "
"Python 3.1 библиотека ввода-вывода была полностью переписана на C и работает "
"от 2 до 20 раз быстрее в зависимости от поставленной задачи. Чистая версия "
"Python по-прежнему доступна для экспериментов через модуль ``_pyio``."

#: ../../whatsnew/3.1.rst:454
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Сообщили Амори Форжо д'Арк и Антуан Питру.)"

#: ../../whatsnew/3.1.rst:456
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""
"Добавлена ​​эвристика, благодаря которой сборщик мусора не отслеживает кортежи "
"и словари, содержащие только неотслеживаемые объекты. Это может уменьшить "
"размер коллекций и, следовательно, накладные расходы на сбор мусора в "
"долговыполняющихся программах, в зависимости от конкретного использования "
"ими типов данных."

#: ../../whatsnew/3.1.rst:461
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Предоставлено Антуаном Питру, :issue:`4688`.)"

#: ../../whatsnew/3.1.rst:463
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"При включении опции конфигурации с именем ``--with-computed-gotos`` на "
"компиляторах, которые ее поддерживают (в частности: gcc, SunPro, icc), цикл "
"оценки байт-кода компилируется с новым механизмом диспетчеризации, который "
"дает ускорение до 20%. , в зависимости от системы, компилятора и эталона."

#: ../../whatsnew/3.1.rst:469
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr ""
"(Предоставлено Антуаном Питру вместе с рядом других участников, :issue:"
"`4753`)."

#: ../../whatsnew/3.1.rst:472
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""
"Декодирование UTF-8, UTF-16 и LATIN-1 теперь происходит в два-четыре раза "
"быстрее."

#: ../../whatsnew/3.1.rst:475
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Сообщили Антуан Питру и Амори Форжо д'Арк, :issue:`4868`.)"

#: ../../whatsnew/3.1.rst:477
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""
"Модуль :mod:`json` теперь имеет расширение C, что существенно повышает его "
"производительность. Кроме того, API был изменен так, что json работает "
"только с :class:`str`, а не с :class:`bytes`. Это изменение делает модуль "
"более близким к спецификации JSON <https://json.org/>`_, которая определена "
"в терминах Unicode."

#: ../../whatsnew/3.1.rst:483
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Разработано Бобом Ипполито и преобразовано в Py3.1 Антуаном Питру и "
"Бенджамином Петерсоном; :issue:`4136`.)"

#: ../../whatsnew/3.1.rst:486
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""
"При распаковке теперь интернируются имена атрибутов маринованных объектов. "
"Это экономит память и позволяет уменьшить размер соленых огурцов."

#: ../../whatsnew/3.1.rst:489
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Сообщили Джейк Макгуайр и Антуан Питру; :issue:`5084`.)"

#: ../../whatsnew/3.1.rst:492
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.1.rst:494
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"Меню формата IDLE теперь предоставляет возможность удалить конечные пробелы "
"из исходного файла."

#: ../../whatsnew/3.1.rst:497
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Предоставлено Роджером Д. Серви; :issue:`5150`.)"

#: ../../whatsnew/3.1.rst:500
msgid "Build and C API Changes"
msgstr "Изменения API сборки и C"

#: ../../whatsnew/3.1.rst:502
msgid "Changes to Python's build process and to the C API include:"
msgstr "Изменения в процессе сборки Python и C API включают в себя:"

#: ../../whatsnew/3.1.rst:504
msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"Целые числа теперь хранятся внутри либо в базе 2**15, либо в базе 2**30, "
"причем база определяется во время сборки. Раньше они всегда хранились в базе "
"``2**15``. Использование базы «2**30» дает значительный прирост "
"производительности на 64-битных машинах, но результаты тестов на 32-битных "
"машинах неоднозначны. Поэтому по умолчанию используется база «2**30» на 64-"
"битных машинах и база «2**15» на 32-битных машинах; в Unix появилась новая "
"опция конфигурации ``--enable-big-digits``, которую можно использовать для "
"переопределения этого значения по умолчанию."

#: ../../whatsnew/3.1.rst:513
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"Помимо улучшения производительности, это изменение должно быть незаметно для "
"конечных пользователей, за одним исключением: для целей тестирования и "
"отладки существует новый файл :data:`sys.int_info`, который предоставляет "
"информацию о внутреннем формате, указывая количество бит на цифру и размер в "
"байтах типа C, используемый для хранения каждой цифры::"

#: ../../whatsnew/3.1.rst:523
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Предоставлено Марком Дикинсоном; :issue:`4258`.)"

#: ../../whatsnew/3.1.rst:525
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
"Функция :c:func:`PyLong_AsUnsignedLongLong()` теперь обрабатывает "
"отрицательное значение *pylong*, вызывая :exc:`OverflowError` вместо :exc:"
"`TypeError`."

#: ../../whatsnew/3.1.rst:528
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Сообщили Марк Дикинсон и Лисандро Далкрин; :issue:`5175`.)"

#: ../../whatsnew/3.1.rst:530
msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""
"Устарело :c:func:`!PyNumber_Int`. Вместо этого используйте :c:func:"
"`PyNumber_Long`."

#: ../../whatsnew/3.1.rst:532
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Предоставлено Марком Дикинсоном; :issue:`4910`.)"

#: ../../whatsnew/3.1.rst:534
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and :c:func:`!"
"PyOS_ascii_atof`."
msgstr ""
"Добавлена ​​новая функция :c:func:`PyOS_string_to_double` для замены "
"устаревших функций :c:func:`!PyOS_ascii_strtod` и :c:func:`!PyOS_ascii_atof`."

#: ../../whatsnew/3.1.rst:537
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Предоставлено Марком Дикинсоном; :issue:`5914`.)"

#: ../../whatsnew/3.1.rst:539
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
"Добавлен :c:type:`PyCapsule` в качестве замены API :c:type:`!PyCObject`. "
"Принципиальное отличие состоит в том, что новый тип имеет четко определенный "
"интерфейс для передачи информации о безопасности ввода и менее сложную "
"сигнатуру для вызова деструктора. Старый тип имел проблемный API и теперь "
"устарел."

#: ../../whatsnew/3.1.rst:545
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Предоставлено Ларри Гастингсом; :issue:`5630`.)"

#: ../../whatsnew/3.1.rst:548
msgid "Porting to Python 3.1"
msgstr "Портирование на Python 3.1"

#: ../../whatsnew/3.1.rst:550
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок, которые могут потребовать внесения изменений в ваш код:"

#: ../../whatsnew/3.1.rst:553
msgid ""
"The new floating point string representations can break existing doctests. "
"For example::"
msgstr ""

#: ../../whatsnew/3.1.rst:576
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"Автоматическое переназначение имен в модуле Pickle для протокола 2 или ниже "
"может сделать Pickles Python 3.1 нечитаемыми в Python 3.0. Одним из решений "
"является использование протокола 3. Другое решение — установить для "
"параметра *fix_imports* значение «False». Подробности смотрите в обсуждении "
"выше."
