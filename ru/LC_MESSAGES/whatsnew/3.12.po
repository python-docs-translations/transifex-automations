# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 15:01+0000\n"
"PO-Revision-Date: 2025-05-08 05:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr ""
"В течение долгого времени люди искали способ написания условных выражений, "
"которые возвращают значение A или значение B в зависимости от того, является "
"ли логическое значение истинным или ложным. Условное выражение позволяет вам "
"написать один оператор присваивания, который имеет тот же эффект, что и "
"следующий:"

#: ../../whatsnew/3.12.rst:0
msgid "Editor"
msgstr "Редактор"

#: ../../whatsnew/3.12.rst:6
msgid "Adam Turner"
msgstr "Адам Тернер"

#: ../../whatsnew/3.12.rst:48
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11. "
"Python 3.12 was released on October 2, 2023. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"В этой статье объясняются новые возможности Python 3.12 по сравнению с "
"версией 3.11. Python 3.12 был выпущен 2 октября 2023 г. Подробную информацию "
"см. в журнале изменений <changelog>`."

#: ../../whatsnew/3.12.rst:54
msgid ":pep:`693` -- Python 3.12 Release Schedule"
msgstr ":pep:`693` -- График выпуска Python 3.12"

#: ../../whatsnew/3.12.rst:57
msgid "Summary -- Release highlights"
msgstr "Краткое описание - Основные моменты релиза"

#: ../../whatsnew/3.12.rst:62
msgid ""
"Python 3.12 is a stable release of the Python programming language, with a "
"mix of changes to the language and the standard library. The library changes "
"focus on cleaning up deprecated APIs, usability, and correctness. Of note, "
"the :mod:`!distutils` package has been removed from the standard library. "
"Filesystem support in :mod:`os` and :mod:`pathlib` has seen a number of "
"improvements, and several modules have better performance."
msgstr ""
"Python 3.12 — это стабильная версия языка программирования Python с "
"множеством изменений в языке и стандартной библиотеке. Изменения библиотеки "
"направлены на очистку устаревших API, удобство использования и корректность. "
"Следует отметить, что пакет :mod:`!distutils` был удален из стандартной "
"библиотеки. Поддержка файловой системы в :mod:`os` и :mod:`pathlib` "
"претерпела ряд улучшений, а некоторые модули стали работать лучше."

#: ../../whatsnew/3.12.rst:69
msgid ""
"The language changes focus on usability, as :term:`f-strings <f-string>` "
"have had many limitations removed and 'Did you mean ...' suggestions "
"continue to improve. The new :ref:`type parameter syntax <whatsnew312-"
"pep695>` and :keyword:`type` statement improve ergonomics for using :term:"
"`generic types <generic type>` and :term:`type aliases <type alias>` with "
"static type checkers."
msgstr ""
"Изменения в языке сосредоточены на удобстве использования, поскольку в :term:"
"`f-strings <f-string>` было удалено множество ограничений, а предложения "
"типа «Вы имели в виду...» продолжают улучшаться. Новый синтаксис параметра :"
"ref:`type <whatsnew312-pep695>` и оператор :keyword:`type` улучшают "
"эргономику использования :term:`generic type <generic type>` и :term:`type "
"aliases <type alias>` с проверкой статического типа."

#: ../../whatsnew/3.12.rst:76
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details, you "
"should refer to the documentation, such as the  :ref:`Library Reference "
"<library-index>` and :ref:`Language Reference <reference-index>`. If you "
"want to understand the complete implementation and design rationale for a "
"change, refer to the PEP for a particular new feature; but note that PEPs "
"usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Эта статья не пытается предоставить полную спецификацию всех новых функций, "
"а дает удобный обзор. Для получения полной информации вам следует обратиться "
"к документации, такой как :ref:`Справочник по библиотекам <library-index>` "
"и :ref:`Справочник по языку <reference-index>`. Если вы хотите понять полную "
"реализацию и обоснование изменения, обратитесь к PEP для конкретной новой "
"функции; но учтите, что PEP обычно не обновляются после полной реализации "
"функции."

#: ../../whatsnew/3.12.rst:90
msgid "New syntax features:"
msgstr "Новые возможности синтаксиса:"

#: ../../whatsnew/3.12.rst:92
msgid ""
":ref:`PEP 695 <whatsnew312-pep695>`, type parameter syntax and the :keyword:"
"`type` statement"
msgstr ""
":ref:`PEP 695 <whatsnew312-pep695>`, синтаксис параметра типа и оператор :"
"keyword:`type`"

#: ../../whatsnew/3.12.rst:94
msgid "New grammar features:"
msgstr "Новые возможности грамматики:"

#: ../../whatsnew/3.12.rst:96
msgid ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` in the "
"grammar"
msgstr ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` в "
"грамматике"

#: ../../whatsnew/3.12.rst:98
msgid "Interpreter improvements:"
msgstr "Улучшения интерпретатора:"

#: ../../whatsnew/3.12.rst:100
msgid ""
":ref:`PEP 684 <whatsnew312-pep684>`, a unique per-interpreter :term:`GIL "
"<global interpreter lock>`"
msgstr ""
":ref:`PEP 684 <whatsnew312-pep684>`, уникальный для каждого интерпретатора :"
"term:`GIL <глобальная блокировка интерпретатора>`"

#: ../../whatsnew/3.12.rst:102
msgid ":ref:`PEP 669 <whatsnew312-pep669>`, low impact monitoring"
msgstr ""
":ref:`PEP 669 <whatsnew312-pep669>`, мониторинг с низким уровнем воздействия"

#: ../../whatsnew/3.12.rst:103
msgid ""
"`Improved 'Did you mean ...' suggestions <improved error messages_>`_ for :"
"exc:`NameError`, :exc:`ImportError`, and :exc:`SyntaxError` exceptions"
msgstr ""
"`Улучшенные предложения типа \"Вы имели в виду...\" <улучшенные сообщения об "
"ошибках_>`_ для исключений :exc:`NameError`, :exc:`ImportError` и :exc:"
"`SyntaxError`"

#: ../../whatsnew/3.12.rst:106
msgid "Python data model improvements:"
msgstr "Улучшения модели данных Python:"

#: ../../whatsnew/3.12.rst:108
msgid ""
":ref:`PEP 688 <whatsnew312-pep688>`, using the :ref:`buffer protocol "
"<bufferobjects>` from Python"
msgstr ""
":ref:`PEP 688 <whatsnew312-pep688>`, используя :ref:`буферный протокол "
"<bufferobjects>` из Python"

#: ../../whatsnew/3.12.rst:111
msgid "Significant improvements in the standard library:"
msgstr "Значительные улучшения в стандартной библиотеке:"

#: ../../whatsnew/3.12.rst:113
msgid "The :class:`pathlib.Path` class now supports subclassing"
msgstr "Класс :class:`pathlib.Path` теперь поддерживает создание подклассов."

#: ../../whatsnew/3.12.rst:114
msgid "The :mod:`os` module received several improvements for Windows support"
msgstr "Модуль :mod:`os` получил несколько улучшений для поддержки Windows."

#: ../../whatsnew/3.12.rst:115
msgid ""
"A :ref:`command-line interface <sqlite3-cli>` has been added to the :mod:"
"`sqlite3` module"
msgstr ""
"В модуль :mod:`sqlite3` был добавлен :ref:`интерфейс командной строки "
"<sqlite3-cli>`."

#: ../../whatsnew/3.12.rst:117
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` enjoy a speed up of between two and 20 times"
msgstr ""
":func:`isinstance` проверяет :func:`проверяемые во время выполнения "
"протоколы <typing.runtime_checkable>` имеет ускорение от 2 до 20 раз"

#: ../../whatsnew/3.12.rst:119
msgid ""
"The :mod:`asyncio` package has had a number of performance improvements, "
"with some benchmarks showing a 75% speed up."
msgstr ""
"Пакет :mod:`asyncio` имеет ряд улучшений производительности, при этом "
"некоторые тесты показывают увеличение скорости на 75%."

#: ../../whatsnew/3.12.rst:121
msgid ""
"A :ref:`command-line interface <uuid-cli>` has been added to the :mod:`uuid` "
"module"
msgstr ""
"В модуль :mod:`uuid` был добавлен :ref:`интерфейс командной строки <uuid-"
"cli>`."

#: ../../whatsnew/3.12.rst:123
msgid ""
"Due to the changes in :ref:`PEP 701 <whatsnew312-pep701>`, producing tokens "
"via the :mod:`tokenize` module is up to 64% faster."
msgstr ""
"Благодаря изменениям в :ref:`PEP 701 <whatsnew312-pep701>` создание токенов "
"с помощью модуля :mod:`tokenize` происходит до 64% ​​быстрее."

#: ../../whatsnew/3.12.rst:126
msgid "Security improvements:"
msgstr "Улучшения безопасности:"

#: ../../whatsnew/3.12.rst:128
msgid ""
"Replace the builtin :mod:`hashlib` implementations of SHA1, SHA3, SHA2-384, "
"SHA2-512, and MD5 with formally verified code from the `HACL* <https://"
"github.com/hacl-star/hacl-star/>`__ project. These builtin implementations "
"remain as fallbacks that are only used when OpenSSL does not provide them."
msgstr ""
"Замените встроенные реализации :mod:`hashlib` SHA1, SHA3, SHA2-384, SHA2-512 "
"и MD5 формально проверенным кодом из `HACL* <https://github.com/hacl-star/"
"hacl-star />`__ проект. Эти встроенные реализации остаются запасными "
"вариантами, которые используются только тогда, когда OpenSSL их не "
"предоставляет."

#: ../../whatsnew/3.12.rst:134
msgid "C API improvements:"
msgstr "Улучшения в C API:"

#: ../../whatsnew/3.12.rst:136
msgid ":ref:`PEP 697 <whatsnew312-pep697>`, unstable C API tier"
msgstr ":ref:`PEP 697 <whatsnew312-pep697>`, нестабильный уровень C API"

#: ../../whatsnew/3.12.rst:137
msgid ":ref:`PEP 683 <whatsnew312-pep683>`, immortal objects"
msgstr ":ref:`PEP 683 <whatsnew312-pep683>`, бессмертные объекты"

#: ../../whatsnew/3.12.rst:139
msgid "CPython implementation improvements:"
msgstr "Улучшения в реализации CPython:"

#: ../../whatsnew/3.12.rst:141
msgid ":ref:`PEP 709 <whatsnew312-pep709>`, comprehension inlining"
msgstr ":ref:`PEP 709 <whatsnew312-pep709>`, встраивание понимания"

#: ../../whatsnew/3.12.rst:142
msgid ":ref:`CPython support <perf_profiling>` for the Linux ``perf`` profiler"
msgstr ""
":ref:`Поддержка CPython <perf_profiling>` для профилировщика ``perf`` Linux"

#: ../../whatsnew/3.12.rst:143
msgid "Implement stack overflow protection on supported platforms"
msgstr "Внедрить защиту от переполнения стека на поддерживаемых платформах."

#: ../../whatsnew/3.12.rst:145
msgid "New typing features:"
msgstr "Новые возможности набора текста:"

#: ../../whatsnew/3.12.rst:147
msgid ""
":ref:`PEP 692 <whatsnew312-pep692>`, using :class:`~typing.TypedDict` to "
"annotate :term:`**kwargs <argument>`"
msgstr ""
":ref:`PEP 692 <whatsnew312-pep692>`, используя :class:`~typing.TypedDict` "
"для аннотации :term:`**kwargs <аргумент>`"

#: ../../whatsnew/3.12.rst:149
msgid ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` decorator"
msgstr ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` декоратор"

#: ../../whatsnew/3.12.rst:151
msgid "Important deprecations, removals or restrictions:"
msgstr "Важные устаревания, удаления или ограничения:"

#: ../../whatsnew/3.12.rst:153
msgid ""
":pep:`623`: Remove ``wstr`` from Unicode objects in Python's C API, reducing "
"the size of every :class:`str` object by at least 8 bytes."
msgstr ""
":pep:`623`: Удалите ``wstr`` из объектов Unicode в C API Python, уменьшив "
"размер каждого объекта :class:`str` как минимум на 8 байт."

#: ../../whatsnew/3.12.rst:156
msgid ""
":pep:`632`: Remove the :mod:`!distutils` package. See :pep:`the migration "
"guide <0632#migration-advice>` for advice replacing the APIs it provided. "
"The third-party `Setuptools <https://setuptools.pypa.io/en/latest/deprecated/"
"distutils-legacy.html>`__ package continues to provide :mod:`!distutils`, if "
"you still require it in Python 3.12 and beyond."
msgstr ""
":pep:`632`: Удалите пакет :mod:`!distutils`. См. :pep:`руководство по "
"миграции <0632#migration-advice>` для получения рекомендаций по замене "
"предоставляемых API. Сторонний пакет `Setuptools <https://setuptools.pypa.io/"
"en/latest/deprecated/distutils-legacy.html>`__ продолжает предоставлять :mod:"
"`!distutils`, если он вам все еще требуется в Python. 3.12 и выше."

#: ../../whatsnew/3.12.rst:163
msgid ""
":gh:`95299`: Do not pre-install ``setuptools`` in virtual environments "
"created with :mod:`venv`. This means that ``distutils``, ``setuptools``, "
"``pkg_resources``, and ``easy_install`` will no longer available by default; "
"to access these run ``pip install setuptools`` in the :ref:`activated <venv-"
"explanation>` virtual environment."
msgstr ""
":gh:`95299`: Не устанавливайте предварительно ``setuptools`` в виртуальных "
"средах, созданных с помощью :mod:`venv`. Это означает, что ``distutils``, "
"``setuptools``, ``pkg_resources`` и ``easy_install`` больше не будут "
"доступны по умолчанию; чтобы получить к ним доступ, запустите ``pip install "
"setuptools`` в :ref:`активированной <venv-explanation>` виртуальной среде."

#: ../../whatsnew/3.12.rst:170
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore`, and :mod:`!imp` modules have been "
"removed, along with several :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."
msgstr ""
"Модули :mod:`!asynchat`, :mod:`!asyncore` и :mod:`!imp` были удалены вместе "
"с несколькими псевдонимами методов :class:`unittest.TestCase` <unittest-"
"TestCase-removed -aliases_>`_."

#: ../../whatsnew/3.12.rst:176 ../../whatsnew/3.12.rst:1840
msgid "New Features"
msgstr "Новые особенности"

#: ../../whatsnew/3.12.rst:181
msgid "PEP 695: Type Parameter Syntax"
msgstr "PEP 695: Синтаксис параметра типа"

#: ../../whatsnew/3.12.rst:183
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose "
"syntax that left the scope of type parameters unclear and required explicit "
"declarations of variance."
msgstr ""
"Универсальные классы и функции под :pep:`484` были объявлены с "
"использованием подробного синтаксиса, который оставлял неясной область "
"действия параметров типа и требовал явных объявлений отклонений."

#: ../../whatsnew/3.12.rst:187
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create :ref:"
"`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""
":pep:`695` представляет новый, более компактный и явный способ создания :ref:"
"`универсальных классов <generic-classes>` и :ref:`функций <generic-"
"functions>`::"

#: ../../whatsnew/3.12.rst:190
msgid ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."
msgstr ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."

#: ../../whatsnew/3.12.rst:200
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""
"Кроме того, PEP представляет новый способ объявления :ref:`type aliases "
"<type-aliases>` с помощью оператора :keyword:`type`, который создает "
"экземпляр :class:`~typing.TypeAliasType`::"

#: ../../whatsnew/3.12.rst:204
msgid "type Point = tuple[float, float]"
msgstr "type Point = tuple[float, float]"

#: ../../whatsnew/3.12.rst:206
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr ""
"Псевдонимы типов также могут быть :ref:`generic <generic-type-aliases>`::"

#: ../../whatsnew/3.12.rst:208
msgid "type Point[T] = tuple[T, T]"
msgstr "type Point[T] = tuple[T, T]"

#: ../../whatsnew/3.12.rst:210
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and :class:"
"`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""
"Новый синтаксис позволяет объявлять параметры :class:`~typing.TypeVarTuple` "
"и :class:`~typing.ParamSpec`, а также параметры :class:`~typing.TypeVar` с "
"границами или ограничениями::"

#: ../../whatsnew/3.12.rst:214
msgid ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with "
"constraints"
msgstr ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with "
"constraints"

#: ../../whatsnew/3.12.rst:219
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy "
"evaluation <lazy-evaluation>`). This means type aliases are able to refer to "
"other types defined later in the file."
msgstr ""
"Значения псевдонимов типов, а также привязки и ограничения переменных типов, "
"созданных с помощью этого синтаксиса, оцениваются только по запросу (см. :"
"ref:`lazy Assessment <lazy-evaluation>`). Это означает, что псевдонимы типов "
"могут ссылаться на другие типы, определенные позже в файле."

#: ../../whatsnew/3.12.rst:224
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods "
"of a generic class or in the class body. However, they cannot be used in the "
"module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""
"Параметры типа, объявленные через список параметров типа, видны в области "
"объявления и любых вложенных областях, но не во внешней области. Например, "
"их можно использовать в аннотациях типов методов универсального класса или в "
"теле класса. Однако их нельзя использовать в области модуля после "
"определения класса. См. :ref:`type-params` для подробного описания семантики "
"параметров типа во время выполнения."

#: ../../whatsnew/3.12.rst:231
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""
"Для поддержки этой семантики области введен новый тип области — :ref:"
"`область аннотации <annotation-scopes>`. Области аннотаций по большей части "
"ведут себя как области функций, но по-другому взаимодействуют с областями "
"охватывающих классов. В Python 3.13 :term:`annotations <annotation>` также "
"будет оцениваться в областях аннотаций."

#: ../../whatsnew/3.12.rst:237
msgid "See :pep:`695` for more details."
msgstr "См. :pep:`695` для более подробной информации."

#: ../../whatsnew/3.12.rst:239
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""
"(PEP написан Эриком Траутом. Реализация Джелле Зийлстра, Эрика Траута и "
"других в :gh:`103764`.)"

#: ../../whatsnew/3.12.rst:245
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr "PEP 701: Синтаксическая формализация f-строк"

#: ../../whatsnew/3.12.rst:247
msgid ""
":pep:`701` lifts some restrictions on the usage of :term:`f-strings <f-"
"string>`. Expression components inside f-strings can now be any valid Python "
"expression, including strings reusing the same quote as the containing f-"
"string, multi-line expressions, comments, backslashes, and unicode escape "
"sequences. Let's cover these in detail:"
msgstr ""
":pep:`701` снимает некоторые ограничения на использование :term:`f-strings "
"<f-string>`. Компонентами выражения внутри f-строки теперь могут быть любые "
"допустимые выражения Python, включая строки, повторно использующие ту же "
"кавычку, что и содержащая f-строка, многострочные выражения, комментарии, "
"обратную косую черту и escape-последовательности Юникода. Давайте рассмотрим "
"их подробно:"

#: ../../whatsnew/3.12.rst:253
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the enclosing f-"
"string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""
"Повторное использование цитат: в Python 3.11 повторное использование тех же "
"кавычек, что и включающая f-строка, вызывает :exc:`SyntaxError`, вынуждая "
"пользователя либо использовать другие доступные кавычки (например, "
"использовать двойные или тройные кавычки, если f-строка использует одинарные "
"кавычки). кавычки). В Python 3.12 теперь можно делать такие вещи:"

#: ../../whatsnew/3.12.rst:262
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be written:"
msgstr ""
"Обратите внимание, что до этого изменения не было явного ограничения на "
"вложение f-строк, но тот факт, что строковые кавычки не могут быть повторно "
"использованы внутри компонента выражения f-строк, делал невозможным "
"произвольное вложение f-строк. Фактически, это самая вложенная f-строка, "
"которую можно написать:"

#: ../../whatsnew/3.12.rst:270
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr ""
"Поскольку теперь f-строки могут содержать любое допустимое выражение Python "
"внутри компонентов выражения, теперь можно произвольно вкладывать f-строки:"

#: ../../whatsnew/3.12.rst:276
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-string expressions "
"must be defined in a single line, even if the expression within the f-string "
"could normally span multiple lines (like literal lists being defined over "
"multiple lines), making them harder to read. In Python 3.12 you can now "
"define f-strings spanning multiple lines, and add inline comments:"
msgstr ""
"Многострочные выражения и комментарии. В Python 3.11 выражения f-строки "
"должны быть определены в одной строке, даже если выражение внутри f-строки "
"обычно может занимать несколько строк (например, списки букв, определяемые в "
"нескольких строках), что делает их труднее читать. В Python 3.12 теперь "
"можно определять f-строки, охватывающие несколько строк, и добавлять "
"встроенные комментарии:"

#: ../../whatsnew/3.12.rst:290
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode :ref:"
"`escape sequences <escape-sequences>` (such as ``\\N{snowman}``) as these "
"contain the ``\\N`` part that previously could not be part of expression "
"components of f-strings. Now, you can define expressions like this:"
msgstr ""
"Обратная косая черта и символы Юникода: до Python 3.12 выражения f-строки не "
"могли содержать никаких символов ``\\``. Это также коснулось :ref:`escape-"
"последовательностей <escape-sequences>` (таких как ``\\N{snowman}``), "
"поскольку они содержат часть ``\\N``, которая ранее не могла быть частью "
"компонентов выражения фа-струны. Теперь вы можете определять выражения "
"следующим образом:"

#: ../../whatsnew/3.12.rst:303
msgid "See :pep:`701` for more details."
msgstr "См. :pep:`701` для более подробной информации."

#: ../../whatsnew/3.12.rst:305
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with :pep:`the PEG parser <617>`), now error messages for "
"f-strings are more precise and include the exact location of the error. For "
"example, in Python 3.11, the following f-string raises a :exc:`SyntaxError`:"
msgstr ""
"Положительным побочным эффектом реализации этой функции (путем анализа f-"
"строк с помощью :pep:`анализатора PEG <617>`) теперь сообщения об ошибках "
"для f-строк стали более точными и включают точное местоположение ошибка. "
"Например, в Python 3.11 следующая f-строка вызывает ошибку :exc:"
"`SyntaxError`:"

#: ../../whatsnew/3.12.rst:310
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:318
msgid ""
"but the error message doesn't include the exact location of the error within "
"the line and also has the expression artificially surrounded by parentheses. "
"In Python 3.12, as f-strings are parsed with the PEG parser, error messages "
"can be more precise and show the entire line:"
msgstr ""
"но сообщение об ошибке не содержит точного местоположения ошибки внутри "
"строки, а также содержит выражение, искусственно заключенное в круглые "
"скобки. В Python 3.12, поскольку f-строки анализируются с помощью "
"анализатора PEG, сообщения об ошибках могут быть более точными и отображать "
"всю строку:"

#: ../../whatsnew/3.12.rst:322
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:330
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""
"(Сообщили Пабло Галиндо, Батухан Таская, Лисандрос Николау, Кристиан "
"Маурейра-Фредес и Марта Гомес в :gh:`102856`. PEP, написанный Пабло Галиндо, "
"Батухан Таская, Лисандросом Николау и Мартой Гомес)."

#: ../../whatsnew/3.12.rst:337
msgid "PEP 684: A Per-Interpreter GIL"
msgstr "PEP 684: GIL для каждого интерпретатора"

#: ../../whatsnew/3.12.rst:339
msgid ""
":pep:`684` introduces a per-interpreter :term:`GIL <global interpreter "
"lock>`, so that sub-interpreters may now be created with a unique GIL per "
"interpreter. This allows Python programs to take full advantage of multiple "
"CPU cores. This is currently only available through the C-API, though a "
"Python API is :pep:`anticipated for 3.13 <554>`."
msgstr ""
":pep:`684` вводит :term:`GIL <глобальная блокировка интерпретатора>` для "
"каждого интерпретатора, так что субинтерпретаторы теперь могут создаваться с "
"уникальным GIL для каждого интерпретатора. Это позволяет программам Python в "
"полной мере использовать преимущества нескольких ядер ЦП. В настоящее время "
"это доступно только через C-API, хотя API Python :pep:`ожидается в версии "
"3.13 <554>`."

#: ../../whatsnew/3.12.rst:345
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL:"
msgstr ""
"Используйте новую функцию :c:func:`Py_NewInterpreterFromConfig` для создания "
"интерпретатора с собственным GIL:"

#: ../../whatsnew/3.12.rst:348
msgid ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* The new interpreter is now active in the current thread. */"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* The new interpreter is now active in the current thread. */"

#: ../../whatsnew/3.12.rst:361
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see ``Modules/_xxsubinterpretersmodule.c``."
msgstr ""
"Дополнительные примеры использования C-API для субинтерпретаторов с GIL для "
"каждого интерпретатора см. в ``Modules/_xxsubinterpretersmodule.c``."

#: ../../whatsnew/3.12.rst:364
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr "(Предоставлено Эриком Сноу в :gh:`104210` и т. д.)"

#: ../../whatsnew/3.12.rst:369
msgid "PEP 669: Low impact monitoring for CPython"
msgstr "PEP 669: мониторинг с низким уровнем воздействия для CPython"

#: ../../whatsnew/3.12.rst:371
msgid ""
":pep:`669` defines a new :mod:`API <sys.monitoring>` for profilers, "
"debuggers, and other tools to monitor events in CPython. It covers a wide "
"range of events, including calls, returns, lines, exceptions, jumps, and "
"more. This means that you only pay for what you use, providing support for "
"near-zero overhead debuggers and coverage tools. See  :mod:`sys.monitoring` "
"for details."
msgstr ""
":pep:`669` определяет новый :mod:`API <sys.monitoring>` для профилировщиков, "
"отладчиков и других инструментов для мониторинга событий в CPython. Он "
"охватывает широкий спектр событий, включая вызовы, возвраты, линии, "
"исключения, переходы и многое другое. Это означает, что вы платите только за "
"то, что используете, обеспечивая поддержку почти нулевых накладных расходов "
"отладчиков и инструментов покрытия. Подробности смотрите в :mod:`sys."
"monitoring`."

#: ../../whatsnew/3.12.rst:379
msgid "(Contributed by Mark Shannon in :gh:`103082`.)"
msgstr "(Предоставлено Марком Шенноном в :gh:`103082`.)"

#: ../../whatsnew/3.12.rst:384
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr "PEP 688: обеспечение доступности протокола буфера в Python"

#: ../../whatsnew/3.12.rst:386
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the :meth:`~object."
"__buffer__` method are now usable as buffer types."
msgstr ""
":pep:`688` представляет способ использования :ref:`буферного протокола "
"<bufferobjects>` из кода Python. Классы, реализующие метод :meth:`~object."
"__buffer__`, теперь можно использовать как типы буферов."

#: ../../whatsnew/3.12.rst:390
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new :class:"
"`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""
"Новый :class:`collections.abc.Buffer` ABC обеспечивает стандартный способ "
"представления объектов буфера, например, в аннотациях типов. Новое "
"перечисление :class:`inspect.BufferFlags` представляет флаги, которые можно "
"использовать для настройки создания буфера. (Предоставлено Джелле Зийлстра "
"в :gh:`102500`.)"

#: ../../whatsnew/3.12.rst:399
msgid "PEP 709: Comprehension inlining"
msgstr "PEP 709: Встраивание понимания"

#: ../../whatsnew/3.12.rst:401
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to two "
"times. See :pep:`709` for further details."
msgstr ""
"Понимания словарей, списков и множеств теперь встроены, а не создают новый "
"одноразовый функциональный объект для каждого выполнения понимания. Это "
"ускоряет выполнение понимания до двух раз. Дополнительную информацию см. в :"
"pep:`709`."

#: ../../whatsnew/3.12.rst:406
msgid ""
"Comprehension iteration variables remain isolated and don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the "
"comprehension. Inlining does result in a few visible behavior changes:"
msgstr ""
"Переменные итерации понимания остаются изолированными и не перезаписывают "
"переменную с тем же именем во внешней области, а также не становятся "
"видимыми после понимания. Встраивание действительно приводит к нескольким "
"видимым изменениям в поведении:"

#: ../../whatsnew/3.12.rst:410
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and "
"tracing/profiling no longer shows the comprehension as a function call."
msgstr ""
"В обратных трассировках больше нет отдельного кадра для понимания, а "
"трассировка/профилирование больше не отображает понимание как вызов функции."

#: ../../whatsnew/3.12.rst:412
msgid ""
"The :mod:`symtable` module will no longer produce child symbol tables for "
"each comprehension; instead, the comprehension's locals will be included in "
"the parent function's symbol table."
msgstr ""
"Модуль :mod:`symtable` больше не будет создавать дочерние таблицы символов "
"для каждого понимания; вместо этого локальные значения понимания будут "
"включены в таблицу символов родительской функции."

#: ../../whatsnew/3.12.rst:415
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr ""
"Вызов :func:`locals` внутри понимания теперь включает переменные извне "
"понимания и больше не включает синтетическую переменную ``.0`` для "
"\"аргумента\" понимания."

#: ../../whatsnew/3.12.rst:418
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is "
"the same behavior already seen in e.g. ``for k in locals():``. To avoid the "
"error, first create a list of keys to iterate over: ``keys = list(locals()); "
"[k for k in keys]``."
msgstr ""
"Понимание, выполняющее итерацию непосредственно по ``locals()`` (например, "
"``[k for k in locals()]``), может увидеть сообщение «RuntimeError: словарь "
"изменил размер во время итерации» при запуске в режиме трассировки "
"(например, измерение покрытия кода). Это то же самое поведение, которое уже "
"наблюдалось, например, в ``for k in locals():``. Чтобы избежать ошибки, "
"сначала создайте список ключей для перебора: ``keys = list(locals()); [k "
"вместо k в ключах]``."

#: ../../whatsnew/3.12.rst:425
msgid "(Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`.)"
msgstr "(Предоставлено Карлом Мейером и Владимиром Матвеевым в :pep:`709`.)"

#: ../../whatsnew/3.12.rst:428
msgid "Improved Error Messages"
msgstr "Улучшенные сообщения об ошибках"

#: ../../whatsnew/3.12.rst:430
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. (Contributed by Pablo Galindo in :gh:`98254`.)"
msgstr ""
"Модули из стандартной библиотеки теперь потенциально предлагаются как часть "
"сообщений об ошибках, отображаемых интерпретатором, когда :exc:`NameError` "
"поднимается на верхний уровень. (Предоставлено Пабло Галиндо в :gh:`98254`.)"

#: ../../whatsnew/3.12.rst:439
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. (Contributed by Pablo Galindo in :gh:`99139`.)"
msgstr ""
"Улучшите предложение ошибок для исключений :exc:`NameError` для экземпляров. "
"Теперь, если в методе возникает ошибка :exc:`NameError` и экземпляр имеет "
"атрибут, точно равный имени в исключении, предложение будет включать ``self."
"<NAME>`` вместо ближайшего совпадения в область действия метода. "
"(Предоставлено Пабло Галиндо в :gh:`99139`.)"

#: ../../whatsnew/3.12.rst:459
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. (Contributed by Pablo Galindo in :"
"gh:`98931`.)"
msgstr ""
"Улучшите сообщение об ошибке :exc:`SyntaxError`, когда пользователь вводит "
"``import x from y`` вместо ``from y import x``. (Предоставлено Пабло Галиндо "
"в :gh:`98931`.)"

#: ../../whatsnew/3.12.rst:469
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. (Contributed by Pablo Galindo "
"in :gh:`91058`.)"
msgstr ""
"Исключения :exc:`ImportError`, возникающие из-за неудачных операторов ``from "
"<module> import <name>``, теперь включают предложения для значения "
"``<name>`` на основе доступных имен в ``<module>`` . (Предоставлено Пабло "
"Галиндо в :gh:`91058`.)"

#: ../../whatsnew/3.12.rst:480
msgid "New Features Related to Type Hints"
msgstr "Новые функции, связанные с подсказками типов"

#: ../../whatsnew/3.12.rst:482
msgid ""
"This section covers major changes affecting :pep:`type hints <484>` and the :"
"mod:`typing` module."
msgstr ""
"В этом разделе рассматриваются основные изменения, затрагивающие :pep:"
"`typehints <484>` и модуль :mod:`typing`."

#: ../../whatsnew/3.12.rst:488
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr "PEP 692: Использование TypedDict для более точного ввода ``**kwargs``"

#: ../../whatsnew/3.12.rst:490
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""
"Ввод ``**kwargs`` в сигнатуру функции, введенную :pep:`484`, позволял "
"использовать действительные аннотации только в тех случаях, когда все "
"``**kwargs`` были одного типа."

#: ../../whatsnew/3.12.rst:494
msgid ""
":pep:`692` specifies a more precise way of typing ``**kwargs`` by relying on "
"typed dictionaries::"
msgstr ""
":pep:`692` определяет более точный способ ввода ``**kwargs``, используя "
"типизированные словари::"

#: ../../whatsnew/3.12.rst:497
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../whatsnew/3.12.rst:505
msgid "See :pep:`692` for more details."
msgstr "См. :pep:`692` для более подробной информации."

#: ../../whatsnew/3.12.rst:507
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr "(Предоставлено Франеком Магьерой в :gh:`103629`.)"

#: ../../whatsnew/3.12.rst:512
msgid "PEP 698: Override Decorator for Static Typing"
msgstr "PEP 698: декоратор переопределения для статической типизации"

#: ../../whatsnew/3.12.rst:514
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""
"В модуль :mod:`typing` добавлен новый декоратор :func:`typing.override`. Это "
"указывает средствам проверки типов, что метод предназначен для "
"переопределения метода в суперклассе. Это позволяет средствам проверки типов "
"выявлять ошибки, когда метод, предназначенный для переопределения чего-либо "
"в базовом классе, на самом деле этого не делает."

#: ../../whatsnew/3.12.rst:520
msgid "Example::"
msgstr "Пример::"

#: ../../whatsnew/3.12.rst:522
msgid ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # ok: overrides Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # type checker error: does not override Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""
msgstr ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # ok: overrides Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # type checker error: does not override Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""

#: ../../whatsnew/3.12.rst:538
msgid "See :pep:`698` for more details."
msgstr "См. :pep:`698` для более подробной информации."

#: ../../whatsnew/3.12.rst:540
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr "(Предоставлено Стивеном Трокслером в :gh:`101561`.)"

#: ../../whatsnew/3.12.rst:543
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/3.12.rst:545
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing "
"null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""
"Парсер теперь выдает :exc:`SyntaxError` при анализе исходного кода, "
"содержащего нулевые байты. (Предоставлено Пабло Галиндо в :gh:`96670`.)"

#: ../../whatsnew/3.12.rst:548
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence, use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``). In a future Python version, :"
"exc:`SyntaxError` will eventually be raised, instead of :exc:"
"`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"Пара символов обратной косой черты, которая не является допустимой escape-"
"последовательностью, теперь генерирует :exc:`SyntaxWarning` вместо :exc:"
"`DeprecationWarning`. Например, ``re.compile(\"\\d+\\.\\d+\")`` теперь "
"выдает :exc:`SyntaxWarning` (``\"\\d\"`` является недопустимой escape-"
"последовательностью, используйте необработанные строки для регулярного "
"выражения. : ``re.compile(r\"\\d+\\.\\d+\")``). В будущей версии Python в "
"конечном итоге будет выдаваться :exc:`SyntaxError` вместо :exc:"
"`SyntaxWarning`. (Предоставлено Виктором Стиннером в :gh:`98401`.)"

#: ../../whatsnew/3.12.rst:557
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of :"
"exc:`DeprecationWarning`. In a future Python version they will be eventually "
"a :exc:`SyntaxError`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"Восьмеричные escape-последовательности со значением больше ``0o377`` "
"(например: ``\"\\477\"``), которые устарели в Python 3.11, теперь создают :"
"exc:`SyntaxWarning` вместо :exc:`DeprecationWarning`. В будущей версии "
"Python они в конечном итоге станут :exc:`SyntaxError`. (Предоставлено "
"Виктором Стиннером в :gh:`98401`.)"

#: ../../whatsnew/3.12.rst:563
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b := "
"1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""
"Переменные, используемые в целевой части понятий, которые не сохраняются, "
"теперь могут использоваться в выражениях присваивания (``:=``). Например, в "
"``[(b := 1) for a, b.prop in some_iter]`` теперь разрешено присвоение ``b``. "
"Обратите внимание, что присвоение переменных, хранящихся в целевой части "
"понимания (например, ``a``), по-прежнему запрещено, согласно :pep:`572`. "
"(Добавлен Никитой Соболевым в :gh:`100581`.)"

#: ../../whatsnew/3.12.rst:570
msgid ""
"Exceptions raised in a class or type's ``__set_name__`` method are no longer "
"wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in :gh:`77757`.)"
msgstr ""
"Исключения, возникающие в методе ``__set_name__`` класса или типа, больше не "
"оборачиваются :exc:`RuntimeError`. Контекстная информация добавляется к "
"исключению в виде примечания :pep:`678`. (Предоставлено Ирит Катриэль в :gh:"
"`77757`.)"

#: ../../whatsnew/3.12.rst:574
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an :"
"exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""
"Когда конструкция Try-Exception* обрабатывает всю :exc:`ExceptionGroup` и "
"вызывает еще одно исключение, это исключение больше не заключено в :exc:"
"`ExceptionGroup`. Также изменено в версии 3.11.4. (Предоставлено Ирит "
"Катриэль в :gh:`103590`.)"

#: ../../whatsnew/3.12.rst:579
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in :gh:"
"`97922`.)"
msgstr ""
"Сборщик мусора теперь работает только на механизме прерывания eval цикла "
"оценки байт-кода Python, а не на выделении объектов. Сборщик мусора также "
"может запускаться при вызове :c:func:`PyErr_CheckSignals`, поэтому "
"расширения C, которым необходимо работать в течение длительного времени без "
"выполнения какого-либо кода Python, также имеют возможность периодически "
"выполнять сборщик мусора. (Предоставлено Пабло Галиндо в :gh:`97922`.)"

#: ../../whatsnew/3.12.rst:586
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""
"Все встроенные и расширенные вызываемые объекты, ожидающие логические "
"параметры, теперь принимают аргументы любого типа, а не только :class:`bool` "
"и :class:`int`. (Предоставлено Сергеем Сторчакой в ​​:gh:`60203`.)"

#: ../../whatsnew/3.12.rst:590
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Donghee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""
":class:`memoryview` теперь поддерживает тип half-float (код формата \"e\"). "
"(Предоставлено Донхи На и Антуаном Питру в :gh:`90751`.)"

#: ../../whatsnew/3.12.rst:593
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond "
"Hettinger in :gh:`101264`.)"
msgstr ""
"Объекты :class:`slice` теперь хешируются, что позволяет использовать их в "
"качестве ключей dict и элементов набора. (Предоставлено Уиллом Брэдшоу, "
"Фурканом Ондером и Рэймондом Хеттингером в :gh:`101264`.)"

#: ../../whatsnew/3.12.rst:596
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy and "
"commutativity when summing floats or mixed ints and floats. (Contributed by "
"Raymond Hettinger in :gh:`100425`.)"
msgstr ""
":func:`sum` теперь использует суммирование Ноймайера для повышения точности "
"и коммутативности при суммировании чисел с плавающей точкой или смешанных "
"чисел и чисел с плавающей запятой. (Предоставлено Рэймондом Хеттингером в :"
"gh:`100425`.)"

#: ../../whatsnew/3.12.rst:600
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError` "
"when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""
":func:`ast.parse` теперь вызывает :exc:`SyntaxError` вместо :exc:"
"`ValueError` при анализе исходного кода, содержащего нулевые байты. "
"(Предоставлено Пабло Галиндо в :gh:`96670`.)"

#: ../../whatsnew/3.12.rst:604
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile extraction filters <tarfile-extraction-filter>` "
"for details. In Python 3.14, the default will switch to ``'data'``. "
"(Contributed by Petr Viktorin in :pep:`706`.)"
msgstr ""
"Методы извлечения в :mod:`tarfile` и :func:`shutil.unpack_archive` имеют "
"новый аргумент *filter*, который позволяет ограничить возможности tar, "
"которые могут быть неожиданными или опасными, например создание файлов вне "
"каталога назначения. Подробности смотрите в разделе :ref:`фильтры извлечения "
"tarfile <tarfile-extraction-filter>`. В Python 3.14 значение по умолчанию "
"переключится на ``'data'``. (Предоставлено Петром Викториным в :pep:`706`.)"

#: ../../whatsnew/3.12.rst:612
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying "
"mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""
"Экземпляры :class:`types.MappingProxyType` теперь хешируются, если базовое "
"сопоставление хешируется. (Предоставлено Сергеем Сторчакой в ​​:gh:`87995`.)"

#: ../../whatsnew/3.12.rst:616
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` through the new "
"environment variable :envvar:`PYTHONPERFSUPPORT` and command-line option :"
"option:`-X perf <-X>`, as well as the new :func:`sys."
"activate_stack_trampoline`, :func:`sys.deactivate_stack_trampoline`, and :"
"func:`sys.is_stack_trampoline_active` functions. (Design by Pablo Galindo. "
"Contributed by Pablo Galindo and Christian Heimes with contributions from "
"Gregory P. Smith [Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"Добавьте :ref:`поддержку профилировщика производительности <perf_profiling>` "
"через новую переменную среды :envvar:`PYTHONPERFSUPPORT` и параметр "
"командной строки :option:`-X perf <-X>`, а также новый :func Функции :`sys."
"activate_stack_trampoline`, :func:`sys.deactivate_stack_trampoline` и :func:"
"`sys.is_stack_trampoline_active`. (Дизайн Пабло Галиндо. Предоставлено Пабло "
"Галиндо и Кристианом Хеймсом при участии Грегори П. Смита [Google] и Марка "
"Шеннона в :gh:`96123`.)"

#: ../../whatsnew/3.12.rst:628
msgid "New Modules"
msgstr "Новые модули"

#: ../../whatsnew/3.12.rst:630
msgid "None."
msgstr "None."

#: ../../whatsnew/3.12.rst:634
msgid "Improved Modules"
msgstr "Улучшенные модули"

#: ../../whatsnew/3.12.rst:637
msgid "array"
msgstr "array"

#: ../../whatsnew/3.12.rst:639
msgid ""
"The :class:`array.array` class now supports subscripting, making it a :term:"
"`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""
"Класс :class:`array.array` теперь поддерживает индексирование, что делает "
"его :term:`универсальным типом`. (Предоставлено Джелле Зийлстра в :gh:"
"`98658`.)"

#: ../../whatsnew/3.12.rst:643
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.12.rst:645
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""
"Значительно улучшена производительность записи в сокеты в :mod:`asyncio`. "
"``asyncio`` теперь позволяет избежать ненужного копирования при записи в "
"сокеты и использует :meth:`~socket.socket.sendmsg`, если платформа "
"поддерживает это. (Предоставлено Кумаром Адитьей в :gh:`91166`.)"

#: ../../whatsnew/3.12.rst:650
msgid ""
"Add :func:`asyncio.eager_task_factory` and :func:`asyncio."
"create_eager_task_factory` functions to allow opting an event loop in to "
"eager task execution, making some use-cases 2x to 5x faster. (Contributed by "
"Jacob Bower & Itamar Oren in :gh:`102853`, :gh:`104140`, and :gh:`104138`)"
msgstr ""
"Добавьте функции :func:`asyncio.eager_task_factory` и :func:`asyncio."
"create_eager_task_factory`, чтобы включить цикл событий для быстрого "
"выполнения задачи, что ускорит некоторые варианты использования в 2–5 раз. "
"(Предоставлено Джейкобом Бауэром и Итамаром Ореном в :gh:`102853`, :gh:"
"`104140` и :gh:`104138`)"

#: ../../whatsnew/3.12.rst:655
msgid ""
"On Linux, :mod:`asyncio` uses :class:`asyncio.PidfdChildWatcher` by default "
"if :func:`os.pidfd_open` is available and functional instead of :class:"
"`asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in :gh:`98024`.)"
msgstr ""
"В Linux :mod:`asyncio` использует :class:`asyncio.PidfdChildWatcher` по "
"умолчанию, если :func:`os.pidfd_open` доступен и работает вместо :class:"
"`asyncio.ThreadedChildWatcher`. (Предоставлено Кумаром Адитьей в :gh:"
"`98024`.)"

#: ../../whatsnew/3.12.rst:660
msgid ""
"The event loop now uses the best available child watcher for each platform (:"
"class:`asyncio.PidfdChildWatcher` if supported and :class:`asyncio."
"ThreadedChildWatcher` otherwise), so manually configuring a child watcher is "
"not recommended. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Цикл событий теперь использует лучший доступный дочерний наблюдатель для "
"каждой платформы (:class:`asyncio.PidfdChildWatcher`, если он "
"поддерживается, и :class:`asyncio.ThreadedChildWatcher` в противном случае), "
"поэтому вручную настраивать дочерний наблюдатель не рекомендуется. "
"(Предоставлено Кумаром Адитьей в :gh:`94597`.)"

#: ../../whatsnew/3.12.rst:666
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""
"Добавьте параметр *loop_factory* в :func:`asyncio.run`, чтобы можно было "
"указать собственную фабрику цикла событий. (Предоставлено Кумаром Адитьей в :"
"gh:`99388`.)"

#: ../../whatsnew/3.12.rst:670
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Oren and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""
"Добавьте реализацию C :func:`asyncio.current_task` для ускорения в 4-6 раз. "
"(Предоставлено Итамаром Ореном и Пранавом Туласирамом Бхатом в :gh:`100344`.)"

#: ../../whatsnew/3.12.rst:673
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as :mod:"
"`asyncio` does not support legacy generator-based coroutines. (Contributed "
"by Kumar Aditya in :gh:`102748`.)"
msgstr ""
":func:`asyncio.iscoroutine` теперь возвращает ``False`` для генераторов, "
"поскольку :mod:`asyncio` не поддерживает устаревшие сопрограммы на основе "
"генераторов. (Предоставлено Кумаром Адитьей в :gh:`102748`.)"

#: ../../whatsnew/3.12.rst:677
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators "
"yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""
":func:`asyncio.wait` и :func:`asyncio.as_completed` теперь принимают "
"генераторы, генерирующие задачи. (Предоставлено Кумаром Адитьей в :gh:"
"`78530`.)"

#: ../../whatsnew/3.12.rst:682
msgid "calendar"
msgstr "календарь"

#: ../../whatsnew/3.12.rst:684
msgid ""
"Add enums :data:`calendar.Month` and :data:`calendar.Day` defining months of "
"the year and days of the week. (Contributed by Prince Roshan in :gh:"
"`103636`.)"
msgstr ""
"Добавьте перечисления :data:`calendar.Month` и :data:`calendar.Day`, "
"определяющие месяцы года и дни недели. (Предоставлено принцем Рошаном в :gh:"
"`103636`.)"

#: ../../whatsnew/3.12.rst:689
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.12.rst:691
msgid ""
"Add :const:`csv.QUOTE_NOTNULL` and :const:`csv.QUOTE_STRINGS` flags to "
"provide finer grained control of ``None`` and empty strings by :class:`~csv."
"reader` and :class:`~csv.writer` objects."
msgstr ""
"Добавьте флаги :const:`csv.QUOTE_NOTNULL` и :const:`csv.QUOTE_STRINGS`, "
"чтобы обеспечить более детальный контроль над ``None`` и пустыми строками с "
"помощью :class:`~csv.reader` и :class:`~csv .writer` объекты."

#: ../../whatsnew/3.12.rst:696
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.12.rst:698
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear "
"in executable bytecode) are now exposed in the :mod:`dis` module. :opcode:"
"`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not useful for "
"pseudo instructions. Use the new :data:`dis.hasarg` collection instead. "
"(Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Коды операций псевдоинструкций (которые используются компилятором, но не "
"отображаются в исполняемом байт-коде) теперь отображаются в модуле :mod:"
"`dis`. :opcode:`HAVE_ARGUMENT` по-прежнему актуален для реальных кодов "
"операций, но бесполезен для псевдоинструкций. Вместо этого используйте новую "
"коллекцию :data:`dis.hasarg`. (Предоставлено Ирит Катриэль в :gh:`94216`.)"

#: ../../whatsnew/3.12.rst:706
msgid ""
"Add the :data:`dis.hasexc` collection to signify instructions that set an "
"exception handler. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Добавьте коллекцию :data:`dis.hasexc` для обозначения инструкций, "
"устанавливающих обработчик исключений. (Предоставлено Ирит Катриэль в :gh:"
"`94216`.)"

#: ../../whatsnew/3.12.rst:710
msgid "fractions"
msgstr "дроби"

#: ../../whatsnew/3.12.rst:712
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""
"Объекты типа :class:`fractions.Fraction` теперь поддерживают форматирование "
"в стиле float. (Предоставлено Марком Дикинсоном в :gh:`100161`.)"

#: ../../whatsnew/3.12.rst:716
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../../whatsnew/3.12.rst:718
msgid ""
":func:`importlib.resources.as_file` now supports resource directories. "
"(Contributed by Jason R. Coombs in :gh:`97930`.)"
msgstr ""
":func:`importlib.resources.as_file` теперь поддерживает каталоги ресурсов. "
"(Предоставлено Джейсоном Р. Кумбсом в :gh:`97930`.)"

#: ../../whatsnew/3.12.rst:721
msgid ""
"Rename first parameter of :func:`importlib.resources.files` to *anchor*. "
"(Contributed by Jason R. Coombs in :gh:`100598`.)"
msgstr ""
"Переименуйте первый параметр :func:`importlib.resources.files` в *anchor*. "
"(Предоставлено Джейсоном Р. Кумбсом в :gh:`100598`.)"

#: ../../whatsnew/3.12.rst:725
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.12.rst:727
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return "
"a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed by Carlton Gibson in :gh:`99247`.)"
msgstr ""
"Добавьте :func:`inspect.markcoroutinefunction`, чтобы отметить функции "
"синхронизации, которые возвращают :term:`coroutine` для использования с :"
"func:`inspect.iscoroutinefunction`. (Предоставлено Карлтоном Гибсоном в :gh:"
"`99247`.)"

#: ../../whatsnew/3.12.rst:731
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :gh:`79940`.)"
msgstr ""
"Добавьте :func:`inspect.getasyncgenstate` и :func:`inspect."
"getasyncgenlocals` для определения текущего состояния асинхронных "
"генераторов. (Предоставлено Томасом Креннуоллнером в :gh:`79940`.)"

#: ../../whatsnew/3.12.rst:735
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11. (Contributed by Alex Waygood in :gh:`103193`.)"
msgstr ""
"Производительность :func:`inspect.getattr_static` была значительно улучшена. "
"Большинство вызовов функции должно быть как минимум в 2 раза быстрее, чем в "
"Python 3.11. (Предоставлено Алексом Вэйгудом в :gh:`103193`.)"

#: ../../whatsnew/3.12.rst:740
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.12.rst:742
msgid ""
"Add :func:`itertools.batched` for collecting into even-sized tuples where "
"the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""
"Добавьте :func:`itertools.batched` для сбора в кортежи четного размера, где "
"последний пакет может быть короче остальных. (Предоставлено Рэймондом "
"Хеттингером в :gh:`98363`.)"

#: ../../whatsnew/3.12.rst:747
msgid "math"
msgstr "математика"

#: ../../whatsnew/3.12.rst:749
msgid ""
"Add :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""
"Добавьте :func:`math.sumprod` для вычисления суммы произведений. "
"(Предоставлено Рэймондом Хеттингером в :gh:`100485`.)"

#: ../../whatsnew/3.12.rst:752
msgid ""
"Extend :func:`math.nextafter` to include a *steps* argument for moving up or "
"down multiple steps at a time. (Contributed by Matthias Goergens, Mark "
"Dickinson, and Raymond Hettinger in :gh:`94906`.)"
msgstr ""
"Расширьте :func:`math.nextafter`, включив в него аргумент *steps* для "
"одновременного перемещения вверх или вниз на несколько шагов. (Предоставлено "
"Матиасом Гёргенсом, Марком Дикинсоном и Рэймондом Хеттингером в :gh:`94906`.)"

#: ../../whatsnew/3.12.rst:757
msgid "os"
msgstr "os"

#: ../../whatsnew/3.12.rst:759
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with :"
"func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in :"
"gh:`93312`.)"
msgstr ""
"Добавьте :const:`os.PIDFD_NONBLOCK`, чтобы открыть дескриптор файла для "
"процесса с :func:`os.pidfd_open` в неблокирующем режиме. (Предоставлено "
"Кумаром Адитьей в :gh:`93312`.)"

#: ../../whatsnew/3.12.rst:763
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in :gh:"
"`99547`.)"
msgstr ""
":class:`os.DirEntry` теперь включает метод :meth:`os.DirEntry.is_junction`, "
"чтобы проверить, является ли запись перекрестком. (Предоставлено Чарльзом "
"Махалоу в :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:767
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""
"Добавьте функции :func:`os.listdrives`, :func:`os.listvolumes` и :func:`os."
"listmounts` в Windows для перечисления дисков, томов и точек монтирования. "
"(Предоставлено Стивом Дауэром в :gh:`102519`.)"

#: ../../whatsnew/3.12.rst:771
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in :gh:"
"`99726`.)"
msgstr ""
":func:`os.stat` и :func:`os.lstat` теперь более точны в Windows. Поле "
"``st_birthtime`` теперь будет заполнено временем создания файла, а поле "
"``st_ctime`` устарело, но по-прежнему содержит время создания (но в будущем "
"будет возвращать последнее изменение метаданных для согласованности с "
"другими платформами). ). ``st_dev`` может иметь размер до 64 бит, а "
"``st_ino`` до 128 бит в зависимости от вашей файловой системы, а ``st_rdev`` "
"всегда устанавливается на ноль, а не на неправильные значения. Обе функции "
"могут работать значительно быстрее в новых версиях Windows. (Предоставлено "
"Стивом Дауэром в :gh:`99726`.)"

#: ../../whatsnew/3.12.rst:782
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.12.rst:784
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"Добавьте :func:`os.path.isjunction`, чтобы проверить, является ли данный "
"путь перекрестком. (Предоставлено Чарльзом Махалоу в :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:787
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""
"Добавьте :func:`os.path.splitroot`, чтобы разделить путь на триаду ``(диск, "
"корень, хвост)``. (Предоставлено Барни Гейлом в :gh:`101000`.)"

#: ../../whatsnew/3.12.rst:791
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.12.rst:793
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and :class:`pathlib."
"Path`, plus their Posix- and Windows-specific variants. Subclasses may "
"override the :meth:`pathlib.PurePath.with_segments` method to pass "
"information between path instances."
msgstr ""
"Добавьте поддержку подклассов :class:`pathlib.PurePath` и :class:`pathlib."
"Path`, а также их вариантов, специфичных для Posix и Windows. Подклассы "
"могут переопределить метод :meth:`pathlib.PurePath.with_segments` для "
"передачи информации между экземплярами пути."

#: ../../whatsnew/3.12.rst:798
msgid ""
"Add :meth:`pathlib.Path.walk` for walking the directory trees and generating "
"all file or directory names within them, similar to :func:`os.walk`. "
"(Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""
"Добавьте :meth:`pathlib.Path.walk` для обхода деревьев каталогов и генерации "
"в них всех имен файлов или каталогов, аналогично :func:`os.walk`. "
"(Предоставлено Станиславом Змиевым в :gh:`90385`.)"

#: ../../whatsnew/3.12.rst:802
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in :"
"gh:`84538`.)"
msgstr ""
"Добавьте необязательный параметр *walk_up* в :meth:`pathlib.PurePath."
"relative_to`, чтобы разрешить вставку записей ``..`` в результат; такое "
"поведение более соответствует :func:`os.path.relpath`. (Предоставлено "
"Доменико Рагузой в :gh:`84538`.)"

#: ../../whatsnew/3.12.rst:807
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to :func:`os.path."
"isjunction`. (Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"Добавьте :meth:`pathlib.Path.is_junction` в качестве прокси для :func:`os."
"path.isjunction`. (Предоставлено Чарльзом Махалоу в :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:810
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, :meth:"
"`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching the "
"path's case sensitivity, allowing for more precise control over the matching "
"process."
msgstr ""
"Добавьте необязательный параметр *case_sensitivity* в :meth:`pathlib.Path."
"glob`, :meth:`pathlib.Path.rglob` и :meth:`pathlib.PurePath.match` для "
"соответствия чувствительности к регистру пути, что позволит более точно "
"контроль над процессом согласования."

#: ../../whatsnew/3.12.rst:815
msgid "platform"
msgstr "платформа"

#: ../../whatsnew/3.12.rst:817
msgid ""
"Add support for detecting Windows 11 and Windows Server releases past 2012. "
"Previously, lookups on Windows Server platforms newer than Windows Server "
"2012 and on Windows 11 would return ``Windows-10``. (Contributed by Steve "
"Dower in :gh:`89545`.)"
msgstr ""
"Добавить поддержку обнаружения выпусков Windows 11 и Windows Server после "
"2012 года. Ранее поиск на платформах Windows Server новее Windows Server "
"2012 и Windows 11 возвращал ``Windows-10``. (Предоставлено Стивом Дауэром в :"
"gh:`89545`.)"

#: ../../whatsnew/3.12.rst:823
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.12.rst:825
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr ""
"Добавьте удобные переменные для временного хранения значений во время сеанса "
"отладки и обеспечьте быстрый доступ к таким значениям, как текущий кадр или "
"возвращаемое значение. (Предоставлено Тянь Гао в :gh:`103693`.)"

#: ../../whatsnew/3.12.rst:831
msgid "random"
msgstr "случайный"

#: ../../whatsnew/3.12.rst:833
msgid ""
"Add :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in :gh:"
"`81620`.)"
msgstr ""
"Добавьте :func:`random.binomialvariate`. (Предоставлено Рэймондом "
"Хеттингером в :gh:`81620`.)"

#: ../../whatsnew/3.12.rst:836
msgid ""
"Add a default of ``lambd=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""
"Добавьте значение по умолчанию ``lambd=1.0`` в :func:`random.expovariate`. "
"(Предоставлено Рэймондом Хеттингером в :gh:`100234`.)"

#: ../../whatsnew/3.12.rst:840
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.12.rst:842
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""
":func:`shutil.make_archive` теперь передает аргумент *root_dir* "
"пользовательским архиваторам, которые его поддерживают. В этом случае он "
"больше не меняет временно текущий рабочий каталог процесса на *root_dir* для "
"выполнения архивирования. (Предоставлено Сергеем Сторчакой в ​​:gh:`74696`.)"

#: ../../whatsnew/3.12.rst:848
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a "
"*(typ, val, tb)* triplet. *onerror* is deprecated. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""
":func:`shutil.rmtree` теперь принимает новый аргумент *onexc*, который "
"представляет собой обработчик ошибок, подобный *onerror*, но который ожидает "
"экземпляр исключения, а не триплет *(typ, val, tb)*. *onerror* устарел. "
"(Предоставлено Ирит Катриэль в :gh:`102828`.)"

#: ../../whatsnew/3.12.rst:853
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find "
"matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.that` теперь обращается к переменной среды *PATHEXT* для "
"поиска совпадений в *PATH* в Windows, даже если данный *cmd* включает "
"компонент каталога. (Предоставлено Чарльзом Махалоу в :gh:`103179`.)"

#: ../../whatsnew/3.12.rst:858
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.that` будет вызывать ``NeedCurrentDirectoryForExePathW`` при "
"запросе исполняемых файлов в Windows, чтобы определить, следует ли добавлять "
"текущий рабочий каталог к ​​пути поиска. (Предоставлено Чарльзом Махалоу в :gh:"
"`103179`.)"

#: ../../whatsnew/3.12.rst:863
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.that` вернет путь, соответствующий *cmd* с компонентом из "
"``PATHEXT`` до прямого совпадения в другом месте пути поиска в Windows. "
"(Предоставлено Чарльзом Махалоу в :gh:`103179`.)"

#: ../../whatsnew/3.12.rst:869 ../../whatsnew/3.12.rst:1544
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.12.rst:871
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E. "
"Aasland in :gh:`77617`.)"
msgstr ""
"Добавьте :ref:`интерфейс командной строки <sqlite3-cli>`. (Предоставлено "
"Эрлендом Э. Осландом в :gh:`77617`.)"

#: ../../whatsnew/3.12.rst:874
msgid ""
"Add the :attr:`sqlite3.Connection.autocommit` attribute to :class:`sqlite3."
"Connection` and the *autocommit* parameter to :func:`sqlite3.connect` to "
"control :pep:`249`-compliant :ref:`transaction handling <sqlite3-transaction-"
"control-autocommit>`. (Contributed by Erlend E. Aasland in :gh:`83638`.)"
msgstr ""
"Добавьте атрибут :attr:`sqlite3.Connection.autocommit` в :class:`sqlite3."
"Connection` и параметр *autocommit* в :func:`sqlite3.connect` для "
"управления :pep:`249`-совместимым :ref: `обработка транзакций <sqlite3-"
"transaction-control-autocommit>`. (Предоставлено Эрлендом Э. Осландом в :gh:"
"`83638`.)"

#: ../../whatsnew/3.12.rst:881
msgid ""
"Add *entrypoint* keyword-only parameter to :meth:`sqlite3.Connection."
"load_extension`, for overriding the SQLite extension entry point. "
"(Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""
"Добавьте параметр *entrypoint*, содержащий только ключевое слово, в :meth:"
"`sqlite3.Connection.load_extension`, чтобы переопределить точку входа "
"расширения SQLite. (Предоставлено Эрлендом Э. Осландом в :gh:`103015`.)"

#: ../../whatsnew/3.12.rst:886
msgid ""
"Add :meth:`sqlite3.Connection.getconfig` and :meth:`sqlite3.Connection."
"setconfig` to :class:`sqlite3.Connection` to make configuration changes to a "
"database connection. (Contributed by Erlend E. Aasland in :gh:`103489`.)"
msgstr ""
"Добавьте :meth:`sqlite3.Connection.getconfig` и :meth:`sqlite3.Connection."
"setconfig` в :class:`sqlite3.Connection`, чтобы внести изменения в "
"конфигурацию подключения к базе данных. (Предоставлено Эрлендом Э. Осландом "
"в :gh:`103489`.)"

#: ../../whatsnew/3.12.rst:892
msgid "statistics"
msgstr "статистика"

#: ../../whatsnew/3.12.rst:894
msgid ""
"Extend :func:`statistics.correlation` to include as a ``ranked`` method for "
"computing the Spearman correlation of ranked data. (Contributed by Raymond "
"Hettinger in :gh:`95861`.)"
msgstr ""
"Расширьте :func:`statistics.correlation`, чтобы включить его в качестве "
"``ранжированного`` метода для вычисления корреляции Спирмена для "
"ранжированных данных. (Предоставлено Рэймондом Хеттингером в :gh:`95861`.)"

#: ../../whatsnew/3.12.rst:899
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.12.rst:901
msgid ""
"Add the :mod:`sys.monitoring` namespace to expose the new :ref:`PEP 669 "
"<whatsnew312-pep669>` monitoring API. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""
"Добавьте пространство имен :mod:`sys.monitoring`, чтобы предоставить новый "
"API мониторинга :ref:`PEP 669 <whatsnew312-pep669>`. (Предоставлено Марком "
"Шенноном в :gh:`103082`.)"

#: ../../whatsnew/3.12.rst:905
msgid ""
"Add :func:`sys.activate_stack_trampoline` and :func:`sys."
"deactivate_stack_trampoline` for activating and deactivating stack profiler "
"trampolines, and :func:`sys.is_stack_trampoline_active` for querying if "
"stack profiler trampolines are active. (Contributed by Pablo Galindo and "
"Christian Heimes with contributions from Gregory P. Smith [Google] and Mark "
"Shannon in :gh:`96123`.)"
msgstr ""
"Добавьте :func:`sys.activate_stack_trampoline` и :func:`sys."
"deactivate_stack_trampoline` для активации и деактивации батутов "
"профилировщика стека и :func:`sys.is_stack_trampoline_active` для запроса, "
"активны ли батуты профилировщика стека. (Предоставлено Пабло Галиндо и "
"Кристианом Хаймсом при участии Грегори П. Смита [Google] и Марка Шеннона в :"
"gh:`96123`.)"

#: ../../whatsnew/3.12.rst:914
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""
"Добавьте :data:`sys.last_exc`, который содержит последнее возникшее "
"необработанное исключение (для случаев посмертной отладки). Устаревшие три "
"поля, которые содержат одинаковую информацию в устаревшей форме: :data:`sys."
"last_type`, :data:`sys.last_value` и :data:`sys.last_traceback`. "
"(Предоставлено Ирит Катриэль в :gh:`102778`.)"

#: ../../whatsnew/3.12.rst:920 ../../whatsnew/3.12.rst:1739
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""
":func:`sys._current_Exceptions` теперь возвращает сопоставление "
"идентификатора потока с экземпляром исключения, а не с кортежем ``(typ, exc, "
"tb)``. (Предоставлено Ирит Катриэль в :gh:`103176`.)"

#: ../../whatsnew/3.12.rst:924
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""
":func:`sys.setrecursionlimit` и :func:`sys.getrecursionlimit`. Ограничение "
"рекурсии теперь применяется только к коду Python. Встроенные функции не "
"используют ограничение рекурсии, но защищены другим механизмом, который не "
"позволяет рекурсии вызывать сбой виртуальной машины."

#: ../../whatsnew/3.12.rst:930
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.12.rst:932
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""
"Функция :class:`tempfile.NamedTemporaryFile` имеет новый необязательный "
"параметр *delete_on_close* (предоставлен Евгением Зориным в :gh:`58451`.)"

#: ../../whatsnew/3.12.rst:934
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ""
":func:`tempfile.mkdtemp` теперь всегда возвращает абсолютный путь, даже если "
"аргумент, указанный в параметре *dir*, является относительным путем."

#: ../../whatsnew/3.12.rst:938
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.12.rst:940
msgid ""
"Add :func:`threading.settrace_all_threads` and :func:`threading."
"setprofile_all_threads` that allow to set tracing and profiling functions in "
"all running threads in addition to the calling one. (Contributed by Pablo "
"Galindo in :gh:`93503`.)"
msgstr ""
"Добавьте :func:`threading.settrace_all_threads` и :func:`threading."
"setprofile_all_threads`, которые позволяют задавать функции трассировки и "
"профилирования во всех запущенных потоках помимо вызывающего. (Предоставлено "
"Пабло Галиндо в :gh:`93503`.)"

#: ../../whatsnew/3.12.rst:946
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.12.rst:948
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, "
"y2), ...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka "
"in :gh:`94473`.)"
msgstr ""
"``tkinter.Canvas.coords()`` теперь выравнивает свои аргументы. Теперь он "
"принимает в качестве отдельных аргументов не только координаты (``x1, y1, "
"x2, y2, ...``), но и последовательность координат (``[x1, y1, x2, "
"y2, ...]``) , но также координаты, сгруппированные в пары (``(x1, y1), (x2, "
"y2), ...`` и ``[(x1, y1), (x2, y2), ...]``) , например методы "
"``create_*()``. (Предоставлено Сергеем Сторчакой в ​​:gh:`94473`.)"

#: ../../whatsnew/3.12.rst:957
msgid "tokenize"
msgstr "токенизировать"

#: ../../whatsnew/3.12.rst:959
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"(Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See :"
"ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""
"Модуль :mod:`tokenize` включает в себя изменения, представленные в :pep:"
"`701`. (Предоставлено Мартой Гомес Масиас и Пабло Галиндо в :gh:`102856`.) "
"См. :ref:`whatsnew312-porting-to-python312` для получения дополнительной "
"информации об изменениях в модуле :mod:`tokenize`."

#: ../../whatsnew/3.12.rst:965
msgid "types"
msgstr "типы"

#: ../../whatsnew/3.12.rst:967
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of :"
"ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""
"Добавьте :func:`types.get_original_bases`, чтобы обеспечить дальнейший "
"анализ :ref:`user-defined-generics` при создании подкласса. (Предоставлено "
"Джеймсом Хилтоном-Балфом и Алексом Уэйгудом в :gh:`101827`.)"

#: ../../whatsnew/3.12.rst:974
msgid "typing"
msgstr "печатание"

#: ../../whatsnew/3.12.rst:976
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` now use :func:`inspect.getattr_static` rather than :func:"
"`hasattr` to lookup whether attributes exist. This means that descriptors "
"and :meth:`~object.__getattr__` methods are no longer unexpectedly evaluated "
"during ``isinstance()`` checks against runtime-checkable protocols. However, "
"it may also mean that some objects which used to be considered instances of "
"a runtime-checkable protocol may no longer be considered instances of that "
"protocol on Python 3.12+, and vice versa. Most users are unlikely to be "
"affected by this change. (Contributed by Alex Waygood in :gh:`102433`.)"
msgstr ""
":func:`isinstance` проверяет :func:`проверяемые во время выполнения "
"протоколы <typing.runtime_checkable>` теперь использует :func:`inspect."
"getattr_static` вместо :func:`hasattr` для проверки существования атрибутов. "
"Это означает, что дескрипторы и методы :meth:`~object.__getattr__` больше не "
"будут неожиданно оцениваться во время проверок ``isinstance()`` на "
"соответствие протоколам, проверяемым во время выполнения. Однако это также "
"может означать, что некоторые объекты, которые раньше считались экземплярами "
"протокола, проверяемого во время выполнения, больше не могут считаться "
"экземплярами этого протокола в Python 3.12+, и наоборот. Это изменение вряд "
"ли затронет большинство пользователей. (Предоставлено Алексом Вэйгудом в :gh:"
"`102433`.)"

#: ../../whatsnew/3.12.rst:987
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For example::"
msgstr ""
"Члены протокола, проверяемого во время выполнения, теперь считаются "
"«замороженными» во время выполнения, как только класс был создан. Атрибуты "
"Monkey-Patching в протоколе, проверяемом во время выполнения, по-прежнему "
"будут работать, но не окажут влияния на проверки :func:`isinstance`, "
"сравнивающие объекты с протоколом. Например::"

#: ../../whatsnew/3.12.rst:992
msgid ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # unchanged, even though HasX now also has a \"y\" "
"attribute\n"
"True"
msgstr ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # unchanged, even though HasX now also has a \"y\" "
"attribute\n"
"True"

#: ../../whatsnew/3.12.rst:1009
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr ""
"Это изменение было сделано для того, чтобы ускорить проверку isinstance() на "
"соответствие протоколам, проверяемым во время выполнения."

#: ../../whatsnew/3.12.rst:1012
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with many members "
"may be slower than in Python 3.11. (Contributed by Alex Waygood in :gh:"
"`74690` and :gh:`103193`.)"
msgstr ""
"Профиль производительности проверки :func:`isinstance` на соответствие :func:"
"`проверяемым во время выполнения протоколам <typing.runtime_checkable>` "
"существенно изменился. Большинство проверок ``isinstance()`` для протоколов "
"с небольшим количеством членов должны выполняться как минимум в 2 раза "
"быстрее, чем в версии 3.11, а некоторые могут быть в 20 раз быстрее и более. "
"Однако проверка isinstance() на протоколах со многими членами может быть "
"медленнее, чем в Python 3.11. (Предоставлено Алексом Вэйгудом в :gh:`74690` "
"и :gh:`103193`.)"

#: ../../whatsnew/3.12.rst:1020
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco "
"in :gh:`103699`.)"
msgstr ""
"Все классы :data:`typing.TypedDict` и :data:`typing.NamedTuple` теперь имеют "
"атрибут ``__orig_bases__``. (Предоставлено Адрианом Гарсиа Бадаракко в :gh:"
"`103699`.)"

#: ../../whatsnew/3.12.rst:1024
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""
"Добавьте параметр ``frozen_default`` в :func:`typing.dataclass_transform`. "
"(Предоставлено Эриком Де Бонте в :gh:`99957`.)"

#: ../../whatsnew/3.12.rst:1028
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.12.rst:1030
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""
"База данных Unicode обновлена ​​до версии 15.0.0. (Предоставлено Бенджамином "
"Петерсоном в :gh:`96734`)."

#: ../../whatsnew/3.12.rst:1034 ../../whatsnew/3.12.rst:1584
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.12.rst:1036
msgid ""
"Add a ``--durations`` command line option, showing the N slowest test cases::"
msgstr ""
"Добавьте параметр командной строки ``--durations``, показывающий N самых "
"медленных тестовых случаев:"

#: ../../whatsnew/3.12.rst:1038
msgid ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"
msgstr ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"

#: ../../whatsnew/3.12.rst:1052
msgid "(Contributed by Giampaolo Rodola in :gh:`48330`)"
msgstr "(Предоставлено Джампаоло Родолой в :gh:`48330`)"

#: ../../whatsnew/3.12.rst:1055
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.12.rst:1057
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr ""
"Добавьте :ref:`интерфейс командной строки <uuid-cli>`. (Предоставлено Адамом "
"Чиной в :gh:`88597`.)"

#: ../../whatsnew/3.12.rst:1062
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/3.12.rst:1064
msgid ""
"Remove ``wstr`` and ``wstr_length`` members from Unicode objects. It reduces "
"object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) (Contributed by "
"Inada Naoki in :gh:`92536`.)"
msgstr ""
"Удалите члены ``wstr`` и ``wstr_length`` из объектов Unicode. Он уменьшает "
"размер объекта на 8 или 16 байт на 64-битной платформе. (:pep:`623`) "
"(Предоставлено Инадой Наоки в :gh:`92536`.)"

#: ../../whatsnew/3.12.rst:1068
msgid ""
"Add experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Donghee Na in :gh:`101525`)"
msgstr ""
"Добавить экспериментальную поддержку использования бинарного оптимизатора "
"BOLT в процессе сборки, что повышает производительность на 1-5%. "
"(Разработано Кевином Модзелевски в :gh:`90536` и настроено Донхи На в :gh:"
"`101525`)"

#: ../../whatsnew/3.12.rst:1072
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and :"
"func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""
"Ускорить замену регулярных выражений (функций :func:`re.sub` и :func:`re."
"sub` и соответствующих методов :class:`!re.Pattern`) для замены строк, "
"содержащих групповые ссылки, в 2--3 раза. . (Предоставлено Сергеем Сторчакой "
"в ​​:gh:`91524`.)"

#: ../../whatsnew/3.12.rst:1077
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar Oren in :gh:`103793`.)"
msgstr ""
"Ускорьте создание :class:`asyncio.Task`, отложив дорогостоящее "
"форматирование строк. (Предоставлено Итамаром Ореном в :gh:`103793`.)"

#: ../../whatsnew/3.12.rst:1080
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions "
"are up to 64% faster as a side effect of the changes required to cover :pep:"
"`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías and "
"Pablo Galindo in :gh:`102856`.)"
msgstr ""
"Функции :func:`tokenize.tokenize` и :func:`tokenize.generate_tokens` "
"работают до 64 % быстрее, что является побочным эффектом изменений, "
"необходимых для покрытия :pep:`701` в модуле :mod:`tokenize`. . "
"(Предоставлено Мартой Гомес Масиас и Пабло Галиндо в :gh:`102856`.)"

#: ../../whatsnew/3.12.rst:1085
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new :opcode:"
"`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and Vladimir "
"Matveev in :gh:`103497`.)"
msgstr ""
"Ускорьте вызовы методов :func:`super` и загрузку атрибутов с помощью новой "
"инструкции :opcode:`LOAD_SUPER_ATTR`. (Предоставлено Карлом Мейером и "
"Владимиром Матвеевым в :gh:`103497`.)"

#: ../../whatsnew/3.12.rst:1091
msgid "CPython bytecode changes"
msgstr "Изменения в байт-коде CPython"

#: ../../whatsnew/3.12.rst:1093
msgid ""
"Remove the :opcode:`!LOAD_METHOD` instruction. It has been merged into :"
"opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old :opcode:"
"`!LOAD_METHOD` instruction if the low bit of its oparg is set. (Contributed "
"by Ken Jin in :gh:`93429`.)"
msgstr ""
"Удалите инструкцию :opcode:`!LOAD_METHOD`. Он был объединен с :opcode:"
"`LOAD_ATTR`. :opcode:`LOAD_ATTR` теперь будет вести себя как старая "
"инструкция :opcode:`!LOAD_METHOD`, если установлен младший бит ее oparg. "
"(Предоставлено Кеном Джином в :gh:`93429`.)"

#: ../../whatsnew/3.12.rst:1098
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and :opcode:`!"
"JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in :gh:"
"`102859`.)"
msgstr ""
"Удалите инструкции :opcode:`!JUMP_IF_FALSE_OR_POP` и :opcode:`!"
"JUMP_IF_TRUE_OR_POP`. (Предоставлено Ирит Катриэль в :gh:`102859`.)"

#: ../../whatsnew/3.12.rst:1101
msgid ""
"Remove the :opcode:`!PRECALL` instruction. (Contributed by Mark Shannon in :"
"gh:`92925`.)"
msgstr ""
"Удалите инструкцию :opcode:`!PRECALL`. (Предоставлено Марком Шенноном в :gh:"
"`92925`.)"

#: ../../whatsnew/3.12.rst:1104
msgid ""
"Add the :opcode:`BINARY_SLICE` and :opcode:`STORE_SLICE` instructions. "
"(Contributed by Mark Shannon in :gh:`94163`.)"
msgstr ""
"Добавьте инструкции :opcode:`BINARY_SLICE` и :opcode:`STORE_SLICE`. "
"(Предоставлено Марком Шенноном в :gh:`94163`.)"

#: ../../whatsnew/3.12.rst:1107
msgid ""
"Add the :opcode:`CALL_INTRINSIC_1` instructions. (Contributed by Mark "
"Shannon in :gh:`99005`.)"
msgstr ""
"Добавьте инструкции :opcode:`CALL_INTRINSIC_1`. (Предоставлено Марком "
"Шенноном в :gh:`99005`.)"

#: ../../whatsnew/3.12.rst:1110
msgid ""
"Add the :opcode:`CALL_INTRINSIC_2` instruction. (Contributed by Irit Katriel "
"in :gh:`101799`.)"
msgstr ""
"Добавьте инструкцию :opcode:`CALL_INTRINSIC_2`. (Предоставлено Ирит Катриэль "
"в :gh:`101799`.)"

#: ../../whatsnew/3.12.rst:1113
msgid ""
"Add the :opcode:`CLEANUP_THROW` instruction. (Contributed by Brandt Bucher "
"in :gh:`90997`.)"
msgstr ""
"Добавьте инструкцию :opcode:`CLEANUP_THROW`. (Предоставлено Брандтом Бухером "
"в :gh:`90997`.)"

#: ../../whatsnew/3.12.rst:1116
msgid ""
"Add the :opcode:`!END_SEND` instruction. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""
"Добавьте инструкцию :opcode:`!END_SEND`. (Предоставлено Марком Шенноном в :"
"gh:`103082`.)"

#: ../../whatsnew/3.12.rst:1119
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""
"Добавьте инструкцию :opcode:`LOAD_FAST_AND_CLEAR` как часть реализации :pep:"
"`709`. (Предоставлено Карлом Мейером в :gh:`101441`.)"

#: ../../whatsnew/3.12.rst:1122
msgid ""
"Add the :opcode:`LOAD_FAST_CHECK` instruction. (Contributed by Dennis "
"Sweeney in :gh:`93143`.)"
msgstr ""
"Добавьте инструкцию :opcode:`LOAD_FAST_CHECK`. (Предоставлено Деннисом Суини "
"в :gh:`93143`.)"

#: ../../whatsnew/3.12.rst:1125
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as part of "
"the implementation of :pep:`695`. Remove the :opcode:`!LOAD_CLASSDEREF` "
"opcode, which can be replaced with :opcode:`LOAD_LOCALS` plus :opcode:"
"`LOAD_FROM_DICT_OR_DEREF`. (Contributed by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""
"Добавьте коды операций :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS` и :opcode:`LOAD_LOCALS` как часть реализации :"
"pep:`695`. Удалите код операции :opcode:`!LOAD_CLASSDEREF`, который можно "
"заменить на :opcode:`LOAD_LOCALS` плюс :opcode:`LOAD_FROM_DICT_OR_DEREF`. "
"(Предоставлено Джелле Зийлстра в :gh:`103764`.)"

#: ../../whatsnew/3.12.rst:1131
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"Добавьте инструкцию :opcode:`LOAD_SUPER_ATTR`. (Предоставлено Карлом Мейером "
"и Владимиром Матвеевым в :gh:`103497`.)"

#: ../../whatsnew/3.12.rst:1134
msgid ""
"Add the :opcode:`RETURN_CONST` instruction. (Contributed by Wenyang Wang in :"
"gh:`101632`.)"
msgstr ""
"Добавьте инструкцию :opcode:`RETURN_CONST`. (Предоставлено Вэньяном Ваном в :"
"gh:`101632`.)"

#: ../../whatsnew/3.12.rst:1137
msgid "Demos and Tools"
msgstr "Демо и инструменты"

#: ../../whatsnew/3.12.rst:1139
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project <https://github.com/gvanrossum/"
"old-demos>`_. (Contributed by Victor Stinner in :gh:`97681`.)"
msgstr ""
"Удалите каталог ``Tools/demo/``, содержащий старые демонстрационные скрипты. "
"Копию можно найти в проекте `old-demos <https://github.com/gvanrossum/old-"
"demos>`_. (Предоставлено Виктором Стиннером в :gh:`97681`.)"

#: ../../whatsnew/3.12.rst:1144
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""
"Удалите устаревшие примеры сценариев из каталога «Tools/scripts/». Копию "
"можно найти в проекте `old-demos <https://github.com/gvanrossum/old-"
"demos>`_. (Предоставлено Виктором Стиннером в :gh:`97669`.)"

#: ../../whatsnew/3.12.rst:1151 ../../whatsnew/3.12.rst:2142
msgid "Deprecated"
msgstr "Устарел"

#: ../../whatsnew/3.12.rst:1153
#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: Параметры *type*, *choices* и *metavar* :class:`!argparse."
"BooleanOptionalAction` устарели и будут удалены в версии 3.14. (Добавлен "
"Никитой Соболевым в :gh:`92248`.)"

#: ../../whatsnew/3.12.rst:1158
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""
":mod:`ast`: Следующие функции :mod:`ast` устарели в документации, начиная с "
"Python 3.8, теперь вызывают выдачу :exc:`DeprecationWarning` во время "
"выполнения при доступе к ним или их использовании и будут удалены. в Python "
"3.14:"

#: ../../whatsnew/3.12.rst:1162
#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.12.rst:1163
#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.12.rst:1164
#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.12.rst:1165
#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.12.rst:1166
#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.12.rst:1168
#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""
"Вместо этого используйте :class:`ast.Constant`. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`90953`.)"

#: ../../whatsnew/3.12.rst:1171
#: ../../deprecations/pending-removal-in-3.14.rst:22
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.12.rst:1173
msgid ""
"The child watcher classes :class:`asyncio.MultiLoopChildWatcher`, :class:"
"`asyncio.FastChildWatcher`, :class:`asyncio.AbstractChildWatcher` and :class:"
"`asyncio.SafeChildWatcher` are deprecated and will be removed in Python "
"3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Классы наблюдателей за детьми :class:`asyncio.MultiLoopChildWatcher`, :class:"
"`asyncio.FastChildWatcher`, :class:`asyncio.AbstractChildWatcher` и :class:"
"`asyncio.SafeChildWatcher` устарели и будут удалены в Python 3.14. "
"(Предоставлено Кумаром Адитьей в :gh:`94597`.)"

#: ../../whatsnew/3.12.rst:1179
#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"

#: ../../whatsnew/3.12.rst:1185
#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"

#: ../../whatsnew/3.12.rst:1190
#: ../../deprecations/pending-removal-in-future.rst:39
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Константы ``calendar.January`` и ``calendar.February`` "
"устарели и заменены на :data:`calendar.JANUARY` и :data:`calendar.FEBRUARY`. "
"(Предоставлено принцем Рошаном в :gh:`103636`.)"

#: ../../whatsnew/3.12.rst:1194
msgid ""
":mod:`collections.abc`: Deprecated :class:`collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Устарело :class:`collections.abc.ByteString`. "
"Предпочитайте :class:`Sequence` или :class:`collections.abc.Buffer`. Для "
"использования при наборе текста отдавайте предпочтение объединению, например "
"``bytes | bytearray`` или :class:`collections.abc.Buffer`. (Предоставлено "
"Шантану Джайн в :gh:`91896`.)"

#: ../../whatsnew/3.12.rst:1199
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s :meth:`~datetime.datetime."
"utcnow` and :meth:`~datetime.datetime.utcfromtimestamp` are deprecated and "
"will be removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call :meth:`~datetime.datetime."
"now` and :meth:`~datetime.datetime.fromtimestamp`  with the *tz* parameter "
"set to :const:`datetime.UTC`. (Contributed by Paul Ganssle in :gh:`103857`.)"
msgstr ""
":mod:`datetime`: :class:`datetime.datetime` :meth:`~datetime.datetime."
"utcnow` и :meth:`~datetime.datetime.utcfromtimestamp` устарели и будут "
"удалены в будущей версии . Вместо этого используйте объекты, учитывающие "
"часовой пояс, для представления даты и времени в формате UTC: "
"соответственно, вызовите :meth:`~datetime.datetime.now` и :meth:`~datetime."
"datetime.fromtimestamp` с параметром *tz*, установленным в :const: `дата-"
"время.UTC`. (Предоставлено Полом Гансслом в :gh:`103857`.)"

#: ../../whatsnew/3.12.rst:1207
msgid ""
":mod:`email`: Deprecate the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: параметр *isdst* устарел в :func:`email.utils.localtime`. "
"(Предоставлено Аланом Уильямсом в :gh:`72346`.)"

#: ../../whatsnew/3.12.rst:1210
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ""
":mod:`importlib.abc`: Устарели следующие классы, которые планируется удалить "
"в Python 3.14:"

#: ../../whatsnew/3.12.rst:1213
#: ../../deprecations/pending-removal-in-3.14.rst:52
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.12.rst:1214
#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1215
#: ../../deprecations/pending-removal-in-3.14.rst:54
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1217
#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Use :mod:`importlib.resources.abc` classes instead:"

#: ../../whatsnew/3.12.rst:1219
#: ../../deprecations/pending-removal-in-3.14.rst:58
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1220
#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1222
#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""
"(Предоставлено Джейсоном Р. Кумбсом и Хьюго ван Кеменаде в :gh:`93963`.)"

#: ../../whatsnew/3.12.rst:1224
msgid ""
":mod:`itertools`: Deprecate the support for copy, deepcopy, and pickle "
"operations, which is undocumented, inefficient, historically buggy, and "
"inconsistent. This will be removed in 3.14 for a significant reduction in "
"code volume and maintenance burden. (Contributed by Raymond Hettinger in :gh:"
"`101588`.)"
msgstr ""
":mod:`itertools`: Устарела поддержка операций копирования, глубокого "
"копирования и выбора, которые являются недокументированными, неэффективными, "
"исторически ошибочными и непоследовательными. Это будет удалено в версии "
"3.14 для значительного сокращения объема кода и нагрузки на обслуживание. "
"(Предоставлено Рэймондом Хеттингером в :gh:`101588`.)"

#: ../../whatsnew/3.12.rst:1230
msgid ""
":mod:`multiprocessing`: In Python 3.14, the default :mod:`multiprocessing` "
"start method will change to a safer one on Linux, BSDs, and other non-macOS "
"POSIX platforms where ``'fork'`` is currently the default (:gh:`84559`). "
"Adding a runtime warning about this was deemed too disruptive as the "
"majority of code is not expected to care. Use the :func:`~multiprocessing."
"get_context` or :func:`~multiprocessing.set_start_method` APIs to explicitly "
"specify when your code *requires* ``'fork'``.  See :ref:`contexts and start "
"methods <multiprocessing-start-methods>`."
msgstr ""
":mod:`multiprocessing`: В Python 3.14 метод запуска :mod:`multiprocessing` "
"по умолчанию изменится на более безопасный в Linux, BSD и других POSIX-"
"платформах, отличных от macOS, где в настоящее время используется "
"``'fork'``. по умолчанию (:gh:`84559`). Добавление предупреждения об этом во "
"время выполнения было сочтено слишком разрушительным, поскольку ожидается, "
"что большая часть кода не будет обращать на это внимания. Используйте API :"
"func:`~multiprocessing.get_context` или :func:`~multiprocessing."
"set_start_method`, чтобы явно указать, когда ваш код *требует* ``'вилки'``. "
"См. :ref:`контексты и методы запуска <multiprocessing-start-methods>`."

#: ../../whatsnew/3.12.rst:1240
msgid ""
":mod:`pkgutil`: :func:`pkgutil.find_loader` and :func:`pkgutil.get_loader` "
"are deprecated and will be removed in Python 3.14; use :func:`importlib.util."
"find_spec` instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: :func:`pkgutil.find_loader` и :func:`pkgutil.get_loader` "
"устарели и будут удалены в Python 3.14; вместо этого используйте :func:"
"`importlib.util.find_spec`. (Добавлен Никитой Соболевым в :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1245
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only "
"gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14. "
"(Contributed by Soumendra Ganguly and Gregory P. Smith in :gh:`85984`.)"
msgstr ""
":mod:`pty`: Модуль имеет две недокументированные функции ``master_open()`` и "
"``slave_open()``, которые устарели со времен Python 2, но получили "
"надлежащее :exc:`DeprecationWarning` только в версии 3.12. Удалите их в "
"3.14. (Предоставлено Сумендрой Гангули и Грегори П. Смитом в :gh:`85984`.)"

#: ../../whatsnew/3.12.rst:1250
msgid ":mod:`os`:"
msgstr ":mod:`os`:"

#: ../../whatsnew/3.12.rst:1252
msgid ""
"The ``st_ctime`` fields return by :func:`os.stat` and :func:`os.lstat` on "
"Windows are deprecated. In a future release, they will contain the last "
"metadata change time, consistent with other platforms. For now, they still "
"contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""
"Поля st_ctime, возвращаемые :func:`os.stat` и :func:`os.lstat` в Windows, "
"устарели. В будущем выпуске они будут содержать время последнего изменения "
"метаданных, соответствующее другим платформам. На данный момент они все еще "
"содержат время создания, которое также доступно в новом поле "
"``st_birthtime``. (Предоставлено Стивом Дауэром в :gh:`99726`.)"

#: ../../whatsnew/3.12.rst:1258
msgid ""
"On POSIX platforms, :func:`os.fork` can now raise a :exc:"
"`DeprecationWarning` when it can detect being called from a multithreaded "
"process. There has always been a fundamental incompatibility with the POSIX "
"platform when doing so. Even if such code *appeared* to work. We added the "
"warning to raise awareness as issues encountered by code doing this are "
"becoming more frequent. See the :func:`os.fork` documentation for more "
"details along with `this discussion on fork being incompatible with threads "
"<https://discuss.python.org/t/concerns-regarding-deprecation-of-fork-with-"
"alive-threads/33555>`_ for *why* we're now surfacing this longstanding "
"platform compatibility problem to developers."
msgstr ""
"На платформах POSIX :func:`os.fork` теперь может выдавать :exc:"
"`DeprecationWarning`, когда он может обнаружить вызов из многопоточного "
"процесса. При этом всегда существовала фундаментальная несовместимость с "
"платформой POSIX. Даже если такой код *кажется* работающим. Мы добавили "
"предупреждение, чтобы повысить осведомленность, поскольку проблемы, "
"возникающие при выполнении этого кода, становятся все более частыми. "
"Дополнительную информацию см. в документации :func:`os.fork`, а также `это "
"обсуждение несовместимости fork с потоками <https://discuss.python.org/t/"
"concerns-regarding-deprecation-of-fork-with- living-threads/33555>`_, "
"*почему* мы сейчас рассказываем разработчикам об этой давней проблеме "
"совместимости платформ."

#: ../../whatsnew/3.12.rst:1268
msgid ""
"When this warning appears due to usage of :mod:`multiprocessing` or :mod:"
"`concurrent.futures` the fix is to use a different :mod:`multiprocessing` "
"start method such as ``\"spawn\"`` or ``\"forkserver\"``."
msgstr ""
"Когда это предупреждение появляется из-за использования :mod:"
"`multiprocessing` или :mod:`concurrent.futures`, исправлением является "
"использование другого метода запуска :mod:`multiprocessing`, такого как "
"``\"spawn\"`` или `` \"форксервер\"``."

#: ../../whatsnew/3.12.rst:1272
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is "
"deprecated; use *onexc* instead. (Contributed by Irit Katriel in :gh:"
"`102828`.)"
msgstr ""
":mod:`shutil`: Аргумент *onerror* в :func:`shutil.rmtree` устарел; вместо "
"этого используйте *onexc*. (Предоставлено Ирит Катриэль в :gh:`102828`.)"

#: ../../whatsnew/3.12.rst:1275
#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: ../../whatsnew/3.12.rst:1277
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in :gh:`90016`.)"
msgstr ""
":ref:`адаптеры и конвертеры по умолчанию <sqlite3-default-converters>` "
"устарели. Вместо этого используйте sqlite3-adapter-converter-recipes и "
"адаптируйте их к своим потребностям. (Предоставлено Эрлендом Э. Осландом в :"
"gh:`90016`.)"

#: ../../whatsnew/3.12.rst:1283
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted "
"when :ref:`named placeholders <sqlite3-placeholders>` are used together with "
"parameters supplied as a :term:`sequence` instead of as a :class:`dict`. "
"Starting from Python 3.14, using named placeholders with parameters supplied "
"as a sequence will raise a :exc:`~sqlite3.ProgrammingError`. (Contributed by "
"Erlend E. Aasland in :gh:`101698`.)"
msgstr ""
"В :meth:`~sqlite3.Cursor.execute` :exc:`DeprecationWarning` теперь "
"генерируется, когда :ref:`именные заполнители <sqlite3-placeholders>` "
"используются вместе с параметрами, предоставленными в виде :term:`sequence` "
"вместо этого как :class:`dict`. Начиная с Python 3.14, использование "
"именованных заполнителей с параметрами, предоставленными в виде "
"последовательности, приведет к возникновению ошибки :exc:`~sqlite3."
"ProgrammingError`. (Предоставлено Эрлендом Э. Осландом в :gh:`101698`.)"

#: ../../whatsnew/3.12.rst:1290
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and :data:`sys."
"last_traceback` fields are deprecated. Use :data:`sys.last_exc` instead. "
"(Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""
":mod:`sys`: Поля :data:`sys.last_type`, :data:`sys.last_value` и :data:`sys."
"last_traceback` устарели. Вместо этого используйте :data:`sys.last_exc`. "
"(Предоставлено Ирит Катриэль в :gh:`102778`.)"

#: ../../whatsnew/3.12.rst:1294
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
":mod:`tarfile`: Извлечение tar-архивов без указания *filter* устарело до "
"версии Python 3.14, когда фильтр ``'data'`` станет фильтром по умолчанию. "
"Подробности смотрите в :ref:`tarfile-extraction-filter`."

#: ../../whatsnew/3.12.rst:1298
#: ../../deprecations/pending-removal-in-3.15.rst:80
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../whatsnew/3.12.rst:1300
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized`, aliases for :class:"
"`collections.abc.Hashable` and :class:`collections.abc.Sized` respectively, "
"are deprecated. (:gh:`94309`.)"
msgstr ""
":class:`typing.Hashable` и :class:`typing.Sized`, псевдонимы для :class:"
"`collections.abc.Hashable` и :class:`collections.abc.Sized` соответственно, "
"устарели. (:gh:`94309`.)"

#: ../../whatsnew/3.12.rst:1304
msgid ""
":class:`typing.ByteString`, deprecated since Python 3.9, now causes a :exc:"
"`DeprecationWarning` to be emitted when it is used. (Contributed by Alex "
"Waygood in :gh:`91896`.)"
msgstr ""
":class:`typing.ByteString`, устаревший, начиная с Python 3.9, теперь "
"вызывает выдачу :exc:`DeprecationWarning` при его использовании. "
"(Предоставлено Алексом Вэйгудом в :gh:`91896`.)"

#: ../../whatsnew/3.12.rst:1308
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning` "
"when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing. (Contributed by Jacob Walls in :gh:`83122`.)"
msgstr ""
":mod:`xml.etree.ElementTree`: Модуль теперь выдает :exc:`DeprecationWarning` "
"при проверке истинного значения :class:`xml.etree.ElementTree.Element`. "
"Раньше реализация Python выдавала :exc:`FutureWarning`, а реализация C "
"ничего не выдавала. (Предоставлено Джейкобом Уоллсом в :gh:`83122`.)"

#: ../../whatsnew/3.12.rst:1314
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` and :meth:"
"`async generator throw() <agen.athrow>` are deprecated and may be removed in "
"a future version of Python. Use the single-arg versions of these functions "
"instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""
"Сигнатуры с 3 аргументами (тип, значение, обратная трассировка) :meth:"
"`coroutine throw() <coroutine.throw>`, :meth:`generator throw() <generator."
"throw>` и :meth:`async генератор throw() () <agen.athrow>` устарели и могут "
"быть удалены в будущих версиях Python. Вместо этого используйте версии этих "
"функций с одним аргументом. (Предоставлено Офи Чаном в :gh:`89874`.)"

#: ../../whatsnew/3.12.rst:1320
msgid ""
":exc:`DeprecationWarning` is now raised when :attr:`~module.__package__` on "
"a module differs from :attr:`__spec__.parent <importlib.machinery.ModuleSpec."
"parent>` (previously it was :exc:`ImportWarning`). (Contributed by Brett "
"Cannon in :gh:`65961`.)"
msgstr ""
":exc:`DeprecationWarning` теперь вызывается, когда :attr:`~module."
"__package__` в модуле отличается от :attr:`__spec__.parent <importlib."
"machinery.ModuleSpec.parent>` (ранее это было :exc:`ImportWarning `). "
"(Предоставлено Бреттом Кэнноном в :gh:`65961`.)"

#: ../../whatsnew/3.12.rst:1326
msgid ""
"Setting :attr:`~module.__package__` or :attr:`~module.__cached__` on a "
"module is deprecated, and will cease to be set or taken into consideration "
"by the import system in Python 3.14. (Contributed by Brett Cannon in :gh:"
"`65961`.)"
msgstr ""
"Установка :attr:`~module.__package__` или :attr:`~module.__cached__` в "
"модуле устарела и перестанет устанавливаться или учитываться системой "
"импорта в Python 3.14. (Предоставлено Бреттом Кэнноном в :gh:`65961`.)"

#: ../../whatsnew/3.12.rst:1330
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.16. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly: ``~int(x)``. (Contributed by "
"Tim Hoffmann in :gh:`103487`.)"
msgstr ""
"Оператор побитовой инверсии (``~``) для bool устарел. Это выдаст ошибку в "
"Python 3.16. Вместо этого используйте ``not`` для логического отрицания "
"логических значений. В том редком случае, когда вам действительно нужна "
"побитовая инверсия базового ``int``, преобразуйте его в int явно: "
"``~int(x)``. (Предоставлено Тимом Хоффманном в :gh:`103487`.)"

#: ../../whatsnew/3.12.rst:1336
msgid ""
"Accessing :attr:`~codeobject.co_lnotab` on code objects was deprecated in "
"Python 3.10 via :pep:`626`, but it only got a proper :exc:"
"`DeprecationWarning` in 3.12. May be removed in 3.15. (Contributed by Nikita "
"Sobolev in :gh:`101866`.)"
msgstr ""
"Доступ к :attr:`~codeobject.co_lnotab` к объектам кода был объявлен "
"устаревшим в Python 3.10 через :pep:`626`, но правильное :exc:"
"`DeprecationWarning` появилось только в версии 3.12. Может быть удалено в "
"3.15. (Добавлен Никитой Соболевым в :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.13.rst:2
msgid "Pending Removal in Python 3.13"
msgstr "Ожидает удаления в Python 3.13"

#: ../../deprecations/pending-removal-in-3.13.rst:4
msgid "Modules (see :pep:`594`):"
msgstr "Модули (см. :pep:`594`):"

#: ../../deprecations/pending-removal-in-3.13.rst:6
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../deprecations/pending-removal-in-3.13.rst:7
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../deprecations/pending-removal-in-3.13.rst:8
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../deprecations/pending-removal-in-3.13.rst:9
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../deprecations/pending-removal-in-3.13.rst:10
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../deprecations/pending-removal-in-3.13.rst:11
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../deprecations/pending-removal-in-3.13.rst:12
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:13
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../deprecations/pending-removal-in-3.13.rst:14
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../deprecations/pending-removal-in-3.13.rst:15
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../deprecations/pending-removal-in-3.13.rst:16
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../deprecations/pending-removal-in-3.13.rst:17
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../deprecations/pending-removal-in-3.13.rst:18
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../deprecations/pending-removal-in-3.13.rst:19
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:20
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../deprecations/pending-removal-in-3.13.rst:21
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../deprecations/pending-removal-in-3.13.rst:22
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:23
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../deprecations/pending-removal-in-3.13.rst:24
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:26
msgid "Other modules:"
msgstr "Другие модули:"

#: ../../deprecations/pending-removal-in-3.13.rst:28
msgid ":mod:`!lib2to3`, and the :program:`2to3` program (:gh:`84540`)"
msgstr ":mod:`!lib2to3` и программа :program:`2to3` (:gh:`84540`)"

#: ../../deprecations/pending-removal-in-3.13.rst:30
msgid "APIs:"
msgstr "APIs:"

#: ../../deprecations/pending-removal-in-3.13.rst:32
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: ../../deprecations/pending-removal-in-3.13.rst:33
msgid "``locale.resetlocale()`` (:gh:`90817`)"
msgstr "``locale.resetlocale()`` (:gh:`90817`)"

#: ../../deprecations/pending-removal-in-3.13.rst:34
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:35
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:36
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:37
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:38
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: ../../deprecations/pending-removal-in-3.13.rst:39
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: ../../deprecations/pending-removal-in-3.13.rst:40
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr ":class:`classmethod` цепочка дескрипторов (:gh:`89519`)"

#: ../../deprecations/pending-removal-in-3.13.rst:41
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr ":mod:`importlib.resources` устаревшие методы:"

#: ../../deprecations/pending-removal-in-3.13.rst:43
msgid "``contents()``"
msgstr "``contents()``"

#: ../../deprecations/pending-removal-in-3.13.rst:44
msgid "``is_resource()``"
msgstr "``is_resource()``"

#: ../../deprecations/pending-removal-in-3.13.rst:45
msgid "``open_binary()``"
msgstr "``open_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:46
msgid "``open_text()``"
msgstr "``open_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:47
msgid "``path()``"
msgstr "``path()``"

#: ../../deprecations/pending-removal-in-3.13.rst:48
msgid "``read_binary()``"
msgstr "``read_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:49
msgid "``read_text()``"
msgstr "``read_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:51
msgid ""
"Use :func:`importlib.resources.files` instead.  Refer to `importlib-"
"resources: Migrating from Legacy <https://importlib-resources.readthedocs.io/"
"en/latest/using.html#migrating-from-legacy>`_ (:gh:`106531`)"
msgstr ""
"Вместо этого используйте :func:`importlib.resources.files`. См. `importlib-"
"resources: переход с устаревшей версии <https://importlib-resources."
"readthedocs.io/en/latest/using.html#migrating-from-legacy>`_ (:gh:`106531`)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending Removal in Python 3.14"
msgstr "Ожидает удаления в Python 3.14"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: Следующие функции устарели в документации, начиная с Python 3.8, "
"теперь вызывают выдачу :exc:`DeprecationWarning` во время выполнения, когда "
"к ним обращаются или используют, и будут удалены в Python 3.14:"

#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Классы наблюдателей за детьми :class:`~asyncio.MultiLoopChildWatcher`, :"
"class:`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` и :"
"class:`~asyncio.SafeChildWatcher` устарели и будут удалены в Питон 3.14. "
"(Предоставлено Кумаром Адитьей в :gh:`94597`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` deprecated classes:"

#: ../../deprecations/pending-removal-in-3.14.rst:63
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:69
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: Метод запуска по умолчанию изменится на более "
"безопасный в Linux, BSD и других платформах, отличных от macOS POSIX, где в "
"настоящее время по умолчанию используется ``'fork'`` (:gh:`84559`). "
"Добавление предупреждения об этом во время выполнения было сочтено слишком "
"разрушительным, поскольку ожидается, что большая часть кода не будет "
"обращать на это внимания. Используйте API :func:`~multiprocessing."
"get_context` или :func:`~multiprocessing.set_start_method`, чтобы явно "
"указать, когда ваш код *требует* ``'вилки'``. См. :ref:`мультипроцессорные-"
"стартовые методы`."

#: ../../deprecations/pending-removal-in-3.14.rst:77
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` и :meth:`~pathlib."
"PurePath.relative_to`: передача дополнительных аргументов устарела."

#: ../../deprecations/pending-removal-in-3.14.rst:81
msgid ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:86
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: ../../deprecations/pending-removal-in-3.14.rst:88
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: используйте :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "``slave_open()``: используйте :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:93
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ":data:`~sqlite3.version` и :data:`~sqlite3.version_info`."

#: ../../deprecations/pending-removal-in-3.14.rst:95
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."

#: ../../deprecations/pending-removal-in-3.14.rst:99
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr "Ожидает удаления в Python 3.15"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "Система импорта:"

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Установка :attr:`~module.__cached__` в модуле без установки :attr:`__spec__."
"cached <importlib.machinery.ModuleSpec.cached>` устарела. В Python 3.15 :"
"attr:`!__cached__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Установка :attr:`~module.__package__` в модуле без установки :attr:`__spec__."
"parent <importlib.machinery.ModuleSpec.parent>` устарела. В Python 3.15 :"
"attr:`!__package__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"Недокументированная функция :func:`!ctypes.SetPointerType` устарела начиная "
"с Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"Устаревший и редко используемый :class:`~http.server.CGIHTTPRequestHandler` "
"устарел, начиная с Python 3.13. Прямой замены не существует. *Что угодно* "
"лучше, чем CGI, для взаимодействия веб-сервера с обработчиком запросов."

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"Флаг :option:`!--cgi` в интерфейсе командной строки :program:`python -m http."
"server` устарел, начиная с Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:56
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "exec_module"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"Функция :func:`~locale.getdefaultlocale` устарела, начиная с Python 3.11. "
"Его удаление изначально планировалось для Python 3.13 (:gh:`90817`), но было "
"отложено до Python 3.15. Вместо этого используйте :func:`~locale."
"getlocale`, :func:`~locale.setlocale` и :func:`~locale.getencoding`. "
"(Предоставлено Хьюго ван Кеменаде в :gh:`111187`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` устарел, начиная с Python 3.13. Используйте :"
"func:`os.path.isreserved` для обнаружения зарезервированных путей в Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` устарел, начиная с Python 3.13. Эта функция "
"полезна только для поддержки Jython, имеет запутанный API и практически не "
"проверена."

#: ../../deprecations/pending-removal-in-3.15.rst:58
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` не принимает аргументов в Python 3.15. Передача "
"каких-либо аргументов устарела начиная с Python 3.14, поскольку версия "
"Python не допускает никаких аргументов, но версия C допускает любое "
"количество позиционных или ключевых аргументов, игнорируя каждый аргумент."

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Доступ к :attr:`~codeobject.co_lnotab` устарел в :"
"pep:`626` с версии 3.10 и планировалось удалить в 3.12, но он получил только "
"правильное :exc:`DeprecationWarning ` в 3.12. Может быть удалено в 3.15. "
"(Добавлен Никитой Соболевым в :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, y=int)``) "
"has been deprecated since Python 3.13. Use the class-based syntax or the "
"functional syntax instead."
msgstr ""
"Недокументированный синтаксис аргумента ключевого слова для создания "
"классов :class:`~typing.NamedTuple` (например, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``) устарел, начиная с Python 3.13. "
"Вместо этого используйте синтаксис на основе классов или функциональный "
"синтаксис."

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"Функция декоратора :func:`typing.no_type_check_decorator` устарела, начиная "
"с Python 3.13. После восьми лет использования модуля :mod:`typing` он до сих "
"пор не поддерживается ни одной крупной программой проверки типов."

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`:"

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Методы :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` и :meth:`~wave."
"Wave_read.getmarkers` для :class:`~wave.Wave_read` и :class:` Классы ~wave."
"Wave_write` устарели, начиная с Python 3.13."

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "Ожидается удаление в Python 3.16"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"Установка :attr:`~module.__loader__` в модуле без установки :attr:`__spec__."
"loader <importlib.machinery.ModuleSpec.loader>` устарела. В Python 3.16 :"
"attr:`!__loader__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой."

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"Код формата ``'u'`` (:c:type:`wchar_t`) устарел в документации, начиная с "
"Python 3.3, и во время выполнения, начиная с Python 3.13. Вместо этого "
"используйте код формата ``'w'`` (:c:type:`Py_UCS4`) для символов Юникода."

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16, use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` устарела и будет удалена в Python 3.16, "
"вместо этого используйте :func:`inspect.iscoroutinefunction`. (Предоставлено "
"Цзяхао Ли и Кумаром Адитьей в :gh:`122875`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:26
#: ../../deprecations/pending-removal-in-future.rst:10
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:28
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"Побитовая инверсия логических типов ``~True`` или ``~False`` устарела, "
"начиная с Python 3.12, поскольку она приводит к неожиданным и неинтуитивным "
"результатам (``-2`` и ``-1``. Вместо этого используйте ``not x`` для "
"логического отрицания логического значения. В редких случаях, когда вам "
"нужна поразрядная инверсия основного целого числа, преобразуйте его в int "
"явно (``~int(x)``)."

#: ../../deprecations/pending-removal-in-3.16.rst:35
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:37
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"Исключение :class:`!ExecError` устарело, начиная с Python 3.14. Он не "
"использовался ни одной функцией в :mod:`!shutil` начиная с Python 3.4 и "
"теперь является псевдонимом :exc:`RuntimeError`."

#: ../../deprecations/pending-removal-in-3.16.rst:42
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:44
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"Метод :meth:`Class.get_methods <symtable.Class.get_methods>` устарел, "
"начиная с Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:47
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:49
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"Функция :func:`~sys._enablelegacywindowsfsencoding` устарела начиная с "
"Python 3.13. Вместо этого используйте переменную среды :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING`."

#: ../../deprecations/pending-removal-in-3.16.rst:53
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:55
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"Недокументированный и неиспользуемый атрибут :attr:`!TarFile.tarfile` "
"устарел, начиная с Python 3.13."

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending Removal in Future Versions"
msgstr "Ожидается удаление в будущих версиях"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Следующие API будут удалены в будущем, хотя дата их удаления в настоящее "
"время не запланирована."

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ""
":mod:`argparse`: Вложенные группы аргументов и вложенные взаимоисключающие "
"группы устарели."

#: ../../deprecations/pending-removal-in-future.rst:12
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

#: ../../deprecations/pending-removal-in-future.rst:13
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Генераторы: сигнатура ``throw(type, exc, tb)`` и ``athrow(type, exc, tb)`` "
"устарела: вместо этого используйте ``throw(exc)`` и ``athrow(exc)`` , "
"сигнатура одного аргумента."

#: ../../deprecations/pending-removal-in-future.rst:16
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"В настоящее время Python принимает числовые литералы, за которыми сразу "
"следуют ключевые слова, например ``0in x``, ``1or x``, ``0if 1else 2``. Это "
"позволяет использовать запутанные и неоднозначные выражения, такие как "
"``[0x1for x in y]`` (которые можно интерпретировать как ``[0x1 for x in y]`` "
"или ``[0x1f or x in y]``). Синтаксическое предупреждение выдается, если за "
"числовым литералом сразу следует одно из ключевых слов :keyword:`and`, :"
"keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in` , :keyword:`is` "
"и :keyword:`or`. В будущем выпуске это будет изменено на синтаксическую "
"ошибку. (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:24
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Поддержка методов ``__index__()`` и ``__int__()``, возвращающих тип, "
"отличный от int: эти методы потребуются для возврата экземпляра строгого "
"подкласса :class:`int`."

#: ../../deprecations/pending-removal-in-future.rst:27
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Поддержка метода __float__(), возвращающего строгий подкласс :class:`float`: "
"эти методы потребуются для возврата экземпляра :class:`float`."

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Поддержка метода ``__complex__()``, возвращающего строгий подкласс :class:"
"`complex`: эти методы потребуются для возврата экземпляра :class:`complex`."

#: ../../deprecations/pending-removal-in-future.rst:33
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Делегирование ``int()`` методу ``__trunc__()``."

#: ../../deprecations/pending-removal-in-future.rst:34
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Передача комплексного числа в качестве аргумента *real* или *imag* в "
"конструкторе :func:`complex` теперь не рекомендуется; его следует передавать "
"только как один позиционный аргумент. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`109218`.)"

#: ../../deprecations/pending-removal-in-future.rst:44
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: вместо этого используйте метод :meth:"
"`codeobject.co_lines`."

#: ../../deprecations/pending-removal-in-future.rst:47
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:49
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: используйте ``datetime.datetime."
"now(tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:51
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:54
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: Множественное значение должно быть целым числом."

#: ../../deprecations/pending-removal-in-future.rst:58
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` Параметр *debug_override* устарел: "
"вместо него используйте параметр *optimization*."

#: ../../deprecations/pending-removal-in-future.rst:61
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:63
msgid "``EntryPoints`` tuple interface."
msgstr "Интерфейс кортежа ``EntryPoints``."

#: ../../deprecations/pending-removal-in-future.rst:64
msgid "Implicit ``None`` on return values."
msgstr "Неявное ``None`` для возвращаемых значений."

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: метод ``warn()`` устарел, начиная с Python 3.3, вместо него "
"используйте :meth:`~logging.warning`."

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: Использование ввода StringIO и текстового режима устарело, "
"вместо этого используйте BytesIO и двоичный режим."

#: ../../deprecations/pending-removal-in-future.rst:72
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: Вызов :func:`os.register_at_fork` в многопоточном процессе."

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: значение кортежа для параметра *exc_info* "
"устарело, используйте экземпляр исключения."

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: К числовым ссылкам на группы и именам групп в регулярных "
"выражениях теперь применяются более строгие правила. В качестве числовой "
"ссылки теперь принимается только последовательность цифр ASCII. Имя группы в "
"байтовых шаблонах и строках замены теперь может содержать только буквы "
"ASCII, цифры и подчеркивание. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`91760`.)"

#: ../../deprecations/pending-removal-in-future.rst:84
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr "Модули :mod:`!sre_compile`, :mod:`!sre_constants` и :mod:`!sre_parse`."

#: ../../deprecations/pending-removal-in-future.rst:86
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."

#: ../../deprecations/pending-removal-in-future.rst:89
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` опции и протоколы:"

#: ../../deprecations/pending-removal-in-future.rst:91
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` без аргумента протокола устарел."

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."

#: ../../deprecations/pending-removal-in-future.rst:95
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` опции"

#: ../../deprecations/pending-removal-in-future.rst:96
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` опции"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:98
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:101
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:102
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` методы:"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: используйте :meth:`~threading."
"Condition.notify_all`."

#: ../../deprecations/pending-removal-in-future.rst:109
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""
":meth:`!threading.Event.isSet`: используйте :meth:`~threading.Event.is_set`."

#: ../../deprecations/pending-removal-in-future.rst:110
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."

#: ../../deprecations/pending-removal-in-future.rst:112
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: используйте :meth:`threading."
"current_thread`."

#: ../../deprecations/pending-removal-in-future.rst:115
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""
":meth:`!threading.activeCount`: используйте :meth:`threading.active_count`."

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

#: ../../deprecations/pending-removal-in-future.rst:119
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: не рекомендуется возвращать из "
"тестового примера значение, отличное от ``None``."

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` устаревшая функция: используйте :func:`~urllib.parse."
"urlparse` "

#: ../../deprecations/pending-removal-in-future.rst:124
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:126
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:128
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:129
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:130
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:131
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:133
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:134
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:136
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."

#: ../../deprecations/pending-removal-in-future.rst:140
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` не должен выполнять "
"частичную запись."

#: ../../deprecations/pending-removal-in-future.rst:143
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: Проверка истинности :class:`~xml.etree."
"ElementTree.Element` устарела. В будущем выпуске он всегда будет возвращать "
"``True``. Вместо этого отдавайте предпочтение явным тестам ``len(elem)`` или "
"``elem is not None``."

#: ../../deprecations/pending-removal-in-future.rst:148
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""
":meth:`zipimport.zipimporter.load_module` устарел: вместо него используйте :"
"meth:`~zipimport.zipimporter.exec_module`."

#: ../../whatsnew/3.12.rst:1355 ../../whatsnew/3.12.rst:2239
msgid "Removed"
msgstr "Удалено"

#: ../../whatsnew/3.12.rst:1358
msgid "asynchat and asyncore"
msgstr "asynchat and asyncore"

#: ../../whatsnew/3.12.rst:1360
msgid ""
"These two modules have been removed according to the schedule in :pep:`594`, "
"having been deprecated in Python 3.6. Use :mod:`asyncio` instead. "
"(Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""
"Эти два модуля были удалены в соответствии с графиком :pep:`594`, поскольку "
"они объявлены устаревшими в Python 3.6. Вместо этого используйте :mod:"
"`asyncio`. (Предоставлено Никитой Соболевым в :gh:`96580`.)"

#: ../../whatsnew/3.12.rst:1367
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.12.rst:1369
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ""
"Несколько имен, устаревших в :mod:`configparser` ещё в версии 3.2, были "
"удалены в :gh:`89336`:"

#: ../../whatsnew/3.12.rst:1372
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or "
"argument. Use the ``source`` attribute and argument instead."
msgstr ""
":class:`configparser.ParsingError` больше не имеет атрибута или аргумента "
"``filename``. Вместо этого используйте атрибут и аргумент ``source``."

#: ../../whatsnew/3.12.rst:1374
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""
":mod:`configparser` больше не имеет класса ``SafeConfigParser``. Вместо "
"этого используйте более короткое имя :class:`~configparser.ConfigParser`."

#: ../../whatsnew/3.12.rst:1376
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use :"
"meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""
":class:`configparser.ConfigParser` больше не имеет метода ``readfp``. Вместо "
"этого используйте :meth:`~configparser.ConfigParser.read_file`."

#: ../../whatsnew/3.12.rst:1382
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.12.rst:1384
msgid ""
"Remove the :py:mod:`!distutils` package. It was deprecated in Python 3.10 "
"by :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""
"Удалите пакет :py:mod:`!distutils`. В Python 3.10 он объявлен устаревшим из-"
"за :pep:`632` \"Устаревшего модуля distutils\". Для проектов, которые все "
"еще используют distutils и не могут быть обновлены на что-то другое, можно "
"установить проект setuptools: он по-прежнему предоставляет distutils. "
"(Предоставлено Виктором Стиннером в :gh:`92584`.)"

#: ../../whatsnew/3.12.rst:1391
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.12.rst:1393
msgid ""
"Remove the bundled setuptools wheel from :mod:`ensurepip`, and stop "
"installing setuptools in environments created by :mod:`venv`."
msgstr ""
"Удалите встроенное колесо настройки инструментов из :mod:`ensurepip` и "
"прекратите установку инструментов настройки в средах, созданных :mod:`venv`."

#: ../../whatsnew/3.12.rst:1396
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in "
"the build environment it uses for building a package."
msgstr ""
"``pip (>= 22.1)`` не требует установки инструментов настройки в среде. "
"Пакеты на основе ``setuptools`` (и ``distutils``) по-прежнему можно "
"использовать с ``pip install``, поскольку pip предоставит ``setuptools`` в "
"среде сборки, которую он использует для сборки пакета."

#: ../../whatsnew/3.12.rst:1402
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no "
"longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""
"``easy_install``, ``pkg_resources``, ``setuptools`` и ``distutils`` больше "
"не предоставляются по умолчанию в средах, созданных с помощью ``venv`` или "
"загруженных с ``ensurepip``, поскольку они часть пакета ``setuptools``. Для "
"проектов, использующих их во время выполнения, проект ``setuptools`` должен "
"быть объявлен как зависимость и установлен отдельно (обычно с использованием "
"pip)."

#: ../../whatsnew/3.12.rst:1409
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr "(Предоставлено Прадьюном Гедамом в :gh:`95299`.)"

#: ../../whatsnew/3.12.rst:1412
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.12.rst:1414
msgid ""
"Remove :mod:`enum`'s ``EnumMeta.__getattr__``, which is no longer needed for "
"enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""
"Удалите ``EnumMeta.__getattr__`` из :mod:`enum`, который больше не нужен для "
"доступа к атрибуту перечисления. (Предоставлено Итаном Фурманом в :gh:"
"`95083`.)"

#: ../../whatsnew/3.12.rst:1419
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.12.rst:1421
msgid ""
"Remove :mod:`ftplib`'s ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""
"Удалите атрибут класса FTP_TLS.ssl_version в :mod:`ftplib`: вместо него "
"используйте параметр *context*. (Предоставлено Виктором Стиннером в :gh:"
"`94172`.)"

#: ../../whatsnew/3.12.rst:1426
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.12.rst:1428
msgid ""
"Remove the ``filename`` attribute of :mod:`gzip`'s :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in :gh:"
"`94196`.)"
msgstr ""
"Удалите атрибут ``filename`` из :class:`gzip.GzipFile` :mod:`gzip`, "
"устаревший, начиная с Python 2.6, вместо этого используйте атрибут :attr:"
"`~gzip.GzipFile.name`. В режиме записи атрибут filename добавляет расширение "
"файла .gz, если оно отсутствовало. (Предоставлено Виктором Стиннером в :gh:"
"`94196`.)"

#: ../../whatsnew/3.12.rst:1435
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.12.rst:1437
msgid ""
"Remove the pure Python implementation of :mod:`hashlib`'s :func:`hashlib."
"pbkdf2_hmac`, deprecated in Python 3.10. Python 3.10 and newer requires "
"OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C implementation "
"of :func:`~hashlib.pbkdf2_hmac` which is faster. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"Удалите чистую реализацию Python :mod:`hashlib` :func:`hashlib.pbkdf2_hmac`, "
"которая устарела в Python 3.10. Для Python 3.10 и новее требуется OpenSSL "
"1.1.1 (:pep:`644`): эта версия OpenSSL предоставляет реализацию C :func:"
"`~hashlib.pbkdf2_hmac`, которая работает быстрее. (Предоставлено Виктором "
"Стиннером в :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1444 ../../whatsnew/3.12.rst:1473
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.12.rst:1446
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr "Многие ранее устаревшие очистки в :mod:`importlib` теперь завершены:"

#: ../../whatsnew/3.12.rst:1449
msgid ""
"References to, and support for :meth:`!module_repr` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""
"Ссылки на :meth:`!module_repr` и поддержка :meth:`!module_repr` были "
"удалены. (Предоставлено Барри Варшавой в :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1452
msgid ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` and "
"``importlib.util.module_for_loader`` have all been removed. (Contributed by "
"Brett Cannon and Nikita Sobolev in :gh:`65961` and :gh:`97850`.)"
msgstr ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` и ``importlib."
"util.module_for_loader`` были удалены. (Предоставлено Бреттом Кэнноном и "
"Никитой Соболевым в :gh:`65961` и :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1456
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed.  "
"(Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"Поддержка API find_loader() и find_module() удалена. (Предоставлено Барри "
"Варшавой в :gh:`98040`.)"

#: ../../whatsnew/3.12.rst:1459
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader`` "
"have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter`` и ``pkgutil.ImpLoader`` "
"были удалены. (Предоставлено Барри Варшавой в :gh:`98040`.)"

#: ../../whatsnew/3.12.rst:1465 ../../whatsnew/3.12.rst:1473
msgid "imp"
msgstr "imp"

#: ../../whatsnew/3.12.rst:1467
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in :"
"gh:`98040`.)"
msgstr ""
"Модуль :mod:`!imp` был удален. (Предоставлено Барри Варшавой в :gh:`98040`.)"

#: ../../whatsnew/3.12.rst:1470
msgid "To migrate, consult the following correspondence table:"
msgstr "Для миграции обратитесь к следующей таблице соответствия:"

#: ../../whatsnew/3.12.rst:1475
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: ../../whatsnew/3.12.rst:1475
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr "Вставьте None в ``sys.path_importer_cache``"

#: ../../whatsnew/3.12.rst:1476
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: ../../whatsnew/3.12.rst:1476
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: ../../whatsnew/3.12.rst:1477
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: ../../whatsnew/3.12.rst:1477
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: ../../whatsnew/3.12.rst:1478
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: ../../whatsnew/3.12.rst:1478
msgid ":const:`importlib.util.MAGIC_NUMBER`"
msgstr ":const:`importlib.util.MAGIC_NUMBER`"

#: ../../whatsnew/3.12.rst:1479
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: ../../whatsnew/3.12.rst:1479
msgid ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, :const:`importlib.machinery."
"EXTENSION_SUFFIXES`, and :const:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, :const:`importlib.machinery."
"EXTENSION_SUFFIXES`, and :const:`importlib.machinery.BYTECODE_SUFFIXES`"

#: ../../whatsnew/3.12.rst:1480
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: ../../whatsnew/3.12.rst:1480
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: ../../whatsnew/3.12.rst:1481
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: ../../whatsnew/3.12.rst:1481
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: ../../whatsnew/3.12.rst:1482
msgid "``imp.new_module(name)``"
msgstr "``imp.new_module(name)``"

#: ../../whatsnew/3.12.rst:1482
msgid "``types.ModuleType(name)``"
msgstr "``types.ModuleType(name)``"

#: ../../whatsnew/3.12.rst:1483
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: ../../whatsnew/3.12.rst:1483
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: ../../whatsnew/3.12.rst:1484
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: ../../whatsnew/3.12.rst:1484
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: ../../whatsnew/3.12.rst:1485
msgid "``imp.load_source()``"
msgstr "``imp.load_source()``"

#: ../../whatsnew/3.12.rst:1485
msgid "*See below*"
msgstr "*См. ниже*"

#: ../../whatsnew/3.12.rst:1488
msgid "Replace ``imp.load_source()`` with::"
msgstr "Замените ``imp.load_source()`` на::"

#: ../../whatsnew/3.12.rst:1490
msgid ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, "
"loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # The module is always executed and not cached in sys.modules.\n"
"    # Uncomment the following line to cache the module.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"
msgstr ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, "
"loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # The module is always executed and not cached in sys.modules.\n"
"    # Uncomment the following line to cache the module.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"

#: ../../whatsnew/3.12.rst:1503
msgid "Remove :mod:`!imp` functions and attributes with no replacements:"
msgstr "Удалите функции и атрибуты :mod:`!imp` без замен:"

#: ../../whatsnew/3.12.rst:1505
msgid "Undocumented functions:"
msgstr "Недокументированные функции:"

#: ../../whatsnew/3.12.rst:1507
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: ../../whatsnew/3.12.rst:1508
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: ../../whatsnew/3.12.rst:1509
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: ../../whatsnew/3.12.rst:1510
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: ../../whatsnew/3.12.rst:1512
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: схема "
"блокировки изменилась в Python 3.3 на блокировки для каждого модуля."

#: ../../whatsnew/3.12.rst:1514
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""
"Константы ``imp.find_module()``: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN`` ``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."

#: ../../whatsnew/3.12.rst:1519
msgid "io"
msgstr "io"

#: ../../whatsnew/3.12.rst:1521
msgid ""
"Remove :mod:`io`'s ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` (:func:`io."
"open`) function is a built-in function. Since Python 3.10, :func:`!_pyio."
"open` is also a static method. (Contributed by Victor Stinner in :gh:"
"`94169`.)"
msgstr ""
"Удалите :mod:`io`` io.OpenWrapper`` и ``_pyio.OpenWrapper``, которые "
"устарели в Python 3.10: просто используйте вместо них :func:`open`. Функция :"
"func:`open` (:func:`io.open`) является встроенной функцией. Начиная с Python "
"3.10, :func:`!_pyio.open` также является статическим методом. (Предоставлено "
"Виктором Стиннером в :gh:`94169`.)"

#: ../../whatsnew/3.12.rst:1528
msgid "locale"
msgstr "локаль"

#: ../../whatsnew/3.12.rst:1530
msgid ""
"Remove :mod:`locale`'s :func:`!locale.format` function, deprecated in Python "
"3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""
"Удалите функцию :func:`!locale.format` из :mod:`locale`, устаревшую в Python "
"3.7: вместо нее используйте :func:`locale.format_string`. (Предоставлено "
"Виктором Стиннером в :gh:`94226`.)"

#: ../../whatsnew/3.12.rst:1535
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.12.rst:1537
msgid ""
"The ``smtpd`` module has been removed according to the schedule in :pep:"
"`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use the :pypi:"
"`aiosmtpd` PyPI module or any other :mod:`asyncio`-based server instead. "
"(Contributed by Oleg Iarygin in :gh:`93243`.)"
msgstr ""
"Модуль smtpd был удален согласно расписанию в :pep:`594`, поскольку он "
"устарел в Python 3.4.7 и 3.5.4. Вместо этого используйте модуль PyPI :pypi:"
"`aiosmtpd` или любой другой сервер на базе :mod:`asyncio`. (Предоставлено "
"Олегом Ярыгиным в :gh:`93243`.)"

#: ../../whatsnew/3.12.rst:1546
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr ""
"Следующие недокументированные функции :mod:`sqlite3`, устаревшие в Python "
"3.10, теперь удалены:"

#: ../../whatsnew/3.12.rst:1549
msgid "``sqlite3.enable_shared_cache()``"
msgstr "``sqlite3.enable_shared_cache()``"

#: ../../whatsnew/3.12.rst:1550
msgid "``sqlite3.OptimizedUnicode``"
msgstr "``sqlite3.OptimizedUnicode``"

#: ../../whatsnew/3.12.rst:1552
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""
"Если необходимо использовать общий кеш, откройте базу данных в режиме URI, "
"используя параметр запроса ``cache=shared``."

#: ../../whatsnew/3.12.rst:1555
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for :class:"
"`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""
"Текстовая фабрика sqlite3.OptimizedUnicode является псевдонимом для :class:"
"`str` начиная с Python 3.3. Код, который ранее установил для текстовой "
"фабрики значение «OptimizedUnicode», может либо явно использовать «str», "
"либо полагаться на значение по умолчанию, которое также является «str»."

#: ../../whatsnew/3.12.rst:1560
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr "(Предоставлено Эрлендом Э. Осландом в :gh:`92548`.)"

#: ../../whatsnew/3.12.rst:1563
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.12.rst:1565
msgid ""
"Remove :mod:`ssl`'s :func:`!ssl.RAND_pseudo_bytes` function, deprecated in "
"Python 3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"Удалите функцию :func:`!ssl.RAND_pseudo_bytes` из :mod:`ssl`, устаревшую в "
"Python 3.6: вместо этого используйте :func:`os.urandom` или :func:`ssl."
"RAND_bytes`. (Предоставлено Виктором Стиннером в :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1569
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python "
"3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"Удалите функцию :func:`!ssl.match_hostname`. Он устарел в Python 3.7. "
"OpenSSL выполняет сопоставление имен хостов, начиная с Python 3.7. Python "
"больше не использует функцию :func:`!ssl.match_hostname`. (Предоставлено "
"Виктором Стиннером в :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1575
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its :class:`ssl."
"SSLContext.wrap_socket` method. Any package that still uses :func:`!ssl."
"wrap_socket` is broken and insecure. The function neither sends a SNI TLS "
"extension nor validates the server hostname. Code is subject to :cwe:`295` "
"(Improper Certificate Validation). (Contributed by Victor Stinner in :gh:"
"`94199`.)"
msgstr ""
"Удалите функцию :func:`!ssl.wrap_socket`, которая устарела в Python 3.7: "
"вместо этого создайте объект :class:`ssl.SSLContext` и вызовите его метод :"
"class:`ssl.SSLContext.wrap_socket`. Любой пакет, который все еще использует :"
"func:`!ssl.wrap_socket`, сломан и небезопасен. Функция не отправляет "
"расширение SNI TLS и не проверяет имя хоста сервера. На код распространяется "
"действие :cwe:`295` (неправильная проверка сертификата). (Предоставлено "
"Виктором Стиннером в :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1586
msgid "Remove many long-deprecated :mod:`unittest` features:"
msgstr "Удалите многие давно устаревшие функции :mod:`unittest`:"

#: ../../whatsnew/3.12.rst:1590
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr "Ряд псевдонимов метода :class:`~unittest.TestCase`:"

#: ../../whatsnew/3.12.rst:1593
msgid "Deprecated alias"
msgstr "Устаревший псевдоним"

#: ../../whatsnew/3.12.rst:1593
msgid "Method Name"
msgstr "Название метода"

#: ../../whatsnew/3.12.rst:1593
msgid "Deprecated in"
msgstr "Устарело в"

#: ../../whatsnew/3.12.rst:1595
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.12.rst:1595 ../../whatsnew/3.12.rst:1602
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.12.rst:1595 ../../whatsnew/3.12.rst:1596
#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1598
#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1600
#: ../../whatsnew/3.12.rst:1601
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.12.rst:1596
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.12.rst:1596
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.12.rst:1597
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1603
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.12.rst:1598
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.12.rst:1598 ../../whatsnew/3.12.rst:1604
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.12.rst:1599
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1605
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.12.rst:1600
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.12.rst:1600 ../../whatsnew/3.12.rst:1606
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.12.rst:1601
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.12.rst:1601
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.12.rst:1602
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.12.rst:1602 ../../whatsnew/3.12.rst:1603
#: ../../whatsnew/3.12.rst:1604 ../../whatsnew/3.12.rst:1605
#: ../../whatsnew/3.12.rst:1606 ../../whatsnew/3.12.rst:1607
#: ../../whatsnew/3.12.rst:1608
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.12.rst:1603
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.12.rst:1604
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.12.rst:1605
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.12.rst:1606
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.12.rst:1607
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.12.rst:1607
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.12.rst:1608
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.12.rst:1608
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.12.rst:1609
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.12.rst:1609
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.12.rst:1609
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.12.rst:1612
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr ""
"Вы можете использовать https://github.com/isidentical/teyit для "
"автоматической модернизации модульных тестов."

#: ../../whatsnew/3.12.rst:1615
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""
"Недокументированный и неработающий :class:`~unittest.TestCase` метод "
"``assertDictContainsSubset`` (устарел в Python 3.2)."

#: ../../whatsnew/3.12.rst:1618
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule <unittest.TestLoader."
"loadTestsFromModule>` parameter *use_load_tests* (deprecated and ignored "
"since Python 3.5)."
msgstr ""
"Недокументированный :meth:`TestLoader.loadTestsFromModule <unittest."
"TestLoader.loadTestsFromModule>` параметр *use_load_tests* (устарел и "
"игнорируется, начиная с Python 3.5)."

#: ../../whatsnew/3.12.rst:1622
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult`` "
"(deprecated in Python 3.2)."
msgstr ""
"Псевдоним класса :class:`~unittest.TextTestResult`: ``_TextTestResult`` (не "
"рекомендуется в Python 3.2)."

#: ../../whatsnew/3.12.rst:1625
msgid "(Contributed by Serhiy Storchaka in :gh:`89325`.)"
msgstr "(Предоставлено Сергеем Сторчакой в ​​:gh:`89325`.)"

#: ../../whatsnew/3.12.rst:1628
msgid "webbrowser"
msgstr "веб-браузер"

#: ../../whatsnew/3.12.rst:1630
msgid ""
"Remove support for obsolete browsers from :mod:`webbrowser`. The removed "
"browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird, and Firefox versions 35 and below (:gh:`102871`)."
msgstr ""
"Удалить поддержку устаревших браузеров из :mod:`webbrowser`. В число "
"удаленных браузеров входят: Grail, Mosaic, Netscape, Galeon, Skipstone, "
"Iceape, Firebird и Firefox версии 35 и ниже (:gh:`102871`)."

#: ../../whatsnew/3.12.rst:1635
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.12.rst:1637
msgid ""
"Remove the ``ElementTree.Element.copy()`` method of the pure Python "
"implementation, deprecated in Python 3.10, use the :func:`copy.copy` "
"function instead.  The C implementation of :mod:`xml.etree.ElementTree` has "
"no ``copy()`` method, only a ``__copy__()`` method. (Contributed by Victor "
"Stinner in :gh:`94383`.)"
msgstr ""
"Удалите метод ElementTree.Element.copy() из реализации чистого Python, "
"который устарел в Python 3.10, вместо этого используйте функцию :func:`copy."
"copy`. Реализация :mod:`xml.etree.ElementTree` на C не имеет метода "
"``copy()``, есть только метод ``__copy__()``. (Предоставлено Виктором "
"Стиннером в :gh:`94383`.)"

#: ../../whatsnew/3.12.rst:1644
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.12.rst:1646
msgid ""
"Remove :mod:`zipimport`'s ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See :pep:"
"`451` for the rationale. (Contributed by Victor Stinner in :gh:`94379`.)"
msgstr ""
"Удалите методы find_loader() и find_module() из :mod:`zipimport``, которые "
"устарели в Python 3.10: вместо этого используйте метод ``find_spec()``. См. "
"обоснование в :pep:`451`. (Предоставлено Виктором Стиннером в :gh:`94379`.)"

#: ../../whatsnew/3.12.rst:1652
msgid "Others"
msgstr "Другие"

#: ../../whatsnew/3.12.rst:1654
msgid ""
"Remove the ``suspicious`` rule from the documentation :file:`Makefile` and :"
"file:`Doc/tools/rstlint.py`, both in favor of `sphinx-lint <https://github."
"com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien Palard in :gh:"
"`98179`.)"
msgstr ""
"Удалите ``подозрительное`` правило из документации :file:`Makefile` и :file:"
"`Doc/tools/rstlint.py`, оба в пользу ``sphinx-lint <https://github.com/"
"sphinx- вклад/sphinx-lint>`_. (Предоставлено Жюльеном Паларом в :gh:`98179`.)"

#: ../../whatsnew/3.12.rst:1659
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, :mod:"
"`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the *key_file*, "
"*cert_file* and *check_hostname* parameters from the :mod:`http.client` "
"module, all deprecated since Python 3.6. Use the *context* parameter "
"(*ssl_context* in :mod:`imaplib`) instead. (Contributed by Victor Stinner "
"in :gh:`94172`.)"
msgstr ""
"Удалите параметры *keyfile* и *certfile* из модулей :mod:`ftplib`, :mod:"
"`imaplib`, :mod:`poplib` и :mod:`smtplib`, а также *key_file*, *cert_file* и "
"*check_hostname* из модуля :mod:`http.client`, все они устарели, начиная с "
"Python 3.6. Вместо этого используйте параметр *context* (*ssl_context* в :"
"mod:`imaplib`). (Предоставлено Виктором Стиннером в :gh:`94172`.)"

#: ../../whatsnew/3.12.rst:1667
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests. "
"(Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""
"Удалите хаки совместимости ``Jython`` из нескольких модулей и тестов stdlib. "
"(Добавлен Никитой Соболевым в :gh:`99482`.)"

#: ../../whatsnew/3.12.rst:1670
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from :mod:"
"`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""
"Удалите флаг ``_use_broken_old_ctypes_structure_semantics_`` из модуля :mod:"
"`ctypes`. (Добавлен Никитой Соболевым в :gh:`99285`.)"

#: ../../whatsnew/3.12.rst:1678 ../../whatsnew/3.12.rst:2002
msgid "Porting to Python 3.12"
msgstr "Портирование на Python 3.12"

#: ../../whatsnew/3.12.rst:1680
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок, которые могут потребовать внесения изменений в ваш код."

#: ../../whatsnew/3.12.rst:1684
msgid "Changes in the Python API"
msgstr "Изменения в API Python"

#: ../../whatsnew/3.12.rst:1686
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
"К числовым ссылкам на группы и именам групп в регулярных выражениях теперь "
"применяются более строгие правила. В качестве числовой ссылки теперь "
"принимается только последовательность цифр ASCII. Имя группы в байтовых "
"шаблонах и строках замены теперь может содержать только буквы ASCII, цифры и "
"подчеркивание. (Предоставлено Сергеем Сторчакой в ​​:gh:`91760`.)"

#: ../../whatsnew/3.12.rst:1693
msgid ""
"Remove ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs "
"where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka :gh:"
"`86388`.)"
msgstr ""
"Удалите функциональность randrange(), которая устарела начиная с Python "
"3.10. Раньше randrange(10.0) без потерь конвертировался в randrange(10). "
"Теперь он вызывает :exc:`TypeError`. Кроме того, исключение, вызываемое для "
"нецелых значений, таких как randrange(10.5) или randrange('10'), было "
"изменено с :exc:`ValueError` на :exc:`TypeError`. Это также предотвращает "
"ошибки, при которых randrange(1e25) автоматически выбирал из большего "
"диапазона, чем randrange(10**25)``. (Первоначально предложено Сергеем "
"Сторчакой :gh:`86388`.)"

#: ../../whatsnew/3.12.rst:1701
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage "
"on Windows."
msgstr ""
":class:`argparse.ArgumentParser` изменил кодировку и обработчик ошибок для "
"чтения аргументов из файла (например, опция ``fromfile_prefix_chars``) из "
"кодировки текста по умолчанию (например, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>`) в :term:"
"`кодирование файловой системы и обработчик ошибок`. Файлы аргументов должны "
"быть закодированы в UTF-8 вместо кодовой страницы ANSI в Windows."

#: ../../whatsnew/3.12.rst:1707
msgid ""
"Remove the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based :pypi:"
"`aiosmtpd` PyPI module."
msgstr ""
"Удалите модуль smtpd на основе asyncore, который устарел в Python 3.4.7 и "
"3.5.4. Рекомендуемой заменой является модуль PyPI на основе :mod:`asyncio`."

#: ../../whatsnew/3.12.rst:1711
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated "
"in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""
":func:`shlex.split`: передача ``None`` для аргумента *s* теперь вызывает "
"исключение, а не чтение :data:`sys.stdin`. Эта функция устарела в Python "
"3.9. (Предоставлено Виктором Стиннером в :gh:`94352`.)"

#: ../../whatsnew/3.12.rst:1716
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like :class:"
"`bytearray` and :class:`memoryview` types: only the exact :class:`bytes` "
"type is accepted for bytes strings. (Contributed by Victor Stinner in :gh:"
"`98393`.)"
msgstr ""
"Модуль :mod:`os` больше не принимает байтовые пути, такие как типы :class:"
"`bytearray` и :class:`memoryview`: для строк байтов принимается только "
"точный тип :class:`bytes`. (Предоставлено Виктором Стиннером в :gh:`98393`.)"

#: ../../whatsnew/3.12.rst:1721
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters, "
"but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so "
"only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Donghee Na in :gh:`99127`.)"
msgstr ""
":func:`syslog.openlog` и :func:`syslog.closelog` теперь терпят неудачу, если "
"используются в субинтерпретаторах. :func:`syslog.syslog` по-прежнему можно "
"использовать в субинтерпретаторах, но теперь только в том случае, если :func:"
"`syslog.openlog` уже был вызван в основном интерпретаторе. Эти новые "
"ограничения не распространяются на основной интерпретатор, поэтому они могут "
"затронуть лишь очень небольшую группу пользователей. Это изменение помогает "
"обеспечить изоляцию интерпретатора. Кроме того, :mod:`syslog` — это оболочка "
"глобальных ресурсов процесса, которыми лучше всего управлять из основного "
"интерпретатора. (Предоставлено Донхи На в :gh:`99127`.)"

#: ../../whatsnew/3.12.rst:1730
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For "
"most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""
"Недокументированное поведение блокировки :func:`~functools.cached_property` "
"удалено, поскольку оно блокируется для всех экземпляров класса, что приводит "
"к высокой конкуренции за блокировку. Это означает, что функция получения "
"кэшированных свойств теперь может запускаться более одного раза для одного "
"экземпляра, если два потока соперничают. Для большинства простых "
"кэшированных свойств (например, тех, которые являются идемпотентными и "
"просто вычисляют значение на основе других атрибутов экземпляра) это "
"подойдет. Если необходима синхронизация, реализуйте блокировку внутри "
"функции получения кэшированных свойств или вокруг многопоточных точек "
"доступа."

#: ../../whatsnew/3.12.rst:1743
msgid ""
"When extracting tar files using :mod:`tarfile` or :func:`shutil."
"unpack_archive`, pass the *filter* argument to limit features that may be "
"surprising or dangerous. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
"При извлечении файлов tar с помощью :mod:`tarfile` или :func:`shutil."
"unpack_archive` передайте аргумент *filter*, чтобы ограничить функции, "
"которые могут быть неожиданными или опасными. Подробности смотрите в :ref:"
"`tarfile-extraction-filter`."

#: ../../whatsnew/3.12.rst:1748
msgid ""
"The output of the :func:`tokenize.tokenize` and :func:`tokenize."
"generate_tokens` functions is now changed due to the changes introduced in :"
"pep:`701`. This means that ``STRING`` tokens are not emitted any more for f-"
"strings and the tokens described in :pep:`701` are now produced instead: "
"``FSTRING_START``, ``FSTRING_MIDDLE`` and ``FSTRING_END`` are now emitted "
"for f-string \"string\" parts in addition to the appropriate tokens for the "
"tokenization in the expression components. For example for the f-string "
"``f\"start {1+1} end\"`` the old version of the tokenizer emitted::"
msgstr ""
"Вывод функций :func:`tokenize.tokenize` и :func:`tokenize.generate_tokens` "
"теперь изменен из-за изменений, внесенных в :pep:`701`. Это означает, что "
"токены ``STRING`` больше не создаются для f-строк, а вместо них теперь "
"создаются токены, описанные в :pep:`701`: ``FSTRING_START``, "
"``FSTRING_MIDDLE`` и ``FSTRING_END` ` теперь создаются для \"строковых\" "
"частей f-строки в дополнение к соответствующим токенам для токенизации в "
"компонентах выражения. Например, для f-строки ``f\"start {1+1} end\"`` "
"старая версия токенизатора выдавала:"

#: ../../whatsnew/3.12.rst:1757
msgid "1,0-1,18:           STRING         'f\"start {1+1} end\"'"
msgstr "1,0-1,18:           STRING         'f\"start {1+1} end\"'"

#: ../../whatsnew/3.12.rst:1759
msgid "while the new version emits::"
msgstr "в то время как новая версия выдает::"

#: ../../whatsnew/3.12.rst:1761
msgid ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"
msgstr ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"

#: ../../whatsnew/3.12.rst:1771
msgid ""
"Additionally, there may be some minor behavioral changes as a consequence of "
"the changes required to support :pep:`701`. Some of these changes include:"
msgstr ""
"Кроме того, в результате изменений, необходимых для поддержки :pep:`701`, "
"могут произойти некоторые незначительные изменения в поведении. Некоторые из "
"этих изменений включают в себя:"

#: ../../whatsnew/3.12.rst:1774
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""
"Атрибут ``type`` токенов, создаваемых при токенизации некоторых недопустимых "
"символов Python, таких как ``!``, изменился с ``ERRORTOKEN`` на ``OP``."

#: ../../whatsnew/3.12.rst:1777
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr ""
"Неполные однострочные строки теперь также вызывают :exc:`tokenize."
"TokenError`, как и неполные многострочные строки."

#: ../../whatsnew/3.12.rst:1780
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError` "
"instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""
"Некоторый неполный или недействительный код Python теперь вызывает :exc:"
"`tokenize.TokenError` вместо возврата произвольных токенов ``ERRORTOKEN`` "
"при его токенизации."

#: ../../whatsnew/3.12.rst:1783
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr ""
"Смешение табуляции и пробелов в качестве отступов в одном файле больше не "
"поддерживается и вызывает ошибку :exc:`TabError`."

#: ../../whatsnew/3.12.rst:1786
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"Модуль :mod:`threading` теперь ожидает, что модуль :mod:`!_thread` будет "
"иметь атрибут ``_is_main_interpreter``. Это функция без аргументов, которая "
"возвращает True, если текущий интерпретатор является основным "
"интерпретатором."

#: ../../whatsnew/3.12.rst:1791
msgid ""
"Any library or application that provides a custom ``_thread`` module should "
"provide ``_is_main_interpreter()``. (See :gh:`112826`.)"
msgstr ""
"Любая библиотека или приложение, предоставляющее собственный модуль "
"``_thread``, должны предоставлять ``_is_main_interpreter()``. (См. :gh:"
"`112826`.)"

#: ../../whatsnew/3.12.rst:1796
msgid "Build Changes"
msgstr "Изменения сборки"

#: ../../whatsnew/3.12.rst:1798
msgid ""
"Python no longer uses :file:`setup.py` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by :file:`Makefile`. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes "
"in :gh:`93939`.)"
msgstr ""
"Python больше не использует :file:`setup.py` для создания общих модулей "
"расширения C. Параметры сборки, такие как заголовки и библиотеки, "
"обнаруживаются в скрипте configure. Расширения создаются с помощью :file:"
"`Makefile`. Большинство расширений используют pkg-config и возвращаются к "
"ручному обнаружению. (Предоставлено Кристианом Хаймсом в :gh:`93939`.)"

#: ../../whatsnew/3.12.rst:1804
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""
"``va_start()`` с двумя параметрами, например ``va_start(args, format),`` "
"теперь требуется для сборки Python. ``va_start()`` больше не вызывается с "
"одним параметром. (Предоставлено Кумаром Адитьей в :gh:`93207`.)"

#: ../../whatsnew/3.12.rst:1809
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Donghee Na "
"in :gh:`89536`.)"
msgstr ""
"CPython теперь использует параметр ThinLTO в качестве политики оптимизации "
"времени компоновки по умолчанию, если компилятор Clang принимает этот флаг. "
"(Предоставлено Донхи На в :gh:`89536`.)"

#: ../../whatsnew/3.12.rst:1813
msgid ""
"Add ``COMPILEALL_OPTS`` variable in :file:`Makefile` to override :mod:"
"`compileall` options (default: ``-j0``) in ``make install``. Also merged the "
"3 ``compileall`` commands into a single command to build .pyc files for all "
"optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in :gh:"
"`99289`.)"
msgstr ""
"Добавьте переменную COMPILEALL_OPTS в :file:`Makefile`, чтобы переопределить "
"параметры :mod:`compileall` (по умолчанию: ``-j0``) в ``make install``. "
"Также объединены 3 команды compileall в одну команду для одновременной "
"сборки файлов .pyc для всех уровней оптимизации (0, 1, 2). (Предоставлено "
"Виктором Стиннером в :gh:`99289`.)"

#: ../../whatsnew/3.12.rst:1819
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr "Добавьте триплеты платформ для 64-битного LoongArch:"

#: ../../whatsnew/3.12.rst:1821
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: ../../whatsnew/3.12.rst:1822
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: ../../whatsnew/3.12.rst:1823
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: ../../whatsnew/3.12.rst:1825
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr "(Предоставлено Чжан На в :gh:`90656`.)"

#: ../../whatsnew/3.12.rst:1827
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr "``PYTHON_FOR_REGEN`` теперь требует Python 3.10 или новее."

#: ../../whatsnew/3.12.rst:1829
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate :file:`!"
"configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""
"Autoconf 2.71 и aclocal 1.16.4 теперь необходимы для повторного создания :"
"file:`!configure`. (Предоставлено Кристианом Хаймсом в :gh:`89886`.)"

#: ../../whatsnew/3.12.rst:1833
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""
"Сборки Windows и установщики macOS с сайта python.org теперь используют "
"OpenSSL 3.0."

#: ../../whatsnew/3.12.rst:1837
msgid "C API Changes"
msgstr "Изменения в C API"

#: ../../whatsnew/3.12.rst:1844
msgid ""
":pep:`697`: Introduce the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""
":pep:`697`: Представляем :ref:`Unstable C API уровень <unstable-c-api>`, "
"предназначенный для инструментов низкого уровня, таких как отладчики и JIT-"
"компиляторы. Этот API может меняться в каждой второстепенной версии CPython "
"без предупреждений об устаревании. Его содержимое отмечено префиксом "
"PyUnstable_ в именах."

#: ../../whatsnew/3.12.rst:1850
msgid "Code object constructors:"
msgstr "Конструкторы объектов кода:"

#: ../../whatsnew/3.12.rst:1852
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr "``PyUnstable_Code_New()`` (переименован из ``PyCode_New``)"

#: ../../whatsnew/3.12.rst:1853
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (переименован из "
"``PyCode_NewWithPosOnlyArgs``)"

#: ../../whatsnew/3.12.rst:1855
msgid "Extra storage for code objects (:pep:`523`):"
msgstr "Дополнительное хранилище для объектов кода (:pep:`523`):"

#: ../../whatsnew/3.12.rst:1857
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (переименован из "
"``_PyEval_RequestCodeExtraIndex``)"

#: ../../whatsnew/3.12.rst:1858
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr "``PyUnstable_Code_GetExtra()`` (переименован из ``_PyCode_GetExtra``)"

#: ../../whatsnew/3.12.rst:1859
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr "``PyUnstable_Code_SetExtra()`` (переименован из ``_PyCode_SetExtra``)"

#: ../../whatsnew/3.12.rst:1861
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr ""
"Исходные имена будут доступны до тех пор, пока не изменится соответствующий "
"API."

#: ../../whatsnew/3.12.rst:1864
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr "(Предоставлено Петром Викториным в :gh:`101101`.)"

#: ../../whatsnew/3.12.rst:1866
msgid ""
":pep:`697`: Add an API for extending types whose instance memory layout is "
"opaque:"
msgstr ""
":pep:`697`: Добавьте API для расширения типов, структура памяти экземпляров "
"которых непрозрачна:"

#: ../../whatsnew/3.12.rst:1869
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ""
":c:member:`PyType_Spec.basicsize` может быть нулевым или отрицательным, "
"чтобы указать наследование или расширение размера базового класса."

#: ../../whatsnew/3.12.rst:1871
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to "
"allow access to subclass-specific instance data."
msgstr ""
":c:func:`PyObject_GetTypeData` и :c:func:`PyType_GetTypeDataSize` добавлены "
"для обеспечения доступа к данным экземпляра, специфичным для подкласса."

#: ../../whatsnew/3.12.rst:1873
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including :c:var:"
"`PyType_Type`."
msgstr ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` и :c:func:`PyObject_GetItemData` "
"добавлены, чтобы обеспечить безопасное расширение определенных типов "
"переменного размера, включая :c:var:`PyType_Type`."

#: ../../whatsnew/3.12.rst:1876
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""
":c:macro:`Py_RELATIVE_OFFSET` добавлен, чтобы позволить определять :c:type:"
"`members <PyMemberDef>` в терминах структуры, специфичной для подкласса."

#: ../../whatsnew/3.12.rst:1879
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr "(Предоставлено Петром Викториным в :gh:`103509`.)"

#: ../../whatsnew/3.12.rst:1881
msgid ""
"Add the new :ref:`limited C API <limited-c-api>` function :c:func:"
"`PyType_FromMetaclass`, which generalizes the existing :c:func:"
"`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""
"Добавьте новую функцию :ref:`limited C API <limited-c-api>` :c:func:"
"`PyType_FromMetaclass`, которая обобщает существующую :c:func:"
"`PyType_FromModuleAndSpec` с использованием дополнительного аргумента "
"метакласса. (Предоставлено Вензелем Якобом в :gh:`93012`.)"

#: ../../whatsnew/3.12.rst:1886
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""
"В :ref:`Limited API <stable>` добавлен API для создания объектов, которые "
"можно вызывать с помощью :ref:`протокола векторного вызова <vectorcall>`:"

#: ../../whatsnew/3.12.rst:1890
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"

#: ../../whatsnew/3.12.rst:1891
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: ../../whatsnew/3.12.rst:1892
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: ../../whatsnew/3.12.rst:1893
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vectorcallfunc`"

#: ../../whatsnew/3.12.rst:1895
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the "
"immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do "
"not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in :gh:"
"`93274`.)"
msgstr ""
"Флаг :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` теперь удаляется из класса, когда "
"метод :py:meth:`~object.__call__` класса переназначается. Это делает "
"векторный вызов безопасным для использования с изменяемыми типами (т.е. "
"типами кучи без неизменяемого флага, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). "
"Изменяемые типы, которые не переопределяют :c:member:`~PyTypeObject."
"tp_call`, теперь наследуют флаг ``Py_TPFLAGS_HAVE_VECTORCALL``. "
"(Предоставлено Петром Викториным в :gh:`93274`.)"

#: ../../whatsnew/3.12.rst:1903
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows extensions "
"classes to support object :attr:`~object.__dict__` and weakrefs with less "
"bookkeeping, using less memory and with faster access."
msgstr ""
"Были добавлены флаги :c:macro:`Py_TPFLAGS_MANAGED_DICT` и :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF`. Это позволяет классам расширений поддерживать "
"объект :attr:`~object.__dict__` и слабые ссылки с меньшими затратами на "
"учет, использованием меньшего количества памяти и более быстрым доступом."

#: ../../whatsnew/3.12.rst:1908
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""
"В :ref:`Limited API <stable>` добавлен API для выполнения вызовов с "
"использованием :ref:`протокола векторного вызова <vectorcall>`:"

#: ../../whatsnew/3.12.rst:1912
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../whatsnew/3.12.rst:1913
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../whatsnew/3.12.rst:1914
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#: ../../whatsnew/3.12.rst:1916
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""
"Это означает, что как входящие, так и исходящие концы протокола векторного "
"вызова теперь доступны в :ref:`Limited API <stable>`. (Предоставлено "
"Вензелем Якобом в :gh:`98586`.)"

#: ../../whatsnew/3.12.rst:1920
msgid ""
"Add two new public functions, :c:func:`PyEval_SetProfileAllThreads` and :c:"
"func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling "
"functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"Добавьте две новые публичные функции: :c:func:`PyEval_SetProfileAllThreads` "
"и :c:func:`PyEval_SetTraceAllThreads`, которые позволяют устанавливать "
"функции трассировки и профилирования во всех запущенных потоках помимо "
"вызывающего. (Предоставлено Пабло Галиндо в :gh:`93503`.)"

#: ../../whatsnew/3.12.rst:1926
msgid ""
"Add new function :c:func:`PyFunction_SetVectorcall` to the C API which sets "
"the vectorcall field of a given :c:type:`PyFunctionObject`. (Contributed by "
"Andrew Frost in :gh:`92257`.)"
msgstr ""
"Добавьте новую функцию :c:func:`PyFunction_SetVectorcall` в C API, которая "
"устанавливает поле векторного вызова для данного :c:type:`PyFunctionObject`. "
"(Предоставлено Эндрю Фростом в :gh:`92257`.)"

#: ../../whatsnew/3.12.rst:1930
msgid ""
"The C API now permits registering callbacks via :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` and related APIs to be called "
"whenever a dictionary is modified. This is intended for use by optimizing "
"interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in :gh:"
"`91052`.)"
msgstr ""
"API C теперь позволяет регистрировать обратные вызовы через :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` и связанные API, которые будут "
"вызываться при каждом изменении словаря. Он предназначен для использования "
"оптимизирующими интерпретаторами, JIT-компиляторами или отладчиками. "
"(Предоставлено Карлом Мейером в :gh:`91052`.)"

#: ../../whatsnew/3.12.rst:1936
msgid ""
"Add :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl "
"Meyer in :gh:`91051`.)"
msgstr ""
"Добавьте API :c:func:`PyType_AddWatcher` и :c:func:`PyType_Watch` для "
"регистрации обратных вызовов для получения уведомлений об изменениях типа. "
"(Предоставлено Карлом Мейером в :gh:`91051`.)"

#: ../../whatsnew/3.12.rst:1940
msgid ""
"Add :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Oren in :gh:`91054`.)"
msgstr ""
"Добавьте API :c:func:`PyCode_AddWatcher` и :c:func:`PyCode_ClearWatcher` для "
"регистрации обратных вызовов для получения уведомлений о создании и "
"уничтожении объектов кода. (Предоставлено Итамаром Ореном в :gh:`91054`.)"

#: ../../whatsnew/3.12.rst:1945
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to "
"get a frame variable by its name. (Contributed by Victor Stinner in :gh:"
"`91248`.)"
msgstr ""
"Добавьте функции :c:func:`PyFrame_GetVar` и :c:func:`PyFrame_GetVarString` "
"для получения переменной фрейма по ее имени. (Предоставлено Виктором "
"Стиннером в :gh:`91248`.)"

#: ../../whatsnew/3.12.rst:1949
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and :c:func:"
"`PyErr_SetRaisedException` for saving and restoring the current exception. "
"These functions return and accept a single exception object, rather than the "
"triple arguments of the now-deprecated :c:func:`PyErr_Fetch` and :c:func:"
"`PyErr_Restore`. This is less error prone and a bit more efficient. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Добавьте :c:func:`PyErr_GetRaizedException` и :c:func:"
"`PyErr_SetRaizedException` для сохранения и восстановления текущего "
"исключения. Эти функции возвращают и принимают один объект исключения, а не "
"тройные аргументы ныне устаревших :c:func:`PyErr_Fetch` и :c:func:"
"`PyErr_Restore`. Это менее подвержено ошибкам и немного более эффективно. "
"(Предоставлено Марком Шенноном в :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:1957
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Добавьте ``_PyErr_ChainExceptions1``, который принимает экземпляр "
"исключения, чтобы заменить устаревший API ``_PyErr_ChainExceptions``, "
"который сейчас устарел. (Предоставлено Марком Шенноном в :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:1961
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the :attr:`~BaseException."
"args` passed to the exception's constructor. (Contributed by Mark Shannon "
"in :gh:`101578`.)"
msgstr ""
"Добавьте :c:func:`PyException_GetArgs` и :c:func:`PyException_SetArgs` в "
"качестве удобных функций для получения и изменения :attr:`~BaseException."
"args`, передаваемого конструктору исключения. (Предоставлено Марком Шенноном "
"в :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:1966
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""
"Добавьте :c:func:`PyErr_DisplayException`, который принимает экземпляр "
"исключения, чтобы заменить устаревший API :c:func:`!PyErr_Display`. "
"(Предоставлено Ирит Катриэль в :gh:`102755`)."

#: ../../whatsnew/3.12.rst:1972
msgid ""
":pep:`683`: Introduce *Immortal Objects*, which allows objects to bypass "
"reference counts, and related changes to the C-API:"
msgstr ""
":pep:`683`: Внедрение *Immortal Objects*, позволяющего объектам обходить "
"счетчик ссылок, и связанных с этим изменений в C-API:"

#: ../../whatsnew/3.12.rst:1975
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr "``_Py_IMMORTAL_REFCNT``: счетчик ссылок, определяющий объект."

#: ../../whatsnew/3.12.rst:1976
msgid "as immortal."
msgstr "как бессмертный."

#: ../../whatsnew/3.12.rst:1977
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr ""
"``_Py_IsImmortal`` Проверяет, имеет ли объект счетчик бессмертных ссылок."

#: ../../whatsnew/3.12.rst:1978
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr "``PyObject_HEAD_INIT`` Теперь будет инициализирован счетчик ссылок"

#: ../../whatsnew/3.12.rst:1979
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr "``_Py_IMMORTAL_REFCNT`` при использовании с ``Py_BUILD_CORE``."

#: ../../whatsnew/3.12.rst:1980
msgid "``SSTATE_INTERNED_IMMORTAL`` An identifier for interned unicode objects"
msgstr ""
"``SSTATE_INTERNED_IMMORTAL`` Идентификатор для интернированных объектов "
"Юникода."

#: ../../whatsnew/3.12.rst:1981
msgid "that are immortal."
msgstr "которые бессмертны."

#: ../../whatsnew/3.12.rst:1982
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr "``SSTATE_INTERNED_IMMORTAL_STATIC`` Идентификатор встроенного юникода."

#: ../../whatsnew/3.12.rst:1983
msgid "objects that are immortal and static"
msgstr "объекты бессмертные и статичные"

#: ../../whatsnew/3.12.rst:1984
msgid "``sys.getunicodeinternedsize`` This returns the total number of unicode"
msgstr ""
"``sys.getunicodeinternedsize`` Возвращает общее количество символов Юникода."

#: ../../whatsnew/3.12.rst:1985
msgid ""
"objects that have been interned. This is now needed for :file:`refleak.py` "
"to correctly track reference counts and allocated blocks"
msgstr ""
"объекты, которые были интернированы. Теперь это необходимо для того, чтобы :"
"file:`refleak.py` правильно отслеживал количество ссылок и выделенные блоки."

#: ../../whatsnew/3.12.rst:1988
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr "(Предоставлено Эдди Элизондо в :gh:`84436`.)"

#: ../../whatsnew/3.12.rst:1990
msgid ""
":pep:`684`: Add the new :c:func:`Py_NewInterpreterFromConfig` function and :"
"c:type:`PyInterpreterConfig`, which may be used to create sub-interpreters "
"with their own GILs. (See :ref:`whatsnew312-pep684` for more info.) "
"(Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""
":pep:`684`: Добавьте новую функцию :c:func:`Py_NewInterpreterFromConfig` и :"
"c:type:`PyInterpreterConfig`, которые можно использовать для создания "
"субинтерпретаторов с собственными GIL. (Дополнительную информацию см. в :ref:"
"`whatsnew312-pep684`.) (Предоставлено Эриком Сноу в :gh:`104110`.)"

#: ../../whatsnew/3.12.rst:1996
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and :c:func:"
"`Py_DECREF` functions are now implemented as opaque function calls to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`105387`.)"
msgstr ""
"В ограниченной версии C API 3.12 функции :c:func:`Py_INCREF` и :c:func:"
"`Py_DECREF` теперь реализованы как непрозрачные вызовы функций, чтобы скрыть "
"детали реализации. (Предоставлено Виктором Стиннером в :gh:`105387`.)"

#: ../../whatsnew/3.12.rst:2004
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""
"Устаревшие API-интерфейсы Unicode, основанные на представлении Py_UNICODE*, "
"были удалены. Пожалуйста, перейдите на API на основе UTF-8 или wchar_t*``."

#: ../../whatsnew/3.12.rst:2007
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""
"Функции анализа аргументов, такие как :c:func:`PyArg_ParseTuple`, больше не "
"поддерживают формат на основе ``Py_UNICODE*`` (например, ``u``, ``Z``). "
"Перейдите на другие форматы Unicode, такие как ``s``, ``z``, ``es`` и ``U``."

#: ../../whatsnew/3.12.rst:2011
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in "
"case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""
"``tp_weaklist`` для всех статических встроенных типов всегда имеет значение "
"``NULL``. Это поле предназначено только для внутреннего использования в "
"PyTypeObject, но мы указываем на это изменение на случай, если кто-то все "
"равно обращается к этому полю напрямую. Чтобы избежать поломки, рассмотрите "
"возможность использования вместо этого существующего общедоступного C-API "
"или, при необходимости, макроса ``_PyObject_GET_WEAKREFS_LISTPTR()`` (только "
"для внутреннего использования)."

#: ../../whatsnew/3.12.rst:2018
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""
"Этот :c:member:`PyTypeObject.tp_subclasses`, предназначенный только для "
"внутреннего использования, теперь может не быть допустимым указателем "
"объекта. Чтобы отразить это, его тип был изменен на :c:expr:`void *`. Мы "
"упоминаем об этом на случай, если кто-то получит прямой доступ к полю, "
"предназначенному только для внутреннего использования."

#: ../../whatsnew/3.12.rst:2023
msgid ""
"To get a list of subclasses, call the Python method :py:meth:`~type."
"__subclasses__` (using :c:func:`PyObject_CallMethod`, for example)."
msgstr ""
"Чтобы получить список подклассов, вызовите метод Python :py:meth:`~type."
"__subclasses__` ( используя :c:func:` PyObj ect_CallMethod`). например,"

#: ../../whatsnew/3.12.rst:2027
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` "
"and :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in :gh:"
"`98836`.)"
msgstr ""
"Добавлена ​​поддержка дополнительных параметров форматирования (выравнивание "
"по левому краю, восьмеричные числа, шестнадцатеричные символы в верхнем "
"регистре, строки :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` "
"C, переменная ширина и точность) в :c:func:`PyUnicode_FromFormat` и :c:func:"
"`PyUnicode_FromFormatV`. (Предоставлено Сергеем Сторчакой в ​​:gh:`98836`.)"

#: ../../whatsnew/3.12.rst:2033
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and :c:"
"func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy "
"Storchaka in :gh:`95781`.)"
msgstr ""
"Нераспознанный символ формата в :c:func:`PyUnicode_FromFormat` и :c:func:"
"`PyUnicode_FromFormatV` теперь устанавливает :exc:`SystemError`. В "
"предыдущих версиях это приводило к тому, что вся остальная часть строки "
"формата копировалась в результирующую строку как есть, а все дополнительные "
"аргументы отбрасывались. (Предоставлено Сергеем Сторчакой в ​​:gh:`95781`.)"

#: ../../whatsnew/3.12.rst:2039
msgid ""
"Fix wrong sign placement in :c:func:`PyUnicode_FromFormat` and :c:func:"
"`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in :gh:`95504`.)"
msgstr ""
"Исправлено неправильное размещение знаков в :c:func:`PyUnicode_FromFormat` "
"и :c:func:`PyUnicode_FromFormatV`. (Предоставлено Филипом Джорджи в :gh:"
"`95504`.)"

#: ../../whatsnew/3.12.rst:2043
msgid ""
"Extension classes wanting to add a :attr:`~object.__dict__` or weak "
"reference slot should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "
"declaring :c:macro:`Py_TPFLAGS_MANAGED_DICT` must call :c:func:`!"
"_PyObject_VisitManagedDict` and :c:func:`!_PyObject_ClearManagedDict` to "
"traverse and clear their instance's dictionaries. To clear weakrefs, call :c:"
"func:`PyObject_ClearWeakRefs`, as before."
msgstr ""
"Классы расширения, желающие добавить :attr:`~object.__dict__` или слот "
"слабой ссылки, должны использовать :c:macro:`Py_TPFLAGS_MANAGED_DICT` и :c:"
"macro:`Py_TPFLAGS_MANAGED_WEAKREF` вместо ``tp_dictoffset`` и "
"``tp_weaklistoffset` `соответственно. Использование tp_dictoffset и "
"tp_weaklistoffset по-прежнему поддерживается, но не полностью поддерживает "
"множественное наследование (:gh:`95589`), и производительность может "
"ухудшиться. Классы, объявляющие :c:macro:`Py_TPFLAGS_MANAGED_DICT`, должны "
"вызывать :c:func:`!_ PyObj ect_VisitManagedDict` и :c:func:`!_ PyObj "
"ect_ClearManagedDict` для обхода и очистки словарей своего экземпляра. Чтобы "
"очистить слабые ссылки, вызовите :c:func:` PyObj ect_ClearWeakRefs`, как и "
"раньше."

#: ../../whatsnew/3.12.rst:2055
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the "
"exact :class:`bytes` type is accepted for bytes strings. (Contributed by "
"Victor Stinner in :gh:`98393`.)"
msgstr ""
"Функция :c:func:`PyUnicode_FSDecoder` больше не принимает байтовые пути, "
"такие как типы :class:`bytearray` и :class:`memoryview`: для байтовых строк "
"принимается только точный тип :class:`bytes`. (Предоставлено Виктором "
"Стиннером в :gh:`98393`.)"

#: ../../whatsnew/3.12.rst:2060
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor "
"Stinner in :gh:`98724`.)"
msgstr ""
"Макросы :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` и :c:macro:`Py_XSETREF` "
"теперь оценивают свои аргументы только один раз. Если аргумент имеет "
"побочные эффекты, эти побочные эффекты больше не дублируются. (Предоставлено "
"Виктором Стиннером в :gh:`98724`.)"

#: ../../whatsnew/3.12.rst:2065
msgid ""
"The interpreter's error indicator is now always normalized. This means that :"
"c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions "
"that set the error indicator now normalize the exception before storing it. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Индикатор ошибки интерпретатора теперь всегда нормализуется. Это означает, "
"что :c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` и другие функции, "
"устанавливающие индикатор ошибки, теперь нормализуют исключение перед его "
"сохранением. (Предоставлено Марком Шенноном в :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:2070
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""
"``_Py_RefTotal`` больше не является авторитетным и сохраняется только для "
"совместимости с ABI. Обратите внимание, что это внутренний глобальный "
"параметр, доступный только в отладочных сборках. Если вы его используете, "
"вам нужно будет начать использовать ``_Py_GetGlobalRefTotal()``."

#: ../../whatsnew/3.12.rst:2075
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr ""
"Следующие функции теперь выбирают соответствующий метакласс для вновь "
"созданного типа:"

#: ../../whatsnew/3.12.rst:2078
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: ../../whatsnew/3.12.rst:2079
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: ../../whatsnew/3.12.rst:2080
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: ../../whatsnew/3.12.rst:2082
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""
"Создание классов, метакласс которых переопределяет :c:member:`~PyTypeObject."
"tp_new`, объявлено устаревшим, а в Python 3.14+ оно будет запрещено. "
"Обратите внимание, что эти функции игнорируют ``tp_new`` метакласса, что "
"может привести к неполной инициализации."

#: ../../whatsnew/3.12.rst:2087
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` (:meth:"
"`~object.__new__` in Python)."
msgstr ""
"Обратите внимание, что :c:func:`PyType_FromMetaclass` (добавленный в Python "
"3.12) уже запрещает создание классов, метакласс которых переопределяет "
"``tp_new`` (:meth:`~object.__new__` в Python)."

#: ../../whatsnew/3.12.rst:2091
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""
"Поскольку ``tp_new`` переопределяет почти все, что делают функции "
"``PyType_From*``, они несовместимы друг с другом. Существующее поведение — "
"игнорирование метакласса на нескольких этапах создания типа — в целом "
"небезопасно, поскольку (мета)классы предполагают, что был вызван ``tp_new``. "
"Простого общего решения не существует. Вам может подойти одно из следующих "
"действий:"

#: ../../whatsnew/3.12.rst:2098
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr "Если вы управляете метаклассом, избегайте использования в нем tp_new:"

#: ../../whatsnew/3.12.rst:2100
msgid ""
"If initialization can be skipped, it can be done in :c:member:`~PyTypeObject."
"tp_init` instead."
msgstr ""
"Если инициализацию можно пропустить, ее можно выполнить в :c:member:"
"`~PyTypeObject.tp_init`."

#: ../../whatsnew/3.12.rst:2102
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable for "
"``PyType_From*`` functions."
msgstr ""
"Если метакласс не нуждается в создании экземпляра из Python, установите для "
"его ``tp_new`` значение ``NULL`` с помощью флага :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION`. Это делает его приемлемым для функций "
"PyType_From*."

#: ../../whatsnew/3.12.rst:2107
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""
"Избегайте функций ``PyType_From*``: если вам не нужны специфичные для C "
"функции (слоты или установка размера экземпляра), создавайте типы, вызывая "
"<call>` метакласс."

#: ../../whatsnew/3.12.rst:2111
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""
"Если вы *знаете*, что ``tp_new`` можно безопасно пропустить, отфильтруйте "
"предупреждение об устаревании, используя :func:`warnings.catch_warnings` из "
"Python."

#: ../../whatsnew/3.12.rst:2114
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""
":c:var:`PyOS_InputHook` и :c:var:`PyOS_ReadlineFunctionPointer` больше не "
"вызываются в :ref:`subinterpreters <sub-interpreter-support>`. Это связано с "
"тем, что клиенты обычно полагаются на глобальное состояние всего процесса "
"(поскольку эти обратные вызовы не имеют возможности восстановить состояние "
"модуля расширения)."

#: ../../whatsnew/3.12.rst:2119
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr ""
"Это также позволяет избежать ситуаций, когда расширения могут работать в "
"субинтерпретаторе, который они не поддерживают (или еще не загружены). См. :"
"gh:`104668` для получения дополнительной информации."

#: ../../whatsnew/3.12.rst:2123
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private, "
"they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning ``PyLong_..."
"`` should be used instead. Two new *unstable* API functions are provided for "
"efficient access to the value of :c:struct:`PyLongObject`\\s which fit into "
"a single machine word:"
msgstr ""
"Внутренние элементы :c:struct:`PyLongObject` были изменены для повышения "
"производительности. Хотя внутренние компоненты :c:struct:`PyLongObject` "
"являются частными, они используются некоторыми модулями расширения. К "
"внутренним полям больше нельзя обращаться напрямую, вместо этого следует "
"использовать функции API, начинающиеся с ``PyLong_...``. Для эффективного "
"доступа к значению :c:struct:`PyLongObject`\\s, которое умещается в одно "
"машинное слово, предусмотрены две новые *нестабильные* API-функции:"

#: ../../whatsnew/3.12.rst:2131
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ":c:func:`PyUnstable_Long_IsCompact`"

#: ../../whatsnew/3.12.rst:2132
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ":c:func:`PyUnstable_Long_CompactValue`"

#: ../../whatsnew/3.12.rst:2134
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to "
"be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""
"Пользовательские распределители, установленные через :c:func:"
"`PyMem_SetAllocator`, теперь должны быть потокобезопасными, независимо от "
"домена памяти. Распределители, не имеющие собственного состояния, включая "
"«крючки», не затрагиваются. Если ваш пользовательский распределитель еще не "
"поддерживает потокобезопасность и вам нужны рекомендации, создайте новую "
"задачу на GitHub и CC ``@ericsnowcurrently``."

#: ../../whatsnew/3.12.rst:2144
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in :c:type:"
"`PyDictObject` is deprecated for extension modules. Accessing this field "
"will generate a compiler warning at compile time. This field will be removed "
"in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in :gh:`101193`. "
"PEP by Ken Jin.)"
msgstr ""
"В соответствии с :pep:`699`, поле ``ma_version_tag`` в :c:type:"
"`PyDictObject` не рекомендуется для модулей расширения. Доступ к этому полю "
"приведет к генерации предупреждения компилятора во время компиляции. Это "
"поле будет удалено в Python 3.14. (Предоставлено Рамвикрамсом и Кумаром "
"Адитьей в :gh:`101193`. PEP Кена Джина.)"

#: ../../whatsnew/3.12.rst:2149
msgid "Deprecate global configuration variable:"
msgstr "Отменены глобальные переменные конфигурации:"

#: ../../whatsnew/3.12.rst:2151
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ":c:var:`Py_DebugFlag`: использовать :c:member:`PyConfig.parser_debug`"

#: ../../whatsnew/3.12.rst:2152
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ":c:var:`Py_VerboseFlag`: использовать :c:member:`PyConfig.verbose`"

#: ../../whatsnew/3.12.rst:2153
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ":c:var:`Py_QuietFlag`: использовать :c:member:`PyConfig.quiet`"

#: ../../whatsnew/3.12.rst:2154
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ""
":c:var:`Py_InteractiveFlag`: использовать :c:member:`PyConfig.interactive`"

#: ../../whatsnew/3.12.rst:2155
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ":c:var:`Py_InspectFlag`: использовать :c:member:`PyConfig.inspect`"

#: ../../whatsnew/3.12.rst:2156
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""
":c:var:`Py_OptimizeFlag`: использовать :c:member:`PyConfig."
"optimization_level`"

#: ../../whatsnew/3.12.rst:2157
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ":c:var:`Py_NoSiteFlag`: использовать :c:member:`PyConfig.site_import`"

#: ../../whatsnew/3.12.rst:2158
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""
":c:var:`Py_BytesWarningFlag`: использовать :c:member:`PyConfig.bytes_warning`"

#: ../../whatsnew/3.12.rst:2159
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""
":c:var:`Py_FrozenFlag`: использовать :c:member:`PyConfig.pathconfig_warnings`"

#: ../../whatsnew/3.12.rst:2160
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: использовать :c:member:`PyConfig."
"use_environment`"

#: ../../whatsnew/3.12.rst:2161
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: использовать :c:member:`PyConfig."
"write_bytecode`"

#: ../../whatsnew/3.12.rst:2162
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: использовать :c:member:`PyConfig."
"user_site_directory`"

#: ../../whatsnew/3.12.rst:2163
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: использовать :c:member:`PyConfig."
"buffered_stdio`"

#: ../../whatsnew/3.12.rst:2164
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""
":c:var:`Py_HashRandomizationFlag`: используйте :c:member:`PyConfig."
"use_hash_seed` и :c:member:`PyConfig.hash_seed`"

#: ../../whatsnew/3.12.rst:2166
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ":c:var:`Py_IsolatedFlag`: использовать :c:member:`PyConfig.isolated`"

#: ../../whatsnew/3.12.rst:2167
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: использовать :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"

#: ../../whatsnew/3.12.rst:2168
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: использовать :c:member:`PyConfig."
"legacy_windows_stdio`"

#: ../../whatsnew/3.12.rst:2169
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: использовать :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2170
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: использовать :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2171
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: использовать :c:member:`PyConfig."
"filesystem_errors`"

#: ../../whatsnew/3.12.rst:2172
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: используйте :c:member:`PyPreConfig.utf8_mode` (см. :c:"
"func:`Py_PreInitialize`)"

#: ../../whatsnew/3.12.rst:2174
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""
"Вместо этого API :c:func:`Py_InitializeFromConfig` следует использовать с :c:"
"type:`PyConfig`. (Предоставлено Виктором Стиннером в :gh:`77782`.)"

#: ../../whatsnew/3.12.rst:2178
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases is deprecated and will be disabled in Python 3.14. (:gh:`95388`)"
msgstr ""
"Создание :c:data:`неизменяемых типов <Py_TPFLAGS_IMMUTABLETYPE>` с "
"изменяемыми базами устарело и будет отключено в Python 3.14. (:gh:`95388`)"

#: ../../whatsnew/3.12.rst:2181
msgid ""
"The :file:`structmember.h` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ""
"Заголовок :file:`structmember.h` устарел, однако он по-прежнему доступен, и "
"его удаление не планируется."

#: ../../whatsnew/3.12.rst:2184
msgid ""
"Its contents are now available just by including :file:`Python.h`, with a "
"``Py`` prefix added if it was missing:"
msgstr ""
"Его содержимое теперь доступно, просто включив :file:`Python.h`, с "
"добавлением префикса ``Py``, если он отсутствовал:"

#: ../../whatsnew/3.12.rst:2187
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and :c:func:"
"`PyMember_SetOne`"
msgstr ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` и :c:func:"
"`PyMember_SetOne`"

#: ../../whatsnew/3.12.rst:2189
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""
"Введите макросы, например :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE` и т. "
"д. (ранее ``T_INT``, ``T_DOUBLE`` и т. д.)"

#: ../../whatsnew/3.12.rst:2191
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and :c:macro:"
"`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""
"Флаги :c:macro:`Py_READONLY` (ранее ``READONLY``) и :c:macro:`Py_AUDIT_READ` "
"(ранее все были в верхнем регистре)"

#: ../../whatsnew/3.12.rst:2194
msgid "Several items are not exposed from :file:`Python.h`:"
msgstr "Некоторые элементы не отображаются из :file:`Python.h`:"

#: ../../whatsnew/3.12.rst:2196
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ":c:macro:`T_OBJECT` (используйте :c:macro:`Py_T_OBJECT_EX`)"

#: ../../whatsnew/3.12.rst:2197
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ":c:macro:`T_NONE` (ранее недокументированный и довольно необычный)"

#: ../../whatsnew/3.12.rst:2198
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr "Макрос WRITE_RESTRICTED, который ничего не делает."

#: ../../whatsnew/3.12.rst:2199
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of :c:macro:"
"`Py_AUDIT_READ`."
msgstr ""
"Макросы ``RESTRICTED`` и ``READ_RESTRICTED``, эквиваленты :c:macro:"
"`Py_AUDIT_READ`."

#: ../../whatsnew/3.12.rst:2201
msgid ""
"In some configurations, ``<stddef.h>`` is not included from :file:`Python."
"h`. It should be included manually when using ``offsetof()``."
msgstr ""
"В некоторых конфигурациях ``<stddef.h>`` не включается в :file:`Python.h`. "
"Его следует включать вручную при использовании offsetof()."

#: ../../whatsnew/3.12.rst:2204
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr ""
"Устаревший заголовок продолжает предоставлять свое исходное содержимое под "
"исходными именами. Ваш старый код может оставаться неизменным, если вас "
"сильно не беспокоят дополнительные включения и макросы без пространства имен."

#: ../../whatsnew/3.12.rst:2209
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""
"(Внесено в :gh:`47146` Петром Викторином на основе более ранних работ "
"Александра Белопольского и Матиаса Брауна.)"

#: ../../whatsnew/3.12.rst:2212
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use :c:"
"func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
":c:func:`PyErr_Fetch` и :c:func:`PyErr_Restore` устарели. Вместо этого "
"используйте :c:func:`PyErr_GetRaizedException` и :c:func:"
"`PyErr_SetRaizedException`. (Предоставлено Марком Шенноном в :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:2217
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException` "
"instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""
":c:func:`!PyErr_Display` устарел. Вместо этого используйте :c:func:"
"`PyErr_DisplayException`. (Предоставлено Ирит Катриэль в :gh:`102755`)."

#: ../../whatsnew/3.12.rst:2220
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""
"``_PyErr_ChainExceptions`` устарел. Вместо этого используйте "
"``_PyErr_ChainExceptions1``. (Предоставлено Ирит Катриэль в :gh:`102192`.)"

#: ../../whatsnew/3.12.rst:2223
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or :c:"
"func:`PyType_FromModuleAndSpec` to create a class whose metaclass overrides :"
"c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass instead."
msgstr ""
"Использование :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` "
"или :c:func:`PyType_FromModuleAndSpec` для создания класса, метакласс "
"которого переопределяет :c:member:`~PyTypeObject.tp_new`, устарел. Вместо "
"этого вызовите метакласс."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""
"Поле ma_version_tag в :c:type:`PyDictObject` для модулей расширения (:pep:"
"`699`; :gh:`101193`)."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"Создание :c:data:`неизменяемых типов <Py_TPFLAGS_IMMUTABLETYPE>` с "
"изменяемыми базами (:gh:`95388`)."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:10
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "Функции для настройки инициализации Python, устаревшие в Python 3.11:"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:12
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Вместо этого установите :c:member:`PyConfig."
"argv`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:14
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Вместо этого установите :c:member:`PyConfig."
"argv`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:16
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Вместо этого установите :c:member:`PyConfig."
"program_name`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:18
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Вместо этого установите :c:member:`PyConfig."
"home`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:21
#: ../../deprecations/c-api-pending-removal-in-3.14.rst:71
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"Вместо этого API :c:func:`Py_InitializeFromConfig` следует использовать с :c:"
"type:`PyConfig`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:24
msgid "Global configuration variables:"
msgstr "Глобальные переменные конфигурации:"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:26
msgid ":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Вместо этого используйте :c:member:`PyConfig."
"parser_debug`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:28
msgid ":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: вместо этого используйте :c:member:`PyConfig."
"verbose`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:30
msgid ":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Вместо этого используйте :c:member:`PyConfig.quiet`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:32
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Вместо этого используйте :c:member:`PyConfig."
"interactive`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:34
msgid ":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Вместо этого используйте :c:member:`PyConfig."
"inspect`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:36
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` "
"instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Вместо этого используйте :c:member:`PyConfig."
"optimization_level`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:38
msgid ":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Вместо этого используйте :c:member:`PyConfig."
"site_import`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:40
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: вместо этого используйте :c:member:`PyConfig."
"bytes_warning`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:42
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Вместо этого используйте :c:member:`PyConfig."
"pathconfig_warnings`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:44
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Вместо этого используйте :c:member:`PyConfig."
"pathconfig_warnings`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:46
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Вместо этого используйте :c:member:"
"`PyConfig.write_bytecode`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:48
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: вместо этого используйте :c:member:"
"`PyConfig.user_site_directory`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:50
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` "
"instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Вместо этого используйте :c:member:"
"`PyConfig.buffered_stdio`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:52
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: вместо этого используйте :c:member:"
"`PyConfig.use_hash_seed` и :c:member:`PyConfig.hash_seed`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:55
msgid ":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Вместо этого используйте :c:member:`PyConfig."
"isolated`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:57
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: вместо этого используйте :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:59
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: вместо этого используйте :c:member:"
"`PyConfig.legacy_windows_stdio`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:61
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: Вместо этого используйте :c:member:"
"`PyConfig.filesystem_encoding`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:63
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` instead."
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: Вместо этого используйте :c:"
"member:`PyConfig.filesystem_encoding`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:65
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: вместо этого используйте :c:"
"member:`PyConfig.filesystem_errors`."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:67
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` instead. (see :"
"c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: вместо этого используйте :c:member:`PyPreConfig."
"utf8_mode`. (см. :c:func:`Py_PreInitialize`)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: вместо этого используйте :c:func:"
"`PyImport_ImportModule`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead."
msgstr ""
":c:func:`PyWeakref_GetObject` и :c:func:`PyWeakref_GET_OBJECT`: вместо этого "
"используйте :c:func:`PyWeakref_GetRef`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:8
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
"Тип :c:type:`Py_UNICODE` и макрос :c:macro:`!Py_UNICODE_WIDE`: вместо этого "
"используйте :c:type:`wchar_t`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid "Python initialization functions:"
msgstr "Функции инициализации Python:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Вместо этого очистите :data:`sys."
"warnoptions` и :data:`!warnings.filters`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`Py_GetExecPrefix`: Get :data:`sys.base_exec_prefix` and :data:`sys."
"exec_prefix` instead."
msgstr ""
":c:func:`Py_GetExecPrefix`: Вместо этого получите :data:`sys."
"base_exec_prefix` и :data:`sys.exec_prefix`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:16
msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ":c:func:`Py_GetPath`: Вместо этого получите :data:`sys.path`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:18
msgid ""
":c:func:`Py_GetPrefix`: Get :data:`sys.base_prefix` and :data:`sys.prefix` "
"instead."
msgstr ""
":c:func:`Py_GetPrefix`: Вместо этого получите :data:`sys.base_prefix` и :"
"data:`sys.prefix`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:20
msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Вместо этого получите :data:`sys."
"executable`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ""
":c:func:`Py_GetProgramName`: Вместо этого получите :data:`sys.executable`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Вместо этого получите :c:member:`PyConfig.home` "
"или переменную среды :envvar:`PYTHONHOME`."

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Следующие API устарели и будут удалены, хотя дата их удаления в настоящее "
"время не запланирована."

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""
":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: не требуется, начиная с Python 3.8."

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Fetch`: Вместо этого используйте :c:func:"
"`PyErr_GetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: вместо этого используйте :c:func:"
"`PyErr_GetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Restore`: Вместо этого используйте :c:func:"
"`PyErr_SetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: Вместо этого используйте :c:func:"
"`PyModule_GetFilenameObject`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""
":c:func:`PyOS_AfterFork`: Вместо этого используйте :c:func:"
"`PyOS_AfterFork_Child`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: вместо этого используйте :c:func:"
"`PySlice_Unpack` и :c:func:`PySlice_AdjustIndices`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Вместо этого используйте :c:func:"
"`PyCodec_Decode`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Вместо этого используйте :c:func:"
"`PyCodec_Decode`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: вместо этого используйте :c:func:"
"`PyCodec_Encode`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: вместо этого используйте :c:func:"
"`PyCodec_Encode`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: не требуется, начиная с Python 3.12."

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""
":c:func:`!PyErr_Display`: Вместо этого используйте :c:func:"
"`PyErr_DisplayException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: вместо этого используйте :c:func:`!"
"_PyErr_ChainExceptions1`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash`member: вместо этого вызовите :c:func:"
"`PyObject_Hash`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ":c:member:`!PyDictObject.ma_version_tag` member."

#: ../../deprecations/c-api-pending-removal-in-future.rst:38
msgid "Thread Local Storage (TLS) API:"
msgstr "API локального хранилища потоков (TLS):"

#: ../../deprecations/c-api-pending-removal-in-future.rst:40
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""
":c:func:`PyThread_create_key`: вместо этого используйте :c:func:"
"`PyThread_tss_alloc`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:42
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""
":c:func:`PyThread_delete_key`: вместо этого используйте :c:func:"
"`PyThread_tss_free`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:44
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""
":c:func:`PyThread_set_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_set`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:46
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""
":c:func:`PyThread_get_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_get`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:48
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_delete`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:50
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: не требуется, начиная с Python 3.7."

#: ../../whatsnew/3.12.rst:2241
msgid ""
"Remove the :file:`token.h` header file. There was never any public tokenizer "
"C API. The :file:`token.h` header file was only designed to be used by "
"Python internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""
"Удалите заголовочный файл :file:`token.h`. Никогда не существовало "
"общедоступного API-интерфейса токенизатора C. Заголовочный файл :file:`token."
"h` был разработан только для использования внутренними компонентами Python. "
"(Предоставлено Виктором Стиннером в :gh:`92651`.)"

#: ../../whatsnew/3.12.rst:2246
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr ""
"Устаревшие API-интерфейсы Unicode были удалены. Подробности смотрите в :pep:"
"`623`."

#: ../../whatsnew/3.12.rst:2248
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.12.rst:2249
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.12.rst:2250
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.12.rst:2251
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.12.rst:2252
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.12.rst:2253
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.12.rst:2254
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.12.rst:2255
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.12.rst:2256
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.12.rst:2258
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""
"Удалите макрос функции ``PyUnicode_InternImmortal()``. (Предоставлено "
"Виктором Стиннером в :gh:`85858`.)"
