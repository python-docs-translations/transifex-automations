# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/2.6.rst:5
msgid "What's New in Python 2.6"
msgstr "Что нового в Python 2.6"

#: ../../whatsnew/2.6.rst:0
msgid "Author"
msgstr "Автор"

#: ../../whatsnew/2.6.rst:7
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "А. М. Кучлинг (amk на amk.ca)"

#: ../../whatsnew/2.6.rst:50
msgid ""
"This article explains the new features in Python 2.6, released on October 1, "
"2008.  The release schedule is described in :pep:`361`."
msgstr ""
"В этой статье описываются новые возможности Python 2.6, выпущенного 1 "
"октября 2008 г. График выпуска описан в :pep:`361`."

#: ../../whatsnew/2.6.rst:53
msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python 3.0, "
"a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's not "
"possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a :option:"
"`!-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""
"Основная тема Python 2.6 — подготовка пути перехода на Python 3.0 — "
"серьезную модернизацию языка. По возможности Python 2.6 включает в себя "
"новые функции и синтаксис версии 3.0, оставаясь при этом совместимым с "
"существующим кодом, не удаляя старые функции или синтаксис. Когда это "
"невозможно, Python 2.6 пытается сделать все, что может, добавляя функции "
"совместимости в модуль :mod:`future_builtins` и переключатель :option:`!-3` "
"для предупреждения об использовании, которое перестанет поддерживаться в "
"версии 3.0. ."

#: ../../whatsnew/2.6.rst:62
msgid ""
"Some significant new packages have been added to the standard library, such "
"as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many "
"new features that aren't related to Python 3.0 in some way."
msgstr ""
"В стандартную библиотеку добавлено несколько важных новых пакетов, таких как "
"модули :mod:`multiprocessing` и :mod:`json`, но не так уж много новых "
"функций, которые каким-либо образом не связаны с Python 3.0."

#: ../../whatsnew/2.6.rst:67
msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the "
"source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""
"Python 2.6 также содержит ряд улучшений и исправлений в исходном коде. Поиск "
"в журналах изменений показал, что между версиями Python 2.5 и 2.6 было "
"применено 259 исправлений и исправлено 612 ошибок. Обе цифры, скорее всего, "
"занижены."

#: ../../whatsnew/2.6.rst:72
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.6. If you want to understand "
"the rationale for the design and implementation, refer to the PEP for a "
"particular new feature. Whenever possible, \"What's New in Python\" links to "
"the bug/patch item for each change."
msgstr ""
"В этой статье не делается попытка предоставить полную спецификацию новых "
"функций, а вместо этого представлен удобный обзор. Для получения более "
"подробной информации обратитесь к документации Python 2.6. Если вы хотите "
"понять обоснование проектирования и реализации, обратитесь к PEP за "
"конкретной новой функцией. По возможности, «Что нового в Python» содержит "
"ссылку на ошибку/исправление для каждого изменения."

#: ../../whatsnew/2.6.rst:88
msgid "Python 3.0"
msgstr "Python 3.0"

#: ../../whatsnew/2.6.rst:90
msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, with "
"the alpha and beta releases for both versions being made on the same days.  "
"The development of 3.0 has influenced many features in 2.6."
msgstr ""
"Цикл разработки Python версий 2.6 и 3.0 был синхронизирован, альфа- и бета-"
"версии обеих версий выпускались в одни и те же дни. Разработка версии 3.0 "
"повлияла на многие функции версии 2.6."

#: ../../whatsnew/2.6.rst:95
msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some "
"conversion in order to run on Python 3.0.  However, not all the changes in "
"3.0 necessarily break compatibility.  In cases where new features won't "
"cause existing code to break, they've been backported to 2.6 and are "
"described in this document in the appropriate place.  Some of the 3.0-"
"derived features are:"
msgstr ""
"Python 3.0 — это масштабная модернизация Python, которая нарушает "
"совместимость с серией 2.x. Это означает, что существующий код Python "
"потребует некоторого преобразования для работы на Python 3.0. Однако не все "
"изменения в версии 3.0 обязательно нарушают совместимость. В тех случаях, "
"когда новые функции не приводят к поломке существующего кода, они были "
"перенесены в версию 2.6 и описаны в соответствующем месте этого документа. "
"Некоторые из функций, производных от версии 3.0:"

#: ../../whatsnew/2.6.rst:104
msgid ""
"A :meth:`__complex__` method for converting objects to a complex number."
msgstr ""
"Метод :meth:`__complex__` для преобразования объектов в комплексное число."

#: ../../whatsnew/2.6.rst:105
msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""
"Альтернативный синтаксис для перехвата исключений: ``кроме TypeError как "
"exc``."

#: ../../whatsnew/2.6.rst:106
msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in :func:"
"`reduce` function."
msgstr ""
"Добавление :func:`functools.reduce` как синонима встроенной функции :func:"
"`reduce`."

#: ../../whatsnew/2.6.rst:109
msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics of "
"some existing builtins.  Functions that are new in 3.0 such as :func:`bin` "
"have simply been added to Python 2.6, but existing builtins haven't been "
"changed; instead, the :mod:`future_builtins` module has versions with the "
"new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from "
"future_builtins import hex, map`` as necessary."
msgstr ""
"В Python 3.0 добавлено несколько новых встроенных функций и изменена "
"семантика некоторых существующих встроенных функций. Функции, новые в версии "
"3.0, такие как :func:`bin`, были просто добавлены в Python 2.6, но "
"существующие встроенные функции не были изменены; вместо этого модуль :mod:"
"`future_builtins` имеет версии с новой семантикой 3.0. Код, написанный для "
"совместимости с версией 3.0, может при необходимости выполнять ``from "
"Future_builtins import Hex, Map``."

#: ../../whatsnew/2.6.rst:117
msgid ""
"A new command-line switch, :option:`!-3`, enables warnings about features "
"that will be removed in Python 3.0.  You can run code with this switch to "
"see how much work will be necessary to port code to 3.0.  The value of this "
"switch is available to Python code as the boolean variable :data:`sys."
"py3kwarning`, and to C extension code as :c:data:`Py_Py3kWarningFlag`."
msgstr ""
"Новый ключ командной строки :option:`!-3` включает предупреждения о "
"функциях, которые будут удалены в Python 3.0. Вы можете запустить код с "
"помощью этого переключателя, чтобы увидеть, сколько работы потребуется для "
"переноса кода на версию 3.0. Значение этого переключателя доступно для кода "
"Python как логическая переменная :data:`sys.py3kwarning`, а для кода "
"расширения C как :c:data:`Py_Py3kWarningFlag`."

#: ../../whatsnew/2.6.rst:126
msgid ""
"The 3\\ *xxx* series of PEPs, which contains proposals for Python 3.0. :pep:"
"`3000` describes the development process for Python 3.0. Start with :pep:"
"`3100` that describes the general goals for Python 3.0, and then explore the "
"higher-numbered PEPs that propose specific features."
msgstr ""
"Серия 3\\ *xxx* PEP, содержащая предложения для Python 3.0. :pep:`3000` "
"описывает процесс разработки Python 3.0. Начните с :pep:`3100`, который "
"описывает общие цели Python 3.0, а затем изучите PEP с более высокими "
"номерами, которые предлагают конкретные функции."

#: ../../whatsnew/2.6.rst:134
msgid "Changes to the Development Process"
msgstr "Изменения в процессе разработки"

#: ../../whatsnew/2.6.rst:136
msgid ""
"While 2.6 was being developed, the Python development process underwent two "
"significant changes: we switched from SourceForge's issue tracker to a "
"customized Roundup installation, and the documentation was converted from "
"LaTeX to reStructuredText."
msgstr ""
"Пока разрабатывалась версия 2.6, процесс разработки Python претерпел два "
"существенных изменения: мы перешли с системы отслеживания ошибок SourceForge "
"на настроенную установку Roundup, а документация была преобразована из LaTeX "
"в reStructuredText."

#: ../../whatsnew/2.6.rst:143
msgid "New Issue Tracker: Roundup"
msgstr "Новый трекер проблем: сводка новостей"

#: ../../whatsnew/2.6.rst:145
msgid ""
"For a long time, the Python developers had been growing increasingly annoyed "
"by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit "
"much customization; for example, it wasn't possible to customize the life "
"cycle of issues."
msgstr ""
"В течение долгого времени разработчиков Python все больше раздражала система "
"отслеживания ошибок SourceForge. Хостинговое решение SourceForge не "
"допускает особых настроек; например, невозможно было настроить жизненный "
"цикл проблем."

#: ../../whatsnew/2.6.rst:150
msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira <https://www.atlassian.com/software/"
"jira/>`__, `Launchpad <https://launchpad.net/>`__, `Roundup <https://roundup."
"sourceforge.io/>`__, and `Trac <https://trac.edgewall.org/>`__. The "
"committee eventually settled on Jira and Roundup as the two candidates.  "
"Jira is a commercial product that offers no-cost hosted instances to free-"
"software projects; Roundup is an open-source project that requires "
"volunteers to administer it and a server to host it."
msgstr ""
"Поэтому комитет по инфраструктуре Python Software Foundation опубликовал "
"призыв к специалистам по отслеживанию проблем, попросив добровольцев "
"настроить различные продукты и импортировать некоторые ошибки и исправления "
"из SourceForge. Были исследованы четыре разных трекера: `Jira <https://www."
"atlassian.com/software/jira/>`__, `Launchpad <https://launchpad.net/>`__, "
"`Roundup <https://roundup .sourceforge.io/>`__ и `Trac <https://trac."
"edgewall.org/>`__. В конечном итоге комитет остановился на Джире и Раундапе "
"в качестве двух кандидатов. Jira — это коммерческий продукт, который "
"предлагает бесплатные размещенные экземпляры для проектов бесплатного "
"программного обеспечения; Roundup — это проект с открытым исходным кодом, "
"для администрирования которого требуются волонтеры, а также сервер для его "
"размещения."

#: ../../whatsnew/2.6.rst:164
msgid ""
"After posting a call for volunteers, a new Roundup installation was set up "
"at https://bugs.python.org.  One installation of Roundup can host multiple "
"trackers, and this server now also hosts issue trackers for Jython and for "
"the Python web site.  It will surely find other uses in the future.  Where "
"possible, this edition of \"What's New in Python\" links to the bug/patch "
"item for each change."
msgstr ""
"После публикации призыва к волонтерам на https://bugs.python.org была "
"установлена ​​новая установка Roundup. Одна установка Roundup может содержать "
"несколько трекеров, и теперь на этом сервере также размещаются трекеры "
"проблем для Jython и веб-сайта Python. В будущем он наверняка найдет себе "
"другое применение. Там, где это возможно, в этом выпуске «Что нового в "
"Python» указаны ссылки на ошибки/исправления для каждого изменения."

#: ../../whatsnew/2.6.rst:172
msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<https://upfrontsoftware.co.za>`__ of Stellenbosch, South Africa.  Martin "
"von Löwis put a lot of effort into importing existing bugs and patches from "
"SourceForge; his scripts for this import operation are at ``https://svn."
"python.org/view/tracker/importer/`` and may be useful to other projects "
"wishing to move from SourceForge to Roundup."
msgstr ""
"Хостинг системы отслеживания ошибок Python любезно предоставлен компанией "
"Upfront Systems <https://upfrontsoftware.co.za>__ из Стелленбоша, Южная "
"Африка. Мартин фон Лёвис приложил немало усилий для импорта существующих "
"ошибок и исправлений из SourceForge; его сценарии для этой операции импорта "
"находятся по адресу ``https://svn.python.org/view/tracker/importer/`` и "
"могут быть полезны другим проектам, желающим перейти с SourceForge на "
"Roundup."

#: ../../whatsnew/2.6.rst:183
msgid "https://bugs.python.org"
msgstr "https://bugs.python.org"

#: ../../whatsnew/2.6.rst:183
msgid "The Python bug tracker."
msgstr "Трекер ошибок Python."

#: ../../whatsnew/2.6.rst:186
msgid "https://bugs.jython.org:"
msgstr "https://bugs.jython.org:"

#: ../../whatsnew/2.6.rst:186
msgid "The Jython bug tracker."
msgstr "Трекер ошибок Jython."

#: ../../whatsnew/2.6.rst:189
msgid "https://roundup.sourceforge.io/"
msgstr "https://roundup.sourceforge.io/"

#: ../../whatsnew/2.6.rst:189
msgid "Roundup downloads and documentation."
msgstr "Загрузки и документация Roundup."

#: ../../whatsnew/2.6.rst:191
msgid "https://svn.python.org/view/tracker/importer/"
msgstr "https://svn.python.org/view/tracker/importer/"

#: ../../whatsnew/2.6.rst:192
msgid "Martin von Löwis's conversion scripts."
msgstr "Скрипты преобразования Мартина фон Лёвиса."

#: ../../whatsnew/2.6.rst:195
msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr "Новый формат документации: reStructuredText с использованием Sphinx"

#: ../../whatsnew/2.6.rst:197
msgid ""
"The Python documentation was written using LaTeX since the project started "
"around 1989.  In the 1980s and early 1990s, most documentation was printed "
"out for later study, not viewed online. LaTeX was widely used because it "
"provided attractive printed output while remaining straightforward to write "
"once the basic rules of the markup were learned."
msgstr ""
"Документация Python была написана с использованием LaTeX с момента запуска "
"проекта примерно в 1989 году. В 1980-х и начале 1990-х годов большая часть "
"документации распечатывалась для последующего изучения, а не просматривалась "
"в Интернете. LaTeX широко использовался, поскольку он обеспечивал "
"привлекательный печатный результат, но при этом оставался простым в "
"написании после изучения основных правил разметки."

#: ../../whatsnew/2.6.rst:204
msgid ""
"Today LaTeX is still used for writing publications destined for printing, "
"but the landscape for programming tools has shifted.  We no longer print out "
"reams of documentation; instead, we browse through it online and HTML has "
"become the most important format to support. Unfortunately, converting LaTeX "
"to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python "
"documentation editor, spent a lot of time maintaining the conversion "
"process.  Occasionally people would suggest converting the documentation "
"into SGML and later XML, but performing a good conversion is a major task "
"and no one ever committed the time required to finish the job."
msgstr ""
"Сегодня LaTeX по-прежнему используется для написания публикаций, "
"предназначенных для печати, но ландшафт инструментов программирования "
"изменился. Мы больше не распечатываем стопки документации; вместо этого мы "
"просматриваем его в Интернете, и HTML стал наиболее важным форматом, который "
"необходимо поддерживать. К сожалению, преобразование LaTeX в HTML довольно "
"сложно, и Фред Л. Дрейк-младший, давний редактор документации Python, "
"потратил много времени на поддержание процесса преобразования. Иногда люди "
"предлагали преобразовать документацию в SGML, а затем и в XML, но "
"качественное преобразование является основной задачей, и никто никогда не "
"выделял время, необходимое для завершения работы."

#: ../../whatsnew/2.6.rst:215
msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting "
"package is called Sphinx, and is available from https://www.sphinx-doc.org/."
msgstr ""
"В ходе цикла разработки версии 2.6 Георг Брандл приложил немало усилий для "
"создания новой цепочки инструментов для обработки документации. Полученный "
"пакет называется Sphinx и доступен по адресу https://www.sphinx-doc.org/."

#: ../../whatsnew/2.6.rst:220
msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and modern "
"HTML; printed output is still supported through conversion to LaTeX.  The "
"input format is reStructuredText, a markup syntax supporting custom "
"extensions and directives that is commonly used in the Python community."
msgstr ""
"Sphinx концентрируется на выводе HTML, создавая привлекательный и "
"современный HTML; вывод на печать по-прежнему поддерживается путем "
"преобразования в LaTeX. Формат ввода — reStructuredText, синтаксис разметки, "
"поддерживающий пользовательские расширения и директивы, который обычно "
"используется в сообществе Python."

#: ../../whatsnew/2.6.rst:226
msgid ""
"Sphinx is a standalone package that can be used for writing, and almost two "
"dozen other projects (`listed on the Sphinx web site <https://www.sphinx-doc."
"org/en/master/examples.html>`__) have adopted Sphinx as their documentation "
"tool."
msgstr ""
"Sphinx — это автономный пакет, который можно использовать для написания и "
"почти двух десятков других проектов (перечисленных на веб-сайте Sphinx "
"<https://www.sphinx-doc.org/en/master/examples.html>`__). приняли Sphinx в "
"качестве своего инструмента документирования."

#: ../../whatsnew/2.6.rst:234
msgid "`Documenting Python <https://devguide.python.org/documenting/>`__"
msgstr "`Документирование Python <https://devguide.python.org/documenting/>`__"

#: ../../whatsnew/2.6.rst:234
msgid "Describes how to write for Python's documentation."
msgstr "Описывает, как писать документацию Python."

#: ../../whatsnew/2.6.rst:237
msgid "`Sphinx <https://www.sphinx-doc.org/>`__"
msgstr "`Sphinx <https://www.sphinx-doc.org/>`__"

#: ../../whatsnew/2.6.rst:237
msgid "Documentation and code for the Sphinx toolchain."
msgstr "Документация и код для набора инструментов Sphinx."

#: ../../whatsnew/2.6.rst:239
msgid "`Docutils <https://docutils.sourceforge.io>`__"
msgstr "`Docutils <https://docutils.sourceforge.io>`__"

#: ../../whatsnew/2.6.rst:240
msgid "The underlying reStructuredText parser and toolset."
msgstr "Базовый анализатор и набор инструментов reStructuredText."

#: ../../whatsnew/2.6.rst:246
msgid "PEP 343: The 'with' statement"
msgstr "PEP 343: оператор «with»"

#: ../../whatsnew/2.6.rst:248
msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement as "
"an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`!with` is now always a "
"keyword.  The rest of this section is a copy of the corresponding section "
"from the \"What's New in Python 2.5\" document; if you're familiar with the "
"':keyword:`!with`' statement from Python 2.5, you can skip this section."
msgstr ""
"В предыдущей версии Python 2.5 в качестве дополнительной функции был "
"добавлен оператор ':keyword:`with`', который можно включить с помощью "
"директивы ``from __future__ import with_statement``. В версии 2.6 оператор "
"больше не требует специального включения; это означает, что :keyword:`!with` "
"теперь всегда является ключевым словом. Остальная часть этого раздела "
"является копией соответствующего раздела из документа «Что нового в Python "
"2.5»; если вы знакомы с оператором ':keyword:`!with`' из Python 2.5, вы "
"можете пропустить этот раздел."

#: ../../whatsnew/2.6.rst:257
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"Оператор ':keyword:`with`' поясняет код, который ранее использовал блоки "
"``try...finally`` для обеспечения выполнения кода очистки. В этом разделе я "
"рассмотрю это утверждение в том виде, в каком оно будет обычно "
"использоваться. В следующем разделе я рассмотрю детали реализации и покажу, "
"как писать объекты для использования с этим оператором."

#: ../../whatsnew/2.6.rst:263
msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr ""
"Оператор ':keyword:`with`' представляет собой структуру потока управления, "
"базовая структура которой следующая:"

#: ../../whatsnew/2.6.rst:269
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`~object.__enter__` and :"
"meth:`~object.__exit__` methods)."
msgstr ""
"Выражение вычисляется, и в результате должен получиться объект, "
"поддерживающий протокол управления контекстом (то есть имеющий методы :meth:"
"`~object.__enter__` и :meth:`~object.__exit__`)."

#: ../../whatsnew/2.6.rst:273
msgid ""
"The object's :meth:`~object.__enter__` is called before *with-block* is "
"executed and therefore can run set-up code. It also may return a value that "
"is bound to the name *variable*, if given.  (Note carefully that *variable* "
"is *not* assigned the result of *expression*.)"
msgstr ""
":meth:`~object.__enter__` объекта вызывается перед выполнением *with-block* "
"и, следовательно, может запускать код настройки. Он также может возвращать "
"значение, привязанное к имени *переменная*, если оно задано. (Обратите "
"внимание, что *переменной* *не* присваивается результат *выражения*.)"

#: ../../whatsnew/2.6.rst:278
msgid ""
"After execution of the *with-block* is finished, the object's :meth:`~object."
"__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""
"После завершения выполнения *with-block* вызывается метод объекта :meth:"
"`~object.__exit__`, даже если блок вызвал исключение, и поэтому можно "
"запустить код очистки."

#: ../../whatsnew/2.6.rst:282
msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""
"Некоторые стандартные объекты Python теперь поддерживают протокол управления "
"контекстом и могут использоваться с оператором ':keyword:`with`'. Файловые "
"объекты являются одним из примеров::"

#: ../../whatsnew/2.6.rst:290
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr ""
"После выполнения этого оператора объект файла в *f* будет автоматически "
"закрыт, даже если цикл :keyword:`for` вызвал исключение в середине блока."

#: ../../whatsnew/2.6.rst:296
msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`~object.__enter__` returns *self*."
msgstr ""
"В данном случае *f* — это тот же объект, созданный :func:`open`, поскольку :"
"meth:`~object.__enter__` возвращает *self*."

#: ../../whatsnew/2.6.rst:299
msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""
"Блокировки и переменные условия модуля :mod:`threading` также поддерживают "
"оператор ':keyword:`with`'::"

#: ../../whatsnew/2.6.rst:307
msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""
"Блокировка устанавливается до выполнения блока и всегда снимается после "
"завершения блока."

#: ../../whatsnew/2.6.rst:310
msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it easy "
"to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
"Функция :func:`localcontext` в модуле :mod:`decimal` позволяет легко "
"сохранять и восстанавливать текущий десятичный контекст, который "
"инкапсулирует желаемую точность и характеристики округления для вычислений::"

#: ../../whatsnew/2.6.rst:329
msgid "Writing Context Managers"
msgstr "Написание контекстных менеджеров"

#: ../../whatsnew/2.6.rst:331
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"На самом деле оператор ':keyword:`with`' довольно сложен. Большинство людей "
"будут использовать ':keyword:`!with`' только вместе с существующими "
"объектами, и им не нужно знать эти детали, поэтому вы можете пропустить "
"остальную часть этого раздела, если хотите. Авторам новых объектов "
"необходимо будет понимать детали базовой реализации, и им следует продолжать "
"чтение."

#: ../../whatsnew/2.6.rst:337
msgid "A high-level explanation of the context management protocol is:"
msgstr "Подробное объяснение протокола управления контекстом:"

#: ../../whatsnew/2.6.rst:339
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`~object."
"__enter__` and :meth:`~object.__exit__` methods."
msgstr ""
"Выражение оценивается и должно привести к созданию объекта, называемого "
"«контекстным менеджером». Менеджер контекста должен иметь методы :meth:"
"`~object.__enter__` и :meth:`~object.__exit__`."

#: ../../whatsnew/2.6.rst:343
msgid ""
"The context manager's :meth:`~object.__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""
"Вызывается метод :meth:`~object.__enter__` контекстного менеджера. "
"Возвращаемое значение присваивается *VAR*. Если предложение as VAR "
"отсутствует, значение просто отбрасывается."

#: ../../whatsnew/2.6.rst:347
msgid "The code in *BLOCK* is executed."
msgstr "Код в *BLOCK* выполняется."

#: ../../whatsnew/2.6.rst:349
msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`~object."
"__exit__` method is called with three arguments, the exception details "
"(``type, value, traceback``, the same values returned by :func:`sys."
"exc_info`, which can also be ``None`` if no exception occurred).  The "
"method's return value controls whether an exception is re-raised: any false "
"value re-raises the exception, and ``True`` will result in suppressing it.  "
"You'll only rarely want to suppress the exception, because if you do the "
"author of the code containing the ':keyword:`with`' statement will never "
"realize anything went wrong."
msgstr ""
"Если *BLOCK* вызывает исключение, метод :meth:`~object.__exit__` "
"контекстного менеджера вызывается с тремя аргументами, подробностями "
"исключения (``тип, значение, трассировка``, те же значения, возвращаемые :"
"func:` sys.exc_info, который также может иметь значение None, если "
"исключений не произошло). Возвращаемое значение метода определяет, будет ли "
"повторно возникать исключение: любое ложное значение повторно вызывает "
"исключение, а ``True`` приведет к его подавлению. Вы будете редко захотеть "
"подавить исключение, потому что если вы это сделаете, автор кода, "
"содержащего оператор ':keyword:`with`', никогда не поймет, что что-то пошло "
"не так."

#: ../../whatsnew/2.6.rst:358
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`~object.__exit__` method "
"is still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"Если *BLOCK* не вызвал исключение, метод :meth:`~object.__exit__` все равно "
"вызывается, но все *type*, *value* и *traceback* имеют значение ``None``."

#: ../../whatsnew/2.6.rst:361
msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""
"Давайте подумаем на примере. Я не буду приводить подробный код, а лишь "
"набросаю методы, необходимые для базы данных, поддерживающей транзакции."

#: ../../whatsnew/2.6.rst:364
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"(Для людей, незнакомых с терминологией базы данных: набор изменений в базе "
"данных группируется в транзакцию. Транзакции могут быть либо зафиксированы, "
"что означает, что все изменения записываются в базу данных, или откатиться, "
"что означает, что все изменения отбрасываются и база данных не изменилась. "
"Дополнительную информацию см. в любом учебнике по базам данных.)"

#: ../../whatsnew/2.6.rst:370
msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""
"Предположим, существует объект, представляющий соединение с базой данных. "
"Нашей целью будет позволить пользователю писать такой код:"

#: ../../whatsnew/2.6.rst:379
msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"Транзакция должна быть зафиксирована, если код в блоке выполняется "
"безупречно, или откатиться, если есть исключение. Вот базовый интерфейс для :"
"class:`DatabaseConnection`, который я предполагаю::"

#: ../../whatsnew/2.6.rst:392
msgid ""
"The :meth:`~object.__enter__` method is pretty easy, having only to start a "
"new transaction.  For this application the resulting cursor object would be "
"a useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
"Метод :meth:`~object.__enter__` довольно прост, достаточно лишь начать новую "
"транзакцию. Для этого приложения полученный объект курсора будет полезным "
"результатом, поэтому метод вернет его. Затем пользователь может добавить "
"``as курсор`` в свой оператор ':keyword:`with`', чтобы привязать курсор к "
"имени переменной. ::"

#: ../../whatsnew/2.6.rst:404
msgid ""
"The :meth:`~object.__exit__` method is the most complicated because it's "
"where most of the work has to be done.  The method has to check if an "
"exception occurred.  If there was no exception, the transaction is "
"committed.  The transaction is rolled back if there was an exception."
msgstr ""
"Метод :meth:`~object.__exit__` является самым сложным, поскольку именно "
"здесь приходится выполнять большую часть работы. Метод должен проверить, "
"произошло ли исключение. Если исключений не было, транзакция фиксируется. "
"Транзакция откатывается, если возникло исключение."

#: ../../whatsnew/2.6.rst:409
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"В приведенном ниже коде выполнение просто прекращается с конца функции, "
"возвращая значение по умолчанию None. ``None`` имеет значение false, поэтому "
"исключение будет повторно вызвано автоматически. Если хотите, вы можете быть "
"более явным и добавить оператор :keyword:`return` в отмеченном месте. ::"

#: ../../whatsnew/2.6.rst:429
msgid "The contextlib module"
msgstr "Модуль contextlib"

#: ../../whatsnew/2.6.rst:431
msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that "
"are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""
"Модуль :mod:`contextlib` предоставляет некоторые функции и декоратор, "
"которые полезны при написании объектов для использования с оператором ':"
"keyword:`with`'."

#: ../../whatsnew/2.6.rst:434
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`~object.__enter__` method, and the value yielded will "
"be the method's return value that will get bound to the variable in the ':"
"keyword:`with`' statement's :keyword:`!as` clause, if any.  The code after "
"the :keyword:`!yield` will be executed in the :meth:`~object.__exit__` "
"method.  Any exception raised in the block will be raised by the :keyword:`!"
"yield` statement."
msgstr ""
"Декоратор называется :func:`contextmanager` и позволяет вам написать одну "
"функцию-генератор вместо определения нового класса. Генератор должен "
"выдавать ровно одно значение. Код до :keyword:`yield` будет выполнен как "
"метод :meth:`~object.__enter__`, а полученное значение будет возвращаемым "
"значением метода, которое будет привязано к переменной в ':keyword: "
"Предложение :keyword:`!as` оператора `with`', если таковое имеется. Код "
"после :keyword:`!yield` будет выполнен в методе :meth:`~object.__exit__`. "
"Любое исключение, возникшее в блоке, будет вызвано оператором :keyword:`!"
"yield`."

#: ../../whatsnew/2.6.rst:443
msgid ""
"Using this decorator, our database example from the previous section could "
"be written as::"
msgstr ""
"Используя этот декоратор, наш пример базы данных из предыдущего раздела "
"можно было бы записать так:"

#: ../../whatsnew/2.6.rst:463
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
"Модуль :mod:`contextlib` также имеет функцию ``nested(mgr1, mgr2, ...)``, "
"которая объединяет несколько менеджеров контекста, поэтому вам не нужно "
"писать вложенный ':keyword:`with`' заявления. В этом примере один оператор ':"
"keyword:`!with`' одновременно запускает транзакцию базы данных и получает "
"блокировку потока::"

#: ../../whatsnew/2.6.rst:472
msgid ""
"Finally, the :func:`closing` function returns its argument so that it can be "
"bound to a variable, and calls the argument's ``.close()`` method at the end "
"of the block. ::"
msgstr ""
"Наконец, функция :func:`closing` возвращает свой аргумент, чтобы его можно "
"было привязать к переменной, и вызывает метод аргумента ``.close()`` в конце "
"блока. ::"

#: ../../whatsnew/2.6.rst:490
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Оператор \"with\""

#: ../../whatsnew/2.6.rst:487
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP, написанный Гвидо ван Россумом и Ником Когланом; реализован Майком "
"Блэндом, Гвидо ван Россумом и Нилом Норвицем. PEP показывает код, "
"сгенерированный для оператора ':keyword:`with`', который может быть полезен "
"при изучении того, как этот оператор работает."

#: ../../whatsnew/2.6.rst:492
msgid "The documentation  for the :mod:`contextlib` module."
msgstr "Документация для модуля :mod:`contextlib`."

#: ../../whatsnew/2.6.rst:499
msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr "PEP 366: явный относительный импорт из основного модуля"

#: ../../whatsnew/2.6.rst:501
msgid ""
"Python's :option:`-m` switch allows running a module as a script. When you "
"ran a module that was located inside a package, relative imports didn't work "
"correctly."
msgstr ""
"Переключатель Python :option:`-m` позволяет запускать модуль как скрипт. "
"Когда вы запускали модуль, расположенный внутри пакета, относительный импорт "
"работал неправильно."

#: ../../whatsnew/2.6.rst:505
msgid ""
"The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  "
"When this attribute is present, relative imports will be relative to the "
"value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""

#: ../../whatsnew/2.6.rst:510
msgid ""
"PEP 302-style importers can then set :attr:`__package__` as necessary. The :"
"mod:`runpy` module that implements the :option:`-m` switch now does this, so "
"relative imports will now work correctly in scripts running from inside a "
"package."
msgstr ""

#: ../../whatsnew/2.6.rst:520
msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr "PEP 370: Каталог ``site-packages`` для каждого пользователя"

#: ../../whatsnew/2.6.rst:522
msgid ""
"When you run Python, the module search path ``sys.path`` usually includes a "
"directory whose path ends in ``\"site-packages\"``.  This directory is "
"intended to hold locally installed packages available to all users using a "
"machine or a particular site installation."
msgstr ""
"Когда вы запускаете Python, путь поиска модуля ``sys.path`` обычно включает "
"каталог, путь которого заканчивается на ``\"site-packages\"``. Этот каталог "
"предназначен для хранения локально установленных пакетов, доступных всем "
"пользователям, использующим компьютер или установку на определенном сайте."

#: ../../whatsnew/2.6.rst:527
msgid ""
"Python 2.6 introduces a convention for user-specific site directories. The "
"directory varies depending on the platform:"
msgstr ""
"Python 2.6 вводит соглашение о каталогах сайтов, специфичных для "
"пользователя. Каталог варьируется в зависимости от платформы:"

#: ../../whatsnew/2.6.rst:530
msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr "Unix и Mac OS X: :file:`~/.local/`"

#: ../../whatsnew/2.6.rst:531
msgid "Windows: :file:`%APPDATA%/Python`"
msgstr "Windows: :file:`%APPDATA%/Python`"

#: ../../whatsnew/2.6.rst:533
msgid ""
"Within this directory, there will be version-specific subdirectories, such "
"as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/"
"site-packages` on Windows."
msgstr ""
"В этом каталоге будут подкаталоги для конкретных версий, такие как :file:"
"`lib/python2.6/site-packages` в Unix/Mac OS и :file:`Python26/site-packages` "
"в Windows."

#: ../../whatsnew/2.6.rst:537
msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used "
"for all Python versions supporting this feature.  On Windows, the directory "
"for application-specific data can be changed by setting the :envvar:"
"`APPDATA` environment variable.  You can also modify the :file:`site.py` "
"file for your Python installation."
msgstr ""
"Если вам не нравится каталог по умолчанию, его можно переопределить с "
"помощью переменной среды. :envvar:`PYTHONUSERBASE` устанавливает корневой "
"каталог, используемый для всех версий Python, поддерживающих эту функцию. В "
"Windows каталог для данных приложения можно изменить, установив переменную "
"среды :envvar:`APPDATA`. Вы также можете изменить файл :file:`site.py` для "
"вашей установки Python."

#: ../../whatsnew/2.6.rst:544
msgid ""
"The feature can be disabled entirely by running Python with the :option:`-s` "
"option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Эту функцию можно полностью отключить, запустив Python с опцией :option:`-s` "
"или установив переменную среды :envvar:`PYTHONNOUSERSITE`."

#: ../../whatsnew/2.6.rst:550
msgid ":pep:`370` - Per-user ``site-packages`` Directory"
msgstr ":pep:`370` - Каталог ``site-packages`` для каждого пользователя"

#: ../../whatsnew/2.6.rst:551
msgid "PEP written and implemented by Christian Heimes."
msgstr "PEP написан и реализован Кристианом Хаймсом."

#: ../../whatsnew/2.6.rst:559
msgid "PEP 371: The ``multiprocessing`` Package"
msgstr "PEP 371: Пакет «многопроцессорности»"

#: ../../whatsnew/2.6.rst:561
msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""
"Новый пакет :mod:`multiprocessing` позволяет программам Python создавать "
"новые процессы, которые будут выполнять вычисления и возвращать результат "
"родительскому процессу. Родительский и дочерний процессы могут "
"взаимодействовать с помощью очередей и каналов, синхронизировать свои "
"операции с помощью блокировок и семафоров и могут совместно использовать "
"простые массивы данных."

#: ../../whatsnew/2.6.rst:567
msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of the :"
"mod:`threading` module using processes instead of threads.  That goal was "
"discarded along the path to Python 2.6, but the general approach of the "
"module is still similar.  The fundamental class is the :class:`Process`, "
"which is passed a callable object and a collection of arguments.  The :meth:"
"`start` method sets the callable running in a subprocess, after which you "
"can call the :meth:`is_alive` method to check whether the subprocess is "
"still running and the :meth:`join` method to wait for the process to exit."
msgstr ""
"Модуль :mod:`multiprocessing` начинался как точная эмуляция модуля :mod:"
"`threading`, использующая процессы вместо потоков. Эта цель была отброшена "
"на пути к Python 2.6, но общий подход модуля по-прежнему аналогичен. "
"Фундаментальным классом является :class:`Process`, которому передается "
"вызываемый объект и набор аргументов. Метод :meth:`start` устанавливает "
"вызываемый объект, запущенный в подпроцессе, после чего вы можете вызвать "
"метод :meth:`is_alive`, чтобы проверить, работает ли подпроцесс, и метод :"
"meth:`join`, чтобы дождаться процесс выхода."

#: ../../whatsnew/2.6.rst:577
msgid ""
"Here's a simple example where the subprocess will calculate a factorial.  "
"The function doing the calculation is written strangely so that it takes "
"significantly longer when the input argument is a multiple of 4."
msgstr ""
"Вот простой пример, в котором подпроцесс вычисляет факториал. Функция, "
"выполняющая вычисления, написана странно: она занимает значительно больше "
"времени, если входной аргумент кратен 4."

#: ../../whatsnew/2.6.rst:614
msgid ""
"A :class:`~queue.Queue` is used to communicate the result of the factorial. "
"The :class:`~queue.Queue` object is stored in a global variable. The child "
"process will use the value of the variable when the child was created; "
"because it's a :class:`~queue.Queue`, parent and child can use the object to "
"communicate.  (If the parent were to change the value of the global "
"variable, the child's value would be unaffected, and vice versa.)"
msgstr ""
":class:`~queue.Queue` используется для передачи результата факториала. "
"Объект :class:`~queue.Queue` хранится в глобальной переменной. Дочерний "
"процесс будет использовать значение переменной при создании дочернего "
"процесса; поскольку это :class:`~queue.Queue`, родительский и дочерний "
"элементы могут использовать этот объект для связи. (Если родительский "
"элемент изменит значение глобальной переменной, значение дочерней переменной "
"не изменится, и наоборот.)"

#: ../../whatsnew/2.6.rst:622
msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level "
"interfaces.  :class:`Pool` will create a fixed number of worker processes, "
"and requests can then be distributed to the workers by calling :meth:`apply` "
"or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:"
"`map_async` to add a number of requests.  The following code uses a :class:"
"`Pool` to spread requests across 5 worker processes and retrieve a list of "
"results::"
msgstr ""
"Два других класса, :class:`Pool` и :class:`Manager`, предоставляют "
"интерфейсы более высокого уровня. :class:`Pool` создаст фиксированное "
"количество рабочих процессов, а запросы затем можно будет распределить между "
"ними, вызвав :meth:`apply` или :meth:`apply_async` для добавления одного "
"запроса, и :meth:` map` или :meth:`map_async`, чтобы добавить несколько "
"запросов. Следующий код использует :class:`Pool` для распределения запросов "
"по 5 рабочим процессам и получения списка результатов:"

#: ../../whatsnew/2.6.rst:640
msgid "This produces the following output::"
msgstr "Это дает следующий результат:"

#: ../../whatsnew/2.6.rst:649
msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to "
"create shared locks.)"
msgstr ""
"Другой высокоуровневый интерфейс, класс :class:`Manager`, создает отдельный "
"серверный процесс, который может хранить мастер-копии структур данных "
"Python. Другие процессы могут затем получить доступ к этим структурам данных "
"и изменить их с помощью прокси-объектов. В следующем примере общий словарь "
"создается путем вызова метода :meth:`dict`; рабочие процессы затем вставляют "
"значения в словарь. (Блокировка не выполняется автоматически, что не имеет "
"значения в этом примере. Методы :class:`Manager` также включают :meth:"
"`Lock`, :meth:`RLock` и :meth:`Semaphore` для создания общих блокировок.)"

#: ../../whatsnew/2.6.rst:693
msgid "This will produce the output::"
msgstr "Это приведет к выводу::"

#: ../../whatsnew/2.6.rst:704
msgid "The documentation for the :mod:`multiprocessing` module."
msgstr "Документация для модуля :mod:`multiprocessing`."

#: ../../whatsnew/2.6.rst:707
msgid ":pep:`371` - Addition of the multiprocessing package"
msgstr ":pep:`371` - Добавление пакета многопроцессорности"

#: ../../whatsnew/2.6.rst:707
msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""
"PEP, написанный Джесси Ноллером и Ричардом Оудкерком; реализован Ричардом "
"Оудкерком и Джесси Ноллером."

#: ../../whatsnew/2.6.rst:716
msgid "PEP 3101: Advanced String Formatting"
msgstr "PEP 3101: расширенное форматирование строк"

#: ../../whatsnew/2.6.rst:718
msgid ""
"In Python 3.0, the ``%`` operator is supplemented by a more powerful string "
"formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""
"В Python 3.0 оператор ``%`` дополнен более мощным методом форматирования "
"строк: :meth:`format`. Поддержка метода :meth:`str.format` была перенесена в "
"Python 2.6."

#: ../../whatsnew/2.6.rst:722
msgid ""
"In 2.6, both 8-bit and Unicode strings have a ``.format()`` method that "
"treats the string as a template and takes the arguments to be formatted. The "
"formatting template uses curly brackets (``{``, ``}``) as special "
"characters::"
msgstr ""
"В версии 2.6 как 8-битные строки, так и строки Unicode имеют метод ."
"format(), который рассматривает строку как шаблон и принимает аргументы для "
"форматирования. В шаблоне форматирования в качестве специальных символов "
"используются фигурные скобки (``{``, ``}``:"

#: ../../whatsnew/2.6.rst:735
msgid "Curly brackets can be escaped by doubling them::"
msgstr "Фигурные скобки можно экранировать, удвоив их:"

#: ../../whatsnew/2.6.rst:740
msgid ""
"Field names can be integers indicating positional arguments, such as ``{0}"
"``, ``{1}``, etc. or names of keyword arguments.  You can also supply "
"compound field names that read attributes or access dictionary keys::"
msgstr ""
"Имена полей могут быть целыми числами, обозначающими позиционные аргументы, "
"например ``{0}``, ``{1}`` и т. д., или именами аргументов ключевых слов. Вы "
"также можете указать составные имена полей, которые считывают атрибуты или "
"получают доступ к ключам словаря:"

#: ../../whatsnew/2.6.rst:754
msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you don't "
"need to put any quotation marks around the string; it will look up the value "
"using ``.mp4`` as the key.  Strings beginning with a number will be "
"converted to an integer.  You can't write more complicated expressions "
"inside a format string."
msgstr ""
"Обратите внимание: при использовании словарной нотации, такой как ``[."
"mp4]``, вам не нужно заключать строку в кавычки; он будет искать значение, "
"используя ``.mp4`` в качестве ключа. Строки, начинающиеся с цифры, будут "
"преобразованы в целое число. Внутри форматной строки нельзя писать более "
"сложные выражения."

#: ../../whatsnew/2.6.rst:760
msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr ""
"До сих пор мы показали, как указать, какое поле подставлять в результирующую "
"строку. Точное используемое форматирование также можно контролировать путем "
"добавления двоеточия, за которым следует спецификатор формата. Например::"

#: ../../whatsnew/2.6.rst:774
msgid "Format specifiers can reference other fields through nesting::"
msgstr ""
"Спецификаторы формата могут ссылаться на другие поля посредством "
"вложенности::"

#: ../../whatsnew/2.6.rst:784
msgid "The alignment of a field within the desired width can be specified:"
msgstr "Выравнивание поля в пределах желаемой ширины можно указать:"

#: ../../whatsnew/2.6.rst:787
msgid "Character"
msgstr "Символ"

#: ../../whatsnew/2.6.rst:787
msgid "Effect"
msgstr "Эффект"

#: ../../whatsnew/2.6.rst:789
msgid "< (default)"
msgstr "< (по умолчанию)"

#: ../../whatsnew/2.6.rst:789
msgid "Left-align"
msgstr "Выравнивание по левому краю"

#: ../../whatsnew/2.6.rst:790
msgid ">"
msgstr ">"

#: ../../whatsnew/2.6.rst:790
msgid "Right-align"
msgstr "Выравнивание по правому краю"

#: ../../whatsnew/2.6.rst:791
msgid "^"
msgstr "^"

#: ../../whatsnew/2.6.rst:791
msgid "Center"
msgstr "Центр"

#: ../../whatsnew/2.6.rst:792
msgid "="
msgstr "="

#: ../../whatsnew/2.6.rst:792
msgid "(For numeric types only) Pad after the sign."
msgstr "(Только для числовых типов) Дополнение после знака."

#: ../../whatsnew/2.6.rst:795
msgid ""
"Format specifiers can also include a presentation type, which controls how "
"the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr ""
"Спецификаторы формата также могут включать тип представления, который "
"управляет форматированием значения. Например, числа с плавающей запятой "
"могут быть отформатированы как обычное число или в экспоненциальной записи:"

#: ../../whatsnew/2.6.rst:804
msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr ""
"Доступны различные типы презентаций. Обратитесь к документации 2.6 для "
"получения :ref:`полного списка <formatstrings>`; вот образец:"

#: ../../whatsnew/2.6.rst:808
msgid "``b``"
msgstr "``b``"

#: ../../whatsnew/2.6.rst:808
msgid "Binary. Outputs the number in base 2."
msgstr "Двоичный. Выводит число по основанию 2."

#: ../../whatsnew/2.6.rst:809
msgid "``c``"
msgstr "``c``"

#: ../../whatsnew/2.6.rst:809
msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr ""
"Характер. Преобразует целое число в соответствующий символ Юникода перед "
"печатью."

#: ../../whatsnew/2.6.rst:811
msgid "``d``"
msgstr "``d``"

#: ../../whatsnew/2.6.rst:811
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "Десятичное целое число. Выводит число в десятичной системе счисления."

#: ../../whatsnew/2.6.rst:812
msgid "``o``"
msgstr "``o``"

#: ../../whatsnew/2.6.rst:812
msgid "Octal format. Outputs the number in base 8."
msgstr "Восьмеричный формат. Выводит число по основанию 8."

#: ../../whatsnew/2.6.rst:813
msgid "``x``"
msgstr "``x``"

#: ../../whatsnew/2.6.rst:813
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""
"Шестнадцатеричный формат. Выводит число по основанию 16, используя строчные "
"буквы для цифр выше 9."

#: ../../whatsnew/2.6.rst:815
msgid "``e``"
msgstr "``e``"

#: ../../whatsnew/2.6.rst:815
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr ""
"Обозначение экспоненты. Печатает число в экспоненциальной записи, используя "
"букву «е» для обозначения показателя степени."

#: ../../whatsnew/2.6.rst:817
msgid "``g``"
msgstr "``g``"

#: ../../whatsnew/2.6.rst:817
msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to 'e' exponent notation."
msgstr ""
"Общий формат. При этом число печатается как число с фиксированной точкой, "
"если только число не слишком велико, и в этом случае происходит переключение "
"на обозначение экспоненты «e»."

#: ../../whatsnew/2.6.rst:820
msgid "``n``"
msgstr "``n``"

#: ../../whatsnew/2.6.rst:820
msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), except "
"that it uses the current locale setting to insert the appropriate number "
"separator characters."
msgstr ""
"Число. Это то же самое, что «g» (для чисел с плавающей запятой) или «d» (для "
"целых чисел), за исключением того, что для вставки соответствующих символов-"
"разделителей чисел используется текущая языковая настройка."

#: ../../whatsnew/2.6.rst:823
msgid "``%``"
msgstr "``%``"

#: ../../whatsnew/2.6.rst:823
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') format, "
"followed by a percent sign."
msgstr ""
"Процент. Умножает число на 100 и отображает его в фиксированном формате "
"(«f»), за которым следует знак процента."

#: ../../whatsnew/2.6.rst:827
msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr ""
"Классы и типы могут определять метод :meth:`__format__` для управления их "
"форматированием. Он получает единственный аргумент — спецификатор формата::"

#: ../../whatsnew/2.6.rst:836
msgid ""
"There's also a :func:`format` builtin that will format a single value.  It "
"calls the type's :meth:`__format__` method with the provided specifier::"
msgstr ""
"Также имеется встроенная функция :func:`format`, которая форматирует одно "
"значение. Он вызывает метод типа :meth:`__format__` с предоставленным "
"спецификатором::"

#: ../../whatsnew/2.6.rst:847
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../whatsnew/2.6.rst:847
msgid "The reference documentation for format fields."
msgstr "Справочная документация по полям формата."

#: ../../whatsnew/2.6.rst:849
msgid ":pep:`3101` - Advanced String Formatting"
msgstr ":pep:`3101` - Расширенное форматирование строк"

#: ../../whatsnew/2.6.rst:850
msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr "PEP, написанный Талином. Реализован Эриком Смитом."

#: ../../whatsnew/2.6.rst:857
msgid "PEP 3105: ``print`` As a Function"
msgstr "PEP 3105: ``print`` как функция"

#: ../../whatsnew/2.6.rst:859
msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0. "
"Making :func:`print` a function makes it possible to replace the function by "
"doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""
"Оператор ``print`` становится функцией :func:`print` в Python 3.0. Создание :"
"func:`print` функции позволяет заменить функцию, выполнив ``def print(...)`` "
"или импортировав новую функцию откуда-то еще."

#: ../../whatsnew/2.6.rst:863
msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language "
"syntax, letting you use the functional form instead.  For example::"
msgstr ""
"Python 2.6 имеет импорт ``__future__``, который удаляет ``print`` из "
"синтаксиса языка, позволяя вместо этого использовать функциональную форму. "
"Например::"

#: ../../whatsnew/2.6.rst:869
msgid "The signature of the new function is::"
msgstr "Сигнатура новой функции:"

#: ../../whatsnew/2.6.rst:874
msgid "The parameters are:"
msgstr "Эти параметры следующие:"

#: ../../whatsnew/2.6.rst:876
msgid "*args*: positional arguments whose values will be printed out."
msgstr "*args*: позиционные аргументы, значения которых будут выведены."

#: ../../whatsnew/2.6.rst:877
msgid "*sep*: the separator, which will be printed between arguments."
msgstr "*sep*: разделитель, который будет напечатан между аргументами."

#: ../../whatsnew/2.6.rst:878
msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr ""
"*end*: конечный текст, который будет напечатан после вывода всех аргументов."

#: ../../whatsnew/2.6.rst:880
msgid "*file*: the file object to which the output will be sent."
msgstr "*file*: файловый объект, в который будут отправлены выходные данные."

#: ../../whatsnew/2.6.rst:884
msgid ":pep:`3105` - Make print a function"
msgstr ":pep:`3105` - Сделать печать функцией"

#: ../../whatsnew/2.6.rst:885
msgid "PEP written by Georg Brandl."
msgstr "PEP, написанный Георгом Брандлом."

#: ../../whatsnew/2.6.rst:892
msgid "PEP 3110: Exception-Handling Changes"
msgstr "PEP 3110: изменения в обработке исключений"

#: ../../whatsnew/2.6.rst:894
msgid ""
"One error that Python programmers occasionally make is writing the following "
"code::"
msgstr ""
"Одна из ошибок, которую иногда допускают программисты Python, — это "
"написание следующего кода:"

#: ../../whatsnew/2.6.rst:902
msgid ""
"The author is probably trying to catch both :exc:`TypeError` and :exc:"
"`ValueError` exceptions, but this code actually does something different: it "
"will catch :exc:`TypeError` and bind the resulting exception object to the "
"local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be "
"caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""
"Автор, вероятно, пытается перехватить исключения :exc:`TypeError` и :exc:"
"`ValueError`, но на самом деле этот код делает что-то другое: он "
"перехватывает :exc:`TypeError` и связывает полученный объект исключения с "
"локальным именем. ``\"ЗначениеОшибка\"``. Исключение :exc:`ValueError` "
"вообще не будет перехвачено. Правильный код определяет кортеж исключений::"

#: ../../whatsnew/2.6.rst:914
msgid ""
"This error happens because the use of the comma here is ambiguous: does it "
"indicate two different nodes in the parse tree, or a single node that's a "
"tuple?"
msgstr ""
"Эта ошибка возникает из-за неоднозначного использования запятой: указывает "
"ли она на два разных узла в дереве синтаксического анализа или на один узел, "
"являющийся кортежем?"

#: ../../whatsnew/2.6.rst:918
msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word "
"\"as\".  To catch an exception and store the exception object in the "
"variable ``exc``, you must write::"
msgstr ""
"Python 3.0 делает это недвусмысленным, заменяя запятую словом «как». Чтобы "
"перехватить исключение и сохранить объект исключения в переменной exc, вы "
"должны написать::"

#: ../../whatsnew/2.6.rst:927
msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets the "
"first example as catching two different exceptions.  Python 2.6 supports "
"both the comma and \"as\", so existing code will continue to work.  We "
"therefore suggest using \"as\" when writing new Python code that will only "
"be executed with 2.6."
msgstr ""
"Python 3.0 поддерживает только использование «as» и поэтому интерпретирует "
"первый пример как перехват двух разных исключений. Python 2.6 поддерживает "
"как запятую, так и «как», поэтому существующий код продолжит работать. "
"Поэтому мы предлагаем использовать «as» при написании нового кода Python, "
"который будет выполняться только в версии 2.6."

#: ../../whatsnew/2.6.rst:935
msgid ":pep:`3110` - Catching Exceptions in Python 3000"
msgstr ":pep:`3110` - Перехват исключений в Python 3000"

#: ../../whatsnew/2.6.rst:936
msgid "PEP written and implemented by Collin Winter."
msgstr "PEP написан и реализован Коллином Уинтером."

#: ../../whatsnew/2.6.rst:943
msgid "PEP 3112: Byte Literals"
msgstr "PEP 3112: Байтовые литералы"

#: ../../whatsnew/2.6.rst:945
msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a :"
"class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:"
"`bytes` as a synonym for the :class:`str` type, and it also supports the "
"``b''`` notation."
msgstr ""
"Python 3.0 принимает Unicode в качестве основного строкового типа языка и "
"обозначает 8-битные литералы по-другому: либо как ``b'string'``, либо с "
"помощью конструктора :class:`bytes`. Для будущей совместимости Python 2.6 "
"добавляет :class:`bytes` как синоним типа :class:`str`, а также поддерживает "
"нотацию ``b''``."

#: ../../whatsnew/2.6.rst:952
msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; "
"most notably, the constructor is completely different.  In 3.0, ``bytes([65, "
"66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in "
"2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :"
"func:`str` of the list."
msgstr ""
":class:`str` версии 2.6 отличается от типа :class:`bytes` версии 3.0 по-"
"разному; в частности, конструктор совершенно другой. В версии 3.0 "
"``bytes([65, 66, 67])`` имеет длину 3 элемента и содержит байты, "
"представляющие ``ABC``; в версии 2.6 ``bytes([65, 66, 67])`` возвращает 12-"
"байтовую строку, представляющую :func:`str` списка."

#: ../../whatsnew/2.6.rst:958
msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object "
"type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, "
"which can't tell whether 2.x code intends strings to contain either "
"characters or 8-bit bytes; you can now use either :class:`bytes` or :class:"
"`str` to represent your intention exactly, and the resulting code will also "
"be correct in Python 3.0."
msgstr ""
"Основное использование :class:`bytes` в версии 2.6 будет заключаться в "
"написании тестов типа объекта, такого как isinstance(x, bytes)``. Это "
"поможет преобразователю 2 в 3, который не может определить, намерен ли код 2."
"x содержать строки либо символы, либо 8-битные байты; теперь вы можете "
"использовать :class:`bytes` или :class:`str` для точного представления "
"вашего намерения, и полученный код также будет корректен в Python 3.0."

#: ../../whatsnew/2.6.rst:965
msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""
"Также существует импорт ``__future__``, который превращает все строковые "
"литералы в строки Unicode. Это означает, что escape-последовательности "
"``\\u`` могут использоваться для включения символов Юникода::"

#: ../../whatsnew/2.6.rst:977
msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`!PyStringObject` in Python 2.x, to :c:type:`PyBytesObject`.  "
"Python 2.6 uses ``#define`` to support using the names :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, and all the other functions and macros used "
"with strings."
msgstr ""
"На уровне C Python 3.0 переименует существующий тип 8-битной строки, который "
"в Python 2.x назывался :c:type:`!PyStringObject`, в :c:type:`PyBytesObject`. "
"Python 2.6 использует #define для поддержки использования имен :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize` и всех других функций и макросов, используемых с "
"струны."

#: ../../whatsnew/2.6.rst:984
msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  A "
"new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""
"Экземпляры типа :class:`bytes` неизменяемы, как и строки. Новый тип :class:"
"`bytearray` хранит изменяемую последовательность байтов::"

#: ../../whatsnew/2.6.rst:999
msgid ""
"Byte arrays support most of the methods of string types, such as :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the "
"methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""
"Байтовые массивы поддерживают большинство методов строковых типов, таких "
"как :meth:`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, а также "
"некоторые методы списков, например как :meth:`append`, :meth:`pop` и :meth:"
"`reverse`."

#: ../../whatsnew/2.6.rst:1012
msgid ""
"There's also a corresponding C API, with :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""
"Существует также соответствующий API C с :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize` и различными другими функциями."

#: ../../whatsnew/2.6.rst:1019
msgid ":pep:`3112` - Bytes literals in Python 3000"
msgstr ":pep:`3112` — Байтовые литералы в Python 3000"

#: ../../whatsnew/2.6.rst:1020
msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr ""
"PEP, написанный Джейсоном Орендорфом; перенесено в версию 2.6 Кристианом "
"Хаймсом."

#: ../../whatsnew/2.6.rst:1027
msgid "PEP 3116: New I/O Library"
msgstr "PEP 3116: новая библиотека ввода-вывода"

#: ../../whatsnew/2.6.rst:1029
msgid ""
"Python's built-in file objects support a number of methods, but file-like "
"objects don't necessarily support all of them.  Objects that imitate files "
"usually support :meth:`read` and :meth:`write`, but they may not support :"
"meth:`readline`, for example.  Python 3.0 introduces a layered I/O library "
"in the :mod:`io` module that separates buffering and text-handling features "
"from the fundamental read and write operations."
msgstr ""
"Встроенные файловые объекты Python поддерживают ряд методов, но файловые "
"объекты не обязательно поддерживают все из них. Объекты, имитирующие файлы, "
"обычно поддерживают :meth:`read` и :meth:`write`, но они могут не "
"поддерживать, например, :meth:`readline`. Python 3.0 представляет "
"многоуровневую библиотеку ввода-вывода в модуле :mod:`io`, которая отделяет "
"функции буферизации и обработки текста от фундаментальных операций чтения и "
"записи."

#: ../../whatsnew/2.6.rst:1037
msgid ""
"There are three levels of abstract base classes provided by the :mod:`io` "
"module:"
msgstr "Модуль :mod:`io` предоставляет три уровня абстрактных базовых классов:"

#: ../../whatsnew/2.6.rst:1040
msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, "
"and :meth:`close`. Most of the methods of this class will often map to a "
"single system call. There are also :meth:`readable`, :meth:`writable`, and :"
"meth:`seekable` methods for determining what operations a given object will "
"allow."
msgstr ""
":class:`RawIOBase` определяет необработанные операции ввода-вывода: :meth:"
"`read`, :meth:`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth :"
"`truncate` и :meth:`close`. Большинство методов этого класса часто "
"отображаются в один системный вызов. Существуют также методы :meth:"
"`readable`, :meth:`writable` и :meth:`seekable` для определения того, какие "
"операции разрешены для данного объекта."

#: ../../whatsnew/2.6.rst:1048
msgid ""
"Python 3.0 has concrete implementations of this class for files and sockets, "
"but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr ""
"В Python 3.0 есть конкретные реализации этого класса для файлов и сокетов, "
"но Python 2.6 не реструктурировал объекты файлов и сокетов таким образом."

#: ../../whatsnew/2.6.rst:1052
msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing more "
"efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :"
"attr:`raw` attribute holding the underlying raw object."
msgstr ""
":class:`BufferedIOBase` — это абстрактный базовый класс, который буферизует "
"данные в памяти, чтобы уменьшить количество используемых системных вызовов, "
"что делает обработку ввода-вывода более эффективной. Он поддерживает все "
"методы :class:`RawIOBase` и добавляет атрибут :attr:`raw`, содержащий "
"базовый необработанный объект."

#: ../../whatsnew/2.6.rst:1058
msgid ""
"There are five concrete classes implementing this ABC. :class:"
"`BufferedWriter` and :class:`BufferedReader` are for objects that support "
"write-only or read-only usage that have a :meth:`seek` method for random "
"access.  :class:`BufferedRandom` objects support read and write access upon "
"the same underlying stream, and :class:`BufferedRWPair` is for objects such "
"as TTYs that have both read and write operations acting upon unconnected "
"streams of data. The :class:`BytesIO` class supports reading, writing, and "
"seeking over an in-memory buffer."
msgstr ""
"Существует пять конкретных классов, реализующих эту азбуку. :class:"
"`BufferedWriter` и :class:`BufferedReader` предназначены для объектов, "
"поддерживающих использование только для записи или только для чтения, "
"которые имеют метод :meth:`seek` для произвольного доступа. Объекты :class:"
"`BufferedRandom` поддерживают доступ для чтения и записи в одном и том же "
"базовом потоке, а :class:`BufferedRWPair` предназначен для таких объектов, "
"как TTY, которые имеют операции чтения и записи, действующие на несвязанные "
"потоки данных. Класс :class:`BytesIO` поддерживает чтение, запись и поиск в "
"буфере в памяти."

#: ../../whatsnew/2.6.rst:1071
msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting :term:"
"`universal newlines`.  :class:`TextIOBase` defines the :meth:`readline` "
"method and supports iteration upon objects."
msgstr ""
":class:`TextIOBase`: предоставляет функции для чтения и записи строк "
"(помните, что в Python 3.0 строки будут в формате Unicode) и поддерживает :"
"term:`универсальные символы новой строки`. :class:`TextIOBase` определяет "
"метод :meth:`readline` и поддерживает итерацию по объектам."

#: ../../whatsnew/2.6.rst:1077
msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and adding "
"a :attr:`buffer` attribute for access to the underlying object.  :class:"
"`StringIO` simply buffers everything in memory without ever writing anything "
"to disk."
msgstr ""
"Есть две конкретные реализации. :class:`TextIOWrapper` оборачивает "
"буферизованный объект ввода-вывода, поддерживая все методы текстового ввода-"
"вывода и добавляя атрибут :attr:`buffer` для доступа к базовому объекту. :"
"class:`StringIO` просто буферизует все в памяти, ничего не записывая на диск."

#: ../../whatsnew/2.6.rst:1083
msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's "
"pretty slow.   You should therefore stick with the existing :mod:`!StringIO` "
"module or :mod:`!cStringIO` for now.  At some point Python 3.0's :mod:`io` "
"module will be rewritten into C for speed, and perhaps the C implementation "
"will be  backported to the 2.x releases.)"
msgstr ""
"(В Python 2.6 :class:`io.StringIO` реализован на чистом Python, поэтому он "
"довольно медленный. Поэтому вам следует пока придерживаться существующего "
"модуля :mod:`!StringIO` или :mod:`!cStringIO`. В какой-то момент модуль :mod:"
"`io` в Python 3.0 будет переписан на C для ускорения, и, возможно, "
"реализация C будет перенесена в версии 2.x.)"

#: ../../whatsnew/2.6.rst:1089
msgid ""
"In Python 2.6, the underlying implementations haven't been restructured to "
"build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with 3.0, "
"and to save developers the effort of writing their own implementations of "
"buffering and text I/O."
msgstr ""
"В Python 2.6 базовые реализации не были реструктурированы для создания "
"поверх классов модуля :mod:`io`. Модуль предоставляется, чтобы упростить "
"написание кода, совместимого с версией 3.0, и избавить разработчиков от "
"необходимости писать собственные реализации буферизации и текстового ввода-"
"вывода."

#: ../../whatsnew/2.6.rst:1099
msgid ":pep:`3116` - New I/O"
msgstr ":pep:`3116` - Новый ввод/вывод"

#: ../../whatsnew/2.6.rst:1098
msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds, and others."
msgstr ""
"PEP, написанный Даниэлем Штуцбахом, Майком Вердоне и Гвидо ван Россумом. "
"Кодекс Гвидо ван Россума, Георга Брандла, Уолтера Дервальда, Джереми "
"Хилтона, Мартина фон Лёвиса, Тони Лаундса и других."

#: ../../whatsnew/2.6.rst:1107
msgid "PEP 3118: Revised Buffer Protocol"
msgstr "PEP 3118: пересмотренный протокол буфера"

#: ../../whatsnew/2.6.rst:1109
msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can be "
"viewed as a buffer of characters, for example, and this lets another module "
"such as :mod:`re` treat memory-mapped files as a string of characters to be "
"searched."
msgstr ""
"Протокол буфера — это API-интерфейс уровня C, который позволяет типам Python "
"обмениваться указателями на свои внутренние представления. Файл, "
"отображенный в памяти, можно рассматривать, например, как буфер символов, и "
"это позволяет другому модулю, такому как :mod:`re`, обрабатывать файлы, "
"отображенные в памяти, как строку символов, которую нужно найти."

#: ../../whatsnew/2.6.rst:1115
msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that "
"callers can write data directly into an array instead of going through a "
"slower API.  This PEP updates the buffer protocol in light of experience "
"from NumPy development, adding a number of new features such as indicating "
"the shape of an array or locking a memory region."
msgstr ""
"Основными пользователями протокола буфера являются пакеты числовой "
"обработки, такие как NumPy, которые раскрывают внутреннее представление "
"массивов, так что вызывающие могут записывать данные непосредственно в "
"массив вместо использования более медленного API. Этот PEP обновляет "
"протокол буфера с учетом опыта разработки NumPy, добавляя ряд новых функций, "
"таких как указание формы массива или блокировка области памяти."

#: ../../whatsnew/2.6.rst:1122
msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, which takes an object and a set of flags, and "
"fills in the ``Py_buffer`` structure with information about the object's "
"memory representation.  Objects can use this operation to lock memory in "
"place while an external caller could be modifying the contents, so there's a "
"corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the "
"external caller is done."
msgstr ""
"Самая важная новая функция C API — PyObj ect_GetBuffer ( PyObj ect *obj, "
"Py_buffer *view, int flags)», которая принимает объект и набор флагов и "
"заполняет структуру Py_buffer информацией. о представлении объекта в памяти. "
"Объекты могут использовать эту операцию для блокировки памяти на месте, пока "
"внешний вызывающий объект может изменять ее содержимое, поэтому существует "
"соответствующий ``PyBuffer_Release(Py_buffer *view)``, указывающий, что "
"внешний вызывающий объект завершил работу."

#: ../../whatsnew/2.6.rst:1132
msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies constraints "
"upon the memory returned.  Some examples are:"
msgstr ""
"Аргумент *flags* функции :c:func:` PyObj ect_GetBuffer` задает ограничения "
"на возвращаемую память. Некоторые примеры:"

#: ../../whatsnew/2.6.rst:1135
msgid ":c:macro:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ""
":c:macro:`PyBUF_WRITABLE` указывает, что память должна быть доступна для "
"записи."

#: ../../whatsnew/2.6.rst:1137
msgid ""
":c:macro:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""
":c:macro:`PyBUF_LOCK` запрашивает блокировку памяти только для чтения или "
"монопольную блокировку."

#: ../../whatsnew/2.6.rst:1139
msgid ""
":c:macro:`PyBUF_C_CONTIGUOUS` and :c:macro:`PyBUF_F_CONTIGUOUS` requests a C-"
"contiguous (last dimension varies the fastest) or Fortran-contiguous (first "
"dimension varies the fastest) array layout."
msgstr ""
":c:macro:`PyBUF_C_CONTIGUOUS` и :c:macro:`PyBUF_F_CONTIGUOUS` запрашивают C-"
"непрерывный (последнее измерение меняется быстрее всего) или Fortran-"
"непрерывный (первое измерение меняется быстрее всего) макет массива."

#: ../../whatsnew/2.6.rst:1143
msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``, "
"return locked buffer objects for a parameter."
msgstr ""
"Два новых кода аргументов для :c:func:`PyArg_ParseTuple`, ``s*`` и ``z*`` "
"возвращают заблокированные объекты буфера для параметра."

#: ../../whatsnew/2.6.rst:1149
msgid ":pep:`3118` - Revising the buffer protocol"
msgstr ":pep:`3118` - Пересмотр протокола буфера"

#: ../../whatsnew/2.6.rst:1149
msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr ""
"PEP, написанный Трэвисом Олифантом и Карлом Бэнксом; реализован Трэвисом "
"Олифантом."

#: ../../whatsnew/2.6.rst:1158
msgid "PEP 3119: Abstract Base Classes"
msgstr "PEP 3119: Абстрактные базовые классы"

#: ../../whatsnew/2.6.rst:1160
msgid ""
"Some object-oriented languages such as Java support interfaces, declaring "
"that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection of "
"basic ABCs that the Python developers think will be widely useful.  Future "
"versions of Python will probably add more ABCs."
msgstr ""
"Некоторые объектно-ориентированные языки, такие как Java, поддерживают "
"интерфейсы, заявляя, что класс имеет заданный набор методов или поддерживает "
"заданный протокол доступа. Абстрактные базовые классы (или ABC) являются "
"эквивалентной функцией Python. Поддержка ABC состоит из модуля :mod:`abc`, "
"содержащего метакласс под названием :class:`ABCMeta`, специальной обработки "
"этого метакласса встроенными функциями :func:`isinstance` и :func:"
"`issubclass`, а также набора базовые азбуки, которые, по мнению "
"разработчиков Python, будут широко полезны. В будущих версиях Python, "
"вероятно, будет добавлено больше азбуки."

#: ../../whatsnew/2.6.rst:1170
msgid ""
"Let's say you have a particular class and wish to know whether it supports "
"dictionary-style access.  The phrase \"dictionary-style\" is vague, however. "
"It probably means that accessing items with ``obj[1]`` works. Does it imply "
"that setting items with ``obj[2] = value`` works? Or that the object will "
"have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about "
"the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:"
"`update`?  Iterating over the object with :func:`iter`?"
msgstr ""
"Допустим, у вас есть определенный класс и вы хотите знать, поддерживает ли "
"он доступ в стиле словаря. Однако словосочетание «словарный стиль» "
"расплывчато. Вероятно, это означает, что доступ к элементам с помощью "
"``obj[1]`` работает. Означает ли это, что установка элементов с ``obj[2] = "
"value`` работает? Или что объект будет иметь методы :meth:`keys`, :meth:"
"`values` и :meth:`items`? А как насчет итеративных вариантов, таких как :"
"meth:`iterkeys`? :meth:`copy` и :meth:`update`? Перебор объекта с помощью :"
"func:`iter`?"

#: ../../whatsnew/2.6.rst:1178
msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different ABCs "
"that represent these distinctions.  :class:`Iterable` indicates that a class "
"defines :meth:`__iter__`, and :class:`Container` means the class defines a :"
"meth:`__contains__` method and therefore supports ``x in y`` expressions.  "
"The basic dictionary interface of getting items, setting items, and :meth:"
"`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:"
"`MutableMapping` ABC."
msgstr ""
"Модуль Python 2.6 :mod:`collections` включает в себя ряд различных ABC, "
"которые отражают эти различия. :class:`Iterable` указывает, что класс "
"определяет :meth:`__iter__`, а :class:`Container` означает, что класс "
"определяет метод :meth:`__contains__` и, следовательно, поддерживает "
"выражения ``x в y``. Базовый интерфейс словаря для получения элементов, "
"установки элементов и :meth:`keys`, :meth:`values` и :meth:`items` "
"определяется :class:`MutableMapping` ABC."

#: ../../whatsnew/2.6.rst:1187
msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr ""
"Вы можете получить свои собственные классы из определенного ABC, чтобы "
"указать, что они поддерживают этот интерфейс ABC:"

#: ../../whatsnew/2.6.rst:1196
msgid ""
"Alternatively, you could write the class without deriving from the desired "
"ABC and instead register the class by calling the ABC's :meth:`register` "
"method::"
msgstr ""
"В качестве альтернативы вы можете написать класс, не производный от "
"желаемого ABC, и вместо этого зарегистрировать класс, вызвав метод :meth:"
"`register` ABC::"

#: ../../whatsnew/2.6.rst:1207
msgid ""
"For classes that you write, deriving from the ABC is probably clearer. The :"
"meth:`register`  method is useful when you've written a new ABC that can "
"describe an existing type or class, or if you want to declare that some "
"third-party class implements an ABC. For example, if you defined a :class:"
"`PrintableType` ABC, it's legal to do::"
msgstr ""
"Для классов, которые вы пишете, вывод из ABC, вероятно, более понятен. "
"Метод :meth:`register` полезен, когда вы написали новый ABC, который может "
"описывать существующий тип или класс, или если вы хотите объявить, что какой-"
"то сторонний класс реализует ABC. Например, если вы определили :class:"
"`PrintableType` ABC, можно сделать::"

#: ../../whatsnew/2.6.rst:1219
msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's requirements "
"and to implement the code accordingly."
msgstr ""
"Классы должны подчиняться семантике, заданной ABC, но Python не может это "
"проверить; Автор класса должен понять требования ABC и соответствующим "
"образом реализовать код."

#: ../../whatsnew/2.6.rst:1223
msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr ""
"Чтобы проверить, поддерживает ли объект тот или иной интерфейс, вы теперь "
"можете написать::"

#: ../../whatsnew/2.6.rst:1230
msgid ""
"Don't feel that you must now begin writing lots of checks as in the above "
"example.  Python has a strong tradition of duck-typing, where explicit type-"
"checking is never done and code simply calls methods on an object, trusting "
"that those methods will be there and raising an exception if they aren't.  "
"Be judicious in checking for ABCs and only do it where it's absolutely "
"necessary."
msgstr ""
"Не думайте, что теперь вам нужно начинать выписывать множество чеков, как в "
"приведенном выше примере. В Python существует сильная традиция «утиной "
"типизации», когда явная проверка типов никогда не выполняется, а код просто "
"вызывает методы объекта, полагая, что эти методы будут там, и вызывая "
"исключение, если их нет. Будьте разумны при проверке ABC и делайте это "
"только там, где это абсолютно необходимо."

#: ../../whatsnew/2.6.rst:1237
msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a "
"class definition::"
msgstr ""
"Вы можете написать свои собственные ABC, используя abc.ABCMeta в качестве "
"метакласса в определении класса:"

#: ../../whatsnew/2.6.rst:1258
msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders "
"the object at twice its size and can be implemented in terms of other "
"methods described in :class:`Drawable`.  Classes implementing this ABC "
"therefore don't need to provide their own implementation of :meth:"
"`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is "
"necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""
"В приведенном выше :class:`Drawable` ABC метод :meth:`draw_doubled` "
"визуализирует объект в удвоенном размере и может быть реализован с помощью "
"других методов, описанных в :class:`Drawable`. Таким образом, классам, "
"реализующим этот ABC, не требуется предоставлять собственную реализацию :"
"meth:`draw_doubled`, хотя они могут это сделать. Однако необходима "
"реализация :meth:`draw`; ABC не может предоставить полезную общую реализацию."

#: ../../whatsnew/2.6.rst:1266
msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as :meth:"
"`draw` that must be implemented; Python will then raise an exception for "
"classes that don't define the method. Note that the exception is only raised "
"when you actually try to create an instance of a subclass lacking the "
"method::"
msgstr ""
"Вы можете применить декоратор ``@abstractmethod`` к таким методам, как :meth:"
"`draw`, которые должны быть реализованы; Затем Python вызовет исключение для "
"классов, которые не определяют этот метод. Обратите внимание, что исключение "
"возникает только тогда, когда вы действительно пытаетесь создать экземпляр "
"подкласса, в котором отсутствует метод::"

#: ../../whatsnew/2.6.rst:1281
msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr ""
"Атрибуты абстрактных данных можно объявить с помощью декоратора "
"@abstractproperty:"

#: ../../whatsnew/2.6.rst:1291
msgid "Subclasses must then define a :meth:`readonly` property."
msgstr "Затем подклассы должны определить свойство :meth:`readonly`."

#: ../../whatsnew/2.6.rst:1297
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - Знакомство с абстрактными базовыми классами"

#: ../../whatsnew/2.6.rst:1296
msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. "
"Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""
"PEP, написанный Гвидо ван Россумом и Талином. Реализован Гвидо ван Россум. "
"Перенесено в версию 2.6 Бенджамином Арангуреном совместно с Алексом Мартелли."

#: ../../whatsnew/2.6.rst:1305
msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr "PEP 3127: поддержка целочисленных литералов и синтаксис"

#: ../../whatsnew/2.6.rst:1307
msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing "
"them with \"0o\" or \"0O\" instead of a leading zero, and adds support for "
"binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""
"Python 3.0 изменяет синтаксис восьмеричных целочисленных литералов (по "
"основанию 8), добавляя к ним префикс «0o» или «0O» вместо ведущего нуля, и "
"добавляет поддержку двоичных целочисленных литералов (по основанию 2), "
"обозначаемых «0b». или префикс «0B»."

#: ../../whatsnew/2.6.rst:1312
msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal number, "
"but it does add support for \"0o\" and \"0b\"::"
msgstr ""
"В Python 2.6 не исключена поддержка ведущего 0, обозначающего восьмеричное "
"число, но добавлена ​​поддержка «0o» и «0b»::"

#: ../../whatsnew/2.6.rst:1320
msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading zero, "
"and a new :func:`bin` builtin returns the binary representation for a "
"number::"
msgstr ""
"Встроенная функция :func:`oct` по-прежнему возвращает числа с префиксом "
"ведущего нуля, а новая встроенная функция :func:`bin` возвращает двоичное "
"представление числа::"

#: ../../whatsnew/2.6.rst:1331
msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and "
"\"0b\" prefixes when base-8 or base-2 are requested, or when the *base* "
"argument is zero (signalling that the base used should be determined from "
"the string)::"
msgstr ""
"Встроенные функции :func:`int` и :func:`long` теперь будут принимать "
"префиксы \"0o\" и \"0b\", когда запрашивается основание 8 или основание 2 "
"или когда аргумент *base* равен нулю (сигнализируя, что используемая база "
"должна определяться из строки)::"

#: ../../whatsnew/2.6.rst:1349
msgid ":pep:`3127` - Integer Literal Support and Syntax"
msgstr ":pep:`3127` - Поддержка целочисленных литералов и синтаксис"

#: ../../whatsnew/2.6.rst:1349
msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr ""
"PEP, написанный Патриком Мопеном; перенесено в версию 2.6 Эриком Смитом."

#: ../../whatsnew/2.6.rst:1357
msgid "PEP 3129: Class Decorators"
msgstr "PEP 3129: Декораторы классов"

#: ../../whatsnew/2.6.rst:1359
msgid ""
"Decorators have been extended from functions to classes.  It's now legal to "
"write::"
msgstr "Декораторы были расширены из функций в классы. Теперь можно писать::"

#: ../../whatsnew/2.6.rst:1367
msgid "This is equivalent to::"
msgstr "Это эквивалентно::"

#: ../../whatsnew/2.6.rst:1376
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - Декораторы классов"

#: ../../whatsnew/2.6.rst:1377
msgid "PEP written by Collin Winter."
msgstr "PEP, написанный Коллином Уинтером."

#: ../../whatsnew/2.6.rst:1384
msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr "PEP 3141: Иерархия типов чисел"

#: ../../whatsnew/2.6.rst:1386
msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired by "
"Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:"
"`numbers` module."
msgstr ""
"В Python 3.0 добавлено несколько абстрактных базовых классов для числовых "
"типов, вдохновленных числовой башней Scheme. Эти классы были перенесены в "
"версию 2.6 как модуль :mod:`numbers`."

#: ../../whatsnew/2.6.rst:1390
msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at all, "
"and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""
"Самый общий ABC — это :class:`Number`. Он вообще не определяет никаких "
"операций и существует только для того, чтобы можно было проверить, является "
"ли объект числом, выполнив ``isinstance(obj, Number)``."

#: ../../whatsnew/2.6.rst:1394
msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary "
"parts and obtain a number's conjugate.  Python's built-in complex type is an "
"implementation of :class:`Complex`."
msgstr ""
":class:`Complex` является подклассом :class:`Number`. С комплексными числами "
"можно выполнять основные операции сложения, вычитания, умножения, деления и "
"возведения в степень, а также можно извлечь действительную и мнимую части и "
"получить сопряженное число. Встроенный сложный тип Python является "
"реализацией :class:`Complex`."

#: ../../whatsnew/2.6.rst:1400
msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""
":class:`Real` является производным от :class:`Complex` и добавляет операции, "
"которые работают только с действительными числами: :func:`floor`, :func:"
"`trunc`, округление, получение остатка по модулю N, деление этажа. и "
"сравнения."

#: ../../whatsnew/2.6.rst:1405
msgid ""
":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` "
"and :attr:`denominator` properties, and can be converted to floats.  Python "
"2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:"
"`fractions` module.  (It's called :class:`Fraction` instead of :class:"
"`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""
"Числа :class:`Rational` происходят от :class:`Real`, имеют свойства :attr:"
"`numerator` и :attr:`denominator` и могут быть преобразованы в числа с "
"плавающей запятой. Python 2.6 добавляет простой класс рациональных чисел :"
"class:`Fraction` в модуль :mod:`fractions`. (Он называется :class:`Fraction` "
"вместо :class:`Rational`, чтобы избежать конфликта имен с :class:`numbers."
"Rational`.)"

#: ../../whatsnew/2.6.rst:1412
msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be shifted "
"left and right with ``<<`` and ``>>``, combined using bitwise operations "
"such as ``&`` and ``|``, and can be used as array indexes and slice "
"boundaries."
msgstr ""
"Числа :class:`Integral` происходят от :class:`Rational`, и их можно сдвигать "
"влево и вправо с помощью ``<<`` и ``>>``, комбинируя их с помощью побитовых "
"операций, таких как ``&`` и ``|`` и может использоваться в качестве индексов "
"массива и границ срезов."

#: ../../whatsnew/2.6.rst:1417
msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:"
"`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` "
"rounds toward zero, returning the closest :class:`Integral` that's between "
"the function's argument and zero."
msgstr ""
"В Python 3.0 PEP немного переопределяет существующие встроенные функции :"
"func:`round`, :func:`math.floor`, :func:`math.ceil` и добавляет новую :func:"
"`math.trunc` , он был перенесен в Python 2.6. :func:`math.trunc` округляет в "
"сторону нуля, возвращая ближайшее :class:`Integral`, находящееся между "
"аргументом функции и нулем."

#: ../../whatsnew/2.6.rst:1426
msgid ":pep:`3141` - A Type Hierarchy for Numbers"
msgstr ":pep:`3141` — Иерархия типов чисел"

#: ../../whatsnew/2.6.rst:1426
msgid "PEP written by Jeffrey Yasskin."
msgstr "PEP, написанный Джеффри Яскином."

#: ../../whatsnew/2.6.rst:1428
msgid ""
"`Scheme's numerical tower <https://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""
"`Числовая башня Scheme <https://www.gnu.org/software/guile/manual/html_node/"
"Numerical-Tower.html#Numerical-Tower>`__, из руководства Guile."

#: ../../whatsnew/2.6.rst:1430
msgid ""
"`Scheme's number datatypes <https://conservatory.scheme.org/schemers/"
"Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS "
"Scheme specification."
msgstr ""
"`Числовые типы данных схемы <https://conservatory.scheme.org/schemers/"
"Documents/Standards/R5RS/HTML/r5rs-ZH-9.html#%_sec_6.2>`__ из спецификации "
"схемы R5RS."

#: ../../whatsnew/2.6.rst:1434
msgid "The :mod:`fractions` Module"
msgstr "Модуль :mod: `дроби`"

#: ../../whatsnew/2.6.rst:1436
msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as a "
"numerator and denominator forming a fraction, and can exactly represent "
"numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""
"Для заполнения иерархии числовых типов модуль :mod:`fractions` предоставляет "
"класс рациональных чисел. Рациональные числа хранят свои значения в виде "
"числителя и знаменателя, образующих дробь, и могут точно представлять такие "
"числа, как «2/3», которые числа с плавающей запятой могут только "
"аппроксимировать."

#: ../../whatsnew/2.6.rst:1442
msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that "
"will be the numerator and denominator of the resulting fraction. ::"
msgstr ""
"Конструктор :class:`Fraction` принимает два значения :class:`Integral`, "
"которые будут числителем и знаменателем полученной дроби. ::"

#: ../../whatsnew/2.6.rst:1455
msgid ""
"For converting floating-point numbers to rationals, the float type now has "
"an :meth:`as_integer_ratio()` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""

#: ../../whatsnew/2.6.rst:1467
msgid ""
"Note that values that can only be approximated by floating-point numbers, "
"such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr ""
"Обратите внимание, что значения, которые можно аппроксимировать только "
"числами с плавающей запятой, например 1./3, не упрощаются до "
"аппроксимируемого числа; дробь пытается **точно** соответствовать значению с "
"плавающей запятой."

#: ../../whatsnew/2.6.rst:1472
msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long "
"time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""
"Модуль :mod:`fractions` основан на реализации Сьерда Маллендера, которая "
"долгое время находилась в каталоге :file:`Demo/classes/` Python. Эта "
"реализация была значительно обновлена ​​Джеффри Ясскиным."

#: ../../whatsnew/2.6.rst:1479
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/2.6.rst:1481
msgid "Some smaller changes made to the core Python language are:"
msgstr "Некоторые небольшие изменения, внесенные в основной язык Python:"

#: ../../whatsnew/2.6.rst:1483
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory "
"or zip archive is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu, subsequently revised by Phillip "
"J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Каталоги и zip-архивы, содержащие файл :file:`__main__.py`, теперь можно "
"запускать напрямую, передав их имя интерпретатору. Каталог или zip-архив "
"автоматически вставляется в качестве первой записи в sys.path. (Предложение "
"и первоначальный патч Энди Чу, впоследствии отредактированный Филиппом Дж. "
"Эби и Ником Когланом; :issue:`1739468`.)"

#: ../../whatsnew/2.6.rst:1490
msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under the "
"assumption that they meant a :meth:`__getattr__` method was failing somehow "
"and the return value of :func:`hasattr` would therefore be ``False``.  This "
"logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit`, however; Python 2.6 will no longer discard such exceptions "
"when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:"
"`2196`.)"
msgstr ""
"Функция :func:`hasattr` перехватывала и игнорировала все ошибки, "
"предполагая, что они означают, что метод :meth:`__getattr__` каким-то "
"образом дал сбой, и поэтому возвращаемое значение :func:`hasattr` будет "
"``False` `. Однако эту логику не следует применять к :exc:"
"`KeyboardInterrupt` и :exc:`SystemExit`; Python 2.6 больше не будет "
"отбрасывать такие исключения, когда :func:`hasattr` встречает их. "
"(Исправлено Бенджамином Петерсоном; :issue:`2196`.)"

#: ../../whatsnew/2.6.rst:1498
msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr ""
"При вызове функции с использованием синтаксиса ``**`` для предоставления "
"аргументов ключевого слова вам больше не требуется использовать словарь "
"Python; любое сопоставление теперь будет работать::"

#: ../../whatsnew/2.6.rst:1511
msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"

#: ../../whatsnew/2.6.rst:1513
msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr ""
"Также стало законным предоставлять аргументы ключевого слова после аргумента "
"``*args`` для вызова функции. ::"

#: ../../whatsnew/2.6.rst:1522
msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr ""
"Раньше это было бы синтаксической ошибкой. (Предоставлено Амори Форжо "
"д'Арк; :issue:`3473`.)"

#: ../../whatsnew/2.6.rst:1525
msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from the "
"specified iterator.  If the *default* argument is supplied, it will be "
"returned if *iterator* has been exhausted; otherwise, the :exc:"
"`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""
"Новая встроенная функция ``next(iterator, [default])`` возвращает следующий "
"элемент из указанного итератора. Если указан аргумент *default*, он будет "
"возвращен, если *итератор* исчерпан; в противном случае будет возбуждено "
"исключение :exc:`StopIteration`. (Перенесено в :issue:`2719`.)"

#: ../../whatsnew/2.6.rst:1531
msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list "
"type's :meth:`index` and :meth:`count` methods::"
msgstr ""
"Кортежи теперь имеют методы :meth:`index` и :meth:`count`, соответствующие "
"методам :meth:`index` и :meth:`count` типа списка::"

#: ../../whatsnew/2.6.rst:1540
msgid "(Contributed by Raymond Hettinger)"
msgstr "(Сообщил Раймонд Хеттингер)"

#: ../../whatsnew/2.6.rst:1542
msgid ""
"The built-in types now have improved support for extended slicing syntax, "
"accepting various combinations of ``(start, stop, step)``. Previously, the "
"support was partial and certain corner cases wouldn't work. (Implemented by "
"Thomas Wouters.)"
msgstr ""
"Встроенные типы теперь имеют улучшенную поддержку расширенного синтаксиса "
"срезов, допуская различные комбинации ``(start, stop, step)``. Раньше "
"поддержка была частичной, и в некоторых случаях она не работала. "
"(Реализовано Томасом Воутерсом.)"

#: ../../whatsnew/2.6.rst:1549
msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and :"
"attr:`deleter`, that are decorators providing useful shortcuts for adding a "
"getter, setter or deleter function to an existing property. You would use "
"them like this::"
msgstr ""
"Свойства теперь имеют три атрибута: :attr:`getter`, :attr:`setter` и :attr:"
"`deleter`, которые представляют собой декораторы, предоставляющие полезные "
"ярлыки для добавления функции получения, установки или удаления к "
"существующему свойству. Вы бы использовали их так::"

#: ../../whatsnew/2.6.rst:1576
msgid ""
"Several methods of the built-in set types now accept multiple iterables: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""
"Некоторые методы встроенных типов наборов теперь принимают несколько "
"итераций: :meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :"
"meth:`update`, :meth:`difference` и : meth:`difference_update`."

#: ../../whatsnew/2.6.rst:1590 ../../whatsnew/2.6.rst:1875
#: ../../whatsnew/2.6.rst:1896
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:1592
msgid ""
"Many floating-point features were added.  The :func:`float` function will "
"now turn the string ``nan`` into an IEEE 754 Not A Number value, and "
"``+inf`` and ``-inf`` into positive or negative infinity.  This works on any "
"platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:"
"`1635`.)"
msgstr ""
"Было добавлено множество функций с плавающей запятой. Функция :func:`float` "
"теперь преобразует строку ``nan`` в значение IEEE 754 Not A Number, а "
"``+inf`` и ``-inf`` в положительную или отрицательную бесконечность. Это "
"работает на любой платформе с семантикой IEEE 754. (Предоставлено Кристианом "
"Хаймсом; :issue:`1635`.)"

#: ../../whatsnew/2.6.rst:1598
msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, "
"return true if their floating-point argument is infinite or Not A Number.  (:"
"issue:`1640`)"
msgstr ""
"Другие функции в модуле :mod:`math`, :func:`isinf` и :func:`isnan`, "
"возвращают true, если их аргумент с плавающей запятой бесконечен или не "
"является числом. (:issue:`1640`)"

#: ../../whatsnew/2.6.rst:1602
msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to and "
"from a string representation without introducing rounding errors from the "
"conversion between decimal and binary.  Floats have a :meth:`hex` method "
"that returns a string representation, and the ``float.fromhex()`` method "
"converts a string back into a number::"
msgstr ""
"Были добавлены функции преобразования для преобразования чисел с плавающей "
"запятой в шестнадцатеричные строки (:issue:`3008`). Эти функции преобразуют "
"числа с плавающей запятой в строковое представление и обратно, не внося "
"ошибок округления из-за преобразования десятичных и двоичных чисел. У чисел "
"с плавающей запятой есть метод :meth:`hex`, который возвращает строковое "
"представление, а метод ``float.fromhex()`` преобразует строку обратно в "
"число::"

#: ../../whatsnew/2.6.rst:1619
msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""
"Численная тонкость: при создании комплексного числа из двух чисел с "
"плавающей запятой в системах, поддерживающих нули со знаком (-0 и +0), "
"конструктор :func:`complex` теперь сохраняет знак нуля. (Исправлено Марком "
"Т. Дикинсоном; :issue:`1507`.)"

#: ../../whatsnew/2.6.rst:1624
msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can set "
"``__hash__ = None`` to indicate that the class isn't hashable.  This will "
"make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be "
"indicated as implementing the :class:`Hashable` ABC."
msgstr ""
"Классы, которые наследуют метод :meth:`__hash__` от родительского класса, "
"могут установить ``__hash__ = None``, чтобы указать, что класс не является "
"хешируемым. Это приведет к тому, что ``hash(obj)`` вызовет :exc:`TypeError`, "
"и класс не будет указан как реализующий :class:`Hashable` ABC."

#: ../../whatsnew/2.6.rst:1630
msgid ""
"You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` "
"method that compares objects by their value rather than by identity.  All "
"objects have a default hash method that uses ``id(obj)`` as the hash value.  "
"There's no tidy way to remove the :meth:`__hash__` method inherited from a "
"parent class, so assigning ``None`` was implemented as an override.  At the "
"C level, extensions can set ``tp_hash`` to :c:func:"
"`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot "
"d'Arc; :issue:`2235`.)"
msgstr ""
"Это следует сделать, если вы определили метод :meth:`__cmp__` или :meth:"
"`__eq__`, который сравнивает объекты по их значению, а не по идентичности. "
"Все объекты имеют хеш-метод по умолчанию, который использует id(obj) в "
"качестве хеш-значения. Не существует аккуратного способа удалить метод :meth:"
"`__hash__`, унаследованный от родительского класса, поэтому присвоение "
"``None`` было реализовано как переопределение. На уровне C расширения могут "
"установить для ``tp_hash`` значение :c:func:` PyObj ect_HashNotImplemented`. "
"(Исправлено Ником Когланом и Амори Форжо д'Арк; :issue:`2235`.)"

#: ../../whatsnew/2.6.rst:1640
msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that does "
"``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. "
"(Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""
"Исключение :exc:`GeneratorExit` теперь является подклассом :exc:"
"`BaseException` вместо :exc:`Exception`. Это означает, что обработчик "
"исключений, который выполняет ``Exception:``, не будет случайно "
"перехватывать :exc:`GeneratorExit`. (Предоставлено Чадом Остином; :issue:"
"`1537`.)"

#: ../../whatsnew/2.6.rst:1646
msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the "
"original code object backing the generator. (Contributed by Collin Winter; :"
"issue:`1473257`.)"
msgstr ""
"Объекты-генераторы теперь имеют атрибут :attr:`gi_code`, который ссылается "
"на исходный объект кода, поддерживающий генератор. (Предоставлено Коллином "
"Уинтером; :issue:`1473257`.)"

#: ../../whatsnew/2.6.rst:1650
msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as well "
"as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""
"Встроенная функция :func:`compile` теперь принимает аргументы ключевого "
"слова, а также позиционные параметры. (Предоставлено Томасом Воутерсом; :"
"issue:`1444529`.)"

#: ../../whatsnew/2.6.rst:1654
msgid ""
"The :func:`complex` constructor now accepts strings containing parenthesized "
"complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip "
"values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:"
"issue:`1491866`)"
msgstr ""
"Конструктор :func:`complex` теперь принимает строки, содержащие комплексные "
"числа в скобках, а это означает, что ``complex(repr(cplx))`` теперь будет "
"принимать значения туда и обратно. Например, ``complex('(3+4j)')`` теперь "
"возвращает значение (3+4j). (:issue:`1491866`)"

#: ../../whatsnew/2.6.rst:1659
msgid ""
"The string :meth:`translate` method now accepts ``None`` as the translation "
"table parameter, which is treated as the identity transformation.   This "
"makes it easier to carry out operations that only delete characters.  "
"(Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:"
"`1193128`.)"
msgstr ""
"Строковый метод :meth:`translate` теперь принимает ``None`` в качестве "
"параметра таблицы перевода, который рассматривается как преобразование "
"идентификатора. Это упрощает выполнение операций, которые только удаляют "
"символы. (Размещено Бенгтом Рихтером и реализовано Рэймондом Хеттингером; :"
"issue:`1193128`.)"

#: ../../whatsnew/2.6.rst:1665
msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method on "
"the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the object "
"control the value that :func:`dir` produces. Objects that have :meth:"
"`__getattr__` or :meth:`__getattribute__` methods can use this to advertise "
"pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""
"Встроенная функция :func:`dir` теперь проверяет наличие метода :meth:"
"`__dir__` для получаемых объектов. Этот метод должен возвращать список "
"строк, содержащих имена допустимых атрибутов объекта, и позволяет объекту "
"управлять значением, которое создает :func:`dir`. Объекты, имеющие методы :"
"meth:`__getattr__` или :meth:`__getattribute__`, могут использовать это для "
"объявления псевдоатрибутов, которые они будут соблюдать. (:issue:`1591665`)"

#: ../../whatsnew/2.6.rst:1673
msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`!im_self` is :attr:"
"`~method.__self__`, and :attr:`!im_func` is also available as :attr:`~method."
"__func__`. The old names are still supported in Python 2.6, but are gone in "
"3.0."
msgstr ""
"Объекты метода экземпляра имеют новые атрибуты для объекта и функции, "
"содержащей метод; новый синоним для :attr:`!im_self` — :attr:`~method."
"__self__`, а :attr:`!im_func` также доступен как :attr:`~method.__func__`. "
"Старые имена по-прежнему поддерживаются в Python 2.6, но исчезли из версии "
"3.0."

#: ../../whatsnew/2.6.rst:1679
msgid ""
"An obscure change: when you use the :func:`locals` function inside a :"
"keyword:`class` statement, the resulting dictionary no longer returns free "
"variables.  (Free variables, in this case, are variables referenced in the :"
"keyword:`!class` statement  that aren't attributes of the class.)"
msgstr ""
"Непонятное изменение: когда вы используете функцию :func:`locals` внутри "
"оператора :keyword:`class`, результирующий словарь больше не возвращает "
"свободные переменные. (В данном случае свободные переменные — это "
"переменные, на которые ссылается оператор :keyword:`!class`, которые не "
"являются атрибутами класса.)"

#: ../../whatsnew/2.6.rst:1688
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/2.6.rst:1690
msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it possible "
"to invoke warnings from the parser, and may also make the interpreter's "
"startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:"
"`1631171`.)"
msgstr ""
"Модуль :mod:`warnings` переписан на C. Это позволяет вызывать предупреждения "
"от парсера, а также может ускорить запуск интерпретатора. (Предоставлено "
"Нилом Норвицем и Бреттом Кэнноном; :issue:`1631171`.)"

#: ../../whatsnew/2.6.rst:1695
msgid ""
"Type objects now have a cache of methods that can reduce the work required "
"to find the correct method implementation for a particular class; once "
"cached, the interpreter doesn't need to traverse base classes to figure out "
"the right method to call. The cache is cleared if a base class or the class "
"itself is modified, so the cache should remain correct even in the face of "
"Python's dynamic nature. (Original optimization implemented by Armin Rigo, "
"updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""
"Объекты типов теперь имеют кэш методов, что позволяет сократить работу, "
"необходимую для поиска правильной реализации метода для определенного "
"класса; после кэширования интерпретатору не нужно просматривать базовые "
"классы, чтобы определить правильный метод для вызова. Кэш очищается, если "
"изменяется базовый класс или сам класс, поэтому кеш должен оставаться "
"корректным даже несмотря на динамическую природу Python. (Оригинальная "
"оптимизация реализована Армином Риго, обновлена ​​для Python 2.6 Кевином "
"Джейкобсом; :issue:`1700288`.)"

#: ../../whatsnew/2.6.rst:1705
msgid ""
"By default, this change is only applied to types that are included with the "
"Python core.  Extension modules may not necessarily be compatible with this "
"cache, so they must explicitly add :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to "
"the module's ``tp_flags`` field to enable the method cache. (To be "
"compatible with the method cache, the extension module's code must not "
"directly access and modify the ``tp_dict`` member of any of the types it "
"implements.  Most modules don't do this, but it's impossible for the Python "
"interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""
"По умолчанию это изменение применяется только к типам, включенным в ядро ​​"
"Python. Модули расширения не обязательно могут быть совместимы с этим кешем, "
"поэтому они должны явно добавить :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` в "
"поле ``tp_flags`` модуля, чтобы включить кеш метода. (Чтобы быть совместимым "
"с кэшем методов, код модуля расширения не должен напрямую обращаться к члену "
"``tp_dict`` и изменять его любого из типов, которые он реализует. "
"Большинство модулей этого не делают, но интерпретатор Python не может это "
"сделать. определите это. См. обсуждение в :issue:`1878`.)"

#: ../../whatsnew/2.6.rst:1716
msgid ""
"Function calls that use keyword arguments are significantly faster by doing "
"a quick pointer comparison, usually saving the time of a full string "
"comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""
"Вызовы функций, использующие аргументы ключевых слов, выполняются "
"значительно быстрее за счет быстрого сравнения указателей, что обычно "
"экономит время полного сравнения строк. (Предоставлено Раймондом Хеттингером "
"после первоначальной реализации Антуана Питру; :issue:`1819`.)"

#: ../../whatsnew/2.6.rst:1721
msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in C, "
"thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Все функции модуля :mod:`struct` были переписаны на C благодаря работе над "
"спринтом Need For Speed. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:1725
msgid ""
"Some of the standard built-in types now set a bit in their type objects.  "
"This speeds up checking whether an object is a subclass of one of these "
"types.  (Contributed by Neal Norwitz.)"
msgstr ""
"Некоторые из стандартных встроенных типов теперь устанавливают бит в своих "
"объектах типов. Это ускоряет проверку того, является ли объект подклассом "
"одного из этих типов. (Предоставлено Нилом Норвицем.)"

#: ../../whatsnew/2.6.rst:1729
msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and :meth:"
"`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is "
"reduced by using pymalloc for the Unicode string's data."
msgstr ""
"В строках Юникода теперь используется более быстрый код для обнаружения "
"пробелов и разрывов строк; это ускоряет метод :meth:`split` примерно на 25%, "
"а :meth:`splitlines` — на 35%. (Предоставлено Антуаном Питру.) Использование "
"памяти сокращается за счет использования pymalloc для строковых данных "
"Юникода."

#: ../../whatsnew/2.6.rst:1735
msgid ""
"The ``with`` statement now stores the :meth:`~object.__exit__` method on the "
"stack, producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""
"Оператор ``with`` теперь сохраняет метод :meth:`~object.__exit__` в стеке, "
"что дает небольшое ускорение. (Реализовано Джеффри Яскином.)"

#: ../../whatsnew/2.6.rst:1738
msgid ""
"To reduce memory usage, the garbage collector will now clear internal free "
"lists when garbage-collecting the highest generation of objects. This may "
"return memory to the operating system sooner."
msgstr ""
"Чтобы уменьшить использование памяти, сборщик мусора теперь будет очищать "
"внутренние свободные списки при сборке мусора объектов самого высокого "
"поколения. Это может привести к более быстрому возврату памяти в "
"операционную систему."

#: ../../whatsnew/2.6.rst:1747
msgid "Interpreter Changes"
msgstr "Изменения интерпретатора"

#: ../../whatsnew/2.6.rst:1749
msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to the "
"underlying JVM.  :option:`-X` has been reserved for options specific to a "
"particular implementation of Python such as CPython, Jython, or IronPython.  "
"If either option is used with Python 2.6, the interpreter will report that "
"the option isn't currently used."
msgstr ""
"Два параметра командной строки зарезервированы для использования в других "
"реализациях Python. Переключатель :option:`-J` зарезервирован для "
"использования Jython для специфичных для Jython параметров, таких как "
"переключатели, которые передаются базовой JVM. :option:`-X` зарезервирован "
"для опций, специфичных для конкретной реализации Python, например CPython, "
"Jython или IronPython. Если какой-либо параметр используется в Python 2.6, "
"интерпретатор сообщит, что этот параметр в настоящее время не используется."

#: ../../whatsnew/2.6.rst:1757
msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files "
"by supplying the :option:`-B` switch to the Python interpreter, or by "
"setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before "
"running the interpreter.  This setting is available to Python programs as "
"the ``sys.dont_write_bytecode`` variable, and Python code can change the "
"value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz "
"and Georg Brandl.)"
msgstr ""
"Теперь Python можно запретить запись файлов :file:`.pyc` или :file:`.pyo`, "
"указав переключатель :option:`-B` интерпретатору Python или установив среду :"
"envvar:`PYTHONDONTWRITEBYTECODE`. переменная перед запуском интерпретатора. "
"Этот параметр доступен программам Python как переменная ``sys."
"dont_write_bytecode``, и код Python может изменить значение, чтобы изменить "
"поведение интерпретатора. (Сообщили Нил Норвиц и Георг Брандл.)"

#: ../../whatsnew/2.6.rst:1765
msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form "
"``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional "
"*errorhandler* part specifies what to do with characters that can't be "
"handled by the encoding, and  should be one of \"error\", \"ignore\", or "
"\"replace\".   (Contributed by Martin von Löwis.)"
msgstr ""
"Кодировку, используемую для стандартного ввода, вывода и стандартных ошибок, "
"можно указать, установив переменную среды :envvar:`PYTHONIOENCODING` перед "
"запуском интерпретатора. Значение должно быть строкой в ​​форме "
"``<кодировка>`` или ``<кодировка>:<обработчик ошибок>``. Часть *encoding* "
"определяет имя кодировки, например, ``utf-8`` или ``latin-1``; "
"необязательная часть *errorhandler* определяет, что делать с символами, "
"которые не могут быть обработаны кодировкой, и может быть одним из следующих "
"значений: «ошибка», «игнорировать» или «заменить». (Предоставлено Мартином "
"фон Лёвисом.)"

#: ../../whatsnew/2.6.rst:1778
msgid "New and Improved Modules"
msgstr "Новые и улучшенные модули"

#: ../../whatsnew/2.6.rst:1780
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""
"Как и в каждом выпуске, стандартная библиотека Python получила ряд улучшений "
"и исправлений ошибок. Вот неполный список наиболее заметных изменений, "
"отсортированный в алфавитном порядке по названию модуля. Обратитесь к файлу :"
"file:`Misc/NEWS` в дереве исходного кода для получения более полного списка "
"изменений или просмотрите журналы Subversion для получения всех подробностей."

#: ../../whatsnew/2.6.rst:1786
msgid ""
"The :mod:`asyncore` and :mod:`asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""

#: ../../whatsnew/2.6.rst:1791
msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avión, and the "
"package is now available as a standalone package.  The web page for the "
"package is `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/"
"programacion/pybsddb.htm>`__. The plan is to remove the package from the "
"standard library in Python 3.0, because its pace of releases is much more "
"frequent than Python's."
msgstr ""
"У модуля :mod:`bsddb` также появился новый сопровождающий — Jesús Cea Avión, "
"и теперь этот пакет доступен как отдельный пакет. Веб-страница пакета — `www."
"jcea.es/programacion/pybsddb.htm <https://www.jcea.es/programacion/pybsddb."
"htm>`__. Планируется удалить пакет из стандартной библиотеки Python 3.0, "
"поскольку его выпуски происходят гораздо чаще, чем у Python."

#: ../../whatsnew/2.6.rst:1799
msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by W. "
"Barnes.)"
msgstr ""
"Модуль :mod:`bsddb.dbshelve` теперь использует самый высокий доступный "
"протокол травления вместо того, чтобы ограничиваться протоколом 1. "
"(Разработано У. Барнсом.)"

#: ../../whatsnew/2.6.rst:1803
msgid ""
"The :mod:`cgi` module will now read variables from the query string of an "
"HTTP POST request.  This makes it possible to use form actions with URLs "
"that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""
"Модуль :mod:`cgi` теперь будет считывать переменные из строки запроса HTTP "
"POST-запроса. Это позволяет использовать действия формы с URL-адресами, "
"которые включают строки запроса, такие как «/cgi-bin/add.py?category=1». "
"(Предоставлено Александром Фиори и Нубисом; :issue:`1817`.)"

#: ../../whatsnew/2.6.rst:1809
msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`cgi` module to the :mod:`urlparse <urllib.parse>` module. The "
"versions still available in the :mod:`!cgi` module will trigger :exc:"
"`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""
"Функции :func:`parse_qs` и :func:`parse_qsl` были перенесены из модуля :mod:"
"`cgi` в модуль :mod:`urlparse <urllib.parse>`. Версии, все еще доступные в "
"модуле :mod:`!cgi`, будут вызывать сообщения :exc:"
"`PendingDeprecationWarning` в версии 2.6 (:issue:`600362`)."

#: ../../whatsnew/2.6.rst:1815
msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark "
"Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""
"Модуль :mod:`cmath` подвергся обширной переработке, которую внесли Марк "
"Дикинсон и Кристиан Хеймс. Добавлено пять новых функций:"

#: ../../whatsnew/2.6.rst:1819
msgid ""
":func:`polar` converts a complex number to polar form, returning the modulus "
"and argument of the complex number."
msgstr ""
":func:`polar` преобразует комплексное число в полярную форму, возвращая "
"модуль и аргумент комплексного числа."

#: ../../whatsnew/2.6.rst:1822
msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back into "
"the corresponding complex number."
msgstr ""
":func:`rect` делает обратное, превращая пару модуль-аргумент обратно в "
"соответствующее комплексное число."

#: ../../whatsnew/2.6.rst:1825
msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ""
":func:`phase` возвращает аргумент (также называемый углом) комплексного "
"числа."

#: ../../whatsnew/2.6.rst:1828
msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr ""
":func:`isnan` возвращает True, если действительная или мнимая часть "
"аргумента равна NaN."

#: ../../whatsnew/2.6.rst:1831
msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ""
":func:`isinf` возвращает True, если действительная или мнимая часть "
"аргумента бесконечна."

#: ../../whatsnew/2.6.rst:1834
msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results are "
"accurate to within a few units of least precision (ulps) whenever possible.  "
"See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:"
"`atanh`: and :func:`atan` have also been corrected."
msgstr ""
"Изменения также улучшили числовую корректность модуля :mod:`cmath`. Для всех "
"функций действительная и мнимая части результатов имеют точность до "
"нескольких единиц наименьшей точности (ulps), когда это возможно. "
"Подробности смотрите в :issue:`1381`. Также были исправлены ветки для :func:"
"`asinh`, :func:`atanh`: и :func:`atan`."

#: ../../whatsnew/2.6.rst:1841
msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test "
"cases exercise the algebraic functions."
msgstr ""
"Значительно расширены тесты модуля; почти 2000 новых тестовых примеров "
"выполняют алгебраические функции."

#: ../../whatsnew/2.6.rst:1844
msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special "
"values and floating-point exceptions in a manner consistent with Annex 'G' "
"of the C99 standard."
msgstr ""
"На платформах IEEE 754 модуль :mod:`cmath` теперь обрабатывает специальные "
"значения IEEE 754 и исключения с плавающей запятой в соответствии с "
"Приложением G стандарта C99."

#: ../../whatsnew/2.6.rst:1848
msgid ""
"A new data type in the :mod:`collections` module: ``namedtuple(typename, "
"fieldnames)`` is a factory function that creates subclasses of the standard "
"tuple whose fields are accessible by name as well as index.  For example::"
msgstr ""
"Новый тип данных в модуле :mod:`collections`: ``namedtuple(typename, "
"fieldnames)`` — это фабричная функция, которая создает подклассы "
"стандартного кортежа, поля которого доступны как по имени, так и по индексу. "
"Например::"

#: ../../whatsnew/2.6.rst:1870
msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :func:`namedtuple` instances.  For example, the :meth:"
"`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:"
"`digits`, and :attr:`exponent` fields."
msgstr ""
"Некоторые места в стандартной библиотеке, возвращающие кортежи, были "
"изменены для возврата экземпляров :func:`namedtuple`. Например, метод :meth:"
"`Decimal.as_tuple` теперь возвращает именованный кортеж с полями :attr:"
"`sign`, :attr:`digits` и :attr:`exпонента`."

#: ../../whatsnew/2.6.rst:1877
msgid ""
"Another change to the :mod:`collections` module is that the :class:`deque` "
"type now supports an optional *maxlen* parameter; if supplied, the deque's "
"size will be restricted to no more than *maxlen* items.  Adding more items "
"to a full deque causes old items to be discarded."
msgstr ""
"Еще одно изменение в модуле :mod:`collections` заключается в том, что тип :"
"class:`deque` теперь поддерживает необязательный параметр *maxlen*; если он "
"указан, размер дека будет ограничен не более чем *maxlen* элементами. "
"Добавление дополнительных элементов в полную очередь приводит к удалению "
"старых элементов."

#: ../../whatsnew/2.6.rst:1898
msgid ""
"The :mod:`Cookie <http.cookies>` module's :class:`~http.cookies.Morsel` "
"objects now support an :attr:`~http.cookies.Morsel.httponly` attribute.  In "
"some browsers. cookies with this attribute set cannot be accessed or "
"manipulated by JavaScript code. (Contributed by Arvin Schnell; :issue:"
"`1638033`.)"
msgstr ""
"Объекты :class:`~http.cookies.Morsel` модуля :mod:`Cookie <http.cookies>` "
"теперь поддерживают атрибут :attr:`~http.cookies.Morsel.httponly`. В "
"некоторых браузерах. файлы cookie с этим набором атрибутов не могут быть "
"доступны или изменены с помощью кода JavaScript. (Предоставлено Арвином "
"Шнеллом; :issue:`1638033`.)"

#: ../../whatsnew/2.6.rst:1903
msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes the "
"display attributes for a certain number of characters on a single line.  "
"(Contributed by Fabian Kreutz.)"
msgstr ""
"Новый оконный метод в модуле :mod:`curses`, :meth:`chgat`, изменяет атрибуты "
"отображения для определенного количества символов в одной строке. "
"(Предоставлено Фабианом Кройцем.)"

#: ../../whatsnew/2.6.rst:1913
msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now supports "
"editing in insert mode as well as overwrite mode. Insert mode is enabled by "
"supplying a true value for the *insert_mode* parameter when creating the :"
"class:`Textbox` instance."
msgstr ""
"Класс :class:`Textbox` в модуле :mod:`curses.textpad` теперь поддерживает "
"редактирование в режиме вставки, а также в режиме перезаписи. Режим вставки "
"включается путем указания истинного значения для параметра *insert_mode* при "
"создании экземпляра :class:`Textbox`."

#: ../../whatsnew/2.6.rst:1918
msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` "
"format code that expands to the number of microseconds in the object, zero-"
"padded on the left to six places.  (Contributed by Skip Montanaro; :issue:"
"`1158`.)"
msgstr ""
"Методы :meth:`strftime` модуля :mod:`datetime` теперь поддерживают `` %f `` "
"код формата, который расширяется до количества микросекунд в объекте, "
"дополненный нулями слева до шести знаков. (Предоставлено Скипом Монтанаро; :"
"issue:`1158`.)"

#: ../../whatsnew/2.6.rst:1923
msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <https://speleotrove.com/decimal/decarith.html>`__.  "
"New features include some methods for some basic mathematical functions such "
"as :meth:`exp` and :meth:`log10`::"
msgstr ""
"Модуль :mod:`decimal` был обновлен до версии 1.66 `Общей десятичной "
"спецификации <https://speleotrove.com/decimal/decarith.html>`__. Новые "
"функции включают в себя некоторые методы для некоторых основных "
"математических функций, таких как :meth:`exp` и :meth:`log10`::"

#: ../../whatsnew/2.6.rst:1935
msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named "
"tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""
"Метод :meth:`as_tuple` объектов :class:`Decimal` теперь возвращает "
"именованный кортеж с полями :attr:`sign`, :attr:`digits` и :attr:`exпонента`."

#: ../../whatsnew/2.6.rst:1938
msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr ""
"(Реализовано Факундо Батистой и Марком Дикинсоном. Поддержка именованных "
"кортежей добавлена ​​Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:1941
msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named "
"tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
"Класс :class:`SequenceMatcher` модуля :mod:`difflib` теперь возвращает "
"именованные кортежи, представляющие совпадения, с атрибутами :attr:`a`, :"
"attr:`b` и :attr:`size`. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:1946
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`ftplib.FTP` class constructor as well as the :meth:"
"`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` "
"class's :meth:`storbinary` and :meth:`storlines` now take an optional "
"*callback* parameter that will be called with each block of data after the "
"data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""
"В конструктор класса :class:`ftplib.FTP`, а также в метод :meth:`connect` "
"был добавлен необязательный параметр ``timeout``, определяющий время "
"ожидания, измеряемое в секундах. (Добавлено Факундо Батистой.) Кроме того, :"
"meth:`storbinary` и :meth:`storlines` класса :class:`FTP` теперь принимают "
"необязательный параметр *callback*, который будет вызываться с каждым блоком "
"данных после данных. был отправлен. (Предоставлено Филом Шварцем; :issue:"
"`1221598`.)"

#: ../../whatsnew/2.6.rst:1954
msgid ""
"The :func:`reduce` built-in function is also available in the :mod:"
"`functools` module.  In Python 3.0, the builtin has been dropped and :func:"
"`reduce` is only available from :mod:`functools`; currently there are no "
"plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :"
"issue:`1739906`.)"
msgstr ""
"Встроенная функция :func:`reduce` также доступна в модуле :mod:`functools`. "
"В Python 3.0 встроенная функция удалена, и :func:`reduce` доступен только "
"из :mod:`functools`; в настоящее время нет планов отказаться от встроенной "
"функции в серии 2.x. (Исправлено Кристианом Хеймсом; :issue:`1739906`.)"

#: ../../whatsnew/2.6.rst:1960
msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to "
"print a prompt message and read the password, falling back to standard error "
"and standard input.  If the password may be echoed to the terminal, a "
"warning is printed before the prompt is displayed.  (Contributed by Gregory "
"P. Smith.)"
msgstr ""
"Когда это возможно, модуль :mod:`getpass` теперь будет использовать :file:`/"
"dev/tty` для печати подсказки и чтения пароля, возвращаясь к стандартным "
"ошибкам и стандартному вводу. Если пароль может быть отображен на терминале, "
"перед отображением подсказки выводится предупреждение. (Предоставлено "
"Грегори П. Смитом.)"

#: ../../whatsnew/2.6.rst:1966
msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a Unicode "
"path was used and Unicode filenames are matched within the directory.  (:"
"issue:`1001604`)"
msgstr ""
"Функция :func:`glob.glob` теперь может возвращать имена файлов в Юникоде, "
"если использовался путь в Юникоде и имена файлов в Юникоде совпадают внутри "
"каталога. (:issue:`1001604`)"

#: ../../whatsnew/2.6.rst:1970
msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns a "
"new generator that returns the contents of all the iterators, also in sorted "
"order.  For example::"
msgstr ""
"Новая функция в модуле :mod:`heapq`, ``merge(iter1, iter2, ...)``, принимает "
"любое количество итераций, возвращающих данные в отсортированном порядке, и "
"возвращает новый генератор, который возвращает содержимое всех итераторы, "
"также в отсортированном порядке. Например::"

#: ../../whatsnew/2.6.rst:1978
msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more efficient "
"than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""
"Другая новая функция, «heappushpop(heap, item)», помещает *item* в *heap*, "
"затем извлекает его и возвращает наименьший элемент. Это более эффективно, "
"чем вызов :func:`heappush`, а затем :func:`heappop`."

#: ../../whatsnew/2.6.rst:1983
msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead of "
"the less-than-or-equal comparison it previously used. This makes :mod:"
"`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
":mod:`heapq` теперь реализован для использования только сравнения «меньше "
"чем» вместо сравнения «меньше или равно», которое использовалось ранее. Это "
"делает использование типа в :mod:`heapq` соответствующим методу :meth:`list."
"sort`. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:1989
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`httplib.HTTPConnection <http.client."
"HTTPConnection>` and :class:`HTTPSConnection <http.client.HTTPSConnection>` "
"class constructors.  (Added by Facundo Batista.)"
msgstr ""
"Необязательный параметр ``timeout``, определяющий время ожидания, измеряемое "
"в секундах, был добавлен в классы :class:`httplib.HTTPConnection <http."
"client.HTTPConnection>` и :class:`HTTPSConnection <http.client."
"HTTPSConnection>`. конструкторы. (Добавлено Факундо Батистой.)"

#: ../../whatsnew/2.6.rst:1994
msgid ""
"Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` "
"and :func:`getargs`, now return named tuples. In addition to behaving like "
"tuples, the elements of the  return value can also be accessed as "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
"Большинство функций модуля :mod:`inspect`, такие как :func:`getmoduleinfo` "
"и :func:`getargs`, теперь возвращают именованные кортежи. Помимо поведения "
"кортежей, элементы возвращаемого значения также могут быть доступны как "
"атрибуты. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:2000
msgid ""
"Some new functions in the module include :func:`isgenerator`, :func:"
"`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""
"Некоторые новые функции в модуле включают :func:`isgenerator`, :func:"
"`isgeneratorfunction` и :func:`isabstract`."

#: ../../whatsnew/2.6.rst:2004
msgid "The :mod:`itertools` module gained several new functions."
msgstr "Модуль :mod:`itertools` получил несколько новых функций."

#: ../../whatsnew/2.6.rst:2006
msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of "
"the elements; if some of the iterables are shorter than others, the missing "
"values are set to *fillvalue*.  For example::"
msgstr ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` создает кортежи из каждого "
"элемента; если некоторые из итераций короче других, отсутствующим значениям "
"присваивается значение *fillvalue*. Например::"

#: ../../whatsnew/2.6.rst:2013
msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of "
"the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""
"``product(iter1, iter2, ..., [repeat=N])`` возвращает декартово произведение "
"предоставленных итераций, набор кортежей, содержащих все возможные "
"комбинации элементов, возвращаемых из каждой итерации. ::"

#: ../../whatsnew/2.6.rst:2022
msgid ""
"The optional *repeat* keyword argument is used for taking the product of an "
"iterable or a set of iterables with themselves, repeated *N* times.  With a "
"single iterable argument, *N*-tuples are returned::"
msgstr ""
"Необязательный аргумент ключевого слова *repeat* используется для получения "
"продукта итерации или набора итераций с самим собой, повторяющихся *N* раз. "
"При одном итерируемом аргументе возвращаются *N*-кортежи::"

#: ../../whatsnew/2.6.rst:2031
msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr "При двух итерациях возвращаются *2N*-кортежи. ::"

#: ../../whatsnew/2.6.rst:2039
msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from the "
"elements of *iterable*. ::"
msgstr ""
"``combinations(iterable, r)`` возвращает подпоследовательности длиной *r* из "
"элементов *iterable*. ::"

#: ../../whatsnew/2.6.rst:2050
msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of "
"the iterable's elements.  If *r* is not specified, it will default to the "
"number of elements produced by the iterable. ::"
msgstr ""
"``permutations(iter[, r])`` возвращает все перестановки длины *r* элементов "
"итерируемого объекта. Если *r* не указано, по умолчанию будет установлено "
"количество элементов, созданных итерацией. ::"

#: ../../whatsnew/2.6.rst:2060
msgid ""
"``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` "
"that gained a new constructor in Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` takes a single iterable that should return other "
"iterables.  :func:`chain` will then return all the elements of the first "
"iterable, then all the elements of the second, and so on. ::"
msgstr ""
"``itertools.chain(*iterables)`` — это существующая функция в :mod:"
"`itertools`, которая получила новый конструктор в Python 2.6. ``itertools."
"chain.from_iterable(iterable)`` принимает одну итерацию, которая должна "
"возвращать другие итерации. :func:`chain` затем вернет все элементы первой "
"итерации, затем все элементы второй и так далее. ::"

#: ../../whatsnew/2.6.rst:2070
msgid "(All contributed by Raymond Hettinger.)"
msgstr "(Все материалы предоставлены Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:2072
msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:"
"`TimedRotatingFileHandler` now have an optional *delay* parameter to their "
"constructors.  If *delay* is true, opening of the log file is deferred until "
"the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""
"Класс :class:`FileHandler` модуля :mod:`logging` и его подклассы :class:"
"`WatchedFileHandler`, :class:`RotatingFileHandler` и :class:"
"`TimedRotatingFileHandler` теперь имеют необязательный параметр *delay* для "
"своих конструкторов. . Если *delay* имеет значение true, открытие файла "
"журнала откладывается до тех пор, пока не будет выполнен первый вызов :meth:"
"`emit`. (Предоставлено Винаем Саджипом.)"

#: ../../whatsnew/2.6.rst:2079
msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  "
"If the argument is true, UTC time will be used in determining when midnight "
"occurs and in generating filenames; otherwise local time will be used."
msgstr ""
":class:`TimedRotatingFileHandler` также имеет параметр конструктора *utc*. "
"Если аргумент имеет значение true, время UTC будет использоваться при "
"определении наступления полуночи и при создании имен файлов; в противном "
"случае будет использоваться местное время."

#: ../../whatsnew/2.6.rst:2084
msgid "Several new functions were added to the :mod:`math` module:"
msgstr "В модуль :mod:`math` было добавлено несколько новых функций:"

#: ../../whatsnew/2.6.rst:2086
msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float "
"is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""
":func:`~math.isinf` и :func:`~math.isnan` определяют, является ли данное "
"число с плавающей точкой бесконечностью (положительной или отрицательной) "
"или NaN (не числом) соответственно."

#: ../../whatsnew/2.6.rst:2089
msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning "
"the absolute value of *x* combined with the sign bit of *y*.  For example, "
"``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""
":func:`~math.copysign` копирует знаковый бит числа IEEE 754, возвращая "
"абсолютное значение *x* в сочетании со знаковым битом *y*. Например, math."
"copysign(1, -0.0) возвращает -1,0. (Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:2094
msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed by "
"Raymond Hettinger; :issue:`2138`.)"
msgstr ""
":func:`~math.factorial` вычисляет факториал числа. (Предоставлено Рэймондом "
"Хеттингером; :issue:`2138`.)"

#: ../../whatsnew/2.6.rst:2097
msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is "
"careful to avoid loss of precision through using partial sums. (Contributed "
"by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""
":func:`~math.fsum` складывает поток чисел из итерируемого объекта и "
"старается избежать потери точности из-за использования частичных сумм. "
"(Сообщили Джин Брауэрс, Рэймонд Хеттингер и Марк Дикинсон; :issue:`2819`.)"

#: ../../whatsnew/2.6.rst:2102
msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the "
"inverse hyperbolic functions."
msgstr ""
":func:`~math.acosh`, :func:`~math.asinh` и :func:`~math.atanh` вычисляют "
"обратные гиперболические функции."

#: ../../whatsnew/2.6.rst:2105
msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ""
":func:`~math.log1p` возвращает натуральный логарифм *1+x* (основание *e*)."

#: ../../whatsnew/2.6.rst:2108
msgid ""
":func:`trunc` rounds a number toward zero, returning the closest :class:"
"`Integral` that's between the function's argument and zero. Added as part of "
"the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""
":func:`trunc` округляет число в сторону нуля, возвращая ближайшее :class:"
"`Integral`, находящееся между аргументом функции и нулем. Добавлен как часть "
"резервной копии иерархии типов PEP 3141 для чисел <#pep-3141>`__."

#: ../../whatsnew/2.6.rst:2113
msgid ""
"The :mod:`math` module has been improved to give more consistent behaviour "
"across platforms, especially with respect to handling of floating-point "
"exceptions and IEEE 754 special values."
msgstr ""
"Модуль :mod:`math` был улучшен, чтобы обеспечить более согласованное "
"поведение на разных платформах, особенно в отношении обработки исключений с "
"плавающей запятой и специальных значений IEEE 754."

#: ../../whatsnew/2.6.rst:2117
msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should now "
"give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where "
"Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or "
"'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 "
"standard recommends signaling 'overflow', Python will raise :exc:"
"`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""
"По возможности модуль следует рекомендациям стандарта C99 относительно "
"особых значений 754. Например, ``sqrt(-1.)`` теперь должен возвращать :exc:"
"`ValueError` почти на всех платформах, а ``sqrt(float('NaN'))`` должен "
"возвращать NaN на всех IEEE 754. платформы. Если Приложение F стандарта C99 "
"рекомендует сигнализировать «деление на ноль» или «недействительно», Python "
"выдаст :exc:`ValueError`. Там, где Приложение F стандарта C99 рекомендует "
"сигнализировать о переполнении, Python выдаст :exc:`OverflowError`. (См. :"
"issue:`711019` и :issue:`1640`.)"

#: ../../whatsnew/2.6.rst:2127
msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr "(Предоставлено Кристианом Хеймсом и Марком Дикинсоном.)"

#: ../../whatsnew/2.6.rst:2129
msgid ""
":class:`~mmap.mmap` objects now have a :meth:`rfind` method that searches "
"for a substring beginning at the end of the string and searching backwards.  "
"The :meth:`find` method also gained an *end* parameter giving an index at "
"which to stop searching. (Contributed by John Lenton.)"
msgstr ""
"Объекты :class:`~mmap.mmap` теперь имеют метод :meth:`rfind`, который ищет "
"подстроку, начинающуюся с конца строки, и выполняет поиск в обратном "
"направлении. Метод :meth:`find` также получил параметр *end*, указывающий "
"индекс, по которому следует прекратить поиск. (Предоставлено Джоном "
"Лентоном.)"

#: ../../whatsnew/2.6.rst:2135
msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that takes "
"a name and an optional set of arguments, returning a callable that will call "
"the named function on any arguments passed to it.  For example::"
msgstr ""
"Модуль :mod:`operator` получил функцию :func:`methodcaller`, которая "
"принимает имя и необязательный набор аргументов, возвращая вызываемый "
"объект, который будет вызывать именованную функцию для любых переданных ему "
"аргументов. Например::"

#: ../../whatsnew/2.6.rst:2145
msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr "(Предоставлено Георгом Брандлом по предложению Григория Петросяна.)"

#: ../../whatsnew/2.6.rst:2147
msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the "
"corresponding attribute lookups::"
msgstr ""
"Функция :func:`attrgetter` теперь принимает имена с точками и выполняет "
"поиск соответствующих атрибутов::"

#: ../../whatsnew/2.6.rst:2157
msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr "(Предоставлено Георгом Брандлом по предложению Барри Варшавы.)"

#: ../../whatsnew/2.6.rst:2159
msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""
"Модуль :mod:`os` теперь содержит несколько новых системных вызовов. "
"``fchmod(fd, mode)`` и ``fchown(fd, uid, gid)`` меняют режим и владельца "
"открытого файла, а ``lchmod(path, mode)`` меняет режим символической "
"ссылки . (Предоставлено Георгом Брандлом и Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:2165
msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file.  "
"Constants for the flag values are defined in the :mod:`stat` module; some "
"possible values include :const:`UF_IMMUTABLE` to signal the file may not be "
"changed and :const:`UF_APPEND` to indicate that data can only be appended to "
"the file.  (Contributed by M. Levinson.)"
msgstr ""
":func:`chflags` и :func:`lchflags` являются оболочками для соответствующих "
"системных вызовов (там, где они доступны), изменяющих флаги, установленные в "
"файле. Константы для значений флагов определены в модуле :mod:`stat`; "
"некоторые возможные значения включают :const:`UF_IMMUTABLE`, чтобы указать, "
"что файл не может быть изменен, и :const:`UF_APPEND`, чтобы указать, что "
"данные могут быть только добавлены в файл. (Предоставлено М. Левинсоном.)"

#: ../../whatsnew/2.6.rst:2173
msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from "
"*low* to *high*, ignoring any errors and not including *high* itself. This "
"function is now used by the :mod:`subprocess` module to make starting "
"processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""
"``os.closerange(low, high)`` эффективно закрывает все файловые дескрипторы "
"от *low* до *high*, игнорируя любые ошибки и не включая сам *high*. Эта "
"функция теперь используется модулем :mod:`subprocess` для ускорения запуска "
"процессов. (Предоставлено Георгом Брандлом; :issue:`1663329`.)"

#: ../../whatsnew/2.6.rst:2178
msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing the "
"object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""
"Метод :meth:`clear` объекта ``os.environ`` теперь будет сбрасывать "
"переменные среды с помощью :func:`os.unsetenv` в дополнение к очистке ключей "
"объекта. (Предоставлено Мартином Хорчицкой; :issue:`1181`.)"

#: ../../whatsnew/2.6.rst:2182
msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set to "
"True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's default "
"value is false.  Note that the function can fall into an infinite recursion "
"if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""
"Функция :func:`os.walk` теперь имеет параметр ``followlinks``. Если "
"установлено значение True, он будет следовать по символическим ссылкам, "
"указывающим на каталоги, и посещать их содержимое. В целях обратной "
"совместимости значение параметра по умолчанию — false. Обратите внимание, "
"что функция может впасть в бесконечную рекурсию, если есть символическая "
"ссылка, указывающая на родительский каталог. (:issue:`1273829`)"

#: ../../whatsnew/2.6.rst:2189
msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been changed "
"to not split on leading period characters. This produces better results when "
"operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` "
"now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:"
"`1115886`)"
msgstr ""
"В модуле :mod:`os.path` функция :func:`splitext` была изменена и теперь не "
"разбивается на начальные символы точки. Это дает лучшие результаты при "
"работе с точечными файлами Unix. Например, ``os.path.splitext('.ipython')`` "
"теперь возвращает ``('.ipython', '')`` вместо ``('', '.ipython')``. (:issue:"
"`1115886`)"

#: ../../whatsnew/2.6.rst:2196
msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current working "
"directory to the destination ``path``.  (Contributed by Richard Barran; :"
"issue:`1339796`.)"
msgstr ""
"Новая функция os.path.relpath(path, start='.')`` возвращает относительный "
"путь от пути ``start``, если он указан, или от текущего рабочего каталога до "
"пункта назначения `` `путь``. (Предоставлено Ричардом Барраном; :issue:"
"`1339796`.)"

#: ../../whatsnew/2.6.rst:2201
msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment variables "
"given in the form \"%var%\", and \"~user\" will be expanded into the user's "
"home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
"В Windows :func:`os.path.expandvars` теперь будет расширять переменные "
"среды, заданные в форме \"%var%\", а \"~user\" будет расширяться до пути к "
"домашнему каталогу пользователя. (Предоставлено Джозайей Карлсоном; :issue:"
"`957650`.)"

#: ../../whatsnew/2.6.rst:2206
msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new command: "
"\"run\" restarts the Python program being debugged and can optionally take "
"new command-line arguments for the program. (Contributed by Rocky "
"Bernstein; :issue:`1393667`.)"
msgstr ""
"Отладчик Python, предоставляемый модулем :mod:`pdb`, получил новую команду: "
"«run» перезапускает отлаживаемую программу Python и может при необходимости "
"принимать новые аргументы командной строки для программы. (Предоставлено "
"Рокки Бернштейном; :issue:`1393667`.)"

#: ../../whatsnew/2.6.rst:2211
msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a traceback, "
"will now use the traceback returned by :func:`sys.exc_info` if no traceback "
"is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""
"Функция :func:`pdb.post_mortem`, используемая для начала отладки обратной "
"трассировки, теперь будет использовать обратную трассировку, возвращаемую :"
"func:`sys.exc_info`, если обратная трассировка не указана. (Предоставлено "
"Факундо Батиста; :issue:`1106316`.)"

#: ../../whatsnew/2.6.rst:2216
msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Модуль :mod:`pickletools` теперь имеет функцию :func:`optimize`, которая "
"принимает строку, содержащую пикл, и удаляет некоторые неиспользуемые коды "
"операций, возвращая более короткий пикл, содержащий ту же структуру данных. "
"(Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:2221
msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""
"В модуль :mod:`pkgutil` была добавлена ​​функция :func:`get_data`, которая "
"возвращает содержимое файлов ресурсов, включенных в установленный пакет "
"Python. Например::"

#: ../../whatsnew/2.6.rst:2236
msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr "(Предоставлено Полом Муром; :issue:`2439`.)"

#: ../../whatsnew/2.6.rst:2238
msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :"
"attr:`buffer_size` attribute to change the size of the buffer used to hold "
"character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""
"Объекты :class:`Parser` модуля :mod:`pyexpat` теперь позволяют устанавливать "
"атрибут :attr:`buffer_size` для изменения размера буфера, используемого для "
"хранения символьных данных. (Предоставлено Ахимом Гаедке; :issue:`1137`.)"

#: ../../whatsnew/2.6.rst:2243
msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries in "
"different orders.  The :class:`PriorityQueue` class stores queued items in a "
"heap and retrieves them in priority order, and :class:`LifoQueue` retrieves "
"the most recently added entries first, meaning that it behaves like a stack. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Модуль :mod:`Queue` теперь предоставляет варианты очередей, которые "
"извлекают записи в разном порядке. Класс :class:`PriorityQueue` хранит "
"элементы в очереди в куче и извлекает их в порядке приоритета, а :class:"
"`LifoQueue` сначала извлекает самые последние добавленные записи, то есть он "
"ведет себя как стек. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.6.rst:2250
msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on a "
"32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""
"Объекты :class:`Random` модуля :mod:`random` теперь можно консервировать в "
"32-битной системе и распаковывать в 64-битной системе, и наоборот. К "
"сожалению, это изменение также означает, что объекты :class:`Random` Python "
"2.6 не могут быть корректно распакованы в более ранних версиях Python. "
"(Предоставлено Шоном Лигоцки; :issue:`1727780`.)"

#: ../../whatsnew/2.6.rst:2257
msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between *low* "
"and *high*, not including *high* itself, and with *mode* as the most "
"frequently occurring value in the distribution.  (Contributed by Wladmir van "
"der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""
"Новая функция ``triangular(low, high, mode)`` возвращает случайные числа, "
"соответствующие треугольному распределению. Возвращаемые значения находятся "
"между *low* и *high*, не включая саму *high*, и с *mode* как наиболее часто "
"встречающимся значением в распределении. (Предоставлено Владимиром ван дер "
"Лааном и Раймондом Хеттингером; :issue:`1681432`.)"

#: ../../whatsnew/2.6.rst:2264
msgid ""
"Long regular expression searches carried out by the  :mod:`re` module will "
"check for signals being delivered, so time-consuming searches can now be "
"interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""
"Длинные поиски по регулярным выражениям, выполняемые модулем :mod:`re`, "
"будут проверять доставку сигналов, поэтому теперь трудоемкие поиски можно "
"прервать. (Предоставлено Джошем Хойтом и Ральфом Шмиттом; :issue:`846388`.)"

#: ../../whatsnew/2.6.rst:2269
msgid ""
"The regular expression module is implemented by compiling bytecodes for a "
"tiny regex-specific virtual machine.  Untrusted code could create malicious "
"strings of bytecode directly and cause crashes, so Python 2.6 includes a "
"verifier for the regex bytecode. (Contributed by Guido van Rossum from work "
"for Google App Engine; :issue:`3487`.)"
msgstr ""
"Модуль регулярных выражений реализуется путем компиляции байт-кодов для "
"крошечной виртуальной машины, специфичной для регулярных выражений. "
"Ненадежный код может напрямую создавать вредоносные строки байт-кода и "
"вызывать сбои, поэтому Python 2.6 включает верификатор для байт-кода "
"регулярного выражения. (Предоставлено Гвидо ван Россумом, работавшим в "
"Google App Engine; :issue:`3487`.)"

#: ../../whatsnew/2.6.rst:2276
msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will now "
"ignore exceptions triggered while evaluating a name. (Fixed by Lorenz "
"Quack; :issue:`2250`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:2280
msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-only :"
"attr:`queue` attribute that returns the contents of the scheduler's queue, "
"represented as a list of named tuples with the fields ``(time, priority, "
"action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""
"Экземпляры :class:`scheduler` модуля :mod:`sched` теперь имеют атрибут :attr:"
"`queue`, доступный только для чтения, который возвращает содержимое очереди "
"планировщика, представленное в виде списка именованных кортежей с полями "
"``( время, приоритет, действие, аргумент)``. (Предоставлено Рэймондом "
"Хеттингером; :issue:`1861`.)"

#: ../../whatsnew/2.6.rst:2286
msgid ""
"The :mod:`select` module now has wrapper functions for the Linux :c:func:`!"
"epoll` and BSD :c:func:`!kqueue` system calls. :meth:`modify` method was "
"added to the existing :class:`poll` objects; ``pollobj.modify(fd, "
"eventmask)`` takes a file descriptor or file object and an event mask, "
"modifying the recorded event mask for that file. (Contributed by Christian "
"Heimes; :issue:`1657`.)"
msgstr ""
"Модуль :mod:`select` теперь имеет функции-обертки для системных вызовов :c:"
"func:`!epoll` и BSD :c:func:`!kqueue`. К существующим объектам :class:`poll` "
"добавлен метод :meth:`modify`; ``pollobj.modify(fd, eventmask)`` принимает "
"дескриптор файла или файловый объект и маску события, изменяя записанную "
"маску событий для этого файла. (Предоставлено Кристианом Хаймсом; :issue:"
"`1657`.)"

#: ../../whatsnew/2.6.rst:2294
msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* argument "
"that takes a callable object.  This callable will receive each directory "
"path and a list of the directory's contents, and returns a list of names "
"that will be ignored, not copied."
msgstr ""
"Функция :func:`shutil.copytree` теперь имеет необязательный аргумент "
"*ignore*, который принимает вызываемый объект. Этот вызываемый объект "
"получит каждый путь к каталогу и список его содержимого и вернет список "
"имен, которые будут игнорироваться, а не копироваться."

#: ../../whatsnew/2.6.rst:2299
msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` function "
"for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary "
"number of glob-style patterns and returns a callable that will ignore any "
"files and directories that match any of these patterns.  The following "
"example copies a directory tree, but skips both :file:`.svn` directories and "
"Emacs backup files, which have names ending with '~'::"
msgstr ""
"Модуль :mod:`shutil` также предоставляет функцию :func:`ignore_patterns` для "
"использования с этим новым параметром. :func:`ignore_patterns` принимает "
"произвольное количество шаблонов в стиле glob и возвращает вызываемый "
"объект, который будет игнорировать любые файлы и каталоги, соответствующие "
"любому из этих шаблонов. В следующем примере копируется дерево каталогов, но "
"пропускаются как каталоги :file:`.svn`, так и файлы резервных копий Emacs, "
"имена которых заканчиваются на '~'::"

#: ../../whatsnew/2.6.rst:2310
msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr "(Предоставлено Тарек Зиаде; :issue:`2663`.)"

#: ../../whatsnew/2.6.rst:2312
msgid ""
"Integrating signal handling with GUI handling event loops like those used by "
"Tkinter or GTk+ has long been a problem; most software ends up polling, "
"waking up every fraction of a second to check if any GUI events have "
"occurred. The :mod:`signal` module can now make this more efficient. Calling "
"``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a "
"signal is received, a byte is written to that file descriptor.  There's also "
"a C-level function, :c:func:`PySignal_SetWakeupFd`, for setting the "
"descriptor."
msgstr ""
"Интеграция обработки сигналов с циклами обработки событий графического "
"пользовательского интерфейса, подобными тем, которые используются Tkinter "
"или GTk+, уже давно является проблемой; большинство программ заканчивают "
"опрос, пробуждаясь каждую долю секунды, чтобы проверить, произошли ли какие-"
"либо события графического интерфейса. Модуль :mod:`signal` теперь может "
"сделать это более эффективным. Вызов signal.set_wakeup_fd(fd) устанавливает "
"дескриптор файла, который будет использоваться; при получении сигнала в этот "
"файловый дескриптор записывается байт. Существует также функция уровня C, :c:"
"func:`PySignal_SetWakeupFd`, для установки дескриптора."

#: ../../whatsnew/2.6.rst:2322
msgid ""
"Event loops will use this by opening a pipe to create two descriptors, one "
"for reading and one for writing.  The writable descriptor will be passed to :"
"func:`set_wakeup_fd`, and the readable descriptor will be added to the list "
"of descriptors monitored by the event loop via :c:func:`!select` or :c:func:"
"`!poll`. On receiving a signal, a byte will be written and the main event "
"loop will be woken up, avoiding the need to poll."
msgstr ""
"Циклы событий будут использовать это, открывая канал для создания двух "
"дескрипторов: одного для чтения и одного для записи. Дескриптор, доступный "
"для записи, будет передан в :func:`set_wakeup_fd`, а дескриптор, доступный "
"для чтения, будет добавлен в список дескрипторов, отслеживаемых циклом "
"событий, через :c:func:`!select` или :c:func:`!poll. `. При получении "
"сигнала будет записан байт и активируется основной цикл событий, что "
"позволяет избежать необходимости опроса."

#: ../../whatsnew/2.6.rst:2330
msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr "(Предоставлено Адамом Олсеном; :issue:`1583`.)"

#: ../../whatsnew/2.6.rst:2332
msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""
"Функция :func:`siginterrupt` теперь доступна из кода Python и позволяет "
"изменить, могут ли сигналы прерывать системные вызовы или нет. "
"(Предоставлено Ральфом Шмиттом.)"

#: ../../whatsnew/2.6.rst:2336
msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been added "
"(where they're available).  :func:`setitimer` allows setting interval timers "
"that will cause a signal to be delivered to the process after a specified "
"time, measured in wall-clock time, consumed process time, or combined "
"process+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""
"Также были добавлены функции :func:`setitimer` и :func:`getitimer` (там, где "
"они доступны). :func:`setitimer` позволяет устанавливать интервальные "
"таймеры, которые будут вызывать доставку сигнала процессу через определенное "
"время, измеряемое временем настенных часов, затраченным временем процесса "
"или объединенным временем процесса и системы. (Предоставлено Гильерме Поло; :"
"issue:`2240`.)"

#: ../../whatsnew/2.6.rst:2343
msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition "
"of the :class:`SMTP_SSL` class. This class supports an interface identical "
"to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both "
"class constructors also have an optional ``timeout`` parameter that "
"specifies a timeout for the initial connection attempt, measured in "
"seconds.  (Contributed by Facundo Batista.)"
msgstr ""
"Модуль :mod:`smtplib` теперь поддерживает SMTP через SSL благодаря "
"добавлению класса :class:`SMTP_SSL`. Этот класс поддерживает интерфейс, "
"идентичный существующему классу :class:`SMTP`. (Предоставлено Монти "
"Тейлором.) Оба конструктора класса также имеют необязательный параметр "
"``timeout``, который определяет тайм-аут для первоначальной попытки "
"подключения, измеряемый в секундах. (Предоставлено Факундо Батистой.)"

#: ../../whatsnew/2.6.rst:2351
msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to the "
"module.  LMTP is used in place of SMTP when transferring e-mail between "
"agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :"
"issue:`957003`.)"
msgstr ""
"В модуль также была добавлена ​​реализация протокола LMTP (:rfc:`2033`). LMTP "
"используется вместо SMTP при передаче электронной почты между агентами, "
"которые не управляют очередью почты. (LMTP реализован Лейфом Хедстремом; :"
"issue:`957003`.)"

#: ../../whatsnew/2.6.rst:2356
msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""
":meth:`SMTP.starttls` теперь соответствует :rfc:`3207` и забывает любую "
"информацию, полученную от сервера, не полученную в результате самого "
"согласования TLS. (Патч предоставлен Биллом Феннером; :issue:`829951`.)"

#: ../../whatsnew/2.6.rst:2361
msgid ""
"The :mod:`socket` module now supports TIPC (https://tipc.sourceforge.net/), "
"a high-performance non-IP-based protocol designed for use in clustered "
"environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto "
"Bertogli; :issue:`1646`.)"
msgstr ""
"Модуль :mod:`socket` теперь поддерживает TIPC (https://tipc.sourceforge."
"net/), высокопроизводительный протокол, не основанный на IP, предназначенный "
"для использования в кластерных средах. Адреса TIPC состоят из 4 или 5 "
"кортежей. (Предоставлено Альберто Бертольи; :issue:`1646`.)"

#: ../../whatsnew/2.6.rst:2366
msgid ""
"A new function, :func:`create_connection`, takes an address and connects to "
"it using an optional timeout value, returning the connected socket object.  "
"This function also looks up the address's type and connects to it using IPv4 "
"or IPv6 as appropriate.  Changing your code to use :func:`create_connection` "
"instead of ``socket(socket.AF_INET, ...)`` may be all that's required to "
"make your code work with IPv6."
msgstr ""
"Новая функция :func:`create_connection` принимает адрес и подключается к "
"нему, используя необязательное значение таймаута, возвращая подключенный "
"объект сокета. Эта функция также определяет тип адреса и подключается к "
"нему, используя IPv4 или IPv6 в зависимости от ситуации. Изменение вашего "
"кода для использования :func:`create_connection` вместо ``socket(socket."
"AF_INET, ...)`` может быть всем, что требуется для того, чтобы ваш код "
"работал с IPv6."

#: ../../whatsnew/2.6.rst:2374
msgid ""
"The base classes in the :mod:`SocketServer <socketserver>` module now "
"support calling a :meth:`~socketserver.BaseServer.handle_timeout` method "
"after a span of inactivity specified by the server's :attr:`~socketserver."
"BaseServer.timeout` attribute.  (Contributed by Michael Pomraning.)  The :"
"meth:`~socketserver.BaseServer.serve_forever` method now takes an optional "
"poll interval measured in seconds, controlling how often the server will "
"check for a shutdown request. (Contributed by Pedro Werneck and Jeffrey "
"Yasskin; :issue:`742598`, :issue:`1193577`.)"
msgstr ""
"Базовые классы в модуле :mod:`SocketServer <socketserver>` теперь "
"поддерживают вызов метода :meth:`~socketserver.BaseServer.handle_timeout` "
"после периода бездействия, указанного в :attr:`~socketserver.BaseServer."
"timeout сервера. `атрибут. (Размещено Майклом Помранингом.) Метод :meth:"
"`~socketserver.BaseServer.serve_forever` теперь использует дополнительный "
"интервал опроса, измеряемый в секундах, контролирующий, как часто сервер "
"будет проверять наличие запроса на завершение работы. (Предоставлено Педро "
"Вернеком и Джеффри Ясскином; :issue:`742598`, :issue:`1193577`.)"

#: ../../whatsnew/2.6.rst:2383
msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard Häring, has been updated "
"from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""
"Модуль :mod:`sqlite3`, поддерживаемый Герхардом Херингом, был обновлен с "
"версии 2.3.2 в Python 2.5 до версии 2.4.1."

#: ../../whatsnew/2.6.rst:2387
msgid ""
"The :mod:`struct` module now supports the C99 :c:expr:`_Bool` type, using "
"the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""
"Модуль :mod:`struct` теперь поддерживает тип C99 :c:expr:`_Bool`, используя "
"символ формата ``'?'``. (Предоставлено Дэвидом Ремалом.)"

#: ../../whatsnew/2.6.rst:2391
msgid ""
"The :class:`~subprocess.Popen` objects provided by the :mod:`subprocess` "
"module now have :meth:`~subprocess.Popen.terminate`, :meth:`~subprocess."
"Popen.kill`, and :meth:`~subprocess.Popen.send_signal` methods. On Windows, :"
"meth:`!send_signal` only supports the :py:const:`~signal.SIGTERM` signal, "
"and all these methods are aliases for the Win32 API function :c:func:`!"
"TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""
"Объекты :class:`~subprocess.Popen`, предоставляемые модулем :mod:"
"`subprocess`, теперь имеют :meth:`~subprocess.Popen.terminate`, :meth:"
"`~subprocess.Popen.kill` и :meth :`~subprocess.Popen.send_signal` методы. В "
"Windows :meth:`!send_signal` поддерживает только сигнал :py:const:`~signal."
"SIGTERM`, и все эти методы являются псевдонимами функции Win32 API :c:func:`!"
"TerminateProcess`. (Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:2398
msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object "
"containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include :attr:"
"`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest "
"difference between 1.0 and the next largest value representable), and "
"several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""
"Новая переменная в модуле :mod:`sys`, :attr:`float_info`, представляет собой "
"объект, содержащий информацию, полученную из файла :file:`float.h` о "
"поддержке платформой операций с плавающей запятой. Атрибуты этого объекта "
"включают :attr:`mant_dig` (количество цифр в мантиссе), :attr:`epsilon` "
"(наименьшая разница между 1,0 и следующим по величине представимым "
"значением) и некоторые другие. (Предоставлено Кристианом Хаймсом; :issue:"
"`1534`.)"

#: ../../whatsnew/2.6.rst:2406
msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether Python "
"writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this "
"variable is true, the compiled files are not written.  The variable is "
"initially set on start-up by supplying the :option:`-B` switch to the Python "
"interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment "
"variable before running the interpreter.  Python code can subsequently "
"change the value of this variable to control whether bytecode files are "
"written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""
"Другая новая переменная, :attr:`dont_write_bytecode`, контролирует, "
"записывает ли Python файлы :file:`.pyc` или :file:`.pyo` при импорте модуля. "
"Если эта переменная имеет значение true, скомпилированные файлы не "
"записываются. Первоначально эта переменная устанавливается при запуске путем "
"предоставления переключателя :option:`-B` интерпретатору Python или путем "
"установки переменной среды :envvar:`PYTHONDONTWRITEBYTECODE` перед запуском "
"интерпретатора. Код Python может впоследствии изменить значение этой "
"переменной, чтобы контролировать, записываются ли файлы байт-кода или нет. "
"(Сообщили Нил Норвиц и Георг Брандл.)"

#: ../../whatsnew/2.6.rst:2417
msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available as "
"``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python "
"was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. "
"These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""
"Информацию об аргументах командной строки, передаваемых интерпретатору "
"Python, можно получить, прочитав атрибуты именованного кортежа, доступные "
"как ``sys.flags``. Например, атрибут :attr:`verbose` имеет значение true, "
"если Python выполнялся в подробном режиме, :attr:`debug` имеет значение true "
"в режиме отладки и т. д. Все эти атрибуты доступны только для чтения. "
"(Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:2425
msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects "
"return correct results; third-party extensions may not, but can define a :"
"meth:`__sizeof__` method to return the object's size. (Contributed by Robert "
"Schuppenies; :issue:`2898`.)"
msgstr ""
"Новая функция :func:`getsizeof` принимает объект Python и возвращает объем "
"памяти, используемый объектом, измеряемый в байтах. Встроенные объекты "
"возвращают правильные результаты; сторонние расширения не могут этого "
"сделать, но могут определить метод :meth:`__sizeof__` для возврата размера "
"объекта. (Предоставлено Робертом Шуппенисом; :issue:`2898`.)"

#: ../../whatsnew/2.6.rst:2432
msgid ""
"It's now possible to determine the current profiler and tracer functions by "
"calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by "
"Georg Brandl; :issue:`1648`.)"
msgstr ""
"Теперь можно определить текущие функции профилировщика и трассировщика, "
"вызвав :func:`sys.getprofile` и :func:`sys.gettrace`. (Предоставлено Георгом "
"Брандлом; :issue:`1648`.)"

#: ../../whatsnew/2.6.rst:2436
msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already "
"supported.  The default format is GNU tar; specify the ``format`` parameter "
"to open a file using a different format::"
msgstr ""
"Модуль :mod:`tarfile` теперь поддерживает tar-файлы POSIX.1-2001 (pax) в "
"дополнение к уже поддерживаемым форматам tar POSIX.1-1988 (ustar) и GNU. "
"Формат по умолчанию — GNU tar; укажите параметр ``format``, чтобы открыть "
"файл в другом формате::"

#: ../../whatsnew/2.6.rst:2444
msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an "
"error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad characters "
"with their UTF-8 representation.  (Character conversions occur because the "
"PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""
"Новые параметры encoding и errors определяют кодировку и схему обработки "
"ошибок при преобразовании символов. ``'strict'``, ``'ignore'`` и "
"``'replace'`` — это три стандартных способа обработки ошибок Python; "
"``'utf-8'`` — это специальное значение, которое заменяет неправильные "
"символы их представлением UTF-8. (Преобразование символов происходит, "
"поскольку формат PAX поддерживает имена файлов в Юникоде, по умолчанию "
"используется кодировка UTF-8.)"

#: ../../whatsnew/2.6.rst:2452
msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a "
"function that can be used to exclude certain filenames from an archive. The "
"function must take a filename and return true if the file should be excluded "
"or false if it should be archived. The function is applied to both the name "
"initially passed to :meth:`add` and to the names of files in recursively "
"added directories."
msgstr ""
"Метод :meth:`TarFile.add` теперь принимает аргумент ``exclude``, который "
"представляет собой функцию, которую можно использовать для исключения "
"определенных имен файлов из архива. Функция должна принимать имя файла и "
"возвращать true, если файл следует исключить, или false, если его следует "
"заархивировать. Функция применяется как к имени, изначально переданному в :"
"meth:`add`, так и к именам файлов в рекурсивно добавленных каталогах."

#: ../../whatsnew/2.6.rst:2460
msgid "(All changes contributed by Lars Gustäbel)."
msgstr "(Все изменения внесены Ларсом Густебелем)."

#: ../../whatsnew/2.6.rst:2462
msgid ""
"An optional ``timeout`` parameter was added to the :class:`telnetlib.Telnet` "
"class constructor, specifying a timeout measured in seconds.  (Added by "
"Facundo Batista.)"
msgstr ""
"В конструктор класса :class:`telnetlib.Telnet` был добавлен необязательный "
"параметр ``timeout``, определяющий время ожидания, измеряемое в секундах. "
"(Добавлено Факундо Батистой.)"

#: ../../whatsnew/2.6.rst:2466
msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary "
"file it created when the file is closed.  This behaviour can now be changed "
"by passing ``delete=False`` to the constructor.  (Contributed by Damien "
"Miller; :issue:`1537850`.)"
msgstr ""
"Класс :class:`tempfile.NamedTemporaryFile` обычно удаляет созданный им "
"временный файл при его закрытии. Теперь это поведение можно изменить, "
"передав в конструктор ``delete=False``. (Предоставлено Дэмиеном Миллером; :"
"issue:`1537850`.)"

#: ../../whatsnew/2.6.rst:2471
msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file "
"but stores its data in memory until a maximum size is exceeded.  On reaching "
"that limit, the contents will be written to an on-disk temporary file.  "
"(Contributed by Dustin J. Mitchell.)"
msgstr ""
"Новый класс, :class:`SpooledTemporaryFile`, ведет себя как временный файл, "
"но сохраняет свои данные в памяти до тех пор, пока не будет превышен "
"максимальный размер. По достижении этого предела содержимое будет записано "
"во временный файл на диске. (Предоставлено Дастином Дж. Митчеллом.)"

#: ../../whatsnew/2.6.rst:2476
msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes "
"both work as context managers, so you can write ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :"
"issue:`2021`.)"
msgstr ""
"Классы :class:`NamedTemporaryFile` и :class:`SpooledTemporaryFile` работают "
"как менеджеры контекста, поэтому вы можете написать ``с помощью tempfile."
"NamedTemporaryFile() как tmp: ...``. (Предоставлено Александром "
"Белопольским; :issue:`2021`.)"

#: ../../whatsnew/2.6.rst:2481
msgid ""
"The :mod:`test.test_support <test.support>` module gained a number of "
"context managers useful for writing tests. :func:`~test.support.os_helper."
"EnvironmentVarGuard` is a context manager that temporarily changes "
"environment variables and automatically restores them to their old values."
msgstr ""
"Модуль :mod:`test.test_support <test.support>` получил ряд контекстных "
"менеджеров, полезных для написания тестов. :func:`~test.support.os_helper."
"EnvironmentVarGuard` — это контекстный менеджер, который временно изменяет "
"переменные среды и автоматически восстанавливает их старые значения."

#: ../../whatsnew/2.6.rst:2487
msgid ""
"Another context manager, :class:`TransientResource`, can surround calls to "
"resources that may or may not be available; it will catch and ignore a "
"specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""
"Другой менеджер контекста, :class:`TransientResource`, может окружать вызовы "
"ресурсов, которые могут быть или не быть доступны; он будет перехватывать и "
"игнорировать указанный список исключений. Например, сетевой тест может "
"игнорировать определенные сбои при подключении к внешнему веб-сайту:"

#: ../../whatsnew/2.6.rst:2498
msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's warning "
"filters and returns an object that will record all warning messages "
"triggered (:issue:`3781`)::"
msgstr ""
"Наконец, :func:`check_warnings` сбрасывает фильтры предупреждений модуля :"
"mod:`warning` и возвращает объект, который будет записывать все сработавшие "
"предупреждающие сообщения (:issue:`3781`)::"

#: ../../whatsnew/2.6.rst:2508
msgid "(Contributed by Brett Cannon.)"
msgstr "(Предоставлено Бреттом Кэнноном.)"

#: ../../whatsnew/2.6.rst:2510
msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""
"Модуль :mod:`textwrap` теперь может сохранять существующие пробелы в начале "
"и конце вновь созданных строк, указав ``drop_whitespace=False`` в качестве "
"аргумента::"

#: ../../whatsnew/2.6.rst:2529
msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr "(Предоставлено Дуэйном Бэйли; :issue:`1581073`.)"

#: ../../whatsnew/2.6.rst:2531
msgid ""
"The :mod:`threading` module API is being changed to use properties such as :"
"attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and "
"some methods have been renamed to use underscores instead of camel-case; for "
"example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  "
"Both the 2.6 and 3.0 versions of the module support the same properties and "
"renamed methods, but don't remove the old methods.  No date has been set for "
"the deprecation of the old APIs in Python 3.x; the old APIs won't be removed "
"in any 2.x version. (Carried out by several people, most notably Benjamin "
"Peterson.)"
msgstr ""
"API модуля :mod:`threading` будет изменен для использования таких свойств, "
"как :attr:`daemon` вместо методов :meth:`setDaemon` и :meth:`isDaemon`, а "
"некоторые методы были переименованы для использования вместо них символов "
"подчеркивания. из верблюжьего футляра; например, метод :meth:`activeCount` "
"переименован в :meth:`active_count`. Версии модуля 2.6 и 3.0 поддерживают "
"одни и те же свойства и переименованные методы, но не удаляют старые методы. "
"Дата прекращения поддержки старых API в Python 3.x не установлена; старые "
"API не будут удалены ни в одной версии 2.x. (Осуществлено несколькими "
"людьми, в первую очередь Бенджамином Петерсоном.)"

#: ../../whatsnew/2.6.rst:2542
msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an :attr:"
"`ident` property that returns the thread's identifier, a nonzero integer.  "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""
"Объекты :class:`Thread` модуля :mod:`threading` получили свойство :attr:"
"`ident`, которое возвращает идентификатор потока, ненулевое целое число. "
"(Предоставлено Грегори П. Смитом; :issue:`2871`.)"

#: ../../whatsnew/2.6.rst:2547
msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the "
"statement being timed and for the setup code. Two convenience functions were "
"added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, "
"repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an "
"instance and call the corresponding method. (Contributed by Erik Demaine; :"
"issue:`1533909`.)"
msgstr ""
"Модуль :mod:`timeit` теперь принимает вызываемые объекты, а также строки для "
"синхронизируемого оператора и кода настройки. Для создания экземпляров :"
"class:`Timer` были добавлены две удобные функции: ``repeat(stmt, setup, "
"time, повтор, число)`` и ``timeit(stmt, setup, time, Number)`` создают "
"экземпляр и вызовите соответствующий метод. (Предоставлено Эриком Демейном; :"
"issue:`1533909`.)"

#: ../../whatsnew/2.6.rst:2556
msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to Tcl/"
"Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""
"Модуль :mod:`Tkinter` теперь принимает списки и кортежи для параметров, "
"разделяя элементы пробелами перед передачей полученного значения в Tcl/Tk. "
"(Предоставлено Гильерме Поло; :issue:`2906`.)"

#: ../../whatsnew/2.6.rst:2561
msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor "
"Lingl.  New features in the module include:"
msgstr ""
"Модуль :mod:`turtle` для графики черепах был значительно улучшен Грегором "
"Линглом. Новые возможности модуля включают в себя:"

#: ../../whatsnew/2.6.rst:2564
msgid "Better animation of turtle movement and rotation."
msgstr "Улучшена анимация движения и вращения черепахи."

#: ../../whatsnew/2.6.rst:2565
msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, "
"and :meth:`speed` methods."
msgstr ""
"Контролируйте движение черепахи с помощью новых методов :meth:`delay`, :meth:"
"`tracer` и :meth:`speed`."

#: ../../whatsnew/2.6.rst:2567
msgid ""
"The ability to set new shapes for the turtle, and to define a new coordinate "
"system."
msgstr ""
"Возможность задавать черепахе новые формы и определять новую систему "
"координат."

#: ../../whatsnew/2.6.rst:2569
msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr ""

#: ../../whatsnew/2.6.rst:2570
msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr ""
"Простая поддержка реагирования на события ввода, такие как действия мыши и "
"клавиатуры, что позволяет писать простые игры."

#: ../../whatsnew/2.6.rst:2572
msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting appearance "
"of the turtle's screen."
msgstr ""
"Файл :file:`turtle.cfg` можно использовать для настройки начального внешнего "
"вида экрана черепахи."

#: ../../whatsnew/2.6.rst:2574
msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr ""
"Строки документации модуля могут быть заменены новыми строками документации, "
"переведенными на другой язык."

#: ../../whatsnew/2.6.rst:2577
msgid "(:issue:`1513695`)"
msgstr "(:issue:`1513695`)"

#: ../../whatsnew/2.6.rst:2579
msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen "
"<urllib.request.urlopen>` function and the :class:`urllib.ftpwrapper` class "
"constructor, as well as the :func:`urllib2.urlopen <urllib.request.urlopen>` "
"function.  The parameter specifies a timeout measured in seconds.   For "
"example::"
msgstr ""
"Необязательный параметр ``timeout`` был добавлен в функцию :func:`urllib."
"urlopen <urllib.request.urlopen>` и конструктор класса :class:`urllib."
"ftpwrapper`, а также в :func:`urllib2. .urlopen <urllib.request.urlopen>` "
"функция. Параметр указывает время ожидания, измеряемое в секундах. Например::"

#: ../../whatsnew/2.6.rst:2592
msgid "(Added by Facundo Batista.)"
msgstr "(Добавлено Факундо Батистой.)"

#: ../../whatsnew/2.6.rst:2594
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von Löwis; :issue:`3811`.)"
msgstr ""
"База данных Unicode, предоставляемая модулем :mod:`unicodedata`, обновлена ​​"
"до версии 5.1.0. (Обновлено Мартином фон Лёвисом; :issue:`3811`.)"

#: ../../whatsnew/2.6.rst:2598
msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` "
"gained an optional *line* argument that can be used to supply the line of "
"source code.  (Added as part of :issue:`1631171`, which re-implemented part "
"of the :mod:`warnings` module in C code.)"
msgstr ""
"Модули :mod:`warnings` :func:`formatwarning` и :func:`showwarning` получили "
"дополнительный аргумент *line*, который можно использовать для "
"предоставления строки исходного кода. (Добавлено как часть :issue:`1631171`, "
"который перереализовал часть модуля :mod:`warnings` в коде C.)"

#: ../../whatsnew/2.6.rst:2603
msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for "
"testing purposes that lets you temporarily modify the warning filters and "
"then restore their original values (:issue:`3781`)."
msgstr ""
"Новая функция :func:`catch_warnings` представляет собой контекстный "
"менеджер, предназначенный для целей тестирования и позволяющий временно "
"изменять фильтры предупреждений, а затем восстанавливать их исходные "
"значения (:issue:`3781`)."

#: ../../whatsnew/2.6.rst:2607
msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer <xmlrpc.server>` and :class:"
"`DocXMLRPCServer <xmlrpc.server>` classes can now be prevented from "
"immediately opening and binding to their socket by passing ``False`` as the "
"*bind_and_activate* constructor parameter.  This can be used to modify the "
"instance's :attr:`allow_reuse_address` attribute before calling the :meth:"
"`server_bind` and :meth:`server_activate` methods to open the socket and "
"begin listening for connections. (Contributed by Peter Parente; :issue:"
"`1599845`.)"
msgstr ""
"Классы XML-RPC :class:`SimpleXMLRPCServer <xmlrpc.server>` и :class:"
"`DocXMLRPCServer <xmlrpc.server>` теперь можно запретить немедленному "
"открытию и привязке к их сокету, передав ``False`` в качестве * Параметр "
"конструктора связывания_and_activate*. Это можно использовать для изменения "
"атрибута :attr:`allow_reuse_address` экземпляра перед вызовом методов :meth:"
"`server_bind` и :meth:`server_activate` для открытия сокета и начала "
"прослушивания соединений. (Предоставлено Питером Паренте; :issue:`1599845`.)"

#: ../../whatsnew/2.6.rst:2616
msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as "
"HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers because "
"the tracebacks might reveal passwords or other sensitive information.  "
"(Contributed by Alan McIntyre as part of his project for Google's Summer of "
"Code 2007.)"
msgstr ""
":class:`SimpleXMLRPCServer` также имеет атрибут :attr:"
"`_send_traceback_header`; если это правда, исключение и форматированная "
"обратная трассировка возвращаются как заголовки HTTP «X-Exception» и «X-"
"Traceback». Эта функция предназначена только для целей отладки и не должна "
"использоваться на рабочих серверах, поскольку обратные трассировки могут "
"выявить пароли или другую конфиденциальную информацию. (Предоставлено Аланом "
"Макинтайром в рамках его проекта Google Summer of Code 2007.)"

#: ../../whatsnew/2.6.rst:2624
msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module no longer automatically "
"converts :class:`datetime.date` and :class:`datetime.time` to the :class:"
"`xmlrpclib.DateTime <xmlrpc.client.DateTime>` type; the conversion semantics "
"were not necessarily correct for all applications.  Code using :mod:`!"
"xmlrpclib` should convert :class:`date` and :class:`~datetime.time` "
"instances. (:issue:`1330538`)  The code can also handle dates before 1900 "
"(contributed by Ralf Schmitt; :issue:`2014`) and 64-bit integers represented "
"by using ``<i8>`` in XML-RPC responses (contributed by Riku Lindblad; :issue:"
"`2985`)."
msgstr ""
"Модуль :mod:`xmlrpclib <xmlrpc.client>` больше не преобразует автоматически :"
"class:`datetime.date` и :class:`datetime.time` в :class:`xmlrpclib.DateTime "
"<xmlrpc.client.DateTime> ` тип; семантика преобразования не обязательно была "
"правильной для всех приложений. Код, использующий :mod:`!xmlrpclib`, должен "
"конвертировать экземпляры :class:`date` и :class:`~datetime.time`. (:issue:"
"`1330538`) Код также может обрабатывать даты до 1900 года (предоставлены "
"Ральфом Шмиттом; :issue:`2014`) и 64-битные целые числа, представленные с "
"помощью ``<i8>`` в ответах XML-RPC (:issue:`1330538`) предоставлен Рику "
"Линдбладом :issue:`2985`)."

#: ../../whatsnew/2.6.rst:2634
msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` "
"and :meth:`extractall` methods that will unpack a single file or all the "
"files in the archive to the current directory, or to a specified directory::"
msgstr ""
"Класс :class:`ZipFile` модуля :mod:`zipfile` теперь имеет методы :meth:"
"`extract` и :meth:`extractall`, которые распакуют один файл или все файлы в "
"архиве в текущий каталог или в указанный каталог::"

#: ../../whatsnew/2.6.rst:2648
msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr "(Предоставлено Аланом Макинтайром; :issue:`467924`.)"

#: ../../whatsnew/2.6.rst:2650
msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by Graham "
"Horler; :issue:`1775025`.)"
msgstr ""
"Методы :meth:`open`, :meth:`read` и :meth:`extract` теперь могут принимать "
"либо имя файла, либо объект :class:`ZipInfo`. Это полезно, когда архив "
"случайно содержит дублированное имя файла. (Предоставлено Грэмом Хорлером; :"
"issue:`1775025`.)"

#: ../../whatsnew/2.6.rst:2655
msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived "
"files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""
"Наконец, :mod:`zipfile` теперь поддерживает использование имен файлов в "
"Юникоде для архивных файлов. (Разместил Алексей Борзенков; :issue:`1734346`.)"

#: ../../whatsnew/2.6.rst:2662
msgid "The :mod:`ast` module"
msgstr "Модуль :mod:`ast`"

#: ../../whatsnew/2.6.rst:2664
msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions that "
"perform a variety of common tasks.  These will be useful for HTML templating "
"packages, code analyzers, and similar tools that process Python code."
msgstr ""
"Модуль :mod:`ast` предоставляет представление кода Python в виде "
"абстрактного синтаксического дерева, а Армин Ронахер предоставил набор "
"вспомогательных функций, которые выполняют множество общих задач. Они будут "
"полезны для пакетов шаблонов HTML, анализаторов кода и подобных "
"инструментов, обрабатывающих код Python."

#: ../../whatsnew/2.6.rst:2671
msgid ""
"The :func:`parse` function takes an expression and returns an AST. The :func:"
"`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ""
"Функция :func:`parse` принимает выражение и возвращает AST. Функция :func:"
"`dump` выводит представление дерева, подходящее для отладки::"

#: ../../whatsnew/2.6.rst:2685
msgid "This outputs a deeply nested tree::"
msgstr "Это выводит глубоко вложенное дерево::"

#: ../../whatsnew/2.6.rst:2718
msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only strings, "
"numbers, dictionaries, etc. but no statements or function calls.  If you "
"need to evaluate an expression but cannot accept the security risk of using "
"an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""
"Метод :func:`literal_eval` принимает строку или AST, представляющий "
"буквальное выражение, анализирует и оценивает ее и возвращает результирующее "
"значение. Литеральное выражение — это выражение Python, содержащее только "
"строки, числа, словари и т. д., но не содержащие операторов или вызовов "
"функций. Если вам нужно вычислить выражение, но вы не можете принять риск "
"безопасности, связанный с использованием вызова :func:`eval`, :func:"
"`literal_eval` обработает его безопасно::"

#: ../../whatsnew/2.6.rst:2734
msgid ""
"The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` "
"classes for traversing and modifying an AST, and functions for common "
"transformations such as changing line numbers."
msgstr ""
"Модуль также включает классы :class:`NodeVisitor` и :class:`NodeTransformer` "
"для перемещения и изменения AST, а также функции для общих преобразований, "
"таких как изменение номеров строк."

#: ../../whatsnew/2.6.rst:2742
msgid "The :mod:`future_builtins` module"
msgstr "Модуль :mod:`future_builtins`"

#: ../../whatsnew/2.6.rst:2744
msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, and "
"most of the changes can't be introduced in the Python 2.x series because "
"they would break compatibility. The :mod:`future_builtins` module provides "
"versions of these built-in functions that can be imported when writing 3.0-"
"compatible code."
msgstr ""
"Python 3.0 вносит множество изменений в репертуар встроенных функций, и "
"большинство изменений не могут быть представлены в серии Python 2.x, "
"поскольку они нарушат совместимость. Модуль :mod:`future_builtins` "
"предоставляет версии этих встроенных функций, которые можно импортировать "
"при написании кода, совместимого с 3.0."

#: ../../whatsnew/2.6.rst:2751
msgid "The functions in this module currently include:"
msgstr "В настоящее время функции этого модуля включают в себя:"

#: ../../whatsnew/2.6.rst:2753
msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure ASCII "
"bytestring."
msgstr ""
"``ascii(obj)``: эквивалент :func:`repr`. В Python 3.0 :func:`repr` вернет "
"строку Unicode, а :func:`ascii` вернет чистую байтовую строку ASCII."

#: ../../whatsnew/2.6.rst:2757
msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: версии 3.0 "
"возвращают итераторы, в отличие от встроенных функций 2.x, которые "
"возвращают списки."

#: ../../whatsnew/2.6.rst:2761
msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :"
"meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will use "
"the new ``0o`` notation for its result."
msgstr ""
"``hex(value)``, ``oct(value)``: вместо вызова методов :meth:`__hex__` или :"
"meth:`__oct__`, эти версии будут вызывать метод :meth:`__index__` и "
"преобразовать результат в шестнадцатеричный или восьмеричный. :func:`oct` "
"будет использовать новую нотацию ``0o`` для своего результата."

#: ../../whatsnew/2.6.rst:2770
msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr "Модуль :mod:`json`: Нотация объектов JavaScript"

#: ../../whatsnew/2.6.rst:2772
msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""
"Новый модуль :mod:`json` поддерживает кодирование и декодирование типов "
"Python в формате JSON (нотация объектов Javascript). JSON — это облегченный "
"формат обмена, часто используемый в веб-приложениях. Дополнительную "
"информацию о JSON см. на сайте http://www.json.org."

#: ../../whatsnew/2.6.rst:2777
msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ""
":mod:`json` поддерживает декодирование и кодирование большинства встроенных "
"типов Python. В следующем примере кодируется и декодируется словарь::"

#: ../../whatsnew/2.6.rst:2788
msgid ""
"It's also possible to write your own decoders and encoders to support more "
"types. Pretty-printing of the JSON strings is also supported."
msgstr ""
"Также можно написать свои собственные декодеры и кодеры для поддержки "
"большего количества типов. Также поддерживается красивая печать строк JSON."

#: ../../whatsnew/2.6.rst:2791
msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ""
":mod:`json` (первоначально называвшийся simplejson) был написан Бобом "
"Ипполито."

#: ../../whatsnew/2.6.rst:2798
msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr "Модуль :mod:`plistlib`: анализатор списка свойств."

#: ../../whatsnew/2.6.rst:2800
msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data types "
"(numbers, strings, lists, and dictionaries) by serializing them into an XML-"
"based format. It resembles the XML-RPC serialization of data types."
msgstr ""
"Формат .plist обычно используется в Mac OS X для хранения основных типов "
"данных (числа, строки, списки и словари) путем их сериализации в формат на "
"основе XML. Это похоже на сериализацию типов данных XML-RPC."

#: ../../whatsnew/2.6.rst:2805
msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform that "
"Python supports, so the :mod:`plistlib` module has been promoted to the "
"standard library."
msgstr ""
"Несмотря на то, что этот формат в основном используется в Mac OS X, он не "
"имеет ничего специфичного для Mac, и реализация Python работает на любой "
"платформе, которую поддерживает Python, поэтому модуль :mod:`plistlib` был "
"переведен в стандартную библиотеку."

#: ../../whatsnew/2.6.rst:2810
msgid "Using the module is simple::"
msgstr "Использовать модуль просто::"

#: ../../whatsnew/2.6.rst:2837
msgid "ctypes Enhancements"
msgstr "Усовершенствования ctypes"

#: ../../whatsnew/2.6.rst:2839
msgid ""
"Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr "Томас Хеллер продолжал поддерживать и улучшать модуль :mod:`ctypes`."

#: ../../whatsnew/2.6.rst:2842
msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the "
"C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""
":mod:`ctypes` теперь поддерживает тип данных :class:`c_bool`, который "
"представляет тип C99 ``bool``. (Предоставлено Дэвидом Ремалом; :issue:"
"`1649190`.)"

#: ../../whatsnew/2.6.rst:2846
msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support for "
"extended slicing syntax, where various combinations of ``(start, stop, "
"step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""
"Типы строк, буферов и массивов :mod:`ctypes` имеют улучшенную поддержку "
"расширенного синтаксиса срезов, в котором предоставляются различные "
"комбинации ``(start, stop, step)``. (Реализовано Томасом Воутерсом.)"

#: ../../whatsnew/2.6.rst:2853
msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:"
"`from_buffer_copy` methods that create a ctypes instance based on a provided "
"buffer object.  :meth:`from_buffer_copy` copies the contents of the object, "
"while :meth:`from_buffer` will share the same memory area."
msgstr ""
"Все типы данных :mod:`ctypes` теперь поддерживают методы :meth:`from_buffer` "
"и :meth:`from_buffer_copy`, которые создают экземпляр ctypes на основе "
"предоставленного буферного объекта. :meth:`from_buffer_copy` копирует "
"содержимое объекта, а :meth:`from_buffer` будет использовать ту же область "
"памяти."

#: ../../whatsnew/2.6.rst:2860
msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 "
"LastError variables at the outset of each wrapped call. (Implemented by "
"Thomas Heller; :issue:`1798`.)"
msgstr ""
"Новое соглашение о вызовах предписывает :mod:`ctypes` очищать переменные "
"``errno`` или Win32 LastError в начале каждого обернутого вызова. "
"(Реализовано Томасом Хеллером; :issue:`1798`.)"

#: ../../whatsnew/2.6.rst:2864
msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-level "
"methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the "
"error value."
msgstr ""
"Теперь вы можете получить переменную Unix ``errno`` после вызова функции. "
"При создании обернутой функции вы можете указать ``use_errno=True`` в "
"качестве параметра ключевого слова для функции :func:`DLL`, а затем вызвать "
"методы уровня модуля :meth:`set_errno` и :meth:`get_errno` для установки и "
"получения значения ошибки."

#: ../../whatsnew/2.6.rst:2870
msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, :"
"func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""
"Переменная Win32 LastError аналогичным образом поддерживается функциями :"
"func:`DLL`, :func:`OleDLL` и :func:`WinDLL`. Вы указываете "
"``use_last_error=True`` в качестве параметра ключевого слова, а затем "
"вызываете методы уровня модуля :meth:`set_last_error` и :meth:"
"`get_last_error`."

#: ../../whatsnew/2.6.rst:2876
msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes instance, "
"now has an optional *offset* parameter that is a byte count that will be "
"added to the returned pointer."
msgstr ""
"Функция :func:`byref`, используемая для получения указателя на экземпляр "
"ctypes, теперь имеет необязательный параметр *offset*, который представляет "
"собой количество байтов, которое будет добавлено к возвращаемому указателю."

#: ../../whatsnew/2.6.rst:2883
msgid "Improved SSL Support"
msgstr "Улучшена поддержка SSL"

#: ../../whatsnew/2.6.rst:2885
msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop "
"the `OpenSSL <https://www.openssl.org/>`__ library. This new module provides "
"more control over the protocol negotiated, the X.509 certificates used, and "
"has better support for writing SSL servers (as opposed to clients) in "
"Python.  The existing SSL support in the :mod:`socket` module hasn't been "
"removed and continues to work, though it will be removed in Python 3.0."
msgstr ""
"Билл Янссен значительно улучшил поддержку уровня защищенных сокетов в Python "
"2.6, добавив новый модуль :mod:`ssl`, построенный на основе библиотеки "
"`OpenSSL <https://www.openssl.org/>`__. . Этот новый модуль обеспечивает "
"больший контроль над согласованным протоколом, используемыми сертификатами "
"X.509 и улучшенную поддержку написания SSL-серверов (в отличие от клиентов) "
"на Python. Существующая поддержка SSL в модуле :mod:`socket` не была удалена "
"и продолжает работать, хотя она будет удалена в Python 3.0."

#: ../../whatsnew/2.6.rst:2894
msgid ""
"To use the new module, you must first create a TCP connection in the usual "
"way and then pass it to the :func:`ssl.wrap_socket` function. It's possible "
"to specify whether a certificate is required, and to obtain certificate info "
"by calling the :meth:`getpeercert` method."
msgstr ""
"Чтобы использовать новый модуль, необходимо сначала создать TCP-соединение "
"обычным способом, а затем передать его функции :func:`ssl.wrap_socket`. "
"Можно указать, требуется ли сертификат, и получить информацию о сертификате, "
"вызвав метод :meth:`getpeercert`."

#: ../../whatsnew/2.6.rst:2901
msgid "The documentation for the :mod:`ssl` module."
msgstr "Документация для модуля :mod:`ssl`."

#: ../../whatsnew/2.6.rst:2906
msgid "Deprecations and Removals"
msgstr "Амортизация и удаление"

#: ../../whatsnew/2.6.rst:2908 ../../whatsnew/2.6.rst:3263
msgid ""
"String exceptions have been removed.  Attempting to use them raises a :exc:"
"`TypeError`."
msgstr ""
"Исключения строк были удалены. Попытка их использования вызывает ошибку :exc:"
"`TypeError`."

#: ../../whatsnew/2.6.rst:2911
msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`!message` attribute is being "
"deprecated in favor of the :attr:`~BaseException.args` attribute."
msgstr ""
"Изменения в интерфейсе :class:`Exception`, продиктованные :pep:`352`, "
"продолжают вноситься. В версии 2.6 атрибут :attr:`!message` устарел в пользу "
"атрибута :attr:`~BaseException.args`."

#: ../../whatsnew/2.6.rst:2916
msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library "
"that will drop many outdated modules and rename others. Python 2.6 running "
"in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""
"(режим предупреждения 3.0) Python 3.0 будет содержать реорганизованную "
"стандартную библиотеку, в которой будут удалены многие устаревшие модули и "
"переименованы другие. Python 2.6, работающий в режиме предупреждения 3.0, "
"будет предупреждать об этих модулях при их импорте."

#: ../../whatsnew/2.6.rst:2921
msgid ""
"The list of deprecated modules is: :mod:`!audiodev`, :mod:`!bgenlocations`, :"
"mod:`!buildtools`, :mod:`!bundlebuilder`, :mod:`!Canvas`, :mod:`!compiler`, :"
"mod:`!dircache`, :mod:`!dl`, :mod:`!fpformat`, :mod:`!gensuitemodule`, :mod:"
"`!ihooks`, :mod:`!imageop`, :mod:`!imgfile`, :mod:`!linuxaudiodev`, :mod:`!"
"mhlib`, :mod:`!mimetools`, :mod:`!multifile`, :mod:`!new`, :mod:`!pure`, :"
"mod:`!statvfs`, :mod:`!sunaudiodev`, :mod:`!test.testall`, and :mod:`!"
"toaiff`."
msgstr ""
"Список устаревших модулей: :mod:`!audiodev`, :mod:`!bgenlocations`, :mod:`!"
"buildtools`, :mod:`!bundlebuilder`, :mod:`!Canvas`, :mod: `!compiler`, :mod:"
"`!dircache`, :mod:`!dl`, :mod:`!fpformat`, :mod:`!gensuitemodule`, :mod:`!"
"ihooks`, :mod:`! imageop`, :mod:`!imgfile`, :mod:`!linuxaudiodev`, :mod:`!"
"mhlib`, :mod:`!mimetools`, :mod:`!multifile`, :mod:`!new` , :mod:`!pure`, :"
"mod:`!statvfs`, :mod:`!sunaudiodev`, :mod:`!test.testall` и :mod:`!toaiff`."

#: ../../whatsnew/2.6.rst:2946
msgid "The :mod:`!gopherlib` module has been removed."
msgstr "Модуль :mod:`!gopherlib` был удален."

#: ../../whatsnew/2.6.rst:2948
msgid ""
"The :mod:`!MimeWriter` module and :mod:`!mimify` module have been "
"deprecated; use the :mod:`email` package instead."
msgstr ""
"Модуль :mod:`!MimeWriter` и модуль :mod:`!mimify` устарели; вместо этого "
"используйте пакет :mod:`email`."

#: ../../whatsnew/2.6.rst:2952
msgid ""
"The :mod:`!md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
"Модуль :mod:`!md5` устарел; вместо этого используйте модуль :mod:`hashlib`."

#: ../../whatsnew/2.6.rst:2955
msgid ""
"The :mod:`!posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ""
"Модуль :mod:`!posixfile` устарел; :func:`fcntl.lockf` обеспечивает лучшую "
"блокировку."

#: ../../whatsnew/2.6.rst:2958
msgid ""
"The :mod:`!popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr "Модуль :mod:`!popen2` устарел; используйте модуль :mod:`subprocess`."

#: ../../whatsnew/2.6.rst:2961
msgid "The :mod:`!rgbimg` module has been removed."
msgstr "Модуль :mod:`!rgbimg` был удален."

#: ../../whatsnew/2.6.rst:2963
msgid ""
"The :mod:`!sets` module has been deprecated; it's better to use the built-"
"in :class:`set` and :class:`frozenset` types."
msgstr ""
"Модуль :mod:`!sets` устарел; лучше использовать встроенные типы :class:`set` "
"и :class:`frozenset`."

#: ../../whatsnew/2.6.rst:2966
msgid ""
"The :mod:`!sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
"Модуль :mod:`!sha` устарел; вместо этого используйте модуль :mod:`hashlib`."

#: ../../whatsnew/2.6.rst:2974
msgid "Build and C API Changes"
msgstr "Изменения API сборки и C"

#: ../../whatsnew/2.6.rst:2976
msgid "Changes to Python's build process and to the C API include:"
msgstr "Изменения в процессе сборки Python и C API включают в себя:"

#: ../../whatsnew/2.6.rst:2978
msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of :c:"
"func:`!memmove` and :c:func:`!strerror`, which are in the C89 standard "
"library."
msgstr ""
"Теперь Python необходимо компилировать с помощью компиляторов C89 (спустя 19 "
"лет!). Это означает, что дерево исходного кода Python удалило свои "
"собственные реализации :c:func:`!memmove` и :c:func:`!strerror`, которые "
"находятся в стандартной библиотеке C89."

#: ../../whatsnew/2.6.rst:2983
msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and "
"this is the new default compiler.  See the :file:`PCbuild` directory for the "
"build files.  (Implemented by Christian Heimes.)"
msgstr ""
"Python 2.6 можно собрать с помощью Microsoft Visual Studio 2008 (версия "
"9.0), и это новый компилятор по умолчанию. Файлы сборки см. в каталоге :file:"
"`PCbuild`. (Реализовано Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:2988
msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :"
"program:`configure` script can take a :option:`!--with-universal-archs=[32-"
"bit|64-bit|all]` switch, controlling whether the binaries are built for 32-"
"bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. "
"(Contributed by Ronald Oussoren.)"
msgstr ""
"В Mac OS X Python 2.6 можно скомпилировать как четырехстороннюю "
"универсальную сборку. Скрипт :program:`configure` может принимать :option:"
"`!--with-universal-archs=[32-bit |64-разрядная| all]`, определяющий, будут "
"ли двоичные файлы созданы для 32-битной архитектуры (x86, PowerPC), 64-"
"битной (x86-64 и PPC-64) или для обеих. (Предоставлено Рональдом Уссореном.)"

#: ../../whatsnew/2.6.rst:2995
msgid ""
"A new function added in Python 2.6.6, :c:func:`!PySys_SetArgvEx`, sets the "
"value of ``sys.argv`` and can optionally update ``sys.path`` to include the "
"directory containing the script named by ``sys.argv[0]`` depending on the "
"value of an *updatepath* parameter."
msgstr ""
"Новая функция, добавленная в Python 2.6.6, :c:func:`!PySys_SetArgvEx`, "
"устанавливает значение ``sys.argv`` и может опционально обновить ``sys."
"path``, чтобы включить каталог, содержащий скрипт с именем с помощью ``sys."
"argv[0]`` в зависимости от значения параметра *updatepath*."

#: ../../whatsnew/2.6.rst:3000
msgid ""
"This function was added to close a security hole for applications that embed "
"Python.  The old function, :c:func:`!PySys_SetArgv`, would always update "
"``sys.path``, and sometimes it would add the current directory.  This meant "
"that, if you ran an application embedding Python in a directory controlled "
"by someone else, attackers could put a Trojan-horse module in the directory "
"(say, a file named :file:`os.py`) that your application would then import "
"and run."
msgstr ""
"Эта функция была добавлена, чтобы закрыть дыру в безопасности для "
"приложений, встраивающих Python. Старая функция :c:func:`!PySys_SetArgv` "
"всегда обновляла ``sys.path``, а иногда добавляла текущий каталог. Это "
"означало, что если вы запустили приложение, встраивающее Python, в каталог, "
"контролируемый кем-то другим, злоумышленники могли поместить в каталог "
"модуль «троянского коня» (скажем, файл с именем :file:`os.py`), который "
"затем будет использовать ваше приложение. импортируйте и запустите."

#: ../../whatsnew/2.6.rst:3008
msgid ""
"If you maintain a C/C++ application that embeds Python, check whether you're "
"calling :c:func:`!PySys_SetArgv` and carefully consider whether the "
"application should be using :c:func:`!PySys_SetArgvEx` with *updatepath* set "
"to false.  Note that using this function will break compatibility with "
"Python versions 2.6.5 and earlier; if you have to continue working with "
"earlier versions, you can leave the call to :c:func:`!PySys_SetArgv` alone "
"and call ``PyRun_SimpleString(\"sys.path.pop(0)\\n\")`` afterwards to "
"discard the first ``sys.path`` component."
msgstr ""
"Если вы поддерживаете приложение C/C++ со встроенным Python, проверьте, "
"вызываете ли вы :c:func:`!PySys_SetArgv`, и внимательно подумайте, должно ли "
"приложение использовать :c:func:`!PySys_SetArgvEx` с установленным "
"*updatepath* к ложному. Обратите внимание, что использование этой функции "
"нарушит совместимость с версиями Python 2.6.5 и более ранними; если вам "
"нужно продолжить работу с более ранними версиями, вы можете оставить вызов :"
"c:func:`!PySys_SetArgv` в покое и потом вызвать ``PyRun_SimpleString(\"sys."
"path.pop(0)\\n\")``, чтобы отбросить его. первый компонент ``sys.path``."

#: ../../whatsnew/2.6.rst:3018
msgid ""
"Security issue reported as `CVE-2008-5983 <http://cve.mitre.org/cgi-bin/"
"cvename.cgi?name=CVE-2008-5983>`_; discussed in :gh:`50003`, and fixed by "
"Antoine Pitrou."
msgstr ""

#: ../../whatsnew/2.6.rst:3022
msgid ""
"The BerkeleyDB module now has a C API object, available as ``bsddb.db."
"api``.   This object can be used by other C extensions that wish to use the :"
"mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""
"Модуль BerkeleyDB теперь имеет объект C API, доступный как ``bsddb.db.api``. "
"Этот объект может использоваться другими расширениями C, которые хотят "
"использовать модуль :mod:`bsddb` в своих целях. (Предоставлено Дунканом "
"Грисби.)"

#: ../../whatsnew/2.6.rst:3027
msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer` "
"and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""
"Новый интерфейс буфера, ранее описанный в `разделе PEP 3118 <#pep-3118-"
"revised-buffer-protocol>`__, добавляет :c:func:` PyObj также ect_GetBuffer` "
"и :c:func:`PyBuffer_Release`. как и некоторые другие функции."

#: ../../whatsnew/2.6.rst:3032
msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was reading "
"from or writing to the object.  In 2.6 file objects have a reference count, "
"manipulated by the :c:func:`!PyFile_IncUseCount` and :c:func:`!"
"PyFile_DecUseCount` functions.  File objects can't be closed unless the "
"reference count is zero.  :c:func:`!PyFile_IncUseCount` should be called "
"while the GIL is still held, before carrying out an I/O operation using the "
"``FILE *`` pointer, and :c:func:`!PyFile_DecUseCount` should be called "
"immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"
msgstr ""
"Использование Python библиотеки C stdio теперь является потокобезопасным "
"или, по крайней мере, таким же потокобезопасным, как и базовая библиотека. "
"Давняя потенциальная ошибка возникала, если один поток закрывал файловый "
"объект, в то время как другой поток читал или записывал объект. В файловых "
"объектах версии 2.6 имеется счетчик ссылок, которым управляют функции :c:"
"func:`!PyFile_IncUseCount` и :c:func:`!PyFile_DecUseCount`. Файловые объекты "
"не могут быть закрыты, если счетчик ссылок не равен нулю. :c:func:`!"
"PyFile_IncUseCount` следует вызывать, пока GIL все еще удерживается, перед "
"выполнением операции ввода-вывода с использованием указателя ``FILE *``, и "
"следует вызывать :c:func:`!PyFile_DecUseCount` сразу после повторного "
"получения GIL. (Сообщили Антуан Питру и Грегори П. Смит.)"

#: ../../whatsnew/2.6.rst:3045
msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :c:"
"func:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys."
"modules`` first, then try to import it after acquiring an import lock.  If "
"the import lock is held by another thread, an :exc:`ImportError` is raised. "
"(Contributed by Christian Heimes.)"
msgstr ""
"Импорт модулей одновременно в двух разных потоках больше не приводит к "
"взаимоблокировкам; теперь он выдаст :exc:`ImportError`. Новая функция API, :"
"c:func:`PyImport_ImportModuleNoBlock`, сначала будет искать модуль в ``sys."
"modules``, а затем попытается импортировать его после получения блокировки "
"импорта. Если блокировка импорта удерживается другим потоком, возникает "
"ошибка :exc:`ImportError`. (Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:3053
msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing more "
"information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number "
"of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 "
"and the next largest value representable), and several others. (Contributed "
"by Christian Heimes; :issue:`1534`.)"
msgstr ""

#: ../../whatsnew/2.6.rst:3064
msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, the "
"functions in the :mod:`cmath` module will now accept objects with this "
"method. This is a backport of a Python 3.0 change. (Contributed by Mark "
"Dickinson; :issue:`1675423`.)"
msgstr ""
"Функции и методы C, использующие :c:func:`PyComplex_AsCComplex`, теперь "
"будут принимать аргументы, имеющие метод :meth:`__complex__`. В частности, "
"функции модуля :mod:`cmath` теперь будут принимать объекты с помощью этого "
"метода. Это резервная версия изменения Python 3.0. (Предоставлено Марком "
"Дикинсоном; :issue:`1675423`.)"

#: ../../whatsnew/2.6.rst:3071
msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""
"API C Python теперь включает две функции для сравнения строк без учета "
"регистра: ``PyOS_stricmp(char*, char*)`` и ``PyOS_strnicmp(char*, char*, "
"Py_ssize_t)``. (Предоставлено Кристианом Хаймсом; :issue:`1635`.)"

#: ../../whatsnew/2.6.rst:3076
msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6 "
"finally defines standard macros for adding values to a module, :c:macro:"
"`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`.  "
"(Contributed by Christian Heimes.)"
msgstr ""
"Многие расширения C определяют свой собственный небольшой макрос для "
"добавления целых чисел и строк в словарь модуля в функции ``init*``. В "
"Python 2.6 наконец-то определены стандартные макросы для добавления значений "
"в модуль: :c:macro:`PyModule_AddStringMacro` и :c:macro:"
"`PyModule_AddIntMacro()`. (Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:3083
msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they "
"are macros, not functions.  :c:macro:`!Py_Size()` became :c:macro:"
"`Py_SIZE()`, :c:macro:`!Py_Type()` became :c:macro:`Py_TYPE()`, and :c:macro:"
"`!Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case macros are "
"still available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""
"Некоторые макросы были переименованы как в версии 3.0, так и в версии 2.6, "
"чтобы было понятнее, что это макросы, а не функции. :c:macro:`!Py_Size()` "
"стал :c:macro:`Py_SIZE()`, :c:macro:`!Py_Type()` стал :c:macro:`Py_TYPE()` "
"и :c: макрос:`!Py_Refcnt()` стал :c:macro:`Py_REFCNT()`. Макросы смешанного "
"регистра по-прежнему доступны в Python 2.6 для обеспечения обратной "
"совместимости. (:issue:`1629`)"

#: ../../whatsnew/2.6.rst:3092
msgid ""
"Distutils now places C extensions it builds in a different directory when "
"running on a debug version of Python. (Contributed by Collin Winter; :issue:"
"`1530959`.)"
msgstr ""
"Distutils теперь помещает расширения C, которые он создает, в другой каталог "
"при работе в отладочной версии Python. (Предоставлено Коллином Уинтером; :"
"issue:`1530959`.)"

#: ../../whatsnew/2.6.rst:3096
msgid ""
"Several basic data types, such as integers and strings, maintain internal "
"free lists of objects that can be re-used.  The data structures for these "
"free lists now follow a naming convention: the variable is always named "
"``free_list``, the counter is always named ``numfree``, and a macro "
"``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""
"Некоторые базовые типы данных, такие как целые числа и строки, поддерживают "
"внутренние свободные списки объектов, которые можно использовать повторно. "
"Структуры данных для этих списков свободных теперь следуют соглашению об "
"именах: переменная всегда называется ``free_list``, счетчик всегда "
"называется ``numfree``, и всегда определен макрос "
"``Py<typename>_MAXFREELIST``. ."

#: ../../whatsnew/2.6.rst:3103
msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source tree "
"for making a patch: it fixes trailing whitespace in all modified ``.py`` "
"files, checks whether the documentation has been changed, and reports "
"whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. "
"(Contributed by Brett Cannon.)"
msgstr ""
"Новая цель Makefile, make patchcheck, подготавливает дерево исходного кода "
"Python для создания патча: она исправляет конечные пробелы во всех "
"измененных файлах ``.py``, проверяет, была ли изменена документация, и "
"сообщает, был ли :file: Файлы `Misc/ACKS` и :file:`Misc/NEWS` обновлены. "
"(Предоставлено Бреттом Кэнноном.)"

#: ../../whatsnew/2.6.rst:3110
msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and then "
"compiles using these results for optimization. (Contributed by Gregory P. "
"Smith.)"
msgstr ""
"Другая новая цель, make Profile-opt, компилирует двоичный файл Python с "
"использованием оптимизации GCC на основе профиля. Он компилирует Python с "
"включенным профилированием, запускает набор тестов для получения набора "
"результатов профилирования, а затем компилирует, используя эти результаты "
"для оптимизации. (Предоставлено Грегори П. Смитом.)"

#: ../../whatsnew/2.6.rst:3119
msgid "Port-Specific Changes: Windows"
msgstr "Изменения для конкретного порта: Windows"

#: ../../whatsnew/2.6.rst:3121
msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr ""
"Поддержка Windows 95, 98, ME и NT4 прекращена. Для Python 2.6 требуется как "
"минимум Windows 2000 SP4."

#: ../../whatsnew/2.6.rst:3124
msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). The "
"build directories for Visual Studio 2003 (version 7.1) and 2005 (version "
"8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory "
"supports cross compilation for X64, debug builds and Profile Guided "
"Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  "
"(Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and "
"Martin von Löwis.)"
msgstr ""
"Новым компилятором по умолчанию в Windows является Visual Studio 2008 "
"(версия 9.0). Каталоги сборки Visual Studio 2003 (версия 7.1) и 2005 (версия "
"8.0) были перемещены в каталог PC/. Новый каталог :file:`PCbuild` "
"поддерживает кросс-компиляцию для X64, отладочные сборки и оптимизацию на "
"основе профиля (PGO). Сборки PGO выполняются примерно на 10 % быстрее, чем "
"обычные сборки. (Предоставлено Кристианом Хаймсом при помощи Амори Форжо "
"д'Арк и Мартина фон Лёвиса.)"

#: ../../whatsnew/2.6.rst:3132
msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char variants "
"of the console I/O API.  The :func:`~msvcrt.getwch` function reads a "
"keypress and returns a Unicode value, as does the :func:`~msvcrt.getwche` "
"function.  The :func:`~msvcrt.putwch` function takes a Unicode character and "
"writes it to the console. (Contributed by Christian Heimes.)"
msgstr ""
"Модуль :mod:`msvcrt` теперь поддерживает как обычные, так и расширенные "
"варианты API консольного ввода-вывода. Функция :func:`~msvcrt.getwch` "
"считывает нажатие клавиши и возвращает значение Unicode, как и функция :func:"
"`~msvcrt.getwche`. Функция :func:`~msvcrt.putwch` принимает символ Юникода и "
"записывает его на консоль. (Предоставлено Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:3139
msgid ""
":func:`os.path.expandvars` will now expand environment variables in the form "
"\"%var%\", and \"~user\" will be expanded into the user's home directory "
"path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
":func:`os.path.expandvars` теперь будет расширять переменные среды в форме "
"\"%var%\", а \"~user\" будет расширяться до пути к домашнему каталогу "
"пользователя. (Предоставлено Джозайей Карлсоном; :issue:`957650`.)"

#: ../../whatsnew/2.6.rst:3143
msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`~socket.socket."
"ioctl` method that provides a limited interface to the :c:func:`WSAIoctl` "
"system interface."
msgstr ""
"Объекты сокетов модуля :mod:`socket` теперь имеют метод :meth:`~socket."
"socket.ioctl`, который обеспечивает ограниченный интерфейс к системному "
"интерфейсу :c:func:`WSAIoctl`."

#: ../../whatsnew/2.6.rst:3147
msgid ""
"The :mod:`_winreg <winreg>` module now has a function, :func:`~winreg."
"ExpandEnvironmentStrings`, that expands environment variable references such "
"as ``%NAME%`` in an input string.  The handle objects provided by this "
"module now support the context protocol, so they can be used in :keyword:"
"`with` statements. (Contributed by Christian Heimes.)"
msgstr ""
"Модуль :mod:`_winreg <winreg>` теперь имеет функцию :func:`~winreg."
"ExpandEnvironmentStrings`, которая расширяет ссылки на переменные среды, "
"такие как ``%NAME%``, во входной строке. Объекты-дескрипторы, "
"предоставляемые этим модулем, теперь поддерживают контекстный протокол, "
"поэтому их можно использовать в операторах :keyword:`with`. (Предоставлено "
"Кристианом Хаймсом.)"

#: ../../whatsnew/2.6.rst:3154
msgid ""
":mod:`_winreg <winreg>` also has better support for x64 systems, exposing "
"the :func:`~winreg.DisableReflectionKey`, :func:`~winreg."
"EnableReflectionKey`, and :func:`~winreg.QueryReflectionKey` functions, "
"which enable and disable registry reflection for 32-bit processes running on "
"64-bit systems. (:issue:`1753245`)"
msgstr ""
":mod:`_winreg <winreg>` также имеет лучшую поддержку для систем x64, "
"предоставляя функции :func:`~winreg.DisableReflectionKey`, :func:`~winreg."
"EnableReflectionKey` и :func:`~winreg.QueryReflectionKey` , которые включают "
"и отключают отражение реестра для 32-битных процессов, работающих в 64-"
"битных системах. (:issue:`1753245`)"

#: ../../whatsnew/2.6.rst:3160
msgid ""
"The :mod:`msilib` module's :class:`!Record` object gained :meth:`~msilib."
"Record.GetInteger` and :meth:`~msilib.Record.GetString` methods that return "
"field values as an integer or a string. (Contributed by Floris Bruynooghe; :"
"issue:`2125`.)"
msgstr ""
"Объект :class:`!Record` модуля :mod:`msilib` получил методы :meth:`~msilib."
"Record.GetInteger` и :meth:`~msilib.Record.GetString`, которые возвращают "
"значения поля в виде целого числа или числа. нить. (Предоставлено Флорисом "
"Брюйноге; :issue:`2125`.)"

#: ../../whatsnew/2.6.rst:3168
msgid "Port-Specific Changes: Mac OS X"
msgstr "Изменения, специфичные для порта: Mac OS X"

#: ../../whatsnew/2.6.rst:3170
msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`!--with-framework-name=` "
"option to the :program:`configure` script."
msgstr ""
"При компиляции сборки платформы Python теперь вы можете указать имя "
"используемой платформы, указав параметр :option:`!--with-framework-name=` "
"для сценария :program:`configure`."

#: ../../whatsnew/2.6.rst:3175
msgid ""
"The :mod:`!macfs` module has been removed.  This in turn required the :func:"
"`!macostools.touched` function to be removed because it depended on the :mod:"
"`!macfs` module.  (:issue:`1490190`)"
msgstr ""
"Модуль :mod:`!macfs` был удален. Это, в свою очередь, потребовало удаления "
"функции :func:`!macostools.touched`, поскольку она зависела от модуля :mod:`!"
"macfs`. (:issue:`1490190`)"

#: ../../whatsnew/2.6.rst:3179
msgid ""
"Many other Mac OS modules have been deprecated and will be removed in Python "
"3.0: :mod:`!_builtinSuites`, :mod:`!aepack`, :mod:`!aetools`, :mod:`!"
"aetypes`, :mod:`!applesingle`, :mod:`!appletrawmain`, :mod:`!appletrunner`, :"
"mod:`!argvemulator`, :mod:`!Audio_mac`, :mod:`!autoGIL`, :mod:`!Carbon`, :"
"mod:`!cfmfile`, :mod:`!CodeWarrior`, :mod:`!ColorPicker`, :mod:`!"
"EasyDialogs`, :mod:`!Explorer`, :mod:`!Finder`, :mod:`!FrameWork`, :mod:`!"
"findertools`, :mod:`!ic`, :mod:`!icglue`, :mod:`!icopen`, :mod:`!"
"macerrors`, :mod:`!MacOS`, :mod:`!macfs`, :mod:`!macostools`, :mod:`!"
"macresource`, :mod:`!MiniAEFrame`, :mod:`!Nav`, :mod:`!Netscape`, :mod:`!"
"OSATerminology`, :mod:`!pimp`, :mod:`!PixMapWrapper`, :mod:`!StdSuites`, :"
"mod:`!SystemEvents`, :mod:`!Terminal`, and :mod:`!terminalcommand`."
msgstr ""
"Многие другие модули Mac OS устарели и будут удалены в Python 3.0: :mod:`!"
"_builtinSuites`, :mod:`!aepack`, :mod:`!aetools`, :mod:`!aetypes`, :mod :`!"
"applesingle`, :mod:`!appletrawmain`, :mod:`!appletrunner`, :mod:`!"
"argvemulator`, :mod:`!Audio_mac`, :mod:`!autoGIL`, :mod:` !Carbon`, :mod:`!"
"cfmfile`, :mod:`!CodeWarrior`, :mod:`!ColorPicker`, :mod:`!EasyDialogs`, :"
"mod:`!Explorer`, :mod:`!Finder `, :mod:`!FrameWork`, :mod:`!findertools`, :"
"mod:`!ic`, :mod:`!icglue`, :mod:`!icopen`, :mod:`!macerrors`, :mod:`!"
"MacOS`, :mod:`!macfs`, :mod:`!macostools`, :mod:`!macresource`, :mod:`!"
"MiniAEFrame`, :mod:`!Nav`, :mod :`!Netscape`, :mod:`!OSATerminology`, :mod:`!"
"pimp`, :mod:`!PixMapWrapper`, :mod:`!StdSuites`, :mod:`!SystemEvents`, :mod:"
"` !Terminal` и :mod:`!terminalcommand`."

#: ../../whatsnew/2.6.rst:3222
msgid "Port-Specific Changes: IRIX"
msgstr "Изменения для конкретного порта: IRIX"

#: ../../whatsnew/2.6.rst:3224
msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed in "
"Python 3.0: :mod:`!al` and :mod:`!AL`, :mod:`!cd`, :mod:`!cddb`, :mod:`!"
"cdplayer`, :mod:`!CL` and :mod:`!cl`, :mod:`!DEVICE`, :mod:`!ERRNO`, :mod:`!"
"FILE`, :mod:`!FL` and :mod:`!fl`, :mod:`!flp`, :mod:`!fm`, :mod:`!GET`, :mod:"
"`!GLWS`, :mod:`!GL` and :mod:`!gl`, :mod:`!IN`, :mod:`!IOCTL`, :mod:`!"
"jpeg`, :mod:`!panelparser`, :mod:`!readcd`, :mod:`!SV` and :mod:`!sv`, :mod:"
"`!torgb`, :mod:`!videoreader`, and :mod:`!WAIT`."
msgstr ""
"Ряд старых модулей, специфичных для IRIX, устарели и будут удалены в Python "
"3.0: :mod:`!al` и :mod:`!AL`, :mod:`!cd`, :mod:`!cddb`, :mod:`!cdplayer`, :"
"mod:`!CL` и :mod:`!cl`, :mod:`!DEVICE`, :mod:`!ERRNO`, :mod:`!FILE`, :mod :`!"
"FL` и :mod:`!fl`, :mod:`!flp`, :mod:`!fm`, :mod:`!GET`, :mod:`!GLWS`, :mod:"
"` !GL` и :mod:`!gl`, :mod:`!IN`, :mod:`!IOCTL`, :mod:`!jpeg`, :mod:`!"
"panelparser`, :mod:`!readcd `, :mod:`!SV` и :mod:`!sv`, :mod:`!torgb`, :mod:"
"`!videoreader` и :mod:`!WAIT`."

#: ../../whatsnew/2.6.rst:3254
msgid "Porting to Python 2.6"
msgstr "Портирование на Python 2.6"

#: ../../whatsnew/2.6.rst:3256
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок, которые могут потребовать внесения изменений в ваш код:"

#: ../../whatsnew/2.6.rst:3259
msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = None`` "
"in their definitions to indicate the fact."
msgstr ""
"Классы, которые не должны быть хэшируемыми, должны установить в своих "
"определениях ``__hash__ = None``, чтобы указать на этот факт."

#: ../../whatsnew/2.6.rst:3266
msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable.  "
"This change makes the behavior match ``list.__init__()``."
msgstr ""
"Метод :meth:`__init__` :class:`collections.deque` теперь очищает любое "
"существующее содержимое дека перед добавлением элементов из итерируемого "
"объекта. Это изменение приводит к тому, что поведение соответствует ``list."
"__init__()``."

#: ../../whatsnew/2.6.rst:3271
msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and keyword "
"arguments, ignoring them.  In Python 2.6, this is no longer allowed and will "
"result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods "
"that end up calling the corresponding method on :class:`object` (perhaps "
"through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""
":meth:`object.__init__` ранее принимал произвольные аргументы и аргументы "
"ключевых слов, игнорируя их. В Python 2.6 это больше не разрешено и приведет "
"к ошибке :exc:`TypeError`. Это повлияет на методы :meth:`__init__`, которые "
"в конечном итоге вызывают соответствующий метод на :class:`object` "
"(возможно, посредством использования :func:`super`). См. обсуждение в :issue:"
"`1683368`."

#: ../../whatsnew/2.6.rst:3278
msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing whitespace "
"when passed a string.  Previously it would raise an :exc:`InvalidOperation` "
"exception.  On the other hand, the :meth:`create_decimal` method of :class:"
"`Context` objects now explicitly disallows extra whitespace, raising a :exc:"
"`ConversionSyntax` exception."
msgstr ""
"Конструктор :class:`Decimal` теперь принимает начальные и конечные пробелы "
"при передаче строки. Раньше это вызывало исключение :exc:`InvalidOperation`. "
"С другой стороны, метод :meth:`create_decimal` объектов :class:`Context` "
"теперь явно запрещает использование дополнительных пробелов, вызывая "
"исключение :exc:`ConversionSyntax`."

#: ../../whatsnew/2.6.rst:3285
msgid ""
"Due to an implementation accident, if you passed a file path to the built-"
"in  :func:`__import__` function, it would actually import the specified "
"file.  This was never intended to work, however, and the implementation now "
"explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""
"Из-за ошибки реализации, если вы передадите путь к файлу встроенной функции :"
"func:`__import__`, она фактически импортирует указанный файл. Однако это "
"никогда не должно было работать, и теперь реализация явно проверяет этот "
"случай и выдает :exc:`ImportError`."

#: ../../whatsnew/2.6.rst:3291
msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This will "
"affect C extensions that import other modules."
msgstr ""
"C API: функции :c:func:`PyImport_Import` и :c:func:`PyImport_ImportModule` "
"теперь по умолчанию выполняют абсолютный импорт, а не относительный импорт. "
"Это повлияет на расширения C, которые импортируют другие модули."

#: ../../whatsnew/2.6.rst:3295
msgid ""
"C API: extension data types that shouldn't be hashable should define their "
"``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""
"C API: типы данных расширения, которые не должны быть хешируемыми, должны "
"определять свой слот tp_hash для :c:func:` PyObj ect_HashNotImplemented`."

#: ../../whatsnew/2.6.rst:3299
msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from :"
"exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but "
"now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:"
"`1706815`.)"
msgstr ""
"Исключение модуля :mod:`socket` :exc:`socket.error` теперь наследуется от :"
"exc:`IOError`. Раньше он не был подклассом :exc:`StandardError`, но теперь "
"стал подклассом :exc:`IOError`. (Реализован Грегори П. Смитом; :issue:"
"`1706815`.)"

#: ../../whatsnew/2.6.rst:3304
msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module no longer automatically "
"converts :class:`datetime.date` and :class:`datetime.time` to the :class:"
"`xmlrpclib.DateTime <xmlrpc.client.DateTime>` type; the conversion semantics "
"were not necessarily correct for all applications.  Code using :mod:`!"
"xmlrpclib` should convert :class:`date` and :class:`~datetime.time` "
"instances. (:issue:`1330538`)"
msgstr ""
"Модуль :mod:`xmlrpclib <xmlrpc.client>` больше не преобразует автоматически :"
"class:`datetime.date` и :class:`datetime.time` в :class:`xmlrpclib.DateTime "
"<xmlrpc.client.DateTime> ` тип; семантика преобразования не обязательно была "
"правильной для всех приложений. Код, использующий :mod:`!xmlrpclib`, должен "
"конвертировать экземпляры :class:`date` и :class:`~datetime.time`. (:issue:"
"`1330538`)"

#: ../../whatsnew/2.6.rst:3311
msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a tuple "
"is being phased out."
msgstr ""
"(режим предупреждения 3.0) Класс :class:`Exception` теперь предупреждает при "
"доступе с использованием срезов или индексного доступа; наличие :class:"
"`Exception` ведет себя так, как будто кортеж постепенно выводится из "
"эксплуатации."

#: ../../whatsnew/2.6.rst:3315
msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two "
"objects that don't implement comparison methods are reported as warnings.  "
"``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""
"(режим предупреждения 3.0) сравнения неравенств между двумя словарями или "
"двумя объектами, которые не реализуют методы сравнения, отображаются как "
"предупреждения. ``dict1 == dict2`` все еще работает, но ``dict1 < dict2`` "
"постепенно прекращается."

#: ../../whatsnew/2.6.rst:3320
msgid ""
"Comparisons between cells, which are an implementation detail of Python's "
"scoping rules, also cause warnings because such comparisons are forbidden "
"entirely in 3.0."
msgstr ""
"Сравнения между ячейками, которые являются частью реализации правил области "
"видимости Python, также вызывают предупреждения, поскольку такие сравнения "
"полностью запрещены в версии 3.0."

#: ../../whatsnew/2.6.rst:3324
msgid "For applications that embed Python:"
msgstr "Для приложений, встраивающих Python:"

#: ../../whatsnew/2.6.rst:3326
msgid ""
"The :c:func:`!PySys_SetArgvEx` function was added in Python 2.6.6, letting "
"applications close a security hole when the existing :c:func:`!"
"PySys_SetArgv` function was used.  Check whether you're calling :c:func:`!"
"PySys_SetArgv` and carefully consider whether the application should be "
"using :c:func:`!PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""
"Функция :c:func:`!PySys_SetArgvEx` была добавлена ​​в Python 2.6.6, позволяя "
"приложениям закрывать дыры в безопасности при использовании существующей "
"функции :c:func:`!PySys_SetArgv`. Проверьте, вызываете ли вы :c:func:`!"
"PySys_SetArgv`, и внимательно подумайте, должно ли приложение использовать :"
"c:func:`!PySys_SetArgvEx` со значением *updatepath*, установленным в false."

#: ../../whatsnew/2.6.rst:3339
msgid "Acknowledgements"
msgstr "Подтверждение"

#: ../../whatsnew/2.6.rst:3341
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent "
"Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""
"Автор хотел бы поблагодарить следующих людей за предложения, исправления и "
"помощь в различных черновиках этой статьи: Георга Брандла, Стива Брауна, "
"Ника Коглана, Ральфа Кордероя, Джима Джуэтта, Кента Джонсона, Криса "
"Ламбахера, Мартина Михлмайра, Антуана Питру, Брайан Уорнер."

#: ../../whatsnew/2.6.rst:1068
msgid "universal newlines"
msgstr "универсальные переводы строк"

#: ../../whatsnew/2.6.rst:1068
msgid "What's new"
msgstr "Что нового"
