# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:02+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/3.13.rst:4
msgid "What's New In Python 3.13"
msgstr "https://aftershock.news/?q=node/1420862"

#: ../../whatsnew/3.13.rst:0
msgid "Editors"
msgstr "Редакция"

#: ../../whatsnew/3.13.rst:6
msgid "Adam Turner and Thomas Wouters"
msgstr "Адам Тернер и Томас Воутерс"

#: ../../whatsnew/3.13.rst:48
msgid ""
"This article explains the new features in Python 3.13, compared to 3.12. "
"Python 3.13 was released on October 7, 2024. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"В этой статье объясняются новые возможности Python 3.13 по сравнению с "
"версией 3.12. Python 3.13 был выпущен 7 октября 2024 г. Подробную информацию "
"см. в журнале изменений <changelog>`."

#: ../../whatsnew/3.13.rst:54
msgid ":pep:`719` -- Python 3.13 Release Schedule"
msgstr ":pep:`719` -- График выпуска Python 3.13"

#: ../../whatsnew/3.13.rst:58
msgid "Summary -- Release Highlights"
msgstr "Резюме: основные моменты выпуска"

#: ../../whatsnew/3.13.rst:63
msgid ""
"Python 3.13 is the latest stable release of the Python programming language, "
"with a mix of changes to the language, the implementation and the standard "
"library. The biggest changes include a new `interactive interpreter "
"<whatsnew313-better-interactive-interpreter_>`_, experimental support for "
"running in a `free-threaded mode <whatsnew313-free-threaded-cpython_>`_ (:"
"pep:`703`), and a `Just-In-Time compiler <whatsnew313-jit-compiler_>`_ (:pep:"
"`744`)."
msgstr ""
"Python 3.13 — это последняя стабильная версия языка программирования Python "
"с множеством изменений в языке, реализации и стандартной библиотеке. Самые "
"большие изменения включают новый `интерактивный интерпретатор <whatsnew313-"
"better-interactive-interpreter_>`_, экспериментальную поддержку работы в "
"`свободном режиме <whatsnew313-free-threaded-cpython_>`_ (:pep:`703` ) и "
"`Just-In-Time компилятор <whatsnew313-jit-compiler_>`_ (:pep:`744`)."

#: ../../whatsnew/3.13.rst:72
msgid ""
"Error messages continue to improve, with tracebacks now highlighted in color "
"by default. The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` for changing the returned mapping, and type "
"parameters now support default values."
msgstr ""
"Сообщения об ошибках продолжают улучшаться: обратные трассировки теперь по "
"умолчанию выделяются цветом. Встроенная функция :func:`locals` теперь имеет :"
"ref:`определённую семантику <whatsnew313-locals-semantics>` для изменения "
"возвращаемого сопоставления, а параметры типа теперь поддерживают значения "
"по умолчанию."

#: ../../whatsnew/3.13.rst:77
msgid ""
"The library changes contain removal of deprecated APIs and modules, as well "
"as the usual improvements in user-friendliness and correctness. Several "
"legacy standard library modules have now `been removed <whatsnew313-"
"pep594_>`_ following their deprecation in Python 3.11 (:pep:`594`)."
msgstr ""
"Изменения библиотеки включают удаление устаревших API и модулей, а также "
"обычные улучшения удобства и корректности. Несколько устаревших модулей "
"стандартной библиотеки теперь `удалены <whatsnew313-pep594_>`_ после их "
"устаревания в Python 3.11 (:pep:`594`)."

#: ../../whatsnew/3.13.rst:82
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details refer to "
"the documentation, such as the :ref:`Library Reference <library-index>` and :"
"ref:`Language Reference <reference-index>`. To understand the complete "
"implementation and design rationale for a change, refer to the PEP for a "
"particular new feature; but note that PEPs usually are not kept up-to-date "
"once a feature has been fully implemented. See `Porting to Python 3.13`_ for "
"guidance on upgrading from earlier versions of Python."
msgstr ""
"Эта статья не пытается предоставить полную спецификацию всех новых функций, "
"а дает удобный обзор. Для получения полной информации обратитесь к "
"документации, такой как :ref:`Справочник по библиотекам <library-index>` и :"
"ref:`Справочник по языку <reference-index>`. Чтобы понять полную реализацию "
"и обоснование изменения, обратитесь к PEP для конкретной новой функции; но "
"учтите, что PEP обычно не обновляются после полной реализации функции. См. "
"«Портирование на Python 3.13» для получения инструкций по обновлению с более "
"ранних версий Python."

#: ../../whatsnew/3.13.rst:98
msgid "Interpreter improvements:"
msgstr "Улучшения интерпретатора:"

#: ../../whatsnew/3.13.rst:100
msgid ""
"A greatly improved :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>` and :ref:`improved error messages <whatsnew313-"
"improved-error-messages>`."
msgstr ""
"Значительно улучшенный :ref:`интерактивный интерпретатор <whatsnew313-better-"
"interactive-interpreter>` и :ref:`улучшенные сообщения об ошибках "
"<whatsnew313-improved-error-messages>`."

#: ../../whatsnew/3.13.rst:103
msgid ""
":pep:`667`: The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` when mutating the returned mapping. Python "
"debuggers and similar tools may now more reliably update local variables in "
"optimized scopes even during concurrent code execution."
msgstr ""
":pep:`667`: Встроенная функция :func:`locals` теперь имеет :ref:"
"`определённую семантику <whatsnew313-locals-semantics>` при изменении "
"возвращаемого сопоставления. Отладчики Python и аналогичные инструменты "
"теперь могут более надежно обновлять локальные переменные в оптимизированных "
"областях даже во время одновременного выполнения кода."

#: ../../whatsnew/3.13.rst:108
msgid ""
":pep:`703`: CPython 3.13 has experimental support for running with the :term:"
"`global interpreter lock` disabled. See :ref:`Free-threaded CPython "
"<whatsnew313-free-threaded-cpython>` for more details."
msgstr ""
":pep:`703`: CPython 3.13 имеет экспериментальную поддержку работы с "
"отключенной :term:`глобальной блокировкой интерпретатора`. Дополнительную "
"информацию см. в разделе :ref:`Свободнопоточный CPython <whatsnew313-free-"
"threaded-cpython>`."

#: ../../whatsnew/3.13.rst:111
msgid ""
":pep:`744`: A basic :ref:`JIT compiler <whatsnew313-jit-compiler>` was "
"added. It is currently disabled by default (though we may turn it on later). "
"Performance improvements are modest -- we expect to improve this over the "
"next few releases."
msgstr ""
":pep:`744`: Был добавлен базовый :ref:`JIT-компилятор <whatsnew313-jit-"
"compiler>`. В настоящее время по умолчанию он отключен (хотя мы можем "
"включить его позже). Улучшения производительности скромные — мы ожидаем "
"улучшить их в следующих нескольких выпусках."

#: ../../whatsnew/3.13.rst:115
msgid ""
"Color support in the new :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>`, as well as in :ref:`tracebacks <whatsnew313-"
"improved-error-messages>` and :ref:`doctest <whatsnew313-doctest>` output. "
"This can be disabled through the :envvar:`PYTHON_COLORS` and |NO_COLOR|_ "
"environment variables."
msgstr ""
"Поддержка цвета в новом :ref:`интерактивном интерпретаторе <whatsnew313-"
"better-interactive-interpreter>`, а также в :ref:`tracebacks <whatsnew313-"
"improved-error-messages>` и :ref:`doctest <whatsnew313- doctest>` вывод. Это "
"можно отключить с помощью :envvar:`PYTHON_COLORS` и |NO_COLOR|_ переменные "
"среды."

#: ../../whatsnew/3.13.rst:122
msgid "Python data model improvements:"
msgstr "Улучшения модели данных Python:"

#: ../../whatsnew/3.13.rst:124
msgid ""
":attr:`~type.__static_attributes__` stores the names of attributes accessed "
"through ``self.X`` in any function in a class body."
msgstr ""
":attr:`~type.__static_attributes__` хранит имена атрибутов, доступ к которым "
"осуществляется через ``self.X`` в любой функции в теле класса."

#: ../../whatsnew/3.13.rst:126
msgid ""
":attr:`~type.__firstlineno__` records the first line number of a class "
"definition."
msgstr ""
":attr:`~type.__firstlineno__` записывает номер первой строки определения "
"класса."

#: ../../whatsnew/3.13.rst:129
msgid "Significant improvements in the standard library:"
msgstr "Значительные улучшения в стандартной библиотеке:"

#: ../../whatsnew/3.13.rst:131
msgid ""
"Add a new :exc:`PythonFinalizationError` exception, raised when an operation "
"is blocked during :term:`finalization <interpreter shutdown>`."
msgstr ""
"Добавьте новое исключение :exc:`PythonFinalizationError`, вызываемое, когда "
"операция блокируется во время :term:`finalization <interpreter Shutdown>`."

#: ../../whatsnew/3.13.rst:133
msgid ""
"The :mod:`argparse` module now supports deprecating command-line options, "
"positional arguments, and subcommands."
msgstr ""
"Модуль :mod:`argparse` теперь поддерживает устаревшие параметры командной "
"строки, позиционные аргументы и подкоманды."

#: ../../whatsnew/3.13.rst:135
msgid ""
"The new functions :func:`base64.z85encode` and :func:`base64.z85decode` "
"support encoding and decoding `Z85 data`_."
msgstr ""
"Новые функции :func:`base64.z85encode` и :func:`base64.z85decode` "
"поддерживают кодирование и декодирование `данных Z85`_."

#: ../../whatsnew/3.13.rst:137
msgid ""
"The :mod:`copy` module now has a :func:`copy.replace` function, with support "
"for many builtin types and any class defining the :func:`~object."
"__replace__` method."
msgstr ""
"Модуль :mod:`copy` теперь имеет функцию :func:`copy.replace` с поддержкой "
"многих встроенных типов и любого класса, определяющего метод :func:`~object."
"__replace__`."

#: ../../whatsnew/3.13.rst:140
msgid ""
"The new :mod:`dbm.sqlite3` module is now the default :mod:`dbm` backend."
msgstr ""
"Новый модуль :mod:`dbm.sqlite3` теперь является серверной частью :mod:`dbm` "
"по умолчанию."

#: ../../whatsnew/3.13.rst:141
msgid ""
"The :mod:`os` module has a :ref:`suite of new functions <os-timerfd>` for "
"working with Linux's timer notification file descriptors."
msgstr ""
"Модуль :mod:`os` имеет :ref:`набор новых функций <os-timerfd>` для работы с "
"дескрипторами файлов уведомлений таймера Linux."

#: ../../whatsnew/3.13.rst:143
msgid ""
"The :mod:`random` module now has a :ref:`command-line interface <random-"
"cli>`."
msgstr ""
"Модуль :mod:`random` теперь имеет :ref:`интерфейс командной строки <random-"
"cli>`."

#: ../../whatsnew/3.13.rst:145
msgid "Security improvements:"
msgstr "Улучшения безопасности:"

#: ../../whatsnew/3.13.rst:147
msgid ""
":func:`ssl.create_default_context` sets :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`ssl.VERIFY_X509_STRICT` as default "
"flags."
msgstr ""
":func:`ssl.create_default_context` устанавливает :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` и :data:`ssl.VERIFY_X509_STRICT` в качестве "
"флагов по умолчанию."

#: ../../whatsnew/3.13.rst:150
msgid "C API improvements:"
msgstr "Улучшения в C API:"

#: ../../whatsnew/3.13.rst:152
msgid ""
"The :c:data:`Py_mod_gil` slot is now used to indicate that an extension "
"module supports running with the :term:`GIL` disabled."
msgstr ""
"Слот :c:data:`Py_mod_gil` теперь используется для указания того, что модуль "
"расширения поддерживает работу с отключенным :term:`GIL`."

#: ../../whatsnew/3.13.rst:154
msgid ""
"The :doc:`PyTime C API </c-api/time>` has been added, providing access to "
"system clocks."
msgstr ""
"Был добавлен :doc:`PyTime C API </c-api/time>`, обеспечивающий доступ к "
"системным часам."

#: ../../whatsnew/3.13.rst:156
msgid ""
":c:type:`PyMutex` is a new lightweight mutex that occupies a single byte."
msgstr ""
":c:type:`PyMutex` — это новый облегченный мьютекс, занимающий один байт."

#: ../../whatsnew/3.13.rst:157
msgid ""
"There is a new :ref:`suite of functions <c-api-monitoring>` for generating :"
"pep:`669` monitoring events in the C API."
msgstr ""
"Появился новый :ref:`набор функций <c-api-monitoring>` для генерации :pep:"
"`669` событий мониторинга в C API."

#: ../../whatsnew/3.13.rst:160
msgid "New typing features:"
msgstr "Новые возможности набора текста:"

#: ../../whatsnew/3.13.rst:162
msgid ""
":pep:`696`: Type parameters (:data:`typing.TypeVar`, :data:`typing."
"ParamSpec`, and :data:`typing.TypeVarTuple`) now support defaults."
msgstr ""
":pep:`696`: Параметры типа (:data:`typing.TypeVar`, :data:`typing.ParamSpec` "
"и :data:`typing.TypeVarTuple`) теперь поддерживают значения по умолчанию."

#: ../../whatsnew/3.13.rst:164
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator adds support for "
"marking deprecations in the type system and at runtime."
msgstr ""
":pep:`702`: Новый декоратор :func:`warnings.deprecated` добавляет поддержку "
"маркировки устаревших типов в системе типов и во время выполнения."

#: ../../whatsnew/3.13.rst:166
msgid ""
":pep:`705`: :data:`typing.ReadOnly` can be used to mark an item of a :class:"
"`typing.TypedDict` as read-only for type checkers."
msgstr ""
":pep:`705`: :data:`typing.ReadOnly` можно использовать, чтобы пометить "
"элемент :class:`typing.TypedDict` как доступный только для чтения для "
"средств проверки типов."

#: ../../whatsnew/3.13.rst:168
msgid ""
":pep:`742`: :data:`typing.TypeIs` provides more intuitive type narrowing "
"behavior, as an alternative to :data:`typing.TypeGuard`."
msgstr ""
":pep:`742`: :data:`typing.TypeIs` обеспечивает более интуитивно понятное "
"поведение сужения типов в качестве альтернативы :data:`typing.TypeGuard`."

#: ../../whatsnew/3.13.rst:171
msgid "Platform support:"
msgstr "Поддержка платформы:"

#: ../../whatsnew/3.13.rst:173
msgid ""
":pep:`730`: Apple's iOS is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`730`: iOS от Apple теперь является :ref:`официально поддерживаемой "
"платформой <whatsnew313-platform-support>`, на :pep:`уровне 3 <11#tier-3>`."

#: ../../whatsnew/3.13.rst:175
msgid ""
":pep:`738`: Android is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`738`: Android теперь является :ref:`официально поддерживаемой "
"платформой <whatsnew313-platform-support>`, на :pep:`уровне 3 <11#tier-3>`."

#: ../../whatsnew/3.13.rst:177
msgid ""
"``wasm32-wasi`` is now supported as a :pep:`tier 2 <11#tier-2>` platform."
msgstr ""
"``wasm32-wasi`` теперь поддерживается как платформа :pep:`tier 2 "
"<11#tier-2>`."

#: ../../whatsnew/3.13.rst:178
msgid "``wasm32-emscripten`` is no longer an officially supported platform."
msgstr ""
"``wasm32-emscripten`` больше не является официально поддерживаемой "
"платформой."

#: ../../whatsnew/3.13.rst:180
msgid "Important removals:"
msgstr "Важные удаления:"

#: ../../whatsnew/3.13.rst:182
msgid ""
":ref:`PEP 594 <whatsnew313-pep594>`: The remaining 19 \"dead "
"batteries\" (legacy stdlib modules) have been removed from the standard "
"library: :mod:`!aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!cgitb`, :mod:`!"
"chunk`, :mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:`!msilib`, :mod:"
"`!nis`, :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!"
"sndhdr`, :mod:`!spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` and :mod:"
"`!xdrlib`."
msgstr ""
":ref:`PEP 594 <whatsnew313-pep594>`: Оставшиеся 19 «разряженных "
"батарей» (устаревшие модули stdlib) были удалены из стандартной библиотеки: :"
"mod:`!aifc`, :mod:`!audioop`, : mod:`!cgi`, :mod:`!cgitb`, :mod:`!chunk`, :"
"mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod: `!msilib`, :mod:`!"
"nis`, :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!sndhdr`, :"
"mod:`! spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` и :mod:`!xdrlib`."

#: ../../whatsnew/3.13.rst:188
msgid ""
"Remove the :program:`2to3` tool and :mod:`!lib2to3` module (deprecated in "
"Python 3.11)."
msgstr ""
"Удалите инструмент :program:`2to3` и модуль :mod:`!lib2to3` (не "
"рекомендуется в Python 3.11)."

#: ../../whatsnew/3.13.rst:190
msgid "Remove the :mod:`!tkinter.tix` module (deprecated in Python 3.6)."
msgstr "Удалите модуль :mod:`!tkinter.tix` (не рекомендуется в Python 3.6)."

#: ../../whatsnew/3.13.rst:191
msgid "Remove the :func:`!locale.resetlocale` function."
msgstr "Удалите функцию :func:`!locale.resetlocale`."

#: ../../whatsnew/3.13.rst:192
msgid "Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces."
msgstr "Удалите пространства имен :mod:`!typing.io` и :mod:`!typing.re`."

#: ../../whatsnew/3.13.rst:193
msgid "Remove chained :class:`classmethod` descriptors."
msgstr "Удалите связанные дескрипторы :class:`classmethod`."

#: ../../whatsnew/3.13.rst:195
msgid "Release schedule changes:"
msgstr "Изменения в расписании релизов:"

#: ../../whatsnew/3.13.rst:197
msgid ""
":pep:`602` (\"Annual Release Cycle for Python\") has been updated to extend "
"the full support ('bugfix') period for new releases to two years. This "
"updated policy means that:"
msgstr ""
":pep:`602` (\"Ежегодный цикл выпуска Python\") был обновлен, чтобы продлить "
"период полной поддержки (\"исправление ошибок\") для новых выпусков до двух "
"лет. Эта обновленная политика означает, что:"

#: ../../whatsnew/3.13.rst:201
msgid ""
"Python 3.9--3.12 have one and a half years of full support, followed by "
"three and a half years of security fixes."
msgstr ""
"Python 3.9–3.12 имеет полтора года полной поддержки, а затем три с половиной "
"года исправлений безопасности."

#: ../../whatsnew/3.13.rst:203
msgid ""
"Python 3.13 and later have two years of full support, followed by three "
"years of security fixes."
msgstr ""
"Python 3.13 и более поздние версии имеют два года полной поддержки, а затем "
"три года исправлений безопасности."

#: ../../whatsnew/3.13.rst:208 ../../whatsnew/3.13.rst:2046
msgid "New Features"
msgstr "Новые особенности"

#: ../../whatsnew/3.13.rst:214
msgid "A better interactive interpreter"
msgstr "Лучший интерактивный переводчик"

#: ../../whatsnew/3.13.rst:216
msgid ""
"Python now uses a new :term:`interactive` shell by default, based on code "
"from the `PyPy project`_. When the user starts the :term:`REPL` from an "
"interactive terminal, the following new features are now supported:"
msgstr ""
"Python теперь по умолчанию использует новую оболочку :term:`interactive`, "
"основанную на коде из `PyPy project`_. Когда пользователь запускает :term:"
"`REPL` из интерактивного терминала, теперь поддерживаются следующие новые "
"функции:"

#: ../../whatsnew/3.13.rst:221
msgid "Multiline editing with history preservation."
msgstr "Многострочное редактирование с сохранением истории."

#: ../../whatsnew/3.13.rst:222
msgid ""
"Direct support for REPL-specific commands like :kbd:`help`, :kbd:`exit`, "
"and :kbd:`quit`, without the need to call them as functions."
msgstr ""
"Прямая поддержка специфичных для REPL команд, таких как :kbd:`help`, :kbd:"
"`exit` и :kbd:`quit`, без необходимости вызывать их как функции."

#: ../../whatsnew/3.13.rst:224
msgid ""
"Prompts and tracebacks with :ref:`color enabled by default <using-on-"
"controlling-color>`."
msgstr ""
"Подсказки и обратная трассировка с включенным по умолчанию :ref:`color "
"<using-on-controlling-color>`."

#: ../../whatsnew/3.13.rst:226
msgid ""
"Interactive help browsing using :kbd:`F1` with a separate command history."
msgstr ""
"Интерактивный просмотр справки с помощью :kbd:`F1` с отдельной историей "
"команд."

#: ../../whatsnew/3.13.rst:228
msgid ""
"History browsing using :kbd:`F2` that skips output as well as the :term:"
"`>>>` and :term:`...` prompts."
msgstr ""
"Просмотр истории с помощью :kbd:`F2`, который пропускает вывод, а также "
"запросы :term:`>>>>` и :term:`...`."

#: ../../whatsnew/3.13.rst:230
msgid ""
"\"Paste mode\" with :kbd:`F3` that makes pasting larger blocks of code "
"easier (press :kbd:`F3` again to return to the regular prompt)."
msgstr ""
"«Режим вставки» с помощью :kbd:`F3`, который упрощает вставку больших блоков "
"кода (нажмите :kbd:`F3` еще раз, чтобы вернуться к обычному приглашению)."

#: ../../whatsnew/3.13.rst:233
msgid ""
"To disable the new interactive shell, set the :envvar:`PYTHON_BASIC_REPL` "
"environment variable. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"Чтобы отключить новую интерактивную оболочку, установите переменную среды :"
"envvar:`PYTHON_BASIC_REPL`. Подробнее об интерактивном режиме см. :ref:`tut-"
"interac`."

#: ../../whatsnew/3.13.rst:237
msgid ""
"(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou "
"in :gh:`111201` based on code from the PyPy project. Windows support "
"contributed by Dino Viehland and Anthony Shaw.)"
msgstr ""
"(Представлено Пабло Галиндо Сальгадо, Лукашом Лангой и Лисандросом Николау "
"в :gh:`111201` на основе кода из проекта PyPy. Поддержка Windows "
"предоставлена ​​Дино Виландом и Энтони Шоу.)"

#: ../../whatsnew/3.13.rst:247
msgid "Improved error messages"
msgstr "Улучшенные сообщения об ошибках"

#: ../../whatsnew/3.13.rst:249
msgid ""
"The interpreter now uses color by default when displaying tracebacks in the "
"terminal. This feature :ref:`can be controlled <using-on-controlling-color>` "
"via the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. (Contributed "
"by Pablo Galindo Salgado in :gh:`112730`.)"
msgstr ""
"Интерпретатор теперь по умолчанию использует цвет при отображении обратных "
"трассировок в терминале. Этой функцией :ref:`можно управлять <using-on-"
"controlling-color>` через новую переменную среды :envvar:`PYTHON_COLORS`, а "
"также каноническую |NO_COLOR|_ и |FORCE_COLOR|_ переменные среды. "
"(Предоставлено Пабло Галиндо Сальгадо в :gh:`112730`.)"

#: ../../whatsnew/3.13.rst:255
msgid ""
"A common mistake is to write a script with the same name as a standard "
"library module. When this results in errors, we now display a more helpful "
"error message:"
msgstr ""
"Распространенной ошибкой является написание скрипта с тем же именем, что и у "
"модуля стандартной библиотеки. Если это приводит к ошибкам, теперь мы "
"отображаем более полезное сообщение об ошибке:"

#: ../../whatsnew/3.13.rst:259
msgid ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider "
"renaming '/home/me/random.py' since it has the same name as the standard "
"library module named 'random' and prevents importing that standard library "
"module)"
msgstr ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider "
"renaming '/home/me/random.py' since it has the same name as the standard "
"library module named 'random' and prevents importing that standard library "
"module)"

#: ../../whatsnew/3.13.rst:270
msgid ""
"Similarly, if a script has the same name as a third-party module that it "
"attempts to import and this results in errors, we also display a more "
"helpful error message:"
msgstr ""
"Аналогично, если скрипт имеет то же имя, что и сторонний модуль, который он "
"пытается импортировать, и это приводит к ошибкам, мы также отображаем более "
"полезное сообщение об ошибке:"

#: ../../whatsnew/3.13.rst:274
msgid ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/"
"home/me/numpy.py' if it has the same name as a library you intended to "
"import)"
msgstr ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/"
"home/me/numpy.py' if it has the same name as a library you intended to "
"import)"

#: ../../whatsnew/3.13.rst:285
msgid "(Contributed by Shantanu Jain in :gh:`95754`.)"
msgstr "(Предоставлено Шантану Джайн в :gh:`95754`.)"

#: ../../whatsnew/3.13.rst:287
msgid ""
"The error message now tries to suggest the correct keyword argument when an "
"incorrect keyword argument is passed to a function."
msgstr ""
"Сообщение об ошибке теперь пытается предложить правильный аргумент ключевого "
"слова, когда в функцию передается неправильный аргумент ключевого слова."

#: ../../whatsnew/3.13.rst:290
msgid ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you "
"mean 'maxsplit'?"
msgstr ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you "
"mean 'maxsplit'?"

#: ../../whatsnew/3.13.rst:299
msgid ""
"(Contributed by Pablo Galindo Salgado and Shantanu Jain in :gh:`107944`.)"
msgstr "(Предоставлено Пабло Галиндо Сальгадо и Шантану Джайн в :gh:`107944`.)"

#: ../../whatsnew/3.13.rst:305
msgid "Free-threaded CPython"
msgstr "Свободнопоточный CPython"

#: ../../whatsnew/3.13.rst:307
msgid ""
"CPython now has experimental support for running in a free-threaded mode, "
"with the :term:`global interpreter lock` (GIL) disabled. This is an "
"experimental feature and therefore is not enabled by default. The free-"
"threaded mode requires a different executable, usually called "
"``python3.13t`` or ``python3.13t.exe``. Pre-built binaries marked as *free-"
"threaded* can be installed as part of the official :ref:`Windows <install-"
"freethreaded-windows>` and :ref:`macOS <install-freethreaded-macos>` "
"installers, or CPython can be built from source with the :option:`--disable-"
"gil` option."
msgstr ""
"CPython теперь имеет экспериментальную поддержку работы в режиме со "
"свободным потоком с отключенной глобальной блокировкой интерпретатора (GIL). "
"Это экспериментальная функция, поэтому по умолчанию она не включена. Для "
"режима со свободным потоком требуется другой исполняемый файл, обычно "
"называемый «python3.13t» или «python3.13t.exe». Предварительно созданные "
"двоичные файлы, помеченные как *free-threaded*, можно установить как часть "
"официальных установщиков Windows <install-freethreaded-windows> и macOS "
"<install-freethreaded-macos> или CPython. может быть собран из исходного "
"кода с помощью опции :option:`--disable-gil`."

#: ../../whatsnew/3.13.rst:317
msgid ""
"Free-threaded execution allows for full utilization of the available "
"processing power by running threads in parallel on available CPU cores. "
"While not all software will benefit from this automatically, programs "
"designed with threading in mind will run faster on multi-core hardware. "
"**The free-threaded mode is experimental** and work is ongoing to improve "
"it: expect some bugs and a substantial single-threaded performance hit. Free-"
"threaded builds of CPython support optionally running with the GIL enabled "
"at runtime using the environment variable :envvar:`PYTHON_GIL` or the "
"command-line option :option:`-X gil=1`."
msgstr ""
"Выполнение без потоков позволяет полностью использовать доступную "
"вычислительную мощность за счет параллельного выполнения потоков на "
"доступных ядрах ЦП. Хотя не все программное обеспечение получит от этого "
"выгоду автоматически, программы, разработанные с учетом многопоточности, "
"будут работать быстрее на многоядерном оборудовании. **Режим со свободным "
"потоком является экспериментальным**, и работа над его улучшением "
"продолжается: ожидайте некоторых ошибок и существенного снижения "
"производительности в однопоточном режиме. Свободно-поточные сборки CPython "
"поддерживают возможность запуска с включенным GIL во время выполнения с "
"использованием переменной среды :envvar:`PYTHON_GIL` или параметра командной "
"строки :option:`-X gil=1`."

#: ../../whatsnew/3.13.rst:327
msgid ""
"To check if the current interpreter supports free-threading, :option:`python "
"-VV <-V>` and :data:`sys.version` contain \"experimental free-threading "
"build\". The new :func:`!sys._is_gil_enabled` function can be used to check "
"whether the GIL is actually disabled in the running process."
msgstr ""
"Чтобы проверить, поддерживает ли текущий интерпретатор свободную "
"многопоточность, :option:`python -VV <-V>` и :data:`sys.version` содержат "
"\"experimental free-threading build\". Новая функция :func:`!sys."
"_is_gil_enabled` может использоваться для проверки того, действительно ли "
"отключен GIL в запущенном процессе."

#: ../../whatsnew/3.13.rst:332
msgid ""
"C-API extension modules need to be built specifically for the free-threaded "
"build. Extensions that support running with the :term:`GIL` disabled should "
"use the :c:data:`Py_mod_gil` slot. Extensions using single-phase init should "
"use :c:func:`PyUnstable_Module_SetGIL` to indicate whether they support "
"running with the GIL disabled. Importing C extensions that don't use these "
"mechanisms will cause the GIL to be enabled, unless the GIL was explicitly "
"disabled with the :envvar:`PYTHON_GIL` environment variable or the :option:`-"
"X gil=0` option. pip 24.1 or newer is required to install packages with C "
"extensions in the free-threaded build."
msgstr ""
"Модули расширения C-API необходимо создавать специально для сборки со "
"свободным потоком. Расширения, поддерживающие работу с отключенным :term:"
"`GIL`, должны использовать слот :c:data:`Py_mod_gil`. Расширения, "
"использующие однофазную инициализацию, должны использовать :c:func:"
"`PyUnstable_Module_SetGIL`, чтобы указать, поддерживают ли они работу с "
"отключенным GIL. Импорт расширений C, которые не используют эти механизмы, "
"приведет к включению GIL, если только GIL не был явно отключен с помощью "
"переменной среды :envvar:`PYTHON_GIL` или опции :option:`-X gil=0`. Для "
"установки пакетов с расширениями C в сборке со свободным потоком требуется "
"pip 24.1 или новее."

#: ../../whatsnew/3.13.rst:343
msgid ""
"This work was made possible thanks to many individuals and organizations, "
"including the large community of contributors to Python and third-party "
"projects to test and enable free-threading support. Notable contributors "
"include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett "
"Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, and many others. Many of these contributors are employed by Meta, "
"which has provided significant engineering resources to support this project."
msgstr ""
"Эта работа стала возможной благодаря множеству людей и организаций, в том "
"числе большому сообществу участников Python и сторонним проектам по "
"тестированию и обеспечению поддержки свободной многопоточности. Среди "
"известных авторов: Сэм Гросс, Кен Джин, Донхи На, Итамар Орен, Мэтт Пейдж, "
"Бретт Симмерс, Дино Виланд, Карл Мейер, Натан Голдбаум, Ральф Гоммерс, "
"Лисандрос Николау и многие другие. Многие из этих участников работают в "
"компании Meta, которая предоставила значительные инженерные ресурсы для "
"поддержки этого проекта."

#: ../../whatsnew/3.13.rst:355
msgid ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"contains rationale and information surrounding this work."
msgstr ""
":pep:`703` Статья «Как сделать глобальную блокировку интерпретатора "
"необязательной в CPython» содержит обоснование и информацию, касающуюся этой "
"работы."

#: ../../whatsnew/3.13.rst:358
msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""
"`Портирование модулей расширения для поддержки свободной многопоточности "
"<https://py-free-threading.github.io/porting/>`_: поддерживаемое сообществом "
"руководство по портированию для авторов расширений."

#: ../../whatsnew/3.13.rst:366
msgid "An experimental just-in-time (JIT) compiler"
msgstr "Экспериментальный JIT-компилятор"

#: ../../whatsnew/3.13.rst:368
msgid ""
"When CPython is configured and built using the :option:`!--enable-"
"experimental-jit` option, a just-in-time (JIT) compiler is added which may "
"speed up some Python programs. On Windows, use ``PCbuild/build.bat --"
"experimental-jit`` to enable the JIT or ``--experimental-jit-interpreter`` "
"to enable the Tier 2 interpreter. Build requirements and further supporting "
"information `are contained at`__ :file:`Tools/jit/README.md`."
msgstr ""
"Когда CPython настроен и собран с использованием параметра :option:`!--"
"enable-experimental-jit`, добавляется JIT-компилятор, который может ускорить "
"некоторые программы Python. В Windows используйте ``PCbuild/build.bat --"
"experimental-jit``, чтобы включить JIT, или ``--experimental-jit-"
"interpreter``, чтобы включить интерпретатор уровня 2. Требования к сборке и "
"дополнительная вспомогательная информация `содержатся в `__ :file:`Tools/jit/"
"README.md`."

#: ../../whatsnew/3.13.rst:378
msgid ""
"The :option:`!--enable-experimental-jit` option takes these (optional) "
"values, defaulting to ``yes`` if :option:`!--enable-experimental-jit` is "
"present without the optional value."
msgstr ""
"Опция :option:`!--enable-experimental-jit` принимает эти (необязательные) "
"значения, по умолчанию используется ``yes``, если :option:`!--enable-"
"experimental-jit` присутствует без необязательного значения."

#: ../../whatsnew/3.13.rst:382
msgid "``no``: Disable the entire Tier 2 and JIT pipeline."
msgstr "``no``: отключить весь конвейер уровня 2 и JIT."

#: ../../whatsnew/3.13.rst:383
msgid ""
"``yes``: Enable the JIT. To disable the JIT at runtime, pass the environment "
"variable ``PYTHON_JIT=0``."
msgstr ""
"``yes``: включить JIT. Чтобы отключить JIT во время выполнения, передайте "
"переменную среды PYTHON_JIT=0."

#: ../../whatsnew/3.13.rst:385
msgid ""
"``yes-off``: Build the JIT but disable it by default. To enable the JIT at "
"runtime, pass the environment variable ``PYTHON_JIT=1``."
msgstr ""
"``yes-off``: создайте JIT, но отключите его по умолчанию. Чтобы включить JIT "
"во время выполнения, передайте переменную среды PYTHON_JIT=1."

#: ../../whatsnew/3.13.rst:387
msgid ""
"``interpreter``: Enable the Tier 2 interpreter but disable the JIT. The "
"interpreter can be disabled by running with ``PYTHON_JIT=0``."
msgstr ""
"``интерпретатор``: включите интерпретатор уровня 2, но отключите JIT. "
"Интерпретатор можно отключить, запустив его с ``PYTHON_JIT=0``."

#: ../../whatsnew/3.13.rst:390
msgid "The internal architecture is roughly as follows:"
msgstr "Внутренняя архитектура примерно следующая:"

#: ../../whatsnew/3.13.rst:392
msgid ""
"We start with specialized *Tier 1 bytecode*. See :ref:`What's new in 3.11 "
"<whatsnew311-pep659>` for details."
msgstr ""
"Начнем со специализированного *байт-кода уровня 1*. Подробности см. в "
"разделе :ref:`Что нового в версии 3.11 <whatsnew311-pep659>`."

#: ../../whatsnew/3.13.rst:394
msgid ""
"When the Tier 1 bytecode gets hot enough, it gets translated to a new purely "
"internal intermediate representation (IR), called the *Tier 2 IR*, and "
"sometimes referred to as micro-ops (\"uops\")."
msgstr ""
"Когда байт-код уровня 1 становится достаточно горячим, он преобразуется в "
"новое чисто внутреннее промежуточное представление (IR), называемое *IR 2 "
"уровня* и иногда называемое микрооперациями («uops»)."

#: ../../whatsnew/3.13.rst:397
msgid ""
"The Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the "
"instruction format is better suited to translation to machine code."
msgstr ""
"IR уровня 2 использует ту же виртуальную машину на основе стека, что и "
"уровень 1, но формат инструкций лучше подходит для перевода в машинный код."

#: ../../whatsnew/3.13.rst:399
msgid ""
"We have several optimization passes for Tier 2 IR, which are applied before "
"it is interpreted or translated to machine code."
msgstr ""
"У нас есть несколько проходов оптимизации для IR уровня 2, которые "
"применяются перед интерпретацией или переводом в машинный код."

#: ../../whatsnew/3.13.rst:401
msgid ""
"There is a Tier 2 interpreter, but it is mostly intended for debugging the "
"earlier stages of the optimization pipeline. The Tier 2 interpreter can be "
"enabled by configuring Python with ``--enable-experimental-jit=interpreter``."
msgstr ""
"Существует интерпретатор уровня 2, но он в основном предназначен для отладки "
"ранних этапов конвейера оптимизации. Интерпретатор уровня 2 можно включить, "
"настроив Python с помощью ``--enable-experimental-jit=interpreter``."

#: ../../whatsnew/3.13.rst:405
msgid ""
"When the JIT is enabled, the optimized Tier 2 IR is translated to machine "
"code, which is then executed."
msgstr ""
"Когда JIT включен, оптимизированный IR уровня 2 преобразуется в машинный "
"код, который затем выполняется."

#: ../../whatsnew/3.13.rst:407
msgid ""
"The machine code translation process uses a technique called *copy-and-"
"patch*. It has no runtime dependencies, but there is a new build-time "
"dependency on LLVM."
msgstr ""
"В процессе трансляции машинного кода используется метод, называемый "
"*копирование и исправление*. У него нет зависимостей во время выполнения, но "
"есть новая зависимость от LLVM во время сборки."

#: ../../whatsnew/3.13.rst:411
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.13.rst:413
msgid ""
"(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik "
"Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer "
"by Ken Jin.)"
msgstr ""
"(JIT Брандта Бухера, вдохновленный статьей Хаорана Сюя и Фредрика Кьолстада. "
"IR уровня 2 Марка Шеннона и Гвидо ван Россума. Оптимизатор уровня 2 Кена "
"Джина.)"

#: ../../whatsnew/3.13.rst:421
msgid "Defined mutation semantics for :py:func:`locals`"
msgstr "Определена семантика мутаций для :py:func:`locals`"

#: ../../whatsnew/3.13.rst:423
msgid ""
"Historically, the expected result of mutating the return value of :func:"
"`locals` has been left to individual Python implementations to define. "
"Starting from Python 3.13, :pep:`667` standardises the historical behavior "
"of CPython for most code execution scopes, but changes :term:`optimized "
"scopes <optimized scope>` (functions, generators, coroutines, "
"comprehensions, and generator expressions) to explicitly return independent "
"snapshots of the currently assigned local variables, including locally "
"referenced nonlocal variables captured in closures."
msgstr ""
"Исторически ожидаемый результат изменения возвращаемого значения :func:"
"`locals` оставлялся на усмотрение отдельных реализаций Python. Начиная с "
"Python 3.13, :pep:`667` стандартизирует историческое поведение CPython для "
"большинства областей выполнения кода, но изменяет :term:`оптимизированные "
"области <оптимизированная область>` (функции, генераторы, сопрограммы, "
"понимания и выражения генератора) на явно возвращать независимые снимки "
"назначенных в данный момент локальных переменных, включая локально "
"ссылающиеся нелокальные переменные, зафиксированные в замыканиях."

#: ../../whatsnew/3.13.rst:432
msgid ""
"This change to the semantics of :func:`locals` in optimized scopes also "
"affects the default behavior of code execution functions that implicitly "
"target :func:`!locals` if no explicit namespace is provided (such as :func:"
"`exec` and :func:`eval`). In previous versions, whether or not changes could "
"be accessed by calling :func:`!locals` after calling the code execution "
"function was implementation-dependent. In CPython specifically, such code "
"would typically appear to work as desired, but could sometimes fail in "
"optimized scopes based on other code (including debuggers and code execution "
"tracing tools) potentially resetting the shared snapshot in that scope. Now, "
"the code will always run against an independent snapshot of the local "
"variables in optimized scopes, and hence the changes will never be visible "
"in subsequent calls to :func:`!locals`. To access the changes made in these "
"cases, an explicit namespace reference must now be passed to the relevant "
"function. Alternatively, it may make sense to update affected code to use a "
"higher level code execution API that returns the resulting code execution "
"namespace (e.g. :func:`runpy.run_path` when executing Python files from "
"disk)."
msgstr ""
"Это изменение семантики :func:`locals` в оптимизированных областях также "
"влияет на поведение по умолчанию функций выполнения кода, которые неявно "
"нацелены на :func:`!locals`, если явно не указано пространство имен "
"(например, :func:`exec` и :func:`eval`). В предыдущих версиях возможность "
"доступа к изменениям путем вызова :func:`!locals` после вызова функции "
"выполнения кода зависела от реализации. В частности, в CPython такой код "
"обычно работает должным образом, но иногда может давать сбой в "
"оптимизированных областях, основанных на другом коде (включая отладчики и "
"инструменты отслеживания выполнения кода), что может привести к сбросу "
"общего моментального снимка в этой области. Теперь код всегда будет "
"выполняться с независимым снимком локальных переменных в оптимизированных "
"областях, и, следовательно, изменения никогда не будут видны при последующих "
"вызовах :func:`!locals`. Чтобы получить доступ к изменениям, внесенным в "
"этих случаях, теперь нужно передать явную ссылку на пространство имен "
"соответствующей функции. В качестве альтернативы может иметь смысл обновить "
"затронутый код, чтобы использовать API выполнения кода более высокого "
"уровня, который возвращает результирующее пространство имен выполнения кода "
"(например, :func:`runpy.run_path` при выполнении файлов Python с диска)."

#: ../../whatsnew/3.13.rst:451
msgid ""
"To ensure debuggers and similar tools can reliably update local variables in "
"scopes affected by this change, :attr:`FrameType.f_locals <frame.f_locals>` "
"now returns a write-through proxy to the frame's local and locally "
"referenced nonlocal variables in these scopes, rather than returning an "
"inconsistently updated shared ``dict`` instance with undefined runtime "
"semantics."
msgstr ""
"Чтобы отладчики и подобные инструменты могли надежно обновлять локальные "
"переменные в областях, затронутых этим изменением, :attr:`FrameType.f_locals "
"<frame.f_locals>` теперь возвращает прокси со сквозной записью для локальных "
"и локально ссылающихся нелокальных переменных фрейма в этих областях. вместо "
"того, чтобы возвращать непоследовательно обновляемый общий экземпляр "
"``dict`` с неопределенной семантикой времени выполнения."

#: ../../whatsnew/3.13.rst:457
msgid ""
"See :pep:`667` for more details, including related C API changes and "
"deprecations. Porting notes are also provided below for the affected :ref:"
"`Python APIs <pep667-porting-notes-py>` and :ref:`C APIs <pep667-porting-"
"notes-c>`."
msgstr ""
"См. :pep:`667` для получения более подробной информации, включая "
"соответствующие изменения и устаревания C API. Ниже также приведены "
"примечания по переносу затронутых API :ref:`Python <pep667-porting-notes-"
"py>` и :ref:`C API <pep667-porting-notes-c>`."

#: ../../whatsnew/3.13.rst:462
msgid ""
"(PEP and implementation contributed by Mark Shannon and Tian Gao in :gh:"
"`74929`. Documentation updates provided by Guido van Rossum and Alyssa "
"Coghlan.)"
msgstr ""
"(PEP и реализация предоставлены Марком Шенноном и Тианом Гао в :gh:`74929`. "
"Обновления документации предоставлены Гвидо ван Россумом и Алиссой Коглан.)"

#: ../../whatsnew/3.13.rst:470
msgid "Support for mobile platforms"
msgstr "Поддержка мобильных платформ"

#: ../../whatsnew/3.13.rst:472
msgid ""
":pep:`730`: iOS is now a :pep:`11` supported platform, with the ``arm64-"
"apple-ios`` and ``arm64-apple-ios-simulator`` targets at tier 3 (iPhone and "
"iPad devices released after 2013 and the Xcode iOS simulator running on "
"Apple silicon hardware, respectively). ``x86_64-apple-ios-simulator`` (the "
"Xcode iOS simulator running on older ``x86_64`` hardware) is not a tier 3 "
"supported platform, but will have best-effort support. (PEP written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""
":pep:`730`: iOS теперь является платформой, поддерживаемой :pep:`11`, а "
"``arm64-apple-ios`` и ``arm64-apple-ios-simulator`` нацелены на уровень 3 "
"(iPhone и устройства iPad, выпущенные после 2013 года, и симулятор Xcode "
"iOS, работающий на кремниевом оборудовании Apple соответственно). ``x86_64-"
"apple-ios-simulator`` (симулятор Xcode iOS, работающий на более старом "
"оборудовании ``x86_64``) не является платформой с поддержкой уровня 3, но "
"будет иметь максимальную поддержку. (PEP написан и реализован Расселом Китом-"
"Маги в :gh:`114099`.)"

#: ../../whatsnew/3.13.rst:482
msgid ""
":pep:`738`: Android is now a :pep:`11` supported platform, with the "
"``aarch64-linux-android`` and ``x86_64-linux-android`` targets at tier 3. "
"The 32-bit targets ``arm-linux-androideabi`` and ``i686-linux-android`` are "
"not tier 3 supported platforms, but will have best-effort support. (PEP "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
":pep:`738`: Android теперь является платформой, поддерживаемой :pep:`11`, "
"при этом ``aarch64-linux-android`` и ``x86_64-linux-android`` нацелены на "
"уровень 3. 32-битная версия целевые устройства «arm-linux-androideabi» и "
"«i686-linux-android» не являются платформами, поддерживаемыми уровнем 3, но "
"будут иметь максимальную поддержку. (PEP написан и реализован Малкольмом "
"Смитом в :gh:`116622`.)"

#: ../../whatsnew/3.13.rst:489
msgid ":pep:`730`, :pep:`738`"
msgstr ":pep:`730`, :pep:`738`"

#: ../../whatsnew/3.13.rst:493
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/3.13.rst:495
msgid ""
"The compiler now strips common leading whitespace from every line in a "
"docstring. This reduces the size of the :term:`bytecode cache <bytecode>` "
"(such as ``.pyc`` files), with reductions in file size of around 5%, for "
"example in :mod:`!sqlalchemy.orm.session` from SQLAlchemy 2.0. This change "
"affects tools that use docstrings, such as :mod:`doctest`."
msgstr ""
"Компилятор теперь удаляет общие начальные пробелы из каждой строки строки "
"документации. Это уменьшает размер :term:`кеша байт-кода <bytecode>` "
"(например, файлов ``.pyc``), при этом размер файла уменьшается примерно на "
"5 %, например, в :mod:`!sqlalchemy.orm. session` из SQLAlchemy 2.0. Это "
"изменение затрагивает инструменты, использующие строки документации, такие "
"как :mod:`doctest`."

#: ../../whatsnew/3.13.rst:502
msgid ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has "
"multiple paragraphs!\\n'"
msgstr ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has "
"multiple paragraphs!\\n'"

#: ../../whatsnew/3.13.rst:515
msgid "(Contributed by Inada Naoki in :gh:`81283`.)"
msgstr "(Предоставлено Инадой Наоки в :gh:`81283`.)"

#: ../../whatsnew/3.13.rst:517
msgid ""
":ref:`Annotation scopes <annotation-scopes>` within class scopes can now "
"contain lambdas and comprehensions. Comprehensions that are located within "
"class scopes are not inlined into their parent scope."
msgstr ""
":ref:`Области аннотаций <annotation-scopes>` внутри областей классов теперь "
"могут содержать лямбда-выражения и определения. Понятия, расположенные "
"внутри областей классов, не встроены в их родительскую область."

#: ../../whatsnew/3.13.rst:522
msgid ""
"class C[T]:\n"
"    type Alias = lambda: T"
msgstr ""
"class C[T]:\n"
"    type Alias = lambda: T"

#: ../../whatsnew/3.13.rst:527
msgid "(Contributed by Jelle Zijlstra in :gh:`109118` and :gh:`118160`.)"
msgstr "(Предоставлено Джелле Зийлстра в :gh:`109118` и :gh:`118160`.)"

#: ../../whatsnew/3.13.rst:529
msgid ""
":ref:`Future statements <future>` are no longer triggered by relative "
"imports of the :mod:`__future__` module, meaning that statements of the form "
"``from .__future__ import ...`` are now simply standard relative imports, "
"with no special features activated. (Contributed by Jeremiah Gabriel Pascual "
"in :gh:`118216`.)"
msgstr ""
":ref:`Операторы Future <future>` больше не запускаются относительным "
"импортом модуля :mod:`__future__`, а это означает, что операторы формы "
"``from .__future__ import ...`` теперь являются просто стандартным "
"относительным импортом , без каких-либо активированных специальных функций. "
"(Предоставлено Иеремией Габриэлем Паскуалем в :gh:`118216`.)"

#: ../../whatsnew/3.13.rst:535
msgid ""
":keyword:`global` declarations are now permitted in :keyword:`except` blocks "
"when that global is used in the :keyword:`else` block. Previously this "
"raised an erroneous :exc:`SyntaxError`. (Contributed by Irit Katriel in :gh:"
"`111123`.)"
msgstr ""
"Объявления :keyword:`global` теперь разрешены в блоках :keyword:`Exception`, "
"если этот глобальный объект используется в блоке :keyword:`else`. Ранее это "
"вызывало ошибочную ошибку :exc:`SyntaxError`. (Предоставлено Ирит Катриэль "
"в :gh:`111123`.)"

#: ../../whatsnew/3.13.rst:540
msgid ""
"Add :envvar:`PYTHON_FROZEN_MODULES`, a new environment variable that "
"determines whether frozen modules are ignored by the import machinery, "
"equivalent to the :option:`-X frozen_modules <-X>` command-line option. "
"(Contributed by Yilei Yang in :gh:`111374`.)"
msgstr ""
"Добавьте :envvar:`PYTHON_FROZEN_MODULES`, новую переменную среды, которая "
"определяет, игнорируются ли замороженные модули механизмом импорта, что "
"эквивалентно параметру командной строки :option:`-X замороженные_модули <-"
"X>`. (Предоставлено Илей Яном в :gh:`111374`.)"

#: ../../whatsnew/3.13.rst:545
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` working without "
"`frame pointers <https://en.wikipedia.org/wiki/Call_stack>`_ through the new "
"environment variable :envvar:`PYTHON_PERF_JIT_SUPPORT` and command-line "
"option :option:`-X perf_jit <-X>`. (Contributed by Pablo Galindo in :gh:"
"`118518`.)"
msgstr ""
"Добавьте :ref:`поддержку профилировщика производительности "
"<perf_profiling>`, работающего без `указателей кадров <https://en.wikipedia."
"org/wiki/Call_stack>`_ через новую переменную среды :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` и команду- опция строки :option:`-X perf_jit <-"
"X>`. (Предоставлено Пабло Галиндо в :gh:`118518`.)"

#: ../../whatsnew/3.13.rst:551
msgid ""
"The location of a :file:`.python_history` file can be changed via the new :"
"envvar:`PYTHON_HISTORY` environment variable. (Contributed by Levi Sabah, "
"Zackery Spytz and Hugo van Kemenade in :gh:`73965`.)"
msgstr ""
"Местоположение файла :file:`.python_history` можно изменить с помощью новой "
"переменной среды :envvar:`PYTHON_HISTORY`. (Предоставлено Леви Сабахом, "
"Закери Шпитцем и Хьюго ван Кеменаде в :gh:`73965`.)"

#: ../../whatsnew/3.13.rst:556
msgid ""
"Classes have a new :attr:`~type.__static_attributes__` attribute. This is "
"populated by the compiler with a tuple of the class's attribute names which "
"are assigned through ``self.<name>`` from any function in its body. "
"(Contributed by Irit Katriel in :gh:`115775`.)"
msgstr ""
"У классов появился новый атрибут :attr:`~type.__static_attributes__`. "
"Компилятор заполняет его кортежем имен атрибутов класса, которые назначаются "
"через ``self.<name>`` из любой функции в его теле. (Предоставлено Ирит "
"Катриэль в :gh:`115775`.)"

#: ../../whatsnew/3.13.rst:561
msgid ""
"The compiler now creates a :attr:`!__firstlineno__` attribute on classes "
"with the line number of the first line of the class definition. (Contributed "
"by Serhiy Storchaka in :gh:`118465`.)"
msgstr ""
"Теперь компилятор создает атрибут :attr:`!__firstlineno__` для классов с "
"номером первой строки определения класса. (Предоставлено Сергеем Сторчакой в ​​"
":gh:`118465`.)"

#: ../../whatsnew/3.13.rst:565
msgid ""
"The :func:`exec` and :func:`eval` builtins now accept the *globals* and "
"*locals* arguments as keywords. (Contributed by Raphael Gaschignard in :gh:"
"`105879`)"
msgstr ""
"Встроенные функции :func:`exec` и :func:`eval` теперь принимают аргументы "
"*globals* и *locals* в качестве ключевых слов. (Предоставлено Рафаэлем "
"Гашиньяром в :gh:`105879`)"

#: ../../whatsnew/3.13.rst:569
msgid ""
"The :func:`compile` builtin now accepts a new flag, ``ast."
"PyCF_OPTIMIZED_AST``, which is similar to ``ast.PyCF_ONLY_AST`` except that "
"the returned AST is optimized according to the value of the *optimize* "
"argument. (Contributed by Irit Katriel in :gh:`108113`)."
msgstr ""
"Встроенная функция :func:`compile` теперь принимает новый флаг ``ast."
"PyCF_OPTIMIZED_AST``, который похож на ``ast.PyCF_ONLY_AST``, за исключением "
"того, что возвращаемый AST оптимизируется в соответствии со значением "
"аргумента *optimize*. . (Предоставлено Ирит Катриэль в :gh:`108113`)."

#: ../../whatsnew/3.13.rst:575
msgid ""
"Add a :attr:`~property.__name__` attribute on :class:`property` objects. "
"(Contributed by Eugene Toder in :gh:`101860`.)"
msgstr ""
"Добавьте атрибут :attr:`~property.__name__` к объектам :class:`property`. "
"(Предоставлено Юджином Тодером в :gh:`101860`.)"

#: ../../whatsnew/3.13.rst:578
msgid ""
"Add :exc:`PythonFinalizationError`, a new exception derived from :exc:"
"`RuntimeError` and used to signal when operations are blocked during :term:"
"`finalization <interpreter shutdown>`. The following callables now raise :"
"exc:`!PythonFinalizationError`, instead of :exc:`RuntimeError`:"
msgstr ""
"Добавьте :exc:`PythonFinalizationError`, новое исключение, полученное из :"
"exc:`RuntimeError` и используемое для сигнализации, когда операции "
"блокируются во время :term:`finalization <interpreter Shutdown>`. Следующие "
"вызываемые объекты теперь вызывают :exc:`!PythonFinalizationError` вместо :"
"exc:`RuntimeError`:"

#: ../../whatsnew/3.13.rst:584
msgid ":func:`_thread.start_new_thread`"
msgstr ":func:`_thread.start_new_thread`"

#: ../../whatsnew/3.13.rst:585
msgid ":func:`os.fork`"
msgstr ":func:`os.fork`"

#: ../../whatsnew/3.13.rst:586
msgid ":func:`os.forkpty`"
msgstr ":func:`os.forkpty`"

#: ../../whatsnew/3.13.rst:587
msgid ":class:`subprocess.Popen`"
msgstr ":class:`subprocess.Popen`"

#: ../../whatsnew/3.13.rst:589
msgid "(Contributed by Victor Stinner in :gh:`114570`.)"
msgstr "(Предоставлено Виктором Стиннером в :gh:`114570`.)"

#: ../../whatsnew/3.13.rst:591
msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""
"Разрешить аргументу *count* :meth:`str.replace` быть ключевым словом. "
"(Предоставлено Хьюго ван Кеменаде в :gh:`106487`.)"

#: ../../whatsnew/3.13.rst:594
msgid ""
"Many functions now emit a warning if a boolean value is passed as a file "
"descriptor argument. This can help catch some errors earlier. (Contributed "
"by Serhiy Storchaka in :gh:`82626`.)"
msgstr ""
"Многие функции теперь выдают предупреждение, если в качестве аргумента "
"файлового дескриптора передается логическое значение. Это может помочь "
"обнаружить некоторые ошибки раньше. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`82626`.)"

#: ../../whatsnew/3.13.rst:599
msgid ""
"Added :attr:`!name` and :attr:`!mode` attributes for compressed and archived "
"file-like objects in the :mod:`bz2`, :mod:`lzma`, :mod:`tarfile`, and :mod:"
"`zipfile` modules. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
"Добавлены атрибуты :attr:`!name` и :attr:`!mode` для сжатых и архивированных "
"файловых объектов в :mod:`bz2`, :mod:`lzma`, :mod:`tarfile` и : mod:"
"`zipfile` модули. (Предоставлено Сергеем Сторчакой в ​​:gh:`115961`.)"

#: ../../whatsnew/3.13.rst:606
msgid "New Modules"
msgstr "Новые модули"

#: ../../whatsnew/3.13.rst:608
msgid ""
":mod:`dbm.sqlite3`: An SQLite backend for :mod:`dbm`. (Contributed by "
"Raymond Hettinger and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
":mod:`dbm.sqlite3`: Серверная часть SQLite для :mod:`dbm`. (Предоставлено "
"Рэймондом Хеттингером и Эрлендом Э. Осландом в :gh:`100414`.)"

#: ../../whatsnew/3.13.rst:613
msgid "Improved Modules"
msgstr "Улучшенные модули"

#: ../../whatsnew/3.13.rst:617
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.13.rst:619
msgid ""
"Add the *deprecated* parameter to the :meth:`~argparse.ArgumentParser."
"add_argument` and :meth:`!add_parser` methods, to enable deprecating command-"
"line options, positional arguments, and subcommands. (Contributed by Serhiy "
"Storchaka in :gh:`83648`.)"
msgstr ""
"Добавьте параметр *deprecated* к методам :meth:`~argparse.ArgumentParser."
"add_argument` и :meth:`!add_parser`, чтобы включить устаревшие параметры "
"командной строки, позиционные аргументы и подкоманды. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`83648`.)"

#: ../../whatsnew/3.13.rst:627
msgid "array"
msgstr "array"

#: ../../whatsnew/3.13.rst:629
msgid ""
"Add the ``'w'`` type code (``Py_UCS4``) for Unicode characters. It should be "
"used instead of the deprecated ``'u'`` type code. (Contributed by Inada "
"Naoki in :gh:`80480`.)"
msgstr ""
"Добавьте код типа ``'w'`` (``Py_UCS4``) для символов Юникода. Его следует "
"использовать вместо устаревшего кода типа ``'u'``. (Предоставлено Инадой "
"Наоки в :gh:`80480`.)"

#: ../../whatsnew/3.13.rst:633
msgid ""
"Register :class:`array.array` as a :class:`~collections.abc.MutableSequence` "
"by implementing the :meth:`~array.array.clear` method. (Contributed by Mike "
"Zimin in :gh:`114894`.)"
msgstr ""
"Зарегистрируйте :class:`array.array` как :class:`~collections.abc."
"MutableSequence`, реализовав метод :meth:`~array.array.clear`. "
"(Предоставлено Майком Зиминым в :gh:`114894`.)"

#: ../../whatsnew/3.13.rst:639
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.13.rst:641
msgid ""
"The constructors of node types in the :mod:`ast` module are now stricter in "
"the arguments they accept, with more intuitive behavior when arguments are "
"omitted."
msgstr ""
"Конструкторы типов узлов в модуле :mod:`ast` теперь более строги в отношении "
"принимаемых аргументов и имеют более интуитивное поведение, когда аргументы "
"опущены."

#: ../../whatsnew/3.13.rst:645
msgid ""
"If an optional field on an AST node is not included as an argument when "
"constructing an instance, the field will now be set to ``None``. Similarly, "
"if a list field is omitted, that field will now be set to an empty list, and "
"if an :class:`!expr_context` field is omitted, it defaults to :class:`Load() "
"<ast.Load>`. (Previously, in all cases, the attribute would be missing on "
"the newly constructed AST node instance.)"
msgstr ""
"Если необязательное поле на узле AST не включено в качестве аргумента при "
"создании экземпляра, для этого поля теперь будет установлено значение «Нет». "
"Аналогично, если поле списка опущено, это поле теперь будет установлено как "
"пустой список, а если поле :class:`!expr_context` опущено, по умолчанию оно "
"будет иметь значение :class:`Load() <ast.Load>` . (Раньше во всех случаях "
"атрибут отсутствовал во вновь созданном экземпляре узла AST.)"

#: ../../whatsnew/3.13.rst:653
msgid ""
"In all other cases, where a required argument is omitted, the node "
"constructor will emit a :exc:`DeprecationWarning`. This will raise an "
"exception in Python 3.15. Similarly, passing a keyword argument to the "
"constructor that does not map to a field on the AST node is now deprecated, "
"and will raise an exception in Python 3.15."
msgstr ""
"Во всех остальных случаях, когда обязательный аргумент опущен, конструктор "
"узла выдаст :exc:`DeprecationWarning`. Это вызовет исключение в Python 3.15. "
"Аналогично, передача аргумента ключевого слова в конструктор, который не "
"сопоставляется с полем на узле AST, теперь устарела и вызовет исключение в "
"Python 3.15."

#: ../../whatsnew/3.13.rst:660
msgid ""
"These changes do not apply to user-defined subclasses of :class:`ast.AST` "
"unless the class opts in to the new behavior by defining the :attr:`.AST."
"_field_types` mapping."
msgstr ""
"Эти изменения не применяются к определяемым пользователем подклассам :class:"
"`ast.AST`, если только класс не согласится на новое поведение, определив "
"отображение :attr:`.AST._field_types`."

#: ../../whatsnew/3.13.rst:664
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`105858`, :gh:`117486`, and :gh:"
"`118851`.)"
msgstr ""
"(Предоставлено Джелле Зийлстра в :gh:`105858`, :gh:`117486` и :gh:`118851`.)"

#: ../../whatsnew/3.13.rst:666
msgid ""
":func:`ast.parse` now accepts an optional argument *optimize* which is "
"passed on to :func:`compile`. This makes it possible to obtain an optimized "
"AST. (Contributed by Irit Katriel in :gh:`108113`.)"
msgstr ""
":func:`ast.parse` теперь принимает необязательный аргумент *optimize*, "
"который передается в :func:`compile`. Это позволяет получить "
"оптимизированный АСТ. (Предоставлено Ирит Катриэль в :gh:`108113`.)"

#: ../../whatsnew/3.13.rst:673
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.13.rst:675
msgid ""
":func:`asyncio.as_completed` now returns an object that is both an :term:"
"`asynchronous iterator` and a plain :term:`iterator` of :term:`awaitables "
"<awaitable>`. The awaitables yielded by asynchronous iteration include "
"original task or future objects that were passed in, making it easier to "
"associate results with the tasks being completed. (Contributed by Justin "
"Arthur in :gh:`77714`.)"
msgstr ""
":func:`asyncio.as_completed` теперь возвращает объект, который одновременно "
"является :term:`асинхронным итератором` и простым :term:`итератором` :term:"
"`awaitables <awaitable>`. Ожидаемые объекты, полученные в результате "
"асинхронной итерации, включают исходную задачу или будущие объекты, которые "
"были переданы, что упрощает связывание результатов с выполняемыми задачами. "
"(Предоставлено Джастином Артуром в :gh:`77714`.)"

#: ../../whatsnew/3.13.rst:683
msgid ""
":meth:`asyncio.loop.create_unix_server` will now automatically remove the "
"Unix socket when the server is closed. (Contributed by Pierre Ossman in :gh:"
"`111246`.)"
msgstr ""
":meth:`asyncio.loop.create_unix_server` теперь будет автоматически удалять "
"сокет Unix при закрытии сервера. (Предоставлено Пьером Оссманом в :gh:"
"`111246`.)"

#: ../../whatsnew/3.13.rst:687
msgid ""
":meth:`.DatagramTransport.sendto` will now send zero-length datagrams if "
"called with an empty bytes object. The transport flow control also now "
"accounts for the datagram header when calculating the buffer size. "
"(Contributed by Jamie Phan in :gh:`115199`.)"
msgstr ""
":meth:`.DatagramTransport.sendto` теперь будет отправлять датаграммы нулевой "
"длины, если вызывается с пустым байтовым объектом. Управление транспортным "
"потоком теперь также учитывает заголовок дейтаграммы при вычислении размера "
"буфера. (Предоставлено Джейми Фаном в :gh:`115199`.)"

#: ../../whatsnew/3.13.rst:693
msgid ""
"Add :meth:`Queue.shutdown <asyncio.Queue.shutdown>` and :exc:`~asyncio."
"QueueShutDown` to manage queue termination. (Contributed by Laurie Opperman "
"and Yves Duprat in :gh:`104228`.)"
msgstr ""
"Добавьте :meth:`Queue.shutdown <asyncio.Queue.shutdown>` и :exc:`~asyncio."
"QueueShutDown` для управления завершением очереди. (Предоставлено Лори "
"Опперман и Ивом Дюпра в :gh:`104228`.)"

#: ../../whatsnew/3.13.rst:697
msgid ""
"Add the :meth:`.Server.close_clients` and :meth:`.Server.abort_clients` "
"methods, which more forcefully close an asyncio server. (Contributed by "
"Pierre Ossman in :gh:`113538`.)"
msgstr ""
"Добавьте методы :meth:`.Server.close_clients` и :meth:`.Server."
"abort_clients`, которые более принудительно закрывают асинхронный сервер. "
"(Предоставлено Пьером Оссманом в :gh:`113538`.)"

#: ../../whatsnew/3.13.rst:701
msgid ""
"Accept a tuple of separators in :meth:`.StreamReader.readuntil`, stopping "
"when any one of them is encountered. (Contributed by Bruce Merry in :gh:"
"`81322`.)"
msgstr ""
"Примите кортеж разделителей в :meth:`.StreamReader.readuntil`, "
"останавливаясь при обнаружении любого из них. (Предоставлено Брюсом Мерри в :"
"gh:`81322`.)"

#: ../../whatsnew/3.13.rst:705
msgid ""
"Improve the behavior of :class:`~asyncio.TaskGroup` when an external "
"cancellation collides with an internal cancellation. For example, when two "
"task groups are nested and both experience an exception in a child task "
"simultaneously, it was possible that the outer task group would hang, "
"because its internal cancellation was swallowed by the inner task group."
msgstr ""
"Улучшено поведение :class:`~asyncio.TaskGroup`, когда внешняя отмена "
"конфликтует с внутренней отменой. Например, если две группы задач вложены и "
"в обеих одновременно возникает исключение в дочерней задаче, возможно, что "
"внешняя группа задач зависнет, поскольку ее внутренняя отмена была "
"проглочена внутренней группой задач."

#: ../../whatsnew/3.13.rst:712
msgid ""
"In the case where a task group is cancelled externally and also must raise "
"an :exc:`ExceptionGroup`, it will now call the parent task's :meth:`~asyncio."
"Task.cancel` method. This ensures that a :exc:`~asyncio.CancelledError` will "
"be raised at the next :keyword:`await`, so the cancellation is not lost."
msgstr ""
"В случае, когда группа задач отменяется извне и ей также необходимо вызвать :"
"exc:`ExceptionGroup`, она теперь вызывает метод :meth:`~asyncio.Task.cancel` "
"родительской задачи. Это гарантирует, что при следующем :keyword:`await` "
"будет вызвана ошибка :exc:`~asyncio.CancelledError`, поэтому отмена не будет "
"потеряна."

#: ../../whatsnew/3.13.rst:718
msgid ""
"An added benefit of these changes is that task groups now preserve the "
"cancellation count (:meth:`~asyncio.Task.cancelling`)."
msgstr ""
"Дополнительным преимуществом этих изменений является то, что группы задач "
"теперь сохраняют счетчик отмены (:meth:`~asyncio.Task.cancelling`)."

#: ../../whatsnew/3.13.rst:721
msgid ""
"In order to handle some corner cases, :meth:`~asyncio.Task.uncancel` may now "
"reset the undocumented ``_must_cancel`` flag when the cancellation count "
"reaches zero."
msgstr ""
"Чтобы обработать некоторые крайние случаи, :meth:`~asyncio.Task.uncancel` "
"теперь может сбрасывать недокументированный флаг ``_must_cancel``, когда "
"счетчик отмены достигает нуля."

#: ../../whatsnew/3.13.rst:725
msgid "(Inspired by an issue reported by Arthur Tacca in :gh:`116720`.)"
msgstr "(Вдохновлено проблемой, о которой сообщил Артур Такка в :gh:`116720`.)"

#: ../../whatsnew/3.13.rst:727
msgid ""
"When :meth:`.TaskGroup.create_task` is called on an inactive :class:"
"`~asyncio.TaskGroup`, the given coroutine will be closed (which prevents a :"
"exc:`RuntimeWarning` about the given coroutine being never awaited). "
"(Contributed by Arthur Tacca and Jason Zhang in :gh:`115957`.)"
msgstr ""
"Когда :meth:`.TaskGroup.create_task` вызывается для неактивной :class:"
"`~asyncio.TaskGroup`, данная сопрограмма будет закрыта (что предотвращает :"
"exc:`RuntimeWarning` о том, что данная сопрограмма никогда не ожидается). "
"(Предоставлено Артуром Таккой и Джейсоном Чжаном в :gh:`115957`.)"

#: ../../whatsnew/3.13.rst:733
msgid ""
"The function and methods named ``create_task`` have received a new "
"``**kwargs`` argument that is passed through to the task constructor. This "
"change was accidentally added in 3.13.3, and broke the API contract for "
"custom task factories. Several third-party task factories implemented "
"workarounds for this. In 3.13.4 and later releases the old factory contract "
"is honored once again (until 3.14). To keep the workarounds working, the "
"extra ``**kwargs`` argument still allows passing additional keyword "
"arguments to :class:`~asyncio.Task` and to custom task factories."
msgstr ""

#: ../../whatsnew/3.13.rst:744
msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:751
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.13.rst:753
msgid ""
"Add :func:`~base64.z85encode` and :func:`~base64.z85decode` functions for "
"encoding :class:`bytes` as `Z85 data`_ and decoding Z85-encoded data to :"
"class:`!bytes`. (Contributed by Matan Perelman in :gh:`75299`.)"
msgstr ""
"Добавьте функции :func:`~base64.z85encode` и :func:`~base64.z85decode` для "
"кодирования :class:`bytes` как `данных Z85`_ и декодирования данных в "
"кодировке Z85 в :class:`!bytes`. (Предоставлено Матаном Перельманом в :gh:"
"`75299`.)"

#: ../../whatsnew/3.13.rst:762
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.13.rst:764 ../../whatsnew/3.13.rst:772
#: ../../whatsnew/3.13.rst:1031
msgid ""
"The default number of worker threads and processes is now selected using :"
"func:`os.process_cpu_count` instead of :func:`os.cpu_count`. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""
"Количество рабочих потоков и процессов по умолчанию теперь выбирается с "
"помощью :func:`os.process_cpu_count` вместо :func:`os.cpu_count`. "
"(Предоставлено Виктором Стиннером в :gh:`109649`.)"

#: ../../whatsnew/3.13.rst:770
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.13.rst:778 ../../whatsnew/3.13.rst:1680
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.13.rst:780
msgid ""
":class:`~configparser.ConfigParser` now has support for unnamed sections, "
"which allows for top-level key-value pairs. This can be enabled with the new "
"*allow_unnamed_section* parameter. (Contributed by Pedro Sousa Lacerda in :"
"gh:`66449`.)"
msgstr ""
":class:`~configparser.ConfigParser` теперь поддерживает безымянные разделы, "
"что позволяет использовать пары ключ-значение верхнего уровня. Это можно "
"включить с помощью нового параметра *allow_unnamed_section*. (Предоставлено "
"Педро Соузой Ласердой в :gh:`66449`.)"

#: ../../whatsnew/3.13.rst:787
msgid "copy"
msgstr "копировать"

#: ../../whatsnew/3.13.rst:789
msgid ""
"The new :func:`~copy.replace` function and the :meth:`replace protocol "
"<object.__replace__>` make creating modified copies of objects much simpler. "
"This is especially useful when working with immutable objects. The following "
"types support the :func:`~copy.replace` function and implement the replace "
"protocol:"
msgstr ""
"Новая функция :func:`~copy.replace` и протокол :meth:`replace <object."
"__replace__>` значительно упрощают создание измененных копий объектов. Это "
"особенно полезно при работе с неизменяемыми объектами. Следующие типы "
"поддерживают функцию :func:`~copy.replace` и реализуют протокол замены:"

#: ../../whatsnew/3.13.rst:795
msgid ":func:`collections.namedtuple`"
msgstr ":func:`collections.namedtuple`"

#: ../../whatsnew/3.13.rst:796
msgid ":class:`dataclasses.dataclass`"
msgstr ":class:`dataclasses.dataclass`"

#: ../../whatsnew/3.13.rst:797
msgid ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"
msgstr ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"

#: ../../whatsnew/3.13.rst:798
msgid ":class:`inspect.Signature`, :class:`inspect.Parameter`"
msgstr ":class:`inspect.Signature`, :class:`inspect.Parameter`"

#: ../../whatsnew/3.13.rst:799
msgid ":class:`types.SimpleNamespace`"
msgstr ":class:`types.SimpleNamespace`"

#: ../../whatsnew/3.13.rst:800
msgid ":ref:`code objects <code-objects>`"
msgstr ":ref:`code objects <code-objects>`"

#: ../../whatsnew/3.13.rst:802
msgid ""
"Any user-defined class can also support :func:`copy.replace` by defining "
"the :meth:`~object.__replace__` method. (Contributed by Serhiy Storchaka in :"
"gh:`108751`.)"
msgstr ""
"Любой пользовательский класс также может поддерживать :func:`copy.replace`, "
"определяя метод :meth:`~object.__replace__`. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`108751`.)"

#: ../../whatsnew/3.13.rst:808
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.13.rst:810
msgid ""
"As a consequence of necessary internal refactoring, initialization of "
"internal metaclasses now happens in ``__init__`` rather than in ``__new__``. "
"This affects projects that subclass these internal metaclasses to provide "
"custom initialization. Generally:"
msgstr ""
"В результате необходимого внутреннего рефакторинга инициализация внутренних "
"метаклассов теперь происходит в ``__init__``, а не в ``__new__``. Это влияет "
"на проекты, которые создают подклассы этих внутренних метаклассов для "
"обеспечения пользовательской инициализации. В целом:"

#: ../../whatsnew/3.13.rst:816
msgid ""
"Custom logic that was done in ``__new__`` after calling ``super().__new__`` "
"should be moved to ``__init__``."
msgstr ""
"Пользовательская логика, которая была создана в ``__new__`` после вызова "
"``super().__new__``, должна быть перенесена в ``__init__``."

#: ../../whatsnew/3.13.rst:818
msgid ""
"To create a class, call the metaclass, not only the metaclass's ``__new__`` "
"method."
msgstr ""
"Чтобы создать класс, вызовите метакласс, а не только метод метакласса "
"``__new__``."

#: ../../whatsnew/3.13.rst:821
msgid ""
"See :gh:`124520` for discussion and links to changes in some affected "
"projects."
msgstr ""
"См. :gh:`124520` для обсуждения и ссылок на изменения в некоторых затронутых "
"проектах."

#: ../../whatsnew/3.13.rst:824
msgid ""
":class:`ctypes.Structure` objects have a new :attr:`~ctypes.Structure."
"_align_` attribute which allows the alignment of the structure being packed "
"to/from memory to be specified explicitly. (Contributed by Matt Sanderson "
"in :gh:`112433`)"
msgstr ""
"Объекты :class:`ctypes.Structure` имеют новый атрибут :attr:`~ctypes."
"Structure._align_`, который позволяет явно указывать выравнивание структуры, "
"упаковываемой в память или из памяти. (Предоставлено Мэттом Сандерсоном в :"
"gh:`112433`)"

#: ../../whatsnew/3.13.rst:830
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.13.rst:832
msgid ""
"Add :mod:`dbm.sqlite3`, a new module which implements an SQLite backend, and "
"make it the default :mod:`!dbm` backend. (Contributed by Raymond Hettinger "
"and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
"Добавьте :mod:`dbm.sqlite3`, новый модуль, реализующий бэкэнд SQLite, и "
"сделайте его бэкэндом по умолчанию :mod:`!dbm`. (Предоставлено Рэймондом "
"Хеттингером и Эрлендом Э. Осландом в :gh:`100414`.)"

#: ../../whatsnew/3.13.rst:836
msgid ""
"Allow removing all items from the database through the new :meth:`.gdbm."
"clear` and :meth:`.ndbm.clear` methods. (Contributed by Donghee Na in :gh:"
"`107122`.)"
msgstr ""
"Разрешить удаление всех элементов из базы данных с помощью новых методов :"
"meth:`.gdbm.clear` и :meth:`.ndbm.clear`. (Предоставлено Донхи На в :gh:"
"`107122`.)"

#: ../../whatsnew/3.13.rst:842
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.13.rst:844
msgid ""
"Change the output of :mod:`dis` module functions to show logical labels for "
"jump targets and exception handlers, rather than offsets. The offsets can be "
"added with the new :option:`-O <dis --show-offsets>` command-line option or "
"the *show_offsets* argument. (Contributed by Irit Katriel in :gh:`112137`.)"
msgstr ""
"Измените вывод функций модуля :mod:`dis`, чтобы отображать логические метки "
"для целей перехода и обработчиков исключений, а не смещений. Смещения можно "
"добавить с помощью новой опции командной строки :option:`-O <dis --show-"
"offsets>` или аргумента *show_offsets*. (Предоставлено Ирит Катриэль в :gh:"
"`112137`.)"

#: ../../whatsnew/3.13.rst:851
msgid ""
":meth:`~dis.get_instructions` no longer represents cache entries as separate "
"instructions. Instead, it returns them as part of the :class:`~dis."
"Instruction`, in the new *cache_info* field. The *show_caches* argument to :"
"meth:`~dis.get_instructions` is deprecated and no longer has any effect. "
"(Contributed by Irit Katriel in :gh:`112962`.)"
msgstr ""
":meth:`~dis.get_instructions` больше не представляет записи кэша как "
"отдельные инструкции. Вместо этого он возвращает их как часть :class:`~dis."
"Instruction`, в новом поле *cache_info*. Аргумент *show_caches* для :meth:"
"`~dis.get_instructions` устарел и больше не имеет никакого эффекта. "
"(Предоставлено Ирит Катриэль в :gh:`112962`.)"

#: ../../whatsnew/3.13.rst:863
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.13.rst:865
msgid ""
":mod:`doctest` output is now colored by default. This can be controlled via "
"the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. See also :"
"ref:`using-on-controlling-color`. (Contributed by Hugo van Kemenade in :gh:"
"`117225`.)"
msgstr ""
":mod:`doctest` вывод теперь окрашен по умолчанию. Этим можно управлять с "
"помощью новой переменной среды :envvar:`PYTHON_COLORS`, а также "
"канонического |NO_COLOR|_ и |FORCE_COLOR|_ переменные среды. См. также :ref:"
"`using-on-controlling-color`. (Предоставлено Хьюго ван Кеменаде в :gh:"
"`117225`.)"

#: ../../whatsnew/3.13.rst:872
msgid ""
"The :meth:`.DocTestRunner.run` method now counts the number of skipped "
"tests. Add the :attr:`.DocTestRunner.skips` and :attr:`.TestResults.skipped` "
"attributes. (Contributed by Victor Stinner in :gh:`108794`.)"
msgstr ""
"Метод :meth:`.DocTestRunner.run` теперь подсчитывает количество пропущенных "
"тестов. Добавьте атрибуты :attr:`.DocTestRunner.skips` и :attr:`.TestResults."
"skipped`. (Предоставлено Виктором Стиннером в :gh:`108794`.)"

#: ../../whatsnew/3.13.rst:878
msgid "email"
msgstr "электронная почта"

#: ../../whatsnew/3.13.rst:880
msgid ""
"Headers with embedded newlines are now quoted on output. The :mod:`~email."
"generator` will now refuse to serialize (write) headers that are improperly "
"folded or delimited, such that they would be parsed as multiple headers or "
"joined with adjacent data. If you need to turn this safety feature off, set :"
"attr:`~email.policy.Policy.verify_generated_headers`. (Contributed by Bas "
"Bloemsaat and Petr Viktorin in :gh:`121650`.)"
msgstr ""
"Заголовки со встроенными символами новой строки теперь заключаются в кавычки "
"при выводе. :mod:`~email.generator` теперь будет отказываться сериализовать "
"(записывать) заголовки, которые неправильно свернуты или разделены, так что "
"они будут анализироваться как несколько заголовков или объединяться со "
"смежными данными. Если вам нужно отключить эту функцию безопасности, "
"установите :attr:`~email.policy.Policy.verify_generated_headers`. "
"(Предоставлено Басом Блумсаатом и Петром Викторином в :gh:`121650`.)"

#: ../../whatsnew/3.13.rst:888
msgid ""
":func:`~email.utils.getaddresses` and :func:`~email.utils.parseaddr` now "
"return ``('', '')`` pairs in more situations where invalid email addresses "
"are encountered instead of potentially inaccurate values. The two functions "
"have a new optional *strict* parameter (default ``True``). To get the old "
"behavior (accepting malformed input), use ``strict=False``. ``getattr(email."
"utils, 'supports_strict_parsing', False)`` can be used to check if the "
"*strict* parameter is available. (Contributed by Thomas Dwyer and Victor "
"Stinner for :gh:`102988` to improve the :cve:`2023-27043` fix.)"
msgstr ""
":func:`~email.utils.getaddresses` и :func:`~email.utils.parseaddr` теперь "
"возвращают пары ``('', '')`` в большем количестве ситуаций, когда "
"встречаются недействительные адреса электронной почты вместо потенциально "
"неточных. ценности. Обе функции имеют новый необязательный параметр *strict* "
"(по умолчанию ``True``). Чтобы получить старое поведение (принятие неверных "
"входных данных), используйте «strict=False». ``getattr(email.utils, "
"'supports_strict_parsing', False)`` можно использовать для проверки "
"доступности параметра *strict*. (Внесено Томасом Дуайером и Виктором "
"Стиннером для :gh:`102988` для улучшения исправления :cve:`2023-27043`.)"

#: ../../whatsnew/3.13.rst:900
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.13.rst:902
msgid ""
":class:`~enum.EnumDict` has been made public to better support subclassing :"
"class:`~enum.EnumType`."
msgstr ""

#: ../../whatsnew/3.13.rst:907
msgid "fractions"
msgstr "дроби"

#: ../../whatsnew/3.13.rst:909
msgid ""
":class:`~fractions.Fraction` objects now support the standard :ref:`format "
"specification mini-language <formatspec>` rules for fill, alignment, sign "
"handling, minimum width, and grouping. (Contributed by Mark Dickinson in :gh:"
"`111320`.)"
msgstr ""
"Объекты :class:`~fractions.Fraction` теперь поддерживают стандартные правила "
"мини-языка спецификации формата <formatspec>` для заполнения, выравнивания, "
"обработки знаков, минимальной ширины и группировки. (Предоставлено Марком "
"Дикинсоном в :gh:`111320`.)"

#: ../../whatsnew/3.13.rst:916
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.13.rst:918
msgid ""
"Add :func:`~glob.translate`, a function to convert a path specification with "
"shell-style wildcards to a regular expression. (Contributed by Barney Gale "
"in :gh:`72904`.)"
msgstr ""
"Добавьте :func:`~glob.translate`, функцию для преобразования спецификации "
"пути с подстановочными знаками в стиле оболочки в регулярное выражение. "
"(Предоставлено Барни Гейлом в :gh:`72904`.)"

#: ../../whatsnew/3.13.rst:924
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.13.rst:926
msgid ""
"The following functions in :mod:`importlib.resources` now allow accessing a "
"directory (or tree) of resources, using multiple positional arguments (the "
"*encoding* and *errors* arguments in the text-reading functions are now "
"keyword-only):"
msgstr ""
"Следующие функции в :mod:`importlib.resources` теперь позволяют получить "
"доступ к каталогу (или дереву) ресурсов, используя несколько позиционных "
"аргументов (аргументы *encoding* и *errors* в функциях чтения текста теперь "
"содержат только ключевые слова) :"

#: ../../whatsnew/3.13.rst:931
msgid ":func:`~importlib.resources.is_resource`"
msgstr ":func:`~importlib.resources.is_resource`"

#: ../../whatsnew/3.13.rst:932
msgid ":func:`~importlib.resources.open_binary`"
msgstr ":func:`~importlib.resources.open_binary`"

#: ../../whatsnew/3.13.rst:933
msgid ":func:`~importlib.resources.open_text`"
msgstr ":func:`~importlib.resources.open_text`"

#: ../../whatsnew/3.13.rst:934
msgid ":func:`~importlib.resources.path`"
msgstr ":func:`~importlib.resources.path`"

#: ../../whatsnew/3.13.rst:935
msgid ":func:`~importlib.resources.read_binary`"
msgstr ":func:`~importlib.resources.read_binary`"

#: ../../whatsnew/3.13.rst:936
msgid ":func:`~importlib.resources.read_text`"
msgstr ":func:`~importlib.resources.read_text`"

#: ../../whatsnew/3.13.rst:938
msgid ""
"These functions are no longer deprecated and are not scheduled for removal. "
"(Contributed by Petr Viktorin in :gh:`116608`.)"
msgstr ""
"Эти функции больше не устарели и не подлежат удалению. (Предоставлено Петром "
"Викториным в :gh:`116608`.)"

#: ../../whatsnew/3.13.rst:941
msgid ""
":func:`~importlib.resources.contents` remains deprecated in favor of the "
"fully-featured :class:`~importlib.resources.abc.Traversable` API. However, "
"there is now no plan to remove it. (Contributed by Petr Viktorin in :gh:"
"`116608`.)"
msgstr ""
":func:`~importlib.resources.contents` остаётся устаревшим в пользу "
"полнофункционального :class:`~importlib.resources.abc.Traversable` API. "
"Однако в настоящее время планов по его удалению нет. (Предоставлено Петром "
"Викториным в :gh:`116608`.)"

#: ../../whatsnew/3.13.rst:948
msgid "io"
msgstr "io"

#: ../../whatsnew/3.13.rst:950
msgid ""
"The :class:`~io.IOBase` finalizer now logs any errors raised by the :meth:"
"`~io.IOBase.close` method with :data:`sys.unraisablehook`. Previously, "
"errors were ignored silently by default, and only logged in :ref:`Python "
"Development Mode <devmode>` or when using a :ref:`Python debug build <debug-"
"build>`. (Contributed by Victor Stinner in :gh:`62948`.)"
msgstr ""
"Финализатор :class:`~io.IOBase` теперь регистрирует любые ошибки, вызванные "
"методом :meth:`~io.IOBase.close` с помощью :data:`sys.unraisablehook`. "
"Раньше ошибки по умолчанию игнорировались автоматически и регистрировались "
"только в :ref:`Python Development Mode <devmode>` или при использовании :ref:"
"`Отладочной сборки Python <debug-build>`. (Предоставлено Виктором Стиннером "
"в :gh:`62948`.)"

#: ../../whatsnew/3.13.rst:959
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.13.rst:961
msgid ""
"Add the :attr:`.IPv4Address.ipv6_mapped` property, which returns the IPv4-"
"mapped IPv6 address. (Contributed by Charles Machalow in :gh:`109466`.)"
msgstr ""
"Добавьте свойство :attr:`.IPv4Address.ipv6_mapped`, которое возвращает IPv6-"
"адрес, сопоставленный с IPv4. (Предоставлено Чарльзом Махалоу в :gh:"
"`109466`.)"

#: ../../whatsnew/3.13.rst:965
msgid ""
"Fix ``is_global`` and ``is_private`` behavior in :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network`, and :class:`~ipaddress.IPv6Network`. (Contributed by Jakub "
"Stasiak in :gh:`113171`.)"
msgstr ""
"Исправлено поведение ``is_global`` и ``is_private`` в :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network` и :class:`~ ipaddress.IPv6Network`. (Предоставлено Якубом "
"Стасиаком в :gh:`113171`.)"

#: ../../whatsnew/3.13.rst:972
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.13.rst:974
msgid ""
":func:`~itertools.batched` has a new *strict* parameter, which raises a :exc:"
"`ValueError` if the final batch is shorter than the specified batch size. "
"(Contributed by Raymond Hettinger in :gh:`113202`.)"
msgstr ""
":func:`~itertools.batched` имеет новый параметр *strict*, который вызывает :"
"exc:`ValueError`, если конечный пакет короче указанного размера пакета. "
"(Предоставлено Рэймондом Хеттингером в :gh:`113202`.)"

#: ../../whatsnew/3.13.rst:981
msgid "marshal"
msgstr "marshal"

#: ../../whatsnew/3.13.rst:983
msgid ""
"Add the *allow_code* parameter in module functions. Passing "
"``allow_code=False`` prevents serialization and de-serialization of code "
"objects which are incompatible between Python versions. (Contributed by "
"Serhiy Storchaka in :gh:`113626`.)"
msgstr ""
"Добавьте параметр *allow_code* в функции модуля. Передача "
"``allow_code=False`` предотвращает сериализацию и десериализацию объектов "
"кода, которые несовместимы между версиями Python. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`113626`.)"

#: ../../whatsnew/3.13.rst:990
msgid "math"
msgstr "math"

#: ../../whatsnew/3.13.rst:992
msgid ""
"The new function :func:`~math.fma` performs fused multiply-add operations. "
"This computes ``x * y + z`` with only a single round, and so avoids any "
"intermediate loss of precision. It wraps the ``fma()`` function provided by "
"C99, and follows the specification of the IEEE 754 \"fusedMultiplyAdd\" "
"operation for special cases. (Contributed by Mark Dickinson and Victor "
"Stinner in :gh:`73468`.)"
msgstr ""
"Новая функция :func:`~math.fma` выполняет объединенные операции умножения-"
"сложения. Это вычисляет ``x * y + z`` всего за один раунд и, таким образом, "
"позволяет избежать промежуточной потери точности. Он оборачивает функцию "
"fma(), предоставляемую C99, и следует спецификации операции "
"«fusedMultiplyAdd» IEEE 754 для особых случаев. (Предоставлено Марком "
"Дикинсоном и Виктором Стиннером в :gh:`73468`.)"

#: ../../whatsnew/3.13.rst:1002
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.13.rst:1004
msgid ""
"Add the :func:`~mimetypes.guess_file_type` function to guess a MIME type "
"from a filesystem path. Using paths with :func:`~mimetypes.guess_type` is "
"now :term:`soft deprecated`. (Contributed by Serhiy Storchaka in :gh:"
"`66543`.)"
msgstr ""
"Добавьте функцию :func:`~mimetypes.guess_file_type`, чтобы угадать тип MIME "
"по пути к файловой системе. Использование путей с :func:`~mimetypes."
"guess_type` теперь :term:`soft устарело`. (Предоставлено Сергеем Сторчакой в ​​"
":gh:`66543`.)"

#: ../../whatsnew/3.13.rst:1011
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.13.rst:1013
msgid ""
":class:`~mmap.mmap` is now protected from crashing on Windows when the "
"mapped memory is inaccessible due to file system errors or access "
"violations. (Contributed by Jannis Weigend in :gh:`118209`.)"
msgstr ""
":class:`~mmap.mmap` теперь защищен от сбоя в Windows, когда отображаемая "
"память недоступна из-за ошибок файловой системы или нарушений прав доступа. "
"(Предоставлено Яннисом Вейгендом в :gh:`118209`.)"

#: ../../whatsnew/3.13.rst:1017
msgid ""
":class:`~mmap.mmap` has a new :meth:`~mmap.mmap.seekable` method that can be "
"used when a seekable file-like object is required. The :meth:`~mmap.mmap."
"seek` method now returns the new absolute position. (Contributed by Donghee "
"Na and Sylvie Liberman in :gh:`111835`.)"
msgstr ""
":class:`~mmap.mmap` имеет новый метод :meth:`~mmap.mmap.seekable`, который "
"можно использовать, когда требуется доступный для поиска файловый объект. "
"Метод :meth:`~mmap.mmap.seek` теперь возвращает новую абсолютную позицию. "
"(Предоставлено Донхи На и Сильви Либерман в :gh:`111835`.)"

#: ../../whatsnew/3.13.rst:1022
msgid ""
"The new UNIX-only *trackfd* parameter for :class:`~mmap.mmap` controls file "
"descriptor duplication; if false, the file descriptor specified by *fileno* "
"will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in :"
"gh:`78502`.)"
msgstr ""
"Новый параметр *trackfd* только для UNIX для :class:`~mmap.mmap` "
"контролирует дублирование файловых дескрипторов; если false, дескриптор "
"файла, указанный *fileno*, не будет дублироваться. (Предоставлено Закери "
"Шпитцем и Петром Викторином в :gh:`78502`.)"

#: ../../whatsnew/3.13.rst:1029
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.13.rst:1037
msgid "os"
msgstr "os"

#: ../../whatsnew/3.13.rst:1039
msgid ""
"Add :func:`~os.process_cpu_count` function to get the number of logical CPU "
"cores usable by the calling thread of the current process. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""
"Добавьте функцию :func:`~os.process_cpu_count`, чтобы получить количество "
"логических ядер ЦП, используемых вызывающим потоком текущего процесса. "
"(Предоставлено Виктором Стиннером в :gh:`109649`.)"

#: ../../whatsnew/3.13.rst:1043
msgid ""
":func:`~os.cpu_count` and :func:`~os.process_cpu_count` can be overridden "
"through the new environment variable :envvar:`PYTHON_CPU_COUNT` or the new "
"command-line option :option:`-X cpu_count <-X>`. This option is useful for "
"users who need to limit CPU resources of a container system without having "
"to modify application code or the container itself. (Contributed by Donghee "
"Na in :gh:`109595`.)"
msgstr ""
":func:`~os.cpu_count` и :func:`~os.process_cpu_count` можно переопределить с "
"помощью новой переменной среды :envvar:`PYTHON_CPU_COUNT` или новой опции "
"командной строки :option:`-X cpu_count <-X >`. Эта опция полезна для "
"пользователей, которым необходимо ограничить ресурсы ЦП контейнерной системы "
"без необходимости изменения кода приложения или самого контейнера. "
"(Предоставлено Донхи На в :gh:`109595`.)"

#: ../../whatsnew/3.13.rst:1051
msgid ""
"Add a :ref:`low level interface <os-timerfd>` to Linux's :manpage:`timer "
"file descriptors <timerfd_create(2)>` via :func:`~os.timerfd_create`, :func:"
"`~os.timerfd_settime`, :func:`~os.timerfd_settime_ns`, :func:`~os."
"timerfd_gettime`, :func:`~os.timerfd_gettime_ns`, :const:`~os."
"TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC`, :const:`~os.TFD_TIMER_ABSTIME`, "
"and :const:`~os.TFD_TIMER_CANCEL_ON_SET` (Contributed by Masaru Tsuchiyama "
"in :gh:`108277`.)"
msgstr ""
"Добавьте интерфейс низкого уровня <os-timerfd>` в :manpage:`дескрипторы "
"файлов таймеров <timerfd_create(2)>` с помощью :func:`~os.timerfd_create`, :"
"func:`~os.timerfd_settime `, :func:`~os.timerfd_settime_ns`, :func:`~os."
"timerfd_gettime`, :func:`~os.timerfd_gettime_ns`, :const:`~os."
"TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC `, :const:`~os.TFD_TIMER_ABSTIME` и :"
"const:`~os.TFD_TIMER_CANCEL_ON_SET` (предоставлено Масару Цучиямой в :gh:"
"`108277`.)"

#: ../../whatsnew/3.13.rst:1060
msgid ""
":func:`~os.lchmod` and the *follow_symlinks* argument of :func:`~os.chmod` "
"are both now available on Windows. Note that the default value of "
"*follow_symlinks* in :func:`!lchmod` is ``False`` on Windows. (Contributed "
"by Serhiy Storchaka in :gh:`59616`.)"
msgstr ""
":func:`~os.lchmod` и аргумент *follow_symlinks* :func:`~os.chmod` теперь "
"доступны в Windows. Обратите внимание, что значением по умолчанию "
"*follow_symlinks* в :func:`!lchmod` является ``False`` в Windows. "
"(Предоставлено Сергеем Сторчакой в ​​:gh:`59616`.)"

#: ../../whatsnew/3.13.rst:1066
msgid ""
":func:`~os.fchmod` and support for file descriptors in :func:`~os.chmod` are "
"both now available on Windows. (Contributed by Serhiy Storchaka in :gh:"
"`113191`.)"
msgstr ""
":func:`~os.fchmod` и поддержка файловых дескрипторов в :func:`~os.chmod` "
"теперь доступны в Windows. (Предоставлено Сергеем Сторчакой в ​​:gh:`113191`.)"

#: ../../whatsnew/3.13.rst:1070
msgid ""
"On Windows, :func:`~os.mkdir` and :func:`~os.makedirs` now support passing a "
"*mode* value of ``0o700`` to apply access control to the new directory. This "
"implicitly affects :func:`tempfile.mkdtemp` and is a mitigation for :cve:"
"`2024-4030`. Other values for *mode* continue to be ignored. (Contributed by "
"Steve Dower in :gh:`118486`.)"
msgstr ""
"В Windows :func:`~os.mkdir` и :func:`~os.madeirs` теперь поддерживают "
"передачу значения *mode* ``0o700`` для применения контроля доступа к новому "
"каталогу. Это неявно влияет на :func:`tempfile.mkdtemp` и является "
"смягчением последствий :cve:`2024-4030`. Другие значения *mode* продолжают "
"игнорироваться. (Предоставлено Стивом Дауэром в :gh:`118486`.)"

#: ../../whatsnew/3.13.rst:1077
msgid ""
":func:`~os.posix_spawn` now accepts ``None`` for the *env* argument, which "
"makes the newly spawned process use the current process environment. "
"(Contributed by Jakub Kulik in :gh:`113119`.)"
msgstr ""
":func:`~os.posix_spawn` теперь принимает ``None`` в качестве аргумента "
"*env*, что заставляет вновь созданный процесс использовать текущую среду "
"процесса. (Предоставлено Якубом Куликом в :gh:`113119`.)"

#: ../../whatsnew/3.13.rst:1081
msgid ""
":func:`~os.posix_spawn` can now use the :const:`~os.POSIX_SPAWN_CLOSEFROM` "
"attribute in the *file_actions* parameter on platforms that support :c:func:"
"`!posix_spawn_file_actions_addclosefrom_np`. (Contributed by Jakub Kulik in :"
"gh:`113117`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1088
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.13.rst:1090
msgid ""
"Add :func:`~os.path.isreserved` to check if a path is reserved on the "
"current system. This function is only available on Windows. (Contributed by "
"Barney Gale in :gh:`88569`.)"
msgstr ""
"Добавьте :func:`~os.path.isreserved`, чтобы проверить, зарезервирован ли "
"путь в текущей системе. Эта функция доступна только в Windows. "
"(Предоставлено Барни Гейлом в :gh:`88569`.)"

#: ../../whatsnew/3.13.rst:1095
msgid ""
"On Windows, :func:`~os.path.isabs` no longer considers paths starting with "
"exactly one slash (``\\`` or ``/``) to be absolute. (Contributed by Barney "
"Gale and Jon Foster in :gh:`44626`.)"
msgstr ""
"В Windows :func:`~os.path.isabs` больше не считает пути, начинающиеся ровно "
"с одной косой черты (``\\`` или ``/``), как абсолютные. (Предоставлено Барни "
"Гейлом и Джоном Фостером в :gh:`44626`.)"

#: ../../whatsnew/3.13.rst:1099
msgid ""
":func:`~os.path.realpath` now resolves MS-DOS style file names even if the "
"file is not accessible. (Contributed by Moonsik Park in :gh:`82367`.)"
msgstr ""
":func:`~os.path.realpath` теперь разрешает имена файлов в стиле MS-DOS, даже "
"если файл недоступен. (Предоставлено Moonsik Park в :gh:`82367`.)"

#: ../../whatsnew/3.13.rst:1105 ../../whatsnew/3.13.rst:1736
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.13.rst:1107
msgid ""
"Add :exc:`~pathlib.UnsupportedOperation`, which is raised instead of :exc:"
"`NotImplementedError` when a path operation isn't supported. (Contributed by "
"Barney Gale in :gh:`89812`.)"
msgstr ""
"Добавьте :exc:`~pathlib.UnsupportedOperation`, который вызывается вместо :"
"exc:`NotImplementedError`, когда операция пути не поддерживается. "
"(Предоставлено Барни Гейлом в :gh:`89812`.)"

#: ../../whatsnew/3.13.rst:1111
msgid ""
"Add a new constructor for creating :class:`~pathlib.Path` objects from "
"'file' URIs (``file:///``), :meth:`.Path.from_uri`. (Contributed by Barney "
"Gale in :gh:`107465`.)"
msgstr ""
"Добавьте новый конструктор для создания объектов :class:`~pathlib.Path` из "
"URI 'file' (``file:///``), :meth:`.Path.from_uri`. (Предоставлено Барни "
"Гейлом в :gh:`107465`.)"

#: ../../whatsnew/3.13.rst:1115
msgid ""
"Add :meth:`.PurePath.full_match` for matching paths with shell-style "
"wildcards, including the recursive wildcard \"``**``\". (Contributed by "
"Barney Gale in :gh:`73435`.)"
msgstr ""
"Добавьте :meth:`.PurePath.full_match` для сопоставления путей с "
"подстановочными знаками в стиле оболочки, включая рекурсивный подстановочный "
"знак «``**``». (Предоставлено Барни Гейлом в :gh:`73435`.)"

#: ../../whatsnew/3.13.rst:1119
msgid ""
"Add the :attr:`.PurePath.parser` class attribute to store the implementation "
"of :mod:`os.path` used for low-level path parsing and joining. This will be "
"either :mod:`!posixpath` or :mod:`!ntpath`."
msgstr ""
"Добавьте атрибут класса :attr:`.PurePath.parser` для хранения реализации :"
"mod:`os.path`, используемой для низкоуровневого анализа и объединения путей. "
"Это будет либо :mod:`!posixpath`, либо :mod:`!ntpath`."

#: ../../whatsnew/3.13.rst:1124
msgid ""
"Add *recurse_symlinks* keyword-only argument to :meth:`.Path.glob` and :meth:"
"`~pathlib.Path.rglob`. (Contributed by Barney Gale in :gh:`77609`.)"
msgstr ""
"Добавьте аргумент *recurse_symlinks*, содержащий только ключевые слова, в :"
"meth:`.Path.glob` и :meth:`~pathlib.Path.rglob`. (Предоставлено Барни Гейлом "
"в :gh:`77609`.)"

#: ../../whatsnew/3.13.rst:1128
msgid ""
":meth:`.Path.glob` and :meth:`~pathlib.Path.rglob` now return files and "
"directories when given a pattern that ends with \"``**``\". Previously, only "
"directories were returned. (Contributed by Barney Gale in :gh:`70303`.)"
msgstr ""
":meth:`.Path.glob` и :meth:`~pathlib.Path.rglob` теперь возвращают файлы и "
"каталоги, если задан шаблон, заканчивающийся на \"``**``\". Раньше "
"возвращались только каталоги. (Предоставлено Барни Гейлом в :gh:`70303`.)"

#: ../../whatsnew/3.13.rst:1133
msgid ""
"Add the *follow_symlinks* keyword-only argument to :meth:`Path.is_file "
"<pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path.is_dir>`, :meth:`."
"Path.owner`, and :meth:`.Path.group`. (Contributed by Barney Gale in :gh:"
"`105793` and Kamil Turek in :gh:`107962`.)"
msgstr ""
"Добавьте аргумент, содержащий только ключевое слово *follow_symlinks*, в :"
"meth:`Path.is_file <pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path."
"is_dir>`, :meth:`.Path.owner ` и :meth:`.Path.group`. (Предоставлено Барни "
"Гейлом в :gh:`105793` и Камилом Туреком в :gh:`107962`.)"

#: ../../whatsnew/3.13.rst:1141
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.13.rst:1143
msgid ""
":func:`breakpoint` and :func:`~pdb.set_trace` now enter the debugger "
"immediately rather than on the next line of code to be executed. This change "
"prevents the debugger from breaking outside of the context when :func:`!"
"breakpoint` is positioned at the end of the context. (Contributed by Tian "
"Gao in :gh:`118579`.)"
msgstr ""
":func:`breakpoint` и :func:`~pdb.set_trace` теперь входят в отладчик сразу, "
"а не на следующей строке кода, которая будет выполнена. Это изменение "
"предотвращает выход отладчика за пределы контекста, когда :func:`!"
"breakpoint` располагается в конце контекста. (Предоставлено Тянь Гао в :gh:"
"`118579`.)"

#: ../../whatsnew/3.13.rst:1149
msgid ""
"``sys.path[0]`` is no longer replaced by the directory of the script being "
"debugged when :attr:`sys.flags.safe_path` is set. (Contributed by Tian Gao "
"and Christian Walther in :gh:`111762`.)"
msgstr ""
"``sys.path[0]`` больше не заменяется каталогом отлаживаемого скрипта, если "
"установлен :attr:`sys.flags.safe_path`. (Предоставлено Тянь Гао и Кристианом "
"Вальтером в :gh:`111762`.)"

#: ../../whatsnew/3.13.rst:1153
msgid ""
":mod:`zipapp` is now supported as a debugging target. (Contributed by Tian "
"Gao in :gh:`118501`.)"
msgstr ""
":mod:`zipapp` теперь поддерживается в качестве цели отладки. (Предоставлено "
"Тянь Гао в :gh:`118501`.)"

#: ../../whatsnew/3.13.rst:1156
msgid ""
"Add ability to move between chained exceptions during post-mortem debugging "
"in :func:`~pdb.pm` using the new :pdbcmd:`exceptions [exc_number] "
"<exceptions>` command for Pdb. (Contributed by Matthias Bussonnier in :gh:"
"`106676`.)"
msgstr ""
"Добавьте возможность перемещения между цепочками исключений во время "
"посмертной отладки в :func:`~pdb.pm` с помощью новой команды :pdbcmd:"
"`Exceptions [exc_number] <Exceptions>` для Pdb. (Предоставлено Матиасом "
"Бюссонье в :gh:`106676`.)"

#: ../../whatsnew/3.13.rst:1161
msgid ""
"Expressions and statements whose prefix is a pdb command are now correctly "
"identified and executed. (Contributed by Tian Gao in :gh:`108464`.)"
msgstr ""
"Выражения и инструкции, префиксом которых является команда pdb, теперь "
"правильно идентифицируются и выполняются. (Предоставлено Тянь Гао в :gh:"
"`108464`.)"

#: ../../whatsnew/3.13.rst:1167
msgid "queue"
msgstr "очередь"

#: ../../whatsnew/3.13.rst:1169
msgid ""
"Add :meth:`Queue.shutdown <queue.Queue.shutdown>` and :exc:`~queue.ShutDown` "
"to manage queue termination. (Contributed by Laurie Opperman and Yves Duprat "
"in :gh:`104750`.)"
msgstr ""
"Добавьте :meth:`Queue.shutdown <queue.Queue.shutdown>` и :exc:`~queue."
"ShutDown` для управления завершением очереди. (Предоставлено Лори Опперман и "
"Ивом Дюпра в :gh:`104750`.)"

#: ../../whatsnew/3.13.rst:1175
msgid "random"
msgstr "случайный"

#: ../../whatsnew/3.13.rst:1177
msgid ""
"Add a :ref:`command-line interface <random-cli>`. (Contributed by Hugo van "
"Kemenade in :gh:`118131`.)"
msgstr ""
"Добавьте :ref:`интерфейс командной строки <random-cli>`. (Предоставлено "
"Хьюго ван Кеменаде в :gh:`118131`.)"

#: ../../whatsnew/3.13.rst:1182 ../../whatsnew/3.13.rst:1744
msgid "re"
msgstr "re"

#: ../../whatsnew/3.13.rst:1184
msgid ""
"Rename :exc:`!re.error` to :exc:`~re.PatternError` for improved clarity. :"
"exc:`!re.error` is kept for backward compatibility."
msgstr ""
"Переименуйте :exc:`!re.error` в :exc:`~re.PatternError` для большей "
"ясности. :exc:`!re.error` сохранен для обратной совместимости."

#: ../../whatsnew/3.13.rst:1189
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.13.rst:1191
msgid ""
"Support the *dir_fd* and *follow_symlinks* keyword arguments in :func:"
"`~shutil.chown`. (Contributed by Berker Peksag and Tahia K in :gh:`62308`)"
msgstr ""
"Поддержите аргументы ключевых слов *dir_fd* и *follow_symlinks* в :func:"
"`~shutil.chown`. (Предоставлено Беркером Пексагом и Тахией К. в :gh:`62308`)"

#: ../../whatsnew/3.13.rst:1197
msgid "site"
msgstr "сайт"

#: ../../whatsnew/3.13.rst:1199
msgid ""
":file:`.pth` files are now decoded using UTF-8 first, and then with the :"
"term:`locale encoding` if UTF-8 decoding fails. (Contributed by Inada Naoki "
"in :gh:`117802`.)"
msgstr ""
"Файлы :file:`.pth` теперь сначала декодируются с использованием UTF-8, а "
"затем с использованием :term:`кодировки локали`, если декодирование UTF-8 не "
"удается. (Предоставлено Инадой Наоки в :gh:`117802`.)"

#: ../../whatsnew/3.13.rst:1205
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.13.rst:1207
msgid ""
"A :exc:`ResourceWarning` is now emitted if a :class:`~sqlite3.Connection` "
"object is not :meth:`closed <sqlite3.Connection.close>` explicitly. "
"(Contributed by Erlend E. Aasland in :gh:`105539`.)"
msgstr ""
":exc:`ResourceWarning` теперь выдается, если объект :class:`~sqlite3."
"Connection` не :meth:`закрыт <sqlite3.Connection.close>` явно. "
"(Предоставлено Эрлендом Э. Осландом в :gh:`105539`.)"

#: ../../whatsnew/3.13.rst:1211
msgid ""
"Add the *filter* keyword-only parameter to :meth:`.Connection.iterdump` for "
"filtering database objects to dump. (Contributed by Mariusz Felisiak in :gh:"
"`91602`.)"
msgstr ""
"Добавьте параметр *filter*, доступный только по ключевому слову, в :meth:`."
"Connection.iterdump` для фильтрации объектов базы данных для дампа. "
"(Предоставлено Мариушем Фелисиаком в :gh:`91602`.)"

#: ../../whatsnew/3.13.rst:1217
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.13.rst:1219
msgid ""
"The :func:`~ssl.create_default_context` API now includes :data:`~ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`~ssl.VERIFY_X509_STRICT` in its "
"default flags."
msgstr ""
"API :func:`~ssl.create_default_context` теперь включает :data:`~ssl."
"VERIFY_X509_PARTIAL_CHAIN` и :data:`~ssl.VERIFY_X509_STRICT` в свои флаги по "
"умолчанию."

#: ../../whatsnew/3.13.rst:1225
msgid ""
":data:`~ssl.VERIFY_X509_STRICT` may reject pre-:rfc:`5280` or malformed "
"certificates that the underlying OpenSSL implementation might otherwise "
"accept. Whilst disabling this is not recommended, you can do so using:"
msgstr ""
":data:`~ssl.VERIFY_X509_STRICT` может отклонять сертификаты до:rfc:`5280` "
"или некорректные сертификаты, которые в противном случае могла бы принять "
"базовая реализация OpenSSL. Хотя отключать это не рекомендуется, вы можете "
"сделать это, используя:"

#: ../../whatsnew/3.13.rst:1230
msgid ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"
msgstr ""
"импортировать SSL ctx = ssl.create_default_context() ctx.verify_flags &= "
"~ssl.VERIFY_X509_STRICT"

#: ../../whatsnew/3.13.rst:1237
msgid "(Contributed by William Woodruff in :gh:`112389`.)"
msgstr "(Предоставлено Уильямом Вудраффом в :gh:`112389`.)"

#: ../../whatsnew/3.13.rst:1241
msgid "statistics"
msgstr "статистика"

#: ../../whatsnew/3.13.rst:1243
msgid ""
"Add :func:`~statistics.kde` for kernel density estimation. This makes it "
"possible to estimate a continuous probability density function from a fixed "
"number of discrete samples. (Contributed by Raymond Hettinger in :gh:"
"`115863`.)"
msgstr ""
"Добавьте :func:`~statistics.kde` для оценки плотности ядра. Это позволяет "
"оценить непрерывную функцию плотности вероятности по фиксированному числу "
"дискретных выборок. (Предоставлено Рэймондом Хеттингером в :gh:`115863`.)"

#: ../../whatsnew/3.13.rst:1248
msgid ""
"Add :func:`~statistics.kde_random` for sampling from an estimated "
"probability density function created by :func:`~statistics.kde`. "
"(Contributed by Raymond Hettinger in :gh:`115863`.)"
msgstr ""
"Добавьте :func:`~statistics.kde_random` для выборки из оценочной функции "
"плотности вероятности, созданной :func:`~statistics.kde`. (Предоставлено "
"Рэймондом Хеттингером в :gh:`115863`.)"

#: ../../whatsnew/3.13.rst:1256
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.13.rst:1258
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations."
msgstr ""
"Модуль :mod:`subprocess` теперь использует функцию :func:`~os.posix_spawn` в "
"большем количестве ситуаций."

#: ../../whatsnew/3.13.rst:1261
msgid ""
"Notably, when *close_fds* is ``True`` (the default), :func:`~os.posix_spawn` "
"will be used when the C library provides :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np`, which includes recent versions of "
"Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the "
"existing Linux :c:func:`!vfork` based code."
msgstr ""
"Примечательно, что когда *close_fds* имеет значение ``True`` (по "
"умолчанию), :func:`~os.posix_spawn` будет использоваться, когда библиотека C "
"предоставляет :c:func:`!posix_spawn_file_actions_addclosefrom_np`, которая "
"включает в себя последние версии Linux. , FreeBSD и Solaris. В Linux это "
"должно работать аналогично существующему коду на основе Linux :c:func:`!"
"vfork`."

#: ../../whatsnew/3.13.rst:1268
msgid ""
"A private control knob :attr:`!subprocess._USE_POSIX_SPAWN` can be set to "
"``False`` if you need to force :mod:`subprocess` to never use :func:`~os."
"posix_spawn`. Please report your reason and platform details in the :ref:"
"`issue tracker <using-the-tracker>` if you set this so that we can improve "
"our API selection logic for everyone. (Contributed by Jakub Kulik in :gh:"
"`113117`.)"
msgstr ""
"Ручку частного управления :attr:`!subprocess._USE_POSIX_SPAWN` можно "
"установить в значение ``False``, если вам нужно заставить :mod:`subprocess` "
"никогда не использовать :func:`~os.posix_spawn`. Пожалуйста, сообщите о "
"своей причине и сведениях о платформе в :ref:`системе отслеживания проблем "
"<using-the-tracker>`, если вы установили это, чтобы мы могли улучшить нашу "
"логику выбора API для всех. (Предоставлено Якубом Куликом в :gh:`113117`.)"

#: ../../whatsnew/3.13.rst:1278
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.13.rst:1280
msgid ""
"Add the :func:`~sys._is_interned` function to test if a string was interned. "
"This function is not guaranteed to exist in all implementations of Python. "
"(Contributed by Serhiy Storchaka in :gh:`78573`.)"
msgstr ""
"Добавьте функцию :func:`~sys._is_interned`, чтобы проверить, была ли строка "
"интернирована. Не гарантируется, что эта функция будет существовать во всех "
"реализациях Python. (Предоставлено Сергеем Сторчакой в ​​:gh:`78573`.)"

#: ../../whatsnew/3.13.rst:1286
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.13.rst:1288
msgid ""
"On Windows, the default mode ``0o700`` used by :func:`tempfile.mkdtemp` now "
"limits access to the new directory due to changes to :func:`os.mkdir`. This "
"is a mitigation for :cve:`2024-4030`. (Contributed by Steve Dower in :gh:"
"`118486`.)"
msgstr ""
"В Windows режим по умолчанию ``0o700``, используемый :func:`tempfile."
"mkdtemp`, теперь ограничивает доступ к новому каталогу из-за изменений в :"
"func:`os.mkdir`. Это смягчение последствий для :cve:`2024-4030`. "
"(Предоставлено Стивом Дауэром в :gh:`118486`.)"

#: ../../whatsnew/3.13.rst:1295
msgid "time"
msgstr "время"

#: ../../whatsnew/3.13.rst:1297
msgid ""
"On Windows, :func:`~time.monotonic` now uses the "
"``QueryPerformanceCounter()`` clock for a resolution of 1 microsecond, "
"instead of the ``GetTickCount64()`` clock which has a resolution of 15.6 "
"milliseconds. (Contributed by Victor Stinner in :gh:`88494`.)"
msgstr ""
"В Windows :func:`~time.monotonic` теперь использует часы "
"``QueryPerformanceCounter()`` с разрешением 1 микросекунду вместо часов "
"``GetTickCount64()``, которые имеют разрешение 15,6 миллисекунды. "
"(Предоставлено Виктором Стиннером в :gh:`88494`.)"

#: ../../whatsnew/3.13.rst:1303
msgid ""
"On Windows, :func:`~time.time` now uses the "
"``GetSystemTimePreciseAsFileTime()`` clock for a resolution of 1 "
"microsecond, instead of the ``GetSystemTimeAsFileTime()`` clock which has a "
"resolution of 15.6 milliseconds. (Contributed by Victor Stinner in :gh:"
"`63207`.)"
msgstr ""
"В Windows :func:`~time.time` теперь использует часы "
"GetSystemTimePrecisionAsFileTime() с разрешением 1 микросекунду вместо часов "
"GetSystemTimeAsFileTime() с разрешением 15,6 миллисекунды. (Предоставлено "
"Виктором Стиннером в :gh:`63207`.)"

#: ../../whatsnew/3.13.rst:1311
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.13.rst:1313
msgid ""
"Add :mod:`tkinter` widget methods: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, and :meth:`!tk_busy_status`. (Contributed by Miguel, "
"klappnase and Serhiy Storchaka in :gh:`72684`.)"
msgstr ""
"Добавьте методы виджета :mod:`tkinter`: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, и :meth:`!tk_busy_status`. (Предоставлено Мигелем, "
"klappnase и Сергеем Сторчакой в ​​:gh:`72684`.)"

#: ../../whatsnew/3.13.rst:1319
msgid ""
"The :mod:`tkinter` widget method :meth:`!wm_attributes` now accepts the "
"attribute name without the minus prefix to get window attributes, for "
"example ``w.wm_attributes('alpha')`` and allows specifying attributes and "
"values to set as keyword arguments, for example ``w."
"wm_attributes(alpha=0.5)``. (Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""
"Метод виджета :mod:`tkinter` :meth:`!wm_attributes` теперь принимает имя "
"атрибута без префикса минус для получения атрибутов окна, например ``w."
"wm_attributes('alpha')``, и позволяет указывать атрибуты и значения. для "
"установки в качестве аргументов ключевого слова, например ``w."
"wm_attributes(alpha=0.5)``. (Предоставлено Сергеем Сторчакой в ​​:gh:`43457`.)"

#: ../../whatsnew/3.13.rst:1326
msgid ""
":meth:`!wm_attributes` can now return attributes as a :class:`dict`, by "
"using the new optional keyword-only parameter *return_python_dict*. "
"(Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""
":meth:`!wm_attributes` теперь может возвращать атрибуты как :class:`dict`, "
"используя новый необязательный параметр, содержащий только ключевые слова "
"*return_python_dict*. (Предоставлено Сергеем Сторчакой в ​​:gh:`43457`.)"

#: ../../whatsnew/3.13.rst:1330
msgid ""
":meth:`!Text.count` can now return a simple :class:`int` when the new "
"optional keyword-only parameter *return_ints* is used. Otherwise, the single "
"count is returned as a 1-tuple or ``None``. (Contributed by Serhiy Storchaka "
"in :gh:`97928`.)"
msgstr ""
":meth:`!Text.count` теперь может возвращать простой :class:`int`, когда "
"используется новый необязательный параметр, содержащий только ключевые слова "
"*return_ints*. В противном случае одиночный счетчик возвращается как кортеж "
"из 1 или «Нет». (Предоставлено Сергеем Сторчакой в ​​:gh:`97928`.)"

#: ../../whatsnew/3.13.rst:1335
msgid ""
"Support the \"vsapi\" element type in the :meth:`~tkinter.ttk.Style."
"element_create` method of :class:`tkinter.ttk.Style`. (Contributed by Serhiy "
"Storchaka in :gh:`68166`.)"
msgstr ""
"Поддержите тип элемента «vsapi» в методе :meth:`~tkinter.ttk.Style."
"element_create` :class:`tkinter.ttk.Style`. (Предоставлено Сергеем Сторчакой "
"в ​​:gh:`68166`.)"

#: ../../whatsnew/3.13.rst:1340
msgid ""
"Add the :meth:`!after_info` method for Tkinter widgets. (Contributed by "
"Cheryl Sabella in :gh:`77020`.)"
msgstr ""
"Добавьте метод :meth:`!after_info` для виджетов Tkinter. (Предоставлено "
"Шерил Сабеллой в :gh:`77020`.)"

#: ../../whatsnew/3.13.rst:1343
msgid ""
"Add a new :meth:`!copy_replace` method to :class:`!PhotoImage` to copy a "
"region from one image to another, possibly with pixel zooming, subsampling, "
"or both. (Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"Добавьте новый метод :meth:`!copy_replace` в :class:`!PhotoImage`, чтобы "
"скопировать область из одного изображения в другое, возможно, с пиксельным "
"масштабированием, субдискретизацией или тем и другим. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`118225`.)"

#: ../../whatsnew/3.13.rst:1348
msgid ""
"Add *from_coords* parameter to the :class:`!PhotoImage` methods :meth:`!"
"copy`, :meth:`!zoom` and :meth:`!subsample`. Add *zoom* and *subsample* "
"parameters to the :class:`!PhotoImage` method :meth:`!copy`. (Contributed by "
"Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"Добавьте параметр *from_coords* в методы :class:`!PhotoImage` :meth:`!"
"copy`, :meth:`!zoom` и :meth:`!subsample`. Добавьте параметры *zoom* и "
"*subsample* в метод :class:`!PhotoImage` :meth:`!copy`. (Предоставлено "
"Сергеем Сторчакой в ​​:gh:`118225`.)"

#: ../../whatsnew/3.13.rst:1354
msgid ""
"Add the :class:`!PhotoImage` methods :meth:`!read` to read an image from a "
"file and :meth:`!data` to get the image data. Add *background* and "
"*grayscale* parameters to the :meth:`!write` method. (Contributed by Serhiy "
"Storchaka in :gh:`118271`.)"
msgstr ""
"Добавьте методы :class:`!PhotoImage` :meth:`!read` для чтения изображения из "
"файла и :meth:`!data` для получения данных изображения. Добавьте параметры "
"*background* и *greyscale* в метод :meth:`!write`. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`118271`.)"

#: ../../whatsnew/3.13.rst:1362
msgid "traceback"
msgstr "трассировка"

#: ../../whatsnew/3.13.rst:1364
msgid ""
"Add the :attr:`~traceback.TracebackException.exc_type_str` attribute to :"
"class:`~traceback.TracebackException`, which holds a string display of the "
"*exc_type*. Deprecate the :attr:`~traceback.TracebackException.exc_type` "
"attribute, which holds the type object itself. Add parameter *save_exc_type* "
"(default ``True``) to indicate whether ``exc_type`` should be saved. "
"(Contributed by Irit Katriel in :gh:`112332`.)"
msgstr ""
"Добавьте атрибут :attr:`~traceback.TracebackException.exc_type_str` в :class:"
"`~traceback.TracebackException`, который содержит строковое отображение "
"*exc_type*. Устаревший атрибут :attr:`~traceback.TracebackException."
"exc_type`, который содержит сам объект типа. Добавьте параметр "
"*save_exc_type* (по умолчанию ``True``), чтобы указать, следует ли сохранять "
"``exc_type``. (Предоставлено Ирит Катриэль в :gh:`112332`.)"

#: ../../whatsnew/3.13.rst:1373
msgid ""
"Add a new *show_group* keyword-only parameter to :meth:`.TracebackException."
"format_exception_only` to (recursively) format the nested exceptions of a :"
"exc:`BaseExceptionGroup` instance. (Contributed by Irit Katriel in :gh:"
"`105292`.)"
msgstr ""
"Добавьте новый параметр *show_group*, содержащий только ключевые слова, в :"
"meth:`.TracebackException.format_Exception_only`, чтобы (рекурсивно) "
"форматировать вложенные исключения экземпляра :exc:`BaseExceptionGroup`. "
"(Предоставлено Ирит Катриэль в :gh:`105292`.)"

#: ../../whatsnew/3.13.rst:1380
msgid "types"
msgstr "типы"

#: ../../whatsnew/3.13.rst:1382
msgid ""
":class:`~types.SimpleNamespace` can now take a single positional argument to "
"initialise the namespace's arguments. This argument must either be a mapping "
"or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in :gh:"
"`108191`.)"
msgstr ""
":class:`~types.SimpleNamespace` теперь может принимать один позиционный "
"аргумент для инициализации аргументов пространства имен. Этот аргумент "
"должен быть либо отображением, либо итерацией пар ключ-значение. "
"(Предоставлено Сергеем Сторчакой в ​​:gh:`108191`.)"

#: ../../whatsnew/3.13.rst:1389 ../../whatsnew/3.13.rst:1769
msgid "typing"
msgstr "печатание"

#: ../../whatsnew/3.13.rst:1391
msgid ""
":pep:`705`: Add :data:`~typing.ReadOnly`, a special typing construct to mark "
"a :class:`~typing.TypedDict` item as read-only for type checkers."
msgstr ""
":pep:`705`: Добавьте :data:`~typing.ReadOnly`, специальную конструкцию "
"типизации, чтобы пометить элемент :class:`~typing.TypedDict` как доступный "
"только для чтения для средств проверки типов."

#: ../../whatsnew/3.13.rst:1394
msgid ""
":pep:`742`: Add :data:`~typing.TypeIs`, a typing construct that can be used "
"to instruct a type checker how to narrow a type."
msgstr ""
":pep:`742`: Добавьте :data:`~typing.TypeIs`, конструкцию типизации, которую "
"можно использовать для указания средству проверки типов, как сузить тип."

#: ../../whatsnew/3.13.rst:1397
msgid ""
"Add :data:`~typing.NoDefault`, a sentinel object used to represent the "
"defaults of some parameters in the :mod:`typing` module. (Contributed by "
"Jelle Zijlstra in :gh:`116126`.)"
msgstr ""
"Добавьте :data:`~typing.NoDefault`, сторожевой объект, используемый для "
"представления значений по умолчанию для некоторых параметров в модуле :mod:"
"`typing`. (Предоставлено Джелле Зийлстра в :gh:`116126`.)"

#: ../../whatsnew/3.13.rst:1401
msgid ""
"Add :func:`~typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:"
"`104873`.)"
msgstr ""
"Добавьте :func:`~typing.get_protocol_members`, чтобы вернуть набор членов, "
"определяющих :class:`typing.Protocol`. (Предоставлено Джелле Зийлстра в :gh:"
"`104873`.)"

#: ../../whatsnew/3.13.rst:1405
msgid ""
"Add :func:`~typing.is_protocol` to check whether a class is a :class:"
"`~typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:`104873`.)"
msgstr ""
"Добавьте :func:`~typing.is_protocol`, чтобы проверить, является ли класс :"
"class:`~typing.Protocol`. (Предоставлено Джелле Зийлстра в :gh:`104873`.)"

#: ../../whatsnew/3.13.rst:1409
msgid ""
":data:`~typing.ClassVar` can now be nested in :data:`~typing.Final`, and "
"vice versa. (Contributed by Mehdi Drissi in :gh:`89547`.)"
msgstr ""
":data:`~typing.ClassVar` теперь может быть вложен в :data:`~typing.Final`, и "
"наоборот. (Предоставлено Мехди Дрисси в :gh:`89547`.)"

#: ../../whatsnew/3.13.rst:1415
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.13.rst:1417
msgid ""
"Update the Unicode database to `version 15.1.0`__. (Contributed by James "
"Gerity in :gh:`109559`.)"
msgstr ""
"Обновите базу данных Unicode до версии 15.1.0__. (Предоставлено Джеймсом "
"Герити в :gh:`109559`.)"

#: ../../whatsnew/3.13.rst:1424
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.13.rst:1426
msgid ""
"Add support for creating source control management (SCM) ignore files in a "
"virtual environment's directory. By default, Git is supported. This is "
"implemented as opt-in via the API, which can be extended to support other "
"SCMs (:class:`~venv.EnvBuilder` and :func:`~venv.create`), and opt-out via "
"the CLI, using :option:`!--without-scm-ignore-files`. (Contributed by Brett "
"Cannon in :gh:`108125`.)"
msgstr ""
"Добавлена ​​поддержка создания файлов управления исходным кодом (SCM), "
"игнорирующих файлы в каталоге виртуальной среды. По умолчанию поддерживается "
"Git. Это реализуется как согласие через API, которое можно расширить для "
"поддержки других SCM (:class:`~venv.EnvBuilder` и :func:`~venv.create`), а "
"также отказ от участия через CLI, используя :option:`!--without-scm-ignore-"
"files`. (Предоставлено Бреттом Кэнноном в :gh:`108125`.)"

#: ../../whatsnew/3.13.rst:1437
msgid "warnings"
msgstr "предупреждения"

#: ../../whatsnew/3.13.rst:1439
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator provides a way to "
"communicate deprecations to a :term:`static type checker` and to warn on "
"usage of deprecated classes and functions. A :exc:`DeprecationWarning` may "
"also be emitted when a decorated function or class is used at runtime. "
"(Contributed by Jelle Zijlstra in :gh:`104003`.)"
msgstr ""
":pep:`702`: Новый декоратор :func:`warnings.deprecated` позволяет сообщать "
"об устаревании средству :term:`статической проверки типов` и ​​предупреждать "
"об использовании устаревших классов и функций. :exc:`DeprecationWarning` "
"также может быть выдано, когда декорированная функция или класс используется "
"во время выполнения. (Предоставлено Джелле Зийлстра в :gh:`104003`.)"

#: ../../whatsnew/3.13.rst:1448
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.13.rst:1450
msgid ""
"Allow controlling Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) by "
"adding five new methods:"
msgstr ""
"Разрешите управлять отсрочкой повторной обработки Expat >=2.6.0 (:cve:"
"`2023-52425`), добавив пять новых методов:"

#: ../../whatsnew/3.13.rst:1453
msgid ":meth:`xml.etree.ElementTree.XMLParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLParser.flush`"

#: ../../whatsnew/3.13.rst:1454
msgid ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"

#: ../../whatsnew/3.13.rst:1455
msgid ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"

#: ../../whatsnew/3.13.rst:1456
msgid ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"

#: ../../whatsnew/3.13.rst:1457
msgid ":meth:`!xml.sax.expatreader.ExpatParser.flush`"
msgstr ":meth:`!xml.sax.expatreader.ExpatParser.flush`"

#: ../../whatsnew/3.13.rst:1459
msgid "(Contributed by Sebastian Pipping in :gh:`115623`.)"
msgstr "(Предоставлено Себастьяном Пиппином в :gh:`115623`.)"

#: ../../whatsnew/3.13.rst:1461
msgid ""
"Add the :meth:`!close` method for the iterator returned by :func:`~xml.etree."
"ElementTree.iterparse` for explicit cleanup. (Contributed by Serhiy "
"Storchaka in :gh:`69893`.)"
msgstr ""
"Добавьте метод :meth:`!close` для итератора, возвращаемого :func:`~xml.etree."
"ElementTree.iterparse` для явной очистки. (Предоставлено Сергеем Сторчакой в ​​"
":gh:`69893`.)"

#: ../../whatsnew/3.13.rst:1467
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.13.rst:1469
msgid ""
"Add support for ZIP64_ format files. Everybody loves huge data, right? "
"(Contributed by Tim Hatch in :gh:`94146`.)"
msgstr ""
"Добавить поддержку файлов формата ZIP64_. Все любят огромные данные, верно? "
"(Предоставлено Тимом Хэтчем в :gh:`94146`.)"

#: ../../whatsnew/3.13.rst:1477
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/3.13.rst:1479
msgid ""
"Several standard library modules have had their import times significantly "
"improved. For example, the import time of the :mod:`typing` module has been "
"reduced by around a third by removing dependencies on :mod:`re` and :mod:"
"`contextlib`. Other modules to enjoy import-time speedups include :mod:"
"`email.utils`, :mod:`enum`, :mod:`functools`, :mod:`importlib.metadata`, "
"and :mod:`threading`. (Contributed by Alex Waygood, Shantanu Jain, Adam "
"Turner, Daniel Hollas, and others in :gh:`109653`.)"
msgstr ""
"Время импорта некоторых модулей стандартной библиотеки значительно "
"сократилось. Например, время импорта модуля :mod:`typing` сократилось "
"примерно на треть за счёт удаления зависимостей от :mod:`re` и :mod:"
"`contextlib`. Другие модули, позволяющие ускорить импорт, включают :mod:"
"`email.utils`, :mod:`enum`, :mod:`functools`, :mod:`importlib.metadata` и :"
"mod:`threading`. (Предоставлено Алексом Вэйгудом, Шантану Джайн, Адамом "
"Тернером, Дэниелом Холласом и другими в :gh:`109653`.)"

#: ../../whatsnew/3.13.rst:1490
msgid ""
":func:`textwrap.indent` is now around 30% faster than before for large "
"input. (Contributed by Inada Naoki in :gh:`107369`.)"
msgstr ""
":func:`textwrap.indent` теперь работает примерно на 30% быстрее, чем раньше, "
"при обработке больших объемов ввода. (Предоставлено Инадой Наоки в :gh:"
"`107369`.)"

#: ../../whatsnew/3.13.rst:1493
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations, including when *close_fds* is ``True`` (the default) on "
"many modern platforms. This should provide a notable performance increase "
"when launching processes on FreeBSD and Solaris. See the :ref:`subprocess "
"<whatsnew313-subprocess>` section above for details. (Contributed by Jakub "
"Kulik in :gh:`113117`.)"
msgstr ""
"Модуль :mod:`subprocess` теперь использует функцию :func:`~os.posix_spawn` в "
"большем количестве ситуаций, в том числе когда *close_fds* имеет значение "
"``True`` (по умолчанию) на многих современных платформах. Это должно "
"обеспечить заметный прирост производительности при запуске процессов во "
"FreeBSD и Solaris. Подробности смотрите в разделе :ref:`subprocess "
"<whatsnew313-subprocess>` выше. (Предоставлено Якубом Куликом в :gh:"
"`113117`.)"

#: ../../whatsnew/3.13.rst:1503
msgid "Removed Modules And APIs"
msgstr "Удалены модули и API"

#: ../../whatsnew/3.13.rst:1509
msgid "PEP 594: Remove \"dead batteries\" from the standard library"
msgstr "PEP 594: удалить «разряженные батарейки» из стандартной библиотеки."

#: ../../whatsnew/3.13.rst:1511
msgid ""
":pep:`594` proposed removing 19 modules from the standard library, "
"colloquially referred to as 'dead batteries' due to their historic, "
"obsolete, or insecure status. All of the following modules were deprecated "
"in Python 3.11, and are now removed:"
msgstr ""
":pep:`594` предложил удалить из стандартной библиотеки 19 модулей, которые в "
"просторечии называются «разряженными батареями» из-за их исторического, "
"устаревшего или небезопасного статуса. Все следующие модули устарели в "
"Python 3.11 и теперь удалены:"

#: ../../whatsnew/3.13.rst:1517
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../whatsnew/3.13.rst:1519
msgid ""
":pypi:`standard-aifc`: Use the redistribution of ``aifc`` library from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1522
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../whatsnew/3.13.rst:1524
msgid ":pypi:`audioop-lts`: Use ``audioop-lts`` library from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1527
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../whatsnew/3.13.rst:1529
msgid ""
":pypi:`standard-chunk`: Use the redistribution of ``chunk`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1532
msgid ":mod:`!cgi` and :mod:`!cgitb`"
msgstr ":mod:`!cgi` и :mod:`!cgitb`"

#: ../../whatsnew/3.13.rst:1534
msgid ""
":class:`!cgi.FieldStorage` can typically be replaced with :func:`urllib."
"parse.parse_qsl` for ``GET`` and ``HEAD`` requests, and the :mod:`email."
"message` module or the :pypi:`multipart` library for ``POST`` and ``PUT`` "
"requests."
msgstr ""
":class:`!cgi.FieldStorage` обычно можно заменить на :func:`urllib.parse."
"parse_qsl` для запросов ``GET`` и ``HEAD``, а также на модуль :mod:`email."
"message` или библиотека :pypi:`multipart` для запросов ``POST`` и ``PUT``."

#: ../../whatsnew/3.13.rst:1539
msgid ""
":func:`!cgi.parse` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, unless the input is ``multipart/form-"
"data``, which should be replaced as described below for :func:`!cgi."
"parse_multipart`."
msgstr ""
":func:`!cgi.parse` можно заменить, вызвав :func:`urllib.parse.parse_qs` "
"непосредственно для нужной строки запроса, если только вход не ``multipart/"
"form-data``, который следует заменить как описано ниже для :func:`!cgi."
"parse_multipart`."

#: ../../whatsnew/3.13.rst:1544
msgid ""
":func:`!cgi.parse_header` can be replaced with the functionality in the :mod:"
"`email` package, which implements the same MIME RFCs. For example, with :"
"class:`email.message.EmailMessage`:"
msgstr ""
":func:`!cgi.parse_header` можно заменить функциональностью пакета :mod:"
"`email`, который реализует те же MIME RFC. Например, с помощью :class:`email."
"message.EmailMessage`:"

#: ../../whatsnew/3.13.rst:1548
msgid ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"
msgstr ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"

#: ../../whatsnew/3.13.rst:1556
msgid ""
":func:`!cgi.parse_multipart` can be replaced with the functionality in the :"
"mod:`email` package, which implements the same MIME RFCs, or with the :pypi:"
"`multipart` library. For example, the :class:`email.message.EmailMessage` "
"and :class:`email.message.Message` classes."
msgstr ""
":func:`!cgi.parse_multipart` можно заменить функциональностью пакета :mod:"
"`email`, который реализует те же MIME RFC, или библиотекой :pypi:"
"`multipart`. Например, классы :class:`email.message.EmailMessage` и :class:"
"`email.message.Message`."

#: ../../whatsnew/3.13.rst:1562
msgid ""
":pypi:`standard-cgi`: and :pypi:`standard-cgitb`: Use the redistribution of "
"``cgi`` and ``cgitb`` library from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1565
msgid ""
":mod:`!crypt` and the private :mod:`!_crypt` extension. The :mod:`hashlib` "
"module may be an appropriate replacement when simply hashing a value is "
"required. Otherwise, various third-party libraries on PyPI are available:"
msgstr ""
":mod:`!crypt` и частное расширение :mod:`!_crypt`. Модуль :mod:`hashlib` "
"может быть подходящей заменой, когда требуется простое хеширование значения. "
"В противном случае доступны различные сторонние библиотеки PyPI:"

#: ../../whatsnew/3.13.rst:1570
msgid ""
":pypi:`bcrypt`: Modern password hashing for your software and your servers."
msgstr ""
":pypi:`bcrypt`: Современное хеширование паролей для вашего программного "
"обеспечения и ваших серверов."

#: ../../whatsnew/3.13.rst:1572
msgid ""
":pypi:`passlib`: Comprehensive password hashing framework supporting over 30 "
"schemes."
msgstr ""
":pypi:`passlib`: Комплексная платформа хеширования паролей, поддерживающая "
"более 30 схем."

#: ../../whatsnew/3.13.rst:1574
msgid ":pypi:`argon2-cffi`: The secure Argon2 password hashing algorithm."
msgstr ":pypi:`argon2-cffi`: Безопасный алгоритм хеширования паролей Argon2."

#: ../../whatsnew/3.13.rst:1576
msgid ""
":pypi:`legacycrypt`: :mod:`ctypes` wrapper to the POSIX crypt library call "
"and associated functionality."
msgstr ":pypi:`argon2-cffi`: Безопасный алгоритм хеширования паролей Argon2."

#: ../../whatsnew/3.13.rst:1579
msgid ""
":pypi:`crypt_r`: Fork of the :mod:`!crypt` module, wrapper to the :manpage:"
"`crypt_r(3)` library call and associated functionality."
msgstr ""
":pypi:`crypt_r`: Ответвление модуля :mod:`!crypt`, оболочка для вызова "
"библиотеки :manpage:`crypt_r(3)` и связанная с ней функциональность."

#: ../../whatsnew/3.13.rst:1583
msgid ""
":pypi:`standard-crypt` and :pypi:`deprecated-crypt-alternative`: Use the "
"redistribution of ``crypt`` and reimplementation of ``_crypt`` libraries "
"from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1586
msgid ""
":mod:`!imghdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements. For example, the :func:`!"
"puremagic.what` function can be used to replace the :func:`!imghdr.what` "
"function for all file formats that were supported by :mod:`!imghdr`."
msgstr ""
":mod:`!imghdr`: В качестве замены следует использовать библиотеки :pypi:"
"`filetype`, :pypi:`puremagic` или :pypi:`python-magic`. Например, функцию :"
"func:`!puremagic.what` можно использовать для замены функции :func:`!imghdr."
"what` для всех форматов файлов, которые поддерживаются :mod:`!imghdr`."

#: ../../whatsnew/3.13.rst:1593
msgid ""
":pypi:`standard-imghdr`: Use the redistribution of ``imghdr`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1596
msgid ":mod:`!mailcap`: Use the :mod:`mimetypes` module instead."
msgstr ":mod:`!mailcap`: Вместо этого используйте модуль :mod:`mimetypes`."

#: ../../whatsnew/3.13.rst:1599
msgid ""
":pypi:`standard-mailcap`: Use the redistribution of ``mailcap`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1602
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../whatsnew/3.13.rst:1603
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../whatsnew/3.13.rst:1604
msgid ":mod:`!nntplib`: Use the :pypi:`pynntp` library from PyPI instead."
msgstr ""
":mod:`!nntplib`: Вместо этого используйте библиотеку :pypi:`pynntp` из PyPI."

#: ../../whatsnew/3.13.rst:1607
msgid ""
":pypi:`standard-nntplib`: Use the redistribution of ``nntplib`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1610
msgid ""
":mod:`!ossaudiodev`: For audio playback, use the :pypi:`pygame` library from "
"PyPI instead."
msgstr ""
":mod:`!ossaudiodev`: Для воспроизведения звука используйте вместо этого "
"библиотеку :pypi:`pygame` из PyPI."

#: ../../whatsnew/3.13.rst:1612
msgid ""
":mod:`!pipes`: Use the :mod:`subprocess` module instead. Use :func:`shlex."
"quote` to replace the undocumented ``pipes.quote`` function."
msgstr ""
":mod:`!pipes`: Вместо этого используйте модуль :mod:`subprocess`. "
"Используйте :func:`shlex.quote` для замены недокументированной функции "
"``pipes.quote``."

#: ../../whatsnew/3.13.rst:1617
msgid ""
":pypi:`standard-pipes`: Use the redistribution of ``pipes`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1620
msgid ""
":mod:`!sndhdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements."
msgstr ""
":mod:`!sndhdr`: В качестве замены следует использовать библиотеки :pypi:"
"`filetype`, :pypi:`puremagic` или :pypi:`python-magic`."

#: ../../whatsnew/3.13.rst:1624
msgid ""
":pypi:`standard-sndhdr`: Use the redistribution of ``sndhdr`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1627
msgid ":mod:`!spwd`: Use the :pypi:`python-pam` library from PyPI instead."
msgstr ""
":mod:`!spwd`: Вместо этого используйте библиотеку :pypi:`python-pam` из PyPI."

#: ../../whatsnew/3.13.rst:1629
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../whatsnew/3.13.rst:1631
msgid ""
":pypi:`standard-sunau`: Use the redistribution of ``sunau`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1634
msgid ""
":mod:`!telnetlib`, Use the :pypi:`telnetlib3` or :pypi:`Exscript` libraries "
"from PyPI instead."
msgstr ""
":mod:`!telnetlib`, вместо этого используйте библиотеки :pypi:`telnetlib3` "
"или :pypi:`Exscript` из PyPI."

#: ../../whatsnew/3.13.rst:1637
msgid ""
":pypi:`standard-telnetlib`: Use the redistribution of ``telnetlib`` library "
"from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1640
msgid ""
":mod:`!uu`: Use the :mod:`base64` module instead, as a modern alternative."
msgstr ""
":mod:`!uu`: Use the :mod:`base64` module instead, as a modern alternative."

#: ../../whatsnew/3.13.rst:1643
msgid ""
":pypi:`standard-uu`: Use the redistribution of ``uu`` library from PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1646
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../whatsnew/3.13.rst:1648
msgid ""
":pypi:`standard-xdrlib`: Use the redistribution of ``xdrlib`` library from "
"PyPI."
msgstr ""

#: ../../whatsnew/3.13.rst:1651
msgid ""
"(Contributed by Victor Stinner and Zachary Ware in :gh:`104773` and :gh:"
"`104780`.)"
msgstr ""
"(Предоставлено Виктором Стиннером и Закари Уэром в :gh:`104773` и :gh:"
"`104780`.)"

#: ../../whatsnew/3.13.rst:1655
msgid "2to3"
msgstr "2to3"

#: ../../whatsnew/3.13.rst:1657
msgid ""
"Remove the :program:`2to3` program and the :mod:`!lib2to3` module, "
"previously deprecated in Python 3.11. (Contributed by Victor Stinner in :gh:"
"`104780`.)"
msgstr ""
"Удалите программу :program:`2to3` и модуль :mod:`!lib2to3`, которые ранее "
"считались устаревшими в Python 3.11. (Предоставлено Виктором Стиннером в :gh:"
"`104780`.)"

#: ../../whatsnew/3.13.rst:1663
msgid "builtins"
msgstr "встроенные"

#: ../../whatsnew/3.13.rst:1665
msgid ""
"Remove support for chained :class:`classmethod` descriptors (introduced in :"
"gh:`63272`). These can no longer be used to wrap other descriptors, such as :"
"class:`property`. The core design of this feature was flawed and led to "
"several problems. To \"pass-through\" a :class:`classmethod`, consider using "
"the :attr:`!__wrapped__` attribute that was added in Python 3.10. "
"(Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"Удалить поддержку связанных дескрипторов :class:`classmethod` (представлено "
"в :gh:`63272`). Их больше нельзя использовать для обертывания других "
"дескрипторов, таких как :class:`property`. Базовая конструкция этой функции "
"была ошибочной и привела к нескольким проблемам. Чтобы «пропустить» :class:"
"`classmethod`, рассмотрите возможность использования атрибута :attr:`!"
"__wrapped__`, который был добавлен в Python 3.10. (Предоставлено Рэймондом "
"Хеттингером в :gh:`89519`.)"

#: ../../whatsnew/3.13.rst:1674
msgid ""
"Raise a :exc:`RuntimeError` when calling :meth:`frame.clear` on a suspended "
"frame (as has always been the case for an executing frame). (Contributed by "
"Irit Katriel in :gh:`79932`.)"
msgstr ""
"Вызовите :exc:`RuntimeError` при вызове :meth:`frame.clear` для "
"приостановленного кадра (как всегда было в случае с исполняемым кадром). "
"(Предоставлено Ирит Катриэль в :gh:`79932`.)"

#: ../../whatsnew/3.13.rst:1682
msgid ""
"Remove the undocumented :class:`!LegacyInterpolation` class, deprecated in "
"the docstring since Python 3.2, and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""
"Удалите недокументированный класс :class:`!LegacyInterpolation`, который "
"устарел в строке документации, начиная с Python 3.2, и во время выполнения, "
"начиная с Python 3.11. (Предоставлено Хьюго ван Кеменаде в :gh:`104886`.)"

#: ../../whatsnew/3.13.rst:1689
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.13.rst:1691
msgid ""
"Remove deprecated subscript (:meth:`~object.__getitem__`) access for :ref:"
"`EntryPoint <entry-points>` objects. (Contributed by Jason R. Coombs in :gh:"
"`113175`.)"
msgstr ""
"Удалить устаревший доступ к индексу (:meth:`~object.__getitem__`) для "
"объектов :ref:`EntryPoint <entry-points>`. (Предоставлено Джейсоном Р. "
"Кумбсом в :gh:`113175`.)"

#: ../../whatsnew/3.13.rst:1697
msgid "locale"
msgstr "локаль"

#: ../../whatsnew/3.13.rst:1699
msgid ""
"Remove the :func:`!locale.resetlocale` function, deprecated in Python 3.11. "
"Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by "
"Victor Stinner in :gh:`104783`.)"
msgstr ""
"Удалите функцию :func:`!locale.resetlocale`, которая устарела в Python 3.11. "
"Вместо этого используйте ``locale.setlocale(locale.LC_ALL, \"\")``. "
"(Предоставлено Виктором Стиннером в :gh:`104783`.)"

#: ../../whatsnew/3.13.rst:1705
msgid "opcode"
msgstr "код операции"

#: ../../whatsnew/3.13.rst:1707
msgid ""
"Move :attr:`!opcode.ENABLE_SPECIALIZATION` to :attr:`!_opcode."
"ENABLE_SPECIALIZATION`. This field was added in 3.12, it was never "
"documented, and is not intended for external use. (Contributed by Irit "
"Katriel in :gh:`105481`.)"
msgstr ""
"Переместите :attr:`!opcode.ENABLE_SPECIALIZATION` в :attr:`!_opcode."
"ENABLE_SPECIALIZATION`. Это поле было добавлено в версии 3.12, оно никогда "
"не документировалось и не предназначено для внешнего использования. "
"(Предоставлено Ирит Катриэль в :gh:`105481`.)"

#: ../../whatsnew/3.13.rst:1712
msgid ""
"Remove :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE`, and :"
"attr:`!opcode.MAX_PSEUDO_OPCODE`, which were added in Python 3.12, but were "
"neither documented nor exposed through :mod:`dis`, and were not intended to "
"be used externally. (Contributed by Irit Katriel in :gh:`105481`.)"
msgstr ""
"Удалите :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE` и :attr:"
"`!opcode.MAX_PSEUDO_OPCODE`, которые были добавлены в Python 3.12, но не "
"были ни задокументированы, ни раскрыты через :mod:` dis` и не "
"предназначались для внешнего использования. (Предоставлено Ирит Катриэль в :"
"gh:`105481`.)"

#: ../../whatsnew/3.13.rst:1720
msgid "optparse"
msgstr "optparse"

#: ../../whatsnew/3.13.rst:1722
msgid ""
"This module is no longer considered :term:`soft deprecated`. While :mod:"
"`argparse` remains preferred for new projects that aren't using a third "
"party command line argument processing library, there are aspects of the way "
"``argparse`` works that mean the lower level ``optparse`` module may provide "
"a better foundation for *writing* argument processing libraries, and for "
"implementing command line applications which adhere more strictly than "
"``argparse`` does to various Unix command line processing conventions that "
"originate in the behaviour of the C :c:func:`!getopt` function . "
"(Contributed by Alyssa Coghlan and Serhiy Storchaka in :gh:`126180`.)"
msgstr ""
"Этот модуль больше не считается устаревшим. Хотя :mod:`argparse` остаётся "
"предпочтительным для новых проектов, которые не используют стороннюю "
"библиотеку обработки аргументов командной строки, существуют аспекты работы "
"``argparse``, которые означают, что модуль ``optparse`` нижнего уровня может "
"обеспечивают лучшую основу для *написания* библиотек обработки аргументов и "
"для реализации приложений командной строки, которые более строго, чем "
"argparse, придерживаются различных соглашений об обработке командной строки "
"Unix, которые основаны на поведении C. :c:func:`!getopt` функция . "
"(Предоставлено Алисой Коглан и Сергеем Сторчакой в ​​:gh:`126180`.)"

#: ../../whatsnew/3.13.rst:1738
msgid ""
"Remove the ability to use :class:`~pathlib.Path` objects as context "
"managers. This functionality was deprecated and has had no effect since "
"Python 3.9. (Contributed by Barney Gale in :gh:`83863`.)"
msgstr ""
"Удалите возможность использовать объекты :class:`~pathlib.Path` в качестве "
"менеджеров контекста. Эта функция устарела и не имеет никакого эффекта, "
"начиная с Python 3.9. (Предоставлено Барни Гейлом в :gh:`83863`.)"

#: ../../whatsnew/3.13.rst:1746
msgid ""
"Remove the undocumented, deprecated, and broken :func:`!re.template` "
"function and :attr:`!re.TEMPLATE` / :attr:`!re.T` flag. (Contributed by "
"Serhiy Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""
"Удалите недокументированную, устаревшую и неработающую функцию :func:`!re."
"template` и флаг :attr:`!re.TEMPLATE` / :attr:`!re.T`. (Предоставлено "
"Сергеем Сторчакой и Никитой Соболевым в :gh:`105687`.)"

#: ../../whatsnew/3.13.rst:1752
msgid "tkinter.tix"
msgstr "tkinter.tix"

#: ../../whatsnew/3.13.rst:1754
msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6. The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""
"Удалите модуль :mod:`!tkinter.tix`, который устарел в Python 3.6. Сторонняя "
"библиотека Tix, в которую встроен модуль, не поддерживается. (Предоставлено "
"Закари Уэром в :gh:`75552`.)"

#: ../../whatsnew/3.13.rst:1760
msgid "turtle"
msgstr "черепаха"

#: ../../whatsnew/3.13.rst:1762
msgid ""
"Remove the :meth:`!RawTurtle.settiltangle` method, deprecated in the "
"documentation since Python 3.1 and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""
"Удалите метод :meth:`!RawTurtle.settiltangle`, который устарел в "
"документации, начиная с Python 3.1, и во время выполнения, начиная с Python "
"3.11. (Предоставлено Хьюго ван Кеменаде в :gh:`104876`.)"

#: ../../whatsnew/3.13.rst:1771
msgid ""
"Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces, deprecated "
"since Python 3.8. The items in those namespaces can be imported directly "
"from the :mod:`typing` module. (Contributed by Sebastian Rittau in :gh:"
"`92871`.)"
msgstr ""
"Удалите пространства имен :mod:`!typing.io` и :mod:`!typing.re`, которые "
"устарели, начиная с Python 3.8. Элементы в этих пространствах имен можно "
"импортировать непосредственно из модуля :mod:`typing`. (Предоставлено "
"Себастьяном Риттау в :gh:`92871`.)"

#: ../../whatsnew/3.13.rst:1777
msgid ""
"Remove the keyword-argument method of creating :class:`~typing.TypedDict` "
"types, deprecated in Python 3.11. (Contributed by Tomas Roun in :gh:"
"`104786`.)"
msgstr ""
"Удалите метод ключевого слова-аргумента для создания типов :class:`~typing."
"TypedDict`, который устарел в Python 3.11. (Предоставлено Томасом Рауном в :"
"gh:`104786`.)"

#: ../../whatsnew/3.13.rst:1783
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.13.rst:1785
msgid ""
"Remove the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr "Удалите следующие функции :mod:`unittest`, устаревшие в Python 3.11:"

#: ../../whatsnew/3.13.rst:1787
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.13.rst:1788
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.13.rst:1789
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.13.rst:1791
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "Вместо этого используйте методы :class:`~unittest.TestLoader`:"

#: ../../whatsnew/3.13.rst:1793
msgid ":meth:`~unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.13.rst:1794
msgid ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.13.rst:1795
msgid ":meth:`~unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`~unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.13.rst:1797
msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr "(Предоставлено Хьюго ван Кеменаде в :gh:`104835`.)"

#: ../../whatsnew/3.13.rst:1799
msgid ""
"Remove the untested and undocumented :meth:`!TestProgram.usageExit` method, "
"deprecated in Python 3.11. (Contributed by Hugo van Kemenade in :gh:"
"`104992`.)"
msgstr ""
"Удалите непроверенный и недокументированный метод :meth:`!TestProgram."
"usageExit`, который устарел в Python 3.11. (Предоставлено Хьюго ван Кеменаде "
"в :gh:`104992`.)"

#: ../../whatsnew/3.13.rst:1805
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.13.rst:1807
msgid ""
"Remove the *cafile*, *capath*, and *cadefault* parameters of the :func:"
"`urllib.request.urlopen` function, deprecated in Python 3.6. Use the "
"*context* parameter instead with an :class:`~ssl.SSLContext` instance. The :"
"meth:`ssl.SSLContext.load_cert_chain` function can be used to load specific "
"certificates, or let :func:`ssl.create_default_context` select the operating "
"system's trusted certificate authority (CA) certificates. (Contributed by "
"Victor Stinner in :gh:`105382`.)"
msgstr ""
"Удалите параметры *cafile*, *capath* и *cadefault* функции :func:`urllib."
"request.urlopen`, которые устарели в Python 3.6. Вместо этого используйте "
"параметр *context* с экземпляром :class:`~ssl.SSLContext`. Функцию :meth:"
"`ssl.SSLContext.load_cert_chain` можно использовать для загрузки "
"определенных сертификатов или позволить :func:`ssl.create_default_context` "
"выбрать сертификаты доверенного центра сертификации (CA) операционной "
"системы. (Предоставлено Виктором Стиннером в :gh:`105382`.)"

#: ../../whatsnew/3.13.rst:1818
msgid "webbrowser"
msgstr "веб-браузер"

#: ../../whatsnew/3.13.rst:1820
msgid ""
"Remove the untested and undocumented :class:`!MacOSX` class, deprecated in "
"Python 3.11. Use the :class:`!MacOSXOSAScript` class (introduced in Python "
"3.2) instead. (Contributed by Hugo van Kemenade in :gh:`104804`.)"
msgstr ""
"Удалите непроверенный и недокументированный класс :class:`!MacOSX`, который "
"устарел в Python 3.11. Вместо этого используйте класс :class:`!"
"MacOSXOSAScript` (представленный в Python 3.2). (Предоставлено Хьюго ван "
"Кеменаде в :gh:`104804`.)"

#: ../../whatsnew/3.13.rst:1825
msgid ""
"Remove the deprecated :attr:`!MacOSXOSAScript._name` attribute. Use the :"
"attr:`MacOSXOSAScript.name <webbrowser.controller.name>` attribute instead. "
"(Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""
"Удалите устаревший атрибут :attr:`!MacOSXOSAScript._name`. Вместо этого "
"используйте атрибут :attr:`MacOSXOSAScript.name <webbrowser.controller."
"name>`. (Добавлен Никитой Соболевым в :gh:`105546`.)"

#: ../../whatsnew/3.13.rst:1832
msgid "New Deprecations"
msgstr "Новые прекращения поддержки"

#: ../../whatsnew/3.13.rst:1834
msgid ":ref:`User-defined functions <user-defined-funcs>`:"
msgstr ":ref:`Пользовательские функции <user-defined-funcs>`:"

#: ../../whatsnew/3.13.rst:1836
msgid ""
"Deprecate assignment to a function's :attr:`~function.__code__` attribute, "
"where the new code object's type does not match the function's type. The "
"different types are: plain function, generator, async generator, and "
"coroutine. (Contributed by Irit Katriel in :gh:`81137`.)"
msgstr ""
"Устарело присвоение атрибуту :attr:`~function.__code__` функции, если тип "
"нового объекта кода не соответствует типу функции. Существуют следующие "
"типы: простая функция, генератор, асинхронный генератор и сопрограмма. "
"(Предоставлено Ирит Катриэль в :gh:`81137`.)"

#: ../../whatsnew/3.13.rst:1842
#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../whatsnew/3.13.rst:1844
msgid ""
"Deprecate the ``'u'`` format code (:c:type:`wchar_t`) at runtime. This "
"format code has been deprecated in documentation since Python 3.3, and will "
"be removed in Python 3.16. Use the ``'w'`` format code (:c:type:`Py_UCS4`) "
"for Unicode characters instead. (Contributed by Hugo van Kemenade in :gh:"
"`80480`.)"
msgstr ""
"Устаревший код формата ``'u'`` (:c:type:`wchar_t`) во время выполнения. Этот "
"код формата устарел в документации начиная с Python 3.3 и будет удален в "
"Python 3.16. Вместо этого используйте код формата ``'w'`` (:c:type:"
"`Py_UCS4`) для символов Юникода. (Предоставлено Хьюго ван Кеменаде в :gh:"
"`80480`.)"

#: ../../whatsnew/3.13.rst:1851
#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.13.rst:1853
msgid ""
"Deprecate the undocumented :func:`!SetPointerType` function, to be removed "
"in Python 3.15. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""
"Устарела недокументированная функция :func:`!SetPointerType`, которая будет "
"удалена в Python 3.15. (Предоставлено Виктором Стиннером в :gh:`105733`.)"

#: ../../whatsnew/3.13.rst:1857
msgid ""
":term:`Soft-deprecate <soft deprecated>` the :func:`~ctypes.ARRAY` function "
"in favour of ``type * length`` multiplication. (Contributed by Victor "
"Stinner in :gh:`105733`.)"
msgstr ""
":term:`Soft-deprecate <soft deprecated>` функцию :func:`~ctypes.ARRAY` в "
"пользу умножения ``тип * длина``. (Предоставлено Виктором Стиннером в :gh:"
"`105733`.)"

#: ../../whatsnew/3.13.rst:1861
msgid ":mod:`decimal`:"
msgstr ":mod:`decimal`:"

#: ../../whatsnew/3.13.rst:1863
msgid ""
"Deprecate the non-standard and undocumented :class:`~decimal.Decimal` format "
"specifier ``'N'``, which is only supported in the :mod:`!decimal` module's C "
"implementation. (Contributed by Serhiy Storchaka in :gh:`89902`.)"
msgstr ""
"Устаревший нестандартный и недокументированный спецификатор формата :class:"
"`~decimal.Decimal` ``'N'``, который поддерживается только в реализации "
"модуля :mod:`!decimal` на языке C. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`89902`.)"

#: ../../whatsnew/3.13.rst:1868
msgid ":mod:`dis`:"
msgstr ":mod:`dis`:"

#: ../../whatsnew/3.13.rst:1870
msgid ""
"Deprecate the :attr:`!HAVE_ARGUMENT` separator. Check membership in :data:"
"`~dis.hasarg` instead. (Contributed by Irit Katriel in :gh:`109319`.)"
msgstr ""
"Устаревший разделитель :attr:`!HAVE_ARGUMENT`. Вместо этого проверьте "
"членство в :data:`~dis.hasarg`. (Предоставлено Ирит Катриэль в :gh:`109319`.)"

#: ../../whatsnew/3.13.rst:1874
msgid ":mod:`gettext`:"
msgstr ":mod:`gettext`:"

#: ../../whatsnew/3.13.rst:1876
msgid ""
"Deprecate non-integer numbers as arguments to functions and methods that "
"consider plural forms in the :mod:`!gettext` module, even if no translation "
"was found. (Contributed by Serhiy Storchaka in :gh:`88434`.)"
msgstr ""
"Устаревшие нецелые числа в качестве аргументов функций и методов, которые "
"учитывают формы множественного числа в модуле :mod:`!gettext`, даже если "
"перевод не найден. (Предоставлено Сергеем Сторчакой в ​​:gh:`88434`.)"

#: ../../whatsnew/3.13.rst:1881
msgid ":mod:`glob`:"
msgstr ":mod:`glob`:"

#: ../../whatsnew/3.13.rst:1883
msgid ""
"Deprecate the undocumented :func:`!glob0` and :func:`!glob1` functions. Use :"
"func:`~glob.glob` and pass a :term:`path-like object` specifying the root "
"directory to the *root_dir* parameter instead. (Contributed by Barney Gale "
"in :gh:`117337`.)"
msgstr ""
"Устаревшие недокументированные функции :func:`!glob0` и :func:`!glob1`. "
"Используйте :func:`~glob.glob` и вместо этого передайте :term:`path-подобный "
"объект`, указав корневой каталог в параметре *root_dir*. (Предоставлено "
"Барни Гейлом в :gh:`117337`.)"

#: ../../whatsnew/3.13.rst:1888
#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../whatsnew/3.13.rst:1890
msgid ""
"Deprecate :class:`~http.server.CGIHTTPRequestHandler`, to be removed in "
"Python 3.15. Process-based CGI HTTP servers have been out of favor for a "
"very long time. This code was outdated, unmaintained, and rarely used. It "
"has a high potential for both security and functionality bugs. (Contributed "
"by Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"Устаревший :class:`~http.server.CGIHTTPRequestHandler`, который будет удален "
"в Python 3.15. HTTP-серверы CGI на основе процессов уже очень долгое время "
"не пользуются популярностью. Этот код устарел, не сопровождался и "
"использовался редко. Он имеет высокий потенциал ошибок как в безопасности, "
"так и в функциональности. (Предоставлено Грегори П. Смитом в :gh:`109096`.)"

#: ../../whatsnew/3.13.rst:1897
msgid ""
"Deprecate the :option:`!--cgi` flag to the :program:`python -m http.server` "
"command-line interface, to be removed in Python 3.15. (Contributed by "
"Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"Устаревший флаг :option:`!--cgi` в интерфейсе командной строки :program:"
"`python -m http.server`, который будет удален в Python 3.15. (Предоставлено "
"Грегори П. Смитом в :gh:`109096`.)"

#: ../../whatsnew/3.13.rst:1902
#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../whatsnew/3.13.rst:1904
msgid ""
":term:`Soft-deprecate <soft deprecated>` file path arguments to :func:"
"`~mimetypes.guess_type`, use :func:`~mimetypes.guess_file_type` instead. "
"(Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""
":term:`Soft-deprecate <soft deprecated>` аргументы пути к файлу :func:"
"`~mimetypes.guess_type`, вместо этого используйте :func:`~mimetypes."
"guess_file_type`. (Предоставлено Сергеем Сторчакой в ​​:gh:`66543`.)"

#: ../../whatsnew/3.13.rst:1909
msgid ":mod:`re`:"
msgstr ":mod:`re`:"

#: ../../whatsnew/3.13.rst:1911
msgid ""
"Deprecate passing the optional *maxsplit*, *count*, or *flags* arguments as "
"positional arguments to the module-level :func:`~re.split`, :func:`~re.sub`, "
"and :func:`~re.subn` functions. These parameters will become :ref:`keyword-"
"only <keyword-only_parameter>` in a future version of Python. (Contributed "
"by Serhiy Storchaka in :gh:`56166`.)"
msgstr ""
"Устарела передача необязательных аргументов *maxsplit*, *count* или *flags* "
"в качестве позиционных аргументов на уровне модуля :func:`~re.split`, :func:"
"`~re.sub` и :func:` ~re.subn` функции. Эти параметры станут :ref:`keyword-"
"only <keyword-only_parameter>` в будущей версии Python. (Предоставлено "
"Сергеем Сторчакой в ​​:gh:`56166`.)"

#: ../../whatsnew/3.13.rst:1918
#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../whatsnew/3.13.rst:1920
msgid ""
"Deprecate :meth:`.PurePath.is_reserved`, to be removed in Python 3.15. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows. (Contributed "
"by Barney Gale in :gh:`88569`.)"
msgstr ""
"Устарело :meth:`.PurePath.is_reserved`, оно будет удалено в Python 3.15. "
"Используйте :func:`os.path.isreserved` для обнаружения зарезервированных "
"путей в Windows. (Предоставлено Барни Гейлом в :gh:`88569`.)"

#: ../../whatsnew/3.13.rst:1925
#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../whatsnew/3.13.rst:1927
msgid ""
"Deprecate :func:`~platform.java_ver`, to be removed in Python 3.15. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
"Устарела :func:`~platform.java_ver`, будет удалена в Python 3.15. Эта "
"функция полезна только для поддержки Jython, имеет запутанный API и "
"практически не протестирована. (Предоставлено Никитой Соболевым в :gh:"
"`116349`.)"

#: ../../whatsnew/3.13.rst:1933
msgid ":mod:`pydoc`:"
msgstr ":mod:`pydoc`:"

#: ../../whatsnew/3.13.rst:1935
msgid ""
"Deprecate the undocumented :func:`!ispackage` function. (Contributed by "
"Zackery Spytz in :gh:`64020`.)"
msgstr ""
"Устаревшая недокументированная функция :func:`!ispackage`. (Предоставлено "
"Закери Шпитцем в :gh:`64020`.)"

#: ../../whatsnew/3.13.rst:1938
#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: ../../whatsnew/3.13.rst:1940
msgid ""
"Deprecate passing more than one positional argument to the :func:`~sqlite3."
"connect` function and the :class:`~sqlite3.Connection` constructor. The "
"remaining parameters will become keyword-only in Python 3.15. (Contributed "
"by Erlend E. Aasland in :gh:`107948`.)"
msgstr ""
"Устарела передача более одного позиционного аргумента в функцию :func:"
"`~sqlite3.connect` и конструктор :class:`~sqlite3.Connection`. Остальные "
"параметры в Python 3.15 станут доступны только по ключевым словам. "
"(Предоставлено Эрлендом Э. Осландом в :gh:`107948`.)"

#: ../../whatsnew/3.13.rst:1946
msgid ""
"Deprecate passing name, number of arguments, and the callable as keyword "
"arguments for :meth:`.Connection.create_function` and :meth:`.Connection."
"create_aggregate` These parameters will become positional-only in Python "
"3.15. (Contributed by Erlend E. Aasland in :gh:`108278`.)"
msgstr ""
"Устарела передача имени, количества аргументов и вызываемых аргументов в "
"качестве ключевых слов для :meth:`.Connection.create_function` и :meth:`."
"Connection.create_aggregate`. Эти параметры станут позиционными только в "
"Python 3.15. (Предоставлено Эрлендом Э. Осландом в :gh:`108278`.)"

#: ../../whatsnew/3.13.rst:1952
msgid ""
"Deprecate passing the callback callable by keyword for the :meth:`~sqlite3."
"Connection.set_authorizer`, :meth:`~sqlite3.Connection."
"set_progress_handler`, and :meth:`~sqlite3.Connection.set_trace_callback` :"
"class:`~sqlite3.Connection` methods. The callback callables will become "
"positional-only in Python 3.15. (Contributed by Erlend E. Aasland in :gh:"
"`108278`.)"
msgstr ""
"Устарела передача обратного вызова, вызываемого по ключевому слову для :meth:"
"`~sqlite3.Connection.set_authorizer`, :meth:`~sqlite3.Connection."
"set_progress_handler` и :meth:`~sqlite3.Connection.set_trace_callback` :"
"class:`~ sqlite3.Connection` методы. В Python 3.15 вызываемые объекты "
"обратного вызова станут только позиционными. (Предоставлено Эрлендом Э. "
"Осландом в :gh:`108278`.)"

#: ../../whatsnew/3.13.rst:1960
#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../whatsnew/3.13.rst:1962
msgid ""
"Deprecate the :func:`~sys._enablelegacywindowsfsencoding` function, to be "
"removed in Python 3.16. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead. (Contributed by Inada Naoki in :gh:`73427`.)"
msgstr ""
"Устарела функция :func:`~sys._enablelegacywindowsfsencoding`, которая будет "
"удалена в Python 3.16. Вместо этого используйте переменную среды :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING`. (Предоставлено Инадой Наоки в :gh:`73427`.)"

#: ../../whatsnew/3.13.rst:1967
#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../whatsnew/3.13.rst:1969
msgid ""
"Deprecate the undocumented and unused :attr:`!TarFile.tarfile` attribute, to "
"be removed in Python 3.16. (Contributed in :gh:`115256`.)"
msgstr ""
"Устаревший недокументированный и неиспользуемый атрибут :attr:`!TarFile."
"tarfile`, который будет удален в Python 3.16. (Внесено в :gh:`115256`.)"

#: ../../whatsnew/3.13.rst:1973
msgid ":mod:`traceback`:"
msgstr ":mod:`traceback`:"

#: ../../whatsnew/3.13.rst:1975
msgid ""
"Deprecate the :attr:`.TracebackException.exc_type` attribute. Use :attr:`."
"TracebackException.exc_type_str` instead. (Contributed by Irit Katriel in :"
"gh:`112332`.)"
msgstr ""
"Устаревший атрибут :attr:`.TracebackException.exc_type`. Вместо этого "
"используйте :attr:`.TracebackException.exc_type_str`. (Предоставлено Ирит "
"Катриэль в :gh:`112332`.)"

#: ../../whatsnew/3.13.rst:1979
#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../whatsnew/3.13.rst:1981
msgid ""
"Deprecate the undocumented keyword argument syntax for creating :class:"
"`~typing.NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``), to be removed in Python 3.15. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Alex Waygood in :gh:`105566`.)"
msgstr ""
"Устаревший синтаксис недокументированного аргумента ключевого слова для "
"создания классов :class:`~typing.NamedTuple` (например, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``), который будет удален в Python 3.15. "
"Вместо этого используйте синтаксис на основе классов или функциональный "
"синтаксис. (Предоставлено Алексом Вэйгудом в :gh:`105566`.)"

#: ../../whatsnew/3.13.rst:1988
msgid ""
"Deprecate omitting the *fields* parameter when creating a :class:`~typing."
"NamedTuple` or :class:`typing.TypedDict` class, and deprecate passing "
"``None`` to the *fields* parameter of both types. Python 3.15 will require a "
"valid sequence for the *fields* parameter. To create a NamedTuple class with "
"zero fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"())``. To create a TypedDict class with zero fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``. (Contributed by "
"Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""
"Устарело исключение параметра *fields* при создании класса :class:`~typing."
"NamedTuple` или :class:`typing.TypedDict`, а также устарела передача "
"``None`` в параметр *fields* обоих типов. Python 3.15 потребует допустимую "
"последовательность для параметра *fields*. Чтобы создать класс NamedTuple с "
"нулевыми полями, используйте ``class NT(NamedTuple): pass`` или ``NT = "
"NamedTuple(\"NT\", ())``. Чтобы создать класс TypedDict с нулевыми полями, "
"используйте class TD(TypedDict): pass или TD = TypedDict(\"TD\", {})``. "
"(Предоставлено Алексом Вэйгудом в :gh:`105566` и :gh:`105570`.)"

#: ../../whatsnew/3.13.rst:1998
msgid ""
"Deprecate the :func:`typing.no_type_check_decorator` decorator function, to "
"be removed in Python 3.15. After eight years in the :mod:`typing` module, it "
"has yet to be supported by any major type checker. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2004
msgid ""
"Deprecate :data:`typing.AnyStr`. In Python 3.16, it will be removed from "
"``typing.__all__``, and a :exc:`DeprecationWarning` will be emitted at "
"runtime when it is imported or accessed. It will be removed entirely in "
"Python 3.18. Use the new :ref:`type parameter syntax <type-params>` instead. "
"(Contributed by Michael The in :gh:`107116`.)"
msgstr ""
"Устаревший :data:`typing.AnyStr`. В Python 3.16 он будет удален из ``typing."
"__all__``, а :exc:`DeprecationWarning` будет генерироваться во время "
"выполнения при его импорте или доступе. Он будет полностью удален в Python "
"3.18. Вместо этого используйте новый синтаксис параметра типа <type-"
"params>`. (Предоставлено Майклом Тэ в :gh:`107116`.)"

#: ../../whatsnew/3.13.rst:2012
#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`:"

#: ../../whatsnew/3.13.rst:2014
msgid ""
"Deprecate the :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:"
"`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :"
"class:`~wave.Wave_write` classes, to be removed in Python 3.15. (Contributed "
"by Victor Stinner in :gh:`105096`.)"
msgstr ""
"Устаревшие методы :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` и :meth:"
"`~wave.Wave_read.getmarkers` для :class:`~wave.Wave_read` и :class: Классы "
"`~wave.Wave_write`, которые будут удалены в Python 3.15. (Предоставлено "
"Виктором Стиннером в :gh:`105096`.)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending removal in Python 3.14"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: Параметры *type*, *choices* и *metavar* :class:`!argparse."
"BooleanOptionalAction` устарели и будут удалены в версии 3.14. (Добавлен "
"Никитой Соболевым в :gh:`92248`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: Следующие функции устарели в документации, начиная с Python 3.8, "
"теперь вызывают выдачу :exc:`DeprecationWarning` во время выполнения, когда "
"к ним обращаются или используют, и будут удалены в Python 3.14:"

#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""
"Вместо этого используйте :class:`ast.Constant`. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`90953`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:22
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`!asyncio.MultiLoopChildWatcher`, :class:`!"
"asyncio.FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` and :class:"
"`!asyncio.SafeChildWatcher` are deprecated and will be removed in Python "
"3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, :"
"meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`!"
"asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated and will "
"be removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` deprecated classes:"

#: ../../deprecations/pending-removal-in-3.14.rst:52
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../deprecations/pending-removal-in-3.14.rst:54
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Use :mod:`importlib.resources.abc` classes instead:"

#: ../../deprecations/pending-removal-in-3.14.rst:58
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""
"(Предоставлено Джейсоном Р. Кумбсом и Хьюго ван Кеменаде в :gh:`93963`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:63
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:69
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: Метод запуска по умолчанию изменится на более "
"безопасный в Linux, BSD и других платформах, отличных от macOS POSIX, где в "
"настоящее время по умолчанию используется ``'fork'`` (:gh:`84559`). "
"Добавление предупреждения об этом во время выполнения было сочтено слишком "
"разрушительным, поскольку ожидается, что большая часть кода не будет "
"обращать на это внимания. Используйте API :func:`~multiprocessing."
"get_context` или :func:`~multiprocessing.set_start_method`, чтобы явно "
"указать, когда ваш код *требует* ``'вилки'``. См. :ref:`мультипроцессорные-"
"стартовые методы`."

#: ../../deprecations/pending-removal-in-3.14.rst:77
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` и :meth:`~pathlib."
"PurePath.relative_to`: передача дополнительных аргументов устарела."

#: ../../deprecations/pending-removal-in-3.14.rst:81
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:86
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: ../../deprecations/pending-removal-in-3.14.rst:88
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: используйте :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "``slave_open()``: используйте :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:93
msgid ":data:`!version` and :data:`!version_info`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:95
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."

#: ../../deprecations/pending-removal-in-3.14.rst:99
msgid ""
":mod:`typing`: :class:`!typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "Система импорта:"

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Установка :attr:`~module.__cached__` в модуле без установки :attr:`__spec__."
"cached <importlib.machinery.ModuleSpec.cached>` устарела. В Python 3.15 :"
"attr:`!__cached__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Установка :attr:`~module.__package__` в модуле без установки :attr:`__spec__."
"parent <importlib.machinery.ModuleSpec.parent>` устарела. В Python 3.15 :"
"attr:`!__package__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"Недокументированная функция :func:`!ctypes.SetPointerType` устарела начиная "
"с Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"Устаревший и редко используемый :class:`~http.server.CGIHTTPRequestHandler` "
"устарел, начиная с Python 3.13. Прямой замены не существует. *Что угодно* "
"лучше, чем CGI, для взаимодействия веб-сервера с обработчиком запросов."

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"Флаг :option:`!--cgi` в интерфейсе командной строки :program:`python -m http."
"server` устарел, начиная с Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "exec_module"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"Функция :func:`~locale.getdefaultlocale` устарела, начиная с Python 3.11. "
"Его удаление изначально планировалось для Python 3.13 (:gh:`90817`), но было "
"отложено до Python 3.15. Вместо этого используйте :func:`~locale."
"getlocale`, :func:`~locale.setlocale` и :func:`~locale.getencoding`. "
"(Предоставлено Хьюго ван Кеменаде в :gh:`111187`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` устарел, начиная с Python 3.13. Используйте :"
"func:`os.path.isreserved` для обнаружения зарезервированных путей в Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` устарел, начиная с Python 3.13. Эта функция "
"полезна только для поддержки Jython, имеет запутанный API и практически не "
"проверена."

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` не принимает аргументов в Python 3.15. Передача "
"каких-либо аргументов устарела начиная с Python 3.14, поскольку версия "
"Python не допускает никаких аргументов, но версия C допускает любое "
"количество позиционных или ключевых аргументов, игнорируя каждый аргумент."

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Доступ к :attr:`~codeobject.co_lnotab` устарел в :"
"pep:`626` с версии 3.10 и планировалось удалить в 3.12, но он получил только "
"правильное :exc:`DeprecationWarning ` в 3.12. Может быть удалено в 3.15. "
"(Добавлен Никитой Соболевым в :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"Функция декоратора :func:`typing.no_type_check_decorator` устарела, начиная "
"с Python 3.13. После восьми лет использования модуля :mod:`typing` он до сих "
"пор не поддерживается ни одной крупной программой проверки типов."

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Методы :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` и :meth:`~wave."
"Wave_read.getmarkers` для :class:`~wave.Wave_read` и :class:` Классы ~wave."
"Wave_write` устарели, начиная с Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "Ожидается удаление в Python 3.16"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"Установка :attr:`~module.__loader__` в модуле без установки :attr:`__spec__."
"loader <importlib.machinery.ModuleSpec.loader>` устарела. В Python 3.16 :"
"attr:`!__loader__` перестанет устанавливаться или учитываться системой "
"импорта или стандартной библиотекой."

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"Код формата ``'u'`` (:c:type:`wchar_t`) устарел в документации, начиная с "
"Python 3.3, и во время выполнения, начиная с Python 3.13. Вместо этого "
"используйте код формата ``'w'`` (:c:type:`Py_UCS4`) для символов Юникода."

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"Побитовая инверсия логических типов ``~True`` или ``~False`` устарела, "
"начиная с Python 3.12, поскольку она приводит к неожиданным и неинтуитивным "
"результатам (``-2`` и ``-1``. Вместо этого используйте ``not x`` для "
"логического отрицания логического значения. В редких случаях, когда вам "
"нужна поразрядная инверсия основного целого числа, преобразуйте его в int "
"явно (``~int(x)``)."

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"Исключение :class:`!ExecError` устарело, начиная с Python 3.14. Он не "
"использовался ни одной функцией в :mod:`!shutil` начиная с Python 3.4 и "
"теперь является псевдонимом :exc:`RuntimeError`."

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"Метод :meth:`Class.get_methods <symtable.Class.get_methods>` устарел, "
"начиная с Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"Функция :func:`~sys._enablelegacywindowsfsencoding` устарела начиная с "
"Python 3.13. Вместо этого используйте переменную среды :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING`."

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"Недокументированный и неиспользуемый атрибут :attr:`!TarFile.tarfile` "
"устарел, начиная с Python 3.13."

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr ""

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Следующие API будут удалены в будущем, хотя дата их удаления в настоящее "
"время не запланирована."

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Генераторы: сигнатура ``throw(type, exc, tb)`` и ``athrow(type, exc, tb)`` "
"устарела: вместо этого используйте ``throw(exc)`` и ``athrow(exc)`` , "
"сигнатура одного аргумента."

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"В настоящее время Python принимает числовые литералы, за которыми сразу "
"следуют ключевые слова, например ``0in x``, ``1or x``, ``0if 1else 2``. Это "
"позволяет использовать запутанные и неоднозначные выражения, такие как "
"``[0x1for x in y]`` (которые можно интерпретировать как ``[0x1 for x in y]`` "
"или ``[0x1f or x in y]``). Синтаксическое предупреждение выдается, если за "
"числовым литералом сразу следует одно из ключевых слов :keyword:`and`, :"
"keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in` , :keyword:`is` "
"и :keyword:`or`. В будущем выпуске это будет изменено на синтаксическую "
"ошибку. (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Поддержка методов ``__index__()`` и ``__int__()``, возвращающих тип, "
"отличный от int: эти методы потребуются для возврата экземпляра строгого "
"подкласса :class:`int`."

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Поддержка метода __float__(), возвращающего строгий подкласс :class:`float`: "
"эти методы потребуются для возврата экземпляра :class:`float`."

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Поддержка метода ``__complex__()``, возвращающего строгий подкласс :class:"
"`complex`: эти методы потребуются для возврата экземпляра :class:`complex`."

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Делегирование ``int()`` методу ``__trunc__()``."

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Передача комплексного числа в качестве аргумента *real* или *imag* в "
"конструкторе :func:`complex` теперь не рекомендуется; его следует передавать "
"только как один позиционный аргумент. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`109218`.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Константы ``calendar.January`` и ``calendar.February`` "
"устарели и заменены на :data:`calendar.JANUARY` и :data:`calendar.FEBRUARY`. "
"(Предоставлено принцем Рошаном в :gh:`103636`.)"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: вместо этого используйте метод :meth:"
"`codeobject.co_lines`."

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: используйте ``datetime.datetime."
"now(tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: Множественное значение должно быть целым числом."

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` Параметр *debug_override* устарел: "
"вместо него используйте параметр *optimization*."

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "Интерфейс кортежа ``EntryPoints``."

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "Неявное ``None`` для возвращаемых значений."

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: метод ``warn()`` устарел, начиная с Python 3.3, вместо него "
"используйте :meth:`~logging.warning`."

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: Использование ввода StringIO и текстового режима устарело, "
"вместо этого используйте BytesIO и двоичный режим."

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: Вызов :func:`os.register_at_fork` в многопоточном процессе."

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: значение кортежа для параметра *exc_info* "
"устарело, используйте экземпляр исключения."

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: К числовым ссылкам на группы и именам групп в регулярных "
"выражениях теперь применяются более строгие правила. В качестве числовой "
"ссылки теперь принимается только последовательность цифр ASCII. Имя группы в "
"байтовых шаблонах и строках замены теперь может содержать только буквы "
"ASCII, цифры и подчеркивание. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`91760`.)"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr "Модули :mod:`!sre_compile`, :mod:`!sre_constants` и :mod:`!sre_parse`."

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` опции и протоколы:"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` без аргумента протокола устарел."

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` опции"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` опции"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` методы:"

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: используйте :meth:`~threading."
"Condition.notify_all`."

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""
":meth:`!threading.Event.isSet`: используйте :meth:`~threading.Event.is_set`."

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: используйте :meth:`threading."
"current_thread`."

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""
":meth:`!threading.activeCount`: используйте :meth:`threading.active_count`."

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: не рекомендуется возвращать из "
"тестового примера значение, отличное от ``None``."

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` устаревшая функция: используйте :func:`~urllib.parse."
"urlparse` "

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` не должен выполнять "
"частичную запись."

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: Проверка истинности :class:`~xml.etree."
"ElementTree.Element` устарела. В будущем выпуске он всегда будет возвращать "
"``True``. Вместо этого отдавайте предпочтение явным тестам ``len(elem)`` или "
"``elem is not None``."

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2033
msgid "CPython Bytecode Changes"
msgstr "Изменения байт-кода CPython"

#: ../../whatsnew/3.13.rst:2035
msgid ""
"The oparg of :opcode:`YIELD_VALUE` is now ``1`` if the yield is part of a "
"yield-from or await, and ``0`` otherwise. The oparg of :opcode:`RESUME` was "
"changed to add a bit indicating if the except-depth is 1, which is needed to "
"optimize closing of generators. (Contributed by Irit Katriel in :gh:"
"`111354`.)"
msgstr ""
"Oparg :opcode:`YIELD_VALUE` теперь равен ``1``, если выход является частью "
"доходности или ожидания, и ``0`` в противном случае. Операционный код :"
"opcode:`RESUME` был изменен, чтобы добавить бит, указывающий, равна ли "
"глубина исключения 1, что необходимо для оптимизации закрытия генераторов. "
"(Предоставлено Ирит Катриэль в :gh:`111354`.)"

#: ../../whatsnew/3.13.rst:2043
msgid "C API Changes"
msgstr "Изменения в C API"

#: ../../whatsnew/3.13.rst:2048
msgid ""
"Add the :ref:`PyMonitoring C API <c-api-monitoring>` for generating :pep:"
"`669` monitoring events:"
msgstr ""
"Добавьте :ref:`PyMonitoring C API <c-api-monitoring>` для генерации :pep:"
"`669` событий мониторинга:"

#: ../../whatsnew/3.13.rst:2051
msgid ":c:type:`PyMonitoringState`"
msgstr ":c:type:`PyMonitoringState`"

#: ../../whatsnew/3.13.rst:2052
msgid ":c:func:`PyMonitoring_FirePyStartEvent`"
msgstr ":c:func:`PyMonitoring_FirePyStartEvent`"

#: ../../whatsnew/3.13.rst:2053
msgid ":c:func:`PyMonitoring_FirePyResumeEvent`"
msgstr ":c:func:`PyMonitoring_FirePyResumeEvent`"

#: ../../whatsnew/3.13.rst:2054
msgid ":c:func:`PyMonitoring_FirePyReturnEvent`"
msgstr ":c:func:`PyMonitoring_FirePyReturnEvent`"

#: ../../whatsnew/3.13.rst:2055
msgid ":c:func:`PyMonitoring_FirePyYieldEvent`"
msgstr ":c:func:`PyMonitoring_FirePyYieldEvent`"

#: ../../whatsnew/3.13.rst:2056
msgid ":c:func:`PyMonitoring_FireCallEvent`"
msgstr ":c:func:`PyMonitoring_FireCallEvent`"

#: ../../whatsnew/3.13.rst:2057
msgid ":c:func:`PyMonitoring_FireLineEvent`"
msgstr ":c:func:`PyMonitoring_FireLineEvent`"

#: ../../whatsnew/3.13.rst:2058
msgid ":c:func:`PyMonitoring_FireJumpEvent`"
msgstr ":c:func:`PyMonitoring_FireJumpEvent`"

#: ../../whatsnew/3.13.rst:2059
msgid "``PyMonitoring_FireBranchEvent``"
msgstr ""

#: ../../whatsnew/3.13.rst:2060
msgid ":c:func:`PyMonitoring_FireCReturnEvent`"
msgstr ":c:func:`PyMonitoring_FireCReturnEvent`"

#: ../../whatsnew/3.13.rst:2061
msgid ":c:func:`PyMonitoring_FirePyThrowEvent`"
msgstr ":c:func:`PyMonitoring_FirePyThrowEvent`"

#: ../../whatsnew/3.13.rst:2062
msgid ":c:func:`PyMonitoring_FireRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireRaiseEvent`"

#: ../../whatsnew/3.13.rst:2063
msgid ":c:func:`PyMonitoring_FireCRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireCRaiseEvent`"

#: ../../whatsnew/3.13.rst:2064
msgid ":c:func:`PyMonitoring_FireReraiseEvent`"
msgstr ":c:func:`PyMonitoring_FireReraiseEvent`"

#: ../../whatsnew/3.13.rst:2065
msgid ":c:func:`PyMonitoring_FireExceptionHandledEvent`"
msgstr ":c:func:`PyMonitoring_FireExceptionHandledEvent`"

#: ../../whatsnew/3.13.rst:2066
msgid ":c:func:`PyMonitoring_FirePyUnwindEvent`"
msgstr ":c:func:`PyMonitoring_FirePyUnwindEvent`"

#: ../../whatsnew/3.13.rst:2067
msgid ":c:func:`PyMonitoring_FireStopIterationEvent`"
msgstr ":c:func:`PyMonitoring_FireStopIterationEvent`"

#: ../../whatsnew/3.13.rst:2068
msgid ":c:func:`PyMonitoring_EnterScope`"
msgstr ":c:func:`PyMonitoring_EnterScope`"

#: ../../whatsnew/3.13.rst:2069
msgid ":c:func:`PyMonitoring_ExitScope`"
msgstr ":c:func:`PyMonitoring_ExitScope`"

#: ../../whatsnew/3.13.rst:2071
msgid "(Contributed by Irit Katriel in :gh:`111997`)."
msgstr "(Предоставлено Ирит Катриэль в :gh:`111997`)."

#: ../../whatsnew/3.13.rst:2073
msgid ""
"Add :c:type:`PyMutex`, a lightweight mutex that occupies a single byte, and "
"the new :c:func:`PyMutex_Lock` and :c:func:`PyMutex_Unlock` functions. :c:"
"func:`!PyMutex_Lock` will release the :term:`GIL` (if currently held) if the "
"operation needs to block. (Contributed by Sam Gross in :gh:`108724`.)"
msgstr ""
"Добавьте :c:type:`PyMutex`, облегченный мьютекс, занимающий один байт, и "
"новые функции :c:func:`PyMutex_Lock` и :c:func:`PyMutex_Unlock`. :c:func:`!"
"PyMutex_Lock` освободит :term:`GIL` (если он в данный момент удерживается), "
"если операцию необходимо заблокировать. (Предоставлено Сэмом Гроссом в :gh:"
"`108724`.)"

#: ../../whatsnew/3.13.rst:2079
msgid ""
"Add the :ref:`PyTime C API <c-api-time>` to provide access to system clocks:"
msgstr ""
"Добавьте :ref:`PyTime C API <c-api-time>` для предоставления доступа к "
"системным часам:"

#: ../../whatsnew/3.13.rst:2081
msgid ":c:type:`PyTime_t`."
msgstr ":c:type:`PyTime_t`."

#: ../../whatsnew/3.13.rst:2082
msgid ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX`."
msgstr ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX`."

#: ../../whatsnew/3.13.rst:2083
msgid ":c:func:`PyTime_AsSecondsDouble`."
msgstr ":c:func:`PyTime_AsSecondsDouble`."

#: ../../whatsnew/3.13.rst:2084
msgid ":c:func:`PyTime_Monotonic`."
msgstr ":c:func:`PyTime_Monotonic`."

#: ../../whatsnew/3.13.rst:2085
msgid ":c:func:`PyTime_MonotonicRaw`."
msgstr ":c:func:`PyTime_MonotonicRaw`."

#: ../../whatsnew/3.13.rst:2086
msgid ":c:func:`PyTime_PerfCounter`."
msgstr ":c:func:`PyTime_PerfCounter`."

#: ../../whatsnew/3.13.rst:2087
msgid ":c:func:`PyTime_PerfCounterRaw`."
msgstr ":c:func:`PyTime_PerfCounterRaw`."

#: ../../whatsnew/3.13.rst:2088
msgid ":c:func:`PyTime_Time`."
msgstr ":c:func:`PyTime_Time`."

#: ../../whatsnew/3.13.rst:2089
msgid ":c:func:`PyTime_TimeRaw`."
msgstr ":c:func:`PyTime_TimeRaw`."

#: ../../whatsnew/3.13.rst:2091
msgid "(Contributed by Victor Stinner and Petr Viktorin in :gh:`110850`.)"
msgstr "(Предоставлено Виктором Стиннером и Петром Викториным в :gh:`110850`.)"

#: ../../whatsnew/3.13.rst:2093
msgid ""
"Add the :c:func:`PyDict_ContainsString` function with the same behavior as :"
"c:func:`PyDict_Contains`, but *key* is specified as a :c:expr:`const char*` "
"UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`. (Contributed "
"by Victor Stinner in :gh:`108314`.)"
msgstr ""
"Добавьте функцию :c:func:`PyDict_ContainsString` с тем же поведением, что и :"
"c:func:`PyDict_Contains`, но *key* указан как :c:expr:`const char*` строка "
"байтов в кодировке UTF-8, а не :c:expr:`PyObject*`. (Предоставлено Виктором "
"Стиннером в :gh:`108314`.)"

#: ../../whatsnew/3.13.rst:2099
msgid ""
"Add the :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions, which behave similarly to :c:func:`PyDict_GetItemWithError`, but "
"return a  :term:`strong reference` instead of a :term:`borrowed reference`. "
"Moreover, these functions return ``-1`` on error, removing the need to "
"check :c:func:`!PyErr_Occurred`. (Contributed by Victor Stinner in :gh:"
"`106004`.)"
msgstr ""
"Добавьте функции :c:func:`PyDict_GetItemRef` и :c:func:"
"`PyDict_GetItemStringRef`, которые ведут себя аналогично :c:func:"
"`PyDict_GetItemWithError`, но возвращают :term:`strong reference` вместо :"
"term: `заимствованная ссылка`. Более того, эти функции возвращают ``-1`` в "
"случае ошибки, устраняя необходимость проверки :c:func:`!PyErr_Occurred`. "
"(Предоставлено Виктором Стиннером в :gh:`106004`.)"

#: ../../whatsnew/3.13.rst:2107
msgid ""
"Add the :c:func:`PyDict_SetDefaultRef` function, which behaves similarly to :"
"c:func:`PyDict_SetDefault`, but returns a :term:`strong reference` instead "
"of a :term:`borrowed reference`. This function returns ``-1`` on error, "
"``0`` on insertion, and ``1`` if the key was already present in the "
"dictionary. (Contributed by Sam Gross in :gh:`112066`.)"
msgstr ""
"Добавьте функцию :c:func:`PyDict_SetDefaultRef`, которая ведет себя "
"аналогично :c:func:`PyDict_SetDefault`, но возвращает :term:`strong ссылку` "
"вместо :term:`заимствованной ссылки`. Эта функция возвращает ``-1`` в случае "
"ошибки, ``0`` при вставке и ``1``, если ключ уже присутствует в словаре. "
"(Предоставлено Сэмом Гроссом в :gh:`112066`.)"

#: ../../whatsnew/3.13.rst:2115
msgid ""
"Add the :c:func:`PyDict_Pop` and :c:func:`PyDict_PopString` functions to "
"remove a key from a dictionary and optionally return the removed value. This "
"is similar to :meth:`dict.pop`, though there is no default value, and :exc:"
"`KeyError` is not raised for missing keys. (Contributed by Stefan Behnel and "
"Victor Stinner in :gh:`111262`.)"
msgstr ""
"Добавьте функции :c:func:`PyDict_Pop` и :c:func:`PyDict_PopString`, чтобы "
"удалить ключ из словаря и, при необходимости, вернуть удаленное значение. "
"Это похоже на :meth:`dict.pop`, однако здесь нет значения по умолчанию, а :"
"exc:`KeyError` не вызывается при отсутствии ключей. (Предоставлено Стефаном "
"Бенелем и Виктором Стиннером в :gh:`111262`.)"

#: ../../whatsnew/3.13.rst:2122
msgid ""
"Add the :c:func:`PyMapping_GetOptionalItem` and :c:func:"
"`PyMapping_GetOptionalItemString` functions as alternatives to :c:func:"
"`PyObject_GetItem` and :c:func:`PyMapping_GetItemString` respectively. The "
"new functions do not raise :exc:`KeyError` if the requested key is missing "
"from the mapping. These variants are more convenient and faster if a missing "
"key should not be treated as a failure. (Contributed by Serhiy Storchaka in :"
"gh:`106307`.)"
msgstr ""
"Добавьте функции :c:func:`PyMapping_GetOptionalItem` и :c:func:"
"`PyMapping_GetOptionalItemString` в качестве альтернативы :c:func:"
"`PyObject_GetItem` и :c:func:`PyMapping_GetItemString` соответственно. Новые "
"функции не вызывают :exc:`KeyError`, если запрошенный ключ отсутствует в "
"сопоставлении. Эти варианты удобнее и быстрее, если отсутствие ключа не "
"следует расценивать как сбой. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`106307`.)"

#: ../../whatsnew/3.13.rst:2132
msgid ""
"Add the :c:func:`PyObject_GetOptionalAttr` and :c:func:"
"`PyObject_GetOptionalAttrString` functions as alternatives to  :c:func:"
"`PyObject_GetAttr` and :c:func:`PyObject_GetAttrString` respectively. The "
"new functions do not raise :exc:`AttributeError` if the requested attribute "
"is not found on the object. These variants are more convenient and faster if "
"the missing attribute should not be treated as a failure. (Contributed by "
"Serhiy Storchaka in :gh:`106521`.)"
msgstr ""
"Добавьте функции :c:func:`PyObject_GetOptionalAttr` и :c:func:"
"`PyObject_GetOptionalAttrString` в качестве альтернативы :c:func:"
"`PyObject_GetAttr` и :c:func:`PyObject_GetAttrString` соответственно. Новые "
"функции не вызывают :exc:`AttributeError`, если запрошенный атрибут не "
"найден в объекте. Эти варианты удобнее и быстрее, если отсутствующий атрибут "
"не следует рассматривать как сбой. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`106521`.)"

#: ../../whatsnew/3.13.rst:2142
msgid ""
"Add the :c:func:`PyErr_FormatUnraisable` function as an extension to :c:func:"
"`PyErr_WriteUnraisable` that allows customizing the warning message. "
"(Contributed by Serhiy Storchaka in :gh:`108082`.)"
msgstr ""
"Добавьте функцию :c:func:`PyErr_FormatUnraisable` как расширение :c:func:"
"`PyErr_WriteUnraisable`, которое позволяет настраивать предупреждающее "
"сообщение. (Предоставлено Сергеем Сторчакой в ​​:gh:`108082`.)"

#: ../../whatsnew/3.13.rst:2147
msgid ""
"Add new functions that return a :term:`strong reference` instead of a :term:"
"`borrowed reference` for frame locals, globals, and builtins, as part of :"
"ref:`PEP 667 <whatsnew313-locals-semantics>`:"
msgstr ""
"Добавьте новые функции, которые возвращают :term:`strong ссылку` вместо :"
"term:`заимствованной ссылки` для локальных, глобальных и встроенных "
"переменных фрейма, как часть :ref:`PEP 667 <whatsnew313-locals-semantics>`:"

#: ../../whatsnew/3.13.rst:2151
msgid ":c:func:`PyEval_GetFrameBuiltins` replaces :c:func:`PyEval_GetBuiltins`"
msgstr ""
":c:func:`PyEval_GetFrameBuiltins` заменяет :c:func:`PyEval_GetBuiltins`"

#: ../../whatsnew/3.13.rst:2152
msgid ":c:func:`PyEval_GetFrameGlobals` replaces :c:func:`PyEval_GetGlobals`"
msgstr ":c:func:`PyEval_GetFrameGlobals` заменяет :c:func:`PyEval_GetGlobals`"

#: ../../whatsnew/3.13.rst:2153
msgid ":c:func:`PyEval_GetFrameLocals` replaces :c:func:`PyEval_GetLocals`"
msgstr ":c:func:`PyEval_GetFrameLocals` заменяет :c:func:`PyEval_GetLocals`"

#: ../../whatsnew/3.13.rst:2155
msgid "(Contributed by Mark Shannon and Tian Gao in :gh:`74929`.)"
msgstr "(Предоставлено Марком Шенноном и Тянь Гао в :gh:`74929`.)"

#: ../../whatsnew/3.13.rst:2157
msgid ""
"Add the :c:func:`Py_GetConstant` and :c:func:`Py_GetConstantBorrowed` "
"functions to get :term:`strong <strong reference>` or :term:`borrowed "
"<borrowed reference>` references to constants. For example, "
"``Py_GetConstant(Py_CONSTANT_ZERO)`` returns a strong reference to the "
"constant zero. (Contributed by Victor  Stinner in :gh:`115754`.)"
msgstr ""
"Добавьте функции :c:func:`Py_GetConstant` и :c:func:"
"`Py_GetConstantBorrowed`, чтобы получить :term:`strong <strong reference>` "
"или :term:`orrowed <заимствованную ссылку>` ссылки на константы. Например, "
"Py_GetConstant(Py_CONSTANT_ZERO) возвращает строгую ссылку на константу "
"ноль. (Предоставлено Виктором Стиннером в :gh:`115754`.)"

#: ../../whatsnew/3.13.rst:2164
msgid ""
"Add the :c:func:`PyImport_AddModuleRef` function as a replacement for :c:"
"func:`PyImport_AddModule` that returns a :term:`strong reference` instead of "
"a :term:`borrowed reference`. (Contributed by Victor Stinner in :gh:"
"`105922`.)"
msgstr ""
"Добавьте функцию :c:func:`PyImport_AddModuleRef` в качестве замены :c:func:"
"`PyImport_AddModule`, которая возвращает :term:`strong ссылку` вместо :term:"
"`заимствованной ссылки`. (Предоставлено Виктором Стиннером в :gh:`105922`.)"

#: ../../whatsnew/3.13.rst:2169
msgid ""
"Add the :c:func:`Py_IsFinalizing` function to check whether the main Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by "
"Victor Stinner in :gh:`108014`.)"
msgstr ""
"Добавьте функцию :c:func:`Py_IsFinalizing`, чтобы проверить, :term:"
"`завершает ли основной интерпретатор Python <выключение интерпретатора>`. "
"(Предоставлено Виктором Стиннером в :gh:`108014`.)"

#: ../../whatsnew/3.13.rst:2174
msgid ""
"Add the :c:func:`PyList_GetItemRef` function as a replacement for :c:func:"
"`PyList_GetItem` that returns a :term:`strong reference` instead of a :term:"
"`borrowed reference`. (Contributed by Sam Gross in :gh:`114329`.)"
msgstr ""
"Добавьте функцию :c:func:`PyList_GetItemRef` в качестве замены :c:func:"
"`PyList_GetItem`, которая возвращает :term:`сильную ссылку` вместо :term:"
"`заимствованной ссылки`. (Предоставлено Сэмом Гроссом в :gh:`114329`.)"

#: ../../whatsnew/3.13.rst:2179
msgid ""
"Add the :c:func:`PyList_Extend` and :c:func:`PyList_Clear` functions, "
"mirroring the Python :meth:`list.extend` and :meth:`list.clear` methods. "
"(Contributed by Victor Stinner in :gh:`111138`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2183
msgid ""
"Add the :c:func:`PyLong_AsInt` function. It behaves similarly to :c:func:"
"`PyLong_AsLong`, but stores the result in a C :c:expr:`int` instead of a C :"
"c:expr:`long`. (Contributed by Victor Stinner in :gh:`108014`.)"
msgstr ""
"Добавьте функцию :c:func:`PyLong_AsInt`. Он ведет себя аналогично :c:func:"
"`PyLong_AsLong`, но сохраняет результат в C :c:expr:`int` вместо C :c:expr:"
"`long`. (Предоставлено Виктором Стиннером в :gh:`108014`.)"

#: ../../whatsnew/3.13.rst:2188
msgid ""
"Add the :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes`, "
"and :c:func:`PyLong_FromUnsignedNativeBytes` functions to simplify "
"converting between native integer types and Python :class:`int` objects. "
"(Contributed by Steve Dower in :gh:`111140`.)"
msgstr ""
"Добавьте функции :c:func:`PyLong_AsNativeBytes`, :c:func:"
"`PyLong_FromNativeBytes` и :c:func:`PyLong_FromUnsignedNativeBytes`, чтобы "
"упростить преобразование между собственными целочисленными типами и "
"объектами Python :class:`int`. (Предоставлено Стивом Дауэром в :gh:`111140`.)"

#: ../../whatsnew/3.13.rst:2194
msgid ""
"Add :c:func:`PyModule_Add` function, which is similar to :c:func:"
"`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject`, but always steals "
"a reference to the value. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""
"Добавьте функцию :c:func:`PyModule_Add`, которая похожа на :c:func:"
"`PyModule_AddObjectRef` и :c:func:`PyModule_AddObject`, но всегда крадет "
"ссылку на значение. (Предоставлено Сергеем Сторчакой в ​​:gh:`86493`.)"

#: ../../whatsnew/3.13.rst:2199
msgid ""
"Add the :c:func:`PyObject_GenericHash` function that implements the default "
"hashing function of a Python object. (Contributed by Serhiy Storchaka in :gh:"
"`113024`.)"
msgstr ""
"Добавьте функцию :c:func:`PyObject_GenericHash`, которая реализует функцию "
"хеширования по умолчанию для объекта Python. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`113024`.)"

#: ../../whatsnew/3.13.rst:2203
msgid ""
"Add the :c:func:`Py_HashPointer` function to hash a raw pointer. "
"(Contributed by Victor Stinner in :gh:`111545`.)"
msgstr ""
"Добавьте функцию :c:func:`Py_HashPointer` для хеширования необработанного "
"указателя. (Предоставлено Виктором Стиннером в :gh:`111545`.)"

#: ../../whatsnew/3.13.rst:2206
msgid ""
"Add the :c:func:`PyObject_VisitManagedDict` and :c:func:"
"`PyObject_ClearManagedDict` functions. which must be called by the traverse "
"and clear functions of a type using the :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"flag. The `pythoncapi-compat project`_ can be used to use these functions "
"with Python 3.11 and 3.12. (Contributed by Victor Stinner in :gh:`107073`.)"
msgstr ""
"Добавьте функции :c:func:`PyObject_VisitManagedDict` и :c:func:"
"`PyObject_ClearManagedDict`. который должен вызываться функциями traverse "
"иclear типа с использованием флага :c:macro:`Py_TPFLAGS_MANAGED_DICT`. Для "
"использования этих функций с Python 3.11 и 3.12 можно использовать проект "
"`pythoncapi-compat`_. (Предоставлено Виктором Стиннером в :gh:`107073`.)"

#: ../../whatsnew/3.13.rst:2214
msgid ""
"Add the :c:func:`PyRefTracer_SetTracer` and :c:func:`PyRefTracer_GetTracer` "
"functions, which enable tracking object creation and destruction in the same "
"way that the :mod:`tracemalloc` module does. (Contributed by Pablo Galindo "
"in :gh:`93502`.)"
msgstr ""
"Добавьте функции :c:func:`PyRefTracer_SetTracer` и :c:func:"
"`PyRefTracer_GetTracer`, которые позволяют отслеживать создание и "
"уничтожение объектов так же, как это делает модуль :mod:`tracemalloc`. "
"(Предоставлено Пабло Галиндо в :gh:`93502`.)"

#: ../../whatsnew/3.13.rst:2220
msgid ""
"Add the :c:func:`PySys_AuditTuple` function as an alternative to :c:func:"
"`PySys_Audit` that takes event arguments as a Python :class:`tuple` object. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"Добавьте функцию :c:func:`PySys_AuditTuple` в качестве альтернативы :c:func:"
"`PySys_Audit`, которая принимает аргументы события как объект :class:`tuple` "
"Python. (Предоставлено Виктором Стиннером в :gh:`85283`.)"

#: ../../whatsnew/3.13.rst:2225
msgid ""
"Add the :c:func:`PyThreadState_GetUnchecked()` function as an alternative "
"to :c:func:`PyThreadState_Get()` that doesn't kill the process with a fatal "
"error if it is ``NULL``. The caller is responsible for checking if the "
"result is ``NULL``. (Contributed by Victor Stinner in :gh:`108867`.)"
msgstr ""
"Добавьте функцию :c:func:`PyThreadState_GetUnchecked()` в качестве "
"альтернативы :c:func:`PyThreadState_Get()`, которая не завершает процесс с "
"фатальной ошибкой, если он равен ``NULL``. Вызывающий отвечает за проверку "
"того, равен ли результат NULL. (Предоставлено Виктором Стиннером в :gh:"
"`108867`.)"

#: ../../whatsnew/3.13.rst:2231
msgid ""
"Add the :c:func:`PyType_GetFullyQualifiedName` function to get the type's "
"fully qualified name. The module name is prepended if :attr:`type."
"__module__` is a string and is not equal to either ``'builtins'`` or "
"``'__main__'``. (Contributed by Victor Stinner in :gh:`111696`.)"
msgstr ""
"Добавьте функцию :c:func:`PyType_GetFullyQualifiedName`, чтобы получить "
"полное имя типа. Имя модуля добавляется в начале, если :attr:`type."
"__module__` является строкой и не равен ни ``'builtins'``, ни "
"``'__main__'``. (Предоставлено Виктором Стиннером в :gh:`111696`.)"

#: ../../whatsnew/3.13.rst:2237
msgid ""
"Add the :c:func:`PyType_GetModuleName` function to get the type's module "
"name. This is equivalent to getting the :attr:`type.__module__` attribute. "
"(Contributed by Eric Snow and Victor Stinner in :gh:`111696`.)"
msgstr ""
"Добавьте функцию :c:func:`PyType_GetModuleName`, чтобы получить имя модуля "
"типа. Это эквивалентно получению атрибута :attr:`type.__module__`. "
"(Предоставлено Эриком Сноу и Виктором Стиннером в :gh:`111696`.)"

#: ../../whatsnew/3.13.rst:2242
msgid ""
"Add the :c:func:`PyUnicode_EqualToUTF8AndSize` and :c:func:"
"`PyUnicode_EqualToUTF8` functions to compare a Unicode object with a :c:expr:"
"`const char*` UTF-8 encoded string and ``1`` if they are equal or ``0`` "
"otherwise. These functions do not raise exceptions. (Contributed by Serhiy "
"Storchaka in :gh:`110289`.)"
msgstr ""
"Добавьте функции :c:func:`PyUnicode_EqualToUTF8AndSize` и :c:func:"
"`PyUnicode_EqualToUTF8` для сравнения объекта Unicode со строкой в ​​"
"кодировке :c:expr:`const char*` UTF-8 и ``1``, если они равны или ``0`` в "
"противном случае. Эти функции не вызывают исключений. (Предоставлено Сергеем "
"Сторчакой в ​​:gh:`110289`.)"

#: ../../whatsnew/3.13.rst:2249
msgid ""
"Add the :c:func:`PyWeakref_GetRef` function as an alternative to  :c:func:"
"`PyWeakref_GetObject` that returns a :term:`strong reference` or ``NULL`` if "
"the referent is no longer live. (Contributed by Victor Stinner in :gh:"
"`105927`.)"
msgstr ""
"Добавьте функцию :c:func:`PyWeakref_GetRef` в качестве альтернативы :c:func:"
"`PyWeakref_GetObject`, которая возвращает :term:`strong ссылку` или "
"``NULL``, если референт больше не активен. (Предоставлено Виктором Стиннером "
"в :gh:`105927`.)"

#: ../../whatsnew/3.13.rst:2255
msgid "Add fixed variants of functions which silently ignore errors:"
msgstr ""
"Добавьте фиксированные варианты функций, которые молча игнорируют ошибки:"

#: ../../whatsnew/3.13.rst:2257
msgid ""
":c:func:`PyObject_HasAttrWithError` replaces :c:func:`PyObject_HasAttr`."
msgstr ""
":c:func:`PyObject_HasAttrWithError` заменяет :c:func:`PyObject_HasAttr`."

#: ../../whatsnew/3.13.rst:2258
msgid ""
":c:func:`PyObject_HasAttrStringWithError` replaces :c:func:"
"`PyObject_HasAttrString`."
msgstr ""
":c:func:`PyObject_HasAttrStringWithError` заменяет :c:func:"
"`PyObject_HasAttrString`."

#: ../../whatsnew/3.13.rst:2260
msgid ""
":c:func:`PyMapping_HasKeyWithError` replaces :c:func:`PyMapping_HasKey`."
msgstr ""
":c:func:`PyMapping_HasKeyWithError` заменяет :c:func:`PyMapping_HasKey`."

#: ../../whatsnew/3.13.rst:2261
msgid ""
":c:func:`PyMapping_HasKeyStringWithError` replaces :c:func:"
"`PyMapping_HasKeyString`."
msgstr ""
":c:func:`PyMapping_HasKeyStringWithError` заменяет :c:func:"
"`PyMapping_HasKeyString`."

#: ../../whatsnew/3.13.rst:2264
msgid ""
"The new functions return ``-1`` for errors and the standard ``1`` for true "
"and ``0`` for false."
msgstr ""
"Новые функции возвращают ``-1`` в случае ошибки и стандартную ``1`` в случае "
"истинности и ``0`` в случае ложности."

#: ../../whatsnew/3.13.rst:2267
msgid "(Contributed by Serhiy Storchaka in :gh:`108511`.)"
msgstr "(Предоставлено Сергеем Сторчакой в ​​:gh:`108511`.)"

#: ../../whatsnew/3.13.rst:2271
msgid "Changed C APIs"
msgstr "Изменены API C."

#: ../../whatsnew/3.13.rst:2273
msgid ""
"The *keywords* parameter of :c:func:`PyArg_ParseTupleAndKeywords` and :c:"
"func:`PyArg_VaParseTupleAndKeywords` now has type :c:expr:`char * const *` "
"in C and :c:expr:`const char * const *` in C++, instead of :c:expr:`char "
"**`. In C++, this makes these functions compatible with arguments of type :c:"
"expr:`const char * const *`, :c:expr:`const char **`, or :c:expr:`char * "
"const *` without an explicit type cast. In C, the functions only support "
"arguments of type :c:expr:`char * const *`. This can be overridden with the :"
"c:macro:`PY_CXX_CONST` macro. (Contributed by Serhiy Storchaka in :gh:"
"`65210`.)"
msgstr ""
"Параметр *keywords* :c:func:`PyArg_ParseTupleAndKeywords` и :c:func:"
"`PyArg_VaParseTupleAndKeywords` теперь имеет тип :c:expr:`char * const *` в "
"C и :c:expr:`const char * const *` в C++ вместо :c:expr:`char **`. В C++ это "
"делает эти функции совместимыми с аргументами типа :c:expr:`const char * "
"const *`, :c:expr:`const char **` или :c:expr:`char * const *` без явное "
"приведение типов. В C функции поддерживают только аргументы типа :c:expr:"
"`char * const *`. Это можно переопределить с помощью макроса :c:macro:"
"`PY_CXX_CONST`. (Предоставлено Сергеем Сторчакой в ​​:gh:`65210`.)"

#: ../../whatsnew/3.13.rst:2285
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports non-ASCII keyword "
"parameter names. (Contributed by Serhiy Storchaka in :gh:`110815`.)"
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` теперь поддерживает имена параметров "
"ключевых слов, отличные от ASCII. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`110815`.)"

#: ../../whatsnew/3.13.rst:2289
msgid ""
"The :c:func:`!PyCode_GetFirstFree` function is now unstable API and is now "
"named :c:func:`PyUnstable_Code_GetFirstFree`. (Contributed by Bogdan "
"Romanyuk in :gh:`115781`.)"
msgstr ""
"Функция :c:func:`!PyCode_GetFirstFree` теперь является нестабильным API и "
"теперь называется :c:func:`PyUnstable_Code_GetFirstFree`. (Предоставлено "
"Богданом Романюком в :gh:`115781`.)"

#: ../../whatsnew/3.13.rst:2293
msgid ""
"The :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:func:"
"`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, and :c:func:"
"`PySys_GetObject` functions, each of which clears all errors which occurred "
"when calling them now reports these errors using :func:`sys.unraisablehook`. "
"You may replace them with other functions as recommended in the "
"documentation. (Contributed by Serhiy Storchaka in :gh:`106672`.)"
msgstr ""
":c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:func:"
"`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func Функции :`PyObject_HasAttrString` и :c:func:"
"`PySys_GetObject`, каждая из которых очищает все ошибки, возникшие при их "
"вызове, теперь сообщают об этих ошибках с помощью :func:`sys."
"unraisablehook`. Вы можете заменить их другими функциями, как рекомендовано "
"в документации. (Предоставлено Сергеем Сторчакой в ​​:gh:`106672`.)"

#: ../../whatsnew/3.13.rst:2302
msgid ""
"Add support for the ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to :c:func:"
"`PyUnicode_FromFormat`:"
msgstr ""
"Добавьте поддержку форматов ``%T``, ``%#T``, ``%N`` и ``%#N`` в :c:func:"
"`PyUnicode_FromFormat`:"

#: ../../whatsnew/3.13.rst:2305
msgid "``%T``: Get the fully qualified name of an object type"
msgstr "``%T``: получить полное имя типа объекта."

#: ../../whatsnew/3.13.rst:2306
msgid "``%#T``: As above, but use a colon as the separator"
msgstr ""
"``%#T``: то же, что и выше, но в качестве разделителя используйте двоеточие."

#: ../../whatsnew/3.13.rst:2307
msgid "``%N``: Get the fully qualified name of a type"
msgstr "``%N``: получить полное имя типа."

#: ../../whatsnew/3.13.rst:2308
msgid "``%#N``: As above, but use a colon as the separator"
msgstr ""
"``%#N``: то же, что и выше, но в качестве разделителя используйте двоеточие."

#: ../../whatsnew/3.13.rst:2310
msgid ""
"See :pep:`737` for more information. (Contributed by Victor Stinner in :gh:"
"`111696`.)"
msgstr ""
"См. :pep:`737` для получения дополнительной информации. (Предоставлено "
"Виктором Стиннером в :gh:`111696`.)"

#: ../../whatsnew/3.13.rst:2313
msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before "
"including :file:`Python.h` when using ``#`` formats in :ref:`format codes "
"<arg-parsing-string-and-buffers>`. APIs accepting the format codes always "
"use ``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in :gh:"
"`104922`.)"
msgstr ""
"Вам больше не нужно определять макрос ``PY_SSIZE_T_CLEAN`` перед включением :"
"file:`Python.h` при использовании форматов ``#`` в :ref:`кодах формата <arg-"
"parsing-string-and-buffers>` . API, принимающие коды форматов, всегда "
"используют Py_ssize_t для форматов ##. (Предоставлено Инадой Наоки в :gh:"
"`104922`.)"

#: ../../whatsnew/3.13.rst:2319
msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyList_SET_ITEM` now check the index argument with an assertion. "
"(Contributed by Victor Stinner in :gh:`106168`.)"
msgstr ""
"Если Python встроен в :ref:`режиме отладки <debug-build>` или :option:`с "
"утверждениями <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` и :c:func:"
"`PyList_SET_ITEM` теперь проверьте аргумент индекса с помощью утверждения. "
"(Предоставлено Виктором Стиннером в :gh:`106168`.)"

#: ../../whatsnew/3.13.rst:2327
msgid "Limited C API Changes"
msgstr "Ограниченные изменения API C"

#: ../../whatsnew/3.13.rst:2329
msgid "The following functions are now included in the Limited C API:"
msgstr "Следующие функции теперь включены в API Limited C:"

#: ../../whatsnew/3.13.rst:2331
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../whatsnew/3.13.rst:2332
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../whatsnew/3.13.rst:2333
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../whatsnew/3.13.rst:2334
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../whatsnew/3.13.rst:2335
msgid ":c:func:`PySys_Audit`"
msgstr ":c:func:`PySys_Audit`"

#: ../../whatsnew/3.13.rst:2336
msgid ":c:func:`PySys_AuditTuple`"
msgstr ":c:func:`PySys_AuditTuple`"

#: ../../whatsnew/3.13.rst:2337
msgid ":c:func:`PyType_GetModuleByDef`"
msgstr ":c:func:`PyType_GetModuleByDef`"

#: ../../whatsnew/3.13.rst:2339
msgid ""
"(Contributed by Victor Stinner in :gh:`85283`, :gh:`85283`, and :gh:"
"`116936`.)"
msgstr ""
"(Предоставлено Виктором Стиннером в :gh:`85283`, :gh:`85283` и :gh:`116936`.)"

#: ../../whatsnew/3.13.rst:2341
msgid ""
"Python built with :option:`--with-trace-refs` (tracing references) now "
"supports the :ref:`Limited API <limited-c-api>`. (Contributed by Victor "
"Stinner in :gh:`108634`.)"
msgstr ""
"Python, созданный с помощью :option:`--with-trace-refs` (отслеживание "
"ссылок), теперь поддерживает :ref:`Limited API <limited-c-api>`. "
"(Предоставлено Виктором Стиннером в :gh:`108634`.)"

#: ../../whatsnew/3.13.rst:2347
msgid "Removed C APIs"
msgstr "Удалены API C."

#: ../../whatsnew/3.13.rst:2349
msgid ""
"Remove several functions, macros, variables, etc with names prefixed by "
"``_Py`` or ``_PY`` (which are considered private). If your project is "
"affected  by one of these removals and you believe that the removed API "
"should remain available, please :ref:`open a new issue <using-the-tracker>` "
"to request a public C API and add ``cc: @vstinner`` to the issue to notify "
"Victor Stinner. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""
"Удалите несколько функций, макросов, переменных и т. д. с именами, "
"начинающимися с префикса ``_Py`` или ``_PY`` (которые считаются частными). "
"Если на ваш проект повлияло одно из этих удалений, и вы считаете, что "
"удаленный API должен оставаться доступным, пожалуйста:ref:`откройте новую "
"задачу <using-the-tracker>`, чтобы запросить общедоступный C API и добавьте "
"``cc: @vstinner`` к вопросу уведомить Виктора Стиннера. (Предоставлено "
"Виктором Стиннером в :gh:`106320`.)"

#: ../../whatsnew/3.13.rst:2357
msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use :ref:"
"`bufferobjects` instead."
msgstr ""
"Удалите старые протоколы буферизации, устаревшие в Python 3.0. Вместо этого "
"используйте :ref:`bufferobjects`."

#: ../../whatsnew/3.13.rst:2360
msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test whether the object supports the buffer protocol. Note that :c:func:"
"`PyObject_CheckBuffer` doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed. To test if the object is actually readable, see the next "
"example of :c:func:`PyObject_GetBuffer`."
msgstr ""
":c:func:`!PyObject_CheckReadBuffer`: Используйте :c:func:"
"`PyObject_CheckBuffer`, чтобы проверить, поддерживает ли объект протокол "
"буфера. Обратите внимание, что :c:func:`PyObject_CheckBuffer` не "
"гарантирует, что :c:func:`PyObject_GetBuffer` завершится успешно. Чтобы "
"проверить, действительно ли объект доступен для чтения, см. следующий "
"пример :c:func:`PyObject_GetBuffer`."

#: ../../whatsnew/3.13.rst:2368
msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: Use :c:"
"func:`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: вместо "
"этого используйте :c:func:`PyObject_GetBuffer` и :c:func:`PyBuffer_Release`:"

#: ../../whatsnew/3.13.rst:2371
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to read from the buffer.\n"
"// You may need to cast buf as `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to read from the buffer.\n"
"// You may need to cast buf as `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"

#: ../../whatsnew/3.13.rst:2381
msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and :c:"
"func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsWriteBuffer`: вместо этого используйте :c:func:"
"`PyObject_GetBuffer` и :c:func:`PyBuffer_Release`:"

#: ../../whatsnew/3.13.rst:2384
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to write to the buffer.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Представление Py_buffer; if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) "
"<0) { вернуть НУЛЬ; } // Используйте `view.buf` и `view.len` для записи в "
"буфер. PyBuffer_Release(&view);"

#: ../../whatsnew/3.13.rst:2393
msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr "(Предоставлено Инадой Наоки в :gh:`85275`.)"

#: ../../whatsnew/3.13.rst:2395
msgid "Remove various functions deprecated in Python 3.9:"
msgstr "Удалите различные функции, устаревшие в Python 3.9:"

#: ../../whatsnew/3.13.rst:2397
msgid ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: Use :"
"c:func:`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead."
msgstr ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: "
"вместо этого используйте :c:func:`PyObject_CallNoArgs` или :c:func:"
"`PyObject_Call`."

#: ../../whatsnew/3.13.rst:2402
msgid ""
"In :c:func:`PyObject_Call`, positional arguments must be a :class:`tuple` "
"and must not be ``NULL``, and keyword arguments must be a :class:`dict` or "
"``NULL``, whereas the removed functions checked argument types and accepted "
"``NULL`` positional and keyword arguments. To replace "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` with :c:func:"
"`PyObject_Call`, pass an empty tuple as positional arguments using :c:func:"
"`PyTuple_New(0) <PyTuple_New>`."
msgstr ""
"В :c:func:`PyObject_Call` позиционные аргументы должны быть :class:`tuple` и "
"не должны быть ``NULL``, а аргументы ключевого слова должны быть :class:"
"`dict` или ``NULL``, тогда как удаленные функции проверяли типы аргументов и "
"принимали позиционные и ключевые аргументы ``NULL``. Чтобы заменить "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` на :c:func:"
"`PyObject_Call`, передайте пустой кортеж в качестве позиционных аргументов, "
"используя :c:func:`PyTuple_New(0) <PyTuple_New>`."

#: ../../whatsnew/3.13.rst:2412
msgid ""
":c:func:`!PyEval_CallFunction`: Use :c:func:`PyObject_CallFunction` instead."
msgstr ""
":c:func:`!PyEval_CallFunction`: Вместо этого используйте :c:func:"
"`PyObject_CallFunction`."

#: ../../whatsnew/3.13.rst:2414
msgid ""
":c:func:`!PyEval_CallMethod`: Use :c:func:`PyObject_CallMethod` instead."
msgstr ""
":c:func:`!PyEval_CallMethod`: Вместо этого используйте :c:func:"
"`PyObject_CallMethod`."

#: ../../whatsnew/3.13.rst:2416
msgid ":c:func:`!PyCFunction_Call`: Use :c:func:`PyObject_Call` instead."
msgstr ""
":c:func:`!PyCFunction_Call`: вместо этого используйте :c:func:"
"`PyObject_Call`."

#: ../../whatsnew/3.13.rst:2419
msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr "(Предоставлено Виктором Стиннером в :gh:`105107`.)"

#: ../../whatsnew/3.13.rst:2421
msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr ""
"Удалите следующие старые функции для настройки инициализации Python, которые "
"устарели в Python 3.11:"

#: ../../whatsnew/3.13.rst:2424
msgid ""
":c:func:`!PySys_AddWarnOptionUnicode`: Use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""
":c:func:`!PySys_AddWarnOptionUnicode`: вместо этого используйте :c:member:"
"`PyConfig.warnoptions`."

#: ../../whatsnew/3.13.rst:2426
msgid ""
":c:func:`!PySys_AddWarnOption`: Use :c:member:`PyConfig.warnoptions` instead."
msgstr ""
":c:func:`!PySys_AddWarnOption`: вместо этого используйте :c:member:`PyConfig."
"warnoptions`."

#: ../../whatsnew/3.13.rst:2428
msgid ":c:func:`!PySys_AddXOption`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""
":c:func:`!PySys_AddXOption`: вместо этого используйте :c:member:`PyConfig."
"xoptions`."

#: ../../whatsnew/3.13.rst:2430
msgid ""
":c:func:`!PySys_HasWarnOptions`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""
":c:func:`!PySys_HasWarnOptions`: вместо этого используйте :c:member:"
"`PyConfig.xoptions`."

#: ../../whatsnew/3.13.rst:2432
msgid ""
":c:func:`!PySys_SetPath`: Set :c:member:`PyConfig.module_search_paths` "
"instead."
msgstr ""
":c:func:`!PySys_SetPath`: Вместо этого установите :c:member:`PyConfig."
"module_search_paths`."

#: ../../whatsnew/3.13.rst:2434
msgid ""
":c:func:`!Py_SetPath`: Set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""
":c:func:`!Py_SetPath`: Вместо этого установите :c:member:`PyConfig."
"module_search_paths`."

#: ../../whatsnew/3.13.rst:2436
msgid ""
":c:func:`!Py_SetStandardStreamEncoding`: Set :c:member:`PyConfig."
"stdio_encoding` instead, and set also maybe :c:member:`PyConfig."
"legacy_windows_stdio` (on Windows)."
msgstr ""
":c:func:`!Py_SetStandardStreamEncoding`: Вместо этого установите :c:member:"
"`PyConfig.stdio_encoding`, а также, возможно, установите :c:member:`PyConfig."
"legacy_windows_stdio` (в Windows)."

#: ../../whatsnew/3.13.rst:2439
msgid ""
":c:func:`!_Py_SetProgramFullPath`: Set :c:member:`PyConfig.executable` "
"instead."
msgstr ""
":c:func:`!_Py_SetProgramFullPath`: Вместо этого установите :c:member:"
"`PyConfig.executable`."

#: ../../whatsnew/3.13.rst:2442
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""
"Вместо этого используйте новый API :c:type:`PyConfig` для :ref:`Конфигурации "
"инициализации Python <init-config>` (:pep:`587`), добавленный в Python 3.8. "
"(Предоставлено Виктором Стиннером в :gh:`105145`.)"

#: ../../whatsnew/3.13.rst:2446
msgid ""
"Remove :c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_ReleaseLock` "
"functions, deprecated in Python 3.2. They didn't update the current thread "
"state. They can be replaced with:"
msgstr ""
"Удалите функции :c:func:`!PyEval_AcquireLock` и :c:func:`!"
"PyEval_ReleaseLock`, которые устарели в Python 3.2. Они не обновили текущее "
"состояние потока. Их можно заменить на:"

#: ../../whatsnew/3.13.rst:2451
msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ":c:func:`PyEval_SaveThread` и :c:func:`PyEval_RestoreThread`;"

#: ../../whatsnew/3.13.rst:2452
msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""
"низкоуровневые :c:func:`PyEval_AcquireThread` и :c:func:"
"`PyEval_RestoreThread`;"

#: ../../whatsnew/3.13.rst:2453
msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr "или :c:func:`PyGILState_Ensure` и :c:func:`PyGILState_Release`."

#: ../../whatsnew/3.13.rst:2455
msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr "(Предоставлено Виктором Стиннером в :gh:`105182`.)"

#: ../../whatsnew/3.13.rst:2457
msgid ""
"Remove the :c:func:`!PyEval_ThreadsInitialized` function, deprecated in "
"Python 3.9. Since Python 3.7, :c:func:`!Py_Initialize` always creates the "
"GIL: calling :c:func:`!PyEval_InitThreads` does nothing and :c:func:`!"
"PyEval_ThreadsInitialized` always returns non-zero. (Contributed by Victor "
"Stinner in :gh:`105182`.)"
msgstr ""
"Удалите функцию :c:func:`!PyEval_ThreadsInitialized`, которая устарела в "
"Python 3.9. Начиная с Python 3.7, :c:func:`!Py_Initialize` всегда создает "
"GIL: вызов :c:func:`!PyEval_InitThreads` ничего не делает, а :c:func:`!"
"PyEval_ThreadsInitialized` всегда возвращает ненулевое значение. "
"(Предоставлено Виктором Стиннером в :gh:`105182`.)"

#: ../../whatsnew/3.13.rst:2464
msgid ""
"Remove the :c:func:`!_PyInterpreterState_Get` alias to :c:func:"
"`PyInterpreterState_Get()` which was kept for backward compatibility with "
"Python 3.8. The `pythoncapi-compat project`_ can be used to get :c:func:"
"`PyInterpreterState_Get()` on Python 3.8 and older. (Contributed by Victor "
"Stinner in :gh:`106320`.)"
msgstr ""
"Удалите псевдоним :c:func:`!_PyInterpreterState_Get` для :c:func:"
"`PyInterpreterState_Get()`, который был сохранен для обратной совместимости "
"с Python 3.8. `pythoncapi-compat project`_ можно использовать для получения :"
"c:func:`PyInterpreterState_Get()` на Python 3.8 и старше. (Предоставлено "
"Виктором Стиннером в :gh:`106320`.)"

#: ../../whatsnew/3.13.rst:2471
msgid ""
"Remove the private :c:func:`!_PyObject_FastCall` function: use :c:func:`!"
"PyObject_Vectorcall` which is available since Python 3.8 (:pep:`590`). "
"(Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""
"Удалите частную функцию :c:func:`!_PyObject_FastCall`: используйте :c:func:`!"
"PyObject_Vectorcall`, которая доступна начиная с Python 3.8 (:pep:`590`). "
"(Предоставлено Виктором Стиннером в :gh:`106023`.)"

#: ../../whatsnew/3.13.rst:2476
msgid ""
"Remove the ``cpython/pytime.h`` header file, which only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""
"Удалите заголовочный файл ``cpython/pytime.h``, который содержал только "
"частные функции. (Предоставлено Виктором Стиннером в :gh:`106316`.)"

#: ../../whatsnew/3.13.rst:2480
msgid ""
"Remove the undocumented ``PY_TIMEOUT_MAX`` constant from the limited C API. "
"(Contributed by Victor Stinner in :gh:`110014`.)"
msgstr ""
"Удалите недокументированную константу PY_TIMEOUT_MAX из ограниченного C API. "
"(Предоставлено Виктором Стиннером в :gh:`110014`.)"

#: ../../whatsnew/3.13.rst:2483
msgid ""
"Remove the old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END``. Replace both with the new macros "
"``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"Удалите старые макросы мусорной корзины ``Py_TRASHCAN_SAFE_BEGIN`` и "
"``Py_TRASHCAN_SAFE_END``. Замените оба новыми макросами "
"``Py_TRASHCAN_BEGIN`` и ``Py_TRASHCAN_END``. (Предоставлено Ирит Катриэль в :"
"gh:`105111`.)"

#: ../../whatsnew/3.13.rst:2490
msgid "Deprecated C APIs"
msgstr "Устаревшие API C"

#: ../../whatsnew/3.13.rst:2492
msgid "Deprecate old Python initialization functions:"
msgstr "Устаревшие старые функции инициализации Python:"

#: ../../whatsnew/3.13.rst:2494
#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Вместо этого очистите :data:`sys."
"warnoptions` и :data:`!warnings.filters`."

#: ../../whatsnew/3.13.rst:2496
msgid ":c:func:`Py_GetExecPrefix`: Get :data:`sys.exec_prefix` instead."
msgstr ""
":c:func:`Py_GetExecPrefix`: Вместо этого получите :data:`sys.exec_prefix`."

#: ../../whatsnew/3.13.rst:2498
msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ":c:func:`Py_GetPath`: Вместо этого получите :data:`sys.path`."

#: ../../whatsnew/3.13.rst:2500
msgid ":c:func:`Py_GetPrefix`: Get :data:`sys.prefix` instead."
msgstr ":c:func:`Py_GetPrefix`: Вместо этого получите :data:`sys.prefix`."

#: ../../whatsnew/3.13.rst:2502
msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Вместо этого получите :data:`sys."
"executable`."

#: ../../whatsnew/3.13.rst:2504
msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ""
":c:func:`Py_GetProgramName`: Вместо этого получите :data:`sys.executable`."

#: ../../whatsnew/3.13.rst:2506
msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Вместо этого получите :c:member:`PyConfig.home` "
"или переменную среды :envvar:`PYTHONHOME`."

#: ../../whatsnew/3.13.rst:2510
msgid "(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr "(Предоставлено Виктором Стиннером в :gh:`105145`.)"

#: ../../whatsnew/3.13.rst:2512
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyEval_GetBuiltins`, :"
"c:func:`PyEval_GetGlobals`, and :c:func:`PyEval_GetLocals` functions, which "
"return a :term:`borrowed reference`. (Soft deprecated as part of :pep:`667`.)"
msgstr ""
":term:`Soft deprecate <soft deprecated>` функции :c:func:"
"`PyEval_GetBuiltins`, :c:func:`PyEval_GetGlobals` и :c:func:"
"`PyEval_GetLocals`, которые возвращают :term:`заимствованную ссылку `. (Soft "
"устарел как часть :pep:`667`.)"

#: ../../whatsnew/3.13.rst:2518
msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function, which is just "
"an alias to :c:func:`PyImport_ImportModule` since Python 3.3. (Contributed "
"by Victor Stinner in :gh:`105396`.)"
msgstr ""
"Устарела функция :c:func:`PyImport_ImportModuleNoBlock`, которая является "
"всего лишь псевдонимом :c:func:`PyImport_ImportModule` начиная с Python 3.3. "
"(Предоставлено Виктором Стиннером в :gh:`105396`.)"

#: ../../whatsnew/3.13.rst:2522
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyModule_AddObject` "
"function. It should be replaced with :c:func:`PyModule_Add` or :c:func:"
"`PyModule_AddObjectRef`. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""
":term:`Soft deprecate <soft deprecated>` функция :c:func:"
"`PyModule_AddObject`. Его следует заменить на :c:func:`PyModule_Add` или :c:"
"func:`PyModule_AddObjectRef`. (Предоставлено Сергеем Сторчакой в ​​:gh:"
"`86493`.)"

#: ../../whatsnew/3.13.rst:2528
msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types and the :c:"
"macro:`!Py_UNICODE_WIDE` define. Use the :c:type:`wchar_t` type directly "
"instead. Since Python 3.3, ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` are just "
"aliases to :c:type:`!wchar_t`. (Contributed by Victor Stinner in :gh:"
"`105156`.)"
msgstr ""
"Устаревшие типы Py_UNICODE и PY_UNICODE_TYPE, а также определение :c:macro:`!"
"Py_UNICODE_WIDE` устарели. Вместо этого используйте тип :c:type:`wchar_t` "
"напрямую. Начиная с Python 3.3, ``Py_UNICODE`` и ``PY_UNICODE_TYPE`` "
"являются просто псевдонимами :c:type:`!wchar_t`. (Предоставлено Виктором "
"Стиннером в :gh:`105156`.)"

#: ../../whatsnew/3.13.rst:2535
msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and :c:func:"
"`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed reference`. "
"Replace them with the new :c:func:`PyWeakref_GetRef` function, which returns "
"a :term:`strong reference`. The `pythoncapi-compat project`_ can be used to "
"get :c:func:`PyWeakref_GetRef` on Python 3.12 and older. (Contributed by "
"Victor Stinner in :gh:`105927`.)"
msgstr ""
"Устаревшие функции :c:func:`PyWeakref_GetObject` и :c:func:"
"`PyWeakref_GET_OBJECT`, которые возвращают :term:`заимствованную ссылку`. "
"Замените их новой функцией :c:func:`PyWeakref_GetRef`, которая возвращает :"
"term:`сильную ссылку`. `pythoncapi-compat project`_ можно использовать для "
"получения :c:func:`PyWeakref_GetRef` на Python 3.12 и старше. (Предоставлено "
"Виктором Стиннером в :gh:`105927`.)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""
"Поле ma_version_tag в :c:type:`PyDictObject` для модулей расширения (:pep:"
"`699`; :gh:`101193`)."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"Создание :c:data:`неизменяемых типов <Py_TPFLAGS_IMMUTABLETYPE>` с "
"изменяемыми базами (:gh:`95388`)."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: вместо этого используйте :c:func:"
"`PyImport_ImportModule`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
"Тип :c:type:`Py_UNICODE` и макрос :c:macro:`!Py_UNICODE_WIDE`: вместо этого "
"используйте :c:type:`wchar_t`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Вместо этого используйте :c:func:"
"`PyCodec_Decode`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: вместо этого используйте :c:func:"
"`PyCodec_Encode`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "Функции для настройки инициализации Python, устаревшие в Python 3.11:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Вместо этого установите :c:member:`PyConfig."
"argv`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Вместо этого установите :c:member:`PyConfig."
"argv`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Вместо этого установите :c:member:`PyConfig."
"program_name`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Вместо этого установите :c:member:`PyConfig."
"home`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"Вместо этого API :c:func:`Py_InitializeFromConfig` следует использовать с :c:"
"type:`PyConfig`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "Глобальные переменные конфигурации:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Следующие API устарели и будут удалены, хотя дата их удаления в настоящее "
"время не запланирована."

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""
":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: не требуется, начиная с Python 3.8."

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Fetch`: Вместо этого используйте :c:func:"
"`PyErr_GetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: вместо этого используйте :c:func:"
"`PyErr_GetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Restore`: Вместо этого используйте :c:func:"
"`PyErr_SetRaizedException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: Вместо этого используйте :c:func:"
"`PyModule_GetFilenameObject`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""
":c:func:`PyOS_AfterFork`: Вместо этого используйте :c:func:"
"`PyOS_AfterFork_Child`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: вместо этого используйте :c:func:"
"`PySlice_Unpack` и :c:func:`PySlice_AdjustIndices`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: не требуется, начиная с Python 3.12."

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""
":c:func:`!PyErr_Display`: Вместо этого используйте :c:func:"
"`PyErr_DisplayException`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: вместо этого используйте :c:func:`!"
"_PyErr_ChainExceptions1`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash`member: вместо этого вызовите :c:func:"
"`PyObject_Hash`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "API локального хранилища потоков (TLS):"

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""
":c:func:`PyThread_create_key`: вместо этого используйте :c:func:"
"`PyThread_tss_alloc`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""
":c:func:`PyThread_delete_key`: вместо этого используйте :c:func:"
"`PyThread_tss_free`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""
":c:func:`PyThread_set_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_set`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""
":c:func:`PyThread_get_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_get`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: вместо этого используйте :c:func:"
"`PyThread_tss_delete`."

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: не требуется, начиная с Python 3.7."

#: ../../whatsnew/3.13.rst:2559
msgid "Build Changes"
msgstr "Изменения сборки"

#: ../../whatsnew/3.13.rst:2561
msgid ""
"``arm64-apple-ios`` and ``arm64-apple-ios-simulator`` are both now :pep:`11` "
"tier 3 platforms. (:ref:`PEP 730 <whatsnew313-platform-support>` written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""
"``arm64-apple-ios`` и ``arm64-apple-ios-simulator`` теперь являются "
"платформами 3-го уровня :pep:`11`. (:ref:`PEP 730 <whatsnew313-platform-"
"support>`, написанный и реализованный Расселом Китом-Маги в :gh:`114099`.)"

#: ../../whatsnew/3.13.rst:2566
msgid ""
"``aarch64-linux-android`` and ``x86_64-linux-android`` are both now :pep:"
"`11` tier 3 platforms. (:ref:`PEP 738 <whatsnew313-platform-support>` "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
"``aarch64-linux-android`` и ``x86_64-linux-android`` теперь являются "
"платформами 3-го уровня :pep:`11`. (:ref:`PEP 738 <whatsnew313-platform-"
"support>`, написанный и реализованный Малкольмом Смитом в :gh:`116622`.)"

#: ../../whatsnew/3.13.rst:2571
msgid ""
"``wasm32-wasi`` is now a :pep:`11` tier 2 platform. (Contributed by Brett "
"Cannon in :gh:`115192`.)"
msgstr ""
"``wasm32-wasi`` теперь является платформой :pep:`11` уровня 2. "
"(Предоставлено Бреттом Кэнноном в :gh:`115192`.)"

#: ../../whatsnew/3.13.rst:2574
msgid ""
"``wasm32-emscripten`` is no longer a :pep:`11` supported platform. "
"(Contributed by Brett Cannon in :gh:`115192`.)"
msgstr ""
"``wasm32-emscripten`` больше не является поддерживаемой платформой :pep:"
"`11`. (Предоставлено Бреттом Кэнноном в :gh:`115192`.)"

#: ../../whatsnew/3.13.rst:2577
msgid ""
"Building CPython now requires a compiler with support for the C11 atomic "
"library, GCC built-in atomic functions, or MSVC interlocked intrinsics."
msgstr ""
"Для сборки CPython теперь требуется компилятор с поддержкой атомарной "
"библиотеки C11, встроенных атомарных функций GCC или взаимосвязанных "
"встроенных функций MSVC."

#: ../../whatsnew/3.13.rst:2580
msgid ""
"Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate the :file:"
"`configure` script. (Contributed by Christian Heimes in :gh:`89886` and by "
"Victor Stinner in :gh:`112090`.)"
msgstr ""
"Autoconf 2.71 и aclocal 1.16.5 теперь необходимы для повторного создания "
"сценария :file:`configure`. (Предоставлено Кристианом Хаймсом в :gh:`89886` "
"и Виктором Стиннером в :gh:`112090`.)"

#: ../../whatsnew/3.13.rst:2584
msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""
"Для сборки модуля расширения :mod:`sqlite3` требуется SQLite 3.15.2 или "
"новее. (Предоставлено Эрлендом Осландом в :gh:`105875`.)"

#: ../../whatsnew/3.13.rst:2588
msgid ""
"CPython now bundles the `mimalloc library`_ by default. It is licensed under "
"the MIT license; see :ref:`mimalloc license <mimalloc-license>`. The bundled "
"mimalloc has custom changes, see :gh:`113141` for details. (Contributed by "
"Dino Viehland in :gh:`109914`.)"
msgstr ""
"CPython теперь по умолчанию включает библиотеку mimalloc. Он лицензируется "
"по лицензии MIT; см. :ref:`лицензия mimalloc <mimalloc-license>`. Входящий в "
"комплект mimalloc имеет пользовательские изменения, подробности см. в :gh:"
"`113141`. (Предоставлено Дино Виландом в :gh:`109914`.)"

#: ../../whatsnew/3.13.rst:2596
msgid ""
"The :file:`configure` option :option:`--with-system-libmpdec` now defaults "
"to ``yes``. The bundled copy of ``libmpdec`` will be removed in Python 3.16."
msgstr ""

#: ../../whatsnew/3.13.rst:2600
msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) is now ABI compatible with the Python release build and :ref:"
"`debug build <debug-build>`. (Contributed by Victor Stinner in :gh:`108634`.)"
msgstr ""
"Python, созданный с помощью :file:`configure` :option:`--with-trace-refs` "
"(отслеживание ссылок), теперь ABI совместим со сборкой выпуска Python и "
"сборкой отладки <debug-build>`. (Предоставлено Виктором Стиннером в :gh:"
"`108634`.)"

#: ../../whatsnew/3.13.rst:2605
msgid ""
"On POSIX systems, the pkg-config (``.pc``) filenames now include the ABI "
"flags.  For example, the free-threaded build generates ``python-3.13t.pc`` "
"and the debug build generates ``python-3.13d.pc``."
msgstr ""
"В системах POSIX имена файлов pkg-config (``.pc``) теперь включают флаги "
"ABI. Например, сборка со свободным потоком генерирует ``python-3.13t.pc``, а "
"отладочная сборка генерирует ``python-3.13d.pc``."

#: ../../whatsnew/3.13.rst:2609
msgid ""
"The ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, ``_multiprocessing."
"posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` and ``_uuid`` C extensions are now built with the :"
"ref:`limited C API <limited-c-api>`. (Contributed by Victor Stinner in :gh:"
"`85283`.)"
msgstr ""
"``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, ``termios``, "
"``winsound``, `` `_ctypes_test``, ``_multiprocessing.posixshmem``, "
"``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` и ``_uuid`` Расширения C теперь создаются с "
"использованием :ref:`limited C API <limited-c-api>`. (Предоставлено Виктором "
"Стиннером в :gh:`85283`.)"

#: ../../whatsnew/3.13.rst:2618
msgid "Porting to Python 3.13"
msgstr "Портирование на Python 3.13"

#: ../../whatsnew/3.13.rst:2620
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок, которые могут потребовать внесения изменений в ваш код."

#: ../../whatsnew/3.13.rst:2624
msgid "Changes in the Python API"
msgstr "Изменения в API Python"

#: ../../whatsnew/3.13.rst:2628
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"the semantics of :func:`locals` and :attr:`f_locals <frame.f_locals>`:"
msgstr ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` вносит несколько изменений в "
"семантику :func:`locals` и :attr:`f_locals <frame.f_locals>`:"

#: ../../whatsnew/3.13.rst:2631
msgid ""
"Calling :func:`locals` in an :term:`optimized scope` now produces an "
"independent snapshot on each call, and hence no longer implicitly updates "
"previously returned references. Obtaining the legacy CPython behavior now "
"requires explicit calls to update the initially returned dictionary with the "
"results of subsequent calls to :func:`!locals`. Code execution functions "
"that implicitly target :func:`!locals` (such as ``exec`` and ``eval``) must "
"be passed an explicit namespace to access their results in an optimized "
"scope. (Changed as part of :pep:`667`.)"
msgstr ""
"Вызов :func:`locals` в :term:`оптимизированной области` теперь создает "
"независимый снимок при каждом вызове и, следовательно, больше не обновляет "
"неявно ранее возвращенные ссылки. Для получения устаревшего поведения "
"CPython теперь требуются явные вызовы для обновления первоначально "
"возвращаемого словаря результатами последующих вызовов :func:`!locals`. "
"Функциям выполнения кода, которые неявно нацелены на :func:`!locals` (такие "
"как ``exec`` и ``eval``), необходимо явно передать пространство имен для "
"доступа к их результатам в оптимизированной области. (Изменено как часть :"
"pep:`667`.)"

#: ../../whatsnew/3.13.rst:2640
msgid ""
"Calling :func:`locals` from a comprehension at module or class scope "
"(including via ``exec`` or ``eval``) once more behaves as if the "
"comprehension were running as an independent nested function (i.e. the local "
"variables from the containing scope are not included). In Python 3.12, this "
"had changed to include the local variables from the containing scope when "
"implementing :pep:`709`. (Changed as part of :pep:`667`.)"
msgstr ""
"Вызов :func:`locals` из понимания в области модуля или класса (в том числе "
"через ``exec`` или ``eval``) еще раз ведет себя так, как если бы понимание "
"выполнялось как независимая вложенная функция (т.е. локальные переменные из "
"содержащая область не включена). В Python 3.12 это изменилось: теперь при "
"реализации :pep:`709` включаются локальные переменные из содержащей их "
"области. (Изменено как часть :pep:`667`.)"

#: ../../whatsnew/3.13.rst:2647
msgid ""
"Accessing :attr:`FrameType.f_locals <frame.f_locals>` in an :term:`optimized "
"scope` now returns a write-through proxy rather than a snapshot that gets "
"updated at ill-specified times. If a snapshot is desired, it must be created "
"explicitly with ``dict`` or the proxy's ``.copy()`` method. (Changed as part "
"of :pep:`667`.)"
msgstr ""
"Доступ к :attr:`FrameType.f_locals <frame.f_locals>` в :term:"
"`оптимизированной области` теперь возвращает прокси со сквозной записью, а "
"не снимок, который обновляется в неправильно указанное время. Если требуется "
"снимок, он должен быть создан явно с помощью метода dict или метода .copy() "
"прокси. (Изменено как часть :pep:`667`.)"

#: ../../whatsnew/3.13.rst:2653
msgid ""
":class:`functools.partial` now emits a :exc:`FutureWarning` when used as a "
"method. The behavior will change in future Python versions. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka in :gh:`121027`.)"
msgstr ""
":class:`functools.partial` теперь выдает :exc:`FutureWarning` при "
"использовании в качестве метода. Поведение изменится в будущих версиях "
"Python. Оберните его в :func:`staticmethod`, если хотите сохранить старое "
"поведение. (Предоставлено Сергеем Сторчакой в ​​:gh:`121027`.)"

#: ../../whatsnew/3.13.rst:2659
msgid ""
"An :exc:`OSError` is now raised by :func:`getpass.getuser` for any failure "
"to retrieve a username, instead of :exc:`ImportError` on non-Unix platforms "
"or :exc:`KeyError` on Unix platforms where the password database is empty."
msgstr ""
":exc:`OSError` теперь вызывается :func:`getpass.getuser` при любой неудаче "
"при получении имени пользователя вместо :exc:`ImportError` на платформах, "
"отличных от Unix, или :exc:`KeyError` на платформах Unix. где база данных "
"паролей пуста."

#: ../../whatsnew/3.13.rst:2664
msgid ""
"The value of the :attr:`!mode` attribute of :class:`gzip.GzipFile` is now a "
"string (``'rb'`` or ``'wb'``) instead of an integer (``1`` or ``2``). The "
"value of the :attr:`!mode` attribute of the readable file-like object "
"returned by :meth:`zipfile.ZipFile.open` is now ``'rb'`` instead of ``'r'``. "
"(Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
"Значение атрибута :attr:`!mode` файла :class:`gzip.GzipFile` теперь является "
"строкой (``'rb'`` или ``'wb'``), а не целым числом (``1 `` или ``2``). "
"Значение атрибута :attr:`!mode` читаемого файлового объекта, возвращаемого :"
"meth:`zipfile.ZipFile.open`, теперь равно ``'rb'`` вместо ``'r'``. "
"(Предоставлено Сергеем Сторчакой в ​​:gh:`115961`.)"

#: ../../whatsnew/3.13.rst:2670
msgid ""
":class:`mailbox.Maildir` now ignores files with a leading dot (``.``). "
"(Contributed by Zackery Spytz in :gh:`65559`.)"
msgstr ""
":class:`mailbox.Maildir` теперь игнорирует файлы с начальной точкой (``.``). "
"(Предоставлено Закери Шпитцем в :gh:`65559`.)"

#: ../../whatsnew/3.13.rst:2673
msgid ""
":meth:`pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` now return both "
"files and directories if a pattern that ends with \"``**``\" is given, "
"rather than directories only. Add a trailing slash to keep the previous "
"behavior and only match directories."
msgstr ""
":meth:`pathlib.Path.glob` и :meth:`~pathlib.Path.rglob` теперь возвращают "
"как файлы, так и каталоги, если задан шаблон, заканчивающийся на \"``**``\", "
"а не только каталоги. Добавьте косую черту, чтобы сохранить предыдущее "
"поведение и соответствовать только каталогам."

#: ../../whatsnew/3.13.rst:2678
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an :func:`!_is_main_interpreter` function. This function takes no arguments "
"and returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"Модуль :mod:`threading` теперь ожидает, что модуль :mod:`!_thread` будет "
"иметь функцию :func:`!_is_main_interpreter`. Эта функция не принимает "
"аргументов и возвращает True, если текущий интерпретатор является основным."

#: ../../whatsnew/3.13.rst:2683
msgid ""
"Any library or application that provides a custom :mod:`!_thread` module "
"must provide :func:`!_is_main_interpreter`, just like the module's other "
"\"private\" attributes. (:gh:`112826`.)"
msgstr ""
"Любая библиотека или приложение, предоставляющее собственный модуль :mod:`!"
"_thread`, должно предоставлять :func:`!_is_main_interpreter`, как и другие "
"«частные» атрибуты модуля. (:gh:`112826`.)"

#: ../../whatsnew/3.13.rst:2690
msgid "Changes in the C API"
msgstr "Изменения в C API"

#: ../../whatsnew/3.13.rst:2692
msgid ""
"``Python.h`` no longer includes the ``<ieeefp.h>`` standard header. It was "
"included for the :c:func:`!finite` function which is now provided by the "
"``<math.h>`` header. It should now be included explicitly if needed. Remove "
"also the ``HAVE_IEEEFP_H`` macro. (Contributed by Victor Stinner in :gh:"
"`108765`.)"
msgstr ""
"``Python.h`` больше не включает стандартный заголовок ``<ieeefp.h>``. Он был "
"включен в функцию :c:func:`!finite`, которая теперь предоставляется "
"заголовком ``<math.h>``. Теперь его следует включать явно, если это "
"необходимо. Удалите также макрос HAVE_IEEEFP_H. (Предоставлено Виктором "
"Стиннером в :gh:`108765`.)"

#: ../../whatsnew/3.13.rst:2698
msgid ""
"``Python.h`` no longer includes these standard header files: ``<time.h>``, "
"``<sys/select.h>`` and ``<sys/time.h>``. If needed, they should now be "
"included explicitly. For example, ``<time.h>`` provides the :c:func:`!clock` "
"and :c:func:`!gmtime` functions, ``<sys/select.h>`` provides the :c:func:`!"
"select` function, and ``<sys/time.h>`` provides the :c:func:`!futimes`, :c:"
"func:`!gettimeofday` and :c:func:`!setitimer` functions. (Contributed by "
"Victor Stinner in :gh:`108765`.)"
msgstr ""
"``Python.h`` больше не включает следующие стандартные файлы заголовков: "
"``<time.h>``, ``<sys/select.h>`` и ``<sys/time.h>``. При необходимости их "
"следует включить явно. Например, ``<time.h>`` предоставляет функции :c:func:"
"`!lock` и :c:func:`!gmtime`, ``<sys/select.h>`` предоставляет функции :c :"
"func:`!select`, а ``<sys/time.h>`` предоставляет :c:func:`!futimes`, :c:func:"
"`!gettimeofday` и :c:func:`! функции settimer`. (Предоставлено Виктором "
"Стиннером в :gh:`108765`.)"

#: ../../whatsnew/3.13.rst:2706
msgid ""
"On Windows, ``Python.h`` no longer includes the ``<stddef.h>`` standard "
"header file. If needed, it should now be included explicitly. For example, "
"it provides :c:func:`!offsetof` function, and ``size_t`` and ``ptrdiff_t`` "
"types. Including ``<stddef.h>`` explicitly was already needed by all other "
"platforms, the ``HAVE_STDDEF_H`` macro is only defined on Windows. "
"(Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""
"В Windows ``Python.h`` больше не включает стандартный заголовочный файл "
"``<stddef.h>``. При необходимости его следует включить явно. Например, он "
"предоставляет функцию :c:func:`!offsetof` и типы ``size_t`` и ``ptrdiff_t``. "
"Явное включение ``<stddef.h>`` уже было необходимо для всех других платформ, "
"макрос ``HAVE_STDDEF_H`` определен только в Windows. (Предоставлено Виктором "
"Стиннером в :gh:`108765`.)"

#: ../../whatsnew/3.13.rst:2713
msgid ""
"If the :c:macro:`Py_LIMITED_API` macro is defined, :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` and :c:macro:`!"
"Py_BUILD_CORE_MODULE` macros are now undefined by ``<Python.h>``. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"Если макрос :c:macro:`Py_LIMITED_API` определен, макросы :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` и :c:macro:`!"
"Py_BUILD_CORE_MODULE` теперь не определены `` <Python.h>``. (Предоставлено "
"Виктором Стиннером в :gh:`85283`.)"

#: ../../whatsnew/3.13.rst:2718
msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"Старые макросы мусорной корзины Py_TRASHCAN_SAFE_BEGIN и "
"Py_TRASHCAN_SAFE_END были удалены. Их следует заменить новыми макросами "
"``Py_TRASHCAN_BEGIN`` и ``Py_TRASHCAN_END``."

#: ../../whatsnew/3.13.rst:2722
msgid "A ``tp_dealloc`` function that has the old macros, such as::"
msgstr "Функция ``tp_dealloc``, имеющая старые макросы, такие как::"

#: ../../whatsnew/3.13.rst:2724
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

#: ../../whatsnew/3.13.rst:2733
msgid "should migrate to the new macros as follows::"
msgstr "следует перейти на новые макросы следующим образом:"

#: ../../whatsnew/3.13.rst:2735
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

#: ../../whatsnew/3.13.rst:2744
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in. The new macros were added in Python 3.8 and "
"the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"Обратите внимание, что у ``Py_TRASHCAN_BEGIN`` есть второй аргумент, который "
"должен быть функцией освобождения, в которой он находится. Новые макросы "
"были добавлены в Python 3.8, а старые макросы устарели в Python 3.11. "
"(Предоставлено Ирит Катриэль в :gh:`105111`.)"

#: ../../whatsnew/3.13.rst:2751
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"frame-related functions:"
msgstr ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` вносит несколько изменений в "
"функции, связанные с фреймами:"

#: ../../whatsnew/3.13.rst:2754
msgid ""
"The effects of mutating the dictionary returned from :c:func:"
"`PyEval_GetLocals` in an :term:`optimized scope` have changed. New dict "
"entries added this way will now *only* be visible to subsequent :c:func:"
"`PyEval_GetLocals` calls in that frame, as :c:func:`PyFrame_GetLocals`, :"
"func:`locals`, and :attr:`FrameType.f_locals <frame.f_locals>` no longer "
"access the same underlying cached dictionary. Changes made to entries for "
"actual variable names and names added via the write-through proxy interfaces "
"will be overwritten on subsequent calls to :c:func:`PyEval_GetLocals` in "
"that frame. The recommended code update depends on how the function was "
"being used, so refer to the deprecation notice on the function for details."
msgstr ""
"Эффекты изменения словаря, возвращаемого из :c:func:`PyEval_GetLocals` в :"
"term:`оптимизированной области`, изменились. Новые записи dict, добавленные "
"таким образом, теперь будут *только* видимы для последующих вызовов :c:func:"
"`PyEval_GetLocals` в этом фрейме, как :c:func:`PyFrame_GetLocals`, :func:"
"`locals` и :attr:` FrameType.f_locals <frame.f_locals>` больше не имеет "
"доступа к тому же базовому кэшированному словарю. Изменения, внесенные в "
"записи фактических имен переменных и имен, добавленных через прокси-"
"интерфейсы со сквозной записью, будут перезаписаны при последующих вызовах :"
"c:func:`PyEval_GetLocals` в этом кадре. Рекомендуемое обновление кода "
"зависит от того, как использовалась функция, поэтому подробные сведения см. "
"в уведомлении об устаревании этой функции."

#: ../../whatsnew/3.13.rst:2767
msgid ""
"Calling :c:func:`PyFrame_GetLocals` in an :term:`optimized scope` now "
"returns a write-through proxy rather than a snapshot that gets updated at "
"ill-specified times. If a snapshot is desired, it must be created explicitly "
"(e.g. with :c:func:`PyDict_Copy`), or by calling the new :c:func:"
"`PyEval_GetFrameLocals` API."
msgstr ""
"Вызов :c:func:`PyFrame_GetLocals` в :term:`оптимизированной области` теперь "
"возвращает прокси со сквозной записью, а не снимок, который обновляется в "
"неправильно указанное время. Если требуется снимок, его необходимо создать "
"явно (например, с помощью :c:func:`PyDict_Copy`) или вызовом нового API :c:"
"func:`PyEval_GetFrameLocals`."

#: ../../whatsnew/3.13.rst:2774
msgid ""
":c:func:`!PyFrame_FastToLocals` and :c:func:`!PyFrame_FastToLocalsWithError` "
"no longer have any effect. Calling these functions has been redundant since "
"Python 3.11, when :c:func:`PyFrame_GetLocals` was first introduced."
msgstr ""
":c:func:`!PyFrame_FastToLocals` и :c:func:`!PyFrame_FastToLocalsWithError` "
"больше не имеют никакого эффекта. Вызов этих функций стал излишним начиная с "
"версии Python 3.11, когда впервые была представлена ​​:c:func:"
"`PyFrame_GetLocals`."

#: ../../whatsnew/3.13.rst:2779
msgid ""
":c:func:`!PyFrame_LocalsToFast` no longer has any effect. Calling this "
"function is redundant now that :c:func:`PyFrame_GetLocals` returns a write-"
"through proxy for :term:`optimized scopes <optimized scope>`."
msgstr ""
":c:func:`!PyFrame_LocalsToFast` больше не имеет никакого эффекта. Вызов этой "
"функции теперь является излишним, поскольку :c:func:`PyFrame_GetLocals` "
"возвращает прокси со сквозной записью для :term:`оптимизированных областей "
"<оптимизированная область>`."

#: ../../whatsnew/3.13.rst:2783
msgid ""
"Python 3.13 removed many private functions. Some of them can be replaced "
"using these alternatives:"
msgstr ""

#: ../../whatsnew/3.13.rst:2786
msgid "``_PyDict_Pop()``: :c:func:`PyDict_Pop` or :c:func:`PyDict_PopString`;"
msgstr ""
"``_PyDict_Pop()``: :c :func :`PyDict_Pop` или :c :func :`PyDict_PopString`;"

#: ../../whatsnew/3.13.rst:2787
msgid "``_PyDict_GetItemWithError()``: :c:func:`PyDict_GetItemRef`;"
msgstr "``_PyDict_GetItemWithError()``: :c:func:`PyDict_GetItemRef`;"

#: ../../whatsnew/3.13.rst:2788
msgid "``_PyErr_WriteUnraisableMsg()``:  :c:func:`PyErr_FormatUnraisable`;"
msgstr "``_PyErr_WriteUnraisableMsg()``:  :c:func:`PyErr_FormatUnraisable`;"

#: ../../whatsnew/3.13.rst:2789
msgid ""
"``_PyEval_SetTrace()``: :c:func:`PyEval_SetTrace` or :c:func:"
"`PyEval_SetTraceAllThreads`;"
msgstr ""
"``_PyEval_SetTrace()``: :c :func :`PyEval_SetTrace` или :c :func :"
"`PyEval_SetTraceAllThreads`;"

#: ../../whatsnew/3.13.rst:2790
msgid "``_PyList_Extend()``: :c:func:`PyList_Extend`;"
msgstr "``_PyList_Extend()``: :c:func:`PyList_Extend`;"

#: ../../whatsnew/3.13.rst:2791
msgid "``_PyLong_AsInt()``: :c:func:`PyLong_AsInt`;"
msgstr "``_PyLong_AsInt()``: :c:func:`PyLong_AsInt`;"

#: ../../whatsnew/3.13.rst:2792
msgid "``_PyMem_RawStrdup()``: ``strdup()``;"
msgstr "``_PyMem_RawStrdup()``: ``strdup()``;"

#: ../../whatsnew/3.13.rst:2793
msgid "``_PyMem_Strdup()``: ``strdup()``;"
msgstr "``_PyMem_Strdup()``: ``strdup()``;"

#: ../../whatsnew/3.13.rst:2794
msgid "``_PyObject_ClearManagedDict()``: :c:func:`PyObject_ClearManagedDict`;"
msgstr "``_PyObject_ClearManagedDict()``: :c:func:`PyObject_ClearManagedDict`;"

#: ../../whatsnew/3.13.rst:2795
msgid "``_PyObject_VisitManagedDict()``: :c:func:`PyObject_VisitManagedDict`;"
msgstr "``_PyObject_VisitManagedDict()``: :c:func:`PyObject_VisitManagedDict`;"

#: ../../whatsnew/3.13.rst:2796
msgid ""
"``_PyThreadState_UncheckedGet()``: :c:func:`PyThreadState_GetUnchecked()`;"
msgstr ""
"``_PyThreadState_UncheckedGet()``: :c:func:`PyThreadState_GetUnchecked()`;"

#: ../../whatsnew/3.13.rst:2797
msgid "``_PyTime_AsSecondsDouble()``: :c:func:`PyTime_AsSecondsDouble`;"
msgstr "``_PyTime_AsSecondsDouble()``: :c:func:`PyTime_AsSecondsDouble`;"

#: ../../whatsnew/3.13.rst:2798
msgid ""
"``_PyTime_GetMonotonicClock()``: :c:func:`PyTime_Monotonic` or :c:func:"
"`PyTime_MonotonicRaw`;"
msgstr ""
"``_PyTime_GetMonotonicClock()``: :c :func :`PyTime_Monotonic` или :c :func :"
"`PyTime_MonotonicRaw`;"

#: ../../whatsnew/3.13.rst:2799
msgid ""
"``_PyTime_GetPerfCounter()``: :c:func:`PyTime_PerfCounter` or :c:func:"
"`PyTime_PerfCounterRaw`;"
msgstr ""
"``_PyTime_GetPerfCounter()``: :c :func :`PyTime_PerfCounter` или :c :func :"
"`PyTime_PerfCounterRaw`;"

#: ../../whatsnew/3.13.rst:2800
msgid ""
"``_PyTime_GetSystemClock()``: :c:func:`PyTime_Time` or :c:func:"
"`PyTime_TimeRaw`;"
msgstr ""
"``_PyTime_GetSystemClock()``: :c :func :`PyTime_Time` или :c :func :"
"`PyTime_TimeRaw`;"

#: ../../whatsnew/3.13.rst:2801
msgid "``_PyTime_MAX``: :c:var:`PyTime_MAX`;"
msgstr "``_PyTime_MAX``: :c:var:`PyTime_MAX`;"

#: ../../whatsnew/3.13.rst:2802
msgid "``_PyTime_MIN``: :c:var:`PyTime_MIN`;"
msgstr "``_PyTime_MIN``: :c:var:`PyTime_MIN`;"

#: ../../whatsnew/3.13.rst:2803
msgid "``_PyTime_t``: :c:type:`PyTime_t`;"
msgstr "``_PyTime_t``: :c:type:`PyTime_t`;"

#: ../../whatsnew/3.13.rst:2804
msgid "``_Py_HashPointer()``: :c:func:`Py_HashPointer`;"
msgstr "``_Py_HashPointer()``: :c:func:`Py_HashPointer`;"

#: ../../whatsnew/3.13.rst:2805
msgid "``_Py_IsFinalizing()``: :c:func:`Py_IsFinalizing`."
msgstr "``_Py_IsFinalizing()``: :c:func:`Py_IsFinalizing`."

#: ../../whatsnew/3.13.rst:2807
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.12 and older."
msgstr ""

#: ../../whatsnew/3.13.rst:2811
msgid "Regression Test Changes"
msgstr "Изменения регрессионного теста"

#: ../../whatsnew/3.13.rst:2813
msgid ""
"Python built with :file:`configure` :option:`--with-pydebug` now supports a :"
"option:`-X presite=package.module <-X>` command-line option. If used, it "
"specifies a module that should be imported early in the lifecycle of the "
"interpreter, before ``site.py`` is executed. (Contributed by Łukasz Langa "
"in :gh:`110769`.)"
msgstr ""
"Python, созданный с помощью :file:`configure` :option:`--with-pydebug`, "
"теперь поддерживает параметр командной строки :option:`-X presite=package."
"module <-X>`. Если он используется, он указывает модуль, который должен быть "
"импортирован на ранней стадии жизненного цикла интерпретатора, до выполнения "
"site.py. (Предоставлено Лукашом Лангой в :gh:`110769`.)"
