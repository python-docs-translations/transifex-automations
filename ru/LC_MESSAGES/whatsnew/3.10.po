# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/3.10.rst:3
msgid "What's New In Python 3.10"
msgstr "Что нового в Python 3.10"

#: ../../whatsnew/3.10.rst:0
msgid "Editor"
msgstr "Редактор"

#: ../../whatsnew/3.10.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.10.rst:47
msgid ""
"This article explains the new features in Python 3.10, compared to 3.9. "
"Python 3.10 was released on October 4, 2021. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"В этой статье объясняются новые возможности Python 3.10 по сравнению с "
"версией 3.9. Python 3.10 был выпущен 4 октября 2021 г. Подробную информацию "
"см. в журнале изменений <changelog>`."

#: ../../whatsnew/3.10.rst:52
msgid "Summary -- Release highlights"
msgstr "Краткое описание - Основные моменты релиза"

#: ../../whatsnew/3.10.rst:60
msgid "New syntax features:"
msgstr "Новые возможности синтаксиса:"

#: ../../whatsnew/3.10.rst:62
msgid ":pep:`634`, Structural Pattern Matching: Specification"
msgstr ":pep:`634`, Соответствие структурному шаблону: Спецификация"

#: ../../whatsnew/3.10.rst:63
msgid ":pep:`635`, Structural Pattern Matching: Motivation and Rationale"
msgstr ""
":pep:`635`, Сопоставление структурных шаблонов: мотивация и обоснование"

#: ../../whatsnew/3.10.rst:64
msgid ":pep:`636`, Structural Pattern Matching: Tutorial"
msgstr ":pep:`636`, Сопоставление структурных шаблонов: Учебное пособие"

#: ../../whatsnew/3.10.rst:65
msgid ""
":issue:`12782`, Parenthesized context managers are now officially allowed."
msgstr ""
":issue:`12782`, Контекстные менеджеры в скобках теперь официально разрешены."

#: ../../whatsnew/3.10.rst:67
msgid "New features in the standard library:"
msgstr "Новые возможности стандартной библиотеки:"

#: ../../whatsnew/3.10.rst:69
msgid ":pep:`618`, Add Optional Length-Checking To zip."
msgstr ":pep:`618`, добавьте дополнительную проверку длины в zip."

#: ../../whatsnew/3.10.rst:71
msgid "Interpreter improvements:"
msgstr "Улучшения интерпретатора:"

#: ../../whatsnew/3.10.rst:73
msgid ":pep:`626`, Precise line numbers for debugging and other tools."
msgstr ":pep:`626`, точные номера строк для отладки и других инструментов."

#: ../../whatsnew/3.10.rst:75
msgid "New typing features:"
msgstr "Новые возможности набора текста:"

#: ../../whatsnew/3.10.rst:77
msgid ":pep:`604`, Allow writing union types as X | Y"
msgstr ":pep:`604`, Разрешить запись типов объединения как X | Да"

#: ../../whatsnew/3.10.rst:78
msgid ":pep:`612`, Parameter Specification Variables"
msgstr ":pep:`612`, Переменные спецификации параметров"

#: ../../whatsnew/3.10.rst:79
msgid ":pep:`613`, Explicit Type Aliases"
msgstr ":pep:`613`, Явные псевдонимы типов"

#: ../../whatsnew/3.10.rst:80
msgid ":pep:`647`, User-Defined Type Guards"
msgstr ":pep:`647`, Защита типов, определяемая пользователем"

#: ../../whatsnew/3.10.rst:82
msgid "Important deprecations, removals or restrictions:"
msgstr "Важные устаревания, удаления или ограничения:"

#: ../../whatsnew/3.10.rst:84
msgid ":pep:`644`, Require OpenSSL 1.1.1 or newer"
msgstr ":pep:`644`, требуется OpenSSL 1.1.1 или новее."

#: ../../whatsnew/3.10.rst:85
msgid ":pep:`632`, Deprecate distutils module."
msgstr ":pep:`632`, Модуль distutils устарел."

#: ../../whatsnew/3.10.rst:86
msgid ""
":pep:`623`, Deprecate and prepare for the removal of the wstr member in "
"PyUnicodeObject."
msgstr ""
":pep:`623`, объявите устаревшим и подготовьтесь к удалению члена wstr из "
"PyUnicodeObject."

#: ../../whatsnew/3.10.rst:87
msgid ":pep:`624`, Remove Py_UNICODE encoder APIs"
msgstr ":pep:`624`, Удалите API-интерфейсы кодировщика Py_UNICODE."

#: ../../whatsnew/3.10.rst:88
msgid ":pep:`597`, Add optional EncodingWarning"
msgstr ":pep:`597`, добавьте необязательное EncodingWarning"

#: ../../whatsnew/3.10.rst:92 ../../whatsnew/3.10.rst:2053
msgid "New Features"
msgstr "Новые особенности"

#: ../../whatsnew/3.10.rst:97
msgid "Parenthesized context managers"
msgstr "Контекстные менеджеры в скобках"

#: ../../whatsnew/3.10.rst:99
msgid ""
"Using enclosing parentheses for continuation across multiple lines in "
"context managers is now supported. This allows formatting a long collection "
"of context managers in multiple lines in a similar way as it was previously "
"possible with import statements. For instance, all these examples are now "
"valid:"
msgstr ""
"Теперь поддерживается использование закрывающих круглых скобок для "
"продолжения нескольких строк в контекстных менеджерах. Это позволяет "
"форматировать длинную коллекцию контекстных менеджеров в несколько строк так "
"же, как это было возможно ранее с операторами импорта. Например, все эти "
"примеры теперь действительны:"

#: ../../whatsnew/3.10.rst:105
msgid ""
"with (CtxManager() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"with (CtxManager1() as example,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"with (CtxManager1(),\n"
"      CtxManager2() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2\n"
"):\n"
"    ..."
msgstr ""
"with (CtxManager() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"with (CtxManager1() as example,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"with (CtxManager1(),\n"
"      CtxManager2() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2\n"
"):\n"
"    ..."

#: ../../whatsnew/3.10.rst:130
msgid ""
"it is also possible to use a trailing comma at the end of the enclosed group:"
msgstr ""
"также можно использовать завершающую запятую в конце заключенной группы:"

#: ../../whatsnew/3.10.rst:133
msgid ""
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2,\n"
"    CtxManager3() as example3,\n"
"):\n"
"    ..."
msgstr ""
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2,\n"
"    CtxManager3() as example3,\n"
"):\n"
"    ..."

#: ../../whatsnew/3.10.rst:142
msgid ""
"This new syntax uses the non LL(1) capacities of the new parser. Check :pep:"
"`617` for more details."
msgstr ""
"Этот новый синтаксис использует возможности нового синтаксического "
"анализатора, отличные от LL(1). Проверьте :pep:`617` для более подробной "
"информации."

#: ../../whatsnew/3.10.rst:145
msgid ""
"(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in :"
"issue:`12782` and :issue:`40334`.)"
msgstr ""
"(Предоставлено Гвидо ван Россумом, Пабло Галиндо и Лисандросом Николау в :"
"issue:`12782` и :issue:`40334`.)"

#: ../../whatsnew/3.10.rst:150
msgid "Better error messages"
msgstr "Улучшенные сообщения об ошибках"

#: ../../whatsnew/3.10.rst:153
msgid "SyntaxErrors"
msgstr "SyntaxErrors"

#: ../../whatsnew/3.10.rst:155
msgid ""
"When parsing code that contains unclosed parentheses or brackets the "
"interpreter now includes the location of the unclosed bracket of parentheses "
"instead of displaying *SyntaxError: unexpected EOF while parsing* or "
"pointing to some incorrect location. For instance, consider the following "
"code (notice the unclosed '{'):"
msgstr ""
"При синтаксическом анализе кода, содержащего незакрывающиеся скобки или "
"квадратные скобки, интерпретатор теперь включает местоположение незакрытой "
"скобки вместо отображения *SyntaxError: неожиданный EOF при синтаксическом "
"анализе* или указания на какое-то неправильное местоположение. Например, "
"рассмотрим следующий код (обратите внимание на незамкнутый '{'):"

#: ../../whatsnew/3.10.rst:160
msgid ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"some_other_code = foo()"
msgstr ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"some_other_code = foo()"

#: ../../whatsnew/3.10.rst:166
msgid ""
"Previous versions of the interpreter reported confusing places as the "
"location of the syntax error:"
msgstr ""
"Предыдущие версии интерпретатора сообщали о запутанных местах в качестве "
"места синтаксической ошибки:"

#: ../../whatsnew/3.10.rst:169
msgid ""
"File \"example.py\", line 3\n"
"    some_other_code = foo()\n"
"                    ^\n"
"SyntaxError: invalid syntax"
msgstr ""
"File \"example.py\", line 3\n"
"    some_other_code = foo()\n"
"                    ^\n"
"SyntaxError: invalid syntax"

#: ../../whatsnew/3.10.rst:176
msgid "but in Python 3.10 a more informative error is emitted:"
msgstr "но в Python 3.10 выдается более информативная ошибка:"

#: ../../whatsnew/3.10.rst:178
msgid ""
"File \"example.py\", line 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' was never closed"
msgstr ""
"File \"example.py\", line 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' was never closed"

#: ../../whatsnew/3.10.rst:186
msgid ""
"In a similar way, errors involving unclosed string literals (single and "
"triple quoted) now point to the start of the string instead of reporting EOF/"
"EOL."
msgstr ""
"Аналогичным образом ошибки, связанные с незакрытыми строковыми литералами "
"(одинарными и тройными кавычками), теперь указывают на начало строки, а не "
"сообщают об EOF/EOL."

#: ../../whatsnew/3.10.rst:189
msgid ""
"These improvements are inspired by previous work in the PyPy interpreter."
msgstr "Эти улучшения основаны на предыдущей работе над интерпретатором PyPy."

#: ../../whatsnew/3.10.rst:191
msgid ""
"(Contributed by Pablo Galindo in :issue:`42864` and Batuhan Taskaya in :"
"issue:`40176`.)"
msgstr ""
"(Предоставлено Пабло Галиндо в :issue:`42864` и Батуханом Таской в ​​:issue:"
"`40176`.)"

#: ../../whatsnew/3.10.rst:194
msgid ""
":exc:`SyntaxError` exceptions raised by the interpreter will now highlight "
"the full error range of the expression that constitutes the syntax error "
"itself, instead of just where the problem is detected. In this way, instead "
"of displaying (before Python 3.10):"
msgstr ""
"Исключения :exc:`SyntaxError`, вызываемые интерпретатором, теперь будут "
"выделять весь диапазон ошибок выражения, которое представляет собой саму "
"синтаксическую ошибку, а не только то место, где обнаружена проблема. Таким "
"образом, вместо отображения (до Python 3.10):"

#: ../../whatsnew/3.10.rst:199
msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^\n"
"SyntaxError: Generator expression must be parenthesized"

#: ../../whatsnew/3.10.rst:207
msgid "now Python 3.10 will display the exception as:"
msgstr "теперь Python 3.10 будет отображать исключение как:"

#: ../../whatsnew/3.10.rst:209
msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"SyntaxError: Generator expression must be parenthesized"

#: ../../whatsnew/3.10.rst:217
msgid "This improvement was contributed by Pablo Galindo in :issue:`43914`."
msgstr "Это улучшение было внесено Пабло Галиндо в :issue:`43914`."

#: ../../whatsnew/3.10.rst:219
msgid ""
"A considerable amount of new specialized messages for :exc:`SyntaxError` "
"exceptions have been incorporated. Some of the most notable ones are as "
"follows:"
msgstr ""
"Добавлено значительное количество новых специализированных сообщений для "
"исключений :exc:`SyntaxError`. Некоторые из наиболее примечательных из них "
"следующие:"

#: ../../whatsnew/3.10.rst:222
msgid "Missing ``:`` before blocks:"
msgstr "Отсутствует ``:`` перед блоками:"

#: ../../whatsnew/3.10.rst:224
msgid ""
">>> if rocket.position > event_horizon\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position > event_horizon\n"
"                                      ^\n"
"SyntaxError: expected ':'"
msgstr ""
">>> if rocket.position > event_horizon\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position > event_horizon\n"
"                                      ^\n"
"SyntaxError: expected ':'"

#: ../../whatsnew/3.10.rst:232
msgid "(Contributed by Pablo Galindo in :issue:`42997`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`42997`.)"

#: ../../whatsnew/3.10.rst:234
msgid "Unparenthesised tuples in comprehensions targets:"
msgstr "Кортежи без скобок в целях понимания:"

#: ../../whatsnew/3.10.rst:236
msgid ""
">>> {x,y for x,y in zip('abcd', '1234')}\n"
"  File \"<stdin>\", line 1\n"
"    {x,y for x,y in zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: did you forget parentheses around the comprehension target?"
msgstr ""
">>> {x,y for x,y in zip('abcd', '1234')}\n"
"  File \"<stdin>\", line 1\n"
"    {x,y for x,y in zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: did you forget parentheses around the comprehension target?"

#: ../../whatsnew/3.10.rst:244
msgid "(Contributed by Pablo Galindo in :issue:`43017`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`43017`.)"

#: ../../whatsnew/3.10.rst:246
msgid "Missing commas in collection literals and between expressions:"
msgstr "Отсутствуют запятые в литералах коллекции и между выражениями:"

#: ../../whatsnew/3.10.rst:248
msgid ""
">>> items = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  File \"<stdin>\", line 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> items = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  File \"<stdin>\", line 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.10.rst:259
msgid "(Contributed by Pablo Galindo in :issue:`43822`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`43822`.)"

#: ../../whatsnew/3.10.rst:261
msgid "Multiple Exception types without parentheses:"
msgstr "Несколько типов исключений без круглых скобок:"

#: ../../whatsnew/3.10.rst:263
msgid ""
">>> try:\n"
"...     build_dyson_sphere()\n"
"... except NotEnoughScienceError, NotEnoughResourcesError:\n"
"  File \"<stdin>\", line 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: multiple exception types must be parenthesized"
msgstr ""
">>> try:\n"
"...     build_dyson_sphere()\n"
"... except NotEnoughScienceError, NotEnoughResourcesError:\n"
"  File \"<stdin>\", line 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: multiple exception types must be parenthesized"

#: ../../whatsnew/3.10.rst:273
msgid "(Contributed by Pablo Galindo in :issue:`43149`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`43149`.)"

#: ../../whatsnew/3.10.rst:275
msgid "Missing ``:`` and values in dictionary literals:"
msgstr "Отсутствуют ``:`` и значения в словарных литералах:"

#: ../../whatsnew/3.10.rst:277
msgid ""
">>> values = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  File \"<stdin>\", line 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: expression expected after dictionary key and ':'\n"
"\n"
">>> values = {x:1, y:2, z w:3}\n"
"  File \"<stdin>\", line 1\n"
"    values = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' expected after dictionary key"
msgstr ""
">>> values = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  File \"<stdin>\", line 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: expression expected after dictionary key and ':'\n"
"\n"
">>> values = {x:1, y:2, z w:3}\n"
"  File \"<stdin>\", line 1\n"
"    values = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' expected after dictionary key"

#: ../../whatsnew/3.10.rst:295
msgid "(Contributed by Pablo Galindo in :issue:`43823`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`43823`.)"

#: ../../whatsnew/3.10.rst:297
msgid "``try`` blocks without ``except`` or ``finally`` blocks:"
msgstr "Блоки ``try`` без блоков ``кроме`` или ``finally``:"

#: ../../whatsnew/3.10.rst:299
msgid ""
">>> try:\n"
"...     x = 2\n"
"... something = 3\n"
"  File \"<stdin>\", line 3\n"
"    something  = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: expected 'except' or 'finally' block"
msgstr ""
">>> try:\n"
"...     x = 2\n"
"... something = 3\n"
"  File \"<stdin>\", line 3\n"
"    something  = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: expected 'except' or 'finally' block"

#: ../../whatsnew/3.10.rst:309
msgid "(Contributed by Pablo Galindo in :issue:`44305`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`44305`.)"

#: ../../whatsnew/3.10.rst:311
msgid "Usage of ``=`` instead of ``==`` in comparisons:"
msgstr "Использование ``=`` вместо ``==`` в сравнениях:"

#: ../../whatsnew/3.10.rst:313
msgid ""
">>> if rocket.position = event_horizon:\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead "
"of '='?"
msgstr ""
">>> if rocket.position = event_horizon:\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead "
"of '='?"

#: ../../whatsnew/3.10.rst:321
msgid "(Contributed by Pablo Galindo in :issue:`43797`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`43797`.)"

#: ../../whatsnew/3.10.rst:323
msgid "Usage of ``*`` in f-strings:"
msgstr "Использование ``*`` в f-строках:"

#: ../../whatsnew/3.10.rst:325
msgid ""
">>> f\"Black holes {*all_black_holes} and revelations\"\n"
"  File \"<stdin>\", line 1\n"
"    (*all_black_holes)\n"
"     ^\n"
"SyntaxError: f-string: cannot use starred expression here"
msgstr ""
">>> f\"Black holes {*all_black_holes} and revelations\"\n"
"  File \"<stdin>\", line 1\n"
"    (*all_black_holes)\n"
"     ^\n"
"SyntaxError: f-string: cannot use starred expression here"

#: ../../whatsnew/3.10.rst:333
msgid "(Contributed by Pablo Galindo in :issue:`41064`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`41064`.)"

#: ../../whatsnew/3.10.rst:336
msgid "IndentationErrors"
msgstr "IndentationErrors"

#: ../../whatsnew/3.10.rst:338
msgid ""
"Many :exc:`IndentationError` exceptions now have more context regarding what "
"kind of block was expecting an indentation, including the location of the "
"statement:"
msgstr ""
"Многие исключения :exc:`IndentationError` теперь имеют больше контекста "
"относительно того, какой тип блока ожидает отступ, включая расположение "
"оператора:"

#: ../../whatsnew/3.10.rst:341
msgid ""
">>> def foo():\n"
"...    if lel:\n"
"...    x = 2\n"
"  File \"<stdin>\", line 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: expected an indented block after 'if' statement in line 2"
msgstr ""
">>> def foo():\n"
"...    if lel:\n"
"...    x = 2\n"
"  File \"<stdin>\", line 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: expected an indented block after 'if' statement in line 2"

#: ../../whatsnew/3.10.rst:353
msgid "AttributeErrors"
msgstr "AttributeErrors"

#: ../../whatsnew/3.10.rst:355
msgid ""
"When printing :exc:`AttributeError`, :c:func:`!PyErr_Display` will offer "
"suggestions of similar attribute names in the object that the exception was "
"raised from:"
msgstr ""
"При печати :exc:`AttributeError`, :c:func:`!PyErr_Display` предложит похожие "
"имена атрибутов в объекте, из которого было вызвано исключение:"

#: ../../whatsnew/3.10.rst:359
msgid ""
">>> collections.namedtoplo\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you "
"mean: namedtuple?"
msgstr ""
">>> collections.namedtoplo\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you "
"mean: namedtuple?"

#: ../../whatsnew/3.10.rst:366 ../../whatsnew/3.10.rst:388
msgid "(Contributed by Pablo Galindo in :issue:`38530`.)"
msgstr "(Предоставлено Пабло Галиндо в :issue:`38530`.)"

#: ../../whatsnew/3.10.rst:369
msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"Обратите внимание, что это не будет работать, если :c:func:`!PyErr_Display` "
"не вызывается для отображения ошибки, что может произойти, если используется "
"какая-либо другая пользовательская функция отображения ошибок. Это "
"распространенный сценарий в некоторых REPL, таких как IPython."

#: ../../whatsnew/3.10.rst:374
msgid "NameErrors"
msgstr "NameErrors"

#: ../../whatsnew/3.10.rst:376
msgid ""
"When printing :exc:`NameError` raised by the interpreter, :c:func:`!"
"PyErr_Display` will offer suggestions of similar variable names in the "
"function that the exception was raised from:"
msgstr ""
"При печати :exc:`NameError`, вызванного интерпретатором, :c:func:`!"
"PyErr_Display` предложит похожие имена переменных в функции, из-за которой "
"было вызвано исключение:"

#: ../../whatsnew/3.10.rst:380
msgid ""
">>> schwarzschild_black_hole = None\n"
">>> schwarschild_black_hole\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'schwarschild_black_hole' is not defined. Did you mean: "
"schwarzschild_black_hole?"
msgstr ""
">>> schwarzschild_black_hole = None\n"
">>> schwarschild_black_hole\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'schwarschild_black_hole' is not defined. Did you mean: "
"schwarzschild_black_hole?"

#: ../../whatsnew/3.10.rst:391
msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error, which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"Обратите внимание, что это не будет работать, если :c:func:`!PyErr_Display` "
"не вызывается для отображения ошибки, что может произойти, если используется "
"какая-либо другая пользовательская функция отображения ошибок. Это "
"распространенный сценарий в некоторых REPL, таких как IPython."

#: ../../whatsnew/3.10.rst:397
msgid "PEP 626: Precise line numbers for debugging and other tools"
msgstr "PEP 626: точные номера строк для отладки и других инструментов."

#: ../../whatsnew/3.10.rst:399
msgid ""
"PEP 626 brings more precise and reliable line numbers for debugging, "
"profiling and coverage tools. Tracing events, with the correct line number, "
"are generated for all lines of code executed and only for lines of code that "
"are executed."
msgstr ""
"PEP 626 обеспечивает более точные и надежные номера строк для инструментов "
"отладки, профилирования и покрытия. События трассировки с правильным номером "
"строки генерируются для всех исполняемых строк кода и только для исполняемых "
"строк кода."

#: ../../whatsnew/3.10.rst:402
msgid ""
"The :attr:`~frame.f_lineno` attribute of frame objects will always contain "
"the expected line number."
msgstr ""
"Атрибут :attr:`~frame.f_lineno` объектов фрейма всегда будет содержать "
"ожидаемый номер строки."

#: ../../whatsnew/3.10.rst:405
msgid ""
"The :attr:`~codeobject.co_lnotab` attribute of :ref:`code objects <code-"
"objects>` is deprecated and will be removed in 3.12. Code that needs to "
"convert from offset to line number should use the new :meth:`~codeobject."
"co_lines` method instead."
msgstr ""
"Атрибут :attr:`~codeobject.co_lnotab` для :ref:`code object <code-objects>` "
"устарел и будет удален в версии 3.12. Код, который необходимо преобразовать "
"из смещения в номер строки, должен вместо этого использовать новый метод :"
"meth:`~codeobject.co_lines`."

#: ../../whatsnew/3.10.rst:412
msgid "PEP 634: Structural Pattern Matching"
msgstr "PEP 634: Сопоставление структурных шаблонов"

#: ../../whatsnew/3.10.rst:414
msgid ""
"Structural pattern matching has been added in the form of a *match "
"statement* and *case statements* of patterns with associated actions. "
"Patterns consist of sequences, mappings, primitive data types as well as "
"class instances. Pattern matching enables programs to extract information "
"from complex data types, branch on the structure of data, and apply specific "
"actions based on different forms of data."
msgstr ""
"Структурное сопоставление шаблонов было добавлено в форме *операторов "
"сопоставления* и *операторов случая* шаблонов со связанными действиями. "
"Шаблоны состоят из последовательностей, отображений, примитивных типов "
"данных, а также экземпляров классов. Сопоставление с образцом позволяет "
"программам извлекать информацию из сложных типов данных, разветвляться по "
"структуре данных и применять определенные действия на основе различных форм "
"данных."

#: ../../whatsnew/3.10.rst:422
msgid "Syntax and operations"
msgstr "Синтаксис и операции"

#: ../../whatsnew/3.10.rst:424
msgid "The generic syntax of pattern matching is::"
msgstr "Общий синтаксис сопоставления с образцом:"

#: ../../whatsnew/3.10.rst:426
msgid ""
"match subject:\n"
"    case <pattern_1>:\n"
"        <action_1>\n"
"    case <pattern_2>:\n"
"        <action_2>\n"
"    case <pattern_3>:\n"
"        <action_3>\n"
"    case _:\n"
"        <action_wildcard>"
msgstr ""
"match subject:\n"
"    case <pattern_1>:\n"
"        <action_1>\n"
"    case <pattern_2>:\n"
"        <action_2>\n"
"    case <pattern_3>:\n"
"        <action_3>\n"
"    case _:\n"
"        <action_wildcard>"

#: ../../whatsnew/3.10.rst:436
msgid ""
"A match statement takes an expression and compares its value to successive "
"patterns given as one or more case blocks.  Specifically, pattern matching "
"operates by:"
msgstr ""
"Оператор сопоставления принимает выражение и сравнивает его значение с "
"последовательными шаблонами, заданными в виде одного или нескольких блоков "
"Case. В частности, сопоставление с образцом осуществляется следующим образом:"

#: ../../whatsnew/3.10.rst:440
msgid "using data with type and shape (the ``subject``)"
msgstr "использование данных с типом и формой («субъект»)"

#: ../../whatsnew/3.10.rst:441
msgid "evaluating the ``subject`` in the ``match`` statement"
msgstr "оценка ``subject`` в операторе ``match``"

#: ../../whatsnew/3.10.rst:442
msgid ""
"comparing the subject with each pattern in a ``case`` statement from top to "
"bottom until a match is confirmed."
msgstr ""
"сравнение субъекта с каждым шаблоном в операторе ``case`` сверху вниз до тех "
"пор, пока совпадение не будет подтверждено."

#: ../../whatsnew/3.10.rst:444
msgid "executing the action associated with the pattern of the confirmed match"
msgstr "выполнение действия, связанного с шаблоном подтвержденного совпадения"

#: ../../whatsnew/3.10.rst:446
msgid ""
"If an exact match is not confirmed, the last case, a wildcard ``_``, if "
"provided, will be used as the matching case. If an exact match is not "
"confirmed and a wildcard case does not exist, the entire match block is a no-"
"op."
msgstr ""
"Если точное совпадение не подтверждено, в качестве случая совпадения будет "
"использоваться последний вариант, подстановочный знак ``_``, если он "
"предусмотрен. Если точное совпадение не подтверждено и не существует "
"подстановочного знака, весь блок совпадений не используется."

#: ../../whatsnew/3.10.rst:452
msgid "Declarative approach"
msgstr "Декларативный подход"

#: ../../whatsnew/3.10.rst:454
msgid ""
"Readers may be aware of pattern matching through the simple example of "
"matching a subject (data object) to a literal (pattern) with the switch "
"statement found in C, Java or JavaScript (and many other languages). Often "
"the switch statement is used for comparison of an object/expression with "
"case statements containing literals."
msgstr ""
"Читатели могут познакомиться с сопоставлением шаблонов на простом примере "
"сопоставления субъекта (объекта данных) с литералом (шаблоном) с помощью "
"оператора переключения, который можно найти в C, Java или JavaScript (и "
"многих других языках). Часто оператор переключения используется для "
"сравнения объекта/выражения с операторами case, содержащими литералы."

#: ../../whatsnew/3.10.rst:460
msgid ""
"More powerful examples of pattern matching can be found in languages such as "
"Scala and Elixir. With structural pattern matching, the approach is "
"\"declarative\" and explicitly states the conditions (the patterns) for data "
"to match."
msgstr ""
"Более мощные примеры сопоставления с образцом можно найти в таких языках, "
"как Scala и Elixir. При сопоставлении структурных шаблонов этот подход "
"является «декларативным» и явно устанавливает условия (шаблоны) для "
"сопоставления данных."

#: ../../whatsnew/3.10.rst:464
msgid ""
"While an \"imperative\" series of instructions using nested \"if\" "
"statements could be used to accomplish something similar to structural "
"pattern matching, it is less clear than the \"declarative\" approach. "
"Instead the \"declarative\" approach states the conditions to meet for a "
"match and is more readable through its explicit patterns. While structural "
"pattern matching can be used in its simplest form comparing a variable to a "
"literal in a case statement, its true value for Python lies in its handling "
"of the subject's type and shape."
msgstr ""
"Хотя «императивная» серия инструкций с использованием вложенных операторов "
"«if» может использоваться для выполнения чего-то похожего на сопоставление "
"структурных шаблонов, она менее очевидна, чем «декларативный» подход. Вместо "
"этого «декларативный» подход устанавливает условия, которым необходимо "
"соответствовать, и более читабелен благодаря своим явным шаблонам. Хотя "
"сопоставление структурных шаблонов можно использовать в своей простейшей "
"форме, сравнивая переменную с литералом в операторе case, его истинная "
"ценность для Python заключается в обработке типа и формы субъекта."

#: ../../whatsnew/3.10.rst:473
msgid "Simple pattern: match to a literal"
msgstr "Простой шаблон: сопоставление с литералом"

#: ../../whatsnew/3.10.rst:475
msgid ""
"Let's look at this example as pattern matching in its simplest form: a "
"value, the subject, being matched to several literals, the patterns. In the "
"example below, ``status`` is the subject of the match statement. The "
"patterns are each of the case statements, where literals represent request "
"status codes. The associated action to the case is executed after a match::"
msgstr ""
"Давайте посмотрим на этот пример как на сопоставление шаблонов в его "
"простейшей форме: значение, субъект, сопоставляемое с несколькими "
"литералами, шаблонами. В приведенном ниже примере ``status`` является "
"предметом оператора сопоставления. Шаблоны представляют собой каждый из "
"операторов случая, где литералы представляют собой коды состояния запроса. "
"Соответствующее действие к делу выполняется после совпадения:"

#: ../../whatsnew/3.10.rst:481
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""

#: ../../whatsnew/3.10.rst:492
msgid ""
"If the above function is passed a ``status`` of 418, \"I'm a teapot\" is "
"returned. If the above function is passed a ``status`` of 500, the case "
"statement with ``_`` will match as a wildcard, and \"Something's wrong with "
"the internet\" is returned. Note the last block: the variable name, ``_``, "
"acts as a *wildcard* and insures the subject will always match. The use of "
"``_`` is optional."
msgstr ""
"Если вышеуказанной функции передается статус 418, возвращается «Я чайник». "
"Если вышеуказанной функции передается ``статус``, равный 500, оператор case "
"с ``_`` будет соответствовать подстановочному знаку, и будет возвращено "
"сообщение \"Что-то не так с Интернетом\". Обратите внимание на последний "
"блок: имя переменной ``_`` действует как *подстановочный знак* и "
"гарантирует, что субъект всегда будет совпадать. Использование ``_`` не "
"является обязательным."

#: ../../whatsnew/3.10.rst:499
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Вы можете объединить несколько литералов в один шаблон, используя ``|`` "
"(\"или\")::"

#: ../../whatsnew/3.10.rst:501
msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""

#: ../../whatsnew/3.10.rst:505
msgid "Behavior without the wildcard"
msgstr "Поведение без подстановочного знака"

#: ../../whatsnew/3.10.rst:507
msgid ""
"If we modify the above example by removing the last case block, the example "
"becomes::"
msgstr ""
"Если мы изменим приведенный выше пример, удалив последний блок case, пример "
"станет следующим:"

#: ../../whatsnew/3.10.rst:510
msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\""
msgstr ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\""

#: ../../whatsnew/3.10.rst:519
msgid ""
"Without the use of ``_`` in a case statement, a match may not exist. If no "
"match exists, the behavior is a no-op. For example, if ``status`` of 500 is "
"passed, a no-op occurs."
msgstr ""
"Без использования ``_`` в операторе case совпадение может не существовать. "
"Если совпадений не существует, поведение является неактивным. Например, если "
"передается ``status`` 500, происходит отсутствие операции."

#: ../../whatsnew/3.10.rst:524
msgid "Patterns with a literal and variable"
msgstr "Шаблоны с литералом и переменной"

#: ../../whatsnew/3.10.rst:526
msgid ""
"Patterns can look like unpacking assignments, and a pattern may be used to "
"bind variables. In this example, a data point can be unpacked to its x-"
"coordinate and y-coordinate::"
msgstr ""
"Шаблоны могут выглядеть как распаковка присваиваний, а шаблон может "
"использоваться для привязки переменных. В этом примере точку данных можно "
"распаковать по ее координатам x и y::"

#: ../../whatsnew/3.10.rst:530
msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"

#: ../../whatsnew/3.10.rst:543
msgid ""
"The first pattern has two literals, ``(0, 0)``, and may be thought of as an "
"extension of the literal pattern shown above. The next two patterns combine "
"a literal and a variable, and the variable *binds* a value from the subject "
"(``point``).  The fourth pattern captures two values, which makes it "
"conceptually similar to the unpacking assignment ``(x, y) = point``."
msgstr ""
"Первый шаблон имеет два литерала, ``(0, 0)``, и его можно рассматривать как "
"расширение шаблона литералов, показанного выше. Следующие два шаблона "
"объединяют литерал и переменную, а переменная *связывает* значение из "
"субъекта («точки»). Четвертый шаблон захватывает два значения, что делает "
"его концептуально похожим на присваивание распаковки ``(x, y) = point``."

#: ../../whatsnew/3.10.rst:550
msgid "Patterns and classes"
msgstr "Шаблоны и классы"

#: ../../whatsnew/3.10.rst:552
msgid ""
"If you are using classes to structure your data, you can use as a pattern "
"the class name followed by an argument list resembling a constructor. This "
"pattern has the ability to capture class attributes into variables::"
msgstr ""
"Если вы используете классы для структурирования данных, вы можете "
"использовать в качестве шаблона имя класса, за которым следует список "
"аргументов, напоминающий конструктор. Этот шаблон имеет возможность "
"захватывать атрибуты класса в переменные:"

#: ../../whatsnew/3.10.rst:556
msgid ""
"class Point:\n"
"    x: int\n"
"    y: int\n"
"\n"
"def location(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin is the point's location.\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y} and the point is on the y-axis.\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x} and the point is on the x-axis.\")\n"
"        case Point():\n"
"            print(\"The point is located somewhere else on the plane.\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""
"class Point:\n"
"    x: int\n"
"    y: int\n"
"\n"
"def location(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin is the point's location.\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y} and the point is on the y-axis.\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x} and the point is on the x-axis.\")\n"
"        case Point():\n"
"            print(\"The point is located somewhere else on the plane.\")\n"
"        case _:\n"
"            print(\"Not a point\")"

#: ../../whatsnew/3.10.rst:574
msgid "Patterns with positional parameters"
msgstr "Паттерны с позиционными параметрами"

#: ../../whatsnew/3.10.rst:576
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Вы можете использовать позиционные параметры с некоторыми встроенными "
"классами, которые обеспечивают порядок их атрибутов (например, классов "
"данных). Вы также можете определить определенное положение атрибутов в "
"шаблонах, установив в своих классах специальный атрибут ``__match_args__``. "
"Если для него установлено значение («x», «y»), все следующие шаблоны "
"эквивалентны (и все они привязывают атрибут ``y`` к переменной ``var``):"

#: ../../whatsnew/3.10.rst:582
msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"

#: ../../whatsnew/3.10.rst:588
msgid "Nested patterns"
msgstr "Вложенные шаблоны"

#: ../../whatsnew/3.10.rst:590
msgid ""
"Patterns can be arbitrarily nested.  For example, if our data is a short "
"list of points, it could be matched like this::"
msgstr ""
"Шаблоны могут быть произвольно вложены. Например, если наши данные "
"представляют собой короткий список точек, их можно сопоставить следующим "
"образом:"

#: ../../whatsnew/3.10.rst:593
msgid ""
"match points:\n"
"    case []:\n"
"        print(\"No points in the list.\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin is the only point in the list.\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"A single point {x}, {y} is in the list.\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two points on the Y axis at {y1}, {y2} are in the list.\")\n"
"    case _:\n"
"        print(\"Something else is found in the list.\")"
msgstr ""
"match points:\n"
"    case []:\n"
"        print(\"No points in the list.\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin is the only point in the list.\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"A single point {x}, {y} is in the list.\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two points on the Y axis at {y1}, {y2} are in the list.\")\n"
"    case _:\n"
"        print(\"Something else is found in the list.\")"

#: ../../whatsnew/3.10.rst:606
msgid "Complex patterns and the wildcard"
msgstr "Сложные шаблоны и подстановочный знак"

#: ../../whatsnew/3.10.rst:608
msgid ""
"To this point, the examples have used ``_`` alone in the last case "
"statement. A wildcard can be used in more complex patterns, such as "
"``('error', code, _)``. For example::"
msgstr ""
"До сих пор в примерах использовался только ``_`` в последнем операторе case. "
"Подстановочный знак можно использовать в более сложных шаблонах, таких как "
"``('error', code, _)``. Например::"

#: ../../whatsnew/3.10.rst:612
msgid ""
"match test_variable:\n"
"    case ('warning', code, 40):\n"
"        print(\"A warning has been received.\")\n"
"    case ('error', code, _):\n"
"        print(f\"An error {code} occurred.\")"
msgstr ""
"match test_variable:\n"
"    case ('warning', code, 40):\n"
"        print(\"A warning has been received.\")\n"
"    case ('error', code, _):\n"
"        print(f\"An error {code} occurred.\")"

#: ../../whatsnew/3.10.rst:618
msgid ""
"In the above case, ``test_variable`` will match for ('error', code, 100) and "
"('error', code, 800)."
msgstr ""
"В приведенном выше случае ``test_variable`` будет соответствовать ('error', "
"код, 100) и ('error', код, 800)."

#: ../../whatsnew/3.10.rst:622
msgid "Guard"
msgstr "Guard"

#: ../../whatsnew/3.10.rst:624
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Мы можем добавить в шаблон предложение if, известное как «защита». Если "
"защита ложна, ``match`` переходит к следующему блоку case. Обратите "
"внимание, что захват значения происходит до оценки защиты::"

#: ../../whatsnew/3.10.rst:628
msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"The point is located on the diagonal Y=X at {x}.\")\n"
"    case Point(x, y):\n"
"        print(f\"Point is not on the diagonal.\")"
msgstr ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"The point is located on the diagonal Y=X at {x}.\")\n"
"    case Point(x, y):\n"
"        print(f\"Point is not on the diagonal.\")"

#: ../../whatsnew/3.10.rst:635
msgid "Other Key Features"
msgstr "Другие ключевые особенности"

#: ../../whatsnew/3.10.rst:637
msgid "Several other key features:"
msgstr "Несколько других ключевых особенностей:"

#: ../../whatsnew/3.10.rst:639
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences. Technically, the subject "
"must be a sequence. Therefore, an important exception is that patterns don't "
"match iterators. Also, to prevent a common mistake, sequence patterns don't "
"match strings."
msgstr ""
"Подобно распаковке присваиваний, шаблоны кортежей и списков имеют одно и то "
"же значение и фактически соответствуют произвольным последовательностям. "
"Технически, предметом должна быть последовательность. Поэтому важным "
"исключением является то, что шаблоны не соответствуют итераторам. Кроме "
"того, во избежание распространенной ошибки шаблоны последовательностей не "
"соответствуют строкам."

#: ../../whatsnew/3.10.rst:645
msgid ""
"Sequence patterns support wildcards: ``[x, y, *rest]`` and ``(x, y, *rest)`` "
"work similar to wildcards in unpacking assignments.  The name after ``*`` "
"may also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two "
"items without binding the remaining items."
msgstr ""
"Шаблоны последовательностей поддерживают подстановочные знаки: ``[x, y, "
"*rest]`` и ``(x, y, *rest)`` работают аналогично подстановочным знакам при "
"распаковке назначений. Имя после ``*`` также может быть ``_``, поэтому ``(x, "
"y, *_)`` соответствует последовательности, состоящей как минимум из двух "
"элементов, без привязки остальных элементов."

#: ../../whatsnew/3.10.rst:650
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dict.  Unlike sequence "
"patterns, extra keys are ignored.  A wildcard ``**rest`` is also supported.  "
"(But ``**_`` would be redundant, so is not allowed.)"
msgstr ""
"Шаблоны сопоставления: ``{\"bandwidth\": b, \"latency\": l}`` захватывает "
"значения ``\"bandwidth\"`` и ``\"latency\"`` из словаря. В отличие от "
"шаблонов последовательности, дополнительные ключи игнорируются. Также "
"поддерживается подстановочный знак ``**rest``. (Но ``**_`` будет избыточным, "
"поэтому не допускается.)"

#: ../../whatsnew/3.10.rst:655
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Подшаблоны могут быть записаны с использованием ключевого слова as::"

#: ../../whatsnew/3.10.rst:657
msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Point(x1, y1), Point(x2, y2) as p2): ..."

#: ../../whatsnew/3.10.rst:659
msgid ""
"This binds x1, y1, x2, y2 like you would expect without the ``as`` clause, "
"and p2 to the entire second item of the subject."
msgstr ""
"Это привязывает x1, y1, x2, y2, как и следовало ожидать без предложения as, "
"и p2 ко всему второму элементу субъекта."

#: ../../whatsnew/3.10.rst:662
msgid ""
"Most literals are compared by equality. However, the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"Большинство литералов сравниваются по принципу равенства. Однако одиночные "
"элементы ``True``, ``False`` и ``None`` сравниваются по идентичности."

#: ../../whatsnew/3.10.rst:665
msgid ""
"Named constants may be used in patterns.  These named constants must be "
"dotted names to prevent the constant from being interpreted as a capture "
"variable::"
msgstr ""
"Именованные константы можно использовать в шаблонах. Имена этих именованных "
"констант должны быть разделены точками, чтобы константу нельзя было "
"интерпретировать как переменную захвата:"

#: ../../whatsnew/3.10.rst:669
msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 0\n"
"    GREEN = 1\n"
"    BLUE = 2\n"
"\n"
"color = Color.GREEN\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 0\n"
"    GREEN = 1\n"
"    BLUE = 2\n"
"\n"
"color = Color.GREEN\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"

#: ../../whatsnew/3.10.rst:684
msgid ""
"For the full specification see :pep:`634`.  Motivation and rationale are in :"
"pep:`635`, and a longer tutorial is in :pep:`636`."
msgstr ""
"Полную спецификацию см. в :pep:`634`. Мотивация и обоснование находятся в :"
"pep:`635`, а более подробное руководство находится в :pep:`636`."

#: ../../whatsnew/3.10.rst:691
msgid "Optional ``EncodingWarning`` and ``encoding=\"locale\"`` option"
msgstr "Дополнительная опция EncodingWarning и encoding=\"locale\""

#: ../../whatsnew/3.10.rst:693
msgid ""
"The default encoding of :class:`~io.TextIOWrapper` and :func:`open` is "
"platform and locale dependent. Since UTF-8 is used on most Unix platforms, "
"omitting ``encoding`` option when opening UTF-8 files (e.g. JSON, YAML, "
"TOML, Markdown) is a very common bug. For example::"
msgstr ""
"Кодировка по умолчанию для :class:`~io.TextIOWrapper` и :func:`open` зависит "
"от платформы и локали. Поскольку UTF-8 используется на большинстве платформ "
"Unix, отсутствие параметра «кодировка» при открытии файлов UTF-8 (например, "
"JSON, YAML, TOML, Markdown) является очень распространенной ошибкой. "
"Например::"

#: ../../whatsnew/3.10.rst:698
msgid ""
"# BUG: \"rb\" mode or encoding=\"utf-8\" should be used.\n"
"with open(\"data.json\") as f:\n"
"    data = json.load(f)"
msgstr ""
"# BUG: \"rb\" mode or encoding=\"utf-8\" should be used.\n"
"with open(\"data.json\") as f:\n"
"    data = json.load(f)"

#: ../../whatsnew/3.10.rst:702
msgid ""
"To find this type of bug, an optional ``EncodingWarning`` is added. It is "
"emitted when :data:`sys.flags.warn_default_encoding <sys.flags>` is true and "
"locale-specific default encoding is used."
msgstr ""
"Чтобы найти этот тип ошибки, добавляется необязательное EncodingWarning. Он "
"генерируется, когда :data:`sys.flags.warn_default_encoding <sys.flags>` "
"имеет значение true и используется кодировка по умолчанию, специфичная для "
"локали."

#: ../../whatsnew/3.10.rst:706
msgid ""
"``-X warn_default_encoding`` option and :envvar:`PYTHONWARNDEFAULTENCODING` "
"are added to enable the warning."
msgstr ""
"Опция ``-X alert_default_encoding`` и :envvar:`PYTHONWARNDEFAULTENCODING` "
"добавляются для включения предупреждения."

#: ../../whatsnew/3.10.rst:709
msgid "See :ref:`io-text-encoding` for more information."
msgstr "См. :ref:`io-text-encoding` для получения дополнительной информации."

#: ../../whatsnew/3.10.rst:714
msgid "New Features Related to Type Hints"
msgstr "Новые функции, связанные с подсказками типов"

#: ../../whatsnew/3.10.rst:716
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"В этом разделе описаны основные изменения, затрагивающие подсказки типов :"
"pep:`484` и модуль :mod:`typing`."

#: ../../whatsnew/3.10.rst:721
msgid "PEP 604: New Type Union Operator"
msgstr "PEP 604: Оператор объединения нового типа"

#: ../../whatsnew/3.10.rst:723
msgid ""
"A new type union operator was introduced which enables the syntax ``X | Y``. "
"This provides a cleaner way of expressing 'either type X or type Y' instead "
"of using :data:`typing.Union`, especially in type hints."
msgstr ""
"Был введен новый оператор объединения типов, который позволяет использовать "
"синтаксис ``X | Й``. Это обеспечивает более чистый способ выражения типа "
"«либо тип X, либо тип Y» вместо использования :data:`typing.Union`, особенно "
"в подсказках типов."

#: ../../whatsnew/3.10.rst:727
msgid ""
"In previous versions of Python, to apply a type hint for functions accepting "
"arguments of multiple types, :data:`typing.Union` was used::"
msgstr ""
"В предыдущих версиях Python для применения подсказки типа к функциям, "
"принимающим аргументы нескольких типов, использовался :data:`typing.Union`::"

#: ../../whatsnew/3.10.rst:730
msgid ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    return number ** 2"
msgstr ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    return number ** 2"

#: ../../whatsnew/3.10.rst:734
msgid "Type hints can now be written in a more succinct manner::"
msgstr "Подсказки типов теперь можно писать более лаконично:"

#: ../../whatsnew/3.10.rst:736
msgid ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"
msgstr ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"

#: ../../whatsnew/3.10.rst:740
msgid ""
"This new syntax is also accepted as the second argument to :func:"
"`isinstance` and :func:`issubclass`::"
msgstr ""
"Этот новый синтаксис также принимается в качестве второго аргумента :func:"
"`isinstance` и :func:`issubclass`::"

#: ../../whatsnew/3.10.rst:743
msgid ""
">>> isinstance(1, int | str)\n"
"True"
msgstr ""
">>> isinstance(1, int | str)\n"
"True"

#: ../../whatsnew/3.10.rst:746
msgid "See :ref:`types-union` and :pep:`604` for more details."
msgstr "Дополнительную информацию смотрите в :ref:`types-union` и :pep:`604`."

#: ../../whatsnew/3.10.rst:748
msgid ""
"(Contributed by Maggie Moss and Philippe Prados in :issue:`41428`, with "
"additions by Yurii Karabas and Serhiy Storchaka in :issue:`44490`.)"
msgstr ""
"(Внесено Мэгги Мосс и Филиппом Прадосом в :issue:`41428`, с дополнениями "
"Юрия Карабаса и Сергея Сторчаки в :issue:`44490`.)"

#: ../../whatsnew/3.10.rst:753
msgid "PEP 612: Parameter Specification Variables"
msgstr "PEP 612: Переменные спецификации параметров"

#: ../../whatsnew/3.10.rst:755
msgid ""
"Two new options to improve the information provided to static type checkers "
"for :pep:`484`\\ 's ``Callable`` have been added to the :mod:`typing` module."
msgstr ""
"В модуль :mod:`typing` были добавлены две новые опции для улучшения "
"информации, предоставляемой средствам проверки статического типа для :pep:"
"`484`\\ ``Callable``."

#: ../../whatsnew/3.10.rst:758
msgid ""
"The first is the parameter specification variable.  They are used to forward "
"the parameter types of one callable to another callable -- a pattern "
"commonly found in higher order functions and decorators.  Examples of usage "
"can be found in :class:`typing.ParamSpec`. Previously, there was no easy way "
"to type annotate dependency of parameter types in such a precise manner."
msgstr ""
"Первая — это переменная спецификации параметра. Они используются для "
"пересылки типов параметров одного вызываемого объекта в другой вызываемый "
"объект — шаблон, обычно встречающийся в функциях и декораторах более "
"высокого порядка. Примеры использования можно найти в :class:`typing."
"ParamSpec`. Раньше не существовало простого способа столь точного ввода "
"аннотирующих зависимостей типов параметров."

#: ../../whatsnew/3.10.rst:764
msgid ""
"The second option is the new ``Concatenate`` operator. It's used in "
"conjunction with parameter specification variables to type annotate a higher "
"order callable which adds or removes parameters of another callable.  "
"Examples of usage can be found in :class:`typing.Concatenate`."
msgstr ""
"Второй вариант — новый оператор «Объединить». Он используется в сочетании с "
"переменными спецификации параметра для ввода аннотации вызываемого объекта "
"более высокого порядка, который добавляет или удаляет параметры другого "
"вызываемого объекта. Примеры использования можно найти в :class:`typing."
"Concatenate`."

#: ../../whatsnew/3.10.rst:769
msgid ""
"See :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing."
"ParamSpecKwargs`, and :pep:`612` for more details."
msgstr ""
"См. :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing.ParamSpecKwargs` "
"и :pep: `612` для более подробной информации."

#: ../../whatsnew/3.10.rst:773
msgid ""
"(Contributed by Ken Jin in :issue:`41559`, with minor enhancements by Jelle "
"Zijlstra in :issue:`43783`.  PEP written by Mark Mendoza.)"
msgstr ""
"(Внесено Кеном Джином в :issue:`41559`, с небольшими улучшениями Джелле "
"Зийлстрой в :issue:`43783`. PEP написан Марком Мендосой.)"

#: ../../whatsnew/3.10.rst:778
msgid "PEP 613: TypeAlias"
msgstr "PEP 613: TypeAlias"

#: ../../whatsnew/3.10.rst:780
msgid ""
":pep:`484` introduced the concept of type aliases, only requiring them to be "
"top-level unannotated assignments. This simplicity sometimes made it "
"difficult for type checkers to distinguish between type aliases and ordinary "
"assignments, especially when forward references or invalid types were "
"involved. Compare::"
msgstr ""
":pep:`484` представил концепцию псевдонимов типов, требуя, чтобы они были "
"только неаннотированными назначениями верхнего уровня. Из-за этой простоты "
"иногда специалистам по проверке типов было трудно отличить псевдонимы типов "
"от обычных присвоений, особенно когда использовались прямые ссылки или "
"недопустимые типы. Сравнивать::"

#: ../../whatsnew/3.10.rst:785
msgid ""
"StrCache = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""
"StrCache = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"

#: ../../whatsnew/3.10.rst:788
msgid ""
"Now the :mod:`typing` module has a special value :data:`~typing.TypeAlias` "
"which lets you declare type aliases more explicitly::"
msgstr ""
"Теперь модуль :mod:`typing` имеет специальное значение :data:`~typing."
"TypeAlias`, которое позволяет более явно объявлять псевдонимы типов::"

#: ../../whatsnew/3.10.rst:791
msgid ""
"StrCache: TypeAlias = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""
"StrCache: TypeAlias = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"

#: ../../whatsnew/3.10.rst:794
msgid "See :pep:`613` for more details."
msgstr "См. :pep:`613` для более подробной информации."

#: ../../whatsnew/3.10.rst:796
msgid "(Contributed by Mikhail Golubev in :issue:`41923`.)"
msgstr "(Contributed by Mikhail Golubev in :issue:`41923`.)"

#: ../../whatsnew/3.10.rst:799
msgid "PEP 647: User-Defined Type Guards"
msgstr "PEP 647: защита типа, определяемая пользователем"

#: ../../whatsnew/3.10.rst:801
msgid ""
":data:`~typing.TypeGuard` has been added to the :mod:`typing` module to "
"annotate type guard functions and improve information provided to static "
"type checkers during type narrowing.  For more information, please see :data:"
"`~typing.TypeGuard`\\ 's documentation, and :pep:`647`."
msgstr ""
":data:`~typing.TypeGuard` был добавлен в модуль :mod:`typing` для "
"аннотирования функций защиты типов и улучшения информации, предоставляемой "
"средствам проверки статического типа во время сужения типа. Для получения "
"дополнительной информации см. документацию :data:`~typing.TypeGuard`\\ и :"
"pep:`647`."

#: ../../whatsnew/3.10.rst:806
msgid ""
"(Contributed by Ken Jin and Guido van Rossum in :issue:`43766`. PEP written "
"by Eric Traut.)"
msgstr ""
"(Внесено Кеном Джином и Гвидо ван Россумом в :issue:`43766`. PEP написан "
"Эриком Траутом.)"

#: ../../whatsnew/3.10.rst:810
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/3.10.rst:812
msgid ""
"The :class:`int` type has a new method :meth:`int.bit_count`, returning the "
"number of ones in the binary expansion of a given integer, also known as the "
"population count. (Contributed by Niklas Fiekas in :issue:`29882`.)"
msgstr ""
"Тип :class:`int` имеет новый метод :meth:`int.bit_count`, возвращающий "
"количество единиц в двоичном представлении данного целого числа, также "
"известное как подсчет населения. (Предоставлено Никласом Фиекасом в :issue:"
"`29882`.)"

#: ../../whatsnew/3.10.rst:816
msgid ""
"The views returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:`dict."
"items` now all have a ``mapping`` attribute that gives a :class:`types."
"MappingProxyType` object wrapping the original dictionary. (Contributed by "
"Dennis Sweeney in :issue:`40890`.)"
msgstr ""
"Представления, возвращаемые :meth:`dict.keys`, :meth:`dict.values` и :meth:"
"`dict.items`, теперь имеют атрибут ``mapping``, который дает :class:`types."
"MappingProxyType `объект, обертывающий исходный словарь. (Предоставлено "
"Деннисом Суини в :issue:`40890`.)"

#: ../../whatsnew/3.10.rst:821
msgid ""
":pep:`618`: The :func:`zip` function now has an optional ``strict`` flag, "
"used to require that all the iterables have an equal length."
msgstr ""
":pep:`618`: Функция :func:`zip` теперь имеет дополнительный флаг ``strict``, "
"используемый для требования, чтобы все итерируемые объекты имели одинаковую "
"длину."

#: ../../whatsnew/3.10.rst:824
msgid ""
"Builtin and extension functions that take integer arguments no longer "
"accept :class:`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s and "
"other objects that can be converted to integers only with a loss (e.g. that "
"have the :meth:`~object.__int__` method but do not have the :meth:`~object."
"__index__` method). (Contributed by Serhiy Storchaka in :issue:`37999`.)"
msgstr ""
"Встроенные функции и функции расширения, которые принимают целочисленные "
"аргументы, больше не принимают :class:`~decimal.Decimal`\\ s, :class:"
"`~fractions.Fraction`\\ s и другие объекты, которые можно преобразовать в "
"целые числа только с потерей (например, иметь метод :meth:`~object.__int__`, "
"но не иметь метода :meth:`~object.__index__`). (Предоставлено Сергеем "
"Сторчакой в ​​:issue:`37999`.)"

#: ../../whatsnew/3.10.rst:831
msgid ""
"If :func:`object.__ipow__` returns :data:`NotImplemented`, the operator will "
"correctly fall back to :func:`object.__pow__` and :func:`object.__rpow__` as "
"expected. (Contributed by Alex Shkop in :issue:`38302`.)"
msgstr ""
"Если :func:`object.__ipow__` возвращает :data:`NotImplemented`, оператор "
"корректно вернется к :func:`object.__pow__` и :func:`object.__rpow__`, как и "
"ожидалось. (Предоставлено Алексом Шкопом в :issue:`38302`.)"

#: ../../whatsnew/3.10.rst:835
msgid ""
"Assignment expressions can now be used unparenthesized within set literals "
"and set comprehensions, as well as in sequence indexes (but not slices)."
msgstr ""
"Выражения присваивания теперь можно использовать без круглых скобок в "
"литералах множества и пониманиях множества, а также в индексах "
"последовательностей (но не в срезах)."

#: ../../whatsnew/3.10.rst:838
msgid ""
"Functions have a new ``__builtins__`` attribute which is used to look for "
"builtin symbols when a function is executed, instead of looking into "
"``__globals__['__builtins__']``. The attribute is initialized from "
"``__globals__[\"__builtins__\"]`` if it exists, else from the current "
"builtins. (Contributed by Mark Shannon in :issue:`42990`.)"
msgstr ""
"Функции имеют новый атрибут ``__builtins__``, который используется для "
"поиска встроенных символов при выполнении функции вместо поиска в "
"``__globals__['__builtins__']``. Атрибут инициализируется из "
"``__globals__[\"__builtins__\"]``, если он существует, иначе из текущих "
"встроенных функций. (Предоставлено Марком Шенноном в :issue:`42990`.)"

#: ../../whatsnew/3.10.rst:844
msgid ""
"Two new builtin functions -- :func:`aiter` and :func:`anext` have been added "
"to provide asynchronous counterparts to :func:`iter` and :func:`next`, "
"respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang "
"in :issue:`31861`.)"
msgstr ""
"Две новые встроенные функции — :func:`aiter` и :func:`anext` были добавлены "
"для обеспечения асинхронных аналогов :func:`iter` и :func:`next` "
"соответственно. (Предоставлено Джошуа Бронсоном, Дэниелом Поупом и Джастином "
"Вангом в :issue:`31861`.)"

#: ../../whatsnew/3.10.rst:849
msgid ""
"Static methods (:func:`@staticmethod <staticmethod>`) and class methods (:"
"func:`@classmethod <classmethod>`) now inherit the method attributes "
"(``__module__``, ``__name__``, ``__qualname__``, ``__doc__``, "
"``__annotations__``) and have a new ``__wrapped__`` attribute. Moreover, "
"static methods are now callable as regular functions. (Contributed by Victor "
"Stinner in :issue:`43682`.)"
msgstr ""
"Статические методы (:func:`@staticmethod <staticmethod>`) и методы класса (:"
"func:`@classmethod <classmethod>`) теперь наследуют атрибуты метода "
"(``__module__``, ``__name__``, ``__qualname__ ``, ``__doc__``, "
"``__annotations__``) и иметь новый атрибут ``__wrapped__``. Более того, "
"статические методы теперь можно вызывать как обычные функции. (Предоставлено "
"Виктором Стиннером в :issue:`43682`.)"

#: ../../whatsnew/3.10.rst:856
msgid ""
"Annotations for complex targets (everything beside ``simple name`` targets "
"defined by :pep:`526`) no longer cause any runtime effects with ``from "
"__future__ import annotations``. (Contributed by Batuhan Taskaya in :issue:"
"`42737`.)"
msgstr ""
"Аннотации для сложных целей (все, кроме целей ``simple name``, определенных :"
"pep:`526`) больше не вызывают никаких эффектов во время выполнения с ``from "
"__future__ import annotations``. (Предоставлено Батуханом Таской в ​​:issue:"
"`42737`.)"

#: ../../whatsnew/3.10.rst:860
msgid ""
"Class and module objects now lazy-create empty annotations dicts on demand. "
"The annotations dicts are stored in the object’s ``__dict__`` for backwards "
"compatibility.  This improves the best practices for working with "
"``__annotations__``; for more information, please see :ref:`annotations-"
"howto`. (Contributed by Larry Hastings in :issue:`43901`.)"
msgstr ""
"Объекты классов и модулей теперь лениво создают пустые аннотации по "
"требованию. Слова аннотаций хранятся в ``__dict__`` объекта для обеспечения "
"обратной совместимости. Это улучшает лучшие практики работы с "
"``__annotations__``; для получения дополнительной информации см. :ref:"
"`annotations-howto`. (Предоставлено Ларри Гастингсом в :issue:`43901`.)"

#: ../../whatsnew/3.10.rst:867
msgid ""
"Annotations consist of ``yield``, ``yield from``, ``await`` or named "
"expressions are now forbidden under ``from __future__ import annotations`` "
"due to their side effects. (Contributed by Batuhan Taskaya in :issue:"
"`42725`.)"
msgstr ""
"Аннотации состоят из ``yield``, ``yield from``, ``await``, а именованные "
"выражения теперь запрещены в ``from __future__ import annotations`` из-за их "
"побочных эффектов. (Предоставлено Батуханом Таской в ​​:issue:`42725`.)"

#: ../../whatsnew/3.10.rst:872
msgid ""
"Usage of unbound variables, ``super()`` and other expressions that might "
"alter the processing of symbol table as annotations are now rendered "
"effectless under ``from __future__ import annotations``. (Contributed by "
"Batuhan Taskaya in :issue:`42725`.)"
msgstr ""
"Использование несвязанных переменных, ``super()`` и других выражений, "
"которые могут изменить обработку таблицы символов в качестве аннотаций, "
"теперь недействительны в ``from __future__ import annotations``. "
"(Предоставлено Батуханом Таской в ​​:issue:`42725`.)"

#: ../../whatsnew/3.10.rst:877
msgid ""
"Hashes of NaN values of both :class:`float` type and :class:`decimal."
"Decimal` type now depend on object identity. Formerly, they always hashed to "
"``0`` even though NaN values are not equal to one another. This caused "
"potentially quadratic runtime behavior due to excessive hash collisions when "
"creating dictionaries and sets containing multiple NaNs. (Contributed by "
"Raymond Hettinger in :issue:`43475`.)"
msgstr ""
"Хэши значений NaN как типа :class:`float`, так и :class:`decimal.Decimal` "
"теперь зависят от идентификации объекта. Раньше они всегда хешировались до "
"«0», даже если значения NaN не равны друг другу. Это вызывало потенциально "
"квадратичное поведение во время выполнения из-за чрезмерных коллизий хэшей "
"при создании словарей и наборов, содержащих несколько NaN. (Предоставлено "
"Рэймондом Хеттингером в :issue:`43475`.)"

#: ../../whatsnew/3.10.rst:884
msgid ""
"A :exc:`SyntaxError` (instead of a :exc:`NameError`) will be raised when "
"deleting the :const:`__debug__` constant.  (Contributed by Donghee Na in :"
"issue:`45000`.)"
msgstr ""
"При удалении константы :const:`__debug__` будет возникать ошибка :exc:"
"`SyntaxError` (вместо :exc:`NameError`). (Предоставлено Донхи На в :issue:"
"`45000`.)"

#: ../../whatsnew/3.10.rst:887
msgid ""
":exc:`SyntaxError` exceptions now have ``end_lineno`` and ``end_offset`` "
"attributes.  They will be ``None`` if not determined. (Contributed by Pablo "
"Galindo in :issue:`43914`.)"
msgstr ""
"Исключения :exc:`SyntaxError` теперь имеют атрибуты ``end_lineno`` и "
"``end_offset``. Если они не определены, они будут иметь значение «Нет». "
"(Предоставлено Пабло Галиндо в :issue:`43914`.)"

#: ../../whatsnew/3.10.rst:892
msgid "New Modules"
msgstr "Новые модули"

#: ../../whatsnew/3.10.rst:894
msgid "None."
msgstr "None."

#: ../../whatsnew/3.10.rst:898
msgid "Improved Modules"
msgstr "Улучшенные модули"

#: ../../whatsnew/3.10.rst:901
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.10.rst:903
msgid ""
"Add missing :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket` method. (Contributed by Alex Grönholm in :issue:"
"`41332`.)"
msgstr ""
"Добавьте отсутствующий метод :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket`. (Предоставлено Алексом Грёнхольмом в :issue:"
"`41332`.)"

#: ../../whatsnew/3.10.rst:908
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.10.rst:910
msgid ""
"Misleading phrase \"optional arguments\" was replaced with \"options\" in "
"argparse help. Some tests might require adaptation if they rely on exact "
"output match. (Contributed by Raymond Hettinger in :issue:`9694`.)"
msgstr ""
"Вводящая в заблуждение фраза «необязательные аргументы» была заменена на "
"«опции» в справке по argparse. Некоторые тесты могут потребовать адаптации, "
"если они полагаются на точное соответствие выходных данных. (Предоставлено "
"Рэймондом Хеттингером в :issue:`9694`.)"

#: ../../whatsnew/3.10.rst:914
msgid "array"
msgstr "array"

#: ../../whatsnew/3.10.rst:916
msgid ""
"The :meth:`~array.array.index` method of :class:`array.array` now has "
"optional *start* and *stop* parameters. (Contributed by Anders Lorentsen and "
"Zackery Spytz in :issue:`31956`.)"
msgstr ""
"Метод :meth:`~array.array.index` класса :class:`array.array` теперь имеет "
"дополнительные параметры *start* и *stop*. (Предоставлено Андерсом "
"Лоренценом и Закери Шпитцем в :issue:`31956`.)"

#: ../../whatsnew/3.10.rst:921
msgid "asynchat, asyncore, smtpd"
msgstr "asynchat, asyncore, smtpd"

#: ../../whatsnew/3.10.rst:922
msgid ""
"These modules have been marked as deprecated in their module documentation "
"since Python 3.6.  An import-time :class:`DeprecationWarning` has now been "
"added to all three of these modules."
msgstr ""
"Эти модули помечены как устаревшие в документации модулей, начиная с Python "
"3.6. Во все три модуля теперь добавлено предупреждение времени импорта."

#: ../../whatsnew/3.10.rst:927
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.10.rst:929
msgid ""
"Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode` to support "
"the Base32 Encoding with Extended Hex Alphabet."
msgstr ""
"Добавьте :func:`base64.b32hexencode` и :func:`base64.b32hexdecode` для "
"поддержки кодировки Base32 с расширенным шестнадцатеричным алфавитом."

#: ../../whatsnew/3.10.rst:933
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.10.rst:935
msgid ""
"Add :meth:`~bdb.Breakpoint.clearBreakpoints` to reset all set breakpoints. "
"(Contributed by Irit Katriel in :issue:`24160`.)"
msgstr ""
"Добавьте :meth:`~bdb.Breakpoint.clearBreakpoints` для сброса всех "
"установленных точек останова. (Предоставлено Ирит Катриэль в :issue:`24160`.)"

#: ../../whatsnew/3.10.rst:939
msgid "bisect"
msgstr "разделить пополам"

#: ../../whatsnew/3.10.rst:941
msgid ""
"Added the possibility of providing a *key* function to the APIs in the :mod:"
"`bisect` module. (Contributed by Raymond Hettinger in :issue:`4356`.)"
msgstr ""
"Добавлена ​​возможность предоставления функции *key* для API в модуле :mod:"
"`bisect`. (Предоставлено Рэймондом Хеттингером в :issue:`4356`.)"

#: ../../whatsnew/3.10.rst:945
msgid "codecs"
msgstr "кодеки"

#: ../../whatsnew/3.10.rst:947
msgid ""
"Add a :func:`codecs.unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"Добавьте функцию :func:`codecs.unregister` для отмены регистрации функции "
"поиска кодеков. (Предоставлено Хай Ши в :issue:`41842`.)"

#: ../../whatsnew/3.10.rst:951
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.10.rst:953
msgid ""
"The ``__args__`` of the :ref:`parameterized generic <types-genericalias>` "
"for :class:`collections.abc.Callable` are now consistent with :data:`typing."
"Callable`. :class:`collections.abc.Callable` generic now flattens type "
"parameters, similar to what :data:`typing.Callable` currently does.  This "
"means that ``collections.abc.Callable[[int, str], str]`` will have "
"``__args__`` of ``(int, str, str)``; previously this was ``([int, str], "
"str)``.  To allow this change, :class:`types.GenericAlias` can now be "
"subclassed, and a subclass will be returned when subscripting the :class:"
"`collections.abc.Callable` type.  Note that a :exc:`TypeError` may be raised "
"for invalid forms of parameterizing :class:`collections.abc.Callable` which "
"may have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
"``__args__`` параметризованного универсального <types-genericalias>` для :"
"class:`collections.abc.Callable` теперь соответствуют :data:`typing."
"Callable`. :class:`collections.abc.Callable` универсальный теперь "
"выравнивает параметры типа, аналогично тому, что сейчас делает :data:`typing."
"Callable`. Это означает, что ``collections.abc.Callable[[int, str], str]`` "
"будет иметь ``__args__`` из ``(int, str, str)``; раньше это было ``([int, "
"str], str)``. Чтобы разрешить это изменение, :class:`types.GenericAlias` "
"теперь может быть подклассом, и подкласс будет возвращен при подписке на "
"тип :class:`collections.abc.Callable`. Обратите внимание, что :exc:"
"`TypeError` может быть вызвано для недопустимых форм параметризации :class:"
"`collections.abc.Callable`, которые могли передаваться автоматически в "
"Python 3.9. (Предоставлено Кеном Джином в :issue:`42195`.)"

#: ../../whatsnew/3.10.rst:966
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.10.rst:968
msgid ""
"Add a :func:`contextlib.aclosing` context manager to safely close async "
"generators and objects representing asynchronously released resources. "
"(Contributed by Joongi Kim and John Belmonte in :issue:`41229`.)"
msgstr ""
"Добавьте контекстный менеджер :func:`contextlib.aclosing` для безопасного "
"закрытия асинхронных генераторов и объектов, представляющих асинхронно "
"выпущенные ресурсы. (Предоставлено Джунги Кимом и Джоном Бельмонте в :issue:"
"`41229`.)"

#: ../../whatsnew/3.10.rst:972
msgid ""
"Add asynchronous context manager support to :func:`contextlib.nullcontext`. "
"(Contributed by Tom Gringauz in :issue:`41543`.)"
msgstr ""
"Добавьте поддержку асинхронного контекстного менеджера в :func:`contextlib."
"nullcontext`. (Предоставлено Томом Грингаузом в :issue:`41543`.)"

#: ../../whatsnew/3.10.rst:975
msgid ""
"Add :class:`~contextlib.AsyncContextDecorator`, for supporting usage of "
"async context managers as decorators."
msgstr ""
"Добавьте :class:`~contextlib.AsyncContextDecorator` для поддержки "
"использования асинхронных менеджеров контекста в качестве декораторов."

#: ../../whatsnew/3.10.rst:979
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.10.rst:981
msgid ""
"The extended color functions added in ncurses 6.1 will be used transparently "
"by :func:`curses.color_content`, :func:`curses.init_color`, :func:`curses."
"init_pair`, and :func:`curses.pair_content`. A new function, :func:`curses."
"has_extended_color_support`, indicates whether extended color support is "
"provided by the underlying ncurses library. (Contributed by Jeffrey "
"Kintscher and Hans Petter Jansson in :issue:`36982`.)"
msgstr ""
"Расширенные функции цвета, добавленные в ncurses 6.1, будут прозрачно "
"использоваться :func:`curses.color_content`, :func:`curses.init_color`, :"
"func:`curses.init_pair` и :func:`curses.pair_content`. Новая функция :func:"
"`curses.has_extended_color_support` указывает, обеспечивается ли расширенная "
"поддержка цвета базовой библиотекой ncurses. (Предоставлено Джеффри Кинчером "
"и Хансом Петтером Янссоном в :issue:`36982`.)"

#: ../../whatsnew/3.10.rst:988
msgid ""
"The ``BUTTON5_*`` constants are now exposed in the :mod:`curses` module if "
"they are provided by the underlying curses library. (Contributed by Zackery "
"Spytz in :issue:`39273`.)"
msgstr ""
"Константы ``BUTTON5_*`` теперь доступны в модуле :mod:`curses`, если они "
"предоставляются базовой библиотекой Curses. (Предоставлено Закери Шпитцем в :"
"issue:`39273`.)"

#: ../../whatsnew/3.10.rst:993
msgid "dataclasses"
msgstr "классы данных"

#: ../../whatsnew/3.10.rst:996
msgid "__slots__"
msgstr "__slots__"

#: ../../whatsnew/3.10.rst:998
msgid ""
"Added ``slots`` parameter in :func:`dataclasses.dataclass` decorator. "
"(Contributed by Yurii Karabas in :issue:`42269`)"
msgstr ""
"Добавлен параметр slots в декоратор :func:`dataclasses.dataclass`. "
"(Размещено Юрием Карабасом в :issue:`42269`)"

#: ../../whatsnew/3.10.rst:1002
msgid "Keyword-only fields"
msgstr "Поля только для ключевых слов"

#: ../../whatsnew/3.10.rst:1004
msgid ""
"dataclasses now supports fields that are keyword-only in the generated "
"__init__ method.  There are a number of ways of specifying keyword-only "
"fields."
msgstr ""
"dataclasses теперь поддерживает поля, которые содержат только ключевые слова "
"в сгенерированном методе __init__. Существует несколько способов указания "
"полей, содержащих только ключевые слова."

#: ../../whatsnew/3.10.rst:1008
msgid "You can say that every field is keyword-only:"
msgstr "Вы можете сказать, что каждое поле содержит только ключевые слова:"

#: ../../whatsnew/3.10.rst:1010
msgid ""
"from dataclasses import dataclass\n"
"\n"
"@dataclass(kw_only=True)\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date"
msgstr ""
"from dataclasses import dataclass\n"
"\n"
"@dataclass(kw_only=True)\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date"

#: ../../whatsnew/3.10.rst:1019
msgid ""
"Both ``name`` and ``birthday`` are keyword-only parameters to the generated "
"__init__ method."
msgstr ""
"И ``name``, и ``birthday`` являются параметрами, состоящими только из "
"ключевых слов, для сгенерированного метода __init__."

#: ../../whatsnew/3.10.rst:1022
msgid "You can specify keyword-only on a per-field basis:"
msgstr "Вы можете указать только ключевые слова для каждого поля:"

#: ../../whatsnew/3.10.rst:1024
msgid ""
"from dataclasses import dataclass, field\n"
"\n"
"@dataclass\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"
msgstr ""
"from dataclasses import dataclass, field\n"
"\n"
"@dataclass\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"

#: ../../whatsnew/3.10.rst:1033
msgid ""
"Here only ``birthday`` is keyword-only.  If you set ``kw_only`` on "
"individual fields, be aware that there are rules about re-ordering fields "
"due to keyword-only fields needing to follow non-keyword-only fields.  See "
"the full dataclasses documentation for details."
msgstr ""
"Здесь только слово «день рождения» содержит только ключевые слова. Если вы "
"устанавливаете kw_only для отдельных полей, имейте в виду, что существуют "
"правила изменения порядка полей, поскольку поля, содержащие только ключевые "
"слова, должны следовать за полями, не содержащими только ключевые слова. "
"Подробности смотрите в полной документации по классам данных."

#: ../../whatsnew/3.10.rst:1038
msgid ""
"You can also specify that all fields following a KW_ONLY marker are keyword-"
"only.  This will probably be the most common usage:"
msgstr ""
"Вы также можете указать, что все поля, следующие за маркером KW_ONLY, "
"предназначены только для ключевых слов. Вероятно, это будет наиболее "
"распространенное использование:"

#: ../../whatsnew/3.10.rst:1041
msgid ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0.0\n"
"    t: float = 0.0"
msgstr ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0.0\n"
"    t: float = 0.0"

#: ../../whatsnew/3.10.rst:1053
msgid ""
"Here, ``z`` and ``t`` are keyword-only parameters, while ``x`` and ``y`` are "
"not. (Contributed by Eric V. Smith in :issue:`43532`.)"
msgstr ""
"Здесь ``z`` и ``t`` являются параметрами только с ключевыми словами, а ``x`` "
"и ``y`` — нет. (Предоставлено Эриком В. Смитом в :issue:`43532`.)"

#: ../../whatsnew/3.10.rst:1060
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.10.rst:1062
msgid ""
"The entire ``distutils`` package is deprecated, to be removed in Python "
"3.12. Its functionality for specifying package builds has already been "
"completely replaced by third-party packages ``setuptools`` and "
"``packaging``, and most other commonly used APIs are available elsewhere in "
"the standard library (such as :mod:`platform`, :mod:`shutil`, :mod:"
"`subprocess` or :mod:`sysconfig`). There are no plans to migrate any other "
"functionality from ``distutils``, and applications that are using other "
"functions should plan to make private copies of the code. Refer to :pep:"
"`632` for discussion."
msgstr ""
"Весь пакет distutils устарел и будет удален в Python 3.12. Его "
"функциональность по указанию сборок пакетов уже полностью заменена "
"сторонними пакетами ``setuptools`` и ``packaging``, а большинство других "
"часто используемых API доступны в других местах стандартной библиотеки "
"(например, :mod:`platform`). , :mod:`shutil`, :mod:`subprocess` или :mod:"
"`sysconfig`). Планов по переносу каких-либо других функций из distutils нет, "
"и приложения, использующие другие функции, должны планировать создание "
"частных копий кода. Обратитесь к :pep:`632` для обсуждения."

#: ../../whatsnew/3.10.rst:1072
msgid ""
"The ``bdist_wininst`` command deprecated in Python 3.8 has been removed. The "
"``bdist_wheel`` command is now recommended to distribute binary packages on "
"Windows. (Contributed by Victor Stinner in :issue:`42802`.)"
msgstr ""
"Команда bdist_wininst, устаревшая в Python 3.8, была удалена. Команда "
"``bdist_wheel`` теперь рекомендуется для распространения бинарных пакетов в "
"Windows. (Предоставлено Виктором Стиннером в :issue:`42802`.)"

#: ../../whatsnew/3.10.rst:1078
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.10.rst:1080 ../../whatsnew/3.10.rst:1215
#: ../../whatsnew/3.10.rst:1242 ../../whatsnew/3.10.rst:1341
msgid ""
"When a module does not define ``__loader__``, fall back to ``__spec__."
"loader``. (Contributed by Brett Cannon in :issue:`42133`.)"
msgstr ""
"Если модуль не определяет ``__loader__``, вернитесь к ``__spec__.loader``. "
"(Предоставлено Бреттом Кэнноном в :issue:`42133`.)"

#: ../../whatsnew/3.10.rst:1084
msgid "encodings"
msgstr "кодировки"

#: ../../whatsnew/3.10.rst:1086
msgid ""
":func:`encodings.normalize_encoding` now ignores non-ASCII characters. "
"(Contributed by Hai Shi in :issue:`39337`.)"
msgstr ""
":func:`encodings.normalize_encoding` теперь игнорирует символы, отличные от "
"ASCII. (Предоставлено Хай Ши в :issue:`39337`.)"

#: ../../whatsnew/3.10.rst:1090
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.10.rst:1092
msgid ""
":class:`~enum.Enum` :func:`~object.__repr__` now returns ``enum_name."
"member_name`` and :func:`~object.__str__` now returns ``member_name``.  "
"Stdlib enums available as module constants have a :func:`repr` of "
"``module_name.member_name``. (Contributed by Ethan Furman in :issue:`40066`.)"
msgstr ""
":class:`~enum.Enum` :func:`~object.__repr__` теперь возвращает ``enum_name."
"member_name``, а :func:`~object.__str__` теперь возвращает ``member_name``. "
"Перечисления Stdlib, доступные как константы модуля, имеют :func:`repr` "
"``имя_модуля.имя_члена``. (Предоставлено Итаном Фурманом в :issue:`40066`.)"

#: ../../whatsnew/3.10.rst:1097
msgid ""
"Add :class:`enum.StrEnum` for enums where all members are strings. "
"(Contributed by Ethan Furman in :issue:`41816`.)"
msgstr ""
"Добавьте :class:`enum.StrEnum` для перечислений, все члены которых являются "
"строками. (Предоставлено Итаном Фурманом в :issue:`41816`.)"

#: ../../whatsnew/3.10.rst:1101
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.10.rst:1103
msgid ""
"Add *encoding* and *errors* parameters in :func:`fileinput.input` and :class:"
"`fileinput.FileInput`. (Contributed by Inada Naoki in :issue:`43712`.)"
msgstr ""
"Добавьте параметры *encoding* и *errors* в :func:`fileinput.input` и :class:"
"`fileinput.FileInput`. (Предоставлено Инадой Наоки в :issue:`43712`.)"

#: ../../whatsnew/3.10.rst:1107
msgid ""
":func:`fileinput.hook_compressed` now returns :class:`~io.TextIOWrapper` "
"object when *mode* is \"r\" and file is compressed, like uncompressed files. "
"(Contributed by Inada Naoki in :issue:`5758`.)"
msgstr ""
":func:`fileinput.hook_compressed` теперь возвращает объект :class:`~io."
"TextIOWrapper`, когда *mode* равен \"r\" и файл сжат, как несжатые файлы. "
"(Предоставлено Инадой Наоки в :issue:`5758`.)"

#: ../../whatsnew/3.10.rst:1112
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.10.rst:1114
msgid ""
"The :mod:`faulthandler` module now detects if a fatal error occurs during a "
"garbage collector collection. (Contributed by Victor Stinner in :issue:"
"`44466`.)"
msgstr ""
"Модуль :mod:`faulthandler` теперь определяет, произошла ли фатальная ошибка "
"во время сборки мусора. (Предоставлено Виктором Стиннером в :issue:`44466`.)"

#: ../../whatsnew/3.10.rst:1119
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.10.rst:1121
msgid ""
"Add audit hooks for :func:`gc.get_objects`, :func:`gc.get_referrers` and :"
"func:`gc.get_referents`. (Contributed by Pablo Galindo in :issue:`43439`.)"
msgstr ""
"Добавьте перехватчики аудита для :func:`gc.get_objects`, :func:`gc."
"get_referrers` и :func:`gc.get_referents`. (Предоставлено Пабло Галиндо в :"
"issue:`43439`.)"

#: ../../whatsnew/3.10.rst:1125
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.10.rst:1127
msgid ""
"Add the *root_dir* and *dir_fd* parameters in :func:`~glob.glob` and :func:"
"`~glob.iglob` which allow to specify the root directory for searching. "
"(Contributed by Serhiy Storchaka in :issue:`38144`.)"
msgstr ""
"Добавьте параметры *root_dir* и *dir_fd* в :func:`~glob.glob` и :func:`~glob."
"iglob`, которые позволяют указать корневой каталог для поиска. "
"(Предоставлено Сергеем Сторчакой в ​​:issue:`38144`.)"

#: ../../whatsnew/3.10.rst:1132
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.10.rst:1134
msgid ""
"The hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by "
"Christian Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"Для модуля hashlib требуется OpenSSL 1.1.1 или новее. (Предоставлено "
"Кристианом Хаймсом в :pep:`644` и :issue:`43669`.)"

#: ../../whatsnew/3.10.rst:1137
msgid ""
"The hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed "
"by Christian Heimes in :issue:`38820` and other issues.)"
msgstr ""
"Модуль hashlib имеет предварительную поддержку OpenSSL 3.0.0. (Предоставлено "
"Кристианом Хаймсом в :issue:`38820` и других выпусках.)"

#: ../../whatsnew/3.10.rst:1140
msgid ""
"The pure-Python fallback of :func:`~hashlib.pbkdf2_hmac` is deprecated. In "
"the future PBKDF2-HMAC will only be available when Python has been built "
"with OpenSSL support. (Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
"Резервный вариант :func:`~hashlib.pbkdf2_hmac` для чистого Python устарел. В "
"будущем PBKDF2-HMAC будет доступен только в том случае, если Python будет "
"собран с поддержкой OpenSSL. (Предоставлено Кристианом Хаймсом в :issue:"
"`43880`.)"

#: ../../whatsnew/3.10.rst:1146
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.10.rst:1148
msgid ""
"The hmac module now uses OpenSSL's HMAC implementation internally. "
"(Contributed by Christian Heimes in :issue:`40645`.)"
msgstr ""
"Модуль hmac теперь использует внутреннюю реализацию HMAC OpenSSL. "
"(Предоставлено Кристианом Хаймсом в :issue:`40645`.)"

#: ../../whatsnew/3.10.rst:1152
msgid "IDLE and idlelib"
msgstr "IDLE и idlelib"

#: ../../whatsnew/3.10.rst:1154
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in :issue:"
"`43008`.)"
msgstr ""
"Заставьте IDLE вызывать :func:`sys.excepthook` (при запуске без '-n'). "
"Пользовательские перехваты ранее игнорировались. (Предоставлено Кеном "
"Хилтоном в :issue:`43008`.)"

#: ../../whatsnew/3.10.rst:1158
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and Shell/"
"Ed tabs.  Move help sources, which extend the Help menu, to the Extensions "
"tab.  Make space for new options and shorten the dialog. The latter makes "
"the dialog better fit small screens.  (Contributed by Terry Jan Reedy in :"
"issue:`40468`.)  Move the indent space setting from the Font tab to the new "
"Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in :issue:"
"`33962`.)"
msgstr ""
"Переупорядочить диалоговое окно настроек. Разделить вкладку «Общие» на "
"вкладки «Windows» и «Shell/Ed». Переместить источники справки, которые "
"расширяют меню «Справка», на вкладку «Расширения». Освободить место для "
"новых параметров и сократить диалоговое окно. Последнее позволяет лучше "
"разместить диалоговое окно на небольших экранах. (Предоставлено Терри Яном "
"Риди в :issue:`40468`.) Переместить настройку отступа с вкладки «Шрифт» на "
"новую вкладку «Windows». (Предоставлено Марком Роземаном и Терри Яном Риди "
"в :issue:`33962`.)"

#: ../../whatsnew/3.10.rst:1166
msgid "The changes above were backported to a 3.9 maintenance release."
msgstr "Вышеупомянутые изменения были перенесены в поддерживающую версию 3.9."

#: ../../whatsnew/3.10.rst:1168
msgid ""
"Add a Shell sidebar.  Move the primary prompt ('>>>') to the sidebar. Add "
"secondary prompts ('...') to the sidebar.  Left click and optional drag "
"selects one or more lines of text, as with the editor line number sidebar.  "
"Right click after selecting text lines displays a context menu with 'copy "
"with prompts'.  This zips together prompts from the sidebar with lines from "
"the selected text.  This option also appears on the context menu for the "
"text.  (Contributed by Tal Einat in :issue:`37903`.)"
msgstr ""
"Добавьте боковую панель Shell. Переместите основное приглашение («>>>>) на "
"боковую панель. Добавьте дополнительные подсказки («...») на боковую панель. "
"Щелкните левой кнопкой мыши и при необходимости перетащите одну или "
"несколько строк текста, как в случае с боковой панелью номера строки "
"редактора. Щелкните правой кнопкой мыши после выбора текстовых строк, чтобы "
"открыть контекстное меню с пунктом «Копировать с подсказками». При этом "
"подсказки боковой панели объединяются со строками выделенного текста. Эта "
"опция также появляется в контекстном меню текста. (Предоставлено Талом "
"Эйнатом в :issue:`37903`.)"

#: ../../whatsnew/3.10.rst:1177
msgid ""
"Use spaces instead of tabs to indent interactive code.  This makes "
"interactive code entries 'look right'.  Making this feasible was a major "
"motivation for adding the shell sidebar.  (Contributed by Terry Jan Reedy "
"in :issue:`37892`.)"
msgstr ""
"Используйте пробелы вместо табуляции для отступов интерактивного кода. "
"Благодаря этому записи интерактивного кода выглядят «правильно». Сделать это "
"возможным было основной мотивацией для добавления боковой панели оболочки. "
"(Предоставлено Терри Яном Риди в :issue:`37892`.)"

#: ../../whatsnew/3.10.rst:1182
msgid ""
"Highlight the new :ref:`soft keywords <soft-keywords>` :keyword:`match`, :"
"keyword:`case <match>`, and :keyword:`_ <wildcard-patterns>` in pattern-"
"matching statements. However, this highlighting is not perfect and will be "
"incorrect in some rare cases, including some ``_``-s in ``case`` patterns.  "
"(Contributed by Tal Einat in :issue:`44010`.)"
msgstr ""
"Выделите новые :ref:`мягкие ключевые слова <soft-keywords>` :keyword:"
"`match`, :keyword:`case <match>` и :keyword:`_ <wildcard-patterns>` в "
"операторах сопоставления с образцом. Однако такое выделение не идеально и в "
"некоторых редких случаях будет неправильным, включая некоторые ``_``-ы в "
"шаблонах ``case``. (Предоставлено Талом Эйнатом в :issue:`44010`.)"

#: ../../whatsnew/3.10.rst:1188
msgid "New in 3.10 maintenance releases."
msgstr "Новое в версиях обслуживания 3.10."

#: ../../whatsnew/3.10.rst:1190
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Примените подсветку синтаксиса к файлам ``.pyi``. (Предоставлено Алексом "
"Вэйгудом и Терри Джен Риди в :issue:`45447`.)"

#: ../../whatsnew/3.10.rst:1193
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"Включите подсказки при сохранении Shell с входными и выходными данными. "
"(Предоставлено Терри Яном Риди в :gh:`95191`.)"

#: ../../whatsnew/3.10.rst:1197
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.10.rst:1199
msgid ""
"Feature parity with ``importlib_metadata`` 4.6 (`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."
msgstr ""
"Паритет функций с ``importlib_metadata`` 4.6 (`история <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."

#: ../../whatsnew/3.10.rst:1202
msgid ""
":ref:`importlib.metadata entry points <entry-points>` now provide a nicer "
"experience for selecting entry points by group and name through a new :ref:"
"`importlib.metadata.EntryPoints <entry-points>` class. See the Compatibility "
"Note in the docs for more info on the deprecation and usage."
msgstr ""
":ref:`importlib.metadata точки входа <entry-points>` теперь предоставляют "
"более удобный интерфейс для выбора точек входа по группе и имени с помощью "
"нового :ref:`importlib.metadata.EntryPoints <entry-points>` класса. "
"Дополнительную информацию об устаревании и использовании см. в примечании о "
"совместимости в документации."

#: ../../whatsnew/3.10.rst:1208
msgid ""
"Added :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` for resolving top-level Python modules and packages to "
"their :ref:`importlib.metadata.Distribution <distributions>`."
msgstr ""
"Добавлен :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` для разрешения модулей и пакетов Python верхнего уровня в "
"их :ref:`importlib.metadata.Distribution <distributions>`."

#: ../../whatsnew/3.10.rst:1213
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.10.rst:1218
msgid ""
"Add :func:`inspect.get_annotations`, which safely computes the annotations "
"defined on an object. It works around the quirks of accessing the "
"annotations on various types of objects, and makes very few assumptions "
"about the object it examines. :func:`inspect.get_annotations` can also "
"correctly un-stringize stringized annotations.  :func:`inspect."
"get_annotations` is now considered best practice for accessing the "
"annotations dict defined on any Python object; for more information on best "
"practices for working with annotations, please see :ref:`annotations-howto`. "
"Relatedly, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable`, and :func:`!inspect.Signature.from_function` now call :func:"
"`inspect.get_annotations` to retrieve annotations. This means :func:`inspect."
"signature` and :func:`inspect.Signature.from_callable` can also now un-"
"stringize stringized annotations. (Contributed by Larry Hastings in :issue:"
"`43817`.)"
msgstr ""
"Добавьте :func:`inspect.get_annotations`, который безопасно вычисляет "
"аннотации, определенные для объекта. Он обходит особенности доступа к "
"аннотациям различных типов объектов и делает очень мало предположений "
"относительно проверяемого объекта. :func:`inspect.get_annotations` также "
"может корректно растягивать строковые аннотации. :func:`inspect."
"get_annotations` теперь считается лучшей практикой для доступа к аннотациям, "
"определенным для любого объекта Python; Для получения дополнительной "
"информации о лучших методах работы с аннотациями см. :ref:`annotations-"
"howto`. Соответственно, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable` и :func:`!inspect.Signature.from_function` теперь вызывают :"
"func:`inspect.get_annotations` для получения аннотаций. Это означает, что :"
"func:`inspect.signature` и :func:`inspect.Signature.from_callable` теперь "
"также могут распаковывать строковые аннотации. (Предоставлено Ларри "
"Гастингсом в :issue:`43817`.)"

#: ../../whatsnew/3.10.rst:1234
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.10.rst:1236
msgid ""
"Add :func:`itertools.pairwise`. (Contributed by Raymond Hettinger in :issue:"
"`38200`.)"
msgstr ""
"Добавьте :func: `itertools`. (Предоставлено Рэймондом Хеттингером в :issue:"
"`38200`.)"

#: ../../whatsnew/3.10.rst:1240
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.10.rst:1246
msgid "os"
msgstr "os"

#: ../../whatsnew/3.10.rst:1248
msgid ""
"Add :func:`os.cpu_count` support for VxWorks RTOS. (Contributed by Peixing "
"Xin in :issue:`41440`.)"
msgstr ""
"Добавьте поддержку :func:`os.cpu_count` для VxWorks RTOS. (Предоставлено "
"Пейсин Синь в :issue:`41440`.)"

#: ../../whatsnew/3.10.rst:1251
msgid ""
"Add a new function :func:`os.eventfd` and related helpers to wrap the "
"``eventfd2`` syscall on Linux. (Contributed by Christian Heimes in :issue:"
"`41001`.)"
msgstr ""
"Добавьте новую функцию :func:`os.eventfd` и связанные с ней помощники для "
"обертывания системного вызова ``eventfd2`` в Linux. (Предоставлено "
"Кристианом Хаймсом в :issue:`41001`.)"

#: ../../whatsnew/3.10.rst:1255
msgid ""
"Add :func:`os.splice` that allows to move data between two file descriptors "
"without copying between kernel address space and user address space, where "
"one of the file descriptors must refer to a pipe. (Contributed by Pablo "
"Galindo in :issue:`41625`.)"
msgstr ""
"Добавьте :func:`os.splice`, который позволяет перемещать данные между двумя "
"файловыми дескрипторами без копирования между адресным пространством ядра и "
"адресным пространством пользователя, где один из файловых дескрипторов "
"должен ссылаться на канал. (Предоставлено Пабло Галиндо в :issue:`41625`.)"

#: ../../whatsnew/3.10.rst:1260
msgid ""
"Add :const:`~os.O_EVTONLY`, :const:`~os.O_FSYNC`, :const:`~os.O_SYMLINK` "
"and :const:`~os.O_NOFOLLOW_ANY` for macOS. (Contributed by Donghee Na in :"
"issue:`43106`.)"
msgstr ""
"Добавьте :const:`~os.O_EVTONLY`, :const:`~os.O_FSYNC`, :const:`~os."
"O_SYMLINK` и :const:`~os.O_NOFOLLOW_ANY` для macOS. (Предоставлено Донхи На "
"в :issue:`43106`.)"

#: ../../whatsnew/3.10.rst:1265
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.10.rst:1267
msgid ""
":func:`os.path.realpath` now accepts a *strict* keyword-only argument. When "
"set to ``True``, :exc:`OSError` is raised if a path doesn't exist or a "
"symlink loop is encountered. (Contributed by Barney Gale in :issue:`43757`.)"
msgstr ""
":func:`os.path.realpath` теперь принимает аргумент *strict*, содержащий "
"только ключевые слова. Если установлено значение ``True``, :exc:`OSError` "
"вызывается, если путь не существует или встречается цикл символической "
"ссылки. (Предоставлено Барни Гейлом в :issue:`43757`.)"

#: ../../whatsnew/3.10.rst:1273
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.10.rst:1275
msgid ""
"Add slice support to :attr:`PurePath.parents <pathlib.PurePath.parents>`. "
"(Contributed by Joshua Cannon in :issue:`35498`.)"
msgstr ""
"Добавьте поддержку фрагментов в :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Предоставлено Джошуа Кэнноном в :issue:`35498`.)"

#: ../../whatsnew/3.10.rst:1278
msgid ""
"Add negative indexing support to :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Contributed by Yaroslav Pankovych in :issue:`21041`.)"
msgstr ""
"Добавьте поддержку отрицательной индексации в :attr:`PurePath.parents "
"<pathlib.PurePath.parents>`. (Добавлен Ярославом Панковичем в :issue:"
"`21041`.)"

#: ../../whatsnew/3.10.rst:1282
msgid ""
"Add :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` method that "
"supersedes :meth:`!link_to`. The new method has the same argument order as :"
"meth:`~pathlib.Path.symlink_to`. (Contributed by Barney Gale in :issue:"
"`39950`.)"
msgstr ""
"Добавьте метод :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>`, который "
"заменяет :meth:`!link_to`. Новый метод имеет тот же порядок аргументов, что "
"и :meth:`~pathlib.Path.symlink_to`. (Предоставлено Барни Гейлом в :issue:"
"`39950`.)"

#: ../../whatsnew/3.10.rst:1287
msgid ""
":meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now accept a "
"*follow_symlinks* keyword-only argument for consistency with corresponding "
"functions in the :mod:`os` module. (Contributed by Barney Gale in :issue:"
"`39906`.)"
msgstr ""
":meth:`pathlib.Path.stat` и :meth:`~pathlib.Path.chmod` теперь принимают "
"аргумент, содержащий только ключевое слово *follow_symlinks*, для "
"согласованности с соответствующими функциями в модуле :mod:`os`. "
"(Предоставлено Барни Гейлом в :issue:`39906`.)"

#: ../../whatsnew/3.10.rst:1293
msgid "platform"
msgstr "платформа"

#: ../../whatsnew/3.10.rst:1295
msgid ""
"Add :func:`platform.freedesktop_os_release` to retrieve operation system "
"identification from `freedesktop.org os-release <https://www.freedesktop.org/"
"software/systemd/man/os-release.html>`_ standard file. (Contributed by "
"Christian Heimes in :issue:`28468`.)"
msgstr ""
"Добавьте :func:`platform.freedesktop_os_release` для получения идентификации "
"операционной системы из стандартного файла `freedesktop.org os-release "
"<https://www.freedesktop.org/software/systemd/man/os-release.html>`_. "
"(Предоставлено Кристианом Хаймсом в :issue:`28468`.)"

#: ../../whatsnew/3.10.rst:1301
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.10.rst:1303
msgid ""
":func:`pprint.pprint` now accepts a new ``underscore_numbers`` keyword "
"argument. (Contributed by sblondon in :issue:`42914`.)"
msgstr ""
":func:`pprint.pprint` теперь принимает новый аргумент ключевого слова "
"``underscore_numbers``. (Предоставлено sblondon в :issue:`42914`.)"

#: ../../whatsnew/3.10.rst:1306
msgid ""
":mod:`pprint` can now pretty-print :class:`dataclasses.dataclass` instances. "
"(Contributed by Lewis Gaul in :issue:`43080`.)"
msgstr ""
":mod:`pprint` теперь может красиво печатать экземпляры :class:`dataclasses."
"dataclass`. (Предоставлено Льюисом Галом в :issue:`43080`.)"

#: ../../whatsnew/3.10.rst:1310
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.10.rst:1312
msgid ""
"Add ``--quiet`` option to command-line interface of :mod:`py_compile`. "
"(Contributed by Gregory Schevchenko in :issue:`38731`.)"
msgstr ""
"Добавьте опцию ``--quiet`` в интерфейс командной строки :mod:`py_compile`. "
"(Предоставлено Григорием Шевченко в :issue:`38731`.)"

#: ../../whatsnew/3.10.rst:1316
msgid "pyclbr"
msgstr "pyclbr"

#: ../../whatsnew/3.10.rst:1318
msgid ""
"Add an ``end_lineno`` attribute to the ``Function`` and ``Class`` objects in "
"the tree returned by :func:`pyclbr.readmodule` and :func:`pyclbr."
"readmodule_ex`.  It matches the existing (start) ``lineno``. (Contributed by "
"Aviral Srivastava in :issue:`38307`.)"
msgstr ""
"Добавьте атрибут end_lineno к объектам Function и Class. Он соответствует "
"существующему (началу) ``белью``. (Предоставлено Авиралом Шриваставой в :"
"issue:`38307`.)"

#: ../../whatsnew/3.10.rst:1324
msgid "shelve"
msgstr "полка"

#: ../../whatsnew/3.10.rst:1326
msgid ""
"The :mod:`shelve` module now uses :const:`pickle.DEFAULT_PROTOCOL` by "
"default instead of :mod:`pickle` protocol ``3`` when creating shelves. "
"(Contributed by Zackery Spytz in :issue:`34204`.)"
msgstr ""
"Модуль :mod:`shelve` теперь использует :const:`pickle.DEFAULT_PROTOCOL` по "
"умолчанию вместо :mod:`pickle` протокола ``3`` при создании полок. "
"(Предоставлено Закери Шпитцем в :issue:`34204`.)"

#: ../../whatsnew/3.10.rst:1331
msgid "statistics"
msgstr "статистика"

#: ../../whatsnew/3.10.rst:1333
msgid ""
"Add :func:`~statistics.covariance`, Pearson's :func:`~statistics."
"correlation`, and simple :func:`~statistics.linear_regression` functions. "
"(Contributed by Tymoteusz Wołodźko in :issue:`38490`.)"
msgstr ""
"Добавьте :func:`~statistics.covariance`, :func:`~statistics.correlation` "
"Пирсона и простые функции :func:`~statistics.linear_reгрессия`. "
"(Предоставлено Тимотеушем Володько в :issue:`38490`.)"

#: ../../whatsnew/3.10.rst:1339
msgid "site"
msgstr "сайт"

#: ../../whatsnew/3.10.rst:1345
msgid "socket"
msgstr "сокет"

#: ../../whatsnew/3.10.rst:1347
msgid ""
"The exception :exc:`socket.timeout` is now an alias of :exc:`TimeoutError`. "
"(Contributed by Christian Heimes in :issue:`42413`.)"
msgstr ""
"Исключение :exc:`socket.timeout` теперь является псевдонимом :exc:"
"`TimeoutError`. (Предоставлено Кристианом Хаймсом в :issue:`42413`.)"

#: ../../whatsnew/3.10.rst:1350
msgid ""
"Add option to create MPTCP sockets with ``IPPROTO_MPTCP`` (Contributed by "
"Rui Cunha in :issue:`43571`.)"
msgstr ""
"Добавьте опцию для создания сокетов MPTCP с помощью ``IPPROTO_MPTCP`` "
"(предоставлен Руи Кунья в:issue:`43571`.)"

#: ../../whatsnew/3.10.rst:1353
msgid ""
"Add ``IP_RECVTOS`` option to receive the type of service (ToS) or DSCP/ECN "
"fields (Contributed by Georg Sauthoff in :issue:`44077`.)"
msgstr ""
"Добавьте опцию ``IP_RECVTOS`` для получения полей типа услуги (ToS) или DSCP/"
"ECN (предоставлено Георгом Заутхоффом в:issue:`44077`.)"

#: ../../whatsnew/3.10.rst:1357
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.10.rst:1359
msgid ""
"The ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian "
"Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"Для модуля SSL требуется OpenSSL 1.1.1 или новее. (Предоставлено Кристианом "
"Хаймсом в :pep:`644` и :issue:`43669`.)"

#: ../../whatsnew/3.10.rst:1362
msgid ""
"The ssl module has preliminary support for OpenSSL 3.0.0 and new option :"
"const:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Contributed by Christian Heimes in :"
"issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:"
"`43799`, :issue:`43920`, :issue:`43789`, and :issue:`43811`.)"
msgstr ""
"Модуль SSL имеет предварительную поддержку OpenSSL 3.0.0 и новую опцию :"
"const:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Внесено Кристианом Хаймсом в :issue:"
"`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:`43799`, :"
"issue:`43920`, :issue :`43789` и :issue:`43811`.)"

#: ../../whatsnew/3.10.rst:1368
msgid ""
"Deprecated function and use of deprecated constants now result in a :exc:"
"`DeprecationWarning`. :attr:`ssl.SSLContext.options` has :data:`~ssl."
"OP_NO_SSLv2` and :data:`~ssl.OP_NO_SSLv3` set by default and therefore "
"cannot warn about setting the flag again. The :ref:`deprecation section "
"<whatsnew310-deprecated>` has a list of deprecated features. (Contributed by "
"Christian Heimes in :issue:`43880`.)"
msgstr ""
"Устаревшая функция и использование устаревших констант теперь приводят к "
"появлению :exc:`DeprecationWarning`. :attr:`ssl.SSLContext.options` имеет :"
"data:`~ssl.OP_NO_SSLv2` и :data:`~ssl.OP_NO_SSLv3`, установленные по "
"умолчанию, и поэтому не может предупреждать о повторной установке флага. "
"Раздел устаревших функций <whatsnew310-deprecated> содержит список "
"устаревших функций. (Предоставлено Кристианом Хаймсом в :issue:`43880`.)"

#: ../../whatsnew/3.10.rst:1376
msgid ""
"The ssl module now has more secure default settings. Ciphers without forward "
"secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits "
"weak RSA, DH, and ECC keys with less than 112 bits of security. :class:`~ssl."
"SSLContext` defaults to minimum protocol version TLS 1.2. Settings are based "
"on Hynek Schlawack's research. (Contributed by Christian Heimes in :issue:"
"`43998`.)"
msgstr ""
"Модуль SSL теперь имеет более безопасные настройки по умолчанию. Шифры без "
"прямой секретности или SHA-1 MAC отключены по умолчанию. Уровень "
"безопасности 2 запрещает слабые ключи RSA, DH и ECC с длиной защиты менее "
"112 бит. :class:`~ssl.SSLContext` по умолчанию использует минимальную версию "
"протокола TLS 1.2. Настройки основаны на исследованиях Хайнека Шлавака. "
"(Предоставлено Кристианом Хаймсом в :issue:`43998`.)"

#: ../../whatsnew/3.10.rst:1383
msgid ""
"The deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer "
"officially supported. Python does not block them actively. However OpenSSL "
"build options, distro configurations, vendor patches, and cipher suites may "
"prevent a successful handshake."
msgstr ""
"Устаревшие протоколы SSL 3.0, TLS 1.0 и TLS 1.1 больше официально не "
"поддерживаются. Python не блокирует их активно. Однако параметры сборки "
"OpenSSL, конфигурации дистрибутива, исправления поставщиков и наборы шифров "
"могут помешать успешному установлению связи."

#: ../../whatsnew/3.10.rst:1388
msgid ""
"Add a *timeout* parameter to the :func:`ssl.get_server_certificate` "
"function. (Contributed by Zackery Spytz in :issue:`31870`.)"
msgstr ""
"Добавьте параметр *timeout* в функцию :func:`ssl.get_server_certificate`. "
"(Предоставлено Закери Шпитцем в :issue:`31870`.)"

#: ../../whatsnew/3.10.rst:1391
msgid ""
"The ssl module uses heap-types and multi-phase initialization. (Contributed "
"by Christian Heimes in :issue:`42333`.)"
msgstr ""
"Модуль SSL использует типы кучи и многофазную инициализацию. (Предоставлено "
"Кристианом Хаймсом в :issue:`42333`.)"

#: ../../whatsnew/3.10.rst:1394
msgid ""
"A new verify flag :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN` has been added. "
"(Contributed by l0x in :issue:`40849`.)"
msgstr ""
"Был добавлен новый флаг проверки :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN`. "
"(Внесено l0x в :issue:`40849`.)"

#: ../../whatsnew/3.10.rst:1398
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.10.rst:1400
msgid ""
"Add audit events for :func:`~sqlite3.connect/handle`, :meth:`~sqlite3."
"Connection.enable_load_extension`, and :meth:`~sqlite3.Connection."
"load_extension`. (Contributed by Erlend E. Aasland in :issue:`43762`.)"
msgstr ""
"Добавьте события аудита для :func:`~sqlite3.connect/handle`, :meth:`~sqlite3."
"Connection.enable_load_extension` и :meth:`~sqlite3.Connection."
"load_extension`. (Предоставлено Эрлендом Э. Осландом в :issue:`43762`.)"

#: ../../whatsnew/3.10.rst:1406
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.10.rst:1408
msgid ""
"Add :data:`sys.orig_argv` attribute: the list of the original command line "
"arguments passed to the Python executable. (Contributed by Victor Stinner "
"in :issue:`23427`.)"
msgstr ""
"Добавьте атрибут :data:`sys.orig_argv`: список исходных аргументов командной "
"строки, передаваемых в исполняемый файл Python. (Предоставлено Виктором "
"Стиннером в :issue:`23427`.)"

#: ../../whatsnew/3.10.rst:1412
msgid ""
"Add :data:`sys.stdlib_module_names`, containing the list of the standard "
"library module names. (Contributed by Victor Stinner in :issue:`42955`.)"
msgstr ""
"Добавьте :data:`sys.stdlib_module_names`, содержащий список имен модулей "
"стандартной библиотеки. (Предоставлено Виктором Стиннером в :issue:`42955`.)"

#: ../../whatsnew/3.10.rst:1417
msgid "_thread"
msgstr "_thread"

#: ../../whatsnew/3.10.rst:1419
msgid ""
":func:`_thread.interrupt_main` now takes an optional signal number to "
"simulate (the default is still :const:`signal.SIGINT`). (Contributed by "
"Antoine Pitrou in :issue:`43356`.)"
msgstr ""
":func:`_thread.interrupt_main` теперь принимает необязательный номер сигнала "
"для симуляции (по-прежнему используется значение по умолчанию :const:`signal."
"SIGINT`). (Предоставлено Антуаном Питру в :issue:`43356`.)"

#: ../../whatsnew/3.10.rst:1424
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.10.rst:1426
msgid ""
"Add :func:`threading.gettrace` and :func:`threading.getprofile` to retrieve "
"the functions set by :func:`threading.settrace` and :func:`threading."
"setprofile` respectively. (Contributed by Mario Corchero in :issue:`42251`.)"
msgstr ""
"Добавьте :func:`threading.gettrace` и :func:`threading.getprofile` для "
"получения функций, установленных :func:`threading.settrace` и :func:"
"`threading.setprofile` соответственно. (Предоставлено Марио Корчеро в :issue:"
"`42251`.)"

#: ../../whatsnew/3.10.rst:1431
msgid ""
"Add :data:`threading.__excepthook__` to allow retrieving the original value "
"of :func:`threading.excepthook` in case it is set to a broken or a different "
"value. (Contributed by Mario Corchero in :issue:`42308`.)"
msgstr ""
"Добавьте :data:`threading.__Exceptionhook__`, чтобы разрешить получение "
"исходного значения :func:`threading.excepthook` в случае, если для него "
"установлено неверное или другое значение. (Предоставлено Марио Корчеро в :"
"issue:`42308`.)"

#: ../../whatsnew/3.10.rst:1437
msgid "traceback"
msgstr "трассировка"

#: ../../whatsnew/3.10.rst:1439
msgid ""
"The :func:`~traceback.format_exception`, :func:`~traceback."
"format_exception_only`, and :func:`~traceback.print_exception` functions can "
"now take an exception object as a positional-only argument. (Contributed by "
"Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
"Функции :func:`~traceback.format_Exception`, :func:`~traceback."
"format_Exception_only` и :func:`~traceback.print_Exception` теперь могут "
"принимать объект исключения в качестве позиционного аргумента. "
"(Предоставлено Закери Шпитцем и Маттиасом Бюссонье в :issue:`26389`.)"

#: ../../whatsnew/3.10.rst:1446
msgid "types"
msgstr "типы"

#: ../../whatsnew/3.10.rst:1448
msgid ""
"Reintroduce the :data:`types.EllipsisType`, :data:`types.NoneType` and :data:"
"`types.NotImplementedType` classes, providing a new set of types readily "
"interpretable by type checkers. (Contributed by Bas van Beek in :issue:"
"`41810`.)"
msgstr ""
"Вновь представить классы :data:`types.EllipsisType`, :data:`types.NoneType` "
"и :data:`types.NotImplementedType`, предоставляя новый набор типов, легко "
"интерпретируемых средствами проверки типов. (Предоставлено Басом ван Беком "
"в :issue:`41810`.)"

#: ../../whatsnew/3.10.rst:1454
msgid "typing"
msgstr "печатание"

#: ../../whatsnew/3.10.rst:1456
msgid "For major changes, see :ref:`new-feat-related-type-hints`."
msgstr ""
"Чтобы узнать об основных изменениях, см. :ref:`new-feat-related-type-hints`."

#: ../../whatsnew/3.10.rst:1458
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with :pep:"
"`586` and to match the behavior of static type checkers specified in the PEP."
msgstr ""
"Поведение :class:`typing.Literal` было изменено, чтобы соответствовать :pep:"
"`586` и поведению средств проверки статических типов, указанных в PEP."

#: ../../whatsnew/3.10.rst:1461
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` теперь устраняет дубликаты параметров."

#: ../../whatsnew/3.10.rst:1462
msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr ""
"Сравнения на равенство между объектами Literal теперь не зависят от порядка."

#: ../../whatsnew/3.10.rst:1463
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To "
"support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"``Литеральные`` сравнения теперь учитывают типы. Например, ``Literal[0] == "
"Literal[False]`` ранее оценивалось как ``True``. Теперь это ``Ложь``. Чтобы "
"поддержать это изменение, внутренний кэш типов теперь поддерживает "
"дифференцирующие типы."

#: ../../whatsnew/3.10.rst:1467
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with unhashable parameters will not throw an "
"error::"
msgstr ""
"``Литеральные`` объекты теперь будут вызывать исключение :exc:`TypeError` во "
"время сравнения на равенство, если какой-либо из их параметров не является :"
"term:`hashable`. Обратите внимание, что объявление ``Literal`` с "
"нехэшируемыми параметрами не приведет к ошибке::"

#: ../../whatsnew/3.10.rst:1472
msgid ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"
msgstr ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"

#: ../../whatsnew/3.10.rst:1479
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "(Предоставлено Юрием Карабасом в :issue:`42345`.)"

#: ../../whatsnew/3.10.rst:1481
msgid ""
"Add new function :func:`typing.is_typeddict` to introspect if an annotation "
"is a :class:`typing.TypedDict`. (Contributed by Patrick Reader in :issue:"
"`41792`.)"
msgstr ""
"Добавьте новую функцию :func:`typing.is_typeddict` для проверки того, "
"является ли аннотация :class:`typing.TypedDict`. (Предоставлено Патриком "
"Ридером в :issue:`41792`.)"

#: ../../whatsnew/3.10.rst:1485
msgid ""
"Subclasses of ``typing.Protocol`` which only have data variables declared "
"will now raise a ``TypeError`` when checked with ``isinstance`` unless they "
"are decorated with :func:`~typing.runtime_checkable`.  Previously, these "
"checks passed silently.  Users should decorate their subclasses with the :"
"func:`!runtime_checkable` decorator if they want runtime protocols. "
"(Contributed by Yurii Karabas in :issue:`38908`.)"
msgstr ""
"Подклассы Typing.Protocol, в которых объявлены только переменные данных, "
"теперь будут выдавать ошибку TypeError при проверке с помощью isinstance, "
"если только они не декорированы :func:`~typing.runtime_checkable`. Раньше "
"эти проверки проходили молча. Пользователи должны украшать свои подклассы "
"декоратором :func:`!runtime_checkable`, если им нужны протоколы времени "
"выполнения. (Добавлен Юрием Карабасом в :issue:`38908`.)"

#: ../../whatsnew/3.10.rst:1493
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules have been deprecated since "
"Python 3.8 and will be removed in a future version of Python.  Anything "
"belonging to those submodules should be imported directly from :mod:`typing` "
"instead. (Contributed by Sebastian Rittau in :issue:`38291`.)"
msgstr ""
"Импорт из подмодулей ``typing.io`` и ``typing.re`` теперь будет выдавать :"
"exc:`DeprecationWarning`. Эти подмодули устарели, начиная с Python 3.8, и "
"будут удалены в будущей версии Python. Вместо этого все, что принадлежит "
"этим подмодулям, должно быть импортировано непосредственно из :mod:`typing`. "
"(Предоставлено Себастьяном Риттау в :issue:`38291`.)"

#: ../../whatsnew/3.10.rst:1501
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.10.rst:1503
msgid ""
"Add new method :meth:`~unittest.TestCase.assertNoLogs` to complement the "
"existing :meth:`~unittest.TestCase.assertLogs`. (Contributed by Kit Yan Choi "
"in :issue:`39385`.)"
msgstr ""
"Добавьте новый метод :meth:`~unittest.TestCase.assertNoLogs` в дополнение к "
"существующему :meth:`~unittest.TestCase.assertLogs`. (Предоставлено Китом Ян "
"Чой в :issue:`39385`.)"

#: ../../whatsnew/3.10.rst:1508
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.10.rst:1510
msgid ""
"Python versions earlier than Python 3.10 allowed using both ``;`` and ``&`` "
"as query parameter separators in :func:`urllib.parse.parse_qs` and :func:"
"`urllib.parse.parse_qsl`.  Due to security concerns, and to conform with "
"newer W3C recommendations, this has been changed to allow only a single "
"separator key, with ``&`` as the default.  This change also affects :func:"
"`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally.  For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin "
"in :issue:`42967`.)"
msgstr ""
"Версии Python, предшествующие Python 3.10, позволяли использовать как ``;``, "
"так и ``&`` в качестве разделителей параметров запроса в :func:`urllib.parse."
"parse_qs` и :func:`urllib.parse.parse_qsl`. Из соображений безопасности и в "
"соответствии с новыми рекомендациями W3C это было изменено, чтобы разрешить "
"только один ключ-разделитель с ``&`` по умолчанию. Это изменение также "
"затрагивает :func:`cgi.parse` и :func:`cgi.parse_multipart`, поскольку они "
"используют затронутые функции внутри себя. Более подробную информацию можно "
"найти в соответствующей документации. (Предоставлено Адамом Гольдшмидтом, "
"Сентилом Кумараном и Кеном Джином в :issue:`42967`.)"

#: ../../whatsnew/3.10.rst:1520
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates :rfc:"
"`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"Наличие символов новой строки или табуляции в частях URL-адреса допускает "
"некоторые формы атак. В соответствии со спецификацией WHATWG, которая "
"обновляет :rfc:`3986`, символы новой строки ASCII ``\\n``, ``\\r`` и "
"табуляции ``\\t`` удаляются из URL-адреса анализатором в :mod:` urllib."
"parse` предотвращает такие атаки. Символы удаления управляются новой "
"переменной уровня модуля ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (См. :"
"gh:`88048`)"

#: ../../whatsnew/3.10.rst:1528
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.10.rst:1530
msgid ""
"Add a :class:`~xml.sax.handler.LexicalHandler` class to the :mod:`xml.sax."
"handler` module. (Contributed by Jonathan Gossage and Zackery Spytz in :"
"issue:`35018`.)"
msgstr ""
"Добавьте класс :class:`~xml.sax.handler.LexicalHandler` в модуль :mod:`xml."
"sax.handler`. (Предоставлено Джонатаном Госсейджем и Закери Спитцем в :issue:"
"`35018`.)"

#: ../../whatsnew/3.10.rst:1535
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.10.rst:1536
msgid ""
"Add methods related to :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module`, and :meth:"
"`zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon in :issue:"
"`42131`.)"
msgstr ""
"Добавьте методы, связанные с :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module` и :meth:`zipimport."
"zipimporter.exec_module`. (Предоставлено Бреттом Кэнноном в :issue:`42131`.)"

#: ../../whatsnew/3.10.rst:1541
msgid ""
"Add :meth:`~zipimport.zipimporter.invalidate_caches` method. (Contributed by "
"Desmond Cheong in :issue:`14678`.)"
msgstr ""
"Добавьте метод :meth:`~zipimport.zipimporter.invalidate_caches`. "
"(Предоставлено Десмондом Чеонгом в :issue:`14678`.)"

#: ../../whatsnew/3.10.rst:1546
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/3.10.rst:1548
msgid ""
"Constructors :func:`str`, :func:`bytes` and :func:`bytearray` are now faster "
"(around 30--40% for small objects). (Contributed by Serhiy Storchaka in :"
"issue:`41334`.)"
msgstr ""
"Конструкторы :func:`str`, :func:`bytes` и :func:`bytearray` теперь работают "
"быстрее (около 30--40% для небольших объектов). (Предоставлено Сергеем "
"Сторчакой в ​​:issue:`41334`.)"

#: ../../whatsnew/3.10.rst:1552
msgid ""
"The :mod:`runpy` module now imports fewer modules. The ``python3 -m module-"
"name`` command startup time is 1.4x faster in average. On Linux, ``python3 -"
"I -m module-name`` imports 69 modules on Python 3.9, whereas it only imports "
"51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in :issue:"
"`41006` and :issue:`41718`.)"
msgstr ""
"Модуль :mod:`runpy` теперь импортирует меньше модулей. Время запуска команды "
"``python3 -m имя-модуля`` в среднем в 1,4 раза быстрее. В Linux ``python3 -I "
"-m имя-модуля`` импортирует 69 модулей в Python 3.9, тогда как в Python 3.10 "
"импортируется только 51 модуль (-18). (Внесено Виктором Стиннером в :issue:"
"`41006` и :issue:`41718`.)"

#: ../../whatsnew/3.10.rst:1558
msgid ""
"The ``LOAD_ATTR`` instruction now uses new \"per opcode cache\" mechanism.  "
"It is about 36% faster now for regular attributes and 44% faster for slots. "
"(Contributed by Pablo Galindo and Yury Selivanov in :issue:`42093` and Guido "
"van Rossum in :issue:`42927`, based on ideas implemented originally in PyPy "
"and MicroPython.)"
msgstr ""
"Инструкция ``LOAD_ATTR`` теперь использует новый механизм кэширования "
"каждого кода операции. Теперь это примерно на 36% быстрее для обычных "
"атрибутов и на 44% быстрее для слотов. (Представлено Пабло Галиндо и Юрием "
"Селивановым в :issue:`42093` и Гвидо ван Россумом в :issue:`42927`, на "
"основе идей, изначально реализованных в PyPy и MicroPython.)"

#: ../../whatsnew/3.10.rst:1564
msgid ""
"When building Python with :option:`--enable-optimizations` now ``-fno-"
"semantic-interposition`` is added to both the compile and link line. This "
"speeds builds of the Python interpreter created with :option:`--enable-"
"shared` with ``gcc`` by up to 30%. See `this article <https://developers."
"redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-"
"python-3-8-run-speeds/>`_ for more details. (Contributed by Victor Stinner "
"and Pablo Galindo in :issue:`38980`.)"
msgstr ""
"При сборке Python с помощью :option:`--enable-optimizations` теперь ``-fno-"
"semantic-interposition`` добавляется как в строку компиляции, так и в строку "
"компоновки. Это ускоряет сборку интерпретатора Python, созданного с помощью :"
"option:`--enable-shared` с ``gcc``, до 30%. См. эту статью <https://"
"developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-"
"faster-python-3-8-run-speeds/> `_ для более подробной информации. "
"(Предоставлено Виктором Стиннером и Пабло Галиндо в :issue:`38980`.)"

#: ../../whatsnew/3.10.rst:1572
msgid ""
"Use a new output buffer management code for :mod:`bz2` / :mod:`lzma` / :mod:"
"`zlib` modules, and add ``.readall()`` function to ``_compression."
"DecompressReader`` class. bz2 decompression is now 1.09x ~ 1.17x faster, "
"lzma decompression 1.20x ~ 1.32x faster, ``GzipFile.read(-1)`` 1.11x ~ 1.18x "
"faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in :issue:"
"`41486`)"
msgstr ""
"Используйте новый код управления выходным буфером для модулей :mod:`bz2` / :"
"mod:`lzma` / :mod:`zlib` и добавьте функцию ``.readall()`` в класс "
"``_compression.DecompressReader``. . Распаковка bz2 теперь выполняется в "
"1,09x ~ 1,17x быстрее, распаковка lzma в 1,20x ~ 1,32x быстрее, ``GzipFile."
"read(-1)`` в 1,11x ~ 1,18x быстрее. (Предоставлено Ма Лин, рецензия Грегори "
"П. Смита, в :issue:`41486`)"

#: ../../whatsnew/3.10.rst:1578
msgid ""
"When using stringized annotations, annotations dicts for functions are no "
"longer created when the function is created.  Instead, they are stored as a "
"tuple of strings, and the function object lazily converts this into the "
"annotations dict on demand.  This optimization cuts the CPU time needed to "
"define an annotated function by half. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"При использовании строковых аннотаций словари аннотаций для функций больше "
"не создаются при создании функции. Вместо этого они сохраняются в виде "
"кортежа строк, и объект функции лениво преобразует его в аннотации по "
"требованию. Эта оптимизация вдвое сокращает время ЦП, необходимое для "
"определения аннотированной функции. (Предоставлено Юрием Карабасом и Инадой "
"Наоки в :issue:`42202`.)"

#: ../../whatsnew/3.10.rst:1585
msgid ""
"Substring search functions such as ``str1 in str2`` and ``str2.find(str1)`` "
"now sometimes use Crochemore & Perrin's \"Two-Way\" string searching "
"algorithm to avoid quadratic behavior on long strings.  (Contributed by "
"Dennis Sweeney in :issue:`41972`)"
msgstr ""
"Функции поиска подстроки, такие как ``str1 в str2`` и ``str2.find(str1)``, "
"теперь иногда используют \"двусторонний\" алгоритм поиска строк Crochemore & "
"Perrin, чтобы избежать квадратичного поведения в длинных строках. "
"(Предоставлено Деннисом Суини в :issue:`41972`)"

#: ../../whatsnew/3.10.rst:1590
msgid ""
"Add micro-optimizations to ``_PyType_Lookup()`` to improve type attribute "
"cache lookup performance in the common case of cache hits. This makes the "
"interpreter 1.04 times faster on average. (Contributed by Dino Viehland in :"
"issue:`43452`.)"
msgstr ""
"Добавьте микрооптимизации в ``_PyType_Lookup()``, чтобы улучшить "
"производительность поиска в кэше атрибутов типа в частых случаях попадания в "
"кэш. Это делает интерпретатор в среднем в 1,04 раза быстрее. (Предоставлено "
"Дино Виландом в :issue:`43452`.)"

#: ../../whatsnew/3.10.rst:1594
msgid ""
"The following built-in functions now support the faster :pep:`590` "
"vectorcall calling convention: :func:`map`, :func:`filter`, :func:"
"`reversed`, :func:`bool` and :func:`float`. (Contributed by Donghee Na and "
"Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:"
"`41873` and :issue:`41870`.)"
msgstr ""
"Следующие встроенные функции теперь поддерживают более быстрое соглашение о "
"вызовах векторных вызовов :pep:`590`: :func:`map`, :func:`filter`, :func:"
"`reversed`, :func:`bool` и :func :`плавать`. (Предоставлено Донхи На и "
"Джеруном Демейером в :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:"
"`41873` и :issue:`41870`.)"

#: ../../whatsnew/3.10.rst:1598
msgid ""
":class:`~bz2.BZ2File` performance is improved by removing internal "
"``RLock``. This makes :class:`!BZ2File` thread unsafe in the face of "
"multiple simultaneous readers or writers, just like its equivalent classes "
"in :mod:`gzip` and :mod:`lzma` have always been.  (Contributed by Inada "
"Naoki in :issue:`43785`.)"
msgstr ""
":class:`~bz2.BZ2File` Производительность улучшена за счёт удаления "
"внутреннего ``RLock``. Это делает поток :class:`!BZ2File` небезопасным перед "
"лицом нескольких одновременных операций чтения или записи, точно так же, как "
"всегда были его эквивалентные классы в :mod:`gzip` и :mod:`lzma`. "
"(Предоставлено Инадой Наоки в :issue:`43785`.)"

#: ../../whatsnew/3.10.rst:1606 ../../whatsnew/3.10.rst:2212
msgid "Deprecated"
msgstr "Устарел"

#: ../../whatsnew/3.10.rst:1608
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  Starting in this release, a "
"deprecation warning is raised if the numeric literal is immediately followed "
"by one of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:"
"`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In future releases it "
"will be changed to syntax warning, and finally to syntax error. (Contributed "
"by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"В настоящее время Python принимает числовые литералы, за которыми сразу "
"следуют ключевые слова, например ``0in x``, ``1or x``, ``0if 1else 2``. Это "
"позволяет использовать запутанные и неоднозначные выражения, такие как "
"``[0x1for x in y]`` (которые можно интерпретировать как ``[0x1 for x in y]`` "
"или ``[0x1f or x in y]``). Начиная с этого выпуска, выдается предупреждение "
"об устаревании, если за числовым литералом сразу следует одно из ключевых "
"слов :keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, : "
"ключевое слово:`in`, :keyword:`is` и :keyword:`or`. В будущих выпусках оно "
"будет изменено на синтаксическое предупреждение и, наконец, на "
"синтаксическую ошибку. (Предоставлено Сергеем Сторчакой в ​​:issue:`43833`.)"

#: ../../whatsnew/3.10.rst:1619
msgid ""
"Starting in this release, there will be a concerted effort to begin cleaning "
"up old import semantics that were kept for Python 2.7 compatibility. "
"Specifically, :meth:`!find_loader`/:meth:`!find_module` (superseded by :meth:"
"`~importlib.abc.MetaPathFinder.find_spec`), :meth:`~importlib.abc.Loader."
"load_module` (superseded by :meth:`~importlib.abc.Loader.exec_module`), :"
"meth:`!module_repr` (which the import system takes care of for you), the "
"``__package__`` attribute (superseded by ``__spec__.parent``), the "
"``__loader__`` attribute (superseded by ``__spec__.loader``), and the "
"``__cached__`` attribute (superseded by ``__spec__.cached``) will slowly be "
"removed (as well as other classes and methods in :mod:`importlib`). :exc:"
"`ImportWarning` and/or :exc:`DeprecationWarning` will be raised as "
"appropriate to help identify code which needs updating during this "
"transition."
msgstr ""
"Начиная с этого выпуска, будут предприняты согласованные усилия по очистке "
"старой семантики импорта, которая была сохранена для совместимости с Python "
"2.7. В частности, :meth:`!find_loader`/:meth:`!find_module` (заменён на :"
"meth:`~importlib.abc.MetaPathFinder.find_spec`), :meth:`~importlib.abc."
"Loader.load_module` (заменён с помощью :meth:`~importlib.abc.Loader."
"exec_module`), :meth:`!module_repr` (о котором за вас позаботится система "
"импорта), атрибут ``__package__`` (заменён ``__spec__.parent ``), атрибут "
"``__loader__`` (замененный на ``__spec__.loader``) и атрибут ``__cached__`` "
"(замененный на ``__spec__.cached``) будут медленно удаляться (а также другие "
"классы и методы в :mod:`importlib`). :exc:`ImportWarning` и/или :exc:"
"`DeprecationWarning` будут вызываться по мере необходимости, чтобы помочь "
"определить код, который требует обновления во время этого перехода."

#: ../../whatsnew/3.10.rst:1636
msgid ""
"The entire ``distutils`` namespace is deprecated, to be removed in Python "
"3.12. Refer to the :ref:`module changes <distutils-deprecated>` section for "
"more information."
msgstr ""
"Все пространство имен distutils устарело и будет удалено в Python 3.12. "
"Обратитесь к разделу :ref:`изменения модуля <distutils-deprecated>` для "
"получения дополнительной информации."

#: ../../whatsnew/3.10.rst:1640
msgid ""
"Non-integer arguments to :func:`random.randrange` are deprecated. The :exc:"
"`ValueError` is deprecated in favor of a :exc:`TypeError`. (Contributed by "
"Serhiy Storchaka and Raymond Hettinger in :issue:`37319`.)"
msgstr ""
"Нецелочисленные аргументы функции :func:`random.randrange` устарели. :exc:"
"`ValueError` устарел в пользу :exc:`TypeError`. (Предоставлено Сергеем "
"Сторчакой и Раймондом Хеттингером в :issue:`37319`.)"

#: ../../whatsnew/3.10.rst:1644
msgid ""
"The various ``load_module()`` methods of :mod:`importlib` have been "
"documented as deprecated since Python 3.6, but will now also trigger a :exc:"
"`DeprecationWarning`. Use :meth:`~importlib.abc.Loader.exec_module` instead. "
"(Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"Различные методы ``load_module()`` :mod:`importlib` были задокументированы "
"как устаревшие, начиная с Python 3.6, но теперь также будут вызывать :exc:"
"`DeprecationWarning`. Вместо этого используйте :meth:`~importlib.abc.Loader."
"exec_module`. (Предоставлено Бреттом Кэнноном в :issue:`26131`.)"

#: ../../whatsnew/3.10.rst:1650
msgid ""
":meth:`!zimport.zipimporter.load_module` has been deprecated in preference "
"for :meth:`~zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon "
"in :issue:`26131`.)"
msgstr ""
":meth:`!zimport.zipimporter.load_module` устарел в пользу :meth:`~zipimport."
"zipimporter.exec_module`. (Предоставлено Бреттом Кэнноном в :issue:`26131`.)"

#: ../../whatsnew/3.10.rst:1654
msgid ""
"The use of :meth:`~importlib.abc.Loader.load_module` by the import system "
"now triggers an :exc:`ImportWarning` as :meth:`~importlib.abc.Loader."
"exec_module` is preferred. (Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"Использование :meth:`~importlib.abc.Loader.load_module` системой импорта "
"теперь вызывает :exc:`ImportWarning`, поскольку :meth:`~importlib.abc.Loader."
"exec_module` является предпочтительным. (Предоставлено Бреттом Кэнноном в :"
"issue:`26131`.)"

#: ../../whatsnew/3.10.rst:1659
msgid ""
"The use of :meth:`!importlib.abc.MetaPathFinder.find_module` and :meth:`!"
"importlib.abc.PathEntryFinder.find_module` by the import system now trigger "
"an :exc:`ImportWarning` as :meth:`importlib.abc.MetaPathFinder.find_spec` "
"and :meth:`importlib.abc.PathEntryFinder.find_spec` are preferred, "
"respectively. You can use :func:`importlib.util.spec_from_loader` to help in "
"porting. (Contributed by Brett Cannon in :issue:`42134`.)"
msgstr ""
"Использование :meth:`!importlib.abc.MetaPathFinder.find_module` и :meth:`!"
"importlib.abc.PathEntryFinder.find_module` системой импорта теперь вызывает :"
"exc:`ImportWarning` как :meth:`importlib. abc.MetaPathFinder.find_spec` и :"
"meth:`importlib.abc.PathEntryFinder.find_spec` являются предпочтительными "
"соответственно. Вы можете использовать :func:`importlib.util."
"spec_from_loader` для помощи в портировании. (Предоставлено Бреттом Кэнноном "
"в :issue:`42134`.)"

#: ../../whatsnew/3.10.rst:1668
msgid ""
"The use of :meth:`!importlib.abc.PathEntryFinder.find_loader` by the import "
"system now triggers an :exc:`ImportWarning` as :meth:`importlib.abc."
"PathEntryFinder.find_spec` is preferred. You can use :func:`importlib.util."
"spec_from_loader` to help in porting. (Contributed by Brett Cannon in :issue:"
"`43672`.)"
msgstr ""
"Использование :meth:`!importlib.abc.PathEntryFinder.find_loader` системой "
"импорта теперь вызывает :exc:`ImportWarning`, поскольку :meth:`importlib.abc."
"PathEntryFinder.find_spec` является предпочтительным. Вы можете "
"использовать :func:`importlib.util.spec_from_loader` для помощи в "
"портировании. (Предоставлено Бреттом Кэнноном в :issue:`43672`.)"

#: ../../whatsnew/3.10.rst:1674
msgid ""
"The various implementations of :meth:`!importlib.abc.MetaPathFinder."
"find_module` ( :meth:`!importlib.machinery.BuiltinImporter.find_module`, :"
"meth:`!importlib.machinery.FrozenImporter.find_module`, :meth:`!importlib."
"machinery.WindowsRegistryFinder.find_module`, :meth:`!importlib.machinery."
"PathFinder.find_module`, :meth:`!importlib.abc.MetaPathFinder."
"find_module` ), :meth:`!importlib.abc.PathEntryFinder.find_module` ( :meth:`!"
"importlib.machinery.FileFinder.find_module` ), and :meth:`!importlib.abc."
"PathEntryFinder.find_loader` ( :meth:`!importlib.machinery.FileFinder."
"find_loader` ) now raise :exc:`DeprecationWarning` and are slated for "
"removal in Python 3.12 (previously they were documented as deprecated in "
"Python 3.4). (Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
"Различные реализации :meth:`!importlib.abc.MetaPathFinder.find_module` ( :"
"meth:`!importlib.machinery.BuiltinImporter.find_module`, :meth:`!importlib."
"machinery.FrozenImporter.find_module`, :meth:` !importlib.machinery."
"WindowsRegistryFinder.find_module`, :meth:`!importlib.machinery.PathFinder."
"find_module`, :meth:`!importlib.abc.MetaPathFinder.find_module` ), :meth:`!"
"importlib.abc.PathEntryFinder`, :meth:`!importlib.abc.PathEntryFinder. "
"find_module` ( :meth:`!importlib.machinery.FileFinder.find_module` ) и :meth:"
"`!importlib.abc.PathEntryFinder.find_loader` ( :meth:`!importlib.machinery."
"FileFinder.find_loader` ) теперь вызывают: exc:`DeprecationWarning` и "
"планируется удалить в Python 3.12 (ранее они были задокументированы как "
"устаревшие в Python 3.4). (Предоставлено Бреттом Кэнноном в :issue:`42135`.)"

#: ../../whatsnew/3.10.rst:1689
msgid ""
":class:`!importlib.abc.Finder` is deprecated (including its sole method, :"
"meth:`!find_module`). Both :class:`importlib.abc.MetaPathFinder` and :class:"
"`importlib.abc.PathEntryFinder` no longer inherit from the class. Users "
"should inherit from one of these two classes as appropriate instead. "
"(Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":class:`!importlib.abc.Finder` устарел (включая его единственный метод :meth:"
"`!find_module`). Оба :class:`importlib.abc.MetaPathFinder` и :class:"
"`importlib.abc.PathEntryFinder` больше не наследуются от класса. Вместо "
"этого пользователи должны наследовать один из этих двух классов, если это "
"необходимо. (Предоставлено Бреттом Кэнноном в :issue:`42135`.)"

#: ../../whatsnew/3.10.rst:1696
msgid ""
"The deprecations of :mod:`!imp`, :func:`!importlib.find_loader`, :func:`!"
"importlib.util.set_package_wrapper`, :func:`!importlib.util."
"set_loader_wrapper`, :func:`!importlib.util.module_for_loader`, :class:`!"
"pkgutil.ImpImporter`, and :class:`!pkgutil.ImpLoader` have all been updated "
"to list Python 3.12 as the slated version of removal (they began raising :"
"exc:`DeprecationWarning` in previous versions of Python). (Contributed by "
"Brett Cannon in :issue:`43720`.)"
msgstr ""
"Устаревшие :mod:`!imp`, :func:`!importlib.find_loader`, :func:`!importlib."
"util.set_package_wrapper`, :func:`!importlib.util.set_loader_wrapper`, :func:"
"`! importlib.util.module_for_loader`, :class:`!pkgutil.ImpImporter` и :class:"
"`!pkgutil.ImpLoader` были обновлены, чтобы указать Python 3.12 в качестве "
"запланированной версии удаления (они начали поднимать :exc:"
"`DeprecationWarning ` в предыдущих версиях Python). (Предоставлено Бреттом "
"Кэнноном в :issue:`43720`.)"

#: ../../whatsnew/3.10.rst:1706
msgid ""
"The import system now uses the ``__spec__`` attribute on modules before "
"falling back on :meth:`!module_repr` for a module's ``__repr__()`` method. "
"Removal of the use of ``module_repr()`` is scheduled for Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42137`.)"
msgstr ""
"Система импорта теперь использует атрибут ``__spec__`` для модулей, прежде "
"чем использовать :meth:`!module_repr` для метода ``__repr__()`` модуля. "
"Удаление использования ``module_repr()`` запланировано в Python 3.12. "
"(Предоставлено Бреттом Кэнноном в :issue:`42137`.)"

#: ../../whatsnew/3.10.rst:1712
msgid ""
":meth:`!importlib.abc.Loader.module_repr`, :meth:`!importlib.machinery."
"FrozenLoader.module_repr`, and :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` are deprecated and slated for removal in Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42136`.)"
msgstr ""
":meth:`!importlib.abc.Loader.module_repr`, :meth:`!importlib.machinery."
"FrozenLoader.module_repr` и :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` устарели и планируется удалить в Python 3.12. (Предоставлено "
"Бреттом Кэнноном в :issue:`42136`.)"

#: ../../whatsnew/3.10.rst:1718
msgid ""
"``sqlite3.OptimizedUnicode`` has been undocumented and obsolete since Python "
"3.3, when it was made an alias to :class:`str`.  It is now deprecated, "
"scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in :"
"issue:`42264`.)"
msgstr ""
"``sqlite3.OptimizedUnicode`` не документирован и устарел начиная с Python "
"3.3, когда он стал псевдонимом :class:`str`. Сейчас он устарел, и его "
"планируется удалить в Python 3.12. (Предоставлено Эрлендом Э. Осландом в :"
"issue:`42264`.)"

#: ../../whatsnew/3.10.rst:1723
msgid ""
"The undocumented built-in function ``sqlite3.enable_shared_cache`` is now "
"deprecated, scheduled for removal in Python 3.12.  Its use is strongly "
"discouraged by the SQLite3 documentation.  See `the SQLite3 docs <https://"
"sqlite.org/c3ref/enable_shared_cache.html>`_ for more details. If a shared "
"cache must be used, open the database in URI mode using the ``cache=shared`` "
"query parameter. (Contributed by Erlend E. Aasland in :issue:`24464`.)"
msgstr ""
"Недокументированная встроенная функция sqlite3.enable_shared_cache объявлена ​​"
"устаревшей, ее удаление запланировано в Python 3.12. Его использование "
"категорически не рекомендуется в документации SQLite3. Дополнительную "
"информацию см. в документации по SQLite3 <https://sqlite.org/c3ref/"
"enable_shared_cache.html>`_. Если необходимо использовать общий кеш, "
"откройте базу данных в режиме URI, используя параметр запроса "
"``cache=shared``. (Предоставлено Эрлендом Э. Осландом в :issue:`24464`.)"

#: ../../whatsnew/3.10.rst:1731
msgid "The following ``threading`` methods are now deprecated:"
msgstr "Следующие методы потоковой обработки объявлены устаревшими:"

#: ../../whatsnew/3.10.rst:1733
msgid "``threading.currentThread`` => :func:`threading.current_thread`"
msgstr "``threading.currentThread`` => :func:`threading.current_thread`"

#: ../../whatsnew/3.10.rst:1735
msgid "``threading.activeCount`` => :func:`threading.active_count`"
msgstr "``threading.activeCount`` => :func:`threading.active_count`"

#: ../../whatsnew/3.10.rst:1737
msgid ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"
msgstr ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"

#: ../../whatsnew/3.10.rst:1740
msgid "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"
msgstr "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"

#: ../../whatsnew/3.10.rst:1742
msgid "``threading.Thread.setName`` => :attr:`threading.Thread.name`"
msgstr "``threading.Thread.setName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1744
msgid "``threading.thread.getName`` => :attr:`threading.Thread.name`"
msgstr "``threading.thread.getName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1746
msgid "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1748
msgid "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1750
msgid "(Contributed by Jelle Zijlstra in :gh:`87889`.)"
msgstr "(Предоставлено Джелле Зийлстра в :gh:`87889`.)"

#: ../../whatsnew/3.10.rst:1752
msgid ""
":meth:`!pathlib.Path.link_to` is deprecated and slated for removal in Python "
"3.12. Use :meth:`pathlib.Path.hardlink_to` instead. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
":meth:`!pathlib.Path.link_to` устарел и планируется удалить в Python 3.12. "
"Вместо этого используйте :meth:`pathlib.Path.hardlink_to`. (Предоставлено "
"Барни Гейлом в :issue:`39950`.)"

#: ../../whatsnew/3.10.rst:1756
msgid ""
"``cgi.log()`` is deprecated and slated for removal in Python 3.12. "
"(Contributed by Inada Naoki in :issue:`41139`.)"
msgstr ""
"``cgi.log()`` устарел и его планируется удалить в Python 3.12. "
"(Предоставлено Инадой Наоки в :issue:`41139`.)"

#: ../../whatsnew/3.10.rst:1759
msgid ""
"The following :mod:`ssl` features have been deprecated since Python 3.6, "
"Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:"
msgstr ""
"Следующие функции :mod:`ssl` устарели, начиная с Python 3.6, Python 3.7 или "
"OpenSSL 1.1.0, и будут удалены в версии 3.11:"

#: ../../whatsnew/3.10.rst:1762
msgid ""
":data:`!OP_NO_SSLv2`, :data:`!OP_NO_SSLv3`, :data:`!OP_NO_TLSv1`, :data:`!"
"OP_NO_TLSv1_1`, :data:`!OP_NO_TLSv1_2`, and :data:`!OP_NO_TLSv1_3` are "
"replaced by :attr:`~ssl.SSLContext.minimum_version` and :attr:`~ssl."
"SSLContext.maximum_version`."
msgstr ""
":data:`!OP_NO_SSLv2`, :data:`!OP_NO_SSLv3`, :data:`!OP_NO_TLSv1`, :data:`!"
"OP_NO_TLSv1_1`, :data:`!OP_NO_TLSv1_2` и :data:`!OP_NO_TLSv1_3` заменены с "
"помощью :attr:`~ssl.SSLContext.minimum_version` и :attr:`~ssl.SSLContext."
"maximum_version`."

#: ../../whatsnew/3.10.rst:1768
msgid ""
":data:`!PROTOCOL_SSLv2`, :data:`!PROTOCOL_SSLv3`, :data:`!PROTOCOL_SSLv23`, :"
"data:`!PROTOCOL_TLSv1`, :data:`!PROTOCOL_TLSv1_1`, :data:`!"
"PROTOCOL_TLSv1_2`, and :const:`!PROTOCOL_TLS` are deprecated in favor of :"
"const:`~ssl.PROTOCOL_TLS_CLIENT` and :const:`~ssl.PROTOCOL_TLS_SERVER`"
msgstr ""
":data:`!PROTOCOL_SSLv2`, :data:`!PROTOCOL_SSLv3`, :data:`!PROTOCOL_SSLv2`, :"
"data:`!PROTOCOL_TLSv1`, :data:`!PROTOCOL_TLSv1_1`, :data:`!"
"PROTOCOL_TLSv1_2`, и : const:`!PROTOCOL_TLS` устарели в пользу :const:`~ssl."
"PROTOCOL_TLS_CLIENT` и :const:`~ssl.PROTOCOL_TLS_SERVER`"

#: ../../whatsnew/3.10.rst:1774
msgid ":func:`!wrap_socket` is replaced by :meth:`ssl.SSLContext.wrap_socket`"
msgstr ":func:`!wrap_socket` заменяется на :meth:`ssl.SSLContext.wrap_socket`"

#: ../../whatsnew/3.10.rst:1776
msgid ":func:`!match_hostname`"
msgstr ":func:`!match_hostname`"

#: ../../whatsnew/3.10.rst:1778
msgid ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"
msgstr ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"

#: ../../whatsnew/3.10.rst:1780
msgid ""
"NPN features like :meth:`ssl.SSLSocket.selected_npn_protocol` and :meth:`ssl."
"SSLContext.set_npn_protocols` are replaced by ALPN."
msgstr ""
"Функции NPN, такие как :meth:`ssl.SSLSocket.selected_npn_protocol` и :meth:"
"`ssl.SSLContext.set_npn_protocols`, заменяются ALPN."

#: ../../whatsnew/3.10.rst:1783
msgid ""
"The threading debug (:envvar:`!PYTHONTHREADDEBUG` environment variable) is "
"deprecated in Python 3.10 and will be removed in Python 3.12. This feature "
"requires a :ref:`debug build of Python <debug-build>`. (Contributed by "
"Victor Stinner in :issue:`44584`.)"
msgstr ""
"Отладка потоков (:envvar:`!PYTHONTHREADDEBUG` переменная среды) устарела в "
"Python 3.10 и будет удалена в Python 3.12. Для этой функции требуется :ref:"
"`отладочная сборка Python <debug-build>`. (Предоставлено Виктором Стиннером "
"в :issue:`44584`.)"

#: ../../whatsnew/3.10.rst:1788
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules will be removed in a future "
"version of Python.  Anything belonging to these submodules should be "
"imported directly from :mod:`typing` instead. (Contributed by Sebastian "
"Rittau in :issue:`38291`.)"
msgstr ""
"Импорт из подмодулей ``typing.io`` и ``typing.re`` теперь будет выдавать :"
"exc:`DeprecationWarning`. Эти подмодули будут удалены в будущей версии "
"Python. Вместо этого все, что принадлежит этим подмодулям, должно быть "
"импортировано непосредственно из :mod:`typing`. (Предоставлено Себастьяном "
"Риттау в :issue:`38291`.)"

#: ../../whatsnew/3.10.rst:1797 ../../whatsnew/3.10.rst:2220
msgid "Removed"
msgstr "Удалено"

#: ../../whatsnew/3.10.rst:1799
msgid ""
"Removed special methods ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` and "
"``__rdivmod__`` of the :class:`complex` class.  They always raised a :exc:"
"`TypeError`. (Contributed by Serhiy Storchaka in :issue:`41974`.)"
msgstr ""
"Удалены специальные методы ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` и "
"``__rdivmod__`` класса :class:`complex`. Они всегда выдавали :exc:"
"`TypeError`. (Предоставлено Сергеем Сторчакой в ​​:issue:`41974`.)"

#: ../../whatsnew/3.10.rst:1805
msgid ""
"The ``ParserBase.error()`` method from the private and undocumented "
"``_markupbase`` module has been removed.  :class:`html.parser.HTMLParser` is "
"the only subclass of ``ParserBase`` and its ``error()`` implementation was "
"already removed in Python 3.5. (Contributed by Berker Peksag in :issue:"
"`31844`.)"
msgstr ""
"Метод ParserBase.error() из закрытого и недокументированного модуля "
"_markupbase был удален. :class:`html.parser.HTMLParser` — единственный "
"подкласс ``ParserBase``, и его реализация ``error()`` уже была удалена в "
"Python 3.5. (Предоставлено Беркером Пексагом в :issue:`31844`.)"

#: ../../whatsnew/3.10.rst:1811
msgid ""
"Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an internal "
"PyCapsule object. The related private ``_PyUnicode_Name_CAPI`` structure was "
"moved to the internal C API. (Contributed by Victor Stinner in :issue:"
"`42157`.)"
msgstr ""
"Удален атрибут unicodedata.ucnhash_CAPI, который был внутренним объектом "
"PyCapsule. Соответствующая частная структура ``_PyUnicode_Name_CAPI`` была "
"перенесена во внутренний C API. (Предоставлено Виктором Стиннером в :issue:"
"`42157`.)"

#: ../../whatsnew/3.10.rst:1816
msgid ""
"Removed the ``parser`` module, which was deprecated in 3.9 due to the switch "
"to the new PEG parser, as well as all the C source and header files that "
"were only being used by the old parser, including ``node.h``, ``parser.h``, "
"``graminit.h`` and ``grammar.h``."
msgstr ""
"Удален модуль ``parser``, который устарел в версии 3.9 из-за перехода на "
"новый PEG-парсер, а также все исходные файлы C и файлы заголовков, которые "
"использовались только старым парсером, включая ``node.h'. ``, ``parser.h``, "
"``graminit.h`` и ``grammar.h``."

#: ../../whatsnew/3.10.rst:1821
msgid ""
"Removed the Public C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` and ``PyNode_Compile`` that were "
"deprecated in 3.9 due to the switch to the new PEG parser."
msgstr ""
"Удалены функции Public C API PyParser_SimpleParseStringFlags, "
"PyParser_SimpleParseStringFlagsFilename, PyParser_SimpleParseFileFlags и "
"PyNode_Compile, которые устарели в версии 3.9 из-за перехода на новый парсер "
"PEG."

#: ../../whatsnew/3.10.rst:1826
msgid ""
"Removed the ``formatter`` module, which was deprecated in Python 3.4. It is "
"somewhat obsolete, little used, and not tested. It was originally scheduled "
"to be removed in Python 3.6, but such removals were delayed until after "
"Python 2.7 EOL. Existing users should copy whatever classes they use into "
"their code. (Contributed by Donghee Na and Terry J. Reedy in :issue:`42299`.)"
msgstr ""
"Удален модуль форматирования, который устарел в Python 3.4. Он несколько "
"устарел, мало используется и не тестировался. Первоначально его "
"планировалось удалить в Python 3.6, но такое удаление было отложено до "
"окончания выпуска Python 2.7. Существующим пользователям следует скопировать "
"все используемые ими классы в свой код. (Предоставлено Донхи На и Терри Дж. "
"Риди в :issue:`42299`.)"

#: ../../whatsnew/3.10.rst:1833
msgid ""
"Removed the :c:func:`!PyModule_GetWarningsModule` function that was useless "
"now due to the :mod:`!_warnings` module was converted to a builtin module in "
"2.6. (Contributed by Hai Shi in :issue:`42599`.)"
msgstr ""
"Удалена функция :c:func:`!PyModule_GetWarningsModule`, которая теперь была "
"бесполезна, поскольку модуль :mod:`!_warnings` был преобразован во "
"встроенный модуль в версии 2.6. (Предоставлено Хай Ши в :issue:`42599`.)"

#: ../../whatsnew/3.10.rst:1837
msgid ""
"Remove deprecated aliases to :ref:`collections-abstract-base-classes` from "
"the :mod:`collections` module. (Contributed by Victor Stinner in :issue:"
"`37324`.)"
msgstr ""
"Удалите устаревшие псевдонимы :ref:`collections-abstract-base-classes` из "
"модуля :mod:`collections`. (Предоставлено Виктором Стиннером в :issue:"
"`37324`.)"

#: ../../whatsnew/3.10.rst:1841
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8.  The motivation behind this change is multifold:"
msgstr ""
"Параметр ``loop`` был удален из большей части :doc:`высокоуровневого API <../"
"library/asyncio-api-index>` :mod:`asyncio`\\ после его устаревания в Python "
"3.8. Мотивация этого изменения множественна:"

#: ../../whatsnew/3.10.rst:1845
msgid "This simplifies the high-level API."
msgstr "Это упрощает API высокого уровня."

#: ../../whatsnew/3.10.rst:1846
msgid ""
"The functions in the high-level API have been implicitly getting the current "
"thread's running event loop since Python 3.7.  There isn't a need to pass "
"the event loop to the API in most normal use cases."
msgstr ""
"Функции в API высокого уровня неявно получают цикл событий текущего потока, "
"начиная с Python 3.7. В большинстве обычных случаев использования нет "
"необходимости передавать цикл событий в API."

#: ../../whatsnew/3.10.rst:1849
msgid ""
"Event loop passing is error-prone especially when dealing with loops running "
"in different threads."
msgstr ""
"Передача цикла событий подвержена ошибкам, особенно при работе с циклами, "
"выполняемыми в разных потоках."

#: ../../whatsnew/3.10.rst:1852
msgid ""
"Note that the low-level API will still accept ``loop``. See :ref:`changes-"
"python-api` for examples of how to replace existing code."
msgstr ""
"Обратите внимание, что низкоуровневый API по-прежнему будет принимать цикл. "
"См. :ref:`changes-python-api` для примеров замены существующего кода."

#: ../../whatsnew/3.10.rst:1855 ../../whatsnew/3.10.rst:1927
msgid ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"
msgstr ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"

#: ../../whatsnew/3.10.rst:1860 ../../whatsnew/3.10.rst:2147
msgid "Porting to Python 3.10"
msgstr "Портирование на Python 3.10"

#: ../../whatsnew/3.10.rst:1862
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок, которые могут потребовать внесения изменений в ваш код."

#: ../../whatsnew/3.10.rst:1867
msgid "Changes in the Python syntax"
msgstr "Изменения в синтаксисе Python"

#: ../../whatsnew/3.10.rst:1869
msgid ""
"Deprecation warning is now emitted when compiling previously valid syntax if "
"the numeric literal is immediately followed by a keyword (like in ``0in "
"x``). In future releases it will be changed to syntax warning, and finally "
"to a syntax error.  To get rid of the warning and make the code compatible "
"with future releases just add a space between the numeric literal and the "
"following keyword. (Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"Предупреждение об устаревании теперь выдается при компиляции ранее "
"допустимого синтаксиса, если за числовым литералом сразу следует ключевое "
"слово (например, в ``0in x``). В будущих выпусках оно будет изменено на "
"синтаксическое предупреждение и, наконец, на синтаксическую ошибку. Чтобы "
"избавиться от предупреждения и сделать код совместимым с будущими выпусками, "
"просто добавьте пробел между числовым литералом и следующим ключевым словом. "
"(Предоставлено Сергеем Сторчакой в ​​:issue:`43833`.)"

#: ../../whatsnew/3.10.rst:1880
msgid "Changes in the Python API"
msgstr "Изменения в API Python"

#: ../../whatsnew/3.10.rst:1882
msgid ""
"The *etype* parameters of the :func:`~traceback.format_exception`, :func:"
"`~traceback.format_exception_only`, and :func:`~traceback.print_exception` "
"functions in the :mod:`traceback` module have been renamed to *exc*. "
"(Contributed by Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
"Параметры *etype* функций :func:`~traceback.format_Exception`, :func:"
"`~traceback.format_Exception_only` и :func:`~traceback.print_Exception` в "
"модуле :mod:`traceback` были переименованы. до *отлично*. (Предоставлено "
"Закери Шпитцем и Маттиасом Бюссонье в :issue:`26389`.)"

#: ../../whatsnew/3.10.rst:1888
msgid ""
":mod:`atexit`: At Python exit, if a callback registered with :func:`atexit."
"register` fails, its exception is now logged. Previously, only some "
"exceptions were logged, and the last exception was always silently ignored. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit`: При выходе Python, если обратный вызов, зарегистрированный с "
"помощью :func:`atexit.register`, завершается неудачно, его исключение теперь "
"регистрируется. Раньше регистрировались только некоторые исключения, а "
"последнее исключение всегда молча игнорировалось. (Предоставлено Виктором "
"Стиннером в :issue:`42639`.)"

#: ../../whatsnew/3.10.rst:1894
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  Code which "
"accesses the arguments via :func:`typing.get_args` or ``__args__`` need to "
"account for this change.  Furthermore, :exc:`TypeError` may be raised for "
"invalid forms of parameterizing :class:`collections.abc.Callable` which may "
"have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":class:`collections.abc.Callable` универсальный теперь выравнивает параметры "
"типа, аналогично тому, что сейчас делает :data:`typing.Callable`. Это "
"означает, что ``collections.abc.Callable[[int, str], str]`` будет иметь "
"``__args__`` из ``(int, str, str)``; раньше это было ``([int, str], str)``. "
"Код, который обращается к аргументам через :func:`typing.get_args` или "
"``__args__``, должен учитывать это изменение. Более того, :exc:`TypeError` "
"может быть вызвано для недопустимых форм параметризации :class:`collections."
"abc.Callable`, которые в Python 3.9 могли передаваться автоматически. "
"(Предоставлено Кеном Джином в :issue:`42195`.)"

#: ../../whatsnew/3.10.rst:1904
msgid ""
":meth:`socket.htons` and :meth:`socket.ntohs` now raise :exc:`OverflowError` "
"instead of :exc:`DeprecationWarning` if the given parameter will not fit in "
"a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in :issue:"
"`42393`.)"
msgstr ""
":meth:`socket.htons` и :meth:`socket.ntohs` теперь вызывают :exc:"
"`OverflowError` вместо :exc:`DeprecationWarning`, если данный параметр не "
"помещается в 16-битное целое число без знака. (Предоставлено Эрлендом Э. "
"Осландом в :issue:`42393`.)"

#: ../../whatsnew/3.10.rst:1909
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8."
msgstr ""
"Параметр ``loop`` был удален из большей части :doc:`высокоуровневого API <../"
"library/asyncio-api-index>` :mod:`asyncio`\\ после его устаревания в Python "
"3.8."

#: ../../whatsnew/3.10.rst:1913
msgid "A coroutine that currently looks like this::"
msgstr "Сопрограмма, которая на данный момент выглядит так::"

#: ../../whatsnew/3.10.rst:1915
msgid ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"
msgstr ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"

#: ../../whatsnew/3.10.rst:1918
msgid "Should be replaced with this::"
msgstr "Следует заменить на это:"

#: ../../whatsnew/3.10.rst:1920
msgid ""
"async def foo():\n"
"    await asyncio.sleep(1)"
msgstr ""
"async def foo():\n"
"    await asyncio.sleep(1)"

#: ../../whatsnew/3.10.rst:1923
msgid ""
"If ``foo()`` was specifically designed *not* to run in the current thread's "
"running event loop (e.g. running in another thread's event loop), consider "
"using :func:`asyncio.run_coroutine_threadsafe` instead."
msgstr ""
"Если ``foo()`` был специально разработан *не* для запуска в цикле событий "
"текущего потока (например, в цикле событий другого потока), рассмотрите "
"возможность использования вместо этого :func:`asyncio."
"run_coroutine_threadsafe`."

#: ../../whatsnew/3.10.rst:1930
msgid ""
"The :data:`types.FunctionType` constructor now inherits the current builtins "
"if the *globals* dictionary has no ``\"__builtins__\"`` key, rather than "
"using ``{\"None\": None}`` as builtins: same behavior as :func:`eval` and :"
"func:`exec` functions.  Defining a function with ``def function(...): ...`` "
"in Python is not affected, globals cannot be overridden with this syntax: it "
"also inherits the current builtins. (Contributed by Victor Stinner in :issue:"
"`42990`.)"
msgstr ""
"Конструктор :data:`types.FunctionType` теперь наследует текущие встроенные "
"функции, если в словаре *globals* нет ключа ``\"__builtins__\"``, вместо "
"использования ``{\"None\": None}`` в качестве встроенных команд: то же "
"самое. поведение как функции :func:`eval` и :func:`exec`. Определение "
"функции с помощью ``def function(...): ...`` в Python не затрагивается, "
"глобальные переменные не могут быть переопределены с помощью этого "
"синтаксиса: он также наследует текущие встроенные функции. (Предоставлено "
"Виктором Стиннером в :issue:`42990`.)"

#: ../../whatsnew/3.10.rst:1939
msgid "Changes in the C API"
msgstr "Изменения в C API"

#: ../../whatsnew/3.10.rst:1941
msgid ""
"The C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` and the type used by "
"these functions, ``struct _node``, were removed due to the switch to the new "
"PEG parser."
msgstr ""
"Функции C API PyParser_SimpleParseStringFlags, "
"PyParser_SimpleParseStringFlagsFilename, PyParser_SimpleParseFileFlags, "
"PyNode_Compile и тип, используемый этими функциями, struct _node, были "
"удалены из-за перехода на новый парсер PEG."

#: ../../whatsnew/3.10.rst:1947
msgid ""
"Source should be now be compiled directly to a code object using, for "
"example, :c:func:`Py_CompileString`. The resulting code object can then be "
"evaluated using, for example, :c:func:`PyEval_EvalCode`."
msgstr ""
"Исходный код теперь должен быть скомпилирован непосредственно в объект кода, "
"например, с помощью :c:func:`Py_CompileString`. Полученный объект кода затем "
"можно оценить, используя, например, :c:func:`PyEval_EvalCode`."

#: ../../whatsnew/3.10.rst:1951
msgid "Specifically:"
msgstr "Конкретно:"

#: ../../whatsnew/3.10.rst:1953
msgid ""
"A call to ``PyParser_SimpleParseStringFlags`` followed by ``PyNode_Compile`` "
"can be replaced by calling :c:func:`Py_CompileString`."
msgstr ""
"Вызов PyParser_SimpleParseStringFlags, за которым следует PyNode_Compile, "
"можно заменить вызовом :c:func:`Py_CompileString`."

#: ../../whatsnew/3.10.rst:1956
msgid ""
"There is no direct replacement for ``PyParser_SimpleParseFileFlags``. To "
"compile code from a ``FILE *`` argument, you will need to read the file in C "
"and pass the resulting buffer to :c:func:`Py_CompileString`."
msgstr ""
"Не существует прямой замены PyParser_SimpleParseFileFlags. Чтобы "
"скомпилировать код из аргумента ``FILE *``, вам нужно будет прочитать файл "
"на языке C и передать полученный буфер в :c:func:`Py_CompileString`."

#: ../../whatsnew/3.10.rst:1960
msgid ""
"To compile a file given a ``char *`` filename, explicitly open the file, "
"read it and compile the result. One way to do this is using the :py:mod:`io` "
"module with :c:func:`PyImport_ImportModule`, :c:func:`PyObject_CallMethod`, :"
"c:func:`PyBytes_AsString` and :c:func:`Py_CompileString`, as sketched below. "
"(Declarations and error handling are omitted.) ::"
msgstr ""
"Чтобы скомпилировать файл с именем ``char *``, явно откройте файл, "
"прочитайте его и скомпилируйте результат. Один из способов сделать это — "
"использовать модуль :py:mod:`io` с :c:func:`PyImport_ImportModule`, :c:func:"
"` PyObj ect_CallMethod`, :c:func:`PyBytes_AsString` и :c:func. :"
"`Py_CompileString`, как показано ниже. (Объявления и обработка ошибок "
"опущены.) ::"

#: ../../whatsnew/3.10.rst:1966
msgid ""
"io_module = Import_ImportModule(\"io\");\n"
"fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, "
"\"rb\");\n"
"source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\");\n"
"result = PyObject_CallMethod(fileobject, \"close\", \"\");\n"
"source_buf = PyBytes_AsString(source_bytes_object);\n"
"code = Py_CompileString(source_buf, filename, Py_file_input);"
msgstr ""
"io_module = Import_ImportModule(\"io\"); fileobject = PyObj "
"ect_CallMethod(io_module, «open», «ss», имя файла, «rb»); "
"source_bytes_object = PyObj ect_CallMethod(fileobject, \"read\", \"\"); "
"результат = PyObj ect_CallMethod(fileobject, «закрыть», «»); source_buf = "
"PyBytes_AsString (source_bytes_object); код = Py_CompileString(source_buf, "
"имя_файла, Py_file_input);"

#: ../../whatsnew/3.10.rst:1973
msgid ""
"For ``FrameObject`` objects, the :attr:`~frame.f_lasti` member now "
"represents a wordcode offset instead of a simple offset into the bytecode "
"string. This means that this number needs to be multiplied by 2 to be used "
"with APIs that expect a byte offset instead (like :c:func:`PyCode_Addr2Line` "
"for example). Notice as well that the :attr:`!f_lasti` member of "
"``FrameObject`` objects is not considered stable: please use :c:func:"
"`PyFrame_GetLineNumber` instead."
msgstr ""
"Для объектов FrameObject член :attr:~frame.f_lasti теперь представляет "
"смещение словесного кода вместо простого смещения в строке байт-кода. Это "
"означает, что это число необходимо умножить на 2, чтобы использовать его с "
"API, которые вместо этого ожидают смещения в байтах (например, :c:func:"
"`PyCode_Addr2Line`). Также обратите внимание, что член :attr:`!f_lasti` "
"объектов ``FrameObject`` не считается стабильным: вместо него используйте :c:"
"func:`PyFrame_GetLineNumber`."

#: ../../whatsnew/3.10.rst:1981
msgid "CPython bytecode changes"
msgstr "Изменения в байт-коде CPython"

#: ../../whatsnew/3.10.rst:1983
msgid ""
"The ``MAKE_FUNCTION`` instruction now accepts either a dict or a tuple of "
"strings as the function's annotations. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"Инструкция ``MAKE_FUNCTION`` теперь принимает в качестве аннотации функции "
"либо словарь, либо кортеж строк. (Предоставлено Юрием Карабасом и Инадой "
"Наоки в :issue:`42202`.)"

#: ../../whatsnew/3.10.rst:1988
msgid "Build Changes"
msgstr "Изменения сборки"

#: ../../whatsnew/3.10.rst:1990
msgid ""
":pep:`644`: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no "
"longer supported. (Contributed by Christian Heimes in :issue:`43669`.)"
msgstr ""
":pep:`644`: Python теперь требует OpenSSL 1.1.1 или новее. OpenSSL 1.0.2 "
"больше не поддерживается. (Предоставлено Кристианом Хаймсом в :issue:"
"`43669`.)"

#: ../../whatsnew/3.10.rst:1994
msgid ""
"The C99 functions :c:func:`snprintf` and :c:func:`vsnprintf` are now "
"required to build Python. (Contributed by Victor Stinner in :issue:`36020`.)"
msgstr ""
"Функции C99 :c:func:`snprintf` и :c:func:`vsnprintf` теперь необходимы для "
"сборки Python. (Предоставлено Виктором Стиннером в :issue:`36020`.)"

#: ../../whatsnew/3.10.rst:1998
msgid ""
":mod:`sqlite3` requires SQLite 3.7.15 or higher. (Contributed by Sergey "
"Fedoseev and Erlend E. Aasland in :issue:`40744` and :issue:`40810`.)"
msgstr ""
":mod:`sqlite3` требует SQLite 3.7.15 или выше. (Предоставлено Сергеем "
"Федосеевым и Эрлендом Э. Осландом в :issue:`40744` и :issue:`40810`.)"

#: ../../whatsnew/3.10.rst:2001
msgid ""
"The :mod:`atexit` module must now always be built as a built-in module. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
"Модуль :mod:`atexit` теперь всегда должен создаваться как встроенный модуль. "
"(Предоставлено Виктором Стиннером в :issue:`42639`.)"

#: ../../whatsnew/3.10.rst:2004
msgid ""
"Add :option:`--disable-test-modules` option to the ``configure`` script: "
"don't build nor install test modules. (Contributed by Xavier de Gaye, Thomas "
"Petazzoni and Peixing Xin in :issue:`27640`.)"
msgstr ""
"Добавьте опцию :option:`--disable-test-modules` в скрипт ``configure``: не "
"создавать и не устанавливать тестовые модули. (Предоставлено Ксавье де Гаем, "
"Томасом Петаццони и Пейсин Синь в :issue:`27640`.)"

#: ../../whatsnew/3.10.rst:2008
msgid ""
"Add :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` to the "
"``./configure`` script. If specified, the :mod:`ensurepip` module looks for "
"``setuptools`` and ``pip`` wheel packages in this directory: if both are "
"present, these wheel packages are used instead of ensurepip bundled wheel "
"packages."
msgstr ""
"Добавьте параметр :option:`--with-wheel-pkg-dir=PATH <--with-wheel-pkg-dir>` "
"в скрипт ``./configure``. Если указано, модуль :mod:`ensurepip` ищет пакеты "
"колес ``setuptools`` и ``pip`` в этом каталоге: если оба присутствуют, эти "
"пакеты колес используются вместо пакетов колес, входящих в комплект "
"обеспечения."

#: ../../whatsnew/3.10.rst:2014
msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the ``/usr/"
"share/python-wheels/`` directory and don't install the ``ensurepip."
"_bundled`` package."
msgstr ""
"Некоторые политики упаковки дистрибутива Linux не рекомендуют объединять "
"зависимости. Например, Fedora устанавливает пакеты Wheel в каталог ``/usr/"
"share/python-wheels/`` и не устанавливает пакет ``ensurepip._bundled``."

#: ../../whatsnew/3.10.rst:2019
msgid "(Contributed by Victor Stinner in :issue:`42856`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`42856`.)"

#: ../../whatsnew/3.10.rst:2021
msgid ""
"Add a new :option:`configure --without-static-libpython option <--without-"
"static-libpython>` to not build the ``libpythonMAJOR.MINOR.a`` static "
"library and not install the ``python.o`` object file."
msgstr ""
"Добавьте новую опцию :option:`configure --without-static-libpython <--"
"without-static-libpython>`, чтобы не собирать статическую библиотеку "
"``libpythonMAJOR.MINOR.a`` и не устанавливать ``python.o `` объектный файл."

#: ../../whatsnew/3.10.rst:2025
msgid "(Contributed by Victor Stinner in :issue:`43103`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`43103`.)"

#: ../../whatsnew/3.10.rst:2027
msgid ""
"The ``configure`` script now uses the ``pkg-config`` utility, if available, "
"to detect the location of Tcl/Tk headers and libraries.  As before, those "
"locations can be explicitly specified with the ``--with-tcltk-includes`` and "
"``--with-tcltk-libs`` configuration options. (Contributed by Manolis "
"Stamatogiannakis in :issue:`42603`.)"
msgstr ""
"Сценарий ``configure`` теперь использует утилиту ``pkg-config``, если она "
"доступна, для определения местоположения заголовков и библиотек Tcl/Tk. Как "
"и прежде, эти местоположения могут быть явно указаны с помощью параметров "
"конфигурации ``--with-tcltk-includes`` и ``--with-tcltk-libs``. "
"(Предоставлено Манолисом Стаматояннакисом в :issue:`42603`.)"

#: ../../whatsnew/3.10.rst:2033
msgid ""
"Add :option:`--with-openssl-rpath` option to ``configure`` script. The "
"option simplifies building Python with a custom OpenSSL installation, e.g. "
"``./configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto``. "
"(Contributed by Christian Heimes in :issue:`43466`.)"
msgstr ""
"Добавьте опцию :option:`--with-openssl-rpath` в скрипт ``configure``. Эта "
"опция упрощает сборку Python с помощью специальной установки OpenSSL, "
"например ``./configure --with-openssl=/path/to/openssl --with-openssl-"
"rpath=auto``. (Предоставлено Кристианом Хаймсом в :issue:`43466`.)"

#: ../../whatsnew/3.10.rst:2040
msgid "C API Changes"
msgstr "Изменения в C API"

#: ../../whatsnew/3.10.rst:2043
msgid "PEP 652: Maintaining the Stable ABI"
msgstr "PEP 652: Поддержание стабильного ABI"

#: ../../whatsnew/3.10.rst:2045
msgid ""
"The Stable ABI (Application Binary Interface) for extension modules or "
"embedding Python is now explicitly defined. :ref:`stable` describes C API "
"and ABI stability guarantees along with best practices for using the Stable "
"ABI."
msgstr ""
"Стабильный ABI (двоичный интерфейс приложения) для модулей расширения или "
"внедрения Python теперь явно определен. :ref:`stable` описывает гарантии "
"стабильности C API и ABI, а также лучшие практики использования Stable ABI."

#: ../../whatsnew/3.10.rst:2050
msgid "(Contributed by Petr Viktorin in :pep:`652` and :issue:`43795`.)"
msgstr "(Внесено Петром Викториным в :pep:`652` и :issue:`43795`.)"

#: ../../whatsnew/3.10.rst:2055
msgid ""
"The result of :c:func:`PyNumber_Index` now always has exact type :class:"
"`int`. Previously, the result could have been an instance of a subclass of "
"``int``. (Contributed by Serhiy Storchaka in :issue:`40792`.)"
msgstr ""
"Результат :c:func:`PyNumber_Index` теперь всегда имеет точный тип :class:"
"`int`. Раньше результатом мог быть экземпляр подкласса int. (Размещено "
"Сергеем Сторчакой в ​​:issue:`40792`.)"

#: ../../whatsnew/3.10.rst:2059
msgid ""
"Add a new :c:member:`~PyConfig.orig_argv` member to the :c:type:`PyConfig` "
"structure: the list of the original command line arguments passed to the "
"Python executable. (Contributed by Victor Stinner in :issue:`23427`.)"
msgstr ""
"Добавьте новый член :c:member:`~PyConfig.orig_argv` в структуру :c:type:"
"`PyConfig`: список исходных аргументов командной строки, передаваемых в "
"исполняемый файл Python. (Предоставлено Виктором Стиннером в :issue:`23427`.)"

#: ../../whatsnew/3.10.rst:2064
msgid ""
"The :c:func:`PyDateTime_DATE_GET_TZINFO` and :c:func:"
"`PyDateTime_TIME_GET_TZINFO` macros have been added for accessing the "
"``tzinfo`` attributes of :class:`datetime.datetime` and :class:`datetime."
"time` objects. (Contributed by Zackery Spytz in :issue:`30155`.)"
msgstr ""
"Макросы :c:func:`PyDateTime_DATE_GET_TZINFO` и :c:func:"
"`PyDateTime_TIME_GET_TZINFO` были добавлены для доступа к атрибутам "
"``tzinfo`` объектов :class:`datetime.datetime` и :class:`datetime.time` . "
"(Предоставлено Закери Шпитцем в :issue:`30155`.)"

#: ../../whatsnew/3.10.rst:2070
msgid ""
"Add a :c:func:`PyCodec_Unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"Добавьте функцию :c:func:`PyCodec_Unregister` для отмены регистрации функции "
"поиска кодеков. (Предоставлено Хай Ши в :issue:`41842`.)"

#: ../../whatsnew/3.10.rst:2074
msgid ""
"The :c:func:`PyIter_Send` function was added to allow sending value into "
"iterator without raising ``StopIteration`` exception. (Contributed by "
"Vladimir Matveev in :issue:`41756`.)"
msgstr ""
"Была добавлена ​​функция :c:func:`PyIter_Send`, позволяющая отправлять "
"значение в итератор без возникновения исключения ``StopIteration``. "
"(Добавлен Владимиром Матвеевым в :issue:`41756`.)"

#: ../../whatsnew/3.10.rst:2078
msgid ""
"Add :c:func:`PyUnicode_AsUTF8AndSize` to the limited C API. (Contributed by "
"Alex Gaynor in :issue:`41784`.)"
msgstr ""
"Добавьте :c:func:`PyUnicode_AsUTF8AndSize` в ограниченный C API. "
"(Предоставлено Алексом Гейнором в :issue:`41784`.)"

#: ../../whatsnew/3.10.rst:2081
msgid ""
"Add :c:func:`PyModule_AddObjectRef` function: similar to :c:func:"
"`PyModule_AddObject` but don't steal a reference to the value on success. "
"(Contributed by Victor Stinner in :issue:`1635741`.)"
msgstr ""
"Добавьте функцию :c:func:`PyModule_AddObjectRef`: аналогично :c:func:"
"`PyModule_AddObject`, но не крадите ссылку на значение в случае успеха. "
"(Предоставлено Виктором Стиннером в :issue:`1635741`.)"

#: ../../whatsnew/3.10.rst:2086
msgid ""
"Add :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to increment the "
"reference count of an object and return the object. (Contributed by Victor "
"Stinner in :issue:`42262`.)"
msgstr ""
"Добавьте функции :c:func:`Py_NewRef` и :c:func:`Py_XNewRef` для увеличения "
"счетчика ссылок объекта и возврата объекта. (Предоставлено Виктором "
"Стиннером в :issue:`42262`.)"

#: ../../whatsnew/3.10.rst:2090
msgid ""
"The :c:func:`PyType_FromSpecWithBases` and :c:func:"
"`PyType_FromModuleAndSpec` functions now accept a single class as the "
"*bases* argument. (Contributed by Serhiy Storchaka in :issue:`42423`.)"
msgstr ""
"Функции :c:func:`PyType_FromSpecWithBases` и :c:func:"
"`PyType_FromModuleAndSpec` теперь принимают один класс в качестве аргумента "
"*bases*. (Предоставлено Сергеем Сторчакой в ​​:issue:`42423`.)"

#: ../../whatsnew/3.10.rst:2094
msgid ""
"The :c:func:`PyType_FromModuleAndSpec` function now accepts NULL ``tp_doc`` "
"slot. (Contributed by Hai Shi in :issue:`41832`.)"
msgstr ""
"Функция :c:func:`PyType_FromModuleAndSpec` теперь принимает NULL слот "
"``tp_doc``. (Предоставлено Хай Ши в :issue:`41832`.)"

#: ../../whatsnew/3.10.rst:2098
msgid ""
"The :c:func:`PyType_GetSlot` function can accept :ref:`static types <static-"
"types>`. (Contributed by Hai Shi and Petr Viktorin in :issue:`41073`.)"
msgstr ""
"Функция :c:func:`PyType_GetSlot` может принимать :ref:`статические типы "
"<static-types>`. (Предоставлено Хай Ши и Петром Викторином в :issue:`41073`.)"

#: ../../whatsnew/3.10.rst:2102
msgid ""
"Add a new :c:func:`PySet_CheckExact` function to the C-API to check if an "
"object is an instance of :class:`set` but not an instance of a subtype. "
"(Contributed by Pablo Galindo in :issue:`43277`.)"
msgstr ""
"Добавьте новую функцию :c:func:`PySet_CheckExact` в C-API, чтобы проверить, "
"является ли объект экземпляром :class:`set`, но не экземпляром подтипа. "
"(Предоставлено Пабло Галиндо в :issue:`43277`.)"

#: ../../whatsnew/3.10.rst:2106
msgid ""
"Add :c:func:`PyErr_SetInterruptEx` which allows passing a signal number to "
"simulate. (Contributed by Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"Добавьте :c:func:`PyErr_SetInterruptEx`, который позволяет передавать номер "
"сигнала для моделирования. (Предоставлено Антуаном Питру в :issue:`43356`.)"

#: ../../whatsnew/3.10.rst:2110
msgid ""
"The limited C API is now supported if :ref:`Python is built in debug mode "
"<debug-build>` (if the ``Py_DEBUG`` macro is defined). In the limited C API, "
"the :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now "
"implemented as opaque function calls, rather than accessing directly the :c:"
"member:`PyObject.ob_refcnt` member, if Python is built in debug mode and the "
"``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became possible to "
"support the limited C API in debug mode because the :c:type:`PyObject` "
"structure is the same in release and debug mode since Python 3.8 (see :issue:"
"`36465`)."
msgstr ""
"Ограниченный API C теперь поддерживается, если Python собран в режиме "
"отладки <debug-build> (если определен макрос Py_DEBUG). В ограниченном C API "
"функции :c:func:`Py_INCREF` и :c:func:`Py_DECREF` теперь реализованы как "
"непрозрачные вызовы функций, а не прямой доступ к элементу :c:member:` PyObj "
"ect.ob_refcnt`. , если Python построен в режиме отладки и макрос "
"Py_LIMITED_API предназначен для Python 3.10 или новее. Стало возможным "
"поддерживать ограниченный API C в режиме отладки, поскольку структура :c:"
"type:` PyObject` одинакова в режиме выпуска и отладки, начиная с Python 3.8 "
"(см. :issue:`36465`)."

#: ../../whatsnew/3.10.rst:2120
msgid ""
"The limited C API is still not supported in the :option:`--with-trace-refs` "
"special build (``Py_TRACE_REFS`` macro). (Contributed by Victor Stinner in :"
"issue:`43688`.)"
msgstr ""
"Ограниченный C API по-прежнему не поддерживается в специальной сборке :"
"option:`--with-trace-refs` (макрос ``Py_TRACE_REFS``). (Предоставлено "
"Виктором Стиннером в :issue:`43688`.)"

#: ../../whatsnew/3.10.rst:2124
msgid ""
"Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the *x* object is "
"the *y* object, the same as ``x is y`` in Python. Add also the :c:func:"
"`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` functions to test if "
"an object is, respectively, the ``None`` singleton, the ``True`` singleton "
"or the ``False`` singleton. (Contributed by Victor Stinner in :issue:"
"`43753`.)"
msgstr ""
"Добавьте функцию :c:func:`Py_Is(x, y) <Py_Is>`, чтобы проверить, является ли "
"объект *x* объектом *y*, так же, как ``x is y`` в Python. Добавьте также "
"функции :c:func:`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` для "
"проверки того, является ли объект, соответственно, одноэлементным ``None``, "
"`` True`` синглтон или ``False`` синглтон. (Предоставлено Виктором Стиннером "
"в :issue:`43753`.)"

#: ../../whatsnew/3.10.rst:2131
msgid ""
"Add new functions to control the garbage collector from C code: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. These "
"functions allow to activate, deactivate and query the state of the garbage "
"collector from C code without having to import the :mod:`gc` module."
msgstr ""
"Добавьте новые функции для управления сборщиком мусора из кода C: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. Эти "
"функции позволяют активировать, деактивировать и запрашивать состояние "
"сборщика мусора из кода C без необходимости импортировать модуль :mod:`gc`."

#: ../../whatsnew/3.10.rst:2138
msgid ""
"Add a new :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to disallow "
"creating type instances. (Contributed by Victor Stinner in :issue:`43916`.)"
msgstr ""
"Добавьте новый флаг типа :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION`, чтобы "
"запретить создание экземпляров типа. (Предоставлено Виктором Стиннером в :"
"issue:`43916`.)"

#: ../../whatsnew/3.10.rst:2142
msgid ""
"Add a new :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag for creating "
"immutable type objects: type attributes cannot be set nor deleted. "
"(Contributed by Victor Stinner and Erlend E. Aasland in :issue:`43908`.)"
msgstr ""
"Добавьте новый флаг типа :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` для создания "
"объектов неизменяемого типа: атрибуты типа не могут быть установлены или "
"удалены. (Предоставлено Виктором Стиннером и Эрлендом Э. Осландом в :issue:"
"`43908`.)"

#: ../../whatsnew/3.10.rst:2149
msgid ""
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use :c:func:"
"`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use ``#``: "
"``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. See :"
"ref:`arg-parsing` and :pep:`353`. (Contributed by Victor Stinner in :issue:"
"`40943`.)"
msgstr ""
"Макрос ``PY_SSIZE_T_CLEAN`` теперь должен быть определен для использования "
"форматов :c:func:`PyArg_ParseTuple` и :c:func:`Py_BuildValue`, которые "
"используют ``#``: ``es#``, ``et# ``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` "
"и ``Z#``. См. :ref:`arg-parsing` и :pep:`353`. (Предоставлено Виктором "
"Стиннером в :issue:`40943`.)"

#: ../../whatsnew/3.10.rst:2155
msgid ""
"Since :c:func:`Py_REFCNT()` is changed to the inline static function, "
"``Py_REFCNT(obj) = new_refcnt`` must be replaced with ``Py_SET_REFCNT(obj, "
"new_refcnt)``: see :c:func:`Py_SET_REFCNT()` (available since Python 3.9). "
"For backward compatibility, this macro can be used::"
msgstr ""
"Поскольку :c:func:`Py_REFCNT()` заменяется на встроенную статическую "
"функцию, ``Py_REFCNT(obj) = new_refcnt`` необходимо заменить на "
"``Py_SET_REFCNT(obj, new_refcnt)``: см. :c:func: `Py_SET_REFCNT()` (доступно "
"начиная с Python 3.9). Для обратной совместимости можно использовать этот "
"макрос::"

#: ../../whatsnew/3.10.rst:2160
msgid ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"#  define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"#  define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"

#: ../../whatsnew/3.10.rst:2164
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`39573`.)"

#: ../../whatsnew/3.10.rst:2166
msgid ""
"Calling :c:func:`PyDict_GetItem` without :term:`GIL` held had been allowed "
"for historical reason. It is no longer allowed. (Contributed by Victor "
"Stinner in :issue:`40839`.)"
msgstr ""
"Вызов :c:func:`PyDict_GetItem` без удержания :term:`GIL` был разрешен по "
"историческим причинам. Это больше не разрешено. (Предоставлено Виктором "
"Стиннером в :issue:`40839`.)"

#: ../../whatsnew/3.10.rst:2170
msgid ""
"``PyUnicode_FromUnicode(NULL, size)`` and "
"``PyUnicode_FromStringAndSize(NULL, size)`` raise ``DeprecationWarning`` "
"now.  Use :c:func:`PyUnicode_New` to allocate Unicode object without initial "
"data. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``PyUnicode_FromUnicode(NULL, size)`` и ``PyUnicode_FromStringAndSize(NULL, "
"size)`` теперь вызывают ``DeprecationWarning``. Используйте :c:func:"
"`PyUnicode_New` для выделения объекта Unicode без исходных данных. "
"(Предоставлено Инадой Наоки в :issue:`36346`.)"

#: ../../whatsnew/3.10.rst:2175
msgid ""
"The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule API "
"``unicodedata.ucnhash_CAPI`` has been moved to the internal C API. "
"(Contributed by Victor Stinner in :issue:`42157`.)"
msgstr ""
"Частная структура ``_PyUnicode_Name_CAPI`` API PyCapsule ``unicodedata."
"ucnhash_CAPI`` была перенесена во внутренний C API. (Предоставлено Виктором "
"Стиннером в :issue:`42157`.)"

#: ../../whatsnew/3.10.rst:2179
msgid ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` and :c:func:"
"`Py_GetProgramName` functions now return ``NULL`` if called before :c:func:"
"`Py_Initialize` (before Python is initialized). Use the new :ref:`init-"
"config` API to get the :ref:`init-path-config`. (Contributed by Victor "
"Stinner in :issue:`42260`.)"
msgstr ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` и :c:func: Функции "
"``Py_GetProgramName`` теперь возвращают ``NULL``, если они были вызваны до :"
"c:func:`Py_Initialize` (до инициализации Python). Используйте новый API :ref:"
"`init-config`, чтобы получить :ref:`init-path-config`. (Предоставлено "
"Виктором Стиннером в :issue:`42260`.)"

#: ../../whatsnew/3.10.rst:2186
msgid ""
":c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyCell_SET` macros can no longer be used as l-value or r-value. For "
"example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b, c) = "
"x`` now fail with a compiler error. It prevents bugs like ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Contributed by Zackery Spytz "
"and Victor Stinner in :issue:`30459`.)"
msgstr ""
"Макросы :c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` и :c:func:"
"`PyCell_SET` больше нельзя использовать в качестве l-значения или r-"
"значения. Например, ``x = PyList_SET_ITEM(a, b, c)`` и ``PyList_SET_ITEM(a, "
"b, c) = x`` теперь завершаются ошибкой компилятора. Это предотвращает такие "
"ошибки, как ``if (PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Предоставлено "
"Закери Шпитцем и Виктором Стиннером в :issue:`30459`.)"

#: ../../whatsnew/3.10.rst:2193
msgid ""
"The non-limited API files ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe."
"h``, and ``pytime.h`` have been moved to the ``Include/cpython`` directory. "
"These files must not be included directly, as they are already included in "
"``Python.h``; see :ref:`api-includes`. If they have been included directly, "
"consider including ``Python.h`` instead. (Contributed by Nicholas Sim in :"
"issue:`35134`.)"
msgstr ""
"Неограниченные файлы API ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug. h``, ``pyfpe."
"h`` и ``pytime.h`` были перемещены в каталог ``Include/cpython``. Эти файлы "
"не следует включать напрямую, поскольку они уже включены в ``Python.h``; "
"см. :ref:`api-includes`. Если они были включены напрямую, рассмотрите "
"возможность включения вместо них Python.h. (Предоставлено Николасом Симом в :"
"issue:`35134`.)"

#: ../../whatsnew/3.10.rst:2201
msgid ""
"Use the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag to create immutable "
"type objects. Do not rely on :c:macro:`Py_TPFLAGS_HEAPTYPE` to decide if a "
"type object is mutable or not; check if :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` "
"is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in :"
"issue:`43908`.)"
msgstr ""
"Используйте флаг типа :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` для создания "
"объектов неизменяемого типа. Не полагайтесь на :c:macro:"
"`Py_TPFLAGS_HEAPTYPE`, чтобы решить, является ли объект типа изменяемым или "
"нет; проверьте, установлен ли вместо этого :c:macro:"
"`Py_TPFLAGS_IMMUTABLETYPE`. (Предоставлено Виктором Стиннером и Эрлендом Э. "
"Осландом в :issue:`43908`.)"

#: ../../whatsnew/3.10.rst:2207
msgid ""
"The undocumented function ``Py_FrozenMain`` has been removed from the "
"limited API. The function is mainly useful for custom builds of Python. "
"(Contributed by Petr Viktorin in :issue:`26241`.)"
msgstr ""
"Недокументированная функция Py_FrozenMain была удалена из ограниченного API. "
"Эта функция в основном полезна для пользовательских сборок Python. "
"(Предоставлено Петром Викториным в :issue:`26241`.)"

#: ../../whatsnew/3.10.rst:2214
msgid ""
"The ``PyUnicode_InternImmortal()`` function is now deprecated and will be "
"removed in Python 3.12: use :c:func:`PyUnicode_InternInPlace` instead. "
"(Contributed by Victor Stinner in :issue:`41692`.)"
msgstr ""
"Функция ``PyUnicode_InternImmortal()`` устарела и будет удалена в Python "
"3.12: вместо нее используйте :c:func:`PyUnicode_InternInPlace`. "
"(Предоставлено Виктором Стиннером в :issue:`41692`.)"

#: ../../whatsnew/3.10.rst:2222
msgid ""
"Removed ``Py_UNICODE_str*`` functions manipulating ``Py_UNICODE*`` strings. "
"(Contributed by Inada Naoki in :issue:`41123`.)"
msgstr ""
"Удалены функции Py_UNICODE_str*, управляющие строками Py_UNICODE*. "
"(Предоставлено Инадой Наоки в :issue:`41123`.)"

#: ../../whatsnew/3.10.rst:2225
msgid ""
"``Py_UNICODE_strlen``: use :c:func:`PyUnicode_GetLength` or :c:macro:"
"`PyUnicode_GET_LENGTH`"
msgstr ""
"``Py_UNICODE_strlen``: используйте :c:func:`PyUnicode_GetLength` или :c:"
"macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.10.rst:2227
msgid ""
"``Py_UNICODE_strcat``: use :c:func:`PyUnicode_CopyCharacters` or :c:func:"
"`PyUnicode_FromFormat`"
msgstr ""
"``Py_UNICODE_strcat``: используйте :c:func:`PyUnicode_CopyCharacters` или :c:"
"func:`PyUnicode_FromFormat`"

#: ../../whatsnew/3.10.rst:2229
msgid ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: use :c:func:"
"`PyUnicode_CopyCharacters` or :c:func:`PyUnicode_Substring`"
msgstr ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: используйте :c:func:"
"`PyUnicode_CopyCharacters` или :c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.10.rst:2231
msgid "``Py_UNICODE_strcmp``: use :c:func:`PyUnicode_Compare`"
msgstr "``Py_UNICODE_strcmp``: используйте :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.10.rst:2232
msgid "``Py_UNICODE_strncmp``: use :c:func:`PyUnicode_Tailmatch`"
msgstr "``Py_UNICODE_strncmp``: используйте :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.10.rst:2233
msgid ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use :c:func:"
"`PyUnicode_FindChar`"
msgstr ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: используйте :c:func:"
"`PyUnicode_FindChar`"

#: ../../whatsnew/3.10.rst:2236
msgid ""
"Removed ``PyUnicode_GetMax()``. Please migrate to new (:pep:`393`) APIs. "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Удален ``PyUnicode_GetMax()``. Пожалуйста, перейдите на новые (:pep:`393`) "
"API. (Предоставлено Инадой Наоки в :issue:`41103`.)"

#: ../../whatsnew/3.10.rst:2239
msgid ""
"Removed ``PyLong_FromUnicode()``. Please migrate to :c:func:"
"`PyLong_FromUnicodeObject`. (Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Удален ``PyLong_FromUnicode()``. Пожалуйста, перейдите на :c:func:"
"`PyLong_FromUnicodeObject`. (Предоставлено Инадой Наоки в :issue:`41103`.)"

#: ../../whatsnew/3.10.rst:2242
msgid ""
"Removed ``PyUnicode_AsUnicodeCopy()``. Please use :c:func:"
"`PyUnicode_AsUCS4Copy` or :c:func:`PyUnicode_AsWideCharString` (Contributed "
"by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Удален ``PyUnicode_AsUnicodeCopy()``. Используйте :c:func:"
"`PyUnicode_AsUCS4Copy` или :c:func:`PyUnicode_AsWideCharString` "
"(предоставлено Инадой Наоки в :issue:`41103`.)"

#: ../../whatsnew/3.10.rst:2246
msgid ""
"Removed ``_Py_CheckRecursionLimit`` variable: it has been replaced by "
"``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure. "
"(Contributed by Victor Stinner in :issue:`41834`.)"
msgstr ""
"Удалена переменная ``_Py_CheckRecursionLimit``: она заменена на ``ceval."
"recursion_limit`` структуры :c:type:`PyInterpreterState`. (Предоставлено "
"Виктором Стиннером в :issue:`41834`.)"

#: ../../whatsnew/3.10.rst:2250
msgid ""
"Removed undocumented macros ``Py_ALLOW_RECURSION`` and "
"``Py_END_ALLOW_RECURSION`` and the ``recursion_critical`` field of the :c:"
"type:`PyInterpreterState` structure. (Contributed by Serhiy Storchaka in :"
"issue:`41936`.)"
msgstr ""
"Удалены недокументированные макросы ``Py_ALLOW_RECURSION`` и "
"``Py_END_ALLOW_RECURSION``, а также поле ``recursion_critical`` из "
"структуры :c:type:`PyInterpreterState`. (Предоставлено Сергеем Сторчакой в ​​:"
"issue:`41936`.)"

#: ../../whatsnew/3.10.rst:2255
msgid ""
"Removed the undocumented ``PyOS_InitInterrupts()`` function. Initializing "
"Python already implicitly installs signal handlers: see :c:member:`PyConfig."
"install_signal_handlers`. (Contributed by Victor Stinner in :issue:`41713`.)"
msgstr ""
"Удалена недокументированная функция PyOS_InitInterrupts(). Инициализация "
"Python уже неявно устанавливает обработчики сигналов: см. :c:member:"
"`PyConfig.install_signal_handlers`. (Предоставлено Виктором Стиннером в :"
"issue:`41713`.)"

#: ../../whatsnew/3.10.rst:2260
msgid ""
"Remove the ``PyAST_Validate()`` function. It is no longer possible to build "
"a AST object (``mod_ty`` type) with the public C API. The function was "
"already excluded from the limited C API (:pep:`384`). (Contributed by Victor "
"Stinner in :issue:`43244`.)"
msgstr ""
"Удалите функцию PyAST_Validate(). Больше невозможно создать объект AST (тип "
"mod_ty) с помощью общедоступного API C. Эта функция уже была исключена из "
"ограниченного C API (:pep:`384`). (Предоставлено Виктором Стиннером в :issue:"
"`43244`.)"

#: ../../whatsnew/3.10.rst:2265
msgid "Remove the ``symtable.h`` header file and the undocumented functions:"
msgstr ""
"Удалите заголовочный файл ``symtable.h`` и недокументированные функции:"

#: ../../whatsnew/3.10.rst:2267
msgid "``PyST_GetScope()``"
msgstr "``PyST_GetScope()``"

#: ../../whatsnew/3.10.rst:2268
msgid "``PySymtable_Build()``"
msgstr "``PySymtable_Build()``"

#: ../../whatsnew/3.10.rst:2269
msgid "``PySymtable_BuildObject()``"
msgstr "``PySymtable_BuildObject()``"

#: ../../whatsnew/3.10.rst:2270
msgid "``PySymtable_Free()``"
msgstr "``PySymtable_Free()``"

#: ../../whatsnew/3.10.rst:2271
msgid "``Py_SymtableString()``"
msgstr "``Py_SymtableString()``"

#: ../../whatsnew/3.10.rst:2272
msgid "``Py_SymtableStringObject()``"
msgstr "``Py_SymtableStringObject()``"

#: ../../whatsnew/3.10.rst:2274
msgid ""
"The ``Py_SymtableString()`` function was part the stable ABI by mistake but "
"it could not be used, because the ``symtable.h`` header file was excluded "
"from the limited C API."
msgstr ""
"Функция Py_SymtableString() по ошибке была частью стабильного ABI, но ее "
"нельзя было использовать, поскольку заголовочный файл symtable.h был "
"исключен из ограниченного C API."

#: ../../whatsnew/3.10.rst:2278
msgid ""
"Use Python :mod:`symtable` module instead. (Contributed by Victor Stinner "
"in :issue:`43244`.)"
msgstr ""
"Вместо этого используйте модуль Python :mod:`symtable`. (Предоставлено "
"Виктором Стиннером в :issue:`43244`.)"

#: ../../whatsnew/3.10.rst:2281
msgid ""
"Remove :c:func:`PyOS_ReadlineFunctionPointer` from the limited C API headers "
"and from ``python3.dll``, the library that provides the stable ABI on "
"Windows. Since the function takes a ``FILE*`` argument, its ABI stability "
"cannot be guaranteed. (Contributed by Petr Viktorin in :issue:`43868`.)"
msgstr ""
"Удалите :c:func:`PyOS_ReadlineFunctionPointer` из ограниченных заголовков C "
"API и из ``python3.dll``, библиотеки, которая обеспечивает стабильный ABI в "
"Windows. Поскольку функция принимает аргумент ``FILE*``, ее стабильность ABI "
"не может быть гарантирована. (Предоставлено Петром Викториным в :issue:"
"`43868`.)"

#: ../../whatsnew/3.10.rst:2287
msgid ""
"Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header files. These "
"functions were undocumented and excluded from the limited C API. Most names "
"defined by these header files were not prefixed by ``Py`` and so could "
"create names conflicts. For example, ``Python-ast.h`` defined a ``Yield`` "
"macro which was conflict with the ``Yield`` name used by the Windows "
"``<winbase.h>`` header. Use the Python :mod:`ast` module instead. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"Удалите заголовочные файлы ``asd.h``, ``asdl.h`` и ``Python-ast.h``. Эти "
"функции были недокументированы и исключены из ограниченного API C. "
"Большинство имен, определенных в этих файлах заголовков, не имели префикса "
"``Py`` и поэтому могли создавать конфликты имен. Например, Python-ast.h "
"определил макрос Yield, который конфликтовал с именем Yield, используемым в "
"заголовке Windows <winbase.h>. Вместо этого используйте модуль Python :mod:"
"`ast`. (Предоставлено Виктором Стиннером в :issue:`43244`.)"

#: ../../whatsnew/3.10.rst:2295
msgid ""
"Remove the compiler and parser functions using ``struct _mod`` type, because "
"the public AST C API was removed:"
msgstr ""
"Удалите функции компилятора и парсера, используя тип struct _mod, поскольку "
"общедоступный API AST C был удален:"

#: ../../whatsnew/3.10.rst:2298
msgid "``PyAST_Compile()``"
msgstr "``PyAST_Compile()``"

#: ../../whatsnew/3.10.rst:2299
msgid "``PyAST_CompileEx()``"
msgstr "``PyAST_CompileEx()``"

#: ../../whatsnew/3.10.rst:2300
msgid "``PyAST_CompileObject()``"
msgstr "``PyAST_CompileObject()``"

#: ../../whatsnew/3.10.rst:2301
msgid "``PyFuture_FromAST()``"
msgstr "``PyFuture_FromAST()``"

#: ../../whatsnew/3.10.rst:2302
msgid "``PyFuture_FromASTObject()``"
msgstr "``PyFuture_FromASTObject()``"

#: ../../whatsnew/3.10.rst:2303
msgid "``PyParser_ASTFromFile()``"
msgstr "``PyParser_ASTFromFile()``"

#: ../../whatsnew/3.10.rst:2304
msgid "``PyParser_ASTFromFileObject()``"
msgstr "``PyParser_ASTFromFileObject()``"

#: ../../whatsnew/3.10.rst:2305
msgid "``PyParser_ASTFromFilename()``"
msgstr "``PyParser_ASTFromFilename()``"

#: ../../whatsnew/3.10.rst:2306
msgid "``PyParser_ASTFromString()``"
msgstr "``PyParser_ASTFromString()``"

#: ../../whatsnew/3.10.rst:2307
msgid "``PyParser_ASTFromStringObject()``"
msgstr "``PyParser_ASTFromStringObject()``"

#: ../../whatsnew/3.10.rst:2309
msgid ""
"These functions were undocumented and excluded from the limited C API. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"Эти функции были недокументированы и исключены из ограниченного API C. "
"(Предоставлено Виктором Стиннером в :issue:`43244`.)"

#: ../../whatsnew/3.10.rst:2312
msgid "Remove the ``pyarena.h`` header file with functions:"
msgstr "Удалите заголовочный файл ``pyarena.h`` с помощью функций:"

#: ../../whatsnew/3.10.rst:2314
msgid "``PyArena_New()``"
msgstr "``PyArena_New()``"

#: ../../whatsnew/3.10.rst:2315
msgid "``PyArena_Free()``"
msgstr "``PyArena_Free()``"

#: ../../whatsnew/3.10.rst:2316
msgid "``PyArena_Malloc()``"
msgstr "``PyArena_Malloc()``"

#: ../../whatsnew/3.10.rst:2317
msgid "``PyArena_AddPyObject()``"
msgstr "``PyArena_AddPyObject()``"

#: ../../whatsnew/3.10.rst:2319
msgid ""
"These functions were undocumented, excluded from the limited C API, and were "
"only used internally by the compiler. (Contributed by Victor Stinner in :"
"issue:`43244`.)"
msgstr ""
"Эти функции были недокументированы, исключены из ограниченного API C и "
"использовались компилятором только внутри. (Предоставлено Виктором Стиннером "
"в :issue:`43244`.)"

#: ../../whatsnew/3.10.rst:2323
msgid ""
"The ``PyThreadState.use_tracing`` member has been removed to optimize "
"Python. (Contributed by Mark Shannon in :issue:`43760`.)"
msgstr ""
"Член PyThreadState.use_tracing был удален для оптимизации Python. "
"(Предоставлено Марком Шенноном в :issue:`43760`.)"

#: ../../whatsnew/3.10.rst:2328
msgid "Notable security feature in 3.10.7"
msgstr "Заметная функция безопасности в версии 3.10.7."

#: ../../whatsnew/3.10.rst:2330
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"Преобразование между :class:`int` и :class:`str` в системах счисления, "
"отличных от 2 (двоичная), 4, 8 (восьмеричная), 16 (шестнадцатеричная) или "
"32, например, 10 (десятичная), теперь вызывает :exc :`ValueError`, если "
"количество цифр в строковой форме превышает ограничение, чтобы избежать "
"потенциальных атак типа «отказ в обслуживании» из-за сложности алгоритма. "
"Это смягчение последствий :cve:`2020-10735`. Это ограничение можно настроить "
"или отключить с помощью переменной среды, флага командной строки или API :"
"mod:`sys`. См. документацию по ограничению длины преобразования "
"целочисленной строки <int_max_str_digits>`. Ограничение по умолчанию — 4300 "
"цифр в строковой форме."

#: ../../whatsnew/3.10.rst:2341
msgid "Notable security feature in 3.10.8"
msgstr "Заметная функция безопасности в версии 3.10.8."

#: ../../whatsnew/3.10.rst:2343
msgid ""
"The deprecated :mod:`!mailcap` module now refuses to inject unsafe text "
"(filenames, MIME types, parameters) into shell commands. Instead of using "
"such text, it will warn and act as if a match was not found (or for test "
"commands, as if the test failed). (Contributed by Petr Viktorin in :gh:"
"`98966`.)"
msgstr ""
"Устаревший модуль :mod:`!mailcap` теперь отказывается вставлять небезопасный "
"текст (имена файлов, типы MIME, параметры) в команды оболочки. Вместо "
"использования такого текста он будет предупреждать и действовать так, как "
"будто совпадение не найдено (или для тестовых команд, как если бы тест не "
"прошёл). (Предоставлено Петром Викториным в :gh:`98966`.)"

#: ../../whatsnew/3.10.rst:2350
msgid "Notable changes in 3.10.12"
msgstr "Заметные изменения в 3.10.12"

#: ../../whatsnew/3.10.rst:2353
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.10.rst:2355
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
"Методы извлечения в :mod:`tarfile` и :func:`shutil.unpack_archive` имеют "
"новый аргумент *filter*, который позволяет ограничить возможности tar, "
"которые могут быть неожиданными или опасными, например создание файлов вне "
"каталога назначения. Подробности смотрите в :ref:`tarfile-extraction-"
"filter`. В Python 3.12 использование без аргумента *filter* приведет к "
"появлению :exc:`DeprecationWarning`. В Python 3.14 значение по умолчанию "
"переключится на ``'data'``. (Предоставлено Петром Викториным в :pep:`706`.)"
