# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmitriy Q, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/2.5.rst:3
msgid "What's New in Python 2.5"
msgstr "Что нового в Python 2.5"

#: ../../whatsnew/2.5.rst:0
msgid "Author"
msgstr "Автор"

#: ../../whatsnew/2.5.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.5.rst:12
msgid ""
"This article explains the new features in Python 2.5.  The final release of "
"Python 2.5 is scheduled for August 2006; :pep:`356` describes the planned "
"release schedule.  Python 2.5 was released on September 19, 2006."
msgstr ""
"В этой статье объясняются новые возможности Python 2.5. Окончательный выпуск "
"Python 2.5 запланирован на август 2006 г.; :pep:`356` описывает "
"запланированный график выпуска. Python 2.5 был выпущен 19 сентября 2006 года."

#: ../../whatsnew/2.5.rst:16
msgid ""
"The changes in Python 2.5 are an interesting mix of language and library "
"improvements. The library enhancements will be more important to Python's "
"user community, I think, because several widely useful packages were added.  "
"New modules include ElementTree for XML processing (:mod:`xml.etree`), the "
"SQLite database module (:mod:`sqlite`), and the :mod:`ctypes` module for "
"calling C functions."
msgstr ""
"Изменения в Python 2.5 представляют собой интересное сочетание улучшений "
"языка и библиотек. Я думаю, что улучшения библиотеки будут более важны для "
"сообщества пользователей Python, поскольку было добавлено несколько очень "
"полезных пакетов. Новые модули включают ElementTree для обработки XML (:mod:"
"`xml.etree`), модуль базы данных SQLite (:mod:`sqlite`) и модуль :mod:"
"`ctypes` для вызова функций C."

#: ../../whatsnew/2.5.rst:23
msgid ""
"The language changes are of middling significance.  Some pleasant new "
"features were added, but most of them aren't features that you'll use every "
"day. Conditional expressions were finally added to the language using a "
"novel syntax; see section :ref:`pep-308`.  The new ':keyword:`with`' "
"statement will make writing cleanup code easier (section :ref:`pep-343`).  "
"Values can now be passed into generators (section :ref:`pep-342`).  Imports "
"are now visible as either absolute or relative (section :ref:`pep-328`).  "
"Some corner cases of exception handling are handled better (section :ref:"
"`pep-341`).  All these improvements are worthwhile, but they're improvements "
"to one specific language feature or another; none of them are broad "
"modifications to Python's semantics."
msgstr ""
"Языковые изменения имеют среднее значение. Было добавлено несколько приятных "
"новых функций, но большинство из них не являются функциями, которыми вы "
"будете пользоваться каждый день. Условные выражения были наконец добавлены в "
"язык с использованием нового синтаксиса; см. раздел :ref:`pep-308`. Новый "
"оператор ':keyword:`with`' упростит написание кода очистки (раздел :ref:"
"`pep-343`). Значения теперь можно передавать в генераторы (раздел :ref:"
"`pep-342`). Импорт теперь отображается как абсолютный или относительный "
"(раздел :ref:`pep-328`). Некоторые крайние случаи обработки исключений "
"обрабатываются лучше (раздел :ref:`pep-341`). Все эти улучшения заслуживают "
"внимания, но они представляют собой улучшения той или иной конкретной "
"функции языка; ни один из них не является широкой модификацией семантики "
"Python."

#: ../../whatsnew/2.5.rst:34
msgid ""
"As well as the language and library additions, other improvements and "
"bugfixes were made throughout the source tree.  A search through the SVN "
"change logs finds there were 353 patches applied and 458 bugs fixed between "
"Python 2.4 and 2.5.  (Both figures are likely to be underestimates.)"
msgstr ""
"Помимо дополнений к языку и библиотекам, во всем дереве исходного кода были "
"внесены другие улучшения и исправления. Поиск в журналах изменений SVN "
"обнаружил, что между Python 2.4 и 2.5 было применено 353 исправления и "
"исправлено 458 ошибок. (Обе цифры, вероятно, занижены.)"

#: ../../whatsnew/2.5.rst:39
msgid ""
"This article doesn't try to be a complete specification of the new features; "
"instead changes are briefly introduced using helpful examples.  For full "
"details, you should always refer to the documentation for Python 2.5 at "
"https://docs.python.org. If you want to understand the complete "
"implementation and design rationale, refer to the PEP for a particular new "
"feature."
msgstr ""
"Эта статья не претендует на полное описание новых функций; вместо этого "
"изменения кратко представлены с использованием полезных примеров. Для "
"получения полной информации всегда обращайтесь к документации Python 2.5 по "
"адресу https://docs.python.org. Если вы хотите понять полное обоснование "
"реализации и дизайна, обратитесь к PEP за конкретной новой функцией."

#: ../../whatsnew/2.5.rst:45
msgid ""
"Comments, suggestions, and error reports for this document are welcome; "
"please e-mail them to the author or open a bug in the Python bug tracker."
msgstr ""
"Комментарии, предложения и отчеты об ошибках к этому документу "
"приветствуются; пожалуйста, отправьте их по электронной почте автору или "
"откройте ошибку в системе отслеживания ошибок Python."

#: ../../whatsnew/2.5.rst:54
msgid "PEP 308: Conditional Expressions"
msgstr "PEP 308: Условные выражения"

#: ../../whatsnew/2.5.rst:56
msgid ""
"For a long time, people have been requesting a way to write conditional "
"expressions, which are expressions that return value A or value B depending "
"on whether a Boolean value is true or false.  A conditional expression lets "
"you write a single assignment statement that has the same effect as the "
"following::"
msgstr ""
"В течение долгого времени люди искали способ написания условных выражений, "
"которые возвращают значение A или значение B в зависимости от того, является "
"ли логическое значение истинным или ложным. Условное выражение позволяет вам "
"написать один оператор присваивания, который имеет тот же эффект, что и "
"следующий:"

#: ../../whatsnew/2.5.rst:66
msgid ""
"There have been endless tedious discussions of syntax on both python-dev and "
"comp.lang.python.  A vote was even held that found the majority of voters "
"wanted conditional expressions in some form, but there was no syntax that "
"was preferred by a clear majority. Candidates included C's ``cond ? true_v : "
"false_v``, ``if cond then true_v else false_v``, and 16 other variations."
msgstr ""
"Были бесконечные утомительные дискуссии о синтаксисе как на python-dev, так "
"и на comp.lang.python. Было даже проведено голосование, которое показало, "
"что большинство избирателей хотели бы использовать условные выражения в той "
"или иной форме, но не было синтаксиса, который предпочитал бы явное "
"большинство. Кандидаты включали `` cond ? true_v : false_v``, ``if cond then "
"true_v else false_v`` и 16 других вариантов."

#: ../../whatsnew/2.5.rst:72
msgid "Guido van Rossum eventually chose a surprising syntax::"
msgstr "Гвидо ван Россум в итоге выбрал удивительный синтаксис:"

#: ../../whatsnew/2.5.rst:76
msgid ""
"Evaluation is still lazy as in existing Boolean expressions, so the order of "
"evaluation jumps around a bit.  The *condition* expression in the middle is "
"evaluated first, and the *true_value* expression is evaluated only if the "
"condition was true.  Similarly, the *false_value* expression is only "
"evaluated when the condition is false."
msgstr ""
"Вычисление по-прежнему ленивое, как и в существующих логических выражениях, "
"поэтому порядок вычислений немного меняется. Выражение *condition* в "
"середине вычисляется первым, а выражение *true_value* оценивается только в "
"том случае, если условие было истинным. Аналогично, выражение *false_value* "
"оценивается только тогда, когда условие ложно."

#: ../../whatsnew/2.5.rst:82
msgid ""
"This syntax may seem strange and backwards; why does the condition go in the "
"*middle* of the expression, and not in the front as in C's ``c ? x : y``?  "
"The decision was checked by applying the new syntax to the modules in the "
"standard library and seeing how the resulting code read.  In many cases "
"where a conditional expression is used, one value seems to be the 'common "
"case' and one value is an 'exceptional case', used only on rarer occasions "
"when the condition isn't met.  The conditional syntax makes this pattern a "
"bit more obvious::"
msgstr ""
"Этот синтаксис может показаться странным и устаревшим; почему условие "
"находится в *середине* выражения, а не в начале, как в C ``c ? х: у``? "
"Решение было проверено путем применения нового синтаксиса к модулям "
"стандартной библиотеки и просмотра того, как читается полученный код. Во "
"многих случаях, когда используется условное выражение, одно значение кажется "
"«общим случаем», а другое значение — «исключительным случаем», используемым "
"только в более редких случаях, когда условие не выполняется. Условный "
"синтаксис делает этот шаблон более очевидным:"

#: ../../whatsnew/2.5.rst:92
msgid ""
"I read the above statement as meaning \"here *contents* is  usually assigned "
"a value of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case "
"an empty string is returned.\"   I doubt I will use conditional expressions "
"very often where there  isn't a clear common and uncommon case."
msgstr ""
"Я прочитал приведенное выше утверждение как означающее: «здесь *contents* "
"обычно присваивается значение ``doc+'\\n'``; иногда *doc* пусто, и в этом "
"особом случае возвращается пустая строка». Сомневаюсь, что буду часто "
"использовать условные выражения там, где нет четкого определения общего и "
"необычного случая."

#: ../../whatsnew/2.5.rst:97
msgid ""
"There was some discussion of whether the language should require surrounding "
"conditional expressions with parentheses.  The decision was made to *not* "
"require parentheses in the Python language's grammar, but as a matter of "
"style I think you should always use them. Consider these two statements::"
msgstr ""
"Была некоторая дискуссия о том, должен ли язык требовать заключения условных "
"выражений в круглые скобки. Было принято решение *не* требовать скобок в "
"грамматике языка Python, но из соображений стиля, я думаю, вам следует "
"всегда их использовать. Рассмотрим эти два утверждения:"

#: ../../whatsnew/2.5.rst:108
msgid ""
"In the first version, I think a reader's eye might group the statement into "
"'level = 1', 'if logging', 'else 0', and think that the condition decides "
"whether the assignment to *level* is performed.  The second version reads "
"better, in my opinion, because it makes it clear that the assignment is "
"always performed and the choice is being made between two values."
msgstr ""
"Я думаю, что в первой версии читатель может сгруппировать операторы в "
"«уровень = 1», «если ведение журнала», «иначе 0» и подумать, что условие "
"определяет, будет ли выполняться присвоение *уровню*. Вторая версия, на мой "
"взгляд, читается лучше, поскольку ясно дает понять, что присваивание всегда "
"выполняется и выбор осуществляется между двумя значениями."

#: ../../whatsnew/2.5.rst:114
msgid ""
"Another reason for including the brackets: a few odd combinations of list "
"comprehensions and lambdas could look like incorrect conditional "
"expressions. See :pep:`308` for some examples.  If you put parentheses "
"around your conditional expressions, you won't run into this case."
msgstr ""
"Еще одна причина включения скобок: несколько странных комбинаций списков и "
"лямбда-выражений могут выглядеть как неправильные условные выражения. См. "
"некоторые примеры в :pep:`308`. Если вы заключите условные выражения в "
"круглые скобки, вы не столкнетесь с этим случаем."

#: ../../whatsnew/2.5.rst:123
msgid ":pep:`308` - Conditional Expressions"
msgstr ":pep:`308` - Условные выражения"

#: ../../whatsnew/2.5.rst:123
msgid ""
"PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by "
"Thomas Wouters."
msgstr ""
"PEP, написанный Гвидо ван Россумом и Раймондом Д. Хеттингером; реализован "
"Томасом Воутерсом."

#: ../../whatsnew/2.5.rst:132
msgid "PEP 309: Partial Function Application"
msgstr "PEP 309: Приложение частичной функции"

#: ../../whatsnew/2.5.rst:134
msgid ""
"The :mod:`functools` module is intended to contain tools for functional-"
"style programming."
msgstr ""
"Модуль :mod:`functools` предназначен для хранения инструментов для "
"функционального программирования."

#: ../../whatsnew/2.5.rst:137
msgid ""
"One useful tool in this module is the :func:`partial` function. For programs "
"written in a functional style, you'll sometimes want to construct variants "
"of existing functions that have some of the parameters filled in.  Consider "
"a Python function ``f(a, b, c)``; you could create a new function ``g(b, "
"c)`` that was equivalent to ``f(1, b, c)``.  This is called \"partial "
"function application\"."
msgstr ""
"Одним из полезных инструментов в этом модуле является функция :func:"
"`partial`. Для программ, написанных в функциональном стиле, иногда вам "
"потребуется создать варианты существующих функций, в которых некоторые "
"параметры будут заполнены. Рассмотрим функцию Python ``f(a, b, c)``; вы "
"можете создать новую функцию ``g(b, c)``, эквивалентную ``f(1, b, c)``. Это "
"называется «приложение частичной функции»."

#: ../../whatsnew/2.5.rst:144
msgid ""
":func:`partial` takes the arguments ``(function, arg1, arg2, ... "
"kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so you "
"can just call it to invoke *function* with the filled-in arguments."
msgstr ""
":func:`partial` принимает аргументы ``(function, arg1, arg2, ... "
"kwarg1=value1, kwarg2=value2)``. Полученный объект является вызываемым, "
"поэтому вы можете просто вызвать его для вызова *функции* с заполненными "
"аргументами."

#: ../../whatsnew/2.5.rst:148
msgid "Here's a small but realistic example::"
msgstr "Вот небольшой, но реалистичный пример:"

#: ../../whatsnew/2.5.rst:160
msgid ""
"Here's another example, from a program that uses PyGTK.  Here a context-"
"sensitive pop-up menu is being constructed dynamically.  The callback "
"provided for the menu option is a partially applied version of the :meth:"
"`open_item` method, where the first argument has been provided. ::"
msgstr ""
"Вот еще один пример из программы, использующей PyGTK. Здесь контекстно-"
"зависимое всплывающее меню создается динамически. Обратный вызов, "
"предусмотренный для пункта меню, представляет собой частично примененную "
"версию метода :meth:`open_item`, где указан первый аргумент. ::"

#: ../../whatsnew/2.5.rst:173
msgid ""
"Another function in the :mod:`functools` module is the "
"``update_wrapper(wrapper, wrapped)`` function that helps you write well-"
"behaved decorators.  :func:`update_wrapper` copies the name, module, and "
"docstring attribute to a wrapper function so that tracebacks inside the "
"wrapped function are easier to understand.  For example, you might write::"
msgstr ""
"Еще одна функция в модуле :mod:`functools` — это функция "
"``update_wrapper(wrapper, Wrapper)``, которая помогает вам писать корректные "
"декораторы. :func:`update_wrapper` копирует имя, модуль и атрибут строки "
"документации в функцию-оболочку, чтобы было легче понять обратные "
"трассировки внутри обернутой функции. Например, вы можете написать::"

#: ../../whatsnew/2.5.rst:186
msgid ""
":func:`wraps` is a decorator that can be used inside your own decorators to "
"copy the wrapped function's information.  An alternate  version of the "
"previous example would be::"
msgstr ""
":func:`wraps` — это декоратор, который можно использовать внутри ваших "
"собственных декораторов для копирования информации о завернутой функции. "
"Альтернативная версия предыдущего примера:"

#: ../../whatsnew/2.5.rst:201
msgid ":pep:`309` - Partial Function Application"
msgstr ":pep:`309` - Приложение с частичной функцией"

#: ../../whatsnew/2.5.rst:201
msgid ""
"PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and "
"Nick Coghlan, with adaptations by Raymond Hettinger."
msgstr ""
"PEP предложен и написан Питером Харрисом; реализован Хе-Шиком Чангом и Ником "
"Когланом, с адаптацией Рэймонда Хеттингера."

#: ../../whatsnew/2.5.rst:210
msgid "PEP 314: Metadata for Python Software Packages v1.1"
msgstr "PEP 314: Метаданные для пакетов программного обеспечения Python v1.1"

#: ../../whatsnew/2.5.rst:212
msgid ""
"Some simple dependency support was added to Distutils.  The :func:`setup` "
"function now has ``requires``, ``provides``, and ``obsoletes`` keyword "
"parameters.  When you build a source distribution using the ``sdist`` "
"command, the dependency information will be recorded in the :file:`PKG-INFO` "
"file."
msgstr ""
"В Distutils была добавлена ​​​​некоторая простая поддержка зависимостей. "
"Функция :func:`setup` теперь имеет ключевые параметры ``requires``, "
"``provides`` и ``obsoletes``. Когда вы собираете исходный дистрибутив с "
"помощью команды sdist, информация о зависимостях будет записана в файле :"
"file:`PKG-INFO`."

#: ../../whatsnew/2.5.rst:217
msgid ""
"Another new keyword parameter is ``download_url``, which should be set to a "
"URL for the package's source code.  This means it's now possible to look up "
"an entry in the package index, determine the dependencies for a package, and "
"download the required packages. ::"
msgstr ""
"Еще один новый параметр ключевого слова — «download_url», для которого "
"должен быть установлен URL-адрес исходного кода пакета. Это означает, что "
"теперь можно найти запись в индексе пакета, определить зависимости пакета и "
"загрузить необходимые пакеты. ::"

#: ../../whatsnew/2.5.rst:231
msgid ""
"Another new enhancement to the Python package index at https://pypi.org is "
"storing source and binary archives for a package.  The new :command:`upload` "
"Distutils command will upload a package to the repository."
msgstr ""
"Еще одно новое усовершенствование индекса пакетов Python на https://pypi.org "
"— сохранение исходных и двоичных архивов пакета. Новая команда Distutils :"
"command:`upload` загрузит пакет в репозиторий."

#: ../../whatsnew/2.5.rst:236
msgid ""
"Before a package can be uploaded, you must be able to build a distribution "
"using the :command:`sdist` Distutils command.  Once that works, you can run "
"``python setup.py upload`` to add your package to the PyPI archive.  "
"Optionally you can GPG-sign the package by supplying the :option:`!--sign` "
"and :option:`!--identity` options."
msgstr ""
"Прежде чем пакет можно будет загрузить, вы должны иметь возможность собрать "
"дистрибутив с помощью команды :command:`sdist` Distutils. Как только это "
"сработает, вы можете запустить ``python setup.py upload``, чтобы добавить "
"свой пакет в архив PyPI. При желании вы можете подписать пакет GPG, указав "
"параметры :option:`!--sign` и :option:`!--identity`."

#: ../../whatsnew/2.5.rst:242
msgid ""
"Package uploading was implemented by Martin von Löwis and Richard Jones."
msgstr "Загрузку пакетов осуществили Мартин фон Лёвис и Ричард Джонс."

#: ../../whatsnew/2.5.rst:248
msgid ":pep:`314` - Metadata for Python Software Packages v1.1"
msgstr ""
":pep:`314` - Метаданные для пакетов программного обеспечения Python v1.1"

#: ../../whatsnew/2.5.rst:248
msgid ""
"PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake; "
"implemented by Richard Jones and Fred Drake."
msgstr ""
"PEP предложен и написан А. М. Кучлингом, Ричардом Джонсом и Фредом Дрейком; "
"реализован Ричардом Джонсом и Фредом Дрейком."

#: ../../whatsnew/2.5.rst:257
msgid "PEP 328: Absolute and Relative Imports"
msgstr "PEP 328: Абсолютный и относительный импорт"

#: ../../whatsnew/2.5.rst:259
msgid ""
"The simpler part of :pep:`328` was implemented in Python 2.4: parentheses "
"could now be used to enclose the names imported from a module using the "
"``from ... import ...`` statement, making it easier to import many different "
"names."
msgstr ""
"Более простая часть :pep:`328` была реализована в Python 2.4: круглые скобки "
"теперь можно было использовать для заключения имён, импортированных из "
"модуля, с помощью оператора ``from ... import ...``, что упростило импорт. "
"много разных названий."

#: ../../whatsnew/2.5.rst:263
msgid ""
"The more complicated part has been implemented in Python 2.5: importing a "
"module can be specified to use absolute or package-relative imports.  The "
"plan is to move toward making absolute imports the default in future "
"versions of Python."
msgstr ""
"Более сложная часть была реализована в Python 2.5: при импорте модуля можно "
"указать использование абсолютного или относительного импорта. План состоит в "
"том, чтобы сделать абсолютный импорт по умолчанию в будущих версиях Python."

#: ../../whatsnew/2.5.rst:267
msgid "Let's say you have a package directory like this::"
msgstr "Допустим, у вас есть такой каталог пакета:"

#: ../../whatsnew/2.5.rst:274
msgid ""
"This defines a package named :mod:`pkg` containing the :mod:`pkg.main` and :"
"mod:`pkg.string` submodules."
msgstr ""
"Здесь определяется пакет с именем :mod:`pkg`, содержащий подмодули :mod:`pkg."
"main` и :mod:`pkg.string`."

#: ../../whatsnew/2.5.rst:277
msgid ""
"Consider the code in the :file:`main.py` module.  What happens if it "
"executes the statement ``import string``?  In Python 2.4 and earlier, it "
"will first look in the package's directory to perform a relative import, "
"finds :file:`pkg/string.py`, imports the contents of that file as the :mod:"
"`pkg.string` module, and that module is bound to the name ``string`` in the :"
"mod:`pkg.main` module's namespace."
msgstr ""
"Рассмотрим код в модуле :file:`main.py`. Что произойдет, если он выполнит "
"оператор ``import string``? В Python 2.4 и более ранних версиях он сначала "
"просматривает каталог пакета для выполнения относительного импорта, находит :"
"file:`pkg/string.py`, импортирует содержимое этого файла как модуль :mod:"
"`pkg.string`, и этот модуль привязан к имени ``string`` в пространстве имен "
"модуля :mod:`pkg.main`."

#: ../../whatsnew/2.5.rst:284
msgid ""
"That's fine if :mod:`pkg.string` was what you wanted.  But what if you "
"wanted Python's standard :mod:`string` module?  There's no clean way to "
"ignore :mod:`pkg.string` and look for the standard module; generally you had "
"to look at the contents of ``sys.modules``, which is slightly unclean.    "
"Holger Krekel's :mod:`py.std` package provides a tidier way to perform "
"imports from the standard library, ``import py; py.std.string.join()``, but "
"that package isn't available on all Python installations."
msgstr ""
"Это нормально, если вам нужен :mod:`pkg.string`. Но что, если вам нужен "
"стандартный модуль Python :mod:`string`? Не существует чистого способа "
"игнорировать :mod:`pkg.string` и искать стандартный модуль; обычно вам "
"приходилось смотреть содержимое ``sys.modules``, которое немного нечисто. "
"Пакет :mod:`py.std` Хольгера Крекеля предоставляет более удобный способ "
"импорта из стандартной библиотеки ``import py; py.std.string.join()``, но "
"этот пакет доступен не во всех установках Python."

#: ../../whatsnew/2.5.rst:292
msgid ""
"Reading code which relies on relative imports is also less clear, because a "
"reader may be confused about which module, :mod:`string` or :mod:`pkg."
"string`, is intended to be used.  Python users soon learned not to duplicate "
"the names of standard library modules in the names of their packages' "
"submodules, but you can't protect against having your submodule's name being "
"used for a new module added in a future version of Python."
msgstr ""
"Чтение кода, основанного на относительном импорте, также менее понятно, "
"поскольку читатель может запутаться в том, какой модуль, :mod:`string` или :"
"mod:`pkg.string`, предназначен для использования. Пользователи Python вскоре "
"научились не дублировать имена модулей стандартной библиотеки в именах "
"подмодулей своих пакетов, но вы не можете защититься от использования имени "
"вашего подмодуля для нового модуля, добавленного в будущей версии Python."

#: ../../whatsnew/2.5.rst:299
msgid ""
"In Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute "
"imports using a ``from __future__ import absolute_import`` directive.  This "
"absolute-import behaviour will become the default in a future version "
"(probably Python 2.7).  Once absolute imports  are the default, ``import "
"string`` will always find the standard library's version. It's suggested "
"that users should begin using absolute imports as much as possible, so it's "
"preferable to begin writing ``from pkg import string`` in your code."
msgstr ""
"В Python 2.5 вы можете переключить поведение :keyword:`import` на абсолютный "
"импорт, используя директиву ``from __future__ import Absolute_import``. "
"Такое поведение абсолютного импорта станет поведением по умолчанию в будущей "
"версии (вероятно, Python 2.7). Как только абсолютный импорт станет значением "
"по умолчанию, ``строка импорта`` всегда будет находить версию стандартной "
"библиотеки. Предполагается, что пользователям следует как можно чаще "
"использовать абсолютный импорт, поэтому предпочтительнее начать писать в "
"коде ``из строки импорта pkg``."

#: ../../whatsnew/2.5.rst:307
msgid ""
"Relative imports are still possible by adding a leading period  to the "
"module name when using the ``from ... import`` form::"
msgstr ""
"Относительный импорт по-прежнему возможен путем добавления точки к имени "
"модуля при использовании формы ``from ... import``::"

#: ../../whatsnew/2.5.rst:315
msgid ""
"This imports the :mod:`string` module relative to the current package, so "
"in :mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg."
"string`. Additional leading periods perform the relative import starting "
"from the parent of the current package.  For example, code in the :mod:`A.B."
"C` module can do::"
msgstr ""
"При этом модуль :mod:`string` импортируется относительно текущего пакета, "
"поэтому в :mod:`pkg.main` будут импортированы *name1* и *name2* из :mod:`pkg."
"string`. Дополнительные ведущие периоды выполняют относительный импорт, "
"начиная с родительского элемента текущего пакета. Например, код в модуле :"
"mod:`ABC` может выполнять::"

#: ../../whatsnew/2.5.rst:324
msgid ""
"Leading periods cannot be used with the ``import modname``  form of the "
"import statement, only the ``from ... import`` form."
msgstr ""
"Начальные точки не могут использоваться с формой ``import modname`` "
"оператора импорта, только с формой ``from ... import``."

#: ../../whatsnew/2.5.rst:331
msgid ":pep:`328` - Imports: Multi-Line and Absolute/Relative"
msgstr ":pep:`328` - Импорт: многострочный и абсолютный/относительный"

#: ../../whatsnew/2.5.rst:331
msgid "PEP written by Aahz; implemented by Thomas Wouters."
msgstr "PEP, написанный Аазом; реализован Томасом Воутерсом."

#: ../../whatsnew/2.5.rst:333
msgid "https://pylib.readthedocs.io/"
msgstr "https://pylib.readthedocs.io/"

#: ../../whatsnew/2.5.rst:334
msgid ""
"The py library by Holger Krekel, which contains the :mod:`py.std` package."
msgstr "Библиотека py от Хольгера Крекеля, содержащая пакет :mod:`py.std`."

#: ../../whatsnew/2.5.rst:342
msgid "PEP 338: Executing Modules as Scripts"
msgstr "PEP 338: выполнение модулей как сценариев"

#: ../../whatsnew/2.5.rst:344
msgid ""
"The :option:`-m` switch added in Python 2.4 to execute a module as a script "
"gained a few more abilities.  Instead of being implemented in C code inside "
"the Python interpreter, the switch now uses an implementation in a new "
"module, :mod:`runpy`."
msgstr ""
"Переключатель :option:`-m`, добавленный в Python 2.4 для выполнения модуля "
"как скрипта, получил еще несколько возможностей. Вместо того, чтобы быть "
"реализованным в коде C внутри интерпретатора Python, переключатель теперь "
"использует реализацию в новом модуле :mod:`runpy`."

#: ../../whatsnew/2.5.rst:349
msgid ""
"The :mod:`runpy` module implements a more sophisticated import mechanism so "
"that it's now possible to run modules in a package such as :mod:`pychecker."
"checker`. The module also supports alternative import mechanisms such as "
"the :mod:`zipimport` module.  This means you can add a .zip archive's path "
"to ``sys.path`` and then use the :option:`-m` switch to execute code from "
"the archive."
msgstr ""
"Модуль :mod:`runpy` реализует более сложный механизм импорта, так что теперь "
"можно запускать модули в пакете, например :mod:`pychecker.checker`. Модуль "
"также поддерживает альтернативные механизмы импорта, такие как модуль :mod:"
"`zipimport`. Это означает, что вы можете добавить путь к .zip-архиву в ``sys."
"path``, а затем использовать ключ :option:`-m` для выполнения кода из архива."

#: ../../whatsnew/2.5.rst:359
msgid ":pep:`338` - Executing modules as scripts"
msgstr ":pep:`338` - Выполнение модулей как скриптов"

#: ../../whatsnew/2.5.rst:360
msgid "PEP written and  implemented by Nick Coghlan."
msgstr "PEP написан и реализован Ником Когланом."

#: ../../whatsnew/2.5.rst:368
msgid "PEP 341: Unified try/except/finally"
msgstr "PEP 341: унифицированная попытка/исключение/наконец"

#: ../../whatsnew/2.5.rst:370
msgid ""
"Until Python 2.5, the :keyword:`try` statement came in two flavours. You "
"could use a :keyword:`finally` block to ensure that code is always executed, "
"or one or more :keyword:`except` blocks to catch  specific exceptions.  You "
"couldn't combine both :keyword:`!except` blocks and a :keyword:`!finally` "
"block, because generating the right bytecode for the combined version was "
"complicated and it wasn't clear what the semantics of the combined statement "
"should be."
msgstr ""
"До Python 2.5 оператор :keyword:`try` существовал в двух вариантах. Вы "
"можете использовать блок :keyword:`finally`, чтобы гарантировать, что код "
"всегда выполняется, или один или несколько блоков :keyword:`Exception`, "
"чтобы перехватывать определенные исключения. Вы не могли объединить оба "
"блока :keyword:`!кроме` и блок :keyword:`!finally`, потому что генерация "
"правильного байт-кода для объединенной версии была сложной, и было неясно, "
"какова должна быть семантика объединенного оператора. быть."

#: ../../whatsnew/2.5.rst:377
msgid ""
"Guido van Rossum spent some time working with Java, which does support the "
"equivalent of combining :keyword:`except` blocks and a :keyword:`finally` "
"block, and this clarified what the statement should mean.  In Python 2.5, "
"you can now write::"
msgstr ""
"Гвидо ван Россум некоторое время работал с Java, которая поддерживает "
"эквивалент объединения блоков :keyword:`кроме` и блока :keyword:`finally`, и "
"это прояснило, что должно означать это утверждение. В Python 2.5 теперь "
"можно писать::"

#: ../../whatsnew/2.5.rst:393
msgid ""
"The code in *block-1* is executed.  If the code raises an exception, the "
"various :keyword:`except` blocks are tested: if the exception is of class :"
"class:`Exception1`, *handler-1* is executed; otherwise if it's of class :"
"class:`Exception2`, *handler-2* is executed, and so forth.  If no exception "
"is raised, the *else-block* is executed."
msgstr ""
"Код в *блоке-1* выполняется. Если код вызывает исключение, проверяются "
"различные блоки :keyword:`Exception`: если исключение относится к классу :"
"class:`Exception1`, выполняется *handler-1*; в противном случае, если он "
"принадлежит к классу :class:`Exception2`, выполняется *handler-2* и так "
"далее. Если исключение не возникает, выполняется *else-block*."

#: ../../whatsnew/2.5.rst:399
msgid ""
"No matter what happened previously, the *final-block* is executed once the "
"code block is complete and any raised exceptions handled. Even if there's an "
"error in an exception handler or the *else-block* and a new exception is "
"raised, the code in the *final-block* is still run."
msgstr ""
"Независимо от того, что произошло ранее, *final-block* выполняется после "
"завершения блока кода и обработки всех возникших исключений. Даже если в "
"обработчике исключений или *else-блоке* возникла ошибка и возникло новое "
"исключение, код в *final-block* все равно выполняется."

#: ../../whatsnew/2.5.rst:407
msgid ":pep:`341` - Unifying try-except and try-finally"
msgstr ":pep:`341` - Объединение try-кроме и try-finally"

#: ../../whatsnew/2.5.rst:408
msgid "PEP written by Georg Brandl;  implementation by Thomas Lee."
msgstr "PEP, написанный Георгом Брандлом; реализация Томаса Ли."

#: ../../whatsnew/2.5.rst:416
msgid "PEP 342: New Generator Features"
msgstr "PEP 342: Новые возможности генератора"

#: ../../whatsnew/2.5.rst:418
msgid ""
"Python 2.5 adds a simple way to pass values *into* a generator. As "
"introduced in Python 2.3, generators only produce output; once a generator's "
"code was invoked to create an iterator, there was no way to pass any new "
"information into the function when its execution is resumed.  Sometimes the "
"ability to pass in some information would be useful.  Hackish solutions to "
"this include making the generator's code look at a global variable and then "
"changing the global variable's value, or passing in some mutable object that "
"callers then modify."
msgstr ""
"В Python 2.5 добавлен простой способ передачи значений *в* генератор. Как "
"было представлено в Python 2.3, генераторы производят только выходные "
"данные; как только код генератора был вызван для создания итератора, не было "
"возможности передать какую-либо новую информацию в функцию при возобновлении "
"ее выполнения. Иногда возможность передавать некоторую информацию может "
"оказаться полезной. Хакерские решения этой проблемы включают в себя "
"заставить код генератора просматривать глобальную переменную, а затем "
"изменять значение глобальной переменной или передавать некоторый изменяемый "
"объект, который затем модифицируют вызывающие программы."

#: ../../whatsnew/2.5.rst:426
msgid "To refresh your memory of basic generators, here's a simple example::"
msgstr ""
"Чтобы освежить вашу память об основных генераторах, вот простой пример:"

#: ../../whatsnew/2.5.rst:434
msgid ""
"When you call ``counter(10)``, the result is an iterator that returns the "
"values from 0 up to 9.  On encountering the :keyword:`yield` statement, the "
"iterator returns the provided value and suspends the function's execution, "
"preserving the local variables. Execution resumes on the following call to "
"the iterator's :meth:`next` method, picking up after the :keyword:`!yield` "
"statement."
msgstr ""
"Когда вы вызываете ``counter(10)``, результатом является итератор, который "
"возвращает значения от 0 до 9. При обнаружении оператора :keyword:`yield` "
"итератор возвращает предоставленное значение и приостанавливает выполнение "
"функции. сохранение локальных переменных. Выполнение возобновляется после "
"следующего вызова метода итератора :meth:`next`, который начинается после "
"оператора :keyword:`!yield`."

#: ../../whatsnew/2.5.rst:440
msgid ""
"In Python 2.3, :keyword:`yield` was a statement; it didn't return any "
"value.  In 2.5, :keyword:`!yield` is now an expression, returning a value "
"that can be assigned to a variable or otherwise operated on::"
msgstr ""
"В Python 2.3 :keyword:`yield` был оператором; он не вернул никакого "
"значения. В версии 2.5 :keyword:`!yield` теперь является выражением, "
"возвращающим значение, которое можно присвоить переменной или иным образом "
"обработать::"

#: ../../whatsnew/2.5.rst:446
msgid ""
"I recommend that you always put parentheses around a :keyword:`yield` "
"expression when you're doing something with the returned value, as in the "
"above example. The parentheses aren't always necessary, but it's easier to "
"always add them instead of having to remember when they're needed."
msgstr ""
"Я рекомендую вам всегда заключать выражение :keyword:`yield` в круглые "
"скобки, когда вы что-то делаете с возвращаемым значением, как в приведенном "
"выше примере. Круглые скобки не всегда необходимы, но их легче всегда "
"добавлять, чем запоминать, когда они потребуются."

#: ../../whatsnew/2.5.rst:451
msgid ""
"(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\ -"
"expression must always be parenthesized except when it occurs at the top-"
"level expression on the right-hand side of an assignment.  This means you "
"can write ``val = yield i`` but have to use parentheses when there's an "
"operation, as in ``val = (yield i) + 12``.)"
msgstr ""
"(:pep:`342` объясняет точные правила, которые заключаются в том, что :"
"keyword:`yield`\\ -выражение всегда должно быть заключено в круглые скобки, "
"за исключением случаев, когда оно встречается в выражении верхнего уровня в "
"правой части присваивания. Это означает, что вы можете написать ``val = "
"yield i``, но при выполнении операции вам придется использовать круглые "
"скобки, как в ``val = (yield i) + 12``.)"

#: ../../whatsnew/2.5.rst:458
msgid ""
"Values are sent into a generator by calling its ``send(value)`` method.  The "
"generator's code is then resumed and the :keyword:`yield` expression returns "
"the specified *value*.  If the regular :meth:`next` method is called, the :"
"keyword:`!yield` returns :const:`None`."
msgstr ""
"Значения отправляются в генератор путем вызова его метода send(value). Затем "
"работа генератора возобновляется, и выражение :keyword:`yield` возвращает "
"указанное *значение*. Если вызывается обычный метод :meth:`next`, :keyword:`!"
"yield` возвращает :const:`None`."

#: ../../whatsnew/2.5.rst:463
msgid ""
"Here's the previous example, modified to allow changing the value of the "
"internal counter. ::"
msgstr ""
"Вот предыдущий пример, измененный, чтобы можно было изменять значение "
"внутреннего счетчика. ::"

#: ../../whatsnew/2.5.rst:476
msgid "And here's an example of changing the counter::"
msgstr "А вот пример изменения счетчика::"

#: ../../whatsnew/2.5.rst:493
msgid ""
":keyword:`yield` will usually return :const:`None`, so you should always "
"check for this case.  Don't just use its value in expressions unless you're "
"sure that the :meth:`send` method will be the only method used to resume "
"your generator function."
msgstr ""
":keyword:`yield` обычно возвращает :const:`None`, поэтому вам всегда следует "
"проверять этот случай. Не используйте его значение в выражениях, если вы не "
"уверены, что метод :meth:`send` будет единственным методом, используемым для "
"возобновления функции генератора."

#: ../../whatsnew/2.5.rst:498
msgid ""
"In addition to :meth:`send`, there are two other new methods on generators:"
msgstr "Помимо :meth:`send`, в генераторах есть еще два новых метода:"

#: ../../whatsnew/2.5.rst:500
msgid ""
"``throw(type, value=None, traceback=None)`` is used to raise an exception "
"inside the generator; the exception is raised by the :keyword:`yield` "
"expression where the generator's execution is paused."
msgstr ""
"``throw(type, value=None, Traceback=None)`` используется для вызова "
"исключения внутри генератора; исключение вызывается выражением :keyword:"
"`yield`, где выполнение генератора приостанавливается."

#: ../../whatsnew/2.5.rst:504
msgid ""
":meth:`close` raises a new :exc:`GeneratorExit` exception inside the "
"generator to terminate the iteration.  On receiving this exception, the "
"generator's code must either raise :exc:`GeneratorExit` or :exc:"
"`StopIteration`.  Catching the :exc:`GeneratorExit` exception and returning "
"a value is illegal and will trigger a :exc:`RuntimeError`; if the function "
"raises some other exception, that exception is propagated to the caller.  :"
"meth:`close` will also be called by Python's garbage collector when the "
"generator is garbage-collected."
msgstr ""
":meth:`close` вызывает новое исключение :exc:`GeneratorExit` внутри "
"генератора для завершения итерации. При получении этого исключения код "
"генератора должен либо вызвать :exc:`GeneratorExit`, либо :exc:"
"`StopIteration`. Перехват исключения :exc:`GeneratorExit` и возврат значения "
"незаконны и вызовут ошибку :exc:`RuntimeError`; если функция вызывает какое-"
"либо другое исключение, это исключение передается вызывающей стороне. :meth:"
"`close` также будет вызываться сборщиком мусора Python, когда генератор "
"выполняет сбор мусора."

#: ../../whatsnew/2.5.rst:512
msgid ""
"If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I "
"suggest using a ``try: ... finally:`` suite instead of  catching :exc:"
"`GeneratorExit`."
msgstr ""
"Если вам нужно запустить код очистки при возникновении :exc:`GeneratorExit`, "
"я предлагаю использовать ``try: ...finally:`` вместо перехвата :exc:"
"`GeneratorExit`."

#: ../../whatsnew/2.5.rst:515
msgid ""
"The cumulative effect of these changes is to turn generators from one-way "
"producers of information into both producers and consumers."
msgstr ""
"Совокупный эффект этих изменений состоит в том, чтобы превратить генераторов "
"из односторонних производителей информации в производителей и потребителей."

#: ../../whatsnew/2.5.rst:518
msgid ""
"Generators also become *coroutines*, a more generalized form of subroutines. "
"Subroutines are entered at one point and exited at another point (the top of "
"the function, and a :keyword:`return` statement), but coroutines can be "
"entered, exited, and resumed at many different points (the :keyword:`yield` "
"statements). We'll have to figure out patterns for using coroutines "
"effectively in Python."
msgstr ""
"Генераторы также становятся сопрограммами, более обобщенной формой "
"подпрограмм. Вход в подпрограммы осуществляется в одной точке, а выход из "
"них — в другой (верхняя часть функции и оператор :keyword:`return`), но вход "
"в сопрограммы, выход из них и возобновление могут осуществляться во многих "
"разных точках (метод :keyword:`yield `заявления). Нам придется выяснить "
"шаблоны эффективного использования сопрограмм в Python."

#: ../../whatsnew/2.5.rst:524
msgid ""
"The addition of the :meth:`close` method has one side effect that isn't "
"obvious. :meth:`close` is called when a generator is garbage-collected, so "
"this means the generator's code gets one last chance to run before the "
"generator is destroyed. This last chance means that ``try...finally`` "
"statements in generators can now be guaranteed to work; the :keyword:"
"`finally` clause will now always get a chance to run.  The syntactic "
"restriction that you couldn't mix :keyword:`yield` statements with a ``try..."
"finally`` suite has therefore been removed.  This seems like a minor bit of "
"language trivia, but using generators and ``try...finally`` is actually "
"necessary in order to implement the :keyword:`with` statement described by :"
"pep:`343`.  I'll look at this new statement in the following  section."
msgstr ""
"Добавление метода :meth:`close` имеет один неочевидный побочный эффект. :"
"meth:`close` вызывается, когда генератор очищается от мусора, поэтому это "
"означает, что код генератора получает последний шанс запуститься, прежде чем "
"генератор будет уничтожен. Этот последний шанс означает, что операторы "
"``try...finally`` в генераторах теперь могут гарантированно работать; "
"предложение :keyword:`finally` теперь всегда будет иметь возможность "
"выполниться. Таким образом, синтаксическое ограничение, заключающееся в том, "
"что нельзя смешивать операторы :keyword:`yield` с набором ``try...finally``, "
"было удалено. Это кажется незначительной языковой мелочью, но использование "
"генераторов и ``try...finally`` на самом деле необходимо для реализации "
"оператора :keyword:`with`, описанного :pep:`343`. Я рассмотрю это новое "
"утверждение в следующем разделе."

#: ../../whatsnew/2.5.rst:536
msgid ""
"Another even more esoteric effect of this change: previously, the :attr:"
"`gi_frame` attribute of a generator was always a frame object. It's now "
"possible for :attr:`gi_frame` to be ``None`` once the generator has been "
"exhausted."
msgstr ""
"Еще один, еще более эзотерический эффект этого изменения: раньше атрибут "
"генератора :attr:`gi_frame` всегда был объектом фрейма. Теперь возможно, "
"что :attr:`gi_frame` будет иметь значение ``None`` после того, как генератор "
"исчерпан."

#: ../../whatsnew/2.5.rst:549
msgid ":pep:`342` - Coroutines via Enhanced Generators"
msgstr ""
"Предложение по добавлению генераторов и оператора :keyword:`yield` в Python."

#: ../../whatsnew/2.5.rst:545
msgid ""
"PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip "
"J. Eby.  Includes examples of  some fancier uses of generators as coroutines."
msgstr ""
"PEP, написанный Гвидо ван Россумом и Филиппом Дж. Эби; реализован Филиппом "
"Дж. Эби. Включает примеры более необычного использования генераторов в "
"качестве сопрограмм."

#: ../../whatsnew/2.5.rst:548
msgid ""
"Earlier versions of these features were proposed in  :pep:`288` by Raymond "
"Hettinger and :pep:`325` by Samuele Pedroni."
msgstr ""
"Более ранние версии этих функций были предложены в :pep:`288` Рэймондом "
"Хеттингером и :pep:`325` Сэмюэлем Педрони."

#: ../../whatsnew/2.5.rst:552
msgid "https://en.wikipedia.org/wiki/Coroutine"
msgstr "https://en.wikipedia.org/wiki/Coroutine"

#: ../../whatsnew/2.5.rst:552
msgid "The Wikipedia entry for  coroutines."
msgstr "Статья в Википедии о сопрограммах."

#: ../../whatsnew/2.5.rst:554
msgid ""
"https://web.archive.org/web/20160321211320/http://www.sidhe.org/~dan/blog/"
"archives/000178.html"
msgstr ""
"https://web.archive.org/web/20160321211320/http://www.sidhe.org/~dan/blog/"
"archives/000178.html"

#: ../../whatsnew/2.5.rst:555
msgid ""
"An explanation of coroutines from a Perl point of view, written by Dan "
"Sugalski."
msgstr "Объяснение сопрограмм с точки зрения Perl, написанное Дэном Сугальски."

#: ../../whatsnew/2.5.rst:563
msgid "PEP 343: The 'with' statement"
msgstr "PEP 343: оператор «with»"

#: ../../whatsnew/2.5.rst:565
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"Оператор ':keyword:`with`' поясняет код, который ранее использовал блоки "
"``try...finally`` для обеспечения выполнения кода очистки. В этом разделе я "
"рассмотрю это утверждение в том виде, в каком оно будет обычно "
"использоваться. В следующем разделе я рассмотрю детали реализации и покажу, "
"как писать объекты для использования с этим оператором."

#: ../../whatsnew/2.5.rst:571
msgid ""
"The ':keyword:`with`' statement is a new control-flow structure whose basic "
"structure is::"
msgstr ""
"Оператор ':keyword:`with`' представляет собой новую структуру потока "
"управления, базовая структура которой следующая:"

#: ../../whatsnew/2.5.rst:577
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`~object.__enter__` and :"
"meth:`~object.__exit__` methods."
msgstr ""
"Выражение оценивается, и в результате должен получиться объект, "
"поддерживающий протокол управления контекстом (то есть имеющий методы :meth:"
"`~object.__enter__` и :meth:`~object.__exit__`."

#: ../../whatsnew/2.5.rst:581
msgid ""
"The object's :meth:`~object.__enter__` is called before *with-block* is "
"executed and therefore can run set-up code. It also may return a value that "
"is bound to the name *variable*, if given.  (Note carefully that *variable* "
"is *not* assigned the result of *expression*.)"
msgstr ""
":meth:`~object.__enter__` объекта вызывается перед выполнением *with-block* "
"и, следовательно, может запускать код настройки. Он также может возвращать "
"значение, привязанное к имени *переменная*, если оно задано. (Обратите "
"внимание, что *переменной* *не* присваивается результат *выражения*.)"

#: ../../whatsnew/2.5.rst:586
msgid ""
"After execution of the *with-block* is finished, the object's :meth:`~object."
"__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""
"После завершения выполнения *with-block* вызывается метод объекта :meth:"
"`~object.__exit__`, даже если блок вызвал исключение, и поэтому можно "
"запустить код очистки."

#: ../../whatsnew/2.5.rst:590
msgid ""
"To enable the statement in Python 2.5, you need to add the following "
"directive to your module::"
msgstr ""
"Чтобы включить оператор в Python 2.5, вам необходимо добавить в свой модуль "
"следующую директиву:"

#: ../../whatsnew/2.5.rst:595
msgid "The statement will always be enabled in Python 2.6."
msgstr "Этот оператор всегда будет включен в Python 2.6."

#: ../../whatsnew/2.5.rst:597
msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""
"Некоторые стандартные объекты Python теперь поддерживают протокол управления "
"контекстом и могут использоваться с оператором ':keyword:`with`'. Файловые "
"объекты являются одним из примеров::"

#: ../../whatsnew/2.5.rst:605
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr ""
"После выполнения этого оператора объект файла в *f* будет автоматически "
"закрыт, даже если цикл :keyword:`for` вызвал исключение в середине блока."

#: ../../whatsnew/2.5.rst:611
msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`~object.__enter__` returns *self*."
msgstr ""
"В данном случае *f* — это тот же объект, созданный :func:`open`, поскольку :"
"meth:`~object.__enter__` возвращает *self*."

#: ../../whatsnew/2.5.rst:614
msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""
"Блокировки и переменные условия модуля :mod:`threading` также поддерживают "
"оператор ':keyword:`with`'::"

#: ../../whatsnew/2.5.rst:622
msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""
"Блокировка устанавливается до выполнения блока и всегда снимается после "
"завершения блока."

#: ../../whatsnew/2.5.rst:625
msgid ""
"The new :func:`localcontext` function in the :mod:`decimal` module makes it "
"easy to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
"Новая функция :func:`localcontext` в модуле :mod:`decimal` позволяет легко "
"сохранять и восстанавливать текущий десятичный контекст, который "
"инкапсулирует желаемую точность и характеристики округления для вычислений::"

#: ../../whatsnew/2.5.rst:644
msgid "Writing Context Managers"
msgstr "Написание контекстных менеджеров"

#: ../../whatsnew/2.5.rst:646
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"На самом деле оператор ':keyword:`with`' довольно сложен. Большинство людей "
"будут использовать ':keyword:`!with`' только вместе с существующими "
"объектами, и им не нужно знать эти детали, поэтому вы можете пропустить "
"остальную часть этого раздела, если хотите. Авторам новых объектов "
"необходимо будет понимать детали базовой реализации, и им следует продолжать "
"чтение."

#: ../../whatsnew/2.5.rst:652
msgid "A high-level explanation of the context management protocol is:"
msgstr "Подробное объяснение протокола управления контекстом:"

#: ../../whatsnew/2.5.rst:654
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`~object."
"__enter__` and :meth:`~object.__exit__` methods."
msgstr ""
"Выражение оценивается и должно привести к созданию объекта, называемого "
"«контекстным менеджером». Менеджер контекста должен иметь методы :meth:"
"`~object.__enter__` и :meth:`~object.__exit__`."

#: ../../whatsnew/2.5.rst:658
msgid ""
"The context manager's :meth:`~object.__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the "
"value is simply discarded."
msgstr ""
"Вызывается метод :meth:`~object.__enter__` контекстного менеджера. "
"Возвращаемое значение присваивается *VAR*. Если предложение ``'as VAR'`` "
"отсутствует, значение просто отбрасывается."

#: ../../whatsnew/2.5.rst:662
msgid "The code in *BLOCK* is executed."
msgstr "Код в *BLOCK* выполняется."

#: ../../whatsnew/2.5.rst:664
msgid ""
"If *BLOCK* raises an exception, the ``__exit__(type, value, traceback)`` is "
"called with the exception details, the same values returned by :func:`sys."
"exc_info`.  The method's return value controls whether the exception is re-"
"raised: any false value re-raises the exception, and ``True`` will result in "
"suppressing it.  You'll only rarely want to suppress the exception, because "
"if you do the author of the code containing the ':keyword:`with`' statement "
"will never realize anything went wrong."
msgstr ""
"Если *BLOCK* вызывает исключение, вызывается ``__exit__(type, value, "
"Traceback)`` с подробностями исключения, теми же значениями, которые "
"возвращает :func:`sys.exc_info`. Возвращаемое значение метода определяет, "
"будет ли исключение возникать повторно: любое ложное значение повторно "
"вызывает исключение, а значение True приведет к его подавлению. Вы будете "
"редко захотеть подавить исключение, потому что если вы это сделаете, автор "
"кода, содержащего оператор ':keyword:`with`', никогда не поймет, что что-то "
"пошло не так."

#: ../../whatsnew/2.5.rst:672
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`~object.__exit__` method "
"is still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"Если *BLOCK* не вызвал исключение, метод :meth:`~object.__exit__` все равно "
"вызывается, но все *type*, *value* и *traceback* имеют значение ``None``."

#: ../../whatsnew/2.5.rst:675
msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""
"Давайте подумаем на примере. Я не буду приводить подробный код, а лишь "
"набросаю методы, необходимые для базы данных, поддерживающей транзакции."

#: ../../whatsnew/2.5.rst:678
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"(Для людей, незнакомых с терминологией базы данных: набор изменений в базе "
"данных группируется в транзакцию. Транзакции могут быть либо зафиксированы, "
"что означает, что все изменения записываются в базу данных, или откатиться, "
"что означает, что все изменения отбрасываются и база данных не изменилась. "
"Дополнительную информацию см. в любом учебнике по базам данных.)"

#: ../../whatsnew/2.5.rst:684
msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""
"Предположим, существует объект, представляющий соединение с базой данных. "
"Нашей целью будет позволить пользователю писать такой код:"

#: ../../whatsnew/2.5.rst:693
msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"Транзакция должна быть зафиксирована, если код в блоке выполняется "
"безупречно, или откатиться, если есть исключение. Вот базовый интерфейс для :"
"class:`DatabaseConnection`, который я предполагаю::"

#: ../../whatsnew/2.5.rst:706
msgid ""
"The :meth:`~object.__enter__` method is pretty easy, having only to start a "
"new transaction.  For this application the resulting cursor object would be "
"a useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
"Метод :meth:`~object.__enter__` довольно прост, достаточно лишь начать новую "
"транзакцию. Для этого приложения полученный объект курсора будет полезным "
"результатом, поэтому метод вернет его. Затем пользователь может добавить "
"``as курсор`` в свой оператор ':keyword:`with`', чтобы привязать курсор к "
"имени переменной. ::"

#: ../../whatsnew/2.5.rst:718
msgid ""
"The :meth:`~object.__exit__` method is the most complicated because it's "
"where most of the work has to be done.  The method has to check if an "
"exception occurred.  If there was no exception, the transaction is "
"committed.  The transaction is rolled back if there was an exception."
msgstr ""
"Метод :meth:`~object.__exit__` является самым сложным, поскольку именно "
"здесь приходится выполнять большую часть работы. Метод должен проверить, "
"произошло ли исключение. Если исключений не было, транзакция фиксируется. "
"Транзакция откатывается, если возникло исключение."

#: ../../whatsnew/2.5.rst:723
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"В приведенном ниже коде выполнение просто прекращается с конца функции, "
"возвращая значение по умолчанию None. ``None`` имеет значение false, поэтому "
"исключение будет повторно вызвано автоматически. Если хотите, вы можете быть "
"более явным и добавить оператор :keyword:`return` в отмеченном месте. ::"

#: ../../whatsnew/2.5.rst:743
msgid "The contextlib module"
msgstr "Модуль contextlib"

#: ../../whatsnew/2.5.rst:745
msgid ""
"The new :mod:`contextlib` module provides some functions and a decorator "
"that are useful for writing objects for use with the ':keyword:`with`' "
"statement."
msgstr ""
"Новый модуль :mod:`contextlib` предоставляет некоторые функции и декоратор, "
"которые полезны для написания объектов для использования с оператором ':"
"keyword:`with`'."

#: ../../whatsnew/2.5.rst:748
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`~object.__enter__` method, and the value yielded will "
"be the method's return value that will get bound to the variable in the ':"
"keyword:`with`' statement's :keyword:`!as` clause, if any.  The code after "
"the :keyword:`yield` will be executed in the :meth:`~object.__exit__` "
"method.  Any exception raised in the block will be raised by the :keyword:`!"
"yield` statement."
msgstr ""
"Декоратор называется :func:`contextmanager` и позволяет вам написать одну "
"функцию-генератор вместо определения нового класса. Генератор должен "
"выдавать ровно одно значение. Код до :keyword:`yield` будет выполнен как "
"метод :meth:`~object.__enter__`, а полученное значение будет возвращаемым "
"значением метода, которое будет привязано к переменной в ':keyword: "
"Предложение :keyword:`!as` оператора `with`', если таковое имеется. Код "
"после :keyword:`yield` будет выполнен в методе :meth:`~object.__exit__`. "
"Любое исключение, возникшее в блоке, будет вызвано оператором :keyword:`!"
"yield`."

#: ../../whatsnew/2.5.rst:757
msgid ""
"Our database example from the previous section could be written  using this "
"decorator as::"
msgstr ""
"Наш пример базы данных из предыдущего раздела можно записать с "
"использованием этого декоратора как:"

#: ../../whatsnew/2.5.rst:777
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
"Модуль :mod:`contextlib` также имеет функцию ``nested(mgr1, mgr2, ...)``, "
"которая объединяет несколько менеджеров контекста, поэтому вам не нужно "
"писать вложенный ':keyword:`with`' заявления. В этом примере один оператор ':"
"keyword:`!with`' одновременно запускает транзакцию базы данных и получает "
"блокировку потока::"

#: ../../whatsnew/2.5.rst:786
msgid ""
"Finally, the ``closing(object)`` function returns *object* so that it can be "
"bound to a variable, and calls ``object.close`` at the end of the block. ::"
msgstr ""
"Наконец, функция Closing(object) возвращает *object*, чтобы его можно было "
"привязать к переменной, и вызывает object.close в конце блока. ::"

#: ../../whatsnew/2.5.rst:803
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Оператор \"with\""

#: ../../whatsnew/2.5.rst:800
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP, написанный Гвидо ван Россумом и Ником Когланом; реализован Майком "
"Блэндом, Гвидо ван Россумом и Нилом Норвицем. PEP показывает код, "
"сгенерированный для оператора ':keyword:`with`', который может быть полезен "
"при изучении того, как этот оператор работает."

#: ../../whatsnew/2.5.rst:805
msgid "The documentation  for the :mod:`contextlib` module."
msgstr "Документация для модуля :mod:`contextlib`."

#: ../../whatsnew/2.5.rst:813
msgid "PEP 352: Exceptions as New-Style Classes"
msgstr "PEP 352: Исключения как классы нового стиля"

#: ../../whatsnew/2.5.rst:815
msgid ""
"Exception classes can now be new-style classes, not just classic classes, "
"and the built-in :exc:`Exception` class and all the standard built-in "
"exceptions (:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style "
"classes."
msgstr ""
"Классы исключений теперь могут быть классами нового стиля, а не только "
"классическими классами, встроенным классом :exc:`Exception` и всеми "
"стандартными встроенными исключениями (:exc:`NameError`, :exc:`ValueError`, "
"и т. д.) теперь являются классами нового стиля."

#: ../../whatsnew/2.5.rst:819
msgid ""
"The inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, "
"the inheritance relationships are::"
msgstr ""
"Иерархия наследования исключений была немного изменена. В версии 2.5 "
"отношения наследования следующие:"

#: ../../whatsnew/2.5.rst:828
msgid ""
"This rearrangement was done because people often want to catch all "
"exceptions that indicate program errors.  :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit` aren't errors, though, and usually represent an explicit action "
"such as the user hitting :kbd:`Control-C` or code calling :func:`sys.exit`.  "
"A bare ``except:`` will catch all exceptions, so you commonly need to list :"
"exc:`KeyboardInterrupt` and :exc:`SystemExit` in order to re-raise them.  "
"The usual pattern is::"
msgstr ""
"Эта перестановка была сделана потому, что люди часто хотят перехватить все "
"исключения, указывающие на ошибки программы. :exc:`KeyboardInterrupt` и :exc:"
"`SystemExit`, однако, не являются ошибками и обычно представляют собой явное "
"действие, такое как нажатие пользователем :kbd:`Control-C` или вызов кода :"
"func:`sys.exit` . Простое ``Exception:`` перехватывает все исключения, "
"поэтому вам обычно нужно перечислить :exc:`KeyboardInterrupt` и :exc:"
"`SystemExit`, чтобы их повторно вызвать. Обычная схема:"

#: ../../whatsnew/2.5.rst:843
msgid ""
"In Python 2.5, you can now write ``except Exception`` to achieve the same "
"result, catching all the exceptions that usually indicate errors  but "
"leaving :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in "
"previous versions, a bare ``except:`` still catches all exceptions."
msgstr ""
"В Python 2.5 вы теперь можете написать ``кроме исключений`` для достижения "
"того же результата, перехватывая все исключения, которые обычно указывают на "
"ошибки, но оставляя :exc:`KeyboardInterrupt` и :exc:`SystemExit` в покое. "
"Как и в предыдущих версиях, пустое ``кроме:`` по-прежнему перехватывает все "
"исключения."

#: ../../whatsnew/2.5.rst:848
msgid ""
"The goal for Python 3.0 is to require any class raised as an exception to "
"derive from :exc:`BaseException` or some descendant of :exc:`BaseException`, "
"and future releases in the Python 2.x series may begin to enforce this "
"constraint. Therefore, I suggest you begin making all your exception classes "
"derive from :exc:`Exception` now.  It's been suggested that the bare "
"``except:`` form should be removed in Python 3.0, but Guido van Rossum "
"hasn't decided whether to do this or not."
msgstr ""
"Целью Python 3.0 является требование, чтобы любой класс, созданный как "
"исключение, производился от :exc:`BaseException` или какого-либо потомка :"
"exc:`BaseException`, и будущие выпуски серии Python 2.x могут начать "
"применять это ограничение. . Поэтому я предлагаю вам начать делать все ваши "
"классы исключений производными от :exc:`Exception` прямо сейчас. Было "
"предложено удалить пустую форму «кроме:» в Python 3.0, но Гвидо ван Россум "
"еще не решил, делать это или нет."

#: ../../whatsnew/2.5.rst:856
msgid ""
"Raising of strings as exceptions, as in the statement ``raise \"Error "
"occurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The "
"aim is to be able to remove the string-exception feature in a few releases."
msgstr ""
"Вызов строк в качестве исключений, как в операторе «raise «Произошла "
"ошибка»», не рекомендуется в Python 2.5 и вызывает предупреждение. Цель "
"состоит в том, чтобы иметь возможность удалить функцию исключения строк в "
"нескольких выпусках."

#: ../../whatsnew/2.5.rst:863
msgid ":pep:`352` - Required Superclass for Exceptions"
msgstr ":pep:`352` - Обязательный суперкласс для исключений"

#: ../../whatsnew/2.5.rst:864
msgid ""
"PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett "
"Cannon."
msgstr ""
"PEP, написанный Бреттом Кэнноном и Гвидо ван Россумом; реализован Бреттом "
"Кэнноном."

#: ../../whatsnew/2.5.rst:872
msgid "PEP 353: Using ssize_t as the index type"
msgstr "PEP 353: использование ssize_t в качестве типа индекса"

#: ../../whatsnew/2.5.rst:874
msgid ""
"A wide-ranging change to Python's C API, using a new  :c:type:`Py_ssize_t` "
"type definition instead of :c:expr:`int`,  will permit the interpreter to "
"handle more data on 64-bit platforms. This change doesn't affect Python's "
"capacity on 32-bit platforms."
msgstr ""
"Широкомасштабное изменение API C Python с использованием нового определения "
"типа :c:type:`Py_ssize_t` вместо :c:expr:`int` позволит интерпретатору "
"обрабатывать больше данных на 64-битных платформах. Это изменение не влияет "
"на возможности Python на 32-битных платформах."

#: ../../whatsnew/2.5.rst:879
msgid ""
"Various pieces of the Python interpreter used C's :c:expr:`int` type to "
"store sizes or counts; for example, the number of items in a list or tuple "
"were stored in an :c:expr:`int`.  The C compilers for most 64-bit platforms "
"still define :c:expr:`int` as a 32-bit type, so that meant that lists could "
"only hold up to ``2**31 - 1`` = 2147483647 items. (There are actually a few "
"different programming models that 64-bit C compilers can use -- see https://"
"unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the most "
"commonly available model leaves :c:expr:`int` as 32 bits.)"
msgstr ""
"Различные части интерпретатора Python использовали тип C :c:expr:`int` для "
"хранения размеров или счетчиков; например, количество элементов в списке или "
"кортеже хранилось в :c:expr:`int`. Компиляторы C для большинства 64-битных "
"платформ по-прежнему определяют :c:expr:`int` как 32-битный тип, а это "
"означает, что списки могут содержать только до ``2**31 - 1`` = 2147483647 "
"элементов. (На самом деле существует несколько различных моделей "
"программирования, которые могут использовать 64-битные компиляторы C — "
"обсуждение см. на https://unix.org/version2/whatsnew/lp64_wp.html — но "
"наиболее распространенная модель оставляет :c: expr:`int` как 32 бита.)"

#: ../../whatsnew/2.5.rst:888
msgid ""
"A limit of 2147483647 items doesn't really matter on a 32-bit platform "
"because you'll run out of memory before hitting the length limit. Each list "
"item requires space for a pointer, which is 4 bytes, plus space for a :c:"
"type:`PyObject` representing the item.  2147483647\\*4 is already more bytes "
"than a 32-bit address space can contain."
msgstr ""
"Ограничение в 2147483647 элементов не имеет особого значения на 32-битной "
"платформе, поскольку у вас закончится память до того, как будет достигнут "
"предел длины. Каждый элемент списка требует места для указателя, размер "
"которого составляет 4 байта, плюс место для :c:type:` PyObject` , "
"представляющего этот элемент. 2147483647\\*4 — это уже больше байт, чем "
"может содержать 32-битное адресное пространство."

#: ../../whatsnew/2.5.rst:894
msgid ""
"It's possible to address that much memory on a 64-bit platform, however.  "
"The pointers for a list that size would only require 16 GiB of space, so "
"it's not unreasonable that Python programmers might construct lists that "
"large. Therefore, the Python interpreter had to be changed to use some type "
"other than :c:expr:`int`, and this will be a 64-bit type on 64-bit "
"platforms.  The change will cause incompatibilities on 64-bit machines, so "
"it was deemed worth making the transition now, while the number of 64-bit "
"users is still relatively small. (In 5 or 10 years, we may *all* be on 64-"
"bit machines, and the transition would be more painful then.)"
msgstr ""
"Однако можно адресовать такой объем памяти на 64-битной платформе. Указатели "
"на список такого размера потребуют всего 16 ГиБ пространства, поэтому вполне "
"разумно, что программисты Python могут создавать списки такого размера. "
"Поэтому интерпретатор Python пришлось изменить, чтобы использовать какой-"
"либо тип, отличный от :c:expr:`int`, и на 64-битных платформах это будет 64-"
"битный тип. Это изменение приведет к несовместимости на 64-битных машинах, "
"поэтому было сочтено целесообразным осуществить переход сейчас, пока число "
"64-битных пользователей все еще относительно невелико. (Через 5 или 10 лет "
"мы, возможно, *все* будем использовать 64-битные машины, и тогда переход "
"будет более болезненным.)"

#: ../../whatsnew/2.5.rst:904
msgid ""
"This change most strongly affects authors of C extension modules.   Python "
"strings and container types such as lists and tuples  now use :c:type:"
"`Py_ssize_t` to store their size.   Functions such as :c:func:`PyList_Size`  "
"now return :c:type:`Py_ssize_t`.  Code in extension modules may therefore "
"need to have some variables changed to :c:type:`Py_ssize_t`."
msgstr ""
"Это изменение сильнее всего затрагивает авторов модулей расширения C. Строки "
"Python и типы контейнеров, такие как списки и кортежи, теперь используют :c:"
"type:`Py_ssize_t` для хранения своего размера. Такие функции, как :c:func:"
"`PyList_Size`, теперь возвращают :c:type:`Py_ssize_t`. Поэтому в коде "
"модулей расширения может потребоваться изменить некоторые переменные на :c:"
"type:`Py_ssize_t`."

#: ../../whatsnew/2.5.rst:910
msgid ""
"The :c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` functions have a "
"new conversion code, ``n``, for :c:type:`Py_ssize_t`.   :c:func:"
"`PyArg_ParseTuple`'s ``s#`` and ``t#`` still output :c:expr:`int` by "
"default, but you can define the macro  :c:macro:`PY_SSIZE_T_CLEAN` before "
"including :file:`Python.h`  to make them return :c:type:`Py_ssize_t`."
msgstr ""
"Функции :c:func:`PyArg_ParseTuple` и :c:func:`Py_BuildValue` имеют новый код "
"преобразования ``n`` для :c:type:`Py_ssize_t`. :c:func:```s#`` и ``t#`` "
"PyArg_ParseTuple`` по-прежнему выводятся :c:expr:`int` по умолчанию, но вы "
"можете определить макрос :c:macro:`PY_SSIZE_T_CLEAN` перед включением :file:"
"`Python.h`, чтобы они вернули :c:type:`Py_ssize_t`."

#: ../../whatsnew/2.5.rst:916
msgid ""
":pep:`353` has a section on conversion guidelines that  extension authors "
"should read to learn about supporting 64-bit platforms."
msgstr ""
"В :pep:`353` есть раздел с рекомендациями по преобразованию, который авторам "
"расширений следует прочитать, чтобы узнать о поддержке 64-битных платформ."

#: ../../whatsnew/2.5.rst:922
msgid ":pep:`353` - Using ssize_t as the index type"
msgstr ":pep:`353` - Использование ssize_t в качестве типа индекса"

#: ../../whatsnew/2.5.rst:923
msgid "PEP written and implemented by Martin von Löwis."
msgstr "PEP написан и реализован Мартином фон Лёвисом."

#: ../../whatsnew/2.5.rst:931
msgid "PEP 357: The '__index__' method"
msgstr "PEP 357: метод «__index__»"

#: ../../whatsnew/2.5.rst:933
msgid ""
"The NumPy developers had a problem that could only be solved by adding a new "
"special method, :meth:`__index__`.  When using slice notation, as in "
"``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes "
"must all be either integers or long integers.  NumPy defines a variety of "
"specialized integer types corresponding to unsigned and signed integers of "
"8, 16, 32, and 64 bits, but there was no way to signal that these types "
"could be used as slice indexes."
msgstr ""
"У разработчиков NumPy возникла проблема, которую можно было решить только "
"добавлением нового специального метода :meth:`__index__`. При использовании "
"нотации среза, как в ``[start:stop:step]``, все значения индексов *start*, "
"*stop* и *step* должны быть либо целыми, либо длинными целыми числами. NumPy "
"определяет множество специализированных целочисленных типов, соответствующих "
"целым числам без знака и знака длиной 8, 16, 32 и 64 бита, но не было "
"способа указать, что эти типы можно использовать в качестве индексов срезов."

#: ../../whatsnew/2.5.rst:941
msgid ""
"Slicing can't just use the existing :meth:`__int__` method because that "
"method is also used to implement coercion to integers.  If slicing used :"
"meth:`__int__`, floating-point numbers would also become legal slice indexes "
"and that's clearly an undesirable behaviour."
msgstr ""
"Для нарезки нельзя просто использовать существующий метод :meth:`__int__`, "
"поскольку этот метод также используется для реализации приведения к целым "
"числам. Если бы для среза использовалось :meth:`__int__`, числа с плавающей "
"запятой также стали бы допустимыми индексами среза, и это явно нежелательное "
"поведение."

#: ../../whatsnew/2.5.rst:946
msgid ""
"Instead, a new special method called :meth:`__index__` was added.  It takes "
"no arguments and returns an integer giving the slice index to use.  For "
"example::"
msgstr ""
"Вместо этого был добавлен новый специальный метод :meth:`__index__`. Он не "
"принимает аргументов и возвращает целое число, указывающее индекс среза, "
"который нужно использовать. Например::"

#: ../../whatsnew/2.5.rst:953
msgid ""
"The return value must be either a Python integer or long integer. The "
"interpreter will check that the type returned is correct, and raises a :exc:"
"`TypeError` if this requirement isn't met."
msgstr ""
"Возвращаемое значение должно быть либо целым числом Python, либо длинным "
"целым числом. Интерпретатор проверит правильность возвращаемого типа и "
"выдаст ошибку :exc:`TypeError`, если это требование не выполнено."

#: ../../whatsnew/2.5.rst:957
msgid ""
"A corresponding :c:member:`~PyNumberMethods.nb_index` slot was added to the "
"C-level :c:type:`PyNumberMethods` structure to let C extensions implement "
"this protocol. ``PyNumber_Index(obj)`` can be used in extension code to call "
"the :meth:`__index__` function and retrieve its result."
msgstr ""
"Соответствующий слот :c:member:`~PyNumberMethods.nb_index` был добавлен в "
"структуру :c:type:`PyNumberMethods` уровня C, чтобы расширения C могли "
"реализовать этот протокол. ``PyNumber_Index(obj)`` можно использовать в коде "
"расширения для вызова функции :meth:`__index__` и получения ее результата."

#: ../../whatsnew/2.5.rst:965
msgid ":pep:`357` - Allowing Any Object to be Used for Slicing"
msgstr ":pep:`357` - Разрешение использования любого объекта для нарезки"

#: ../../whatsnew/2.5.rst:966
msgid "PEP written  and implemented by Travis Oliphant."
msgstr "PEP написан и реализован Трэвисом Олифантом."

#: ../../whatsnew/2.5.rst:974
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/2.5.rst:976
msgid ""
"Here are all of the changes that Python 2.5 makes to the core Python "
"language."
msgstr "Вот все изменения, которые Python 2.5 вносит в основной язык Python."

#: ../../whatsnew/2.5.rst:978
msgid ""
"The :class:`dict` type has a new hook for letting subclasses provide a "
"default value when a key isn't contained in the dictionary. When a key isn't "
"found, the dictionary's ``__missing__(key)`` method will be called.  This "
"hook is used to implement the new :class:`defaultdict` class in the :mod:"
"`collections` module.  The following example defines a dictionary  that "
"returns zero for any missing key::"
msgstr ""
"Тип :class:`dict` имеет новую возможность, позволяющую подклассам "
"предоставлять значение по умолчанию, когда ключ не содержится в словаре. "
"Если ключ не найден, будет вызван метод словаря ``__missing__(key)``. Этот "
"хук используется для реализации нового класса :class:`defaultdict` в модуле :"
"mod:`collections`. В следующем примере определяется словарь, который "
"возвращает ноль для любого отсутствующего ключа::"

#: ../../whatsnew/2.5.rst:993
msgid ""
"Both 8-bit and Unicode strings have new ``partition(sep)``  and "
"``rpartition(sep)`` methods that simplify a common use case."
msgstr ""
"И 8-битные строки, и строки Unicode имеют новые методы partition(sep) и "
"rpartition(sep), которые упрощают общий вариант использования."

#: ../../whatsnew/2.5.rst:996
msgid ""
"The ``find(S)`` method is often used to get an index which is then used to "
"slice the string and obtain the pieces that are before and after the "
"separator. ``partition(sep)`` condenses this pattern into a single method "
"call that returns a 3-tuple containing the substring before the separator, "
"the separator itself, and the substring after the separator.  If the "
"separator isn't found, the first element of the tuple is the entire string "
"and the other two elements are empty.  ``rpartition(sep)`` also returns a 3-"
"tuple but starts searching from the end of the string; the ``r`` stands for "
"'reverse'."
msgstr ""
"Метод find(S) часто используется для получения индекса, который затем "
"используется для разрезания строки и получения частей, которые находятся до "
"и после разделителя. ``partition(sep)`` объединяет этот шаблон в один вызов "
"метода, который возвращает кортеж из трех элементов, содержащий подстроку "
"перед разделителем, сам разделитель и подстроку после разделителя. Если "
"разделитель не найден, первым элементом кортежа является вся строка, а два "
"других элемента пусты. ``rpartition(sep)`` также возвращает тройку, но "
"начинает поиск с конца строки; ``r`` означает «обратный»."

#: ../../whatsnew/2.5.rst:1005
msgid "Some examples::"
msgstr "Несколько примеров::"

#: ../../whatsnew/2.5.rst:1018
msgid ""
"(Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)"
msgstr "(Реализовано Фредриком Лундом по предложению Раймонда Хеттингера.)"

#: ../../whatsnew/2.5.rst:1020
msgid ""
"The :meth:`startswith` and :meth:`endswith` methods of string types now "
"accept tuples of strings to check for. ::"
msgstr ""
"Методы :meth:`startswith` и :meth:`endswith` для строковых типов теперь "
"принимают кортежи строк для проверки. ::"

#: ../../whatsnew/2.5.rst:1026
msgid "(Implemented by Georg Brandl following a suggestion by Tom Lynn.)"
msgstr "(Реализовано Георгом Брандлом по предложению Тома Линна.)"

#: ../../whatsnew/2.5.rst:1030
msgid ""
"The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword "
"parameter analogous to the ``key`` argument for :meth:`sort`.  This "
"parameter supplies a function that takes a single argument and is called for "
"every value in the list; :func:`min`/:func:`max` will return the element "
"with the smallest/largest return value from this function. For example, to "
"find the longest string in a list, you can do::"
msgstr ""
"Встроенные функции :func:`min` и :func:`max` получили ключевой параметр "
"``key``, аналогичный аргументу ``key`` для :meth:`sort`. Этот параметр "
"предоставляет функцию, которая принимает один аргумент и вызывается для "
"каждого значения в списке; :func:`min`/:func:`max` вернет элемент с "
"наименьшим/самым большим возвращаемым значением из этой функции. Например, "
"чтобы найти самую длинную строку в списке, вы можете сделать:"

#: ../../whatsnew/2.5.rst:1043
msgid "(Contributed by Steven Bethard and Raymond Hettinger.)"
msgstr "(Сообщили Стивен Бетард и Рэймонд Хеттингер.)"

#: ../../whatsnew/2.5.rst:1045
msgid ""
"Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an "
"iterator contains any true or false values.  :func:`any` returns :const:"
"`True` if any value returned by the iterator is true; otherwise it will "
"return :const:`False`.  :func:`all` returns :const:`True` only if all of the "
"values returned by the iterator evaluate as true. (Suggested by Guido van "
"Rossum, and implemented by Raymond Hettinger.)"
msgstr ""
"Две новые встроенные функции, :func:`any` и :func:`all`, оценивают, содержит "
"ли итератор какие-либо значения true или false. :func:`any` возвращает :"
"const:`True`, если какое-либо значение, возвращаемое итератором, истинно; в "
"противном случае он вернет :const:`False`. :func:`all` возвращает :const:"
"`True` только в том случае, если все значения, возвращаемые итератором, "
"оцениваются как true. (Предложено Гвидо ван Россумом и реализовано Раймондом "
"Хеттингером.)"

#: ../../whatsnew/2.5.rst:1052
msgid ""
"The result of a class's :meth:`__hash__` method can now be either a long "
"integer or a regular integer.  If a long integer is returned, the hash of "
"that value is taken.  In earlier versions the hash value was required to be "
"a regular integer, but in 2.5 the :func:`id` built-in was changed to always "
"return non-negative numbers, and users often seem to use ``id(self)`` in :"
"meth:`__hash__` methods (though this is discouraged)."
msgstr ""
"Результатом метода :meth:`__hash__` класса теперь может быть либо длинное "
"целое число, либо обычное целое число. Если возвращается длинное целое "
"число, берется хэш этого значения. В более ранних версиях хэш-значение "
"должно было быть обычным целым числом, но в версии 2.5 встроенная функция :"
"func:`id` была изменена, чтобы всегда возвращать неотрицательные числа, и "
"пользователи часто используют ``id(self)` ` в методах :meth:`__hash__` (хотя "
"это не рекомендуется)."

#: ../../whatsnew/2.5.rst:1061
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error.  See :pep:`263`  for how to declare a module's encoding; for example, "
"you might add  a line like this near the top of the source file::"
msgstr ""
"ASCII теперь является кодировкой по умолчанию для модулей. Теперь "
"синтаксическая ошибка возникает, если модуль содержит строковые литералы с 8-"
"битными символами, но не имеет объявления кодировки. В Python 2.4 это "
"вызывало предупреждение, а не синтаксическую ошибку. См. :pep:`263`, чтобы "
"узнать, как объявить кодировку модуля; например, вы можете добавить такую ​​"
"строку в начало исходного файла::"

#: ../../whatsnew/2.5.rst:1069
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string  that can't be converted to "
"Unicode using the default ASCII encoding.   The result of the comparison is "
"false::"
msgstr ""
"Новое предупреждение :class:`UnicodeWarning` выдается при попытке сравнить "
"строку Unicode и 8-битную строку, которую невозможно преобразовать в Unicode "
"с использованием кодировки ASCII по умолчанию. Результат сравнения ложный::"

#: ../../whatsnew/2.5.rst:1081
msgid ""
"Previously this would raise a :class:`UnicodeDecodeError` exception, but in "
"2.5 this could result in puzzling problems when accessing a dictionary.  If "
"you looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, "
"you'd get a :class:`UnicodeDecodeError` exception.  Other changes in 2.5 "
"resulted in this exception being raised instead of suppressed by the code "
"in :file:`dictobject.c` that implements dictionaries."
msgstr ""
"Раньше это вызывало исключение :class:`UnicodeDecodeError`, но в версии 2.5 "
"это могло привести к загадочным проблемам при доступе к словарю. Если вы "
"посмотрите ``unichr(128)`` и ``chr(128)`` используется в качестве ключа, вы "
"получите исключение :class:`UnicodeDecodeError`. Другие изменения в версии "
"2.5 привели к тому, что это исключение возникло, а не подавлялось кодом в :"
"file:`dictobject.c`, который реализует словари."

#: ../../whatsnew/2.5.rst:1088
msgid ""
"Raising an exception for such a comparison is strictly correct, but the "
"change might have broken code, so instead  :class:`UnicodeWarning` was "
"introduced."
msgstr ""
"Вызов исключения для такого сравнения абсолютно корректен, но это изменение "
"могло привести к поломке кода, поэтому вместо этого было введено :class:"
"`UnicodeWarning`."

#: ../../whatsnew/2.5.rst:1091
msgid "(Implemented by Marc-André Lemburg.)"
msgstr "(Реализован Марком-Андре Лембургом.)"

#: ../../whatsnew/2.5.rst:1093
msgid ""
"One error that Python programmers sometimes make is forgetting to include "
"an :file:`__init__.py` module in a package directory. Debugging this mistake "
"can be confusing, and usually requires running Python with the :option:`-v` "
"switch to log all the paths searched. In Python 2.5, a new :exc:"
"`ImportWarning` warning is triggered when an import would have picked up a "
"directory as a package but no :file:`__init__.py` was found.  This warning "
"is silently ignored by default; provide the :option:`-Wd <-W>` option when "
"running the Python executable to display the warning message. (Implemented "
"by Thomas Wouters.)"
msgstr ""
"Одна из ошибок, которую иногда допускают программисты Python, — это "
"забывание включить модуль :file:`__init__.py` в каталог пакета. Отладка этой "
"ошибки может сбить с толку и обычно требует запуска Python с ключом :option:"
"`-v` для регистрации всех найденных путей. В Python 2.5 новое "
"предупреждение :exc:`ImportWarning` срабатывает, когда при импорте каталог "
"был бы выбран как пакет, но :file:`__init__.py` не найден. По умолчанию это "
"предупреждение игнорируется; укажите параметр :option:`-Wd <-W>` при запуске "
"исполняемого файла Python для отображения предупреждающего сообщения. "
"(Реализовано Томасом Воутерсом.)"

#: ../../whatsnew/2.5.rst:1102
msgid ""
"The list of base classes in a class definition can now be empty.   As an "
"example, this is now legal::"
msgstr ""
"Список базовых классов в определении класса теперь может быть пустым. "
"Например, теперь это законно:"

#: ../../whatsnew/2.5.rst:1108
msgid "(Implemented by Brett Cannon.)"
msgstr "(Реализован Бреттом Кэнноном.)"

#: ../../whatsnew/2.5.rst:1116
msgid "Interactive Interpreter Changes"
msgstr "Изменения в интерактивном интерпретаторе"

#: ../../whatsnew/2.5.rst:1118
msgid ""
"In the interactive interpreter, ``quit`` and ``exit``  have long been "
"strings so that new users get a somewhat helpful message when they try to "
"quit::"
msgstr ""
"В интерактивном интерпретаторе ``quit`` и ``exit`` уже давно являются "
"строками, поэтому новые пользователи получают полезное сообщение при попытке "
"выйти:"

#: ../../whatsnew/2.5.rst:1124
msgid ""
"In Python 2.5, ``quit`` and ``exit`` are now objects that still produce "
"string representations of themselves, but are also callable. Newbies who try "
"``quit()`` or ``exit()`` will now exit the interpreter as they expect.  "
"(Implemented by Georg Brandl.)"
msgstr ""
"В Python 2.5 «quit» и «exit» теперь являются объектами, которые по-прежнему "
"создают строковые представления самих себя, но также могут быть вызваны. "
"Новички, которые попробуют ``quit()`` или ``exit()``, теперь будут выходить "
"из интерпретатора, как они ожидают. (Реализован Георгом Брандлом.)"

#: ../../whatsnew/2.5.rst:1129
msgid ""
"The Python executable now accepts the standard long options  :option:`--"
"help` and :option:`--version`; on Windows,  it also accepts the :option:`/? "
"<-?>` option for displaying a help message. (Implemented by Georg Brandl.)"
msgstr ""
"Исполняемый файл Python теперь принимает стандартные длинные параметры :"
"option:`--help` и :option:`--version`; в Windows он также принимает :option:"
"`/? <-?>` опция для отображения справочного сообщения. (Реализован Георгом "
"Брандлом.)"

#: ../../whatsnew/2.5.rst:1139
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/2.5.rst:1141
msgid ""
"Several of the optimizations were developed at the NeedForSpeed sprint, an "
"event held in Reykjavik, Iceland, from May 21--28 2006. The sprint focused "
"on speed enhancements to the CPython implementation and was funded by EWT "
"LLC with local support from CCP Games.  Those optimizations added at this "
"sprint are specially marked in the following list."
msgstr ""
"Несколько оптимизаций были разработаны в ходе спринта NeedForSpeed, "
"мероприятия, проходившего в Рейкьявике, Исландия, с 21 по 28 мая 2006 года. "
"Спринт был сосредоточен на повышении скорости реализации CPython и "
"финансировался EWT LLC при местной поддержке CCP Games. Оптимизации, "
"добавленные в этом спринте, специально отмечены в следующем списке."

#: ../../whatsnew/2.5.rst:1147
msgid ""
"When they were introduced  in Python 2.4, the built-in :class:`set` and :"
"class:`frozenset` types were built on top of Python's dictionary type.   In "
"2.5 the internal data structure has been customized for implementing sets, "
"and as a result sets will use a third less memory and are somewhat faster. "
"(Implemented by Raymond Hettinger.)"
msgstr ""
"Когда они были представлены в Python 2.4, встроенные типы :class:`set` и :"
"class:`frozenset` были построены поверх словарного типа Python. В версии 2.5 "
"внутренняя структура данных была настроена для реализации наборов, в "
"результате наборы будут использовать на треть меньше памяти и работать "
"несколько быстрее. (Реализовано Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1153
msgid ""
"The speed of some Unicode operations, such as finding substrings, string "
"splitting, and character map encoding and decoding, has been improved. "
"(Substring search and splitting improvements were added by Fredrik Lundh and "
"Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by "
"Walter Dörwald and Martin von Löwis.)"
msgstr ""
"Была улучшена скорость некоторых операций Unicode, таких как поиск подстрок, "
"разделение строк, а также кодирование и декодирование карты символов. "
"(Усовершенствования поиска подстрок и разделения были добавлены Фредриком "
"Лундом и Эндрю Далком во время спринта NeedForSpeed. Карты символов были "
"улучшены Вальтером Дорвальдом и Мартином фон Лёвисом.)"

#: ../../whatsnew/2.5.rst:1161
msgid ""
"The ``long(str, base)`` function is now faster on long digit strings because "
"fewer intermediate results are calculated.  The peak is for strings of "
"around 800--1000 digits where  the function is 6 times faster. (Contributed "
"by Alan McIntyre and committed at the NeedForSpeed sprint.)"
msgstr ""
"Функция long(str, base) теперь работает быстрее с длинными строками цифр, "
"поскольку вычисляется меньше промежуточных результатов. Пик приходится на "
"строки длиной около 800–1000 цифр, где функция работает в 6 раз быстрее. "
"(Предоставлено Аланом Макинтайром и выполнено во время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:1168
msgid ""
"It's now illegal to mix iterating over a file  with ``for line in file`` and "
"calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines` "
"methods.  Iteration uses an internal buffer and the  :meth:`!read\\*` "
"methods don't use that buffer.   Instead they would return the data "
"following the buffer, causing the data to appear out of order.  Mixing "
"iteration and these methods will now trigger a :exc:`ValueError` from the :"
"meth:`!read\\*` method. (Implemented by Thomas Wouters.)"
msgstr ""
"Теперь запрещено совмещать итерацию по файлу с ``for line in file`` и "
"вызовом методов :meth:`read`/:meth:`readline`/:meth:`readlines` объекта "
"файла. Итерация использует внутренний буфер, а методы :meth:`!read\\*` не "
"используют этот буфер. Вместо этого они возвращали данные, следующие за "
"буфером, в результате чего данные оказывались не в порядке. Смешивание "
"итерации и этих методов теперь будет вызывать :exc:`ValueError` из метода :"
"meth:`!read\\*`. (Реализовано Томасом Воутерсом.)"

#: ../../whatsnew/2.5.rst:1178
msgid ""
"The :mod:`struct` module now compiles structure format  strings into an "
"internal representation and caches this representation, yielding a 20% "
"speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)"
msgstr ""
"Модуль :mod:`struct` теперь компилирует строки формата структуры во "
"внутреннее представление и кэширует это представление, что дает ускорение на "
"20%. (Предоставлено Бобом Ипполито во время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:1182
msgid ""
"The :mod:`re` module got a 1 or 2% speedup by switching to  Python's "
"allocator functions instead of the system's  :c:func:`malloc` and :c:func:"
"`free`. (Contributed by Jack Diederich at the NeedForSpeed sprint.)"
msgstr ""
"Модуль :mod:`re` получил ускорение на 1 или 2% за счет переключения на "
"функции распределения Python вместо системных :c:func:`malloc` и :c:func:"
"`free`. (Предоставлено Джеком Дидерихом во время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:1186
msgid ""
"The code generator's peephole optimizer now performs simple constant folding "
"in expressions.  If you write something like ``a = 2+3``, the code generator "
"will do the arithmetic and produce code corresponding to ``a = 5``.  "
"(Proposed and implemented  by Raymond Hettinger.)"
msgstr ""
"Оптимизатор «глазок» генератора кода теперь выполняет простое свертывание "
"констант в выражениях. Если вы напишете что-то вроде «a = 2+3», генератор "
"кода выполнит арифметические действия и выдаст код, соответствующий «a = 5». "
"(Предложено и реализовано Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1191
msgid ""
"Function calls are now faster because code objects now keep  the most "
"recently finished frame (a \"zombie frame\") in an internal field of the "
"code object, reusing it the next time the code object is invoked.  (Original "
"patch by Michael Hudson, modified by Armin Rigo and Richard Jones; committed "
"at the NeedForSpeed sprint.)  Frame objects are also slightly smaller, which "
"may improve cache locality and reduce memory usage a bit.  (Contributed by "
"Neal Norwitz.)"
msgstr ""
"Вызовы функций теперь выполняются быстрее, поскольку объекты кода теперь "
"сохраняют последний завершенный кадр («фрейм-зомби») во внутреннем поле "
"объекта кода, повторно используя его при следующем вызове объекта кода. "
"(Оригинальный патч Майкла Хадсона, измененный Армином Риго и Ричардом "
"Джонсом; зафиксирован во время спринта NeedForSpeed.) Объекты фреймов также "
"немного меньше, что может улучшить локальность кэша и немного уменьшить "
"использование памяти. (Предоставлено Нилом Норвицем.)"

#: ../../whatsnew/2.5.rst:1201
msgid ""
"Python's built-in exceptions are now new-style classes, a change that speeds "
"up instantiation considerably.  Exception handling in Python 2.5 is "
"therefore about 30% faster than in 2.4. (Contributed by Richard Jones, Georg "
"Brandl and Sean Reifschneider at the NeedForSpeed sprint.)"
msgstr ""
"Встроенные исключения Python теперь представляют собой классы нового стиля, "
"и это изменение значительно ускоряет создание экземпляров. Таким образом, "
"обработка исключений в Python 2.5 происходит примерно на 30% быстрее, чем в "
"версии 2.4. (Предоставлено Ричардом Джонсом, Георгом Брандлом и Шоном "
"Райфшнайдером во время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:1206
msgid ""
"Importing now caches the paths tried, recording whether  they exist or not "
"so that the interpreter makes fewer  :c:func:`open` and :c:func:`stat` calls "
"on startup. (Contributed by Martin von Löwis and Georg Brandl.)"
msgstr ""
"При импорте теперь кэшируются проверенные пути, фиксируя, существуют они или "
"нет, чтобы интерпретатор делал меньше вызовов :c:func:`open` и :c:func:"
"`stat` при запуске. (Сообщили Мартин фон Лёвис и Георг Брандл.)"

#: ../../whatsnew/2.5.rst:1218
msgid "New, Improved, and Removed Modules"
msgstr "Новые, улучшенные и удаленные модули"

#: ../../whatsnew/2.5.rst:1220
msgid ""
"The standard library received many enhancements and bug fixes in Python 2.5. "
"Here's a partial list of the most notable changes, sorted alphabetically by "
"module name. Consult the :file:`Misc/NEWS` file in the source tree for a "
"more complete list of changes, or look through the SVN logs for all the "
"details."
msgstr ""
"Стандартная библиотека получила множество улучшений и исправлений ошибок в "
"Python 2.5. Вот неполный список наиболее заметных изменений, отсортированный "
"в алфавитном порядке по названию модуля. Обратитесь к файлу :file:`Misc/"
"NEWS` в дереве исходного кода для получения более полного списка изменений "
"или просмотрите журналы SVN для получения всех подробностей."

#: ../../whatsnew/2.5.rst:1225
msgid ""
"The :mod:`audioop` module now supports the a-LAW encoding, and the code for "
"u-LAW encoding has been improved.  (Contributed by Lars Immisch.)"
msgstr ""
"Модуль :mod:`audioop` теперь поддерживает кодировку a-LAW, а код кодирования "
"u-LAW был улучшен. (Предоставлено Ларсом Иммишем.)"

#: ../../whatsnew/2.5.rst:1228
msgid ""
"The :mod:`codecs` module gained support for incremental codecs.  The :func:"
"`codec.lookup` function now returns a :class:`CodecInfo` instance instead of "
"a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve "
"backward compatibility but also have the attributes :attr:`encode`, :attr:"
"`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:"
"`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive "
"input and produce output in multiple chunks; the output is the same as if "
"the entire input was fed to the non-incremental codec. See the :mod:`codecs` "
"module documentation for details. (Designed and implemented by Walter "
"Dörwald.)"
msgstr ""
"Модуль :mod:`codecs` получил поддержку инкрементных кодеков. Функция :func:"
"`codec.lookup` теперь возвращает экземпляр :class:`CodecInfo` вместо "
"кортежа. Экземпляры :class:`CodecInfo` ведут себя как четырехкортеж для "
"сохранения обратной совместимости, но также имеют атрибуты :attr:`encode`, :"
"attr:`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:"
"`streamwriter` и :attr:`streamreader`. Инкрементные кодеки могут принимать "
"входные данные и выдавать выходные данные в виде нескольких фрагментов; "
"вывод такой же, как если бы весь ввод был подан в неинкрементальный кодек. "
"Подробности смотрите в документации модуля :mod:`codecs`. (Разработано и "
"реализовано Вальтером Дорвальдом.)"

#: ../../whatsnew/2.5.rst:1240
msgid ""
"The :mod:`collections` module gained a new type, :class:`defaultdict`, that "
"subclasses the standard :class:`dict` type.  The new type mostly behaves "
"like a dictionary but constructs a default value when a key isn't present, "
"automatically adding it to the dictionary for the requested key value."
msgstr ""
"Модуль :mod:`collections` получил новый тип :class:`defaultdict`, который "
"является подклассом стандартного типа :class:`dict`. Новый тип в основном "
"ведет себя как словарь, но создает значение по умолчанию, когда ключ "
"отсутствует, автоматически добавляя его в словарь для запрошенного значения "
"ключа."

#: ../../whatsnew/2.5.rst:1245
msgid ""
"The first argument to :class:`defaultdict`'s constructor is a factory "
"function that gets called whenever a key is requested but not found. This "
"factory function receives no arguments, so you can use built-in type "
"constructors such as :func:`list` or :func:`int`.  For example,  you can "
"make an index of words based on their initial letter like this::"
msgstr ""
"Первый аргумент конструктора :class:`defaultdict` — это фабричная функция, "
"которая вызывается всякий раз, когда ключ запрошен, но не найден. Эта "
"фабричная функция не получает аргументов, поэтому вы можете использовать "
"встроенные конструкторы типов, такие как :func:`list` или :func:`int`. "
"Например, вы можете составить указатель слов по их начальной букве следующим "
"образом:"

#: ../../whatsnew/2.5.rst:1261
msgid "Printing ``index`` results in the following output::"
msgstr "Печать ``index`` приводит к следующему выводу:"

#: ../../whatsnew/2.5.rst:1269
msgid "(Contributed by Guido van Rossum.)"
msgstr "(Предоставлено Гвидо ван Россумом.)"

#: ../../whatsnew/2.5.rst:1271
msgid ""
"The :class:`deque` double-ended queue type supplied by the :mod:"
"`collections` module now has a ``remove(value)`` method that removes the "
"first occurrence of *value* in the queue, raising :exc:`ValueError` if the "
"value isn't found. (Contributed by Raymond Hettinger.)"
msgstr ""
"Тип двусторонней очереди :class:`deque`, предоставляемый модулем :mod:"
"`collections`, теперь имеет метод ``remove(value)``, который удаляет первое "
"вхождение *value* в очереди, поднимая :exc :`ValueError`, если значение не "
"найдено. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1276
msgid ""
"New module: The :mod:`contextlib` module contains helper functions for use "
"with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod` "
"for more about this module."
msgstr ""
"Новый модуль: Модуль :mod:`contextlib` содержит вспомогательные функции для "
"использования с новым оператором ':keyword:`with`'. Дополнительную "
"информацию об этом модуле см. в разделе :ref:`contextlibmod`."

#: ../../whatsnew/2.5.rst:1280
msgid ""
"New module: The :mod:`cProfile` module is a C implementation of  the "
"existing :mod:`profile` module that has much lower overhead. The module's "
"interface is the same as :mod:`profile`: you run ``cProfile.run('main()')`` "
"to profile a function, can save profile data to a file, etc.  It's not yet "
"known if the Hotshot profiler, which is also written in C but doesn't match "
"the :mod:`profile` module's interface, will continue to be maintained in "
"future versions of Python.  (Contributed by Armin Rigo.)"
msgstr ""
"Новый модуль: Модуль :mod:`cProfile` представляет собой реализацию C "
"существующего модуля :mod:`profile`, который имеет гораздо меньшие накладные "
"расходы. Интерфейс модуля такой же, как у :mod:`profile`: вы запускаете "
"``cProfile.run('main()')`` для профилирования функции, можете сохранить "
"данные профиля в файл и т. д. Пока неизвестно, будет ли профилировщик "
"Hotshot, который также написан на C, но не соответствует интерфейсу модуля :"
"mod:`profile`, будет по-прежнему поддерживаться в будущих версиях Python. "
"(Предоставлено Армином Риго.)"

#: ../../whatsnew/2.5.rst:1288
msgid ""
"Also, the :mod:`pstats` module for analyzing the data measured by the "
"profiler now supports directing the output to any file object by supplying a "
"*stream* argument to the :class:`Stats` constructor. (Contributed by Skip "
"Montanaro.)"
msgstr ""
"Кроме того, модуль :mod:`pstats` для анализа данных, измеренных "
"профилировщиком, теперь поддерживает направление вывода в любой файловый "
"объект, передавая аргумент *stream* конструктору :class:`Stats`. "
"(Предоставлено Скипом Монтанаро.)"

#: ../../whatsnew/2.5.rst:1292
msgid ""
"The :mod:`csv` module, which parses files in comma-separated value format, "
"received several enhancements and a number of bugfixes.  You can now set the "
"maximum size in bytes of a field by calling the ``csv."
"field_size_limit(new_limit)`` function; omitting the *new_limit* argument "
"will return the currently set limit.  The :class:`reader` class now has a :"
"attr:`line_num` attribute that counts the number of physical lines read from "
"the source; records can span multiple physical lines, so :attr:`line_num` is "
"not the same as the number of records read."
msgstr ""
"Модуль :mod:`csv`, который анализирует файлы в формате значений, разделенных "
"запятыми, получил несколько улучшений и ряд исправлений. Теперь вы можете "
"установить максимальный размер поля в байтах, вызвав функцию ``csv."
"field_size_limit(new_limit)``; опущение аргумента *new_limit* вернет текущий "
"установленный предел. Класс :class:`reader` теперь имеет атрибут :attr:"
"`line_num`, который подсчитывает количество физических строк, прочитанных из "
"источника; записи могут занимать несколько физических строк, поэтому :attr:"
"`line_num` не совпадает с количеством прочитанных записей."

#: ../../whatsnew/2.5.rst:1301
msgid ""
"The CSV parser is now stricter about multi-line quoted fields. Previously, "
"if a line ended within a quoted field without a terminating newline "
"character, a newline would be inserted into the returned field. This "
"behavior caused problems when reading files that contained carriage return "
"characters within fields, so the code was changed to return the field "
"without inserting newlines. As a consequence, if newlines embedded within "
"fields are important, the input should be split into lines in a manner that "
"preserves the newline characters."
msgstr ""
"Анализатор CSV теперь более строг в отношении полей с многострочными "
"кавычками. Раньше, если строка заканчивалась внутри поля в кавычках без "
"завершающего символа новой строки, в возвращаемое поле вставлялась новая "
"строка. Такое поведение вызывало проблемы при чтении файлов, содержащих "
"символы возврата каретки в полях, поэтому код был изменен, чтобы возвращать "
"поле без вставки символов новой строки. Как следствие, если важны символы "
"новой строки, встроенные в поля, входные данные следует разделить на строки "
"таким образом, чтобы сохранить символы новой строки."

#: ../../whatsnew/2.5.rst:1309
msgid "(Contributed by Skip Montanaro and Andrew McNamara.)"
msgstr "(Сообщили Скип Монтанаро и Эндрю Макнамара.)"

#: ../../whatsnew/2.5.rst:1311
msgid ""
"The :class:`~datetime.datetime` class in the :mod:`datetime`  module now has "
"a ``strptime(string, format)``  method for parsing date strings, contributed "
"by Josh Spoerri. It uses the same format characters as :func:`time.strptime` "
"and :func:`time.strftime`::"
msgstr ""
"Класс :class:`~datetime.datetime` в модуле :mod:`datetime` теперь имеет "
"метод ``strptime(string, format)`` для анализа строк даты, предоставленный "
"Джошем Сперри. Он использует те же символы формата, что и :func:`time."
"strptime` и :func:`time.strftime`::"

#: ../../whatsnew/2.5.rst:1321
msgid ""
"The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib` "
"module now guarantees to return a minimal list of blocks describing matching "
"subsequences.  Previously, the algorithm would occasionally break a block of "
"matching elements into two list entries. (Enhancement by Tim Peters.)"
msgstr ""
"Метод :meth:`SequenceMatcher.get_matching_blocks` в модуле :mod:`difflib` "
"теперь гарантирует возврат минимального списка блоков, описывающих "
"совпадающие подпоследовательности. Раньше алгоритм иногда разбивал блок "
"совпадающих элементов на две записи списка. (Улучшение Тима Питерса.)"

#: ../../whatsnew/2.5.rst:1326
msgid ""
"The :mod:`doctest` module gained a ``SKIP`` option that keeps an example "
"from being executed at all.  This is intended for code snippets that are "
"usage examples intended for the reader and aren't actually test cases."
msgstr ""
"Модуль :mod:`doctest` получил опцию SKIP, которая вообще предотвращает "
"выполнение примера. Это предназначено для фрагментов кода, которые "
"представляют собой примеры использования, предназначенные для читателя, а не "
"тестовые примеры."

#: ../../whatsnew/2.5.rst:1330
msgid ""
"An *encoding* parameter was added to the :func:`testfile` function and the :"
"class:`DocFileSuite` class to specify the file's encoding.  This makes it "
"easier to use non-ASCII characters in  tests contained within a docstring. "
"(Contributed by Bjorn Tillenius.)"
msgstr ""
"Параметр *encoding* был добавлен в функцию :func:`testfile` и класс :class:"
"`DocFileSuite` для указания кодировки файла. Это упрощает использование "
"символов, отличных от ASCII, в тестах, содержащихся в строке документации. "
"(Предоставлено Бьёрном Тиллениусом.)"

#: ../../whatsnew/2.5.rst:1337
msgid ""
"The :mod:`email` package has been updated to version 4.0. (Contributed by "
"Barry Warsaw.)"
msgstr ""
"Пакет :mod:`email` обновлен до версии 4.0. (Предоставлено Барри Варшавой.)"

#: ../../whatsnew/2.5.rst:1345
msgid ""
"The :mod:`fileinput` module was made more flexible. Unicode filenames are "
"now supported, and a *mode* parameter that defaults to ``\"r\"`` was added "
"to the :func:`input` function to allow opening files in binary or :term:"
"`universal newlines` mode.  Another new parameter, *openhook*, lets you use "
"a function other than :func:`open`  to open the input files.  Once you're "
"iterating over the set of files, the :class:`FileInput` object's new :meth:"
"`~fileinput.fileno` returns the file descriptor for the currently opened "
"file. (Contributed by Georg Brandl.)"
msgstr ""
"Модуль :mod:`fileinput` стал более гибким. Теперь поддерживаются имена "
"файлов в Юникоде, а в функцию :func:`input` был добавлен параметр *mode*, "
"который по умолчанию имеет значение ``\"r\"``, чтобы разрешить открытие "
"файлов в двоичном режиме или в режиме :term:`универсальной новой строки`. "
"Еще один новый параметр, *openhook*, позволяет использовать функцию, "
"отличную от :func:`open`, для открытия входных файлов. После того, как вы "
"перебираете набор файлов, новый :meth:`~fileinput.fileno` объекта :class:"
"`FileInput` возвращает файловый дескриптор для текущего открытого файла. "
"(Предоставлено Георгом Брандлом.)"

#: ../../whatsnew/2.5.rst:1354
msgid ""
"In the :mod:`gc` module, the new :func:`get_count` function returns a 3-"
"tuple containing the current collection counts for the three GC "
"generations.  This is accounting information for the garbage collector; when "
"these counts reach a specified threshold, a garbage collection sweep will be "
"made.  The existing :func:`gc.collect` function now takes an optional "
"*generation* argument of 0, 1, or 2 to specify which generation to collect. "
"(Contributed by Barry Warsaw.)"
msgstr ""
"В модуле :mod:`gc` новая функция :func:`get_count` возвращает кортеж из трех "
"элементов, содержащий текущие счетчики коллекций для трех поколений GC. Это "
"учетная информация для сборщика мусора; когда эти значения достигнут "
"определенного порога, будет произведена очистка мусора. Существующая "
"функция :func:`gc.collect` теперь принимает необязательный аргумент "
"*генерация*, равный 0, 1 или 2, чтобы указать, какое поколение собирать. "
"(Предоставлено Барри Варшавой.)"

#: ../../whatsnew/2.5.rst:1361
msgid ""
"The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq` "
"module  now support a ``key`` keyword parameter similar to the one provided "
"by the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For "
"example::"
msgstr ""
"Функции :func:`nsmallest` и :func:`nlargest` в модуле :mod:`heapq` теперь "
"поддерживают ключевой параметр ``key``, аналогичный тому, который "
"предоставляется :func:`min`/:func функции :`max` и методы :meth:`sort`. "
"Например::"

#: ../../whatsnew/2.5.rst:1373 ../../whatsnew/2.5.rst:1382
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1375
msgid ""
"The :func:`itertools.islice` function now accepts ``None`` for the start and "
"step arguments.  This makes it more compatible with the attributes of slice "
"objects, so that you can now write the following::"
msgstr ""
"Функция :func:`itertools.islice` теперь принимает значение None в качестве "
"аргументов начала и шага. Это делает его более совместимым с атрибутами "
"объектов срезов, так что теперь вы можете написать следующее:"

#: ../../whatsnew/2.5.rst:1384
msgid ""
"The :func:`format` function in the :mod:`locale` module has been modified "
"and two new functions were added, :func:`format_string` and :func:`currency`."
msgstr ""
"Функция :func:`format` в модуле :mod:`locale` была изменена и добавлены две "
"новые функции: :func:`format_string` и :func:`currency`."

#: ../../whatsnew/2.5.rst:1387
msgid ""
"The :func:`format` function's *val* parameter could previously be a string "
"as long as no more than one %char specifier appeared; now the parameter must "
"be exactly one %char specifier with no surrounding text.  An optional "
"*monetary* parameter was also added which, if ``True``, will use the "
"locale's rules for formatting currency in placing a separator between groups "
"of three digits."
msgstr ""
"Параметр *val* функции :func:`format` ранее мог быть строкой длиной не более "
"одной %с появился спецификатор har; теперь параметр должен быть ровно один "
"%с Спецификатор har без окружающего текста. Также был добавлен "
"необязательный параметр *monetary*, который, если он имеет значение True, "
"будет использовать правила локали для форматирования валюты при размещении "
"разделителя между группами из трех цифр."

#: ../../whatsnew/2.5.rst:1393
msgid ""
"To format strings with multiple %char specifiers, use the new :func:"
"`format_string` function that works like :func:`format` but also supports "
"mixing %char specifiers with arbitrary text."
msgstr ""
"Чтобы отформатировать строки с несколькими %с спецификаторы har, используйте "
"новую функцию :func:`format_string`, которая работает как :func:`format`, но "
"также поддерживает смешивание %с Спецификаторы har с произвольным текстом."

#: ../../whatsnew/2.5.rst:1397
msgid ""
"A new :func:`currency` function was also added that formats a number "
"according to the current locale's settings."
msgstr ""
"Также была добавлена ​​новая функция :func:`currency`, которая форматирует "
"число в соответствии с настройками текущей локали."

#: ../../whatsnew/2.5.rst:1400
msgid "(Contributed by Georg Brandl.)"
msgstr "(Предоставлено Георгом Брандлом.)"

#: ../../whatsnew/2.5.rst:1404
msgid ""
"The :mod:`mailbox` module underwent a massive rewrite to add the capability "
"to modify mailboxes in addition to reading them.  A new set of classes that "
"include :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read "
"mailboxes, and have an ``add(message)`` method to add messages, "
"``remove(key)`` to remove messages, and :meth:`lock`/:meth:`unlock` to lock/"
"unlock the mailbox. The following example converts a maildir-format mailbox "
"into an mbox-format one::"
msgstr ""
"Модуль :mod:`mailbox` был сильно переписан, чтобы добавить возможность "
"изменять почтовые ящики в дополнение к их чтению. Новый набор классов, "
"включающий :class:`mbox`, :class:`MH` и :class:`Maildir`, используется для "
"чтения почтовых ящиков и имеет метод ``add(message)`` для добавления "
"сообщений. ``remove(key)`` для удаления сообщений и :meth:`lock`/:meth:"
"`unlock` для блокировки/разблокировки почтового ящика. В следующем примере "
"почтовый ящик формата maildir преобразуется в ящик формата mbox:"

#: ../../whatsnew/2.5.rst:1422
msgid ""
"(Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005 "
"Summer of Code.)"
msgstr ""
"(Предоставлено Грегори К. Джонсоном. Финансирование было предоставлено "
"Google Summer of Code 2005.)"

#: ../../whatsnew/2.5.rst:1425
msgid ""
"New module: the :mod:`msilib` module allows creating Microsoft Installer :"
"file:`.msi` files and CAB files.  Some support for reading the :file:`.msi` "
"database is also included. (Contributed by Martin von Löwis.)"
msgstr ""
"Новый модуль: модуль :mod:`msilib` позволяет создавать файлы Microsoft "
"Installer :file:`.msi` и CAB-файлы. Также включена некоторая поддержка "
"чтения базы данных :file:`.msi`. (Предоставлено Мартином фон Лёвисом.)"

#: ../../whatsnew/2.5.rst:1429
msgid ""
"The :mod:`nis` module now supports accessing domains other than the system "
"default domain by supplying a *domain* argument to the :func:`nis.match` "
"and :func:`nis.maps` functions. (Contributed by Ben Bell.)"
msgstr ""
"Модуль :mod:`nis` теперь поддерживает доступ к доменам, отличным от "
"системного домена по умолчанию, путем предоставления аргумента *domain* "
"функциям :func:`nis.match` и :func:`nis.maps`. (Предоставлено Беном Беллом.)"

#: ../../whatsnew/2.5.rst:1433
msgid ""
"The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter` "
"functions now support multiple fields.   A call such as ``operator."
"attrgetter('a', 'b')`` will return a function  that retrieves the :attr:`a` "
"and :attr:`b` attributes.  Combining  this new feature with the :meth:`sort` "
"method's ``key`` parameter  lets you easily sort lists using multiple "
"fields. (Contributed by Raymond Hettinger.)"
msgstr ""
"Функции :func:`itemgetter` и :func:`attrgetter` модуля :mod:`operator` "
"теперь поддерживают несколько полей. Такой вызов, как ``operator."
"attrgetter('a', 'b')``, вернет функцию, которая извлекает атрибуты :attr:`a` "
"и :attr:`b`. Сочетание этой новой функции с параметром ``key`` метода :meth:"
"`sort` позволяет легко сортировать списки, используя несколько полей. "
"(Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1440
msgid ""
"The :mod:`optparse` module was updated to version 1.5.1 of the Optik "
"library. The :class:`OptionParser` class gained an :attr:`epilog` attribute, "
"a string that will be printed after the help message, and a :meth:`destroy` "
"method to break reference cycles created by the object. (Contributed by Greg "
"Ward.)"
msgstr ""
"Модуль :mod:`optparse` обновлен до версии 1.5.1 библиотеки Optik. Класс :"
"class:`OptionParser` получил атрибут :attr:`epilog`, строку, которая будет "
"напечатана после справочного сообщения, и метод :meth:`destroy` для разрыва "
"циклов ссылок, созданных объектом. (Предоставлено Грегом Уордом.)"

#: ../../whatsnew/2.5.rst:1445
msgid ""
"The :mod:`os` module underwent several changes.  The :attr:"
"`stat_float_times` variable now defaults to true, meaning that :func:`os."
"stat` will now return time values as floats.  (This doesn't necessarily mean "
"that :func:`os.stat` will return times that are precise to fractions of a "
"second; not all systems support such precision.)"
msgstr ""
"Модуль :mod:`os` претерпел несколько изменений. Переменная :attr:"
"`stat_float_times` теперь по умолчанию имеет значение true, а это означает, "
"что :func:`os.stat` теперь будет возвращать значения времени в виде чисел с "
"плавающей запятой. (Это не обязательно означает, что :func:`os.stat` будет "
"возвращать время с точностью до долей секунды; не все системы поддерживают "
"такую ​​точность.)"

#: ../../whatsnew/2.5.rst:1451
msgid ""
"Constants named :const:`os.SEEK_SET`, :const:`os.SEEK_CUR`, and :const:`os."
"SEEK_END` have been added; these are the parameters to the :func:`os.lseek` "
"function.  Two new constants for locking are :const:`os.O_SHLOCK` and :const:"
"`os.O_EXLOCK`."
msgstr ""
"Добавлены константы с именами :const:`os.SEEK_SET`, :const:`os.SEEK_CUR` и :"
"const:`os.SEEK_END`; это параметры функции :func:`os.lseek`. Две новые "
"константы для блокировки: const:`os.O_SHLOCK` и :const:`os.O_EXLOCK`."

#: ../../whatsnew/2.5.rst:1456
msgid ""
"Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're "
"similar the :func:`waitpid` function which waits for a child process to exit "
"and returns a tuple of the process ID and its exit status, but :func:`wait3` "
"and :func:`wait4` return additional information.  :func:`wait3` doesn't take "
"a process ID as input, so it waits for any child process to exit and returns "
"a 3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from "
"the :func:`resource.getrusage` function. ``wait4(pid)`` does take a process "
"ID. (Contributed by Chad J. Schroeder.)"
msgstr ""
"Были добавлены две новые функции: :func:`wait3` и :func:`wait4`. Они похожи "
"на функцию :func:`waitpid`, которая ожидает завершения дочернего процесса и "
"возвращает кортеж с идентификатором процесса и его статусом завершения, но :"
"func:`wait3` и :func:`wait4` возвращают дополнительную информацию. . :func:"
"`wait3` не принимает идентификатор процесса в качестве входных данных, "
"поэтому он ожидает завершения любого дочернего процесса и возвращает тройной "
"кортеж *process-id*, *exit-status*, *resource-usage* как возвращается из "
"функции :func:`resource.getrusage`. ``wait4(pid)`` принимает идентификатор "
"процесса. (Предоставлено Чадом Дж. Шредером.)"

#: ../../whatsnew/2.5.rst:1465
msgid ""
"On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond "
"resolution, and the returned object now has :attr:`st_gen` and :attr:"
"`st_birthtime`. The :attr:`st_flags` attribute is also available, if the "
"platform supports it. (Contributed by Antti Louko and  Diego Pettenò.)"
msgstr ""
"Во FreeBSD функция :func:`os.stat` теперь возвращает время с наносекундным "
"разрешением, а возвращаемый объект теперь имеет :attr:`st_gen` и :attr:"
"`st_birthtime`. Атрибут :attr:`st_flags` также доступен, если платформа его "
"поддерживает. (Сообщили Антти Луко и Диего Петтено.)"

#: ../../whatsnew/2.5.rst:1472
msgid ""
"The Python debugger provided by the :mod:`pdb` module can now store lists of "
"commands to execute when a breakpoint is reached and execution stops.  Once "
"breakpoint #1 has been created, enter ``commands 1`` and enter a series of "
"commands to be executed, finishing the list with ``end``.  The command list "
"can include commands that resume execution, such as ``continue`` or "
"``next``. (Contributed by Grégoire Dooms.)"
msgstr ""
"Отладчик Python, предоставляемый модулем :mod:`pdb`, теперь может хранить "
"списки команд, которые необходимо выполнить при достижении точки останова и "
"остановке выполнения. После создания точки останова №1 введите ``команды 1`` "
"и введите серию команд, которые необходимо выполнить, завершив список словом "
"``end``. Список команд может включать команды, которые возобновляют "
"выполнение, например «продолжить» или «следующий». (Предоставлено Грегуаром "
"Думсом.)"

#: ../../whatsnew/2.5.rst:1481
msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules no longer accept a return "
"value of ``None`` from the :meth:`~object.__reduce__` method; the method "
"must return a tuple of arguments instead.  The ability to return ``None`` "
"was deprecated in Python 2.4, so this completes the removal of the feature."
msgstr ""
"Модули :mod:`pickle` и :mod:`!cPickle` больше не принимают возвращаемое "
"значение ``None`` из метода :meth:`~object.__reduce__`; Вместо этого метод "
"должен возвращать кортеж аргументов. Возможность возвращать None устарела в "
"Python 2.4, поэтому на этом удаление этой функции завершено."

#: ../../whatsnew/2.5.rst:1486
msgid ""
"The :mod:`pkgutil` module, containing various utility functions for finding "
"packages, was enhanced to support :pep:`302`'s import hooks and now also "
"works for packages stored in ZIP-format archives. (Contributed by Phillip J. "
"Eby.)"
msgstr ""
"Модуль :mod:`pkgutil`, содержащий различные служебные функции для поиска "
"пакетов, был расширен для поддержки перехватчиков импорта :pep:`302` и "
"теперь также работает для пакетов, хранящихся в архивах формата ZIP. "
"(Предоставлено Филипом Дж. Эби.)"

#: ../../whatsnew/2.5.rst:1490
msgid ""
"The pybench benchmark suite by Marc-André Lemburg is now included in the :"
"file:`Tools/pybench` directory.  The pybench suite is an improvement on the "
"commonly used :file:`pystone.py` program because pybench provides a more "
"detailed measurement of the interpreter's speed.  It times particular "
"operations such as function calls, tuple slicing, method lookups, and "
"numeric operations, instead of performing many different operations and "
"reducing the result to a single number as :file:`pystone.py` does."
msgstr ""
"Пакет тестов pybench от Марка-Андре Лембурга теперь включен в каталог :file:"
"`Tools/pybench`. Пакет pybench является усовершенствованием широко "
"используемой программы :file:`pystone.py`, поскольку pybench обеспечивает "
"более детальное измерение скорости интерпретатора. Он учитывает время "
"отдельных операций, таких как вызовы функций, нарезка кортежей, поиск "
"методов и числовые операции, вместо того, чтобы выполнять множество "
"различных операций и сводить результат к одному числу, как это делает :file:"
"`pystone.py`."

#: ../../whatsnew/2.5.rst:1498
msgid ""
"The :mod:`pyexpat` module now uses version 2.0 of the Expat parser. "
"(Contributed by Trent Mick.)"
msgstr ""
"Модуль :mod:`pyexpat` теперь использует парсер Expat версии 2.0. "
"(Предоставлено Трентом Миком.)"

#: ../../whatsnew/2.5.rst:1501
msgid ""
"The :class:`~queue.Queue` class provided by the :mod:`Queue` module gained "
"two new methods.  :meth:`join` blocks until all items in the queue have been "
"retrieved and all processing work on the items  have been completed.  Worker "
"threads call the other new method,  :meth:`task_done`, to signal that "
"processing for an item has been completed.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Класс :class:`~queue.Queue`, предоставляемый модулем :mod:`Queue`, получил "
"два новых метода. :meth:`join` блокируется до тех пор, пока все элементы в "
"очереди не будут извлечены и вся работа по обработке элементов не будет "
"завершена. Рабочие потоки вызывают другой новый метод, :meth:`task_done`, "
"чтобы сигнализировать о завершении обработки элемента. (Предоставлено "
"Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:1507
msgid ""
"The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated "
"ever since Python 2.0, have finally been deleted.   Other deleted modules: :"
"mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."
msgstr ""
"Старые модули :mod:`regex` и :mod:`regsub`, которые устарели со времен "
"Python 2.0, наконец-то были удалены. Другие удаленные модули: :mod:"
"`statcache`, :mod:`tzparse`, :mod:`whrandom`."

#: ../../whatsnew/2.5.rst:1511
msgid ""
"Also deleted: the :file:`lib-old` directory, which includes ancient modules "
"such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on "
"the default ``sys.path``, so unless your programs explicitly added the "
"directory to ``sys.path``, this removal shouldn't affect your code."
msgstr ""
"Также удалено: удален каталог :file:`lib-old`, который включает древние "
"модули, такие как :mod:`dircmp` и :mod:`ni`. :file:`lib-old` не находился в "
"``sys.path`` по умолчанию, поэтому, если ваши программы явно не добавили "
"каталог в ``sys.path``, это удаление не должно повлиять на ваш код."

#: ../../whatsnew/2.5.rst:1516
msgid ""
"The :mod:`rlcompleter` module is no longer  dependent on importing the :mod:"
"`readline` module and therefore now works on non-Unix platforms. (Patch from "
"Robert Kiendl.)"
msgstr ""
"Модуль :mod:`rlcompleter` больше не зависит от импорта модуля :mod:"
"`readline` и поэтому теперь работает на платформах, отличных от Unix. (Патч "
"от Роберта Киндла.)"

#: ../../whatsnew/2.5.rst:1522
msgid ""
"The :mod:`SimpleXMLRPCServer <xmlrpc.server>` and :mod:`DocXMLRPCServer "
"<xmlrpc.server>`  classes now have a :attr:`rpc_paths` attribute that "
"constrains XML-RPC operations to a limited set of URL paths; the default is "
"to allow only ``'/'`` and ``'/RPC2'``.  Setting :attr:`rpc_paths` to "
"``None`` or an empty tuple disables  this path checking."
msgstr ""
"Классы :mod:`SimpleXMLRPCServer <xmlrpc.server>` и :mod:`DocXMLRPCServer "
"<xmlrpc.server>` теперь имеют атрибут :attr:`rpc_paths`, который "
"ограничивает операции XML-RPC ограниченным набором URL-путей; по умолчанию "
"разрешены только ``'/'`` и ``'/RPC2'``. Установка :attr:`rpc_paths` в "
"``None`` или пустой кортеж отключает эту проверку пути."

#: ../../whatsnew/2.5.rst:1529
msgid ""
"The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux, "
"thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-"
"specific mechanism for communications between a user-space process and "
"kernel code; an introductory  article about them is at https://www."
"linuxjournal.com/article/7356. In Python code, netlink addresses are "
"represented as a tuple of 2 integers, ``(pid, group_mask)``."
msgstr ""
"Модуль :mod:`socket` теперь поддерживает сокеты :const:`AF_NETLINK` в Linux "
"благодаря патчу от Филиппа Бионди. Сокеты Netlink — это специфичный для "
"Linux механизм связи между процессом пользовательского пространства и кодом "
"ядра; вводную статью о них можно найти по адресу https://www.linuxjournal."
"com/article/7356. В коде Python адреса сетевых ссылок представлены как "
"кортеж из двух целых чисел ``(pid, group_mask)``."

#: ../../whatsnew/2.5.rst:1536
msgid ""
"Two new methods on socket objects, ``recv_into(buffer)`` and "
"``recvfrom_into(buffer)``, store the received data in an object  that "
"supports the buffer protocol instead of returning the data as a string.  "
"This means you can put the data directly into an array or a memory-mapped "
"file."
msgstr ""
"Два новых метода для объектов сокета, «recv_into(buffer)» и "
"«recvfrom_into(buffer)», сохраняют полученные данные в объекте, который "
"поддерживает протокол буфера, вместо того, чтобы возвращать данные в виде "
"строки. Это означает, что вы можете поместить данные непосредственно в "
"массив или файл, отображаемый в памяти."

#: ../../whatsnew/2.5.rst:1541
msgid ""
"Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and :meth:"
"`getproto` accessor methods to retrieve the family, type, and protocol "
"values for the socket."
msgstr ""
"Объекты сокетов также получили методы доступа :meth:`getfamily`, :meth:"
"`gettype` и :meth:`getproto` для получения значений семейства, типа и "
"протокола для сокета."

#: ../../whatsnew/2.5.rst:1545
msgid ""
"New module: the :mod:`spwd` module provides functions for accessing the "
"shadow password database on systems that support  shadow passwords."
msgstr ""
"Новый модуль: модуль :mod:`spwd` предоставляет функции для доступа к базе "
"данных теневых паролей в системах, поддерживающих теневые пароли."

#: ../../whatsnew/2.5.rst:1548
msgid ""
"The :mod:`struct` is now faster because it  compiles format strings into :"
"class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This "
"is similar to how the :mod:`re` module lets you create compiled regular "
"expression objects.  You can still use the module-level  :func:`pack` and :"
"func:`unpack` functions; they'll create  :class:`Struct` objects and cache "
"them.  Or you can use  :class:`Struct` instances directly::"
msgstr ""
":mod:`struct` теперь работает быстрее, поскольку он компилирует строки "
"формата в объекты :class:`Struct` с помощью методов :meth:`pack` и :meth:"
"`unpack`. Это похоже на то, как модуль :mod:`re` позволяет создавать "
"скомпилированные объекты регулярных выражений. Вы по-прежнему можете "
"использовать функции :func:`pack` и :func:`unpack` на уровне модуля; они "
"будут создавать объекты :class:`Struct` и кэшировать их. Или вы можете "
"использовать экземпляры :class:`Struct` напрямую::"

#: ../../whatsnew/2.5.rst:1560
msgid ""
"You can also pack and unpack data to and from buffer objects directly using "
"the ``pack_into(buffer, offset, v1, v2, ...)`` and ``unpack_from(buffer, "
"offset)`` methods.  This lets you store data directly into an array or a "
"memory-mapped file."
msgstr ""
"Вы также можете упаковывать и распаковывать данные в объекты буфера и из них "
"напрямую, используя методы ``pack_into(buffer, offset, v1, v2, ...)`` и "
"``unpack_from(buffer, offset)``. Это позволяет хранить данные "
"непосредственно в массиве или файле, отображаемом в памяти."

#: ../../whatsnew/2.5.rst:1565
msgid ""
"(:class:`Struct` objects were implemented by Bob Ippolito at the "
"NeedForSpeed sprint.  Support for buffer objects was added by Martin Blais, "
"also at the NeedForSpeed sprint.)"
msgstr ""
"(Объекты:class:`Struct` были реализованы Бобом Ипполито во время спринта "
"NeedForSpeed. Поддержка буферных объектов была добавлена ​​Мартином Блейсом, "
"также во время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:1569
msgid ""
"The Python developers switched from CVS to Subversion during the 2.5 "
"development process.  Information about the exact build version is available "
"as the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-"
"name, revision-range)``.  For example, at the time of writing my copy of 2.5 "
"was reporting ``('CPython', 'trunk', '45313:45315')``."
msgstr ""
"Разработчики Python перешли с CVS на Subversion в процессе разработки версии "
"2.5. Информация о точной версии сборки доступна в виде переменной ``sys."
"subversion``, состоящей из трех частей ``(имя-интерпретатора, имя-ветви, "
"диапазон ревизий)``. Например, на момент написания моя копия 2.5 сообщала "
"``('CPython', 'trunk', '45313:45315')``."

#: ../../whatsnew/2.5.rst:1575
msgid ""
"This information is also available to C extensions via the :c:func:"
"`Py_GetBuildInfo` function that returns a  string of build information like "
"this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by "
"Barry Warsaw.)"
msgstr ""
"Эта информация также доступна расширениям C через функцию :c:func:"
"`Py_GetBuildInfo`, которая возвращает строку информации о сборке, подобную "
"этой: ``\"trunk:45355:45356M, 13 апреля 2006 г., 07:42:19\"`` . "
"(Предоставлено Барри Варшавой.)"

#: ../../whatsnew/2.5.rst:1580
msgid ""
"Another new function, :func:`sys._current_frames`, returns the current stack "
"frames for all running threads as a dictionary mapping thread identifiers to "
"the topmost stack frame currently active in that thread at the time the "
"function is called.  (Contributed by Tim Peters.)"
msgstr ""
"Другая новая функция, :func:`sys._current_frames`, возвращает текущие кадры "
"стека для всех запущенных потоков в виде словаря, сопоставляющего "
"идентификаторы потоков с самым верхним кадром стека, активным в данный "
"момент в этом потоке на момент вызова функции. (Предоставлено Тимом "
"Питерсом.)"

#: ../../whatsnew/2.5.rst:1585
msgid ""
"The :class:`TarFile` class in the :mod:`tarfile` module now has an :meth:"
"`extractall` method that extracts all members from the archive into the "
"current working directory.  It's also possible to set a different directory "
"as the extraction target, and to unpack only a subset of the archive's "
"members."
msgstr ""
"Класс :class:`TarFile` в модуле :mod:`tarfile` теперь имеет метод :meth:"
"`extractall`, который извлекает все элементы из архива в текущий рабочий "
"каталог. Также можно установить другой каталог в качестве цели извлечения и "
"распаковывать только часть элементов архива."

#: ../../whatsnew/2.5.rst:1590
msgid ""
"The compression used for a tarfile opened in stream mode can now be "
"autodetected using the mode ``'r|*'``. (Contributed by Lars Gustäbel.)"
msgstr ""
"Сжатие, используемое для tar-файла, открытого в потоковом режиме, теперь "
"можно автоматически определить с помощью режима ``'r|*'``. (Предоставлено "
"Ларсом Густебелем.)"

#: ../../whatsnew/2.5.rst:1595
msgid ""
"The :mod:`threading` module now lets you set the stack size used when new "
"threads are created. The ``stack_size([*size*])`` function returns the "
"currently configured stack size, and supplying the optional *size* parameter "
"sets a new value.  Not all platforms support changing the stack size, but "
"Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)"
msgstr ""
"Модуль :mod:`threading` теперь позволяет вам установить размер стека, "
"используемый при создании новых потоков. Функция stack_size([*size*])`` "
"возвращает текущий настроенный размер стека, а указание необязательного "
"параметра *size* устанавливает новое значение. Не все платформы поддерживают "
"изменение размера стека, но все Windows, многопоточность POSIX и OS/2 "
"поддерживают. (Предоставлено Эндрю Макинтайром.)"

#: ../../whatsnew/2.5.rst:1603
msgid ""
"The :mod:`unicodedata` module has been updated to use version 4.1.0 of the "
"Unicode character database.  Version 3.2.0 is required  by some "
"specifications, so it's still available as  :data:`unicodedata.ucd_3_2_0`."
msgstr ""
"Модуль :mod:`unicodedata` был обновлен для использования версии 4.1.0 базы "
"данных символов Юникода. Версия 3.2.0 требуется для некоторых спецификаций, "
"поэтому она по-прежнему доступна как :data:`unicodedata.ucd_3_2_0`."

#: ../../whatsnew/2.5.rst:1607
msgid ""
"New module: the  :mod:`uuid` module generates  universally unique "
"identifiers (UUIDs) according to :rfc:`4122`.  The RFC defines several "
"different UUID versions that are generated from a starting string, from "
"system properties, or purely randomly.  This module contains a :class:`UUID` "
"class and  functions named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  "
"and  :func:`uuid5` to generate different versions of UUID.  (Version 2 "
"UUIDs  are not specified in :rfc:`4122` and are not supported by this "
"module.) ::"
msgstr ""
"Новый модуль: модуль :mod:`uuid` генерирует универсально уникальные "
"идентификаторы (UUID) в соответствии с :rfc:`4122`. RFC определяет несколько "
"различных версий UUID, которые генерируются из начальной строки, из свойств "
"системы или чисто случайным образом. Этот модуль содержит класс :class:"
"`UUID` и функции с именами :func:`uuid1`, :func:`uuid3`, :func:`uuid4` и :"
"func:`uuid5` для генерации различных версий UUID. (UUID версии 2 не указаны "
"в :rfc:`4122` и не поддерживаются этим модулем.) ::"

#: ../../whatsnew/2.5.rst:1632
msgid "(Contributed by Ka-Ping Yee.)"
msgstr "(Предоставлено Ка-Пин Йи.)"

#: ../../whatsnew/2.5.rst:1634
msgid ""
"The :mod:`weakref` module's :class:`WeakKeyDictionary` and :class:"
"`WeakValueDictionary` types gained new methods for iterating over the weak "
"references contained in the dictionary.  :meth:`iterkeyrefs` and :meth:"
"`keyrefs` methods were added to :class:`WeakKeyDictionary`, and :meth:"
"`itervaluerefs` and :meth:`valuerefs` were added to :class:"
"`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""
"Типы :class:`WeakKeyDictionary` и :class:`WeakValueDictionary` модуля :mod:"
"`weakref` получили новые методы для перебора слабых ссылок, содержащихся в "
"словаре. Методы :meth:`iterkeyrefs` и :meth:`keyrefs` были добавлены в :"
"class:`WeakKeyDictionary`, а :meth:`itervaluerefs` и :meth:`valuerefs` были "
"добавлены в :class:`WeakValueDictionary`. (Предоставлено Фредом Л. Дрейком-"
"младшим)"

#: ../../whatsnew/2.5.rst:1641
msgid ""
"The :mod:`webbrowser` module received a number of enhancements. It's now "
"usable as a script with ``python -m webbrowser``, taking a URL as the "
"argument; there are a number of switches  to control the behaviour (:option:"
"`!-n` for a new browser window,  :option:`!-t` for a new tab).  New module-"
"level functions, :func:`open_new` and :func:`open_new_tab`, were added  to "
"support this.  The module's :func:`open` function supports an additional "
"feature, an *autoraise* parameter that signals whether to raise the open "
"window when possible. A number of additional browsers were added to the "
"supported list such as Firefox, Opera, Konqueror, and elinks.  (Contributed "
"by Oleg Broytmann and Georg Brandl.)"
msgstr ""
"Модуль :mod:`webbrowser` получил ряд улучшений. Теперь его можно "
"использовать как скрипт с ``python -m webbrowser``, принимая URL-адрес в "
"качестве аргумента; существует ряд переключателей для управления поведением "
"(:option:`!-n` для нового окна браузера, :option:`!-t` для новой вкладки). "
"Для поддержки этого были добавлены новые функции уровня модуля: :func:"
"`open_new` и :func:`open_new_tab`. Функция :func:`open` модуля поддерживает "
"дополнительную функцию — параметр *autoraise*, который сигнализирует, "
"следует ли поднимать открытое окно, когда это возможно. В список "
"поддерживаемых был добавлен ряд дополнительных браузеров, таких как Firefox, "
"Opera, Konqueror и elinks. (Сообщили Олег Бройтманн и Георг Брандл.)"

#: ../../whatsnew/2.5.rst:1653
msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module now supports returning  :class:"
"`~datetime.datetime` objects for the XML-RPC date type.  Supply  "
"``use_datetime=True`` to the :func:`~xmlrpc.client.loads` function or the :"
"class:`!Unmarshaller` class to enable this feature. (Contributed by Skip "
"Montanaro.)"
msgstr ""
"Модуль :mod:`xmlrpclib <xmlrpc.client>` теперь поддерживает возврат "
"объектов :class:`~datetime.datetime` для типа даты XML-RPC. Чтобы включить "
"эту функцию, укажите ``use_datetime=True`` в функции :func:`~xmlrpc.client."
"loads` или в классе :class:`!Unmarshaller`. (Предоставлено Скипом Монтанаро.)"

#: ../../whatsnew/2.5.rst:1660
msgid ""
"The :mod:`zipfile` module now supports the ZIP64 version of the  format, "
"meaning that a .zip archive can now be larger than 4 GiB and can contain "
"individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)"
msgstr ""
"Модуль :mod:`zipfile` теперь поддерживает версию формата ZIP64, а это "
"означает, что архив .zip теперь может иметь размер более 4 ГиБ и может "
"содержать отдельные файлы размером более 4 ГиБ. (Предоставлено Рональдом "
"Уссореном.)"

#: ../../whatsnew/2.5.rst:1666
msgid ""
"The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects "
"now support a :meth:`copy` method that makes a copy of the  object's "
"internal state and returns a new  :class:`Compress` or :class:`Decompress` "
"object. (Contributed by Chris AtLee.)"
msgstr ""
"Объекты :class:`Compress` и :class:`Decompress` модуля :mod:`zlib` теперь "
"поддерживают метод :meth:`copy`, который создает копию внутреннего состояния "
"объекта и возвращает новый :class:`Compress ` или :class:`Распаковать` "
"объект. (Предоставлено Крисом ЭтЛи.)"

#: ../../whatsnew/2.5.rst:1679
msgid "The ctypes package"
msgstr "Пакет ctypes"

#: ../../whatsnew/2.5.rst:1681
msgid ""
"The :mod:`ctypes` package, written by Thomas Heller, has been added  to the "
"standard library.  :mod:`ctypes` lets you call arbitrary functions  in "
"shared libraries or DLLs.  Long-time users may remember the :mod:`!dl` "
"module, which provides functions for loading shared libraries and calling "
"functions in them. The :mod:`ctypes` package is much fancier."
msgstr ""
"Пакет :mod:`ctypes`, написанный Томасом Хеллером, был добавлен в стандартную "
"библиотеку. :mod:`ctypes` позволяет вызывать произвольные функции в общих "
"библиотеках или DLL. Опытные пользователи могут помнить модуль :mod:`!dl`, "
"который предоставляет функции для загрузки общих библиотек и вызова функций "
"в них. Пакет :mod:`ctypes` гораздо интереснее."

#: ../../whatsnew/2.5.rst:1687
msgid ""
"To load a shared library or DLL, you must create an instance of the :class:"
"`CDLL` class and provide the name or path of the shared library or DLL. Once "
"that's done, you can call arbitrary functions by accessing them as "
"attributes of the :class:`CDLL` object.   ::"
msgstr ""
"Чтобы загрузить общую библиотеку или DLL, вы должны создать экземпляр "
"класса :class:`CDLL` и указать имя или путь к общей библиотеке или DLL. Как "
"только это будет сделано, вы сможете вызывать произвольные функции, "
"обращаясь к ним как к атрибутам объекта :class:`CDLL`. ::"

#: ../../whatsnew/2.5.rst:1697
msgid ""
"Type constructors for the various C types are provided: :func:`c_int`, :func:"
"`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :c:expr:`char "
"\\*`), and so forth.  Unlike Python's types, the C versions are all mutable; "
"you can assign to their :attr:`value` attribute to change the wrapped "
"value.  Python integers and strings will be automatically converted to the "
"corresponding C types, but for other types you  must call the correct type "
"constructor.  (And I mean *must*;  getting it wrong will often result in the "
"interpreter crashing with a segmentation fault.)"
msgstr ""
"Предоставляются конструкторы типов для различных типов C: :func:`c_int`, :"
"func:`c_float`, :func:`c_double`, :func:`c_char_p` (эквивалентно :c:expr:"
"`char \\*` ) и так далее. В отличие от типов Python, все версии C изменяемы; "
"вы можете назначить их атрибуту :attr:`value`, чтобы изменить завернутое "
"значение. Целые числа и строки Python будут автоматически преобразованы в "
"соответствующие типы C, но для других типов необходимо вызвать правильный "
"конструктор типов. (И я имею в виду *должен*; ошибка часто приводит к сбою "
"интерпретатора из-за ошибки сегментации.)"

#: ../../whatsnew/2.5.rst:1706
msgid ""
"You shouldn't use :func:`c_char_p` with a Python string when the C function "
"will be modifying the memory area, because Python strings are  supposed to "
"be immutable; breaking this rule will cause puzzling bugs.  When you need a "
"modifiable memory area, use :func:`create_string_buffer`::"
msgstr ""
"Не следует использовать :func:`c_char_p` со строкой Python, когда функция C "
"будет изменять область памяти, поскольку строки Python должны быть "
"неизменяемыми; нарушение этого правила приведет к загадочным ошибкам. Если "
"вам нужна изменяемая область памяти, используйте :func:"
"`create_string_buffer`::"

#: ../../whatsnew/2.5.rst:1715
msgid ""
"C functions are assumed to return integers, but you can set the :attr:"
"`restype` attribute of the function object to  change this::"
msgstr ""
"Предполагается, что функции C возвращают целые числа, но вы можете "
"установить атрибут :attr:`restype` объекта функции, чтобы изменить это:"

#: ../../whatsnew/2.5.rst:1724
msgid ""
":mod:`ctypes` also provides a wrapper for Python's C API  as the ``ctypes."
"pythonapi`` object.  This object does *not*  release the global interpreter "
"lock before calling a function, because the lock must be held when calling "
"into the interpreter's code.   There's a :class:`py_object()` type "
"constructor that will create a  :c:expr:`PyObject *` pointer.  A simple "
"usage::"
msgstr ""

#: ../../whatsnew/2.5.rst:1737
msgid ""
"Don't forget to use :class:`py_object()`; if it's omitted you end  up with a "
"segmentation fault."
msgstr ""

#: ../../whatsnew/2.5.rst:1740
msgid ""
":mod:`ctypes` has been around for a while, but people still write  and "
"distribution hand-coded extension modules because you can't rely on :mod:"
"`ctypes` being present. Perhaps developers will begin to write  Python "
"wrappers atop a library accessed through :mod:`ctypes` instead of extension "
"modules, now that :mod:`ctypes` is included with core Python."
msgstr ""
":mod:`ctypes` существует уже некоторое время, но люди до сих пор пишут и "
"распространяют модули расширения, написанные вручную, потому что нельзя "
"полагаться на присутствие :mod:`ctypes`. Возможно, разработчики начнут "
"писать оболочки Python поверх библиотеки, доступ к которой осуществляется "
"через :mod:`ctypes` вместо модулей расширения, теперь, когда :mod:`ctypes` "
"включен в ядро ​​Python."

#: ../../whatsnew/2.5.rst:1750
msgid ""
"https://web.archive.org/web/20180410025338/http://starship.python.net/crew/"
"theller/ctypes/"
msgstr ""
"https://web.archive.org/web/20180410025338/http://starship.python.net/crew/"
"theller/ctypes/"

#: ../../whatsnew/2.5.rst:1750
msgid "The pre-stdlib ctypes web page, with a tutorial, reference, and FAQ."
msgstr ""
"Веб-страница ctypes до stdlib с руководством, справкой и часто задаваемыми "
"вопросами."

#: ../../whatsnew/2.5.rst:1752
msgid "The documentation  for the :mod:`ctypes` module."
msgstr "Документация для модуля :mod:`ctypes`."

#: ../../whatsnew/2.5.rst:1760
msgid "The ElementTree package"
msgstr "Пакет ElementTree"

#: ../../whatsnew/2.5.rst:1762
msgid ""
"A subset of Fredrik Lundh's ElementTree library for processing XML has been "
"added to the standard library as :mod:`xml.etree`.  The available modules "
"are :mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from "
"ElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also "
"included."
msgstr ""
"Подмножество библиотеки ElementTree Фредрика Лунда для обработки XML было "
"добавлено в стандартную библиотеку как :mod:`xml.etree`. Доступные модули: :"
"mod:`ElementTree`, :mod:`ElementPath` и :mod:`ElementInclude` из ElementTree "
"1.2.6. Также включен модуль ускорителя :mod:`cElementTree`."

#: ../../whatsnew/2.5.rst:1768
msgid ""
"The rest of this section will provide a brief overview of using ElementTree. "
"Full documentation for ElementTree is available at https://web.archive.org/"
"web/20201124024954/http://effbot.org/zone/element-index.htm."
msgstr ""
"В оставшейся части этого раздела будет представлен краткий обзор "
"использования ElementTree. Полная документация по ElementTree доступна по "
"адресу https://web.archive.org/web/20201124024954/http://effbot.org/zone/"
"element-index.htm."

#: ../../whatsnew/2.5.rst:1772
msgid ""
"ElementTree represents an XML document as a tree of element nodes. The text "
"content of the document is stored as the :attr:`text` and :attr:`tail` "
"attributes of  (This is one of the major differences between ElementTree and "
"the Document Object Model; in the DOM there are many different types of "
"node, including :class:`TextNode`.)"
msgstr ""
"ElementTree представляет XML-документ как дерево узлов элементов. Текстовое "
"содержимое документа хранится в виде атрибутов :attr:`text` и :attr:`tail` "
"(это одно из основных отличий между ElementTree и объектной моделью "
"документа; в DOM существует множество различных типов узел, включая :class:"
"`TextNode`.)"

#: ../../whatsnew/2.5.rst:1778
msgid ""
"The most commonly used parsing function is :func:`parse`, that takes either "
"a string (assumed to contain a filename) or a file-like object and returns "
"an :class:`ElementTree` instance::"
msgstr ""
"Наиболее часто используемой функцией синтаксического анализа является :func:"
"`parse`, которая принимает либо строку (предположительно содержащую имя "
"файла), либо объект, подобный файлу, и возвращает экземпляр :class:"
"`ElementTree`::"

#: ../../whatsnew/2.5.rst:1790
msgid ""
"Once you have an :class:`ElementTree` instance, you can call its :meth:"
"`getroot` method to get the root :class:`Element` node."
msgstr ""
"Если у вас есть экземпляр :class:`ElementTree`, вы можете вызвать его метод :"
"meth:`getroot`, чтобы получить корневой узел :class:`Element`."

#: ../../whatsnew/2.5.rst:1793
msgid ""
"There's also an :func:`XML` function that takes a string literal and returns "
"an :class:`Element` node (not an :class:`ElementTree`).   This function "
"provides a tidy way to incorporate XML fragments, approaching the "
"convenience of an XML literal::"
msgstr ""
"Существует также функция :func:`XML`, которая принимает строковый литерал и "
"возвращает узел :class:`Element` (а не :class:`ElementTree`). Эта функция "
"обеспечивает удобный способ включения фрагментов XML, по удобству "
"приближающийся к литералу XML:"

#: ../../whatsnew/2.5.rst:1803
msgid ""
"Each XML element supports some dictionary-like and some list-like access "
"methods.  Dictionary-like operations are used to access attribute values, "
"and list-like operations are used to access child nodes."
msgstr ""
"Каждый элемент XML поддерживает некоторые методы доступа, подобные словарю, "
"и некоторые методы доступа, подобные спискам. Операции, подобные словарю, "
"используются для доступа к значениям атрибутов, а операции, подобные "
"спискам, используются для доступа к дочерним узлам."

#: ../../whatsnew/2.5.rst:1808
msgid "Operation"
msgstr "Операция"

#: ../../whatsnew/2.5.rst:1808
msgid "Result"
msgstr "Результат"

#: ../../whatsnew/2.5.rst:1810
msgid "``elem[n]``"
msgstr "``elem[n]``"

#: ../../whatsnew/2.5.rst:1810
msgid "Returns n'th child element."
msgstr "Возвращает n-й дочерний элемент."

#: ../../whatsnew/2.5.rst:1812
msgid "``elem[m:n]``"
msgstr "``elem[m:n]``"

#: ../../whatsnew/2.5.rst:1812
msgid "Returns list of m'th through n'th child elements."
msgstr "Возвращает список дочерних элементов от m до n."

#: ../../whatsnew/2.5.rst:1815
msgid "``len(elem)``"
msgstr "``len(elem)``"

#: ../../whatsnew/2.5.rst:1815
msgid "Returns number of child elements."
msgstr "Возвращает количество дочерних элементов."

#: ../../whatsnew/2.5.rst:1817
msgid "``list(elem)``"
msgstr "``list(elem)``"

#: ../../whatsnew/2.5.rst:1817
msgid "Returns list of child elements."
msgstr "Возвращает список дочерних элементов."

#: ../../whatsnew/2.5.rst:1819
msgid "``elem.append(elem2)``"
msgstr "``elem.append(elem2)``"

#: ../../whatsnew/2.5.rst:1819
msgid "Adds *elem2* as a child."
msgstr "Добавляет *elem2* в качестве дочернего элемента."

#: ../../whatsnew/2.5.rst:1821
msgid "``elem.insert(index, elem2)``"
msgstr "``elem.insert(index, elem2)``"

#: ../../whatsnew/2.5.rst:1821
msgid "Inserts *elem2* at the specified location."
msgstr "Вставляет *elem2* в указанное место."

#: ../../whatsnew/2.5.rst:1823
msgid "``del elem[n]``"
msgstr "``del elem[n]``"

#: ../../whatsnew/2.5.rst:1823
msgid "Deletes n'th child element."
msgstr "Удаляет n-й дочерний элемент."

#: ../../whatsnew/2.5.rst:1825
msgid "``elem.keys()``"
msgstr "``elem.keys()``"

#: ../../whatsnew/2.5.rst:1825
msgid "Returns list of attribute names."
msgstr "Возвращает список имен атрибутов."

#: ../../whatsnew/2.5.rst:1827
msgid "``elem.get(name)``"
msgstr "``elem.get(name)``"

#: ../../whatsnew/2.5.rst:1827
msgid "Returns value of attribute *name*."
msgstr "Возвращает значение атрибута *имя*."

#: ../../whatsnew/2.5.rst:1829
msgid "``elem.set(name, value)``"
msgstr "``elem.set(name, value)``"

#: ../../whatsnew/2.5.rst:1829
msgid "Sets new value for attribute *name*."
msgstr "Устанавливает новое значение атрибута *имя*."

#: ../../whatsnew/2.5.rst:1831
msgid "``elem.attrib``"
msgstr "``elem.attrib``"

#: ../../whatsnew/2.5.rst:1831
msgid "Retrieves the dictionary containing attributes."
msgstr "Извлекает словарь, содержащий атрибуты."

#: ../../whatsnew/2.5.rst:1834
msgid "``del elem.attrib[name]``"
msgstr "``del elem.attrib[name]``"

#: ../../whatsnew/2.5.rst:1834
msgid "Deletes attribute *name*."
msgstr "Удаляет атрибут *имя*."

#: ../../whatsnew/2.5.rst:1837
msgid ""
"Comments and processing instructions are also represented as :class:"
"`Element` nodes.  To check if a node is a comment or processing "
"instructions::"
msgstr ""
"Комментарии и инструкции обработки также представлены как узлы :class:"
"`Element`. Чтобы проверить, является ли узел комментарием или инструкциями "
"по обработке:"

#: ../../whatsnew/2.5.rst:1845
msgid ""
"To generate XML output, you should call the :meth:`ElementTree.write` "
"method. Like :func:`parse`, it can take either a string or a file-like "
"object::"
msgstr ""
"Чтобы сгенерировать вывод XML, вам следует вызвать метод :meth:`ElementTree."
"write`. Как и :func:`parse`, он может принимать либо строку, либо файловый "
"объект::"

#: ../../whatsnew/2.5.rst:1855
msgid ""
"(Caution: the default encoding used for output is ASCII.  For general XML "
"work, where an element's name may contain arbitrary Unicode characters, "
"ASCII isn't a very useful encoding because it will raise an exception if an "
"element's name contains any characters with values greater than 127.  "
"Therefore, it's best to specify a different encoding such as UTF-8 that can "
"handle any Unicode character.)"
msgstr ""
"(Внимание: для вывода по умолчанию используется кодировка ASCII. Для общей "
"работы с XML, где имя элемента может содержать произвольные символы Юникода, "
"ASCII не очень полезна, поскольку она вызовет исключение, если имя элемента "
"содержит какие-либо символы со значениями. больше 127. Поэтому лучше указать "
"другую кодировку, например UTF-8, которая может обрабатывать любые символы "
"Юникода.)"

#: ../../whatsnew/2.5.rst:1862
msgid ""
"This section is only a partial description of the ElementTree interfaces. "
"Please read the package's official documentation for more details."
msgstr ""
"Этот раздел представляет собой лишь частичное описание интерфейсов "
"ElementTree. Пожалуйста, прочитайте официальную документацию пакета для "
"получения более подробной информации."

#: ../../whatsnew/2.5.rst:1868
msgid ""
"https://web.archive.org/web/20201124024954/http://effbot.org/zone/element-"
"index.htm"
msgstr ""
"https://web.archive.org/web/20201124024954/http://effbot.org/zone/element-"
"index.htm"

#: ../../whatsnew/2.5.rst:1869
msgid "Official documentation for ElementTree."
msgstr "Официальная документация ElementTree."

#: ../../whatsnew/2.5.rst:1877
msgid "The hashlib package"
msgstr "Пакет hashlib"

#: ../../whatsnew/2.5.rst:1879
msgid ""
"A new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to "
"replace the :mod:`!md5` and :mod:`!sha` modules.  :mod:`hashlib` adds "
"support for additional secure hashes (SHA-224, SHA-256, SHA-384, and "
"SHA-512). When available, the module uses OpenSSL for fast platform "
"optimized implementations of algorithms."
msgstr ""
"Новый модуль :mod:`hashlib`, написанный Грегори П. Смитом, был добавлен для "
"замены модулей :mod:`!md5` и :mod:`!sha`. :mod:`hashlib` добавляет поддержку "
"дополнительных безопасных хешей (SHA-224, SHA-256, SHA-384 и SHA-512). Если "
"модуль доступен, он использует OpenSSL для быстрой реализации алгоритмов, "
"оптимизированных для платформы."

#: ../../whatsnew/2.5.rst:1885
msgid ""
"The old :mod:`!md5` and :mod:`!sha` modules still exist as wrappers around "
"hashlib to preserve backwards compatibility.  The new module's interface is "
"very close to that of the old modules, but not identical. The most "
"significant difference is that the constructor functions for creating new "
"hashing objects are named differently. ::"
msgstr ""
"Старые модули :mod:`!md5` и :mod:`!sha` до сих пор существуют как обертки "
"вокруг hashlib для сохранения обратной совместимости. Интерфейс нового "
"модуля очень близок к интерфейсу старых модулей, но не идентичен. Наиболее "
"существенное отличие состоит в том, что функции-конструкторы для создания "
"новых объектов хеширования называются по-другому. ::"

#: ../../whatsnew/2.5.rst:1914
msgid ""
"Once a hash object has been created, its methods are the same as before: "
"``update(string)`` hashes the specified string into the  current digest "
"state, :meth:`digest` and :meth:`hexdigest` return the digest value as a "
"binary string or a string of hex digits, and :meth:`copy` returns a new "
"hashing object with the same digest state."
msgstr ""
"После создания хеш-объекта его методы такие же, как и раньше: "
"``update(string)`` хеширует указанную строку в текущее состояние дайджеста, :"
"meth:`digest` и :meth:`hexdigest` возвращают дайджест. значение в виде "
"двоичной строки или строки шестнадцатеричных цифр, а :meth:`copy` возвращает "
"новый хеш-объект с тем же состоянием дайджеста."

#: ../../whatsnew/2.5.rst:1923
msgid "The documentation  for the :mod:`hashlib` module."
msgstr "Документация для модуля :mod:`hashlib`."

#: ../../whatsnew/2.5.rst:1931
msgid "The sqlite3 package"
msgstr "Пакет sqlite3"

#: ../../whatsnew/2.5.rst:1933
msgid ""
"The pysqlite module (https://www.pysqlite.org), a wrapper for the SQLite "
"embedded database, has been added to the standard library under the package "
"name :mod:`sqlite3`."
msgstr ""
"Модуль pysqlite (https://www.pysqlite.org), оболочка для встроенной базы "
"данных SQLite, был добавлен в стандартную библиотеку под именем пакета :mod:"
"`sqlite3`."

#: ../../whatsnew/2.5.rst:1937
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite - это библиотека на языке C, предоставляющая легкую дисковую базу "
"данных, не требующую отдельного серверного процесса и позволяющую обращаться "
"к базе данных с помощью нестандартного варианта языка запросов SQL. "
"Некоторые приложения могут использовать SQLite для внутреннего хранения "
"данных. Также можно создать прототип приложения с использованием SQLite, а "
"затем перенести код на более крупную базу данных, такую как PostgreSQL или "
"Oracle."

#: ../../whatsnew/2.5.rst:1944
msgid ""
"pysqlite was written by Gerhard Häring and provides a SQL interface "
"compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""
"pysqlite был написан Герхардом Херингом и предоставляет интерфейс SQL, "
"совместимый со спецификацией DB-API 2.0, описанной :pep:`249`."

#: ../../whatsnew/2.5.rst:1947
msgid ""
"If you're compiling the Python source yourself, note that the source tree "
"doesn't include the SQLite code, only the wrapper module. You'll need to "
"have the SQLite libraries and headers installed before compiling Python, and "
"the build process will compile the module when the necessary headers are "
"available."
msgstr ""
"Если вы компилируете исходный код Python самостоятельно, обратите внимание, "
"что дерево исходного кода не включает код SQLite, а только модуль-оболочку. "
"Перед компиляцией Python вам необходимо установить библиотеки и заголовки "
"SQLite, а процесс сборки скомпилирует модуль, когда будут доступны "
"необходимые заголовки."

#: ../../whatsnew/2.5.rst:1952
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`/tmp/"
"example` file::"
msgstr ""
"Чтобы использовать модуль, вы должны сначала создать объект :class:"
"`Connection`, который представляет базу данных. Здесь данные будут храниться "
"в файле :file:`/tmp/example`::"

#: ../../whatsnew/2.5.rst:1958
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr ""
"Вы также можете указать специальное имя ``:memory:`` для создания базы "
"данных в оперативной памяти."

#: ../../whatsnew/2.5.rst:1960
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`execute` method to perform SQL commands::"
msgstr ""
"Если у вас есть :class:`Connection`, вы можете создать объект :class:"
"`Cursor` и вызвать его метод :meth:`execute` для выполнения команд SQL::"

#: ../../whatsnew/2.5.rst:1974
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack."
msgstr ""
"Обычно ваши операции SQL должны использовать значения переменных Python. Не "
"следует собирать запрос с использованием строковых операций Python, "
"поскольку это небезопасно; это делает вашу программу уязвимой для атаки SQL-"
"инъекцией."

#: ../../whatsnew/2.5.rst:1978
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`execute` method.  "
"(Other database modules may use a different placeholder, such as ``%s`` or "
"``:1``.) For example::"
msgstr ""
"Вместо этого используйте подстановку параметров DB-API. Поместите ``?`` в "
"качестве заполнителя везде, где вы хотите использовать значение, а затем "
"укажите кортеж значений в качестве второго аргумента для метода :meth:"
"`execute` курсора. (Другие модули базы данных могут использовать другой "
"заполнитель, например `` %s `` или ``:1``.) Например::"

#: ../../whatsnew/2.5.rst:1998
msgid ""
"To retrieve data after executing a SELECT statement, you can either  treat "
"the cursor as an iterator, call the cursor's :meth:`fetchone` method to "
"retrieve a single matching row,  or call :meth:`fetchall` to get a list of "
"the matching rows."
msgstr ""
"Чтобы получить данные после выполнения оператора SELECT, вы можете либо "
"рассматривать курсор как итератор, вызвать метод курсора :meth:`fetchone` "
"для получения одной соответствующей строки, либо вызвать :meth:`fetchall` "
"для получения списка совпадающие строки."

#: ../../whatsnew/2.5.rst:2003
msgid "This example uses the iterator form::"
msgstr "В этом примере используется форма итератора::"

#: ../../whatsnew/2.5.rst:2016
msgid ""
"For more information about the SQL dialect supported by SQLite, see https://"
"www.sqlite.org."
msgstr ""
"Дополнительные сведения о диалекте SQL, поддерживаемом SQLite, см. на "
"странице https://www.sqlite.org."

#: ../../whatsnew/2.5.rst:2023
msgid "https://www.pysqlite.org"
msgstr "https://www.pysqlite.org"

#: ../../whatsnew/2.5.rst:2023
msgid "The pysqlite web page."
msgstr "Веб-страница pysqlite."

#: ../../whatsnew/2.5.rst:2027
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../whatsnew/2.5.rst:2026
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"Веб-страница SQLite; документация описывает синтаксис и доступные типы "
"данных для поддерживаемого диалекта SQL."

#: ../../whatsnew/2.5.rst:2029
msgid "The documentation  for the :mod:`sqlite3` module."
msgstr "Документация для модуля :mod:`sqlite3`."

#: ../../whatsnew/2.5.rst:2031
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Database API Specification 2.0"

#: ../../whatsnew/2.5.rst:2032
msgid "PEP written by Marc-André Lemburg."
msgstr "PEP написан Марком-Андре Лембургом."

#: ../../whatsnew/2.5.rst:2040
msgid "The wsgiref package"
msgstr "Пакет wsgiref"

#: ../../whatsnew/2.5.rst:2042
msgid ""
"The Web Server Gateway Interface (WSGI) v1.0 defines a standard interface "
"between web servers and Python web applications and is described in :pep:"
"`333`. The :mod:`wsgiref` package is a reference implementation of the WSGI "
"specification."
msgstr ""
"Интерфейс шлюза веб-сервера (WSGI) v1.0 определяет стандартный интерфейс "
"между веб-серверами и веб-приложениями Python и описан в :pep:`333`. Пакет :"
"mod:`wsgiref` представляет собой эталонную реализацию спецификации WSGI."

#: ../../whatsnew/2.5.rst:2049
msgid ""
"The package includes a basic HTTP server that will run a WSGI application; "
"this server is useful for debugging but isn't intended for  production use.  "
"Setting up a server takes only a few lines of code::"
msgstr ""
"В пакет входит базовый HTTP-сервер, на котором будет выполняться приложение "
"WSGI; этот сервер полезен для отладки, но не предназначен для "
"производственного использования. Настройка сервера занимает всего несколько "
"строк кода:"

#: ../../whatsnew/2.5.rst:2069
msgid ""
"https://web.archive.org/web/20160331090247/http://wsgi.readthedocs.org/en/"
"latest/"
msgstr ""
"https://web.archive.org/web/20160331090247/http://wsgi.readthedocs.org/en/"
"latest/"

#: ../../whatsnew/2.5.rst:2069
msgid "A central web site for WSGI-related resources."
msgstr "Центральный веб-сайт ресурсов, связанных с WSGI."

#: ../../whatsnew/2.5.rst:2071
msgid ":pep:`333` - Python Web Server Gateway Interface v1.0"
msgstr ":pep:`333` - Интерфейс шлюза веб-сервера Python v1.0"

#: ../../whatsnew/2.5.rst:2072
msgid "PEP written by Phillip J. Eby."
msgstr "PEP, написанный Филипом Дж. Эби."

#: ../../whatsnew/2.5.rst:2080
msgid "Build and C API Changes"
msgstr "Изменения API сборки и C"

#: ../../whatsnew/2.5.rst:2082
msgid "Changes to Python's build process and to the C API include:"
msgstr "Изменения в процессе сборки Python и C API включают в себя:"

#: ../../whatsnew/2.5.rst:2084
msgid ""
"The Python source tree was converted from CVS to Subversion,  in a complex "
"migration procedure that was supervised and flawlessly carried out by Martin "
"von Löwis.  The procedure was developed as :pep:`347`."
msgstr ""
"Дерево исходного кода Python было преобразовано из CVS в Subversion в ходе "
"сложной процедуры миграции, которую контролировал и безупречно выполнил "
"Мартин фон Лёвис. Процедура была разработана как :pep:`347`."

#: ../../whatsnew/2.5.rst:2088
msgid ""
"Coverity, a company that markets a source code analysis tool called Prevent, "
"provided the results of their examination of the Python source code.  The "
"analysis found about 60 bugs that  were quickly fixed.  Many of the bugs "
"were refcounting problems, often occurring in error-handling code.  See "
"https://scan.coverity.com for the statistics."
msgstr ""
"Компания Coverity, которая продает инструмент анализа исходного кода под "
"названием Prevent, предоставила результаты исследования исходного кода "
"Python. В ходе анализа было обнаружено около 60 ошибок, которые были "
"оперативно исправлены. Многие из ошибок были связаны с проблемами пересчета, "
"часто возникавшими в коде обработки ошибок. Статистику можно найти на "
"https://scan.coverity.com."

#: ../../whatsnew/2.5.rst:2094
msgid ""
"The largest change to the C API came from :pep:`353`, which modifies the "
"interpreter to use a :c:type:`Py_ssize_t` type definition instead of :c:expr:"
"`int`.  See the earlier section :ref:`pep-353` for a discussion of this "
"change."
msgstr ""
"Самое большое изменение в C API произошло благодаря :pep:`353`, который "
"модифицирует интерпретатор, чтобы использовать определение типа :c:type:"
"`Py_ssize_t` вместо :c:expr:`int`. См. предыдущий раздел :ref:`pep-353` для "
"обсуждения этого изменения."

#: ../../whatsnew/2.5.rst:2099
msgid ""
"The design of the bytecode compiler has changed a great deal,  no longer "
"generating bytecode by traversing the parse tree.  Instead the parse tree is "
"converted to an abstract syntax tree (or AST), and it is  the abstract "
"syntax tree that's traversed to produce the bytecode."
msgstr ""
"Конструкция компилятора байт-кода сильно изменилась: байт-код больше не "
"генерируется путем обхода дерева разбора. Вместо этого дерево "
"синтаксического анализа преобразуется в абстрактное синтаксическое дерево "
"(или AST), и именно абстрактное синтаксическое дерево обрабатывается для "
"создания байт-кода."

#: ../../whatsnew/2.5.rst:2104
msgid ""
"It's possible for Python code to obtain AST objects by using the :func:"
"`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of "
"the  *flags* parameter::"
msgstr ""
"Код Python может получать объекты AST, используя встроенную функцию :func:"
"`compile` и указав ``_ast.PyCF_ONLY_AST`` в качестве значения параметра "
"*flags*::"

#: ../../whatsnew/2.5.rst:2117
msgid ""
"No official documentation has been written for the AST code yet, but :pep:"
"`339` discusses the design.  To start learning about the code, read the "
"definition of the various AST nodes in :file:`Parser/Python.asdl`.  A Python "
"script reads this file and generates a set of C structure definitions in :"
"file:`Include/Python-ast.h`.  The :c:func:`PyParser_ASTFromString` and :c:"
"func:`!PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take "
"Python source as input and return the root of an AST representing the "
"contents. This AST can then be turned into a code object by :c:func:`!"
"PyAST_Compile`.  For more information, read the source code, and then ask "
"questions on python-dev."
msgstr ""
"Для кода AST пока не написано официальной документации, но :pep:`339` "
"обсуждает его дизайн. Чтобы начать изучение кода, прочитайте определения "
"различных узлов AST в файле Parser/Python.asdl. Сценарий Python читает этот "
"файл и генерирует набор определений структур C в :file:`Include/Python-ast."
"h`. :c:func:`PyParser_ASTFromString` и :c:func:`!PyParser_ASTFromFile`, "
"определенные в :file:`Include/pythonrun.h`, принимают исходный код Python в "
"качестве входных данных и возвращают корень AST, представляющий содержимое. "
"Затем этот AST можно превратить в объект кода с помощью :c:func:`!"
"PyAST_Compile`. Для получения дополнительной информации прочитайте исходный "
"код, а затем задайте вопросы по python-dev."

#: ../../whatsnew/2.5.rst:2127
msgid ""
"The AST code was developed under Jeremy Hylton's management, and implemented "
"by (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John "
"Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil "
"Schemenauer, plus the participants in a number of AST sprints at conferences "
"such as PyCon."
msgstr ""
"Код AST был разработан под руководством Джереми Хилтона и реализован (в "
"алфавитном порядке) Бреттом Кэнноном, Ником Когланом, Грантом Эдвардсом, "
"Джоном Эресманом, Куртом Кайзером, Нилом Норвицем, Тимом Питерсом, Армином "
"Риго и Нилом Шеменауэром, а также участниками ряд спринтов AST на таких "
"конференциях, как PyCon."

#: ../../whatsnew/2.5.rst:2136
msgid ""
"Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005, "
"was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but "
"never freed arenas.  With this patch, Python will free arenas when they're "
"empty.  The net effect is that on some platforms, when you allocate many "
"objects, Python's memory usage may actually drop when you delete them and "
"the memory may be returned to the operating system.  (Implemented by Evan "
"Jones, and reworked by Tim Peters.)"
msgstr ""
"Был применен патч Эвана Джонса для obmalloc, впервые описанный в докладе на "
"PyCon DC 2005. Python 2.4 размещал небольшие объекты на аренах размером 256 "
"КБ, но никогда не освобождал арены. С этим патчем Python будет освобождать "
"арены, когда они пустуют. Конечным результатом является то, что на некоторых "
"платформах, когда вы выделяете много объектов, использование памяти Python "
"может фактически снизиться при их удалении, и память может быть возвращена "
"операционной системе. (Реализовано Эваном Джонсом и переработано Тимом "
"Питерсом.)"

#: ../../whatsnew/2.5.rst:2144
msgid ""
"Note that this change means extension modules must be more careful when "
"allocating memory.  Python's API has many different functions for allocating "
"memory that are grouped into families.  For example, :c:func:"
"`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:func:`PyMem_Free` are one "
"family that allocates raw memory, while :c:func:`PyObject_Malloc`, :c:func:"
"`PyObject_Realloc`, and :c:func:`PyObject_Free` are another family that's "
"supposed to be used for creating Python objects."
msgstr ""
"Обратите внимание, что это изменение означает, что модули расширения должны "
"быть более осторожными при выделении памяти. API Python имеет множество "
"различных функций для распределения памяти, которые сгруппированы в "
"семейства. Например, :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` и :c:"
"func:`PyMem_Free` — это одно семейство, которое выделяет необработанную "
"память, а :c:func:` PyObj ect_Malloc`, : c:func:` PyObj ect_Realloc` и :c:"
"func:` PyObj ect_Free` — еще одно семейство, которое предполагается "
"использовать для создания объектов Python."

#: ../../whatsnew/2.5.rst:2152
msgid ""
"Previously these different families all reduced to the platform's :c:func:"
"`malloc` and :c:func:`free` functions.  This meant  it didn't matter if you "
"got things wrong and allocated memory with the ``PyMem`` function but freed "
"it with the ``PyObject`` function.  With 2.5's changes to obmalloc, these "
"families now do different things and mismatches will probably result in a "
"segfault.  You should carefully test your C extension modules with Python "
"2.5."
msgstr ""
"Раньше все эти семейства сводились к платформенным функциям :c:func:`malloc` "
"и :c:func:`free`. Это означало, что не имело значения, если вы ошиблись и "
"выделили память с помощью функции PyMem, но освободили ее с помощью функции "
"PyObject . Благодаря изменениям obmalloc в версии 2.5 эти семейства теперь "
"выполняют разные действия, и несоответствия, вероятно, приведут к сбою "
"сегмента. Вам следует тщательно протестировать свои модули расширения C с "
"помощью Python 2.5."

#: ../../whatsnew/2.5.rst:2159
msgid ""
"The built-in set types now have an official C API.  Call :c:func:`PySet_New` "
"and :c:func:`PyFrozenSet_New` to create a new set, :c:func:`PySet_Add` and :"
"c:func:`PySet_Discard` to add and remove elements, and :c:func:"
"`PySet_Contains` and :c:func:`PySet_Size` to examine the set's state. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Встроенные типы наборов теперь имеют официальный API C. Вызовите :c:func:"
"`PySet_New` и :c:func:`PyFrozenSet_New` для создания нового набора, :c:func:"
"`PySet_Add` и :c:func:`PySet_Discard` для добавления и удаления элементов и :"
"c :func:`PySet_Contains` и :c:func:`PySet_Size` для проверки состояния "
"набора. (Предоставлено Раймондом Хеттингером.)"

#: ../../whatsnew/2.5.rst:2165
msgid ""
"C code can now obtain information about the exact revision of the Python "
"interpreter by calling the  :c:func:`Py_GetBuildInfo` function that returns "
"a string of build information like this: ``\"trunk:45355:45356M, Apr 13 "
"2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""
"Код C теперь может получить информацию о точной версии интерпретатора "
"Python, вызвав функцию :c:func:`Py_GetBuildInfo`, которая возвращает строку "
"с информацией о сборке, подобную этой: ``\"trunk:45355:45356M, 13 апреля "
"2006 г., 07 г. :42:19\"``. (Предоставлено Барри Варшавой.)"

#: ../../whatsnew/2.5.rst:2170
msgid ""
"Two new macros can be used to indicate C functions that are local to the "
"current file so that a faster calling convention can be used. "
"``Py_LOCAL(type)`` declares the function as returning a value of the "
"specified *type* and uses a fast-calling qualifier. "
"``Py_LOCAL_INLINE(type)`` does the same thing and also requests the function "
"be inlined.  If macro :c:macro:`!PY_LOCAL_AGGRESSIVE` is defined before :"
"file:`python.h` is included, a set of more aggressive optimizations are "
"enabled for the module; you should benchmark the results to find out if "
"these optimizations actually make the code faster.  (Contributed by Fredrik "
"Lundh at the NeedForSpeed sprint.)"
msgstr ""
"Два новых макроса можно использовать для указания функций C, локальных по "
"отношению к текущему файлу, что позволяет использовать более быстрое "
"соглашение о вызовах. ``Py_LOCAL(type)`` объявляет функцию как возвращающую "
"значение указанного *типа* и использует квалификатор быстрого вызова. "
"``Py_LOCAL_INLINE(type)`` делает то же самое, а также запрашивает "
"встраивание функции. Если макрос :c:macro:`!PY_LOCAL_AGGRESSIVE` определен "
"до включения :file:`python.h`, для модуля включается набор более агрессивных "
"оптимизаций; вам следует сравнить результаты, чтобы выяснить, действительно "
"ли эти оптимизации делают код быстрее. (Предоставлено Фредриком Лундом во "
"время спринта NeedForSpeed.)"

#: ../../whatsnew/2.5.rst:2181
msgid ""
"``PyErr_NewException(name, base, dict)`` can now accept a tuple of base "
"classes as its *base* argument.  (Contributed by Georg Brandl.)"
msgstr ""
"``PyErr_NewException(name, base, dict)`` теперь может принимать кортеж "
"базовых классов в качестве аргумента *base*. (Предоставлено Георгом "
"Брандлом.)"

#: ../../whatsnew/2.5.rst:2184
msgid ""
"The :c:func:`!PyErr_Warn` function for issuing warnings is now deprecated in "
"favour of ``PyErr_WarnEx(category, message, stacklevel)`` which lets you "
"specify the number of stack frames separating this function and the caller.  "
"A *stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, 2 is the "
"function above that, and so forth.  (Added by Neal Norwitz.)"
msgstr ""
"Функция :c:func:`!PyErr_Warn` для выдачи предупреждений теперь устарела в "
"пользу функции ``PyErr_WarnEx(category, message, stacklevel)``, которая "
"позволяет указать количество кадров стека, разделяющих эту функцию и "
"вызывающую функцию. *уровень стека*, равный 1, — это функция, вызывающая :c:"
"func:`PyErr_WarnEx`, 2 — функция, расположенная над ней, и так далее. "
"(Добавлено Нилом Норвицем.)"

#: ../../whatsnew/2.5.rst:2190
msgid ""
"The CPython interpreter is still written in C, but  the code can now be "
"compiled with a C++ compiler without errors.   (Implemented by Anthony "
"Baxter, Martin von Löwis, Skip Montanaro.)"
msgstr ""
"Интерпретатор CPython по-прежнему написан на C, но теперь код можно без "
"ошибок скомпилировать с помощью компилятора C++. (Реализованы Энтони "
"Бакстером, Мартином фон Лёвисом, Скипом Монтанаро.)"

#: ../../whatsnew/2.5.rst:2194
msgid ""
"The :c:func:`!PyRange_New` function was removed.  It was never documented, "
"never used in the core code, and had dangerously lax error checking.  In the "
"unlikely case that your extensions were using it, you can replace it by "
"something like the following::"
msgstr ""
"Функция :c:func:`!PyRange_New` была удалена. Он никогда не документировался, "
"никогда не использовался в основном коде и имел опасно слабую проверку "
"ошибок. В том маловероятном случае, что ваши расширения использовали его, вы "
"можете заменить его чем-то вроде следующего:"

#: ../../whatsnew/2.5.rst:2208
msgid "Port-Specific Changes"
msgstr "Изменения для конкретного порта"

#: ../../whatsnew/2.5.rst:2210
msgid ""
"MacOS X (10.3 and higher): dynamic loading of modules now uses the :c:func:"
"`dlopen` function instead of MacOS-specific functions."
msgstr ""
"MacOS X (10.3 и выше): динамическая загрузка модулей теперь использует "
"функцию :c:func:`dlopen` вместо функций, специфичных для MacOS."

#: ../../whatsnew/2.5.rst:2213
msgid ""
"MacOS X: an :option:`!--enable-universalsdk` switch was added to the :"
"program:`configure` script that compiles the interpreter as a universal "
"binary able to run on both PowerPC and Intel processors. (Contributed by "
"Ronald Oussoren; :issue:`2573`.)"
msgstr ""
"MacOS X: в сценарий :program:`configure` был добавлен переключатель :option:"
"`!--enable-universalsdk`, который компилирует интерпретатор как "
"универсальный двоичный файл, способный работать как на процессорах PowerPC, "
"так и на процессорах Intel. (Предоставлено Рональдом Уссореном; :issue:"
"`2573`.)"

#: ../../whatsnew/2.5.rst:2218
msgid ""
"Windows: :file:`.dll` is no longer supported as a filename extension for "
"extension modules.  :file:`.pyd` is now the only filename extension that "
"will be searched for."
msgstr ""
"Windows: :file:`.dll` больше не поддерживается в качестве расширения имени "
"файла для модулей расширения. :file:`.pyd` теперь является единственным "
"расширением имени файла, по которому будет выполняться поиск."

#: ../../whatsnew/2.5.rst:2228
msgid "Porting to Python 2.5"
msgstr "Портирование на Python 2.5"

#: ../../whatsnew/2.5.rst:2230
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"В этом разделе перечислены ранее описанные изменения, которые могут "
"потребовать внесения изменений в ваш код:"

#: ../../whatsnew/2.5.rst:2233
msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error."
msgstr ""
"ASCII теперь является кодировкой по умолчанию для модулей. Теперь "
"синтаксическая ошибка возникает, если модуль содержит строковые литералы с 8-"
"битными символами, но не имеет объявления кодировки. В Python 2.4 это "
"вызывало предупреждение, а не синтаксическую ошибку."

#: ../../whatsnew/2.5.rst:2238
msgid ""
"Previously, the :attr:`gi_frame` attribute of a generator was always a frame "
"object.  Because of the :pep:`342` changes described in section :ref:"
"`pep-342`, it's now possible for :attr:`gi_frame` to be ``None``."
msgstr ""
"Раньше атрибут генератора :attr:`gi_frame` всегда был объектом фрейма. Из-за "
"изменений :pep:`342`, описанных в разделе :ref:`pep-342`, теперь для :attr:"
"`gi_frame` может быть установлено значение ``None``."

#: ../../whatsnew/2.5.rst:2242
msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string that can't be converted to "
"Unicode using the default ASCII encoding.  Previously such comparisons would "
"raise a :class:`UnicodeDecodeError` exception."
msgstr ""
"Новое предупреждение :class:`UnicodeWarning` выдается при попытке сравнить "
"строку Unicode и 8-битную строку, которую невозможно преобразовать в Unicode "
"с использованием кодировки ASCII по умолчанию. Раньше такие сравнения "
"вызывали исключение :class:`UnicodeDecodeError`."

#: ../../whatsnew/2.5.rst:2247
msgid ""
"Library: the :mod:`csv` module is now stricter about multi-line quoted "
"fields. If your files contain newlines embedded within fields, the input "
"should be split into lines in a manner which preserves the newline "
"characters."
msgstr ""
"Библиотека: модуль :mod:`csv` теперь более строг в отношении полей, "
"состоящих из нескольких строк. Если ваши файлы содержат символы новой "
"строки, встроенные в поля, ввод следует разделить на строки таким образом, "
"чтобы сохранить символы новой строки."

#: ../../whatsnew/2.5.rst:2251
msgid ""
"Library: the :mod:`locale` module's  :func:`format` function's would "
"previously  accept any string as long as no more than one %char specifier "
"appeared.  In Python 2.5, the argument must be exactly one %char specifier "
"with no surrounding text."
msgstr ""
"Библиотека: функция :func:`format` модуля :mod:`locale` ранее принимала "
"любую строку длиной не более одной. %с появился спецификатор har. В Python "
"2.5 аргумент должен быть ровно один. %с Спецификатор har без окружающего "
"текста."

#: ../../whatsnew/2.5.rst:2256
msgid ""
"Library: The :mod:`pickle` and :mod:`!cPickle` modules no longer accept a "
"return value of ``None`` from the :meth:`~object.__reduce__` method; the "
"method must return a tuple of arguments instead.  The modules also no longer "
"accept the deprecated *bin* keyword parameter."
msgstr ""
"Библиотека: модули :mod:`pickle` и :mod:`!cPickle` больше не принимают "
"возвращаемое значение ``None`` из метода :meth:`~object.__reduce__`; Вместо "
"этого метод должен возвращать кортеж аргументов. Модули также больше не "
"принимают устаревший параметр ключевого слова *bin*."

#: ../../whatsnew/2.5.rst:2261
msgid ""
"Library: The :mod:`SimpleXMLRPCServer <xmlrpc.server>` and :mod:"
"`DocXMLRPCServer <xmlrpc.server>`  classes now have a :attr:`rpc_paths` "
"attribute that constrains XML-RPC operations to a limited set of URL paths; "
"the default is to allow only ``'/'`` and ``'/RPC2'``. Setting  :attr:"
"`rpc_paths` to ``None`` or an empty tuple disables  this path checking."
msgstr ""
"Библиотека: классы :mod:`SimpleXMLRPCServer <xmlrpc.server>` и :mod:"
"`DocXMLRPCServer <xmlrpc.server>` теперь имеют атрибут :attr:`rpc_paths`, "
"который ограничивает операции XML-RPC ограниченным набором URL-путей. ; по "
"умолчанию разрешены только ``'/'`` и ``'/RPC2'``. Установка :attr:"
"`rpc_paths` в ``None`` или пустой кортеж отключает эту проверку пути."

#: ../../whatsnew/2.5.rst:2267
msgid ""
"C API: Many functions now use :c:type:`Py_ssize_t`  instead of :c:expr:`int` "
"to allow processing more data on 64-bit machines.  Extension code may need "
"to make the same change to avoid warnings and to support 64-bit machines.  "
"See the earlier section :ref:`pep-353` for a discussion of this change."
msgstr ""
"C API: многие функции теперь используют :c:type:`Py_ssize_t` вместо :c:expr:"
"`int`, чтобы позволить обрабатывать больше данных на 64-битных машинах. В "
"код расширения может потребоваться внести такие же изменения, чтобы избежать "
"предупреждений и обеспечить поддержку 64-разрядных компьютеров. См. "
"предыдущий раздел :ref:`pep-353` для обсуждения этого изменения."

#: ../../whatsnew/2.5.rst:2272
msgid ""
"C API:  The obmalloc changes mean that  you must be careful to not mix usage "
"of the ``PyMem_*`` and ``PyObject_*`` families of functions. Memory "
"allocated with  one family's ``*_Malloc`` must be  freed with the "
"corresponding family's ``*_Free`` function."
msgstr ""
"C API: Изменения obmalloc означают, что вы должны быть осторожны, чтобы не "
"смешивать использование семейств функций ``PyMem_*`` и `` PyObj ect_*``. "
"Память, выделенная с помощью ``*_Malloc`` одного семейства, должна быть "
"освобождена с помощью функции ``*_Free`` соответствующего семейства."

#: ../../whatsnew/2.5.rst:2281
msgid "Acknowledgements"
msgstr "Подтверждение"

#: ../../whatsnew/2.5.rst:2283
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel, Raymond "
"Hettinger, Ralf W. Grosse-Kunstleve, Kent Johnson, Iain Lowe, Martin von "
"Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro, Gustavo Niemeyer, "
"Paul Prescod, James Pryor, Mike Rovner, Scott Weikart, Barry Warsaw, Thomas "
"Wouters."
msgstr ""
"Автор хотел бы поблагодарить следующих людей за предложения, исправления и "
"помощь в различных черновиках этой статьи: Георга Брандла, Ника Коглана, "
"Филиппа Дж. Эби, Ларса Густебеля, Раймонда Хеттингера, Ральфа В. Гросс-"
"Кунстлеве, Кента Джонсона, Иэн Лоу, Мартин фон Лёвис, Фредрик Лунд, Эндрю "
"Макнамара, Скип Монтанаро, Густаво Нимейер, Пол Прескод, Джеймс Прайор, Майк "
"Ровнер, Скотт Вейкарт, Барри Варшава, Томас Воутерс."

#: ../../whatsnew/2.5.rst:1342
msgid "universal newlines"
msgstr "универсальные переводы строк"

#: ../../whatsnew/2.5.rst:1342
msgid "What's new"
msgstr "Что нового"
