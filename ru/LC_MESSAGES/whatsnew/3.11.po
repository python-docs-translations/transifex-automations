# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr "Что нового в Python 3.11"

#: ../../whatsnew/3.11.rst:0
msgid "Editor"
msgstr "Редактор"

#: ../../whatsnew/3.11.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.11.rst:47
msgid ""
"This article explains the new features in Python 3.11, compared to 3.10. "
"Python 3.11 was released on October 24, 2022. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"В этой статье объясняются новые возможности Python 3.11 по сравнению с "
"версией 3.10. Python 3.11 был выпущен 24 октября 2022 г. Подробную "
"информацию см. в журнале изменений <changelog>`."

#: ../../whatsnew/3.11.rst:55
msgid "Summary -- Release highlights"
msgstr "Краткое описание - Основные моменты релиза"

#: ../../whatsnew/3.11.rst:60
msgid ""
"Python 3.11 is between 10-60% faster than Python 3.10. On average, we "
"measured a 1.25x speedup on the standard benchmark suite. See :ref:"
"`whatsnew311-faster-cpython` for details."
msgstr ""
"Python 3.11 на 10–60 % быстрее, чем Python 3.10. В среднем мы зафиксировали "
"ускорение в 1,25 раза по стандартному набору тестов. Подробнее см. в "
"Whatsnew311-faster-cpython."

#: ../../whatsnew/3.11.rst:66
msgid "New syntax features:"
msgstr "Новые возможности синтаксиса:"

#: ../../whatsnew/3.11.rst:68
msgid ":ref:`whatsnew311-pep654`"
msgstr ":ref:`whatsnew311-pep654`"

#: ../../whatsnew/3.11.rst:70
msgid "New built-in features:"
msgstr "Новые встроенные функции:"

#: ../../whatsnew/3.11.rst:72
msgid ":ref:`whatsnew311-pep678`"
msgstr ":ref:`whatsnew311-pep678`"

#: ../../whatsnew/3.11.rst:74
msgid "New standard library modules:"
msgstr "Новые модули стандартной библиотеки:"

#: ../../whatsnew/3.11.rst:76
msgid ""
":pep:`680`: :mod:`tomllib` — Support for parsing `TOML <https://toml.io/>`_ "
"in the Standard Library"
msgstr ""
":pep:`680`: :mod:`tomllib` — Поддержка анализа `TOML <https://toml.io/>`_ в "
"стандартной библиотеке"

#: ../../whatsnew/3.11.rst:79
msgid "Interpreter improvements:"
msgstr "Улучшения интерпретатора:"

#: ../../whatsnew/3.11.rst:81
msgid ":ref:`whatsnew311-pep657`"
msgstr ":ref:`whatsnew311-pep657`"

#: ../../whatsnew/3.11.rst:82
msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to :ref:`disable automatically prepending potentially "
"unsafe paths <whatsnew311-pythonsafepath>` to :data:`sys.path`"
msgstr ""
"Новая опция командной строки :option:`-P` и переменная среды :envvar:"
"`PYTHONSAFEPATH` для :ref:`отключения автоматического добавления "
"потенциально небезопасных путей <whatsnew311-pythonsafepath>` к :data:`sys."
"path`"

#: ../../whatsnew/3.11.rst:86
msgid "New typing features:"
msgstr "Новые возможности набора текста:"

#: ../../whatsnew/3.11.rst:88
msgid ":ref:`whatsnew311-pep646`"
msgstr ":ref:`whatsnew311-pep646`"

#: ../../whatsnew/3.11.rst:89
msgid ":ref:`whatsnew311-pep655`"
msgstr ":ref:`whatsnew311-pep655`"

#: ../../whatsnew/3.11.rst:90
msgid ":ref:`whatsnew311-pep673`"
msgstr ":ref:`whatsnew311-pep673`"

#: ../../whatsnew/3.11.rst:91
msgid ":ref:`whatsnew311-pep675`"
msgstr ":ref:`whatsnew311-pep675`"

#: ../../whatsnew/3.11.rst:92
msgid ":ref:`whatsnew311-pep681`"
msgstr ":ref:`whatsnew311-pep681`"

#: ../../whatsnew/3.11.rst:94
msgid "Important deprecations, removals and restrictions:"
msgstr "Важные устаревания, удаления и ограничения:"

#: ../../whatsnew/3.11.rst:96
msgid ""
":pep:`594`: :ref:`Many legacy standard library modules have been deprecated "
"<whatsnew311-pep594>` and will be removed in Python 3.13"
msgstr ""
":pep:`594`: :ref:`Многие устаревшие модули стандартной библиотеки устарели "
"<whatsnew311-pep594>` и будут удалены в Python 3.13."

#: ../../whatsnew/3.11.rst:99
msgid ""
":pep:`624`: :ref:`Py_UNICODE encoder APIs have been removed <whatsnew311-"
"pep624>`"
msgstr ""
":pep:`624`: :ref:`API кодировщика Py_UNICODE были удалены <whatsnew311-"
"pep624>`"

#: ../../whatsnew/3.11.rst:101
msgid ""
":pep:`670`: :ref:`Macros converted to static inline functions <whatsnew311-"
"pep670>`"
msgstr ""
":pep:`670`: :ref:`Макросы преобразованы в статические встроенные функции "
"<whatsnew311-pep670>`"

#: ../../whatsnew/3.11.rst:108 ../../whatsnew/3.11.rst:2211
msgid "New Features"
msgstr "Новые особенности"

#: ../../whatsnew/3.11.rst:113
msgid "PEP 657: Fine-grained error locations in tracebacks"
msgstr ""
"PEP 657: Детальное определение местоположения ошибок в обратных трассировках."

#: ../../whatsnew/3.11.rst:115
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error, instead of just the line. For example:"
msgstr ""
"При печати обратных трассировок интерпретатор теперь будет указывать на "
"точное выражение, вызвавшее ошибку, а не только на строку. Например:"

#: ../../whatsnew/3.11.rst:118
msgid ""
"Traceback (most recent call last):\n"
"  File \"distance.py\", line 11, in <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  File \"distance.py\", line 6, in manhattan_distance\n"
"    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: 'NoneType' object has no attribute 'x'"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"distance.py\", line 11, in <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  File \"distance.py\", line 6, in manhattan_distance\n"
"    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: 'NoneType' object has no attribute 'x'"

#: ../../whatsnew/3.11.rst:129
msgid ""
"Previous versions of the interpreter would point to just the line, making it "
"ambiguous which object was ``None``. These enhanced errors can also be "
"helpful when dealing with deeply nested :class:`dict` objects and multiple "
"function calls:"
msgstr ""
"Предыдущие версии интерпретатора указывали только на строку, что делало "
"неясным, какой объект был ``None``. Эти расширенные ошибки также могут быть "
"полезны при работе с глубоко вложенными объектами :class:`dict` и "
"множественными вызовами функций:"

#: ../../whatsnew/3.11.rst:133
msgid ""
"Traceback (most recent call last):\n"
"  File \"query.py\", line 37, in <module>\n"
"    magic_arithmetic('foo')\n"
"  File \"query.py\", line 18, in magic_arithmetic\n"
"    return add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  File \"query.py\", line 24, in add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  File \"query.py\", line 32, in query_user\n"
"    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: 'NoneType' object is not subscriptable"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"query.py\", line 37, in <module>\n"
"    magic_arithmetic('foo')\n"
"  File \"query.py\", line 18, in magic_arithmetic\n"
"    return add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  File \"query.py\", line 24, in add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  File \"query.py\", line 32, in query_user\n"
"    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: 'NoneType' object is not subscriptable"

#: ../../whatsnew/3.11.rst:149
msgid "As well as complex arithmetic expressions:"
msgstr "А также сложные арифметические выражения:"

#: ../../whatsnew/3.11.rst:151
msgid ""
"Traceback (most recent call last):\n"
"  File \"calculation.py\", line 54, in <module>\n"
"    result = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division by zero"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"calculation.py\", line 54, in <module>\n"
"    result = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division by zero"

#: ../../whatsnew/3.11.rst:159
msgid ""
"Additionally, the information used by the enhanced traceback feature is made "
"available via a general API, that can be used to correlate :term:`bytecode` :"
"ref:`instructions <bytecodes>` with source code location. This information "
"can be retrieved using:"
msgstr ""
"Кроме того, информация, используемая расширенной функцией обратной "
"трассировки, доступна через общий API, который можно использовать для "
"корреляции :term:`bytecode` :ref:`instructions <bytecodes>` с "
"местоположением исходного кода. Эту информацию можно получить с помощью:"

#: ../../whatsnew/3.11.rst:164
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr "Метод :meth:`codeobject.co_positions` в Python."

#: ../../whatsnew/3.11.rst:165
msgid "The :c:func:`PyCode_Addr2Location` function in the C API."
msgstr "Функция :c:func:`PyCode_Addr2Location` в C API."

#: ../../whatsnew/3.11.rst:167
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""
"См. :pep:`657` для более подробной информации. (Предоставлено Пабло Галиндо, "
"Батуханом Таской и Аммаром Аскаром в :issue:`43950`.)"

#: ../../whatsnew/3.11.rst:171
msgid ""
"This feature requires storing column positions in :ref:`codeobjects`, which "
"may result in a small increase in interpreter memory usage and disk usage "
"for compiled Python files. To avoid storing the extra information and "
"deactivate printing the extra traceback information, use the :option:`-X "
"no_debug_ranges <-X>` command line option or the :envvar:"
"`PYTHONNODEBUGRANGES` environment variable."
msgstr ""
"Эта функция требует сохранения позиций столбцов в :ref:`codeobjects`, что "
"может привести к небольшому увеличению использования памяти интерпретатора и "
"использования диска для скомпилированных файлов Python. Чтобы избежать "
"хранения дополнительной информации и отключить печать дополнительной "
"информации трассировки, используйте параметр командной строки :option:`-X "
"no_debug_ranges <-X>` или переменную среды :envvar:`PYTHONNODEBUGRANGES`."

#: ../../whatsnew/3.11.rst:183
msgid "PEP 654: Exception Groups and ``except*``"
msgstr "PEP 654: Exception Groups and ``except*``"

#: ../../whatsnew/3.11.rst:185
msgid ""
":pep:`654` introduces language features that enable a program to raise and "
"handle multiple unrelated exceptions simultaneously. The builtin types :exc:"
"`ExceptionGroup` and :exc:`BaseExceptionGroup` make it possible to group "
"exceptions and raise them together, and the new :keyword:`except* "
"<except_star>` syntax generalizes :keyword:`except` to match subgroups of "
"exception groups."
msgstr ""
":pep:`654` представляет функции языка, которые позволяют программе "
"одновременно вызывать и обрабатывать несколько несвязанных исключений. "
"Встроенные типы :exc:`ExceptionGroup` и :exc:`BaseExceptionGroup` позволяют "
"группировать исключения и вызывать их вместе, а новый синтаксис :keyword:"
"`Exception* <Exception_star>` обобщает :keyword:`Exception` для соответствия "
"подгруппы групп исключений."

#: ../../whatsnew/3.11.rst:192
msgid "See :pep:`654` for more details."
msgstr "См. :pep:`654` для более подробной информации."

#: ../../whatsnew/3.11.rst:194
msgid ""
"(Contributed by Irit Katriel in :issue:`45292`. PEP written by Irit Katriel, "
"Yury Selivanov and Guido van Rossum.)"
msgstr ""
"(Внесено Ирит Катриэль в :issue:`45292`. PEP написано Ирит Катриэль, Юрием "
"Селивановым и Гвидо ван Россумом.)"

#: ../../whatsnew/3.11.rst:201
msgid "PEP 678: Exceptions can be enriched with notes"
msgstr "PEP 678: Исключения могут быть дополнены примечаниями."

#: ../../whatsnew/3.11.rst:203
msgid ""
"The :meth:`~BaseException.add_note` method is added to :exc:`BaseException`. "
"It can be used to enrich exceptions with context information that is not "
"available at the time when the exception is raised. The added notes appear "
"in the default traceback."
msgstr ""
"Метод :meth:`~BaseException.add_note` добавляется в :exc:`BaseException`. "
"Его можно использовать для обогащения исключений контекстной информацией, "
"которая недоступна в момент возникновения исключения. Добавленные примечания "
"появляются в трассировке по умолчанию."

#: ../../whatsnew/3.11.rst:208
msgid "See :pep:`678` for more details."
msgstr "См. :pep:`678` для более подробной информации."

#: ../../whatsnew/3.11.rst:210
msgid ""
"(Contributed by Irit Katriel in :issue:`45607`. PEP written by Zac Hatfield-"
"Dodds.)"
msgstr ""
"(Внесено Ирит Катриэль в :issue:`45607`. PEP, написанное Заком Хэтфилдом-"
"Доддсом.)"

#: ../../whatsnew/3.11.rst:217
msgid "Windows ``py.exe`` launcher improvements"
msgstr "Улучшения средства запуска Windows ``py.exe``"

#: ../../whatsnew/3.11.rst:219
msgid ""
"The copy of the :ref:`launcher` included with Python 3.11 has been "
"significantly updated. It now supports company/tag syntax as defined in :pep:"
"`514` using the :samp:`-V:{<company>}/{<tag>}` argument instead of the "
"limited :samp:`-{<major>}.{<minor>}`. This allows launching distributions "
"other than ``PythonCore``, the one hosted on `python.org <https://www.python."
"org>`_."
msgstr ""
"Копия :ref:`launcher`, входящая в состав Python 3.11, была значительно "
"обновлена. Теперь он поддерживает синтаксис компании/тега, определенный в :"
"pep:`514`, с использованием аргумента :samp:`-V:{<company>}/{<tag>}` вместо "
"ограниченного :samp:`-{<major >}.{<минор>}`. Это позволяет запускать "
"дистрибутивы, отличные от ``PythonCore``, размещенные на ``python.org "
"<https://www.python.org>`_."

#: ../../whatsnew/3.11.rst:225
msgid ""
"When using ``-V:`` selectors, either company or tag can be omitted, but all "
"installs will be searched. For example, ``-V:OtherPython/`` will select the "
"\"best\" tag registered for ``OtherPython``, while ``-V:3.11`` or ``-"
"V:/3.11`` will select the \"best\" distribution with tag ``3.11``."
msgstr ""
"При использовании селекторов ``-V:`` компания или тег могут быть опущены, но "
"поиск будет осуществляться по всем установкам. Например, ``-V:OtherPython/`` "
"выберет \"лучший\" тег, зарегистрированный для ``OtherPython``, а ``-"
"V:3.11`` или ``-V:/3.11`` выберет \" лучший» дистрибутив с тегом «3.11»."

#: ../../whatsnew/3.11.rst:230
msgid ""
"When using the legacy :samp:`-{<major>}`, :samp:`-{<major>}.{<minor>}`, :"
"samp:`-{<major>}-{<bitness>}` or :samp:`-{<major>}.{<minor>}-{<bitness>}` "
"arguments, all existing behaviour should be preserved from past versions, "
"and only releases from ``PythonCore`` will be selected. However, the ``-64`` "
"suffix now implies \"not 32-bit\" (not necessarily x86-64), as there are "
"multiple supported 64-bit platforms. 32-bit runtimes are detected by "
"checking the runtime's tag for a ``-32`` suffix. All releases of Python "
"since 3.5 have included this in their 32-bit builds."
msgstr ""
"При использовании устаревших :samp:`-{<major>}`, :samp:`-{<major>}.{<minor>}"
"`, :samp:`-{<major>}-{<bitness>} ` или :samp:`-{<major>}.{<minor>}-"
"{<bitness>}`, все существующее поведение должно быть сохранено из прошлых "
"версий, и будут выбраны только выпуски ``PythonCore``. Однако суффикс «-64» "
"теперь означает «не 32-битный» (не обязательно x86-64), поскольку существует "
"несколько поддерживаемых 64-битных платформ. 32-битные среды выполнения "
"обнаруживаются путем проверки тега среды выполнения на наличие суффикса "
"«-32». Все выпуски Python, начиная с версии 3.5, включали это в свои 32-"
"битные сборки."

#: ../../whatsnew/3.11.rst:244
msgid "New Features Related to Type Hints"
msgstr "Новые функции, связанные с подсказками типов"

#: ../../whatsnew/3.11.rst:246
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"В этом разделе описаны основные изменения, затрагивающие подсказки типов :"
"pep:`484` и модуль :mod:`typing`."

#: ../../whatsnew/3.11.rst:253
msgid "PEP 646: Variadic generics"
msgstr "PEP 646: вариативные дженерики"

#: ../../whatsnew/3.11.rst:255
msgid ""
":pep:`484` previously introduced :data:`~typing.TypeVar`, enabling creation "
"of generics parameterised with a single type. :pep:`646` adds :data:`~typing."
"TypeVarTuple`, enabling parameterisation with an *arbitrary* number of "
"types. In other words, a :data:`~typing.TypeVarTuple` is a *variadic* type "
"variable, enabling *variadic* generics."
msgstr ""
":pep:`484` ранее представил :data:`~typing.TypeVar`, позволяющий создавать "
"дженерики, параметризованные одним типом. :pep:`646` добавляет :data:"
"`~typing.TypeVarTuple`, позволяя параметризацию с *произвольным* количеством "
"типов. Другими словами, :data:`~typing.TypeVarTuple` — это переменная "
"*вариативного* типа, позволяющая использовать *вариативные* дженерики."

#: ../../whatsnew/3.11.rst:262
msgid ""
"This enables a wide variety of use cases. In particular, it allows the type "
"of array-like structures in numerical computing libraries such as NumPy and "
"TensorFlow to be parameterised with the array *shape*. Static type checkers "
"will now be able to catch shape-related bugs in code that uses these "
"libraries."
msgstr ""
"Это обеспечивает широкий спектр вариантов использования. В частности, он "
"позволяет параметризовать тип массивоподобных структур в библиотеках "
"числовых вычислений, таких как NumPy и TensorFlow, с помощью массива "
"*shape*. Средства проверки статических типов теперь смогут выявлять ошибки, "
"связанные с фигурами, в коде, использующем эти библиотеки."

#: ../../whatsnew/3.11.rst:268
msgid "See :pep:`646` for more details."
msgstr "См. :pep:`646` для более подробной информации."

#: ../../whatsnew/3.11.rst:270
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew "
"Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""
"(Внесено Мэтью Рахцем в :issue:`43224`, при участии Сергея Сторчаки и Джелле "
"Зийлстра. PEP написано Марком Мендосой, Мэтью Рахцем, Прадипом Кумаром "
"Шринивасаном и Винсентом Сайлесом.)"

#: ../../whatsnew/3.11.rst:278
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-required"
msgstr ""
"PEP 655: Маркировка отдельных элементов TypedDict как обязательных или "
"необязательных."

#: ../../whatsnew/3.11.rst:280
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a :class:`~typing."
"TypedDict` must be present. Previously, this was only possible using "
"inheritance."
msgstr ""
":data:`~typing.Required` и :data:`~typing.NotRequired` предоставляют простой "
"способ отметить, должны ли присутствовать отдельные элементы в :class:"
"`~typing.TypedDict`. Раньше это было возможно только с помощью наследования."

#: ../../whatsnew/3.11.rst:285
msgid ""
"All fields are still required by default, unless the *total* parameter is "
"set to ``False``, in which case all fields are still not-required by "
"default. For example, the following specifies a :class:`!TypedDict` with one "
"required and one not-required key::"
msgstr ""
"Все поля по-прежнему являются обязательными по умолчанию, если только для "
"параметра *total* не установлено значение «False», в этом случае все поля по-"
"прежнему не являются обязательными по умолчанию. Например, следующее "
"определяет :class:`!TypedDict` с одним обязательным и одним необязательным "
"ключом::"

#: ../../whatsnew/3.11.rst:291
msgid ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # OK\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # OK (year is not required)\n"
"m3: Movie = {\"year\": 2022}  # ERROR (missing required field title)"
msgstr ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # OK\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # OK (year is not required)\n"
"m3: Movie = {\"year\": 2022}  # ERROR (missing required field title)"

#: ../../whatsnew/3.11.rst:299
msgid "The following definition is equivalent::"
msgstr "Следующее определение эквивалентно:"

#: ../../whatsnew/3.11.rst:301
msgid ""
"class Movie(TypedDict, total=False):\n"
"   title: Required[str]\n"
"   year: int"
msgstr ""
"class Movie(TypedDict, total=False):\n"
"   title: Required[str]\n"
"   year: int"

#: ../../whatsnew/3.11.rst:305
msgid "See :pep:`655` for more details."
msgstr "См. :pep:`655` для более подробной информации."

#: ../../whatsnew/3.11.rst:307
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""
"(Предоставлено Дэвидом Фостером и Джелле Зийлстра в :issue:`47087`. PEP, "
"написанный Дэвидом Фостером.)"

#: ../../whatsnew/3.11.rst:314
msgid "PEP 673: ``Self`` type"
msgstr "PEP 673: Тип «Self»"

#: ../../whatsnew/3.11.rst:316
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive way "
"to annotate methods that return an instance of their class. This behaves the "
"same as the :class:`~typing.TypeVar`-based approach :pep:`specified in PEP "
"484 <484#annotating-instance-and-class-methods>`, but is more concise and "
"easier to follow."
msgstr ""
"Новая аннотация :data:`~typing.Self` предоставляет простой и интуитивно "
"понятный способ аннотировать методы, которые возвращают экземпляр своего "
"класса. Это ведет себя так же, как подход на основе :class:`~typing."
"TypeVar` :pep:`указанный в PEP 484 <484#annotating-instance-and-class-"
"methods>`, но он более краток и понятен."

#: ../../whatsnew/3.11.rst:322
msgid ""
"Common use cases include alternative constructors provided as :func:"
"`classmethod <classmethod>`\\s, and :meth:`~object.__enter__` methods that "
"return ``self``::"
msgstr ""
"Общие случаи использования включают альтернативные конструкторы, "
"предоставляемые как :func:`classmethod <classmethod>`\\s, и :meth:`~object."
"__enter__`, которые возвращают ``self``::"

#: ../../whatsnew/3.11.rst:326
msgid ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."
msgstr ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."

#: ../../whatsnew/3.11.rst:340
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""
":data:`~typing.Self` также можно использовать для аннотирования параметров "
"метода или атрибутов того же типа, что и их включающий класс."

#: ../../whatsnew/3.11.rst:343
msgid "See :pep:`673` for more details."
msgstr "См. :pep:`673` для более подробной информации."

#: ../../whatsnew/3.11.rst:345
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by Pradeep "
"Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""
"(Внесено Джеймсом Хилтоном-Балфом в :issue:`46534`. PEP написано Прадипом "
"Кумаром Шринивасаном и Джеймсом Хилтон-Балфом.)"

#: ../../whatsnew/3.11.rst:352
msgid "PEP 675: Arbitrary literal string type"
msgstr "PEP 675: произвольный литеральный строковый тип."

#: ../../whatsnew/3.11.rst:354
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows a "
"function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""
"Новая аннотация :data:`~typing.LiteralString` может использоваться для "
"указания того, что параметр функции может иметь любой литеральный строковый "
"тип. Это позволяет функции принимать произвольные типы литеральных строк, а "
"также строки, созданные из других литеральных строк. Средства проверки типов "
"могут затем обеспечить, чтобы конфиденциальные функции, например те, которые "
"выполняют операторы SQL или команды оболочки, вызывались только со "
"статическими аргументами, обеспечивая защиту от атак путем внедрения."

#: ../../whatsnew/3.11.rst:362
msgid "For example, a SQL query function could be annotated as follows::"
msgstr ""
"Например, функция запроса SQL может быть аннотирована следующим образом:"

#: ../../whatsnew/3.11.rst:364
msgid ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def caller(\n"
"    arbitrary_string: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LiteralString,\n"
") -> None:\n"
"    run_query(\"SELECT * FROM students\")       # ok\n"
"    run_query(query_string)                   # ok\n"
"    run_query(\"SELECT * FROM \" + table_name)  # ok\n"
"    run_query(arbitrary_string)               # type checker error\n"
"    run_query(                                # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def caller(\n"
"    arbitrary_string: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LiteralString,\n"
") -> None:\n"
"    run_query(\"SELECT * FROM students\")       # ok\n"
"    run_query(query_string)                   # ok\n"
"    run_query(\"SELECT * FROM \" + table_name)  # ok\n"
"    run_query(arbitrary_string)               # type checker error\n"
"    run_query(                                # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"

#: ../../whatsnew/3.11.rst:380
msgid "See :pep:`675` for more details."
msgstr "См. :pep:`675` для более подробной информации."

#: ../../whatsnew/3.11.rst:382
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""
"(Внесено Джелле Зийлстрой в: выпуск: `47088`. PEP, написанный Прадипом "
"Кумаром Шринивасаном и Грэмом Блини.)"

#: ../../whatsnew/3.11.rst:389
msgid "PEP 681: Data class transforms"
msgstr "PEP 681: Преобразования классов данных"

#: ../../whatsnew/3.11.rst:391
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclass <dataclasses.dataclass>`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` может использоваться для украшения "
"класса, метакласса или функции, которая сама является декоратором. Наличие "
"``@dataclass_transform()`` сообщает средству проверки статического типа, что "
"декорированный объект выполняет \"магию\" во время выполнения, которая "
"преобразует класс, придавая ему поведение, подобное :func:`dataclass "
"<dataclasses.dataclass>`."

#: ../../whatsnew/3.11.rst:397
msgid "For example::"
msgstr "Например::"

#: ../../whatsnew/3.11.rst:399
msgid ""
"# The create_model decorator is defined by a library.\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# The create_model decorator can now be used to create new model classes:\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"
msgstr ""
"# The create_model decorator is defined by a library.\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# The create_model decorator can now be used to create new model classes:\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"

#: ../../whatsnew/3.11.rst:415
msgid "See :pep:`681` for more details."
msgstr "См. :pep:`681` для более подробной информации."

#: ../../whatsnew/3.11.rst:417
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De Bonte "
"and Eric Traut.)"
msgstr ""
"(Предоставлено Джелле Зийлстра в :gh:`91860`. PEP написано Эриком Де Бонте и "
"Эриком Траутом.)"

#: ../../whatsnew/3.11.rst:424
msgid "PEP 563 may not be the future"
msgstr "За PEP 563, возможно, не будущее"

#: ../../whatsnew/3.11.rst:426
msgid ""
":pep:`563` Postponed Evaluation of Annotations (the ``from __future__ import "
"annotations`` :ref:`future statement <future>`) that was originally planned "
"for release in Python 3.10 has been put on hold indefinitely. See `this "
"message from the Steering Council <https://mail.python.org/archives/list/"
"python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ for more "
"information."
msgstr ""
":pep:`563` Отложенная оценка аннотаций (``from __future__ import "
"annotations`` :ref:`future оператор <future>`), изначально запланированная к "
"выпуску в Python 3.10, была отложена на неопределенный срок. Дополнительную "
"информацию см. в этом сообщении Руководящего совета <https://mail.python.org/"
"archives/list/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/"
">`__."

#: ../../whatsnew/3.11.rst:437
msgid "Other Language Changes"
msgstr "Другие языковые изменения"

#: ../../whatsnew/3.11.rst:439
msgid ""
"Starred unpacking expressions can now be used in :keyword:`for` statements. "
"(See :issue:`46725` for more details.)"
msgstr ""
"Выражения распаковки со звездочкой теперь можно использовать в операторах :"
"keyword:`for`. (Подробнее см. в :issue:`46725`.)"

#: ../../whatsnew/3.11.rst:442
msgid ""
"Asynchronous :ref:`comprehensions <comprehensions>` are now allowed inside "
"comprehensions in :ref:`asynchronous functions <async def>`. Outer "
"comprehensions implicitly become asynchronous in this case. (Contributed by "
"Serhiy Storchaka in :issue:`33346`.)"
msgstr ""
"Асинхронные :ref:`комплементации <comprehensions>` теперь разрешены внутри :"
"ref:`асинхронных функций <async def>`. В этом случае внешнее понимание "
"неявно становится асинхронным. (Предоставлено Сергеем Сторчакой в ​​:issue:"
"`33346`.)"

#: ../../whatsnew/3.11.rst:447
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in :"
"keyword:`with` statements and :meth:`contextlib.ExitStack.enter_context` for "
"objects that do not support the :term:`context manager` protocol, and in :"
"keyword:`async with` statements and :meth:`contextlib.AsyncExitStack."
"enter_async_context` for objects not supporting the :term:`asynchronous "
"context manager` protocol. (Contributed by Serhiy Storchaka in :issue:"
"`12022` and :issue:`44471`.)"
msgstr ""
":exc:`TypeError` теперь вызывается вместо :exc:`AttributeError` в "
"операторах :keyword:`with` и :meth:`contextlib.ExitStack.enter_context` для "
"объектов, которые не поддерживают :term:`context` менеджера`, а также в "
"операторах :keyword:`async with` и :meth:`contextlib.AsyncExitStack."
"enter_async_context` для объектов, не поддерживающих протокол :term:"
"`асинхронного менеджера контекста`. (Внесено Сергеем Сторчакой в ​​:issue:"
"`12022` и :issue:`44471`.)"

#: ../../whatsnew/3.11.rst:455
msgid ""
"Added :meth:`object.__getstate__`, which provides the default implementation "
"of the :meth:`!__getstate__` method. :mod:`copy`\\ing and :mod:`pickle`\\ing "
"instances of subclasses of builtin types :class:`bytearray`, :class:`set`, :"
"class:`frozenset`, :class:`collections.OrderedDict`, :class:`collections."
"deque`, :class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies "
"and pickles instance attributes implemented as :term:`slots <__slots__>`. "
"This change has an unintended side effect: It trips up a small minority of "
"existing Python projects not expecting :meth:`object.__getstate__` to exist. "
"See the later comments on :gh:`70766` for discussions of what workarounds "
"such code may need. (Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""
"Добавлен :meth:`object.__getstate__`, который обеспечивает реализацию по "
"умолчанию метода :meth:`!__getstate__`. :mod:`copy`\\ing и :mod:"
"`pickle`\\ing экземпляры подклассов встроенных типов :class:`bytearray`, :"
"class:`set`, :class:`frozenset`, :class:`collections. OrderedDict`, :class:"
"`collections.deque`, :class:`weakref.WeakSet` и :class:`datetime.tzinfo` "
"теперь копируют и выбирают атрибуты экземпляра, реализованные как :term:"
"`slots <__slots__>`. Это изменение имеет непредвиденный побочный эффект: оно "
"сбивает с толку небольшое меньшинство существующих проектов Python, не "
"ожидающих существования :meth:`object.__getstate__`. См. более поздние "
"комментарии к :gh:`70766` для обсуждения того, какие обходные пути могут "
"потребоваться для такого кода. (Предоставлено Сергеем Сторчакой в ​​:issue:"
"`26579`.)"

#: ../../whatsnew/3.11.rst:470
msgid ""
"Added a :option:`-P` command line option and a :envvar:`PYTHONSAFEPATH` "
"environment variable, which disable the automatic prepending to :data:`sys."
"path` of the script's directory when running a script, or the current "
"directory when using :option:`-c` and :option:`-m`. This ensures only stdlib "
"and installed modules are picked up by :keyword:`import`, and avoids "
"unintentionally or maliciously shadowing modules with those in a local (and "
"typically user-writable) directory. (Contributed by Victor Stinner in :gh:"
"`57684`.)"
msgstr ""
"Добавлен параметр командной строки :option:`-P` и переменная среды :envvar:"
"`PYTHONSAFEPATH`, которые отключают автоматическое добавление к :data:`sys."
"path` каталога сценария при запуске сценария или текущего каталога. при "
"использовании :option:`-c` и :option:`-m`. Это гарантирует, что :keyword:"
"`import` будет выбран только stdlib и установленные модули, и позволит "
"избежать непреднамеренного или злонамеренного дублирования модулей теми, "
"которые находятся в локальном (и обычно доступном для записи пользователем) "
"каталоге. (Предоставлено Виктором Стиннером в :gh:`57684`.)"

#: ../../whatsnew/3.11.rst:481
msgid ""
"A ``\"z\"`` option was added to the :ref:`formatspec` that coerces negative "
"to positive zero after rounding to the format precision. See :pep:`682` for "
"more details. (Contributed by John Belmonte in :gh:`90153`.)"
msgstr ""
"В спецификацию формата была добавлена ​​опция ``\"z\"``, которая приводит "
"отрицательное значение к положительному нулю после округления до точности "
"формата. См. :pep:`682` для более подробной информации. (Предоставлено "
"Джоном Бельмонте в :gh:`90153`.)"

#: ../../whatsnew/3.11.rst:486
msgid ""
"Bytes are no longer accepted on :data:`sys.path`.  Support broke sometime "
"between Python 3.2 and 3.6, with no one noticing until after Python 3.10.0 "
"was released. In addition, bringing back support would be problematic due to "
"interactions between :option:`-b` and :data:`sys.path_importer_cache` when "
"there is a mixture of :class:`str` and :class:`bytes` keys. (Contributed by "
"Thomas Grainger in :gh:`91181`.)"
msgstr ""
"Байты больше не принимаются в :data:`sys.path`. Поддержка прекратилась где-"
"то между Python 3.2 и 3.6, и никто этого не заметил до выхода Python 3.10.0. "
"Кроме того, возвращение поддержки будет проблематичным из-за взаимодействия "
"между :option:`-b` и :data:`sys.path_importer_cache`, когда имеется смесь "
"ключей :class:`str` и :class:`bytes`. (Предоставлено Томасом Грейнджером в :"
"gh:`91181`.)"

#: ../../whatsnew/3.11.rst:497
msgid "Other CPython Implementation Changes"
msgstr "Другие изменения реализации CPython"

#: ../../whatsnew/3.11.rst:499
msgid ""
"The special methods :meth:`~object.__complex__` for :class:`complex` and :"
"meth:`~object.__bytes__` for :class:`bytes` are implemented to support the :"
"class:`typing.SupportsComplex` and :class:`typing.SupportsBytes` protocols. "
"(Contributed by Mark Dickinson and Donghee Na in :issue:`24234`.)"
msgstr ""
"Специальные методы :meth:`~object.__complex__` для :class:`complex` и :meth:"
"`~object.__bytes__` для :class:`bytes` реализованы для поддержки :class:"
"`typing.SupportsComplex` и :class:`typing.SupportsBytes` протоколы. "
"(Предоставлено Марком Дикинсоном и Донхи На в :issue:`24234`.)"

#: ../../whatsnew/3.11.rst:504
msgid ""
"``siphash13`` is added as a new internal hashing algorithm. It has similar "
"security properties as ``siphash24``, but it is slightly faster for long "
"inputs. :class:`str`, :class:`bytes`, and some other types now use it as the "
"default algorithm for :func:`hash`. :pep:`552` :ref:`hash-based .pyc files "
"<pyc-invalidation>` now use ``siphash13`` too. (Contributed by Inada Naoki "
"in :issue:`29410`.)"
msgstr ""
"``siphash13`` добавлен как новый внутренний алгоритм хеширования. Он имеет "
"те же свойства безопасности, что и siphash24, но немного быстрее для длинных "
"входных данных. :class:`str`, :class:`bytes` и некоторые другие типы теперь "
"используют его в качестве алгоритма по умолчанию для :func:`hash`. :pep:"
"`552` :ref:`Файлы .pyc на основе хэша <pyc-invalidation>` теперь также "
"используют ``siphash13``. (Предоставлено Инадой Наоки в :issue:`29410`.)"

#: ../../whatsnew/3.11.rst:513
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement with "
"no parameters, the traceback attached to this exception is now always ``sys."
"exc_info()[1].__traceback__``. This means that changes made to the traceback "
"in the current :keyword:`except` clause are reflected in the re-raised "
"exception. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"Когда активное исключение повторно вызывается оператором :keyword:`raise` "
"без параметров, обратная трассировка, прикрепленная к этому исключению, "
"теперь всегда имеет вид ``sys.exc_info()[1].__traceback__``. Это означает, "
"что изменения, внесенные в обратную трассировку в текущем предложении :"
"keyword:`Exception`, отражаются в повторно создаваемом исключении. (Внесено "
"Ирит Катриэль в :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:519
msgid ""
"The interpreter state's representation of handled exceptions (aka "
"``exc_info`` or ``_PyErr_StackItem``) now only has the ``exc_value`` field; "
"``exc_type`` and ``exc_traceback`` have been removed, as they can be derived "
"from ``exc_value``. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"Представление обрабатываемых исключений в состоянии интерпретатора (также "
"известное как exc_info или _PyErr_StackItem) теперь имеет только поле "
"exc_value; ``exc_type`` и ``exc_traceback`` были удалены, поскольку они "
"могут быть производными от ``exc_value``. (Внесено Ирит Катриэль в :issue:"
"`45711`.)"

#: ../../whatsnew/3.11.rst:525
msgid ""
"A new :ref:`command line option <install-quiet-option>`, ``AppendPath``, has "
"been added for the Windows installer. It behaves similarly to "
"``PrependPath``, but appends the install and scripts directories instead of "
"prepending them. (Contributed by Bastian Neuburger in :issue:`44934`.)"
msgstr ""
"Для установщика Windows добавлен новый параметр командной строки <install-"
"quiet-option>, AppendPath. Он ведет себя аналогично PrependPath, но "
"добавляет каталоги установки и скриптов, а не добавляет их в начале. "
"(Предоставлено Бастианом Нойбургером в :issue:`44934`.)"

#: ../../whatsnew/3.11.rst:531
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to "
"``1`` for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"Поле :c:member:`PyConfig.module_search_paths_set` теперь должно быть "
"установлено в ``1`` для инициализации, чтобы использовать :c:member:"
"`PyConfig.module_search_paths` для инициализации :data:`sys.path`. В "
"противном случае инициализация пересчитает путь и заменит все значения, "
"добавленные в ``module_search_paths``."

#: ../../whatsnew/3.11.rst:536
msgid ""
"The output of the :option:`--help` option now fits in 50 lines/80 columns. "
"Information about :ref:`Python environment variables <using-on-envvars>` "
"and :option:`-X` options is now available using the respective :option:`--"
"help-env` and :option:`--help-xoptions` flags, and with the new :option:`--"
"help-all`. (Contributed by Éric Araujo in :issue:`46142`.)"
msgstr ""
"Вывод опции :option:`--help` теперь умещается в 50 строк/80 столбцов. "
"Информация о переменных среды Python <using-on-envvars>` и опциях :option:`-"
"X` теперь доступна с использованием соответствующих :option:`--help-env` и :"
"option:`--help. -xoptions`, а также новый :option:`--help-all`. "
"(Предоставлено Эриком Араужо в :issue:`46142`.)"

#: ../../whatsnew/3.11.rst:543
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"Преобразование между :class:`int` и :class:`str` в системах счисления, "
"отличных от 2 (двоичная), 4, 8 (восьмеричная), 16 (шестнадцатеричная) или "
"32, например, 10 (десятичная), теперь вызывает :exc :`ValueError`, если "
"количество цифр в строковой форме превышает ограничение, чтобы избежать "
"потенциальных атак типа «отказ в обслуживании» из-за сложности алгоритма. "
"Это смягчение последствий :cve:`2020-10735`. Это ограничение можно настроить "
"или отключить с помощью переменной среды, флага командной строки или API :"
"mod:`sys`. См. документацию по ограничению длины преобразования "
"целочисленной строки <int_max_str_digits>`. Ограничение по умолчанию — 4300 "
"цифр в строковой форме."

#: ../../whatsnew/3.11.rst:557
msgid "New Modules"
msgstr "Новые модули"

#: ../../whatsnew/3.11.rst:559
msgid ""
":mod:`tomllib`: For parsing `TOML <https://toml.io/>`_. See :pep:`680` for "
"more details. (Contributed by Taneli Hukkinen in :issue:`40059`.)"
msgstr ""
":mod:`tomllib`: Для анализа `TOML <https://toml.io/>`_. См. :pep:`680` для "
"более подробной информации. (Предоставлено Танели Хуккиненом в :issue:"
"`40059`.)"

#: ../../whatsnew/3.11.rst:563
msgid ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-specific types for static type "
"checking. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-специфичные типы для проверки "
"статического типа. (Предоставлено Себастьяном Риттау в :issue:`42012`.)"

#: ../../whatsnew/3.11.rst:571
msgid "Improved Modules"
msgstr "Улучшенные модули"

#: ../../whatsnew/3.11.rst:576
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.11.rst:578
msgid ""
"Added the :class:`~asyncio.TaskGroup` class, an :ref:`asynchronous context "
"manager <async-context-managers>` holding a group of tasks that will wait "
"for all of them upon exit. For new code this is recommended over using :func:"
"`~asyncio.create_task` and :func:`~asyncio.gather` directly. (Contributed by "
"Yury Selivanov and others in :gh:`90908`.)"
msgstr ""
"Добавлен класс :class:`~asyncio.TaskGroup`, :ref:`асинхронный контекстный "
"менеджер <async-context-managers>`, содержащий группу задач, которые будут "
"ожидать их всех после выхода. Для нового кода рекомендуется использовать :"
"func:`~asyncio.create_task` и :func:`~asyncio.gather` напрямую. "
"(Предоставлено Юрием Селивановым и другими в :gh:`90908`.)"

#: ../../whatsnew/3.11.rst:585
msgid ""
"Added :func:`~asyncio.timeout`, an asynchronous context manager for setting "
"a timeout on asynchronous operations. For new code this is recommended over "
"using :func:`~asyncio.wait_for` directly. (Contributed by Andrew Svetlov in :"
"gh:`90927`.)"
msgstr ""
"Добавлен :func:`~asyncio.timeout`, асинхронный контекстный менеджер для "
"установки таймаута для асинхронных операций. Для нового кода рекомендуется "
"использовать :func:`~asyncio.wait_for` напрямую. (Предоставлено Андреем "
"Светловым в :gh:`90927`.)"

#: ../../whatsnew/3.11.rst:590
msgid ""
"Added the :class:`~asyncio.Runner` class, which exposes the machinery used "
"by :func:`~asyncio.run`. (Contributed by Andrew Svetlov in :gh:`91218`.)"
msgstr ""
"Добавлен класс :class:`~asyncio.Runner`, который предоставляет механизм, "
"используемый :func:`~asyncio.run`. (Предоставлено Андреем Светловым в :gh:"
"`91218`.)"

#: ../../whatsnew/3.11.rst:594
msgid ""
"Added the :class:`~asyncio.Barrier` class to the synchronization primitives "
"in the asyncio library, and the related :exc:`~asyncio.BrokenBarrierError` "
"exception. (Contributed by Yves Duprat and Andrew Svetlov in :gh:`87518`.)"
msgstr ""
"Добавлен класс :class:`~asyncio.Barrier` к примитивам синхронизации в "
"библиотеке asyncio и связанное с ним исключение :exc:`~asyncio."
"BrokenBarrierError`. (Предоставлено Ивом Дюпра и Андреем Светловым в :gh:"
"`87518`.)"

#: ../../whatsnew/3.11.rst:599
msgid ""
"Added keyword argument *all_errors* to :meth:`asyncio.loop."
"create_connection` so that multiple connection errors can be raised as an :"
"exc:`ExceptionGroup`."
msgstr ""
"Добавлен аргумент ключевого слова *all_errors* в :meth:`asyncio.loop."
"create_connection`, чтобы можно было вызывать несколько ошибок соединения "
"как :exc:`ExceptionGroup`."

#: ../../whatsnew/3.11.rst:602
msgid ""
"Added the :meth:`asyncio.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in :issue:"
"`34975`.)"
msgstr ""
"Добавлен метод :meth:`asyncio.StreamWriter.start_tls` для обновления "
"существующих потоковых соединений до TLS. (Предоставлено Яном Гудом в :issue:"
"`34975`.)"

#: ../../whatsnew/3.11.rst:606
msgid ""
"Added raw datagram socket functions to the event loop: :meth:`~asyncio.loop."
"sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` and :meth:`~asyncio.loop."
"sock_recvfrom_into`. These have implementations in :class:`~asyncio."
"SelectorEventLoop` and :class:`~asyncio.ProactorEventLoop`. (Contributed by "
"Alex Grönholm in :issue:`46805`.)"
msgstr ""
"В цикл событий добавлены функции сокета необработанных датаграмм: :meth:"
"`~asyncio.loop.sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` и :meth:"
"`~asyncio.loop.sock_recvfrom_into`. Они имеют реализации в :class:`~asyncio."
"SelectorEventLoop` и :class:`~asyncio.ProactorEventLoop`. (Предоставлено "
"Алексом Грёнхольмом в :issue:`46805`.)"

#: ../../whatsnew/3.11.rst:614
msgid ""
"Added :meth:`~asyncio.Task.cancelling` and :meth:`~asyncio.Task.uncancel` "
"methods to :class:`~asyncio.Task`. These are primarily intended for internal "
"use, notably by :class:`~asyncio.TaskGroup`."
msgstr ""
"Добавлены методы :meth:`~asyncio.Task.cancelling` и :meth:`~asyncio.Task."
"uncancel` в :class:`~asyncio.Task`. Они в первую очередь предназначены для "
"внутреннего использования, особенно :class:`~asyncio.TaskGroup`."

#: ../../whatsnew/3.11.rst:623
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.11.rst:625
msgid ""
"Added non parallel-safe :func:`~contextlib.chdir` context manager to change "
"the current working directory and then restore it on exit. Simple wrapper "
"around :func:`~os.chdir`. (Contributed by Filipe Laíns in :issue:`25625`)"
msgstr ""
"Добавлен непараллельный контекстный менеджер :func:`~contextlib.chdir` для "
"изменения текущего рабочего каталога и последующего его восстановления при "
"выходе. Простая оболочка вокруг :func:`~os.chdir`. (Предоставлено Филипе "
"Лаинсом в :issue:`25625`)"

#: ../../whatsnew/3.11.rst:633
msgid "dataclasses"
msgstr "классы данных"

#: ../../whatsnew/3.11.rst:635
msgid ""
"Change field default mutability check, allowing only defaults which are :"
"term:`hashable` instead of any object which is not an instance of :class:"
"`dict`, :class:`list` or :class:`set`. (Contributed by Eric V. Smith in :"
"issue:`44674`.)"
msgstr ""
"Изменить проверку изменчивости поля по умолчанию, разрешив только значения "
"по умолчанию, которые являются :term:`hashable` вместо любого объекта, "
"который не является экземпляром :class:`dict`, :class:`list` или :class:"
"`set`. (Предоставлено Эриком В. Смитом в :issue:`44674`.)"

#: ../../whatsnew/3.11.rst:644
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.11.rst:646
msgid ""
"Add :const:`datetime.UTC`, a convenience alias for :attr:`datetime.timezone."
"utc`. (Contributed by Kabir Kwatra in :gh:`91973`.)"
msgstr ""
"Добавьте :const:`datetime.UTC`, удобный псевдоним для :attr:`datetime."
"timezone.utc`. (Предоставлено Кабиром Кватрой в :gh:`91973`.)"

#: ../../whatsnew/3.11.rst:649
msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"and :meth:`datetime.datetime.fromisoformat` can now be used to parse most "
"ISO 8601 formats (barring only those that support fractional hours and "
"minutes). (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` и :"
"meth:`datetime.datetime.fromisoformat` теперь можно использовать для анализа "
"большинства форматов ISO 8601 (за исключением тех, которые поддерживают "
"дробные часы). и минуты). (Предоставлено Полом Гансслом в :gh:`80010`.)"

#: ../../whatsnew/3.11.rst:658
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.11.rst:660
msgid ""
"Renamed :class:`!EnumMeta` to :class:`~enum.EnumType` (:class:`!EnumMeta` "
"kept as an alias)."
msgstr ""
":class:`!EnumMeta` переименован в :class:`~enum.EnumType` (:class:`!"
"EnumMeta` сохранен как псевдоним)."

#: ../../whatsnew/3.11.rst:663
msgid ""
"Added :class:`~enum.StrEnum`, with members that can be used as (and must be) "
"strings."
msgstr ""
"Добавлен :class:`~enum.StrEnum` с членами, которые могут использоваться (и "
"должны быть) строками."

#: ../../whatsnew/3.11.rst:666
msgid ""
"Added :class:`~enum.ReprEnum`, which only modifies the :meth:`~object."
"__repr__` of members while returning their literal values (rather than "
"names) for :meth:`~object.__str__` and :meth:`~object.__format__` (used by :"
"func:`str`, :func:`format` and :term:`f-string`\\s)."
msgstr ""
"Добавлен :class:`~enum.ReprEnum`, который изменяет только :meth:`~object."
"__repr__` членов, возвращая их литеральные значения (а не имена) для :meth:"
"`~object.__str__` и :meth: `~object.__format__` (используется :func:`str`, :"
"func:`format` и :term:`f-string`\\s)."

#: ../../whatsnew/3.11.rst:672
msgid ""
"Changed :meth:`Enum.__format__() <enum.Enum.__format__>` (the default for :"
"func:`format`, :meth:`str.format` and :term:`f-string`\\s) to always produce "
"the same result as :meth:`Enum.__str__() <enum.Enum.__str__>`:  for enums "
"inheriting from :class:`~enum.ReprEnum` it will be the member's value; for "
"all other enums it will be the enum and member name (e.g. ``Color.RED``)."
msgstr ""
"Изменено :meth:`Enum.__format__() <enum.Enum.__format__>` (по умолчанию для :"
"func:`format`, :meth:`str.format` и :term:`f-string`\\s) на всегда дает тот "
"же результат, что и :meth:`Enum.__str__() <enum.Enum.__str__>`: для "
"перечислений, наследуемых от :class:`~enum.ReprEnum`, это будет значение "
"члена; для всех остальных перечислений это будет перечисление и имя члена "
"(например, «Color.RED»)."

#: ../../whatsnew/3.11.rst:678
msgid ""
"Added a new *boundary* class parameter to :class:`~enum.Flag` enums and the :"
"class:`~enum.FlagBoundary` enum with its options, to control how to handle "
"out-of-range flag values."
msgstr ""
"Добавлен новый параметр класса *boundary* в перечисления :class:`~enum.Flag` "
"и перечисление :class:`~enum.FlagBoundary` с его параметрами, позволяющие "
"контролировать обработку значений флагов, выходящих за пределы диапазона."

#: ../../whatsnew/3.11.rst:682
msgid ""
"Added the :func:`~enum.verify` enum decorator and the :class:`~enum."
"EnumCheck` enum with its options, to check enum classes against several "
"specific constraints."
msgstr ""
"Добавлен декоратор перечисления :func:`~enum.verify` и перечисление :class:"
"`~enum.EnumCheck` с его параметрами для проверки перечисляемых классов на "
"соответствие нескольким конкретным ограничениям."

#: ../../whatsnew/3.11.rst:686
msgid ""
"Added the :func:`~enum.member` and :func:`~enum.nonmember` decorators, to "
"ensure the decorated object is/is not converted to an enum member."
msgstr ""
"Добавлены декораторы :func:`~enum.member` и :func:`~enum.nonmember`, чтобы "
"гарантировать, что декорированный объект преобразуется/не преобразуется в "
"член перечисления."

#: ../../whatsnew/3.11.rst:689
msgid ""
"Added the :func:`~enum.property` decorator, which works like :func:"
"`property` except for enums. Use this instead of :func:`types."
"DynamicClassAttribute`."
msgstr ""
"Добавлен декоратор :func:`~enum.property`, который работает как :func:"
"`property`, за исключением перечислений. Используйте это вместо :func:`types."
"DynamicClassAttribute`."

#: ../../whatsnew/3.11.rst:693
msgid ""
"Added the :func:`~enum.global_enum` enum decorator, which adjusts :meth:"
"`~object.__repr__` and :meth:`~object.__str__` to show values as members of "
"their module rather than the enum class. For example, ``'re.ASCII'`` for "
"the :const:`~re.ASCII` member of :class:`re.RegexFlag` rather than "
"``'RegexFlag.ASCII'``."
msgstr ""
"Добавлен декоратор перечисления :func:`~enum.global_enum`, который "
"настраивает :meth:`~object.__repr__` и :meth:`~object.__str__` для "
"отображения значений как членов их модуля, а не класса перечисления. "
"Например, ``'re.ASCII'`` для члена :const:`~re.ASCII` :class:`re.RegexFlag`, "
"а не ``'RegexFlag.ASCII'``."

#: ../../whatsnew/3.11.rst:699
msgid ""
"Enhanced :class:`~enum.Flag` to support :func:`len`, iteration and :keyword:"
"`in`/:keyword:`not in` on its members. For example, the following now works: "
"``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"
msgstr ""
"Улучшен :class:`~enum.Flag` для поддержки :func:`len`, итерации и :keyword:"
"`in`/:keyword:`not in` для его членов. Например, теперь работает следующее: "
"``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"

#: ../../whatsnew/3.11.rst:704
msgid ""
"Changed :class:`~enum.Enum` and :class:`~enum.Flag` so that members are now "
"defined before :meth:`~object.__init_subclass__` is called; :func:`dir` now "
"includes methods, etc., from mixed-in data types."
msgstr ""
"Изменены :class:`~enum.Enum` и :class:`~enum.Flag`, так что члены теперь "
"определяются до вызова :meth:`~object.__init_subclass__`; :func:`dir` теперь "
"включает методы и т. д. из смешанных типов данных."

#: ../../whatsnew/3.11.rst:709
msgid ""
"Changed :class:`~enum.Flag` to only consider primary values (power of two) "
"canonical while composite values (``3``, ``6``, ``10``, etc.) are considered "
"aliases; inverted flags are coerced to their positive equivalent."
msgstr ""
"Изменен :class:`~enum.Flag`, чтобы считать каноническими только первичные "
"значения (степень двойки), тогда как составные значения (``3``, ``6``, "
"``10`` и т. д.) считаются псевдонимами; инвертированные флаги приводятся к "
"их положительному эквиваленту."

#: ../../whatsnew/3.11.rst:718
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.11.rst:720
msgid ""
"On FreeBSD, the :data:`!F_DUP2FD` and :data:`!F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the "
"latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""
"Во FreeBSD поддерживаются флаги :data:`!F_DUP2FD` и :data:`!"
"F_DUP2FD_CLOEXEC` соответственно, первый соответствует использованию "
"``dup2``, а второй дополнительно устанавливает флаг ``FD_CLOEXEC``."

#: ../../whatsnew/3.11.rst:728
msgid "fractions"
msgstr "дроби"

#: ../../whatsnew/3.11.rst:730
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` from "
"string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""
"Поддержка инициализации :class:`~fractions.Fraction` из строки в стиле :PEP:"
"`515`. (Внесено Сергеем Кирпичевым в :issue:`44258`.)"

#: ../../whatsnew/3.11.rst:733
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so that "
"an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""
":class:`~fractions.Fraction` теперь реализует метод ``__int__``, так что "
"проверка ``isinstance(some_fraction, typing.SupportsInt)`` проходит. "
"(Предоставлено Марком Дикинсоном в :issue:`44547`.)"

#: ../../whatsnew/3.11.rst:741
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.11.rst:743
msgid ""
":func:`functools.singledispatch` now supports :data:`types.UnionType` and :"
"data:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""
":func:`functools.singledispatch` теперь поддерживает :data:`types.UnionType` "
"и :data:`typing.Union` в качестве аннотаций к аргументу отправки.::"

#: ../../whatsnew/3.11.rst:746
msgid ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."
msgstr ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."

#: ../../whatsnew/3.11.rst:768
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr "(Добавлен Юрием Карабасом в :issue:`46014`.)"

#: ../../whatsnew/3.11.rst:774
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.11.rst:776
msgid ""
"The :func:`gzip.compress` function is now faster when used with the "
"**mtime=0** argument as it delegates the compression entirely to a single :"
"func:`zlib.compress` operation. There is one side effect of this change: The "
"gzip file header contains an \"OS\" byte in its header. That was "
"traditionally always set to a value of 255 representing \"unknown\" by the :"
"mod:`gzip` module. Now, when using :func:`~gzip.compress` with **mtime=0**, "
"it may be set to a different value by the underlying zlib C library Python "
"was linked against. (See :gh:`112346` for details on the side effect.)"
msgstr ""
"Функция :func:`gzip.compress` теперь работает быстрее при использовании с "
"аргументом **mtime=0**, поскольку она полностью делегирует сжатие одной "
"операции :func:`zlib.compress`. У этого изменения есть один побочный эффект: "
"заголовок файла gzip содержит байт «OS». Традиционно модулем :mod:`gzip` для "
"него всегда было установлено значение 255, обозначающее «неизвестно». Теперь "
"при использовании :func:`~gzip.compress` с **mtime=0** для него может быть "
"установлено другое значение базовой библиотекой zlib C, с которой был связан "
"Python. (Подробную информацию о побочном эффекте см. в :gh:`112346`.)"

#: ../../whatsnew/3.11.rst:789
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.11.rst:791
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ over "
"Python's vendored copy. (Contributed by Christian Heimes in :issue:`47095`.)"
msgstr ""
":func:`hashlib.blake2b` и :func:`hashlib.blake2s` теперь предпочитают "
"`lib2`_ поставляемой копии Python. (Предоставлено Кристианом Хаймсом в :"
"issue:`47095`.)"

#: ../../whatsnew/3.11.rst:795
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and binary "
"size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations without "
"OpenSSL support. (Contributed by Christian Heimes in :issue:`47098`.)"
msgstr ""
"Внутренний модуль ``_sha3`` с алгоритмами SHA3 и SHAKE теперь использует "
"*tiny_sha3* вместо *Keccak Code Package* для уменьшения размера кода и "
"двоичных файлов. Модуль :mod:`hashlib` предпочитает оптимизированные "
"реализации SHA3 и SHAKE из OpenSSL. Изменение касается только установок без "
"поддержки OpenSSL. (Предоставлено Кристианом Хаймсом в :issue:`47098`.)"

#: ../../whatsnew/3.11.rst:802
msgid ""
"Add :func:`hashlib.file_digest`, a helper function for efficient hashing of "
"files or file-like objects. (Contributed by Christian Heimes in :gh:`89313`.)"
msgstr ""
"Добавьте :func:`hashlib.file_digest`, вспомогательную функцию для "
"эффективного хеширования файлов или файловоподобных объектов. (Предоставлено "
"Кристианом Хаймсом в :gh:`89313`.)"

#: ../../whatsnew/3.11.rst:810
msgid "IDLE and idlelib"
msgstr "IDLE и idlelib"

#: ../../whatsnew/3.11.rst:812
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Примените подсветку синтаксиса к файлам ``.pyi``. (Предоставлено Алексом "
"Вэйгудом и Терри Джен Риди в :issue:`45447`.)"

#: ../../whatsnew/3.11.rst:815
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"Включите подсказки при сохранении Shell с входными и выходными данными. "
"(Предоставлено Терри Яном Риди в :gh:`95191`.)"

#: ../../whatsnew/3.11.rst:822
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.11.rst:824
msgid ""
"Add :func:`~inspect.getmembers_static` to return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""
"Добавьте :func:`~inspect.getmembers_static`, чтобы возвращать все члены без "
"запуска динамического поиска через протокол дескриптора. (Предоставлено "
"Вейпенгом Хонгом в :issue:`30533`.)"

#: ../../whatsnew/3.11.rst:828
msgid ""
"Add :func:`~inspect.ismethodwrapper` for checking if the type of an object "
"is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in :"
"issue:`29418`.)"
msgstr ""
"Добавьте :func:`~inspect.ismethodwrapper` для проверки того, является ли тип "
"объекта :class:`~types.MethodWrapperType`. (Предоставлено Хаканом Челиком в :"
"issue:`29418`.)"

#: ../../whatsnew/3.11.rst:832
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return "
"new :class:`~inspect.FrameInfo` and :class:`~inspect.Traceback` class "
"instances (backwards compatible with the previous :term:`named tuple`-like "
"interfaces) that includes the extended :pep:`657` position information (end "
"line number, column and end column). The affected functions are:"
msgstr ""
"Измените функции, связанные с фреймами, в модуле :mod:`inspect`, чтобы они "
"возвращали новые экземпляры классов :class:`~inspect.FrameInfo` и :class:"
"`~inspect.Traceback` (обратно совместимые с предыдущими :term:`named) "
"интерфейсы типа tuple), которые включают в себя расширенную информацию о "
"позиции :pep:`657` (номер конечной строки, столбец и конечный столбец). "
"Затронутые функции:"

#: ../../whatsnew/3.11.rst:838
msgid ":func:`inspect.getframeinfo`"
msgstr ":func:`inspect.getframeinfo`"

#: ../../whatsnew/3.11.rst:839
msgid ":func:`inspect.getouterframes`"
msgstr ":func:`inspect.getouterframes`"

#: ../../whatsnew/3.11.rst:840
msgid ":func:`inspect.getinnerframes`,"
msgstr ":func:`inspect.getinnerframes`,"

#: ../../whatsnew/3.11.rst:841
msgid ":func:`inspect.stack`"
msgstr ":func:`inspect.stack`"

#: ../../whatsnew/3.11.rst:842
msgid ":func:`inspect.trace`"
msgstr ":func:`inspect.trace`"

#: ../../whatsnew/3.11.rst:844
msgid "(Contributed by Pablo Galindo in :gh:`88116`.)"
msgstr "(Предоставлено Пабло Галиндо в :gh:`88116`.)"

#: ../../whatsnew/3.11.rst:850
msgid "locale"
msgstr "локаль"

#: ../../whatsnew/3.11.rst:852
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Добавьте :func:`locale.getencoding`, чтобы получить текущую кодировку "
"локали. Он похож на ``locale.getpreferredencoding(False)``, но игнорирует :"
"ref:`Python UTF-8 Mode <utf8-mode>`."

#: ../../whatsnew/3.11.rst:860
msgid "logging"
msgstr "логирование"

#: ../../whatsnew/3.11.rst:862
msgid ""
"Added :func:`~logging.getLevelNamesMapping` to return a mapping from logging "
"level names (e.g. ``'CRITICAL'``) to the values of their corresponding :ref:"
"`levels` (e.g. ``50``, by default). (Contributed by Andrei Kulakovin in :gh:"
"`88024`.)"
msgstr ""
"Добавлен :func:`~logging.getLevelNamesMapping` для возврата сопоставления "
"имен уровней журналирования (например, ``'CRITICAL'``) со значениями "
"соответствующих им :ref:`levels` (например, ``50``, по умолчанию). ). "
"(Предоставлено Андреем Кулаковиным в :gh:`88024`.)"

#: ../../whatsnew/3.11.rst:867
msgid ""
"Added a :meth:`~logging.handlers.SysLogHandler.createSocket` method to :"
"class:`~logging.handlers.SysLogHandler`, to match :meth:`SocketHandler."
"createSocket() <logging.handlers.SocketHandler.createSocket>`. It is called "
"automatically during handler initialization and when emitting an event, if "
"there is no active socket. (Contributed by Kirill Pinchuk in :gh:`88457`.)"
msgstr ""
"Добавлен метод :meth:`~logging.handlers.SysLogHandler.createSocket` в :class:"
"`~logging.handlers.SysLogHandler`, соответствующий :meth:`SocketHandler."
"createSocket() <logging.handlers.SocketHandler.createSocket>` . Он "
"вызывается автоматически во время инициализации обработчика и при отправке "
"события, если нет активного сокета. (Предоставлено Кириллом Пинчуком в :gh:"
"`88457`.)"

#: ../../whatsnew/3.11.rst:879
msgid "math"
msgstr "математика"

#: ../../whatsnew/3.11.rst:881
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by "
"Gideon Mitchell in :issue:`45917`.)"
msgstr ""
"Добавьте :func:`math.exp2`: верните 2, возведенную в степень x. "
"(Предоставлено Гидеоном Митчеллом в :issue:`45917`.)"

#: ../../whatsnew/3.11.rst:884
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""
"Добавьте :func:`math.cbrt`: возврат кубического корня x. (Предоставлено "
"Аджитом Рамачандраном в :issue:`44357`.)"

#: ../../whatsnew/3.11.rst:887
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations ``math.pow(0.0, -"
"math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return ``inf``. Previously "
"they raised :exc:`ValueError`. (Contributed by Mark Dickinson in :issue:"
"`44339`.)"
msgstr ""
"Поведение двух угловых случаев :func:`math.pow` было изменено для "
"обеспечения соответствия спецификации IEEE 754. Операции math.pow(0.0, -math."
"inf) и math.pow(-0.0, -math.inf) теперь возвращают inf. Ранее они подняли :"
"exc:`ValueError`. (Предоставлено Марком Дикинсоном в :issue:`44339`.)"

#: ../../whatsnew/3.11.rst:893
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by Victor "
"Stinner in :issue:`46917`.)"
msgstr ""
"Значение :data:`math.nan` теперь всегда доступно. (Предоставлено Виктором "
"Стиннером в :issue:`46917`.)"

#: ../../whatsnew/3.11.rst:900
msgid "operator"
msgstr "оператор"

#: ../../whatsnew/3.11.rst:902
msgid ""
"A new function ``operator.call`` has been added, such that ``operator."
"call(obj, *args, **kwargs) == obj(*args, **kwargs)``. (Contributed by Antony "
"Lee in :issue:`44019`.)"
msgstr ""
"Была добавлена ​​новая функция ``operator.call``, например ``operator."
"call(obj, *args, **kwargs) == obj(*args, **kwargs)``. (Предоставлено Энтони "
"Ли в :issue:`44019`.)"

#: ../../whatsnew/3.11.rst:910
msgid "os"
msgstr "os"

#: ../../whatsnew/3.11.rst:912
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of "
"``CryptGenRandom()`` which is deprecated. (Contributed by Donghee Na in :"
"issue:`44611`.)"
msgstr ""
"В Windows :func:`os.urandom` теперь использует ``BCryptGenRandom()`` вместо "
"``CryptGenRandom()``, который устарел. (Предоставлено Донхи На в :issue:"
"`44611`.)"

#: ../../whatsnew/3.11.rst:920
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.11.rst:922
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: :data:"
"`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in :issue:"
"`22276` and :issue:`33392`.)"
msgstr ""
":meth:`~pathlib.Path.glob` и :meth:`~pathlib.Path.rglob` возвращают только "
"каталоги, если *pattern* заканчивается разделителем компонентов пути: :data:"
"`~os.sep` или :data: `~os.altsep`. (Внесено Эйсуке Кавасимой в :issue:"
"`22276` и :issue:`33392`.)"

#: ../../whatsnew/3.11.rst:931
msgid "re"
msgstr "re"

#: ../../whatsnew/3.11.rst:933
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``, ``?"
"+``, ``{m,n}+``) are now supported in regular expressions. (Contributed by "
"Jeffrey C. Jacobs and Serhiy Storchaka in :issue:`433030`.)"
msgstr ""
"Атомная группировка (``(?>...)``) и притяжательные кванторы (``*+``, ``++``, "
"``?+``, ``{m,n}+`` ) теперь поддерживаются в регулярных выражениях. "
"(Предоставлено Джеффри К. Джейкобсом и Сергеем Сторчакой в ​​:issue:`433030`.)"

#: ../../whatsnew/3.11.rst:941
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.11.rst:943
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by "
"Serhiy Storchaka in :issue:`46245`.)"
msgstr ""
"Добавьте необязательный параметр *dir_fd* в :func:`shutil.rmtree`. "
"(Предоставлено Сергеем Сторчакой в ​​:issue:`46245`.)"

#: ../../whatsnew/3.11.rst:950
msgid "socket"
msgstr "сокет"

#: ../../whatsnew/3.11.rst:952
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in :issue:"
"`30512`.)"
msgstr ""
"Добавлена ​​поддержка CAN-сокетов для NetBSD. (Предоставлено Томасом "
"Клауснером в :issue:`30512`.)"

#: ../../whatsnew/3.11.rst:955
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of failure "
"to connect, an :exc:`ExceptionGroup` containing all errors instead of only "
"raising the last error. (Contributed by Irit Katriel in :issue:`29980`.)"
msgstr ""
":meth:`~socket.create_connection` имеет возможность вызывать в случае "
"неудачи соединения :exc:`ExceptionGroup`, содержащую все ошибки, а не только "
"вызывать последнюю ошибку. (Предоставлено Ирит Катриэль в :issue:`29980`.)"

#: ../../whatsnew/3.11.rst:964
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.11.rst:966
msgid ""
"You can now disable the authorizer by passing :const:`None` to :meth:"
"`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. Aasland in :"
"issue:`44491`.)"
msgstr ""
"Теперь вы можете отключить авторизатор, передав :const:`None` в :meth:"
"`~sqlite3.Connection.set_authorizer`. (Предоставлено Эрлендом Э. Осландом в :"
"issue:`44491`.)"

#: ../../whatsnew/3.11.rst:970
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now contain "
"any Unicode character.  Collation names with invalid characters now raise :"
"exc:`UnicodeEncodeError` instead of :exc:`sqlite3.ProgrammingError`. "
"(Contributed by Erlend E. Aasland in :issue:`44688`.)"
msgstr ""
"Имя сопоставления :meth:`~sqlite3.Connection.create_collation` теперь может "
"содержать любой символ Юникода. Имена сопоставлений с недопустимыми "
"символами теперь вызывают :exc:`UnicodeEncodeError` вместо :exc:`sqlite3."
"ProgrammingError`. (Предоставлено Эрлендом Э. Осландом в :issue:`44688`.)"

#: ../../whatsnew/3.11.rst:975
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as :"
"attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, Daniel "
"Shahaf, and Erlend E. Aasland in :issue:`16379` and :issue:`24139`.)"
msgstr ""
"Исключения :mod:`sqlite3` теперь включают расширенный код ошибки SQLite как :"
"attr:`~sqlite3.Error.sqlite_errorcode` и имя ошибки SQLite как :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Предоставлено Авивом Паливодой, Дэниелом "
"Шахафом и Эрлендом Э. Осландом в :issue:`16379` и :issue:`24139`.)"

#: ../../whatsnew/3.11.rst:981
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and :meth:`~sqlite3.Connection."
"getlimit` to :class:`sqlite3.Connection` for setting and getting SQLite "
"limits by connection basis. (Contributed by Erlend E. Aasland in :issue:"
"`45243`.)"
msgstr ""
"Добавьте :meth:`~sqlite3.Connection.setlimit` и :meth:`~sqlite3.Connection."
"getlimit` в :class:`sqlite3.Connection` для установки и получения "
"ограничений SQLite в зависимости от соединения. (Предоставлено Эрлендом Э. "
"Осландом в :issue:`45243`.)"

#: ../../whatsnew/3.11.rst:986
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default "
"threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""
":mod:`sqlite3` теперь устанавливает :attr:`sqlite3.threadsafety` на основе "
"режима потоковой обработки по умолчанию, с которым была скомпилирована "
"базовая библиотека SQLite. (Предоставлено Эрлендом Э. Осландом в :issue:"
"`45613`.)"

#: ../../whatsnew/3.11.rst:990
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""
":mod:`sqlite3` Обратные вызовы C теперь используют невызываемые исключения, "
"если включена трассировка обратного вызова. Теперь пользователи могут "
"зарегистрировать обработчик перехвата :func:`unraisable <sys."
"unraisablehook>`, чтобы улучшить процесс отладки. (Предоставлено Эрлендом Э. "
"Осландом в :issue:`45828`.)"

#: ../../whatsnew/3.11.rst:996
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""
"Выборка при откате больше не вызывает :exc:`~sqlite3.InterfaceError`. Вместо "
"этого мы оставляем обработку этих случаев библиотеке SQLite. (Предоставлено "
"Эрлендом Э. Осландом в :issue:`44092`.)"

#: ../../whatsnew/3.11.rst:1000
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and :meth:`~sqlite3.Connection."
"deserialize` to :class:`sqlite3.Connection` for serializing and "
"deserializing databases. (Contributed by Erlend E. Aasland in :issue:"
"`41930`.)"
msgstr ""
"Добавьте :meth:`~sqlite3.Connection.serialize` и :meth:`~sqlite3.Connection."
"deserialize` в :class:`sqlite3.Connection` для сериализации и десериализации "
"баз данных. (Предоставлено Эрлендом Э. Осландом в :issue:`41930`.)"

#: ../../whatsnew/3.11.rst:1005
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to :class:`sqlite3."
"Connection` for creating aggregate window functions. (Contributed by Erlend "
"E. Aasland in :issue:`34916`.)"
msgstr ""
"Добавьте :meth:`~sqlite3.Connection.create_window_function` в :class:"
"`sqlite3.Connection` для создания агрегатных оконных функций. (Предоставлено "
"Эрлендом Э. Осландом в :issue:`34916`.)"

#: ../../whatsnew/3.11.rst:1009
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. :"
"class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`.)"
msgstr ""
"Добавьте :meth:`~sqlite3.Connection.blobopen` в :class:`sqlite3."
"Connection`. :class:`sqlite3.Blob` позволяет выполнять дополнительные "
"операции ввода-вывода с большими двоичными объектами. (Предоставлено Авивом "
"Паливодой и Эрлендом Э. Осландом в :issue:`24905`.)"

#: ../../whatsnew/3.11.rst:1017
msgid "string"
msgstr "строка"

#: ../../whatsnew/3.11.rst:1019
msgid ""
"Add :meth:`~string.Template.get_identifiers` and :meth:`~string.Template."
"is_valid` to :class:`string.Template`, which respectively return all valid "
"placeholders, and whether any invalid placeholders are present. (Contributed "
"by Ben Kehoe in :gh:`90465`.)"
msgstr ""
"Добавьте :meth:`~string.Template.get_identifiers` и :meth:`~string.Template."
"is_valid` в :class:`string.Template`, которые соответственно возвращают все "
"допустимые заполнители и информацию о наличии недопустимых заполнителей. "
"(Предоставлено Беном Кехо в :gh:`90465`.)"

#: ../../whatsnew/3.11.rst:1029
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.11.rst:1031
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields from "
"the ``value`` (the exception instance), so when an exception is modified "
"while it is being handled, the changes are reflected in the results of "
"subsequent calls to :func:`!exc_info`. (Contributed by Irit Katriel in :"
"issue:`45711`.)"
msgstr ""
":func:`sys.exc_info` теперь получает поля ``type`` и ``traceback`` из "
"``value`` (экземпляра исключения), поэтому, когда исключение модифицируется "
"во время его обработки, изменения отражаются в результатах последующих "
"вызовов :func:`!exc_info`. (Внесено Ирит Катриэль в :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:1037
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in :"
"issue:`46328`.)"
msgstr ""
"Добавьте :func:`sys.Exception`, которая возвращает активный экземпляр "
"исключения (эквивалент ``sys.exc_info()[1]``). (Предоставлено Ирит Катриэль "
"в :issue:`46328`.)"

#: ../../whatsnew/3.11.rst:1041
msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Добавьте флаг :data:`sys.flags.safe_path <sys.flags>`. (Предоставлено "
"Виктором Стиннером в :gh:`57684`.)"

#: ../../whatsnew/3.11.rst:1048
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.11.rst:1050
msgid ""
"Three new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. The "
"first two schemes (*posix_venv* and *nt_venv*) are OS-specific for non-"
"Windows and Windows, the *venv* is essentially an alias to one of them "
"according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third party "
"code that creates new virtual environments should use the new *venv* "
"installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""
"Были добавлены три новые :ref:`схемы установки <installation_paths>` "
"(*posix_venv*, *nt_venv* и *venv*), которые используются, когда Python "
"создает новые виртуальные среды или когда он запускается из виртуальной "
"среды. Первые две схемы (*posix_venv* и *nt_venv*) зависят от ОС для "
"отличных от Windows и Windows, *venv* по сути является псевдонимом одной из "
"них в соответствии с ОС, на которой работает Python. Это полезно для "
"нижестоящих дистрибьюторов, которые изменяют :func:`sysconfig."
"get_preferred_scheme`. Сторонний код, создающий новые виртуальные среды, "
"должен использовать новую схему установки *venv* для определения путей, как "
"и :mod:`venv`. (Предоставлено Миро Хрончок в :issue:`45413`.)"

#: ../../whatsnew/3.11.rst:1067
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.11.rst:1069
msgid ""
":class:`~tempfile.SpooledTemporaryFile` objects now fully implement the "
"methods of :class:`io.BufferedIOBase` or :class:`io.TextIOBase` (depending "
"on file mode). This lets them work correctly with APIs that expect file-like "
"objects, such as compression modules. (Contributed by Carey Metcalfe in :gh:"
"`70363`.)"
msgstr ""
"Объекты :class:`~tempfile.SpooledTemporaryFile` теперь полностью реализуют "
"методы :class:`io.BufferedIOBase` или :class:`io.TextIOBase` (в зависимости "
"от файлового режима). Это позволяет им правильно работать с API-"
"интерфейсами, которые ожидают файловые объекты, такие как модули сжатия. "
"(Предоставлено Кэри Меткалфом в :gh:`70363`.)"

#: ../../whatsnew/3.11.rst:1080
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.11.rst:1082
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C library "
"(glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method now uses "
"the monotonic clock (:const:`time.CLOCK_MONOTONIC`) for the timeout, rather "
"than using the system clock (:const:`time.CLOCK_REALTIME`), to not be "
"affected by system clock changes. (Contributed by Victor Stinner in :issue:"
"`41710`.)"
msgstr ""
"В Unix, если функция sem_clockwait() доступна в библиотеке C (glibc 2.30 и "
"новее), метод :meth:`threading.Lock.acquire` теперь использует монотонные "
"часы (:const:`time. CLOCK_MONOTONIC`) для тайм-аута, а не использования "
"системных часов (:const:`time.CLOCK_REALTIME`), чтобы на него не влияли "
"изменения системных часов. (Предоставлено Виктором Стиннером в :issue:"
"`41710`.)"

#: ../../whatsnew/3.11.rst:1093
msgid "time"
msgstr "время"

#: ../../whatsnew/3.11.rst:1095
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which "
"has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed by "
"Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""
"В Unix :func:`time.sleep` теперь использует функцию clock_nanosleep()`` или "
"``nanosleep()``, если она доступна, с разрешением 1 наносекунду (10\\ :sup:"
"`-9). ` секунд), а не использовать ``select()``, разрешение которого "
"составляет 1 микросекунду (10\\ :sup:`-6` секунд). (Предоставлено "
"Бенджамином Секе и Виктором Стиннером в :issue:`21302`.)"

#: ../../whatsnew/3.11.rst:1101
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer based "
"on `high-resolution timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ which has a resolution of "
"100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it had a resolution of "
"1 millisecond (10\\ :sup:`-3` seconds). (Contributed by Benjamin Szőke, "
"Donghee Na, Eryk Sun and Victor Stinner in :issue:`21302` and :issue:"
"`45429`.)"
msgstr ""
"В Windows 8.1 и более поздних версиях :func:`time.sleep` теперь использует "
"таймер ожидания на основе `таймеров высокого разрешения <https://docs."
"microsoft.com/en-us/windows-hardware/drivers/kernel/high -solve-timers>`_, "
"разрешение которого составляет 100 наносекунд (10\\ :sup:`-7` секунд). "
"Раньше разрешение составляло 1 миллисекунду (10\\ :sup:`-3` секунд). "
"(Предоставлено Бенджамином Сёке, Донхи На, Эриком Саном и Виктором Стиннером "
"в :issue:`21302` и :issue:`45429`.)"

#: ../../whatsnew/3.11.rst:1112
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.11.rst:1114
msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the "
"Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""
"Добавлен метод info_patchlevel(), который возвращает точную версию "
"библиотеки Tcl в виде именованного кортежа, аналогичного :data:`sys."
"version_info`. (Предоставлено Сергеем Сторчакой в ​​:gh:`91827`.)"

#: ../../whatsnew/3.11.rst:1122
msgid "traceback"
msgstr "трассировка"

#: ../../whatsnew/3.11.rst:1124
msgid ""
"Add :func:`traceback.StackSummary.format_frame_summary` to allow users to "
"override which frames appear in the traceback, and how they are formatted. "
"(Contributed by Ammar Askar in :issue:`44569`.)"
msgstr ""
"Добавьте :func:`traceback.StackSummary.format_frame_summary`, чтобы "
"пользователи могли переопределять, какие кадры появляются в трассировке и "
"как они форматируются. (Предоставлено Аммаром Аскаром в :issue:`44569`.)"

#: ../../whatsnew/3.11.rst:1129
msgid ""
"Add :func:`traceback.TracebackException.print`, which prints the formatted :"
"exc:`~traceback.TracebackException` instance to a file. (Contributed by Irit "
"Katriel in :issue:`33809`.)"
msgstr ""
"Добавьте :func:`traceback.TracebackException.print`, который печатает "
"отформатированный экземпляр :exc:`~traceback.TracebackException` в файл. "
"(Предоставлено Ирит Катриэль в :issue:`33809`.)"

#: ../../whatsnew/3.11.rst:1137
msgid "typing"
msgstr "печатание"

#: ../../whatsnew/3.11.rst:1139
msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr ""
"Чтобы узнать об основных изменениях, см. :ref:`new-feat-related-type-"
"hints-311`."

#: ../../whatsnew/3.11.rst:1141
msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. :func:`typing."
"assert_never` is useful for asking a type checker to confirm that a line of "
"code is not reachable. At runtime, it raises an :exc:`AssertionError`. "
"(Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""
"Добавьте :func:`typing.assert_never` и :class:`typing.Never`. :func:`typing."
"assert_never` полезен для того, чтобы попросить средство проверки типов "
"подтвердить, что строка кода недоступна. Во время выполнения он вызывает "
"ошибку :exc:`AssertionError`. (Предоставлено Джелле Зийлстра в :gh:`90633`.)"

#: ../../whatsnew/3.11.rst:1147
msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints the "
"type of the received value. (Contributed by Jelle Zijlstra in :gh:`90572`.)"
msgstr ""
"Добавьте :func:`typing.reveal_type`. Это полезно для запроса средства "
"проверки типов, какой тип он вывел для данного выражения. Во время "
"выполнения он печатает тип полученного значения. (Предоставлено Джелле "
"Зийлстра в :gh:`90572`.)"

#: ../../whatsnew/3.11.rst:1152
msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker to "
"confirm that the type it has inferred for a given expression matches the "
"given type. At runtime it simply returns the received value. (Contributed by "
"Jelle Zijlstra in :gh:`90638`.)"
msgstr ""
"Добавьте :func:`typing.assert_type`. Это полезно, если попросить средство "
"проверки типов подтвердить, что тип, который он вывел для данного выражения, "
"соответствует данному типу. Во время выполнения он просто возвращает "
"полученное значение. (Предоставлено Джелле Зийлстра в :gh:`90638`.)"

#: ../../whatsnew/3.11.rst:1157
msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by Samodya "
"Abeysiriwardane in :gh:`89026`.)"
msgstr ""
"Типы :data:`typing.TypedDict` теперь могут быть универсальными. "
"(Предоставлено Самодья Абейсиривардане в :gh:`89026`.)"

#: ../../whatsnew/3.11.rst:1160
msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by Serhiy "
"Storchaka in :issue:`43923`.)"
msgstr ""
":class:`~typing.NamedTuple` типы теперь могут быть универсальными. "
"(Размещено Сергеем Сторчакой в ​​:issue:`43923`.)"

#: ../../whatsnew/3.11.rst:1163
msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding type "
"checker errors related to highly dynamic class, such as mocks. (Contributed "
"by Shantanu Jain in :gh:`91154`.)"
msgstr ""
"Разрешить создание подклассов :class:`typing.Any`. Это полезно для "
"предотвращения ошибок проверки типов, связанных с высокодинамичными "
"классами, такими как макеты. (Предоставлено Шантану Джайн в :gh:`91154`.)"

#: ../../whatsnew/3.11.rst:1167
msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed on "
"the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""
"Декоратор :func:`typing.final` теперь устанавливает атрибут __final__`` для "
"декорируемого объекта. (Предоставлено Джелле Зийлстра в :gh:`90500`.)"

#: ../../whatsnew/3.11.rst:1171
msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting the "
"overloads of a function. :func:`typing.clear_overloads` can be used to clear "
"all registered overloads of a function. (Contributed by Jelle Zijlstra in :"
"gh:`89263`.)"
msgstr ""
"Функцию :func:`typing.get_overloads` можно использовать для анализа "
"перегрузок функции. :func:`typing.clear_overloads` можно использовать для "
"очистки всех зарегистрированных перегрузок функции. (Предоставлено Джелле "
"Зийлстра в :gh:`89263`.)"

#: ../../whatsnew/3.11.rst:1176
msgid ""
"The :meth:`~object.__init__` method of :class:`~typing.Protocol` subclasses "
"is now preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""
"Метод :meth:`~object.__init__` подклассов :class:`~typing.Protocol` теперь "
"сохраняется. (Предоставлено Адрианом Гарсией Бадараско в :gh:`88970`.)"

#: ../../whatsnew/3.11.rst:1179
msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. This "
"affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to ``()`` "
"instead of ``((),)``. (Contributed by Serhiy Storchaka in :gh:`91137`.)"
msgstr ""
"Представление пустых типов кортежей (``Tuple[()]``) упрощено. Это влияет на "
"самоанализ, например, ``get_args(Tuple[()])`` теперь оценивается как ``()`` "
"вместо ``((),)``. (Предоставлено Сергеем Сторчакой в ​​:gh:`91137`.)"

#: ../../whatsnew/3.11.rst:1184
msgid ""
"Loosen runtime requirements for type annotations by removing the callable "
"check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""
"Ослабьте требования к аннотациям типов во время выполнения, удалив "
"вызываемую проверку в частной функции typing._type_check. (Предоставлено "
"Грегори Борегаром в :gh:`90802`.)"

#: ../../whatsnew/3.11.rst:1188
msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""
":func:`typing.get_type_hints` теперь поддерживает оценку строк как прямых "
"ссылок в :ref:`универсальных псевдонимах PEP 585 <types-genericalias>`. "
"(Предоставлено Никласом Розенштейном в :gh:`85542`.)"

#: ../../whatsnew/3.11.rst:1192
msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in :gh:"
"`90353`.)"
msgstr ""
":func:`typing.get_type_hints` больше не добавляет :data:`~typing.Optional` к "
"параметрам с ``None`` по умолчанию. (Добавлен Никитой Соболевым в :gh:"
"`90353`.)"

#: ../../whatsnew/3.11.rst:1196
msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified :data:"
"`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard in :gh:"
"`90711`.)"
msgstr ""
":func:`typing.get_type_hints` теперь поддерживает оценку простых строковых "
"аннотаций :data:`~typing.ClassVar`. (Предоставлено Грегори Борегаром в :gh:"
"`90711`.)"

#: ../../whatsnew/3.11.rst:1200
msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""
":func:`typing.no_type_check` больше не изменяет внешние классы и функции. "
"Кроме того, теперь методы класса правильно помечаются как не подлежащие "
"проверке типа. (Добавлен Никитой Соболевым в :gh:`90729`.)"

#: ../../whatsnew/3.11.rst:1208
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.11.rst:1210
msgid ""
"The Unicode database has been updated to version 14.0.0. (Contributed by "
"Benjamin Peterson in :issue:`45190`)."
msgstr ""
"База данных Unicode обновлена ​​до версии 14.0.0. (Предоставлено Бенджамином "
"Петерсоном в :issue:`45190`)."

#: ../../whatsnew/3.11.rst:1217
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.11.rst:1219
msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and :meth:`~unittest."
"TestCase.enterClassContext` of class :class:`~unittest.TestCase`, method :"
"meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class :class:"
"`~unittest.IsolatedAsyncioTestCase` and function :func:`unittest."
"enterModuleContext`. (Contributed by Serhiy Storchaka in :issue:`45046`.)"
msgstr ""
"Добавлены методы :meth:`~unittest.TestCase.enterContext` и :meth:`~unittest."
"TestCase.enterClassContext` класса :class:`~unittest.TestCase`, метод :meth:"
"`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` class :class:"
"`~unittest.IsolatedAsyncioTestCase` и функция :func:`unittest."
"enterModuleContext`. (Предоставлено Сергеем Сторчакой в ​​:issue:`45046`.)"

#: ../../whatsnew/3.11.rst:1231
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.11.rst:1233
msgid ""
"When new Python virtual environments are created, the *venv* :ref:`sysconfig "
"installation scheme <installation_paths>` is used to determine the paths "
"inside the environment. When Python runs in a virtual environment, the same "
"installation scheme is the default. That means that downstream distributors "
"can change the default sysconfig install scheme without changing behavior of "
"virtual environments. Third party code that also creates new virtual "
"environments should do the same. (Contributed by Miro Hrončok in :issue:"
"`45413`.)"
msgstr ""
"При создании новых виртуальных сред Python схема установки *venv* :ref:"
"`sysconfig <installation_paths>` используется для определения путей внутри "
"среды. Когда Python работает в виртуальной среде, по умолчанию используется "
"та же схема установки. Это означает, что нижестоящие дистрибьюторы могут "
"изменить схему установки sysconfig по умолчанию, не меняя при этом поведение "
"виртуальных сред. Сторонний код, который также создает новые виртуальные "
"среды, должен делать то же самое. (Предоставлено Миро Хрончок в :issue:"
"`45413`.)"

#: ../../whatsnew/3.11.rst:1247
msgid "warnings"
msgstr "предупреждения"

#: ../../whatsnew/3.11.rst:1249
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for :func:`warnings."
"simplefilter`, providing a more concise way to locally ignore warnings or "
"convert them to errors. (Contributed by Zac Hatfield-Dodds in :issue:"
"`47074`.)"
msgstr ""
":func:`warnings.catch_warnings` теперь принимает аргументы для :func:"
"`warnings.simplefilter`, предоставляя более лаконичный способ локального "
"игнорирования предупреждений или преобразования их в ошибки. (Предоставлено "
"Заком Хэтфилдом-Доддсом в :issue:`47074`.)"

#: ../../whatsnew/3.11.rst:1257
msgid "zipfile"
msgstr "zip-файл"

#: ../../whatsnew/3.11.rst:1259
msgid ""
"Added support for specifying member name encoding for reading metadata in a :"
"class:`~zipfile.ZipFile`'s directory and file headers. (Contributed by "
"Stephen J. Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""
"Добавлена ​​поддержка указания кодировки имени элемента для чтения метаданных "
"в каталоге :class:`~zipfile.ZipFile` и заголовках файлов. (Предоставлено "
"Стивеном Дж. Тернбуллом и Сергеем Сторчакой в ​​:issue:`28080`.)"

#: ../../whatsnew/3.11.rst:1263
msgid ""
"Added :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` for creating new "
"directories inside ZIP archives. (Contributed by Sam Ezeh in :gh:`49083`.)"
msgstr ""
"Добавлен :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` для создания новых "
"каталогов внутри ZIP-архивов. (Предоставлено Сэмом Эзэ в :gh:`49083`.)"

#: ../../whatsnew/3.11.rst:1267
msgid ""
"Added :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` and :attr:"
"`~zipfile.Path.suffixes` to :class:`zipfile.Path`. (Contributed by Miguel "
"Brito in :gh:`88261`.)"
msgstr ""
"Добавлены :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` и :attr:"
"`~zipfile.Path.suffixes` в :class:`zipfile.Path`. (Предоставлено Мигелем "
"Брито в :gh:`88261`.)"

#: ../../whatsnew/3.11.rst:1275
msgid "Optimizations"
msgstr "Оптимизации"

#: ../../whatsnew/3.11.rst:1277
msgid ""
"This section covers specific optimizations independent of the :ref:"
"`whatsnew311-faster-cpython` project, which is covered in its own section."
msgstr ""
"В этом разделе рассматриваются конкретные оптимизации, независимые от "
"проекта :ref:`whatsnew311-faster-cpython`, который рассматривается в "
"отдельном разделе."

#: ../../whatsnew/3.11.rst:1280
msgid ""
"The compiler now optimizes simple :ref:`printf-style % formatting <old-"
"string-formatting>` on string literals containing only the format codes "
"``%s``, ``%r`` and ``%a`` and makes it as fast as a corresponding :term:`f-"
"string` expression. (Contributed by Serhiy Storchaka in :issue:`28307`.)"
msgstr ""
"Компилятор теперь оптимизирует простое форматирование % в стиле printf <old-"
"string-formatting>` для строковых литералов, содержащих только коды формата "
"`` %s ``, ``%r`` и `` %а `` и делает это так же быстро, как соответствующее "
"выражение :term:`f-string`. (Предоставлено Сергеем Сторчакой в ​​:issue:"
"`28307`.)"

#: ../../whatsnew/3.11.rst:1286
msgid ""
"Integer division (``//``) is better tuned for optimization by compilers. It "
"is now around 20% faster on x86-64 when dividing an :class:`int` by a value "
"smaller than ``2**30``. (Contributed by Gregory P. Smith and Tim Peters in :"
"gh:`90564`.)"
msgstr ""
"Целочисленное деление (``//``) лучше приспособлено для оптимизации "
"компиляторами. Теперь на x86-64 скорость деления :class:`int` на значение "
"меньше ``2**30`` происходит примерно на 20 % быстрее. (Предоставлено Грегори "
"П. Смитом и Тимом Питерсом в :gh:`90564`.)"

#: ../../whatsnew/3.11.rst:1291
msgid ""
":func:`sum` is now nearly 30% faster for integers smaller than ``2**30``. "
"(Contributed by Stefan Behnel in :gh:`68264`.)"
msgstr ""
":func:`sum` теперь работает почти на 30% быстрее для целых чисел меньше "
"``2**30``. (Предоставлено Стефаном Бенелем в :gh:`68264`.)"

#: ../../whatsnew/3.11.rst:1294
msgid ""
"Resizing lists is streamlined for the common case, speeding up :meth:`list."
"append` by ≈15% and simple :term:`list comprehension`\\s by up to 20-30% "
"(Contributed by Dennis Sweeney in :gh:`91165`.)"
msgstr ""
"Изменение размера списков упрощено для обычных случаев: ускорение :meth:"
"`list.append` на ≈15% и простое :term:`list comprehension`\\s на 20-30% "
"(предоставлено Деннисом Суини в :gh: `91165`.)"

#: ../../whatsnew/3.11.rst:1299
msgid ""
"Dictionaries don't store hash values when all keys are Unicode objects, "
"decreasing :class:`dict` size. For example, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` is reduced from 352 bytes to 272 bytes (23% "
"smaller) on 64-bit platforms. (Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""
"Словари не хранят хеш-значения, если все ключи являются объектами Unicode, "
"что уменьшает размер :class:`dict`. Например, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` уменьшается с 352 байт до 272 байт (на 23% меньше) "
"на 64-битных платформах. (Предоставлено Инадой Наоки в :issue:`46845`.)"

#: ../../whatsnew/3.11.rst:1305
msgid ""
"Using :class:`asyncio.DatagramProtocol` is now orders of magnitude faster "
"when transferring large files over UDP, with speeds over 100 times higher "
"for a ≈60 MiB file. (Contributed by msoxzw in :gh:`91487`.)"
msgstr ""
"Использование :class:`asyncio.DatagramProtocol` теперь на несколько порядков "
"быстрее при передаче больших файлов по UDP: скорость более чем в 100 раз "
"выше для файла размером ≈60 МБ. (Предоставлено msoxzw в :gh:`91487`.)"

#: ../../whatsnew/3.11.rst:1310
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now ≈10 "
"times faster for large arguments (with a larger speedup for larger *k*). "
"(Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""
"Функции :mod:`math` :func:`~math.comb` и :func:`~math.perm` теперь работают "
"в ≈10 раз быстрее для больших аргументов (с большим ускорением для больших "
"*k*). (Предоставлено Сергеем Сторчакой в ​​:issue:`37295`.)"

#: ../../whatsnew/3.11.rst:1314
msgid ""
"The :mod:`statistics` functions :func:`~statistics.mean`, :func:`~statistics."
"variance` and :func:`~statistics.stdev` now consume iterators in one pass "
"rather than converting them to a :class:`list` first. This is twice as fast "
"and can save substantial memory. (Contributed by Raymond Hettinger in :gh:"
"`90415`.)"
msgstr ""
"Функции :mod:`statistics` :func:`~statistics.mean`, :func:`~statistics."
"variance` и :func:`~statistics.stdev` теперь обрабатывают итераторы за один "
"проход, а не преобразуют их в : class:`list` первым. Это в два раза быстрее "
"и позволяет сэкономить значительную часть памяти. (Предоставлено Рэймондом "
"Хеттингером в :gh:`90415`.)"

#: ../../whatsnew/3.11.rst:1320
msgid ""
":func:`unicodedata.normalize` now normalizes pure-ASCII strings in constant "
"time. (Contributed by Donghee Na in :issue:`44987`.)"
msgstr ""
":func:`unicodedata.normalize` теперь нормализует строки чистого ASCII за "
"постоянное время. (Предоставлено Донхи На в :issue:`44987`.)"

#: ../../whatsnew/3.11.rst:1328
msgid "Faster CPython"
msgstr "Более быстрый CPython"

#: ../../whatsnew/3.11.rst:1330
msgid ""
"CPython 3.11 is an average of `25% faster <https://github.com/faster-cpython/"
"ideas#published-results>`_ than CPython 3.10 as measured with the "
"`pyperformance <https://github.com/python/pyperformance>`_ benchmark suite, "
"when compiled with GCC on Ubuntu Linux. Depending on your workload, the "
"overall speedup could be 10-60%."
msgstr ""
"CPython 3.11 в среднем на `25 % быстрее <https://github.com/faster-cpython/"
"ideas#published-results>`_, чем CPython 3.10, согласно измерениям с помощью "
"`py Performance <https://github.com/python /py Performance>`_ набор тестов, "
"скомпилированный с помощью GCC в Ubuntu Linux. В зависимости от вашей "
"рабочей нагрузки общее ускорение может составлять 10–60%."

#: ../../whatsnew/3.11.rst:1337
msgid ""
"This project focuses on two major areas in Python: :ref:`whatsnew311-faster-"
"startup` and :ref:`whatsnew311-faster-runtime`. Optimizations not covered by "
"this project are listed separately under :ref:`whatsnew311-optimizations`."
msgstr ""
"Этот проект фокусируется на двух основных областях Python: :ref:`whatsnew311-"
"faster-startup` и :ref:`whatsnew311-faster-runtime`. Оптимизации, не "
"охваченные этим проектом, перечислены отдельно в разделе :ref:`whatsnew311-"
"optimizations`."

#: ../../whatsnew/3.11.rst:1346
msgid "Faster Startup"
msgstr "Более быстрый запуск"

#: ../../whatsnew/3.11.rst:1351
msgid "Frozen imports / Static code objects"
msgstr "Замороженный импорт/объекты статического кода"

#: ../../whatsnew/3.11.rst:1353
msgid ""
"Python caches :term:`bytecode` in the :ref:`__pycache__ <tut-pycache>` "
"directory to speed up module loading."
msgstr ""
"Python кэширует :term:`bytecode` в каталоге :ref:`__pycache__ <tut-pycache>` "
"для ускорения загрузки модуля."

#: ../../whatsnew/3.11.rst:1356
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr "Ранее в версии 3.10 выполнение модуля Python выглядело так:"

#: ../../whatsnew/3.11.rst:1358
msgid "Read __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate"
msgstr ""
"Прочитайте __pycache__ -> Демаршал -> Объект кода, выделенный в куче -> "
"Оценить"

#: ../../whatsnew/3.11.rst:1362
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their :ref:`codeobjects` (and bytecode) are "
"statically allocated by the interpreter. This reduces the steps in module "
"execution process to:"
msgstr ""
"В Python 3.11 основные модули, необходимые для запуска Python, «заморожены». "
"Это означает, что их объекты кода (и байт-код) статически выделяются "
"интерпретатором. Это сокращает этапы процесса выполнения модуля до:"

#: ../../whatsnew/3.11.rst:1367
msgid "Statically allocated code object -> Evaluate"
msgstr "Статически выделенный объект кода -> Оценить"

#: ../../whatsnew/3.11.rst:1371
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""
"Запуск интерпретатора в Python 3.11 теперь происходит на 10–15 % быстрее. "
"Это оказывает большое влияние на кратковременные программы, использующие "
"Python."

#: ../../whatsnew/3.11.rst:1374
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in many issues.)"
msgstr ""
"(Во многих выпусках предоставлено Эриком Сноу, Гвидо ван Россумом и Кумаром "
"Адитьей.)"

#: ../../whatsnew/3.11.rst:1380
msgid "Faster Runtime"
msgstr "Более быстрое время выполнения"

#: ../../whatsnew/3.11.rst:1385
msgid "Cheaper, lazy Python frames"
msgstr "Более дешевые и ленивые фреймы Python"

#: ../../whatsnew/3.11.rst:1387
msgid ""
"Python frames, holding execution information, are created whenever Python "
"calls a Python function. The following are new frame optimizations:"
msgstr ""
"Кадры Python, содержащие информацию о выполнении, создаются всякий раз, "
"когда Python вызывает функцию Python. Ниже приведены новые оптимизации "
"кадров:"

#: ../../whatsnew/3.11.rst:1391
msgid "Streamlined the frame creation process."
msgstr "Оптимизирован процесс создания кадра."

#: ../../whatsnew/3.11.rst:1392
msgid ""
"Avoided memory allocation by generously re-using frame space on the C stack."
msgstr ""
"Распределения памяти удалось избежать за счет повторного использования "
"пространства кадров в стеке C."

#: ../../whatsnew/3.11.rst:1393
msgid ""
"Streamlined the internal frame struct to contain only essential information. "
"Frames previously held extra debugging and memory management information."
msgstr ""
"Оптимизирована внутренняя структура фрейма, чтобы она содержала только "
"важную информацию. Раньше фреймы содержали дополнительную информацию об "
"отладке и управлении памятью."

#: ../../whatsnew/3.11.rst:1396
msgid ""
"Old-style :ref:`frame objects <frame-objects>` are now created only when "
"requested by debuggers or by Python introspection functions such as :func:"
"`sys._getframe` and :func:`inspect.currentframe`. For most user code, no "
"frame objects are created at all. As a result, nearly all Python functions "
"calls have sped up significantly. We measured a 3-7% speedup in "
"pyperformance."
msgstr ""
":ref:`frame-объекты <frame-objects>` старого стиля теперь создаются только "
"по запросу отладчиков или функций интроспекции Python, таких как :func:`sys."
"_getframe` и :func:`inspect.currentframe`. Для большей части "
"пользовательского кода объекты фреймов вообще не создаются. В результате "
"почти все вызовы функций Python значительно ускорились. Мы зафиксировали "
"увеличение производительности py на 3–7 %."

#: ../../whatsnew/3.11.rst:1403
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr "(Предоставлено Марком Шенноном в :issue:`44590`.)"

#: ../../whatsnew/3.11.rst:1410
msgid "Inlined Python function calls"
msgstr "Встроенные вызовы функций Python"

#: ../../whatsnew/3.11.rst:1412
msgid ""
"During a Python function call, Python will call an evaluating C function to "
"interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""
"Во время вызова функции Python Python вызывает оценивающую функцию C для "
"интерпретации кода этой функции. Это эффективно ограничивает чистую рекурсию "
"Python до уровня, безопасного для стека C."

#: ../../whatsnew/3.11.rst:1416
msgid ""
"In 3.11, when CPython detects Python code calling another Python function, "
"it sets up a new frame, and \"jumps\" to the new code inside the new frame. "
"This avoids calling the C interpreting function altogether."
msgstr ""
"В версии 3.11, когда CPython обнаруживает код Python, вызывающий другую "
"функцию Python, он устанавливает новый фрейм и «переходит» к новому коду "
"внутри нового фрейма. Это вообще позволяет избежать вызова функции "
"интерпретации C."

#: ../../whatsnew/3.11.rst:1420
msgid ""
"Most Python function calls now consume no C stack space, speeding them up. "
"In simple recursive functions like fibonacci or factorial, we observed a "
"1.7x speedup. This also means recursive functions can recurse significantly "
"deeper (if the user increases the recursion limit with :func:`sys."
"setrecursionlimit`). We measured a 1-3% improvement in pyperformance."
msgstr ""
"Большинство вызовов функций Python теперь не занимают пространство стека C, "
"что ускоряет их выполнение. В простых рекурсивных функциях, таких как числа "
"Фибоначчи или факториал, мы наблюдали ускорение в 1,7 раза. Это также "
"означает, что рекурсивные функции могут выполняться значительно глубже (если "
"пользователь увеличивает предел рекурсии с помощью :func:`sys."
"setrecursionlimit`). Мы зафиксировали улучшение производительности py на 1–"
"3%."

#: ../../whatsnew/3.11.rst:1427
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr "(Предоставлено Пабло Галиндо и Марком Шенноном в :issue:`45256`.)"

#: ../../whatsnew/3.11.rst:1433
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr "PEP 659: Специализированный адаптивный интерпретатор"

#: ../../whatsnew/3.11.rst:1435
msgid ""
":pep:`659` is one of the key parts of the Faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""
":pep:`659` — одна из ключевых частей проекта Faster CPython. Общая идея "
"заключается в том, что, хотя Python является динамическим языком, в большей "
"части кода есть области, в которых объекты и типы изменяются редко. Эта "
"концепция известна как *стабильность типов*."

#: ../../whatsnew/3.11.rst:1439
msgid ""
"At runtime, Python will try to look for common patterns and type stability "
"in the executing code. Python will then replace the current operation with a "
"more specialized one. This specialized operation uses fast paths available "
"only to those use cases/types, which generally outperform their generic "
"counterparts. This also brings in another concept called *inline caching*, "
"where Python caches the results of expensive operations directly in the :"
"term:`bytecode`."
msgstr ""
"Во время выполнения Python пытается найти общие шаблоны и стабильность типов "
"в исполняемом коде. Затем Python заменит текущую операцию более "
"специализированной. Эта специализированная операция использует быстрые пути, "
"доступные только для тех вариантов/типов использования, которые обычно "
"превосходят свои общие аналоги. Это также приводит к появлению другой "
"концепции, называемой *встроенным кэшированием*, где Python кэширует "
"результаты дорогостоящих операций непосредственно в :term:`bytecode`."

#: ../../whatsnew/3.11.rst:1447
msgid ""
"The specializer will also combine certain common instruction pairs into one "
"superinstruction, reducing the overhead during execution."
msgstr ""
"Специалист также объединит некоторые общие пары инструкций в одну "
"суперинструкцию, уменьшая накладные расходы во время выполнения."

#: ../../whatsnew/3.11.rst:1450
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time on run-once code. "
"Python can also de-specialize when code is too dynamic or when the use "
"changes. Specialization is attempted periodically, and specialization "
"attempts are not too expensive, allowing specialization to adapt to new "
"circumstances."
msgstr ""
"Python будет специализироваться только тогда, когда увидит «горячий» код "
"(выполняемый несколько раз). Это не позволяет Python тратить время на "
"однократный запуск кода. Python также может отказаться от специализации, "
"когда код слишком динамичен или когда меняется использование. Периодически "
"предпринимаются попытки специализации, и попытки специализации не слишком "
"дороги, что позволяет специализации адаптироваться к новым обстоятельствам."

#: ../../whatsnew/3.11.rst:1457
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See :"
"pep:`659` for more information. Implementation by Mark Shannon and Brandt "
"Bucher, with additional help from Irit Katriel and Dennis Sweeney.)"
msgstr ""
"(PEP написан Марком Шенноном, идеи вдохновлены Стефаном Брунталером. "
"Дополнительную информацию см. в :pep:`659`. Реализация Марка Шеннона и "
"Брандта Бухера при дополнительной помощи Ирит Катриэль и Денниса Суини.)"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation"
msgstr "Операция"

#: ../../whatsnew/3.11.rst:1465
msgid "Form"
msgstr "Форма"

#: ../../whatsnew/3.11.rst:1465
msgid "Specialization"
msgstr "Специализация"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation speedup (up to)"
msgstr "Ускорение работы (до)"

#: ../../whatsnew/3.11.rst:1465
msgid "Contributor(s)"
msgstr "Автор(ы)"

#: ../../whatsnew/3.11.rst:1468
msgid "Binary operations"
msgstr "Бинарные операции"

#: ../../whatsnew/3.11.rst:1468
msgid "``x + x``"
msgstr "``x + x``"

#: ../../whatsnew/3.11.rst:1470
msgid "``x - x``"
msgstr "``x - x``"

#: ../../whatsnew/3.11.rst:1472
msgid "``x * x``"
msgstr "``x * x``"

#: ../../whatsnew/3.11.rst:1468
msgid ""
"Binary add, multiply and subtract for common types such as :class:`int`, :"
"class:`float` and :class:`str` take custom fast paths for their underlying "
"types."
msgstr ""
"Двоичное сложение, умножение и вычитание для распространенных типов, таких "
"как :class:`int`, :class:`float` и :class:`str`, используют собственные "
"быстрые пути для своих базовых типов."

#: ../../whatsnew/3.11.rst:1468
msgid "10%"
msgstr "10%"

#: ../../whatsnew/3.11.rst:1468
msgid "Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney"
msgstr "Марк Шеннон, Донхи На, Брандт Бучер, Деннис Суини"

#: ../../whatsnew/3.11.rst:1474
msgid "Subscript"
msgstr "Индекс"

#: ../../whatsnew/3.11.rst:1474
msgid "``a[i]``"
msgstr "``a[i]``"

#: ../../whatsnew/3.11.rst:1474
msgid ""
"Subscripting container types such as :class:`list`, :class:`tuple` and :"
"class:`dict` directly index the underlying data structures."
msgstr ""
"Подписывающиеся типы контейнеров, такие как :class:`list`, :class:`tuple` и :"
"class:`dict`, напрямую индексируют базовые структуры данных."

#: ../../whatsnew/3.11.rst:1478
msgid ""
"Subscripting custom :meth:`~object.__getitem__` is also inlined similar to :"
"ref:`inline-calls`."
msgstr ""
"Пользовательская подписка :meth:`~object.__getitem__` также встраивается "
"аналогично :ref:`inline-calls`."

#: ../../whatsnew/3.11.rst:1474 ../../whatsnew/3.11.rst:1481
msgid "10-25%"
msgstr "10-25%"

#: ../../whatsnew/3.11.rst:1474
msgid "Irit Katriel, Mark Shannon"
msgstr "Ирит Катриэль, Марк Шеннон"

#: ../../whatsnew/3.11.rst:1481
msgid "Store subscript"
msgstr "Индекс хранилища"

#: ../../whatsnew/3.11.rst:1481
msgid "``a[i] = z``"
msgstr "``a[i] = z``"

#: ../../whatsnew/3.11.rst:1481
msgid "Similar to subscripting specialization above."
msgstr "Аналогично подписной специализации, описанной выше."

#: ../../whatsnew/3.11.rst:1481
msgid "Dennis Sweeney"
msgstr "Деннис Суини"

#: ../../whatsnew/3.11.rst:1484
msgid "Calls"
msgstr "Звонки"

#: ../../whatsnew/3.11.rst:1484
msgid "``f(arg)``"
msgstr "``f(arg)``"

#: ../../whatsnew/3.11.rst:1486
msgid "``C(arg)``"
msgstr "``C(arg)``"

#: ../../whatsnew/3.11.rst:1484
msgid ""
"Calls to common builtin (C) functions and types such as :func:`len` and :"
"class:`str` directly call their underlying C version. This avoids going "
"through the internal calling convention."
msgstr ""
"Вызовы общих встроенных (C) функций и типов, таких как :func:`len` и :class:"
"`str`, напрямую вызывают их базовую версию C. Это позволяет избежать "
"внутреннего соглашения о вызовах."

#: ../../whatsnew/3.11.rst:1484
msgid "20%"
msgstr "20%"

#: ../../whatsnew/3.11.rst:1484
msgid "Mark Shannon, Ken Jin"
msgstr "Марк Шеннон, Кен Джин"

#: ../../whatsnew/3.11.rst:1489
msgid "Load global variable"
msgstr "Загрузить глобальную переменную"

#: ../../whatsnew/3.11.rst:1489
msgid "``print``"
msgstr "``print``"

#: ../../whatsnew/3.11.rst:1491
msgid "``len``"
msgstr "``len``"

#: ../../whatsnew/3.11.rst:1489
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""
"Индекс объекта в пространстве имен globals/builtins кэшируется. Загрузка "
"глобальных и встроенных переменных не требует поиска в пространстве имен."

#: ../../whatsnew/3.11.rst:1489
msgid "[#load-global]_"
msgstr "[#load-global]_"

#: ../../whatsnew/3.11.rst:1489 ../../whatsnew/3.11.rst:1493
#: ../../whatsnew/3.11.rst:1502
msgid "Mark Shannon"
msgstr "Марк Шеннон"

#: ../../whatsnew/3.11.rst:1493
msgid "Load attribute"
msgstr "Загрузить атрибут"

#: ../../whatsnew/3.11.rst:1493
msgid "``o.attr``"
msgstr "``o.attr``"

#: ../../whatsnew/3.11.rst:1493
msgid ""
"Similar to loading global variables. The attribute's index inside the class/"
"object's namespace is cached. In most cases, attribute loading will require "
"zero namespace lookups."
msgstr ""
"Аналогично загрузке глобальных переменных. Индекс атрибута внутри "
"пространства имен класса/объекта кэшируется. В большинстве случаев загрузка "
"атрибутов не потребует поиска в пространстве имен."

#: ../../whatsnew/3.11.rst:1493
msgid "[#load-attr]_"
msgstr "[#load-attr]_"

#: ../../whatsnew/3.11.rst:1498
msgid "Load methods for call"
msgstr "Загрузить методы для вызова"

#: ../../whatsnew/3.11.rst:1498
msgid "``o.meth()``"
msgstr "``o.meth()``"

#: ../../whatsnew/3.11.rst:1498
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""
"Фактический адрес метода кэшируется. Загрузка метода теперь не требует "
"поиска в пространстве имен — даже для классов с длинными цепочками "
"наследования."

#: ../../whatsnew/3.11.rst:1498
msgid "10-20%"
msgstr "10-20%"

#: ../../whatsnew/3.11.rst:1498
msgid "Ken Jin, Mark Shannon"
msgstr "Кен Джин, Марк Шеннон"

#: ../../whatsnew/3.11.rst:1502
msgid "Store attribute"
msgstr "Атрибут магазина"

#: ../../whatsnew/3.11.rst:1502
msgid "``o.attr = z``"
msgstr "``o.attr = z``"

#: ../../whatsnew/3.11.rst:1502
msgid "Similar to load attribute optimization."
msgstr "Аналогично оптимизации атрибутов загрузки."

#: ../../whatsnew/3.11.rst:1502
msgid "2% in pyperformance"
msgstr "2 % в производительности"

#: ../../whatsnew/3.11.rst:1505
msgid "Unpack Sequence"
msgstr "Распаковать последовательность"

#: ../../whatsnew/3.11.rst:1505
msgid "``*seq``"
msgstr "``*seq``"

#: ../../whatsnew/3.11.rst:1505
msgid ""
"Specialized for common containers such as :class:`list` and :class:`tuple`. "
"Avoids internal calling convention."
msgstr ""
"Специализируется на распространенных контейнерах, таких как :class:`list` и :"
"class:`tuple`. Избегает внутреннего соглашения о вызовах."

#: ../../whatsnew/3.11.rst:1505
msgid "8%"
msgstr "8%"

#: ../../whatsnew/3.11.rst:1505
msgid "Brandt Bucher"
msgstr "Брандт Бухер"

#: ../../whatsnew/3.11.rst:1510
msgid ""
"A similar optimization already existed since Python 3.8. 3.11 specializes "
"for more forms and reduces some overhead."
msgstr ""
"Подобная оптимизация существовала еще начиная с Python 3.8. Версия 3.11 "
"специализируется на большем количестве форм и снижает некоторые накладные "
"расходы."

#: ../../whatsnew/3.11.rst:1513
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 specializes "
"for more forms. Furthermore, all attribute loads should be sped up by :issue:"
"`45947`."
msgstr ""
"Подобная оптимизация существовала еще начиная с Python 3.10. 3.11 "
"специализируется на большем количестве форм. Более того, загрузка всех "
"атрибутов должна быть ускорена с помощью :issue:`45947`."

#: ../../whatsnew/3.11.rst:1521
msgid "Misc"
msgstr "Разное"

#: ../../whatsnew/3.11.rst:1523
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. (Contributed "
"Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""
"Объекты теперь требуют меньше памяти из-за ленивого создания пространств "
"имен объектов. Их словари пространств имен теперь также более свободно "
"делятся ключами. (Внес вклад Марка Шеннона в :issue:`45340` и :issue:"
"`40116`.)"

#: ../../whatsnew/3.11.rst:1527
msgid ""
"\"Zero-cost\" exceptions are implemented, eliminating the cost of :keyword:"
"`try` statements when no exception is raised. (Contributed by Mark Shannon "
"in :issue:`40222`.)"
msgstr ""
"Реализованы исключения с «нулевой стоимостью», что исключает затраты на "
"операторы :keyword:`try`, когда исключение не возникает. (Предоставлено "
"Марком Шенноном в :issue:`40222`.)"

#: ../../whatsnew/3.11.rst:1531
msgid ""
"A more concise representation of exceptions in the interpreter reduced the "
"time required for catching an exception by about 10%. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""
"Более краткое представление исключений в интерпретаторе сократило время "
"перехвата исключения примерно на 10%. (Внесено Ирит Катриэль в :issue:"
"`45711`.)"

#: ../../whatsnew/3.11.rst:1535
msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on supported "
"platforms. As a result, Python 3.11 executes the `pyperformance regular "
"expression benchmarks <https://pyperformance.readthedocs.io/benchmarks."
"html#regex-dna>`_ up to 10% faster than Python 3.10. (Contributed by Brandt "
"Bucher in :gh:`91404`.)"
msgstr ""
"Механизм сопоставления регулярных выражений :mod:`re` был частично "
"переработан и теперь использует вычисленные методы перехода (или «поточный "
"код») на поддерживаемых платформах. В результате Python 3.11 выполняет "
"`тесты регулярных выражений py Performance <https://py Performance."
"readthedocs.io/benchmarks.html#regex-dna>`_ до 10 % быстрее, чем Python "
"3.10. (Предоставлено Брандтом Бухером в :gh:`91404`.)"

#: ../../whatsnew/3.11.rst:1546
msgid "FAQ"
msgstr "Часто задаваемые вопросы"

#: ../../whatsnew/3.11.rst:1551
msgid "How should I write my code to utilize these speedups?"
msgstr "Как мне написать код, чтобы использовать эти ускорения?"

#: ../../whatsnew/3.11.rst:1553
msgid ""
"Write Pythonic code that follows common best practices; you don't have to "
"change your code. The Faster CPython project optimizes for common code "
"patterns we observe."
msgstr ""
"Напишите код Pythonic, соответствующий общепринятым передовым практикам; вам "
"не нужно менять свой код. Проект Faster CPython оптимизируется под общие "
"шаблоны кода, которые мы наблюдаем."

#: ../../whatsnew/3.11.rst:1561
msgid "Will CPython 3.11 use more memory?"
msgstr "Будет ли CPython 3.11 использовать больше памяти?"

#: ../../whatsnew/3.11.rst:1563
msgid ""
"Maybe not; we don't expect memory use to exceed 20% higher than 3.10. This "
"is offset by memory optimizations for frame objects and object dictionaries "
"as mentioned above."
msgstr ""
"Может быть, и нет; мы не ожидаем, что использование памяти превысит 20% от "
"уровня 3.10. Это компенсируется оптимизацией памяти для объектов фреймов и "
"словарей объектов, как упоминалось выше."

#: ../../whatsnew/3.11.rst:1571
msgid "I don't see any speedups in my workload. Why?"
msgstr "Я не вижу никакого ускорения в своей работе. Почему?"

#: ../../whatsnew/3.11.rst:1573
msgid ""
"Certain code won't have noticeable benefits. If your code spends most of its "
"time on I/O operations, or already does most of its computation in a C "
"extension library like NumPy, there won't be significant speedups. This "
"project currently benefits pure-Python workloads the most."
msgstr ""
"Определенный код не будет иметь заметных преимуществ. Если ваш код тратит "
"большую часть своего времени на операции ввода-вывода или уже выполняет "
"большую часть своих вычислений в библиотеке расширений C, такой как NumPy, "
"существенного ускорения не будет. В настоящее время этот проект приносит "
"наибольшую пользу рабочим нагрузкам на чистом Python."

#: ../../whatsnew/3.11.rst:1578
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within the "
"pyperformance benchmarks, certain benchmarks have slowed down slightly, "
"while others have sped up by nearly 2x!"
msgstr ""
"Более того, показатели py Performance представляют собой среднее "
"геометрическое. Даже в тестах py Performance некоторые тесты немного "
"замедлились, в то время как другие ускорились почти в 2 раза!"

#: ../../whatsnew/3.11.rst:1586
msgid "Is there a JIT compiler?"
msgstr "Есть ли JIT-компилятор?"

#: ../../whatsnew/3.11.rst:1588
msgid "No. We're still exploring other optimizations."
msgstr "Нет. Мы все еще изучаем другие варианты оптимизации."

#: ../../whatsnew/3.11.rst:1594
msgid "About"
msgstr "О"

#: ../../whatsnew/3.11.rst:1596
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team is "
"funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also "
"funded by Bloomberg LP to work on the project part-time. Finally, many "
"contributors are volunteers from the community."
msgstr ""
"Faster CPython исследует возможности оптимизации для :term:`CPython`. "
"Основная команда финансируется Microsoft для работы над этим на постоянной "
"основе. Пабло Галиндо Сальгадо также финансируется Bloomberg LP для работы "
"над проектом на неполный рабочий день. Наконец, многие участники — волонтеры "
"сообщества."

#: ../../whatsnew/3.11.rst:1605
msgid "CPython bytecode changes"
msgstr "Изменения в байт-коде CPython"

#: ../../whatsnew/3.11.rst:1607
msgid ""
"The bytecode now contains inline cache entries, which take the form of the "
"newly-added :opcode:`CACHE` instructions. Many opcodes expect to be followed "
"by an exact number of caches, and instruct the interpreter to skip over them "
"at runtime. Populated caches can look like arbitrary instructions, so great "
"care should be taken when reading or modifying raw, adaptive bytecode "
"containing quickened data."
msgstr ""
"Байт-код теперь содержит встроенные записи кэша, которые принимают форму "
"недавно добавленных инструкций :opcode:`CACHE`. Многие коды операций "
"ожидают, что за ними последует точное количество кэшей, и инструктируют "
"интерпретатор пропустить их во время выполнения. Заполненные кэши могут "
"выглядеть как произвольные инструкции, поэтому следует проявлять особую "
"осторожность при чтении или изменении необработанного адаптивного байт-кода, "
"содержащего ускоренные данные."

#: ../../whatsnew/3.11.rst:1619
msgid "New opcodes"
msgstr "Новые коды операций"

#: ../../whatsnew/3.11.rst:1621
msgid ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` and :opcode:`SEND`, "
"used in generators and co-routines."
msgstr ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` и :opcode:`SEND`, "
"используемые в генераторах и сопрограммах."

#: ../../whatsnew/3.11.rst:1624
msgid ""
":opcode:`COPY_FREE_VARS`, which avoids needing special caller-side code for "
"closures."
msgstr ""
":opcode:`COPY_FREE_VARS`, что позволяет избежать необходимости использования "
"специального кода на стороне вызывающей стороны для замыканий."

#: ../../whatsnew/3.11.rst:1627
msgid ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, for use in certain loops where "
"handling interrupts is undesirable."
msgstr ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, для использования в определенных "
"циклах, где обработка прерываний нежелательна."

#: ../../whatsnew/3.11.rst:1630
msgid ":opcode:`MAKE_CELL`, to create :ref:`cell-objects`."
msgstr ":opcode:`MAKE_CELL`, для создания :ref:`cell-objects`."

#: ../../whatsnew/3.11.rst:1632
msgid ""
":opcode:`CHECK_EG_MATCH`  and  :opcode:`!PREP_RERAISE_STAR`, to handle the :"
"ref:`new exception groups and except* <whatsnew311-pep654>` added in :pep:"
"`654`."
msgstr ""
":opcode:`CHECK_EG_MATCH` и :opcode:`!PREP_RERAISE_STAR`, для обработки :ref:"
"`новых групп исключений и исключений* <whatsnew311-pep654>`, добавленных в :"
"pep:`654`."

#: ../../whatsnew/3.11.rst:1636
msgid ":opcode:`PUSH_EXC_INFO`, for use in exception handlers."
msgstr ":opcode:`PUSH_EXC_INFO`, для использования в обработчиках исключений."

#: ../../whatsnew/3.11.rst:1638
msgid ""
":opcode:`RESUME`, a no-op, for internal tracing, debugging and optimization "
"checks."
msgstr ""
":opcode:`RESUME`, неактивный файл для внутренней трассировки, отладки и "
"проверок оптимизации."

#: ../../whatsnew/3.11.rst:1645
msgid "Replaced opcodes"
msgstr "Заменены коды операций"

#: ../../whatsnew/3.11.rst:1648
msgid "Replaced Opcode(s)"
msgstr "Замененные коды операций"

#: ../../whatsnew/3.11.rst:1648
msgid "New Opcode(s)"
msgstr "Новые коды операций"

#: ../../whatsnew/3.11.rst:1648
msgid "Notes"
msgstr "Примечания"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!BINARY_*`"
msgstr ":opcode:`!BINARY_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!INPLACE_*`"
msgstr ":opcode:`!INPLACE_*`"

#: ../../whatsnew/3.11.rst:1650
msgid ":opcode:`BINARY_OP`"
msgstr ":opcode:`BINARY_OP`"

#: ../../whatsnew/3.11.rst:1650
msgid "Replaced all numeric binary/in-place opcodes with a single opcode"
msgstr ""
"Заменены все числовые двоичные/местные коды операций на один код операции."

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION`"
msgstr ":opcode:`!CALL_FUNCTION`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION_KW`"
msgstr ":opcode:`!CALL_FUNCTION_KW`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_METHOD`"
msgstr ":opcode:`!CALL_METHOD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CALL`"
msgstr ":opcode:`CALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!KW_NAMES`"
msgstr ":opcode:`!KW_NAMES`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!PRECALL`"
msgstr ":opcode:`!PRECALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`PUSH_NULL`"
msgstr ":opcode:`PUSH_NULL`"

#: ../../whatsnew/3.11.rst:1653
msgid ""
"Decouples argument shifting for methods from handling of keyword arguments; "
"allows better specialization of calls"
msgstr ""
"Отделяет сдвиг аргументов для методов от обработки аргументов ключевых слов; "
"позволяет лучше специализировать вызовы"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP`"
msgstr ":opcode:`!DUP_TOP`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP_TWO`"
msgstr ":opcode:`!DUP_TOP_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_TWO`"
msgstr ":opcode:`!ROT_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_THREE`"
msgstr ":opcode:`!ROT_THREE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_FOUR`"
msgstr ":opcode:`!ROT_FOUR`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_N`"
msgstr ":opcode:`!ROT_N`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`COPY`"
msgstr ":opcode:`COPY`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`SWAP`"
msgstr ":opcode:`SWAP`"

#: ../../whatsnew/3.11.rst:1658
msgid "Stack manipulation instructions"
msgstr "Инструкции по работе со стеком"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"
msgstr ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CHECK_EXC_MATCH`"
msgstr ":opcode:`CHECK_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:1665
msgid "Now performs check but doesn't jump"
msgstr "Теперь выполняет проверку, но не прыгает"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_ABSOLUTE`"
msgstr ":opcode:`!JUMP_ABSOLUTE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_FALSE`"
msgstr ":opcode:`!POP_JUMP_IF_FALSE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_TRUE`"
msgstr ":opcode:`!POP_JUMP_IF_TRUE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`JUMP_BACKWARD`"
msgstr ":opcode:`JUMP_BACKWARD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_BACKWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_BACKWARD_IF_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_FORWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_FORWARD_IF_*`"

#: ../../whatsnew/3.11.rst:1667
msgid ""
"See [#bytecode-jump]_; ``TRUE``, ``FALSE``, ``NONE`` and ``NOT_NONE`` "
"variants for each direction"
msgstr ""
"см. [#bytecode-jump]_ ; Варианты ``TRUE``, ``FALSE``, ``NONE`` и "
"``NOT_NONE`` для каждого направления"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_WITH`"
msgstr ":opcode:`!SETUP_WITH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_ASYNC_WITH`"
msgstr ":opcode:`!SETUP_ASYNC_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":opcode:`BEFORE_WITH`"
msgstr ":opcode:`BEFORE_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":keyword:`with` block setup"
msgstr ":keyword:`с` настройкой блока"

#: ../../whatsnew/3.11.rst:1677
msgid ""
"All jump opcodes are now relative, including the existing :opcode:`!"
"JUMP_IF_TRUE_OR_POP` and :opcode:`!JUMP_IF_FALSE_OR_POP`. The argument is "
"now an offset from the current instruction rather than an absolute location."
msgstr ""
"Все коды операций перехода теперь являются относительными, включая "
"существующие :opcode:`!JUMP_IF_TRUE_OR_POP` и :opcode:`!"
"JUMP_IF_FALSE_OR_POP`. Аргумент теперь представляет собой смещение от "
"текущей инструкции, а не абсолютное местоположение."

#: ../../whatsnew/3.11.rst:1688
msgid "Changed/removed opcodes"
msgstr "Изменены/удалены коды операций"

#: ../../whatsnew/3.11.rst:1690
msgid ""
"Changed :opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` to no longer push an "
"additional boolean value to indicate success/failure. Instead, ``None`` is "
"pushed on failure in place of the tuple of extracted values."
msgstr ""
"Изменены :opcode:`MATCH_CLASS` и :opcode:`MATCH_KEYS`, чтобы больше не "
"вводить дополнительное логическое значение для указания успеха/неудачи. "
"Вместо этого в случае сбоя вместо кортежа извлеченных значений выдается "
"``None``."

#: ../../whatsnew/3.11.rst:1695
msgid ""
"Changed opcodes that work with exceptions to reflect them now being "
"represented as one item on the stack instead of three (see :gh:`89874`)."
msgstr ""
"Изменены коды операций, которые работают с исключениями, чтобы они теперь "
"представлялись как один элемент в стеке вместо трех (см. :gh:`89874`)."

#: ../../whatsnew/3.11.rst:1699
msgid ""
"Removed :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, :opcode:`!"
"POP_BLOCK`, :opcode:`!SETUP_FINALLY` and :opcode:`!YIELD_FROM`."
msgstr ""
"Удалены :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, :opcode:`!"
"POP_BLOCK`, :opcode:`!SETUP_FINALLY` и :opcode:`!YIELD_FROM`."

#: ../../whatsnew/3.11.rst:1707 ../../whatsnew/3.11.rst:2580
msgid "Deprecated"
msgstr "Устарел"

#: ../../whatsnew/3.11.rst:1709
msgid ""
"This section lists Python APIs that have been deprecated in Python 3.11."
msgstr "В этом разделе перечислены API Python, которые устарели в Python 3.11."

#: ../../whatsnew/3.11.rst:1711
msgid ""
"Deprecated C APIs are :ref:`listed separately <whatsnew311-c-api-"
"deprecated>`."
msgstr "Устаревшие API C перечислены отдельно <whatsnew311-c-api-deprecated>`."

#: ../../whatsnew/3.11.rst:1718
msgid "Language/Builtins"
msgstr "Язык/Встроенные функции"

#: ../../whatsnew/3.11.rst:1720
msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) is "
"now deprecated.  It can no longer be used to wrap other descriptors such as :"
"class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the :attr:`!__wrapped__` attribute that was added in Python "
"3.10. (Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"Объединение дескрипторов :class:`classmethod` (представленное в :issue:"
"`19072`) теперь устарело. Его больше нельзя использовать для обертывания "
"других дескрипторов, таких как :class:`property`. Базовая конструкция этой "
"функции была ошибочной и вызвала ряд последующих проблем. Чтобы "
"«пропустить» :class:`classmethod`, рассмотрите возможность использования "
"атрибута :attr:`!__wrapped__`, который был добавлен в Python 3.10. "
"(Предоставлено Рэймондом Хеттингером в :gh:`89519`.)"

#: ../../whatsnew/3.11.rst:1728
msgid ""
"Octal escapes in string and bytes literals with values larger than ``0o377`` "
"(255 in decimal) now produce a :exc:`DeprecationWarning`. In a future Python "
"version, they will raise a :exc:`SyntaxWarning` and eventually a :exc:"
"`SyntaxError`. (Contributed by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""
"Восьмеричные escape-последовательности в строковых и байтовых литералах со "
"значениями больше 0o377 (255 в десятичном формате) теперь создают :exc:"
"`DeprecationWarning`. В будущей версии Python они вызовут :exc:"
"`SyntaxWarning` и, в конечном итоге, :exc:`SyntaxError`. (Предоставлено "
"Сергеем Сторчакой в ​​:gh:`81548`.)"

#: ../../whatsnew/3.11.rst:1734
msgid ""
"The delegation of :func:`int` to :meth:`~object.__trunc__` is now "
"deprecated. Calling ``int(a)`` when ``type(a)`` implements :meth:`!"
"__trunc__` but not :meth:`~object.__int__` or :meth:`~object.__index__` now "
"raises a :exc:`DeprecationWarning`. (Contributed by Zackery Spytz in :issue:"
"`44977`.)"
msgstr ""
"Делегирование :func:`int` :meth:`~object.__trunc__` теперь устарело. Вызов "
"``int(a)``, когда ``type(a)`` реализует :meth:`!__trunc__`, но не :meth:"
"`~object.__int__` или :meth:`~object.__index__`, теперь вызывает :exc:"
"`DeprecationWarning`. (Предоставлено Закери Шпитцем в :issue:`44977`.)"

#: ../../whatsnew/3.11.rst:1744
msgid "Modules"
msgstr "Модули"

#: ../../whatsnew/3.11.rst:1748
msgid ""
":pep:`594` led to the deprecations of the following modules slated for "
"removal in Python 3.13:"
msgstr ""
":pep:`594` привел к прекращению поддержки следующих модулей, которые "
"планируется удалить из Python 3.13:"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`aifc`"
msgstr ":mod:`aifc`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`chunk`"
msgstr ":mod:`chunk`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`msilib`"
msgstr ":mod:`msilib`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`pipes`"
msgstr ":mod:`pipes`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`telnetlib`"
msgstr ":mod:`telnetlib`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`audioop`"
msgstr ":mod:`audioop`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`crypt`"
msgstr ":mod:`crypt`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`nis`"
msgstr ":mod:`nis`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`sndhdr`"
msgstr ":mod:`sndhdr`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`uu`"
msgstr ":mod:`uu`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`cgi`"
msgstr ":mod:`cgi`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`imghdr`"
msgstr ":mod:`imghdr`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`nntplib`"
msgstr ":mod:`nntplib`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`spwd`"
msgstr ":mod:`spwd`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`xdrlib`"
msgstr ":mod:`xdrlib`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`cgitb`"
msgstr ":mod:`cgitb`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`mailcap`"
msgstr ":mod:`mailcap`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`ossaudiodev`"
msgstr ":mod:`ossaudiodev`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`sunau`"
msgstr ":mod:`sunau`"

#: ../../whatsnew/3.11.rst:1761
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in :gh:"
"`68966`.)"
msgstr ""
"(Предоставлено Бреттом Кэнноном в :issue:`47061` и Виктором Стиннером в :gh:"
"`68966`.)"

#: ../../whatsnew/3.11.rst:1764
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore` and  :mod:`!smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation "
"warnings have now been updated to note they will be removed in Python 3.12. "
"(Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""
"Модули :mod:`!asynchat`, :mod:`!asyncore` и :mod:`!smtpd` устарели, по "
"крайней мере, начиная с версии Python 3.6. Их документация и предупреждения "
"об устаревании теперь обновлены, чтобы отметить, что они будут удалены в "
"Python 3.12. (Предоставлено Хьюго ван Кеменаде в :issue:`47022`.)"

#: ../../whatsnew/3.11.rst:1769
msgid ""
"The :mod:`lib2to3` package and :ref:`2to3 <2to3-reference>` tool are now "
"deprecated and may not be able to parse Python 3.10 or newer. See :pep:"
"`617`, introducing the new PEG parser, for details. (Contributed by Victor "
"Stinner in :issue:`40360`.)"
msgstr ""
"Пакет :mod:`lib2to3` и инструмент :ref:`2to3 <2to3-reference>` устарели и "
"могут быть неспособны анализировать Python 3.10 или новее. Подробности "
"смотрите в :pep:`617`, знакомящем с новым парсером PEG. (Предоставлено "
"Виктором Стиннером в :issue:`40360`.)"

#: ../../whatsnew/3.11.rst:1774
msgid ""
"Undocumented modules :mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!"
"sre_parse` are now deprecated. (Contributed by Serhiy Storchaka in :issue:"
"`47152`.)"
msgstr ""
"Недокументированные модули :mod:`!sre_compile`, :mod:`!sre_constants` и :mod:"
"`!sre_parse` устарели. (Предоставлено Сергеем Сторчакой в ​​:issue:`47152`.)"

#: ../../whatsnew/3.11.rst:1782
msgid "Standard Library"
msgstr "Стандартная библиотека"

#: ../../whatsnew/3.11.rst:1784
msgid ""
"The following have been deprecated in :mod:`configparser` since Python 3.2. "
"Their deprecation warnings have now been updated to note they will be "
"removed in Python 3.12:"
msgstr ""
"Следующие элементы устарели в :mod:`configparser` начиная с Python 3.2. Их "
"предупреждения об устаревании теперь обновлены, чтобы отметить, что они "
"будут удалены в Python 3.12:"

#: ../../whatsnew/3.11.rst:1788
msgid "the :class:`!configparser.SafeConfigParser` class"
msgstr "класс :class:`!configparser.SafeConfigParser`"

#: ../../whatsnew/3.11.rst:1789
msgid "the :attr:`!configparser.ParsingError.filename` property"
msgstr "свойство :attr:`!configparser.ParsingError.filename`"

#: ../../whatsnew/3.11.rst:1790
msgid "the :meth:`!configparser.RawConfigParser.readfp` method"
msgstr "метод :meth:`!configparser.RawConfigParser.readfp`"

#: ../../whatsnew/3.11.rst:1792
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr "(Предоставлено Хьюго ван Кеменаде в :issue:`45173`.)"

#: ../../whatsnew/3.11.rst:1794
msgid ""
":class:`!configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2, and is not listed in the :mod:`configparser` "
"documentation. It now emits a :exc:`DeprecationWarning` and will be removed "
"in Python 3.13. Use :class:`configparser.BasicInterpolation` or :class:"
"`configparser.ExtendedInterpolation` instead. (Contributed by Hugo van "
"Kemenade in :issue:`46607`.)"
msgstr ""
":class:`!configparser.LegacyInterpolation` устарел в документации начиная с "
"Python 3.2 и не указан в документации :mod:`configparser`. Теперь он выдает :"
"exc:`DeprecationWarning` и будет удален в Python 3.13. Вместо этого "
"используйте :class:`configparser.BasicInterpolation` или :class:"
"`configparser.ExtendedInterpolation`. (Предоставлено Хьюго ван Кеменаде в :"
"issue:`46607`.)"

#: ../../whatsnew/3.11.rst:1801
msgid ""
"The older set of :mod:`importlib.resources` functions were deprecated in "
"favor of the replacements added in Python 3.9 and will be removed in a "
"future Python version, due to not supporting resources located within "
"package subdirectories:"
msgstr ""
"Старый набор функций :mod:`importlib.resources` устарел в пользу замен, "
"добавленных в Python 3.9, и будет удален в будущей версии Python из-за "
"отсутствия поддержки ресурсов, расположенных в подкаталогах пакета:"

#: ../../whatsnew/3.11.rst:1806
msgid ":func:`importlib.resources.contents`"
msgstr ":func:`importlib.resources.contents`"

#: ../../whatsnew/3.11.rst:1807
msgid ":func:`importlib.resources.is_resource`"
msgstr ":func:`importlib.resources.is_resource`"

#: ../../whatsnew/3.11.rst:1808
msgid ":func:`importlib.resources.open_binary`"
msgstr ":func:`importlib.resources.open_binary`"

#: ../../whatsnew/3.11.rst:1809
msgid ":func:`importlib.resources.open_text`"
msgstr ":func:`importlib.resources.open_text`"

#: ../../whatsnew/3.11.rst:1810
msgid ":func:`importlib.resources.read_binary`"
msgstr ":func:`importlib.resources.read_binary`"

#: ../../whatsnew/3.11.rst:1811
msgid ":func:`importlib.resources.read_text`"
msgstr ":func:`importlib.resources.read_text`"

#: ../../whatsnew/3.11.rst:1812
msgid ":func:`importlib.resources.path`"
msgstr ":func:`importlib.resources.path`"

#: ../../whatsnew/3.11.rst:1814
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.15. Use :func:`locale.setlocale`, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>` and :func:`locale."
"getlocale` functions instead. (Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Функция :func:`locale.getdefaultlocale` устарела и будет удалена в Python "
"3.15. Вместо этого используйте функции :func:`locale.setlocale`, :func:"
"`locale.getpreferredencoding(False) <locale.getpreferredencoding>` и :func:"
"`locale.getlocale`. (Предоставлено Виктором Стиннером в :gh:`90817`.)"

#: ../../whatsnew/3.11.rst:1820
msgid ""
"The :func:`locale.resetlocale` function is deprecated and will be removed in "
"Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Функция :func:`locale.resetlocale` устарела и будет удалена в Python 3.13. "
"Вместо этого используйте ``locale.setlocale(locale.LC_ALL, \"\")``. "
"(Предоставлено Виктором Стиннером в :gh:`90817`.)"

#: ../../whatsnew/3.11.rst:1824
msgid ""
"Stricter rules will now be applied for numerical group references and group "
"names in :ref:`regular expressions <re-syntax>`. Only sequences of ASCII "
"digits will now be accepted as a numerical reference, and the group name in :"
"class:`bytes` patterns and replacement strings can only contain ASCII "
"letters, digits and underscores. For now, a deprecation warning is raised "
"for syntax violating these rules. (Contributed by Serhiy Storchaka in :gh:"
"`91760`.)"
msgstr ""
"Более строгие правила теперь будут применяться к числовым ссылкам на группы "
"и именам групп в :ref:`регулярных выражениях <re-syntax>`. В качестве "
"числовой ссылки теперь будут приниматься только последовательности цифр "
"ASCII, а имя группы в шаблонах :class:`bytes` и строках замены может "
"содержать только буквы ASCII, цифры и символы подчеркивания. На данный "
"момент выдается предупреждение об устаревании синтаксиса, нарушающего эти "
"правила. (Предоставлено Сергеем Сторчакой в ​​:gh:`91760`.)"

#: ../../whatsnew/3.11.rst:1832
msgid ""
"In the :mod:`re` module, the :func:`!re.template` function and the "
"corresponding :const:`!re.TEMPLATE` and :const:`!re.T` flags are deprecated, "
"as they were undocumented and lacked an obvious purpose. They will be "
"removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro Hrončok "
"in :gh:`92728`.)"
msgstr ""
"В модуле :mod:`re` функция :func:`!re.template` и соответствующие флаги :"
"const:`!re.TEMPLATE` и :const:`!re.T` устарели, как и раньше. "
"недокументировано и не имело очевидной цели. Они будут удалены в Python "
"3.13. (Предоставлено Сергеем Сторчакой и Миро Хрончком в :gh:`92728`.)"

#: ../../whatsnew/3.11.rst:1838
msgid ""
":func:`turtle.settiltangle` has been deprecated since Python 3.1; it now "
"emits a deprecation warning and will be removed in Python 3.13. Use :func:"
"`turtle.tiltangle` instead (it was earlier incorrectly marked as deprecated, "
"and its docstring is now corrected). (Contributed by Hugo van Kemenade in :"
"issue:`45837`.)"
msgstr ""
":func:`turtle.settiltangle` устарел, начиная с Python 3.1; теперь он выдает "
"предупреждение об устаревании и будет удален в Python 3.13. Вместо этого "
"используйте :func:`turtle.tiltangle` (ранее он был ошибочно помечен как "
"устаревший, а его строка документации теперь исправлена). (Предоставлено "
"Хьюго ван Кеменаде в :issue:`45837`.)"

#: ../../whatsnew/3.11.rst:1844
msgid ""
":class:`typing.Text`, which exists solely to provide compatibility support "
"between Python 2 and Python 3 code, is now deprecated. Its removal is "
"currently unplanned, but users are encouraged to use :class:`str` instead "
"wherever possible. (Contributed by Alex Waygood in :gh:`92332`.)"
msgstr ""
":class:`typing.Text`, который существует исключительно для обеспечения "
"совместимости кода Python 2 и Python 3, теперь устарел. Его удаление в "
"настоящее время не запланировано, но пользователям рекомендуется "
"использовать вместо него :class:`str` везде, где это возможно. "
"(Предоставлено Алексом Вэйгудом в :gh:`92332`.)"

#: ../../whatsnew/3.11.rst:1850
msgid ""
"The keyword argument syntax for constructing :data:`typing.TypedDict` types "
"is now deprecated. Support will be removed in Python 3.13. (Contributed by "
"Jingchen Ye in :gh:`90224`.)"
msgstr ""
"Синтаксис аргументов ключевого слова для создания типов :data:`typing."
"TypedDict` теперь устарел. Поддержка будет удалена в Python 3.13. "
"(Предоставлено Цзинченом Е в :gh:`90224`.)"

#: ../../whatsnew/3.11.rst:1854
msgid ""
":class:`!webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested, undocumented, and not used by :mod:`webbrowser` "
"itself. (Contributed by Donghee Na in :issue:`42255`.)"
msgstr ""
":class:`!webbrowser.MacOSX` устарел и будет удален в Python 3.13. Он не "
"протестирован, не документирован и не используется самим :mod:`webbrowser`. "
"(Предоставлено Донхи На в :issue:`42255`.)"

#: ../../whatsnew/3.11.rst:1858
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and :"
"class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value) is now deprecated."
msgstr ""
"Поведение возврата значения из тестовых методов :class:`~unittest.TestCase` "
"и :class:`~unittest.IsolatedAsyncioTestCase` (кроме значения по умолчанию "
"``None``) теперь устарело."

#: ../../whatsnew/3.11.rst:1862
msgid ""
"Deprecated the following not-formally-documented :mod:`unittest` functions, "
"scheduled for removal in Python 3.13:"
msgstr ""
"Устарели следующие формально не документированные функции :mod:`unittest`, "
"которые планируется удалить в Python 3.13:"

#: ../../whatsnew/3.11.rst:1865
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.11.rst:1866
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.11.rst:1867
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1869
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "Вместо этого используйте методы :class:`~unittest.TestLoader`:"

#: ../../whatsnew/3.11.rst:1871
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.11.rst:1872
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.11.rst:1873
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1875
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr "(Предоставлено Эрлендом Э. Осландом в :issue:`5846`.)"

#: ../../whatsnew/3.11.rst:1877
msgid ""
":meth:`!unittest.TestProgram.usageExit` is marked deprecated, to be removed "
"in 3.13. (Contributed by Carlos Damázio in :gh:`67048`.)"
msgstr ""
":meth:`!unittest.TestProgram.usageExit` помечен как устаревший и будет "
"удален в версии 3.13. (Предоставлено Карлосом Дамасио в :gh:`67048`.)"

#: ../../whatsnew/3.11.rst:1886 ../../whatsnew/3.11.rst:2608
msgid "Pending Removal in Python 3.12"
msgstr "Ожидает удаления в Python 3.12"

#: ../../whatsnew/3.11.rst:1888
msgid ""
"The following Python APIs have been deprecated in earlier Python releases, "
"and will be removed in Python 3.12."
msgstr ""
"Следующие API Python устарели в более ранних выпусках Python и будут удалены "
"в Python 3.12."

#: ../../whatsnew/3.11.rst:1891
msgid ""
"C APIs pending removal are :ref:`listed separately <whatsnew311-c-api-"
"pending-removal>`."
msgstr ""
"API C, ожидающие удаления, :ref:`перечислены отдельно <whatsnew311-c-api-"
"pending-removal>`."

#: ../../whatsnew/3.11.rst:1894
msgid "The :mod:`!asynchat` module"
msgstr "Модуль :mod:`!asynchat`"

#: ../../whatsnew/3.11.rst:1895
msgid "The :mod:`!asyncore` module"
msgstr "Модуль :mod:`!asyncore`"

#: ../../whatsnew/3.11.rst:1896
msgid "The :ref:`entire distutils package <distutils-deprecated>`"
msgstr ":ref:`Весь пакет distutils <distutils-deprecated>`"

#: ../../whatsnew/3.11.rst:1897
msgid "The :mod:`!imp` module"
msgstr "Модуль :mod:`!imp`"

#: ../../whatsnew/3.11.rst:1898
msgid "The :class:`typing.io <typing.IO>` namespace"
msgstr "Пространство имен :class:`typing.io <typing.IO>`"

#: ../../whatsnew/3.11.rst:1899
msgid "The :class:`typing.re <typing.Pattern>` namespace"
msgstr "Пространство имен :class:`typing.re <typing.Pattern>`"

#: ../../whatsnew/3.11.rst:1900
msgid ":func:`!cgi.log`"
msgstr ":func:`!cgi.log`"

#: ../../whatsnew/3.11.rst:1901
msgid ":func:`!importlib.find_loader`"
msgstr ":func:`!importlib.find_loader`"

#: ../../whatsnew/3.11.rst:1902
msgid ":meth:`!importlib.abc.Loader.module_repr`"
msgstr ":meth:`!importlib.abc.Loader.module_repr`"

#: ../../whatsnew/3.11.rst:1903
msgid ":meth:`!importlib.abc.MetaPathFinder.find_module`"
msgstr ":meth:`!importlib.abc.MetaPathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1904
msgid ":meth:`!importlib.abc.PathEntryFinder.find_loader`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1905
msgid ":meth:`!importlib.abc.PathEntryFinder.find_module`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1906
msgid ":meth:`!importlib.machinery.BuiltinImporter.find_module`"
msgstr ":meth:`!importlib.machinery.BuiltinImporter.find_module`"

#: ../../whatsnew/3.11.rst:1907
msgid ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1908
msgid ":meth:`!importlib.machinery.FileFinder.find_loader`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1909
msgid ":meth:`!importlib.machinery.FileFinder.find_module`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_module`"

#: ../../whatsnew/3.11.rst:1910
msgid ":meth:`!importlib.machinery.FrozenImporter.find_module`"
msgstr ":meth:`!importlib.machinery.FrozenImporter.find_module`"

#: ../../whatsnew/3.11.rst:1911
msgid ":meth:`!importlib.machinery.FrozenLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.FrozenLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1912
msgid ":meth:`!importlib.machinery.PathFinder.find_module`"
msgstr ":meth:`!importlib.machinery.PathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1913
msgid ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1914
msgid ":func:`!importlib.util.module_for_loader`"
msgstr ":func:`!importlib.util.module_for_loader`"

#: ../../whatsnew/3.11.rst:1915
msgid ":func:`!importlib.util.set_loader_wrapper`"
msgstr ":func:`!importlib.util.set_loader_wrapper`"

#: ../../whatsnew/3.11.rst:1916
msgid ":func:`!importlib.util.set_package_wrapper`"
msgstr ":func:`!importlib.util.set_package_wrapper`"

#: ../../whatsnew/3.11.rst:1917
msgid ":class:`!pkgutil.ImpImporter`"
msgstr ":class:`!pkgutil.ImpImporter`"

#: ../../whatsnew/3.11.rst:1918
msgid ":class:`!pkgutil.ImpLoader`"
msgstr ":class:`!pkgutil.ImpLoader`"

#: ../../whatsnew/3.11.rst:1919
msgid ":meth:`!pathlib.Path.link_to`"
msgstr ":meth:`!pathlib.Path.link_to`"

#: ../../whatsnew/3.11.rst:1920
msgid ":func:`!sqlite3.enable_shared_cache`"
msgstr ":func:`!sqlite3.enable_shared_cache`"

#: ../../whatsnew/3.11.rst:1921
msgid ":func:`!sqlite3.OptimizedUnicode`"
msgstr ":func:`!sqlite3.OptimizedUnicode`"

#: ../../whatsnew/3.11.rst:1922
msgid ":envvar:`!PYTHONTHREADDEBUG` environment variable"
msgstr ":envvar:`!PYTHONTHREADDEBUG` переменная среды"

#: ../../whatsnew/3.11.rst:1923
msgid "The following deprecated aliases in :mod:`unittest`:"
msgstr "Следующие устаревшие псевдонимы в :mod:`unittest`:"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated alias"
msgstr "Устаревший псевдоним"

#: ../../whatsnew/3.11.rst:1926
msgid "Method Name"
msgstr "Название метода"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated in"
msgstr "Устарело в"

#: ../../whatsnew/3.11.rst:1928
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1935
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1929
#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1931
#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1933
#: ../../whatsnew/3.11.rst:1934
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.11.rst:1929
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.11.rst:1929
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.11.rst:1930
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1936
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.11.rst:1931
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.11.rst:1931 ../../whatsnew/3.11.rst:1937
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.11.rst:1932
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1938
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.11.rst:1933
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.11.rst:1933 ../../whatsnew/3.11.rst:1939
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.11.rst:1934
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.11.rst:1934
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.11.rst:1935
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.11.rst:1935 ../../whatsnew/3.11.rst:1936
#: ../../whatsnew/3.11.rst:1937 ../../whatsnew/3.11.rst:1938
#: ../../whatsnew/3.11.rst:1939 ../../whatsnew/3.11.rst:1940
#: ../../whatsnew/3.11.rst:1941
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.11.rst:1936
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.11.rst:1937
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.11.rst:1938
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.11.rst:1939
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.11.rst:1940
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.11.rst:1940
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.11.rst:1941
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.11.rst:1941
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.11.rst:1942
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.11.rst:1949 ../../whatsnew/3.11.rst:2634
msgid "Removed"
msgstr "Удалено"

#: ../../whatsnew/3.11.rst:1951
msgid "This section lists Python APIs that have been removed in Python 3.11."
msgstr ""
"В этом разделе перечислены API Python, которые были удалены в Python 3.11."

#: ../../whatsnew/3.11.rst:1953
msgid ""
"Removed C APIs are :ref:`listed separately <whatsnew311-c-api-removed>`."
msgstr ""
"Удаленные C API :ref:`перечислены отдельно <whatsnew311-c-api-removed>`."

#: ../../whatsnew/3.11.rst:1955
msgid ""
"Removed the :func:`!@asyncio.coroutine` :term:`decorator` enabling legacy "
"generator-based coroutines to be compatible with :keyword:`async` / :keyword:"
"`await` code. The function has been deprecated since Python 3.8 and the "
"removal was initially scheduled for Python 3.10. Use :keyword:`async def` "
"instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""
"Удален :func:`!@asyncio.coroutine` :term:`decorator`, позволяющий устаревшим "
"сопрограммам на основе генератора быть совместимыми с кодом :keyword:"
"`async` / :keyword:`await`. Функция устарела начиная с Python 3.8, и "
"изначально ее удаление было запланировано на Python 3.10. Вместо этого "
"используйте :keyword:`async def`. (Внесено Ильей Волочьим в :issue:`43216`.)"

#: ../../whatsnew/3.11.rst:1962
msgid ""
"Removed :class:`!asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by Illia "
"Volochii in :issue:`43216`.)"
msgstr ""
"Удален :class:`!asyncio.coroutines.CoroWrapper`, используемый для упаковки "
"устаревших объектов сопрограммы на основе генератора в режиме отладки. "
"(Внесено Ильей Волочьим в :issue:`43216`.)"

#: ../../whatsnew/3.11.rst:1966
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is now "
"entirely removed. This is because of the behavior of the socket option "
"``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in :issue:"
"`45129`.)"
msgstr ""
"Из соображений безопасности параметр *reuse_address* функции :meth:`asyncio."
"loop.create_datagram_endpoint`, отключенный в Python 3.9, теперь полностью "
"удален. Это связано с поведением опции сокета SO_REUSEADDR в UDP. "
"(Предоставлено Хьюго ван Кеменаде в :issue:`45129`.)"

#: ../../whatsnew/3.11.rst:1972
msgid ""
"Removed the :mod:`!binhex` module, deprecated in Python 3.9. Also removed "
"the related, similarly-deprecated :mod:`binascii` functions:"
msgstr ""
"Удален модуль :mod:`!binhex`, устаревший в Python 3.9. Также удалены "
"связанные, аналогично устаревшие функции :mod:`binascii`:"

#: ../../whatsnew/3.11.rst:1975
msgid ":func:`!binascii.a2b_hqx`"
msgstr ":func:`!binascii.a2b_hqx`"

#: ../../whatsnew/3.11.rst:1976
msgid ":func:`!binascii.b2a_hqx`"
msgstr ":func:`!binascii.b2a_hqx`"

#: ../../whatsnew/3.11.rst:1977
msgid ":func:`!binascii.rlecode_hqx`"
msgstr ":func:`!binascii.rlecode_hqx`"

#: ../../whatsnew/3.11.rst:1978
msgid ":func:`!binascii.rldecode_hqx`"
msgstr ":func:`!binascii.rldecode_hqx`"

#: ../../whatsnew/3.11.rst:1980
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr "Функция :func:`binascii.crc_hqx` остаётся доступной."

#: ../../whatsnew/3.11.rst:1982
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`45085`.)"

#: ../../whatsnew/3.11.rst:1984
msgid ""
"Removed the :mod:`!distutils` ``bdist_msi`` command deprecated in Python "
"3.9. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo van "
"Kemenade in :issue:`45124`.)"
msgstr ""
"Удалена команда :mod:`!distutils` ``bdist_msi``, устаревшая в Python 3.9. "
"Вместо этого используйте ``bdist_wheel`` (пакеты колес). (Предоставлено "
"Хьюго ван Кеменаде в :issue:`45124`.)"

#: ../../whatsnew/3.11.rst:1988
msgid ""
"Removed the :meth:`~object.__getitem__` methods of :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` and :class:`fileinput."
"FileInput`, deprecated since Python 3.9. (Contributed by Hugo van Kemenade "
"in :issue:`45132`.)"
msgstr ""
"Удалены методы :meth:`~object.__getitem__` для :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` и :class:`fileinput."
"FileInput`, которые устарели с Python 3.9. . (Предоставлено Хьюго ван "
"Кеменаде в :issue:`45132`.)"

#: ../../whatsnew/3.11.rst:1993
msgid ""
"Removed the deprecated :mod:`gettext` functions :func:`!lgettext`, :func:`!"
"ldgettext`, :func:`!lngettext` and :func:`!ldngettext`. Also removed the :"
"func:`!bind_textdomain_codeset` function, the :meth:`!NullTranslations."
"output_charset` and :meth:`!NullTranslations.set_output_charset` methods, "
"and the *codeset* parameter of :func:`!translation` and :func:`!install`, "
"since they are only used for the :func:`!l*gettext` functions. (Contributed "
"by Donghee Na and Serhiy Storchaka in :issue:`44235`.)"
msgstr ""
"Удалены устаревшие функции :mod:`gettext` :func:`!lgettext`, :func:`!"
"ldgettext`, :func:`!lngettext` и :func:`!ldngettext`. Также удалена функция :"
"func:`!bind_textdomain_codeset`, методы :meth:`!NullTranslations."
"output_charset` и :meth:`!NullTranslations.set_output_charset`, а также "
"параметр *codeset* :func:`!translation` и : func:`!install`, поскольку они "
"используются только для функций :func:`!l*gettext`. (Предоставлено Донхи На "
"и Сергеем Сторчакой в ​​:issue:`44235`.)"

#: ../../whatsnew/3.11.rst:2003
msgid "Removed from the :mod:`inspect` module:"
msgstr "Из модуля :mod:`inspect` удалено:"

#: ../../whatsnew/3.11.rst:2005
msgid ""
"The :func:`!getargspec` function, deprecated since Python 3.0; use :func:"
"`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""
"Функция :func:`!getargspec` устарела, начиная с Python 3.0; вместо этого "
"используйте :func:`inspect.signature` или :func:`inspect.getfullargspec`."

#: ../../whatsnew/3.11.rst:2008
msgid ""
"The :func:`!formatargspec` function, deprecated since Python 3.5; use the :"
"func:`inspect.signature` function or the :class:`inspect.Signature` object "
"directly."
msgstr ""
"Функция :func:`!formatargspec` устарела, начиная с Python 3.5; используйте "
"функцию :func:`inspect.signature` или объект :class:`inspect.Signature` "
"напрямую."

#: ../../whatsnew/3.11.rst:2012
msgid ""
"The undocumented :meth:`!Signature.from_builtin` and :meth:`!Signature."
"from_function` methods, deprecated since Python 3.5; use the :meth:"
"`Signature.from_callable() <inspect.Signature.from_callable>` method instead."
msgstr ""
"Недокументированные методы :meth:`!Signature.from_builtin` и :meth:`!"
"Signature.from_function`, устаревшие, начиная с Python 3.5; вместо этого "
"используйте метод :meth:`Signature.from_callable() <inspect.Signature."
"from_callable>`."

#: ../../whatsnew/3.11.rst:2017
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr "(Предоставлено Хьюго ван Кеменаде в :issue:`45320`.)"

#: ../../whatsnew/3.11.rst:2019
msgid ""
"Removed the :meth:`~object.__class_getitem__` method from :class:`pathlib."
"PurePath`, because it was not used and added by mistake in previous "
"versions. (Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""
"Удален метод :meth:`~object.__class_getitem__` из :class:`pathlib.PurePath`, "
"поскольку он не использовался и был добавлен по ошибке в предыдущих версиях. "
"(Добавлен Никитой Соболевым в :issue:`46483`.)"

#: ../../whatsnew/3.11.rst:2024
msgid ""
"Removed the :class:`!MailmanProxy` class in the :mod:`!smtpd` module, as it "
"is unusable without the external :mod:`!mailman` package. (Contributed by "
"Donghee Na in :issue:`35800`.)"
msgstr ""
"Удален класс :class:`!MailmanProxy` в модуле :mod:`!smtpd`, так как его "
"невозможно использовать без внешнего пакета :mod:`!mailman`. (Предоставлено "
"Донхи На в :issue:`35800`.)"

#: ../../whatsnew/3.11.rst:2028
msgid ""
"Removed the deprecated :meth:`!split` method of :class:`!_tkinter."
"TkappType`. (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""
"Удален устаревший метод :meth:`!split` для :class:`!_tkinter.TkappType`. "
"(Предоставлено Эрлендом Э. Осландом в :issue:`38371`.)"

#: ../../whatsnew/3.11.rst:2031
msgid ""
"Removed namespace package support from :mod:`unittest` discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. (Contributed "
"by Inada Naoki in :issue:`23882`.)"
msgstr ""
"Удалена поддержка пакетов пространства имен из обнаружения :mod:`unittest`. "
"Он был представлен в Python 3.4, но не работает начиная с Python 3.7. "
"(Предоставлено Инадой Наоки в :issue:`23882`.)"

#: ../../whatsnew/3.11.rst:2035
msgid ""
"Removed the undocumented private :meth:`!float.__set_format__` method, "
"previously known as :meth:`!float.__setformat__` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists "
"mainly to be used in Python's test suite.\" (Contributed by Victor Stinner "
"in :issue:`46852`.)"
msgstr ""
"Удален недокументированный частный метод :meth:`!float.__set_format__`, "
"ранее известный как :meth:`!float.__setformat__` в Python 3.7. В его "
"документации говорилось: «Вероятно, вы не захотите использовать эту функцию. "
"Она существует в основном для использования в наборе тестов Python». "
"(Предоставлено Виктором Стиннером в :issue:`46852`.)"

#: ../../whatsnew/3.11.rst:2041
msgid ""
"The :option:`!--experimental-isolated-subinterpreters` configure flag (and "
"corresponding :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` macro) have "
"been removed."
msgstr ""
"Флаг конфигурации :option:`!--experimental-isolated-subinterpreters` (и "
"соответствующий макрос :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS`) "
"были удалены."

#: ../../whatsnew/3.11.rst:2045
msgid ""
":pypi:`Pynche` --- The Pythonically Natural Color and Hue Editor --- has "
"been moved out of ``Tools/scripts`` and is `being developed independently "
"<https://gitlab.com/warsaw/pynche/-/tree/main>`_ from the Python source tree."
msgstr ""
":pypi:`Pynche` --- Pythonically Natural Color and Hue Editor --- вынесен из "
"``Tools/scripts`` и `разрабатывается независимо <https://gitlab.com/warsaw/"
"pynche/ -/tree/main>`_ из дерева исходного кода Python."

#: ../../whatsnew/3.11.rst:2055 ../../whatsnew/3.11.rst:2277
msgid "Porting to Python 3.11"
msgstr "Портирование на Python 3.11"

#: ../../whatsnew/3.11.rst:2057
msgid ""
"This section lists previously described changes and other bugfixes in the "
"Python API that may require changes to your Python code."
msgstr ""
"В этом разделе перечислены ранее описанные изменения и другие исправления "
"ошибок в API Python, которые могут потребовать внесения изменений в ваш код "
"Python."

#: ../../whatsnew/3.11.rst:2060
msgid ""
"Porting notes for the C API are :ref:`listed separately <whatsnew311-c-api-"
"porting>`."
msgstr ""
"Примечания по портированию C API перечислены отдельно <whatsnew311-c-api-"
"porting>."

#: ../../whatsnew/3.11.rst:2063
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and :class:`fileinput."
"FileInput` no longer accept ``'U'`` (\"universal newline\") in the file "
"mode. In Python 3, \"universal newline\" mode is used by default whenever a "
"file is opened in text mode, and the ``'U'`` flag has been deprecated since "
"Python 3.3. The :ref:`newline parameter <open-newline-parameter>` to these "
"functions controls how universal newlines work. (Contributed by Victor "
"Stinner in :issue:`37330`.)"
msgstr ""
":func:`open`, :func:`io.open`, :func:`codecs.open` и :class:`fileinput."
"FileInput` больше не принимают ``'U'`` (\"универсальную новую строку\") в "
"файловый режим. В Python 3 режим «универсальной новой строки» используется "
"по умолчанию всякий раз, когда файл открывается в текстовом режиме, а флаг "
"«U» устарел, начиная с Python 3.3. Параметр :ref:`newline <open-newline-"
"parameter>` этих функций управляет работой универсальных символов новой "
"строки. (Предоставлено Виктором Стиннером в :issue:`37330`.)"

#: ../../whatsnew/3.11.rst:2072
msgid ""
":class:`ast.AST` node positions are now validated when provided to :func:"
"`compile` and other related functions. If invalid positions are detected, a :"
"exc:`ValueError` will be raised. (Contributed by Pablo Galindo in :gh:"
"`93351`)"
msgstr ""
"Позиции узлов :class:`ast.AST` теперь проверяются при их предоставлении :"
"func:`compile` и другим связанным функциям. Если обнаружены недопустимые "
"позиции, будет выдано :exc:`ValueError`. (Предоставлено Пабло Галиндо в :gh:"
"`93351`)"

#: ../../whatsnew/3.11.rst:2076
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`asyncio.loop.set_default_executor` following a "
"deprecation in Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""
"Запрещена передача исполнителей, отличных от :class:`concurrent.futures."
"ThreadPoolExecutor`, в :meth:`asyncio.loop.set_default_executor` после "
"прекращения поддержки в Python 3.8. (Внесено Ильей Волочьим в :issue:"
"`43234`.)"

#: ../../whatsnew/3.11.rst:2081
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and :class:"
"`calendar.LocaleHTMLCalendar` classes now use :func:`locale.getlocale`, "
"instead of using :func:`locale.getdefaultlocale`, if no locale is specified. "
"(Contributed by Victor Stinner in :issue:`46659`.)"
msgstr ""
":mod:`calendar`: Классы :class:`calendar.LocaleTextCalendar` и :class:"
"`calendar.LocaleHTMLCalendar` теперь используют :func:`locale.getlocale` "
"вместо использования :func:`locale.getdefaultlocale`, если локаль не "
"указана. (Предоставлено Виктором Стиннером в :issue:`46659`.)"

#: ../../whatsnew/3.11.rst:2087
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file with "
"the ``'UTF-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy (శ్రీనివాస్  "
"రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""
"Модуль :mod:`pdb` теперь считывает файл конфигурации :file:`.pdbrc` с "
"кодировкой ``'UTF-8'``. (Предоставлено Шринивасом Редди Татипарти в :issue:"
"`41137`.)"

#: ../../whatsnew/3.11.rst:2091
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence, and "
"automatic conversion of :class:`set`\\s to :class:`list`\\s is no longer "
"supported. Also, if the sample size is larger than the population size, a :"
"exc:`ValueError` is raised. (Contributed by Raymond Hettinger in :issue:"
"`40465`.)"
msgstr ""
"Параметр *population* файла :func:`random.sample` должен быть "
"последовательностью, а автоматическое преобразование :class:`set`\\s в :"
"class:`list`\\s больше не поддерживается. Кроме того, если размер выборки "
"превышает размер генеральной совокупности, выдается ошибка :exc:"
"`ValueError`. (Предоставлено Рэймондом Хеттингером в :issue:`40465`.)"

#: ../../whatsnew/3.11.rst:2097
msgid ""
"The *random* optional parameter of :func:`random.shuffle` was removed. It "
"was previously an arbitrary random function to use for the shuffle; now, :"
"func:`random.random` (its previous default) will always be used."
msgstr ""
"Необязательный параметр *random* из :func:`random.shuffle` был удален. "
"Раньше для перетасовки использовалась произвольная случайная функция; теперь "
"всегда будет использоваться :func:`random.random` (предыдущее значение по "
"умолчанию)."

#: ../../whatsnew/3.11.rst:2101
msgid ""
"In :mod:`re` :ref:`re-syntax`, global inline flags (e.g. ``(?i)``) can now "
"only be used at the start of regular expressions. Using them elsewhere has "
"been deprecated since Python 3.6. (Contributed by Serhiy Storchaka in :issue:"
"`47066`.)"
msgstr ""
"В :mod:`re` :ref:`re-syntax` глобальные встроенные флаги (например, ``(?"
"i)``) теперь можно использовать только в начале регулярных выражений. Их "
"использование в других местах устарело начиная с Python 3.6. (Предоставлено "
"Сергеем Сторчакой в ​​:issue:`47066`.)"

#: ../../whatsnew/3.11.rst:2106
msgid ""
"In the :mod:`re` module, several long-standing bugs where fixed that, in "
"rare cases, could cause capture groups to get the wrong result. Therefore, "
"this could change the captured output in these cases. (Contributed by Ma Lin "
"in :issue:`35859`.)"
msgstr ""
"В модуле :mod:`re` исправлено несколько давних ошибок, которые в редких "
"случаях могли привести к тому, что группы захвата получали неправильный "
"результат. Следовательно, в этих случаях это может изменить захваченный "
"вывод. (Предоставлено Ма Линь в :issue:`35859`.)"

#: ../../whatsnew/3.11.rst:2115
msgid "Build Changes"
msgstr "Изменения сборки"

#: ../../whatsnew/3.11.rst:2117
msgid ""
"CPython now has :pep:`11` :pep:`Tier 3 support <11#tier-3>` for cross "
"compiling to the `WebAssembly <https://webassembly.org/>`_ platforms "
"`Emscripten <https://emscripten.org/>`_ (``wasm32-unknown-emscripten``, i.e. "
"Python in the browser) and `WebAssembly System Interface (WASI) <https://"
"wasi.dev/>`_ (``wasm32-unknown-wasi``). The effort is inspired by previous "
"work like `Pyodide <https://pyodide.org/>`_. These platforms provide a "
"limited subset of POSIX APIs; Python standard libraries features and modules "
"related to networking, processes, threading, signals, mmap, and users/groups "
"are not available or don't work. (Emscripten contributed by Christian Heimes "
"and Ethan Smith in :gh:`84461` and WASI contributed by Christian Heimes in :"
"gh:`90473`; platforms promoted in :gh:`95085`)"
msgstr ""
"CPython теперь имеет :pep:`11` :pep:`Поддержка уровня 3 <11#tier-3>` для "
"кросс-компиляции на платформах `WebAssembly <https://webassembly.org/>`_ "
"`Emscripten <https:/ /emscripten.org/>`_ (``wasm32-unknown-emscripten``, т."
"е. Python в браузере) и ``Системный интерфейс WebAssembly (WASI) <https://"
"wasi.dev/>`_ (``wasm32- неизвестно-васи``). Эти усилия вдохновлены "
"предыдущей работой, такой как `Pyodide <https://pyodide.org/>`_. Эти "
"платформы предоставляют ограниченное подмножество API POSIX; Функции и "
"модули стандартных библиотек Python, связанные с сетями, процессами, "
"потоками, сигналами, mmap и пользователями/группами, недоступны или не "
"работают. (Emscripten предоставлен Кристианом Хеймсом и Итаном Смитом в :gh:"
"`84461` и WASI предоставлен Кристианом Хеймсом в :gh:`90473`; платформы "
"продвигаются в :gh:`95085`)"

#: ../../whatsnew/3.11.rst:2131
msgid "Building CPython now requires:"
msgstr "Для сборки CPython теперь требуется:"

#: ../../whatsnew/3.11.rst:2133
msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler and standard library. "
"`Optional C11 features <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ are not required. "
"(Contributed by Victor Stinner in :issue:`46656`, :issue:`45440` and :issue:"
"`46640`.)"
msgstr ""
"Компилятор C11 <https://en.cppreference.com/w/c/11>`_ и стандартная "
"библиотека. `Дополнительные функции C11 <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ не требуются. (Внесено "
"Виктором Стиннером в :issue:`46656`, :issue:`45440` и :issue:`46640`.)"

#: ../../whatsnew/3.11.rst:2140
msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating-"
"point numbers. (Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""
"Поддержка чисел с плавающей запятой IEEE 754 <https://en.wikipedia.org/wiki/"
"IEEE_754>`_. (Предоставлено Виктором Стиннером в :issue:`46917`.)"

#: ../../whatsnew/3.11.rst:2144
msgid ""
"The :c:macro:`!Py_NO_NAN` macro has been removed. Since CPython now requires "
"IEEE 754 floats, NaN values are always available. (Contributed by Victor "
"Stinner in :issue:`46656`.)"
msgstr ""
"Макрос :c:macro:`!Py_NO_NAN` был удален. Поскольку CPython теперь требует "
"чисел с плавающей запятой IEEE 754, значения NaN всегда доступны. "
"(Предоставлено Виктором Стиннером в :issue:`46656`.)"

#: ../../whatsnew/3.11.rst:2148
msgid ""
"The :mod:`tkinter` package now requires `Tcl/Tk <https://www.tcl.tk>`_ "
"version 8.5.12 or newer. (Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""
"Пакет :mod:`tkinter` теперь требует `Tcl/Tk <https://www.tcl.tk>`_ версии "
"8.5.12 или новее. (Предоставлено Сергеем Сторчакой в ​​:issue:`46996`.)"

#: ../../whatsnew/3.11.rst:2152
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags are "
"detected by `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-"
"config/>`_ (when available). :mod:`tkinter` now requires a pkg-config "
"command to detect development settings for `Tcl/Tk`_ headers and libraries. "
"(Contributed by Christian Heimes and Erlend Egeberg Aasland in :issue:"
"`45847`, :issue:`45747`, and :issue:`45763`.)"
msgstr ""
"Зависимости сборки, флаги компилятора и флаги компоновщика для большинства "
"модулей расширения stdlib теперь обнаруживаются с помощью :program:"
"`configure`. Флаги libffi, libnsl, libsqlite3, zlib, bzip2, liblzma, "
"libcrypt, Tcl/Tk и uuid обнаруживаются с помощью `pkg-config <https://www."
"freedesktop.org/wiki/Software/pkg-config/>`_ (при наличии). :mod:`tkinter` "
"теперь требует команду pkg-config для определения настроек разработки для "
"заголовков и библиотек `Tcl/Tk`_. (Предоставлено Кристианом Хаймсом и "
"Эрлендом Эгебергом Осландом в :issue:`45847`, :issue:`45747` и :issue:"
"`45763`.)"

#: ../../whatsnew/3.11.rst:2162
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert "
"in :issue:`45433`.)"
msgstr ""
"libpython больше не связан с libcrypt. (Предоставлено Майком Гилбертом в :"
"issue:`45433`.)"

#: ../../whatsnew/3.11.rst:2165
msgid ""
"CPython can now be built with the `ThinLTO <https://clang.llvm.org/docs/"
"ThinLTO.html>`_ option via passing ``thin`` to :option:`--with-lto`, i.e. "
"``--with-lto=thin``. (Contributed by Donghee Na and Brett Holman in :issue:"
"`44340`.)"
msgstr ""
"CPython теперь можно собрать с помощью опции ``ThinLTO <https://clang.llvm."
"org/docs/ThinLTO.html>`_, передав ``thin`` в :option:`--with-lto`, т.е. `--"
"with-lto=thin``. (Предоставлено Донхи На и Бреттом Холманом в :issue:"
"`44340`.)"

#: ../../whatsnew/3.11.rst:2170
msgid ""
"Freelists for object structs can now be disabled. A new :program:`configure` "
"option :option:`--without-freelists` can be used to disable all freelists "
"except empty tuple singleton. (Contributed by Christian Heimes in :issue:"
"`45522`.)"
msgstr ""
"Свободные списки для структур объектов теперь можно отключить. Новая опция :"
"program:`configure` :option:`--without-freelists` может использоваться для "
"отключения всех свободных списков, кроме пустого одноэлементного кортежа. "
"(Предоставлено Кристианом Хаймсом в :issue:`45522`.)"

#: ../../whatsnew/3.11.rst:2175
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied up. "
"Extension modules can now be built through ``makesetup``. All except some "
"test modules can be linked statically into a main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, :issue:"
"`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""
"``Modules/Setup`` и ``Modules/makesetup`` были улучшены и связаны. Модули "
"расширения теперь можно создавать с помощью makesetup. Все, за исключением "
"некоторых тестовых модулей, можно статически скомпоновать с основным "
"двоичным файлом или библиотекой. (Предоставлено Бреттом Кэнноном и "
"Кристианом Хаймсом в :issue:`45548`, :issue:`45570`, :issue:`45571` и :issue:"
"`43974`.)"

#: ../../whatsnew/3.11.rst:2182
msgid ""
"Use the environment variables :envvar:`!TCLTK_CFLAGS` and :envvar:`!"
"TCLTK_LIBS` to manually specify the location of Tcl/Tk headers and "
"libraries. The :program:`configure` options :option:`!--with-tcltk-includes` "
"and :option:`!--with-tcltk-libs` have been removed."
msgstr ""
"Используйте переменные среды :envvar:`!TCLTK_CFLAGS` и :envvar:`!"
"TCLTK_LIBS`, чтобы вручную указать расположение заголовков и библиотек Tcl/"
"Tk. Опции :program:`configure` :option:`!--with-tcltk-includes` и :option:"
"`!--with-tcltk-libs` были удалены."

#: ../../whatsnew/3.11.rst:2188
msgid ""
"On RHEL 7 and CentOS 7 the development packages do not provide ``tcl.pc`` "
"and ``tk.pc``; use ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. The "
"directory ``Misc/rhel7`` contains ``.pc`` files and instructions on how to "
"build Python with RHEL 7's and CentOS 7's Tcl/Tk and OpenSSL."
msgstr ""
"В RHEL 7 и CentOS 7 пакеты разработки не предоставляют tcl.pc и tk.pc; "
"используйте ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. Каталог «Misc/"
"rhel7» содержит файлы «.pc» и инструкции по сборке Python с помощью Tcl/Tk и "
"OpenSSL для RHEL 7 и CentOS 7."

#: ../../whatsnew/3.11.rst:2193
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int` "
"implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the :"
"option:`--enable-big-digits` option to the configure script or (for Windows) "
"the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this option "
"may be removed at some point in the future. (Contributed by Mark Dickinson "
"in :issue:`45569`.)"
msgstr ""
"CPython теперь по умолчанию будет использовать 30-битные цифры для "
"реализации Python :class:`int`. Раньше по умолчанию на платформах с "
"``SIZEOF_VOID_P >= 8`` использовались 30-битные цифры, а в противном случае "
"— 15-битные цифры. По-прежнему можно явно запросить использование 15-битных "
"цифр либо с помощью параметра :option:`--enable-big-digits` в скрипте "
"настройки, либо (для Windows) с помощью переменной ``PYLONG_BITS_IN_DIGIT`` "
"в ``PC/pyconfig' .h``, но эта опция может быть удалена в какой-то момент в "
"будущем. (Предоставлено Марком Дикинсоном в :issue:`45569`.)"

#: ../../whatsnew/3.11.rst:2206
msgid "C API Changes"
msgstr "Изменения в C API"

#: ../../whatsnew/3.11.rst:2213
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Добавьте новую функцию :c:func:`PyType_GetName` для получения короткого "
"имени типа. (Предоставлено Хай Ши в :issue:`42035`.)"

#: ../../whatsnew/3.11.rst:2216
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Добавьте новую функцию :c:func:`PyType_GetQualName` для получения полного "
"имени типа. (Предоставлено Хай Ши в :issue:`42035`.)"

#: ../../whatsnew/3.11.rst:2219
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` functions to the limited C API to suspend and "
"resume tracing and profiling. (Contributed by Victor Stinner in :issue:"
"`43760`.)"
msgstr ""
"Добавьте новые функции :c:func:`PyThreadState_EnterTracing` и :c:func:"
"`PyThreadState_LeaveTracing` в ограниченный API C для приостановки и "
"возобновления трассировки и профилирования. (Предоставлено Виктором "
"Стиннером в :issue:`43760`.)"

#: ../../whatsnew/3.11.rst:2224
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as :c:"
"macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in :issue:"
"`43931`.)"
msgstr ""
"Добавлена ​​константа :c:data:`Py_Version`, которая имеет то же значение, что "
"и :c:macro:`PY_VERSION_HEX`. (Предоставлено Габриэле Н. Торнеттой в :issue:"
"`43931`.)"

#: ../../whatsnew/3.11.rst:2228
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the stable "
"ABI:"
msgstr ""
":c:type:`Py_buffer` и API теперь являются частью ограниченного API и "
"стабильного ABI:"

#: ../../whatsnew/3.11.rst:2231
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ":c:func:`PyObject_CheckBuffer`"

#: ../../whatsnew/3.11.rst:2232
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ":c:func:`PyObject_GetBuffer`"

#: ../../whatsnew/3.11.rst:2233
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ":c:func:`PyBuffer_GetPointer`"

#: ../../whatsnew/3.11.rst:2234
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ":c:func:`PyBuffer_SizeFromFormat`"

#: ../../whatsnew/3.11.rst:2235
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ":c:func:`PyBuffer_ToContiguous`"

#: ../../whatsnew/3.11.rst:2236
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ":c:func:`PyBuffer_FromContiguous`"

#: ../../whatsnew/3.11.rst:2237
msgid ":c:func:`PyObject_CopyData`"
msgstr ":c:func:`PyObject_CopyData`"

#: ../../whatsnew/3.11.rst:2238
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ":c:func:`PyBuffer_IsContiguous`"

#: ../../whatsnew/3.11.rst:2239
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ":c:func:`PyBuffer_FillContiguousStrides`"

#: ../../whatsnew/3.11.rst:2240
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ":c:func:`PyBuffer_FillInfo`"

#: ../../whatsnew/3.11.rst:2241
msgid ":c:func:`PyBuffer_Release`"
msgstr ":c:func:`PyBuffer_Release`"

#: ../../whatsnew/3.11.rst:2242
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ":c:func:`PyMemoryView_FromBuffer`"

#: ../../whatsnew/3.11.rst:2243
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` type slots"
msgstr ""
"Слоты типов :c:member:`~PyBufferProcs.bf_getbuffer` и :c:member:"
"`~PyBufferProcs.bf_releasebuffer`"

#: ../../whatsnew/3.11.rst:2246
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr "(Предоставлено Кристианом Хаймсом в :issue:`45459`.)"

#: ../../whatsnew/3.11.rst:2248
msgid ""
"Added the :c:func:`PyType_GetModuleByDef` function, used to get the module "
"in which a method was defined, in cases where this information is not "
"available directly (via :c:type:`PyCMethod`). (Contributed by Petr Viktorin "
"in :issue:`46613`.)"
msgstr ""
"Добавлена ​​функция :c:func:`PyType_GetModuleByDef`, используемая для "
"получения модуля, в котором был определен метод, в тех случаях, когда эта "
"информация недоступна напрямую (через :c:type:`PyCMethod`). (Представлено "
"Петром Викториным в :issue:`46613`.)"

#: ../../whatsnew/3.11.rst:2253
msgid ""
"Add new functions to pack and unpack C double (serialize and deserialize): :"
"c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, :c:"
"func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` and :c:func:"
"`PyFloat_Unpack8`. (Contributed by Victor Stinner in :issue:`46906`.)"
msgstr ""
"Добавьте новые функции для упаковки и распаковки C double (сериализация и "
"десериализация): :c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:"
"`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2` , :c:func:`PyFloat_Unpack4` и :c:"
"func:`PyFloat_Unpack8`. (Предоставлено Виктором Стиннером в :issue:`46906`.)"

#: ../../whatsnew/3.11.rst:2259
msgid ""
"Add new functions to get frame object attributes: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""
"Добавьте новые функции для получения атрибутов объекта фрейма: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."

#: ../../whatsnew/3.11.rst:2263
msgid ""
"Added two new functions to get and set the active exception instance: :c:"
"func:`PyErr_GetHandledException` and :c:func:`PyErr_SetHandledException`. "
"These are alternatives to :c:func:`PyErr_SetExcInfo()` and :c:func:"
"`PyErr_GetExcInfo()` which work with the legacy 3-tuple representation of "
"exceptions. (Contributed by Irit Katriel in :issue:`46343`.)"
msgstr ""
"Добавлены две новые функции для получения и установки активного экземпляра "
"исключения: :c:func:`PyErr_GetHandledException` и :c:func:"
"`PyErr_SetHandledException`. Это альтернативы :c:func:`PyErr_SetExcInfo()` "
"и :c:func:`PyErr_GetExcInfo()`, которые работают с устаревшим трехкортежным "
"представлением исключений. (Предоставлено Ирит Катриэль в :issue:`46343`.)"

#: ../../whatsnew/3.11.rst:2270
msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Добавлен член :c:member:`PyConfig.safe_path`. (Предоставлено Виктором "
"Стиннером в :gh:`57684`.)"

#: ../../whatsnew/3.11.rst:2281
msgid ""
"Some macros have been converted to static inline functions to avoid `macro "
"pitfalls <https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html>`_. The "
"change should be mostly transparent to users, as the replacement functions "
"will cast their arguments to the expected types to avoid compiler warnings "
"due to static type checks. However, when the limited C API is set to >=3.11, "
"these casts are not done, and callers will need to cast arguments to their "
"expected types. See :pep:`670` for more details. (Contributed by Victor "
"Stinner and Erlend E. Aasland in :gh:`89653`.)"
msgstr ""
"Некоторые макросы были преобразованы в статические встроенные функции, чтобы "
"избежать `ловушек макросов <https://gcc.gnu.org/onlinedocs/cpp/Macro-"
"Pitfalls.html>`_. Это изменение должно быть в основном прозрачным для "
"пользователей, поскольку функции замены будут приводить свои аргументы к "
"ожидаемым типам, чтобы избежать предупреждений компилятора из-за статических "
"проверок типов. Однако если для ограниченного API C установлено значение "
">=3.11, эти приведения не выполняются, и вызывающим объектам придется "
"приводить аргументы к ожидаемым типам. См. :pep:`670` для более подробной "
"информации. (Предоставлено Виктором Стиннером и Эрлендом Э. Осландом в :gh:"
"`89653`.)"

#: ../../whatsnew/3.11.rst:2292
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and ``traceback`` "
"arguments, the interpreter now derives those values from the exception "
"instance (the ``value`` argument). The function still steals references of "
"all three arguments. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_SetExcInfo()` больше не использует аргументы ``type`` и "
"``traceback``, интерпретатор теперь получает эти значения из экземпляра "
"исключения (аргумент ``value``). Функция по-прежнему крадет ссылки на все "
"три аргумента. (Внесено Ирит Катриэль в :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:2298
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_GetExcInfo()` теперь извлекает поля ``type`` и ``traceback`` "
"результата из экземпляра исключения (поле ``value``). (Внесено Ирит Катриэль "
"в :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:2302
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or "
"not the frozen module is a package.  Previously, a negative value in the "
"``size`` field was the indicator.  Now only non-negative values be used for "
"``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""
":c:struct:`_frozen` имеет новое поле ``is_package``, которое указывает, "
"является ли замороженный модуль пакетом. Раньше индикатором было "
"отрицательное значение в поле «размер». Теперь для размера можно "
"использовать только неотрицательные значения. (Предоставлено Кумаром Адитьей "
"в :issue:`46608`.)"

#: ../../whatsnew/3.11.rst:2308
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""
":c:func:`_PyFrameEvalFunction` теперь принимает ``_PyInterpreterFrame*`` в "
"качестве второго параметра вместо ``PyFrameObject*``. См. :pep:`523` для "
"получения более подробной информации о том, как использовать этот тип "
"указателя функции."

#: ../../whatsnew/3.11.rst:2312
msgid ""
":c:func:`!PyCode_New` and :c:func:`!PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the ``replace`` "
"method."
msgstr ""
":c:func:`!PyCode_New` и :c:func:`!PyCode_NewWithPosOnlyArgs` теперь "
"принимают дополнительный аргумент ``Exception_table``. По возможности "
"следует избегать использования этих функций. Чтобы получить собственный "
"объект кода: создайте объект кода с помощью компилятора, затем получите "
"модифицированную версию с помощью метода replace."

#: ../../whatsnew/3.11.rst:2318
msgid ""
":c:type:`PyCodeObject` no longer has the ``co_code``, ``co_varnames``, "
"``co_cellvars`` and ``co_freevars`` fields.  Instead, use :c:func:"
"`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` "
"and :c:func:`PyCode_GetFreevars` respectively to access them via the C API. "
"(Contributed by Brandt Bucher in :issue:`46841` and Ken Jin in :gh:`92154` "
"and :gh:`94936`.)"
msgstr ""
":c:type:`PyCodeObject` больше не имеет полей ``co_code``, ``co_varnames``, "
"``co_cellvars`` и ``co_freevars``. Вместо этого используйте :c:func:"
"`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` "
"и :c:func:`PyCode_GetFreevars` соответственно для доступа к ним через C API. "
"(Предоставлено Брандтом Бухером в :issue:`46841` и Кеном Джином в :gh:"
"`92154` и :gh:`94936`.)"

#: ../../whatsnew/3.11.rst:2326
msgid ""
"The old trashcan macros (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) are now deprecated. They should be replaced by the "
"new macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"Старые макросы мусорной корзины (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) устарели. Их следует заменить новыми макросами "
"``Py_TRASHCAN_BEGIN`` и ``Py_TRASHCAN_END``."

#: ../../whatsnew/3.11.rst:2330
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr "Функция tp_dealloc, имеющая старые макросы, такие как::"

#: ../../whatsnew/3.11.rst:2332
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

#: ../../whatsnew/3.11.rst:2341
msgid "should migrate to the new macros as follows::"
msgstr "следует перейти на новые макросы следующим образом:"

#: ../../whatsnew/3.11.rst:2343
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

#: ../../whatsnew/3.11.rst:2352
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr ""
"Обратите внимание, что у ``Py_TRASHCAN_BEGIN`` есть второй аргумент, который "
"должен быть функцией освобождения, в которой он находится."

#: ../../whatsnew/3.11.rst:2355
msgid ""
"To support older Python versions in the same codebase, you can define the "
"following macros and use them throughout the code (credit: these were copied "
"from the ``mypy`` codebase)::"
msgstr ""
"Для поддержки более старых версий Python в той же базе кода вы можете "
"определить следующие макросы и использовать их в коде (благодарность: они "
"были скопированы из базы кода ``mypy``):"

#: ../../whatsnew/3.11.rst:2359
msgid ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2367
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is defined "
"with the :c:macro:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse function "
"(:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor Stinner in :"
"issue:`44263`.)"
msgstr ""
"Функция :c:func:`PyType_Ready` теперь вызывает ошибку, если тип определен с "
"установленным флагом :c:macro:`Py_TPFLAGS_HAVE_GC`, но не имеет функции "
"перемещения (:c:member:`PyTypeObject.tp_traverse`). (Предоставлено Виктором "
"Стиннером в :issue:`44263`.)"

#: ../../whatsnew/3.11.rst:2372
msgid ""
"Heap types with the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit "
"the :pep:`590` vectorcall protocol.  Previously, this was only possible for :"
"ref:`static types <static-types>`. (Contributed by Erlend E. Aasland in :"
"issue:`43908`)"
msgstr ""
"Типы кучи с флагом :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` теперь могут "
"наследовать протокол векторного вызова :pep:`590`. Раньше это было возможно "
"только для статических типов <static-types>`. (Предоставлено Эрлендом Э. "
"Осландом в :issue:`43908`)"

#: ../../whatsnew/3.11.rst:2377
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Поскольку :c:func:`Py_TYPE()` заменяется на встроенную статическую функцию, "
"``Py_TYPE(obj) = new_type`` необходимо заменить на ``Py_SET_TYPE(obj, "
"new_type)``: см. :c:func Функция :`Py_SET_TYPE()` (доступна начиная с Python "
"3.9). Для обратной совместимости можно использовать этот макрос::"

#: ../../whatsnew/3.11.rst:2383
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = type; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = type; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2389 ../../whatsnew/3.11.rst:2403
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`39573`.)"

#: ../../whatsnew/3.11.rst:2391
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Поскольку :c:func:`Py_SIZE()` заменяется на встроенную статическую функцию, "
"``Py_SIZE(obj) = new_size`` необходимо заменить на ``Py_SET_SIZE(obj, "
"new_size)``: см. :c:func Функция :`Py_SET_SIZE()` (доступна начиная с Python "
"3.9). Для обратной совместимости можно использовать этот макрос::"

#: ../../whatsnew/3.11.rst:2397
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2405
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` macro is "
"set to ``0x030b0000`` (Python 3.11) or higher. C extensions should "
"explicitly include the header files after ``#include <Python.h>``. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"``<Python.h>`` больше не включает файлы заголовков ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` и ``<string. h>``, когда для макроса ``Py_LIMITED_API`` "
"установлено значение ``0x030b0000`` (Python 3.11) или выше. Расширения C "
"должны явно включать файлы заголовков после ``#include <Python.h>``. "
"(Предоставлено Виктором Стиннером в :issue:`45434`.)"

#: ../../whatsnew/3.11.rst:2411
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` have "
"been moved to the ``Include/cpython`` directory. Moreover, the ``eval.h`` "
"header file was removed. These files must not be included directly, as they "
"are already included in ``Python.h``: :ref:`Include Files <api-includes>`. "
"If they have been included directly, consider including ``Python.h`` "
"instead. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"Неограниченные файлы API «cellobject.h», «classobject.h», «code.h», «context."
"h», «funcobject.h», «genobject. h`` и ``longintrepr.h`` были перемещены в "
"каталог ``Include/cpython``. Кроме того, был удален заголовочный файл ``eval."
"h``. Эти файлы нельзя включать напрямую, поскольку они уже включены в "
"``Python.h``: :ref:`Include Files <api-includes>`. Если они были включены "
"напрямую, рассмотрите возможность включения вместо них Python.h. "
"(Предоставлено Виктором Стиннером в :issue:`35134`.)"

#: ../../whatsnew/3.11.rst:2419
msgid ""
"The :c:func:`!PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""
"Макрос :c:func:`!PyUnicode_CHECK_INTERNED` был исключен из ограниченного C "
"API. Там его никогда нельзя было использовать, поскольку использовались "
"внутренние структуры, недоступные в ограниченном C API. (Предоставлено "
"Виктором Стиннером в :issue:`46007`.)"

#: ../../whatsnew/3.11.rst:2424
msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""
"Следующие функции и типы фреймов теперь доступны напрямую с помощью "
"``#include <Python.h>``, больше не нужно добавлять ``#include <frameobject."
"h>``:"

#: ../../whatsnew/3.11.rst:2428
msgid ":c:func:`PyFrame_Check`"
msgstr ":c:func:`PyFrame_Check`"

#: ../../whatsnew/3.11.rst:2429
msgid ":c:func:`PyFrame_GetBack`"
msgstr ":c:func:`PyFrame_GetBack`"

#: ../../whatsnew/3.11.rst:2430
msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ":c:func:`PyFrame_GetBuiltins`"

#: ../../whatsnew/3.11.rst:2431
msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ":c:func:`PyFrame_GetGenerator`"

#: ../../whatsnew/3.11.rst:2432
msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ":c:func:`PyFrame_GetGlobals`"

#: ../../whatsnew/3.11.rst:2433
msgid ":c:func:`PyFrame_GetLasti`"
msgstr ":c:func:`PyFrame_GetLasti`"

#: ../../whatsnew/3.11.rst:2434
msgid ":c:func:`PyFrame_GetLocals`"
msgstr ":c:func:`PyFrame_GetLocals`"

#: ../../whatsnew/3.11.rst:2435
msgid ":c:type:`PyFrame_Type`"
msgstr ":c:type:`PyFrame_Type`"

#: ../../whatsnew/3.11.rst:2437
msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr "(Предоставлено Виктором Стиннером в :gh:`93937`.)"

#: ../../whatsnew/3.11.rst:2441
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ""
"Члены структуры :c:type:`PyFrameObject` были удалены из публичного C API."

#: ../../whatsnew/3.11.rst:2444
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are "
"subject to change at any time, they have been stable for a long time and "
"were used in several popular extensions."
msgstr ""
"Хотя в документации отмечается, что поля :c:type:`PyFrameObject` могут быть "
"изменены в любое время, они долгое время оставались стабильными и "
"использовались в нескольких популярных расширениях."

#: ../../whatsnew/3.11.rst:2448
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of "
"the old implementation."
msgstr ""
"В Python 3.11 структура фрейма была реорганизована, чтобы обеспечить "
"оптимизацию производительности. Некоторые поля были полностью удалены, "
"поскольку они представляли собой детали старой реализации."

#: ../../whatsnew/3.11.rst:2452
msgid ":c:type:`PyFrameObject` fields:"
msgstr "Поля :c:type:`PyFrameObject`:"

#: ../../whatsnew/3.11.rst:2454
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr "``f_back``: используйте :c:func:`PyFrame_GetBack`."

#: ../../whatsnew/3.11.rst:2455
msgid "``f_blockstack``: removed."
msgstr "``f_blockstack``: удалено."

#: ../../whatsnew/3.11.rst:2456
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr "``f_builtins``: используйте :c:func:`PyFrame_GetBuiltins`."

#: ../../whatsnew/3.11.rst:2457
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr "``f_code``: используйте :c:func:`PyFrame_GetCode`."

#: ../../whatsnew/3.11.rst:2458
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr "``f_gen``: используйте :c:func:`PyFrame_GetGenerator`."

#: ../../whatsnew/3.11.rst:2459
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr "``f_globals``: используйте :c:func:`PyFrame_GetGlobals`."

#: ../../whatsnew/3.11.rst:2460
msgid "``f_iblock``: removed."
msgstr "``f_iblock``: удалено."

#: ../../whatsnew/3.11.rst:2461
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` instead; "
"it may be faster."
msgstr ""
"``f_lasti``: используйте :c:func:`PyFrame_GetLasti`. Код, использующий "
"``f_lasti`` с ``PyCode_Addr2Line()``, должен вместо этого использовать :c:"
"func:`PyFrame_GetLineNumber`; это может быть быстрее."

#: ../../whatsnew/3.11.rst:2464
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr "``f_lineno``: используйте :c:func:`PyFrame_GetLineNumber`"

#: ../../whatsnew/3.11.rst:2465
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr "``f_locals``: используйте :c:func:`PyFrame_GetLocals`."

#: ../../whatsnew/3.11.rst:2466
msgid "``f_stackdepth``: removed."
msgstr "``f_stackdepth``: удалено."

#: ../../whatsnew/3.11.rst:2467
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr ""
"``f_state``: нет общедоступного API (переименовано в ``f_frame.f_state``)."

#: ../../whatsnew/3.11.rst:2468
msgid "``f_trace``: no public API."
msgstr "``f_trace``: нет общедоступного API."

#: ../../whatsnew/3.11.rst:2469
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""
"``f_trace_lines``: используйте ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."

#: ../../whatsnew/3.11.rst:2470
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""
"``f_trace_opcodes``: используйте ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."

#: ../../whatsnew/3.11.rst:2471
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr ""
"``f_localsplus``: нет общедоступного API (переименовано в ``f_frame."
"localsplus``)."

#: ../../whatsnew/3.11.rst:2472
msgid "``f_valuestack``: removed."
msgstr "``f_valuestack``: удалено."

#: ../../whatsnew/3.11.rst:2474
msgid ""
"The Python frame object is now created lazily. A side effect is that the :"
"attr:`~frame.f_back` member must not be accessed directly, since its value "
"is now also computed lazily. The :c:func:`PyFrame_GetBack` function must be "
"called instead."
msgstr ""
"Объект фрейма Python теперь создается лениво. Побочным эффектом является то, "
"что к элементу :attr:`~frame.f_back` нельзя обращаться напрямую, поскольку "
"его значение теперь также вычисляется лениво. Вместо этого необходимо "
"вызвать функцию :c:func:`PyFrame_GetBack`."

#: ../../whatsnew/3.11.rst:2480
msgid ""
"Debuggers that accessed the :attr:`~frame.f_locals` directly *must* call :c:"
"func:`PyFrame_GetLocals` instead. They no longer need to call :c:func:`!"
"PyFrame_FastToLocalsWithError` or :c:func:`!PyFrame_LocalsToFast`, in fact "
"they should not call those functions. The necessary updating of the frame is "
"now managed by the virtual machine."
msgstr ""
"Отладчики, которые обращаются к :attr:`~frame.f_locals` напрямую, *должны* "
"вместо этого вызывать :c:func:`PyFrame_GetLocals`. Им больше не нужно "
"вызывать :c:func:`!PyFrame_FastToLocalsWithError` или :c:func:`!"
"PyFrame_LocalsToFast`, фактически им не следует вызывать эти функции. "
"Необходимое обновление фрейма теперь контролируется виртуальной машиной."

#: ../../whatsnew/3.11.rst:2486
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr "Код, определяющий PyFrame_GetCode() на Python 3.8 и старше:"

#: ../../whatsnew/3.11.rst:2488
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    return frame->f_code;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    return frame->f_code;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2496
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr "Код, определяющий PyFrame_GetBack() на Python 3.8 и старше:"

#: ../../whatsnew/3.11.rst:2498
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(frame->f_back);\n"
"    return frame->f_back;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(frame->f_back);\n"
"    return frame->f_back;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2506
msgid ""
"Or use the `pythoncapi_compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these two functions on older Python versions."
msgstr ""
"Или используйте проект `pythoncapi_compat <https://github.com/python/"
"pythoncapi-compat>`__, чтобы получить эти две функции в старых версиях "
"Python."

#: ../../whatsnew/3.11.rst:2510
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr "Изменения членов структуры :c:type:`PyThreadState`:"

#: ../../whatsnew/3.11.rst:2512
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added to "
"Python 3.9 by :issue:`40429`). Warning: the function returns a :term:`strong "
"reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""
"``frame``: удалено, используйте :c:func:`PyThreadState_GetFrame` (функция "
"добавлена ​​в Python 3.9 :issue:`40429`). Внимание: функция возвращает :term:"
"`сильную ссылку`, необходимо вызвать :c:func:`Py_XDECREF`."

#: ../../whatsnew/3.11.rst:2516
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` (functions added to Python 3.11 by :issue:"
"`43760`)."
msgstr ""
"``tracing``: изменено, используйте :c:func:`PyThreadState_EnterTracing` и :c:"
"func:`PyThreadState_LeaveTracing` (функции, добавленные в Python 3.11 :issue:"
"`43760`)."

#: ../../whatsnew/3.11.rst:2519
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - tstate-"
">recursion_remaining)`` instead."
msgstr ""
"``recursion_length``: удалено, вместо этого используйте ``(tstate-"
">recursion_limit - tstate->recursion_remaining)``."

#: ../../whatsnew/3.11.rst:2521
msgid "``stackcheck_counter``: removed."
msgstr "``stackcheck_counter``: удалено."

#: ../../whatsnew/3.11.rst:2523
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""
"Код, определяющий ``PyThreadState_GetFrame()`` на Python 3.8 и старше::"

#: ../../whatsnew/3.11.rst:2525
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n"
"{\n"
"    Py_XINCREF(tstate->frame);\n"
"    return tstate->frame;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1 статический встроенный PyFrameObject* "
"PyThreadState_GetFrame(PyThreadState *tstate) { Py_XINCREF(tstate->frame); "
"вернуть tstate->frame; } #endif"

#: ../../whatsnew/3.11.rst:2533
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""
"Код, определяющий ``PyThreadState_EnterTracing()`` и "
"``PyThreadState_LeaveTracing()`` на Python 3.10 и старше:"

#: ../../whatsnew/3.11.rst:2536
msgid ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc !"
"= NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc !"
"= NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2559
msgid ""
"Or use `the pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these functions on old Python functions."
msgstr ""
"Или используйте `проект pythoncapi-compat <https://github.com/python/"
"pythoncapi-compat>`__, чтобы получить эти функции из старых функций Python."

#: ../../whatsnew/3.11.rst:2563
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr ""
"Дистрибьюторам рекомендуется создавать Python с использованием "
"оптимизированной библиотеки Blake2 libb2_."

#: ../../whatsnew/3.11.rst:2566
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to 1 "
"for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"Поле :c:member:`PyConfig.module_search_paths_set` теперь должно быть "
"установлено в 1 для инициализации, чтобы использовать :c:member:`PyConfig."
"module_search_paths` для инициализации :data:`sys.path`. В противном случае "
"инициализация пересчитает путь и заменит все значения, добавленные в "
"``module_search_paths``."

#: ../../whatsnew/3.11.rst:2571
msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and "
"will not fill any values into :c:member:`PyConfig.module_search_paths`. To "
"calculate default paths and then modify them, finish initialization and use :"
"c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a Python list "
"object and modify it directly."
msgstr ""
":c:func:`PyConfig_Read` больше не вычисляет начальный путь поиска и не "
"заполняет никакие значения в :c:member:`PyConfig.module_search_paths`. Чтобы "
"вычислить пути по умолчанию и затем изменить их, завершите инициализацию и "
"используйте :c:func:`PySys_GetObject` для получения :data:`sys.path` как "
"объекта списка Python и измените его напрямую."

#: ../../whatsnew/3.11.rst:2582
msgid ""
"Deprecate the following functions to configure the Python initialization:"
msgstr "Устаревшие следующие функции для настройки инициализации Python:"

#: ../../whatsnew/3.11.rst:2584
msgid ":c:func:`!PySys_AddWarnOptionUnicode`"
msgstr ":c:func:`!PySys_AddWarnOptionUnicode`"

#: ../../whatsnew/3.11.rst:2585
msgid ":c:func:`!PySys_AddWarnOption`"
msgstr ":c:func:`!PySys_AddWarnOption`"

#: ../../whatsnew/3.11.rst:2586
msgid ":c:func:`!PySys_AddXOption`"
msgstr ":c:func:`!PySys_AddXOption`"

#: ../../whatsnew/3.11.rst:2587
msgid ":c:func:`!PySys_HasWarnOptions`"
msgstr ":c:func:`!PySys_HasWarnOptions`"

#: ../../whatsnew/3.11.rst:2588
msgid ":c:func:`!PySys_SetArgvEx`"
msgstr ":c:func:`!PySys_SetArgvEx`"

#: ../../whatsnew/3.11.rst:2589
msgid ":c:func:`!PySys_SetArgv`"
msgstr ":c:func:`!PySys_SetArgv`"

#: ../../whatsnew/3.11.rst:2590
msgid ":c:func:`!PySys_SetPath`"
msgstr ":c:func:`!PySys_SetPath`"

#: ../../whatsnew/3.11.rst:2591
msgid ":c:func:`!Py_SetPath`"
msgstr ":c:func:`!Py_SetPath`"

#: ../../whatsnew/3.11.rst:2592
msgid ":c:func:`!Py_SetProgramName`"
msgstr ":c:func:`!Py_SetProgramName`"

#: ../../whatsnew/3.11.rst:2593
msgid ":c:func:`!Py_SetPythonHome`"
msgstr ":c:func:`!Py_SetPythonHome`"

#: ../../whatsnew/3.11.rst:2594
msgid ":c:func:`!Py_SetStandardStreamEncoding`"
msgstr ":c:func:`!Py_SetStandardStreamEncoding`"

#: ../../whatsnew/3.11.rst:2595
msgid ":c:func:`!_Py_SetProgramFullPath`"
msgstr ":c:func:`!_Py_SetProgramFullPath`"

#: ../../whatsnew/3.11.rst:2597
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor "
"Stinner in :gh:`88279`.)"
msgstr ""
"Вместо этого используйте новый API :c:type:`PyConfig` для :ref:`Конфигурации "
"инициализации Python <init-config>` (:pep:`587`). (Предоставлено Виктором "
"Стиннером в :gh:`88279`.)"

#: ../../whatsnew/3.11.rst:2601
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use :c:"
"func:`PyObject_Hash` instead. (Contributed by Inada Naoki in :issue:`46864`.)"
msgstr ""
"Устаревший член ob_shash в :c:type:`PyBytesObject`. Вместо этого "
"используйте :c:func:`PyObject_Hash`. (Предоставлено Инадой Наоки в :issue:"
"`46864`.)"

#: ../../whatsnew/3.11.rst:2610
msgid ""
"The following C APIs have been deprecated in earlier Python releases, and "
"will be removed in Python 3.12."
msgstr ""
"Следующие API C устарели в более ранних выпусках Python и будут удалены в "
"Python 3.12."

#: ../../whatsnew/3.11.rst:2613
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.11.rst:2614
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.11.rst:2615
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.11.rst:2616
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2617
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.11.rst:2618
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.11.rst:2619
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.11.rst:2620
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.11.rst:2621
msgid ":c:func:`!PyUnicode_IS_COMPACT`"
msgstr ":c:func:`!PyUnicode_IS_COMPACT`"

#: ../../whatsnew/3.11.rst:2622
msgid ":c:func:`!PyUnicode_IS_READY`"
msgstr ":c:func:`!PyUnicode_IS_READY`"

#: ../../whatsnew/3.11.rst:2623
msgid ":c:func:`PyUnicode_READY`"
msgstr ":c:func:`PyUnicode_READY`"

#: ../../whatsnew/3.11.rst:2624
msgid ":c:func:`!PyUnicode_WSTR_LENGTH`"
msgstr ":c:func:`!PyUnicode_WSTR_LENGTH`"

#: ../../whatsnew/3.11.rst:2625
msgid ":c:func:`!_PyUnicode_AsUnicode`"
msgstr ":c:func:`!_PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2626
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.11.rst:2627
msgid ":c:type:`PyUnicodeObject`"
msgstr ":c:type:`PyUnicodeObject`"

#: ../../whatsnew/3.11.rst:2628
msgid ":c:func:`!PyUnicode_InternImmortal`"
msgstr ":c:func:`!PyUnicode_InternImmortal`"

#: ../../whatsnew/3.11.rst:2636
msgid ""
":c:func:`!PyFrame_BlockSetup` and :c:func:`!PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""
":c:func:`!PyFrame_BlockSetup` и :c:func:`!PyFrame_BlockPop` были удалены. "
"(Предоставлено Марком Шенноном в :issue:`40222`.)"

#: ../../whatsnew/3.11.rst:2640
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr ""
"Удалите следующие математические макросы, используя переменную ``errno``:"

#: ../../whatsnew/3.11.rst:2642
msgid "``Py_ADJUST_ERANGE1()``"
msgstr "``Py_ADJUST_ERANGE1()``"

#: ../../whatsnew/3.11.rst:2643
msgid "``Py_ADJUST_ERANGE2()``"
msgstr "``Py_ADJUST_ERANGE2()``"

#: ../../whatsnew/3.11.rst:2644
msgid "``Py_OVERFLOWED()``"
msgstr "``Py_OVERFLOWED()``"

#: ../../whatsnew/3.11.rst:2645
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr "``Py_SET_ERANGE_IF_OVERFLOW()``"

#: ../../whatsnew/3.11.rst:2646
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr "``Py_SET_ERRNO_ON_MATH_ERROR()``"

#: ../../whatsnew/3.11.rst:2648
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`45412`.)"

#: ../../whatsnew/3.11.rst:2650
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated "
"since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""
"Удалите макросы ``Py_UNICODE_COPY()`` и ``Py_UNICODE_FILL()``, которые "
"устарели, начиная с Python 3.3. Вместо этого используйте функции "
"PyUnicode_CopyCharacters() или memcpy() (строка wchar_t*) и "
"PyUnicode_Fill(). (Предоставлено Виктором Стиннером в :issue:`41123`.)"

#: ../../whatsnew/3.11.rst:2655
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private functions. C "
"extensions should only include the main ``<Python.h>`` header file. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"Удалите заголовочный файл ``pystrhex.h``. Он содержит только частные "
"функции. Расширения C должны включать только основной заголовочный файл "
"``<Python.h>``. (Предоставлено Виктором Стиннером в :issue:`45434`.)"

#: ../../whatsnew/3.11.rst:2659
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in :issue:"
"`45440`.)"
msgstr ""
"Удалите макрос ``Py_FORCE_DOUBLE()``. Он использовался макросом "
"``Py_IS_INFINITY()``. (Предоставлено Виктором Стиннером в :issue:`45440`.)"

#: ../../whatsnew/3.11.rst:2663
msgid ""
"The following items are no longer available when :c:macro:`Py_LIMITED_API` "
"is defined:"
msgstr ""
"Следующие элементы больше недоступны, если определен :c:macro:"
"`Py_LIMITED_API`:"

#: ../../whatsnew/3.11.rst:2666
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ":c:func:`PyMarshal_WriteLongToFile`"

#: ../../whatsnew/3.11.rst:2667
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ":c:func:`PyMarshal_WriteObjectToFile`"

#: ../../whatsnew/3.11.rst:2668
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ":c:func:`PyMarshal_ReadObjectFromString`"

#: ../../whatsnew/3.11.rst:2669
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ":c:func:`PyMarshal_WriteObjectToString`"

#: ../../whatsnew/3.11.rst:2670
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr "макрос ``Py_MARSHAL_VERSION``"

#: ../../whatsnew/3.11.rst:2672
msgid "These are not part of the :ref:`limited API <limited-api-list>`."
msgstr "Они не являются частью :ref:`limited API <limited-api-list>`."

#: ../../whatsnew/3.11.rst:2674
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr "(Предоставлено Виктором Стиннером в :issue:`45474`.)"

#: ../../whatsnew/3.11.rst:2676
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`!PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"Исключите :c:func:`PyWeakref_GET_OBJECT` из ограниченного C API. Это никогда "
"не работало, поскольку структура :c:type:`!PyWeakReference` непрозрачна в "
"ограниченном C API. (Предоставлено Виктором Стиннером в :issue:`35134`.)"

#: ../../whatsnew/3.11.rst:2681
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the public "
"C API by mistake, it must only be used by Python internally. Use the "
"``PyTypeObject.tp_members`` member instead. (Contributed by Victor Stinner "
"in :issue:`40170`.)"
msgstr ""
"Удалите макрос ``PyHeapType_GET_MEMBERS()``. Он был по ошибке предоставлен в "
"общедоступном API C, поэтому его можно использовать только внутри Python. "
"Вместо этого используйте член PyTypeObject.tp_members. (Предоставлено "
"Виктором Стиннером в :issue:`40170`.)"

#: ../../whatsnew/3.11.rst:2686
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C "
"API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""
"Удалите макрос HAVE_PY_SET_53BIT_PRECISION (перемещен во внутренний C API). "
"(Предоставлено Виктором Стиннером в :issue:`45412`.)"

#: ../../whatsnew/3.11.rst:2692
msgid ""
"Remove the :c:type:`Py_UNICODE` encoder APIs, as they have been deprecated "
"since Python 3.3, are little used and are inefficient relative to the "
"recommended alternatives."
msgstr ""
"Удалите API-интерфейсы кодировщика :c:type:`Py_UNICODE`, поскольку они "
"устарели, начиная с Python 3.3, мало используются и неэффективны по "
"сравнению с рекомендуемыми альтернативами."

#: ../../whatsnew/3.11.rst:2697
msgid "The removed functions are:"
msgstr "Удаленные функции:"

#: ../../whatsnew/3.11.rst:2699
msgid ":func:`!PyUnicode_Encode`"
msgstr ":func:`!PyUnicode_Encode`"

#: ../../whatsnew/3.11.rst:2700
msgid ":func:`!PyUnicode_EncodeASCII`"
msgstr ":func:`!PyUnicode_EncodeASCII`"

#: ../../whatsnew/3.11.rst:2701
msgid ":func:`!PyUnicode_EncodeLatin1`"
msgstr ":func:`!PyUnicode_EncodeLatin1`"

#: ../../whatsnew/3.11.rst:2702
msgid ":func:`!PyUnicode_EncodeUTF7`"
msgstr ":func:`!PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.11.rst:2703
msgid ":func:`!PyUnicode_EncodeUTF8`"
msgstr ":func:`!PyUnicode_EncodeUTF8`"

#: ../../whatsnew/3.11.rst:2704
msgid ":func:`!PyUnicode_EncodeUTF16`"
msgstr ":func:`!PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.11.rst:2705
msgid ":func:`!PyUnicode_EncodeUTF32`"
msgstr ":func:`!PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.11.rst:2706
msgid ":func:`!PyUnicode_EncodeUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2707
msgid ":func:`!PyUnicode_EncodeRawUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeRawUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2708
msgid ":func:`!PyUnicode_EncodeCharmap`"
msgstr ":func:`!PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.11.rst:2709
msgid ":func:`!PyUnicode_TranslateCharmap`"
msgstr ":func:`!PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.11.rst:2710
msgid ":func:`!PyUnicode_EncodeDecimal`"
msgstr ":func:`!PyUnicode_EncodeDecimal`"

#: ../../whatsnew/3.11.rst:2711
msgid ":func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ":func:`!PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.11.rst:2713
msgid ""
"See :pep:`624` for details and :pep:`migration guidance <624#alternative-"
"apis>`. (Contributed by Inada Naoki in :issue:`44029`.)"
msgstr ""
"Подробности см. в :pep:`624`, а также в :pep:`руководстве по миграции "
"<624#alternative-apis>`. (Предоставлено Инадой Наоки в :issue:`44029`.)"

#: ../../whatsnew/3.11.rst:2719
msgid "Notable changes in 3.11.4"
msgstr "Заметные изменения в 3.11.4"

#: ../../whatsnew/3.11.rst:2722
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.11.rst:2724
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
"Методы извлечения в :mod:`tarfile` и :func:`shutil.unpack_archive` имеют "
"новый аргумент *filter*, который позволяет ограничить возможности tar, "
"которые могут быть неожиданными или опасными, например создание файлов вне "
"каталога назначения. Подробности смотрите в :ref:`tarfile-extraction-"
"filter`. В Python 3.12 использование без аргумента *filter* приведет к "
"появлению :exc:`DeprecationWarning`. В Python 3.14 значение по умолчанию "
"переключится на ``'data'``. (Предоставлено Петром Викториным в :pep:`706`.)"

#: ../../whatsnew/3.11.rst:2736
msgid "Notable changes in 3.11.5"
msgstr "Заметные изменения в 3.11.5"

#: ../../whatsnew/3.11.rst:2739
msgid "OpenSSL"
msgstr "OpenSSL"

#: ../../whatsnew/3.11.rst:2741
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""
"Сборки Windows и установщики macOS с сайта python.org теперь используют "
"OpenSSL 3.0."
