# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Vladimir, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 15:49+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Vladimir, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr "Ожидает удаления в Python 3.15"

#: ../../deprecations/pending-removal-in-3.15.rst:4
msgid ""
":class:`http.server.CGIHTTPRequestHandler` will be removed along with its "
"related ``--cgi`` flag to ``python -m http.server``.  It was obsolete and "
"rarely used.  No direct replacement exists.  *Anything* is better than CGI "
"to interface a web server with a request handler."
msgstr ""
":class:`http.server.CGIHTTPRequestHandler` will be removed along with its "
"related ``--cgi`` flag to ``python -m http.server``.  It was obsolete and "
"rarely used.  No direct replacement exists.  *Anything* is better than CGI "
"to interface a web server with a request handler."

#: ../../deprecations/pending-removal-in-3.15.rst:9
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "exec_module"

#: ../../deprecations/pending-removal-in-3.15.rst:13
msgid ""
":class:`locale`: :func:`locale.getdefaultlocale` was deprecated in Python "
"3.11 and originally planned for removal in Python 3.13 (:gh:`90817`), but "
"removal has been postponed to Python 3.15. Use :func:`locale.setlocale`, :"
"func:`locale.getencoding` and :func:`locale.getlocale` instead. (Contributed "
"by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
":class:`locale`: :func:`locale.getdefaultlocale` was deprecated in Python "
"3.11 and originally planned for removal in Python 3.13 (:gh:`90817`), but "
"removal has been postponed to Python 3.15. Use :func:`locale.setlocale`, :"
"func:`locale.getencoding` and :func:`locale.getlocale` instead. (Contributed "
"by Hugo van Kemenade in :gh:`111187`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:20
msgid ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` is deprecated and "
"scheduled for removal in Python 3.15. From Python 3.13 onwards, use ``os."
"path.isreserved`` to detect reserved paths on Windows."
msgstr ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` устарел и запланирован "
"к удалению в Python 3.15. Начиная с Python 3.13, используйте os.path."
"isreserved для обнаружения зарезервированных путей в Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:25
msgid ""
":mod:`platform`: :func:`~platform.java_ver` is deprecated and will be "
"removed in 3.15. It was largely untested, had a confusing API, and was only "
"useful for Jython support. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
":mod:`platform`: :func:`~platform.java_ver` устарел и будет удален в версии "
"3.15. Он практически не тестировался, имел запутанный API и был полезен "
"только для поддержки Jython. (Предоставлено Никитой Соболевым в :gh:"
"`116349`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:31
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:33
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"Аргумент *check_home* из :func:`sysconfig.is_python_build` устарел начиная с "
"Python 3.12."

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ""
":mod:`threading`: Passing any arguments to :func:`threading.RLock` is now "
"deprecated. C version allows any numbers of args and kwargs, but they are "
"just ignored. Python version does not allow any arguments. All arguments "
"will be removed from :func:`threading.RLock` in Python 3.15. (Contributed by "
"Nikita Sobolev in :gh:`102029`.)"
msgstr ""
":mod:`threading`: Передача любых аргументов в :func:`threading.RLock` теперь "
"устарела. Версия C допускает любое количество аргументов и кваргов, но они "
"просто игнорируются. Версия Python не допускает никаких аргументов. Все "
"аргументы будут удалены из :func:`threading.RLock` в Python 3.15. (Добавлен "
"Никитой Соболевым в :gh:`102029`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:43
msgid ":class:`typing.NamedTuple`:"
msgstr ":class:`typing.NamedTuple`:"

#: ../../deprecations/pending-removal-in-3.15.rst:45
msgid ""
"The undocumented keyword argument syntax for creating :class:`!NamedTuple` "
"classes (``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be "
"disallowed in 3.15. Use the class-based syntax or the functional syntax "
"instead."
msgstr ""
"Недокументированный синтаксис аргумента ключевого слова для создания "
"классов :class:`!NamedTuple` (``NT = NamedTuple(\"NT\", x=int)``) устарел и "
"будет запрещен в версии 3.15. Вместо этого используйте синтаксис на основе "
"классов или функциональный синтаксис."

#: ../../deprecations/pending-removal-in-3.15.rst:49
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:51
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Доступ к :attr:`~codeobject.co_lnotab` устарел в :"
"pep:`626` с версии 3.10 и планировалось удалить в 3.12, но он получил только "
"правильное :exc:`DeprecationWarning ` в 3.12. Может быть удалено в 3.15. "
"(Добавлен Никитой Соболевым в :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:58
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"When using the functional syntax to create a :class:`!NamedTuple` class, "
"failing to pass a value to the *fields* parameter (``NT = "
"NamedTuple(\"NT\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``NT = NamedTuple(\"NT\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!NamedTuple` class with 0 "
"fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"[])``."
msgstr ""
"При использовании функционального синтаксиса для создания класса :class:`!"
"NamedTuple` невозможность передать значение параметру *fields* (``NT = "
"NamedTuple(\"NT\")``) считается устаревшей. Передача None в параметр "
"*fields* (NT = NamedTuple(\"NT\", None)``) также не рекомендуется. Оба будут "
"запрещены в Python 3.15. Чтобы создать класс :class:`!NamedTuple` с 0 "
"полями, используйте ``class NT(NamedTuple): pass`` или ``NT = "
"NamedTuple(\"NT\", [])``."

#: ../../deprecations/pending-removal-in-3.15.rst:67
msgid ""
":class:`typing.TypedDict`: When using the functional syntax to create a :"
"class:`!TypedDict` class, failing to pass a value to the *fields* parameter "
"(``TD = TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``TD = TypedDict(\"TD\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!TypedDict` class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""
":class:`typing.TypedDict`: При использовании функционального синтаксиса для "
"создания класса :class:`!TypedDict` не удается передать значение параметру "
"*fields* (``TD = TypedDict(\"TD\")`` ) устарел. Передача None в параметр "
"*fields* (``TD = TypedDict(\"TD\", None)``) также не рекомендуется. Оба "
"будут запрещены в Python 3.15. Чтобы создать класс :class:`!TypedDict` с 0 "
"полями, используйте ``class TD(TypedDict): pass`` или ``TD = "
"TypedDict(\"TD\", {})``."

#: ../../deprecations/pending-removal-in-3.15.rst:74
msgid ""
":mod:`wave`: Deprecate the ``getmark()``, ``setmark()`` and ``getmarkers()`` "
"methods of the :class:`wave.Wave_read` and :class:`wave.Wave_write` classes. "
"They will be removed in Python 3.15. (Contributed by Victor Stinner in :gh:"
"`105096`.)"
msgstr ""
":mod:`wave`: Устаревшие методы ``getmark()``, ``setmark()`` и "
"``getmarkers()`` в :class:`wave.Wave_read` и :class:`wave. Классы "
"Wave_write`. Они будут удалены в Python 3.15. (Предоставлено Виктором "
"Стиннером в :gh:`105096`.)"
