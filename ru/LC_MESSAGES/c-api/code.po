# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Jon Britva, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr "Объекты кода"

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Объекты кода — это низкоуровневая деталь реализации CPython. Каждый из них "
"представляет собой фрагмент исполняемого кода, который еще не связан с "
"функцией."

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"Структура C объектов, используемых для описания объектов кода. Поля этого "
"типа могут быть изменены в любое время."

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Это экземпляр :c:type:`PyTypeObject`, представляющий объект кода Python "
"<code-objects>`."

#: ../../c-api/code.rst:30
msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Возвращает true, если *co* является :ref:`объектом кода <code-objects>`. Эта "
"функция всегда завершается успешно."

#: ../../c-api/code.rst:35
msgid "Return the number of free variables in *co*."
msgstr ""

#: ../../c-api/code.rst:39
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling :c:func:`PyCode_New` "
"directly will bind you to a precise Python version since the definition of "
"the bytecode changes often. The many arguments of this function are inter-"
"dependent in complex ways, meaning that subtle changes to values are likely "
"to result in incorrect execution or VM crashes. Use this function only with "
"extreme care."
msgstr ""

#: ../../c-api/code.rst:46
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Добавлены параметры Qualname иExceptiontable."

#: ../../c-api/code.rst:51
msgid ""
"Similar to :c:func:`PyCode_New`, but with an extra \"posonlyargcount\" for "
"positional-only arguments. The same caveats that apply to ``PyCode_New`` "
"also apply to this function."
msgstr ""

#: ../../c-api/code.rst:56
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Добавлены параметры Qualname иExceptiontable."

#: ../../c-api/code.rst:61
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Верните новый пустой объект кода с указанным именем файла, именем функции и "
"номером первой строки. Результирующий объект кода вызовет исключение при "
"выполнении."

#: ../../c-api/code.rst:67
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Возвращает номер строки инструкции, которая встречается до или перед "
"``byte_offset`` и заканчивается после нее. Если вам нужен только номер "
"строки кадра, используйте вместо него :c:func:`PyFrame_GetLineNumber`."

#: ../../c-api/code.rst:70
msgid ""
"For efficiently iterating over the line numbers in a code object, use `the "
"API described in PEP 626 <https://peps.python.org/pep-0626/#out-of-process-"
"debuggers-and-profilers>`_."
msgstr ""

#: ../../c-api/code.rst:75
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Устанавливает переданные указатели ``int`` на номера строк и столбцов "
"исходного кода для инструкции в ``byte_offset``. Устанавливает значение «0», "
"когда информация недоступна для какого-либо конкретного элемента."

#: ../../c-api/code.rst:79
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr ""
"Возвращает ``1``, если функция завершилась успешно, и 0 в противном случае."

#: ../../c-api/code.rst:85
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_code')``. Возвращает сильную ссылку "
"на :c:type:`PyBytesObject`, представляющий байт-код в объекте кода. В случае "
"ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:90
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Этот PyBytesObject может быть создан интерпретатором по требованию и не "
"обязательно представляет собой байт-код, фактически выполняемый CPython. "
"Основной вариант использования этой функции — отладчики и профилировщики."

#: ../../c-api/code.rst:98
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_varnames')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена локальных переменных. В "
"случае ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:107
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_cellvars')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена локальных переменных, на "
"которые ссылаются вложенные функции. В случае ошибки возвращается NULL и "
"возникает исключение."

#: ../../c-api/code.rst:116
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_freevars')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена свободных переменных. В "
"случае ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:3
msgid "object"
msgstr "объект"

#: ../../c-api/code.rst:3
msgid "code"
msgstr "код"

#: ../../c-api/code.rst:3
msgid "code object"
msgstr "объект кода"
