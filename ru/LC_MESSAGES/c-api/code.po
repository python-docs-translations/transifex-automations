# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr "Объекты кода"

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Объекты кода — это низкоуровневая деталь реализации CPython. Каждый из них "
"представляет собой фрагмент исполняемого кода, который еще не связан с "
"функцией."

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"Структура C объектов, используемых для описания объектов кода. Поля этого "
"типа могут быть изменены в любое время."

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Это экземпляр :c:type:`PyTypeObject`, представляющий объект кода Python "
"<code-objects>`."

#: ../../c-api/code.rst:30
msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Возвращает true, если *co* является :ref:`объектом кода <code-objects>`. Эта "
"функция всегда завершается успешно."

#: ../../c-api/code.rst:35
msgid "Return the number of free variables in a code object."
msgstr "Возвращает количество свободных переменных в объекте кода."

#: ../../c-api/code.rst:39
msgid "Return the position of the first free variable in a code object."
msgstr "Возвращает позицию первой свободной переменной в объекте кода."

#: ../../c-api/code.rst:43
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead."
msgstr ""
"Верните новый объект кода. Если вам нужен фиктивный объект кода для создания "
"фрейма, используйте вместо него :c:func:`PyCode_NewEmpty`."

#: ../../c-api/code.rst:46
msgid ""
"Since the definition of the bytecode changes often, calling :c:func:"
"`PyUnstable_Code_New` directly can bind you to a precise Python version."
msgstr ""
"Поскольку определение байт-кода часто меняется, прямой вызов :c:func:"
"`PyUnstable_Code_New` может привязать вас к точной версии Python."

#: ../../c-api/code.rst:49
msgid ""
"The many arguments of this function are inter-dependent in complex ways, "
"meaning that subtle changes to values are likely to result in incorrect "
"execution or VM crashes. Use this function only with extreme care."
msgstr ""
"Многие аргументы этой функции сложным образом взаимозависимы, а это "
"означает, что незначительные изменения значений могут привести к "
"неправильному выполнению или сбою виртуальной машины. Используйте эту "
"функцию только с особой осторожностью."

#: ../../c-api/code.rst:53
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Добавлены параметры Qualname иExceptiontable."

#: ../../c-api/code.rst:60
msgid ""
"Renamed from ``PyCode_New`` as part of :ref:`unstable-c-api`. The old name "
"is deprecated, but will remain available until the signature changes again."
msgstr ""
"Переименован из PyCode_New как часть :ref:`unstable-c-api`. Старое имя "
"устарело, но останется доступным до тех пор, пока подпись не изменится снова."

#: ../../c-api/code.rst:66
msgid ""
"Similar to :c:func:`PyUnstable_Code_New`, but with an extra "
"\"posonlyargcount\" for positional-only arguments. The same caveats that "
"apply to ``PyUnstable_Code_New`` also apply to this function."
msgstr ""
"Аналогично :c:func:`PyUnstable_Code_New`, но с дополнительным "
"«posonlyargcount» для позиционных аргументов. К этой функции применимы те же "
"предостережения, что и к PyUnstable_Code_New."

#: ../../c-api/code.rst:71
msgid "as ``PyCode_NewWithPosOnlyArgs``"
msgstr "как ``PyCode_NewWithPosOnlyArgs``"

#: ../../c-api/code.rst:73
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Добавлены параметры Qualname иExceptiontable."

#: ../../c-api/code.rst:78
msgid ""
"Renamed to ``PyUnstable_Code_NewWithPosOnlyArgs``. The old name is "
"deprecated, but will remain available until the signature changes again."
msgstr ""
"Переименован в PyUnstable_Code_NewWithPosOnlyArgs. Старое имя устарело, но "
"останется доступным до тех пор, пока подпись не изменится снова."

#: ../../c-api/code.rst:84
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Верните новый пустой объект кода с указанным именем файла, именем функции и "
"номером первой строки. Результирующий объект кода вызовет исключение при "
"выполнении."

#: ../../c-api/code.rst:90
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Возвращает номер строки инструкции, которая встречается до или перед "
"``byte_offset`` и заканчивается после нее. Если вам нужен только номер "
"строки кадра, используйте вместо него :c:func:`PyFrame_GetLineNumber`."

#: ../../c-api/code.rst:93
msgid ""
"For efficiently iterating over the line numbers in a code object, use :pep:"
"`the API described in PEP 626 <0626#out-of-process-debuggers-and-profilers>`."
msgstr ""
"Для эффективного перебора номеров строк в объекте кода используйте :pep:"
"`API, описанный в PEP 626 <0626#out-of-process-debuggers-and-profilers>`."

#: ../../c-api/code.rst:98
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Устанавливает переданные указатели ``int`` на номера строк и столбцов "
"исходного кода для инструкции в ``byte_offset``. Устанавливает значение «0», "
"когда информация недоступна для какого-либо конкретного элемента."

#: ../../c-api/code.rst:102
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr ""
"Возвращает ``1``, если функция завершилась успешно, и 0 в противном случае."

#: ../../c-api/code.rst:108
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_code')``. Возвращает сильную ссылку "
"на :c:type:`PyBytesObject`, представляющий байт-код в объекте кода. В случае "
"ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:113
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Этот PyBytesObject может быть создан интерпретатором по требованию и не "
"обязательно представляет собой байт-код, фактически выполняемый CPython. "
"Основной вариант использования этой функции — отладчики и профилировщики."

#: ../../c-api/code.rst:121
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_varnames')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена локальных переменных. В "
"случае ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:130
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_cellvars')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена локальных переменных, на "
"которые ссылаются вложенные функции. В случае ошибки возвращается NULL и "
"возникает исключение."

#: ../../c-api/code.rst:139
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Эквивалент кода Python ``getattr(co, 'co_freevars')``. Возвращает новую "
"ссылку на :c:type:`PyTupleObject`, содержащую имена свободных переменных. В "
"случае ошибки возвращается NULL и возникает исключение."

#: ../../c-api/code.rst:147
msgid ""
"Register *callback* as a code object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyCode_ClearWatcher`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Зарегистрируйте *callback* в качестве наблюдателя за объектами кода для "
"текущего интерпретатора. Возвращает идентификатор, который можно передать в :"
"c:func:`PyCode_ClearWatcher`. В случае ошибки (например, больше нет "
"доступных идентификаторов наблюдателей) верните ``-1`` и установите "
"исключение."

#: ../../c-api/code.rst:156
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyCode_AddWatcher` for the current interpreter. Return ``0`` on success, or "
"``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""
"Очистить наблюдатель, идентифицированный *watcher_id*, ранее возвращенный "
"из :c:func:`PyCode_AddWatcher` для текущего интерпретатора. Возвращает ``0`` "
"в случае успеха или ``-1`` и устанавливает исключение в случае ошибки "
"(например, если данный *watcher_id* никогда не был зарегистрирован)."

#: ../../c-api/code.rst:165
msgid ""
"Enumeration of possible code object watcher events: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"
msgstr ""
"Перечисление возможных событий наблюдателя за объектами кода: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"

#: ../../c-api/code.rst:173
msgid "Type of a code object watcher callback function."
msgstr "Тип функции обратного вызова наблюдателя за объектом кода."

#: ../../c-api/code.rst:175
msgid ""
"If *event* is ``PY_CODE_EVENT_CREATE``, then the callback is invoked after "
"`co` has been fully initialized. Otherwise, the callback is invoked before "
"the destruction of *co* takes place, so the prior state of *co* can be "
"inspected."
msgstr ""
"Если *event* равно ``PY_CODE_EVENT_CREATE``, обратный вызов вызывается после "
"полной инициализации ``co`. В противном случае обратный вызов вызывается до "
"того, как произойдет уничтожение *co*, поэтому можно проверить предыдущее "
"состояние *co*."

#: ../../c-api/code.rst:180
msgid ""
"If *event* is ``PY_CODE_EVENT_DESTROY``, taking a reference in the callback "
"to the about-to-be-destroyed code object will resurrect it and prevent it "
"from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Если *event* равно ``PY_CODE_EVENT_DESTROY``, использование ссылки в "
"обратном вызове на объект кода, который вот-вот будет уничтожен, воскресит "
"его и предотвратит его освобождение в данный момент. Когда воскрешенный "
"объект будет позже уничтожен, все активные в тот момент обратные вызовы "
"наблюдателя будут вызваны снова."

#: ../../c-api/code.rst:185
msgid ""
"Users of this API should not rely on internal runtime implementation "
"details. Such details may include, but are not limited to, the exact order "
"and timing of creation and destruction of code objects. While changes in "
"these details may result in differences observable by watchers (including "
"whether a callback is invoked or not), it does not change the semantics of "
"the Python code being executed."
msgstr ""
"Пользователи этого API не должны полагаться на детали реализации внутренней "
"среды выполнения. Такие детали могут включать, помимо прочего, точный "
"порядок и время создания и уничтожения объектов кода. Хотя изменения в этих "
"деталях могут привести к различиям, наблюдаемым наблюдателями (в том числе к "
"тому, вызывается ли обратный вызов или нет), это не меняет семантику "
"исполняемого кода Python."

#: ../../c-api/code.rst:192
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Если обратный вызов устанавливает исключение, он должен вернуть ``-1``; это "
"исключение будет напечатано как невызываемое с использованием :c:func:"
"`PyErr_WriteUnraisable`. В противном случае он должен вернуть ``0``."

#: ../../c-api/code.rst:196
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"При входе в обратный вызов уже может быть установлено ожидающее исключение. "
"В этом случае обратный вызов должен вернуть ``0`` с тем же самым "
"установленным исключением. Это означает, что обратный вызов не может "
"вызывать какой-либо другой API, который может установить исключение, если он "
"сначала не сохранит и не очистит состояние исключения, а затем не "
"восстановит его перед возвратом."

#: ../../c-api/code.rst:206
msgid "Extra information"
msgstr "Дополнительная информация"

#: ../../c-api/code.rst:208
msgid ""
"To support low-level extensions to frame evaluation, such as external just-"
"in-time compilers, it is possible to attach arbitrary extra data to code "
"objects."
msgstr ""
"Для поддержки низкоуровневых расширений для оценки кадра, таких как внешние "
"JIT-компиляторы, к объектам кода можно прикреплять произвольные "
"дополнительные данные."

#: ../../c-api/code.rst:212
msgid ""
"These functions are part of the unstable C API tier: this functionality is a "
"CPython implementation detail, and the API may change without deprecation "
"warnings."
msgstr ""
"Эти функции являются частью нестабильного уровня C API: эта функциональность "
"является деталью реализации CPython, и API может измениться без "
"предупреждений об устаревании."

#: ../../c-api/code.rst:218
msgid "Return a new an opaque index value used to adding data to code objects."
msgstr ""
"Возвращает новое непрозрачное значение индекса, используемое для добавления "
"данных в объекты кода."

#: ../../c-api/code.rst:220
msgid ""
"You generally call this function once (per interpreter) and use the result "
"with ``PyCode_GetExtra`` and ``PyCode_SetExtra`` to manipulate data on "
"individual code objects."
msgstr ""
"Обычно вы вызываете эту функцию один раз (для каждого интерпретатора) и "
"используете результат с PyCode_GetExtra и PyCode_SetExtra для "
"манипулирования данными в отдельных объектах кода."

#: ../../c-api/code.rst:224
msgid ""
"If *free* is not ``NULL``: when a code object is deallocated, *free* will be "
"called on non-``NULL`` data stored under the new index. Use :c:func:"
"`Py_DecRef` when storing :c:type:`PyObject`."
msgstr ""
"Если *free* не является ``NULL``: когда объект кода освобождается, *free* "
"будет вызываться для данных, отличных от ``NULL``, хранящихся под новым "
"индексом. Используйте :c:func:`Py_DecRef` при сохранении :c:type:` PyObj "
"ect`."

#: ../../c-api/code.rst:230
msgid "as ``_PyEval_RequestCodeExtraIndex``"
msgstr "как ``_PyEval_RequestCodeExtraIndex``"

#: ../../c-api/code.rst:234
msgid ""
"Renamed to ``PyUnstable_Eval_RequestCodeExtraIndex``. The old private name "
"is deprecated, but will be available until the API changes."
msgstr ""
"Переименован в PyUnstable_Eval_RequestCodeExtraIndex. Старое частное имя "
"устарело, но будет доступно до изменения API."

#: ../../c-api/code.rst:240
msgid ""
"Set *extra* to the extra data stored under the given index. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Установите *extra* для дополнительных данных, хранящихся под данным "
"индексом. Вернуть 0 в случае успеха. Установите исключение и верните -1 в "
"случае ошибки."

#: ../../c-api/code.rst:243
msgid ""
"If no data was set under the index, set *extra* to ``NULL`` and return 0 "
"without setting an exception."
msgstr ""
"Если в индексе не было задано никаких данных, установите для *extra* "
"значение ``NULL`` и верните 0, не устанавливая исключения."

#: ../../c-api/code.rst:248
msgid "as ``_PyCode_GetExtra``"
msgstr "как ``_PyCode_GetExtra``"

#: ../../c-api/code.rst:252
msgid ""
"Renamed to ``PyUnstable_Code_GetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Переименован в PyUnstable_Code_GetExtra. Старое частное имя устарело, но "
"будет доступно до изменения API."

#: ../../c-api/code.rst:258
msgid ""
"Set the extra data stored under the given index to *extra*. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Установите для дополнительных данных, хранящихся под данным индексом, "
"значение *extra*. Вернуть 0 в случае успеха. Установите исключение и верните "
"-1 в случае ошибки."

#: ../../c-api/code.rst:263
msgid "as ``_PyCode_SetExtra``"
msgstr "как ``_PyCode_SetExtra``"

#: ../../c-api/code.rst:267
msgid ""
"Renamed to ``PyUnstable_Code_SetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Переименован в PyUnstable_Code_SetExtra. Старое частное имя устарело, но "
"будет доступно до изменения API."

#: ../../c-api/code.rst:3
msgid "object"
msgstr "объект"

#: ../../c-api/code.rst:3
msgid "code"
msgstr "код"

#: ../../c-api/code.rst:3
msgid "code object"
msgstr "объект кода"

#: ../../c-api/code.rst:56
msgid "PyCode_New (C function)"
msgstr "PyCode_New (функция C)"

#: ../../c-api/code.rst:69
msgid "PyCode_NewWithPosOnlyArgs (C function)"
msgstr "PyCode_NewWithPosOnlyArgs (функция C)"

#: ../../c-api/code.rst:228
msgid "_PyEval_RequestCodeExtraIndex (C function)"
msgstr "_PyEval_RequestCodeExtraIndex (функция C)"

#: ../../c-api/code.rst:246
msgid "_PyCode_GetExtra (C function)"
msgstr "_PyCode_GetExtra (функция C)"

#: ../../c-api/code.rst:261
msgid "_PyCode_SetExtra (C function)"
msgstr "_PyCode_SetExtra (функция C)"
