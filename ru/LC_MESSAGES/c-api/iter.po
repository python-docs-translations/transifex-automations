# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr "Протокол итератора"

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr "Есть две функции специально для работы с итераторами."

#: ../../c-api/iter.rst:12
msgid ""
"Return non-zero if the object *o* can be safely passed to :c:func:"
"`PyIter_Next`, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Возвращайте ненулевое значение, если объект *o* можно безопасно передать в :"
"c:func:`PyIter_Next`, и ``0`` в противном случае. Эта функция всегда "
"завершается успешно."

#: ../../c-api/iter.rst:17
msgid ""
"Return non-zero if the object *o* provides the :class:`AsyncIterator` "
"protocol, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Возвращает ненулевое значение, если объект *o* предоставляет протокол :class:"
"`AsyncIterator`, и ``0`` в противном случае. Эта функция всегда завершается "
"успешно."

#: ../../c-api/iter.rst:24
msgid ""
"Return the next value from the iterator *o*.  The object must be an iterator "
"according to :c:func:`PyIter_Check` (it is up to the caller to check this). "
"If there are no remaining values, returns ``NULL`` with no exception set. If "
"an error occurs while retrieving the item, returns ``NULL`` and passes along "
"the exception."
msgstr ""
"Возвращает следующее значение итератора *o*. Объект должен быть итератором в "
"соответствии с :c:func:`PyIter_Check` (проверить это должен вызывающий "
"объект). Если оставшихся значений нет, возвращается NULL без каких-либо "
"исключений. Если при получении элемента возникает ошибка, возвращается NULL "
"и передается исключение."

#: ../../c-api/iter.rst:30
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""
"Чтобы написать цикл, который перебирает итератор, код C должен выглядеть "
"примерно так:"

#: ../../c-api/iter.rst:59
msgid ""
"The enum value used to represent different results of :c:func:`PyIter_Send`."
msgstr ""
"Значение перечисления, используемое для представления различных результатов :"
"c:func:`PyIter_Send`."

#: ../../c-api/iter.rst:66
msgid "Sends the *arg* value into the iterator *iter*. Returns:"
msgstr "Отправляет значение *arg* в итератор *iter*. Возврат:"

#: ../../c-api/iter.rst:68
msgid ""
"``PYGEN_RETURN`` if iterator returns. Return value is returned via *presult*."
msgstr ""
"``PYGEN_RETURN``, если итератор возвращается. Возвращаемое значение "
"возвращается через *presult*."

#: ../../c-api/iter.rst:69
msgid ""
"``PYGEN_NEXT`` if iterator yields. Yielded value is returned via *presult*."
msgstr ""
"``PYGEN_NEXT``, если итератор дает результат. Полученное значение "
"возвращается через *presult*."

#: ../../c-api/iter.rst:70
msgid ""
"``PYGEN_ERROR`` if iterator has raised and exception. *presult* is set to "
"``NULL``."
msgstr ""
"``PYGEN_ERROR``, если итератор вызвал исключение. Для *presult* установлено "
"значение ``NULL``."
