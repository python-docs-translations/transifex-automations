# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr "Общие структуры объектов"

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr ""
"Существует большое количество структур, которые используются при определении "
"типов объектов в Python. В этом разделе описываются эти структуры и способы "
"их использования."

#: ../../c-api/structures.rst:14
msgid "Base object types and macros"
msgstr "Базовые типы объектов и макросы"

#: ../../c-api/structures.rst:16
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr ""

#: ../../c-api/structures.rst:25
msgid ""
"All object types are extensions of this type.  This is a type which contains "
"the information Python needs to treat a pointer to an object as an object.  "
"In a normal \"release\" build, it contains only the object's reference count "
"and a pointer to the corresponding type object. Nothing is actually declared "
"to be a :c:type:`PyObject`, but every pointer to a Python object can be cast "
"to a :c:expr:`PyObject*`.  Access to the members must be done by using the "
"macros :c:macro:`Py_REFCNT` and :c:macro:`Py_TYPE`."
msgstr ""
"Все типы объектов являются расширениями этого типа. Это тип, который "
"содержит информацию, необходимую Python для обработки указателя на объект "
"как объекта. В обычной «релизной» сборке она содержит только счетчик ссылок "
"на объект и указатель на объект соответствующего типа. На самом деле ничто "
"не объявлено как :c:type:`PyObject`, но каждый указатель на объект Python "
"может быть преобразован в :c:expr:`PyObject*`. Доступ к членам должен "
"осуществляться с помощью макросов :c:macro:`Py_REFCNT` и :c:macro:`Py_TYPE`."

#: ../../c-api/structures.rst:37
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API. Access to the members "
"must be done by using the macros :c:macro:`Py_REFCNT`, :c:macro:`Py_TYPE`, "
"and :c:macro:`Py_SIZE`."
msgstr ""

#: ../../c-api/structures.rst:46
msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr ""
"Это макрос, используемый при объявлении новых типов, представляющих объекты "
"без меняющейся длины. Макрос PyObject_HEAD расширяется до::"

#: ../../c-api/structures.rst:51
msgid "See documentation of :c:type:`PyObject` above."
msgstr "См. документацию :c:type:`PyObject` выше."

#: ../../c-api/structures.rst:56
msgid ""
"This is a macro used when declaring new types which represent objects with a "
"length that varies from instance to instance. The PyObject_VAR_HEAD macro "
"expands to::"
msgstr ""
"Это макрос, используемый при объявлении новых типов, которые представляют "
"объекты, длина которых варьируется от экземпляра к экземпляру. Макрос "
"PyObject_VAR_HEAD расширяется до::"

#: ../../c-api/structures.rst:62
msgid "See documentation of :c:type:`PyVarObject` above."
msgstr "См. документацию :c:type:`PyVarObject` выше."

#: ../../c-api/structures.rst:67
msgid ""
"Test if the *x* object is the *y* object, the same as ``x is y`` in Python."
msgstr ""
"Проверьте, является ли объект *x* объектом *y*, так же, как ``x is y`` в "
"Python."

#: ../../c-api/structures.rst:74
msgid ""
"Test if an object is the ``None`` singleton, the same as ``x is None`` in "
"Python."
msgstr ""
"Проверьте, является ли объект синглтоном None, так же, как x is None в "
"Python."

#: ../../c-api/structures.rst:82
msgid ""
"Test if an object is the ``True`` singleton, the same as ``x is True`` in "
"Python."
msgstr ""
"Проверьте, является ли объект синглтоном ``True``, так же, как ``x is True`` "
"в Python."

#: ../../c-api/structures.rst:90
msgid ""
"Test if an object is the ``False`` singleton, the same as ``x is False`` in "
"Python."
msgstr ""
"Проверьте, является ли объект синглтоном ``False``, так же, как ``x is "
"False`` в Python."

#: ../../c-api/structures.rst:98
msgid "Get the type of the Python object *o*."
msgstr "Получите тип объекта Python *o*."

#: ../../c-api/structures.rst:100
msgid "Return a :term:`borrowed reference`."
msgstr "Вернуть :term:`заимствованную ссылку`."

#: ../../c-api/structures.rst:102
msgid "Use the :c:func:`Py_SET_TYPE` function to set an object type."
msgstr "Используйте функцию :c:func:`Py_SET_TYPE` для установки типа объекта."

#: ../../c-api/structures.rst:107
msgid ""
"Return non-zero if the object *o* type is *type*. Return zero otherwise. "
"Equivalent to: ``Py_TYPE(o) == type``."
msgstr ""
"Возвращает ненулевое значение, если тип объекта *o* равен *type*. В "
"противном случае верните ноль. Эквивалент: ``Py_TYPE(o) == type``."

#: ../../c-api/structures.rst:115
msgid "Set the object *o* type to *type*."
msgstr "Установите для объекта *o* тип *type*."

#: ../../c-api/structures.rst:122
msgid "Get the reference count of the Python object *o*."
msgstr "Получите счетчик ссылок объекта Python *o*."

#: ../../c-api/structures.rst:124
msgid ""
":c:func:`Py_REFCNT()` is changed to the inline static function. Use :c:func:"
"`Py_SET_REFCNT()` to set an object reference count."
msgstr ""

#: ../../c-api/structures.rst:131
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "Установите счетчик ссылок объекта *o* на *refcnt*."

#: ../../c-api/structures.rst:138
msgid "Get the size of the Python object *o*."
msgstr "Получите размер объекта Python *o*."

#: ../../c-api/structures.rst:140
msgid "Use the :c:func:`Py_SET_SIZE` function to set an object size."
msgstr ""
"Используйте функцию :c:func:`Py_SET_SIZE`, чтобы установить размер объекта."

#: ../../c-api/structures.rst:145
msgid "Set the object *o* size to *size*."
msgstr "Установите размер объекта *o* на *size*."

#: ../../c-api/structures.rst:152
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyObject` type.  This macro expands to::"
msgstr ""
"Это макрос, который расширяется до значений инициализации для нового типа :c:"
"type:`PyObject`. Этот макрос расширяется до::"

#: ../../c-api/structures.rst:161
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyVarObject` type, including the :attr:`ob_size` field. This macro expands "
"to::"
msgstr ""

#: ../../c-api/structures.rst:170
msgid "Implementing functions and methods"
msgstr "Реализация функций и методов"

#: ../../c-api/structures.rst:174
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:expr:`PyObject*` parameters and return "
"one such value.  If the return value is ``NULL``, an exception shall have "
"been set.  If not ``NULL``, the return value is interpreted as the return "
"value of the function as exposed in Python.  The function must return a new "
"reference."
msgstr ""
"Тип функций, используемых для реализации большинства вызываемых объектов "
"Python в C. Функции этого типа принимают два параметра :c:expr:`PyObject*` и "
"возвращают одно такое значение. Если возвращаемое значение равно NULL, "
"должно быть установлено исключение. Если значение не ``NULL``, возвращаемое "
"значение интерпретируется как возвращаемое значение функции, представленное "
"в Python. Функция должна вернуть новую ссылку."

#: ../../c-api/structures.rst:181
msgid "The function signature is::"
msgstr "Сигнатура функции::"

#: ../../c-api/structures.rst:188
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_VARARGS | METH_KEYWORDS`. The function signature is::"
msgstr ""

#: ../../c-api/structures.rst:199
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL`. The function signature is::"
msgstr ""

#: ../../c-api/structures.rst:209
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_FASTCALL | METH_KEYWORDS`. The function signature is::"
msgstr ""

#: ../../c-api/structures.rst:220
msgid ""
"Type of the functions used to implement Python callables in C with "
"signature :const:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS`. The function "
"signature is::"
msgstr ""

#: ../../c-api/structures.rst:235
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr ""
"Структура, используемая для описания метода типа расширения. Эта структура "
"имеет четыре поля:"

#: ../../c-api/structures.rst:240
msgid "name of the method"
msgstr ""

#: ../../c-api/structures.rst:244
msgid "pointer to the C implementation"
msgstr ""

#: ../../c-api/structures.rst:248
msgid "flags bits indicating how the call should be constructed"
msgstr ""

#: ../../c-api/structures.rst:252 ../../c-api/structures.rst:411
msgid "points to the contents of the docstring"
msgstr ""

#: ../../c-api/structures.rst:254
msgid ""
"The :c:member:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:expr:`PyObject*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:expr:`PyObject*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""

#: ../../c-api/structures.rst:261
msgid ""
"The :c:member:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention."
msgstr ""

#: ../../c-api/structures.rst:265
msgid "There are these calling conventions:"
msgstr "Существуют следующие соглашения о вызовах:"

#: ../../c-api/structures.rst:269
msgid ""
"This is the typical calling convention, where the methods have the type :c:"
"type:`PyCFunction`. The function expects two :c:expr:`PyObject*` values. The "
"first one is the *self* object for methods; for module functions, it is the "
"module object.  The second parameter (often called *args*) is a tuple object "
"representing all arguments. This parameter is typically processed using :c:"
"func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""
"Это типичное соглашение о вызовах, где методы имеют тип :c:type:"
"`PyCFunction`. Функция ожидает два значения :c:expr:`PyObject*`. Первый — "
"это объект *self* для методов; для функций модуля это объект модуля. Второй "
"параметр (часто называемый *args*) представляет собой объект-кортеж, "
"представляющий все аргументы. Этот параметр обычно обрабатывается с помощью :"
"c:func:`PyArg_ParseTuple` или :c:func:`PyArg_UnpackTuple`."

#: ../../c-api/structures.rst:279
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, *kwargs* where "
"*kwargs* is a dictionary of all the keyword arguments or possibly ``NULL`` "
"if there are no keyword arguments.  The parameters are typically processed "
"using :c:func:`PyArg_ParseTupleAndKeywords`."
msgstr ""
"Методы с этими флагами должны иметь тип :c:type:`PyCFunctionWithKeywords`. "
"Функция ожидает три параметра: *self*, *args*, *kwargs*, где *kwargs* — "
"словарь всех аргументов ключевых слов или, возможно, ``NULL``, если "
"аргументов ключевых слов нет. Параметры обычно обрабатываются с помощью :c:"
"func:`PyArg_ParseTupleAndKeywords`."

#: ../../c-api/structures.rst:288
msgid ""
"Fast calling convention supporting only positional arguments. The methods "
"have the type :c:type:`_PyCFunctionFast`. The first parameter is *self*, the "
"second parameter is a C array of :c:expr:`PyObject*` values indicating the "
"arguments and the third parameter is the number of arguments (the length of "
"the array)."
msgstr ""
"Соглашение о быстрых вызовах, поддерживающее только позиционные аргументы. "
"Методы имеют тип :c:type:`_PyCFunctionFast`. Первый параметр — *self*, "
"второй параметр — это массив C значений :c:expr:`PyObject*`, указывающий "
"аргументы, а третий параметр — это количество аргументов (длина массива)."

#: ../../c-api/structures.rst:298
msgid "``METH_FASTCALL`` is now part of the stable ABI."
msgstr ""

#: ../../c-api/structures.rst:303
msgid ""
"Extension of :const:`METH_FASTCALL` supporting also keyword arguments, with "
"methods of type :c:type:`_PyCFunctionFastWithKeywords`. Keyword arguments "
"are passed the same way as in the :ref:`vectorcall protocol <vectorcall>`: "
"there is an additional fourth :c:expr:`PyObject*` parameter which is a tuple "
"representing the names of the keyword arguments (which are guaranteed to be "
"strings) or possibly ``NULL`` if there are no keywords.  The values of the "
"keyword arguments are stored in the *args* array, after the positional "
"arguments."
msgstr ""

#: ../../c-api/structures.rst:318
msgid ""
"Extension of :const:`METH_FASTCALL | METH_KEYWORDS` supporting the *defining "
"class*, that is, the class that contains the method in question. The "
"defining class might be a superclass of ``Py_TYPE(self)``."
msgstr ""

#: ../../c-api/structures.rst:322
msgid ""
"The method needs to be of type :c:type:`PyCMethod`, the same as for "
"``METH_FASTCALL | METH_KEYWORDS`` with ``defining_class`` argument added "
"after ``self``."
msgstr ""
"Метод должен иметь тип :c:type:`PyCMethod`, такой же, как для "
"``METH_FASTCALL | METH_KEYWORDS`` с аргументом ``defining_class``, "
"добавленным после ``self``."

#: ../../c-api/structures.rst:331
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :const:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named *self* "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be ``NULL``."
msgstr ""

#: ../../c-api/structures.rst:340
msgid ""
"Methods with a single object argument can be listed with the :const:`METH_O` "
"flag, instead of invoking :c:func:`PyArg_ParseTuple` with a ``\"O\"`` "
"argument. They have the type :c:type:`PyCFunction`, with the *self* "
"parameter, and a :c:expr:`PyObject*` parameter representing the single "
"argument."
msgstr ""

#: ../../c-api/structures.rst:346
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""
"Эти две константы используются не для обозначения соглашения о вызовах, а "
"для привязки при использовании с методами классов. Их нельзя использовать "
"для функций, определенных для модулей. Для любого метода может быть "
"установлен не более одного из этих флагов."

#: ../../c-api/structures.rst:356
msgid ""
"The method will be passed the type object as the first parameter rather than "
"an instance of the type.  This is used to create *class methods*, similar to "
"what is created when using the :func:`classmethod` built-in function."
msgstr ""
"Методу будет передан объект типа в качестве первого параметра, а не "
"экземпляр типа. Это используется для создания *методов класса*, аналогично "
"тому, что создается при использовании встроенной функции :func:`classmethod`."

#: ../../c-api/structures.rst:366
msgid ""
"The method will be passed ``NULL`` as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""
"Методу будет передан NULL в качестве первого параметра, а не экземпляр типа. "
"Это используется для создания *статических методов*, аналогично тому, что "
"создается при использовании встроенной функции :func:`staticmethod`."

#: ../../c-api/structures.rst:370
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr ""
"Еще одна константа контролирует, загружается ли метод вместо другого "
"определения с тем же именем метода."

#: ../../c-api/structures.rst:376
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named :meth:"
"`__contains__` and preclude the loading of a corresponding PyCFunction with "
"the same name.  With the flag defined, the PyCFunction will be loaded in "
"place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object "
"calls."
msgstr ""

#: ../../c-api/structures.rst:388
msgid "Accessing attributes of extension types"
msgstr "Доступ к атрибутам типов расширения"

#: ../../c-api/structures.rst:392
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr ""

#: ../../c-api/structures.rst:396 ../../c-api/structures.rst:492
msgid "Field"
msgstr "Поле"

#: ../../c-api/structures.rst:396 ../../c-api/structures.rst:492
msgid "C Type"
msgstr "Тип C"

#: ../../c-api/structures.rst:396 ../../c-api/structures.rst:492
msgid "Meaning"
msgstr "Значение"

#: ../../c-api/structures.rst:398
msgid ":attr:`name`"
msgstr ""

#: ../../c-api/structures.rst:398 ../../c-api/structures.rst:411
#: ../../c-api/structures.rst:427 ../../c-api/structures.rst:494
#: ../../c-api/structures.rst:502
msgid "const char \\*"
msgstr ""

#: ../../c-api/structures.rst:398
msgid "name of the member"
msgstr ""

#: ../../c-api/structures.rst:400
msgid ":attr:`!type`"
msgstr ""

#: ../../c-api/structures.rst:400 ../../c-api/structures.rst:407
#: ../../c-api/structures.rst:423
msgid "int"
msgstr "int"

#: ../../c-api/structures.rst:400
msgid "the type of the member in the C struct"
msgstr ""

#: ../../c-api/structures.rst:403
msgid ":attr:`offset`"
msgstr ""

#: ../../c-api/structures.rst:403 ../../c-api/structures.rst:439
msgid "Py_ssize_t"
msgstr ""

#: ../../c-api/structures.rst:403
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr ""

#: ../../c-api/structures.rst:407
msgid ":attr:`flags`"
msgstr ""

#: ../../c-api/structures.rst:407
msgid "flag bits indicating if the field should be read-only or writable"
msgstr ""

#: ../../c-api/structures.rst:411
msgid ":attr:`doc`"
msgstr ""

#: ../../c-api/structures.rst:415
msgid ""
":attr:`!type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ""

#: ../../c-api/structures.rst:420
msgid "Macro name"
msgstr "Название макроса"

#: ../../c-api/structures.rst:420
msgid "C type"
msgstr "Тип C"

#: ../../c-api/structures.rst:422
msgid "T_SHORT"
msgstr ""

#: ../../c-api/structures.rst:422
msgid "short"
msgstr ""

#: ../../c-api/structures.rst:423
msgid "T_INT"
msgstr ""

#: ../../c-api/structures.rst:424
msgid "T_LONG"
msgstr ""

#: ../../c-api/structures.rst:424
msgid "long"
msgstr "long"

#: ../../c-api/structures.rst:425
msgid "T_FLOAT"
msgstr ""

#: ../../c-api/structures.rst:425
msgid "float"
msgstr "float"

#: ../../c-api/structures.rst:426
msgid "T_DOUBLE"
msgstr ""

#: ../../c-api/structures.rst:426
msgid "double"
msgstr "double"

#: ../../c-api/structures.rst:427
msgid "T_STRING"
msgstr ""

#: ../../c-api/structures.rst:428
msgid "T_OBJECT"
msgstr ""

#: ../../c-api/structures.rst:428 ../../c-api/structures.rst:429
msgid "PyObject \\*"
msgstr ""

#: ../../c-api/structures.rst:429
msgid "T_OBJECT_EX"
msgstr ""

#: ../../c-api/structures.rst:430
msgid "T_CHAR"
msgstr ""

#: ../../c-api/structures.rst:430 ../../c-api/structures.rst:431
#: ../../c-api/structures.rst:436
msgid "char"
msgstr "char"

#: ../../c-api/structures.rst:431
msgid "T_BYTE"
msgstr ""

#: ../../c-api/structures.rst:432
msgid "T_UBYTE"
msgstr ""

#: ../../c-api/structures.rst:432
msgid "unsigned char"
msgstr "unsigned char"

#: ../../c-api/structures.rst:433
msgid "T_UINT"
msgstr ""

#: ../../c-api/structures.rst:433
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/structures.rst:434
msgid "T_USHORT"
msgstr ""

#: ../../c-api/structures.rst:434
msgid "unsigned short"
msgstr "unsigned short"

#: ../../c-api/structures.rst:435
msgid "T_ULONG"
msgstr ""

#: ../../c-api/structures.rst:435
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/structures.rst:436
msgid "T_BOOL"
msgstr ""

#: ../../c-api/structures.rst:437
msgid "T_LONGLONG"
msgstr ""

#: ../../c-api/structures.rst:437
msgid "long long"
msgstr ""

#: ../../c-api/structures.rst:438
msgid "T_ULONGLONG"
msgstr ""

#: ../../c-api/structures.rst:438
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/structures.rst:439
msgid "T_PYSSIZET"
msgstr ""

#: ../../c-api/structures.rst:442
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that :c:macro:"
"`T_OBJECT` returns ``None`` if the member is ``NULL`` and :c:macro:"
"`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use :c:macro:"
"`T_OBJECT_EX` over :c:macro:`T_OBJECT` because :c:macro:`T_OBJECT_EX` "
"handles use of the :keyword:`del` statement on that attribute more correctly "
"than :c:macro:`T_OBJECT`."
msgstr ""

#: ../../c-api/structures.rst:449
msgid ""
":attr:`flags` can be ``0`` for write and read access or :c:macro:`READONLY` "
"for read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies :c:"
"macro:`READONLY`.  :c:macro:`T_STRING` data is interpreted as UTF-8. Only :c:"
"macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` members can be deleted.  (They "
"are set to ``NULL``)."
msgstr ""

#: ../../c-api/structures.rst:457
msgid ""
"Heap allocated types (created using :c:func:`PyType_FromSpec` or similar), "
"``PyMemberDef`` may contain definitions for the special members "
"``__dictoffset__``, ``__weaklistoffset__`` and ``__vectorcalloffset__``, "
"corresponding to :c:member:`~PyTypeObject.tp_dictoffset`, :c:member:"
"`~PyTypeObject.tp_weaklistoffset` and :c:member:`~PyTypeObject."
"tp_vectorcall_offset` in type objects. These must be defined with "
"``T_PYSSIZET`` and ``READONLY``, for example::"
msgstr ""

#: ../../c-api/structures.rst:474
msgid ""
"Get an attribute belonging to the object at address *obj_addr*.  The "
"attribute is described by ``PyMemberDef`` *m*.  Returns ``NULL`` on error."
msgstr ""
"Получите атрибут, принадлежащий объекту по адресу *obj_addr*. Атрибут "
"описывается ``PyMemberDef`` *m*. Возвращает ``NULL`` в случае ошибки."

#: ../../c-api/structures.rst:481
msgid ""
"Set an attribute belonging to the object at address *obj_addr* to object "
"*o*. The attribute to set is described by ``PyMemberDef`` *m*.  Returns "
"``0`` if successful and a negative value on failure."
msgstr ""
"Установите атрибут, принадлежащий объекту по адресу *obj_addr*, на объект "
"*o*. Устанавливаемый атрибут описывается ``PyMemberDef`` *m*. Возвращает "
"``0`` в случае успеха и отрицательное значение в случае неудачи."

#: ../../c-api/structures.rst:488
msgid ""
"Structure to define property-like access for a type. See also description of "
"the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""
"Структура для определения доступа к типу наподобие свойства. См. также "
"описание слота :c:member:`PyTypeObject.tp_getset`."

#: ../../c-api/structures.rst:494
msgid "name"
msgstr "имя"

#: ../../c-api/structures.rst:494
msgid "attribute name"
msgstr "имя атрибута"

#: ../../c-api/structures.rst:496
msgid "get"
msgstr ""

#: ../../c-api/structures.rst:496
msgid "getter"
msgstr ""

#: ../../c-api/structures.rst:496
msgid "C function to get the attribute"
msgstr ""

#: ../../c-api/structures.rst:498
msgid "set"
msgstr "установить"

#: ../../c-api/structures.rst:498
msgid "setter"
msgstr ""

#: ../../c-api/structures.rst:498
msgid ""
"optional C function to set or delete the attribute, if omitted the attribute "
"is readonly"
msgstr ""

#: ../../c-api/structures.rst:502
msgid "doc"
msgstr ""

#: ../../c-api/structures.rst:502
msgid "optional docstring"
msgstr "необязательная строка документации"

#: ../../c-api/structures.rst:504
msgid "closure"
msgstr ""

#: ../../c-api/structures.rst:504
msgid "void \\*"
msgstr ""

#: ../../c-api/structures.rst:504
msgid ""
"optional function pointer, providing additional data for getter and setter"
msgstr ""

#: ../../c-api/structures.rst:509
msgid ""
"The ``get`` function takes one :c:expr:`PyObject*` parameter (the instance) "
"and a function pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:514
msgid ""
"It should return a new reference on success or ``NULL`` with a set exception "
"on failure."
msgstr ""
"Он должен возвращать новую ссылку в случае успеха или ``NULL`` с "
"установленным исключением в случае неудачи."

#: ../../c-api/structures.rst:517
msgid ""
"``set`` functions take two :c:expr:`PyObject*` parameters (the instance and "
"the value to be set) and a function pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:522
msgid ""
"In case the attribute should be deleted the second parameter is ``NULL``. "
"Should return ``0`` on success or ``-1`` with a set exception on failure."
msgstr ""
"В случае, если атрибут должен быть удален, вторым параметром будет ``NULL``. "
"Должен возвращать ``0`` в случае успеха или ``-1`` с установленным "
"исключением в случае неудачи."
