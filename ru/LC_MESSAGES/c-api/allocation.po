# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Распределение объектов в куче"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Инициализируйте вновь выделенный объект *op* с его типом и начальной "
"ссылкой. Возвращает инициализированный объект. Если *type* указывает что "
"объект участвует в циклическом детекторе мусора - он добавляется к набору "
"наблюдаемых объектов детектора. Другие поля объекта не затрагиваются."

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Делает все, что делает :c:func:`PyObject_Init`, а также инициализирует "
"информацию о длине для объекта переменного размера."

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Выделите новый объект Python, используя тип C-структуры *TYPE* и объект "
"Python типа *type*. Поля, не определенные заголовком объекта Python, не "
"инициализируются; количество ссылок на объект будет равно единице. Размер "
"выделения памяти определяется из поля :c:member:`~PyTypeObject.tp_basicsize` "
"объекта типа."

#: ../../c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""
"Выделяет новый объект Python, используя тип структуры C *TYPE* и тип объекта "
"Python *type*. Поля, не определенные в заголовке объекта Python, не "
"инициализируются. Выделенная память позволяет использовать структуру *TYPE* "
"плюс поля *size* такого размера, который указан в поле *type* :c:member:"
"`~PyTypeObject.tp_itemsize`. Это полезно для реализации таких объектов, как "
"кортежи, которые могут определять свой размер во время построения. "
"Встраивание массива полей в одно и то же распределение уменьшает количество "
"выделений, повышая эффективность управления памятью."

#: ../../c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Освобождает память, выделенную объекту, используя :c:func:`PyObject_New` "
"или :c:func:`PyObject_NewVar`. Обычно это вызывается из обработчика :c:"
"member:`~PyTypeObject.tp_dealloc`, указанного в типе объекта. После этого "
"вызова не следует обращаться к полям объекта, поскольку память больше не "
"является допустимым объектом Python."

#: ../../c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Объект, который виден в Python как ``None``.  Доступ к которому следует "
"осуществлять с помощью макроса :c:macro:`Py_None`, который вычисляет "
"указатель на этот объект."

#: ../../c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "Для выделения и создания модулей расширения."
