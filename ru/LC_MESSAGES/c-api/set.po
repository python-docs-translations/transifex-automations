# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "Установить объекты"

#: ../../c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using either "
"the abstract object protocol (including :c:func:`PyObject_CallMethod`, :c:"
"func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, :c:func:"
"`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and :c:"
"func:`PyObject_GetIter`) or the abstract number protocol (including :c:func:"
"`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:"
"`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"В этом разделе подробно описан общедоступный API для объектов :class:`set` "
"и :class:`frozenset`. К любой функциональности, не указанной ниже, лучше "
"всего обращаться с использованием протокола абстрактных объектов (включая :c:"
"func:` PyObj ect_CallMethod`, :c:func:` PyObj ect_RichCompareBool`, :c:func:"
"` PyObj ect_Hash`, :c:func :` PyObj ect_Repr`, :c:func:` PyObj ect_IsTrue`, :"
"c:func:` PyObj ect_Print` и :c:func:` PyObj ect_GetIter`) или протокол "
"абстрактных чисел (включая :c:func:` PyNumber_And`, :c:func:"
"`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:"
"`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, :c :func:"
"`PyNumber_InPlaceOr` и :c:func:`PyNumber_InPlaceXor`)."

#: ../../c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and all are subject to change.  "
"All access should be done through the documented API rather than by "
"manipulating the values in the structure."
msgstr ""
"Этот подтип :c:type:` PyObject` используется для хранения внутренних данных "
"как для объектов :class:`set`, так и :class:`frozenset`. Он похож на :c:type:"
"`PyDictObject` в том, что он имеет фиксированный размер для небольших "
"наборов (так же, как хранилище кортежей) и будет указывать на отдельный блок "
"памяти переменного размера для наборов среднего и большого размера (очень "
"похоже на список хранилище). Ни одно из полей этой структуры не должно "
"считаться общедоступным, и все они могут быть изменены. Весь доступ должен "
"осуществляться через документированный API, а не путем манипулирования "
"значениями в структуре."

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"Это экземпляр :c:type:`PyTypeObject`, представляющий тип :class:`set` Python."

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"Это экземпляр :c:type:`PyTypeObject`, представляющий тип :class:`frozenset` "
"Python."

#: ../../c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"Следующие макросы проверки типов работают с указателями на любой объект "
"Python. Аналогично, функции-конструкторы работают с любым итерируемым "
"объектом Python."

#: ../../c-api/set.rst:55
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом :class:`set` или экземпляром "
"подтипа. Эта функция всегда завершается успешно."

#: ../../c-api/set.rst:60
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом :class:`frozenset` или "
"экземпляром подтипа. Эта функция всегда завершается успешно."

#: ../../c-api/set.rst:65
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом :class:`set`, объектом :class:"
"`frozenset` или экземпляром подтипа. Эта функция всегда завершается успешно."

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом :class:`set`, но не экземпляром "
"подтипа. Эта функция всегда завершается успешно."

#: ../../c-api/set.rst:77
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype.  This function always succeeds."
msgstr ""
"Возвращает true, если *p* является объектом :class:`set` или :class:"
"`frozenset`, но не экземпляром подтипа. Эта функция всегда завершается "
"успешно."

#: ../../c-api/set.rst:83
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом :class:`frozenset`, но не "
"экземпляром подтипа. Эта функция всегда завершается успешно."

#: ../../c-api/set.rst:89
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be ``NULL`` to create a new empty set.  Return the new "
"set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if *iterable* "
"is not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""
"Вернуть новый :class:`set`, содержащий объекты, возвращаемые *iterable*. "
"*iterable* может иметь значение NULL, чтобы создать новый пустой набор. "
"Возвращает новый набор в случае успеха или ``NULL`` в случае неудачи. "
"Поднимите :exc:`TypeError`, если *iterable* на самом деле не является "
"итерируемым. Конструктор также полезен для копирования набора (``c=set(s)``)."

#: ../../c-api/set.rst:98
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty frozenset.  "
"Return the new set on success or ``NULL`` on failure.  Raise :exc:"
"`TypeError` if *iterable* is not actually iterable."
msgstr ""
"Верните новый :class:`frozenset`, содержащий объекты, возвращаемые "
"*iterable*. *iterable* может иметь значение NULL, чтобы создать новый пустой "
"замороженный набор. Возвращает новый набор в случае успеха или ``NULL`` в "
"случае неудачи. Поднимите :exc:`TypeError`, если *iterable* на самом деле не "
"является итерируемым."

#: ../../c-api/set.rst:104
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"Следующие функции и макросы доступны для экземпляров :class:`set` или :class:"
"`frozenset` или экземпляров их подтипов."

#: ../../c-api/set.rst:112
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:119
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "Макрос-форма :c:func:`PySet_Size` без проверки ошибок."

#: ../../c-api/set.rst:124
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this function "
"does not automatically convert unhashable sets into temporary frozensets.  "
"Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`PyExc_SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, "
"or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:133
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if "
"the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room to "
"grow.  Raise a :exc:`SystemError` if *set* is not an instance of :class:"
"`set` or its subtype."
msgstr ""
"Добавьте *key* в экземпляр :class:`set`. Также работает с экземплярами :"
"class:`frozenset` (например, :c:func:`PyTuple_SetItem`, его можно "
"использовать для заполнения значений совершенно новых замороженных наборов, "
"прежде чем они будут доступны другому коду). Возвращайте ``0`` в случае "
"успеха или ``-1`` в случае неудачи. Вызовите :exc:`TypeError`, если *ключ* "
"не хешируется. Вызовите :exc:`MemoryError`, если нет места для роста. "
"Вызовите :exc:`SystemError`, если *set* не является экземпляром :class:`set` "
"или его подтипа."

#: ../../c-api/set.rst:142
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"Следующие функции доступны для экземпляров :class:`set` или его подтипов, но "
"не для экземпляров :class:`frozenset` или его подтипов."

#: ../../c-api/set.rst:148
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~set.discard` method, this function does not automatically "
"convert unhashable sets into temporary frozensets. Raise :exc:"
"`PyExc_SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""

#: ../../c-api/set.rst:158
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return ``NULL`` on failure.  Raise :exc:`KeyError` "
"if the set is empty. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
"Возвращает новую ссылку на произвольный объект в *наборе* и удаляет объект "
"из *набора*. Возвращайте ``NULL`` в случае неудачи. Поднимите :exc:"
"`KeyError`, если набор пуст. Вызовите :exc:`SystemError`, если *set* не "
"является экземпляром :class:`set` или его подтипа."

#: ../../c-api/set.rst:166
msgid "Empty an existing set of all elements."
msgstr ""
