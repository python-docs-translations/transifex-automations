# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/list.rst:6
msgid "List Objects"
msgstr "Объекты списка"

#: ../../c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr "Этот подтип :c:type:` PyObject` представляет объект списка Python."

#: ../../c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type. "
"This is the same object as :class:`list` in the Python layer."
msgstr ""
"Этот экземпляр :c:type:`PyTypeObject` представляет тип списка Python. Это "
"тот же объект, что и :class:`list` на уровне Python."

#: ../../c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом списка или экземпляром подтипа "
"типа списка. Эта функция всегда завершается успешно."

#: ../../c-api/list.rst:30
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the "
"list type.  This function always succeeds."
msgstr ""
"Возвращает true, если *p* является объектом списка, но не является "
"экземпляром подтипа типа list.  Эта функция всегда работает успешно."

#: ../../c-api/list.rst:36
msgid "Return a new list of length *len* on success, or ``NULL`` on failure."
msgstr ""
"Возвращает новый список длины *len* в случае успеха, или ``NULL`` в случае "
"неудачи."

#: ../../c-api/list.rst:40
msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``.  Thus you cannot use abstract API functions such as :c:func:"
"`PySequence_SetItem`  or expose the object to Python code before setting all "
"items to a real object with :c:func:`PyList_SetItem`."
msgstr ""
"Если *len* больше нуля, элементы возвращаемого объекта списка имеют значение "
"``NULL``. Таким образом, вы не можете использовать абстрактные функции API, "
"такие как :c:func:`PySequence_SetItem`, или предоставлять объект коду Python "
"перед присвоением всем элементам реального объекта с помощью :c:func:"
"`PyList_SetItem`."

#: ../../c-api/list.rst:50
msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr ""
"Вернуть длину объекта списка в *list*; это эквивалентно ``len(list)`` для "
"объекта списка."

#: ../../c-api/list.rst:56
msgid "Macro form of :c:func:`PyList_Size` without error checking."
msgstr ""

#: ../../c-api/list.rst:61
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The "
"position must be non-negative; indexing from the end of the list is not "
"supported.  If *index* is out of bounds (<0 or >=len(list)), return ``NULL`` "
"and set an :exc:`IndexError` exception."
msgstr ""
"Возвращает объект, находящийся на позиции *index* в списке, на который "
"указывает *list*.  Позиция должна быть неотрицательной; индексация с конца "
"списка не поддерживается.  Если *index* выходит за границы (<0 or "
">=len(list)), то возвращается ``NULL`` и устанавливается исключение :exc:"
"`IndexError`."

#: ../../c-api/list.rst:69
msgid "Macro form of :c:func:`PyList_GetItem` without error checking."
msgstr ""

#: ../../c-api/list.rst:74
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success. "
"If *index* is out of bounds, return ``-1`` and set an :exc:`IndexError` "
"exception."
msgstr ""
"Установите элемент с индексом *index* в списке на *item*. Верните ``0`` в "
"случае успеха. Если *index* выходит за пределы, верните ``-1`` и установите "
"исключение :exc:`IndexError`."

#: ../../c-api/list.rst:80
msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr ""
"Эта функция «крадет» ссылку на *item* и отбрасывает ссылку на элемент, уже "
"находящийся в списке в соответствующей позиции."

#: ../../c-api/list.rst:86
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr ""
"Макрос-форма :c:func:`PyList_SetItem` без проверки ошибок. Обычно это "
"используется только для заполнения новых списков, в которых нет предыдущего "
"содержимого."

#: ../../c-api/list.rst:91
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike :c:func:"
"`PyList_SetItem`, does *not* discard a reference to any item that is being "
"replaced; any reference in *list* at position *i* will be leaked."
msgstr ""
"Этот макрос «крадет» ссылку на *item* и, в отличие от :c:func:"
"`PyList_SetItem`, *не* отбрасывает ссылку на любой заменяемый элемент; любая "
"ссылка в *list* в позиции *i* будет утеряна."

#: ../../c-api/list.rst:99
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""
"Вставьте элемент *item* в список *list* перед индексом *index*. Верните "
"``0`` в случае успеха; верните ``-1`` и установите исключение в случае "
"неудачи. Аналогично ``list.insert(index, item)``."

#: ../../c-api/list.rst:106
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""
"Добавьте объект *item* в конец списка *list*. Верните ``0`` в случае успеха; "
"верните ``-1`` и установите исключение в случае неудачи. Аналогично ``list."
"append(item)``."

#: ../../c-api/list.rst:113
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return ``NULL`` and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Indexing from the end of the list is not "
"supported."
msgstr ""
"Возвращает список объектов в *list*, содержащих объекты *между* *low* и "
"*high*. Верните NULL и установите исключение в случае неудачи. Аналогично "
"``list[low:high]``. Индексация с конца списка не поддерживается."

#: ../../c-api/list.rst:120
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be ``NULL``, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Indexing from the end of the "
"list is not supported."
msgstr ""
"Установите срез *list* между *low* и *high* в содержимое *itemlist*. "
"Аналогично ``list[low:high] = itemlist``. *itemlist* может иметь значение "
"NULL, что указывает на назначение пустого списка (удаление фрагмента). "
"Возвращайте ``0`` в случае успеха, ``-1`` в случае неудачи. Индексация с "
"конца списка не поддерживается."

#: ../../c-api/list.rst:129
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""
"Отсортируйте элементы *списка* на месте. Возвращайте ``0`` в случае успеха, "
"``-1`` в случае неудачи. Это эквивалентно list.sort()."

#: ../../c-api/list.rst:135
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""
"Поменяйте местами элементы *list*. Возвращайте ``0`` в случае успеха, ``-1`` "
"в случае неудачи. Это эквивалент list.reverse()."

#: ../../c-api/list.rst:143
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr ""
"Вернуть новый объект кортежа, содержащий содержимое *list*; эквивалентно "
"``tuple(list)``."
