# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/buffer.rst:11
msgid "Buffer Protocol"
msgstr "Буферный протокол"

#: ../../c-api/buffer.rst:18
msgid ""
"Certain objects available in Python wrap access to an underlying memory "
"array or *buffer*.  Such objects include the built-in :class:`bytes` and :"
"class:`bytearray`, and some extension types like :class:`array.array`. Third-"
"party libraries may define their own types for special purposes, such as "
"image processing or numeric analysis."
msgstr ""
"Некоторые объекты, доступные в Python, переносят доступ к базовому массиву "
"памяти или *буферу*. К таким объектам относятся встроенные :class:`bytes` и :"
"class:`bytearray`, а также некоторые типы расширений, такие как :class:"
"`array.array`. Сторонние библиотеки могут определять свои собственные типы "
"для специальных целей, таких как обработка изображений или числовой анализ."

#: ../../c-api/buffer.rst:24
msgid ""
"While each of these types have their own semantics, they share the common "
"characteristic of being backed by a possibly large memory buffer.  It is "
"then desirable, in some situations, to access that buffer directly and "
"without intermediate copying."
msgstr ""
"Хотя каждый из этих типов имеет свою собственную семантику, они обладают "
"общей характеристикой, заключающейся в том, что они поддерживаются, "
"возможно, большим буфером памяти. В некоторых ситуациях желательно получить "
"доступ к этому буферу напрямую и без промежуточного копирования."

#: ../../c-api/buffer.rst:29
msgid ""
"Python provides such a facility at the C level in the form of the :ref:"
"`buffer protocol <bufferobjects>`.  This protocol has two sides:"
msgstr ""
"Python предоставляет такую возможность на уровне C в виде :ref:`buffer "
"protocol <bufferobjects>`.  Этот протокол имеет две стороны:"

#: ../../c-api/buffer.rst:34
msgid ""
"on the producer side, a type can export a \"buffer interface\" which allows "
"objects of that type to expose information about their underlying buffer. "
"This interface is described in the section :ref:`buffer-structs`;"
msgstr ""
"на стороне производителя тип может экспортировать \"интерфейс буфера\", "
"который позволяет объектам этого типа предоставлять информацию об их базовом "
"буфере. Этот интерфейс описан в разделе :ref:`buffer-structs`;"

#: ../../c-api/buffer.rst:38
msgid ""
"on the consumer side, several means are available to obtain a pointer to the "
"raw underlying data of an object (for example a method parameter)."
msgstr ""
"на стороне пользователя доступно несколько средств для получения указателя "
"на необработанные базовые данные объекта (например, параметр метода)."

#: ../../c-api/buffer.rst:41
msgid ""
"Simple objects such as :class:`bytes` and :class:`bytearray` expose their "
"underlying buffer in byte-oriented form.  Other forms are possible; for "
"example, the elements exposed by an :class:`array.array` can be multi-byte "
"values."
msgstr ""
"Простые объекты, такие как :class:`bytes` и :class:`bytearray``, "
"предоставляют свой базовый буфер в байт-ориентированной форме. Возможны и "
"другие формы; например, элементы, предоставляемые :class:`array.array`, "
"могут быть многобайтовыми значениями."

#: ../../c-api/buffer.rst:45
msgid ""
"An example consumer of the buffer interface is the :meth:`~io.BufferedIOBase."
"write` method of file objects: any object that can export a series of bytes "
"through the buffer interface can be written to a file.  While :meth:`!write` "
"only needs read-only access to the internal contents of the object passed to "
"it, other methods such as :meth:`~io.BufferedIOBase.readinto` need write "
"access to the contents of their argument.  The buffer interface allows "
"objects to selectively allow or reject exporting of read-write and read-only "
"buffers."
msgstr ""
"Примером потребителя интерфейса буфера является метод :meth:`~io."
"BufferedIOBase.write` файловых объектов: любой объект, который может "
"экспортировать последовательность байтов через интерфейс буфера, может быть "
"записан в файл. В то время как :meth:`!write` требуется доступ только для "
"чтения к внутреннему содержимому переданного ему объекта, другим методам, "
"таким как :meth:`~io.BufferedIOBase.readinto`, требуется доступ на запись к "
"содержимому их аргумента. Интерфейс буфера позволяет объектам выборочно "
"разрешать или отклонять экспорт буферов для чтения-записи и только для "
"чтения."

#: ../../c-api/buffer.rst:53
msgid ""
"There are two ways for a consumer of the buffer interface to acquire a "
"buffer over a target object:"
msgstr ""
"У пользователя буферного интерфейса есть два способа получить буфер поверх "
"целевого объекта:"

#: ../../c-api/buffer.rst:56
msgid "call :c:func:`PyObject_GetBuffer` with the right parameters;"
msgstr "вызывает :c:func:`PyObject_GetBuffer` с правильными параметрами;"

#: ../../c-api/buffer.rst:58
msgid ""
"call :c:func:`PyArg_ParseTuple` (or one of its siblings) with one of the "
"``y*``, ``w*`` or ``s*`` :ref:`format codes <arg-parsing>`."
msgstr ""
"вызывает :c:func:`PyArg_ParseTuple` (или одного из родственников) с одним из "
"``y*``, ``w*`` or ``s*`` :ref:`format codes <arg-parsing>`."

#: ../../c-api/buffer.rst:61
msgid ""
"In both cases, :c:func:`PyBuffer_Release` must be called when the buffer "
"isn't needed anymore.  Failure to do so could lead to various issues such as "
"resource leaks."
msgstr ""
"В обоих случаях :c:func:`PyBuffer_Release` должен вызываться, когда буфер "
"больше не нужен. Невыполнение этого требования может привести к различным "
"проблемам, таким как утечка ресурсов."

#: ../../c-api/buffer.rst:69
msgid "Buffer structure"
msgstr "Буферная структура"

#: ../../c-api/buffer.rst:71
msgid ""
"Buffer structures (or simply \"buffers\") are useful as a way to expose the "
"binary data from another object to the Python programmer.  They can also be "
"used as a zero-copy slicing mechanism.  Using their ability to reference a "
"block of memory, it is possible to expose any data to the Python programmer "
"quite easily.  The memory could be a large, constant array in a C extension, "
"it could be a raw block of memory for manipulation before passing to an "
"operating system library, or it could be used to pass around structured data "
"in its native, in-memory format."
msgstr ""
"Буферные структуры (или просто \"буферы\") полезны как способ предоставления "
"двоичных данных из другого объекта программисту на Python. Они также могут "
"использоваться в качестве механизма нарезки нулевой копии. Используя их "
"способность ссылаться на блок памяти, можно довольно легко предоставить "
"программисту на Python любые данные. Память может быть большим постоянным "
"массивом в расширении C, это может быть необработанный блок памяти для "
"манипулирования перед передачей в библиотеку операционной системы, или он "
"может использоваться для передачи структурированных данных в их собственном "
"формате в памяти."

#: ../../c-api/buffer.rst:80
msgid ""
"Contrary to most data types exposed by the Python interpreter, buffers are "
"not :c:type:`PyObject` pointers but rather simple C structures.  This allows "
"them to be created and copied very simply.  When a generic wrapper around a "
"buffer is needed, a :ref:`memoryview <memoryview-objects>` object can be "
"created."
msgstr ""
"В отличие от большинства типов данных, предоставляемых интерпретатором "
"Python, буферы являются не указателями :c:type:`PyObject`, а скорее простыми "
"структурами C. Это позволяет очень просто создавать и копировать их. Когда "
"требуется универсальная оболочка вокруг буфера, может быть создан объект :"
"ref:`memoryview <memoryview-objects>`."

#: ../../c-api/buffer.rst:86
msgid ""
"For short instructions how to write an exporting object, see :ref:`Buffer "
"Object Structures <buffer-structs>`. For obtaining a buffer, see :c:func:"
"`PyObject_GetBuffer`."
msgstr ""
"Краткие инструкции по написанию экспортируемого объекта см. в :ref:`Buffer "
"Object Structures <buffer-structs>`. Для получения буфера смотрите :c:func:"
"`PyObject_GetBuffer`."

#: ../../c-api/buffer.rst:94
msgid ""
"A pointer to the start of the logical structure described by the buffer "
"fields. This can be any location within the underlying physical memory block "
"of the exporter. For example, with negative :c:member:`~Py_buffer.strides` "
"the value may point to the end of the memory block."
msgstr ""
"Указатель на начало логической структуры, описываемой полями буфера. Это "
"может быть любое местоположение в базовом блоке физической памяти "
"экспортера. Например, при отрицательном :c:member:`~Py_buffer.strides` "
"значение может указывать на конец блока памяти."

#: ../../c-api/buffer.rst:99
msgid ""
"For :term:`contiguous` arrays, the value points to the beginning of the "
"memory block."
msgstr ""
"Для массивов :term:`continuous` значение указывает на начало блока памяти."

#: ../../c-api/buffer.rst:104
msgid ""
"A new reference to the exporting object. The reference is owned by the "
"consumer and automatically released (i.e. reference count decremented) and "
"set to ``NULL`` by :c:func:`PyBuffer_Release`. The field is the equivalent "
"of the return value of any standard C-API function."
msgstr ""
"Новая ссылка на экспортируемый объект. Ссылка принадлежит потребителю и "
"автоматически освобождается (т.е. количество ссылок уменьшается) и "
"устанавливается в ``NULL`` с помощью :c:func:`PyBuffer_Release`. Это поле "
"является эквивалентом возвращаемого значения любой стандартной функции C-API."

#: ../../c-api/buffer.rst:111
msgid ""
"As a special case, for *temporary* buffers that are wrapped by :c:func:"
"`PyMemoryView_FromBuffer` or :c:func:`PyBuffer_FillInfo` this field is "
"``NULL``. In general, exporting objects MUST NOT use this scheme."
msgstr ""
"В качестве особого случая, для *временных* буферов, которые обернуты :c:func:"
"`PyMemoryView_FromBuffer` или :c:func:`PyBuffer_FillInfo`, это поле равно "
"``NULL``. Как правило, при экспорте объектов НЕ ДОЛЖНА использоваться эта "
"схема."

#: ../../c-api/buffer.rst:118
msgid ""
"``product(shape) * itemsize``. For contiguous arrays, this is the length of "
"the underlying memory block. For non-contiguous arrays, it is the length "
"that the logical structure would have if it were copied to a contiguous "
"representation."
msgstr ""
"``product(shape) * itemsize``. Для непрерывных массивов это длина базового "
"блока памяти. Для несмежных массивов это длина, которую имела бы логическая "
"структура, если бы она была скопирована в непрерывное представление."

#: ../../c-api/buffer.rst:123
msgid ""
"Accessing ``((char *)buf)[0] up to ((char *)buf)[len-1]`` is only valid if "
"the buffer has been obtained by a request that guarantees contiguity. In "
"most cases such a request will be :c:macro:`PyBUF_SIMPLE` or :c:macro:"
"`PyBUF_WRITABLE`."
msgstr ""
"Доступ к ``((char *)buf)[0] up to ((char *)buf)[len-1]`` действителен только "
"в том случае, если буфер был получен запросом, гарантирующим непрерывность. "
"В большинстве случаев таким запросом будет :c:macro:`PyBUF_SIMPLE` или :c:"
"macro:`PyBUF_WRITABLE`."

#: ../../c-api/buffer.rst:129
msgid ""
"An indicator of whether the buffer is read-only. This field is controlled by "
"the :c:macro:`PyBUF_WRITABLE` flag."
msgstr ""
"Индикатор того, доступен ли буфер только для чтения. Это поле управляется "
"флагом :c:macro:`PyBUF_WRITABLE`."

#: ../../c-api/buffer.rst:134
msgid ""
"Item size in bytes of a single element. Same as the value of :func:`struct."
"calcsize` called on non-``NULL`` :c:member:`~Py_buffer.format` values."
msgstr ""
"Размер элемента в байтах одного элемента. Совпадает со значением :func:"
"`struct.calcsize` вызываемым для значений, отличных от ``NULL`` :c:member:"
"`~Py_buffer.format`."

#: ../../c-api/buffer.rst:137
msgid ""
"Important exception: If a consumer requests a buffer without the :c:macro:"
"`PyBUF_FORMAT` flag, :c:member:`~Py_buffer.format` will be set to  "
"``NULL``,  but :c:member:`~Py_buffer.itemsize` still has the value for the "
"original format."
msgstr ""
"Важное исключение: Если пользователь запрашивает буфер без флага :c:macro:"
"`PyBUF_FORMAT`, :c:member:`~Py_buffer.format`  будет установлено значение  "
"``NULL``,  но :c:member:`~Py_buffer.itemsize` по-прежнему имеет значение для "
"исходного формата."

#: ../../c-api/buffer.rst:142
msgid ""
"If :c:member:`~Py_buffer.shape` is present, the equality ``product(shape) * "
"itemsize == len`` still holds and the consumer can use :c:member:`~Py_buffer."
"itemsize` to navigate the buffer."
msgstr ""
"Если :c:member:`~Py_buffer.shape` присутствует, равенство ``product(shape) * "
"itemsize == len`` по-прежнему сохраняется, и пользователь может "
"использовать :c:member:`~Py_buffer.itemsize` для навигации по буферу."

#: ../../c-api/buffer.rst:146
msgid ""
"If :c:member:`~Py_buffer.shape` is ``NULL`` as a result of a :c:macro:"
"`PyBUF_SIMPLE` or a :c:macro:`PyBUF_WRITABLE` request, the consumer must "
"disregard :c:member:`~Py_buffer.itemsize` and assume ``itemsize == 1``."
msgstr ""
"Если :c:member:`~Py_buffer.shape` равно ``NULL`` в результате запроса:c:"
"macro:`PyBUF_SIMPLE` или :c:macro:`PyBUF_WRITABLE`, пользователь должен "
"игнорировать :c:member:`~Py_buffer.itemsize` и принять ``itemsize == 1``."

#: ../../c-api/buffer.rst:152
msgid ""
"A *NULL* terminated string in :mod:`struct` module style syntax describing "
"the contents of a single item. If this is ``NULL``, ``\"B\"`` (unsigned "
"bytes) is assumed."
msgstr ""
"Строка с завершающим *NULL* синтаксисом модуля :mod:`struct`, описывающая "
"содержимое одного элемента. Если это NULL, предполагается, что B "
"(беззнаковые байты)."

#: ../../c-api/buffer.rst:156
msgid "This field is controlled by the :c:macro:`PyBUF_FORMAT` flag."
msgstr "Это поле управляется флагом :c:macro:`PyBUF_FORMAT`."

#: ../../c-api/buffer.rst:160
msgid ""
"The number of dimensions the memory represents as an n-dimensional array. If "
"it is ``0``, :c:member:`~Py_buffer.buf` points to a single item representing "
"a scalar. In this case, :c:member:`~Py_buffer.shape`, :c:member:`~Py_buffer."
"strides` and :c:member:`~Py_buffer.suboffsets` MUST be ``NULL``. The maximum "
"number of dimensions is given by :c:macro:`PyBUF_MAX_NDIM`."
msgstr ""
"Количество измерений, которые память представляет в виде n-мерного массива. "
"Если оно равно ``0``, :c:member:`~Py_buffer.buf` указывает на один элемент, "
"представляющий скаляр. В этом случае :c:member:`~Py_buffer.shape`, :c:member:"
"`~Py_buffer.strides` и :c:member:`~Py_buffer.suboffsets` ДОЛЖНЫ быть "
"``NULL``. Максимальное количество измерений задается с помощью :c:macro:"
"`PyBUF_MAX_NDIM`."

#: ../../c-api/buffer.rst:168
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim` "
"indicating the shape of the memory as an n-dimensional array. Note that "
"``shape[0] * ... * shape[ndim-1] * itemsize`` MUST be equal to :c:member:"
"`~Py_buffer.len`."
msgstr ""
"Массив :c:type:`Py_ssize_t` длины :c:member:`~Py_buffer.ndim`, указывающий "
"форму памяти в виде n-мерного массива. Обратите внимание, что ``shape[0] "
"* ... * shape[ndim-1] * itemsize`` ДОЛЖНО быть равно :c:member:`~Py_buffer."
"len`."

#: ../../c-api/buffer.rst:173
msgid ""
"Shape values are restricted to ``shape[n] >= 0``. The case ``shape[n] == 0`` "
"requires special attention. See `complex arrays`_ for further information."
msgstr ""
"Значения Shape ограничены значением ``shape[n] >= 0``. Регистр ``shape[n] == "
"0`` требует особого внимания. Дополнительную информацию смотрите в разделе "
"\"сложные массивы\"_."

#: ../../c-api/buffer.rst:177
msgid "The shape array is read-only for the consumer."
msgstr "Массив shape доступен только для чтения потребителю."

#: ../../c-api/buffer.rst:181
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim` "
"giving the number of bytes to skip to get to a new element in each dimension."
msgstr ""
"Массив :c:type:`Py_ssize_t` длины :c:member:`~Py_buffer.ndim`, задающий "
"количество байтов, которые нужно пропустить, чтобы перейти к новому элементу "
"в каждом измерении."

#: ../../c-api/buffer.rst:185
msgid ""
"Stride values can be any integer. For regular arrays, strides are usually "
"positive, but a consumer MUST be able to handle the case ``strides[n] <= "
"0``. See `complex arrays`_ for further information."
msgstr ""
"Значения шага могут быть любыми целыми числами. Для обычных массивов шаги "
"обычно положительны, но пользователь ДОЛЖЕН уметь обрабатывать регистр "
"``strides[n] <= 0``. Дополнительную информацию смотрите в разделе \"Сложные "
"массивы`_."

#: ../../c-api/buffer.rst:189
msgid "The strides array is read-only for the consumer."
msgstr "Массив strides доступен только для чтения потребителю."

#: ../../c-api/buffer.rst:193
msgid ""
"An array of :c:type:`Py_ssize_t` of length :c:member:`~Py_buffer.ndim`. If "
"``suboffsets[n] >= 0``, the values stored along the nth dimension are "
"pointers and the suboffset value dictates how many bytes to add to each "
"pointer after de-referencing. A suboffset value that is negative indicates "
"that no de-referencing should occur (striding in a contiguous memory block)."
msgstr ""
"Массив :c:type:`Py_ssize_t` длины :c:member:`~Py_buffer.ndim`. Если "
"``suboffsets[n] >= 0``, значения, хранящиеся в n-м измерении, являются "
"указателями, и значение suboffset определяет, сколько байт добавить к "
"каждому указателю после отмены ссылки. Отрицательное значение подзадачи "
"указывает на то, что не должно происходить отмены ссылок (переход в "
"непрерывный блок памяти)."

#: ../../c-api/buffer.rst:200
msgid ""
"If all suboffsets are negative (i.e. no de-referencing is needed), then this "
"field must be ``NULL`` (the default value)."
msgstr ""
"Если все вложенные значения отрицательны (т.е. отмена ссылок не требуется), "
"то это поле должно быть ``NULL`` (значение по умолчанию)."

#: ../../c-api/buffer.rst:203
msgid ""
"This type of array representation is used by the Python Imaging Library "
"(PIL). See `complex arrays`_ for further information how to access elements "
"of such an array."
msgstr ""
"Этот тип представления массива используется библиотекой изображений Python "
"(PIL). Смотрите раздел \"Сложные массивы\"_ для получения дополнительной "
"информации о том, как получить доступ к элементам такого массива."

#: ../../c-api/buffer.rst:207
msgid "The suboffsets array is read-only for the consumer."
msgstr "Массив suboffsets доступен только для чтения потребителю."

#: ../../c-api/buffer.rst:211
msgid ""
"This is for use internally by the exporting object. For example, this might "
"be re-cast as an integer by the exporter and used to store flags about "
"whether or not the shape, strides, and suboffsets arrays must be freed when "
"the buffer is released. The consumer MUST NOT alter this value."
msgstr ""
"Это предназначено для внутреннего использования экспортирующим объектом. "
"Например, экспортер может преобразовать это значение в целое число и "
"использовать для хранения флагов о том, следует ли освобождать массивы "
"shape, strides и suboffsets при освобождении буфера. Потребитель НЕ ДОЛЖЕН "
"изменять это значение."

#: ../../c-api/buffer.rst:218
msgid "Constants:"
msgstr "Константы:"

#: ../../c-api/buffer.rst:222
msgid ""
"The maximum number of dimensions the memory represents. Exporters MUST "
"respect this limit, consumers of multi-dimensional buffers SHOULD be able to "
"handle up to :c:macro:`!PyBUF_MAX_NDIM` dimensions. Currently set to 64."
msgstr ""
"Максимальное количество измерений, которые представляет память. Экспортеры "
"ДОЛЖНЫ соблюдать это ограничение, потребители многомерных буферов ДОЛЖНЫ "
"иметь возможность обрабатывать до :c:macro:`!PyBUF_MAX_NDIM` измерений. В "
"настоящее время установлено значение 64."

#: ../../c-api/buffer.rst:231
msgid "Buffer request types"
msgstr "Типы запросов буфера"

#: ../../c-api/buffer.rst:233
msgid ""
"Buffers are usually obtained by sending a buffer request to an exporting "
"object via :c:func:`PyObject_GetBuffer`. Since the complexity of the logical "
"structure of the memory can vary drastically, the consumer uses the *flags* "
"argument to specify the exact buffer type it can handle."
msgstr ""
"Буферы обычно получаются путем отправки запроса буфера экспортируемому "
"объекту через :c:func:`PyObject_GetBuffer`. Поскольку сложность логической "
"структуры памяти может сильно варьироваться, потребитель использует аргумент "
"*flags*, чтобы указать точный тип буфера, который он может обрабатывать."

#: ../../c-api/buffer.rst:238
msgid ""
"All :c:type:`Py_buffer` fields are unambiguously defined by the request type."
msgstr "Все поля :c:type:`Py_buffer` однозначно определяются типом запроса."

#: ../../c-api/buffer.rst:242
msgid "request-independent fields"
msgstr "поля, не зависящие от запроса"

#: ../../c-api/buffer.rst:243
msgid ""
"The following fields are not influenced by *flags* and must always be filled "
"in with the correct values: :c:member:`~Py_buffer.obj`, :c:member:"
"`~Py_buffer.buf`, :c:member:`~Py_buffer.len`, :c:member:`~Py_buffer."
"itemsize`, :c:member:`~Py_buffer.ndim`."
msgstr ""
"Следующие поля не зависят от *flags* и всегда должны быть заполнены "
"правильными значениями: :c:member:`~Py_buffer.obj`, :c:member:`~Py_buffer."
"buf`, :c:member:`~Py_buffer.len`, :c:member:`~Py_buffer.itemsize`, :c:member:"
"`~Py_buffer.ndim`."

#: ../../c-api/buffer.rst:248
msgid "readonly, format"
msgstr "только для чтения, формат"

#: ../../c-api/buffer.rst:252
msgid ""
"Controls the :c:member:`~Py_buffer.readonly` field. If set, the exporter "
"MUST provide a writable buffer or else report failure. Otherwise, the "
"exporter MAY provide either a read-only or writable buffer, but the choice "
"MUST be consistent for all consumers. For example, :c:expr:`PyBUF_SIMPLE | "
"PyBUF_WRITABLE` can be used to request a simple writable buffer."
msgstr ""
"Управляет полем :c:member:`~Py_buffer.readonly`. Если этот параметр "
"установлен, экспортер ДОЛЖЕН предоставить записываемый буфер, иначе он "
"сообщит об ошибке. В противном случае экспортер МОЖЕТ предоставить буфер "
"только для чтения или для записи, но выбор ДОЛЖЕН быть одинаковым для всех "
"потребителей. Например, :c:expr:`PyBUF_SIMPLE | PyBUF_WRITABLE` можно "
"использовать для запроса простого записываемого буфера."

#: ../../c-api/buffer.rst:260
msgid ""
"Controls the :c:member:`~Py_buffer.format` field. If set, this field MUST be "
"filled in correctly. Otherwise, this field MUST be ``NULL``."
msgstr ""
"Управляет полем :c:member:`~Py_buffer.format`. Если задано, это поле ДОЛЖНО "
"быть заполнено правильно. В противном случае это поле ДОЛЖНО быть ``NULL``."

#: ../../c-api/buffer.rst:264
msgid ""
":c:macro:`PyBUF_WRITABLE` can be \\|'d to any of the flags in the next "
"section. Since :c:macro:`PyBUF_SIMPLE` is defined as 0, :c:macro:"
"`PyBUF_WRITABLE` can be used as a stand-alone flag to request a simple "
"writable buffer."
msgstr ""
":c:macro:`PyBUF_WRITABLE` может быть \\|'d для любого из флагов в следующем "
"разделе. Поскольку :c:macro:`PyBUF_SIMPLE` определен как 0, :c:macro:"
"`PyBUF_WRITABLE` может использоваться в качестве автономного флага для "
"запроса простого буфера с возможностью записи."

#: ../../c-api/buffer.rst:268
msgid ""
":c:macro:`PyBUF_FORMAT` must be \\|'d to any of the flags except :c:macro:"
"`PyBUF_SIMPLE`, because the latter already implies format ``B`` (unsigned "
"bytes). :c:macro:`!PyBUF_FORMAT` cannot be used on its own."
msgstr ""
":c:macro:`PyBUF_FORMAT` должен быть \\| привязан к любому из флагов, кроме :"
"c:macro:`PyBUF_SIMPLE`, поскольку последний уже подразумевает формат ``B`` "
"(беззнаковые байты). :c:macro:`!PyBUF_FORMAT` нельзя использовать отдельно."

#: ../../c-api/buffer.rst:274
msgid "shape, strides, suboffsets"
msgstr "shape, strides, suboffsets"

#: ../../c-api/buffer.rst:276
msgid ""
"The flags that control the logical structure of the memory are listed in "
"decreasing order of complexity. Note that each flag contains all bits of the "
"flags below it."
msgstr ""
"Флаги, управляющие логической структурой памяти, перечислены в порядке "
"убывания сложности. Обратите внимание, что каждый флаг содержит все биты "
"флагов, расположенных под ним."

#: ../../c-api/buffer.rst:283 ../../c-api/buffer.rst:307
#: ../../c-api/buffer.rst:332
msgid "Request"
msgstr "Запрос"

#: ../../c-api/buffer.rst:283 ../../c-api/buffer.rst:307
#: ../../c-api/buffer.rst:332
msgid "shape"
msgstr "shape"

#: ../../c-api/buffer.rst:283 ../../c-api/buffer.rst:307
#: ../../c-api/buffer.rst:332
msgid "strides"
msgstr "strides"

#: ../../c-api/buffer.rst:283 ../../c-api/buffer.rst:307
#: ../../c-api/buffer.rst:332
msgid "suboffsets"
msgstr "suboffsets"

#: ../../c-api/buffer.rst:285 ../../c-api/buffer.rst:287
#: ../../c-api/buffer.rst:289 ../../c-api/buffer.rst:309
#: ../../c-api/buffer.rst:311 ../../c-api/buffer.rst:313
#: ../../c-api/buffer.rst:315 ../../c-api/buffer.rst:334
#: ../../c-api/buffer.rst:336 ../../c-api/buffer.rst:338
#: ../../c-api/buffer.rst:340 ../../c-api/buffer.rst:342
#: ../../c-api/buffer.rst:344 ../../c-api/buffer.rst:346
#: ../../c-api/buffer.rst:348
msgid "yes"
msgstr "да"

#: ../../c-api/buffer.rst:285 ../../c-api/buffer.rst:334
#: ../../c-api/buffer.rst:336
msgid "if needed"
msgstr "при необходимости"

#: ../../c-api/buffer.rst:287 ../../c-api/buffer.rst:289
#: ../../c-api/buffer.rst:291 ../../c-api/buffer.rst:309
#: ../../c-api/buffer.rst:311 ../../c-api/buffer.rst:313
#: ../../c-api/buffer.rst:315 ../../c-api/buffer.rst:338
#: ../../c-api/buffer.rst:340 ../../c-api/buffer.rst:342
#: ../../c-api/buffer.rst:344 ../../c-api/buffer.rst:346
#: ../../c-api/buffer.rst:348
msgid "NULL"
msgstr "NULL"

#: ../../c-api/buffer.rst:298
msgid "contiguity requests"
msgstr "непрерывные запросы"

#: ../../c-api/buffer.rst:300
msgid ""
"C or Fortran :term:`contiguity <contiguous>` can be explicitly requested, "
"with and without stride information. Without stride information, the buffer "
"must be C-contiguous."
msgstr ""
"C или Fortran :term:`contiguity <contiguous>` может быть явно запрошен как с "
"информацией о шаге, так и без нее. Без информации о шаге буфер должен быть C-"
"непрерывным."

#: ../../c-api/buffer.rst:307 ../../c-api/buffer.rst:332
msgid "contig"
msgstr "продолжение"

#: ../../c-api/buffer.rst:309 ../../c-api/buffer.rst:315
#: ../../c-api/buffer.rst:346 ../../c-api/buffer.rst:348
msgid "C"
msgstr "C"

#: ../../c-api/buffer.rst:311
msgid "F"
msgstr "F"

#: ../../c-api/buffer.rst:313
msgid "C or F"
msgstr "C или F"

#: ../../c-api/buffer.rst:315
msgid ":c:macro:`PyBUF_ND`"
msgstr ":c:macro:`PyBUF_ND`"

#: ../../c-api/buffer.rst:320
msgid "compound requests"
msgstr "сложные запросы"

#: ../../c-api/buffer.rst:322
msgid ""
"All possible requests are fully defined by some combination of the flags in "
"the previous section. For convenience, the buffer protocol provides "
"frequently used combinations as single flags."
msgstr ""
"Все возможные запросы полностью определяются некоторой комбинацией флагов в "
"предыдущем разделе. Для удобства протокол буфера предоставляет часто "
"используемые комбинации в виде отдельных флагов."

#: ../../c-api/buffer.rst:326
msgid ""
"In the following table *U* stands for undefined contiguity. The consumer "
"would have to call :c:func:`PyBuffer_IsContiguous` to determine contiguity."
msgstr ""
"В следующей таблице *U* означает неопределенную непрерывность. Потребитель "
"должен был бы вызвать :c:func:`PyBuffer_IsContiguous`, чтобы определить "
"непрерывность."

#: ../../c-api/buffer.rst:332
msgid "readonly"
msgstr "только для чтения"

#: ../../c-api/buffer.rst:332
msgid "format"
msgstr "формат"

#: ../../c-api/buffer.rst:334 ../../c-api/buffer.rst:336
#: ../../c-api/buffer.rst:338 ../../c-api/buffer.rst:340
#: ../../c-api/buffer.rst:342 ../../c-api/buffer.rst:344
msgid "U"
msgstr "U"

#: ../../c-api/buffer.rst:334 ../../c-api/buffer.rst:338
#: ../../c-api/buffer.rst:342 ../../c-api/buffer.rst:346
msgid "0"
msgstr "0"

#: ../../c-api/buffer.rst:336 ../../c-api/buffer.rst:340
#: ../../c-api/buffer.rst:344 ../../c-api/buffer.rst:348
msgid "1 or 0"
msgstr "1 или 0"

#: ../../c-api/buffer.rst:353
msgid "Complex arrays"
msgstr "Сложные массивы"

#: ../../c-api/buffer.rst:356
msgid "NumPy-style: shape and strides"
msgstr "Стиль NumPy: shape и strides"

#: ../../c-api/buffer.rst:358
msgid ""
"The logical structure of NumPy-style arrays is defined by :c:member:"
"`~Py_buffer.itemsize`, :c:member:`~Py_buffer.ndim`, :c:member:`~Py_buffer."
"shape` and :c:member:`~Py_buffer.strides`."
msgstr ""
"Логическая структура массивов в стиле NumPy определяется :c:member:"
"`~Py_buffer.itemsize`, :c:member:`~Py_buffer.ndim`, :c:member:`~Py_buffer."
"shape` и :c:member:`~Py_buffer.strides`."

#: ../../c-api/buffer.rst:361
msgid ""
"If ``ndim == 0``, the memory location pointed to by :c:member:`~Py_buffer."
"buf` is interpreted as a scalar of size :c:member:`~Py_buffer.itemsize`. In "
"that case, both :c:member:`~Py_buffer.shape` and :c:member:`~Py_buffer."
"strides` are ``NULL``."
msgstr ""
"Если ``ndim == 0``, ячейка памяти, на которую указывает :c:member:"
"`~Py_buffer.buf`, интерпретируется как скаляр размера :c:member:`~Py_buffer."
"itemsize`.  В этом случае оба :c:member:`~Py_buffer.shape` и :c:member:"
"`~Py_buffer.strides` являются ``NULL``."

#: ../../c-api/buffer.rst:365
msgid ""
"If :c:member:`~Py_buffer.strides` is ``NULL``, the array is interpreted as a "
"standard n-dimensional C-array. Otherwise, the consumer must access an n-"
"dimensional array as follows:"
msgstr ""
"Если :c:member:`~Py_buffer.strides` равно ``NULL``, массив интерпретируется "
"как стандартный n-мерный C-массив. В противном случае пользователь должен "
"получить доступ к n-мерному массиву следующим образом:"

#: ../../c-api/buffer.rst:369
msgid ""
"ptr = (char *)buf + indices[0] * strides[0] + ... + indices[n-1] * "
"strides[n-1];\n"
"item = *((typeof(item) *)ptr);"
msgstr ""
"ptr = (char *)buf + indices[0] * strides[0] + ... + indices[n-1] * "
"strides[n-1];\n"
"item = *((typeof(item) *)ptr);"

#: ../../c-api/buffer.rst:375
msgid ""
"As noted above, :c:member:`~Py_buffer.buf` can point to any location within "
"the actual memory block. An exporter can check the validity of a buffer with "
"this function:"
msgstr ""
"Как отмечалось выше, :c:member:`~Py_buffer.buf` может указывать на любое "
"местоположение в пределах фактического блока памяти. Экспортер может "
"проверить действительность буфера с помощью этой функции:"

#: ../../c-api/buffer.rst:379
msgid ""
"def verify_structure(memlen, itemsize, ndim, shape, strides, offset):\n"
"    \"\"\"Verify that the parameters represent a valid array within\n"
"       the bounds of the allocated memory:\n"
"           char *mem: start of the physical memory block\n"
"           memlen: length of the physical memory block\n"
"           offset: (char *)buf - mem\n"
"    \"\"\"\n"
"    if offset % itemsize:\n"
"        return False\n"
"    if offset < 0 or offset+itemsize > memlen:\n"
"        return False\n"
"    if any(v % itemsize for v in strides):\n"
"        return False\n"
"\n"
"    if ndim <= 0:\n"
"        return ndim == 0 and not shape and not strides\n"
"    if 0 in shape:\n"
"        return True\n"
"\n"
"    imin = sum(strides[j]*(shape[j]-1) for j in range(ndim)\n"
"               if strides[j] <= 0)\n"
"    imax = sum(strides[j]*(shape[j]-1) for j in range(ndim)\n"
"               if strides[j] > 0)\n"
"\n"
"    return 0 <= offset+imin and offset+imax+itemsize <= memlen"
msgstr ""
"def verify_structure(memlen, itemsize, ndim, shape, strides, offset):\n"
"    \"\"\"Verify that the parameters represent a valid array within\n"
"       the bounds of the allocated memory:\n"
"           char *mem: start of the physical memory block\n"
"           memlen: length of the physical memory block\n"
"           offset: (char *)buf - mem\n"
"    \"\"\"\n"
"    if offset % itemsize:\n"
"        return False\n"
"    if offset < 0 or offset+itemsize > memlen:\n"
"        return False\n"
"    if any(v % itemsize for v in strides):\n"
"        return False\n"
"\n"
"    if ndim <= 0:\n"
"        return ndim == 0 and not shape and not strides\n"
"    if 0 in shape:\n"
"        return True\n"
"\n"
"    imin = sum(strides[j]*(shape[j]-1) for j in range(ndim)\n"
"               if strides[j] <= 0)\n"
"    imax = sum(strides[j]*(shape[j]-1) for j in range(ndim)\n"
"               if strides[j] > 0)\n"
"\n"
"    return 0 <= offset+imin and offset+imax+itemsize <= memlen"

#: ../../c-api/buffer.rst:409
msgid "PIL-style: shape, strides and suboffsets"
msgstr "Стиль PIL: shape, strides и suboffsets"

#: ../../c-api/buffer.rst:411
msgid ""
"In addition to the regular items, PIL-style arrays can contain pointers that "
"must be followed in order to get to the next element in a dimension. For "
"example, the regular three-dimensional C-array ``char v[2][2][3]`` can also "
"be viewed as an array of 2 pointers to 2 two-dimensional arrays: ``char "
"(*v[2])[2][3]``. In suboffsets representation, those two pointers can be "
"embedded at the start of :c:member:`~Py_buffer.buf`, pointing to two ``char "
"x[2][3]`` arrays that can be located anywhere in memory."
msgstr ""
"В дополнение к обычным элементам массивы в стиле PIL могут содержать "
"указатели, которым необходимо следовать, чтобы перейти к следующему элементу "
"в измерении. Например, обычный трехмерный C-массив ``char v[2][2][3]`` также "
"можно рассматривать как массив из 2 указателей на 2 двумерных массива: "
"``char (*v[2])[2][3]``. В представлении suboffsets эти два указателя могут "
"быть встроены в начало :c:member:`~Py_buffer.buf`, указывая на два массива "
"``char x[2][3]``, которые могут быть расположены в любом месте памяти."

#: ../../c-api/buffer.rst:420
msgid ""
"Here is a function that returns a pointer to the element in an N-D array "
"pointed to by an N-dimensional index when there are both non-``NULL`` "
"strides and suboffsets::"
msgstr ""
"Вот функция, которая возвращает указатель на элемент в N-мерном массиве, на "
"который указывает N-мерный индекс, когда есть как не ``NULL`` шаги, так и "
"подзадачи::"

#: ../../c-api/buffer.rst:424
msgid ""
"void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,\n"
"                       Py_ssize_t *suboffsets, Py_ssize_t *indices) {\n"
"    char *pointer = (char*)buf;\n"
"    int i;\n"
"    for (i = 0; i < ndim; i++) {\n"
"        pointer += strides[i] * indices[i];\n"
"        if (suboffsets[i] >=0 ) {\n"
"            pointer = *((char**)pointer) + suboffsets[i];\n"
"        }\n"
"    }\n"
"    return (void*)pointer;\n"
"}"
msgstr ""
"void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,\n"
"                       Py_ssize_t *suboffsets, Py_ssize_t *indices) {\n"
"    char *pointer = (char*)buf;\n"
"    int i;\n"
"    for (i = 0; i < ndim; i++) {\n"
"        pointer += strides[i] * indices[i];\n"
"        if (suboffsets[i] >=0 ) {\n"
"            pointer = *((char**)pointer) + suboffsets[i];\n"
"        }\n"
"    }\n"
"    return (void*)pointer;\n"
"}"

#: ../../c-api/buffer.rst:439
msgid "Buffer-related functions"
msgstr "Функции, связанные с буфером"

#: ../../c-api/buffer.rst:443
msgid ""
"Return ``1`` if *obj* supports the buffer interface otherwise ``0``.  When "
"``1`` is returned, it doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed.  This function always succeeds."
msgstr ""
"Возвращает ``1``, если *obj* поддерживает интерфейс буфера, в противном "
"случае ``0``.  Когда возвращается ``1`` это не гарантирует, что :c:func:"
"`PyObject_GetBuffer` завершится успешно. Эта функция всегда завершается "
"успешно."

#: ../../c-api/buffer.rst:450
msgid ""
"Send a request to *exporter* to fill in *view* as specified by  *flags*. If "
"the exporter cannot provide a buffer of the exact type, it MUST raise :exc:"
"`BufferError`, set ``view->obj`` to ``NULL`` and return ``-1``."
msgstr ""
"Отправьте запрос *экспортеру* для заполнения поля *просмотр* в соответствии "
"с *флагами*. Если экспортер не может предоставить буфер точного типа, он "
"ДОЛЖЕН вызвать :exc:`BufferError`,  установить для ``view->obj`` значение "
"``NULL`` и вернуть ``-1``."

#: ../../c-api/buffer.rst:455
msgid ""
"On success, fill in *view*, set ``view->obj`` to a new reference to "
"*exporter* and return 0. In the case of chained buffer providers that "
"redirect requests to a single object, ``view->obj`` MAY refer to this object "
"instead of *exporter* (See :ref:`Buffer Object Structures <buffer-structs>`)."
msgstr ""
"В случае успеха заполните *view*, установите для ``view->obj`` новую ссылку "
"на *exporter* и верните 0. В случае поставщиков буфера с цепочкой, которые "
"перенаправляют запросы на один объект, ``view->obj``  МОЖЕТ ссылаться на "
"этот объект вместо *exporter* (см. :ref:`Buffer Object Structures <buffer-"
"structs>`)."

#: ../../c-api/buffer.rst:460
msgid ""
"Successful calls to :c:func:`PyObject_GetBuffer` must be paired with calls "
"to :c:func:`PyBuffer_Release`, similar to :c:func:`malloc` and :c:func:"
"`free`. Thus, after the consumer is done with the buffer, :c:func:"
"`PyBuffer_Release` must be called exactly once."
msgstr ""
"Успешные вызовы :c:func:`PyObject_GetBuffer` должны быть сопряжены с "
"вызовами :c:func:`PyBuffer_Release`, аналогично :c:func:`malloc` и :c:func:"
"`free`. Таким образом, после того, как потребитель завершит работу с "
"буфером, :c:func:`PyBuffer_Release` должен быть вызван ровно один раз."

#: ../../c-api/buffer.rst:468
msgid ""
"Release the buffer *view* and release the :term:`strong reference` (i.e. "
"decrement the reference count) to the view's supporting object, ``view-"
">obj``. This function MUST be called when the buffer is no longer being "
"used, otherwise reference leaks may occur."
msgstr ""
"Освободите буфер *view* и освободите :term:`strong reference` (т.е. "
"уменьшите количество ссылок) на вспомогательный объект представления, ``view-"
">obj``. Эта функция ДОЛЖНА вызываться, когда буфер больше не используется, в "
"противном случае могут произойти утечки ссылок."

#: ../../c-api/buffer.rst:473
msgid ""
"It is an error to call this function on a buffer that was not obtained via :"
"c:func:`PyObject_GetBuffer`."
msgstr ""
"Вызов этой функции для буфера, который не был получен с помощью :c:func:"
"`PyObject_GetBuffer` является ошибкой."

#: ../../c-api/buffer.rst:479
msgid ""
"Return the implied :c:member:`~Py_buffer.itemsize` from :c:member:"
"`~Py_buffer.format`. On error, raise an exception and return -1."
msgstr ""
"Возвращает подразумеваемый :c:member:`~Py_buffer.itemsize` из :c:member:"
"`~Py_buffer.format`. При ошибке создайте исключение и верните значение -1."

#: ../../c-api/buffer.rst:487
msgid ""
"Return ``1`` if the memory defined by the *view* is C-style (*order* is "
"``'C'``) or Fortran-style (*order* is ``'F'``) :term:`contiguous` or either "
"one (*order* is ``'A'``).  Return ``0`` otherwise.  This function always "
"succeeds."
msgstr ""
"Возвращает ``1`` , если память, определенная *view*, является памятью в "
"стиле C (*order* - это ``'C'``)  или в стиле Fortran (*order* - это "
"``'F'``) :term:`contiguous` или любой другой (*order* - это ``'A'``). В "
"противном случае верните ``0``. Эта функция всегда выполняется успешно."

#: ../../c-api/buffer.rst:494
msgid ""
"Get the memory area pointed to by the *indices* inside the given *view*. "
"*indices* must point to an array of ``view->ndim`` indices."
msgstr ""
"Получаем область памяти, на которую указывают *индексы* внутри данного "
"*представления*. *индексы* должны указывать на массив индексов ``view-"
">ndim``."

#: ../../c-api/buffer.rst:500
msgid ""
"Copy contiguous *len* bytes from *buf* to *view*. *fort* can be ``'C'`` or "
"``'F'`` (for C-style or Fortran-style ordering). ``0`` is returned on "
"success, ``-1`` on error."
msgstr ""
"Скопируйте непрерывные байты *len* из *buf* в *view*. *fort* может быть "
"``'C'`` или ``'F'`` (для упорядочения в стиле C или Fortran). ``0`` "
"возвращается при успешном выполнении, ``-1`` - при ошибке."

#: ../../c-api/buffer.rst:507
msgid ""
"Copy *len* bytes from *src* to its contiguous representation in *buf*. "
"*order* can be ``'C'`` or ``'F'`` or ``'A'`` (for C-style or Fortran-style "
"ordering or either one). ``0`` is returned on success, ``-1`` on error."
msgstr ""
"Скопируйте байты *len* из *src* в его непрерывное представление в *buf*. "
"*порядок* может быть ``'C'`` или ``'F'`` или ``'A'`` (для упорядочивания в "
"стиле C или Fortran или любого другого). ``0`` возвращается при успешном "
"выполнении, ``-1`` - при ошибке."

#: ../../c-api/buffer.rst:511
msgid "This function fails if *len* != *src->len*."
msgstr "Эта функция завершается ошибкой, если *len* != *src->len*."

#: ../../c-api/buffer.rst:516
msgid ""
"Copy data from *src* to *dest* buffer. Can convert between C-style and or "
"Fortran-style buffers."
msgstr ""
"Скопируйте данные из *src* в буфер *dest*. Может выполнять преобразование "
"между буферами в стиле C и/или Fortran."

#: ../../c-api/buffer.rst:519
msgid "``0`` is returned on success, ``-1`` on error."
msgstr "``0`` возвращается при успешном выполнении, ``-1`` - при ошибке."

#: ../../c-api/buffer.rst:523
msgid ""
"Fill the *strides* array with byte-strides of a :term:`contiguous` (C-style "
"if *order* is ``'C'`` or Fortran-style if *order* is ``'F'``) array of the "
"given shape with the given number of bytes per element."
msgstr ""
"Заполните массив *strides* байтовыми шагами :term:`contiguous` (в стиле C, "
"если *order* равен ``'C'`` или в стиле Fortran, если *order* равен ``'F'``) "
"массив заданной формы с заданным количеством байтов на элемент."

#: ../../c-api/buffer.rst:530
msgid ""
"Handle buffer requests for an exporter that wants to expose *buf* of size "
"*len* with writability set according to *readonly*. *buf* is interpreted as "
"a sequence of unsigned bytes."
msgstr ""
"Обрабатывать запросы буфера для экспортера, который хочет предоставить *buf* "
"размера *len* с возможностью записи, установленной в соответствии с "
"*readonly*. *buf* интерпретируется как последовательность байтов без знака."

#: ../../c-api/buffer.rst:534
msgid ""
"The *flags* argument indicates the request type. This function always fills "
"in *view* as specified by flags, unless *buf* has been designated as read-"
"only and :c:macro:`PyBUF_WRITABLE` is set in *flags*."
msgstr ""
"Аргумент *flags* указывает тип запроса. Эта функция всегда заполняет *view*, "
"как указано в flags, если только *buf* не был назначен доступным только для "
"чтения и :c:macro:`PyBUF_WRITABLE` не задан в *flags*."

#: ../../c-api/buffer.rst:538
msgid ""
"On success, set ``view->obj`` to a new reference to *exporter* and return 0. "
"Otherwise, raise :exc:`BufferError`, set ``view->obj`` to ``NULL`` and "
"return ``-1``;"
msgstr ""
"В случае успеха установите для ``view->obj`` новую ссылку на *exporter* и "
"верните 0. В противном случае поднимите :exc:`BufferError`, , установите для "
"``view->obj`` значение ``NULL`` и верните ``-1``;"

#: ../../c-api/buffer.rst:542
msgid ""
"If this function is used as part of a :ref:`getbufferproc <buffer-structs>`, "
"*exporter* MUST be set to the exporting object and *flags* must be passed "
"unmodified. Otherwise, *exporter* MUST be ``NULL``."
msgstr ""
"Если эта функция используется как часть :ref:`getbufferproc <buffer-"
"structs>`, *exporter* ДОЛЖЕН быть установлен в объект экспорта, а *flags* "
"должны передаваться без изменений. В противном случае *exporter* ДОЛЖНО быть "
"``NULL``."

#: ../../c-api/buffer.rst:3
msgid "buffer protocol"
msgstr "Буферный протокол"

#: ../../c-api/buffer.rst:3
msgid "buffer interface"
msgstr "буферный интерфейс"

#: ../../c-api/buffer.rst:3
msgid "(see buffer protocol)"
msgstr "(см. протокол буфера)"

#: ../../c-api/buffer.rst:3
msgid "buffer object"
msgstr "буферный объект"

#: ../../c-api/buffer.rst:32
msgid "PyBufferProcs (C type)"
msgstr "PyBufferProcs (тип C)"

#: ../../c-api/buffer.rst:295
msgid "contiguous"
msgstr "непрерывный"

#: ../../c-api/buffer.rst:295
msgid "C-contiguous"
msgstr "С-непрерывный"

#: ../../c-api/buffer.rst:295
msgid "Fortran contiguous"
msgstr "Непрерывность Fortran"
