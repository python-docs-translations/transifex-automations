# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Jon Britva, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/import.rst:6
msgid "Importing Modules"
msgstr "Импорт модулей"

#: ../../c-api/import.rst:16
msgid ""
"This is a wrapper around :c:func:`PyImport_Import()` which takes a :c:expr:"
"`const char *` as an argument instead of a :c:expr:`PyObject *`."
msgstr ""
"Это оболочка вокруг :c:func:`PyImport_Import()`, которая принимает в "
"качестве аргумента :c:expr:`const char *` вместо :c:expr:`PyObject *`."

#: ../../c-api/import.rst:21
msgid "This function is a deprecated alias of :c:func:`PyImport_ImportModule`."
msgstr ""
"Эта функция является устаревшим псевдонимом :c:func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:23
msgid ""
"This function used to fail immediately when the import lock was held by "
"another thread.  In Python 3.3 though, the locking scheme switched to per-"
"module locks for most purposes, so this function's special behaviour isn't "
"needed anymore."
msgstr ""
"Однако в Python 3.3 схема блокировки для большинства целей переключалась на "
"блокировки для каждого модуля, поэтому специальное поведение этой функции "
"больше не требуется."

#: ../../c-api/import.rst:34
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`."
msgstr ""
"Импортируйте модуль. Лучше всего это описать, обратившись к встроенной "
"функции Python :func:`__import__`."

#: ../../c-api/import.rst:37 ../../c-api/import.rst:53
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or ``NULL`` with an exception set on failure.  Like for :func:"
"`__import__`, the return value when a submodule of a package was requested "
"is normally the top-level package, unless a non-empty *fromlist* was given."
msgstr ""
"Возвращаемое значение — это новая ссылка на импортированный модуль или пакет "
"верхнего уровня или ``NULL`` с исключением, установленным в случае сбоя. Как "
"и в случае с :func:`__import__`, возвращаемое значение при запросе подмодуля "
"пакета обычно является пакетом верхнего уровня, если только не был указан "
"непустой *fromlist*."

#: ../../c-api/import.rst:43
msgid ""
"Failing imports remove incomplete module objects, like with :c:func:"
"`PyImport_ImportModule`."
msgstr ""
"При неудачном импорте удаляются неполные объекты модуля, как в случае с :c:"
"func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:49
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr ""
"Импортируйте модуль. Лучше всего это описать, обратившись к встроенной "
"функции Python :func:`__import__`, поскольку стандартная функция :func:"
"`__import__` вызывает эту функцию напрямую."

#: ../../c-api/import.rst:63
msgid ""
"Similar to :c:func:`PyImport_ImportModuleLevelObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Аналогично :c:func:`PyImport_ImportModuleLevelObject`, но имя представляет "
"собой строку в кодировке UTF-8, а не объект Unicode."

#: ../../c-api/import.rst:66
msgid "Negative values for *level* are no longer accepted."
msgstr "Отрицательные значения *level* больше не принимаются."

#: ../../c-api/import.rst:71
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\" (with an explicit *level* of 0, meaning absolute import).  It "
"invokes the :func:`__import__` function from the ``__builtins__`` of the "
"current globals.  This means that the import is done using whatever import "
"hooks are installed in the current environment."
msgstr ""
"Это интерфейс более высокого уровня, который вызывает текущую «функцию "
"перехвата импорта» (с явным *level*, равным 0, что означает абсолютный "
"импорт). Он вызывает функцию :func:`__import__` из ``__builtins__`` текущих "
"глобальных переменных. Это означает, что импорт выполняется с использованием "
"любых перехватчиков импорта, установленных в текущей среде."

#: ../../c-api/import.rst:77
msgid "This function always uses absolute imports."
msgstr "Эта функция всегда использует абсолютный импорт."

#: ../../c-api/import.rst:82
msgid ""
"Reload a module.  Return a new reference to the reloaded module, or ``NULL`` "
"with an exception set on failure (the module still exists in this case)."
msgstr ""
"Перезагрузите модуль. Вернуть новую ссылку на перезагруженный модуль или "
"``NULL`` с исключением, установленным в случае сбоя (в этом случае модуль "
"все еще существует)."

#: ../../c-api/import.rst:88
msgid ""
"Return the module object corresponding to a module name.  The *name* "
"argument may be of the form ``package.module``. First check the modules "
"dictionary if there's one there, and if not, create a new one and insert it "
"in the modules dictionary. Return ``NULL`` with an exception set on failure."
msgstr ""
"Верните объект модуля, соответствующий имени модуля. Аргумент *name* может "
"иметь форму ``package.module``. Сначала проверьте словарь модулей, если он "
"там есть, а если нет, создайте новый и вставьте его в словарь модулей. "
"Возвращает NULL с исключением, установленным в случае сбоя."

#: ../../c-api/import.rst:95
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use :c:func:"
"`PyImport_ImportModule` or one of its variants to import a module.  Package "
"structures implied by a dotted name for *name* are not created if not "
"already present."
msgstr ""
"Эта функция не загружает и не импортирует модуль; если модуль еще не был "
"загружен, вы получите пустой объект модуля. Используйте :c:func:"
"`PyImport_ImportModule` или один из его вариантов для импорта модуля. "
"Структуры пакетов, обозначенные через точку для *name*, не создаются, если "
"они еще не присутствуют."

#: ../../c-api/import.rst:105
msgid ""
"Similar to :c:func:`PyImport_AddModuleObject`, but the name is a UTF-8 "
"encoded string instead of a Unicode object."
msgstr ""
"Аналогично :c:func:`PyImport_AddModuleObject`, но имя представляет собой "
"строку в кодировке UTF-8, а не объект Unicode."

#: ../../c-api/import.rst:113
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or ``NULL`` with an exception set if an error occurred.  "
"*name* is removed from :data:`sys.modules` in error cases, even if *name* "
"was already in :data:`sys.modules` on entry to :c:func:"
"`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules in :"
"data:`sys.modules` is dangerous, as imports of such modules have no way to "
"know that the module object is an unknown (and probably damaged with respect "
"to the module author's intents) state."
msgstr ""
"Учитывая имя модуля (возможно, в форме ``package.module``) и объект кода, "
"считанный из файла байт-кода Python или полученный из встроенной функции :"
"func:`compile`, загрузите модуль. Вернуть новую ссылку на объект модуля или "
"``NULL`` с установленным исключением, если произошла ошибка. *name* "
"удаляется из :data:`sys.modules` в случае ошибок, даже если *name* уже было "
"в :data:`sys.modules` при входе в :c:func:`PyImport_ExecCodeModule`. "
"Оставлять не полностью инициализированные модули в :data:`sys.modules` "
"опасно, поскольку при импорте таких модулей нет возможности узнать, что "
"объект модуля находится в неизвестном (и, вероятно, поврежденном с точки "
"зрения намерений автора модуля) состоянии."

#: ../../c-api/import.rst:123
msgid ""
"The module's :attr:`__spec__` and :attr:`__loader__` will be set, if not set "
"already, with the appropriate values.  The spec's loader will be set to the "
"module's ``__loader__`` (if set) and to an instance of :class:`~importlib."
"machinery.SourceFileLoader` otherwise."
msgstr ""

#: ../../c-api/import.rst:128
msgid ""
"The module's :attr:`__file__` attribute will be set to the code object's :"
"attr:`~codeobject.co_filename`.  If applicable, :attr:`__cached__` will also "
"be set."
msgstr ""

#: ../../c-api/import.rst:132
msgid ""
"This function will reload the module if it was already imported.  See :c:"
"func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""
"Эта функция перезагрузит модуль, если он уже был импортирован. См. :c:func:"
"`PyImport_ReloadModule` для получения информации о предполагаемом способе "
"перезагрузки модуля."

#: ../../c-api/import.rst:135
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""
"Если *name* указывает на имя, разделенное точками, в форме ``package."
"module``, любые еще не созданные структуры пакета все равно не будут созданы."

#: ../../c-api/import.rst:138
msgid ""
"See also :c:func:`PyImport_ExecCodeModuleEx` and :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""
"См. также :c:func:`PyImport_ExecCodeModuleEx` и :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:144
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute "
"of the module object is set to *pathname* if it is non-``NULL``."
msgstr ""

#: ../../c-api/import.rst:147
msgid "See also :c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr "см. также :c:func:`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:152
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`__cached__` "
"attribute of the module object is set to *cpathname* if it is non-``NULL``.  "
"Of the three functions, this is the preferred one to use."
msgstr ""

#: ../../c-api/import.rst:161
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleObject`, but *name*, *pathname* and "
"*cpathname* are UTF-8 encoded strings. Attempts are also made to figure out "
"what the value for *pathname* should be from *cpathname* if the former is "
"set to ``NULL``."
msgstr ""
"Подобно :c:func:`PyImport_ExecCodeModuleObject`, но *name*, *pathname* и "
"*cpathname* — это строки в кодировке UTF-8. Также предпринимаются попытки "
"выяснить, каким должно быть значение *pathname* из *cpathname*, если для "
"первого установлено значение ``NULL``."

#: ../../c-api/import.rst:167
msgid ""
"Uses :func:`imp.source_from_cache()` in calculating the source path if only "
"the bytecode path is provided."
msgstr ""

#: ../../c-api/import.rst:174
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` "
"file). The magic number should be present in the first four bytes of the "
"bytecode file, in little-endian byte order. Returns ``-1`` on error."
msgstr ""
"Возвращает магическое число для файлов байт-кода Python (также известное как "
"файл :file:`.pyc`). Магическое число должно присутствовать в первых четырех "
"байтах файла байт-кода в порядке байтов с прямым порядком байтов. Возвращает "
"``-1`` в случае ошибки."

#: ../../c-api/import.rst:178
msgid "Return value of ``-1`` upon failure."
msgstr "Возвращаемое значение ``-1`` в случае неудачи."

#: ../../c-api/import.rst:184
msgid ""
"Return the magic tag string for :pep:`3147` format Python bytecode file "
"names.  Keep in mind that the value at ``sys.implementation.cache_tag`` is "
"authoritative and should be used instead of this function."
msgstr ""
"Возвращает строку магического тега для имен файлов байт-кода Python в "
"формате :pep:`3147`. Имейте в виду, что значение ``sys.implementation."
"cache_tag`` является авторитетным и его следует использовать вместо этой "
"функции."

#: ../../c-api/import.rst:192
msgid ""
"Return the dictionary used for the module administration (a.k.a. ``sys."
"modules``).  Note that this is a per-interpreter variable."
msgstr ""
"Возвращает словарь, используемый для администрирования модуля (он же ``sys."
"modules``). Обратите внимание, что это переменная для каждого интерпретатора."

#: ../../c-api/import.rst:197
msgid ""
"Return the already imported module with the given name.  If the module has "
"not been imported yet then returns ``NULL`` but does not set an error.  "
"Returns ``NULL`` and sets an error if the lookup failed."
msgstr ""
"Верните уже импортированный модуль с заданным именем. Если модуль еще не был "
"импортирован, возвращается NULL, но не устанавливается ошибка. Возвращает "
"NULL и устанавливает ошибку, если поиск не удался."

#: ../../c-api/import.rst:205
msgid ""
"Return a finder object for a :data:`sys.path`/:attr:`!pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook "
"is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller that the :term:`path based finder` could not find a "
"finder for this path item. Cache the result in :data:`sys."
"path_importer_cache`. Return a new reference to the finder object."
msgstr ""
"Возвращает объект поиска для элемента :data:`sys.path`/:attr:`!pkg.__path__` "
"*path*, возможно, извлекая его из словаря :data:`sys.path_importer_cache`. "
"Если он еще не кэширован, просматривайте :data:`sys.path_hooks`, пока не "
"будет найден перехватчик, способный обработать элемент пути. Верните None, "
"если ни один крючок не может; это сообщает нашему вызывающему объекту, что "
"средство поиска на основе пути не смогло найти средство поиска для этого "
"элемента пути. Кэшируйте результат в :data:`sys.path_importer_cache`. "
"Верните новую ссылку на объект поиска."

#: ../../c-api/import.rst:216
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use :c:func:"
"`PyImport_ImportModule`.  (Note the misnomer --- this function would reload "
"the module if it was already imported.)"
msgstr ""
"Загрузите замороженный модуль с именем *name*. Возвращайте ``1`` в случае "
"успеха, ``0``, если модуль не найден, и ``-1`` с установленным исключением, "
"если инициализация не удалась. Чтобы получить доступ к импортированному "
"модулю при успешной загрузке, используйте :c:func:`PyImport_ImportModule`. "
"(Обратите внимание на неправильное название — эта функция перезагрузит "
"модуль, если он уже был импортирован.)"

#: ../../c-api/import.rst:224
msgid "The ``__file__`` attribute is no longer set on the module."
msgstr "Атрибут ``__file__`` больше не установлен в модуле."

#: ../../c-api/import.rst:230
msgid ""
"Similar to :c:func:`PyImport_ImportFrozenModuleObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Аналогично :c:func:`PyImport_ImportFrozenModuleObject`, но имя представляет "
"собой строку в кодировке UTF-8, а не объект Unicode."

#: ../../c-api/import.rst:238
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the "
"Python source distribution).  Its definition, found in :file:`Include/import."
"h`, is::"
msgstr ""
"Это определение типа структуры для дескрипторов замороженных модулей, "
"сгенерированное утилитой :program:`freeze` (см. :file:`Tools/freeze/` в "
"дистрибутиве исходного кода Python). Его определение, найденное в :file:"
"`Include/import.h`, следующее::"

#: ../../c-api/import.rst:250
msgid ""
"The new ``is_package`` field indicates whether the module is a package or "
"not. This replaces setting the ``size`` field to a negative value."
msgstr ""
"Новое поле is_package указывает, является ли модуль пакетом или нет. Это "
"заменяет установку отрицательного значения поля ``size``."

#: ../../c-api/import.rst:256
msgid ""
"This pointer is initialized to point to an array of :c:struct:`_frozen` "
"records, terminated by one whose members are all ``NULL`` or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr ""
"Этот указатель инициализируется, чтобы указать на массив записей :c:struct:"
"`_frozen`, заканчивающийся записью, все элементы которой имеют значение "
"``NULL`` или ноль. Когда импортируется замороженный модуль, он ищется в этой "
"таблице. Сторонний код может сыграть с этим злую шутку, предоставляя "
"динамически создаваемую коллекцию замороженных модулей."

#: ../../c-api/import.rst:264
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called "
"before :c:func:`Py_Initialize`."
msgstr ""
"Добавьте один модуль в существующую таблицу встроенных модулей. Это удобная "
"оболочка :c:func:`PyImport_ExtendInittab`, возвращающая ``-1``, если таблицу "
"невозможно расширить. Новый модуль может быть импортирован под именем *name* "
"и использует функцию *initfunc* в качестве функции инициализации, вызываемой "
"при первой попытке импорта. Это должно быть вызвано перед :c:func:"
"`Py_Initialize`."

#: ../../c-api/import.rst:274
msgid ""
"Structure describing a single entry in the list of built-in modules. "
"Programs which embed Python may use an array of these structures in "
"conjunction with :c:func:`PyImport_ExtendInittab` to provide additional "
"built-in modules. The structure consists of two members:"
msgstr ""
"Структура, описывающая одну запись в списке встроенных модулей. Программы, "
"встраиваемые в Python, могут использовать массив этих структур в сочетании "
"с :c:func:`PyImport_ExtendInittab` для предоставления дополнительных "
"встроенных модулей. Структура состоит из двух участников:"

#: ../../c-api/import.rst:282
msgid "The module name, as an ASCII encoded string."
msgstr "Имя модуля в виде строки в кодировке ASCII."

#: ../../c-api/import.rst:286
msgid "Initialization function for a module built into the interpreter."
msgstr "Функция инициализации модуля, встроенная в интерпретатор."

#: ../../c-api/import.rst:291
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains ``NULL`` for the :c:"
"member:`~_inittab.name` field; failure to provide the sentinel value can "
"result in a memory fault. Returns ``0`` on success or ``-1`` if insufficient "
"memory could be allocated to extend the internal table.  In the event of "
"failure, no modules are added to the internal table.  This must be called "
"before :c:func:`Py_Initialize`."
msgstr ""
"Добавьте коллекцию модулей в таблицу встроенных модулей. Массив *newtab* "
"должен заканчиваться контрольной записью, которая содержит ``NULL`` для "
"поля :c:member:`~_inittab.name`; непредоставление контрольного значения "
"может привести к сбою памяти. Возвращает ``0`` в случае успеха или ``-1``, "
"если для расширения внутренней таблицы было выделено недостаточно памяти. В "
"случае сбоя во внутреннюю таблицу модули не добавляются. Это должно быть "
"вызвано до :c:func:`Py_Initialize`."

#: ../../c-api/import.rst:298
msgid ""
"If Python is initialized multiple times, :c:func:`PyImport_AppendInittab` "
"or :c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"Если Python инициализируется несколько раз, перед каждой инициализацией "
"Python необходимо вызывать :c:func:`PyImport_AppendInittab` или :c:func:"
"`PyImport_ExtendInittab`."

#: ../../c-api/import.rst:11
msgid "package variable"
msgstr "переменная пакета"

#: ../../c-api/import.rst:11
msgid "__all__"
msgstr "__all__"

#: ../../c-api/import.rst:11
msgid "__all__ (package variable)"
msgstr "__all__ (переменная пакета)"

#: ../../c-api/import.rst:11
msgid "modules (in module sys)"
msgstr "modules (in module sys)"

#: ../../c-api/import.rst:32 ../../c-api/import.rst:111
msgid "built-in function"
msgstr "встроенная функция"

#: ../../c-api/import.rst:32
msgid "__import__"
msgstr "__import__"

#: ../../c-api/import.rst:111
msgid "compile"
msgstr "скомпилировать"

#: ../../c-api/import.rst:236
msgid "freeze utility"
msgstr "заморозить утилиту"
