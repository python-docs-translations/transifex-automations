# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "Объекты для указания типа"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"Предусмотрены различные встроенные типы для указания типа. В настоящее время "
"существует два типа - :ref:`GenericAlias <types-genericalias>` и :ref:`Union "
"<types-union>`. Только ``GenericAlias`` доступен для C."

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a :c:expr:"
"`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any "
"``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically "
"constructed and ``__args__`` is set to ``(args,)``. Minimal checking is done "
"for the arguments, so the function will succeed even if *origin* is not a "
"type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is constructed "
"lazily from ``__args__``.  On failure, an exception is raised and ``NULL`` "
"is returned."
msgstr ""
"Создает объект :ref:`GenericAlias <types-genericalias>`. Что эквивалентно "
"вызову класса Python :class:`types.GenericAlias`. Аргументы *origin* и "
"*args* устанавливают атрибуты ``GenericAlias`` ``__origin__`` и ``__args__`` "
"соответственно. *origin* должно быть :c:expr:`PyTypeObject*`, а *args* может "
"быть :c:expr:`PyTupleObject*` или любым другим ``PyObject*``. Если "
"переданный *args* не является кортежем, автоматически создается 1-й кортеж и "
"``__args__`` присваивается значение ``(args,)``. Для аргументов выполняется "
"минимальная проверка, поэтому функция будет выполнена успешно, даже если "
"*origin* не является типом. Атрибут ``__parameters__`` в ``GenericAlias`` "
"автоматически создается из ``__args__``. В случае сбоя генерируется "
"исключение и возвращается значение ``NULL``."

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "Вот пример того, как сделать тип расширения универсальным::"

#: ../../c-api/typehints.rst:30
msgid ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Other methods.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP "
"585\"}\n"
"    ...\n"
"}"
msgstr ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Other methods.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP "
"585\"}\n"
"    ...\n"
"}"

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr "Метод модели данных :meth:`~object.__class_getitem__`."

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"Тип C объекта, возвращаемый с помощью :c:func:`Py_GenericAlias`. "
"Эквивалентен :class:`types.GenericAlias` в Python."
