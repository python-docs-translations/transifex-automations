# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 15:19+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/time.rst:6
msgid "PyTime C API"
msgstr "PyTime C API"

#: ../../c-api/time.rst:10
msgid ""
"The clock C API provides access to system clocks. It is similar to the "
"Python :mod:`time` module."
msgstr ""
"API часов C обеспечивает доступ к системным часам. Он похож на модуль "
"Python :mod:`time`."

#: ../../c-api/time.rst:13
msgid ""
"For C API related to the :mod:`datetime` module, see :ref:`datetimeobjects`."
msgstr ""
"Подробнее о C API, связанном с модулем :mod:`datetime`, "
"см. :ref:`datetimeobjects`."

#: ../../c-api/time.rst:17
msgid "Types"
msgstr "Типы"

#: ../../c-api/time.rst:21
msgid ""
"A timestamp or duration in nanoseconds, represented as a signed 64-bit "
"integer."
msgstr ""
"Временная метка или продолжительность в наносекундах, представленная как 64-"
"битное целое число со знаком."

#: ../../c-api/time.rst:24
msgid ""
"The reference point for timestamps depends on the clock used. For "
"example, :c:func:`PyTime_Time` returns timestamps relative to the UNIX epoch."
msgstr ""
"Точка отсчета для меток времени зависит от используемых часов. "
"Например, :c:func:`PyTime_Time` возвращает временные метки относительно "
"эпохи UNIX."

#: ../../c-api/time.rst:27
msgid ""
"The supported range is around [-292.3 years; +292.3 years]. Using the Unix "
"epoch (January 1st, 1970) as reference, the supported date range is around "
"[1677-09-21; 2262-04-11]. The exact limits are exposed as constants:"
msgstr ""
"Поддерживаемый диапазон составляет около [-292,3 года; +292,3 года]. "
"Используя эпоху Unix (1 января 1970 г.) в качестве ориентира, поддерживаемый "
"диапазон дат составляет около [1677-09-21; 2262-04-11]. Точные пределы "
"представлены как константы:"

#: ../../c-api/time.rst:34
msgid "Minimum value of :c:type:`PyTime_t`."
msgstr "Минимальное значение :c:type:`PyTime_t`."

#: ../../c-api/time.rst:38
msgid "Maximum value of :c:type:`PyTime_t`."
msgstr "Максимальное значение :c:type:`PyTime_t`."

#: ../../c-api/time.rst:42
msgid "Clock Functions"
msgstr "Функции часов"

#: ../../c-api/time.rst:44
msgid ""
"The following functions take a pointer to a :c:expr:`PyTime_t` that they set "
"to the value of a particular clock. Details of each clock are given in the "
"documentation of the corresponding Python function."
msgstr ""
"Следующие функции принимают указатель на :c:expr:`PyTime_t`, которому они "
"присваивают значение определенных часов. Подробности о каждых часах "
"приведены в документации соответствующей функции Python."

#: ../../c-api/time.rst:49
msgid ""
"The functions return ``0`` on success, or ``-1`` (with an exception set) on "
"failure."
msgstr ""
"Функции возвращают ``0`` в случае успеха или ``-1`` (с установленным "
"исключением) в случае неудачи."

#: ../../c-api/time.rst:52
msgid ""
"On integer overflow, they set the :c:data:`PyExc_OverflowError` exception "
"and set ``*result`` to the value clamped to the ``[PyTime_MIN; PyTime_MAX]`` "
"range. (On current systems, integer overflows are likely caused by "
"misconfigured system time.)"
msgstr ""
"При целочисленном переполнении они устанавливают "
"исключение :c:data:`PyExc_OverflowError` и устанавливают ``*result`` в "
"значение, зафиксированное в ``[PyTime_MIN; PyTime_MAX]`` диапазон. (В "
"современных системах целочисленные переполнения, скорее всего, вызваны "
"неправильной настройкой системного времени.)"

#: ../../c-api/time.rst:58
msgid ""
"As any other C API (unless otherwise specified), the functions must be "
"called with the :term:`GIL` held."
msgstr ""
"Как и любой другой C API (если не указано иное), функции должны вызываться с "
"удержанием :term:`GIL`."

#: ../../c-api/time.rst:63
msgid ""
"Read the monotonic clock. See :func:`time.monotonic` for important details "
"on this clock."
msgstr ""
"Прочитайте монотонные часы. См. :func:`time.monotonic` для получения важной "
"информации об этих часах."

#: ../../c-api/time.rst:68
msgid ""
"Read the performance counter. See :func:`time.perf_counter` for important "
"details on this clock."
msgstr ""
"Прочтите счетчик производительности. См. :func:`time.perf_counter` для "
"получения важной информации об этих часах."

#: ../../c-api/time.rst:73
msgid ""
"Read the “wall clock” time. See :func:`time.time` for details important on "
"this clock."
msgstr ""
"Прочитайте время «настенных часов». См. :func:`time.time` для получения "
"подробной информации, важной для этих часов."

#: ../../c-api/time.rst:78
msgid "Raw Clock Functions"
msgstr "Функции необработанных часов"

#: ../../c-api/time.rst:80
msgid ""
"Similar to clock functions, but don't set an exception on error and don't "
"require the caller to hold the GIL."
msgstr ""
"Аналогично функциям часов, но не устанавливает исключение в случае ошибки и "
"не требует от вызывающей стороны сохранения GIL."

#: ../../c-api/time.rst:83
msgid "On success, the functions return ``0``."
msgstr "В случае успеха функции возвращают ``0``."

#: ../../c-api/time.rst:85
msgid ""
"On failure, they set ``*result`` to ``0`` and return ``-1``, *without* "
"setting an exception. To get the cause of the error, acquire the GIL and "
"call the regular (non-``Raw``) function. Note that the regular function may "
"succeed after the ``Raw`` one failed."
msgstr ""
"В случае неудачи они устанавливают ``*result`` в ``0`` и возвращают ``-1``, "
"*без* установки исключения. Чтобы узнать причину ошибки, получите GIL и "
"вызовите обычную (не Raw) функцию. Обратите внимание, что обычная функция "
"может завершиться успешно после того, как «Raw» потерпела неудачу."

#: ../../c-api/time.rst:92
msgid ""
"Similar to :c:func:`PyTime_Monotonic`, but don't set an exception on error "
"and don't require holding the GIL."
msgstr ""
"Аналогично :c:func:`PyTime_Monotonic`, но не устанавливает исключение в "
"случае ошибки и не требует сохранения GIL."

#: ../../c-api/time.rst:97
msgid ""
"Similar to :c:func:`PyTime_PerfCounter`, but don't set an exception on error "
"and don't require holding the GIL."
msgstr ""
"Аналогично :c:func:`PyTime_PerfCounter`, но не устанавливает исключение при "
"ошибке и не требует сохранения GIL."

#: ../../c-api/time.rst:102
msgid ""
"Similar to :c:func:`PyTime_Time`, but don't set an exception on error and "
"don't require holding the GIL."
msgstr ""
"Аналогично :c:func:`PyTime_Time`, но не устанавливает исключение при ошибке "
"и не требует сохранения GIL."

#: ../../c-api/time.rst:107
msgid "Conversion functions"
msgstr "Функции преобразования"

#: ../../c-api/time.rst:111
msgid "Convert a timestamp to a number of seconds as a C :c:expr:`double`."
msgstr ""
"Преобразуйте временную метку в количество секунд в виде C :c:expr:`double`."

#: ../../c-api/time.rst:113
msgid ""
"The function cannot fail, but note that :c:expr:`double` has limited "
"accuracy for large values."
msgstr ""
"Функция не может дать сбой, но учтите, что :c:expr:`double` имеет "
"ограниченную точность для больших значений."
