# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Jon Britva, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr "Протокол последовательности"

#: ../../c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides the sequence protocol, and ``0`` "
"otherwise. Note that it returns ``1`` for Python classes with a :meth:"
"`~object.__getitem__` method, unless they are :class:`dict` subclasses, "
"since in general it is impossible to determine what type of keys the class "
"supports.  This function always succeeds."
msgstr ""
"Возвращайте ``1``, если объект предоставляет протокол последовательности, и "
"``0`` в противном случае. Обратите внимание, что он возвращает ``1`` для "
"классов Python с помощью метода :meth:`~object.__getitem__`, если только они "
"не являются подклассами :class:`dict`, поскольку в общем случае невозможно "
"определить, какой тип ключей принадлежит классу. поддерживает. Эта функция "
"всегда завершается успешно."

#: ../../c-api/sequence.rst:23
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""
"Возвращает количество объектов в последовательности *o* в случае успеха и "
"``-1`` в случае неудачи. Это эквивалентно выражению Python ``len(o)``."

#: ../../c-api/sequence.rst:29
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""
"Возвращает объединение *o1* и *o2* в случае успеха и ``NULL`` в случае "
"неудачи. Это эквивалент выражения Python ``o1 + o2``."

#: ../../c-api/sequence.rst:35
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  This is the equivalent of the Python expression ``o * "
"count``."
msgstr ""
"Возвращает результат повторения объекта последовательности *o* *count* раз "
"или ``NULL`` в случае ошибки. Это эквивалент выражения Python ``o * count``."

#: ../../c-api/sequence.rst:41
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python expression ``o1 += o2``."
msgstr ""
"Возвращает объединение *o1* и *o2* в случае успеха и ``NULL`` в случае "
"неудачи. Операция выполняется *на месте*, если *o1* поддерживает ее. Это "
"эквивалент выражения Python ``o1 += o2``."

#: ../../c-api/sequence.rst:48
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  The operation is done *in-place* when *o* supports "
"it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""
"Возвращает результат повторения объекта последовательности *o* *count* раз "
"или ``NULL`` в случае ошибки. Операция выполняется *на месте*, если *o* ее "
"поддерживает. Это эквивалент выражения Python ``o *= count``."

#: ../../c-api/sequence.rst:55
msgid ""
"Return the *i*\\ th element of *o*, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""
"Возвращает *i*\\-й элемент *o* или ``NULL`` в случае ошибки. Это эквивалент "
"выражения Python ``o[i]``."

#: ../../c-api/sequence.rst:61
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or ``NULL`` "
"on failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""
"Возвращает фрагмент объекта последовательности *o* между *i1* и *i2* или "
"``NULL`` в случае ошибки. Это эквивалент выражения Python ``o[i1:i2]``."

#: ../../c-api/sequence.rst:67
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and "
"return ``-1`` on failure; return ``0`` on success.  This is the equivalent "
"of the Python statement ``o[i] = v``.  This function *does not* steal a "
"reference to *v*."
msgstr ""
"Присвойте объект *v* *i*\\-му элементу *o*. Вызвать исключение и вернуть "
"``-1`` в случае неудачи; верните ``0`` в случае успеха. Это эквивалент "
"оператора Python ``o[i] = v``. Эта функция *не* крадет ссылку на *v*."

#: ../../c-api/sequence.rst:72
msgid ""
"If *v* is ``NULL``, the element is deleted, but this feature is deprecated "
"in favour of using :c:func:`PySequence_DelItem`."
msgstr ""
"Если *v* имеет значение ``NULL``, элемент удаляется, но эта функция устарела "
"в пользу использования :c:func:`PySequence_DelItem`."

#: ../../c-api/sequence.rst:78
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This "
"is the equivalent of the Python statement ``del o[i]``."
msgstr ""
"Удалить *i*\\-й элемент объекта *o*. Возвращает ``-1`` в случае неудачи. Это "
"эквивалент оператора Python del o[i]``."

#: ../../c-api/sequence.rst:84
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from *i1* "
"to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""
"Назначьте объект последовательности *v* срезу в объекте последовательности "
"*o* от *i1* до *i2*. Это эквивалент оператора Python ``o[i1:i2] = v``."

#: ../../c-api/sequence.rst:90
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` "
"on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""
"Удалите фрагмент в объекте последовательности *o* от *i1* до *i2*. "
"Возвращает ``-1`` в случае неудачи. Это эквивалент оператора Python del o[i1:"
"i2]``."

#: ../../c-api/sequence.rst:96
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``.  "
"This is equivalent to the Python expression ``o.count(value)``."
msgstr ""
"Возвращает количество вхождений *value* в *o*, то есть возвращает количество "
"ключей, для которых ``o[key] == value``. В случае неудачи верните ``-1``. "
"Это эквивалентно выражению Python ``o.count(value)``."

#: ../../c-api/sequence.rst:103
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to *value*, "
"return ``1``, otherwise return ``0``. On error, return ``-1``.  This is "
"equivalent to the Python expression ``value in o``."
msgstr ""
"Определите, содержит ли *o* *value*. Если элемент в *o* равен *value*, "
"верните ``1``, в противном случае верните ``0``. В случае ошибки верните "
"``-1``. Это эквивалентно выражению Python «значение в o»."

#: ../../c-api/sequence.rst:110
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return "
"``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""
"Возвращает первый индекс *i*, для которого ``o[i] == value``. В случае "
"ошибки верните ``-1``. Это эквивалентно выражению Python ``o.index(value)``."

#: ../../c-api/sequence.rst:116
msgid ""
"Return a list object with the same contents as the sequence or iterable *o*, "
"or ``NULL`` on failure.  The returned list is guaranteed to be new.  This is "
"equivalent to the Python expression ``list(o)``."
msgstr ""
"Возвращает объект списка с тем же содержимым, что и последовательность или "
"итерируемый объект *o*, или ``NULL`` в случае ошибки. Возвращаемый список "
"гарантированно будет новым. Это эквивалентно выражению Python ``list(o)``."

#: ../../c-api/sequence.rst:125
msgid ""
"Return a tuple object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  If *o* is a tuple, a new reference will be "
"returned, otherwise a tuple will be constructed with the appropriate "
"contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""
"Возвращает объект-кортеж с тем же содержимым, что и последовательность или "
"итерируемый объект *o*, или ``NULL`` в случае ошибки. Если *o* является "
"кортежем, будет возвращена новая ссылка, в противном случае кортеж будет "
"создан с соответствующим содержимым. Это эквивалентно выражению Python "
"``tuple(o)``."

#: ../../c-api/sequence.rst:133
msgid ""
"Return the sequence or iterable *o* as an object usable by the other "
"``PySequence_Fast*`` family of functions. If the object is not a sequence or "
"iterable, raises :exc:`TypeError` with *m* as the message text. Returns "
"``NULL`` on failure."
msgstr ""
"Возвращает последовательность или итерируемый объект *o* как объект, "
"используемый другим семейством функций ``PySequence_Fast*``. Если объект не "
"является последовательностью или итерируемым объектом, выдается :exc:"
"`TypeError` с *m* в качестве текста сообщения. Возвращает NULL в случае "
"ошибки."

#: ../../c-api/sequence.rst:138
msgid ""
"The ``PySequence_Fast*`` functions are thus named because they assume *o* is "
"a :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access the data "
"fields of *o* directly."
msgstr ""
"Функции ``PySequence_Fast*`` названы таким образом, потому что они "
"предполагают, что *o* является :c:type:`PyTupleObject` или :c:type:"
"`PyListObject`, и обращаются к полям данных *o* напрямую."

#: ../../c-api/sequence.rst:142
msgid ""
"As a CPython implementation detail, if *o* is already a sequence or list, it "
"will be returned."
msgstr ""
"В качестве детали реализации CPython, если *o* уже является "
"последовательностью или списком, оно будет возвращено."

#: ../../c-api/sequence.rst:148
msgid ""
"Returns the length of *o*, assuming that *o* was returned by :c:func:"
"`PySequence_Fast` and that *o* is not ``NULL``.  The size can also be "
"retrieved by calling :c:func:`PySequence_Size` on *o*, but :c:func:"
"`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or "
"tuple."
msgstr ""
"Возвращает длину *o*, предполагая, что *o* было возвращено :c:func:"
"`PySequence_Fast` и что *o* не равно ``NULL``. Размер также можно получить, "
"вызвав :c:func:`PySequence_Size` для *o*, но :c:func:"
"`PySequence_Fast_GET_SIZE` работает быстрее, поскольку может считать, что "
"*o* — это список или кортеж."

#: ../../c-api/sequence.rst:157
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:"
"func:`PySequence_Fast`, *o* is not ``NULL``, and that *i* is within bounds."
msgstr ""
"Верните *i*\\-й элемент *o*, предполагая, что *o* было возвращено :c:func:"
"`PySequence_Fast`, *o* не равно ``NULL`` и что *i* находится в пределах "
"допустимых значений."

#: ../../c-api/sequence.rst:163
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not ``NULL``."
msgstr ""
"Возвращает базовый массив PyObject указателей . Предполагается, что *o* было "
"возвращено :c:func:`PySequence_Fast` и *o* не равно ``NULL``."

#: ../../c-api/sequence.rst:166
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items array. "
"So, only use the underlying array pointer in contexts where the sequence "
"cannot change."
msgstr ""
"Обратите внимание: если размер списка изменяется, перераспределение может "
"привести к перемещению массива элементов. Поэтому используйте указатель "
"базового массива только в тех контекстах, где последовательность не может "
"измениться."

#: ../../c-api/sequence.rst:173
msgid ""
"Return the *i*\\ th element of *o* or ``NULL`` on failure. Faster form of :c:"
"func:`PySequence_GetItem` but without checking that :c:func:"
"`PySequence_Check` on *o* is true and without adjustment for negative "
"indices."
msgstr ""
"В случае ошибки вернуть *i*\\-й элемент *o* или ``NULL``. Более быстрая "
"форма :c:func:`PySequence_GetItem`, но без проверки истинности :c:func:"
"`PySequence_Check` для *o* и без корректировки отрицательных индексов."

#: ../../c-api/sequence.rst:21 ../../c-api/sequence.rst:123
msgid "built-in function"
msgstr "встроенная функция"

#: ../../c-api/sequence.rst:21
msgid "len"
msgstr "len"

#: ../../c-api/sequence.rst:123
msgid "tuple"
msgstr "кортеж"
