# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Jon Britva, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 15:26+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "Файловые объекты"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""
"Эти API представляют собой минимальную эмуляцию Python 2 C API для "
"встроенных файловых объектов, которые раньше полагались на поддержку "
"буферизованного ввода-вывода (:c:expr:`FILE*`) из стандартной библиотеки C. "
"В Python 3 файлы и потоки используют новый модуль :mod:`io`, который "
"определяет несколько уровней над низкоуровневым не буферизованным вводом-"
"выводом операционной системы. Функции, описанные ниже, являются удобными "
"оболочками на языке Си для этих новых API и предназначены в основном для "
"сообщения о внутренних ошибках в интерпретаторе; стороннему коду "
"рекомендуется вместо этого обращаться к API :mod:`io`."

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"Создает файловый объект Python из файлового дескриптора уже открытого файла "
"*fd*. Аргументы *name*, *encoding*, *errors* и *newline* могут иметь "
"значение ``NULL`` для использования по умолчанию; *buffering* может иметь "
"значение *-1* для использования по умолчанию. *name* игнорируется и "
"сохраняется для обеспечения обратной совместимости. Возвращает ``NULL`` в "
"случае сбоя. Для получения более подробного описания аргументов, пожалуйста, "
"обратитесь к документации по функции :func:`io.open`."

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Поскольку потоки Python имеют свой собственный уровень буферизации, их "
"смешивание с файловыми дескрипторами уровня операционной системы может "
"привести к различным проблемам (например, к неожиданному упорядочению "
"данных)."

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "Игнорирует атрибут *name*."

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""
"Возвращает файловый дескриптор, связанный с *p*, в виде :c:expr:`int`. Если "
"объект является целым числом, возвращается его значение. Если нет, то "
"вызывается метод объекта :meth:`~io.IOBase.fileno`, если он существует; "
"метод должен возвращать целое число, которое возвращается в качестве "
"значения файлового дескриптора. Устанавливает исключение и возвращает ``-1`` "
"в случае сбоя."

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"Эквивалентно ``p.readline([n])``, эта функция считывает одну строку из "
"объекта *p*. *p* может быть файловым объектом или любым методом объекта :"
"meth:`~io.IOBase.readline`. Если *n* равно ``0``, считывается ровно одна "
"строка, независимо от длины строки. Если *n* больше ``0``, из файла будет "
"считано не более *n* байт; может быть возвращена неполная строка. В обоих "
"случаях возвращается пустая строка, если конец файла достигнут немедленно. "
"Однако, если *n* меньше ``0``, считывается одна строка независимо от длины, "
"но :exc:`EOFError` вызывается, если конец файла достигнут немедленно."

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""
"Переопределяет обычное поведение :func:`io.open_code` для передачи его "
"параметра через предоставленный обработчик."

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr "*Обработчик* — это функция типа:"

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""
"Эквивалент :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, где "
"*path* гарантированно будет :c:type:`PyUnicodeObject`."

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"В функцию перехвата передается указатель *userData*. Поскольку функции "
"перехвата могут вызываться из разных сред выполнения, этот указатель не "
"должен напрямую ссылаться на состояние Python."

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""
"Поскольку этот перехват намеренно используется во время импорта, избегайте "
"импорта новых модулей во время его выполнения, если только не известно, что "
"они заморожены или доступны в ``sys.modules``."

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""
"После установки перехватчика его нельзя удалить или заменить, и последующие "
"вызовы :c:func:`PyFile_SetOpenCodeHook` завершатся ошибкой. В случае сбоя "
"функция возвращает значение -1 и устанавливает исключение, если "
"интерпретатор был инициализирован."

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "Эту функцию безопасно вызывать перед :c:func:`Py_Initialize`."

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""
"Вызывает :ref:`auditing event <auditing>` ``setopencodehook`` без аргументов."

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Записывает объект *obj* в файл object *p*. Единственным поддерживаемым "
"флагом для *flags* является :c:macro:`Py_PRINT_RAW`; если он задан, то "
"вместо :func:`repr` записывается :func:`str` объекта. Верните ``0`` в случае "
"успеха или ``-1`` в случае сбоя; будет установлено соответствующее "
"исключение."

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Запишите строку *s* в файловый объект *p*. Верните ``0`` в случае успеха или "
"``-1`` в случае сбоя; будет установлено соответствующее исключение."

#: ../../c-api/file.rst:8
msgid "object"
msgstr "объект"

#: ../../c-api/file.rst:8
msgid "file"
msgstr "файл"

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr "EOFError (встроенное исключение)"

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr "Py_PRINT_RAW (C макрос)"
