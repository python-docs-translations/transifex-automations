# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/perfmaps.rst:6
msgid "Support for Perf Maps"
msgstr "Поддержка карт производительности"

#: ../../c-api/perfmaps.rst:8
msgid ""
"On supported platforms (as of this writing, only Linux), the runtime can "
"take advantage of *perf map files* to make Python functions visible to an "
"external profiling tool (such as `perf <https://perf.wiki.kernel.org/index."
"php/Main_Page>`_). A running process may create a file in the ``/tmp`` "
"directory, which contains entries that can map a section of executable code "
"to a name. This interface is described in the `documentation of the Linux "
"Perf tool <https://git.kernel.org/pub/scm/linux/ kernel/git/torvalds/linux."
"git/tree/tools/perf/Documentation/jit-interface.txt>`_."
msgstr ""
"На поддерживаемых платформах (на момент написания статьи только Linux) среда "
"выполнения может использовать *файлы карт памяти*, чтобы сделать функции "
"Python видимыми для внешнего инструмента профилирования (например, `perf "
"<https://perf.wiki.kernel.org/index.php/Main_Page>`_ ). Запущенный процесс "
"может создать файл в ``/tmp`` каталог, содержащий записи, которые могут "
"сопоставить раздел исполняемого кода с именем. Этот интерфейс описан в "
"документации инструмента Linux Perf <https://git.kernel.org/pub/scm/linux/"
"kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/jit- интерфейс."
"txt>`_."

#: ../../c-api/perfmaps.rst:16
msgid ""
"In Python, these helper APIs can be used by libraries and features that rely "
"on generating machine code on the fly."
msgstr ""
"В Python эти вспомогательные API-интерфейсы могут использоваться "
"библиотеками и функциями, которые полагаются на генерацию машинного кода на "
"лету."

#: ../../c-api/perfmaps.rst:19
msgid ""
"Note that holding an :term:`attached thread state` is not required for these "
"APIs."
msgstr ""

#: ../../c-api/perfmaps.rst:23
msgid ""
"Open the ``/tmp/perf-$pid.map`` file, unless it's already opened, and create "
"a lock to ensure thread-safe writes to the file (provided the writes are "
"done through :c:func:`PyUnstable_WritePerfMapEntry`). Normally, there's no "
"need to call this explicitly; just use :c:func:"
"`PyUnstable_WritePerfMapEntry` and it will initialize the state on first "
"call."
msgstr ""
"Откройте ``/tmp/perf-$pid.map`` файл, если он еще не открыт, и создайте "
"блокировку, чтобы гарантировать потокобезопасную запись в файл (при условии, "
"что запись выполняется через :c:func:`PyUnstable_WritePerfMapEntry` ). "
"Обычно нет необходимости вызывать это явно; просто используй :c:func:"
"`PyUnstable_WritePerfMapEntry` и он инициализирует состояние при первом "
"вызове."

#: ../../c-api/perfmaps.rst:29
msgid ""
"Returns ``0`` on success, ``-1`` on failure to create/open the perf map "
"file, or ``-2`` on failure to create a lock. Check ``errno`` for more "
"information about the cause of a failure."
msgstr ""
"Возврат ``0`` об успехе, ``-1`` при невозможности создать/открыть файл карты "
"производительности или ``-2`` при невозможности создания блокировки. "
"Проверять ``ошибка`` для получения дополнительной информации о причине сбоя."

#: ../../c-api/perfmaps.rst:35
msgid ""
"Write one single entry to the ``/tmp/perf-$pid.map`` file. This function is "
"thread safe. Here is what an example entry looks like::"
msgstr ""
"Напишите одну запись в ``/tmp/perf-$pid.map`` файл. Эта функция является "
"потокобезопасной. Вот как выглядит пример записи:"

#: ../../c-api/perfmaps.rst:38
msgid ""
"# address      size  name\n"
"7f3529fcf759 b     py::bar:/run/t.py"
msgstr ""
"# размер адреса имя \n"
"7f3529fcf759 b py::bar:/run/t.py"

#: ../../c-api/perfmaps.rst:41
msgid ""
"Will call :c:func:`PyUnstable_PerfMapState_Init` before writing the entry, "
"if the perf map file is not already opened. Returns ``0`` on success, or the "
"same error codes as :c:func:`PyUnstable_PerfMapState_Init` on failure."
msgstr ""
"позвоню :c:func:`PyUnstable_PerfMapState_Init` перед записью записи, если "
"файл карты производительности еще не открыт. Возврат ``0`` в случае успеха "
"или те же коды ошибок, что и :c:func:`PyUnstable_PerfMapState_Init` при "
"неудаче."

#: ../../c-api/perfmaps.rst:47
msgid ""
"Close the perf map file opened by :c:func:`PyUnstable_PerfMapState_Init`. "
"This is called by the runtime itself during interpreter shut-down. In "
"general, there shouldn't be a reason to explicitly call this, except to "
"handle specific scenarios such as forking."
msgstr ""
"Закройте файл карты производительности, открытый :c:func:"
"`PyUnstable_PerfMapState_Init` . Это вызывается самой средой выполнения во "
"время завершения работы интерпретатора. В общем, не должно быть причин для "
"явного вызова этого, кроме как для обработки определенных сценариев, таких "
"как разветвление."
