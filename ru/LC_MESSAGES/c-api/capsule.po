# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/capsule.rst:6
msgid "Capsules"
msgstr "Оболочки"

#: ../../c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""
"Более подробную информацию об использовании этих объектов см. по адресу :ref:"
"`using-capsules`."

#: ../../c-api/capsule.rst:17
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for C "
"extension modules who need to pass an opaque value (as a :c:expr:`void*` "
"pointer) through Python code to other C code.  It is often used to make a C "
"function pointer defined in one module available to other modules, so the "
"regular import mechanism can be used to access C APIs defined in dynamically "
"loaded modules."
msgstr ""
"Этот подтип :c:type:` PyObject` представляет собой непрозрачное значение, "
"полезное для модулей расширения C, которым необходимо передать непрозрачное "
"значение (как указатель :c:expr:`void*`) через код Python в другой код C. . "
"Он часто используется для того, чтобы сделать указатель на функцию C, "
"определенный в одном модуле, доступным для других модулей, поэтому обычный "
"механизм импорта можно использовать для доступа к API C, определенным в "
"динамически загружаемых модулях."

#: ../../c-api/capsule.rst:27
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr "Тип обратного вызова деструктора для капсулы. Определяется как::"

#: ../../c-api/capsule.rst:29
msgid "typedef void (*PyCapsule_Destructor)(PyObject *);"
msgstr "typedef void (*PyCapsule_Destructor)( PyObject *);"

#: ../../c-api/capsule.rst:31
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""
"См. :c:func:`PyCapsule_New`для семантику обратных вызовов "
"PyCapsule_Destructor."

#: ../../c-api/capsule.rst:37
msgid ""
"Return true if its argument is a :c:type:`PyCapsule`.  This function always "
"succeeds."
msgstr ""
"вернуть истину, если его аргумент является :c:type:`PyCapsule`. Этот функция "
"всегда успешна."

#: ../../c-api/capsule.rst:43
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be ``NULL``."
msgstr ""
"создать :c:type:`PyCapsule` , содержащий *указатель*.  Аргкмент *указателя* "
"аргумент не может  быть ``NULL``."

#: ../../c-api/capsule.rst:46
msgid "On failure, set an exception and return ``NULL``."
msgstr "В случае неудачи установите исключение и верните . ``NULL`` ."

#: ../../c-api/capsule.rst:48
msgid ""
"The *name* string may either be ``NULL`` or a pointer to a valid C string.  "
"If non-``NULL``, this string must outlive the capsule.  (Though it is "
"permitted to free it inside the *destructor*.)"
msgstr ""
"Строка *name* может иметь значение NULL или указатель на действительную "
"строку C. Если значение не NULL, эта строка должна пережить капсулу. (Хотя "
"его можно освободить внутри *деструктора*.)"

#: ../../c-api/capsule.rst:52
msgid ""
"If the *destructor* argument is not ``NULL``, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""
"Если аргумент *destructor* не равен NULL, он будет вызван с капсулой в "
"качестве аргумента при ее уничтожении."

#: ../../c-api/capsule.rst:55
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable other "
"modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""
"Если эта капсула будет храниться как атрибут модуля, *имя* должно быть "
"указано как ``имя_модуля.имя_атрибута``. Это позволит другим модулям "
"импортировать капсулу с помощью :c:func:`PyCapsule_Import`."

#: ../../c-api/capsule.rst:62
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"Получите *указатель*, хранящийся в капсуле. В случае неудачи установите "
"исключение и верните ``NULL``."

#: ../../c-api/capsule.rst:65
msgid ""
"The *name* parameter must compare exactly to the name stored in the capsule. "
"If the name stored in the capsule is ``NULL``, the *name* passed in must "
"also be ``NULL``.  Python uses the C function :c:func:`!strcmp` to compare "
"capsule names."
msgstr ""
"Параметр *name* должен точно соответствовать имени, хранящемуся в капсуле. "
"Если имя, хранящееся в капсуле, равно NULL, переданное *name* также должно "
"быть NULL. Python использует функцию C :c:func:`!strcmp` для сравнения имен "
"капсул."

#: ../../c-api/capsule.rst:73
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"Вернуть текущий деструктор, хранящийся в капсуле. В случае сбоя установить "
"исключение и выполнить возврат ``NULL``."

#: ../../c-api/capsule.rst:76
msgid ""
"It is legal for a capsule to have a ``NULL`` destructor.  This makes a "
"``NULL`` return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :"
"c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Капсула может иметь деструктор ``NULL``. Это делает код возврата NULL "
"несколько двусмысленным; используйте :c:func:`PyCapsule_IsValid` или :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/capsule.rst:83
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"Вернуть текущий контекст, хранящийся в капсуле. В случае неудачи установите "
"исключение и верните ``NULL``."

#: ../../c-api/capsule.rst:86
msgid ""
"It is legal for a capsule to have a ``NULL`` context.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"Для капсулы допустимо иметь контекст ``NULL``. Это делает код возврата NULL "
"несколько двусмысленным; используйте :c:func:`PyCapsule_IsValid` или :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/capsule.rst:93
msgid ""
"Return the current name stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"Вернуть текущее имя, хранящееся в капсуле. В случае неудачи установите "
"исключение и верните ``NULL``."

#: ../../c-api/capsule.rst:96
msgid ""
"It is legal for a capsule to have a ``NULL`` name.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"Капсуле разрешено иметь имя NULL. Это делает код возврата NULL несколько "
"двусмысленным; используйте :c:func:`PyCapsule_IsValid` или :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/capsule.rst:103
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The "
"*name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly."
msgstr ""
"Импортируйте указатель на объект C из атрибута капсулы в модуле. Параметр "
"*name* должен указывать полное имя атрибута, как в ``module.attribute``. "
"*имя*, хранящееся в капсуле, должно точно соответствовать этой строке."

#: ../../c-api/capsule.rst:108
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"В случае успеха вернуть внутренний *указатель* капсулы. В случае неудачи "
"установите исключение и верните ``NULL``."

#: ../../c-api/capsule.rst:111
msgid "*no_block* has no effect anymore."
msgstr "*no_block* больше не имеет никакого эффекта."

#: ../../c-api/capsule.rst:117
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule is "
"non-``NULL``, passes :c:func:`PyCapsule_CheckExact`, has a non-``NULL`` "
"pointer stored in it, and its internal name matches the *name* parameter.  "
"(See :c:func:`PyCapsule_GetPointer` for information on how capsule names are "
"compared.)"
msgstr ""
"Определяет, является ли *capsule* допустимой капсулой. Действительная "
"капсула не NULL, передает :c:func:PyCapsule_CheckExact, содержит указатель, "
"отличный от NULL, и ее внутреннее имя соответствует параметру *name*. (См. :"
"c:func:`PyCapsule_GetPointer` для получения информации о том, как "
"сравниваются имена капсул.)"

#: ../../c-api/capsule.rst:123
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, calls "
"to any of the accessors (any function starting with ``PyCapsule_Get``) are "
"guaranteed to succeed."
msgstr ""
"Другими словами, если :c:func:`PyCapsule_IsValid` возвращает истинное "
"значение, вызов любого из методов доступа (любой функции, начинающейся с "
"``PyCapsule_Get``) гарантированно будет успешным."

#: ../../c-api/capsule.rst:127
msgid ""
"Return a nonzero value if the object is valid and matches the name passed "
"in. Return ``0`` otherwise.  This function will not fail."
msgstr ""
"Возвращайте ненулевое значение, если объект действителен и соответствует "
"переданному имени. В противном случае верните ``0``. Эта функция не подведет."

#: ../../c-api/capsule.rst:133
msgid "Set the context pointer inside *capsule* to *context*."
msgstr "Установите указатель контекста внутри *capsule* на *context*."

#: ../../c-api/capsule.rst:135 ../../c-api/capsule.rst:142
#: ../../c-api/capsule.rst:151 ../../c-api/capsule.rst:159
msgid ""
"Return ``0`` on success.  Return nonzero and set an exception on failure."
msgstr ""
"Верните ``0`` в случае успеха. Верните ненулевое значение и установите "
"исключение в случае сбоя."

#: ../../c-api/capsule.rst:140
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr "Установите деструктор внутри *capsule* на *destructor*."

#: ../../c-api/capsule.rst:147
msgid ""
"Set the name inside *capsule* to *name*.  If non-``NULL``, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was not "
"``NULL``, no attempt is made to free it."
msgstr ""
"Установите имя внутри *capsule* на *name*. Если значение не NULL, имя должно "
"пережить капсулу. Если предыдущее *имя*, хранящееся в капсуле, не было NULL, "
"попытки освободить его не предпринимаются."

#: ../../c-api/capsule.rst:156
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not be "
"``NULL``."
msgstr ""
"Установите указатель void внутри *capsule* на *pointer*. Указатель не может "
"быть NULL."

#: ../../c-api/capsule.rst:8
msgid "object"
msgstr "объект"

#: ../../c-api/capsule.rst:8
msgid "Capsule"
msgstr "Капсула"
