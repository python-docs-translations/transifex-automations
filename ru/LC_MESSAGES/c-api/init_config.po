# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Конфигурация инициализации Python"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python можно инициализировать с помощью :c:func:`Py_InitializeFromConfig` и "
"структуры :c:type:`PyConfig`. Его можно предварительно инициализировать с "
"помощью :c:func:`Py_PreInitialize` и структуры :c:type:`PyPreConfig`."

#: ../../c-api/init_config.rst:15
msgid "There are two kinds of configuration:"
msgstr "Существует два вида конфигурации:"

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
":ref:`Конфигурация Python <init-python-config>` может использоваться для "
"создания индивидуального Python, который ведет себя как обычный Python. "
"Например, переменные среды и аргументы командной строки используются для "
"настройки Python."

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""
":ref:`Изолированная конфигурация <init-isolated-conf>` может использоваться "
"для встраивания Python в приложение. Он изолирует Python от системы. "
"Например, переменные среды игнорируются, локаль LC_CTYPE остается "
"неизменной, а обработчик сигналов не регистрируется."

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ""
"Функцию :c:func:`Py_RunMain` можно использовать для написания индивидуальной "
"программы Python."

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"Функцию :c:func:`Py_RunMain` можно использовать для написания индивидуальной "
"программы Python."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Конфигурация инициализации Python\"."

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "Пример"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr "Пример настроенного Python, всегда работающего в изолированном режиме:"

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "Список строк ``wchar_t*``."

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"Если *длина* не равна нулю, *элементы* должны иметь значение, отличное от "
"NULL, и все строки должны быть отличными от NULL."

#: ../../c-api/init_config.rst:85
msgid "Methods:"
msgstr "Методы:"

#: ../../c-api/init_config.rst:89
msgid "Append *item* to *list*."
msgstr "Добавить *элемент* в *список*."

#: ../../c-api/init_config.rst:91 ../../c-api/init_config.rst:102
msgid "Python must be preinitialized to call this function."
msgstr ""
"Python должен быть предварительно инициализирован для вызова этой функции."

#: ../../c-api/init_config.rst:95
msgid "Insert *item* into *list* at *index*."
msgstr "Вставьте *item* в *list* по адресу *index*."

#: ../../c-api/init_config.rst:97
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "Если *index* больше или равен длине *list*, добавьте *item* к *list*."

#: ../../c-api/init_config.rst:100
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../../c-api/init_config.rst:104 ../../c-api/init_config.rst:124
#: ../../c-api/init_config.rst:225 ../../c-api/init_config.rst:519
msgid "Structure fields:"
msgstr "Структурные поля:"

#: ../../c-api/init_config.rst:108
msgid "List length."
msgstr "Длина списка."

#: ../../c-api/init_config.rst:112
msgid "List items."
msgstr "Перечислить предметы."

#: ../../c-api/init_config.rst:115
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:119
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""
"Структура для хранения статуса функции инициализации: успех, ошибка или "
"выход."

#: ../../c-api/init_config.rst:122
msgid "For an error, it can store the C function name which created the error."
msgstr "В случае ошибки он может сохранить имя функции C, вызвавшей ошибку."

#: ../../c-api/init_config.rst:128
msgid "Exit code. Argument passed to ``exit()``."
msgstr "Код выхода. Аргумент передан в ``exit()``."

#: ../../c-api/init_config.rst:132
msgid "Error message."
msgstr "Сообщение об ошибке."

#: ../../c-api/init_config.rst:136
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "Имя функции, вызвавшей ошибку, может быть ``NULL``."

#: ../../c-api/init_config.rst:138
msgid "Functions to create a status:"
msgstr "Функции для создания статуса:"

#: ../../c-api/init_config.rst:142
msgid "Success."
msgstr "Выполнено."

#: ../../c-api/init_config.rst:146
msgid "Initialization error with a message."
msgstr "Ошибка инициализации с сообщением."

#: ../../c-api/init_config.rst:148
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* не должно быть NULL."

#: ../../c-api/init_config.rst:152
msgid "Memory allocation failure (out of memory)."
msgstr "Ошибка выделения памяти (недостаточно памяти)."

#: ../../c-api/init_config.rst:156
msgid "Exit Python with the specified exit code."
msgstr "Выйдите из Python с указанным кодом выхода."

#: ../../c-api/init_config.rst:158
msgid "Functions to handle a status:"
msgstr "Функции для обработки статуса:"

#: ../../c-api/init_config.rst:162
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"Статус — это ошибка или выход? Если это правда, исключение должно быть "
"обработано; например, вызвав :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:167
msgid "Is the result an error?"
msgstr "Является ли результат ошибкой?"

#: ../../c-api/init_config.rst:171
msgid "Is the result an exit?"
msgstr "Является ли результат выходом?"

#: ../../c-api/init_config.rst:175
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"Вызовите ``exit(exitcode)``, если *status* является выходом. Распечатайте "
"сообщение об ошибке и выйдите с ненулевым кодом выхода, если *status* "
"является ошибкой. Должен вызываться только в том случае, если "
"``PyStatus_Exception(status)`` не равно нулю."

#: ../../c-api/init_config.rst:180
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"Внутри Python использует макросы, которые устанавливают ``PyStatus.func``, "
"тогда как функции для создания статуса устанавливают ``func`` в ``NULL``."

#: ../../c-api/init_config.rst:183
msgid "Example::"
msgstr "Пример::"

#: ../../c-api/init_config.rst:207
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:211
msgid "Structure used to preinitialize Python."
msgstr "Структура, используемая для предварительной инициализации Python."

#: ../../c-api/init_config.rst:213
msgid "Function to initialize a preconfiguration:"
msgstr "Функция для инициализации предварительной конфигурации:"

#: ../../c-api/init_config.rst:217
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Инициализируйте предварительную конфигурацию с помощью :ref:`Python "
"Configuration <init-python-config>`."

#: ../../c-api/init_config.rst:222
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Инициализируйте предварительную конфигурацию с помощью :ref:`Isolated "
"Configuration <init-isolated-conf>`."

#: ../../c-api/init_config.rst:229
msgid "Name of the Python memory allocators:"
msgstr "Имя распределителей памяти Python:"

#: ../../c-api/init_config.rst:231
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): не менять распределители памяти "
"(используйте значения по умолчанию)."

#: ../../c-api/init_config.rst:233
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`распределители памяти по "
"умолчанию <default-memory-allocators>`."

#: ../../c-api/init_config.rst:235
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`распределители памяти по умолчанию "
"<default-memory-allocators>` с :ref:`перехватчиками отладки <pymem-debug-"
"hooks>`."

#: ../../c-api/init_config.rst:238
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC`` (``3``): используйте ``malloc()`` из библиотеки C."

#: ../../c-api/init_config.rst:239
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): принудительное использование "
"``malloc()`` с помощью отладочных перехватчиков <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:241
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Распределитель памяти Python "
"pymalloc <pymalloc>`."

#: ../../c-api/init_config.rst:243
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Распределитель памяти "
"Python pymalloc <pymalloc>` с :ref:`хуками отладки <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:247
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` и ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` не "
"поддерживаются, если Python :option:`настроен с использованием --without-"
"pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:251
msgid "See :ref:`Memory Management <memory>`."
msgstr "См. :ref:`Управление памятью <memory>`."

#: ../../c-api/init_config.rst:253
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "По умолчанию: PYMEM_ALLOCATOR_NOT_SET."

#: ../../c-api/init_config.rst:257
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""
"Установите языковой стандарт LC_CTYPE на предпочитаемый пользователем "
"языковой стандарт."

#: ../../c-api/init_config.rst:259
msgid ""
"If equals to 0, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:member:"
"`~PyPreConfig.coerce_c_locale_warn` members to 0."
msgstr ""

#: ../../c-api/init_config.rst:262 ../../c-api/init_config.rst:273
msgid "See the :term:`locale encoding`."
msgstr "See the :term:`locale encoding`."

#: ../../c-api/init_config.rst:264 ../../c-api/init_config.rst:319
#: ../../c-api/init_config.rst:627
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""
"По умолчанию: ``1`` в конфигурации Python, ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:268
msgid "If equals to 2, coerce the C locale."
msgstr ""

#: ../../c-api/init_config.rst:270
msgid ""
"If equals to 1, read the LC_CTYPE locale to decide if it should be coerced."
msgstr ""

#: ../../c-api/init_config.rst:275 ../../c-api/init_config.rst:281
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""
"По умолчанию: ``-1`` в конфигурации Python, ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:279
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""
"Если ненулевое значение, выдать предупреждение, если используется локаль C."

#: ../../c-api/init_config.rst:285
msgid ""
"If non-zero, enables the :ref:`Python Development Mode <devmode>`: see :c:"
"member:`PyConfig.dev_mode`."
msgstr ""

#: ../../c-api/init_config.rst:288 ../../c-api/init_config.rst:633
#: ../../c-api/init_config.rst:675 ../../c-api/init_config.rst:1093
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "По умолчанию: ``-1`` в режиме Python, ``0`` в изолированном режиме."

#: ../../c-api/init_config.rst:292
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "Изолированный режим: см. :c:member:`PyConfig.isolated`."

#: ../../c-api/init_config.rst:294 ../../c-api/init_config.rst:797
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "По умолчанию: ``0`` в режиме Python, ``1`` в изолированном режиме."

#: ../../c-api/init_config.rst:298
msgid "If non-zero:"
msgstr "Если значение ненулевое:"

#: ../../c-api/init_config.rst:300
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "Установите для :c:member:`PyPreConfig.utf8_mode` значение ``0``,"

#: ../../c-api/init_config.rst:301
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr ""
"Установите для :c:member:`PyConfig.filesystem_encoding` значение "
"``\"mbcs\"``,"

#: ../../c-api/init_config.rst:302
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr ""
"Установите для :c:member:`PyConfig.filesystem_errors` значение "
"``\"replace\"``."

#: ../../c-api/init_config.rst:304
msgid ""
"Initialized the from :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr ""

#: ../../c-api/init_config.rst:307 ../../c-api/init_config.rst:810
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"Доступно только в Windows. Макрос #ifdef MS_WINDOWS можно использовать для "
"кода, специфичного для Windows."

#: ../../c-api/init_config.rst:310 ../../c-api/init_config.rst:588
#: ../../c-api/init_config.rst:595 ../../c-api/init_config.rst:646
#: ../../c-api/init_config.rst:755 ../../c-api/init_config.rst:769
#: ../../c-api/init_config.rst:783 ../../c-api/init_config.rst:813
#: ../../c-api/init_config.rst:827 ../../c-api/init_config.rst:880
#: ../../c-api/init_config.rst:929 ../../c-api/init_config.rst:989
#: ../../c-api/init_config.rst:1028 ../../c-api/init_config.rst:1057
#: ../../c-api/init_config.rst:1128
msgid "Default: ``0``."
msgstr "По умолчанию: ``0``."

#: ../../c-api/init_config.rst:314
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""
"Если не ноль, :c:func:`Py_PreInitializeFromArgs` и :c:func:"
"`Py_PreInitializeFromBytesArgs` анализируют свой аргумент ``argv`` так же, "
"как обычный Python анализирует аргументы командной строки: см. :ref:"
"`Аргументы командной строки < using-on-cmdline>`."

#: ../../c-api/init_config.rst:323
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""
"Использовать :ref:`переменные среды <using-on-envvars>`? См. :c:member:"
"`PyConfig.use_environment`."

#: ../../c-api/init_config.rst:326 ../../c-api/init_config.rst:1102
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""
"По умолчанию: ``1`` в конфигурации Python и ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:330
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "Если значение не равно нулю, включите режим Python UTF-8 <utf8-mode>."

#: ../../c-api/init_config.rst:332
msgid ""
"Set by the :option:`-X utf8 <-X>` command line option and the :envvar:"
"`PYTHONUTF8` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:335
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""
"По умолчанию: ``-1`` в конфигурации Python и ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:341
msgid "Preinitialize Python with PyPreConfig"
msgstr "Предварительная инициализация Python с помощью PyPreConfig"

#: ../../c-api/init_config.rst:343
msgid "The preinitialization of Python:"
msgstr "Предварительная инициализация Python:"

#: ../../c-api/init_config.rst:345
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr ""
"Установите распределители памяти Python (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:346
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "Настройте локаль LC_CTYPE (:term:`кодировка локали`)"

#: ../../c-api/init_config.rst:347
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""
"Установите :ref:`Режим Python UTF-8 <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"

#: ../../c-api/init_config.rst:350
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""
"Текущая предварительная конфигурация (тип PyPreConfig) хранится в файле "
"_PyRuntime.preconfig."

#: ../../c-api/init_config.rst:353
msgid "Functions to preinitialize Python:"
msgstr "Функции для предварительной инициализации Python:"

#: ../../c-api/init_config.rst:357 ../../c-api/init_config.rst:363
#: ../../c-api/init_config.rst:372
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""
"Предварительная инициализация Python из предварительной конфигурации "
"*preconfig*."

#: ../../c-api/init_config.rst:359 ../../c-api/init_config.rst:368
#: ../../c-api/init_config.rst:377
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* не должен иметь значение NULL."

#: ../../c-api/init_config.rst:365
msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Анализировать аргументы командной строки *argv* (байтовые строки), если :c:"
"member:`~PyPreConfig.parse_argv` из *preconfig* не равно нулю."

#: ../../c-api/init_config.rst:374
msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Анализировать аргументы командной строки *argv* (широкие строки), если :c:"
"member:`~PyPreConfig.parse_argv` из *preconfig* не равно нулю."

#: ../../c-api/init_config.rst:379 ../../c-api/init_config.rst:1190
msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"Вызывающий отвечает за обработку исключений (ошибок или выхода), используя :"
"c:func:`PyStatus_Exception` и :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:382
msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Для :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), если Python инициализируется с аргументами "
"командной строки, аргументы командной строки также должны быть переданы для "
"предварительной инициализации Python, поскольку они имеют влияние на "
"предварительную настройку, например кодировки. Например, параметр командной "
"строки :option:`-X utf8 <-X>` включает режим :ref:`Python UTF-8 <utf8-mode>`."

#: ../../c-api/init_config.rst:389
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` можно вызвать после :c:func:`Py_PreInitialize` и "
"до :c:func:`Py_InitializeFromConfig` для установки специального "
"распределителя памяти. Его можно вызвать до :c:func:`Py_PreInitialize`, "
"если :c:member:`PyPreConfig.allocator` установлен в "
"``PYMEM_ALLOCATOR_NOT_SET``."

#: ../../c-api/init_config.rst:394
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"Функции распределения памяти Python, такие как :c:func:`PyMem_RawMalloc`, не "
"должны использоваться до предварительной инициализации Python, тогда как "
"прямой вызов ``malloc()`` и ``free()`` всегда безопасен. :c:func:"
"`Py_DecodeLocale` не должен вызываться до предварительной инициализации "
"Python."

#: ../../c-api/init_config.rst:399
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr ""
"Пример использования предварительной инициализации для включения режима "
"Python UTF-8 <utf8-mode>`::"

#: ../../c-api/init_config.rst:421
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:425
msgid "Structure containing most parameters to configure Python."
msgstr "Структура, содержащая большинство параметров для настройки Python."

#: ../../c-api/init_config.rst:427
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr ""
"По завершении необходимо использовать функцию :c:func:`PyConfig_Clear` для "
"освобождения памяти конфигурации."

#: ../../c-api/init_config.rst:430
msgid "Structure methods:"
msgstr "Структурные методы:"

#: ../../c-api/init_config.rst:434
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Инициализируйте конфигурацию с помощью :ref:`Python Configuration <init-"
"python-config>`."

#: ../../c-api/init_config.rst:439
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Инициализируйте конфигурацию с помощью :ref:`Изолированной конфигурации "
"<init-isolated-conf>`."

#: ../../c-api/init_config.rst:444
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "Скопируйте строку расширенных символов *str* в ``*config_str``."

#: ../../c-api/init_config.rst:446 ../../c-api/init_config.rst:453
#: ../../c-api/init_config.rst:460 ../../c-api/init_config.rst:468
#: ../../c-api/init_config.rst:474 ../../c-api/init_config.rst:488
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ""
":ref:`Предварительно инициализируйте Python <c-preinit>`, если необходимо."

#: ../../c-api/init_config.rst:450
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""
"Декодируйте *str* с помощью :c:func:`Py_DecodeLocale` и установите результат "
"в ``*config_str``."

#: ../../c-api/init_config.rst:457
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""
"Установите аргументы командной строки (:c:member:`~PyConfig.argv` член "
"*config*) из списка *argv* строк широких символов."

#: ../../c-api/init_config.rst:464
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""
"Установите аргументы командной строки (:c:member:`~PyConfig.argv` член "
"*config*) из списка байтовых строк *argv*. Декодируйте байты, используя :c:"
"func:`Py_DecodeLocale`."

#: ../../c-api/init_config.rst:472
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""
"Установите для списка широких строк *list* значения *length* и *items*."

#: ../../c-api/init_config.rst:478
msgid "Read all Python configuration."
msgstr "Прочтите всю конфигурацию Python."

#: ../../c-api/init_config.rst:480
msgid "Fields which are already initialized are left unchanged."
msgstr "Поля, которые уже инициализированы, остаются без изменений."

#: ../../c-api/init_config.rst:482 ../../c-api/init_config.rst:909
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are strippped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""

#: ../../c-api/init_config.rst:490
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""
"Аргументы :c:member:`PyConfig.argv` теперь анализируются только один раз, :c:"
"member:`PyConfig.parse_argv` устанавливается в ``2`` после анализа "
"аргументов, а аргументы анализируются только в том случае, если :c: член: "
"`PyConfig.parse_argv` равен ``1``."

#: ../../c-api/init_config.rst:498
msgid "Release configuration memory."
msgstr ""
":c:func:`PyConfig_Read` больше не вычисляет все пути, поэтому поля, "
"перечисленные в :ref:`Python Path Configuration <init-path-config>`, больше "
"не могут обновляться до тех пор, пока не будет вызвана :c:func:"
"`Py_InitializeFromConfig` ."

#: ../../c-api/init_config.rst:500
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""
"Большинство методов ``PyConfig`` при необходимости предварительно "
"инициализируют Python <c-preinit>`. В этом случае конфигурация "
"предварительной инициализации Python (:c:type:`PyPreConfig`) основана на :c:"
"type:`PyConfig`. Если настроены поля конфигурации, общие с :c:type:"
"`PyPreConfig`, их необходимо установить перед вызовом метода :c:type:"
"`PyConfig`:"

#: ../../c-api/init_config.rst:506
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:507
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:508
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:509
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:511
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:516
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"Вызывающий эти методы отвечает за обработку исключений (ошибок или выхода) с "
"помощью PyStatus_Exception() и Py_ExitStatusException()."

#: ../../c-api/init_config.rst:523
msgid "Command line arguments: :data:`sys.argv`."
msgstr "Аргументы командной строки: :data:`sys.argv`."

#: ../../c-api/init_config.rst:525
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"Установите для :c:member:`~PyConfig.parse_argv` значение ``1`` для анализа :"
"c:member:`~PyConfig.argv` таким же образом, как обычный Python анализирует "
"аргументы командной строки Python, а затем удаляет аргументы Python из: c:"
"member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:530
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"Если :c:member:`~PyConfig.argv` пуст, добавляется пустая строка, чтобы "
"гарантировать, что :data:`sys.argv` всегда существует и никогда не бывает "
"пустым."

#: ../../c-api/init_config.rst:533 ../../c-api/init_config.rst:541
#: ../../c-api/init_config.rst:553 ../../c-api/init_config.rst:561
#: ../../c-api/init_config.rst:653 ../../c-api/init_config.rst:662
#: ../../c-api/init_config.rst:744 ../../c-api/init_config.rst:850
#: ../../c-api/init_config.rst:948 ../../c-api/init_config.rst:966
#: ../../c-api/init_config.rst:980 ../../c-api/init_config.rst:997
#: ../../c-api/init_config.rst:1009 ../../c-api/init_config.rst:1017
msgid "Default: ``NULL``."
msgstr "По умолчанию: ``NULL``."

#: ../../c-api/init_config.rst:535
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "См. также элемент :c:member:`~PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:539
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:543 ../../c-api/init_config.rst:555
#: ../../c-api/init_config.rst:563 ../../c-api/init_config.rst:655
#: ../../c-api/init_config.rst:664 ../../c-api/init_config.rst:867
#: ../../c-api/init_config.rst:950
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr "Часть вывода :ref:`Python Path Configuration <init-path-config>`."

#: ../../c-api/init_config.rst:547
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Базовый исполняемый файл Python: :data:`sys._base_executable`."

#: ../../c-api/init_config.rst:549
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "Устанавливается переменной среды :envvar:`__PYVENV_LAUNCHER__`."

#: ../../c-api/init_config.rst:551
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "Устанавливается из :c:member:`PyConfig.executable`, если ``NULL``."

#: ../../c-api/init_config.rst:559
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:567
msgid ""
"If equals to 0 and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""

#: ../../c-api/init_config.rst:570
msgid ""
"Set to 0 by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:573
msgid "stdin is always opened in buffered mode."
msgstr "stdin всегда открывается в буферизованном режиме."

#: ../../c-api/init_config.rst:575 ../../c-api/init_config.rst:1045
#: ../../c-api/init_config.rst:1160
msgid "Default: ``1``."
msgstr "По умолчанию: ``1``."

#: ../../c-api/init_config.rst:579
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""

#: ../../c-api/init_config.rst:583
msgid ""
"If equal or greater to 2, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr ""

#: ../../c-api/init_config.rst:586
msgid "Incremented by the :option:`-b` command line option."
msgstr "Увеличивается опцией командной строки :option:`-b`."

#: ../../c-api/init_config.rst:592
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""
"Если ненулевое значение, выдать предупреждение :exc:`EncodingWarning`, "
"когда :class:`io.TextIOWrapper` использует кодировку по умолчанию. "
"Подробности см. в :ref:`io-encoding-warning`."

#: ../../c-api/init_config.rst:601
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""
"Управляйте поведением проверки файлов ``.pyc`` на основе хеша: значение "
"параметра командной строки :option:`--check-hash-based-pycs`."

#: ../../c-api/init_config.rst:604
msgid "Valid values:"
msgstr "Допустимые значения:"

#: ../../c-api/init_config.rst:606
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""
"``L\"always\"``: Хэшируйте исходный файл для аннулирования независимо от "
"значения флага 'check_source'."

#: ../../c-api/init_config.rst:608
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr ""
"``L\"никогда\"``: Предположим, что pycs на основе хеша всегда действительны."

#: ../../c-api/init_config.rst:609
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""
"``L\"default\"``: Флаг 'check_source' в pycs на основе хеша определяет "
"недействительность."

#: ../../c-api/init_config.rst:612
msgid "Default: ``L\"default\"``."
msgstr "По умолчанию: ``L\"default\"``."

#: ../../c-api/init_config.rst:614
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "См. также :pep:`552` \"Детерминированные графики\"."

#: ../../c-api/init_config.rst:618
msgid "If non-zero, configure C standard streams:"
msgstr "Если не ноль, настройте стандартные потоки C:"

#: ../../c-api/init_config.rst:620
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""
"В Windows установите двоичный режим («O_BINARY») для stdin, stdout и stderr."

#: ../../c-api/init_config.rst:622
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"Если :c:member:`~PyConfig.buffered_stdio` равен нулю, отключите буферизацию "
"потоков stdin, stdout и stderr."

#: ../../c-api/init_config.rst:624
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""
"Если :c:member:`~PyConfig.interactive` не равно нулю, включите буферизацию "
"потока на стандартном вводе и стандартном выводе (только стандартный вывод в "
"Windows)."

#: ../../c-api/init_config.rst:631
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr ""
"Если значение не равно нулю, включите :ref:`Режим разработки Python "
"<devmode>`."

#: ../../c-api/init_config.rst:637
msgid "Dump Python references?"
msgstr "Дамп ссылок на Python?"

#: ../../c-api/init_config.rst:639
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "Если не ноль, выгрузить все объекты, которые еще живы на выходе."

#: ../../c-api/init_config.rst:641
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "Устанавливается в ``1`` переменной среды :envvar:`PYTHONDUMPREFS`."

#: ../../c-api/init_config.rst:643
msgid ""
"Need a special build of Python with the ``Py_TRACE_REFS`` macro defined: see "
"the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""
"Нужна специальная сборка Python с определенным макросом ``Py_TRACE_REFS``: "
"см. :option:`configure --with-trace-refs option <--with-trace-refs>`."

#: ../../c-api/init_config.rst:650
msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""
"Префикс каталога для конкретного сайта, в котором установлены зависящие от "
"платформы файлы Python: :data:`sys.exec_prefix`."

#: ../../c-api/init_config.rst:659
msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr ""
"Абсолютный путь к исполняемому двоичному файлу интерпретатора Python: :data:"
"`sys.executable`."

#: ../../c-api/init_config.rst:668
msgid "Enable faulthandler?"
msgstr "Включить обработчик ошибок?"

#: ../../c-api/init_config.rst:670
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""
"Если ненулевое значение, вызовите :func:`faulthandler.enable` при запуске."

#: ../../c-api/init_config.rst:672
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"Устанавливается в ``1`` с помощью :option:`-X errorhandler <-X>` и "
"переменной среды :envvar:`PYTHONFAULTHANDLER`."

#: ../../c-api/init_config.rst:679
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""
":term:`Кодировка файловой системы <кодирование файловой системы и обработчик "
"ошибок>`: :func:`sys.getfilesystemencoding`."

#: ../../c-api/init_config.rst:682
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "В macOS, Android и VxWorks: по умолчанию используйте «utf-8»."

#: ../../c-api/init_config.rst:684
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""
"В Windows: используйте ``\"utf-8\"`` по умолчанию или ``\"mbcs\"``, если :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` из :c:type:`PyPreConfig` не "
"равно нулю."

#: ../../c-api/init_config.rst:688
msgid "Default encoding on other platforms:"
msgstr "Кодировка по умолчанию на других платформах:"

#: ../../c-api/init_config.rst:690
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"utf-8\"``, если :c:member:`PyPreConfig.utf8_mode` не равно нулю."

#: ../../c-api/init_config.rst:691
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""
"``\"ascii\"``, если Python обнаруживает, что ``nl_langinfo(CODESET)`` "
"объявляет кодировку ASCII, тогда как функция ``mbstowcs()`` декодирует из "
"другой кодировки (обычно Latin1)."

#: ../../c-api/init_config.rst:694
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "``\"utf-8\"``, если ``nl_langinfo(CODESET)`` возвращает пустую строку."

#: ../../c-api/init_config.rst:695
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr ""
"В противном случае используйте результат :term:`localecoding`: "
"``nl_langinfo(CODESET)``."

#: ../../c-api/init_config.rst:698
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"При запуске Python имя кодировки нормализуется по имени кодека Python. "
"Например, ``\"ANSI_X3.4-1968\"`` заменяется на ``\"ascii\"``."

#: ../../c-api/init_config.rst:701
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "См. также элемент :c:member:`~PyConfig.filesystem_errors`."

#: ../../c-api/init_config.rst:705
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`Обработчик ошибок файловой системы <кодировка файловой системы и "
"обработчик ошибок>`: :func:`sys.getfilesystemencodeerrors`."

#: ../../c-api/init_config.rst:708
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""
"В Windows: используйте ``\"surrogatepass\"`` по умолчанию или "
"``\"replace\"``, если :c:member:`~PyPreConfig.legacy_windows_fs_encoding` "
"из :c:type:`PyPreConfig` не равно нулю."

#: ../../c-api/init_config.rst:712
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr "На других платформах: по умолчанию используйте «surrogateescape»."

#: ../../c-api/init_config.rst:714
msgid "Supported error handlers:"
msgstr "Поддерживаемые обработчики ошибок:"

#: ../../c-api/init_config.rst:716
msgid "``\"strict\"``"
msgstr "``\"strict\"``"

#: ../../c-api/init_config.rst:717
msgid "``\"surrogateescape\"``"
msgstr "``\"surrogateescape\"``"

#: ../../c-api/init_config.rst:718
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"`` (поддерживается только в кодировке UTF-8)"

#: ../../c-api/init_config.rst:720
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "См. также элемент :c:member:`~PyConfig.filesystem_encoding`."

#: ../../c-api/init_config.rst:725
msgid "Randomized hash function seed."
msgstr "Рандомизированное начальное значение хэш-функции."

#: ../../c-api/init_config.rst:727
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"Если :c:member:`~PyConfig.use_hash_seed` равен нулю, начальное число "
"выбирается случайным образом при запуске Python, а :c:member:`~PyConfig."
"hash_seed` игнорируется."

#: ../../c-api/init_config.rst:730
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONHASHSEED`."

#: ../../c-api/init_config.rst:732
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""
"Значение *use_hash_seed* по умолчанию: ``-1`` в режиме Python, ``0`` в "
"изолированном режиме."

#: ../../c-api/init_config.rst:737
msgid "Python home directory."
msgstr "Домашний каталог Python."

#: ../../c-api/init_config.rst:739
msgid ""
"If :c:func:`Py_SetPythonHome` has been called, use its argument if it is not "
"``NULL``."
msgstr ""
"Если была вызвана :c:func:`Py_SetPythonHome`, используйте ее аргумент, если "
"он не равен ``NULL``."

#: ../../c-api/init_config.rst:742
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONHOME`."

#: ../../c-api/init_config.rst:746 ../../c-api/init_config.rst:839
#: ../../c-api/init_config.rst:852 ../../c-api/init_config.rst:941
#: ../../c-api/init_config.rst:968
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ""
"Часть входных данных :ref:`Python Path Configuration <init-path-config>`."

#: ../../c-api/init_config.rst:750
msgid "If non-zero, profile import time."
msgstr "Если не ноль, время импорта профиля."

#: ../../c-api/init_config.rst:752
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"Установите ``1`` с помощью опции :option:`-X importtime <-X>` и переменной "
"среды :envvar:`PYTHONPROFILEIMPORTTIME`."

#: ../../c-api/init_config.rst:759
msgid "Enter interactive mode after executing a script or a command."
msgstr "Войдите в интерактивный режим после выполнения сценария или команды."

#: ../../c-api/init_config.rst:761
msgid ""
"If greater than 0, enable inspect: when a script is passed as first argument "
"or the -c option is used, enter interactive mode after executing the script "
"or the command, even when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""

#: ../../c-api/init_config.rst:766
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"Увеличивается опцией командной строки :option:`-i`. Установите значение "
"``1``, если переменная среды :envvar:`PYTHONINSPECT` не пуста."

#: ../../c-api/init_config.rst:773
msgid "Install Python signal handlers?"
msgstr "Установить обработчики сигналов Python?"

#: ../../c-api/init_config.rst:775 ../../c-api/init_config.rst:915
#: ../../c-api/init_config.rst:939 ../../c-api/init_config.rst:1112
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "По умолчанию: ``1`` в режиме Python, ``0`` в изолированном режиме."

#: ../../c-api/init_config.rst:779
msgid "If greater than 0, enable the interactive mode (REPL)."
msgstr ""

#: ../../c-api/init_config.rst:781
msgid "Incremented by the :option:`-i` command line option."
msgstr "Увеличивается опцией командной строки :option:`-i`."

#: ../../c-api/init_config.rst:787
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:789
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages directory."
msgstr ""

#: ../../c-api/init_config.rst:792
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"Python REPL не импортирует :mod:`readline` и не включает конфигурацию строки "
"чтения по умолчанию в интерактивных подсказках."

#: ../../c-api/init_config.rst:794
msgid ""
"Set :c:member:`~PyConfig.use_environment` and :c:member:`~PyConfig."
"user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:799
msgid "See also :c:member:`PyPreConfig.isolated`."
msgstr ""

#: ../../c-api/init_config.rst:803
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:807
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Установите значение ``1``, если для переменной среды :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO` задана непустая строка."

#: ../../c-api/init_config.rst:815
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr "См. также :pep:`528` (Измените кодировку консоли Windows на UTF-8)."

#: ../../c-api/init_config.rst:819
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""
"Если значение не равно нулю, при выходе выгрузите статистику в "
"распределитель памяти Python pymalloc <pymalloc>`."

#: ../../c-api/init_config.rst:822
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr "Устанавливается в ``1`` переменной среды :envvar:`PYTHONMALLOCSTATS`."

#: ../../c-api/init_config.rst:824
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"Этот параметр игнорируется, если Python :option:`настроен с использованием "
"параметра --without-pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:831
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "Имя каталога библиотеки платформы: :data:`sys.platlibdir`."

#: ../../c-api/init_config.rst:833
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONPLATLIBDIR`."

#: ../../c-api/init_config.rst:835
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``)."
msgstr ""

#: ../../c-api/init_config.rst:845
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:848
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONPATH`."

#: ../../c-api/init_config.rst:857
msgid "Module search paths: :data:`sys.path`."
msgstr "Пути поиска модулей: :data:`sys.path`."

#: ../../c-api/init_config.rst:859
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to 0, the function "
"calculating the :ref:`Python Path Configuration <init-path-config>` "
"overrides the :c:member:`~PyConfig.module_search_paths` and sets :c:member:"
"`~PyConfig.module_search_paths_set` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:864
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"По умолчанию: пустой список (``module_search_paths``) и ``0`` "
"(``module_search_paths_set``)."

#: ../../c-api/init_config.rst:871
msgid "Compilation optimization level:"
msgstr "Уровень оптимизации компиляции:"

#: ../../c-api/init_config.rst:873
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr ""
"``0``: оптимизатор Peephole, установите для ``__debug__`` значение ``True``."

#: ../../c-api/init_config.rst:874
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr ""
"``1``: Уровень 0, удалите утверждения, установите для ``__debug__`` значение "
"``False``."

#: ../../c-api/init_config.rst:875
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``: Уровень 1, удаление строк документации."

#: ../../c-api/init_config.rst:877
msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""
"Увеличивается опцией командной строки :option:`-O`. Установите значение "
"переменной среды :envvar:`PYTHONOPTIMIZE`."

#: ../../c-api/init_config.rst:884
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr ""
"Список исходных аргументов командной строки, передаваемых в исполняемый файл "
"Python: :data:`sys.orig_argv`."

#: ../../c-api/init_config.rst:887
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""
"Если список :c:member:`~PyConfig.orig_argv` пуст и :c:member:`~PyConfig."
"argv` не является списком, содержащим только пустую строку, :c:func:"
"`PyConfig_Read` копирует :c:member :`~PyConfig.argv` в :c:member:`~PyConfig."
"orig_argv` перед изменением :c:member:`~PyConfig.argv` (если :c:member:"
"`~PyConfig.parse_argv` не равно нулю) ."

#: ../../c-api/init_config.rst:894
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr ""
"См. также член :c:member:`~PyConfig.argv` и функцию :c:func:`Py_GetArgcArgv`."

#: ../../c-api/init_config.rst:897 ../../c-api/init_config.rst:1147
#: ../../c-api/init_config.rst:1166
msgid "Default: empty list."
msgstr "По умолчанию: пустой список."

#: ../../c-api/init_config.rst:903
msgid "Parse command line arguments?"
msgstr "Анализировать аргументы командной строки?"

#: ../../c-api/init_config.rst:905
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"Если равно ``1``, анализируйте :c:member:`~PyConfig.argv` так же, как "
"обычный Python анализирует :ref:`аргументы командной строки <using-on-"
"cmdline>` и удаляет аргументы Python из: c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:917
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""
"Аргументы :c:member:`PyConfig.argv` теперь анализируются только в том "
"случае, если :c:member:`PyConfig.parse_argv` равен ``1``."

#: ../../c-api/init_config.rst:923
msgid ""
"Parser debug mode. If greater than 0, turn on parser debugging output (for "
"expert only, depending on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:926
msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""
"Увеличивается опцией командной строки :option:`-d`. Установите значение "
"переменной среды :envvar:`PYTHONDEBUG`."

#: ../../c-api/init_config.rst:933
msgid ""
"On Unix, if non-zero, calculating the :ref:`Python Path Configuration <init-"
"path-config>` can log warnings into ``stderr``. If equals to 0, suppress "
"these warnings."
msgstr ""

#: ../../c-api/init_config.rst:937
msgid "It has no effect on Windows."
msgstr ""

#: ../../c-api/init_config.rst:945
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""
"Префикс каталога, специфичный для сайта, в котором установлены независимые "
"от платформы файлы Python: :data:`sys.prefix`."

#: ../../c-api/init_config.rst:954
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""
"Имя программы, используемое для инициализации :c:member:`~PyConfig."
"executable` и в ранних сообщениях об ошибках во время инициализации Python."

#: ../../c-api/init_config.rst:957
msgid "If :func:`Py_SetProgramName` has been called, use its argument."
msgstr "Если была вызвана :func:`Py_SetProgramName`, используйте ее аргумент."

#: ../../c-api/init_config.rst:958
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""
"В macOS используйте переменную среды :envvar:`PYTHONEXECUTABLE`, если она "
"установлена."

#: ../../c-api/init_config.rst:959
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""
"Если определен макрос ``WITH_NEXT_FRAMEWORK``, используйте переменную среды :"
"envvar:`__PYVENV_LAUNCHER__`, если она установлена."

#: ../../c-api/init_config.rst:961
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""
"Используйте ``argv[0]`` из :c:member:`~PyConfig.argv`, если он доступен и не "
"пуст."

#: ../../c-api/init_config.rst:963
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""
"В противном случае используйте ``L\"python\"`` в Windows или "
"``L\"python3\"`` на других платформах."

#: ../../c-api/init_config.rst:972
msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr ""
"Каталог, в который записываются кэшированные файлы ``.pyc``: :data:`sys."
"pycache_prefix`."

#: ../../c-api/init_config.rst:975
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable."
msgstr ""
"Устанавливается параметром командной строки :option:`-X pycache_prefix=PATH "
"<-X>` и переменной среды :envvar:`PYTHONPYCACHEPREFIX`."

#: ../../c-api/init_config.rst:978
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""
"Если ``NULL``, для :data:`sys.pycache_prefix` установлено значение ``None``."

#: ../../c-api/init_config.rst:984
msgid ""
"Quiet mode. If greater than 0, don't display the copyright and version at "
"Python startup in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:987
msgid "Incremented by the :option:`-q` command line option."
msgstr "Увеличивается опцией командной строки :option:`-q`."

#: ../../c-api/init_config.rst:993
msgid "Value of the :option:`-c` command line option."
msgstr "Значение параметра командной строки :option:`-c`."

#: ../../c-api/init_config.rst:995 ../../c-api/init_config.rst:1007
#: ../../c-api/init_config.rst:1015
msgid "Used by :c:func:`Py_RunMain`."
msgstr "Используется :c:func:`Py_RunMain`."

#: ../../c-api/init_config.rst:1001
msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`."
msgstr ""

#: ../../c-api/init_config.rst:1004
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command."
msgstr ""

#: ../../c-api/init_config.rst:1013
msgid "Value of the :option:`-m` command line option."
msgstr "Value of the :option:`-m` command line option."

#: ../../c-api/init_config.rst:1021
msgid "Show total reference count at exit?"
msgstr ""

#: ../../c-api/init_config.rst:1023
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1025
msgid ""
"Need a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""
"Нужна :ref:`отладочная сборка Python <debug-build>` (должен быть определен "
"макрос ``Py_REF_DEBUG``)."

#: ../../c-api/init_config.rst:1032
msgid "Import the :mod:`site` module at startup?"
msgstr "Импортировать модуль :mod:`site` при запуске?"

#: ../../c-api/init_config.rst:1034
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""
"Если оно равно нулю, отключите импорт сайта модуля и связанные с ним "
"манипуляции с :data:`sys.path`, зависящие от сайта."

#: ../../c-api/init_config.rst:1037
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""
"Также отключите эти манипуляции, если модуль :mod:`site` будет явно "
"импортирован позже (вызовите :func:`site.main`, если вы хотите, чтобы они "
"запускались)."

#: ../../c-api/init_config.rst:1040
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr "Устанавливается в ``0`` опцией командной строки :option:`-S`."

#: ../../c-api/init_config.rst:1042
msgid ""
":data:`sys.flags.no_site` is set to the inverted value of :c:member:"
"`~PyConfig.site_import`."
msgstr ""

#: ../../c-api/init_config.rst:1049
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""
"Если значение не равно нулю, пропустите первую строку источника :c:member:"
"`PyConfig.run_filename`."

#: ../../c-api/init_config.rst:1052
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""
"Это позволяет использовать не-Unix формы ``#!cmd``. Это предназначено только "
"для взлома DOS."

#: ../../c-api/init_config.rst:1055
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr "Устанавливается в ``1`` опцией командной строки :option:`-x`."

#: ../../c-api/init_config.rst:1062
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""
"Ошибки кодирования и кодирования :data:`sys.stdin`, :data:`sys.stdout` и :"
"data:`sys.stderr` (но :data:`sys.stderr` всегда использует ``\"обратную "
"косую черту\"`` обработчик ошибок)."

#: ../../c-api/init_config.rst:1066
msgid ""
"If :c:func:`Py_SetStandardStreamEncoding` has been called, use its *error* "
"and *errors* arguments if they are not ``NULL``."
msgstr ""
"Если была вызвана :c:func:`Py_SetStandardStreamEncoding`, используйте ее "
"аргументы *error* и *errors*, если они не равны ``NULL``."

#: ../../c-api/init_config.rst:1069
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""
"Используйте переменную среды :envvar:`PYTHONIOENCODING`, если она не пуста."

#: ../../c-api/init_config.rst:1072
msgid "Default encoding:"
msgstr "Кодировка по умолчанию:"

#: ../../c-api/init_config.rst:1074
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"UTF-8\"``, если :c:member:`PyPreConfig.utf8_mode` не равно нулю."

#: ../../c-api/init_config.rst:1075
msgid "Otherwise, use the :term:`locale encoding`."
msgstr "В противном случае используйте :term:`кодировку локали`."

#: ../../c-api/init_config.rst:1077
msgid "Default error handler:"
msgstr "Обработчик ошибок по умолчанию:"

#: ../../c-api/init_config.rst:1079
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr "В Windows: используйте «surrogateescape»."

#: ../../c-api/init_config.rst:1080
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""
"``\"surrogateescape\"``, если :c:member:`PyPreConfig.utf8_mode` не равно "
"нулю или если локаль LC_CTYPE равна \"C\" или \"POSIX\"."

#: ../../c-api/init_config.rst:1082
msgid "``\"strict\"`` otherwise."
msgstr "``\"строгий\"`` в противном случае."

#: ../../c-api/init_config.rst:1086
msgid "Enable tracemalloc?"
msgstr "Включить трассировку?"

#: ../../c-api/init_config.rst:1088
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""
"Если ненулевое значение, вызовите :func:`tracemalloc.start` при запуске."

#: ../../c-api/init_config.rst:1090
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""
"Устанавливается параметром командной строки :option:`-X трассировка=N <-X>` "
"и переменной среды :envvar:`PYTHONTRACEMALLOC`."

#: ../../c-api/init_config.rst:1097
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "Использовать :ref:`переменные среды <using-on-envvars>`?"

#: ../../c-api/init_config.rst:1099
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""
"Если равно нулю, игнорируйте :ref:`переменные среды <using-on-envvars>`."

#: ../../c-api/init_config.rst:1106
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""
"Если ненулевое значение, добавьте каталог сайта пользователя в :data:`sys."
"path`."

#: ../../c-api/init_config.rst:1108
msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""
"Установите значение ``0`` с помощью параметров командной строки :option:`-s` "
"и :option:`-I`."

#: ../../c-api/init_config.rst:1110
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr "Устанавливается в ``0`` переменной среды :envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init_config.rst:1116
msgid ""
"Verbose mode. If greater than 0, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

#: ../../c-api/init_config.rst:1120
msgid ""
"If greater or equal to 2, print a message for each file that is checked for "
"when searching for a module. Also provides information on module cleanup at "
"exit."
msgstr ""

#: ../../c-api/init_config.rst:1124
msgid "Incremented by the :option:`-v` command line option."
msgstr "Увеличивается опцией командной строки :option:`-v`."

#: ../../c-api/init_config.rst:1126
msgid "Set to the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:1132
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""
"Параметры модуля :mod:`warnings` для создания фильтров предупреждений, от "
"самого низкого до самого высокого приоритета: :data:`sys.warnoptions`."

#: ../../c-api/init_config.rst:1135
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
"Модуль :mod:`warnings` добавляет :data:`sys.warnoptions` в обратном порядке: "
"последний элемент :c:member:`PyConfig.warnoptions` становится первым "
"элементом :data:`warnings.filters`, который проверяется первым (самый "
"высокий приоритет)."

#: ../../c-api/init_config.rst:1140
msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""
"Параметры командной строки :option:`-W` добавляют свое значение к :c:member:"
"`~PyConfig.warnoptions`, его можно использовать несколько раз."

#: ../../c-api/init_config.rst:1143
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""
"Переменную среды :envvar:`PYTHONWARNINGS` также можно использовать для "
"добавления параметров предупреждения. Можно указать несколько опций, "
"разделенных запятыми (``,``)."

#: ../../c-api/init_config.rst:1151
msgid ""
"If equal to 0, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""

#: ../../c-api/init_config.rst:1154
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""
"Устанавливается в ``0`` с помощью опции командной строки :option:`-B` и "
"переменной среды :envvar:`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init_config.rst:1157
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` инициализируется инвертированным значением :"
"c:member:`~PyConfig.write_bytecode`."

#: ../../c-api/init_config.rst:1164
msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""
"Значения параметров командной строки :option:`-X`: :data:`sys._xoptions`."

#: ../../c-api/init_config.rst:1168
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""
"Если :c:member:`~PyConfig.parse_argv` не равно нулю, аргументы :c:member:"
"`~PyConfig.argv` анализируются так же, как обычный Python анализирует :ref:"
"`аргументы командной строки <using-on- cmdline>`, а аргументы Python "
"удаляются из :c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:1173
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""
"Параметры :c:member:`~PyConfig.xoptions` анализируются для установки других "
"параметров: см. параметр командной строки :option:`-X`."

#: ../../c-api/init_config.rst:1178
msgid "The ``show_alloc_count`` field has been removed."
msgstr "Поле show_alloc_count было удалено."

#: ../../c-api/init_config.rst:1182
msgid "Initialization with PyConfig"
msgstr "Инициализация с помощью PyConfig"

#: ../../c-api/init_config.rst:1184
msgid "Function to initialize Python:"
msgstr "Функция для инициализации Python:"

#: ../../c-api/init_config.rst:1188
msgid "Initialize Python from *config* configuration."
msgstr "Инициализируйте Python из конфигурации *config*."

#: ../../c-api/init_config.rst:1193
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""
"Если используются :c:func:`PyImport_FrozenModules`, :c:func:"
"`PyImport_AppendInittab` или :c:func:`PyImport_ExtendInittab`, они должны "
"быть установлены или вызваны после предварительной инициализации Python и до "
"инициализации Python. Если Python инициализируется несколько раз, перед "
"каждой инициализацией Python необходимо вызывать :c:func:"
"`PyImport_AppendInittab` или :c:func:`PyImport_ExtendInittab`."

#: ../../c-api/init_config.rst:1200
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""
"Текущая конфигурация (тип PyConfig) хранится в PyInterpreterState.config."

#: ../../c-api/init_config.rst:1203
msgid "Example setting the program name::"
msgstr "Пример установки имени программы::"

#: ../../c-api/init_config.rst:1231
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:1282
msgid "Isolated Configuration"
msgstr "Изолированная конфигурация"

#: ../../c-api/init_config.rst:1284
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."

#: ../../c-api/init_config.rst:1289
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"Эта конфигурация игнорирует глобальные переменные конфигурации, переменные "
"среды, аргументы командной строки (:c:member:`PyConfig.argv` не "
"анализируется) и каталог сайта пользователя. Стандартные потоки C (например: "
"``stdout``) и локаль LC_CTYPE остаются неизменными. Обработчики сигналов не "
"установлены."

#: ../../c-api/init_config.rst:1294
msgid ""
"Configuration files are still used with this configuration. Set the :ref:"
"`Python Path Configuration <init-path-config>` (\"output fields\") to ignore "
"these configuration files and avoid the function computing the default path "
"configuration."
msgstr ""

#: ../../c-api/init_config.rst:1303
msgid "Python Configuration"
msgstr "Конфигурация Python"

#: ../../c-api/init_config.rst:1305
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."

#: ../../c-api/init_config.rst:1309
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""
"Переменные среды и аргументы командной строки используются для настройки "
"Python, тогда как глобальные переменные конфигурации игнорируются."

#: ../../c-api/init_config.rst:1312
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""
"Эта функция включает приведение локали C (:pep:`538`) и :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) в зависимости от локали LC_CTYPE, :envvar:"
"`PYTHONUTF8` и переменные среды :envvar:`PYTHONCOERCECLOCALE`."

#: ../../c-api/init_config.rst:1321
msgid "Python Path Configuration"
msgstr "Конфигурация пути Python"

#: ../../c-api/init_config.rst:1323
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` содержит несколько полей для конфигурации пути:"

#: ../../c-api/init_config.rst:1325
msgid "Path configuration inputs:"
msgstr "Входные данные конфигурации пути:"

#: ../../c-api/init_config.rst:1327
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1328
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1329
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1330
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1331
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1332
msgid "current working directory: to get absolute paths"
msgstr "текущий рабочий каталог: чтобы получить абсолютные пути"

#: ../../c-api/init_config.rst:1333
msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""
"Переменная среды ``PATH`` для получения полного пути к программе (из :c:"
"member:`PyConfig.program_name`)"

#: ../../c-api/init_config.rst:1335
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` переменная среды"

#: ../../c-api/init_config.rst:1336
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"(Только для Windows) Пути к приложениям в реестре "
"«Software\\Python\\PythonCore\\XY\\PythonPath» из HKEY_CURRENT_USER и "
"HKEY_LOCAL_MACHINE (где XY — версия Python)."

#: ../../c-api/init_config.rst:1340
msgid "Path configuration output fields:"
msgstr "Поля вывода конфигурации пути:"

#: ../../c-api/init_config.rst:1342
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1343
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1344
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1345
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1346
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1347
msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"

#: ../../c-api/init_config.rst:1349
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1351
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to 0, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:1357
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to 1. In this case, path configuration input fields are ignored as "
"well."
msgstr ""

#: ../../c-api/init_config.rst:1364
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when "
"calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../../c-api/init_config.rst:1367
msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"Если поля :c:member:`~PyConfig.base_prefix` или :c:member:`~PyConfig."
"base_exec_prefix` не установлены, они наследуют свое значение от :c:member:"
"`~PyConfig.prefix` и :c:member :`~PyConfig.exec_prefix` соответственно."

#: ../../c-api/init_config.rst:1371
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` и :c:func:`Py_Main` изменяют :data:`sys.path`:"

#: ../../c-api/init_config.rst:1373
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""
"Если :c:member:`~PyConfig.run_filename` установлен и является каталогом, "
"содержащим скрипт ``__main__.py``, добавьте :c:member:`~PyConfig."
"run_filename` к :data:`sys.path `."

#: ../../c-api/init_config.rst:1376
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "Если :c:member:`~PyConfig.isolated` равен нулю:"

#: ../../c-api/init_config.rst:1378
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"Если установлен :c:member:`~PyConfig.run_module`, добавьте текущий каталог к ​​"
":data:`sys.path`. Ничего не делайте, если текущий каталог не может быть "
"прочитан."

#: ../../c-api/init_config.rst:1380
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"Если установлен :c:member:`~PyConfig.run_filename`, добавьте каталог имени "
"файла к :data:`sys.path`."

#: ../../c-api/init_config.rst:1382
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "В противном случае добавьте пустую строку к :data:`sys.path`."

#: ../../c-api/init_config.rst:1384
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""
"Если :c:member:`~PyConfig.site_import` не равно нулю, :data:`sys.path` может "
"быть изменен модулем :mod:`site`. Если :c:member:`~PyConfig."
"user_site_directory` не равно нулю и каталог пакета сайта пользователя "
"существует, модуль :mod:`site` добавляет каталог пакета сайта пользователя "
"к :data:`sys.path`."

#: ../../c-api/init_config.rst:1390
msgid "The following configuration files are used by the path configuration:"
msgstr "Следующие файлы конфигурации используются для конфигурации пути:"

#: ../../c-api/init_config.rst:1392
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1393
msgid "``python._pth`` (Windows only)"
msgstr ""

#: ../../c-api/init_config.rst:1394
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (только Unix)"

#: ../../c-api/init_config.rst:1396
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`"
msgstr ""
"Переменная среды ``__PYVENV_LAUNCHER__`` используется для установки :c:"
"member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1401
msgid "Py_RunMain()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:1405
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration."
msgstr ""
"Выполните команду (:c:member:`PyConfig.run_command`), сценарий (:c:member:"
"`PyConfig.run_filename`) или модуль (:c:member:`PyConfig.run_module`), "
"указанный в командной строке. или в конфигурации."

#: ../../c-api/init_config.rst:1410
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr "По умолчанию и при использовании опции :option:`-i` запустите REPL."

#: ../../c-api/init_config.rst:1412
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr ""
"Наконец, завершает Python и возвращает статус выхода, который можно передать "
"в функцию exit()."

#: ../../c-api/init_config.rst:1415
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""
"См. :ref:`Конфигурация Python <init-python-config>` для примера настроенного "
"Python, всегда работающего в изолированном режиме с использованием :c:func:"
"`Py_RunMain`."

#: ../../c-api/init_config.rst:1421
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1425
msgid "Get the original command line arguments, before Python modified them."
msgstr ""
"Получите исходные аргументы командной строки до того, как Python их изменит."

#: ../../c-api/init_config.rst:1427
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr "См. также :c:member:`PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:1431
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "Частный временный API многофазной инициализации"

#: ../../c-api/init_config.rst:1433
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr ""
"Этот раздел представляет собой частный временный API, представляющий "
"многофазную инициализацию, основную функцию :pep:`432`:"

#: ../../c-api/init_config.rst:1436
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "Фаза инициализации «ядра», «минимальный Python»:"

#: ../../c-api/init_config.rst:1438
msgid "Builtin types;"
msgstr "Встроенные типы;"

#: ../../c-api/init_config.rst:1439
msgid "Builtin exceptions;"
msgstr "Встроенные исключения;"

#: ../../c-api/init_config.rst:1440
msgid "Builtin and frozen modules;"
msgstr "Встроенные и замороженные модули;"

#: ../../c-api/init_config.rst:1441
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""
"Модуль :mod:`sys` инициализирован лишь частично (например: :data:`sys.path` "
"еще не существует)."

#: ../../c-api/init_config.rst:1444
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "«Основной» этап инициализации, Python полностью инициализируется:"

#: ../../c-api/init_config.rst:1446
msgid "Install and configure :mod:`importlib`;"
msgstr "Установите и настройте :mod:`importlib`;"

#: ../../c-api/init_config.rst:1447
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "Примените :ref:`Конфигурацию пути <init-path-config>`;"

#: ../../c-api/init_config.rst:1448
msgid "Install signal handlers;"
msgstr "Установить обработчики сигналов;"

#: ../../c-api/init_config.rst:1449
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""
"Завершить инициализацию модуля :mod:`sys` (например: создать :data:`sys."
"stdout` и :data:`sys.path`);"

#: ../../c-api/init_config.rst:1451
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""
"Включите дополнительные функции, такие как :mod:`faulthandler` и :mod:"
"`tracemalloc`;"

#: ../../c-api/init_config.rst:1452
msgid "Import the :mod:`site` module;"
msgstr "Импортируйте модуль :mod:`site`;"

#: ../../c-api/init_config.rst:1453
msgid "etc."
msgstr "и т.д."

#: ../../c-api/init_config.rst:1455
msgid "Private provisional API:"
msgstr "Частный временный API:"

#: ../../c-api/init_config.rst:1457
msgid ""
":c:member:`PyConfig._init_main`: if set to 0, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""

#: ../../c-api/init_config.rst:1459
msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""

#: ../../c-api/init_config.rst:1464
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""
"Перейдите к этапу инициализации «Основной», завершите инициализацию Python."

#: ../../c-api/init_config.rst:1466
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""
"На этапе «Основной» модуль не импортируется, и модуль importlib не "
"настроен: :ref:`Конфигурация пути <init-path-config>` применяется только на "
"этапе «Основной». Это может позволить настроить Python в Python для "
"переопределения или настройки :ref:`Path Configuration <init-path-config>`, "
"возможно, установить собственный импортер :data:`sys.meta_path` или "
"перехватчик импорта и т. д."

#: ../../c-api/init_config.rst:1472
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1476
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"Фаза «Ядро» не определена должным образом: что должно быть, а что не должно "
"быть доступно на этом этапе, пока не указано. API помечен как частный и "
"временный: API можно изменить или даже удалить в любое время, пока не будет "
"разработан подходящий общедоступный API."

#: ../../c-api/init_config.rst:1481
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "Пример запуска кода Python между фазами инициализации «Core» и «Main»:"
