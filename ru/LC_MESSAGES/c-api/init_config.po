# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Конфигурация инициализации Python"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python можно инициализировать с помощью :c:func:`Py_InitializeFromConfig` и "
"структуры :c:type:`PyConfig`. Его можно предварительно инициализировать с "
"помощью :c:func:`Py_PreInitialize` и структуры :c:type:`PyPreConfig`."

#: ../../c-api/init_config.rst:15
msgid "There are two kinds of configuration:"
msgstr "Существует два вида конфигурации:"

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
":ref:`Конфигурация Python <init-python-config>` может использоваться для "
"создания индивидуального Python, который ведет себя как обычный Python. "
"Например, переменные среды и аргументы командной строки используются для "
"настройки Python."

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""
":ref:`Изолированная конфигурация <init-isolated-conf>` может использоваться "
"для встраивания Python в приложение. Он изолирует Python от системы. "
"Например, переменные среды игнорируются, локаль LC_CTYPE остается "
"неизменной, а обработчик сигналов не регистрируется."

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ""
"Функцию :c:func:`Py_RunMain` можно использовать для написания индивидуальной "
"программы Python."

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"Функцию :c:func:`Py_RunMain` можно использовать для написания индивидуальной "
"программы Python."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Конфигурация инициализации Python\"."

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "Пример"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr "Пример настроенного Python, всегда работающего в изолированном режиме:"

#: ../../c-api/init_config.rst:41
msgid ""
"int main(int argc, char **argv)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config.isolated = 1;\n"
"\n"
"    /* Decode command line arguments.\n"
"       Implicitly preinitialize Python (in isolated mode). */\n"
"    status = PyConfig_SetBytesArgv(&config, argc, argv);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    return Py_RunMain();\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_IsExit(status)) {\n"
"        return status.exitcode;\n"
"    }\n"
"    /* Display the error message and exit the process with\n"
"       non-zero exit code */\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""
"int main(int argc, char **argv)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config.isolated = 1;\n"
"\n"
"    /* Decode command line arguments.\n"
"       Implicitly preinitialize Python (in isolated mode). */\n"
"    status = PyConfig_SetBytesArgv(&config, argc, argv);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    return Py_RunMain();\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_IsExit(status)) {\n"
"        return status.exitcode;\n"
"    }\n"
"    /* Display the error message and exit the process with\n"
"       non-zero exit code */\n"
"    Py_ExitStatusException(status);\n"
"}"

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "Список строк ``wchar_t*``."

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"Если *длина* не равна нулю, *элементы* должны иметь значение, отличное от "
"NULL, и все строки должны быть отличными от NULL."

#: ../../c-api/init_config.rst:87
msgid "Methods:"
msgstr "Методы:"

#: ../../c-api/init_config.rst:91
msgid "Append *item* to *list*."
msgstr "Добавить *элемент* в *список*."

#: ../../c-api/init_config.rst:93 ../../c-api/init_config.rst:104
msgid "Python must be preinitialized to call this function."
msgstr ""
"Python должен быть предварительно инициализирован для вызова этой функции."

#: ../../c-api/init_config.rst:97
msgid "Insert *item* into *list* at *index*."
msgstr "Вставьте *item* в *list* по адресу *index*."

#: ../../c-api/init_config.rst:99
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "Если *index* больше или равен длине *list*, добавьте *item* к *list*."

#: ../../c-api/init_config.rst:102
msgid "*index* must be greater than or equal to ``0``."
msgstr "*индекс* должен быть больше или равен ``0``."

#: ../../c-api/init_config.rst:108 ../../c-api/init_config.rst:128
#: ../../c-api/init_config.rst:235 ../../c-api/init_config.rst:554
msgid "Structure fields:"
msgstr "Структурные поля:"

#: ../../c-api/init_config.rst:112
msgid "List length."
msgstr "Длина списка."

#: ../../c-api/init_config.rst:116
msgid "List items."
msgstr "Перечислить предметы."

#: ../../c-api/init_config.rst:119
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:123
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""
"Структура для хранения статуса функции инициализации: успех, ошибка или "
"выход."

#: ../../c-api/init_config.rst:126
msgid "For an error, it can store the C function name which created the error."
msgstr "В случае ошибки он может сохранить имя функции C, вызвавшей ошибку."

#: ../../c-api/init_config.rst:132
msgid "Exit code. Argument passed to ``exit()``."
msgstr "Код выхода. Аргумент передан в ``exit()``."

#: ../../c-api/init_config.rst:136
msgid "Error message."
msgstr "Сообщение об ошибке."

#: ../../c-api/init_config.rst:140
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "Имя функции, вызвавшей ошибку, может быть ``NULL``."

#: ../../c-api/init_config.rst:144
msgid "Functions to create a status:"
msgstr "Функции для создания статуса:"

#: ../../c-api/init_config.rst:148
msgid "Success."
msgstr "Выполнено."

#: ../../c-api/init_config.rst:152
msgid "Initialization error with a message."
msgstr "Ошибка инициализации с сообщением."

#: ../../c-api/init_config.rst:154
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* не должно быть NULL."

#: ../../c-api/init_config.rst:158
msgid "Memory allocation failure (out of memory)."
msgstr "Ошибка выделения памяти (недостаточно памяти)."

#: ../../c-api/init_config.rst:162
msgid "Exit Python with the specified exit code."
msgstr "Выйдите из Python с указанным кодом выхода."

#: ../../c-api/init_config.rst:164
msgid "Functions to handle a status:"
msgstr "Функции для обработки статуса:"

#: ../../c-api/init_config.rst:168
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"Статус — это ошибка или выход? Если это правда, исключение должно быть "
"обработано; например, вызвав :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:173
msgid "Is the result an error?"
msgstr "Является ли результат ошибкой?"

#: ../../c-api/init_config.rst:177
msgid "Is the result an exit?"
msgstr "Является ли результат выходом?"

#: ../../c-api/init_config.rst:181
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"Вызовите ``exit(exitcode)``, если *status* является выходом. Распечатайте "
"сообщение об ошибке и выйдите с ненулевым кодом выхода, если *status* "
"является ошибкой. Должен вызываться только в том случае, если "
"``PyStatus_Exception(status)`` не равно нулю."

#: ../../c-api/init_config.rst:186
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"Внутри Python использует макросы, которые устанавливают ``PyStatus.func``, "
"тогда как функции для создания статуса устанавливают ``func`` в ``NULL``."

#: ../../c-api/init_config.rst:189
msgid "Example::"
msgstr "Пример::"

#: ../../c-api/init_config.rst:191
msgid ""
"PyStatus alloc(void **ptr, size_t size)\n"
"{\n"
"    *ptr = PyMem_RawMalloc(size);\n"
"    if (*ptr == NULL) {\n"
"        return PyStatus_NoMemory();\n"
"    }\n"
"    return PyStatus_Ok();\n"
"}\n"
"\n"
"int main(int argc, char **argv)\n"
"{\n"
"    void *ptr;\n"
"    PyStatus status = alloc(&ptr, 16);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"    PyMem_Free(ptr);\n"
"    return 0;\n"
"}"
msgstr ""
"PyStatus alloc(void **ptr, size_t size)\n"
"{\n"
"    *ptr = PyMem_RawMalloc(size);\n"
"    if (*ptr == NULL) {\n"
"        return PyStatus_NoMemory();\n"
"    }\n"
"    return PyStatus_Ok();\n"
"}\n"
"\n"
"int main(int argc, char **argv)\n"
"{\n"
"    void *ptr;\n"
"    PyStatus status = alloc(&ptr, 16);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"    PyMem_Free(ptr);\n"
"    return 0;\n"
"}"

#: ../../c-api/init_config.rst:213
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:217
msgid "Structure used to preinitialize Python."
msgstr "Структура, используемая для предварительной инициализации Python."

#: ../../c-api/init_config.rst:221
msgid "Function to initialize a preconfiguration:"
msgstr "Функция для инициализации предварительной конфигурации:"

#: ../../c-api/init_config.rst:225
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Инициализируйте предварительную конфигурацию с помощью :ref:`Python "
"Configuration <init-python-config>`."

#: ../../c-api/init_config.rst:230
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Инициализируйте предварительную конфигурацию с помощью :ref:`Isolated "
"Configuration <init-isolated-conf>`."

#: ../../c-api/init_config.rst:239
msgid "Name of the Python memory allocators:"
msgstr "Имя распределителей памяти Python:"

#: ../../c-api/init_config.rst:241
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): не менять распределители памяти "
"(используйте значения по умолчанию)."

#: ../../c-api/init_config.rst:243
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`распределители памяти по "
"умолчанию <default-memory-allocators>`."

#: ../../c-api/init_config.rst:245
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`распределители памяти по умолчанию "
"<default-memory-allocators>` с :ref:`перехватчиками отладки <pymem-debug-"
"hooks>`."

#: ../../c-api/init_config.rst:248
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC`` (``3``): используйте ``malloc()`` из библиотеки C."

#: ../../c-api/init_config.rst:249
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): принудительное использование "
"``malloc()`` с помощью отладочных перехватчиков <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:251
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Распределитель памяти Python "
"pymalloc <pymalloc>`."

#: ../../c-api/init_config.rst:253
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Распределитель памяти "
"Python pymalloc <pymalloc>` с :ref:`хуками отладки <pymem-debug-hooks>`."

#: ../../c-api/init_config.rst:256
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` (``6``): use ``mimalloc``, a fast malloc "
"replacement."
msgstr ""
"``PYMEM_ALLOCATOR_MIMALLOC`` (``6``): используйте ``mimalloc``, быструю "
"замену malloc."

#: ../../c-api/init_config.rst:258
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` (``7``): use ``mimalloc``, a fast malloc "
"replacement with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` (``7``): используйте ``mimalloc``, "
"быструю замену malloc с помощью отладочных перехватчиков <pymem-debug-"
"hooks>`."

#: ../../c-api/init_config.rst:262
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` и ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` не "
"поддерживаются, если Python :option:`настроен с использованием --without-"
"pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:266
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` and ``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-mimalloc <--"
"without-mimalloc>` or if the underlying atomic support isn't available."
msgstr ""
"``PYMEM_ALLOCATOR_MIMALLOC`` и ``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` не "
"поддерживаются, если Python :option:`настроен с использованием --without-"
"mimalloc <--without-mimalloc>` или если базовая атомарная поддержка "
"недоступна."

#: ../../c-api/init_config.rst:271
msgid "See :ref:`Memory Management <memory>`."
msgstr "См. :ref:`Управление памятью <memory>`."

#: ../../c-api/init_config.rst:273
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "По умолчанию: PYMEM_ALLOCATOR_NOT_SET."

#: ../../c-api/init_config.rst:277
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""
"Установите языковой стандарт LC_CTYPE на предпочитаемый пользователем "
"языковой стандарт."

#: ../../c-api/init_config.rst:279
msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:"
"member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""
"Если равно ``0``, установите для членов :c:member:`~PyPreConfig."
"coerce_c_locale` и :c:member:`~PyPreConfig.coerce_c_locale_warn` значение "
"``0``."

#: ../../c-api/init_config.rst:282 ../../c-api/init_config.rst:293
msgid "See the :term:`locale encoding`."
msgstr "See the :term:`locale encoding`."

#: ../../c-api/init_config.rst:284 ../../c-api/init_config.rst:339
#: ../../c-api/init_config.rst:710
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""
"По умолчанию: ``1`` в конфигурации Python, ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:288
msgid "If equals to ``2``, coerce the C locale."
msgstr "Если равно ``2``, принудительно использовать локаль C."

#: ../../c-api/init_config.rst:290
msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr ""
"Если равно «1», прочитайте локаль LC_CTYPE, чтобы решить, следует ли ее "
"принудительно использовать."

#: ../../c-api/init_config.rst:295 ../../c-api/init_config.rst:301
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""
"По умолчанию: ``-1`` в конфигурации Python, ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:299
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""
"Если ненулевое значение, выдать предупреждение, если используется локаль C."

#: ../../c-api/init_config.rst:305
msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ""
":ref:`Режим разработки Python <devmode>`: см. :c:member:`PyConfig.dev_mode`."

#: ../../c-api/init_config.rst:308 ../../c-api/init_config.rst:719
#: ../../c-api/init_config.rst:765 ../../c-api/init_config.rst:1244
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "По умолчанию: ``-1`` в режиме Python, ``0`` в изолированном режиме."

#: ../../c-api/init_config.rst:312
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "Изолированный режим: см. :c:member:`PyConfig.isolated`."

#: ../../c-api/init_config.rst:314 ../../c-api/init_config.rst:921
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "По умолчанию: ``0`` в режиме Python, ``1`` в изолированном режиме."

#: ../../c-api/init_config.rst:318
msgid "If non-zero:"
msgstr "Если значение ненулевое:"

#: ../../c-api/init_config.rst:320
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "Установите для :c:member:`PyPreConfig.utf8_mode` значение ``0``,"

#: ../../c-api/init_config.rst:321
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr ""
"Установите для :c:member:`PyConfig.filesystem_encoding` значение "
"``\"mbcs\"``,"

#: ../../c-api/init_config.rst:322
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr ""
"Установите для :c:member:`PyConfig.filesystem_errors` значение "
"``\"replace\"``."

#: ../../c-api/init_config.rst:324
msgid ""
"Initialized from the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr ""
"Инициализируется значением переменной среды :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING`."

#: ../../c-api/init_config.rst:327 ../../c-api/init_config.rst:935
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"Доступно только в Windows. Макрос #ifdef MS_WINDOWS можно использовать для "
"кода, специфичного для Windows."

#: ../../c-api/init_config.rst:330 ../../c-api/init_config.rst:658
#: ../../c-api/init_config.rst:665 ../../c-api/init_config.rst:732
#: ../../c-api/init_config.rst:843 ../../c-api/init_config.rst:857
#: ../../c-api/init_config.rst:871 ../../c-api/init_config.rst:938
#: ../../c-api/init_config.rst:952 ../../c-api/init_config.rst:1012
#: ../../c-api/init_config.rst:1064 ../../c-api/init_config.rst:1126
#: ../../c-api/init_config.rst:1180 ../../c-api/init_config.rst:1209
#: ../../c-api/init_config.rst:1298
msgid "Default: ``0``."
msgstr "По умолчанию: ``0``."

#: ../../c-api/init_config.rst:334
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""
"Если не ноль, :c:func:`Py_PreInitializeFromArgs` и :c:func:"
"`Py_PreInitializeFromBytesArgs` анализируют свой аргумент ``argv`` так же, "
"как обычный Python анализирует аргументы командной строки: см. :ref:"
"`Аргументы командной строки < using-on-cmdline>`."

#: ../../c-api/init_config.rst:343
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""
"Использовать :ref:`переменные среды <using-on-envvars>`? См. :c:member:"
"`PyConfig.use_environment`."

#: ../../c-api/init_config.rst:346 ../../c-api/init_config.rst:1272
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""
"По умолчанию: ``1`` в конфигурации Python и ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:350
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "Если значение не равно нулю, включите режим Python UTF-8 <utf8-mode>."

#: ../../c-api/init_config.rst:352
msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""
"Установите значение ``0`` или ``1`` с помощью параметра командной строки :"
"option:`-X utf8 <-X>` и переменной среды :envvar:`PYTHONUTF8`."

#: ../../c-api/init_config.rst:355
msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr ""
"Также установите значение «1», если локалью «LC_CTYPE» является «C» или "
"«POSIX»."

#: ../../c-api/init_config.rst:357
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""
"По умолчанию: ``-1`` в конфигурации Python и ``0`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:363
msgid "Preinitialize Python with PyPreConfig"
msgstr "Предварительная инициализация Python с помощью PyPreConfig"

#: ../../c-api/init_config.rst:365
msgid "The preinitialization of Python:"
msgstr "Предварительная инициализация Python:"

#: ../../c-api/init_config.rst:367
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr ""
"Установите распределители памяти Python (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:368
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "Настройте локаль LC_CTYPE (:term:`кодировка локали`)"

#: ../../c-api/init_config.rst:369
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""
"Установите :ref:`Режим Python UTF-8 <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"

#: ../../c-api/init_config.rst:372
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""
"Текущая предварительная конфигурация (тип PyPreConfig) хранится в файле "
"_PyRuntime.preconfig."

#: ../../c-api/init_config.rst:375
msgid "Functions to preinitialize Python:"
msgstr "Функции для предварительной инициализации Python:"

#: ../../c-api/init_config.rst:379 ../../c-api/init_config.rst:385
#: ../../c-api/init_config.rst:394
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""
"Предварительная инициализация Python из предварительной конфигурации "
"*preconfig*."

#: ../../c-api/init_config.rst:381 ../../c-api/init_config.rst:390
#: ../../c-api/init_config.rst:399
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* не должен иметь значение NULL."

#: ../../c-api/init_config.rst:387
msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Анализировать аргументы командной строки *argv* (байтовые строки), если :c:"
"member:`~PyPreConfig.parse_argv` из *preconfig* не равно нулю."

#: ../../c-api/init_config.rst:396
msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"Анализировать аргументы командной строки *argv* (широкие строки), если :c:"
"member:`~PyPreConfig.parse_argv` из *preconfig* не равно нулю."

#: ../../c-api/init_config.rst:401 ../../c-api/init_config.rst:1359
msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"Вызывающий отвечает за обработку исключений (ошибок или выхода), используя :"
"c:func:`PyStatus_Exception` и :c:func:`Py_ExitStatusException`."

#: ../../c-api/init_config.rst:404
msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Для :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), если Python инициализируется с аргументами "
"командной строки, аргументы командной строки также должны быть переданы для "
"предварительной инициализации Python, поскольку они имеют влияние на "
"предварительную настройку, например кодировки. Например, параметр командной "
"строки :option:`-X utf8 <-X>` включает режим :ref:`Python UTF-8 <utf8-mode>`."

#: ../../c-api/init_config.rst:411
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` можно вызвать после :c:func:`Py_PreInitialize` и "
"до :c:func:`Py_InitializeFromConfig` для установки специального "
"распределителя памяти. Его можно вызвать до :c:func:`Py_PreInitialize`, "
"если :c:member:`PyPreConfig.allocator` установлен в "
"``PYMEM_ALLOCATOR_NOT_SET``."

#: ../../c-api/init_config.rst:416
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"Функции распределения памяти Python, такие как :c:func:`PyMem_RawMalloc`, не "
"должны использоваться до предварительной инициализации Python, тогда как "
"прямой вызов ``malloc()`` и ``free()`` всегда безопасен. :c:func:"
"`Py_DecodeLocale` не должен вызываться до предварительной инициализации "
"Python."

#: ../../c-api/init_config.rst:421
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr ""
"Пример использования предварительной инициализации для включения режима "
"Python UTF-8 <utf8-mode>`::"

#: ../../c-api/init_config.rst:424
msgid ""
"PyStatus status;\n"
"PyPreConfig preconfig;\n"
"PyPreConfig_InitPythonConfig(&preconfig);\n"
"\n"
"preconfig.utf8_mode = 1;\n"
"\n"
"status = Py_PreInitialize(&preconfig);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}\n"
"\n"
"/* at this point, Python speaks UTF-8 */\n"
"\n"
"Py_Initialize();\n"
"/* ... use Python API here ... */\n"
"Py_Finalize();"
msgstr ""
"PyStatus status;\n"
"PyPreConfig preconfig;\n"
"PyPreConfig_InitPythonConfig(&preconfig);\n"
"\n"
"preconfig.utf8_mode = 1;\n"
"\n"
"status = Py_PreInitialize(&preconfig);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}\n"
"\n"
"/* at this point, Python speaks UTF-8 */\n"
"\n"
"Py_Initialize();\n"
"/* ... use Python API here ... */\n"
"Py_Finalize();"

#: ../../c-api/init_config.rst:443
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:447
msgid "Structure containing most parameters to configure Python."
msgstr "Структура, содержащая большинство параметров для настройки Python."

#: ../../c-api/init_config.rst:449
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr ""
"По завершении необходимо использовать функцию :c:func:`PyConfig_Clear` для "
"освобождения памяти конфигурации."

#: ../../c-api/init_config.rst:454
msgid "Structure methods:"
msgstr "Структурные методы:"

#: ../../c-api/init_config.rst:458
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""
"Инициализируйте конфигурацию с помощью :ref:`Python Configuration <init-"
"python-config>`."

#: ../../c-api/init_config.rst:463
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""
"Инициализируйте конфигурацию с помощью :ref:`Изолированной конфигурации "
"<init-isolated-conf>`."

#: ../../c-api/init_config.rst:468
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "Скопируйте строку расширенных символов *str* в ``*config_str``."

#: ../../c-api/init_config.rst:470 ../../c-api/init_config.rst:477
#: ../../c-api/init_config.rst:484 ../../c-api/init_config.rst:492
#: ../../c-api/init_config.rst:498 ../../c-api/init_config.rst:515
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ""
":ref:`Предварительно инициализируйте Python <c-preinit>`, если необходимо."

#: ../../c-api/init_config.rst:474
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""
"Декодируйте *str* с помощью :c:func:`Py_DecodeLocale` и установите результат "
"в ``*config_str``."

#: ../../c-api/init_config.rst:481
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""
"Установите аргументы командной строки (:c:member:`~PyConfig.argv` член "
"*config*) из списка *argv* строк широких символов."

#: ../../c-api/init_config.rst:488
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""
"Установите аргументы командной строки (:c:member:`~PyConfig.argv` член "
"*config*) из списка байтовых строк *argv*. Декодируйте байты, используя :c:"
"func:`Py_DecodeLocale`."

#: ../../c-api/init_config.rst:496
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""
"Установите для списка широких строк *list* значения *length* и *items*."

#: ../../c-api/init_config.rst:502
msgid "Read all Python configuration."
msgstr "Прочтите всю конфигурацию Python."

#: ../../c-api/init_config.rst:504
msgid "Fields which are already initialized are left unchanged."
msgstr "Поля, которые уже инициализированы, остаются без изменений."

#: ../../c-api/init_config.rst:506
msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""
"Поля для :ref:`path Configuration <init-path-config>` больше не вычисляются "
"и не изменяются при вызове этой функции, начиная с Python 3.11."

#: ../../c-api/init_config.rst:509 ../../c-api/init_config.rst:1041
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are stripped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""
"Функция :c:func:`PyConfig_Read` анализирует аргументы :c:member:`PyConfig."
"argv` только один раз: :c:member:`PyConfig.parse_argv` устанавливается в "
"``2`` после анализа аргументов. Поскольку аргументы Python удалены из :c:"
"member:`PyConfig.argv`, двойной анализ аргументов будет анализировать "
"параметры приложения как параметры Python."

#: ../../c-api/init_config.rst:517
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""
"Аргументы :c:member:`PyConfig.argv` теперь анализируются только один раз, :c:"
"member:`PyConfig.parse_argv` устанавливается в ``2`` после анализа "
"аргументов, а аргументы анализируются только в том случае, если :c: член: "
"`PyConfig.parse_argv` равен ``1``."

#: ../../c-api/init_config.rst:523
msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed "
"under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""
":c:func:`PyConfig_Read` больше не вычисляет все пути, поэтому поля, "
"перечисленные в :ref:`Python Path Configuration <init-path-config>`, больше "
"не могут обновляться до тех пор, пока не будет вызвана :c:func:"
"`Py_InitializeFromConfig` ."

#: ../../c-api/init_config.rst:531
msgid "Release configuration memory."
msgstr ""
":c:func:`PyConfig_Read` больше не вычисляет все пути, поэтому поля, "
"перечисленные в :ref:`Python Path Configuration <init-path-config>`, больше "
"не могут обновляться до тех пор, пока не будет вызвана :c:func:"
"`Py_InitializeFromConfig` ."

#: ../../c-api/init_config.rst:533
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""
"Большинство методов ``PyConfig`` при необходимости предварительно "
"инициализируют Python <c-preinit>`. В этом случае конфигурация "
"предварительной инициализации Python (:c:type:`PyPreConfig`) основана на :c:"
"type:`PyConfig`. Если настроены поля конфигурации, общие с :c:type:"
"`PyPreConfig`, их необходимо установить перед вызовом метода :c:type:"
"`PyConfig`:"

#: ../../c-api/init_config.rst:539
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:540
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:541
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:542
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:544
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`~PyConfig.parse_argv` is non-zero)."
msgstr ""
"Более того, если используется :c:func:`PyConfig_SetArgv` или :c:func:"
"`PyConfig_SetBytesArgv`, этот метод необходимо вызывать перед другими "
"методами, поскольку конфигурация предварительной инициализации зависит от "
"аргументов командной строки (если :c:member:`~ PyConfig.parse_argv` не равен "
"нулю)."

#: ../../c-api/init_config.rst:549
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"Вызывающий эти методы отвечает за обработку исключений (ошибок или выхода) с "
"помощью PyStatus_Exception() и Py_ExitStatusException()."

#: ../../c-api/init_config.rst:562
msgid ""
"Set :data:`sys.argv` command line arguments based on :c:member:`~PyConfig."
"argv`.  These parameters are similar to those passed to the program's :c:"
"func:`main` function with the difference that the first entry should refer "
"to the script file to be executed rather than the executable hosting the "
"Python interpreter.  If there isn't a script that will be run, the first "
"entry in :c:member:`~PyConfig.argv` can be an empty string."
msgstr ""
"Установите аргументы командной строки :data:`sys.argv` на основе :c:member:"
"`~PyConfig.argv`. Эти параметры аналогичны параметрам, передаваемым в "
"функцию :c:func:`main` программы, с той разницей, что первая запись должна "
"ссылаться на файл сценария, который должен быть выполнен, а не на "
"исполняемый файл, в котором размещен интерпретатор Python. Если скрипта, "
"который будет запущен, нет, первая запись в :c:member:`~PyConfig.argv` может "
"быть пустой строкой."

#: ../../c-api/init_config.rst:570
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"Установите для :c:member:`~PyConfig.parse_argv` значение ``1`` для анализа :"
"c:member:`~PyConfig.argv` таким же образом, как обычный Python анализирует "
"аргументы командной строки Python, а затем удаляет аргументы Python из: c:"
"member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:575
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"Если :c:member:`~PyConfig.argv` пуст, добавляется пустая строка, чтобы "
"гарантировать, что :data:`sys.argv` всегда существует и никогда не бывает "
"пустым."

#: ../../c-api/init_config.rst:578 ../../c-api/init_config.rst:605
#: ../../c-api/init_config.rst:619 ../../c-api/init_config.rst:629
#: ../../c-api/init_config.rst:739 ../../c-api/init_config.rst:750
#: ../../c-api/init_config.rst:832 ../../c-api/init_config.rst:982
#: ../../c-api/init_config.rst:1083 ../../c-api/init_config.rst:1102
#: ../../c-api/init_config.rst:1117 ../../c-api/init_config.rst:1134
#: ../../c-api/init_config.rst:1147 ../../c-api/init_config.rst:1155
#: ../../c-api/init_config.rst:1169
msgid "Default: ``NULL``."
msgstr "По умолчанию: ``NULL``."

#: ../../c-api/init_config.rst:580
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "См. также элемент :c:member:`~PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:584
msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to :"
"data:`sys.path` at startup:"
msgstr ""
"Если равно нулю, Py_RunMain() добавляет потенциально небезопасный путь к :"
"data:`sys.path` при запуске:"

#: ../../c-api/init_config.rst:587
msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""
"Если :c:member:`argv[0] <PyConfig.argv>` равен ``L\"-m\"`` (``python -m "
"модуль``), добавьте текущий рабочий каталог."

#: ../../c-api/init_config.rst:589
msgid ""
"If running a script (``python script.py``), prepend the script's directory.  "
"If it's a symbolic link, resolve symbolic links."
msgstr ""
"Если вы запускаете скрипт (``python script.py``), добавьте каталог скрипта. "
"Если это символическая ссылка, разрешите символические ссылки."

#: ../../c-api/init_config.rst:591
msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""
"В противном случае (``python -c code`` и ``python``) добавьте пустую строку, "
"которая означает текущий рабочий каталог."

#: ../../c-api/init_config.rst:594
msgid ""
"Set to ``1`` by the :option:`-P` command line option and the :envvar:"
"`PYTHONSAFEPATH` environment variable."
msgstr ""
"Устанавливается в ``1`` опцией командной строки :option:`-P` и переменной "
"среды :envvar:`PYTHONSAFEPATH`."

#: ../../c-api/init_config.rst:597
msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr ""
"По умолчанию: ``0`` в конфигурации Python, ``1`` в изолированной "
"конфигурации."

#: ../../c-api/init_config.rst:603
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:607 ../../c-api/init_config.rst:621
#: ../../c-api/init_config.rst:631 ../../c-api/init_config.rst:741
#: ../../c-api/init_config.rst:752 ../../c-api/init_config.rst:999
#: ../../c-api/init_config.rst:1085
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr "Часть вывода :ref:`Python Path Configuration <init-path-config>`."

#: ../../c-api/init_config.rst:609
msgid "See also :c:member:`PyConfig.exec_prefix`."
msgstr "См. также :c:member:`PyConfig.exec_prefix`."

#: ../../c-api/init_config.rst:613
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Базовый исполняемый файл Python: :data:`sys._base_executable`."

#: ../../c-api/init_config.rst:615
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "Устанавливается переменной среды :envvar:`__PYVENV_LAUNCHER__`."

#: ../../c-api/init_config.rst:617
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "Устанавливается из :c:member:`PyConfig.executable`, если ``NULL``."

#: ../../c-api/init_config.rst:623
msgid "See also :c:member:`PyConfig.executable`."
msgstr "См. также :c:member:`PyConfig.executable`."

#: ../../c-api/init_config.rst:627
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:633
msgid "See also :c:member:`PyConfig.prefix`."
msgstr "См. также :c:member:`PyConfig.prefix`."

#: ../../c-api/init_config.rst:637
msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""
"Если равно ``0`` и :c:member:`~PyConfig.configure_c_stdio` не равно нулю, "
"отключите буферизацию в потоках C stdout и stderr."

#: ../../c-api/init_config.rst:640
msgid ""
"Set to ``0`` by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""
"Устанавливается в ``0`` с помощью опции командной строки :option:`-u` и "
"переменной среды :envvar:`PYTHONUNBUFFERED`."

#: ../../c-api/init_config.rst:643
msgid "stdin is always opened in buffered mode."
msgstr "stdin всегда открывается в буферизованном режиме."

#: ../../c-api/init_config.rst:645 ../../c-api/init_config.rst:678
#: ../../c-api/init_config.rst:1197 ../../c-api/init_config.rst:1330
msgid "Default: ``1``."
msgstr "По умолчанию: ``1``."

#: ../../c-api/init_config.rst:649
msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""
"Если равно ``1``, выдать предупреждение при сравнении :class:`bytes` или :"
"class:`bytearray` с :class:`str` или при сравнении :class:`bytes` с :class:"
"`int` ."

#: ../../c-api/init_config.rst:653
msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr ""
"Если оно равно или больше ``2``, в этих случаях вызовите исключение :exc:"
"`BytesWarning`."

#: ../../c-api/init_config.rst:656
msgid "Incremented by the :option:`-b` command line option."
msgstr "Увеличивается опцией командной строки :option:`-b`."

#: ../../c-api/init_config.rst:662
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""
"Если ненулевое значение, выдать предупреждение :exc:`EncodingWarning`, "
"когда :class:`io.TextIOWrapper` использует кодировку по умолчанию. "
"Подробности см. в :ref:`io-encoding-warning`."

#: ../../c-api/init_config.rst:671
msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""
"Если равно «0», отключает включение сопоставлений конечной строки и столбца "
"в объекты кода. Также отключает обратную печать курсоров для определенных "
"мест ошибок."

#: ../../c-api/init_config.rst:675
msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""
"Устанавливается в ``0`` переменной среды :envvar:`PYTHONNODEBUGRANGES` и "
"параметром командной строки :option:`-X no_debug_ranges <-X>`."

#: ../../c-api/init_config.rst:684
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""
"Управляйте поведением проверки файлов ``.pyc`` на основе хеша: значение "
"параметра командной строки :option:`--check-hash-based-pycs`."

#: ../../c-api/init_config.rst:687
msgid "Valid values:"
msgstr "Допустимые значения:"

#: ../../c-api/init_config.rst:689
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""
"``L\"always\"``: Хэшируйте исходный файл для аннулирования независимо от "
"значения флага 'check_source'."

#: ../../c-api/init_config.rst:691
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr ""
"``L\"никогда\"``: Предположим, что pycs на основе хеша всегда действительны."

#: ../../c-api/init_config.rst:692
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""
"``L\"default\"``: Флаг 'check_source' в pycs на основе хеша определяет "
"недействительность."

#: ../../c-api/init_config.rst:695
msgid "Default: ``L\"default\"``."
msgstr "По умолчанию: ``L\"default\"``."

#: ../../c-api/init_config.rst:697
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "См. также :pep:`552` \"Детерминированные графики\"."

#: ../../c-api/init_config.rst:701
msgid "If non-zero, configure C standard streams:"
msgstr "Если не ноль, настройте стандартные потоки C:"

#: ../../c-api/init_config.rst:703
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""
"В Windows установите двоичный режим («O_BINARY») для stdin, stdout и stderr."

#: ../../c-api/init_config.rst:705
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"Если :c:member:`~PyConfig.buffered_stdio` равен нулю, отключите буферизацию "
"потоков stdin, stdout и stderr."

#: ../../c-api/init_config.rst:707
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""
"Если :c:member:`~PyConfig.interactive` не равно нулю, включите буферизацию "
"потока на стандартном вводе и стандартном выводе (только стандартный вывод в "
"Windows)."

#: ../../c-api/init_config.rst:714
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr ""
"Если значение не равно нулю, включите :ref:`Режим разработки Python "
"<devmode>`."

#: ../../c-api/init_config.rst:716
msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the :envvar:"
"`PYTHONDEVMODE` environment variable."
msgstr ""
"Устанавливается в ``1`` опцией :option:`-X dev <-X>` и переменной среды :"
"envvar:`PYTHONDEVMODE`."

#: ../../c-api/init_config.rst:723
msgid "Dump Python references?"
msgstr "Дамп ссылок на Python?"

#: ../../c-api/init_config.rst:725
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "Если не ноль, выгрузить все объекты, которые еще живы на выходе."

#: ../../c-api/init_config.rst:727
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "Устанавливается в ``1`` переменной среды :envvar:`PYTHONDUMPREFS`."

#: ../../c-api/init_config.rst:729
msgid ""
"Needs a special build of Python with the ``Py_TRACE_REFS`` macro defined: "
"see the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""
"Требуется специальная сборка Python с определенным макросом "
"``Py_TRACE_REFS``: см. :option:`configure --with-trace-refs option <--with-"
"trace-refs>`."

#: ../../c-api/init_config.rst:736
msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""
"Префикс каталога для конкретного сайта, в котором установлены зависящие от "
"платформы файлы Python: :data:`sys.exec_prefix`."

#: ../../c-api/init_config.rst:743
msgid "See also :c:member:`PyConfig.base_exec_prefix`."
msgstr "См. также :c:member:`PyConfig.base_exec_prefix`."

#: ../../c-api/init_config.rst:747
msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr ""
"Абсолютный путь к исполняемому двоичному файлу интерпретатора Python: :data:"
"`sys.executable`."

#: ../../c-api/init_config.rst:754
msgid "See also :c:member:`PyConfig.base_executable`."
msgstr "См. также :c:member:`PyConfig.base_executable`."

#: ../../c-api/init_config.rst:758
msgid "Enable faulthandler?"
msgstr "Включить обработчик ошибок?"

#: ../../c-api/init_config.rst:760
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""
"Если ненулевое значение, вызовите :func:`faulthandler.enable` при запуске."

#: ../../c-api/init_config.rst:762
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"Устанавливается в ``1`` с помощью :option:`-X errorhandler <-X>` и "
"переменной среды :envvar:`PYTHONFAULTHANDLER`."

#: ../../c-api/init_config.rst:769
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""
":term:`Кодировка файловой системы <кодирование файловой системы и обработчик "
"ошибок>`: :func:`sys.getfilesystemencoding`."

#: ../../c-api/init_config.rst:772
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "В macOS, Android и VxWorks: по умолчанию используйте «utf-8»."

#: ../../c-api/init_config.rst:774
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""
"В Windows: используйте ``\"utf-8\"`` по умолчанию или ``\"mbcs\"``, если :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` из :c:type:`PyPreConfig` не "
"равно нулю."

#: ../../c-api/init_config.rst:778
msgid "Default encoding on other platforms:"
msgstr "Кодировка по умолчанию на других платформах:"

#: ../../c-api/init_config.rst:780
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"utf-8\"``, если :c:member:`PyPreConfig.utf8_mode` не равно нулю."

#: ../../c-api/init_config.rst:781
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""
"``\"ascii\"``, если Python обнаруживает, что ``nl_langinfo(CODESET)`` "
"объявляет кодировку ASCII, тогда как функция ``mbstowcs()`` декодирует из "
"другой кодировки (обычно Latin1)."

#: ../../c-api/init_config.rst:784
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "``\"utf-8\"``, если ``nl_langinfo(CODESET)`` возвращает пустую строку."

#: ../../c-api/init_config.rst:785
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr ""
"В противном случае используйте результат :term:`localecoding`: "
"``nl_langinfo(CODESET)``."

#: ../../c-api/init_config.rst:788
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"При запуске Python имя кодировки нормализуется по имени кодека Python. "
"Например, ``\"ANSI_X3.4-1968\"`` заменяется на ``\"ascii\"``."

#: ../../c-api/init_config.rst:791
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "См. также элемент :c:member:`~PyConfig.filesystem_errors`."

#: ../../c-api/init_config.rst:795
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`Обработчик ошибок файловой системы <кодировка файловой системы и "
"обработчик ошибок>`: :func:`sys.getfilesystemencodeerrors`."

#: ../../c-api/init_config.rst:798
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""
"В Windows: используйте ``\"surrogatepass\"`` по умолчанию или "
"``\"replace\"``, если :c:member:`~PyPreConfig.legacy_windows_fs_encoding` "
"из :c:type:`PyPreConfig` не равно нулю."

#: ../../c-api/init_config.rst:802
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr "На других платформах: по умолчанию используйте «surrogateescape»."

#: ../../c-api/init_config.rst:804
msgid "Supported error handlers:"
msgstr "Поддерживаемые обработчики ошибок:"

#: ../../c-api/init_config.rst:806
msgid "``\"strict\"``"
msgstr "``\"strict\"``"

#: ../../c-api/init_config.rst:807
msgid "``\"surrogateescape\"``"
msgstr "``\"surrogateescape\"``"

#: ../../c-api/init_config.rst:808
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"`` (поддерживается только в кодировке UTF-8)"

#: ../../c-api/init_config.rst:810
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "См. также элемент :c:member:`~PyConfig.filesystem_encoding`."

#: ../../c-api/init_config.rst:815
msgid "Randomized hash function seed."
msgstr "Рандомизированное начальное значение хэш-функции."

#: ../../c-api/init_config.rst:817
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"Если :c:member:`~PyConfig.use_hash_seed` равен нулю, начальное число "
"выбирается случайным образом при запуске Python, а :c:member:`~PyConfig."
"hash_seed` игнорируется."

#: ../../c-api/init_config.rst:820
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONHASHSEED`."

#: ../../c-api/init_config.rst:822
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""
"Значение *use_hash_seed* по умолчанию: ``-1`` в режиме Python, ``0`` в "
"изолированном режиме."

#: ../../c-api/init_config.rst:827
msgid ""
"Set the default Python \"home\" directory, that is, the location of the "
"standard Python libraries (see :envvar:`PYTHONHOME`)."
msgstr ""
"Установите «домашний» каталог Python по умолчанию, то есть расположение "
"стандартных библиотек Python (см. :envvar:`PYTHONHOME`)."

#: ../../c-api/init_config.rst:830
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONHOME`."

#: ../../c-api/init_config.rst:834 ../../c-api/init_config.rst:964
#: ../../c-api/init_config.rst:984 ../../c-api/init_config.rst:1073
#: ../../c-api/init_config.rst:1104
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ""
"Часть входных данных :ref:`Python Path Configuration <init-path-config>`."

#: ../../c-api/init_config.rst:838
msgid "If non-zero, profile import time."
msgstr "Если не ноль, время импорта профиля."

#: ../../c-api/init_config.rst:840
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"Установите ``1`` с помощью опции :option:`-X importtime <-X>` и переменной "
"среды :envvar:`PYTHONPROFILEIMPORTTIME`."

#: ../../c-api/init_config.rst:847
msgid "Enter interactive mode after executing a script or a command."
msgstr "Войдите в интерактивный режим после выполнения сценария или команды."

#: ../../c-api/init_config.rst:849
msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be "
"a terminal."
msgstr ""
"Если больше ``0``, включите проверку: когда сценарий передается в качестве "
"первого аргумента или используется опция -c, войдите в интерактивный режим "
"после выполнения сценария или команды, даже если :data:`sys.stdin` выполняет "
"не похоже на терминал."

#: ../../c-api/init_config.rst:854
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"Увеличивается опцией командной строки :option:`-i`. Установите значение "
"``1``, если переменная среды :envvar:`PYTHONINSPECT` не пуста."

#: ../../c-api/init_config.rst:861
msgid "Install Python signal handlers?"
msgstr "Установить обработчики сигналов Python?"

#: ../../c-api/init_config.rst:863 ../../c-api/init_config.rst:1047
#: ../../c-api/init_config.rst:1071 ../../c-api/init_config.rst:1282
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "По умолчанию: ``1`` в режиме Python, ``0`` в изолированном режиме."

#: ../../c-api/init_config.rst:867
msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr "Если больше ``0``, включите интерактивный режим (REPL)."

#: ../../c-api/init_config.rst:869
msgid "Incremented by the :option:`-i` command line option."
msgstr "Увеличивается опцией командной строки :option:`-i`."

#: ../../c-api/init_config.rst:875
msgid ""
"Configures the :ref:`integer string conversion length limitation "
"<int_max_str_digits>`.  An initial value of ``-1`` means the value will be "
"taken from the command line or environment or otherwise default to 4300 (:"
"data:`sys.int_info.default_max_str_digits`).  A value of ``0`` disables the "
"limitation.  Values greater than zero but less than 640 (:data:`sys.int_info."
"str_digits_check_threshold`) are unsupported and will produce an error."
msgstr ""
"Настраивает ограничение длины преобразования целочисленной строки "
"<int_max_str_digits>`. Начальное значение ``-1`` означает, что значение "
"будет взято из командной строки или среды или в противном случае будет "
"установлено по умолчанию 4300 (:data:`sys.int_info.default_max_str_digits`). "
"Значение ``0`` отключает ограничение. Значения больше нуля, но меньше 640 (:"
"data:`sys.int_info.str_digits_check_threshold`) не поддерживаются и приведут "
"к ошибке."

#: ../../c-api/init_config.rst:883
msgid ""
"Configured by the :option:`-X int_max_str_digits <-X>` command line flag or "
"the :envvar:`PYTHONINTMAXSTRDIGITS` environment variable."
msgstr ""
"Настраивается флагом командной строки :option:`-X int_max_str_digits <-X>` "
"или переменной среды :envvar:`PYTHONINTMAXSTRDIGITS`."

#: ../../c-api/init_config.rst:886
msgid ""
"Default: ``-1`` in Python mode.  4300 (:data:`sys.int_info."
"default_max_str_digits`) in isolated mode."
msgstr ""
"По умолчанию: ``-1`` в режиме Python. 4300 (:data:`sys.int_info."
"default_max_str_digits`) в изолированном режиме."

#: ../../c-api/init_config.rst:893
msgid ""
"If the value of :c:member:`~PyConfig.cpu_count` is not ``-1`` then it will "
"override the return values of :func:`os.cpu_count`, :func:`os."
"process_cpu_count`, and :func:`multiprocessing.cpu_count`."
msgstr ""
"Если значение :c:member:`~PyConfig.cpu_count` не равно ``-1``, то оно "
"переопределит возвращаемые значения :func:`os.cpu_count`, :func:`os."
"process_cpu_count` и :func:`multiprocessing.cpu_count`."

#: ../../c-api/init_config.rst:897
msgid ""
"Configured by the :samp:`-X cpu_count={n|default}` command line flag or the :"
"envvar:`PYTHON_CPU_COUNT` environment variable."
msgstr ""
"Настраивается флагом командной строки :samp:`-X cpu_count={n|default}` или "
"переменной среды :envvar:`PYTHON_CPU_COUNT`."

#: ../../c-api/init_config.rst:900 ../../c-api/init_config.rst:1259
msgid "Default: ``-1``."
msgstr "По умолчанию: ``-1``."

#: ../../c-api/init_config.rst:906
msgid "If greater than ``0``, enable isolated mode:"
msgstr "Если больше «0», включите изолированный режим:"

#: ../../c-api/init_config.rst:908
msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup, such as the current "
"directory, the script's directory or an empty string."
msgstr ""
"Установите для :c:member:`~PyConfig.safe_path` значение ``1``: не добавляйте "
"потенциально небезопасный путь к :data:`sys.path` при запуске Python, "
"например текущий каталог, каталог скрипта или пустая строка."

#: ../../c-api/init_config.rst:912
msgid ""
"Set :c:member:`~PyConfig.use_environment` to ``0``: ignore ``PYTHON`` "
"environment variables."
msgstr ""
"Установите для :c:member:`~PyConfig.use_environment` значение ``0``: "
"игнорируйте переменные среды ``PYTHON``."

#: ../../c-api/init_config.rst:914
msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""
"Установите для :c:member:`~PyConfig.user_site_directory` значение ``0``: не "
"добавляйте каталог сайта пользователя в :data:`sys.path`."

#: ../../c-api/init_config.rst:916
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"Python REPL не импортирует :mod:`readline` и не включает конфигурацию строки "
"чтения по умолчанию в интерактивных подсказках."

#: ../../c-api/init_config.rst:919
msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr "Устанавливается в ``1`` опцией командной строки :option:`-I`."

#: ../../c-api/init_config.rst:923
msgid ""
"See also the :ref:`Isolated Configuration <init-isolated-conf>` and :c:"
"member:`PyPreConfig.isolated`."
msgstr ""
"См. также :ref:`Изолированная конфигурация <init-isolated-conf>` и :c:member:"
"`PyPreConfig.isolated`."

#: ../../c-api/init_config.rst:928
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`!io."
"_WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr`."
msgstr ""
"Если ненулевое значение, используйте :class:`io.FileIO` вместо :class:`!io."
"_WindowsConsoleIO` для :data:`sys.stdin`, :data:`sys.stdout` и :data:`sys. "
"stderr`."

#: ../../c-api/init_config.rst:932
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Установите значение ``1``, если для переменной среды :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO` задана непустая строка."

#: ../../c-api/init_config.rst:940
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr "См. также :pep:`528` (Измените кодировку консоли Windows на UTF-8)."

#: ../../c-api/init_config.rst:944
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""
"Если значение не равно нулю, при выходе выгрузите статистику в "
"распределитель памяти Python pymalloc <pymalloc>`."

#: ../../c-api/init_config.rst:947
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr "Устанавливается в ``1`` переменной среды :envvar:`PYTHONMALLOCSTATS`."

#: ../../c-api/init_config.rst:949
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"Этот параметр игнорируется, если Python :option:`настроен с использованием "
"параметра --without-pymalloc <--without-pymalloc>`."

#: ../../c-api/init_config.rst:956
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "Имя каталога библиотеки платформы: :data:`sys.platlibdir`."

#: ../../c-api/init_config.rst:958
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONPLATLIBDIR`."

#: ../../c-api/init_config.rst:960
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""
"По умолчанию: значение макроса ``PLATLIBDIR``, которое задается опцией :"
"option:`configure --with-platlibdir <--with-platlibdir>` (по умолчанию: "
"``\"lib\"`` или ``\" DLL\"`` в Windows)."

#: ../../c-api/init_config.rst:968
msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds "
"and virtual environments."
msgstr ""
"Этот макрос теперь используется в Windows для поиска модулей расширения "
"стандартной библиотеки, обычно в разделе «DLL». Однако в целях совместимости "
"обратите внимание, что это значение игнорируется для любых нестандартных "
"макетов, включая сборки в дереве и виртуальные среды."

#: ../../c-api/init_config.rst:977
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.pathsep`)."
msgstr ""
"Пути поиска модулей (:data:`sys.path`) в виде строки, разделенной ``DELIM`` "
"(:data:`os.pathsep`)."

#: ../../c-api/init_config.rst:980
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "Устанавливается переменной среды :envvar:`PYTHONPATH`."

#: ../../c-api/init_config.rst:989
msgid "Module search paths: :data:`sys.path`."
msgstr "Пути поиска модулей: :data:`sys.path`."

#: ../../c-api/init_config.rst:991
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, :c:func:"
"`Py_InitializeFromConfig` will replace :c:member:`~PyConfig."
"module_search_paths` and sets :c:member:`~PyConfig.module_search_paths_set` "
"to ``1``."
msgstr ""
"Если :c:member:`~PyConfig.module_search_paths_set` равен ``0``, :c:func:"
"`Py_InitializeFromConfig` заменит :c:member:`~PyConfig.module_search_paths` "
"и установит :c:member:` ~PyConfig.module_search_paths_set для ``1``."

#: ../../c-api/init_config.rst:996
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"По умолчанию: пустой список (``module_search_paths``) и ``0`` "
"(``module_search_paths_set``)."

#: ../../c-api/init_config.rst:1003
msgid "Compilation optimization level:"
msgstr "Уровень оптимизации компиляции:"

#: ../../c-api/init_config.rst:1005
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr ""
"``0``: оптимизатор Peephole, установите для ``__debug__`` значение ``True``."

#: ../../c-api/init_config.rst:1006
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr ""
"``1``: Уровень 0, удалите утверждения, установите для ``__debug__`` значение "
"``False``."

#: ../../c-api/init_config.rst:1007
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``: Уровень 1, удаление строк документации."

#: ../../c-api/init_config.rst:1009
msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""
"Увеличивается опцией командной строки :option:`-O`. Установите значение "
"переменной среды :envvar:`PYTHONOPTIMIZE`."

#: ../../c-api/init_config.rst:1016
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr ""
"Список исходных аргументов командной строки, передаваемых в исполняемый файл "
"Python: :data:`sys.orig_argv`."

#: ../../c-api/init_config.rst:1019
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""
"Если список :c:member:`~PyConfig.orig_argv` пуст и :c:member:`~PyConfig."
"argv` не является списком, содержащим только пустую строку, :c:func:"
"`PyConfig_Read` копирует :c:member :`~PyConfig.argv` в :c:member:`~PyConfig."
"orig_argv` перед изменением :c:member:`~PyConfig.argv` (если :c:member:"
"`~PyConfig.parse_argv` не равно нулю) ."

#: ../../c-api/init_config.rst:1026
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr ""
"См. также член :c:member:`~PyConfig.argv` и функцию :c:func:`Py_GetArgcArgv`."

#: ../../c-api/init_config.rst:1029 ../../c-api/init_config.rst:1317
#: ../../c-api/init_config.rst:1336
msgid "Default: empty list."
msgstr "По умолчанию: пустой список."

#: ../../c-api/init_config.rst:1035
msgid "Parse command line arguments?"
msgstr "Анализировать аргументы командной строки?"

#: ../../c-api/init_config.rst:1037
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"Если равно ``1``, анализируйте :c:member:`~PyConfig.argv` так же, как "
"обычный Python анализирует :ref:`аргументы командной строки <using-on-"
"cmdline>` и удаляет аргументы Python из: c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:1049
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""
"Аргументы :c:member:`PyConfig.argv` теперь анализируются только в том "
"случае, если :c:member:`PyConfig.parse_argv` равен ``1``."

#: ../../c-api/init_config.rst:1055
msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""
"Режим отладки парсера. Если больше ``0``, включите вывод отладки "
"синтаксического анализатора (только для экспертов, в зависимости от "
"параметров компиляции)."

#: ../../c-api/init_config.rst:1058
msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""
"Увеличивается опцией командной строки :option:`-d`. Установите значение "
"переменной среды :envvar:`PYTHONDEBUG`."

#: ../../c-api/init_config.rst:1061 ../../c-api/init_config.rst:1166
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_DEBUG`` macro "
"must be defined)."
msgstr ""
"Требуется :ref:`отладочная сборка Python <debug-build>` (должен быть "
"определен макрос ``Py_DEBUG``)."

#: ../../c-api/init_config.rst:1068
msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""
"Если значение не равно нулю, разрешен расчет конфигурации пути для "
"регистрации предупреждений в stderr. Если равно ``0``, подавить эти "
"предупреждения."

#: ../../c-api/init_config.rst:1075
msgid "Now also applies on Windows."
msgstr "Теперь также применяется в Windows."

#: ../../c-api/init_config.rst:1080
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""
"Префикс каталога, специфичный для сайта, в котором установлены независимые "
"от платформы файлы Python: :data:`sys.prefix`."

#: ../../c-api/init_config.rst:1087
msgid "See also :c:member:`PyConfig.base_prefix`."
msgstr "См. также :c:member:`PyConfig.base_prefix`."

#: ../../c-api/init_config.rst:1091
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""
"Имя программы, используемое для инициализации :c:member:`~PyConfig."
"executable` и в ранних сообщениях об ошибках во время инициализации Python."

#: ../../c-api/init_config.rst:1094
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""
"В macOS используйте переменную среды :envvar:`PYTHONEXECUTABLE`, если она "
"установлена."

#: ../../c-api/init_config.rst:1095
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""
"Если определен макрос ``WITH_NEXT_FRAMEWORK``, используйте переменную среды :"
"envvar:`__PYVENV_LAUNCHER__`, если она установлена."

#: ../../c-api/init_config.rst:1097
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""
"Используйте ``argv[0]`` из :c:member:`~PyConfig.argv`, если он доступен и не "
"пуст."

#: ../../c-api/init_config.rst:1099
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""
"В противном случае используйте ``L\"python\"`` в Windows или "
"``L\"python3\"`` на других платформах."

#: ../../c-api/init_config.rst:1108
msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr ""
"Каталог, в который записываются кэшированные файлы ``.pyc``: :data:`sys."
"pycache_prefix`."

#: ../../c-api/init_config.rst:1111
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable. The command-line "
"option takes precedence."
msgstr ""
"Устанавливается параметром командной строки :option:`-X pycache_prefix=PATH "
"<-X>` и переменной среды :envvar:`PYTHONPYCACHEPREFIX`. Параметр командной "
"строки имеет приоритет."

#: ../../c-api/init_config.rst:1115
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""
"Если ``NULL``, для :data:`sys.pycache_prefix` установлено значение ``None``."

#: ../../c-api/init_config.rst:1121
msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""
"Тихий режим. Если больше ``0``, не отображайте авторские права и версию при "
"запуске Python в интерактивном режиме."

#: ../../c-api/init_config.rst:1124
msgid "Incremented by the :option:`-q` command line option."
msgstr "Увеличивается опцией командной строки :option:`-q`."

#: ../../c-api/init_config.rst:1130
msgid "Value of the :option:`-c` command line option."
msgstr "Значение параметра командной строки :option:`-c`."

#: ../../c-api/init_config.rst:1132 ../../c-api/init_config.rst:1153
msgid "Used by :c:func:`Py_RunMain`."
msgstr "Используется :c:func:`Py_RunMain`."

#: ../../c-api/init_config.rst:1138
msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` function."
msgstr ""
"Имя файла, передаваемое в командной строке: завершающий аргумент командной "
"строки без :option:`-c` или :option:`-m`. Он используется функцией :c:func:"
"`Py_RunMain`."

#: ../../c-api/init_config.rst:1142
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""
"Например, для него установлено значение ``script.py`` в командной строке "
"``python3 script.py arg``."

#: ../../c-api/init_config.rst:1145
msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr "См. также параметр :c:member:`PyConfig.skip_source_first_line`."

#: ../../c-api/init_config.rst:1151
msgid "Value of the :option:`-m` command line option."
msgstr "Value of the :option:`-m` command line option."

#: ../../c-api/init_config.rst:1159
msgid ""
"``package.module`` path to module that should be imported before ``site.py`` "
"is run."
msgstr ""
"``package.module`` путь к модулю, который должен быть импортирован перед "
"запуском ``site.py``."

#: ../../c-api/init_config.rst:1162
msgid ""
"Set by the :option:`-X presite=package.module <-X>` command-line option and "
"the :envvar:`PYTHON_PRESITE` environment variable. The command-line option "
"takes precedence."
msgstr ""
"Устанавливается параметром командной строки :option:`-X presite=package."
"module <-X>` и переменной среды :envvar:`PYTHON_PRESITE`. Параметр командной "
"строки имеет приоритет."

#: ../../c-api/init_config.rst:1173
msgid ""
"Show total reference count at exit (excluding :term:`immortal` objects)?"
msgstr ""
"Показывать общее количество ссылок при выходе (исключая объекты :term:"
"`immortal`)?"

#: ../../c-api/init_config.rst:1175
msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ""
"Установите значение ``1`` с помощью опции командной строки :option:`-X "
"showrefcount <-X>`."

#: ../../c-api/init_config.rst:1177
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""
"Требуется :ref:`отладочная сборка Python <debug-build>` (должен быть "
"определен макрос ``Py_REF_DEBUG``)."

#: ../../c-api/init_config.rst:1184
msgid "Import the :mod:`site` module at startup?"
msgstr "Импортировать модуль :mod:`site` при запуске?"

#: ../../c-api/init_config.rst:1186
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""
"Если оно равно нулю, отключите импорт сайта модуля и связанные с ним "
"манипуляции с :data:`sys.path`, зависящие от сайта."

#: ../../c-api/init_config.rst:1189
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""
"Также отключите эти манипуляции, если модуль :mod:`site` будет явно "
"импортирован позже (вызовите :func:`site.main`, если вы хотите, чтобы они "
"запускались)."

#: ../../c-api/init_config.rst:1192
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr "Устанавливается в ``0`` опцией командной строки :option:`-S`."

#: ../../c-api/init_config.rst:1194
msgid ""
":data:`sys.flags.no_site <sys.flags>` is set to the inverted value of :c:"
"member:`~PyConfig.site_import`."
msgstr ""
":data:`sys.flags.no_site <sys.flags>` имеет инвертированное значение :c:"
"member:`~PyConfig.site_import`."

#: ../../c-api/init_config.rst:1201
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""
"Если значение не равно нулю, пропустите первую строку источника :c:member:"
"`PyConfig.run_filename`."

#: ../../c-api/init_config.rst:1204
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""
"Это позволяет использовать не-Unix формы ``#!cmd``. Это предназначено только "
"для взлома DOS."

#: ../../c-api/init_config.rst:1207
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr "Устанавливается в ``1`` опцией командной строки :option:`-x`."

#: ../../c-api/init_config.rst:1214
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""
"Ошибки кодирования и кодирования :data:`sys.stdin`, :data:`sys.stdout` и :"
"data:`sys.stderr` (но :data:`sys.stderr` всегда использует ``\"обратную "
"косую черту\"`` обработчик ошибок)."

#: ../../c-api/init_config.rst:1218
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""
"Используйте переменную среды :envvar:`PYTHONIOENCODING`, если она не пуста."

#: ../../c-api/init_config.rst:1221
msgid "Default encoding:"
msgstr "Кодировка по умолчанию:"

#: ../../c-api/init_config.rst:1223
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"UTF-8\"``, если :c:member:`PyPreConfig.utf8_mode` не равно нулю."

#: ../../c-api/init_config.rst:1224
msgid "Otherwise, use the :term:`locale encoding`."
msgstr "В противном случае используйте :term:`кодировку локали`."

#: ../../c-api/init_config.rst:1226
msgid "Default error handler:"
msgstr "Обработчик ошибок по умолчанию:"

#: ../../c-api/init_config.rst:1228
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr "В Windows: используйте «surrogateescape»."

#: ../../c-api/init_config.rst:1229
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""
"``\"surrogateescape\"``, если :c:member:`PyPreConfig.utf8_mode` не равно "
"нулю или если локаль LC_CTYPE равна \"C\" или \"POSIX\"."

#: ../../c-api/init_config.rst:1231
msgid "``\"strict\"`` otherwise."
msgstr "``\"строгий\"`` в противном случае."

#: ../../c-api/init_config.rst:1233
msgid "See also :c:member:`PyConfig.legacy_windows_stdio`."
msgstr "См. также :c:member:`PyConfig.legacy_windows_stdio`."

#: ../../c-api/init_config.rst:1237
msgid "Enable tracemalloc?"
msgstr "Включить трассировку?"

#: ../../c-api/init_config.rst:1239
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""
"Если ненулевое значение, вызовите :func:`tracemalloc.start` при запуске."

#: ../../c-api/init_config.rst:1241
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""
"Устанавливается параметром командной строки :option:`-X трассировка=N <-X>` "
"и переменной среды :envvar:`PYTHONTRACEMALLOC`."

#: ../../c-api/init_config.rst:1248
msgid "Enable compatibility mode with the perf profiler?"
msgstr "Включить режим совместимости с профилировщиком производительности?"

#: ../../c-api/init_config.rst:1250
msgid ""
"If non-zero, initialize the perf trampoline. See :ref:`perf_profiling` for "
"more information."
msgstr ""
"Если ненулевое значение, инициализировать батут производительности. См. :ref:"
"`perf_profiling` для получения дополнительной информации."

#: ../../c-api/init_config.rst:1253
msgid ""
"Set by :option:`-X perf <-X>` command-line option and by the :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` environment variable for perf support with stack "
"pointers and :option:`-X perf_jit <-X>` command-line option and by the :"
"envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable for perf support with "
"DWARF JIT information."
msgstr ""
"Устанавливается параметром командной строки :option:`-X perf <-X>` и "
"переменной среды :envvar:`PYTHON_PERF_JIT_SUPPORT` для поддержки "
"производительности с указателями стека и командой :option:`-X perf_jit <-"
"X>`. line и переменной среды :envvar:`PYTHON_PERF_JIT_SUPPORT` для поддержки "
"производительности с информацией DWARF JIT."

#: ../../c-api/init_config.rst:1265
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "Использовать :ref:`переменные среды <using-on-envvars>`?"

#: ../../c-api/init_config.rst:1267
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""
"Если равно нулю, игнорируйте :ref:`переменные среды <using-on-envvars>`."

#: ../../c-api/init_config.rst:1270
msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr "Устанавливается в ``0`` переменной среды :option:`-E`."

#: ../../c-api/init_config.rst:1276
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""
"Если ненулевое значение, добавьте каталог сайта пользователя в :data:`sys."
"path`."

#: ../../c-api/init_config.rst:1278
msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""
"Установите значение ``0`` с помощью параметров командной строки :option:`-s` "
"и :option:`-I`."

#: ../../c-api/init_config.rst:1280
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr "Устанавливается в ``0`` переменной среды :envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init_config.rst:1286
msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""
"Подробный режим. Если больше ``0``, каждый раз при импорте модуля выводить "
"сообщение с указанием места (имя файла или встроенный модуль), из которого "
"он загружен."

#: ../../c-api/init_config.rst:1290
msgid ""
"If greater than or equal to ``2``, print a message for each file that is "
"checked for when searching for a module. Also provides information on module "
"cleanup at exit."
msgstr ""
"Если больше или равно ``2``, выведите сообщение для каждого файла, который "
"проверяется при поиске модуля. Также предоставляет информацию об очистке "
"модуля при выходе."

#: ../../c-api/init_config.rst:1294
msgid "Incremented by the :option:`-v` command line option."
msgstr "Увеличивается опцией командной строки :option:`-v`."

#: ../../c-api/init_config.rst:1296
msgid "Set by the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr "Устанавливается значением переменной среды :envvar:`PYTHONVERBOSE`."

#: ../../c-api/init_config.rst:1302
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""
"Параметры модуля :mod:`warnings` для создания фильтров предупреждений, от "
"самого низкого до самого высокого приоритета: :data:`sys.warnoptions`."

#: ../../c-api/init_config.rst:1305
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
"Модуль :mod:`warnings` добавляет :data:`sys.warnoptions` в обратном порядке: "
"последний элемент :c:member:`PyConfig.warnoptions` становится первым "
"элементом :data:`warnings.filters`, который проверяется первым (самый "
"высокий приоритет)."

#: ../../c-api/init_config.rst:1310
msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""
"Параметры командной строки :option:`-W` добавляют свое значение к :c:member:"
"`~PyConfig.warnoptions`, его можно использовать несколько раз."

#: ../../c-api/init_config.rst:1313
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""
"Переменную среды :envvar:`PYTHONWARNINGS` также можно использовать для "
"добавления параметров предупреждения. Можно указать несколько опций, "
"разделенных запятыми (``,``)."

#: ../../c-api/init_config.rst:1321
msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""
"Если значение равно «0», Python не будет пытаться записывать файлы «.pyc» "
"при импорте исходных модулей."

#: ../../c-api/init_config.rst:1324
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""
"Устанавливается в ``0`` с помощью опции командной строки :option:`-B` и "
"переменной среды :envvar:`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init_config.rst:1327
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` инициализируется инвертированным значением :"
"c:member:`~PyConfig.write_bytecode`."

#: ../../c-api/init_config.rst:1334
msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""
"Значения параметров командной строки :option:`-X`: :data:`sys._xoptions`."

#: ../../c-api/init_config.rst:1338
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""
"Если :c:member:`~PyConfig.parse_argv` не равно нулю, аргументы :c:member:"
"`~PyConfig.argv` анализируются так же, как обычный Python анализирует :ref:"
"`аргументы командной строки <using-on- cmdline>`, а аргументы Python "
"удаляются из :c:member:`~PyConfig.argv`."

#: ../../c-api/init_config.rst:1343
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""
"Параметры :c:member:`~PyConfig.xoptions` анализируются для установки других "
"параметров: см. параметр командной строки :option:`-X`."

#: ../../c-api/init_config.rst:1348
msgid "The ``show_alloc_count`` field has been removed."
msgstr "Поле show_alloc_count было удалено."

#: ../../c-api/init_config.rst:1354
msgid "Initialization with PyConfig"
msgstr "Инициализация с помощью PyConfig"

#: ../../c-api/init_config.rst:1356
msgid ""
"Initializing the interpreter from a populated configuration struct is "
"handled by calling :c:func:`Py_InitializeFromConfig`."
msgstr ""
"Инициализация интерпретатора из заполненной структуры конфигурации "
"выполняется вызовом :c:func:`Py_InitializeFromConfig`."

#: ../../c-api/init_config.rst:1362
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""
"Если используются :c:func:`PyImport_FrozenModules`, :c:func:"
"`PyImport_AppendInittab` или :c:func:`PyImport_ExtendInittab`, они должны "
"быть установлены или вызваны после предварительной инициализации Python и до "
"инициализации Python. Если Python инициализируется несколько раз, перед "
"каждой инициализацией Python необходимо вызывать :c:func:"
"`PyImport_AppendInittab` или :c:func:`PyImport_ExtendInittab`."

#: ../../c-api/init_config.rst:1369
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""
"Текущая конфигурация (тип PyConfig) хранится в PyInterpreterState.config."

#: ../../c-api/init_config.rst:1372
msgid "Example setting the program name::"
msgstr "Пример установки имени программы::"

#: ../../c-api/init_config.rst:1374
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name. Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetString(&config, &config.program_name,\n"
"                                L\"/path/to/my_program\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"    return;\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name. Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetString(&config, &config.program_name,\n"
"                                L\"/path/to/my_program\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"    return;\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    Py_ExitStatusException(status);\n"
"}"

#: ../../c-api/init_config.rst:1400
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many "
"parameters are not calculated until initialization, and so values cannot be "
"read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""
"Более полный пример изменения конфигурации по умолчанию, чтения конфигурации "
"и последующего переопределения некоторых параметров. Обратите внимание, что "
"начиная с версии 3.11 многие параметры не рассчитываются до инициализации, "
"поэтому значения невозможно прочитать из структуры конфигурации. Любые "
"значения, установленные до вызова инициализации, останутся неизменными при "
"инициализации::"

#: ../../c-api/init_config.rst:1407
msgid ""
"PyStatus init_python(const char *program_name)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name before reading the configuration\n"
"       (decode byte string from the locale encoding).\n"
"\n"
"       Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name,\n"
"                                     program_name);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Read all configuration at once */\n"
"    status = PyConfig_Read(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Specify sys.path explicitly */\n"
"    /* If you want to modify the default set of paths, finish\n"
"       initialization first and then use PySys_GetObject(\"path\") */\n"
"    config.module_search_paths_set = 1;\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/stdlib\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/more/modules\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Override executable computed by PyConfig_Read() */\n"
"    status = PyConfig_SetString(&config, &config.executable,\n"
"                                L\"/path/to/my_executable\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"\n"
"done:\n"
"    PyConfig_Clear(&config);\n"
"    return status;\n"
"}"
msgstr ""
"PyStatus init_python(const char *program_name)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name before reading the configuration\n"
"       (decode byte string from the locale encoding).\n"
"\n"
"       Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name,\n"
"                                     program_name);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Read all configuration at once */\n"
"    status = PyConfig_Read(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Specify sys.path explicitly */\n"
"    /* If you want to modify the default set of paths, finish\n"
"       initialization first and then use PySys_GetObject(\"path\") */\n"
"    config.module_search_paths_set = 1;\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/stdlib\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/more/modules\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Override executable computed by PyConfig_Read() */\n"
"    status = PyConfig_SetString(&config, &config.executable,\n"
"                                L\"/path/to/my_executable\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"\n"
"done:\n"
"    PyConfig_Clear(&config);\n"
"    return status;\n"
"}"

#: ../../c-api/init_config.rst:1463
msgid "Isolated Configuration"
msgstr "Изолированная конфигурация"

#: ../../c-api/init_config.rst:1465
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."

#: ../../c-api/init_config.rst:1470
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"Эта конфигурация игнорирует глобальные переменные конфигурации, переменные "
"среды, аргументы командной строки (:c:member:`PyConfig.argv` не "
"анализируется) и каталог сайта пользователя. Стандартные потоки C (например: "
"``stdout``) и локаль LC_CTYPE остаются неизменными. Обработчики сигналов не "
"установлены."

#: ../../c-api/init_config.rst:1475
msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to "
"avoid computing the default path configuration."
msgstr ""
"Файлы конфигурации по-прежнему используются с этой конфигурацией для "
"определения неуказанных путей. Убедитесь, что указан :c:member:`PyConfig."
"home`, чтобы избежать вычисления конфигурации пути по умолчанию."

#: ../../c-api/init_config.rst:1483
msgid "Python Configuration"
msgstr "Конфигурация Python"

#: ../../c-api/init_config.rst:1485
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."

#: ../../c-api/init_config.rst:1489
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""
"Переменные среды и аргументы командной строки используются для настройки "
"Python, тогда как глобальные переменные конфигурации игнорируются."

#: ../../c-api/init_config.rst:1492
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""
"Эта функция включает приведение локали C (:pep:`538`) и :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) в зависимости от локали LC_CTYPE, :envvar:"
"`PYTHONUTF8` и переменные среды :envvar:`PYTHONCOERCECLOCALE`."

#: ../../c-api/init_config.rst:1501
msgid "Python Path Configuration"
msgstr "Конфигурация пути Python"

#: ../../c-api/init_config.rst:1503
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` содержит несколько полей для конфигурации пути:"

#: ../../c-api/init_config.rst:1505
msgid "Path configuration inputs:"
msgstr "Входные данные конфигурации пути:"

#: ../../c-api/init_config.rst:1507
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1508
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1509
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1510
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1511
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1512
msgid "current working directory: to get absolute paths"
msgstr "текущий рабочий каталог: чтобы получить абсолютные пути"

#: ../../c-api/init_config.rst:1513
msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""
"Переменная среды ``PATH`` для получения полного пути к программе (из :c:"
"member:`PyConfig.program_name`)"

#: ../../c-api/init_config.rst:1515
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` переменная среды"

#: ../../c-api/init_config.rst:1516
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"(Только для Windows) Пути к приложениям в реестре "
"«Software\\Python\\PythonCore\\XY\\PythonPath» из HKEY_CURRENT_USER и "
"HKEY_LOCAL_MACHINE (где XY — версия Python)."

#: ../../c-api/init_config.rst:1520
msgid "Path configuration output fields:"
msgstr "Поля вывода конфигурации пути:"

#: ../../c-api/init_config.rst:1522
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1523
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1524
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1525
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1526
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1527
msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"

#: ../../c-api/init_config.rst:1529
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1531
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to ``0``, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to ``1``."
msgstr ""
"Если хотя бы одно «поле вывода» не установлено, Python вычисляет "
"конфигурацию пути для заполнения неустановленных полей. Если :c:member:"
"`~PyConfig.module_search_paths_set` равен ``0``, :c:member:`~PyConfig."
"module_search_paths` переопределяется, а :c:member:`~PyConfig."
"module_search_paths_set` имеет значение `` `1``."

#: ../../c-api/init_config.rst:1537
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""
"Можно полностью игнорировать функцию расчета конфигурации пути по умолчанию, "
"явно задав все поля вывода конфигурации пути, перечисленные выше. Строка "
"считается установленной, даже если она не пуста. ``module_search_paths`` "
"считается установленным, если ``module_search_paths_set`` установлен в "
"``1``. В этом случае module_search_paths будет использоваться без изменений."

#: ../../c-api/init_config.rst:1544
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""
"Установите для :c:member:`~PyConfig.pathconfig_warnings` значение ``0``, "
"чтобы подавить предупреждения при вычислении конфигурации пути (только для "
"Unix, Windows не регистрирует никаких предупреждений)."

#: ../../c-api/init_config.rst:1547
msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"Если поля :c:member:`~PyConfig.base_prefix` или :c:member:`~PyConfig."
"base_exec_prefix` не установлены, они наследуют свое значение от :c:member:"
"`~PyConfig.prefix` и :c:member :`~PyConfig.exec_prefix` соответственно."

#: ../../c-api/init_config.rst:1551
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` и :c:func:`Py_Main` изменяют :data:`sys.path`:"

#: ../../c-api/init_config.rst:1553
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""
"Если :c:member:`~PyConfig.run_filename` установлен и является каталогом, "
"содержащим скрипт ``__main__.py``, добавьте :c:member:`~PyConfig."
"run_filename` к :data:`sys.path `."

#: ../../c-api/init_config.rst:1556
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "Если :c:member:`~PyConfig.isolated` равен нулю:"

#: ../../c-api/init_config.rst:1558
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"Если установлен :c:member:`~PyConfig.run_module`, добавьте текущий каталог к ​​"
":data:`sys.path`. Ничего не делайте, если текущий каталог не может быть "
"прочитан."

#: ../../c-api/init_config.rst:1560
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"Если установлен :c:member:`~PyConfig.run_filename`, добавьте каталог имени "
"файла к :data:`sys.path`."

#: ../../c-api/init_config.rst:1562
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "В противном случае добавьте пустую строку к :data:`sys.path`."

#: ../../c-api/init_config.rst:1564
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""
"Если :c:member:`~PyConfig.site_import` не равно нулю, :data:`sys.path` может "
"быть изменен модулем :mod:`site`. Если :c:member:`~PyConfig."
"user_site_directory` не равно нулю и каталог пакета сайта пользователя "
"существует, модуль :mod:`site` добавляет каталог пакета сайта пользователя "
"к :data:`sys.path`."

#: ../../c-api/init_config.rst:1570
msgid "The following configuration files are used by the path configuration:"
msgstr "Следующие файлы конфигурации используются для конфигурации пути:"

#: ../../c-api/init_config.rst:1572
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1573
msgid "``._pth`` file (ex: ``python._pth``)"
msgstr "Файл ``._pth`` (например: ``python._pth``)"

#: ../../c-api/init_config.rst:1574
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (только Unix)"

#: ../../c-api/init_config.rst:1576
msgid "If a ``._pth`` file is present:"
msgstr "Если присутствует файл ``._pth``:"

#: ../../c-api/init_config.rst:1578
msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr "Установите для :c:member:`~PyConfig.isolated` значение ``1``."

#: ../../c-api/init_config.rst:1579
msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr "Установите для :c:member:`~PyConfig.use_environment` значение ``0``."

#: ../../c-api/init_config.rst:1580
msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr "Установите для :c:member:`~PyConfig.site_import` значение ``0``."

#: ../../c-api/init_config.rst:1581
msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr "Установите для :c:member:`~PyConfig.safe_path` значение ``1``."

#: ../../c-api/init_config.rst:1583
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`."
msgstr ""
"Переменная среды ``__PYVENV_LAUNCHER__`` используется для установки :c:"
"member:`PyConfig.base_executable`."

#: ../../c-api/init_config.rst:1588
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1592
msgid "Get the original command line arguments, before Python modified them."
msgstr ""
"Получите исходные аргументы командной строки до того, как Python их изменит."

#: ../../c-api/init_config.rst:1594
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr "См. также :c:member:`PyConfig.orig_argv`."

#: ../../c-api/init_config.rst:1598
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "Частный временный API многофазной инициализации"

#: ../../c-api/init_config.rst:1600
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr ""
"Этот раздел представляет собой частный временный API, представляющий "
"многофазную инициализацию, основную функцию :pep:`432`:"

#: ../../c-api/init_config.rst:1603
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "Фаза инициализации «ядра», «минимальный Python»:"

#: ../../c-api/init_config.rst:1605
msgid "Builtin types;"
msgstr "Встроенные типы;"

#: ../../c-api/init_config.rst:1606
msgid "Builtin exceptions;"
msgstr "Встроенные исключения;"

#: ../../c-api/init_config.rst:1607
msgid "Builtin and frozen modules;"
msgstr "Встроенные и замороженные модули;"

#: ../../c-api/init_config.rst:1608
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""
"Модуль :mod:`sys` инициализирован лишь частично (например: :data:`sys.path` "
"еще не существует)."

#: ../../c-api/init_config.rst:1611
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "«Основной» этап инициализации, Python полностью инициализируется:"

#: ../../c-api/init_config.rst:1613
msgid "Install and configure :mod:`importlib`;"
msgstr "Установите и настройте :mod:`importlib`;"

#: ../../c-api/init_config.rst:1614
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "Примените :ref:`Конфигурацию пути <init-path-config>`;"

#: ../../c-api/init_config.rst:1615
msgid "Install signal handlers;"
msgstr "Установить обработчики сигналов;"

#: ../../c-api/init_config.rst:1616
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""
"Завершить инициализацию модуля :mod:`sys` (например: создать :data:`sys."
"stdout` и :data:`sys.path`);"

#: ../../c-api/init_config.rst:1618
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""
"Включите дополнительные функции, такие как :mod:`faulthandler` и :mod:"
"`tracemalloc`;"

#: ../../c-api/init_config.rst:1619
msgid "Import the :mod:`site` module;"
msgstr "Импортируйте модуль :mod:`site`;"

#: ../../c-api/init_config.rst:1620
msgid "etc."
msgstr "и т.д."

#: ../../c-api/init_config.rst:1622
msgid "Private provisional API:"
msgstr "Частный временный API:"

#: ../../c-api/init_config.rst:1624
msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""
":c:member:`PyConfig._init_main`: если установлено значение ``0``, :c:func:"
"`Py_InitializeFromConfig` останавливается на этапе инициализации \"Ядро\"."

#: ../../c-api/init_config.rst:1629
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""
"Перейдите к этапу инициализации «Основной», завершите инициализацию Python."

#: ../../c-api/init_config.rst:1631
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""
"На этапе «Основной» модуль не импортируется, и модуль importlib не "
"настроен: :ref:`Конфигурация пути <init-path-config>` применяется только на "
"этапе «Основной». Это может позволить настроить Python в Python для "
"переопределения или настройки :ref:`Path Configuration <init-path-config>`, "
"возможно, установить собственный импортер :data:`sys.meta_path` или "
"перехватчик импорта и т. д."

#: ../../c-api/init_config.rst:1637
msgid ""
"It may become possible to calculate the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""
"Может стать возможным вычислить :ref:`Конфигурацию пути <init-path-config>` "
"в Python после фазы Core и перед основной фазой, что является одной из "
"причин :pep:`432`."

#: ../../c-api/init_config.rst:1641
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"Фаза «Ядро» не определена должным образом: что должно быть, а что не должно "
"быть доступно на этом этапе, пока не указано. API помечен как частный и "
"временный: API можно изменить или даже удалить в любое время, пока не будет "
"разработан подходящий общедоступный API."

#: ../../c-api/init_config.rst:1646
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "Пример запуска кода Python между фазами инициализации «Core» и «Main»:"

#: ../../c-api/init_config.rst:1649
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config._init_main = 0;\n"
"\n"
"    /* ... customize 'config' configuration ... */\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"\n"
"    /* Use sys.stderr because sys.stdout is only created\n"
"       by _Py_InitializeMain() */\n"
"    int res = PyRun_SimpleString(\n"
"        \"import sys; \"\n"
"        \"print('Run Python code before _Py_InitializeMain', \"\n"
"               \"file=sys.stderr)\");\n"
"    if (res < 0) {\n"
"        exit(1);\n"
"    }\n"
"\n"
"    /* ... put more configuration code here ... */\n"
"\n"
"    status = _Py_InitializeMain();\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"}"
msgstr ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config._init_main = 0;\n"
"\n"
"    /* ... customize 'config' configuration ... */\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"\n"
"    /* Use sys.stderr because sys.stdout is only created\n"
"       by _Py_InitializeMain() */\n"
"    int res = PyRun_SimpleString(\n"
"        \"import sys; \"\n"
"        \"print('Run Python code before _Py_InitializeMain', \"\n"
"               \"file=sys.stderr)\");\n"
"    if (res < 0) {\n"
"        exit(1);\n"
"    }\n"
"\n"
"    /* ... put more configuration code here ... */\n"
"\n"
"    status = _Py_InitializeMain();\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"}"

#: ../../c-api/init_config.rst:558
msgid "main()"
msgstr "main()"

#: ../../c-api/init_config.rst:558
msgid "argv (in module sys)"
msgstr "argv (in module sys)"
