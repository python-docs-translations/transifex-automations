# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-11 14:18+0000\n"
"PO-Revision-Date: 2025-08-15 18:59+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Целочисленные объекты"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Все целые числа реализованы как «длинные» целочисленные объекты "
"произвольного размера."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"В случае ошибки большинство API PyLong_As* возвращают ``(return type)-1``, "
"который невозможно отличить от числа. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Этот подтип :c:type:`PyObject` представляет собой целочисленный объект "
"Python."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Этот экземпляр :c:type:`PyTypeObject` представляет целочисленный тип Python. "
"Это тот же объект, что и :class:`int` на уровне Python."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyLongObject` или "
"подтип :c:type:`PyLongObject`. Эта функция всегда завершается успешно."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyLongObject`, но не "
"подтип :c:type:`PyLongObject`. Эта функция всегда завершается успешно."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из *v* или ``NULL`` в случае "
"ошибки."

#: ../../c-api/long.rst:45
msgid ""
"CPython keeps an array of integer objects for all integers between ``-5`` "
"and ``256``.  When you create an int in that range you actually just get "
"back a reference to the existing object."
msgstr ""

#: ../../c-api/long.rst:52
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:expr:`unsigned long` "
"или ``NULL`` в случае неудачи."

#: ../../c-api/long.rst:58
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:type:`Py_ssize_t` или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:64
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:type:`size_t` или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:70
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:expr:`long long` или "
"``NULL`` в случае неудачи."

#: ../../c-api/long.rst:77
msgid ""
"Return a new :c:type:`PyLongObject` object from a signed C :c:expr:`int32_t` "
"or :c:expr:`int64_t`, or ``NULL`` with an exception set on failure."
msgstr ""

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из C :c:expr:`unsigned long "
"long` или ``NULL`` в случае неудачи."

#: ../../c-api/long.rst:93
msgid ""
"Return a new :c:type:`PyLongObject` object from an unsigned C :c:expr:"
"`uint32_t` or :c:expr:`uint64_t`, or ``NULL`` with an exception set on "
"failure."
msgstr ""

#: ../../c-api/long.rst:102
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из целочисленной части *v* или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:108
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""
"Возвращает новый :c:type:`PyLongObject` на основе строкового значения в "
"*str*, которое интерпретируется в соответствии с основанием системы "
"счисления в *base*, или ``NULL`` в случае ошибки. Если *pend* не равен NULL, "
"*\\*pend* будет указывать на конец *str* в случае успеха или на первый "
"символ, который не удалось обработать в случае ошибки. Если *base* равно "
"«0», *str* интерпретируется с использованием определения :ref:`integers`; в "
"этом случае ведущие нули в ненулевом десятичном числе вызывают ошибку :exc:"
"`ValueError`. Если *base* не равно ``0``, оно должно находиться в диапазоне "
"от ``2`` до ``36`` включительно. Ведущие и конечные пробелы, а также "
"одиночные символы подчеркивания после базового спецификатора и между цифрами "
"игнорируются. Если цифр нет или *str* не заканчивается NULL после цифр и "
"завершающих пробелов, будет поднято :exc:`ValueError`."

#: ../../c-api/long.rst:119
msgid ""
":c:func:`PyLong_AsNativeBytes()` and :c:func:`PyLong_FromNativeBytes()` "
"functions can be used to convert a :c:type:`PyLongObject` to/from an array "
"of bytes in base ``256``."
msgstr ""

#: ../../c-api/long.rst:126
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Преобразуйте последовательность цифр Юникода в строке *u* в целочисленное "
"значение Python."

#: ../../c-api/long.rst:134
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Создайте целое число Python из указателя *p*. Значение указателя можно "
"получить из полученного значения с помощью :c:func:`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:140
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as a two's-complement signed number."
msgstr ""
"Создайте целое число Python из значения, содержащегося в первых *n_bytes* "
"*buffer*, интерпретируемого как число со знаком, дополняемое до двух."

#: ../../c-api/long.rst:143
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is a sign bit. Passing "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` will produce the same result as "
"calling :c:func:`PyLong_FromUnsignedNativeBytes`. Other flags are ignored."
msgstr ""
"*флаги* такие же, как для :c:func:`PyLong_AsNativeBytes`. При передаче "
"``-1`` будет выбран собственный порядок байтов, с которым был скомпилирован "
"CPython, и предполагается, что наиболее значимый бит является знаковым. "
"Передача Py_ASNATIVEBYTES_UNSIGNED_BUFFER даст тот же результат, что и "
"вызов :c:func:`PyLong_FromUnsignedNativeBytes`. Остальные флаги игнорируются."

#: ../../c-api/long.rst:154
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as an unsigned number."
msgstr ""
"Создайте целое число Python из значения, содержащегося в первых *n_bytes* "
"*buffer*, интерпретируемого как беззнаковое число."

#: ../../c-api/long.rst:157
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is not a sign bit. Flags other than endian are ignored."
msgstr ""
"*флаги* такие же, как для :c:func:`PyLong_AsNativeBytes`. При передаче "
"``-1`` будет выбран собственный порядок байтов, с которым был скомпилирован "
"CPython, и предполагается, что самый старший бит не является знаковым битом. "
"Флаги, отличные от endian, игнорируются."

#: ../../c-api/long.rst:170 ../../c-api/long.rst:206
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`long` представление *obj*. Если *obj* не является "
"экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :meth:"
"`~object.__index__` (если он присутствует), чтобы преобразовать его в :c:"
"type:`PyLongObject`."

#: ../../c-api/long.rst:174
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *obj* выходит за пределы "
"диапазона для :c:expr:`long`."

#: ../../c-api/long.rst:177 ../../c-api/long.rst:215 ../../c-api/long.rst:236
#: ../../c-api/long.rst:256 ../../c-api/long.rst:279
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``-1`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` для "
"устранения неоднозначности."

#: ../../c-api/long.rst:179 ../../c-api/long.rst:217 ../../c-api/long.rst:238
#: ../../c-api/long.rst:260 ../../c-api/long.rst:344 ../../c-api/long.rst:364
msgid "Use :meth:`~object.__index__` if available."
msgstr "Используйте :meth:`~object.__index__`, если доступно."

#: ../../c-api/long.rst:182 ../../c-api/long.rst:220 ../../c-api/long.rst:241
#: ../../c-api/long.rst:263 ../../c-api/long.rst:347 ../../c-api/long.rst:367
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "Эта функция больше не будет использовать :meth:`~object.__int__`."

#: ../../c-api/long.rst:189
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` or "
"another exception."
msgstr ""
"A :term:`мягкий устаревший` псевдоним. Точно эквивалентен предпочтительному "
"PyLong_AsLong. В частности, он может завершиться ошибкой с :exc:"
"`OverflowError` или другим исключением."

#: ../../c-api/long.rst:193
msgid "The function is soft deprecated."
msgstr "Функция является устаревшей."

#: ../../c-api/long.rst:198
msgid ""
"Similar to :c:func:`PyLong_AsLong`, but store the result in a C :c:expr:"
"`int` instead of a C :c:expr:`long`."
msgstr ""
"Аналогично :c:func:`PyLong_AsLong`, но результат сохраняется в C :c:expr:"
"`int` вместо C :c:expr:`long`."

#: ../../c-api/long.rst:210
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Если значение *obj* больше, чем :c:macro:`LONG_MAX` или меньше, чем :c:macro:"
"`LONG_MIN`, установите для *\\*overflow* значение ``1`` или ``-1``, "
"соответственно и вернуть ``-1``; в противном случае установите для "
"*\\*overflow* значение ``0``. Если возникает какое-либо другое исключение, "
"установите *\\*overflow* в ``0`` и верните ``-1``, как обычно."

#: ../../c-api/long.rst:229 ../../c-api/long.rst:247
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`long long` представление *obj*. Если *obj* не является "
"экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :meth:"
"`~object.__index__` (если он присутствует), чтобы преобразовать его в :c:"
"type:`PyLongObject`."

#: ../../c-api/long.rst:233
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *obj* выходит за пределы "
"диапазона для :c:expr:`long long`."

#: ../../c-api/long.rst:251
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Если значение *obj* больше, чем :c:macro:`LLONG_MAX` или меньше, чем :c:"
"macro:`LLONG_MIN`, установите для *\\*overflow* значение ``1`` или ``-1``, "
"соответственно и вернуть ``-1``; в противном случае установите для "
"*\\*overflow* значение ``0``. Если возникает какое-либо другое исключение, "
"установите *\\*overflow* в ``0`` и верните ``-1``, как обычно."

#: ../../c-api/long.rst:273
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:type:`Py_ssize_t`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:276
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:288
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long` представление *pylong*. *pylong* должен "
"быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:291
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`unsigned long`."

#: ../../c-api/long.rst:294
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:304
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:type:`size_t`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:307
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:type:`size_t`."

#: ../../c-api/long.rst:310
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(size_t)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:319
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long long` представление *pylong*. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:322
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`unsigned long long`."

#: ../../c-api/long.rst:325
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:328
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Отрицательный *pylong* теперь вызывает :exc:`OverflowError`, а не :exc:"
"`TypeError`."

#: ../../c-api/long.rst:334
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long` представление *obj*. Если *obj* не "
"является экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :"
"meth:`~object.__index__` (если он присутствует), чтобы преобразовать его в :"
"c:type:`PyLongObject`."

#: ../../c-api/long.rst:338
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Если значение *obj* выходит за пределы диапазона для :c:expr:`unsigned "
"long`, верните уменьшение этого значения по модулю ``ULONG_MAX + 1``."

#: ../../c-api/long.rst:341
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:353
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long long` представление *obj*. Если *obj* не "
"является экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :"
"meth:`~object.__index__` (если он присутствует), чтобы преобразовать его в :"
"c:type:`PyLongObject`."

#: ../../c-api/long.rst:358
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Если значение *obj* выходит за пределы диапазона для :c:expr:`unsigned long "
"long`, верните уменьшение этого значения по модулю ``ULLONG_MAX + 1``."

#: ../../c-api/long.rst:361
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Возвращает ``(unsigned long long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:374
msgid ""
"Set *\\*value* to a signed C :c:expr:`int32_t` or :c:expr:`int64_t` "
"representation of *obj*."
msgstr ""

#: ../../c-api/long.rst:377 ../../c-api/long.rst:397
msgid ""
"If *obj* is not an instance of :c:type:`PyLongObject`, first call its :meth:"
"`~object.__index__` method (if present) to convert it to a :c:type:"
"`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:381 ../../c-api/long.rst:402
msgid "If the *obj* value is out of range, raise an :exc:`OverflowError`."
msgstr ""

#: ../../c-api/long.rst:383 ../../c-api/long.rst:404
msgid ""
"Set *\\*value* and return ``0`` on success. Set an exception and return "
"``-1`` on error."
msgstr ""

#: ../../c-api/long.rst:386 ../../c-api/long.rst:407
msgid "*value* must not be ``NULL``."
msgstr ""

#: ../../c-api/long.rst:394
msgid ""
"Set *\\*value* to an unsigned C :c:expr:`uint32_t` or :c:expr:`uint64_t` "
"representation of *obj*."
msgstr ""

#: ../../c-api/long.rst:401
msgid "If *obj* is negative, raise a :exc:`ValueError`."
msgstr ""

#: ../../c-api/long.rst:414
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:expr:`double`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:417
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`double`."

#: ../../c-api/long.rst:420
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``-1.0`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:425
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Преобразуйте целое число Python *pylong* в указатель C :c:expr:`void`. Если "
"*pylong* невозможно преобразовать, будет выдано сообщение :exc:"
"`OverflowError`. Это гарантирует только создание полезного указателя :c:expr:"
"`void` для значений, созданных с помощью :c:func:`PyLong_FromVoidPtr`."

#: ../../c-api/long.rst:430
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``NULL`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:435
msgid ""
"Copy the Python integer value *pylong* to a native *buffer* of size "
"*n_bytes*. The *flags* can be set to ``-1`` to behave similarly to a C cast, "
"or to values documented below to control the behavior."
msgstr ""
"Скопируйте целочисленное значение Python *pylong* в собственный *буфер* "
"размером *n_bytes*. Для *флагов* можно установить значение ``-1``, чтобы "
"вести себя аналогично приведению C, или значения, описанные ниже, чтобы "
"контролировать поведение."

#: ../../c-api/long.rst:439
msgid ""
"Returns ``-1`` with an exception raised on error.  This may happen if "
"*pylong* cannot be interpreted as an integer, or if *pylong* was negative "
"and the ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` flag was set."
msgstr ""
"Возвращает ``-1`` с исключением, возникающим в случае ошибки. Это может "
"произойти, если *pylong* не может быть интерпретировано как целое число, или "
"если *pylong* было отрицательным и был установлен флаг "
"``Py_ASNATIVEBYTES_REJECT_NEGATIVE``."

#: ../../c-api/long.rst:443
msgid ""
"Otherwise, returns the number of bytes required to store the value. If this "
"is equal to or less than *n_bytes*, the entire value was copied. All "
"*n_bytes* of the buffer are written: large buffers are padded with zeroes."
msgstr ""
"В противном случае возвращает количество байтов, необходимое для хранения "
"значения. Если оно равно или меньше *n_bytes*, скопировано все значение. "
"Записываются все *n_байт* буфера: большие буферы дополняются нулями."

#: ../../c-api/long.rst:448
msgid ""
"If the returned value is greater than *n_bytes*, the value was truncated: as "
"many of the lowest bits of the value as could fit are written, and the "
"higher bits are ignored. This matches the typical behavior of a C-style "
"downcast."
msgstr ""

#: ../../c-api/long.rst:455
msgid ""
"Overflow is not considered an error. If the returned value is larger than "
"*n_bytes*, most significant bits were discarded."
msgstr ""
"Переполнение не считается ошибкой. Если возвращаемое значение превышает "
"*n_bytes*, наиболее значимые биты отбрасываются."

#: ../../c-api/long.rst:458
msgid "``0`` will never be returned."
msgstr "``0`` никогда не будет возвращен."

#: ../../c-api/long.rst:460
msgid "Values are always copied as two's-complement."
msgstr "Значения всегда копируются как дополнение до двух."

#: ../../c-api/long.rst:462
msgid "Usage example::"
msgstr "Пример использования::"

#: ../../c-api/long.rst:464
msgid ""
"int32_t value;\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), -1);\n"
"if (bytes < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"else if (bytes <= (Py_ssize_t)sizeof(value)) {\n"
"    // Success!\n"
"}\n"
"else {\n"
"    // Overflow occurred, but 'value' contains the truncated\n"
"    // lowest bits of pylong.\n"
"}"
msgstr ""
"int32_t value;\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), -1);\n"
"if (bytes < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"else if (bytes <= (Py_ssize_t)sizeof(value)) {\n"
"    // Success!\n"
"}\n"
"else {\n"
"    // Overflow occurred, but 'value' contains the truncated\n"
"    // lowest bits of pylong.\n"
"}"

#: ../../c-api/long.rst:478
msgid ""
"Passing zero to *n_bytes* will return the size of a buffer that would be "
"large enough to hold the value. This may be larger than technically "
"necessary, but not unreasonably so. If *n_bytes=0*, *buffer* may be ``NULL``."
msgstr ""
"Передача нуля в *n_bytes* вернет размер буфера, который будет достаточно "
"большим для хранения значения. Это может быть больше, чем технически "
"необходимо, но это не является необоснованным. Если *n_bytes=0*, *buffer* "
"может иметь значение ``NULL``."

#: ../../c-api/long.rst:485
msgid ""
"Passing *n_bytes=0* to this function is not an accurate way to determine the "
"bit length of the value."
msgstr ""
"Передача *n_bytes=0* в эту функцию не является точным способом определения "
"длины значения в битах."

#: ../../c-api/long.rst:488
msgid ""
"To get at the entire Python value of an unknown size, the function can be "
"called twice: first to determine the buffer size, then to fill it::"
msgstr ""
"Чтобы получить все значение Python неизвестного размера, функцию можно "
"вызвать дважды: сначала для определения размера буфера, затем для его "
"заполнения:"

#: ../../c-api/long.rst:491
msgid ""
"// Ask how much space we need.\n"
"Py_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\n"
"if (expected < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"assert(expected != 0);  // Impossible per the API definition.\n"
"uint8_t *bignum = malloc(expected);\n"
"if (!bignum) {\n"
"    PyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\n"
"    return NULL;\n"
"}\n"
"// Safely get the entire value.\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\n"
"if (bytes < 0) {  // Exception has been set.\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"else if (bytes > expected) {  // This should not be possible.\n"
"    PyErr_SetString(PyExc_RuntimeError,\n"
"        \"Unexpected bignum truncation after a size check.\");\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"// The expected success given the above pre-check.\n"
"// ... use bignum ...\n"
"free(bignum);"
msgstr ""
"// Ask how much space we need.\n"
"Py_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\n"
"if (expected < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"assert(expected != 0);  // Impossible per the API definition.\n"
"uint8_t *bignum = malloc(expected);\n"
"if (!bignum) {\n"
"    PyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\n"
"    return NULL;\n"
"}\n"
"// Safely get the entire value.\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\n"
"if (bytes < 0) {  // Exception has been set.\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"else if (bytes > expected) {  // This should not be possible.\n"
"    PyErr_SetString(PyExc_RuntimeError,\n"
"        \"Unexpected bignum truncation after a size check.\");\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"// The expected success given the above pre-check.\n"
"// ... use bignum ...\n"
"free(bignum);"

#: ../../c-api/long.rst:519
msgid ""
"*flags* is either ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``) to select defaults "
"that behave most like a C cast, or a combination of the other flags in the "
"table below. Note that ``-1`` cannot be combined with other flags."
msgstr ""
"*flags* — это либо ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``), чтобы выбрать "
"значения по умолчанию, которые ведут себя наиболее похоже на приведение C, "
"либо комбинацию других флагов в таблице ниже. Обратите внимание, что ``-1`` "
"нельзя комбинировать с другими флагами."

#: ../../c-api/long.rst:524
msgid ""
"Currently, ``-1`` corresponds to ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."
msgstr ""
"В настоящее время ``-1`` соответствует ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."

#: ../../c-api/long.rst:530
msgid "Flag"
msgstr "Флаг"

#: ../../c-api/long.rst:530
msgid "Value"
msgstr "Значение"

#: ../../c-api/long.rst:532
msgid "``-1``"
msgstr "``-1``"

#: ../../c-api/long.rst:533
msgid "``0``"
msgstr "``0``"

#: ../../c-api/long.rst:534
msgid "``1``"
msgstr "``1``"

#: ../../c-api/long.rst:535
msgid "``3``"
msgstr "``3``"

#: ../../c-api/long.rst:536
msgid "``4``"
msgstr "``4``"

#: ../../c-api/long.rst:537
msgid "``8``"
msgstr "``8``"

#: ../../c-api/long.rst:538
msgid "``16``"
msgstr "``16``"

#: ../../c-api/long.rst:541
msgid ""
"Specifying ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` will override any other endian "
"flags. Passing ``2`` is reserved."
msgstr ""
"Указание ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` переопределит любые другие флаги "
"с порядком байтов. Передача ``2`` зарезервирована."

#: ../../c-api/long.rst:544
msgid ""
"By default, sufficient buffer will be requested to include a sign bit. For "
"example, when converting 128 with *n_bytes=1*, the function will return 2 "
"(or more) in order to store a zero sign bit."
msgstr ""
"По умолчанию будет запрошен достаточный буфер для включения знакового бита. "
"Например, при преобразовании 128 с *n_bytes=1* функция вернет 2 (или более), "
"чтобы сохранить бит нулевого знака."

#: ../../c-api/long.rst:548
msgid ""
"If ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` is specified, a zero sign bit will "
"be omitted from size calculations. This allows, for example, 128 to fit in a "
"single-byte buffer. If the destination buffer is later treated as signed, a "
"positive input value may become negative. Note that the flag does not affect "
"handling of negative values: for those, space for a sign bit is always "
"requested."
msgstr ""
"Если указан Py_ASNATIVEBYTES_UNSIGNED_BUFFER, бит нулевого знака будет "
"опущен при расчете размера. Это позволяет, например, разместить 128 в "
"однобайтовом буфере. Если буфер назначения позже будет считаться "
"подписанным, положительное входное значение может стать отрицательным. "
"Обратите внимание, что этот флаг не влияет на обработку отрицательных "
"значений: для них всегда запрашивается место для знакового бита."

#: ../../c-api/long.rst:555
msgid ""
"Specifying ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` causes an exception to be "
"set if *pylong* is negative. Without this flag, negative values will be "
"copied provided there is enough space for at least one sign bit, regardless "
"of whether ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` was specified."
msgstr ""
"Указание ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` приводит к установке "
"исключения, если *pylong* имеет отрицательное значение. Без этого флага "
"отрицательные значения будут копироваться при условии, что достаточно места "
"хотя бы для одного знакового бита, независимо от того, был ли указан "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."

#: ../../c-api/long.rst:560
msgid ""
"If ``Py_ASNATIVEBYTES_ALLOW_INDEX`` is specified and a non-integer value is "
"passed, its :meth:`~object.__index__` method will be called first. This may "
"result in Python code executing and other threads being allowed to run, "
"which could cause changes to other objects or values in use. When *flags* is "
"``-1``, this option is not set, and non-integer values will raise :exc:"
"`TypeError`."
msgstr ""
"Если указан ``Py_ASNATIVEBYTES_ALLOW_INDEX`` и передано нецелое значение, "
"сначала будет вызван его метод :meth:`~object.__index__`. Это может привести "
"к выполнению кода Python и разрешению запуска других потоков, что может "
"привести к изменениям в других используемых объектах или значениях. Если "
"*flags* имеет значение ``-1``, эта опция не установлена, и нецелочисленные "
"значения будут вызывать :exc:`TypeError`."

#: ../../c-api/long.rst:569
msgid ""
"With the default *flags* (``-1``, or *UNSIGNED_BUFFER*  without "
"*REJECT_NEGATIVE*), multiple Python integers can map to a single value "
"without overflow. For example, both ``255`` and ``-1`` fit a single-byte "
"buffer and set all its bits. This matches typical C cast behavior."
msgstr ""
"При использовании *флагов* по умолчанию (``-1`` или *UNSIGNED_BUFFER* без "
"*REJECT_NEGATIVE*) несколько целых чисел Python могут сопоставляться с одним "
"значением без переполнения. Например, и ``255``, и ``-1`` соответствуют "
"однобайтовому буферу и устанавливают все его биты. Это соответствует "
"типичному поведению C."

#: ../../c-api/long.rst:580
msgid "Get the sign of the integer object *obj*."
msgstr ""

#: ../../c-api/long.rst:582
msgid ""
"On success, set *\\*sign* to the integer sign  (0, -1 or +1 for zero, "
"negative or positive integer, respectively) and return 0."
msgstr ""

#: ../../c-api/long.rst:585
msgid ""
"On failure, return -1 with an exception set.  This function always succeeds "
"if *obj* is a :c:type:`PyLongObject` or its subtype."
msgstr ""

#: ../../c-api/long.rst:593
msgid "Check if the integer object *obj* is positive (``obj > 0``)."
msgstr ""

#: ../../c-api/long.rst:595
msgid ""
"If *obj* is an instance of :c:type:`PyLongObject` or its subtype, return "
"``1`` when it's positive and ``0`` otherwise.  Else set an exception and "
"return ``-1``."
msgstr ""

#: ../../c-api/long.rst:604
msgid "Check if the integer object *obj* is negative (``obj < 0``)."
msgstr ""

#: ../../c-api/long.rst:606
msgid ""
"If *obj* is an instance of :c:type:`PyLongObject` or its subtype, return "
"``1`` when it's negative and ``0`` otherwise.  Else set an exception and "
"return ``-1``."
msgstr ""

#: ../../c-api/long.rst:615
msgid "Check if the integer object *obj* is zero."
msgstr ""

#: ../../c-api/long.rst:617
msgid ""
"If *obj* is an instance of :c:type:`PyLongObject` or its subtype, return "
"``1`` when it's zero and ``0`` otherwise.  Else set an exception and return "
"``-1``."
msgstr ""

#: ../../c-api/long.rst:626
msgid ""
"On success, return a read only :term:`named tuple`, that holds information "
"about Python's internal representation of integers. See :data:`sys.int_info` "
"for description of individual fields."
msgstr ""
"В случае успеха верните кортеж с именем, доступный только для чтения, "
"который содержит информацию о внутреннем представлении целых чисел в Python. "
"См. :data:`sys.int_info` для описания отдельных полей."

#: ../../c-api/long.rst:630
msgid "On failure, return ``NULL`` with an exception set."
msgstr "В случае неудачи верните NULL с установленным исключением."

#: ../../c-api/long.rst:637
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr "Возвращает 1, если *op* компактен, в противном случае — 0."

#: ../../c-api/long.rst:639
msgid ""
"This function makes it possible for performance-critical code to implement a "
"“fast path” for small integers. For compact values use :c:func:"
"`PyUnstable_Long_CompactValue`; for others fall back to a :c:func:"
"`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`PyLong_AsNativeBytes`."
msgstr ""
"Эта функция позволяет коду, критическому к производительности, реализовать "
"«быстрый путь» для небольших целых чисел. Для компактных значений "
"используйте :c:func:`PyUnstable_Long_CompactValue`; для других используйте "
"функцию :c:func:`PyLong_As* <PyLong_AsSize_t>` или :c:func:"
"`PyLong_AsNativeBytes`."

#: ../../c-api/long.rst:645
msgid "The speedup is expected to be negligible for most users."
msgstr ""
"Ожидается, что для большинства пользователей ускорение будет незначительным."

#: ../../c-api/long.rst:647
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr ""
"То, какие именно значения считаются компактными, является деталью реализации "
"и может быть изменено."

#: ../../c-api/long.rst:655
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr ""
"Если *op* компактен, как определено :c:func:`PyUnstable_Long_IsCompact`, "
"верните его значение."

#: ../../c-api/long.rst:658
msgid "Otherwise, the return value is undefined."
msgstr "В противном случае возвращаемое значение не определено."

#: ../../c-api/long.rst:664
msgid "Export API"
msgstr ""

#: ../../c-api/long.rst:670
msgid ""
"Layout of an array of \"digits\" (\"limbs\" in the GMP terminology), used to "
"represent absolute value for arbitrary precision integers."
msgstr ""

#: ../../c-api/long.rst:673
msgid ""
"Use :c:func:`PyLong_GetNativeLayout` to get the native layout of Python :"
"class:`int` objects, used internally for integers with \"big enough\" "
"absolute value."
msgstr ""

#: ../../c-api/long.rst:677
msgid ""
"See also :data:`sys.int_info` which exposes similar information in Python."
msgstr ""

#: ../../c-api/long.rst:681
msgid ""
"Bits per digit. For example, a 15 bit digit means that bits 0-14 contain "
"meaningful information."
msgstr ""

#: ../../c-api/long.rst:686
msgid ""
"Digit size in bytes. For example, a 15 bit digit will require at least 2 "
"bytes."
msgstr ""

#: ../../c-api/long.rst:691
msgid "Digits order:"
msgstr ""

#: ../../c-api/long.rst:693
msgid "``1`` for most significant digit first"
msgstr ""

#: ../../c-api/long.rst:694
msgid "``-1`` for least significant digit first"
msgstr ""

#: ../../c-api/long.rst:698
msgid "Digit endianness:"
msgstr ""

#: ../../c-api/long.rst:700
msgid "``1`` for most significant byte first (big endian)"
msgstr ""

#: ../../c-api/long.rst:701
msgid "``-1`` for least significant byte first (little endian)"
msgstr ""

#: ../../c-api/long.rst:706
msgid "Get the native layout of Python :class:`int` objects."
msgstr ""

#: ../../c-api/long.rst:708
msgid "See the :c:struct:`PyLongLayout` structure."
msgstr ""

#: ../../c-api/long.rst:710
msgid ""
"The function must not be called before Python initialization nor after "
"Python finalization. The returned layout is valid until Python is finalized. "
"The layout is the same for all Python sub-interpreters in a process, and so "
"it can be cached."
msgstr ""

#: ../../c-api/long.rst:718
msgid "Export of a Python :class:`int` object."
msgstr ""

#: ../../c-api/long.rst:720
msgid "There are two cases:"
msgstr ""

#: ../../c-api/long.rst:722
msgid ""
"If :c:member:`digits` is ``NULL``, only use the :c:member:`value` member."
msgstr ""

#: ../../c-api/long.rst:723
msgid ""
"If :c:member:`digits` is not ``NULL``, use :c:member:`negative`, :c:member:"
"`ndigits` and :c:member:`digits` members."
msgstr ""

#: ../../c-api/long.rst:728
msgid ""
"The native integer value of the exported :class:`int` object. Only valid if :"
"c:member:`digits` is ``NULL``."
msgstr ""

#: ../../c-api/long.rst:733
msgid ""
"``1`` if the number is negative, ``0`` otherwise. Only valid if :c:member:"
"`digits` is not ``NULL``."
msgstr ""

#: ../../c-api/long.rst:738
msgid ""
"Number of digits in :c:member:`digits` array. Only valid if :c:member:"
"`digits` is not ``NULL``."
msgstr ""

#: ../../c-api/long.rst:743
msgid "Read-only array of unsigned digits. Can be ``NULL``."
msgstr ""

#: ../../c-api/long.rst:748
msgid "Export a Python :class:`int` object."
msgstr ""

#: ../../c-api/long.rst:750
msgid ""
"*export_long* must point to a :c:struct:`PyLongExport` structure allocated "
"by the caller. It must not be ``NULL``."
msgstr ""

#: ../../c-api/long.rst:753
msgid ""
"On success, fill in *\\*export_long* and return ``0``. On error, set an "
"exception and return ``-1``."
msgstr ""

#: ../../c-api/long.rst:756
msgid ""
":c:func:`PyLong_FreeExport` must be called when the export is no longer "
"needed."
msgstr ""

#: ../../c-api/long.rst:760
msgid ""
"This function always succeeds if *obj* is a Python :class:`int` object or a "
"subclass."
msgstr ""

#: ../../c-api/long.rst:766
msgid "Release the export *export_long* created by :c:func:`PyLong_Export`."
msgstr ""

#: ../../c-api/long.rst:769
msgid ""
"Calling :c:func:`PyLong_FreeExport` is optional if *export_long->digits* is "
"``NULL``."
msgstr ""

#: ../../c-api/long.rst:774
msgid "PyLongWriter API"
msgstr ""

#: ../../c-api/long.rst:776
msgid "The :c:type:`PyLongWriter` API can be used to import an integer."
msgstr ""

#: ../../c-api/long.rst:782
msgid "A Python :class:`int` writer instance."
msgstr ""

#: ../../c-api/long.rst:784
msgid ""
"The instance must be destroyed by :c:func:`PyLongWriter_Finish` or :c:func:"
"`PyLongWriter_Discard`."
msgstr ""

#: ../../c-api/long.rst:790
msgid "Create a :c:type:`PyLongWriter`."
msgstr ""

#: ../../c-api/long.rst:792
msgid ""
"On success, allocate *\\*digits* and return a writer. On error, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../c-api/long.rst:795
msgid "*negative* is ``1`` if the number is negative, or ``0`` otherwise."
msgstr ""

#: ../../c-api/long.rst:797
msgid ""
"*ndigits* is the number of digits in the *digits* array. It must be greater "
"than 0."
msgstr ""

#: ../../c-api/long.rst:800
msgid "*digits* must not be NULL."
msgstr ""

#: ../../c-api/long.rst:802
msgid ""
"After a successful call to this function, the caller should fill in the "
"array of digits *digits* and then call :c:func:`PyLongWriter_Finish` to get "
"a Python :class:`int`. The layout of *digits* is described by :c:func:"
"`PyLong_GetNativeLayout`."
msgstr ""

#: ../../c-api/long.rst:807
msgid ""
"Digits must be in the range [``0``; ``(1 << bits_per_digit) - 1``] (where "
"the :c:struct:`~PyLongLayout.bits_per_digit` is the number of bits per "
"digit). Any unused most significant digits must be set to ``0``."
msgstr ""

#: ../../c-api/long.rst:812
msgid ""
"Alternately, call :c:func:`PyLongWriter_Discard` to destroy the writer "
"instance without creating an :class:`~int` object."
msgstr ""

#: ../../c-api/long.rst:818
msgid ""
"Finish a :c:type:`PyLongWriter` created by :c:func:`PyLongWriter_Create`."
msgstr ""

#: ../../c-api/long.rst:820
msgid ""
"On success, return a Python :class:`int` object. On error, set an exception "
"and return ``NULL``."
msgstr ""

#: ../../c-api/long.rst:823
msgid ""
"The function takes care of normalizing the digits and converts the object to "
"a compact integer if needed."
msgstr ""

#: ../../c-api/long.rst:826 ../../c-api/long.rst:835
msgid "The writer instance and the *digits* array are invalid after the call."
msgstr ""

#: ../../c-api/long.rst:831
msgid ""
"Discard a :c:type:`PyLongWriter` created by :c:func:`PyLongWriter_Create`."
msgstr ""

#: ../../c-api/long.rst:833
msgid "If *writer* is ``NULL``, no operation is performed."
msgstr ""

#: ../../c-api/long.rst:8
msgid "object"
msgstr "объект"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "длинное целое число"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "целое число"

#: ../../c-api/long.rst:166
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (C макрос)"

#: ../../c-api/long.rst:166 ../../c-api/long.rst:226 ../../c-api/long.rst:269
#: ../../c-api/long.rst:284 ../../c-api/long.rst:300 ../../c-api/long.rst:316
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (встроенное исключение )"

#: ../../c-api/long.rst:269
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (C макрос)"

#: ../../c-api/long.rst:284
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (C макрос)"

#: ../../c-api/long.rst:300
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (C макрос)"
