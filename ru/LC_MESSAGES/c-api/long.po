# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Jon Britva, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Целочисленные объекты"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Все целые числа реализованы как «длинные» целочисленные объекты "
"произвольного размера."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"В случае ошибки большинство API PyLong_As* возвращают ``(return type)-1``, "
"который невозможно отличить от числа. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Этот подтип :c:type:`PyObject` представляет собой целочисленный объект "
"Python."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Этот экземпляр :c:type:`PyTypeObject` представляет целочисленный тип Python. "
"Это тот же объект, что и :class:`int` на уровне Python."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyLongObject` или "
"подтип :c:type:`PyLongObject`. Эта функция всегда завершается успешно."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyLongObject`, но не "
"подтип :c:type:`PyLongObject`. Эта функция всегда завершается успешно."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из *v* или ``NULL`` в случае "
"ошибки."

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"Текущая реализация сохраняет массив целочисленных объектов для всех целых "
"чисел от «-5» до «256». Когда вы создаете int в этом диапазоне, вы "
"фактически просто получаете ссылку на существующий объект."

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:expr:`unsigned long` "
"или ``NULL`` в случае неудачи."

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:type:`Py_ssize_t` или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:type:`size_t` или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Возвращает новый объект :c:type:`PyLongObject` из C :c:expr:`long long` или "
"``NULL`` в случае неудачи."

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из C :c:expr:`unsigned long "
"long` или ``NULL`` в случае неудачи."

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Вернуть новый объект :c:type:`PyLongObject` из целочисленной части *v* или "
"``NULL`` в случае ошибки."

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""

#: ../../c-api/long.rst:96
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""
"Методы Python :meth:`int.to_bytes` и :meth:`int.from_bytes` для "
"преобразования :c:type:`PyLongObject` в/из массива байтов в базе ``256``. Вы "
"можете вызвать их из C, используя :c:func:`PyObject_CallMethod`."

#: ../../c-api/long.rst:103
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Преобразуйте последовательность цифр Юникода в строке *u* в целочисленное "
"значение Python."

#: ../../c-api/long.rst:111
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Создайте целое число Python из указателя *p*. Значение указателя можно "
"получить из полученного значения с помощью :c:func:`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:122 ../../c-api/long.rst:140
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`long` представление *obj*. Если *obj* не является "
"экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :meth:"
"`~object.__index__` (если он присутствует), чтобы преобразовать его в :c:"
"type:`PyLongObject`."

#: ../../c-api/long.rst:126
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *obj* выходит за пределы "
"диапазона для :c:expr:`long`."

#: ../../c-api/long.rst:129 ../../c-api/long.rst:149 ../../c-api/long.rst:170
#: ../../c-api/long.rst:190 ../../c-api/long.rst:213
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``-1`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` для "
"устранения неоднозначности."

#: ../../c-api/long.rst:131 ../../c-api/long.rst:151 ../../c-api/long.rst:172
#: ../../c-api/long.rst:194 ../../c-api/long.rst:278 ../../c-api/long.rst:298
msgid "Use :meth:`~object.__index__` if available."
msgstr "Используйте :meth:`~object.__index__`, если доступно."

#: ../../c-api/long.rst:134 ../../c-api/long.rst:154 ../../c-api/long.rst:175
#: ../../c-api/long.rst:197 ../../c-api/long.rst:281 ../../c-api/long.rst:301
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "Эта функция больше не будет использовать :meth:`~object.__int__`."

#: ../../c-api/long.rst:144
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Если значение *obj* больше, чем :c:macro:`LONG_MAX` или меньше, чем :c:macro:"
"`LONG_MIN`, установите для *\\*overflow* значение ``1`` или ``-1``, "
"соответственно и вернуть ``-1``; в противном случае установите для "
"*\\*overflow* значение ``0``. Если возникает какое-либо другое исключение, "
"установите *\\*overflow* в ``0`` и верните ``-1``, как обычно."

#: ../../c-api/long.rst:163 ../../c-api/long.rst:181
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`long long` представление *obj*. Если *obj* не является "
"экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :meth:"
"`~object.__index__` (если он присутствует), чтобы преобразовать его в :c:"
"type:`PyLongObject`."

#: ../../c-api/long.rst:167
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *obj* выходит за пределы "
"диапазона для :c:expr:`long long`."

#: ../../c-api/long.rst:185
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Если значение *obj* больше, чем :c:macro:`LLONG_MAX` или меньше, чем :c:"
"macro:`LLONG_MIN`, установите для *\\*overflow* значение ``1`` или ``-1``, "
"соответственно и вернуть ``-1``; в противном случае установите для "
"*\\*overflow* значение ``0``. Если возникает какое-либо другое исключение, "
"установите *\\*overflow* в ``0`` и верните ``-1``, как обычно."

#: ../../c-api/long.rst:207
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:type:`Py_ssize_t`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:210
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:222
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long` представление *pylong*. *pylong* должен "
"быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:225
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`unsigned long`."

#: ../../c-api/long.rst:228
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:238
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:type:`size_t`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:241
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:type:`size_t`."

#: ../../c-api/long.rst:244
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(size_t)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:253
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long long` представление *pylong*. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:256
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"Вызовите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`unsigned long long`."

#: ../../c-api/long.rst:259
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:262
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Отрицательный *pylong* теперь вызывает :exc:`OverflowError`, а не :exc:"
"`TypeError`."

#: ../../c-api/long.rst:268
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long` представление *obj*. Если *obj* не "
"является экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :"
"meth:`~object.__index__` (если он присутствует), чтобы преобразовать его в :"
"c:type:`PyLongObject`."

#: ../../c-api/long.rst:272
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Если значение *obj* выходит за пределы диапазона для :c:expr:`unsigned "
"long`, верните уменьшение этого значения по модулю ``ULONG_MAX + 1``."

#: ../../c-api/long.rst:275
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Возвращает ``(unsigned long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:287
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Возвращает C :c:expr:`unsigned long long` представление *obj*. Если *obj* не "
"является экземпляром :c:type:`PyLongObject`, сначала вызовите его метод :"
"meth:`~object.__index__` (если он присутствует), чтобы преобразовать его в :"
"c:type:`PyLongObject`."

#: ../../c-api/long.rst:292
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Если значение *obj* выходит за пределы диапазона для :c:expr:`unsigned long "
"long`, верните уменьшение этого значения по модулю ``ULLONG_MAX + 1``."

#: ../../c-api/long.rst:295
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Возвращает ``(unsigned long long)-1`` в случае ошибки. Используйте :c:func:"
"`PyErr_Occurred` для устранения неоднозначности."

#: ../../c-api/long.rst:307
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Возвращает представление *pylong* на языке C :c:expr:`double`. *pylong* "
"должен быть экземпляром :c:type:`PyLongObject`."

#: ../../c-api/long.rst:310
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"Поднимите :exc:`OverflowError`, если значение *pylong* выходит за пределы "
"диапазона для :c:expr:`double`."

#: ../../c-api/long.rst:313
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``-1.0`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:318
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Преобразуйте целое число Python *pylong* в указатель C :c:expr:`void`. Если "
"*pylong* невозможно преобразовать, будет выдано сообщение :exc:"
"`OverflowError`. Это гарантирует только создание полезного указателя :c:expr:"
"`void` для значений, созданных с помощью :c:func:`PyLong_FromVoidPtr`."

#: ../../c-api/long.rst:323
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Возвращает ``NULL`` в случае ошибки. Используйте :c:func:`PyErr_Occurred` "
"для устранения неоднозначности."

#: ../../c-api/long.rst:8
msgid "object"
msgstr "объект"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "длинное целое число"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "целое число"

#: ../../c-api/long.rst:118
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (C макрос)"

#: ../../c-api/long.rst:118 ../../c-api/long.rst:160 ../../c-api/long.rst:203
#: ../../c-api/long.rst:218 ../../c-api/long.rst:234 ../../c-api/long.rst:250
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (встроенное исключение )"

#: ../../c-api/long.rst:203
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (C макрос)"

#: ../../c-api/long.rst:218
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (C макрос)"

#: ../../c-api/long.rst:234
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (C макрос)"
