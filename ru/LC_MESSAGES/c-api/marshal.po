# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "Поддержка маршалинга данных"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"Эти процедуры позволяют коду C работать с сериализованными объектами, "
"используя тот же формат данных, что и модуль :mod:`marshal`. Существуют "
"функции для записи данных в формат сериализации и дополнительные функции, "
"которые можно использовать для обратного чтения данных. Файлы, используемые "
"для хранения маршаллированных данных, должны открываться в двоичном режиме."

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "Числовые значения сохраняются начиная с младшего байта."

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating-point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""
"Модуль поддерживает две версии формата данных: версия 0 — историческая "
"версия, версия 1 — совместно используемые строки в файле и при "
"демаршаллинге. Версия 2 использует двоичный формат для чисел с плавающей "
"запятой. ``Py_MARSHAL_VERSION`` указывает текущий формат файла (в настоящее "
"время 2)."

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""
"Маршалирует целое число :c:expr:`long`, *значение*, в *файл*. При этом будут "
"записаны только наименее значимые 32 бита *значения*; независимо от размера "
"собственного типа :c:expr:`long`. *версия* указывает формат файла."

#: ../../c-api/marshal.rst:28 ../../c-api/marshal.rst:36
msgid ""
"This function can fail, in which case it sets the error indicator. Use :c:"
"func:`PyErr_Occurred` to check for that."
msgstr ""
"Эта функция может дать сбой, и в этом случае она устанавливает индикатор "
"ошибки. Используйте :c:func:`PyErr_Occurred`, чтобы проверить это."

#: ../../c-api/marshal.rst:33
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""
"Маршалирует объект Python *value* в *file*. *версия* указывает формат файла."

#: ../../c-api/marshal.rst:41
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""
"Возвращает объект bytes, содержащий маршаллированное представление *value*. "
"*версия* указывает формат файла."

#: ../../c-api/marshal.rst:45
msgid "The following functions allow marshalled values to be read back in."
msgstr ""
"Следующие функции позволяют считывать обратно маршалированные значения."

#: ../../c-api/marshal.rst:50
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""
"Возвращает C :c:expr:`long` из потока данных в :c:expr:`FILE*`, открытом для "
"чтения. С помощью этой функции можно прочитать только 32-битное значение, "
"независимо от собственного размера :c:expr:`long`."

#: ../../c-api/marshal.rst:54 ../../c-api/marshal.rst:64
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""
"В случае ошибки устанавливает соответствующее исключение (:exc:`EOFError`) и "
"возвращает ``-1``."

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""
"Возвращает C :c:expr:`short` из потока данных в :c:expr:`FILE*`, открытом "
"для чтения. С помощью этой функции можно прочитать только 16-битное "
"значение, независимо от собственного размера :c:expr:`short`."

#: ../../c-api/marshal.rst:70
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr ""
"Возвращает объект Python из потока данных в :c:expr:`FILE*`, открытом для "
"чтения."

#: ../../c-api/marshal.rst:73 ../../c-api/marshal.rst:87
#: ../../c-api/marshal.rst:96
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"В случае ошибки устанавливает соответствующее исключение (:exc:`EOFError`, :"
"exc:`ValueError` или :exc:`TypeError`) и возвращает ``NULL``."

#: ../../c-api/marshal.rst:79
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""
"Возвращает объект Python из потока данных в :c:expr:`FILE*`, открытом для "
"чтения. В отличие от :c:func:`PyMarshal_ReadObjectFromFile`, эта функция "
"предполагает, что никакие дальнейшие объекты не будут считываться из файла, "
"что позволяет ей агрессивно загружать данные файла в память, чтобы "
"десериализация могла работать с данными в памяти, а не с чтением байта. "
"одновременно из файла. Используйте этот вариант только в том случае, если вы "
"уверены, что больше ничего не будете читать из файла."

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"Возвращает объект Python из потока данных в байтовом буфере, содержащем "
"*len* байт, на который указывает *data*."
