# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "Объекты словаря"

#: ../../c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr "Этот подтип :c:type:`PyObject` представляет объект словаря Python."

#: ../../c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"Этот экземпляр :c:type:`PyTypeObject` представляет тип словаря Python. Это "
"тот же объект, что и :class:`dict` на уровне Python."

#: ../../c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом dict или экземпляром подтипа "
"типа dict. Эта функция всегда завершается успешно."

#: ../../c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the "
"dict type.  This function always succeeds."
msgstr ""
"Возвращайте true, если *p* является объектом dict, но не экземпляром подтипа "
"типа dict. Эта функция всегда завершается успешно."

#: ../../c-api/dict.rst:36
msgid "Return a new empty dictionary, or ``NULL`` on failure."
msgstr "Вернуть новый пустой словарь или ``NULL`` в случае ошибки."

#: ../../c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which enforces "
"read-only behavior.  This is normally used to create a view to prevent "
"modification of the dictionary for non-dynamic class types."
msgstr ""
"Возвращает объект :class:`types.MappingProxyType` для сопоставления, которое "
"обеспечивает поведение только для чтения. Обычно это используется для "
"создания представления, предотвращающего изменение словаря для "
"нединамических типов классов."

#: ../../c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr "Очистите существующий словарь от всех пар ключ-значение."

#: ../../c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""
"Определите, содержит ли словарь *p* *key*. Если элемент в *p* соответствует "
"*key*, верните ``1``, в противном случае верните ``0``. В случае ошибки "
"верните ``-1``. Это эквивалентно выражению Python ``key in p``."

#: ../../c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr "Верните новый словарь, содержащий те же пары ключ-значение, что и *p*."

#: ../../c-api/dict.rst:65
msgid ""
"Insert *val* into the dictionary *p* with a key of *key*.  *key* must be :"
"term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0`` "
"on success or ``-1`` on failure.  This function *does not* steal a reference "
"to *val*."
msgstr ""
"Вставьте *val* в словарь *p* с ключом *key*. *ключ* должен быть :term:"
"`hashable`; если это не так, будет выдано :exc:`TypeError`. Возвращайте "
"``0`` в случае успеха или ``-1`` в случае неудачи. Эта функция *не* крадет "
"ссылку на *val*."

#: ../../c-api/dict.rst:75
msgid ""
"Insert *val* into the dictionary *p* using *key* as a key. *key* should be "
"a :c:type:`const char*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on "
"failure.  This function *does not* steal a reference to *val*."
msgstr ""

#: ../../c-api/dict.rst:83
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be hashable; "
"if it isn't, :exc:`TypeError` is raised. If *key* is not in the dictionary, :"
"exc:`KeyError` is raised. Return ``0`` on success or ``-1`` on failure."
msgstr ""

#: ../../c-api/dict.rst:91
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the string "
"*key*. If *key* is not in the dictionary, :exc:`KeyError` is raised. Return "
"``0`` on success or ``-1`` on failure."
msgstr ""

#: ../../c-api/dict.rst:98
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return "
"``NULL`` if the key *key* is not present, but *without* setting an exception."
msgstr ""
"Вернуть объект из словаря *p*, у которого есть ключ *key*. Возвращает "
"``NULL``, если ключ *key* отсутствует, но *без* установки исключения."

#: ../../c-api/dict.rst:101
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and :meth:"
"`__eq__` methods will get suppressed. To get error reporting use :c:func:"
"`PyDict_GetItemWithError()` instead."
msgstr ""

#: ../../c-api/dict.rst:108
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return ``NULL`` **with** an exception set if an exception occurred.  Return "
"``NULL`` **without** an exception set if the key wasn't present."
msgstr ""
"Вариант :c:func:`PyDict_GetItem`, который не подавляет исключения. "
"Возвращает ``NULL`` **с** установленным исключением, если исключение "
"произошло. Верните ``NULL`` **без** установленного исключения, если ключ "
"отсутствовал."

#: ../../c-api/dict.rst:116
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a :c:"
"type:`const char*`, rather than a :c:type:`PyObject*`."
msgstr ""

#: ../../c-api/dict.rst:119
msgid ""
"Note that exceptions which occur while calling :meth:`__hash__` and :meth:"
"`__eq__` methods and creating a temporary string object will get suppressed. "
"To get error reporting use :c:func:`PyDict_GetItemWithError()` instead."
msgstr ""

#: ../../c-api/dict.rst:127
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If present, "
"it returns the value corresponding to *key* from the dictionary *p*.  If the "
"key is not in the dict, it is inserted with value *defaultobj* and "
"*defaultobj* is returned.  This function evaluates the hash function of "
"*key* only once, instead of evaluating it independently for the lookup and "
"the insertion."
msgstr ""
"Это то же самое, что и :meth:`dict.setdefault` уровня Python. Если он "
"присутствует, он возвращает значение, соответствующее *key* из словаря *p*. "
"Если ключа нет в словаре, он вставляется со значением *defaultobj* и "
"возвращается *defaultobj*. Эта функция оценивает хэш-функцию *key* только "
"один раз, вместо того, чтобы оценивать ее независимо для поиска и вставки."

#: ../../c-api/dict.rst:137
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the dictionary."
msgstr "Верните :c:type:`PyListObject`, содержащий все элементы из словаря."

#: ../../c-api/dict.rst:142
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr "Верните :c:type:`PyListObject`, содержащий все ключи из словаря."

#: ../../c-api/dict.rst:147
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr ""
"Возвращает :c:type:`PyListObject`, содержащий все значения из словаря *p*."

#: ../../c-api/dict.rst:155
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr ""
"Возвращает количество элементов в словаре. Это эквивалентно ``len(p)`` в "
"словаре."

#: ../../c-api/dict.rst:161
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The :c:type:"
"`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` prior to the "
"first call to this function to start the iteration; the function returns "
"true for each pair in the dictionary, and false once all pairs have been "
"reported.  The parameters *pkey* and *pvalue* should either point to :c:type:"
"`PyObject*` variables that will be filled in with each key and value, "
"respectively, or may be ``NULL``.  Any references returned through them are "
"borrowed.  *ppos* should not be altered during iteration. Its value "
"represents offsets within the internal dictionary structure, and since the "
"structure is sparse, the offsets are not consecutive."
msgstr ""

#: ../../c-api/dict.rst:172
msgid "For example::"
msgstr "Например::"

#: ../../c-api/dict.rst:182
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""
"Словарь *p* не должен изменяться во время итерации. Можно безопасно изменять "
"значения ключей при переборе словаря, но только до тех пор, пока набор "
"ключей не изменится. Например::"

#: ../../c-api/dict.rst:207
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a* "
"will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success "
"or ``-1`` if an exception was raised."
msgstr ""
"Перебрать объект сопоставления *b*, добавив пары ключ-значение в словарь "
"*a*. *b* может быть словарем или любым объектом, поддерживающим :c:func:"
"`PyMapping_Keys` и :c:func:`PyObject_GetItem`. Если *override* имеет "
"значение true, существующие пары в *a* будут заменены, если соответствующий "
"ключ найден в *b*, в противном случае пары будут добавлены только в том "
"случае, если в *a* нет соответствующего ключа. Возвращайте ``0`` в случае "
"успеха или ``-1``, если возникло исключение."

#: ../../c-api/dict.rst:217
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to ``a."
"update(b)`` in Python except that :c:func:`PyDict_Update` doesn't fall back "
"to the iterating over a sequence of key value pairs if the second argument "
"has no \"keys\" attribute.  Return ``0`` on success or ``-1`` if an "
"exception was raised."
msgstr ""
"Это то же самое, что ``PyDict_Merge(a, b, 1)`` в C и аналогично ``a."
"update(b)`` в Python, за исключением того, что :c:func:`PyDict_Update` не "
"падает. вернемся к итерации по последовательности пар ключ-значение, если "
"второй аргумент не имеет атрибута «ключи». Возвращайте ``0`` в случае успеха "
"или ``-1``, если возникло исключение."

#: ../../c-api/dict.rst:226
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return value)::"
msgstr ""
"Обновите или объедините словарь *a* из пар ключ-значение в *seq2*. *seq2* "
"должен быть итерируемым объектом, создающим итерируемые объекты длиной 2, "
"рассматриваемые как пары ключ-значение. В случае дубликатов ключей "
"выигрывает последний, если *override* истинно, в противном случае выигрывает "
"первый. Возвращайте ``0`` в случае успеха или ``-1``, если возникло "
"исключение. Эквивалент Python (за исключением возвращаемого значения)::"
