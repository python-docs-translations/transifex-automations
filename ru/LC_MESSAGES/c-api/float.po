# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/float.rst:6
msgid "Floating-Point Objects"
msgstr "Объекты с плавающей запятой"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating-point object."
msgstr ""
"Этот подтип :c:type:` PyObject` представляет объект Python с плавающей "
"запятой."

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating-point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Этот экземпляр :c:type:`PyTypeObject` представляет тип Python с плавающей "
"запятой. Это тот же объект, что и :class:`float` на уровне Python."

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyFloatObject` или "
"подтип :c:type:`PyFloatObject`. Эта функция всегда завершается успешно."

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Возвращает true, если его аргументом является :c:type:`PyFloatObject`, но не "
"подтип :c:type:`PyFloatObject`. Эта функция всегда завершается успешно."

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Создайте объект :c:type:`PyFloatObject` на основе строкового значения в "
"*str* или ``NULL`` в случае ошибки."

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Создайте объект :c:type:`PyFloatObject` из *v* или ``NULL`` в случае неудачи."

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating-point object but has a :meth:`~object."
"__float__` method, this method will first be called to convert *pyfloat* "
"into a float. If :meth:`!__float__` is not defined then it falls back to :"
"meth:`~object.__index__`. This method returns ``-1.0`` upon failure, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"Возвращает C :c:expr:`double` представление содержимого *pyfloat*. Если "
"*pyfloat* не является объектом Python с плавающей запятой, но имеет метод :"
"meth:`~object.__float__`, этот метод сначала будет вызван для преобразования "
"*pyfloat* в число с плавающей запятой. Если :meth:`!__float__` не определен, "
"то он возвращается к :meth:`~object.__index__`. Этот метод возвращает "
"``-1.0`` в случае сбоя, поэтому следует вызвать :c:func:`PyErr_Occurred` для "
"проверки на наличие ошибок."

#: ../../c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr "Используйте :meth:`~object.__index__`, если доступно."

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""
"Вернуть C :c:expr:`double` представление содержимого *pyfloat*, но без "
"проверки ошибок."

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Возвращает экземпляр structseq, который содержит информацию о точности, "
"минимальном и максимальном значениях числа с плавающей запятой. Это тонкая "
"оболочка вокруг заголовочного файла :file:`float.h`."

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""
"Верните максимально представимое конечное число с плавающей запятой "
"*DBL_MAX* как C :c:expr:`double`."

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""
"Верните минимальное нормализованное положительное число с плавающей запятой "
"*DBL_MIN* как C :c:expr:`double`."

#: ../../c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr "Функции упаковки и распаковки"

#: ../../c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"Функции упаковки и распаковки предоставляют эффективный, независимый от "
"платформы способ хранения значений с плавающей запятой в виде байтовых "
"строк. Подпрограммы Pack создают строку байтов из C :c:expr:`double`, а "
"процедуры Unpack создают C :c:expr:`double` из такой строки байтов. Суффикс "
"(2, 4 или 8) указывает количество байтов в строке байтов."

#: ../../c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""
"На платформах, которые используют форматы IEEE 754, эти функции работают "
"путем копирования битов. На других платформах 2-байтовый формат идентичен "
"формату половинной точности двоичный16 IEEE 754, 4-байтовый формат (32-"
"битный) идентичен формату одинарной точности двоичный32 IEEE 754, а 8-"
"байтовый формат — формату одинарной точности. Формат двойной точности IEEE "
"754binary64, хотя упаковка INF и NaN (если такие вещи существуют на "
"платформе) не обрабатывается правильно, и попытка распаковать строку байтов, "
"содержащую IEEE INF или NaN, вызовет исключение."

#: ../../c-api/float.rst:99
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"На платформах, отличных от IEEE, с большей точностью или большим "
"динамическим диапазоном, чем поддерживает IEEE 754, не все значения могут "
"быть упакованы; на платформах, отличных от IEEE, с меньшей точностью или "
"меньшим динамическим диапазоном, не все значения могут быть распакованы. То, "
"что происходит в таких случаях, отчасти случайно (увы)."

#: ../../c-api/float.rst:107
msgid "Pack functions"
msgstr "Функции пакета"

#: ../../c-api/float.rst:109
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:macro:"
"`PY_BIG_ENDIAN` constant can be used to use the native endian: it is equal "
"to ``1`` on big endian processor, or ``0`` on little endian processor."
msgstr ""
"Подпрограммы пакета записывают 2, 4 или 8 байтов, начиная с *p*. *le* — это "
"аргумент :c:expr:`int`, ненулевой, если вы хотите, чтобы строка байтов была "
"в формате с прямым порядком байтов (последняя экспонента, в ``p+1``, "
"``p+3``, или ``p+6`` ``p+7``), ноль, если вам нужен формат с прямым порядком "
"байтов (сначала показатель степени, *p*). Константу :c:macro:`PY_BIG_ENDIAN` "
"можно использовать для использования собственного порядка байтов: она равна "
"``1`` на процессоре с прямым порядком байтов или ``0`` на процессоре с "
"прямым порядком байтов."

#: ../../c-api/float.rst:116
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"Возвращаемое значение: ``0``, если все в порядке, ``-1``, если ошибка (и "
"установлено исключение, скорее всего :exc:`OverflowError`)."

#: ../../c-api/float.rst:119
msgid "There are two problems on non-IEEE platforms:"
msgstr "На платформах, отличных от IEEE, есть две проблемы:"

#: ../../c-api/float.rst:121
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr ""
"Что это делает, не определено, если *x* является NaN или бесконечностью."

#: ../../c-api/float.rst:122
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0.0`` и ``+0.0`` создают одну и ту же строку байтов."

#: ../../c-api/float.rst:126
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""
"Упакуйте C-двойник в качестве двоичного формата IEEE 754 с половинной "
"точностью16."

#: ../../c-api/float.rst:130
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr "Упакуйте C double как формат одинарной точности IEEE 754binary32."

#: ../../c-api/float.rst:134
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr "Упакуйте C double в формат двойной точности IEEE 754binary64."

#: ../../c-api/float.rst:138
msgid "Unpack functions"
msgstr "Распаковать функции"

#: ../../c-api/float.rst:140
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant can "
"be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""
"Подпрограммы распаковки считывают 2, 4 или 8 байт, начиная с *p*. *le* — это "
"аргумент :c:expr:`int`, ненулевой, если строка байтов имеет формат с прямым "
"порядком байтов (последний показатель степени, ``p+1``, ``p+3`` или `` "
"`p+6`` и ``p+7``), ноль, если обратный порядок байтов (сначала показатель "
"степени, *p*). Константу :c:macro:`PY_BIG_ENDIAN` можно использовать для "
"использования собственного порядка байтов: она равна ``1`` на процессоре с "
"прямым порядком байтов или ``0`` на процессоре с прямым порядком байтов."

#: ../../c-api/float.rst:147
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""
"Возвращаемое значение: распакованный двойной. В случае ошибки это ``-1.0`` "
"и :c:func:`PyErr_Occurred` истинно (и устанавливается исключение, скорее "
"всего :exc:`OverflowError`)."

#: ../../c-api/float.rst:151
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""
"Обратите внимание, что на платформе, отличной от IEEE, будет отказано в "
"распаковке строки байтов, которая представляет NaN или бесконечность."

#: ../../c-api/float.rst:156
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr "Распакуйте формат половинной точности IEEE 754binary16 как двойной C."

#: ../../c-api/float.rst:160
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr "Распакуйте формат одинарной точности IEEE 754binary32 как двойной C."

#: ../../c-api/float.rst:164
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr "Распакуйте формат двойной точности IEEE 754binary64 как двойной C."

#: ../../c-api/float.rst:8
msgid "object"
msgstr "объект"

#: ../../c-api/float.rst:8
msgid "floating-point"
msgstr "плавающая точка"
