# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr "Преобразование и форматирование строк"

#: ../../c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr "Функции для преобразования чисел и вывода форматированных строк."

#: ../../c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page :manpage:"
"`snprintf(3)`."
msgstr ""
"Выведите не более *size* байт в *str* в соответствии со строкой формата "
"*format* и дополнительными аргументами. См. справочную страницу Unix :"
"manpage:`snprintf(3)`."

#: ../../c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page :manpage:"
"`vsnprintf(3)`."
msgstr ""
"Выведите не более *size* байт в *str* в соответствии со строкой формата "
"*format* и списком переменных аргументов *va*. Справочная страница Unix:"
"manpage:`vsnprintf(3)`."

#: ../../c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""
":c:func:`PyOS_snprintf` и :c:func:`PyOS_vsnprintf` оборачивают функции "
"стандартной библиотеки C :c:func:`snprintf` и :c:func:`vsnprintf`. Их цель — "
"гарантировать согласованное поведение в крайних случаях, чего не делают "
"стандартные функции C."

#: ../../c-api/conversion.rst:28
msgid ""
"The wrappers ensure that ``str[size-1]`` is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'``) "
"into str. Both functions require that ``str != NULL``, ``size > 0``, "
"``format != NULL`` and ``size < INT_MAX``. Note that this means there is no "
"equivalent to the C99 ``n = snprintf(NULL, 0, ...)`` which would determine "
"the necessary buffer size."
msgstr ""
"Обертки гарантируют, что ``str[size-1]`` всегда будет ``'\\0'`` при "
"возврате. Они никогда не записывают в str более *size* байт (включая "
"завершающий ``'\\0'``). Обе функции требуют, чтобы ``str != NULL``, ``size > "
"0``, ``format != NULL`` и ``size < INT_MAX``. Обратите внимание, что это "
"означает, что не существует эквивалента C99 ``n = snprintf(NULL, 0, ...)``, "
"который бы определял необходимый размер буфера."

#: ../../c-api/conversion.rst:34
msgid ""
"The return value (*rv*) for these functions should be interpreted as follows:"
msgstr ""
"Возвращаемое значение (*rv*) для этих функций следует интерпретировать "
"следующим образом:"

#: ../../c-api/conversion.rst:36
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"``str[rv]``)."
msgstr ""
"Когда ``0 <= rv < size``, выходное преобразование прошло успешно и символы "
"*rv* были записаны в *str* (за исключением завершающего байта ``'\\0'`` в "
"``str[rv]`` )."

#: ../../c-api/conversion.rst:40
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. ``str[size-1]`` is "
"``'\\0'`` in this case."
msgstr ""
"Когда ``rv >= size``, выходное преобразование было усечено, и для успеха "
"потребовался бы буфер с ``rv + 1`` байтами. ``str[size-1]`` в данном случае "
"равен ``'\\0'``."

#: ../../c-api/conversion.rst:44
msgid ""
"When ``rv < 0``, \"something bad happened.\" ``str[size-1]`` is ``'\\0'`` in "
"this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""
"Когда ``rv < 0``, «произошло что-то плохое». ``str[size-1]`` в этом случае "
"тоже ``'\\0'``, но остальная часть *str* не определена. Точная причина "
"ошибки зависит от базовой платформы."

#: ../../c-api/conversion.rst:49
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr ""
"Следующие функции обеспечивают преобразование строк в число, не зависящее от "
"локали."

#: ../../c-api/conversion.rst:53
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`unsigned "
"long` value according to the given ``base``, which must be between ``2`` and "
"``36`` inclusive, or be the special value ``0``."
msgstr ""
"Преобразуйте начальную часть строки в ``str`` в значение :c:expr:`unsigned "
"long` в соответствии с заданной ``базой``, которая должна быть между ``2`` и "
"``36`` включительно или иметь специальное значение ``0``."

#: ../../c-api/conversion.rst:57
msgid ""
"Leading white space and case of characters are ignored.  If ``base`` is zero "
"it looks for a leading ``0b``, ``0o`` or ``0x`` to tell which base.  If "
"these are absent it defaults to ``10``.  Base must be 0 or between 2 and 36 "
"(inclusive).  If ``ptr`` is non-``NULL`` it will contain a pointer to the "
"end of the scan."
msgstr ""
"Ведущие пробелы и регистр символов игнорируются. Если ``base`` равно нулю, "
"он ищет ведущие ``0b``, ``0o`` или ``0x``, чтобы определить, какая база. "
"Если они отсутствуют, по умолчанию используется значение «10». Базовое "
"значение должно быть 0 или от 2 до 36 (включительно). Если ``ptr`` не равен "
"``NULL``, он будет содержать указатель на конец сканирования."

#: ../../c-api/conversion.rst:63
msgid ""
"If the converted value falls out of range of corresponding return type, "
"range error occurs (:c:data:`errno` is set to :c:macro:`!ERANGE`) and :c:"
"macro:`!ULONG_MAX` is returned.  If no conversion can be performed, ``0`` is "
"returned."
msgstr ""
"Если преобразованное значение выходит за пределы диапазона соответствующего "
"возвращаемого типа, возникает ошибка диапазона (:c:data:`errno` "
"устанавливается в :c:macro:`!ERANGE`) и возвращается :c:macro:`!ULONG_MAX` . "
"Если преобразование невозможно выполнить, возвращается ``0``."

#: ../../c-api/conversion.rst:68
msgid "See also the Unix man page :manpage:`strtoul(3)`."
msgstr "См. также справочную страницу Unix :manpage:`strtoul(3)`."

#: ../../c-api/conversion.rst:75
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`long` value "
"according to the given ``base``, which must be between ``2`` and ``36`` "
"inclusive, or be the special value ``0``."
msgstr ""
"Преобразуйте начальную часть строки в ``str`` в значение :c:expr:`long` в "
"соответствии с заданной ``базой``, которая должна находиться в диапазоне от "
"``2`` до ``36`` включительно. или быть специальным значением ``0``."

#: ../../c-api/conversion.rst:79
msgid ""
"Same as :c:func:`PyOS_strtoul`, but return a :c:expr:`long` value instead "
"and :c:macro:`LONG_MAX` on overflows."
msgstr ""
"То же, что и :c:func:`PyOS_strtoul`, но вместо этого возвращает значение :c:"
"expr:`long` и :c:macro:`LONG_MAX` при переполнении."

#: ../../c-api/conversion.rst:82
msgid "See also the Unix man page :manpage:`strtol(3)`."
msgstr "См. также справочную страницу Unix :manpage:`strtol(3)`."

#: ../../c-api/conversion.rst:89
msgid ""
"Convert a string ``s`` to a :c:expr:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""
"Преобразуйте строку ``s`` в :c:expr:`double`, вызывая исключение Python в "
"случае сбоя. Набор принимаемых строк соответствует набору строк, принимаемых "
"конструктором Python :func:`float`, за исключением того, что ``s`` не должен "
"иметь начальных или конечных пробелов. Преобразование не зависит от текущей "
"локали."

#: ../../c-api/conversion.rst:95
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise :exc:"
"`ValueError` and return ``-1.0`` if the string is not a valid representation "
"of a floating-point number."
msgstr ""
"Если ``endptr`` равен ``NULL``, преобразуйте всю строку. Поднимите :exc:"
"`ValueError` и верните ``-1.0``, если строка не является допустимым "
"представлением числа с плавающей запятой."

#: ../../c-api/conversion.rst:99
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set "
"``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""
"Если endptr не NULL, преобразуйте как можно большую часть строки и "
"установите ``*endptr`` так, чтобы он указывал на первый непреобразованный "
"символ. Если ни один из начальных сегментов строки не является допустимым "
"представлением числа с плавающей запятой, установите ``*endptr`` так, чтобы "
"он указывал на начало строки, вызовите ValueError и верните ``-1.0``."

#: ../../c-api/conversion.rst:106
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""
"Если ``s`` представляет собой значение, которое слишком велико для хранения "
"в виде числа с плавающей запятой (например, ``\"1e500\"`` является такой "
"строкой на многих платформах), то если ``overflow_Exception`` равно ``NULL`` "
"верните ``Py_HUGE_VAL`` (с соответствующим знаком) и не устанавливайте "
"никаких исключений. В противном случае overflow_Exception должен указывать "
"на объект исключения Python; вызовите это исключение и верните ``-1.0``. В "
"обоих случаях установите ``*endptr`` так, чтобы он указывал на первый символ "
"после преобразованного значения."

#: ../../c-api/conversion.rst:114
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""
"Если во время преобразования возникает какая-либо другая ошибка (например, "
"ошибка нехватки памяти), установите соответствующее исключение Python и "
"верните ``-1.0``."

#: ../../c-api/conversion.rst:123
msgid ""
"Convert a :c:expr:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""
"Преобразуйте :c:expr:`double` *val* в строку, используя предоставленные "
"*format_code*, *precision* и *flags*."

#: ../../c-api/conversion.rst:126
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` format."
msgstr ""
"*format_code* должен быть одним из ``'e'``, ``'E'``, ``'f'``, ``'F'``, "
"``'g'``, ``' G'`` или ``'r'``. Для ``'r'`` указанная *точность* должна быть "
"равна 0 и игнорируется. Код формата ``'r'`` определяет стандартный формат :"
"func:`repr`."

#: ../../c-api/conversion.rst:131
msgid ""
"*flags* can be zero or more of the values ``Py_DTSF_SIGN``, "
"``Py_DTSF_ADD_DOT_0``, or ``Py_DTSF_ALT``, or-ed together:"
msgstr ""
"*flags* может быть нулевым или более значений ``Py_DTSF_SIGN``, "
"``Py_DTSF_ADD_DOT_0`` или ``Py_DTSF_ALT``, или объединенных вместе:"

#: ../../c-api/conversion.rst:134
msgid ""
"``Py_DTSF_SIGN`` means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""
"``Py_DTSF_SIGN`` означает, что возвращаемой строке всегда предшествует знак, "
"даже если *val* неотрицательно."

#: ../../c-api/conversion.rst:137
msgid ""
"``Py_DTSF_ADD_DOT_0`` means to ensure that the returned string will not look "
"like an integer."
msgstr ""
"``Py_DTSF_ADD_DOT_0`` означает, что возвращаемая строка не будет выглядеть "
"как целое число."

#: ../../c-api/conversion.rst:140
msgid ""
"``Py_DTSF_ALT`` means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""
"``Py_DTSF_ALT`` означает применение «альтернативных» правил форматирования. "
"Подробности смотрите в документации по спецификатору :c:func:"
"`PyOS_snprintf```#'``."

#: ../../c-api/conversion.rst:144
msgid ""
"If *ptype* is non-``NULL``, then the value it points to will be set to one "
"of ``Py_DTST_FINITE``, ``Py_DTST_INFINITE``, or ``Py_DTST_NAN``, signifying "
"that *val* is a finite number, an infinite number, or not a number, "
"respectively."
msgstr ""
"Если *ptype* не NULL, то значение, на которое он указывает, будет "
"установлено в одно из Py_DTST_FINITE, Py_DTST_INFINITE или Py_DTST_NAN, что "
"означает, что *val* конечное число, бесконечное число или не число "
"соответственно."

#: ../../c-api/conversion.rst:148
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"``NULL`` if the conversion failed. The caller is responsible for freeing the "
"returned string by calling :c:func:`PyMem_Free`."
msgstr ""
"Возвращаемое значение — это указатель на *buffer* с преобразованной строкой "
"или ``NULL``, если преобразование не удалось. Вызывающая сторона отвечает за "
"освобождение возвращаемой строки, вызывая :c:func:`PyMem_Free`."

#: ../../c-api/conversion.rst:157
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strcmp` except that it ignores the case."
msgstr ""
"Сравнение строк без учета регистра. Функция работает почти идентично :c:func:"
"`!strcmp`, за исключением того, что она игнорирует регистр."

#: ../../c-api/conversion.rst:163
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strncmp` except that it ignores the case."
msgstr ""
"Сравнение строк без учета регистра. Функция работает почти идентично :c:func:"
"`!strncmp`, за исключением того, что она игнорирует регистр."
