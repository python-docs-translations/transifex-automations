# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-16 17:23+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Слабые эталонные объекты"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python поддерживает *слабые ссылки* как первоклассные объекты. Существует "
"два конкретных типа объектов, которые напрямую реализуют слабые ссылки. "
"Первый представляет собой простой ссылочный объект, а второй действует как "
"прокси исходного объекта, насколько это возможно."

#: ../../c-api/weakref.rst:16
msgid ""
"Return non-zero if *ob* is either a reference or proxy object.  This "
"function always succeeds."
msgstr ""
"Возвращает ненулевое значение, если *ob* является ссылкой или прокси-"
"объектом. Эта функция всегда завершается успешно."

#: ../../c-api/weakref.rst:22
msgid ""
"Return non-zero if *ob* is a reference object.  This function always "
"succeeds."
msgstr ""
"Возвращает ненулевое значение, если *ob* является ссылочным объектом. Эта "
"функция всегда завершается успешно."

#: ../../c-api/weakref.rst:27
msgid ""
"Return non-zero if *ob* is a proxy object.  This function always succeeds."
msgstr ""
"Возвращает ненулевое значение, если *ob* является прокси-объектом. Эта "
"функция всегда завершается успешно."

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referenceable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Возвращает объект слабой ссылки для объекта *ob*. Это всегда будет "
"возвращать новую ссылку, но не гарантируется создание нового объекта; может "
"быть возвращен существующий ссылочный объект. Второй параметр, *callback*, "
"может быть вызываемым объектом, который получает уведомление, когда *ob* "
"собирается мусор; он должен принимать один параметр, который будет самим "
"объектом слабой ссылки. *callback* также может быть ``None`` или ``NULL``. "
"Если *ob* не является объектом со слабой ссылкой или если *callback* не "
"вызывается, ``None`` или ``NULL``, это вернет ``NULL`` и "
"вызовет :exc:`TypeError`."

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referenceable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Возвращает прокси-объект слабой ссылки для объекта *ob*. Это всегда будет "
"возвращать новую ссылку, но не гарантируется создание нового объекта; может "
"быть возвращен существующий прокси-объект. Второй параметр, *callback*, "
"может быть вызываемым объектом, который получает уведомление, когда *ob* "
"собирается мусор; он должен принимать один параметр, который будет самим "
"объектом слабой ссылки. *callback* также может быть ``None`` или ``NULL``. "
"Если *ob* не является объектом со слабой ссылкой или если *callback* не "
"вызывается, ``None`` или ``NULL``, это вернет ``NULL`` и "
"вызовет :exc:`TypeError`."

#: ../../c-api/weakref.rst:56
msgid ""
"Get a :term:`strong reference` to the referenced object from a weak "
"reference, *ref*, into *\\*pobj*."
msgstr ""
"Получите :term:`сильную ссылку` на объект, на который ссылаетесь, из слабой "
"ссылки *ref* в *\\*pobj*."

#: ../../c-api/weakref.rst:59
msgid ""
"On success, set *\\*pobj* to a new :term:`strong reference` to the "
"referenced object and return 1."
msgstr ""
"В случае успеха установите для *\\*pobj* новую :term:`strong ссылку` на "
"объект, на который ссылаетесь, и верните 1."

#: ../../c-api/weakref.rst:61
msgid "If the reference is dead, set *\\*pobj* to ``NULL`` and return 0."
msgstr ""
"Если ссылка мертва, установите для *\\*pobj* значение ``NULL`` и верните 0."

#: ../../c-api/weakref.rst:62
msgid "On error, raise an exception and return -1."
msgstr "В случае ошибки вызвать исключение и вернуть -1."

#: ../../c-api/weakref.rst:69
msgid ""
"Return a :term:`borrowed reference` to the referenced object from a weak "
"reference, *ref*.  If the referent is no longer live, returns ``Py_None``."
msgstr ""
"Возвращает :term:`заимствованную ссылку` на объект, на который ссылается, из "
"слабой ссылки *ref*. Если референт больше не активен, возвращается Py_None."

#: ../../c-api/weakref.rst:74
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Эта функция возвращает заимствованную ссылку на объект, на который "
"ссылается. Это означает, что вы всегда должны вызывать :c:func:`Py_INCREF` "
"для объекта, за исключением случаев, когда он не может быть уничтожен до "
"последнего использования заимствованной ссылки."

#: ../../c-api/weakref.rst:79 ../../c-api/weakref.rst:87
msgid "Use :c:func:`PyWeakref_GetRef` instead."
msgstr "Вместо этого используйте :c:func:`PyWeakref_GetRef`."

#: ../../c-api/weakref.rst:85
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr ""
"Аналогично :c:func:`PyWeakref_GetObject`, но не выполняет проверку ошибок."

#: ../../c-api/weakref.rst:93
msgid ""
"Test if the weak reference *ref* is dead. Returns 1 if the reference is "
"dead, 0 if it is alive, and -1 with an error set if *ref* is not a weak "
"reference object."
msgstr ""

#: ../../c-api/weakref.rst:102
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""
"Эта функция вызывается обработчиком :c:member:`~PyTypeObject.tp_dealloc` для "
"очистки слабых ссылок."

#: ../../c-api/weakref.rst:105
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""
"Это перебирает слабые ссылки для *object* и вызывает обратные вызовы для тех "
"ссылок, у которых они есть. Он возвращается, когда были предприняты все "
"попытки обратного вызова."

#: ../../c-api/weakref.rst:112
msgid "Clears the weakrefs for *object* without calling the callbacks."
msgstr "Очищает слабые ссылки для *object* без вызова обратных вызовов."

#: ../../c-api/weakref.rst:114
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"for types with finalizers (i.e., :meth:`~object.__del__`).  The handler for "
"those objects first calls :c:func:`PyObject_ClearWeakRefs` to clear weakrefs "
"and call their callbacks, then the finalizer, and finally this function to "
"clear any weakrefs that may have been created by the finalizer."
msgstr ""
"Эта функция вызывается обработчиком :c:member:`~PyTypeObject.tp_dealloc` для "
"типов с финализаторами (т. е. :meth:`~object.__del__`). Обработчик этих "
"объектов сначала вызывает :c:func:` PyObj ect_ClearWeakRefs`, чтобы очистить "
"слабые ссылки и вызвать их обратные вызовы, затем финализатор и, наконец, "
"эту функцию, чтобы очистить все слабые ссылки, которые могли быть созданы "
"финализатором."

#: ../../c-api/weakref.rst:120
msgid ""
"In most circumstances, it's more appropriate to "
"use :c:func:`PyObject_ClearWeakRefs` to clear weakrefs instead of this "
"function."
msgstr ""
"В большинстве случаев для очистки слабых ссылок более уместно "
"использовать :c:func:` PyObj ect_ClearWeakRefs` вместо этой функции."
