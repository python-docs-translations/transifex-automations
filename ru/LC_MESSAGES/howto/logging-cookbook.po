# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../howto/logging-cookbook.rst:5
msgid "Logging Cookbook"
msgstr "Кулинарная книга по логированию"

#: ../../howto/logging-cookbook.rst:0
msgid "Author"
msgstr "Автор"

#: ../../howto/logging-cookbook.rst:7
msgid "Vinay Sajip <vinay_sajip at red-dove dot com>"
msgstr "Винай Саджип <vinay_sajip на red-dove dot com>"

#: ../../howto/logging-cookbook.rst:9
msgid ""
"This page contains a number of recipes related to logging, which have been "
"found useful in the past. For links to tutorial and reference information, "
"please see :ref:`cookbook-ref-links`."
msgstr ""
"Эта страница содержит ряд рецептов, связанных с ведением журнала, которые "
"были признаны полезными в прошлом. Ссылки на учебные пособия и справочную "
"информацию можно найти в разделе :ref:`cookbook-ref-links`."

#: ../../howto/logging-cookbook.rst:16
msgid "Using logging in multiple modules"
msgstr "Использование входа в несколько модулей"

#: ../../howto/logging-cookbook.rst:18
msgid ""
"Multiple calls to ``logging.getLogger('someLogger')`` return a reference to "
"the same logger object.  This is true not only within the same module, but "
"also across modules as long as it is in the same Python interpreter "
"process.  It is true for references to the same object; additionally, "
"application code can define and configure a parent logger in one module and "
"create (but not configure) a child logger in a separate module, and all "
"logger calls to the child will pass up to the parent.  Here is a main "
"module::"
msgstr ""
"Множественные вызовы logging.getLogger('someLogger') возвращают ссылку на "
"один и тот же объект журнала. Это справедливо не только в пределах одного и "
"того же модуля, но и между модулями, если они находятся в одном и том же "
"процессе интерпретатора Python. Это верно для ссылок на один и тот же "
"объект; кроме того, код приложения может определить и настроить родительский "
"регистратор в одном модуле и создать (но не настроить) дочерний регистратор "
"в отдельном модуле, и все вызовы дочернего регистратора будут передаваться "
"родительскому. Вот основной модуль:"

#: ../../howto/logging-cookbook.rst:56
msgid "Here is the auxiliary module::"
msgstr "Вот вспомогательный модуль::"

#: ../../howto/logging-cookbook.rst:76
msgid "The output looks like this:"
msgstr "Вывод выглядит следующим образом:"

#: ../../howto/logging-cookbook.rst:102
msgid "Logging from multiple threads"
msgstr "Ведение журнала из нескольких потоков"

#: ../../howto/logging-cookbook.rst:104
msgid ""
"Logging from multiple threads requires no special effort. The following "
"example shows logging from the main (initial) thread and another thread::"
msgstr ""
"Ведение журнала из нескольких потоков не требует особых усилий. В следующем "
"примере показано ведение журнала из основного (начального) потока и другого "
"потока::"

#: ../../howto/logging-cookbook.rst:133
msgid "When run, the script should print something like the following:"
msgstr "При запуске скрипт должен напечатать что-то вроде следующего:"

#: ../../howto/logging-cookbook.rst:155
msgid ""
"This shows the logging output interspersed as one might expect. This "
"approach works for more threads than shown here, of course."
msgstr ""
"Это показывает, что выходные данные журнала чередуются, как и следовало "
"ожидать. Конечно, этот подход работает для большего количества потоков, чем "
"показано здесь."

#: ../../howto/logging-cookbook.rst:159
msgid "Multiple handlers and formatters"
msgstr "Несколько обработчиков и форматтеров"

#: ../../howto/logging-cookbook.rst:161
msgid ""
"Loggers are plain Python objects.  The :meth:`~Logger.addHandler` method has "
"no minimum or maximum quota for the number of handlers you may add.  "
"Sometimes it will be beneficial for an application to log all messages of "
"all severities to a text file while simultaneously logging errors or above "
"to the console.  To set this up, simply configure the appropriate handlers.  "
"The logging calls in the application code will remain unchanged.  Here is a "
"slight modification to the previous simple module-based configuration "
"example::"
msgstr ""
"Регистраторы — это простые объекты Python. Метод :meth:`~Logger.addHandler` "
"не имеет минимальной или максимальной квоты на количество добавляемых "
"обработчиков. Иногда приложению будет полезно записывать все сообщения всех "
"уровней серьезности в текстовый файл, одновременно регистрируя ошибки или "
"выше на консоли. Чтобы это настроить, просто настройте соответствующие "
"обработчики. Вызовы журналирования в коде приложения останутся неизменными. "
"Вот небольшая модификация предыдущего примера простой конфигурации на основе "
"модуля:"

#: ../../howto/logging-cookbook.rst:194
msgid ""
"Notice that the 'application' code does not care about multiple handlers.  "
"All that changed was the addition and configuration of a new handler named "
"*fh*."
msgstr ""
"Обратите внимание, что код «приложения» не заботится о нескольких "
"обработчиках. Все, что изменилось, — это добавление и настройка нового "
"обработчика с именем *fh*."

#: ../../howto/logging-cookbook.rst:197
msgid ""
"The ability to create new handlers with higher- or lower-severity filters "
"can be very helpful when writing and testing an application.  Instead of "
"using many ``print`` statements for debugging, use ``logger.debug``: Unlike "
"the print statements, which you will have to delete or comment out later, "
"the logger.debug statements can remain intact in the source code and remain "
"dormant until you need them again.  At that time, the only change that needs "
"to happen is to modify the severity level of the logger and/or handler to "
"debug."
msgstr ""
"Возможность создавать новые обработчики с фильтрами более высокой или низкой "
"важности может оказаться очень полезной при написании и тестировании "
"приложения. Вместо использования множества операторов print для отладки "
"используйте logger.debug: в отличие от операторов печати, которые вам "
"придется удалить или закомментировать позже, операторы logger.debug могут "
"остаться нетронутыми в исходном коде. и оставаться бездействующими до тех "
"пор, пока они вам снова не понадобятся. В этот момент единственное "
"изменение, которое необходимо сделать, — это изменить уровень серьезности "
"средства ведения журнала и/или обработчика для отладки."

#: ../../howto/logging-cookbook.rst:208
msgid "Logging to multiple destinations"
msgstr ""
"Возможность создавать новые обработчики с фильтрами более высокой или низкой "
"важности может оказаться очень полезной при написании и тестировании "
"приложения. Вместо использования множества операторов print для отладки "
"используйте logger.debug: в отличие от операторов печати, которые вам "
"придется удалить или закомментировать позже, операторы logger.debug могут "
"остаться нетронутыми в исходном коде. и оставаться бездействующими до тех "
"пор, пока они вам снова не понадобятся. В этот момент единственное "
"изменение, которое необходимо сделать, — это изменить уровень серьезности "
"средства ведения журнала и/или обработчика для отладки."

#: ../../howto/logging-cookbook.rst:210
msgid ""
"Let's say you want to log to console and file with different message formats "
"and in differing circumstances. Say you want to log messages with levels of "
"DEBUG and higher to file, and those messages at level INFO and higher to the "
"console. Let's also assume that the file should contain timestamps, but the "
"console messages should not. Here's how you can achieve this::"
msgstr ""
"Допустим, вы хотите войти в консоль и файл с разными форматами сообщений и в "
"разных обстоятельствах. Допустим, вы хотите регистрировать сообщения с "
"уровнем DEBUG и выше в файле, а сообщения с уровнем INFO и выше — на "
"консоли. Предположим также, что файл должен содержать метки времени, а "
"сообщения консоли — нет. Вот как вы можете этого добиться:"

#: ../../howto/logging-cookbook.rst:248
msgid "When you run this, on the console you will see"
msgstr "Когда вы запустите это, на консоли вы увидите"

#: ../../howto/logging-cookbook.rst:257
msgid "and in the file you will see something like"
msgstr "и в файле вы увидите что-то вроде"

#: ../../howto/logging-cookbook.rst:267
msgid ""
"As you can see, the DEBUG message only shows up in the file. The other "
"messages are sent to both destinations."
msgstr ""
"Как видите, сообщение DEBUG отображается только в файле. Остальные сообщения "
"отправляются в оба места назначения."

#: ../../howto/logging-cookbook.rst:270
msgid ""
"This example uses console and file handlers, but you can use any number and "
"combination of handlers you choose."
msgstr ""
"В этом примере используются обработчики консоли и файлов, но вы можете "
"использовать любое количество и комбинацию обработчиков по вашему выбору."

#: ../../howto/logging-cookbook.rst:273
msgid ""
"Note that the above choice of log filename ``/tmp/myapp.log`` implies use of "
"a standard location for temporary files on POSIX systems. On Windows, you "
"may need to choose a different directory name for the log - just ensure that "
"the directory exists and that you have the permissions to create and update "
"files in it."
msgstr ""
"Обратите внимание, что приведенный выше выбор имени файла журнала ``/tmp/"
"myapp.log`` подразумевает использование стандартного местоположения для "
"временных файлов в системах POSIX. В Windows вам может потребоваться выбрать "
"другое имя каталога для журнала — просто убедитесь, что каталог существует и "
"что у вас есть разрешения на создание и обновление файлов в нем."

#: ../../howto/logging-cookbook.rst:282
msgid "Custom handling of levels"
msgstr "Пользовательская обработка уровней"

#: ../../howto/logging-cookbook.rst:284
msgid ""
"Sometimes, you might want to do something slightly different from the "
"standard handling of levels in handlers, where all levels above a threshold "
"get processed by a handler. To do this, you need to use filters. Let's look "
"at a scenario where you want to arrange things as follows:"
msgstr ""
"Иногда вам может потребоваться сделать что-то немного отличное от "
"стандартной обработки уровней в обработчиках, где все уровни выше порогового "
"значения обрабатываются обработчиком. Для этого нужно использовать фильтры. "
"Давайте рассмотрим сценарий, в котором вы хотите организовать все следующим "
"образом:"

#: ../../howto/logging-cookbook.rst:289
msgid "Send messages of severity ``INFO`` and ``WARNING`` to ``sys.stdout``"
msgstr ""
"Отправлять сообщения серьезности ``INFO`` и ``WARNING`` в ``sys.stdout``."

#: ../../howto/logging-cookbook.rst:290
msgid "Send messages of severity ``ERROR`` and above to ``sys.stderr``"
msgstr ""
"Отправлять сообщения уровня серьезности ``ERROR`` и выше в ``sys.stderr``."

#: ../../howto/logging-cookbook.rst:291
msgid "Send messages of severity ``DEBUG`` and above to file ``app.log``"
msgstr ""
"Отправлять сообщения уровня серьезности ``DEBUG`` и выше в файл ``app.log``."

#: ../../howto/logging-cookbook.rst:293
msgid "Suppose you configure logging with the following JSON:"
msgstr ""
"Предположим, вы настраиваете ведение журнала с помощью следующего JSON:"

#: ../../howto/logging-cookbook.rst:335
msgid ""
"This configuration does *almost* what we want, except that ``sys.stdout`` "
"would show messages of severity ``ERROR`` and above as well as ``INFO`` and "
"``WARNING`` messages. To prevent this, we can set up a filter which excludes "
"those messages and add it to the relevant handler. This can be configured by "
"adding a ``filters`` section parallel to ``formatters`` and ``handlers``:"
msgstr ""
"Эта конфигурация делает *почти* то, что мы хотим, за исключением того, что "
"``sys.stdout`` будет отображать сообщения уровня ``ERROR`` и выше, а также "
"сообщения ``INFO`` и ``WARNING``. Чтобы предотвратить это, мы можем "
"настроить фильтр, исключающий эти сообщения, и добавить его в "
"соответствующий обработчик. Это можно настроить, добавив раздел ``filters`` "
"параллельно с ``formatters`` и ``handlers``:"

#: ../../howto/logging-cookbook.rst:352
msgid "and changing the section on the ``stdout`` handler to add it:"
msgstr "и изменив раздел обработчика ``stdout``, чтобы добавить его:"

#: ../../howto/logging-cookbook.rst:366
msgid ""
"A filter is just a function, so we can define the ``filter_maker`` (a "
"factory function) as follows:"
msgstr ""
"Фильтр — это просто функция, поэтому мы можем определить "
"«filter_maker» (фабричную функцию) следующим образом:"

#: ../../howto/logging-cookbook.rst:379
msgid ""
"This converts the string argument passed in to a numeric level, and returns "
"a function which only returns ``True`` if the level of the passed in record "
"is at or below the specified level. Note that in this example I have defined "
"the ``filter_maker`` in a test script ``main.py`` that I run from the "
"command line, so its module will be ``__main__`` - hence the ``__main__."
"filter_maker`` in the filter configuration. You will need to change that if "
"you define it in a different module."
msgstr ""
"Это преобразует переданный строковый аргумент в числовой уровень и "
"возвращает функцию, которая возвращает ``True`` только в том случае, если "
"уровень переданной записи находится на указанном уровне или ниже. Обратите "
"внимание, что в этом примере я определил ``filter_maker`` в тестовом скрипте "
"``main.py``, который запускаю из командной строки, поэтому его модулем будет "
"``__main__`` - отсюда и ``__main__\". filter_maker`` в конфигурации фильтра. "
"Вам нужно будет изменить это, если вы определите его в другом модуле."

#: ../../howto/logging-cookbook.rst:387
msgid "With the filter added, we can run ``main.py``, which in full is:"
msgstr ""
"Добавив фильтр, мы можем запустить ``main.py``, который полностью будет "
"выглядеть так:"

#: ../../howto/logging-cookbook.rst:457
msgid "And after running it like this:"
msgstr "И после запуска вот так:"

#: ../../howto/logging-cookbook.rst:463
msgid "We can see the results are as expected:"
msgstr "Мы видим, что результаты соответствуют ожиданиям:"

#: ../../howto/logging-cookbook.rst:489
msgid "Configuration server example"
msgstr "Пример сервера конфигурации"

#: ../../howto/logging-cookbook.rst:491
msgid "Here is an example of a module using the logging configuration server::"
msgstr "Вот пример модуля, использующего сервер конфигурации журналирования:"

#: ../../howto/logging-cookbook.rst:522
msgid ""
"And here is a script that takes a filename and sends that file to the "
"server, properly preceded with the binary-encoded length, as the new logging "
"configuration::"
msgstr ""
"А вот сценарий, который принимает имя файла и отправляет этот файл на "
"сервер, которому предшествует длина в двоичном коде, в качестве новой "
"конфигурации журналирования:"

#: ../../howto/logging-cookbook.rst:547
msgid "Dealing with handlers that block"
msgstr "Работа с обработчиками, которые блокируют"

#: ../../howto/logging-cookbook.rst:551
msgid ""
"Sometimes you have to get your logging handlers to do their work without "
"blocking the thread you're logging from. This is common in web applications, "
"though of course it also occurs in other scenarios."
msgstr ""
"Иногда вам нужно заставить обработчики журналирования выполнять свою работу, "
"не блокируя поток, из которого вы регистрируетесь. Это часто встречается в "
"веб-приложениях, хотя, конечно, встречается и в других сценариях."

#: ../../howto/logging-cookbook.rst:555
msgid ""
"A common culprit which demonstrates sluggish behaviour is the :class:"
"`SMTPHandler`: sending emails can take a long time, for a number of reasons "
"outside the developer's control (for example, a poorly performing mail or "
"network infrastructure). But almost any network-based handler can block: "
"Even a :class:`SocketHandler` operation may do a DNS query under the hood "
"which is too slow (and this query can be deep in the socket library code, "
"below the Python layer, and outside your control)."
msgstr ""
"Распространенной причиной медленного поведения является :class:"
"`SMTPHandler`: отправка электронных писем может занять много времени по ряду "
"причин, не зависящих от разработчика (например, плохая работа почтовой или "
"сетевой инфраструктуры). Но почти любой сетевой обработчик может "
"блокировать: даже операция :class:`SocketHandler` может выполнять слишком "
"медленный DNS-запрос (и этот запрос может находиться глубоко в коде "
"библиотеки сокетов, ниже уровня Python, и вне вашего контроля)."

#: ../../howto/logging-cookbook.rst:563
msgid ""
"One solution is to use a two-part approach. For the first part, attach only "
"a :class:`QueueHandler` to those loggers which are accessed from performance-"
"critical threads. They simply write to their queue, which can be sized to a "
"large enough capacity or initialized with no upper bound to their size. The "
"write to the queue will typically be accepted quickly, though you will "
"probably need to catch the :exc:`queue.Full` exception as a precaution in "
"your code. If you are a library developer who has performance-critical "
"threads in their code, be sure to document this (together with a suggestion "
"to attach only ``QueueHandlers`` to your loggers) for the benefit of other "
"developers who will use your code."
msgstr ""
"Одним из решений является использование двухэтапного подхода. В первой части "
"прикрепите только :class:`QueueHandler` к тем логгерам, к которым обращаются "
"из потоков, критичных к производительности. Они просто пишут в свою очередь, "
"размер которой может быть достаточно большим или инициализироваться без "
"верхней границы ее размера. Запись в очередь обычно принимается быстро, хотя "
"вам, вероятно, придется перехватить исключение :exc:`queue.Full` в качестве "
"меры предосторожности в вашем коде. Если вы разработчик библиотек, в коде "
"которых есть потоки, критичные к производительности, обязательно "
"задокументируйте это (вместе с предложением прикреплять к вашим "
"регистраторам только QueueHandlers) для пользы других разработчиков, которые "
"будут использовать ваш код."

#: ../../howto/logging-cookbook.rst:574
msgid ""
"The second part of the solution is :class:`QueueListener`, which has been "
"designed as the counterpart to :class:`QueueHandler`.  A :class:"
"`QueueListener` is very simple: it's passed a queue and some handlers, and "
"it fires up an internal thread which listens to its queue for LogRecords "
"sent from ``QueueHandlers`` (or any other source of ``LogRecords``, for that "
"matter). The ``LogRecords`` are removed from the queue and passed to the "
"handlers for processing."
msgstr ""
"Вторая часть решения — :class:`QueueListener`, который был разработан как "
"аналог :class:`QueueHandler`. :class:`QueueListener` очень прост: он "
"передает очередь и несколько обработчиков и запускает внутренний поток, "
"который прослушивает свою очередь на предмет LogRecords, отправленных из "
"``QueueHandlers`` (или любого другого источника ``LogRecords`) ', если уж на "
"то пошло). LogRecords удаляются из очереди и передаются обработчикам для "
"обработки."

#: ../../howto/logging-cookbook.rst:582
msgid ""
"The advantage of having a separate :class:`QueueListener` class is that you "
"can use the same instance to service multiple ``QueueHandlers``. This is "
"more resource-friendly than, say, having threaded versions of the existing "
"handler classes, which would eat up one thread per handler for no particular "
"benefit."
msgstr ""
"Преимущество наличия отдельного класса :class:`QueueListener` заключается в "
"том, что вы можете использовать один и тот же экземпляр для обслуживания "
"нескольких QueueHandlers``. Это более экономично, чем, скажем, использование "
"многопоточных версий существующих классов-обработчиков, которые съедали бы "
"один поток на каждый обработчик без какой-либо особой выгоды."

#: ../../howto/logging-cookbook.rst:587
msgid "An example of using these two classes follows (imports omitted)::"
msgstr "Ниже приведен пример использования этих двух классов (импорт опущен):"

#: ../../howto/logging-cookbook.rst:605
msgid "which, when run, will produce:"
msgstr "который при запуске выдаст:"

#: ../../howto/logging-cookbook.rst:611
msgid ""
"Although the earlier discussion wasn't specifically talking about async "
"code, but rather about slow logging handlers, it should be noted that when "
"logging from async code, network and even file handlers could lead to "
"problems (blocking the event loop) because some logging is done from :mod:"
"`asyncio` internals. It might be best, if any async code is used in an "
"application, to use the above approach for logging, so that any blocking "
"code runs only in the ``QueueListener`` thread."
msgstr ""
"Хотя в предыдущем обсуждении конкретно говорилось не об асинхронном коде, а "
"скорее об обработчиках медленного журналирования, следует отметить, что при "
"журналировании из асинхронного кода сетевые и даже файловые обработчики "
"могут привести к проблемам (блокировке цикла событий), поскольку некоторые "
"журналы сделано из внутренних компонентов :mod:`asyncio`. Если в приложении "
"используется какой-либо асинхронный код, возможно, лучше всего использовать "
"описанный выше подход для журналирования, чтобы любой код блокировки "
"выполнялся только в потоке QueueListener."

#: ../../howto/logging-cookbook.rst:619
msgid ""
"Prior to Python 3.5, the :class:`QueueListener` always passed every message "
"received from the queue to every handler it was initialized with. (This was "
"because it was assumed that level filtering was all done on the other side, "
"where the queue is filled.) From 3.5 onwards, this behaviour can be changed "
"by passing a keyword argument ``respect_handler_level=True`` to the "
"listener's constructor. When this is done, the listener compares the level "
"of each message with the handler's level, and only passes a message to a "
"handler if it's appropriate to do so."
msgstr ""
"До Python 3.5 :class:`QueueListener` всегда передавал каждое сообщение, "
"полученное из очереди, каждому обработчику, с помощью которого он был "
"инициализирован. (Это произошло потому, что предполагалось, что вся "
"фильтрация уровней выполняется на другой стороне, где очередь заполнена.) "
"Начиная с версии 3.5, это поведение можно изменить, передав аргумент "
"ключевого слова ``respect_handler_level=True`` в конструктор слушателя. . "
"Когда это будет сделано, прослушиватель сравнивает уровень каждого сообщения "
"с уровнем обработчика и передает сообщение обработчику только в том случае, "
"если это уместно."

#: ../../howto/logging-cookbook.rst:632
msgid "Sending and receiving logging events across a network"
msgstr "Отправка и получение событий журнала по сети"

#: ../../howto/logging-cookbook.rst:634
msgid ""
"Let's say you want to send logging events across a network, and handle them "
"at the receiving end. A simple way of doing this is attaching a :class:"
"`SocketHandler` instance to the root logger at the sending end::"
msgstr ""
"Допустим, вы хотите отправлять события регистрации по сети и обрабатывать их "
"на принимающей стороне. Простой способ сделать это — прикрепить экземпляр :"
"class:`SocketHandler` к корневому регистратору на передающей стороне:"

#: ../../howto/logging-cookbook.rst:662
msgid ""
"At the receiving end, you can set up a receiver using the :mod:"
"`socketserver` module. Here is a basic working example::"
msgstr ""
"На принимающей стороне вы можете настроить получателя с помощью модуля :mod:"
"`socketserver`. Вот базовый рабочий пример:"

#: ../../howto/logging-cookbook.rst:750
msgid ""
"First run the server, and then the client. On the client side, nothing is "
"printed on the console; on the server side, you should see something like:"
msgstr ""
"Сначала запустите сервер, а затем клиент. На стороне клиента на консоли "
"ничего не выводится; на стороне сервера вы должны увидеть что-то вроде:"

#: ../../howto/logging-cookbook.rst:762
msgid ""
"Note that there are some security issues with pickle in some scenarios. If "
"these affect you, you can use an alternative serialization scheme by "
"overriding the :meth:`~handlers.SocketHandler.makePickle` method and "
"implementing your alternative there, as well as adapting the above script to "
"use your alternative serialization."
msgstr ""

#: ../../howto/logging-cookbook.rst:770
msgid "Running a logging socket listener in production"
msgstr "Запуск прослушивателя сокетов журналирования в рабочей среде"

#: ../../howto/logging-cookbook.rst:774
msgid ""
"To run a logging listener in production, you may need to use a process-"
"management tool such as `Supervisor <http://supervisord.org/>`_. `Here is a "
"Gist <socket-listener-gist_>`__ which provides the bare-bones files to run "
"the above functionality using Supervisor. It consists of the following files:"
msgstr ""
"Чтобы запустить прослушиватель журналов в рабочей среде, вам может "
"потребоваться использовать инструмент управления процессами, например "
"`Supervisor <http://supervisord.org/>`_. `Вот Gist <socket-listener-"
"gist_>`__, который предоставляет базовые файлы для запуска вышеуказанных "
"функций с помощью Supervisor. Он состоит из следующих файлов:"

#: ../../howto/logging-cookbook.rst:781
msgid "File"
msgstr "Файл"

#: ../../howto/logging-cookbook.rst:781
msgid "Purpose"
msgstr "Предназначение"

#: ../../howto/logging-cookbook.rst:783
msgid ":file:`prepare.sh`"
msgstr ":file:`prepare.sh`"

#: ../../howto/logging-cookbook.rst:783
msgid "A Bash script to prepare the environment for testing"
msgstr "Скрипт Bash для подготовки среды к тестированию."

#: ../../howto/logging-cookbook.rst:786
msgid ":file:`supervisor.conf`"
msgstr ":file:`supervisor.conf`"

#: ../../howto/logging-cookbook.rst:786
msgid ""
"The Supervisor configuration file, which has entries for the listener and a "
"multi-process web application"
msgstr ""
"Файл конфигурации Supervisor, содержащий записи для прослушивателя и "
"многопроцессного веб-приложения."

#: ../../howto/logging-cookbook.rst:790
msgid ":file:`ensure_app.sh`"
msgstr ":file:`ensure_app.sh`"

#: ../../howto/logging-cookbook.rst:790
msgid ""
"A Bash script to ensure that Supervisor is running with the above "
"configuration"
msgstr ""
"Сценарий Bash, гарантирующий, что Supervisor работает с указанной выше "
"конфигурацией."

#: ../../howto/logging-cookbook.rst:793
msgid ":file:`log_listener.py`"
msgstr ":file:`log_listener.py`"

#: ../../howto/logging-cookbook.rst:793
msgid ""
"The socket listener program which receives log events and records them to a "
"file"
msgstr ""
"Программа-прослушиватель сокетов, которая получает события журнала и "
"записывает их в файл."

#: ../../howto/logging-cookbook.rst:796
msgid ":file:`main.py`"
msgstr ":file:`main.py`"

#: ../../howto/logging-cookbook.rst:796
msgid ""
"A simple web application which performs logging via a socket connected to "
"the listener"
msgstr ""
"Простое веб-приложение, которое выполняет журналирование через сокет, "
"подключенный к прослушивателю."

#: ../../howto/logging-cookbook.rst:799
msgid ":file:`webapp.json`"
msgstr ":file:`webapp.json`"

#: ../../howto/logging-cookbook.rst:799
msgid "A JSON configuration file for the web application"
msgstr "Файл конфигурации JSON для веб-приложения."

#: ../../howto/logging-cookbook.rst:801
msgid ":file:`client.py`"
msgstr ":file:`client.py`"

#: ../../howto/logging-cookbook.rst:801
msgid "A Python script to exercise the web application"
msgstr "Скрипт Python для работы с веб-приложением."

#: ../../howto/logging-cookbook.rst:804
msgid ""
"The web application uses `Gunicorn <https://gunicorn.org/>`_, which is a "
"popular web application server that starts multiple worker processes to "
"handle requests. This example setup shows how the workers can write to the "
"same log file without conflicting with one another --- they all go through "
"the socket listener."
msgstr ""
"Веб-приложение использует `Gunicorn <https://gunicorn.org/>`_, популярный "
"сервер веб-приложений, который запускает несколько рабочих процессов для "
"обработки запросов. В этом примере настройки показано, как рабочие могут "
"писать в один и тот же файл журнала, не конфликтуя друг с другом — все они "
"проходят через прослушиватель сокетов."

#: ../../howto/logging-cookbook.rst:809
msgid "To test these files, do the following in a POSIX environment:"
msgstr ""
"Чтобы протестировать эти файлы, выполните следующие действия в среде POSIX:"

#: ../../howto/logging-cookbook.rst:811
msgid ""
"Download `the Gist <socket-listener-gist_>`__ as a ZIP archive using the :"
"guilabel:`Download ZIP` button."
msgstr ""
"Загрузите `the Gist <socket-listener-gist_>`__ в виде ZIP-архива, используя "
"кнопку :guilabel:`Загрузить ZIP`."

#: ../../howto/logging-cookbook.rst:814
msgid "Unzip the above files from the archive into a scratch directory."
msgstr "Разархивируйте указанные выше файлы из архива в временный каталог."

#: ../../howto/logging-cookbook.rst:816
msgid ""
"In the scratch directory, run ``bash prepare.sh`` to get things ready. This "
"creates a :file:`run` subdirectory to contain Supervisor-related and log "
"files, and a :file:`venv` subdirectory to contain a virtual environment into "
"which ``bottle``, ``gunicorn`` and ``supervisor`` are installed."
msgstr ""
"В рабочем каталоге запустите bashprepree.sh, чтобы все было готово. При этом "
"создается подкаталог :file:`run` для хранения файлов журналов и файлов, "
"связанных с Supervisor, а также подкаталог :file:`venv` для хранения "
"виртуальной среды, в которой находятся ``bottle``, ``gunicorn`` и "
"``supervisor'. `` установлены."

#: ../../howto/logging-cookbook.rst:821
msgid ""
"Run ``bash ensure_app.sh`` to ensure that Supervisor is running with the "
"above configuration."
msgstr ""
"Запустите bash Sure_app.sh, чтобы убедиться, что Supervisor работает с "
"указанной выше конфигурацией."

#: ../../howto/logging-cookbook.rst:824
msgid ""
"Run ``venv/bin/python client.py`` to exercise the web application, which "
"will lead to records being written to the log."
msgstr ""
"Запустите ``venv/bin/python client.py``, чтобы протестировать веб-"
"приложение, что приведет к записи записей в журнал."

#: ../../howto/logging-cookbook.rst:827
msgid ""
"Inspect the log files in the :file:`run` subdirectory. You should see the "
"most recent log lines in files matching the pattern :file:`app.log*`. They "
"won't be in any particular order, since they have been handled concurrently "
"by different worker processes in a non-deterministic way."
msgstr ""
"Проверьте файлы журналов в подкаталоге :file:`run`. Вы должны увидеть самые "
"последние строки журнала в файлах, соответствующих шаблону :file:`app.log*`. "
"Они не будут располагаться в каком-то определенном порядке, поскольку они "
"обрабатывались одновременно разными рабочими процессами недетерминированным "
"образом."

#: ../../howto/logging-cookbook.rst:832
msgid ""
"You can shut down the listener and the web application by running ``venv/bin/"
"supervisorctl -c supervisor.conf shutdown``."
msgstr ""
"Вы можете закрыть прослушиватель и веб-приложение, запустив ``venv/bin/"
"supervisorctl -c Supervisor.conf Shutdown``."

#: ../../howto/logging-cookbook.rst:835
msgid ""
"You may need to tweak the configuration files in the unlikely event that the "
"configured ports clash with something else in your test environment."
msgstr ""
"Возможно, вам придется настроить файлы конфигурации в том маловероятном "
"случае, если настроенные порты будут конфликтовать с чем-то еще в вашей "
"тестовой среде."

#: ../../howto/logging-cookbook.rst:841
msgid "Adding contextual information to your logging output"
msgstr "Добавление контекстной информации в выходные данные журнала"

#: ../../howto/logging-cookbook.rst:843
msgid ""
"Sometimes you want logging output to contain contextual information in "
"addition to the parameters passed to the logging call. For example, in a "
"networked application, it may be desirable to log client-specific "
"information in the log (e.g. remote client's username, or IP address). "
"Although you could use the *extra* parameter to achieve this, it's not "
"always convenient to pass the information in this way. While it might be "
"tempting to create :class:`Logger` instances on a per-connection basis, this "
"is not a good idea because these instances are not garbage collected. While "
"this is not a problem in practice, when the number of :class:`Logger` "
"instances is dependent on the level of granularity you want to use in "
"logging an application, it could be hard to manage if the number of :class:"
"`Logger` instances becomes effectively unbounded."
msgstr ""
"Иногда вам нужно, чтобы выходные данные журнала содержали контекстную "
"информацию в дополнение к параметрам, передаваемым в вызов журнала. "
"Например, в сетевом приложении может быть желательно регистрировать в "
"журнале информацию, специфичную для клиента (например, имя пользователя или "
"IP-адрес удаленного клиента). Хотя для этого можно использовать параметр "
"*extra*, передавать информацию таким способом не всегда удобно. Хотя может "
"показаться заманчивым создавать экземпляры :class:`Logger` для каждого "
"соединения, это не очень хорошая идея, поскольку эти экземпляры не подлежат "
"сборке мусора. Хотя на практике это не проблема, но когда количество "
"экземпляров :class:`Logger` зависит от уровня детализации, который вы хотите "
"использовать при регистрации приложения, им может быть сложно управлять, "
"если количество :class:` Экземпляры Logger становятся фактически "
"неограниченными."

#: ../../howto/logging-cookbook.rst:858
msgid "Using LoggerAdapters to impart contextual information"
msgstr "Использование LoggerAdapters для передачи контекстной информации"

#: ../../howto/logging-cookbook.rst:860
msgid ""
"An easy way in which you can pass contextual information to be output along "
"with logging event information is to use the :class:`LoggerAdapter` class. "
"This class is designed to look like a :class:`Logger`, so that you can call :"
"meth:`debug`, :meth:`info`, :meth:`warning`, :meth:`error`, :meth:"
"`exception`, :meth:`critical` and :meth:`log`. These methods have the same "
"signatures as their counterparts in :class:`Logger`, so you can use the two "
"types of instances interchangeably."
msgstr ""
"Простой способ передать контекстную информацию для вывода вместе с "
"информацией о событиях журнала — использовать класс :class:`LoggerAdapter`. "
"Этот класс спроектирован так, чтобы выглядеть как :class:`Logger`, так что "
"вы можете вызывать :meth:`debug`, :meth:`info`, :meth:`warning`, :meth:"
"`error`, :meth :`Exception`, :meth:`critical` и :meth:`log`. Эти методы "
"имеют те же сигнатуры, что и их аналоги в :class:`Logger`, поэтому вы можете "
"использовать эти два типа экземпляров как взаимозаменяемые."

#: ../../howto/logging-cookbook.rst:868
msgid ""
"When you create an instance of :class:`LoggerAdapter`, you pass it a :class:"
"`Logger` instance and a dict-like object which contains your contextual "
"information. When you call one of the logging methods on an instance of :"
"class:`LoggerAdapter`, it delegates the call to the underlying instance of :"
"class:`Logger` passed to its constructor, and arranges to pass the "
"contextual information in the delegated call. Here's a snippet from the code "
"of :class:`LoggerAdapter`::"
msgstr ""
"Когда вы создаете экземпляр :class:`LoggerAdapter`, вы передаете ему "
"экземпляр :class:`Logger` и объект, подобный dict, который содержит вашу "
"контекстную информацию. Когда вы вызываете один из методов ведения журнала в "
"экземпляре :class:`LoggerAdapter`, он делегирует вызов базовому экземпляру :"
"class:`Logger`, передаваемому его конструктору, и организует передачу "
"контекстной информации в делегированном вызове. . Вот фрагмент кода :class:"
"`LoggerAdapter`::"

#: ../../howto/logging-cookbook.rst:884
msgid ""
"The :meth:`~LoggerAdapter.process` method of :class:`LoggerAdapter` is where "
"the contextual information is added to the logging output. It's passed the "
"message and keyword arguments of the logging call, and it passes back "
"(potentially) modified versions of these to use in the call to the "
"underlying logger. The default implementation of this method leaves the "
"message alone, but inserts an 'extra' key in the keyword argument whose "
"value is the dict-like object passed to the constructor. Of course, if you "
"had passed an 'extra' keyword argument in the call to the adapter, it will "
"be silently overwritten."
msgstr ""
"Метод :meth:`~LoggerAdapter.process` :class:`LoggerAdapter` — это место, где "
"контекстная информация добавляется к выходным данным журнала. Он передает "
"аргументы сообщения и ключевого слова вызова журнала и передает обратно "
"(потенциально) измененные версии их для использования в вызове базового "
"средства ведения журнала. Реализация этого метода по умолчанию оставляет "
"сообщение в покое, но вставляет «дополнительный» ключ в аргумент ключевого "
"слова, значением которого является объект, подобный диктовке, передаваемый "
"конструктору. Конечно, если вы передали аргумент ключевого слова "
"«дополнительный» при вызове адаптера, он будет автоматически перезаписан."

#: ../../howto/logging-cookbook.rst:893
msgid ""
"The advantage of using 'extra' is that the values in the dict-like object "
"are merged into the :class:`LogRecord` instance's __dict__, allowing you to "
"use customized strings with your :class:`Formatter` instances which know "
"about the keys of the dict-like object. If you need a different method, e.g. "
"if you want to prepend or append the contextual information to the message "
"string, you just need to subclass :class:`LoggerAdapter` and override :meth:"
"`~LoggerAdapter.process` to do what you need. Here is a simple example::"
msgstr ""
"Преимущество использования «extra» состоит в том, что значения в объекте, "
"похожем на :class:`LogRecord`, объединяются в __dict__ экземпляра :class:"
"`LogRecord`, что позволяет вам использовать настроенные строки с вашими "
"экземплярами :class:`Formatter`, которые знают о ключах. объекта, подобного "
"диктовке. Если вам нужен другой метод, например, если вы хотите добавить "
"контекстную информацию в начало или добавить контекстную информацию к строке "
"сообщения, вам просто нужно создать подкласс :class:`LoggerAdapter` и "
"переопределить :meth:`~LoggerAdapter.process`, чтобы сделать то, что вам "
"нужно. . Вот простой пример:"

#: ../../howto/logging-cookbook.rst:909
msgid "which you can use like this::"
msgstr "который вы можете использовать следующим образом::"

#: ../../howto/logging-cookbook.rst:914
msgid ""
"Then any events that you log to the adapter will have the value of "
"``some_conn_id`` prepended to the log messages."
msgstr ""
"Тогда любые события, которые вы регистрируете в адаптере, будут иметь "
"значение ``some_conn_id`` перед сообщениями журнала."

#: ../../howto/logging-cookbook.rst:918
msgid "Using objects other than dicts to pass contextual information"
msgstr ""
"Использование объектов, отличных от dicts, для передачи контекстной "
"информации"

#: ../../howto/logging-cookbook.rst:920
msgid ""
"You don't need to pass an actual dict to a :class:`LoggerAdapter` - you "
"could pass an instance of a class which implements ``__getitem__`` and "
"``__iter__`` so that it looks like a dict to logging. This would be useful "
"if you want to generate values dynamically (whereas the values in a dict "
"would be constant)."
msgstr ""
"Вам не нужно передавать фактический словарь в :class:`LoggerAdapter` - вы "
"можете передать экземпляр класса, который реализует ``__getitem__`` и "
"``__iter__``, чтобы он выглядел как словарь для регистрации. Это было бы "
"полезно, если вы хотите динамически генерировать значения (тогда как "
"значения в словаре будут постоянными)."

#: ../../howto/logging-cookbook.rst:929
msgid "Using Filters to impart contextual information"
msgstr "Использование фильтров для передачи контекстной информации"

#: ../../howto/logging-cookbook.rst:931
msgid ""
"You can also add contextual information to log output using a user-defined :"
"class:`Filter`. ``Filter`` instances are allowed to modify the "
"``LogRecords`` passed to them, including adding additional attributes which "
"can then be output using a suitable format string, or if needed a custom :"
"class:`Formatter`."
msgstr ""
"Вы также можете добавить контекстную информацию в вывод журнала, используя "
"определяемый пользователем :class:`Filter`. Экземплярам ``Filter`` разрешено "
"изменять переданные им ``LogRecords``, включая добавление дополнительных "
"атрибутов, которые затем можно вывести с использованием подходящей строки "
"формата или, при необходимости, специального :class:`Formatter`."

#: ../../howto/logging-cookbook.rst:936
msgid ""
"For example in a web application, the request being processed (or at least, "
"the interesting parts of it) can be stored in a threadlocal (:class:"
"`threading.local`) variable, and then accessed from a ``Filter`` to add, "
"say, information from the request - say, the remote IP address and remote "
"user's username - to the ``LogRecord``, using the attribute names 'ip' and "
"'user' as in the ``LoggerAdapter`` example above. In that case, the same "
"format string can be used to get similar output to that shown above. Here's "
"an example script::"
msgstr ""
"Например, в веб-приложении обрабатываемый запрос (или, по крайней мере, его "
"интересные части) может быть сохранен в переменной threadlocal (:class:"
"`threading.local`), а затем доступен из ``Filter``. добавить, скажем, "
"информацию из запроса — скажем, удаленный IP-адрес и имя пользователя "
"удаленного пользователя — в LogRecord, используя имена атрибутов «ip» и "
"«user», как в примере «LoggerAdapter» выше. . В этом случае можно "
"использовать ту же строку формата для получения вывода, аналогичного "
"показанному выше. Вот пример скрипта::"

#: ../../howto/logging-cookbook.rst:982
msgid "which, when run, produces something like:"
msgstr "который при запуске выдает что-то вроде:"

#: ../../howto/logging-cookbook.rst:1000
msgid "Use of ``contextvars``"
msgstr "Использование ``contextvars``"

#: ../../howto/logging-cookbook.rst:1002
msgid ""
"Since Python 3.7, the :mod:`contextvars` module has provided context-local "
"storage which works for both :mod:`threading` and :mod:`asyncio` processing "
"needs. This type of storage may thus be generally preferable to thread-"
"locals. The following example shows how, in a multi-threaded environment, "
"logs can populated with contextual information such as, for example, request "
"attributes handled by web applications."
msgstr ""
"Начиная с Python 3.7, модуль :mod:`contextvars` предоставляет контекстно-"
"локальное хранилище, которое подходит как для обработки :mod:`threading`, "
"так и для :mod:`asyncio`. Таким образом, этот тип хранилища может быть "
"предпочтительнее локальных потоков. В следующем примере показано, как в "
"многопоточной среде журналы могут заполняться контекстной информацией, такой "
"как, например, атрибуты запроса, обрабатываемые веб-приложениями."

#: ../../howto/logging-cookbook.rst:1008
msgid ""
"For the purposes of illustration, say that you have different web "
"applications, each independent of the other but running in the same Python "
"process and using a library common to them. How can each of these "
"applications have their own log, where all logging messages from the library "
"(and other request processing code) are directed to the appropriate "
"application's log file, while including in the log additional contextual "
"information such as client IP, HTTP request method and client username?"
msgstr ""
"В качестве иллюстрации предположим, что у вас есть разные веб-приложения, "
"каждое из которых независимо от другого, но выполняются в одном и том же "
"процессе Python и используют общую для них библиотеку. Как каждое из этих "
"приложений может иметь свой собственный журнал, где все сообщения журнала из "
"библиотеки (и другой код обработки запросов) направляются в файл журнала "
"соответствующего приложения, при этом в журнал включается дополнительная "
"контекстная информация, такая как IP-адрес клиента, метод HTTP-запроса и имя "
"пользователя клиента?"

#: ../../howto/logging-cookbook.rst:1015
msgid "Let's assume that the library can be simulated by the following code:"
msgstr ""
"Предположим, что библиотеку можно смоделировать с помощью следующего кода:"

#: ../../howto/logging-cookbook.rst:1031
msgid ""
"We can simulate the multiple web applications by means of two simple "
"classes, ``Request`` and ``WebApp``. These simulate how real threaded web "
"applications work - each request is handled by a thread:"
msgstr ""
"Мы можем моделировать несколько веб-приложений с помощью двух простых "
"классов: Request и WebApp. Они имитируют работу реальных многопоточных веб-"
"приложений — каждый запрос обрабатывается потоком:"

#: ../../howto/logging-cookbook.rst:1175
msgid ""
"If you run the above, you should find that roughly half the requests go "
"into :file:`app1.log` and the rest into :file:`app2.log`, and the all the "
"requests are logged to :file:`app.log`. Each webapp-specific log will "
"contain only log entries for only that webapp, and the request information "
"will be displayed consistently in the log (i.e. the information in each "
"dummy request will always appear together in a log line). This is "
"illustrated by the following shell output:"
msgstr ""
"Если вы запустите вышеописанное, вы обнаружите, что примерно половина "
"запросов поступает в :file:`app1.log`, а остальные - в :file:`app2.log`, и "
"все запросы записываются в :file:`app .log`. Каждый журнал конкретного веб-"
"приложения будет содержать только записи журнала только для этого веб-"
"приложения, а информация о запросе будет последовательно отображаться в "
"журнале (т. е. информация в каждом фиктивном запросе всегда будет "
"отображаться вместе в строке журнала). Это иллюстрируется следующим выводом "
"оболочки:"

#: ../../howto/logging-cookbook.rst:1222
msgid "Imparting contextual information in handlers"
msgstr "Передача контекстной информации в обработчики"

#: ../../howto/logging-cookbook.rst:1224
msgid ""
"Each :class:`~Handler` has its own chain of filters. If you want to add "
"contextual information to a :class:`LogRecord` without leaking it to other "
"handlers, you can use a filter that returns a new :class:`~LogRecord` "
"instead of modifying it in-place, as shown in the following script::"
msgstr ""
"Каждый :class:`~Handler` имеет свою собственную цепочку фильтров. Если вы "
"хотите добавить контекстную информацию в :class:`LogRecord`, не передавая ее "
"другим обработчикам, вы можете использовать фильтр, который возвращает "
"новый :class:`~LogRecord` вместо его модификации на месте, как показано на "
"рисунке следующий скрипт::"

#: ../../howto/logging-cookbook.rst:1251
msgid "Logging to a single file from multiple processes"
msgstr "Запись в один файл из нескольких процессов"

#: ../../howto/logging-cookbook.rst:1253
msgid ""
"Although logging is thread-safe, and logging to a single file from multiple "
"threads in a single process *is* supported, logging to a single file from "
"*multiple processes* is *not* supported, because there is no standard way to "
"serialize access to a single file across multiple processes in Python. If "
"you need to log to a single file from multiple processes, one way of doing "
"this is to have all the processes log to a :class:`~handlers.SocketHandler`, "
"and have a separate process which implements a socket server which reads "
"from the socket and logs to file. (If you prefer, you can dedicate one "
"thread in one of the existing processes to perform this function.) :ref:"
"`This section <network-logging>` documents this approach in more detail and "
"includes a working socket receiver which can be used as a starting point for "
"you to adapt in your own applications."
msgstr ""
"Хотя ведение журнала является поточно-ориентированным и ведение журнала в "
"один файл из нескольких потоков в одном процессе *поддерживается*, ведение "
"журнала в один файл из *нескольких процессов* *не* поддерживается, поскольку "
"не существует стандартного способа сериализации доступа. в один файл в "
"нескольких процессах Python. Если вам нужно записывать в один файл несколько "
"процессов, один из способов сделать это — записать все процессы в :class:"
"`~handlers.SocketHandler` и иметь отдельный процесс, реализующий сервер "
"сокетов, который читает из сокет и журналы в файл. (Если вы предпочитаете, "
"вы можете выделить один поток в одном из существующих процессов для "
"выполнения этой функции.) в качестве отправной точки для адаптации к вашим "
"собственным приложениям."

#: ../../howto/logging-cookbook.rst:1266
msgid ""
"You could also write your own handler which uses the :class:"
"`~multiprocessing.Lock` class from the :mod:`multiprocessing` module to "
"serialize access to the file from your processes. The existing :class:"
"`FileHandler` and subclasses do not make use of :mod:`multiprocessing` at "
"present, though they may do so in the future. Note that at present, the :mod:"
"`multiprocessing` module does not provide working lock functionality on all "
"platforms (see https://bugs.python.org/issue3770)."
msgstr ""
"Вы также можете написать свой собственный обработчик, который использует "
"класс :class:`~multiprocessing.Lock` из модуля :mod:`multiprocessing` для "
"сериализации доступа к файлу из ваших процессов. Существующий :class:"
"`FileHandler` и его подклассы в настоящее время не используют :mod:"
"`multiprocessing`, хотя они могут использовать это в будущем. Обратите "
"внимание, что в настоящее время модуль :mod:`multiprocessing` не "
"обеспечивает работоспособность блокировки на всех платформах (см. https://"
"bugs.python.org/issue3770)."

#: ../../howto/logging-cookbook.rst:1276
msgid ""
"Alternatively, you can use a ``Queue`` and a :class:`QueueHandler` to send "
"all logging events to one of the processes in your multi-process "
"application. The following example script demonstrates how you can do this; "
"in the example a separate listener process listens for events sent by other "
"processes and logs them according to its own logging configuration. Although "
"the example only demonstrates one way of doing it (for example, you may want "
"to use a listener thread rather than a separate listener process -- the "
"implementation would be analogous) it does allow for completely different "
"logging configurations for the listener and the other processes in your "
"application, and can be used as the basis for code meeting your own specific "
"requirements::"
msgstr ""
"В качестве альтернативы вы можете использовать Queue и :class:`QueueHandler` "
"для отправки всех событий регистрации в один из процессов вашего "
"многопроцессного приложения. Следующий пример сценария демонстрирует, как "
"это можно сделать; в этом примере отдельный процесс-прослушиватель "
"прослушивает события, отправленные другими процессами, и регистрирует их в "
"соответствии со своей собственной конфигурацией журналирования. Хотя пример "
"демонстрирует только один способ сделать это (например, вы можете захотеть "
"использовать поток прослушивателя, а не отдельный процесс прослушивателя - "
"реализация будет аналогичной), он позволяет использовать совершенно разные "
"конфигурации журналирования для прослушивателя и другого процесса. процессов "
"в вашем приложении и может быть использован в качестве основы для кода, "
"отвечающего вашим конкретным требованиям:"

#: ../../howto/logging-cookbook.rst:1392
msgid ""
"A variant of the above script keeps the logging in the main process, in a "
"separate thread::"
msgstr ""
"Вариант приведенного выше скрипта сохраняет журналирование в основном "
"процессе, в отдельном потоке:"

#: ../../howto/logging-cookbook.rst:1487
msgid ""
"This variant shows how you can e.g. apply configuration for particular "
"loggers - e.g. the ``foo`` logger has a special handler which stores all "
"events in the ``foo`` subsystem in a file ``mplog-foo.log``. This will be "
"used by the logging machinery in the main process (even though the logging "
"events are generated in the worker processes) to direct the messages to the "
"appropriate destinations."
msgstr ""
"Этот вариант показывает, как вы можете, например, применить конфигурацию для "
"определенных регистраторов - например, регистратор ``foo`` имеет специальный "
"обработчик, который сохраняет все события в подсистеме ``foo`` в файле "
"``mplog-foo.log``. Это будет использоваться механизмом протоколирования в "
"основном процессе (даже если события протоколирования генерируются в рабочих "
"процессах) для направления сообщений в соответствующие пункты назначения."

#: ../../howto/logging-cookbook.rst:1494
msgid "Using concurrent.futures.ProcessPoolExecutor"
msgstr "Использование concurrent.futures.ProcessPoolExecutor"

#: ../../howto/logging-cookbook.rst:1496
msgid ""
"If you want to use :class:`concurrent.futures.ProcessPoolExecutor` to start "
"your worker processes, you need to create the queue slightly differently. "
"Instead of"
msgstr ""
"Если вы хотите использовать :class:`concurrent.futures.ProcessPoolExecutor` "
"для запуска ваших рабочих процессов, вам нужно создать очередь немного по-"
"другому. Вместо"

#: ../../howto/logging-cookbook.rst:1504
msgid "you should use"
msgstr "вы должны использовать"

#: ../../howto/logging-cookbook.rst:1510
msgid "and you can then replace the worker creation from this::"
msgstr "и затем вы можете заменить создание рабочего следующим образом:"

#: ../../howto/logging-cookbook.rst:1521
msgid "to this (remembering to first import :mod:`concurrent.futures`)::"
msgstr "к этому (не забывая сначала импортировать :mod:`concurrent.futures`)::"

#: ../../howto/logging-cookbook.rst:1528
msgid "Deploying Web applications using Gunicorn and uWSGI"
msgstr "Развертывание веб-приложений с использованием Gunicorn и uWSGI."

#: ../../howto/logging-cookbook.rst:1530
msgid ""
"When deploying Web applications using `Gunicorn <https://gunicorn.org/>`_ or "
"`uWSGI <https://uwsgi-docs.readthedocs.io/en/latest/>`_ (or similar), "
"multiple worker processes are created to handle client requests. In such "
"environments, avoid creating file-based handlers directly in your web "
"application. Instead, use a :class:`SocketHandler` to log from the web "
"application to a listener in a separate process. This can be set up using a "
"process management tool such as Supervisor - see `Running a logging socket "
"listener in production`_ for more details."
msgstr ""
"При развертывании веб-приложений с использованием `Gunicorn <https://"
"gunicorn.org/>`_ или `uWSGI <https://uwsgi-docs.readthedocs.io/en/latest/>`_ "
"(или аналогичного) несколько рабочих процессов создаются для обработки "
"запросов клиентов. В таких средах избегайте создания обработчиков на основе "
"файлов непосредственно в веб-приложении. Вместо этого используйте :class:"
"`SocketHandler` для входа из веб-приложения в прослушиватель в отдельном "
"процессе. Это можно настроить с помощью инструмента управления процессами, "
"такого как Supervisor. Дополнительные сведения см. в разделе «Запуск "
"прослушивателя сокетов журналирования в рабочей среде»."

#: ../../howto/logging-cookbook.rst:1540
msgid "Using file rotation"
msgstr "Использование ротации файлов"

#: ../../howto/logging-cookbook.rst:1545
msgid ""
"Sometimes you want to let a log file grow to a certain size, then open a new "
"file and log to that. You may want to keep a certain number of these files, "
"and when that many files have been created, rotate the files so that the "
"number of files and the size of the files both remain bounded. For this "
"usage pattern, the logging package provides a :class:`~handlers."
"RotatingFileHandler`::"
msgstr ""

#: ../../howto/logging-cookbook.rst:1577
msgid ""
"The result should be 6 separate files, each with part of the log history for "
"the application:"
msgstr ""
"В результате должно получиться 6 отдельных файлов, каждый из которых "
"содержит часть истории журнала приложения:"

#: ../../howto/logging-cookbook.rst:1589
msgid ""
"The most current file is always :file:`logging_rotatingfile_example.out`, "
"and each time it reaches the size limit it is renamed with the suffix "
"``.1``. Each of the existing backup files is renamed to increment the suffix "
"(``.1`` becomes ``.2``, etc.)  and the ``.6`` file is erased."
msgstr ""
"Самым последним файлом всегда является :file:`logging_rotatingfile_example."
"out`, и каждый раз, когда он достигает предела размера, он переименовывается "
"с суффиксом ``.1``. Каждый из существующих файлов резервных копий "
"переименовывается с увеличением суффикса («.1» становится «.2» и т. д.), а "
"файл «.6» удаляется."

#: ../../howto/logging-cookbook.rst:1594
msgid ""
"Obviously this example sets the log length much too small as an extreme "
"example.  You would want to set *maxBytes* to an appropriate value."
msgstr ""
"Очевидно, что в этом примере длина журнала слишком мала, что является "
"крайним примером. Вы хотели бы установить для *maxBytes* подходящее значение."

#: ../../howto/logging-cookbook.rst:1600
msgid "Use of alternative formatting styles"
msgstr "Использование альтернативных стилей форматирования"

#: ../../howto/logging-cookbook.rst:1602
msgid ""
"When logging was added to the Python standard library, the only way of "
"formatting messages with variable content was to use the %-formatting "
"method. Since then, Python has gained two new formatting approaches: :class:"
"`string.Template` (added in Python 2.4) and :meth:`str.format` (added in "
"Python 2.6)."
msgstr ""
"Когда в стандартную библиотеку Python было добавлено журналирование, "
"единственным способом форматирования сообщений с переменным содержимым было "
"использование метода %-f метод форматирования. С тех пор в Python появилось "
"два новых подхода к форматированию: :class:`string.Template` (добавлен в "
"Python 2.4) и :meth:`str.format` (добавлен в Python 2.6)."

#: ../../howto/logging-cookbook.rst:1608
msgid ""
"Logging (as of 3.2) provides improved support for these two additional "
"formatting styles. The :class:`Formatter` class been enhanced to take an "
"additional, optional keyword parameter named ``style``. This defaults to "
"``'%'``, but other possible values are ``'{'`` and ``'$'``, which correspond "
"to the other two formatting styles. Backwards compatibility is maintained by "
"default (as you would expect), but by explicitly specifying a style "
"parameter, you get the ability to specify format strings which work with :"
"meth:`str.format` or :class:`string.Template`. Here's an example console "
"session to show the possibilities:"
msgstr ""
"Ведение журнала (начиная с версии 3.2) обеспечивает улучшенную поддержку "
"этих двух дополнительных стилей форматирования. Класс :class:`Formatter` был "
"улучшен и теперь принимает дополнительный необязательный параметр ключевого "
"слова с именем ``style``. По умолчанию это ``'%'``, но другими возможными "
"значениями являются ``'{'`` и ``'$'``, которые соответствуют двум другим "
"стилям форматирования. Обратная совместимость поддерживается по умолчанию "
"(как и следовало ожидать), но, явно указав параметр стиля, вы получаете "
"возможность указывать строки формата, которые работают с :meth:`str.format` "
"или :class:`string.Template`. Вот пример сеанса консоли, демонстрирующий "
"возможности:"

#: ../../howto/logging-cookbook.rst:1642
msgid ""
"Note that the formatting of logging messages for final output to logs is "
"completely independent of how an individual logging message is constructed. "
"That can still use %-formatting, as shown here::"
msgstr ""
"Обратите внимание, что форматирование сообщений журнала для окончательного "
"вывода в журналы полностью не зависит от того, как создается отдельное "
"сообщение журнала. Это все еще можно использовать %-f форматирование, как "
"показано здесь::"

#: ../../howto/logging-cookbook.rst:1650
msgid ""
"Logging calls (``logger.debug()``, ``logger.info()`` etc.) only take "
"positional parameters for the actual logging message itself, with keyword "
"parameters used only for determining options for how to handle the actual "
"logging call (e.g. the ``exc_info`` keyword parameter to indicate that "
"traceback information should be logged, or the ``extra`` keyword parameter "
"to indicate additional contextual information to be added to the log). So "
"you cannot directly make logging calls using :meth:`str.format` or :class:"
"`string.Template` syntax, because internally the logging package uses %-"
"formatting to merge the format string and the variable arguments. There "
"would be no changing this while preserving backward compatibility, since all "
"logging calls which are out there in existing code will be using %-format "
"strings."
msgstr ""
"Вызовы журналирования (``logger.debug()``, ``logger.info()`` и т. д.) "
"принимают только позиционные параметры для фактического сообщения журнала, а "
"параметры ключевых слов используются только для определения вариантов "
"обработки фактического сообщения. вызов регистрации (например, параметр "
"ключевого слова exc_info, указывающий, что информация обратной трассировки "
"должна регистрироваться, или параметр ключевого слова extra, указывающий "
"дополнительную контекстную информацию, которая должна быть добавлена ​​в "
"журнал). Таким образом, вы не можете напрямую выполнять вызовы "
"журналирования, используя синтаксис :meth:`str.format` или :class:`string."
"Template`, поскольку внутри пакета журналирования используется %-f "
"форматирование для объединения строки формата и аргументов переменной. Это "
"не будет изменено при сохранении обратной совместимости, поскольку все "
"вызовы журналирования, которые есть в существующем коде, будут использовать "
"%-f форматировать строки."

#: ../../howto/logging-cookbook.rst:1663
msgid ""
"There is, however, a way that you can use {}- and $- formatting to construct "
"your individual log messages. Recall that for a message you can use an "
"arbitrary object as a message format string, and that the logging package "
"will call ``str()`` on that object to get the actual format string. Consider "
"the following two classes::"
msgstr ""
"Однако существует способ использовать форматирование {}- и $- для создания "
"индивидуальных сообщений журнала. Напомним, что для сообщения вы можете "
"использовать произвольный объект в качестве строки формата сообщения, и что "
"пакет журналирования будет вызывать ``str()`` для этого объекта, чтобы "
"получить фактическую строку формата. Рассмотрим следующие два класса:"

#: ../../howto/logging-cookbook.rst:1687
msgid ""
"Either of these can be used in place of a format string, to allow {}- or $-"
"formatting to be used to build the actual \"message\" part which appears in "
"the formatted log output in place of \"%(message)s\" or \"{message}\" or "
"\"$message\". It's a little unwieldy to use the class names whenever you "
"want to log something, but it's quite palatable if you use an alias such as "
"__ (double underscore --- not to be confused with _, the single underscore "
"used as a synonym/alias for :func:`gettext.gettext` or its brethren)."
msgstr ""
"Любой из них можно использовать вместо строки формата, чтобы разрешить "
"использование {}- или $-форматирования для создания фактической части "
"«сообщения», которая появляется в выводе форматированного журнала вместо « "
"%(сообщение)с \" или \"{message}\" или \"$message\". Немного громоздко "
"использовать имена классов всякий раз, когда вы хотите что-то записать в "
"журнал, но это вполне приемлемо, если вы используете псевдоним, такой как __ "
"(двойное подчеркивание --- не путают с _, единственным подчеркиванием, "
"используемым как синоним/псевдоним для :func:`gettext.gettext` или его "
"собратьев)."

#: ../../howto/logging-cookbook.rst:1695
msgid ""
"The above classes are not included in Python, though they're easy enough to "
"copy and paste into your own code. They can be used as follows (assuming "
"that they're declared in a module called ``wherever``):"
msgstr ""
"Вышеупомянутые классы не включены в Python, хотя их достаточно легко "
"скопировать и вставить в свой код. Их можно использовать следующим образом "
"(при условии, что они объявлены в модуле под названием «wherever»):"

#: ../../howto/logging-cookbook.rst:1717
msgid ""
"While the above examples use ``print()`` to show how the formatting works, "
"you would of course use ``logger.debug()`` or similar to actually log using "
"this approach."
msgstr ""
"Хотя в приведенных выше примерах используется print(), чтобы показать, как "
"работает форматирование, вы, конечно, можете использовать logger.debug() или "
"что-то подобное, чтобы фактически вести журнал с использованием этого "
"подхода."

#: ../../howto/logging-cookbook.rst:1721
msgid ""
"One thing to note is that you pay no significant performance penalty with "
"this approach: the actual formatting happens not when you make the logging "
"call, but when (and if) the logged message is actually about to be output to "
"a log by a handler. So the only slightly unusual thing which might trip you "
"up is that the parentheses go around the format string and the arguments, "
"not just the format string. That's because the __ notation is just syntax "
"sugar for a constructor call to one of the XXXMessage classes."
msgstr ""

#: ../../howto/logging-cookbook.rst:1729
msgid ""
"If you prefer, you can use a :class:`LoggerAdapter` to achieve a similar "
"effect to the above, as in the following example::"
msgstr ""
"Если вы предпочитаете, вы можете использовать :class:`LoggerAdapter` для "
"достижения эффекта, аналогичного приведенному выше, как в следующем примере:"

#: ../../howto/logging-cookbook.rst:1760
msgid ""
"The above script should log the message ``Hello, world!`` when run with "
"Python 3.2 or later."
msgstr ""

#: ../../howto/logging-cookbook.rst:1769
msgid "Customizing ``LogRecord``"
msgstr "Настройка ``LogRecord``"

#: ../../howto/logging-cookbook.rst:1771
msgid ""
"Every logging event is represented by a :class:`LogRecord` instance. When an "
"event is logged and not filtered out by a logger's level, a :class:"
"`LogRecord` is created, populated with information about the event and then "
"passed to the handlers for that logger (and its ancestors, up to and "
"including the logger where further propagation up the hierarchy is "
"disabled). Before Python 3.2, there were only two places where this creation "
"was done:"
msgstr ""
"Каждое событие регистрации представлено экземпляром :class:`LogRecord`. "
"Когда событие регистрируется и не отфильтровывается на уровне регистратора, "
"создается :class:`LogRecord`, заполняется информацией о событии, а затем "
"передается обработчикам этого регистратора (и его предков, вплоть до "
"регистратора включительно). где дальнейшее распространение вверх по иерархии "
"отключено). До Python 3.2 было только два места, где это творилось:"

#: ../../howto/logging-cookbook.rst:1778
msgid ""
":meth:`Logger.makeRecord`, which is called in the normal process of logging "
"an event. This invoked :class:`LogRecord` directly to create an instance."
msgstr ""
":meth:`Logger.makeRecord`, который вызывается в обычном процессе регистрации "
"события. Это вызвало :class:`LogRecord` напрямую для создания экземпляра."

#: ../../howto/logging-cookbook.rst:1781
msgid ""
":func:`makeLogRecord`, which is called with a dictionary containing "
"attributes to be added to the LogRecord. This is typically invoked when a "
"suitable dictionary has been received over the network (e.g. in pickle form "
"via a :class:`~handlers.SocketHandler`, or in JSON form via an :class:"
"`~handlers.HTTPHandler`)."
msgstr ""
":func:`makeLogRecord`, который вызывается со словарем, содержащим атрибуты, "
"которые необходимо добавить в LogRecord. Обычно это вызывается, когда по "
"сети получен подходящий словарь (например, в форме Pickle через :class:"
"`~handlers.SocketHandler` или в форме JSON через :class:`~handlers."
"HTTPHandler`)."

#: ../../howto/logging-cookbook.rst:1787
msgid ""
"This has usually meant that if you need to do anything special with a :class:"
"`LogRecord`, you've had to do one of the following."
msgstr ""
"Обычно это означало, что если вам нужно сделать что-то особенное с :class:"
"`LogRecord`, вам нужно было сделать одно из следующих действий."

#: ../../howto/logging-cookbook.rst:1790
msgid ""
"Create your own :class:`Logger` subclass, which overrides :meth:`Logger."
"makeRecord`, and set it using :func:`~logging.setLoggerClass` before any "
"loggers that you care about are instantiated."
msgstr ""
"Создайте свой собственный подкласс :class:`Logger`, который переопределяет :"
"meth:`Logger.makeRecord`, и установите его с помощью :func:`~logging."
"setLoggerClass` до того, как будут созданы экземпляры всех интересующих вас "
"регистраторов."

#: ../../howto/logging-cookbook.rst:1793
msgid ""
"Add a :class:`Filter` to a logger or handler, which does the necessary "
"special manipulation you need when its :meth:`~Filter.filter` method is "
"called."
msgstr ""
"Добавьте :class:`Filter` в регистратор или обработчик, который выполняет "
"необходимые специальные манипуляции, необходимые при вызове его метода :meth:"
"`~Filter.filter`."

#: ../../howto/logging-cookbook.rst:1797
msgid ""
"The first approach would be a little unwieldy in the scenario where (say) "
"several different libraries wanted to do different things. Each would "
"attempt to set its own :class:`Logger` subclass, and the one which did this "
"last would win."
msgstr ""
"Первый подход был бы немного громоздким в сценарии, где (скажем) несколько "
"разных библиотек хотят делать разные вещи. Каждый из них будет пытаться "
"установить свой собственный подкласс :class:`Logger`, и победит тот, кто "
"сделает это последним."

#: ../../howto/logging-cookbook.rst:1802
msgid ""
"The second approach works reasonably well for many cases, but does not allow "
"you to e.g. use a specialized subclass of :class:`LogRecord`. Library "
"developers can set a suitable filter on their loggers, but they would have "
"to remember to do this every time they introduced a new logger (which they "
"would do simply by adding new packages or modules and doing ::"
msgstr ""
"Второй подход работает достаточно хорошо во многих случаях, но не позволяет, "
"например, использовать специализированный подкласс :class:`LogRecord`. "
"Разработчики библиотек могут установить подходящий фильтр для своих средств "
"журналирования, но им придется не забывать делать это каждый раз, когда они "
"представляют новый регистратор (что они будут делать, просто добавляя новые "
"пакеты или модули и выполняя::"

#: ../../howto/logging-cookbook.rst:1810
msgid ""
"at module level). It's probably one too many things to think about. "
"Developers could also add the filter to a :class:`~logging.NullHandler` "
"attached to their top-level logger, but this would not be invoked if an "
"application developer attached a handler to a lower-level library logger --- "
"so output from that handler would not reflect the intentions of the library "
"developer."
msgstr ""
"на уровне модуля). Вероятно, это слишком много вещей, о которых нужно "
"думать. Разработчики также могут добавить фильтр в :class:`~logging."
"NullHandler`, прикрепленный к их средству ведения журнала верхнего уровня, "
"но это не будет вызываться, если разработчик приложения прикрепит обработчик "
"к средству ведения журнала библиотеки более низкого уровня --- поэтому "
"выведите из этого обработчика не будет отражать намерения разработчика "
"библиотеки."

#: ../../howto/logging-cookbook.rst:1816
msgid ""
"In Python 3.2 and later, :class:`~logging.LogRecord` creation is done "
"through a factory, which you can specify. The factory is just a callable you "
"can set with :func:`~logging.setLogRecordFactory`, and interrogate with :"
"func:`~logging.getLogRecordFactory`. The factory is invoked with the same "
"signature as the :class:`~logging.LogRecord` constructor, as :class:"
"`LogRecord` is the default setting for the factory."
msgstr ""
"В Python 3.2 и более поздних версиях создание :class:`~logging.LogRecord` "
"выполняется через фабрику, которую вы можете указать. Фабрика — это просто "
"вызываемый объект, который вы можете установить с помощью :func:`~logging."
"setLogRecordFactory` и опрашивать с помощью :func:`~logging."
"getLogRecordFactory`. Фабрика вызывается с той же сигнатурой, что и "
"конструктор :class:`~logging.LogRecord`, поскольку :class:`LogRecord` "
"является настройкой по умолчанию для фабрики."

#: ../../howto/logging-cookbook.rst:1823
msgid ""
"This approach allows a custom factory to control all aspects of LogRecord "
"creation. For example, you could return a subclass, or just add some "
"additional attributes to the record once created, using a pattern similar to "
"this::"
msgstr ""
"Этот подход позволяет специальной фабрике контролировать все аспекты "
"создания LogRecord. Например, вы можете вернуть подкласс или просто добавить "
"некоторые дополнительные атрибуты к созданной записи, используя шаблон, "
"подобный этому:"

#: ../../howto/logging-cookbook.rst:1836
msgid ""
"This pattern allows different libraries to chain factories together, and as "
"long as they don't overwrite each other's attributes or unintentionally "
"overwrite the attributes provided as standard, there should be no surprises. "
"However, it should be borne in mind that each link in the chain adds run-"
"time overhead to all logging operations, and the technique should only be "
"used when the use of a :class:`Filter` does not provide the desired result."
msgstr ""
"Этот шаблон позволяет различным библиотекам объединять фабрики в цепочку, и "
"пока они не перезаписывают атрибуты друг друга или непреднамеренно "
"перезаписывают атрибуты, предоставляемые в стандартной комплектации, "
"сюрпризов быть не должно. Однако следует иметь в виду, что каждое звено в "
"цепочке добавляет накладные расходы во время выполнения всех операций "
"журналирования, и этот метод следует использовать только тогда, когда "
"использование :class:`Filter` не дает желаемого результата."

#: ../../howto/logging-cookbook.rst:1847
msgid "Subclassing QueueHandler - a ZeroMQ example"
msgstr ""

#: ../../howto/logging-cookbook.rst:1849
msgid ""
"You can use a :class:`QueueHandler` subclass to send messages to other kinds "
"of queues, for example a ZeroMQ 'publish' socket. In the example below,the "
"socket is created separately and passed to the handler (as its 'queue')::"
msgstr ""
"Вы можете использовать подкласс :class:`QueueHandler` для отправки сообщений "
"в другие виды очередей, например сокет публикации ZeroMQ. В приведенном ниже "
"примере сокет создается отдельно и передается обработчику (как его "
"«очередь»)::"

#: ../../howto/logging-cookbook.rst:1868
msgid ""
"Of course there are other ways of organizing this, for example passing in "
"the data needed by the handler to create the socket::"
msgstr ""
"Конечно, есть и другие способы организации этого, например, передача данных, "
"необходимых обработчику для создания сокета:"

#: ../../howto/logging-cookbook.rst:1886
msgid "Subclassing QueueListener - a ZeroMQ example"
msgstr ""

#: ../../howto/logging-cookbook.rst:1888
msgid ""
"You can also subclass :class:`QueueListener` to get messages from other "
"kinds of queues, for example a ZeroMQ 'subscribe' socket. Here's an example::"
msgstr ""
"Вы также можете создать подкласс :class:`QueueListener` для получения "
"сообщений из других типов очередей, например сокета подписки ZeroMQ. Вот "
"пример::"

#: ../../howto/logging-cookbook.rst:1907 ../../howto/logging-cookbook.rst:3951
msgid "Module :mod:`logging`"
msgstr "Модуль :mod:`logging`"

#: ../../howto/logging-cookbook.rst:1907 ../../howto/logging-cookbook.rst:3951
msgid "API reference for the logging module."
msgstr "Ссылка на API для модуля ведения журнала."

#: ../../howto/logging-cookbook.rst:1910 ../../howto/logging-cookbook.rst:3954
msgid "Module :mod:`logging.config`"
msgstr "Модуль :mod:`logging.config`"

#: ../../howto/logging-cookbook.rst:1910 ../../howto/logging-cookbook.rst:3954
msgid "Configuration API for the logging module."
msgstr "API конфигурации для модуля журналирования."

#: ../../howto/logging-cookbook.rst:1913 ../../howto/logging-cookbook.rst:3957
msgid "Module :mod:`logging.handlers`"
msgstr "Модуль :mod:`logging.handlers`"

#: ../../howto/logging-cookbook.rst:1913 ../../howto/logging-cookbook.rst:3957
msgid "Useful handlers included with the logging module."
msgstr "Полезные обработчики, включенные в модуль журналирования."

#: ../../howto/logging-cookbook.rst:1915
msgid ":ref:`A basic logging tutorial <logging-basic-tutorial>`"
msgstr ""

#: ../../howto/logging-cookbook.rst:1917
msgid ":ref:`A more advanced logging tutorial <logging-advanced-tutorial>`"
msgstr ""

#: ../../howto/logging-cookbook.rst:1921
msgid "An example dictionary-based configuration"
msgstr "Пример конфигурации на основе словаря"

#: ../../howto/logging-cookbook.rst:1923
msgid ""
"Below is an example of a logging configuration dictionary - it's taken from "
"the `documentation on the Django project <https://docs.djangoproject.com/en/"
"stable/topics/logging/#configuring-logging>`_. This dictionary is passed to :"
"func:`~config.dictConfig` to put the configuration into effect::"
msgstr ""
"Ниже приведен пример словаря конфигурации журналирования — он взят из "
"`документации по проекту Django <https://docs.djangoproject.com/en/stable/"
"topics/logging/#configuring-logging>`_. Этот словарь передается в :func:"
"`~config.dictConfig` для применения конфигурации::"

#: ../../howto/logging-cookbook.rst:1979
msgid ""
"For more information about this configuration, you can see the `relevant "
"section <https://docs.djangoproject.com/en/stable/topics/logging/"
"#configuring-logging>`_ of the Django documentation."
msgstr ""
"Для получения дополнительной информации об этой конфигурации вы можете "
"увидеть `соответствующий раздел <https://docs.djangoproject.com/en/stable/"
"topics/logging/#configuring-logging>`_ документации Django."

#: ../../howto/logging-cookbook.rst:1986
msgid "Using a rotator and namer to customize log rotation processing"
msgstr ""
"Использование ротатора и неймера для настройки обработки ротации журналов"

#: ../../howto/logging-cookbook.rst:1988
msgid ""
"An example of how you can define a namer and rotator is given in the "
"following runnable script, which shows gzip compression of the log file::"
msgstr ""
"Пример того, как вы можете определить имя и ротатор, приведен в следующем "
"исполняемом скрипте, который показывает сжатие файла журнала gzip:"

#: ../../howto/logging-cookbook.rst:2019
msgid ""
"After running this, you will see six new files, five of which are compressed:"
msgstr "После запуска вы увидите шесть новых файлов, пять из которых сжаты:"

#: ../../howto/logging-cookbook.rst:2032
msgid "A more elaborate multiprocessing example"
msgstr "Более сложный пример многопроцессорной обработки"

#: ../../howto/logging-cookbook.rst:2034
msgid ""
"The following working example shows how logging can be used with "
"multiprocessing using configuration files. The configurations are fairly "
"simple, but serve to illustrate how more complex ones could be implemented "
"in a real multiprocessing scenario."
msgstr ""
"В следующем рабочем примере показано, как можно использовать ведение журнала "
"при многопроцессорной обработке с использованием файлов конфигурации. "
"Конфигурации довольно просты, но служат для иллюстрации того, как более "
"сложные конфигурации могут быть реализованы в реальном сценарии "
"многопроцессорной обработки."

#: ../../howto/logging-cookbook.rst:2039
msgid ""
"In the example, the main process spawns a listener process and some worker "
"processes. Each of the main process, the listener and the workers have three "
"separate configurations (the workers all share the same configuration). We "
"can see logging in the main process, how the workers log to a QueueHandler "
"and how the listener implements a QueueListener and a more complex logging "
"configuration, and arranges to dispatch events received via the queue to the "
"handlers specified in the configuration. Note that these configurations are "
"purely illustrative, but you should be able to adapt this example to your "
"own scenario."
msgstr ""
"В этом примере основной процесс порождает процесс-слушатель и несколько "
"рабочих процессов. Каждый основной процесс, прослушиватель и рабочие имеют "
"три отдельные конфигурации (все рабочие имеют одну и ту же конфигурацию). Мы "
"можем увидеть ведение журнала в основном процессе, как рабочие "
"регистрируются в QueueHandler и как прослушиватель реализует QueueListener и "
"более сложную конфигурацию журналирования, а также организует отправку "
"событий, полученных через очередь, обработчикам, указанным в конфигурации. "
"Обратите внимание, что эти конфигурации являются чисто иллюстративными, но "
"вы сможете адаптировать этот пример к своему собственному сценарию."

#: ../../howto/logging-cookbook.rst:2049
msgid ""
"Here's the script - the docstrings and the comments hopefully explain how it "
"works::"
msgstr ""
"Вот скрипт - мы надеемся, что строки документации и комментарии объясняют, "
"как он работает::"

#: ../../howto/logging-cookbook.rst:2261
msgid "Inserting a BOM into messages sent to a SysLogHandler"
msgstr "Вставка спецификации в сообщения, отправляемые в SysLogHandler"

#: ../../howto/logging-cookbook.rst:2263
msgid ""
":rfc:`5424` requires that a Unicode message be sent to a syslog daemon as a "
"set of bytes which have the following structure: an optional pure-ASCII "
"component, followed by a UTF-8 Byte Order Mark (BOM), followed by Unicode "
"encoded using UTF-8. (See the :rfc:`relevant section of the specification "
"<5424#section-6>`.)"
msgstr ""
":rfc:`5424` требует, чтобы сообщение Unicode было отправлено демону "
"системного журнала в виде набора байтов, которые имеют следующую структуру: "
"необязательный компонент чистого ASCII, за которым следует метка порядка "
"байтов UTF-8 (BOM), за которой следует Юникод в кодировке UTF-8. (См. :rfc:"
"`соответствующий раздел спецификации <5424#section-6>`.)"

#: ../../howto/logging-cookbook.rst:2269
msgid ""
"In Python 3.1, code was added to :class:`~logging.handlers.SysLogHandler` to "
"insert a BOM into the message, but unfortunately, it was implemented "
"incorrectly, with the BOM appearing at the beginning of the message and "
"hence not allowing any pure-ASCII component to appear before it."
msgstr ""
"В Python 3.1 в :class:`~logging.handlers.SysLogHandler` был добавлен код для "
"вставки спецификации в сообщение, но, к сожалению, он был реализован "
"неправильно: спецификация появлялась в начале сообщения и, следовательно, не "
"допускала никаких действий. перед ним появится компонент чистого ASCII."

#: ../../howto/logging-cookbook.rst:2275
msgid ""
"As this behaviour is broken, the incorrect BOM insertion code is being "
"removed from Python 3.2.4 and later. However, it is not being replaced, and "
"if you want to produce :rfc:`5424`-compliant messages which include a BOM, "
"an optional pure-ASCII sequence before it and arbitrary Unicode after it, "
"encoded using UTF-8, then you need to do the following:"
msgstr ""
"Поскольку такое поведение нарушено, неправильный код вставки спецификации "
"удаляется из Python 3.2.4 и более поздних версий. Однако он не заменяется, и "
"если вы хотите создавать сообщения, соответствующие :rfc:`5424`, которые "
"включают спецификацию, необязательную последовательность чистого ASCII перед "
"ней и произвольный Unicode после нее, закодированный с использованием UTF-8, "
"тогда вы необходимо сделать следующее:"

#: ../../howto/logging-cookbook.rst:2281
msgid ""
"Attach a :class:`~logging.Formatter` instance to your :class:`~logging."
"handlers.SysLogHandler` instance, with a format string such as::"
msgstr ""
"Прикрепите экземпляр :class:`~logging.Formatter` к вашему экземпляру :class:"
"`~logging.handlers.SysLogHandler` со строкой формата, например:"

#: ../../howto/logging-cookbook.rst:2287
msgid ""
"The Unicode code point U+FEFF, when encoded using UTF-8, will be encoded as "
"a UTF-8 BOM -- the byte-string ``b'\\xef\\xbb\\xbf'``."
msgstr ""
"Кодовая точка Unicode U+FEFF при кодировке с использованием UTF-8 будет "
"закодирована как спецификация UTF-8 — строка байтов ``b'\\xef\\xbb\\xbf'``."

#: ../../howto/logging-cookbook.rst:2290
msgid ""
"Replace the ASCII section with whatever placeholders you like, but make sure "
"that the data that appears in there after substitution is always ASCII (that "
"way, it will remain unchanged after UTF-8 encoding)."
msgstr ""
"Замените раздел ASCII любыми заполнителями, которые вам нравятся, но "
"убедитесь, что данные, которые появляются там после замены, всегда являются "
"ASCII (таким образом, они останутся неизменными после кодирования UTF-8)."

#: ../../howto/logging-cookbook.rst:2294
msgid ""
"Replace the Unicode section with whatever placeholders you like; if the data "
"which appears there after substitution contains characters outside the ASCII "
"range, that's fine -- it will be encoded using UTF-8."
msgstr ""
"Замените раздел Unicode любыми заполнителями, которые вам нравятся; если "
"данные, которые появляются там после замены, содержат символы вне диапазона "
"ASCII, это нормально — они будут закодированы с использованием UTF-8."

#: ../../howto/logging-cookbook.rst:2298
msgid ""
"The formatted message *will* be encoded using UTF-8 encoding by "
"``SysLogHandler``. If you follow the above rules, you should be able to "
"produce :rfc:`5424`-compliant messages. If you don't, logging may not "
"complain, but your messages will not be RFC 5424-compliant, and your syslog "
"daemon may complain."
msgstr ""
"Отформатированное сообщение *будет* закодировано с использованием кодировки "
"UTF-8 с помощью ``SysLogHandler``. Если вы будете следовать приведенным выше "
"правилам, вы сможете создавать сообщения, соответствующие стандарту :rfc:"
"`5424`. Если вы этого не сделаете, журналирование может не жаловаться, но "
"ваши сообщения не будут соответствовать RFC 5424, и ваш демон системного "
"журнала может жаловаться."

#: ../../howto/logging-cookbook.rst:2305
msgid "Implementing structured logging"
msgstr "Реализация структурированного логирования"

#: ../../howto/logging-cookbook.rst:2307
msgid ""
"Although most logging messages are intended for reading by humans, and thus "
"not readily machine-parseable, there might be circumstances where you want "
"to output messages in a structured format which *is* capable of being parsed "
"by a program (without needing complex regular expressions to parse the log "
"message). This is straightforward to achieve using the logging package. "
"There are a number of ways in which this could be achieved, but the "
"following is a simple approach which uses JSON to serialise the event in a "
"machine-parseable manner::"
msgstr ""
"Хотя большинство сообщений журнала предназначены для чтения людьми и, "
"следовательно, не поддаются машинному анализу, могут возникнуть "
"обстоятельства, когда вы захотите выводить сообщения в структурированном "
"формате, который *может* быть проанализирован программой (без необходимости "
"использования сложных регулярных выражений). для анализа сообщения журнала). "
"Этого легко добиться с помощью пакета журналирования. Этого можно добиться "
"несколькими способами, но ниже приведен простой подход, который использует "
"JSON для сериализации события машинным анализом:"

#: ../../howto/logging-cookbook.rst:2331
msgid "If the above script is run, it prints:"
msgstr "Если приведенный выше сценарий запускается, он печатает:"

#: ../../howto/logging-cookbook.rst:2337 ../../howto/logging-cookbook.rst:2379
msgid ""
"Note that the order of items might be different according to the version of "
"Python used."
msgstr ""
"Обратите внимание, что порядок элементов может отличаться в зависимости от "
"используемой версии Python."

#: ../../howto/logging-cookbook.rst:2340
msgid ""
"If you need more specialised processing, you can use a custom JSON encoder, "
"as in the following complete example::"
msgstr ""
"Если вам нужна более специализированная обработка, вы можете использовать "
"собственный кодировщик JSON, как показано в следующем полном примере:"

#: ../../howto/logging-cookbook.rst:2373
msgid "When the above script is run, it prints:"
msgstr "Когда приведенный выше сценарий запускается, он печатает:"

#: ../../howto/logging-cookbook.rst:2388
msgid "Customizing handlers with :func:`dictConfig`"
msgstr "Настройка обработчиков с помощью :func:`dictConfig`"

#: ../../howto/logging-cookbook.rst:2390
msgid ""
"There are times when you want to customize logging handlers in particular "
"ways, and if you use :func:`dictConfig` you may be able to do this without "
"subclassing. As an example, consider that you may want to set the ownership "
"of a log file. On POSIX, this is easily done using :func:`shutil.chown`, but "
"the file handlers in the stdlib don't offer built-in support. You can "
"customize handler creation using a plain function such as::"
msgstr ""
"Бывают случаи, когда вам нужно настроить обработчики журналирования "
"определенным образом, и если вы используете :func:`dictConfig`, вы сможете "
"сделать это без создания подклассов. В качестве примера предположим, что вы "
"можете установить владельца файла журнала. В POSIX это легко сделать с "
"помощью :func:`shutil.chown`, но обработчики файлов в стандартной библиотеке "
"не имеют встроенной поддержки. Вы можете настроить создание обработчика, "
"используя простую функцию, например:"

#: ../../howto/logging-cookbook.rst:2404
msgid ""
"You can then specify, in a logging configuration passed to :func:"
"`dictConfig`, that a logging handler be created by calling this function::"
msgstr ""
"Затем вы можете указать в конфигурации журналирования, переданной в :func:"
"`dictConfig`, что обработчик журналирования должен быть создан путем вызова "
"этой функции::"

#: ../../howto/logging-cookbook.rst:2437
msgid ""
"In this example I am setting the ownership using the ``pulse`` user and "
"group, just for the purposes of illustration. Putting it together into a "
"working script, ``chowntest.py``::"
msgstr ""
"В этом примере я устанавливаю владельца, используя пользователя и группу "
"«pulse», просто в целях иллюстрации. Собираем все это в рабочий скрипт "
"``chowntest.py``::"

#: ../../howto/logging-cookbook.rst:2484
msgid "To run this, you will probably need to run as ``root``:"
msgstr ""
"Чтобы запустить это, вам, вероятно, потребуется запустить от имени root:"

#: ../../howto/logging-cookbook.rst:2494
msgid ""
"Note that this example uses Python 3.3 because that's where :func:`shutil."
"chown` makes an appearance. This approach should work with any Python "
"version that supports :func:`dictConfig` - namely, Python 2.7, 3.2 or later. "
"With pre-3.3 versions, you would need to implement the actual ownership "
"change using e.g. :func:`os.chown`."
msgstr ""
"Обратите внимание, что в этом примере используется Python 3.3, потому что "
"именно здесь появляется :func:`shutil.chown`. Этот подход должен работать с "
"любой версией Python, поддерживающей :func:`dictConfig`, а именно с Python "
"2.7, 3.2 или новее. В версиях до 3.3 вам необходимо будет реализовать "
"фактическую смену владельца, например, с помощью :func:`os.chown`."

#: ../../howto/logging-cookbook.rst:2500
msgid ""
"In practice, the handler-creating function may be in a utility module "
"somewhere in your project. Instead of the line in the configuration::"
msgstr ""
"На практике функция создания обработчика может находиться в служебном модуле "
"где-нибудь в вашем проекте. Вместо строки в конфигурации::"

#: ../../howto/logging-cookbook.rst:2505
msgid "you could use e.g.::"
msgstr "вы можете использовать, например::"

#: ../../howto/logging-cookbook.rst:2509
msgid ""
"where ``project.util`` can be replaced with the actual name of the package "
"where the function resides. In the above working script, using ``'ext://"
"__main__.owned_file_handler'`` should work. Here, the actual callable is "
"resolved by :func:`dictConfig` from the ``ext://`` specification."
msgstr ""
"где ``project.util`` можно заменить фактическим именем пакета, в котором "
"находится функция. В приведенном выше рабочем сценарии использование ext://"
"__main__.owned_file_handler должно работать. Здесь фактический вызываемый "
"объект разрешается с помощью :func:`dictConfig` из спецификации ``ext://``."

#: ../../howto/logging-cookbook.rst:2514
msgid ""
"This example hopefully also points the way to how you could implement other "
"types of file change - e.g. setting specific POSIX permission bits - in the "
"same way, using :func:`os.chmod`."
msgstr ""
"Мы надеемся, что этот пример также указывает на то, как вы могли бы "
"реализовать другие типы изменений файлов - например, установку определенных "
"битов разрешений POSIX - таким же образом, используя :func:`os.chmod`."

#: ../../howto/logging-cookbook.rst:2518
msgid ""
"Of course, the approach could also be extended to types of handler other "
"than a :class:`~logging.FileHandler` - for example, one of the rotating file "
"handlers, or a different type of handler altogether."
msgstr ""
"Конечно, этот подход также можно распространить на типы обработчиков, "
"отличные от :class:`~logging.FileHandler` - например, один из обработчиков "
"вращающихся файлов или вообще другой тип обработчика."

#: ../../howto/logging-cookbook.rst:2528
msgid "Using particular formatting styles throughout your application"
msgstr "Использование определенных стилей форматирования в вашем приложении"

#: ../../howto/logging-cookbook.rst:2530
msgid ""
"In Python 3.2, the :class:`~logging.Formatter` gained a ``style`` keyword "
"parameter which, while defaulting to ``%`` for backward compatibility, "
"allowed the specification of ``{`` or ``$`` to support the formatting "
"approaches supported by :meth:`str.format` and :class:`string.Template`. "
"Note that this governs the formatting of logging messages for final output "
"to logs, and is completely orthogonal to how an individual logging message "
"is constructed."
msgstr ""
"В Python 3.2 :class:`~logging.Formatter` получил параметр ключевого слова "
"``style``, который, хотя по умолчанию для ``%`` для обратной совместимости, "
"позволял указывать ``{`` или ``$ `` для поддержки подходов к форматированию, "
"поддерживаемых :meth:`str.format` и :class:`string.Template`. Обратите "
"внимание, что это определяет форматирование сообщений журнала для "
"окончательного вывода в журналы и полностью соответствует тому, как "
"создается отдельное сообщение журнала."

#: ../../howto/logging-cookbook.rst:2537
msgid ""
"Logging calls (:meth:`~Logger.debug`, :meth:`~Logger.info` etc.) only take "
"positional parameters for the actual logging message itself, with keyword "
"parameters used only for determining options for how to handle the logging "
"call (e.g. the ``exc_info`` keyword parameter to indicate that traceback "
"information should be logged, or the ``extra`` keyword parameter to indicate "
"additional contextual information to be added to the log). So you cannot "
"directly make logging calls using :meth:`str.format` or :class:`string."
"Template` syntax, because internally the logging package uses %-formatting "
"to merge the format string and the variable arguments. There would be no "
"changing this while preserving backward compatibility, since all logging "
"calls which are out there in existing code will be using %-format strings."
msgstr ""
"Вызовы ведения журнала (:meth:`~Logger.debug`, :meth:`~Logger.info` и т. д.) "
"принимают только позиционные параметры для самого фактического сообщения "
"журнала, а параметры ключевых слов используются только для определения "
"вариантов обработки журнала. вызов (например, параметр ключевого слова "
"``exc_info``, чтобы указать, что информация трассировки должна быть "
"зарегистрирована, или параметр ключевого слова ``extra``, чтобы указать "
"дополнительную контекстную информацию, которая должна быть добавлена ​​в "
"журнал). Таким образом, вы не можете напрямую выполнять вызовы "
"журналирования, используя синтаксис :meth:`str.format` или :class:`string."
"Template`, поскольку внутри пакета журналирования используется %-f "
"форматирование для объединения строки формата и аргументов переменной. Это "
"не будет изменено при сохранении обратной совместимости, поскольку все "
"вызовы журналирования, которые есть в существующем коде, будут использовать "
"%-f форматировать строки."

#: ../../howto/logging-cookbook.rst:2549
msgid ""
"There have been suggestions to associate format styles with specific "
"loggers, but that approach also runs into backward compatibility problems "
"because any existing code could be using a given logger name and using %-"
"formatting."
msgstr ""
"Были предложения связать стили формата с конкретными регистраторами, но этот "
"подход также сталкивается с проблемами обратной совместимости, поскольку "
"любой существующий код может использовать данное имя регистратора и "
"использовать %-f форматирование."

#: ../../howto/logging-cookbook.rst:2553
msgid ""
"For logging to work interoperably between any third-party libraries and your "
"code, decisions about formatting need to be made at the level of the "
"individual logging call. This opens up a couple of ways in which alternative "
"formatting styles can be accommodated."
msgstr ""
"Чтобы журналирование работало между любыми сторонними библиотеками и вашим "
"кодом, решения о форматировании должны приниматься на уровне отдельного "
"вызова журнала. Это открывает несколько способов использования "
"альтернативных стилей форматирования."

#: ../../howto/logging-cookbook.rst:2560
msgid "Using LogRecord factories"
msgstr "Использование фабрик LogRecord"

#: ../../howto/logging-cookbook.rst:2562
msgid ""
"In Python 3.2, along with the :class:`~logging.Formatter` changes mentioned "
"above, the logging package gained the ability to allow users to set their "
"own :class:`LogRecord` subclasses, using the :func:`setLogRecordFactory` "
"function. You can use this to set your own subclass of :class:`LogRecord`, "
"which does the Right Thing by overriding the :meth:`~LogRecord.getMessage` "
"method. The base class implementation of this method is where the ``msg % "
"args`` formatting happens, and where you can substitute your alternate "
"formatting; however, you should be careful to support all formatting styles "
"and allow %-formatting as the default, to ensure interoperability with other "
"code. Care should also be taken to call ``str(self.msg)``, just as the base "
"implementation does."
msgstr ""
"В Python 3.2, наряду с упомянутыми выше изменениями :class:`~logging."
"Formatter`, пакет журналирования получил возможность позволять пользователям "
"устанавливать свои собственные подклассы :class:`LogRecord`, используя "
"функцию :func:`setLogRecordFactory`. . Вы можете использовать это, чтобы "
"установить свой собственный подкласс :class:`LogRecord`, который делает "
"правильные вещи, переопределяя метод :meth:`~LogRecord.getMessage`. "
"Реализация этого метода в базовом классе - это место, где происходит "
"форматирование ``msg % args``, и где вы можете заменить альтернативное "
"форматирование; однако вы должны быть осторожны, чтобы поддерживать все "
"стили форматирования и разрешить %-f ormatting по умолчанию, чтобы "
"обеспечить совместимость с другим кодом. Также следует позаботиться о вызове "
"``str(self.msg)``, как это делает базовая реализация."

#: ../../howto/logging-cookbook.rst:2573
msgid ""
"Refer to the reference documentation on :func:`setLogRecordFactory` and :"
"class:`LogRecord` for more information."
msgstr ""
"Для получения дополнительной информации обратитесь к справочной документации "
"по :func:`setLogRecordFactory` и :class:`LogRecord`."

#: ../../howto/logging-cookbook.rst:2578
msgid "Using custom message objects"
msgstr "Использование пользовательских объектов сообщений"

#: ../../howto/logging-cookbook.rst:2580
msgid ""
"There is another, perhaps simpler way that you can use {}- and $- formatting "
"to construct your individual log messages. You may recall (from :ref:"
"`arbitrary-object-messages`) that when logging you can use an arbitrary "
"object as a message format string, and that the logging package will call :"
"func:`str` on that object to get the actual format string. Consider the "
"following two classes::"
msgstr ""
"Существует другой, возможно, более простой способ использования "
"форматирования {}- и $- для создания индивидуальных сообщений журнала. Вы, "
"возможно, помните (из :ref:`prompt-object-messages`), что при регистрации вы "
"можете использовать произвольный объект в качестве строки формата сообщения, "
"и что пакет регистрации будет вызывать :func:`str` для этого объекта, чтобы "
"получить фактическая строка формата. Рассмотрим следующие два класса:"

#: ../../howto/logging-cookbook.rst:2605
msgid ""
"Either of these can be used in place of a format string, to allow {}- or $-"
"formatting to be used to build the actual \"message\" part which appears in "
"the formatted log output in place of “%(message)s” or “{message}” or "
"“$message”. If you find it a little unwieldy to use the class names whenever "
"you want to log something, you can make it more palatable if you use an "
"alias such as ``M`` or ``_`` for the message (or perhaps ``__``, if you are "
"using ``_`` for localization)."
msgstr ""
"Любой из них можно использовать вместо строки формата, чтобы можно было "
"использовать форматирование {} или $ для построения фактической части "
"«сообщения», которая появляется в выводе форматированного журнала вместо « "
"%(сообщение)с ” или “{message}” или “$message”. Если вам кажется немного "
"громоздким использовать имена классов всякий раз, когда вы хотите что-то "
"записать, вы можете сделать это более удобным, если вы используете "
"псевдоним, такой как ``M`` или ``_`` для сообщения (или, возможно, ``M`` или "
"``_`` для сообщения (или, возможно, ``M`` или ``_`` для сообщения (или, "
"возможно, `__``, если вы используете ``_`` для локализации)."

#: ../../howto/logging-cookbook.rst:2613
msgid ""
"Examples of this approach are given below. Firstly, formatting with :meth:"
"`str.format`::"
msgstr ""
"Примеры такого подхода приведены ниже. Во-первых, форматирование с помощью :"
"meth:`str.format`::"

#: ../../howto/logging-cookbook.rst:2627
msgid "Secondly, formatting with :class:`string.Template`::"
msgstr "Во-вторых, форматирование с помощью :class:`string.Template`::"

#: ../../howto/logging-cookbook.rst:2634
msgid ""
"One thing to note is that you pay no significant performance penalty with "
"this approach: the actual formatting happens not when you make the logging "
"call, but when (and if) the logged message is actually about to be output to "
"a log by a handler. So the only slightly unusual thing which might trip you "
"up is that the parentheses go around the format string and the arguments, "
"not just the format string. That’s because the __ notation is just syntax "
"sugar for a constructor call to one of the ``XXXMessage`` classes shown "
"above."
msgstr ""

#: ../../howto/logging-cookbook.rst:2648
msgid "Configuring filters with :func:`dictConfig`"
msgstr "Настройка фильтров с помощью :func:`dictConfig`"

#: ../../howto/logging-cookbook.rst:2650
msgid ""
"You *can* configure filters using :func:`~logging.config.dictConfig`, though "
"it might not be obvious at first glance how to do it (hence this recipe). "
"Since :class:`~logging.Filter` is the only filter class included in the "
"standard library, and it is unlikely to cater to many requirements (it's "
"only there as a base class), you will typically need to define your own :"
"class:`~logging.Filter` subclass with an overridden :meth:`~logging.Filter."
"filter` method. To do this, specify the ``()`` key in the configuration "
"dictionary for the filter, specifying a callable which will be used to "
"create the filter (a class is the most obvious, but you can provide any "
"callable which returns a :class:`~logging.Filter` instance). Here is a "
"complete example::"
msgstr ""
"Вы *можете* настроить фильтры с помощью :func:`~logging.config.dictConfig`, "
"хотя на первый взгляд может быть неочевидно, как это сделать (отсюда и этот "
"рецепт). Поскольку :class:`~logging.Filter` — единственный класс фильтра, "
"включенный в стандартную библиотеку, и он вряд ли будет удовлетворять многим "
"требованиям (он существует только в качестве базового класса), вам обычно "
"потребуется определить свой собственный :class. Подкласс :`~logging.Filter` "
"с переопределенным методом :meth:`~logging.Filter.filter`. Для этого укажите "
"ключ ``()`` в словаре конфигурации для фильтра, указав вызываемый объект, "
"который будет использоваться для создания фильтра (класс является наиболее "
"очевидным, но вы можете предоставить любой вызываемый объект, который "
"возвращает : class:`~logging.Filter` экземпляр). Вот полный пример:"

#: ../../howto/logging-cookbook.rst:2703
msgid ""
"This example shows how you can pass configuration data to the callable which "
"constructs the instance, in the form of keyword parameters. When run, the "
"above script will print:"
msgstr ""
"В этом примере показано, как можно передать данные конфигурации вызываемому "
"объекту, который создает экземпляр, в форме параметров ключевого слова. При "
"запуске приведенный выше сценарий выведет:"

#: ../../howto/logging-cookbook.rst:2711
msgid "which shows that the filter is working as configured."
msgstr "который показывает, что фильтр работает так, как настроено."

#: ../../howto/logging-cookbook.rst:2713
msgid "A couple of extra points to note:"
msgstr "Еще пара моментов, на которые стоит обратить внимание:"

#: ../../howto/logging-cookbook.rst:2715
msgid ""
"If you can't refer to the callable directly in the configuration (e.g. if it "
"lives in a different module, and you can't import it directly where the "
"configuration dictionary is), you can use the form ``ext://...`` as "
"described in :ref:`logging-config-dict-externalobj`. For example, you could "
"have used the text ``'ext://__main__.MyFilter'`` instead of ``MyFilter`` in "
"the above example."
msgstr ""
"Если вы не можете сослаться на вызываемый объект непосредственно в "
"конфигурации (например, если он находится в другом модуле, и вы не можете "
"импортировать его непосредственно туда, где находится словарь конфигурации), "
"вы можете использовать форму ext://. ..`` как описано в :ref:`logging-config-"
"dict-externalobj`. Например, вы могли бы использовать текст ext://__main__."
"MyFilter вместо MyFilter в приведенном выше примере."

#: ../../howto/logging-cookbook.rst:2722
msgid ""
"As well as for filters, this technique can also be used to configure custom "
"handlers and formatters. See :ref:`logging-config-dict-userdef` for more "
"information on how logging supports using user-defined objects in its "
"configuration, and see the other cookbook recipe :ref:`custom-handlers` "
"above."
msgstr ""
"Помимо фильтров, этот метод также можно использовать для настройки "
"пользовательских обработчиков и средств форматирования. См. :ref:`logging-"
"config-dict-userdef` для получения дополнительной информации о том, как "
"ведение журнала поддерживает использование определяемых пользователем "
"объектов в своей конфигурации, а также см. другой рецепт кулинарной книги :"
"ref:`custom-handlers` выше."

#: ../../howto/logging-cookbook.rst:2731
msgid "Customized exception formatting"
msgstr "Настраиваемое форматирование исключений"

#: ../../howto/logging-cookbook.rst:2733
msgid ""
"There might be times when you want to do customized exception formatting - "
"for argument's sake, let's say you want exactly one line per logged event, "
"even when exception information is present. You can do this with a custom "
"formatter class, as shown in the following example::"
msgstr ""
"Могут быть случаи, когда вы захотите настроить форматирование исключений — в "
"качестве аргумента, скажем, вам нужна ровно одна строка для каждого "
"зарегистрированного события, даже если информация об исключении "
"присутствует. Вы можете сделать это с помощью специального класса "
"форматирования, как показано в следующем примере:"

#: ../../howto/logging-cookbook.rst:2774
msgid "When run, this produces a file with exactly two lines:"
msgstr "При запуске создается файл ровно с двумя строками:"

#: ../../howto/logging-cookbook.rst:2781
msgid ""
"While the above treatment is simplistic, it points the way to how exception "
"information can be formatted to your liking. The :mod:`traceback` module may "
"be helpful for more specialized needs."
msgstr ""
"Хотя приведенная выше трактовка упрощена, она указывает путь к тому, как "
"информацию об исключении можно отформатировать по своему вкусу. Модуль :mod:"
"`traceback` может быть полезен для более специализированных нужд."

#: ../../howto/logging-cookbook.rst:2788
msgid "Speaking logging messages"
msgstr "Озвучивание сообщений журнала"

#: ../../howto/logging-cookbook.rst:2790
msgid ""
"There might be situations when it is desirable to have logging messages "
"rendered in an audible rather than a visible format. This is easy to do if "
"you have text-to-speech (TTS) functionality available in your system, even "
"if it doesn't have a Python binding. Most TTS systems have a command line "
"program you can run, and this can be invoked from a handler using :mod:"
"`subprocess`. It's assumed here that TTS command line programs won't expect "
"to interact with users or take a long time to complete, and that the "
"frequency of logged messages will be not so high as to swamp the user with "
"messages, and that it's acceptable to have the messages spoken one at a time "
"rather than concurrently, The example implementation below waits for one "
"message to be spoken before the next is processed, and this might cause "
"other handlers to be kept waiting. Here is a short example showing the "
"approach, which assumes that the ``espeak`` TTS package is available::"
msgstr ""
"Могут возникнуть ситуации, когда желательно, чтобы сообщения журнала "
"отображались в звуковом, а не в видимом формате. Это легко сделать, если в "
"вашей системе доступна функция преобразования текста в речь (TTS), даже если "
"она не имеет привязки к Python. Большинство систем TTS имеют программу "
"командной строки, которую вы можете запустить, и ее можно вызвать из "
"обработчика с помощью :mod:`subprocess`. Здесь предполагается, что программы "
"командной строки TTS не будут взаимодействовать с пользователями и не будут "
"требовать много времени для завершения, и что частота регистрируемых "
"сообщений не будет настолько высокой, чтобы перегружать пользователя "
"сообщениями, и что допустимо иметь сообщения произносятся по одному, а не "
"одновременно. В приведенном ниже примере реализации ожидается произнесение "
"одного сообщения, прежде чем будет обработано следующее, и это может "
"привести к тому, что другие обработчики будут продолжать ждать. Вот краткий "
"пример, показывающий подход, который предполагает, что доступен пакет TTS "
"``espeak``:"

#: ../../howto/logging-cookbook.rst:2832
msgid ""
"When run, this script should say \"Hello\" and then \"Goodbye\" in a female "
"voice."
msgstr ""
"При запуске этот скрипт должен сказать «Привет», а затем «До свидания» "
"женским голосом."

#: ../../howto/logging-cookbook.rst:2834
msgid ""
"The above approach can, of course, be adapted to other TTS systems and even "
"other systems altogether which can process messages via external programs "
"run from a command line."
msgstr ""
"Вышеупомянутый подход, конечно, может быть адаптирован к другим системам TTS "
"и даже к другим системам в целом, которые могут обрабатывать сообщения с "
"помощью внешних программ, запускаемых из командной строки."

#: ../../howto/logging-cookbook.rst:2842
msgid "Buffering logging messages and outputting them conditionally"
msgstr "Буферизация сообщений журнала и их условный вывод"

#: ../../howto/logging-cookbook.rst:2844
msgid ""
"There might be situations where you want to log messages in a temporary area "
"and only output them if a certain condition occurs. For example, you may "
"want to start logging debug events in a function, and if the function "
"completes without errors, you don't want to clutter the log with the "
"collected debug information, but if there is an error, you want all the "
"debug information to be output as well as the error."
msgstr ""
"Могут возникнуть ситуации, когда вы захотите регистрировать сообщения во "
"временной области и выводить их только в случае возникновения определенного "
"условия. Например, вы можете захотеть начать регистрацию событий отладки в "
"функции, и если функция завершается без ошибок, вы не хотите загромождать "
"журнал собранной отладочной информацией, но если есть ошибка, вы хотите, "
"чтобы вся отладочная информация информация для вывода, а также ошибка."

#: ../../howto/logging-cookbook.rst:2851
msgid ""
"Here is an example which shows how you could do this using a decorator for "
"your functions where you want logging to behave this way. It makes use of "
"the :class:`logging.handlers.MemoryHandler`, which allows buffering of "
"logged events until some condition occurs, at which point the buffered "
"events are ``flushed`` - passed to another handler (the ``target`` handler) "
"for processing. By default, the ``MemoryHandler`` flushed when its buffer "
"gets filled up or an event whose level is greater than or equal to a "
"specified threshold is seen. You can use this recipe with a more specialised "
"subclass of ``MemoryHandler`` if you want custom flushing behavior."
msgstr ""
"Вот пример, который показывает, как вы можете сделать это, используя "
"декоратор для ваших функций, где вы хотите, чтобы журналирование велось "
"таким образом. Он использует :class:`logging.handlers.MemoryHandler`, "
"который позволяет буферизовать зарегистрированные события до тех пор, пока "
"не возникнет какое-либо условие, после чего буферизованные события "
"``сбрасываются`` - передаются другому обработчику (``target``). ` "
"обработчик) для обработки. По умолчанию MemoryHandler сбрасывается, когда "
"его буфер заполняется или наблюдается событие, уровень которого превышает "
"или равен указанному пороговому значению. Вы можете использовать этот рецепт "
"с более специализированным подклассом MemoryHandler, если хотите настроить "
"поведение очистки."

#: ../../howto/logging-cookbook.rst:2861
msgid ""
"The example script has a simple function, ``foo``, which just cycles through "
"all the logging levels, writing to ``sys.stderr`` to say what level it's "
"about to log at, and then actually logging a message at that level. You can "
"pass a parameter to ``foo`` which, if true, will log at ERROR and CRITICAL "
"levels - otherwise, it only logs at DEBUG, INFO and WARNING levels."
msgstr ""
"В примере сценария есть простая функция ``foo``, которая просто циклически "
"проходит все уровни журналирования, записывая в ``sys.stderr``, чтобы "
"сообщить, на каком уровне он собирается войти, а затем фактически "
"регистрирует сообщение на этом уровне. уровень. Вы можете передать параметр "
"``foo``, который, если он равен true, будет регистрироваться на уровнях "
"ОШИБКА и КРИТИЧЕСКИЙ - в противном случае он будет регистрироваться только "
"на уровнях ОТЛАДКА, ИНФОРМАЦИЯ и ПРЕДУПРЕЖДЕНИЕ."

#: ../../howto/logging-cookbook.rst:2867
msgid ""
"The script just arranges to decorate ``foo`` with a decorator which will do "
"the conditional logging that's required. The decorator takes a logger as a "
"parameter and attaches a memory handler for the duration of the call to the "
"decorated function. The decorator can be additionally parameterised using a "
"target handler, a level at which flushing should occur, and a capacity for "
"the buffer (number of records buffered). These default to a :class:`~logging."
"StreamHandler` which writes to ``sys.stderr``, ``logging.ERROR`` and ``100`` "
"respectively."
msgstr ""
"Скрипт просто украшает ``foo`` декоратором, который будет выполнять "
"необходимую условную регистрацию. Декоратор принимает регистратор в качестве "
"параметра и присоединяет обработчик памяти на время вызова декорируемой "
"функции. Декоратор может быть дополнительно параметризован с помощью "
"целевого обработчика, уровня, на котором должна произойти очистка, и емкости "
"буфера (количества записей в буфере). По умолчанию это :class:`~logging."
"StreamHandler`, который записывает в ``sys.stderr``, ``logging.ERROR`` и "
"``100`` соответственно."

#: ../../howto/logging-cookbook.rst:2875
msgid "Here's the script::"
msgstr "Вот скрипт::"

#: ../../howto/logging-cookbook.rst:2938
msgid "When this script is run, the following output should be observed:"
msgstr "При запуске этого сценария должен наблюдаться следующий вывод:"

#: ../../howto/logging-cookbook.rst:2968
msgid ""
"As you can see, actual logging output only occurs when an event is logged "
"whose severity is ERROR or greater, but in that case, any previous events at "
"lower severities are also logged."
msgstr ""
"Как вы можете видеть, фактические выходные данные журнала происходят только "
"тогда, когда регистрируется событие, серьезность которого равна ОШИБКА или "
"выше, но в этом случае также регистрируются любые предыдущие события с более "
"низким уровнем серьезности."

#: ../../howto/logging-cookbook.rst:2972
msgid "You can of course use the conventional means of decoration::"
msgstr "Можно, конечно, использовать и обычные средства декора:"

#: ../../howto/logging-cookbook.rst:2982
msgid "Sending logging messages to email, with buffering"
msgstr "Отправка сообщений журнала на электронную почту с буферизацией"

#: ../../howto/logging-cookbook.rst:2984
msgid ""
"To illustrate how you can send log messages via email, so that a set number "
"of messages are sent per email, you can subclass :class:`~logging.handlers."
"BufferingHandler`. In the following  example, which you can adapt to suit "
"your specific needs, a simple test harness is provided which allows you to "
"run the script with command line arguments specifying what you typically "
"need to send things via SMTP. (Run the downloaded script with the ``-h`` "
"argument to see the required and optional arguments.)"
msgstr ""
"Чтобы проиллюстрировать, как вы можете отправлять сообщения журнала по "
"электронной почте, чтобы определенное количество сообщений отправлялось по "
"электронной почте, вы можете создать подкласс :class:`~logging.handlers."
"BufferingHandler`. В следующем примере, который вы можете адаптировать в "
"соответствии со своими конкретными потребностями, представлена ​​простая "
"тестовая программа, которая позволяет запускать сценарий с аргументами "
"командной строки, определяющими, что вам обычно нужно для отправки данных "
"через SMTP. (Запустите загруженный скрипт с аргументом ``-h``, чтобы увидеть "
"обязательные и необязательные аргументы.)"

#: ../../howto/logging-cookbook.rst:3056
msgid ""
"If you run this script and your SMTP server is correctly set up, you should "
"find that it sends eleven emails to the addressee you specify. The first ten "
"emails will each have ten log messages, and the eleventh will have two "
"messages. That makes up 102 messages as specified in the script."
msgstr ""
"Если вы запустите этот сценарий и ваш SMTP-сервер настроен правильно, вы "
"обнаружите, что он отправляет одиннадцать электронных писем указанному вами "
"адресату. Первые десять электронных писем будут содержать по десять "
"сообщений журнала, а одиннадцатое — по два сообщения. Это составляет 102 "
"сообщения, как указано в сценарии."

#: ../../howto/logging-cookbook.rst:3064
msgid "Formatting times using UTC (GMT) via configuration"
msgstr "Форматирование времени с использованием UTC (GMT) через конфигурацию"

#: ../../howto/logging-cookbook.rst:3066
msgid ""
"Sometimes you want to format times using UTC, which can be done using a "
"class such as ``UTCFormatter``, shown below::"
msgstr ""
"Иногда вам нужно отформатировать время с использованием UTC, что можно "
"сделать с помощью такого класса, как UTCFormatter, показанного ниже:"

#: ../../howto/logging-cookbook.rst:3075
msgid ""
"and you can then use the ``UTCFormatter`` in your code instead of :class:"
"`~logging.Formatter`. If you want to do that via configuration, you can use "
"the :func:`~logging.config.dictConfig` API with an approach illustrated by "
"the following complete example::"
msgstr ""
"и затем вы можете использовать ``UTCFormatter`` в своем коде вместо :class:"
"`~logging.Formatter`. Если вы хотите сделать это через конфигурацию, вы "
"можете использовать API :func:`~logging.config.dictConfig` с подходом, "
"иллюстрируемым следующим полным примером:"

#: ../../howto/logging-cookbook.rst:3118
msgid "When this script is run, it should print something like:"
msgstr "Когда этот скрипт запускается, он должен напечатать что-то вроде:"

#: ../../howto/logging-cookbook.rst:3125
msgid ""
"showing how the time is formatted both as local time and UTC, one for each "
"handler."
msgstr ""
"показывая, как время форматируется как местное время, так и в формате UTC, "
"по одному для каждого обработчика."

#: ../../howto/logging-cookbook.rst:3132
msgid "Using a context manager for selective logging"
msgstr "Использование контекстного менеджера для выборочного ведения журнала"

#: ../../howto/logging-cookbook.rst:3134
msgid ""
"There are times when it would be useful to temporarily change the logging "
"configuration and revert it back after doing something. For this, a context "
"manager is the most obvious way of saving and restoring the logging context. "
"Here is a simple example of such a context manager, which allows you to "
"optionally change the logging level and add a logging handler purely in the "
"scope of the context manager::"
msgstr ""
"Бывают случаи, когда было бы полезно временно изменить конфигурацию "
"журналирования и вернуть ее обратно после каких-либо действий. Для этого "
"менеджер контекста является наиболее очевидным способом сохранения и "
"восстановления контекста журналирования. Вот простой пример такого "
"контекстного менеджера, который позволяет при желании изменить уровень "
"ведения журнала и добавить обработчик журналирования исключительно в рамках "
"контекстного менеджера:"

#: ../../howto/logging-cookbook.rst:3167
msgid ""
"If you specify a level value, the logger's level is set to that value in the "
"scope of the with block covered by the context manager. If you specify a "
"handler, it is added to the logger on entry to the block and removed on exit "
"from the block. You can also ask the manager to close the handler for you on "
"block exit - you could do this if you don't need the handler any more."
msgstr ""
"Если вы укажете значение уровня, уровень средства ведения журнала будет "
"установлен на это значение в области действия блока with, охватываемого "
"диспетчером контекста. Если вы укажете обработчик, он будет добавлен в "
"логгер при входе в блок и удален при выходе из блока. Вы также можете "
"попросить менеджера закрыть для вас обработчик при выходе из блока — вы "
"можете сделать это, если обработчик вам больше не нужен."

#: ../../howto/logging-cookbook.rst:3173
msgid ""
"To illustrate how it works, we can add the following block of code to the "
"above::"
msgstr ""
"Чтобы проиллюстрировать, как это работает, мы можем добавить следующий блок "
"кода к приведенному выше:"

#: ../../howto/logging-cookbook.rst:3191
msgid ""
"We initially set the logger's level to ``INFO``, so message #1 appears and "
"message #2 doesn't. We then change the level to ``DEBUG`` temporarily in the "
"following ``with`` block, and so message #3 appears. After the block exits, "
"the logger's level is restored to ``INFO`` and so message #4 doesn't appear. "
"In the next ``with`` block, we set the level to ``DEBUG`` again but also add "
"a handler writing to ``sys.stdout``. Thus, message #5 appears twice on the "
"console (once via ``stderr`` and once via ``stdout``). After the ``with`` "
"statement's completion, the status is as it was before so message #6 appears "
"(like message #1) whereas message #7 doesn't (just like message #2)."
msgstr ""
"Изначально мы установили уровень регистратора «INFO», поэтому сообщение №1 "
"появляется, а сообщение №2 – нет. Затем мы временно меняем уровень на DEBUG "
"в следующем блоке with, и появляется сообщение №3. После выхода из блока "
"уровень логгера восстанавливается до INFO, поэтому сообщение №4 не "
"появляется. В следующем блоке with мы снова устанавливаем уровень DEBUG, но "
"также добавляем обработчик записи в sys.stdout. Таким образом, сообщение №5 "
"появляется на консоли дважды (один раз через stderr и один раз через "
"stdout). После завершения оператора ``with`` статус остается прежним, "
"поэтому появляется сообщение №6 (как и сообщение №1), а сообщение №7 – нет "
"(как и сообщение №2)."

#: ../../howto/logging-cookbook.rst:3201
msgid "If we run the resulting script, the result is as follows:"
msgstr "Если мы запустим полученный скрипт, результат будет следующим:"

#: ../../howto/logging-cookbook.rst:3212
msgid ""
"If we run it again, but pipe ``stderr`` to ``/dev/null``, we see the "
"following, which is the only message written to ``stdout``:"
msgstr ""
"Если мы запустим его снова, но перенаправим ``stderr`` в ``/dev/null``, мы "
"увидим следующее, единственное сообщение, записанное в ``stdout``:"

#: ../../howto/logging-cookbook.rst:3220
msgid "Once again, but piping ``stdout`` to ``/dev/null``, we get:"
msgstr "Еще раз, но передав ``stdout`` в ``/dev/null``, мы получим:"

#: ../../howto/logging-cookbook.rst:3230
msgid ""
"In this case, the message #5 printed to ``stdout`` doesn't appear, as "
"expected."
msgstr ""
"В этом случае сообщение №5, выведенное на стандартный вывод, не появляется, "
"как ожидалось."

#: ../../howto/logging-cookbook.rst:3232
msgid ""
"Of course, the approach described here can be generalised, for example to "
"attach logging filters temporarily. Note that the above code works in Python "
"2 as well as Python 3."
msgstr ""
"Конечно, описанный здесь подход можно обобщить, например временно "
"присоединить фильтры журналирования. Обратите внимание, что приведенный выше "
"код работает как в Python 2, так и в Python 3."

#: ../../howto/logging-cookbook.rst:3240
msgid "A CLI application starter template"
msgstr "Начальный шаблон приложения CLI"

#: ../../howto/logging-cookbook.rst:3242
msgid "Here's an example which shows how you can:"
msgstr "Вот пример, который показывает, как вы можете:"

#: ../../howto/logging-cookbook.rst:3244
msgid "Use a logging level based on command-line arguments"
msgstr ""
"Используйте уровень ведения журнала на основе аргументов командной строки."

#: ../../howto/logging-cookbook.rst:3245
msgid ""
"Dispatch to multiple subcommands in separate files, all logging at the same "
"level in a consistent way"
msgstr ""
"Отправка нескольким подкомандам в отдельных файлах, все они последовательно "
"регистрируются на одном уровне."

#: ../../howto/logging-cookbook.rst:3247
msgid "Make use of simple, minimal configuration"
msgstr "Используйте простую минимальную конфигурацию"

#: ../../howto/logging-cookbook.rst:3249
msgid ""
"Suppose we have a command-line application whose job is to stop, start or "
"restart some services. This could be organised for the purposes of "
"illustration as a file ``app.py`` that is the main script for the "
"application, with individual commands implemented in ``start.py``, ``stop."
"py`` and ``restart.py``. Suppose further that we want to control the "
"verbosity of the application via a command-line argument, defaulting to "
"``logging.INFO``. Here's one way that ``app.py`` could be written::"
msgstr ""
"Предположим, у нас есть приложение командной строки, задача которого — "
"остановить, запустить или перезапустить некоторые службы. В целях "
"иллюстрации это можно организовать в виде файла ``app.py``, который является "
"основным сценарием приложения, с отдельными командами, реализованными в "
"``start.py``, ``stop.py`` и `` `restart.py``. Предположим далее, что мы "
"хотим контролировать уровень детализации приложения с помощью аргумента "
"командной строки, по умолчанию равного ``logging.INFO``. Вот один из "
"способов записи ``app.py``:"

#: ../../howto/logging-cookbook.rst:3298
msgid ""
"And the ``start``, ``stop`` and ``restart`` commands can be implemented in "
"separate modules, like so for starting::"
msgstr ""
"А команды ``start``, ``stop`` и ``restart`` могут быть реализованы в "
"отдельных модулях, например, для запуска:"

#: ../../howto/logging-cookbook.rst:3311
msgid "and thus for stopping::"
msgstr "и, таким образом, для остановки::"

#: ../../howto/logging-cookbook.rst:3332
msgid "and similarly for restarting::"
msgstr "и аналогично для перезапуска::"

#: ../../howto/logging-cookbook.rst:3353
msgid ""
"If we run this application with the default log level, we get output like "
"this:"
msgstr ""
"Если мы запустим это приложение с уровнем журнала по умолчанию, мы получим "
"такой вывод:"

#: ../../howto/logging-cookbook.rst:3366
msgid ""
"The first word is the logging level, and the second word is the module or "
"package name of the place where the event was logged."
msgstr ""
"Первое слово — это уровень регистрации, а второе слово — это имя модуля или "
"пакета того места, где было зарегистрировано событие."

#: ../../howto/logging-cookbook.rst:3369
msgid ""
"If we change the logging level, then we can change the information sent to "
"the log. For example, if we want more information:"
msgstr ""
"Если мы изменим уровень журналирования, то мы сможем изменить информацию, "
"отправляемую в журнал. Например, если нам нужна дополнительная информация:"

#: ../../howto/logging-cookbook.rst:3386
msgid "And if we want less:"
msgstr "А если мы хотим меньше:"

#: ../../howto/logging-cookbook.rst:3394
msgid ""
"In this case, the commands don't print anything to the console, since "
"nothing at ``WARNING`` level or above is logged by them."
msgstr ""
"В этом случае команды ничего не выводят на консоль, поскольку ничего на "
"уровне «ПРЕДУПРЕЖДЕНИЕ» или выше они не регистрируют."

#: ../../howto/logging-cookbook.rst:3400
msgid "A Qt GUI for logging"
msgstr "Qt GUI для ведения журналов"

#: ../../howto/logging-cookbook.rst:3402
msgid ""
"A question that comes up from time to time is about how to log to a GUI "
"application. The `Qt <https://www.qt.io/>`_ framework is a popular cross-"
"platform UI framework with Python bindings using `PySide2 <https://pypi.org/"
"project/PySide2/>`_ or `PyQt5 <https://pypi.org/project/PyQt5/>`_ libraries."
msgstr ""

#: ../../howto/logging-cookbook.rst:3408
msgid ""
"The following example shows how to log to a Qt GUI. This introduces a simple "
"``QtHandler`` class which takes a callable, which should be a slot in the "
"main thread that does GUI updates. A worker thread is also created to show "
"how you can log to the GUI from both the UI itself (via a button for manual "
"logging) as well as a worker thread doing work in the background (here, just "
"logging messages at random levels with random short delays in between)."
msgstr ""
"В следующем примере показано, как войти в графический интерфейс Qt. Здесь "
"представлен простой класс QtHandler, который принимает вызываемый объект, "
"который должен представлять собой слот в основном потоке, выполняющий "
"обновления графического интерфейса. Также создается рабочий поток, чтобы "
"показать, как можно войти в графический интерфейс как из самого "
"пользовательского интерфейса (с помощью кнопки для ведения журнала вручную), "
"так и из рабочего потока, выполняющего работу в фоновом режиме (здесь просто "
"регистрируются сообщения на случайных уровнях со случайным короткие задержки "
"между ними)."

#: ../../howto/logging-cookbook.rst:3415
msgid ""
"The worker thread is implemented using Qt's ``QThread`` class rather than "
"the :mod:`threading` module, as there are circumstances where one has to use "
"``QThread``, which offers better integration with other ``Qt`` components."
msgstr ""
"Рабочий поток реализован с использованием класса ``QThread`` Qt, а не "
"модуля :mod:`threading`, так как в некоторых случаях приходится использовать "
"``QThread``, который обеспечивает лучшую интеграцию с другими ``Qt``. "
"компоненты."

#: ../../howto/logging-cookbook.rst:3419
msgid ""
"The code should work with recent releases of either ``PySide2`` or "
"``PyQt5``. You should be able to adapt the approach to earlier versions of "
"Qt. Please refer to the comments in the code snippet for more detailed "
"information."
msgstr ""

#: ../../howto/logging-cookbook.rst:3633
msgid "Logging to syslog with RFC5424 support"
msgstr "Запись в системный журнал с поддержкой RFC5424."

#: ../../howto/logging-cookbook.rst:3635
msgid ""
"Although :rfc:`5424` dates from 2009, most syslog servers are configured by "
"detault to use the older :rfc:`3164`, which hails from 2001. When "
"``logging`` was added to Python in 2003, it supported the earlier (and only "
"existing) protocol at the time. Since RFC5424 came out, as there has not "
"been widespread deployment of it in syslog servers, the :class:`~logging."
"handlers.SysLogHandler` functionality has not been updated."
msgstr ""

#: ../../howto/logging-cookbook.rst:3642
msgid ""
"RFC 5424 contains some useful features such as support for structured data, "
"and if you need to be able to log to a syslog server with support for it, "
"you can do so with a subclassed handler which looks something like this::"
msgstr ""
"RFC 5424 содержит некоторые полезные функции, такие как поддержка "
"структурированных данных, и если вам нужно иметь возможность войти на сервер "
"системного журнала с его поддержкой, вы можете сделать это с помощью "
"обработчика подкласса, который выглядит примерно так:"

#: ../../howto/logging-cookbook.rst:3708
msgid ""
"You'll need to be familiar with RFC 5424 to fully understand the above code, "
"and it may be that you have slightly different needs (e.g. for how you pass "
"structural data to the log). Nevertheless, the above should be adaptable to "
"your speciric needs. With the above handler, you'd pass structured data "
"using something like this::"
msgstr ""
"Вам необходимо знать RFC 5424, чтобы полностью понять приведенный выше код, "
"и возможно, у вас несколько другие потребности (например, в том, как вы "
"передаете структурные данные в журнал). Тем не менее, вышеизложенное должно "
"быть адаптировано к вашим конкретным потребностям. С помощью приведенного "
"выше обработчика вы передаете структурированные данные, используя что-то "
"вроде этого::"

#: ../../howto/logging-cookbook.rst:3722
msgid "How to treat a logger like an output stream"
msgstr "Как относиться к регистратору как к выходному потоку"

#: ../../howto/logging-cookbook.rst:3724
msgid ""
"Sometimes, you need to interface to a third-party API which expects a file-"
"like object to write to, but you want to direct the API's output to a "
"logger. You can do this using a class which wraps a logger with a file-like "
"API. Here's a short script illustrating such a class:"
msgstr ""
"Иногда вам необходимо подключиться к стороннему API, который ожидает записи "
"в файлоподобный объект, но вы хотите направить выходные данные API в "
"регистратор. Вы можете сделать это, используя класс, который обертывает "
"регистратор файловым API. Вот короткий скрипт, иллюстрирующий такой класс:"

#: ../../howto/logging-cookbook.rst:3764
msgid "When this script is run, it prints"
msgstr "Когда этот скрипт запускается, он печатает"

#: ../../howto/logging-cookbook.rst:3771
msgid ""
"You could also use ``LoggerWriter`` to redirect ``sys.stdout`` and ``sys."
"stderr`` by doing something like this:"
msgstr ""
"Вы также можете использовать LoggerWriter для перенаправления sys.stdout и "
"sys.stderr, выполнив что-то вроде этого:"

#: ../../howto/logging-cookbook.rst:3781
msgid ""
"You should do this *after* configuring logging for your needs. In the above "
"example, the :func:`~logging.basicConfig` call does this (using the ``sys."
"stderr`` value *before* it is overwritten by a ``LoggerWriter`` instance). "
"Then, you'd get this kind of result:"
msgstr ""
"Вы должны сделать это *после* настройки ведения журнала для своих нужд. В "
"приведенном выше примере это делает вызов :func:`~logging.basicConfig` "
"(используя значение ``sys.stderr`` *до* того, как оно будет перезаписано "
"экземпляром ``LoggerWriter``). Тогда вы получите такой результат:"

#: ../../howto/logging-cookbook.rst:3794
msgid ""
"Of course, these above examples show output according to the format used by :"
"func:`~logging.basicConfig`, but you can use a different formatter when you "
"configure logging."
msgstr ""

#: ../../howto/logging-cookbook.rst:3798
msgid ""
"Note that with the above scheme, you are somewhat at the mercy of buffering "
"and the sequence of write calls which you are intercepting. For example, "
"with the definition of ``LoggerWriter`` above, if you have the snippet"
msgstr ""
"Обратите внимание, что в приведенной выше схеме вы в некоторой степени "
"зависите от буферизации и последовательности вызовов записи, которые вы "
"перехватываете. Например, с определением ``LoggerWriter`` выше, если у вас "
"есть фрагмент"

#: ../../howto/logging-cookbook.rst:3807
msgid "then running the script results in"
msgstr "затем запуск скрипта приводит к"

#: ../../howto/logging-cookbook.rst:3825
msgid ""
"As you can see, this output isn't ideal. That's because the underlying code "
"which writes to ``sys.stderr`` makes mutiple writes, each of which results "
"in a separate logged line (for example, the last three lines above). To get "
"around this problem, you need to buffer things and only output log lines "
"when newlines are seen. Let's use a slghtly better implementation of "
"``LoggerWriter``:"
msgstr ""

#: ../../howto/logging-cookbook.rst:3850
msgid ""
"This just buffers up stuff until a newline is seen, and then logs complete "
"lines. With this approach, you get better output:"
msgstr ""
"Это просто буферизует данные до тех пор, пока не появится новая строка, а "
"затем записывает полные строки. При таком подходе вы получите лучший "
"результат:"

#: ../../howto/logging-cookbook.rst:3866
msgid "Patterns to avoid"
msgstr "Шаблоны, которых следует избегать"

#: ../../howto/logging-cookbook.rst:3868
msgid ""
"Although the preceding sections have described ways of doing things you "
"might need to do or deal with, it is worth mentioning some usage patterns "
"which are *unhelpful*, and which should therefore be avoided in most cases. "
"The following sections are in no particular order."
msgstr ""
"Хотя в предыдущих разделах были описаны способы выполнения действий, которые "
"вам могут понадобиться или с которыми вам придется иметь дело, стоит "
"упомянуть некоторые шаблоны использования, которые *бесполезны* и которых "
"поэтому следует избегать в большинстве случаев. Следующие разделы "
"расположены в произвольном порядке."

#: ../../howto/logging-cookbook.rst:3875
msgid "Opening the same log file multiple times"
msgstr "Открытие одного и того же файла журнала несколько раз"

#: ../../howto/logging-cookbook.rst:3877
msgid ""
"On Windows, you will generally not be able to open the same file multiple "
"times as this will lead to a \"file is in use by another process\" error. "
"However, on POSIX platforms you'll not get any errors if you open the same "
"file multiple times. This could be done accidentally, for example by:"
msgstr ""
"В Windows вы, как правило, не сможете открыть один и тот же файл несколько "
"раз, поскольку это приведет к ошибке «файл используется другим процессом». "
"Однако на платформах POSIX вы не получите никаких ошибок, если откроете один "
"и тот же файл несколько раз. Это может быть сделано случайно, например:"

#: ../../howto/logging-cookbook.rst:3882
msgid ""
"Adding a file handler more than once which references the same file (e.g. by "
"a copy/paste/forget-to-change error)."
msgstr ""
"Добавление обработчика файла более одного раза, который ссылается на один и "
"тот же файл (например, из-за ошибки копирования/вставки/забытия изменения)."

#: ../../howto/logging-cookbook.rst:3885
msgid ""
"Opening two files that look different, as they have different names, but are "
"the same because one is a symbolic link to the other."
msgstr ""
"Открытие двух файлов, которые выглядят по-разному, поскольку имеют разные "
"имена, но одинаковы, поскольку один является символической ссылкой на другой."

#: ../../howto/logging-cookbook.rst:3888
msgid ""
"Forking a process, following which both parent and child have a reference to "
"the same file. This might be through use of the :mod:`multiprocessing` "
"module, for example."
msgstr ""
"Формирование процесса, после которого и родительский, и дочерний процесс "
"имеют ссылку на один и тот же файл. Это может быть сделано, например, с "
"помощью модуля :mod:`multiprocessing`."

#: ../../howto/logging-cookbook.rst:3892
msgid ""
"Opening a file multiple times might *appear* to work most of the time, but "
"can lead to a number of problems in practice:"
msgstr ""
"Открытие файла несколько раз может *казаться* эффективным в большинстве "
"случаев, но на практике может привести к ряду проблем:"

#: ../../howto/logging-cookbook.rst:3895
msgid ""
"Logging output can be garbled because multiple threads or processes try to "
"write to the same file. Although logging guards against concurrent use of "
"the same handler instance by multiple threads, there is no such protection "
"if concurrent writes are attempted by two different threads using two "
"different handler instances which happen to point to the same file."
msgstr ""
"Вывод журнала может быть искажен, поскольку несколько потоков или процессов "
"пытаются выполнить запись в один и тот же файл. Хотя ведение журнала "
"защищает от одновременного использования одного и того же экземпляра "
"обработчика несколькими потоками, такой защиты не существует, если "
"одновременная запись выполняется двумя разными потоками с использованием "
"двух разных экземпляров обработчика, которые указывают на один и тот же файл."

#: ../../howto/logging-cookbook.rst:3901
msgid ""
"An attempt to delete a file (e.g. during file rotation) silently fails, "
"because there is another reference pointing to it. This can lead to "
"confusion and wasted debugging time - log entries end up in unexpected "
"places, or are lost altogether. Or a file that was supposed to be moved "
"remains in place, and grows in size unexpectedly despite size-based rotation "
"being supposedly in place."
msgstr ""
"Попытка удалить файл (например, во время ротации файла) терпит неудачу, "
"поскольку на него указывает другая ссылка. Это может привести к путанице и "
"потере времени на отладку — записи журнала оказываются в неожиданных местах "
"или вообще теряются. Или файл, который должен был быть перемещен, остается "
"на месте и неожиданно увеличивается в размере, несмотря на предположительное "
"вращение на основе размера."

#: ../../howto/logging-cookbook.rst:3908
msgid ""
"Use the techniques outlined in :ref:`multiple-processes` to circumvent such "
"issues."
msgstr ""
"Используйте методы, описанные в :ref:`multiple-processes`, чтобы обойти "
"такие проблемы."

#: ../../howto/logging-cookbook.rst:3912
msgid "Using loggers as attributes in a class or passing them as parameters"
msgstr ""
"Использование регистраторов в качестве атрибутов класса или передача их в "
"качестве параметров."

#: ../../howto/logging-cookbook.rst:3914
msgid ""
"While there might be unusual cases where you'll need to do this, in general "
"there is no point because loggers are singletons. Code can always access a "
"given logger instance by name using ``logging.getLogger(name)``, so passing "
"instances around and holding them as instance attributes is pointless. Note "
"that in other languages such as Java and C#, loggers are often static class "
"attributes. However, this pattern doesn't make sense in Python, where the "
"module (and not the class) is the unit of software decomposition."
msgstr ""
"Хотя могут быть необычные случаи, когда вам придется это делать, в целом в "
"этом нет смысла, поскольку регистраторы являются одиночными. Код всегда "
"может получить доступ к данному экземпляру регистратора по имени, используя "
"``logging.getLogger(name)``, поэтому передача экземпляров и сохранение их в "
"качестве атрибутов экземпляра бессмысленна. Обратите внимание, что в других "
"языках, таких как Java и C#, средства ведения журнала часто являются "
"атрибутами статического класса. Однако этот шаблон не имеет смысла в Python, "
"где единицей декомпозиции программного обеспечения является модуль (а не "
"класс)."

#: ../../howto/logging-cookbook.rst:3924
msgid ""
"Adding handlers other than :class:`NullHandler` to a logger in a library"
msgstr ""

#: ../../howto/logging-cookbook.rst:3926
msgid ""
"Configuring logging by adding handlers, formatters and filters is the "
"responsibility of the application developer, not the library developer. If "
"you are maintaining a library, ensure that you don't add handlers to any of "
"your loggers other than a :class:`~logging.NullHandler` instance."
msgstr ""
"Настройка ведения журнала путем добавления обработчиков, средств "
"форматирования и фильтров является обязанностью разработчика приложения, а "
"не разработчика библиотеки. Если вы поддерживаете библиотеку, убедитесь, что "
"вы не добавляете обработчики ни в один из ваших регистраторов, кроме "
"экземпляра :class:`~logging.NullHandler`."

#: ../../howto/logging-cookbook.rst:3933
msgid "Creating a lot of loggers"
msgstr "Создание большого количества логгеров"

#: ../../howto/logging-cookbook.rst:3935
msgid ""
"Loggers are singletons that are never freed during a script execution, and "
"so creating lots of loggers will use up memory which can't then be freed. "
"Rather than create a logger per e.g. file processed or network connection "
"made, use the :ref:`existing mechanisms <context-info>` for passing "
"contextual information into your logs and restrict the loggers created to "
"those describing areas within your application (generally modules, but "
"occasionally slightly more fine-grained than that)."
msgstr ""
"Регистраторы — это одиночные элементы, которые никогда не освобождаются во "
"время выполнения сценария, поэтому создание большого количества "
"регистраторов приведет к использованию памяти, которую затем невозможно "
"освободить. Вместо того, чтобы создавать регистратор, например, для каждого "
"обработанного файла или установленного сетевого подключения, используйте "
"существующие механизмы <context-info>` для передачи контекстной информации в "
"ваши журналы и ограничьте создаваемые регистраторы теми, которые описывают "
"области вашего приложения (обычно модули , но иногда немного более детально)."

#: ../../howto/logging-cookbook.rst:3946
msgid "Other resources"
msgstr "Другие ресурсы"

#: ../../howto/logging-cookbook.rst:3959
msgid ":ref:`Basic Tutorial <logging-basic-tutorial>`"
msgstr ":ref:`Basic Tutorial <logging-basic-tutorial>`"

#: ../../howto/logging-cookbook.rst:3961
msgid ":ref:`Advanced Tutorial <logging-advanced-tutorial>`"
msgstr ":ref:`Advanced Tutorial <logging-advanced-tutorial>`"
