# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../howto/sorting.rst:4
msgid "Sorting Techniques"
msgstr "Методы сортировки"

#: ../../howto/sorting.rst:0
msgid "Author"
msgstr "Автор"

#: ../../howto/sorting.rst:6
msgid "Andrew Dalke and Raymond Hettinger"
msgstr "Эндрю Далк и Рэймонд Хеттингер"

#: ../../howto/sorting.rst:9
msgid ""
"Python lists have a built-in :meth:`list.sort` method that modifies the list "
"in-place.  There is also a :func:`sorted` built-in function that builds a "
"new sorted list from an iterable."
msgstr ""
"Списки Python имеют встроенный метод :meth:`list.sort`, который изменяет "
"список на месте. Существует также встроенная функция :func:`sorted`, которая "
"создает новый отсортированный список из итерируемого объекта."

#: ../../howto/sorting.rst:13
msgid ""
"In this document, we explore the various techniques for sorting data using "
"Python."
msgstr ""
"В этом документе мы исследуем различные методы сортировки данных с "
"использованием Python."

#: ../../howto/sorting.rst:17
msgid "Sorting Basics"
msgstr "Основы сортировки"

#: ../../howto/sorting.rst:19
msgid ""
"A simple ascending sort is very easy: just call the :func:`sorted` function. "
"It returns a new sorted list:"
msgstr ""
"Простая сортировка по возрастанию очень проста: просто вызовите функцию :"
"func:`sorted`. Он возвращает новый отсортированный список:"

#: ../../howto/sorting.rst:22
msgid ""
">>> sorted([5, 2, 3, 1, 4])\n"
"[1, 2, 3, 4, 5]"
msgstr ""
">>> sorted([5, 2, 3, 1, 4])\n"
"[1, 2, 3, 4, 5]"

#: ../../howto/sorting.rst:27
msgid ""
"You can also use the :meth:`list.sort` method. It modifies the list in-place "
"(and returns ``None`` to avoid confusion). Usually it's less convenient "
"than :func:`sorted` - but if you don't need the original list, it's slightly "
"more efficient."
msgstr ""
"Вы также можете использовать метод :meth:`list.sort`. Он изменяет список на "
"месте (и возвращает None, чтобы избежать путаницы). Обычно это менее удобно, "
"чем :func:`sorted`, но если вам не нужен исходный список, это немного более "
"эффективно."

#: ../../howto/sorting.rst:32
msgid ""
">>> a = [5, 2, 3, 1, 4]\n"
">>> a.sort()\n"
">>> a\n"
"[1, 2, 3, 4, 5]"
msgstr ""
">>> a = [5, 2, 3, 1, 4]\n"
">>> a.sort()\n"
">>> a\n"
"[1, 2, 3, 4, 5]"

#: ../../howto/sorting.rst:39
msgid ""
"Another difference is that the :meth:`list.sort` method is only defined for "
"lists. In contrast, the :func:`sorted` function accepts any iterable."
msgstr ""
"Другое отличие состоит в том, что метод :meth:`list.sort` определен только "
"для списков. Напротив, функция :func:`sorted` принимает любую итерацию."

#: ../../howto/sorting.rst:42
msgid ""
">>> sorted({1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'})\n"
"[1, 2, 3, 4, 5]"
msgstr ""
">>> sorted({1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'})\n"
"[1, 2, 3, 4, 5]"

#: ../../howto/sorting.rst:48
msgid "Key Functions"
msgstr "Ключевые функции"

#: ../../howto/sorting.rst:50
msgid ""
"Both :meth:`list.sort` and :func:`sorted` have a *key* parameter to specify "
"a function (or other callable) to be called on each list element prior to "
"making comparisons."
msgstr ""
"И :meth:`list.sort`, и :func:`sorted` имеют параметр *key* для указания "
"функции (или другого вызываемого объекта), которая будет вызываться для "
"каждого элемента списка перед выполнением сравнения."

#: ../../howto/sorting.rst:54
msgid "For example, here's a case-insensitive string comparison:"
msgstr "Например, вот сравнение строк без учета регистра:"

#: ../../howto/sorting.rst:56
msgid ""
">>> sorted(\"This is a test string from Andrew\".split(), key=str.casefold)\n"
"['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']"
msgstr ""
">>> sorted(\"This is a test string from Andrew\".split(), key=str.casefold)\n"
"['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']"

#: ../../howto/sorting.rst:61
msgid ""
"The value of the *key* parameter should be a function (or other callable) "
"that takes a single argument and returns a key to use for sorting purposes. "
"This technique is fast because the key function is called exactly once for "
"each input record."
msgstr ""
"Значением параметра *key* должна быть функция (или другая вызываемая "
"функция), которая принимает один аргумент и возвращает ключ для "
"использования в целях сортировки. Этот метод быстрый, поскольку ключевая "
"функция вызывается ровно один раз для каждой входной записи."

#: ../../howto/sorting.rst:66
msgid ""
"A common pattern is to sort complex objects using some of the object's "
"indices as keys. For example:"
msgstr ""
"Распространенным шаблоном является сортировка сложных объектов с "
"использованием некоторых индексов объекта в качестве ключей. Например:"

#: ../../howto/sorting.rst:69
msgid ""
">>> student_tuples = [\n"
"...     ('john', 'A', 15),\n"
"...     ('jane', 'B', 12),\n"
"...     ('dave', 'B', 10),\n"
"... ]\n"
">>> sorted(student_tuples, key=lambda student: student[2])   # sort by age\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> student_tuples = [\n"
"...     ('john', 'A', 15),\n"
"...     ('jane', 'B', 12),\n"
"...     ('dave', 'B', 10),\n"
"... ]\n"
">>> sorted(student_tuples, key=lambda student: student[2])   # sort by age\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:79
msgid ""
"The same technique works for objects with named attributes. For example:"
msgstr ""
"Тот же метод работает для объектов с именованными атрибутами. Например:"

#: ../../howto/sorting.rst:81
msgid ""
">>> class Student:\n"
"...     def __init__(self, name, grade, age):\n"
"...         self.name = name\n"
"...         self.grade = grade\n"
"...         self.age = age\n"
"...     def __repr__(self):\n"
"...         return repr((self.name, self.grade, self.age))\n"
"\n"
">>> student_objects = [\n"
"...     Student('john', 'A', 15),\n"
"...     Student('jane', 'B', 12),\n"
"...     Student('dave', 'B', 10),\n"
"... ]\n"
">>> sorted(student_objects, key=lambda student: student.age)   # sort by "
"age\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> class Student:\n"
"...     def __init__(self, name, grade, age):\n"
"...         self.name = name\n"
"...         self.grade = grade\n"
"...         self.age = age\n"
"...     def __repr__(self):\n"
"...         return repr((self.name, self.grade, self.age))\n"
"\n"
">>> student_objects = [\n"
"...     Student('john', 'A', 15),\n"
"...     Student('jane', 'B', 12),\n"
"...     Student('dave', 'B', 10),\n"
"... ]\n"
">>> sorted(student_objects, key=lambda student: student.age)   # sort by "
"age\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:99
msgid ""
"Objects with named attributes can be made by a regular class as shown above, "
"or they can be instances of :class:`~dataclasses.dataclass` or a :term:"
"`named tuple`."
msgstr ""
"Объекты с именованными атрибутами могут быть созданы обычным классом, как "
"показано выше, или они могут быть экземплярами :class:`~dataclasses."
"dataclass` или :term:`named tuple`."

#: ../../howto/sorting.rst:104
msgid "Operator Module Functions and Partial Function Evaluation"
msgstr "Функции операторского модуля и частичная оценка функций"

#: ../../howto/sorting.rst:106
msgid ""
"The :term:`key function` patterns shown above are very common, so Python "
"provides convenience functions to make accessor functions easier and faster. "
"The :mod:`operator` module has :func:`~operator.itemgetter`, :func:"
"`~operator.attrgetter`, and a :func:`~operator.methodcaller` function."
msgstr ""
"Показанные выше шаблоны :term:`key function` очень распространены, поэтому "
"Python предоставляет удобные функции, упрощающие и ускоряющие функции "
"доступа. Модуль :mod:`operator` имеет :func:`~operator.itemgetter`, :func:"
"`~operator.attrgetter` и функцию :func:`~operator.methodcaller`."

#: ../../howto/sorting.rst:111
msgid "Using those functions, the above examples become simpler and faster:"
msgstr ""
"Используя эти функции, приведенные выше примеры становятся проще и быстрее:"

#: ../../howto/sorting.rst:113
msgid ""
">>> from operator import itemgetter, attrgetter\n"
"\n"
">>> sorted(student_tuples, key=itemgetter(2))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('age'))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> from operator import itemgetter, attrgetter\n"
"\n"
">>> sorted(student_tuples, key=itemgetter(2))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('age'))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:123
msgid ""
"The operator module functions allow multiple levels of sorting. For example, "
"to sort by *grade* then by *age*:"
msgstr ""
"Функции модуля оператора допускают несколько уровней сортировки. Например, "
"чтобы отсортировать по *оценке*, а затем по *возрасту*:"

#: ../../howto/sorting.rst:126
msgid ""
">>> sorted(student_tuples, key=itemgetter(1,2))\n"
"[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('grade', 'age'))\n"
"[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]"
msgstr ""
">>> sorted(student_tuples, key=itemgetter(1,2))\n"
"[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('grade', 'age'))\n"
"[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]"

#: ../../howto/sorting.rst:134
msgid ""
"The :mod:`functools` module provides another helpful tool for making key-"
"functions.  The :func:`~functools.partial` function can reduce the `arity "
"<https://en.wikipedia.org/wiki/Arity>`_ of a multi-argument function making "
"it suitable for use as a key-function."
msgstr ""
"Модуль :mod:`functools` предоставляет еще один полезный инструмент для "
"создания ключевых функций. Функция :func:`~functools.partial` может "
"уменьшить `арность <https://en.wikipedia.org/wiki/Arity>`_ функции с "
"несколькими аргументами, что делает ее подходящей для использования в "
"качестве ключевой функции."

#: ../../howto/sorting.rst:139
msgid ""
">>> from functools import partial\n"
">>> from unicodedata import normalize\n"
"\n"
">>> names = 'Zoë Åbjørn Núñez Élana Zeke Abe Nubia Eloise'.split()\n"
"\n"
">>> sorted(names, key=partial(normalize, 'NFD'))\n"
"['Abe', 'Åbjørn', 'Eloise', 'Élana', 'Nubia', 'Núñez', 'Zeke', 'Zoë']\n"
"\n"
">>> sorted(names, key=partial(normalize, 'NFC'))\n"
"['Abe', 'Eloise', 'Nubia', 'Núñez', 'Zeke', 'Zoë', 'Åbjørn', 'Élana']"
msgstr ""
">>> from functools import partial\n"
">>> from unicodedata import normalize\n"
"\n"
">>> names = 'Zoë Åbjørn Núñez Élana Zeke Abe Nubia Eloise'.split()\n"
"\n"
">>> sorted(names, key=partial(normalize, 'NFD'))\n"
"['Abe', 'Åbjørn', 'Eloise', 'Élana', 'Nubia', 'Núñez', 'Zeke', 'Zoë']\n"
"\n"
">>> sorted(names, key=partial(normalize, 'NFC'))\n"
"['Abe', 'Eloise', 'Nubia', 'Núñez', 'Zeke', 'Zoë', 'Åbjørn', 'Élana']"

#: ../../howto/sorting.rst:153
msgid "Ascending and Descending"
msgstr "Восходящий и нисходящий"

#: ../../howto/sorting.rst:155
msgid ""
"Both :meth:`list.sort` and :func:`sorted` accept a *reverse* parameter with "
"a boolean value. This is used to flag descending sorts. For example, to get "
"the student data in reverse *age* order:"
msgstr ""
"Оба :meth:`list.sort` и :func:`sorted` принимают параметр *reverse* с "
"логическим значением. Это используется для обозначения нисходящей "
"сортировки. Например, чтобы получить данные об учащихся в обратном "
"*возрастном* порядке:"

#: ../../howto/sorting.rst:159
msgid ""
">>> sorted(student_tuples, key=itemgetter(2), reverse=True)\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('age'), reverse=True)\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]"
msgstr ""
">>> sorted(student_tuples, key=itemgetter(2), reverse=True)\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\n"
"\n"
">>> sorted(student_objects, key=attrgetter('age'), reverse=True)\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]"

#: ../../howto/sorting.rst:168
msgid "Sort Stability and Complex Sorts"
msgstr "Стабильность сортировки и комплексные сортировки"

#: ../../howto/sorting.rst:170
msgid ""
"Sorts are guaranteed to be `stable <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. That means that when multiple records have "
"the same key, their original order is preserved."
msgstr ""
"Сортировки гарантированно `стабильны <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. Это означает, что если несколько записей "
"имеют один и тот же ключ, их первоначальный порядок сохраняется."

#: ../../howto/sorting.rst:174
msgid ""
">>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n"
">>> sorted(data, key=itemgetter(0))\n"
"[('blue', 1), ('blue', 2), ('red', 1), ('red', 2)]"
msgstr ""
">>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n"
">>> sorted(data, key=itemgetter(0))\n"
"[('blue', 1), ('blue', 2), ('red', 1), ('red', 2)]"

#: ../../howto/sorting.rst:180
msgid ""
"Notice how the two records for *blue* retain their original order so that "
"``('blue', 1)`` is guaranteed to precede ``('blue', 2)``."
msgstr ""
"Обратите внимание, что две записи для *blue* сохраняют свой первоначальный "
"порядок, так что ``('blue', 1)`` гарантированно предшествует ``('blue', 2)``."

#: ../../howto/sorting.rst:183
msgid ""
"This wonderful property lets you build complex sorts in a series of sorting "
"steps. For example, to sort the student data by descending *grade* and then "
"ascending *age*, do the *age* sort first and then sort again using *grade*:"
msgstr ""
"Это замечательное свойство позволяет создавать сложные сортировки за "
"несколько этапов сортировки. Например, чтобы отсортировать данные об "
"учащихся по убыванию *оценки*, а затем по возрастанию *возраста*, сначала "
"выполните сортировку *возраст*, а затем повторите сортировку, используя "
"*оценку*:"

#: ../../howto/sorting.rst:187
msgid ""
">>> s = sorted(student_objects, key=attrgetter('age'))     # sort on "
"secondary key\n"
">>> sorted(s, key=attrgetter('grade'), reverse=True)       # now sort on "
"primary key, descending\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> s = sorted(student_objects, key=attrgetter('age'))     # sort on "
"secondary key\n"
">>> sorted(s, key=attrgetter('grade'), reverse=True)       # now sort on "
"primary key, descending\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:193
msgid ""
"This can be abstracted out into a wrapper function that can take a list and "
"tuples of field and order to sort them on multiple passes."
msgstr ""
"Это можно абстрагировать в функцию-оболочку, которая может принимать список "
"и кортежи полей и сортировать их за несколько проходов."

#: ../../howto/sorting.rst:196
msgid ""
">>> def multisort(xs, specs):\n"
"...     for key, reverse in reversed(specs):\n"
"...         xs.sort(key=attrgetter(key), reverse=reverse)\n"
"...     return xs\n"
"\n"
">>> multisort(list(student_objects), (('grade', True), ('age', False)))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> def multisort(xs, specs):\n"
"...     for key, reverse in reversed(specs):\n"
"...         xs.sort(key=attrgetter(key), reverse=reverse)\n"
"...     return xs\n"
"\n"
">>> multisort(list(student_objects), (('grade', True), ('age', False)))\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:206
msgid ""
"The `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ algorithm used in "
"Python does multiple sorts efficiently because it can take advantage of any "
"ordering already present in a dataset."
msgstr ""
"Алгоритм Timsort <https://en.wikipedia.org/wiki/Timsort>`_, используемый в "
"Python, эффективно выполняет несколько сортировок, поскольку он может "
"использовать преимущества любого порядка, уже присутствующего в наборе "
"данных."

#: ../../howto/sorting.rst:211
msgid "Decorate-Sort-Undecorate"
msgstr "Украсить-Сортировать-Украсить"

#: ../../howto/sorting.rst:213
msgid "This idiom is called Decorate-Sort-Undecorate after its three steps:"
msgstr ""
"Эта идиома называется «Украсить-Сортировать-Украсить» после трех этапов:"

#: ../../howto/sorting.rst:215
msgid ""
"First, the initial list is decorated with new values that control the sort "
"order."
msgstr ""
"Сначала исходный список дополняется новыми значениями, управляющими порядком "
"сортировки."

#: ../../howto/sorting.rst:217
msgid "Second, the decorated list is sorted."
msgstr "Во-вторых, декорированный список сортируется."

#: ../../howto/sorting.rst:219
msgid ""
"Finally, the decorations are removed, creating a list that contains only the "
"initial values in the new order."
msgstr ""
"Наконец, украшения удаляются, создавая список, содержащий только начальные "
"значения в новом порядке."

#: ../../howto/sorting.rst:222
msgid ""
"For example, to sort the student data by *grade* using the DSU approach:"
msgstr ""
"Например, чтобы отсортировать данные учащихся по *оценкам*, используя подход "
"DSU:"

#: ../../howto/sorting.rst:224
msgid ""
">>> decorated = [(student.grade, i, student) for i, student in "
"enumerate(student_objects)]\n"
">>> decorated.sort()\n"
">>> [student for grade, i, student in decorated]               # undecorate\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]"
msgstr ""
">>> decorated = [(student.grade, i, student) for i, student in "
"enumerate(student_objects)]\n"
">>> decorated.sort()\n"
">>> [student for grade, i, student in decorated]               # undecorate\n"
"[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]"

#: ../../howto/sorting.rst:231
msgid ""
"This idiom works because tuples are compared lexicographically; the first "
"items are compared; if they are the same then the second items are compared, "
"and so on."
msgstr ""
"Эта идиома работает, поскольку кортежи сравниваются лексикографически; "
"сравниваются первые элементы; если они одинаковы, сравниваются вторые "
"элементы и так далее."

#: ../../howto/sorting.rst:235
msgid ""
"It is not strictly necessary in all cases to include the index *i* in the "
"decorated list, but including it gives two benefits:"
msgstr ""
"Не во всех случаях обязательно включать индекс *i* в декорируемый список, но "
"его включение дает два преимущества:"

#: ../../howto/sorting.rst:238
msgid ""
"The sort is stable -- if two items have the same key, their order will be "
"preserved in the sorted list."
msgstr ""
"Сортировка стабильна — если два элемента имеют одинаковый ключ, их порядок в "
"отсортированном списке сохранится."

#: ../../howto/sorting.rst:241
msgid ""
"The original items do not have to be comparable because the ordering of the "
"decorated tuples will be determined by at most the first two items. So for "
"example the original list could contain complex numbers which cannot be "
"sorted directly."
msgstr ""
"Исходные элементы не обязательно должны быть сопоставимыми, поскольку "
"порядок декорированных кортежей будет определяться не более чем первыми "
"двумя элементами. Например, исходный список может содержать комплексные "
"числа, которые нельзя отсортировать напрямую."

#: ../../howto/sorting.rst:246
msgid ""
"Another name for this idiom is `Schwartzian transform <https://en.wikipedia."
"org/wiki/Schwartzian_transform>`_\\, after Randal L. Schwartz, who "
"popularized it among Perl programmers."
msgstr ""
"Другое название этой идиомы — `преобразование Шварца <https://en.wikipedia."
"org/wiki/Schwartzian_transform>`_\\, в честь Рэндала Л. Шварца, который "
"популяризировал ее среди программистов Perl."

#: ../../howto/sorting.rst:250
msgid ""
"Now that Python sorting provides key-functions, this technique is not often "
"needed."
msgstr ""
"Теперь, когда сортировка Python предоставляет ключевые функции, этот метод "
"требуется нечасто."

#: ../../howto/sorting.rst:253
msgid "Comparison Functions"
msgstr "Функции сравнения"

#: ../../howto/sorting.rst:255
msgid ""
"Unlike key functions that return an absolute value for sorting, a comparison "
"function computes the relative ordering for two inputs."
msgstr ""
"В отличие от ключевых функций, которые возвращают абсолютное значение для "
"сортировки, функция сравнения вычисляет относительный порядок для двух "
"входных данных."

#: ../../howto/sorting.rst:258
msgid ""
"For example, a `balance scale <https://upload.wikimedia.org/wikipedia/"
"commons/1/17/Balance_à_tabac_1850.JPG>`_ compares two samples giving a "
"relative ordering: lighter, equal, or heavier. Likewise, a comparison "
"function such as ``cmp(a, b)`` will return a negative value for less-than, "
"zero if the inputs are equal, or a positive value for greater-than."
msgstr ""
"Например, `шкала баланса <https://upload.wikimedia.org/wikipedia/"
"commons/1/17/Balance_à_tabac_1850.JPG>`_ сравнивает два образца, давая "
"относительный порядок: легче, равно или тяжелее. Аналогично, функция "
"сравнения, такая как ``cmp(a, b)``, вернет отрицательное значение для "
"меньшего, ноль, если входные данные равны, или положительное значение для "
"большего."

#: ../../howto/sorting.rst:265
msgid ""
"It is common to encounter comparison functions when translating algorithms "
"from other languages.  Also, some libraries provide comparison functions as "
"part of their API.  For example, :func:`locale.strcoll` is a comparison "
"function."
msgstr ""
"Функции сравнения часто встречаются при переводе алгоритмов с других языков. "
"Кроме того, некоторые библиотеки предоставляют функции сравнения как часть "
"своего API. Например, :func:`locale.strcoll` — это функция сравнения."

#: ../../howto/sorting.rst:269
msgid ""
"To accommodate those situations, Python provides :class:`functools."
"cmp_to_key` to wrap the comparison function to make it usable as a key "
"function::"
msgstr ""
"Чтобы учесть такие ситуации, Python предоставляет :class:`functools."
"cmp_to_key` для обертывания функции сравнения, чтобы ее можно было "
"использовать в качестве ключевой функции:"

#: ../../howto/sorting.rst:273
msgid "sorted(words, key=cmp_to_key(strcoll))  # locale-aware sort order"
msgstr "sorted(words, key=cmp_to_key(strcoll))  # locale-aware sort order"

#: ../../howto/sorting.rst:276
msgid "Odds and Ends"
msgstr "Odds and Ends"

#: ../../howto/sorting.rst:278
msgid ""
"For locale aware sorting, use :func:`locale.strxfrm` for a key function or :"
"func:`locale.strcoll` for a comparison function.  This is necessary because "
"\"alphabetical\" sort orderings can vary across cultures even if the "
"underlying alphabet is the same."
msgstr ""
"Для сортировки с учетом локали используйте :func:`locale.strxfrm` для "
"ключевой функции или :func:`locale.strcoll` для функции сравнения. Это "
"необходимо, поскольку «алфавитный» порядок сортировки может различаться в "
"зависимости от культуры, даже если базовый алфавит один и тот же."

#: ../../howto/sorting.rst:283
msgid ""
"The *reverse* parameter still maintains sort stability (so that records with "
"equal keys retain the original order). Interestingly, that effect can be "
"simulated without the parameter by using the builtin :func:`reversed` "
"function twice:"
msgstr ""
"Параметр *reverse* по-прежнему сохраняет стабильность сортировки (так что "
"записи с одинаковыми ключами сохраняют первоначальный порядок). Интересно, "
"что этот эффект можно смоделировать без параметра, дважды используя "
"встроенную функцию :func:`reversed`:"

#: ../../howto/sorting.rst:288
msgid ""
">>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n"
">>> standard_way = sorted(data, key=itemgetter(0), reverse=True)\n"
">>> double_reversed = list(reversed(sorted(reversed(data), "
"key=itemgetter(0))))\n"
">>> assert standard_way == double_reversed\n"
">>> standard_way\n"
"[('red', 1), ('red', 2), ('blue', 1), ('blue', 2)]"
msgstr ""
">>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n"
">>> standard_way = sorted(data, key=itemgetter(0), reverse=True)\n"
">>> double_reversed = list(reversed(sorted(reversed(data), "
"key=itemgetter(0))))\n"
">>> assert standard_way == double_reversed\n"
">>> standard_way\n"
"[('red', 1), ('red', 2), ('blue', 1), ('blue', 2)]"

#: ../../howto/sorting.rst:297
msgid ""
"The sort routines use ``<`` when making comparisons between two objects. So, "
"it is easy to add a standard sort order to a class by defining an :meth:"
"`~object.__lt__` method:"
msgstr ""
"Подпрограммы сортировки используют ``<`` при сравнении двух объектов. Таким "
"образом, в класс легко добавить стандартный порядок сортировки, определив "
"метод :meth:`~object.__lt__`:"

#: ../../howto/sorting.rst:301
msgid ""
">>> Student.__lt__ = lambda self, other: self.age < other.age\n"
">>> sorted(student_objects)\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"
msgstr ""
">>> Student.__lt__ = lambda self, other: self.age < other.age\n"
">>> sorted(student_objects)\n"
"[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]"

#: ../../howto/sorting.rst:307
msgid ""
"However, note that ``<`` can fall back to using :meth:`~object.__gt__` if :"
"meth:`~object.__lt__` is not implemented (see :func:`object.__lt__` for "
"details on the mechanics).  To avoid surprises, :pep:`8` recommends that all "
"six comparison methods be implemented. The :func:`~functools.total_ordering` "
"decorator is provided to make that task easier."
msgstr ""
"Однако обратите внимание, что ``<`` может вернуться к использованию :meth:"
"`~object.__gt__`, если :meth:`~object.__lt__` не реализован (см. :func:"
"`object.__lt__` для получения подробной информации о механика). Чтобы "
"избежать сюрпризов, :pep:`8` рекомендует реализовать все шесть методов "
"сравнения. Декоратор :func:`~functools.total_ordering` предназначен для "
"облегчения этой задачи."

#: ../../howto/sorting.rst:314
msgid ""
"Key functions need not depend directly on the objects being sorted. A key "
"function can also access external resources. For instance, if the student "
"grades are stored in a dictionary, they can be used to sort a separate list "
"of student names:"
msgstr ""
"Ключевые функции не обязательно должны напрямую зависеть от сортируемых "
"объектов. Ключевая функция также может получить доступ к внешним ресурсам. "
"Например, если оценки учащихся хранятся в словаре, их можно использовать для "
"сортировки отдельного списка имен учащихся:"

#: ../../howto/sorting.rst:319
msgid ""
">>> students = ['dave', 'john', 'jane']\n"
">>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}\n"
">>> sorted(students, key=newgrades.__getitem__)\n"
"['jane', 'dave', 'john']"
msgstr ""
">>> students = ['dave', 'john', 'jane']\n"
">>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}\n"
">>> sorted(students, key=newgrades.__getitem__)\n"
"['jane', 'dave', 'john']"

#: ../../howto/sorting.rst:327
msgid "Partial Sorts"
msgstr "Частичные сортировки"

#: ../../howto/sorting.rst:329
msgid ""
"Some applications require only some of the data to be ordered.  The standard "
"library provides several tools that do less work than a full sort:"
msgstr ""
"Некоторым приложениям требуется упорядочить только часть данных. Стандартная "
"библиотека предоставляет несколько инструментов, которые выполняют меньше "
"работы, чем полная сортировка:"

#: ../../howto/sorting.rst:332
msgid ""
":func:`min` and :func:`max` return the smallest and largest values, "
"respectively.  These functions make a single pass over the input data and "
"require almost no auxiliary memory."
msgstr ""
":func:`min` и :func:`max` возвращают наименьшее и наибольшее значения "
"соответственно. Эти функции выполняют один проход по входным данным и "
"практически не требуют дополнительной памяти."

#: ../../howto/sorting.rst:336
msgid ""
":func:`heapq.nsmallest` and :func:`heapq.nlargest` return the *n* smallest "
"and largest values, respectively.  These functions make a single pass over "
"the data keeping only *n* elements in memory at a time.  For values of *n* "
"that are small relative to the number of inputs, these functions make far "
"fewer comparisons than a full sort."
msgstr ""
":func:`heapq.nsmallest` и :func:`heapq.nlargest` возвращают *n* наименьшее и "
"наибольшее значения соответственно. Эти функции выполняют один проход по "
"данным, сохраняя в памяти одновременно только *n* элементов. Для значений "
"*n*, которые малы по сравнению с количеством входных данных, эти функции "
"выполняют гораздо меньше сравнений, чем полная сортировка."

#: ../../howto/sorting.rst:342
msgid ""
":func:`heapq.heappush` and :func:`heapq.heappop` create and maintain a "
"partially sorted arrangement of data that keeps the smallest element at "
"position ``0``.  These functions are suitable for implementing priority "
"queues which are commonly used for task scheduling."
msgstr ""
":func:`heapq.heappush` и :func:`heapq.heappop` создают и поддерживают "
"частично отсортированную структуру данных, которая сохраняет наименьший "
"элемент в позиции ``0``. Эти функции подходят для реализации очередей с "
"приоритетами, которые обычно используются для планирования задач."
