# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../howto/enum.rst:3
msgid "Enum HOWTO"
msgstr "Перечисление HOWTO"

#: ../../howto/enum.rst:9
msgid ""
"An :class:`Enum` is a set of symbolic names bound to unique values.  They "
"are similar to global variables, but they offer a more useful :func:"
"`repr()`, grouping, type-safety, and a few other features."
msgstr ""

#: ../../howto/enum.rst:13
msgid ""
"They are most useful when you have a variable that can take one of a limited "
"selection of values.  For example, the days of the week::"
msgstr ""
"Они наиболее полезны, когда у вас есть переменная, которая может принимать "
"одно из ограниченного набора значений. Например, дни недели:"

#: ../../howto/enum.rst:26
msgid "Or perhaps the RGB primary colors::"
msgstr "Или, возможно, основные цвета RGB::"

#: ../../howto/enum.rst:34
msgid ""
"As you can see, creating an :class:`Enum` is as simple as writing a class "
"that inherits from :class:`Enum` itself."
msgstr ""
"Как видите, создать :class:`Enum` так же просто, как написать класс, который "
"наследуется от самого :class:`Enum`."

#: ../../howto/enum.rst:37
msgid "Case of Enum Members"
msgstr "Регистр членов перечисления"

#: ../../howto/enum.rst:39
msgid ""
"Because Enums are used to represent constants we recommend using UPPER_CASE "
"names for members, and will be using that style in our examples."
msgstr ""

#: ../../howto/enum.rst:42
msgid ""
"Depending on the nature of the enum a member's value may or may not be "
"important, but either way that value can be used to get the corresponding "
"member::"
msgstr ""
"В зависимости от характера перечисления значение члена может быть важным, а "
"может и не быть важным, но в любом случае это значение можно использовать "
"для получения соответствующего члена:"

#: ../../howto/enum.rst:49
msgid ""
"As you can see, the ``repr()`` of a member shows the enum name, the member "
"name, and the value.  The ``str()`` of a member shows only the enum name and "
"member name::"
msgstr ""
"Как вы можете видеть, ``repr()`` члена показывает имя перечисления, имя "
"члена и значение. ``str()`` члена показывает только имя перечисления и имя "
"члена::"

#: ../../howto/enum.rst:56
msgid "The *type* of an enumeration member is the enum it belongs to::"
msgstr "*Тип* члена перечисления — это перечисление, которому он принадлежит::"

#: ../../howto/enum.rst:63
msgid "Enum members have an attribute that contains just their :attr:`name`::"
msgstr ""
"Члены перечисления имеют атрибут, который содержит только их :attr:`name`::"

#: ../../howto/enum.rst:68
msgid "Likewise, they have an attribute for their :attr:`value`::"
msgstr "Аналогично, у них есть атрибут для их :attr:`value`::"

#: ../../howto/enum.rst:74
msgid ""
"Unlike many languages that treat enumerations solely as name/value pairs, "
"Python Enums can have behavior added.  For example, :class:`datetime.date` "
"has two methods for returning the weekday: :meth:`weekday` and :meth:"
"`isoweekday`. The difference is that one of them counts from 0-6 and the "
"other from 1-7. Rather than keep track of that ourselves we can add a method "
"to the :class:`Weekday` enum to extract the day from the :class:`date` "
"instance and return the matching enum member::"
msgstr ""
"В отличие от многих языков, которые рассматривают перечисления исключительно "
"как пары имя/значение, в Python Enums можно добавлять поведение. Например, :"
"class:`datetime.date` имеет два метода для возврата дня недели: :meth:"
"`weekday` и :meth:`isoweekday`. Разница в том, что один из них считает от 0 "
"до 6, а другой от 1 до 7. Вместо того, чтобы отслеживать это самостоятельно, "
"мы можем добавить метод к перечислению :class:`Weekday`, чтобы извлечь день "
"из экземпляра :class:`date` и вернуть соответствующий член перечисления::"

#: ../../howto/enum.rst:86
msgid "The complete :class:`Weekday` enum now looks like this::"
msgstr "Полное перечисление :class:`Weekday` теперь выглядит так::"

#: ../../howto/enum.rst:101
msgid "Now we can find out what today is!  Observe::"
msgstr "Теперь мы можем узнать, что сегодня! Наблюдать::"

#: ../../howto/enum.rst:107
msgid ""
"Of course, if you're reading this on some other day, you'll see that day "
"instead."
msgstr ""
"Конечно, если вы читаете это в какой-то другой день, вместо этого вы увидите "
"тот день."

#: ../../howto/enum.rst:109
msgid ""
"This :class:`Weekday` enum is great if our variable only needs one day, but "
"what if we need several?  Maybe we're writing a function to plot chores "
"during a week, and don't want to use a :class:`list` -- we could use a "
"different type of :class:`Enum`::"
msgstr ""
"Это перечисление :class:`Weekday` отлично подходит, если нашей переменной "
"нужен только один день, но что, если нам нужно несколько? Возможно, мы пишем "
"функцию для построения графика работы по дому в течение недели и не хотим "
"использовать :class:`list` — мы могли бы использовать другой тип :class:"
"`Enum`::"

#: ../../howto/enum.rst:124
msgid ""
"We've changed two things: we're inherited from :class:`Flag`, and the values "
"are all powers of 2."
msgstr ""
"Мы изменили две вещи: мы унаследованы от :class:`Flag`, и все значения "
"являются степенями 2."

#: ../../howto/enum.rst:127
msgid ""
"Just like the original :class:`Weekday` enum above, we can have a single "
"selection::"
msgstr ""
"Как и в исходном перечислении :class:`Weekday` выше, у нас может быть один "
"выбор::"

#: ../../howto/enum.rst:133
msgid ""
"But :class:`Flag` also allows us to combine several members into a single "
"variable::"
msgstr ""
"Но :class:`Flag` также позволяет нам объединять несколько членов в одну "
"переменную::"

#: ../../howto/enum.rst:140
msgid "You can even iterate over a :class:`Flag` variable::"
msgstr "Вы даже можете перебирать переменную :class:`Flag`::"

#: ../../howto/enum.rst:147
msgid "Okay, let's get some chores set up::"
msgstr "Ладно, давайте настроим кое-какие дела::"

#: ../../howto/enum.rst:155
msgid "And a function to display the chores for a given day::"
msgstr "И функция для отображения дел на данный день:"

#: ../../howto/enum.rst:164
msgid ""
"In cases where the actual values of the members do not matter, you can save "
"yourself some work and use :func:`auto()` for the values::"
msgstr ""

#: ../../howto/enum.rst:183
msgid "Programmatic access to enumeration members and their attributes"
msgstr "Программный доступ к членам перечисления и их атрибутам"

#: ../../howto/enum.rst:185
msgid ""
"Sometimes it's useful to access members in enumerations programmatically (i."
"e. situations where ``Color.RED`` won't do because the exact color is not "
"known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"Иногда полезно программно обращаться к членам перечислений (например, в "
"ситуациях, когда ``Color.RED`` не подойдет, поскольку точный цвет неизвестен "
"во время написания программы). ``Enum`` разрешает такой доступ::"

#: ../../howto/enum.rst:194
msgid "If you want to access enum members by *name*, use item access::"
msgstr ""
"Если вы хотите получить доступ к членам перечисления по *имени*, используйте "
"доступ к элементу::"

#: ../../howto/enum.rst:201
msgid "If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr ""
"Если у вас есть член перечисления и вам нужен его :attr:`name` или :attr:"
"`value`::"

#: ../../howto/enum.rst:211
msgid "Duplicating enum members and values"
msgstr "Дублирование членов и значений перечисления"

#: ../../howto/enum.rst:213
msgid "Having two enum members with the same name is invalid::"
msgstr "Наличие двух членов перечисления с одинаковым именем недействительно::"

#: ../../howto/enum.rst:223
msgid ""
"However, an enum member can have other names associated with it.  Given two "
"entries ``A`` and ``B`` with the same value (and ``A`` defined first), ``B`` "
"is an alias for the member ``A``.  By-value lookup of the value of ``A`` "
"will return the member ``A``.  By-name lookup of ``A`` will return the "
"member ``A``. By-name lookup of ``B`` will also return the member ``A``::"
msgstr ""
"Однако член перечисления может иметь другие имена, связанные с ним. Учитывая "
"две записи ``A`` и ``B`` с одинаковым значением (и ``A`` определено первым), "
"``B`` является псевдонимом для элемента ``A``. Поиск по значению значения "
"``A`` вернет элемент ``A``. Поиск по имени ``A`` вернет член ``A``. Поиск по "
"имени ``B`` также вернет член ``A``::"

#: ../../howto/enum.rst:244
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr ""
"Попытка создать член с тем же именем, что и уже определенный атрибут (другой "
"член, метод и т. д.), или попытка создать атрибут с тем же именем, что и "
"член, не допускается."

#: ../../howto/enum.rst:250
msgid "Ensuring unique enumeration values"
msgstr "Обеспечение уникальных значений перечисления"

#: ../../howto/enum.rst:252
msgid ""
"By default, enumerations allow multiple names as aliases for the same value. "
"When this behavior isn't desired, you can use the :func:`unique` decorator::"
msgstr ""
"По умолчанию перечисления допускают использование нескольких имен в качестве "
"псевдонимов для одного и того же значения. Если такое поведение "
"нежелательно, вы можете использовать декоратор :func:`unique`::"

#: ../../howto/enum.rst:269
msgid "Using automatic values"
msgstr "Использование автоматических значений"

#: ../../howto/enum.rst:271
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr ""
"Если точное значение не имеет значения, вы можете использовать :class:"
"`auto`::"

#: ../../howto/enum.rst:282
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr ""
"Значения выбираются с помощью :func:`_generate_next_value_`, который можно "
"переопределить::"

#: ../../howto/enum.rst:300
msgid ""
"The :meth:`_generate_next_value_` method must be defined before any members."
msgstr ""
"Метод :meth:`_generate_next_value_` должен быть определен перед любыми "
"членами."

#: ../../howto/enum.rst:303
msgid "Iteration"
msgstr "Итерация"

#: ../../howto/enum.rst:305
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr "Перебор членов перечисления не предоставляет псевдонимы::"

#: ../../howto/enum.rst:312
msgid ""
"Note that the aliases ``Shape.ALIAS_FOR_SQUARE`` and ``Weekday.WEEKEND`` "
"aren't shown."
msgstr ""
"Обратите внимание, что псевдонимы Shape.ALIAS_FOR_SQUARE и Weekday.WEEKEND "
"не отображаются."

#: ../../howto/enum.rst:314
msgid ""
"The special attribute ``__members__`` is a read-only ordered mapping of "
"names to members.  It includes all names defined in the enumeration, "
"including the aliases::"
msgstr ""
"Специальный атрибут ``__members__`` представляет собой упорядоченное "
"сопоставление имен с членами, доступное только для чтения. Он включает в "
"себя все имена, определенные в перечислении, включая псевдонимы::"

#: ../../howto/enum.rst:326
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr ""
"Атрибут ``__members__`` может использоваться для подробного программного "
"доступа к членам перечисления. Например, поиск всех псевдонимов::"

#: ../../howto/enum.rst:334
msgid ""
"Aliases for flags include values with multiple flags set, such as ``3``, and "
"no flags set, i.e. ``0``."
msgstr ""
"Псевдонимы для флагов включают значения с несколькими установленными "
"флагами, например «3», и без установленных флагов, то есть «0»."

#: ../../howto/enum.rst:339
msgid "Comparisons"
msgstr "Сравнения"

#: ../../howto/enum.rst:341
msgid "Enumeration members are compared by identity::"
msgstr "Члены перечисления сравниваются по идентичности::"

#: ../../howto/enum.rst:350
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr ""
"Упорядоченные сравнения между значениями перечисления *не* поддерживаются. "
"Члены перечисления не являются целыми числами (но см. `IntEnum`_ ниже)::"

#: ../../howto/enum.rst:358
msgid "Equality comparisons are defined though::"
msgstr "Однако сравнения равенства определены::"

#: ../../howto/enum.rst:367
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr "Однако сравнения равенства определены::"

#: ../../howto/enum.rst:376
msgid ""
"It is possible to reload modules -- if a reloaded module contains enums, "
"they will be recreated, and the new members may not compare identical/equal "
"to the original members."
msgstr ""
"Модули можно перезагрузить — если перезагружаемый модуль содержит "
"перечисления, они будут созданы заново, и новые члены не смогут сравниваться "
"идентичными/равными исходным элементам."

#: ../../howto/enum.rst:381
msgid "Allowed members and attributes of enumerations"
msgstr "Разрешенные члены и атрибуты перечислений"

#: ../../howto/enum.rst:383
msgid ""
"Most of the examples above use integers for enumeration values.  Using "
"integers is short and handy (and provided by default by the `Functional "
"API`_), but not strictly enforced.  In the vast majority of use-cases, one "
"doesn't care what the actual value of an enumeration is.  But if the value "
"*is* important, enumerations can have arbitrary values."
msgstr ""
"В большинстве приведенных выше примеров в качестве значений перечисления "
"используются целые числа. Использование целых чисел коротко и удобно (и "
"предоставляется по умолчанию в `Functional API`_), но не является строго "
"обязательным. В подавляющем большинстве случаев использования неважно, "
"каково фактическое значение перечисления. Но если значение *важно*, "
"перечисления могут иметь произвольные значения."

#: ../../howto/enum.rst:389
msgid ""
"Enumerations are Python classes, and can have methods and special methods as "
"usual.  If we have this enumeration::"
msgstr ""
"Перечисления представляют собой классы Python и, как обычно, могут иметь "
"методы и специальные методы. Если у нас есть это перечисление::"

#: ../../howto/enum.rst:409
msgid "Then::"
msgstr "Затем::"

#: ../../howto/enum.rst:418
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, :meth:"
"`__add__`, etc.), descriptors (methods are also descriptors), and variable "
"names listed in :attr:`_ignore_`."
msgstr ""
"Правила разрешений следующие: имена, которые начинаются и заканчиваются "
"одним подчеркиванием, зарезервированы перечислением и не могут "
"использоваться; все остальные атрибуты, определенные в перечислении, станут "
"членами этого перечисления, за исключением специальных методов (:meth:"
"`__str__`, :meth:`__add__` и т. д.), дескрипторов (методы также являются "
"дескрипторами) и имен переменных. перечислен в :attr:`_ignore_`."

#: ../../howto/enum.rst:425
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__`, "
"any value(s) given to the enum member will be passed into those methods. See "
"`Planet`_ for an example."
msgstr ""
"Примечание. Если ваше перечисление определяет :meth:`__new__` и/или :meth:"
"`__init__`, любое значение(я), переданное члену перечисления, будет передано "
"в эти методы. См. пример в `Planet`_."

#: ../../howto/enum.rst:431
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members.  See :ref:`new-vs-init` for "
"more details."
msgstr ""
"Метод :meth:`__new__`, если он определен, используется во время создания "
"членов Enum; затем он заменяется :meth:`__new__` из Enum, который "
"используется после создания класса для поиска существующих членов. "
"Дополнительную информацию см. в :ref:`new-vs-init`."

#: ../../howto/enum.rst:438
msgid "Restricted Enum subclassing"
msgstr "Ограниченное подклассирование Enum"

#: ../../howto/enum.rst:440
msgid ""
"A new :class:`Enum` class must have one base enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"Новый класс :class:`Enum` должен иметь один базовый класс перечисления, до "
"одного конкретного типа данных и столько примесей на основе :class:`object`, "
"сколько необходимо. Порядок этих базовых классов следующий:"

#: ../../howto/enum.rst:447
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not "
"define any members.  So this is forbidden::"
msgstr ""
"Кроме того, создание подкласса перечисления разрешено только в том случае, "
"если перечисление не определяет никаких членов. Так это запрещено::"

#: ../../howto/enum.rst:457
msgid "But this is allowed::"
msgstr "Но это разрешено::"

#: ../../howto/enum.rst:468
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"Разрешение подклассификации перечислений, определяющих элементы, приведет к "
"нарушению некоторых важных инвариантов типов и экземпляров. С другой "
"стороны, имеет смысл разрешить совместное использование некоторого общего "
"поведения для группы перечислений. (Пример смотрите в `OrderedEnum`_)."

#: ../../howto/enum.rst:475
msgid "Pickling"
msgstr "Сериализация"

#: ../../howto/enum.rst:477
msgid "Enumerations can be pickled and unpickled::"
msgstr "Перечисления могут быть сериализованными и десериализованными::"

#: ../../howto/enum.rst:484
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr ""
"Применяются обычные ограничения на травление: пикируемые перечисления должны "
"быть определены на верхнем уровне модуля, поскольку для распаковки "
"требуется, чтобы их можно было импортировать из этого модуля."

#: ../../howto/enum.rst:490
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr ""
"С протоколом Pickle версии 4 можно легко выбирать перечисления, вложенные в "
"другие классы."

#: ../../howto/enum.rst:493
msgid ""
"It is possible to modify how enum members are pickled/unpickled by defining :"
"meth:`__reduce_ex__` in the enumeration class.  The default method is by-"
"value, but enums with complicated values may want to use by-name::"
msgstr ""
"Можно изменить способ консервирования/расконсервации членов перечисления, "
"определив :meth:`__reduce_ex__` в классе перечисления. По умолчанию "
"используется метод по значению, но перечисления со сложными значениями могут "
"использовать метод по имени::"

#: ../../howto/enum.rst:503
msgid ""
"Using by-name for flags is not recommended, as unnamed aliases will not "
"unpickle."
msgstr ""
"Использование для флагов по имени не рекомендуется, так как безымянные "
"псевдонимы не будут распакованы."

#: ../../howto/enum.rst:508
msgid "Functional API"
msgstr "функциональный API"

#: ../../howto/enum.rst:510
msgid ""
"The :class:`Enum` class is callable, providing the following functional API::"
msgstr ""
"Класс :class:`Enum` является вызываемым и предоставляет следующий "
"функциональный API:"

#: ../../howto/enum.rst:520
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"Семантика этого API напоминает :class:`~collections.namedtuple`. Первый "
"аргумент вызова :class:`Enum` — это имя перечисления."

#: ../../howto/enum.rst:523
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of 2-"
"tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"Второй аргумент — это *источник* имен членов перечисления. Это может быть "
"строка имен, разделенных пробелами, последовательность имен, "
"последовательность двух кортежей с парами ключ/значение или сопоставление "
"(например, словарь) имен со значениями. Последние две опции позволяют "
"присваивать перечислениям произвольные значения; остальные автоматически "
"назначают возрастающие целые числа, начиная с 1 (используйте параметр start, "
"чтобы указать другое начальное значение). Возвращается новый класс, "
"производный от :class:`Enum`. Другими словами, приведенное выше присвоение :"
"class:`Animal` эквивалентно::"

#: ../../howto/enum.rst:539
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but by default enum members all "
"evaluate to ``True``."
msgstr ""
"Причина установки по умолчанию «1» в качестве начального числа, а не «0», "
"заключается в том, что «0» является «False» в логическом смысле, но по "
"умолчанию все члены перечисления оцениваются как «True». ``."

#: ../../howto/enum.rst:543
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in a separate module, and also may not work on IronPython or "
"Jython). The solution is to specify the module name explicitly as follows::"
msgstr ""
"Выборка перечислений, созданных с помощью функционального API, может быть "
"сложной задачей, поскольку детали реализации стека кадров используются для "
"того, чтобы попытаться выяснить, в каком модуле создается перечисление "
"(например, оно завершится неудачей, если вы используете служебную функцию в "
"отдельном модуле, а также может не получиться). работать на IronPython или "
"Jython). Решение состоит в том, чтобы явно указать имя модуля следующим "
"образом:"

#: ../../howto/enum.rst:553
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new "
"Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"Если ``module`` не указан и Enum не может определить, что это такое, новые "
"члены Enum не будут недоступны для выбора; чтобы ошибки оставались ближе к "
"источнику, травление будет отключено."

#: ../../howto/enum.rst:557
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on :attr:"
"`~definition.__qualname__` being set to the location where pickle will be "
"able to find the class.  For example, if the class was made available in "
"class SomeData in the global scope::"
msgstr ""

#: ../../howto/enum.rst:564
msgid "The complete signature is::"
msgstr "Полная подпись выглядит следующим образом::"

#: ../../howto/enum.rst:576
msgid "*value*: What the new enum class will record as its name."
msgstr ""
"*значение*: то, что новый класс перечисления запишет в качестве своего имени."

#: ../../howto/enum.rst:578
msgid ""
"*names*: The enum members.  This can be a whitespace- or comma-separated "
"string (values will start at 1 unless otherwise specified)::"
msgstr ""
"*имена*: члены перечисления. Это может быть строка, разделенная пробелами "
"или запятыми (значения начинаются с 1, если не указано иное)::"

#: ../../howto/enum.rst:583
msgid "or an iterator of names::"
msgstr "или итератор имен::"

#: ../../howto/enum.rst:587
msgid "or an iterator of (name, value) pairs::"
msgstr "или итератор пар (имя, значение)::"

#: ../../howto/enum.rst:591
msgid "or a mapping::"
msgstr "или отображение::"

#: ../../howto/enum.rst:595
msgid "*module*: name of module where new enum class can be found."
msgstr "*модуль*: имя модуля, в котором можно найти новый класс перечисления."

#: ../../howto/enum.rst:597
msgid "*qualname*: where in module new enum class can be found."
msgstr "*qualname*: где в модуле можно найти новый класс перечисления."

#: ../../howto/enum.rst:599
msgid "*type*: type to mix in to new enum class."
msgstr "*type*: тип для добавления в новый класс перечисления."

#: ../../howto/enum.rst:601
msgid "*start*: number to start counting at if only names are passed in."
msgstr ""
"*start*: номер, с которого начинается отсчет, если переданы только имена."

#: ../../howto/enum.rst:603
msgid "The *start* parameter was added."
msgstr "Добавлен параметр *start*."

#: ../../howto/enum.rst:608
msgid "Derived Enumerations"
msgstr "Производные перечисления"

#: ../../howto/enum.rst:611
msgid "IntEnum"
msgstr "IntEnum"

#: ../../howto/enum.rst:613
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of :"
"class:`int`.  Members of an :class:`IntEnum` can be compared to integers; by "
"extension, integer enumerations of different types can also be compared to "
"each other::"
msgstr ""
"Первый предоставленный вариант :class:`Enum` также является подклассом :"
"class:`int`. Члены :class:`IntEnum` можно сравнивать с целыми числами; в "
"более широком смысле, целочисленные перечисления разных типов также можно "
"сравнивать друг с другом:"

#: ../../howto/enum.rst:634
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr ""
"Однако их по-прежнему нельзя сравнивать со стандартными перечислениями :"
"class:`Enum`::"

#: ../../howto/enum.rst:647
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr ""
"Значения :class:`IntEnum` ведут себя как целые числа другими способами, "
"которые вы ожидаете::"

#: ../../howto/enum.rst:658
msgid "StrEnum"
msgstr "StrEnum"

#: ../../howto/enum.rst:660
msgid ""
"The second variation of :class:`Enum` that is provided is also a subclass "
"of :class:`str`.  Members of a :class:`StrEnum` can be compared to strings; "
"by extension, string enumerations of different types can also be compared to "
"each other."
msgstr ""
"Второй предоставленный вариант :class:`Enum` также является подклассом :"
"class:`str`. Члены :class:`StrEnum` можно сравнивать со строками; в более "
"широком смысле, перечисления строк разных типов также можно сравнивать друг "
"с другом."

#: ../../howto/enum.rst:669
msgid "IntFlag"
msgstr "IntFlag"

#: ../../howto/enum.rst:671
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be "
"combined using the bitwise operators (&, \\|, ^, ~) and the result is still "
"an :class:`IntFlag` member, if possible.  Like :class:`IntEnum`, :class:"
"`IntFlag` members are also integers and can be used wherever an :class:`int` "
"is used."
msgstr ""
"Следующий вариант :class:`Enum`, :class:`IntFlag`, также основан на :class:"
"`int`. Разница в том, что члены :class:`IntFlag` можно комбинировать с "
"помощью побитовых операторов (&, \\|, ^, ~), и результатом по-прежнему будет "
"член :class:`IntFlag`, если это возможно. Как и :class:`IntEnum`, члены :"
"class:`IntFlag` также являются целыми числами и могут использоваться везде, "
"где используется :class:`int`."

#: ../../howto/enum.rst:679
msgid ""
"Any operation on an :class:`IntFlag` member besides the bit-wise operations "
"will lose the :class:`IntFlag` membership."
msgstr ""
"Любая операция над элементом :class:`IntFlag`, кроме побитовых операций, "
"потеряет членство в :class:`IntFlag`."

#: ../../howto/enum.rst:682
msgid ""
"Bit-wise operations that result in invalid :class:`IntFlag` values will lose "
"the :class:`IntFlag` membership.  See :class:`FlagBoundary` for details."
msgstr ""
"Побитовые операции, которые приводят к недопустимым значениям :class:"
"`IntFlag`, теряют членство в :class:`IntFlag`. Подробности смотрите в :class:"
"`FlagBoundary`."

#: ../../howto/enum.rst:689
msgid "Sample :class:`IntFlag` class::"
msgstr "Образец класса :class:`IntFlag`::"

#: ../../howto/enum.rst:705
msgid "It is also possible to name the combinations::"
msgstr "Также можно назвать комбинации:"

#: ../../howto/enum.rst:721
msgid ""
"Named combinations are considered aliases.  Aliases do not show up during "
"iteration, but can be returned from by-value lookups."
msgstr ""
"Именованные комбинации считаются псевдонимами. Псевдонимы не отображаются во "
"время итерации, но могут быть возвращены при поиске по значению."

#: ../../howto/enum.rst:726
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is :data:"
"`False`::"
msgstr ""
"Еще одно важное различие между :class:`IntFlag` и :class:`Enum` заключается "
"в том, что если флаги не установлены (значение равно 0), его логическое "
"значение равно :data:`False`::"

#: ../../howto/enum.rst:734
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them (but may lose :class:`IntFlag` membership::"
msgstr ""
"Поскольку члены :class:`IntFlag` также являются подклассами :class:`int`, их "
"можно комбинировать с ними (но они могут потерять членство в :class:"
"`IntFlag`::"

#: ../../howto/enum.rst:745
msgid ""
"The negation operator, ``~``, always returns an :class:`IntFlag` member with "
"a positive value::"
msgstr ""
"Оператор отрицания ``~`` всегда возвращает член :class:`IntFlag` с "
"положительным значением::"

#: ../../howto/enum.rst:751
msgid ":class:`IntFlag` members can also be iterated over::"
msgstr "Члены :class:`IntFlag` также можно перебирать::"

#: ../../howto/enum.rst:760
msgid "Flag"
msgstr "Флаг"

#: ../../howto/enum.rst:762
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike :"
"class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""
"Последний вариант — :class:`Flag`. Как и :class:`IntFlag`, члены :class:"
"`Flag` можно комбинировать с помощью побитовых операторов (&, \\|, ^, ~). В "
"отличие от :class:`IntFlag`, их нельзя комбинировать или сравнивать с любым "
"другим перечислением :class:`Flag` или :class:`int`. Хотя можно указать "
"значения напрямую, рекомендуется использовать :class:`auto` в качестве "
"значения и позволить :class:`Flag` выбрать подходящее значение."

#: ../../howto/enum.rst:771
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"Как и :class:`IntFlag`, если комбинация членов :class:`Flag` приводит к "
"тому, что флаги не устанавливаются, логическая оценка будет :data:`False`::"

#: ../../howto/enum.rst:785
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, "
"8, ...), while combinations of flags will not::"
msgstr ""
"Отдельные флаги должны иметь значения, являющиеся степенью двойки (1, 2, 4, "
"8, ...), тогда как комбинации флагов не будут:"

#: ../../howto/enum.rst:797
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr ""
"Присвоение имени условию «флаги не установлены» не меняет его логическое "
"значение::"

#: ../../howto/enum.rst:811
msgid ":class:`Flag` members can also be iterated over::"
msgstr "Члены :class:`Flag` также можно перебирать::"

#: ../../howto/enum.rst:821
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic "
"promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and :class:"
"`IntFlag` should be used only in cases where :class:`Enum` and :class:`Flag` "
"will not do; for example, when integer constants are replaced with "
"enumerations, or for interoperability with other systems."
msgstr ""
"Для большинства нового кода настоятельно рекомендуется использовать :class:"
"`Enum` и :class:`Flag`, поскольку :class:`IntEnum` и :class:`IntFlag` "
"нарушают некоторые семантические обещания перечисления (поскольку они "
"сравнимы с целые числа и, следовательно, транзитивностью к другим "
"несвязанным перечислениям). :class:`IntEnum` и :class:`IntFlag` следует "
"использовать только в тех случаях, когда :class:`Enum` и :class:`Flag` не "
"подходят; например, когда целочисленные константы заменяются перечислениями "
"или для совместимости с другими системами."

#: ../../howto/enum.rst:831
msgid "Others"
msgstr "Другие"

#: ../../howto/enum.rst:833
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr ""
"Хотя :class:`IntEnum` является частью модуля :mod:`enum`, его было бы очень "
"просто реализовать независимо::"

#: ../../howto/enum.rst:839
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`FloatEnum` that mixes in :class:`float` instead of :class:"
"`int`."
msgstr ""
"Это демонстрирует, как можно определить подобные производные перечисления; "
"например, :class:`FloatEnum`, который смешивается с :class:`float` вместо :"
"class:`int`."

#: ../../howto/enum.rst:842
msgid "Some rules:"
msgstr "Некоторые правила:"

#: ../../howto/enum.rst:844
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before :class:"
"`Enum` itself in the sequence of bases, as in the :class:`IntEnum` example "
"above."
msgstr ""
"При создании подкласса :class:`Enum` смешанные типы должны появляться перед "
"самим :class:`Enum` в последовательности оснований, как в примере :class:"
"`IntEnum` выше."

#: ../../howto/enum.rst:847
msgid ""
"Mix-in types must be subclassable. For example, :class:`bool` and :class:"
"`range` are not subclassable and will throw an error during Enum creation if "
"used as the mix-in type."
msgstr ""
"Типы примесей должны быть подклассами. Например, :class:`bool` и :class:"
"`range` не являются подклассами и выдадут ошибку во время создания Enum, "
"если они используются в качестве подкласса."

#: ../../howto/enum.rst:850
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. :class:"
"`int` above.  This restriction does not apply to mix-ins which only add "
"methods and don't specify another type."
msgstr ""
"Хотя :class:`Enum` может иметь члены любого типа, после добавления "
"дополнительного типа все члены должны иметь значения этого типа, например :"
"class:`int` выше. Это ограничение не распространяется на примеси, которые "
"только добавляют методы и не указывают другой тип."

#: ../../howto/enum.rst:854
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr ""
"Когда добавляется другой тип данных, атрибут :attr:`value` *не совпадает* с "
"самим элементом перечисления, хотя он эквивалентен и будет сравниваться "
"равным."

#: ../../howto/enum.rst:857
msgid "A ``data type`` is a mixin that defines :meth:`__new__`."
msgstr ""

#: ../../howto/enum.rst:858
msgid ""
"%-style formatting:  ``%s`` and ``%r`` call the :class:`Enum` class's :meth:"
"`__str__` and :meth:`__repr__` respectively; other codes (such as ``%i`` or "
"``%h`` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""
"%-style formatting:  ``%s`` and ``%r`` call the :class:`Enum` class's :meth:"
"`__str__` and :meth:`__repr__` respectively; other codes (such as ``%i`` or "
"``%h`` for IntEnum) treat the enum member as its mixed-in type."

#: ../../howto/enum.rst:861
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and :func:"
"`format` will use the enum's :meth:`__str__` method."
msgstr ""
":ref:`Форматированные строковые литералы <f-strings>`, :meth:`str.format` и :"
"func:`format` будут использовать метод перечисления :meth:`__str__`."

#: ../../howto/enum.rst:866
msgid ""
"Because :class:`IntEnum`, :class:`IntFlag`, and :class:`StrEnum` are "
"designed to be drop-in replacements for existing constants, their :meth:"
"`__str__` method has been reset to their data types' :meth:`__str__` method."
msgstr ""
"Поскольку :class:`IntEnum`, :class:`IntFlag` и :class:`StrEnum` "
"предназначены для замены существующих констант, их метод :meth:`__str__` был "
"сброшен до их типов данных. :meth:`__str__` метод."

#: ../../howto/enum.rst:874
msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
msgstr "Когда использовать :meth:`__new__` или :meth:`__init__`"

#: ../../howto/enum.rst:876
msgid ""
":meth:`__new__` must be used whenever you want to customize the actual value "
"of the :class:`Enum` member.  Any other modifications may go in either :meth:"
"`__new__` or :meth:`__init__`, with :meth:`__init__` being preferred."
msgstr ""
":meth:`__new__` необходимо использовать всякий раз, когда вы хотите "
"настроить фактическое значение члена :class:`Enum`. Любые другие модификации "
"могут входить либо в :meth:`__new__`, либо в :meth:`__init__`, причем :meth:"
"`__init__` предпочтительнее."

#: ../../howto/enum.rst:880
msgid ""
"For example, if you want to pass several items to the constructor, but only "
"want one of them to be the value::"
msgstr ""
"Например, если вы хотите передать в конструктор несколько элементов, но "
"хотите, чтобы только один из них был значением:"

#: ../../howto/enum.rst:907
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly."
msgstr ""
"*Не* вызывайте ``super().__new__()``, так как найден только ``__new__``, "
"предназначенный только для поиска; вместо этого используйте тип данных "
"напрямую."

#: ../../howto/enum.rst:912
msgid "Finer Points"
msgstr "Тонкости"

#: ../../howto/enum.rst:915
msgid "Supported ``__dunder__`` names"
msgstr "Поддерживаемые имена ``__dunder__`` "

#: ../../howto/enum.rst:917
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` — это упорядоченное сопоставление элементов "
"``member_name``:``member``, доступное только для чтения. Это доступно только "
"в классе."

#: ../../howto/enum.rst:920
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
":meth:`__new__`, если он указан, должен создавать и возвращать члены "
"перечисления; Также очень хорошей идеей будет правильно установить :attr:"
"`_value_` элемента. После создания всех членов он больше не используется."

#: ../../howto/enum.rst:926
msgid "Supported ``_sunder_`` names"
msgstr "Поддерживаемые имена ``_sunder_`` "

#: ../../howto/enum.rst:928
msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- имя участника"

#: ../../howto/enum.rst:929
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- значение члена; можно установить/изменить в ``__new__``"

#: ../../howto/enum.rst:931
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""
"``_missing_`` -- функция поиска, используемая, когда значение не найдено; "
"может быть переопределено"

#: ../../howto/enum.rst:933
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""
"``_ignore_`` -- список имен в виде :class:`list` или :class:`str`, который "
"не будет преобразован в члены и будет удален из конечного класса."

#: ../../howto/enum.rst:936
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""
"``_order_`` — используется в коде Python 2/3 для обеспечения единообразия "
"порядка членов (атрибут класса, удаленный во время создания класса)"

#: ../../howto/enum.rst:938
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by :class:"
"`auto` to get an appropriate value for an enum member; may be overridden"
msgstr ""
"``_generate_next_value_`` -- используется ``Functional API`_ и :class:`auto` "
"для получения соответствующего значения для члена перечисления; может быть "
"переопределено"

#: ../../howto/enum.rst:944
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""
"Для стандартных классов :class:`Enum` следующим выбранным значением является "
"последнее замеченное значение, увеличенное на единицу."

#: ../../howto/enum.rst:947
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""
"Для классов :class:`Flag` следующее выбранное значение будет следующей по "
"величине степенью двойки, независимо от последнего увиденного значения."

#: ../../howto/enum.rst:950
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../howto/enum.rst:951
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../howto/enum.rst:953
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"Чтобы синхронизировать код Python 2/Python 3, можно предоставить атрибут :"
"attr:`_order_`. Он будет проверен на соответствие фактическому порядку "
"перечисления и выдаст ошибку, если они не совпадают:"

#: ../../howto/enum.rst:971
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr ""
"В коде Python 2 атрибут :attr:`_order_` необходим, поскольку порядок "
"определения теряется до того, как его можно будет записать."

#: ../../howto/enum.rst:976
msgid "_Private__names"
msgstr "_Private__names"

#: ../../howto/enum.rst:978
msgid ""
":ref:`Private names <private-name-mangling>` are not converted to enum "
"members, but remain normal attributes."
msgstr ""
":ref:`Частные имена <private-name-mangling>` не преобразуются в члены "
"перечисления, а остаются обычными атрибутами."

#: ../../howto/enum.rst:985
msgid "``Enum`` member type"
msgstr "Тип элемента ``Enum``"

#: ../../howto/enum.rst:987
msgid ""
"Enum members are instances of their enum class, and are normally accessed as "
"``EnumClass.member``.  In certain situations, such as writing custom enum "
"behavior, being able to access one member directly from another is useful, "
"and is supported."
msgstr ""

#: ../../howto/enum.rst:996
msgid "Creating members that are mixed with other data types"
msgstr "Создание членов, смешанных с другими типами данных"

#: ../../howto/enum.rst:998
msgid ""
"When subclassing other data types, such as :class:`int` or :class:`str`, "
"with an :class:`Enum`, all values after the ``=`` are passed to that data "
"type's constructor.  For example::"
msgstr ""
"При создании подклассов других типов данных, таких как :class:`int` или :"
"class:`str`, с помощью :class:`Enum`, все значения после ``=`` передаются "
"конструктору этого типа данных. Например::"

#: ../../howto/enum.rst:1010
msgid "Boolean value of ``Enum`` classes and members"
msgstr "Логическое значение классов и членов Enum"

#: ../../howto/enum.rst:1012
msgid ""
"Enum classes that are mixed with non-:class:`Enum` types (such as :class:"
"`int`, :class:`str`, etc.) are evaluated according to the mixed-in type's "
"rules; otherwise, all members evaluate as :data:`True`.  To make your own "
"enum's boolean evaluation depend on the member's value add the following to "
"your class::"
msgstr ""
"Классы перечислений, смешанные с типами, отличными от :class:`Enum` (такими "
"как :class:`int`, :class:`str` и т. д.), оцениваются в соответствии с "
"правилами смешанного типа; в противном случае все члены оцениваются как :"
"data:`True`. Чтобы логическая оценка вашего собственного перечисления "
"зависела от значения члена, добавьте в свой класс следующее:"

#: ../../howto/enum.rst:1021
msgid "Plain :class:`Enum` classes always evaluate as :data:`True`."
msgstr "Обычные классы :class:`Enum` всегда оцениваются как :data:`True`."

#: ../../howto/enum.rst:1025
msgid "``Enum`` classes with methods"
msgstr "Классы ``Enum`` с методами"

#: ../../howto/enum.rst:1027
msgid ""
"If you give your enum subclass extra methods, like the `Planet`_ class "
"below, those methods will show up in a :func:`dir` of the member, but not of "
"the class::"
msgstr ""
"Если вы дадите своему подклассу перечисления дополнительные методы, такие "
"как класс `Planet`_ ниже, эти методы будут отображаться в :func:`dir` члена, "
"но не в классе::"

#: ../../howto/enum.rst:1038
msgid "Combining members of ``Flag``"
msgstr "Объединение членов ``Flag``"

#: ../../howto/enum.rst:1040
msgid ""
"Iterating over a combination of :class:`Flag` members will only return the "
"members that are comprised of a single bit::"
msgstr ""
"Перебор комбинации членов :class:`Flag` вернет только те члены, которые "
"состоят из одного бита::"

#: ../../howto/enum.rst:1058
msgid "``Flag`` and ``IntFlag`` minutia"
msgstr "``Flag`` и ``IntFlag`` мелочи"

#: ../../howto/enum.rst:1060
msgid "Using the following snippet for our examples::"
msgstr "Используя следующий фрагмент для наших примеров:"

#: ../../howto/enum.rst:1071
msgid "the following are true:"
msgstr "верно следующее:"

#: ../../howto/enum.rst:1073
msgid "single-bit flags are canonical"
msgstr "однобитовые флаги являются каноническими"

#: ../../howto/enum.rst:1074
msgid "multi-bit and zero-bit flags are aliases"
msgstr "многобитные и нуль-битные флаги являются псевдонимами"

#: ../../howto/enum.rst:1075
msgid "only canonical flags are returned during iteration::"
msgstr "во время итерации возвращаются только канонические флаги::"

#: ../../howto/enum.rst:1080
msgid ""
"negating a flag or flag set returns a new flag/flag set with the "
"corresponding positive integer value::"
msgstr ""
"отрицание флага или набора флагов возвращает новый флаг/набор флагов с "
"соответствующим положительным целочисленным значением::"

#: ../../howto/enum.rst:1089
msgid "names of pseudo-flags are constructed from their members' names::"
msgstr "имена псевдофлагов создаются из имен их членов::"

#: ../../howto/enum.rst:1094
msgid "multi-bit flags, aka aliases, can be returned from operations::"
msgstr ""
"многобитовые флаги, также известные как псевдонимы, могут быть возвращены "
"операциями::"

#: ../../howto/enum.rst:1105
msgid ""
"membership / containment checking: zero-valued flags are always considered "
"to be contained::"
msgstr ""
"Проверка членства/включения: флаги с нулевым значением всегда считаются "
"содержащимися::"

#: ../../howto/enum.rst:1111
msgid ""
"otherwise, only if all bits of one flag are in the other flag will True be "
"returned::"
msgstr ""
"в противном случае, только если все биты одного флага находятся в другом "
"флаге, будет возвращено значение True::"

#: ../../howto/enum.rst:1120
msgid ""
"There is a new boundary mechanism that controls how out-of-range / invalid "
"bits are handled: ``STRICT``, ``CONFORM``, ``EJECT``, and ``KEEP``:"
msgstr ""
"Существует новый механизм границ, который контролирует, как обрабатываются "
"биты, выходящие за пределы диапазона/недопустимые: STRICT, CONFORM, EJECT и "
"KEEP:"

#: ../../howto/enum.rst:1123
msgid "STRICT --> raises an exception when presented with invalid values"
msgstr ""
"STRICT --> вызывает исключение при представлении недопустимых значений."

#: ../../howto/enum.rst:1124
msgid "CONFORM --> discards any invalid bits"
msgstr "CONFORM --> отбрасывает все недопустимые биты."

#: ../../howto/enum.rst:1125
msgid "EJECT --> lose Flag status and become a normal int with the given value"
msgstr ""
"EJECT -> потерять статус флага и стать обычным целым числом с заданным "
"значением"

#: ../../howto/enum.rst:1126
msgid "KEEP --> keep the extra bits"
msgstr "KEEP --> сохранить лишние биты"

#: ../../howto/enum.rst:1128
msgid "keeps Flag status and extra bits"
msgstr "сохраняет статус флага и дополнительные биты"

#: ../../howto/enum.rst:1129
msgid "extra bits do not show up in iteration"
msgstr "дополнительные биты не отображаются в итерации"

#: ../../howto/enum.rst:1130
msgid "extra bits do show up in repr() and str()"
msgstr "дополнительные биты появляются в repr() и str()"

#: ../../howto/enum.rst:1132
msgid ""
"The default for Flag is ``STRICT``, the default for ``IntFlag`` is "
"``EJECT``, and the default for ``_convert_`` is ``KEEP`` (see ``ssl."
"Options`` for an example of when ``KEEP`` is needed)."
msgstr ""
"Значением по умолчанию для флага является STRICT, для IntFlag по умолчанию — "
"EJECT, а для _convert_ по умолчанию — KEEP (см. ssl.Options). для примера, "
"когда требуется ``KEEP``)."

#: ../../howto/enum.rst:1140
msgid "How are Enums and Flags different?"
msgstr "Чем отличаются перечисления и флаги?"

#: ../../howto/enum.rst:1142
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived :"
"class:`Enum` classes and their instances (members)."
msgstr ""
"Перечисления имеют собственный метакласс, который влияет на многие аспекты "
"как производных классов :class:`Enum`, так и их экземпляров (членов)."

#: ../../howto/enum.rst:1147
msgid "Enum Classes"
msgstr "Классы перечисления"

#: ../../howto/enum.rst:1149
msgid ""
"The :class:`EnumType` metaclass is responsible for providing the :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods that "
"allow one to do things with an :class:`Enum` class that fail on a typical "
"class, such as ``list(Color)`` or ``some_enum_var in Color``.  :class:"
"`EnumType` is responsible for ensuring that various other methods on the "
"final :class:`Enum` class are correct (such as :meth:`__new__`, :meth:"
"`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
msgstr ""
"Метакласс :class:`EnumType` отвечает за предоставление :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` и других методов, которые "
"позволяют делать что-то с :class:`Enum` класс, который терпит неудачу в "
"типичном классе, таком как list(Color) или some_enum_var in Color. :class:"
"`EnumType` отвечает за корректность других методов конечного класса :class:"
"`Enum` (например, :meth:`__new__`, :meth:`__getnewargs__`, :meth:`__str__` "
"и :meth:`__repr__`)."

#: ../../howto/enum.rst:1158
msgid "Flag Classes"
msgstr "Классы флагов"

#: ../../howto/enum.rst:1160
msgid ""
"Flags have an expanded view of aliasing: to be canonical, the value of a "
"flag needs to be a power-of-two value, and not a duplicate name.  So, in "
"addition to the :class:`Enum` definition of alias, a flag with no value (a.k."
"a. ``0``) or with more than one power-of-two value (e.g. ``3``) is "
"considered an alias."
msgstr ""
"Флаги имеют расширенное представление о псевдонимах: чтобы быть "
"каноническим, значение флага должно быть значением степени двойки, а не "
"повторяющимся именем. Таким образом, в дополнение к определению псевдонима "
"в :class:`Enum`, рассматривается флаг без значения (он же ``0``) или с более "
"чем одним значением степени двойки (например, ``3``). псевдоним."

#: ../../howto/enum.rst:1166
msgid "Enum Members (aka instances)"
msgstr "Члены перечисления (также известные как экземпляры)"

#: ../../howto/enum.rst:1168
msgid ""
"The most interesting thing about enum members is that they are singletons. :"
"class:`EnumType` creates them all while it is creating the enum class "
"itself, and then puts a custom :meth:`__new__` in place to ensure that no "
"new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
"Самое интересное в членах перечисления то, что они являются одиночками. :"
"class:`EnumType` создает их все во время создания самого класса "
"перечисления, а затем помещает собственный :meth:`__new__`, чтобы "
"гарантировать, что никакие новые экземпляры никогда не будут созданы, "
"возвращая только существующие экземпляры членов."

#: ../../howto/enum.rst:1174
msgid "Flag Members"
msgstr "Пометить участников"

#: ../../howto/enum.rst:1176
msgid ""
"Flag members can be iterated over just like the :class:`Flag` class, and "
"only the canonical members will be returned.  For example::"
msgstr ""
"Члены флага можно перебирать так же, как и класс :class:`Flag`, и будут "
"возвращены только канонические члены. Например::"

#: ../../howto/enum.rst:1182
msgid "(Note that ``BLACK``, ``PURPLE``, and ``WHITE`` do not show up.)"
msgstr ""
"(Обратите внимание, что ``ЧЕРНЫЙ``, ``ФИОЛЕТОВЫЙ`` и ``БЕЛЫЙ`` не "
"отображаются.)"

#: ../../howto/enum.rst:1184
msgid ""
"Inverting a flag member returns the corresponding positive value, rather "
"than a negative value --- for example::"
msgstr ""
"Инвертирование члена-флага возвращает соответствующее положительное "
"значение, а не отрицательное, например::"

#: ../../howto/enum.rst:1190
msgid ""
"Flag members have a length corresponding to the number of power-of-two "
"values they contain.  For example::"
msgstr ""
"Члены флага имеют длину, соответствующую количеству содержащихся в них "
"значений степени двойки. Например::"

#: ../../howto/enum.rst:1200
msgid "Enum Cookbook"
msgstr "Поваренная книга перечисления"

#: ../../howto/enum.rst:1203
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :class:`Flag`, and :"
"class:`IntFlag` are expected to cover the majority of use-cases, they cannot "
"cover them all.  Here are recipes for some different types of enumerations "
"that can be used directly, or as examples for creating one's own."
msgstr ""
"Хотя ожидается, что :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :"
"class:`Flag` и :class:`IntFlag` охватывают большинство случаев "
"использования, они не могут охватить торговый центр. Ниже приведены рецепты "
"некоторых различных типов перечислений, которые можно использовать напрямую "
"или в качестве примеров для создания собственных."

#: ../../howto/enum.rst:1210
msgid "Omitting values"
msgstr "Пропуск значений"

#: ../../howto/enum.rst:1212
msgid ""
"In many use-cases, one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr ""
"Во многих случаях использования неважно, каково фактическое значение "
"перечисления. Существует несколько способов определения этого типа простого "
"перечисления:"

#: ../../howto/enum.rst:1215
msgid "use instances of :class:`auto` for the value"
msgstr "используйте экземпляры :class:`auto` для значения"

#: ../../howto/enum.rst:1216
msgid "use instances of :class:`object` as the value"
msgstr "используйте экземпляры :class:`object` в качестве значения"

#: ../../howto/enum.rst:1217
msgid "use a descriptive string as the value"
msgstr "используйте описательную строку в качестве значения"

#: ../../howto/enum.rst:1218
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr ""
"используйте кортеж в качестве значения и специальный :meth:`__new__` для "
"замены кортежа значением :class:`int`"

#: ../../howto/enum.rst:1221
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr ""
"Использование любого из этих методов означает для пользователя, что эти "
"значения не важны, а также позволяет добавлять, удалять или изменять порядок "
"элементов без необходимости перенумерации остальных элементов."

#: ../../howto/enum.rst:1227
msgid "Using :class:`auto`"
msgstr "Использование :class:`auto`"

#: ../../howto/enum.rst:1229
msgid "Using :class:`auto` would look like::"
msgstr "Использование :class:`auto` выглядит следующим образом::"

#: ../../howto/enum.rst:1241
msgid "Using :class:`object`"
msgstr "Использование :class:`object`"

#: ../../howto/enum.rst:1243
msgid "Using :class:`object` would look like::"
msgstr "Использование :class:`object` выглядит следующим образом::"

#: ../../howto/enum.rst:1253
msgid ""
"This is also a good example of why you might want to write your own :meth:"
"`__repr__`::"
msgstr ""
"Это также хороший пример того, почему вам может понадобиться написать свой "
"собственный :meth:`__repr__`::"

#: ../../howto/enum.rst:1269
msgid "Using a descriptive string"
msgstr "Использование описательной строки"

#: ../../howto/enum.rst:1271
msgid "Using a string as the value would look like::"
msgstr ""
"Использование строки в качестве значения будет выглядеть следующим образом::"

#: ../../howto/enum.rst:1283
msgid "Using a custom :meth:`__new__`"
msgstr "Использование пользовательского :meth:`__new__`"

#: ../../howto/enum.rst:1285
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr ""
"Использование автоматической нумерации :meth:`__new__` будет выглядеть так::"

#: ../../howto/enum.rst:1302
msgid ""
"To make a more general purpose ``AutoNumber``, add ``*args`` to the "
"signature::"
msgstr ""
"Чтобы сделать ``AutoNumber`` более общим назначением, добавьте к подписи "
"``*args``::"

#: ../../howto/enum.rst:1312
msgid ""
"Then when you inherit from ``AutoNumber`` you can write your own "
"``__init__`` to handle any extra arguments::"
msgstr ""
"Затем, когда вы наследуете от ``AutoNumber``, вы можете написать свой "
"собственный ``__init__`` для обработки любых дополнительных аргументов::"

#: ../../howto/enum.rst:1331
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr ""
"Метод :meth:`__new__`, если он определен, используется во время создания "
"членов Enum; затем он заменяется :meth:`__new__` из Enum, который "
"используется после создания класса для поиска существующих членов."

#: ../../howto/enum.rst:1337
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly -- e.g.::"
msgstr ""
"*Не* вызывайте ``super().__new__()``, так как найден только ``__new__``, "
"предназначенный только для поиска; вместо этого используйте тип данных "
"напрямую, например::"

#: ../../howto/enum.rst:1344
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: ../../howto/enum.rst:1346
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"Упорядоченное перечисление, не основанное на :class:`IntEnum` и поэтому "
"поддерживающее обычные инварианты :class:`Enum` (например, не сравнимое с "
"другими перечислениями)::"

#: ../../howto/enum.rst:1380
msgid "DuplicateFreeEnum"
msgstr "DuplicateFreeEnum"

#: ../../howto/enum.rst:1382
msgid ""
"Raises an error if a duplicate member value is found instead of creating an "
"alias::"
msgstr ""
"Упорядоченное перечисление, не основанное на :class:`IntEnum` и поэтому "
"поддерживающее обычные инварианты :class:`Enum` (например, не сравнимое с "
"другими перечислениями)::"

#: ../../howto/enum.rst:1407
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"Это полезный пример создания подкласса Enum для добавления или изменения "
"другого поведения, а также запрета псевдонимов. Если единственным желаемым "
"изменением является запрет псевдонимов, вместо этого можно использовать "
"декоратор :func:`unique`."

#: ../../howto/enum.rst:1413
msgid "Planet"
msgstr "Планета"

#: ../../howto/enum.rst:1415
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined, the value of the enum "
"member will be passed to those methods::"
msgstr ""
"Если :meth:`__new__` или :meth:`__init__` определен, значение члена "
"перечисления будет передано этим методам:"

#: ../../howto/enum.rst:1444
msgid "TimePeriod"
msgstr "TimePeriod"

#: ../../howto/enum.rst:1446
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "Пример использования атрибута :attr:`_ignore_`::"

#: ../../howto/enum.rst:1465
msgid "Subclassing EnumType"
msgstr "Создание подкласса EnumType"

#: ../../howto/enum.rst:1467
msgid ""
"While most enum needs can be met by customizing :class:`Enum` subclasses, "
"either with class decorators or custom functions, :class:`EnumType` can be "
"subclassed to provide a different Enum experience."
msgstr ""
"Хотя большинство потребностей перечислений можно удовлетворить путем "
"настройки подклассов :class:`Enum` либо с помощью декораторов классов, либо "
"с помощью пользовательских функций, :class:`EnumType` может быть подклассом, "
"чтобы обеспечить другое взаимодействие с Enum."
