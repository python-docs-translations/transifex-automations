# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2024-02-23 16:46+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../howto/gdb_helpers.rst:5
msgid "Debugging C API extensions and CPython Internals with GDB"
msgstr ""
"Отладка расширений C API и внутренних компонентов CPython с помощью GDB"

#: ../../howto/gdb_helpers.rst:9
msgid ""
"This document explains how the Python GDB extension, ``python-gdb.py``, can "
"be used with the GDB debugger to debug CPython extensions and the CPython "
"interpreter itself."
msgstr ""
"В этом документе объясняется, как расширение Python GDB, ``python-gdb.py``, "
"можно использовать с отладчиком GDB для отладки расширений CPython и самого "
"интерпретатора CPython."

#: ../../howto/gdb_helpers.rst:13
msgid ""
"When debugging low-level problems such as crashes or deadlocks, a low-level "
"debugger, such as GDB, is useful to diagnose and correct the issue. By "
"default, GDB (or any of its front-ends) doesn't support high-level "
"information specific to the CPython interpreter."
msgstr ""
"При отладке проблем низкого уровня, таких как сбои или взаимоблокировки, для "
"диагностики и устранения проблемы полезен отладчик низкого уровня, например "
"GDB. По умолчанию GDB (или любой из его интерфейсов) не поддерживает "
"информацию высокого уровня, специфичную для интерпретатора CPython."

#: ../../howto/gdb_helpers.rst:18
msgid ""
"The ``python-gdb.py`` extension adds CPython interpreter information to GDB. "
"The extension helps introspect the stack of currently executing Python "
"functions. Given a Python object represented by a :c:expr:`PyObject *` "
"pointer, the extension surfaces the type and value of the object."
msgstr ""
"Расширение ``python-gdb.py`` добавляет информацию об интерпретаторе CPython "
"в GDB. Расширение помогает проанализировать стек выполняемых в данный момент "
"функций Python. Учитывая объект Python, представленный указателем :c:expr:"
"`PyObject *`, расширение отображает тип и значение объекта."

#: ../../howto/gdb_helpers.rst:23
msgid ""
"Developers who are working on CPython extensions or tinkering with parts of "
"CPython that are written in C can use this document to learn how to use the "
"``python-gdb.py`` extension with GDB."
msgstr ""
"Разработчики, работающие над расширениями CPython или работающие с частями "
"CPython, написанными на C, могут использовать этот документ, чтобы узнать, "
"как использовать расширение ``python-gdb.py`` с GDB."

#: ../../howto/gdb_helpers.rst:29
msgid ""
"This document assumes that you are familiar with the basics of GDB and the "
"CPython C API. It consolidates guidance from the `devguide <https://devguide."
"python.org>`_  and the `Python wiki <https://wiki.python.org/moin/"
"DebuggingWithGdb>`_."
msgstr ""
"В этом документе предполагается, что вы знакомы с основами GDB и API CPython "
"C. Он объединяет рекомендации из `devguide <https://devguide.python.org>`_ и "
"`Python wiki <https://wiki.python.org/moin/DebuggingWithGdb>`_."

#: ../../howto/gdb_helpers.rst:36
msgid "Prerequisites"
msgstr "Предварительные условия"

#: ../../howto/gdb_helpers.rst:38
msgid "You need to have:"
msgstr "Вам необходимо иметь:"

#: ../../howto/gdb_helpers.rst:40
msgid ""
"GDB 7 or later. (For earlier versions of GDB, see ``Misc/gdbinit`` in the "
"CPython sources. Note that this file will be removed in Python 3.12.)"
msgstr ""

#: ../../howto/gdb_helpers.rst:42
msgid ""
"GDB-compatible debugging information for Python and any extension you are "
"debugging."
msgstr ""
"Информация об отладке, совместимая с GDB, для Python и любого расширения, "
"которое вы отлаживаете."

#: ../../howto/gdb_helpers.rst:44
msgid "The ``python-gdb.py`` extension."
msgstr "Расширение ``python-gdb.py``."

#: ../../howto/gdb_helpers.rst:46
msgid ""
"The extension is built with Python, but might be distributed separately or "
"not at all. Below, we include tips for a few common systems as examples. "
"Note that even if the instructions match your system, they might be outdated."
msgstr ""
"Расширение создано на Python, но может распространяться отдельно или не "
"распространяться вообще. Ниже в качестве примеров мы приводим советы для "
"нескольких распространенных систем. Обратите внимание: даже если инструкции "
"соответствуют вашей системе, они могут быть устаревшими."

#: ../../howto/gdb_helpers.rst:52
msgid "Setup with Python built from source"
msgstr "Настройка с использованием Python, собранного из исходного кода"

#: ../../howto/gdb_helpers.rst:54
msgid ""
"When you build CPython from source, debugging information should be "
"available, and the build should add a ``python-gdb.py`` file to the root "
"directory of your repository."
msgstr ""
"Когда вы собираете CPython из исходного кода, должна быть доступна "
"отладочная информация, а при сборке должен быть добавлен файл ``python-gdb."
"py`` в корневой каталог вашего репозитория."

#: ../../howto/gdb_helpers.rst:58
msgid ""
"To activate support, you must add the directory containing ``python-gdb.py`` "
"to GDB's \"auto-load-safe-path\". If you haven't done this, recent versions "
"of GDB will print out a warning with instructions on how to do this."
msgstr ""
"Чтобы активировать поддержку, вы должны добавить каталог, содержащий "
"``python-gdb.py``, в \"auto-load-safe-path\" GDB. Если вы этого не сделали, "
"последние версии GDB выведут предупреждение с инструкциями о том, как это "
"сделать."

#: ../../howto/gdb_helpers.rst:65
msgid ""
"If you do not see instructions for your version of GDB, put this in your "
"configuration file (``~/.gdbinit`` or ``~/.config/gdb/gdbinit``)::"
msgstr ""
"Если вы не видите инструкций для вашей версии GDB, поместите их в свой файл "
"конфигурации (``~/.gdbinit`` или ``~/.config/gdb/gdbinit``)::"

#: ../../howto/gdb_helpers.rst:70
msgid "You can also add multiple paths, separated by ``:``."
msgstr "Вы также можете добавить несколько путей, разделенных ``:``."

#: ../../howto/gdb_helpers.rst:74
msgid "Setup for Python from a Linux distro"
msgstr "Настройка Python из дистрибутива Linux"

#: ../../howto/gdb_helpers.rst:76
msgid ""
"Most Linux systems provide debug information for the system Python in a "
"package called ``python-debuginfo``, ``python-dbg`` or similar. For example:"
msgstr ""
"Большинство систем Linux предоставляют отладочную информацию для системного "
"Python в пакете под названием ``python-debuginfo``, ``python-dbg`` или "
"аналогичный. Например:"

#: ../../howto/gdb_helpers.rst:80
msgid "Fedora:"
msgstr "Fedora:"

#: ../../howto/gdb_helpers.rst:87
msgid "Ubuntu:"
msgstr "Ubuntu:"

#: ../../howto/gdb_helpers.rst:93
msgid ""
"On several recent Linux systems, GDB can download debugging symbols "
"automatically using *debuginfod*. However, this will not install the "
"``python-gdb.py`` extension; you generally do need to install the debug info "
"package separately."
msgstr ""
"В некоторых последних системах Linux GDB может автоматически загружать "
"символы отладки, используя *debuginfod*. Однако при этом расширение ``python-"
"gdb.py`` не будет установлено; Обычно вам необходимо установить пакет "
"отладочной информации отдельно."

#: ../../howto/gdb_helpers.rst:100
msgid "Using the Debug build and Development mode"
msgstr "Использование режима сборки и разработки отладки"

#: ../../howto/gdb_helpers.rst:102
msgid "For easier debugging, you might want to:"
msgstr "Для упрощения отладки вы можете:"

#: ../../howto/gdb_helpers.rst:104
msgid ""
"Use a :ref:`debug build <debug-build>` of Python. (When building from "
"source, use ``configure --with-pydebug``. On Linux distros, install and run "
"a package like ``python-debug`` or ``python-dbg``, if available.)"
msgstr ""
"Используйте :ref:`отладочную сборку <debug-build>` Python. (При сборке из "
"исходного кода используйте ``configure --with-pydebug``. В дистрибутивах "
"Linux установите и запустите пакет типа ``python-debug`` или ``python-dbg``, "
"если он доступен.)"

#: ../../howto/gdb_helpers.rst:107
msgid "Use the runtime :ref:`development mode <devmode>` (``-X dev``)."
msgstr ""
"Используйте среду выполнения :ref:`режим разработки <devmode>` (``-X dev``)."

#: ../../howto/gdb_helpers.rst:109
msgid ""
"Both enable extra assertions and disable some optimizations. Sometimes this "
"hides the bug you are trying to find, but in most cases they make the "
"process easier."
msgstr ""
"Оба включают дополнительные утверждения и отключают некоторые оптимизации. "
"Иногда это скрывает ошибку, которую вы пытаетесь найти, но в большинстве "
"случаев упрощает процесс."

#: ../../howto/gdb_helpers.rst:115
msgid "Using the ``python-gdb`` extension"
msgstr "Использование расширения ``python-gdb``"

#: ../../howto/gdb_helpers.rst:117
msgid ""
"When the extension is loaded, it provides two main features: pretty printers "
"for Python values, and additional commands."
msgstr ""
"Когда расширение загружено, оно предоставляет две основные функции: красивые "
"принтеры для значений Python и дополнительные команды."

#: ../../howto/gdb_helpers.rst:121
msgid "Pretty-printers"
msgstr "Pretty-принтеры"

#: ../../howto/gdb_helpers.rst:123
msgid ""
"This is what a GDB backtrace looks like (truncated) when this extension is "
"enabled::"
msgstr ""
"Вот как выглядит обратная трассировка GDB (усеченная), когда это расширение "
"включено:"

#: ../../howto/gdb_helpers.rst:142
msgid ""
"Notice how the dictionary argument to ``PyDict_GetItemString`` is displayed "
"as its ``repr()``, rather than an opaque ``PyObject *`` pointer."
msgstr ""
"Обратите внимание, что аргумент-словарь для PyDict_GetItemString "
"отображается как repr(), а не как непрозрачный указатель PyObject *."

#: ../../howto/gdb_helpers.rst:145
msgid ""
"The extension works by supplying a custom printing routine for values of "
"type ``PyObject *``.  If you need to access lower-level details of an "
"object, then cast the value to a pointer of the appropriate type.  For "
"example::"
msgstr ""
"Расширение работает, предоставляя специальную процедуру печати для значений "
"типа ``PyObject *``. Если вам нужно получить доступ к сведениям об объекте "
"более низкого уровня, приведите значение к указателю соответствующего типа. "
"Например::"

#: ../../howto/gdb_helpers.rst:168
msgid ""
"Note that the pretty-printers do not actually call ``repr()``. For basic "
"types, they try to match its result closely."
msgstr ""
"Обратите внимание, что симпатичные принтеры на самом деле не вызывают "
"``repr()``. Для базовых типов стараются максимально приблизить результат."

#: ../../howto/gdb_helpers.rst:171
msgid ""
"An area that can be confusing is that the custom printer for some types look "
"a lot like GDB's built-in printer for standard types.  For example, the "
"pretty-printer for a Python ``int`` (:c:expr:`PyLongObject *`) gives a "
"representation that is not distinguishable from one of a regular machine-"
"level integer::"
msgstr ""
"Область, которая может сбить с толку, заключается в том, что специальный "
"принтер для некоторых типов очень похож на встроенный принтер GDB для "
"стандартных типов. Например, симпатичный принтер для Python ``int`` (:c:expr:"
"`PyLongObject *`) дает представление, которое неотличимо от одного из "
"обычных целых чисел машинного уровня::"

#: ../../howto/gdb_helpers.rst:183
msgid ""
"The internal structure can be revealed with a cast to :c:expr:`PyLongObject "
"*`:"
msgstr ""
"Внутреннюю структуру можно раскрыть с помощью приведения к :c:expr:"
"`PyLongObject *`:"

#: ../../howto/gdb_helpers.rst:185
msgid ""
"(gdb) p *(PyLongObject*)some_python_integer $5 = {ob_base = {ob_base = "
"{ob_refcnt = 8, ob_type = 0x3dad39f5e0}, ob_size = 1}, ob_digit = {42}}"
msgstr ""
"(gdb) p *(PyLongObject*)some_python_integer $5 = {ob_base = {ob_base = "
"{ob_refcnt = 8, ob_type = 0x3dad39f5e0}, ob_size = 1}, ob_digit = {42}}"

#: ../../howto/gdb_helpers.rst:189
msgid ""
"A similar confusion can arise with the ``str`` type, where the output looks "
"a lot like gdb's built-in printer for ``char *``::"
msgstr ""
"Аналогичная путаница может возникнуть и с типом ``str``, вывод которого "
"очень похож на встроенный принтер GDB для ``char *``::"

#: ../../howto/gdb_helpers.rst:195
msgid ""
"The pretty-printer for ``str`` instances defaults to using single-quotes (as "
"does Python's ``repr`` for strings) whereas the standard printer for ``char "
"*`` values uses double-quotes and contains a hexadecimal address::"
msgstr ""
"Симпатичный принтер для экземпляров ``str`` по умолчанию использует "
"одинарные кавычки (как и ``repr`` Python для строк), тогда как стандартный "
"принтер для значений ``char *`` использует двойные кавычки и содержит "
"шестнадцатеричный адрес. ::"

#: ../../howto/gdb_helpers.rst:202
msgid ""
"Again, the implementation details can be revealed with a cast to :c:expr:"
"`PyUnicodeObject *`::"
msgstr ""
"Опять же, детали реализации можно раскрыть с помощью приведения к :c:expr:"
"`PyUnicodeObject *`::"

#: ../../howto/gdb_helpers.rst:210
msgid "``py-list``"
msgstr "``py-list``"

#: ../../howto/gdb_helpers.rst:212
msgid ""
"The extension adds a ``py-list`` command, which lists the Python source code "
"(if any) for the current frame in the selected thread.  The current line is "
"marked with a \">\"::"
msgstr ""
"Расширение добавляет команду ``py-list``, которая перечисляет исходный код "
"Python (если есть) для текущего кадра в выбранном потоке. Текущая строка "
"отмечена знаком «>»::"

#: ../../howto/gdb_helpers.rst:229
msgid ""
"Use ``py-list START`` to list at a different line number within the Python "
"source, and ``py-list START,END`` to list a specific range of lines within "
"the Python source."
msgstr ""
"Используйте ``py-list START`` для вывода списка строк с другим номером в "
"исходном коде Python и ``py-list START,END`` для вывода списка определенного "
"диапазона строк в исходном коде Python."

#: ../../howto/gdb_helpers.rst:234
msgid "``py-up`` and ``py-down``"
msgstr "``py-up`` и ``py-down``"

#: ../../howto/gdb_helpers.rst:236
msgid ""
"The ``py-up`` and ``py-down`` commands are analogous to GDB's regular ``up`` "
"and ``down`` commands, but try to move at the level of CPython frames, "
"rather than C frames."
msgstr ""
"Команды ``py-up`` и ``py-down`` аналогичны обычным командам GDB ``up`` и "
"``down``, но пытаются двигаться на уровне фреймов CPython, а не на уровне C-"
"фреймов. ."

#: ../../howto/gdb_helpers.rst:240
msgid ""
"GDB is not always able to read the relevant frame information, depending on "
"the optimization level with which CPython was compiled. Internally, the "
"commands look for C frames that are executing the default frame evaluation "
"function (that is, the core bytecode interpreter loop within CPython) and "
"look up the value of the related ``PyFrameObject *``."
msgstr ""
"GDB не всегда может прочитать соответствующую информацию о кадре, в "
"зависимости от уровня оптимизации, с которым был скомпилирован CPython. "
"Внутри команды ищут кадры C, которые выполняют функцию оценки кадра по "
"умолчанию (то есть основной цикл интерпретатора байт-кода в CPython), и ищут "
"значение соответствующего ``PyFrameObject *``."

#: ../../howto/gdb_helpers.rst:246
msgid "They emit the frame number (at the C level) within the thread."
msgstr "Они выдают номер кадра (на уровне C) внутри потока."

#: ../../howto/gdb_helpers.rst:248 ../../howto/gdb_helpers.rst:298
msgid "For example::"
msgstr "Например::"

#: ../../howto/gdb_helpers.rst:261
msgid "so we're at the top of the Python stack."
msgstr "Итак, мы находимся на вершине стека Python."

#: ../../howto/gdb_helpers.rst:263
msgid ""
"The frame numbers correspond to those displayed by GDB's standard "
"``backtrace`` command. The command skips C frames which are not executing "
"Python code."
msgstr ""
"Номера кадров соответствуют номерам, отображаемым стандартной командой GDB "
"``backtrace``. Команда пропускает кадры C, которые не выполняют код Python."

#: ../../howto/gdb_helpers.rst:267
msgid "Going back down::"
msgstr "Возвращаемся вниз::"

#: ../../howto/gdb_helpers.rst:289
msgid "and we're at the bottom of the Python stack."
msgstr "и мы находимся в самом низу стека Python."

#: ../../howto/gdb_helpers.rst:293
msgid "``py-bt``"
msgstr "``py-bt``"

#: ../../howto/gdb_helpers.rst:295
msgid ""
"The ``py-bt`` command attempts to display a Python-level backtrace of the "
"current thread."
msgstr ""
"Команда ``py-bt`` пытается отобразить обратную трассировку текущего потока "
"на уровне Python."

#: ../../howto/gdb_helpers.rst:314
msgid ""
"The frame numbers correspond to those displayed by GDB's standard "
"``backtrace`` command."
msgstr ""
"Номера кадров соответствуют номерам, отображаемым стандартной командой GDB "
"``backtrace``."

#: ../../howto/gdb_helpers.rst:318
msgid "``py-print``"
msgstr "``py-print``"

#: ../../howto/gdb_helpers.rst:320
msgid ""
"The ``py-print`` command looks up a Python name and tries to print it. It "
"looks in locals within the current thread, then globals, then finally "
"builtins::"
msgstr ""
"Команда ``py-print`` ищет имя Python и пытается его распечатать. Он "
"просматривает локальные значения внутри текущего потока, затем глобальные и, "
"наконец, встроенные::"

#: ../../howto/gdb_helpers.rst:335
msgid "``py-locals``"
msgstr "``py-locals``"

#: ../../howto/gdb_helpers.rst:337
msgid ""
"The ``py-locals`` command looks up all Python locals within the current "
"Python frame in the selected thread, and prints their representations::"
msgstr ""
"Команда ``py-locals`` ищет все локальные файлы Python в текущем фрейме "
"Python в выбранном потоке и печатает их представления:"

#: ../../howto/gdb_helpers.rst:347
msgid "Use with GDB commands"
msgstr "Использование с командами GDB"

#: ../../howto/gdb_helpers.rst:349
msgid ""
"The extension commands complement GDB's built-in commands. For example, you "
"can use a frame numbers shown by ``py-bt`` with the ``frame`` command to go "
"a specific frame within the selected thread, like this::"
msgstr ""
"Команды расширения дополняют встроенные команды GDB. Например, вы можете "
"использовать номера кадров, показанные с помощью ``py-bt``, с командой "
"``frame`` для перехода к определенному кадру в выбранном потоке, например:"

#: ../../howto/gdb_helpers.rst:368
msgid ""
"The ``info threads`` command will give you a list of the threads within the "
"process, and you can use the ``thread`` command to select a different one::"
msgstr ""
"Команда ``info threads`` предоставит вам список потоков внутри процесса, и "
"вы можете использовать команду ``thread``, чтобы выбрать другой:"

#: ../../howto/gdb_helpers.rst:376
msgid ""
"You can use ``thread apply all COMMAND`` or (``t a a COMMAND`` for short) to "
"run a command on all threads.  With ``py-bt``, this lets you see what every "
"thread is doing at the Python level::"
msgstr ""
"Вы можете использовать ``thread apply all COMMAND`` или (для краткости ``taa "
"COMMAND``), чтобы запустить команду во всех потоках. С помощью ``py-bt`` вы "
"можете увидеть, что делает каждый поток на уровне Python:"
