# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 16:02+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../howto/curses.rst:5
msgid "Curses Programming with Python"
msgstr "Программирование Curses на Python"

#: ../../howto/curses.rst:0
msgid "Author"
msgstr "Автор"

#: ../../howto/curses.rst:7
msgid "A.M. Kuchling, Eric S. Raymond"
msgstr "А. М. Кучлинг, Эрик С. Рэймонд"

#: ../../howto/curses.rst:0
msgid "Release"
msgstr "Релиз"

#: ../../howto/curses.rst:8
msgid "2.04"
msgstr "2.04"

#: ../../howto/curses.rstNone
msgid "Abstract"
msgstr "Абстракция"

#: ../../howto/curses.rst:13
msgid ""
"This document describes how to use the :mod:`curses` extension module to "
"control text-mode displays."
msgstr ""
"В этом документе описывается, как использовать модуль расширения :mod:"
"`curses` для управления отображением в текстовом режиме."

#: ../../howto/curses.rst:18
msgid "What is curses?"
msgstr "Что такое curses?"

#: ../../howto/curses.rst:20
msgid ""
"The curses library supplies a terminal-independent screen-painting and "
"keyboard-handling facility for text-based terminals; such terminals include "
"VT100s, the Linux console, and the simulated terminal provided by various "
"programs.  Display terminals support various control codes to perform common "
"operations such as moving the cursor, scrolling the screen, and erasing "
"areas.  Different terminals use widely differing codes, and often have their "
"own minor quirks."
msgstr ""
"Библиотека проклятий предоставляет независимое от терминала средство "
"рисования экрана и работы с клавиатурой для текстовых терминалов; такие "
"терминалы включают VT100, консоль Linux и имитируемый терминал, "
"предоставляемый различными программами. Терминалы дисплея поддерживают "
"различные коды управления для выполнения общих операций, таких как "
"перемещение курсора, прокрутка экрана и стирание областей. Разные терминалы "
"используют совершенно разные коды и часто имеют свои небольшие особенности."

#: ../../howto/curses.rst:28
msgid ""
"In a world of graphical displays, one might ask \"why bother\"?  It's true "
"that character-cell display terminals are an obsolete technology, but there "
"are niches in which being able to do fancy things with them are still "
"valuable.  One niche is on small-footprint or embedded Unixes that don't run "
"an X server.  Another is tools such as OS installers and kernel "
"configurators that may have to run before any graphical support is available."
msgstr ""
"В мире графических дисплеев можно спросить: «Зачем беспокоиться»? Это "
"правда, что терминалы с символьными ячейками являются устаревшей "
"технологией, но существуют ниши, в которых возможность делать с их помощью "
"необычные вещи все еще ценна. Одна ниша — это малогабаритные или встроенные "
"Unix-системы, не использующие X-сервер. Другой вариант — такие инструменты, "
"как установщики ОС и конфигураторы ядра, которые, возможно, придется "
"запустить, прежде чем станет доступна какая-либо графическая поддержка."

#: ../../howto/curses.rst:36
msgid ""
"The curses library provides fairly basic functionality, providing the "
"programmer with an abstraction of a display containing multiple non-"
"overlapping windows of text.  The contents of a window can be changed in "
"various ways---adding text, erasing it, changing its appearance---and the "
"curses library will figure out what control codes need to be sent to the "
"terminal to produce the right output.  curses doesn't provide many user-"
"interface concepts such as buttons, checkboxes, or dialogs; if you need such "
"features, consider a user interface library such as `Urwid <https://pypi.org/"
"project/urwid/>`_."
msgstr ""

#: ../../howto/curses.rst:46
msgid ""
"The curses library was originally written for BSD Unix; the later System V "
"versions of Unix from AT&T added many enhancements and new functions. BSD "
"curses is no longer maintained, having been replaced by ncurses, which is an "
"open-source implementation of the AT&T interface.  If you're using an open-"
"source Unix such as Linux or FreeBSD, your system almost certainly uses "
"ncurses.  Since most current commercial Unix versions are based on System V "
"code, all the functions described here will probably be available.  The "
"older versions of curses carried by some proprietary Unixes may not support "
"everything, though."
msgstr ""
"Библиотека проклятий изначально была написана для BSD Unix; в более поздние "
"версии Unix System V от AT&T было добавлено множество улучшений и новых "
"функций. Проклятия BSD больше не поддерживаются, их заменили ncurses, "
"который представляет собой реализацию интерфейса AT&T с открытым исходным "
"кодом. Если вы используете Unix с открытым исходным кодом, например Linux "
"или FreeBSD, ваша система почти наверняка использует ncurses. Поскольку "
"большинство современных коммерческих версий Unix основаны на коде System V, "
"все описанные здесь функции, вероятно, будут доступны. Однако старые версии "
"проклятий, содержащиеся в некоторых проприетарных Unix-системах, могут "
"поддерживать не все."

#: ../../howto/curses.rst:56
msgid ""
"The Windows version of Python doesn't include the :mod:`curses` module.  A "
"ported version called `UniCurses <https://pypi.org/project/UniCurses>`_ is "
"available."
msgstr ""

#: ../../howto/curses.rst:62
msgid "The Python curses module"
msgstr "Модуль curses Python"

#: ../../howto/curses.rst:64
msgid ""
"The Python module is a fairly simple wrapper over the C functions provided "
"by curses; if you're already familiar with curses programming in C, it's "
"really easy to transfer that knowledge to Python.  The biggest difference is "
"that the Python interface makes things simpler by merging different C "
"functions such as :c:func:`addstr`, :c:func:`mvaddstr`, and :c:func:"
"`mvwaddstr` into a single :meth:`~curses.window.addstr` method.  You'll see "
"this covered in more detail later."
msgstr ""

#: ../../howto/curses.rst:72
msgid ""
"This HOWTO is an introduction to writing text-mode programs with curses and "
"Python. It doesn't attempt to be a complete guide to the curses API; for "
"that, see the Python library guide's section on ncurses, and the C manual "
"pages for ncurses.  It will, however, give you the basic ideas."
msgstr ""
"Этот HOWTO представляет собой введение в написание программ текстового "
"режима с использованием curses и Python. Он не является полным руководством "
"по API curses; для этого см. раздел руководства по библиотеке Python, "
"посвященный ncurses, и страницы руководства C по ncurses. Однако это даст "
"вам основные идеи."

#: ../../howto/curses.rst:79
msgid "Starting and ending a curses application"
msgstr "Запуск и завершение приложения curses"

#: ../../howto/curses.rst:81
msgid ""
"Before doing anything, curses must be initialized.  This is done by calling "
"the :func:`~curses.initscr` function, which will determine the terminal "
"type, send any required setup codes to the terminal, and create various "
"internal data structures.  If successful, :func:`initscr` returns a window "
"object representing the entire screen; this is usually called ``stdscr`` "
"after the name of the corresponding C variable. ::"
msgstr ""

#: ../../howto/curses.rst:92
msgid ""
"Usually curses applications turn off automatic echoing of keys to the "
"screen, in order to be able to read keys and only display them under certain "
"circumstances.  This requires calling the :func:`~curses.noecho` function. ::"
msgstr ""
"Обычно приложения curses отключают автоматическое отображение клавиш на "
"экране, чтобы иметь возможность считывать клавиши и отображать их только при "
"определенных обстоятельствах. Для этого необходимо вызвать функцию :func:"
"`~curses.noecho`. ::"

#: ../../howto/curses.rst:99
msgid ""
"Applications will also commonly need to react to keys instantly, without "
"requiring the Enter key to be pressed; this is called cbreak mode, as "
"opposed to the usual buffered input mode. ::"
msgstr ""
"Приложениям также обычно необходимо мгновенно реагировать на клавиши, не "
"требуя нажатия клавиши Enter; это называется режимом cbreak, в отличие от "
"обычного режима буферизованного ввода. ::"

#: ../../howto/curses.rst:105
msgid ""
"Terminals usually return special keys, such as the cursor keys or navigation "
"keys such as Page Up and Home, as a multibyte escape sequence.  While you "
"could write your application to expect such sequences and process them "
"accordingly, curses can do it for you, returning a special value such as :"
"const:`curses.KEY_LEFT`.  To get curses to do the job, you'll have to enable "
"keypad mode. ::"
msgstr ""
"Терминалы обычно возвращают специальные клавиши, такие как клавиши курсора "
"или клавиши навигации, такие как Page Up и Home, в виде многобайтовой escape-"
"последовательности. Хотя вы можете написать свое приложение так, чтобы оно "
"ожидало такие последовательности и соответствующим образом их обрабатывало, "
"Curses могут сделать это за вас, возвращая специальное значение, такое как :"
"const:`curses.KEY_LEFT`. Чтобы проклятия выполняли свою работу, вам придется "
"включить режим клавиатуры. ::"

#: ../../howto/curses.rst:114
msgid ""
"Terminating a curses application is much easier than starting one. You'll "
"need to call::"
msgstr ""
"Завершить работу приложения curses гораздо проще, чем запустить его. Вам "
"нужно будет позвонить::"

#: ../../howto/curses.rst:121
msgid ""
"to reverse the curses-friendly terminal settings. Then call the :func:"
"`~curses.endwin` function to restore the terminal to its original operating "
"mode. ::"
msgstr ""
"чтобы отменить настройки терминала, дружественные к curses. Затем вызовите "
"функцию :func:`~curses.endwin`, чтобы вернуть терминал в исходный рабочий "
"режим. ::"

#: ../../howto/curses.rst:127
msgid ""
"A common problem when debugging a curses application is to get your terminal "
"messed up when the application dies without restoring the terminal to its "
"previous state.  In Python this commonly happens when your code is buggy and "
"raises an uncaught exception.  Keys are no longer echoed to the screen when "
"you type them, for example, which makes using the shell difficult."
msgstr ""
"Распространенной проблемой при отладке приложения Curses является выход из "
"строя вашего терминала, когда приложение умирает, без восстановления "
"терминала в предыдущее состояние. В Python это обычно происходит, когда ваш "
"код содержит ошибки и вызывает неперехваченное исключение. Например, клавиши "
"больше не отображаются на экране при их вводе, что затрудняет использование "
"оболочки."

#: ../../howto/curses.rst:133
msgid ""
"In Python you can avoid these complications and make debugging much easier "
"by importing the :func:`curses.wrapper` function and using it like this::"
msgstr ""
"В Python вы можете избежать этих сложностей и значительно упростить отладку, "
"импортировав функцию :func:`curses.wrapper` и используя ее следующим образом:"

#: ../../howto/curses.rst:152
msgid ""
"The :func:`~curses.wrapper` function takes a callable object and does the "
"initializations described above, also initializing colors if color support "
"is present.  :func:`wrapper` then runs your provided callable. Once the "
"callable returns, :func:`wrapper` will restore the original state of the "
"terminal.  The callable is called inside a :keyword:`try`...\\ :keyword:"
"`except` that catches exceptions, restores the state of the terminal, and "
"then re-raises the exception.  Therefore your terminal won't be left in a "
"funny state on exception and you'll be able to read the exception's message "
"and traceback."
msgstr ""

#: ../../howto/curses.rst:164
msgid "Windows and Pads"
msgstr "Окна и колодки"

#: ../../howto/curses.rst:166
msgid ""
"Windows are the basic abstraction in curses.  A window object represents a "
"rectangular area of the screen, and supports methods to display text, erase "
"it, allow the user to input strings, and so forth."
msgstr ""
"Окна — это основная абстракция в проклятиях. Объект окна представляет собой "
"прямоугольную область экрана и поддерживает методы отображения текста, его "
"стирания, разрешения пользователю вводить строки и т. д."

#: ../../howto/curses.rst:170
msgid ""
"The ``stdscr`` object returned by the :func:`~curses.initscr` function is a "
"window object that covers the entire screen.  Many programs may need only "
"this single window, but you might wish to divide the screen into smaller "
"windows, in order to redraw or clear them separately. The :func:`~curses."
"newwin` function creates a new window of a given size, returning the new "
"window object. ::"
msgstr ""
"Объект ``stdscr``, возвращаемый функцией :func:`~curses.initscr`, "
"представляет собой объект окна, который охватывает весь экран. Многим "
"программам может потребоваться только это единственное окно, но вы можете "
"разделить экран на меньшие окна, чтобы перерисовывать или очищать их "
"отдельно. Функция :func:`~curses.newwin` создает новое окно заданного "
"размера, возвращая новый объект окна. ::"

#: ../../howto/curses.rst:181
msgid ""
"Note that the coordinate system used in curses is unusual. Coordinates are "
"always passed in the order *y,x*, and the top-left corner of a window is "
"coordinate (0,0).  This breaks the normal convention for handling "
"coordinates where the *x* coordinate comes first.  This is an unfortunate "
"difference from most other computer applications, but it's been part of "
"curses since it was first written, and it's too late to change things now."
msgstr ""
"Обратите внимание, что система координат, используемая в curses, необычна. "
"Координаты всегда передаются в порядке *y,x*, а верхний левый угол окна "
"имеет координату (0,0). Это нарушает обычное соглашение об обработке "
"координат, где координата *x* идет первой. Это досадное отличие от "
"большинства других компьютерных приложений, но оно было частью проклятий с "
"момента его первого написания, и сейчас уже слишком поздно что-то менять."

#: ../../howto/curses.rst:189
msgid ""
"Your application can determine the size of the screen by using the :data:"
"`curses.LINES` and :data:`curses.COLS` variables to obtain the *y* and *x* "
"sizes.  Legal coordinates will then extend from ``(0,0)`` to ``(curses.LINES "
"- 1, curses.COLS - 1)``."
msgstr ""
"Ваше приложение может определить размер экрана, используя переменные :data:"
"`curses.LINES` и :data:`curses.COLS` для получения размеров *y* и *x*. Тогда "
"допустимые координаты будут простираться от ``(0,0)`` до ``(curses.LINES - "
"1, Curses.COLS - 1)``."

#: ../../howto/curses.rst:194
msgid ""
"When you call a method to display or erase text, the effect doesn't "
"immediately show up on the display.  Instead you must call the :meth:"
"`~curses.window.refresh` method of window objects to update the screen."
msgstr ""
"Когда вы вызываете метод для отображения или удаления текста, эффект не "
"сразу отображается на дисплее. Вместо этого вы должны вызвать метод объектов "
"окна :meth:`~curses.window.refresh` для обновления экрана."

#: ../../howto/curses.rst:199
msgid ""
"This is because curses was originally written with slow 300-baud terminal "
"connections in mind; with these terminals, minimizing the time required to "
"redraw the screen was very important.  Instead curses accumulates changes to "
"the screen and displays them in the most efficient manner when you call :"
"meth:`refresh`.  For example, if your program displays some text in a window "
"and then clears the window, there's no need to send the original text "
"because they're never visible."
msgstr ""

#: ../../howto/curses.rst:208
msgid ""
"In practice, explicitly telling curses to redraw a window doesn't really "
"complicate programming with curses much. Most programs go into a flurry of "
"activity, and then pause waiting for a keypress or some other action on the "
"part of the user.  All you have to do is to be sure that the screen has been "
"redrawn before pausing to wait for user input, by first calling ``stdscr."
"refresh()`` or the :meth:`refresh` method of some other relevant window."
msgstr ""

#: ../../howto/curses.rst:216
msgid ""
"A pad is a special case of a window; it can be larger than the actual "
"display screen, and only a portion of the pad displayed at a time. Creating "
"a pad requires the pad's height and width, while refreshing a pad requires "
"giving the coordinates of the on-screen area where a subsection of the pad "
"will be displayed.  ::"
msgstr ""
"pad — это частный случай окна; он может быть больше фактического экрана "
"дисплея, и одновременно может отображаться только часть пэда. Для создания "
"контактной площадки требуются ее высота и ширина, а для обновления "
"контактной площадки необходимо указать координаты области экрана, где будет "
"отображаться часть контактной площадки. ::"

#: ../../howto/curses.rst:237
msgid ""
"The :meth:`refresh` call displays a section of the pad in the rectangle "
"extending from coordinate (5,5) to coordinate (20,75) on the screen; the "
"upper left corner of the displayed section is coordinate (0,0) on the pad.  "
"Beyond that difference, pads are exactly like ordinary windows and support "
"the same methods."
msgstr ""

#: ../../howto/curses.rst:243
msgid ""
"If you have multiple windows and pads on screen there is a more efficient "
"way to update the screen and prevent annoying screen flicker as each part of "
"the screen gets updated.  :meth:`refresh` actually does two things:"
msgstr ""

#: ../../howto/curses.rst:248
msgid ""
"Calls the :meth:`~curses.window.noutrefresh` method of each window to update "
"an underlying data structure representing the desired state of the screen."
msgstr ""
"Вызывает метод :meth:`~curses.window.noutrefresh` каждого окна для "
"обновления базовой структуры данных, представляющей желаемое состояние "
"экрана."

#: ../../howto/curses.rst:251
msgid ""
"Calls the function :func:`~curses.doupdate` function to change the physical "
"screen to match the desired state recorded in the data structure."
msgstr ""
"Вызывает функцию :func:`~curses.doupdate` для изменения физического экрана в "
"соответствии с желаемым состоянием, записанным в структуре данных."

#: ../../howto/curses.rst:254
msgid ""
"Instead you can call :meth:`noutrefresh` on a number of windows to update "
"the data structure, and then call :func:`doupdate` to update the screen."
msgstr ""

#: ../../howto/curses.rst:260
msgid "Displaying Text"
msgstr "Отображение текста"

#: ../../howto/curses.rst:262
msgid ""
"From a C programmer's point of view, curses may sometimes look like a twisty "
"maze of functions, all subtly different.  For example, :c:func:`addstr` "
"displays a string at the current cursor location in the ``stdscr`` window, "
"while :c:func:`mvaddstr` moves to a given y,x coordinate first before "
"displaying the string. :c:func:`waddstr` is just like :c:func:`addstr`, but "
"allows specifying a window to use instead of using ``stdscr`` by default. :c:"
"func:`mvwaddstr` allows specifying both a window and a coordinate."
msgstr ""

#: ../../howto/curses.rst:271
msgid ""
"Fortunately the Python interface hides all these details.  ``stdscr`` is a "
"window object like any other, and methods such as :meth:`~curses.window."
"addstr` accept multiple argument forms.  Usually there are four different "
"forms."
msgstr ""
"К счастью, интерфейс Python скрывает все эти детали. ``stdscr`` является "
"оконным объектом, как и любой другой, и такие методы, как :meth:`~curses."
"window.addstr`, принимают несколько форм аргументов. Обычно существует "
"четыре различных формы."

#: ../../howto/curses.rst:277
msgid "Form"
msgstr "Форма"

#: ../../howto/curses.rst:277 ../../howto/curses.rst:346
msgid "Description"
msgstr "Описание"

#: ../../howto/curses.rst:279
msgid "*str* or *ch*"
msgstr "*str* или *ch*"

#: ../../howto/curses.rst:279
msgid "Display the string *str* or character *ch* at the current position"
msgstr "Отобразить строку *str* или символ *ch* в текущей позиции."

#: ../../howto/curses.rst:282
msgid "*str* or *ch*, *attr*"
msgstr "*str* или *ch*, *attr*"

#: ../../howto/curses.rst:282
msgid ""
"Display the string *str* or character *ch*, using attribute *attr* at the "
"current position"
msgstr ""
"Отображение строки *str* или символа *ch*, используя атрибут *attr* в "
"текущей позиции."

#: ../../howto/curses.rst:286
msgid "*y*, *x*, *str* or *ch*"
msgstr "*y*, *x*, *str* or *ch*"

#: ../../howto/curses.rst:286
msgid "Move to position *y,x* within the window, and display *str* or *ch*"
msgstr "Переместитесь в позицию *y,x* в окне и отобразите *str* или *ch*."

#: ../../howto/curses.rst:289
msgid "*y*, *x*, *str* or *ch*, *attr*"
msgstr "*y*, *x*, *str* or *ch*, *attr*"

#: ../../howto/curses.rst:289
msgid ""
"Move to position *y,x* within the window, and display *str* or *ch*, using "
"attribute *attr*"
msgstr ""
"Переместитесь в позицию *y,x* в окне и отобразите *str* или *ch*, используя "
"атрибут *attr*."

#: ../../howto/curses.rst:293
msgid ""
"Attributes allow displaying text in highlighted forms such as boldface, "
"underline, reverse code, or in color.  They'll be explained in more detail "
"in the next subsection."
msgstr ""
"Атрибуты позволяют отображать текст в выделенных формах, таких как "
"полужирный шрифт, подчеркивание, обратный код или в цвете. Более подробно "
"они будут объяснены в следующем подразделе."

#: ../../howto/curses.rst:298
msgid ""
"The :meth:`~curses.window.addstr` method takes a Python string or bytestring "
"as the value to be displayed.  The contents of bytestrings are sent to the "
"terminal as-is.  Strings are encoded to bytes using the value of the "
"window's :attr:`encoding` attribute; this defaults to the default system "
"encoding as returned by :func:`locale.getpreferredencoding`."
msgstr ""

#: ../../howto/curses.rst:305
msgid ""
"The :meth:`~curses.window.addch` methods take a character, which can be "
"either a string of length 1, a bytestring of length 1, or an integer."
msgstr ""
"Методы :meth:`~curses.window.addch` принимают символ, который может быть "
"строкой длиной 1, строкой байтов длины 1 или целым числом."

#: ../../howto/curses.rst:308
msgid ""
"Constants are provided for extension characters; these constants are "
"integers greater than 255.  For example, :const:`ACS_PLMINUS` is a +/- "
"symbol, and :const:`ACS_ULCORNER` is the upper left corner of a box (handy "
"for drawing borders).  You can also use the appropriate Unicode character."
msgstr ""
"Константы предоставляются для символов расширения; эти константы "
"представляют собой целые числа больше 255. Например, :const:`ACS_PLMINUS` — "
"это символ +/-, а :const:`ACS_ULCORNER` — это верхний левый угол поля "
"(удобно для рисования границ). Вы также можете использовать соответствующий "
"символ Юникода."

#: ../../howto/curses.rst:314
msgid ""
"Windows remember where the cursor was left after the last operation, so if "
"you leave out the *y,x* coordinates, the string or character will be "
"displayed wherever the last operation left off.  You can also move the "
"cursor with the ``move(y,x)`` method.  Because some terminals always display "
"a flashing cursor, you may want to ensure that the cursor is positioned in "
"some location where it won't be distracting; it can be confusing to have the "
"cursor blinking at some apparently random location."
msgstr ""
"Windows запоминает, где остался курсор после последней операции, поэтому, "
"если вы опустите координаты *y,x*, строка или символ будут отображаться там, "
"где остановилась последняя операция. Вы также можете переместить курсор с "
"помощью метода move(y,x)``. Поскольку некоторые терминалы всегда отображают "
"мигающий курсор, вам может потребоваться убедиться, что курсор расположен в "
"таком месте, где он не будет отвлекать; мигание курсора в случайном месте "
"может сбить с толку."

#: ../../howto/curses.rst:322
msgid ""
"If your application doesn't need a blinking cursor at all, you can call "
"``curs_set(False)`` to make it invisible.  For compatibility with older "
"curses versions, there's a ``leaveok(bool)`` function that's a synonym for :"
"func:`~curses.curs_set`.  When *bool* is true, the curses library will "
"attempt to suppress the flashing cursor, and you won't need to worry about "
"leaving it in odd locations."
msgstr ""
"Если вашему приложению вообще не нужен мигающий курсор, вы можете вызвать "
"«curs_set(False)», чтобы сделать его невидимым. Для совместимости со старыми "
"версиями Curses существует функция ``leaveok(bool)``, которая является "
"синонимом :func:`~curses.curs_set`. Если *bool* имеет значение true, "
"библиотека проклятий попытается подавить мигающий курсор, и вам не придется "
"беспокоиться о том, чтобы оставить его в нечетных местах."

#: ../../howto/curses.rst:331
msgid "Attributes and Color"
msgstr "Атрибуты и цвет"

#: ../../howto/curses.rst:333
msgid ""
"Characters can be displayed in different ways.  Status lines in a text-based "
"application are commonly shown in reverse video, or a text viewer may need "
"to highlight certain words.  curses supports this by allowing you to specify "
"an attribute for each cell on the screen."
msgstr ""
"Символы могут отображаться по-разному. Строки состояния в текстовых "
"приложениях обычно отображаются в обратном виде, или средству просмотра "
"текста может потребоваться выделить определенные слова. Curses поддерживает "
"это, позволяя вам указать атрибут для каждой ячейки на экране."

#: ../../howto/curses.rst:338
msgid ""
"An attribute is an integer, each bit representing a different attribute.  "
"You can try to display text with multiple attribute bits set, but curses "
"doesn't guarantee that all the possible combinations are available, or that "
"they're all visually distinct.  That depends on the ability of the terminal "
"being used, so it's safest to stick to the most commonly available "
"attributes, listed here."
msgstr ""
"Атрибут представляет собой целое число, каждый бит которого представляет "
"отдельный атрибут. Вы можете попытаться отобразить текст с несколькими "
"установленными битами атрибутов, но проклятия не гарантируют, что все "
"возможные комбинации доступны или что все они визуально различимы. Это "
"зависит от возможностей используемого терминала, поэтому безопаснее всего "
"придерживаться наиболее распространенных атрибутов, перечисленных здесь."

#: ../../howto/curses.rst:346
msgid "Attribute"
msgstr "Атрибут"

#: ../../howto/curses.rst:348
msgid ":const:`A_BLINK`"
msgstr ":const:`A_BLINK`"

#: ../../howto/curses.rst:348
msgid "Blinking text"
msgstr "Мигающий текст"

#: ../../howto/curses.rst:350
msgid ":const:`A_BOLD`"
msgstr ":const:`A_BOLD`"

#: ../../howto/curses.rst:350
msgid "Extra bright or bold text"
msgstr "Очень яркий или жирный текст"

#: ../../howto/curses.rst:352
msgid ":const:`A_DIM`"
msgstr ":const:`A_DIM`"

#: ../../howto/curses.rst:352
msgid "Half bright text"
msgstr "Полуяркий текст"

#: ../../howto/curses.rst:354
msgid ":const:`A_REVERSE`"
msgstr ":const:`A_REVERSE`"

#: ../../howto/curses.rst:354
msgid "Reverse-video text"
msgstr "Текст обратного видео"

#: ../../howto/curses.rst:356
msgid ":const:`A_STANDOUT`"
msgstr ":const:`A_STANDOUT`"

#: ../../howto/curses.rst:356
msgid "The best highlighting mode available"
msgstr "Лучший доступный режим выделения"

#: ../../howto/curses.rst:358
msgid ":const:`A_UNDERLINE`"
msgstr ":const:`A_UNDERLINE`"

#: ../../howto/curses.rst:358
msgid "Underlined text"
msgstr "Подчеркнутый текст"

#: ../../howto/curses.rst:361
msgid ""
"So, to display a reverse-video status line on the top line of the screen, "
"you could code::"
msgstr ""
"Итак, чтобы отобразить строку состояния обратного видео в верхней строке "
"экрана, вы можете написать код::"

#: ../../howto/curses.rst:368
msgid ""
"The curses library also supports color on those terminals that provide it. "
"The most common such terminal is probably the Linux console, followed by "
"color xterms."
msgstr ""
"Библиотека проклятий также поддерживает цвет на тех терминалах, которые его "
"предоставляют. Наиболее распространенным таким терминалом, вероятно, "
"является консоль Linux, за которой следует цветной xterms."

#: ../../howto/curses.rst:372
msgid ""
"To use color, you must call the :func:`~curses.start_color` function soon "
"after calling :func:`~curses.initscr`, to initialize the default color set "
"(the :func:`curses.wrapper` function does this automatically).  Once that's "
"done, the :func:`~curses.has_colors` function returns TRUE if the terminal "
"in use can actually display color.  (Note: curses uses the American spelling "
"'color', instead of the Canadian/British spelling 'colour'.  If you're used "
"to the British spelling, you'll have to resign yourself to misspelling it "
"for the sake of these functions.)"
msgstr ""
"Чтобы использовать цвет, вы должны вызвать функцию :func:`~curses."
"start_color` вскоре после вызова :func:`~curses.initscr`, чтобы "
"инициализировать набор цветов по умолчанию (функция :func:`curses.wrapper` "
"делает это автоматически). Как только это будет сделано, функция :func:"
"`~curses.has_colors` вернет TRUE, если используемый терминал действительно "
"может отображать цвет. (Примечание: в Curses используется американское "
"написание «цвет» вместо канадского/британского написания «цвет». Если вы "
"привыкли к британскому написанию, вам придется смириться с орфографическими "
"ошибками ради этих функций. )"

#: ../../howto/curses.rst:382
msgid ""
"The curses library maintains a finite number of color pairs, containing a "
"foreground (or text) color and a background color.  You can get the "
"attribute value corresponding to a color pair with the :func:`~curses."
"color_pair` function; this can be bitwise-OR'ed with other attributes such "
"as :const:`A_REVERSE`, but again, such combinations are not guaranteed to "
"work on all terminals."
msgstr ""
"Библиотека Curses поддерживает конечное число пар цветов, содержащих цвет "
"переднего плана (или текста) и цвет фона. Вы можете получить значение "
"атрибута, соответствующее цветовой паре, с помощью функции :func:`~curses."
"color_pair`; это можно соединить побитовым ИЛИ с другими атрибутами, такими "
"как :const:`A_REVERSE`, но опять же, такие комбинации не гарантированно "
"будут работать на всех терминалах."

#: ../../howto/curses.rst:389
msgid "An example, which displays a line of text using color pair 1::"
msgstr "Пример, отображающий строку текста с использованием цветовой пары 1::"

#: ../../howto/curses.rst:394
msgid ""
"As I said before, a color pair consists of a foreground and background "
"color. The ``init_pair(n, f, b)`` function changes the definition of color "
"pair *n*, to foreground color f and background color b.  Color pair 0 is "
"hard-wired to white on black, and cannot be changed."
msgstr ""
"Как я уже говорил, цветовая пара состоит из цвета переднего плана и цвета "
"фона. Функция ``init_pair(n, f, b)`` изменяет определение цветовой пары *n* "
"на цвет переднего плана f и цвет фона b. Цветовая пара 0 жестко привязана к "
"белому на черном и не может быть изменена."

#: ../../howto/curses.rst:399
msgid ""
"Colors are numbered, and :func:`start_color` initializes 8 basic colors when "
"it activates color mode.  They are: 0:black, 1:red, 2:green, 3:yellow, 4:"
"blue, 5:magenta, 6:cyan, and 7:white.  The :mod:`curses` module defines "
"named constants for each of these colors: :const:`curses.COLOR_BLACK`, :"
"const:`curses.COLOR_RED`, and so forth."
msgstr ""
"Цвета пронумерованы, и :func:`start_color` инициализирует 8 основных цветов "
"при активации цветового режима. Это: 0: черный, 1: красный, 2: зеленый, 3: "
"желтый, 4: синий, 5: пурпурный, 6: голубой и 7: белый. Модуль :mod:`curses` "
"определяет именованные константы для каждого из этих цветов: :const:`curses."
"COLOR_BLACK`, :const:`curses.COLOR_RED` и т. д."

#: ../../howto/curses.rst:405
msgid ""
"Let's put all this together. To change color 1 to red text on a white "
"background, you would call::"
msgstr ""
"Давайте соберем все это вместе. Чтобы изменить цвет 1 на красный текст на "
"белом фоне, вы должны вызвать::"

#: ../../howto/curses.rst:410
msgid ""
"When you change a color pair, any text already displayed using that color "
"pair will change to the new colors.  You can also display new text in this "
"color with::"
msgstr ""
"Когда вы меняете цветовую пару, любой текст, уже отображаемый с "
"использованием этой цветовой пары, изменится на новые цвета. Вы также можете "
"отобразить новый текст в этом цвете с помощью::"

#: ../../howto/curses.rst:416
msgid ""
"Very fancy terminals can change the definitions of the actual colors to a "
"given RGB value.  This lets you change color 1, which is usually red, to "
"purple or blue or any other color you like.  Unfortunately, the Linux "
"console doesn't support this, so I'm unable to try it out, and can't provide "
"any examples.  You can check if your terminal can do this by calling :func:"
"`~curses.can_change_color`, which returns ``True`` if the capability is "
"there.  If you're lucky enough to have such a talented terminal, consult "
"your system's man pages for more information."
msgstr ""
"Очень модные терминалы могут изменять определения реальных цветов в "
"соответствии с заданным значением RGB. Это позволит вам изменить цвет 1 "
"(обычно красный) на фиолетовый, синий или любой другой цвет, который вам "
"нравится. К сожалению, консоль Linux не поддерживает это, поэтому я не могу "
"опробовать ее и не могу предоставить никаких примеров. Вы можете проверить, "
"может ли ваш терминал сделать это, вызвав :func:`~curses.can_change_color`, "
"который возвращает ``True``, если такая возможность имеется. Если вам "
"посчастливилось иметь такой талантливый терминал, обратитесь к справочным "
"страницам вашей системы для получения дополнительной информации."

#: ../../howto/curses.rst:427
msgid "User Input"
msgstr "Пользовательский ввод"

#: ../../howto/curses.rst:429
msgid ""
"The C curses library offers only very simple input mechanisms. Python's :mod:"
"`curses` module adds a basic text-input widget.  (Other libraries such as "
"`Urwid <https://pypi.org/project/urwid/>`_ have more extensive collections "
"of widgets.)"
msgstr ""

#: ../../howto/curses.rst:434
msgid "There are two methods for getting input from a window:"
msgstr "Существует два метода получения данных из окна:"

#: ../../howto/curses.rst:436
msgid ""
":meth:`~curses.window.getch` refreshes the screen and then waits for the "
"user to hit a key, displaying the key if :func:`~curses.echo` has been "
"called earlier.  You can optionally specify a coordinate to which the cursor "
"should be moved before pausing."
msgstr ""
":meth:`~curses.window.getch` обновляет экран, а затем ждет, пока "
"пользователь нажмет клавишу, отображая клавишу, если :func:`~curses.echo` "
"была вызвана ранее. При желании вы можете указать координату, к которой "
"следует переместить курсор перед паузой."

#: ../../howto/curses.rst:441
msgid ""
":meth:`~curses.window.getkey` does the same thing but converts the integer "
"to a string.  Individual characters are returned as 1-character strings, and "
"special keys such as function keys return longer strings containing a key "
"name such as ``KEY_UP`` or ``^G``."
msgstr ""
":meth:`~curses.window.getkey` делает то же самое, но преобразует целое число "
"в строку. Отдельные символы возвращаются в виде односимвольных строк, а "
"специальные клавиши, такие как функциональные клавиши, возвращают более "
"длинные строки, содержащие имя ключа, например ``KEY_UP`` или ``^G``."

#: ../../howto/curses.rst:446
msgid ""
"It's possible to not wait for the user using the :meth:`~curses.window."
"nodelay` window method. After ``nodelay(True)``, :meth:`getch` and :meth:"
"`getkey` for the window become non-blocking. To signal that no input is "
"ready, :meth:`getch` returns ``curses.ERR`` (a value of -1) and :meth:"
"`getkey` raises an exception. There's also a :func:`~curses.halfdelay` "
"function, which can be used to (in effect) set a timer on each :meth:"
"`getch`; if no input becomes available within a specified delay (measured in "
"tenths of a second), curses raises an exception."
msgstr ""

#: ../../howto/curses.rst:456
msgid ""
"The :meth:`getch` method returns an integer; if it's between 0 and 255, it "
"represents the ASCII code of the key pressed.  Values greater than 255 are "
"special keys such as Page Up, Home, or the cursor keys. You can compare the "
"value returned to constants such as :const:`curses.KEY_PPAGE`, :const:"
"`curses.KEY_HOME`, or :const:`curses.KEY_LEFT`.  The main loop of your "
"program may look something like this::"
msgstr ""

#: ../../howto/curses.rst:472
msgid ""
"The :mod:`curses.ascii` module supplies ASCII class membership functions "
"that take either integer or 1-character string arguments; these may be "
"useful in writing more readable tests for such loops.  It also supplies "
"conversion functions  that take either integer or 1-character-string "
"arguments and return the same type.  For example, :func:`curses.ascii.ctrl` "
"returns the control character corresponding to its argument."
msgstr ""
"Модуль :mod:`curses.ascii` предоставляет функции членства в классе ASCII, "
"которые принимают в качестве аргументов целочисленные или односимвольные "
"строки; они могут быть полезны при написании более читаемых тестов для таких "
"циклов. Он также предоставляет функции преобразования, которые принимают "
"целочисленные аргументы или аргументы из односимвольной строки и возвращают "
"тот же тип. Например, :func:`curses.ascii.ctrl` возвращает управляющий "
"символ, соответствующий его аргументу."

#: ../../howto/curses.rst:479
msgid ""
"There's also a method to retrieve an entire string, :meth:`~curses.window."
"getstr`.  It isn't used very often, because its functionality is quite "
"limited; the only editing keys available are the backspace key and the Enter "
"key, which terminates the string.  It can optionally be limited to a fixed "
"number of characters. ::"
msgstr ""
"Также существует метод получения всей строки: :meth:`~curses.window.getstr`. "
"Он используется не очень часто, поскольку его функциональность весьма "
"ограничена; единственные доступные клавиши редактирования — это клавиша "
"возврата и клавиша Enter, завершающая строку. При желании его можно "
"ограничить фиксированным количеством символов. ::"

#: ../../howto/curses.rst:490
msgid ""
"The :mod:`curses.textpad` module supplies a text box that supports an Emacs-"
"like set of keybindings.  Various methods of the :class:`~curses.textpad."
"Textbox` class support editing with input validation and gathering the edit "
"results either with or without trailing spaces.  Here's an example::"
msgstr ""
"Модуль :mod:`curses.textpad` предоставляет текстовое поле, которое "
"поддерживает набор сочетаний клавиш, подобный Emacs. Различные методы "
"класса :class:`~curses.textpad.Textbox` поддерживают редактирование с "
"проверкой ввода и сбор результатов редактирования с конечными пробелами или "
"без них. Вот пример::"

#: ../../howto/curses.rst:514
msgid ""
"See the library documentation on :mod:`curses.textpad` for more details."
msgstr ""
"Дополнительную информацию смотрите в документации библиотеки на :mod:`curses."
"textpad`."

#: ../../howto/curses.rst:518
msgid "For More Information"
msgstr "Для получения дополнительной информации"

#: ../../howto/curses.rst:520
msgid ""
"This HOWTO doesn't cover some advanced topics, such as reading the contents "
"of the screen or capturing mouse events from an xterm instance, but the "
"Python library page for the :mod:`curses` module is now reasonably "
"complete.  You should browse it next."
msgstr ""
"Этот HOWTO не охватывает некоторые сложные темы, такие как чтение "
"содержимого экрана или захват событий мыши из экземпляра xterm, но страница "
"библиотеки Python для модуля :mod:`curses` теперь достаточно завершена. Вам "
"следует просмотреть его дальше."

#: ../../howto/curses.rst:525
msgid ""
"If you're in doubt about the detailed behavior of the curses functions, "
"consult the manual pages for your curses implementation, whether it's "
"ncurses or a proprietary Unix vendor's.  The manual pages will document any "
"quirks, and provide complete lists of all the functions, attributes, and :"
"const:`ACS_\\*` characters available to you."
msgstr ""

#: ../../howto/curses.rst:532
msgid ""
"Because the curses API is so large, some functions aren't supported in the "
"Python interface.  Often this isn't because they're difficult to implement, "
"but because no one has needed them yet.  Also, Python doesn't yet support "
"the menu library associated with ncurses. Patches adding support for these "
"would be welcome; see `the Python Developer's Guide <https://devguide.python."
"org/>`_ to learn more about submitting patches to Python."
msgstr ""
"Поскольку API проклятий очень велик, некоторые функции не поддерживаются в "
"интерфейсе Python. Зачастую это происходит не потому, что их сложно "
"реализовать, а потому, что они еще никому не нужны. Кроме того, Python пока "
"не поддерживает библиотеку меню, связанную с ncurses. Патчи, добавляющие их "
"поддержку, будут приветствоваться; см. `Руководство разработчика Python "
"<https://devguide.python.org/>`_, чтобы узнать больше об отправке "
"исправлений в Python."

#: ../../howto/curses.rst:540
msgid ""
"`Writing Programs with NCURSES <https://invisible-island.net/ncurses/ncurses-"
"intro.html>`_: a lengthy tutorial for C programmers."
msgstr ""
"`Написание программ с помощью NCURSES <https://invisible-island.net/ncurses/"
"ncurses-intro.html>`_: длинное руководство для программистов на C."

#: ../../howto/curses.rst:542
msgid "`The ncurses man page <https://linux.die.net/man/3/ncurses>`_"
msgstr "`Справочная страница ncurses <https://linux.die.net/man/3/ncurses>`_"

#: ../../howto/curses.rst:543
msgid ""
"`The ncurses FAQ <https://invisible-island.net/ncurses/ncurses.faq.html>`_"
msgstr ""
"`Часто задаваемые вопросы по ncurses <https://invisible-island.net/ncurses/"
"ncurses.faq.html>`_"

#: ../../howto/curses.rst:544
msgid ""
"`\"Use curses... don't swear\" <https://www.youtube.com/watch?"
"v=eN1eZtjLEnU>`_: video of a PyCon 2013 talk on controlling terminals using "
"curses or Urwid."
msgstr ""
"`\"Используйте curses... не ругайтесь\" <https://www.youtube.com/watch?"
"v=eN1eZtjLEnU>`_: видео выступления PyCon 2013 об управлении терминалами с "
"помощью проклятий или Urwid."

#: ../../howto/curses.rst:546
msgid ""
"`\"Console Applications with Urwid\" <https://pyvideo.org/video/1568/console-"
"applications-with-urwid>`_: video of a PyCon CA 2012 talk demonstrating some "
"applications written using Urwid."
msgstr ""
"`\"Консольные приложения с Urwid\" <https://pyvideo.org/video/1568/console-"
"applications-with-urwid>`_: видео выступления PyCon CA 2012, демонстрирующее "
"некоторые приложения, написанные с использованием Urwid."
