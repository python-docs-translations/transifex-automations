# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 汇民 王 <whuim@qq.com>, 2025
# python-doc bot, 2025
# Freesand Leo <yuqinju@163.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-19 14:13+0000\n"
"PO-Revision-Date: 2025-09-16 00:02+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.14.rst:4
msgid "What's new in Python 3.14"
msgstr "Python 3.14 有什么新变化"

#: ../../whatsnew/3.14.rst:0
msgid "Editors"
msgstr "编者"

#: ../../whatsnew/3.14.rst:6
msgid "Adam Turner and Hugo van Kemenade"
msgstr "Adam Turner 和 Hugo van Kemenade"

#: ../../whatsnew/3.14.rst:48
msgid ""
"This article explains the new features in Python 3.14, compared to 3.13. "
"Python 3.14 was released on 7 October 2025. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"本文介绍了 Python 3.14 相比 3.13 增加的新特性。 Python 3.14 发布于 2025 年 "
"10 月 7 日。 要了解详细信息，请参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.14.rst:54
msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ":pep:`745` -- Python 3.14 发布计划"

#: ../../whatsnew/3.14.rst:58
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.14.rst:63
msgid ""
"Python 3.14 is the latest stable release of the Python programming language, "
"with a mix of changes to the language, the implementation, and the standard "
"library. The biggest changes include :ref:`template string literals "
"<whatsnew314-template-string-literals>`, :ref:`deferred evaluation of "
"annotations <whatsnew314-deferred-annotations>`, and support for :ref:"
"`subinterpreters <whatsnew314-multiple-interpreters>` in the standard "
"library."
msgstr ""
"Python 3.14 是 Python 编程语言的最新稳定发布版，包含多项针对语言、实现和标准"
"库的改变。 最大的变化包括 :ref:`模板字符串字面值 <whatsnew314-template-"
"string-literals>`, :ref:`标注的迟延求值 <whatsnew314-deferred-annotations>`，"
"以及在标准库中对 :ref:`子解释器 <whatsnew314-multiple-interpreters>` 的支持。"

#: ../../whatsnew/3.14.rst:72
msgid ""
"The library changes include significantly improved capabilities for :ref:"
"`introspection in asyncio <whatsnew314-asyncio-introspection>`, :ref:"
"`support for Zstandard <whatsnew314-zstandard>` via a new :mod:`compression."
"zstd` module, syntax highlighting in the REPL, as well as the usual "
"deprecations and removals, and improvements in user-friendliness and "
"correctness."
msgstr ""
"标准库的变化包括大幅改进 :ref:`在 asyncio 中的内省 <whatsnew314-asyncio-"
"introspection>` 的功能，新增 :mod:`compression.zstd` 模块以 :ref:`支持 "
"Zstandard <whatsnew314-zstandard>`，REPL 中的语法高亮，还有用户友好度和正确性"
"方面的改进。"

#: ../../whatsnew/3.14.rst:79
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details refer to "
"the documentation, such as the :ref:`Library Reference <library-index>` and :"
"ref:`Language Reference <reference-index>`. To understand the complete "
"implementation and design rationale for a change, refer to the PEP for a "
"particular new feature; but note that PEPs usually are not kept up-to-date "
"once a feature has been fully implemented. See `Porting to Python 3.14`_ for "
"guidance on upgrading from earlier versions of Python."
msgstr ""
"本文并不试图提供所有新特性的完整规范说明，只是给出一个便捷的概览。 要了解完整"
"细语请参阅相应文档，如 :ref:`标准库参考 <library-index>` 和 :ref:`语言参考 "
"<reference-index>`。 要了解某项改变的完整实现和设计理念，请参阅相应新特性的 "
"PEP；但请注意一旦某项特性已完全实现则相应 PEP 通常不会再持续更新。 请参阅 `移"
"植到 Python 3.14`_ 了解如何从较早的 Python 版本进行升级的指导。"

#: ../../whatsnew/3.14.rst:95
msgid "Interpreter improvements:"
msgstr "解释器的改进:"

#: ../../whatsnew/3.14.rst:97
msgid ""
":pep:`649` and :pep:`749`: :ref:`Deferred evaluation of annotations "
"<whatsnew314-deferred-annotations>`"
msgstr ""
":pep:`649` 和 :pep:`749`: :ref:`标注的迟延求值 <whatsnew314-deferred-"
"annotations>`"

#: ../../whatsnew/3.14.rst:99
msgid ""
":pep:`734`: :ref:`Multiple interpreters in the standard library <whatsnew314-"
"multiple-interpreters>`"
msgstr ""
":pep:`734`: :ref:`标准库中的多解释器 <whatsnew314-multiple-interpreters>`"

#: ../../whatsnew/3.14.rst:101
msgid ""
":pep:`750`: :ref:`Template strings <whatsnew314-template-string-literals>`"
msgstr ":pep:`750`: :ref:`模板字符串 <whatsnew314-template-string-literals>`"

#: ../../whatsnew/3.14.rst:102
msgid ""
":pep:`758`: :ref:`Allow except and except* expressions without brackets "
"<whatsnew314-bracketless-except>`"
msgstr ""
":pep:`758`: :ref:`允许不带圆括号的 except 和 except* 表达式 <whatsnew314-"
"bracketless-except>`"

#: ../../whatsnew/3.14.rst:104
msgid ""
":pep:`765`: :ref:`Control flow in finally blocks <whatsnew314-finally-"
"syntaxwarning>`"
msgstr ""
":pep:`765`: :ref:`finally 代码块中的控制流 <whatsnew314-finally-"
"syntaxwarning>`"

#: ../../whatsnew/3.14.rst:106
msgid ""
":pep:`768`: :ref:`Safe external debugger interface for CPython <whatsnew314-"
"remote-debugging>`"
msgstr ""
":pep:`768`: :ref:`安全的 CPython 外部调试器接口 <whatsnew314-remote-"
"debugging>`"

#: ../../whatsnew/3.14.rst:108
msgid ":ref:`A new type of interpreter <whatsnew314-tail-call-interpreter>`"
msgstr ":ref:`一种新的解释器类型 <whatsnew314-tail-call-interpreter>`"

#: ../../whatsnew/3.14.rst:109
msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ":ref:`自由线程模式的改进 <whatsnew314-free-threaded-cpython>`"

#: ../../whatsnew/3.14.rst:110
msgid ":ref:`Improved error messages <whatsnew314-improved-error-messages>`"
msgstr ":ref:`改进的错误消息 <whatsnew314-improved-error-messages>`"

#: ../../whatsnew/3.14.rst:111
msgid ":ref:`Incremental garbage collection <whatsnew314-incremental-gc>`"
msgstr ":ref:`增量式垃圾回收 <whatsnew314-incremental-gc>`"

#: ../../whatsnew/3.14.rst:113
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.14.rst:115
msgid ""
":pep:`784`: :ref:`Zstandard support in the standard library <whatsnew314-"
"zstandard>`"
msgstr ":pep:`784`: :ref:`标准库中的 Zstandard 支持 <whatsnew314-zstandard>`"

#: ../../whatsnew/3.14.rst:117
msgid ":ref:`whatsnew314-asyncio-introspection`"
msgstr ":ref:`whatsnew314-asyncio-introspection`"

#: ../../whatsnew/3.14.rst:118
msgid ":ref:`whatsnew314-concurrent-warnings-control`"
msgstr ":ref:`whatsnew314-concurrent-warnings-control`"

#: ../../whatsnew/3.14.rst:119
msgid ""
":ref:`Syntax highlighting in the default interactive shell <whatsnew314-"
"pyrepl-highlighting>`, and color output in several standard library CLIs"
msgstr ""
":ref:`默认交互式 shell 中的语法高亮 <whatsnew314-pyrepl-highlighting>`，以及"
"多个标准库 CLI 中的彩色输出"

#: ../../whatsnew/3.14.rst:123
msgid "C API improvements:"
msgstr "C API 的改进："

#: ../../whatsnew/3.14.rst:125
msgid ":pep:`741`: :ref:`Python configuration C API <whatsnew314-capi-config>`"
msgstr ":pep:`741`: :ref:`Python 配置 C API <whatsnew314-capi-config>`"

#: ../../whatsnew/3.14.rst:127
msgid "Platform support:"
msgstr "平台支持："

#: ../../whatsnew/3.14.rst:129
msgid ""
":pep:`776`: Emscripten is now an :ref:`officially supported platform "
"<whatsnew314-build-changes>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`776`: 现在 Emscripten 是 :ref:`官方支持的平台 <whatsnew314-build-"
"changes>`，处于 :pep:`第 3 层级 <11#tier-3>`。"

#: ../../whatsnew/3.14.rst:132
msgid "Release changes:"
msgstr "发布包的变更："

#: ../../whatsnew/3.14.rst:134
msgid ""
":pep:`779`: :ref:`Free-threaded Python is officially supported <whatsnew314-"
"free-threaded-now-supported>`"
msgstr ""
":pep:`779`: :ref:`自由线程 Python 已获官方支持 <whatsnew314-free-threaded-"
"now-supported>`"

#: ../../whatsnew/3.14.rst:136
msgid ""
":pep:`761`: :ref:`PGP signatures have been discontinued for official "
"releases <whatsnew314-no-more-pgp>`"
msgstr ""
":pep:`761`: :ref:`官方发布包已停止使用 PGP 签名 <whatsnew314-no-more-pgp>`"

#: ../../whatsnew/3.14.rst:138
msgid ""
":ref:`Windows and macOS binary releases now support the experimental just-in-"
"time compiler <whatsnew314-jit-compiler>`"
msgstr ""
":ref:`Windows 和 macOS 二进制发布包现已支持实验性的即时编译器 <whatsnew314-"
"jit-compiler>`"

#: ../../whatsnew/3.14.rst:140
msgid ""
":ref:`Binary releases for Android are now provided <whatsnew314-build-"
"changes>`"
msgstr ":ref:`现已提供针对 Android 的二进制发布包 <whatsnew314-build-changes>`"

#: ../../whatsnew/3.14.rst:144
msgid "New features"
msgstr "新的特性"

#: ../../whatsnew/3.14.rst:149
msgid ":pep:`649` & :pep:`749`: Deferred evaluation of annotations"
msgstr ":pep:`649` & :pep:`749`: 标注的迟延求值"

#: ../../whatsnew/3.14.rst:151
msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used)."
msgstr ""
"在函数、类和模块上的 :term:`标注 <annotation>` 将不再被立即求值。 相反，标注"
"会被存储在专门的 :term:`标注函数 <annotate function>` 中并仅在必要时进行求值 "
"(除非使用了 ``from __future__ import annotations``)。"

#: ../../whatsnew/3.14.rst:156
msgid ""
"This change is designed to improve performance and usability of annotations "
"in Python in most circumstances. The runtime cost for defining annotations "
"is minimized, but it remains possible to introspect annotations at runtime. "
"It is no longer necessary to enclose annotations in strings if they contain "
"forward references."
msgstr ""
"这一改进旨在使得 Python 中的标注在大多数情况下具有更好的性能和可用性。 定义标"
"注的运行时开销被最小化，但仍可在运行时对标注进行内省。  当标注包含前向引用时"
"也不再需要将其包裹在字符串中。"

#: ../../whatsnew/3.14.rst:162
msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the :attr:`~annotationlib."
"Format.VALUE` format (which evaluates annotations to runtime values, similar "
"to the behavior in earlier Python versions), the :attr:`~annotationlib."
"Format.FORWARDREF` format (which replaces undefined names with special "
"markers), and the :attr:`~annotationlib.Format.STRING` format (which returns "
"annotations as strings)."
msgstr ""
"新引入的 :mod:`annotationlib` 模块提供了检查延迟注解的工具。注解可以通过以下"
"格式进行求值：:attr:`~annotationlib.Format.VALUE` 格式（将注解求值为运行时"
"值，类似于早期Python版本的行为）、:attr:`~annotationlib.Format.FORWARDREF` 格"
"式（用特殊标记替换未定义名称）、:attr:`~annotationlib.Format.STRING` 格式（以"
"字符串形式返回注解）。"

#: ../../whatsnew/3.14.rst:169
msgid "This example shows how these formats behave:"
msgstr "以下示例展示了这些格式的具体行为："

#: ../../whatsnew/3.14.rst:171
msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"

#: ../../whatsnew/3.14.rst:185
msgid ""
"The :ref:`porting <whatsnew314-porting-annotations>` section contains "
"guidance on changes that may be needed due to these changes, though in the "
"majority of cases, code will continue working as-is."
msgstr ""
":ref:`移植 <whatsnew314-porting-annotations>` 一节包含了有关因这些改变而可能"
"需要的修改指导，不过大大部分情况下，原来的代码将可继续工作。"

#: ../../whatsnew/3.14.rst:189
msgid ""
"(Contributed by Jelle Zijlstra in :pep:`749` and :gh:`119180`; :pep:`649` "
"was written by Larry Hastings.)"
msgstr ""
"（由 Jelle Zijlstra 在 :pep:`749` 和 :gh:`119180` 中贡献；:pep:`649` 由 "
"Larry Hastings 编写。）"

#: ../../whatsnew/3.14.rst:194
msgid ":pep:`649`"
msgstr ":pep:`649`"

#: ../../whatsnew/3.14.rst:195
msgid "Deferred Evaluation Of Annotations Using Descriptors"
msgstr "使用描述器进行标注的迟延求值"

#: ../../whatsnew/3.14.rst:196
msgid ":pep:`749`"
msgstr ":pep:`749`"

#: ../../whatsnew/3.14.rst:197
msgid "Implementing PEP 649"
msgstr "实现 PEP 649"

#: ../../whatsnew/3.14.rst:203
msgid ":pep:`734`: Multiple interpreters in the standard library"
msgstr ":pep:`734`: 标准库中的多解释器"

#: ../../whatsnew/3.14.rst:205
msgid ""
"The CPython runtime supports running multiple copies of Python in the same "
"process simultaneously and has done so for over 20 years. Each of these "
"separate copies is called an 'interpreter'. However, the feature had been "
"available only through the :ref:`C-API <sub-interpreter-support>`."
msgstr ""
"CPython 运行时支持在同一个进程中同时运行多个 Python 的副本并且已经这样做了 "
"20 多年。 每个这样的副本被称为‘解释器’。 不过，该特性过去只能通过 :ref:`C-"
"API <sub-interpreter-support>` 来使用。."

#: ../../whatsnew/3.14.rst:211
msgid ""
"That limitation is removed in Python 3.14, with the new :mod:`concurrent."
"interpreters` module."
msgstr ""
"由于新增的 :mod:`concurrent.interpreters` 模块，此限制已在 Python 3.14 中被移"
"除。"

#: ../../whatsnew/3.14.rst:214
msgid ""
"There are at least two notable reasons why using multiple interpreters has "
"significant benefits:"
msgstr "至少有两个重要理由能说明为何使用多解释器可以带来显著的益处："

#: ../../whatsnew/3.14.rst:217
msgid "they support a new (to Python), human-friendly concurrency model"
msgstr "它们支持（对 Python 来说）全新的、用户友好的并发模型"

#: ../../whatsnew/3.14.rst:218
msgid "true multi-core parallelism"
msgstr "真正的多核心并行"

#: ../../whatsnew/3.14.rst:220
msgid ""
"For some use cases, concurrency in software improves efficiency and can "
"simplify design, at a high level. At the same time, implementing and "
"maintaining all but the simplest concurrency is often a struggle for the "
"human brain. That especially applies to plain threads (for example, :mod:"
"`threading`), where all memory is shared between all threads."
msgstr ""
"对于某些用例来说，软件中的并发机制能够在更高的层级上提升效率并简化设计。 与此"
"同时，实现和维护除最简单形式以外的并发逻辑对人脑来说常常是很困难的。 这一点尤"
"其适用于普通线程 (例如 :mod:`threading`)，其中所有的线程之间会共享所有的内"
"存。"

#: ../../whatsnew/3.14.rst:227
msgid ""
"With multiple isolated interpreters, you can take advantage of a class of "
"concurrency models, like Communicating Sequential Processes (CSP) or the "
"actor model, that have found success in other programming languages, like "
"Smalltalk, Erlang, Haskell, and Go. Think of multiple interpreters as "
"threads but with opt-in sharing."
msgstr ""
"通过多个相互隔离的解释器，你可以利用一类在其他编程语言如 Smalltalk, Erlang, "
"Haskell, 和 Go 中已得到成功运用的并发模型，如通信顺序进程 (CSP) 或表演者模型"
"等。 可以将多个解释器视为具有可远择共享资源的线程。"

#: ../../whatsnew/3.14.rst:234
msgid ""
"Regarding multi-core parallelism: as of Python 3.12, interpreters are now "
"sufficiently isolated from one another to be used in parallel (see :pep:"
"`684`). This unlocks a variety of CPU-intensive use cases for Python that "
"were limited by the :term:`GIL`."
msgstr ""
"关于多核并行：从 Python 3.12 开始，各个解释器彼此已实现足够的隔离从而可以并行"
"使用 (参见 :pep:`684`)。 这使得 Python 能够解锁许多曾经受限于 :term:`GIL` 的 "
"CPU 密集型应用场景。"

#: ../../whatsnew/3.14.rst:239
msgid ""
"Using multiple interpreters is similar in many ways to :mod:"
"`multiprocessing`, in that they both provide isolated logical \"processes\" "
"that can run in parallel, with no sharing by default. However, when using "
"multiple interpreters, an application will use fewer system resources and "
"will operate more efficiently (since it stays within the same process). "
"Think of multiple interpreters as having the isolation of processes with the "
"efficiency of threads."
msgstr ""
"使用多个解释器在许多方面与 :mod:`multiprocessing` 类似，因为它们都提供了相互"
"隔离的逻辑“进程”，在默认情况下不共享资源并可并行运行。 然而，在使用多个解释器"
"时，应用程序将使用更少的系统资源并具有更高的运行效率（因为它们仍处于同一个进"
"程内）。 可以将多个解释器视为即具有进程级别的隔离性又具有线程级别的高效率。"

#: ../../whatsnew/3.14.rst:250
msgid ""
"While the feature has been around for decades, multiple interpreters have "
"not been used widely, due to low awareness and the lack of a standard "
"library module. Consequently, they currently have several notable "
"limitations, which are expected to improve significantly now that the "
"feature is going mainstream."
msgstr ""
"尽管此特性已存在了数十年，但由于知名度较低且缺少标准库模块支持，多解释器并未"
"被广泛使用。 因此，目前其仍存在一些明显的限制，但现在此特性正走向主流并预期会"
"获得迅速的改进。"

#: ../../whatsnew/3.14.rst:256
msgid "Current limitations:"
msgstr "当前限制："

#: ../../whatsnew/3.14.rst:258
msgid "starting each interpreter has not been optimized yet"
msgstr "启动每个解释器尚未经过优化。"

#: ../../whatsnew/3.14.rst:259
msgid ""
"each interpreter uses more memory than necessary (work continues on "
"extensive internal sharing between interpreters)"
msgstr ""
"每个解释器会占用超出实际需要的内存（正在持续努力实现解释器之间充分的内部共"
"享）"

#: ../../whatsnew/3.14.rst:261
msgid ""
"there aren't many options *yet* for truly sharing objects or other data "
"between interpreters (other than :type:`memoryview`)"
msgstr ""
"解释器之间真正实现对象或其他数据共享的选项还很有限（除了 :type:"
"`memoryview`）。"

#: ../../whatsnew/3.14.rst:263
msgid ""
"many third-party extension modules on PyPI are not yet compatible with "
"multiple interpreters (all standard library extension modules *are* "
"compatible)"
msgstr ""
"PyPI 上的许多第三方扩展模块尚未与多解释器实现兼容（所有标准库扩展模块 *已经* "
"兼容）"

#: ../../whatsnew/3.14.rst:266
msgid ""
"the approach to writing applications that use multiple isolated interpreters "
"is mostly unfamiliar to Python users, for now"
msgstr ""
"目前，针对使用多个隔离解释器编写应用程序的方法，对大多数 Python 用户来说仍较"
"为陌生。"

#: ../../whatsnew/3.14.rst:269
msgid ""
"The impact of these limitations will depend on future CPython improvements, "
"how interpreters are used, and what the community solves through PyPI "
"packages. Depending on the use case, the limitations may not have much "
"impact, so try it out!"
msgstr ""
"这些限制的影响将取决于未来 CPython 的改进、解释器的使用方式，以及社区通过 "
"PyPI 软件包能解决哪些问题。 根据具体应用场景，这些限制可能并不会有太大影响，"
"因此不妨尝试一下！"

#: ../../whatsnew/3.14.rst:274
msgid ""
"Furthermore, future CPython releases will reduce or eliminate overhead and "
"provide utilities that are less appropriate on PyPI. In the meantime, most "
"of the limitations can also be addressed through extension modules, meaning "
"PyPI packages can fill any gap for 3.14, and even back to 3.12 where "
"interpreters were finally properly isolated and stopped sharing the :term:"
"`GIL`. Likewise, libraries on PyPI are expected to emerge for high-level "
"abstractions on top of interpreters."
msgstr ""
"此外，未来的 CPython 发布版将进一步减少甚至消除这种开销并提供一些不太适合放"
"到 PyPI 上的工具，大多数限制也可以通过扩展模块来解决，这意味着 PyPI 包可以为 "
"3.14 填补各种功能缺口，甚至能上溯到 3.12 即解释器最终实现真正的隔离并停止共"
"享 :term:`GIL` 的时候。 同样地，预计在 PyPI 上将产生基于多解释器的高层级抽象"
"库。"

#: ../../whatsnew/3.14.rst:282
msgid ""
"Regarding extension modules, work is in progress to update some PyPI "
"projects, as well as tools like Cython, pybind11, nanobind, and PyO3. The "
"steps for isolating an extension module are found at :ref:`isolating-"
"extensions-howto`. Isolating a module has a lot of overlap with what is "
"required to support :ref:`free-threading <whatsnew314-free-threaded-"
"cpython>`, so the ongoing work in the community in that area will help "
"accelerate support for multiple interpreters."
msgstr ""
"关于扩展模块，已在推进一些 PyPI 项目的更新，还有如 Cython, pybind11, "
"nanobind 和 PyO3 这样的工具。 有关隔离扩展模块的具体步骤可参看 :ref:"
"`isolating-extensions-howto`。 隔离模块与支持 :ref:`自由线程 <whatsnew314-"
"free-threaded-cpython>` 所需的工作有大量重叠，因此社区在该领域的持续努力将有"
"助于加快对多解释器的支持进程。"

#: ../../whatsnew/3.14.rst:291
msgid ""
"Also added in 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."
msgstr ""
"在 3.14 中还增加了：:ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`。"

#: ../../whatsnew/3.14.rst:294
msgid "(Contributed by Eric Snow in :gh:`134939`.)"
msgstr "（由 Eric Snow 在 :gh:`134939` 中贡献。）"

#: ../../whatsnew/3.14.rst:296
msgid ":pep:`734`"
msgstr ":pep:`734`"

#: ../../whatsnew/3.14.rst:302
msgid ":pep:`750`: Template string literals"
msgstr ":pep:`750`: 模板字符串字面值"

#: ../../whatsnew/3.14.rst:304
msgid ""
"Template strings are a new mechanism for custom string processing. They "
"share the familiar syntax of f-strings but, unlike f-strings, return an "
"object representing the static and interpolated parts of the string, instead "
"of a simple :class:`str`."
msgstr ""
"模板字符串是一种用于定制字符串处理的新机制。 它们共享与 f-字符串类似的语法，"
"但与 f-字符串不同，它们返回一个代表字符串的静态和插值部分的对象，而不是简单"
"的 :class:`str`。"

#: ../../whatsnew/3.14.rst:309
msgid "To write a t-string, use a ``'t'`` prefix instead of an ``'f'``:"
msgstr "要编写 t-字符串，应使用 ``'t'`` 前缀而不是 ``'f'``:"

#: ../../whatsnew/3.14.rst:311
msgid ""
">>> variety = 'Stilton'\n"
">>> template = t'Try some {variety} cheese!'\n"
">>> type(template)\n"
"<class 'string.templatelib.Template'>"
msgstr ""
">>> variety = 'Stilton'\n"
">>> template = t'Try some {variety} cheese!'\n"
">>> type(template)\n"
"<class 'string.templatelib.Template'>"

#: ../../whatsnew/3.14.rst:318
msgid ""
":class:`~string.templatelib.Template` objects provide access to the static "
"and interpolated (in curly braces) parts of a string *before* they are "
"combined. Iterate over :class:`!Template` instances to access their parts in "
"order:"
msgstr ""
":class:`~string.templatelib.Template` 对象在字符串的静态和插值（以花括号标"
"示）在被组合 *之前* 提供对它们的访问。 迭代 :class:`!Template` 实例可以按顺序"
"访问其的各个部分："

#: ../../whatsnew/3.14.rst:327
msgid ""
">>> list(template)\n"
"['Try some ', Interpolation('Stilton', 'variety', None, ''), ' cheese!']"
msgstr ""
">>> list(template)\n"
"['Try some ', Interpolation('Stilton', 'variety', None, ''), ' cheese!']"

#: ../../whatsnew/3.14.rst:332
msgid ""
"It's easy to write (or call) code to process :class:`!Template` instances. "
"For example, here's a function that renders static parts lowercase and :"
"class:`~string.templatelib.Interpolation` instances uppercase:"
msgstr ""
"编写（或调用）代码对 :class:`!Template` 实例进行处理是很容易的。 例如，下面的"
"函数可将静态部分转为小写而将 :class:`~string.templatelib.Interpolation` 实例"
"转为大写："

#: ../../whatsnew/3.14.rst:336
msgid ""
"from string.templatelib import Interpolation\n"
"\n"
"def lower_upper(template):\n"
"    \"\"\"Render static parts lowercase and interpolations uppercase.\"\"\"\n"
"    parts = []\n"
"    for part in template:\n"
"        if isinstance(part, Interpolation):\n"
"            parts.append(str(part.value).upper())\n"
"        else:\n"
"            parts.append(part.lower())\n"
"    return ''.join(parts)\n"
"\n"
"name = 'Wenslydale'\n"
"template = t'Mister {name}'\n"
"assert lower_upper(template) == 'mister WENSLYDALE'"
msgstr ""
"from string.templatelib import Interpolation\n"
"\n"
"def lower_upper(template):\n"
"    \"\"\"Render static parts lowercase and interpolations uppercase.\"\"\"\n"
"    parts = []\n"
"    for part in template:\n"
"        if isinstance(part, Interpolation):\n"
"            parts.append(str(part.value).upper())\n"
"        else:\n"
"            parts.append(part.lower())\n"
"    return ''.join(parts)\n"
"\n"
"name = 'Wenslydale'\n"
"template = t'Mister {name}'\n"
"assert lower_upper(template) == 'mister WENSLYDALE'"

#: ../../whatsnew/3.14.rst:354
msgid ""
"Because :class:`!Template` instances distinguish between static strings and "
"interpolations at runtime, they can be useful for sanitising user input. "
"Writing a :func:`!html` function that escapes user input in HTML is an "
"exercise left to the reader! Template processing code can provide improved "
"flexibility. For instance, a more advanced :func:`!html` function could "
"accept a :class:`!dict` of HTML attributes directly in the template:"
msgstr ""
"因为 :class:`!Template` 实例会在运行时区分静态和插值部分，它们在无害化用户输"
"入时将很有用处。 这里给读者留一个编写对用户输入的 HTML 进行转义的 :func:`!"
"html` 函数的作业！ 模板处理代码可以提供更高的灵活性。 举例来说，进阶版 :func:"
"`!html` 函数可以直接在模板中接受一个 HTML 属性的 :class:`!dict`:"

#: ../../whatsnew/3.14.rst:362
msgid ""
"attributes = {'src': 'limburger.jpg', 'alt': 'lovely cheese'}\n"
"template = t'<img {attributes}>'\n"
"assert html(template) == '<img src=\"limburger.jpg\" alt=\"lovely cheese\" /"
">'"
msgstr ""
"attributes = {'src': 'limburger.jpg', 'alt': 'lovely cheese'}\n"
"template = t'<img {attributes}>'\n"
"assert html(template) == '<img src=\"limburger.jpg\" alt=\"lovely cheese\" /"
">'"

#: ../../whatsnew/3.14.rst:368
msgid ""
"Of course, template processing code does not need to return a string-like "
"result. An even *more* advanced :func:`!html` could return a custom type "
"representing a DOM-like structure."
msgstr ""
"当然，模板处理代码不一定要返回字符串结果。 一个 *更为* 进阶的 :func:`!html` "
"可以返回一个代表类似 DOM 结构的自定义类型。"

#: ../../whatsnew/3.14.rst:372
msgid ""
"With t-strings in place, developers can write systems that sanitise SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight custom "
"business DSLs."
msgstr ""
"有了 t-字符串，开发者可以编写专用系统来无害化 SQL，执行安全的 shell 操作，改"
"进日志记录，处理 Web 开发中的现代概念（HTML, CSS  等等），以及实现轻量级的自"
"定义业务 DSL。"

#: ../../whatsnew/3.14.rst:376
msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""
"（由 Jim Baker、Guido van Rossum、Paul Everitt、Koudai Aono、Lysandros "
"Nikolaou、Dave Peck、Adam Turner、Jelle Zijlstra、Bénédikt Tran 和 Pablo "
"Galindo Salgado 在 :gh:`132661` 中贡献。）"

#: ../../whatsnew/3.14.rst:380
msgid ":pep:`750`."
msgstr ":pep:`750`。"

#: ../../whatsnew/3.14.rst:386
msgid ":pep:`768`: Safe external debugger interface"
msgstr ":pep:`768`: 安全的外部调试器接口"

#: ../../whatsnew/3.14.rst:388
msgid ""
"Python 3.14 introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes without "
"stopping or restarting them. This is a significant enhancement to Python's "
"debugging capabilities, meaning that unsafe alternatives are no longer "
"required."
msgstr ""
"Python 3.14 引入了一个零开销的调试接口，它允许调试器和性能分析工具安全地附加"
"到正在运行的 Python 进程而不会停止或重启它们。 这显著加强了 Python 的调试能"
"力，意味着不安全的替代方案已不再需要。"

#: ../../whatsnew/3.14.rst:394
msgid ""
"The new interface provides safe execution points for attaching debugger code "
"without modifying the interpreter's normal execution path or adding any "
"overhead at runtime. Due to this, tools can now inspect and interact with "
"Python applications in real-time, which is a crucial capability for high-"
"availability systems and production environments."
msgstr ""
"新的接口为附加调试器代码提供了安全的执行点而无需修改解释器的正常执行路径或增"
"加任何运行时开销。 因此，相关工具现在可以实时地对 Python 应用程序进行检查和交"
"互，这对于高可用性系统和生产环境来说是非常关键的能力。"

#: ../../whatsnew/3.14.rst:401
msgid ""
"For convenience, this interface is implemented in the :func:`sys."
"remote_exec` function. For example:"
msgstr ""
"出于便捷性考虑，本接口是在 :func:`sys.remote_exec` 函数中实现的。 例如："

#: ../../whatsnew/3.14.rst:404
msgid ""
"import sys\n"
"from tempfile import NamedTemporaryFile\n"
"\n"
"with NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n"
"    script_path = f.name\n"
"    f.write(f'import my_debugger; my_debugger.connect({os.getpid()})')\n"
"\n"
"# Execute in process with PID 1234\n"
"print('Behold! An offering:')\n"
"sys.remote_exec(1234, script_path)"
msgstr ""
"import sys\n"
"from tempfile import NamedTemporaryFile\n"
"\n"
"with NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n"
"    script_path = f.name\n"
"    f.write(f'import my_debugger; my_debugger.connect({os.getpid()})')\n"
"\n"
"# 在进程 PID 1234 中执行\n"
"print('Behold! An offering:')\n"
"sys.remote_exec(1234, script_path)"

#: ../../whatsnew/3.14.rst:418
msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""
"此函数允许发送 Python 代码以便在目标进程中的下一个安全执行点上执行。 不过，工"
"具作者也可以直接实现在 PEP 中描述的协议，它详细讲解了用于安全附加到运行进程的"
"底层机制。"

#: ../../whatsnew/3.14.rst:424
msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr "该调试接口在设计时已充分考虑安全性，并包含多种访问控制机制："

#: ../../whatsnew/3.14.rst:427
msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr ":envvar:`PYTHON_DISABLE_REMOTE_DEBUG` 环境变量。"

#: ../../whatsnew/3.14.rst:428
msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr ":option:`-X disable-remote-debug` 命令行选项。"

#: ../../whatsnew/3.14.rst:429
msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ""
":option:`--without-remote-debug` 配置标志，用于在构建时完全禁用此功能。"

#: ../../whatsnew/3.14.rst:432
msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""
"（由 Pablo Galindo Salgado，Matt Wozniski 和 Ivona Stojanovic 在 :gh:"
"`131591` 中贡献）"

#: ../../whatsnew/3.14.rst:435
msgid ":pep:`768`."
msgstr ":pep:`768`。"

#: ../../whatsnew/3.14.rst:441
msgid "A new type of interpreter"
msgstr "一种新型的解释器"

#: ../../whatsnew/3.14.rst:443
msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C ``case`` statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary "
"benchmarks suggest a geometric mean of 3-5% faster on the standard "
"``pyperformance`` benchmark suite, depending on platform and architecture. "
"The baseline is Python 3.14 built with Clang 19, without this new "
"interpreter."
msgstr ""
"CPython 新增了一种解释器类型。 它在实现各个 Python 操作码的小型 C 函数之间使"
"用尾调用，而不是使用一个庞大的 C ``case`` 语句。 对于某些较新的编译器，这种解"
"释器提供了显著的性能提升。 初步测试数据显示在标准的 ``pyperformance`` 基准测"
"试套件上提速幅度的几何平均值为 3-5%，取决于具体平台和架构。 作为对比的基线是"
"使用 Clang 19 编译，未使用此新解释器的 Python 3.14。"

#: ../../whatsnew/3.14.rst:452
msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, a future release of GCC is expected to "
"support this as well."
msgstr ""
"此解释器目前仅适用于 x86-64 和 AArch64 架构上的 Clang 19 及更高版本。 不过，"
"预计 GCC 的未来版本也将支持此特性。"

#: ../../whatsnew/3.14.rst:456
msgid ""
"This feature is opt-in for now. Enabling profile-guided optimization is "
"highly recommendeded when using the new interpreter as it is the only "
"configuration that has been tested and validated for improved performance. "
"For further information, see :option:`--with-tail-call-interp`."
msgstr ""
"此特性目前为可选功能。 强烈建议在使用此新解释器时启用配置文件引导优化因为这是"
"经过测试和验证可提升性能的唯一配置。 更多相关信息，请参阅 :option:`--with-"
"tail-call-interp`。"

#: ../../whatsnew/3.14.rst:463
msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr ""
"这不应与Python函数的 `尾调用优化`__ 相混淆，该特性目前在CPython中尚未实现。"

#: ../../whatsnew/3.14.rst:466
msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr ""
"这一新型解释器属于CPython解释器的内部实现细节，完全不会改变Python程序的可见行"
"为。它能提升程序性能，但不会引发任何其他变更。"

#: ../../whatsnew/3.14.rst:472
msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this "
"in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""
"（由 Ken Jin 在 :gh:`128563` 中贡献，CPython实现方案融合了Mark Shannon、"
"Garrett Gu、Haoran Xu和Josh Haberman的设计理念。）"

#: ../../whatsnew/3.14.rst:479
msgid "Free-threaded mode improvements"
msgstr "自由线程模式的改进"

#: ../../whatsnew/3.14.rst:481
msgid ""
"CPython's free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved in Python 3.14. The implementation described in PEP "
"703 has been finished, including C API changes, and temporary workarounds in "
"the interpreter were replaced with more permanent solutions. The "
"specializing adaptive interpreter (:pep:`659`) is now enabled in free-"
"threaded mode, which along with many other optimizations greatly improves "
"its performance. The performance penalty on single-threaded code in free-"
"threaded mode is now roughly 5-10%, depending on the platform and C compiler "
"used."
msgstr ""
"CPython 的自由线程模式 (:pep:`703`)，最初在 3.13 中加入，已在 Python 3.14 中"
"得到显著改进。 PEP 703 所描述的实现已经全部完成，包括 C API 变量，并且解释器"
"中的临时处理措施已被替换为更具持久性的方案。 专门化自适应解释器 (:pep:`659`) "
"现已在自由线程模块中启用，并与其他许多优化措施一起大幅度提升了性能。 在自由线"
"程模式中对单线程代码的性能影响目前约为 5-10%，具体取决于平台和所使用的 C 编译"
"器。"

#: ../../whatsnew/3.14.rst:492
msgid ""
"From Python 3.14, when compiling extension modules for the free-threaded "
"build of CPython on Windows, the preprocessor variable ``Py_GIL_DISABLED`` "
"now needs to be specified by the build backend, as it will no longer be "
"determined automatically by the C compiler. For a running interpreter, the "
"setting that was used at compile time can be found using :func:`sysconfig."
"get_config_var`."
msgstr ""
"自 Python 3.14 开始，在 Windows 上为 CPython 的自由线程构建版编译扩展模块时，"
"预处理器变量 ``Py_GIL_DISABLED`` 现在需要由构建后端来指定，因为它将不再由 C "
"编译器自由确定。 对于运行中的解释器，可使用 :func:`sysconfig.get_config_var` "
"来查询在编译时使用的设置。"

#: ../../whatsnew/3.14.rst:498
msgid ""
"The new :option:`-X context_aware_warnings <-X>` flag controls if :ref:"
"`concurrent safe warnings control <whatsnew314-concurrent-warnings-control>` "
"is enabled. The flag defaults to true for the free-threaded build and false "
"for the GIL-enabled build."
msgstr ""

#: ../../whatsnew/3.14.rst:503
msgid ""
"A new :data:`~sys.flags.thread_inherit_context` flag has been added, which "
"if enabled means that threads created with :class:`threading.Thread` start "
"with a copy of the :class:`~contextvars.Context()` of the caller of :meth:"
"`~threading.Thread.start`.  Most significantly, this makes the warning "
"filtering context established by :class:`~warnings.catch_warnings` be "
"\"inherited\" by threads (or asyncio tasks) started within that context.  It "
"also affects other modules that use context variables, such as the :mod:"
"`decimal` context manager. This flag defaults to true for the free-threaded "
"build and false for the GIL-enabled build."
msgstr ""

#: ../../whatsnew/3.14.rst:514
msgid ""
"(Contributed by Sam Gross, Matt Page, Neil Schemenauer, Thomas Wouters, "
"Donghee Na, Kirill Podoprigora, Ken Jin, Itamar Oren, Brett Simmers, Dino "
"Viehland, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, Kumar Aditya, "
"Edgar Margffoy, and many others. Some of these contributors are employed by "
"Meta, which has continued to provide significant engineering resources to "
"support this project.)"
msgstr ""

#: ../../whatsnew/3.14.rst:525
msgid "Improved error messages"
msgstr "改进的错误消息"

#: ../../whatsnew/3.14.rst:527
msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""
"解释器现在能在检测到Python关键字拼写错误时提供有用的建议。当遇到与Python关键"
"字高度相似的单词时，解释器将在错误信息中建议正确的关键字。该功能可帮助程序员"
"快速识别和修复常见的输入错误。例如："

#: ../../whatsnew/3.14.rst:533
msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?"
msgstr ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?"

#: ../../whatsnew/3.14.rst:543
msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""
"虽然该功能主要针对最常见的拼写错误情况，但某些变体的拼写错误仍可能导致常规语"
"法错误。（由 Pablo Galindo 在 :gh:`132449` 中贡献。）"

#: ../../whatsnew/3.14.rst:547
msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""
"跟在 :keyword:`else` 块后的 :keyword:`elif` 语句现在会触发特定的错误提示。"
"（由 Steele Farnsworth 在 :gh:`129902` 中贡献。）"

#: ../../whatsnew/3.14.rst:551
msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"

#: ../../whatsnew/3.14.rst:564
msgid ""
"If a statement is passed to the :ref:`if_expr` after :keyword:`else`, or one "
"of :keyword:`pass`, :keyword:`break`, or :keyword:`continue` is passed "
"before :keyword:`if`, then the error message highlights where the :token:"
"`~python-grammar:expression` is required. (Contributed by Sergey Miryanov "
"in :gh:`129515`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:570
msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"

#: ../../whatsnew/3.14.rst:586
msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""
"当检测到未正确闭合的字符串时，错误消息会提示该字符串可能是字符串的一部分。"
"（由 Pablo Galindo 在 :gh:`88535` 中贡献。）"

#: ../../whatsnew/3.14.rst:590
msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"

#: ../../whatsnew/3.14.rst:596
msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr ""
"当字符串前缀不兼容时，错误提示现在会明确显示哪些前缀存在冲突。（由 Nikita "
"Sobolev 在 :gh:`133197` 中贡献。）"

#: ../../whatsnew/3.14.rst:600
msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"

#: ../../whatsnew/3.14.rst:608
msgid "Improved error messages when using ``as`` with incompatible targets in:"
msgstr "在以下场景中使用不兼容目标的 as 语句时，错误提示已得到改进："

#: ../../whatsnew/3.14.rst:610
msgid "Imports: ``import ... as ...``"
msgstr "导入：``import ... as ...``"

#: ../../whatsnew/3.14.rst:611
msgid "From imports: ``from ... import ... as ...``"
msgstr "From 导入：``from ... import ... as ...``"

#: ../../whatsnew/3.14.rst:612
msgid "Except handlers: ``except ... as ...``"
msgstr "Except 处理器：``except ... as ...``"

#: ../../whatsnew/3.14.rst:613
msgid "Pattern-match cases: ``case ... as ...``"
msgstr "模式匹配 case 语句：``case ... as ...``"

#: ../../whatsnew/3.14.rst:615
msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and :gh:"
"`123440`.)"
msgstr ""
"（由 Nikita Sobolev 在 :gh:`123539`、:gh:`123562` 和 :gh:`123440` 中贡献。）"

#: ../../whatsnew/3.14.rst:617
msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""
"尝试向 :class:`dict` 或 :class:`set` 添加不可哈希类型的实例时，错误提示信息已"
"改进。（由 CF Bolz-Tereick 和 Victor Stinner 在 :gh:`132828` 中贡献。）"

#: ../../whatsnew/3.14.rst:621
msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"

#: ../../whatsnew/3.14.rst:639
msgid ""
"Improved error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of :keyword:"
"`with`, and vice versa for the asynchronous context manager protocol. "
"(Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""
"当使用 :keyword:`async with` 而非 :keyword:`with` 进入支持同步上下文管理器协"
"议的对象时，错误提示信息已改进。反之，对于异步上下文管理器协议的情况也做了相"
"应优化。（由 Bénédikt Tran 在 :gh:`128398` 中贡献。）"

#: ../../whatsnew/3.14.rst:649
msgid ":pep:`784`: Zstandard support in the standard library"
msgstr ""

#: ../../whatsnew/3.14.rst:651
msgid ""
"The new :mod:`!compression` package contains modules :mod:`!compression."
"lzma`, :mod:`!compression.bz2`, :mod:`!compression.gzip` and :mod:`!"
"compression.zlib` which re-export the :mod:`lzma`, :mod:`bz2`, :mod:`gzip` "
"and :mod:`zlib` modules respectively. The new import names under :mod:`!"
"compression` are the preferred names for importing these compression modules "
"from Python 3.14. However, the existing modules names have not been "
"deprecated. Any deprecation or removal of the existing compression modules "
"will occur no sooner than five years after the release of 3.14."
msgstr ""

#: ../../whatsnew/3.14.rst:660
msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing "
"Zstandard compressed archives has been added to the :mod:`tarfile`, :mod:"
"`zipfile`, and :mod:`shutil` modules."
msgstr ""
"新引入的 :mod:`!compression.zstd` 模块通过绑定 `Meta的zstd库 <https://"
"facebook.github.io/zstd/>`__ 提供了Zstandard格式的压缩和解压API。Zstandard是"
"一种被广泛采用、高效且快速的压缩格式。除了 :mod:`!compression.zstd` 中引入的"
"API外，对Zstandard压缩归档文件的读写支持也已添加到 :mod:`tarfile`、:mod:"
"`zipfile` 和 :mod:`shutil` 模块中。"

#: ../../whatsnew/3.14.rst:668
msgid "Here's an example of using the new module to compress some data:"
msgstr "下面是一个使用新模块压缩数据的示例："

#: ../../whatsnew/3.14.rst:670
msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"compressed = zstd.compress(data)\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"compressed = zstd.compress(data)\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"

#: ../../whatsnew/3.14.rst:680
msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and :mod:"
"`!bz2` modules."
msgstr "可以看出，该API与 :mod:`!lzma` 和 :mod:`!bz2` 模块的API类似。"

#: ../../whatsnew/3.14.rst:683
msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`.)"
msgstr ""
"（由 Emma Harper Smith、Adam Turner、Gregory P. Smith、Tomas Roun、Victor "
"Stinner 和 Rogdham 在 :gh:`132983` 中贡献。）"

#: ../../whatsnew/3.14.rst:686
msgid ":pep:`784`."
msgstr ":pep:`784`。"

#: ../../whatsnew/3.14.rst:692
msgid "Asyncio introspection capabilities"
msgstr "asyncio 内省能力"

#: ../../whatsnew/3.14.rst:694
msgid ""
"Added a new command-line interface to inspect running Python processes using "
"asynchronous tasks, available via ``python -m asyncio ps PID`` or ``python -"
"m asyncio pstree PID``."
msgstr ""
"新增了一个使用异步任务来检查正在运行的 Python 进程的命令行界面，可通过 "
"``python -m asyncio ps PID`` 或 ``python -m asyncio pstree PID`` 来使用。"

#: ../../whatsnew/3.14.rst:698
msgid ""
"The ``ps`` subcommand inspects the given process ID (PID) and displays "
"information about currently running asyncio tasks. It outputs a task table: "
"a flat listing of all tasks, their names, their coroutine stacks, and which "
"tasks are awaiting them."
msgstr ""

#: ../../whatsnew/3.14.rst:704
msgid ""
"The ``pstree`` subcommand fetches the same information, but instead renders "
"a visual async call tree, showing coroutine relationships in a hierarchical "
"format. This command is particularly useful for debugging long-running or "
"stuck asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""

#: ../../whatsnew/3.14.rst:711
msgid "For example given this code:"
msgstr "例如给定以下代码："

#: ../../whatsnew/3.14.rst:713
msgid ""
"import asyncio\n"
"\n"
"async def play_track(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f'🎵 Finished: {track}')\n"
"\n"
"async def play_album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play_track(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          play_album('Sundowning', ['TNDNBTG', 'Levitate']),\n"
"          name='Sundowning')\n"
"        tg.create_task(\n"
"          play_album('TMBTE', ['DYWTYLM', 'Aqua Regia']),\n"
"          name='TMBTE')\n"
"\n"
"if __name__ == '__main__':\n"
"    asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def play_track(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f'🎵 Finished: {track}')\n"
"\n"
"async def play_album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play_track(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          play_album('Sundowning', ['TNDNBTG', 'Levitate']),\n"
"          name='Sundowning')\n"
"        tg.create_task(\n"
"          play_album('TMBTE', ['DYWTYLM', 'Aqua Regia']),\n"
"          name='TMBTE')\n"
"\n"
"if __name__ == '__main__':\n"
"    asyncio.run(main())"

#: ../../whatsnew/3.14.rst:738
msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr "在运行中的进程上执行该新工具将生成如下表格："

#: ../../whatsnew/3.14.rst:740
msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine "
"stack                                    awaiter "
"chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> "
"main                                                                       "
"0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50"
msgstr ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine "
"stack                                    awaiter "
"chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> "
"main                                                                       "
"0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50"

#: ../../whatsnew/3.14.rst:754
msgid "or a tree like this:"
msgstr "或生成如下树状结构："

#: ../../whatsnew/3.14.rst:756
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"

#: ../../whatsnew/3.14.rst:785
msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction:"
msgstr ""
"当检测到异步等待图中存在循环引用（可能表明存在编程问题）时，该工具将报错并列"
"出阻碍树形结构构建的循环路径："

#: ../../whatsnew/3.14.rst:789
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"

#: ../../whatsnew/3.14.rst:797
msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez "
"Macias in :gh:`91048`.)"
msgstr ""
"（由 Pablo Galindo、 Łukasz Langa、 Yury Selivanov 和 Marta Gomez Macias 在 :"
"gh:`91048` 中贡献。）"

#: ../../whatsnew/3.14.rst:804
msgid "Concurrent safe warnings control"
msgstr "并发安全的警告控制"

#: ../../whatsnew/3.14.rst:806
msgid ""
"The :class:`warnings.catch_warnings` context manager will now optionally use "
"a context variable for warning filters. This is enabled by setting the :data:"
"`~sys.flags.context_aware_warnings` flag, either with the ``-X`` command-"
"line option or an environment variable. This gives predictable warnings "
"control when using :class:`~warnings.catch_warnings` combined with multiple "
"threads or asynchronous tasks. The flag defaults to true for the free-"
"threaded build and false for the GIL-enabled build."
msgstr ""

#: ../../whatsnew/3.14.rst:814
msgid "(Contributed by Neil Schemenauer and Kumar Aditya in :gh:`130010`.)"
msgstr "（由 Neil Schemenauer 和 Kumar Aditya 在 :gh:`130010` 中贡献。）"

#: ../../whatsnew/3.14.rst:818
msgid "Other language changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.14.rst:820
msgid ""
"All Windows code pages are now supported as 'cpXXX' codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""
"现在Windows平台已支持所有Windows代码页作为 ‘cpXXX’ 编解码器使用。（由 Serhiy "
"Storchaka 在 :gh:`123803` 中贡献。）"

#: ../../whatsnew/3.14.rst:823
msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by the C standard since C99. (Contributed by Sergey B Kirpichev "
"in :gh:`69639`.)"
msgstr ""
"实现了符合C99以来C标准规范的实数与复数混合运算规则。（由 Sergey B Kirpichev "
"在 :gh:`69639` 中贡献。）"

#: ../../whatsnew/3.14.rst:827
msgid ""
"More syntax errors are now detected regardless of optimisation and the :"
"option:`-O` command-line option. This includes writes to ``__debug__``, "
"incorrect use of :keyword:`await`, and asynchronous comprehensions outside "
"asynchronous functions. For example, ``python -O -c 'assert (__debug__ := "
"1)'`` or ``python -O -c 'assert await 1'`` now produce :exc:`SyntaxError`\\ "
"s. (Contributed by Irit Katriel and Jelle Zijlstra in :gh:`122245` & :gh:"
"`121637`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:835
msgid ""
"When subclassing a pure C type, the C slots for the new type are no longer "
"replaced with a wrapped version on class creation if they are not explicitly "
"overridden in the subclass. (Contributed by Tomasz Pytel in :gh:`132284`.)"
msgstr ""
"当纯C类型派生子类时，若子类未显式重写相关方法，新建类型的C槽位将不再被替换为"
"封装版本。（由 Tomasz Pytel 在 :gh:`132284` 中贡献。）"

#: ../../whatsnew/3.14.rst:842
msgid "Built-ins"
msgstr "内置"

#: ../../whatsnew/3.14.rst:844
msgid ""
"The :meth:`bytes.fromhex` and :meth:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""
":meth:`bytes.fromhex` 和 :meth:`bytearray.fromhex` 方法现在支持 ASCII 格式"
"的 :class:`bytes` 及 :term:`字节型对象 <bytes-like object>` 作为输入参数。"
"（由 Daniel Pope 在 :gh:`129349` 中贡献。）"

#: ../../whatsnew/3.14.rst:848
msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise a :exc:`TypeError` if the argument is not a real "
"number. (Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""
"新增类方法 :meth:`float.from_number` 和 :meth:`complex.from_number`，用于将数"
"值分别转换为 :class:`float` 或 :class:`complex` 类型。若参数不是一个实数则会"
"引发 :exc:`TypeError`。（由 Serhiy Storchaka 在 :gh:`84978` 中贡献。）"

#: ../../whatsnew/3.14.rst:853
msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""
"在新式字符串格式化（通过 :func:`format` 或 :ref:`f-strings` 实现）的浮点数表"
"示类型中，现支持使用下划线和逗号作为小数部分的千位分隔符。（由 Sergey B "
"Kirpichev 在 :gh:`87790` 中贡献。）"

#: ../../whatsnew/3.14.rst:858
msgid ""
"The :func:`int` function no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to :func:`!int` must implement "
"either :meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by "
"Mark Dickinson in :gh:`119743`.)"
msgstr ""
":func:`int` 函数不再委托给 :meth:`~object.__trunc__`。 希望支持转换为 :func:"
"`!int` 的类必须实现 :meth:`~object.__int__` 或 :meth:`~object.__index__`。 "
"（由 Mark Dickinson 在 :gh:`119743` 中贡献。）"

#: ../../whatsnew/3.14.rst:863
msgid ""
"The :func:`map` function now has an optional keyword-only *strict* flag "
"like :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""
":func:`map` 函数现在新增了一个可选的仅限关键字参数 *strict* （与 :func:`zip` "
"类似），用于校验所有可迭代对象长度是否一致。（由 Wannes Boeykens 在 :gh:"
"`119793` 中贡献。）"

#: ../../whatsnew/3.14.rst:867
msgid ""
"The :class:`memoryview` type now supports subscription, making it a :term:"
"`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""
":class:`memoryview` 类型现已支持下标，使其成为 :term:`generic type`。 （由 "
"Brian Schubert 在 :gh:`126012` 中贡献。）"

#: ../../whatsnew/3.14.rst:871
msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a :exc:"
"`TypeError`. This has raised a :exc:`DeprecationWarning` since Python 3.9. "
"(Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""
"在布尔上下文中使用 :data:`NotImplemented` 现在会引发 :exc:`TypeError` 异常。"
"该用法自 Python 3.9 起已引发 :exc:`DeprecationWarning` 弃用警告。（由 Jelle "
"Zijlstra 在 :gh:`118767` 中贡献。）"

#: ../../whatsnew/3.14.rst:876
msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in :gh:`130104`.)"
msgstr ""
"三参数 :func:`pow` 现在会在必要时尝试调用 :meth:`~object.__rpow__` 方法。此前"
"该方法仅在双参数 :func:`!pow` 和二元幂运算符中被调用。（由 Serhiy Storchaka "
"在 :gh:`130104` 中贡献。）"

#: ../../whatsnew/3.14.rst:882
msgid ""
":class:`super` objects are now :mod:`copyable <copy>` and :mod:`pickleable "
"<pickle>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""
":class:`super` 对象现在支持 :mod:`复制 <copy>` 和 :mod:`序列化 <pickle>` 操"
"作。（由 Serhiy Storchaka 在 :gh:`125767` 中贡献。）"

#: ../../whatsnew/3.14.rst:888
msgid "Command line and environment"
msgstr "命令行与环境"

#: ../../whatsnew/3.14.rst:890
msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``."
msgstr ""
"导入时间分析标志现可通过新增的 :option:`-X importtime=2 <-X>` 选项追踪已加载"
"（'缓存'）模块。当导入此类模块时，``self`` 和 ``cumulative`` 时间值将被替换为"
"字符串 ``cached``。"

#: ../../whatsnew/3.14.rst:895
msgid ""
"Values above ``2`` for ``-X importtime`` are now reserved for future use."
msgstr "对 ``-X importtime`` 取大于 ``2`` 的值被保留供未来使用。"

#: ../../whatsnew/3.14.rst:897
msgid "(Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr "（由 Noah Kim 和 Adam Turner 在 :gh:`118655` 中贡献。）"

#: ../../whatsnew/3.14.rst:899
msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors :func:"
"`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in :gh:`103998`.)"
msgstr ""
"命令行选项 :option:`-c` 现在会在执行前自动对其代码参数进行去缩进处理，该行为"
"与 :func:`textwrap.dedent` 函数保持一致。（由 Jon Crall 和 Steven Sun 在 :gh:"
"`103998` 中贡献。）"

#: ../../whatsnew/3.14.rst:904
msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""
":option:`!-J` 不再是 Jython_ 的保留标志，目前不具任何特殊含义。（由 Adam "
"Turner 在 :gh:`133336` 中贡献。）"

#: ../../whatsnew/3.14.rst:914
msgid "PEP 758: Allow ``except`` and ``except*`` expressions without brackets"
msgstr "PEP 758: 允许不带圆括号的 ``except`` 和 ``except*`` 表达式"

#: ../../whatsnew/3.14.rst:916
msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow brackets to be omitted when there are multiple exception types and the "
"``as`` clause is not used. For example:"
msgstr ""

#: ../../whatsnew/3.14.rst:921
msgid ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print('The network has ceased to be!')"
msgstr ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print('The network has ceased to be!')"

#: ../../whatsnew/3.14.rst:928
msgid ""
"(Contributed by Pablo Galindo and Brett Cannon in :pep:`758` and :gh:"
"`131831`.)"
msgstr ""
"（由 Pablo Galindo 和 Brett Cannon 在 :pep:`758` 和 :gh:`131831` 中贡献。）"

#: ../../whatsnew/3.14.rst:934
msgid "PEP 765: Control flow in :keyword:`finally` blocks"
msgstr "PEP 765: :keyword:`finally` 代码块中的控制流"

#: ../../whatsnew/3.14.rst:936
msgid ""
"The compiler now emits a :exc:`SyntaxWarning` when a :keyword:`return`, :"
"keyword:`break`, or :keyword:`continue` statement have the effect of leaving "
"a :keyword:`finally` block. This change is specified in :pep:`765`."
msgstr ""
"编译器在检测到 :keyword:`return`、:keyword:`break` 或 :keyword:`continue` 语"
"句跳出 :keyword:`finally` 代码块时，现在将触发 :exc:`SyntaxWarning`。此项变更"
"遵循 :pep:`765` 规范。"

#: ../../whatsnew/3.14.rst:941
msgid ""
"In situations where this change is inconvenient (such as those where the "
"warnings are redundant due to code linting), the :ref:`warning filter "
"<warning-filter>` can be used to turn off all syntax warnings by adding "
"``ignore::SyntaxWarning`` as a filter. This can be specified in combination "
"with a filter that converts other warnings to errors (for example, passing "
"``-Werror -Wignore::SyntaxWarning`` as CLI options, or setting "
"``PYTHONWARNINGS=error,ignore::SyntaxWarning``)."
msgstr ""

#: ../../whatsnew/3.14.rst:949
msgid ""
"Note that applying such a filter at runtime using the :mod:`warnings` module "
"will only suppress the warning in code that is compiled *after* the filter "
"is adjusted. Code that is compiled prior to the filter adjustment (for "
"example, when a module is imported) will still emit the syntax warning."
msgstr ""

#: ../../whatsnew/3.14.rst:954
msgid "(Contributed by Irit Katriel in :gh:`130080`.)"
msgstr "（由 Irit Katriel 在 :gh:`130080` 中贡献。）"

#: ../../whatsnew/3.14.rst:960
msgid "Incremental garbage collection"
msgstr "增量式垃圾回收"

#: ../../whatsnew/3.14.rst:962
msgid ""
"The cycle garbage collector is now incremental. This means that maximum "
"pause times are reduced by an order of magnitude or more for larger heaps."
msgstr ""
"循环垃圾回收器现在采用增量式处理。这意味着对于较大的堆内存，最大暂停时间将减"
"少一个数量级或更多。"

#: ../../whatsnew/3.14.rst:966
msgid ""
"There are now only two generations: young and old. When :func:`gc.collect` "
"is not called directly, the GC is invoked a little less frequently. When "
"invoked, it collects the young generation and an increment of the old "
"generation, instead of collecting one or more generations."
msgstr ""
"现在垃圾回收机制仅包含两个代际：新生代和老年代。当未直接调用 :func:`gc."
"collect` 函数时，垃圾回收器的触发频率会稍有降低。而在调用时，它会回收新生代以"
"及部分老年代对象（即增量回收），而非一次性回收一个或多个完整的代际。"

#: ../../whatsnew/3.14.rst:972
msgid "The behavior of :func:`!gc.collect` changes slightly:"
msgstr ":func:`!gc.collect` 函数的行为略有变化："

#: ../../whatsnew/3.14.rst:974 ../../whatsnew/3.14.rst:3267
msgid ""
"``gc.collect(1)``: Performs an increment of garbage collection, rather than "
"collecting generation 1."
msgstr "``gc.collect(1)``：执行一次增量式垃圾回收，而非专门回收第1代对象。"

#: ../../whatsnew/3.14.rst:976 ../../whatsnew/3.14.rst:3269
msgid "Other calls to :func:`!gc.collect` are unchanged."
msgstr "对 :func:`!gc.collect` 的其他调用保持不变。"

#: ../../whatsnew/3.14.rst:978 ../../whatsnew/3.14.rst:2236
msgid "(Contributed by Mark Shannon in :gh:`108362`.)"
msgstr "（由 Mark Shannon 在 :gh:`108362` 中贡献。）"

#: ../../whatsnew/3.14.rst:982
msgid "Default interactive shell"
msgstr "默认的交互式 shell"

#: ../../whatsnew/3.14.rst:986
msgid ""
"The default :term:`interactive` shell now highlights Python syntax. The "
"feature is enabled by default, save if :envvar:`PYTHON_BASIC_REPL` or any "
"other environment variable that disables colour is set. See :ref:`using-on-"
"controlling-color` for details."
msgstr ""
"默认的 :term:`interactive` shell 现已支持 Python 语法高亮。 此特性默认启用，"
"除非设置了 :envvar:`PYTHON_BASIC_REPL` 或任何其他禁用颜色的环境变量。 请参"
"阅 :ref:`using-on-controlling-color` 了解详情。"

#: ../../whatsnew/3.14.rst:991
msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and exclusively uses the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API :func:`!"
"_colorize.set_theme`. This can be called interactively or in the :envvar:"
"`PYTHONSTARTUP` script. Note that this function has no stability guarantees, "
"and may change or be removed."
msgstr ""

#: ../../whatsnew/3.14.rst:999
msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr "（由 Łukasz Langa 在 :gh:`131507` 中贡献。）"

#: ../../whatsnew/3.14.rst:1001
msgid ""
"The default :term:`interactive` shell now supports import auto-completion. "
"This means that typing ``import co`` and pressing :kbd:`<Tab>` will suggest "
"modules starting with ``co``. Similarly, typing ``from concurrent import i`` "
"will suggest submodules of ``concurrent`` starting with ``i``. Note that "
"autocompletion of module attributes is not currently supported. (Contributed "
"by Tomas Roun in :gh:`69605`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1010
msgid "New modules"
msgstr "新增模块"

#: ../../whatsnew/3.14.rst:1012
msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :ref:`PEP 749 <whatsnew314-deferred-annotations>` for more details. "
"(Contributed by Jelle Zijlstra in :gh:`119180`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1017
msgid ""
":mod:`compression` (including :mod:`compression.zstd`): A package for "
"compression-related modules, including a new module to support the Zstandard "
"compression format. See :ref:`PEP 784 <whatsnew314-zstandard>` for more "
"details. (Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, "
"Tomas Roun, Victor Stinner, and Rogdham in :gh:`132983`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1024
msgid ""
":mod:`concurrent.interpreters`: Support for multiple interpreters in the "
"standard library. See :ref:`PEP 734 <whatsnew314-multiple-interpreters>` for "
"more details. (Contributed by Eric Snow in :gh:`134939`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1029
msgid ""
":mod:`string.templatelib`: Support for template string literals (t-strings). "
"See :ref:`PEP 750 <whatsnew314-template-string-literals>` for more details. "
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1038
msgid "Improved modules"
msgstr "改进的模块"

#: ../../whatsnew/3.14.rst:1041 ../../whatsnew/3.14.rst:2301
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.14.rst:1043
msgid ""
"The default value of the :ref:`program name <prog>` for :class:`argparse."
"ArgumentParser` now reflects the way the Python interpreter was instructed "
"to find the ``__main__`` module code. (Contributed by Serhiy Storchaka and "
"Alyssa Coghlan in :gh:`66436`.)"
msgstr ""
":class:`argparse.ArgumentParser` 的 :ref:`程序名称 <prog>` 默认值现在会反映 "
"Python 解释器定位 ``__main__`` 模块代码的方式。（由 Serhiy Storchaka 和 "
"Alyssa Coghlan 在 :gh:`66436` 中贡献。）"

#: ../../whatsnew/3.14.rst:1048
msgid ""
"Introduced the optional *suggest_on_error* parameter to :class:`argparse."
"ArgumentParser`, enabling suggestions for argument choices and subparser "
"names if mistyped by the user. (Contributed by Savannah Ostrowski in :gh:"
"`124456`.)"
msgstr ""
":class:`argparse.ArgumentParser` 新增可选形参 *suggest_on_error*，可在用户输"
"入错误时提供参数选项及子解析器名称的建议。（由 Savannah Ostrowski 在 :gh:"
"`124456` 中贡献。）"

#: ../../whatsnew/3.14.rst:1053
msgid ""
"Enable color for help text, which can be disabled with the optional *color* "
"parameter to :class:`argparse.ArgumentParser`. This can also be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Hugo van Kemenade in :gh:`130645`.)"
msgstr ""
"为帮助文本启用颜色显示，你可以通过向 :class:`argparse.ArgumentParser` 传递可"
"选的 *color* 形参来禁用此功能。此外，该功能还可以通过 :ref:`环境变量 <using-"
"on-controlling-color>` 进行控制。（由 Hugo van Kemenade 在 :gh:`130645` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:1061 ../../whatsnew/3.14.rst:2320
msgid "ast"
msgstr "ast（抽象语法树）"

#: ../../whatsnew/3.14.rst:1063
msgid ""
"Add :func:`~ast.compare`, a function for comparing two ASTs. (Contributed by "
"Batuhan Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1066
msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt "
"Tran in :gh:`121141`.)"
msgstr ""
"新增对AST节点 :func:`copy.replace` 操作的支持。（由 Bénédikt Tran 在 :gh:"
"`121141` 中贡献。）"

#: ../../whatsnew/3.14.rst:1069
msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr ""
"在优化级别为2时，文档字符串现会从优化后的AST中移除。（由 Irit Katriel 在 :gh:"
"`123958` 中贡献。）"

#: ../../whatsnew/3.14.rst:1072
msgid ""
"The :func:`repr` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1075
msgid ""
"When called with an AST as input, the :func:`~ast.parse` function now always "
"verifies that the root node type is appropriate. (Contributed by Irit "
"Katriel in :gh:`130139`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1079
msgid ""
"Add new options to the command-line interface: :option:`--feature-version "
"<ast --feature-version>`, :option:`--optimize <ast --optimize>`, and :option:"
"`--show-empty <ast --show-empty>`. (Contributed by Semyon Moroz in :gh:"
"`133367`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1087 ../../whatsnew/3.14.rst:2162
#: ../../whatsnew/3.14.rst:2351
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.14.rst:1089
msgid ""
"The function and methods named :func:`!create_task` now take an arbitrary "
"list of keyword arguments. All keyword arguments are passed to the :class:"
"`~asyncio.Task` constructor or the custom task factory. (See :meth:`~asyncio."
"loop.set_task_factory` for details.) The ``name`` and ``context`` keyword "
"arguments are no longer special; the name should now be set using the "
"``name`` keyword argument of the factory, and ``context`` may be ``None``."
msgstr ""
"名为 :func:`!create_task` 的函数及方法现在接受任意关键字参数列表，所有关键字"
"参数都将传递给 :class:`~asyncio.Task` 构造器或自定义任务工厂（详见 :meth:"
"`~asyncio.loop.set_task_factory`）。``name`` 和 ``context`` 关键字参数不再具"
"有特殊处理逻辑——名称现在应通过工厂的 ``name`` 关键字参数设置，而 ``context`` "
"可设为 ``None``。"

#: ../../whatsnew/3.14.rst:1097
msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`."
msgstr ""

#: ../../whatsnew/3.14.rst:1102
msgid "(Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1104
msgid ""
"There are two new utility functions for introspecting and printing a "
"program's call graph: :func:`~asyncio.capture_call_graph` and :func:"
"`~asyncio.print_call_graph`. See :ref:`Asyncio introspection capabilities "
"<whatsnew314-asyncio-introspection>` for more details. (Contributed by Yury "
"Selivanov, Pablo Galindo Salgado, and Łukasz Langa in :gh:`91048`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1114
msgid "calendar"
msgstr "calendar（日历）"

#: ../../whatsnew/3.14.rst:1118
msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s :ref:"
"`command-line <calendar-cli>` text output. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Hugo "
"van Kemenade in :gh:`128317`.)"
msgstr ""
"默认情况下，:mod:`calendar` 模块的 :ref:`命令行 <calendar-cli>` 文本输出会以"
"彩色高亮显示当日日期，该功能可通过 :ref:`环境变量 <using-on-controlling-"
"color>` 控制。（由 Hugo van Kemenade 在 :gh:`128317` 中贡献。）"

#: ../../whatsnew/3.14.rst:1126
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.14.rst:1130
msgid ""
"Add a new executor class, :class:`~concurrent.futures."
"InterpreterPoolExecutor`, which exposes multiple Python interpreters in the "
"same process ('subinterpreters') to Python code. This uses a pool of "
"independent Python interpreters to execute calls asynchronously."
msgstr ""

#: ../../whatsnew/3.14.rst:1136
msgid ""
"This is separate from the new :mod:`~concurrent.interpreters` module "
"introduced by :ref:`PEP 734 <whatsnew314-multiple-interpreters>`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1142
msgid ""
"On Unix platforms other than macOS, :ref:`'forkserver' <multiprocessing-"
"start-method-forkserver>` is now the default :ref:`start method "
"<multiprocessing-start-methods>` for :class:`~concurrent.futures."
"ProcessPoolExecutor` (replacing :ref:`'fork' <multiprocessing-start-method-"
"fork>`). This change does not affect Windows or macOS, where :ref:`'spawn' "
"<multiprocessing-start-method-spawn>` remains the default start method."
msgstr ""

#: ../../whatsnew/3.14.rst:1150
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it by supplying a multiprocessing context *mp_context* to :class:"
"`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""
"如需使用与线程不兼容的 *fork* 启动方法，必须通过向 :class:`~concurrent."
"futures.ProcessPoolExecutor` 提供 *mp_context* 多进程上下文参数来显式指定。"

#: ../../whatsnew/3.14.rst:1154 ../../whatsnew/3.14.rst:1604
msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""
"请参阅 :ref:`forkserver 限制说明 <multiprocessing-programming-forkserver>` 了"
"解与 *fork* 方法的差异信息，以及此项变更对存在以下情况的现有代码可能产生的影"
"响：(1) 使用可变全局共享变量 (2) 包含无法被 :mod:`pickle <pickle>` 自动序列化"
"的共享对象。"

#: ../../whatsnew/3.14.rst:1159 ../../whatsnew/3.14.rst:1609
msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr "（由 Gregory P. Smith 在 :gh:`84559` 中贡献）"

#: ../../whatsnew/3.14.rst:1161
msgid ""
"Add two new methods to :class:`~concurrent.futures.ProcessPoolExecutor`, :"
"meth:`~concurrent.futures.ProcessPoolExecutor.terminate_workers` and :meth:"
"`~concurrent.futures.ProcessPoolExecutor.kill_workers`, as ways to terminate "
"or kill all living worker processes in the given pool. (Contributed by "
"Charles Machalow in :gh:`130849`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1167
msgid ""
"Add the optional *buffersize* parameter to :meth:`Executor.map <concurrent."
"futures.Executor.map>` to limit the number of submitted tasks whose results "
"have not yet been yielded. If the buffer is full, iteration over the "
"*iterables* pauses until a result is yielded from the buffer. (Contributed "
"by Enzo Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1176
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.14.rst:1178
msgid ""
":mod:`!configparser` will no longer write config files it cannot read, to "
"improve security. Attempting to :meth:`~configparser.ConfigParser.write` "
"keys containing delimiters or beginning with the section header pattern will "
"raise an :class:`~configparser.InvalidWriteError`. (Contributed by Jacob "
"Lincoln in :gh:`129270`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1187
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.14.rst:1189
msgid ""
"Support the :term:`context manager` protocol for :class:`~contextvars.Token` "
"objects. (Contributed by Andrew Svetlov in :gh:`129889`.)"
msgstr ""
"已为 :class:`~contextvars.Token` 对象提供 :term:`context manager` 协议支持。 "
"（由 Andrew Svetlov 在 :gh:`129889` 中贡献。）"

#: ../../whatsnew/3.14.rst:1195
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.14.rst:1197
msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in :"
"class:`~ctypes.Structure` and :class:`~ctypes.Union` objects is now a closer "
"match to platform defaults (GCC/Clang or MSVC). In particular, fields no "
"longer overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1203
msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match "
"a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""
"现在可通过设置 :attr:`.Structure._layout_` 类属性来匹配非默认ABI。（由 Petr "
"Viktorin 在 :gh:`97702` 中贡献。）"

#: ../../whatsnew/3.14.rst:1207
msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin "
"in :gh:`128715`.)"
msgstr ""
":class:`~ctypes.Structure`/:class:`~ctypes.Union` 的字段描述符类现以 :class:"
"`~ctypes.CField` 形式提供，并新增了辅助调试和内省的属性。（由 Petr Viktorin "
"在 :gh:`128715` 中贡献。）"

#: ../../whatsnew/3.14.rst:1212
msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""
"在Windows平台上，:exc:`~ctypes.COMError` 异常现已公开。（由 Jun Komoda 在 :"
"gh:`126686` 中贡献。）"

#: ../../whatsnew/3.14.rst:1215
msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""
"在Windows平台上，:func:`~ctypes.CopyComPointer` 函数现已公开。（由 Jun "
"Komoda 在 :gh:`127275` 中贡献。）"

#: ../../whatsnew/3.14.rst:1218
msgid ""
"Add :func:`~ctypes.memoryview_at`, a function to create a :class:"
"`memoryview` object that refers to the supplied pointer and length. This "
"works like :func:`ctypes.string_at` except it avoids a buffer copy, and is "
"typically useful when implementing pure Python callback functions that are "
"passed dynamically-sized buffers. (Contributed by Rian Hunter in :gh:"
"`112018`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1225
msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, :class:`~ctypes."
"c_double_complex`, and :class:`~ctypes.c_longdouble_complex`, are now "
"available if both the compiler and the ``libffi`` library support complex C "
"types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1231
msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""
"新增 :func:`ctypes.util.dllist` 函数，用于列出当前进程已加载的共享库。（由 "
"Brian Ward 在 :gh:`119349` 中贡献。）"

#: ../../whatsnew/3.14.rst:1235
msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`_CData.__pointer_type__ <ctypes."
"_CData.__pointer_type__>` attribute of the corresponding :mod:`!ctypes` "
"types. This will stop the cache from growing without limits in some "
"situations. (Contributed by Sergey Miryanov in :gh:`100926`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1242
msgid ""
"The :class:`~ctypes.py_object` type now supports subscription, making it a :"
"term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""
"现在 :class:`~ctypes.py_object` 类型已支持下标，使其成为 :term:`generic "
"type`。 （由 Brian Schubert 在 :gh:`132168` 中贡献。）"

#: ../../whatsnew/3.14.rst:1246
msgid ""
":mod:`!ctypes` now supports :term:`free-threading builds <free threading>`. "
"(Contributed by Kumar Aditya and Peter Bierma in :gh:`127945`.)"
msgstr ""
"现在 :mod:`!ctypes` 已支持 :term:`自由线程构建版 <free threading>`。 （由 "
"Kumar Aditya 和 Peter Bierma 在 :gh:`127945` 中贡献。）"

#: ../../whatsnew/3.14.rst:1251
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.14.rst:1253
msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the :"
"func:`~curses.use_default_colors` function which allows changing the color "
"pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""
"增加 :func:`~curses.assume_default_colors` 函数，是将 :func:`~curses."
"use_default_colors` 函数改进为允许修改颜色对 ``0``。 （由 Serhiy Storchaka "
"在 :gh:`133139` 中贡献。）"

#: ../../whatsnew/3.14.rst:1260
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.14.rst:1262
msgid ""
"Add the :meth:`~datetime.date.strptime` method to the :class:`datetime.date` "
"and :class:`datetime.time` classes. (Contributed by Wannes Boeykens in :gh:"
"`41431`.)"
msgstr ""
"为 :class:`datetime.date` 和 and :class:`datetime.time` 类增加 :meth:"
"`~datetime.date.strptime` 方法。 （由 Wannes Boeykens 在 :gh:`41431` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:1268
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.14.rst:1270
msgid ""
"Add :meth:`.Decimal.from_number` as an alternative constructor for :class:"
"`~decimal.Decimal`. (Contributed by Serhiy Storchaka in :gh:`121798`.)"
msgstr ""
"增加 :meth:`.Decimal.from_number` 作为 :class:`~decimal.Decimal` 的替代性构造"
"器。 （由 Serhiy Storchaka 在 :gh:`121798` 中贡献。）"

#: ../../whatsnew/3.14.rst:1274
msgid ""
"Expose :func:`~decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""
"对外公开 :func:`~decimal.IEEEContext` 以支持创建对应与 IEEE 754 (2008) 十进制"
"交换格式的上下文。 （由 Sergey B Kirpichev 在 :gh:`53032` 中贡献。）"

#: ../../whatsnew/3.14.rst:1280 ../../whatsnew/3.14.rst:2198
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.14.rst:1282
msgid ""
"Comparison pages with highlighted changes generated by the :class:`~difflib."
"HtmlDiff` class now support 'dark mode'. (Contributed by Jiahao Li in :gh:"
"`129939`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1288
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.14.rst:1290
msgid ""
"Add support for rendering full source location information of :class:"
"`instructions <dis.Instruction>`, rather than only the line number. This "
"feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""
"新增对 :class:`指令 <dis.Instruction>` 完整源码位置信息（而非仅行号）的渲染支"
"持，该特性通过 *show_positions* 关键字参数添加到以下接口："

#: ../../whatsnew/3.14.rst:1295
msgid ":class:`dis.Bytecode`"
msgstr ":class:`dis.Bytecode`"

#: ../../whatsnew/3.14.rst:1296
msgid ":func:`dis.dis`"
msgstr ":func:`dis.dis`"

#: ../../whatsnew/3.14.rst:1297
msgid ":func:`dis.distb`"
msgstr ":func:`dis.distb`"

#: ../../whatsnew/3.14.rst:1298
msgid ":func:`dis.disassemble`"
msgstr ":func:`dis.disassemble`"

#: ../../whatsnew/3.14.rst:1300
msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""
"该特性同时通过 :option:`dis --show-positions` 命令行选项提供。（由 Bénédikt "
"Tran 在 :gh:`123165` 中贡献。）"

#: ../../whatsnew/3.14.rst:1303
msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""
"新增 :option:`dis --specialized` 命令行选项，用于显示特化字节码。（由 "
"Bénédikt Tran 在 :gh:`127413` 中贡献。）"

#: ../../whatsnew/3.14.rst:1309
msgid "errno"
msgstr "errno"

#: ../../whatsnew/3.14.rst:1311
msgid ""
"Add the :data:`~errno.EHWPOISON` error code constant. (Contributed by James "
"Roy in :gh:`126585`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1316
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.14.rst:1318
msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via the new :func:`~faulthandler.dump_c_stack` "
"function or via the *c_stack* argument in :func:`faulthandler.enable`. "
"(Contributed by Peter Bierma in :gh:`127604`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1326
msgid "fnmatch"
msgstr "fnmatch"

#: ../../whatsnew/3.14.rst:1328
msgid ""
"Add :func:`~fnmatch.filterfalse`, a function to reject names matching a "
"given pattern. (Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1334
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.14.rst:1336
msgid ""
"A :class:`~fractions.Fraction` object may now be constructed from any object "
"with the :meth:`!as_integer_ratio` method. (Contributed by Serhiy Storchaka "
"in :gh:`82017`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1340
msgid ""
"Add :meth:`.Fraction.from_number` as an alternative constructor for :class:"
"`~fractions.Fraction`. (Contributed by Serhiy Storchaka in :gh:`121797`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1346
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.14.rst:1348
msgid ""
"Add the :data:`~functools.Placeholder` sentinel. This may be used with the :"
"func:`~functools.partial` or :func:`~functools.partialmethod` functions to "
"reserve a place for positional arguments in the returned :ref:`partial "
"object <partial-objects>`. (Contributed by Dominykas Grigonis in :gh:"
"`119127`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1355
msgid ""
"Allow the *initial* parameter of :func:`~functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1361
msgid "getopt"
msgstr "getopt"

#: ../../whatsnew/3.14.rst:1363
msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr ""
"新增对可选参数选项的支持。（由 Serhiy Storchaka 在 :gh:`126374` 中贡献。）"

#: ../../whatsnew/3.14.rst:1366
msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr ""
"新增对按顺序返回混合选项和非选项参数的支持。（由 Serhiy Storchaka 在 :gh:"
"`126390` 中贡献。）"

#: ../../whatsnew/3.14.rst:1371
msgid "getpass"
msgstr "getpass"

#: ../../whatsnew/3.14.rst:1373
msgid ""
"Support keyboard feedback in the :func:`~getpass.getpass` function via the "
"keyword-only optional argument *echo_char*. Placeholder characters are "
"rendered whenever a character is entered, and removed when a character is "
"deleted. (Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1381
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.14.rst:1383
msgid ""
"Allow :meth:`.TopologicalSorter.prepare` to be called more than once as long "
"as sorting has not started. (Contributed by Daniel Pope in :gh:`130914`.)"
msgstr ""
"允许在排序尚未开始的情况下多次调用 :meth:`.TopologicalSorter.prepare`。 （由 "
"Daniel Pope 在 :gh:`130914` 中贡献。）"

#: ../../whatsnew/3.14.rst:1389
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.14.rst:1391
msgid ""
"The :mod:`!heapq` module has improved support for working with max-heaps, "
"via the following new functions:"
msgstr "通过下列新增函数，:mod:`!heapq` 模块改进了对最大堆的支持："

#: ../../whatsnew/3.14.rst:1394
msgid ":func:`~heapq.heapify_max`"
msgstr ":func:`~heapq.heapify_max`"

#: ../../whatsnew/3.14.rst:1395
msgid ":func:`~heapq.heappush_max`"
msgstr ":func:`~heapq.heappush_max`"

#: ../../whatsnew/3.14.rst:1396
msgid ":func:`~heapq.heappop_max`"
msgstr ":func:`~heapq.heappop_max`"

#: ../../whatsnew/3.14.rst:1397
msgid ":func:`~heapq.heapreplace_max`"
msgstr ":func:`~heapq.heapreplace_max`"

#: ../../whatsnew/3.14.rst:1398
msgid ":func:`~heapq.heappushpop_max`"
msgstr ":func:`~heapq.heappushpop_max`"

#: ../../whatsnew/3.14.rst:1402
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.14.rst:1404
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of "
"HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""
"新增基于 `HACL* <https://github.com/hacl-star/hacl-star/>`__ 项目形式化验证代"
"码的 HMAC (:rfc:`2104`) 内置实现。当 OpenSSL 的 HMAC 实现不可用时，该实现将作"
"为备用方案。（由 Bénédikt Tran 在 :gh:`99108` 中贡献。）"

#: ../../whatsnew/3.14.rst:1412
msgid "http"
msgstr "http"

#: ../../whatsnew/3.14.rst:1414
msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""
"由 :mod:`http.server` 模块生成的目录列表和错误页面允许浏览器应用其默认暗模"
"式。（由 Yorik Hansen 在 :gh:`123430` 中贡献。）"

#: ../../whatsnew/3.14.rst:1418
msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the :"
"class:`http.server.HTTPSServer` class. This functionality is exposed by the "
"command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""
":mod:`http.server` 模块现在支持使用 :class:`http.server.HTTPSServer` 类通过 "
"HTTPS 提供服务。此功能通过命令行界面 (``python -m http.server``) 通过以下选项"
"公开："

#: ../../whatsnew/3.14.rst:1423
msgid ""
":option:`--tls-cert \\<path\\> <http.server --tls-cert>`: Path to the TLS "
"certificate file."
msgstr ""
":option:`--tls-cert \\<path\\> <http.server --tls-cert>`: TLS 证书文件的路"
"径。"

#: ../../whatsnew/3.14.rst:1425
msgid ""
":option:`--tls-key \\<path\\> <http.server --tls-key>`: Optional path to the "
"private key file."
msgstr ""
":option:`--tls-key \\<path\\> <http.server --tls-key>`: 可选的私钥文件路径。"

#: ../../whatsnew/3.14.rst:1427
msgid ""
":option:`--tls-password-file \\<path\\> <http.server --tls-password-file>`: "
"Optional path to the password file for the private key."
msgstr ""
":option:`--tls-password-file \\<path\\> <http.server --tls-password-file>`: "
"可选的私钥密码文件路径。"

#: ../../whatsnew/3.14.rst:1430
msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr "（由 Semyon Moroz 在 :gh:`85162` 中贡献。）"

#: ../../whatsnew/3.14.rst:1434
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.14.rst:1436
msgid ""
"Add :meth:`.IMAP4.idle`, implementing the IMAP4 ``IDLE`` command as defined "
"in :rfc:`2177`. (Contributed by Forest in :gh:`55454`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1442
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.14.rst:1444
msgid ""
":func:`~inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations. "
"(Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1448
msgid ""
":meth:`.Signature.format` takes a new argument *unquote_annotations*. If "
"true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1453
msgid ""
"Add function :func:`~inspect.ispackage` to determine whether an object is a :"
"term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1459 ../../whatsnew/3.14.rst:2240
msgid "io"
msgstr "io"

#: ../../whatsnew/3.14.rst:1461
msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a :exc:"
"`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""
"使用 ``read`` 从非阻塞流读取文本时，如果操作无法立即返回字节，现在可能会引"
"发 :exc:`BlockingIOError`。（由 Giovanni Siragusa 在 :gh:`109523` 中贡献。）"

#: ../../whatsnew/3.14.rst:1465
msgid ""
"Add the :class:`~io.Reader` and :class:`~io.Writer` protocols as simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, :class:`typing."
"TextIO`, and :class:`typing.BinaryIO`. (Contributed by Sebastian Rittau in :"
"gh:`127648`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1472
msgid "json"
msgstr "json"

#: ../../whatsnew/3.14.rst:1474
msgid ""
"Add exception notes for JSON serialization errors that allow identifying the "
"source of the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1478
msgid ""
"Allow using the :mod:`json` module as a script using the :option:`-m` "
"switch: :program:`python -m json`. This is now preferred to :program:`python "
"-m json.tool`, which is :term:`soft deprecated`. See the :ref:`JSON command-"
"line interface <json-commandline>` documentation. (Contributed by Trey "
"Hunner in :gh:`122873`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1485
msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Tomas "
"Roun in :gh:`131952`.)"
msgstr ""
"默认情况下，:ref:`JSON 命令行界面 <json-commandline>` 的输出会以彩色突出显"
"示。这可以通过 :ref:`环境变量 <using-on-controlling-color>` 进行控制。（由 "
"Tomas Roun 在 :gh:`131952` 中贡献。）"

#: ../../whatsnew/3.14.rst:1493
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.14.rst:1495
msgid ""
":func:`~linecache.getline` can now retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1500
msgid "logging.handlers"
msgstr "logging.handlers"

#: ../../whatsnew/3.14.rst:1502
msgid ""
":class:`~logging.handlers.QueueListener` objects now support the :term:"
"`context manager` protocol. (Contributed by Charles Machalow in :gh:"
"`132106`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1506
msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` 现在如果监"
"听器已启动，会引发 :exc:`RuntimeError`。（由 Charles Machalow 在 :gh:"
"`132106` 中贡献。）"

#: ../../whatsnew/3.14.rst:1512
msgid "math"
msgstr "math"

#: ../../whatsnew/3.14.rst:1514
msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""
"为模块中的域错误添加了更详细的错误消息。（由 Charlie Zhao 和 Sergey B "
"Kirpichev 在 :gh:`101410` 中贡献。）"

#: ../../whatsnew/3.14.rst:1519
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.14.rst:1521
msgid ""
"Add a public :ref:`command-line <mimetypes-cli>` for the module, invoked "
"via :program:`python -m mimetypes`. (Contributed by Oleg Iarygin and Hugo "
"van Kemenade in :gh:`93096`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1525
msgid "Add several new MIME types based on RFCs and common usage:"
msgstr "增加了一些基于 RFC 和通常用例的新 MIME 类型："

#: ../../whatsnew/3.14.rst:0
msgid "Microsoft and :rfc:`8081` MIME types for fonts"
msgstr "用于字体的 Microsoft 和 :rfc:`8081` MIME 类型"

#: ../../whatsnew/3.14.rst:1529
msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr "嵌入式 OpenType： ``application/vnd.ms-fontobject``"

#: ../../whatsnew/3.14.rst:1530
msgid "OpenType Layout (OTF) ``font/otf``"
msgstr "OpenType 布局(OTF) ``font/otf``"

#: ../../whatsnew/3.14.rst:1531
msgid "TrueType: ``font/ttf``"
msgstr "TrueType: ``font/ttf``"

#: ../../whatsnew/3.14.rst:1532
msgid "WOFF 1.0 ``font/woff``"
msgstr "WOFF 1.0 ``font/woff``"

#: ../../whatsnew/3.14.rst:1533
msgid "WOFF 2.0 ``font/woff2``"
msgstr "WOFF 2.0 ``font/woff2``"

#: ../../whatsnew/3.14.rst:0
msgid ""
":rfc:`9559` MIME types for Matroska audiovisual data container structures"
msgstr "用于 Matroska 音视频数据容器结构的 :rfc:`9559` MIME 类型"

#: ../../whatsnew/3.14.rst:1538
msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr "仅有音频，无视频： ``audio/matroska`` (``.mka``)"

#: ../../whatsnew/3.14.rst:1539
msgid "video: ``video/matroska`` (``.mkv``)"
msgstr "视频：``video/matroska`` (``.mkv``)"

#: ../../whatsnew/3.14.rst:1540
msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr "立体视频: ``video/matroska-3d`` (``.mk3d``)"

#: ../../whatsnew/3.14.rst:0
msgid "Images with RFCs"
msgstr "基于 RFC 的图像"

#: ../../whatsnew/3.14.rst:1544
msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ":rfc:`1494`: CCITT Group 3 (``.g3``)"

#: ../../whatsnew/3.14.rst:1545
msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"

#: ../../whatsnew/3.14.rst:1546
msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound (``."
"jpm``)"
msgstr ""
":rfc:`3745`: JPEG 2000 (``.jp2``)、扩展格式 (``.jpx``) 和复合格式 (``.jpm``)"

#: ../../whatsnew/3.14.rst:1547
msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ":rfc:`3950`: 标签图像文件格式传真扩展，TIFF-FX (``.tfx``)"

#: ../../whatsnew/3.14.rst:1548
msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ":rfc:`4047`: 灵活图像传输系统 (``.fits``)"

#: ../../whatsnew/3.14.rst:1549
msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ":rfc:`7903`: 增强型图元文件 (``.emf``) 和 Windows 图元文件 (``.wmf``)"

#: ../../whatsnew/3.14.rst:0
msgid "Other MIME type additions and changes"
msgstr "其他 MIME 类型的增加和改变"

#: ../../whatsnew/3.14.rst:1553
msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""
":rfc:`2361`: 将 ``.avi`` 的类型更改为 ``video/vnd.avi``，将 ``.wav`` 的类型更"
"改为 ``audio/vnd.wave``"

#: ../../whatsnew/3.14.rst:1555
msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ":rfc:`4337`：添加 MPEG-4 ``audio/mp4`` (``.m4a``)"

#: ../../whatsnew/3.14.rst:1556
msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ":rfc:`5334`：添加 Ogg 媒体（``.oga``，``.ogg`` 和 ``.ogx``）"

#: ../../whatsnew/3.14.rst:1557
msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ":rfc:`6713`：添加 ``application/gzip`` (``.gz``)"

#: ../../whatsnew/3.14.rst:1558
msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ":rfc:`9639`: 添加 FLAC 格式的 ``audio/flac`` (``.flac``)"

#: ../../whatsnew/3.14.rst:1559
msgid ""
":rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and ``."
"yml``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1561
msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr "添加 7z ``application/x-7z-compressed`` (``.7z``)"

#: ../../whatsnew/3.14.rst:1562
msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""
"非严格模式下，添加Android安装包 ``application/vnd.android.package-archive`` "
"(``.apk``)"

#: ../../whatsnew/3.14.rst:1564
msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr "添加 deb ``application/x-debian-package`` (``.deb``)"

#: ../../whatsnew/3.14.rst:1565
msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr "添加 glTF 二进制格式 ``model/gltf-binary`` (``.glb``)"

#: ../../whatsnew/3.14.rst:1566
msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr "添加glTF JSON/ASCII格式 ``model/gltf+json`` (``.gltf``)"

#: ../../whatsnew/3.14.rst:1567
msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr "添加 M4V ``video/x-m4v`` (``.m4v``)"

#: ../../whatsnew/3.14.rst:1568
msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr "添加 PHP ``application/x-httpd-php`` (``.php``)"

#: ../../whatsnew/3.14.rst:1569
msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr "添加 RAR ``application/vnd.rar`` (``.rar``)"

#: ../../whatsnew/3.14.rst:1570
msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr "添加 RPM ``application/x-rpm`` (``.rpm``)"

#: ../../whatsnew/3.14.rst:1571
msgid "Add STL ``model/stl`` (``.stl``)"
msgstr "添加STL格式 ``model/stl`` (``.stl``)"

#: ../../whatsnew/3.14.rst:1572
msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr "添加 Windows 媒体视频 ``video/x-ms-wmv`` (``.wmv``)"

#: ../../whatsnew/3.14.rst:1573
msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr "事实上：添加WebM格式 ``audio/webm`` (``.weba``)"

#: ../../whatsnew/3.14.rst:1574
msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` types"
msgstr ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: 添加 ``.docx``、``.pptx`` 和 ``.xlsx`` 类型"

#: ../../whatsnew/3.14.rst:1577
msgid ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and "
"``.odt`` types"
msgstr ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: 添加 OpenDocument 格式的 ``.odg``、``.odp``、``."
"ods`` 和 ``.odt`` 类型"

#: ../../whatsnew/3.14.rst:1580
msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: 添加 EPUB 格式的 "
"``application/epub+zip`` (``.epub``)"

#: ../../whatsnew/3.14.rst:1583
msgid ""
"(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`, by "
"Sasha \"Nelie\" Chernykh and Hugo van Kemenade in :gh:`132056`, and by Hugo "
"van Kemenade in :gh:`89416`, :gh:`85957`, and :gh:`129965`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1589
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.14.rst:1593
msgid ""
"On Unix platforms other than macOS, :ref:`'forkserver' <multiprocessing-"
"start-method-forkserver>` is now the default :ref:`start method "
"<multiprocessing-start-methods>` (replacing :ref:`'fork' <multiprocessing-"
"start-method-fork>`). This change does not affect Windows or macOS, where :"
"ref:`'spawn' <multiprocessing-start-method-spawn>` remains the default start "
"method."
msgstr ""

#: ../../whatsnew/3.14.rst:1600
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it via a context from :func:`~multiprocessing.get_context` "
"(preferred) or change the default via :func:`~multiprocessing."
"set_start_method`."
msgstr ""

#: ../../whatsnew/3.14.rst:1611
msgid ""
":mod:`multiprocessing`'s ``'forkserver'`` start method now authenticates its "
"control socket to avoid solely relying on filesystem permissions to restrict "
"what other processes could cause the forkserver to spawn workers and run "
"code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1617
msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for "
"*list* and *dict* types gain previously overlooked missing methods:"
msgstr ""
"针对 *list* 和 *dict* 类型的 :ref:`多进程代理对象 <multiprocessing-"
"proxy_objects>` 增加了此前被忽略的缺失方法："

#: ../../whatsnew/3.14.rst:1620
msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ":meth:`!clear` 和 :meth:`!copy` 用于 :class:`list` 的代理"

#: ../../whatsnew/3.14.rst:1621
msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""
":meth:`~dict.fromkeys`、``reversed(d)``、``d | {}``、``{} | d``、``d |= "
"{'b': 2}`` 用于 :class:`dict` 的代理"

#: ../../whatsnew/3.14.rst:1624
msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr "（由 Roy Hyunjin Han 在 :gh:`103134` 中贡献。）"

#: ../../whatsnew/3.14.rst:1626
msgid ""
"Add support for shared :class:`set` objects via :meth:`.SyncManager.set`. "
"The :func:`set` in :func:`~multiprocessing.Manager` method is now available. "
"(Contributed by Mingyu Park in :gh:`129949`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1631
msgid ""
"Add the :meth:`~multiprocessing.Process.interrupt` to :class:"
"`multiprocessing.Process` objects, which terminates the child process by "
"sending :py:const:`~signal.SIGINT`. This enables :keyword:`finally` clauses "
"to print a stack trace for the terminated process. (Contributed by Artem "
"Pulkin in :gh:`131913`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1639
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.14.rst:1641
msgid ""
"Add :func:`~operator.is_none` and :func:`~operator.is_not_none` as a pair of "
"functions, such that ``operator.is_none(obj)`` is equivalent to ``obj is "
"None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1649
msgid "os"
msgstr "os"

#: ../../whatsnew/3.14.rst:1651
msgid ""
"Add the :func:`~os.reload_environ` function to update :data:`os.environ` "
"and :data:`os.environb` with changes to the environment made by :func:`os."
"putenv`, by :func:`os.unsetenv`, or made outside Python in the same process. "
"(Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1657
msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to "
"the :mod:`!os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1661
msgid ""
"Add the :func:`~os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in :gh:"
"`129205`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1667
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.14.rst:1669
msgid ""
"The *strict* parameter to :func:`~os.path.realpath` accepts a new value, :"
"data:`~os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1677 ../../whatsnew/3.14.rst:2249
#: ../../whatsnew/3.14.rst:2501
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.14.rst:1679
msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr "为 :class:`pathlib.Path` 新增递归复制/移动文件和目录的方法："

#: ../../whatsnew/3.14.rst:1682
msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ":meth:`~pathlib.Path.copy` 将一个文件或目录树复制到目标位置。"

#: ../../whatsnew/3.14.rst:1683
msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ":meth:`~pathlib.Path.copy_into` 会将内容复制 *到* 目标目录中。"

#: ../../whatsnew/3.14.rst:1684
msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ":meth:`~pathlib.Path.move` 将一个文件或目录树移动到目标位置。"

#: ../../whatsnew/3.14.rst:1685
msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ":meth:`~pathlib.Path.move_into` 会将内容移动 *到* 目标目录中。"

#: ../../whatsnew/3.14.rst:1687
msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr "（由 Barney Gale 在 :gh:`73991` 中贡献。）"

#: ../../whatsnew/3.14.rst:1689
msgid ""
"Add the :attr:`~pathlib.Path.info` attribute, which stores an object "
"implementing the new :class:`pathlib.types.PathInfo` protocol. The object "
"supports querying the file type and internally caching :func:`~os.stat` "
"results. Path objects generated by :meth:`~pathlib.Path.iterdir` are "
"initialized with file type information gleaned from scanning the parent "
"directory. (Contributed by Barney Gale in :gh:`125413`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1699 ../../whatsnew/3.14.rst:2257
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.14.rst:1701
msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new :option:`-p PID <pdb --pid>` command-line option:"
msgstr ""

#: ../../whatsnew/3.14.rst:1704
msgid "python -m pdb -p 1234"
msgstr "python -m pdb -p 1234"

#: ../../whatsnew/3.14.rst:1708
msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""
"该操作将连接到指定PID的Python进程，并允许您进行交互式调试。请注意，由于Python"
"解释器的工作原理，当附加到阻塞在系统调用或等待I/O的远程进程时，调试功能只有在"
"执行下一条字节码指令或进程收到信号时才会生效。"

#: ../../whatsnew/3.14.rst:1714
msgid ""
"This feature uses :ref:`PEP 768 <whatsnew314-remote-debugging>` and the new :"
"func:`sys.remote_exec` function to attach to the remote process and send the "
"PDB commands to it."
msgstr ""

#: ../../whatsnew/3.14.rst:1718
msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr "（由 Matt Wozniski 和 Pablo Galindo 在 :gh:`131591` 中贡献。）"

#: ../../whatsnew/3.14.rst:1720
msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`~pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls :meth:`~pdb.Pdb."
"set_trace`, instead of creating a new one each time. As a result, all the "
"instance specific data like :pdbcmd:`display` and :pdbcmd:`commands` are "
"preserved across hardcoded breakpoints. (Contributed by Tian Gao in :gh:"
"`121450`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1727
msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in :"
"gh:`123757`.)"
msgstr ""
"为 :class:`pdb.Pdb` 新增一个 *mode* 参数。当 :mod:`pdb` 处于 ``inline`` 模式"
"时，禁用 ``restart`` 命令。（由 Tian Gao 在 :gh:`123757` 中贡献。）"

#: ../../whatsnew/3.14.rst:1731
msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""
"当用户尝试在 ``inline`` 模式下退出 :mod:`pdb` 时，会显示一个确认提示。输入 "
"``y``、``Y``、按 ``<Enter>`` 或 ``EOF`` 将确认退出并调用 :func:`sys.exit`，而"
"非引发 :exc:`bdb.BdbQuit`。（由 Tian Gao 在 :gh:`124704` 中贡献。）"

#: ../../whatsnew/3.14.rst:1736
msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""
"像 :func:`breakpoint` 或 :func:`pdb.set_trace` 这样的内联断点将始终在调用帧处"
"暂停程序，而忽略 ``skip`` 模式（如果有的话）。（由 Tian Gao 在 :gh:`130493` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1741
msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character. "
"(Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""
"在 :mod:`pdb` 的多行输入中，行首的 ``<tab>`` 键现在会填充 4 个空格的缩进，而"
"不是插入 ``\\t`` 字符。（由 Tian Gao 在 :gh:`130471` 中贡献。）"

#: ../../whatsnew/3.14.rst:1745
msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""
":mod:`pdb` 的多行输入中引入了自动缩进功能。当检测到新的代码块时，它会要么保持"
"上一行的缩进，要么插入 4 个空格的缩进。（由 Tian Gao 在 :gh:`133350` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:1750
msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""
"新增 ``$_asynctask`` 以在适用情况下访问当前的 asyncio 任务。（由 Tian Gao "
"在 :gh:`124367` 中贡献。）"

#: ../../whatsnew/3.14.rst:1753
msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""
"新增 :func:`pdb.set_trace_async` 以支持调试 asyncio 协程。此函数支持 :"
"keyword:`await` 语句。（由 Tian Gao 在 :gh:`132576` 中贡献。）"

#: ../../whatsnew/3.14.rst:1758
msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature "
"can be controlled using the same methods as the default :term:`interactive` "
"shell, in addition to the newly added ``colorize`` argument of :class:`pdb."
"Pdb`. (Contributed by Tian Gao and Łukasz Langa in :gh:`133355`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1765
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.14.rst:1767
msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""
"将 :mod:`pickle` 模块的默认协议版本设置为 5。更多详细信息，请参见 :ref:"
"`pickle protocols <pickle-protocols>`。"

#: ../../whatsnew/3.14.rst:1770
msgid ""
"Add exception notes for pickle serialization errors that allow identifying "
"the source of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1776
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.14.rst:1778
msgid ""
"Add :func:`~platform.invalidate_caches`, a function to invalidate cached "
"results in the :mod:`!platform` module. (Contributed by Bénédikt Tran in :gh:"
"`122549`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1784
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.14.rst:1786
msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in "
"a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""
"帮助输出中的 :term:`注解 <annotation>` 现在通常以更接近原始源代码中的格式显"
"示。（由 Jelle Zijlstra 在 :gh:`101552` 中贡献。）"

#: ../../whatsnew/3.14.rst:1792
msgid "re"
msgstr "re"

#: ../../whatsnew/3.14.rst:1794
msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`. "
"It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""
"在 :mod:`正则表达式 <re>` 中，现支持将 ``\\z`` 作为 ``\\Z`` 的同义符使用。与"
"行为存在微妙差异的 ``\\Z`` 不同，``\\z`` 在其他多种正则表达式引擎中具有明确无"
"歧义的解析方式。（由 Serhiy Storchaka 在 :gh:`133306` 中贡献。）"

#: ../../whatsnew/3.14.rst:1799
msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches the empty input "
"string, meaning that it is now always the opposite of ``\\b``. (Contributed "
"by Serhiy Storchaka in :gh:`124130`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1805
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.14.rst:1807
msgid "Improve and fix support for Bluetooth sockets."
msgstr "改进并修复对蓝牙套接字的支持。"

#: ../../whatsnew/3.14.rst:1809
msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"修复了 NetBSD 和 DragonFly BSD 系统上对蓝牙套接字的支持。（由 Serhiy "
"Storchaka 在 :gh:`132429` 中贡献。）"

#: ../../whatsnew/3.14.rst:1811
msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""
"修复了 FreeBSD 系统上对 :const:`~socket.BTPROTO_HCI` 的支持。（由 Victor "
"Stinner 在 :gh:`111178` 中贡献。）"

#: ../../whatsnew/3.14.rst:1813
msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""
"新增对 FreeBSD 系统上 :const:`~socket.BTPROTO_SCO` 的支持。（由 Serhiy "
"Storchaka 在 :gh:`85302` 中贡献。）"

#: ../../whatsnew/3.14.rst:1815
msgid ""
"Add support for *cid* and *bdaddr_type* in the address for :const:`~socket."
"BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"新增对 FreeBSD 系统上 :const:`~socket.BTPROTO_L2CAP` 地址中 *cid* 和 "
"*bdaddr_type* 的支持。（由 Serhiy Storchaka 在 :gh:`132429` 中贡献。）"

#: ../../whatsnew/3.14.rst:1818
msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on "
"Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""
"新增对 Linux 系统上 :const:`~socket.BTPROTO_HCI` 地址中 *channel* 的支持。"
"（由 Serhiy Storchaka 在 :gh:`70145` 中贡献。）"

#: ../../whatsnew/3.14.rst:1821
msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""
"在 Linux 系统上，允许将整数作为 :const:`~socket.BTPROTO_HCI` 的地址。（由 "
"Serhiy Storchaka 在 :gh:`132099` 中贡献。）"

#: ../../whatsnew/3.14.rst:1824
msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for :const:`~socket."
"BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"在 :const:`~socket.BTPROTO_L2CAP` 中，:meth:`~socket.socket.getsockname` 会返"
"回 *cid*。（由 Serhiy Storchaka 在 :gh:`132429` 中贡献。）"

#: ../../whatsnew/3.14.rst:1827
msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr "新增了许多常量。（由 Serhiy Storchaka 在 :gh:`132734` 中贡献。）"

#: ../../whatsnew/3.14.rst:1832
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.14.rst:1834
msgid ""
"Indicate through the :data:`~ssl.HAS_PHA` Boolean whether the :mod:`!ssl` "
"module supports TLSv1.3 post-handshake client authentication (PHA). "
"(Contributed by Will Childs-Klein in :gh:`128036`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1840
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.14.rst:1842
msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""
"在 :mod:`struct` 模块中支持 :c:expr:`float complex` 和 :c:expr:`double "
"complex` 这两种 C 类型（分别对应格式字符 ``'F'`` 和 ``'D'``）。（由 Sergey B "
"Kirpichev 在 :gh:`121249` 中贡献。）"

#: ../../whatsnew/3.14.rst:1849
msgid "symtable"
msgstr "symtable"

#: ../../whatsnew/3.14.rst:1851
msgid "Expose the following :class:`~symtable.Symbol` methods:"
msgstr ""

#: ../../whatsnew/3.14.rst:1853
msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ":meth:`~symtable.Symbol.is_comp_cell`"

#: ../../whatsnew/3.14.rst:1854
msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ":meth:`~symtable.Symbol.is_comp_iter`"

#: ../../whatsnew/3.14.rst:1855
msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ":meth:`~symtable.Symbol.is_free_class`"

#: ../../whatsnew/3.14.rst:1857
msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr "（由 Bénédikt Tran 在 :gh:`120029` 中贡献。）"

#: ../../whatsnew/3.14.rst:1861
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.14.rst:1863
msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in. (Contributed by Eric Snow "
"in :gh:`125286`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1868
msgid ""
"Add :func:`sys._is_immortal` for determining if an object is :term:"
"`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""
"新增 :func:`sys._is_immortal` 函数，用于判断一个对象是否为 :term:"
"`immortal`。 （由 Peter Bierma 在 :gh:`128509` 中贡献。）"

#: ../../whatsnew/3.14.rst:1871
msgid ""
"On FreeBSD, :data:`sys.platform` no longer contains the major version "
"number. It is always ``'freebsd'``, instead of ``'freebsd13'`` or "
"``'freebsd14'``. (Contributed by Michael Osipov in :gh:`129393`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1875
msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime warning."
msgstr ""
"为 :func:`sys._clear_type_cache` 函数引发 :exc:`DeprecationWarning` 警告。该"
"函数在 Python 3.13 中已被弃用，但此前并未引发运行时警告。"

#: ../../whatsnew/3.14.rst:1878
msgid ""
"Add :func:`sys.remote_exec` to implement the new external debugger "
"interface. See :ref:`PEP 768 <whatsnew314-remote-debugging>` for details. "
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1883
msgid ""
"Add the :data:`sys._jit` namespace, containing utilities for introspecting "
"just-in-time compilation. (Contributed by Brandt Bucher in :gh:`133231`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1889
msgid "sys.monitoring"
msgstr "sys.monitoring"

#: ../../whatsnew/3.14.rst:1891
msgid ""
"Add two new monitoring events, :monitoring-event:`BRANCH_LEFT` and :"
"monitoring-event:`BRANCH_RIGHT`. These replace and deprecate the :monitoring-"
"event:`!BRANCH` event. (Contributed by Mark Shannon in :gh:`122548`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1898
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.14.rst:1900
msgid ""
"Add ``ABIFLAGS`` key to :func:`~sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1905
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.14.rst:1907
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""
":func:`~tarfile.data_filter` 现在会对符号链接目标进行规范化处理，以避免路径遍"
"历攻击。（由 Petr Viktorin 在 :gh:`127987` 和 :cve:`2025-4138` 中贡献。）"

#: ../../whatsnew/3.14.rst:1911
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extractall` 现在在目录被移除或被其他类型的文件替换"
"时，会跳过对目录属性的修复。（由 Petr Viktorin 在 :gh:`127987` 和 :cve:"
"`2024-12718` 中贡献。）"

#: ../../whatsnew/3.14.rst:1915
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` 和 :func:`~tarfile.TarFile.extractall` 现在"
"在以下两种情况会（重新）应用提取过滤器：一是用另一个归档成员的副本替换链接"
"（硬链接或符号链接）时，二是修复目录属性时。前者会引发一个新异常 :exc:"
"`~tarfile.LinkFallbackError`。（由 Petr Viktorin 针对 :cve:`2025-4330` 和 :"
"cve:`2024-12718` 贡献。）"

#: ../../whatsnew/3.14.rst:1922
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` 和 :func:`~tarfile.TarFile.extractall` 在 :"
"func:`~tarfile.TarFile.errorlevel` 为 0 时，不再提取被拒绝的成员。（由 Matt "
"Prodani 和 Petr Viktorin 在 :gh:`112887` 以及 :cve:`2025-4435` 中贡献。）"

#: ../../whatsnew/3.14.rst:1930
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.14.rst:1932
msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to :"
"attr:`threading.Thread.name`. (Contributed by Victor Stinner in :gh:`59705`.)"
msgstr ""
":meth:`threading.Thread.start` 现在会将操作系统线程名称设置为 :attr:"
"`threading.Thread.name`。（由 Victor Stinner 在 :gh:`59705` 中贡献。）"

#: ../../whatsnew/3.14.rst:1938
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.14.rst:1940
msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept keyword arguments. (Contributed by Zhikang Yan in :gh:`126899`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1944
msgid ""
"Add ability to specify a name for :class:`!tkinter.OptionMenu` and :class:`!"
"tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in :gh:`130482`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1950
msgid "turtle"
msgstr "turtle（海龟绘图）"

#: ../../whatsnew/3.14.rst:1952
msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly`, and :func:"
"`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal Moe in :"
"gh:`126350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1958
msgid "types"
msgstr "types（类型）"

#: ../../whatsnew/3.14.rst:1960
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See :ref:"
"`below <whatsnew314-typing-union>` for more details. (Contributed by Jelle "
"Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` 现在是 :class:`typing.Union` 的别名。更多详情请参"
"见 :ref:`下方 <whatsnew314-typing-union>`。（由 Jelle Zijlstra 在 :gh:"
"`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:1966
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.14.rst:1970
msgid ""
"The :class:`types.UnionType` and :class:`typing.Union` types are now aliases "
"for each other, meaning that both old-style unions (created with "
"``Union[int, str]``) and new-style unions (``int | str``) now create "
"instances of the same runtime type. This unifies the behavior between the "
"two syntaxes, but leads to some differences in behavior that may affect "
"users who introspect types at runtime:"
msgstr ""

#: ../../whatsnew/3.14.rst:1977
msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in :func:`repr`. For example, ``repr(Union[int, str])`` is "
"now ``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""

#: ../../whatsnew/3.14.rst:1982
msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Use ``==`` to compare unions for equality, not "
"``is``. New-style unions have never been cached this way. This change could "
"increase memory usage for some programs that use a large number of unions "
"created by subscripting ``typing.Union``. However, several factors offset "
"this cost: unions used in annotations are no longer evaluated by default in "
"Python 3.14 because of :pep:`649`; an instance of :class:`types.UnionType` "
"is itself much smaller than the object returned by ``Union[]`` was on prior "
"Python versions; and removing the cache also saves some space. It is "
"therefore unlikely that this change will cause a significant increase in "
"memory usage for most users."
msgstr ""

#: ../../whatsnew/3.14.rst:1998
msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`~typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../whatsnew/3.14.rst:2007
msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance` "
"checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""
"现在可以在 :func:`isinstance` 检查中使用 :class:`typing.Union` 本身。例如，"
"``isinstance(int | str, typing.Union)`` 将返回 ``True``；而此前这会引发 :exc:"
"`TypeError`。"

#: ../../whatsnew/3.14.rst:2012
msgid ""
"The :attr:`!__args__` attribute of :class:`typing.Union` objects is no "
"longer writable."
msgstr ""

#: ../../whatsnew/3.14.rst:2015
msgid ""
"It is no longer possible to set any attributes on :class:`~typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""

#: ../../whatsnew/3.14.rst:2020
msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:2022
msgid ":class:`~typing.TypeAliasType` now supports star unpacking."
msgstr ":class:`~typing.TypeAliasType` 现在支持星号解包操作。"

#: ../../whatsnew/3.14.rst:2026
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.14.rst:2028
msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr "Unicode 数据库已更新到 16.0.0 版本。"

#: ../../whatsnew/3.14.rst:2032
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.14.rst:2036
msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by :"
"ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""
":mod:`unittest` 模块的输出现在默认启用彩色显示，可通过 :ref:`环境变量 <using-"
"on-controlling-color>` 进行控制。（由 Hugo van Kemenade 在 :gh:`127221` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2041
msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in :gh:"
"`80958`.)"
msgstr ""
"unittest 发现机制重新支持将 :term:`namespace package` 作为起始目录，该功能曾"
"在 Python 3.11 中被移除。 （由 Jacob Walls 在 :gh:`80958` 中贡献。）"

#: ../../whatsnew/3.14.rst:2045
msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr ""
"在 :class:`~unittest.TestCase` 类中新增了多个方法，这些方法可提供更专门化的测"
"试。"

#: ../../whatsnew/3.14.rst:2048
msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and :meth:`~unittest.TestCase."
"assertNotHasAttr` check whether the object has a particular attribute."
msgstr ""
" :meth:`~unittest.TestCase.assertHasAttr` 和 :meth:`~unittest.TestCase."
"assertNotHasAttr` 方法，用于检查对象是否包含特定属性。"

#: ../../whatsnew/3.14.rst:2051
msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and :meth:`~unittest.TestCase."
"assertNotIsSubclass` check whether the object is a subclass of a particular "
"class, or of one of a tuple of classes."
msgstr ""
":meth:`~unittest.TestCase.assertIsSubclass` 和 :meth:`~unittest.TestCase."
"assertNotIsSubclass` 用于检查对象是否是某个特定类的子类，或者是否是某个类元组"
"中任一类的子类。"

#: ../../whatsnew/3.14.rst:2054
msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, :meth:`~unittest.TestCase."
"assertNotStartsWith`, :meth:`~unittest.TestCase.assertEndsWith` and :meth:"
"`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or byte "
"string starts or ends with particular strings."
msgstr ""
":meth:`~unittest.TestCase.assertStartsWith`、:meth:`~unittest.TestCase."
"assertNotStartsWith`、:meth:`~unittest.TestCase.assertEndsWith` 和 :meth:"
"`~unittest.TestCase.assertNotEndsWith` 用于检查 Unicode 字符串或字节串是否以"
"特定字符串开头或结尾。"

#: ../../whatsnew/3.14.rst:2060
msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr "（由 Serhiy Storchaka 在 :gh:`71339` 中贡献。）"

#: ../../whatsnew/3.14.rst:2064 ../../whatsnew/3.14.rst:2547
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.14.rst:2066
msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""
"升级 :mod:`urllib.request` 的 HTTP 摘要认证算法，支持 :rfc:`7616` 中规定的 "
"SHA-256 摘要认证。（由 Calvin Bui 在 :gh:`128193` 中贡献。）"

#: ../../whatsnew/3.14.rst:2070
msgid ""
"Improve ergonomics and standards compliance when parsing and emitting ``file:"
"`` URLs."
msgstr "改进解析和生成 ``file:`` URL 时的易用性和标准合规性。"

#: ../../whatsnew/3.14.rst:2073
msgid "In :func:`~urllib.request.url2pathname`:"
msgstr "在 :func:`~urllib.request.url2pathname` 中："

#: ../../whatsnew/3.14.rst:2075
msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr "当新的 *require_scheme* 参数设为 true 时，接受完整的 URL。"

#: ../../whatsnew/3.14.rst:2077
msgid "Discard URL authority if it matches the local hostname."
msgstr "如果 URL 的权限部分与本地主机名匹配，则舍弃该部分。"

#: ../../whatsnew/3.14.rst:2078
msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr ""
"当新的 *resolve_host* 参数设为 true 时，若 URL 的权限部分解析为本地 IP 地址，"
"则舍弃该部分。"

#: ../../whatsnew/3.14.rst:2080
msgid "Discard URL query and fragment components."
msgstr "丢弃 URL 查询和片段组件。"

#: ../../whatsnew/3.14.rst:2081
msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""
"如果 URL 的权限部分不是本地的，则引发 :exc:`~urllib.error.URLError`，但在 "
"Windows 系统上，仍会像以前一样返回 UNC 路径。"

#: ../../whatsnew/3.14.rst:2084
msgid "In :func:`~urllib.request.pathname2url`:"
msgstr "在 :func:`~urllib.request.pathname2url` 中："

#: ../../whatsnew/3.14.rst:2086
msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr "当新的 *add_scheme* 参数设为 true 时，返回完整的 URL。"

#: ../../whatsnew/3.14.rst:2087
msgid ""
"Include an empty URL authority when a path begins with a slash. For example, "
"the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""
"当路径以斜杠开头时，包含一个空的 URL 权限部分。例如，路径 ``/etc/hosts`` 会被"
"转换为 URL ``///etc/hosts``。"

#: ../../whatsnew/3.14.rst:2090
msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr ""
"在 Windows 系统上，盘符不再转换为大写，且非紧跟在驱动器号后的 ``:`` 字符不再"
"引发 :exc:`OSError` 异常。"

#: ../../whatsnew/3.14.rst:2094
msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr "（由 Barney Gale 在 :gh:`125866` 中贡献。）"

#: ../../whatsnew/3.14.rst:2098 ../../whatsnew/3.14.rst:2269
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.14.rst:2100
msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`~uuid.uuid6`, :func:"
"`~uuid.uuid7`, and :func:`~uuid.uuid8` respectively, as specified in :rfc:"
"`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""
"通过 :func:`~uuid.uuid6`, :func:`~uuid.uuid7` 和 :func:`~uuid.uuid8` 分别添加"
"对 UUID 第 6, 7 和 8 版的支持，具体规范见 :rfc:`9562`。 （由 Bénédikt Tran "
"在 :gh:`89083` 中贡献。）"

#: ../../whatsnew/3.14.rst:2105
msgid ""
":const:`~uuid.NIL` and :const:`~uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""
":const:`~uuid.NIL` 和 :const:`~uuid.MAX` 现已可用于表示 :rfc:`9562` 中定义的 "
"Nil 和 Max UUID 格式。 （由 Nick Pope 在 :gh:`128427` 中贡献。）"

#: ../../whatsnew/3.14.rst:2109
msgid ""
"Allow generating multiple UUIDs simultaneously on the command-line via :"
"option:`python -m uuid --count <uuid --count>`. (Contributed by Simon Legner "
"in :gh:`131236`.)"
msgstr ""
"允许通过 :option:`python -m uuid --count <uuid --count>` 在命令行中同时生成多"
"个 UUID。 （由 Simon Legner 在 :gh:`131236` 中贡献。）"

#: ../../whatsnew/3.14.rst:2115
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.14.rst:2117
msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already "
"registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""
":envvar:`BROWSER` 环境变量中的名称现在可以引用 :mod:`webbrowser` 模块中已注册"
"的浏览器，而不必总是生成新的浏览器命令。"

#: ../../whatsnew/3.14.rst:2121
msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr "这使得可以将 :envvar:`BROWSER` 设置为 macOS 上受支持的浏览器之一的值。"

#: ../../whatsnew/3.14.rst:2126
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.14.rst:2128
msgid ""
"Added :meth:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>`, a method "
"to resolve suitable defaults for a :class:`~zipfile.ZipInfo` object as used "
"by :func:`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by "
"Bénédikt Tran in :gh:`123424`.)"
msgstr ""
"增加 :meth:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` 方法，用于"
"为 :class:`~zipfile.ZipInfo` 对象解析适当的默认值并由 :func:`ZipFile."
"writestr <zipfile.ZipFile.writestr>` 使用。 （由 Bénédikt Tran 在 :gh:"
"`123424` 中贡献。）"

#: ../../whatsnew/3.14.rst:2133
msgid ""
":meth:`.ZipFile.writestr` now respects the :envvar:`SOURCE_DATE_EPOCH` "
"environment variable in order to better support reproducible builds. "
"(Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""
":meth:`.ZipFile.writestr` 现在会遵从 :envvar:`SOURCE_DATE_EPOCH` 环境变量设置"
"以便更好地支持可复现的构建。 （由 Jiahao Li 在 :gh:`91279` 中贡献。）"

#: ../../whatsnew/3.14.rst:2142
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.14.rst:2144
msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`annotationlib`, :mod:`ast`, :mod:`asyncio`, :mod:`base64`, :"
"mod:`cmd`, :mod:`csv`, :mod:`gettext`, :mod:`importlib.util`, :mod:"
"`locale`, :mod:`mimetypes`, :mod:`optparse`, :mod:`pickle`, :mod:`pprint`, :"
"mod:`pstats`, :mod:`shlex`, :mod:`socket`, :mod:`string`, :mod:"
"`subprocess`, :mod:`threading`, :mod:`tomllib`, :mod:`types`, and :mod:"
"`zipfile`."
msgstr ""
"几个标准库模块的导入时间已得到改进，包括 :mod:`annotationlib`、:mod:`ast`、:"
"mod:`asyncio`、:mod:`base64`、:mod:`cmd`、:mod:`csv`、:mod:`gettext`、:mod:"
"`importlib.util`、:mod:`locale`、:mod:`mimetypes`、:mod:`optparse`、:mod:"
"`pickle`、:mod:`pprint`、:mod:`pstats`、:mod:`shlex`、:mod:`socket`、:mod:"
"`string`、:mod:`subprocess`、:mod:`threading`、:mod:`tomllib`、:mod:`types` "
"和 :mod:`zipfile`。"

#: ../../whatsnew/3.14.rst:2151
msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""
"（由 Adam Turner、Bénédikt Tran、Chris Markiewicz、Eli Schwartz、Hugo van "
"Kemenade、Jelle Zijlstra 等人在 :gh:`118761` 中贡献。）"

#: ../../whatsnew/3.14.rst:2154
msgid ""
"The interpreter now avoids some reference count modifications internally "
"when it's safe to do so. This can lead to different values being returned "
"from :func:`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous "
"versions of Python. See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""

#: ../../whatsnew/3.14.rst:2164
msgid ""
"Standard benchmark results have improved by 10-20% following the "
"implementation of a new per-thread doubly linked list for :class:`native "
"tasks <asyncio.Task>`, also reducing memory usage. This enables external "
"introspection tools such as :ref:`python -m asyncio pstree <whatsnew314-"
"asyncio-introspection>` to introspect the call graph of asyncio tasks "
"running in all threads. (Contributed by Kumar Aditya in :gh:`107803`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2173
msgid ""
"The module now has first class support for :term:`free-threading builds "
"<free threading>`. This enables parallel execution of multiple event loops "
"across different threads, scaling linearly with the number of threads. "
"(Contributed by Kumar Aditya in :gh:`128002`.)"
msgstr ""
"该模块现在对 :term:`自由线程构建 <free threading>` 提供了一流的支持。这使得多"
"个事件循环可以在不同线程中并行执行，并且随着线程数量的增加线性扩展。（由 "
"Kumar Aditya 在 :gh:`128002` 中贡献。）"

#: ../../whatsnew/3.14.rst:2181
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.14.rst:2183
msgid ""
":func:`~base64.b16decode` is now up to six times faster. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""
":func:`~base64.b16decode` 的速度现在提升了高达六倍。（由 Bénédikt Tran、"
"Chris Markiewicz 和 Adam Turner 在 :gh:`118761` 中贡献。）"

#: ../../whatsnew/3.14.rst:2189
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.14.rst:2191
msgid ""
"The basic debugger now has a :mod:`sys.monitoring`-based backend, which can "
"be selected via the passing ``'monitoring'`` to the :class:`~bdb.Bdb` "
"class's new *backend* parameter. (Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""
"基本调试器现在有了基于 :mod:`sys.monitoring` 的后端，可以通过将 "
"``'monitoring'`` 传递给 :class:`~bdb.Bdb` 类的新 *backend* 参数来选择。（由 "
"Tian Gao 在 :gh:`124533` 中贡献。）"

#: ../../whatsnew/3.14.rst:2200
msgid ""
"The :func:`~difflib.IS_LINE_JUNK` function is now up to twice as fast. "
"(Contributed by Adam Turner and Semyon Moroz in :gh:`130167`.)"
msgstr ""
":func:`~difflib.IS_LINE_JUNK` 函数的速度现在提升了一倍。（由 Adam Turner 和 "
"Semyon Moroz 在 :gh:`130167` 中贡献。）"

#: ../../whatsnew/3.14.rst:2205
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.14.rst:2207
msgid ""
"The new :ref:`incremental garbage collector <whatsnew314-incremental-gc>` "
"means that maximum pause times are reduced by an order of magnitude or more "
"for larger heaps."
msgstr ""
"新的 :ref:`增量垃圾回收器 <whatsnew314-incremental-gc>` 意味着对于较大的堆，"
"最大暂停时间减少了至少一个数量级。"

#: ../../whatsnew/3.14.rst:2211
msgid ""
"Because of this optimization, the meaning of the results of :meth:`~gc."
"get_threshold` and :meth:`~gc.set_threshold` have changed, along with :meth:"
"`~gc.get_count` and :meth:`~gc.get_stats`."
msgstr ""
"由于这种优化，:meth:`~gc.get_threshold` 和 :meth:`~gc.set_threshold` 的结果含"
"义发生了变化，同时还有 :meth:`~gc.get_count` 和 :meth:`~gc.get_stats`。"

#: ../../whatsnew/3.14.rst:2215
msgid ""
"For backwards compatibility, :meth:`~gc.get_threshold` continues to return a "
"three-item tuple. The first value is the threshold for young collections, as "
"before; the second value determines the rate at which the old collection is "
"scanned (the default is 10, and higher values mean that the old collection "
"is scanned more slowly). The third value is now meaningless and is always "
"zero."
msgstr ""
"为了向后兼容，:meth:`~gc.get_threshold` 继续返回一个三项元组。第一个值是年轻"
"代回收的阈值，与之前相同；第二个值决定了老年代回收的扫描速率（默认值为10，值"
"越高意味着老年代回收扫描越慢）。第三个值现在没有意义，总是为零。"

#: ../../whatsnew/3.14.rst:2223
msgid ":meth:`~gc.set_threshold` now ignores any items after the second."
msgstr ":meth:`~gc.set_threshold` 现在会忽略第二个之后的任何项。"

#: ../../whatsnew/3.14.rst:2225
msgid ""
":meth:`~gc.get_count` and :meth:`~gc.get_stats` continue to return the same "
"format of results. The only difference is that instead of the results "
"referring to the young, aging and old generations, the results refer to the "
"young generation and the aging and collecting spaces of the old generation."
msgstr ""
":meth:`~gc.get_count` 和 :meth:`~gc.get_stats` 方法仍返回相同格式的结果。唯一"
"的区别在于，结果不再分别对应新生代、老化代和老年代，而是对应新生代以及老年代"
"的待老化空间和回收空间。"

#: ../../whatsnew/3.14.rst:2232
msgid ""
"In summary, code that attempted to manipulate the behavior of the cycle GC "
"may not work exactly as intended, but it is very unlikely to be harmful. All "
"other code will work just fine."
msgstr ""
"总之，尝试操控循环垃圾回收器行为的代码可能无法完全按预期工作，但几乎不会造成"
"危害。其他所有代码都将正常运行。"

#: ../../whatsnew/3.14.rst:2242
msgid ""
"Opening and reading files now executes fewer system calls. Reading a small "
"operating system cached file in full is up to 15% faster. (Contributed by "
"Cody Maloney and Victor Stinner in :gh:`120754` and :gh:`90102`.)"
msgstr ""
"打开和读取文件现在执行更少的系统调用。完整读取一个小型操作系统缓存文件的速度"
"提高了最多15%。（由 Cody Maloney 和 Victor Stinner 在 :gh:`120754` 和 :gh:"
"`90102` 中贡献。）"

#: ../../whatsnew/3.14.rst:2251
msgid ""
":func:`Path.read_bytes <pathlib.Path.read_bytes>` now uses unbuffered mode "
"to open files, which is between 9% and 17% faster to read in full. "
"(Contributed by Cody Maloney in :gh:`120754`.)"
msgstr ""
":func:`Path.read_bytes <pathlib.Path.read_bytes>` 现在使用无缓冲模式打开文"
"件，完整读取的速度提高了 9% 到 17%。（由 Cody Maloney 在 :gh:`120754` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2259
msgid ""
":mod:`pdb` now supports two backends, based on either :func:`sys.settrace` "
"or :mod:`sys.monitoring`. Using the :ref:`pdb CLI <pdb-cli>` or :func:"
"`breakpoint` will always use the :mod:`sys.monitoring` backend. Explicitly "
"instantiating :class:`pdb.Pdb` and its derived classes will use the :func:"
"`sys.settrace` backend by default, which is configurable. (Contributed by "
"Tian Gao in :gh:`124533`.)"
msgstr ""
":mod:`pdb` 现在支持两种后端，基于 :func:`sys.settrace` 或 :mod:`sys."
"monitoring`。使用 :ref:`pdb CLI <pdb-cli>` 或 :func:`breakpoint` 将始终使用 :"
"mod:`sys.monitoring` 后端。显式实例化 :class:`pdb.Pdb` 及其派生类将默认使用 :"
"func:`sys.settrace` 后端，这是可配置的。（由 Tian Gao 在 :gh:`124533` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2271
msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are now both roughly 40% faster "
"for 16-byte names and 20% faster for 1024-byte names. Performance for longer "
"names remains unchanged. (Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr ""
":func:`~uuid.uuid3` 和 :func:`~uuid.uuid5` 对于16字节名称的速度现在大约提高了"
"40%，对于1024字节名称的速度提高了20%。更长名称的性能保持不变。（由 Bénédikt "
"Tran 在 :gh:`128150` 中贡献。）"

#: ../../whatsnew/3.14.rst:2276
msgid ""
":func:`~uuid.uuid4` is now c. 30% faster. (Contributed by Bénédikt Tran in :"
"gh:`128150`.)"
msgstr ""
":func:`~uuid.uuid4` 的速度现在提高了约30%。（由 Bénédikt Tran 在 :gh:"
"`128150` 中贡献。）"

#: ../../whatsnew/3.14.rst:2281
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.14.rst:2283
msgid ""
"On Windows, `zlib-ng <https://github.com/zlib-ng/zlib-ng>`__ is now used as "
"the implementation of the :mod:`zlib` module in the default binaries. There "
"are no known incompatibilities between ``zlib-ng`` and the previously-used "
"``zlib`` implementation. This should result in better performance at all "
"compression levels."
msgstr ""
"在 Windows 上，`zlib-ng <https://github.com/zlib-ng/zlib-ng>`__ 现在用作默认"
"二进制文件中 :mod:`zlib` 模块的实现。已知 ``zlib-ng`` 与之前使用的 ``zlib`` "
"实现之间没有不兼容性。这应在所有压缩级别上带来更好的性能。"

#: ../../whatsnew/3.14.rst:2290
msgid ""
"It is worth noting that ``zlib.Z_BEST_SPEED`` (``1``) may result in "
"significantly less compression than the previous implementation, whilst also "
"significantly reducing the time taken to compress."
msgstr ""
"值得注意的是，``zlib.Z_BEST_SPEED`` （``1``） 可能会导致比之前的实现显著更低"
"的压缩率，同时显著减少压缩所需的时间。"

#: ../../whatsnew/3.14.rst:2294
msgid "(Contributed by Steve Dower in :gh:`91349`.)"
msgstr "（由 Steve Dower 在 :gh:`91349` 中贡献。）"

#: ../../whatsnew/3.14.rst:2298
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.14.rst:2303
msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of :class:`!"
"BooleanOptionalAction`. These have been deprecated since Python 3.12. "
"(Contributed by Nikita Sobolev in :gh:`118805`.)"
msgstr ""
"移除 :class:`!BooleanOptionalAction` 的 *type*、 *choices* 和 *metavar* 形"
"参。 它们自 Python 3.12 起已被弃用。 （由 Nikita Sobolev 在 :gh:`118805` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2308
msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group now raises a :exc:`ValueError`. Similarly, :meth:`~argparse."
"ArgumentParser.add_argument_group` or :meth:`~argparse.ArgumentParser."
"add_mutually_exclusive_group` on a mutually exclusive group now both raise :"
"exc:`ValueError`\\ s. This 'nesting' was never supported, often failed to "
"work correctly, and was unintentionally exposed through inheritance. This "
"functionality has been deprecated since Python 3.11. (Contributed by "
"Savannah Ostrowski in :gh:`127186`.)"
msgstr ""
"在参数组上调用 :meth:`~argparse.ArgumentParser.add_argument_group` 现在会引"
"发 :exc:`ValueError`。 类似地，在互斥组上调用 :meth:`~argparse."
"ArgumentParser.add_argument_group` 或 :meth:`~argparse.ArgumentParser."
"add_mutually_exclusive_group` 现在都会引发 :exc:`ValueError`。 这种“嵌套调"
"用”从未被支持，经常无法正常工作，且通过继承关系被意外暴露。 该功能自 Python "
"3.11 起已被弃用。 （由 Savannah Ostrowski 在 :gh:`127186` 中贡献。）"

#: ../../whatsnew/3.14.rst:2322
msgid ""
"Remove the following classes, which have been deprecated aliases of :class:"
"`~ast.Constant` since Python 3.8 and have emitted deprecation warnings since "
"Python 3.12:"
msgstr ""
"移除以下自 Python 3.8 起作为 :class:`~ast.Constant` 的已弃用别名，且自 "
"Python 3.12 起已发出弃用警告的类："

#: ../../whatsnew/3.14.rst:2326
msgid ":class:`!Bytes`"
msgstr ":class:`!Bytes`"

#: ../../whatsnew/3.14.rst:2327
msgid ":class:`!Ellipsis`"
msgstr ":class:`!Ellipsis`"

#: ../../whatsnew/3.14.rst:2328
msgid ":class:`!NameConstant`"
msgstr ":class:`!NameConstant`"

#: ../../whatsnew/3.14.rst:2329
msgid ":class:`!Num`"
msgstr ":class:`!Num`"

#: ../../whatsnew/3.14.rst:2330
msgid ":class:`!Str`"
msgstr ":class:`!Str`"

#: ../../whatsnew/3.14.rst:2332
msgid ""
"As a consequence of these removals, user-defined ``visit_Num``, "
"``visit_Str``, ``visit_Bytes``, ``visit_NameConstant`` and "
"``visit_Ellipsis`` methods on custom :class:`~ast.NodeVisitor` subclasses "
"will no longer be called when the :class:`!NodeVisitor` subclass is visiting "
"an AST. Define a ``visit_Constant`` method instead."
msgstr ""
"由于这些移除操作，当自定义的 :class:`~ast.NodeVisitor` 子类访问抽象语法树"
"（AST）时，用户定义的 ``visit_Num``、``visit_Str``、``visit_Bytes``、"
"``visit_NameConstant`` 和 ``visit_Ellipsis`` 方法将不再被调用。请改用定义 "
"``visit_Constant`` 方法。"

#: ../../whatsnew/3.14.rst:2338
msgid "(Contributed by Alex Waygood in :gh:`119562`.)"
msgstr "（由 Alex Waygood 在 :gh:`119562` 中贡献。）"

#: ../../whatsnew/3.14.rst:2340
msgid ""
"Remove the following deprecated properties on :class:`ast.Constant`, which "
"were present for compatibility with the now-removed AST classes:"
msgstr ""
"移除以下 :class:`ast.Constant` 为兼容现已移除的 AST 类而保留的已弃用属性："

#: ../../whatsnew/3.14.rst:2343
msgid ":attr:`!Constant.n`"
msgstr ":attr:`!Constant.n`"

#: ../../whatsnew/3.14.rst:2344
msgid ":attr:`!Constant.s`"
msgstr ":attr:`!Constant.s`"

#: ../../whatsnew/3.14.rst:2346
msgid ""
"Use :attr:`!Constant.value` instead. (Contributed by Alex Waygood in :gh:"
"`119562`.)"
msgstr ""
"改用 :attr:`!Constant.value`。 （由 Alex Waygood 在 :gh:`119562` 中贡献。）"

#: ../../whatsnew/3.14.rst:2353
msgid ""
"Remove the following classes, methods, and functions, which have been "
"deprecated since Python 3.12:"
msgstr "移除以下自 Python 3.12 起已被弃用的类、方法和函数："

#: ../../whatsnew/3.14.rst:2356
msgid ":class:`!AbstractChildWatcher`"
msgstr ":class:`!AbstractChildWatcher`"

#: ../../whatsnew/3.14.rst:2357
msgid ":class:`!FastChildWatcher`"
msgstr ":class:`!FastChildWatcher`"

#: ../../whatsnew/3.14.rst:2358
msgid ":class:`!MultiLoopChildWatcher`"
msgstr ":class:`!MultiLoopChildWatcher`"

#: ../../whatsnew/3.14.rst:2359
msgid ":class:`!PidfdChildWatcher`"
msgstr ":class:`!PidfdChildWatcher`"

#: ../../whatsnew/3.14.rst:2360
msgid ":class:`!SafeChildWatcher`"
msgstr ":class:`!SafeChildWatcher`"

#: ../../whatsnew/3.14.rst:2361
msgid ":class:`!ThreadedChildWatcher`"
msgstr ":class:`!ThreadedChildWatcher`"

#: ../../whatsnew/3.14.rst:2362
msgid ":meth:`!AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!AbstractEventLoopPolicy.get_child_watcher`"

#: ../../whatsnew/3.14.rst:2363
msgid ":meth:`!AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!AbstractEventLoopPolicy.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2364
msgid ":func:`!get_child_watcher`"
msgstr ":func:`!get_child_watcher`"

#: ../../whatsnew/3.14.rst:2365
msgid ":func:`!set_child_watcher`"
msgstr ":func:`!set_child_watcher`"

#: ../../whatsnew/3.14.rst:2367
msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr "（由 Kumar Aditya 在 :gh:`120804` 中贡献。）"

#: ../../whatsnew/3.14.rst:2369
msgid ""
":func:`asyncio.get_event_loop` now raises a :exc:`RuntimeError` if there is "
"no current event loop, and no longer implicitly creates an event loop."
msgstr ""
":func:`asyncio.get_event_loop` 现在如果没有当前事件循环，会引发 :exc:"
"`RuntimeError` 异常，且不再隐式创建事件循环。"

#: ../../whatsnew/3.14.rst:2373
msgid "(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr "（由 Kumar Aditya 在 :gh:`126353` 中贡献。）"

#: ../../whatsnew/3.14.rst:2378
msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them "
"can be replaced with :func:`asyncio.run`."
msgstr ""
"当前存在几种使用 :func:`asyncio.get_event_loop` 的模式，其中大多数可替换为 :"
"func:`asyncio.run`。"

#: ../../whatsnew/3.14.rst:2381
msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr "如果正在运行异步函数，直接使用 :func:`asyncio.run` 即可。"

#: ../../whatsnew/3.14.rst:2383 ../../whatsnew/3.14.rst:2410
#: ../../whatsnew/3.14.rst:2438
msgid "Before:"
msgstr "之前："

#: ../../whatsnew/3.14.rst:2385
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2397 ../../whatsnew/3.14.rst:2423
#: ../../whatsnew/3.14.rst:2454
msgid "After:"
msgstr "之后："

#: ../../whatsnew/3.14.rst:2399
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.14.rst:2406
msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""
"如果需要启动某些持续运行的服务，例如监听套接字的服务器，请使用 :func:"
"`asyncio.run` 配合 :class:`asyncio.Event` 实现。"

#: ../../whatsnew/3.14.rst:2412
msgid ""
"def start_server(loop): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""
"def start_server(loop): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2425
msgid ""
"def start_server(loop): ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""
"def start_server(loop): ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.14.rst:2435
msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr ""
"如果需要在事件循环中运行某些任务，同时在其前后执行阻塞代码，请使用 :class:"
"`asyncio.Runner`。"

#: ../../whatsnew/3.14.rst:2440
msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2456
msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"

#: ../../whatsnew/3.14.rst:2469
msgid "email"
msgstr "email"

#: ../../whatsnew/3.14.rst:2471
msgid ""
"Remove :func:`email.utils.localtime`'s *isdst* parameter, which was "
"deprecated in and has been ignored since Python 3.12. (Contributed by Hugo "
"van Kemenade in :gh:`118798`.)"
msgstr ""
"移除 :func:`email.utils.localtime` 函数的 *isdst* 形参。该参数自 Python 3.12 "
"起已被弃用且一直被忽略。（由 Hugo van Kemenade 在 :gh:`118798` 中贡献。）"

#: ../../whatsnew/3.14.rst:2477
msgid "importlib.abc"
msgstr "importlib.abc"

#: ../../whatsnew/3.14.rst:2479
msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr "移除已弃用的 :mod:`importlib.abc` 类："

#: ../../whatsnew/3.14.rst:2481
msgid ""
":class:`!ResourceReader` (use :class:`~importlib.resources.abc."
"TraversableResources`)"
msgstr ""
":class:`!ResourceReader` (使用 :class:`~importlib.resources.abc."
"TraversableResources`)"

#: ../../whatsnew/3.14.rst:2483
msgid ""
":class:`!Traversable` (use :class:`~importlib.resources.abc.Traversable`)"
msgstr ""
":class:`!Traversable` (使用 :class:`~importlib.resources.abc.Traversable`)"

#: ../../whatsnew/3.14.rst:2485
msgid ""
":class:`!TraversableResources` (use :class:`~importlib.resources.abc."
"TraversableResources`)"
msgstr ""
":class:`!TraversableResources` (使用 :class:`~importlib.resources.abc."
"TraversableResources`)"

#: ../../whatsnew/3.14.rst:2488
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 在 :gh:`93963` 中贡献。）"

#: ../../whatsnew/3.14.rst:2492
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.14.rst:2494
msgid ""
"Remove support for copy, deepcopy, and pickle operations from :mod:"
"`itertools` iterators. These have emitted a :exc:`DeprecationWarning` since "
"Python 3.12. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
"移除 :mod:`itertools` 迭代器对复制（copy）、深度复制（deepcopy）和序列化"
"（pickle）操作的支持。自 Python 3.12 起，这些操作已触发 :exc:"
"`DeprecationWarning` 警告。（由 Raymond Hettinger 在 :gh:`101588` 中贡献。）"

#: ../../whatsnew/3.14.rst:2503
msgid ""
"Remove support for passing additional keyword arguments to :class:`~pathlib."
"Path`. In previous versions, any such arguments are ignored. (Contributed by "
"Barney Gale in :gh:`74033`.)"
msgstr ""
"移除向 :class:`~pathlib.Path` 传递额外关键字参数的支持。在先前版本中，此类参"
"数均会被忽略。（由 Barney Gale 在 :gh:`74033` 中贡献。）"

#: ../../whatsnew/3.14.rst:2508
msgid ""
"Remove support for passing additional positional arguments to :meth:`."
"PurePath.relative_to` and :meth:`~pathlib.PurePath.is_relative_to`. In "
"previous versions, any such arguments are joined onto *other*. (Contributed "
"by Barney Gale in :gh:`78707`.)"
msgstr ""
"移除向 :meth:`.PurePath.relative_to` 和 :meth:`~pathlib.PurePath."
"is_relative_to` 方法传递额外位置参数的支持。在先前版本中，此类参数会被拼接到 "
"*other* 参数上。（由 Barney Gale 在 :gh:`78707` 中贡献。）"

#: ../../whatsnew/3.14.rst:2515
msgid "pkgutil"
msgstr "pkgutil"

#: ../../whatsnew/3.14.rst:2517
msgid ""
"Remove the :func:`!get_loader` and :func:`!find_loader` functions, which "
"have been deprecated since Python 3.12. (Contributed by Bénédikt Tran in :gh:"
"`97850`.)"
msgstr ""
"移除 :func:`!get_loader` 和 :func:`!find_loader` 函数，这两个函数自 Python "
"3.12 起已被弃用。（由 Bénédikt Tran 在 :gh:`97850` 中贡献。）"

#: ../../whatsnew/3.14.rst:2523
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.14.rst:2525
msgid ""
"Remove the :func:`!master_open` and :func:`!slave_open` functions, which "
"have been deprecated since Python 3.12. Use :func:`pty.openpty` instead. "
"(Contributed by Nikita Sobolev in :gh:`118824`.)"
msgstr ""
"移除 :func:`!master_open` 和 :func:`!slave_open` 函数，这两个函数自 Python "
"3.12 起已被弃用。请改用 :func:`pty.openpty` 函数。"

#: ../../whatsnew/3.14.rst:2532
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.14.rst:2534
msgid ""
"Remove :data:`!version` and :data:`!version_info` from the :mod:`sqlite3` "
"module; use :data:`~sqlite3.sqlite_version` and :data:`~sqlite3."
"sqlite_version_info` for the actual version number of the runtime SQLite "
"library. (Contributed by Hugo van Kemenade in :gh:`118924`.)"
msgstr ""
"从 :mod:`sqlite3` 模块中移除 :data:`!version` 和 :data:`!version_info`；请使"
"用 :data:`~sqlite3.sqlite_version` 和 :data:`~sqlite3.sqlite_version_info` 来"
"获取运行时 SQLite 库的实际版本号。（由 Hugo van Kemenade 在 :gh:`118924` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2540
msgid ""
"Using a sequence of parameters with named placeholders now raises a :exc:"
"`~sqlite3.ProgrammingError`, having been deprecated since Python 3.12. "
"(Contributed by Erlend E. Aasland in :gh:`118928` and :gh:`101693`.)"
msgstr ""
"现在，使用带具名占位符的形参序列会引发 :exc:`~sqlite3.ProgrammingError` 异"
"常，该用法自 Python 3.12 起已被弃用。（由 Erlend E. Aasland 在 :gh:`118928` "
"和 :gh:`101693` 中贡献。）"

#: ../../whatsnew/3.14.rst:2549
msgid ""
"Remove the :class:`!Quoter` class from :mod:`urllib.parse`, which has been "
"deprecated since Python 3.11. (Contributed by Nikita Sobolev in :gh:"
"`118827`.)"
msgstr ""
"从 :mod:`urllib.parse` 模块中移除 :class:`!Quoter` 类，该类自 Python 3.11 起"
"已被弃用。（由 Nikita Sobolev 在 :gh:`118827` 中贡献。）"

#: ../../whatsnew/3.14.rst:2553
msgid ""
"Remove the :class:`!URLopener` and :class:`!FancyURLopener` classes from :"
"mod:`urllib.request`, which have been deprecated since Python 3.3."
msgstr ""
"从 :mod:`urllib.request` 模块中移除 :class:`!URLopener` 和 :class:`!"
"FancyURLopener` 类，这两个类自 Python 3.3 起已被弃用。"

#: ../../whatsnew/3.14.rst:2557
msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`. "
"``myopener.retrieve()`` can be replaced with :func:`~urllib.request."
"urlretrieve`. Customisations to the opener classes can be replaced by "
"passing customized handlers to :func:`~urllib.request.build_opener`. "
"(Contributed by Barney Gale in :gh:`84850`.)"
msgstr ""
"``myopener.open()`` 可以替换为 :func:`~urllib.request.urlopen`。``myopener."
"retrieve()`` 可以替换为 :func:`~urllib.request.urlretrieve`。对 opener 类的自"
"定义操作可以通过向 :func:`~urllib.request.build_opener` 传递定制化的处理程序"
"来实现替换。（由 Barney Gale 在 :gh:`84850` 中贡献。）"

#: ../../whatsnew/3.14.rst:2566
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.14.rst:2569
msgid "New deprecations"
msgstr "新的弃用"

#: ../../whatsnew/3.14.rst:2571
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; complex numbers should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in :"
"gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现已被"
"弃用；复数应当仅作为单个位置参数被传入。 （由 Serhiy Storchaka 在 :gh:"
"`109218` 中贡献。）"

#: ../../whatsnew/3.14.rst:2576
#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`："

#: ../../whatsnew/3.14.rst:2578
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to the :meth:"
"`~argparse.ArgumentParser.add_argument_group` method is now deprecated. "
"(Contributed by Savannah Ostrowski in :gh:`125563`.)"
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传给 :meth:`~argparse.ArgumentParser."
"add_argument_group` 方法的做法现已被弃用。 （由 Savannah Ostrowski 在 :gh:"
"`125563` 中贡献。）"

#: ../../whatsnew/3.14.rst:2582
msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything relating "
"to resource management should be handled downstream, after the arguments "
"have been parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""
"已弃用 :class:`argparse.FileType` 类型转换器。 任何涉及资源管理的操作都应在参"
"数解析完成之后在下游进行处理。 （由 Serhiy Storchaka 在 :gh:`58032` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2587
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.14.rst:2589
msgid ""
"The :func:`!asyncio.iscoroutinefunction` is now deprecated and will be "
"removed in Python 3.16; use :func:`inspect.iscoroutinefunction` instead. "
"(Contributed by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
"现在 :func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除；"
"请改用 :func:`inspect.iscoroutinefunction`。 （由 Jiahao Li 和 Kumar Aditya "
"在 :gh:`122875` 中贡献。）"

#: ../../whatsnew/3.14.rst:2594
msgid ""
"The :mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了"
"下列类和函数："

#: ../../whatsnew/3.14.rst:2598
#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2599
#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2600
#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2601
#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2602
#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2603
#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2605
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with the "
"*loop_factory* argument to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 "
"*loop_factory* 参数以使用想要的事件循环实现。"

#: ../../whatsnew/3.14.rst:2608
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows:"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`:"

#: ../../whatsnew/3.14.rst:2610
#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../whatsnew/3.14.rst:2619
#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "（由 Kumar Aditya 在 :gh:`127949` 中贡献。）"

#: ../../whatsnew/3.14.rst:2621
msgid ""
":mod:`codecs`: The :func:`codecs.open` function is now deprecated, and will "
"be removed in a future version of Python. Use :func:`open` instead. "
"(Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""
":mod:`codecs`: :func:`codecs.open` 函数现已被弃用，并将在未来的 Python 版本中"
"移除。 请改用 :func:`open`。 （由 Inada Naoki 在 :gh:`133036` 中贡献。）"

#: ../../whatsnew/3.14.rst:2627
#: ../../deprecations/pending-removal-in-3.15.rst:16
#: ../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.14.rst:2629
msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is now deprecated in favor of setting :attr:"
"`.Structure._layout_` to ``'ms'``, and will be removed in Python 3.19. "
"(Contributed by Petr Viktorin in :gh:`131747`.)"
msgstr ""
"在非 Windows 平台上，设置 :attr:`.Structure._pack_` 以使用 MSVC 兼容的默认内"
"存布局的做法现已被弃用而应改为设置 :attr:`.Structure._layout_` to ``'ms'``，"
"并将在 Python 3.19 中移除。 （由 Petr Viktorin 在 :gh:`131747` 中贡献。）"

#: ../../whatsnew/3.14.rst:2634
msgid ""
"Calling :func:`ctypes.POINTER` on a string is now deprecated. Use :ref:"
"`incomplete types <ctypes-incomplete-types>` for self-referential "
"structures. Also, the internal ``ctypes._pointer_type_cache`` is deprecated. "
"See :func:`ctypes.POINTER` for updated implementation details. (Contributed "
"by Sergey Myrianov in :gh:`100926`.)"
msgstr ""
"在字符串上调用 :func:`ctypes.POINTER` 的做法现已被弃用。 对于自引用的结构体请"
"使用 :ref:`不完整类型 <ctypes-incomplete-types>`。 此外，内部的 ``ctypes."
"_pointer_type_cache`` 也已被弃用。 请参阅 :func:`ctypes.POINTER` 了解更新的实"
"现细节。 （由 Sergey Myrianov 在 :gh:`100926` 中贡献。）"

#: ../../whatsnew/3.14.rst:2641
msgid ""
":mod:`functools`: Calling the Python implementation of :func:`functools."
"reduce` with *function* or *sequence* as keyword arguments is now "
"deprecated; the parameters will be made positional-only in Python 3.16. "
"(Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""
":mod:`functools`: 调用 :func:`functools.reduce` 的 Python 实现时以关键字参数"
"形式传入 *function* 或 *sequence* 的做法现已被弃用；这两个形参将在 Python "
"3.16 中改为仅限位置形参。 （由 Kirill Podoprigora 在 :gh:`121676` 中贡献。）"

#: ../../whatsnew/3.14.rst:2647
msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument "
"is now deprecated and scheduled for removal in Python 3.16. Define handlers "
"with the *stream* argument instead. (Contributed by Mariusz Felisiak in :gh:"
"`115032`.)"
msgstr ""
":mod:`logging`: 对使用 *strm* 参数的自定义日志处理器的支持现已被弃用并计划在 "
"Python 3.16 中移除。 请改为定义伤脑筋 *stream* 参数的处理器。 （由 Mariusz "
"Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../whatsnew/3.14.rst:2653
msgid ""
":mod:`mimetypes`: Valid extensions are either empty or must start with '.' "
"for :meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated "
"and will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
":mod:`mimetypes`: 对于 :meth:`mimetypes.MimeTypes.add_type` 有效的扩展名应为"
"空或者必须以 '.' 打头。 不带点号的扩展名已被弃用并将在 Python 3.16 中引发 :"
"exc:`ValueError`。 （由 Hugo van Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../whatsnew/3.14.rst:2660
msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call :func:`urllib."
"request.url2pathname` and :func:`~urllib.request.pathname2url` instead. "
"(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""
":mod:`!nturl2path`: 该模块现已弃用，请改用 :func:`urllib.request."
"url2pathname` 和 :func:`~urllib.request.pathname2url`。（由 Barney Gale 在 :"
"gh:`125866` 中贡献。）"

#: ../../whatsnew/3.14.rst:2665
msgid ""
":mod:`os`: The :func:`os.popen` and :func:`os.spawn* <os.spawnl>` functions "
"are now :term:`soft deprecated`. They should no longer be used to write new "
"code. The :mod:`subprocess` module is recommended instead. (Contributed by "
"Victor Stinner in :gh:`120743`.)"
msgstr ""
":mod:`os`: 现在 :func:`os.popen` 和 :func:`os.spawn* <os.spawnl>` 函数都被设"
"为 :term:`soft deprecated`。 它们不应再用于编写新的代码。 建议改用 :mod:"
"`subprocess` 模块。 （由 Victor Stinner 在 :gh:`120743` 中贡献。）"

#: ../../whatsnew/3.14.rst:2672
msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is now deprecated and "
"scheduled for removal in Python 3.19. Use :meth:`pathlib.Path.as_uri` "
"instead. (Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""
":mod:`pathlib`: 现在 :meth:`!pathlib.PurePath.as_uri` 已被弃用将计划在 "
"Python 3.19 中移除。 请改用 :meth:`pathlib.Path.as_uri`。 （由 Barney Gale "
"在 :gh:`123599` 中贡献。）"

#: ../../whatsnew/3.14.rst:2678
msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property, which will be removed in a future version of "
"Python. The low overhead dynamic frame locals access added in Python 3.13 "
"by :pep:`667` means the frame locals cache reference previously stored in "
"this attribute is no longer needed. Derived debuggers should access ``pdb."
"Pdb.curframe.f_locals`` directly in Python 3.13 and later versions. "
"(Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""
":mod:`pdb`: 未写入文档的 ``pdb.Pdb.curframe_locals`` 属性现在成为已弃用的只读"
"特性属性，它将在未来的 Python 版本中被移除。 通过 :pep:`667` 在 Python 3.13 "
"中添加的低开销动态帧局部变量访问机制使得之前存储在该属性中的帧局部变量缓存引"
"用已不再需要。 派生的调试器在 Python 3.13 及更高版本中应当直接访问 ``pdb.Pdb."
"curframe.f_locals``。 （由 Tian Gao 在 :gh:`124369` 和 :gh:`125951` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2687
msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest, scheduled for removal in Python 3.16. (Contributed by "
"Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`: 由于缺少兴趣 :meth:`symtable.Class.get_methods` 已被弃用，计"
"划在 Python 3.16 中移除。 （由 Bénédikt Tran 在 :gh:`119698` 中贡献。）"

#: ../../whatsnew/3.14.rst:2692
msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods :meth:`!"
"trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are now "
"deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and :meth:`!"
"trace_info` instead. (Contributed by Serhiy Storchaka in :gh:`120220`.)"
msgstr ""
":mod:`tkinter`：:class:`!tkinter.Variable` 的方法 :meth:`!trace_variable`、:"
"meth:`!trace_vdelete` 和 :meth:`!trace_vinfo` 现已被弃用。请改用 :meth:`!"
"trace_add`、:meth:`!trace_remove` 和 :meth:`!trace_info`。（由 Serhiy "
"Storchaka 在 :gh:`120220` 中贡献。）"

#: ../../whatsnew/3.14.rst:2698
msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, bytes-like objects and ``None`` in :func:"
"`~urllib.parse.parse_qsl` and :func:`~urllib.parse.parse_qs` is now "
"deprecated. (Contributed by Serhiy Storchaka in :gh:`116897`.)"
msgstr ""
":mod:`urllib.parse`: 在 :func:`~urllib.parse.parse_qsl` 和 :func:`~urllib."
"parse.parse_qs` 中接受除空字符串、字节型对象以及 ``None`` 之外的假值 (如 "
"``0`` 和 ``[]``) 的做法现已被弃用。 （由 Serhiy Storchaka 在 :gh:`116897` 中"
"贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "计划在 Python 3.15 中移除"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "导入系统："

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设置 :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` 失败时"
"在模块上设置 :attr:`~module.__cached__` 的做法已被弃用。 在 Python 3.15 中，:"
"attr:`!__cached__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设备 :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` 失败时"
"在模块上设置 :attr:`~module.__package__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__package__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"未写入文档的 :func:`!ctypes.SetPointerType` 函数自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"过时且很少被使用的 :class:`~http.server.CGIHTTPRequestHandler` 自 Python "
"3.13 起已被弃用。 不存在直接的替代品。 对于建立带有请求处理器的 Web 服务程序"
"来说 *任何东西* 都比 CGI 要好。"

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"用于 :program:`python -m http.server` 命令行界面的 :option:`!--cgi` 旗标自 "
"Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:63
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` 方法：改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
":func:`~locale.getdefaultlocale` 函数自 Python 3.11 起已被弃用。 最初计划在 "
"Python 3.13 中移除它 (:gh:`90817`)，但已被推迟至 Python 3.15。 请改用 :func:"
"`~locale.getlocale`, :func:`~locale.setlocale` 和 :func:`~locale."
"getencoding`。 （由 Hugo van Kemenade 在 :gh:`111187` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` 自 Python 3.13 起已被弃用。 请使用 :func:`os."
"path.isreserved` 来检测 Windows 上的保留路径。"

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` 自 Python 3.13 起已被弃用。 此函数仅对 Jython 支持"
"有用，具有令人困惑的 API，并且大部分未经测试。"

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 参数自 Python 3.12 起已被弃"
"用。"

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
"在 Python 3.15 中 :func:`~threading.RLock` 将不再接受参数。 传入参数的做法自 "
"Python 3.14 起已被弃用，因为 Python 版本不接受任何参数，而 C 版本允许任意数量"
"的位置或关键字参数，但会忽略所有参数。"

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: 访问 :attr:`~codeobject.co_lnotab` 的做法自 3.10 起"
"已根据 :pep:`626` 被弃用并曾计划在 3.12 中移除，但在 3.12 中实际仅设置了 :"
"exc:`DeprecationWarning`。 可能会在 3.15 中移除。 （由 Nikita Sobolev 在 :gh:"
"`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:26
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""
"未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法（例如 "
"``Point = NamedTuple(\"Point\", x=int, y=int)``）自 Python 3.13 起已被弃用。 "
"请改用基于类的语法或函数语法。"

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"当使用 :class:`~typing.TypedDict` 的函数式语法时，不向 *fields* 形参传递值 "
"(``TD = TypedDict(\"TD\")``) 或传递 ``None`` (``TD = TypedDict(\"TD\", "
"None)``) 的做法自 Python 3.13 起已被弃用。 请改用 ``class TD(TypedDict): "
"pass`` 或 ``TD = TypedDict(\"TD\", {})`` 来创建一个零字段的 TypedDict。"

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
":func:`typing.no_type_check_decorator` 装饰器自 Python 3.13 起已被弃用。 存在"
"于 :mod:`typing` 模块八年之后，它仍未被任何主要类型检查器所支持。"

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`："

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
":class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 :meth:`~wave."
"Wave_read.getmark`, :meth:`!setmark` 和 :meth:`~wave.Wave_read.getmarkers` 方"
"法自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` 自 Python 3.10 起已被弃用。请改"
"用 :meth:`~zipimport.zipimporter.exec_module` 。\n"
"（由李佳昊在 :gh:`125746` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "计划在 Python 3.16 中移除"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"当设置 :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` 失败时"
"在模块上设置 :attr:`~module.__loader__` 的做法已被弃用。 在 Python 3.16 中，:"
"attr:`!__loader__` 将不会再被设置或是被导入系统或标准库纳入考虑。"

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"``'u'`` 格式代码 (:c:type:`wchar_t`) 自 Python 3.3 起已在文档中弃用并自 "
"Python 3.13 起在运行时弃用。 对于 Unicode 字符请改用 ``'w'`` 格式代码 (:c:"
"type:`Py_UCS4`)。"

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除，请改"
"用 :func:`inspect.iscoroutinefunction`。\n"
"（由李佳昊和 Kumar Aditya 在 :gh:`122875` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了"
"下列类和函数："

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 "
"*loop_factory* 以使用想要的事件循环实现。"

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`::"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"对布尔类型 ``~True`` 或 ``~False`` 执行按位取反的操作自 Python 3.12 起已被弃"
"用，因为它会产生奇怪和不直观的结果 (``-2`` and ``-1``)。 请改用 ``not x`` 来"
"对布尔值执行逻辑否操作。 对于需要对下层整数执行按位取反操作的少数场合，请显式"
"地将其转换为 ``int`` (``~int(x)``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`："

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"调用 :func:`functools.reduce` 的 Python 实现并传入 *function* 或 *sequence* "
"作为关键字参数的做法自 Python 3.14 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`："

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"使用 *strm* 参数对自定义日志记录处理器提供支持的做法已被弃用并计划在 Python "
"3.16 中移除。 改为使用 *stream* 参数定义处理器。 （由 Mariusz Felisiak 在 :"
"gh:`115032` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""
"有效扩展以 \". \" 开头或在 :meth:`mimetypes.MimeTypes.add_type` 为空。 未加点"
"的扩展已弃用，在 Python 3.16 中将引发 :exc:`ValueError`。 （由 Hugo van "
"Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
":class:`!ExecError` 异常自 Python 3.14 起已被弃用。 它自 Python 3.4 起就未"
"被 :mod:`!shutil` 中的任何函数所使用，现在是 :exc:`RuntimeError` 的一个别名。"

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
":meth:`Class.get_methods <symtable.Class.get_methods>` 方法自 Python 3.14 起"
"被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
":func:`~sys._enablelegacywindowsfsencoding` 函数自 Python 3.13 起被弃用。 请"
"改用 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。"

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"自Python 3.14 起，:func:`!sysconfig.expand_makefile_vars` 函数已被弃用。请使"
"用 :func:`sysconfig.get_paths` 的 ``vars`` 参数代替。"

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性自 Python 3.13 起被弃用。"

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "计划在 Python 3.17 中移除"

#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`collections.abc`:"
msgstr ":mod:`collections.abc`:"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
":class:`collections.abc.ByteString` is scheduled for removal in Python 3.17."
msgstr ":class:`collections.abc.ByteString` 计划在 Python 3.17 中移除。"

#: ../../deprecations/pending-removal-in-3.17.rst:8
#: ../../deprecations/pending-removal-in-3.17.rst:36
msgid ""
"Use ``isinstance(obj, collections.abc.Buffer)`` to test if ``obj`` "
"implements the :ref:`buffer protocol <bufferobjects>` at runtime. For use in "
"type annotations, either use :class:`~collections.abc.Buffer` or a union "
"that explicitly specifies the types your code supports (e.g., ``bytes | "
"bytearray | memoryview``)."
msgstr ""
"使用 ``isinstance(obj, collections.abc.Buffer)`` 来测试 ``obj`` 是否在运行时"
"实现了 :ref:`缓冲区协议 <bufferobjects>`。 要用于类型标注，则使用 :class:"
"`~collections.abc.Buffer` 或是显式指明你的代码所支持类型的并集 (例如 ``bytes "
"| bytearray | memoryview``)。"

#: ../../deprecations/pending-removal-in-3.17.rst:14
#: ../../deprecations/pending-removal-in-3.17.rst:42
msgid ""
":class:`!ByteString` was originally intended to be an abstract class that "
"would serve as a supertype of both :class:`bytes` and :class:`bytearray`. "
"However, since the ABC never had any methods, knowing that an object was an "
"instance of :class:`!ByteString` never actually told you anything useful "
"about the object. Other common buffer types such as :class:`memoryview` were "
"also never understood as subtypes of :class:`!ByteString` (either at runtime "
"or by static type checkers)."
msgstr ""
":class:`!ByteString` 原本是想作为 :class:`bytes` 和 :class:`bytearray` 的超类"
"型的抽象基类提供。 不过，由于 ABC 不能有任何方法，知道一个对象是 :class:`!"
"ByteString` 的实例并不能真正告诉你有关该对象的任何有用信息。 其他常见缓冲区类"
"型如 :class:`memoryview` 同样不能被当作是 :class:`!ByteString` 的子类型（无论"
"是在运行时还是对于静态类型检查器）。"

#: ../../deprecations/pending-removal-in-3.17.rst:22
#: ../../deprecations/pending-removal-in-3.17.rst:50
msgid ""
"See :pep:`PEP 688 <688#current-options>` for more details. (Contributed by "
"Shantanu Jain in :gh:`91896`.)"
msgstr ""
"请参阅 :pep:`PEP 688 <688#current-options>` 了解详情。 （由 Shantanu Jain "
"在 :gh:`91896` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.17.rst:28
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"在 Python 3.14 之前，旧式的联合是通过私有类 ``typing._UnionGenericAlias`` 实"
"现的。实现已不再需要该类，但为向后兼容性保留了该类，并计划在 Python 3.17 中删"
"除。 用户应使用记录在案的内省助手函数，如 :func:`typing.get_origin` 和 :func:"
"`typing.get_args`，而不是依赖于私有的实现细节。"

#: ../../deprecations/pending-removal-in-3.17.rst:33
msgid ""
":class:`typing.ByteString`, deprecated since Python 3.9, is scheduled for "
"removal in Python 3.17."
msgstr ""
":class:`typing.ByteString` 自 Python 3.9 起已被弃用，计划在 Python 3.17 中移"
"除。"

#: ../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr "计划在 Python 3.19 中移除"

#: ../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""
"在非 Windows 平台上，通过设置 :attr:`~ctypes.Structure._pack_` 而非 :attr:"
"`~ctypes.Structure._layout_` ，隐式切换到与 MSVC 兼容的结构布局。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "计划在未来版本中移除"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr "嵌套参数组和嵌套互斥组已被弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传递给 :meth:`~argparse."
"ArgumentParser.add_argument_group` 的做法现在已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ":class:`argparse.FileType` 类型转换器已弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用："
"请改用 ``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:21
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, "
"``0if 1else 2``。 它允许像 ``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 "
"(它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f or x in y]``)。 如果数字类"
"字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, :keyword:`for`, :"
"keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` 中的一个将会引发"
"语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:29
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法"
"必须返回 :class:`int` 的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:32
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返"
"回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:35
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必"
"须返回 :class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:38
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已"
"被弃用；它应当仅作为单个位置参数被传入。 （由 Serhiy Storchaka 在 :gh:"
"`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:44
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并"
"由 :data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince "
"Roshan 在 :gh:`103636` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:49
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""
":mod:`codecs`：:func:`codecs.open` 请改用 :func:`open` 。 (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:51
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:54
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:56
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 ``datetime.datetime.now(tz=datetime."
"UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:58
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:61
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:65
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改"
"用 *optimization* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:68
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:70
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:73
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 :meth:"
"`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:76
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进"
"制模式。"

#: ../../deprecations/pending-removal-in-future.rst:79
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:81
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃"
"用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:84
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 "
"现在只接受 ASCII 数字序列作为数字引用。 字节串模式和替换字符串中的分组名称现"
"在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:91
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:93
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被"
"弃用；请改用 *onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:96
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:98
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 :meth:"
"`!selected_npn_protocol` 已被弃用：请改用 ALPN。"

#: ../../deprecations/pending-removal-in-future.rst:102
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:113
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:115
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 :meth:`~threading.Condition."
"notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使"
"用 :attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:119
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 :"
"attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:121
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:124
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:126
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"内部类 ``typing._UnionGenericAlias`` 不再用于实现 :class:`typing.Union`。为了"
"保护使用该私有类的用户的兼容性 ，将至少在 Python 3.17 之前提供兼容性。 （由 "
"Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:131
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的"
"做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:134
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:136
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:148
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:151
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` 的真"
"值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 "
"``len(elem)`` 或 ``elem is not None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:156
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` 已弃用，请改用 :func:`sys."
"_clear_internal_caches` 。"

#: ../../whatsnew/3.14.rst:2718
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.14.rst:2720
msgid ""
"Replaced the opcode :opcode:`!BINARY_SUBSCR` by the :opcode:`BINARY_OP` "
"opcode with the ``NB_SUBSCR`` oparg. (Contributed by Irit Katriel in :gh:"
"`100239`.)"
msgstr ""
"将操作码 :opcode:`!BINARY_SUBSCR` 替换为附带操作数 ``NB_SUBSCR`` 的 :opcode:"
"`BINARY_OP` 操作码。 （由 Irit Katriel 在 :gh:`100239` 中贡献。）"

#: ../../whatsnew/3.14.rst:2724
msgid ""
"Add the :opcode:`BUILD_INTERPOLATION` and :opcode:`BUILD_TEMPLATE` opcodes "
"to construct new :class:`~string.templatelib.Interpolation` and :class:"
"`~string.templatelib.Template` instances, respectively. (Contributed by "
"Lysandros Nikolaou and others in :gh:`132661`; see also :ref:`PEP 750: "
"Template strings <whatsnew314-template-string-literals>`)."
msgstr ""

#: ../../whatsnew/3.14.rst:2730
msgid ""
"Remove the :opcode:`!BUILD_CONST_KEY_MAP` opcode. Use :opcode:`BUILD_MAP` "
"instead. (Contributed by Mark Shannon in :gh:`122160`.)"
msgstr ""
"移除了 :opcode:`!BUILD_CONST_KEY_MAP` 操作码。 改用 :opcode:`BUILD_MAP`。 "
"（由 Mark Shannon 在 :gh:`122160` 中贡献。）"

#: ../../whatsnew/3.14.rst:2734
msgid ""
"Replace the :opcode:`!LOAD_ASSERTION_ERROR` opcode with :opcode:"
"`LOAD_COMMON_CONSTANT` and add support for loading :exc:"
"`NotImplementedError`."
msgstr ""
"将 :opcode:`!LOAD_ASSERTION_ERROR` 操作码替换为 :opcode:"
"`LOAD_COMMON_CONSTANT` 并添加对载入 :exc:`NotImplementedError` 的支持。"

#: ../../whatsnew/3.14.rst:2738
msgid ""
"Add the :opcode:`LOAD_FAST_BORROW` and :opcode:"
"`LOAD_FAST_BORROW_LOAD_FAST_BORROW` opcodes to reduce reference counting "
"overhead when the interpreter can prove that the reference in the frame "
"outlives the reference loaded onto the stack. (Contributed by Matt Page in :"
"gh:`130704`.)"
msgstr ""
"增加 :opcode:`LOAD_FAST_BORROW` 和 :opcode:"
"`LOAD_FAST_BORROW_LOAD_FAST_BORROW` 操作码用于在解释器能证明帧内引用的生命期"
"长于载入到栈的引用时减少引用计数开销。 （由 Matt Page 在 :gh:`130704` 中贡"
"献。）.)"

#: ../../whatsnew/3.14.rst:2743
msgid ""
"Add the :opcode:`LOAD_SMALL_INT` opcode, which pushes a small integer equal "
"to the ``oparg`` to the stack. The :opcode:`!RETURN_CONST` opcode is removed "
"as it is no longer used. (Contributed by Mark Shannon in :gh:`125837`.)"
msgstr ""
"增加 :opcode:`LOAD_SMALL_INT` 操作码，它会将一个等于 ``oparg`` 的小整数推入"
"栈。 :opcode:`!RETURN_CONST` 操作码已被移除因为它已不再被使用。 （由 Mark "
"Shannon 在 :gh:`125837` 中贡献。）.)"

#: ../../whatsnew/3.14.rst:2748
msgid ""
"Add the new :opcode:`LOAD_SPECIAL` instruction. Generate code for :keyword:"
"`with` and :keyword:`async with` statements using the new instruction. "
"Removed the :opcode:`!BEFORE_WITH` and :opcode:`!BEFORE_ASYNC_WITH` "
"instructions. (Contributed by Mark Shannon in :gh:`120507`.)"
msgstr ""
"新增 :opcode:`LOAD_SPECIAL` 指令。 为 :keyword:`with` 和 :keyword:`async "
"with` 语句生成代码将使用此新指令。 移除了 :opcode:`!BEFORE_WITH` 和 :opcode:"
"`!BEFORE_ASYNC_WITH` 指令。 （由 Mark Shannon 在 :gh:`120507` 中贡献。）"

#: ../../whatsnew/3.14.rst:2754
msgid ""
"Add the :opcode:`POP_ITER` opcode to support 'virtual' iterators. "
"(Contributed by Mark Shannon in :gh:`132554`.)"
msgstr ""
"增加 :opcode:`POP_ITER` 指令以支持 '虚拟' 迭代器。 （由 Mark Shannon 在 :gh:"
"`132554` 中贡献。）"

#: ../../whatsnew/3.14.rst:2759
msgid "Pseudo-instructions"
msgstr "伪指令"

#: ../../whatsnew/3.14.rst:2761
msgid ""
"Add the :opcode:`!ANNOTATIONS_PLACEHOLDER` pseudo instruction to support "
"partially executed module-level annotations with :ref:`deferred evaluation "
"of annotations <whatsnew314-deferred-annotations>`. (Contributed by Jelle "
"Zijlstra in :gh:`130907`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2766
msgid ""
"Add the :opcode:`!BINARY_OP_EXTEND` pseudo instruction, which executes a "
"pair of functions (guard and specialization functions) accessed from the "
"inline cache. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""
"增加 :opcode:`!BINARY_OP_EXTEND` 伪指令，它会执行从内联缓存中访问的一对函数"
"（守卫函数和特化函数）。 （由 Irit Katriel 在 :gh:`100239` 中贡献。）"

#: ../../whatsnew/3.14.rst:2771
msgid ""
"Add three specializations for :opcode:`CALL_KW`; :opcode:`!CALL_KW_PY` for "
"calls to Python functions, :opcode:`!CALL_KW_BOUND_METHOD` for calls to "
"bound methods, and :opcode:`!CALL_KW_NON_PY` for all other calls. "
"(Contributed by Mark Shannon in :gh:`118093`.)"
msgstr ""
"增加 :opcode:`CALL_KW` 的三个特化版本； :opcode:`!CALL_KW_PY` 用于对 Python "
"函数的调用，:opcode:`!CALL_KW_BOUND_METHOD` 用于对绑定方法的调用，而 :opcode:"
"`!CALL_KW_NON_PY` 用于所有其他调用。 （由 Mark Shannon 在 :gh:`118093` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2777
msgid ""
"Add the :opcode:`JUMP_IF_TRUE` and :opcode:`JUMP_IF_FALSE` pseudo "
"instructions, conditional jumps which do not impact the stack. Replaced by "
"the sequence ``COPY 1``, ``TO_BOOL``, ``POP_JUMP_IF_TRUE/FALSE``. "
"(Contributed by Irit Katriel in :gh:`124285`.)"
msgstr ""
"增加 :opcode:`JUMP_IF_TRUE` 和 :opcode:`JUMP_IF_FALSE` 伪指令，即不影响栈的条"
"件跳转。 由序列 ``COPY 1``, ``TO_BOOL``, ``POP_JUMP_IF_TRUE/FALSE`` 替换。 "
"（由 Irit Katriel 在 :gh:`124285` 中贡献。）"

#: ../../whatsnew/3.14.rst:2782
msgid ""
"Add the :opcode:`!LOAD_CONST_MORTAL` pseudo instruction. (Contributed by "
"Mark Shannon in :gh:`128685`.)"
msgstr ""
"增加 :opcode:`!LOAD_CONST_MORTAL` 伪指令。 （由 Mark Shannon 在 :gh:`128685` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:2785
msgid ""
"Add the :opcode:`LOAD_CONST_IMMORTAL` pseudo instruction, which does the "
"same as :opcode:`!LOAD_CONST`, but is more efficient for immortal objects. "
"(Contributed by Mark Shannon in :gh:`125837`.)"
msgstr ""
"增加 :opcode:`LOAD_CONST_IMMORTAL` 伪指令，它会执行与 :opcode:`!LOAD_CONST` "
"相同的操作，但对永生对象更有效率。 （由 Mark Shannon 在 :gh:`125837` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2790
msgid ""
"Add the :opcode:`NOT_TAKEN` pseudo instruction, used by :mod:`sys."
"monitoring` to record branch events (such as :monitoring-event:"
"`BRANCH_LEFT`). (Contributed by Mark Shannon in :gh:`122548`.)"
msgstr ""
"增加 :opcode:`NOT_TAKEN` 伪指令，由 :mod:`sys.monitoring` 用来记录分支事件 "
"(如 :monitoring-event:`BRANCH_LEFT`)。 （由 Mark Shannon 在 :gh:`122548` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2796
msgid "C API changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.14.rst:2801
msgid "Python configuration C API"
msgstr ""

#: ../../whatsnew/3.14.rst:2803
msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""
"新增 :ref:`PyInitConfig C API <pyinitconfig_api>` 用于配置 Python 初始化过"
"程，无需依赖 C 结构体，同时支持未来进行 ABI 兼容性变更。"

#: ../../whatsnew/3.14.rst:2807
msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding :c:"
"func:`PyInitConfig_AddModule` which can be used to add a built-in extension "
"module; a feature previously referred to as the \"inittab\"."
msgstr ""

#: ../../whatsnew/3.14.rst:2811
msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr ""
"新增 :c:func:`PyConfig_Get` 和 :c:func:`PyConfig_Set` 函数，用于获取和设置当"
"前运行时配置。"

#: ../../whatsnew/3.14.rst:2814
msgid ""
":pep:`587` 'Python Initialization Configuration' unified all the ways to "
"configure Python's initialization. This PEP also unifies the configuration "
"of Python's preinitialization and initialization in a single API. Moreover, "
"this PEP only provides a single choice to embed Python, instead of having "
"two 'Python' and 'Isolated' choices (PEP 587), to further simplify the API."
msgstr ""

#: ../../whatsnew/3.14.rst:2821
msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an "
"intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython's CLI, including its "
"configuration mechanisms)."
msgstr ""

#: ../../whatsnew/3.14.rst:2826 ../../whatsnew/3.14.rst:2853
#: ../../whatsnew/3.14.rst:2873
msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr "（由 Victor Stinner 在 :gh:`107954` 中贡献。）"

#: ../../whatsnew/3.14.rst:2828
msgid ":pep:`741` and :pep:`587`"
msgstr ""

#: ../../whatsnew/3.14.rst:2832
msgid "New features in the C API"
msgstr "C API 中的新特性"

#: ../../whatsnew/3.14.rst:2834
msgid ""
"Add :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION`, two new "
"macros for bit-packing Python version numbers. This is useful for "
"comparisons with :c:var:`Py_Version` or :c:macro:`PY_VERSION_HEX`. "
"(Contributed by Petr Viktorin in :gh:`128629`.)"
msgstr ""
"增加 :c:func:`Py_PACK_VERSION` 和 :c:func:`Py_PACK_FULL_VERSION`，两个用于对 "
"Python 版本号进行位打包操作的新宏。 这在比较 :c:var:`Py_Version` 或 :c:macro:"
"`PY_VERSION_HEX` 时很有用处。 （由 Petr Viktorin 在 :gh:`128629` 中贡献。）"

#: ../../whatsnew/3.14.rst:2840
msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in :gh:"
"`121645`.)"
msgstr ""
"新增 :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` 函数，其功能类似于"
"Python中的 ``sep.join(iterable)`` 操作。（由Victor Stinner在 :gh:`121645` 中"
"贡献。）"

#: ../../whatsnew/3.14.rst:2844
msgid ""
"Add functions to manipulate the configuration of the current runtime Python "
"interpreter (:ref:`PEP 741: Python configuration C API <whatsnew314-capi-"
"config>`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2848
msgid ":c:func:`PyConfig_Get`"
msgstr ":c:func:`PyConfig_Get`"

#: ../../whatsnew/3.14.rst:2849
msgid ":c:func:`PyConfig_GetInt`"
msgstr ":c:func:`PyConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2850
msgid ":c:func:`PyConfig_Set`"
msgstr ":c:func:`PyConfig_Set`"

#: ../../whatsnew/3.14.rst:2851
msgid ":c:func:`PyConfig_Names`"
msgstr ":c:func:`PyConfig_Names`"

#: ../../whatsnew/3.14.rst:2855
msgid ""
"Add functions to configure Python initialization (:ref:`PEP 741: Python "
"configuration C API <whatsnew314-capi-config>`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2858
msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ":c:func:`Py_InitializeFromInitConfig`"

#: ../../whatsnew/3.14.rst:2859
msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ":c:func:`PyInitConfig_AddModule`"

#: ../../whatsnew/3.14.rst:2860
msgid ":c:func:`PyInitConfig_Create`"
msgstr ":c:func:`PyInitConfig_Create`"

#: ../../whatsnew/3.14.rst:2861
msgid ":c:func:`PyInitConfig_Free`"
msgstr ":c:func:`PyInitConfig_Free`"

#: ../../whatsnew/3.14.rst:2862
msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ":c:func:`PyInitConfig_FreeStrList`"

#: ../../whatsnew/3.14.rst:2863
msgid ":c:func:`PyInitConfig_GetError`"
msgstr ":c:func:`PyInitConfig_GetError`"

#: ../../whatsnew/3.14.rst:2864
msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ":c:func:`PyInitConfig_GetExitCode`"

#: ../../whatsnew/3.14.rst:2865
msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ":c:func:`PyInitConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2866
msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ":c:func:`PyInitConfig_GetStr`"

#: ../../whatsnew/3.14.rst:2867
msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ":c:func:`PyInitConfig_GetStrList`"

#: ../../whatsnew/3.14.rst:2868
msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ":c:func:`PyInitConfig_HasOption`"

#: ../../whatsnew/3.14.rst:2869
msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ":c:func:`PyInitConfig_SetInt`"

#: ../../whatsnew/3.14.rst:2870
msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ":c:func:`PyInitConfig_SetStr`"

#: ../../whatsnew/3.14.rst:2871
msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ":c:func:`PyInitConfig_SetStrList`"

#: ../../whatsnew/3.14.rst:2875
msgid ""
"Add :c:func:`Py_fopen` function to open a file. This works similarly to the "
"standard C :c:func:`!fopen` function, instead accepting a Python object for "
"the *path* parameter and setting an exception on error. The corresponding "
"new :c:func:`Py_fclose` function should be used to close a file. "
"(Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""
"增加 :c:func:`Py_fopen` 函数用于打开文件。 该函数功能类似于标准 C :c:func:`!"
"fopen` 函数，但它接受一个 Python 对象作为 *path* 形参并会在出错时设置异常。 "
"对应的新增函数 :c:func:`Py_fclose` 函数应当用来关闭文件。 （由 Victor "
"Stinner 在 :gh:`127350` 中贡献。）"

#: ../../whatsnew/3.14.rst:2883
msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""
"新增 :c:func:`Py_HashBuffer` 函数用于计算并返回缓冲区的哈希值。（由 Antoine "
"Pitrou 和 Victor Stinner 在 :gh:`122854` 中贡献。）"

#: ../../whatsnew/3.14.rst:2886
msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and :c:func:"
"`PyImport_ImportModuleAttrString` helper functions to import a module and "
"get an attribute of the module. (Contributed by Victor Stinner in :gh:"
"`128911`.)"
msgstr ""
"新增 :c:func:`PyImport_ImportModuleAttr` 和 :c:func:"
"`PyImport_ImportModuleAttrString` 辅助函数，用于导入模块并获取该模块的属性。"
"（由 Victor Stinner 在 :gh:`128911` 中贡献。）"

#: ../../whatsnew/3.14.rst:2891
msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an "
"ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in :"
"gh:`105201`.)"
msgstr ""
"新增 :c:func:`PyIter_NextItem` 函数以替代返回值含义模糊的 :c:func:"
"`PyIter_Next` 函数。（由 Irit Katriel 和 Erlend Aasland 在 :gh:`105201` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:2895
msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""
"新增 :c:func:`PyLong_GetSign` 函数用于获取 :class:`int` 对象的符号位。（由 "
"Sergey B Kirpichev 在 :gh:`116560` 中贡献。）"

#: ../../whatsnew/3.14.rst:2898
msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and :c:func:"
"`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""
"新增 :c:func:`PyLong_IsPositive`、:c:func:`PyLong_IsNegative` 和 :c:func:"
"`PyLong_IsZero` 三个函数，分别用于检查 :c:type:`PyLongObject` 是否为正数、负"
"数或零。（由 James Roy 和 Sergey B Kirpichev 在 :gh:`126061` 中贡献。）"

#: ../../whatsnew/3.14.rst:2903
msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers to/from Python :class:"
"`int` objects:"
msgstr ""
"新增用于在 C ``<stdint.h>`` 数字类型与 Python :class:`int` 对象之间进行转换的"
"新函数："

#: ../../whatsnew/3.14.rst:2906
msgid ":c:func:`PyLong_AsInt32`"
msgstr ":c:func:`PyLong_AsInt32`"

#: ../../whatsnew/3.14.rst:2907
msgid ":c:func:`PyLong_AsInt64`"
msgstr ":c:func:`PyLong_AsInt64`"

#: ../../whatsnew/3.14.rst:2908
msgid ":c:func:`PyLong_AsUInt32`"
msgstr ":c:func:`PyLong_AsUInt32`"

#: ../../whatsnew/3.14.rst:2909
msgid ":c:func:`PyLong_AsUInt64`"
msgstr ":c:func:`PyLong_AsUInt64`"

#: ../../whatsnew/3.14.rst:2910
msgid ":c:func:`PyLong_FromInt32`"
msgstr ":c:func:`PyLong_FromInt32`"

#: ../../whatsnew/3.14.rst:2911
msgid ":c:func:`PyLong_FromInt64`"
msgstr ":c:func:`PyLong_FromInt64`"

#: ../../whatsnew/3.14.rst:2912
msgid ":c:func:`PyLong_FromUInt32`"
msgstr ":c:func:`PyLong_FromUInt32`"

#: ../../whatsnew/3.14.rst:2913
msgid ":c:func:`PyLong_FromUInt64`"
msgstr ":c:func:`PyLong_FromUInt64`"

#: ../../whatsnew/3.14.rst:2915
msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr "（由 Victor Stinner 在 :gh:`120389` 中贡献。）"

#: ../../whatsnew/3.14.rst:2917
msgid ""
"Add a new import and export API for Python :class:`int` objects (:pep:`757`):"
msgstr "新增用于 Python :class:`int` 对象的导入导出API（参见 :pep:`757`）："

#: ../../whatsnew/3.14.rst:2920
msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ":c:func:`PyLong_GetNativeLayout`"

#: ../../whatsnew/3.14.rst:2921
msgid ":c:func:`PyLong_Export`"
msgstr ":c:func:`PyLong_Export`"

#: ../../whatsnew/3.14.rst:2922
msgid ":c:func:`PyLong_FreeExport`"
msgstr ":c:func:`PyLong_FreeExport`"

#: ../../whatsnew/3.14.rst:2923
msgid ":c:func:`PyLongWriter_Create`"
msgstr ":c:func:`PyLongWriter_Create`"

#: ../../whatsnew/3.14.rst:2924
msgid ":c:func:`PyLongWriter_Finish`"
msgstr ":c:func:`PyLongWriter_Finish`"

#: ../../whatsnew/3.14.rst:2925
msgid ":c:func:`PyLongWriter_Discard`"
msgstr ":c:func:`PyLongWriter_Discard`"

#: ../../whatsnew/3.14.rst:2927
msgid "(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr "（由 Sergey B Kirpichev 和 Victor Stinner 在 :gh:`102471` 中贡献。）"

#: ../../whatsnew/3.14.rst:2929
msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:func:"
"`PyMonitoring_FireBranchRightEvent` for generating :monitoring-event:"
"`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, respectively. "
"(Contributed by Mark Shannon in :gh:`122548`.)"
msgstr ""
"增加 :c:func:`PyMonitoring_FireBranchLeftEvent` 和 :c:func:"
"`PyMonitoring_FireBranchRightEvent` 分别用于生成 :monitoring-event:"
"`BRANCH_LEFT` 和 :monitoring-event:`BRANCH_RIGHT` 事件。 （由 Mark Shannon "
"在 :gh:`122548` 中贡献。）"

#: ../../whatsnew/3.14.rst:2935
msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""
"新增 :c:func:`PyType_Freeze` 函数用于将类型设为不可变。（由 Victor Stinner "
"在 :gh:`121654` 中贡献。）"

#: ../../whatsnew/3.14.rst:2938
msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the type "
"checking issue mentioned in :pep:`PEP 630 <630#type-checking>`. (Contributed "
"in :gh:`124153`.)"
msgstr ""
"增加 :c:func:`PyType_GetBaseByToken` 和 :c:data:`Py_tp_token` 槽位用于简化超"
"类的标识，该特性尝试解决在 :pep:`PEP 630 <630#type-checking>` 中提到的类型检"
"查问题。 （在 :gh:`124153` 中贡献。）"

#: ../../whatsnew/3.14.rst:2943
msgid ""
"Add a new :c:func:`PyUnicode_Equal` function to test if two strings are "
"equal. The function is also added to the Limited C API. (Contributed by "
"Victor Stinner in :gh:`124502`.)"
msgstr ""
"新增 :c:func:`PyUnicode_Equal` 函数用于测试两个字符串是否相等。 此函数也被加"
"入到受限 C API 中。 （由 Victor Stinner 在 :gh:`124502` 中贡献。）"

#: ../../whatsnew/3.14.rst:2948
msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object, with the following functions:"
msgstr ""
"新增 :c:type:`PyUnicodeWriter` API 用于创建 Python :class:`str` 对象，具有下"
"列函数："

#: ../../whatsnew/3.14.rst:2951
msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ":c:func:`PyUnicodeWriter_Create`"

#: ../../whatsnew/3.14.rst:2952
msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"

#: ../../whatsnew/3.14.rst:2953
msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ":c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:2954
msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ":c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:2955
msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ":c:func:`PyUnicodeWriter_Format`"

#: ../../whatsnew/3.14.rst:2956
msgid ":c:func:`PyUnicodeWriter_WriteASCII`"
msgstr ":c:func:`PyUnicodeWriter_WriteASCII`"

#: ../../whatsnew/3.14.rst:2957
msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:2958
msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ":c:func:`PyUnicodeWriter_WriteRepr`"

#: ../../whatsnew/3.14.rst:2959
msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ":c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:2960
msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ":c:func:`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:2961
msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ":c:func:`PyUnicodeWriter_WriteUCS4`"

#: ../../whatsnew/3.14.rst:2962
msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ":c:func:`PyUnicodeWriter_WriteUTF8`"

#: ../../whatsnew/3.14.rst:2963
msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteWideChar`"

#: ../../whatsnew/3.14.rst:2965
msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr "（由 Victor Stinner 在 :gh:`119182` 中贡献。）"

#: ../../whatsnew/3.14.rst:2967
msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""
"在 :c:func:`PyArg_ParseTuple` 及相关函数中，``k`` 和 ``K`` 格式现在会优先使"
"用 :meth:`~object.__index__` 方法（如果可用），与其他整数格式的处理方式保持一"
"致。（由 Serhiy Storchaka 在 :gh:`112068` 中贡献。）"

#: ../../whatsnew/3.14.rst:2972
msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"produces a Python :class:`bool` object from a C integer. (Contributed by "
"Pablo Galindo in :issue:`45325`.)"
msgstr ""
"在 :c:func:`Py_BuildValue` 中增加对新的 ``p`` 格式单元的支持，它可根据 C 整数"
"产生 Python :class:`bool` 对象。 （由 Pablo Galindo 在 :issue:`45325` 中贡"
"献。）.)"

#: ../../whatsnew/3.14.rst:2976
msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining if an object is :term:"
"`immortal`, for debugging purposes. (Contributed by Peter Bierma in :gh:"
"`128509`.)"
msgstr ""
"增加 :c:func:`PyUnstable_IsImmortal` 以确定一个对象是否为 :term:`immortal`，"
"用于调试目的。 （由 Peter Bierma 在 :gh:`128509` 中贡献。）"

#: ../../whatsnew/3.14.rst:2980
msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred "
"reference counting, as outlined in :pep:`703`."
msgstr ""
"新增 :c:func:`PyUnstable_Object_EnableDeferredRefcount` 函数用于启用延迟引用"
"计数功能，该功能如 :pep:`703` 所述。"

#: ../../whatsnew/3.14.rst:2983
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""
"新增 :c:func:`PyUnstable_Object_IsUniquelyReferenced` 函数，作为 :term:`自由"
"线程 <free threading>` 构建环境下 ``Py_REFCNT(op) == 1`` 的替代方案。（由 "
"Peter Bierma 在 :gh:`133140` 中贡献）"

#: ../../whatsnew/3.14.rst:2988
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if :c:func:"
"`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API "
"functions. (Contributed by Sam Gross in :gh:`133164`.)"
msgstr ""
"增加 :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` 用于确定一个对象"
"是否为解释器操作数栈上的唯一临时对象。 该函数在某些情况下可被用作通过检查 :c:"
"func:`Py_REFCNT` 是否为 ``1`` 来判断作为参数传给 C API 函数的 Python 对象的替"
"代方案。 （由 Sam Gross 在 :gh:`133164` 中贡献。）"

#: ../../whatsnew/3.14.rst:2998
msgid "Limited C API changes"
msgstr "受限 C API 的变化"

#: ../../whatsnew/3.14.rst:3000
msgid ""
"In the limited C API version 3.14 and newer, :c:func:`Py_TYPE` and :c:func:"
"`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and :"
"gh:`124127`.)"
msgstr ""
"在受限 C API 3.14 及更新版本中，:c:func:`Py_TYPE` 和 :c:func:`Py_REFCNT` 现在"
"被实现为不透明函数来隐藏实现细节。 （由 Victor Stinner 在 :gh:`120600` 和 :"
"gh:`124127` 中贡献。）"

#: ../../whatsnew/3.14.rst:3005
msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM`, and :c:macro:`PySequence_Fast_ITEMS` macros from "
"the limited C API, since they have always been broken in the limited C API. "
"(Contributed by Victor Stinner in :gh:`91417`.)"
msgstr ""
"从受限 C API 移除了 :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM` 和 :c:macro:`PySequence_Fast_ITEMS` 宏，因为它们在"
"受限 C API 始终是不可用的。 （由 Victor Stinner 在 :gh:`91417` 中贡献。）"

#: ../../whatsnew/3.14.rst:3016
msgid "Removed C APIs"
msgstr "被移除的 C API"

#: ../../whatsnew/3.14.rst:3018
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated in Python 3.12, and now raises a :exc:`TypeError`. "
"(Contributed by Nikita Sobolev in :gh:`119775`.)"
msgstr ""
"使用可变基类创建 :c:data:`不可变类型 <Py_TPFLAGS_IMMUTABLETYPE>` 的做法自 "
"Python 3.12 起已被弃用，现在将会引发 :exc:`TypeError`。 （由 Nikita Sobolev "
"在 :gh:`119775` 中贡献。）"

#: ../../whatsnew/3.14.rst:3023
msgid ""
"Remove ``PyDictObject.ma_version_tag`` member, which was deprecated in "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""
"移除在 Python 3.12 中已被弃用的 ``PyDictObject.ma_version_tag`` 成员。 请改"
"用 :c:func:`PyDict_AddWatcher` API。 （由 Sam Gross 在 :gh:`124296` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:3028
msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a :term:"
"`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by Victor "
"Stinner in :gh:`129033`.)"
msgstr ""
"移除私有函数 ``_Py_InitializeMain()``。该函数是 :pep:`587` 在 Python 3.8 中引"
"入的 :term:`provisional API`。 （由 Victor Stinner 在 :gh:`129033` 中贡献。）"

#: ../../whatsnew/3.14.rst:3032
msgid ""
"Remove the undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and :c:member:"
"`!PyThreadState.c_recursion_remaining`. These were added in 3.13 and have "
"been removed without deprecation. Use :c:func:`Py_EnterRecursiveCall` to "
"guard against runaway recursion in C code. (Removed by Petr Viktorin in :gh:"
"`133079`, see also :gh:`130396`.)"
msgstr ""
"移除了未写入文档的 API :c:macro:`!Py_C_RECURSION_LIMIT` 和 :c:member:`!"
"PyThreadState.c_recursion_remaining`。 它们在 3.13 中增加并且未宣布弃用即被移"
"除。 请在 C 代码中使用 :c:func:`Py_EnterRecursiveCall` 来防范无限递归问题。 "
"（由 Petr Viktorin 在 :gh:`133079` 中移除，另请参阅 :gh:`130396`。）"

#: ../../whatsnew/3.14.rst:3043
msgid "Deprecated C APIs"
msgstr "已弃用的 C API"

#: ../../whatsnew/3.14.rst:3045
msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is now :term:`soft deprecated`. Use :c:"
"macro:`!Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in :gh:"
"`120026`.)"
msgstr ""
"现在 :c:macro:`!Py_HUGE_VAL` 宏已被设为 :term:`soft deprecated`。 请改用 :c:"
"macro:`!Py_INFINITY`。 （由 Sergey B Kirpichev 在 :gh:`120026` 中贡献。）"

#: ../../whatsnew/3.14.rst:3049
msgid ""
"The :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY`, and :c:macro:`!"
"Py_IS_FINITE` macros are now :term:`soft deprecated`. Use :c:macro:`!"
"isnan`, :c:macro:`!isinf` and :c:macro:`!isfinite` instead, available from :"
"file:`math.h` since C99. (Contributed by Sergey B Kirpichev in :gh:`119613`.)"
msgstr ""
"现在 :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` 和 :c:macro:`!"
"Py_IS_FINITE` 等宏已被设为 :term:`soft deprecated`。 请改用 :c:macro:`!"
"isnan`, :c:macro:`!isinf` 和 :c:macro:`!isfinite`，它们自 C99 起在 :file:"
"`math.h` 中可用。 （由 Sergey B Kirpichev 在 :gh:`119613` 中贡献。）"

#: ../../whatsnew/3.14.rst:3055
msgid ""
"Non-tuple sequences are now deprecated as argument for the ``(items)`` "
"format unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing "
"<arg-parsing>` functions if *items* contains format units which store a :ref:"
"`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed reference`. "
"(Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""
"非元组序列当 *items* 包含存储 :ref:`借入缓冲区 <c-arg-borrowed-buffer>` 或 :"
"term:`borrowed reference` 的格式单元的情况下在 :c:func:`PyArg_ParseTuple` 和"
"其他 :ref:`参数解析 <arg-parsing>` 函数中用作 ``(items)`` 格式单元参数的做法"
"现在已被弃用。 （由 Serhiy Storchaka 在 :gh:`50333` 中贡献。）"

#: ../../whatsnew/3.14.rst:3062
msgid ""
"The ``_PyMonitoring_FireBranchEvent`` function is now deprecated and should "
"be replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:"
"func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""
"现在 ``_PyMonitoring_FireBranchEvent`` 函数已被弃用并应当替换为对 :c:func:"
"`PyMonitoring_FireBranchLeftEvent` 和 :c:func:"
"`PyMonitoring_FireBranchRightEvent` 的调用。"

#: ../../whatsnew/3.14.rst:3067
msgid ""
"The previously undocumented function :c:func:`PySequence_In` is now :term:"
"`soft deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed "
"by Yuki Kobayashi in :gh:`127896`.)"
msgstr ""
"之前未写入文档的函数 :c:func:`PySequence_In` 现在被设为 :term:`soft "
"deprecated`。 请改用 :c:func:`PySequence_Contains`。 （由 Yuki Kobayashi 在 :"
"gh:`127896` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: 改用 :c:func:"
"`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT`: 改用 :c:"
"func:`PyWeakref_GetRef`。 在 Python 3.12 及更旧的版本中可以使用 `pythoncapi-"
"compat 项目 <https://github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:"
"`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` 类型和 :c:macro:`!Py_UNICODE_WIDE` 宏：改用 :c:type:"
"`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: 改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: 改用 :c:func:`PyCodec_Decode`；请注意"
"某些编解码器 (例如 \"base64\") 可能返回 :class:`str` 以外的类型，比如 :class:"
"`bytes`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: 改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: 使用 :c:func:`PyCodec_Encode` 代替；请"
"注意，某些编解码器（如 \"base64\"）可能返回 :class:`bytes` 之外的类型，如 :"
"class:`str`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python 初始化函数， Python 3.13 中弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`:使用  :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>`   (:data:`sys.path`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`:使用  :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) 代替。如果需要处理 :ref:`virtual "
"environments<venv-def>` ，请使用 :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`:使用 :c:func:"
"`PyConfig_Get(\"base_exec_prefix\")<PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) 代替。如果需要处理 :ref:`virtual environments<venv-"
"def>` ，请使用 :c:func:`PyConfig_Get(\"exec_prefix\")<PyConfig_Get>` (:data:"
"`sys.exec_prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 使用 :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` 或 :envvar:`PYTHONHOME` 环境变量代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 <https://"
"github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:`PyConfig_Get` 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "用于配置 Python 的初始化的函数，在 Python 3.11 中已弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: 改为设置 :c:member:`PyConfig.program_name`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: 改为设置 :c:member:`PyConfig.home`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: 改为清除 :data:`sys.warnoptions` 和 :data:"
"`!warnings.filters`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "全局配置变量："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: 改用 :c:member:`PyConfig.parser_debug` 或 :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: 改用 :c:member:`PyConfig.verbose` 或 :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: 改用 :c:member:`PyConfig.quiet` 或 :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: 改用 :c:member:`PyConfig.interactive` 或 :c:"
"func:`PyConfig_Get(\"interactive\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: 改用 :c:member:`PyConfig.inspect` 或 :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: 改用 :c:member:`PyConfig.optimization_level` 或 :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: 改用 :c:member:`PyConfig.site_import` 或 :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: 改用 :c:member:`PyConfig.bytes_warning` 或 :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings` 或 :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment` "
"或 :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode` "
"或 :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig."
"user_site_directory` 或 :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio` "
"或 :c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` "
"和 :c:member:`PyConfig.hash_seed` 或 :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated` 或 :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` 或 :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 :c:member:`PyConfig."
"legacy_windows_stdio` 或 :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: 使用 :c:member:`PyConfig."
"filesystem_encoding` 或 :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 :c:member:`PyConfig."
"filesystem_errors` 或 :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` 或 :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` 代替。 (参见 :c:func:"
"`Py_PreInitialize`)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用，以设"
"置这些选项。或者使用 :c:func:`PyConfig_Get` 在运行时获取这些选项。"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr "捆绑的 ``libmpdec`` 副本。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr "计划在 Python 3.18 中移除"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr "以下私有函数已被弃用，并计划在 Python 3.18 中移除："

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`：使用 :c:func:`PyBytes_Join`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: 使用 :c:func:"
"`PyDict_GetItemStringRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: 使用 :c:func:`PyDict_Pop`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`：使用 :c:func:`PyLong_GetSign`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:11
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` 和 :c:func:`!_PyLong_New`：使用 :c:func:"
"`PyLongWriter_Create`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`：使用 :c:func:"
"`PyThreadState_GetUnchecked`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`：使用 :c:func:`PyUnicode_AsUTF8`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:15
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: 将 ``_PyUnicodeWriter_Init(&writer)`` 替换"
"为 :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:18
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: 将 ``_PyUnicodeWriter_Finish(&writer)`` "
"替换为 :c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:21
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: 将 "
"``_PyUnicodeWriter_Dealloc(&writer)`` 替换为 :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:24
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: 将 "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` 替换为 :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:27
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: 将 "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` 替换为 :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:30
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: 将 "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` 替换为 :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:33
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: 请将 "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` 替换为 :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:36
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: 将 "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` 替换为 :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`：使用 :c:func:`Py_HashPointer`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:42
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`：使用 :c:func:`Py_fopen`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:44
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older. "
"(Contributed by Victor Stinner in :gh:`128863`.)"
msgstr ""
"`pythoncapi-compat 项目 <https://github.com/python/pythoncapi-compat/>`__ 可"
"被用于在 Python 3.13 及更早版本中获取这些新的公有函数。 （由 Victor Stinner "
"在 :gh:`128863` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 已被弃用，将被移除，但目前尚未确定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: 自 Python 3.8 起不再需要。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: 改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: 改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: 改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: 改用 :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: 自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: 改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: 改用 :c:func:`!_PyErr_ChainExceptions1`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash` 成员：改为调用 :c:func:`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "线程本地存储 (TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: 改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: 改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: 改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: 改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: 改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: 自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.14.rst:3086
msgid "Build changes"
msgstr ""

#: ../../whatsnew/3.14.rst:3088
msgid ""
":pep:`776`: Emscripten is now an officially supported platform at :pep:`tier "
"3 <11#tier-3>`. As a part of this effort, more than 25 bugs in `Emscripten "
"libc`__ were fixed. Emscripten now includes support for :mod:`ctypes`, :mod:"
"`termios`, and :mod:`fcntl`, as well as experimental support for the new :"
"ref:`default interactive shell <tut-interactive>`. (Contributed by R. Hood "
"Chatham in :gh:`127146`, :gh:`127683`, and :gh:`136931`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:3098
msgid "Official Android binary releases are now provided on python.org__."
msgstr ""

#: ../../whatsnew/3.14.rst:3102
msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""
"生成 :file:`configure` 文件现在需要 GNU Autoconf 2.72 版本。（由 Erlend "
"Aasland 在 :gh:`115765` 中贡献。）"

#: ../../whatsnew/3.14.rst:3105
msgid ""
"``wasm32-unknown-emscripten`` is now a :pep:`11` tier 3 platform. "
"(Contributed by R. Hood Chatham in :gh:`127146`, :gh:`127683`, and :gh:"
"`136931`.)"
msgstr ""
"``wasm32-unknown-emscripten`` 现已成为 :pep:`11` 标准中的第三级（Tier 3）支持"
"平台。（由 R. Hood Chatham 在 :gh:`127146`、:gh:`127683` 和 :gh:`136931` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:3108
msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off "
"with :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin "
"in :gh:`82909`.)"
msgstr ""
"现在可以通过 :c:expr:`Py_NO_LINK_LIB` 关闭基于 ``#pragma`` 与 ``python3*."
"lib`` 的链接。（由 Jean-Christophe Fillion-Robin 在 :gh:`82909` 中贡献。）"

#: ../../whatsnew/3.14.rst:3112
msgid ""
"CPython now enables a set of recommended compiler options by default for "
"improved security. Use the :option:`--disable-safety` :file:`configure` "
"option to disable them, or the :option:`--enable-slower-safety` option for a "
"larger set of compiler options, albeit with a performance cost."
msgstr ""
"CPython 现在默认启用了一组推荐的编译器选项以增强安全性。如需禁用这些选项，可"
"使用 :option:`--disable-safety` :file:`configure` 选项；若希望启用更大范围的"
"编译器安全选项（但会牺牲性能），则可使用 :option:`--enable-slower-safety` 选"
"项。"

#: ../../whatsnew/3.14.rst:3118
msgid ""
"The ``WITH_FREELISTS`` macro and ``--without-freelists`` :file:`configure` "
"option have been removed."
msgstr ""
"``WITH_FREELISTS`` 宏和 ``--without-freelists`` :file:`configure` 选项已被移"
"除。"

#: ../../whatsnew/3.14.rst:3121
msgid ""
"The new :file:`configure` option :option:`--with-tail-call-interp` may be "
"used to enable the experimental tail call interpreter. See :ref:`whatsnew314-"
"tail-call-interpreter` for further details."
msgstr ""

#: ../../whatsnew/3.14.rst:3125
msgid ""
"To disable the new remote debugging support, use the :option:`--without-"
"remote-debug` :file:`configure` option. This may be useful for security "
"reasons."
msgstr ""
"要禁用新的远程调试支持，请使用 :option:`--without-remote-debug` :file:"
"`configure` 选项。 出于安全原因，这可能会有用。"

#: ../../whatsnew/3.14.rst:3129
msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee "
"in :gh:`127592`.)"
msgstr ""
"iOS 和 macOS 应用程序现在可配置为将 ``stdout`` 和 ``stderr`` 输出内容重定向至"
"系统日志。（由 Russell Keith-Magee 在 :gh:`127592` 中贡献。）"

#: ../../whatsnew/3.14.rst:3133
msgid ""
"The iOS testbed is now able to stream test output while the test is running. "
"The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""
"iOS 测试平台现已支持在测试运行时实时流式传输测试输出，并可用于运行除 CPython "
"之外的其他项目测试套件。（由 Russell Keith-Magee 在 :gh:`127592` 中贡献。）"

#: ../../whatsnew/3.14.rst:3142
msgid ":file:`build-details.json`"
msgstr ":file:`build-details.json`"

#: ../../whatsnew/3.14.rst:3144
msgid ""
"Installations of Python now contain a new file, :file:`build-details.json`. "
"This is a static JSON document containing build details for CPython, to "
"allow for introspection without needing to run code. This is helpful for use-"
"cases such as Python launchers, cross-compilation, and so on."
msgstr ""
"现在的 Python 安装包中包含一个新文件：:file:`build-details.json`。这是一个静"
"态的 JSON 文档，包含 CPython 的构建详情，无需运行代码即可进行内省。这对于 "
"Python 启动器、交叉编译等使用场景很有帮助。"

#: ../../whatsnew/3.14.rst:3150
msgid ""
":file:`build-details.json` must be installed in the platform-independent "
"standard library directory. This corresponds to the :ref:`'stdlib' "
"<installation_paths>` :mod:`sysconfig` installation path, which can be found "
"by running ``sysconfig.get_path('stdlib')``."
msgstr ""
":file:`build-details.json` 必须安装在与平台无关的标准库目录中。这对应于 :ref:"
"`'stdlib' <installation_paths>` :mod:`sysconfig` 安装路径，可通过运行 "
"``sysconfig.get_path('stdlib')`` 找到该路径。"

#: ../../whatsnew/3.14.rst:3156
msgid ""
":pep:`739` -- ``build-details.json`` 1.0 -- a static description file for "
"Python build details"
msgstr ""
":pep:`739` —— ``build-details.json`` 1.0——Python 构建详情的静态描述文件"

#: ../../whatsnew/3.14.rst:3163
msgid "Discontinuation of PGP signatures"
msgstr "PGP 签名的停用"

#: ../../whatsnew/3.14.rst:3165
msgid ""
"PGP (Pretty Good Privacy) signatures will not be provided for releases of "
"Python 3.14 or future versions. To verify CPython artifacts, users must use "
"`Sigstore verification materials <https://www.python.org/downloads/metadata/"
"sigstore/>`__. Releases have been signed using Sigstore_ since Python 3.11."
msgstr ""
"Python 3.14 及未来的版本将不再提供 PGP (Pretty Good Privacy) 签名。 要验证 "
"CPython 制品，用户必须使用 `Sigstore 验证材料 <https://www.python.org/"
"downloads/metadata/sigstore/>`__。 自 Python 3.11 起的发布版就已采用 "
"Sigstore_ 进行签名。"

#: ../../whatsnew/3.14.rst:3171
msgid "This change in release process was specified in :pep:`761`."
msgstr "发布流程中的这一变更已在 :pep:`761` 中明确规定。"

#: ../../whatsnew/3.14.rst:3179
msgid "Free-threaded Python is officially supported"
msgstr "自由线程版 Python 已获官方支持"

#: ../../whatsnew/3.14.rst:3181
msgid ""
"The free-threaded build of Python is now supported and no longer "
"experimental. This is the start of `phase II <https://discuss.python.org/"
"t/37075>`__ where free-threaded Python is officially supported but still "
"optional."
msgstr ""

#: ../../whatsnew/3.14.rst:3185
msgid ""
"The free-threading team are confident that the project is on the right path, "
"and appreciate the continued dedication from everyone working to make free-"
"threading ready for broader adoption across the Python community."
msgstr ""

#: ../../whatsnew/3.14.rst:3189
msgid ""
"With these recommendations and the acceptance of this PEP, the Python "
"developer community should broadly advertise that free-threading is a "
"supported Python build option now and into the future, and that it will not "
"be removed without a proper deprecation schedule."
msgstr ""

#: ../../whatsnew/3.14.rst:3194
msgid ""
"Any decision to transition to `phase III <https://discuss.python.org/"
"t/37075>`__, with free-threading as the default or sole build of Python is "
"still undecided, and dependent on many factors both within CPython itself "
"and the community. This decision is for the future."
msgstr ""

#: ../../whatsnew/3.14.rst:3201
msgid ":pep:`779`"
msgstr ":pep:`779`"

#: ../../whatsnew/3.14.rst:3203
msgid "`PEP 779's acceptance <https://discuss.python.org/t/84319/123>`__"
msgstr "`PEP 779 的接受 <https://discuss.python.org/t/84319/123>`__"

#: ../../whatsnew/3.14.rst:3209
msgid "Binary releases for the experimental just-in-time compiler"
msgstr "实验性即时编译器（JIT）的二进制发布版本"

#: ../../whatsnew/3.14.rst:3211
msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting :envvar:"
"`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream source "
"builds and redistributors can use the :option:`--enable-experimental-jit=yes-"
"off` configuration option for similar behavior."
msgstr ""
"官方 macOS 和 Windows 发布版二进制文件现已包含 *实验性* 即时编译（JIT）器。虽"
"然不建议在生产环境中使用，但可通过设置环境变量 :envvar:`PYTHON_JIT=1 "
"<PYTHON_JIT>` 进行测试。下游源码构建和再分发方可使用配置选项 :option:`--"
"enable-experimental-jit=yes-off` 实现类似行为。"

#: ../../whatsnew/3.14.rst:3218
msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` "
"namespace. :func:`sys._jit.is_available` can be used to determine if the "
"current executable supports JIT compilation, while :func:`sys._jit."
"is_enabled` can be used to tell if JIT compilation has been enabled for the "
"current process."
msgstr ""
"该JIT编译器尚处于早期开发阶段，性能表现存在波动：启用后根据工作负载不同，可能"
"产生10%的性能下降至20%的性能提升。为便于测试评估，:data:`sys._jit` 命名空间提"
"供了一组内省函数：:func:`sys._jit.is_available` 用于检测当前可执行文件是否支"
"持JIT编译，而 :func:`sys._jit.is_available` 则可判断当前进程是否已启用JIT编译"
"功能。"

#: ../../whatsnew/3.14.rst:3226
msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or :mod:"
"`profile`, continue to work without modification). Free-threaded builds do "
"not support JIT compilation."
msgstr ""
"当前最显著的功能缺失是原生调试器（如 ``gdb``）和性能分析工具（如 ``perf``）无"
"法展开JIT调用栈（而Python原生调试器如 :mod:`pdb` 和性能分析器如 :mod:"
"`profile` 仍可无需修改直接使用）。此外，自由线程构建版本暂不支持JIT编译功能。"

#: ../../whatsnew/3.14.rst:3231
msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr "如遇任何错误或严重性能退化问题，请务必提交报告！"

#: ../../whatsnew/3.14.rst:3233
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.14.rst:3237
msgid "Porting to Python 3.14"
msgstr "移植到 Python 3.14"

#: ../../whatsnew/3.14.rst:3239
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.14.rst:3244
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.14.rst:3246
msgid ""
"On Unix platforms other than macOS, *forkserver* is now the default :ref:"
"`start method <multiprocessing-start-methods>` for :mod:`multiprocessing` "
"and :class:`~concurrent.futures.ProcessPoolExecutor`, instead of *fork*."
msgstr ""

#: ../../whatsnew/3.14.rst:3250
msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""
"请参阅 :ref:`(1) <whatsnew314-concurrent-futures-start-method>` 和 :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` 了解详情。"

#: ../../whatsnew/3.14.rst:3253
msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of :mod:"
"`multiprocessing` or :mod:`concurrent.futures`, see the :ref:`forkserver "
"restrictions <multiprocessing-programming-forkserver>`."
msgstr ""
"如果你在 :mod:`multiprocessing` 或 :mod:`concurrent.futures` 中遇到 :exc:"
"`NameError` 或 pickle 错误，请参阅 :ref:`forkserver 的限制 <multiprocessing-"
"programming-forkserver>`。"

#: ../../whatsnew/3.14.rst:3257
msgid ""
"This change does not affect Windows or macOS, where :ref:`'spawn' "
"<multiprocessing-start-method-spawn>` remains the default start method."
msgstr ""

#: ../../whatsnew/3.14.rst:3260
msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""
":class:`functools.partial` 现在是一个方法描述符。若需保持原有行为，请将其包装"
"在 :func:`staticmethod` 中。（由 Serhiy Storchaka 和 Dominykas Grigonis 在 :"
"gh:`121027` 中贡献。）"

#: ../../whatsnew/3.14.rst:3264
msgid ""
"The :ref:`garbage collector is now incremental <whatsnew314-incremental-"
"gc>`, which means that the behavior of :func:`gc.collect` changes slightly:"
msgstr ""
":ref:`垃圾回收器现在是增量式的 <whatsnew314-incremental-gc>`，这意味着 :func:"
"`gc.collect` 的行为有轻微改变："

#: ../../whatsnew/3.14.rst:3271
msgid ""
"The :func:`locale.nl_langinfo` function now temporarily sets the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""
":func:`locale.nl_langinfo` 函数现在会在某些情况下临时设置 ``LC_CTYPE`` 区域设"
"置。这种临时修改会影响其他线程。（由 Serhiy Storchaka 在 :gh:`69998` 中贡"
"献。）"

#: ../../whatsnew/3.14.rst:3276
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` 现在是 :class:`typing.Union` 的别名，这会导致部分行"
"为发生变化。更多细节请参见 :ref:`上文 <whatsnew314-typing-union>`。（由 "
"Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:3281
msgid ""
"The runtime behavior of annotations has changed in various ways; see :ref:"
"`above <whatsnew314-deferred-annotations>` for details. While most code that "
"interacts with annotations should continue to work, some undocumented "
"details may behave differently."
msgstr ""

#: ../../whatsnew/3.14.rst:3286
msgid ""
"As part of making the :mod:`mimetypes` CLI public, it now exits with ``1`` "
"on failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Error messages are now printed to stderr."
msgstr ""

#: ../../whatsnew/3.14.rst:3291
msgid ""
"The ``\\B`` pattern in regular expression now matches the empty string when "
"given as the entire pattern, which may cause behavioural changes."
msgstr ""

#: ../../whatsnew/3.14.rst:3294
msgid ""
"On FreeBSD, :data:`sys.platform` no longer contains the major version number."
msgstr "在 FreeBSD 上，:data:`sys.platform` 不再包含主版本号。"

#: ../../whatsnew/3.14.rst:3300
msgid "Changes in annotations (:pep:`649` and :pep:`749`)"
msgstr "标注中的变化 (:pep:`649` 和 :pep:`749`)"

#: ../../whatsnew/3.14.rst:3302
msgid ""
"This section contains guidance on changes that may be needed to annotations "
"or Python code that interacts with or introspects annotations, due to the "
"changes related to :ref:`deferred evaluation of annotations <whatsnew314-"
"deferred-annotations>`."
msgstr ""

#: ../../whatsnew/3.14.rst:3307
msgid ""
"In the majority of cases, working code from older versions of Python will "
"not require any changes."
msgstr ""

#: ../../whatsnew/3.14.rst:3312
msgid "Implications for annotated code"
msgstr "注解代码的影响"

#: ../../whatsnew/3.14.rst:3314
msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr ""
"如果在代码中定义注解（例如用于静态类型检查器），那么这一变更可能不会产生影"
"响：你可以继续保持与之前Python版本相同的注解书写方式。"

#: ../../whatsnew/3.14.rst:3318
msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""
"你很可能可以移除注解中的引号字符串（这些通常用于前向引用）。同样地，如果使用 "
"``from __future__ import annotations`` 来避免在注解中书写字符串，当你仅支持 "
"Python 3.14 及更新版本时，很可能可以移除该导入。不过，如果依赖读取注解的第三"
"方库，这些库可能需要相应修改以支持无引号注解，才能正常工作。"

#: ../../whatsnew/3.14.rst:3328
msgid "Implications for readers of ``__annotations__``"
msgstr "访问 ``__annotations__`` 的影响"

#: ../../whatsnew/3.14.rst:3330
msgid ""
"If your code reads the :attr:`~object.__annotations__` attribute on objects, "
"you may want to make changes in order to support code that relies on "
"deferred evaluation of annotations. For example, you may want to use :func:"
"`annotationlib.get_annotations` with the :attr:`~annotationlib.Format."
"FORWARDREF` format, as the :mod:`dataclasses` module now does."
msgstr ""

#: ../../whatsnew/3.14.rst:3337
msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of "
"some of the functionality of the :mod:`annotationlib` module, such as the :"
"class:`~annotationlib.Format` enum and the :func:`~annotationlib."
"get_annotations` function. These can be used to write cross-version code "
"that takes advantage of the new behavior in Python 3.14."
msgstr ""
"外部包 :pypi:`typing_extensions` 提供了 :mod:`annotationlib` 模块部分功能的向"
"后兼容实现，包括 :class:`~annotationlib.Format` 枚举和 :func:`~annotationlib."
"get_annotations` 函数。这些可用于编写跨版本代码，以利用 Python 3.14 中的新行"
"为。"

#: ../../whatsnew/3.14.rst:3346
msgid "Related changes"
msgstr "相关变更"

#: ../../whatsnew/3.14.rst:3348
msgid ""
"The changes in Python 3.14 are designed to rework how :attr:`!"
"__annotations__` works at runtime while minimizing breakage to code that "
"contains annotations in source code and to code that reads :attr:`!"
"__annotations__`. However, if you rely on undocumented details of the "
"annotation behavior or on private functions in the standard library, there "
"are many ways in which your code may not work in Python 3.14. To safeguard "
"your code against future changes, only use the documented functionality of "
"the :mod:`annotationlib` module."
msgstr ""

#: ../../whatsnew/3.14.rst:3357
msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use :func:`annotationlib."
"get_annotate_from_class_namespace` during class construction and :func:"
"`annotationlib.get_annotations` afterwards."
msgstr ""
"特别需要注意的是，不要直接从类型对象的命名空间字典属性中读取注解。在类构造期"
"间应使用 :func:`annotationlib.get_annotate_from_class_namespace` 函数，之后则"
"使用 :func:`annotationlib.get_annotations` 函数。"

#: ../../whatsnew/3.14.rst:3362
msgid ""
"In previous releases, it was sometimes possible to access class annotations "
"from an instance of an annotated class. This behavior was undocumented and "
"accidental, and will no longer work in Python 3.14."
msgstr ""
"在之前的版本中，有时可以通过带注解类的实例访问类注解。这种行为属于未文档化的"
"意外实现，在 Python 3.14 中将不再有效。"

#: ../../whatsnew/3.14.rst:3368
msgid "``from __future__ import annotations``"
msgstr "``from __future__ import annotations``"

#: ../../whatsnew/3.14.rst:3370
msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` :ref:`future statement <future>`, which turns all annotations "
"into strings."
msgstr ""
"在 Python 3.7 中，:pep:`563` 引入了 ``from __future__ import annotations`` :"
"ref:`future 语句 <future>`，这会将所有标注转为字符串。"

#: ../../whatsnew/3.14.rst:3373
msgid ""
"However, this statement is now deprecated and it is expected to be removed "
"in a future version of Python. This removal will not happen until after "
"Python 3.13 reaches its end of life in 2029, being the last version of "
"Python without support for deferred evaluation of annotations."
msgstr ""
"不过，这条语句现在已被弃用并预计会在未来的 Python 中移除。 此项移除将不会立即"
"执行而是直到 2029 年 Python 3.13 的生命期结束之后，它是不支持标注迟延求值的最"
"后一个 Python 版本。"

#: ../../whatsnew/3.14.rst:3379
msgid ""
"In Python 3.14, the behavior of code using ``from __future__ import "
"annotations`` is unchanged."
msgstr ""
"在 Python 3.14 中，使用 ``from __future__ import annotations`` 的代码的行为将"
"没有变化。"

#: ../../whatsnew/3.14.rst:3384
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.14.rst:3386
msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to :c:func:"
"`Py_Initialize`.  Any issues arising from this behavior will normally result "
"in crashes during the execution of the subsequent call to :c:func:"
"`Py_Initialize` from accessing uninitialized memory. To fix, use an address "
"sanitizer to identify any use-after-free coming from an interned string and "
"deallocate it during module shutdown. (Contributed by Eddie Elizondo in :gh:"
"`113601`.)"
msgstr ""
":c:func:`Py_Finalize` 现在会删除所有已驻留字符串。 这一变更将不向下兼容任何在"
"调用 :c:func:`Py_Finalize` 后仍拥有驻留字符串并在后续调用 :c:func:"
"`Py_Initialize` 时重复使用的 C 扩展模块。 此行为引发的任何问题通常会导致在后"
"续 :c:func:`Py_Initialize` 调用执行期间因访问未初始化内存而引发崩溃。 要修复"
"此问题，应使用地址静化器来标识任何来自驻留字符串的释放后使用并在模块关闭期间"
"释放它。 （由 Eddie Elizondo 在 :gh:`113601` 中贡献。）"

#: ../../whatsnew/3.14.rst:3396
msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a :"
"exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""
":ref:`Unicode异常对象 <unicodeexceptions>` C API现会在异常参数不是 :exc:"
"`UnicodeError` 对象时抛出 :exc:`TypeError` 异常。（由Bénédikt Tran在 :gh:"
"`127691` 中贡献）"

#: ../../whatsnew/3.14.rst:3403
msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is "
"not referenced by any other code should instead use :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer replacement."
msgstr ""
"解释器在将对象加载到操作数栈时，会通过尽可能 :term:`借用 <borrowed "
"reference>` 引用来避免部分引用计数的修改。 这可能导致引用计数值比先前 Python "
"版本更小。 之前通过检查 :c:func:`Py_REFCNT` 是否为 ``1`` 来判断函数参数是否未"
"被其他代码引用的 C 扩展 API，现在应改用更安全的替代方案 :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary`。"

#: ../../whatsnew/3.14.rst:3412
msgid "Private functions promoted to public C APIs:"
msgstr "以下私有函数已提升为公开 C API："

#: ../../whatsnew/3.14.rst:3414
msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr "``_PyBytes_Join()``：:c:func:`PyBytes_Join`"

#: ../../whatsnew/3.14.rst:3415
msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr "``_PyLong_IsNegative()``：:c:func:`PyLong_IsNegative`"

#: ../../whatsnew/3.14.rst:3416
msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr "``_PyLong_IsPositive()``：:c:func:`PyLong_IsPositive`"

#: ../../whatsnew/3.14.rst:3417
msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr "``_PyLong_IsZero()``：:c:func:`PyLong_IsZero`"

#: ../../whatsnew/3.14.rst:3418
msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr "``_PyLong_Sign()``：:c:func:`PyLong_GetSign`"

#: ../../whatsnew/3.14.rst:3419
msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr "``_PyUnicodeWriter_Dealloc()``：:c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:3420
msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr "``_PyUnicodeWriter_Finish()``：:c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:3421
msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr "``_PyUnicodeWriter_Init()``: 使用 :c:func:`PyUnicodeWriter_Create`"

#: ../../whatsnew/3.14.rst:3422
msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr "``_PyUnicodeWriter_Prepare()``: (无替代)"

#: ../../whatsnew/3.14.rst:3423
msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr "``_PyUnicodeWriter_PrepareKind()``: (无替代)"

#: ../../whatsnew/3.14.rst:3424
msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr "``_PyUnicodeWriter_WriteChar()``：:c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:3425
msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr "``_PyUnicodeWriter_WriteStr()``：:c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:3426
msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: :c:func:"
"`PyUnicodeWriter_WriteSubstring`"
msgstr ""
"``_PyUnicodeWriter_WriteSubstring()``：:c:func:"
"`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:3427
msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_EQ()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:3428
msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_Equal()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:3429
msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` 和 :c:func:`PyConfig_GetInt`"

#: ../../whatsnew/3.14.rst:3430
msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"

#: ../../whatsnew/3.14.rst:3431
msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr "``_Py_fopen_obj()``：:c:func:`Py_fopen`"

#: ../../whatsnew/3.14.rst:3432
msgid "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"
msgstr "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"

#: ../../whatsnew/3.14.rst:3434
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr ""
"在 Python 3.13 和更早的版本中可以使用 `pythoncapi-compat project`_ 来充分利用"
"这些新函数。"
