# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 叶浚安 <ye.pandaaaa906@gmail.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# ww song <sww4718168@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 14:21+0000\n"
"PO-Revision-Date: 2025-06-13 14:23+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/concurrent.interpreters.rst:2
msgid ""
":mod:`!concurrent.interpreters` --- Multiple interpreters in the same process"
msgstr ":mod:`!concurrent.interpreters` --- 同一进程中的多个解释器"

#: ../../library/concurrent.interpreters.rst:12
msgid "**Source code:** :source:`Lib/concurrent/interpreters.py`"
msgstr "**源代码:** :source:`Lib/concurrent/interpreters.py`"

#: ../../library/concurrent.interpreters.rst:18
msgid "Introduction"
msgstr "概述"

#: ../../library/concurrent.interpreters.rst:20
msgid ""
"The :mod:`!concurrent.interpreters` module constructs higher-level "
"interfaces on top of the lower level :mod:`!_interpreters` module."
msgstr ""
":mod:`!concurrent.interpreters` 模块在低层级的 :mod:`!_interpreters` 模块之上"
"构造了更高层级的接口。"

#: ../../library/concurrent.interpreters.rst:27
msgid ":ref:`isolating-extensions-howto`"
msgstr ":ref:`isolating-extensions-howto`"

#: ../../library/concurrent.interpreters.rst:28
msgid "how to update an extension module to support multiple interpreters"
msgstr "如何将扩展模块更新为支持多解释器"

#: ../../library/concurrent.interpreters.rst:30
msgid ":pep:`554`"
msgstr ":pep:`554`"

#: ../../library/concurrent.interpreters.rst:32
msgid ":pep:`734`"
msgstr ":pep:`734`"

#: ../../library/concurrent.interpreters.rst:34
msgid ":pep:`684`"
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了"
"解详情。"

#: ../../library/concurrent.interpreters.rst:42
msgid "Key details"
msgstr ""

#: ../../library/concurrent.interpreters.rst:44
msgid ""
"Before we dive into examples, there are a small number of details to keep in "
"mind about using multiple interpreters:"
msgstr ""

#: ../../library/concurrent.interpreters.rst:47
msgid "isolated, by default"
msgstr ""

#: ../../library/concurrent.interpreters.rst:48
msgid "no implicit threads"
msgstr ""

#: ../../library/concurrent.interpreters.rst:49
msgid "not all PyPI packages support use in multiple interpreters yet"
msgstr ""

#: ../../library/concurrent.interpreters.rst:53
msgid ""
"In the context of multiple interpreters, \"isolated\" means that different "
"interpreters do not share any state.  In practice, there is some process-"
"global data they all share, but that is managed by the runtime."
msgstr ""

#: ../../library/concurrent.interpreters.rst:59
msgid "Reference"
msgstr "参考"

#: ../../library/concurrent.interpreters.rst:61
msgid "This module defines the following functions:"
msgstr "这个模块定义了以下函数："

#: ../../library/concurrent.interpreters.rst:65
msgid ""
"Return a :class:`list` of :class:`Interpreter` objects, one for each "
"existing interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:70
msgid ""
"Return an :class:`Interpreter` object for the currently running interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:75
msgid "Return an :class:`Interpreter` object for the main interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:79
msgid ""
"Initialize a new (idle) Python interpreter and return a :class:`Interpreter` "
"object for it."
msgstr ""

#: ../../library/concurrent.interpreters.rst:84
msgid "Interpreter objects"
msgstr ""

#: ../../library/concurrent.interpreters.rst:88
msgid "A single interpreter in the current process."
msgstr ""

#: ../../library/concurrent.interpreters.rst:90
msgid ""
"Generally, :class:`Interpreter` shouldn't be called directly. Instead, use :"
"func:`create` or one of the other module functions."
msgstr ""

#: ../../library/concurrent.interpreters.rst:95
#: ../../library/concurrent.interpreters.rst:101
msgid "(read-only)"
msgstr ""

#: ../../library/concurrent.interpreters.rst:97
msgid "The interpreter's ID."
msgstr ""

#: ../../library/concurrent.interpreters.rst:103
msgid "A string describing where the interpreter came from."
msgstr ""

#: ../../library/concurrent.interpreters.rst:107
msgid ""
"Return ``True`` if the interpreter is currently executing code in its :mod:`!"
"__main__` module and ``False`` otherwise."
msgstr ""

#: ../../library/concurrent.interpreters.rst:112
msgid "Finalize and destroy the interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:116
msgid ""
"Bind \"shareable\" objects in the interpreter's :mod:`!__main__` module."
msgstr ""

#: ../../library/concurrent.interpreters.rst:121
msgid "Run the given source code in the interpreter (in the current thread)."
msgstr ""

#: ../../library/concurrent.interpreters.rst:125
msgid ""
"Return the result of calling running the given function in the interpreter "
"(in the current thread)."
msgstr ""

#: ../../library/concurrent.interpreters.rst:130
msgid "Run the given function in the interpreter (in a new thread)."
msgstr ""

#: ../../library/concurrent.interpreters.rst:133
msgid "Exceptions"
msgstr "异常"

#: ../../library/concurrent.interpreters.rst:137
msgid ""
"This exception, a subclass of :exc:`Exception`, is raised when an "
"interpreter-related error happens."
msgstr ""

#: ../../library/concurrent.interpreters.rst:142
msgid ""
"This exception, a subclass of :exc:`InterpreterError`, is raised when the "
"targeted interpreter no longer exists."
msgstr ""

#: ../../library/concurrent.interpreters.rst:147
msgid ""
"This exception, a subclass of :exc:`InterpreterError`, is raised when the "
"running code raised an uncaught exception."
msgstr ""

#: ../../library/concurrent.interpreters.rst:152
msgid "A basic snapshot of the exception raised in the other interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:158
msgid ""
"This exception, a subclass of :exc:`TypeError`, is raised when an object "
"cannot be sent to another interpreter."
msgstr ""

#: ../../library/concurrent.interpreters.rst:166
msgid "Basic usage"
msgstr "基本使用"

#: ../../library/concurrent.interpreters.rst:168
msgid "Creating an interpreter and running code in it::"
msgstr ""

#: ../../library/concurrent.interpreters.rst:170
msgid ""
"from concurrent import interpreters\n"
"\n"
"interp = interpreters.create()\n"
"\n"
"# Run in the current OS thread.\n"
"\n"
"interp.exec('print(\"spam!\")')\n"
"\n"
"interp.exec(\"\"\"if True:\n"
"    print('spam!')\n"
"    \"\"\")\n"
"\n"
"from textwrap import dedent\n"
"interp.exec(dedent(\"\"\"\n"
"    print('spam!')\n"
"    \"\"\"))\n"
"\n"
"def run():\n"
"    print('spam!')\n"
"\n"
"interp.call(run)\n"
"\n"
"# Run in new OS thread.\n"
"\n"
"t = interp.call_in_thread(run)\n"
"t.join()"
msgstr ""
