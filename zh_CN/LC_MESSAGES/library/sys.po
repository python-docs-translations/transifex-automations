# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:55+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sys.rst:2
msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ":mod:`sys` --- 系统相关的形参和函数"

#: ../../library/sys.rst:9
msgid ""
"This module provides access to some variables used or maintained by the "
"interpreter and to functions that interact strongly with the interpreter. It "
"is always available."
msgstr ""
"该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这"
"些函数会影响解释器。本模块总是可用的。"

#: ../../library/sys.rst:16
msgid ""
"On POSIX systems where Python was built with the standard ``configure`` "
"script, this contains the ABI flags as specified by :pep:`3149`."
msgstr ""
"在POSIX系统上，以标准的 ``configure`` 脚本构建的 Python 中，这个变量会包含 :"
"pep:`3149` 中定义的ABI标签。"

#: ../../library/sys.rst:19
msgid ""
"Default flags became an empty string (``m`` flag for pymalloc has been "
"removed)."
msgstr "默认的 flags 变为了空字符串（用于 pymalloc 的 ``m`` 旗标已经移除）"

#: ../../library/sys.rst:28
msgid ""
"Append the callable *hook* to the list of active auditing hooks for the "
"current (sub)interpreter."
msgstr "将可调用的对象 *hook* 附加到当前（子）解释器的活动的审计钩子列表中。"

#: ../../library/sys.rst:31
msgid ""
"When an auditing event is raised through the :func:`sys.audit` function, "
"each hook will be called in the order it was added with the event name and "
"the tuple of arguments. Native hooks added by :c:func:`PySys_AddAuditHook` "
"are called first, followed by hooks added in the current (sub)interpreter.  "
"Hooks can then log the event, raise an exception to abort the operation, or "
"terminate the process entirely."
msgstr ""
"当通过 :func:`sys.audit` 函数引发审计事件时，每个钩子将按照其被加入的先后顺序"
"被调用，调用时会传入事件名称和参数元组。 由 :c:func:`PySys_AddAuditHook` 添加"
"的原生钩子会先被调用，然后是当前（子）解释器中添加的钩子。 接下来这些钩子会记"
"录事件，引发异常来中止操作，或是完全终止进程。"

#: ../../library/sys.rst:40
msgid ""
"Calling :func:`sys.addaudithook` will itself raise an auditing event named "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`RuntimeError`, the new hook will not be added "
"and the exception suppressed. As a result, callers cannot assume that their "
"hook has been added unless they control all existing hooks."
msgstr ""
"调用 :func:`sys.addaudithook` 时它自身将引发一个名为 ``sys.addaudithook`` 的"
"审计事件且不附带参数。 如果任何现有的钩子引发了派生自 :class:`RuntimeError` "
"的异常，则新的钩子不会被添加并且该异常会被抑制。 其结果就是，调用者无法确保他"
"们的钩子已经被添加，除非他们控制了全部现有的钩子。"

#: ../../library/sys.rst:47
msgid ""
"See the :ref:`audit events table <audit-events>` for all events raised by "
"CPython, and :pep:`578` for the original design discussion."
msgstr ""
"请参阅 :ref:`审计事件表 <audit-events>` 以获取由 CPython 引发的所有事件，并参"
"阅 :pep:`578` 了解最初的设计讨论。"

#: ../../library/sys.rst:54
msgid ""
"Exceptions derived from :class:`Exception` but not :class:`RuntimeError` are "
"no longer suppressed."
msgstr ""
"派生自 :class:`Exception` （而非 :class:`RuntimeError` ）的异常不会被抑制。"

#: ../../library/sys.rst:59
msgid ""
"When tracing is enabled (see :func:`settrace`), Python hooks are only traced "
"if the callable has a ``__cantrace__`` member that is set to a true value. "
"Otherwise, trace functions will skip the hook."
msgstr ""
"启用跟踪时（参阅 :func:`settrace` ），仅当可调用对象（钩子）的 "
"``__cantrace__`` 成员设置为 true 时，才会跟踪该钩子。否则，跟踪功能将跳过该钩"
"子。"

#: ../../library/sys.rst:66
msgid ""
"The list of command line arguments passed to a Python script. ``argv[0]`` is "
"the script name (it is operating system dependent whether this is a full "
"pathname or not).  If the command was executed using the :option:`-c` "
"command line option to the interpreter, ``argv[0]`` is set to the string ``'-"
"c'``.  If no script name was passed to the Python interpreter, ``argv[0]`` "
"is the empty string."
msgstr ""
"一个列表，其中包含了被传递给 Python 脚本的命令行参数。 ``argv[0]`` 为脚本的名"
"称（是否是完整的路径名取决于操作系统）。如果是通过 Python 解释器的命令行参"
"数 :option:`-c` 来执行的， ``argv[0]`` 会被设置成字符串 ``'-c'`` 。如果没有脚"
"本名被传递给 Python 解释器， ``argv[0]`` 为空字符串。"

#: ../../library/sys.rst:72
msgid ""
"To loop over the standard input, or the list of files given on the command "
"line, see the :mod:`fileinput` module."
msgstr ""
"为了遍历标准输入，或者通过命令行传递的文件列表，参照 :mod:`fileinput` 模块"

#: ../../library/sys.rst:76
msgid ""
"On Unix, command line arguments are passed by bytes from OS.  Python decodes "
"them with filesystem encoding and \"surrogateescape\" error handler. When "
"you need original bytes, you can get it by ``[os.fsencode(arg) for arg in "
"sys.argv]``."
msgstr ""
"在 Unix 上，系统传递的命令行参数是字节类型的。Python 使用文件系统编码和 "
"\"surrogateescape\" 错误处理方案对它们进行解码。当需要原始字节时，可以通过 "
"``[os.fsencode(arg) for arg in sys.argv]`` 来获取。"

#: ../../library/sys.rst:88
msgid ""
"Raise an auditing event and trigger any active auditing hooks. *event* is a "
"string identifying the event, and *args* may contain optional arguments with "
"more information about the event.  The number and types of arguments for a "
"given event are considered a public and stable API and should not be "
"modified between releases."
msgstr ""
"引发一个审计事件并触发任何激活的审计钩子。 *event* 是一个用于标识事件的字符"
"串，*args* 会包含有关事件的更多信息的可选参数。 特定事件的参数的数量和类型会"
"被视为是公有的稳定 API 且不应当在版本之间进行修改。"

#: ../../library/sys.rst:94
msgid ""
"For example, one auditing event is named ``os.chdir``. This event has one "
"argument called *path* that will contain the requested new working directory."
msgstr ""
"例如，有一个审计事件的名称为 ``os.chdir``。 此事件具有一个名为 *path* 的参"
"数，该参数将包含所请求的新工作目录。"

#: ../../library/sys.rst:98
msgid ""
":func:`sys.audit` will call the existing auditing hooks, passing the event "
"name and arguments, and will re-raise the first exception from any hook. In "
"general, if an exception is raised, it should not be handled and the process "
"should be terminated as quickly as possible. This allows hook "
"implementations to decide how to respond to particular events: they can "
"merely log the event or abort the operation by raising an exception."
msgstr ""
":func:`sys.audit` 将调用现有的审计钩子，传入事件名称和参数，并将重新引发来自"
"任何钩子的第一个异常。 通常来说，如果有一个异常被引发，则它不应当被处理且其进"
"程应当被尽可能快地终止。 这将允许钩子实现来决定对特定事件要如何反应：它们可以"
"只是将事件写入日志或是通过引发异常来中止操作。"

#: ../../library/sys.rst:106
msgid ""
"Hooks are added using the :func:`sys.addaudithook` or :c:func:"
"`PySys_AddAuditHook` functions."
msgstr ""
"钩子程序由 :func:`sys.addaudithook` 或 :c:func:`PySys_AddAuditHook` 函数添"
"加。"

#: ../../library/sys.rst:109
msgid ""
"The native equivalent of this function is :c:func:`PySys_Audit`. Using the "
"native function is preferred when possible."
msgstr "与本函数相等效的原生函数是 :c:func:`PySys_Audit`，应尽量使用原生函数。"

#: ../../library/sys.rst:112
msgid ""
"See the :ref:`audit events table <audit-events>` for all events raised by "
"CPython."
msgstr ""
"参阅 :ref:`审计事件表 <audit-events>` 以获取 CPython 定义的所有审计事件。"

#: ../../library/sys.rst:120
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as :"
"data:`exec_prefix`. If not running in a :ref:`virtual environment <venv-"
"def>`, the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas :data:"
"`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base "
"Python installation (the one which the virtual environment was created from)."
msgstr ""
"在 ``site.py`` 运行之前， Python 启动的时候被设置为跟 :data:`exec_prefix` 同"
"样的值。如果不是运行在 :ref:`虚拟环境 <venv-def>` 中，两个值会保持相同；如果 "
"``site.py`` 发现处于一个虚拟环境中， :data:`prefix` 和 :data:`exec_prefix` 将"
"会指向虚拟环境。然而 :data:`base_prefix` 和 :data:`base_exec_prefix` 将仍然会"
"指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）"

#: ../../library/sys.rst:134
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as :"
"data:`prefix`. If not running in a :ref:`virtual environment <venv-def>`, "
"the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas :data:"
"`base_prefix` and :data:`base_exec_prefix` will remain pointing to the base "
"Python installation (the one which the virtual environment was created from)."
msgstr ""
"在 ``site.py`` 运行之前， Python 启动的时候被设置为跟 :data:`prefix` 同样的"
"值。如果不是运行在 :ref:`虚拟环境 <venv-def>` 中, 两个值会保持相同；如果 "
"``site.py`` 发现处于一个虚拟环境中， :data:`prefix` 和 :data:`exec_prefix` 将"
"会指向虚拟环境。然而 :data:`base_prefix` 和 :data:`base_exec_prefix` 将仍然会"
"指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）"

#: ../../library/sys.rst:147
msgid ""
"An indicator of the native byte order.  This will have the value ``'big'`` "
"on big-endian (most-significant byte first) platforms, and ``'little'`` on "
"little-endian (least-significant byte first) platforms."
msgstr ""
"本地字节顺序的指示符。在大端序（最高有效位优先）操作系统上值为 ``'big'`` ，在"
"小端序（最低有效位优先）操作系统上为 ``'little'`` 。"

#: ../../library/sys.rst:154
msgid ""
"A tuple of strings giving the names of all modules that are compiled into "
"this Python interpreter.  (This information is not available in any other "
"way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""

#: ../../library/sys.rst:161
msgid ""
"Call ``func(*args)``, while tracing is enabled.  The tracing state is saved, "
"and restored afterwards.  This is intended to be called from a debugger from "
"a checkpoint, to recursively debug some other code."
msgstr ""
"在启用跟踪时调用 ``func(*args)``  来保存跟踪状态，然后恢复跟踪状态。这将从检"
"查点的调试器调用，以便递归地调试其他的一些代码。"

#: ../../library/sys.rst:168
msgid "A string containing the copyright pertaining to the Python interpreter."
msgstr "一个字符串，包含了 Python 解释器有关的版权信息"

#: ../../library/sys.rst:173
msgid ""
"Clear the internal type cache. The type cache is used to speed up attribute "
"and method lookups. Use the function *only* to drop unnecessary references "
"during reference leak debugging."
msgstr ""
"清除内部的类型缓存。类型缓存是为了加速查找方法和属性的。在调试引用泄漏的时候"
"调用这个函数 *只会* 清除不必要的引用。"

#: ../../library/sys.rst:177 ../../library/sys.rst:193
msgid ""
"This function should be used for internal and specialized purposes only."
msgstr "这个函数应该只在内部为了一些特定的目的使用。"

#: ../../library/sys.rst:182
msgid ""
"Return a dictionary mapping each thread's identifier to the topmost stack "
"frame currently active in that thread at the time the function is called. "
"Note that functions in the :mod:`traceback` module can build the call stack "
"given such a frame."
msgstr ""
"返回一个字典，存放着每个线程的标识符与（调用本函数时）该线程栈顶的帧（当前活"
"动的帧）之间的映射。注意 :mod:`traceback` 模块中的函数可以在给定某一帧的情况"
"下构建调用堆栈。"

#: ../../library/sys.rst:187
msgid ""
"This is most useful for debugging deadlock:  this function does not require "
"the deadlocked threads' cooperation, and such threads' call stacks are "
"frozen for as long as they remain deadlocked.  The frame returned for a non-"
"deadlocked thread may bear no relationship to that thread's current activity "
"by the time calling code examines the frame."
msgstr ""
"这对于调试死锁最有用：本函数不需要死锁线程的配合，并且只要这些线程的调用栈保"
"持死锁，它们就是冻结的。在调用本代码来检查栈顶的帧的那一刻，非死锁线程返回的"
"帧可能与该线程当前活动的帧没有任何关系。"

#: ../../library/sys.rst:195
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._current_frames`` with no "
"arguments."
msgstr ""
"引发一个不带参数的 :ref:`审计事件 <auditing>` ``sys._current_frames``。"

#: ../../library/sys.rst:200
msgid ""
"This hook function is called by built-in :func:`breakpoint`.  By default, it "
"drops you into the :mod:`pdb` debugger, but it can be set to any other "
"function so that you can choose which debugger gets used."
msgstr ""
"本钩子函数由内建函数 :func:`breakpoint` 调用。默认情况下，它将进入 :mod:"
"`pdb` 调试器，但可以将其改为任何其他函数，以选择使用哪个调试器。"

#: ../../library/sys.rst:204
msgid ""
"The signature of this function is dependent on what it calls.  For example, "
"the default binding (e.g. ``pdb.set_trace()``) expects no arguments, but you "
"might bind it to a function that expects additional arguments (positional "
"and/or keyword).  The built-in ``breakpoint()`` function passes its "
"``*args`` and ``**kws`` straight through.  Whatever ``breakpointhooks()`` "
"returns is returned from ``breakpoint()``."
msgstr ""
"该函数的特征取决于其调用的函数。例如，默认绑定（即 ``pdb.set_trace()`` ）不要"
"求提供参数，但可以将绑定换成要求提供附加参数（位置参数/关键字参数）的函数。内"
"建函数 ``breakpoint()`` 直接将其 ``*args`` 和 ``**kws`` 传入。"
"``breakpointhooks()`` 返回的所有内容都会从 ``breakpoint()`` 返回。"

#: ../../library/sys.rst:211
msgid ""
"The default implementation first consults the environment variable :envvar:"
"`PYTHONBREAKPOINT`.  If that is set to ``\"0\"`` then this function returns "
"immediately; i.e. it is a no-op.  If the environment variable is not set, or "
"is set to the empty string, ``pdb.set_trace()`` is called. Otherwise this "
"variable should name a function to run, using Python's dotted-import "
"nomenclature, e.g. ``package.subpackage.module.function``. In this case, "
"``package.subpackage.module`` would be imported and the resulting module "
"must have a callable named ``function()``.  This is run, passing in "
"``*args`` and ``**kws``, and whatever ``function()`` returns, ``sys."
"breakpointhook()`` returns to the built-in :func:`breakpoint` function."
msgstr ""
"默认的实现首先会查询环境变量 :envvar:`PYTHONBREAKPOINT`。如果将该变量设置为 "
"``\"0\"``，则本函数立即返回，表示在断点处无操作。如果未设置该环境变量或将其设"
"置为空字符串，则调用 ``pdb.set_trace()``。否则，此变量应指定要运行的函数，指"
"定函数时应使用 Python 的点导入命名法，如 ``package.subpackage.module."
"function``。这种情况下将导入 ``package.subpackage.module``，且导入的模块必须"
"有一个名为 ``function()`` 的可调用对象。该可调用对象会运行，``*args`` 和 "
"``**kws`` 会传入，且无论 ``function()`` 返回什么，``sys.breakpointhook()`` 都"
"将返回到內建函数 :func:`breakpoint`。"

#: ../../library/sys.rst:223
msgid ""
"Note that if anything goes wrong while importing the callable named by :"
"envvar:`PYTHONBREAKPOINT`, a :exc:`RuntimeWarning` is reported and the "
"breakpoint is ignored."
msgstr ""
"请注意，如果在导入 :envvar:`PYTHONBREAKPOINT` 指定的可调用对象时出错，则将报"
"告一个 :exc:`RuntimeWarning` 并忽略断点。"

#: ../../library/sys.rst:227
msgid ""
"Also note that if ``sys.breakpointhook()`` is overridden programmatically, :"
"envvar:`PYTHONBREAKPOINT` is *not* consulted."
msgstr ""
"另请注意，如果以编程方式覆盖 ``sys.breakpointhook()``，则 *不会* 查询 :"
"envvar:`PYTHONBREAKPOINT`。"

#: ../../library/sys.rst:234
msgid ""
"Print low-level information to stderr about the state of CPython's memory "
"allocator."
msgstr "将有关 CPython 内存分配器状态的底层的信息打印至 stderr。"

#: ../../library/sys.rst:237
msgid ""
"If Python is configured --with-pydebug, it also performs some expensive "
"internal consistency checks."
msgstr ""

#: ../../library/sys.rst:244
msgid ""
"This function is specific to CPython.  The exact output format is not "
"defined here, and may change."
msgstr "本函数仅限 CPython。此处没有定义确切的输出格式，且可能会更改。"

#: ../../library/sys.rst:250
msgid "Integer specifying the handle of the Python DLL."
msgstr "指向 Python DLL 句柄的整数。"

#: ../../library/sys.rst:252 ../../library/sys.rst:802
#: ../../library/sys.rst:1482 ../../library/sys.rst:1694
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`可用性 <availability>`: Windows。"

#: ../../library/sys.rst:257
msgid ""
"If *value* is not ``None``, this function prints ``repr(value)`` to ``sys."
"stdout``, and saves *value* in ``builtins._``. If ``repr(value)`` is not "
"encodable to ``sys.stdout.encoding`` with ``sys.stdout.errors`` error "
"handler (which is probably ``'strict'``), encode it to ``sys.stdout."
"encoding`` with ``'backslashreplace'`` error handler."
msgstr ""
"如果 *value* 不是 ``None``，则本函数会将 ``repr(value)`` 打印至 ``sys."
"stdout``，并将 *value* 保存在 ``builtins._`` 中。如果 ``repr(value)`` 无法用 "
"``sys.stdout.errors`` 错误处理方案（可能为 ``'strict'`` ）编码为 ``sys."
"stdout.encoding``，则用 ``'backslashreplace'`` 错误处理方案将其编码为 ``sys."
"stdout.encoding``。"

#: ../../library/sys.rst:263
msgid ""
"``sys.displayhook`` is called on the result of evaluating an :term:"
"`expression` entered in an interactive Python session.  The display of these "
"values can be customized by assigning another one-argument function to ``sys."
"displayhook``."
msgstr ""
"在交互式 Python 会话中运行 :term:`expression` 产生结果后，将在结果上调用 "
"``sys.displayhook``。若要自定义这些 value 的显示，可以将 ``sys.displayhook`` "
"指定为另一个单参数函数。"

#: ../../library/sys.rst:267
msgid "Pseudo-code::"
msgstr "伪代码::"

#: ../../library/sys.rst:287
msgid "Use ``'backslashreplace'`` error handler on :exc:`UnicodeEncodeError`."
msgstr ""
"在发生 :exc:`UnicodeEncodeError` 时使用 ``'backslashreplace'`` 错误处理方案。"

#: ../../library/sys.rst:293
msgid ""
"If this is true, Python won't try to write ``.pyc`` files on the import of "
"source modules.  This value is initially set to ``True`` or ``False`` "
"depending on the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it yourself "
"to control bytecode file generation."
msgstr ""
"如果该值为 true，则 Python 在导入源码模块时将不会尝试写入 ``.pyc`` 文件。该值"
"会被初始化为 ``True`` 或 ``False``，依据是 :option:`-B` 命令行选项和 :envvar:"
"`PYTHONDONTWRITEBYTECODE` 环境变量，可以自行设置该值，来控制是否生成字节码文"
"件。"

#: ../../library/sys.rst:302
msgid ""
"If this is set (not ``None``), Python will write bytecode-cache ``.pyc`` "
"files to (and read them from) a parallel directory tree rooted at this "
"directory, rather than from ``__pycache__`` directories in the source code "
"tree. Any ``__pycache__`` directories in the source code tree will be "
"ignored and new `.pyc` files written within the pycache prefix. Thus if you "
"use :mod:`compileall` as a pre-build step, you must ensure you run it with "
"the same pycache prefix (if any) that you will use at runtime."
msgstr ""

#: ../../library/sys.rst:310
msgid ""
"A relative path is interpreted relative to the current working directory."
msgstr "相对路径将解释为相对于当前工作目录。"

#: ../../library/sys.rst:312
msgid ""
"This value is initially set based on the value of the :option:`-X` "
"``pycache_prefix=PATH`` command-line option or the :envvar:"
"`PYTHONPYCACHEPREFIX` environment variable (command-line takes precedence). "
"If neither are set, it is ``None``."
msgstr ""
"该值的初值设置，依据 :option:`-X` ``pycache_prefix=PATH`` 命令行选项或 :"
"envvar:`PYTHONPYCACHEPREFIX` 环境变量的值（命令行优先）。如果两者均未设置，则"
"为 ``None``。"

#: ../../library/sys.rst:322
msgid ""
"This function prints out a given traceback and exception to ``sys.stderr``."
msgstr "本函数会将所给的回溯和异常输出到 ``sys.stderr`` 中。"

#: ../../library/sys.rst:324
msgid ""
"When an exception is raised and uncaught, the interpreter calls ``sys."
"excepthook`` with three arguments, the exception class, exception instance, "
"and a traceback object.  In an interactive session this happens just before "
"control is returned to the prompt; in a Python program this happens just "
"before the program exits.  The handling of such top-level exceptions can be "
"customized by assigning another three-argument function to ``sys."
"excepthook``."
msgstr ""
"当抛出一个异常，且未被捕获时，解释器将调用 ``sys.excepthook`` 并带有三个参"
"数：异常类、异常实例和一个回溯对象。在交互式会话中，这会在控制权返回到提示符"
"之前发生。在 Python 程序中，这会在程序退出之前发生。如果要自定义此类顶级异常"
"的处理过程，可以将另一个 3 个参数的函数赋给 ``sys.excepthook``。"

#: ../../library/sys.rst:331
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.excepthook`` with arguments "
"``hook``, ``type``, ``value``, ``traceback``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``sys.excepthook``，附带参数 ``hook``, "
"``type``, ``value``, ``traceback``。"

#: ../../library/sys.rst:333
msgid ""
"Raise an auditing event ``sys.excepthook`` with arguments ``hook``, "
"``type``, ``value``, ``traceback`` when an uncaught exception occurs. If no "
"hook has been set, ``hook`` may be ``None``. If any hook raises an exception "
"derived from :class:`RuntimeError` the call to the hook will be suppressed. "
"Otherwise, the audit hook exception will be reported as unraisable and ``sys."
"excepthook`` will be called."
msgstr ""
"当发生未捕获的异常时，引发一个审计事件 ``sys.excepthook``，附带参数 "
"``hook``, ``type``, ``value``, ``traceback``。如果没有设置钩子，``hook`` 可能"
"为 ``None``。如果某个钩子抛出了派生自 :class:`RuntimeError` 的异常，则将禁止"
"对该钩子的调用。否则，审计钩子的异常将被报告为无法抛出，并将调用 ``sys."
"excepthook``。"

#: ../../library/sys.rst:342
msgid ""
"The :func:`sys.unraisablehook` function handles unraisable exceptions and "
"the :func:`threading.excepthook` function handles exception raised by :func:"
"`threading.Thread.run`."
msgstr ""
":func:`sys.unraisablehook` 函数处理无法抛出的异常，:func:`threading."
"excepthook` 函数处理 :func:`threading.Thread.run` 抛出的异常。"

#: ../../library/sys.rst:352
msgid ""
"These objects contain the original values of ``breakpointhook``, "
"``displayhook``, ``excepthook``, and ``unraisablehook`` at the start of the "
"program.  They are saved so that ``breakpointhook``, ``displayhook`` and "
"``excepthook``, ``unraisablehook`` can be restored in case they happen to "
"get replaced with broken or alternative objects."
msgstr ""
"程序开始时，这些对象存有 ``breakpointhook``、``displayhook``、``excepthook`` "
"和 ``unraisablehook`` 的初始值。保存它们是为了可以在 ``breakpointhook``、"
"``displayhook`` 和 ``excepthook``、``unraisablehook`` 被破坏或被替换时恢复它"
"们。"

#: ../../library/sys.rst:358
msgid "__breakpointhook__"
msgstr "__breakpointhook__"

#: ../../library/sys.rst:361
msgid "__unraisablehook__"
msgstr "__unraisablehook__"

#: ../../library/sys.rst:366
msgid ""
"This function returns a tuple of three values that give information about "
"the exception that is currently being handled.  The information returned is "
"specific both to the current thread and to the current stack frame.  If the "
"current stack frame is not handling an exception, the information is taken "
"from the calling stack frame, or its caller, and so on until a stack frame "
"is found that is handling an exception.  Here, \"handling an exception\" is "
"defined as \"executing an except clause.\"  For any stack frame, only "
"information about the exception being currently handled is accessible."
msgstr ""
"本函数返回的元组包含三个值，它们给出当前正在处理的异常的信息。返回的信息仅限"
"于当前线程和当前堆栈帧。如果当前堆栈帧没有正在处理的异常，则信息将从下级被调"
"用的堆栈帧或上级调用者等位置获取，依此类推，直到找到正在处理异常的堆栈帧为"
"止。此处的“处理异常”指的是“执行 except 子句”。任何堆栈帧都只能访问当前正在处"
"理的异常的信息。"

#: ../../library/sys.rst:377
msgid ""
"If no exception is being handled anywhere on the stack, a tuple containing "
"three ``None`` values is returned.  Otherwise, the values returned are "
"``(type, value, traceback)``.  Their meaning is: *type* gets the type of the "
"exception being handled (a subclass of :exc:`BaseException`); *value* gets "
"the exception instance (an instance of the exception type); *traceback* gets "
"a :ref:`traceback object <traceback-objects>` which encapsulates the call "
"stack at the point where the exception originally occurred."
msgstr ""
"如果整个堆栈都没有正在处理的异常，则返回包含三个 ``None`` 值的元组。否则返回"
"值为 ``(type, value, traceback)``。它们的含义是：*type* 是正在处理的异常类型"
"（它是 :exc:`BaseException` 的子类）；*value* 是异常实例（异常类型的实例）；"
"*traceback* 是一个 :ref:`回溯对象 <traceback-objects>`，该对象封装了最初发生"
"异常时的调用堆栈。"

#: ../../library/sys.rst:388
msgid ""
"A string giving the site-specific directory prefix where the platform-"
"dependent Python files are installed; by default, this is also ``'/usr/"
"local'``.  This can be set at build time with the ``--exec-prefix`` argument "
"to the :program:`configure` script.  Specifically, all configuration files "
"(e.g. the :file:`pyconfig.h` header file) are installed in the directory :"
"file:`{exec_prefix}/lib/python{X.Y}/config`, and shared library modules are "
"installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload`, where *X.Y* "
"is the version number of Python, for example ``3.2``."
msgstr ""
"一个字符串，提供特定域的目录前缀，该目录中安装了与平台相关的 Python 文件，默"
"认也是 ``'/usr/local'``。该目录前缀可以在构建时使用 :program:`configure` 脚本"
"的 ``--exec-prefix`` 参数进行设置。具体而言，所有配置文件（如 :file:"
"`pyconfig.h` 头文件）都安装在目录 :file:`{exec_prefix}/lib/python{X.Y}/"
"config` 中，共享库模块安装在 :file:`{exec_prefix}/lib/python{X.Y}/lib-"
"dynload` 中，其中 *X.Y* 是 Python 的版本号，如 ``3.2``。"

#: ../../library/sys.rst:399
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via :data:"
"`base_exec_prefix`."
msgstr ""
"如果在一个 :ref:`虚拟环境 <venv-def>` 中，那么该值将在 ``site.py`` 中被修改，"
"指向虚拟环境。Python 安装位置仍然可以用 :data:`base_exec_prefix` 来获取。"

#: ../../library/sys.rst:407
msgid ""
"A string giving the absolute path of the executable binary for the Python "
"interpreter, on systems where this makes sense. If Python is unable to "
"retrieve the real path to its executable, :data:`sys.executable` will be an "
"empty string or ``None``."
msgstr ""
"一个字符串，提供 Python 解释器的可执行二进制文件的绝对路径，仅在部分系统中此"
"值有意义。如果 Python 无法获取其可执行文件的真实路径，则 :data:`sys."
"executable` 将为空字符串或 ``None``。"

#: ../../library/sys.rst:415
msgid ""
"Raise a :exc:`SystemExit` exception, signaling an intention to exit the "
"interpreter."
msgstr "引发一个 :exc:`SystemExit` 异常，表示打算退出解释器。"

#: ../../library/sys.rst:417
msgid ""
"The optional argument *arg* can be an integer giving the exit status "
"(defaulting to zero), or another type of object.  If it is an integer, zero "
"is considered \"successful termination\" and any nonzero value is considered "
"\"abnormal termination\" by shells and the like.  Most systems require it to "
"be in the range 0--127, and produce undefined results otherwise.  Some "
"systems have a convention for assigning specific meanings to specific exit "
"codes, but these are generally underdeveloped; Unix programs generally use 2 "
"for command line syntax errors and 1 for all other kind of errors.  If "
"another type of object is passed, ``None`` is equivalent to passing zero, "
"and any other object is printed to :data:`stderr` and results in an exit "
"code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick "
"way to exit a program when an error occurs."
msgstr ""
"可选参数 *arg* 可以是表示退出状态的整数（默认为 0），也可以是其他类型的对象。"
"如果它是整数，则 shell 等将 0 视为“成功终止”，非零值视为“异常终止”。大多数系"
"统要求该值的范围是 0--127，否则会产生不确定的结果。某些系统为退出代码约定了特"
"定的含义，但通常尚不完善；Unix 程序通常用 2 表示命令行语法错误，用 1 表示所有"
"其他类型的错误。传入其他类型的对象，如果传入 ``None`` 等同于传入 0，如果传入"
"其他对象则将其打印至 :data:`stderr`，且退出代码为 1。特别地，``sys."
"exit(\"some error message\")`` 可以在发生错误时快速退出程序。"

#: ../../library/sys.rst:430
msgid ""
"Since :func:`exit` ultimately \"only\" raises an exception, it will only "
"exit the process when called from the main thread, and the exception is not "
"intercepted. Cleanup actions specified by finally clauses of :keyword:`try` "
"statements are honored, and it is possible to intercept the exit attempt at "
"an outer level."
msgstr ""
"由于 :func:`exit` 最终 \"只\" 引发了一个异常，它只在从主线程调用时退出进程，"
"而异常不会被拦截。 :keyword:`try` 语句的 finally 子句所指定的清理动作会被遵"
"守，并且有可能在外层拦截退出的尝试。"

#: ../../library/sys.rst:435
msgid ""
"If an error occurs in the cleanup after the Python interpreter has caught :"
"exc:`SystemExit` (such as an error flushing buffered data in the standard "
"streams), the exit status is changed to 120."
msgstr ""
"在 Python 解释器捕获 :exc:`SystemExit` 后，如果在清理中发生错误（如清除标准流"
"中的缓冲数据时出错），则退出状态码将变为 120。"

#: ../../library/sys.rst:443
msgid ""
"The :term:`named tuple` *flags* exposes the status of command line flags. "
"The attributes are read only."
msgstr ""
":term:`具名元组 <named tuple>` *flags* 含有命令行标志的状态。这些属性是只读"
"的。"

#: ../../library/sys.rst:447 ../../library/sys.rst:500
#: ../../library/sys.rst:847
msgid "attribute"
msgstr "attribute -- 属性"

#: ../../library/sys.rst:447
msgid "flag"
msgstr "标志"

#: ../../library/sys.rst:449
msgid ":const:`debug`"
msgstr ":const:`debug`"

#: ../../library/sys.rst:449
msgid ":option:`-d`"
msgstr ":option:`-d`"

#: ../../library/sys.rst:450
msgid ":const:`inspect`"
msgstr ":const:`inspect`"

#: ../../library/sys.rst:450 ../../library/sys.rst:451
msgid ":option:`-i`"
msgstr ":option:`-i`"

#: ../../library/sys.rst:451
msgid ":const:`interactive`"
msgstr ":const:`interactive`"

#: ../../library/sys.rst:452
msgid ":const:`isolated`"
msgstr ":const:`isolated`"

#: ../../library/sys.rst:452
msgid ":option:`-I`"
msgstr ":option:`-I`"

#: ../../library/sys.rst:453
msgid ":const:`optimize`"
msgstr ":const:`optimize`"

#: ../../library/sys.rst:453
msgid ":option:`-O` or :option:`-OO`"
msgstr ":option:`-O` 或 :option:`-OO`"

#: ../../library/sys.rst:454
msgid ":const:`dont_write_bytecode`"
msgstr ":const:`dont_write_bytecode`"

#: ../../library/sys.rst:454
msgid ":option:`-B`"
msgstr ":option:`-B`"

#: ../../library/sys.rst:455
msgid ":const:`no_user_site`"
msgstr ":const:`no_user_site`"

#: ../../library/sys.rst:455
msgid ":option:`-s`"
msgstr ":option:`-s`"

#: ../../library/sys.rst:456
msgid ":const:`no_site`"
msgstr ":const:`no_site`"

#: ../../library/sys.rst:456
msgid ":option:`-S`"
msgstr ":option:`-S`"

#: ../../library/sys.rst:457
msgid ":const:`ignore_environment`"
msgstr ":const:`ignore_environment`"

#: ../../library/sys.rst:457
msgid ":option:`-E`"
msgstr ":option:`-E`"

#: ../../library/sys.rst:458
msgid ":const:`verbose`"
msgstr ":const:`verbose`"

#: ../../library/sys.rst:458
msgid ":option:`-v`"
msgstr ":option:`-v`"

#: ../../library/sys.rst:459
msgid ":const:`bytes_warning`"
msgstr ":const:`bytes_warning`"

#: ../../library/sys.rst:459
msgid ":option:`-b`"
msgstr ":option:`-b`"

#: ../../library/sys.rst:460
msgid ":const:`quiet`"
msgstr ":const:`quiet`"

#: ../../library/sys.rst:460
msgid ":option:`-q`"
msgstr ":option:`-q`"

#: ../../library/sys.rst:461
msgid ":const:`hash_randomization`"
msgstr ":const:`hash_randomization`"

#: ../../library/sys.rst:461
msgid ":option:`-R`"
msgstr ":option:`-R`"

#: ../../library/sys.rst:462
msgid ":const:`dev_mode`"
msgstr ":const:`dev_mode`"

#: ../../library/sys.rst:462
msgid ":option:`-X dev <-X>` (:ref:`Python Development Mode <devmode>`)"
msgstr ":option:`-X dev <-X>` (:ref:`Python 开发模式 <devmode>`)"

#: ../../library/sys.rst:463
msgid ":const:`utf8_mode`"
msgstr ":const:`utf8_mode`"

#: ../../library/sys.rst:463
msgid ":option:`-X utf8 <-X>`"
msgstr ":option:`-X utf8 <-X>`"

#: ../../library/sys.rst:464
msgid ":const:`int_max_str_digits`"
msgstr ":const:`int_max_str_digits`"

#: ../../library/sys.rst:464
msgid ""
":option:`-X int_max_str_digits <-X>` (:ref:`integer string conversion length "
"limitation <int_max_str_digits>`)"
msgstr ""
":option:`-X int_max_str_digits <-X>` (:ref:`integer string conversion length "
"limitation <int_max_str_digits>`)"

#: ../../library/sys.rst:467
msgid "Added ``quiet`` attribute for the new :option:`-q` flag."
msgstr "为新的 :option:`-q` 标志添加了 ``quiet`` 属性"

#: ../../library/sys.rst:470
msgid "The ``hash_randomization`` attribute."
msgstr "``hash_randomization`` 属性"

#: ../../library/sys.rst:473
msgid "Removed obsolete ``division_warning`` attribute."
msgstr "删除了过时的 ``division_warning`` 属性"

#: ../../library/sys.rst:476
msgid "Added ``isolated`` attribute for :option:`-I` ``isolated`` flag."
msgstr "为 :option:`-I` ``isolated`` 标志添加了 ``isolated`` 属性。"

#: ../../library/sys.rst:479
msgid ""
"Added the ``dev_mode`` attribute for the new :ref:`Python Development Mode "
"<devmode>` and the ``utf8_mode`` attribute for the new  :option:`-X` "
"``utf8`` flag."
msgstr ""
"为新的 :ref:`Python 开发模式 <devmode>` 添加了 ``dev_mode`` 属性，为新的 :"
"option:`-X` ``utf8`` 标志添加了 ``utf8_mode`` 属性。"

#: ../../library/sys.rst:484
msgid "Added the ``int_max_str_digits`` attribute."
msgstr "增加了 ``int_max_str_digits`` 属性。"

#: ../../library/sys.rst:490
msgid ""
"A :term:`named tuple` holding information about the float type. It contains "
"low level information about the precision and internal representation.  The "
"values correspond to the various floating-point constants defined in the "
"standard header file :file:`float.h` for the 'C' programming language; see "
"section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of "
"floating types', for details."
msgstr ""
"一个 :term:`具名元组 <named tuple>`，存有浮点型的相关信息。它包含的是关于精度"
"和内部表示的底层信息。这些值与标准头文件 :file:`float.h` 中为 C 语言定义的各"
"种浮点常量对应，详情请参阅 1999 ISO/IEC C 标准 [C99]_ 的 5.2.4.2.2 "
"节，'Characteristics of floating types（浮点型的特性）'。"

#: ../../library/sys.rst:500
msgid "float.h macro"
msgstr "float.h 宏"

#: ../../library/sys.rst:500 ../../library/sys.rst:847
msgid "explanation"
msgstr "说明"

#: ../../library/sys.rst:502
msgid ":const:`epsilon`"
msgstr ""

#: ../../library/sys.rst:502
msgid "DBL_EPSILON"
msgstr ""

#: ../../library/sys.rst:502
msgid ""
"difference between 1.0 and the least value greater than 1.0 that is "
"representable as a float"
msgstr "大于 1.0 的最小值和 1.0 之间的差，表示为浮点数"

#: ../../library/sys.rst:505
msgid "See also :func:`math.ulp`."
msgstr "另请参阅 :func:`math.ulp`。"

#: ../../library/sys.rst:507
msgid ":const:`dig`"
msgstr ""

#: ../../library/sys.rst:507
msgid "DBL_DIG"
msgstr ""

#: ../../library/sys.rst:507
msgid ""
"maximum number of decimal digits that can be faithfully represented in a "
"float;  see below"
msgstr "浮点数可以真实表示的最大十进制数字；见下文"

#: ../../library/sys.rst:510
msgid ":const:`mant_dig`"
msgstr ""

#: ../../library/sys.rst:510
msgid "DBL_MANT_DIG"
msgstr ""

#: ../../library/sys.rst:510
msgid ""
"float precision: the number of base-``radix`` digits in the significand of a "
"float"
msgstr "浮点数精度：``radix`` 基数下的浮点数有效位数"

#: ../../library/sys.rst:513
msgid ":const:`max`"
msgstr ""

#: ../../library/sys.rst:513
msgid "DBL_MAX"
msgstr ""

#: ../../library/sys.rst:513
msgid "maximum representable positive finite float"
msgstr "可表示的最大正浮点数（非无穷）"

#: ../../library/sys.rst:515
msgid ":const:`max_exp`"
msgstr ""

#: ../../library/sys.rst:515
msgid "DBL_MAX_EXP"
msgstr ""

#: ../../library/sys.rst:515
msgid ""
"maximum integer *e* such that ``radix**(e-1)`` is a representable finite "
"float"
msgstr "使得 ``radix**(e-1)`` 是可表示的浮点数（非无穷）的最大整数 *e*"

#: ../../library/sys.rst:518
msgid ":const:`max_10_exp`"
msgstr ""

#: ../../library/sys.rst:518
msgid "DBL_MAX_10_EXP"
msgstr ""

#: ../../library/sys.rst:518
msgid ""
"maximum integer *e* such that ``10**e`` is in the range of representable "
"finite floats"
msgstr "使得 ``10**e`` 在可表示的浮点数（非无穷）范围内的最大整数 *e*"

#: ../../library/sys.rst:521
msgid ":const:`min`"
msgstr ""

#: ../../library/sys.rst:521
msgid "DBL_MIN"
msgstr ""

#: ../../library/sys.rst:521
msgid "minimum representable positive *normalized* float"
msgstr "可表示的最小正 *规格化* 浮点数"

#: ../../library/sys.rst:523
msgid ""
"Use :func:`math.ulp(0.0) <math.ulp>` to get the smallest positive "
"*denormalized* representable float."
msgstr ""
"使用 :func:`math.ulp(0.0) <math.ulp>` 获取可表示的最小正 *非规格化* 浮点数"

#: ../../library/sys.rst:527
msgid ":const:`min_exp`"
msgstr ""

#: ../../library/sys.rst:527
msgid "DBL_MIN_EXP"
msgstr ""

#: ../../library/sys.rst:527
msgid "minimum integer *e* such that ``radix**(e-1)`` is a normalized float"
msgstr "使得 ``radix**(e-1)`` 是规格化浮点数的最小整数 *e*"

#: ../../library/sys.rst:530
msgid ":const:`min_10_exp`"
msgstr ""

#: ../../library/sys.rst:530
msgid "DBL_MIN_10_EXP"
msgstr ""

#: ../../library/sys.rst:530
msgid "minimum integer *e* such that ``10**e`` is a normalized float"
msgstr "使得 ``10**e`` 是规格化浮点数的最小整数 *e*"

#: ../../library/sys.rst:533
msgid ":const:`radix`"
msgstr ""

#: ../../library/sys.rst:533
msgid "FLT_RADIX"
msgstr ""

#: ../../library/sys.rst:533
msgid "radix of exponent representation"
msgstr "指数表示法中采用的基数"

#: ../../library/sys.rst:535
msgid ":const:`rounds`"
msgstr ""

#: ../../library/sys.rst:535
msgid "FLT_ROUNDS"
msgstr ""

#: ../../library/sys.rst:535
msgid ""
"integer constant representing the rounding mode used for arithmetic "
"operations.  This reflects the value of the system FLT_ROUNDS macro at "
"interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an "
"explanation of the possible values and their meanings."
msgstr ""

#: ../../library/sys.rst:543
msgid ""
"The attribute :attr:`sys.float_info.dig` needs further explanation.  If "
"``s`` is any string representing a decimal number with at most :attr:`sys."
"float_info.dig` significant digits, then converting ``s`` to a float and "
"back again will recover a string representing the same decimal value::"
msgstr ""
"关于 :attr:`sys.float_info.dig` 属性的进一步说明。如果 ``s`` 是表示十进制数的"
"字符串，而该数最多有 :attr:`sys.float_info.dig` 位有效数字，则将 ``s`` 转换"
"为 float 再转回去将恢复原先相同十进制值的字符串::"

#: ../../library/sys.rst:556
msgid ""
"But for strings with more than :attr:`sys.float_info.dig` significant "
"digits, this isn't always true::"
msgstr ""
"但是对于超过 :attr:`sys.float_info.dig` 位有效数字的字符串，转换前后并非总是"
"相同::"

#: ../../library/sys.rst:565
msgid ""
"A string indicating how the :func:`repr` function behaves for floats.  If "
"the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` "
"aims to produce a short string with the property that ``float(repr(x)) == "
"x``.  This is the usual behaviour in Python 3.1 and later.  Otherwise, "
"``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the "
"same way as it did in versions of Python prior to 3.1."
msgstr ""
"一个字符串，反映 :func:`repr` 函数在浮点数上的行为。如果该字符串是 "
"``'short'``，那么对于（非无穷的）浮点数 ``x``，``repr(x)`` 将会生成一个短字符"
"串，满足 ``float(repr(x)) == x`` 的特性。这是 Python 3.1 及更高版本中的常见行"
"为。否则 ``float_repr_style`` 的值将是 ``'legacy'``，此时 ``repr(x)`` 的行为"
"方式将与 Python 3.1 之前的版本相同。"

#: ../../library/sys.rst:578
msgid ""
"Return the number of memory blocks currently allocated by the interpreter, "
"regardless of their size.  This function is mainly useful for tracking and "
"debugging memory leaks.  Because of the interpreter's internal caches, the "
"result can vary from call to call; you may have to call :func:"
"`_clear_type_cache()` and :func:`gc.collect()` to get more predictable "
"results."
msgstr ""
"返回解释器当前已分配的内存块数，无论它们大小如何。本函数主要用于跟踪和调试内"
"存泄漏。因为解释器有内部缓存，所以不同调用之间结果会变化。可能需要调用 :func:"
"`_clear_type_cache()` 和 :func:`gc.collect()` 使结果更容易预测。"

#: ../../library/sys.rst:585
msgid ""
"If a Python build or implementation cannot reasonably compute this "
"information, :func:`getallocatedblocks()` is allowed to return 0 instead."
msgstr ""
"如果当前 Python 构建或实现无法合理地计算此信息，允许 :func:"
"`getallocatedblocks()` 返回 0。"

#: ../../library/sys.rst:593
msgid "Return the build time API version of Android as an integer."
msgstr "返回一个整数，表示 Android 构建时 API 版本。"

#: ../../library/sys.rst:596
msgid ":ref:`Availability <availability>`: Android."
msgstr ":ref:`可用性 <availability>`：Android。"

#: ../../library/sys.rst:602
msgid ""
"Return the name of the current default string encoding used by the Unicode "
"implementation."
msgstr "返回当前 Unicode 实现所使用的默认字符串编码格式名称。"

#: ../../library/sys.rst:608
msgid ""
"Return the current value of the flags that are used for :c:func:`dlopen` "
"calls.  Symbolic names for the flag values can be found in the :mod:`os` "
"module (``RTLD_xxx`` constants, e.g. :data:`os.RTLD_LAZY`)."
msgstr ""
"返回当前 :c:func:`dlopen` 调用所使用的标志位的值。标志值对应的符号名称可以"
"在 :mod:`os` 模块中找到（形如 ``RTLD_xxx`` 的常量，如 :data:`os."
"RTLD_LAZY` ）。"

#: ../../library/sys.rst:613 ../../library/sys.rst:1247
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`可用性 <availability>`: Unix。"

#: ../../library/sys.rst:618
msgid ""
"Return the name of the encoding used to convert between Unicode filenames "
"and bytes filenames. For best compatibility, str should be used for "
"filenames in all cases, although representing filenames as bytes is also "
"supported. Functions accepting or returning filenames should support either "
"str or bytes and internally convert to the system's preferred representation."
msgstr ""

#: ../../library/sys.rst:625
msgid "This encoding is always ASCII-compatible."
msgstr ""

#: ../../library/sys.rst:627 ../../library/sys.rst:660
msgid ""
":func:`os.fsencode` and :func:`os.fsdecode` should be used to ensure that "
"the correct encoding and errors mode are used."
msgstr ""
"应使用 :func:`os.fsencode` 和 :func:`os.fsdecode` 来保证所采用的编码和错误处"
"理方案都是正确的。"

#: ../../library/sys.rst:630
msgid "In the UTF-8 mode, the encoding is ``utf-8`` on any platform."
msgstr ""

#: ../../library/sys.rst:632
msgid "On macOS, the encoding is ``'utf-8'``."
msgstr ""

#: ../../library/sys.rst:634
msgid "On Unix, the encoding is the locale encoding."
msgstr ""

#: ../../library/sys.rst:636
msgid ""
"On Windows, the encoding may be ``'utf-8'`` or ``'mbcs'``, depending on user "
"configuration."
msgstr ""

#: ../../library/sys.rst:639
msgid "On Android, the encoding is ``'utf-8'``."
msgstr ""

#: ../../library/sys.rst:641
msgid "On VxWorks, the encoding is ``'utf-8'``."
msgstr ""

#: ../../library/sys.rst:643
msgid ":func:`getfilesystemencoding` result cannot be ``None`` anymore."
msgstr ":func:`getfilesystemencoding` 的结果将不再有可能是 ``None``。"

#: ../../library/sys.rst:646
msgid ""
"Windows is no longer guaranteed to return ``'mbcs'``. See :pep:`529` and :"
"func:`_enablelegacywindowsfsencoding` for more information."
msgstr ""
"Windows 不再保证会返回 ``'mbcs'``。详情请参阅 :pep:`529` 和 :func:"
"`_enablelegacywindowsfsencoding`。"

#: ../../library/sys.rst:650
msgid "Return 'utf-8' in the UTF-8 mode."
msgstr ""

#: ../../library/sys.rst:656
msgid ""
"Return the name of the error mode used to convert between Unicode filenames "
"and bytes filenames. The encoding name is returned from :func:"
"`getfilesystemencoding`."
msgstr ""

#: ../../library/sys.rst:668
msgid ""
"Returns the current value for the :ref:`integer string conversion length "
"limitation <int_max_str_digits>`. See also :func:`set_int_max_str_digits`."
msgstr ""
"返回 :ref:`整数字符串转换长度限制 <int_max_str_digits>` 的当前值。 另请参阅 :"
"func:`set_int_max_str_digits`。"

#: ../../library/sys.rst:676
msgid ""
"Return the reference count of the *object*.  The count returned is generally "
"one higher than you might expect, because it includes the (temporary) "
"reference as an argument to :func:`getrefcount`."
msgstr ""
"返回 *object* 的引用计数。返回的计数通常比预期的多一，因为它包括了作为 :func:"
"`getrefcount` 参数的这一次（临时）引用。"

#: ../../library/sys.rst:683
msgid ""
"Return the current value of the recursion limit, the maximum depth of the "
"Python interpreter stack.  This limit prevents infinite recursion from "
"causing an overflow of the C stack and crashing Python.  It can be set by :"
"func:`setrecursionlimit`."
msgstr ""
"返回当前的递归限制值，即 Python 解释器堆栈的最大深度。此限制可防止无限递归导"
"致的 C 堆栈溢出和 Python 崩溃。该值可以通过 :func:`setrecursionlimit` 设置。"

#: ../../library/sys.rst:691
msgid ""
"Return the size of an object in bytes. The object can be any type of object. "
"All built-in objects will return correct results, but this does not have to "
"hold true for third-party extensions as it is implementation specific."
msgstr ""
"返回对象的大小（以字节为单位）。该对象可以是任何类型。所有内建对象返回的结果"
"都是正确的，但对于第三方扩展不一定正确，因为这与具体实现有关。"

#: ../../library/sys.rst:696
msgid ""
"Only the memory consumption directly attributed to the object is accounted "
"for, not the memory consumption of objects it refers to."
msgstr "只计算直接分配给对象的内存消耗，不计算它所引用的对象的内存消耗。"

#: ../../library/sys.rst:699
msgid ""
"If given, *default* will be returned if the object does not provide means to "
"retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr ""
"对象不提供计算大小的方法时，如果传入过 *default* 则返回它，否则抛出 :exc:"
"`TypeError` 异常。"

#: ../../library/sys.rst:702
msgid ""
":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an "
"additional garbage collector overhead if the object is managed by the "
"garbage collector."
msgstr ""
"如果对象由垃圾回收器管理，则 :func:`getsizeof` 将调用对象的 ``__sizeof__`` 方"
"法，并在上层添加额外的垃圾回收器。"

#: ../../library/sys.rst:706
msgid ""
"See `recursive sizeof recipe <https://code.activestate.com/recipes/577504>`_ "
"for an example of using :func:`getsizeof` recursively to find the size of "
"containers and all their contents."
msgstr ""
"可以参考 `recursive sizeof recipe <https://code.activestate.com/"
"recipes/577504>`_ 中的示例，关于递归调用 :func:`getsizeof` 来得到各个容器及其"
"所有内容物的大小。"

#: ../../library/sys.rst:712
msgid ""
"Return the interpreter's \"thread switch interval\"; see :func:"
"`setswitchinterval`."
msgstr "返回解释器的“线程切换间隔时间”，请参阅 :func:`setswitchinterval`。"

#: ../../library/sys.rst:720
msgid ""
"Return a frame object from the call stack.  If optional integer *depth* is "
"given, return the frame object that many calls below the top of the stack.  "
"If that is deeper than the call stack, :exc:`ValueError` is raised.  The "
"default for *depth* is zero, returning the frame at the top of the call "
"stack."
msgstr ""
"返回来自调用栈的一个帧对象。如果传入可选整数 *depth*，则返回从栈顶往下相应调"
"用层数的帧对象。如果该数比调用栈更深，则抛出 :exc:`ValueError`。*depth* 的默"
"认值是 0，返回调用栈顶部的帧。"

#: ../../library/sys.rst:725
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._getframe`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``sys._getframe``，没有附带参数。"

#: ../../library/sys.rst:729
msgid ""
"This function should be used for internal and specialized purposes only. It "
"is not guaranteed to exist in all implementations of Python."
msgstr ""
"这个函数应该只在内部为了一些特定的目的使用。不保证它在所有 Python 实现中都存"
"在。"

#: ../../library/sys.rst:739
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr "返回由 :func:`setprofile` 设置的性能分析函数。"

#: ../../library/sys.rst:748
msgid "Get the trace function as set by :func:`settrace`."
msgstr "返回由 :func:`settrace` 设置的跟踪函数。"

#: ../../library/sys.rst:752
msgid ""
"The :func:`gettrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""
":func:`gettrace` 函数仅用于实现调试器，性能分析器，打包工具等。它的行为是实现"
"平台的一部分，而不是语言定义的一部分，因此并非在所有 Python 实现中都可用。"

#: ../../library/sys.rst:760
msgid ""
"Return a named tuple describing the Windows version currently running.  The "
"named elements are *major*, *minor*, *build*, *platform*, *service_pack*, "
"*service_pack_minor*, *service_pack_major*, *suite_mask*, *product_type* and "
"*platform_version*. *service_pack* contains a string, *platform_version* a 3-"
"tuple and all other values are integers. The components can also be accessed "
"by name, so ``sys.getwindowsversion()[0]`` is equivalent to ``sys."
"getwindowsversion().major``. For compatibility with prior versions, only the "
"first 5 elements are retrievable by indexing."
msgstr ""
"返回一个具名元组，描述当前正在运行的 Windows 版本。元素名称包括 *major*, "
"*minor*, *build*, *platform*, *service_pack*, *service_pack_minor*, "
"*service_pack_major*, *suite_mask*, *product_type* 和 *platform_version*。"
"*service_pack* 包含一个字符串，*platform_version* 包含一个三元组，其他所有值"
"都是整数。元素也可以通过名称来访问，所以 ``sys.getwindowsversion()[0]`` 与 "
"``sys.getwindowsversion().major`` 是等效的。为保持与旧版本的兼容性，只有前 5 "
"个元素可以用索引检索。"

#: ../../library/sys.rst:771
msgid "*platform* will be :const:`2 (VER_PLATFORM_WIN32_NT)`."
msgstr "*platform* 将会是 :const:`2 (VER_PLATFORM_WIN32_NT)`。"

#: ../../library/sys.rst:773
msgid "*product_type* may be one of the following values:"
msgstr "*product_type* 可能是以下值之一："

#: ../../library/sys.rst:776
msgid "Constant"
msgstr "常量"

#: ../../library/sys.rst:776
msgid "Meaning"
msgstr "含意"

#: ../../library/sys.rst:778
msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ":const:`1 (VER_NT_WORKSTATION)`"

#: ../../library/sys.rst:778
msgid "The system is a workstation."
msgstr "系统是工作站。"

#: ../../library/sys.rst:780
msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"

#: ../../library/sys.rst:780
msgid "The system is a domain controller."
msgstr "系统是域控制器。"

#: ../../library/sys.rst:783
msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ":const:`3 (VER_NT_SERVER)`"

#: ../../library/sys.rst:783
msgid "The system is a server, but not a domain controller."
msgstr "系统是服务器，但不是域控制器。"

#: ../../library/sys.rst:787
msgid ""
"This function wraps the Win32 :c:func:`GetVersionEx` function; see the "
"Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information "
"about these fields."
msgstr ""
"本函数包装了 Win32 :c:func:`GetVersionEx` 函数，参阅 Microsoft 文档有关 :c:"
"func:`OSVERSIONINFOEX` 的内容可获取这些字段的更多信息。"

#: ../../library/sys.rst:791
msgid ""
"*platform_version* returns the major version, minor version and build number "
"of the current operating system, rather than the version that is being "
"emulated for the process. It is intended for use in logging rather than for "
"feature detection."
msgstr ""
"*platform_version* 返回当前操作系统的主要版本、次要版本和编译版本号，而不是为"
"该进程所模拟的版本。 它旨在用于日志记录而非特性检测。"

#: ../../library/sys.rst:797
msgid ""
"*platform_version* derives the version from kernel32.dll which can be of a "
"different version than the OS version. Please use :mod:`platform` module for "
"achieving accurate OS version."
msgstr ""
"*platform_version* 会从 kernel32.dll 获取版本号，这个版本可能与 OS 版本不"
"同。 请使用 :mod:`platform` 模块来获取准确的 OS 版本号。"

#: ../../library/sys.rst:803
msgid ""
"Changed to a named tuple and added *service_pack_minor*, "
"*service_pack_major*, *suite_mask*, and *product_type*."
msgstr ""
"更改为具名元组，添加 *service_pack_minor*, *service_pack_major*, "
"*suite_mask* 和 *product_type*。"

#: ../../library/sys.rst:807
msgid "Added *platform_version*"
msgstr "添加了 *platform_version*"

#: ../../library/sys.rst:813
msgid ""
"Returns an *asyncgen_hooks* object, which is similar to a :class:"
"`~collections.namedtuple` of the form `(firstiter, finalizer)`, where "
"*firstiter* and *finalizer* are expected to be either ``None`` or functions "
"which take an :term:`asynchronous generator iterator` as an argument, and "
"are used to schedule finalization of an asynchronous generator by an event "
"loop."
msgstr ""

#: ../../library/sys.rst:820
msgid "See :pep:`525` for more details."
msgstr "详情请参阅 :pep:`525`。"

#: ../../library/sys.rst:824 ../../library/sys.rst:1449
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)"
msgstr "本函数已添加至暂定软件包（详情请参阅 :pep:`411` ）。"

#: ../../library/sys.rst:830
msgid ""
"Get the current coroutine origin tracking depth, as set by :func:"
"`set_coroutine_origin_tracking_depth`."
msgstr ""
"获取由 :func:`set_coroutine_origin_tracking_depth` 设置的协程来源的追踪深度。"

#: ../../library/sys.rst:836 ../../library/sys.rst:1470
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)  Use it only for debugging purposes."
msgstr ""
"本函数已添加至暂定软件包（详情请参阅 :pep:`411` ）。仅将其用于调试目的。"

#: ../../library/sys.rst:842
msgid ""
"A :term:`named tuple` giving parameters of the numeric hash implementation.  "
"For more details about hashing of numeric types, see :ref:`numeric-hash`."
msgstr ""
"一个 :term:`具名元组 <named tuple>`，给出数字类型的哈希的实现参数。关于数字类"
"型的哈希的详情请参阅 :ref:`numeric-hash`。"

#: ../../library/sys.rst:849
msgid ":const:`width`"
msgstr ":const:`width`"

#: ../../library/sys.rst:849
msgid "width in bits used for hash values"
msgstr "用于哈希值的位宽度"

#: ../../library/sys.rst:851
msgid ":const:`modulus`"
msgstr ":const:`modulus`"

#: ../../library/sys.rst:851
msgid "prime modulus P used for numeric hash scheme"
msgstr "用于数字散列方案的素数模数P。"

#: ../../library/sys.rst:853
msgid ":const:`inf`"
msgstr ":const:`inf`"

#: ../../library/sys.rst:853
msgid "hash value returned for a positive infinity"
msgstr "为正无穷大返回的哈希值"

#: ../../library/sys.rst:855
msgid ":const:`nan`"
msgstr ":const:`nan`"

#: ../../library/sys.rst:855
msgid "hash value returned for a nan"
msgstr ""

#: ../../library/sys.rst:857
msgid ":const:`imag`"
msgstr ":const:`imag`"

#: ../../library/sys.rst:857
msgid "multiplier used for the imaginary part of a complex number"
msgstr "用于复数虚部的乘数"

#: ../../library/sys.rst:860
msgid ":const:`algorithm`"
msgstr ":const:`algorithm`"

#: ../../library/sys.rst:860
msgid "name of the algorithm for hashing of str, bytes, and memoryview"
msgstr "字符串、字节和内存视图的哈希算法的名称"

#: ../../library/sys.rst:863
msgid ":const:`hash_bits`"
msgstr ":const:`hash_bits`"

#: ../../library/sys.rst:863
msgid "internal output size of the hash algorithm"
msgstr "哈希算法的内部输出大小。"

#: ../../library/sys.rst:865
msgid ":const:`seed_bits`"
msgstr ":const:`seed_bits`"

#: ../../library/sys.rst:865
msgid "size of the seed key of the hash algorithm"
msgstr "散列算法的种子密钥的大小"

#: ../../library/sys.rst:871
msgid "Added *algorithm*, *hash_bits* and *seed_bits*"
msgstr "添加了 *algorithm*, *hash_bits* 和 *seed_bits*"

#: ../../library/sys.rst:877
msgid ""
"The version number encoded as a single integer.  This is guaranteed to "
"increase with each version, including proper support for non-production "
"releases.  For example, to test that the Python interpreter is at least "
"version 1.5.2, use::"
msgstr ""
"编码为单个整数的版本号。该整数会确保每个版本都自增，其中适当包括了未发布版"
"本。举例来说，要测试 Python 解释器的版本不低于 1.5.2，请使用::"

#: ../../library/sys.rst:888
msgid ""
"This is called ``hexversion`` since it only really looks meaningful when "
"viewed as the result of passing it to the built-in :func:`hex` function.  "
"The :term:`named tuple`  :data:`sys.version_info` may be used for a more "
"human-friendly encoding of the same information."
msgstr ""
"之所以称它为 ``hexversion``，是因为只有将它传入内置函数 :func:`hex` 后，其结"
"果才看起来有意义。也可以使用 :term:`具名元组 <named tuple>` :data:`sys."
"version_info`，它对相同信息有着更人性化的编码。"

#: ../../library/sys.rst:893
msgid "More details of ``hexversion`` can be found at :ref:`apiabiversion`."
msgstr "关于 ``hexversion`` 的更多信息可以在 :ref:`apiabiversion` 中找到。"

#: ../../library/sys.rst:898
msgid ""
"An object containing information about the implementation of the currently "
"running Python interpreter.  The following attributes are required to exist "
"in all Python implementations."
msgstr ""
"一个对象，该对象包含当前运行的 Python 解释器的实现信息。所有 Python 实现中都"
"必须存在下列属性。"

#: ../../library/sys.rst:902
msgid ""
"*name* is the implementation's identifier, e.g. ``'cpython'``.  The actual "
"string is defined by the Python implementation, but it is guaranteed to be "
"lower case."
msgstr ""
"*name* 是当前实现的标识符，如 ``'cpython'``。实际的字符串由 Python 实现定义，"
"但保证是小写字母。"

#: ../../library/sys.rst:906
msgid ""
"*version* is a named tuple, in the same format as :data:`sys.version_info`.  "
"It represents the version of the Python *implementation*.  This has a "
"distinct meaning from the specific version of the Python *language* to which "
"the currently running interpreter conforms, which ``sys.version_info`` "
"represents.  For example, for PyPy 1.8 ``sys.implementation.version`` might "
"be ``sys.version_info(1, 8, 0, 'final', 0)``, whereas ``sys.version_info`` "
"would be ``sys.version_info(2, 7, 2, 'final', 0)``.  For CPython they are "
"the same value, since it is the reference implementation."
msgstr ""
"*version* 是一个具名元组，格式与 :data:`sys.version_info` 相同。它表示 "
"Python *实现* 的版本。 另一个（由 ``sys.version_info`` 表示）是当前解释器遵循"
"的相应 Python *语言* 的版本，两者具有不同的含义。 例如，对于 PyPy 1.8，``sys."
"implementation.version`` 可能是 ``sys.version_info(1, 8, 0, 'final', 0)``，"
"而 ``sys.version_info`` 则是 ``sys.version_info(2, 7, 2, 'final', 0)``。对于 "
"CPython 而言两个值是相同的，因为它是参考实现。"

#: ../../library/sys.rst:916
msgid ""
"*hexversion* is the implementation version in hexadecimal format, like :data:"
"`sys.hexversion`."
msgstr "*hexversion* 是十六进制的实现版本，类似于 :data:`sys.hexversion`。"

#: ../../library/sys.rst:919
msgid ""
"*cache_tag* is the tag used by the import machinery in the filenames of "
"cached modules.  By convention, it would be a composite of the "
"implementation's name and version, like ``'cpython-33'``.  However, a Python "
"implementation may use some other value if appropriate.  If ``cache_tag`` is "
"set to ``None``, it indicates that module caching should be disabled."
msgstr ""
"*cache_tag* 是导入机制使用的标记，用于已缓存模块的文件名。按照惯例，它将由实"
"现的名称和版本组成，如 ``'cpython-33'``。但如果合适，Python 实现可以使用其他"
"值。如果 ``cache_tag`` 被置为 ``None``，表示模块缓存已禁用。"

#: ../../library/sys.rst:926
msgid ""
":data:`sys.implementation` may contain additional attributes specific to the "
"Python implementation.  These non-standard attributes must start with an "
"underscore, and are not described here.  Regardless of its contents, :data:"
"`sys.implementation` will not change during a run of the interpreter, nor "
"between implementation versions.  (It may change between Python language "
"versions, however.)  See :pep:`421` for more information."
msgstr ""
":data:`sys.implementation` 可能包含相应 Python 实现的其他属性。这些非标准属性"
"必须以下划线开头，此处不详细阐述。无论其内容如何，:data:`sys.implementation` "
"在解释器运行期间或不同实现版本之间都不会更改。（但是不同 Python 语言版本间可"
"能会不同。）详情请参阅 :pep:`421`。"

#: ../../library/sys.rst:937
msgid ""
"The addition of new required attributes must go through the normal PEP "
"process. See :pep:`421` for more information."
msgstr "新的必要属性的添加必须经过常规的 PEP 过程。详情请参阅 :pep:`421`。"

#: ../../library/sys.rst:942
msgid ""
"A :term:`named tuple` that holds information about Python's internal "
"representation of integers.  The attributes are read only."
msgstr ""
"一个 :term:`具名元组 <named tuple>`，包含 Python 内部整数表示形式的信息。这些"
"属性是只读的。"

#: ../../library/sys.rst:948 ../../library/sys.rst:1579
msgid "Attribute"
msgstr "属性"

#: ../../library/sys.rst:948 ../../library/sys.rst:1579
msgid "Explanation"
msgstr "说明"

#: ../../library/sys.rst:950
msgid ":const:`bits_per_digit`"
msgstr ":const:`bits_per_digit`"

#: ../../library/sys.rst:950
msgid ""
"number of bits held in each digit.  Python integers are stored internally in "
"base ``2**int_info.bits_per_digit``"
msgstr ""
"每个数字占有的位数。Python 内部将整数存储在基底 ``2**int_info."
"bits_per_digit``"

#: ../../library/sys.rst:954
msgid ":const:`sizeof_digit`"
msgstr ":const:`sizeof_digit`"

#: ../../library/sys.rst:954
msgid "size in bytes of the C type used to represent a digit"
msgstr "用于表示数字的C类型的字节大小"

#: ../../library/sys.rst:957
msgid ":const:`default_max_str_digits`"
msgstr ":const:`default_max_str_digits`"

#: ../../library/sys.rst:957
msgid ""
"default value for :func:`sys.get_int_max_str_digits` when it is not "
"otherwise explicitly configured."
msgstr ":func:`sys.get_int_max_str_digits` 在未被显式配置时将使用的默认值。"

#: ../../library/sys.rst:961
msgid ":const:`str_digits_check_threshold`"
msgstr ":const:`str_digits_check_threshold`"

#: ../../library/sys.rst:961
msgid ""
"minimum non-zero value for :func:`sys.set_int_max_str_digits`, :envvar:"
"`PYTHONINTMAXSTRDIGITS`, or :option:`-X int_max_str_digits <-X>`."
msgstr ""
":func:`sys.set_int_max_str_digits`, :envvar:`PYTHONINTMAXSTRDIGITS` 或 :"
"option:`-X int_max_str_digits <-X>` 的最小非零值。"

#: ../../library/sys.rst:969
msgid "Added ``default_max_str_digits`` and ``str_digits_check_threshold``."
msgstr "增加了 ``default_max_str_digits`` 和 ``str_digits_check_threshold``。"

#: ../../library/sys.rst:975
msgid ""
"When this attribute exists, its value is automatically called (with no "
"arguments) when the interpreter is launched in :ref:`interactive mode <tut-"
"interactive>`.  This is done after the :envvar:`PYTHONSTARTUP` file is read, "
"so that you can set this hook there.  The :mod:`site` module :ref:`sets this "
"<rlcompleter-config>`."
msgstr ""
"当本属性存在，则以 :ref:`交互模式 <tut-interactive>` 启动解释器时，将自动（不"
"带参数地）调用本属性的值。该过程是在读取 :envvar:`PYTHONSTARTUP` 文件之后完成"
"的，所以可以在该文件中设置这一钩子。:mod:`site` 模块 :ref:`设置了这一属性 "
"<rlcompleter-config>`。"

#: ../../library/sys.rst:981
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with argument ``hook``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``cpython.run_interactivehook``，附带参"
"数 ``hook``。"

#: ../../library/sys.rst:983
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with the hook object as the argument when the hook is called on startup."
msgstr ""
"如果在启动时调用了钩子，则引发一个 :ref:`审计事件 <auditing>` ``cpython."
"run_interactivehook``，附带参数为 hook 对象。"

#: ../../library/sys.rst:992
msgid ""
"Enter *string* in the table of \"interned\" strings and return the interned "
"string -- which is *string* itself or a copy. Interning strings is useful to "
"gain a little performance on dictionary lookup -- if the keys in a "
"dictionary are interned, and the lookup key is interned, the key comparisons "
"(after hashing) can be done by a pointer compare instead of a string "
"compare.  Normally, the names used in Python programs are automatically "
"interned, and the dictionaries used to hold module, class or instance "
"attributes have interned keys."
msgstr ""
"将 *string* 插入 \"interned\" （驻留）字符串表，返回被插入的字符串 -- 它是 "
"*string* 本身或副本。驻留字符串对提高字典查找的性能很有用 -- 如果字典中的键已"
"驻留，且所查找的键也已驻留，则键（取散列后）的比较可以用指针代替字符串来比"
"较。通常，Python 程序使用到的名称会被自动驻留，且用于保存模块、类或实例属性的"
"字典的键也已驻留。"

#: ../../library/sys.rst:1000
msgid ""
"Interned strings are not immortal; you must keep a reference to the return "
"value of :func:`intern` around to benefit from it."
msgstr ""
"驻留字符串不是永久存在的，对 :func:`intern` 返回值的引用必须保留下来，才能发"
"挥驻留字符串的优势。"

#: ../../library/sys.rst:1006
msgid ""
"Return :const:`True` if the Python interpreter is :term:`shutting down "
"<interpreter shutdown>`, :const:`False` otherwise."
msgstr ""
"如果 Python 解释器 :term:`正在关闭 <interpreter shutdown>` 则返回 :const:"
"`True`，否则返回 :const:`False`。"

#: ../../library/sys.rst:1016
msgid ""
"These three variables are not always defined; they are set when an exception "
"is not handled and the interpreter prints an error message and a stack "
"traceback. Their intended use is to allow an interactive user to import a "
"debugger module and engage in post-mortem debugging without having to re-"
"execute the command that caused the error.  (Typical use is ``import pdb; "
"pdb.pm()`` to enter the post-mortem debugger; see :mod:`pdb` module for more "
"information.)"
msgstr ""
"这三个变量并非总是有定义，仅当有异常未处理，且解释器打印了错误消息和堆栈回溯"
"时，才会给它们赋值。它们的预期用途，是允许交互中的用户导入调试器模块，进行事"
"后调试，而不必重新运行导致错误的命令。（通常使用 ``import pdb; pdb.pm()`` 进"
"入事后调试器，详情请参阅 :mod:`pdb` 模块。）"

#: ../../library/sys.rst:1024
msgid ""
"The meaning of the variables is the same as that of the return values from :"
"func:`exc_info` above."
msgstr "这些变量的含义与上述 :func:`exc_info` 返回值的含义相同。"

#: ../../library/sys.rst:1030
msgid ""
"An integer giving the maximum value a variable of type :c:type:`Py_ssize_t` "
"can take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1`` "
"on a 64-bit platform."
msgstr ""
"一个整数，表示 :c:type:`Py_ssize_t` 类型的变量可以取到的最大值。在 32 位平台"
"上通常为 ``2**31 - 1``，在 64 位平台上通常为 ``2**63 - 1``。"

#: ../../library/sys.rst:1037
msgid ""
"An integer giving the value of the largest Unicode code point, i.e. "
"``1114111`` (``0x10FFFF`` in hexadecimal)."
msgstr ""
"一个整数，表示最大的 Unicode 码点值，如 ``1114111`` （十六进制为 "
"``0x10FFFF`` ）。"

#: ../../library/sys.rst:1040
msgid ""
"Before :pep:`393`, ``sys.maxunicode`` used to be either ``0xFFFF`` or "
"``0x10FFFF``, depending on the configuration option that specified whether "
"Unicode characters were stored as UCS-2 or UCS-4."
msgstr ""
"在 :pep:`393` 之前，``sys.maxunicode`` 曾是 ``0xFFFF`` 或 ``0x10FFFF``，具体"
"取决于配置选项，该选项指定将 Unicode 字符存储为 UCS-2 还是 UCS-4。"

#: ../../library/sys.rst:1048
msgid ""
"A list of :term:`meta path finder` objects that have their :meth:`~importlib."
"abc.MetaPathFinder.find_spec` methods called to see if one of the objects "
"can find the module to be imported. The :meth:`~importlib.abc.MetaPathFinder."
"find_spec` method is called with at least the absolute name of the module "
"being imported. If the module to be imported is contained in a package, then "
"the parent package's :attr:`__path__` attribute is passed in as a second "
"argument. The method returns a :term:`module spec`, or ``None`` if the "
"module cannot be found."
msgstr ""

#: ../../library/sys.rst:1060
msgid ":class:`importlib.abc.MetaPathFinder`"
msgstr ":class:`importlib.abc.MetaPathFinder`"

#: ../../library/sys.rst:1060
msgid ""
"The abstract base class defining the interface of finder objects on :data:"
"`meta_path`."
msgstr "抽象基类，定义了 :data:`meta_path` 内的查找器对象的接口。"

#: ../../library/sys.rst:1064
msgid ":class:`importlib.machinery.ModuleSpec`"
msgstr ":class:`importlib.machinery.ModuleSpec`"

#: ../../library/sys.rst:1063
msgid ""
"The concrete class which :meth:`~importlib.abc.MetaPathFinder.find_spec` "
"should return instances of."
msgstr ""
":meth:`~importlib.abc.MetaPathFinder.find_spec` 返回的实例所对应的具体类。"

#: ../../library/sys.rst:1069
msgid ""
":term:`Module specs <module spec>` were introduced in Python 3.4, by :pep:"
"`451`. Earlier versions of Python looked for a method called :meth:"
"`~importlib.abc.MetaPathFinder.find_module`. This is still called as a "
"fallback if a :data:`meta_path` entry doesn't have a :meth:`~importlib.abc."
"MetaPathFinder.find_spec` method."
msgstr ""
"在 Python 3.4 中通过 :pep:`451` 引入了 :term:`模块规格 <module spec>`。早期版"
"本的 Python 会寻找一个称为 :meth:`~importlib.abc.MetaPathFinder.find_module` "
"的方法。如果某个 :data:`meta_path` 条目没有 :meth:`~importlib.abc."
"MetaPathFinder.find_spec` 方法，就会回退去调用前一种方法。"

#: ../../library/sys.rst:1077
msgid ""
"This is a dictionary that maps module names to modules which have already "
"been loaded.  This can be manipulated to force reloading of modules and "
"other tricks. However, replacing the dictionary will not necessarily work as "
"expected and deleting essential items from the dictionary may cause Python "
"to fail."
msgstr ""

#: ../../library/sys.rst:1087
msgid ""
"A list of strings that specifies the search path for modules. Initialized "
"from the environment variable :envvar:`PYTHONPATH`, plus an installation-"
"dependent default."
msgstr ""
"一个由字符串组成的列表，用于指定模块的搜索路径。初始化自环境变量 :envvar:"
"`PYTHONPATH`，再加上一条与安装有关的默认路径。"

#: ../../library/sys.rst:1091
msgid ""
"As initialized upon program startup, the first item of this list, "
"``path[0]``, is the directory containing the script that was used to invoke "
"the Python interpreter.  If the script directory is not available (e.g.  if "
"the interpreter is invoked interactively or if the script is read from "
"standard input), ``path[0]`` is the empty string, which directs Python to "
"search modules in the current directory first.  Notice that the script "
"directory is inserted *before* the entries inserted as a result of :envvar:"
"`PYTHONPATH`."
msgstr ""
"程序启动时将初始化本列表，列表的第一项 ``path[0]`` 目录含有调用 Python 解释器"
"的脚本。如果脚本目录不可用（比如以交互方式调用了解释器，或脚本是从标准输入中"
"读取的），则 ``path[0]`` 为空字符串，这将导致 Python 优先搜索当前目录中的模"
"块。注意，脚本目录将插入在 :envvar:`PYTHONPATH` 的条目*之前*。"

#: ../../library/sys.rst:1099
msgid ""
"A program is free to modify this list for its own purposes.  Only strings "
"and bytes should be added to :data:`sys.path`; all other data types are "
"ignored during import."
msgstr ""
"程序可以随意修改本列表用于自己的目的。只能向 :data:`sys.path` 中添加 string "
"和 bytes 类型，其他数据类型将在导入期间被忽略。"

#: ../../library/sys.rst:1105
msgid ""
"Module :mod:`site` This describes how to use .pth files to extend :data:`sys."
"path`."
msgstr ""
":mod:`site` 模块，该模块描述了如何使用 .pth 文件来扩展 :data:`sys.path`。"

#: ../../library/sys.rst:1111
msgid ""
"A list of callables that take a path argument to try to create a :term:"
"`finder` for the path. If a finder can be created, it is to be returned by "
"the callable, else raise :exc:`ImportError`."
msgstr ""
"一个由可调用对象组成的列表，这些对象接受一个路径作为参数，并尝试为该路径创建"
"一个 :term:`查找器 <finder>`。如果成功创建查找器，则可调用对象将返回它，否则"
"将引发 :exc:`ImportError` 异常。"

#: ../../library/sys.rst:1115 ../../library/sys.rst:1126
msgid "Originally specified in :pep:`302`."
msgstr "本特性最早在 :pep:`302` 中被提及。"

#: ../../library/sys.rst:1120
msgid ""
"A dictionary acting as a cache for :term:`finder` objects. The keys are "
"paths that have been passed to :data:`sys.path_hooks` and the values are the "
"finders that are found. If a path is a valid file system path but no finder "
"is found on :data:`sys.path_hooks` then ``None`` is stored."
msgstr ""
"一个字典，作为 :term:`查找器 <finder>` 对象的缓存。key 是传入 :data:`sys."
"path_hooks` 的路径，value 是相应已找到的查找器。如果路径是有效的文件系统路"
"径，但在 :data:`sys.path_hooks` 中未找到查找器，则存入 ``None``。"

#: ../../library/sys.rst:1128
msgid ""
"``None`` is stored instead of :class:`imp.NullImporter` when no finder is "
"found."
msgstr "未找到查找器时，改为存储 ``None``，而不是 :class:`imp.NullImporter`。"

#: ../../library/sys.rst:1135
msgid ""
"This string contains a platform identifier that can be used to append "
"platform-specific components to :data:`sys.path`, for instance."
msgstr ""
"本字符串是一个平台标识符，举例而言，该标识符可用于将特定平台的组件追加到 :"
"data:`sys.path` 中。"

#: ../../library/sys.rst:1138
msgid ""
"For Unix systems, except on Linux and AIX, this is the lowercased OS name as "
"returned by ``uname -s`` with the first part of the version as returned by "
"``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, *at the time "
"when Python was built*.  Unless you want to test for a specific system "
"version, it is therefore recommended to use the following idiom::"
msgstr ""
"对于 Unix 系统（除 Linux 和 AIX 外），该字符串是 *Python 构建时的* ``uname -"
"s`` 返回的小写操作系统名称，并附加了 ``uname -r`` 返回的系统版本的第一部分，"
"如 ``'sunos5'`` 或 ``'freebsd8'``。除非需要检测特定版本的系统，否则建议使用以"
"下习惯用法::"

#: ../../library/sys.rst:1151
msgid "For other systems, the values are:"
msgstr "对于其他系统，值是："

#: ../../library/sys.rst:1154
msgid "System"
msgstr "系统"

#: ../../library/sys.rst:1154
msgid "``platform`` value"
msgstr "``平台`` 值"

#: ../../library/sys.rst:1156
msgid "AIX"
msgstr "AIX"

#: ../../library/sys.rst:1156
msgid "``'aix'``"
msgstr "``'aix'``"

#: ../../library/sys.rst:1157
msgid "Linux"
msgstr "Linux"

#: ../../library/sys.rst:1157
msgid "``'linux'``"
msgstr "``'linux'``"

#: ../../library/sys.rst:1158
msgid "Windows"
msgstr "Windows"

#: ../../library/sys.rst:1158
msgid "``'win32'``"
msgstr "``'win32'``"

#: ../../library/sys.rst:1159
msgid "Windows/Cygwin"
msgstr "Windows/Cygwin"

#: ../../library/sys.rst:1159
msgid "``'cygwin'``"
msgstr "``'cygwin'``"

#: ../../library/sys.rst:1160
msgid "macOS"
msgstr "macOS"

#: ../../library/sys.rst:1160
msgid "``'darwin'``"
msgstr "``'darwin'``"

#: ../../library/sys.rst:1163
msgid ""
"On Linux, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'linux'``, instead of ``'linux2'`` or ``'linux3'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``startswith`` idiom presented above."
msgstr ""
"在 Linux 上，:attr:`sys.platform` 将不再包含副版本号。它将总是 ``'linux'`` 而"
"不是 ``'linux2'`` 或 ``'linux3'``。由于旧版本的 Python 会包含该版本号，因此推"
"荐总是使用上述 ``startswith`` 习惯用法。"

#: ../../library/sys.rst:1169
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix5'`` or ``'aix7'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``startswith`` idiom presented above."
msgstr ""
"在 AIX 上，:attr:`sys.platform` 将不再包含副版本号。它将总是 ``'aix'`` 而不"
"是 ``'aix5'`` 或 ``'aix7'``。由于旧版本的 Python 会包含该版本号，因此推荐总是"
"使用上述 ``startswith`` 习惯用法。"

#: ../../library/sys.rst:1177
msgid ""
":attr:`os.name` has a coarser granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ":attr:`os.name` 更加简略。:func:`os.uname` 提供系统的版本信息。"

#: ../../library/sys.rst:1180
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ":mod:`platform` 模块对系统的标识有更详细的检查。"

#: ../../library/sys.rst:1186
msgid ""
"Name of the platform-specific library directory. It is used to build the "
"path of standard library and the paths of installed extension modules."
msgstr "平台专用库目录。用于构建标准库的路径和已安装扩展模块的路径。"

#: ../../library/sys.rst:1189
msgid ""
"It is equal to ``\"lib\"`` on most platforms. On Fedora and SuSE, it is "
"equal to ``\"lib64\"`` on 64-bit platforms which gives the following ``sys."
"path`` paths (where ``X.Y`` is the Python ``major.minor`` version):"
msgstr ""
"在大多数平台上，它等同于 ``\"lib\"`` 。在 Fedora 和 SuSE 上，它等同于给出了以"
"下 ``sys.path`` 路径的 64 位平台上的 ``\"lib64\"`` （其中 ``X.Y`` 是 Python "
"的 ``major.minor`` 版本）。"

#: ../../library/sys.rst:1193
msgid ""
"``/usr/lib64/pythonX.Y/``: Standard library (like ``os.py`` of the :mod:`os` "
"module)"
msgstr "``/usr/lib64/pythonX.Y/``：标准库（如 :mod:`os` 模块的 ``os.py`` ）"

#: ../../library/sys.rst:1195
msgid ""
"``/usr/lib64/pythonX.Y/lib-dynload/``: C extension modules of the standard "
"library (like the :mod:`errno` module, the exact filename is platform "
"specific)"
msgstr ""
"``/usr/lib64/pythonX.Y/lib-dynload/``：标准库的 C 扩展模块（如 :mod:`errno` "
"模块，确切的文件名取决于平台）"

#: ../../library/sys.rst:1198
msgid ""
"``/usr/lib/pythonX.Y/site-packages/`` (always use ``lib``, not :data:`sys."
"platlibdir`): Third-party modules"
msgstr ""
"``/usr/lib/pythonX.Y/site-packages/`` (请使用 ``lib``, 而非 :data:`sys."
"platlibdir`): 第三方模块"

#: ../../library/sys.rst:1200
msgid ""
"``/usr/lib64/pythonX.Y/site-packages/``: C extension modules of third-party "
"packages"
msgstr "``/usr/lib64/pythonX.Y/site-packages/``: 第三方包的 C 扩展模块"

#: ../../library/sys.rst:1208
msgid ""
"A string giving the site-specific directory prefix where the platform "
"independent Python files are installed; on Unix, the default is ``'/usr/"
"local'``.  This can be set at build time with the ``--prefix`` argument to "
"the :program:`configure` script.  See :ref:`installation_paths` for derived "
"paths."
msgstr ""

#: ../../library/sys.rst:1214
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via :data:`base_prefix`."
msgstr ""
"如果在一个 :ref:`虚拟环境 <venv-def>` 中，那么该值将在 ``site.py`` 中被修改，"
"指向虚拟环境。Python 安装位置仍然可以用 :data:`base_prefix` 来获取。"

#: ../../library/sys.rst:1229
msgid ""
"Strings specifying the primary and secondary prompt of the interpreter.  "
"These are only defined if the interpreter is in interactive mode.  Their "
"initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string "
"object is assigned to either variable, its :func:`str` is re-evaluated each "
"time the interpreter prepares to read a new interactive command; this can be "
"used to implement a dynamic prompt."
msgstr ""
"字符串，指定解释器的首要和次要提示符。仅当解释器处于交互模式时，它们才有定"
"义。这种情况下，它们的初值为 ``'>>> '`` 和 ``'... '``。如果赋给其中某个变量的"
"是非字符串对象，则每次解释器准备读取新的交互式命令时，都会重新运行该对象的 :"
"func:`str`，这可以用来实现动态的提示符。"

#: ../../library/sys.rst:1239
msgid ""
"Set the flags used by the interpreter for :c:func:`dlopen` calls, such as "
"when the interpreter loads extension modules.  Among other things, this will "
"enable a lazy resolving of symbols when importing a module, if called as "
"``sys.setdlopenflags(0)``.  To share symbols across extension modules, call "
"as ``sys.setdlopenflags(os.RTLD_GLOBAL)``.  Symbolic names for the flag "
"values can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g. :"
"data:`os.RTLD_LAZY`)."
msgstr ""
"设置解释器在调用 :c:func:`dlopen` 时用到的标志，例如解释器在加载扩展模块时。"
"首先，调用 ``sys.setdlopenflags(0)`` 将在导入模块时对符号启用惰性解析。要在扩"
"展模块之间共享符号，请调用 ``sys.setdlopenflags(os.RTLD_GLOBAL)``。标志值的符"
"号名称可以在 :mod:`os` 模块中找到（即 ``RTLD_xxx`` 常量，如 :data:`os."
"RTLD_LAZY` ）。"

#: ../../library/sys.rst:1251
msgid ""
"Set the :ref:`integer string conversion length limitation "
"<int_max_str_digits>` used by this interpreter. See also :func:"
"`get_int_max_str_digits`."
msgstr ""
"设置解释器所使用的 :ref:`整数字符串转换长度限制 <int_max_str_digits>`。 另请"
"参阅 :func:`get_int_max_str_digits`。"

#: ../../library/sys.rst:1263
msgid ""
"Set the system's profile function, which allows you to implement a Python "
"source code profiler in Python.  See chapter :ref:`profile` for more "
"information on the Python profiler.  The system's profile function is called "
"similarly to the system's trace function (see :func:`settrace`), but it is "
"called with different events, for example it isn't called for each executed "
"line of code (only on call and return, but the return event is reported even "
"when an exception has been set). The function is thread-specific, but there "
"is no way for the profiler to know about context switches between threads, "
"so it does not make sense to use this in the presence of multiple threads. "
"Also, its return value is not used, so it can simply return ``None``.  Error "
"in the profile function will cause itself unset."
msgstr ""
"设置系统的性能分析函数，该函数使得在 Py​​thon 中能够实现一个 Python 源代码性能"
"分析器。关于 Python Profiler 的更多信息请参阅 :ref:`profile` 章节。性能分析函"
"数的调用方式类似于系统的跟踪函数（参阅 :func:`settrace` ），但它是通过不同的"
"事件调用的，例如，不是每执行一行代码就调用它一次（仅在调用某函数和从某函数返"
"回时才会调用性能分析函数，但即使某函数发生异常也会算作返回事件）。该函数是特"
"定于单个线程的，但是性能分析器无法得知线程之间的上下文切换，因此在存在多个线"
"程的情况下使用它是没有意义的。另外，因为它的返回值不会被用到，所以可以简单地"
"返回 ``None``。性能分析函数中的错误将导致其自身被解除设置。"

#: ../../library/sys.rst:1274
msgid ""
"Profile functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* "
"depends on the event type."
msgstr ""
"性能分析函数应接收三个参数：*frame*、*event* 和 *arg*。*frame* 是当前的堆栈"
"帧。*event* 是一个字符串：``'call'``、``'return'``、``'c_call'``、"
"``'c_return'`` 或 ``'c_exception'``。*arg* 取决于事件类型。"

#: ../../library/sys.rst:1279
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.setprofile`` with no "
"arguments."
msgstr "引发一个不带参数的 :ref:`审计事件 <auditing>` ``sys.setprofile``。"

#: ../../library/sys.rst:1281 ../../library/sys.rst:1362
msgid "The events have the following meaning:"
msgstr "这些事件具有以下含义："

#: ../../library/sys.rst:1285 ../../library/sys.rst:1367
msgid "``'call'``"
msgstr "``'call'``"

#: ../../library/sys.rst:1284
msgid ""
"A function is called (or some other code block entered).  The profile "
"function is called; *arg* is ``None``."
msgstr ""
"表示调用了某个函数（或进入了其他的代码块）。性能分析函数将被调用，*arg* 为 "
"``None``。"

#: ../../library/sys.rst:1290 ../../library/sys.rst:1382
msgid "``'return'``"
msgstr "``'return'``"

#: ../../library/sys.rst:1288
msgid ""
"A function (or other code block) is about to return.  The profile function "
"is called; *arg* is the value that will be returned, or ``None`` if the "
"event is caused by an exception being raised."
msgstr ""
"表示某个函数（或别的代码块）即将返回。性能分析函数将被调用，*arg* 是即将返回"
"的值，如果此次返回事件是由于抛出异常，*arg* 为 ``None``。"

#: ../../library/sys.rst:1294
msgid "``'c_call'``"
msgstr "``'c_call'``"

#: ../../library/sys.rst:1293
msgid ""
"A C function is about to be called.  This may be an extension function or a "
"built-in.  *arg* is the C function object."
msgstr ""
"表示即将调用某个 C 函数。它可能是扩展函数或是内建函数。*arg* 是 C 函数对象。"

#: ../../library/sys.rst:1297
msgid "``'c_return'``"
msgstr "``'c_return'``"

#: ../../library/sys.rst:1297
msgid "A C function has returned. *arg* is the C function object."
msgstr "表示返回了某个 C 函数。*arg* 是 C 函数对象。"

#: ../../library/sys.rst:1299
msgid "``'c_exception'``"
msgstr "``'c_exception'``"

#: ../../library/sys.rst:1300
msgid "A C function has raised an exception.  *arg* is the C function object."
msgstr "表示某个 C 函数抛出了异常。*arg* 是 C 函数对象。"

#: ../../library/sys.rst:1304
msgid ""
"Set the maximum depth of the Python interpreter stack to *limit*.  This "
"limit prevents infinite recursion from causing an overflow of the C stack "
"and crashing Python."
msgstr ""
"将 Python 解释器堆栈的最大深度设置为 *limit*。此限制可防止无限递归导致的 C 堆"
"栈溢出和 Python 崩溃。"

#: ../../library/sys.rst:1308
msgid ""
"The highest possible limit is platform-dependent.  A user may need to set "
"the limit higher when they have a program that requires deep recursion and a "
"platform that supports a higher limit.  This should be done with care, "
"because a too-high limit can lead to a crash."
msgstr ""
"不同平台所允许的最高限值不同。当用户有需要深度递归的程序且平台支持更高的限"
"值，可能就需要调高限值。进行该操作需要谨慎，因为过高的限值可能会导致崩溃。"

#: ../../library/sys.rst:1313
msgid ""
"If the new limit is too low at the current recursion depth, a :exc:"
"`RecursionError` exception is raised."
msgstr "如果新的限值低于当前的递归深度，将抛出 :exc:`RecursionError` 异常。"

#: ../../library/sys.rst:1316
msgid ""
"A :exc:`RecursionError` exception is now raised if the new limit is too low "
"at the current recursion depth."
msgstr ""
"如果新的限值低于当前的递归深度，现在将抛出 :exc:`RecursionError` 异常。"

#: ../../library/sys.rst:1323
msgid ""
"Set the interpreter's thread switch interval (in seconds).  This floating-"
"point value determines the ideal duration of the \"timeslices\" allocated to "
"concurrently running Python threads.  Please note that the actual value can "
"be higher, especially if long-running internal functions or methods are "
"used.  Also, which thread becomes scheduled at the end of the interval is "
"the operating system's decision.  The interpreter doesn't have its own "
"scheduler."
msgstr ""
"设置解释器的线程切换间隔时间（单位为秒）。该浮点数决定了“时间片”的理想持续时"
"间，时间片将分配给同时运行的 Python 线程。请注意，实际值可能更高，尤其是使用"
"了运行时间长的内部函数或方法时。同时，在时间间隔末尾调度哪个线程是操作系统的"
"决定。解释器没有自己的调度程序。"

#: ../../library/sys.rst:1340
msgid ""
"Set the system's trace function, which allows you to implement a Python "
"source code debugger in Python.  The function is thread-specific; for a "
"debugger to support multiple threads, it must register a trace function "
"using :func:`settrace` for each thread being debugged or use :func:"
"`threading.settrace`."
msgstr ""
"设置系统的跟踪函数，使得用户在 Python 中就可以实现 Python 源代码调试器。该函"
"数是特定于单个线程的，所以要让调试器支持多线程，必须为正在调试的每个线程都"
"用 :func:`settrace` 注册一个跟踪函数，或使用 :func:`threading.settrace`。"

#: ../../library/sys.rst:1345
msgid ""
"Trace functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'line'``, ``'return'``, ``'exception'`` or ``'opcode'``.  *arg* depends on "
"the event type."
msgstr ""
"跟踪函数应接收三个参数：*frame*、*event* 和 *arg*。*frame* 是当前的堆栈帧。"
"*event* 是一个字符串：``'call'``、``'line'``、``'return'``、``'exception'`` "
"或 ``'opcode'``。*arg* 取决于事件类型。"

#: ../../library/sys.rst:1350
msgid ""
"The trace function is invoked (with *event* set to ``'call'``) whenever a "
"new local scope is entered; it should return a reference to a local trace "
"function to be used for the new scope, or ``None`` if the scope shouldn't be "
"traced."
msgstr ""
"每次进入 trace 函数的新的局部作用范围，都会调用 trace 函数（ *event* 会被设置"
"为 ``'call'`` ），它应该返回一个引用，指向即将用在新作用范围上的局部跟踪函"
"数；如果不需要跟踪当前的作用范围，则返回 ``None``。"

#: ../../library/sys.rst:1355
msgid ""
"The local trace function should return a reference to itself (or to another "
"function for further tracing in that scope), or ``None`` to turn off tracing "
"in that scope."
msgstr ""
"局部跟踪函数应返回对自身的引用（或对另一个函数的引用，用来在其作用范围内进行"
"进一步的跟踪），或者返回 ``None`` 来停止跟踪其作用范围。"

#: ../../library/sys.rst:1359
msgid ""
"If there is any error occurred in the trace function, it will be unset, just "
"like ``settrace(None)`` is called."
msgstr ""
"如果跟踪函数出错，则该跟踪函数将被取消设置，类似于调用 ``settrace(None)``。"

#: ../../library/sys.rst:1365
msgid ""
"A function is called (or some other code block entered).  The global trace "
"function is called; *arg* is ``None``; the return value specifies the local "
"trace function."
msgstr ""
"表示调用了某个函数（或进入了其他的代码块）。全局跟踪函数将被调用，*arg* 为 "
"``None``。返回值将指定局部跟踪函数。"

#: ../../library/sys.rst:1376
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/sys.rst:1370
msgid ""
"The interpreter is about to execute a new line of code or re-execute the "
"condition of a loop.  The local trace function is called; *arg* is ``None``; "
"the return value specifies the new local trace function.  See :file:`Objects/"
"lnotab_notes.txt` for a detailed explanation of how this works. Per-line "
"events may be disabled for a frame by setting :attr:`f_trace_lines` to :"
"const:`False` on that frame."
msgstr ""
"表示解释器即将执行新一行代码或重新执行循环条件。局部跟踪函数将被调用，*arg* "
"为 ``None``，其返回值将指定新的局部跟踪函数。关于其工作原理的详细说明，请参"
"见 :file:`Objects/lnotab_notes.txt`。要在该堆栈帧禁用每行触发事件，可以在堆栈"
"帧上将 :attr:`f_trace_lines` 设置为 :const:`False`。"

#: ../../library/sys.rst:1379
msgid ""
"A function (or other code block) is about to return.  The local trace "
"function is called; *arg* is the value that will be returned, or ``None`` if "
"the event is caused by an exception being raised.  The trace function's "
"return value is ignored."
msgstr ""
"表示某个函数（或别的代码块）即将返回。局部跟踪函数将被调用，*arg* 是即将返回"
"的值，如果此次返回事件是由于抛出异常，*arg* 为 ``None``。跟踪函数的返回值将被"
"忽略。"

#: ../../library/sys.rst:1387
msgid "``'exception'``"
msgstr "``'exception'``"

#: ../../library/sys.rst:1385
msgid ""
"An exception has occurred.  The local trace function is called; *arg* is a "
"tuple ``(exception, value, traceback)``; the return value specifies the new "
"local trace function."
msgstr ""
"表示发生了某个异常。局部跟踪函数将被调用，*arg* 是一个 ``(exception, value, "
"traceback)`` 元组，返回值将指定新的局部跟踪函数。"

#: ../../library/sys.rst:1395
msgid "``'opcode'``"
msgstr "``'opcode'``"

#: ../../library/sys.rst:1390
msgid ""
"The interpreter is about to execute a new opcode (see :mod:`dis` for opcode "
"details).  The local trace function is called; *arg* is ``None``; the return "
"value specifies the new local trace function. Per-opcode events are not "
"emitted by default: they must be explicitly requested by setting :attr:"
"`f_trace_opcodes` to :const:`True` on the frame."
msgstr ""
"表示解释器即将执行一个新的操作码（操作码的详情请参阅 :mod:`dis` ）。局部跟踪"
"函数将被调用，*arg* 为 ``None``，其返回值将指定新的局部跟踪函数。每操作码触发"
"事件默认情况下都不发出：必须在堆栈帧上将 :attr:`f_trace_opcodes` 显式地设置"
"为 :const:`True` 来请求这些事件。"

#: ../../library/sys.rst:1397
msgid ""
"Note that as an exception is propagated down the chain of callers, an "
"``'exception'`` event is generated at each level."
msgstr ""
"注意，由于异常是在链式调用中传播的，所以每一级都会产生一个 ``'exception'`` 事"
"件。"

#: ../../library/sys.rst:1400
msgid ""
"For more fine-grained usage, it's possible to set a trace function by "
"assigning ``frame.f_trace = tracefunc`` explicitly, rather than relying on "
"it being set indirectly via the return value from an already installed trace "
"function. This is also required for activating the trace function on the "
"current frame, which :func:`settrace` doesn't do. Note that in order for "
"this to work, a global tracing function must have been installed with :func:"
"`settrace` in order to enable the runtime tracing machinery, but it doesn't "
"need to be the same tracing function (e.g. it could be a low overhead "
"tracing function that simply returns ``None`` to disable itself immediately "
"on each frame)."
msgstr ""
"更细微的用法是，可以显式地通过赋值 ``frame.f_trace = tracefunc`` 来设置跟踪函"
"数，而不是用现有跟踪函数的返回值去间接设置它。当前帧上的跟踪函数必须激活，"
"而 :func:`settrace` 还没有做这件事。注意，为了使上述设置起效，必须使用 :func:"
"`settrace` 来安装全局跟踪函数才能启用运行时跟踪机制，但是它不必与上述是同一个"
"跟踪函数（它可以是一个开销很低的跟踪函数，只返回 ``None``，即在各个帧上立即将"
"其自身禁用）。"

#: ../../library/sys.rst:1411
msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr "关于代码对象和帧对象的更多信息请参考 :ref:`types`。"

#: ../../library/sys.rst:1413
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.settrace`` with no "
"arguments."
msgstr "引发一个不带参数的 :ref:`审计事件 <auditing>` ``sys.settrace``。"

#: ../../library/sys.rst:1417
msgid ""
"The :func:`settrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""
":func:`settrace` 函数仅用于实现调试器，性能分析器，打包工具等。它的行为是实现"
"平台的一部分，而不是语言定义的一部分，因此并非在所有 Python 实现中都可用。"

#: ../../library/sys.rst:1424
msgid ""
"``'opcode'`` event type added; :attr:`f_trace_lines` and :attr:"
"`f_trace_opcodes` attributes added to frames"
msgstr ""
"添加了 ``'opcode'`` 事件类型；为帧对象添加了 :attr:`f_trace_lines` 和 :attr:"
"`f_trace_opcodes` 属性"

#: ../../library/sys.rst:1429
msgid ""
"Accepts two optional keyword arguments which are callables that accept an :"
"term:`asynchronous generator iterator` as an argument. The *firstiter* "
"callable will be called when an asynchronous generator is iterated for the "
"first time. The *finalizer* will be called when an asynchronous generator is "
"about to be garbage collected."
msgstr ""
"接受两个可选的关键字参数，要求它们是可调用对象，且接受一个 :term:`异步生成器"
"迭代器 <asynchronous generator iterator>` 作为参数。*firstiter* 对象将在异步"
"生成器第一次迭代时调用。*finalizer* 将在异步生成器即将被销毁时调用。"

#: ../../library/sys.rst:1435
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys."
"set_asyncgen_hooks_firstiter`` with no arguments."
msgstr ""
"引发一个不带参数的 :ref:`审计事件 <auditing>` ``sys."
"set_asyncgen_hooks_firstiter``。"

#: ../../library/sys.rst:1437
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys."
"set_asyncgen_hooks_finalizer`` with no arguments."
msgstr ""
"引发一个不带参数的 :ref:`审计事件 <auditing>` ``sys."
"set_asyncgen_hooks_finalizer``。"

#: ../../library/sys.rst:1439
msgid ""
"Two auditing events are raised because the underlying API consists of two "
"calls, each of which must raise its own event."
msgstr ""
"之所以会引发两个审计事件，是因为底层的 API 由两个调用组成，每个调用都须要引发"
"自己的事件。"

#: ../../library/sys.rst:1442
msgid ""
"See :pep:`525` for more details, and for a reference example of a "
"*finalizer* method see the implementation of ``asyncio.Loop."
"shutdown_asyncgens`` in :source:`Lib/asyncio/base_events.py`"
msgstr ""
"更多详情请参阅 :pep:`525`，*finalizer* 方法的参考示例可参阅 :source:`Lib/"
"asyncio/base_events.py` 中 ``asyncio.Loop.shutdown_asyncgens`` 的实现。"

#: ../../library/sys.rst:1454
msgid ""
"Allows enabling or disabling coroutine origin tracking. When enabled, the "
"``cr_origin`` attribute on coroutine objects will contain a tuple of "
"(filename, line number, function name) tuples describing the traceback where "
"the coroutine object was created, with the most recent call first. When "
"disabled, ``cr_origin`` will be None."
msgstr ""
"用于启用或禁用协程溯源。启用后，协程对象上的 ``cr_origin`` 属性将包含一个元"
"组，它由多个（文件名 filename，行号 line number，函数名 function name）元组组"
"成，整个元组描述出了协程对象创建过程的回溯，元组首端是最近一次的调用。禁用"
"后，``cr_origin`` 将为 None。"

#: ../../library/sys.rst:1461
msgid ""
"To enable, pass a *depth* value greater than zero; this sets the number of "
"frames whose information will be captured. To disable, pass set *depth* to "
"zero."
msgstr ""
"要启用，请向 *depth* 传递一个大于零的值，它指定了有多少帧将被捕获信息。要禁"
"用，请将 *depth* 置为零。"

#: ../../library/sys.rst:1465
msgid "This setting is thread-specific."
msgstr "该设置是特定于单个线程的。"

#: ../../library/sys.rst:1475
msgid ""
"Changes the default filesystem encoding and errors mode to 'mbcs' and "
"'replace' respectively, for consistency with versions of Python prior to 3.6."
msgstr ""

#: ../../library/sys.rst:1478
msgid ""
"This is equivalent to defining the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable before launching Python."
msgstr ""
"这等同于在启动 Python 前先定义好 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境"
"变量。"

#: ../../library/sys.rst:1483
msgid "See :pep:`529` for more details."
msgstr "更多详情请参阅 :pep:`529`。"

#: ../../library/sys.rst:1490
msgid ""
":term:`File objects <file object>` used by the interpreter for standard "
"input, output and errors:"
msgstr ""
"解释器用于标准输入、标准输出和标准错误的 :term:`文件对象 <file object>`："

#: ../../library/sys.rst:1493
msgid ""
"``stdin`` is used for all interactive input (including calls to :func:"
"`input`);"
msgstr "``stdin`` 用于所有交互式输入（包括对 :func:`input` 的调用）；"

#: ../../library/sys.rst:1495
msgid ""
"``stdout`` is used for the output of :func:`print` and :term:`expression` "
"statements and for the prompts of :func:`input`;"
msgstr ""
"``stdout`` 用于 :func:`print` 和 :term:`expression` 语句的输出，以及用于 :"
"func:`input` 的提示符；"

#: ../../library/sys.rst:1497
msgid "The interpreter's own prompts and its error messages go to ``stderr``."
msgstr "解释器自身的提示符和它的错误消息都发往 ``stderr``。"

#: ../../library/sys.rst:1499
msgid ""
"These streams are regular :term:`text files <text file>` like those returned "
"by the :func:`open` function.  Their parameters are chosen as follows:"
msgstr ""
"这些流都是常规 :term:`文本文件 <text file>`，与 :func:`open` 函数返回的对象一"
"致。它们的参数选择如下："

#: ../../library/sys.rst:1503
msgid ""
"The character encoding is platform-dependent.  Non-Windows platforms use the "
"locale encoding (see :meth:`locale.getpreferredencoding()`)."
msgstr ""

#: ../../library/sys.rst:1507
msgid ""
"On Windows, UTF-8 is used for the console device.  Non-character devices "
"such as disk files and pipes use the system locale encoding (i.e. the ANSI "
"codepage).  Non-console character devices such as NUL (i.e. where "
"``isatty()`` returns ``True``) use the value of the console input and output "
"codepages at startup, respectively for stdin and stdout/stderr. This "
"defaults to the system locale encoding if the process is not initially "
"attached to a console."
msgstr ""

#: ../../library/sys.rst:1516
msgid ""
"The special behaviour of the console can be overridden by setting the "
"environment variable PYTHONLEGACYWINDOWSSTDIO before starting Python. In "
"that case, the console codepages are used as for any other character device."
msgstr ""
"要重写控制台的特殊行为，可以在启动 Python 前设置 PYTHONLEGACYWINDOWSSTDIO 环"
"境变量。此时，控制台代码页将用于其他字符设备。"

#: ../../library/sys.rst:1521
msgid ""
"Under all platforms, you can override the character encoding by setting the :"
"envvar:`PYTHONIOENCODING` environment variable before starting Python or by "
"using the new :option:`-X` ``utf8`` command line option and :envvar:"
"`PYTHONUTF8` environment variable.  However, for the Windows console, this "
"only applies when :envvar:`PYTHONLEGACYWINDOWSSTDIO` is also set."
msgstr ""
"在所有平台上，都可以通过在 Python 启动前设置 :envvar:`PYTHONIOENCODING` 环境"
"变量来重写字符编码，或通过新的 :option:`-X` ``utf8`` 命令行选项和 :envvar:"
"`PYTHONUTF8` 环境变量来设置。但是，对 Windows 控制台来说，上述方法仅在设置"
"了 :envvar:`PYTHONLEGACYWINDOWSSTDIO` 后才起效。"

#: ../../library/sys.rst:1528
msgid ""
"When interactive, the ``stdout`` stream is line-buffered. Otherwise, it is "
"block-buffered like regular text files.  The ``stderr`` stream is line-"
"buffered in both cases.  You can make both streams unbuffered by passing "
"the :option:`-u` command-line option or setting the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""
"交互模式下，``stdout`` 流是行缓冲的。其他情况下，它像常规文本文件一样是块缓冲"
"的。两种情况下的 ``stderr`` 流都是行缓冲的。要使得两个流都变成无缓冲，可以传"
"入 :option:`-u` 命令行选项或设置 :envvar:`PYTHONUNBUFFERED` 环境变量。"

#: ../../library/sys.rst:1534
msgid ""
"Non-interactive ``stderr`` is now line-buffered instead of fully buffered."
msgstr "非交互模式下，``stderr`` 现在是行缓冲的，而不是全缓冲的。"

#: ../../library/sys.rst:1540
msgid ""
"To write or read binary data from/to the standard streams, use the "
"underlying binary :data:`~io.TextIOBase.buffer` object.  For example, to "
"write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``."
msgstr ""
"要从标准流写入或读取二进制数据，请使用底层二进制 :data:`~io.TextIOBase."
"buffer` 对象。例如，要将字节写入 :data:`stdout`，请使用 ``sys.stdout.buffer."
"write(b'abc')``。"

#: ../../library/sys.rst:1544
msgid ""
"However, if you are writing a library (and do not control in which context "
"its code will be executed), be aware that the standard streams may be "
"replaced with file-like objects like :class:`io.StringIO` which do not "
"support the :attr:`~io.BufferedIOBase.buffer` attribute."
msgstr ""
"但是，如果你在写一个库（并且不限制执行库代码时的上下文），那么请注意，标准流"
"可能会被替换为文件类对象，如 :class:`io.StringIO`，它们是不支持 :attr:`~io."
"BufferedIOBase.buffer` 属性的。"

#: ../../library/sys.rst:1554
msgid ""
"These objects contain the original values of ``stdin``, ``stderr`` and "
"``stdout`` at the start of the program.  They are used during finalization, "
"and could be useful to print to the actual standard stream no matter if the "
"``sys.std*`` object has been redirected."
msgstr ""
"程序开始时，这些对象存有 ``stdin``、``stderr`` 和 ``stdout`` 的初始值。它们在"
"程序结束前都可以使用，且在需要向实际的标准流打印内容时很有用，无论 ``sys."
"std*`` 对象是否已重定向。"

#: ../../library/sys.rst:1559
msgid ""
"It can also be used to restore the actual files to known working file "
"objects in case they have been overwritten with a broken object.  However, "
"the preferred way to do this is to explicitly save the previous stream "
"before replacing it, and restore the saved object."
msgstr ""
"如果实际文件已经被覆盖成一个损坏的对象了，那它也可用于将实际文件还原成能正常"
"工作的文件对象。但是，本过程的最佳方法应该是，在原来的流被替换之前就显式地保"
"存它，并使用这一保存的对象来还原。"

#: ../../library/sys.rst:1565
msgid ""
"Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the "
"original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be "
"``None``. It is usually the case for Windows GUI apps that aren't connected "
"to a console and Python apps started with :program:`pythonw`."
msgstr ""
"某些情况下的 ``stdin``、``stdout`` 和 ``stderr`` 以及初始值 ``__stdin__``、"
"``__stdout__`` 和 ``__stderr__`` 可以是 ``None``。通常发生在未连接到控制台的 "
"Windows GUI app 中，以及在用 :program:`pythonw` 启动的 Python app 中。"

#: ../../library/sys.rst:1573
msgid ""
"A :term:`named tuple` holding information about the thread implementation."
msgstr "一个 :term:`具名元组 <named tuple>`，包含线程实现的信息。"

#: ../../library/sys.rst:1581
msgid ":const:`name`"
msgstr ":const:`name`"

#: ../../library/sys.rst:1581
msgid "Name of the thread implementation:"
msgstr "线程实现的名称："

#: ../../library/sys.rst:1583
msgid "``'nt'``: Windows threads"
msgstr "``'nt'``: Windows 线程"

#: ../../library/sys.rst:1584
msgid "``'pthread'``: POSIX threads"
msgstr "``'pthread'``: POSIX 线程"

#: ../../library/sys.rst:1585
msgid "``'solaris'``: Solaris threads"
msgstr "``'solaris'``: Solaris 线程"

#: ../../library/sys.rst:1587
msgid ":const:`lock`"
msgstr ":const:`lock`"

#: ../../library/sys.rst:1587
msgid "Name of the lock implementation:"
msgstr "锁实现的名称："

#: ../../library/sys.rst:1589
msgid "``'semaphore'``: a lock uses a semaphore"
msgstr "``'semaphore'``: 锁使用信号量"

#: ../../library/sys.rst:1590
msgid "``'mutex+cond'``: a lock uses a mutex and a condition variable"
msgstr "``'mutex+cond'``: 锁使用互斥和条件变量"

#: ../../library/sys.rst:1592
msgid "``None`` if this information is unknown"
msgstr "``None`` 如果此信息未知"

#: ../../library/sys.rst:1594
msgid ":const:`version`"
msgstr ":const:`version`"

#: ../../library/sys.rst:1594
msgid ""
"Name and version of the thread library. It is a string, or ``None`` if this "
"information is unknown."
msgstr "线程库的名称和版本。它是一个字符串，如果此信息未知，则为 ``None`` 。"

#: ../../library/sys.rst:1603
msgid ""
"When this variable is set to an integer value, it determines the maximum "
"number of levels of traceback information printed when an unhandled "
"exception occurs. The default is ``1000``.  When set to ``0`` or less, all "
"traceback information is suppressed and only the exception type and value "
"are printed."
msgstr ""
"当该变量值设置为整数，在发生未处理的异常时，它将决定打印的回溯信息的最大层级"
"数。默认为 ``1000``。当将其设置为 ``0`` 或小于 0，将关闭所有回溯信息，并且只"
"打印异常类型和异常值。"

#: ../../library/sys.rst:1611
msgid "Handle an unraisable exception."
msgstr "处理一个无法抛出的异常。"

#: ../../library/sys.rst:1613
msgid ""
"Called when an exception has occurred but there is no way for Python to "
"handle it. For example, when a destructor raises an exception or during "
"garbage collection (:func:`gc.collect`)."
msgstr ""
"它会在发生了一个异常但 Python 没有办法处理时被调用。例如，当一个析构器引发了"
"异常，或在垃圾回收 (:func:`gc.collect`) 期间引发了异常。"

#: ../../library/sys.rst:1617
msgid "The *unraisable* argument has the following attributes:"
msgstr "*unraisable* 参数具有以下属性:"

#: ../../library/sys.rst:1619
msgid "*exc_type*: Exception type."
msgstr "*exc_type*: 异常类型"

#: ../../library/sys.rst:1620
msgid "*exc_value*: Exception value, can be ``None``."
msgstr "*exc_value*: 异常值，可以是 ``None``."

#: ../../library/sys.rst:1621
msgid "*exc_traceback*: Exception traceback, can be ``None``."
msgstr "*exc_traceback*: 异常回溯，可以是 ``None``."

#: ../../library/sys.rst:1622
msgid "*err_msg*: Error message, can be ``None``."
msgstr "*err_msg*: 错误信息，可以是 ``None``."

#: ../../library/sys.rst:1623
msgid "*object*: Object causing the exception, can be ``None``."
msgstr "*object*: 导致异常的对象，可以为 ``None``."

#: ../../library/sys.rst:1625
msgid ""
"The default hook formats *err_msg* and *object* as: ``f'{err_msg}: {object!"
"r}'``; use \"Exception ignored in\" error message if *err_msg* is ``None``."
msgstr ""
"默认的钩子程序会将 *err_msg* 和 *object* 格式化为： ``f'{err_msg}: {object!"
"r}'``；如果 *err_msg* 为 ``None`` 则采用 \"Exception ignored in\" 错误信息。"

#: ../../library/sys.rst:1629
msgid ""
":func:`sys.unraisablehook` can be overridden to control how unraisable "
"exceptions are handled."
msgstr "要改变无法抛出的异常的处理过程，可以重写 :func:`sys.unraisablehook`。"

#: ../../library/sys.rst:1632
msgid ""
"Storing *exc_value* using a custom hook can create a reference cycle. It "
"should be cleared explicitly to break the reference cycle when the exception "
"is no longer needed."
msgstr ""
"使用定制钩子存放 *exc_value* 可能会创建引用循环。 它应当在不再需要异常时被显"
"式地清空以打破引用循环。"

#: ../../library/sys.rst:1636
msgid ""
"Storing *object* using a custom hook can resurrect it if it is set to an "
"object which is being finalized. Avoid storing *object* after the custom "
"hook completes to avoid resurrecting objects."
msgstr ""
"如果一个 *object* 正在被销毁，那么使用自定义的钩子储存该对象可能会将其复活。"
"请在自定义钩子生效后避免储存 *object*，以避免对象的复活。"

#: ../../library/sys.rst:1640
msgid "See also :func:`excepthook` which handles uncaught exceptions."
msgstr "另请参阅 :func:`excepthook`，它处理未捕获的异常。"

#: ../../library/sys.rst:1642
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.unraisablehook`` with "
"arguments ``hook``, ``unraisable``."
msgstr ""
"引发一个审计事件 ``sys.unraisablehook`` 并附带参数 ``hook``, ``unraisable``。"

#: ../../library/sys.rst:1644
msgid ""
"Raise an auditing event ``sys.unraisablehook`` with arguments ``hook``, "
"``unraisable`` when an exception that cannot be handled occurs. The "
"``unraisable`` object is the same as what will be passed to the hook. If no "
"hook has been set, ``hook`` may be ``None``."
msgstr ""
"当发生无法处理的异常时，将引发一个审计事件 ``sys.unraisablehook``，附带参数 "
"``hook``、``unraisable``。其中 ``unraisable`` 对象与传递给钩子的对象相同。如"
"果没有设置钩子，那么 ``hook`` 可能是 ``None``。"

#: ../../library/sys.rst:1653
msgid ""
"A string containing the version number of the Python interpreter plus "
"additional information on the build number and compiler used.  This string "
"is displayed when the interactive interpreter is started.  Do not extract "
"version information out of it, rather, use :data:`version_info` and the "
"functions provided by the :mod:`platform` module."
msgstr ""
"一个包含 Python 解释器版本号加编译版本号以及所用编译器等额外信息的字符串。 此"
"字符串会在交互式解释器启动时显示。 请不要从中提取版本信息，而应当使用 :data:"
"`version_info` 以及 :mod:`platform` 模块所提供的函数。"

#: ../../library/sys.rst:1662
msgid ""
"The C API version for this interpreter.  Programmers may find this useful "
"when debugging version conflicts between Python and extension modules."
msgstr ""
"这个解释器的 C API 版本。当你在调试 Python及期扩展模板的版本冲突这个功能非常"
"有用。"

#: ../../library/sys.rst:1668
msgid ""
"A tuple containing the five components of the version number: *major*, "
"*minor*, *micro*, *releaselevel*, and *serial*.  All values except "
"*releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, "
"``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding "
"to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can "
"also be accessed by name, so ``sys.version_info[0]`` is equivalent to ``sys."
"version_info.major`` and so on."
msgstr ""
"一个包含版本号五部分的元组: *major*, *minor*, *micro*, *releaselevel* 和 "
"*serial*。 除 *releaselevel* 外的所有值均为整数；发布级别值则为 ``'alpha'``, "
"``'beta'``, ``'candidate'`` 或 ``'final'``。 对应于 Python 版本 2.0 的 "
"``version_info`` 值为 ``(2, 0, 0, 'final', 0)``。 这些部分也可按名称访问，因"
"此 ``sys.version_info[0]`` 就等价于 ``sys.version_info.major``，依此类推。"

#: ../../library/sys.rst:1676
msgid "Added named component attributes."
msgstr "增加了以名称表示的各部分属性。"

#: ../../library/sys.rst:1681
msgid ""
"This is an implementation detail of the warnings framework; do not modify "
"this value.  Refer to the :mod:`warnings` module for more information on the "
"warnings framework."
msgstr ""
"这是警告框架的一个实现细节；请不要修改此值。 有关警告框架的更多信息请参阅 :"
"mod:`warnings` 模块。"

#: ../../library/sys.rst:1688
msgid ""
"The version number used to form registry keys on Windows platforms. This is "
"stored as string resource 1000 in the Python DLL.  The value is normally the "
"first three characters of :const:`version`.  It is provided in the :mod:"
"`sys` module for informational purposes; modifying this value has no effect "
"on the registry keys used by Python."
msgstr ""

#: ../../library/sys.rst:1699
msgid ""
"A dictionary of the various implementation-specific flags passed through "
"the :option:`-X` command-line option.  Option names are either mapped to "
"their values, if given explicitly, or to :const:`True`.  Example:"
msgstr ""
"一个字典，包含通过 :option:`-X` 命令行选项传递的旗标，这些旗标专属于各种具体"
"实现。选项名称将会映射到对应的值（如果显式指定）或者 :const:`True`。例如:"

#: ../../library/sys.rst:1715
msgid ""
"This is a CPython-specific way of accessing options passed through :option:`-"
"X`.  Other implementations may export them through other means, or not at "
"all."
msgstr ""
"这是 CPython 专属的访问通过 :option:`-X` 传递的选项的方式。 其他实现可能会通"
"过其他方式导出它们，或者完全不导出。"

#: ../../library/sys.rst:1723
msgid "Citations"
msgstr "引用"

#: ../../library/sys.rst:1724
msgid ""
"ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this "
"standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n1256.pdf\\ ."
msgstr ""
