# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:55+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr "使用 :mod:`!importlib.metadata`"

#: ../../library/importlib.metadata.rst:10
msgid "**Source code:** :source:`Lib/importlib/metadata.py`"
msgstr ""

#: ../../library/importlib.metadata.rst:15
msgid ""
"This functionality is provisional and may deviate from the usual version "
"semantics of the standard library."
msgstr ""

#: ../../library/importlib.metadata.rst:18
msgid ""
"``importlib.metadata`` is a library that provides for access to installed "
"package metadata.  Built in part on Python's import system, this library "
"intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with :mod:`importlib.resources` "
"in Python 3.7 and newer (backported as `importlib_resources`_ for older "
"versions of Python), this can eliminate the need to use the older and less "
"efficient ``pkg_resources`` package."
msgstr ""
"``importlib.metadata`` 是一个提供对已安装包的元数据访问的库。这个库部分建立"
"在 Python 的导入系统上，旨在取代 ``pkg_resources`` 的 `entry point API`_ 和 "
"`metadata API`_ 中的类似功能。 通过和 Python 3.7 或更高版本中的 :mod:"
"`importlib.resources` 一同使用（对于旧版本的 Python 则作为 "
"`importlib_resources`_ 向后移植），这可以消除对使用较旧且较为低效的 "
"``pkg_resources`` 包的需要。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"By \"installed package\" we generally mean a third-party package installed "
"into Python's ``site-packages`` directory via tools such as `pip <https://"
"pypi.org/project/pip/>`_.  Specifically, it means a package with either a "
"discoverable ``dist-info`` or ``egg-info`` directory, and metadata defined "
"by :pep:`566` or its older specifications. By default, package metadata can "
"live on the file system or in zip archives on :data:`sys.path`.  Through an "
"extension mechanism, the metadata can live almost anywhere."
msgstr ""
"此处所说的 “已安装的包” 通常指通过 `pip <https://pypi.org/project/pip/>`_ 等"
"工具安装在 Python ``site-packages`` 目录下的第三方包。具体来说，它指的是一个"
"具有可发现的 ``dist-info`` 或 ``egg-info`` 目录以及 :pep:`566` 或其更早的规范"
"所定义的元数据的包。默认情况下，包的元数据可以存在于文件系统中或 :data:`sys."
"path` 上的压缩文件中。 通过扩展机制，元数据几乎可以存在于任何地方。"

#: ../../library/importlib.metadata.rst:38
msgid "Overview"
msgstr "概述"

#: ../../library/importlib.metadata.rst:40
msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""
"假设你想得到你用 ``pip`` 安装的一个包的版本字符串。我们在创建的虚拟环境中安装"
"一些东西："

#: ../../library/importlib.metadata.rst:50
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr "你可以通过运行以下代码得到 ``wheel`` 的版本字符串："

#: ../../library/importlib.metadata.rst:59
msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group contains "
"a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""
"你也可以获得以组名为关键字的入口点集合，比如 ``console_scripts`` 和 "
"``distutils.commands`` 。每个组包含一个 :ref:`入口点 <entry-points>` 对象的序"
"列。"

#: ../../library/importlib.metadata.rst:63
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "你可以获得 :ref:`分发的元数据 <metadata>`："

#: ../../library/importlib.metadata.rst:68
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"你也可以获得 :ref:`分发包的版本号 <version>`，列出它的 :ref:`构成文件 "
"<files>`，并且得到分发包的 :ref:`requirements` 列表。"

#: ../../library/importlib.metadata.rst:74
msgid "Functional API"
msgstr "函数式 API"

#: ../../library/importlib.metadata.rst:76
msgid "This package provides the following functionality via its public API."
msgstr "这个包的公开 API 提供了以下功能。"

#: ../../library/importlib.metadata.rst:82
msgid "Entry points"
msgstr "入口点"

#: ../../library/importlib.metadata.rst:84
msgid ""
"The ``entry_points()`` function returns a dictionary of all entry points, "
"keyed by group.  Entry points are represented by ``EntryPoint`` instances; "
"each ``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes "
"and a ``.load()`` method to resolve the value.  There are also ``.module``, "
"``.attr``, and ``.extras`` attributes for getting the components of the ``."
"value`` attribute::"
msgstr ""

#: ../../library/importlib.metadata.rst:108
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.readthedocs."
"io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ "
"for more information on entry points, their definition, and usage."
msgstr ""

#: ../../library/importlib.metadata.rst:118
msgid "Distribution metadata"
msgstr "分发的元数据"

#: ../../library/importlib.metadata.rst:120
msgid ""
"Every distribution includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr "每个分发都包含某些元数据，你可以通过 ``metadata()`` 函数提取它们："

#: ../../library/importlib.metadata.rst:125
msgid ""
"The keys of the returned data structure [#f1]_ name the metadata keywords, "
"and their values are returned unparsed from the distribution metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:135
msgid "Distribution versions"
msgstr "分发包的版本"

#: ../../library/importlib.metadata.rst:137
msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr "``version()`` 函数是以字符串形式获取分发的版本号的最快方式："

#: ../../library/importlib.metadata.rst:147
msgid "Distribution files"
msgstr "分发包的文件"

#: ../../library/importlib.metadata.rst:149
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a distribution package name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"你可以获得分发内包含的所有文件的集合。 ``files()`` 函数传入一个分发包的名字并"
"返回所有这个分发安装的文件。每个返回的文件对象都是一个 :class:`pathlib."
"PurePath` 的具有额外由元数据指定的 ``dist``， ``size`` 和 ``hash`` 属性的子"
"类 ``PackagePath`` 的实例。例如："

#: ../../library/importlib.metadata.rst:165
msgid "Once you have the file, you can also read its contents::"
msgstr "当你获得了文件对象，你可以读取其内容："

#: ../../library/importlib.metadata.rst:176
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr "你也可以使用 ``locate`` 方法来获得文件的绝对路径："

#: ../../library/importlib.metadata.rst:182
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""
"当列出包含文件的元数据文件（RECORD 或 SOURCES.txt）不存在时， ``files()`` 函"
"数将返回 ``None`` 。调用者可能会想要将对 ``files()`` 的调用封装在 "
"`always_iterable <https://more-itertools.readthedocs.io/en/stable/api."
"html#more_itertools.always_iterable>`_ 中，或者用其他方法来应对目标分发元数据"
"存在性未知的情况。"

#: ../../library/importlib.metadata.rst:193
msgid "Distribution requirements"
msgstr "分发包的依赖"

#: ../../library/importlib.metadata.rst:195
msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr "使用 ``requires()`` 函数来获得一个 分发 的所有依赖："

#: ../../library/importlib.metadata.rst:205
msgid "Distributions"
msgstr "分发包对象"

#: ../../library/importlib.metadata.rst:207
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python package.  You "
"can get the ``Distribution`` instance::"
msgstr ""
"以上的 API 是最常见而方便的用法，但是你也可以通过 ``Distribution`` 类获得以上"
"所有信息。 ``Distribution`` 是一个代表 Python 包的元数据的抽象对象。你可以这"
"样获取 ``Distribution`` 实例："

#: ../../library/importlib.metadata.rst:215
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr "因此，可以通过 ``Distribution`` 实例获得版本号："

#: ../../library/importlib.metadata.rst:221
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr "``Distribution`` 实例具有所有可用的附加元数据："

#: ../../library/importlib.metadata.rst:229
msgid ""
"The full set of available metadata is not described here.  See :pep:`566` "
"for additional details."
msgstr "此处并未描述全部可用的元数据集合。 请参见 :pep:`566` 以了解更多细节。"

#: ../../library/importlib.metadata.rst:234
msgid "Extending the search algorithm"
msgstr "扩展搜索算法"

#: ../../library/importlib.metadata.rst:236
msgid ""
"Because package metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a package is found through "
"import system :ref:`finders <finders-and-loaders>`.  To find a distribution "
"package's metadata, ``importlib.metadata`` queries the list of :term:`meta "
"path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""
"包的元数据无法通过搜索 :data:`sys.path` 或通过包加载器获得，而是通过导入系统"
"的 :ref:`查找器 <finders-and-loaders>` 找到的。 ``importlib.metadata`` 查询"
"在 :data:`sys.meta_path` 上的 :term:`元数据查找器 <meta path finder>` 列表以"
"获得分发包的元数据。"

#: ../../library/importlib.metadata.rst:242
msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions loaded "
"from typical file-system-based paths."
msgstr ""
"Python 默认的 ``PathFinder`` 包含一个调用 ``importlib.metadata."
"MetadataPathFinder`` 来查找从典型的文件系统路径加载发布的钩子。"

#: ../../library/importlib.metadata.rst:246
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽象基类 :py:class:`importlib.abc.MetaPathFinder` 定义了 Python 导入系统期望"
"的查找器接口。 ``importlib.metadata`` 通过寻找 :data:`sys.meta_path` 上查找器"
"可选的 ``find_distributions`` 可调用的属性扩展这个协议，并将这个扩展接口作为 "
"``DistributionFinder`` 抽象基类提供，它定义了这个抽象方法："

#: ../../library/importlib.metadata.rst:260
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` 对象提供了指示搜索路径和匹配名称的属性 ``."
"path`` 和 ``.name`` ，也可能提供其他相关的上下文。"

#: ../../library/importlib.metadata.rst:264
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"这在实践中意味着要支持在文件系统外的其他位置查找分发包的元数据，你需要子类化 "
"``Distribution`` 并实现抽象方法，之后从一个自定义查找器的 "
"``find_distributions()`` 方法返回这个派生的 ``Distribution`` 实例。"

#: ../../library/importlib.metadata.rst:277
msgid "Footnotes"
msgstr "备注"

#: ../../library/importlib.metadata.rst:278
msgid ""
"Technically, the returned distribution metadata object is an :class:`email."
"message.EmailMessage` instance, but this is an implementation detail, and "
"not part of the stable API.  You should only use dictionary-like methods and "
"syntax to access the metadata contents."
msgstr ""
