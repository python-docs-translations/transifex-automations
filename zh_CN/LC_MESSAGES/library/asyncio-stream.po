# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr "流"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**源码:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""
"流是用于处理网络连接的支持 async/await 的高层级原语。 流允许发送和接收数据，"
"而不需要使用回调或低级协议和传输。"

#: ../../library/asyncio-stream.rst:19
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr "下面是一个使用 asyncio streams 编写的 TCP echo 客户端示例::"

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "参见下面的 `Examples`_ 部分。"

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr "Stream 函数"

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr "下面的高级 asyncio 函数可以用来创建和处理流:"

#: ../../library/asyncio-stream.rst:57
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr "建立网络连接并返回一对 ``(reader, writer)`` 对象。"

#: ../../library/asyncio-stream.rst:60
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""
"返回的 *reader* 和 *writer* 对象是 :class:`StreamReader` 和 :class:"
"`StreamWriter` 类的实例。"

#: ../../library/asyncio-stream.rst:63
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this function is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:66 ../../library/asyncio-stream.rst:103
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""
"*limit* 确定返回的 :class:`StreamReader` 实例使用的缓冲区大小限制。默认情况"
"下，*limit* 设置为 64 KiB 。"

#: ../../library/asyncio-stream.rst:70
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr "其余的参数直接传递到 :meth:`loop.create_connection` 。"

#: ../../library/asyncio-stream.rst:75 ../../library/asyncio-stream.rst:132
msgid "The *ssl_handshake_timeout* parameter."
msgstr "*ssl_handshake_timeout* 形参。"

#: ../../library/asyncio-stream.rst:79
msgid "Added *happy_eyeballs_delay* and *interleave* parameters."
msgstr "增加了 *happy_eyeballs_delay* 和 *interleave* 形参。"

#: ../../library/asyncio-stream.rst:89
msgid "Start a socket server."
msgstr "启动套接字服务。"

#: ../../library/asyncio-stream.rst:91
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""
"当一个新的客户端连接被建立时，回调函数 *client_connected_cb* 会被调用。该函数"
"会接收到一对参数 ``(reader, writer)`` ，reader是类 :class:`StreamReader` 的实"
"例，而writer是类 :class:`StreamWriter` 的实例。"

#: ../../library/asyncio-stream.rst:96
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""
"*client_connected_cb* 即可以是普通的可调用对象也可以是一个 :ref:`协程函数 "
"<coroutine>`; 如果它是一个协程函数，它将自动作为 :class:`Task` 被调度。"

#: ../../library/asyncio-stream.rst:100
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this method is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:107
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr "余下的参数将会直接传递给 :meth:`loop.create_server`."

#: ../../library/asyncio-stream.rst:112 ../../library/asyncio-stream.rst:154
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr " *ssl_handshake_timeout* 和  *start_serving* 形参。"

#: ../../library/asyncio-stream.rst:116
msgid "Unix Sockets"
msgstr "Unix 套接字"

#: ../../library/asyncio-stream.rst:121
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr "建立一个 Unix 套接字连接并返回 ``(reader, writer)`` 这对返回值。"

#: ../../library/asyncio-stream.rst:124
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr "与 :func:`open_connection` 相似，但是是在 Unix 套接字上的操作。"

#: ../../library/asyncio-stream.rst:126
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr "请看文档 :meth:`loop.create_unix_connection`."

#: ../../library/asyncio-stream.rst:129 ../../library/asyncio-stream.rst:151
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`可用性 <availability>`: Unix。"

#: ../../library/asyncio-stream.rst:136
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:144
msgid "Start a Unix socket server."
msgstr "启动一个 Unix 套接字服务。"

#: ../../library/asyncio-stream.rst:146
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr "与 :func:`start_server` 相似，但是是在 Unix 套接字上的操作。"

#: ../../library/asyncio-stream.rst:148
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "请看文档 :meth:`loop.create_unix_server`."

#: ../../library/asyncio-stream.rst:158
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr "*path* 形参现在可以是 :term:`path-like object` 对象。"

#: ../../library/asyncio-stream.rst:162
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:166
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream."
msgstr ""

#: ../../library/asyncio-stream.rst:169
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"不推荐直接实例化 *StreamReader* 对象，建议使用 :func:`open_connection` 和 :"
"func:`start_server` 来获取 *StreamReader* 实例。"

#: ../../library/asyncio-stream.rst:175
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:178
msgid ""
"If EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:183
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr "读取一行，其中“行”指的是以 ``\\n`` 结尾的字节序列。"

#: ../../library/asyncio-stream.rst:186
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr "如果读到EOF而没有找到 ``\\n`` ，该方法返回部分读取的数据。"

#: ../../library/asyncio-stream.rst:189
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr "如果读到EOF，且内部缓冲区为空，则返回一个空的 ``bytes`` 对象。"

#: ../../library/asyncio-stream.rst:194
msgid "Read exactly *n* bytes."
msgstr "精确读取 *n* 个 bytes，不会超过也不能少于。"

#: ../../library/asyncio-stream.rst:196
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""
"如果在读取完 *n* 个byte之前读取到EOF，则会引发 :exc:`IncompleteReadError` 异"
"常。使用 :attr:`IncompleteReadError.partial` 属性来获取到达流结束之前读取的 "
"bytes 字符串。"

#: ../../library/asyncio-stream.rst:202
msgid "Read data from the stream until *separator* is found."
msgstr "从流中读取数据直至遇到 *separator*"

#: ../../library/asyncio-stream.rst:204
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"成功后，数据和指定的separator将从内部缓冲区中删除(或者说被消费掉)。返回的数据"
"将包括在末尾的指定separator。"

#: ../../library/asyncio-stream.rst:208
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""
"如果读取的数据量超过了配置的流限制，将引发 :exc:`LimitOverrunError` 异常，数"
"据将留在内部缓冲区中并可以再次读取。"

#: ../../library/asyncio-stream.rst:212
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""
"如果在找到完整的separator之前到达EOF，则会引发 :exc:`IncompleteReadError` 异"
"常，并重置内部缓冲区。 :attr:`IncompleteReadError.partial` 属性可能包含指定"
"separator的一部分。"

#: ../../library/asyncio-stream.rst:221
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr "如果缓冲区为空并且 :meth:`feed_eof` 被调用，则返回 ``True`` 。"

#: ../../library/asyncio-stream.rst:226
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:230
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr "这个类表示一个写入器对象，该对象提供api以便于写数据至IO流中。"

#: ../../library/asyncio-stream.rst:233
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"不建议直接实例化 *StreamWriter*；而应改用 :func:`open_connection` 和 :func:"
"`start_server`。"

#: ../../library/asyncio-stream.rst:239
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"此方法会尝试立即将 *data* 写入到下层的套接字。 如果写入失败，数据会被排入内部"
"写缓冲队列直到可以被发送。"

#: ../../library/asyncio-stream.rst:243 ../../library/asyncio-stream.rst:255
msgid "The method should be used along with the ``drain()`` method::"
msgstr "此方法应当与 ``drain()`` 方法一起使用::"

#: ../../library/asyncio-stream.rst:250
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"此方法会立即尝试将一个字节串列表（或任何可迭代对象）写入到下层的套接字。 如果"
"写入失败，数据会被排入内部写缓冲队列直到可以被发送。"

#: ../../library/asyncio-stream.rst:262
msgid "The method closes the stream and the underlying socket."
msgstr "此方法会关闭流以及下层的套接字。"

#: ../../library/asyncio-stream.rst:264
msgid "The method should be used along with the ``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:271
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""
"如果下层的传输支持 :meth:`write_eof` 方法则返回 ``True``，否则返回 "
"``False``。"

#: ../../library/asyncio-stream.rst:276
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr "在已缓冲的写入数据被刷新后关闭流的写入端。"

#: ../../library/asyncio-stream.rst:281
msgid "Return the underlying asyncio transport."
msgstr "返回下层的 asyncio 传输。"

#: ../../library/asyncio-stream.rst:285
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr "访问可选的传输信息；详情参见 :meth:`BaseTransport.get_extra_info`。"

#: ../../library/asyncio-stream.rst:290
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr "等待直到可以适当地恢复写入到流。 示例::"

#: ../../library/asyncio-stream.rst:296
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""
"这是一个与下层的 IO 写缓冲区进行交互的流程控制方法。 当缓冲区大小达到最高水位"
"（最大上限）时，*drain()* 会阻塞直到缓冲区大小减少至最低水位以便恢复写入。 当"
"没有要等待的数据时，:meth:`drain` 会立即返回。"

#: ../../library/asyncio-stream.rst:305
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr "如果流已被关闭或正在被关闭则返回 ``True``。"

#: ../../library/asyncio-stream.rst:312
msgid "Wait until the stream is closed."
msgstr "等待直到流被关闭。"

#: ../../library/asyncio-stream.rst:314
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:321
msgid "Examples"
msgstr "例子"

#: ../../library/asyncio-stream.rst:326
msgid "TCP echo client using streams"
msgstr "使用流的 TCP 回显客户端"

#: ../../library/asyncio-stream.rst:328
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr "使用 :func:`asyncio.open_connection` 函数的 TCP 回显客户端::"

#: ../../library/asyncio-stream.rst:350
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""
"使用低层级 :meth:`loop.create_connection` 方法的 :ref:`TCP 回显客户端协议 "
"<asyncio_example_tcp_echo_client_protocol>` 示例。"

#: ../../library/asyncio-stream.rst:357
msgid "TCP echo server using streams"
msgstr "使用流的 TCP 回显服务器"

#: ../../library/asyncio-stream.rst:359
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr "TCP 回显服务器使用 :func:`asyncio.start_server` 函数::"

#: ../../library/asyncio-stream.rst:392
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""
"使用 :meth:`loop.create_server` 方法的 :ref:`TCP 回显服务器协议 "
"<asyncio_example_tcp_echo_server_protocol>` 示例。"

#: ../../library/asyncio-stream.rst:397
msgid "Get HTTP headers"
msgstr "获取 HTTP 标头"

#: ../../library/asyncio-stream.rst:399
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr "查询命令行传入 URL 的 HTTP 标头的简单示例::"

#: ../../library/asyncio-stream.rst:437
msgid "Usage::"
msgstr "用法："

#: ../../library/asyncio-stream.rst:441
msgid "or with HTTPS::"
msgstr "或使用 HTTPS::"

#: ../../library/asyncio-stream.rst:449
msgid "Register an open socket to wait for data using streams"
msgstr "注册一个打开的套接字以等待使用流的数据"

#: ../../library/asyncio-stream.rst:451
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr "使用 :func:`open_connection` 函数实现等待直到套接字接收到数据的协程::"

#: ../../library/asyncio-stream.rst:485
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""
"使用低层级协议以及 :meth:`loop.create_connection` 方法的 :ref:`注册一个打开的"
"套接字以等待使用协议的数据 <asyncio_example_create_connection>` 示例。"

#: ../../library/asyncio-stream.rst:489
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
"使用低层级的 :meth:`loop.add_reader` 方法来监视文件描述符的 :ref:`监视文件描"
"述符以读取事件 <asyncio_example_watch_fd>` 示例。"
