# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 16:35+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- 容器的抽象基类"

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "该模块曾是 :mod:`collections` 模块的组成部分。"

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**源代码：** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""
"该模块定义了一些 :term:`抽象基类 <abstract base class>`，它们可用于判断一个具"
"体类是否具有某一特定的接口；例如，这个类是否可哈希，或其是否为映射类。"

#: ../../library/collections.abc.rst:27
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"这些抽象类现在都支持 ``[]``。 参见 :ref:`types-genericalias` 和 :pep:`585`。"

#: ../../library/collections.abc.rst:34
msgid "Collections Abstract Base Classes"
msgstr "容器抽象基类"

#: ../../library/collections.abc.rst:36
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "这个容器模块提供了以下 :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:41
msgid "ABC"
msgstr "抽象基类"

#: ../../library/collections.abc.rst:41
msgid "Inherits from"
msgstr "继承自"

#: ../../library/collections.abc.rst:41
msgid "Abstract Methods"
msgstr "抽象方法"

#: ../../library/collections.abc.rst:41
msgid "Mixin Methods"
msgstr "Mixin 方法"

#: ../../library/collections.abc.rst:43
msgid ":class:`Container`"
msgstr ":class:`Container`"

#: ../../library/collections.abc.rst:43
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:44
msgid ":class:`Hashable`"
msgstr ":class:`Hashable`"

#: ../../library/collections.abc.rst:44
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
#: ../../library/collections.abc.rst:47
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:48
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:46
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:47
msgid ":class:`Reversible`"
msgstr ":class:`Reversible`"

#: ../../library/collections.abc.rst:47
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:48
msgid ":class:`Generator`"
msgstr ":class:`Generator`"

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:96
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../../library/collections.abc.rst:48
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:50
msgid ":class:`Callable`"
msgstr ":class:`Callable`"

#: ../../library/collections.abc.rst:50
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
#: ../../library/collections.abc.rst:77
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:51
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:58
#: ../../library/collections.abc.rst:64
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:55
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:64
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:55
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"

#: ../../library/collections.abc.rst:58
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:58
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../../library/collections.abc.rst:58
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"继承自 :class:`Sequence` 的方法，以及 ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``，和 ``__iadd__``"

#: ../../library/collections.abc.rst:64
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:64
msgid "Inherited :class:`Sequence` methods"
msgstr "继承自 :class:`Sequence` 的方法"

#: ../../library/collections.abc.rst:67 ../../library/collections.abc.rst:71
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:67
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"

#: ../../library/collections.abc.rst:71
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:71
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:71
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"继承自 :class:`Set` 的方法以及 ``clear``, ``pop``, ``remove``, ``__ior__``, "
"``__iand__``, ``__ixor__``，和  ``__isub__``"

#: ../../library/collections.abc.rst:77 ../../library/collections.abc.rst:81
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:77
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:77
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"

#: ../../library/collections.abc.rst:81
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:81
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:81
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"继承自 :class:`Mapping` 的方法以及 ``pop``, ``popitem``, ``clear``, "
"``update``，和 ``setdefault``"

#: ../../library/collections.abc.rst:88
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:89
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
#: ../../library/collections.abc.rst:93
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:91
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:95 ../../library/collections.abc.rst:96
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:95
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:96
msgid ":class:`Coroutine`"
msgstr ":class:`Coroutine`"

#: ../../library/collections.abc.rst:96
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:98 ../../library/collections.abc.rst:99
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:98
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:99
msgid ":class:`AsyncGenerator`"
msgstr ":class:`AsyncGenerator`"

#: ../../library/collections.abc.rst:99
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:99
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:105
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr "提供了 :meth:`__contains__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:109
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr "提供了 :meth:`__hash__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:113
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr "提供了 :meth:`__len__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:117
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr "提供了 :meth:`__call__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:121
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "提供了 :meth:`__iter__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:123
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"使用 ``isinstance(obj, Iterable)`` 可以检测一个类是否已经注册到了 :class:"
"`Iterable` 或者实现了 :meth:`__iter__` 函数，但是无法检测这个类是否能够使用 :"
"meth:`__getitem__` 方法进行迭代。检测一个对象是否是 :term:`iterable` 的唯一可"
"信赖的方法是调用 ``iter(obj)``。"

#: ../../library/collections.abc.rst:131
msgid "ABC for sized iterable container classes."
msgstr "集合了 Sized 和 Iterable 类的抽象基类。"

#: ../../library/collections.abc.rst:137
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"提供了 :meth:`~iterator.__iter__` 和 :meth:`~iterator.__next__` 方法的抽象基"
"类。参见 :term:`iterator` 的定义。"

#: ../../library/collections.abc.rst:143
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr "为可迭代类提供了 :meth:`__reversed__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:150
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""
"生成器类，实现了 :pep:`342` 中定义的协议，继承并扩展了迭代器，提供了 :meth:"
"`~generator.send`, :meth:`~generator.throw` 和 :meth:`~generator.close` 方"
"法。参见 :term:`generator` 的定义。"

#: ../../library/collections.abc.rst:161
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr "只读的与可变的 :term:`序列 <sequence>` 的抽象基类。"

#: ../../library/collections.abc.rst:163
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""
"实现笔记：一些混入（Maxin）方法比如 :meth:`__iter__`, :meth:`__reversed__` "
"和 :meth:`index` 会重复调用底层的 :meth:`__getitem__` 方法。因此，如果实现"
"的 :meth:`__getitem__` 是常数级访问速度，那么相应的混入方法会有一个线性的表"
"现；然而，如果底层方法是线性实现（例如链表），那么混入方法将会是平方级的表"
"现，这也许就需要被重构了。"

#: ../../library/collections.abc.rst:172
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "index() 方法支持 *stop* 和 *start* 参数。"

#: ../../library/collections.abc.rst:179
msgid "ABCs for read-only and mutable sets."
msgstr "只读的与可变的集合的抽象基类。"

#: ../../library/collections.abc.rst:184
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "只读的与可变的 :term:`映射 <mapping>` 的抽象基类。"

#: ../../library/collections.abc.rst:191
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr "映射及其键和值的 :term:`视图 <dictionary view>` 的抽象基类。"

#: ../../library/collections.abc.rst:195
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
"为可等待对象 :term:`awaitable` 提供的类，可以被用于 :keyword:`await` 表达式"
"中。习惯上必须实现 :meth:`__await__` 方法。"

#: ../../library/collections.abc.rst:199
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`协程 <coroutine>` 对象和 :class:`~collections.abc.Coroutine` ABC 的实"
"例都是这个 ABC 的实例。"

#: ../../library/collections.abc.rst:203
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"在 CPython 里，基于生成器的协程（使用 :func:`types.coroutine` 或 :func:"
"`asyncio.coroutine` 包装的生成器）都是 *可等待对象*，即使他们不含有 :meth:"
"`__await__` 方法。使用 ``isinstance(gencoro, Awaitable)`` 来检测他们会返回 "
"``False``。要使用 :func:`inspect.isawaitable` 来检测他们。"

#: ../../library/collections.abc.rst:213
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""
"用于协程兼容类的抽象基类。实现了如下定义在 :ref:`coroutine-objects`: 里的方"
"法： :meth:`~coroutine.send`，:meth:`~coroutine.throw` 和 :meth:`~coroutine."
"close`。通常的实现里还需要实现 :meth:`__await__` 方法。所有的 :class:"
"`Coroutine` 实例都必须是 :class:`Awaitable` 实例。参见 :term:`coroutine` 的定"
"义。"

#: ../../library/collections.abc.rst:221
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"在 CPython 里，基于生成器的协程（使用 :func:`types.coroutine` 或 :func:"
"`asyncio.coroutine` 包装的生成器）都是 *可等待对象*，即使他们不含有 :meth:"
"`__await__` 方法。使用 ``isinstance(gencoro, Coroutine)`` 来检测他们会返回 "
"``False``。要使用 :func:`inspect.isawaitable` 来检测他们。"

#: ../../library/collections.abc.rst:231
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""
"提供了 ``__aiter__`` 方法的抽象基类。参见 :term:`asynchronous iterable` 的定"
"义。"

#: ../../library/collections.abc.rst:238
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"提供了 ``__aiter__`` 和 ``__anext__`` 方法的抽象基类。参见 :term:"
"`asynchronous iterator` 的定义。"

#: ../../library/collections.abc.rst:245
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""
"为异步生成器类提供的抽象基类，这些类实现了定义在 :pep:`525` 和 :pep:`492` 里"
"的协议。"

#: ../../library/collections.abc.rst:251
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr "这些抽象基类让我们可以确定类和示例拥有某些特定的函数，例如："

#: ../../library/collections.abc.rst:258
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""
"有些抽象基类也可以用作混入类（mixin），这可以更容易地开发支持容器 API 的类。"
"例如，要写一个支持完整 :class:`Set` API 的类，只需要提供下面这三个方法： :"
"meth:`__contains__`, :meth:`__iter__` 和 :meth:`__len__`。抽象基类会补充上其"
"余的方法，比如 :meth:`__and__` 和 :meth:`isdisjoint`::"

#: ../../library/collections.abc.rst:287
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr "当把 :class:`Set` 和 :class:`MutableSet` 用作混入类时需注意："

#: ../../library/collections.abc.rst:290
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"由于某些集合操作会创建新集合，默认的混入方法需要一种从可迭代对象里创建新实例"
"的方式。 假定类构造器具有 ``ClassName(iterable)`` 形式的签名。 这样它将执行一"
"个名为 :meth:`_from_iterable` 的内部类方法，该方法会调用 ``cls(iterable)`` 来"
"产生一个新集合。 如果 :class:`Set` 混入类在具有不同构造器签名的类中被使用，你"
"将需要通过类方法或常规方法来重载 :meth:`_from_iterable`，以便基于可迭代对象参"
"数来构造新的实例。"

#: ../../library/collections.abc.rst:301
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"重载比较符时时（想必是为了速度，因为其语义都是固定的），只需要重定义 :meth:"
"`__le__` 和 :meth:`__ge__` 函数，然后其他的操作会自动跟进。"

#: ../../library/collections.abc.rst:306
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""
"混入集合类 :class:`Set` 提供了一个 :meth:`_hash` 方法为集合计算哈希值，然"
"而， :meth:`__hash__` 函数却没有被定义，因为并不是所有集合都是可哈希并且不可"
"变的。为了使用混入类为集合添加哈希能力，可以同时继承 :meth:`Set` 和 :meth:"
"`Hashable` 类，然后定义 ``__hash__ = Set._hash``。"

#: ../../library/collections.abc.rst:314
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ 是基于 :"
"class:`MutableSet` 构建的一个示例。"

#: ../../library/collections.abc.rst:317
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr "对于抽象基类，参见 :mod:`abc` 模块和 :pep:`3119`。"
