# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 汇民 王 <whuim@qq.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 14:21+0000\n"
"PO-Revision-Date: 2025-07-25 14:23+0000\n"
"Last-Translator: 汇民 王 <whuim@qq.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.templatelib.rst:2
msgid ":mod:`!string.templatelib` --- Support for template string literals"
msgstr ":mod:`!string.templatelib` --- 对模板字符串字面值的支持"

#: ../../library/string.templatelib.rst:7
msgid "**Source code:** :source:`Lib/string/templatelib.py`"
msgstr "**源代码：** :source:`Lib/string/templatelib.py`"

#: ../../library/string.templatelib.rst:13
msgid ":ref:`Format strings <f-strings>`"
msgstr ":ref:`格式化字符串 <f-strings>`"

#: ../../library/string.templatelib.rst:14
msgid ":ref:`T-string literal syntax <t-strings>`"
msgstr ":ref:`T-字符串字面量语法 <t-strings>`"

#: ../../library/string.templatelib.rst:20
msgid "Template strings"
msgstr "模板字符串"

#: ../../library/string.templatelib.rst:24
msgid ""
"Template strings are a formatting mechanism that allows for deep control "
"over how strings are processed. You can create templates using :ref:`t-"
"string literal syntax <t-strings>`, which is identical to :ref:`f-string "
"syntax <f-strings>` but uses a ``t`` instead of an ``f``. While f-strings "
"evaluate to ``str``, t-strings create a :class:`Template` instance that "
"gives you access to the static and interpolated (in curly braces) parts of a "
"string *before* they are combined."
msgstr ""
"模板字符串是一种格式化机制，允许深度控制字符串的处理方式。你可以使用 :ref:`t-"
"字符串字面量语法 <t-strings>` 创建模板，这与 :ref:`f-字符串语法 <f-strings>` "
"相同，但使用 ``t`` 而不是 ``f``。f-字符串计算结果为 ``str``，而 t-字符串创建"
"一个 :class:`Template` 实例，让你在它们组合之前访问字符串的静态部分和插值部分"
"（用花括号括起来）。"

#: ../../library/string.templatelib.rst:36
msgid "Template"
msgstr "模板"

#: ../../library/string.templatelib.rst:38
msgid ""
"The :class:`!Template` class describes the contents of a template string."
msgstr ":class:`!Template` 类描述了模板字符串的内容。"

#: ../../library/string.templatelib.rst:40
msgid ""
":class:`!Template` instances are immutable: their attributes cannot be "
"reassigned."
msgstr ":class:`!Template` 实例是不可变的：它们的属性不能重新赋值。"

#: ../../library/string.templatelib.rst:45
msgid "Create a new :class:`!Template` object."
msgstr "创建一个新的 :class:`!Template` 对象。"

#: ../../library/string.templatelib.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/string.templatelib.rst:47
msgid "A mix of strings and :class:`Interpolation` instances in any order."
msgstr "任意顺序的字符串和 :class:`Interpolation` 实例的混合。"

#: ../../library/string.templatelib.rst:50
msgid ""
"The most common way to create a :class:`!Template` instance is to use the :"
"ref:`t-string literal syntax <t-strings>`. This syntax is identical to that "
"of :ref:`f-strings <f-strings>` except that it uses a ``t`` instead of an "
"``f``:"
msgstr ""
"创建 :class:`!Template` 实例的最常见方式是使用 :ref:`t-字符串字面量语法 <t-"
"strings>`。此语法与 :ref:`f-字符串 <f-strings>` 的语法相同，只是使用 ``t`` 而"
"不是 ``f``："

#: ../../library/string.templatelib.rst:59
msgid ""
"Templates ars stored as sequences of literal :attr:`~Template.strings` and "
"dynamic :attr:`~Template.interpolations`. A :attr:`~Template.values` "
"attribute holds the interpolation values:"
msgstr ""
"模板存储为字面量 :attr:`~Template.strings` 和动态 :attr:`~Template."
"interpolations` 的序列。一个 :attr:`~Template.values` 属性持有插值值："

#: ../../library/string.templatelib.rst:70
msgid ""
"The :attr:`!strings` tuple has one more element than :attr:`!interpolations` "
"and :attr:`!values`; the interpolations “belong” between the strings. This "
"may be easier to understand when tuples are aligned::"
msgstr ""
":attr:`!strings` 元组比 :attr:`!interpolations` 和 :attr:`!values` 多一个元"
"素；插值“属于”字符串之间。当元组对齐时可能更容易理解："

#: ../../library/string.templatelib.rst:74
msgid ""
"template.strings:  ('Hello ',          '!')\n"
"template.values:   (          'World',    )"
msgstr ""
"template.strings:  ('Hello ',          '!')\n"
"template.values:   (          'World',    )"

#: ../../library/string.templatelib.rst:77
msgid ""
"While literal syntax is the most common way to create :class:`!Template` "
"instances, it is also possible to create them directly using the constructor:"
msgstr ""
"虽然字面量语法是创建 :class:`!Template` 实例的最常见方式，但也可以直接使用构"
"造函数创建它们："

#: ../../library/string.templatelib.rst:86
msgid ""
"If two or more consecutive strings are passed, they will be concatenated "
"into a single value in the :attr:`~Template.strings` attribute. For example, "
"the following code creates a :class:`Template` with a single final string:"
msgstr ""
"如果传递两个或多个连续的字符串，它们将在 :attr:`~Template.strings` 属性中连接"
"成一个单一值。例如，以下代码创建一个具有单个最终字符串的 :class:`Template`："

#: ../../library/string.templatelib.rst:95
msgid ""
"If two or more consecutive interpolations are passed, they will be treated "
"as separate interpolations and an empty string will be inserted between "
"them. For example, the following code creates a template with empty "
"placeholders in the :attr:`~Template.strings` attribute:"
msgstr ""
"如果传递了两个或多个连续的插值，它们将被视为单独的插值，并在它们之间插入一个"
"空字符串。例如，以下代码创建了一个在 :attr:`~Template.strings` 属性中具有空占"
"位符的模板："

#: ../../library/string.templatelib.rst:108
msgid "A :ref:`tuple <tut-tuples>` of the static strings in the template."
msgstr "模板中静态字符串的 :ref:`元组 <tut-tuples>`。"

#: ../../library/string.templatelib.rst:114
msgid "Empty strings *are* included in the tuple:"
msgstr "空字符串 *确实* 包含在元组中："

#: ../../library/string.templatelib.rst:120
msgid ""
"The ``strings`` tuple is never empty, and always contains one more string "
"than the ``interpolations`` and ``values`` tuples:"
msgstr ""
"``strings`` 元组从不为空，并且总是比 ``interpolations`` 和 ``values`` 元组多"
"一个字符串："

#: ../../library/string.templatelib.rst:135
msgid "A tuple of the interpolations in the template."
msgstr "模板中插值的元组。"

#: ../../library/string.templatelib.rst:141
msgid ""
"The ``interpolations`` tuple may be empty and always contains one fewer "
"values than the ``strings`` tuple:"
msgstr "``interpolations`` 元组可能为空，并且总是比 ``strings`` 元组少一个值："

#: ../../library/string.templatelib.rst:150
msgid "A tuple of all interpolated values in the template."
msgstr "模板中所有插值值的元组。"

#: ../../library/string.templatelib.rst:156
msgid ""
"The ``values`` tuple always has the same length as the ``interpolations`` "
"tuple. It is equivalent to ``tuple(i.value for i in template."
"interpolations)``."
msgstr ""
"``values`` 元组总是与 ``interpolations`` 元组长度相同。它等价于 ``tuple(i."
"value for i in template.interpolations)``。"

#: ../../library/string.templatelib.rst:162
msgid ""
"Iterate over the template, yielding each string and :class:`Interpolation` "
"in order."
msgstr "遍历模板，按顺序生成每个字符串和 :class:`Interpolation`。"

#: ../../library/string.templatelib.rst:169
msgid "Empty strings are *not* included in the iteration:"
msgstr "空字符串 *不* 包含在迭代中："

#: ../../library/string.templatelib.rst:178
msgid ""
"Concatenate this template with another, returning a new :class:`!Template` "
"instance:"
msgstr "将此模板与另一个模板连接，返回一个新的 :class:`!Template` 实例："

#: ../../library/string.templatelib.rst:185
msgid ""
"Concatenation between a :class:`!Template` and a ``str`` is *not* supported. "
"This is because it is ambiguous whether the string should be treated as a "
"static string or an interpolation. If you want to concatenate a :class:`!"
"Template` with a string, you should either wrap the string directly in a :"
"class:`!Template` (to treat it as a static string) or use an :class:`!"
"Interpolation` (to treat it as dynamic):"
msgstr ""
":class:`!Template` 与 ``str`` 之间的连接 *不* 支持。这是因为字符串应该被视为"
"静态字符串还是插值是不明确的。如果你想将 :class:`!Template` 与字符串连接，你"
"应该要么直接将字符串包装在 :class:`!Template` 中（将其视为静态字符串），要么"
"使用 :class:`!Interpolation`（将其视为动态的）："

#: ../../library/string.templatelib.rst:205
msgid "Create a new :class:`!Interpolation` object."
msgstr "创建一个新的 :class:`!Interpolation` 对象。"

#: ../../library/string.templatelib.rst:207
msgid "The evaluated, in-scope result of the interpolation."
msgstr "插值运算的评估结果（在作用域范围内）。"

#: ../../library/string.templatelib.rst:210
#: ../../library/string.templatelib.rst:234
msgid "The text of a valid Python expression, or an empty string."
msgstr "一个有效 Python 表达式的文本，或一个空字符串。"

#: ../../library/string.templatelib.rst:213
msgid ""
"The optional :ref:`conversion <formatstrings>` to be used, one of r, s, and "
"a."
msgstr "要使用的可选 :ref:`转换 <formatstrings>`，可以是 r、s 和 a 之一。"

#: ../../library/string.templatelib.rst:216
msgid ""
"An optional, arbitrary string used as the :ref:`format specification "
"<formatspec>` to present the value."
msgstr "一个可选的、任意字符串，用作呈现值的 :ref:`格式规范 <formatspec>`。"

#: ../../library/string.templatelib.rst:219
msgid ""
"The :class:`!Interpolation` type represents an expression inside a template "
"string."
msgstr ":class:`!Interpolation` 类型表示模板字符串内的一个表达式。"

#: ../../library/string.templatelib.rst:221
msgid ""
":class:`!Interpolation` instances are immutable: their attributes cannot be "
"reassigned."
msgstr ":class:`!Interpolation` 实例是不可变的：它们的属性不能被重新赋值。"

#: ../../library/string.templatelib.rst:0
msgid "Returns"
msgstr "返回"

#: ../../library/string.templatelib.rst:226
msgid "The evaluated value of the interpolation."
msgstr "插值的计算值。"

#: ../../library/string.templatelib.rst:0
msgid "type"
msgstr "type -- 类型"

#: ../../library/string.templatelib.rst:227
msgid "object"
msgstr "object -- 对象"

#: ../../library/string.templatelib.rst:235
#: ../../library/string.templatelib.rst:267
msgid "str"
msgstr "str"

#: ../../library/string.templatelib.rst:237
msgid ""
"The :attr:`~Interpolation.expression` is the original text of the "
"interpolation's Python expression, if the interpolation was created from a t-"
"string literal. Developers creating interpolations manually should either "
"set this to an empty string or choose a suitable valid Python expression."
msgstr ""
":attr:`~Interpolation.expression` 是插值的 Python 表达式的原始文本，如果插值"
"是从 t-string 字面量创建的。手动创建插值的开发者应将该属性设置为空字符串或选"
"择一个合适的有效 Python 表达式。"

#: ../../library/string.templatelib.rst:248
msgid "The conversion to apply to the value, or ``None``."
msgstr "要应用于值的转换，或 ``None``。"

#: ../../library/string.templatelib.rst:249
msgid "``Literal[\"a\", \"r\", \"s\"] | None``"
msgstr "``Literal[\"a\", \"r\", \"s\"] | None``"

#: ../../library/string.templatelib.rst:251
msgid ""
"The :attr:`!Interpolation.conversion` is the optional conversion to apply to "
"the value:"
msgstr ":attr:`!Interpolation.conversion` 是可选的，用于应用于值的转换："

#: ../../library/string.templatelib.rst:259
msgid ""
"Unlike f-strings, where conversions are applied automatically, the expected "
"behavior with t-strings is that code that *processes* the :class:`!Template` "
"will decide how to interpret and whether to apply the :attr:`!Interpolation."
"conversion`."
msgstr ""
"与 f-string 不同，f-string 中的转换是自动应用的，而 t-string 的预期行为是处"
"理 :class:`!Template` 的代码将决定如何解释以及是否应用 :attr:`!Interpolation."
"conversion`。"

#: ../../library/string.templatelib.rst:266
msgid "The format specification to apply to the value."
msgstr "要应用于值的格式规范。"

#: ../../library/string.templatelib.rst:269
msgid ""
"The :attr:`!Interpolation.format_spec` is an optional, arbitrary string used "
"as the format specification to present the value:"
msgstr ""
":attr:`!Interpolation.format_spec` 是一个可选的任意字符串，用作呈现值的格式规"
"范："

#: ../../library/string.templatelib.rst:277
msgid ""
"Unlike f-strings, where format specifications are applied automatically via "
"the :func:`format` protocol, the expected behavior with t-strings is that "
"code that *processes* the :class:`!Template` will decide how to interpret "
"and whether to apply the format specification. As a result, :attr:`!"
"Interpolation.format_spec` values in :class:`!Template` instances can be "
"arbitrary strings, even those that do not necessarily conform to the rules "
"of Python's :func:`format` protocol."
msgstr ""
"与 f-string 不同，f-string 中的格式规范是通过 :func:`format` 协议自动应用的，"
"而 t-string 的预期行为是处理 :class:`!Template` 的代码将决定如何解释以及是否"
"应用格式规范。因此，:class:`!Template` 实例中的 :attr:`!Interpolation."
"format_spec` 值可以是任意字符串，甚至是不一定符合 Python :func:`format` 协议"
"规则的字符串。"

#: ../../library/string.templatelib.rst:286
msgid ""
"Interpolations support pattern matching, allowing you to match against their "
"attributes with the :ref:`match statement <match>`:"
msgstr "插值支持模式匹配，允许你使用 :ref:`match 语句 <match>` 匹配其属性："

#: ../../library/string.templatelib.rst:299
msgid "Helper functions"
msgstr "辅助函数"

#: ../../library/string.templatelib.rst:303
msgid ""
"Applies formatted string literal :ref:`conversion <formatstrings-"
"conversion>` semantics to the given object *obj*. This is frequently useful "
"for custom template string processing logic."
msgstr ""
"对给定对象 *obj* 应用格式化字符串字面量 :ref:`转换 <formatstrings-"
"conversion>` 语义。这对于自定义模板字符串处理逻辑通常很有用。"

#: ../../library/string.templatelib.rst:307
msgid "Three conversion flags are currently supported:"
msgstr "目前支持三种转换标志："

#: ../../library/string.templatelib.rst:309
msgid "``'s'`` which calls :func:`str` on the value,"
msgstr "``'s'`` 调用 :func:`str` 对值进行处理，"

#: ../../library/string.templatelib.rst:310
msgid "``'r'`` which calls :func:`repr`, and"
msgstr "``'r'`` 调用 :func:`repr`，以及"

#: ../../library/string.templatelib.rst:311
msgid "``'a'`` which calls :func:`ascii`."
msgstr "``'a'`` 调用 :func:`ascii`。"

#: ../../library/string.templatelib.rst:313
msgid "If the conversion flag is ``None``, *obj* is returned unchanged."
msgstr "如果转换标志为 ``None``，则 *obj* 不变返回。"
