# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-13 17:35+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` --- 伪终端工具"

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**源代码:** :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
":mod:`pty` 模块定义了一些处理“伪终端”概念的操作：启动另一个进程并能以程序方式"
"在其控制终端中进行读写。"

#: ../../library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""
"由于伪终端处理高度依赖于具体平台，因此此功能只有针对 Linux 的代码。 （Linux "
"代码也可在其他平台上工作，但是未经测试。）"

#: ../../library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr ":mod:`pty` 模块定义了下列函数:"

#: ../../library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"分叉。 将子进程的控制终端连接到一个伪终端。 返回值为 ``(pid, fd)``。 请注意子"
"进程获得 *pid* 0 而 *fd* 为 *invalid*。 父进程返回值为子进程的 *pid* 而 *fd* "
"为一个连接到子进程的控制终端（并同时连接到子进程的标准输入和输出）的文件描述"
"符。"

#: ../../library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"打开一个新的伪终端对，如果可能将使用 :func:`os.openpty`，或是针对通用 Unix 系"
"统的模拟代码。 返回一个文件描述符对 ``(master, slave)``，分别表示主从两端。"

#: ../../library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"生成一个进程，并将其控制终端连接到当前进程的标准 io。 这常被用来应对坚持要从"
"控制终端读取数据的程序。 在 pty 背后生成的进程预期最后将被终止，而且当它被终"
"止时 *spawn* 将会返回。"

#: ../../library/pty.rst:50
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an :exc:"
"`OSError` should be thrown."
msgstr ""
"会向 *master_read* 和 *stdin_read* 函数传入一个文件描述符供它们读取，并且它们"
"总是应当返回一个字节串。 为了强制 spawn 在子进程退出之前返回所以应当抛出 :"
"exc:`OSError`。"

#: ../../library/pty.rst:55
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"两个函数的默认实现在每次函数被调用时将读取并返回至多 1024 个字节。 会向 "
"*master_read* 回调传入伪终端的主文件描述符以从子进程读取输出，而向 "
"*stdin_read* 传入文件描述符 0 以从父进程的标准输入读取数据。"

#: ../../library/pty.rst:61
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"从两个回调返回空字节串会被解读为文件结束 (EOF) 条件，在此之后回调将不再被调"
"用。 如果 *stdin_read* 发出 EOF 信号则控制终端就不能再与父进程或子进程进行通"
"信。 除非子进程将不带任何输入就退出，否则随后 *spawn* 将一直循环下去。 如果 "
"*master_read* 发出 EOF 信号则会有相同的行为结果（至少是在 Linux 上）。"

#: ../../library/pty.rst:68
msgid ""
"If both callbacks signal EOF then *spawn* will probably never return, unless "
"*select* throws an error on your platform when passed three empty lists. "
"This is a bug, documented in `issue 26228 <https://bugs.python.org/"
"issue26228>`_."
msgstr ""
"如果两个回调都发出 EOF 信号则 *spawn* 可能将永不返回，除非在你的平台上当传入"
"三个空列表时 *select* 会抛出一个错误。 这是一个程序缺陷，相关文档见 `问题 "
"26228 <https://bugs.python.org/issue26228>`_。"

#: ../../library/pty.rst:72
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr "从子进程中的 :func:`os.waitpid` 返回退出状态值。"

#: ../../library/pty.rst:74
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr "可以使用 :func:`waitstatus_to_exitcode` 来将退出状态转换为退出码。"

#: ../../library/pty.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``pty.spawn`` 并附带参数 ``argv``。"

#: ../../library/pty.rst:79
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ":func:`spawn` 现在会从子进程的 :func:`os.waitpid` 返回状态值。"

#: ../../library/pty.rst:84
msgid "Example"
msgstr "示例"

#: ../../library/pty.rst:88
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"以下程序的作用类似于 Unix 命令 :manpage:`script(1)`，它使用一个伪终端来记录一"
"个 \"typescript\" 里终端进程的所有输入和输出::"
