# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eric R <trencyclopedia@gmail.com>, 2021
# jaystone776 <1732865113@qq.com>, 2021
# 叶浚安 <ye.pandaaaa906@gmail.com>, 2022
# sgqy <sgqyzh@gmail.com>, 2023
# WH-2099 <wh2099@outlook.com>, 2023
# ppcfish <ppcfish@gmail.com>, 2023
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 14:21+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr "词法分析"

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of :"
"term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""
"Python 程序将由 *解析器* 来读取。 输入解析器的是 :term:`词元 <token>` 流，它"
"是由 *词法分析器* (或称 *分词器*) 生成的。 本章将介绍词法分析器是怎样把文件拆"
"分为词元的。"

#: ../../reference/lexical_analysis.rst:15
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""
"Python 将读取的程序文本转为 Unicode 代码点；编码声明用于指定源文件的编码，默"
"认为 UTF-8，详见 :pep:`3120`。源文件不能解码时，触发 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:24
msgid "Line structure"
msgstr "行结构"

#: ../../reference/lexical_analysis.rst:28
msgid "A Python program is divided into a number of *logical lines*."
msgstr "Python 程序可以拆分为多个 *逻辑行*。"

#: ../../reference/lexical_analysis.rst:34
msgid "Logical lines"
msgstr "逻辑行"

#: ../../reference/lexical_analysis.rst:38
msgid ""
"The end of a logical line is represented by the token :data:`~token."
"NEWLINE`. Statements cannot cross logical line boundaries except where :data:"
"`!NEWLINE` is allowed by the syntax (e.g., between statements in compound "
"statements). A logical line is constructed from one or more *physical lines* "
"by following the explicit or implicit *line joining* rules."
msgstr ""

#: ../../reference/lexical_analysis.rst:48
msgid "Physical lines"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:50
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed), "
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character.  "
"All of these forms can be used equally, regardless of platform. The end of "
"input also serves as an implicit terminator for the final physical line."
msgstr ""
"物理行是一序列字符，由行尾序列终止。源文件和字符串可使用任意标准平台行终止序"
"列 - Unix ASCII 字符 LF （换行）、 Windows ASCII 字符序列 CR LF （回车换"
"行）、或老式 Macintosh ASCII 字符 CR （回车）。不管在哪个平台，这些形式均可等"
"价使用。输入结束也可以用作最终物理行的隐式终止符。"

#: ../../reference/lexical_analysis.rst:58
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""
"嵌入 Python 时，传入 Python API 的源码字符串应使用 C 标准惯例换行符"
"（``\\n``，代表 ASCII 字符 LF， 行终止符）。"

#: ../../reference/lexical_analysis.rst:66
msgid "Comments"
msgstr "注释"

#: ../../reference/lexical_analysis.rst:71
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""
"注释以井号 （``#``） 开头，在物理行末尾截止。注意，井号不是字符串字面值。除非"
"应用隐式行拼接规则，否则，注释代表逻辑行结束。句法不解析注释。"

#: ../../reference/lexical_analysis.rst:80
msgid "Encoding declarations"
msgstr "编码声明"

#: ../../reference/lexical_analysis.rst:85
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""
"Python 脚本第一或第二行的注释匹配正则表达式 ``coding[=:]\\s*([-\\w.]+)`` 时，"
"该注释会被当作编码声明；这个表达式的第一组指定了源码文件的编码。编码声明必须"
"独占一行，在第二行时，则第一行必须也是注释。编码表达式的形式如下："

#: ../../reference/lexical_analysis.rst:92
msgid "# -*- coding: <encoding-name> -*-"
msgstr "# -*- coding: <encoding-name> -*-"

#: ../../reference/lexical_analysis.rst:94
msgid "which is recognized also by GNU Emacs, and ::"
msgstr "这也是 GNU Emacs 认可的形式，此外，还支持如下形式："

#: ../../reference/lexical_analysis.rst:96
msgid "# vim:fileencoding=<encoding-name>"
msgstr "# vim:fileencoding=<encoding-name>"

#: ../../reference/lexical_analysis.rst:98
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr "这是 Bram Moolenaar 的 VIM 认可的形式。"

#: ../../reference/lexical_analysis.rst:100
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""
"如果没有找到编码格式声明，则默认编码格式为 UTF-8。 如果文件的隐式或显式编码格"
"式为 UTF-8，则初始的 UTF-8 字节顺序标记 (``b'\\xef\\xbb\\xbf'``) 会被忽略，而"
"不是成为语法错误。"

#: ../../reference/lexical_analysis.rst:104
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""
"如果声明了编码格式，该编码格式的名称必须是 Python 可识别的 (参见 :ref:"
"`standard-encodings`)。 编码格式会被用于所有的词法分析，包括字符串字面值、注"
"释和标识符等。"

#: ../../reference/lexical_analysis.rst:113
msgid "Explicit line joining"
msgstr "显式拼接行"

#: ../../reference/lexical_analysis.rst:117
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""
"两个及两个以上的物理行可用反斜杠（``\\``）拼接为一个逻辑行，规则如下：以不在"
"字符串或注释内的反斜杠结尾时，物理行将与下一行拼接成一个逻辑行，并删除反斜杠"
"及其后的换行符。例如："

#: ../../reference/lexical_analysis.rst:123
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # 看来是个有效的日期\n"
"        return 1"

#: ../../reference/lexical_analysis.rst:128
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""
"以反斜杠结尾的行，不能加注释；反斜杠也不能拼接注释。除字符串字面值外，反斜杠"
"不能拼接形符（如，除字符串字面值外，不能用反斜杠把形符切分至两个物理行）。反"
"斜杠只能在代码的字符串字面值里，在其他任何位置都是非法的。"

#: ../../reference/lexical_analysis.rst:138
msgid "Implicit line joining"
msgstr "隐式拼接行"

#: ../../reference/lexical_analysis.rst:140
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""
"圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠。例如："

#: ../../reference/lexical_analysis.rst:143
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""
"month_names = ['Januari', 'Februari', 'Maart',      # 这些是\n"
"               'April',   'Mei',      'Juni',       # 一年之中\n"
"               'Juli',    'Augustus', 'September',  # 各个月份的\n"
"               'Oktober', 'November', 'December']   # 荷兰语名称"

#: ../../reference/lexical_analysis.rst:148
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""
"隐式行拼接可含注释；后续行的缩进并不重要；还支持空的后续行。隐式拼接行之间没"
"有 NEWLINE 形符。三引号字符串支持隐式拼接行（见下文），但不支持注释。"

#: ../../reference/lexical_analysis.rst:158
msgid "Blank lines"
msgstr "空白行"

#: ../../reference/lexical_analysis.rst:162
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard "
"interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:174
msgid "Indentation"
msgstr "缩进"

#: ../../reference/lexical_analysis.rst:178
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""
"逻辑行开头的空白符（空格符和制表符）用于计算该行的缩进层级，决定语句组块。"

#: ../../reference/lexical_analysis.rst:182
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""
"制表符（从左至右）被替换为一至八个空格，缩进空格的总数是八的倍数（与 Unix 的"
"规则保持一致）。首个非空字符前的空格数决定了该行的缩进层次。缩进不能用反斜杠"
"进行多行拼接；首个反斜杠之前的空白符决定了缩进的层次。"

#: ../../reference/lexical_analysis.rst:190
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""
"源文件混用制表符和空格符缩进时，因空格数量与制表符相关，由此产生的不一致将导"
"致不能正常识别缩进层次，从而触发 :exc:`TabError`。"

#: ../../reference/lexical_analysis.rst:194
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""
"**跨平台兼容性说明：** 鉴于非 UNIX 平台文本编辑器本身的特性，请勿在源文件中混"
"用制表符和空格符。另外也请注意，不同平台有可能会显式限制最大缩进层级。"

#: ../../reference/lexical_analysis.rst:199
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""
"行首含换页符时，缩进计算将忽略该换页符。换页符在行首空白符内其他位置的效果未"
"定义（例如，可能导致空格计数重置为零）。"

#: ../../reference/lexical_analysis.rst:206
msgid ""
"The indentation levels of consecutive lines are used to generate :data:"
"`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as follows."
msgstr ""

#: ../../reference/lexical_analysis.rst:210
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one :data:`!INDENT` token is generated.  If it is smaller, it "
"*must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a :data:"
"`!DEDENT` token is generated. At the end of the file, a :data:`!DEDENT` "
"token is generated for each number remaining on the stack that is larger "
"than zero."
msgstr ""

#: ../../reference/lexical_analysis.rst:221
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr "下面的 Python 代码缩进示例虽然正确，但含混不清："

#: ../../reference/lexical_analysis.rst:224
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""
"def perm(l):\n"
"        # 计算由 l 的所有排列组成的列表\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"

#: ../../reference/lexical_analysis.rst:236
msgid "The following example shows various indentation errors::"
msgstr "下例展示了多种缩进错误："

#: ../../reference/lexical_analysis.rst:238
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""
" def perm(l):                       # 错误：第一行有缩进\n"
"for i in range(len(l)):             # 错误：没有缩进\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # 错误：非预期的缩进\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # 错误：不一致的缩进"

#: ../../reference/lexical_analysis.rst:246
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""
"（实际上，解析器可以识别前三个错误；只有最后一个错误由词法分析器识别  --- "
"``return r`` 的缩进无法匹配从栈里移除的缩进层级。）"

#: ../../reference/lexical_analysis.rst:254
msgid "Whitespace between tokens"
msgstr "形符间的空白字符"

#: ../../reference/lexical_analysis.rst:256
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and "
"``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""

#: ../../reference/lexical_analysis.rst:267
msgid "End marker"
msgstr ""

#: ../../reference/lexical_analysis.rst:269
msgid ""
"At the end of non-interactive input, the lexical analyzer generates an :data:"
"`~token.ENDMARKER` token."
msgstr ""

#: ../../reference/lexical_analysis.rst:276
msgid "Other tokens"
msgstr "其他形符"

#: ../../reference/lexical_analysis.rst:278
msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and :data:`~token."
"DEDENT`, the following categories of tokens exist: *identifiers* and "
"*keywords* (:data:`~token.NAME`), *literals* (such as :data:`~token.NUMBER` "
"and :data:`~token.STRING`), and other symbols (*operators* and "
"*delimiters*, :data:`~token.OP`). Whitespace characters (other than logical "
"line terminators, discussed earlier) are not tokens, but serve to delimit "
"tokens. Where ambiguity exists, a token comprises the longest possible "
"string that forms a legal token, when read from left to right."
msgstr ""

#: ../../reference/lexical_analysis.rst:292
msgid "Names (identifiers and keywords)"
msgstr ""

#: ../../reference/lexical_analysis.rst:296
msgid ""
":data:`~token.NAME` tokens represent *identifiers*, *keywords*, and *soft "
"keywords*."
msgstr ""

#: ../../reference/lexical_analysis.rst:299
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for names "
"include the uppercase and lowercase letters (``A-Z`` and ``a-z``), the "
"underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``."
msgstr ""

#: ../../reference/lexical_analysis.rst:304
msgid ""
"Names must contain at least one character, but have no upper length limit. "
"Case is significant."
msgstr ""

#: ../../reference/lexical_analysis.rst:307
msgid ""
"Besides ``A-Z``, ``a-z``, ``_`` and ``0-9``, names can also use \"letter-"
"like\" and \"number-like\" characters from outside the ASCII range, as "
"detailed below."
msgstr ""

#: ../../reference/lexical_analysis.rst:310
msgid ""
"All identifiers are converted into the `normalization form`_ NFKC while "
"parsing; comparison of identifiers is based on NFKC."
msgstr ""

#: ../../reference/lexical_analysis.rst:313
msgid ""
"Formally, the first character of a normalized identifier must belong to the "
"set ``id_start``, which is the union of:"
msgstr ""

#: ../../reference/lexical_analysis.rst:316
msgid "Unicode category ``<Lu>`` - uppercase letters (includes ``A`` to ``Z``)"
msgstr "Unicode 类别 ``<Lu>`` - 大写字母 (包括 ``A`` 到 ``Z``)"

#: ../../reference/lexical_analysis.rst:317
msgid "Unicode category ``<Ll>`` - lowercase letters (includes ``a`` to ``z``)"
msgstr "Unicode 类别 ``<Ll>`` - 小写字母 (包括 ``a`` 到 ``z``)"

#: ../../reference/lexical_analysis.rst:318
msgid "Unicode category ``<Lt>`` - titlecase letters"
msgstr "Unicode 类别 ``<Lt>`` - 标题大小写字母"

#: ../../reference/lexical_analysis.rst:319
msgid "Unicode category ``<Lm>`` - modifier letters"
msgstr "Unicode 类别 ``<Lm>`` - 修饰字母"

#: ../../reference/lexical_analysis.rst:320
msgid "Unicode category ``<Lo>`` - other letters"
msgstr "Unicode category ``<Lo>`` - 其他字母"

#: ../../reference/lexical_analysis.rst:321
msgid "Unicode category ``<Nl>`` - letter numbers"
msgstr "Unicode 类别 ``<Nl>`` - 数字字母"

#: ../../reference/lexical_analysis.rst:322
msgid "{``\"_\"``} - the underscore"
msgstr "{``\"_\"``} - 下划线"

#: ../../reference/lexical_analysis.rst:323
msgid ""
"``<Other_ID_Start>`` - an explicit set of characters in `PropList.txt`_ to "
"support backwards compatibility"
msgstr ""
"``<Other_ID_Start>`` - 在 `PropList.txt`_ 中显式定义的用于支持向下兼容的字符"
"集合"

#: ../../reference/lexical_analysis.rst:326
msgid ""
"The remaining characters must belong to the set ``id_continue``, which is "
"the union of:"
msgstr "其余字母必须归属于 ``id_continue`` 集合，它是以下字符的并集："

#: ../../reference/lexical_analysis.rst:329
msgid "all characters in ``id_start``"
msgstr ""

#: ../../reference/lexical_analysis.rst:330
msgid "Unicode category ``<Nd>`` - decimal numbers (includes ``0`` to ``9``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:331
msgid "Unicode category ``<Pc>`` - connector punctuations"
msgstr ""

#: ../../reference/lexical_analysis.rst:332
msgid "Unicode category ``<Mn>`` - nonspacing marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:333
msgid "Unicode category ``<Mc>`` - spacing combining marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:334
msgid ""
"``<Other_ID_Continue>`` - another explicit set of characters in `PropList."
"txt`_ to support backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:337
msgid ""
"Unicode categories use the version of the Unicode Character Database as "
"included in the :mod:`unicodedata` module."
msgstr ""

#: ../../reference/lexical_analysis.rst:340
msgid ""
"These sets are based on the Unicode standard annex `UAX-31`_. See also :pep:"
"`3131` for further details."
msgstr ""

#: ../../reference/lexical_analysis.rst:343
msgid ""
"Even more formally, names are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:357
msgid ""
"A non-normative listing of all valid identifier characters as defined by "
"Unicode is available in the `DerivedCoreProperties.txt`_ file in the Unicode "
"Character Database."
msgstr ""

#: ../../reference/lexical_analysis.rst:371
msgid "Keywords"
msgstr "关键字"

#: ../../reference/lexical_analysis.rst:377
msgid ""
"The following names are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

#: ../../reference/lexical_analysis.rst:381
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"

#: ../../reference/lexical_analysis.rst:395
msgid "Soft Keywords"
msgstr "软关键字"

#: ../../reference/lexical_analysis.rst:401
msgid ""
"Some names are only reserved under specific contexts. These are known as "
"*soft keywords*:"
msgstr ""

#: ../../reference/lexical_analysis.rst:404
msgid ""
"``match``, ``case``, and ``_``, when used in the :keyword:`match` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:405
msgid "``type``, when used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:407
msgid ""
"These syntactically act as keywords in their specific contexts, but this "
"distinction is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:410
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""
"作为软关键字，它们能够在用于相应语法的同时仍然保持与用作标识符名称的现有代码"
"的兼容性。"

#: ../../reference/lexical_analysis.rst:414
msgid "``type`` is now a soft keyword."
msgstr "``type`` 现在是一个软关键字。"

#: ../../reference/lexical_analysis.rst:423
msgid "Reserved classes of identifiers"
msgstr "保留的标识符类"

#: ../../reference/lexical_analysis.rst:425
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""
"某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并"
"以下划线结尾："

#: ../../reference/lexical_analysis.rst:429
msgid "``_*``"
msgstr "``_*``"

#: ../../reference/lexical_analysis.rst:430
msgid "Not imported by ``from module import *``."
msgstr "不会被 ``from module import *`` 所导入。"

#: ../../reference/lexical_analysis.rst:432
msgid "``_``"
msgstr "``_``"

#: ../../reference/lexical_analysis.rst:433
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""
"在 :keyword:`match` 语句内部的 ``case`` 模式中，``_`` 是一个 :ref:`软关键字 "
"<soft-keywords>`，它表示 :ref:`通配符 <wildcard-patterns>`。"

#: ../../reference/lexical_analysis.rst:437
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""
"在此之外，交互式解释器会将最后一次求值的结果放到变量 ``_`` 中。 （它与 "
"``print`` 等内置函数一起被存储于 :mod:`builtins` 模块。）"

#: ../../reference/lexical_analysis.rst:442
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""
"在其他地方，``_`` 是一个常规标识符。 它常常被用来命名 \"特殊\" 条目，但对 "
"Python 本身来说毫无特殊之处。"

#: ../../reference/lexical_analysis.rst:447
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr "``_`` 常用于连接国际化文本；详见 :mod:`gettext` 模块文档。"

#: ../../reference/lexical_analysis.rst:451
msgid "It is also commonly used for unused variables."
msgstr "它还经常被用来命名无需使用的变量。"

#: ../../reference/lexical_analysis.rst:453
msgid "``__*__``"
msgstr "``__*__``"

#: ../../reference/lexical_analysis.rst:454
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""
"系统定义的名称，通常简称为 \"dunder\" 。这些名称由解释器及其实现（包括标准"
"库）定义。现有系统定义名称相关的论述详见 :ref:`specialnames` 等章节。Python "
"未来版本中还将定义更多此类名称。任何情况下，*任何* 不显式遵从 ``__*__`` 名称"
"的文档用法，都可能导致无警告提示的错误。"

#: ../../reference/lexical_analysis.rst:461
msgid "``__*``"
msgstr "``__*``"

#: ../../reference/lexical_analysis.rst:462
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""
"类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 \"私"
"有\" 属性之间产生名称冲突。详见 :ref:`atom-identifiers`。"

#: ../../reference/lexical_analysis.rst:471
msgid "Literals"
msgstr "字面值"

#: ../../reference/lexical_analysis.rst:475
msgid "Literals are notations for constant values of some built-in types."
msgstr "字面值是内置类型常量值的表示法。"

#: ../../reference/lexical_analysis.rst:486
msgid "String and Bytes literals"
msgstr "字符串与字节串字面值"

#: ../../reference/lexical_analysis.rst:488
msgid "String literals are described by the following lexical definitions:"
msgstr "字符串字面值的词法定义如下："

#: ../../reference/lexical_analysis.rst:514
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`~python-grammar:stringprefix` "
"or :token:`~python-grammar:bytesprefix` and the rest of the literal. The "
"source character set is defined by the encoding declaration; it is UTF-8 if "
"no encoding declaration is given in the source file; see section :ref:"
"`encodings`."
msgstr ""
"这些产生式未指明的一个句法限制是空白符不允许在 :token:`~python-grammar:"
"stringprefix` 或 :token:`~python-grammar:bytesprefix` 与字面值的其余部分之间"
"出现。 源字符集是由编码格式声明来定义的；如果源文件没有给出编码格式声明则默"
"认 UTF-8；参见 :ref:`encodings` 一节。"

#: ../../reference/lexical_analysis.rst:524
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*). The backslash (``\\``) character is "
"used to give special meaning to otherwise ordinary characters like ``n``, "
"which means 'newline' when escaped (``\\n``). It can also be used to escape "
"characters that otherwise have a special meaning, such as newline, backslash "
"itself, or the quote character. See :ref:`escape sequences <escape-"
"sequences>` below for examples."
msgstr ""
"直白的说明：两种类型的字面值都可用成对的单引号 (``'``) 或双引号 (``\"``) 括起"
"来。 它们还可以用成对的连续三个单引号或双引号括起来 (这通常被称为 *三重引号字"
"符串*)。 反斜杠 (``\\``) 字符被用来给予普通的字符特殊含义例如 ``n``，当用斜杠"
"转义时 (``\\n``) 表示 '换行'。 它还可以被用来对具有特殊含义的字符进行转义，例"
"如换行符、反斜杠本身或者引号等。 请参阅下面的 :ref:`转义序列 <escape-"
"sequences>` 查看示例。"

#: ../../reference/lexical_analysis.rst:537
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""
"字节串字面值要加前缀 ``'b'`` 或 ``'B'``；生成的是类型 :class:`bytes` 的实例，"
"不是类型 :class:`str` 的实例；字节串只能包含 ASCII 字符；字节串数值大于等于 "
"128 时，必须用转义表示。"

#: ../../reference/lexical_analysis.rst:546
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters.  As a result, in raw string literals, ``'\\U'`` and ``'\\u'`` "
"escapes are not treated specially."
msgstr ""
"字符串和字节串字面值都可选择加前缀字母 ``'r'`` 或 ``'R'``；这分别被称为 :dfn:"
"`原始字符串字面值` 和 :dfn:`原始字节串字面值` 并会将反斜杠视为原本的字符字面"
"值。 因此，在原始字符串字面值中，``'\\U'`` 和 ``'\\u'`` 转义符号不会被特殊对"
"待。"

#: ../../reference/lexical_analysis.rst:552
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr "新增原始字节串 ``'rb'`` 前缀，是 ``'br'`` 的同义词。"

#: ../../reference/lexical_analysis.rst:556
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""
"支持 unicode 字面值（``u'value'``）遗留代码，简化 Python 2.x 和 3.x 并行代码"
"库的维护工作。详见 :pep:`414`。"

#: ../../reference/lexical_analysis.rst:564
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""
"前缀为 ``'f'`` 或 ``'F'`` 的字符串称为 :dfn:`格式字符串`；详见 :ref:`f-"
"strings`。``'f'`` 可与 ``'r'`` 连用，但不能与 ``'b'`` 或 ``'u'`` 连用，因此，"
"可以使用原始格式字符串，但不能使用格式字节串字面值。"

#: ../../reference/lexical_analysis.rst:569
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""
"三引号字面值可以包含未转义的换行和引号（原样保留），除了连在一起的，用于终止"
"字面值的，未经转义的三个引号。（\"引号\" 是启用字面值的字符，可以是 ``'``，也"
"可以是 ``\"``。）"

#: ../../reference/lexical_analysis.rst:592
msgid "Escape sequences"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:594
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""
"如未标注 ``'r'`` 或 ``'R'`` 前缀，字符串和字节串字面值中，转义序列以类似 C 标"
"准的规则进行解释。可用的转义序列如下："

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Escape Sequence"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Meaning"
msgstr "含意"

#: ../../reference/lexical_analysis.rst:599
#: ../../reference/lexical_analysis.rst:632
msgid "Notes"
msgstr "备注"

#: ../../reference/lexical_analysis.rst:601
msgid "``\\``\\ <newline>"
msgstr "``\\``\\ <newline>"

#: ../../reference/lexical_analysis.rst:601
msgid "Backslash and newline ignored"
msgstr "忽略反斜杠与换行符"

#: ../../reference/lexical_analysis.rst:601
msgid "\\(1)"
msgstr "\\(1)"

#: ../../reference/lexical_analysis.rst:603
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../reference/lexical_analysis.rst:603
msgid "Backslash (``\\``)"
msgstr "反斜杠（``\\``）"

#: ../../reference/lexical_analysis.rst:605
msgid "``\\'``"
msgstr "``\\'``"

#: ../../reference/lexical_analysis.rst:605
msgid "Single quote (``'``)"
msgstr "单引号（``'``）"

#: ../../reference/lexical_analysis.rst:607
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../reference/lexical_analysis.rst:607
msgid "Double quote (``\"``)"
msgstr "双引号（``\"``）"

#: ../../reference/lexical_analysis.rst:609
msgid "``\\a``"
msgstr "``\\a``"

#: ../../reference/lexical_analysis.rst:609
msgid "ASCII Bell (BEL)"
msgstr "ASCII 响铃（BEL）"

#: ../../reference/lexical_analysis.rst:611
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:611
msgid "ASCII Backspace (BS)"
msgstr "ASCII 退格符（BS）"

#: ../../reference/lexical_analysis.rst:613
msgid "``\\f``"
msgstr "``\\f``"

#: ../../reference/lexical_analysis.rst:613
msgid "ASCII Formfeed (FF)"
msgstr "ASCII 换页符（FF）"

#: ../../reference/lexical_analysis.rst:615
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:615
msgid "ASCII Linefeed (LF)"
msgstr "ASCII 换行符（LF）"

#: ../../reference/lexical_analysis.rst:617
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:617
msgid "ASCII Carriage Return (CR)"
msgstr "ASCII 回车符（CR）"

#: ../../reference/lexical_analysis.rst:619
msgid "``\\t``"
msgstr "``\\t``"

#: ../../reference/lexical_analysis.rst:619
msgid "ASCII Horizontal Tab (TAB)"
msgstr "ASCII 水平制表符（TAB）"

#: ../../reference/lexical_analysis.rst:621
msgid "``\\v``"
msgstr "``\\v``"

#: ../../reference/lexical_analysis.rst:621
msgid "ASCII Vertical Tab (VT)"
msgstr "ASCII 垂直制表符（VT）"

#: ../../reference/lexical_analysis.rst:623
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ":samp:`\\\\\\\\{ooo}`"

#: ../../reference/lexical_analysis.rst:623
msgid "Character with octal value *ooo*"
msgstr "八进制数 *ooo* 字符"

#: ../../reference/lexical_analysis.rst:623
msgid "(2,4)"
msgstr "(2,4)"

#: ../../reference/lexical_analysis.rst:626
msgid ":samp:`\\\\x{hh}`"
msgstr ":samp:`\\\\x{hh}`"

#: ../../reference/lexical_analysis.rst:626
msgid "Character with hex value *hh*"
msgstr "十六进制数 *hh* 字符"

#: ../../reference/lexical_analysis.rst:626
msgid "(3,4)"
msgstr "(3,4)"

#: ../../reference/lexical_analysis.rst:629
msgid "Escape sequences only recognized in string literals are:"
msgstr "字符串字面值专用的转义序列："

#: ../../reference/lexical_analysis.rst:634
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ":samp:`\\\\N\\\\{{name}\\\\}`"

#: ../../reference/lexical_analysis.rst:634
msgid "Character named *name* in the Unicode database"
msgstr "Unicode 数据库中名为 *name* 的字符"

#: ../../reference/lexical_analysis.rst:634
msgid "\\(5)"
msgstr "\\(5)"

#: ../../reference/lexical_analysis.rst:637
msgid ":samp:`\\\\u{xxxx}`"
msgstr ":samp:`\\\\u{xxxx}`"

#: ../../reference/lexical_analysis.rst:637
msgid "Character with 16-bit hex value *xxxx*"
msgstr "16 位十六进制数 *xxxx* 码位的字符"

#: ../../reference/lexical_analysis.rst:637
msgid "\\(6)"
msgstr "\\(6)"

#: ../../reference/lexical_analysis.rst:640
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ":samp:`\\\\U{xxxxxxxx}`"

#: ../../reference/lexical_analysis.rst:640
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr "32 位 16 进制数 *xxxxxxxx* 码位的字符"

#: ../../reference/lexical_analysis.rst:640
msgid "\\(7)"
msgstr "\\(7)"

#: ../../reference/lexical_analysis.rst:644
msgid "Notes:"
msgstr "注释："

#: ../../reference/lexical_analysis.rst:647
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr "可以在行尾添加一个反斜杠来忽略换行符::"

#: ../../reference/lexical_analysis.rst:649
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"

#: ../../reference/lexical_analysis.rst:653
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""
"同样的效果也可以使用 :ref:`三重引号字符串 <strings>`，或者圆括号和 :ref:`字符"
"串字面值拼接 <string-concatenation>` 来达成。"

#: ../../reference/lexical_analysis.rst:658
msgid "As in Standard C, up to three octal digits are accepted."
msgstr "与 C 标准一致，接受最多三个八进制数字。"

#: ../../reference/lexical_analysis.rst:660
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`DeprecationWarning`."
msgstr ""
"取值大于 ``0o377`` 的八进制数转义序列会产生 :exc:`DeprecationWarning`。"

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`SyntaxWarning`. In a future Python version they will be eventually a :exc:"
"`SyntaxError`."
msgstr ""
"数值大于 ``0o377`` 的八进制转义符会产生 :exc:`SyntaxWarning`。 在未来的 "
"Python 版本中将最终改为 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:670
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr "与 C 标准不同，必须为两个十六进制数字。"

#: ../../reference/lexical_analysis.rst:673
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""
"*字节串* 字面值中，十六进制数和八进制数的转义码以相应数值代表每个字节。*字符"
"串* 字面值中，这些转义码以相应数值代表每个 Unicode 字符。"

#: ../../reference/lexical_analysis.rst:678
msgid "Support for name aliases [#]_ has been added."
msgstr "加入了对别名 [#]_ 的支持。"

#: ../../reference/lexical_analysis.rst:682
msgid "Exactly four hex digits are required."
msgstr "必须为 4 个十六进制数码。"

#: ../../reference/lexical_analysis.rst:685
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are "
"required."
msgstr "表示任意 Unicode 字符。必须为 8 个十六进制数码。"

#: ../../reference/lexical_analysis.rst:691
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""
"与 C 标准不同，无法识别的转义序列在字符串里原样保留，即，*输出结果保留反斜杠"
"*。（调试时，这种方式很有用：输错转义序列时，更容易在输出结果中识别错误。）注"
"意，在字节串字面值内，字符串字面值专用的转义序列属于无法识别的转义序列。"

#: ../../reference/lexical_analysis.rst:698
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr "不可识别的转义序列会产生 :exc:`DeprecationWarning`。"

#: ../../reference/lexical_analysis.rst:701
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will be eventually a :exc:`SyntaxError`."
msgstr ""
"不可识别的转义序列会产生 :exc:`SyntaxWarning`。 在未来的 Python 版本中将最终"
"改为 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:705
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""
"即使在原始字面值中，引号也可以用反斜杠转义，但反斜杠会保留在输出结果里；例如 "
"``r\"\\\"\"`` 是由两个字符组成的有效字符串字面值：反斜杠和双引号；``r\"\\"
"\"`` 则不是有效字符串字面值（原始字符串也不能以奇数个反斜杠结尾）。尤其是，*"
"原始字面值不能以单个反斜杠结尾* （反斜杠会转义其后的引号)。还要注意，反斜杠加"
"换行在字面值中被解释为两个字符，而 *不是* 连续行。"

#: ../../reference/lexical_analysis.rst:718
msgid "String literal concatenation"
msgstr "字符串字面值合并"

#: ../../reference/lexical_analysis.rst:720
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning "
"is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long "
"lines, or even to add comments to parts of strings, for example::"
msgstr ""
"以空白符分隔的多个相邻字符串或字节串字面值，可用不同引号标注，等同于合并操"
"作。因此，``\"hello\" 'world'`` 等价于 ``\"helloworld\"``。此功能不需要反斜"
"杠，即可将长字符串分为多个物理行，还可以为不同部分的字符串添加注释，例如："

#: ../../reference/lexical_analysis.rst:727
msgid ""
"re.compile(\"[A-Za-z_]\"       # letter or underscore\n"
"           \"[A-Za-z0-9_]*\"   # letter, digit or underscore\n"
"          )"
msgstr ""
"re.compile(\"[A-Za-z_]\"       # 字母或下划线\n"
"           \"[A-Za-z0-9_]*\"   # 字母、数字或下划线\n"
"          )"

#: ../../reference/lexical_analysis.rst:731
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""
"注意，此功能在句法层面定义，在编译时实现。在运行时，合并字符串表达式必须使用 "
"'+' 运算符。还要注意，字面值合并可以为每个部分应用不同的引号风格（甚至混用原"
"始字符串和三引号字符串)，格式字符串字面值也可以与纯字符串字面值合并。"

#: ../../reference/lexical_analysis.rst:754
msgid "f-strings"
msgstr "f 字符串"

#: ../../reference/lexical_analysis.rst:758
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""
":dfn:`格式字符串字面值` 或称 :dfn:`f-string` 是标注了 ``'f'`` 或 ``'F'`` 前缀"
"的字符串字面值。这种字符串可包含替换字段，即以 ``{}`` 标注的表达式。其他字符"
"串字面值只是常量，格式字符串字面值则是可在运行时求值的表达式。"

#: ../../reference/lexical_analysis.rst:764
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""
"除非字面值标记为原始字符串，否则，与在普通字符串字面值中一样，转义序列也会被"
"解码。解码后，用于字符串内容的语法如下："

#: ../../reference/lexical_analysis.rst:778
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""
"双花括号 ``'{{'`` 或 ``'}}'`` 被替换为单花括号，花括号外的字符串仍按字面值处"
"理。单左花括号 ``'{'`` 标记以 Python 表达式开头的替换字段。在表达式后加等于"
"号 ``'='``，可在求值后，同时显示表达式文本及其结果（用于调试）。 随后是用叹"
"号 ``'!'`` 标记的转换字段。还可以在冒号 ``':'``  后附加格式说明符。替换字段以"
"右花括号 ``'}'`` 为结尾。"

#: ../../reference/lexical_analysis.rst:788
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""
"格式化字符串字面值中的表达式会与用圆括号包围的常规 Python 表达式一样处理，但"
"有少量例外。 空表达式是不被允许的，而 :keyword:`lambda` 和赋值表达式 ``:=`` "
"都必须显式地用括号包围。 每个表达式都将在格式化字符串字面值出现的上下文中按从"
"左到右的顺序进行求值。 替换表达式可在单引号和三引号f-字符串中包含换行符并可包"
"含注释。 替换字段内 ``#`` 后面的所有内容都是注释（即使结尾花括号和引号也"
"是）。 在这种情况下，替换字段必须在另一行中结束。"

#: ../../reference/lexical_analysis.rst:799
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"

#: ../../reference/lexical_analysis.rst:805
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""
"Python 3.7 以前， 因为实现的问题，不允许在格式字符串字面值表达式中使用 :"
"keyword:`await` 表达式与包含 :keyword:`async for` 子句的推导式。"

#: ../../reference/lexical_analysis.rst:810
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr "在 Python 3.12 之前，不允许在 f-字符串的替换字段中使用注释。"

#: ../../reference/lexical_analysis.rst:814
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""
"表达式里含等号 ``'='`` 时，输出内容包括表达式文本、``'='`` 、求值结果。输出内"
"容可以保留表达式中左花括号 ``'{'`` 后，及 ``'='`` 后的空格。没有指定格式时，"
"``'='`` 默认调用表达式的 :func:`repr`。指定了格式时，默认调用表达式的 :func:"
"`str`，除非声明了转换字段 ``'!r'``。"

#: ../../reference/lexical_analysis.rst:822
msgid "The equal sign ``'='``."
msgstr "等号 ``'='``。"

#: ../../reference/lexical_analysis.rst:825
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""
"指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 ``'!s'`` 调用 :"
"func:`str` 转换求值结果，``'!r'`` 调用 :func:`repr`，``'!a'`` 调用 :func:"
"`ascii`。"

#: ../../reference/lexical_analysis.rst:829
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""
"然后使用 :func:`format` 协议对结果进行格式化。 格式说明符将传给表达式或转换结"
"果的 :meth:`~object.__format__` 方法。 如果省略格式说明符则将传入空字符串。 "
"格式化后的结果将包括在整个字符串的最终值中。"

#: ../../reference/lexical_analysis.rst:835
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""
"最高层级的格式说明符可以包括嵌套的替换字段。 这些嵌套字段也可以包括它们自己的"
"转换字段和 :ref:`格式说明符 <formatspec>`，但是不可再包括更深层嵌套的替换字"
"段。 这里的 :ref:`格式说明符微语言 <formatspec>` 与 :meth:`str.format` 方法所"
"使用的相同。"

#: ../../reference/lexical_analysis.rst:841
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr "格式化字符串字面值可以拼接，但是一个替换字段不能拆分到多个字面值。"

#: ../../reference/lexical_analysis.rst:844
msgid "Some examples of formatted string literals::"
msgstr "格式字符串字面值示例如下："

#: ../../reference/lexical_analysis.rst:846
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"

#: ../../reference/lexical_analysis.rst:876
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr "允许在替换字段中重用外层 f-字符串的引号类型::"

#: ../../reference/lexical_analysis.rst:879
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"

#: ../../reference/lexical_analysis.rst:883
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""
"在 Python 3.12 之前不允许在替换字段中重用与外层 f-字符串相同的引号类型。"

#: ../../reference/lexical_analysis.rst:887
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr "替换字段中也允许使用反斜杠并会以与在其他场景下相同的方式求值::"

#: ../../reference/lexical_analysis.rst:890
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"

#: ../../reference/lexical_analysis.rst:897
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr "在 Python 3.12 之前，f-字符串的替换字段内不允许使用反斜杠。"

#: ../../reference/lexical_analysis.rst:901
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr "即便未包含表达式，格式字符串字面值也不能用作文档字符串。"

#: ../../reference/lexical_analysis.rst:906
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"

#: ../../reference/lexical_analysis.rst:912
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""
"参阅 :pep:`498`，了解格式字符串字面值的提案，以及与格式字符串机制相关的 :"
"meth:`str.format`。"

#: ../../reference/lexical_analysis.rst:919
msgid "Numeric literals"
msgstr "数值字面值"

#: ../../reference/lexical_analysis.rst:925
msgid ""
":data:`~token.NUMBER` tokens represent numeric literals, of which there are "
"three types: integers, floating-point numbers, and imaginary numbers."
msgstr ""

#: ../../reference/lexical_analysis.rst:933
msgid ""
"The numeric value of a numeric literal is the same as if it were passed as a "
"string to the :class:`int`, :class:`float` or :class:`complex` class "
"constructor, respectively. Note that not all valid inputs for those "
"constructors are also valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:938
msgid ""
"Numeric literals do not include a sign; a phrase like ``-1`` is actually an "
"expression composed of the unary operator '``-``' and the literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:952
msgid "Integer literals"
msgstr "整数字面值"

#: ../../reference/lexical_analysis.rst:954
msgid "Integer literals denote whole numbers. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:956
msgid ""
"7\n"
"3\n"
"2147483647"
msgstr ""

#: ../../reference/lexical_analysis.rst:960
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory::"
msgstr ""

#: ../../reference/lexical_analysis.rst:963
msgid "7922816251426433759354395033679228162514264337593543950336"
msgstr ""

#: ../../reference/lexical_analysis.rst:965
msgid ""
"Underscores can be used to group digits for enhanced readability, and are "
"ignored for determining the numeric value of the literal. For example, the "
"following literals are equivalent::"
msgstr ""

#: ../../reference/lexical_analysis.rst:969
msgid ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"
msgstr ""

#: ../../reference/lexical_analysis.rst:973
msgid ""
"Underscores can only occur between digits. For example, ``_123``, ``321_``, "
"and ``123__321`` are *not* valid literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:976
msgid ""
"Integers can be specified in binary (base 2), octal (base 8), or hexadecimal "
"(base 16) using the prefixes ``0b``, ``0o`` and ``0x``, respectively. "
"Hexadecimal digits 10 through 15 are represented by letters ``A``-``F``, "
"case-insensitive.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:981
msgid ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"
msgstr ""

#: ../../reference/lexical_analysis.rst:988
msgid ""
"An underscore can follow the base specifier. For example, ``0x_1f`` is a "
"valid literal, but ``0_x1f`` and ``0x__1f`` are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:992
msgid ""
"Leading zeros in a non-zero decimal number are not allowed. For example, "
"``0123`` is not a valid literal. This is for disambiguation with C-style "
"octal literals, which Python used before version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:997
msgid ""
"Formally, integer literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1014
#: ../../reference/lexical_analysis.rst:1078
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr "现已支持在字面值中，用下划线分组数字。"

#: ../../reference/lexical_analysis.rst:1025
msgid "Floating-point literals"
msgstr "浮点数字面值"

#: ../../reference/lexical_analysis.rst:1027
msgid ""
"Floating-point (float) literals, such as ``3.14`` or ``1.5``, denote :ref:"
"`approximations of real numbers <datamodel-float>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:1030
msgid ""
"They consist of *integer* and *fraction* parts, each composed of decimal "
"digits. The parts are separated by a decimal point, ``.``::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1033
msgid ""
"2.71828\n"
"4.0"
msgstr ""

#: ../../reference/lexical_analysis.rst:1036
msgid ""
"Unlike in integer literals, leading zeros are allowed in the numeric parts. "
"For example, ``077.010`` is legal, and denotes the same number as ``77.10``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1039
msgid ""
"As in integer literals, single underscores may occur between digits to help "
"readability::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1042
msgid ""
"96_485.332_123\n"
"3.14_15_93"
msgstr ""

#: ../../reference/lexical_analysis.rst:1045
msgid "Either of these parts, but not both, can be empty. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1047
msgid ""
"10.  # (equivalent to 10.0)\n"
".001  # (equivalent to 0.001)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1050
msgid ""
"Optionally, the integer and fraction may be followed by an *exponent*: the "
"letter ``e`` or ``E``, followed by an optional sign, ``+`` or ``-``, and a "
"number in the same format as the integer and fraction parts. The ``e`` or "
"``E`` represents \"times ten raised to the power of\"::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1055
msgid ""
"1.0e3  # (represents 1.0×10³, or 1000.0)\n"
"1.166e-5  # (represents 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (represents 6.02214076×10²³, or 602214076000000000000000.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1059
msgid ""
"In floats with only integer and exponent parts, the decimal point may be "
"omitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1062
msgid ""
"1e3  # (equivalent to 1.e3 and 1.0e3)\n"
"0e0  # (equivalent to 0.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:1065
msgid ""
"Formally, floating-point literals are described by the following lexical "
"definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1087
msgid "Imaginary literals"
msgstr "虚数字面值"

#: ../../reference/lexical_analysis.rst:1089
msgid ""
"Python has :ref:`complex number <typesnumeric>` objects, but no complex "
"literals. Instead, *imaginary literals* denote complex numbers with a zero "
"real part."
msgstr ""

#: ../../reference/lexical_analysis.rst:1094
msgid ""
"For example, in math, the complex number 3+4.2\\ *i* is written as the real "
"number 3 added to the imaginary number 4.2\\ *i*. Python uses a similar "
"syntax, except the imaginary unit is written as ``j`` rather than *i*::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1099
msgid "3+4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1101
msgid ""
"This is an expression composed of the :ref:`integer literal <integers>` "
"``3``, the :ref:`operator <operators>` '``+``', and the :ref:`imaginary "
"literal <imaginary>` ``4.2j``. Since these are three separate tokens, "
"whitespace is allowed between them::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1107
msgid "3 + 4.2j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1109
msgid ""
"No whitespace is allowed *within* each token. In particular, the ``j`` "
"suffix, may not be separated from the number before it."
msgstr ""

#: ../../reference/lexical_analysis.rst:1113
msgid ""
"The number before the ``j`` has the same syntax as a floating-point literal. "
"Thus, the following are valid imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1116
msgid ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1124
msgid ""
"Unlike in a floating-point literal the decimal point can be omitted if the "
"imaginary number only has an integer part. The number is still evaluated as "
"a floating-point number, not an integer::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1128
msgid ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # equivalent to 1e+24j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1132
msgid ""
"The ``j`` suffix is case-insensitive. That means you can use ``J`` instead::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1135
msgid "3.14J   # equivalent to 3.14j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1137
msgid ""
"Formally, imaginary literals are described by the following lexical "
"definition:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1148
msgid "Operators"
msgstr "运算符"

#: ../../reference/lexical_analysis.rst:1152
msgid "The following tokens are operators:"
msgstr "运算符如下所示："

#: ../../reference/lexical_analysis.rst:1154
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="

#: ../../reference/lexical_analysis.rst:1165
msgid "Delimiters"
msgstr "分隔符"

#: ../../reference/lexical_analysis.rst:1169
msgid "The following tokens serve as delimiters in the grammar:"
msgstr "以下形符在语法中为分隔符："

#: ../../reference/lexical_analysis.rst:1171
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="

#: ../../reference/lexical_analysis.rst:1178
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically "
"as delimiters, but also perform an operation."
msgstr ""
"句点也可以用于浮点数和虚数字面值。三个连续句点表示省略符。列表后半部分是增强"
"赋值操作符，用作词法分隔符，但也可以执行运算。"

#: ../../reference/lexical_analysis.rst:1183
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr "以下 ASCII 字符具有特殊含义，对词法分析器有重要意义："

#: ../../reference/lexical_analysis.rst:1186
msgid "'       \"       #       \\"
msgstr "'       \"       #       \\"

#: ../../reference/lexical_analysis.rst:1190
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""
"以下 ASCII 字符不用于 Python。在字符串字面值或注释外使用时，将直接报错："

#: ../../reference/lexical_analysis.rst:1193
msgid "$       ?       `"
msgstr "$       ?       `"

#: ../../reference/lexical_analysis.rst:1199
msgid "Footnotes"
msgstr "备注"

#: ../../reference/lexical_analysis.rst:1200
msgid "https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt"
msgstr "https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt"

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr "词法分析"

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr "解析器"

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr "形符"

#: ../../reference/lexical_analysis.rst:26
msgid "line structure"
msgstr "行结构"

#: ../../reference/lexical_analysis.rst:36
msgid "logical line"
msgstr "逻辑行"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
#: ../../reference/lexical_analysis.rst:573
msgid "physical line"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
msgid "line joining"
msgstr "行连接"

#: ../../reference/lexical_analysis.rst:36
msgid "NEWLINE token"
msgstr "NEWLINE 形符"

#: ../../reference/lexical_analysis.rst:68
msgid "comment"
msgstr "注释"

#: ../../reference/lexical_analysis.rst:68
msgid "hash character"
msgstr "hash 字符"

#: ../../reference/lexical_analysis.rst:68
#: ../../reference/lexical_analysis.rst:82
msgid "# (hash)"
msgstr "# (hash)"

#: ../../reference/lexical_analysis.rst:82
msgid "source character set"
msgstr "源字符集合"

#: ../../reference/lexical_analysis.rst:82
msgid "encoding declarations (source file)"
msgstr "编码格式声明（源文件）"

#: ../../reference/lexical_analysis.rst:82
msgid "source encoding declaration"
msgstr "源文件编码格式声明"

#: ../../reference/lexical_analysis.rst:115
msgid "line continuation"
msgstr "行连续"

#: ../../reference/lexical_analysis.rst:115
msgid "backslash character"
msgstr "反斜杠字符"

#: ../../reference/lexical_analysis.rst:160
msgid "blank line"
msgstr "空行"

#: ../../reference/lexical_analysis.rst:176
msgid "indentation"
msgstr "缩进"

#: ../../reference/lexical_analysis.rst:176
msgid "leading whitespace"
msgstr "开头空格"

#: ../../reference/lexical_analysis.rst:176
msgid "space"
msgstr "space"

#: ../../reference/lexical_analysis.rst:176
msgid "tab"
msgstr "tab"

#: ../../reference/lexical_analysis.rst:176
msgid "grouping"
msgstr "分组"

#: ../../reference/lexical_analysis.rst:176
msgid "statement grouping"
msgstr "语句分组"

#: ../../reference/lexical_analysis.rst:204
msgid "INDENT token"
msgstr "INDENT 形符"

#: ../../reference/lexical_analysis.rst:204
msgid "DEDENT token"
msgstr "DEDENT 形符"

#: ../../reference/lexical_analysis.rst:294
msgid "identifier"
msgstr "标识符"

#: ../../reference/lexical_analysis.rst:294
msgid "name"
msgstr "name"

#: ../../reference/lexical_analysis.rst:373
#: ../../reference/lexical_analysis.rst:397
msgid "keyword"
msgstr "关键字"

#: ../../reference/lexical_analysis.rst:373
msgid "reserved word"
msgstr "保留字"

#: ../../reference/lexical_analysis.rst:397
msgid "soft keyword"
msgstr "软关键字"

#: ../../reference/lexical_analysis.rst:417
msgid "_, identifiers"
msgstr "_, 标识符"

#: ../../reference/lexical_analysis.rst:417
msgid "__, identifiers"
msgstr "__, 标识符"

#: ../../reference/lexical_analysis.rst:473
msgid "literal"
msgstr "字面值"

#: ../../reference/lexical_analysis.rst:473
msgid "constant"
msgstr "常量"

#: ../../reference/lexical_analysis.rst:478
#: ../../reference/lexical_analysis.rst:520
msgid "string literal"
msgstr "字符串字面值"

#: ../../reference/lexical_analysis.rst:478
#: ../../reference/lexical_analysis.rst:533
msgid "bytes literal"
msgstr "字节串字面值"

#: ../../reference/lexical_analysis.rst:478
msgid "ASCII"
msgstr "ASCII"

#: ../../reference/lexical_analysis.rst:478
msgid "' (single quote)"
msgstr "' (单引号)"

#: ../../reference/lexical_analysis.rst:478
msgid "\" (double quote)"
msgstr "\" (双引号)"

#: ../../reference/lexical_analysis.rst:478
msgid "u'"
msgstr "u'"

#: ../../reference/lexical_analysis.rst:478
msgid "u\""
msgstr "u\""

#: ../../reference/lexical_analysis.rst:520
msgid "triple-quoted string"
msgstr "triple-quoted string -- 三引号字符串"

#: ../../reference/lexical_analysis.rst:520
msgid "Unicode Consortium"
msgstr "Unicode Consortium"

#: ../../reference/lexical_analysis.rst:520
msgid "raw string"
msgstr "原始字符串"

#: ../../reference/lexical_analysis.rst:520
msgid "\"\"\""
msgstr "\"\"\""

#: ../../reference/lexical_analysis.rst:520
msgid "'''"
msgstr "'''"

#: ../../reference/lexical_analysis.rst:533
msgid "b'"
msgstr "b'"

#: ../../reference/lexical_analysis.rst:533
msgid "b\""
msgstr "b\""

#: ../../reference/lexical_analysis.rst:542
msgid "r'"
msgstr "r'"

#: ../../reference/lexical_analysis.rst:542
msgid "raw string literal"
msgstr "原始字符串字面值"

#: ../../reference/lexical_analysis.rst:542
msgid "r\""
msgstr "r\""

#: ../../reference/lexical_analysis.rst:560
msgid "f'"
msgstr "f'"

#: ../../reference/lexical_analysis.rst:560
#: ../../reference/lexical_analysis.rst:738
msgid "formatted string literal"
msgstr "格式字符串字面值"

#: ../../reference/lexical_analysis.rst:560
msgid "f\""
msgstr "f\""

#: ../../reference/lexical_analysis.rst:573
msgid "escape sequence"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:573
msgid "Standard C"
msgstr "标准 C"

#: ../../reference/lexical_analysis.rst:573
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:573
msgid "\\ (backslash)"
msgstr "\\ (反斜杠)"

#: ../../reference/lexical_analysis.rst:573
msgid "\\\\"
msgstr "\\\\"

#: ../../reference/lexical_analysis.rst:573
msgid "\\a"
msgstr "\\a"

#: ../../reference/lexical_analysis.rst:573
msgid "\\b"
msgstr "\\b"

#: ../../reference/lexical_analysis.rst:573
msgid "\\f"
msgstr "\\f"

#: ../../reference/lexical_analysis.rst:573
msgid "\\n"
msgstr "\\n"

#: ../../reference/lexical_analysis.rst:573
msgid "\\r"
msgstr "\\r"

#: ../../reference/lexical_analysis.rst:573
msgid "\\t"
msgstr "\\t"

#: ../../reference/lexical_analysis.rst:573
msgid "\\v"
msgstr "\\v"

#: ../../reference/lexical_analysis.rst:573
msgid "\\x"
msgstr "\\x"

#: ../../reference/lexical_analysis.rst:573
msgid "\\u"
msgstr "\\u"

#: ../../reference/lexical_analysis.rst:573
msgid "\\U"
msgstr "\\U"

#: ../../reference/lexical_analysis.rst:689
msgid "unrecognized escape sequence"
msgstr "无法识别的转义序列"

#: ../../reference/lexical_analysis.rst:738
msgid "interpolated string literal"
msgstr "插值字符串字面值"

#: ../../reference/lexical_analysis.rst:738
msgid "string"
msgstr "string"

#: ../../reference/lexical_analysis.rst:738
msgid "formatted literal"
msgstr "格式化字面值"

#: ../../reference/lexical_analysis.rst:738
msgid "interpolated literal"
msgstr "插值字面值"

#: ../../reference/lexical_analysis.rst:738
msgid "f-string"
msgstr "f-string -- f-字符串"

#: ../../reference/lexical_analysis.rst:738
msgid "fstring"
msgstr "fstring"

#: ../../reference/lexical_analysis.rst:738
msgid "{} (curly brackets)"
msgstr "{} (花括号)"

#: ../../reference/lexical_analysis.rst:738
msgid "in formatted string literal"
msgstr "格式字符串字面值形式"

#: ../../reference/lexical_analysis.rst:738
msgid "! (exclamation)"
msgstr "! (感叹号)"

#: ../../reference/lexical_analysis.rst:738
msgid ": (colon)"
msgstr ": (冒号)"

#: ../../reference/lexical_analysis.rst:738
msgid "= (equals)"
msgstr "= (等于号)"

#: ../../reference/lexical_analysis.rst:738
msgid "for help in debugging using string literals"
msgstr "用于帮助使用字符串字面值进行调试"

#: ../../reference/lexical_analysis.rst:921
msgid "number"
msgstr "数字"

#: ../../reference/lexical_analysis.rst:921
msgid "numeric literal"
msgstr "数字字面值"

#: ../../reference/lexical_analysis.rst:921
#: ../../reference/lexical_analysis.rst:943
msgid "integer literal"
msgstr "整数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "floating-point literal"
msgstr "浮点数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "hexadecimal literal"
msgstr "十六进制数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "octal literal"
msgstr "八进制数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "binary literal"
msgstr "二进制数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "decimal literal"
msgstr "十进制数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "imaginary literal"
msgstr "虚数字面值"

#: ../../reference/lexical_analysis.rst:921
msgid "complex literal"
msgstr "复数字面值"

#: ../../reference/lexical_analysis.rst:943
msgid "0b"
msgstr "0b"

#: ../../reference/lexical_analysis.rst:943
msgid "0o"
msgstr "0o"

#: ../../reference/lexical_analysis.rst:943
msgid "0x"
msgstr "0x"

#: ../../reference/lexical_analysis.rst:943
#: ../../reference/lexical_analysis.rst:1018
msgid "_ (underscore)"
msgstr "_ (下划线)"

#: ../../reference/lexical_analysis.rst:943
#: ../../reference/lexical_analysis.rst:1018
#: ../../reference/lexical_analysis.rst:1082
msgid "in numeric literal"
msgstr "数字字面值形式"

#: ../../reference/lexical_analysis.rst:1018
msgid ". (dot)"
msgstr ". (点号)"

#: ../../reference/lexical_analysis.rst:1018
msgid "e"
msgstr "e"

#: ../../reference/lexical_analysis.rst:1082
msgid "j"
msgstr "j"

#: ../../reference/lexical_analysis.rst:1150
msgid "operators"
msgstr "运算符"

#: ../../reference/lexical_analysis.rst:1167
msgid "delimiters"
msgstr "分隔符"
