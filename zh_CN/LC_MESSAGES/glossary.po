# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "术语对照表"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"Python 交互模式下的默认提示符。通常可以在能在解释器中交互执行的代码示例中看"
"到。"

#: ../../glossary.rst:14
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:16
msgid "Can refer to:"
msgstr "具有以下含义："

#: ../../glossary.rst:18
msgid ""
"The default Python prompt of the interactive shell when entering the code "
"for an indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""
"当输入带缩进的代码块时，以及在一对匹配的左右分隔符（括号、方括号、大括号或三"
"引号）内，或在指定装饰器之后，交互式 Python 的默认提示符。"

#: ../../glossary.rst:23
msgid "The :const:`Ellipsis` built-in constant."
msgstr ":const:`Ellipsis` 内置常量。"

#: ../../glossary.rst:24
msgid "2to3"
msgstr "2to3"

#: ../../glossary.rst:26
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"这是一个尝试将 Python 2.x 代码转换为 Python 3.x 代码的工具，通过解析源代码和"
"遍历解析树来处理大部分不兼容问题。"

#: ../../glossary.rst:30
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"2to3 的标准库为 :mod:`lib2to3`；独立入口点为 :file:`Tools/scripts/2to3`。 参"
"见 :ref:`2to3-reference`。"

#: ../../glossary.rst:33
msgid "abstract base class"
msgstr "abstract base class -- 抽象基类"

#: ../../glossary.rst:35
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"抽象基类简称 ABC，是对 :term:`duck-typing` 的补充，它提供了一种定义接口的新方"
"式，相比之下其他技巧例如 :func:`hasattr` 显得过于笨拙或有微妙错误（例如使用 :"
"ref:`魔术方法 <special-lookup>`）。ABC 引入了虚拟子类，这种类并非继承自其他"
"类，但却仍能被 :func:`isinstance` 和 :func:`issubclass` 所认可；详见 :mod:"
"`abc` 模块文档。Python 自带许多内置的 ABC 用于实现数据结构（在 :mod:"
"`collections.abc` 模块中）、数字（在 :mod:`numbers` 模块中）、流（在 :mod:"
"`io` 模块中）、导入查找器和加载器（在 :mod:`importlib.abc` 模块中）。你可以使"
"用 :mod:`abc` 模块来创建自己的 ABC。"

#: ../../glossary.rst:46
msgid "annotation"
msgstr "annotation -- 标注"

#: ../../glossary.rst:48
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"关联到某个变量、类属性、函数形参或返回值的标签，被约定作为 :term:`类型注解 "
"<type hint>` 来使用。"

#: ../../glossary.rst:52
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""
"局部变量的标注在运行时不可访问，但全局变量、类属性和函数的标注会分别存放模"
"块、类和函数的 :attr:`__annotations__` 特殊属性中。"

#: ../../glossary.rst:58
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality."
msgstr ""

#: ../../glossary.rst:60
msgid "argument"
msgstr "argument -- 参数"

#: ../../glossary.rst:62
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"在调用函数时传给 :term:`function` （或 :term:`method` ）的值。参数分为两种："

#: ../../glossary.rst:65
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`关键字参数`: 在函数调用中前面带有标识符（例如 ``name=``）或者作为包含在"
"前面带有 ``**`` 的字典里的值传入。举例来说，``3`` 和 ``5`` 在以下对 :func:"
"`complex` 的调用中均属于关键字参数::"

#: ../../glossary.rst:73
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`位置参数`: 不属于关键字参数的参数。位置参数可出现于参数列表的开头以及/"
"或者作为前面带有 ``*`` 的 :term:`iterable` 里的元素被传入。举例来说，``3`` "
"和 ``5`` 在以下调用中均属于位置参数::"

#: ../../glossary.rst:82
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"参数会被赋值给函数体中对应的局部变量。有关赋值规则参见 :ref:`calls` 一节。根"
"据语法，任何表达式都可用来表示一个参数；最终算出的值会被赋给对应的局部变量。"

#: ../../glossary.rst:87
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"另参见 :term:`parameter` 术语表条目，常见问题中 :ref:`参数与形参的区别 <faq-"
"argument-vs-parameter>` 以及 :pep:`362`。"

#: ../../glossary.rst:90
msgid "asynchronous context manager"
msgstr "asynchronous context manager -- 异步上下文管理器"

#: ../../glossary.rst:92
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`__aenter__` and :meth:`__aexit__` methods.  "
"Introduced by :pep:`492`."
msgstr ""
"此种对象通过定义 :meth:`__aenter__` 和 :meth:`__aexit__` 方法来对 :keyword:"
"`async with` 语句中的环境进行控制。由 :pep:`492` 引入。"

#: ../../glossary.rst:95
msgid "asynchronous generator"
msgstr "asynchronous generator -- 异步生成器"

#: ../../glossary.rst:97
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"返回值为 :term:`asynchronous generator iterator` 的函数。它与使用 :keyword:"
"`async def` 定义的协程函数很相似，不同之处在于它包含 :keyword:`yield` 表达式"
"以产生一系列可在 :keyword:`async for` 循环中使用的值。"

#: ../../glossary.rst:102
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"此术语通常是指异步生成器函数，但在某些情况下则可能是指 *异步生成器迭代器*。如"
"果需要清楚表达具体含义，请使用全称以避免歧义。"

#: ../../glossary.rst:106
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"一个异步生成器函数可能包含 :keyword:`await` 表达式或者 :keyword:`async for` "
"以及 :keyword:`async with` 语句。"

#: ../../glossary.rst:109
msgid "asynchronous generator iterator"
msgstr "asynchronous generator iterator -- 异步生成器迭代器"

#: ../../glossary.rst:111
msgid "An object created by a :term:`asynchronous generator` function."
msgstr ":term:`asynchronous generator` 函数所创建的对象。"

#: ../../glossary.rst:113
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`__anext__` method returns an awaitable object which will execute the body "
"of the asynchronous generator function until the next :keyword:`yield` "
"expression."
msgstr ""
"此对象属于 :term:`asynchronous iterator`，当使用 :meth:`__anext__` 方法调用时"
"会返回一个可等待对象来执行异步生成器函数的代码直到下一个 :keyword:`yield` 表"
"达式。"

#: ../../glossary.rst:118
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`__anext__`, it picks up where it "
"left off.  See :pep:`492` and :pep:`525`."
msgstr ""
"每个 :keyword:`yield` 会临时暂停处理，记住当前位置执行状态 (包括局部变量和挂"
"起的 try 语句)。当该 *异步生成器迭代器* 与其他 :meth:`__anext__` 返回的可等待"
"对象有效恢复时，它会从离开位置继续执行。参见 :pep:`492` 和 :pep:`525`。"

#: ../../glossary.rst:123
msgid "asynchronous iterable"
msgstr "asynchronous iterable -- 异步可迭代对象"

#: ../../glossary.rst:125
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`__aiter__` method.  "
"Introduced by :pep:`492`."
msgstr ""
"可在 :keyword:`async for` 语句中被使用的对象。必须通过它的 :meth:`__aiter__` "
"方法返回一个 :term:`asynchronous iterator`。由 :pep:`492` 引入。"

#: ../../glossary.rst:128
msgid "asynchronous iterator"
msgstr "asynchronous iterator -- 异步迭代器"

#: ../../glossary.rst:130
msgid ""
"An object that implements the :meth:`__aiter__` and :meth:`__anext__` "
"methods.  ``__anext__`` must return an :term:`awaitable` object. :keyword:"
"`async for` resolves the awaitables returned by an asynchronous iterator's :"
"meth:`__anext__` method until it raises a :exc:`StopAsyncIteration` "
"exception.  Introduced by :pep:`492`."
msgstr ""
"实现了 :meth:`__aiter__` 和 :meth:`__anext__` 方法的对象。``__anext__`` 必须"
"返回一个 :term:`awaitable` 对象。:keyword:`async for` 会处理异步迭代器的 :"
"meth:`__anext__` 方法所返回的可等待对象，直到其引发一个 :exc:"
"`StopAsyncIteration` 异常。由 :pep:`492` 引入。"

#: ../../glossary.rst:135
msgid "attribute"
msgstr "attribute -- 属性"

#: ../../glossary.rst:137
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be "
"referenced as *o.a*."
msgstr ""

#: ../../glossary.rst:140
msgid "awaitable"
msgstr "awaitable -- 可等待对象"

#: ../../glossary.rst:142
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`__await__` method. See also :"
"pep:`492`."
msgstr ""
"能在 :keyword:`await` 表达式中使用的对象。可以是 :term:`coroutine` 或是具有 :"
"meth:`__await__` 方法的对象。参见 :pep:`492`。"

#: ../../glossary.rst:145
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:147
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"“终身仁慈独裁者”的英文缩写，即 `Guido van Rossum <https://gvanrossum.github."
"io/>`_，Python 的创造者。"

#: ../../glossary.rst:149
msgid "binary file"
msgstr "binary file -- 二进制文件"

#: ../../glossary.rst:151
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer`, :data:`sys."
"stdout.buffer`, and instances of :class:`io.BytesIO` and :class:`gzip."
"GzipFile`."
msgstr ""
":term:`file object` 能够读写 :term:`字节类对象 <bytes-like object>`。二进制文"
"件的例子包括以二进制模式（``'rb'``, ``'wb'`` or ``'rb+'``）打开的文件、:data:"
"`sys.stdin.buffer`、:data:`sys.stdout.buffer` 以及 :class:`io.BytesIO` 和 :"
"class:`gzip.GzipFile` 的实例。"

#: ../../glossary.rst:158
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr "另请参见 :term:`text file` 了解能够读写 :class:`str` 对象的文件对象。"

#: ../../glossary.rst:160
msgid "bytes-like object"
msgstr "bytes-like object -- 字节型对象"

#: ../../glossary.rst:162
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"支持 :ref:`bufferobjects` 并且能导出 C-:term:`contiguous` 缓冲的对象。这包括"
"所有 :class:`bytes`、:class:`bytearray` 和 :class:`array.array` 对象，以及许"
"多普通 :class:`memoryview` 对象。 字节型对象可在多种二进制数据操作中使用；这"
"些操作包括压缩、保存为二进制文件以及通过套接字发送等。"

#: ../../glossary.rst:169
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"某些操作需要可变的二进制数据。这种对象在文档中常被称为“可读写字节类对象”。可"
"变缓冲对象的例子包括 :class:`bytearray` 以及 :class:`bytearray` 的 :class:"
"`memoryview`。其他操作要求二进制数据存放于不可变对象 (\"只读字节类对象\")；这"
"种对象的例子包括 :class:`bytes` 以及 :class:`bytes` 对象的 :class:"
"`memoryview`。"

#: ../../glossary.rst:177
msgid "bytecode"
msgstr "bytecode -- 字节码"

#: ../../glossary.rst:179
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"Python 源代码会被编译为字节码，即 CPython 解释器中表示 Python 程序的内部代"
"码。字节码还会缓存在 ``.pyc`` 文件中，这样第二次执行同一文件时速度更快（可以"
"免去将源码重新编译为字节码）。这种 \"中间语言\" 运行在根据字节码执行相应机器"
"码的 :term:`virtual machine` 之上。请注意不同 Python 虚拟机上的字节码不一定通"
"用，也不一定能在不同 Python 版本上兼容。"

#: ../../glossary.rst:189
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr "字节码指令列表可以在 :ref:`dis 模块 <bytecodes>` 的文档中查看。"

#: ../../glossary.rst:191
msgid "callback"
msgstr "callback -- 回调"

#: ../../glossary.rst:193
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr "一个作为参数被传入以用以在未来的某个时刻被调用的子例程函数。"

#: ../../glossary.rst:195
msgid "class"
msgstr "class"

#: ../../glossary.rst:197
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"用来创建用户定义对象的模板。类定义通常包含对该类的实例进行操作的方法定义。"

#: ../../glossary.rst:200
msgid "class variable"
msgstr "class variable -- 类变量"

#: ../../glossary.rst:202
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr "在类中定义的变量，并且仅限在类的层级上修改 (而不是在类的实例中修改)。"

#: ../../glossary.rst:204
msgid "coercion"
msgstr "coercion -- 强制类型转换"

#: ../../glossary.rst:206
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, "
"``int(3.15)`` converts the floating point number to the integer ``3``, but "
"in ``3+4.5``, each argument is of a different type (one int, one float), and "
"both must be converted to the same type before they can be added or it will "
"raise a :exc:`TypeError`.  Without coercion, all arguments of even "
"compatible types would have to be normalized to the same value by the "
"programmer, e.g., ``float(3)+4.5`` rather than just ``3+4.5``."
msgstr ""
"在包含两个相同类型参数的操作中，一种类型的实例隐式地转换为另一种类型。例如，"
"``int(3.15)`` 是将原浮点数转换为整型数 ``3``，但在 ``3+4.5`` 中，参数的类型不"
"一致（一个是 int, 一个是 float），两者必须转换为相同类型才能相加，否则将引"
"发 :exc:`TypeError`。如果没有强制类型转换机制，程序员必须将所有可兼容参数归一"
"化为相同类型，例如要写成 ``float(3)+4.5`` 而不是 ``3+4.5``。"

#: ../../glossary.rst:214
msgid "complex number"
msgstr "complex number -- 复数"

#: ../../glossary.rst:216
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"对普通实数系统的扩展，其中所有数字都被表示为一个实部和一个虚部的和。虚数是虚"
"数单位（``-1`` 的平方根）的实倍数，通常在数学中写为 ``i``，在工程学中写为 "
"``j``。Python 内置了对复数的支持，采用工程学标记方式；虚部带有一个 ``j`` 后"
"缀，例如 ``3+1j``。如果需要 :mod:`math` 模块内对象的对应复数版本，请使用 :"
"mod:`cmath`，复数的使用是一个比较高级的数学特性。如果你感觉没有必要，忽略它们"
"也几乎不会有任何问题。"

#: ../../glossary.rst:226
msgid "context manager"
msgstr "context manager -- 上下文管理器"

#: ../../glossary.rst:228
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""
"在 :keyword:`with` 语句中使用，通过定义 :meth:`__enter__` 和 :meth:"
"`__exit__` 方法来控制环境状态的对象。参见 :pep:`343`。"

#: ../../glossary.rst:231
msgid "context variable"
msgstr "context variable -- 上下文变量"

#: ../../glossary.rst:233
msgid ""
"A variable which can have different values depending on its context. This is "
"similar to Thread-Local Storage in which each execution thread may have a "
"different value for a variable. However, with context variables, there may "
"be several contexts in one execution thread and the main usage for context "
"variables is to keep track of variables in concurrent asynchronous tasks. "
"See :mod:`contextvars`."
msgstr ""
"一种根据其所属的上下文可以具有不同的值的变量。 这类似于在线程局部存储中每个执"
"行线程可以具有不同的变量值。 不过，对于上下文变量来说，一个执行线程中可能会有"
"多个上下文，而上下文变量的主要用途是对并发异步任务中变量进行追踪。 参见 :mod:"
"`contextvars`。"

#: ../../glossary.rst:240
msgid "contiguous"
msgstr "contiguous -- 连续"

#: ../../glossary.rst:244
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"一个缓冲如果是 *C 连续* 或 *Fortran 连续* 就会被认为是连续的。零维缓冲是 C "
"和 Fortran 连续的。在一维数组中，所有条目必须在内存中彼此相邻地排列，采用从零"
"开始的递增索引顺序。在多维 C-连续数组中，当按内存地址排列时用最后一个索引访问"
"条目时速度最快。但是在 Fortran 连续数组中则是用第一个索引最快。"

#: ../../glossary.rst:252
msgid "coroutine"
msgstr "coroutine -- 协程"

#: ../../glossary.rst:254
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"协程是子例程的更一般形式。  子例程可以在某一点进入并在另一点退出。 协程则可以"
"在许多不同的点上进入、退出和恢复。 它们可通过 :keyword:`async def` 语句来实"
"现。 参见 :pep:`492`。"

#: ../../glossary.rst:259
msgid "coroutine function"
msgstr "coroutine function -- 协程函数"

#: ../../glossary.rst:261
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"返回一个 :term:`coroutine` 对象的函数。协程函数可通过 :keyword:`async def` 语"
"句来定义，并可能包含 :keyword:`await`、:keyword:`async for` 和 :keyword:"
"`async with` 关键字。这些特性是由 :pep:`492` 引入的。"

#: ../../glossary.rst:266
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:268
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"Python 编程语言的规范实现，在 `python.org <https://www.python.org>`_ 上发"
"布。\"CPython\" 一词用于在必要时将此实现与其他实现例如 Jython 或 IronPython "
"相区别。"

#: ../../glossary.rst:272
msgid "decorator"
msgstr "decorator -- 装饰器"

#: ../../glossary.rst:274
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"返回值为另一个函数的函数，通常使用 ``@wrapper`` 语法形式来进行函数变换。 装饰"
"器的常见例子包括 :func:`classmethod` 和 :func:`staticmethod`。"

#: ../../glossary.rst:278
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr "装饰器语法只是一种语法糖，以下两个函数定义在语义上完全等价::"

#: ../../glossary.rst:289
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"同样的概念也适用于类，但通常较少这样使用。有关装饰器的详情可参见 :ref:`函数定"
"义 <function>` 和 :ref:`类定义 <class>` 的文档。"

#: ../../glossary.rst:292
msgid "descriptor"
msgstr "descriptor -- 描述器"

#: ../../glossary.rst:294
msgid ""
"Any object which defines the methods :meth:`__get__`, :meth:`__set__`, or :"
"meth:`__delete__`.  When a class attribute is a descriptor, its special "
"binding behavior is triggered upon attribute lookup.  Normally, using *a.b* "
"to get, set or delete an attribute looks up the object named *b* in the "
"class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""
"任何定义了 :meth:`__get__`, :meth:`__set__` 或 :meth:`__delete__` 方法的对"
"象。当一个类属性为描述器时，它的特殊绑定行为就会在属性查找时被触发。通常情况"
"下，使用 *a.b* 来获取、设置或删除一个属性时会在 *a* 的类字典中查找名称为 *b* "
"的对象，但如果 *b* 是一个描述器，则会调用对应的描述器方法。理解描述器的概念是"
"更深层次理解 Python 的关键，因为这是许多重要特性的基础，包括函数、方法、属"
"性、类方法、静态方法以及对超类的引用等等。"

#: ../../glossary.rst:304
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"有关描述器的方法的更多信息，请参阅 :ref:`descriptors` 或 :ref:`描述器使用指"
"南 <descriptorhowto>`。"

#: ../../glossary.rst:306
msgid "dictionary"
msgstr "dictionary -- 字典"

#: ../../glossary.rst:308
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__` and :meth:`__eq__` methods. Called a "
"hash in Perl."
msgstr ""
"一个关联数组，其中的任意键都映射到相应的值。键可以是任何具有 :meth:"
"`__hash__` 和 :meth:`__eq__` 方法的对象。在 Perl 语言中称为 hash。"

#: ../../glossary.rst:311
msgid "dictionary comprehension"
msgstr "dictionary comprehension -- 字典推导式"

#: ../../glossary.rst:313
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"处理一个可迭代对象中的所有或部分元素并返回结果字典的一种紧凑写法。 ``results "
"= {n: n ** 2 for n in range(10)}`` 将生成一个由键 ``n`` 到值 ``n ** 2`` 的映"
"射构成的字典。 参见 :ref:`comprehensions`。"

#: ../../glossary.rst:317
msgid "dictionary view"
msgstr "dictionary view -- 字典视图"

#: ../../glossary.rst:319
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"从 :meth:`dict.keys`, :meth:`dict.values` 和 :meth:`dict.items` 返回的对象被"
"称为字典视图。它们提供了字典条目的一个动态视图，这意味着当字典改变时，视图也"
"会相应改变。要将字典视图强制转换为真正的列表，可使用 ``list(dictview)``。参"
"见 :ref:`dict-views`。"

#: ../../glossary.rst:325
msgid "docstring"
msgstr "docstring -- 文档字符串"

#: ../../glossary.rst:327
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"作为类、函数或模块之内的第一个表达式出现的字符串字面值。它在代码执行时会被忽"
"略，但会被解释器识别并放入所在类、函数或模块的 :attr:`__doc__` 属性中。由于它"
"可用于代码内省，因此是对象存放文档的规范位置。"

#: ../../glossary.rst:333
msgid "duck-typing"
msgstr "duck-typing -- 鸭子类型"

#: ../../glossary.rst:335
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"指一种编程风格，它并不依靠查找对象类型来确定其是否具有正确的接口，而是直接调"
"用或使用其方法或属性（“看起来像鸭子，叫起来也像鸭子，那么肯定就是鸭子。”）由"
"于强调接口而非特定类型，设计良好的代码可通过允许多态替代来提升灵活性。鸭子类"
"型避免使用 :func:`type` 或 :func:`isinstance` 检测。(但要注意鸭子类型可以使"
"用 :term:`抽象基类 <abstract base class>` 作为补充。)  而往往会采用 :func:"
"`hasattr` 检测或是 :term:`EAFP` 编程。"

#: ../../glossary.rst:344
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:346
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"“求原谅比求许可更容易”的英文缩写。这种 Python 常用代码编写风格会假定所需的键"
"或属性存在，并在假定错误时捕获异常。这种简洁快速风格的特点就是大量运用 :"
"keyword:`try` 和 :keyword:`except` 语句。于其相对的则是所谓 :term:`LBYL` 风"
"格，常见于 C 等许多其他语言。"

#: ../../glossary.rst:352
msgid "expression"
msgstr "expression -- 表达式"

#: ../../glossary.rst:354
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"可以求出某个值的语法单元。 换句话说，一个表达式就是表达元素例如字面值、名称、"
"属性访问、运算符或函数调用的汇总，它们最终都会返回一个值。 与许多其他语言不"
"同，并非所有语言构件都是表达式。 还存在不能被用作表达式的 :term:`statement`，"
"例如 :keyword:`while`。 赋值也是属于语句而非表达式。"

#: ../../glossary.rst:361
msgid "extension module"
msgstr "extension module -- 扩展模块"

#: ../../glossary.rst:363
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"以 C 或 C++ 编写的模块，使用 Python 的 C API 来与语言核心以及用户代码进行交"
"互。"

#: ../../glossary.rst:365
msgid "f-string"
msgstr "f-string -- f-字符串"

#: ../../glossary.rst:367
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""
"带有 ``'f'`` 或 ``'F'`` 前缀的字符串字面值通常被称为“f-字符串”即 :ref:`格式化"
"字符串字面值 <f-strings>` 的简写。参见 :pep:`498`。"

#: ../../glossary.rst:370
msgid "file object"
msgstr "file object -- 文件对象"

#: ../../glossary.rst:372
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"对外提供面向文件 API 以使用下层资源的对象（带有 :meth:`read()` 或 :meth:"
"`write()` 这样的方法）。根据其创建方式的不同，文件对象可以处理对真实磁盘文"
"件，对其他类型存储，或是对通讯设备的访问（例如标准输入/输出、内存缓冲区、套接"
"字、管道等等）。文件对象也被称为 :dfn:`文件类对象` 或 :dfn:`流`。"

#: ../../glossary.rst:380
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"实际上共有三种类别的文件对象: 原始 :term:`二进制文件 <binary file>`, 缓冲 :"
"term:`二进制文件 <binary file>` 以及 :term:`文本文件 <text file>`。它们的接口"
"定义均在 :mod:`io` 模块中。 创建文件对象的规范方式是使用 :func:`open` 函数。"

#: ../../glossary.rst:385
msgid "file-like object"
msgstr "file-like object -- 文件型对象"

#: ../../glossary.rst:387
msgid "A synonym for :term:`file object`."
msgstr ":term:`file object` 的同义词。"

#: ../../glossary.rst:388
msgid "finder"
msgstr "finder -- 查找器"

#: ../../glossary.rst:390
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr "一种会尝试查找被导入模块的 :term:`loader` 的对象。"

#: ../../glossary.rst:393
msgid ""
"Since Python 3.3, there are two types of finder: :term:`meta path finders "
"<meta path finder>` for use with :data:`sys.meta_path`, and :term:`path "
"entry finders <path entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""
"从 Python 3.3 起存在两种类型的查找器: :term:`元路径查找器 <meta path "
"finder>` 配合 :data:`sys.meta_path` 使用，以及 :term:`path entry finders "
"<path entry finder>` 配合 :data:`sys.path_hooks` 使用。"

#: ../../glossary.rst:397
msgid "See :pep:`302`, :pep:`420` and :pep:`451` for much more detail."
msgstr "更多详情可参见 :pep:`302`, :pep:`420` 和 :pep:`451`。"

#: ../../glossary.rst:398
msgid "floor division"
msgstr "floor division -- 向下取整除法"

#: ../../glossary.rst:400
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"向下舍入到最接近的整数的数学除法。向下取整除法的运算符是 ``//`` 。例如，表达"
"式 ``11 // 4`` 的计算结果是 ``2`` ，而与之相反的是浮点数的真正除法返回 "
"``2.75`` 。注意 ``(-11) // 4`` 会返回 ``-3`` 因为这是 ``-2.75`` *向下* 舍入得"
"到的结果。见 :pep:`238` 。"

#: ../../glossary.rst:405
msgid "function"
msgstr "function -- 函数"

#: ../../glossary.rst:407
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"可以向调用者返回某个值的一组语句。还可以向其传入零个或多个 :term:`参数 "
"<argument>` 并在函数体执行中被使用。另见 :term:`parameter`, :term:`method` "
"和 :ref:`function` 等节。"

#: ../../glossary.rst:411
msgid "function annotation"
msgstr "function annotation -- 函数标注"

#: ../../glossary.rst:413
msgid "An :term:`annotation` of a function parameter or return value."
msgstr "即针对函数形参或返回值的 :term:`annotation` 。"

#: ../../glossary.rst:415
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"函数标注通常用于 :term:`类型提示 <type hint>`：例如以下函数预期接受两个 :"
"class:`int` 参数并预期返回一个 :class:`int` 值::"

#: ../../glossary.rst:423
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr "函数标注语法的详解见 :ref:`function` 一节。"

#: ../../glossary.rst:425
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality."
msgstr ""

#: ../../glossary.rst:427
msgid "__future__"
msgstr "__future__"

#: ../../glossary.rst:429
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
":ref:`future 语句 <future>`, ``from __future__ import <feature>`` 指示编译器"
"使用将在未来的 Python 发布版中成为标准的语法和语义来编译当前模块。 :mod:"
"`__future__` 模块文档记录了可能 的 *feature* 取值。 通过导入此模块并对其变量"
"求值，你可以看到每项新特性在何时被首次加入到该语言中以及它将（或已）在何时成"
"为默认::"

#: ../../glossary.rst:440
msgid "garbage collection"
msgstr "garbage collection -- 垃圾回收"

#: ../../glossary.rst:442
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"释放不再被使用的内存空间的过程。Python 是通过引用计数和一个能够检测和打破循环"
"引用的循环垃圾回收器来执行垃圾回收的。可以使用 :mod:`gc` 模块来控制垃圾回收"
"器。"

#: ../../glossary.rst:448
msgid "generator"
msgstr "generator -- 生成器"

#: ../../glossary.rst:450
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"返回一个 :term:`generator iterator` 的函数。它看起来很像普通函数，不同点在于"
"其包含 :keyword:`yield` 表达式以便产生一系列值供给 for-循环使用或是通过 :"
"func:`next` 函数逐一获取。"

#: ../../glossary.rst:455
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"通常是指生成器函数，但在某些情况下也可能是指 *生成器迭代器*。如果需要清楚表达"
"具体含义，请使用全称以避免歧义。"

#: ../../glossary.rst:458
msgid "generator iterator"
msgstr "generator iterator -- 生成器迭代器"

#: ../../glossary.rst:460
msgid "An object created by a :term:`generator` function."
msgstr ":term:`generator` 函数所创建的对象。"

#: ../../glossary.rst:462
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""
"每个 :keyword:`yield` 会临时暂停处理，记住当前位置执行状态（包括局部变量和挂"
"起的 try 语句）。当该 *生成器迭代器* 恢复时，它会从离开位置继续执行（这与每次"
"调用都从新开始的普通函数差别很大）。"

#: ../../glossary.rst:469
msgid "generator expression"
msgstr "generator expression -- 生成器表达式"

#: ../../glossary.rst:471
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""
"返回迭代器的表达式。它看起来像一个普通表达式，后面跟着一个:keyword:`!for` 子"
"句，定义了一个循环变量、范围和一个可选的:keyword:`!if` 子句。以下复合表达式会"
"为外层函数生成一系列值:::"

#: ../../glossary.rst:478
msgid "generic function"
msgstr "generic function -- 泛型函数"

#: ../../glossary.rst:480
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"为不同的类型实现相同操作的多个函数所组成的函数。在调用时会由调度算法来确定应"
"该使用哪个实现。"

#: ../../glossary.rst:484
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"另请参见 :term:`single dispatch` 术语表条目、:func:`functools."
"singledispatch` 装饰器以及 :pep:`443`。"

#: ../../glossary.rst:486
msgid "generic type"
msgstr "generic type -- 泛型"

#: ../../glossary.rst:488
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"可参数化的 :term:`type`；通常为 :class:`list` 或 :class:`dict` 这样的 :ref:`"
"容器类 <sequence-types>`。用于 :term:`类型提示 <type hint>` 和 :term:`注解 "
"<annotation>`。"

#: ../../glossary.rst:493
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"更多细节参见 :ref:`泛型别名类型 <types-genericalias>`、:pep:`483`、:pep:"
"`484`、:pep:`585` 和 :mod:`typing` 模块。"

#: ../../glossary.rst:495
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:497
msgid "See :term:`global interpreter lock`."
msgstr "参见 :term:`global interpreter lock`。"

#: ../../glossary.rst:498
msgid "global interpreter lock"
msgstr "global interpreter lock -- 全局解释器锁"

#: ../../glossary.rst:500
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
":term:`CPython` 解释器所采用的一种机制，它确保同一时刻只有一个线程在执行 "
"Python :term:`bytecode`。此机制通过设置对象模型（包括 :class:`dict` 等重要内"
"置类型）针对并发访问的隐式安全简化了 CPython 实现。给整个解释器加锁使得解释器"
"多线程运行更方便，其代价则是牺牲了在多处理器上的并行性。"

#: ../../glossary.rst:509
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

#: ../../glossary.rst:514
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
"以往的创建实现 “线程自由” 的解释器（能以更细的粒度锁定共享数据）的努力并不成"
"功，因为在常见的单处理器中性能会受到影响。我们认为，克服性能问题会使实现过程"
"变得更加复杂，从而增加维护成本。"

#: ../../glossary.rst:520
msgid "hash-based pyc"
msgstr "hash-based pyc -- 基于哈希的 pyc"

#: ../../glossary.rst:522
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"使用对应源文件的哈希值而非最后修改时间来确定其有效性的字节码缓存文件。 参见 :"
"ref:`pyc-invalidation`。"

#: ../../glossary.rst:525
msgid "hashable"
msgstr "hashable -- 可哈希"

#: ../../glossary.rst:527
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` method).  Hashable objects which "
"compare equal must have the same hash value."
msgstr ""
"一个对象的哈希值如果在其生命周期内绝不改变，就被称为 *可哈希* （它需要具有 :"
"meth:`__hash__` 方法），并可以同其他对象进行比较（它需要具有 :meth:`__eq__` "
"方法）。可哈希对象必须具有相同的哈希值比较结果才会相同。"

#: ../../glossary.rst:532
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"可哈希性使得对象能够作为字典键或集合成员使用，因为这些数据结构要在内部使用哈"
"希值。"

#: ../../glossary.rst:535
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"大多数 Python 中的不可变内置对象都是可哈希的；可变容器（例如列表或字典）都不"
"可哈希；不可变容器（例如元组和 frozenset）仅当它们的元素均为可哈希时才是可哈"
"希的。 用户定义类的实例对象默认是可哈希的。 它们在比较时一定不相同（除非是与"
"自己比较），它们的哈希值的生成是基于它们的 :func:`id`。"

#: ../../glossary.rst:542
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:544
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""

#: ../../glossary.rst:547
msgid "immutable"
msgstr "immutable -- 不可变对象"

#: ../../glossary.rst:549
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"具有固定值的对象。不可变对象包括数字、字符串和元组。这样的对象不能被改变。如"
"果必须存储一个不同的值，则必须创建新的对象。它们在需要常量哈希值的地方起着重"
"要作用，例如作为字典中的键。"

#: ../../glossary.rst:554
msgid "import path"
msgstr "import path -- 导入路径"

#: ../../glossary.rst:556
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"由多个位置（或 :term:`路径条目 <path entry>`）组成的列表，会被模块的 :term:"
"`path based finder` 用来查找导入目标。在导入时，此位置列表通常来自 :data:"
"`sys.path`，但对次级包来说也可能来自上级包的 ``__path__`` 属性。"

#: ../../glossary.rst:561
msgid "importing"
msgstr "importing -- 导入"

#: ../../glossary.rst:563
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr "令一个模块中的 Python 代码能为另一个模块中的 Python 代码所使用的过程。"

#: ../../glossary.rst:565
msgid "importer"
msgstr "importer -- 导入器"

#: ../../glossary.rst:567
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"查找并加载模块的对象；此对象既属于 :term:`finder` 又属于 :term:`loader`。"

#: ../../glossary.rst:569
msgid "interactive"
msgstr "interactive -- 交互"

#: ../../glossary.rst:571
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
"Python 有一个交互式解释器，这意味着你可以在解释器的提示符下输入语句和表达式，"
"然后立即执行并查看结果。  只需在没有参数的情况下启动 ``python``  (如果有的"
"话，还可以从计算机的主菜单中直接选择它来启动) 。这是测试新想法或检查模块和软"
"件包的一种非常有效的方式 (别忘了试试``help(x)``) 。"

#: ../../glossary.rst:577
msgid "interpreted"
msgstr "interpreted -- 解释型"

#: ../../glossary.rst:579
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python 一是种解释型语言，与之相对的是编译型语言，虽然两者的区别由于字节码编译"
"器的存在而会有所模糊。这意味着源文件可以直接运行而不必显式地创建可执行文件再"
"运行。解释型语言通常具有比编译型语言更短的开发/调试周期，但是其程序往往运行得"
"更慢。参见 :term:`interactive`。"

#: ../../glossary.rst:586
msgid "interpreter shutdown"
msgstr "interpreter shutdown -- 解释器关闭"

#: ../../glossary.rst:588
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"当被要求关闭时，Python 解释器将进入一个特殊运行阶段并逐步释放所有已分配资源，"
"例如模块和各种关键内部结构等。它还会多次调用 :term:`垃圾回收器 <garbage "
"collection>`。这会触发用户定义析构器或弱引用回调中的代码执行。在关闭阶段执行"
"的代码可能会遇到各种异常，因为其所依赖的资源已不再有效（常见的例子有库模块或"
"警告机制等）。"

#: ../../glossary.rst:597
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr "解释器需要关闭的主要原因有 ``__main__`` 模块或所运行的脚本已完成执行。"

#: ../../glossary.rst:599
msgid "iterable"
msgstr "iterable -- 可迭代对象"

#: ../../glossary.rst:601
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`__iter__` method or with a :meth:`__getitem__` method that implements :"
"term:`Sequence <sequence>` semantics."
msgstr ""
"能够逐一返回其成员项的对象。 可迭代对象的例子包括所有序列类型 (例如 :class:"
"`list`, :class:`str` 和 :class:`tuple`) 以及某些非序列类型例如 :class:"
"`dict`, :term:`文件对象 <file object>` 以及定义了 :meth:`__iter__` 方法或是实"
"现了 :term:`序列 <sequence>` 语义的 :meth:`__getitem__` 方法的任意自定义类对"
"象。"

#: ../../glossary.rst:608
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The "
"``for`` statement does that automatically for you, creating a temporary "
"unnamed variable to hold the iterator for the duration of the loop.  See "
"also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""
"可迭代对象被可用于 :keyword:`for` 循环以及许多其他需要一个序列的地方（:func:"
"`zip`、:func:`map` ...）。当一个可迭代对象作为参数传给内置函数 :func:`iter` "
"时，它会返回该对象的迭代器。这种迭代器适用于对值集合的一次性遍历。在使用可迭"
"代对象时，你通常不需要调用 :func:`iter` 或者自己处理迭代器对象。``for`` 语句"
"会为你自动处理那些操作，创建一个临时的未命名变量用来在循环期间保存迭代器。参"
"见 :term:`iterator`、:term:`sequence` 以及 :term:`generator`。"

#: ../../glossary.rst:618
msgid "iterator"
msgstr "iterator -- 迭代器"

#: ../../glossary.rst:620
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`__iter__` method that returns the iterator object "
"itself so every iterator is also iterable and may be used in most places "
"where other iterables are accepted.  One notable exception is code which "
"attempts multiple iteration passes.  A container object (such as a :class:"
"`list`) produces a fresh new iterator each time you pass it to the :func:"
"`iter` function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""
"用来表示一连串数据流的对象。重复调用迭代器的 :meth:`~iterator.__next__` 方法"
"（或将其传给内置函数 :func:`next`）将逐个返回流中的项。当没有数据可用时则将引"
"发 :exc:`StopIteration` 异常。到这时迭代器对象中的数据项已耗尽，继续调用其 :"
"meth:`__next__` 方法只会再次引发 :exc:`StopIteration` 异常。迭代器必须具有 :"
"meth:`__iter__` 方法用来返回该迭代器对象自身，因此迭代器必定也是可迭代对象，"
"可被用于其他可迭代对象适用的大部分场合。一个显著的例外是那些会多次重复访问迭"
"代项的代码。容器对象（例如 :class:`list`）在你每次向其传入 :func:`iter` 函数"
"或是在 :keyword:`for` 循环中使用它时都会产生一个新的迭代器。如果在此情况下你"
"尝试用迭代器则会返回在之前迭代过程中被耗尽的同一迭代器对象，使其看起来就像是"
"一个空容器。"

#: ../../glossary.rst:635
msgid "More information can be found in :ref:`typeiter`."
msgstr "更多信息可查看 :ref:`typeiter`。"

#: ../../glossary.rst:636
msgid "key function"
msgstr "key function -- 键函数"

#: ../../glossary.rst:638
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"键函数或称整理函数，是能够返回用于排序或排位的值的可调用对象。例如，:func:"
"`locale.strxfrm` 可用于生成一个符合特定区域排序约定的排序键。"

#: ../../glossary.rst:643
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Python 中有许多工具都允许用键函数来控制元素的排位或分组方式。其中包括 :func:"
"`min`, :func:`max`, :func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :"
"func:`heapq.nsmallest`, :func:`heapq.nlargest` 以及 :func:`itertools."
"groupby`。"

#: ../../glossary.rst:649
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, the :mod:`operator` "
"module provides three key function constructors: :func:`~operator."
"attrgetter`, :func:`~operator.itemgetter`, and :func:`~operator."
"methodcaller`.  See the :ref:`Sorting HOW TO <sortinghowto>` for examples of "
"how to create and use key functions."
msgstr ""
"要创建一个键函数有多种方式。例如，:meth:`str.lower` 方法可以用作忽略大小写排"
"序的键函数。另外，键函数也可通过 :keyword:`lambda` 表达式来创建，例如 "
"``lambda r: (r[0], r[2])``。还有 :mod:`operator` 模块提供了三个键函数构造"
"器：:func:`~operator.attrgetter`、:func:`~operator.itemgetter` 和 :func:"
"`~operator.methodcaller`。请查看 :ref:`如何排序 <sortinghowto>` 一节以获取创"
"建和使用键函数的示例。"

#: ../../glossary.rst:657
msgid "keyword argument"
msgstr "keyword argument -- 关键字参数"

#: ../../glossary.rst:659 ../../glossary.rst:936
msgid "See :term:`argument`."
msgstr "参见 :term:`argument`。"

#: ../../glossary.rst:660
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:662
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"由一个单独 :term:`expression` 构成的匿名内联函数，表达式会在调用时被求值。创"
"建 lambda 函数的句法为 ``lambda [parameters]: expression``"

#: ../../glossary.rst:665
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:667
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"“先查看后跳跃”的英文缩写。这种代码编写风格会在进行调用或查找之前显式地检查前"
"提条件。此风格与 :term:`EAFP` 方式恰成对比，其特点是大量使用 :keyword:`if` 语"
"句。"

#: ../../glossary.rst:672
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"在多线程环境中，LBYL 方式会导致“查看”和“跳跃”之间发生条件竞争风险。例如，以下"
"代码 ``if key in mapping: return mapping[key]`` 可能由于在检查操作之后其他线"
"程从 *mapping* 中移除了 *key* 而出错。这种问题可通过加锁或使用 EAFP 方式来解"
"决。"

#: ../../glossary.rst:677
msgid "list"
msgstr "list"

#: ../../glossary.rst:679
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"O(1)."
msgstr ""
"Python 内置的一种 :term:`sequence`。虽然名为列表，但更类似于其他语言中的数组"
"而非链接列表，因为访问元素的时间复杂度为 O(1)。"

#: ../../glossary.rst:682
msgid "list comprehension"
msgstr "list comprehension -- 列表推导式"

#: ../../glossary.rst:684
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"处理一个序列中的所有或部分元素并返回结果列表的一种紧凑写法。``result = ['{:"
"#04x}'.format(x) for x in range(256) if x % 2 == 0]`` 将生成一个 0 到 255 范"
"围内的十六进制偶数对应字符串（0x..）的列表。其中 :keyword:`if` 子句是可选的，"
"如果省略则 ``range(256)`` 中的所有元素都会被处理。"

#: ../../glossary.rst:690
msgid "loader"
msgstr "loader -- 加载器"

#: ../../glossary.rst:692
msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""
"负责加载模块的对象。它必须定义名为 :meth:`load_module` 的方法。加载器通常由一"
"个 :term:`finder` 返回。详情参见 :pep:`302`，对于 :term:`abstract base "
"class` 可参见 :class:`importlib.abc.Loader`。"

#: ../../glossary.rst:696
msgid "magic method"
msgstr "magic method -- 魔术方法"

#: ../../glossary.rst:700
msgid "An informal synonym for :term:`special method`."
msgstr ":term:`special method` 的非正式同义词 。"

#: ../../glossary.rst:701
msgid "mapping"
msgstr "mapping -- 映射"

#: ../../glossary.rst:703
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.abc.Mapping` or :class:"
"`~collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""
"一种支持任意键查找并实现了 :class:`~collections.abc.Mapping` 或 :class:"
"`~collections.abc.MutableMapping` :ref:`抽象基类 <collections-abstract-base-"
"classes>` 中所规定方法的容器对象。 此类对象的例子包括 :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` 以及 :class:"
"`collections.Counter`。"

#: ../../glossary.rst:709
msgid "meta path finder"
msgstr "meta path finder -- 元路径查找器"

#: ../../glossary.rst:711
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
":data:`sys.meta_path` 的搜索所返回的 :term:`finder`。元路径查找器与 :term:"
"`path entry finders <path entry finder>` 存在关联但并不相同。"

#: ../../glossary.rst:715
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"请查看 :class:`importlib.abc.MetaPathFinder` 了解元路径查找器所实现的方法。"

#: ../../glossary.rst:717
msgid "metaclass"
msgstr "metaclass -- 元类"

#: ../../glossary.rst:719
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"一种用于创建类的类。类定义包含类名、类字典和基类列表。元类负责接受上述三个参"
"数并创建相应的类。大部分面向对象的编程语言都会提供一个默认实现。Python 的特别"
"之处在于可以创建自定义元类。大部分用户永远不需要这个工具，但当需要出现时，元"
"类可提供强大而优雅的解决方案。它们已被用于记录属性访问日志、添加线程安全性、"
"跟踪对象创建、实现单例，以及其他许多任务。"

#: ../../glossary.rst:729
msgid "More information can be found in :ref:`metaclasses`."
msgstr "更多详情参见 :ref:`metaclasses`。"

#: ../../glossary.rst:730
msgid "method"
msgstr "method -- 方法"

#: ../../glossary.rst:732
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"在类内部定义的函数。如果作为该类的实例的一个属性来调用，方法将会获取实例对象"
"作为其第一个 :term:`argument` (通常命名为 ``self``)。参见 :term:`function` "
"和 :term:`nested scope`。"

#: ../../glossary.rst:736
msgid "method resolution order"
msgstr "method resolution order -- 方法解析顺序"

#: ../../glossary.rst:738
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ for details of the algorithm "
"used by the Python interpreter since the 2.3 release."
msgstr ""
"方法解析顺序就是在查找成员时搜索全部基类所用的先后顺序。请查看 `Python 2.3 方"
"法解析顺序 <https://www.python.org/download/releases/2.3/mro/>`_ 了解自 2.3 "
"版起 Python 解析器所用相关算法的详情。"

#: ../../glossary.rst:742
msgid "module"
msgstr "module"

#: ../../glossary.rst:744
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"此对象是 Python 代码的一种组织单位。各模块具有独立的命名空间，可包含任意 "
"Python 对象。模块可通过 :term:`importing` 操作被加载到 Python 中。"

#: ../../glossary.rst:748
msgid "See also :term:`package`."
msgstr "另见 :term:`package`。"

#: ../../glossary.rst:749
msgid "module spec"
msgstr "module spec -- 模块规格"

#: ../../glossary.rst:751
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"一个命名空间，其中包含用于加载模块的相关导入信息。是 :class:`importlib."
"machinery.ModuleSpec` 的实例。"

#: ../../glossary.rst:753
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:755
msgid "See :term:`method resolution order`."
msgstr "参见 :term:`method resolution order`。"

#: ../../glossary.rst:756
msgid "mutable"
msgstr "mutable -- 可变对象"

#: ../../glossary.rst:758
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"可变对象可以在其 :func:`id` 保持固定的情况下改变其取值。另请参见 :term:"
"`immutable`。"

#: ../../glossary.rst:760
msgid "named tuple"
msgstr "named tuple -- 具名元组"

#: ../../glossary.rst:762
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"术语“具名元组”可用于任何继承自元组，并且其中的可索引元素还能使用名称属性来访"
"问的类型或类。 这样的类型或类还可能拥有其他特性。"

#: ../../glossary.rst:766
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"有些内置类型属于具名元组，包括 :func:`time.localtime` 和 :func:`os.stat` 的返"
"回值。 另一个例子是 :data:`sys.float_info`::"

#: ../../glossary.rst:777
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand or it can be created with the factory function :"
"func:`collections.namedtuple`.  The latter technique also adds some extra "
"methods that may not be found in hand-written or built-in named tuples."
msgstr ""
"有些具名元组是内置类型（例如上面的例子）。 此外，具名元组还可通过常规类定义"
"从 :class:`tuple` 继承并定义名称字段的方式来创建。 这样的类可以手工编写，或者"
"使用工厂函数 :func:`collections.namedtuple` 创建。 后一种方式还会添加一些手工"
"编写或内置具名元组所没有的额外方法。"

#: ../../glossary.rst:784
msgid "namespace"
msgstr "namespace -- 命名空间"

#: ../../glossary.rst:786
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"命名空间是存放变量的场所。命名空间有局部、全局和内置的，还有对象中的嵌套命名"
"空间（在方法之内）。命名空间通过防止命名冲突来支持模块化。例如，函数 :func:"
"`builtins.open <.open>` 与 :func:`os.open` 可通过各自的命名空间来区分。命名空"
"间还通过明确哪个模块实现那个函数来帮助提高可读性和可维护性。例如，:func:"
"`random.seed` 或 :func:`itertools.islice` 这种写法明确了这些函数是由 :mod:"
"`random` 与 :mod:`itertools` 模块分别实现的。"

#: ../../glossary.rst:796
msgid "namespace package"
msgstr "namespace package -- 命名空间包"

#: ../../glossary.rst:798
msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""
":pep:`420` 所引入的一种仅被用作子包的容器的 :term:`package`，命名空间包可以没"
"有实体表示物，其描述方式与 :term:`regular package` 不同，因为它们没有 "
"``__init__.py`` 文件。"

#: ../../glossary.rst:803
msgid "See also :term:`module`."
msgstr "另可参见 :term:`module`。"

#: ../../glossary.rst:804
msgid "nested scope"
msgstr "nested scope -- 嵌套作用域"

#: ../../glossary.rst:806
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"在一个定义范围内引用变量的能力。例如，在另一函数之内定义的函数可以引用前者的"
"变量。请注意嵌套作用域默认只对引用有效而对赋值无效。局部变量的读写都受限于最"
"内层作用域。类似的，全局变量的读写则作用于全局命名空间。通过 :keyword:"
"`nonlocal` 关键字可允许写入外层作用域。"

#: ../../glossary.rst:813
msgid "new-style class"
msgstr "new-style class -- 新式类"

#: ../../glossary.rst:815
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`__getattribute__`, class methods, and static methods."
msgstr ""
"对于目前已被应于所有类对象的类形式的旧称谓。在早先的 Python 版本中，只有新式"
"类能够使用 Python 新增的更灵活特性，例如 :attr:`~object.__slots__`、描述符、"
"特征属性、:meth:`__getattribute__`、类方法和静态方法等。"

#: ../../glossary.rst:819
msgid "object"
msgstr "object -- 对象"

#: ../../glossary.rst:821
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"任何具有状态（属性或值）以及预定义行为（方法）的数据。object 也是任何 :term:"
"`new-style class` 的最顶层基类名。"

#: ../../glossary.rst:824
msgid "package"
msgstr "包"

#: ../../glossary.rst:826
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with an ``__path__`` "
"attribute."
msgstr ""

#: ../../glossary.rst:830
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr "另参见 :term:`regular package` 和 :term:`namespace package`。"

#: ../../glossary.rst:831
msgid "parameter"
msgstr "parameter -- 形参"

#: ../../glossary.rst:833
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
":term:`function` （或方法）定义中的命名实体，它指定函数可以接受的一个 :term:"
"`argument` （或在某些情况下，多个实参）。有五种形参："

#: ../../glossary.rst:837
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`positional-or-keyword`：位置或关键字，指定一个可以作为 :term:`位置参数 "
"<argument>` 传入也可以作为 :term:`关键字参数 <argument>` 传入的实参。这是默认"
"的形参类型，例如下面的 *foo* 和 *bar*::"

#: ../../glossary.rst:846
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`positional-only`：仅限位置，指定一个只能通过位置传入的参数。 仅限位置形"
"参可通过在函数定义的形参列表中它们之后包含一个 ``/`` 字符来定义，例如下面的 "
"*posonly1* 和 *posonly2*::"

#: ../../glossary.rst:855
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`keyword-only`：仅限关键字，指定一个只能通过关键字传入的参数。仅限关键字"
"形参可通过在函数定义的形参列表中包含单个可变位置形参或者在多个可变位置形参之"
"前放一个 ``*`` 来定义，例如下面的 *kw_only1* 和 *kw_only2*::"

#: ../../glossary.rst:863
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-positional`：可变位置，指定可以提供由一个任意数量的位置参数构成的序"
"列（附加在其他形参已接受的位置参数之后）。这种形参可通过在形参名称前加缀 "
"``*`` 来定义，例如下面的 *args*::"

#: ../../glossary.rst:871
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-keyword`：可变关键字，指定可以提供任意数量的关键字参数（附加在其他"
"形参已接受的关键字参数之后）。这种形参可通过在形参名称前加缀 ``**`` 来定义，"
"例如上面的 *kwargs*。"

#: ../../glossary.rst:877
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr "形参可以同时指定可选和必选参数，也可以为某些可选参数指定默认值。"

#: ../../glossary.rst:880
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"另参见 :term:`argument` 术语表条目、:ref:`参数与形参的区别 <faq-argument-vs-"
"parameter>` 中的常见问题、:class:`inspect.Parameter` 类、:ref:`function` 一节"
"以及 :pep:`362`。"

#: ../../glossary.rst:884
msgid "path entry"
msgstr "path entry -- 路径入口"

#: ../../glossary.rst:886
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
":term:`import path` 中的一个单独位置，会被 :term:`path based finder` 用来查找"
"要导入的模块。"

#: ../../glossary.rst:888
msgid "path entry finder"
msgstr "path entry finder -- 路径入口查找器"

#: ../../glossary.rst:890
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"任一可调用对象使用 :data:`sys.path_hooks` (即 :term:`path entry hook`) 返回"
"的 :term:`finder`，此种对象能通过 :term:`path entry` 来定位模块。"

#: ../../glossary.rst:894
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"请参看 :class:`importlib.abc.PathEntryFinder` 以了解路径入口查找器所实现的各"
"个方法。"

#: ../../glossary.rst:896
msgid "path entry hook"
msgstr "path entry hook -- 路径入口钩子"

#: ../../glossary.rst:898
msgid ""
"A callable on the :data:`sys.path_hook` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""
"一种可调用对象，在知道如何查找特定 :term:`path entry` 中的模块的情况下能够使"
"用 :data:`sys.path_hook` 列表返回一个 :term:`path entry finder`。"

#: ../../glossary.rst:901
msgid "path based finder"
msgstr "path based finder -- 基于路径的查找器"

#: ../../glossary.rst:903
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"默认的一种 :term:`元路径查找器 <meta path finder>`，可在一个 :term:`import "
"path` 中查找模块。"

#: ../../glossary.rst:905
msgid "path-like object"
msgstr "path-like object -- 路径类对象"

#: ../../glossary.rst:907
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"代表一个文件系统路径的对象。路径类对象可以是一个表示路径的 :class:`str` 或"
"者 :class:`bytes` 对象，还可以是一个实现了 :class:`os.PathLike` 协议的对象。"
"一个支持 :class:`os.PathLike` 协议的对象可通过调用 :func:`os.fspath` 函数转换"
"为 :class:`str` 或者 :class:`bytes` 类型的文件系统路径；:func:`os.fsdecode` "
"和 :func:`os.fsencode` 可被分别用来确保获得 :class:`str` 或 :class:`bytes` 类"
"型的结果。此对象是由 :pep:`519` 引入的。"

#: ../../glossary.rst:915
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:917
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"“Python 增强提议”的英文缩写。一个 PEP 就是一份设计文档，用来向 Python 社区提"
"供信息，或描述一个 Python 的新增特性及其进度或环境。PEP 应当提供精确的技术规"
"格和所提议特性的原理说明。"

#: ../../glossary.rst:923
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"PEP 应被作为提出主要新特性建议、收集社区对特定问题反馈以及为必须加入 Python "
"的设计决策编写文档的首选机制。PEP 的作者有责任在社区内部建立共识，并应将不同"
"意见也记入文档。"

#: ../../glossary.rst:929
msgid "See :pep:`1`."
msgstr "参见 :pep:`1`。"

#: ../../glossary.rst:930
msgid "portion"
msgstr "portion -- 部分"

#: ../../glossary.rst:932
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"构成一个命名空间包的单个目录内文件集合（也可能存放于一个 zip 文件内），具体定"
"义见 :pep:`420`。"

#: ../../glossary.rst:934
msgid "positional argument"
msgstr "positional argument -- 位置参数"

#: ../../glossary.rst:937
msgid "provisional API"
msgstr "provisional API -- 暂定 API"

#: ../../glossary.rst:939
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"暂定 API 是指被有意排除在标准库的向后兼容性保证之外的应用编程接口。虽然此类接"
"口通常不会再有重大改变，但只要其被标记为暂定，就可能在核心开发者确定有必要的"
"情况下进行向后不兼容的更改（甚至包括移除该接口）。此种更改并不会随意进行 -- "
"仅在 API 被加入之前未考虑到的严重基础性缺陷被发现时才可能会这样做。"

#: ../../glossary.rst:948
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"即便是对暂定 API 来说，向后不兼容的更改也会被视为“最后的解决方案” —— 任何问题"
"被确认时都会尽可能先尝试找到一种向后兼容的解决方案。"

#: ../../glossary.rst:952
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"这种处理过程允许标准库持续不断地演进，不至于被有问题的长期性设计缺陷所困。详"
"情见 :pep:`411`。"

#: ../../glossary.rst:955
msgid "provisional package"
msgstr "provisional package -- 暂定包"

#: ../../glossary.rst:957
msgid "See :term:`provisional API`."
msgstr "参见 :term:`provisional API`。"

#: ../../glossary.rst:958
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:960
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Python 3.x 发布路线的昵称（这个名字在版本 3 的发布还遥遥无期的时候就已出现"
"了）。有时也被缩写为“Py3k”。"

#: ../../glossary.rst:963
msgid "Pythonic"
msgstr "Pythonic"

#: ../../glossary.rst:965
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"指一个思路或一段代码紧密遵循了 Python 语言最常用的风格和理念，而不是使用其他"
"语言中通用的概念来实现代码。例如，Python 的常用风格是使用 :keyword:`for` 语句"
"循环来遍历一个可迭代对象中的所有元素。许多其他语言没有这样的结构，因此不熟悉 "
"Python 的人有时会选择使用一个数字计数器::"

#: ../../glossary.rst:975
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "而相应的更简洁更 Pythonic 的方法是这样的::"

#: ../../glossary.rst:979
msgid "qualified name"
msgstr "qualified name -- 限定名称"

#: ../../glossary.rst:981
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"一个以点号分隔的名称，显示从模块的全局作用域到该模块中定义的某个类、函数或方"
"法的“路径”，相关定义见 :pep:`3155`。对于最高层级的函数和类，限定名称与对象名"
"称一致::"

#: ../../glossary.rst:998
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"当被用于引用模块时，*完整限定名称* 意为标示该模块的以点号分隔的整个路径，其中"
"包含其所有的父包，例如 ``email.mime.text``::"

#: ../../glossary.rst:1005
msgid "reference count"
msgstr "reference count -- 引用计数"

#: ../../glossary.rst:1007
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""
"对特定对象的引用的数量。当一个对象的引用计数降为零时，所分配资源将被释放。引"
"用计数对 Python 代码来说通常是不可见的，但它是 :term:`CPython` 实现的一个关键"
"元素。:mod:`sys` 模块定义了一个 :func:`~sys.getrefcount` 函数，程序员可调用它"
"来返回特定对象的引用计数。"

#: ../../glossary.rst:1013
msgid "regular package"
msgstr "regular package -- 常规包"

#: ../../glossary.rst:1015
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr "传统型的 :term:`package`，例如包含有一个 ``__init__.py`` 文件的目录。"

#: ../../glossary.rst:1018
msgid "See also :term:`namespace package`."
msgstr "另参见 :term:`namespace package`。"

#: ../../glossary.rst:1019
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:1021
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"一种写在类内部的声明，通过预先声明实例属性等对象并移除实例字典来节省内存。虽"
"然这种技巧很流行，但想要用好却并不容易，最好是只保留在少数情况下采用，例如极"
"耗内存的应用程序，并且其中包含大量实例。"

#: ../../glossary.rst:1026
msgid "sequence"
msgstr "sequence"

#: ../../glossary.rst:1028
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:"
"`__len__` method that returns the length of the sequence. Some built-in "
"sequence types are :class:`list`, :class:`str`, :class:`tuple`, and :class:"
"`bytes`. Note that :class:`dict` also supports :meth:`__getitem__` and :meth:"
"`__len__`, but is considered a mapping rather than a sequence because the "
"lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""
"一种 :term:`iterable`，它支持通过 :meth:`__getitem__` 特殊方法来使用整数索引"
"进行高效的元素访问，并定义了一个返回序列长度的 :meth:`__len__` 方法。内置的序"
"列类型有 :class:`list`、:class:`str`、:class:`tuple` 和 :class:`bytes`。注意"
"虽然 :class:`dict` 也支持 :meth:`__getitem__` 和 :meth:`__len__`，但它被认为"
"属于映射而非序列，因为它查找时使用任意的 :term:`immutable` 键而非整数。"

#: ../../glossary.rst:1037
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`__getitem__` and :meth:"
"`__len__`, adding :meth:`count`, :meth:`index`, :meth:`__contains__`, and :"
"meth:`__reversed__`. Types that implement this expanded interface can be "
"registered explicitly using :func:`~abc.ABCMeta.register`."
msgstr ""
":class:`collections.abc.Sequence` 抽象基类定义了一个更丰富的接口，它在 :meth:"
"`__getitem__` 和 :meth:`__len__` 之外又添加了 :meth:`count`, :meth:`index`, :"
"meth:`__contains__` 和 :meth:`__reversed__`。 实现此扩展接口的类型可以使用 :"
"func:`~abc.ABCMeta.register` 来显式地注册。"

#: ../../glossary.rst:1044
msgid "set comprehension"
msgstr "set comprehension -- 集合推导式"

#: ../../glossary.rst:1046
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"处理一个可迭代对象中的所有或部分元素并返回结果集合的一种紧凑写法。 ``results "
"= {c for c in 'abracadabra' if c not in 'abc'}`` 将生成字符串集合 ``{'r', "
"'d'}``。 参见 :ref:`comprehensions`。"

#: ../../glossary.rst:1050
msgid "single dispatch"
msgstr "single dispatch -- 单分派"

#: ../../glossary.rst:1052
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"一种 :term:`generic function` 分派形式，其实现是基于单个参数的类型来选择的。"

#: ../../glossary.rst:1054
msgid "slice"
msgstr "slice -- 切片"

#: ../../glossary.rst:1056
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"通常只包含了特定 :term:`sequence` 的一部分的对象。切片是通过使用下标标记来创"
"建的，在 ``[]`` 中给出几个以冒号分隔的数字，例如 ``variable_name[1:3:5]``。方"
"括号（下标）标记在内部使用 :class:`slice` 对象。"

#: ../../glossary.rst:1060
msgid "special method"
msgstr "special method -- 特殊方法"

#: ../../glossary.rst:1064
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"一种由 Python 隐式调用的方法，用来对某个类型执行特定操作例如相加等等。这种方"
"法的名称的首尾都为双下划线。特殊方法的文档参见 :ref:`specialnames`。"

#: ../../glossary.rst:1068
msgid "statement"
msgstr "statement -- 语句"

#: ../../glossary.rst:1070
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"语句是程序段（一个代码“块”）的组成单位。一条语句可以是一个 :term:"
"`expression` 或某个带有关键字的结构，例如 :keyword:`if`、:keyword:`while` "
"或 :keyword:`for`。"

#: ../../glossary.rst:1073
msgid "text encoding"
msgstr "text encoding -- 文本编码格式"

#: ../../glossary.rst:1075
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"在Python中，一个字符串是一串 Unicode 代码点（范围为 ``U+0000``--"
"``U+10FFFF``）。 为了存储或传输一个字符串，它需要被序列化为一串字节。"

#: ../../glossary.rst:1079
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"将一个字符串序列化为一个字节序列被称为“编码”，而从字节序列中重新创建字符串被"
"称为“解码”。"

#: ../../glossary.rst:1082
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"有各种不同的文本序列化 :ref:`编码器 <standard-encodings>` ，它们被统称为 \"文"
"本编码格式\"。"

#: ../../glossary.rst:1085
msgid "text file"
msgstr "text file -- 文本文件"

#: ../../glossary.rst:1087
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"一种能够读写 :class:`str` 对象的 :term:`file object`。通常一个文本文件实际是"
"访问一个面向字节的数据流并自动处理 :term:`text encoding`。文本文件的例子包括"
"以文本模式（``'r'`` 或 ``'w'``）打开的文件、:data:`sys.stdin`、:data:`sys."
"stdout` 以及 :class:`io.StringIO` 的实例。"

#: ../../glossary.rst:1094
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"另请参看 :term:`binary file` 了解能够读写 :term:`字节型对象 <bytes-like "
"object>` 的文件对象。"

#: ../../glossary.rst:1096
msgid "triple-quoted string"
msgstr "triple-quoted string -- 三引号字符串"

#: ../../glossary.rst:1098
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"首尾各带三个连续双引号（\"）或者单引号（'）的字符串。它们在功能上与首尾各用一"
"个引号标注的字符串没有什么不同，但是有多种用处。它们允许你在字符串内包含未经"
"转义的单引号和双引号，并且可以跨越多行而无需使用连接符，在编写文档字符串时特"
"别好用。"

#: ../../glossary.rst:1105
msgid "type"
msgstr "type"

#: ../../glossary.rst:1107
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""
"类型决定一个 Python 对象属于什么种类；每个对象都具有一种类型。要知道对象的类"
"型，可以访问它的 :attr:`~instance.__class__` 属性，或是通过 ``type(obj)`` 来"
"获取。"

#: ../../glossary.rst:1111
msgid "type alias"
msgstr "type alias -- 类型别名"

#: ../../glossary.rst:1113
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr "一个类型的同义词，创建方式是把类型赋值给特定的标识符。"

#: ../../glossary.rst:1115
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr "类型别名的作用是简化 :term:`类型注解 <type hint>`。例如::"

#: ../../glossary.rst:1122
msgid "could be made more readable like this::"
msgstr "可以这样提高可读性::"

#: ../../glossary.rst:1129 ../../glossary.rst:1143
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "参见 :mod:`typing` 和 :pep:`484`，其中有对此功能的详细描述。"

#: ../../glossary.rst:1130
msgid "type hint"
msgstr "type hint -- 类型注解"

#: ../../glossary.rst:1132
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ":term:`annotation` 为变量、类属性、函数的形参或返回值指定预期的类型。"

#: ../../glossary.rst:1135
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to static type analysis tools, and aid IDEs with code completion and "
"refactoring."
msgstr ""
"类型注解属于可选项，Python 不要求提供，但其可对静态类型分析工具起作用，并可协"
"助 IDE 实现代码补全与重构。"

#: ../../glossary.rst:1139
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"全局变量、类属性和函数的类型注解可以使用 :func:`typing.get_type_hints` 来访"
"问，但局部变量则不可以。"

#: ../../glossary.rst:1144
msgid "universal newlines"
msgstr "universal newlines -- 通用换行"

#: ../../glossary.rst:1146
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"一种解读文本流的方式，将以下所有符号都识别为行结束标志：Unix 的行结束约定 "
"``'\\n'``、Windows 的约定 ``'\\r\\n'`` 以及旧版 Macintosh 的约定 ``'\\r'``。"
"参见 :pep:`278` 和 :pep:`3116` 和 :func:`bytes.splitlines` 了解更多用法说明。"

#: ../../glossary.rst:1151
msgid "variable annotation"
msgstr "variable annotation -- 变量标注"

#: ../../glossary.rst:1153
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "对变量或类属性的 :term:`annotation`。"

#: ../../glossary.rst:1155
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr "在标注变量或类属性时，还可选择为其赋值::"

#: ../../glossary.rst:1160
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"变量标注通常被用作 :term:`类型提示 <type hint>`：例如以下变量预期接受 :class:"
"`int` 类型的值::"

#: ../../glossary.rst:1166
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr "变量标注语法的详细解释见 :ref:`annassign` 一节。"

#: ../../glossary.rst:1168
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality."
msgstr ""

#: ../../glossary.rst:1170
msgid "virtual environment"
msgstr "virtual environment -- 虚拟环境"

#: ../../glossary.rst:1172
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"一种采用协作式隔离的运行时环境，允许 Python 用户和应用程序在安装和升级 "
"Python 分发包时不会干扰到同一系统上运行的其他 Python 应用程序的行为。"

#: ../../glossary.rst:1177
msgid "See also :mod:`venv`."
msgstr "另参见 :mod:`venv`。"

#: ../../glossary.rst:1178
msgid "virtual machine"
msgstr "virtual machine -- 虚拟机"

#: ../../glossary.rst:1180
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"一台完全通过软件定义的计算机。Python 虚拟机可执行字节码编译器所生成的 :term:"
"`bytecode`。"

#: ../../glossary.rst:1182
msgid "Zen of Python"
msgstr "Zen of Python -- Python 之禅"

#: ../../glossary.rst:1184
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"列出 Python 设计的原则与哲学，有助于理解与使用这种语言。查看其具体内容可在交"
"互模式提示符中输入 \"``import this``\"。"
