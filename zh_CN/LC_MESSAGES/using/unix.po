# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-22 21:56+0000\n"
"PO-Revision-Date: 2025-09-22 17:56+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "在类Unix环境下使用Python"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "获得并安装Python的最新版本"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "在Linux中"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can easily compile "
"the latest version of Python from source."
msgstr ""
"Python预装在大多数Linux发行版上，并作为一个包提供给所有其他用户。 但是，您可"
"能想要使用的某些功能在发行版提供的软件包中不可用。这时您可以从源代码轻松编译"
"最新版本的Python。"

#: ../../using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""
"如果Python没有预先安装并且不在发行版提供的库中，您可以轻松地为自己使用的发行"
"版创建包。 参阅以下链接："

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "对于Debian用户"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "对于OpenSuse用户"

#: ../../using/unix.rst:33
msgid ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"
msgstr ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "对于Fedora用户"

#: ../../using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr "http://www.slackbook.org/html/package-management-making-packages.html"

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "对于Slackware用户"

#: ../../using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr "在FreeBSD和OpenBSD上"

#: ../../using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr "FreeBSD用户，使用以下命令添加包::"

#: ../../using/unix.rst:46
msgid "OpenBSD users, to add the package use::"
msgstr "OpenBSD用户，使用以下命令添加包::"

#: ../../using/unix.rst:52
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr "例如：i386用户获取Python 2.5.1的可用版本::"

#: ../../using/unix.rst:58
msgid "On OpenSolaris"
msgstr "在OpenSolaris系统上"

#: ../../using/unix.rst:60
msgid ""
"You can get Python from `OpenCSW <https://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil -i "
"python27``."
msgstr ""
"你可以从 `OpenCSW <https://www.opencsw.org/>`_ 获取、安装及使用各种版本的"
"Python。比如 ``pkgutil -i python27`` 。"

#: ../../using/unix.rst:67
msgid "Building Python"
msgstr "构建Python"

#: ../../using/unix.rst:69
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://"
"devguide.python.org/setup/#getting-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

#: ../../using/unix.rst:75
msgid "The build process consists of the usual commands::"
msgstr "构建过程由常用命令组成："

#: ../../using/unix.rst:81
msgid ""
"Configuration options and caveats for specific Unix platforms are "
"extensively documented in the :source:`README.rst` file in the root of the "
"Python source tree."
msgstr ""

#: ../../using/unix.rst:87
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install`` 可以覆盖或伪装 :file:`python3` 二进制文件。因此，建议使用 "
"``make altinstall`` 而不是 ``make install`` ，因为后者只安装了 :file:"
"`{exec_prefix}/bin/python{version}` 。"

#: ../../using/unix.rst:93
msgid "Python-related paths and files"
msgstr "与Python相关的路径和文件"

#: ../../using/unix.rst:95
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` "
"(``${exec_prefix}``) are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""

#: ../../using/unix.rst:100
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr "例如，在大多数Linux系统上，两者的默认值是 :file:`/usr` 。"

#: ../../using/unix.rst:103
msgid "File/directory"
msgstr "文件/目录"

#: ../../using/unix.rst:103
msgid "Meaning"
msgstr "含意"

#: ../../using/unix.rst:105
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:105
msgid "Recommended location of the interpreter."
msgstr "解释器的推荐位置"

#: ../../using/unix.rst:107
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"

#: ../../using/unix.rst:107
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr "包含标准模块的目录的推荐位置"

#: ../../using/unix.rst:110
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"

#: ../../using/unix.rst:110
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr "包含开发Python扩展和嵌入解释器所需的include文件的目录的推荐位置"

#: ../../using/unix.rst:118
msgid "Miscellaneous"
msgstr "杂项"

#: ../../using/unix.rst:120
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with"
msgstr "要在Unix上使用Python脚本，需要添加可执行权限，例如："

#: ../../using/unix.rst:127
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr "并在脚本的顶部放置一个合适的Shebang线。一个很好的选择通常是::"

#: ../../using/unix.rst:132
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"将在整个 :envvar:`PATH` 中搜索Python解释器。但是，某些Unix系统可能没有 :"
"program:`env` 命令，因此可能需要将 ``/usr/bin/python3`` 硬编码为解释器路径。"

#: ../../using/unix.rst:136
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr "要在Python脚本中使用shell命令，请查看 :mod:`subprocess` 模块。"
