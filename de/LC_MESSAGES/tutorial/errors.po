# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: German (https://app.transifex.com/python-doc/teams/5390/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Fehler und Ausnahmen"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Bis jetzt wurden Fehlermeldungen nur erwähnt, aber wenn Sie die Beispiele "
"ausprobiert haben, haben Sie wahrscheinlich einige gesehen. Es gibt "
"(mindestens) zwei Arten von Fehlern, die man unterscheiden kann: "
"*Syntaxfehler* und *Ausnahmen*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Syntax Fehler"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Syntaxfehler, auch bekannt als Parsing-Fehler, sind vielleicht die häufigste "
"Art von Beschwerden, die man bekommt, wenn man Python noch lernt::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays little 'arrow's pointing "
"at the token in the line where the error was detected.  The error may be "
"caused by the absence of a token *before* the indicated token.  In the "
"example, the error is detected at the function :func:`print`, since a colon "
"(``':'``) is missing before it.  File name and line number are printed so "
"you know where to look in case the input came from a script."
msgstr ""

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Ausnahmen"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Auch wenn eine Anweisung oder ein Ausdruck syntaktisch korrekt ist, kann es "
"zu einem Fehler kommen, wenn man versucht, sie auszuführen. Fehler, die "
"während der Ausführung entdeckt werden, werden *Ausnahmen* genannt und sind "
"nicht unbedingt fatal: Sie werden bald lernen, wie man sie in Python-"
"Programmen behandelt. Die meisten Ausnahmen werden jedoch nicht von "
"Programmen behandelt und führen zu Fehlermeldungen wie hier gezeigt::"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"In der letzten Zeile der Fehlermeldung steht, was passiert ist. Ausnahmen "
"gibt es in verschiedenen Typen, und der Typ wird als Teil der Meldung "
"ausgegeben: Die Typen im Beispiel sind :exc:`ZeroDivisionError`, :exc:"
"`NameError` und :exc:`TypeError`. Die als Ausnahmetyp ausgegebene "
"Zeichenkette ist der Name der aufgetretenen eingebauten Ausnahme. Dies gilt "
"für alle eingebauten Ausnahmen, muss aber nicht für benutzerdefinierte "
"Ausnahmen gelten (obwohl es eine nützliche Konvention ist). "
"Standardausnahmenamen sind eingebaute Bezeichner (keine reservierten "
"Schlüsselwörter)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"Der Rest der Zeile enthält detaillierte Informationen über die Art der "
"Ausnahme und deren Ursache."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"Der vorangehende Teil der Fehlermeldung zeigt den Kontext, in dem die "
"Ausnahme aufgetreten ist, in Form eines Stack-Tracebacks. Im Allgemeinen "
"enthält er einen Stack-Traceback, der die Zeilen des Quellcodes auflistet; "
"er zeigt jedoch keine Zeilen an, die von der Standardeingabe gelesen wurden."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` listet die eingebauten Ausnahmen und ihre "
"Bedeutungen auf."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Behandlung von Ausnahmen"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"Es ist möglich, Programme zu schreiben, die ausgewählte Ausnahmen behandeln. "
"Schauen Sie sich das folgende Beispiel an, das den Benutzer zur Eingabe "
"auffordert, bis ein gültiger Integer eingegeben wurde, dem Benutzer aber "
"erlaubt, das Programm zu unterbrechen (mit :kbd:`Control-C` oder was auch "
"immer das Betriebssystem unterstützt); beachten Sie, dass eine vom Benutzer "
"erzeugte Unterbrechung durch das Auslösen der Ausnahme :exc:"
"`KeyboardInterrupt` signalisiert wird. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "Die :keyword:`try` Anweisung funktioniert wie folgt."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Zuerst wird die *Try-Klausel* (Die Anweisung(en) zwischen den "
"Schlüsselwörtern :keyword:`try` und :keyword:`except`) ausgeführt."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Wenn keine Ausnahme auftritt, wird die *except-Klausel übersprungen und die "
"Ausführung von der :keyword:`try` Anweisung beendet."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"Wenn während der Ausführung der :keyword:`try` Klausel eine Ausnahme "
"auftritt, wird der Rest der Klausel übersprungen. Wenn der Typ der Ausnahme "
"mit der nach dem :keyword:`except` Schlüsselwort genannten Ausnahme "
"übereinstimmt, wird die *Except-Klausel* ausgeführt, und die Ausführung wird "
"nach dem try/except-Block fortgesetzt."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with an "
"error message."
msgstr ""
"Tritt eine Ausnahme auf, die nicht mit der in der *Except-Klausel* genannten "
"Ausnahme übereinstimmt, wird sie an äußere :keyword:`try` Anweisungen "
"weitergegeben; wird kein Handler gefunden, handelt es sich um eine "
"*unbehandelte Ausnahme* und die Ausführung wird mit einer Fehlermeldung "
"beendet."

#: ../../tutorial/errors.rst:113
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"Eine :keyword:`try` Anweisung kann mehr als eine *Except-Klausel* enthalten, "
"um Handler für verschiedene Ausnahmen anzugeben. Es wird höchstens ein "
"Handler ausgeführt. Handler behandeln nur Ausnahmen, die in der "
"entsprechenden *Try-Klausel* vorkommen, nicht in anderen Handlern derselben :"
"keyword:`!try` Anweisung. Eine *Except-Klausel* kann mehrere Ausnahmen als "
"eingeklammerter Tupel benennen, zum Beispiel::"

#: ../../tutorial/errors.rst:122
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""
"Eine Klasse in einer :keyword:`except` Klausel ist mit einer Ausnahme "
"kompatibel, wenn sie dieselbe Klasse oder eine Basisklasse davon ist (aber "
"nicht umgekehrt --- eine *Except-Klausel*, die eine abgeleitete Klasse "
"aufführt, ist nicht mit einer Basisklasse kompatibel). Zum Beispiel wird der "
"folgende Code B, C, D in dieser Reihenfolge ausgeben::"

#: ../../tutorial/errors.rst:146
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"Beachten Sie, dass, wenn die *Exception-Klauseln* umgekehrt wären (mit "
"``except B`` zuerst), B, B, B ausgegeben worden wäre --- die erste passende "
"*Exception-Klausel* wird ausgelöst."

#: ../../tutorial/errors.rst:149
msgid ""
"When an exception occurs, it may have associated values, also known as the "
"exception's *arguments*. The presence and types of the arguments depend on "
"the exception type."
msgstr ""
"Wenn eine Ausnahme auftritt, kann sie mit Werten verbunden sein, die auch "
"als *Argumente* der Ausnahme bezeichnet werden. Das Vorhandensein und die "
"Art der Argumente hängen von der Art der Ausnahme ab."

#: ../../tutorial/errors.rst:153
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to the exception instance which typically has an ``args`` "
"attribute that stores the arguments. For convenience, builtin exception "
"types define :meth:`~object.__str__` to print all the arguments without "
"explicitly accessing ``.args``.  ::"
msgstr ""
"In der *Except-Klausel* kann nach dem Namen der Ausnahme eine Variable "
"angegeben werden. Die Variable ist an die Ausnahmen-Instanz gebunden, die "
"typischerweise ein ``args`` Attribut hat, das die Argumente speichert. Der "
"Einfachheit halber definieren eingebaute Ausnahmetypen :meth:`~object."
"__str__`, um alle Argumente auszugeben, ohne explizit auf ``.args`` "
"zuzugreifen. ::"

#: ../../tutorial/errors.rst:176
msgid ""
"The exception's :meth:`~object.__str__` output is printed as the last part "
"('detail') of the message for unhandled exceptions."
msgstr ""
"Bei unbehandelten Ausnahmen wird die :meth:`~object.__str__` Ausgabe der "
"Ausnahme als letzter Teil (\"Detail\") der Meldung ausgegeben."

#: ../../tutorial/errors.rst:179
msgid ""
":exc:`BaseException` is the common base class of all exceptions. One of its "
"subclasses, :exc:`Exception`, is the base class of all the non-fatal "
"exceptions. Exceptions which are not subclasses of :exc:`Exception` are not "
"typically handled, because they are used to indicate that the program should "
"terminate. They include :exc:`SystemExit` which is raised by :meth:`sys."
"exit` and :exc:`KeyboardInterrupt` which is raised when a user wishes to "
"interrupt the program."
msgstr ""
":exc:`BaseException` ist die gemeinsame Basisklasse für alle Ausnahmen. Eine "
"ihrer Unterklassen, :exc:`Exception`, ist die Basisklasse für alle nicht "
"schwerwiegenden Ausnahmen. Ausnahmen, die keine Unterklassen von :exc:"
"`Exception` sind, werden in der Regel nicht behandelt, da sie dazu dienen, "
"anzuzeigen, dass das Programm beendet werden soll. Dazu gehört die :exc:"
"`SystemExit`Ausnahme, die von :meth:`sys.exit` und :exc:`KeyboardInterrupt` "
"ausgelöst wird, wenn ein Benutzer das Programm unterbrechen möchte."

#: ../../tutorial/errors.rst:187
msgid ""
":exc:`Exception` can be used as a wildcard that catches (almost) everything. "
"However, it is good practice to be as specific as possible with the types of "
"exceptions that we intend to handle, and to allow any unexpected exceptions "
"to propagate on."
msgstr ""
":exc:`Exception` kann als Platzhalter verwendet werden, der (fast) alles "
"abfängt. Es empfiehlt sich jedoch, die Arten von Ausnahmen, die behandelt "
"werden sollen, so genau wie möglich festzulegen und zuzulassen, dass "
"unerwartete Ausnahmen weitergegeben werden."

#: ../../tutorial/errors.rst:192
msgid ""
"The most common pattern for handling :exc:`Exception` is to print or log the "
"exception and then re-raise it (allowing a caller to handle the exception as "
"well)::"
msgstr ""
"Das gängigste Muster für die :exc:`Exception` Behandlung ist, die Ausnahme "
"auszugeben oder zu protokollieren und sie dann erneut auszulösen (damit ein "
"Aufrufer die Ausnahme ebenfalls behandeln kann)::"

#: ../../tutorial/errors.rst:210
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"Die :keyword:`try` ... :keyword:`except` Anweisung hat eine optionale *Else-"
"Klausel*, die, wenn vorhanden, allen *Except-Klauseln* folgen muss. Sie ist "
"nützlich für Code, der ausgeführt werden muss, wenn die *Try-Klausel* keine "
"Ausnahme auslöst. Zum Beispiel::"

#: ../../tutorial/errors.rst:224
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"Die Verwendung der :keyword:`!else` Klausel ist besser als das Hinzufügen "
"von zusätzlichem Code zu der :keyword:`try` Klausel, weil dadurch vermieden "
"wird, dass versehentlich eine Ausnahme abgefangen wird, die nicht durch den "
"Code ausgelöst wurde, der durch die :keyword:`!try` ... :keyword:`!except` "
"Anweisung geschützt wird."

#: ../../tutorial/errors.rst:229
msgid ""
"Exception handlers do not handle only exceptions that occur immediately in "
"the *try clause*, but also those that occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""
"Ausnahmehandler behandeln nicht nur Ausnahmen, die unmittelbar in der *Try-"
"Klausel* auftreten, sondern auch solche, die innerhalb von Funktionen "
"auftreten, die (auch indirekt) in der *Try-Klausel* aufgerufen werden. Zum "
"Beispiel::"

#: ../../tutorial/errors.rst:247
msgid "Raising Exceptions"
msgstr "Auslösen von Ausnahmen"

#: ../../tutorial/errors.rst:249
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"Die :keyword:`raise` Anweisung ermöglicht es dem Programmierer, das "
"Auftreten einer bestimmten Ausnahme zu erzwingen. Zum Beispiel::"

#: ../../tutorial/errors.rst:257
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`BaseException`, such as :exc:`Exception` or one of "
"its subclasses).  If an exception class is passed, it will be implicitly "
"instantiated by calling its constructor with no arguments::"
msgstr ""
"Das reine :keyword:`raise` Argument gibt die Ausnahme an, die ausgelöst "
"werden soll. Dabei muss es sich entweder um eine Ausnahme-Instanz oder eine "
"Ausnahmen-Klasse handeln (Eine Klasse, die von einer :class:`BaseException`, "
"wie :exc:`Exception` oder einer ihrer Unterklassen abgeleitet ist). Wenn "
"eine Ausnahmeklasse übergeben wird, wird sie implizit instanziiert, indem "
"ihr Konstruktor ohne Argumente aufgerufen wird::"

#: ../../tutorial/errors.rst:265
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Wenn Sie feststellen müssen, ob eine Ausnahme ausgelöst wurde, aber nicht "
"beabsichtigen, sie zu behandeln, können Sie mit einer einfacheren Form der :"
"keyword:`raise` Anweisung die Ausnahme erneut auslösen::"

#: ../../tutorial/errors.rst:284
msgid "Exception Chaining"
msgstr "Verkettung von Ausnah"

#: ../../tutorial/errors.rst:286
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""
"Tritt eine unbehandelte Ausnahme innerhalb eines :keyword:`except` "
"Abschnitts auf, wird die behandelte Ausnahme an diesen Abschnitt angehängt "
"und in die Fehlermeldung aufgenommen::"

#: ../../tutorial/errors.rst:305
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""
"Um anzuzeigen, dass eine Ausnahme eine direkte Folge einer anderen ist, "
"erlaubt die :keyword:`raise` Anweisung eine optionale :keyword:`from<raise>` "
"Klausel::"

#: ../../tutorial/errors.rst:311
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr ""
"Dies kann nützlich sein, wenn Sie Ausnahmen umwandeln wollen. Zum Beispiel::"

#: ../../tutorial/errors.rst:332
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""
"Es erlaubt auch die Deaktivierung der automatischen Ausnahmeverkettung mit "
"dem ``from None`` Idiom::"

#: ../../tutorial/errors.rst:344
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"eitere Informationen zur Verkettungsmechanik finden Sie unter :ref:`bltin-"
"exceptions`."

#: ../../tutorial/errors.rst:350
msgid "User-defined Exceptions"
msgstr "Benutzerdefinierte Ausnahmen"

#: ../../tutorial/errors.rst:352
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Programme können ihre eigenen Ausnahmen benennen, indem sie eine neue "
"Ausnahmeklasse erstellen (siehe :ref:`tut-classes` für mehr über Python-"
"Klassen). Ausnahmen sollten in der Regel von der :exc:`Exception` Klasse "
"abgeleitet werden, entweder direkt oder indirekt."

#: ../../tutorial/errors.rst:356
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"Es können Ausnahmeklassen definiert werden, die alles tun können, was jede "
"andere Klasse auch tun kann, aber sie sind in der Regel einfach gehalten und "
"bieten oft nur eine Reihe von Attributen, die es ermöglichen, Informationen "
"über den Fehler durch Handler für die Ausnahme zu extrahieren."

#: ../../tutorial/errors.rst:360
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"Die meisten Ausnahmen werden mit Namen definiert, die auf \"Error\" enden, "
"ähnlich der Benennung der Standardausnahmen."

#: ../../tutorial/errors.rst:363
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define."
msgstr ""
"Viele Standardmodule definieren ihre eigenen Ausnahmen, um Fehler zu melden, "
"die in den von ihnen definierten Funktionen auftreten können."

#: ../../tutorial/errors.rst:370
msgid "Defining Clean-up Actions"
msgstr "Definition von Bereinigungsaktionen"

#: ../../tutorial/errors.rst:372
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"Die :keyword:`try` Anweisung enthält eine weitere optionale Klausel, die "
"dazu dient, Bereinigungsaktionen zu definieren, die unter allen Umständen "
"ausgeführt werden müssen. Zum Beispiel::"

#: ../../tutorial/errors.rst:386
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"Wenn eine :keyword:`finally` Klausel vorhanden ist, wird die :keyword:`!"
"finally` Klausel als letzte Aufgabe ausgeführt, bevor die :keyword:`try` "
"Anweisung abgeschlossen wird. Die :keyword:`!finally` Klausel wird "
"unabhängig davon ausgeführt, ob die :keyword:`!try` Anweisung eine Ausnahme "
"erzeugt oder nicht. In den folgenden Punkten werden komplexere Fälle beim "
"Auftreten einer Ausnahme behandelt:"

#: ../../tutorial/errors.rst:392
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"Wenn während der Ausführung der :keyword:`!try` Klausel eine Ausnahme "
"auftritt, kann die Ausnahme von einer :keyword:`except` Klausel behandelt "
"werden. Wenn die Ausnahme nicht durch eine :keyword:`!except` Klausel "
"behandelt wird, wird die Ausnahme erneut ausgelöst, nachdem die :keyword:`!"
"finally` Klausel ausgeführt wurde."

#: ../../tutorial/errors.rst:398
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"Während der Ausführung einer :keyword:`!except` oder :keyword:`!else` "
"Klausel kann eine Ausnahme auftreten. Auch hier wird die Ausnahme erneut "
"ausgelöst, nachdem die :keyword:`!finally` Klausel ausgeführt wurde."

#: ../../tutorial/errors.rst:402
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""
"Wenn die :keyword:`!finally` Klausel eine :keyword:`break`, :keyword:"
"`continue` oder :keyword:`return` Anweisung ausführt, werden Ausnahmen nicht "
"erneut ausgelöst."

#: ../../tutorial/errors.rst:406
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"Wenn die :keyword:`!try` Anweisung eine :keyword:`break`, :keyword:"
"`continue` oder :keyword:`return` Anweisung erreicht, wird die :keyword:`!"
"finally` Klausel direkt vor der Ausführung der :keyword:`!break`, :keyword:`!"
"continue` oder :keyword:`!return`Anweisung ausgeführt."

#: ../../tutorial/errors.rst:412
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""
"Wenn eine :keyword:`!finally` Klausel eine :keyword:`!return` Anweisung "
"enthält, ist der zurückgegebene Wert, der Wert aus der :keyword:`!finally` "
"Anweisung der :keyword:`!return` Klausel und nicht der Wert aus der :keyword:"
"`!try` Anweisung der :keyword:`!return` Klausel."

#: ../../tutorial/errors.rst:418
msgid "For example::"
msgstr "Zum Beispiel::"

#: ../../tutorial/errors.rst:429
msgid "A more complicated example::"
msgstr "Ein komplizierteres Beispiel::"

#: ../../tutorial/errors.rst:454
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Wie du sehen kannst, wird die :keyword:`finally` Klausel in jedem Fall "
"ausgeführt. Der :exc:`TypeError`, ausgelöst durch die Teilung zweier "
"Zeichenfolgenn wird von der :keyword:`except` Klausel nicht verarbeitet und "
"daher nach Ausführung der :keyword:`!finally` Klausel erneut ausgelöst."

#: ../../tutorial/errors.rst:459
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"In realen Anwendungen ist die :keyword:`finally` Klausel nützlich, um "
"externe Ressourcen (z. B. Dateien oder Netzwerkverbindungen) freizugeben, "
"unabhängig davon, ob die Nutzung der Ressource erfolgreich war."

#: ../../tutorial/errors.rst:467
msgid "Predefined Clean-up Actions"
msgstr "Vordefinierte Bereinigungsaktionen"

#: ../../tutorial/errors.rst:469
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Einige Objekte definieren Standardbereinigungsaktionen, die durchgeführt "
"werden, wenn das Objekt nicht mehr benötigt wird, unabhängig davon, ob der "
"Vorgang mit dem Objekt erfolgreich war oder fehlgeschlagen ist. Schauen Sie "
"sich das folgende Beispiel an, in dem versucht wird, eine Datei zu öffnen "
"und ihren Inhalt auf dem Bildschirm auszugeben. ::"

#: ../../tutorial/errors.rst:477
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"Das Problem bei diesem Code besteht darin, dass die Datei für eine "
"unbestimmte Zeit geöffnet bleibt, nachdem die Ausführung dieses Teils des "
"Codes abgeschlossen ist. Dies ist bei einfachen Skripten kein Problem, kann "
"jedoch bei größeren Anwendungen ein Problem darstellen. Die :keyword:`with` "
"Anweisung ermöglicht die Verwendung von Objekten wie Dateien auf eine Weise, "
"die sicherstellt, dass sie stets zeitnah und korrekt bereinigt werden. ::"

#: ../../tutorial/errors.rst:487
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Nach Ausführung der Anweisung wird die Datei *f* immer geschlossen, auch "
"wenn bei der Verarbeitung der Zeilen ein Problem aufgetreten ist. Objekte, "
"die wie Dateien vordefinierte Bereinigungsaktionen bereitstellen, weisen in "
"ihrer Dokumentation darauf hin."

#: ../../tutorial/errors.rst:495
msgid "Raising and Handling Multiple Unrelated Exceptions"
msgstr "Auslösen und Behandeln mehrerer unzusammenhängender Ausnahmen"

#: ../../tutorial/errors.rst:497
msgid ""
"There are situations where it is necessary to report several exceptions that "
"have occurred. This is often the case in concurrency frameworks, when "
"several tasks may have failed in parallel, but there are also other use "
"cases where it is desirable to continue execution and collect multiple "
"errors rather than raise the first exception."
msgstr ""
"Es gibt Situationen, in denen es notwendig ist, mehrere aufgetretene "
"Ausnahmen zu melden. Dies ist häufig in Parallelitäts-Frameworks der Fall, "
"wenn möglicherweise mehrere Aufgaben parallel fehlgeschlagen sind. Es gibt "
"jedoch auch andere Anwendungsfälle, in denen es wünschenswert ist, die "
"Ausführung fortzusetzen und mehrere Fehler zu sammeln, anstatt die erste "
"Ausnahme auszulösen."

#: ../../tutorial/errors.rst:503
msgid ""
"The builtin :exc:`ExceptionGroup` wraps a list of exception instances so "
"that they can be raised together. It is an exception itself, so it can be "
"caught like any other exception. ::"
msgstr ""
"Die integrierte :exc:`ExceptionGroup` Funktion umschließt eine Liste von "
"Ausnahmeinstanzen, sodass diese gemeinsam ausgelöst werden können. Da es "
"sich selbst um eine Ausnahme handelt, kann sie wie jede andere Ausnahme "
"abgefangen werden. ::"

#: ../../tutorial/errors.rst:529
msgid ""
"By using ``except*`` instead of ``except``, we can selectively handle only "
"the exceptions in the group that match a certain type. In the following "
"example, which shows a nested exception group, each ``except*`` clause "
"extracts from the group exceptions of a certain type while letting all other "
"exceptions propagate to other clauses and eventually to be reraised. ::"
msgstr ""
"Durch das Nutzen von ``except*`` anstelle von ``except``, können wir "
"selektiv nur die Ausnahmen in der Gruppe behandeln, die einen bestimmten Typ "
"entsprechen. Im folgenden Beispiel, das eine verschachtelte Ausnahmegruppe "
"zeigt, extrahiert jede ``except*`` Klausel Ausnahmen eines bestimmten Typs "
"aus der Gruppe, während alle anderen Ausnahmen an andere Klauseln "
"weitergegeben und schließlich erneut ausgelöst werden. ::"

#: ../../tutorial/errors.rst:572
msgid ""
"Note that the exceptions nested in an exception group must be instances, not "
"types. This is because in practice the exceptions would typically be ones "
"that have already been raised and caught by the program, along the following "
"pattern::"
msgstr ""
"Beachten Sie, dass die in einer Ausnahmegruppe verschachtelten Ausnahmen "
"Instanzen und keine Typen sein müssen. Dies liegt daran, dass es sich in der "
"Praxis typischerweise um Ausnahmen handelt, die bereits vom Programm "
"ausgelöst und abgefangen wurden, und zwar nach dem folgenden Muster:"

#: ../../tutorial/errors.rst:592
msgid "Enriching Exceptions with Notes"
msgstr "Anreicherung von Ausnahmen mit Notizen"

#: ../../tutorial/errors.rst:594
msgid ""
"When an exception is created in order to be raised, it is usually "
"initialized with information that describes the error that has occurred. "
"There are cases where it is useful to add information after the exception "
"was caught. For this purpose, exceptions have a method ``add_note(note)`` "
"that accepts a string and adds it to the exception's notes list. The "
"standard traceback rendering includes all notes, in the order they were "
"added, after the exception. ::"
msgstr ""
"Wenn eine Ausnahme erstellt wird, um ausgelöst zu werden, wird sie "
"normalerweise mit Informationen initialisiert, die den aufgetretenen Fehler "
"beschreiben. Es gibt Fälle, in denen es sinnvoll ist, Informationen "
"hinzuzufügen, nachdem die Ausnahme abgefangen wurde. Zu diesem Zweck "
"verfügen Ausnahmen über eine Methode ``add_note(note)``, welche einen String "
"akzeptiert und zur Notizenliste der Ausnahme hinzufügt. Das Standard-"
"Traceback-Rendering umfasst alle Notizen in der Reihenfolge, in der sie nach "
"der Ausnahme hinzugefügt wurden. ::"

#: ../../tutorial/errors.rst:615
msgid ""
"For example, when collecting exceptions into an exception group, we may want "
"to add context information for the individual errors. In the following each "
"exception in the group has a note indicating when this error has occurred. ::"
msgstr ""
"Wenn wir beispielsweise Ausnahmen in einer Ausnahmegruppe sammeln, möchten "
"wir möglicherweise Kontextinformationen für die einzelnen Fehler hinzufügen. "
"Im Folgenden gibt es für jede Ausnahme in der Gruppe einen Hinweis, der "
"angibt, wann dieser Fehler aufgetreten ist. ::"
