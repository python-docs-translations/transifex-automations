# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Surekha Shreedharan Narayanan <freelancersurekha@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:56+0000\n"
"Last-Translator: Surekha Shreedharan Narayanan <freelancersurekha@gmail.com>, 2025\n"
"Language-Team: Hindi (https://app.transifex.com/python-doc/teams/5390/hi/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hi\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "हीप पर ऑब्जेक्ट्स का आवंटन"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"किसी नव-आवंटित ऑब्जेक्ट *op* को उसके प्रकार और प्रारंभिक संदर्भ के साथ आरंभ "
"करें। आरंभ किए गए ऑब्जेक्ट को लौटाता है। यदि *type* यह दर्शाता है कि "
"ऑब्जेक्ट चक्रीय कचरा संग्राहक में भाग लेता है, तो इसे संग्राहक के देखे गए "
"ऑब्जेक्ट के सेट में जोड़ दिया जाता है। ऑब्जेक्ट के अन्य क्षेत्र अप्रभावित "
"रहते हैं।"

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"यह वह सब कुछ करता है जो 1 :c:func:`PyObject_Init` करता है, और इसके साथ ही एक"
" परिवर्ती आकार वाले ऑब्जेक्ट के लिए लंबाई की जानकारी भी आरंभ करता है।"

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized. The caller will own the only reference to the object "
"(i.e. its reference count will be one). The size of the memory allocation is"
" determined from the :c:member:`~PyTypeObject.tp_basicsize` field of the "
"type object."
msgstr ""
"Python की C संरचना प्रकार *TYPE* और Python प्रकार ऑब्जेक्ट *type* का उपयोग "
"करके एक नया Python ऑब्जेक्ट आवंटित करें। जो फ़ील्ड Python ऑब्जेक्ट हेडर "
"द्वारा परिभाषित नहीं हैं, वे आरंभ नहीं होते हैं। कॉल करने वाले के पास "
"ऑब्जेक्ट का एकमात्र संदर्भ होगा (अर्थात, इसकी संदर्भ संख्या एक होगी)। मेमोरी"
" आवंटन का आकार प्रकार ऑब्जेक्ट के 1 :c:member:`~PyTypeObject.tp_basicsize` "
"फ़ील्ड से निर्धारित होता है।"

#: ../../c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the "
":c:member:`~PyTypeObject.tp_itemsize` field of *type*.  This is useful for "
"implementing objects like tuples, which are able to determine their size at "
"construction time.  Embedding the array of fields into the same allocation "
"decreases the number of allocations, improving the memory management "
"efficiency."
msgstr ""
"Python की C संरचना प्रकार *TYPE* और Python प्रकार ऑब्जेक्ट *type* का उपयोग "
"करके एक नया Python ऑब्जेक्ट आवंटित करें। जो फ़ील्ड Python ऑब्जेक्ट हेडर "
"द्वारा परिभाषित नहीं हैं, वे आरंभ नहीं होते हैं। आवंटित मेमोरी *TYPE* संरचना"
" के लिए और साथ ही *type* के 1 :c:member:`~PyTypeObject.tp_itemsize` फ़ील्ड "
"द्वारा दिए गए आकार के size फ़ील्ड के लिए स्थान देती है। यह टुपल्स जैसे "
"ऑब्जेक्ट्स को लागू करने के लिए उपयोगी है, जो निर्माण के समय अपने आकार का "
"निर्धारण करने में सक्षम होते हैं। फ़ील्ड के सरणी को उसी आवंटन में एम्बेड "
"करने से आवंटनों की संख्या कम हो जाती है, जिससे मेमोरी प्रबंधन की दक्षता में "
"सुधार होता है।"

#: ../../c-api/allocation.rst:55
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or "
":c:func:`PyObject_NewVar`.  This is normally called from the "
":c:member:`~PyTypeObject.tp_dealloc` handler specified in the object's type."
"  The fields of the object should not be accessed after this call as the "
"memory is no longer a valid Python object."
msgstr ""
"किसी ऑब्जेक्ट को 2 :c:func:`PyObject_New` या 3 :c:func:`PyObject_NewVar` का "
"उपयोग करके आवंटित की गई मेमोरी को जारी करता है। इसे सामान्यतः ऑब्जेक्ट के "
"प्रकार में निर्दिष्ट 1 :c:member:`~PyTypeObject.tp_dealloc` हैंडलर से बुलाया"
" जाता है। इस कॉल के बाद ऑब्जेक्ट के फ़ील्ड तक नहीं पहुंचा जाना चाहिए क्योंकि"
" मेमोरी अब एक वैध Python ऑब्जेक्ट नहीं रहती है।"

#: ../../c-api/allocation.rst:64
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed"
" using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"यह एक ऐसा ऑब्जेक्ट है जो Python में 2 ``None`` के रूप में दिखाई देता है। इसे"
" केवल 1 :c:macro:`Py_None` मैक्रो का उपयोग करके ही एक्सेस किया जाना चाहिए, "
"जो इस ऑब्जेक्ट के एक पॉइंटर का मूल्यांकन करता है।"

#: ../../c-api/allocation.rst:71
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:72
msgid "To allocate and create extension modules."
msgstr "एक्सटेंशन मॉड्यूल को आवंटित और बनाने के लिए।"
