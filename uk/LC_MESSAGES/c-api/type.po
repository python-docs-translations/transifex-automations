# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Об'єкти типу"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "Структура C об’єктів, що використовуються для опису вбудованих типів."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Це об’єкт типу для об’єктів типу; це той самий об’єкт, що й :class:`type` на "
"рівні Python."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Повертає ненульове значення, якщо об’єкт *o* є об’єктом типу, включаючи "
"екземпляри типів, похідних від об’єкта стандартного типу. Повертає 0 у всіх "
"інших випадках. Ця функція завжди успішна."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Повертає відмінне від нуля значення, якщо об’єкт *o* є об’єктом типу, але не "
"підтипом об’єкта стандартного типу. Повертає 0 у всіх інших випадках. Ця "
"функція завжди успішна."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "Очистіть внутрішній кеш пошуку. Повернути тег поточної версії."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "Тип повернення тепер ``unsigned long``, а не ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Визнати недійсним внутрішній кеш пошуку для типу та всіх його підтипів. Цю "
"функцію необхідно викликати після будь-якої ручної зміни атрибутів або "
"базових класів типу."

#: ../../c-api/type.rst:62
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Повертає ненульове значення, якщо об’єкт типу *o* встановлює функцію "
"*feature*. Функції типу позначаються однобітовими прапорцями."

#: ../../c-api/type.rst:68
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Повертає true, якщо об’єкт типу містить підтримку детектора циклу; це "
"перевіряє прапор типу :const:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr "Повертає true, якщо *a* є підтипом *b*."

#: ../../c-api/type.rst:76
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"Ця функція перевіряє лише фактичні підтипи, що означає, що :meth:`~class."
"__subclasscheck__` не викликається на *b*. Викличте :c:func:"
"`PyObject_IsSubclass`, щоб виконати ту саму перевірку, що й :func:"
"`issubclass`."

#: ../../c-api/type.rst:84
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"Загальний обробник для слота :c:member:`~PyTypeObject.tp_alloc` об’єкта "
"типу. Використовуйте стандартний механізм виділення пам’яті Python, щоб "
"виділити новий екземпляр та ініціалізувати весь його вміст як ``NULL``."

#: ../../c-api/type.rst:90
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"Загальний обробник для слота :c:member:`~PyTypeObject.tp_new` об’єкта типу. "
"Створіть новий екземпляр, використовуючи слот типу :c:member:`~PyTypeObject."
"tp_alloc`."

#: ../../c-api/type.rst:95
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Завершення об’єкта типу. Це слід викликати для всіх об’єктів типу, щоб "
"завершити їх ініціалізацію. Ця функція відповідає за додавання успадкованих "
"слотів від базового класу типу. Повертає ``0`` у разі успіху або ``-1`` і "
"встановлює виняток у випадку помилки."

#: ../../c-api/type.rst:101
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :const:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :const:`Py_TPFLAGS_HAVE_GC` "
"in its flags then it **must** implement the GC protocol itself by at least "
"implementing the :c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"Якщо деякі з базових класів реалізують протокол GC і наданий тип не містить :"
"const:`Py_TPFLAGS_HAVE_GC` у своїх прапорцях, тоді протокол GC буде "
"автоматично реалізовано зі своїх батьків. Навпаки, якщо тип, який "
"створюється, містить :const:`Py_TPFLAGS_HAVE_GC` у своїх прапорцях, тоді він "
"**має** реалізувати сам протокол GC, принаймні реалізувавши дескриптор :c:"
"member:`~PyTypeObject.tp_traverse`."

#: ../../c-api/type.rst:111
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"Повертає вказівник функції, що зберігається у вказаному слоті. Якщо "
"результат ``NULL``, це означає, що або слот має ``NULL``, або що функцію "
"було викликано з недійсними параметрами. Викликачі зазвичай перетворюють "
"покажчик результату на відповідний тип функції."

#: ../../c-api/type.rst:117
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Перегляньте :c:member:`PyType_Slot.slot`, щоб дізнатися про можливі значення "
"аргументу *slot*."

#: ../../c-api/type.rst:121
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` тепер може приймати всі типи. Раніше це було "
"обмежено :ref:`типами купи <heap-types>`."

#: ../../c-api/type.rst:127
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Повертає об’єкт модуля, пов’язаний із заданим типом, коли тип було створено "
"за допомогою :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:130 ../../c-api/type.rst:148
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Якщо жоден модуль не пов’язаний із заданим типом, встановлюється :py:class:"
"`TypeError` і повертається ``NULL``."

#: ../../c-api/type.rst:133
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method."
msgstr ""

#: ../../c-api/type.rst:144
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"Повертає стан об’єкта модуля, пов’язаного з заданим типом. Це ярлик для "
"виклику :c:func:`PyModule_GetState()` за результатом :c:func:"
"`PyType_GetModule`."

#: ../../c-api/type.rst:151
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Якщо *тип* має пов’язаний модуль, але його стан ``NULL``, повертає ``NULL`` "
"без встановлення винятку."

#: ../../c-api/type.rst:158
msgid "Creating Heap-Allocated Types"
msgstr "Створення типів, виділених у купі"

#: ../../c-api/type.rst:160
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Наступні функції та структури використовуються для створення :ref:`типів "
"купи <heap-types>`."

#: ../../c-api/type.rst:165
msgid ""
"Creates and returns a :ref:`heap type <heap-types>` from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"Створює та повертає :ref:`тип купи <heap-types>` зі *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."

#: ../../c-api/type.rst:168
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"Аргумент *bases* можна використовувати для визначення базових класів; це "
"може бути лише один клас або кортеж класів. Якщо *bases* має значення "
"``NULL``, замість нього використовується слот *Py_tp_bases*. Якщо це також "
"``NULL``, замість нього використовується слот *Py_tp_base*. Якщо це також "
"``NULL``, новий тип походить від :class:`object`."

#: ../../c-api/type.rst:174
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"Аргумент *module* можна використовувати для запису модуля, в якому визначено "
"новий клас. Це має бути об’єкт модуля або ``NULL``. Якщо не ``NULL``, модуль "
"асоціюється з новим типом і може бути пізніше отриманий за допомогою :c:func:"
"`PyType_GetModule`. Асоційований модуль не успадковується підкласами; її "
"необхідно вказувати для кожного класу окремо."

#: ../../c-api/type.rst:181
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Ця функція викликає :c:func:`PyType_Ready` для нового типу."

#: ../../c-api/type.rst:187
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"Тепер функція приймає один клас як аргумент *bases* і ``NULL`` як слот "
"``tp_doc``."

#: ../../c-api/type.rst:192
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr "Еквівалент ``PyType_FromModuleAndSpec(NULL, spec, bases)``."

#: ../../c-api/type.rst:198
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "Еквівалент ``PyType_FromSpecWithBases(spec, NULL)``."

#: ../../c-api/type.rst:202
msgid "Structure defining a type's behavior."
msgstr "Структура, що визначає поведінку типу."

#: ../../c-api/type.rst:206
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Назва типу, що використовується для встановлення :c:member:`PyTypeObject."
"tp_name`."

#: ../../c-api/type.rst:211
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"Розмір екземпляра в байтах, який використовується для встановлення :c:member:"
"`PyTypeObject.tp_basicsize` і :c:member:`PyTypeObject.tp_itemsize`."

#: ../../c-api/type.rst:217
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Прапорці типу, які використовуються для встановлення :c:member:`PyTypeObject."
"tp_flags`."

#: ../../c-api/type.rst:219
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Якщо прапор ``Py_TPFLAGS_HEAPTYPE`` не встановлено, :c:func:"
"`PyType_FromSpecWithBases` встановлює його автоматично."

#: ../../c-api/type.rst:224
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Масив структур :c:type:`PyType_Slot`. Закінчується спеціальним значенням "
"слота ``{0, NULL}``."

#: ../../c-api/type.rst:229
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Структура, що визначає необов’язкову функціональність типу, що містить "
"ідентифікатор слота та покажчик значення."

#: ../../c-api/type.rst:234
msgid "A slot ID."
msgstr "Ідентифікатор слота."

#: ../../c-api/type.rst:236
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"Ідентифікатори слотів називаються як імена полів структур :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` і :c:type:`PyAsyncMethods` з доданим префіксом "
"``Py_``. Наприклад, використовуйте:"

#: ../../c-api/type.rst:242
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` для встановлення :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:243
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` для встановлення :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:244
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` для встановлення :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:246
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr ""
"Наступні поля взагалі не можна встановити за допомогою :c:type:`PyType_Spec` "
"і :c:type:`PyType_Slot`:"

#: ../../c-api/type.rst:249
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:250
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../../c-api/type.rst:251
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../../c-api/type.rst:252
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../../c-api/type.rst:253
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../../c-api/type.rst:254
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/type.rst:255
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (див. :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:257
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (див. :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"

#: ../../c-api/type.rst:259
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (див. :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:262
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and :c:type:"
"`PyType_Slot` under the limited API:"
msgstr ""

#: ../../c-api/type.rst:265
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: ../../c-api/type.rst:266
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: ../../c-api/type.rst:268
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :py:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"Налаштування :c:data:`Py_tp_bases` або :c:data:`Py_tp_base` може бути "
"проблематичним на деяких платформах. Щоб уникнути проблем, замість цього "
"використовуйте аргумент *bases* :py:func:`PyType_FromSpecWithBases`."

#: ../../c-api/type.rst:275
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr "Слоти в :c:type:`PyBufferProcs` можна встановити в необмеженому API."

#: ../../c-api/type.rst:279
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "Бажане значення слота. У більшості випадків це вказівник на функцію."

#: ../../c-api/type.rst:282
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "Слоти, окрім ``Py_tp_doc``, не можуть бути ``NULL``."
