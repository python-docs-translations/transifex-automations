# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../howto/enum.rst:3
msgid "Enum HOWTO"
msgstr "Enum HOWTO"

#: ../../howto/enum.rst:9
msgid ""
"An :class:`Enum` is a set of symbolic names bound to unique values.  They "
"are similar to global variables, but they offer a more useful :func:"
"`repr()`, grouping, type-safety, and a few other features."
msgstr ""
":class:`Enum` — це набір символічних імен, прив’язаних до унікальних "
"значень. Вони подібні до глобальних змінних, але пропонують більш корисні "
"функції :func:`repr()`, групування, безпеку типів і кілька інших функцій."

#: ../../howto/enum.rst:13
msgid ""
"They are most useful when you have a variable that can take one of a limited "
"selection of values.  For example, the days of the week::"
msgstr ""
"Вони найбільш корисні, коли у вас є змінна, яка може приймати одне з "
"обмеженого вибору значень. Наприклад, дні тижня::"

#: ../../howto/enum.rst:26
msgid "Or perhaps the RGB primary colors::"
msgstr ""

#: ../../howto/enum.rst:34
msgid ""
"As you can see, creating an :class:`Enum` is as simple as writing a class "
"that inherits from :class:`Enum` itself."
msgstr ""
"Як бачите, створити :class:`Enum` так само просто, як написати клас, який "
"успадковує сам :class:`Enum`."

#: ../../howto/enum.rst:37
msgid "Case of Enum Members"
msgstr "Випадок членів Enum"

#: ../../howto/enum.rst:39
msgid ""
"Because Enums are used to represent constants we recommend using UPPER_CASE "
"names for members, and will be using that style in our examples."
msgstr ""
"Оскільки Enum використовуються для представлення констант, ми рекомендуємо "
"використовувати UPPER_CASE імена для членів і використовуватимемо цей стиль "
"у наших прикладах."

#: ../../howto/enum.rst:42
msgid ""
"Depending on the nature of the enum a member's value may or may not be "
"important, but either way that value can be used to get the corresponding "
"member::"
msgstr ""
"Залежно від характеру переліку значення члена може бути важливим або "
"неважливим, але в будь-якому випадку це значення можна використовувати для "
"отримання відповідного члена::"

#: ../../howto/enum.rst:49
msgid ""
"As you can see, the ``repr()`` of a member shows the enum name, the member "
"name, and the value.  The ``str()`` of a member shows only the enum name and "
"member name::"
msgstr ""

#: ../../howto/enum.rst:56
msgid "The *type* of an enumeration member is the enum it belongs to::"
msgstr "*Тип* члена переліку — це enum, якому він належить::"

#: ../../howto/enum.rst:63
msgid "Enum members have an attribute that contains just their :attr:`name`::"
msgstr "Члени Enum мають атрибут, який містить лише їх :attr:`name`::"

#: ../../howto/enum.rst:68
msgid "Likewise, they have an attribute for their :attr:`value`::"
msgstr "Так само вони мають атрибут для свого :attr:`value`::"

#: ../../howto/enum.rst:74
msgid ""
"Unlike many languages that treat enumerations solely as name/value pairs, "
"Python Enums can have behavior added.  For example, :class:`datetime.date` "
"has two methods for returning the weekday: :meth:`weekday` and :meth:"
"`isoweekday`. The difference is that one of them counts from 0-6 and the "
"other from 1-7. Rather than keep track of that ourselves we can add a method "
"to the :class:`Weekday` enum to extract the day from the :class:`date` "
"instance and return the matching enum member::"
msgstr ""
"На відміну від багатьох мов, які розглядають перерахування виключно як пари "
"ім’я/значення, Python Enums може мати додану поведінку. Наприклад, :class:"
"`datetime.date` має два методи для повернення дня тижня: :meth:`weekday` і :"
"meth:`isoweekday`. Різниця в тому, що один з них рахує від 0 до 6, а інший "
"від 1 до 7. Замість того, щоб відслідковувати це самостійно, ми можемо "
"додати метод до переліку :class:`Weekday`, щоб отримати день із примірника :"
"class:`date` і повернути відповідний член переліку::"

#: ../../howto/enum.rst:86
msgid "The complete :class:`Weekday` enum now looks like this::"
msgstr "Повний перелік :class:`Weekday` виглядає так:"

#: ../../howto/enum.rst:101
msgid "Now we can find out what today is!  Observe::"
msgstr "Тепер ми можемо дізнатися, що таке сьогодні! Спостерігати::"

#: ../../howto/enum.rst:107
msgid ""
"Of course, if you're reading this on some other day, you'll see that day "
"instead."
msgstr "Звичайно, якщо ви читаєте це в інший день, ви побачите цей день."

#: ../../howto/enum.rst:109
msgid ""
"This :class:`Weekday` enum is great if our variable only needs one day, but "
"what if we need several?  Maybe we're writing a function to plot chores "
"during a week, and don't want to use a :class:`list` -- we could use a "
"different type of :class:`Enum`::"
msgstr ""
"Цей перелік :class:`Weekday` чудово підходить, якщо нашій змінній потрібен "
"лише один день, але що, якщо нам потрібно декілька? Можливо, ми пишемо "
"функцію для графіку роботи протягом тижня, і не хочемо використовувати :"
"class:`list` -- ми можемо використати інший тип :class:`Enum`::"

#: ../../howto/enum.rst:124
msgid ""
"We've changed two things: we're inherited from :class:`Flag`, and the values "
"are all powers of 2."
msgstr ""
"Ми змінили дві речі: ми успадковані від :class:`Flag`, і всі значення є "
"степенями 2."

#: ../../howto/enum.rst:127
msgid ""
"Just like the original :class:`Weekday` enum above, we can have a single "
"selection::"
msgstr ""
"Як і в оригінальному переліку :class:`Weekday` вище, ми можемо мати один "
"вибір::"

#: ../../howto/enum.rst:133
msgid ""
"But :class:`Flag` also allows us to combine several members into a single "
"variable::"
msgstr ""
"Але :class:`Flag` також дозволяє нам об’єднати кілька членів в одну змінну::"

#: ../../howto/enum.rst:140
msgid "You can even iterate over a :class:`Flag` variable::"
msgstr "Ви навіть можете перебирати змінну :class:`Flag`::"

#: ../../howto/enum.rst:147
msgid "Okay, let's get some chores set up::"
msgstr "Гаразд, давайте приступимо до роботи::"

#: ../../howto/enum.rst:155
msgid "And a function to display the chores for a given day::"
msgstr "І функція для відображення справ за певний день::"

#: ../../howto/enum.rst:164
msgid ""
"In cases where the actual values of the members do not matter, you can save "
"yourself some work and use :func:`auto()` for the values::"
msgstr ""
"У випадках, коли фактичні значення членів не мають значення, ви можете "
"заощадити собі трохи праці та використати :func:`auto()` для значень::"

#: ../../howto/enum.rst:183
msgid "Programmatic access to enumeration members and their attributes"
msgstr "Програмний доступ до елементів переліку та їх атрибутів"

#: ../../howto/enum.rst:185
msgid ""
"Sometimes it's useful to access members in enumerations programmatically (i."
"e. situations where ``Color.RED`` won't do because the exact color is not "
"known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"Іноді корисно отримати доступ до членів у перерахуваннях програмно (тобто "
"ситуації, коли ``Color.RED`` не підійде, оскільки точний колір невідомий під "
"час написання програми). ``Enum`` дозволяє такий доступ:"

#: ../../howto/enum.rst:194
msgid "If you want to access enum members by *name*, use item access::"
msgstr ""
"Якщо ви хочете отримати доступ до членів enum за *ім’ям*, використовуйте "
"доступ до елемента::"

#: ../../howto/enum.rst:201
msgid "If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr ""
"Якщо у вас є член enum і вам потрібно його :attr:`name` або :attr:`value`::"

#: ../../howto/enum.rst:211
msgid "Duplicating enum members and values"
msgstr "Дублювання членів enum і значень"

#: ../../howto/enum.rst:213
msgid "Having two enum members with the same name is invalid::"
msgstr "Наявність двох членів переліку з однаковими іменами недійсна::"

#: ../../howto/enum.rst:223
msgid ""
"However, an enum member can have other names associated with it.  Given two "
"entries ``A`` and ``B`` with the same value (and ``A`` defined first), ``B`` "
"is an alias for the member ``A``.  By-value lookup of the value of ``A`` "
"will return the member ``A``.  By-name lookup of ``A`` will return the "
"member ``A``. By-name lookup of ``B`` will also return the member ``A``::"
msgstr ""
"Однак член enum може мати інші імена, пов’язані з ним. За наявності двох "
"записів ``A`` і ``B`` з однаковим значенням (і ``A``, визначеним першим), "
"``B`` є псевдонімом для члена ``A``. Пошук за значенням значення ``A`` "
"поверне член ``A``. Пошук за назвою ``A`` поверне член ``A``. Пошук за "
"назвою ``B`` також поверне член ``A``::"

#: ../../howto/enum.rst:244
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr ""
"Спроба створити член із тим же ім’ям, що й уже визначений атрибут (інший "
"член, метод тощо), або спроба створити атрибут із тим же ім’ям, що й член, "
"не дозволяється."

#: ../../howto/enum.rst:250
msgid "Ensuring unique enumeration values"
msgstr "Забезпечення унікальних значень перерахування"

#: ../../howto/enum.rst:252
msgid ""
"By default, enumerations allow multiple names as aliases for the same value. "
"When this behavior isn't desired, you can use the :func:`unique` decorator::"
msgstr ""
"За замовчуванням перерахування дозволяють використовувати кілька імен як "
"псевдоніми для одного значення. Якщо така поведінка небажана, ви можете "
"використати декоратор :func:`unique`::"

#: ../../howto/enum.rst:269
msgid "Using automatic values"
msgstr "Використання автоматичних значень"

#: ../../howto/enum.rst:271
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr ""
"Якщо точне значення неважливе, ви можете використовувати :class:`auto`::"

#: ../../howto/enum.rst:282
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr ""
"Значення вибираються :func:`_generate_next_value_`, які можна замінити:"

#: ../../howto/enum.rst:300
msgid ""
"The :meth:`_generate_next_value_` method must be defined before any members."
msgstr ""
"Метод :meth:`_generate_next_value_` має бути визначений перед будь-якими "
"членами."

#: ../../howto/enum.rst:303
msgid "Iteration"
msgstr "Ітерація"

#: ../../howto/enum.rst:305
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr "Перебір членів enum не забезпечує псевдоніми::"

#: ../../howto/enum.rst:312
msgid ""
"Note that the aliases ``Shape.ALIAS_FOR_SQUARE`` and ``Weekday.WEEKEND`` "
"aren't shown."
msgstr ""

#: ../../howto/enum.rst:314
msgid ""
"The special attribute ``__members__`` is a read-only ordered mapping of "
"names to members.  It includes all names defined in the enumeration, "
"including the aliases::"
msgstr ""
"Спеціальний атрибут ``__members__`` — це впорядковане відображення імен "
"учасників лише для читання. Він включає всі імена, визначені в переліку, "
"включаючи псевдоніми::"

#: ../../howto/enum.rst:326
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr ""
"Атрибут ``__members__`` можна використовувати для детального програмного "
"доступу до елементів переліку. Наприклад, пошук усіх псевдонімів::"

#: ../../howto/enum.rst:334
msgid ""
"Aliases for flags include values with multiple flags set, such as ``3``, and "
"no flags set, i.e. ``0``."
msgstr ""

#: ../../howto/enum.rst:339
msgid "Comparisons"
msgstr "Порівняння"

#: ../../howto/enum.rst:341
msgid "Enumeration members are compared by identity::"
msgstr "Члени переліку порівнюються за ідентичністю::"

#: ../../howto/enum.rst:350
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr ""
"Упорядковані порівняння між значеннями перерахування *не* підтримуються. "
"Члени Enum не є цілими числами (але дивіться `IntEnum`_ нижче):"

#: ../../howto/enum.rst:358
msgid "Equality comparisons are defined though::"
msgstr "Однак порівняння рівності визначено:"

#: ../../howto/enum.rst:367
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr ""
"Порівняння зі значеннями, не пов’язаними з перерахуванням, завжди "
"порівнюватиметься нерівними (знову ж таки, :class:`IntEnum` був явно "
"розроблений для іншої поведінки, див. нижче)::"

#: ../../howto/enum.rst:376
msgid ""
"It is possible to reload modules -- if a reloaded module contains enums, "
"they will be recreated, and the new members may not compare identical/equal "
"to the original members."
msgstr ""

#: ../../howto/enum.rst:381
msgid "Allowed members and attributes of enumerations"
msgstr "Дозволені члени та атрибути перерахувань"

#: ../../howto/enum.rst:383
msgid ""
"Most of the examples above use integers for enumeration values.  Using "
"integers is short and handy (and provided by default by the `Functional "
"API`_), but not strictly enforced.  In the vast majority of use-cases, one "
"doesn't care what the actual value of an enumeration is.  But if the value "
"*is* important, enumerations can have arbitrary values."
msgstr ""
"Більшість наведених вище прикладів використовують цілі числа для значень "
"перерахування. Використання цілих чисел є коротким і зручним (і надається за "
"замовчуванням `Functional API`_), але не суворо дотримується. У переважній "
"більшості варіантів використання байдуже, яке фактичне значення "
"перерахування. Але якщо значення *є* важливим, перерахування можуть мати "
"довільні значення."

#: ../../howto/enum.rst:389
msgid ""
"Enumerations are Python classes, and can have methods and special methods as "
"usual.  If we have this enumeration::"
msgstr ""
"Перерахування є класами Python і, як зазвичай, можуть мати методи та "
"спеціальні методи. Якщо ми маємо цей перелік::"

#: ../../howto/enum.rst:409
msgid "Then::"
msgstr "Потім::"

#: ../../howto/enum.rst:418
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, :meth:"
"`__add__`, etc.), descriptors (methods are also descriptors), and variable "
"names listed in :attr:`_ignore_`."
msgstr ""
"Дозволені правила такі: імена, які починаються і закінчуються одним "
"підкресленням, зарезервовані enum і не можуть використовуватися; усі інші "
"атрибути, визначені в переліку, стануть членами цього переліку, за винятком "
"спеціальних методів (:meth:`__str__`, :meth:`__add__` тощо), дескрипторів "
"(методи також є дескрипторами) і імен змінних перераховані в :attr:"
"`_ignore_`."

#: ../../howto/enum.rst:425
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__`, "
"any value(s) given to the enum member will be passed into those methods. See "
"`Planet`_ for an example."
msgstr ""

#: ../../howto/enum.rst:431
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members.  See :ref:`new-vs-init` for "
"more details."
msgstr ""

#: ../../howto/enum.rst:438
msgid "Restricted Enum subclassing"
msgstr "Обмежений підклас Enum"

#: ../../howto/enum.rst:440
msgid ""
"A new :class:`Enum` class must have one base enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"Новий клас :class:`Enum` повинен мати один базовий клас enum, до одного "
"конкретного типу даних і стільки класів міксину на основі :class:`object`, "
"скільки потрібно. Порядок цих базових класів:"

#: ../../howto/enum.rst:447
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not "
"define any members.  So this is forbidden::"
msgstr ""
"Крім того, створення підкласу переліку дозволяється, лише якщо перелік не "
"визначає жодних членів. Тому це заборонено::"

#: ../../howto/enum.rst:457
msgid "But this is allowed::"
msgstr "Але це дозволено::"

#: ../../howto/enum.rst:468
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"Дозвіл створення підкласів для переліків, які визначають члени, призведе до "
"порушення деяких важливих інваріантів типів і екземплярів. З іншого боку, "
"має сенс дозволити спільну поведінку між групою перерахувань. (Див. "
"`OrderedEnum`_ для прикладу.)"

#: ../../howto/enum.rst:475
msgid "Pickling"
msgstr "Соління"

#: ../../howto/enum.rst:477
msgid "Enumerations can be pickled and unpickled::"
msgstr "Перерахування можна маринувати і не маринувати:"

#: ../../howto/enum.rst:484
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr ""
"Застосовуються звичайні обмеження для маркування: переліки, які можна "
"піклувати, повинні бути визначені на верхньому рівні модуля, оскільки для "
"скасування потрібно, щоб їх можна було імпортувати з цього модуля."

#: ../../howto/enum.rst:490
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr ""
"За допомогою протоколу pickle версії 4 можна легко маринувати переліки, "
"вкладені в інші класи."

#: ../../howto/enum.rst:493
msgid ""
"It is possible to modify how enum members are pickled/unpickled by defining :"
"meth:`__reduce_ex__` in the enumeration class.  The default method is by-"
"value, but enums with complicated values may want to use by-name::"
msgstr ""

#: ../../howto/enum.rst:503
msgid ""
"Using by-name for flags is not recommended, as unnamed aliases will not "
"unpickle."
msgstr ""

#: ../../howto/enum.rst:508
msgid "Functional API"
msgstr "Функціональний API"

#: ../../howto/enum.rst:510
msgid ""
"The :class:`Enum` class is callable, providing the following functional API::"
msgstr ""
"Клас :class:`Enum` можна викликати, забезпечуючи такий функціональний API:"

#: ../../howto/enum.rst:520
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"Семантика цього API нагадує :class:`~collections.namedtuple`. Першим "
"аргументом виклику :class:`Enum` є назва переліку."

#: ../../howto/enum.rst:523
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of 2-"
"tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"Другим аргументом є *джерело* імен членів переліку. Це може бути рядок імен, "
"розділених пробілами, послідовність імен, послідовність 2-кортежів із парами "
"ключ/значення або зіставлення (наприклад, словник) імен із значеннями. "
"Останні два параметри дозволяють присвоювати довільні значення "
"перерахуванням; інші автоматично призначають зростаючі цілі числа, починаючи "
"з 1 (використовуйте параметр ``start``, щоб вказати інше початкове "
"значення). Повертається новий клас, похідний від :class:`Enum`. Іншими "
"словами, наведене вище призначення :class:`Animal` еквівалентне::"

#: ../../howto/enum.rst:539
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but by default enum members all "
"evaluate to ``True``."
msgstr ""
"Причина того, що за замовчуванням початковим числом є ``1``, а не ``0``, "
"полягає в тому, що ``0`` є ``False`` у логічному сенсі, але за замовчуванням "
"усі члени enum оцінюються як ``True``."

#: ../../howto/enum.rst:543
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in a separate module, and also may not work on IronPython or "
"Jython). The solution is to specify the module name explicitly as follows::"
msgstr ""

#: ../../howto/enum.rst:553
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new "
"Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"Якщо ``module`` не вказано, і Enum не може визначити, що це таке, нові члени "
"Enum не можна буде вибрати; щоб зберегти помилки ближче до джерела, "
"травлення буде вимкнено."

#: ../../howto/enum.rst:557
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on :attr:"
"`~definition.__qualname__` being set to the location where pickle will be "
"able to find the class.  For example, if the class was made available in "
"class SomeData in the global scope::"
msgstr ""
"Новий протокол pickle 4 також, за деяких обставин, покладається на те, що :"
"attr:`~definition.__qualname__` встановлено на місце, де pickle зможе знайти "
"клас. Наприклад, якщо клас був доступний у класі SomeData у глобальній "
"області::"

#: ../../howto/enum.rst:564
msgid "The complete signature is::"
msgstr "Повний підпис:"

#: ../../howto/enum.rst:576
msgid "*value*: What the new enum class will record as its name."
msgstr ""

#: ../../howto/enum.rst:578
msgid ""
"*names*: The enum members.  This can be a whitespace- or comma-separated "
"string (values will start at 1 unless otherwise specified)::"
msgstr ""

#: ../../howto/enum.rst:583
msgid "or an iterator of names::"
msgstr "або ітератор імен::"

#: ../../howto/enum.rst:587
msgid "or an iterator of (name, value) pairs::"
msgstr "або ітератор пар (ім'я, значення)::"

#: ../../howto/enum.rst:591
msgid "or a mapping::"
msgstr "або відображення::"

#: ../../howto/enum.rst:595
msgid "*module*: name of module where new enum class can be found."
msgstr ""

#: ../../howto/enum.rst:597
msgid "*qualname*: where in module new enum class can be found."
msgstr ""

#: ../../howto/enum.rst:599
msgid "*type*: type to mix in to new enum class."
msgstr ""

#: ../../howto/enum.rst:601
msgid "*start*: number to start counting at if only names are passed in."
msgstr ""

#: ../../howto/enum.rst:603
msgid "The *start* parameter was added."
msgstr "Додано параметр *start*."

#: ../../howto/enum.rst:608
msgid "Derived Enumerations"
msgstr "Похідні перерахування"

#: ../../howto/enum.rst:611
msgid "IntEnum"
msgstr "IntEnum"

#: ../../howto/enum.rst:613
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of :"
"class:`int`.  Members of an :class:`IntEnum` can be compared to integers; by "
"extension, integer enumerations of different types can also be compared to "
"each other::"
msgstr ""
"Перший наданий варіант :class:`Enum` також є підкласом :class:`int`. Члени :"
"class:`IntEnum` можна порівняти з цілими числами; за розширенням, "
"цілочисельні перерахування різних типів також можна порівнювати один з одним:"

#: ../../howto/enum.rst:634
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr ""
"Однак їх все ще не можна порівняти зі стандартними перерахуваннями :class:"
"`Enum`::"

#: ../../howto/enum.rst:647
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr "Значення :class:`IntEnum` поводяться як цілі числа іншим чином:"

#: ../../howto/enum.rst:658
msgid "StrEnum"
msgstr "StrEnum"

#: ../../howto/enum.rst:660
msgid ""
"The second variation of :class:`Enum` that is provided is also a subclass "
"of :class:`str`.  Members of a :class:`StrEnum` can be compared to strings; "
"by extension, string enumerations of different types can also be compared to "
"each other."
msgstr ""

#: ../../howto/enum.rst:669
msgid "IntFlag"
msgstr "IntFlag"

#: ../../howto/enum.rst:671
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be "
"combined using the bitwise operators (&, \\|, ^, ~) and the result is still "
"an :class:`IntFlag` member, if possible.  Like :class:`IntEnum`, :class:"
"`IntFlag` members are also integers and can be used wherever an :class:`int` "
"is used."
msgstr ""

#: ../../howto/enum.rst:679
msgid ""
"Any operation on an :class:`IntFlag` member besides the bit-wise operations "
"will lose the :class:`IntFlag` membership."
msgstr ""
"Будь-яка операція з членом :class:`IntFlag`, крім побітових операцій, "
"втрачає членство :class:`IntFlag`."

#: ../../howto/enum.rst:682
msgid ""
"Bit-wise operations that result in invalid :class:`IntFlag` values will lose "
"the :class:`IntFlag` membership.  See :class:`FlagBoundary` for details."
msgstr ""
"Побітові операції, які призводять до недійсних значень :class:`IntFlag`, "
"втратять членство :class:`IntFlag`. Перегляньте :class:`FlagBoundary` для "
"деталей."

#: ../../howto/enum.rst:689
msgid "Sample :class:`IntFlag` class::"
msgstr "Приклад :class:`IntFlag` class::"

#: ../../howto/enum.rst:705
msgid "It is also possible to name the combinations::"
msgstr "Також можна назвати комбінації:"

#: ../../howto/enum.rst:721
msgid ""
"Named combinations are considered aliases.  Aliases do not show up during "
"iteration, but can be returned from by-value lookups."
msgstr ""
"Іменовані комбінації вважаються псевдонімами. Псевдоніми не відображаються "
"під час ітерації, але їх можна повернути під час пошуку за значенням."

#: ../../howto/enum.rst:726
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is :data:"
"`False`::"
msgstr ""
"Ще одна важлива відмінність між :class:`IntFlag` і :class:`Enum` полягає в "
"тому, що якщо не встановлено жодного прапора (значення дорівнює 0), його "
"логічна оцінка буде :data:`False`::"

#: ../../howto/enum.rst:734
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them (but may lose :class:`IntFlag` membership::"
msgstr ""
"Оскільки члени :class:`IntFlag` також є підкласами :class:`int`, їх можна "
"поєднувати з ними (але вони можуть втратити членство :class:`IntFlag`::"

#: ../../howto/enum.rst:745
msgid ""
"The negation operator, ``~``, always returns an :class:`IntFlag` member with "
"a positive value::"
msgstr ""
"Оператор заперечення, ``~``, завжди повертає член :class:`IntFlag` із "
"позитивним значенням::"

#: ../../howto/enum.rst:751
msgid ":class:`IntFlag` members can also be iterated over::"
msgstr "Члени :class:`IntFlag` також можна повторювати:"

#: ../../howto/enum.rst:760
msgid "Flag"
msgstr "Прапор"

#: ../../howto/enum.rst:762
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike :"
"class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""
"Останнім варіантом є :class:`Flag`. Подібно до :class:`IntFlag`, члени :"
"class:`Flag` можна комбінувати за допомогою порозрядних операторів (&, \\|, "
"^, ~). На відміну від :class:`IntFlag`, їх не можна комбінувати з будь-яким "
"іншим переліком :class:`Flag` або :class:`int`, ані порівнювати з ними. Хоча "
"можна вказати значення безпосередньо, рекомендується використовувати :class:"
"`auto` як значення, а :class:`Flag` вибрати відповідне значення."

#: ../../howto/enum.rst:771
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"Подібно до :class:`IntFlag`, якщо комбінація членів :class:`Flag` не "
"призводить до встановлення прапорів, логічна оцінка буде :data:`False`::"

#: ../../howto/enum.rst:785
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, "
"8, ...), while combinations of flags will not::"
msgstr ""

#: ../../howto/enum.rst:797
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr ""
"Присвоєння назви умові \"прапори не встановлено\" не змінює її логічного "
"значення::"

#: ../../howto/enum.rst:811
msgid ":class:`Flag` members can also be iterated over::"
msgstr "Члени :class:`Flag` також можна повторювати:"

#: ../../howto/enum.rst:821
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic "
"promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and :class:"
"`IntFlag` should be used only in cases where :class:`Enum` and :class:`Flag` "
"will not do; for example, when integer constants are replaced with "
"enumerations, or for interoperability with other systems."
msgstr ""
"Для більшості нового коду наполегливо рекомендується використовувати :class:"
"`Enum` і :class:`Flag`, оскільки :class:`IntEnum` і :class:`IntFlag` "
"порушують деякі семантичні обіцянки перерахування (через їх порівняння з "
"цілі числа, і, таким чином, через перехідність до інших непов’язаних "
"перерахувань). :class:`IntEnum` і :class:`IntFlag` слід використовувати лише "
"у випадках, коли :class:`Enum` і :class:`Flag` не підходять; наприклад, коли "
"цілі константи замінюються перерахуваннями або для взаємодії з іншими "
"системами."

#: ../../howto/enum.rst:831
msgid "Others"
msgstr "інші"

#: ../../howto/enum.rst:833
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr ""
"Хоча :class:`IntEnum` є частиною модуля :mod:`enum`, його було б дуже просто "
"реалізувати незалежно:"

#: ../../howto/enum.rst:839
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`FloatEnum` that mixes in :class:`float` instead of :class:"
"`int`."
msgstr ""

#: ../../howto/enum.rst:842
msgid "Some rules:"
msgstr "Деякі правила:"

#: ../../howto/enum.rst:844
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before :class:"
"`Enum` itself in the sequence of bases, as in the :class:`IntEnum` example "
"above."
msgstr ""
"Під час створення підкласу :class:`Enum` змішані типи повинні з’являтися "
"перед самим :class:`Enum` у послідовності основ, як у прикладі :class:"
"`IntEnum` вище."

#: ../../howto/enum.rst:847
msgid ""
"Mix-in types must be subclassable. For example, :class:`bool` and :class:"
"`range` are not subclassable and will throw an error during Enum creation if "
"used as the mix-in type."
msgstr ""

#: ../../howto/enum.rst:850
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. :class:"
"`int` above.  This restriction does not apply to mix-ins which only add "
"methods and don't specify another type."
msgstr ""
"Хоча :class:`Enum` може мати члени будь-якого типу, коли ви додаєте "
"додатковий тип, усі члени повинні мати значення цього типу, наприклад. :"
"class:`int` вище. Це обмеження не стосується змішувань, які лише додають "
"методи і не вказують інший тип."

#: ../../howto/enum.rst:854
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr ""
"Коли додається інший тип даних, атрибут :attr:`value` *не такий самий*, як "
"сам член переліку, хоча він еквівалентний і порівнюватиметься рівним."

#: ../../howto/enum.rst:857
msgid "A ``data type`` is a mixin that defines :meth:`__new__`."
msgstr ""

#: ../../howto/enum.rst:858
msgid ""
"%-style formatting:  ``%s`` and ``%r`` call the :class:`Enum` class's :meth:"
"`__str__` and :meth:`__repr__` respectively; other codes (such as ``%i`` or "
"``%h`` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""

#: ../../howto/enum.rst:861
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and :func:"
"`format` will use the enum's :meth:`__str__` method."
msgstr ""

#: ../../howto/enum.rst:866
msgid ""
"Because :class:`IntEnum`, :class:`IntFlag`, and :class:`StrEnum` are "
"designed to be drop-in replacements for existing constants, their :meth:"
"`__str__` method has been reset to their data types' :meth:`__str__` method."
msgstr ""

#: ../../howto/enum.rst:874
msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
msgstr "Коли використовувати :meth:`__new__` проти :meth:`__init__`"

#: ../../howto/enum.rst:876
msgid ""
":meth:`__new__` must be used whenever you want to customize the actual value "
"of the :class:`Enum` member.  Any other modifications may go in either :meth:"
"`__new__` or :meth:`__init__`, with :meth:`__init__` being preferred."
msgstr ""
":meth:`__new__` потрібно використовувати щоразу, коли ви хочете налаштувати "
"фактичне значення члена :class:`Enum`. Будь-які інші модифікації можна "
"вносити в :meth:`__new__` або :meth:`__init__`, причому перевага віддається :"
"meth:`__init__`."

#: ../../howto/enum.rst:880
msgid ""
"For example, if you want to pass several items to the constructor, but only "
"want one of them to be the value::"
msgstr ""
"Наприклад, якщо ви хочете передати кілька елементів у конструктор, але "
"хочете, щоб лише один із них був значенням::"

#: ../../howto/enum.rst:907
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly."
msgstr ""

#: ../../howto/enum.rst:912
msgid "Finer Points"
msgstr "Більш тонкі точки"

#: ../../howto/enum.rst:915
msgid "Supported ``__dunder__`` names"
msgstr "Підтримувані імена ``__dunder__``"

#: ../../howto/enum.rst:917
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` — це впорядковане зіставлення елементів ``member_name``:"
"``member`` лише для читання. Це доступно лише в класі."

#: ../../howto/enum.rst:920
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
":meth:`__new__`, якщо вказано, має створити та повернути члени enum; також "
"дуже гарна ідея належним чином встановити :attr:`_value_` члена. Після "
"створення всіх учасників він більше не використовується."

#: ../../howto/enum.rst:926
msgid "Supported ``_sunder_`` names"
msgstr "Підтримувані імена ``_sunder_``"

#: ../../howto/enum.rst:928
msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- ім'я учасника"

#: ../../howto/enum.rst:929
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- значення члена; можна встановити/змінити в ``__new__``"

#: ../../howto/enum.rst:931
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""
"``_missing_`` -- функція пошуку, яка використовується, коли значення не "
"знайдено; може бути перевизначено"

#: ../../howto/enum.rst:933
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""
"``_ignore_`` -- список імен у вигляді :class:`list` або :class:`str`, які не "
"будуть перетворені в члени та будуть видалені з остаточного класу"

#: ../../howto/enum.rst:936
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""
"``_order_`` -- використовується в коді Python 2/3 для забезпечення "
"узгодженості порядку членів (атрибут класу, видалений під час створення "
"класу)"

#: ../../howto/enum.rst:938
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by :class:"
"`auto` to get an appropriate value for an enum member; may be overridden"
msgstr ""
"``_generate_next_value_`` -- використовується `Functional API`_ і :class:"
"`auto` для отримання відповідного значення для члена enum; може бути "
"перевизначено"

#: ../../howto/enum.rst:944
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""
"Для стандартних класів :class:`Enum` наступним вибраним значенням є останнє "
"значення, збільшене на одиницю."

#: ../../howto/enum.rst:947
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""
"Для класів :class:`Flag` наступним вибраним значенням буде наступний "
"найвищий ступінь двох, незалежно від останнього побаченого значення."

#: ../../howto/enum.rst:950
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../howto/enum.rst:951
msgid "``_ignore_``"
msgstr "``_ігнорувати_``"

#: ../../howto/enum.rst:953
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"Щоб підтримувати синхронізацію коду Python 2 / Python 3, можна надати "
"атрибут :attr:`_order_`. Його буде перевірено на фактичний порядок "
"перерахування та викличе помилку, якщо вони не збігаються:"

#: ../../howto/enum.rst:971
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr ""
"У коді Python 2 атрибут :attr:`_order_` необхідний, оскільки порядок "
"визначення втрачається, перш ніж його можна записати."

#: ../../howto/enum.rst:976
msgid "_Private__names"
msgstr "_Private__names"

#: ../../howto/enum.rst:978
msgid ""
":ref:`Private names <private-name-mangling>` are not converted to enum "
"members, but remain normal attributes."
msgstr ""

#: ../../howto/enum.rst:985
msgid "``Enum`` member type"
msgstr "Тип члена ``Enum``"

#: ../../howto/enum.rst:987
msgid ""
"Enum members are instances of their enum class, and are normally accessed as "
"``EnumClass.member``.  In certain situations, such as writing custom enum "
"behavior, being able to access one member directly from another is useful, "
"and is supported."
msgstr ""

#: ../../howto/enum.rst:996
msgid "Creating members that are mixed with other data types"
msgstr "Створення елементів, змішаних з іншими типами даних"

#: ../../howto/enum.rst:998
msgid ""
"When subclassing other data types, such as :class:`int` or :class:`str`, "
"with an :class:`Enum`, all values after the ``=`` are passed to that data "
"type's constructor.  For example::"
msgstr ""

#: ../../howto/enum.rst:1010
msgid "Boolean value of ``Enum`` classes and members"
msgstr "Логічне значення класів і членів ``Enum``"

#: ../../howto/enum.rst:1012
msgid ""
"Enum classes that are mixed with non-:class:`Enum` types (such as :class:"
"`int`, :class:`str`, etc.) are evaluated according to the mixed-in type's "
"rules; otherwise, all members evaluate as :data:`True`.  To make your own "
"enum's boolean evaluation depend on the member's value add the following to "
"your class::"
msgstr ""
"Класи Enum, змішані з типами не :class:`Enum` (такими як :class:`int`, :"
"class:`str` тощо), оцінюються відповідно до правил змішаного типу; інакше "
"всі члени оцінюються як :data:`True`. Щоб зробити логічне обчислення вашого "
"власного переліку залежним від значення члена, додайте наступне до свого "
"класу:"

#: ../../howto/enum.rst:1021
msgid "Plain :class:`Enum` classes always evaluate as :data:`True`."
msgstr "Класи Plain :class:`Enum` завжди оцінюються як :data:`True`."

#: ../../howto/enum.rst:1025
msgid "``Enum`` classes with methods"
msgstr "``Enum`` класи з методами"

#: ../../howto/enum.rst:1027
msgid ""
"If you give your enum subclass extra methods, like the `Planet`_ class "
"below, those methods will show up in a :func:`dir` of the member, but not of "
"the class::"
msgstr ""

#: ../../howto/enum.rst:1038
msgid "Combining members of ``Flag``"
msgstr "Об'єднання членів ``Прапора``"

#: ../../howto/enum.rst:1040
msgid ""
"Iterating over a combination of :class:`Flag` members will only return the "
"members that are comprised of a single bit::"
msgstr ""
"Ітерація по комбінації елементів :class:`Flag` поверне лише елементи, які "
"складаються з одного біта::"

#: ../../howto/enum.rst:1058
msgid "``Flag`` and ``IntFlag`` minutia"
msgstr "Деталі ``Flag`` і ``IntFlag``"

#: ../../howto/enum.rst:1060
msgid "Using the following snippet for our examples::"
msgstr "Використовуючи наступний фрагмент для наших прикладів:"

#: ../../howto/enum.rst:1071
msgid "the following are true:"
msgstr "вірно наступне:"

#: ../../howto/enum.rst:1073
msgid "single-bit flags are canonical"
msgstr "однобітові прапори є канонічними"

#: ../../howto/enum.rst:1074
msgid "multi-bit and zero-bit flags are aliases"
msgstr "багатобітні та нульові бітові прапорці є псевдонімами"

#: ../../howto/enum.rst:1075
msgid "only canonical flags are returned during iteration::"
msgstr "під час ітерації повертаються лише канонічні прапори::"

#: ../../howto/enum.rst:1080
msgid ""
"negating a flag or flag set returns a new flag/flag set with the "
"corresponding positive integer value::"
msgstr ""
"заперечення прапора або набору прапорів повертає новий прапор/набір прапорів "
"із відповідним додатним цілим значенням::"

#: ../../howto/enum.rst:1089
msgid "names of pseudo-flags are constructed from their members' names::"
msgstr "імена псевдо-прапорів складаються з імен їх членів::"

#: ../../howto/enum.rst:1094
msgid "multi-bit flags, aka aliases, can be returned from operations::"
msgstr ""
"багатобітові прапорці, або псевдоніми, можуть бути повернуті з операцій::"

#: ../../howto/enum.rst:1105
msgid ""
"membership / containment checking: zero-valued flags are always considered "
"to be contained::"
msgstr ""

#: ../../howto/enum.rst:1111
msgid ""
"otherwise, only if all bits of one flag are in the other flag will True be "
"returned::"
msgstr ""

#: ../../howto/enum.rst:1120
msgid ""
"There is a new boundary mechanism that controls how out-of-range / invalid "
"bits are handled: ``STRICT``, ``CONFORM``, ``EJECT``, and ``KEEP``:"
msgstr ""
"Існує новий граничний механізм, який контролює, як обробляються біти за "
"межами діапазону/недійсні: ``STRICT``, ``CONFORM``, ``EJECT`` і ``KEEP``:"

#: ../../howto/enum.rst:1123
msgid "STRICT --> raises an exception when presented with invalid values"
msgstr "STRICT --> створює виняток, якщо надає недійсні значення"

#: ../../howto/enum.rst:1124
msgid "CONFORM --> discards any invalid bits"
msgstr "CONFORM --> відкидає всі недійсні біти"

#: ../../howto/enum.rst:1125
msgid "EJECT --> lose Flag status and become a normal int with the given value"
msgstr ""
"EJECT --> втрачає статус прапора та стає звичайним int із заданим значенням"

#: ../../howto/enum.rst:1126
msgid "KEEP --> keep the extra bits"
msgstr "KEEP --> збережіть зайві біти"

#: ../../howto/enum.rst:1128
msgid "keeps Flag status and extra bits"
msgstr "зберігає статус прапора та додаткові біти"

#: ../../howto/enum.rst:1129
msgid "extra bits do not show up in iteration"
msgstr "зайві біти не відображаються в ітерації"

#: ../../howto/enum.rst:1130
msgid "extra bits do show up in repr() and str()"
msgstr "додаткові біти з’являються в repr() і str()"

#: ../../howto/enum.rst:1132
msgid ""
"The default for Flag is ``STRICT``, the default for ``IntFlag`` is "
"``EJECT``, and the default for ``_convert_`` is ``KEEP`` (see ``ssl."
"Options`` for an example of when ``KEEP`` is needed)."
msgstr ""
"Типовим значенням для прапора є ``STRICT``, значенням за замовчуванням "
"``IntFlag`` є ``EJECT``, а за умовчанням для ``_convert_`` є ``KEEP`` (див. "
"``ssl.Options`` для прикладу того, коли потрібен ``KEEP``)."

#: ../../howto/enum.rst:1140
msgid "How are Enums and Flags different?"
msgstr ""

#: ../../howto/enum.rst:1142
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived :"
"class:`Enum` classes and their instances (members)."
msgstr ""
"Переліки мають спеціальний метаклас, який впливає на багато аспектів як "
"похідних класів :class:`Enum`, так і їх екземплярів (членів)."

#: ../../howto/enum.rst:1147
msgid "Enum Classes"
msgstr "Класи Enum"

#: ../../howto/enum.rst:1149
msgid ""
"The :class:`EnumType` metaclass is responsible for providing the :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods that "
"allow one to do things with an :class:`Enum` class that fail on a typical "
"class, such as ``list(Color)`` or ``some_enum_var in Color``.  :class:"
"`EnumType` is responsible for ensuring that various other methods on the "
"final :class:`Enum` class are correct (such as :meth:`__new__`, :meth:"
"`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
msgstr ""

#: ../../howto/enum.rst:1158
msgid "Flag Classes"
msgstr ""

#: ../../howto/enum.rst:1160
msgid ""
"Flags have an expanded view of aliasing: to be canonical, the value of a "
"flag needs to be a power-of-two value, and not a duplicate name.  So, in "
"addition to the :class:`Enum` definition of alias, a flag with no value (a.k."
"a. ``0``) or with more than one power-of-two value (e.g. ``3``) is "
"considered an alias."
msgstr ""

#: ../../howto/enum.rst:1166
msgid "Enum Members (aka instances)"
msgstr "Члени Enum (також відомі як екземпляри)"

#: ../../howto/enum.rst:1168
msgid ""
"The most interesting thing about enum members is that they are singletons. :"
"class:`EnumType` creates them all while it is creating the enum class "
"itself, and then puts a custom :meth:`__new__` in place to ensure that no "
"new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
"Найцікавіше в членах enum те, що вони є одиночними. :class:`EnumType` "
"створює їх усі під час створення самого класу enum, а потім розміщує "
"спеціальний :meth:`__new__`, щоб гарантувати, що нові екземпляри ніколи не "
"створюватимуться, повертаючи лише наявні екземпляри членів."

#: ../../howto/enum.rst:1174
msgid "Flag Members"
msgstr ""

#: ../../howto/enum.rst:1176
msgid ""
"Flag members can be iterated over just like the :class:`Flag` class, and "
"only the canonical members will be returned.  For example::"
msgstr ""

#: ../../howto/enum.rst:1182
msgid "(Note that ``BLACK``, ``PURPLE``, and ``WHITE`` do not show up.)"
msgstr ""

#: ../../howto/enum.rst:1184
msgid ""
"Inverting a flag member returns the corresponding positive value, rather "
"than a negative value --- for example::"
msgstr ""

#: ../../howto/enum.rst:1190
msgid ""
"Flag members have a length corresponding to the number of power-of-two "
"values they contain.  For example::"
msgstr ""

#: ../../howto/enum.rst:1200
msgid "Enum Cookbook"
msgstr ""

#: ../../howto/enum.rst:1203
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :class:`Flag`, and :"
"class:`IntFlag` are expected to cover the majority of use-cases, they cannot "
"cover them all.  Here are recipes for some different types of enumerations "
"that can be used directly, or as examples for creating one's own."
msgstr ""
"Хоча очікується, що :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :"
"class:`Flag` і :class:`IntFlag` охоплять більшість варіантів використання, "
"вони не можуть охопити їх усіх. Ось рецепти для деяких різних типів "
"перерахувань, які можна використовувати безпосередньо або як приклади для "
"створення власних."

#: ../../howto/enum.rst:1210
msgid "Omitting values"
msgstr "Пропуск значень"

#: ../../howto/enum.rst:1212
msgid ""
"In many use-cases, one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr ""

#: ../../howto/enum.rst:1215
msgid "use instances of :class:`auto` for the value"
msgstr "використовувати екземпляри :class:`auto` для значення"

#: ../../howto/enum.rst:1216
msgid "use instances of :class:`object` as the value"
msgstr "використовуйте екземпляри :class:`object` як значення"

#: ../../howto/enum.rst:1217
msgid "use a descriptive string as the value"
msgstr "використовуйте описовий рядок як значення"

#: ../../howto/enum.rst:1218
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr ""
"використовуйте кортеж як значення та спеціальний :meth:`__new__`, щоб "
"замінити кортеж на значення :class:`int`"

#: ../../howto/enum.rst:1221
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr ""
"Використання будь-якого з цих методів означає для користувача, що ці "
"значення не є важливими, а також дозволяє додавати, видаляти або змінювати "
"порядок членів без необхідності перенумеровувати решту членів."

#: ../../howto/enum.rst:1227
msgid "Using :class:`auto`"
msgstr "Використання :class:`auto`"

#: ../../howto/enum.rst:1229
msgid "Using :class:`auto` would look like::"
msgstr "Використання :class:`auto` виглядатиме так::"

#: ../../howto/enum.rst:1241
msgid "Using :class:`object`"
msgstr "Використання :class:`object`"

#: ../../howto/enum.rst:1243
msgid "Using :class:`object` would look like::"
msgstr "Використання :class:`object` виглядатиме так::"

#: ../../howto/enum.rst:1253
msgid ""
"This is also a good example of why you might want to write your own :meth:"
"`__repr__`::"
msgstr ""

#: ../../howto/enum.rst:1269
msgid "Using a descriptive string"
msgstr "Використання описового рядка"

#: ../../howto/enum.rst:1271
msgid "Using a string as the value would look like::"
msgstr "Використання рядка як значення виглядатиме так::"

#: ../../howto/enum.rst:1283
msgid "Using a custom :meth:`__new__`"
msgstr "Використання спеціального :meth:`__new__`"

#: ../../howto/enum.rst:1285
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr "Використання автоматичної нумерації :meth:`__new__` виглядатиме так::"

#: ../../howto/enum.rst:1302
msgid ""
"To make a more general purpose ``AutoNumber``, add ``*args`` to the "
"signature::"
msgstr ""
"Щоб зробити ``AutoNumber`` більш загального призначення, додайте ``*args`` "
"до підпису::"

#: ../../howto/enum.rst:1312
msgid ""
"Then when you inherit from ``AutoNumber`` you can write your own "
"``__init__`` to handle any extra arguments::"
msgstr ""
"Тоді, коли ви успадкуєте від ``AutoNumber``, ви можете написати свій власний "
"``__init__`` для обробки будь-яких додаткових аргументів::"

#: ../../howto/enum.rst:1331
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr ""
"Метод :meth:`__new__`, якщо його визначено, використовується під час "
"створення елементів Enum; потім його замінює :meth:`__new__` Enum, який "
"використовується після створення класу для пошуку існуючих членів."

#: ../../howto/enum.rst:1337
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly -- e.g.::"
msgstr ""

#: ../../howto/enum.rst:1344
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: ../../howto/enum.rst:1346
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"Упорядковане перерахування, яке не базується на :class:`IntEnum` і тому "
"підтримує звичайні інваріанти :class:`Enum` (наприклад, не порівнюється з "
"іншими переліками):"

#: ../../howto/enum.rst:1380
msgid "DuplicateFreeEnum"
msgstr "DuplicateFreeEnum"

#: ../../howto/enum.rst:1382
msgid ""
"Raises an error if a duplicate member value is found instead of creating an "
"alias::"
msgstr ""

#: ../../howto/enum.rst:1407
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"Це корисний приклад для підкласу Enum для додавання або зміни іншої "
"поведінки, а також заборони псевдонімів. Якщо єдиною бажаною зміною є "
"заборона псевдонімів, натомість можна використати декоратор :func:`unique`."

#: ../../howto/enum.rst:1413
msgid "Planet"
msgstr "Планета"

#: ../../howto/enum.rst:1415
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined, the value of the enum "
"member will be passed to those methods::"
msgstr ""

#: ../../howto/enum.rst:1444
msgid "TimePeriod"
msgstr "Період часу"

#: ../../howto/enum.rst:1446
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "Приклад використання атрибута :attr:`_ignore_`::"

#: ../../howto/enum.rst:1465
msgid "Subclassing EnumType"
msgstr "Підклас EnumType"

#: ../../howto/enum.rst:1467
msgid ""
"While most enum needs can be met by customizing :class:`Enum` subclasses, "
"either with class decorators or custom functions, :class:`EnumType` can be "
"subclassed to provide a different Enum experience."
msgstr ""
"У той час як більшість потреб enum можна задовольнити, налаштувавши "
"підкласи :class:`Enum`, або за допомогою декораторів класів, або "
"користувацьких функцій, :class:`EnumType` можна створити підкласи, щоб "
"забезпечити інший досвід Enum."
