# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr "політики"

#: ../../library/asyncio-policy.rst:12
msgid ""
"Policies are deprecated and will be removed in Python 3.16. Users are "
"encouraged to use the :func:`asyncio.run` function or the :class:`asyncio."
"Runner` with *loop_factory* to use the desired loop implementation."
msgstr ""

#: ../../library/asyncio-policy.rst:18
msgid ""
"An event loop policy is a global object used to get and set the current :ref:"
"`event loop <asyncio-event-loop>`, as well as create new event loops. The "
"default policy can be :ref:`replaced <asyncio-policy-get-set>` with :ref:"
"`built-in alternatives <asyncio-policy-builtin>` to use different event loop "
"implementations, or substituted by a :ref:`custom policy <asyncio-custom-"
"policies>` that can override these behaviors."
msgstr ""

#: ../../library/asyncio-policy.rst:27
msgid ""
"The :ref:`policy object <asyncio-policy-objects>` gets and sets a separate "
"event loop per *context*. This is per-thread by default, though custom "
"policies could define *context* differently."
msgstr ""

#: ../../library/asyncio-policy.rst:32
msgid ""
"Custom event loop policies can control the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop`."
msgstr ""

#: ../../library/asyncio-policy.rst:35
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""
"Об’єкти політики мають реалізовувати API, визначені в :class:"
"`AbstractEventLoopPolicy` абстрактному базовому класі."

#: ../../library/asyncio-policy.rst:42
msgid "Getting and Setting the Policy"
msgstr "Отримання та налаштування політики"

#: ../../library/asyncio-policy.rst:44
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""
"Наступні функції можна використовувати для отримання та налаштування "
"політики для поточного процесу:"

#: ../../library/asyncio-policy.rst:49
msgid "Return the current process-wide policy."
msgstr "Повернути поточну політику для всього процесу."

#: ../../library/asyncio-policy.rst:51
msgid ""
"The :func:`get_event_loop_policy` function is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:57
msgid "Set the current process-wide policy to *policy*."
msgstr "Установіть поточну політику для всього процесу на *policy*."

#: ../../library/asyncio-policy.rst:59
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""
"Якщо *policy* встановлено на ``None``, політика за замовчуванням буде "
"відновлена."

#: ../../library/asyncio-policy.rst:61
msgid ""
"The :func:`set_event_loop_policy` function is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:69
msgid "Policy Objects"
msgstr "Об'єкти політики"

#: ../../library/asyncio-policy.rst:71
msgid "The abstract event loop policy base class is defined as follows:"
msgstr ""
"Базовий клас політики абстрактного циклу подій визначається наступним чином:"

#: ../../library/asyncio-policy.rst:75
msgid "An abstract base class for asyncio policies."
msgstr "Абстрактний базовий клас для асинхронних політик."

#: ../../library/asyncio-policy.rst:79
msgid "Get the event loop for the current context."
msgstr "Отримати цикл подій для поточного контексту."

#: ../../library/asyncio-policy.rst:81
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""
"Повертає об’єкт циклу подій, що реалізує інтерфейс :class:"
"`AbstractEventLoop`."

#: ../../library/asyncio-policy.rst:84 ../../library/asyncio-policy.rst:96
msgid "This method should never return ``None``."
msgstr "Цей метод ніколи не повинен повертати ``None``."

#: ../../library/asyncio-policy.rst:90
msgid "Set the event loop for the current context to *loop*."
msgstr "Встановіть для циклу подій для поточного контексту значення *loop*."

#: ../../library/asyncio-policy.rst:94
msgid "Create and return a new event loop object."
msgstr "Створити та повернути новий об’єкт циклу подій."

#: ../../library/asyncio-policy.rst:98
msgid ""
"The :class:`AbstractEventLoopPolicy` class is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:105
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio поставляється з такими вбудованими політиками:"

#: ../../library/asyncio-policy.rst:110
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on Unix and :"
"class:`ProactorEventLoop` on Windows."
msgstr ""
"Стандартна асинхронна політика. Використовує :class:`SelectorEventLoop` в "
"Unix і :class:`ProactorEventLoop` у Windows."

#: ../../library/asyncio-policy.rst:113
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""
"Немає необхідності встановлювати стандартну політику вручну. asyncio "
"налаштовано на автоматичне використання політики за замовчуванням."

#: ../../library/asyncio-policy.rst:118
msgid "On Windows, :class:`ProactorEventLoop` is now used by default."
msgstr ""
"У Windows :class:`ProactorEventLoop` тепер використовується за замовчуванням."

#: ../../library/asyncio-policy.rst:120
msgid ""
"The :meth:`get_event_loop` method of the default asyncio policy now raises "
"a :exc:`RuntimeError` if there is no set event loop."
msgstr ""

#: ../../library/asyncio-policy.rst:124
msgid ""
"The :class:`DefaultEventLoopPolicy` class is deprecated and will be removed "
"in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:131
msgid ""
"An alternative event loop policy that uses the :class:`SelectorEventLoop` "
"event loop implementation."
msgstr ""
"Альтернативна політика циклу подій, яка використовує реалізацію циклу подій :"
"class:`SelectorEventLoop`."

#: ../../library/asyncio-policy.rst:134 ../../library/asyncio-policy.rst:146
msgid "Availability"
msgstr ""

#: ../../library/asyncio-policy.rst:136
msgid ""
"The :class:`WindowsSelectorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:143
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""
"Альтернативна політика циклу подій, яка використовує реалізацію циклу подій :"
"class:`ProactorEventLoop`."

#: ../../library/asyncio-policy.rst:148
msgid ""
"The :class:`WindowsProactorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ""

#: ../../library/asyncio-policy.rst:156
msgid "Custom Policies"
msgstr "Спеціальна політика"

#: ../../library/asyncio-policy.rst:158
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""
"Щоб запровадити нову політику циклу подій, рекомендується створити підклас :"
"class:`DefaultEventLoopPolicy` і перевизначити методи, для яких потрібна "
"спеціальна поведінка, наприклад::"

#: ../../library/asyncio-policy.rst:162
msgid ""
"class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):\n"
"\n"
"    def get_event_loop(self):\n"
"        \"\"\"Get the event loop.\n"
"\n"
"        This may be None or an instance of EventLoop.\n"
"        \"\"\"\n"
"        loop = super().get_event_loop()\n"
"        # Do something with loop ...\n"
"        return loop\n"
"\n"
"asyncio.set_event_loop_policy(MyEventLoopPolicy())"
msgstr ""
