# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 18:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- Абстрактні базові класи для контейнерів"

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "Раніше цей модуль був частиною модуля :mod:`collections`."

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**Вихідний код:** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""
"Цей модуль надає :term:`абстрактні базові класи <abstract base class>`, які "
"можна використовувати, щоб перевірити, чи надає клас певний інтерфейс; "
"наприклад, чи є він хешованим, чи це відображення."

#: ../../library/collections.abc.rst:27
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"Ці абстрактні класи тепер підтримують ``[]``. Див. :ref:`types-genericalias` "
"і :pep:`585`."

#: ../../library/collections.abc.rst:34
msgid "Collections Abstract Base Classes"
msgstr "Колекції Абстрактні базові класи"

#: ../../library/collections.abc.rst:36
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "Модуль колекцій пропонує наступне :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:41
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:41
msgid "Inherits from"
msgstr "Успадковує від"

#: ../../library/collections.abc.rst:41
msgid "Abstract Methods"
msgstr "Методи реферату"

#: ../../library/collections.abc.rst:41
msgid "Mixin Methods"
msgstr "Методи Міксіна"

#: ../../library/collections.abc.rst:43
msgid ":class:`Container`"
msgstr ""

#: ../../library/collections.abc.rst:43
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:44
msgid ":class:`Hashable`"
msgstr ""

#: ../../library/collections.abc.rst:44
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
#: ../../library/collections.abc.rst:47
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:46
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:48
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:46
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:47
msgid ":class:`Reversible`"
msgstr ""

#: ../../library/collections.abc.rst:47
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:48
msgid ":class:`Generator`"
msgstr ""

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:96
msgid "``send``, ``throw``"
msgstr "``відправити``, ``кинути``"

#: ../../library/collections.abc.rst:48
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``закрити``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:49 ../../library/collections.abc.rst:88
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:50
msgid ":class:`Callable`"
msgstr ""

#: ../../library/collections.abc.rst:50
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
#: ../../library/collections.abc.rst:77
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:51
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:51 ../../library/collections.abc.rst:67
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:58
#: ../../library/collections.abc.rst:64
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:55
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:55 ../../library/collections.abc.rst:64
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:55
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index`` і ``count``"

#: ../../library/collections.abc.rst:58
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:58
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``вставити``"

#: ../../library/collections.abc.rst:58
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"Успадковані методи :class:`Sequence` і ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove`` і ``__iadd__``"

#: ../../library/collections.abc.rst:64
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:64
msgid "Inherited :class:`Sequence` methods"
msgstr "Успадковані методи :class:`Sequence`"

#: ../../library/collections.abc.rst:67 ../../library/collections.abc.rst:71
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:67
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__`` і ``isdisjoint``"

#: ../../library/collections.abc.rst:71
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:71
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:71
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"Успадковані методи :class:`Set` і ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__`` та ``__isub__``"

#: ../../library/collections.abc.rst:77 ../../library/collections.abc.rst:81
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:77
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:77
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__`` і "
"``__ne__``"

#: ../../library/collections.abc.rst:81
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:81
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:81
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"Успадковані методи :class:`Mapping` і ``pop``, ``popitem``, ``clear``, "
"``update`` і ``setdefault``"

#: ../../library/collections.abc.rst:88
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:89
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:89 ../../library/collections.abc.rst:91
#: ../../library/collections.abc.rst:93
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:91
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:93
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:95 ../../library/collections.abc.rst:96
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:95
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:96
msgid ":class:`Coroutine`"
msgstr ""

#: ../../library/collections.abc.rst:96
msgid "``close``"
msgstr "``закрити``"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:97 ../../library/collections.abc.rst:98
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:98 ../../library/collections.abc.rst:99
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:98
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:99
msgid ":class:`AsyncGenerator`"
msgstr ""

#: ../../library/collections.abc.rst:99
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:99
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:105
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr "ABC для класів, які забезпечують метод :meth:`__contains__`."

#: ../../library/collections.abc.rst:109
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr "ABC для класів, які забезпечують метод :meth:`__hash__`."

#: ../../library/collections.abc.rst:113
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr "ABC для класів, які забезпечують метод :meth:`__len__`."

#: ../../library/collections.abc.rst:117
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr "ABC для класів, які забезпечують метод :meth:`__call__`."

#: ../../library/collections.abc.rst:121
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "ABC для класів, які забезпечують метод :meth:`__iter__`."

#: ../../library/collections.abc.rst:123
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"Перевірка ``isinstance(obj, Iterable)`` виявляє класи, які зареєстровані як :"
"class:`Iterable` або які мають метод :meth:`__iter__`, але не виявляє класи, "
"які виконують ітерацію з :meth:`__getitem__` метод. Єдиний надійний спосіб "
"визначити, чи є об’єкт :term:`iterable`, це викликати ``iter(obj)``."

#: ../../library/collections.abc.rst:131
msgid "ABC for sized iterable container classes."
msgstr "ABC для класів ітерованих контейнерів розміру."

#: ../../library/collections.abc.rst:137
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
"ABC для класів, які забезпечують методи :meth:`~iterator.__iter__` і :meth:"
"`~iterator.__next__`. Дивіться також визначення :term:`iterator`."

#: ../../library/collections.abc.rst:143
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr ""
"ABC для ітерованих класів, які також забезпечують метод :meth:`__reversed__`."

#: ../../library/collections.abc.rst:150
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, :meth:`~generator."
"throw` and :meth:`~generator.close` methods. See also the definition of :"
"term:`generator`."
msgstr ""
"ABC для класів генераторів, які реалізують протокол, визначений у :pep:"
"`342`, який розширює ітератори за допомогою :meth:`~generator.send`, :meth:"
"`~generator.throw` і :meth:`~generator.close` методи. Дивіться також "
"визначення :term:`generator`."

#: ../../library/collections.abc.rst:161
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""
"Азбука для доступних лише для читання та змінних :term:`послідовностей "
"<sequence>`."

#: ../../library/collections.abc.rst:163
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, :"
"meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would "
"be with a linked list), the mixins will have quadratic performance and will "
"likely need to be overridden."
msgstr ""
"Примітка щодо реалізації: деякі методи mixin, такі як :meth:`__iter__`, :"
"meth:`__reversed__` і :meth:`index`, здійснюють повторні виклики основного "
"методу :meth:`__getitem__`. Отже, якщо :meth:`__getitem__` реалізовано з "
"постійною швидкістю доступу, методи mixin матимуть лінійну продуктивність; "
"однак, якщо основний метод є лінійним (як це було б зі зв’язаним списком), "
"міксини матимуть квадратичну продуктивність і, ймовірно, їх потрібно буде "
"перевизначити."

#: ../../library/collections.abc.rst:172
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "Метод index() додав підтримку аргументів *stop* і *start*."

#: ../../library/collections.abc.rst:179
msgid "ABCs for read-only and mutable sets."
msgstr "Азбука для доступних лише для читання та змінних наборів."

#: ../../library/collections.abc.rst:184
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "Азбука лише для читання та змінних :term:`відображення <mapping>`."

#: ../../library/collections.abc.rst:191
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"Азбука зіставлення, елементів, ключів і значень :term:`views <dictionary "
"view>`."

#: ../../library/collections.abc.rst:195
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
"ABC для об’єктів :term:`awaitable`, які можна використовувати у виразах :"
"keyword:`await`. Спеціальні реалізації повинні надавати метод :meth:"
"`__await__`."

#: ../../library/collections.abc.rst:199
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`Coroutine <coroutine>` об’єкти та екземпляри :class:`~collections.abc."
"Coroutine` ABC є екземплярами цього ABC."

#: ../../library/collections.abc.rst:203
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:213
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`__await__`.  All :class:`Coroutine` instances are "
"also instances of :class:`Awaitable`.  See also the definition of :term:"
"`coroutine`."
msgstr ""
"ABC для співпрограм сумісних класів. Вони реалізують такі методи, визначені "
"в :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:`~coroutine."
"throw` і :meth:`~coroutine.close`. Спеціальні реалізації також мають "
"реалізовувати :meth:`__await__`. Усі екземпляри :class:`Coroutine` також є "
"екземплярами :class:`Awaitable`. Дивіться також визначення :term:`coroutine`."

#: ../../library/collections.abc.rst:221
msgid ""
"In CPython, generator-based coroutines (generators decorated with :func:"
"`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even "
"though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:231
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""
"ABC для класів, які забезпечують метод ``__aiter__``. Дивіться також "
"визначення :term:`asynchronous iterable`."

#: ../../library/collections.abc.rst:238
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"ABC для класів, які надають методи ``__aiter__`` і ``__anext__``. Дивіться "
"також визначення :term:`asynchronous iterator`."

#: ../../library/collections.abc.rst:245
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""
"ABC для класів асинхронних генераторів, які реалізують протокол, визначений "
"у :pep:`525` і :pep:`492`."

#: ../../library/collections.abc.rst:251
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

#: ../../library/collections.abc.rst:258
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""
"Деякі з ABC також корисні як міксини, які спрощують розробку класів, що "
"підтримують контейнерні API. Наприклад, щоб написати клас, який підтримує "
"повний API :class:`Set`, необхідно лише надати три основні абстрактні "
"методи: :meth:`__contains__`, :meth:`__iter__` і :meth:`__len__`. ABC надає "
"інші методи, такі як :meth:`__and__` і :meth:`isdisjoint`::"

#: ../../library/collections.abc.rst:287
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""
"Примітки щодо використання :class:`Set` і :class:`MutableSet` як міксину:"

#: ../../library/collections.abc.rst:290
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"Оскільки деякі операції з наборами створюють нові набори, стандартні методи "
"mixin потребують способу створення нових екземплярів із ітерованого. "
"Передбачається, що конструктор класу має підпис у формі "
"``ClassName(iterable)``. Це припущення віднесено до внутрішнього методу "
"класу під назвою :meth:`_from_iterable`, який викликає ``cls(iterable)`` для "
"створення нового набору. Якщо міксин :class:`Set` використовується в класі з "
"іншою сигнатурою конструктора, вам потрібно буде замінити :meth:"
"`_from_iterable` методом класу або звичайним методом, який може створювати "
"нові екземпляри з ітерованого аргументу."

#: ../../library/collections.abc.rst:301
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"Щоб перевизначити порівняння (мабуть, для швидкості, оскільки семантика "
"фіксована), перевизначте :meth:`__le__` і :meth:`__ge__`, тоді інші операції "
"автоматично наслідуватимуть цей приклад."

#: ../../library/collections.abc.rst:306
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""
"Міксин :class:`Set` надає метод :meth:`_hash` для обчислення хеш-значення "
"для набору; однак :meth:`__hash__` не визначено, тому що не всі набори "
"хешуються або незмінні. Щоб додати хешованість набору за допомогою міксинів, "
"успадкуйте від обох :meth:`Set` і :meth:`Hashable`, а потім визначте "
"``__hash__ = Set._hash``."

#: ../../library/collections.abc.rst:314
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
"`Рецепт OrderedSet <https://code.activestate.com/recipes/576694/>`_ для "
"прикладу, побудованого на :class:`MutableSet`."

#: ../../library/collections.abc.rst:317
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"Щоб дізнатися більше про ABC, перегляньте модуль :mod:`abc` і :pep:`3119`."
