# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-17 15:04+0000\n"
"PO-Revision-Date: 2025-09-15 01:04+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/inspect.rst:2
msgid ":mod:`!inspect` --- Inspect live objects"
msgstr ""

#: ../../library/inspect.rst:15
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Вихідний код:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:19
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
"Модуль :mod:`inspect` надає кілька корисних функцій, які допомагають "
"отримати інформацію про живі об’єкти, такі як модулі, класи, методи, "
"функції, відстеження, об’єкти фрейму та об’єкти коду. Наприклад, це може "
"допомогти вам вивчити вміст класу, отримати вихідний код методу, витягти та "
"відформатувати список аргументів для функції або отримати всю інформацію, "
"необхідну для відображення детального відстеження."

#: ../../library/inspect.rst:26
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""
"Цей модуль надає чотири основні види послуг: перевірка типу, отримання "
"вихідного коду, перевірка класів і функцій і перевірка стека інтерпретатора."

#: ../../library/inspect.rst:34
msgid "Types and members"
msgstr "Типи та члени"

#: ../../library/inspect.rst:36
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes (see :ref:`import-mod-attrs` for module "
"attributes):"
msgstr ""

#: ../../library/inspect.rst:46
msgid "Type"
msgstr "Тип"

#: ../../library/inspect.rst:46
msgid "Attribute"
msgstr "Атрибут"

#: ../../library/inspect.rst:46
msgid "Description"
msgstr "опис"

#: ../../library/inspect.rst:48
msgid "class"
msgstr "клас"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:264
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:264
msgid "documentation string"
msgstr "рядок документації"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:65
#: ../../library/inspect.rst:83 ../../library/inspect.rst:217
#: ../../library/inspect.rst:234 ../../library/inspect.rst:247
#: ../../library/inspect.rst:266
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:50
msgid "name with which this class was defined"
msgstr "ім'я, з яким було визначено цей клас"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:219
#: ../../library/inspect.rst:236 ../../library/inspect.rst:249
#: ../../library/inspect.rst:269
msgid "__qualname__"
msgstr "__qualname__"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:219
#: ../../library/inspect.rst:236 ../../library/inspect.rst:249
#: ../../library/inspect.rst:269
msgid "qualified name"
msgstr "кваліфіковане ім'я"

#: ../../library/inspect.rst:55 ../../library/inspect.rst:78
#: ../../library/inspect.rst:116
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr "ім'я модуля, в якому був визначений цей клас"

#: ../../library/inspect.rst:58 ../../library/inspect.rst:111
msgid "__type_params__"
msgstr ""

#: ../../library/inspect.rst:58
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"class"
msgstr ""

#: ../../library/inspect.rst:63
msgid "method"
msgstr "метод"

#: ../../library/inspect.rst:65
msgid "name with which this method was defined"
msgstr "ім'я, з яким було визначено цей метод"

#: ../../library/inspect.rst:70
msgid "__func__"
msgstr "__func__"

#: ../../library/inspect.rst:70
msgid "function object containing implementation of method"
msgstr "об'єкт функції, що містить реалізацію методу"

#: ../../library/inspect.rst:74 ../../library/inspect.rst:271
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:74
msgid "instance to which this method is bound, or ``None``"
msgstr "екземпляр, до якого прив’язаний цей метод, або ``None``"

#: ../../library/inspect.rst:78
msgid "name of module in which this method was defined"
msgstr "ім'я модуля, в якому був визначений цей метод"

#: ../../library/inspect.rst:81
msgid "function"
msgstr "функція"

#: ../../library/inspect.rst:83
msgid "name with which this function was defined"
msgstr "ім'я, з яким ця функція була визначена"

#: ../../library/inspect.rst:88
msgid "__code__"
msgstr "__code__"

#: ../../library/inspect.rst:88
msgid "code object containing compiled function :term:`bytecode`"
msgstr "об'єкт коду, що містить скомпільовану функцію :term:`bytecode`"

#: ../../library/inspect.rst:92
msgid "__defaults__"
msgstr "__defaults__"

#: ../../library/inspect.rst:92
msgid "tuple of any default values for positional or keyword parameters"
msgstr ""
"кортеж із будь-якими значеннями за замовчуванням для позиційних або ключових "
"параметрів"

#: ../../library/inspect.rst:96
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../../library/inspect.rst:96
msgid "mapping of any default values for keyword-only parameters"
msgstr ""
"відображення будь-яких значень за замовчуванням для параметрів, які містять "
"лише ключові слова"

#: ../../library/inspect.rst:100
msgid "__globals__"
msgstr "__globals__"

#: ../../library/inspect.rst:100
msgid "global namespace in which this function was defined"
msgstr "глобальний простір імен, у якому була визначена ця функція"

#: ../../library/inspect.rst:103
msgid "__builtins__"
msgstr "__builtins__"

#: ../../library/inspect.rst:103
msgid "builtins namespace"
msgstr "вбудований простір імен"

#: ../../library/inspect.rst:105
msgid "__annotations__"
msgstr "__annotations__"

#: ../../library/inspect.rst:105
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""
"зіставлення назв параметрів з анотаціями; Ключ ``\"return\"`` зарезервовано "
"для анотацій повернення."

#: ../../library/inspect.rst:111
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"function"
msgstr ""

#: ../../library/inspect.rst:116
msgid "name of module in which this function was defined"
msgstr "ім'я модуля, в якому була визначена ця функція"

#: ../../library/inspect.rst:119
msgid "traceback"
msgstr "traceback"

#: ../../library/inspect.rst:119
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:119
msgid "frame object at this level"
msgstr "кадрувати об’єкт на цьому рівні"

#: ../../library/inspect.rst:122
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:122 ../../library/inspect.rst:144
msgid "index of last attempted instruction in bytecode"
msgstr "індекс останньої спроби вказівки в байт-коді"

#: ../../library/inspect.rst:125
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:125 ../../library/inspect.rst:147
msgid "current line number in Python source code"
msgstr "номер поточного рядка у вихідному коді Python"

#: ../../library/inspect.rst:128
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:128
msgid "next inner traceback object (called by this level)"
msgstr "наступний внутрішній об'єкт трасування (викликається цим рівнем)"

#: ../../library/inspect.rst:132 ../../library/inspect.rst:221
#: ../../library/inspect.rst:241 ../../library/inspect.rst:254
msgid "frame"
msgstr "frame"

#: ../../library/inspect.rst:132
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:132
msgid "next outer frame object (this frame's caller)"
msgstr "наступний зовнішній об'єкт фрейму (виклик цього фрейму)"

#: ../../library/inspect.rst:135
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:135
msgid "builtins namespace seen by this frame"
msgstr "вбудований простір імен, видимий цим фреймом"

#: ../../library/inspect.rst:138
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:138
msgid "code object being executed in this frame"
msgstr "об'єкт коду, який виконується в цьому кадрі"

#: ../../library/inspect.rst:141
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:141
msgid "global namespace seen by this frame"
msgstr "глобальний простір імен, видимий цим кадром"

#: ../../library/inspect.rst:144
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:147
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:150
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:150
msgid "local namespace seen by this frame"
msgstr "локальний простір імен, видимий цим кадром"

#: ../../library/inspect.rst:153
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:153
msgid "tracing function for this frame, or ``None``"
msgstr "функція трасування для цього кадру або ``None``"

#: ../../library/inspect.rst:156 ../../library/inspect.rst:228
#: ../../library/inspect.rst:245 ../../library/inspect.rst:258
msgid "code"
msgstr "код"

#: ../../library/inspect.rst:156
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:156
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""
"кількість аргументів (не враховуючи лише аргументи ключового слова, \\* або "
"\\*\\* аргументи)"

#: ../../library/inspect.rst:161
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:161
msgid "string of raw compiled bytecode"
msgstr "рядок необробленого скомпільованого байт-коду"

#: ../../library/inspect.rst:164
msgid "co_cellvars"
msgstr "co_cellvars"

#: ../../library/inspect.rst:164
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr "кортеж імен змінних комірки (на які посилаються області, що містять)"

#: ../../library/inspect.rst:168
msgid "co_consts"
msgstr "co_conts"

#: ../../library/inspect.rst:168
msgid "tuple of constants used in the bytecode"
msgstr "кортеж констант, що використовуються в байт-коді"

#: ../../library/inspect.rst:171
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:171
msgid "name of file in which this code object was created"
msgstr "ім'я файлу, в якому створено цей об'єкт коду"

#: ../../library/inspect.rst:175
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:175
msgid "number of first line in Python source code"
msgstr "номер першого рядка у вихідному коді Python"

#: ../../library/inspect.rst:178
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:178
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""
"растрова карта прапорів ``CO_*``, читайте більше :ref:`тут <inspect-module-"
"co-flags>`"

#: ../../library/inspect.rst:182
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:182
msgid "encoded mapping of line numbers to bytecode indices"
msgstr "кодоване відображення номерів рядків в індекси байт-коду"

#: ../../library/inspect.rst:186
msgid "co_freevars"
msgstr "co_freevars"

#: ../../library/inspect.rst:186
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr ""
"кортеж імен вільних змінних (на які посилаються через закриття функції)"

#: ../../library/inspect.rst:190
msgid "co_posonlyargcount"
msgstr "co_posonlyargcount"

#: ../../library/inspect.rst:190
msgid "number of positional only arguments"
msgstr "кількість лише позиційних аргументів"

#: ../../library/inspect.rst:193
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: ../../library/inspect.rst:193
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr ""
"кількість аргументів лише для ключових слів (не враховуючи аргумент \\*\\*)"

#: ../../library/inspect.rst:197
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:197
msgid "name with which this code object was defined"
msgstr "ім'я, з яким було визначено цей об'єкт коду"

#: ../../library/inspect.rst:200
msgid "co_qualname"
msgstr ""

#: ../../library/inspect.rst:200
msgid "fully qualified name with which this code object was defined"
msgstr ""

#: ../../library/inspect.rst:204
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:204
msgid "tuple of names other than arguments and function locals"
msgstr "кортеж імен, відмінних від аргументів і локальних параметрів функції"

#: ../../library/inspect.rst:208
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:208
msgid "number of local variables"
msgstr "кількість локальних змінних"

#: ../../library/inspect.rst:210
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:210
msgid "virtual machine stack space required"
msgstr "необхідний простір у стеку віртуальної машини"

#: ../../library/inspect.rst:213
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:213
msgid "tuple of names of arguments and local variables"
msgstr "кортеж імен аргументів і локальних змінних"

#: ../../library/inspect.rst:217
msgid "generator"
msgstr "generator"

#: ../../library/inspect.rst:217 ../../library/inspect.rst:234
#: ../../library/inspect.rst:247
msgid "name"
msgstr "name"

#: ../../library/inspect.rst:221
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:223
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:223 ../../library/inspect.rst:243
msgid "is the generator running?"
msgstr "чи працює генератор?"

#: ../../library/inspect.rst:225
msgid "gi_suspended"
msgstr ""

#: ../../library/inspect.rst:225
msgid "is the generator suspended?"
msgstr ""

#: ../../library/inspect.rst:228
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:230
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../../library/inspect.rst:230
msgid "object being iterated by ``yield from``, or ``None``"
msgstr "об’єкт повторюється за допомогою ``yield from`` або ``None``"

#: ../../library/inspect.rst:234
msgid "async generator"
msgstr ""

#: ../../library/inspect.rst:238
msgid "ag_await"
msgstr ""

#: ../../library/inspect.rst:238 ../../library/inspect.rst:251
msgid "object being awaited on, or ``None``"
msgstr "об'єкт, який очікується, або ``None``"

#: ../../library/inspect.rst:241
msgid "ag_frame"
msgstr ""

#: ../../library/inspect.rst:243
msgid "ag_running"
msgstr ""

#: ../../library/inspect.rst:245
msgid "ag_code"
msgstr ""

#: ../../library/inspect.rst:247
msgid "coroutine"
msgstr "coroutine"

#: ../../library/inspect.rst:251
msgid "cr_await"
msgstr "cr_await"

#: ../../library/inspect.rst:254
msgid "cr_frame"
msgstr "cr_frame"

#: ../../library/inspect.rst:256
msgid "cr_running"
msgstr "cr_running"

#: ../../library/inspect.rst:256
msgid "is the coroutine running?"
msgstr "чи виконується співпрограма?"

#: ../../library/inspect.rst:258
msgid "cr_code"
msgstr "cr_code"

#: ../../library/inspect.rst:260
msgid "cr_origin"
msgstr "cr_origin"

#: ../../library/inspect.rst:260
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr ""
"де була створена співпрограма, або ``None``. Див. |coroutine-origin-link|"

#: ../../library/inspect.rst:264
msgid "builtin"
msgstr "builtin"

#: ../../library/inspect.rst:266
msgid "original name of this function or method"
msgstr "оригінальна назва цієї функції або методу"

#: ../../library/inspect.rst:271
msgid "instance to which a method is bound, or ``None``"
msgstr "екземпляр, до якого прив’язаний метод, або ``None``"

#: ../../library/inspect.rst:278
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr "Додайте атрибути ``__qualname__`` і ``gi_yieldfrom`` до генераторів."

#: ../../library/inspect.rst:280
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""
"Атрибут ``__name__`` генераторів тепер встановлюється з імені функції, а не "
"з кодового імені, і тепер його можна змінювати."

#: ../../library/inspect.rst:285
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr "Додайте атрибут ``cr_origin`` до співпрограм."

#: ../../library/inspect.rst:289
msgid "Add ``__builtins__`` attribute to functions."
msgstr "Додайте атрибут ``__builtins__`` до функцій."

#: ../../library/inspect.rst:293
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which "
"the predicate returns a true value are included."
msgstr ""
"Повертає всі члени об’єкта в списку пар ``(ім’я, значення)``, відсортованих "
"за назвою. Якщо вказано необов’язковий аргумент *предикат*, який буде "
"викликано з об’єктом ``значення`` кожного члена, будуть включені лише ті "
"члени, для яких предикат повертає справжнє значення."

#: ../../library/inspect.rst:300
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`~object.__dir__`."
msgstr ""

#: ../../library/inspect.rst:307
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""

#: ../../library/inspect.rst:314
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""

#: ../../library/inspect.rst:325
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""
"Повертає ім’я модуля, названого *шляхом* до файлу, без назв пакетів, що "
"входять до нього. Розширення файлу перевіряється на всі записи в :func:"
"`importlib.machinery.all_suffixes`. Якщо він збігається, остаточний "
"компонент шляху повертається з видаленим розширенням. В іншому випадку "
"повертається ``None``."

#: ../../library/inspect.rst:331
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""
"Зауважте, що ця функція *тільки* повертає значущу назву для фактичних "
"модулів Python - шляхи, які потенційно посилаються на пакети Python, все "
"одно повертатимуть ``None``."

#: ../../library/inspect.rst:335
msgid "The function is based directly on :mod:`importlib`."
msgstr "Функція базується безпосередньо на :mod:`importlib`."

#: ../../library/inspect.rst:341
msgid "Return ``True`` if the object is a module."
msgstr "Повертає ``True``, якщо об’єкт є модулем."

#: ../../library/inspect.rst:346
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""
"Повертає ``True``, якщо об’єкт є класом, вбудованим чи створеним у коді "
"Python."

#: ../../library/inspect.rst:352
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr ""
"Повертає ``True``, якщо об’єкт є зв’язаним методом, написаним на Python."

#: ../../library/inspect.rst:357
msgid ""
"Return ``True`` if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""
"Повертає ``True``, якщо об’єкт є функцією Python, яка включає функції, "
"створені виразом :term:`lambda`."

#: ../../library/inspect.rst:363
msgid "Return ``True`` if the object is a Python generator function."
msgstr "Повертає ``True``, якщо об’єкт є функцією генератора Python."

#: ../../library/inspect.rst:365
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr ""
"Функції, загорнуті в :func:`functools.partial`, тепер повертають ``True``, "
"якщо загорнута функція є функцією генератора Python."

#: ../../library/inspect.rst:369
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:375
msgid "Return ``True`` if the object is a generator."
msgstr "Повертає ``True``, якщо об’єкт є генератором."

#: ../../library/inspect.rst:380
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax), a :func:`functools.partial` "
"wrapping a :term:`coroutine function`, or a sync function marked with :func:"
"`markcoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:387
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr ""
"Функції, загорнуті в :func:`functools.partial`, тепер повертають ``True``, "
"якщо загорнута функція є :term:`coroutine function`."

#: ../../library/inspect.rst:391
msgid ""
"Sync functions marked with :func:`markcoroutinefunction` now return ``True``."
msgstr ""

#: ../../library/inspect.rst:395 ../../library/inspect.rst:465
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a :term:`coroutine function`."
msgstr ""

#: ../../library/inspect.rst:402
msgid ""
"Decorator to mark a callable as a :term:`coroutine function` if it would not "
"otherwise be detected by :func:`iscoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:405
msgid ""
"This may be of use for sync functions that return a :term:`coroutine`, if "
"the function is passed to an API that requires :func:`iscoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:408
msgid ""
"When possible, using an :keyword:`async def` function is preferred. Also "
"acceptable is calling the function and testing the return with :func:"
"`iscoroutine`."
msgstr ""

#: ../../library/inspect.rst:417
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an :keyword:"
"`async def` function."
msgstr ""
"Повертає ``True``, якщо об’єкт є :term:`coroutine`, створеною функцією :"
"keyword:`async def`."

#: ../../library/inspect.rst:425
msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""
"Повертає ``True``, якщо об’єкт можна використовувати у виразі :keyword:"
"`await`."

#: ../../library/inspect.rst:427
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators:"
msgstr ""

#: ../../library/inspect.rst:430
msgid ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"
msgstr ""

#: ../../library/inspect.rst:448
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function, "
"for example:"
msgstr ""

#: ../../library/inspect.rst:451
msgid ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"
msgstr ""

#: ../../library/inspect.rst:461
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is an :term:`asynchronous generator` function."
msgstr ""

#: ../../library/inspect.rst:471
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""
"Повертає ``True``, якщо об’єкт є :term:`asynchronous generator iterator`, "
"створеним функцією :term:`asynchronous generator`."

#: ../../library/inspect.rst:478
msgid "Return ``True`` if the object is a traceback."
msgstr "Повертає ``True``, якщо об’єкт є трасуванням."

#: ../../library/inspect.rst:483
msgid "Return ``True`` if the object is a frame."
msgstr "Повертає ``True``, якщо об’єкт є фреймом."

#: ../../library/inspect.rst:488
msgid "Return ``True`` if the object is a code."
msgstr "Повертає ``True``, якщо об’єкт є кодом."

#: ../../library/inspect.rst:493
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""
"Повертає ``True``, якщо об’єкт є вбудованою функцією або зв’язаним "
"вбудованим методом."

#: ../../library/inspect.rst:498
msgid ""
"Return ``True`` if the type of object is a :class:`~types.MethodWrapperType`."
msgstr ""

#: ../../library/inspect.rst:500
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as :meth:"
"`~object.__str__`, :meth:`~object.__eq__` and :meth:`~object.__repr__`."
msgstr ""

#: ../../library/inspect.rst:508
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""
"Повертає ``True``, якщо об’єкт є визначеною користувачем або вбудованою "
"функцією чи методом."

#: ../../library/inspect.rst:513
msgid "Return ``True`` if the object is an abstract base class."
msgstr "Повертає ``True``, якщо об’єкт є абстрактним базовим класом."

#: ../../library/inspect.rst:518
msgid ""
"Return ``True`` if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""
"Повертає ``True``, якщо об’єкт є дескриптором методу, але не якщо :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` або :func:`isbuiltin` є "
"істинними."

#: ../../library/inspect.rst:522
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method, but not a :meth:`~object.__set__` "
"method or a :meth:`~object.__delete__` method.  Beyond that, the set of "
"attributes varies.  A :attr:`~definition.__name__` attribute is usually "
"sensible, and :attr:`~definition.__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:528
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having the :attr:"
"`~method.__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

#: ../../library/inspect.rst:534
msgid ""
"This function no longer incorrectly reports objects with :meth:`~object."
"__get__` and :meth:`~object.__delete__`, but not :meth:`~object.__set__`, as "
"being method descriptors (such objects are data descriptors, not method "
"descriptors)."
msgstr ""

#: ../../library/inspect.rst:542
msgid "Return ``True`` if the object is a data descriptor."
msgstr "Повертає ``True``, якщо об’єкт є дескриптором даних."

#: ../../library/inspect.rst:544
msgid ""
"Data descriptors have a :attr:`~object.__set__` or a :attr:`~object."
"__delete__` method. Examples are properties (defined in Python), getsets, "
"and members.  The latter two are defined in C and there are more specific "
"tests available for those types, which is robust across Python "
"implementations.  Typically, data descriptors will also have :attr:"
"`~definition.__name__` and :attr:`!__doc__` attributes (properties, getsets, "
"and members have both of these attributes), but this is not guaranteed."
msgstr ""

#: ../../library/inspect.rst:555
msgid "Return ``True`` if the object is a getset descriptor."
msgstr "Повертає ``True``, якщо об’єкт є дескриптором getset."

#: ../../library/inspect.rst:559
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"getsets — це атрибути, визначені в модулях розширення за допомогою структур :"
"c:type:`PyGetSetDef`. Для реалізацій Python без таких типів цей метод завжди "
"повертатиме ``False``."

#: ../../library/inspect.rst:566
msgid "Return ``True`` if the object is a member descriptor."
msgstr "Повертає ``True``, якщо об’єкт є дескриптором-членом."

#: ../../library/inspect.rst:570
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"Дескриптори членів — це атрибути, визначені в модулях розширення за "
"допомогою структур :c:type:`PyMemberDef`. Для реалізацій Python без таких "
"типів цей метод завжди повертатиме ``False``."

#: ../../library/inspect.rst:578
msgid "Retrieving source code"
msgstr "Отримання вихідного коду"

#: ../../library/inspect.rst:582
msgid ""
"Get the documentation string for an object, cleaned up with :func:"
"`cleandoc`. If the documentation string for an object is not provided and "
"the object is a class, a method, a property or a descriptor, retrieve the "
"documentation string from the inheritance hierarchy. Return ``None`` if the "
"documentation string is invalid or missing."
msgstr ""
"Отримайте рядок документації для об’єкта, очищений за допомогою :func:"
"`cleandoc`. Якщо рядок документації для об’єкта не надано, а об’єкт є "
"класом, методом, властивістю або дескриптором, отримайте рядок документації "
"з ієрархії успадкування. Повертає ``None``, якщо рядок документації "
"недійсний або відсутній."

#: ../../library/inspect.rst:588
msgid "Documentation strings are now inherited if not overridden."
msgstr "Рядки документації тепер успадковуються, якщо не перевизначаються."

#: ../../library/inspect.rst:594
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""
"Повертайте в одному рядку будь-які рядки коментарів безпосередньо перед "
"вихідним кодом об’єкта (для класу, функції чи методу) або у верхній частині "
"вихідного файлу Python (якщо об’єкт є модулем). Якщо вихідний код об’єкта "
"недоступний, поверніть ``None``. Це може статися, якщо об’єкт було визначено "
"в C або інтерактивній оболонці."

#: ../../library/inspect.rst:603
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"Повертає ім’я (текстового або бінарного) файлу, у якому було визначено "
"об’єкт. Це не вдасться з помилкою :exc:`TypeError`, якщо об’єкт є вбудованим "
"модулем, класом або функцією."

#: ../../library/inspect.rst:610
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr ""
"Спробуйте вгадати, у якому модулі було визначено об’єкт. Поверніть ``None``, "
"якщо модуль не можна визначити."

#: ../../library/inspect.rst:616
msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with "
"a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""
"Повертає ім’я вихідного файлу Python, у якому було визначено об’єкт, або "
"``None``, якщо неможливо визначити спосіб отримання джерела. Це не вдасться "
"з помилкою :exc:`TypeError`, якщо об’єкт є вбудованим модулем, класом або "
"функцією."

#: ../../library/inspect.rst:624
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved. A :exc:`TypeError` is raised if the object is a "
"built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:633 ../../library/inspect.rst:647
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""
":exc:`OSError` створюється замість :exc:`IOError`, тепер псевдонім першого."

#: ../../library/inspect.rst:640
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved. A :exc:`TypeError` is raised if the "
"object is a built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:654
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""
"Очистіть відступи з рядків документів, які мають відступ, щоб вирівнюватися "
"з блоками коду."

#: ../../library/inspect.rst:657
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""
"Усі початкові пробіли видаляються з першого рядка. Усі пробіли на початку, "
"які можна рівномірно видалити з другого рядка, видаляються. Порожні рядки на "
"початку та в кінці згодом видаляються. Крім того, усі вкладки розгортаються "
"до пробілів."

#: ../../library/inspect.rst:666
msgid "Introspecting callables with the Signature object"
msgstr "Самоаналіз викликаних за допомогою об’єкта Signature"

#: ../../library/inspect.rst:670
msgid ""
"The :class:`Signature` object represents the call signature of a callable "
"object and its return annotation. To retrieve a :class:`!Signature` object, "
"use the :func:`!signature` function."
msgstr ""

#: ../../library/inspect.rst:677
msgid "Return a :class:`Signature` object for the given *callable*:"
msgstr ""

#: ../../library/inspect.rst:679
msgid ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"
msgstr ""

#: ../../library/inspect.rst:696
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""
"Приймає широкий діапазон викликів Python, від простих функцій і класів до "
"об’єктів :func:`functools.partial`."

#: ../../library/inspect.rst:699
msgid ""
"For objects defined in modules using stringized annotations (``from "
"__future__ import annotations``), :func:`signature` will attempt to "
"automatically un-stringize the annotations using :func:`get_annotations`.  "
"The *globals*, *locals*, and *eval_str* parameters are passed into :func:"
"`get_annotations` when resolving the annotations; see the documentation for :"
"func:`get_annotations` for instructions on how to use these parameters."
msgstr ""

#: ../../library/inspect.rst:708
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and :exc:"
"`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and *eval_str* is not false, the ``eval()`` "
"call(s) to un-stringize the annotations in :func:`get_annotations` could "
"potentially raise any kind of exception."
msgstr ""

#: ../../library/inspect.rst:714
msgid ""
"A slash(/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""
"Слеш (/) у сигнатурі функції означає, що параметри перед нею є лише "
"позиційними. Для отримання додаткової інформації див. :ref:`запис у "
"поширених питаннях щодо позиційних параметрів <faq-positional-only-"
"arguments>`."

#: ../../library/inspect.rst:718
msgid ""
"The *follow_wrapped* parameter was added. Pass ``False`` to get a signature "
"of *callable* specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""

#: ../../library/inspect.rst:724 ../../library/inspect.rst:848
msgid "The *globals*, *locals*, and *eval_str* parameters were added."
msgstr ""

#: ../../library/inspect.rst:729
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"Деякі виклики можуть бути недоступними для інтроспекції в певних реалізаціях "
"Python. Наприклад, у CPython деякі вбудовані функції, визначені в C, не "
"надають метаданих про свої аргументи."

#: ../../library/inspect.rst:735
msgid ""
"If the passed object has a :attr:`!__signature__` attribute, we may use it "
"to create the signature. The exact semantics are an implementation detail "
"and are subject to unannounced changes. Consult the source code for current "
"semantics."
msgstr ""

#: ../../library/inspect.rst:743
msgid ""
"A :class:`!Signature` object represents the call signature of a function and "
"its return annotation.  For each parameter accepted by the function it "
"stores a :class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""

#: ../../library/inspect.rst:748
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""
"Необов’язковий аргумент *parameters* — це послідовність об’єктів :class:"
"`Parameter`, яка перевіряється, щоб перевірити, чи немає параметрів із "
"повторюваними іменами та чи параметри розташовано в правильному порядку, "
"тобто спочатку лише позиційні, а потім позиційні -or-keyword, і що параметри "
"зі значеннями за замовчуванням слідують за параметрами без значень за "
"замовчуванням."

#: ../../library/inspect.rst:754
msgid ""
"The optional *return_annotation* argument can be an arbitrary Python object. "
"It represents the \"return\" annotation of the callable."
msgstr ""

#: ../../library/inspect.rst:757
msgid ""
":class:`!Signature` objects are *immutable*.  Use :meth:`Signature.replace` "
"or :func:`copy.replace` to make a modified copy."
msgstr ""

#: ../../library/inspect.rst:760
msgid ":class:`!Signature` objects are now picklable and :term:`hashable`."
msgstr ""

#: ../../library/inspect.rst:765
msgid "A special class-level marker to specify absence of a return annotation."
msgstr ""
"Спеціальний маркер рівня класу, щоб вказати відсутність анотації повернення."

#: ../../library/inspect.rst:769
msgid ""
"An ordered mapping of parameters' names to the corresponding :class:"
"`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr ""
"Впорядковане зіставлення назв параметрів із відповідними об’єктами :class:"
"`Parameter`. Параметри відображаються в строгому порядку визначення, "
"включаючи параметри лише ключових слів."

#: ../../library/inspect.rst:773 ../../library/inspect.rst:1128
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""
"Python лише явно гарантував, що він зберіг порядок оголошення параметрів "
"лише за ключовими словами, починаючи з версії 3.7, хоча на практиці цей "
"порядок завжди зберігався в Python 3."

#: ../../library/inspect.rst:780
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""
"Анотація \"повернення\" для викликаного. Якщо викликаний не має анотації "
"\"повернення\", цей атрибут має значення :attr:`Signature.empty`."

#: ../../library/inspect.rst:785
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"Створіть відображення позиційних аргументів і аргументів ключових слів на "
"параметри. Повертає :class:`BoundArguments`, якщо ``*args`` і ``**kwargs`` "
"збігаються з підписом, або викликає :exc:`TypeError`."

#: ../../library/inspect.rst:791
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""
"Працює так само, як :meth:`Signature.bind`, але дозволяє пропускати деякі "
"необхідні аргументи (імітує поведінку :func:`functools.partial`). Повертає :"
"class:`BoundArguments` або викликає :exc:`TypeError`, якщо передані "
"аргументи не збігаються з підписом."

#: ../../library/inspect.rst:798
msgid ""
"Create a new :class:`Signature` instance based on the instance :meth:"
"`replace` was invoked on. It is possible to pass different *parameters* and/"
"or *return_annotation* to override the corresponding properties of the base "
"signature.  To remove ``return_annotation`` from the copied :class:`!"
"Signature`, pass in :attr:`Signature.empty`."
msgstr ""

#: ../../library/inspect.rst:806
msgid ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""
msgstr ""

#: ../../library/inspect.rst:816
msgid ""
":class:`Signature` objects are also supported by the generic function :func:"
"`copy.replace`."
msgstr ""

#: ../../library/inspect.rst:821
msgid "Create a string representation of the :class:`Signature` object."
msgstr ""

#: ../../library/inspect.rst:823
msgid ""
"If *max_width* is passed, the method will attempt to fit the signature into "
"lines of at most *max_width* characters. If the signature is longer than "
"*max_width*, all parameters will be on separate lines."
msgstr ""

#: ../../library/inspect.rst:832
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"*obj*."
msgstr ""

#: ../../library/inspect.rst:835
msgid "This method simplifies subclassing of :class:`Signature`:"
msgstr ""

#: ../../library/inspect.rst:837
msgid ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"
msgstr ""

#: ../../library/inspect.rst:844
msgid "Its behavior is otherwise identical to that of :func:`signature`."
msgstr ""

#: ../../library/inspect.rst:854
msgid ""
":class:`!Parameter` objects are *immutable*. Instead of modifying a :class:`!"
"Parameter` object, you can use :meth:`Parameter.replace` or :func:`copy."
"replace` to create a modified copy."
msgstr ""

#: ../../library/inspect.rst:858
msgid "Parameter objects are now picklable and :term:`hashable`."
msgstr ""

#: ../../library/inspect.rst:863
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""
"Спеціальний маркер рівня класу для визначення відсутності значень за "
"замовчуванням і приміток."

#: ../../library/inspect.rst:868
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""
"Ім'я параметра у вигляді рядка. Ім’я має бути дійсним ідентифікатором Python."

#: ../../library/inspect.rst:873
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""
"CPython генерує неявні імена параметрів у формі ``.0`` для об’єктів коду, "
"які використовуються для реалізації розуміння та виразів генератора."

#: ../../library/inspect.rst:877
msgid ""
"These parameter names are now exposed by this module as names like "
"``implicit0``."
msgstr ""

#: ../../library/inspect.rst:883
msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Стандартне значення для параметра. Якщо параметр не має значення за "
"замовчуванням, цей атрибут має значення :attr:`Parameter.empty`."

#: ../../library/inspect.rst:888
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Анотація до параметра. Якщо параметр не має анотації, цей атрибут має "
"значення :attr:`Parameter.empty`."

#: ../../library/inspect.rst:893
msgid ""
"Describes how argument values are bound to the parameter.  The possible "
"values are accessible via :class:`Parameter` (like ``Parameter."
"KEYWORD_ONLY``), and support comparison and ordering, in the following order:"
msgstr ""

#: ../../library/inspect.rst:900
msgid "Name"
msgstr "Ім'я"

#: ../../library/inspect.rst:900
msgid "Meaning"
msgstr "Значення"

#: ../../library/inspect.rst:902
msgid "*POSITIONAL_ONLY*"
msgstr "*ПОЗИЦІЙНЕ_ЛИШЕ*"

#: ../../library/inspect.rst:902
msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr ""
"Значення має бути надано як позиційний аргумент. Лише позиційні параметри – "
"це ті, які з’являються перед записом ``/`` (якщо він є) у визначенні функції "
"Python."

#: ../../library/inspect.rst:907
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

#: ../../library/inspect.rst:907
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""
"Значення може бути надано як ключове слово або позиційний аргумент (це "
"стандартна поведінка зв’язування для функцій, реалізованих у Python)."

#: ../../library/inspect.rst:912
msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

#: ../../library/inspect.rst:912
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""
"Кортеж позиційних аргументів, які не прив’язані до жодного іншого параметра. "
"Це відповідає параметру ``*args`` у визначенні функції Python."

#: ../../library/inspect.rst:917
msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

#: ../../library/inspect.rst:917
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""
"Значення має бути надано як аргумент ключового слова. Параметри лише для "
"ключових слів – це ті, які з’являються після запису ``*`` або ``*args`` у "
"визначенні функції Python."

#: ../../library/inspect.rst:922
msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

#: ../../library/inspect.rst:922
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""
"Набір аргументів ключових слів, які не прив’язані до жодного іншого "
"параметра. Це відповідає параметру ``**kwargs`` у визначенні функції Python."

#: ../../library/inspect.rst:928
msgid "Example: print all keyword-only arguments without default values:"
msgstr ""

#: ../../library/inspect.rst:930
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"
msgstr ""

#: ../../library/inspect.rst:944
msgid "Describes an enum value of :attr:`Parameter.kind`."
msgstr ""

#: ../../library/inspect.rst:948
msgid "Example: print all descriptions of arguments:"
msgstr ""

#: ../../library/inspect.rst:950
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"
msgstr ""

#: ../../library/inspect.rst:965
msgid ""
"Create a new :class:`Parameter` instance based on the instance replaced was "
"invoked on.  To override a :class:`!Parameter` attribute, pass the "
"corresponding argument.  To remove a default value or/and an annotation from "
"a :class:`!Parameter`, pass :attr:`Parameter.empty`."
msgstr ""

#: ../../library/inspect.rst:970
msgid ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""
msgstr ""

#: ../../library/inspect.rst:983
msgid ""
":class:`Parameter` objects are also supported by the generic function :func:"
"`copy.replace`."
msgstr ""

#: ../../library/inspect.rst:986
msgid ""
"In Python 3.3 :class:`Parameter` objects were allowed to have ``name`` set "
"to ``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no "
"longer permitted."
msgstr ""

#: ../../library/inspect.rst:993
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""
"Результат виклику :meth:`Signature.bind` або :meth:`Signature.bind_partial`. "
"Зберігає відображення аргументів у параметри функції."

#: ../../library/inspect.rst:998
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect in :"
"attr:`args` and :attr:`kwargs`."
msgstr ""
"Змінне відображення імен параметрів у значеннях аргументів. Містить лише "
"явно пов’язані аргументи. Зміни в :attr:`arguments` відображатимуться в :"
"attr:`args` і :attr:`kwargs`."

#: ../../library/inspect.rst:1002
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""
"Слід використовувати разом із :attr:`Signature.parameters` для будь-яких "
"цілей обробки аргументів."

#: ../../library/inspect.rst:1007
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, use :meth:"
"`BoundArguments.apply_defaults` to add them."
msgstr ""
"Аргументи, для яких :meth:`Signature.bind` або :meth:`Signature."
"bind_partial` покладалися на значення за замовчуванням, пропускаються. "
"Однак, якщо потрібно, використовуйте :meth:`BoundArguments.apply_defaults`, "
"щоб додати їх."

#: ../../library/inspect.rst:1012
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type :"
"class:`collections.OrderedDict`."
msgstr ""
":attr:`arguments` тепер має тип :class:`dict`. Раніше він мав тип :class:"
"`collections.OrderedDict`."

#: ../../library/inspect.rst:1018
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""
"Кортеж значень позиційних аргументів. Динамічно обчислюється з атрибута :"
"attr:`arguments`."

#: ../../library/inspect.rst:1023
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute.  Arguments that can be passed positionally are "
"included in :attr:`args` instead."
msgstr ""

#: ../../library/inspect.rst:1029
msgid "A reference to the parent :class:`Signature` object."
msgstr "Посилання на батьківський об’єкт :class:`Signature`."

#: ../../library/inspect.rst:1033
msgid "Set default values for missing arguments."
msgstr "Установіть значення за замовчуванням для відсутніх аргументів."

#: ../../library/inspect.rst:1035
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""
"Для змінних позиційних аргументів (``*args``) за умовчанням є порожній "
"кортеж."

#: ../../library/inspect.rst:1038
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""
"Для аргументів зі змінними ключовими словами (``**kwargs``) типовим є "
"порожній dict."

#: ../../library/inspect.rst:1041
msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"
msgstr ""

#: ../../library/inspect.rst:1051
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions:"
msgstr ""

#: ../../library/inspect.rst:1054
msgid ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"
msgstr ""

#: ../../library/inspect.rst:1066
msgid ":pep:`362` - Function Signature Object."
msgstr ":pep:`362` - Об'єкт підпису функції."

#: ../../library/inspect.rst:1067
msgid "The detailed specification, implementation details and examples."
msgstr "Детальна специфікація, деталі реалізації та приклади."

#: ../../library/inspect.rst:1073
msgid "Classes and functions"
msgstr "Класи та функції"

#: ../../library/inspect.rst:1077
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"Упорядкуйте заданий список класів у ієрархію вкладених списків. Там, де "
"з’являється вкладений список, він містить класи, похідні від класу, запис "
"якого безпосередньо передує списку. Кожен запис є 2-кортежем, що містить "
"клас і кортеж його базових класів. Якщо аргумент *unique* є істинним, у "
"поверненій структурі з’являється рівно один запис для кожного класу в "
"заданому списку. В іншому випадку класи, які використовують множинне "
"успадкування, та їхні нащадки з’являтимуться кілька разів."

#: ../../library/inspect.rst:1088
msgid ""
"Get the names and default values of a Python function's parameters.  A :term:"
"`named tuple` is returned:"
msgstr ""
"Отримати імена та значення за замовчуванням параметрів функції Python. "
"Повертається :term:`named tuple`:"

#: ../../library/inspect.rst:1091
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"анотації)``"

#: ../../library/inspect.rst:1094
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""
"*args* — це список імен позиційних параметрів. *varargs* — це назва "
"параметра ``*`` або ``None``, якщо довільні позиційні аргументи не "
"приймаються. *varkw* — це назва параметра ``**`` або ``None``, якщо довільні "
"аргументи ключового слова не приймаються. *defaults* — це *n*-кортеж значень "
"аргументів за замовчуванням, що відповідають останнім *n* позиційним "
"параметрам, або ``None``, якщо такі значення за замовчуванням не визначено. "
"*kwonlyargs* — це список імен параметрів лише за ключовими словами в порядку "
"оголошення. *kwonlydefaults* — це словник, який зіставляє назви параметрів з "
"*kwonlyargs* на значення за замовчуванням, які використовуються, якщо "
"аргумент не надано. *анотації* — це словник, який зіставляє назви параметрів "
"з анотаціями. Спеціальний ключ ``\"return\"`` використовується для "
"повідомлення анотації значення, що повертається функцією (якщо є)."

#: ../../library/inspect.rst:1109
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""
"Зауважте, що :func:`signature` і :ref:`Signature Object <inspect-signature-"
"object>` надають рекомендований API для інтроспекції з можливістю виклику та "
"підтримують додаткові режими (наприклад, лише позиційні аргументи), які "
"іноді зустрічаються в API модуля розширення. Ця функція зберігається "
"головним чином для використання в коді, який потребує підтримки сумісності з "
"API модуля ``inspect`` Python 2."

#: ../../library/inspect.rst:1116
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""
"Ця функція тепер базується на :func:`signature`, але все ще ігнорує атрибути "
"``__wrapped__`` і включає вже зв’язаний перший параметр у вихідні дані "
"підпису для зв’язаних методів."

#: ../../library/inspect.rst:1121
msgid ""
"This method was previously documented as deprecated in favour of :func:"
"`signature` in Python 3.5, but that decision has been reversed in order to "
"restore a clearly supported standard interface for single-source Python 2/3 "
"code migrating away from the legacy :func:`getargspec` API."
msgstr ""
"Раніше цей метод був задокументований як застарілий на користь :func:"
"`signature` у Python 3.5, але це рішення було скасовано, щоб відновити чітко "
"підтримуваний стандартний інтерфейс для єдиного вихідного коду Python 2/3, "
"що переходить із застарілої версії :func:`getargspec` API."

#: ../../library/inspect.rst:1136
msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""
"Отримати інформацію про аргументи, передані в певний кадр. Повертається :"
"term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)``. *args* — це "
"список імен аргументів. *varargs* і *keywords* — це імена аргументів ``*`` і "
"``**`` або ``None``. *locals* — це словник місцевих значень даного кадру."

#: ../../library/inspect.rst:1143 ../../library/inspect.rst:1153
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr "Ця функція була випадково позначена як застаріла в Python 3.5."

#: ../../library/inspect.rst:1148
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
"Відформатуйте гарну специфікацію аргументу з чотирьох значень, які повертає :"
"func:`getargvalues`. Аргументи format\\* — це відповідні додаткові функції "
"форматування, які викликаються для перетворення імен і значень у рядки."

#: ../../library/inspect.rst:1158
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"Повертає кортеж базових класів класу cls, включаючи cls, у порядку вирішення "
"методів. Жоден клас не з’являється більше одного разу в цьому кортежі. "
"Зауважте, що порядок вирішення методів залежить від типу cls. Якщо не "
"використовується дуже специфічний метатип, визначений користувачем, cls буде "
"першим елементом кортежу."

#: ../../library/inspect.rst:1166
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example:"
msgstr ""

#: ../../library/inspect.rst:1175
msgid ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': "
"()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"
msgstr ""

#: ../../library/inspect.rst:1192
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""
"Замість цього використовуйте :meth:`Signature.bind` і :meth:`Signature."
"bind_partial`."

#: ../../library/inspect.rst:1198
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""
"Отримайте зіставлення зовнішніх посилань на імена у функції або методі "
"Python *func* на їхні поточні значення. Повертається :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)``. *nonlocals* "
"відображає назви посилань на лексичні змінні закриття, *globals* на "
"глобальні модулі функції та *builtins* на вбудовані елементи, видимі з тіла "
"функції. *unbound* — це набір імен, на які посилається функція, які взагалі "
"не можуть бути розпізнані з урахуванням поточних глобальних і вбудованих "
"модулів."

#: ../../library/inspect.rst:1207
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""
":exc:`TypeError` виникає, якщо *func* не є функцією або методом Python."

#: ../../library/inspect.rst:1214
msgid ""
"Get the object wrapped by *func*. It follows the chain of :attr:"
"`__wrapped__` attributes returning the last object in the chain."
msgstr ""
"Оберніть об’єкт за допомогою *func*. Він слідує за ланцюжком атрибутів :attr:"
"`__wrapped__`, повертаючи останній об’єкт у ланцюжку."

#: ../../library/inspect.rst:1217
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, :func:"
"`signature` uses this to stop unwrapping if any object in the chain has a "
"``__signature__`` attribute defined."
msgstr ""
"*stop* — необов’язковий зворотний виклик, який приймає об’єкт у ланцюжку "
"оболонки як єдиний аргумент, який дозволяє розгортання завершувати "
"достроково, якщо зворотний виклик повертає справжнє значення. Якщо зворотний "
"виклик ніколи не повертає справжнє значення, останній об’єкт у ланцюжку "
"повертається, як зазвичай. Наприклад, :func:`signature` використовує це, щоб "
"зупинити розгортання, якщо будь-який об’єкт у ланцюжку має визначений "
"атрибут ``__signature__``."

#: ../../library/inspect.rst:1224
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ":exc:`ValueError` виникає, якщо зустрічається цикл."

#: ../../library/inspect.rst:1231
msgid "Compute the annotations dict for an object."
msgstr "Обчисліть анотації dict для об’єкта."

#: ../../library/inspect.rst:1233
msgid ""
"``obj`` may be a callable, class, or module. Passing in an object of any "
"other type raises :exc:`TypeError`."
msgstr ""
"``obj`` може бути викликаним, класом або модулем. Передача об’єкта будь-"
"якого іншого типу викликає :exc:`TypeError`."

#: ../../library/inspect.rst:1236
msgid ""
"Returns a dict.  ``get_annotations()`` returns a new dict every time it's "
"called; calling it twice on the same object will return two different but "
"equivalent dicts."
msgstr ""
"Повертає dict. ``get_annotations()`` повертає новий dict під час кожного "
"виклику; виклик його двічі для того самого об’єкта поверне два різні, але "
"еквівалентні слова."

#: ../../library/inspect.rst:1240
msgid "This function handles several details for you:"
msgstr "Ця функція обробляє декілька деталей для вас:"

#: ../../library/inspect.rst:1242
msgid ""
"If ``eval_str`` is true, values of type ``str`` will be un-stringized using :"
"func:`eval`.  This is intended for use with stringized annotations (``from "
"__future__ import annotations``)."
msgstr ""

#: ../../library/inspect.rst:1246
msgid ""
"If ``obj`` doesn't have an annotations dict, returns an empty dict.  "
"(Functions and methods always have an annotations dict; classes, modules, "
"and other types of callables may not.)"
msgstr ""
"Якщо ``obj`` не має dict анотацій, повертає порожній dict. (Функції та "
"методи завжди мають анотації dict; класи, модулі та інші типи викликів "
"можуть не мати.)"

#: ../../library/inspect.rst:1250
msgid ""
"Ignores inherited annotations on classes.  If a class doesn't have its own "
"annotations dict, returns an empty dict."
msgstr ""
"Ігнорує успадковані анотації до класів. Якщо клас не має власного dict "
"анотацій, повертає порожній dict."

#: ../../library/inspect.rst:1252
msgid ""
"All accesses to object members and dict values are done using ``getattr()`` "
"and ``dict.get()`` for safety."
msgstr ""
"Усі доступи до членів об’єктів і значень dict здійснюються за допомогою "
"``getattr()`` і ``dict.get()`` для безпеки."

#: ../../library/inspect.rst:1254
msgid "Always, always, always returns a freshly created dict."
msgstr ""

#: ../../library/inspect.rst:1256
msgid ""
"``eval_str`` controls whether or not values of type ``str`` are replaced "
"with the result of calling :func:`eval` on those values:"
msgstr ""

#: ../../library/inspect.rst:1259
msgid ""
"If eval_str is true, :func:`eval` is called on values of type ``str``. (Note "
"that ``get_annotations`` doesn't catch exceptions; if :func:`eval` raises an "
"exception, it will unwind the stack past the ``get_annotations`` call.)"
msgstr ""

#: ../../library/inspect.rst:1263
msgid ""
"If eval_str is false (the default), values of type ``str`` are unchanged."
msgstr ""
"Якщо eval_str має значення false (за замовчуванням), значення типу ``str`` "
"не змінюються."

#: ../../library/inspect.rst:1265
msgid ""
"``globals`` and ``locals`` are passed in to :func:`eval`; see the "
"documentation for :func:`eval` for more information.  If ``globals`` or "
"``locals`` is ``None``, this function may replace that value with a context-"
"specific default, contingent on ``type(obj)``:"
msgstr ""

#: ../../library/inspect.rst:1270
msgid "If ``obj`` is a module, ``globals`` defaults to ``obj.__dict__``."
msgstr "Якщо ``obj`` є модулем, ``globals`` за замовчуванням ``obj.__dict__``."

#: ../../library/inspect.rst:1271
msgid ""
"If ``obj`` is a class, ``globals`` defaults to ``sys.modules[obj.__module__]."
"__dict__`` and ``locals`` defaults to the ``obj`` class namespace."
msgstr ""
"Якщо ``obj`` є класом, ``globals`` за замовчуванням ``sys.modules[obj."
"__module__].__dict__``, а ``locals`` за замовчуванням має простір імен класу "
"``obj``."

#: ../../library/inspect.rst:1274
msgid ""
"If ``obj`` is a callable, ``globals`` defaults to :attr:`obj.__globals__ "
"<function.__globals__>`, although if ``obj`` is a wrapped function (using :"
"func:`functools.update_wrapper`) it is first unwrapped."
msgstr ""

#: ../../library/inspect.rst:1279
msgid ""
"Calling ``get_annotations`` is best practice for accessing the annotations "
"dict of any object.  See :ref:`annotations-howto` for more information on "
"annotations best practices."
msgstr ""
"Виклик ``get_annotations`` є найкращою практикою для доступу до dict "
"анотацій будь-якого об’єкта. Дивіться :ref:`annotations-howto` для отримання "
"додаткової інформації про найкращі практики анотацій."

#: ../../library/inspect.rst:1289
msgid "The interpreter stack"
msgstr "Стек інтерпретатора"

#: ../../library/inspect.rst:1291
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""

#: ../../library/inspect.rst:1300
msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1304
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1309
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1314
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1318
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1323 ../../library/inspect.rst:1362
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr ""

#: ../../library/inspect.rst:1327
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1331
msgid "Return a :term:`named tuple` instead of a :class:`tuple`."
msgstr ""

#: ../../library/inspect.rst:1334
msgid ""
":class:`!FrameInfo` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""

#: ../../library/inspect.rst:1343
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1348
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1353
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1357
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1366
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1371
msgid ""
":class:`!Traceback` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""

#: ../../library/inspect.rst:1378
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"Зберігання посилань на об’єкти фрейму, які знаходяться в першому елементі "
"фреймових записів, які повертаються цими функціями, може призвести до того, "
"що ваша програма створить цикли посилань. Після створення еталонного циклу "
"тривалість життя всіх об’єктів, до яких можна отримати доступ з об’єктів, що "
"утворюють цикл, може стати набагато довшим, навіть якщо ввімкнено додатковий "
"детектор циклу Python. Якщо такі цикли необхідно створити, важливо "
"переконатися, що вони явно розірвані, щоб уникнути затримки руйнування "
"об’єктів і збільшення споживання пам’яті, яке відбувається."

#: ../../library/inspect.rst:1386
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""
"Хоча детектор циклу вловить їх, знищення кадрів (та локальних змінних) можна "
"зробити детермінованим, видаливши цикл у реченні :keyword:`finally`. Це "
"також важливо, якщо детектор циклу було вимкнено під час компіляції Python "
"або використання :func:`gc.disable`. Наприклад::"

#: ../../library/inspect.rst:1391
msgid ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"
msgstr ""

#: ../../library/inspect.rst:1398
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr ""
"Якщо ви хочете зберегти фрейм (наприклад, щоб пізніше надрукувати "
"трасування), ви також можете розірвати цикли посилань за допомогою методу :"
"meth:`frame.clear`."

#: ../../library/inspect.rst:1402
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""
"Необов’язковий аргумент *context*, який підтримується більшістю цих функцій, "
"визначає кількість рядків контексту для повернення, які розташовані навколо "
"поточного рядка."

#: ../../library/inspect.rst:1409
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""

#: ../../library/inspect.rst:1412
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""

#: ../../library/inspect.rst:1417
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""

#: ../../library/inspect.rst:1422 ../../library/inspect.rst:1437
#: ../../library/inspect.rst:1463 ../../library/inspect.rst:1478
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""
"Повертається список :term:`іменованих кортежів <named tuple>` "
"``FrameInfo(frame, filename, lineno, function, code_context, index)`` "
"повертається."

#: ../../library/inspect.rst:1427 ../../library/inspect.rst:1442
#: ../../library/inspect.rst:1468 ../../library/inspect.rst:1483
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr ""

#: ../../library/inspect.rst:1432
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1447
msgid "Return the frame object for the caller's stack frame."
msgstr "Повертає об’єкт кадру для кадру стека абонента."

#: ../../library/inspect.rst:1451
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"Ця функція покладається на підтримку фрейму стека Python в інтерпретаторі, "
"який не гарантовано існує в усіх реалізаціях Python. Якщо ця функція працює "
"в реалізації без підтримки фрейму стека Python, ця функція повертає ``None``."

#: ../../library/inspect.rst:1459
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""

#: ../../library/inspect.rst:1473
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1487
msgid "Fetching attributes statically"
msgstr "Отримання атрибутів статично"

#: ../../library/inspect.rst:1489
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` may be called."
msgstr ""

#: ../../library/inspect.rst:1495
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as :"
"func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""
"У випадках, коли вам потрібен пасивний самоаналіз, наприклад інструменти "
"документування, це може бути незручно. :func:`getattr_static` має такий "
"самий підпис, як і :func:`getattr`, але уникає виконання коду, коли він "
"отримує атрибути."

#: ../../library/inspect.rst:1501
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`~object.__getattr__` or :meth:`~object.__getattribute__`."
msgstr ""

#: ../../library/inspect.rst:1505
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""
"Примітка: ця функція може бути не в змозі отримати всі атрибути, які getattr "
"може отримати (наприклад, динамічно створені атрибути), і може знайти "
"атрибути, які getattr не може отримати (наприклад, дескриптори, які "
"викликають AttributeError). Він також може повертати об’єкти дескрипторів "
"замість членів екземпляра."

#: ../../library/inspect.rst:1511
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""
"Якщо примірник :attr:`~object.__dict__` затінений іншим членом (наприклад, "
"властивістю), тоді ця функція не зможе знайти члени примірника."

#: ../../library/inspect.rst:1517
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""
":func:`getattr_static` не розпізнає дескриптори, наприклад, дескриптори "
"слотів або дескриптори getset в об’єктах, реалізованих у C. Об’єкт "
"дескриптора повертається замість основного атрибута."

#: ../../library/inspect.rst:1521
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""
"Ви можете впоратися з цим за допомогою такого коду. Зауважте, що виклик "
"довільних дескрипторів getset може ініціювати виконання коду::"

#: ../../library/inspect.rst:1525
msgid ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"
msgstr ""

#: ../../library/inspect.rst:1547
msgid "Current State of Generators, Coroutines, and Asynchronous Generators"
msgstr ""

#: ../../library/inspect.rst:1549
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""
"Під час реалізації планувальників співпрограм та для інших розширених "
"застосувань генераторів корисно визначити, чи генератор зараз виконується, "
"очікує на запуск, відновлення чи виконання, чи вже завершив роботу. :func:"
"`getgeneratorstate` дозволяє легко визначити поточний стан генератора."

#: ../../library/inspect.rst:1557
msgid "Get current state of a generator-iterator."
msgstr "Отримати поточний стан генератора-ітератора."

#: ../../library/inspect.rst:1559 ../../library/inspect.rst:1575
#: ../../library/inspect.rst:1592
msgid "Possible states are:"
msgstr "Можливі стани:"

#: ../../library/inspect.rst:1561
msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED: Очікування на початок виконання."

#: ../../library/inspect.rst:1562
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING: наразі виконується інтерпретатором."

#: ../../library/inspect.rst:1563
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED: наразі призупинено на виразі yield."

#: ../../library/inspect.rst:1564
msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED: виконання завершено."

#: ../../library/inspect.rst:1570
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""
"Отримати поточний стан об'єкта співпрограми. Функція призначена для "
"використання з об’єктами співпрограми, створеними функціями :keyword:`async "
"def`, але вона приймає будь-який об’єкт, подібний до співпрограми, який має "
"атрибути ``cr_running`` і ``cr_frame``."

#: ../../library/inspect.rst:1577
msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED: Очікування на початок виконання."

#: ../../library/inspect.rst:1578
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING: наразі виконується інтерпретатором."

#: ../../library/inspect.rst:1579
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED: наразі призупинено через вираз очікування."

#: ../../library/inspect.rst:1580
msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED: виконання завершено."

#: ../../library/inspect.rst:1586
msgid ""
"Get current state of an asynchronous generator object.  The function is "
"intended to be used with asynchronous iterator objects created by :keyword:"
"`async def` functions which use the :keyword:`yield` statement, but will "
"accept any asynchronous generator-like object that has ``ag_running`` and "
"``ag_frame`` attributes."
msgstr ""

#: ../../library/inspect.rst:1594
msgid "AGEN_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1595
msgid "AGEN_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1596
msgid "AGEN_SUSPENDED: Currently suspended at a yield expression."
msgstr ""

#: ../../library/inspect.rst:1597
msgid "AGEN_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1601
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""
"Також можна запитати поточний внутрішній стан генератора. Це здебільшого "
"корисно для цілей тестування, щоб переконатися, що внутрішній стан "
"оновлюється належним чином:"

#: ../../library/inspect.rst:1607
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""
"Отримайте зіставлення поточних локальних змінних у *генераторі* з їхніми "
"поточними значеннями. Повертається словник, який відображає імена змінних на "
"значення. Це еквівалент виклику :func:`locals` у тілі генератора, і "
"застосовуються всі ті самі застереження."

#: ../../library/inspect.rst:1612
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""
"Якщо *generator* є :term:`generator` без пов’язаного фрейму, повертається "
"порожній словник. :exc:`TypeError` виникає, якщо *generator* не є об’єктом "
"генератора Python."

#: ../../library/inspect.rst:1618
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""
"Ця функція покладається на те, що генератор відкриває фрейм стека Python для "
"самоаналізу, що не гарантовано буде у всіх реалізаціях Python. У таких "
"випадках ця функція завжди повертатиме порожній словник."

#: ../../library/inspect.rst:1627
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""
"Ця функція аналогічна :func:`~inspect.getgeneratorlocals`, але працює для "
"об’єктів співпрограми, створених функціями :keyword:`async def`."

#: ../../library/inspect.rst:1634
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for asynchronous generator objects created by :keyword:`async def` functions "
"which use the :keyword:`yield` statement."
msgstr ""

#: ../../library/inspect.rst:1644
msgid "Code Objects Bit Flags"
msgstr "Кодові об’єкти Бітові прапорці"

#: ../../library/inspect.rst:1646
msgid ""
"Python code objects have a :attr:`~codeobject.co_flags` attribute, which is "
"a bitmap of the following flags:"
msgstr ""

#: ../../library/inspect.rst:1651
msgid "The code object is optimized, using fast locals."
msgstr "Об’єкт коду оптимізовано за допомогою швидких локальних кодів."

#: ../../library/inspect.rst:1655
msgid ""
"If set, a new dict will be created for the frame's :attr:`~frame.f_locals` "
"when the code object is executed."
msgstr ""

#: ../../library/inspect.rst:1660
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr "Об’єкт коду має змінний позиційний параметр (``*args``)."

#: ../../library/inspect.rst:1664
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr "Об’єкт коду має змінний параметр ключового слова (``**kwargs``-like)."

#: ../../library/inspect.rst:1668
msgid "The flag is set when the code object is a nested function."
msgstr "Прапорець встановлюється, коли об’єкт коду є вкладеною функцією."

#: ../../library/inspect.rst:1672
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""
"Прапорець встановлюється, коли об’єкт коду є функцією генератора, тобто "
"об’єкт генератора повертається під час виконання об’єкта коду."

#: ../../library/inspect.rst:1677
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""
"Прапор встановлюється, коли об’єкт коду є співпрограмою. Коли об’єкт коду "
"виконується, він повертає об’єкт співпрограми. Дивіться :pep:`492` для більш "
"детальної інформації."

#: ../../library/inspect.rst:1685
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""
"Прапор використовується для перетворення генераторів у співпрограми на "
"основі генератора. Об’єкти-генератори з цим прапорцем можна використовувати "
"у виразі ``очікування`` і можуть ``поступати від`` об’єктів співпрограми. "
"Дивіться :pep:`492` для більш детальної інформації."

#: ../../library/inspect.rst:1694
msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""
"Прапорець встановлюється, коли об’єкт коду є функцією асинхронного "
"генератора. Коли об’єкт коду виконується, він повертає об’єкт асинхронного "
"генератора. Дивіться :pep:`525` для більш детальної інформації."

#: ../../library/inspect.rst:1701
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""
"Прапори є специфічними для CPython і можуть не бути визначені в інших "
"реалізаціях Python. Крім того, прапори є деталями реалізації, і їх можна "
"видалити або застаріти в майбутніх випусках Python. Рекомендовано "
"використовувати загальнодоступні API з модуля :mod:`inspect` для будь-яких "
"потреб самоаналізу."

#: ../../library/inspect.rst:1709
msgid "Buffer flags"
msgstr ""

#: ../../library/inspect.rst:1713
msgid ""
"This is an :class:`enum.IntFlag` that represents the flags that can be "
"passed to the :meth:`~object.__buffer__` method of objects implementing the :"
"ref:`buffer protocol <bufferobjects>`."
msgstr ""

#: ../../library/inspect.rst:1717
msgid "The meaning of the flags is explained at :ref:`buffer-request-types`."
msgstr ""

#: ../../library/inspect.rst:1744
msgid "Command Line Interface"
msgstr "Інтерфейс командного рядка"

#: ../../library/inspect.rst:1746
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""
"Модуль :mod:`inspect` також надає базову можливість самоаналізу з командного "
"рядка."

#: ../../library/inspect.rst:1751
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""
"За замовчуванням приймає назву модуля та друкує джерело цього модуля. "
"Натомість клас або функцію в модулі можна надрукувати, додавши двокрапку та "
"кваліфіковане ім’я цільового об’єкта."

#: ../../library/inspect.rst:1757
msgid ""
"Print information about the specified object rather than the source code"
msgstr "Надрукувати інформацію про вказаний об’єкт, а не вихідний код"
