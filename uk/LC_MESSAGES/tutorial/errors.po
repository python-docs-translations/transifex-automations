# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Помилки та винятки"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"До цього часу повідомлення про помилки не згадувалися, але якщо ви "
"спробували приклади, ви, ймовірно, бачили деякі. Існує (принаймні) два "
"різновиди помилок: *синтаксичні помилки* та *винятки*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Синтаксичні помилки"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Синтаксичні помилки, також відомі як помилки синтаксичного аналізу, є, "
"мабуть, найпоширенішим типом скарг, які ви отримуєте, поки вивчаєте Python::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""
"Синтаксичний аналізатор повторює неправильний рядок і відображає маленьку "
"\"стрілку\", яка вказує на найранішу точку рядка, де було виявлено помилку. "
"Помилка спричинена (або принаймні виявлена) маркером *перед* стрілкою: у "
"прикладі помилка виявлена у функції :func:`print`, оскільки двокрапка "
"(``':'``) перед ним відсутній. Ім'я файлу та номер рядка друкуються, щоб ви "
"знали, де шукати, якщо вхідні дані надійшли зі сценарію."

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Винятки"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Навіть якщо оператор або вираз синтаксично правильний, це може спричинити "
"помилку під час спроби його виконання. Помилки, виявлені під час виконання, "
"називаються *винятками* і не є безумовно фатальними: незабаром ви "
"дізнаєтесь, як їх обробляти в програмах Python. Однак більшість винятків не "
"обробляються програмами, і вони призводять до повідомлень про помилки, як "
"показано тут::"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"Останній рядок повідомлення про помилку вказує на те, що сталося. Винятки "
"бувають різних типів, і тип друкується як частина повідомлення: типи в "
"прикладі: :exc:`ZeroDivisionError`, :exc:`NameError` і :exc:`TypeError`. "
"Рядок, надрукований як тип винятку, є назвою вбудованого винятку, який "
"стався. Це справедливо для всіх вбудованих винятків, але не обов’язково для "
"винятків, визначених користувачем (хоча це корисна угода). Стандартні назви "
"винятків є вбудованими ідентифікаторами (а не зарезервованими ключовими "
"словами)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"Решта рядка надає деталі на основі типу винятку та причини його виникнення."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"Попередня частина повідомлення про помилку показує контекст, у якому сталася "
"виняток, у формі зворотного стека. Загалом, він містить зворотне трасування "
"стека зі списком вихідних рядків; однак він не відображатиме рядки, "
"прочитані зі стандартного введення."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` містить список вбудованих винятків та їх значення."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Обробка винятків"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"Можна писати програми, які оброблятимуть вибрані винятки. Подивіться на "
"наступний приклад, який запитує у користувача введення, доки не буде введено "
"дійсне ціле число, але дозволяє користувачеві перервати програму (за "
"допомогою :kbd:`Control-C` або іншого, що підтримується операційною "
"системою); зауважте, що створене користувачем переривання сигналізується за "
"допомогою виклику винятку :exc:`KeyboardInterrupt`. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "Оператор :keyword:`try` працює наступним чином."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Спочатку виконується пропозиція *try* (вираз(и) між ключовими словами :"
"keyword:`try` і :keyword:`except`)."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Якщо винятків не відбувається, пункт *except* пропускається, і виконання "
"оператора :keyword:`try` завершується."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"Якщо під час виконання пропозиції :keyword:`try` виникає виняток, решта "
"пропозиції пропускається. Тоді, якщо його тип відповідає винятку, названому "
"за ключовим словом :keyword:`except`, виконується *except*, а потім "
"виконання продовжується після блоку try/except."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""
"Якщо виникає виняток, який не збігається з винятком, названим у *except "
"пункті*, він передається до зовнішніх операторів :keyword:`try`; якщо "
"обробник не знайдено, це *необроблений виняток* і виконання зупиняється з "
"повідомленням, як показано вище."

#: ../../tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"Оператор :keyword:`try` може мати більше ніж одне *виключення*, щоб вказати "
"обробники для різних винятків. Буде виконано щонайбільше один обробник. "
"Обробники обробляють лише винятки, які виникають у відповідному *реченні "
"try*, а не в інших обробниках того самого оператора :keyword:`!try`. Речення "
"*except* може називати кілька винятків у вигляді кортежу в дужках, "
"наприклад::"

#: ../../tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""
"Клас у реченні :keyword:`except` сумісний із винятком, якщо це той самий "
"клас або його базовий клас (але не навпаки --- речення *except* із переліком "
"похідного класу несумісне з базовий клас). Наприклад, наступний код надрукує "
"B, C, D у такому порядку:"

#: ../../tutorial/errors.rst:147
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"Зауважте, що якби *except пункти* були перевернуті (з ``except B`` "
"спочатку), було б надруковано B, B, B --- спрацьовує перше відповідне "
"*except пункт*."

#: ../../tutorial/errors.rst:150
msgid ""
"All exceptions inherit from :exc:`BaseException`, and so it can be used to "
"serve as a wildcard. Use this with extreme caution, since it is easy to mask "
"a real programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""
"Усі винятки успадковуються від :exc:`BaseException`, тому його можна "
"використовувати як символ підстановки. Використовуйте це з особливою "
"обережністю, оскільки таким чином легко замаскувати справжню помилку "
"програмування! Його також можна використовувати для друку повідомлення про "
"помилку, а потім повторного виклику винятку (що дозволяє абоненту також "
"обробити виняток)::"

#: ../../tutorial/errors.rst:169
msgid ""
"Alternatively the last except clause may omit the exception name(s), however "
"the exception value must then be retrieved from ``sys.exc_info()[1]``."
msgstr ""
"Крім того, в останньому реченні винятку може бути пропущено ім’я(на) "
"винятку, однак значення винятку тоді має бути отримано з ``sys.exc_info()"
"[1]``."

#: ../../tutorial/errors.rst:172
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"Оператор :keyword:`try` ... :keyword:`except` має необов’язкову пропозицію "
"*else*, яка, якщо є, має слідувати за всіма пропозиціями *except*. Це "
"корисно для коду, який потрібно виконати, якщо *речення* try не викликає "
"винятку. Наприклад::"

#: ../../tutorial/errors.rst:186
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"Використання пропозиції :keyword:`!else` краще, ніж додавання додаткового "
"коду до пропозиції :keyword:`try`, оскільки це дозволяє уникнути випадкового "
"перехоплення виняткової ситуації, яка не була викликана кодом, захищеним :"
"keyword:`!try` ... :keyword:`!except` оператор."

#: ../../tutorial/errors.rst:191
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""
"Коли виникає виняток, він може мати пов’язане значення, також відоме як "
"*аргумент* винятку. Наявність і тип аргументу залежать від типу винятку."

#: ../../tutorial/errors.rst:195
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""
"Речення *except* може вказувати змінну після назви винятку. Змінна "
"прив’язана до екземпляра винятку з аргументами, що зберігаються в ``instance."
"args``.  Для зручності екземпляр винятку визначає :meth:`__str__`, тому "
"аргументи можна друкувати безпосередньо без посилання на ``.args``. Можна "
"також спочатку створити екземпляр винятку, перш ніж його викликати, і додати "
"до нього будь-які атрибути за бажанням. ::"

#: ../../tutorial/errors.rst:219
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""
"Якщо виняток має аргументи, вони друкуються як остання частина (\"detail\") "
"повідомлення для необроблених винятків."

#: ../../tutorial/errors.rst:222
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the *try clause*, but also if they occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""
"Обробники винятків не лише обробляють винятки, якщо вони виникають одразу в "
"*реченні try*, а й якщо вони трапляються всередині функцій, які викликаються "
"(навіть опосередковано) у *реченні *try*. Наприклад::"

#: ../../tutorial/errors.rst:240
msgid "Raising Exceptions"
msgstr "Створення винятків"

#: ../../tutorial/errors.rst:242
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"Оператор :keyword:`raise` дозволяє програмісту примусово викликати певний "
"виняток. Наприклад::"

#: ../../tutorial/errors.rst:250
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""
"Єдиний аргумент :keyword:`raise` вказує на виняток, який потрібно викликати. "
"Це має бути або екземпляр винятку, або клас винятку (клас, який походить "
"від :class:`Exception`). Якщо передано клас винятків, він буде неявно "
"створений шляхом виклику його конструктора без аргументів::"

#: ../../tutorial/errors.rst:257
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Якщо вам потрібно визначити, чи був викликаний виняток, але ви не маєте "
"наміру його обробляти, простіша форма оператора :keyword:`raise` дозволяє "
"повторно викликати виняток::"

#: ../../tutorial/errors.rst:276
msgid "Exception Chaining"
msgstr "З’єднання винятків"

#: ../../tutorial/errors.rst:278
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""

#: ../../tutorial/errors.rst:297
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""

#: ../../tutorial/errors.rst:303
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr "Це може бути корисним, коли ви перетворюєте винятки. Наприклад::"

#: ../../tutorial/errors.rst:324
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""

#: ../../tutorial/errors.rst:336
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"Для отримання додаткової інформації про механіку ланцюжка див. :ref:`bltin-"
"exceptions`."

#: ../../tutorial/errors.rst:342
msgid "User-defined Exceptions"
msgstr "Винятки, визначені користувачем"

#: ../../tutorial/errors.rst:344
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Програми можуть називати свої власні винятки, створюючи новий клас винятків "
"(перегляньте :ref:`tut-classes`, щоб дізнатися більше про класи Python). "
"Винятки зазвичай мають бути похідними від класу :exc:`Exception`, прямо чи "
"опосередковано."

#: ../../tutorial/errors.rst:348
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"Можна визначити класи винятків, які роблять усе, що може зробити будь-який "
"інший клас, але зазвичай вони прості, часто пропонують лише ряд атрибутів, "
"які дозволяють обробникам витягувати інформацію про помилку для винятку."

#: ../../tutorial/errors.rst:352
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"Більшість винятків визначаються іменами, які закінчуються на \"Помилка\", "
"подібно до назв стандартних винятків."

#: ../../tutorial/errors.rst:355
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""
"Багато стандартних модулів визначають власні винятки, щоб повідомляти про "
"помилки, які можуть виникнути у функціях, які вони визначають. Більше "
"інформації про класи представлено в розділі :ref:`tut-classes`."

#: ../../tutorial/errors.rst:363
msgid "Defining Clean-up Actions"
msgstr "Визначення дій з очищення"

#: ../../tutorial/errors.rst:365
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"Інструкція :keyword:`try` має інше необов’язкове положення, призначене для "
"визначення дій очищення, які необхідно виконувати за будь-яких обставин. "
"Наприклад::"

#: ../../tutorial/errors.rst:379
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"Якщо присутня пропозиція :keyword:`finally`, пропозиція :keyword:`!finally` "
"виконуватиметься як останнє завдання перед завершенням інструкції :keyword:"
"`try`. Речення :keyword:`!finally` виконується незалежно від того, створює "
"виняток оператор :keyword:`!try` чи ні. У наступних пунктах розглядаються "
"більш складні випадки, коли виникає виняток:"

#: ../../tutorial/errors.rst:385
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"Якщо виняток виникає під час виконання пропозиції :keyword:`!try`, виняток "
"може бути оброблено за допомогою пропозиції :keyword:`except`. Якщо виняток "
"не обробляється пропозицією :keyword:`!except`, виняток виникає повторно "
"після того, як пропозиція :keyword:`!finally` буде виконана."

#: ../../tutorial/errors.rst:391
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"Виняток може статися під час виконання пропозиції :keyword:`!except` або :"
"keyword:`!else`. Знову ж таки, виняток повторно викликається після виконання "
"пункту :keyword:`!finally`."

#: ../../tutorial/errors.rst:395
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""
"Якщо пропозиція :keyword:`!finally` виконує оператор :keyword:`break`, :"
"keyword:`continue` або :keyword:`return`, винятки не виникають повторно."

#: ../../tutorial/errors.rst:399
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"Якщо оператор :keyword:`!try` досягає оператора :keyword:`break`, :keyword:"
"`continue` або :keyword:`return`, пункт :keyword:`!finally` буде виконано "
"безпосередньо перед :keyword:`!break`, :keyword:`!continue` або :keyword:`!"
"return` виконання оператора."

#: ../../tutorial/errors.rst:405
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""
"Якщо пропозиція :keyword:`!finally` містить інструкцію :keyword:`!return`, "
"поверненим значенням буде значення з інструкції :keyword:`!return` "
"пропозиції :keyword:`!finally`, а не значення з оператора :keyword:`!return` "
"пункту :keyword:`!try`."

#: ../../tutorial/errors.rst:411
msgid "For example::"
msgstr "Наприклад::"

#: ../../tutorial/errors.rst:422
msgid "A more complicated example::"
msgstr "Більш складний приклад::"

#: ../../tutorial/errors.rst:447
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Як бачите, пункт :keyword:`finally` виконується в будь-якій події. Помилка :"
"exc:`TypeError`, викликана розділенням двох рядків, не обробляється "
"пропозицією :keyword:`except` і тому повторно виникає після виконання "
"пропозиції :keyword:`!finally`."

#: ../../tutorial/errors.rst:452
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"У додатках реального світу пункт :keyword:`finally` корисний для звільнення "
"зовнішніх ресурсів (таких як файли або мережеві підключення), незалежно від "
"того, чи було використання ресурсу успішним."

#: ../../tutorial/errors.rst:460
msgid "Predefined Clean-up Actions"
msgstr "Попередньо визначені дії з очищення"

#: ../../tutorial/errors.rst:462
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Деякі об’єкти визначають стандартні дії з очищення, які необхідно виконати, "
"коли об’єкт більше не потрібний, незалежно від того, чи була операція з "
"використанням об’єкта успішною чи невдалою. Подивіться на наступний приклад, "
"який намагається відкрити файл і вивести його вміст на екран. ::"

#: ../../tutorial/errors.rst:470
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"Проблема з цим кодом полягає в тому, що він залишає файл відкритим протягом "
"невизначеного періоду часу після завершення виконання цієї частини коду. Це "
"не проблема для простих сценаріїв, але може бути проблемою для великих "
"програм. Оператор :keyword:`with` дозволяє використовувати такі об’єкти, як "
"файли, таким чином, щоб вони завжди були своєчасно та правильно очищені. ::"

#: ../../tutorial/errors.rst:480
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Після виконання виразу файл *f* завжди закривається, навіть якщо під час "
"обробки рядків виникла проблема. Об’єкти, які, як і файли, забезпечують "
"попередньо визначені дії очищення, вкажуть це у своїй документації."
