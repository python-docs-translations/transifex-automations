# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Czech (https://app.transifex.com/python-doc/teams/5390/cs/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: cs\n"
"Plural-Forms: nplurals=4; plural=(n == 1 && n % 1 == 0) ? 0 : (n >= 2 && n "
"<= 4 && n % 1 == 0) ? 1: (n % 1 != 0 ) ? 2 : 3;\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "Neformální úvod do jazyka Python"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"V následujících příkladech je k rozlišení vstupu od výstupu použit text "
"primární a sekundární výzvy (:term:`>>>` a :term:`...`). Příklady si sami "
"vyzkoušíte tak, že do terminálu napíšete vše za znakem výzvy poté, co se "
"výzva objeví, a stisknete klávesu Enter. Řádky které nezačínají znakem výzvy "
"jsou vástupem z interpretru. Dovolujeme si poznamenat, že text sekundární "
"výzvy samotný na řádku neznamená, že musíte odřádkovat; značíme tak konec "
"víceřádkového příkazu."

#: ../../tutorial/introduction.rst:16
msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""
"Możesz przełączać wyświetlanie promptów i wyjścia klikając na ``>>>`` w "
"prawym górnym rogu pola z przykładem. Jeśli schowasz prompty i wyjście dla "
"przykładu, wtedy możesz prosto skopiować i wkleić linie wejścia w swój "
"interpreter."

#: ../../tutorial/introduction.rst:23
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"V příkladech v tomto manuálu se často nacházejí komentáře, a to i v těch "
"zadávaných do interaktivního interpretru. Komentáře v Pythonu začínají "
"znakem mřížky, ``#``, a končí s koncem řádku. Komentář může začínat na zátku "
"řádku, být odsazen od kraje pomocí bílých znaků, nebo stát na konci řádku s "
"kódem, nemůže se ale nacházet uvnitř řetězcového literálu. Znak mřížky "
"uvnitř řetězcového literálu je interpretován jako každý další znak bez "
"zvlášního významu. Protože komentáře obsahují vyjasnění pro lidského čtenáře "
"a interpretr Pythonu je přeskakuje, můžete je vynechat, když si budete "
"zkoušet příklady."

#: ../../tutorial/introduction.rst:31
msgid "Some examples::"
msgstr "Několik příkladů::"

#: ../../tutorial/introduction.rst:42
msgid "Using Python as a Calculator"
msgstr "Python jako kalkulačka"

#: ../../tutorial/introduction.rst:44
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Nyní si vyzkoušíme několik základních příkazů jazyka Python. Spusťte si "
"interpretr a počkejte na zobrazení primární výzvy , ``>>>``. (Nemělo by to "
"trvat dlouho.)"

#: ../../tutorial/introduction.rst:51
msgid "Numbers"
msgstr "Čísla"

#: ../../tutorial/introduction.rst:53
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""
"Interpretr se chová jako jednoduchá kalkulačka. Můžete zapsat libovolný "
"výraz, odřádkovat, a on vypíše jeho hodnotu. Zápis výrazů není nikterak "
"složitý, operátory ``+``, ``-``, ``*`` a ``/`` se zapisují stejně jako znáte "
"z jiných programovacích jazyků, jako jsou Pascal nebo Céčko, pořadí operací "
"můžete udat závorkováním (``()``). Například::"

#: ../../tutorial/introduction.rst:68
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Celá čísla (např. ``2``, ``4``, ``20``) mají v Pythonu typ :class:`int`, "
"čísla v plovoucí řádové čárce, tj. ta s desetinnou tečkou (např. ``5.0``, "
"``1.6``) mají typ :class:`float`.  Další typy si představíme později v "
"tutoriálu."

#: ../../tutorial/introduction.rst:72
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"Dzielenie (``/``) zawsze zwraca liczbę zmiennoprzecinkową. Aby zrobić :term:"
"`dzielenie całkowite <floor division>` i uzyskać wynik całkowity możesz użyć "
"operatora ``//``; aby obliczyć resztę możesz użyć ``%``::"

#: ../../tutorial/introduction.rst:86
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr "Operátor ``**`` v Pythonu slouží pro umocňování [#]_::"

#: ../../tutorial/introduction.rst:93
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"Znak rovnítko (``=``) je určen pro přiřazení hodnoty výrazu na levé straně "
"do proměnné na pravé straně. Hodnota proměnné po přiřazení již není "
"interpretrem vypsána::"

#: ../../tutorial/introduction.rst:101
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Pokud proměnná ještě nebyla „definována“ (nebyla jí přiřazena hodnota), při "
"pokusu použít ji vám interpretr oznámí chybu::"

#: ../../tutorial/introduction.rst:109
msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"Python plně podporuje operace v plovoucí řádové čárce (tj. desetinná čísla). "
"Operátor, který dostane jedno celé a jedno desetinné číslo jako operandy si "
"nejprve zobrazí celé číslo v desetinné podobě a následně se provede výpočet "
"jako s desetinnými čísly::"

#: ../../tutorial/introduction.rst:115
msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"V interaktivním režimu je naposledy vypsaný výsledek automaticky přiřazen do "
"proměnné ``_``. Pokud používáte Python jako stolní kalkulačku, můžete díky "
"tomu snadno navázat na předchozí výpočet, například::"

#: ../../tutorial/introduction.rst:128
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"Do této proměnné by v interaktivním režimu nikdy nemělo být přiřazováno. "
"Pokud byste jí přiřadili hodnotu, vytvořili byste novou nezávislou lokální "
"proměnnou se stejným jménem, která překryje vestavěnou proměnnou s dříve "
"popsaným specifickým chováním."

#: ../../tutorial/introduction.rst:132
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"Kromě typů :class:`int` a :class:`float` podporuje Python další číselné "
"typy, například :class:`~decimal.Decimal` (číslo v desítkové soustavě s "
"fixní desetinnou tečkou) a :class:`~fractions.Fraction` (racionální číslo). "
"Python má též vestavěnu podporu pro :ref:`komplexní čísla <typesnumeric>`; "
"pro vyznačení imaginární části se používá přípona ``j`` nebo ``J`` (např. "
"``3+5j``)."

#: ../../tutorial/introduction.rst:142
msgid "Strings"
msgstr "Řetězce"

#: ../../tutorial/introduction.rst:144
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""
"Podobně jako s čísly, můžeme v Pythonu pracovat is s řetězci. Ty mohou být "
"zapsány mnoha způsoby. Mohou být uzavřeny v jednoduchých uvozovkách "
"(``'...'`, apostrofech`) nebo dvojitých uvozovkách (``\"...\"``), což na "
"výsledku nic nemění [#]_. ``\\`` slouží k escapování uvozovek::"

#: ../../tutorial/introduction.rst:162
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes "
"look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""
"Ve výstupu interaktivního interpretru jsou řetězce uzavřeny v uvozovkách a "
"znaky se zvlášním významem jsou vyescapovány pomocí zpětných lomítek. "
"Řetězec může vypadat jinak, než jak jsme jej sami zapsali (zejména typ "
"uvozovek může být jiný), ale tyto formy zápisu jsou si ekvivalentní. Řetězec "
"je vypsán v uvozovkách, pokud obsahuje jen apostrofy a žádné uvozovky, jinak "
"bude vypsán v apostrofech. Funkce :func:`print` vypíše čitelnější výstup, "
"vynechá uvozovky a escapované znaky přímo vypíše bez escapování::"

#: ../../tutorial/introduction.rst:182
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Pokud nechcete aby se znaky před kterými se nachází ``\\`` interpretovaly "
"jako specialní znaky, můžete použít *raw řetězce* (cosi jako ryzí, syrové "
"řetězce) a to tak, že bezprostředně před úvodní uvozovku napíšete znak "
"``r``::"

#: ../../tutorial/introduction.rst:192
msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""
"Istnieje jeden subtelny aspekt surowych ciągów znaków: surowy ciąg znaków "
"nie może kończyć się nieparzystą liczbą znaków ``\\``; zobacz :ref:`wpis FAQ "
"<faq-programming-raw-string-backslash>`, aby uzyskać więcej informacji i "
"sposobów obejścia tego problemu."

#: ../../tutorial/introduction.rst:197
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\`` "
"at the end of the line.  The following example::"
msgstr ""
"Jeden ze způsobů jak vytvořit víceřádkový řetězec je uzavřít ho mezi "
"odpovídající si páry trojitých uvozovek: ``\"\"\"...\"\"\"`` nebo "
"``'''...'''``. Výhodou tohoto zápisu je, že konce řádků jsou automaticky "
"součástí řetězce, ale je možné je vyloučit zapsáním ``\\`` na konce řádků. "
"Následuje příklad::"

#: ../../tutorial/introduction.rst:208
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr "vypíše následující výstup (všiměte si, že v něm není odřádkování):"

#: ../../tutorial/introduction.rst:216
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"Řetězce mohou být zřetězeny (spojeny dohromady) pomocí operátoru ``+``. "
"Operátor ``*`` slouží ke zopakování řetězce::"

#: ../../tutorial/introduction.rst:223
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Dva nebo více „řetězcových literálů“ (to jsou řetězce zapsané mezi "
"uvozovkami) vedle sebe jsou automaticky zřetězeny."

#: ../../tutorial/introduction.rst:229
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"Obzvláště se to hodí když chceme rozdělit zápis dlouhého řetězce na několik "
"řádků::"

#: ../../tutorial/introduction.rst:236
msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr ""
"Ale pozor, takto lze spojovat pouze zápisy řetězců navzájem, nefunguje to s "
"proměnnými nebo výrazy::"

#: ../../tutorial/introduction.rst:250
msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""
"Pokud potřebujete zřetězit proměnné nebo promennou s literálem, použijte "
"operátor ``+``::"

#: ../../tutorial/introduction.rst:255
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"Řetězce můžeme indexovat. První znak řetězce má index 0. Python nedefinuje "
"specialní datový typ určený pro uchování hodoty jednoho znaku; znak sám o "
"sobě je jednoduše brán jako řetězec o délce jedna::"

#: ../../tutorial/introduction.rst:265
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""
"Indexovat můžeme i zápornými čísly, záporné indexy klesají od pravého konce "
"řetězce::"

#: ../../tutorial/introduction.rst:274
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Protože -0 má v Pythonu stejnou hodnotu jako 0, záporné indexy začínají až "
"od -1."

#: ../../tutorial/introduction.rst:276
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""
"Ukázali jsme si, jak získat písmeno na daném indexu v řetězci. Python umí "
"indexovat nejen jednotlivá písmena, ale i podřetězce, pak se této operaci "
"říká \"slicing\"::"

#: ../../tutorial/introduction.rst:284
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Indexy subsekvencí mají užitečné výchozí hodnoty; vynechaný počáteční index "
"nabývá výchozí hodnoty nula, vynechaný koncový index má výchozí hodnotu "
"rovnu délce celého řetězce. ::"

#: ../../tutorial/introduction.rst:294
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Všiměte si, že písmeno na počátečním indexu je v podřetězci vždy zahrnuto, a "
"písmeno na koncovém indexu už je mimo podřetězec. Díky tomu si můžete být "
"jistí, že ``s[:i] + s[i:]`` je vždy rovno celému ``s``::"

#: ../../tutorial/introduction.rst:302
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Jednym ze sposobów na zapamiętanie, jak działa podział, to myślenie o "
"indeksach wskazujących *pomiędzy* znakami, z lewą krawędzią pierwszego znaku "
"numerowaną 0. Wtedy prawa krawędź ostatniego znaku ciągu o długości *n* ma "
"indeks *n*, na przykład::"

#: ../../tutorial/introduction.rst:313
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"W pierwszym wierszu liczb są pozycje indeksów od 0 do 6 w ciągu. W drugim "
"wierszu odpowiadające im indeksy ujemne. Fragment od *i* do *j* składa się "
"ze wszystkich znaków pomiędzy krawędziami oznaczonymi kolejno *i* i *j*."

#: ../../tutorial/introduction.rst:318
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"Dla nieujemnych indeksów długość wydzielonego fragmentu to różnica indeksów, "
"jeśli oba mieszczą się w zakresie. Na przykład długość ``word[1:3]`` to 2."

#: ../../tutorial/introduction.rst:322
msgid "Attempting to use an index that is too large will result in an error::"
msgstr "Próba użycia za dużego indeksu skończy się błędem::"

#: ../../tutorial/introduction.rst:329
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"Jednak indeksy podzielonych fragmentów poza zakresem są obsłużone "
"bezpiecznie przy podziale::"

#: ../../tutorial/introduction.rst:337
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"Ciągi znaków Pythona nie mogą być zmieniane — są :term:`niemutowalne "
"<immutable>`. W związku z tym przypisywanie wartości do indeksowanej pozycji "
"w ciągu spowoduje błąd::"

#: ../../tutorial/introduction.rst:349
msgid "If you need a different string, you should create a new one::"
msgstr ""
"Jeśli potrzebujesz innego ciągu znaków, powinieneś(-nnaś) stworzyć nowy::"

#: ../../tutorial/introduction.rst:356
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "Wbudowana funkcja :func:`len` zwraca długość ciągu::"

#: ../../tutorial/introduction.rst:367
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../tutorial/introduction.rst:366
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"Ciągi znaków są przykładami *typów sekwencyjnych* i obsługują wspólne "
"operacje wspierane przez takie typy."

#: ../../tutorial/introduction.rst:371
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../tutorial/introduction.rst:370
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"Ciągi znaków wspierają dużą liczbę metod do podstawowych przekształceń i "
"wyszukiwania."

#: ../../tutorial/introduction.rst:374
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: ../../tutorial/introduction.rst:374
msgid "String literals that have embedded expressions."
msgstr "Literały ciągów znaków z osadzonymi wyrażeniami."

#: ../../tutorial/introduction.rst:377
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../tutorial/introduction.rst:377
msgid "Information about string formatting with :meth:`str.format`."
msgstr ""
"Informacje o formatowaniu ciągów znaków przy użyciu :meth:`str.format`."

#: ../../tutorial/introduction.rst:380
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

#: ../../tutorial/introduction.rst:380
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"Stare operacje formatowania, wywoływane gdy ciągi znaków są lewymi "
"operandami operatora ``%`` są opisane tutaj bardziej szczegółowo."

#: ../../tutorial/introduction.rst:387
msgid "Lists"
msgstr "Listy"

#: ../../tutorial/introduction.rst:389
msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"Python ma kilka *złożonych* typów danych, używanych do grupowania różnych "
"wartości. Najbardziej wszechstronnym jest *lista*, która może zostać "
"zapisana jako lista wartości (elementów) rozdzielonych przecinkami ujęta w "
"nawiasy kwadratowe. Listy mogą zawierać elementy różnych typów, ale "
"zazwyczaj wszystkie elementy mają ten sam typ. ::"

#: ../../tutorial/introduction.rst:398
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"Tak jak ciągi znaków (i wszystkie inne wbudowane typy :term:`sekwencyjne "
"<sequence>`), do elementów list można odwoływać się przez indeksy oraz można "
"z nich „wydzielać”::"

#: ../../tutorial/introduction.rst:408
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"Wszystkie operacje wykrawania zwracają nową listę zawierającą żądane "
"elementy. Następujący slice więc zwraca :ref:`płytką kopię "
"<shallow_vs_deep_copy>` listy::"

#: ../../tutorial/introduction.rst:415
msgid "Lists also support operations like concatenation::"
msgstr "Listy wspierają też operacje takie jak łączenie::"

#: ../../tutorial/introduction.rst:420
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"W przeciwieństwie do ciągów znaków, które są :term:`niemutowalne "
"<immutable>`, listy są typem :term:`mutowalnym <mutable>`, w szczególności "
"można zmieniać ich treść::"

#: ../../tutorial/introduction.rst:430
msgid ""
"You can also add new items at the end of the list, by using the :meth:`~list."
"append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:438
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"Możliwe jest również przypisywanie do slice'ów. Może to zmienić rozmiar "
"listy lub zupełnie ją wyczyścić::"

#: ../../tutorial/introduction.rst:457
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "Wbudowana funkcja :func:`len` ma również zastosowanie do list::"

#: ../../tutorial/introduction.rst:463
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"Można zagnieżdżać listy (tworzyć listy zawierające inne listy), na przykład::"

#: ../../tutorial/introduction.rst:479
msgid "First Steps Towards Programming"
msgstr "Pierwsze kroki do programowania"

#: ../../tutorial/introduction.rst:481
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""

#: ../../tutorial/introduction.rst:501
msgid "This example introduces several new features."
msgstr "Ten przykład wprowadza kilka nowych funkcji."

#: ../../tutorial/introduction.rst:503
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"Pierwsza linia zawiera *wielokrotne przypisanie*: zmienne ``a`` i ``b`` "
"jednocześnie dostają nowe wartości 0 i 1. W ostatniej linii jest ponownie "
"wykorzystane, demonstrując, że wyrażenia po prawej stronie są ewaluowane "
"wcześniej, zanim którekolwiek z przypisań ma miejsce. Wyrażenia po prawej "
"stronie są ewaluowane od lewej do prawej."

#: ../../tutorial/introduction.rst:509
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"Pętla :keyword:`while` wykonuje się dopóki warunek (tutaj: ``a < 10``) "
"pozostaje prawdziwy. W Pythonie, tak jak w C, każda niezerowa liczba "
"całkowita jest prawdziwa; zero jest fałszywe. Warunek może być również "
"ciągiem znaków lub listą, tak naprawdę jakąkolwiek sekwencją; cokolwiek o "
"niezerowej długości jest prawdziwe, puste sekwencje są fałszywe. Warunek "
"użyty w przykładzie jest prostym porównaniem. Standardowe operatory porównań "
"pisane są tak samo jak w C: ``<`` (mniejsze niż), ``>`` (większe niż), "
"``==`` (równe), ``<=`` (mniejsze lub równe), ``>=`` (większe lub równe) i ``!"
"=`` (różne)."

#: ../../tutorial/introduction.rst:518
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"*Ciało* pętli jest *wcięte*: indentacja (wcięcia) jest sposobem na "
"grupowanie instrukcji. W trybie interaktywnym trzeba wprowadzić znak(i) "
"spacji lub tabulacji, aby wciąć wiersz. W praktyce będziesz przygotowywać "
"bardziej skomplikowane dane wejściowe dla Pythona za pomocą edytora tekstu; "
"wszystkie przyzwoite edytory tekstu mają funkcję automatycznych wcięć. W "
"chwili, gdy wprowadza się jakąś instrukcję złożoną w czasie sesji "
"interpretera Pythona, trzeba zakończyć ją pustym wierszem (bowiem "
"interpreter nie wie, czy ostatni wprowadzony wiersz jest ostatnim z tej "
"instrukcji). Ważne jest, aby każdy wiersz należący do tej samej grupy "
"instrukcji, był wcięty o taką samą liczbę spacji lub znaków tabulacji."

#: ../../tutorial/introduction.rst:527
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""
"Funkcja :func:`print` wypisuje wartość argumentu(-ów), które jej podano. "
"Różnica pomiędzy tą instrukcją, a zwykłym zapisem wyrażenia, które chce się "
"wypisać (tak jak robiliśmy to w przykładzie z kalkulatorem) występuje w "
"sposobie obsługi wielu wyrażeń i napisów. Łańcuchy znaków wypisywane są bez "
"cudzysłowów, a pomiędzy nimi zapisywane są spacje, tak aby można było ładnie "
"sformatować pojawiający się napis, na przykład::"

#: ../../tutorial/introduction.rst:538
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"Keyword argument *end* można wykorzystać, aby uniknąć znaku nowej linii po "
"wypisaniu lub aby zakończyć wypisanie innym ciągiem znaków::"

#: ../../tutorial/introduction.rst:550
msgid "Footnotes"
msgstr "Poznámky"

#: ../../tutorial/introduction.rst:551
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"Jako że ``**`` ma wyższą precedencję niż ``-``, ``-3**2`` zostanie "
"zinterpretowane jako ``-(3**2)`` i zwróci ``-9``. Aby tego uniknąć i "
"otrzymać ``9``, możesz użyć ``(-3)**2``."

#: ../../tutorial/introduction.rst:555
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"W przeciwieństwie do innych języków, znaki specjalne takie jak ``\\n`` mają "
"to samo znaczenie zarówno z pojedynczym (``'…'``) jak i podwójnym (``\"…"
"\"``) cudzysłowem. Jedyną różnicą między nimi jest to, że wewnątrz "
"pojedynczego cudzysłowu nie musisz używać znaku ucieczki dla ``\"`` (lecz "
"musisz użyć znaku ucieczki ``\\'``) i vice versa."
