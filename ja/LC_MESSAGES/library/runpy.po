# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:19+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ":mod:`runpy` --- Python モジュールの位置特定と実行"

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**ソースコード:** :source:`Lib/runpy.py`"

#: ../../library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""
":mod:`runpy` モジュールは Python のモジュールをインポートせずにその位置を特定"
"したり実行したりするのに使われます。その主な目的はファイルシステムではなく "
"Python のモジュール名前空間を使って位置を特定したスクリプトの実行を可能にす"
"る :option:`-m` コマンドラインスイッチを実装することです。"

#: ../../library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""
"これはサンドボックスモジュール *ではない* ことに注意してください。すべての"
"コードは現在のプロセスで実行され、あらゆる副作用 (たとえば他のモジュールの"
"キャッシュされたインポート等) は関数から戻った後にそのまま残ります。"

#: ../../library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""
"さらに、 :mod:`runpy` 関数から戻った後で、実行されたコードによって定義された"
"任意の関数およびクラスが正常に動作することは保証されません。この制限が受け入"
"れられないユースケースでは、 :mod:`importlib` がこのモジュールより適切な選択"
"となるでしょう。"

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr ":mod:`runpy` モジュールは2つの関数を提供しています:"

#: ../../library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""
"指定されたモジュールのコードを実行し、実行後のモジュールグローバル辞書を返し"
"ます。モジュールのコードはまず標準インポート機構(詳細は :pep:`302` を参照) を"
"使ってモジュールの位置を特定され、まっさらなモジュール名前空間で実行されま"
"す。"

#: ../../library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the :mod:`__main__` submodule within that package is then "
"executed and the resulting module globals dictionary returned."
msgstr ""

#: ../../library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"オプションの辞書型引数 *init_globals* はコードを実行する前にモジュールグロー"
"バル辞書に前もって必要な設定しておくのに使われます。与えられた辞書は変更され"
"ません。その辞書の中に以下に挙げる特別なグローバル変数が定義されていたとして"
"も、それらの定義は :func:`run_module` 関数によってオーバーライドされます。"

#: ../../library/runpy.rst:52 ../../library/runpy.rst:122
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""
"特別なグローバル変数 ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__``, ``__package__`` はモジュールコードが実行され"
"る前にグローバル辞書にセットされます。(この変数群は修正される最小セットです。"
"これ以外の変数もインタプリタの実装の詳細として暗黙的に設定されるかもしれませ"
"ん)。"

#: ../../library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""
"``__name__`` は、オプション引数 *run_name* が :const:`None` でない場合、指定"
"されたモジュールがパッケージであれば ``mod_name + '.__main__'`` に、そうでな"
"ければ *mod_name* 引数の値がセットされます。"

#: ../../library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + '."
"__main__``, never *run_name*)."
msgstr ""

#: ../../library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are :ref:"
"`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""

#: ../../library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""
"引数 *alter_sys* が与えられて :const:`True` に評価されるならば、 ``sys."
"argv[0]`` は ``__file__`` の値で更新され ``sys.modules[__name__]`` は実行され"
"るモジュールの一時的モジュールオブジェクトで更新されます。 ``sys.argv[0]`` "
"と ``sys.modules[__name__]`` はどちらも関数が処理を戻す前にもとの値に復旧しま"
"す。"

#: ../../library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the ``sys`` module be left alone when "
"invoking this function from threaded code."
msgstr ""

#: ../../library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ""
"コマンドラインから、 :option:`-m` オプションを与えることで同じ機能を実現出来"
"ます。"

#: ../../library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a :mod:`__main__` submodule."
msgstr ""

#: ../../library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "``__cached__`` グローバル変数が追加されました (:pep:`3147` を参照)。"

#: ../../library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as ``__spec__."
"name``."
msgstr ""

#: ../../library/runpy.rst:101
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid :data:`sys.path` entry containing a :mod:"
"`__main__` module (e.g. a zipfile containing a top-level ``__main__.py`` "
"file)."
msgstr ""

#: ../../library/runpy.rst:108
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid :data:`sys.path` entry (typically a zipfile or "
"directory), the entry is first added to the beginning of ``sys.path``. The "
"function then looks for and executes a :mod:`__main__` module using the "
"updated path. Note that there is no special protection against invoking an "
"existing ``__main__`` entry located elsewhere on ``sys.path`` if there is no "
"such module at the specified location."
msgstr ""

#: ../../library/runpy.rst:116
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"オプションの辞書型引数 *init_globals* はコードを実行する前にモジュールグロー"
"バル辞書に前もって必要な設定しておくのに使われます。与えられた辞書は変更され"
"ません。その辞書の中に以下に挙げる特別なグローバル変数が定義されていたとして"
"も、それらの定義は :func:`run_path` 関数によってオーバーライドされます。"

#: ../../library/runpy.rst:128
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__`` は、オプション引数 *run_name* が :const:`None` でない場合、 "
"*run_name* に設定され、それ以外の場合は ``'<run_path>'`` に設定されます。"

#: ../../library/runpy.rst:131
msgid ""
"If the supplied path directly references a script file (whether as source or "
"as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""

#: ../../library/runpy.rst:136
msgid ""
"If the supplied path is a reference to a valid :data:`sys.path` entry, then "
"``__spec__`` will be set appropriately for the imported :mod:`__main__` "
"module (that is, ``__spec__.name`` will always be ``__main__``). "
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` will be :"
"ref:`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""

#: ../../library/runpy.rst:142
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, :"
"data:`sys.path` may be altered as described above. ``sys.argv[0]`` is "
"updated with the value of ``path_name`` and ``sys.modules[__name__]`` is "
"updated with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""

#: ../../library/runpy.rst:149
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of :data:`sys.path` entries. As the thread-safety limitations "
"still apply, use of this function in threaded code should be either "
"serialised with the import lock or delegated to a separate process."
msgstr ""

#: ../../library/runpy.rst:156
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
"コマンドラインから :ref:`using-on-interface-options` で同じ機能を使えます "
"(``python path/to/script``)。"

#: ../../library/runpy.rst:161
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid :data:`sys.path` entry rather than "
"being executed directly."
msgstr ""

#: ../../library/runpy.rst:170
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` - モジュールをスクリプトとして実行する"

#: ../../library/runpy.rst:170 ../../library/runpy.rst:173
msgid "PEP written and implemented by Nick Coghlan."
msgstr "PEP written and implemented by Nick Coghlan."

#: ../../library/runpy.rst:173
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` - main モジュールの明示的な相対インポート"

#: ../../library/runpy.rst:176
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` -- インポートシステムのための ModuleSpec 型"

#: ../../library/runpy.rst:176
msgid "PEP written and implemented by Eric Snow"
msgstr "PEP written and implemented by Eric Snow"

#: ../../library/runpy.rst:178
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` - CPython コマンドライン詳細"

#: ../../library/runpy.rst:180
msgid "The :func:`importlib.import_module` function"
msgstr ":func:`importlib.import_module` 関数"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:98
msgid "module"
msgstr "module"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:98
msgid "__main__"
msgstr "__main__"
