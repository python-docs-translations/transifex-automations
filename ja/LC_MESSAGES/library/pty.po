# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ":mod:`pty` --- 擬似端末ユーティリティ"

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**ソースコード:** :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
":mod:`pty` モジュールは擬似端末(他のプロセスを実行してその制御をしている端末"
"をプログラムで読み書きする)を制御する操作を定義しています。"

#: ../../library/pty.rst:19
msgid ""
"Pseudo-terminal handling is highly platform dependent. This code is mainly "
"tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX "
"platforms but it's not been thoroughly tested)."
msgstr ""
"Робота з псевдотерміналом сильно залежить від платформи. Цей код в основному "
"тестується на Linux, FreeBSD і macOS (передбачається, що він працює на інших "
"платформах POSIX, але не був ретельно протестований)."

#: ../../library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr ":mod:`pty` モジュールでは以下の関数を定義しています:"

#: ../../library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"forkします。子プロセスの制御端末を擬似端末に接続します。返り値は ``(pid, "
"fd)`` です。子プロセスは *pid* として0、*fd* として *invalid* をそれぞれ受け"
"とります。親プロセスは *pid* として子プロセスのPID、*fd* として子プロセスの制"
"御端末 (子プロセスの標準入出力に接続されている)のファイル記述子を受けとりま"
"す。"

#: ../../library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"新しい擬似端末のペアを開きます。利用できるなら :func:`os.openpty` を使い、利"
"用できなければ一般的なUnixシステム用のエミュレーションコードを使います。マス"
"ター、スレーブそれぞれのためのファイル記述子、 ``(master, slave)`` のタプルを"
"返します。"

#: ../../library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Створіть процес і підключіть його керуючий термінал до стандартного io "
"поточного процесу. Це часто використовується, щоб збентежити програми, які "
"наполягають на читанні з керуючого терміналу. Очікується, що процес, "
"породжений за pty, зрештою завершиться, і коли це станеться, *spawn* "
"повернеться."

#: ../../library/pty.rst:50
msgid ""
"A loop copies STDIN of the current process to the child and data received "
"from the child to STDOUT of the current process. It is not signaled to the "
"child if STDIN of the current process closes down."
msgstr ""
"Цикл копіює STDIN поточного процесу до дочірнього процесу, а дані, отримані "
"від дочірнього процесу, до STDOUT поточного процесу. Дочірній процес не "
"повідомляється, якщо STDIN поточного процесу закривається."

#: ../../library/pty.rst:54
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an empty byte "
"array should be returned to signal end of file."
msgstr ""
"Функціям *master_read* і *stdin_read* передається дескриптор файлу, з якого "
"вони повинні читати, і вони завжди повинні повертати рядок байтів. Щоб "
"змусити spawn повернутися до того, як дочірній процес завершить роботу, слід "
"повернути порожній масив байтів до кінця файлу."

#: ../../library/pty.rst:59
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"Реалізація за замовчуванням для обох функцій буде читати та повертати до "
"1024 байтів кожного разу, коли функція викликається. Зворотний виклик "
"*master_read* передається дескриптору головного файлу псевдотерміналу для "
"читання виводу з дочірнього процесу, а *stdin_read* передається дескриптор "
"файлу 0 для читання зі стандартного введення батьківського процесу."

#: ../../library/pty.rst:65
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"Повернення порожнього байтового рядка з будь-якого зворотного виклику "
"інтерпретується як умова кінця файлу (EOF), і цей зворотний виклик не буде "
"викликано після цього. Якщо *stdin_read* сигналізує EOF, керуючий термінал "
"більше не може спілкуватися з батьківським процесом АБО дочірнім процесом. "
"Якщо дочірній процес не завершить роботу без будь-яких вхідних даних, "
"*spawn* буде зациклюватися назавжди. Якщо *master_read* сигналізує EOF, це "
"призводить до такої ж поведінки (принаймні в Linux)."

#: ../../library/pty.rst:72
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
"Повертає значення статусу виходу з :func:`os.waitpid` дочірнього процесу."

#: ../../library/pty.rst:74
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr ""
"戻り値の終了ステータスを終了コードに変換するために :func:"
"`waitstatus_to_exitcode` を使うことができます。"

#: ../../library/pty.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"引数 ``argv`` を指定して :ref:`監査イベント <auditing>` ``pty.spawn`` を送出"
"します。 "

#: ../../library/pty.rst:79
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` が :func:`os.waitpid` が返す子プロセスのステータス値を返すよう"
"になりました。"

#: ../../library/pty.rst:84
msgid "Example"
msgstr "使用例"

#: ../../library/pty.rst:88
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"下記のプログラムは Unix コマンド :manpage:`script(1)` のように動作します。疑"
"似端末を使用して、端末セッションのすべての入出力を \"typescript\" に記録しま"
"す。 ::"
