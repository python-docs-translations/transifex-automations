# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Takeshi Nakazato, 2022
# Arihiro TAKASE, 2023
# souma987, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: souma987, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr "サブプロセス"

#: ../../library/asyncio-subprocess.rst:9
msgid ""
"**Source code:** :source:`Lib/asyncio/subprocess.py`, :source:`Lib/asyncio/"
"base_subprocess.py`"
msgstr ""
"**ソースコード:** :source:`Lib/asyncio/subprocess.py`, :source:`Lib/asyncio/"
"base_subprocess.py`"

#: ../../library/asyncio-subprocess.rst:14
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr ""
"このセクションはサブプロセスの生成と管理を行う高水準の async/await asyncio "
"API について説明します。"

#: ../../library/asyncio-subprocess.rst:19
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr ""
"以下は、 asyncio モジュールがどのようにシェルコマンドを実行し、結果を取得でき"
"るかを示す例です::"

#: ../../library/asyncio-subprocess.rst:22
msgid ""
"import asyncio\n"
"\n"
"async def run(cmd):\n"
"    proc = await asyncio.create_subprocess_shell(\n"
"        cmd,\n"
"        stdout=asyncio.subprocess.PIPE,\n"
"        stderr=asyncio.subprocess.PIPE)\n"
"\n"
"    stdout, stderr = await proc.communicate()\n"
"\n"
"    print(f'[{cmd!r} exited with {proc.returncode}]')\n"
"    if stdout:\n"
"        print(f'[stdout]\\n{stdout.decode()}')\n"
"    if stderr:\n"
"        print(f'[stderr]\\n{stderr.decode()}')\n"
"\n"
"asyncio.run(run('ls /zzz'))"
msgstr ""

#: ../../library/asyncio-subprocess.rst:40
msgid "will print::"
msgstr "このサンプルコードは以下を出力します::"

#: ../../library/asyncio-subprocess.rst:42
msgid ""
"['ls /zzz' exited with 1]\n"
"[stderr]\n"
"ls: /zzz: No such file or directory"
msgstr ""

#: ../../library/asyncio-subprocess.rst:46
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute and "
"monitor multiple subprocesses in parallel.  It is indeed trivial to modify "
"the above example to run several commands simultaneously::"
msgstr ""
"全ての asyncio のサブプロセス関数は非同期ですが、 asyncio モジュールはこれら"
"の非同期関数と協調するための多くのツールを提供しているので、複数のサブプロセ"
"スを並列に実行して監視することは簡単です。実際、上記のサンプルコードを複数の"
"コマンドを同時に実行するように修正するのはきわめて単純です::"

#: ../../library/asyncio-subprocess.rst:51
msgid ""
"async def main():\n"
"    await asyncio.gather(\n"
"        run('ls /zzz'),\n"
"        run('sleep 1; echo \"hello\"'))\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-subprocess.rst:58
msgid "See also the `Examples`_ subsection."
msgstr "`使用例`_ 節も参照してください。"

#: ../../library/asyncio-subprocess.rst:62
msgid "Creating Subprocesses"
msgstr "サブプロセスの生成"

#: ../../library/asyncio-subprocess.rst:68
msgid "Create a subprocess."
msgstr "サブプロセスを作成します。"

#: ../../library/asyncio-subprocess.rst:70
#: ../../library/asyncio-subprocess.rst:89
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`~asyncio.subprocess.Process.stdout` and :attr:`~asyncio."
"subprocess.Process.stderr` (if :const:`subprocess.PIPE` is passed to "
"*stdout* and *stderr* arguments)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:74
#: ../../library/asyncio-subprocess.rst:93
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr ":class:`~asyncio.subprocess.Process` のインスタンスを返します。"

#: ../../library/asyncio-subprocess.rst:76
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other parameters."
msgstr ""
"他のパラメータについては :meth:`loop.subprocess_exec` を参照してください。"

#: ../../library/asyncio-subprocess.rst:79
#: ../../library/asyncio-subprocess.rst:107
msgid "Removed the *loop* parameter."
msgstr "*loop* パラメータが削除されました。"

#: ../../library/asyncio-subprocess.rst:87
msgid "Run the *cmd* shell command."
msgstr "シェルコマンド *cmd* を実行します。"

#: ../../library/asyncio-subprocess.rst:95
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other parameters."
msgstr ""
"他のパラメータについては :meth:`loop.subprocess_shell` のドキュメントを参照し"
"てください。"

#: ../../library/asyncio-subprocess.rst:100
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special shell characters in strings that are going to "
"be used to construct shell commands."
msgstr ""
"`シェルインジェクション <https://en.wikipedia.org/wiki/"
"Shell_injection#Shell_injection>`_ の脆弱性を回避するために全ての空白文字およ"
"び特殊文字を適切にクオートすることは、アプリケーション側の責任で確実に行って"
"ください。シェルコマンドを構成する文字列内の空白文字と特殊文字のエスケープ"
"は、 :func:`shlex.quote` 関数を使うと適切に行うことができます。"

#: ../../library/asyncio-subprocess.rst:112
msgid ""
"Subprocesses are available for Windows if a :class:`ProactorEventLoop` is "
"used. See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` "
"for details."
msgstr ""
"サブプロセスは、 :class:`ProactorEventLoop` を使えば Windows でも利用可能で"
"す。詳しくは :ref:`Windows におけるサブプロセスのサポート <asyncio-windows-"
"subprocess>` を参照してください。"

#: ../../library/asyncio-subprocess.rst:118
msgid ""
"asyncio also has the following *low-level* APIs to work with subprocesses: :"
"meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :meth:`loop."
"connect_read_pipe`, :meth:`loop.connect_write_pipe`, as well as the :ref:"
"`Subprocess Transports <asyncio-subprocess-transports>` and :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`."
msgstr ""
"asyncio は以下に挙げるサブプロセスと協調するための *低水準の* API も持ってい"
"ます: :meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :meth:"
"`loop.connect_read_pipe`, :meth:`loop.connect_write_pipe` および :ref:"
"`Subprocess Transports <asyncio-subprocess-transports>` と :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`。"

#: ../../library/asyncio-subprocess.rst:126
msgid "Constants"
msgstr "定数"

#: ../../library/asyncio-subprocess.rst:131
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr "*stdin*, *stdout* または *stderr* に渡すことができます。"

#: ../../library/asyncio-subprocess.rst:133
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin <asyncio."
"subprocess.Process.stdin>` attribute will point to a :class:`~asyncio."
"StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-subprocess.rst:137
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the :attr:`Process."
"stdout <asyncio.subprocess.Process.stdout>` and :attr:`Process.stderr "
"<asyncio.subprocess.Process.stderr>` attributes will point to :class:"
"`~asyncio.StreamReader` instances."
msgstr ""

#: ../../library/asyncio-subprocess.rst:145
msgid ""
"Special value that can be used as the *stderr* argument and indicates that "
"standard error should be redirected into standard output."
msgstr ""
"*stderr* 引数に対して利用できる特殊な値で、標準エラー出力が標準出力にリダイレ"
"クトされることを意味します。"

#: ../../library/asyncio-subprocess.rst:151
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to process creation functions.  It indicates that the special file :data:`os."
"devnull` will be used for the corresponding subprocess stream."
msgstr ""
"プロセスを生成する関数の *stdin*, *stdout* または *stderr* 引数に利用できる特"
"殊な値です。対応するサブプロセスのストリームに特殊なファイル :data:`os."
"devnull` が使われることを意味します。"

#: ../../library/asyncio-subprocess.rst:157
msgid "Interacting with Subprocesses"
msgstr "サブプロセスとやりとりする"

#: ../../library/asyncio-subprocess.rst:159
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching for "
"their completion."
msgstr ""
":func:`create_subprocess_exec` と :func:`create_subprocess_shell` の2つの関数"
"はどちらも *Process* クラスのインスタンスを返します。 *Process* クラスはサブ"
"プロセスと通信したり、サブプロセスの完了を監視したりするための高水準のラッ"
"パーです。"

#: ../../library/asyncio-subprocess.rst:167
msgid ""
"An object that wraps OS processes created by the :func:`~asyncio."
"create_subprocess_exec` and :func:`~asyncio.create_subprocess_shell` "
"functions."
msgstr ""

#: ../../library/asyncio-subprocess.rst:171
msgid ""
"This class is designed to have a similar API to the :class:`subprocess."
"Popen` class, but there are some notable differences:"
msgstr ""
"このクラスは :class:`subprocess.Popen` クラスと同様の API を持つように設計さ"
"れていますが、いくつかの注意すべき違いがあります:"

#: ../../library/asyncio-subprocess.rst:175
msgid ""
"unlike Popen, Process instances do not have an equivalent to the :meth:"
"`~subprocess.Popen.poll` method;"
msgstr ""
"Popen と異なり、 Process インスタンスは :meth:`~subprocess.Popen.poll` メソッ"
"ドに相当するメソッドを持っていません;"

#: ../../library/asyncio-subprocess.rst:178
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and :meth:`~asyncio."
"subprocess.Process.wait` methods don't have a *timeout* parameter: use the :"
"func:`~asyncio.wait_for` function;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:182
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented as "
"a blocking busy loop;"
msgstr ""
":meth:`subprocess.Popen.wait` メソッドが同期処理のビジーループとして実装され"
"ているのに対して、 :meth:`Process.wait() <asyncio.subprocess.Process.wait>` "
"メソッドは非同期処理です;"

#: ../../library/asyncio-subprocess.rst:186
msgid "the *universal_newlines* parameter is not supported."
msgstr "*universal_newlines* パラメータはサポートされていません。"

#: ../../library/asyncio-subprocess.rst:188
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""
"このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-subprocess.rst:190
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節も参照してくださ"
"い。"

#: ../../library/asyncio-subprocess.rst:196
msgid "Wait for the child process to terminate."
msgstr "子プロセスが終了するのを待ち受けます。"

#: ../../library/asyncio-subprocess.rst:198
msgid "Set and return the :attr:`returncode` attribute."
msgstr ":attr:`returncode` 属性を設定し、その値を返します。"

#: ../../library/asyncio-subprocess.rst:202
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and "
"the child process generates so much output that it blocks waiting for the OS "
"pipe buffer to accept more data. Use the :meth:`communicate` method when "
"using pipes to avoid this condition."
msgstr ""
"``stdout=PIPE`` または ``stderr=PIPE`` を使っており、OS パイプバッファがさら"
"なるデータを受け付けるようになるまで子プロセスをブロックするほど大量の出力を"
"生成場合、このメソッドはデッドロックする可能性があります。この条件を避けるた"
"め、パイプを使用する場合は :meth:`communicate` メソッドを使ってください。"

#: ../../library/asyncio-subprocess.rst:211
msgid "Interact with process:"
msgstr "プロセスとのやりとりを行います:"

#: ../../library/asyncio-subprocess.rst:213
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr "*stdin* にデータを送信します (*input* が ``None`` でない場合);"

#: ../../library/asyncio-subprocess.rst:214
msgid "closes *stdin*;"
msgstr "*stdin* を閉じます;"

#: ../../library/asyncio-subprocess.rst:215
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr "EOF に達するまで *stdout* および *stderr* からデータを読み出します;"

#: ../../library/asyncio-subprocess.rst:216
msgid "wait for process to terminate."
msgstr "プロセスが終了するまで待ち受けます。"

#: ../../library/asyncio-subprocess.rst:218
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that will "
"be sent to the child process."
msgstr ""
"*input* オプション引数は子プロセスに送信されるデータ (:class:`bytes` オブジェ"
"クト) です。"

#: ../../library/asyncio-subprocess.rst:221
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr "``(stdout_data, stderr_data)`` のタプルを返します。"

#: ../../library/asyncio-subprocess.rst:223
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is "
"raised when writing *input* into *stdin*, the exception is ignored.  This "
"condition occurs when the process exits before all data are written into "
"*stdin*."
msgstr ""
"*input* を標準入力 *stdin* nに書き込んでいる時に :exc:`BrokenPipeError` また"
"は :exc:`ConnectionResetError` 例外が送出された場合、例外は無視されます。この"
"ような条件は、全てのデータが *stdin* に書き込まれる前にプロセスが終了した場合"
"に起こります。"

#: ../../library/asyncio-subprocess.rst:228
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs to "
"be created with ``stdin=PIPE``.  Similarly, to get anything other than "
"``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""
"子プロセスの標準入力 *stdin* にデータを送りたい場合、プロセスは "
"``stdin=PIPE`` を設定して生成する必要があります。同様に、 ``None`` 以外の何ら"
"かのデータを戻り値のタプルで受け取りたい場合、プロセスは ``stdout=PIPE`` と "
"``stderr=PIPE`` のいずれかまたは両方を指定して生成しなければなりません。"

#: ../../library/asyncio-subprocess.rst:234
msgid ""
"Note, that the data read is buffered in memory, so do not use this method if "
"the data size is large or unlimited."
msgstr ""
"プロセスから受信したデータはメモリ上にバッファーされることに注意してくださ"
"い。そのため、返されるデータのサイズが大きいかまたは無制限の場合はこのメソッ"
"ドを使わないようにしてください。"

#: ../../library/asyncio-subprocess.rst:239
msgid "*stdin* gets closed when ``input=None`` too."
msgstr ""

#: ../../library/asyncio-subprocess.rst:243
msgid "Sends the signal *signal* to the child process."
msgstr "子プロセスにシグナル *signal* を送信します。"

#: ../../library/asyncio-subprocess.rst:247
msgid ""
"On Windows, :py:const:`~signal.SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes ``CREATE_NEW_PROCESS_GROUP``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:254
msgid "Stop the child process."
msgstr "子プロセスを停止します。"

#: ../../library/asyncio-subprocess.rst:256
msgid ""
"On POSIX systems this method sends :py:const:`~signal.SIGTERM` to the child "
"process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:259
msgid ""
"On Windows the Win32 API function :c:func:`!TerminateProcess` is called to "
"stop the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:264
msgid "Kill the child process."
msgstr "子プロセスを強制終了 (kill) します。"

#: ../../library/asyncio-subprocess.rst:266
msgid ""
"On POSIX systems this method sends :py:data:`~signal.SIGKILL` to the child "
"process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:269
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr "Windows では、このメソッドは :meth:`terminate` のエイリアスです。"

#: ../../library/asyncio-subprocess.rst:273
msgid ""
"Standard input stream (:class:`~asyncio.StreamWriter`) or ``None`` if the "
"process was created with ``stdin=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:278
msgid ""
"Standard output stream (:class:`~asyncio.StreamReader`) or ``None`` if the "
"process was created with ``stdout=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:283
msgid ""
"Standard error stream (:class:`~asyncio.StreamReader`) or ``None`` if the "
"process was created with ``stderr=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:288
msgid ""
"Use the :meth:`communicate` method rather than :attr:`process.stdin.write() "
"<stdin>`, :attr:`await process.stdout.read() <stdout>` or :attr:`await "
"process.stderr.read() <stderr>`. This avoids deadlocks due to streams "
"pausing reading or writing and blocking the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:297
msgid "Process identification number (PID)."
msgstr "子プロセスのプロセス番号 (PID) です。"

#: ../../library/asyncio-subprocess.rst:299
msgid ""
"Note that for processes created by the :func:`~asyncio."
"create_subprocess_shell` function, this attribute is the PID of the spawned "
"shell."
msgstr ""

#: ../../library/asyncio-subprocess.rst:304
msgid "Return code of the process when it exits."
msgstr "プロセスが終了した時の終了ステータスを返します。"

#: ../../library/asyncio-subprocess.rst:306
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr ""
"この属性が ``None`` であることは、プロセスがまだ終了していないことを示してい"
"ます。"

#: ../../library/asyncio-subprocess.rst:308
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr ""
"負の値 ``-N`` は子プロセスがシグナル ``N`` により中止させられたことを示しま"
"す (POSIX のみ)。"

#: ../../library/asyncio-subprocess.rst:315
msgid "Subprocess and Threads"
msgstr "サブプロセスとスレッド"

#: ../../library/asyncio-subprocess.rst:317
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads by default."
msgstr ""
"標準的な asyncio のイベントループは、異なるスレッドからサブプロセスを実行する"
"のをデフォルトでサポートしています。"

#: ../../library/asyncio-subprocess.rst:320
msgid ""
"On Windows subprocesses are provided by :class:`ProactorEventLoop` only "
"(default), :class:`SelectorEventLoop` has no subprocess support."
msgstr ""
"Windows のサブプロセスは :class:`ProactorEventLoop`  (デフォルト) のみ提供さ"
"れ、 :class:`SelectorEventLoop` はサブプロセスをサポートしていません。"

#: ../../library/asyncio-subprocess.rst:323
msgid ""
"Note that alternative event loop implementations might have own limitations; "
"please refer to their documentation."
msgstr ""
"標準で提供されない別のイベントループ実装の場合、固有の制限がある可能性があり"
"ます; それぞれの実装のドキュメントを参照してください。"

#: ../../library/asyncio-subprocess.rst:328
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ":ref:`asyncio-multithreading`"

#: ../../library/asyncio-subprocess.rst:333
msgid "Examples"
msgstr "使用例"

#: ../../library/asyncio-subprocess.rst:335
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to control a "
"subprocess and the :class:`StreamReader` class to read from its standard "
"output."
msgstr ""
"サブプロセスの制御のために :class:`~asyncio.subprocess.Process` クラスを使"
"い、サブプロセスの標準出力を読み出すために :class:`StreamReader` を使う例で"
"す。"

#: ../../library/asyncio-subprocess.rst:341
msgid ""
"The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr "サブプロセスは :func:`create_subprocess_exec` 関数により生成されます::"

#: ../../library/asyncio-subprocess.rst:344
msgid ""
"import asyncio\n"
"import sys\n"
"\n"
"async def get_date():\n"
"    code = 'import datetime; print(datetime.datetime.now())'\n"
"\n"
"    # Create the subprocess; redirect the standard output\n"
"    # into a pipe.\n"
"    proc = await asyncio.create_subprocess_exec(\n"
"        sys.executable, '-c', code,\n"
"        stdout=asyncio.subprocess.PIPE)\n"
"\n"
"    # Read one line of output.\n"
"    data = await proc.stdout.readline()\n"
"    line = data.decode('ascii').rstrip()\n"
"\n"
"    # Wait for the subprocess exit.\n"
"    await proc.wait()\n"
"    return line\n"
"\n"
"date = asyncio.run(get_date())\n"
"print(f\"Current date: {date}\")"
msgstr ""

#: ../../library/asyncio-subprocess.rst:368
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` written "
"using low-level APIs."
msgstr ""
"低水準の API を使って書かれた :ref:`同様の例 "
"<asyncio_example_subprocess_proto>` も参照してください。"
