# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.resources.rst:2
msgid ""
":mod:`!importlib.resources` -- Package resource reading, opening and access"
msgstr ""
":mod:`!importlib.resources` -- パッケージリソースの読み取り、オープン、アクセ"
"ス"

#: ../../library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/importlib/resources/__init__.py`"

#: ../../library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*."
msgstr ""

#: ../../library/importlib.resources.rst:16
msgid ""
"\"Resources\" are file-like resources associated with a module or package in "
"Python. The resources may be contained directly in a package, within a "
"subdirectory contained in that package, or adjacent to modules outside a "
"package. Resources may be text or binary. As a result, Python module sources "
"(.py) of a package and compilation artifacts (pycache) are technically de-"
"facto resources of that package. In practice, however, resources are "
"primarily those non-Python artifacts exposed specifically by the package "
"author."
msgstr ""

#: ../../library/importlib.resources.rst:25
msgid "Resources can be opened or read in either binary or text mode."
msgstr ""

#: ../../library/importlib.resources.rst:27
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on the "
"file system: for example, a package and its resources can be imported from a "
"zip file using :py:mod:`zipimport`."
msgstr ""
"リソースは大体ディレクトリの中のファイルに似ていますが、これは単なる例え話で"
"あることを頭に入れておくことが重要です。例えば、パッケージとそのリソースは :"
"py:mod:`zipimport` を使って zip ファイルからインポートすることができます。"

#: ../../library/importlib.resources.rst:35
msgid ""
"This module provides functionality similar to `pkg_resources <https://"
"setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic Resource "
"Access <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  This "
"makes reading resources included in packages easier, with more stable and "
"consistent semantics."
msgstr ""
"このモジュールは、 `pkg_resources <https://setuptools.readthedocs.io/en/"
"latest/pkg_resources.html>`_ `Basic Resource Access <https://setuptools."
"readthedocs.io/en/latest/pkg_resources.html#basic-resource-access>`_ に似た機"
"能を、そのパッケージのパフォーマンスのオーバーヘッドを伴わずに提供します。 こ"
"れにより、パッケージに含まれるリソースの読み込みがより簡単になり、より安定し"
"た一貫した意味付けができるようになります。"

#: ../../library/importlib.resources.rst:43
msgid ""
"The standalone backport of this module provides more information on `using "
"importlib.resources <https://importlib-resources.readthedocs.io/en/latest/"
"using.html>`_ and `migrating from pkg_resources to importlib.resources "
"<https://importlib-resources.readthedocs.io/en/latest/migration.html>`_."
msgstr ""
"このモジュールのスタンドアローンバックポートでは、 `importlib.resources の使"
"用 <https://importlib-resources.readthedocs.io/en/latest/using.html>`_ と "
"`pkg_resources から importlib.resources への移行 <https://importlib-"
"resources.readthedocs.io/en/latest/migration.html>`_ についての詳細情報を提供"
"しています。"

#: ../../library/importlib.resources.rst:49
msgid ""
":class:`Loaders <importlib.abc.Loader>` that wish to support resource "
"reading should implement a ``get_resource_reader(fullname)`` method as "
"specified by :class:`importlib.resources.abc.ResourceReader`."
msgstr ""
":class:`Loaders <importlib.abc.Loader>` でリソースの読み込みをサポートしたい"
"場合は、 :class:`importlib.resources.abc.ResourceReader` で指定された "
"``get_resource_reader(fullname)`` メソッドを実装しなければいけません。"

#: ../../library/importlib.resources.rst:55
msgid ""
"Represents an anchor for resources, either a :class:`module object <types."
"ModuleType>` or a module name as a string. Defined as ``Union[str, "
"ModuleType]``."
msgstr ""

#: ../../library/importlib.resources.rst:61
msgid ""
"Returns a :class:`~importlib.resources.abc.Traversable` object representing "
"the resource container (think directory) and its resources (think files). A "
"Traversable may contain other containers (think subdirectories)."
msgstr ""

#: ../../library/importlib.resources.rst:66
msgid ""
"*anchor* is an optional :class:`Anchor`. If the anchor is a package, "
"resources are resolved from that package. If a module, resources are "
"resolved adjacent to that module (in the same package or the package root). "
"If the anchor is omitted, the caller's module is used."
msgstr ""

#: ../../library/importlib.resources.rst:74
msgid ""
"*package* parameter was renamed to *anchor*. *anchor* can now be a non-"
"package module and if omitted will default to the caller's module. *package* "
"is still accepted for compatibility but will raise a :exc:"
"`DeprecationWarning`. Consider passing the anchor positionally or using "
"``importlib_resources >= 5.10`` for a compatible interface on older Pythons."
msgstr ""

#: ../../library/importlib.resources.rst:84
msgid ""
"Given a :class:`~importlib.resources.abc.Traversable` object representing a "
"file or directory, typically from :func:`importlib.resources.files`, return "
"a context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""

#: ../../library/importlib.resources.rst:89
msgid ""
"Exiting the context manager cleans up any temporary file or directory "
"created when the resource was extracted from e.g. a zip file."
msgstr ""

#: ../../library/importlib.resources.rst:92
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file or directory on the file system is required."
msgstr ""

#: ../../library/importlib.resources.rst:98
msgid "Added support for *traversable* representing a directory."
msgstr ""

#: ../../library/importlib.resources.rst:103
msgid "Functional API"
msgstr "関数 API"

#: ../../library/importlib.resources.rst:105
msgid ""
"An older, previously deprecated set of functions is still available. The "
"main drawback of these functions is that they do not support directories: "
"they assume all resources are located directly within a *package*."
msgstr ""

#: ../../library/importlib.resources.rst:111
msgid ""
"Whenever a function accepts a ``Package`` argument, you can pass in either "
"a :class:`module object <types.ModuleType>` or a module name as a string.  "
"You can only pass module objects whose ``__spec__."
"submodule_search_locations`` is not ``None``."
msgstr ""
"関数が ``Package`` を引数に取る場合、 :class:`module object <types."
"ModuleType>` またはモジュール名を文字列で渡すことができます。渡すことができる"
"のは、 ``__spec__.submodule_search_locations`` が ``None`` 以外のモジュールオ"
"ブジェクトのみです。"

#: ../../library/importlib.resources.rst:116
msgid "The ``Package`` type is defined as ``Union[str, ModuleType]``."
msgstr "``Package`` 型は ``Union[str, ModuleType]`` として定義されています。"

#: ../../library/importlib.resources.rst:121
msgid ""
"For *resource* arguments of the functions below, you can pass in the name of "
"a resource as a string or a :class:`path-like object <os.PathLike>`."
msgstr ""
"以下の関数の *resource* 引数には、リソース名を文字列または :class:`path-like "
"オブジェクト <os.PathLike>` として渡すことができます。"

#: ../../library/importlib.resources.rst:125
msgid "The ``Resource`` type is defined as ``Union[str, os.PathLike]``."
msgstr "``Resource`` 型は ``Union[str, os.PathLike]`` として定義されています。"

#: ../../library/importlib.resources.rst:130
msgid "Open for binary reading the *resource* within *package*."
msgstr "*パッケージ* 内の *リソース* をバイナリ読み取り用に開きます。"

#: ../../library/importlib.resources.rst:132
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  This function returns a ``typing."
"BinaryIO`` instance, a binary I/O stream open for reading."
msgstr ""
"*package* は ``Package`` の要件に従った名前またはモジュールオブジェクトで"
"す。 *resource* は *package* 内で開くリソースの名前です。パス区切り文字を含む"
"ことはできず、サブリソースを持つことはできません（つまり、ディレクトリにはな"
"れません）。 この関数は、バイナリI/Oストリームを読み込むために開いている "
"``typing.BinaryIO`` のインスタンスを返します。"

#: ../../library/importlib.resources.rst:138
#: ../../library/importlib.resources.rst:157
#: ../../library/importlib.resources.rst:173
#: ../../library/importlib.resources.rst:190
#: ../../library/importlib.resources.rst:222
#: ../../library/importlib.resources.rst:236
msgid "This function is roughly equivalent to::"
msgstr ""

#: ../../library/importlib.resources.rst:140
msgid "files(package).joinpath(resource).open('rb')"
msgstr ""

#: ../../library/importlib.resources.rst:145
msgid ""
"Open for text reading the *resource* within *package*.  By default, the "
"resource is opened for reading as UTF-8."
msgstr ""
"*package* 内の *resource* をテキスト読み取り用に開きます。 デフォルトでは、リ"
"ソースはUTF-8として読み取り用に開かれます。"

#: ../../library/importlib.resources.rst:148
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  *encoding* and *errors* have the "
"same meaning as with built-in :func:`open`."
msgstr ""
"*package* は ``Package`` の要件に従った名前またはモジュールオブジェクトで"
"す。 *resource* は *package* 内で開くリソースの名前です。パス区切り文字を含む"
"ことはできず、サブリソースを持つことはできません（つまり、ディレクトリにはな"
"れません）。 *encoding* と *errors* は、組み込みの :func:`open` と同じ意味を"
"持ちます。"

#: ../../library/importlib.resources.rst:154
msgid ""
"This function returns a ``typing.TextIO`` instance, a text I/O stream open "
"for reading."
msgstr ""
"この関数は、テキストI/Oストリームを読み込むために開いている ``typing."
"TextIO`` のインスタンスを返します。"

#: ../../library/importlib.resources.rst:159
msgid "files(package).joinpath(resource).open('r', encoding=encoding)"
msgstr ""

#: ../../library/importlib.resources.rst:164
msgid ""
"Read and return the contents of the *resource* within *package* as ``bytes``."
msgstr ""
"*package* 内の *resource* の内容を読み取り、 ``bytes`` として返します。"

#: ../../library/importlib.resources.rst:167
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  This function returns the "
"contents of the resource as :class:`bytes`."
msgstr ""
"*package* は ``Package`` の要件に従った名前またはモジュールオブジェクトで"
"す。 *resource* は *package* 内で開くリソースの名前です。パス区切り文字を含む"
"ことはできず、サブリソースを持つことはできません（つまり、ディレクトリにはな"
"れません）。この関数は、リソースの内容を :class:`bytes` として返します。"

#: ../../library/importlib.resources.rst:175
msgid "files(package).joinpath(resource).read_bytes()"
msgstr ""

#: ../../library/importlib.resources.rst:180
msgid ""
"Read and return the contents of *resource* within *package* as a ``str``. By "
"default, the contents are read as strict UTF-8."
msgstr ""
"*package* 内の *resource* の内容を読み込んで ``str`` として返します。デフォル"
"トでは、内容は厳密なUTF-8として読み込まれます。"

#: ../../library/importlib.resources.rst:183
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory).  *encoding* and *errors* have the "
"same meaning as with built-in :func:`open`.  This function returns the "
"contents of the resource as :class:`str`."
msgstr ""
"*package* は ``Package`` の要件に従った名前またはモジュールオブジェクトで"
"す。 *resource* は *package* 内で開くリソースの名前です。パス区切り文字を含む"
"ことはできず、サブリソースを持つことはできません（つまり、ディレクトリにはな"
"れません）。 *encoding* と *errors* は、組み込みの :func:`open` と同じ意味を"
"持ちます。この関数は、リソースの内容を :class:`str` として返します。"

#: ../../library/importlib.resources.rst:192
msgid "files(package).joinpath(resource).read_text(encoding=encoding)"
msgstr ""

#: ../../library/importlib.resources.rst:197
msgid ""
"Return the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` statement. "
"The context manager provides a :class:`pathlib.Path` object."
msgstr ""
"*resource* へのパスを実際のファイルシステムのパスとして返します。この関数"
"は、 :keyword:`with` 文で使用するためのコンテキストマネージャを返します。コン"
"テキストマネージャは :class:`pathlib.Path` オブジェクトを提供します。"

#: ../../library/importlib.resources.rst:201
msgid ""
"Exiting the context manager cleans up any temporary file created when the "
"resource needs to be extracted from e.g. a zip file."
msgstr ""
"コンテキストマネージャーを終了すると、例えば zip ファイルからリソースを抽出す"
"る必要がある場合に作成される一時ファイルを削除します。"

#: ../../library/importlib.resources.rst:204
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have sub-"
"resources (i.e. it cannot be a directory)."
msgstr ""
"*package* は ``Package`` の要件に従った名前またはモジュールオブジェクトで"
"す。 *resource* は *package* 内で開くリソースの名前です。パス区切り文字を含む"
"ことはできず、サブリソースを持つことはできません（つまり、ディレクトリにはな"
"れません）。"

#: ../../library/importlib.resources.rst:209
msgid "This function is roughly equivalent to ::"
msgstr ""

#: ../../library/importlib.resources.rst:211
msgid "as_file(files(package).joinpath(resource))"
msgstr ""

#: ../../library/importlib.resources.rst:216
msgid ""
"Return ``True`` if there is a resource named *name* in the package, "
"otherwise ``False``. This function does not consider directories to be "
"resources. *package* is either a name or a module object which conforms to "
"the ``Package`` requirements."
msgstr ""
"パッケージ内に *name* という名前のリソースがある場合は ``True`` を、ない場合"
"は ``False`` を返します。この関数は、ディレクトリをリソースとみなしません。 "
"*package* は、名前か ``Package`` の要件に準拠したモジュールオブジェクトです。"

#: ../../library/importlib.resources.rst:224
msgid "files(package).joinpath(resource).is_file()"
msgstr ""

#: ../../library/importlib.resources.rst:229
msgid ""
"Return an iterable over the named items within the package.  The iterable "
"returns :class:`str` resources (e.g. files) and non-resources (e.g. "
"directories).  The iterable does not recurse into subdirectories."
msgstr ""
"パッケージ内の名前付きアイテムに対するイテラブルを返します。 イテラブルは :"
"class:`str` リソース(ファイルなど)と非リソース(ディレクトリなど)を返します。"
"イテラブルは、サブディレクトリへの再帰は行いません。"

#: ../../library/importlib.resources.rst:233
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements."
msgstr ""
"*package* は、名前または ``Package`` の要件に適合するモジュールオブジェクトの"
"いずれかです。"

#: ../../library/importlib.resources.rst:238
msgid ""
"(resource.name for resource in files(package).iterdir() if resource."
"is_file())"
msgstr ""
