# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-05 14:11+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.templatelib.rst:2
msgid ":mod:`!string.templatelib` --- Support for template string literals"
msgstr ""

#: ../../library/string.templatelib.rst:7
msgid "**Source code:** :source:`Lib/string/templatelib.py`"
msgstr ""

#: ../../library/string.templatelib.rst:13
msgid ":ref:`Format strings <f-strings>`"
msgstr ""

#: ../../library/string.templatelib.rst:14
msgid ":ref:`Template string literal (t-string) syntax <t-strings>`"
msgstr ""

#: ../../library/string.templatelib.rst:15
msgid ":pep:`750`"
msgstr ""

#: ../../library/string.templatelib.rst:20
msgid "Template strings"
msgstr "テンプレート文字列"

#: ../../library/string.templatelib.rst:24
msgid ""
"Template strings are a mechanism for custom string processing. They have the "
"full flexibility of Python's :ref:`f-strings`, but return a :class:"
"`Template` instance that gives access to the static and interpolated (in "
"curly brackets) parts of a string *before* they are combined."
msgstr ""

#: ../../library/string.templatelib.rst:30
msgid ""
"To write a t-string, use a ``'t'`` prefix instead of an ``'f'``, like so:"
msgstr ""

#: ../../library/string.templatelib.rst:32
msgid ""
">>> pi = 3.14\n"
">>> t't-strings are new in Python {pi!s}!'\n"
"Template(\n"
"   strings=('t-strings are new in Python ', '!'),\n"
"   interpolations=(Interpolation(3.14, 'pi', 's', ''),)\n"
")"
msgstr ""

#: ../../library/string.templatelib.rst:42
msgid "Types"
msgstr "型"

#: ../../library/string.templatelib.rst:46
msgid ""
"The :class:`!Template` class describes the contents of a template string. It "
"is immutable, meaning that attributes of a template cannot be reassigned."
msgstr ""

#: ../../library/string.templatelib.rst:49
msgid ""
"The most common way to create a :class:`!Template` instance is to use the :"
"ref:`template string literal syntax <t-strings>`. This syntax is identical "
"to that of :ref:`f-strings <f-strings>`, except that it uses a ``t`` prefix "
"in place of an ``f``:"
msgstr ""

#: ../../library/string.templatelib.rst:59
msgid ""
"Templates are stored as sequences of literal :attr:`~Template.strings` and "
"dynamic :attr:`~Template.interpolations`. A :attr:`~Template.values` "
"attribute holds the values of the interpolations:"
msgstr ""

#: ../../library/string.templatelib.rst:72
msgid ""
"The :attr:`!strings` tuple has one more element than :attr:`!interpolations` "
"and :attr:`!values`; the interpolations “belong” between the strings. This "
"may be easier to understand when tuples are aligned"
msgstr ""

#: ../../library/string.templatelib.rst:76
msgid ""
"template.strings:  ('Ah! We do have ',              '.')\n"
"template.values:   (                   'Camembert',    )"
msgstr ""

#: ../../library/string.templatelib.rst:82
#: ../../library/string.templatelib.rst:249
msgid "Attributes"
msgstr "属性"

#: ../../library/string.templatelib.rst:86
msgid "A :class:`tuple` of the static strings in the template."
msgstr ""

#: ../../library/string.templatelib.rst:93
msgid "Empty strings *are* included in the tuple:"
msgstr ""

#: ../../library/string.templatelib.rst:101
msgid ""
"The ``strings`` tuple is never empty, and always contains one more string "
"than the ``interpolations`` and ``values`` tuples:"
msgstr ""

#: ../../library/string.templatelib.rst:116
msgid "A :class:`tuple` of the interpolations in the template."
msgstr ""

#: ../../library/string.templatelib.rst:123
msgid ""
"The ``interpolations`` tuple may be empty and always contains one fewer "
"values than the ``strings`` tuple:"
msgstr ""

#: ../../library/string.templatelib.rst:132
msgid "A tuple of all interpolated values in the template."
msgstr ""

#: ../../library/string.templatelib.rst:139
msgid ""
"The ``values`` tuple always has the same length as the ``interpolations`` "
"tuple. It is always equivalent to ``tuple(i.value for i in template."
"interpolations)``."
msgstr ""

#: ../../library/string.templatelib.rst:144
#: ../../library/string.templatelib.rst:317
msgid "Methods"
msgstr "メソッド"

#: ../../library/string.templatelib.rst:147
msgid ""
"While literal syntax is the most common way to create a :class:`!Template`, "
"it is also possible to create them directly using the constructor:"
msgstr ""

#: ../../library/string.templatelib.rst:158
msgid ""
"If multiple strings are passed consecutively, they will be concatenated into "
"a single value in the :attr:`~Template.strings` attribute. For example, the "
"following code creates a :class:`Template` with a single final string:"
msgstr ""

#: ../../library/string.templatelib.rst:167
msgid ""
"If multiple interpolations are passed consecutively, they will be treated as "
"separate interpolations and an empty string will be inserted between them. "
"For example, the following code creates a template with empty placeholders "
"in the :attr:`~Template.strings` attribute:"
msgstr ""

#: ../../library/string.templatelib.rst:182
msgid ""
"Iterate over the template, yielding each non-empty string and :class:"
"`Interpolation` in the correct order:"
msgstr ""

#: ../../library/string.templatelib.rst:191
msgid "Empty strings are **not** included in the iteration:"
msgstr ""

#: ../../library/string.templatelib.rst:204
msgid ""
"Concatenate this template with another, returning a new :class:`!Template` "
"instance:"
msgstr ""

#: ../../library/string.templatelib.rst:211
msgid ""
"Concatenating a :class:`!Template` and a ``str`` is **not** supported. This "
"is because it is unclear whether the string should be treated as a static "
"string or an interpolation. If you want to concatenate a :class:`!Template` "
"with a string, you should either wrap the string directly in a :class:`!"
"Template` (to treat it as a static string) or use an :class:`!Interpolation` "
"(to treat it as dynamic):"
msgstr ""

#: ../../library/string.templatelib.rst:232
msgid ""
"The :class:`!Interpolation` type represents an expression inside a template "
"string. It is immutable, meaning that attributes of an interpolation cannot "
"be reassigned."
msgstr ""

#: ../../library/string.templatelib.rst:235
msgid ""
"Interpolations support pattern matching, allowing you to match against their "
"attributes with the :ref:`match statement <match>`:"
msgstr ""

#: ../../library/string.templatelib.rst:253
msgid "The evaluated value of the interpolation."
msgstr ""

#: ../../library/string.templatelib.rst:261
msgid ""
"For interpolations created by t-string literals, :attr:`!expression` is the "
"expression text found inside the curly brackets (``{`` & ``}``), including "
"any whitespace, excluding the curly brackets themselves, and ending before "
"the first ``!``, ``:``, or ``=`` if any is present. For manually created "
"interpolations, :attr:`!expression` is the arbitrary string provided when "
"constructing the interpolation instance."
msgstr ""

#: ../../library/string.templatelib.rst:268
msgid ""
"We recommend using valid Python expressions or the empty string for the "
"``expression`` field of manually created :class:`!Interpolation` instances, "
"although this is not enforced at runtime."
msgstr ""

#: ../../library/string.templatelib.rst:278
msgid "The conversion to apply to the value, or ``None``."
msgstr ""

#: ../../library/string.templatelib.rst:280
msgid ""
"The :attr:`!conversion` is the optional conversion to apply to the value:"
msgstr ""

#: ../../library/string.templatelib.rst:288
msgid ""
"Unlike f-strings, where conversions are applied automatically, the expected "
"behavior with t-strings is that code that *processes* the :class:`!Template` "
"will decide how to interpret and whether to apply the :attr:`!conversion`. "
"For convenience, the :func:`convert` function can be used to mimic f-string "
"conversion semantics."
msgstr ""

#: ../../library/string.templatelib.rst:298
msgid "The format specification to apply to the value."
msgstr ""

#: ../../library/string.templatelib.rst:300
msgid ""
"The :attr:`!format_spec` is an optional, arbitrary string used as the format "
"specification to present the value:"
msgstr ""

#: ../../library/string.templatelib.rst:308
msgid ""
"Unlike f-strings, where format specifications are applied automatically via "
"the :func:`format` protocol, the expected behavior with t-strings is that "
"code that *processes* the interpolation will decide how to interpret and "
"whether to apply the format specification. As a result, :attr:`!format_spec` "
"values in interpolations can be arbitrary strings, including those that do "
"not conform to the :func:`format` protocol."
msgstr ""

#: ../../library/string.templatelib.rst:323
msgid "Create a new :class:`!Interpolation` object from component parts."
msgstr ""

#: ../../library/string.templatelib.rst:0
msgid "Parameters"
msgstr "パラメーター"

#: ../../library/string.templatelib.rst:325
msgid "The evaluated, in-scope result of the interpolation."
msgstr ""

#: ../../library/string.templatelib.rst:326
msgid "The text of a valid Python expression, or an empty string."
msgstr ""

#: ../../library/string.templatelib.rst:328
msgid ""
"The :ref:`conversion <formatstrings>` to be used, one of ``None``, ``'a'``, "
"``'r'``, or ``'s'``."
msgstr ""

#: ../../library/string.templatelib.rst:330
msgid ""
"An optional, arbitrary string used as the :ref:`format specification "
"<formatspec>` to present the value."
msgstr ""

#: ../../library/string.templatelib.rst:335
msgid "Helper functions"
msgstr "ヘルパー関数"

#: ../../library/string.templatelib.rst:339
msgid ""
"Applies formatted string literal :ref:`conversion <formatstrings-"
"conversion>` semantics to the given object *obj*. This is frequently useful "
"for custom template string processing logic."
msgstr ""

#: ../../library/string.templatelib.rst:343
msgid "Three conversion flags are currently supported:"
msgstr ""

#: ../../library/string.templatelib.rst:345
msgid "``'s'`` which calls :func:`str` on the value (like ``!s``),"
msgstr ""

#: ../../library/string.templatelib.rst:346
msgid "``'r'`` which calls :func:`repr` (like ``!r``), and"
msgstr ""

#: ../../library/string.templatelib.rst:347
msgid "``'a'`` which calls :func:`ascii` (like ``!a``)."
msgstr ""

#: ../../library/string.templatelib.rst:349
msgid "If the conversion flag is ``None``, *obj* is returned unchanged."
msgstr ""
