# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-21 14:55+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型オブジェクト (integer object)"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "すべての整数は任意の長さをもつ \"long\" 整数として実装されます。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きると、ほとんどの ``PyLong_As*`` API は ``(return type)-1`` を返し"
"ますが、これは数値と見分けが付きません。\n"
"見分けを付けるためには :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "この :c:type:`PyObject` のサブタイプは整数型を表現します。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python 整数型を表現します。これ"
"は Python レイヤにおける :class:`int` と同じオブジェクトです。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyLongObject` か :c:type:`PyLongObject` のサブタイプであると"
"きに真を返します。この関数は常に成功します。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyLongObject` であるが :c:type:`PyLongObject` のサブタイプで"
"ないときに真を返します。この関数は常に成功します。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"*v* から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗の"
"ときには ``NULL`` を返します。"

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"現在の実装では、``-5`` から ``256`` までの全ての整数に対する整数オブジェクト"
"の配列を保持します。この範囲の数を生成すると、実際には既存のオブジェクトに対"
"する参照が返るようになっています。"

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Cの :c:expr:`unsigned long` から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。失敗した際には ``NULL`` を返します。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:type:`Py_ssize_t` 型から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。 失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:type:`size_t` 型から新たな :c:type:`PyLongObject` オブジェクトを生成"
"して返します。 失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:expr:`long long` 型から新たな :c:type:`PyLongObject` オブジェクトを生"
"成して返します。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"C の :c:expr:`unsigned long long` 型から新たな :c:type:`PyLongObject` オブ"
"ジェクトを生成して返します。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"*v* の整数部から新たな :c:type:`PyLongObject` オブジェクトを生成して返しま"
"す。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"ポインタ *p* から Python 整数値を生成します。ポインタの値は :c:func:"
"`PyLong_AsVoidPtr` を適用した結果から取得されます。"

#: ../../c-api/long.rst:123 ../../c-api/long.rst:151
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:127
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"もし *obj* の値が :c:expr:`long` の範囲外であれば、 :exc:`OverflowError` を送"
"出します。"

#: ../../c-api/long.rst:130 ../../c-api/long.rst:160 ../../c-api/long.rst:181
#: ../../c-api/long.rst:201 ../../c-api/long.rst:224
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:132 ../../c-api/long.rst:162 ../../c-api/long.rst:183
#: ../../c-api/long.rst:205 ../../c-api/long.rst:289 ../../c-api/long.rst:309
msgid "Use :meth:`~object.__index__` if available."
msgstr "可能であれば :meth:`~object.__index__` を使うようになりました。"

#: ../../c-api/long.rst:135 ../../c-api/long.rst:165 ../../c-api/long.rst:186
#: ../../c-api/long.rst:208 ../../c-api/long.rst:292 ../../c-api/long.rst:312
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr ""

#: ../../c-api/long.rst:142
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` or "
"another exception."
msgstr ""

#: ../../c-api/long.rst:146
msgid "The function is soft deprecated."
msgstr ""

#: ../../c-api/long.rst:155
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:174 ../../c-api/long.rst:192
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:178
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"もし *obj* の値が :c:expr:`long long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:196
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:type:`Py_ssize_t` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"もし *pylong* の値が :c:type:`Py_ssize_t` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:233
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`unsigned long` を返します。 *pylong* は :c:"
"type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:236
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"もし *pylong* の値が :c:expr:`unsigned long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:239
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:type:`size_t` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"もし *pylong* の値が :c:type:`size_t` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:255
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(size_t)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:264
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`unsigned long long` を返します。 *pylong* は :"
"c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:267
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"もし *pylong* の値が :c:expr:`unsigned long long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:270
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:273
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"負 *pylong* を指定した際に :exc:`TypeError` ではなく、 :exc:`OverflowError` "
"を送出するようになりました。"

#: ../../c-api/long.rst:279
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:283
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"*obj* の値が :c:expr:`unsigned long` の範囲から外れていた場合は、 "
"``ULONG_MAX + 1`` を法とした剰余を返します。"

#: ../../c-api/long.rst:286
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:298
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:303
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"*obj* の値が :c:expr:`unsigned long long` の範囲から外れていた場合は、 "
"``ULLONG_MAX + 1`` を法とした剰余を返します。"

#: ../../c-api/long.rst:306
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:318
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`double` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:321
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"もし *pylong* の値が :c:expr:`double` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:324
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``-1.0`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:329
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Python の整数型を指す *pylong* を、 C の :c:expr:`void` ポインタに変換しま"
"す。 *pylong* を変換できなければ、 :exc:`OverflowError` を送出します。この関"
"数は :c:func:`PyLong_FromVoidPtr` で値を生成するときに使うような :c:expr:"
"`void` ポインタ型を生成できるだけです。"

#: ../../c-api/long.rst:334
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``NULL`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:339
msgid ""
"On success, return a read only :term:`named tuple`, that holds information "
"about Python's internal representation of integers. See :data:`sys.int_info` "
"for description of individual fields."
msgstr ""

#: ../../c-api/long.rst:343
msgid "On failure, return ``NULL`` with an exception set."
msgstr ""

#: ../../c-api/long.rst:350
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr ""

#: ../../c-api/long.rst:352
msgid ""
"This function makes it possible for performance-critical code to implement a "
"“fast path” for small integers. For compact values use :c:func:"
"`PyUnstable_Long_CompactValue`; for others fall back to a :c:func:"
"`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`calling "
"<PyObject_CallMethod>` :meth:`int.to_bytes`."
msgstr ""

#: ../../c-api/long.rst:358
msgid "The speedup is expected to be negligible for most users."
msgstr ""

#: ../../c-api/long.rst:360
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr ""

#: ../../c-api/long.rst:368
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr ""

#: ../../c-api/long.rst:371
msgid "Otherwise, the return value is undefined."
msgstr ""

#: ../../c-api/long.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "long integer"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "整数"

#: ../../c-api/long.rst:119
msgid "LONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:119 ../../c-api/long.rst:171 ../../c-api/long.rst:214
#: ../../c-api/long.rst:229 ../../c-api/long.rst:245 ../../c-api/long.rst:261
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (組み込み例外)"

#: ../../c-api/long.rst:214
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:229
msgid "ULONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:245
msgid "SIZE_MAX (C macro)"
msgstr ""
