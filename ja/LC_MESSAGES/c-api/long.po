# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 15:26+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型オブジェクト (integer object)"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "すべての整数は任意の長さをもつ \"long\" 整数として実装されます。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きると、ほとんどの ``PyLong_As*`` API は ``(return type)-1`` を返し"
"ますが、これは数値と見分けが付きません。\n"
"見分けを付けるためには :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "この :c:type:`PyObject` のサブタイプは整数型を表現します。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python 整数型を表現します。これ"
"は Python レイヤにおける :class:`int` と同じオブジェクトです。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyLongObject` か :c:type:`PyLongObject` のサブタイプであると"
"きに真を返します。この関数は常に成功します。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyLongObject` であるが :c:type:`PyLongObject` のサブタイプで"
"ないときに真を返します。この関数は常に成功します。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"*v* から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗の"
"ときには ``NULL`` を返します。"

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"現在の実装では、``-5`` から ``256`` までの全ての整数に対する整数オブジェクト"
"の配列を保持します。この範囲の数を生成すると、実際には既存のオブジェクトに対"
"する参照が返るようになっています。"

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Cの :c:expr:`unsigned long` から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。失敗した際には ``NULL`` を返します。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:type:`Py_ssize_t` 型から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。 失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:type:`size_t` 型から新たな :c:type:`PyLongObject` オブジェクトを生成"
"して返します。 失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"C の :c:expr:`long long` 型から新たな :c:type:`PyLongObject` オブジェクトを生"
"成して返します。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"C の :c:expr:`unsigned long long` 型から新たな :c:type:`PyLongObject` オブ"
"ジェクトを生成して返します。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"*v* の整数部から新たな :c:type:`PyLongObject` オブジェクトを生成して返しま"
"す。失敗のときには ``NULL`` を返します。"

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""
"*str* の文字列値に基づいて、新たな :c:type:`PyLongObject` を返します。\n"
"このとき *base* を基数として文字列を解釈します。\n"
"*pend* が ``NULL`` でない場合は、 *\\*pend* は *str* 中で数が表現されている部"
"分以降の先頭文字のアドレスを指しています。\n"
"*base* が ``0`` の場合は、 *str* は :ref:`integers` の定義を使って解釈されま"
"す; この場合では、先頭に 0 がある 0 でない十進数は :exc:`ValueError` を送出し"
"ます。\n"
"*base* が ``0`` でなければ、 *base* は ``2`` 以上 ``36`` 以下の数でなければな"
"りません。\n"
"先頭の空白、基数の指定の後や数字の間にある単一のアンダースコアは無視されま"
"す。\n"
"数字が全くない場合、 :exc:`ValueError` が送出されます。"

#: ../../c-api/long.rst:96
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""

#: ../../c-api/long.rst:103
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""

#: ../../c-api/long.rst:111
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"ポインタ *p* から Python 整数値を生成します。ポインタの値は :c:func:"
"`PyLong_AsVoidPtr` を適用した結果から取得されます。"

#: ../../c-api/long.rst:122 ../../c-api/long.rst:140
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:126
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"もし *obj* の値が :c:expr:`long` の範囲外であれば、 :exc:`OverflowError` を送"
"出します。"

#: ../../c-api/long.rst:129 ../../c-api/long.rst:149 ../../c-api/long.rst:170
#: ../../c-api/long.rst:190 ../../c-api/long.rst:213
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:131 ../../c-api/long.rst:151 ../../c-api/long.rst:172
#: ../../c-api/long.rst:194 ../../c-api/long.rst:278 ../../c-api/long.rst:298
msgid "Use :meth:`~object.__index__` if available."
msgstr "可能であれば :meth:`~object.__index__` を使うようになりました。"

#: ../../c-api/long.rst:134 ../../c-api/long.rst:154 ../../c-api/long.rst:175
#: ../../c-api/long.rst:197 ../../c-api/long.rst:281 ../../c-api/long.rst:301
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr ""

#: ../../c-api/long.rst:144
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:163 ../../c-api/long.rst:181
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:167
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"もし *obj* の値が :c:expr:`long long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:185
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:207
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:type:`Py_ssize_t` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:210
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"もし *pylong* の値が :c:type:`Py_ssize_t` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:222
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`unsigned long` を返します。 *pylong* は :c:"
"type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:225
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"もし *pylong* の値が :c:expr:`unsigned long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:228
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:238
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:type:`size_t` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:241
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"もし *pylong* の値が :c:type:`size_t` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:244
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(size_t)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:253
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`unsigned long long` を返します。 *pylong* は :"
"c:type:`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:256
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"もし *pylong* の値が :c:expr:`unsigned long long` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:259
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:262
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"負 *pylong* を指定した際に :exc:`TypeError` ではなく、 :exc:`OverflowError` "
"を送出するようになりました。"

#: ../../c-api/long.rst:268
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:272
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"*obj* の値が :c:expr:`unsigned long` の範囲から外れていた場合は、 "
"``ULONG_MAX + 1`` を法とした剰余を返します。"

#: ../../c-api/long.rst:275
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:287
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:292
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"*obj* の値が :c:expr:`unsigned long long` の範囲から外れていた場合は、 "
"``ULLONG_MAX + 1`` を法とした剰余を返します。"

#: ../../c-api/long.rst:295
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:307
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong* を表す C の :c:expr:`double` を返します。 *pylong* は :c:type:"
"`PyLongObject` のインスタンスでなければなりません。"

#: ../../c-api/long.rst:310
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"もし *pylong* の値が :c:expr:`double` の範囲外であれば、 :exc:"
"`OverflowError` を送出します。"

#: ../../c-api/long.rst:313
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``-1.0`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:318
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Python の整数型を指す *pylong* を、 C の :c:expr:`void` ポインタに変換しま"
"す。 *pylong* を変換できなければ、 :exc:`OverflowError` を送出します。この関"
"数は :c:func:`PyLong_FromVoidPtr` で値を生成するときに使うような :c:expr:"
"`void` ポインタ型を生成できるだけです。"

#: ../../c-api/long.rst:323
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"エラーが起きたときに ``NULL`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "long integer"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "整数"

#: ../../c-api/long.rst:118
msgid "LONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:118 ../../c-api/long.rst:160 ../../c-api/long.rst:203
#: ../../c-api/long.rst:218 ../../c-api/long.rst:234 ../../c-api/long.rst:250
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (組み込み例外)"

#: ../../c-api/long.rst:203
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:218
msgid "ULONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:234
msgid "SIZE_MAX (C macro)"
msgstr ""
