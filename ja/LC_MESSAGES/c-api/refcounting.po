# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "参照カウント"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""
"この節のマクロはPythonオブジェクトの参照カウントを管理するために使われます。"

#: ../../c-api/refcounting.rst:16
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"オブジェクト *o* への新しい :term:`強参照 <strong reference>` を取得し、それ"
"が使用中で破棄されてはならないことを示します。"

#: ../../c-api/refcounting.rst:19
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""

#: ../../c-api/refcounting.rst:23
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""

#: ../../c-api/refcounting.rst:25
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"オブジェクトが ``NULL`` であってはいけません。それが ``NULL`` ではないと確信"
"が持てないならば、 :c:func:`Py_XINCREF` を使ってください。"

#: ../../c-api/refcounting.rst:28 ../../c-api/refcounting.rst:89
msgid "Do not expect this function to actually modify *o* in any way."
msgstr ""

#: ../../c-api/refcounting.rst:33
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:36
msgid "See also :c:func:`Py_XNewRef`."
msgstr ""

#: ../../c-api/refcounting.rst:41
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""

#: ../../c-api/refcounting.rst:44
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""

#: ../../c-api/refcounting.rst:47
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""

#: ../../c-api/refcounting.rst:50
msgid "For example::"
msgstr "例えば::"

#: ../../c-api/refcounting.rst:55
msgid "can be written as::"
msgstr ""

#: ../../c-api/refcounting.rst:59
msgid "See also :c:func:`Py_INCREF`."
msgstr ""

#: ../../c-api/refcounting.rst:66
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr ""

#: ../../c-api/refcounting.rst:68
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr ""

#: ../../c-api/refcounting.rst:75
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""

#: ../../c-api/refcounting.rst:78
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:83
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""

#: ../../c-api/refcounting.rst:86
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"オブジェクトが ``NULL`` であってはいけません。それが ``NULL`` ではないと確信"
"が持てないならば、 :c:func:`Py_XDECREF` を使ってください。"

#: ../../c-api/refcounting.rst:93
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""
"(例えば :meth:`__del__` メソッドをもつクラスインスタンスがメモリ解放されたと"
"きに)メモリ解放関数は任意のPythonコードを呼び出すことができます。このような"
"コードでは例外は伝播しませんが、実行されたコードはすべてのPythonグローバル変"
"数に自由にアクセスできます。これが意味するのは、 :c:func:`Py_DECREF` が呼び出"
"されるより前では、グローバル変数から到達可能などんなオブジェクトも一貫した状"
"態にあるべきであるということです。例えば、リストからオブジェクトを削除する"
"コードは削除するオブジェクトへの参照を一時変数にコピーし、リストデータ構造を"
"更新し、それから一時変数に対して :c:func:`Py_DECREF` を呼び出すべきです。"

#: ../../c-api/refcounting.rst:105
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""

#: ../../c-api/refcounting.rst:112
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""

#: ../../c-api/refcounting.rst:120
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""

#: ../../c-api/refcounting.rst:125
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:132
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:137
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""
"以下の関数やマクロ: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:"
"func:`_Py_NewReference` は、インタプリタのコアの内部においてのみ使用するため"
"のものです。また、グローバル変数 :c:data:`_Py_RefTotal` も同様です。"
