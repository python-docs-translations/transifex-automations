# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr "Unicode オブジェクトと codec"

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr "Unicode オブジェクト"

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""
"Python3.3 の :pep:`393` 実装から、メモリ効率を維持しながらUnicode文字の完全な"
"範囲を扱えるように、Unicodeオブジェクトは内部的に多様な表現形式を用いていま"
"す。すべてのコードポイントが128、256または65536以下の文字列に対して特別なケー"
"スが存在しますが、それ以外ではコードポイントは1114112以下 (これはすべての"
"Unicode範囲です) でなければなりません。"

#: ../../c-api/unicode.rst:20
msgid ""
":c:expr:`Py_UNICODE*` and UTF-8 representations are created on demand and "
"cached in the Unicode object.  The :c:expr:`Py_UNICODE*` representation is "
"deprecated and inefficient."
msgstr ""
":c:expr:`Py_UNICODE*` 表現形式および UTF-8表現形式はオンデマンドで作成され、"
"Unicode オブジェクト内にキャッシュされます。:c:expr:`Py_UNICODE*` 表現は推奨"
"されず、非効率です。"

#: ../../c-api/unicode.rst:24
msgid ""
"Due to the transition between the old APIs and the new APIs, Unicode objects "
"can internally be in two states depending on how they were created:"
msgstr ""
"古いAPIから新しいAPIへの移行の影響で、 Unicode オブジェクトの内部の状態は2通"
"りあります。これはオブジェクトの作られ方によって決まります。"

#: ../../c-api/unicode.rst:27
msgid ""
"\"canonical\" Unicode objects are all objects created by a non-deprecated "
"Unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr ""
"\"正統な\" Unicode オブジェクトは、非推奨ではないUnicode APIで作成されたすべ"
"てのオブジェクトです。これらのオブジェクトは実装が許すかぎり最も効率の良い表"
"現形式を使用します。"

#: ../../c-api/unicode.rst:31
msgid ""
"\"legacy\" Unicode objects have been created through one of the deprecated "
"APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear the :c:expr:"
"`Py_UNICODE*` representation; you will have to call :c:func:"
"`PyUnicode_READY` on them before calling any other API."
msgstr ""
"\"古い\" Unicode オブジェクトは、非推奨の API (たいていは :c:func:"
"`PyUnicode_FromUnicode`) で作成されたオブジェクトで、 :c:expr:`Py_UNICODE*` "
"表現形式しか持ってません;\n"
"他の API を呼び出す前に、このオブジェクトに対し :c:func:`PyUnicode_READY` を"
"呼び出す必要があるでしょう。"

#: ../../c-api/unicode.rst:37
msgid ""
"The \"legacy\" Unicode object will be removed in Python 3.12 with deprecated "
"APIs. All Unicode objects will be \"canonical\" since then. See :pep:`623` "
"for more information."
msgstr ""

#: ../../c-api/unicode.rst:43
msgid "Unicode Type"
msgstr "Unicode 型"

#: ../../c-api/unicode.rst:45
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""
"以下は Python の Unicode 実装に用いられている基本 Unicode オブジェクト型です:"

#: ../../c-api/unicode.rst:52
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""
"これらの型は、それぞれ、32ビット、16ビット、そして8ビットの文字を保持するのに"
"充分な幅を持つ符号なしの整数型のtypedefです。単一のUnicode文字を扱う場合"
"は、 :c:type:`Py_UCS4` を用いてください。"

#: ../../c-api/unicode.rst:61
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""
"これは、:c:type:`wchar_t` のtypedef で、プラットフォームに依存して16ビットか"
"32ビットの型になります。"

#: ../../c-api/unicode.rst:64
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""
"以前のバージョンでは、Pythonをビルドした際に \"narrow\" または \"wide\" "
"Unicode バージョンのどちらを選択したかによって、 16ビットか32ビットのどちらか"
"の型になっていました。"

#: ../../c-api/unicode.rst:74
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""
"これらの :c:type:`PyObject` のサブタイプは Python Unicode オブジェクトを表現"
"します。\n"
"Unicode オブジェクトを扱う全ての API 関数は :c:type:`PyObject` へのポインタを"
"受け取って PyObject へのポインタを返すので、ほとんどの場合、これらの型を直接"
"使うべきではありません。"

#: ../../c-api/unicode.rst:83
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは、Python Unicode型を表します。こ"
"れは、Pythonコードに ``str`` として露出されます。"

#: ../../c-api/unicode.rst:87
msgid ""
"The following APIs are C macros and static inlined functions for fast checks "
"and access to internal read-only data of Unicode objects:"
msgstr ""

#: ../../c-api/unicode.rst:92
msgid ""
"Return true if the object *obj* is a Unicode object or an instance of a "
"Unicode subtype.  This function always succeeds."
msgstr ""
"オブジェクト *obj* が Unicode オブジェクトか Unicode 型のサブタイプのインスタ"
"ンスである場合に真を返します。この関数は常に成功します。"

#: ../../c-api/unicode.rst:98
msgid ""
"Return true if the object *obj* is a Unicode object, but not an instance of "
"a subtype.  This function always succeeds."
msgstr ""
"オブジェクト *obj* が Unicode オブジェクトだがサブタイプのインスタンスでない"
"場合に真を返します。この関数は常に成功します。"

#: ../../c-api/unicode.rst:104
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  This "
"is required before using any of the access macros described below."
msgstr ""
"文字列オブジェクト *o* が \"正統な\" 表現形式であることを保証します。\n"
"このマクロは、下で説明しているどのアクセスマクロを使うときも必要となります。"

#: ../../c-api/unicode.rst:109
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, which "
"in particular happens if memory allocation fails."
msgstr ""
"成功のときには ``0`` を返し、失敗のときには例外を設定し ``-1`` を返します。\n"
"後者は、メモリ確保に失敗したときに特に起きやすいです。"

#: ../../c-api/unicode.rst:115
msgid "This API will be removed with :c:func:`PyUnicode_FromUnicode`."
msgstr ""

#: ../../c-api/unicode.rst:120
msgid ""
"Return the length of the Unicode string, in code points.  *unicode* has to "
"be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"Unicode 文字列のコードポイントでの長さを返します。\n"
"*unicode* は \"正統な\" 表現形式の Unicode オブジェクトでなければなりません "
"(ただしチェックはしません)。"

#: ../../c-api/unicode.rst:130
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use :c:func:"
"`PyUnicode_KIND` to select the right macro.  Make sure :c:func:"
"`PyUnicode_READY` has been called before accessing this."
msgstr ""
"文字に直接アクセスするために、 UCS1, UCS2, UCS4 のいずれかの整数型にキャスト"
"された正統な表現形式へのポインタを返します。\n"
"正統な表現が適正な文字サイズになっているかどうかのチェックはしません;\n"
":c:func:`PyUnicode_KIND` を使って正しいマクロを選んでください。\n"
"このオブジェクトにアクセスする前に、忘れずに :c:func:`PyUnicode_READY` を呼び"
"出してください。"

#: ../../c-api/unicode.rst:144
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ":c:func:`PyUnicode_KIND` マクロの返り値です。"

#: ../../c-api/unicode.rst:149
msgid "``PyUnicode_WCHAR_KIND`` is deprecated."
msgstr ""

#: ../../c-api/unicode.rst:154
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  "
"*unicode* has to be a Unicode object in the \"canonical\" representation "
"(not checked)."
msgstr ""
"この Unicode がデータを保存するのに1文字あたり何バイト使っているかを示す "
"PyUnicode 種別の定数 (上を読んでください) のうち1つを返します。\n"
"*unicode* は \"正統な\" 表現形式の Unicode オブジェクトでなければなりません "
"(ただしチェックはしません)。"

#: ../../c-api/unicode.rst:165
msgid ""
"Return a void pointer to the raw Unicode buffer.  *unicode* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"生の Unicode バッファへの void ポインタを返します。\n"
"*unicode* は \"正統な\" 表現形式の Unicode オブジェクトでなければなりません "
"(ただしチェックはしません)。"

#: ../../c-api/unicode.rst:174
msgid ""
"Write into a canonical representation *data* (as obtained with :c:func:"
"`PyUnicode_DATA`).  This function performs no sanity checks, and is intended "
"for usage in loops.  The caller should cache the *kind* value and *data* "
"pointer as obtained from other calls.  *index* is the index in the string "
"(starts at 0) and *value* is the new code point value which should be "
"written to that location."
msgstr ""
"正統な表現形式となっている (:c:func:`PyUnicode_DATA` で取得した) *data* に書"
"き込みます。\n"
"この関数は正常性のチェックを行わない、ループで使われるためのものです。\n"
"呼び出し側は、他の呼び出しで取得した *kind* 値と *data* ポインタをキャッシュ"
"すべきです。\n"
"*index* は文字列の (0始まりの) インデックスで、 *value* はその場所に書き込ま"
"れることになる新しいコードポイントの値です。"

#: ../../c-api/unicode.rst:187
msgid ""
"Read a code point from a canonical representation *data* (as obtained with :"
"c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""
"正統な表現形式となっている (:c:func:`PyUnicode_DATA` で取得した) *data* から"
"コードポイントを読み取ります。\n"
"チェックや事前確認のマクロ呼び出しは一切行われません。"

#: ../../c-api/unicode.rst:195
msgid ""
"Read a character from a Unicode object *unicode*, which must be in the "
"\"canonical\" representation.  This is less efficient than :c:func:"
"`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""
"Unicode オブジェクト *unicode* から文字を読み取ります。\n"
"この Unicode オブジェクトは \"正統な\" 表現形式でなければなりません。\n"
"何度も連続して読み取る場合には、このマクロは :c:func:`PyUnicode_READ` よりも"
"非効率的です。"

#: ../../c-api/unicode.rst:204
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *unicode*, which must be in the \"canonical\" representation.  This "
"is always an approximation but more efficient than iterating over the string."
msgstr ""
"*unicode* に基づいて他の文字列を作るのに適した最大のコードポイントを返しま"
"す。\n"
"この Unicode オブジェクトは \"正統な\" 表現形式でなければなりません。\n"
"この値は常に概算値ですが、文字列全体を調べるよりも効率的です。"

#: ../../c-api/unicode.rst:213
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units).  *unicode* has to be "
"a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:219 ../../c-api/unicode.rst:229
#: ../../c-api/unicode.rst:761
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_GET_LENGTH`."
msgstr ""
"古いスタイルの Unicode APIの一部なので、 :c:func:`PyUnicode_GET_LENGTH` を使"
"用するように移行してください。"

#: ../../c-api/unicode.rst:224
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *unicode* has to be a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:235
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object.  "
"The returned buffer is always terminated with an extra null code point.  It "
"may also contain embedded null code points, which would cause the string to "
"be truncated when used in most C functions.  The ``AS_DATA`` form casts the "
"pointer to :c:expr:`const char *`.  The *unicode* argument has to be a "
"Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:242
msgid ""
"This function is now inefficient -- because in many cases the :c:type:"
"`Py_UNICODE` representation does not exist and needs to be created -- and "
"can fail (return ``NULL`` with an exception set).  Try to port the code to "
"use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use :c:func:"
"`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""

#: ../../c-api/unicode.rst:251
msgid ""
"Part of the old-style Unicode API, please migrate to using the :c:func:"
"`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""
"古いスタイルの Unicode APIの一部なので、 :c:func:`PyUnicode_nBYTE_DATA` 系の"
"マクロを使用するように移行してください。"

#: ../../c-api/unicode.rst:256
msgid ""
"Return ``1`` if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`. Return ``0`` otherwise."
msgstr ""
"文字列が、 :ref:`identifiers` 節の言語定義における有効な識別子であれば ``1`` "
"を返します。それ以外の場合は ``0`` を返します。"

#: ../../c-api/unicode.rst:259
msgid ""
"The function does not call :c:func:`Py_FatalError` anymore if the string is "
"not ready."
msgstr ""

#: ../../c-api/unicode.rst:265
msgid "Unicode Character Properties"
msgstr "Unicode 文字プロパティ"

#: ../../c-api/unicode.rst:267
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""
"Unicode は数多くの異なる文字プロパティ (character property) を提供していま"
"す。よく使われる文字プロパティは、以下のマクロで利用できます。これらのマクロ"
"は Python の設定に応じて、各々 C の関数に対応付けられています。"

#: ../../c-api/unicode.rst:274
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr "*ch* が空白文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:279
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr "*ch* が小文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:284
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr "*ch* が大文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:289
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""
"*ch* がタイトルケース文字 (titlecase character) かどうかに応じて ``1`` また"
"は ``0`` を返します。"

#: ../../c-api/unicode.rst:294
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr "*ch* が改行文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:299
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr "*ch* が decimal 文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:304
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr "*ch* が digit 文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:309
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""
"*ch* が数字 (numeric) 文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:314
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""
"*ch* がアルファベット文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:319
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric character."
msgstr "*ch* が英数文字かどうかに応じて ``1`` または ``0`` を返します。"

#: ../../c-api/unicode.rst:324
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""
"*ch* が文字が印字可能な文字かどうかに基づいて ``1`` または ``0`` を返しま"
"す。\n"
"非印字可能文字は、 Unicode 文字データベースで \"Other\" または \"Separator\" "
"と定義されている文字の、印字可能と見なされる ASCII space (0x20) 以外のもので"
"す。\n"
"(なお、この文脈での印字可能文字は、文字列に :func:`repr` が呼び出されるときに"
"エスケープすべきでない文字のことです。これは :data:`sys.stdout` や :data:"
"`sys.stderr` に書き込まれる文字列の操作とは関係ありません。)"

#: ../../c-api/unicode.rst:333
msgid "These APIs can be used for fast direct character conversions:"
msgstr "以下の API は、高速に直接文字変換を行うために使われます:"

#: ../../c-api/unicode.rst:338
msgid "Return the character *ch* converted to lower case."
msgstr "*ch* を小文字に変換したものを返します。"

#: ../../c-api/unicode.rst:340 ../../c-api/unicode.rst:348
#: ../../c-api/unicode.rst:356
msgid "This function uses simple case mappings."
msgstr "この関数は単純な大文字小文字変換を使ってます。"

#: ../../c-api/unicode.rst:346
msgid "Return the character *ch* converted to upper case."
msgstr "*ch* を大文字に変換したものを返します。"

#: ../../c-api/unicode.rst:354
msgid "Return the character *ch* converted to title case."
msgstr "*ch* をタイトルケース文字に変換したものを返します。"

#: ../../c-api/unicode.rst:362
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""
"*ch* を 10 進の正の整数に変換したものを返します。不可能ならば ``-1`` を返しま"
"す。このマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:368
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""
"*ch* を一桁の 2 進整数に変換したものを返します。不可能ならば ``-1`` を返しま"
"す。このマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:374
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""
"*ch* を double に変換したものを返します。不可能ならば ``-1.0`` を返します。こ"
"のマクロは例外を送出しません。"

#: ../../c-api/unicode.rst:378
msgid "These APIs can be used to work with surrogates:"
msgstr "これらの API はサロゲートにも使えます:"

#: ../../c-api/unicode.rst:382
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""
"*ch* がサロゲートかどうか (``0xD800 <= ch <= 0xDFFF``) をチェックします。"

#: ../../c-api/unicode.rst:386
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""
"*ch* が上位サロゲートかどうか (``0xD800 <= ch <= 0xDBFF``) をチェックします。"

#: ../../c-api/unicode.rst:390
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""
"*ch* が下位サロゲートかどうか (``0xDC00 <= ch <= 0xDFFF``) をチェックします。"

#: ../../c-api/unicode.rst:394
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* and "
"*low* are respectively the leading and trailing surrogates in a surrogate "
"pair."
msgstr ""
"2つのサロゲート文字を組み合わせて単一の Py_UCS4 値を返します。\n"
"*high* と *low* はそれぞれサロゲートペアの前半分と後半分です。"

#: ../../c-api/unicode.rst:400
msgid "Creating and accessing Unicode strings"
msgstr "Unicode 文字列の生成とアクセス"

#: ../../c-api/unicode.rst:402
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""
"Unicode オブジェクトを生成したり、Unicode のシーケンスとしての基本的なプロパ"
"ティにアクセスしたりするには、以下の API を使ってください:"

#: ../../c-api/unicode.rst:407
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up "
"to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""
"新しい Unicode オブジェクトを生成します。\n"
"*maxchar* は文字列に並べるコードポイントの正しい最大値にすべきです。\n"
"その値は概算値として 127, 255, 65535, 1114111 の一番近い値に切り上げられま"
"す。"

#: ../../c-api/unicode.rst:411
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""
"これは新しい Unicode オブジェクトを生成する推奨された方法です。\n"
"この関数を使って生成されたオブジェクトはサイズ変更は不可能です。"

#: ../../c-api/unicode.rst:420
msgid ""
"Create a new Unicode object with the given *kind* (possible values are :c:"
"macro:`PyUnicode_1BYTE_KIND` etc., as returned by :c:func:"
"`PyUnicode_KIND`).  The *buffer* must point to an array of *size* units of "
"1, 2 or 4 bytes per character, as given by the kind."
msgstr ""
"与えられた *kind* (取り得る値は :c:macro:`PyUnicode_1BYTE_KIND` などの :c:"
"func:`PyUnicode_KIND` が返す値です) の Unicode オブジェクトを生成します。\n"
"*buffer* は、与えられた kind に従って1文字あたり 1, 2, 4 バイトのいずれかを単"
"位として、長さ *size* の配列へのポインタでなければなりません。"

#: ../../c-api/unicode.rst:425
msgid ""
"If necessary, the input *buffer* is copied and transformed into the "
"canonical representation.  For example, if the *buffer* is a UCS4 string (:c:"
"macro:`PyUnicode_4BYTE_KIND`) and it consists only of codepoints in the UCS1 "
"range, it will be transformed into UCS1 (:c:macro:`PyUnicode_1BYTE_KIND`)."
msgstr ""

#: ../../c-api/unicode.rst:436
msgid ""
"Create a Unicode object from the char buffer *str*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not ``NULL``, the return value might be a shared "
"object, i.e. modification of the data is not allowed."
msgstr ""

#: ../../c-api/unicode.rst:441
msgid ""
"If *str* is ``NULL``, this function behaves like :c:func:"
"`PyUnicode_FromUnicode` with the buffer set to ``NULL``.  This usage is "
"deprecated in favor of :c:func:`PyUnicode_New`, and will be removed in "
"Python 3.12."
msgstr ""

#: ../../c-api/unicode.rst:448
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer "
"*str*."
msgstr ""
"UTF-8 エンコードされたnull終端のchar 型バッファ *str* から Unicode オブジェク"
"トを生成します。"

#: ../../c-api/unicode.rst:454
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""

#: ../../c-api/unicode.rst:469
msgid "Format Characters"
msgstr "書式指定文字"

#: ../../c-api/unicode.rst:469
msgid "Type"
msgstr "型"

#: ../../c-api/unicode.rst:469
msgid "Comment"
msgstr "備考"

#: ../../c-api/unicode.rst:471
msgid ":attr:`%%`"
msgstr ":attr:`%%`"

#: ../../c-api/unicode.rst:471
msgid "*n/a*"
msgstr "*n/a*"

#: ../../c-api/unicode.rst:471
msgid "The literal % character."
msgstr "リテラルの % 文字"

#: ../../c-api/unicode.rst:473
msgid ":attr:`%c`"
msgstr ":attr:`%c`"

#: ../../c-api/unicode.rst:473 ../../c-api/unicode.rst:476
#: ../../c-api/unicode.rst:509 ../../c-api/unicode.rst:512
msgid "int"
msgstr "int"

#: ../../c-api/unicode.rst:473
msgid "A single character, represented as a C int."
msgstr "C の整数型で表現される単一の文字。"

#: ../../c-api/unicode.rst:476
msgid ":attr:`%d`"
msgstr ":attr:`%d`"

#: ../../c-api/unicode.rst:476
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr "``printf(\"%d\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:479
msgid ":attr:`%u`"
msgstr ":attr:`%u`"

#: ../../c-api/unicode.rst:479
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/unicode.rst:479
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr "``printf(\"%u\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:482
msgid ":attr:`%ld`"
msgstr ":attr:`%ld`"

#: ../../c-api/unicode.rst:482 ../../c-api/unicode.rst:485
msgid "long"
msgstr "long"

#: ../../c-api/unicode.rst:482
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr "``printf(\"%ld\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:485
msgid ":attr:`%li`"
msgstr ":attr:`%li`"

#: ../../c-api/unicode.rst:485
msgid "Equivalent to ``printf(\"%li\")``. [1]_"
msgstr "``printf(\"%li\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:488
msgid ":attr:`%lu`"
msgstr ":attr:`%lu`"

#: ../../c-api/unicode.rst:488
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/unicode.rst:488
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr "``printf(\"%lu\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:491
msgid ":attr:`%lld`"
msgstr ":attr:`%lld`"

#: ../../c-api/unicode.rst:491 ../../c-api/unicode.rst:494
msgid "long long"
msgstr "long long"

#: ../../c-api/unicode.rst:491
msgid "Equivalent to ``printf(\"%lld\")``. [1]_"
msgstr "``printf(\"%lld\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:494
msgid ":attr:`%lli`"
msgstr ":attr:`%lli`"

#: ../../c-api/unicode.rst:494
msgid "Equivalent to ``printf(\"%lli\")``. [1]_"
msgstr "``printf(\"%lli\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:497
msgid ":attr:`%llu`"
msgstr ":attr:`%llu`"

#: ../../c-api/unicode.rst:497
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/unicode.rst:497
msgid "Equivalent to ``printf(\"%llu\")``. [1]_"
msgstr "``printf(\"%llu\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:500
msgid ":attr:`%zd`"
msgstr ":attr:`%zd`"

#: ../../c-api/unicode.rst:500 ../../c-api/unicode.rst:503
msgid ":c:type:`\\ Py_ssize_t`"
msgstr ":c:type:`\\ Py_ssize_t`"

#: ../../c-api/unicode.rst:500
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr "``printf(\"%zd\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:503
msgid ":attr:`%zi`"
msgstr ":attr:`%zi`"

#: ../../c-api/unicode.rst:503
msgid "Equivalent to ``printf(\"%zi\")``. [1]_"
msgstr "``printf(\"%zi\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:506
msgid ":attr:`%zu`"
msgstr ":attr:`%zu`"

#: ../../c-api/unicode.rst:506
msgid "size_t"
msgstr "size_t"

#: ../../c-api/unicode.rst:506
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr "``printf(\"%zu\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:509
msgid ":attr:`%i`"
msgstr ":attr:`%i`"

#: ../../c-api/unicode.rst:509
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr "``printf(\"%i\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:512
msgid ":attr:`%x`"
msgstr ":attr:`%x`"

#: ../../c-api/unicode.rst:512
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr "``printf(\"%x\")`` と同等。 [1]_"

#: ../../c-api/unicode.rst:515
msgid ":attr:`%s`"
msgstr ":attr:`%s`"

#: ../../c-api/unicode.rst:515
msgid "const char\\*"
msgstr "const char\\*"

#: ../../c-api/unicode.rst:515
msgid "A null-terminated C character array."
msgstr "null で終端された C の文字列。"

#: ../../c-api/unicode.rst:518
msgid ":attr:`%p`"
msgstr ":attr:`%p`"

#: ../../c-api/unicode.rst:518
msgid "const void\\*"
msgstr "const void\\*"

#: ../../c-api/unicode.rst:518
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""
"C ポインタの 16 進表記。``printf(\"%p\")`` とほとんど同じですが、プラット"
"フォームにおける ``printf`` の定義に関わりなく先頭にリテラル ``0x`` が付きま"
"す。"

#: ../../c-api/unicode.rst:526
msgid ":attr:`%A`"
msgstr ":attr:`%A`"

#: ../../c-api/unicode.rst:526 ../../c-api/unicode.rst:529
#: ../../c-api/unicode.rst:538 ../../c-api/unicode.rst:541
msgid "PyObject\\*"
msgstr "PyObject\\*"

#: ../../c-api/unicode.rst:526
msgid "The result of calling :func:`ascii`."
msgstr ":func:`ascii` の戻り値。"

#: ../../c-api/unicode.rst:529
msgid ":attr:`%U`"
msgstr ":attr:`%U`"

#: ../../c-api/unicode.rst:529
msgid "A Unicode object."
msgstr "Unicode オブジェクト。"

#: ../../c-api/unicode.rst:531
msgid ":attr:`%V`"
msgstr ":attr:`%V`"

#: ../../c-api/unicode.rst:531
msgid "PyObject\\*, const char\\*"
msgstr "PyObject\\*, const char\\*"

#: ../../c-api/unicode.rst:531
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:538
msgid ":attr:`%S`"
msgstr ":attr:`%S`"

#: ../../c-api/unicode.rst:538
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ":c:func:`PyObject_Str` の戻り値。"

#: ../../c-api/unicode.rst:541
msgid ":attr:`%R`"
msgstr ":attr:`%R`"

#: ../../c-api/unicode.rst:541
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ":c:func:`PyObject_Repr` の戻り値。"

#: ../../c-api/unicode.rst:545
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""
"識別できない書式指定文字があった場合、残りの書式文字列はそのまま出力文字列に"
"コピーされ、残りの引数は無視されます。"

#: ../../c-api/unicode.rst:549
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"`` "
"(if the ``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:555
msgid ""
"For integer specifiers (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, i, x): "
"the 0-conversion flag has effect even when a precision is given."
msgstr ""

#: ../../c-api/unicode.rst:558
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr "``\"%lld\"``, ``\"%llu\"`` のサポートが追加されました。"

#: ../../c-api/unicode.rst:561
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr "``\"%li\"``, ``\"%lli\"``, ``\"%zi\"`` のサポートが追加されました。"

#: ../../c-api/unicode.rst:564
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""
"``\"%s\"``, ``\"%A\"``, ``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` での幅"
"フォーマッタおよび精度フォーマッタのサポートが追加されました。"

#: ../../c-api/unicode.rst:571
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""
"ちょうど２つの引数を取ることを除いて、 :c:func:`PyUnicode_FromFormat` と同じ"
"です。"

#: ../../c-api/unicode.rst:577
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return "
"a new :term:`strong reference` to the object."
msgstr ""

#: ../../c-api/unicode.rst:581
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""
"Unicode やそのサブタイプ以外のオブジェクトでは :exc:`TypeError` が引き起こさ"
"れます。"

#: ../../c-api/unicode.rst:587
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr "エンコードされている *obj* を Unicode オブジェクトにデコードします。"

#: ../../c-api/unicode.rst:589
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using "
"the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""
":class:`bytes` や :class:`bytearray` や他の :term:`bytes-like objects <bytes-"
"like object>` は、与えられた *encoding* に従ってデコードされ、 *errors* で定"
"義されたエラーハンドリングが使われます。\n"
"これらの引数は両方とも ``NULL`` にでき、その場合この API はデフォルト値を使い"
"ます (詳しことは :ref:`builtincodecs` を参照してください)。"

#: ../../c-api/unicode.rst:595
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""
"その他のUnicodeオブジェクトを含むオブジェクトは :exc:`TypeError` 例外を引き起"
"こします。"

#: ../../c-api/unicode.rst:598
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""
"この API は、エラーが生じたときには ``NULL`` を返します。呼び出し側は返された"
"オブジェクトに対し参照カウンタを 1 つ減らす (decref) する責任があります。"

#: ../../c-api/unicode.rst:604
msgid "Return the length of the Unicode object, in code points."
msgstr "Unicode オブジェクトの長さをコードポイントで返します。"

#: ../../c-api/unicode.rst:615
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to :c:func:`!"
"memcpy` if possible.  Returns ``-1`` and sets an exception on error, "
"otherwise returns the number of copied characters."
msgstr ""
"ある Unicode オブジェクトから他へ文字をコピーします。\n"
"この関数は必要なときに文字変換を行い、可能な場合は :c:func:`!memcpy` へ差し戻"
"します。\n"
"失敗のときには ``-1`` を返し、例外を設定します。そうでない場合は、コピーした"
"文字数を返します。"

#: ../../c-api/unicode.rst:626
msgid ""
"Fill a string with a character: write *fill_char* into ``unicode[start:"
"start+length]``."
msgstr ""
"文字列を文字で埋めます: ``unicode[start:start+length]`` で *fill_char* を埋め"
"ることになります。"

#: ../../c-api/unicode.rst:629
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""
"*fill_char* が文字列の最大文字よりも大きい場合や、文字列2つ以上の参照を持って"
"た場合は失敗します。"

#: ../../c-api/unicode.rst:632
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""
"書き込んだ文字数を返すか、失敗のときには ``-1`` を返し例外を送出します。"

#: ../../c-api/unicode.rst:641
msgid ""
"Write a character to a string.  The string must have been created through :c:"
"func:`PyUnicode_New`.  Since Unicode strings are supposed to be immutable, "
"the string must not be shared, or have been hashed yet."
msgstr ""
"文字列に文字を書き込みます。\n"
"文字列は :c:func:`PyUnicode_New` で作成しなければなりません。\n"
"Unicode 文字列は不変とされているので、この文字列は共有されていたり、これまで"
"にハッシュ化されていてはいけません。"

#: ../../c-api/unicode.rst:645
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""
"この関数は *unicode* が Unicode オブジェクトであること、インデックスが範囲内"
"であること、オブジェクトが安全に変更できる (つまり参照カウントが1である) こと"
"をチェックします。"

#: ../../c-api/unicode.rst:654
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to :c:func:"
"`PyUnicode_READ_CHAR`, which performs no error checking."
msgstr ""
"文字列から文字を読み取ります。\n"
"エラーチェックを行わない :c:func:`PyUnicode_READ_CHAR` とは対照的に、この関数"
"は *unicode* が Unicode オブジェクトであること、インデックスが範囲内であるこ"
"とをチェックします。"

#: ../../c-api/unicode.rst:664
msgid ""
"Return a substring of *unicode*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../../c-api/unicode.rst:673
msgid ""
"Copy the string *unicode* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*unicode*).  *buffer* is returned on success."
msgstr ""

#: ../../c-api/unicode.rst:683
msgid ""
"Copy the string *unicode* into a new UCS4 buffer that is allocated using :c:"
"func:`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a :exc:"
"`MemoryError` set.  The returned buffer always has an extra null code point "
"appended."
msgstr ""
"文字列 *unicode* を :c:func:`PyMem_Malloc` でメモリ確保された新しい UCS4 型の"
"バッファにコピーします。\n"
"これが失敗した場合は、 ``NULL`` を返し :exc:`MemoryError` をセットします。\n"
"返されたバッファは必ず null コードポイントが追加されています。"

#: ../../c-api/unicode.rst:692
msgid "Deprecated Py_UNICODE APIs"
msgstr "廃止予定の Py_UNICODE API群"

#: ../../c-api/unicode.rst:696
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`. "
"Extension modules can continue using them, as they will not be removed in "
"Python 3.x, but need to be aware that their use can now cause performance "
"and memory hits."
msgstr ""
"これらのAPI 関数は :pep:`393` の実装により廃止予定です。Python 3.x では削除さ"
"れないため、拡張モジュールはこれらの関数を引き続き使えますが、これらの関数の"
"使用はパフォーマンスとメモリに影響があることを念頭に置いてください。"

#: ../../c-api/unicode.rst:703
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be ``NULL`` which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object."
msgstr ""
"*size* で指定された長さを持つ Py_UNICODE 型バッファ *u* から Unicode オブジェ"
"クトを生成します。\n"
"*u* を ``NULL`` にしてもよく、その場合オブジェクトの内容は未定義です。\n"
"バッファに必要な情報を埋めるのはユーザの責任です。\n"
"バッファの内容は新たなオブジェクトにコピーされます。"

#: ../../c-api/unicode.rst:708
msgid ""
"If the buffer is not ``NULL``, the return value might be a shared object. "
"Therefore, modification of the resulting Unicode object is only allowed when "
"*u* is ``NULL``."
msgstr ""
"バッファが ``NULL`` でない場合、戻り値は共有されたオブジェクトになることがあ"
"ります。\n"
"従って、この関数が返す Unicode オブジェクトを変更してよいのは *u* が "
"``NULL`` のときだけです。"

#: ../../c-api/unicode.rst:712
msgid ""
"If the buffer is ``NULL``, :c:func:`PyUnicode_READY` must be called once the "
"string content has been filled before using any of the access macros such "
"as :c:func:`PyUnicode_KIND`."
msgstr ""
"バッファが ``NULL`` の場合、文字列の内容が埋められたなら :c:func:"
"`PyUnicode_KIND` のようなアクセスマクロを使う前に :c:func:`PyUnicode_READY` "
"を呼び出さなければなりません。"

#: ../../c-api/unicode.rst:719
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_FromKindAndData`, :c:func:`PyUnicode_FromWideChar`, or :c:func:"
"`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:724
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, or ``NULL`` on error. This will create the :c:expr:"
"`Py_UNICODE*` representation of the object if it is not yet available. The "
"buffer is always terminated with an extra null code point. Note that the "
"resulting :c:type:`Py_UNICODE` string may also contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:735 ../../c-api/unicode.rst:751
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsWideChar`, :c:func:"
"`PyUnicode_ReadChar` or similar new APIs."
msgstr ""

#: ../../c-api/unicode.rst:740
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the :c:func:`Py_UNICODE` "
"array length (excluding the extra null terminator) in *size*. Note that the "
"resulting :c:expr:`Py_UNICODE*` string may contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:756
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units)."
msgstr ""
"非推奨の :c:type:`Py_UNICODE` 表現形式のサイズをコード単位で返します (サロ"
"ゲートペアを2つとしています)。"

#: ../../c-api/unicode.rst:765
msgid "Locale Encoding"
msgstr "ロケールエンコーディング"

#: ../../c-api/unicode.rst:767
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""
"現在のロケールエンコーディングはオペレーティングシステムのテキストをデコード"
"するのに使えます。"

#: ../../c-api/unicode.rst:774
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a "
"null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:781
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from :c:"
"data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""
":c:func:`PyUnicode_DecodeFSDefaultAndSize` を使って (Python の起動時に読み込"
"まれるロケールエンコーディングの) :c:data:`Py_FileSystemDefaultEncoding` の文"
"字列をデコードします。"

#: ../../c-api/unicode.rst:785 ../../c-api/unicode.rst:821
msgid "This function ignores the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../c-api/unicode.rst:789 ../../c-api/unicode.rst:892
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ":c:func:`Py_DecodeLocale` 関数。"

#: ../../c-api/unicode.rst:793
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_DecodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""
"この関数は、 Android 以外では現在のロケールエンコーディングを "
"``surrogateescape`` エラーハンドラで使うようになりました。\n"
"以前は、 :c:func:`Py_DecodeLocale` が ``surrogateescape`` で使われ、現在のロ"
"ケールエンコーディングは ``strict`` で使われていました。"

#: ../../c-api/unicode.rst:802
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`!strlen`."
msgstr ""

#: ../../c-api/unicode.rst:810
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``. Return a :class:"
"`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:817
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to :c:data:"
"`Py_FileSystemDefaultEncoding` (the locale encoding read at Python startup)."
msgstr ""
":c:func:`PyUnicode_EncodeFSDefault` を使って (Python の起動時に読み込まれるロ"
"ケールエンコーディングの) :c:data:`Py_FileSystemDefaultEncoding` の文字列へエ"
"ンコードします。"

#: ../../c-api/unicode.rst:825 ../../c-api/unicode.rst:928
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ":c:func:`Py_EncodeLocale` 関数。"

#: ../../c-api/unicode.rst:829
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_EncodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""
"この関数は、 Android 以外では現在のロケールエンコーディングを "
"``surrogateescape`` エラーハンドラで使うようになりました。\n"
"以前は、 :c:func:`Py_EncodeLocale` が ``surrogateescape`` で使われ、現在のロ"
"ケールエンコーディングは ``strict`` で使われていました。"

#: ../../c-api/unicode.rst:838
msgid "File System Encoding"
msgstr "ファイルシステムエンコーディング"

#: ../../c-api/unicode.rst:840
msgid ""
"To encode and decode file names and other environment strings, :c:data:"
"`Py_FileSystemDefaultEncoding` should be used as the encoding, and :c:data:"
"`Py_FileSystemDefaultEncodeErrors` should be used as the error handler (:pep:"
"`383` and :pep:`529`). To encode file names to :class:`bytes` during "
"argument parsing, the ``\"O&\"`` converter should be used, passing :c:func:"
"`PyUnicode_FSConverter` as the conversion function:"
msgstr ""
"ファイル名や他の環境文字列のエンコードやデコードを行うには、 :c:data:"
"`Py_FileSystemDefaultEncoding` をエンコーディングとして使い、 :c:data:"
"`Py_FileSystemDefaultEncodeErrors` をエラーハンドラとして使うべきです (:pep:"
"`383` および :pep:`529`)。\n"
"引数の構文解析中にファイル名を :class:`bytes` にエンコードするには、 "
"``\"O&\"`` コンバーターを使い、 :c:func:`PyUnicode_FSConverter` を変換関数と"
"して渡すべきです:"

#: ../../c-api/unicode.rst:849
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:expr:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:857 ../../c-api/unicode.rst:874
msgid "Accepts a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../c-api/unicode.rst:860
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"`` "
"converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""
"引数の構文解析中にファイル名を :class:`str` にデコードするには、 ``\"O&\"`` "
"コンバーターを使い、 :c:func:`PyUnicode_FSDecoder` を変換関数として渡すのがよ"
"いです:"

#: ../../c-api/unicode.rst:866
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to :"
"class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:expr:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:880
msgid "Decode a string from the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:882 ../../c-api/unicode.rst:903
#: ../../c-api/unicode.rst:919
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""
":c:data:`Py_FileSystemDefaultEncoding` が設定されていない場合は、ロケールエン"
"コーディングに差し戻されます。"

#: ../../c-api/unicode.rst:885
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to decode a string "
"from the current locale encoding, use :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."
msgstr ""
":c:data:`Py_FileSystemDefaultEncoding` は起動時にロケールエンコーディングで初"
"期化され、それ以降は変更できません。\n"
"現在のロケールエンコーディングで文字列をデコードする必要がある場合は、 :c:"
"func:`PyUnicode_DecodeLocaleAndSize` を使ってください。"

#: ../../c-api/unicode.rst:894 ../../c-api/unicode.rst:908
#: ../../c-api/unicode.rst:932
msgid "Use :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""
":c:data:`Py_FileSystemDefaultEncodeErrors` エラーハンドラを使うようになりまし"
"た。"

#: ../../c-api/unicode.rst:900
msgid ""
"Decode a null-terminated string from the :term:`filesystem encoding and "
"error handler`."
msgstr ""

#: ../../c-api/unicode.rst:906
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length."
msgstr ""
"文字列の長さが分かっている場合は、 :c:func:"
"`PyUnicode_DecodeFSDefaultAndSize` を使ってください。"

#: ../../c-api/unicode.rst:914
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the :"
"c:data:`Py_FileSystemDefaultEncodeErrors` error handler, and return :class:"
"`bytes`. Note that the resulting :class:`bytes` object may contain null "
"bytes."
msgstr ""
":c:data:`Py_FileSystemDefaultEncoding` エラーハンドラで Unicode オブジェクト"
"を :c:data:`Py_FileSystemDefaultEncoding` にエンコードし、 :class:`bytes` を"
"返します。\n"
"返される :class:`bytes` オブジェクトは null バイトを含んでいるかもしれないこ"
"とに注意してください。"

#: ../../c-api/unicode.rst:922
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to encode a string "
"to the current locale encoding, use :c:func:`PyUnicode_EncodeLocale`."
msgstr ""
":c:data:`Py_FileSystemDefaultEncoding` は起動時にロケールエンコーディングで初"
"期化され、それ以降は変更できません。\n"
"現在のロケールエンコーディングで文字列をエンコードする必要がある場合は、 :c:"
"func:`PyUnicode_EncodeLocale` を使ってください。"

#: ../../c-api/unicode.rst:936
msgid "wchar_t Support"
msgstr "wchar_t サポート"

#: ../../c-api/unicode.rst:938
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ":c:type:`wchar_t` をサポートするプラットフォームでの wchar_t サポート:"

#: ../../c-api/unicode.rst:942
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *wstr* of the "
"given *size*. Passing ``-1`` as the *size* indicates that the function must "
"itself compute the length, using :c:func:`!wcslen`. Return ``NULL`` on "
"failure."
msgstr ""

#: ../../c-api/unicode.rst:950
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *wstr*.  "
"At most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of :c:type:"
"`wchar_t` characters copied or ``-1`` in case of an error."
msgstr ""

#: ../../c-api/unicode.rst:955
msgid ""
"When *wstr* is ``NULL``, instead return the *size* that would be required to "
"store all of *unicode* including a terminating null."
msgstr ""

#: ../../c-api/unicode.rst:958
msgid ""
"Note that the resulting :c:expr:`wchar_t*` string may or may not be null-"
"terminated.  It is the responsibility of the caller to make sure that the :c:"
"expr:`wchar_t*` string is null-terminated in case this is required by the "
"application. Also, note that the :c:expr:`wchar_t*` string might contain "
"null characters, which would cause the string to be truncated when used with "
"most C functions."
msgstr ""

#: ../../c-api/unicode.rst:968
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the :c:expr:"
"`wchar_t*` string contains null characters a :exc:`ValueError` is raised."
msgstr ""

#: ../../c-api/unicode.rst:976
msgid ""
"Returns a buffer allocated by :c:macro:`PyMem_New` (use :c:func:`PyMem_Free` "
"to free it) on success. On error, returns ``NULL`` and *\\*size* is "
"undefined. Raises a :exc:`MemoryError` if memory allocation is failed."
msgstr ""

#: ../../c-api/unicode.rst:983
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:expr:`wchar_t*` "
"string contains null characters."
msgstr ""

#: ../../c-api/unicode.rst:991
msgid "Built-in Codecs"
msgstr "組み込み codec (built-in codec)"

#: ../../c-api/unicode.rst:993
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""
"Python には、処理速度を高めるために C で書かれた codec が揃えてあります。これ"
"ら全ての codec は以下の関数を介して直接利用できます。"

#: ../../c-api/unicode.rst:996
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""
"以下の API の多くが、 *encoding* と *errors* という二つの引数をとります。これ"
"らのパラメータは、組み込みの文字列コンストラクタである :func:`str` における同"
"名のパラメータと同じ意味を持ちます。"

#: ../../c-api/unicode.rst:1000
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is "
"UTF-8.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the variable :c:data:"
"`Py_FileSystemDefaultEncoding` internally. This variable should be treated "
"as read-only: on some systems, it will be a pointer to a static string, on "
"others, it will change at run-time (such as when the application invokes "
"setlocale)."
msgstr ""
"*encoding* を ``NULL`` にすると、デフォルトエンコーディングである UTF-8 を使"
"います。\n"
"ファイルシステムに関する関数の呼び出しでは、ファイル名に対するエンコーディン"
"グとして :c:func:`PyUnicode_FSConverter` を使わねばなりません。\n"
"これは内部で変数 :c:data:`Py_FileSystemDefaultEncoding` を使用しています。\n"
"この変数は読み出し専用の変数として扱わねばなりません: この変数は、あるシステ"
"ムによっては静的な文字列に対するポインタであったり、また別のシステムでは、(ア"
"プリケーションが setlocale を呼んだときなどに) 変わったりもします。"

#: ../../c-api/unicode.rst:1008
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""
"*errors* で指定するエラー処理もまた、 ``NULL`` を指定できます。 ``NULL`` を指"
"定すると、codec で定義されているデフォルト処理の使用を意味します。全ての組み"
"込み codec で、デフォルトのエラー処理は \"strict\" (:exc:`ValueError` を送出"
"する) になっています。"

#: ../../c-api/unicode.rst:1012
msgid ""
"The codecs all use a similar interface.  Only deviations from the following "
"generic ones are documented for simplicity."
msgstr ""
"個々の codec は全て同様のインターフェースを使っています。個別の codec の説明"
"では、説明を簡単にするために以下の汎用のインターフェースとの違いだけを説明し"
"ています。"

#: ../../c-api/unicode.rst:1017
msgid "Generic Codecs"
msgstr "汎用 codec"

#: ../../c-api/unicode.rst:1019
msgid "These are the generic codec APIs:"
msgstr "以下は汎用 codec の API です:"

#: ../../c-api/unicode.rst:1025
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string "
"*str*. *encoding* and *errors* have the same meaning as the parameters of "
"the same name in the :func:`str` built-in function.  The codec to be used is "
"looked up using the Python codec registry.  Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1035
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""
"Unicode オブジェクトをエンコードし、その結果を Python の bytes オブジェクトと"
"して返します。\n"
"*encoding* および *errors* は Unicode 型の :meth:`~str.encode` メソッドに与え"
"る同名のパラメータと同じ意味を持ちます。\n"
"使用する codec の検索は、 Python の codec レジストリを使って行います。\n"
"codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1043
msgid "UTF-8 Codecs"
msgstr "UTF-8 Codecs"

#: ../../c-api/unicode.rst:1045
msgid "These are the UTF-8 codec APIs:"
msgstr "以下は UTF-8 codec の APIです:"

#: ../../c-api/unicode.rst:1050
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""
"UTF-8 でエンコードされた *size* バイトの文字列 *str* から Unicode オブジェク"
"トを生成します。codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1057
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""
"*consumed* が ``NULL`` の場合、 :c:func:`PyUnicode_DecodeUTF8` と同じように動"
"作します。 *consumed* が ``NULL`` でない場合、末尾の不完全な UTF-8 バイト列は"
"エラーとみなされません。これらのバイト列はデコードされず、デコードされたバイ"
"ト数は *consumed* に格納されます。"

#: ../../c-api/unicode.rst:1065
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""
"UTF-8 で Unicode オブジェクトをエンコードし、結果を Python バイト列オブジェク"
"トとして返します。エラー処理は \"strict\" です。 codec が例外を送出した場合に"
"は ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1072
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""
"Unicode オブジェクトを UTF-8 でエンコードしたものへのポインタを返し、エンコー"
"ドされた表現形式でのサイズ (バイト単位) を *size* に格納します。\n"
"*size* 引数は ``NULL`` でも構いません; その場合はサイズは格納されません。\n"
"返されるバッファには、 null コードポイントがあるかどうかに関わらず、常に "
"null バイトが終端に付加されています (これは *size* には勘定されません)。"

#: ../../c-api/unicode.rst:1078
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and no "
"*size* is stored."
msgstr ""
"エラーが起きた場合は、 ``NULL`` を返し、例外を設定し、 *size* には何も格納し"
"ません。"

#: ../../c-api/unicode.rst:1081
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer. The buffer is deallocated "
"and pointers to it become invalid when the Unicode object is garbage "
"collected."
msgstr ""

#: ../../c-api/unicode.rst:1088 ../../c-api/unicode.rst:1101
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr "返り値の型が ``char *`` ではなく ``const char *`` になりました。"

#: ../../c-api/unicode.rst:1091
msgid "This function is a part of the :ref:`limited API <limited-c-api>`."
msgstr ""

#: ../../c-api/unicode.rst:1097
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""
":c:func:`PyUnicode_AsUTF8AndSize` とほぼ同じですが、サイズを格納しません。"

#: ../../c-api/unicode.rst:1106
msgid "UTF-32 Codecs"
msgstr "UTF-32 Codecs"

#: ../../c-api/unicode.rst:1108
msgid "These are the UTF-32 codec APIs:"
msgstr "以下は UTF-32 codec API です:"

#: ../../c-api/unicode.rst:1114
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""
"UTF-32 でエンコードされたバッファ文字列から *size* バイトをデコードし、 "
"Unicodeオブジェクトとして返します。 *errors* は (``NULL`` でないなら) エラー"
"ハンドラを指定します。デフォルトは \"strict\" です。"

#: ../../c-api/unicode.rst:1118 ../../c-api/unicode.rst:1168
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""
"*byteorder* が ``NULL`` でない時、デコーダは与えられたバイトオーダーでデコー"
"ドを開始します。 ::"

#: ../../c-api/unicode.rst:1125
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""
"``*byteorder`` が 0 で、入力データの最初の 4 バイトが byte order mark (BOM) "
"ならば、デコーダはこのバイトオーダーに切り替え、BOM は結果の Unicode 文字列に"
"コピーされません。 ``*byteorder`` が ``-1`` または ``1`` ならば、全ての byte "
"order mark は出力にコピーされます。"

#: ../../c-api/unicode.rst:1130
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""
"デコードが完了した後、入力データの終端に来た時点でのバイトオーダーを "
"*\\*byteorder* にセットします。"

#: ../../c-api/unicode.rst:1133 ../../c-api/unicode.rst:1184
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""
"*byteorder* が ``NULL`` のとき、 codec は native order モードで開始します。"

#: ../../c-api/unicode.rst:1135 ../../c-api/unicode.rst:1186
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr "codec が例外を発生させたときは ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1141
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""
"*consumed* が ``NULL`` のとき、 :c:func:`PyUnicode_DecodeUTF32` と同じように"
"振る舞います。 *consumed* が ``NULL`` でないとき、 :c:func:"
"`PyUnicode_DecodeUTF32Stateful` は末尾の不完全な (4 で割り切れない長さのバイ"
"ト列などの) UTF-32 バイト列をエラーとして扱いません。末尾の不完全なバイト列は"
"デコードされず、デコードされたバイト数が *consumed* に格納されます。"

#: ../../c-api/unicode.rst:1150
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""
"ネイティブバイトオーダーで UTF-32 エンコーディングされた Python バイト文字列"
"を返します。\n"
"文字列は常に BOM マークで始まります。\n"
"エラーハンドラは \"strict\" です。\n"
"codec が例外を発生させたときは ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1156
msgid "UTF-16 Codecs"
msgstr "UTF-16 Codecs"

#: ../../c-api/unicode.rst:1158
msgid "These are the UTF-16 codec APIs:"
msgstr "以下は UTF-16 codec の APIです:"

#: ../../c-api/unicode.rst:1164
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""
"UTF-16 でエンコードされたバッファ *s* から *size* バイトだけデコードして、結"
"果を Unicode オブジェクトで返します。 *errors* は (``NULL`` でない場合) エ"
"ラー処理方法を定義します。デフォルト値は \"strict\" です。"

#: ../../c-api/unicode.rst:1175
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""
"``*byteorder`` が 0 で、入力データの先頭2バイトがバイトオーダーマーク (BOM) "
"だった場合、デコーダは BOM が示すバイトオーダーに切り替え、そのBOMを結果の "
"Unicode 文字列にコピーしません。 ``*byteorder`` が ``-1`` か ``1`` だった場"
"合、すべてのBOMは出力へコピーされます (出力では ``\\ufeff`` か ``\\ufffe`` の"
"どちらかになるでしょう)。"

#: ../../c-api/unicode.rst:1181
msgid ""
"After completion, ``*byteorder`` is set to the current byte order at the end "
"of input data."
msgstr ""
"デコードが完了した後、入力データの終端に来た時点でのバイトオーダーを "
"``*byteorder`` にセットします。"

#: ../../c-api/unicode.rst:1192
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""
"*consumed* が ``NULL`` の場合、 :c:func:`PyUnicode_DecodeUTF16` と同じように"
"動作します。 *consumed* が ``NULL`` でない場合、 :c:func:"
"`PyUnicode_DecodeUTF16Stateful` は末尾の不完全な UTF-16 バイト列 (奇数長のバ"
"イト列や分割されたサロゲートペア) をエラーとみなしません。これらのバイト列は"
"デコードされず、デコードされたバイト数を *consumed* に返します。"

#: ../../c-api/unicode.rst:1201
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""
"ネイティブバイトオーダーで UTF-16 エンコーディングされた Python バイト文字列"
"を返します。\n"
"文字列は常に BOM マークで始まります。\n"
"エラーハンドラは \"strict\" です。\n"
"codec が例外を発生させたときは ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1207
msgid "UTF-7 Codecs"
msgstr "UTF-7 Codecs"

#: ../../c-api/unicode.rst:1209
msgid "These are the UTF-7 codec APIs:"
msgstr "以下は UTF-7 codec の API です:"

#: ../../c-api/unicode.rst:1214
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1221
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""
"*consumed* が ``NULL`` のとき、 :c:func:`PyUnicode_DecodeUTF7` と同じように動"
"作します。 *consumed* が ``NULL`` でないとき、末尾の不完全な UTF-7 base-64 部"
"分をエラーとしません。不完全な部分のバイト列はデコードせずに、デコードしたバ"
"イト数を *consumed* に格納します。"

#: ../../c-api/unicode.rst:1228
msgid "Unicode-Escape Codecs"
msgstr "Unicode-Escape Codecs"

#: ../../c-api/unicode.rst:1230
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr "以下は \"Unicode Escape\" codec の API です:"

#: ../../c-api/unicode.rst:1236
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../../c-api/unicode.rst:1242
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""
"Unicode-Escape を使い Unicode オブジェクトをエンコードし、結果を bytes オブ"
"ジェクトとして返します。\n"
"エラー処理は \"strict\" です。\n"
"codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1248
msgid "Raw-Unicode-Escape Codecs"
msgstr "Raw-Unicode-Escape Codecs"

#: ../../c-api/unicode.rst:1250
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr "以下は \"Raw Unicode Escape\" codec の APIです:"

#: ../../c-api/unicode.rst:1256
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../../c-api/unicode.rst:1262
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""
"Raw-Unicode-Escape を使い Unicode オブジェクトをエンコードし、結果を bytes オ"
"ブジェクトとして返します。\n"
"エラー処理は \"strict\" です。\n"
"codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1268
msgid "Latin-1 Codecs"
msgstr "Latin-1 Codecs"

#: ../../c-api/unicode.rst:1270
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""
"以下は Latin-1 codec の APIです: Latin-1 は、 Unicode 序数の最初の 256 個に対"
"応し、エンコード時にはこの 256 個だけを受理します。"

#: ../../c-api/unicode.rst:1276
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""
"Latin-1 でエンコードされた *size* バイトの文字列 *str* から Unicode オブジェ"
"クトを生成します。codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1282
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""
"Latin-1 で Unicode オブジェクトをエンコードし、結果を Python bytes オブジェク"
"トとして返します。\n"
"エラー処理は \"strict\" です。 codec が例外を送出した場合には ``NULL`` を返し"
"ます。"

#: ../../c-api/unicode.rst:1288
msgid "ASCII Codecs"
msgstr "ASCII Codecs"

#: ../../c-api/unicode.rst:1290
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""
"以下は ASCII codec の APIです。 7 ビットの ASCII データだけを受理します。その"
"他のコードはエラーになります。"

#: ../../c-api/unicode.rst:1296
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1302
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""
"ASCII で Unicode オブジェクトをエンコードし、結果を Python bytes オブジェクト"
"として返します。\n"
"エラー処理は \"strict\" です。\n"
"codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1308
msgid "Character Map Codecs"
msgstr "Character Map Codecs"

#: ../../c-api/unicode.rst:1310
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`!encodings` package). The codec uses mappings "
"to encode and decode characters.  The mapping objects provided must support "
"the :meth:`~object.__getitem__` mapping interface; dictionaries and "
"sequences work well."
msgstr ""
"この codec は、多くの様々な codec を実装する際に使われるという点で特殊な "
"codec です (実際、 :mod:`!encodings` パッケージに入っている標準 codecs のほと"
"んどは、この codec を使っています)。\n"
"この codec は、文字のエンコードやデコードに対応表を使います。\n"
"提供される対応表のオブジェクトは :meth:`~object.__getitem__` マッピングイン"
"ターフェースをサポートしていなければなりません; 辞書やシーケンスがそれに適し"
"ています。"

#: ../../c-api/unicode.rst:1316
msgid "These are the mapping codec APIs:"
msgstr "以下は mapping codec の APIです:"

#: ../../c-api/unicode.rst:1321
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *str* "
"using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""
"与えられた *mapping* オブジェクトを使って、 *size* バイトのエンコードされた文"
"字列 *str* をデコードして Unicode オブジェクトを作成します。\n"
"codec が例外を発生させたときは ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1325
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1336
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if "
"an exception was raised by the codec."
msgstr ""
"Unicode オブジェクトを *mapping* に指定されたオブジェクトを使ってエンコード"
"し、結果を bytes オブジェクトとして返します。エラー処理は \"strict\" です。 "
"codec が例外を送出した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1340
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1346
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""
"以下の codec API は Unicode から Unicode への対応付けを行う特殊なものです。"

#: ../../c-api/unicode.rst:1350
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object. Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""
"文字列に文字対応表 *table* を適用して変換し、変換結果を Unicode オブジェクト"
"で返します。codec が例外を発行した場合には ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1354
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""
"対応表は、Unicode 序数を表す整数を Unicode 序数を表す整数または ``None`` (そ"
"の文字を削除する) に対応付けなければなりません。"

#: ../../c-api/unicode.rst:1357
msgid ""
"Mapping tables need only provide the :meth:`~object.__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../../c-api/unicode.rst:1361
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""
"*errors* は codecs で通常使われるのと同じ意味を持ちます。 *errors* は "
"``NULL`` にしてもよく、デフォルトエラー処理の使用を意味します。"

#: ../../c-api/unicode.rst:1366
msgid "MBCS codecs for Windows"
msgstr "Windows 用の MBCS codec"

#: ../../c-api/unicode.rst:1368
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""
"以下は MBCS codec の API です。この codec は現在のところ、 Windows 上だけで利"
"用でき、変換の実装には Win32 MBCS 変換機構 (Win32 MBCS converter) を使ってい"
"ます。 MBCS (または DBCS) はエンコード方式の種類 (class) を表す言葉で、単一の"
"エンコード方式を表すわけでなないので注意してください。利用されるエンコード方"
"式 (target encoding) は、 codec を動作させているマシン上のユーザ設定で定義さ"
"れています。"

#: ../../c-api/unicode.rst:1375
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1382
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""
"*consumed* が ``NULL`` のとき、 :c:func:`PyUnicode_DecodeMBCS` と同じ動作をし"
"ます。 *consumed* が ``NULL`` でないとき、 :c:func:"
"`PyUnicode_DecodeMBCSStateful` は文字列の最後にあるマルチバイト文字の前半バイ"
"トをデコードせず、 *consumed* にデコードしたバイト数を格納します。"

#: ../../c-api/unicode.rst:1390
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""
"MBCS で Unicode オブジェクトをエンコードし、結果を Python バイト列オブジェク"
"トとして返します。エラー処理は \"strict\" です。 codec が例外を送出した場合に"
"は ``NULL`` を返します。"

#: ../../c-api/unicode.rst:1397
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use :"
"c:macro:`!CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1405
msgid "Methods & Slots"
msgstr "メソッドとスロット"

#: ../../c-api/unicode.rst:1411
msgid "Methods and Slot Functions"
msgstr "メソッドおよびスロット関数 (slot function)"

#: ../../c-api/unicode.rst:1413
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""
"以下の API は Unicode オブジェクトおよび文字列を入力に取り (説明では、どちら"
"も文字列と表記しています)、場合に応じて Unicode オブジェクトか整数を返す機能"
"を持っています。"

#: ../../c-api/unicode.rst:1417
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""
"これらの関数は全て、例外が発生した場合には ``NULL`` または ``-1`` を返しま"
"す。"

#: ../../c-api/unicode.rst:1422
msgid "Concat two strings giving a new Unicode string."
msgstr "二つの文字列を結合して、新たな Unicode 文字列を生成します。"

#: ../../c-api/unicode.rst:1427
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""
"Unicode 文字列のリストを分割して、 Unicode 文字列からなるリストを返します。 "
"*sep* が ``NULL`` の場合、全ての空白文字を使って分割を行います。それ以外の場"
"合、指定された文字を使って分割を行います。最大で *maxsplit* 個までの分割を行"
"います。 *maxsplit* が負ならば分割数に制限を設けません。分割結果のリスト内に"
"は分割文字は含みません。"

#: ../../c-api/unicode.rst:1435
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepends* is ``0``, the Line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1442
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""
"指定した *separator* で文字列からなるシーケンスを連結 (join) し、連結結果を "
"Unicode 文字列で返します。"

#: ../../c-api/unicode.rst:1449
msgid ""
"Return ``1`` if *substr* matches ``unicode[start:end]`` at the given tail "
"end (*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` "
"a suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1457
msgid ""
"Return the first position of *substr* in ``unicode[start:end]`` using the "
"given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""
"``unicode[start:end]`` 中に *substr* が最初に出現する場所を返します。\n"
"このとき指定された検索方向 *direction* (*direction* == ``1`` は順方向検索、 "
"*direction* == ``-1`` は逆方向検索) で検索します。\n"
"戻り値は最初にマッチが見つかった場所のインデックスです; 戻り値 ``-1`` はマッ"
"チが見つからなかったことを表し、 ``-2`` はエラーが発生して例外情報が設定され"
"ていることを表します。"

#: ../../c-api/unicode.rst:1467
msgid ""
"Return the first position of the character *ch* in ``unicode[start:end]`` "
"using the given *direction* (*direction* == ``1`` means to do a forward "
"search, *direction* == ``-1`` a backward search).  The return value is the "
"index of the first match; a value of ``-1`` indicates that no match was "
"found, and ``-2`` indicates that an error occurred and an exception has been "
"set."
msgstr ""
"``unicode[start:end]`` 中に文字 *ch* が最初に出現する場所を返します。\n"
"このとき指定された検索方向 *direction* (*direction* == ``1`` は順方向検索、 "
"*direction* == ``-1`` は逆方向検索) で検索します。\n"
"戻り値は最初にマッチが見つかった場所のインデックスです; 戻り値 ``-1`` はマッ"
"チが見つからなかったことを表し、 ``-2`` はエラーが発生して例外情報が設定され"
"ていることを表します。"

#: ../../c-api/unicode.rst:1475
msgid ""
"*start* and *end* are now adjusted to behave like ``unicode[start:end]``."
msgstr ""

#: ../../c-api/unicode.rst:1482
msgid ""
"Return the number of non-overlapping occurrences of *substr* in "
"``unicode[start:end]``.  Return ``-1`` if an error occurred."
msgstr ""
"``unicode[start:end]`` に *substr* が重複することなく出現する回数を返します。"
"エラーが発生した場合には ``-1`` を返します。"

#: ../../c-api/unicode.rst:1489
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *unicode* with "
"*replstr* and return the resulting Unicode object. *maxcount* == ``-1`` "
"means replace all occurrences."
msgstr ""
"*unicode* 中に出現する *substr* を最大で *maxcount* 個 *replstr* に置換し、置"
"換結果である Unicode オブジェクトを返します。\n"
"*maxcount* == ``-1`` にすると、文字列中に現れる全ての *substr* を置換します。"

#: ../../c-api/unicode.rst:1496
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""
"二つの文字列を比較して、左引数が右引数より小さい場合、左右引数が等価の場合、"
"左引数が右引数より大きい場合に対して、それぞれ ``-1``, ``0``, ``1`` を返しま"
"す。"

#: ../../c-api/unicode.rst:1499
msgid ""
"This function returns ``-1`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""
"この関数は、失敗したときに ``-1`` を返すので、 :c:func:`PyErr_Occurred` を呼"
"び出して、エラーをチェックすべきです。"

#: ../../c-api/unicode.rst:1505
msgid ""
"Compare a Unicode object, *unicode*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""
"Unicode オブジェクト *unicode* と *string* を比較して、左引数が右引数より小さ"
"い場合、左右引数が等価の場合、左引数が右引数より大きい場合に対して、それぞれ "
"``-1``, ``0``, ``1`` を返します。\n"
"ASCII エンコードされた文字列だけを渡すのが最も良いですが、入力文字列に非 "
"ASCII 文字が含まれている場合は ISO-8859-1 として解釈します。"

#: ../../c-api/unicode.rst:1510
msgid "This function does not raise exceptions."
msgstr "この関数は例外を送出しません。"

#: ../../c-api/unicode.rst:1515
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr "二つのUnicode文字列を比較して、下のうちの一つを返します:"

#: ../../c-api/unicode.rst:1517
msgid "``NULL`` in case an exception was raised"
msgstr "``NULL`` を、例外が発生したときに返します。"

#: ../../c-api/unicode.rst:1518
msgid ":c:data:`Py_True` or :c:data:`Py_False` for successful comparisons"
msgstr ""
":c:data:`Py_True` もしくは :c:data:`Py_False` を、正しく比較できた時に返しま"
"す。"

#: ../../c-api/unicode.rst:1519
msgid ":c:data:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../c-api/unicode.rst:1521
msgid ""
"Possible values for *op* are :c:macro:`Py_GT`, :c:macro:`Py_GE`, :c:macro:"
"`Py_EQ`, :c:macro:`Py_NE`, :c:macro:`Py_LT`, and :c:macro:`Py_LE`."
msgstr ""

#: ../../c-api/unicode.rst:1527
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""
"新たな文字列オブジェクトを *format* および *args* から生成して返します; この"
"メソッドは ``format % args`` のようなものです。"

#: ../../c-api/unicode.rst:1533
msgid ""
"Check whether *substr* is contained in *unicode* and return true or false "
"accordingly."
msgstr ""
"*substr* が *unicode* 内にあるか調べ、その結果に応じて真または偽を返します。"

#: ../../c-api/unicode.rst:1536
msgid ""
"*substr* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""
"*substr* は単要素の Unicode 文字に型強制できなければなりません。エラーが生じ"
"た場合には ``-1`` を返します。"

#: ../../c-api/unicode.rst:1542
msgid ""
"Intern the argument :c:expr:`*p_unicode` in place.  The argument must be the "
"address of a pointer variable pointing to a Python Unicode string object.  "
"If there is an existing interned string that is the same as :c:expr:"
"`*p_unicode`, it sets :c:expr:`*p_unicode` to it (releasing the reference to "
"the old string object and creating a new :term:`strong reference` to the "
"interned string object), otherwise it leaves :c:expr:`*p_unicode` alone and "
"interns it (creating a new :term:`strong reference`). (Clarification: even "
"though there is a lot of talk about references, think of this function as "
"reference-neutral; you own the object after the call if and only if you "
"owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1555
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new Unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""
":c:func:`PyUnicode_FromString` と :c:func:`PyUnicode_InternInPlace` を組み合"
"わせたもので、収容済みの新たな文字列オブジェクトを返すか、同じ値を持つ収容済"
"みの Unicode 文字列オブジェクトに対する新たな (\"所有権のある\") 参照を返しま"
"す。"
