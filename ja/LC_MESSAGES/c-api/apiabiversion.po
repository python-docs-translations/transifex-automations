# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-15 21:21+0000\n"
"PO-Revision-Date: 2025-08-15 18:59+0000\n"
"Last-Translator: Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/apiabiversion.rst:7
msgid "API and ABI Versioning"
msgstr "API と ABI のバージョニング"

#: ../../c-api/apiabiversion.rst:11
msgid "Build-time version constants"
msgstr "ビルド時バージョン定数"

#: ../../c-api/apiabiversion.rst:13
msgid ""
"CPython exposes its version number in the following macros. Note that these "
"correspond to the version code is **built** with. See :c:var:`Py_Version` "
"for the version used at **run time**."
msgstr ""
"CPythonは、以下のマクロを通じてバージョン番号を公開しています。これらのマクロ"
"は、**ビルド**されたバージョンコードに対応しています。見る :c:var:"
"`Py_Version` 実行時**run time** で使用されるバージョン。"

#: ../../c-api/apiabiversion.rst:17
msgid ""
"See :ref:`stable` for a discussion of API and ABI stability across versions."
msgstr ""
"バージョン間の API と ABI の安定性については :ref:`stable` を参照してくださ"
"い。"

#: ../../c-api/apiabiversion.rst:21
msgid "The ``3`` in ``3.4.1a2``."
msgstr "``3.4.1a2`` の ``3`` 。"

#: ../../c-api/apiabiversion.rst:25
msgid "The ``4`` in ``3.4.1a2``."
msgstr "``3.4.1a2`` の ``4`` 。"

#: ../../c-api/apiabiversion.rst:29
msgid "The ``1`` in ``3.4.1a2``."
msgstr "``3.4.1a2`` の ``1`` 。"

#: ../../c-api/apiabiversion.rst:33
msgid ""
"The ``a`` in ``3.4.1a2``. This can be ``0xA`` for alpha, ``0xB`` for beta, "
"``0xC`` for release candidate or ``0xF`` for final."
msgstr ""
"``3.4.1a2`` の ``a`` 。アルファでは ``0xA`` 、ベータでは ``0xB`` 、リリース候"
"補では ``0xC`` 、最終版では ``0xF`` となります。"

#: ../../c-api/apiabiversion.rst:39
msgid "The ``2`` in ``3.4.1a2``. Zero for final releases."
msgstr "``3.4.1a2`` の ``2`` 。最終リリースでは 0 になります。"

#: ../../c-api/apiabiversion.rst:43
msgid ""
"The Python version number encoded in a single integer. See :c:func:"
"`Py_PACK_FULL_VERSION` for the encoding details."
msgstr ""
"Pythonのバージョン番号を単一の整数で表したものです。見る:c:func:"
"`Py_PACK_FULL_VERSION` エンコードの詳細については。"

#: ../../c-api/apiabiversion.rst:46
msgid ""
"Use this for numeric comparisons, for example, ``#if PY_VERSION_HEX >= ...``."
msgstr "数値比較に使用します。例えば、``#if PY_VERSION_HEX >= ...``"

#: ../../c-api/apiabiversion.rst:51
msgid "Run-time version"
msgstr "実行時バージョン"

#: ../../c-api/apiabiversion.rst:55
msgid ""
"The Python runtime version number encoded in a single constant integer. See :"
"c:func:`Py_PACK_FULL_VERSION` for the encoding details. This contains the "
"Python version used at run time."
msgstr ""
"Pythonのランタイムバージョン番号を単一の定数整数にエンコードしたものです。見"
"る :c:func:`Py_PACK_FULL_VERSION` エンコードの詳細については、こちらを参照し"
"てください。これには、実行時に使用されるPythonのバージョンが含まれています。"

#: ../../c-api/apiabiversion.rst:59
msgid ""
"Use this for numeric comparisons, for example, ``if (Py_Version >= ...)``."
msgstr "数値比較に使用します。例えば、``if (Py_Version >= ...)``."

#: ../../c-api/apiabiversion.rst:65
msgid "Bit-packing macros"
msgstr "ビットパッキングマクロ"

#: ../../c-api/apiabiversion.rst:69
msgid ""
"Return the given version, encoded as a single 32-bit integer with the "
"following structure:"
msgstr ""
"指定されたバージョンを、以下の構造でエンコードされた単一の32ビット整数として"
"返します："

#: ../../c-api/apiabiversion.rst:75
msgid "Argument"
msgstr "引数"

#: ../../c-api/apiabiversion.rst:73
msgid "No. of bits"
msgstr "ビット数"

#: ../../c-api/apiabiversion.rst:75
msgid "Bit mask"
msgstr "ビットマスク"

#: ../../c-api/apiabiversion.rst:75
msgid "Bit shift"
msgstr "ビットシフト"

#: ../../c-api/apiabiversion.rst:73
msgid "Example values"
msgstr "例示値"

#: ../../c-api/apiabiversion.rst:75 ../../c-api/apiabiversion.rst:93
msgid "``3.4.1a2``"
msgstr "``3.4.1a2``"

#: ../../c-api/apiabiversion.rst:75 ../../c-api/apiabiversion.rst:95
msgid "``3.10.0``"
msgstr "``3.10.0``"

#: ../../c-api/apiabiversion.rst:77
msgid "*major*"
msgstr "*主要な*"

#: ../../c-api/apiabiversion.rst:77 ../../c-api/apiabiversion.rst:79
#: ../../c-api/apiabiversion.rst:81
msgid "8"
msgstr "8"

#: ../../c-api/apiabiversion.rst:77
msgid "``0xFF000000``"
msgstr "``0xFF000000``"

#: ../../c-api/apiabiversion.rst:77
msgid "24"
msgstr "24"

#: ../../c-api/apiabiversion.rst:77
msgid "``0x03``"
msgstr "``0x03``"

#: ../../c-api/apiabiversion.rst:79
msgid "*minor*"
msgstr "*軽微な*"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x00FF0000``"
msgstr "``0x00FF0000``"

#: ../../c-api/apiabiversion.rst:79
msgid "16"
msgstr "16"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x04``"
msgstr "``0x04``"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x0A``"
msgstr "``0x0A``"

#: ../../c-api/apiabiversion.rst:81
msgid "*micro*"
msgstr "*マイクロ*"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x0000FF00``"
msgstr "``0x0000FF00``"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x01``"
msgstr "``0x01``"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x00``"
msgstr "``0x00``"

#: ../../c-api/apiabiversion.rst:83
msgid "*release_level*"
msgstr "*リリースレベル*"

#: ../../c-api/apiabiversion.rst:83 ../../c-api/apiabiversion.rst:85
msgid "4"
msgstr "4"

#: ../../c-api/apiabiversion.rst:83
msgid "``0x000000F0``"
msgstr "``0x000000F0``"

#: ../../c-api/apiabiversion.rst:83
msgid "``0xA``"
msgstr "``0xA``"

#: ../../c-api/apiabiversion.rst:83
msgid "``0xF``"
msgstr "``0xF``"

#: ../../c-api/apiabiversion.rst:85
msgid "*release_serial*"
msgstr "*リリース番号*"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x0000000F``"
msgstr "``0x0000000F``"

#: ../../c-api/apiabiversion.rst:85
msgid "0"
msgstr "0"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x2``"
msgstr "``0x2``"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x0``"
msgstr "``0x0``"

#: ../../c-api/apiabiversion.rst:88
msgid "For example:"
msgstr "例えば:"

#: ../../c-api/apiabiversion.rst:91
msgid "Version"
msgstr "Version"

#: ../../c-api/apiabiversion.rst:91
msgid "``Py_PACK_FULL_VERSION`` arguments"
msgstr "``Py_PACK_FULL_VERSION`` 引数"

#: ../../c-api/apiabiversion.rst:91
msgid "Encoded version"
msgstr "符号化バージョン"

#: ../../c-api/apiabiversion.rst:93
msgid "``(3, 4, 1, 0xA, 2)``"
msgstr "``(3, 4, 1, 0xA, 2)``"

#: ../../c-api/apiabiversion.rst:93
msgid "``0x030401a2``"
msgstr "``0x030401a2``"

#: ../../c-api/apiabiversion.rst:95
msgid "``(3, 10, 0, 0xF, 0)``"
msgstr "``(3, 10, 0, 0xF, 0)``"

#: ../../c-api/apiabiversion.rst:95
msgid "``0x030a00f0``"
msgstr "``0x030a00f0``"

#: ../../c-api/apiabiversion.rst:98
msgid ""
"Out-of range bits in the arguments are ignored. That is, the macro can be "
"defined as:"
msgstr ""
"引数内の範囲外のビットは無視されます。つまり、マクロは次のように定義できま"
"す："

#: ../../c-api/apiabiversion.rst:101
msgid ""
"#ifndef Py_PACK_FULL_VERSION\n"
"#define Py_PACK_FULL_VERSION(X, Y, Z, LEVEL, SERIAL) ( \\\n"
"   (((X) & 0xff) << 24) |                              \\\n"
"   (((Y) & 0xff) << 16) |                              \\\n"
"   (((Z) & 0xff) << 8) |                               \\\n"
"   (((LEVEL) & 0xf) << 4) |                            \\\n"
"   (((SERIAL) & 0xf) << 0))\n"
"#endif"
msgstr ""
"#ifndef Py_PACK_FULL_VERSION\n"
"#define Py_PACK_FULL_VERSION(X, Y, Z, LEVEL, SERIAL) ( \\\n"
"(((X) & 0xff) << 24) | \\\n"
"(((Y) & 0xff) << 16) | \\\n"
"(((Z) & 0xff) << 8) | \\\n"
"(((LEVEL) & 0xf) << 4) | \\\n"
"(((SERIAL) & 0xf) << 0))\n"
"#endif"

#: ../../c-api/apiabiversion.rst:112
msgid ""
"``Py_PACK_FULL_VERSION`` is primarily a macro, intended for use in ``#if`` "
"directives, but it is also available as an exported function."
msgstr ""
"``Py_PACK_FULL_VERSION`` 主にマクロであり、〜で使用することを意図しています "
"``#if`` 指定子 ただし、この機能はエクスポートされた関数としても利用可能です。"

#: ../../c-api/apiabiversion.rst:119
msgid ""
"Equivalent to ``Py_PACK_FULL_VERSION(major, minor, 0, 0, 0)``. The result "
"does not correspond to any Python release, but is useful in numeric "
"comparisons."
msgstr ""
"相当する ``Py_PACK_FULL_VERSION(major, minor, 0, 0, 0)``.  結果はどのPythonの"
"リリースとも一致しませんが、数値比較において有用です。"
