# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 16:47+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "ヒープ上のオブジェクトの割り当て"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"初期化 新たに割り当てられたオブジェクト *op* とその型および初期値 参照. 初期"
"化されたオブジェクトを返します。 *type* がオブジェクトが循環型ガベージ検出器"
"に参加していることを示す場合、そのオブジェクトは検出器の観測対象オブジェクト"
"のセットに追加されます。オブジェクトの他のフィールドは影響を受けません。"

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"これはすべてをこなします :c:func:`PyObject_Init` 行います、そしてまた 初期化 "
"可変長オブジェクトの長さ情報。"

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized. The caller will own the only "
"reference to the object (i.e. its reference count will be one). The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"C構造体型 *TYPE* と Python 型オブジェクト *typeobj* を使用して、新しい "
"Python オブジェクトを割り当てます(``PyTypeObject*``). Python オブジェクトの"
"ヘッダーで定義されていないフィールドは初期化されません。呼び出し元がオブジェ"
"クトへの唯一の参照を保持します (すなわち、その 参照カウント 1つになります)。"
"メモリ割り当てのサイズは :c:member:`~PyTypeObject.tp_basicsize` オブジェクト"
"型のフィールド。"

#: ../../c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized.  The allocated memory allows for "
"the *TYPE* structure plus *size* (``Py_ssize_t``) fields of the size given "
"by the :c:member:`~PyTypeObject.tp_itemsize` field of *typeobj*.  This is "
"useful for implementing objects like tuples, which are able to determine "
"their size at construction time.  Embedding the array of fields into the "
"same allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""
"C構造体型 *TYPE* と Python 型オブジェクト *typeobj* を使用して、新しい "
"Python オブジェクトを割り当てます (``PyTypeObject*``).  Python オブジェクトの"
"ヘッダーで定義されていないフィールドは初期化されません。 割り当てられたメモリ"
"は、*TYPE* 構造体と *size* を収容できるように確保されています "
"(``Py_ssize_t``) 指定されたサイズによるフィールド :c:member:`~PyTypeObject."
"tp_itemsize` *typeobj* 型のフィールド。これは、構築時にサイズを決定できるタプ"
"ルのようなオブジェクトを実装するのに役立ちます。フィールドの配列を同じ割り当"
"てに埋め込むことで、割り当ての回数を減らし、メモリ管理の効率を向上させます。"

#: ../../c-api/allocation.rst:57
msgid ""
"Releases memory allocated to an object using :c:macro:`PyObject_New` or :c:"
"macro:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"リリース オブジェクトに割り当てられたメモリを使用して :c:macro:"
"`PyObject_New` または :c:macro:`PyObject_NewVar`. これは通常 :c:member:"
"`~PyTypeObject.tp_dealloc`  オブジェクトの型で指定されたハンドラー。 この呼び"
"出し後は、オブジェクトのフィールドにアクセスしないでください。メモリはもはや"
"有効なPythonオブジェクトではありません。"

#: ../../c-api/allocation.rst:66
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Pythonで表示可能なオブジェクトとして ``None``. これは、以下の方法でのみアクセ"
"スする必要があります :c:macro:`Py_None` マクロ, このオブジェクトへのポイン"
"ターとして評価されます。"

#: ../../c-api/allocation.rst:73
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:74
msgid "To allocate and create extension modules."
msgstr "拡張モジュールを割り当てて作成する。"
