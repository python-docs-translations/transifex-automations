# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Adewale Adeleke <adewaleadeleke236@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "オブジェクトをヒープ上にメモリ確保する"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  Other fields of the object are "
"not initialized.  Despite its name, this function is unrelated to the "
"object's :meth:`~object.__init__` method (:c:member:`~PyTypeObject.tp_init` "
"slot).  Specifically, this function does **not** call the object's :meth:`!"
"__init__` method."
msgstr ""
"新規に割り当てられたオブジェクト *op* を、その型と初期参照で初期化します。初"
"期化されたオブジェクトを返します。オブジェクトの他のフィールドは初期化されて"
"いません。この関数は、その名前にもかかわらず、オブジェクトの :meth:`~object."
"__init__` メソッド ( :c:member:`~PyTypeObject.tp_init`スロット)。 具体的に"
"は、この関数は **not** オブジェクトの :meth:`!__init__`メソッド"

#: ../../c-api/allocation.rst:24
msgid ""
"In general, consider this function to be a low-level routine. Use :c:member:"
"`~PyTypeObject.tp_alloc` where possible. For implementing :c:member:`!"
"tp_alloc` for your type, prefer :c:func:`PyType_GenericAlloc` or :c:func:"
"`PyObject_New`."
msgstr ""
"一般的には、この関数を低レベルルーチンとして扱ってください。使用 :c:member:"
"`~PyTypeObject.tp_alloc` 可能な限り。実施のため :c:member:`!tp_alloc` あなた"
"のタイプには、以下のものがおすすめです。:c:func:`PyType_GenericAlloc`または:"
"c:func:`PyObject_New`"

#: ../../c-api/allocation.rst:31
msgid ""
"This function only initializes the object's memory corresponding to the "
"initial :c:type:`PyObject` structure.  It does not zero the rest."
msgstr ""
"この関数は、オブジェクトの初期状態に対応するメモリ領域のみを初期化します:c:"
"type:`PyObject` 構造。 残りの部分をゼロにしません。"

#: ../../c-api/allocation.rst:37
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
":c:func:`PyObject_Init` の全ての処理を行い、可変サイズオブジェクトの場合には"
"長さ情報も初期化します。"

#: ../../c-api/allocation.rst:42
msgid ""
"This function only initializes some of the object's memory.  It does not "
"zero the rest."
msgstr ""
"この関数は、オブジェクトのメモリの一部だけを初期化します。残りはゼロクリアさ"
"れません。"

#: ../../c-api/allocation.rst:48
msgid ""
"Allocates a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``) by calling :c:func:"
"`PyObject_Malloc` to allocate memory and initializing it like :c:func:"
"`PyObject_Init`.  The caller will own the only reference to the object (i.e. "
"its reference count will be one)."
msgstr ""
"C構造体型を使用して新しいPythonオブジェクトを割り当てます *TYPE*  および"
"Pythonのオブジェクト型 *typeobj* (``PyTypeObject*``)  電話をかけることで :c:"
"func:`PyObject_Malloc` メモリを割り当てて初期化するには、次のようにします:c:"
"func:`PyObject_Init`. 呼び出し元はオブジェクトへの唯一の参照を保持します（つ"
"まり、その参照カウントは1になります）。"

#: ../../c-api/allocation.rst:54 ../../c-api/allocation.rst:107
msgid ""
"Avoid calling this directly to allocate memory for an object; call the "
"type's :c:member:`~PyTypeObject.tp_alloc` slot instead."
msgstr ""
"この関数を直接呼び出してオブジェクトのメモリを割り当てることは避けてくださ"
"い；タイプの呼び出し :c:member:`~PyTypeObject.tp_alloc` 代わりにスロットを。"

#: ../../c-api/allocation.rst:57 ../../c-api/allocation.rst:110
msgid ""
"When populating a type's :c:member:`~PyTypeObject.tp_alloc` slot, :c:func:"
"`PyType_GenericAlloc` is preferred over a custom function that simply calls "
"this macro."
msgstr ""
"タイプの値を格納する際、:c:member:`~PyTypeObject.tp_alloc` スロット、:c:func:"
"`PyType_GenericAlloc` このマクロを単に呼び出すだけのカスタム関数よりも、この"
"マクロを直接呼び出す方が好ましい。"

#: ../../c-api/allocation.rst:61
msgid ""
"This macro does not call :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), or :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."
msgstr ""
"このマクロは呼び出しません :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), または :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."

#: ../../c-api/allocation.rst:65
msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_New` instead."
msgstr ""
"これは、以下の対象物には使用できません :c:macro:`Py_TPFLAGS_HAVE_GC` 設定され"
"る :c:member:`~PyTypeObject.tp_flags`; 使用 :c:macro:`PyObject_GC_New` 代わり"
"に。"

#: ../../c-api/allocation.rst:68
msgid ""
"Memory allocated by this macro must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"このマクロで割り当てられたメモリは :c:func:`PyObject_Free` （通常、オブジェク"
"トの経由で呼び出されます :c:member:`~PyTypeObject.tp_free` スロット)"

#: ../../c-api/allocation.rst:73 ../../c-api/allocation.rst:123
msgid ""
"The returned memory is not guaranteed to have been completely zeroed before "
"it was initialized."
msgstr ""
"返却されたメモリは、初期化される前に完全にゼロクリアされていることが保証され"
"ていません。"

#: ../../c-api/allocation.rst:78 ../../c-api/allocation.rst:128
msgid ""
"This macro does not construct a fully initialized object of the given type; "
"it merely allocates memory and prepares it for further initialization by :c:"
"member:`~PyTypeObject.tp_init`.  To construct a fully initialized object, "
"call *typeobj* instead.  For example::"
msgstr ""
"このマクロは、指定された型の完全に初期化されたオブジェクトを構築しません; 単"
"にメモリを割り当て、さらに初期化するための準備を行うだけです:c:member:"
"`~PyTypeObject.tp_init`. 完全に初期化されたオブジェクトを作成するには、代わり"
"に*typeobj*を呼び出してください。 例::"

#: ../../c-api/allocation.rst:83
msgid "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"
msgstr "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"

#: ../../c-api/allocation.rst:87 ../../c-api/allocation.rst:137
msgid ":c:func:`PyObject_Free`"
msgstr ":c:func:`PyObject_Free`"

#: ../../c-api/allocation.rst:88
msgid ":c:macro:`PyObject_GC_New`"
msgstr ":c:macro:`PyObject_GC_New`"

#: ../../c-api/allocation.rst:89 ../../c-api/allocation.rst:139
msgid ":c:func:`PyType_GenericAlloc`"
msgstr ":c:func:`PyType_GenericAlloc`"

#: ../../c-api/allocation.rst:90 ../../c-api/allocation.rst:140
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ":c:member:`~PyTypeObject.tp_alloc`"

#: ../../c-api/allocation.rst:95
msgid "Like :c:macro:`PyObject_New` except:"
msgstr "のように :c:macro:`PyObject_New` ただし："

#: ../../c-api/allocation.rst:97
msgid ""
"It allocates enough memory for the *TYPE* structure plus *size* "
"(``Py_ssize_t``) fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *typeobj*."
msgstr ""
"*TYPE*構造体と*size*分のメモリを割り当てます (``Py_ssize_t``) 指定されたサイ"
"ズによるフィールド :c:member:`~PyTypeObject.tp_itemsize` *typeobj* 型のフィー"
"ルド。"

#: ../../c-api/allocation.rst:100
msgid "The memory is initialized like :c:func:`PyObject_InitVar`."
msgstr "メモリは次のように初期化されます:c:func:`PyObject_InitVar`."

#: ../../c-api/allocation.rst:102
msgid ""
"This is useful for implementing objects like tuples, which are able to "
"determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""
"これは、構築時にサイズを決定できるタプルのようなオブジェクトを実装するのに役"
"立ちます。 フィールドの配列を同じ割り当てに埋め込むことで、割り当ての回数を減"
"らし、メモリ管理の効率を向上させます。"

#: ../../c-api/allocation.rst:114
msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_NewVar` instead."
msgstr ""
"これは、以下の対象物には使用できません :c:macro:`Py_TPFLAGS_HAVE_GC` 設定され"
"る :c:member:`~PyTypeObject.tp_flags`; 使用 :c:macro:`PyObject_GC_NewVar`代わ"
"りに。"

#: ../../c-api/allocation.rst:118
msgid ""
"Memory allocated by this function must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"この関数によって割り当てられたメモリは :c:func:`PyObject_Free` （通常、オブ"
"ジェクトの :c:member:`~PyTypeObject.tp_free` スロット)"

#: ../../c-api/allocation.rst:133
msgid ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"
msgstr ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"

#: ../../c-api/allocation.rst:138
msgid ":c:macro:`PyObject_GC_NewVar`"
msgstr ":c:macro:`PyObject_GC_NewVar`"

#: ../../c-api/allocation.rst:145
msgid "Same as :c:func:`PyObject_Free`."
msgstr "同じです :c:func:`PyObject_Free`."

#: ../../c-api/allocation.rst:149
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Python からは ``None`` に見えるオブジェクトです。この値へのアクセスは、このオ"
"ブジェクトへのポインタを評価する :c:macro:`Py_None` マクロを使わなければなり"
"ません。"

#: ../../c-api/allocation.rst:156
msgid ":ref:`moduleobjects`"
msgstr ":ref:`moduleobjects`"

#: ../../c-api/allocation.rst:157
msgid "To allocate and create extension modules."
msgstr "拡張モジュールのアロケートと生成。"
