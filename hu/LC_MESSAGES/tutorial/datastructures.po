# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Hungarian (https://app.transifex.com/python-doc/teams/5390/"
"hu/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr "Adatstruktúrák"

#: ../../tutorial/datastructures.rst:7
msgid ""
"This chapter describes some things you've learned about already in more "
"detail, and adds some new things as well."
msgstr ""
"Ez a fejezet az eddig tanultakból pár dolgot részletesebben is leír, és pár "
"új dolgot is megmutat."

#: ../../tutorial/datastructures.rst:13
msgid "More on Lists"
msgstr "A listákról bővebben"

#: ../../tutorial/datastructures.rst:15
msgid ""
"The list data type has some more methods.  Here are all of the methods of "
"list objects:"
msgstr ""
"A lista adattípusnak a már megismerteken kívül több metódusa (method) is "
"van. Az összes metódus ismertetése:"

#: ../../tutorial/datastructures.rst:22
msgid ""
"Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``."
msgstr ""

#: ../../tutorial/datastructures.rst:28
msgid ""
"Extend the list by appending all the items from the iterable.  Equivalent to "
"``a[len(a):] = iterable``."
msgstr ""

#: ../../tutorial/datastructures.rst:35
msgid ""
"Insert an item at a given position.  The first argument is the index of the "
"element before which to insert, so ``a.insert(0, x)`` inserts at the front "
"of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""

#: ../../tutorial/datastructures.rst:43
msgid ""
"Remove the first item from the list whose value is equal to *x*.  It raises "
"a :exc:`ValueError` if there is no such item."
msgstr ""

#: ../../tutorial/datastructures.rst:50
msgid ""
"Remove the item at the given position in the list, and return it.  If no "
"index is specified, ``a.pop()`` removes and returns the last item in the "
"list. It raises an :exc:`IndexError` if the list is empty or the index is "
"outside the list range."
msgstr ""

#: ../../tutorial/datastructures.rst:59
msgid "Remove all items from the list.  Equivalent to ``del a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:65
msgid ""
"Return zero-based index in the list of the first item whose value is equal "
"to *x*. Raises a :exc:`ValueError` if there is no such item."
msgstr ""

#: ../../tutorial/datastructures.rst:68
msgid ""
"The optional arguments *start* and *end* are interpreted as in the slice "
"notation and are used to limit the search to a particular subsequence of the "
"list.  The returned index is computed relative to the beginning of the full "
"sequence rather than the *start* argument."
msgstr ""

#: ../../tutorial/datastructures.rst:77
msgid "Return the number of times *x* appears in the list."
msgstr ""

#: ../../tutorial/datastructures.rst:83
msgid ""
"Sort the items of the list in place (the arguments can be used for sort "
"customization, see :func:`sorted` for their explanation)."
msgstr ""

#: ../../tutorial/datastructures.rst:90
msgid "Reverse the elements of the list in place."
msgstr ""

#: ../../tutorial/datastructures.rst:96
msgid "Return a shallow copy of the list.  Equivalent to ``a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:99
msgid "An example that uses most of the list methods::"
msgstr "Egy példa, amely tartalmazza a legtöbb metódust::"

#: ../../tutorial/datastructures.rst:122
msgid ""
"You might have noticed that methods like ``insert``, ``remove`` or ``sort`` "
"that only modify the list have no return value printed -- they return the "
"default ``None``. [#]_  This is a design principle for all mutable data "
"structures in Python."
msgstr ""

#: ../../tutorial/datastructures.rst:127
msgid ""
"Another thing you might notice is that not all data can be sorted or "
"compared.  For instance, ``[None, 'hello', 10]`` doesn't sort because "
"integers can't be compared to strings and *None* can't be compared to other "
"types.  Also, there are some types that don't have a defined ordering "
"relation.  For example, ``3+4j < 5+7j`` isn't a valid comparison."
msgstr ""

#: ../../tutorial/datastructures.rst:138
msgid "Using Lists as Stacks"
msgstr "Lista használata veremként"

#: ../../tutorial/datastructures.rst:143
msgid ""
"The list methods make it very easy to use a list as a stack, where the last "
"element added is the first element retrieved (\"last-in, first-out\").  To "
"add an item to the top of the stack, use :meth:`~list.append`.  To retrieve "
"an item from the top of the stack, use :meth:`~list.pop` without an explicit "
"index.  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:168
msgid "Using Lists as Queues"
msgstr "A listák használata sorként (queue)"

#: ../../tutorial/datastructures.rst:172
msgid ""
"It is also possible to use a list as a queue, where the first element added "
"is the first element retrieved (\"first-in, first-out\"); however, lists are "
"not efficient for this purpose.  While appends and pops from the end of list "
"are fast, doing inserts or pops from the beginning of a list is slow "
"(because all of the other elements have to be shifted by one)."
msgstr ""
"A listát használhatjuk úgy is mint egy sort, ahol az elsőnek hozzáadott "
"elemet vesszük ki először (\"first-in, first-out\", FIFO), a listák mégsem "
"hatékonyak erre a célra. Míg a lista végéhez fűzés (append) és onnan levétel "
"(pop) az gyors, addig a lista elejére beszúrás (insert) és onnan kiszedés "
"lassú (mert az egész listát eggyel el kell tolni)."

#: ../../tutorial/datastructures.rst:178
msgid ""
"To implement a queue, use :class:`collections.deque` which was designed to "
"have fast appends and pops from both ends.  For example::"
msgstr ""
"Egy sor implementálásához használjuk a :class:`collections.deque` osztályt, "
"amely úgy lett kialakítva, hogy mindkét oldalához gyorsan hozzá lehessen "
"fűzni és elvenni elemet. Például::"

#: ../../tutorial/datastructures.rst:196
msgid "List Comprehensions"
msgstr "Listaértelmezés"

#: ../../tutorial/datastructures.rst:198
msgid ""
"List comprehensions provide a concise way to create lists. Common "
"applications are to make new lists where each element is the result of some "
"operations applied to each member of another sequence or iterable, or to "
"create a subsequence of those elements that satisfy a certain condition."
msgstr ""
"A listaértelmezés egy tömör lehetőség listák létrehozásához. Gyakori "
"alkalmazásuk, hogy új listát készítsünk, amelyben minden elemet úgy hozunk "
"létre, hogy egy másik sorozat vagy iterálható objektum minden egyes tagján "
"valamilyen műveletet végzünk, vagy az elemek egy részhalmazát vesszük, "
"amelyek bizonyos feltételeknek megfelelnek."

#: ../../tutorial/datastructures.rst:203
msgid "For example, assume we want to create a list of squares, like::"
msgstr "Például, ha a négyzetszámok listáját akarjuk létrehozni, mint alább::"

#: ../../tutorial/datastructures.rst:212
msgid ""
"Note that this creates (or overwrites) a variable named ``x`` that still "
"exists after the loop completes.  We can calculate the list of squares "
"without any side effects using::"
msgstr ""
"Vegyük észre, hogy ez létrehozza (vagy felülírja) az ``x`` nevű változót, "
"amely a ciklus lefutása után is létezni fog. A listát ilyen mellékhatás "
"nélkül is létrehozhatjuk az alábbi módon::"

#: ../../tutorial/datastructures.rst:218
msgid "or, equivalently::"
msgstr "vagy ezzel egyenértékű módon::"

#: ../../tutorial/datastructures.rst:222
msgid "which is more concise and readable."
msgstr "amely sokkal tömörebb és olvashatóbb."

#: ../../tutorial/datastructures.rst:224
msgid ""
"A list comprehension consists of brackets containing an expression followed "
"by a :keyword:`!for` clause, then zero or more :keyword:`!for` or :keyword:`!"
"if` clauses.  The result will be a new list resulting from evaluating the "
"expression in the context of the :keyword:`!for` and :keyword:`!if` clauses "
"which follow it. For example, this listcomp combines the elements of two "
"lists if they are not equal::"
msgstr ""

#: ../../tutorial/datastructures.rst:234
msgid "and it's equivalent to::"
msgstr "és ez egyenértékű az alábbival::"

#: ../../tutorial/datastructures.rst:245
msgid ""
"Note how the order of the :keyword:`for` and :keyword:`if` statements is the "
"same in both these snippets."
msgstr ""
"Vedd észre, hogy a :keyword:`for` és :keyword:`if` állítások sorrendje "
"azonos mindkét példában."

#: ../../tutorial/datastructures.rst:248
msgid ""
"If the expression is a tuple (e.g. the ``(x, y)`` in the previous example), "
"it must be parenthesized. ::"
msgstr ""
"Ha a kifejezés egy tuple (pl. az ``(x, y)`` az előző példában), akkor "
"zárójelbe kell rakni. ::"

#: ../../tutorial/datastructures.rst:279
msgid ""
"List comprehensions can contain complex expressions and nested functions::"
msgstr ""
"Egy listaértelmezés összetett kifejezéseket és egymásba ágyazott "
"függvényeket is tartalmazhat::"

#: ../../tutorial/datastructures.rst:286
msgid "Nested List Comprehensions"
msgstr "Egymásba ágyazott listaértelmezések"

#: ../../tutorial/datastructures.rst:288
msgid ""
"The initial expression in a list comprehension can be any arbitrary "
"expression, including another list comprehension."
msgstr ""
"Egy listaértelmezés eredeti kifejezése tetszőleges kifejezés lehet, akár egy "
"másik listaértelmezés is."

#: ../../tutorial/datastructures.rst:291
msgid ""
"Consider the following example of a 3x4 matrix implemented as a list of 3 "
"lists of length 4::"
msgstr ""
"Tekintsük a következő példát, amelyben egy 3x4-es mátrixot egy 4-elemű "
"listákból álló 3-elemű lista tárol::"

#: ../../tutorial/datastructures.rst:300
msgid "The following list comprehension will transpose rows and columns::"
msgstr ""
"A következő listaértelmezés felcseréli a sorokat és az oszlopokat "
"(transzponálja a mátrixot)::"

#: ../../tutorial/datastructures.rst:305
msgid ""
"As we saw in the previous section, the inner list comprehension is evaluated "
"in the context of the :keyword:`for` that follows it, so this example is "
"equivalent to::"
msgstr ""

#: ../../tutorial/datastructures.rst:316
msgid "which, in turn, is the same as::"
msgstr "amely pedig azonos az alábbival::"

#: ../../tutorial/datastructures.rst:329
msgid ""
"In the real world, you should prefer built-in functions to complex flow "
"statements. The :func:`zip` function would do a great job for this use case::"
msgstr ""
"Az való életben persze ehelyett beépített függvényeket érdemes használni "
"összetett folyamatok helyett. A :func:`zip` függvény remek eredményt ad "
"ebben az esetben::"

#: ../../tutorial/datastructures.rst:335
msgid ""
"See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr ""
"Lásd :ref:`tut-unpacking-arguments` fejezetet a fenti sorban szereplő "
"csillaggal kapcsolatban."

#: ../../tutorial/datastructures.rst:340
msgid "The :keyword:`!del` statement"
msgstr ""

#: ../../tutorial/datastructures.rst:342
msgid ""
"There is a way to remove an item from a list given its index instead of its "
"value: the :keyword:`del` statement.  This differs from the :meth:`~list."
"pop` method which returns a value.  The :keyword:`!del` statement can also "
"be used to remove slices from a list or clear the entire list (which we did "
"earlier by assignment of an empty list to the slice).  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:359
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ""
"A :keyword:`del` utasítást arra is használhatjuk,  hogy az egész változót "
"töröljük::"

#: ../../tutorial/datastructures.rst:363
msgid ""
"Referencing the name ``a`` hereafter is an error (at least until another "
"value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""
"A továbbiakban hibát generál, ha az ``a`` névre hivatkozunk  (kivéve, ha új "
"értéket adunk neki).  Később a :keyword:`del` utasításnak más alkalmazásával "
"is találkozunk."

#: ../../tutorial/datastructures.rst:370
msgid "Tuples and Sequences"
msgstr "Tuple-ok és sorozatok"

#: ../../tutorial/datastructures.rst:372
msgid ""
"We saw that lists and strings have many common properties, such as indexing "
"and slicing operations.  They are two examples of *sequence* data types "
"(see :ref:`typesseq`).  Since Python is an evolving language, other sequence "
"data types may be added.  There is also another standard sequence data type: "
"the *tuple*."
msgstr ""
"Láttuk, hogy a listáknak és a karakterláncoknak rengeteg közös tulajdonsága "
"van, például az indexelés és a szeletek használata.  Ez két példa a "
"*sorozat*-adattípusra. Mivel a Python egy folytonos fejlődésben lévő nyelv, "
"másfajta sorozat adattípusok is hozzáadhatóak. Létezik egy másik sorozat-"
"adattípus a *tuple* (ejtsd tjupl). A tuple-t angol formájában fogjuk "
"használni, mivel nincs igazán jó magyar megfelelője. Az irodalomban "
"használják még a rendezett sorozat elnevezést, de az abban szereplő "
"rendezett jelző félrevezető."

#: ../../tutorial/datastructures.rst:378
msgid ""
"A tuple consists of a number of values separated by commas, for instance::"
msgstr "A tuple objektumokat tartalmaz vesszőkkel elválasztva, például::"

#: ../../tutorial/datastructures.rst:400
msgid ""
"As you see, on output tuples are always enclosed in parentheses, so that "
"nested tuples are interpreted correctly; they may be input with or without "
"surrounding parentheses, although often parentheses are necessary anyway (if "
"the tuple is part of a larger expression).  It is not possible to assign to "
"the individual items of a tuple, however it is possible to create tuples "
"which contain mutable objects, such as lists."
msgstr ""
"Ahogy látható, a kimeneten a tuple-ok mindig zárójelezve vannak,  így azok "
"egymásba ágyazva is helyesen értelmezhetők;  megadhatjuk zárójelekkel és "
"anélkül is, néha azonban feltétlenül szükségesek a zárójelek (amikor az egy "
"nagyobb kifejezés része). Nem lehetséges a tuple elemeinek új értéket adni, "
"de létrehozható olyan tuple, amelynek vannak megváltoztatható elemei, "
"például listák."

#: ../../tutorial/datastructures.rst:407
msgid ""
"Though tuples may seem similar to lists, they are often used in different "
"situations and for different purposes. Tuples are :term:`immutable`, and "
"usually contain a heterogeneous sequence of elements that are accessed via "
"unpacking (see later in this section) or indexing (or even by attribute in "
"the case of :func:`namedtuples <collections.namedtuple>`). Lists are :term:"
"`mutable`, and their elements are usually homogeneous and are accessed by "
"iterating over the list."
msgstr ""
"Habár a tuple-ok hasonlóaknak látszanak a listákhoz, gyakran eltérő "
"helyzetekben és különböző célokra használjuk azokat. A tuple-ok :term:"
"`immutable` adattípusok, és gyakran azonos típusú elemek sorozatát tárolja, "
"amelyeket az úgynevezett szétpakolás révén érjük el (lásd később ebben a "
"fejezetben) vagy indexelés révén (vagy akár jellemzőjük révén a :func:"
"`namedtuples <collections.namedtuple>` esetén).  A listák :term:`mutable` "
"adattípusok, és az elemeik gyakran eltérő típusúak, és elmeiket általában "
"úgy érjük el, hogy végigmegyünk az elemeiken."

#: ../../tutorial/datastructures.rst:415
msgid ""
"A special problem is the construction of tuples containing 0 or 1 items: the "
"syntax has some extra quirks to accommodate these.  Empty tuples are "
"constructed by an empty pair of parentheses; a tuple with one item is "
"constructed by following a value with a comma (it is not sufficient to "
"enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""
"Egy különös probléma nulla vagy egy elemet tartalmazó tuple létrehozása: a "
"nyelv szintaxisa lehetővé teszi ezt. Az üres zárojellel hozható létre a "
"nulla elemű; az egy elemű pedig az érték után tett vesszővel  (nem elég, ha "
"az értéket zárójelbe tesszük). Csúnya, de hatékony. Például::"

#: ../../tutorial/datastructures.rst:430
msgid ""
"The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple "
"packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed "
"together in a tuple. The reverse operation is also possible::"
msgstr ""
"A ``t = 12345, 54321, 'hello!'`` értékadás egy példa  a *tuple-ba "
"csomagolásra*: a ``12345``, ``54321`` és ``'hello!'`` értékek egy tuple-ba "
"kerülnek becsomagolásra. A fordított művelet is lehetséges, például::"

#: ../../tutorial/datastructures.rst:436
msgid ""
"This is called, appropriately enough, *sequence unpacking* and works for any "
"sequence on the right-hand side.  Sequence unpacking requires that there are "
"as many variables on the left side of the equals sign as there are elements "
"in the sequence.  Note that multiple assignment is really just a combination "
"of tuple packing and sequence unpacking."
msgstr ""
"Ezt hívják, elég helyesen, *sorozat-szétpakolásnak*, és minden jobboldalon "
"álló sorozattípusra működik. A sorozat szétpakolásához az szükséges,  hogy a "
"bal oldalon annyi elem szerepeljen, ahány elem van a tuple-ban.  Jegyezzük "
"meg, hogy a többszörös értékadás valójában csak a tuple-ba csomagolás és a "
"sorozat-szétpakolás kombinációja!"

#: ../../tutorial/datastructures.rst:446
msgid "Sets"
msgstr "A halmazok (set)"

#: ../../tutorial/datastructures.rst:448
msgid ""
"Python also includes a data type for *sets*.  A set is an unordered "
"collection with no duplicate elements.  Basic uses include membership "
"testing and eliminating duplicate entries.  Set objects also support "
"mathematical operations like union, intersection, difference, and symmetric "
"difference."
msgstr ""
"A Python a halmaz adattípust is tartalmazza. A halmaz elemek rendezetlen "
"halmaza, amelyben minden elem csak egyszer  fordulhat elő. Alapvető "
"használata: megadott elem meglétének ellenőrzése, elemek kettőzésének "
"kiszűrése.  A set objektumok támogatják az olyan matematikai műveleteket, "
"mint az egyesítés, metszet,  különbség, és a szimmetrikus eltérés."

#: ../../tutorial/datastructures.rst:453
msgid ""
"Curly braces or the :func:`set` function can be used to create sets.  Note: "
"to create an empty set you have to use ``set()``, not ``{}``; the latter "
"creates an empty dictionary, a data structure that we discuss in the next "
"section."
msgstr ""
"A halmazok létrehozására a kapcsos zárójel, vagy a :func:`set()` függvény "
"használható. Jegyezzük meg, hogy az üres halmaz létrehozásához csak a  :func:"
"`set()` használható, a `{}` nem, mert az utóbbi üres szótárat hoz létre: egy "
"olyan adattszerkezetet, amelyet a következő fejezetben tárgyalunk."

#: ../../tutorial/datastructures.rst:457
msgid "Here is a brief demonstration::"
msgstr "Íme egy rövid bemutató::"

#: ../../tutorial/datastructures.rst:482
msgid ""
"Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions "
"are also supported::"
msgstr "A listaértelmezéshez hasonlóan létezik halmazértelmezés is::"

#: ../../tutorial/datastructures.rst:493
msgid "Dictionaries"
msgstr "Szótárak"

#: ../../tutorial/datastructures.rst:495
msgid ""
"Another useful data type built into Python is the *dictionary* (see :ref:"
"`typesmapping`). Dictionaries are sometimes found in other languages as "
"\"associative memories\" or \"associative arrays\".  Unlike sequences, which "
"are indexed by a range of numbers, dictionaries are indexed by *keys*, which "
"can be any immutable type; strings and numbers can always be keys.  Tuples "
"can be used as keys if they contain only strings, numbers, or tuples; if a "
"tuple contains any mutable object either directly or indirectly, it cannot "
"be used as a key. You can't use lists as keys, since lists can be modified "
"in place using index assignments, slice assignments, or methods like :meth:"
"`~list.append` and :meth:`~list.extend`."
msgstr ""

#: ../../tutorial/datastructures.rst:506
msgid ""
"It is best to think of a dictionary as a set of *key: value* pairs, with the "
"requirement that the keys are unique (within one dictionary). A pair of "
"braces creates an empty dictionary: ``{}``. Placing a comma-separated list "
"of key:value pairs within the braces adds initial key:value pairs to the "
"dictionary; this is also the way dictionaries are written on output."
msgstr ""

#: ../../tutorial/datastructures.rst:512
msgid ""
"The main operations on a dictionary are storing a value with some key and "
"extracting the value given the key.  It is also possible to delete a key:"
"value pair with ``del``. If you store using a key that is already in use, "
"the old value associated with that key is forgotten.  It is an error to "
"extract a value using a non-existent key."
msgstr ""
"A legfontosabb műveletek egy szótáron: eltárolni egy értéket egy kulccsal "
"együtt, visszakapni egy értéket megadva a kulcsát.   Lehet törölni is egy "
"kulcs:érték párt a ``del``-lel. Ha olyan kulccsal tárolsz egy új értéket, "
"amilyen kulcsot  már használtál, a kulcshoz az új érték fog tartozni, a régi "
"érték elveszik.  Hiba, ha egy nemlétező kulcsra hivatkozol."

#: ../../tutorial/datastructures.rst:518
msgid ""
"Performing ``list(d)`` on a dictionary returns a list of all the keys used "
"in the dictionary, in insertion order (if you want it sorted, just use "
"``sorted(d)`` instead). To check whether a single key is in the dictionary, "
"use the :keyword:`in` keyword."
msgstr ""

#: ../../tutorial/datastructures.rst:523
msgid "Here is a small example using a dictionary::"
msgstr "Íme egy kis példa a szótár használatára::"

#: ../../tutorial/datastructures.rst:544
msgid ""
"The :func:`dict` constructor builds dictionaries directly from sequences of "
"key-value pairs::"
msgstr ""
"A :func:`dict` konstruktor közvetlenül tuple-okban tárolt kulcs-érték párok "
"listájából is létre tudja hozni a szótárat. ::"

#: ../../tutorial/datastructures.rst:550
msgid ""
"In addition, dict comprehensions can be used to create dictionaries from "
"arbitrary key and value expressions::"
msgstr ""
"Ezen felül a szótárértelmezés használható arra, hogy szótárat hozzunk létre "
"tetszőleges kulcs- és értékkifejezésekből::"

#: ../../tutorial/datastructures.rst:556
msgid ""
"When the keys are simple strings, it is sometimes easier to specify pairs "
"using keyword arguments::"
msgstr ""
"Ha a kulcsok egyszerű karakterláncok, néha egyszerűbb a párokat kulcsszavas "
"argumentumokkal létrehozni::"

#: ../../tutorial/datastructures.rst:566
msgid "Looping Techniques"
msgstr "Ciklustechnikák"

#: ../../tutorial/datastructures.rst:568
msgid ""
"When looping through dictionaries, the key and corresponding value can be "
"retrieved at the same time using the :meth:`~dict.items` method. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:578
msgid ""
"When looping through a sequence, the position index and corresponding value "
"can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""
"Ha sorozaton megyünk végig, akkor a helyet jelző index értékét és a hozzá "
"tartozó értéket egyszerre kaphatjuk meg az :func:`enumerate` függvénnyel. ::"

#: ../../tutorial/datastructures.rst:588
msgid ""
"To loop over two or more sequences at the same time, the entries can be "
"paired with the :func:`zip` function. ::"
msgstr ""
"Két vagy több sorozat egyszerre történő feldolgozásához  a sorozatokat a :"
"func:`zip` függvénnyel kell párba állítani."

#: ../../tutorial/datastructures.rst:600
msgid ""
"To loop over a sequence in reverse, first specify the sequence in a forward "
"direction and then call the :func:`reversed` function. ::"
msgstr ""
"Egy sorozaton visszafelé haladáshoz először add meg a sorozatot, majd utána "
"hívd meg a :func:`reversed` függvényt."

#: ../../tutorial/datastructures.rst:612
msgid ""
"To loop over a sequence in sorted order, use the :func:`sorted` function "
"which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""
"Rendezett sorrendben való listázáshoz használd a :func:`sorted` függvényt, "
"amely új, rendezett listát ad vissza, változatlanul hagyva a régi listát."

#: ../../tutorial/datastructures.rst:626
msgid ""
"Using :func:`set` on a sequence eliminates duplicate elements. The use of :"
"func:`sorted` in combination with :func:`set` over a sequence is an "
"idiomatic way to loop over unique elements of the sequence in sorted "
"order. ::"
msgstr ""

#: ../../tutorial/datastructures.rst:639
msgid ""
"It is sometimes tempting to change a list while you are looping over it; "
"however, it is often simpler and safer to create a new list instead. ::"
msgstr ""
"Néha csábító, hogy azt a listát módosítsuk, amelyen éppen végighaladunk a "
"listával, azonban gyakran egyszerűbb és biztonságosabb egy új listát "
"létrehozni ehelyett. ::"

#: ../../tutorial/datastructures.rst:656
msgid "More on Conditions"
msgstr "A feltételekről bővebben"

#: ../../tutorial/datastructures.rst:658
msgid ""
"The conditions used in ``while`` and ``if`` statements can contain any "
"operators, not just comparisons."
msgstr ""
"A  ``while`` és az ``if`` utasításokban eddig használt feltételek egyéb "
"műveleteket is tartalmazhatnak az összehasonlítás mellett."

#: ../../tutorial/datastructures.rst:662
msgid ""
"The comparison operators ``in`` and ``not in`` are membership tests that "
"determine whether a value is in (or not in) a container.  The operators "
"``is`` and ``is not`` compare whether two objects are really the same "
"object.  All comparison operators have the same priority, which is lower "
"than that of all numerical operators."
msgstr ""

#: ../../tutorial/datastructures.rst:668
msgid ""
"Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a`` "
"is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""
"Relációkat láncolhatunk is, például: az  ``a < b == c`` megvizsgálja, hogy "
"az ``a`` kisebb-e mint ``b``, és ezen felül  ``b`` egyenlő-e ``c``-vel."

#: ../../tutorial/datastructures.rst:671
msgid ""
"Comparisons may be combined using the Boolean operators ``and`` and ``or``, "
"and the outcome of a comparison (or of any other Boolean expression) may be "
"negated with ``not``.  These have lower priorities than comparison "
"operators; between them, ``not`` has the highest priority and ``or`` the "
"lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or "
"C``. As always, parentheses can be used to express the desired composition."
msgstr ""
"A relációkat összefűzhetjük ``and`` és ``or`` logikai műveletekkel is, és a "
"reláció erdményét (vagy bármely logikai műveletét) ellentettjére "
"változtathatjuk a ``not`` művelettel. Ezeknek mindnek kisebb precedenciájuk "
"van, mint a relációknak, és közülük a ``not`` rendelkezik a legmagasabbal és "
"az ``or`` a legkisebbel. Tehát az ``A and not B or C`` ugyanazt jelenti, "
"mint az ``(A and (not B)) or C``. Természetesen a zárójeleket használhatjuk "
"a kívánt feltétel eléréséhez."

#: ../../tutorial/datastructures.rst:678
msgid ""
"The Boolean operators ``and`` and ``or`` are so-called *short-circuit* "
"operators: their arguments are evaluated from left to right, and evaluation "
"stops as soon as the outcome is determined.  For example, if ``A`` and ``C`` "
"are true but ``B`` is false, ``A and B and C`` does not evaluate the "
"expression ``C``.  When used as a general value and not as a Boolean, the "
"return value of a short-circuit operator is the last evaluated argument."
msgstr ""
"Az ``and`` és ``or`` logikai műveletek úgynevezett shortcat (lusta/rövid "
"kiértékelésű) műveletek: Az argumentumaik balról jobbra fejtődnek ki, és a "
"kifejtés rögtön megáll, mihelyt a végeredmény egyértelmű. Például: ha ``A`` "
"és ``C`` mindkettő igaz de  ``B`` hamis, akkor a  ``A és B és C`` kifejezés "
"során a C értékét a Python már nem vizsgálja. Általában a shortcut műveletek "
"visszatérési értéke -- ha általános értékeket és nem logikai értéket "
"használunk -- az utolsónak kifejtett argumantummal egyezik."

#: ../../tutorial/datastructures.rst:685
msgid ""
"It is possible to assign the result of a comparison or other Boolean "
"expression to a variable.  For example, ::"
msgstr ""
"Lehetséges, hogy egy reláció vagy más logikai kifejezés értékét egy "
"változóba rakjuk. Például::"

#: ../../tutorial/datastructures.rst:693
msgid ""
"Note that in Python, unlike C, assignment inside expressions must be done "
"explicitly with the :ref:`walrus operator <why-can-t-i-use-an-assignment-in-"
"an-expression>` ``:=``. This avoids a common class of problems encountered "
"in C programs: typing ``=`` in an expression when ``==`` was intended."
msgstr ""

#: ../../tutorial/datastructures.rst:703
msgid "Comparing Sequences and Other Types"
msgstr "Sorozatok és más típusok összehasonlítása"

#: ../../tutorial/datastructures.rst:704
msgid ""
"Sequence objects typically may be compared to other objects with the same "
"sequence type. The comparison uses *lexicographical* ordering: first the "
"first two items are compared, and if they differ this determines the outcome "
"of the comparison; if they are equal, the next two items are compared, and "
"so on, until either sequence is exhausted. If two items to be compared are "
"themselves sequences of the same type, the lexicographical comparison is "
"carried out recursively.  If all items of two sequences compare equal, the "
"sequences are considered equal. If one sequence is an initial sub-sequence "
"of the other, the shorter sequence is the smaller (lesser) one.  "
"Lexicographical ordering for strings uses the Unicode code point number to "
"order individual characters. Some examples of comparisons between sequences "
"of the same type::"
msgstr ""

#: ../../tutorial/datastructures.rst:724
msgid ""
"Note that comparing objects of different types with ``<`` or ``>`` is legal "
"provided that the objects have appropriate comparison methods.  For example, "
"mixed numeric types are compared according to their numeric value, so 0 "
"equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, "
"the interpreter will raise a :exc:`TypeError` exception."
msgstr ""
"Jegyezzük meg, hogy szabályos a különböző típusú objektumok összehasonlítása "
"is  ``<`` és ``>`` relációkkal, feltéve, hogy a megfelelő objektumoknak "
"vannak megfelelő összehasonlító metódusai. Például a vegyes számtípusok "
"összehasonlíthatóak a számértékük alapján, így 0 egyenlő 0.0-val, stb. "
"Máskülönben, egy önkényes rendezés helyett, az értelmező :exc:`TypeError` "
"kivételt dob. "

#: ../../tutorial/datastructures.rst:732
msgid "Footnotes"
msgstr "Lábjegyzet"

#: ../../tutorial/datastructures.rst:733
msgid ""
"Other languages may return the mutated object, which allows method chaining, "
"such as ``d->insert(\"a\")->remove(\"b\")->sort();``."
msgstr ""
"Más nyelvek visszaadhatják a megváltoztatott objektumok, amely lehetővé "
"teszi a metódusok olyan láncolását, mint a következő kódban ``d-"
">insert(\"a\")->remove(\"b\")->sort();``."
