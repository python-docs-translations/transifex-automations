# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Hungarian (https://app.transifex.com/python-doc/teams/5390/"
"hu/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/stdlib2.rst:5
msgid "Brief Tour of the Standard Library --- Part II"
msgstr "Az alap-könyvtár bemutatása 2. rész"

#: ../../tutorial/stdlib2.rst:7
msgid ""
"This second tour covers more advanced modules that support professional "
"programming needs.  These modules rarely occur in small scripts."
msgstr ""
"Ebben a részben néhány olyan modult vizsgálunk meg, amire a professzionális "
"programozás során szükség lesz. Ezen modulok kisebb szkriptekben ritkán "
"fordulnak elő."

#: ../../tutorial/stdlib2.rst:14
msgid "Output Formatting"
msgstr "A kimenet formázása"

#: ../../tutorial/stdlib2.rst:16
msgid ""
"The :mod:`reprlib` module provides a version of :func:`repr` customized for "
"abbreviated displays of large or deeply nested containers::"
msgstr ""
"A :mod:`repr` modulban található :func:`repr` függvény lehetővé teszi a "
"nagyméretű, mélyen egymásba  ágyazott adatszerkezetek rövid, áttekinthető "
"kijelzését::"

#: ../../tutorial/stdlib2.rst:19
msgid ""
">>> import reprlib\n"
">>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n"
"\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\""
msgstr ""

#: ../../tutorial/stdlib2.rst:23
msgid ""
"The :mod:`pprint` module offers more sophisticated control over printing "
"both built-in and user defined objects in a way that is readable by the "
"interpreter. When the result is longer than one line, the \"pretty printer\" "
"adds line breaks and indentation to more clearly reveal data structure::"
msgstr ""
"A :mod:`pprint` modullal finoman szabályozhatod beépített és a felhasználó "
"által definiált objektumok megjelenítését -- úgy, hogy az az értelmező "
"számára továbbra is feldolgozható marad. Amikor az eredmény nem fér el egy "
"sorban, egy \"csinos nyomtató\" sortöréseket és behúzásokat ad a kimenethez, "
"hogy az jól olvasható legyen::"

#: ../../tutorial/stdlib2.rst:28
msgid ""
">>> import pprint\n"
">>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n"
"...     'yellow'], 'blue']]]\n"
"...\n"
">>> pprint.pprint(t, width=30)\n"
"[[[['black', 'cyan'],\n"
"   'white',\n"
"   ['green', 'red']],\n"
"  [['magenta', 'yellow'],\n"
"   'blue']]]"
msgstr ""

#: ../../tutorial/stdlib2.rst:39
msgid ""
"The :mod:`textwrap` module formats paragraphs of text to fit a given screen "
"width::"
msgstr ""
"A :mod:`textwrap` modullal szövegblokkokak jeleníthetünk meg adott "
"szélességű blokkban::"

#: ../../tutorial/stdlib2.rst:42
msgid ""
">>> import textwrap\n"
">>> doc = \"\"\"The wrap() method is just like fill() except that it "
"returns\n"
"... a list of strings instead of one big string with newlines to separate\n"
"... the wrapped lines.\"\"\"\n"
"...\n"
">>> print(textwrap.fill(doc, width=40))\n"
"The wrap() method is just like fill()\n"
"except that it returns a list of strings\n"
"instead of one big string with newlines\n"
"to separate the wrapped lines."
msgstr ""

#: ../../tutorial/stdlib2.rst:53
msgid ""
"The :mod:`locale` module accesses a database of culture specific data "
"formats. The grouping attribute of locale's format function provides a "
"direct way of formatting numbers with group separators::"
msgstr ""
"A :mod:`locale`  modul a különböző kultúrákhoz kötődő egyedi "
"adatformázásokhoz fér hozzá -- a locale format funkciójának  grouping "
"(csoportosítás, a következő példában helyiérték) tulajdonsága közvetlenül "
"biztosítja az adott kultúrának megfelelő szám-kijelzést::"

#: ../../tutorial/stdlib2.rst:57
msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n"
"'English_United States.1252'\n"
">>> conv = locale.localeconv()          # get a mapping of conventions\n"
">>> x = 1234567.8\n"
">>> locale.format_string(\"%d\", x, grouping=True)\n"
"'1,234,567'\n"
">>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n"
"...                      conv['frac_digits'], x), grouping=True)\n"
"'$1,234,567.80'"
msgstr ""

#: ../../tutorial/stdlib2.rst:72
msgid "Templating"
msgstr "Szöveg-sablonok"

#: ../../tutorial/stdlib2.rst:74
msgid ""
"The :mod:`string` module includes a versatile :class:`~string.Template` "
"class with a simplified syntax suitable for editing by end-users.  This "
"allows users to customize their applications without having to alter the "
"application."
msgstr ""
"A :mod:`string` modulban található egy nagyon hasznos osztály, a :class:"
"`Template`. Ez lehetőséget ad a végfelhasználóknak sablon-szövegek  "
"szerkesztésére."

#: ../../tutorial/stdlib2.rst:78
msgid ""
"The format uses placeholder names formed by ``$`` with valid Python "
"identifiers (alphanumeric characters and underscores).  Surrounding the "
"placeholder with braces allows it to be followed by more alphanumeric "
"letters with no intervening spaces.  Writing ``$$`` creates a single escaped "
"``$``::"
msgstr ""
"A szövegbe adatmezőket a ``$`` jellel helyezhetünk el, melyek mellé  kapcsos "
"zárójelbe Python változóneveket kell írni (ez számot, betűt és alsóvonás "
"karaktert tartalmazhat). A kapcsos zárójelpárra akkor van szükség, ha nem "
"önálló szó a beillesztett adat, például lent a 'Peternek' szó lesz ilyen - "
"egyébként a zárójelpár elhagyható. Egyszerű ``$`` jelet így írhatsz: ``$"
"$`` ::"

#: ../../tutorial/stdlib2.rst:83
msgid ""
">>> from string import Template\n"
">>> t = Template('${village}folk send $$10 to $cause.')\n"
">>> t.substitute(village='Nottingham', cause='the ditch fund')\n"
"'Nottinghamfolk send $10 to the ditch fund.'"
msgstr ""

#: ../../tutorial/stdlib2.rst:88
msgid ""
"The :meth:`~string.Template.substitute` method raises a :exc:`KeyError` when "
"a placeholder is not supplied in a dictionary or a keyword argument.  For "
"mail-merge style applications, user supplied data may be incomplete and the :"
"meth:`~string.Template.safe_substitute` method may be more appropriate --- "
"it will leave placeholders unchanged if data is missing::"
msgstr ""
"A :meth:`substitute` medódus :exc:`KeyError` kivételt dob, ha az "
"adatmezőkben megadott változónevet a paraméterként átadott szótárban, vagy  "
"kulcsszavas paraméterekben nem találja.  Elképzelhető olyan helyzet, hogy "
"valamelyik változónév (vagy kulcs, ha szótárról van szó) hiányzik - ilyenkor "
"a :meth:`safe_substitute` metódust érdemes használni,  ami a hiányzó "
"adatoknál az adatmezőt változatlanul hagyja::"

#: ../../tutorial/stdlib2.rst:94
msgid ""
">>> t = Template('Return the $item to $owner.')\n"
">>> d = dict(item='unladen swallow')\n"
">>> t.substitute(d)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"KeyError: 'owner'\n"
">>> t.safe_substitute(d)\n"
"'Return the unladen swallow to $owner.'"
msgstr ""

#: ../../tutorial/stdlib2.rst:103
msgid ""
"Template subclasses can specify a custom delimiter.  For example, a batch "
"renaming utility for a photo browser may elect to use percent signs for "
"placeholders such as the current date, image sequence number, or file "
"format::"
msgstr ""
"A Template alosztály egyedi határolójelet is tud használni. Például  egy "
"tömeges fájl-átnevező funkció esetében (pl. fénykép-karbantartó programnál) "
"az adatmezők jelzésére használhatod a százalék jelet is, az aktuális dátum,  "
"a kép sorszáma, vagy a fájl formátumának jelzése esetén::"

#: ../../tutorial/stdlib2.rst:107
msgid ""
">>> import time, os.path\n"
">>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']\n"
">>> class BatchRename(Template):\n"
"...     delimiter = '%'\n"
"...\n"
">>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')\n"
"Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f\n"
"\n"
">>> t = BatchRename(fmt)\n"
">>> date = time.strftime('%d%b%y')\n"
">>> for i, filename in enumerate(photofiles):\n"
"...     base, ext = os.path.splitext(filename)\n"
"...     newname = t.substitute(d=date, n=i, f=ext)\n"
"...     print('{0} --> {1}'.format(filename, newname))\n"
"\n"
"img_1074.jpg --> Ashley_0.jpg\n"
"img_1076.jpg --> Ashley_1.jpg\n"
"img_1077.jpg --> Ashley_2.jpg"
msgstr ""

#: ../../tutorial/stdlib2.rst:126
msgid ""
"Another application for templating is separating program logic from the "
"details of multiple output formats.  This makes it possible to substitute "
"custom templates for XML files, plain text reports, and HTML web reports."
msgstr ""
"A szövegsablonok másik felhasználási lehetősége a többféle kimeneti "
"formátumot támogató programokban van. Itt a vezérlési logika a kimenettől el "
"van választva -- A kimeneti fájl felépítése más XML fájloknál, "
"szövegfájloknál, vagy html kimenet esetében, viszont az adattartalom "
"értelemszerűen megegyezik."

#: ../../tutorial/stdlib2.rst:134
msgid "Working with Binary Data Record Layouts"
msgstr "Bináris adatblokkok használata"

#: ../../tutorial/stdlib2.rst:136
msgid ""
"The :mod:`struct` module provides :func:`~struct.pack` and :func:`~struct."
"unpack` functions for working with variable length binary record formats.  "
"The following example shows how to loop through header information in a ZIP "
"file without using the :mod:`zipfile` module.  Pack codes ``\"H\"`` and "
"``\"I\"`` represent two and four byte unsigned numbers respectively.  The "
"``\"<\"`` indicates that they are standard size and in little-endian byte "
"order::"
msgstr ""
"A :mod:`struct` modulban található a :func:`pack` és az :func:`unpack` "
"függvények, melyekkel  változó hosszúságú bináris adatblokkokat kezelhetsz.  "
"A következő példa bemutatja a ZIP fájlok fejléc információinak feldolgozását "
"(a ``\"H\"`` és az ``\"L\"`` kódcsomag jelképezi a két és négybájtos  előjel "
"nélküli számokat)::"

#: ../../tutorial/stdlib2.rst:144
msgid ""
"import struct\n"
"\n"
"with open('myfile.zip', 'rb') as f:\n"
"    data = f.read()\n"
"\n"
"start = 0\n"
"for i in range(3):                      # show the first 3 file headers\n"
"    start += 14\n"
"    fields = struct.unpack('<IIIHH', data[start:start+16])\n"
"    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\n"
"\n"
"    start += 16\n"
"    filename = data[start:start+filenamesize]\n"
"    start += filenamesize\n"
"    extra = data[start:start+extra_size]\n"
"    print(filename, hex(crc32), comp_size, uncomp_size)\n"
"\n"
"    start += extra_size + comp_size     # skip to the next header"
msgstr ""

#: ../../tutorial/stdlib2.rst:167
msgid "Multi-threading"
msgstr "Többszálúság"

#: ../../tutorial/stdlib2.rst:169
msgid ""
"Threading is a technique for decoupling tasks which are not sequentially "
"dependent.  Threads can be used to improve the responsiveness of "
"applications that accept user input while other tasks run in the "
"background.  A related use case is running I/O in parallel with computations "
"in another thread."
msgstr ""
"A szálkezeléssel lehet az egymástól sorrendileg nem függő folyamatokat "
"párhuzamossá tenni. A szálakkal egyidőben fogadhatjuk a program "
"felhasználójának utasításait, miközben  a háttérben a program egy feladaton "
"dolgozik - a két folyamat (kommunikáció, és háttérben munka)  egymással "
"párhuzamosan fut."

#: ../../tutorial/stdlib2.rst:174
msgid ""
"The following code shows how the high level :mod:`threading` module can run "
"tasks in background while the main program continues to run::"
msgstr ""
"A következő kód bemutatja a  :mod:`threading` modul magasszintű használatát, "
"ami egy külön háttérfolyamatot indít, miközben a program fut tovább::"

#: ../../tutorial/stdlib2.rst:177
msgid ""
"import threading, zipfile\n"
"\n"
"class AsyncZip(threading.Thread):\n"
"    def __init__(self, infile, outfile):\n"
"        threading.Thread.__init__(self)\n"
"        self.infile = infile\n"
"        self.outfile = outfile\n"
"\n"
"    def run(self):\n"
"        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\n"
"        f.write(self.infile)\n"
"        f.close()\n"
"        print('Finished background zip of:', self.infile)\n"
"\n"
"background = AsyncZip('mydata.txt', 'myarchive.zip')\n"
"background.start()\n"
"print('The main program continues to run in foreground.')\n"
"\n"
"background.join()    # Wait for the background task to finish\n"
"print('Main program waited until background was done.')"
msgstr ""

#: ../../tutorial/stdlib2.rst:198
msgid ""
"The principal challenge of multi-threaded applications is coordinating "
"threads that share data or other resources.  To that end, the threading "
"module provides a number of synchronization primitives including locks, "
"events, condition variables, and semaphores."
msgstr ""
"A többszálú programok egyik legfontosabb feladata azon szálak működésének "
"koordinálása, melyek megosztott adatokon, vagy közös erőforrásokon "
"dolgoznak. (pl. mi történik ha két szál egyidőben akar egy fájlt írni?) A "
"Threading modul több szinkronizációs elemet tartalmaz -- ilyen a zárolás, az "
"eseménykezelés, a feltételes változók és a szemaforok."

#: ../../tutorial/stdlib2.rst:203
msgid ""
"While those tools are powerful, minor design errors can result in problems "
"that are difficult to reproduce.  So, the preferred approach to task "
"coordination is to concentrate all access to a resource in a single thread "
"and then use the :mod:`queue` module to feed that thread with requests from "
"other threads. Applications using :class:`~queue.Queue` objects for inter-"
"thread communication and coordination are easier to design, more readable, "
"and more reliable."
msgstr ""
"Igaz ugyan, hogy ezek hatékony eszközök -- ám előfordulhatnak kisebb "
"tervezési hibák is, melyek nehezen megismételhetők, és nehezen "
"kinyomozhatók. Mivel a szálak egymástól függetlenül futnak, még "
"végrehajtásuk sorrendje sem biztos - emiatt előfordulhat, hogy a program nem "
"ugyanúgy viselkedik, ha egymás után többször lefuttatjuk -- így a "
"hibakeresés is nehezebbé válik. A szálak koordinálására azt javasoljuk, hogy "
"az erőforrások elérését egy szál biztosítsa, és használd a :mod:`Queue` "
"modult a többi szálból érkező kérések kezelésére. Ha egy programban a szálak "
"közötti kommunikációt a :class:`Queue` objektumokkal biztosítod, a program "
"koordinálásának megtervezése egyszerűbb, olvashatóbb és megbízhatóbb lesz."

#: ../../tutorial/stdlib2.rst:214
msgid "Logging"
msgstr "Naplózás"

#: ../../tutorial/stdlib2.rst:216
msgid ""
"The :mod:`logging` module offers a full featured and flexible logging "
"system. At its simplest, log messages are sent to a file or to ``sys."
"stderr``::"
msgstr ""
"A :mod:`logging` modul egy összetett, finoman beállítható naplózó rendszert "
"tartalmaz.  A legegyszerűbb esetben a naplózandó üzenetek fájlba, vagy a "
"``sys.stderr`` (szabványos hibakimenetre) - küldhetők::"

#: ../../tutorial/stdlib2.rst:219
msgid ""
"import logging\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""

#: ../../tutorial/stdlib2.rst:226
msgid "This produces the following output:"
msgstr "A fenti példa kimenete::"

#: ../../tutorial/stdlib2.rst:228
msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""

#: ../../tutorial/stdlib2.rst:234
msgid ""
"By default, informational and debugging messages are suppressed and the "
"output is sent to standard error.  Other output options include routing "
"messages through email, datagrams, sockets, or to an HTTP Server.  New "
"filters can select different routing based on message priority: :const:"
"`~logging.DEBUG`, :const:`~logging.INFO`, :const:`~logging.WARNING`, :const:"
"`~logging.ERROR`, and :const:`~logging.CRITICAL`."
msgstr ""
"Alapértelmezés szerint az információs és debug üzenetek elfojtottak,  és a "
"kimenet a szabványos hiba csatornára kerül. A kimenet célja más is lehet, "
"például email, datagram, socket vagy akár egy HTTP szerver.  Az új szűrők az "
"üzenet prioritásától függően más-más kimenetre terelhetik  a naplózandó "
"üzenetet. A prioritások:  :const:`DEBUG`, :const:`INFO`, :const:`WARNING`, :"
"const:`ERROR`, és :const:`CRITICAL`."

#: ../../tutorial/stdlib2.rst:241
msgid ""
"The logging system can be configured directly from Python or can be loaded "
"from a user editable configuration file for customized logging without "
"altering the application."
msgstr ""
"A naplózó rendszer közvetlenül a Pythonból is beállítható, vagy használhatsz "
"konfigurációs fájlt, s így a programból való kilépés nélkül "
"megváltoztathatod a naplózás beállításait."

#: ../../tutorial/stdlib2.rst:249
msgid "Weak References"
msgstr "Gyenge hivatkozások"

#: ../../tutorial/stdlib2.rst:251
msgid ""
"Python does automatic memory management (reference counting for most objects "
"and :term:`garbage collection` to eliminate cycles).  The memory is freed "
"shortly after the last reference to it has been eliminated."
msgstr ""
"A memóriakezelést a Python automatikusan végzi (hivatkozásszámlálás a "
"legtöbb objektum esetében, és szemétgyűjtés). Az utolsó objektum-hivatkozás "
"megsemmisülése után az elfoglalt memória felszabadul."

#: ../../tutorial/stdlib2.rst:255
msgid ""
"This approach works fine for most applications but occasionally there is a "
"need to track objects only as long as they are being used by something else. "
"Unfortunately, just tracking them creates a reference that makes them "
"permanent. The :mod:`weakref` module provides tools for tracking objects "
"without creating a reference.  When the object is no longer needed, it is "
"automatically removed from a weakref table and a callback is triggered for "
"weakref objects.  Typical applications include caching objects that are "
"expensive to create::"
msgstr ""
"Ez az automatizmus a legtöbb esetben jó és hasznos, de néha szükség van  az "
"objektumok követésére mindaddig, amíg használatban vannak. Érdekes, hogy  "
"éppen ez a követés az, ami a hivatkozásokat állandóvá teszi (nem szűnnek "
"meg). A :mod:`weakref` modulban olyan eszközök vannak, amelyekkel úgy lehet "
"nyomon követni az objektumokat, hogy a nyomkövetéssel nem hozol létre újabb "
"hivatkozást az objektumra. Amikor az objektumot már senki nem használja, "
"automatikusan törlődik a weakref (gyenge referencia) táblából, és a weakref "
"objektum erről értesítést kap. A tipikus programok tároló objektumokat "
"tartalmaznak, melyek létrehozása erőforrásigényes::"

#: ../../tutorial/stdlib2.rst:263
msgid ""
">>> import weakref, gc\n"
">>> class A:\n"
"...     def __init__(self, value):\n"
"...         self.value = value\n"
"...     def __repr__(self):\n"
"...         return str(self.value)\n"
"...\n"
">>> a = A(10)                   # create a reference\n"
">>> d = weakref.WeakValueDictionary()\n"
">>> d['primary'] = a            # does not create a reference\n"
">>> d['primary']                # fetch the object if it is still alive\n"
"10\n"
">>> del a                       # remove the one reference\n"
">>> gc.collect()                # run garbage collection right away\n"
"0\n"
">>> d['primary']                # entry was automatically removed\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    d['primary']                # entry was automatically removed\n"
"  File \"C:/python312/lib/weakref.py\", line 46, in __getitem__\n"
"    o = self.data[key]()\n"
"KeyError: 'primary'"
msgstr ""

#: ../../tutorial/stdlib2.rst:290
msgid "Tools for Working with Lists"
msgstr "Listakezelő eszközök"

#: ../../tutorial/stdlib2.rst:292
msgid ""
"Many data structure needs can be met with the built-in list type. However, "
"sometimes there is a need for alternative implementations with different "
"performance trade-offs."
msgstr ""
"A legtöbb adatstruktúrának szüksége van a beépített lista típusra. Néha "
"előfordul, hogy a listák egy másfajta megvalósítására van szükség,  az "
"eredeti listáktól eltérő viselkedéssel."

#: ../../tutorial/stdlib2.rst:296
msgid ""
"The :mod:`array` module provides an :class:`~array.array` object that is "
"like a list that stores only homogeneous data and stores it more compactly.  "
"The following example shows an array of numbers stored as two byte unsigned "
"binary numbers (typecode ``\"H\"``) rather than the usual 16 bytes per entry "
"for regular lists of Python int objects::"
msgstr ""

#: ../../tutorial/stdlib2.rst:302
msgid ""
">>> from array import array\n"
">>> a = array('H', [4000, 10, 700, 22222])\n"
">>> sum(a)\n"
"26932\n"
">>> a[1:3]\n"
"array('H', [10, 700])"
msgstr ""

#: ../../tutorial/stdlib2.rst:309
msgid ""
"The :mod:`collections` module provides a :class:`~collections.deque` object "
"that is like a list with faster appends and pops from the left side but "
"slower lookups in the middle. These objects are well suited for implementing "
"queues and breadth first tree searches::"
msgstr ""

#: ../../tutorial/stdlib2.rst:314
msgid ""
">>> from collections import deque\n"
">>> d = deque([\"task1\", \"task2\", \"task3\"])\n"
">>> d.append(\"task4\")\n"
">>> print(\"Handling\", d.popleft())\n"
"Handling task1"
msgstr ""

#: ../../tutorial/stdlib2.rst:322
msgid ""
"unsearched = deque([starting_node])\n"
"def breadth_first_search(unsearched):\n"
"    node = unsearched.popleft()\n"
"    for m in gen_moves(node):\n"
"        if is_goal(m):\n"
"            return m\n"
"        unsearched.append(m)"
msgstr ""

#: ../../tutorial/stdlib2.rst:330
msgid ""
"In addition to alternative list implementations, the library also offers "
"other tools such as the :mod:`bisect` module with functions for manipulating "
"sorted lists::"
msgstr ""
"Ráadásul az Alapkönyvtár más eszközöket is tartalmaz, például a :mod:"
"`bisect` modult, ami rendezett listák módosítására szolgál::"

#: ../../tutorial/stdlib2.rst:334
msgid ""
">>> import bisect\n"
">>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\n"
">>> bisect.insort(scores, (300, 'ruby'))\n"
">>> scores\n"
"[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]"
msgstr ""

#: ../../tutorial/stdlib2.rst:340
msgid ""
"The :mod:`heapq` module provides functions for implementing heaps based on "
"regular lists.  The lowest valued entry is always kept at position zero.  "
"This is useful for applications which repeatedly access the smallest element "
"but do not want to run a full list sort::"
msgstr ""
"A :mod:`heapq`  modulban található függvényekkel megvalósíthatók a "
"hagyományos listákon alapuló  adathalmazok kezelése. A legalacsonyabb értékű "
"bejegyzés mindig a nulla pozícióba kerül.  Ez hasznos, ha a programodnak "
"gyakran kell elérnie a lista legkisebb elemét, de nem akarod a listát teljes "
"mértékben rendezni::"

#: ../../tutorial/stdlib2.rst:345
msgid ""
">>> from heapq import heapify, heappop, heappush\n"
">>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n"
">>> heapify(data)                      # rearrange the list into heap order\n"
">>> heappush(data, -5)                 # add a new entry\n"
">>> [heappop(data) for i in range(3)]  # fetch the three smallest entries\n"
"[-5, 0, 1]"
msgstr ""

#: ../../tutorial/stdlib2.rst:356
msgid "Decimal Floating-Point Arithmetic"
msgstr ""

#: ../../tutorial/stdlib2.rst:358
msgid ""
"The :mod:`decimal` module offers a :class:`~decimal.Decimal` datatype for "
"decimal floating-point arithmetic.  Compared to the built-in :class:`float` "
"implementation of binary floating point, the class is especially helpful for"
msgstr ""

#: ../../tutorial/stdlib2.rst:362
msgid ""
"financial applications and other uses which require exact decimal "
"representation,"
msgstr ""
"pénzügyi programoknál, és ott, ahol véges decimális ábrázolást használnak"

#: ../../tutorial/stdlib2.rst:364
msgid "control over precision,"
msgstr "a pontosság ellenőrzésével"

#: ../../tutorial/stdlib2.rst:365
msgid "control over rounding to meet legal or regulatory requirements,"
msgstr "a törvényeknek vagy a szabályoknak megfelelő kerekítés használatával"

#: ../../tutorial/stdlib2.rst:366
msgid "tracking of significant decimal places, or"
msgstr "a fontos számjegyek nyomkövetésével"

#: ../../tutorial/stdlib2.rst:367
msgid ""
"applications where the user expects the results to match calculations done "
"by hand."
msgstr ""
"az olyan programoknál, ahol a  felhasználó kézzel végzett számításokhoz "
"akarja hasonlítani a végeredményt."

#: ../../tutorial/stdlib2.rst:370
msgid ""
"For example, calculating a 5% tax on a 70 cent phone charge gives different "
"results in decimal floating point and binary floating point. The difference "
"becomes significant if the results are rounded to the nearest cent::"
msgstr ""
"Például számítsuk ki az 5%-os adóját egy 70 centes telefonköltségnek, ami "
"különböző eredményt ad decimális és bináris lebegőpontos számítás használata "
"esetén. A különbség fontos lesz, ha a kerekítés a legközelebbi centhez "
"történik::"

#: ../../tutorial/stdlib2.rst:374
msgid ""
">>> from decimal import *\n"
">>> round(Decimal('0.70') * Decimal('1.05'), 2)\n"
"Decimal('0.74')\n"
">>> round(.70 * 1.05, 2)\n"
"0.73"
msgstr ""

#: ../../tutorial/stdlib2.rst:380
msgid ""
"The :class:`~decimal.Decimal` result keeps a trailing zero, automatically "
"inferring four place significance from multiplicands with two place "
"significance.  Decimal reproduces mathematics as done by hand and avoids "
"issues that can arise when binary floating point cannot exactly represent "
"decimal quantities."
msgstr ""
"A :class:`Decimal` osztály eredménye egy lezáró nullát tartalmaz, "
"automatikusan négy számjegyűen kerül ábrázolásra, a 2\\*2 számjegyű "
"(tizedesjegyek) szorzás eredményeképp.  A :class:`Decimal` ugyanolyan "
"matematikát használ, mint amit a papíron végzett számolás,  és elkerüli "
"azokat a kérdéseket, amikor a bináris lebegőpontos számítás nem tud abszolút "
"pontosan ábrázolni decimális mennyiségeket."

#: ../../tutorial/stdlib2.rst:386
msgid ""
"Exact representation enables the :class:`~decimal.Decimal` class to perform "
"modulo calculations and equality tests that are unsuitable for binary "
"floating point::"
msgstr ""
"A :class:`Decimal` osztály teljesen pontosan ábrázolja a maradékos osztást,  "
"és az egyenlőségtesztelést, ami a bináris lebegőpontos ábrázolás esetén "
"helytelen eredményre vezet::"

#: ../../tutorial/stdlib2.rst:390
msgid ""
">>> Decimal('1.00') % Decimal('.10')\n"
"Decimal('0.00')\n"
">>> 1.00 % 0.10\n"
"0.09999999999999995\n"
"\n"
">>> sum([Decimal('0.1')]*10) == Decimal('1.0')\n"
"True\n"
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False"
msgstr ""

#: ../../tutorial/stdlib2.rst:400
msgid ""
"The :mod:`decimal` module provides arithmetic with as much precision as "
"needed::"
msgstr ""
"A :mod:`decimal` modulban a számítások pontosságát szükség szerint "
"beállíthatod::"

#: ../../tutorial/stdlib2.rst:402
msgid ""
">>> getcontext().prec = 36\n"
">>> Decimal(1) / Decimal(7)\n"
"Decimal('0.142857142857142857142857142857142857')"
msgstr ""
