# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Hungarian (https://app.transifex.com/python-doc/teams/5390/"
"hu/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/appetite.rst:5
msgid "Whetting Your Appetite"
msgstr "Étvágygerjesztő"

#: ../../tutorial/appetite.rst:7
msgid ""
"If you do much work on computers, eventually you find that there's some task "
"you'd like to automate.  For example, you may wish to perform a search-and-"
"replace over a large number of text files, or rename and rearrange a bunch "
"of photo files in a complicated way. Perhaps you'd like to write a small "
"custom database, or a specialized GUI application, or a simple game."
msgstr ""

#: ../../tutorial/appetite.rst:13
msgid ""
"If you're a professional software developer, you may have to work with "
"several C/C++/Java libraries but find the usual write/compile/test/re-"
"compile cycle is too slow.  Perhaps you're writing a test suite for such a "
"library and find writing the testing code a tedious task.  Or maybe you've "
"written a program that could use an extension language, and you don't want "
"to design and implement a whole new language for your application."
msgstr ": ../../tutorial/appetite.rst:2"

#: ../../tutorial/appetite.rst:20
msgid "Python is just the language for you."
msgstr ""

#: ../../tutorial/appetite.rst:22
msgid ""
"You could write a Unix shell script or Windows batch files for some of these "
"tasks, but shell scripts are best at moving around files and changing text "
"data, not well-suited for GUI applications or games. You could write a C/C++/"
"Java program, but it can take a lot of development time to get even a first-"
"draft program.  Python is simpler to use, available on Windows, macOS, and "
"Unix operating systems, and will help you get the job done more quickly."
msgstr ""

#: ../../tutorial/appetite.rst:29
msgid ""
"Python is simple to use, but it is a real programming language, offering "
"much more structure and support for large programs than shell scripts or "
"batch files can offer.  On the other hand, Python also offers much more "
"error checking than C, and, being a *very-high-level language*, it has high-"
"level data types built in, such as flexible arrays and dictionaries.  "
"Because of its more general data types Python is applicable to a much larger "
"problem domain than Awk or even Perl, yet many things are at least as easy "
"in Python as in those languages."
msgstr ""
"A Pythont egyszerű kezelni, mégis igazi programnyelv, sokkal több "
"szerkezetet használ és több támogatást nyújt nagyméretű  programok számára, "
"mint a shell. Ezzel egyidőben sokkal több hibaellenőrzési lehetőséget  "
"tartalmaz mint a C, és -- lévén *nagyon magas szintű nyelv* -- magas szintű "
"beépített adattípusai vannak, úgymint rugalmasan méretezhető sorozatok és "
"szótárak, amelyeket C-ben létrehozni napokba tellene. Az általánosabban "
"megfogalmazott adattípusaival a Python jóval nagyobb problématerületen "
"alkalmazható mint az *Awk* vagy akár a *Perl*, ugyanakkor sok dolog legalább "
"ugyanolyan könnyű Pythonban, mint ezekben a nyelvekben."

#: ../../tutorial/appetite.rst:37
msgid ""
"Python allows you to split your program into modules that can be reused in "
"other Python programs.  It comes with a large collection of standard modules "
"that you can use as the basis of your programs --- or as examples to start "
"learning to program in Python.  Some of these modules provide things like "
"file I/O, system calls, sockets, and even interfaces to graphical user "
"interface toolkits like Tk."
msgstr ""
"A Python lehetővé teszi, hogy a programodat modulokra oszd fel, amelyek "
"felhasználhatók más Python programokban is.   A nyelvhez tartozó alap-"
"könyvtár alaposan kidolgozott modulgyűjteményt tartalmaz, melyeket a "
"programod alapjául használhatsz -- vagy példáknak a Python tanulásához. "
"Vannak beépített modulok is mint a fájl I/O, rendszerhívások, socket-ek "
"kezelése és interfészek olyan grafikus felülethez, mint a Tk."

#: ../../tutorial/appetite.rst:44
msgid ""
"Python is an interpreted language, which can save you considerable time "
"during program development because no compilation and linking is necessary.  "
"The interpreter can be used interactively, which makes it easy to experiment "
"with features of the language, to write throw-away programs, or to test "
"functions during bottom-up program development. It is also a handy desk "
"calculator."
msgstr ""
"A Python futási idő alatt értelmezett (interpretált) nyelv,  amely időt "
"takarít meg neked  a programfejlesztés alatt, mivel nincs szükség gépi kódra "
"történő fordításra és a gépi kódok összeszerkesztésére.   Az értelmező "
"interaktívan is használható,  lehet kísérletezni a nyelv tulajdonságaival, "
"vagy  függvényeket tesztelni az alulról felfelé történő programfejlesztés "
"során. Egyben egy ügyes asztali számológép is!"

#: ../../tutorial/appetite.rst:50
msgid ""
"Python enables programs to be written compactly and readably.  Programs "
"written in Python are typically much shorter than equivalent C,  C++, or "
"Java programs, for several reasons:"
msgstr ""
"A Python nagyon tömör és olvasható programok írását teszi lehetővé. A "
"Pythonban írt programok általában sokkal rövidebbek mint a C vagy C++ "
"megfelelőjük, mert:"

#: ../../tutorial/appetite.rst:54
msgid ""
"the high-level data types allow you to express complex operations in a "
"single statement;"
msgstr ""
"a magasszintű adattípusok lehetővé teszik egyetlen utasításban  egy "
"összetett művelet kifejtését;"

#: ../../tutorial/appetite.rst:57
msgid ""
"statement grouping is done by indentation instead of beginning and ending "
"brackets;"
msgstr ""
"az utasítások csoportosítása a sorok elejének egyenlő mértékű jobbra "
"tolásával történik a kezdő és végzárójelek helyett;"

#: ../../tutorial/appetite.rst:60
msgid "no variable or argument declarations are necessary."
msgstr "nem szükséges a változók és argumentumok deklarálása."

#: ../../tutorial/appetite.rst:62
msgid ""
"Python is *extensible*: if you know how to program in C it is easy to add a "
"new built-in function or module to the interpreter, either to perform "
"critical operations at maximum speed, or to link Python programs to "
"libraries that may only be available in binary form (such as a vendor-"
"specific graphics library). Once you are really hooked, you can link the "
"Python interpreter into an application written in C and use it as an "
"extension or command language for that application."
msgstr ""
"A Python *bővíthető*: ha tudsz C-ben programozni, akkor könnyű új beépített "
"függvényt vagy modult hozzáadni az értelmezőhöz, vagy azért, hogy a kritikus "
"eljárások a lehető leggyorsabban fussanak, vagy például olyan könyvtárakra "
"linkelni Pythonból, amelyek csak bináris formában érhetők el (amilyenek a "
"forgalmazóspecifikus grafikai programok).  Hogyha a nyelv valóban mélyen "
"megfogott, akkor a Python értelmezőt hozzákötheted egy C-ben írt "
"alkalmazáshoz, és azt a program kiterjesztéseként vagy parancs-nyelvként "
"használhatod."

#: ../../tutorial/appetite.rst:70
msgid ""
"By the way, the language is named after the BBC show \"Monty Python's Flying "
"Circus\" and has nothing to do with reptiles.  Making references to Monty "
"Python skits in documentation is not only allowed, it is encouraged!"
msgstr ""
"A nyelv a \"Monthy Python-ék Repülő Cirkusza\" nevű BBC-s sóműsor után kapta "
"a nevét és semmi köze nincs a nyálas hüllőhöz... Utalásokat tenni a "
"dokumentációban a Monty Pythonra nemcsak szabad, hanem ajánlott!"

#: ../../tutorial/appetite.rst:74
msgid ""
"Now that you are all excited about Python, you'll want to examine it in some "
"more detail.  Since the best way to learn a language is to use it, the "
"tutorial invites you to play with the Python interpreter as you read."
msgstr ""
"Most, hogy már felkeltette az érdeklődésedet a Python, reméljük szeretnéd "
"megtekinteni valamivel részletesebben.  Mivel a nyelvtanulás legjobb módja "
"annak használata,  meghívunk Téged egy kis gyakorlásra."

#: ../../tutorial/appetite.rst:78
msgid ""
"In the next chapter, the mechanics of using the interpreter are explained.  "
"This is rather mundane information, but essential for trying out the "
"examples shown later."
msgstr ""
"A következő fejezetben az értelmező használatának minkéntjét magyarázzuk. "
"Ezek kissé unalmas dolgok, de szükségesek ahhoz, hogy a későbbiekeben "
"mutatott példákat kipróbálhasd."

#: ../../tutorial/appetite.rst:82
msgid ""
"The rest of the tutorial introduces various features of the Python language "
"and system through examples, beginning with simple expressions, statements "
"and data types, through functions and modules, and finally touching upon "
"advanced concepts like exceptions and user-defined classes."
msgstr ""
"Az oktató többi része példákon keresztül mutatja be a Python nyelv és a "
"rendszer sok-sok tulajdonságát, kezdve az egyszerű kifejezésekkel, "
"utasításokkal és adattípusokkal -- folytatva a függvényekkel és a "
"modulokkal. Végül érinti a legújabb programozási módszereket, mint például a "
"kivételkezelés, és a felhasználó által definiált osztályok."
