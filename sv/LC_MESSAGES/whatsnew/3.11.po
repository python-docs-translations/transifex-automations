# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-07 14:14+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr "Vad är nytt i Python 3.11"

#: ../../whatsnew/3.11.rst:0
msgid "Editor"
msgstr "Redigerare"

#: ../../whatsnew/3.11.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.11.rst:47
msgid ""
"This article explains the new features in Python 3.11, compared to 3.10. "
"Python 3.11 was released on October 24, 2022. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.11 jämfört med "
"3.10. Python 3.11 släpptes den 24 oktober 2022. För fullständig information, "
"se :ref:`changelog <changelog>`."

#: ../../whatsnew/3.11.rst:55
msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

#: ../../whatsnew/3.11.rst:60
msgid ""
"Python 3.11 is between 10-60% faster than Python 3.10. On average, we "
"measured a 1.25x speedup on the standard benchmark suite. See :ref:"
"`whatsnew311-faster-cpython` for details."
msgstr ""
"Python 3.11 är mellan 10-60% fsnabbare än Python 3.10. I genomsnitt uppmätte "
"vi en 1,25x snabbare hastighet på standard benchmark svit. Se :ref:"
"`whatsnew311-faster-cpython` för detaljer."

#: ../../whatsnew/3.11.rst:66
msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

#: ../../whatsnew/3.11.rst:68
msgid ":ref:`whatsnew311-pep654`"
msgstr ":ref:`whatsnew311-pep654`"

#: ../../whatsnew/3.11.rst:70
msgid "New built-in features:"
msgstr "Nya inbyggda funktioner:"

#: ../../whatsnew/3.11.rst:72
msgid ":ref:`whatsnew311-pep678`"
msgstr ":ref:`whatsnew311-pep678`"

#: ../../whatsnew/3.11.rst:74
msgid "New standard library modules:"
msgstr "Nya standardmoduler för bibliotek:"

#: ../../whatsnew/3.11.rst:76
msgid ""
":pep:`680`: :mod:`tomllib` — Support for parsing `TOML <https://toml.io/>`_ "
"in the Standard Library"
msgstr ""
":pep:`680`: :mod:`tomllib` - Stöd för att tolka `TOML <https://toml.io/>`_ i "
"standardbiblioteket"

#: ../../whatsnew/3.11.rst:79
msgid "Interpreter improvements:"
msgstr "Förbättringar av tolkar:"

#: ../../whatsnew/3.11.rst:81
msgid ":ref:`whatsnew311-pep657`"
msgstr ":ref:`whatsnew311-pep657`"

#: ../../whatsnew/3.11.rst:82
msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to :ref:`disable automatically prepending potentially "
"unsafe paths <whatsnew311-pythonsafepath>` to :data:`sys.path`"
msgstr ""
"Ny kommandoradsoption :option:`\\-P` och miljövariabel :envvar:"
"`PYTHONSAFEPATH` för att :ref:`inaktivera automatisk prependling av "
"potentiellt osäkra sökvägar <whatsnew311-pythonsafepath>` till :data:`sys."
"path`"

#: ../../whatsnew/3.11.rst:86
msgid "New typing features:"
msgstr "Nya funktioner för skrivning:"

#: ../../whatsnew/3.11.rst:88
msgid ":ref:`whatsnew311-pep646`"
msgstr ":ref:`whatsnew311-pep646`"

#: ../../whatsnew/3.11.rst:89
msgid ":ref:`whatsnew311-pep655`"
msgstr ":ref:`whatsnew311-pep655`"

#: ../../whatsnew/3.11.rst:90
msgid ":ref:`whatsnew311-pep673`"
msgstr ":ref:`whatsnew311-pep673`"

#: ../../whatsnew/3.11.rst:91
msgid ":ref:`whatsnew311-pep675`"
msgstr ":ref:`whatsnew311-pep675`"

#: ../../whatsnew/3.11.rst:92
msgid ":ref:`whatsnew311-pep681`"
msgstr ":ref:`whatsnew311-pep681`"

#: ../../whatsnew/3.11.rst:94
msgid "Important deprecations, removals and restrictions:"
msgstr "Viktiga avskrivningar, borttagningar och begränsningar:"

#: ../../whatsnew/3.11.rst:96
msgid ""
":pep:`594`: :ref:`Many legacy standard library modules have been deprecated "
"<whatsnew311-pep594>` and will be removed in Python 3.13"
msgstr ""
":pep:`594`: :ref:`Många äldre standardbiblioteksmoduler har utrangerats "
"<whatsnew311-pep594>` och kommer att tas bort i Python 3.13"

#: ../../whatsnew/3.11.rst:99
msgid ""
":pep:`624`: :ref:`Py_UNICODE encoder APIs have been removed <whatsnew311-"
"pep624>`"
msgstr ""
":pep:`624`: :ref:`Py_UNICODE-kodarens API:er har tagits bort <whatsnew311-"
"pep624>`"

#: ../../whatsnew/3.11.rst:101
msgid ""
":pep:`670`: :ref:`Macros converted to static inline functions <whatsnew311-"
"pep670>`"
msgstr ""
":pep:`670`: :ref:`Makron konverterade till statiska inline-funktioner "
"<whatsnew311-pep670>`"

#: ../../whatsnew/3.11.rst:108 ../../whatsnew/3.11.rst:2211
msgid "New Features"
msgstr "Nya funktioner"

#: ../../whatsnew/3.11.rst:113
msgid "PEP 657: Fine-grained error locations in tracebacks"
msgstr "PEP 657: Finkorniga felplaceringar i spårningar"

#: ../../whatsnew/3.11.rst:115
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error, instead of just the line. For example:"
msgstr ""
"Vid utskrift av spårningar kommer tolken nu att peka på det exakta uttryck "
"som orsakade felet, istället för bara raden. Till exempel"

#: ../../whatsnew/3.11.rst:118
msgid ""
"Traceback (most recent call last):\n"
"  File \"distance.py\", line 11, in <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  File \"distance.py\", line 6, in manhattan_distance\n"
"    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: 'NoneType' object has no attribute 'x'"
msgstr ""
"Traceback (senaste anropet senast):\n"
"  Fil \"distance.py\", rad 11, i <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  Fil \"distance.py\", rad 6, i manhattan_distance\n"
"    return abs(punkt_1.x - punkt_2.x) + abs(punkt_1.y - punkt_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: Objektet 'NoneType' har inget attribut 'x'"

#: ../../whatsnew/3.11.rst:129
msgid ""
"Previous versions of the interpreter would point to just the line, making it "
"ambiguous which object was ``None``. These enhanced errors can also be "
"helpful when dealing with deeply nested :class:`dict` objects and multiple "
"function calls:"
msgstr ""
"Tidigare versioner av tolken pekade bara på raden, vilket gjorde det "
"tvetydigt vilket objekt som var ``None``. Dessa förbättrade fel kan också "
"vara till hjälp när man har att göra med djupt nästlade :class:`dict`\\-"
"objekt och flera funktionsanrop:"

#: ../../whatsnew/3.11.rst:133
msgid ""
"Traceback (most recent call last):\n"
"  File \"query.py\", line 37, in <module>\n"
"    magic_arithmetic('foo')\n"
"  File \"query.py\", line 18, in magic_arithmetic\n"
"    return add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  File \"query.py\", line 24, in add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  File \"query.py\", line 32, in query_user\n"
"    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: 'NoneType' object is not subscriptable"
msgstr ""
"Traceback (senaste anropet senast):\n"
"  Fil \"query.py\", rad 37, i <module>\n"
"    magic_aritmetic('foo')\n"
"  Fil \"query.py\", rad 18, i magic_arithmetic\n"
"    returnera add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  Fil \"query.py\", rad 24, i add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  Fil \"query.py\", rad 32, i query_user\n"
"    return 1 + query_count(db, svar['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: Objektet 'NoneType' är inte subskriberbart"

#: ../../whatsnew/3.11.rst:149
msgid "As well as complex arithmetic expressions:"
msgstr "Samt komplexa aritmetiska uttryck:"

#: ../../whatsnew/3.11.rst:151
msgid ""
"Traceback (most recent call last):\n"
"  File \"calculation.py\", line 54, in <module>\n"
"    result = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division by zero"
msgstr ""
"Traceback (senaste anropet senast):\n"
"  Fil \"calculation.py\", rad 54, i <module>\n"
"    resultat = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division med noll"

#: ../../whatsnew/3.11.rst:159
msgid ""
"Additionally, the information used by the enhanced traceback feature is made "
"available via a general API, that can be used to correlate :term:`bytecode` :"
"ref:`instructions <bytecodes>` with source code location. This information "
"can be retrieved using:"
msgstr ""
"Dessutom görs den information som används av den förbättrade "
"spårningsfunktionen tillgänglig via ett allmänt API, som kan användas för "
"att korrelera :term:`bytecode` :ref:`instructions <bytecodes>` med "
"källkodens plats. Denna information kan hämtas med hjälp av:"

#: ../../whatsnew/3.11.rst:164
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr "Metoden :meth:`codeobject.co_positions` i Python."

#: ../../whatsnew/3.11.rst:165
msgid "The :c:func:`PyCode_Addr2Location` function in the C API."
msgstr "Funktionen :c:func:`PyCode_Addr2Location` i C API."

#: ../../whatsnew/3.11.rst:167
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""
"Se :pep:`657` för mer information. (Bidrag från Pablo Galindo, Batuhan "
"Taskaya och Ammar Askar i :issue:`43950`.)"

#: ../../whatsnew/3.11.rst:171
msgid ""
"This feature requires storing column positions in :ref:`codeobjects`, which "
"may result in a small increase in interpreter memory usage and disk usage "
"for compiled Python files. To avoid storing the extra information and "
"deactivate printing the extra traceback information, use the :option:`-X "
"no_debug_ranges <-X>` command line option or the :envvar:"
"`PYTHONNODEBUGRANGES` environment variable."
msgstr ""
"Denna funktion kräver lagring av kolumnpositioner i :ref:`codeobjects`, "
"vilket kan resultera i en liten ökning av minnesanvändningen i tolken och "
"diskanvändningen för kompilerade Python-filer. För att undvika att lagra den "
"extra informationen och avaktivera utskrift av extra spårningsinformation, "
"använd kommandoradsalternativet :option:`\\-X no_debug_ranges <-X>` eller "
"miljövariabeln :envvar:`PYTHONNODEBUGRANGES`."

#: ../../whatsnew/3.11.rst:183
msgid "PEP 654: Exception Groups and ``except*``"
msgstr "PEP 654: Undantagsgrupper och ``except*``"

#: ../../whatsnew/3.11.rst:185
msgid ""
":pep:`654` introduces language features that enable a program to raise and "
"handle multiple unrelated exceptions simultaneously. The builtin types :exc:"
"`ExceptionGroup` and :exc:`BaseExceptionGroup` make it possible to group "
"exceptions and raise them together, and the new :keyword:`except* "
"<except_star>` syntax generalizes :keyword:`except` to match subgroups of "
"exception groups."
msgstr ""
":pep:`654` introducerar språkfunktioner som gör det möjligt för ett program "
"att skapa och hantera flera orelaterade undantag samtidigt. De inbyggda "
"typerna :exc:`ExceptionGroup` och :exc:`BaseExceptionGroup` gör det möjligt "
"att gruppera undantag och aktivera dem tillsammans, och den nya syntaxen :"
"keyword:`except* <except_star>` generaliserar :keyword:`except` så att den "
"passar undergrupper av undantagsgrupper."

#: ../../whatsnew/3.11.rst:192
msgid "See :pep:`654` for more details."
msgstr "Se :pep:`654` för mer information."

#: ../../whatsnew/3.11.rst:194
msgid ""
"(Contributed by Irit Katriel in :issue:`45292`. PEP written by Irit Katriel, "
"Yury Selivanov and Guido van Rossum.)"
msgstr ""
"(Bidrag från Irit Katriel i :issue:`45292`. PEP skriven av Irit Katriel, "
"Yury Selivanov och Guido van Rossum.)"

#: ../../whatsnew/3.11.rst:201
msgid "PEP 678: Exceptions can be enriched with notes"
msgstr "PEP 678: Undantag kan kompletteras med anteckningar"

#: ../../whatsnew/3.11.rst:203
msgid ""
"The :meth:`~BaseException.add_note` method is added to :exc:`BaseException`. "
"It can be used to enrich exceptions with context information that is not "
"available at the time when the exception is raised. The added notes appear "
"in the default traceback."
msgstr ""
"Metoden :meth:`~BaseException.add_note` har lagts till i :exc:"
"`BaseException`. Den kan användas för att berika undantag med "
"kontextinformation som inte är tillgänglig vid den tidpunkt då undantaget "
"uppstår. De tillagda anteckningarna visas i standardspårningen."

#: ../../whatsnew/3.11.rst:208
msgid "See :pep:`678` for more details."
msgstr "Se :pep:`678` för mer information."

#: ../../whatsnew/3.11.rst:210
msgid ""
"(Contributed by Irit Katriel in :issue:`45607`. PEP written by Zac Hatfield-"
"Dodds.)"
msgstr ""
"(Bidrag från Irit Katriel i :issue:`45607`. PEP skriven av Zac Hatfield-"
"Dodds.)"

#: ../../whatsnew/3.11.rst:217
msgid "Windows ``py.exe`` launcher improvements"
msgstr "Förbättringar av startprogrammet ``py.exe`` i Windows"

#: ../../whatsnew/3.11.rst:219
msgid ""
"The copy of the :ref:`launcher` included with Python 3.11 has been "
"significantly updated. It now supports company/tag syntax as defined in :pep:"
"`514` using the :samp:`-V:{<company>}/{<tag>}` argument instead of the "
"limited :samp:`-{<major>}.{<minor>}`. This allows launching distributions "
"other than ``PythonCore``, the one hosted on `python.org <https://www.python."
"org>`_."
msgstr ""
"Den kopia av :ref:`launcher` som ingår i Python 3.11 har uppdaterats "
"avsevärt. Den stöder nu företags-/taggsyntax enligt definitionen i :pep:"
"`514` och använder argumentet :samp:`\\-V:{<company>}/{<tag>}` istället för "
"det begränsade :samp:`\\-{<major>}.{<minor>}`. Detta gör det möjligt att "
"starta andra distributioner än ``PythonCore``, den som finns på `python.org "
"<https://www.python.org>`_."

#: ../../whatsnew/3.11.rst:225
msgid ""
"When using ``-V:`` selectors, either company or tag can be omitted, but all "
"installs will be searched. For example, ``-V:OtherPython/`` will select the "
"\"best\" tag registered for ``OtherPython``, while ``-V:3.11`` or ``-"
"V:/3.11`` will select the \"best\" distribution with tag ``3.11``."
msgstr ""
"När du använder ``\\-V:``\\-väljare kan antingen företag eller tagg "
"utelämnas, men alla installationer kommer att sökas. Till exempel kommer "
"``\\-V:OtherPython/`` att välja den \"bästa\" taggen som är registrerad för "
"``OtherPython``, medan ``\\-V:3.11`` eller ``\\-V:/3.11`` kommer att välja "
"den \"bästa\" distributionen med taggen ``3.11``."

#: ../../whatsnew/3.11.rst:230
msgid ""
"When using the legacy :samp:`-{<major>}`, :samp:`-{<major>}.{<minor>}`, :"
"samp:`-{<major>}-{<bitness>}` or :samp:`-{<major>}.{<minor>}-{<bitness>}` "
"arguments, all existing behaviour should be preserved from past versions, "
"and only releases from ``PythonCore`` will be selected. However, the ``-64`` "
"suffix now implies \"not 32-bit\" (not necessarily x86-64), as there are "
"multiple supported 64-bit platforms. 32-bit runtimes are detected by "
"checking the runtime's tag for a ``-32`` suffix. All releases of Python "
"since 3.5 have included this in their 32-bit builds."
msgstr ""
"När du använder de äldre argumenten :samp:`\\-{<major>}`, :samp:`\\-"
"{<major>}.{<minor>}`, :samp:`\\-{<major>}-{<bitness>}` eller :samp:`\\-"
"{<major>}.{<minor>}-{<bitness>}`, bör allt befintligt beteende bevaras från "
"tidigare versioner, och endast utgåvor från ``PythonCore`` kommer att "
"väljas. Suffixet ``\\-64`` innebär dock nu \"inte 32-bitars\" (inte "
"nödvändigtvis x86-64), eftersom det finns flera 64-bitars plattformar som "
"stöds. 32-bitars körtider upptäcks genom att kontrollera om körtidens tagg "
"innehåller suffixet ``\\-32``. Alla utgåvor av Python sedan 3.5 har "
"inkluderat detta i sina 32-bitarsbyggen."

#: ../../whatsnew/3.11.rst:244
msgid "New Features Related to Type Hints"
msgstr "Nya funktioner relaterade till typtips"

#: ../../whatsnew/3.11.rst:246
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"Detta avsnitt behandlar större ändringar som påverkar :pep:`484` typtips och "
"modulen :mod:`typing`."

#: ../../whatsnew/3.11.rst:253
msgid "PEP 646: Variadic generics"
msgstr "PEP 646: Variadisk generik"

#: ../../whatsnew/3.11.rst:255
msgid ""
":pep:`484` previously introduced :data:`~typing.TypeVar`, enabling creation "
"of generics parameterised with a single type. :pep:`646` adds :data:`~typing."
"TypeVarTuple`, enabling parameterisation with an *arbitrary* number of "
"types. In other words, a :data:`~typing.TypeVarTuple` is a *variadic* type "
"variable, enabling *variadic* generics."
msgstr ""
":pep:`484` introducerade tidigare :data:`~typing.TypeVar`, vilket möjliggör "
"skapandet av generiska parametrar med en enda typ. :pep:`646` lägger till :"
"data:`~typing.TypeVarTuple`, vilket möjliggör parametrisering med ett "
"*arbiträrt* antal typer. Med andra ord är en :data:`~typing.TypeVarTuple` en "
"*variadisk* typvariabel som möjliggör *variadisk* generik."

#: ../../whatsnew/3.11.rst:262
msgid ""
"This enables a wide variety of use cases. In particular, it allows the type "
"of array-like structures in numerical computing libraries such as NumPy and "
"TensorFlow to be parameterised with the array *shape*. Static type checkers "
"will now be able to catch shape-related bugs in code that uses these "
"libraries."
msgstr ""
"Detta möjliggör en mängd olika användningsfall. Framför allt kan typen av "
"array-liknande strukturer i numeriska beräkningsbibliotek som NumPy och "
"TensorFlow parametriseras med arrayen *shape*. Statiska typkontroller kommer "
"nu att kunna fånga upp formrelaterade buggar i kod som använder dessa "
"bibliotek."

#: ../../whatsnew/3.11.rst:268
msgid "See :pep:`646` for more details."
msgstr "Se :pep:`646` för mer information."

#: ../../whatsnew/3.11.rst:270
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew "
"Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""
"(Bidrag av Matthew Rahtz i :issue:`43224`, med bidrag av Serhiy Storchaka "
"och Jelle Zijlstra. PEP skriven av Mark Mendoza, Matthew Rahtz, Pradeep "
"Kumar Srinivasan och Vincent Siles)"

#: ../../whatsnew/3.11.rst:278
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-required"
msgstr ""
"PEP 655: Märkning av enskilda ``TypedDict``\\ -objekt som nödvändiga eller "
"inte nödvändiga"

#: ../../whatsnew/3.11.rst:280
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a :class:`~typing."
"TypedDict` must be present. Previously, this was only possible using "
"inheritance."
msgstr ""
":data:`~typing.Required` och :data:`~typing.NotRequired` ger ett enkelt sätt "
"att markera om enskilda objekt i en :class:`~typing.TypedDict` måste finnas. "
"Tidigare var detta endast möjligt med hjälp av arv."

#: ../../whatsnew/3.11.rst:285
msgid ""
"All fields are still required by default, unless the *total* parameter is "
"set to ``False``, in which case all fields are still not-required by "
"default. For example, the following specifies a :class:`!TypedDict` with one "
"required and one not-required key::"
msgstr ""
"Alla fält är fortfarande obligatoriska som standard, såvida inte parametern "
"*total* är satt till ``False``, i vilket fall alla fält fortfarande är icke "
"obligatoriska som standard. Följande exempel anger en :class:`!TypedDict` "
"med en obligatorisk och en icke obligatorisk nyckel::"

#: ../../whatsnew/3.11.rst:291
msgid ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # OK\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # OK (year is not required)\n"
"m3: Movie = {\"year\": 2022}  # ERROR (missing required field title)"
msgstr ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # OK\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # OK (year is not required)\n"
"m3: Movie = {\"year\": 2022}  # ERROR (missing required field title)"

#: ../../whatsnew/3.11.rst:299
msgid "The following definition is equivalent::"
msgstr "Följande definition är likvärdig::"

#: ../../whatsnew/3.11.rst:301
msgid ""
"class Movie(TypedDict, total=False):\n"
"   title: Required[str]\n"
"   year: int"
msgstr ""
"class Movie(TypedDict, total=False):\n"
"   titel: Krävs[str]\n"
"   year: int"

#: ../../whatsnew/3.11.rst:305
msgid "See :pep:`655` for more details."
msgstr "Se :pep:`655` för mer information."

#: ../../whatsnew/3.11.rst:307
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""
"(Bidrag från David Foster och Jelle Zijlstra i :issue:`47087`. PEP skriven "
"av David Foster.)"

#: ../../whatsnew/3.11.rst:314
msgid "PEP 673: ``Self`` type"
msgstr "PEP 673: Typ av ``Self``"

#: ../../whatsnew/3.11.rst:316
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive way "
"to annotate methods that return an instance of their class. This behaves the "
"same as the :class:`~typing.TypeVar`-based approach :pep:`specified in PEP "
"484 <484#annotating-instance-and-class-methods>`, but is more concise and "
"easier to follow."
msgstr ""
"Den nya :data:`~typing.Self`\\-annoteringen ger ett enkelt och intuitivt "
"sätt att annotera metoder som returnerar en instans av sin klass. Detta "
"beter sig på samma sätt som det :class:`~typing.TypeVar`\\-baserade "
"tillvägagångssättet :pep:` som specificeras i PEP 484 <484#annotating-"
"instance-and-class-methods>`, men är mer koncist och lättare att följa."

#: ../../whatsnew/3.11.rst:322
msgid ""
"Common use cases include alternative constructors provided as :func:"
"`classmethod <classmethod>`\\s, and :meth:`~object.__enter__` methods that "
"return ``self``::"
msgstr ""
"Vanliga användningsfall inkluderar alternativa konstruktörer som "
"tillhandahålls som :func:`classmethod <classmethod>`\\s, och :meth:`~object."
"__enter__` metoder som returnerar ``self``::"

#: ../../whatsnew/3.11.rst:326
msgid ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."
msgstr ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."

#: ../../whatsnew/3.11.rst:340
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ""
":data:`~typing.Self` kan också användas för att annotera metodparametrar "
"eller attribut av samma typ som den omslutande klassen."

#: ../../whatsnew/3.11.rst:343
msgid "See :pep:`673` for more details."
msgstr "Se :pep:`673` för mer information."

#: ../../whatsnew/3.11.rst:345
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by Pradeep "
"Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""
"(Bidrag från James Hilton-Balfe i :issue:`46534`. PEP skriven av Pradeep "
"Kumar Srinivasan och James Hilton-Balfe.)"

#: ../../whatsnew/3.11.rst:352
msgid "PEP 675: Arbitrary literal string type"
msgstr "PEP 675: Godtycklig bokstavlig strängtyp"

#: ../../whatsnew/3.11.rst:354
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows a "
"function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""
"Den nya :data:`~typing.LiteralString`\\-annoteringen kan användas för att "
"ange att en funktionsparameter kan vara av vilken bokstavlig strängtyp som "
"helst. Detta gör att en funktion kan acceptera godtyckliga bokstavliga "
"strängtyper, liksom strängar som skapats från andra bokstavliga strängar. "
"Typkontrollanter kan då se till att känsliga funktioner, t.ex. sådana som "
"exekverar SQL-satser eller shell-kommandon, endast anropas med statiska "
"argument, vilket ger skydd mot injektionsattacker."

#: ../../whatsnew/3.11.rst:362
msgid "For example, a SQL query function could be annotated as follows::"
msgstr "En SQL-frågefunktion kan till exempel annoteras på följande sätt::"

#: ../../whatsnew/3.11.rst:364
msgid ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def caller(\n"
"    arbitrary_string: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LiteralString,\n"
") -> None:\n"
"    run_query(\"SELECT * FROM students\")       # ok\n"
"    run_query(query_string)                   # ok\n"
"    run_query(\"SELECT * FROM \" + table_name)  # ok\n"
"    run_query(arbitrary_string)               # type checker error\n"
"    run_query(                                # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def uppringare(\n"
"    godtycklig_sträng: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LitteralString,\n"
") -> Ingen:\n"
"    run_query(\"SELECT * FROM studenter\") # ok\n"
"    run_query(query_string) # ok\n"
"    run_query(\"SELECT * FROM \" + table_name) # ok\n"
"    run_query(godtycklig_sträng) # typkontrollfel\n"
"    run_query( # typkontrollfel\n"
"        f\"SELECT * FROM studenter WHERE namn = {arbitrary_string}\"\n"
"    )"

#: ../../whatsnew/3.11.rst:380
msgid "See :pep:`675` for more details."
msgstr "Se :pep:`675` för mer information."

#: ../../whatsnew/3.11.rst:382
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""
"(Bidrag från Jelle Zijlstra i :issue:`47088`. PEP skriven av Pradeep Kumar "
"Srinivasan och Graham Bleaney.)"

#: ../../whatsnew/3.11.rst:389
msgid "PEP 681: Data class transforms"
msgstr "PEP 681: Transformation av dataklasser"

#: ../../whatsnew/3.11.rst:391
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclass <dataclasses.dataclass>`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` kan användas för att dekorera en klass, "
"metaklass eller en funktion som i sig är en dekorator. Närvaron av "
"``@dataclass_transform()`` talar om för en statisk typkontrollant att det "
"dekorerade objektet utför \"magi\" under körning som transformerar en klass, "
"vilket ger den :func:`dataclass <dataclasses.dataclass>`\\-liknande "
"beteenden."

#: ../../whatsnew/3.11.rst:397
msgid "For example::"
msgstr "Till exempel::"

#: ../../whatsnew/3.11.rst:399
msgid ""
"# The create_model decorator is defined by a library.\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# The create_model decorator can now be used to create new model classes:\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"
msgstr ""
"# The create_model decorator is defined by a library.\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# The create_model decorator can now be used to create new model classes:\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"

#: ../../whatsnew/3.11.rst:415
msgid "See :pep:`681` for more details."
msgstr "Se :pep:`681` för mer information."

#: ../../whatsnew/3.11.rst:417
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De Bonte "
"and Eric Traut.)"
msgstr ""
"(Bidrag från Jelle Zijlstra i :gh:`91860`. PEP skriven av Erik De Bonte och "
"Eric Traut)"

#: ../../whatsnew/3.11.rst:424
msgid "PEP 563 may not be the future"
msgstr "PEP 563 kanske inte är framtiden"

#: ../../whatsnew/3.11.rst:426
msgid ""
":pep:`563` Postponed Evaluation of Annotations (the ``from __future__ import "
"annotations`` :ref:`future statement <future>`) that was originally planned "
"for release in Python 3.10 has been put on hold indefinitely. See `this "
"message from the Steering Council <https://mail.python.org/archives/list/"
"python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ for more "
"information."
msgstr ""
":pep:`563` Uppskjuten utvärdering av annotationer (``from __future__ import "
"annotations`` :ref:`future statement <future>`) som ursprungligen var "
"planerad att släppas i Python 3.10 har skjutits upp på obestämd tid. Se "
"`detta meddelande från styrgruppen <https://mail.python.org/archives/list/"
"python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ för mer "
"information."

#: ../../whatsnew/3.11.rst:437
msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

#: ../../whatsnew/3.11.rst:439
msgid ""
"Starred unpacking expressions can now be used in :keyword:`for` statements. "
"(See :issue:`46725` for more details.)"
msgstr ""
"Stjärnmärkta uppackningsuttryck kan nu användas i :keyword:`for`\\-satser. "
"(Se :issue:`46725` för mer information)"

#: ../../whatsnew/3.11.rst:442
msgid ""
"Asynchronous :ref:`comprehensions <comprehensions>` are now allowed inside "
"comprehensions in :ref:`asynchronous functions <async def>`. Outer "
"comprehensions implicitly become asynchronous in this case. (Contributed by "
"Serhiy Storchaka in :issue:`33346`.)"
msgstr ""
"Asynkrona :ref:`förståelser <comprehensions>` är nu tillåtna inom "
"förståelser i :ref:`asynkrona funktioner <async def>`. Yttre förståelser "
"blir implicit asynkrona i det här fallet. (Bidrag från Serhiy Storchaka i :"
"issue:`33346`.)"

#: ../../whatsnew/3.11.rst:447
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in :"
"keyword:`with` statements and :meth:`contextlib.ExitStack.enter_context` for "
"objects that do not support the :term:`context manager` protocol, and in :"
"keyword:`async with` statements and :meth:`contextlib.AsyncExitStack."
"enter_async_context` for objects not supporting the :term:`asynchronous "
"context manager` protocol. (Contributed by Serhiy Storchaka in :issue:"
"`12022` and :issue:`44471`.)"
msgstr ""
"Ett :exc:`TypeError` tas nu upp istället för ett :exc:`AttributeError` i :"
"keyword:`with`\\-satser och :meth:`contextlib.ExitStack.enter_context` för "
"objekt som inte stöder protokollet :term:`context manager`, och i :keyword:"
"`async with`\\-satser och :meth:`contextlib.AsyncExitStack."
"enter_async_context` för objekt som inte stöder protokollet :term:"
"`asynchronous context manager`. (Bidrag från Serhiy Storchaka i :issue:"
"`12022` och :issue:`44471`.)"

#: ../../whatsnew/3.11.rst:455
msgid ""
"Added :meth:`object.__getstate__`, which provides the default implementation "
"of the :meth:`!__getstate__` method. :mod:`copy`\\ing and :mod:`pickle`\\ing "
"instances of subclasses of builtin types :class:`bytearray`, :class:`set`, :"
"class:`frozenset`, :class:`collections.OrderedDict`, :class:`collections."
"deque`, :class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies "
"and pickles instance attributes implemented as :term:`slots <__slots__>`. "
"This change has an unintended side effect: It trips up a small minority of "
"existing Python projects not expecting :meth:`object.__getstate__` to exist. "
"See the later comments on :gh:`70766` for discussions of what workarounds "
"such code may need. (Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""
"Lagt till :meth:`object.__getstate__`, som ger standardimplementeringen av "
"metoden :meth:`!__getstate__`. :mod:`copy`\\ing och :mod:`pickle`\\ing av "
"instanser av underklasser av inbyggda typer :class:`bytearray`, :class:"
"`set`, :class:`frozenset`, :class:`collections.OrderedDict`, :class:"
"`collections.deque`, :class:`weakref.WeakSet`, och :class:`datetime.tzinfo` "
"nu kopior och pickles av instansattribut implementerade som :term:`slots "
"<__slots__>`. Denna ändring har en oavsiktlig bieffekt: Den ställer till det "
"för en liten minoritet av befintliga Python-projekt som inte förväntar sig "
"att :meth:`object.__getstate__` ska existera. Se de senare kommentarerna "
"till :gh:`70766` för diskussioner om vilka lösningar sådan kod kan behöva. "
"(Bidrag från Serhiy Storchaka i :issue:`26579`.)"

#: ../../whatsnew/3.11.rst:470
msgid ""
"Added a :option:`-P` command line option and a :envvar:`PYTHONSAFEPATH` "
"environment variable, which disable the automatic prepending to :data:`sys."
"path` of the script's directory when running a script, or the current "
"directory when using :option:`-c` and :option:`-m`. This ensures only stdlib "
"and installed modules are picked up by :keyword:`import`, and avoids "
"unintentionally or maliciously shadowing modules with those in a local (and "
"typically user-writable) directory. (Contributed by Victor Stinner in :gh:"
"`57684`.)"
msgstr ""
"Lade till ett kommandoradsalternativ :option:`\\-P` och en miljövariabel :"
"envvar:`PYTHONSAFEPATH`, som inaktiverar det automatiska tillägget till :"
"data:`sys.path` av skriptets katalog när ett skript körs, eller den aktuella "
"katalogen när :option:`\\-c` och :option:`\\-m` används. Detta säkerställer "
"att endast stdlib och installerade moduler hämtas av :keyword:`import` och "
"undviker oavsiktlig eller illvillig skuggning av moduler med dem i en lokal "
"(och vanligtvis användbar) katalog. (Bidrag från Victor Stinner i :gh:"
"`57684`.)"

#: ../../whatsnew/3.11.rst:481
msgid ""
"A ``\"z\"`` option was added to the :ref:`formatspec` that coerces negative "
"to positive zero after rounding to the format precision. See :pep:`682` for "
"more details. (Contributed by John Belmonte in :gh:`90153`.)"
msgstr ""
"Ett ``\"z\"``\\-alternativ lades till i :ref:`formatspec` som omvandlar "
"negativa till positiva nollor efter avrundning till formatets precision. Se :"
"pep:`682` för mer information. (Bidrag från John Belmonte i :gh:`90153`.)"

#: ../../whatsnew/3.11.rst:486
msgid ""
"Bytes are no longer accepted on :data:`sys.path`.  Support broke sometime "
"between Python 3.2 and 3.6, with no one noticing until after Python 3.10.0 "
"was released. In addition, bringing back support would be problematic due to "
"interactions between :option:`-b` and :data:`sys.path_importer_cache` when "
"there is a mixture of :class:`str` and :class:`bytes` keys. (Contributed by "
"Thomas Grainger in :gh:`91181`.)"
msgstr ""
"Bytes accepteras inte längre på :data:`sys.path`.  Stödet upphörde någon "
"gång mellan Python 3.2 och 3.6, utan att någon märkte det förrän efter att "
"Python 3.10.0 släpptes. Dessutom skulle det vara problematiskt att "
"återinföra stöd på grund av interaktioner mellan :option:`\\-b` och :data:"
"`sys.path_importer_cache` när det finns en blandning av :class:`str` och :"
"class:`bytes` nycklar. (Bidrag från Thomas Grainger i :gh:`91181`.)"

#: ../../whatsnew/3.11.rst:497
msgid "Other CPython Implementation Changes"
msgstr "Andra ändringar i implementeringen av CPython"

#: ../../whatsnew/3.11.rst:499
msgid ""
"The special methods :meth:`~object.__complex__` for :class:`complex` and :"
"meth:`~object.__bytes__` for :class:`bytes` are implemented to support the :"
"class:`typing.SupportsComplex` and :class:`typing.SupportsBytes` protocols. "
"(Contributed by Mark Dickinson and Donghee Na in :issue:`24234`.)"
msgstr ""
"Specialmetoderna :meth:`~object.__complex__` för :class:`complex` och :meth:"
"`~object.__bytes__` för :class:`bytes` är implementerade för att stödja "
"protokollen :class:`typing.SupportsComplex` och :class:`typing."
"SupportsBytes`. (Bidrag från Mark Dickinson och Donghee Na i :issue:`24234`.)"

#: ../../whatsnew/3.11.rst:504
msgid ""
"``siphash13`` is added as a new internal hashing algorithm. It has similar "
"security properties as ``siphash24``, but it is slightly faster for long "
"inputs. :class:`str`, :class:`bytes`, and some other types now use it as the "
"default algorithm for :func:`hash`. :pep:`552` :ref:`hash-based .pyc files "
"<pyc-invalidation>` now use ``siphash13`` too. (Contributed by Inada Naoki "
"in :issue:`29410`.)"
msgstr ""
"``siphash13`` har lagts till som en ny intern hashingalgoritm. Den har "
"liknande säkerhetsegenskaper som ``siphash24``, men den är något snabbare "
"för långa inmatningar. :class:`str`, :class:`bytes`, och några andra typer "
"använder den nu som standardalgoritm för :func:`hash`. :pep:`552` :ref:`hash-"
"baserade .pyc-filer <pyc-invalidation>` använder nu ``siphash13`` också. "
"(Bidrag från Inada Naoki i :issue:`29410`.)"

#: ../../whatsnew/3.11.rst:513
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement with "
"no parameters, the traceback attached to this exception is now always ``sys."
"exc_info()[1].__traceback__``. This means that changes made to the traceback "
"in the current :keyword:`except` clause are reflected in the re-raised "
"exception. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"När ett aktivt undantag återaktiveras med en :keyword:`raise`\\-sats utan "
"parametrar, är nu spårningen som är kopplad till detta undantag alltid ``sys."
"exc_info()[1].__traceback__``. Detta innebär att ändringar som görs i "
"spårningen i den aktuella :keyword:`except`\\-satsen återspeglas i det "
"återaktiverade undantaget. (Bidrag från Irit Katriel i :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:519
msgid ""
"The interpreter state's representation of handled exceptions (aka "
"``exc_info`` or ``_PyErr_StackItem``) now only has the ``exc_value`` field; "
"``exc_type`` and ``exc_traceback`` have been removed, as they can be derived "
"from ``exc_value``. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"Tolkstatens representation av hanterade undantag (aka ``exc_info`` eller "
"``_PyErr_StackItem``) har nu bara fältet ``exc_value``; ``exc_type`` och "
"``exc_traceback`` har tagits bort, eftersom de kan härledas från "
"``exc_value``. (Bidrag från Irit Katriel i :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:525
msgid ""
"A new :ref:`command line option <install-quiet-option>`, ``AppendPath``, has "
"been added for the Windows installer. It behaves similarly to "
"``PrependPath``, but appends the install and scripts directories instead of "
"prepending them. (Contributed by Bastian Neuburger in :issue:`44934`.)"
msgstr ""
"Ett nytt :ref:`kommandoradsalternativ <install-quiet-option>`, "
"``AppendPath``, har lagts till för Windows-installationsprogrammet. Det "
"fungerar på samma sätt som ``PrependPath``, men lägger till install- och "
"skriptkatalogerna istället för att lägga till dem först. (Bidrag från "
"Bastian Neuburger i :issue:`44934`.)"

#: ../../whatsnew/3.11.rst:531
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to "
"``1`` for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"Fältet :c:member:`PyConfig.module_search_paths_set` måste nu vara inställt "
"på ``1`` för att initieringen ska använda :c:member:`PyConfig."
"module_search_paths` för att initiera :data:`sys.path`. Annars kommer "
"initieringen att räkna om sökvägen och ersätta alla värden som lagts till i "
"``module_search_paths``."

#: ../../whatsnew/3.11.rst:536
msgid ""
"The output of the :option:`--help` option now fits in 50 lines/80 columns. "
"Information about :ref:`Python environment variables <using-on-envvars>` "
"and :option:`-X` options is now available using the respective :option:`--"
"help-env` and :option:`--help-xoptions` flags, and with the new :option:`--"
"help-all`. (Contributed by Éric Araujo in :issue:`46142`.)"
msgstr ""
"Utdata från alternativet :option:`\\--help` ryms nu på 50 rader/80 kolumner. "
"Information om :ref:`Python-miljövariabler <using-on-envvars>` och :option:"
"`\\-X`\\-alternativ finns nu tillgänglig med respektive :option:`\\--help-"
"env` och :option:`\\--help-xoptions`\\-flaggor, och med det nya :option:`\\--"
"help-all`. (Bidrag från Éric Araujo i :issue:`46142`.)"

#: ../../whatsnew/3.11.rst:543
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"Konvertering mellan :class:`int` och :class:`str` i andra baser än 2 "
"(binär), 4, 8 (oktal), 16 (hexadecimal) eller 32 såsom bas 10 (decimal) ger "
"nu upphov till ett :exc:`ValueError` om antalet siffror i strängform är över "
"en gräns för att undvika potentiella överbelastningsattacker på grund av den "
"algoritmiska komplexiteten. Detta är en begränsning av :cve:`2020-10735`. "
"Den här gränsen kan konfigureras eller inaktiveras med hjälp av en "
"miljövariabel, kommandoradsflagga eller :mod:`sys` API:er. Se "
"dokumentationen :ref:`Längdsbegränsning för konvertering av heltalssträngar "
"<int_max_str_digits>`.  Standardgränsen är 4300 siffror i strängform."

#: ../../whatsnew/3.11.rst:557
msgid "New Modules"
msgstr "Nya moduler"

#: ../../whatsnew/3.11.rst:559
msgid ""
":mod:`tomllib`: For parsing `TOML <https://toml.io/>`_. See :pep:`680` for "
"more details. (Contributed by Taneli Hukkinen in :issue:`40059`.)"
msgstr ""
":mod:`tomllib`: För parsning av `TOML <https://toml.io/>`_. Se :pep:`680` "
"för mer information. (Bidrag från Taneli Hukkinen i :issue:`40059`.)"

#: ../../whatsnew/3.11.rst:563
msgid ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-specific types for static type "
"checking. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`\\-specifika typer för statisk "
"typkontroll. (Bidrag från Sebastian Rittau i :issue:`42012`.)"

#: ../../whatsnew/3.11.rst:571
msgid "Improved Modules"
msgstr "Förbättrade moduler"

#: ../../whatsnew/3.11.rst:576
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.11.rst:578
msgid ""
"Added the :class:`~asyncio.TaskGroup` class, an :ref:`asynchronous context "
"manager <async-context-managers>` holding a group of tasks that will wait "
"for all of them upon exit. For new code this is recommended over using :func:"
"`~asyncio.create_task` and :func:`~asyncio.gather` directly. (Contributed by "
"Yury Selivanov and others in :gh:`90908`.)"
msgstr ""
"Lade till :class:`~asyncio.TaskGroup`\\-klassen, en :ref:`asynkron "
"kontexthanterare <async-context-managers>` som håller en grupp uppgifter som "
"väntar på dem alla vid avslut. För ny kod rekommenderas detta framför att "
"använda :func:`~asyncio.create_task` och :func:`~asyncio.gather` direkt. "
"(Bidrag från Yury Selivanov och andra i :gh:`90908`.)"

#: ../../whatsnew/3.11.rst:585
msgid ""
"Added :func:`~asyncio.timeout`, an asynchronous context manager for setting "
"a timeout on asynchronous operations. For new code this is recommended over "
"using :func:`~asyncio.wait_for` directly. (Contributed by Andrew Svetlov in :"
"gh:`90927`.)"
msgstr ""
"Lagt till :func:`~asyncio.timeout`, en asynkron kontexthanterare för att "
"ställa in en timeout för asynkrona operationer. För ny kod rekommenderas "
"detta framför att använda :func:`~asyncio.wait_for` direkt. (Bidrag från "
"Andrew Svetlov i :gh:`90927`.)"

#: ../../whatsnew/3.11.rst:590
msgid ""
"Added the :class:`~asyncio.Runner` class, which exposes the machinery used "
"by :func:`~asyncio.run`. (Contributed by Andrew Svetlov in :gh:`91218`.)"
msgstr ""
"Lagt till klassen :class:`~asyncio.Runner`, som exponerar maskineriet som "
"används av :func:`~asyncio.run`. (Bidrag från Andrew Svetlov i :gh:`91218`.)"

#: ../../whatsnew/3.11.rst:594
msgid ""
"Added the :class:`~asyncio.Barrier` class to the synchronization primitives "
"in the asyncio library, and the related :exc:`~asyncio.BrokenBarrierError` "
"exception. (Contributed by Yves Duprat and Andrew Svetlov in :gh:`87518`.)"
msgstr ""
"Lade till klassen :class:`~asyncio.Barrier` till synkroniseringsprimitiven i "
"asynciobiblioteket, och det relaterade undantaget :exc:`~asyncio."
"BrokenBarrierError`. (Bidrag från Yves Duprat och Andrew Svetlov i :gh:"
"`87518`.)"

#: ../../whatsnew/3.11.rst:599
msgid ""
"Added keyword argument *all_errors* to :meth:`asyncio.loop."
"create_connection` so that multiple connection errors can be raised as an :"
"exc:`ExceptionGroup`."
msgstr ""
"Lade till nyckelordsargumentet *all_errors* till :meth:`asyncio.loop."
"create_connection` så att flera anslutningsfel kan tas upp som en :exc:"
"`ExceptionGroup`."

#: ../../whatsnew/3.11.rst:602
msgid ""
"Added the :meth:`asyncio.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in :issue:"
"`34975`.)"
msgstr ""
"Lagt till :meth:`asyncio.StreamWriter.start_tls`\\-metoden för att "
"uppgradera befintliga strömbaserade anslutningar till TLS. (Bidrag från Ian "
"Good i :issue:`34975`.)"

#: ../../whatsnew/3.11.rst:606
msgid ""
"Added raw datagram socket functions to the event loop: :meth:`~asyncio.loop."
"sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` and :meth:`~asyncio.loop."
"sock_recvfrom_into`. These have implementations in :class:`~asyncio."
"SelectorEventLoop` and :class:`~asyncio.ProactorEventLoop`. (Contributed by "
"Alex Grönholm in :issue:`46805`.)"
msgstr ""
"Lagt till raw datagram socket funktioner till eventloopen: :meth:`~asyncio."
"loop.sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` och :meth:`~asyncio."
"loop.sock_recvfrom_into`. Dessa har implementeringar i :class:`~asyncio."
"SelectorEventLoop` och :class:`~asyncio.ProactorEventLoop`. (Bidrag från "
"Alex Grönholm i :issue:`46805`.)"

#: ../../whatsnew/3.11.rst:614
msgid ""
"Added :meth:`~asyncio.Task.cancelling` and :meth:`~asyncio.Task.uncancel` "
"methods to :class:`~asyncio.Task`. These are primarily intended for internal "
"use, notably by :class:`~asyncio.TaskGroup`."
msgstr ""
"Lagt till :meth:`~asyncio.Task.cancelling` och :meth:`~asyncio.Task."
"uncancel` metoder till :class:`~asyncio.Task`. Dessa är främst avsedda för "
"intern användning, särskilt av :class:`~asyncio.TaskGroup`."

#: ../../whatsnew/3.11.rst:623
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.11.rst:625
msgid ""
"Added non parallel-safe :func:`~contextlib.chdir` context manager to change "
"the current working directory and then restore it on exit. Simple wrapper "
"around :func:`~os.chdir`. (Contributed by Filipe Laíns in :issue:`25625`)"
msgstr ""
"Lagt till icke parallell-säker :func:`~contextlib.chdir` kontexthanterare "
"för att ändra den aktuella arbetskatalogen och sedan återställa den vid "
"avslutning. Enkelt omslag runt :func:`~os.chdir`. (Bidrag från Filipe Laíns "
"i :issue:`25625`)"

#: ../../whatsnew/3.11.rst:633
msgid "dataclasses"
msgstr "dataklasser"

#: ../../whatsnew/3.11.rst:635
msgid ""
"Change field default mutability check, allowing only defaults which are :"
"term:`hashable` instead of any object which is not an instance of :class:"
"`dict`, :class:`list` or :class:`set`. (Contributed by Eric V. Smith in :"
"issue:`44674`.)"
msgstr ""
"Ändra kontrollen av fältets föränderlighet så att endast standardvärden som "
"är :term:`hashable` tillåts istället för alla objekt som inte är en instans "
"av :class:`dict`, :class:`list` eller :class:`set`. (Bidrag från Eric V. "
"Smith i :issue:`44674`.)"

#: ../../whatsnew/3.11.rst:644
msgid "datetime"
msgstr "datatid"

#: ../../whatsnew/3.11.rst:646
msgid ""
"Add :const:`datetime.UTC`, a convenience alias for :attr:`datetime.timezone."
"utc`. (Contributed by Kabir Kwatra in :gh:`91973`.)"
msgstr ""
"Lägg till :const:`datetime.UTC`, ett bekvämt alias för :attr:`datetime."
"timezone.utc`. (Bidrag från Kabir Kwatra i :gh:`91973`.)"

#: ../../whatsnew/3.11.rst:649
msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"and :meth:`datetime.datetime.fromisoformat` can now be used to parse most "
"ISO 8601 formats (barring only those that support fractional hours and "
"minutes). (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` "
"och :meth:`datetime.datetime.fromisoformat` kan nu användas för att tolka de "
"flesta ISO 8601-format (utom de som stöder bråkdelar av timmar och minuter). "
"(Bidrag från Paul Ganssle i :gh:`80010`.)"

#: ../../whatsnew/3.11.rst:658
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.11.rst:660
msgid ""
"Renamed :class:`!EnumMeta` to :class:`~enum.EnumType` (:class:`!EnumMeta` "
"kept as an alias)."
msgstr ""
"Bytte namn på :class:`!EnumMeta` till :class:`~enum.EnumType` (:class:`!"
"EnumMeta` behölls som ett alias)."

#: ../../whatsnew/3.11.rst:663
msgid ""
"Added :class:`~enum.StrEnum`, with members that can be used as (and must be) "
"strings."
msgstr ""
"Lagt till :class:`~enum.StrEnum`, med medlemmar som kan användas som (och "
"måste vara) strängar."

#: ../../whatsnew/3.11.rst:666
msgid ""
"Added :class:`~enum.ReprEnum`, which only modifies the :meth:`~object."
"__repr__` of members while returning their literal values (rather than "
"names) for :meth:`~object.__str__` and :meth:`~object.__format__` (used by :"
"func:`str`, :func:`format` and :term:`f-string`\\s)."
msgstr ""
"Lade till :class:`~enum.ReprEnum`, som endast modifierar :meth:`~object."
"__repr__` av medlemmar medan den returnerar deras bokstavliga värden "
"(snarare än namn) för :meth:`~object.__str__` och :meth:`~object.__format__` "
"(används av :func:`str`, :func:`format` och :term:`f-string`\\s)."

#: ../../whatsnew/3.11.rst:672
msgid ""
"Changed :meth:`Enum.__format__() <enum.Enum.__format__>` (the default for :"
"func:`format`, :meth:`str.format` and :term:`f-string`\\s) to always produce "
"the same result as :meth:`Enum.__str__() <enum.Enum.__str__>`:  for enums "
"inheriting from :class:`~enum.ReprEnum` it will be the member's value; for "
"all other enums it will be the enum and member name (e.g. ``Color.RED``)."
msgstr ""
"Ändrat :meth:`Enum.__format__() <enum.Enum.__format__>` (standard för :func:"
"`format`, :meth:`str.format` och :term:`f-string`\\s) så att det alltid ger "
"samma resultat som :meth:`Enum.__str__() <enum.Enum.__str__>`: för enumer "
"som ärver från :class:`~enum.ReprEnum` kommer det att vara medlemmens värde; "
"för alla andra enumer kommer det att vara enum- och medlemsnamnet (t.ex. "
"``Color.RED``)."

#: ../../whatsnew/3.11.rst:678
msgid ""
"Added a new *boundary* class parameter to :class:`~enum.Flag` enums and the :"
"class:`~enum.FlagBoundary` enum with its options, to control how to handle "
"out-of-range flag values."
msgstr ""
"En ny klass-parameter *boundary* har lagts till i enum :class:`~enum.Flag` "
"och enum :class:`~enum.FlagBoundary` med dess alternativ, för att styra hur "
"flaggvärden utanför intervallet ska hanteras."

#: ../../whatsnew/3.11.rst:682
msgid ""
"Added the :func:`~enum.verify` enum decorator and the :class:`~enum."
"EnumCheck` enum with its options, to check enum classes against several "
"specific constraints."
msgstr ""
"Lade till :func:`~enum.verify` enum-dekoratorn och :class:`~enum.EnumCheck` "
"enum med dess alternativ, för att kontrollera enumklasser mot flera "
"specifika begränsningar."

#: ../../whatsnew/3.11.rst:686
msgid ""
"Added the :func:`~enum.member` and :func:`~enum.nonmember` decorators, to "
"ensure the decorated object is/is not converted to an enum member."
msgstr ""
"Lade till dekoratorerna :func:`~enum.member` och :func:`~enum.nonmember` för "
"att säkerställa att det dekorerade objektet konverteras/inte konverteras "
"till en enum-medlem."

#: ../../whatsnew/3.11.rst:689
msgid ""
"Added the :func:`~enum.property` decorator, which works like :func:"
"`property` except for enums. Use this instead of :func:`types."
"DynamicClassAttribute`."
msgstr ""
"Lade till :func:`~enum.property` dekoratorn, som fungerar som :func:"
"`property` förutom för enum. Använd denna istället för :func:`types."
"DynamicClassAttribute`."

#: ../../whatsnew/3.11.rst:693
msgid ""
"Added the :func:`~enum.global_enum` enum decorator, which adjusts :meth:"
"`~object.__repr__` and :meth:`~object.__str__` to show values as members of "
"their module rather than the enum class. For example, ``'re.ASCII'`` for "
"the :const:`~re.ASCII` member of :class:`re.RegexFlag` rather than "
"``'RegexFlag.ASCII'``."
msgstr ""
"Lade till enumdekoratorn :func:`~enum.global_enum`, som justerar :meth:"
"`~object.__repr__` och :meth:`~object.__str__` så att värden visas som "
"medlemmar i deras modul i stället för i enumklassen. Till exempel ``'re."
"ASCII'`` för :const:`~re.ASCII`\\-medlemmen i :class:`re.RegexFlag` i "
"stället för ``'RegexFlag.ASCII'``."

#: ../../whatsnew/3.11.rst:699
msgid ""
"Enhanced :class:`~enum.Flag` to support :func:`len`, iteration and :keyword:"
"`in`/:keyword:`not in` on its members. For example, the following now works: "
"``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"
msgstr ""
"Förbättrade :class:`~enum.Flag` för att stödja :func:`len`, iteration och :"
"keyword:`in`/:keyword:`not in` på dess medlemmar. Till exempel fungerar "
"följande nu: ``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag."
"TWO)``"

#: ../../whatsnew/3.11.rst:704
msgid ""
"Changed :class:`~enum.Enum` and :class:`~enum.Flag` so that members are now "
"defined before :meth:`~object.__init_subclass__` is called; :func:`dir` now "
"includes methods, etc., from mixed-in data types."
msgstr ""
"Ändrade :class:`~enum.Enum` och :class:`~enum.Flag` så att medlemmar nu "
"definieras innan :meth:`~object.__init_subclass__` anropas; :func:`dir` "
"inkluderar nu metoder etc. från mixade datatyper."

#: ../../whatsnew/3.11.rst:709
msgid ""
"Changed :class:`~enum.Flag` to only consider primary values (power of two) "
"canonical while composite values (``3``, ``6``, ``10``, etc.) are considered "
"aliases; inverted flags are coerced to their positive equivalent."
msgstr ""
"Ändrad :class:`~enum.Flag` för att endast betrakta primära värden (potens av "
"två) som kanoniska medan sammansatta värden (``3``, ``6``, ``10``, etc.) "
"betraktas som alias; inverterade flaggor tvingas till sin positiva "
"motsvarighet."

#: ../../whatsnew/3.11.rst:718
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.11.rst:720
msgid ""
"On FreeBSD, the :data:`!F_DUP2FD` and :data:`!F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the "
"latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""
"På FreeBSD stöds flaggorna :data:`!F_DUP2FD` respektive :data:`!"
"F_DUP2FD_CLOEXEC`, den förra motsvarar ``dup2``\\-användning medan den "
"senare dessutom sätter flaggan ``FD_CLOEXEC``."

#: ../../whatsnew/3.11.rst:728
msgid "fractions"
msgstr "fraktioner"

#: ../../whatsnew/3.11.rst:730
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` from "
"string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""
"Stödjer :PEP:`515`\\-stil initialisering av :class:`~fractions.Fraction` "
"från sträng.  (Bidrag från Sergey B Kirpichev i :issue:`44258`.)"

#: ../../whatsnew/3.11.rst:733
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so that "
"an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""
":class:`~fractions.Fraction` implementerar nu en ``__int__`` metod, så att "
"en ``isinstance(some_fraction, typing.SupportsInt)`` kontroll godkänns. "
"(Bidrag från Mark Dickinson i :issue:`44547`.)"

#: ../../whatsnew/3.11.rst:741
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.11.rst:743
msgid ""
":func:`functools.singledispatch` now supports :class:`types.UnionType` and :"
"class:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""
":func:`functools.singledispatch` stöder nu :class:`types.UnionType` och :"
"class:`typing.Union` som annotationer till dispatch-argumentet.::"

#: ../../whatsnew/3.11.rst:746
msgid ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."
msgstr ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."

#: ../../whatsnew/3.11.rst:768
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr "(Bidrag från Yurii Karabas i :issue:`46014`.)"

#: ../../whatsnew/3.11.rst:774
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.11.rst:776
msgid ""
"The :func:`gzip.compress` function is now faster when used with the "
"**mtime=0** argument as it delegates the compression entirely to a single :"
"func:`zlib.compress` operation. There is one side effect of this change: The "
"gzip file header contains an \"OS\" byte in its header. That was "
"traditionally always set to a value of 255 representing \"unknown\" by the :"
"mod:`gzip` module. Now, when using :func:`~gzip.compress` with **mtime=0**, "
"it may be set to a different value by the underlying zlib C library Python "
"was linked against. (See :gh:`112346` for details on the side effect.)"
msgstr ""
"Funktionen :func:`gzip.compress` är nu snabbare när den används med "
"argumentet **mtime=0** eftersom den delegerar komprimeringen helt till en "
"enda :func:`zlib.compress`\\-operation. Det finns en bieffekt av denna "
"förändring: Filhuvudet för gzip innehåller en \"OS\"-byte i sitt huvud. Den "
"sattes traditionellt alltid till ett värde av 255 som representerar "
"\"unknown\" av modulen :mod:`gzip`. Nu, när du använder :func:`~gzip."
"compress` med **mtime=0**, kan det sättas till ett annat värde av det "
"underliggande zlib C-biblioteket som Python länkades mot. (Se :gh:`112346` "
"för detaljer om bieffekten)"

#: ../../whatsnew/3.11.rst:789
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.11.rst:791
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ over "
"Python's vendored copy. (Contributed by Christian Heimes in :issue:`47095`.)"
msgstr ""
":func:`hashlib.blake2b` och :func:`hashlib.blake2s` föredrar nu `libb2`_ "
"framför Pythons vendored copy. (Bidrag från Christian Heimes i :issue:"
"`47095`.)"

#: ../../whatsnew/3.11.rst:795
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and binary "
"size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations without "
"OpenSSL support. (Contributed by Christian Heimes in :issue:`47098`.)"
msgstr ""
"Den interna modulen ``_sha3`` med SHA3- och SHAKE-algoritmer använder nu "
"*tiny_sha3* i stället för *Keccak Code Package* för att minska storleken på "
"kod och binärfiler. Modulen :mod:`hashlib` föredrar optimerade SHA3- och "
"SHAKE-implementeringar från OpenSSL. Ändringen påverkar endast "
"installationer utan OpenSSL-stöd. (Bidrag från Christian Heimes i :issue:"
"`47098`.)"

#: ../../whatsnew/3.11.rst:802
msgid ""
"Add :func:`hashlib.file_digest`, a helper function for efficient hashing of "
"files or file-like objects. (Contributed by Christian Heimes in :gh:`89313`.)"
msgstr ""
"Lägg till :func:`hashlib.file_digest`, en hjälpfunktion för effektiv hashing "
"av filer eller filliknande objekt. (Bidrag från Christian Heimes i :gh:"
"`89313`.)"

#: ../../whatsnew/3.11.rst:810
msgid "IDLE and idlelib"
msgstr "IDLE och idlelib"

#: ../../whatsnew/3.11.rst:812
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Tillämpa syntaxmarkering på ``.pyi``\\-filer. (Bidrag från Alex Waygood och "
"Terry Jan Reedy i :issue:`45447`.)"

#: ../../whatsnew/3.11.rst:815
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"Inkludera uppmaningar när du sparar Shell med in- och utgångar. (Bidrag från "
"Terry Jan Reedy i :gh:`95191`.)"

#: ../../whatsnew/3.11.rst:822
msgid "inspect"
msgstr "inspektera"

#: ../../whatsnew/3.11.rst:824
msgid ""
"Add :func:`~inspect.getmembers_static` to return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""
"Lägg till :func:`~inspect.getmembers_static` för att returnera alla "
"medlemmar utan att utlösa dynamisk uppslagning via descriptor-protokollet. "
"(Bidrag från Weipeng Hong i :issue:`30533`.)"

#: ../../whatsnew/3.11.rst:828
msgid ""
"Add :func:`~inspect.ismethodwrapper` for checking if the type of an object "
"is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in :"
"issue:`29418`.)"
msgstr ""
"Lägg till :func:`~inspect.ismethodwrapper` för att kontrollera om typen av "
"ett objekt är en :class:`~types.MethodWrapperType`. (Bidrag från Hakan Çelik "
"i :issue:`29418`.)"

#: ../../whatsnew/3.11.rst:832
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return "
"new :class:`~inspect.FrameInfo` and :class:`~inspect.Traceback` class "
"instances (backwards compatible with the previous :term:`named tuple`-like "
"interfaces) that includes the extended :pep:`657` position information (end "
"line number, column and end column). The affected functions are:"
msgstr ""
"Ändra de ramrelaterade funktionerna i modulen :mod:`inspect` så att de "
"returnerar nya :class:`~inspect.FrameInfo`\\- och :class:`~inspect."
"Traceback`\\-klassinstanser (bakåtkompatibla med de tidigare :term:`named "
"tuple`\\-liknande gränssnitten) som innehåller den utökade :pep:`657`\\-"
"positionsinformationen (slutradnummer, kolumn och slutkolumn). De funktioner "
"som påverkas är:"

#: ../../whatsnew/3.11.rst:838
msgid ":func:`inspect.getframeinfo`"
msgstr ":func:`inspect.getframeinfo`"

#: ../../whatsnew/3.11.rst:839
msgid ":func:`inspect.getouterframes`"
msgstr ":func:`inspect.getouterframes`"

#: ../../whatsnew/3.11.rst:840
msgid ":func:`inspect.getinnerframes`,"
msgstr ":func:`inspect.getinnerframes`,"

#: ../../whatsnew/3.11.rst:841
msgid ":func:`inspect.stack`"
msgstr ":func:`inspect.stack`"

#: ../../whatsnew/3.11.rst:842
msgid ":func:`inspect.trace`"
msgstr ":func:`inspect.trace`"

#: ../../whatsnew/3.11.rst:844
msgid "(Contributed by Pablo Galindo in :gh:`88116`.)"
msgstr "(Bidrag från Pablo Galindo i :gh:`88116`.)"

#: ../../whatsnew/3.11.rst:850
msgid "locale"
msgstr "lokal"

#: ../../whatsnew/3.11.rst:852
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"Lägg till :func:`locale.getencoding` för att hämta den aktuella locale-"
"kodningen. Det liknar ``locale.getpreferredencoding(False)`` men ignorerar :"
"ref:`Python UTF-8 Mode <utf8-mode>`."

#: ../../whatsnew/3.11.rst:860
msgid "logging"
msgstr "loggning"

#: ../../whatsnew/3.11.rst:862
msgid ""
"Added :func:`~logging.getLevelNamesMapping` to return a mapping from logging "
"level names (e.g. ``'CRITICAL'``) to the values of their corresponding :ref:"
"`levels` (e.g. ``50``, by default). (Contributed by Andrei Kulakovin in :gh:"
"`88024`.)"
msgstr ""
"Lade till :func:`~logging.getLevelNamesMapping` för att returnera en "
"mappning från namn på loggningsnivåer (t.ex. ``'CRITICAL'``) till värdena "
"för motsvarande :ref:`levels` (t.ex. ``50``, som standard). (Bidrag från "
"Andrei Kulakovin i :gh:`88024`.)"

#: ../../whatsnew/3.11.rst:867
msgid ""
"Added a :meth:`~logging.handlers.SysLogHandler.createSocket` method to :"
"class:`~logging.handlers.SysLogHandler`, to match :meth:`SocketHandler."
"createSocket() <logging.handlers.SocketHandler.createSocket>`. It is called "
"automatically during handler initialization and when emitting an event, if "
"there is no active socket. (Contributed by Kirill Pinchuk in :gh:`88457`.)"
msgstr ""
"Lagt till en :meth:`~logging.handlers.SysLogHandler.createSocket`\\-metod "
"till :class:`~logging.handlers.SysLogHandler` för att matcha :meth:"
"`SocketHandler.createSocket() <logging.handlers.SocketHandler."
"createSocket>`. Den anropas automatiskt under initialiseringen av handlaren "
"och när en händelse skickas ut, om det inte finns någon aktiv socket. "
"(Bidrag från Kirill Pinchuk i :gh:`88457`.)"

#: ../../whatsnew/3.11.rst:879
msgid "math"
msgstr "matematik"

#: ../../whatsnew/3.11.rst:881
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by "
"Gideon Mitchell in :issue:`45917`.)"
msgstr ""
"Lägg till :func:`math.exp2`: returnera 2 upphöjt till x. (Bidrag från Gideon "
"Mitchell i :issue:`45917`.)"

#: ../../whatsnew/3.11.rst:884
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""
"Lägg till :func:`math.cbrt`: returnera kubikroten av x. (Bidrag från Ajith "
"Ramachandran i :issue:`44357`.)"

#: ../../whatsnew/3.11.rst:887
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations ``math.pow(0.0, -"
"math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return ``inf``. Previously "
"they raised :exc:`ValueError`. (Contributed by Mark Dickinson in :issue:"
"`44339`.)"
msgstr ""
"Beteendet för två :func:`math.pow`\\-hörnfall har ändrats för att "
"överensstämma med IEEE 754-specifikationen. Operationerna ``math.pow(0.0, -"
"math.inf)`` och ``math.pow(-0.0, -math.inf)`` returnerar nu ``inf``. "
"Tidigare gav de :exc:`ValueError`. (Bidrag från Mark Dickinson i :issue:"
"`44339`.)"

#: ../../whatsnew/3.11.rst:893
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by Victor "
"Stinner in :issue:`46917`.)"
msgstr ""
"Värdet :data:`math.nan` är nu alltid tillgängligt. (Bidrag från Victor "
"Stinner i :issue:`46917`.)"

#: ../../whatsnew/3.11.rst:900
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.11.rst:902
msgid ""
"A new function ``operator.call`` has been added, such that ``operator."
"call(obj, *args, **kwargs) == obj(*args, **kwargs)``. (Contributed by Antony "
"Lee in :issue:`44019`.)"
msgstr ""
"En ny funktion ``operator.call`` har lagts till, så att ``operator.call(obj, "
"*args, **kwargs) == obj(*args, **kwargs)``. (Bidrag från Antony Lee i :issue:"
"`44019`.)"

#: ../../whatsnew/3.11.rst:910
msgid "os"
msgstr "os"

#: ../../whatsnew/3.11.rst:912
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of "
"``CryptGenRandom()`` which is deprecated. (Contributed by Donghee Na in :"
"issue:`44611`.)"
msgstr ""
"På Windows använder :func:`os.urandom` nu ``BCryptGenRandom()``, istället "
"för ``CryptGenRandom()`` som är föråldrad. (Bidrag från Donghee Na i :issue:"
"`44611`.)"

#: ../../whatsnew/3.11.rst:920
msgid "pathlib"
msgstr "sökväg"

#: ../../whatsnew/3.11.rst:922
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: :data:"
"`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in :issue:"
"`22276` and :issue:`33392`.)"
msgstr ""
":meth:`~pathlib.Path.glob` och :meth:`~pathlib.Path.rglob` returnerar endast "
"kataloger om *mönster* slutar med en komponentavgränsare för sökvägsnamn: :"
"data:`~os.sep` eller :data:`~os.altsep`. (Bidrag från Eisuke Kawasima i :"
"issue:`22276` och :issue:`33392`.)"

#: ../../whatsnew/3.11.rst:931
msgid "re"
msgstr "re"

#: ../../whatsnew/3.11.rst:933
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``, ``?"
"+``, ``{m,n}+``) are now supported in regular expressions. (Contributed by "
"Jeffrey C. Jacobs and Serhiy Storchaka in :issue:`433030`.)"
msgstr ""
"Atomgruppering (``(?>...)``) och possessiva kvantifierare (``*+``, ``++``, "
"``?+``, ``{m,n}+``) stöds nu i reguljära uttryck. (Bidrag från Jeffrey C. "
"Jacobs och Serhiy Storchaka i :issue:`433030`.)"

#: ../../whatsnew/3.11.rst:941
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.11.rst:943
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by "
"Serhiy Storchaka in :issue:`46245`.)"
msgstr ""
"Lägg till valfri parameter *dir_fd* i :func:`shutil.rmtree`. (Bidrag från "
"Serhiy Storchaka i :issue:`46245`.)"

#: ../../whatsnew/3.11.rst:950
msgid "socket"
msgstr "kortplats"

#: ../../whatsnew/3.11.rst:952
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in :issue:"
"`30512`.)"
msgstr ""
"Lägg till stöd för CAN Socket för NetBSD. (Bidrag från Thomas Klausner i :"
"issue:`30512`.)"

#: ../../whatsnew/3.11.rst:955
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of failure "
"to connect, an :exc:`ExceptionGroup` containing all errors instead of only "
"raising the last error. (Contributed by Irit Katriel in :issue:`29980`.)"
msgstr ""
":meth:`~socket.create_connection` har ett alternativ för att, i händelse av "
"misslyckad anslutning, skapa en :exc:`ExceptionGroup` som innehåller alla "
"fel istället för att bara skapa det sista felet. (Bidrag från Irit Katriel "
"i :issue:`29980`.)"

#: ../../whatsnew/3.11.rst:964
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.11.rst:966
msgid ""
"You can now disable the authorizer by passing :const:`None` to :meth:"
"`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. Aasland in :"
"issue:`44491`.)"
msgstr ""
"Du kan nu inaktivera authorizer genom att skicka :const:`None` till :meth:"
"`~sqlite3.Connection.set_authorizer`. (Bidrag från Erlend E. Aasland i :"
"issue:`44491`.)"

#: ../../whatsnew/3.11.rst:970
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now contain "
"any Unicode character.  Collation names with invalid characters now raise :"
"exc:`UnicodeEncodeError` instead of :exc:`sqlite3.ProgrammingError`. "
"(Contributed by Erlend E. Aasland in :issue:`44688`.)"
msgstr ""
"Samlingsnamnet :meth:`~sqlite3.Connection.create_collation` kan nu innehålla "
"alla Unicode-tecken.  Samlingsnamn med ogiltiga tecken ger nu upphov till :"
"exc:`UnicodeEncodeError` istället för :exc:`sqlite3.ProgrammingError`. "
"(Bidrag från Erlend E. Aasland i :issue:`44688`.)"

#: ../../whatsnew/3.11.rst:975
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as :"
"attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as :attr:"
"`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, Daniel "
"Shahaf, and Erlend E. Aasland in :issue:`16379` and :issue:`24139`.)"
msgstr ""
":mod:`sqlite3` undantag inkluderar nu SQLites utökade felkod som :attr:"
"`~sqlite3.Error.sqlite_errorcode` och SQLites felnamn som :attr:`~sqlite3."
"Error.sqlite_errorname`. (Bidrag från Aviv Palivoda, Daniel Shahaf och "
"Erlend E. Aasland i :issue:`16379` och :issue:`24139`.)"

#: ../../whatsnew/3.11.rst:981
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and :meth:`~sqlite3.Connection."
"getlimit` to :class:`sqlite3.Connection` for setting and getting SQLite "
"limits by connection basis. (Contributed by Erlend E. Aasland in :issue:"
"`45243`.)"
msgstr ""
"Lägg till :meth:`~sqlite3.Connection.setlimit` och :meth:`~sqlite3."
"Connection.getlimit` till :class:`sqlite3.Connection` för att ställa in och "
"hämta SQLite-gränser per anslutning. (Bidrag från Erlend E. Aasland i :issue:"
"`45243`.)"

#: ../../whatsnew/3.11.rst:986
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default "
"threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""
":mod:`sqlite3` ställer nu in :attr:`sqlite3.threadsafety` baserat på det "
"standardiserade trådningsläget som det underliggande SQLite-biblioteket har "
"kompilerats med. (Bidrag från Erlend E. Aasland i :issue:`45613`.)"

#: ../../whatsnew/3.11.rst:990
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""
":mod:`sqlite3` C-anrop använder nu unraisable undantag om callback-"
"tracebacks är aktiverade. Användare kan nu registrera en :func:`unraisable "
"hook handler <sys.unraisablehook>` för att förbättra sin "
"felsökningsupplevelse. (Bidrag från Erlend E. Aasland i :issue:`45828`.)"

#: ../../whatsnew/3.11.rst:996
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""
"Fetch across rollback ger inte längre upphov till :exc:`~sqlite3."
"InterfaceError`. Istället överlåter vi till SQLite-biblioteket att hantera "
"dessa fall. (Bidrag från Erlend E. Aasland i :issue:`44092`.)"

#: ../../whatsnew/3.11.rst:1000
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and :meth:`~sqlite3.Connection."
"deserialize` to :class:`sqlite3.Connection` for serializing and "
"deserializing databases. (Contributed by Erlend E. Aasland in :issue:"
"`41930`.)"
msgstr ""
"Lägg till :meth:`~sqlite3.Connection.serialize` och :meth:`~sqlite3."
"Connection.deserialize` till :class:`sqlite3.Connection` för serialisering "
"och deserialisering av databaser. (Bidrag från Erlend E. Aasland i :issue:"
"`41930`.)"

#: ../../whatsnew/3.11.rst:1005
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to :class:`sqlite3."
"Connection` for creating aggregate window functions. (Contributed by Erlend "
"E. Aasland in :issue:`34916`.)"
msgstr ""
"Lägg till :meth:`~sqlite3.Connection.create_window_function` till :class:"
"`sqlite3.Connection` för att skapa aggregerade fönsterfunktioner. (Bidrag "
"från Erlend E. Aasland i :issue:`34916`.)"

#: ../../whatsnew/3.11.rst:1009
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. :"
"class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`.)"
msgstr ""
"Lägg till :meth:`~sqlite3.Connection.blobopen` till :class:`sqlite3."
"Connection`. :class:`sqlite3.Blob` tillåter inkrementella I/O-operationer på "
"blobbar. (Bidrag från Aviv Palivoda och Erlend E. Aasland i :issue:`24905`.)"

#: ../../whatsnew/3.11.rst:1017
msgid "string"
msgstr "sträng"

#: ../../whatsnew/3.11.rst:1019
msgid ""
"Add :meth:`~string.Template.get_identifiers` and :meth:`~string.Template."
"is_valid` to :class:`string.Template`, which respectively return all valid "
"placeholders, and whether any invalid placeholders are present. (Contributed "
"by Ben Kehoe in :gh:`90465`.)"
msgstr ""
"Lägg till :meth:`~string.Template.get_identifiers` och :meth:`~string."
"Template.is_valid` till :class:`string.Template`, som returnerar alla "
"giltiga platshållare respektive om några ogiltiga platshållare finns. "
"(Bidrag från Ben Kehoe i :gh:`90465`.)"

#: ../../whatsnew/3.11.rst:1029
msgid "sys"
msgstr "system"

#: ../../whatsnew/3.11.rst:1031
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields from "
"the ``value`` (the exception instance), so when an exception is modified "
"while it is being handled, the changes are reflected in the results of "
"subsequent calls to :func:`!exc_info`. (Contributed by Irit Katriel in :"
"issue:`45711`.)"
msgstr ""
":func:`sys.exc_info` härleder nu fälten ``type`` och ``traceback`` från "
"``value`` (undantagsinstansen), så när ett undantag ändras medan det "
"hanteras, återspeglas ändringarna i resultaten av efterföljande anrop till :"
"func:`!exc_info`. (Bidrag från Irit Katriel i :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:1037
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in :"
"issue:`46328`.)"
msgstr ""
"Lägg till :func:`sys.exception` som returnerar den aktiva undantagsinstansen "
"(motsvarande ``sys.exc_info()[1]``). (Bidrag från Irit Katriel i :issue:"
"`46328`.)"

#: ../../whatsnew/3.11.rst:1041
msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Lägg till flaggan :data:`sys.flags.safe_path <sys.flags>`. (Bidrag från "
"Victor Stinner i :gh:`57684`.)"

#: ../../whatsnew/3.11.rst:1048
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.11.rst:1050
msgid ""
"Three new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. The "
"first two schemes (*posix_venv* and *nt_venv*) are OS-specific for non-"
"Windows and Windows, the *venv* is essentially an alias to one of them "
"according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third party "
"code that creates new virtual environments should use the new *venv* "
"installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""
"Tre nya :ref:`installationsscheman <installation_paths>` (*posix_venv*, "
"*nt_venv* och *venv*) har lagts till och används när Python skapar nya "
"virtuella miljöer eller när den körs från en virtuell miljö. De två första "
"schemana (*posix_venv* och *nt_venv*) är OS-specifika för icke-Windows och "
"Windows, *venv* är i huvudsak ett alias till ett av dem beroende på vilket "
"OS Python körs på. Detta är användbart för nedströmsdistributörer som "
"ändrar :func:`sysconfig.get_preferred_scheme`. Tredjepartskod som skapar nya "
"virtuella miljöer bör använda det nya *venv*-installationsschemat för att "
"bestämma sökvägarna, precis som :mod:`venv`. (Bidrag från Miro Hrončok i :"
"issue:`45413`.)"

#: ../../whatsnew/3.11.rst:1067
msgid "tempfile"
msgstr "tempfil"

#: ../../whatsnew/3.11.rst:1069
msgid ""
":class:`~tempfile.SpooledTemporaryFile` objects now fully implement the "
"methods of :class:`io.BufferedIOBase` or :class:`io.TextIOBase` (depending "
"on file mode). This lets them work correctly with APIs that expect file-like "
"objects, such as compression modules. (Contributed by Carey Metcalfe in :gh:"
"`70363`.)"
msgstr ""
":class:`~tempfile.SpooledTemporaryFile`\\-objekt implementerar nu fullt ut "
"metoderna i :class:`io.BufferedIOBase` eller :class:`io.TextIOBase` "
"(beroende på filläge). Detta gör att de fungerar korrekt med API:er som "
"förväntar sig filliknande objekt, t.ex. komprimeringsmoduler. (Bidrag från "
"Carey Metcalfe i :gh:`70363`.)"

#: ../../whatsnew/3.11.rst:1080
msgid "threading"
msgstr "gängning"

#: ../../whatsnew/3.11.rst:1082
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C library "
"(glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method now uses "
"the monotonic clock (:const:`time.CLOCK_MONOTONIC`) for the timeout, rather "
"than using the system clock (:const:`time.CLOCK_REALTIME`), to not be "
"affected by system clock changes. (Contributed by Victor Stinner in :issue:"
"`41710`.)"
msgstr ""
"På Unix, om funktionen ``sem_clockwait()`` finns tillgänglig i C-biblioteket "
"(glibc 2.30 och senare), använder nu metoden :meth:`threading.Lock.acquire` "
"den monotona klockan (:const:`time.CLOCK_MONOTONIC`) för timeout, istället "
"för att använda systemklockan (:const:`time.CLOCK_REALTIME`), för att inte "
"påverkas av ändringar i systemklockan. (Bidrag från Victor Stinner i :issue:"
"`41710`.)"

#: ../../whatsnew/3.11.rst:1093
msgid "time"
msgstr "tid"

#: ../../whatsnew/3.11.rst:1095
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which "
"has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed by "
"Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""
"På Unix använder :func:`time.sleep` nu funktionen ``clock_nanosleep()`` "
"eller ``nanosleep()``, om den finns tillgänglig, som har en upplösning på 1 "
"nanosekund (10\\ :sup:`\\-9` sekunder), i stället för att använda "
"``select()`` som har en upplösning på 1 mikrosekund (10\\ :sup:`\\-6` "
"sekunder). (Bidrag från Benjamin Szőke och Victor Stinner i :issue:`21302`.)"

#: ../../whatsnew/3.11.rst:1101
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer based "
"on `high-resolution timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ which has a resolution of "
"100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it had a resolution of "
"1 millisecond (10\\ :sup:`-3` seconds). (Contributed by Benjamin Szőke, "
"Donghee Na, Eryk Sun and Victor Stinner in :issue:`21302` and :issue:"
"`45429`.)"
msgstr ""
"I Windows 8.1 och senare använder :func:`time.sleep` nu en väntande timer "
"baserad på `högupplösta timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ som har en upplösning på "
"100 nanosekunder (10\\ :sup:`\\-7` sekunder). Tidigare hade den en "
"upplösning på 1 millisekund (10\\ :sup:`\\-3` sekunder). (Bidrag från "
"Benjamin Szőke, Donghee Na, Eryk Sun och Victor Stinner i :issue:`21302` "
"och :issue:`45429`.)"

#: ../../whatsnew/3.11.rst:1112
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.11.rst:1114
msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the "
"Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""
"Lagt till metoden ``info_patchlevel()`` som returnerar den exakta versionen "
"av Tcl-biblioteket som en namngiven tupel liknande :data:`sys.version_info`. "
"(Bidrag från Serhiy Storchaka i :gh:`91827`.)"

#: ../../whatsnew/3.11.rst:1122
msgid "traceback"
msgstr "spårning"

#: ../../whatsnew/3.11.rst:1124
msgid ""
"Add :func:`traceback.StackSummary.format_frame_summary` to allow users to "
"override which frames appear in the traceback, and how they are formatted. "
"(Contributed by Ammar Askar in :issue:`44569`.)"
msgstr ""
"Lägg till :func:`traceback.StackSummary.format_frame_summary` för att "
"tillåta användare att åsidosätta vilka ramar som visas i traceback, och hur "
"de formateras. (Bidrag från Ammar Askar i :issue:`44569`.)"

#: ../../whatsnew/3.11.rst:1129
msgid ""
"Add :func:`traceback.TracebackException.print`, which prints the formatted :"
"exc:`~traceback.TracebackException` instance to a file. (Contributed by Irit "
"Katriel in :issue:`33809`.)"
msgstr ""
"Lägg till :func:`traceback.TracebackException.print`, som skriver ut den "
"formaterade :exc:`~traceback.TracebackException`\\-instansen till en fil. "
"(Bidrag från Irit Katriel i :issue:`33809`.)"

#: ../../whatsnew/3.11.rst:1137
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.11.rst:1139
msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr "För större ändringar, se :ref:`new-feat-related-type-hints-311`."

#: ../../whatsnew/3.11.rst:1141
msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. :func:`typing."
"assert_never` is useful for asking a type checker to confirm that a line of "
"code is not reachable. At runtime, it raises an :exc:`AssertionError`. "
"(Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""
"Lägg till :func:`typing.assert_never` och :class:`typing.Never`. :func:"
"`typing.assert_never` är användbart för att be en typkontroll att bekräfta "
"att en kodrad inte är nåbar. Vid körning ger det upphov till ett :exc:"
"`AssertionError`. (Bidrag från Jelle Zijlstra i :gh:`90633`.)"

#: ../../whatsnew/3.11.rst:1147
msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints the "
"type of the received value. (Contributed by Jelle Zijlstra in :gh:`90572`.)"
msgstr ""
"Lägg till :func:`typing.reveal_type`. Detta är användbart för att fråga en "
"typkontrollant vilken typ den har härlett för ett givet uttryck. Vid körning "
"skriver den ut typen för det mottagna värdet. (Bidrag från Jelle Zijlstra i :"
"gh:`90572`.)"

#: ../../whatsnew/3.11.rst:1152
msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker to "
"confirm that the type it has inferred for a given expression matches the "
"given type. At runtime it simply returns the received value. (Contributed by "
"Jelle Zijlstra in :gh:`90638`.)"
msgstr ""
"Lägg till :func:`typing.assert_type`. Detta är användbart för att be en "
"typkontrollör att bekräfta att den typ som den har härlett för ett visst "
"uttryck matchar den angivna typen. Vid körning returnerar den helt enkelt "
"det mottagna värdet. (Bidrag från Jelle Zijlstra i :gh:`90638`.)"

#: ../../whatsnew/3.11.rst:1157
msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by Samodya "
"Abeysiriwardane in :gh:`89026`.)"
msgstr ""
":data:`typing.TypedDict`\\-typer kan nu vara generiska. (Bidrag från Samodya "
"Abeysiriwardane i :gh:`89026`.)"

#: ../../whatsnew/3.11.rst:1160
msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by Serhiy "
"Storchaka in :issue:`43923`.)"
msgstr ""
":class:`~typing.NamedTuple`\\-typer kan nu vara generiska. (Bidrag från "
"Serhiy Storchaka i :issue:`43923`.)"

#: ../../whatsnew/3.11.rst:1163
msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding type "
"checker errors related to highly dynamic class, such as mocks. (Contributed "
"by Shantanu Jain in :gh:`91154`.)"
msgstr ""
"Tillåt subklassning av :class:`typing.Any`. Detta är användbart för att "
"undvika typkontrollfel relaterade till mycket dynamiska klasser, t.ex. "
"mocks. (Bidrag från Shantanu Jain i :gh:`91154`.)"

#: ../../whatsnew/3.11.rst:1167
msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed on "
"the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""
"Dekoratorn :func:`typing.final` sätter nu attributet ``__final__`` på det "
"dekorerade objektet. (Bidrag från Jelle Zijlstra i :gh:`90500`.)"

#: ../../whatsnew/3.11.rst:1171
msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting the "
"overloads of a function. :func:`typing.clear_overloads` can be used to clear "
"all registered overloads of a function. (Contributed by Jelle Zijlstra in :"
"gh:`89263`.)"
msgstr ""
"Funktionen :func:`typing.get_overloads` kan användas för att introspektera "
"överbelastningar av en funktion. :func:`typing.clear_overloads` kan användas "
"för att rensa alla registrerade överbelastningar av en funktion. (Bidrag "
"från Jelle Zijlstra i :gh:`89263`.)"

#: ../../whatsnew/3.11.rst:1176
msgid ""
"The :meth:`~object.__init__` method of :class:`~typing.Protocol` subclasses "
"is now preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""
"Metoden :meth:`~object.__init__` för :class:`~typing.Protocol`\\-"
"underklasser bevaras nu. (Bidrag från Adrian Garcia Badarasco i :gh:`88970`.)"

#: ../../whatsnew/3.11.rst:1179
msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. This "
"affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to ``()`` "
"instead of ``((),)``. (Contributed by Serhiy Storchaka in :gh:`91137`.)"
msgstr ""
"Representationen av tomma tupeltyper (``Tuple[()]``) har förenklats. Detta "
"påverkar introspektion, t.ex. ``get_args(Tuple[()])`` utvärderas nu till "
"``()`` istället för ``((),)``. (Bidrag från Serhiy Storchaka i :gh:`91137`.)"

#: ../../whatsnew/3.11.rst:1184
msgid ""
"Loosen runtime requirements for type annotations by removing the callable "
"check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""
"Lättar på körtidskraven för typannoteringar genom att ta bort den anropbara "
"kontrollen i den privata funktionen ``typing._type_check``. (Bidrag från "
"Gregory Beauregard i :gh:`90802`.)"

#: ../../whatsnew/3.11.rst:1188
msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""
":func:`typing.get_type_hints` stöder nu utvärdering av strängar som "
"framåtriktade referenser i :ref:`PEP 585 generiska alias <types-"
"genericalias>`. (Bidrag från Niklas Rosenstein i :gh:`85542`.)"

#: ../../whatsnew/3.11.rst:1192
msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in :gh:"
"`90353`.)"
msgstr ""
":func:`typing.get_type_hints` lägger inte längre till :data:`~typing."
"Optional` till parametrar med ``None`` som standard. (Bidrag från Nikita "
"Sobolev i :gh:`90353`.)"

#: ../../whatsnew/3.11.rst:1196
msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified :data:"
"`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard in :gh:"
"`90711`.)"
msgstr ""
":func:`typing.get_type_hints` stöder nu utvärdering av nakna strängade :data:"
"`~typing.ClassVar`\\-annoteringar. (Bidrag från Gregory Beauregard i :gh:"
"`90711`.)"

#: ../../whatsnew/3.11.rst:1200
msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""
":func:`typing.no_type_check` modifierar inte längre externa klasser och "
"funktioner. Den markerar nu också korrekt att klassmetoder inte ska "
"typkontrolleras. (Bidrag från Nikita Sobolev i :gh:`90729`.)"

#: ../../whatsnew/3.11.rst:1208
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.11.rst:1210
msgid ""
"The Unicode database has been updated to version 14.0.0. (Contributed by "
"Benjamin Peterson in :issue:`45190`)."
msgstr ""
"Unicode-databasen har uppdaterats till version 14.0.0. (Bidrag från Benjamin "
"Peterson i :issue:`45190`)."

#: ../../whatsnew/3.11.rst:1217
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.11.rst:1219
msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and :meth:`~unittest."
"TestCase.enterClassContext` of class :class:`~unittest.TestCase`, method :"
"meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class :class:"
"`~unittest.IsolatedAsyncioTestCase` and function :func:`unittest."
"enterModuleContext`. (Contributed by Serhiy Storchaka in :issue:`45046`.)"
msgstr ""
"Lagt till metoderna :meth:`~unittest.TestCase.enterContext` och :meth:"
"`~unittest.TestCase.enterClassContext` för klassen :class:`~unittest."
"TestCase`, metoden :meth:`~unittest.IsolatedAsyncioTestCase."
"enterAsyncContext` för klassen :class:`~unittest.IsolatedAsyncioTestCase` "
"och funktionen :func:`unittest.enterModuleContext`. (Bidrag från Serhiy "
"Storchaka i :issue:`45046`.)"

#: ../../whatsnew/3.11.rst:1231
msgid "venv"
msgstr "ven"

#: ../../whatsnew/3.11.rst:1233
msgid ""
"When new Python virtual environments are created, the *venv* :ref:`sysconfig "
"installation scheme <installation_paths>` is used to determine the paths "
"inside the environment. When Python runs in a virtual environment, the same "
"installation scheme is the default. That means that downstream distributors "
"can change the default sysconfig install scheme without changing behavior of "
"virtual environments. Third party code that also creates new virtual "
"environments should do the same. (Contributed by Miro Hrončok in :issue:"
"`45413`.)"
msgstr ""
"När nya virtuella Python-miljöer skapas används *venv* :ref:`sysconfig-"
"installationsschemat <installation_paths>` för att bestämma sökvägarna i "
"miljön. När Python körs i en virtuell miljö är samma installationsschema "
"standard. Det innebär att nedströmsdistributörer kan ändra "
"standardinstallationsschemat för sysconfig utan att ändra beteendet i "
"virtuella miljöer. Tredjepartskod som också skapar nya virtuella miljöer bör "
"göra detsamma. (Bidrag från Miro Hrončok i :issue:`45413`.)"

#: ../../whatsnew/3.11.rst:1247
msgid "warnings"
msgstr "varningar"

#: ../../whatsnew/3.11.rst:1249
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for :func:`warnings."
"simplefilter`, providing a more concise way to locally ignore warnings or "
"convert them to errors. (Contributed by Zac Hatfield-Dodds in :issue:"
"`47074`.)"
msgstr ""
":func:`warnings.catch_warnings` accepterar nu argument för :func:`warnings."
"simplefilter`, vilket ger ett mer koncist sätt att lokalt ignorera varningar "
"eller konvertera dem till fel. (Bidrag från Zac Hatfield-Dodds i :issue:"
"`47074`.)"

#: ../../whatsnew/3.11.rst:1257
msgid "zipfile"
msgstr "zip-fil"

#: ../../whatsnew/3.11.rst:1259
msgid ""
"Added support for specifying member name encoding for reading metadata in a :"
"class:`~zipfile.ZipFile`'s directory and file headers. (Contributed by "
"Stephen J. Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""
"Lagt till stöd för att ange kodning av medlemsnamn för läsning av metadata i "
"en :class:`~zipfile.ZipFile` katalog och filhuvuden. (Bidrag från Stephen J. "
"Turnbull och Serhiy Storchaka i :issue:`28080`.)"

#: ../../whatsnew/3.11.rst:1263
msgid ""
"Added :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` for creating new "
"directories inside ZIP archives. (Contributed by Sam Ezeh in :gh:`49083`.)"
msgstr ""
"Lagt till :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` för att skapa nya "
"kataloger inuti ZIP-arkiv. (Bidrag från Sam Ezeh i :gh:`49083`.)"

#: ../../whatsnew/3.11.rst:1267
msgid ""
"Added :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` and :attr:"
"`~zipfile.Path.suffixes` to :class:`zipfile.Path`. (Contributed by Miguel "
"Brito in :gh:`88261`.)"
msgstr ""
"Lade till :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` och :attr:"
"`~zipfile.Path.suffixes` till :class:`zipfile.Path`. (Bidrag från Miguel "
"Brito i :gh:`88261`.)"

#: ../../whatsnew/3.11.rst:1275
msgid "Optimizations"
msgstr "Optimeringar"

#: ../../whatsnew/3.11.rst:1277
msgid ""
"This section covers specific optimizations independent of the :ref:"
"`whatsnew311-faster-cpython` project, which is covered in its own section."
msgstr ""
"Detta avsnitt behandlar specifika optimeringar oberoende av :ref:"
"`whatsnew311-faster-cpython`\\-projektet, som behandlas i ett eget avsnitt."

#: ../../whatsnew/3.11.rst:1280
msgid ""
"The compiler now optimizes simple :ref:`printf-style % formatting <old-"
"string-formatting>` on string literals containing only the format codes "
"``%s``, ``%r`` and ``%a`` and makes it as fast as a corresponding :term:`f-"
"string` expression. (Contributed by Serhiy Storchaka in :issue:`28307`.)"
msgstr ""
"Kompilatorn optimerar nu enkel :ref:`printf-style % formatting <old-string-"
"formatting>` på strängliteraler som endast innehåller formatkoderna ``%s``, "
"``%r`` och ``%a`` och gör det lika snabbt som ett motsvarande :term:`f-"
"string` -uttryck. (Bidrag från Serhiy Storchaka i :issue:`28307`.)"

#: ../../whatsnew/3.11.rst:1286
msgid ""
"Integer division (``//``) is better tuned for optimization by compilers. It "
"is now around 20% faster on x86-64 when dividing an :class:`int` by a value "
"smaller than ``2**30``. (Contributed by Gregory P. Smith and Tim Peters in :"
"gh:`90564`.)"
msgstr ""
"Integer division (``//``) är bättre anpassad för optimering av kompilatorer. "
"Det är nu runt 20% faster på x86-64 när man delar en :class:`int` med ett "
"värde som är mindre än ``2**30``. (Bidrag från Gregory P. Smith och Tim "
"Peters i :gh:`90564`.)"

#: ../../whatsnew/3.11.rst:1291
msgid ""
":func:`sum` is now nearly 30% faster for integers smaller than ``2**30``. "
"(Contributed by Stefan Behnel in :gh:`68264`.)"
msgstr ""
":func:`sum` är nu nästan 30% faster för heltal mindre än ``2**30``. (Bidrag "
"från Stefan Behnel i :gh:`68264`.)"

#: ../../whatsnew/3.11.rst:1294
msgid ""
"Resizing lists is streamlined for the common case, speeding up :meth:`list."
"append` by ≈15% and simple :term:`list comprehension`\\s by up to 20-30% "
"(Contributed by Dennis Sweeney in :gh:`91165`.)"
msgstr ""

#: ../../whatsnew/3.11.rst:1299
msgid ""
"Dictionaries don't store hash values when all keys are Unicode objects, "
"decreasing :class:`dict` size. For example, ``sys.getsizeof(dict."
"fromkeys(\"abcdefg\"))`` is reduced from 352 bytes to 272 bytes (23% "
"smaller) on 64-bit platforms. (Contributed by Inada Naoki in :issue:`46845`.)"
msgstr ""
"Dictionaries lagrar inte hash-värden när alla nycklar är Unicode-objekt, "
"vilket minskar :class:`dict`\\-storleken. Till exempel minskas ``sys."
"getsizeof(dict.fromkeys(\"abcdefg\"))`` från 352 byte till 272 byte (23% "
"smaller) på 64-bitars plattformar. (Bidrag från Inada Naoki i :issue:"
"`46845`.)"

#: ../../whatsnew/3.11.rst:1305
msgid ""
"Using :class:`asyncio.DatagramProtocol` is now orders of magnitude faster "
"when transferring large files over UDP, with speeds over 100 times higher "
"for a ≈60 MiB file. (Contributed by msoxzw in :gh:`91487`.)"
msgstr ""
"Att använda :class:`asyncio.DatagramProtocol` är nu flera storleksordningar "
"snabbare vid överföring av stora filer över UDP, med hastigheter över 100 "
"gånger högre för en fil på ≈60 MiB. (Bidrag från msoxzw i :gh:`91487`.)"

#: ../../whatsnew/3.11.rst:1310
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now ≈10 "
"times faster for large arguments (with a larger speedup for larger *k*). "
"(Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""
":mod:`math`\\-funktionerna :func:`~math.comb` och :func:`~math.perm` är nu "
"≈10 gånger snabbare för stora argument (med en större ökning för större "
"*k*). (Bidrag från Serhiy Storchaka i :issue:`37295`.)"

#: ../../whatsnew/3.11.rst:1314
msgid ""
"The :mod:`statistics` functions :func:`~statistics.mean`, :func:`~statistics."
"variance` and :func:`~statistics.stdev` now consume iterators in one pass "
"rather than converting them to a :class:`list` first. This is twice as fast "
"and can save substantial memory. (Contributed by Raymond Hettinger in :gh:"
"`90415`.)"
msgstr ""
"Funktionerna :mod:`statistics` :func:`~statistics.mean`, :func:`~statistics."
"variance` och :func:`~statistics.stdev` använder nu iteratorer i ett svep i "
"stället för att först konvertera dem till en :class:`list`. Detta är dubbelt "
"så snabbt och kan spara mycket minne. (Bidrag från Raymond Hettinger i :gh:"
"`90415`.)"

#: ../../whatsnew/3.11.rst:1320
msgid ""
":func:`unicodedata.normalize` now normalizes pure-ASCII strings in constant "
"time. (Contributed by Donghee Na in :issue:`44987`.)"
msgstr ""
":func:`unicodedata.normalize` normaliserar nu rena ASCII-strängar i konstant "
"tid. (Bidrag från Donghee Na i :issue:`44987`.)"

#: ../../whatsnew/3.11.rst:1328
msgid "Faster CPython"
msgstr "Snabbare CPython"

#: ../../whatsnew/3.11.rst:1330
msgid ""
"CPython 3.11 is an average of `25% faster <https://github.com/faster-cpython/"
"ideas#published-results>`_ than CPython 3.10 as measured with the "
"`pyperformance <https://github.com/python/pyperformance>`_ benchmark suite, "
"when compiled with GCC on Ubuntu Linux. Depending on your workload, the "
"overall speedup could be 10-60%."
msgstr ""
"CPython 3.11 är i genomsnitt `25% faster <https://github.com/faster-cpython/"
"ideas#published-results>`_ snabbare än CPython 3.10 mätt med `pyperformance "
"<https://github.com/python/pyperformance>`_ benchmark suite, när det "
"kompileras med GCC på Ubuntu Linux. Beroende på din arbetsbelastning kan den "
"totala hastighetsökningen vara 10-60%."

#: ../../whatsnew/3.11.rst:1337
msgid ""
"This project focuses on two major areas in Python: :ref:`whatsnew311-faster-"
"startup` and :ref:`whatsnew311-faster-runtime`. Optimizations not covered by "
"this project are listed separately under :ref:`whatsnew311-optimizations`."
msgstr ""
"Det här projektet fokuserar på två stora områden i Python: :ref:`whatsnew311-"
"faster-startup` och :ref:`whatsnew311-faster-runtime`. Optimeringar som inte "
"täcks av detta projekt listas separat under :ref:`whatsnew311-optimizations`."

#: ../../whatsnew/3.11.rst:1346
msgid "Faster Startup"
msgstr "Snabbare uppstart"

#: ../../whatsnew/3.11.rst:1351
msgid "Frozen imports / Static code objects"
msgstr "Fryst import / Statiska kodobjekt"

#: ../../whatsnew/3.11.rst:1353
msgid ""
"Python caches :term:`bytecode` in the :ref:`__pycache__ <tut-pycache>` "
"directory to speed up module loading."
msgstr ""
"Python cachelagrar :term:`bytecode` i :ref:`__pycache__ <tut-pycache>` "
"katalogen för att påskynda laddning av moduler."

#: ../../whatsnew/3.11.rst:1356
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr "Tidigare i 3.10 såg exekveringen av Python-moduler ut så här:"

#: ../../whatsnew/3.11.rst:1358
msgid "Read __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate"
msgstr "Läs __pycache__ -> Unmarshal -> Heap-allokerat kodobjekt -> Utvärdera"

#: ../../whatsnew/3.11.rst:1362
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their :ref:`codeobjects` (and bytecode) are "
"statically allocated by the interpreter. This reduces the steps in module "
"execution process to:"
msgstr ""
"I Python 3.11 är de kärnmoduler som är nödvändiga för Python-start "
"\"frysta\". Detta innebär att deras :ref:`codeobjects` (och bytekoder) "
"allokeras statiskt av tolken. Detta reducerar stegen i modulens "
"exekveringsprocess till:"

#: ../../whatsnew/3.11.rst:1367
msgid "Statically allocated code object -> Evaluate"
msgstr "Statiskt allokerat kodobjekt -> Utvärdera"

#: ../../whatsnew/3.11.rst:1371
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr ""
"Interpreterstart är nu 10-15% faster i Python 3.11. Detta har stor inverkan "
"på kortlivade program som använder Python."

#: ../../whatsnew/3.11.rst:1374
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in many issues.)"
msgstr ""
"(Bidrag från Eric Snow, Guido van Rossum och Kumar Aditya i många utgåvor)"

#: ../../whatsnew/3.11.rst:1380
msgid "Faster Runtime"
msgstr "Snabbare körtid"

#: ../../whatsnew/3.11.rst:1385
msgid "Cheaper, lazy Python frames"
msgstr "Billigare, latare Python-ramar"

#: ../../whatsnew/3.11.rst:1387
msgid ""
"Python frames, holding execution information, are created whenever Python "
"calls a Python function. The following are new frame optimizations:"
msgstr ""
"Python-ramar, som innehåller exekveringsinformation, skapas varje gång "
"Python anropar en Python-funktion. Följande är nya optimeringar av ramar:"

#: ../../whatsnew/3.11.rst:1391
msgid "Streamlined the frame creation process."
msgstr "Effektiviserad process för att skapa ramar."

#: ../../whatsnew/3.11.rst:1392
msgid ""
"Avoided memory allocation by generously re-using frame space on the C stack."
msgstr ""
"Undviker minnesallokering genom att generöst återanvända ramutrymme på C-"
"stacken."

#: ../../whatsnew/3.11.rst:1393
msgid ""
"Streamlined the internal frame struct to contain only essential information. "
"Frames previously held extra debugging and memory management information."
msgstr ""
"Effektiviserat den interna ramstrukturen till att endast innehålla väsentlig "
"information. Frames innehöll tidigare extra felsöknings- och "
"minneshanteringsinformation."

#: ../../whatsnew/3.11.rst:1396
msgid ""
"Old-style :ref:`frame objects <frame-objects>` are now created only when "
"requested by debuggers or by Python introspection functions such as :func:"
"`sys._getframe` and :func:`inspect.currentframe`. For most user code, no "
"frame objects are created at all. As a result, nearly all Python functions "
"calls have sped up significantly. We measured a 3-7% speedup in "
"pyperformance."
msgstr ""
"Den gamla stilen :ref:`frame objects <frame-objects>` skapas nu endast på "
"begäran av debuggar eller av Pythons introspektionsfunktioner som :func:`sys."
"_getframe` och :func:`inspect.currentframe`. För de flesta användarkoder "
"skapas inga frame-objekt alls. Som ett resultat av detta har nästan alla "
"anrop av Python-funktioner blivit betydligt snabbare. Vi uppmätte en 3-7% "
"speedup i pyperformance."

#: ../../whatsnew/3.11.rst:1403
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr "(Bidrag från Mark Shannon i :issue:`44590`.)"

#: ../../whatsnew/3.11.rst:1410
msgid "Inlined Python function calls"
msgstr "Anrop av Python-funktioner"

#: ../../whatsnew/3.11.rst:1412
msgid ""
"During a Python function call, Python will call an evaluating C function to "
"interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""
"Under ett Python-funktionsanrop kommer Python att anropa en utvärderande C-"
"funktion för att tolka den funktionens kod. Detta begränsar effektivt ren "
"Python-rekursion till vad som är säkert för C-stacken."

#: ../../whatsnew/3.11.rst:1416
msgid ""
"In 3.11, when CPython detects Python code calling another Python function, "
"it sets up a new frame, and \"jumps\" to the new code inside the new frame. "
"This avoids calling the C interpreting function altogether."
msgstr ""
"I 3.11, när CPython upptäcker att Python-kod anropar en annan Python-"
"funktion, skapar CPython en ny ram och \"hoppar\" till den nya koden i den "
"nya ramen. På så sätt undviker man att anropa C-tolkningsfunktionen helt och "
"hållet."

#: ../../whatsnew/3.11.rst:1420
msgid ""
"Most Python function calls now consume no C stack space, speeding them up. "
"In simple recursive functions like fibonacci or factorial, we observed a "
"1.7x speedup. This also means recursive functions can recurse significantly "
"deeper (if the user increases the recursion limit with :func:`sys."
"setrecursionlimit`). We measured a 1-3% improvement in pyperformance."
msgstr ""
"De flesta Python-funktionsanrop förbrukar nu inget C-stackutrymme, vilket "
"snabbar upp dem. I enkla rekursiva funktioner som fibonacci eller factorial "
"observerade vi en 1,7-faldig hastighet. Detta innebär också att rekursiva "
"funktioner kan rekursera betydligt djupare (om användaren ökar "
"rekursionsgränsen med :func:`sys.setrecursionlimit`). Vi uppmätte en 1-3% im "
"förbättring av pyperformance."

#: ../../whatsnew/3.11.rst:1427
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr "(Bidrag från Pablo Galindo och Mark Shannon i :issue:`45256`.)"

#: ../../whatsnew/3.11.rst:1433
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr "PEP 659: Specialisering av adaptiv tolk"

#: ../../whatsnew/3.11.rst:1435
msgid ""
":pep:`659` is one of the key parts of the Faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""
":pep:`659` är en av de viktigaste delarna i Faster CPython-projektet. Den "
"allmänna idén är att även om Python är ett dynamiskt språk, har de flesta "
"koder regioner där objekt och typer sällan ändras. Detta koncept är känt som "
"*typstabilitet*."

#: ../../whatsnew/3.11.rst:1439
msgid ""
"At runtime, Python will try to look for common patterns and type stability "
"in the executing code. Python will then replace the current operation with a "
"more specialized one. This specialized operation uses fast paths available "
"only to those use cases/types, which generally outperform their generic "
"counterparts. This also brings in another concept called *inline caching*, "
"where Python caches the results of expensive operations directly in the :"
"term:`bytecode`."
msgstr ""
"Vid körning försöker Python leta efter vanliga mönster och typstabilitet i "
"den exekverande koden. Python ersätter sedan den aktuella operationen med en "
"mer specialiserad. Denna specialiserade operation använder snabba vägar som "
"endast är tillgängliga för dessa användningsfall/typer, som i allmänhet "
"överträffar sina generiska motsvarigheter. Detta medför också ett annat "
"koncept som kallas *inline caching*, där Python cachelagrar resultaten av "
"dyra operationer direkt i :term:`bytecode`."

#: ../../whatsnew/3.11.rst:1447
msgid ""
"The specializer will also combine certain common instruction pairs into one "
"superinstruction, reducing the overhead during execution."
msgstr ""
"Specialiseraren kombinerar också vissa vanliga instruktionspar till en "
"superinstruktion, vilket minskar overheaden under exekveringen."

#: ../../whatsnew/3.11.rst:1450
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time on run-once code. "
"Python can also de-specialize when code is too dynamic or when the use "
"changes. Specialization is attempted periodically, and specialization "
"attempts are not too expensive, allowing specialization to adapt to new "
"circumstances."
msgstr ""
"Python kommer bara att specialisera sig när det ser kod som är "
"\"het\" (exekveras flera gånger). Detta förhindrar att Python slösar tid på "
"kod som bara körs en gång. Python kan också avspecialisera när koden är för "
"dynamisk eller när användningen ändras. Specialiseringsförsök görs med jämna "
"mellanrum och specialiseringsförsöken är inte alltför dyra, vilket gör att "
"specialiseringen kan anpassas till nya omständigheter."

#: ../../whatsnew/3.11.rst:1457
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See :"
"pep:`659` for more information. Implementation by Mark Shannon and Brandt "
"Bucher, with additional help from Irit Katriel and Dennis Sweeney.)"
msgstr ""
"(PEP skriven av Mark Shannon, med idéer inspirerade av Stefan Brunthaler. "
"Se :pep:`659` för mer information. Implementering av Mark Shannon och Brandt "
"Bucher, med ytterligare hjälp från Irit Katriel och Dennis Sweeney)"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation"
msgstr "Operation"

#: ../../whatsnew/3.11.rst:1465
msgid "Form"
msgstr "Formulär"

#: ../../whatsnew/3.11.rst:1465
msgid "Specialization"
msgstr "Specialisering"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation speedup (up to)"
msgstr "Snabbare drift (upp till)"

#: ../../whatsnew/3.11.rst:1465
msgid "Contributor(s)"
msgstr "Medverkande(n)"

#: ../../whatsnew/3.11.rst:1468
msgid "Binary operations"
msgstr "Binära operationer"

#: ../../whatsnew/3.11.rst:1468
msgid "``x + x``"
msgstr "``x + x``"

#: ../../whatsnew/3.11.rst:1470
msgid "``x - x``"
msgstr "``x - x``"

#: ../../whatsnew/3.11.rst:1472
msgid "``x * x``"
msgstr "``x * x``"

#: ../../whatsnew/3.11.rst:1468
msgid ""
"Binary add, multiply and subtract for common types such as :class:`int`, :"
"class:`float` and :class:`str` take custom fast paths for their underlying "
"types."
msgstr ""
"Binär addition, multiplikation och subtraktion för vanliga typer som :class:"
"`int`, :class:`float` och :class:`str` tar anpassade snabba vägar för sina "
"underliggande typer."

#: ../../whatsnew/3.11.rst:1468
msgid "10%"
msgstr "10%"

#: ../../whatsnew/3.11.rst:1468
msgid "Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney"
msgstr "Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1474
msgid "Subscript"
msgstr "Nedsänkt"

#: ../../whatsnew/3.11.rst:1474
msgid "``a[i]``"
msgstr "``a[i]``"

#: ../../whatsnew/3.11.rst:1474
msgid ""
"Subscripting container types such as :class:`list`, :class:`tuple` and :"
"class:`dict` directly index the underlying data structures."
msgstr ""
"Subscripterande containertyper som :class:`list`, :class:`tuple` och :class:"
"`dict` indexerar direkt de underliggande datastrukturerna."

#: ../../whatsnew/3.11.rst:1478
msgid ""
"Subscripting custom :meth:`~object.__getitem__` is also inlined similar to :"
"ref:`inline-calls`."
msgstr ""
"Subscripting custom :meth:`~object.__getitem__` är också inline på liknande "
"sätt som :ref:`inline-calls`."

#: ../../whatsnew/3.11.rst:1474 ../../whatsnew/3.11.rst:1481
msgid "10-25%"
msgstr "10-25%"

#: ../../whatsnew/3.11.rst:1474
msgid "Irit Katriel, Mark Shannon"
msgstr "Irit Katriel, Mark Shannon"

#: ../../whatsnew/3.11.rst:1481
msgid "Store subscript"
msgstr "Lagra index"

#: ../../whatsnew/3.11.rst:1481
msgid "``a[i] = z``"
msgstr "``a[i] = z``"

#: ../../whatsnew/3.11.rst:1481
msgid "Similar to subscripting specialization above."
msgstr "På samma sätt som för specialisering av subskription ovan."

#: ../../whatsnew/3.11.rst:1481
msgid "Dennis Sweeney"
msgstr "Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1484
msgid "Calls"
msgstr "Calls"

#: ../../whatsnew/3.11.rst:1484
msgid "``f(arg)``"
msgstr "``f(arg)``"

#: ../../whatsnew/3.11.rst:1486
msgid "``C(arg)``"
msgstr "``C(arg)``"

#: ../../whatsnew/3.11.rst:1484
msgid ""
"Calls to common builtin (C) functions and types such as :func:`len` and :"
"class:`str` directly call their underlying C version. This avoids going "
"through the internal calling convention."
msgstr ""
"Anrop till vanliga inbyggda (C) funktioner och typer som :func:`len` och :"
"class:`str` anropar direkt deras underliggande C-version. Detta undviker att "
"gå igenom den interna anropskonventionen."

#: ../../whatsnew/3.11.rst:1484
msgid "20%"
msgstr "20%"

#: ../../whatsnew/3.11.rst:1484
msgid "Mark Shannon, Ken Jin"
msgstr "Mark Shannon, Ken Jin"

#: ../../whatsnew/3.11.rst:1489
msgid "Load global variable"
msgstr "Ladda global variabel"

#: ../../whatsnew/3.11.rst:1489
msgid "``print``"
msgstr "``print``"

#: ../../whatsnew/3.11.rst:1491
msgid "``len``"
msgstr "``len``"

#: ../../whatsnew/3.11.rst:1489
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr ""
"Objektets index i namnrymdens globals/builtins är cachat. Inläsning av "
"globaler och builtins kräver inga namnrymdsuppslagningar."

#: ../../whatsnew/3.11.rst:1489
msgid "[#load-global]_"
msgstr "[#load-global]_"

#: ../../whatsnew/3.11.rst:1489 ../../whatsnew/3.11.rst:1493
#: ../../whatsnew/3.11.rst:1502
msgid "Mark Shannon"
msgstr "Mark Shannon"

#: ../../whatsnew/3.11.rst:1493
msgid "Load attribute"
msgstr "Ladda attribut"

#: ../../whatsnew/3.11.rst:1493
msgid "``o.attr``"
msgstr "``o.attr``"

#: ../../whatsnew/3.11.rst:1493
msgid ""
"Similar to loading global variables. The attribute's index inside the class/"
"object's namespace is cached. In most cases, attribute loading will require "
"zero namespace lookups."
msgstr ""
"På samma sätt som vid laddning av globala variabler. Attributets index i "
"klassens/objektets namnrymd cachelagras. I de flesta fall kräver "
"attributladdning inga namnrymdsuppslagningar."

#: ../../whatsnew/3.11.rst:1493
msgid "[#load-attr]_"
msgstr "[#load-attr]_"

#: ../../whatsnew/3.11.rst:1498
msgid "Load methods for call"
msgstr "Ladda metoder för anrop"

#: ../../whatsnew/3.11.rst:1498
msgid "``o.meth()``"
msgstr "``o.meth()``"

#: ../../whatsnew/3.11.rst:1498
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr ""
"Den faktiska adressen till metoden cachelagras. Metodladdning har nu inga "
"namnrymdsuppslagningar - inte ens för klasser med långa arvskedjor."

#: ../../whatsnew/3.11.rst:1498
msgid "10-20%"
msgstr "10-20%"

#: ../../whatsnew/3.11.rst:1498
msgid "Ken Jin, Mark Shannon"
msgstr "Ken Jin, Mark Shannon"

#: ../../whatsnew/3.11.rst:1502
msgid "Store attribute"
msgstr "Butikens attribut"

#: ../../whatsnew/3.11.rst:1502
msgid "``o.attr = z``"
msgstr "``o.attr = z``"

#: ../../whatsnew/3.11.rst:1502
msgid "Similar to load attribute optimization."
msgstr "Liknar optimering av lastattribut."

#: ../../whatsnew/3.11.rst:1502
msgid "2% in pyperformance"
msgstr "2% in pyperformance"

#: ../../whatsnew/3.11.rst:1505
msgid "Unpack Sequence"
msgstr "Sekvens för uppackning"

#: ../../whatsnew/3.11.rst:1505
msgid "``*seq``"
msgstr "``*seq``"

#: ../../whatsnew/3.11.rst:1505
msgid ""
"Specialized for common containers such as :class:`list` and :class:`tuple`. "
"Avoids internal calling convention."
msgstr ""
"Specialiserad för vanliga behållare som :class:`list` och :class:`tuple`. "
"Undviker intern anropskonvention."

#: ../../whatsnew/3.11.rst:1505
msgid "8%"
msgstr "8%"

#: ../../whatsnew/3.11.rst:1505
msgid "Brandt Bucher"
msgstr "Brandt Bucher"

#: ../../whatsnew/3.11.rst:1510
msgid ""
"A similar optimization already existed since Python 3.8. 3.11 specializes "
"for more forms and reduces some overhead."
msgstr ""
"En liknande optimering fanns redan sedan Python 3.8. 3.11 specialiserar sig "
"för fler former och minskar en del overhead."

#: ../../whatsnew/3.11.rst:1513
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 specializes "
"for more forms. Furthermore, all attribute loads should be sped up by :issue:"
"`45947`."
msgstr ""
"En liknande optimering fanns redan sedan Python 3.10. 3.11 specialiserar sig "
"för fler former. Dessutom bör alla attributladdningar snabbas upp av :issue:"
"`45947`."

#: ../../whatsnew/3.11.rst:1521
msgid "Misc"
msgstr "Övrigt"

#: ../../whatsnew/3.11.rst:1523
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. (Contributed "
"Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""
"Objekt kräver nu mindre minne tack vare att namnrymder för objekt skapas på "
"ett lättsamt sätt. Deras namnrymdsordböcker delar nu också nycklar mer "
"fritt. (Bidrag från Mark Shannon i :issue:`45340` och :issue:`40116`.)"

#: ../../whatsnew/3.11.rst:1527
msgid ""
"\"Zero-cost\" exceptions are implemented, eliminating the cost of :keyword:"
"`try` statements when no exception is raised. (Contributed by Mark Shannon "
"in :issue:`40222`.)"
msgstr ""
"\"Zero-cost\"-undantag implementeras, vilket eliminerar kostnaden för :"
"keyword:`try`\\-satser när inget undantag uppstår. (Bidrag från Mark Shannon "
"i :issue:`40222`.)"

#: ../../whatsnew/3.11.rst:1531
msgid ""
"A more concise representation of exceptions in the interpreter reduced the "
"time required for catching an exception by about 10%. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""
"En mer kortfattad representation av undantag i tolken minskade den tid som "
"krävs för att fånga ett undantag med cirka 10%. (Bidrag från Irit Katriel i :"
"issue:`45711`.)"

#: ../../whatsnew/3.11.rst:1535
msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on supported "
"platforms. As a result, Python 3.11 executes the `pyperformance regular "
"expression benchmarks <https://pyperformance.readthedocs.io/benchmarks."
"html#regex-dna>`_ up to 10% faster than Python 3.10. (Contributed by Brandt "
"Bucher in :gh:`91404`.)"
msgstr ""
":mod:`re`\\:s matchningsmotor för reguljära uttryck har delvis omarbetats "
"och använder nu beräknade gotos (eller \"trådad kod\") på plattformar som "
"stöds. Som ett resultat exekverar Python 3.11 `pyperformance regular "
"expression benchmarks <https://pyperformance.readthedocs.io/benchmarks."
"html#regex-dna>`_ upp till 10% faster än Python 3.10. (Bidrag från Brandt "
"Bucher i :gh:`91404`.)"

#: ../../whatsnew/3.11.rst:1546
msgid "FAQ"
msgstr "FAQ"

#: ../../whatsnew/3.11.rst:1551
msgid "How should I write my code to utilize these speedups?"
msgstr "Hur ska jag skriva min kod för att utnyttja dessa hastighetsökningar?"

#: ../../whatsnew/3.11.rst:1553
msgid ""
"Write Pythonic code that follows common best practices; you don't have to "
"change your code. The Faster CPython project optimizes for common code "
"patterns we observe."
msgstr ""
"Skriv Pythonic-kod som följer vanliga bästa praxis; du behöver inte ändra "
"din kod. Faster CPython-projektet optimerar för vanliga kodmönster som vi "
"observerar."

#: ../../whatsnew/3.11.rst:1561
msgid "Will CPython 3.11 use more memory?"
msgstr "Kommer CPython 3.11 att använda mer minne?"

#: ../../whatsnew/3.11.rst:1563
msgid ""
"Maybe not; we don't expect memory use to exceed 20% higher than 3.10. This "
"is offset by memory optimizations for frame objects and object dictionaries "
"as mentioned above."
msgstr ""
"Kanske inte; vi förväntar oss inte att minnesanvändningen kommer att "
"överstiga 20% hig mer än 3.10. Detta kompenseras av minnesoptimeringar för "
"ramobjekt och objektordböcker som nämnts ovan."

#: ../../whatsnew/3.11.rst:1571
msgid "I don't see any speedups in my workload. Why?"
msgstr ""
"Jag ser inte några hastighetsökningar i min arbetsbelastning. Varför inte?"

#: ../../whatsnew/3.11.rst:1573
msgid ""
"Certain code won't have noticeable benefits. If your code spends most of its "
"time on I/O operations, or already does most of its computation in a C "
"extension library like NumPy, there won't be significant speedups. This "
"project currently benefits pure-Python workloads the most."
msgstr ""
"Viss kod kommer inte att ha märkbara fördelar. Om din kod tillbringar större "
"delen av sin tid på I/O-operationer eller redan gör större delen av sin "
"beräkning i ett C-tilläggsbibliotek som NumPy, kommer det inte att finnas "
"några betydande hastigheter. Detta projekt gynnar för närvarande rena Python-"
"arbetsbelastningar mest."

#: ../../whatsnew/3.11.rst:1578
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within the "
"pyperformance benchmarks, certain benchmarks have slowed down slightly, "
"while others have sped up by nearly 2x!"
msgstr ""
"Siffrorna för pyperformance är dessutom ett geometriskt medelvärde. Även "
"inom pyperformance-riktmärkena har vissa riktmärken saktat ned något, medan "
"andra har snabbats upp med nästan 2x!"

#: ../../whatsnew/3.11.rst:1586
msgid "Is there a JIT compiler?"
msgstr "Finns det en JIT-kompilator?"

#: ../../whatsnew/3.11.rst:1588
msgid "No. We're still exploring other optimizations."
msgstr "Nej, vi undersöker fortfarande andra optimeringar."

#: ../../whatsnew/3.11.rst:1594
msgid "About"
msgstr "Om"

#: ../../whatsnew/3.11.rst:1596
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team is "
"funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also "
"funded by Bloomberg LP to work on the project part-time. Finally, many "
"contributors are volunteers from the community."
msgstr ""
"Faster CPython utforskar optimeringar för :term:`CPython`. Huvudteamet "
"finansieras av Microsoft för att arbeta med detta på heltid. Pablo Galindo "
"Salgado är också finansierad av Bloomberg LP för att arbeta med projektet på "
"deltid. Slutligen är många bidragsgivare frivilliga från gemenskapen."

#: ../../whatsnew/3.11.rst:1605
msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

#: ../../whatsnew/3.11.rst:1607
msgid ""
"The bytecode now contains inline cache entries, which take the form of the "
"newly-added :opcode:`CACHE` instructions. Many opcodes expect to be followed "
"by an exact number of caches, and instruct the interpreter to skip over them "
"at runtime. Populated caches can look like arbitrary instructions, so great "
"care should be taken when reading or modifying raw, adaptive bytecode "
"containing quickened data."
msgstr ""
"Bytekoden innehåller nu inline-cacheposter i form av de nytillkomna "
"instruktionerna :opcode:`CACHE`. Många opkoder förväntar sig att följas av "
"ett exakt antal cacher och instruerar tolken att hoppa över dem vid körning. "
"Fyllda cacher kan se ut som godtyckliga instruktioner, så stor försiktighet "
"bör iakttas när man läser eller modifierar rå, adaptiv bytecode som "
"innehåller quickened-data."

#: ../../whatsnew/3.11.rst:1619
msgid "New opcodes"
msgstr "Nya opkoder"

#: ../../whatsnew/3.11.rst:1621
msgid ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` and :opcode:`SEND`, "
"used in generators and co-routines."
msgstr ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` och :opcode:`SEND`, "
"används i generatorer och co-rutiner."

#: ../../whatsnew/3.11.rst:1624
msgid ""
":opcode:`COPY_FREE_VARS`, which avoids needing special caller-side code for "
"closures."
msgstr ""
":opcode:`COPY_FREE_VARS`, vilket gör att det inte behövs någon speciell kod "
"på anropssidan för closures."

#: ../../whatsnew/3.11.rst:1627
msgid ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, for use in certain loops where "
"handling interrupts is undesirable."
msgstr ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, för användning i vissa loopar där "
"hantering av avbrott inte är önskvärt."

#: ../../whatsnew/3.11.rst:1630
msgid ":opcode:`MAKE_CELL`, to create :ref:`cell-objects`."
msgstr ":opcode:`MAKE_CELL`, för att skapa :ref:`cell-objects`."

#: ../../whatsnew/3.11.rst:1632
msgid ""
":opcode:`CHECK_EG_MATCH`  and  :opcode:`!PREP_RERAISE_STAR`, to handle the :"
"ref:`new exception groups and except* <whatsnew311-pep654>` added in :pep:"
"`654`."
msgstr ""
":opcode:`CHECK_EG_MATCH` och :opcode:`!PREP_RERAISE_STAR`, för att hantera :"
"ref:`nya undantagsgrupper och except* <whatsnew311-pep654>` ` som lagts till "
"i :pep:`654`."

#: ../../whatsnew/3.11.rst:1636
msgid ":opcode:`PUSH_EXC_INFO`, for use in exception handlers."
msgstr ":opcode:`PUSH_EXC_INFO`, för användning i undantagshanterare."

#: ../../whatsnew/3.11.rst:1638
msgid ""
":opcode:`RESUME`, a no-op, for internal tracing, debugging and optimization "
"checks."
msgstr ""
":opcode:`RESUME`, en no-op, för intern spårning, felsökning och "
"optimeringskontroller."

#: ../../whatsnew/3.11.rst:1645
msgid "Replaced opcodes"
msgstr "Ersatta opkoder"

#: ../../whatsnew/3.11.rst:1648
msgid "Replaced Opcode(s)"
msgstr "Ersatt Opcode(s)"

#: ../../whatsnew/3.11.rst:1648
msgid "New Opcode(s)"
msgstr "Ny(a) operationskod(er)"

#: ../../whatsnew/3.11.rst:1648
msgid "Notes"
msgstr "Anteckningar"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!BINARY_*`"
msgstr ":opcode:`!BINARY_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!INPLACE_*`"
msgstr ":opcode:`!INPLACE_*`"

#: ../../whatsnew/3.11.rst:1650
msgid ":opcode:`BINARY_OP`"
msgstr ":opcode:`BINARY_OP`"

#: ../../whatsnew/3.11.rst:1650
msgid "Replaced all numeric binary/in-place opcodes with a single opcode"
msgstr ""
"Ersatte alla numeriska binära/in-place-operationskoder med en enda "
"operationskod"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION`"
msgstr ":opcode:`!CALL_FUNCTION`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION_KW`"
msgstr ":opcode:`!CALL_FUNCTION_KW`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_METHOD`"
msgstr ":opcode:`!CALL_METHOD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CALL`"
msgstr ":opcode:`CALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!KW_NAMES`"
msgstr ":opcode:`!KW_NAMES`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!PRECALL`"
msgstr ":opcode:`!PRECALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`PUSH_NULL`"
msgstr ":opcode:`PUSH_NULL`"

#: ../../whatsnew/3.11.rst:1653
msgid ""
"Decouples argument shifting for methods from handling of keyword arguments; "
"allows better specialization of calls"
msgstr ""
"Kopplar bort argumentväxling för metoder från hantering av "
"nyckelordsargument; möjliggör bättre specialisering av anrop"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP`"
msgstr ":opcode:`!DUP_TOP`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP_TWO`"
msgstr ":opcode:`!DUP_TOP_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_TWO`"
msgstr ":opcode:`!ROT_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_THREE`"
msgstr ":opcode:`!ROT_THREE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_FOUR`"
msgstr ":opcode:`!ROT_FOUR`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_N`"
msgstr ":opcode:`!ROT_N`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`COPY`"
msgstr ":opcode:`COPY`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`SWAP`"
msgstr ":opcode:`SWAP`"

#: ../../whatsnew/3.11.rst:1658
msgid "Stack manipulation instructions"
msgstr "Instruktioner för manipulering av stapeln"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"
msgstr ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CHECK_EXC_MATCH`"
msgstr ":opcode:`CHECK_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:1665
msgid "Now performs check but doesn't jump"
msgstr "Utför nu kontroll men hoppar inte"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_ABSOLUTE`"
msgstr ":opcode:`!JUMP_ABSOLUTE``"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_FALSE`"
msgstr ":opcode:`!POP_JUMP_IF_FALSE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_TRUE`"
msgstr ":opcode:`!POP_JUMP_IF_TRUE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`JUMP_BACKWARD`"
msgstr ":opcode:`JUMP_BACKWARD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_BACKWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_BACKWARD_IF_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_FORWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_FORWARD_IF_*`"

#: ../../whatsnew/3.11.rst:1667
msgid ""
"See [#bytecode-jump]_; ``TRUE``, ``FALSE``, ``NONE`` and ``NOT_NONE`` "
"variants for each direction"
msgstr ""
"Se [#bytecode-jump]_; varianterna ``TRUE``, ``FALSE``, ``NONE`` och "
"``NOT_NONE`` för varje riktning"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_WITH`"
msgstr ":opcode:`!SETUP_WITH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_ASYNC_WITH`"
msgstr ":opcode:`!SETUP_ASYNC_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":opcode:`!BEFORE_WITH`"
msgstr ":opcode:`!BEFORE_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":keyword:`with` block setup"
msgstr ":keyword:`with` blockuppsättning"

#: ../../whatsnew/3.11.rst:1677
msgid ""
"All jump opcodes are now relative, including the existing :opcode:`!"
"JUMP_IF_TRUE_OR_POP` and :opcode:`!JUMP_IF_FALSE_OR_POP`. The argument is "
"now an offset from the current instruction rather than an absolute location."
msgstr ""
"Alla opkoder för hopp är nu relativa, inklusive de befintliga :opcode:`!"
"JUMP_IF_TRUE_OR_POP` och :opcode:`!JUMP_IF_FALSE_OR_POP`. Argumentet är nu "
"en offset från den aktuella instruktionen snarare än en absolut plats."

#: ../../whatsnew/3.11.rst:1688
msgid "Changed/removed opcodes"
msgstr "Ändrade/ borttagna opkoder"

#: ../../whatsnew/3.11.rst:1690
msgid ""
"Changed :opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` to no longer push an "
"additional boolean value to indicate success/failure. Instead, ``None`` is "
"pushed on failure in place of the tuple of extracted values."
msgstr ""
"Ändrad :opcode:`MATCH_CLASS` och :opcode:`MATCH_KEYS` för att inte längre "
"skicka ett ytterligare booleskt värde för att indikera framgång/"
"misslyckande. Istället skickas ``None`` vid misslyckande i stället för "
"tupeln av extraherade värden."

#: ../../whatsnew/3.11.rst:1695
msgid ""
"Changed opcodes that work with exceptions to reflect them now being "
"represented as one item on the stack instead of three (see :gh:`89874`)."
msgstr ""
"Ändrade opkoder som arbetar med undantag för att återspegla att de nu "
"representeras som ett objekt på stacken istället för tre (se :gh:`89874`)."

#: ../../whatsnew/3.11.rst:1699
msgid ""
"Removed :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, :opcode:`!"
"POP_BLOCK`, :opcode:`!SETUP_FINALLY` and :opcode:`!YIELD_FROM`."
msgstr ""
"Tog bort :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, :opcode:`!"
"POP_BLOCK`, :opcode:`!SETUP_FINALLY` och :opcode:`!YIELD_FROM`."

#: ../../whatsnew/3.11.rst:1707 ../../whatsnew/3.11.rst:2580
msgid "Deprecated"
msgstr "Föråldrat"

#: ../../whatsnew/3.11.rst:1709
msgid ""
"This section lists Python APIs that have been deprecated in Python 3.11."
msgstr "I detta avsnitt listas Python API:er som har utgått i Python 3.11."

#: ../../whatsnew/3.11.rst:1711
msgid ""
"Deprecated C APIs are :ref:`listed separately <whatsnew311-c-api-"
"deprecated>`."
msgstr ""
"Föråldrade C API:er är :ref:`listade separat <whatsnew311-c-api-deprecated>`."

#: ../../whatsnew/3.11.rst:1718
msgid "Language/Builtins"
msgstr "Språk/Builtins"

#: ../../whatsnew/3.11.rst:1720
msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) is "
"now deprecated.  It can no longer be used to wrap other descriptors such as :"
"class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the :attr:`!__wrapped__` attribute that was added in Python "
"3.10. (Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"Chaining :class:`classmethod` descriptors (introducerad i :issue:`19072`) är "
"nu avförd.  Den kan inte längre användas för att omsluta andra deskriptorer "
"såsom :class:`property`.  Grunddesignen för denna funktion var bristfällig "
"och orsakade ett antal problem i efterhand.  För att \"pass-through\" en :"
"class:`classmethod`, överväg att använda attributet :attr:`!__wrapped__` som "
"lades till i Python 3.10. (Bidrag från Raymond Hettinger i :gh:`89519`.)"

#: ../../whatsnew/3.11.rst:1728
msgid ""
"Octal escapes in string and bytes literals with values larger than ``0o377`` "
"(255 in decimal) now produce a :exc:`DeprecationWarning`. In a future Python "
"version, they will raise a :exc:`SyntaxWarning` and eventually a :exc:"
"`SyntaxError`. (Contributed by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""
"Oktala escapes i sträng- och byteslitteraler med värden större än ``0o377`` "
"(255 i decimal) ger nu en :exc:`DeprecationWarning`. I en framtida Python-"
"version kommer de att ge upphov till en :exc:`SyntaxWarning` och så "
"småningom en :exc:`SyntaxError`. (Bidrag från Serhiy Storchaka i :gh:"
"`81548`.)"

#: ../../whatsnew/3.11.rst:1734
msgid ""
"The delegation of :func:`int` to :meth:`~object.__trunc__` is now "
"deprecated. Calling ``int(a)`` when ``type(a)`` implements :meth:`!"
"__trunc__` but not :meth:`~object.__int__` or :meth:`~object.__index__` now "
"raises a :exc:`DeprecationWarning`. (Contributed by Zackery Spytz in :issue:"
"`44977`.)"
msgstr ""
"Delegeringen av :func:`int` till :meth:`~object.__trunc__` är nu föråldrad. "
"Anrop av ``int(a)`` när ``type(a)`` implementerar :meth:`!__trunc__` men "
"inte :meth:`~object.__int__` eller :meth:`~object.__index__` ger nu upphov "
"till en :exc:`DeprecationWarning`. (Bidrag från Zackery Spytz i :issue:"
"`44977`.)"

#: ../../whatsnew/3.11.rst:1744
msgid "Modules"
msgstr "Moduler"

#: ../../whatsnew/3.11.rst:1748
msgid ""
":pep:`594` led to the deprecations of the following modules slated for "
"removal in Python 3.13:"
msgstr ":pep:`594` ledde till att följande moduler togs bort i Python 3.13:"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../whatsnew/3.11.rst:1761
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in :gh:"
"`68966`.)"
msgstr ""
"(Bidrag från Brett Cannon i :issue:`47061` och Victor Stinner i :gh:`68966`.)"

#: ../../whatsnew/3.11.rst:1764
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore` and  :mod:`!smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation "
"warnings have now been updated to note they will be removed in Python 3.12. "
"(Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""
"Modulerna :mod:`!asynchat`, :mod:`!asyncore` och :mod:`!smtpd` har varit "
"föråldrade sedan åtminstone Python 3.6. Deras dokumentation och varningar om "
"utfasning har nu uppdaterats för att notera att de kommer att tas bort i "
"Python 3.12. (Bidrag från Hugo van Kemenade i :issue:`47022`.)"

#: ../../whatsnew/3.11.rst:1769
msgid ""
"The :mod:`!lib2to3` package and ``2to3`` tool are now deprecated and may not "
"be able to parse Python 3.10 or newer. See :pep:`617`, introducing the new "
"PEG parser, for details. (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""
"Paketet :mod:`!lib2to3` och verktyget ``2to3`` är nu föråldrade och kanske "
"inte kan parsa Python 3.10 eller nyare. Se :pep:`617`, som introducerar den "
"nya PEG-parsern, för mer information. (Bidrag från Victor Stinner i :issue:"
"`40360`.)"

#: ../../whatsnew/3.11.rst:1774
msgid ""
"Undocumented modules :mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!"
"sre_parse` are now deprecated. (Contributed by Serhiy Storchaka in :issue:"
"`47152`.)"
msgstr ""
"De odokumenterade modulerna :mod:`!sre_compile`, :mod:`!sre_constants` och :"
"mod:`!sre_parse` är nu föråldrade. (Bidrag från Serhiy Storchaka i :issue:"
"`47152`.)"

#: ../../whatsnew/3.11.rst:1782
msgid "Standard Library"
msgstr "Standardbibliotek"

#: ../../whatsnew/3.11.rst:1784
msgid ""
"The following have been deprecated in :mod:`configparser` since Python 3.2. "
"Their deprecation warnings have now been updated to note they will be "
"removed in Python 3.12:"
msgstr ""
"Följande har utgått i :mod:`configparser` sedan Python 3.2. Deras varningar "
"om utfasning har nu uppdaterats för att notera att de kommer att tas bort i "
"Python 3.12:"

#: ../../whatsnew/3.11.rst:1788
msgid "the :class:`!configparser.SafeConfigParser` class"
msgstr "klassen :class:`!configparser.SafeConfigParser`"

#: ../../whatsnew/3.11.rst:1789
msgid "the :attr:`!configparser.ParsingError.filename` property"
msgstr "egenskapen :attr:`!configparser.ParsingError.filename`"

#: ../../whatsnew/3.11.rst:1790
msgid "the :meth:`!configparser.RawConfigParser.readfp` method"
msgstr ":meth:`!configparser.RawConfigParser.readfp`\\-metoden"

#: ../../whatsnew/3.11.rst:1792
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr "(Bidrag från Hugo van Kemenade i :issue:`45173`.)"

#: ../../whatsnew/3.11.rst:1794
msgid ""
":class:`!configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2, and is not listed in the :mod:`configparser` "
"documentation. It now emits a :exc:`DeprecationWarning` and will be removed "
"in Python 3.13. Use :class:`configparser.BasicInterpolation` or :class:"
"`configparser.ExtendedInterpolation` instead. (Contributed by Hugo van "
"Kemenade in :issue:`46607`.)"
msgstr ""
":class:`!configparser.LegacyInterpolation` har varit utfasad i "
"dokumentationen sedan Python 3.2, och är inte listad i :mod:`configparser` "
"dokumentationen. Den avger nu en :exc:`DeprecationWarning` och kommer att "
"tas bort i Python 3.13. Använd :class:`configparser.BasicInterpolation` "
"eller :class:`configparser.ExtendedInterpolation` istället. (Bidrag från "
"Hugo van Kemenade i :issue:`46607`.)"

#: ../../whatsnew/3.11.rst:1801
msgid ""
"The older set of :mod:`importlib.resources` functions were deprecated in "
"favor of the replacements added in Python 3.9 and will be removed in a "
"future Python version, due to not supporting resources located within "
"package subdirectories:"
msgstr ""
"Den äldre uppsättningen :mod:`importlib.resources`\\-funktioner utrangerades "
"till förmån för de ersättningar som lades till i Python 3.9 och kommer att "
"tas bort i en framtida Python-version, på grund av att de inte stöder "
"resurser som finns i paketunderkataloger:"

#: ../../whatsnew/3.11.rst:1806
msgid ":func:`!importlib.resources.contents`"
msgstr ":func:`!importlib.resources.contents`"

#: ../../whatsnew/3.11.rst:1807
msgid ":func:`!importlib.resources.is_resource`"
msgstr ":func:`!importlib.resources.is_resource`"

#: ../../whatsnew/3.11.rst:1808
msgid ":func:`!importlib.resources.open_binary`"
msgstr ":func:`!importlib.resources.open_binary`"

#: ../../whatsnew/3.11.rst:1809
msgid ":func:`!importlib.resources.open_text`"
msgstr ":func:`!importlib.resources.open_text`"

#: ../../whatsnew/3.11.rst:1810
msgid ":func:`!importlib.resources.read_binary`"
msgstr ":func:`!importlib.resources.read_binary`"

#: ../../whatsnew/3.11.rst:1811
msgid ":func:`!importlib.resources.read_text`"
msgstr ":func:`!importlib.resources.read_text`"

#: ../../whatsnew/3.11.rst:1812
msgid ":func:`!importlib.resources.path`"
msgstr ":func:`!importlib.resources.path`"

#: ../../whatsnew/3.11.rst:1814
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.15. Use :func:`locale.setlocale`, :func:`locale."
"getpreferredencoding(False) <locale.getpreferredencoding>` and :func:`locale."
"getlocale` functions instead. (Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Funktionen :func:`locale.getdefaultlocale` är föråldrad och kommer att tas "
"bort i Python 3.15. Använd istället funktionerna :func:`locale.setlocale`, :"
"func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` och :"
"func:`locale.getlocale`. (Bidrag från Victor Stinner i :gh:`90817`.)"

#: ../../whatsnew/3.11.rst:1820
msgid ""
"The :func:`!locale.resetlocale` function is deprecated and will be removed "
"in Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
"Funktionen :func:`!locale.resetlocale` är föråldrad och kommer att tas bort "
"i Python 3.13. Använd ``locale.setlocale(locale.LC_ALL, \"\")`` istället. "
"(Bidrag från Victor Stinner i :gh:`90817`.)"

#: ../../whatsnew/3.11.rst:1824
msgid ""
"Stricter rules will now be applied for numerical group references and group "
"names in :ref:`regular expressions <re-syntax>`. Only sequences of ASCII "
"digits will now be accepted as a numerical reference, and the group name in :"
"class:`bytes` patterns and replacement strings can only contain ASCII "
"letters, digits and underscores. For now, a deprecation warning is raised "
"for syntax violating these rules. (Contributed by Serhiy Storchaka in :gh:"
"`91760`.)"
msgstr ""
"Strängare regler kommer nu att tillämpas för numeriska gruppreferenser och "
"gruppnamn i :ref:`regular expressions <re-syntax>`. Endast sekvenser av "
"ASCII-siffror accepteras nu som en numerisk referens, och gruppnamnet i :"
"class:`bytes`\\-mönster och ersättningssträngar får endast innehålla ASCII-"
"bokstäver, siffror och understreck. För närvarande utfärdas en varning för "
"syntax som bryter mot dessa regler. (Bidrag från Serhiy Storchaka i :gh:"
"`91760`.)"

#: ../../whatsnew/3.11.rst:1832
msgid ""
"In the :mod:`re` module, the :func:`!re.template` function and the "
"corresponding :const:`!re.TEMPLATE` and :const:`!re.T` flags are deprecated, "
"as they were undocumented and lacked an obvious purpose. They will be "
"removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro Hrončok "
"in :gh:`92728`.)"
msgstr ""
"I modulen :mod:`re` är funktionen :func:`!re.template` och motsvarande "
"flaggor :const:`!re.TEMPLATE` och :const:`!re.T` avförda, eftersom de var "
"odokumenterade och saknade ett uppenbart syfte. De kommer att tas bort i "
"Python 3.13. (Bidrag från Serhiy Storchaka och Miro Hrončok i :gh:`92728`.)"

#: ../../whatsnew/3.11.rst:1838
msgid ""
":func:`!turtle.settiltangle` has been deprecated since Python 3.1; it now "
"emits a deprecation warning and will be removed in Python 3.13. Use :func:"
"`turtle.tiltangle` instead (it was earlier incorrectly marked as deprecated, "
"and its docstring is now corrected). (Contributed by Hugo van Kemenade in :"
"issue:`45837`.)"
msgstr ""
":func:`!turtle.settiltangle` har varit föråldrad sedan Python 3.1; den avger "
"nu en föråldringsvarning och kommer att tas bort i Python 3.13. Använd :func:"
"`turtle.tiltangle` istället (det var tidigare felaktigt markerat som "
"föråldrat, och dess docstring är nu korrigerad). (Bidrag från Hugo van "
"Kemenade i :issue:`45837`.)"

#: ../../whatsnew/3.11.rst:1844
msgid ""
":class:`typing.Text`, which exists solely to provide compatibility support "
"between Python 2 and Python 3 code, is now deprecated. Its removal is "
"currently unplanned, but users are encouraged to use :class:`str` instead "
"wherever possible. (Contributed by Alex Waygood in :gh:`92332`.)"
msgstr ""
":class:`typing.Text`, som existerar enbart för att ge kompatibilitetsstöd "
"mellan Python 2 och Python 3-kod, är nu föråldrad. Dess borttagning är för "
"närvarande inte planerad, men användare uppmuntras att använda :class:`str` "
"istället när det är möjligt. (Bidrag från Alex Waygood i :gh:`92332`.)"

#: ../../whatsnew/3.11.rst:1850
msgid ""
"The keyword argument syntax for constructing :data:`typing.TypedDict` types "
"is now deprecated. Support will be removed in Python 3.13. (Contributed by "
"Jingchen Ye in :gh:`90224`.)"
msgstr ""
"Syntaxen för nyckelordsargument för konstruktion av :data:`typing."
"TypedDict`\\-typer är nu föråldrad. Stödet kommer att tas bort i Python "
"3.13. (Bidrag från Jingchen Ye i :gh:`90224`.)"

#: ../../whatsnew/3.11.rst:1854
msgid ""
":class:`!webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested, undocumented, and not used by :mod:`webbrowser` "
"itself. (Contributed by Donghee Na in :issue:`42255`.)"
msgstr ""
":class:`!webbrowser.MacOSX` är föråldrad och kommer att tas bort i Python "
"3.13. Den är otestad, odokumenterad och används inte av :mod:`webbrowser` "
"själv. (Bidrag från Donghee Na i :issue:`42255`.)"

#: ../../whatsnew/3.11.rst:1858
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and :"
"class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value) is now deprecated."
msgstr ""
"Beteendet att returnera ett värde från testmetoderna :class:`~unittest."
"TestCase` och :class:`~unittest.IsolatedAsyncioTestCase` (annat än "
"standardvärdet ``None``) är nu föråldrat."

#: ../../whatsnew/3.11.rst:1862
msgid ""
"Deprecated the following not-formally-documented :mod:`unittest` functions, "
"scheduled for removal in Python 3.13:"
msgstr ""
"Följande icke-formellt dokumenterade :mod:`unittest`\\-funktioner har utgått "
"och kommer att tas bort i Python 3.13:"

#: ../../whatsnew/3.11.rst:1865
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.11.rst:1866
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.11.rst:1867
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1869
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "Använd istället :class:`~unittest.TestLoader`\\-metoder:"

#: ../../whatsnew/3.11.rst:1871
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.11.rst:1872
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.11.rst:1873
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1875
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr "(Bidrag från Erlend E. Aasland i :issue:`5846`.)"

#: ../../whatsnew/3.11.rst:1877
msgid ""
":meth:`!unittest.TestProgram.usageExit` is marked deprecated, to be removed "
"in 3.13. (Contributed by Carlos Damázio in :gh:`67048`.)"
msgstr ""
":meth:`!unittest.TestProgram.usageExit` är markerad som föråldrad och kommer "
"att tas bort i 3.13. (Bidrag från Carlos Damázio i :gh:`67048`.)"

#: ../../whatsnew/3.11.rst:1886 ../../whatsnew/3.11.rst:2608
msgid "Pending Removal in Python 3.12"
msgstr "Väntar på borttagning i Python 3.12"

#: ../../whatsnew/3.11.rst:1888
msgid ""
"The following Python APIs have been deprecated in earlier Python releases, "
"and will be removed in Python 3.12."
msgstr ""
"Följande Python API:er har utgått i tidigare Python-utgåvor och kommer att "
"tas bort i Python 3.12."

#: ../../whatsnew/3.11.rst:1891
msgid ""
"C APIs pending removal are :ref:`listed separately <whatsnew311-c-api-"
"pending-removal>`."
msgstr ""
"C API:er som väntar på att tas bort är :ref:`listade separat <whatsnew311-c-"
"api-pending-removal>`."

#: ../../whatsnew/3.11.rst:1894
msgid "The :mod:`!asynchat` module"
msgstr "Modulen :mod:`!asynchat`"

#: ../../whatsnew/3.11.rst:1895
msgid "The :mod:`!asyncore` module"
msgstr "Modulen :mod:`!asyncore`"

#: ../../whatsnew/3.11.rst:1896
msgid "The :ref:`entire distutils package <distutils-deprecated>`"
msgstr "Paketet :ref:`entire distutils <distutils-deprecated>`"

#: ../../whatsnew/3.11.rst:1897
msgid "The :mod:`!imp` module"
msgstr "Modulen :mod:`!imp`"

#: ../../whatsnew/3.11.rst:1898
msgid "The :class:`typing.io <typing.IO>` namespace"
msgstr "Namnrymden :class:`typing.io <typing.IO>`"

#: ../../whatsnew/3.11.rst:1899
msgid "The :class:`typing.re <typing.Pattern>` namespace"
msgstr "Namnrymden :class:`typing.re <typing.Pattern>`"

#: ../../whatsnew/3.11.rst:1900
msgid ":func:`!cgi.log`"
msgstr ":func:`!cgi.log`"

#: ../../whatsnew/3.11.rst:1901
msgid ":func:`!importlib.find_loader`"
msgstr ":func:`!importlib.find_loader`"

#: ../../whatsnew/3.11.rst:1902
msgid ":meth:`!importlib.abc.Loader.module_repr`"
msgstr ":meth:`!importlib.abc.Loader.module_repr`"

#: ../../whatsnew/3.11.rst:1903
msgid ":meth:`!importlib.abc.MetaPathFinder.find_module`"
msgstr ":meth:`!importlib.abc.MetaPathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1904
msgid ":meth:`!importlib.abc.PathEntryFinder.find_loader`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1905
msgid ":meth:`!importlib.abc.PathEntryFinder.find_module`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1906
msgid ":meth:`!importlib.machinery.BuiltinImporter.find_module`"
msgstr ":meth:`!importlib.machinery.BuiltinImporter.find_module`"

#: ../../whatsnew/3.11.rst:1907
msgid ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1908
msgid ":meth:`!importlib.machinery.FileFinder.find_loader`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1909
msgid ":meth:`!importlib.machinery.FileFinder.find_module`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_module`"

#: ../../whatsnew/3.11.rst:1910
msgid ":meth:`!importlib.machinery.FrozenImporter.find_module`"
msgstr ":meth:`!importlib.machinery.FrozenImporter.find_module`"

#: ../../whatsnew/3.11.rst:1911
msgid ":meth:`!importlib.machinery.FrozenLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.FrozenLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1912
msgid ":meth:`!importlib.machinery.PathFinder.find_module`"
msgstr ":meth:`!importlib.machinery.PathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1913
msgid ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1914
msgid ":func:`!importlib.util.module_for_loader`"
msgstr ":func:`!importlib.util.module_for_loader`"

#: ../../whatsnew/3.11.rst:1915
msgid ":func:`!importlib.util.set_loader_wrapper`"
msgstr ":func:`!importlib.util.set_loader_wrapper`"

#: ../../whatsnew/3.11.rst:1916
msgid ":func:`!importlib.util.set_package_wrapper`"
msgstr ":func:`!importlib.util.set_package_wrapper`"

#: ../../whatsnew/3.11.rst:1917
msgid ":class:`!pkgutil.ImpImporter`"
msgstr ":class:`!pkgutil.ImpImporter`"

#: ../../whatsnew/3.11.rst:1918
msgid ":class:`!pkgutil.ImpLoader`"
msgstr ":class:`!pkgutil.ImpLoader`"

#: ../../whatsnew/3.11.rst:1919
msgid ":meth:`!pathlib.Path.link_to`"
msgstr ":meth:`!pathlib.Path.link_to`"

#: ../../whatsnew/3.11.rst:1920
msgid ":func:`!sqlite3.enable_shared_cache`"
msgstr ":func:`!sqlite3.enable_shared_cache`"

#: ../../whatsnew/3.11.rst:1921
msgid ":func:`!sqlite3.OptimizedUnicode`"
msgstr ":func:`!sqlite3.OptimizedUnicode`"

#: ../../whatsnew/3.11.rst:1922
msgid ":envvar:`!PYTHONTHREADDEBUG` environment variable"
msgstr ":envvar:`!PYTHONTHREADDEBUG` miljövariabel"

#: ../../whatsnew/3.11.rst:1923
msgid "The following deprecated aliases in :mod:`unittest`:"
msgstr "Följande föråldrade alias i :mod:`unittest`:"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated alias"
msgstr "Föråldrat alias"

#: ../../whatsnew/3.11.rst:1926
msgid "Method Name"
msgstr "Metod Namn"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated in"
msgstr "Avskrivna i"

#: ../../whatsnew/3.11.rst:1928
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1935
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1929
#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1931
#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1933
#: ../../whatsnew/3.11.rst:1934
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.11.rst:1929
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.11.rst:1929
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.11.rst:1930
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1936
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.11.rst:1931
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.11.rst:1931 ../../whatsnew/3.11.rst:1937
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.11.rst:1932
msgid "``failUnlessAlmostEqual``"
msgstr "\"misslyckas utan undantag nästan lika"

#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1938
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.11.rst:1933
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.11.rst:1933 ../../whatsnew/3.11.rst:1939
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.11.rst:1934
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.11.rst:1934
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.11.rst:1935
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.11.rst:1935 ../../whatsnew/3.11.rst:1936
#: ../../whatsnew/3.11.rst:1937 ../../whatsnew/3.11.rst:1938
#: ../../whatsnew/3.11.rst:1939 ../../whatsnew/3.11.rst:1940
#: ../../whatsnew/3.11.rst:1941
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.11.rst:1936
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.11.rst:1937
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.11.rst:1938
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.11.rst:1939
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.11.rst:1940
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.11.rst:1940
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.11.rst:1941
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.11.rst:1941
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.11.rst:1942
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.11.rst:1949 ../../whatsnew/3.11.rst:2634
msgid "Removed"
msgstr "Borttagen"

#: ../../whatsnew/3.11.rst:1951
msgid "This section lists Python APIs that have been removed in Python 3.11."
msgstr ""
"I detta avsnitt listas Python API:er som har tagits bort i Python 3.11."

#: ../../whatsnew/3.11.rst:1953
msgid ""
"Removed C APIs are :ref:`listed separately <whatsnew311-c-api-removed>`."
msgstr ""
"Borttagna C API:er är :ref:`listade separat <whatsnew311-c-api-removed>`."

#: ../../whatsnew/3.11.rst:1955
msgid ""
"Removed the :func:`!@asyncio.coroutine` :term:`decorator` enabling legacy "
"generator-based coroutines to be compatible with :keyword:`async` / :keyword:"
"`await` code. The function has been deprecated since Python 3.8 and the "
"removal was initially scheduled for Python 3.10. Use :keyword:`async def` "
"instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""
"Tog bort :func:`!@asyncio.coroutine` :term:`decorator` som gör det möjligt "
"för äldre generatorbaserade coroutines att vara kompatibla med :keyword:"
"`async` / :keyword:`await`\\-kod. Funktionen har varit föråldrad sedan "
"Python 3.8 och borttagningen var ursprungligen planerad till Python 3.10. "
"Använd :keyword:`async def` istället. (Bidrag från Illia Volochii i :issue:"
"`43216`.)"

#: ../../whatsnew/3.11.rst:1962
msgid ""
"Removed :class:`!asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by Illia "
"Volochii in :issue:`43216`.)"
msgstr ""
"Tog bort :class:`!asyncio.coroutines.CoroWrapper` som används för att "
"paketera äldre generatorbaserade coroutine-objekt i felsökningsläget. "
"(Bidrag från Illia Volochii i :issue:`43216`.)"

#: ../../whatsnew/3.11.rst:1966
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is now "
"entirely removed. This is because of the behavior of the socket option "
"``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in :issue:"
"`45129`.)"
msgstr ""
"På grund av betydande säkerhetsproblem är parametern *reuse_address* i :meth:"
"`asyncio.loop.create_datagram_endpoint`, som inaktiverades i Python 3.9, nu "
"helt borttagen. Detta beror på beteendet hos socket-alternativet "
"``SO_REUSEADDR`` i UDP. (Bidrag från Hugo van Kemenade i :issue:`45129`.)"

#: ../../whatsnew/3.11.rst:1972
msgid ""
"Removed the :mod:`!binhex` module, deprecated in Python 3.9. Also removed "
"the related, similarly-deprecated :mod:`binascii` functions:"
msgstr ""
"Tog bort modulen :mod:`!binhex`, föråldrad i Python 3.9. Tog även bort de "
"relaterade, likaledes föråldrade :mod:`binascii`\\-funktionerna:"

#: ../../whatsnew/3.11.rst:1975
msgid ":func:`!binascii.a2b_hqx`"
msgstr ":func:`!binascii.a2b_hqx`"

#: ../../whatsnew/3.11.rst:1976
msgid ":func:`!binascii.b2a_hqx`"
msgstr ":func:`!binascii.b2a_hqx`"

#: ../../whatsnew/3.11.rst:1977
msgid ":func:`!binascii.rlecode_hqx`"
msgstr ":func:`!binascii.rlecode_hqx`"

#: ../../whatsnew/3.11.rst:1978
msgid ":func:`!binascii.rldecode_hqx`"
msgstr ":func:`!binascii.rldecode_hqx`"

#: ../../whatsnew/3.11.rst:1980
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr "Funktionen :func:`binascii.crc_hqx` är fortfarande tillgänglig."

#: ../../whatsnew/3.11.rst:1982
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`45085`.)"

#: ../../whatsnew/3.11.rst:1984
msgid ""
"Removed the :mod:`!distutils` ``bdist_msi`` command deprecated in Python "
"3.9. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo van "
"Kemenade in :issue:`45124`.)"
msgstr ""
"Tog bort kommandot :mod:`!distutils` ``bdist_msi`` som är föråldrat i Python "
"3.9. Använd ``bdist_wheel`` (wheel-paket) istället. (Bidrag från Hugo van "
"Kemenade i :issue:`45124`.)"

#: ../../whatsnew/3.11.rst:1988
msgid ""
"Removed the :meth:`~object.__getitem__` methods of :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` and :class:`fileinput."
"FileInput`, deprecated since Python 3.9. (Contributed by Hugo van Kemenade "
"in :issue:`45132`.)"
msgstr ""
"Tog bort :meth:`~object.__getitem__`\\-metoderna för :class:`xml.dom.pulldom."
"DOMEventStream`, :class:`wsgiref.util.FileWrapper` och :class:`fileinput."
"FileInput`, föråldrade sedan Python 3.9. (Bidrag från Hugo van Kemenade i :"
"issue:`45132`.)"

#: ../../whatsnew/3.11.rst:1993
msgid ""
"Removed the deprecated :mod:`gettext` functions :func:`!lgettext`, :func:`!"
"ldgettext`, :func:`!lngettext` and :func:`!ldngettext`. Also removed the :"
"func:`!bind_textdomain_codeset` function, the :meth:`!NullTranslations."
"output_charset` and :meth:`!NullTranslations.set_output_charset` methods, "
"and the *codeset* parameter of :func:`!translation` and :func:`!install`, "
"since they are only used for the :func:`!l*gettext` functions. (Contributed "
"by Donghee Na and Serhiy Storchaka in :issue:`44235`.)"
msgstr ""
"Tog bort de föråldrade :mod:`gettext`\\-funktionerna :func:`!lgettext`, :"
"func:`!ldgettext`, :func:`!lngettext` och :func:`!ldngettext`. Tog även bort "
"funktionen :func:`!bind_textdomain_codeset`, metoderna :meth:`!"
"NullTranslations.output_charset` och :meth:`!NullTranslations."
"set_output_charset`, samt parametern *codeset* i :func:`!translation` och :"
"func:`!install`, eftersom de endast används för funktionerna :func:`!"
"l*gettext`. (Bidrag från Donghee Na och Serhiy Storchaka i :issue:`44235`.)"

#: ../../whatsnew/3.11.rst:2003
msgid "Removed from the :mod:`inspect` module:"
msgstr "Borttagen från modulen :mod:`inspect`:"

#: ../../whatsnew/3.11.rst:2005
msgid ""
"The :func:`!getargspec` function, deprecated since Python 3.0; use :func:"
"`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""
"Funktionen :func:`!getargspec`, föråldrad sedan Python 3.0; använd :func:"
"`inspect.signature` eller :func:`inspect.getfullargspec` istället."

#: ../../whatsnew/3.11.rst:2008
msgid ""
"The :func:`!formatargspec` function, deprecated since Python 3.5; use the :"
"func:`inspect.signature` function or the :class:`inspect.Signature` object "
"directly."
msgstr ""
"Funktionen :func:`!formatargspec`, föråldrad sedan Python 3.5; använd "
"funktionen :func:`inspect.signature` eller objektet :class:`inspect."
"Signature` direkt."

#: ../../whatsnew/3.11.rst:2012
msgid ""
"The undocumented :meth:`!Signature.from_builtin` and :meth:`!Signature."
"from_function` methods, deprecated since Python 3.5; use the :meth:"
"`Signature.from_callable() <inspect.Signature.from_callable>` method instead."
msgstr ""
"De odokumenterade metoderna :meth:`!Signature.from_builtin` och :meth:`!"
"Signature.from_function`, föråldrade sedan Python 3.5; använd istället "
"metoden :meth:`Signature.from_callable() <inspect.Signature.from_callable>`."

#: ../../whatsnew/3.11.rst:2017
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr "(Bidrag från Hugo van Kemenade i :issue:`45320`.)"

#: ../../whatsnew/3.11.rst:2019
msgid ""
"Removed the :meth:`~object.__class_getitem__` method from :class:`pathlib."
"PurePath`, because it was not used and added by mistake in previous "
"versions. (Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""
"Tog bort metoden :meth:`~object.__class_getitem__` från :class:`pathlib."
"PurePath`, eftersom den inte användes och lades till av misstag i tidigare "
"versioner. (Bidrag från Nikita Sobolev i :issue:`46483`.)"

#: ../../whatsnew/3.11.rst:2024
msgid ""
"Removed the :class:`!MailmanProxy` class in the :mod:`!smtpd` module, as it "
"is unusable without the external :mod:`!mailman` package. (Contributed by "
"Donghee Na in :issue:`35800`.)"
msgstr ""
"Tog bort klassen :class:`!MailmanProxy` i modulen :mod:`!smtpd`, eftersom "
"den är oanvändbar utan det externa paketet :mod:`!mailman`. (Bidrag från "
"Donghee Na i :issue:`35800`.)"

#: ../../whatsnew/3.11.rst:2028
msgid ""
"Removed the deprecated :meth:`!split` method of :class:`!_tkinter."
"TkappType`. (Contributed by Erlend E. Aasland in :issue:`38371`.)"
msgstr ""
"Tog bort den föråldrade :meth:`!split`\\-metoden i :class:`!_tkinter."
"TkappType`. (Bidrag från Erlend E. Aasland i :issue:`38371`.)"

#: ../../whatsnew/3.11.rst:2031
msgid ""
"Removed namespace package support from :mod:`unittest` discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. (Contributed "
"by Inada Naoki in :issue:`23882`.)"
msgstr ""
"Tog bort stöd för namnrymdspaket från :mod:`unittest`\\-upptäckt. Det "
"introducerades i Python 3.4 men har varit trasigt sedan Python 3.7. (Bidrag "
"från Inada Naoki i :issue:`23882`.)"

#: ../../whatsnew/3.11.rst:2035
msgid ""
"Removed the undocumented private :meth:`!float.__set_format__` method, "
"previously known as :meth:`!float.__setformat__` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists "
"mainly to be used in Python's test suite.\" (Contributed by Victor Stinner "
"in :issue:`46852`.)"
msgstr ""
"Tog bort den odokumenterade privata metoden :meth:`!float.__set_format__`, "
"tidigare känd som :meth:`!float.__setformat__` i Python 3.7. Dess docstring "
"sa: \"Du vill förmodligen inte använda den här funktionen. Den existerar "
"främst för att användas i Pythons testsvit.\" (Bidrag från Victor Stinner i :"
"issue:`46852`.)"

#: ../../whatsnew/3.11.rst:2041
msgid ""
"The :option:`!--experimental-isolated-subinterpreters` configure flag (and "
"corresponding :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` macro) have "
"been removed."
msgstr ""
"Konfigurationsflaggan :option:`!--experimental-isolated-subinterpreters` "
"(och motsvarande makro :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS`) "
"har tagits bort."

#: ../../whatsnew/3.11.rst:2045
msgid ""
":pypi:`Pynche` --- The Pythonically Natural Color and Hue Editor --- has "
"been moved out of ``Tools/scripts`` and is `being developed independently "
"<https://gitlab.com/warsaw/pynche/-/tree/main>`_ from the Python source tree."
msgstr ""
":pypi:`Pynche` --- The Pythonically Natural Color and Hue Editor --- har "
"flyttats från ``Tools/scripts`` och `utvecklas nu oberoende <https://gitlab."
"com/warsaw/pynche/-/tree/main>`_ från Pythons källkodsträd."

#: ../../whatsnew/3.11.rst:2055 ../../whatsnew/3.11.rst:2277
msgid "Porting to Python 3.11"
msgstr "Portning till Python 3.11"

#: ../../whatsnew/3.11.rst:2057
msgid ""
"This section lists previously described changes and other bugfixes in the "
"Python API that may require changes to your Python code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"i Python API som kan kräva ändringar i din Python-kod."

#: ../../whatsnew/3.11.rst:2060
msgid ""
"Porting notes for the C API are :ref:`listed separately <whatsnew311-c-api-"
"porting>`."
msgstr ""
"Anteckningar om portning av C API finns :ref:`listade separat <whatsnew311-c-"
"api-porting>`."

#: ../../whatsnew/3.11.rst:2063
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and :class:`fileinput."
"FileInput` no longer accept ``'U'`` (\"universal newline\") in the file "
"mode. In Python 3, \"universal newline\" mode is used by default whenever a "
"file is opened in text mode, and the ``'U'`` flag has been deprecated since "
"Python 3.3. The :ref:`newline parameter <open-newline-parameter>` to these "
"functions controls how universal newlines work. (Contributed by Victor "
"Stinner in :issue:`37330`.)"
msgstr ""
":func:`open`, :func:`io.open`, :func:`codecs.open` och :class:`fileinput."
"FileInput` accepterar inte längre ``'U'`` (\"universal newline\") i "
"filläget. I Python 3 används \"universal newline\"-läget som standard när en "
"fil öppnas i textläge, och flaggan ``'U'`` har utgått sedan Python 3.3. "
"Parametern :ref:`newline <open-newline-parameter>` till dessa funktioner "
"kontrollerar hur universella nya rader fungerar. (Bidrag från Victor Stinner "
"i :issue:`37330`.)"

#: ../../whatsnew/3.11.rst:2072
msgid ""
":class:`ast.AST` node positions are now validated when provided to :func:"
"`compile` and other related functions. If invalid positions are detected, a :"
"exc:`ValueError` will be raised. (Contributed by Pablo Galindo in :gh:"
"`93351`)"
msgstr ""
":class:`ast.AST` nodpositioner valideras nu när de anges till :func:"
"`compile` och andra relaterade funktioner. Om ogiltiga positioner upptäcks "
"kommer ett :exc:`ValueError` att visas. (Bidrag från Pablo Galindo i :gh:"
"`93351`)"

#: ../../whatsnew/3.11.rst:2076
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`asyncio.loop.set_default_executor` following a "
"deprecation in Python 3.8. (Contributed by Illia Volochii in :issue:`43234`.)"
msgstr ""
"Förbjöd att skicka non-:class:`concurrent.futures.ThreadPoolExecutor`\\-"
"exekutorer till :meth:`asyncio.loop.set_default_executor` efter en "
"deprecation i Python 3.8. (Bidrag från Illia Volochii i :issue:`43234`.)"

#: ../../whatsnew/3.11.rst:2081
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and :class:"
"`calendar.LocaleHTMLCalendar` classes now use :func:`locale.getlocale`, "
"instead of using :func:`locale.getdefaultlocale`, if no locale is specified. "
"(Contributed by Victor Stinner in :issue:`46659`.)"
msgstr ""
":mod:`calendar`: Klasserna :class:`calendar.LocaleTextCalendar` och :class:"
"`calendar.LocaleHTMLCalendar` använder nu :func:`locale.getlocale`, istället "
"för att använda :func:`locale.getdefaultlocale`, om ingen locale är "
"specificerad. (Bidrag från Victor Stinner i :issue:`46659`.)"

#: ../../whatsnew/3.11.rst:2087
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file with "
"the ``'UTF-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy (శ్రీనివాస్  "
"రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""
"Modulen :mod:`pdb` läser nu konfigurationsfilen :file:`.pdbrc` med kodningen "
"``'UTF-8'``. (Bidrag från Srinivas Reddy Thatiparthy (శ్రీనివాస్ రెడ్డి తాటిపర్తి) i :"
"issue:`41137`.)"

#: ../../whatsnew/3.11.rst:2091
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence, and "
"automatic conversion of :class:`set`\\s to :class:`list`\\s is no longer "
"supported. Also, if the sample size is larger than the population size, a :"
"exc:`ValueError` is raised. (Contributed by Raymond Hettinger in :issue:"
"`40465`.)"
msgstr ""
"Parametern *population* i :func:`random.sample` måste vara en sekvens, och "
"automatisk konvertering av :class:`set` till :class:`list` stöds inte "
"längre. Om urvalsstorleken är större än populationsstorleken uppstår "
"dessutom ett :exc:`ValueError`. (Bidrag från Raymond Hettinger i :issue:"
"`40465`.)"

#: ../../whatsnew/3.11.rst:2097
msgid ""
"The *random* optional parameter of :func:`random.shuffle` was removed. It "
"was previously an arbitrary random function to use for the shuffle; now, :"
"func:`random.random` (its previous default) will always be used."
msgstr ""
"Den valfria parametern *random* i :func:`random.shuffle` togs bort. Tidigare "
"var det en godtycklig slumpfunktion som användes för blandningen; nu kommer :"
"func:`random.random` (dess tidigare standard) alltid att användas."

#: ../../whatsnew/3.11.rst:2101
msgid ""
"In :mod:`re` :ref:`re-syntax`, global inline flags (e.g. ``(?i)``) can now "
"only be used at the start of regular expressions. Using them elsewhere has "
"been deprecated since Python 3.6. (Contributed by Serhiy Storchaka in :issue:"
"`47066`.)"
msgstr ""
"I :mod:`re` :ref:`re-syntax` kan globala inline-flaggor (t.ex. ``(?i)``) nu "
"bara användas i början av reguljära uttryck. Att använda dem på andra "
"ställen har varit förbjudet sedan Python 3.6. (Bidrag från Serhiy Storchaka "
"i :issue:`47066`.)"

#: ../../whatsnew/3.11.rst:2106
msgid ""
"In the :mod:`re` module, several long-standing bugs where fixed that, in "
"rare cases, could cause capture groups to get the wrong result. Therefore, "
"this could change the captured output in these cases. (Contributed by Ma Lin "
"in :issue:`35859`.)"
msgstr ""
"I modulen :mod:`re` har flera gamla buggar åtgärdats som i sällsynta fall "
"kunde leda till att fångstgrupper fick fel resultat. Därför kan detta ändra "
"den fångade utdata i dessa fall. (Bidrag från Ma Lin i :issue:`35859`.)"

#: ../../whatsnew/3.11.rst:2115
msgid "Build Changes"
msgstr "Förändringar i byggning"

#: ../../whatsnew/3.11.rst:2117
msgid ""
"CPython now has :pep:`11` :pep:`Tier 3 support <11#tier-3>` for cross "
"compiling to the `WebAssembly <https://webassembly.org/>`_ platforms "
"`Emscripten <https://emscripten.org/>`_ (``wasm32-unknown-emscripten``, i.e. "
"Python in the browser) and `WebAssembly System Interface (WASI) <https://"
"wasi.dev/>`_ (``wasm32-unknown-wasi``). The effort is inspired by previous "
"work like `Pyodide <https://pyodide.org/>`_. These platforms provide a "
"limited subset of POSIX APIs; Python standard libraries features and modules "
"related to networking, processes, threading, signals, mmap, and users/groups "
"are not available or don't work. (Emscripten contributed by Christian Heimes "
"and Ethan Smith in :gh:`84461` and WASI contributed by Christian Heimes in :"
"gh:`90473`; platforms promoted in :gh:`95085`)"
msgstr ""
"CPython har nu :pep:`11` :pep:`Tier 3 support <11#tier-3>` för "
"korskompilering till `WebAssembly <https://webassembly.org/>`_ plattformarna "
"`Emscripten <https://emscripten.org/>`_ (``wasm32-unknown-emscripten``, dvs "
"Python i webbläsaren) och `WebAssembly System Interface (WASI) <https://wasi."
"dev/>`_ (``wasm32-unknown-wasi``). Ansträngningen är inspirerad av tidigare "
"arbete som `Pyodide <https://pyodide.org/>`_. Dessa plattformar "
"tillhandahåller en begränsad delmängd av POSIX API:er; Pythons "
"standardbiblioteksfunktioner och moduler relaterade till nätverk, processer, "
"trådning, signaler, mmap och användare/grupper är inte tillgängliga eller "
"fungerar inte. (Emscripten bidragit med av Christian Heimes och Ethan Smith "
"i :gh:`84461` och WASI bidragit med av Christian Heimes i :gh:`90473`; "
"plattformar marknadsförda i :gh:`95085`)"

#: ../../whatsnew/3.11.rst:2131
msgid "Building CPython now requires:"
msgstr "Att bygga CPython kräver nu:"

#: ../../whatsnew/3.11.rst:2133
msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler and standard library. "
"`Optional C11 features <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ are not required. "
"(Contributed by Victor Stinner in :issue:`46656`, :issue:`45440` and :issue:"
"`46640`.)"
msgstr ""
"En `C11 <https://en.cppreference.com/w/c/11>`_ -kompilator och "
"standardbibliotek. `Valfria C11-egenskaper <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ krävs inte. (Bidrag från "
"Victor Stinner i :issue:`46656`, :issue:`45440` och :issue:`46640`.)"

#: ../../whatsnew/3.11.rst:2140
msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating-"
"point numbers. (Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""
"Stöd för `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ flyttal. "
"(Bidrag från Victor Stinner i :issue:`46917`.)"

#: ../../whatsnew/3.11.rst:2144
msgid ""
"The :c:macro:`!Py_NO_NAN` macro has been removed. Since CPython now requires "
"IEEE 754 floats, NaN values are always available. (Contributed by Victor "
"Stinner in :issue:`46656`.)"
msgstr ""
"Makrot :c:macro:`!Py_NO_NAN` har tagits bort. Eftersom CPython nu kräver "
"IEEE 754-flottor är NaN-värden alltid tillgängliga. (Bidrag från Victor "
"Stinner i :issue:`46656`.)"

#: ../../whatsnew/3.11.rst:2148
msgid ""
"The :mod:`tkinter` package now requires `Tcl/Tk <https://www.tcl.tk>`_ "
"version 8.5.12 or newer. (Contributed by Serhiy Storchaka in :issue:`46996`.)"
msgstr ""
"Paketet :mod:`tkinter` kräver nu `Tcl/Tk <https://www.tcl.tk>`_ version "
"8.5.12 eller nyare. (Bidrag från Serhiy Storchaka i :issue:`46996`.)"

#: ../../whatsnew/3.11.rst:2152
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags are "
"detected by `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-"
"config/>`_ (when available). :mod:`tkinter` now requires a pkg-config "
"command to detect development settings for `Tcl/Tk`_ headers and libraries. "
"(Contributed by Christian Heimes and Erlend Egeberg Aasland in :issue:"
"`45847`, :issue:`45747`, and :issue:`45763`.)"
msgstr ""
"Byggberoenden, kompilatorflaggor och länkarflaggor för de flesta stdlib-"
"tilläggsmoduler upptäcks nu av :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk och uuid-flaggor upptäcks "
"av `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-config/>`_ "
"(när tillgängligt). :mod:`tkinter` kräver nu ett pkg-config-kommando för att "
"upptäcka utvecklingsinställningar för `Tcl/Tk`_-huvuden och bibliotek. "
"(Bidrag från Christian Heimes och Erlend Egeberg Aasland i :issue:`45847`, :"
"issue:`45747`, och :issue:`45763`.)"

#: ../../whatsnew/3.11.rst:2162
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert "
"in :issue:`45433`.)"
msgstr ""
"libpython är inte längre länkat mot libcrypt. (Bidrag från Mike Gilbert i :"
"issue:`45433`.)"

#: ../../whatsnew/3.11.rst:2165
msgid ""
"CPython can now be built with the `ThinLTO <https://clang.llvm.org/docs/"
"ThinLTO.html>`_ option via passing ``thin`` to :option:`--with-lto`, i.e. "
"``--with-lto=thin``. (Contributed by Donghee Na and Brett Holman in :issue:"
"`44340`.)"
msgstr ""
"CPython kan nu byggas med alternativet `ThinLTO <https://clang.llvm.org/docs/"
"ThinLTO.html>`_ genom att skicka ``thin`` till :option:`\\--with-lto`, dvs. "
"``\\--with-lto=thin``. (Bidrag från Donghee Na och Brett Holman i :issue:"
"`44340`.)"

#: ../../whatsnew/3.11.rst:2170
msgid ""
"Freelists for object structs can now be disabled. A new :program:`configure` "
"option ``--without-freelists`` can be used to disable all freelists except "
"empty tuple singleton. (Contributed by Christian Heimes in :issue:`45522`.)"
msgstr ""
"Freelists för objektstrukturer kan nu inaktiveras. Ett nytt :program:"
"`configure`\\-alternativ ``\\--without-freelists`` kan användas för att "
"inaktivera alla frilistor utom tom tuple singleton. (Bidrag från Christian "
"Heimes i :issue:`45522`.)"

#: ../../whatsnew/3.11.rst:2175
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied up. "
"Extension modules can now be built through ``makesetup``. All except some "
"test modules can be linked statically into a main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, :issue:"
"`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""
"``Modules/Setup`` och ``Modules/makesetup`` har förbättrats och knutits "
"samman. Tilläggsmoduler kan nu byggas genom ``makesetup``. Alla utom vissa "
"testmoduler kan länkas statiskt till en huvudbinärfil eller ett "
"huvudbibliotek. (Bidrag från Brett Cannon och Christian Heimes i :issue:"
"`45548`, :issue:`45570`, :issue:`45571`, och :issue:`43974`.)"

#: ../../whatsnew/3.11.rst:2182
msgid ""
"Use the environment variables :envvar:`!TCLTK_CFLAGS` and :envvar:`!"
"TCLTK_LIBS` to manually specify the location of Tcl/Tk headers and "
"libraries. The :program:`configure` options :option:`!--with-tcltk-includes` "
"and :option:`!--with-tcltk-libs` have been removed."
msgstr ""
"Använd miljövariablerna :envvar:`!TCLTK_CFLAGS` och :envvar:`!TCLTK_LIBS` "
"för att manuellt ange platsen för Tcl/Tk-huvuden och -bibliotek. "
"Alternativen :program:`configure` :option:`!--with-tcltk-includes` och :"
"option:`!--with-tcltk-libs` har tagits bort."

#: ../../whatsnew/3.11.rst:2188
msgid ""
"On RHEL 7 and CentOS 7 the development packages do not provide ``tcl.pc`` "
"and ``tk.pc``; use ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. The "
"directory ``Misc/rhel7`` contains ``.pc`` files and instructions on how to "
"build Python with RHEL 7's and CentOS 7's Tcl/Tk and OpenSSL."
msgstr ""
"På RHEL 7 och CentOS 7 tillhandahåller inte utvecklingspaketen ``tcl.pc`` "
"och ``tk.pc``; använd ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. "
"Katalogen ``Misc/rhel7`` innehåller ``.pc``\\-filer och instruktioner om hur "
"man bygger Python med RHEL 7:s och CentOS 7:s Tcl/Tk och OpenSSL."

#: ../../whatsnew/3.11.rst:2193
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int` "
"implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the :"
"option:`--enable-big-digits` option to the configure script or (for Windows) "
"the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but this option "
"may be removed at some point in the future. (Contributed by Mark Dickinson "
"in :issue:`45569`.)"
msgstr ""
"CPython kommer nu att använda 30-bitars siffror som standard för Python :"
"class:`int`\\-implementationen. Tidigare var standardinställningen att "
"använda 30-bitars siffror på plattformar med ``SIZEOF_VOID_P >= 8``, och 15-"
"bitars siffror annars. Det är fortfarande möjligt att uttryckligen begära "
"användning av 15-bitars siffror via antingen :option:`\\--enable-big-"
"digits`\\-alternativet till configure-skriptet eller (för Windows) variabeln "
"``PYLONG_BITS_IN_DIGIT`` i ``PC/pyconfig.h``, men detta alternativ kan komma "
"att tas bort någon gång i framtiden. (Bidrag från Mark Dickinson i :issue:"
"`45569`.)"

#: ../../whatsnew/3.11.rst:2206
msgid "C API Changes"
msgstr "Ändringar i C API"

#: ../../whatsnew/3.11.rst:2213
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Lägg till en ny :c:func:`PyType_GetName`\\-funktion för att hämta typens "
"korta namn. (Bidrag från Hai Shi i :issue:`42035`.)"

#: ../../whatsnew/3.11.rst:2216
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"Lägg till en ny :c:func:`PyType_GetQualName`\\-funktion för att hämta typens "
"kvalificerade namn. (Bidrag från Hai Shi i :issue:`42035`.)"

#: ../../whatsnew/3.11.rst:2219
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` functions to the limited C API to suspend and "
"resume tracing and profiling. (Contributed by Victor Stinner in :issue:"
"`43760`.)"
msgstr ""
"Lägg till nya :c:func:`PyThreadState_EnterTracing` och :c:func:"
"`PyThreadState_LeaveTracing` funktioner till det begränsade C API:et för att "
"avbryta och återuppta spårning och profilering. (Bidrag från Victor Stinner "
"i :issue:`43760`.)"

#: ../../whatsnew/3.11.rst:2224
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as :c:"
"macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in :issue:"
"`43931`.)"
msgstr ""
"Lagt till :c:data:`Py_Version`\\-konstanten som har samma värde som :c:macro:"
"`PY_VERSION_HEX`. (Bidrag från Gabriele N. Tornetta i :issue:`43931`.)"

#: ../../whatsnew/3.11.rst:2228
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the stable "
"ABI:"
msgstr ""
":c:type:`Py_buffer` och API:er är nu en del av det begränsade API:et och det "
"stabila ABI:et:"

#: ../../whatsnew/3.11.rst:2231
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ":c:func:`PyObject_CheckBuffer`"

#: ../../whatsnew/3.11.rst:2232
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ":c:func:`PyObject_GetBuffer`"

#: ../../whatsnew/3.11.rst:2233
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ":c:func:`PyBuffer_GetPointer`"

#: ../../whatsnew/3.11.rst:2234
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ":c:func:`PyBuffer_SizeFromFormat`"

#: ../../whatsnew/3.11.rst:2235
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ":c:func:`PyBuffer_ToContiguous`"

#: ../../whatsnew/3.11.rst:2236
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ":c:func:`PyBuffer_FromContiguous`"

#: ../../whatsnew/3.11.rst:2237
msgid ":c:func:`PyObject_CopyData`"
msgstr ":c:func:`PyObject_CopyData`"

#: ../../whatsnew/3.11.rst:2238
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ":c:func:`PyBuffer_IsContiguous`"

#: ../../whatsnew/3.11.rst:2239
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ":c:func:`PyBuffer_FillContiguousStrides`"

#: ../../whatsnew/3.11.rst:2240
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ":c:func:`PyBuffer_FillInfo`"

#: ../../whatsnew/3.11.rst:2241
msgid ":c:func:`PyBuffer_Release`"
msgstr ":c:func:`PyBuffer_Release`"

#: ../../whatsnew/3.11.rst:2242
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ":c:func:`PyMemoryView_FromBuffer`"

#: ../../whatsnew/3.11.rst:2243
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` type slots"
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` och :c:member:`~PyBufferProcs."
"bf_releasebuffer` typ slots"

#: ../../whatsnew/3.11.rst:2246
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr "(Bidrag från Christian Heimes i :issue:`45459`.)"

#: ../../whatsnew/3.11.rst:2248
msgid ""
"Added the :c:func:`PyType_GetModuleByDef` function, used to get the module "
"in which a method was defined, in cases where this information is not "
"available directly (via :c:type:`PyCMethod`). (Contributed by Petr Viktorin "
"in :issue:`46613`.)"
msgstr ""
"Lade till funktionen :c:func:`PyType_GetModuleByDef`, som används för att "
"hämta modulen i vilken en metod definierades, i de fall då denna information "
"inte är tillgänglig direkt (via :c:type:`PyCMethod`). (Bidrag från Petr "
"Viktorin i :issue:`46613`.)"

#: ../../whatsnew/3.11.rst:2253
msgid ""
"Add new functions to pack and unpack C double (serialize and deserialize): :"
"c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, :c:"
"func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` and :c:func:"
"`PyFloat_Unpack8`. (Contributed by Victor Stinner in :issue:`46906`.)"
msgstr ""
"Lägg till nya funktioner för att packa och packa upp C double (serialize och "
"deserialize): :c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:"
"`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` och :c:"
"func:`PyFloat_Unpack8`. (Bidrag från Victor Stinner i :issue:`46906`.)"

#: ../../whatsnew/3.11.rst:2259
msgid ""
"Add new functions to get frame object attributes: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""
"Lägg till nya funktioner för att hämta attribut för ramobjekt: :c:func:"
"`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, :c:func:"
"`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."

#: ../../whatsnew/3.11.rst:2263
msgid ""
"Added two new functions to get and set the active exception instance: :c:"
"func:`PyErr_GetHandledException` and :c:func:`PyErr_SetHandledException`. "
"These are alternatives to :c:func:`PyErr_SetExcInfo()` and :c:func:"
"`PyErr_GetExcInfo()` which work with the legacy 3-tuple representation of "
"exceptions. (Contributed by Irit Katriel in :issue:`46343`.)"
msgstr ""
"Lade till två nya funktioner för att hämta och ställa in den aktiva "
"undantagsinstansen: :c:func:`PyErr_GetHandledException` och :c:func:"
"`PyErr_SetHandledException`. Dessa är alternativ till :c:func:"
"`PyErr_SetExcInfo()` och :c:func:`PyErr_GetExcInfo()` som arbetar med den "
"äldre 3-tupel-representationen av undantag. (Bidrag från Irit Katriel i :"
"issue:`46343`.)"

#: ../../whatsnew/3.11.rst:2270
msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"Lagt till :c:member:`PyConfig.safe_path`\\-medlemmen. (Bidrag från Victor "
"Stinner i :gh:`57684`.)"

#: ../../whatsnew/3.11.rst:2281
msgid ""
"Some macros have been converted to static inline functions to avoid `macro "
"pitfalls <https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html>`_. The "
"change should be mostly transparent to users, as the replacement functions "
"will cast their arguments to the expected types to avoid compiler warnings "
"due to static type checks. However, when the limited C API is set to >=3.11, "
"these casts are not done, and callers will need to cast arguments to their "
"expected types. See :pep:`670` for more details. (Contributed by Victor "
"Stinner and Erlend E. Aasland in :gh:`89653`.)"
msgstr ""
"Vissa makron har konverterats till statiska inline-funktioner för att "
"undvika `makrofällor <https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls."
"html>`_. Förändringen bör vara mestadels transparent för användarna, "
"eftersom ersättningsfunktionerna kommer att kasta sina argument till de "
"förväntade typerna för att undvika kompilatorvarningar på grund av statiska "
"typkontroller. När det begränsade C API:et är inställt på >=3.11 görs dock "
"inte dessa kast och anropare måste kasta argumenten till deras förväntade "
"typer. Se :pep:`670` för mer information. (Bidrag från Victor Stinner och "
"Erlend E. Aasland i :gh:`89653`.)"

#: ../../whatsnew/3.11.rst:2292
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and ``traceback`` "
"arguments, the interpreter now derives those values from the exception "
"instance (the ``value`` argument). The function still steals references of "
"all three arguments. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_SetExcInfo()` använder inte längre argumenten ``type`` och "
"``traceback``, tolken härleder nu dessa värden från undantagsinstansen "
"(argumentet ``value``). Funktionen stjäl fortfarande referenser till alla "
"tre argumenten. (Bidrag från Irit Katriel i :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:2298
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_GetExcInfo()` härleder nu fälten ``type`` och ``traceback`` i "
"resultatet från undantagsinstansen (fältet ``value``). (Bidrag från Irit "
"Katriel i :issue:`45711`.)"

#: ../../whatsnew/3.11.rst:2302
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or "
"not the frozen module is a package.  Previously, a negative value in the "
"``size`` field was the indicator.  Now only non-negative values be used for "
"``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""
":c:struct:`_frozen` har fått ett nytt fält ``is_package`` som anger om den "
"frysta modulen är ett paket eller inte.  Tidigare var ett negativt värde i "
"fältet ``size`` indikatorn.  Nu kan endast icke-negativa värden användas för "
"``size``. (Bidrag från Kumar Aditya i :issue:`46608`.)"

#: ../../whatsnew/3.11.rst:2308
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""
":c:func:`_PyFrameEvalFunction` tar nu ``_PyInterpreterFrame*`` som sin andra "
"parameter, istället för ``PyFrameObject*``. Se :pep:`523` för mer "
"information om hur man använder denna funktionspekartyp."

#: ../../whatsnew/3.11.rst:2312
msgid ""
":c:func:`!PyCode_New` and :c:func:`!PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the ``replace`` "
"method."
msgstr ""
":c:func:`!PyCode_New` och :c:func:`!PyCode_NewWithPosOnlyArgs` tar nu ett "
"ytterligare ``exception_table`` argument. Användning av dessa funktioner bör "
"undvikas om det är möjligt. För att få ett anpassat kodobjekt: skapa ett "
"kodobjekt med hjälp av kompilatorn och få sedan en modifierad version med "
"metoden ``replace``."

#: ../../whatsnew/3.11.rst:2318
msgid ""
":c:type:`PyCodeObject` no longer has the ``co_code``, ``co_varnames``, "
"``co_cellvars`` and ``co_freevars`` fields.  Instead, use :c:func:"
"`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` "
"and :c:func:`PyCode_GetFreevars` respectively to access them via the C API. "
"(Contributed by Brandt Bucher in :issue:`46841` and Ken Jin in :gh:`92154` "
"and :gh:`94936`.)"
msgstr ""
":c:type:`PyCodeObject` har inte längre fälten ``co_code``, ``co_varnames``, "
"``co_cellvars`` och ``co_freevars``.  Använd istället :c:func:"
"`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` "
"respektive :c:func:`PyCode_GetFreevars` för att komma åt dem via C API. "
"(Bidrag från Brandt Bucher i :issue:`46841` och Ken Jin i :gh:`92154` och :"
"gh:`94936`.)"

#: ../../whatsnew/3.11.rst:2326
msgid ""
"The old trashcan macros (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) are now deprecated. They should be replaced by the "
"new macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"De gamla trashcan-makrot (``Py_TRASHCAN_SAFE_BEGIN``/"
"``Py_TRASHCAN_SAFE_END``) är nu föråldrade. De bör ersättas av de nya "
"makrona ``Py_TRASHCAN_BEGIN`` och ``Py_TRASHCAN_END``."

#: ../../whatsnew/3.11.rst:2330
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr "En tp_dealloc-funktion som har de gamla makron, till exempel::"

#: ../../whatsnew/3.11.rst:2332
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"statiskt void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

#: ../../whatsnew/3.11.rst:2341
msgid "should migrate to the new macros as follows::"
msgstr "bör övergå till de nya makron enligt följande::"

#: ../../whatsnew/3.11.rst:2343
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"statiskt void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

#: ../../whatsnew/3.11.rst:2352
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr ""
"Observera att ``Py_TRASHCAN_BEGIN`` har ett andra argument som bör vara den "
"deallokeringsfunktion som den ingår i."

#: ../../whatsnew/3.11.rst:2355
msgid ""
"To support older Python versions in the same codebase, you can define the "
"following macros and use them throughout the code (credit: these were copied "
"from the ``mypy`` codebase)::"
msgstr ""
"För att stödja äldre Python-versioner i samma kodbas kan du definiera "
"följande makron och använda dem i hela koden (källa: dessa har kopierats "
"från kodbasen ``mypy``)::"

#: ../../whatsnew/3.11.rst:2359
msgid ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"# define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"# define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"# define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"# define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2367
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is defined "
"with the :c:macro:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse function "
"(:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor Stinner in :"
"issue:`44263`.)"
msgstr ""
"Funktionen :c:func:`PyType_Ready` ger nu upphov till ett fel om en typ "
"definieras med flaggan :c:macro:`Py_TPFLAGS_HAVE_GC` inställd men inte har "
"någon traversefunktion (:c:member:`PyTypeObject.tp_traverse`). (Bidrag från "
"Victor Stinner i :issue:`44263`.)"

#: ../../whatsnew/3.11.rst:2372
msgid ""
"Heap types with the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit "
"the :pep:`590` vectorcall protocol.  Previously, this was only possible for :"
"ref:`static types <static-types>`. (Contributed by Erlend E. Aasland in :"
"issue:`43908`)"
msgstr ""
"Heap-typer med :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` flaggan kan nu ärva :pep:"
"`590` vectorcall protokollet.  Tidigare var detta endast möjligt för :ref:"
"`static types <static-types>`. (Bidrag från Erlend E. Aasland i :issue:"
"`43908`)"

#: ../../whatsnew/3.11.rst:2377
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Eftersom :c:func:`Py_TYPE()` har ändrats till en statisk inline-funktion, "
"måste ``Py_TYPE(obj) = new_type`` ersättas med ``Py_SET_TYPE(obj, "
"new_type)``: se funktionen :c:func:`Py_SET_TYPE()` (tillgänglig sedan Python "
"3.9). För bakåtkompatibilitet kan detta makro användas::"

#: ../../whatsnew/3.11.rst:2383
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = type; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"statisk inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = typ; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2389 ../../whatsnew/3.11.rst:2403
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`39573`.)"

#: ../../whatsnew/3.11.rst:2391
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"Eftersom :c:func:`Py_SIZE()` har ändrats till en statisk inline-funktion, "
"måste ``Py_SIZE(obj) = new_size`` ersättas med ``Py_SET_SIZE(obj, "
"new_size)``: se funktionen :c:func:`Py_SET_SIZE()` (tillgänglig sedan Python "
"3.9). För bakåtkompatibilitet kan detta makro användas::"

#: ../../whatsnew/3.11.rst:2397
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"statisk inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2405
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` macro is "
"set to ``0x030b0000`` (Python 3.11) or higher. C extensions should "
"explicitly include the header files after ``#include <Python.h>``. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"``<Python.h>`` inkluderar inte längre huvudfilerna ``<stdlib.h>``, ``<stdio."
"h>``, ``<errno.h>`` och ``<string.h>`` när makrot ``Py_LIMITED_API`` är "
"inställt på ``0x030b0000`` (Python 3.11) eller högre. C-tillägg bör "
"uttryckligen inkludera huvudfilerna efter ``#include <Python.h>``. (Bidrag "
"från Victor Stinner i :issue:`45434`.)"

#: ../../whatsnew/3.11.rst:2411
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` have "
"been moved to the ``Include/cpython`` directory. Moreover, the ``eval.h`` "
"header file was removed. These files must not be included directly, as they "
"are already included in ``Python.h``: :ref:`Include Files <api-includes>`. "
"If they have been included directly, consider including ``Python.h`` "
"instead. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"De icke-begränsade API-filerna ``cellobject.h``, ``classobject.h``, ``code."
"h``, ``context.h``, ``funcobject.h``, ``genobject.h`` och ``longintrepr.h`` "
"har flyttats till katalogen ``Include/cpython``. Dessutom har huvudfilen "
"``eval.h`` tagits bort. Dessa filer får inte inkluderas direkt, eftersom de "
"redan finns i ``Python.h``: :ref:`Include Files <api-includes>`. Om de har "
"inkluderats direkt, överväg att inkludera ``Python.h`` istället. (Bidrag "
"från Victor Stinner i :issue:`35134`.)"

#: ../../whatsnew/3.11.rst:2419
msgid ""
"The :c:func:`!PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""
"Makrot :c:func:`!PyUnicode_CHECK_INTERNED` har uteslutits från det "
"begränsade C API:et. Det var aldrig användbart där, eftersom det använde "
"interna strukturer som inte är tillgängliga i det begränsade C API:et. "
"(Bidrag från Victor Stinner i :issue:`46007`.)"

#: ../../whatsnew/3.11.rst:2424
msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""
"Följande ramfunktioner och -typer är nu direkt tillgängliga med ``#include "
"<Python.h>``, det är inte längre nödvändigt att lägga till ``#include "
"<frameobject.h>``:"

#: ../../whatsnew/3.11.rst:2428
msgid ":c:func:`PyFrame_Check`"
msgstr ":c:func:`PyFrame_Check`"

#: ../../whatsnew/3.11.rst:2429
msgid ":c:func:`PyFrame_GetBack`"
msgstr ":c:func:`PyFrame_GetBack`"

#: ../../whatsnew/3.11.rst:2430
msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ":c:func:`PyFrame_GetBuiltins`"

#: ../../whatsnew/3.11.rst:2431
msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ":c:func:`PyFrame_GetGenerator`"

#: ../../whatsnew/3.11.rst:2432
msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ":c:func:`PyFrame_GetGlobals`"

#: ../../whatsnew/3.11.rst:2433
msgid ":c:func:`PyFrame_GetLasti`"
msgstr ":c:func:`PyFrame_GetLasti`"

#: ../../whatsnew/3.11.rst:2434
msgid ":c:func:`PyFrame_GetLocals`"
msgstr ":c:func:`PyFrame_GetLocals`"

#: ../../whatsnew/3.11.rst:2435
msgid ":c:type:`PyFrame_Type`"
msgstr ":c:type:`PyFrame_Type`"

#: ../../whatsnew/3.11.rst:2437
msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`93937`.)"

#: ../../whatsnew/3.11.rst:2441
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ""
"Strukturmedlemmarna :c:type:`PyFrameObject` har tagits bort från det publika "
"C API:et."

#: ../../whatsnew/3.11.rst:2444
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are "
"subject to change at any time, they have been stable for a long time and "
"were used in several popular extensions."
msgstr ""
"Även om det i dokumentationen anges att fälten :c:type:`PyFrameObject` kan "
"ändras när som helst, har de varit stabila under lång tid och använts i "
"flera populära tillägg."

#: ../../whatsnew/3.11.rst:2448
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of "
"the old implementation."
msgstr ""
"I Python 3.11 omorganiserades ramstrukturen för att möjliggöra "
"prestandaoptimeringar. Vissa fält togs bort helt och hållet, eftersom de var "
"detaljer i den gamla implementeringen."

#: ../../whatsnew/3.11.rst:2452
msgid ":c:type:`PyFrameObject` fields:"
msgstr ":c:type:`PyFrameObject`\\-fält :"

#: ../../whatsnew/3.11.rst:2454
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr "``f_back``: använd :c:func:`PyFrame_GetBack`."

#: ../../whatsnew/3.11.rst:2455
msgid "``f_blockstack``: removed."
msgstr "``f_blockstack``: borttagen."

#: ../../whatsnew/3.11.rst:2456
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr "``f_builtins``: använd :c:func:`PyFrame_GetBuiltins`."

#: ../../whatsnew/3.11.rst:2457
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr "``f_code``: använd :c:func:`PyFrame_GetCode`."

#: ../../whatsnew/3.11.rst:2458
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr "``f_gen``: använd :c:func:`PyFrame_GetGenerator`."

#: ../../whatsnew/3.11.rst:2459
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr "``f_globals``: använd :c:func:`PyFrame_GetGlobals`."

#: ../../whatsnew/3.11.rst:2460
msgid "``f_iblock``: removed."
msgstr "``f_iblock``: borttagen."

#: ../../whatsnew/3.11.rst:2461
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` instead; "
"it may be faster."
msgstr ""
"``f_lasti``: använd :c:func:`PyFrame_GetLasti`. Kod som använder ``f_lasti`` "
"med ``PyCode_Addr2Line()`` bör använda :c:func:`PyFrame_GetLineNumber` "
"istället; det kan vara snabbare."

#: ../../whatsnew/3.11.rst:2464
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr "``f_lineno``: använd :c:func:`PyFrame_GetLineNumber`"

#: ../../whatsnew/3.11.rst:2465
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr "``f_locals``: använd :c:func:`PyFrame_GetLocals`."

#: ../../whatsnew/3.11.rst:2466
msgid "``f_stackdepth``: removed."
msgstr "``f_stackdepth``: borttagen."

#: ../../whatsnew/3.11.rst:2467
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr ""
"``f_state``: Inget offentligt API (bytt namn till ``f_frame.f_state``)."

#: ../../whatsnew/3.11.rst:2468
msgid "``f_trace``: no public API."
msgstr "``f_trace``: Inget offentligt API."

#: ../../whatsnew/3.11.rst:2469
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""
"``f_trace_lines``: använd ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."

#: ../../whatsnew/3.11.rst:2470
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""
"``f_trace_opcodes``: använd ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."

#: ../../whatsnew/3.11.rst:2471
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr ""
"``f_localsplus``: Inget offentligt API (bytt namn till ``f_frame."
"localsplus``)."

#: ../../whatsnew/3.11.rst:2472
msgid "``f_valuestack``: removed."
msgstr "``f_valuestack``: borttagen."

#: ../../whatsnew/3.11.rst:2474
msgid ""
"The Python frame object is now created lazily. A side effect is that the :"
"attr:`~frame.f_back` member must not be accessed directly, since its value "
"is now also computed lazily. The :c:func:`PyFrame_GetBack` function must be "
"called instead."
msgstr ""
"Python frame-objektet skapas nu på ett lättsamt sätt. En bieffekt är att "
"medlemmen :attr:`~frame.f_back` inte får nås direkt, eftersom dess värde nu "
"också beräknas på ett slött sätt. Funktionen :c:func:`PyFrame_GetBack` måste "
"anropas istället."

#: ../../whatsnew/3.11.rst:2480
msgid ""
"Debuggers that accessed the :attr:`~frame.f_locals` directly *must* call :c:"
"func:`PyFrame_GetLocals` instead. They no longer need to call :c:func:`!"
"PyFrame_FastToLocalsWithError` or :c:func:`!PyFrame_LocalsToFast`, in fact "
"they should not call those functions. The necessary updating of the frame is "
"now managed by the virtual machine."
msgstr ""
"Avläsningsprogram som använde :attr:`~frame.f_locals` direkt *måste* anropa :"
"c:func:`PyFrame_GetLocals` istället. De behöver inte längre anropa :c:func:`!"
"PyFrame_FastToLocalsWithError` eller :c:func:`!PyFrame_LocalsToFast`, i "
"själva verket bör de inte anropa dessa funktioner. Den nödvändiga "
"uppdateringen av ramen hanteras nu av den virtuella maskinen."

#: ../../whatsnew/3.11.rst:2486
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr "Kod som definierar ``PyFrame_GetCode()`` på Python 3.8 och äldre::"

#: ../../whatsnew/3.11.rst:2488
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    return frame->f_code;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    returnera frame->f_code;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2496
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr "Kod som definierar ``PyFrame_GetBack()`` på Python 3.8 och äldre::"

#: ../../whatsnew/3.11.rst:2498
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(frame->f_back);\n"
"    return frame->f_back;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(ram->f_back);\n"
"    returnera frame->f_back;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2506
msgid ""
"Or use the `pythoncapi_compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these two functions on older Python versions."
msgstr ""
"Eller använd `pythoncapi_compat-projektet <https://github.com/python/"
"pythoncapi-compat>`__ för att få dessa två funktioner på äldre Python-"
"versioner."

#: ../../whatsnew/3.11.rst:2510
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr "Ändringar av strukturmedlemmarna i :c:type:`PyThreadState`:"

#: ../../whatsnew/3.11.rst:2512
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added to "
"Python 3.9 by :issue:`40429`). Warning: the function returns a :term:`strong "
"reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""
"``frame``: borttagen, använd :c:func:`PyThreadState_GetFrame` (funktion "
"tillagd till Python 3.9 av :issue:`40429`). Varning: funktionen returnerar "
"en :term:`strong reference`, måste anropa :c:func:`Py_XDECREF`."

#: ../../whatsnew/3.11.rst:2516
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and :c:func:"
"`PyThreadState_LeaveTracing` (functions added to Python 3.11 by :issue:"
"`43760`)."
msgstr ""
"``tracing``: ändrat, använd :c:func:`PyThreadState_EnterTracing` och :c:func:"
"`PyThreadState_LeaveTracing` (funktioner tillagda i Python 3.11 av :issue:"
"`43760`)."

#: ../../whatsnew/3.11.rst:2519
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - tstate-"
">recursion_remaining)`` instead."
msgstr ""
"``recursion_depth``: borttagen, använd ``(tstate->recursion_limit - tstate-"
">recursion_remaining)`` istället."

#: ../../whatsnew/3.11.rst:2521
msgid "``stackcheck_counter``: removed."
msgstr "``stackcheck_counter``: borttagen."

#: ../../whatsnew/3.11.rst:2523
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr ""
"Kod som definierar ``PyThreadState_GetFrame()`` på Python 3.8 och äldre::"

#: ../../whatsnew/3.11.rst:2525
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n"
"{\n"
"    Py_XINCREF(tstate->frame);\n"
"    return tstate->frame;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n"
"{\n"
"    Py_XINCREF(tstate->frame);\n"
"    return tstate->frame;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2533
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""
"Kod som definierar ``PyThreadState_EnterTracing()`` och "
"``PyThreadState_LeaveTracing()`` på Python 3.10 och äldre::"

#: ../../whatsnew/3.11.rst:2536
msgid ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc !"
"= NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc !"
"= NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2559
msgid ""
"Or use `the pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these functions on old Python functions."
msgstr ""
"Eller använd `the pythoncapi-compat project <https://github.com/python/"
"pythoncapi-compat>`__ för att få dessa funktioner på gamla Python-funktioner."

#: ../../whatsnew/3.11.rst:2563
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr ""
"Distributörer uppmuntras att bygga Python med det optimerade Blake2-"
"biblioteket `libb2`_."

#: ../../whatsnew/3.11.rst:2566
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to 1 "
"for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"Fältet :c:member:`PyConfig.module_search_paths_set` måste nu vara satt till "
"1 för att initieringen ska använda :c:member:`PyConfig.module_search_paths` "
"för att initiera :data:`sys.path`. Annars kommer initieringen att räkna om "
"sökvägen och ersätta alla värden som lagts till i ``module_search_paths``."

#: ../../whatsnew/3.11.rst:2571
msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and "
"will not fill any values into :c:member:`PyConfig.module_search_paths`. To "
"calculate default paths and then modify them, finish initialization and use :"
"c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a Python list "
"object and modify it directly."
msgstr ""
":c:func:`PyConfig_Read` beräknar inte längre den första sökvägen och fyller "
"inte i några värden i :c:member:`PyConfig.module_search_paths`. För att "
"beräkna standardsökvägar och sedan ändra dem, avsluta initialiseringen och "
"använd :c:func:`PySys_GetObject` för att hämta :data:`sys.path` som ett "
"Python-listobjekt och ändra det direkt."

#: ../../whatsnew/3.11.rst:2582
msgid ""
"Deprecate the following functions to configure the Python initialization:"
msgstr ""
"Avveckla följande funktioner för att konfigurera Python-initialiseringen:"

#: ../../whatsnew/3.11.rst:2584
msgid ":c:func:`!PySys_AddWarnOptionUnicode`"
msgstr ":c:func:`!PySys_AddWarnOptionUnicode`"

#: ../../whatsnew/3.11.rst:2585
msgid ":c:func:`!PySys_AddWarnOption`"
msgstr ":c:func:`!PySys_AddWarnOption`"

#: ../../whatsnew/3.11.rst:2586
msgid ":c:func:`!PySys_AddXOption`"
msgstr ":c:func:`!PySys_AddXOption`"

#: ../../whatsnew/3.11.rst:2587
msgid ":c:func:`!PySys_HasWarnOptions`"
msgstr ":c:func:`!PySys_HasWarnOptions`"

#: ../../whatsnew/3.11.rst:2588
msgid ":c:func:`!PySys_SetArgvEx`"
msgstr ":c:func:`!PySys_SetArgvEx`"

#: ../../whatsnew/3.11.rst:2589
msgid ":c:func:`!PySys_SetArgv`"
msgstr ":c:func:`!PySys_SetArgv`"

#: ../../whatsnew/3.11.rst:2590
msgid ":c:func:`!PySys_SetPath`"
msgstr ":c:func:`!PySys_SetPath`"

#: ../../whatsnew/3.11.rst:2591
msgid ":c:func:`!Py_SetPath`"
msgstr ":c:func:`!Py_SetPath`"

#: ../../whatsnew/3.11.rst:2592
msgid ":c:func:`!Py_SetProgramName`"
msgstr ":c:func:`!Py_SetProgramName`"

#: ../../whatsnew/3.11.rst:2593
msgid ":c:func:`!Py_SetPythonHome`"
msgstr ":c:func:`!Py_SetPythonHome`"

#: ../../whatsnew/3.11.rst:2594
msgid ":c:func:`!Py_SetStandardStreamEncoding`"
msgstr ":c:func:`!Py_SetStandardStreamEncoding`"

#: ../../whatsnew/3.11.rst:2595
msgid ":c:func:`!_Py_SetProgramFullPath`"
msgstr ":c:func:`!_Py_SetProgramFullPath`"

#: ../../whatsnew/3.11.rst:2597
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor "
"Stinner in :gh:`88279`.)"
msgstr ""
"Använd det nya :c:type:`PyConfig` API:et i :ref:`Python Initialization "
"Configuration <init-config>` istället (:pep:`587`). (Bidrag från Victor "
"Stinner i :gh:`88279`.)"

#: ../../whatsnew/3.11.rst:2601
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use :c:"
"func:`PyObject_Hash` instead. (Contributed by Inada Naoki in :issue:`46864`.)"
msgstr ""
"Avveckla ``ob_shash``\\-medlemmen i :c:type:`PyBytesObject`. Använd :c:func:"
"`PyObject_Hash` istället. (Bidrag från Inada Naoki i :issue:`46864`.)"

#: ../../whatsnew/3.11.rst:2610
msgid ""
"The following C APIs have been deprecated in earlier Python releases, and "
"will be removed in Python 3.12."
msgstr ""
"Följande C API:er har utgått i tidigare Python-utgåvor och kommer att tas "
"bort i Python 3.12."

#: ../../whatsnew/3.11.rst:2613
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.11.rst:2614
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.11.rst:2615
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.11.rst:2616
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2617
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.11.rst:2618
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.11.rst:2619
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.11.rst:2620
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.11.rst:2621
msgid ":c:func:`!PyUnicode_IS_COMPACT`"
msgstr ":c:func:`!PyUnicode_IS_COMPACT`"

#: ../../whatsnew/3.11.rst:2622
msgid ":c:func:`!PyUnicode_IS_READY`"
msgstr ":c:func:`!PyUnicode_IS_READY`"

#: ../../whatsnew/3.11.rst:2623
msgid ":c:func:`PyUnicode_READY`"
msgstr ":c:func:`PyUnicode_READY`"

#: ../../whatsnew/3.11.rst:2624
msgid ":c:func:`!PyUnicode_WSTR_LENGTH`"
msgstr ":c:func:`!PyUnicode_WSTR_LENGTH`"

#: ../../whatsnew/3.11.rst:2625
msgid ":c:func:`!_PyUnicode_AsUnicode`"
msgstr ":c:func:`!_PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2626
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.11.rst:2627
msgid ":c:type:`PyUnicodeObject`"
msgstr ":c:type:`PyUnicodeObject`"

#: ../../whatsnew/3.11.rst:2628
msgid ":c:func:`!PyUnicode_InternImmortal`"
msgstr ":c:func:`!PyUnicode_InternImmortal`"

#: ../../whatsnew/3.11.rst:2636
msgid ""
":c:func:`!PyFrame_BlockSetup` and :c:func:`!PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""
":c:func:`!PyFrame_BlockSetup` och :c:func:`!PyFrame_BlockPop` har tagits "
"bort. (Bidrag från Mark Shannon i :issue:`40222`.)"

#: ../../whatsnew/3.11.rst:2640
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr "Ta bort följande matematiska makron med hjälp av variabeln ``errno``:"

#: ../../whatsnew/3.11.rst:2642
msgid "``Py_ADJUST_ERANGE1()``"
msgstr "``Py_ADJUST_ERANGE1()``"

#: ../../whatsnew/3.11.rst:2643
msgid "``Py_ADJUST_ERANGE2()``"
msgstr "``Py_ADJUST_ERANGE2()``"

#: ../../whatsnew/3.11.rst:2644
msgid "``Py_OVERFLOWED()``"
msgstr "``Py_OVERFLOWED()``"

#: ../../whatsnew/3.11.rst:2645
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr "``Py_SET_ERANGE_IF_OVERFLOW()``"

#: ../../whatsnew/3.11.rst:2646
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr "``Py_SET_ERRNO_ON_MATH_ERROR()``"

#: ../../whatsnew/3.11.rst:2648
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`45412`.)"

#: ../../whatsnew/3.11.rst:2650
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated "
"since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""
"Ta bort makron ``Py_UNICODE_COPY()`` och ``Py_UNICODE_FILL()``, föråldrade "
"sedan Python 3.3. Använd ``PyUnicode_CopyCharacters()`` eller ``memcpy()`` "
"(``wchar_t*``\\-sträng), och ``PyUnicode_Fill()`` funktioner istället. "
"(Bidrag från Victor Stinner i :issue:`41123`.)"

#: ../../whatsnew/3.11.rst:2655
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private functions. C "
"extensions should only include the main ``<Python.h>`` header file. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"Ta bort huvudfilen ``pystrhex.h``. Den innehåller endast privata funktioner. "
"C-tillägg bör endast inkludera huvudfilen ``<Python.h>``. (Bidrag från "
"Victor Stinner i :issue:`45434`.)"

#: ../../whatsnew/3.11.rst:2659
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in :issue:"
"`45440`.)"
msgstr ""
"Ta bort makrot ``Py_FORCE_DOUBLE()``. Det användes av makrot "
"``Py_IS_INFINITY()``. (Bidrag från Victor Stinner i :issue:`45440`.)"

#: ../../whatsnew/3.11.rst:2663
msgid ""
"The following items are no longer available when :c:macro:`Py_LIMITED_API` "
"is defined:"
msgstr ""
"Följande objekt är inte längre tillgängliga när :c:macro:`Py_LIMITED_API` är "
"definierat:"

#: ../../whatsnew/3.11.rst:2666
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ":c:func:`PyMarshal_WriteLongToFile`"

#: ../../whatsnew/3.11.rst:2667
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ":c:func:`PyMarshal_WriteObjectToFile`"

#: ../../whatsnew/3.11.rst:2668
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ":c:func:`PyMarshal_ReadObjectFromString`"

#: ../../whatsnew/3.11.rst:2669
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ":c:func:`PyMarshal_WriteObjectToString`"

#: ../../whatsnew/3.11.rst:2670
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr "makrot ``Py_MARSHAL_VERSION``"

#: ../../whatsnew/3.11.rst:2672
msgid "These are not part of the :ref:`limited API <limited-api-list>`."
msgstr "Dessa ingår inte i :ref:`begränsat API <limited-api-list>`."

#: ../../whatsnew/3.11.rst:2674
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`45474`.)"

#: ../../whatsnew/3.11.rst:2676
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`!PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"Uteslut :c:func:`PyWeakref_GET_OBJECT` från det begränsade C API:et. Det "
"fungerade aldrig eftersom :c:type:`!PyWeakReference`\\-strukturen är "
"ogenomskinlig i det begränsade C API:et. (Bidrag från Victor Stinner i :"
"issue:`35134`.)"

#: ../../whatsnew/3.11.rst:2681
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the public "
"C API by mistake, it must only be used by Python internally. Use the "
"``PyTypeObject.tp_members`` member instead. (Contributed by Victor Stinner "
"in :issue:`40170`.)"
msgstr ""
"Ta bort makrot ``PyHeapType_GET_MEMBERS()``. Det exponerades i det "
"offentliga C API:et av misstag, det får endast användas av Python internt. "
"Använd medlemmen ``PyTypeObject.tp_members`` istället. (Bidrag från Victor "
"Stinner i :issue:`40170`.)"

#: ../../whatsnew/3.11.rst:2686
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C "
"API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""
"Ta bort makrot ``HAVE_PY_SET_53BIT_PRECISION`` (flyttat till det interna C "
"API:et). (Bidrag från Victor Stinner i :issue:`45412`.)"

#: ../../whatsnew/3.11.rst:2692
msgid ""
"Remove the :c:type:`Py_UNICODE` encoder APIs, as they have been deprecated "
"since Python 3.3, are little used and are inefficient relative to the "
"recommended alternatives."
msgstr ""
"Ta bort :c:type:`Py_UNICODE`\\-kodar-API:erna, eftersom de har varit "
"föråldrade sedan Python 3.3, används lite och är ineffektiva i förhållande "
"till de rekommenderade alternativen."

#: ../../whatsnew/3.11.rst:2697
msgid "The removed functions are:"
msgstr "De borttagna funktionerna är:"

#: ../../whatsnew/3.11.rst:2699
msgid ":func:`!PyUnicode_Encode`"
msgstr ":func:`!PyUnicode_Encode`"

#: ../../whatsnew/3.11.rst:2700
msgid ":func:`!PyUnicode_EncodeASCII`"
msgstr ":func:`!PyUnicode_EncodeASCII`"

#: ../../whatsnew/3.11.rst:2701
msgid ":func:`!PyUnicode_EncodeLatin1`"
msgstr ":func:`!PyUnicode_EncodeLatin1`"

#: ../../whatsnew/3.11.rst:2702
msgid ":func:`!PyUnicode_EncodeUTF7`"
msgstr ":func:`!PyUnicode_EncodeUTF7``"

#: ../../whatsnew/3.11.rst:2703
msgid ":func:`!PyUnicode_EncodeUTF8`"
msgstr ":func:`!PyUnicode_EncodeUTF8``"

#: ../../whatsnew/3.11.rst:2704
msgid ":func:`!PyUnicode_EncodeUTF16`"
msgstr ":func:`!PyUnicode_EncodeUTF16``"

#: ../../whatsnew/3.11.rst:2705
msgid ":func:`!PyUnicode_EncodeUTF32`"
msgstr ":func:`!PyUnicode_EncodeUTF32``"

#: ../../whatsnew/3.11.rst:2706
msgid ":func:`!PyUnicode_EncodeUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2707
msgid ":func:`!PyUnicode_EncodeRawUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeRawUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2708
msgid ":func:`!PyUnicode_EncodeCharmap`"
msgstr ":func:`!PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.11.rst:2709
msgid ":func:`!PyUnicode_TranslateCharmap`"
msgstr ":func:`!PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.11.rst:2710
msgid ":func:`!PyUnicode_EncodeDecimal`"
msgstr ":func:`!PyUnicode_EncodeDecimal`"

#: ../../whatsnew/3.11.rst:2711
msgid ":func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ":func:`!PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.11.rst:2713
msgid ""
"See :pep:`624` for details and :pep:`migration guidance <624#alternative-"
"apis>`. (Contributed by Inada Naoki in :issue:`44029`.)"
msgstr ""
"Se :pep:`624` för detaljer och :pep:`migrationsvägledning <624#alternative-"
"apis>`. (Bidrag från Inada Naoki i :issue:`44029`.)"

#: ../../whatsnew/3.11.rst:2719
msgid "Notable changes in 3.11.4"
msgstr "Viktiga ändringar i 3.11.4"

#: ../../whatsnew/3.11.rst:2722
msgid "tarfile"
msgstr "tarfil"

#: ../../whatsnew/3.11.rst:2724
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
"Extraktionsmetoderna i :mod:`tarfile` och :func:`shutil.unpack_archive` har "
"ett nytt *filter*-argument som gör det möjligt att begränsa tarfunktioner "
"som kan vara överraskande eller farliga, t.ex. att skapa filer utanför "
"destinationskatalogen. Se :ref:`tarfile-extraction-filter` för detaljer. I "
"Python 3.12 kommer användning utan *filter*-argumentet att visa en :exc:"
"`DeprecationWarning`. I Python 3.14 kommer standardinställningen att ändras "
"till ``'data'``. (Bidrag från Petr Viktorin i :pep:`706`.)"

#: ../../whatsnew/3.11.rst:2736
msgid "Notable changes in 3.11.5"
msgstr "Viktiga ändringar i 3.11.5"

#: ../../whatsnew/3.11.rst:2739
msgid "OpenSSL"
msgstr "OpenSSL"

#: ../../whatsnew/3.11.rst:2741
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""
"Windows-byggnader och macOS-installationer från python.org använder nu "
"OpenSSL 3.0."
