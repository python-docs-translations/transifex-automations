# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-09 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr "Vad är nytt i Python 3.12"

#: ../../whatsnew/3.12.rst:0
msgid "Editor"
msgstr "Redigerare"

#: ../../whatsnew/3.12.rst:6
msgid "Adam Turner"
msgstr "Adam Turner"

#: ../../whatsnew/3.12.rst:48
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11. "
"Python 3.12 was released on October 2, 2023. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.12 jämfört med "
"3.11. Python 3.12 släpptes den 2 oktober 2023. För fullständig information, "
"se :ref:`changelog <changelog>`."

#: ../../whatsnew/3.12.rst:54
msgid ":pep:`693` -- Python 3.12 Release Schedule"
msgstr ":pep:`693` -- Python 3.12 Utgivningsschema"

#: ../../whatsnew/3.12.rst:57
msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

#: ../../whatsnew/3.12.rst:62
msgid ""
"Python 3.12 is a stable release of the Python programming language, with a "
"mix of changes to the language and the standard library. The library changes "
"focus on cleaning up deprecated APIs, usability, and correctness. Of note, "
"the :mod:`!distutils` package has been removed from the standard library. "
"Filesystem support in :mod:`os` and :mod:`pathlib` has seen a number of "
"improvements, and several modules have better performance."
msgstr ""
"Python 3.12 är en stabil version av programmeringsspråket Python, med en "
"blandning av ändringar i språket och standardbiblioteket. "
"Biblioteksändringarna fokuserar på att rensa upp föråldrade API: er, "
"användbarhet och korrekthet. Noterbart är att paketet :mod:`!distutils` har "
"tagits bort från standardbiblioteket. Filsystemstödet i :mod:`os` och :mod:"
"`pathlib` har genomgått ett antal förbättringar och flera moduler har fått "
"bättre prestanda."

#: ../../whatsnew/3.12.rst:69
msgid ""
"The language changes focus on usability, as :term:`f-strings <f-string>` "
"have had many limitations removed and 'Did you mean ...' suggestions "
"continue to improve. The new :ref:`type parameter syntax <whatsnew312-"
"pep695>` and :keyword:`type` statement improve ergonomics for using :term:"
"`generic types <generic type>` and :term:`type aliases <type alias>` with "
"static type checkers."
msgstr ""
"Språkändringarna fokuserar på användbarhet, eftersom :term:`f-strings <f-"
"string>` har fått många begränsningar borttagna och \"Menade du ...\"-"
"förslag fortsätter att förbättras. Den nya :ref:`type parameter syntax "
"<whatsnew312-pep695>` och :keyword:`type` statement förbättrar ergonomin för "
"användning av :term:`generic types <generic type>` och :term:`type aliases "
"<type alias>` med statiska typkontrollanter."

#: ../../whatsnew/3.12.rst:76
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details, you "
"should refer to the documentation, such as the  :ref:`Library Reference "
"<library-index>` and :ref:`Language Reference <reference-index>`. If you "
"want to understand the complete implementation and design rationale for a "
"change, refer to the PEP for a particular new feature; but note that PEPs "
"usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av alla nya "
"funktioner, utan ger istället en praktisk översikt. För fullständig "
"information bör du läsa dokumentationen, t.ex. :ref:`Library Reference "
"<library-index>` och :ref:`Language Reference <reference-index>`. Om du vill "
"förstå den fullständiga implementeringen och designmotiveringen för en "
"ändring kan du läsa PEP:n för en viss ny funktion, men observera att PEP:er "
"vanligtvis inte uppdateras när en funktion har implementerats fullt ut."

#: ../../whatsnew/3.12.rst:90
msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

#: ../../whatsnew/3.12.rst:92
msgid ""
":ref:`PEP 695 <whatsnew312-pep695>`, type parameter syntax and the :keyword:"
"`type` statement"
msgstr ""
":ref:`PEP 695 <whatsnew312-pep695>`, syntax för typparametrar och :keyword:"
"`type`-satsen"

#: ../../whatsnew/3.12.rst:94
msgid "New grammar features:"
msgstr "Nya grammatiska funktioner:"

#: ../../whatsnew/3.12.rst:96
msgid ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` in the "
"grammar"
msgstr ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` i "
"grammatiken"

#: ../../whatsnew/3.12.rst:98
msgid "Interpreter improvements:"
msgstr "Förbättringar av tolkar:"

#: ../../whatsnew/3.12.rst:100
msgid ""
":ref:`PEP 684 <whatsnew312-pep684>`, a unique per-interpreter :term:`GIL "
"<global interpreter lock>`"
msgstr ""
":ref:`PEP 684 <whatsnew312-pep684>`, en unik per tolk :term:`GIL <global "
"interpreter lock>`"

#: ../../whatsnew/3.12.rst:102
msgid ":ref:`PEP 669 <whatsnew312-pep669>`, low impact monitoring"
msgstr ":ref:`PEP 669 <whatsnew312-pep669>`, övervakning med låg påverkan"

#: ../../whatsnew/3.12.rst:103
msgid ""
"`Improved 'Did you mean ...' suggestions <improved error messages_>`_ for :"
"exc:`NameError`, :exc:`ImportError`, and :exc:`SyntaxError` exceptions"
msgstr ""
"förbättrade \"Menade du ...\"-förslag <improved error messages_>`_ för "
"undantagen :exc:`NameError`, :exc:`ImportError` och :exc:`SyntaxError`"

#: ../../whatsnew/3.12.rst:106
msgid "Python data model improvements:"
msgstr "Förbättringar av Python-datamodellen:"

#: ../../whatsnew/3.12.rst:108
msgid ""
":ref:`PEP 688 <whatsnew312-pep688>`, using the :ref:`buffer protocol "
"<bufferobjects>` from Python"
msgstr ""
":ref:`PEP 688 <whatsnew312-pep688>`, använder :ref:`buffer protocol "
"<bufferobjects>` från Python"

#: ../../whatsnew/3.12.rst:111
msgid "Significant improvements in the standard library:"
msgstr "Betydande förbättringar i standardbiblioteket:"

#: ../../whatsnew/3.12.rst:113
msgid "The :class:`pathlib.Path` class now supports subclassing"
msgstr "Klassen :class:`pathlib.Path` har nu stöd för underklassning"

#: ../../whatsnew/3.12.rst:114
msgid "The :mod:`os` module received several improvements for Windows support"
msgstr "Modulen :mod:`os` har fått flera förbättringar för Windows-stöd"

#: ../../whatsnew/3.12.rst:115
msgid ""
"A :ref:`command-line interface <sqlite3-cli>` has been added to the :mod:"
"`sqlite3` module"
msgstr ""
"En :ref:``kommandoradsgränssnitt <sqlite3-cli>`` har lagts till i :mod:"
"`sqlite3`-modulen"

#: ../../whatsnew/3.12.rst:117
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` enjoy a speed up of between two and 20 times"
msgstr ""
":func:`isinstance` kontrollerar mot :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` med en hastighet på mellan två och 20 gånger"

#: ../../whatsnew/3.12.rst:119
msgid ""
"The :mod:`asyncio` package has had a number of performance improvements, "
"with some benchmarks showing a 75% speed up."
msgstr ""
"Paketet :mod:`asyncio` har fått ett antal prestandaförbättringar, och vissa "
"benchmarks visar en 75% speed up."

#: ../../whatsnew/3.12.rst:121
msgid ""
"A :ref:`command-line interface <uuid-cli>` has been added to the :mod:`uuid` "
"module"
msgstr ""
"En :ref:``kommandoradsgränssnitt <uuid-cli>`` har lagts till i :mod:`uuid`-"
"modulen"

#: ../../whatsnew/3.12.rst:123
msgid ""
"Due to the changes in :ref:`PEP 701 <whatsnew312-pep701>`, producing tokens "
"via the :mod:`tokenize` module is up to 64% faster."
msgstr ""
"På grund av ändringarna i :ref:`PEP 701 <whatsnew312-pep701>` är det möjligt "
"att producera tokens via modulen :mod:`tokenize` upp till 64% faster."

#: ../../whatsnew/3.12.rst:126
msgid "Security improvements:"
msgstr "Förbättringar av säkerheten:"

#: ../../whatsnew/3.12.rst:128
msgid ""
"Replace the builtin :mod:`hashlib` implementations of SHA1, SHA3, SHA2-384, "
"SHA2-512, and MD5 with formally verified code from the `HACL* <https://"
"github.com/hacl-star/hacl-star/>`__ project. These builtin implementations "
"remain as fallbacks that are only used when OpenSSL does not provide them."
msgstr ""
"Ersätt de inbyggda :mod:`hashlib`-implementeringarna av SHA1, SHA3, "
"SHA2-384, SHA2-512 och MD5 med formellt verifierad kod från projektet `HACL* "
"<https://github.com/hacl-star/hacl-star/>`__. Dessa inbyggda "
"implementeringar finns kvar som fallbacks som endast används när OpenSSL "
"inte tillhandahåller dem."

#: ../../whatsnew/3.12.rst:134
msgid "C API improvements:"
msgstr "Förbättringar av C API:"

#: ../../whatsnew/3.12.rst:136
msgid ":ref:`PEP 697 <whatsnew312-pep697>`, unstable C API tier"
msgstr ":ref:`PEP 697 <whatsnew312-pep697>`, instabil C API-nivå"

#: ../../whatsnew/3.12.rst:137
msgid ":ref:`PEP 683 <whatsnew312-pep683>`, immortal objects"
msgstr ":ref:`PEP 683 <whatsnew312-pep683>`, odödliga föremål"

#: ../../whatsnew/3.12.rst:139
msgid "CPython implementation improvements:"
msgstr "Förbättringar av CPython-implementeringen:"

#: ../../whatsnew/3.12.rst:141
msgid ":ref:`PEP 709 <whatsnew312-pep709>`, comprehension inlining"
msgstr ":ref:`PEP 709 <whatsnew312-pep709>`, förståelse inlining"

#: ../../whatsnew/3.12.rst:142
msgid ":ref:`CPython support <perf_profiling>` for the Linux ``perf`` profiler"
msgstr ":ref:`CPython-stöd <perf_profiling>` för Linux-profileraren ``perf``"

#: ../../whatsnew/3.12.rst:143
msgid "Implement stack overflow protection on supported platforms"
msgstr "Implementera stack overflow-skydd på plattformar som stöds"

#: ../../whatsnew/3.12.rst:145
msgid "New typing features:"
msgstr "Nya funktioner för skrivning:"

#: ../../whatsnew/3.12.rst:147
msgid ""
":ref:`PEP 692 <whatsnew312-pep692>`, using :class:`~typing.TypedDict` to "
"annotate :term:`**kwargs <argument>`"
msgstr ""
":ref:`PEP 692 <whatsnew312-pep692>`, använder :class:`~typing.TypedDict` för "
"att annotera :term:`**kwargs <argument>`"

#: ../../whatsnew/3.12.rst:149
msgid ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` decorator"
msgstr ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` dekorator"

#: ../../whatsnew/3.12.rst:151
msgid "Important deprecations, removals or restrictions:"
msgstr "Viktiga avskrivningar, borttagningar eller begränsningar:"

#: ../../whatsnew/3.12.rst:153
msgid ""
":pep:`623`: Remove ``wstr`` from Unicode objects in Python's C API, reducing "
"the size of every :class:`str` object by at least 8 bytes."
msgstr ""
":pep:`623`: Ta bort ``wstr`` från Unicode-objekt i Pythons C API, vilket "
"minskar storleken på varje :class:`str`-objekt med minst 8 byte."

#: ../../whatsnew/3.12.rst:156
msgid ""
":pep:`632`: Remove the :mod:`!distutils` package. See :pep:`the migration "
"guide <0632#migration-advice>` for advice replacing the APIs it provided. "
"The third-party `Setuptools <https://setuptools.pypa.io/en/latest/deprecated/"
"distutils-legacy.html>`__ package continues to provide :mod:`!distutils`, if "
"you still require it in Python 3.12 and beyond."
msgstr ""
":pep:`632`: Ta bort paketet :mod:`!distutils`. Se :pep:``migreringsguiden "
"<0632#migreringsråd>` för råd om att ersätta de API:er som paketet "
"tillhandahöll. Tredjepartspaketet `Setuptools <https://setuptools.pypa.io/en/"
"latest/deprecated/distutils-legacy.html>`__ fortsätter att tillhandahålla :"
"mod:`!distutils`, om du fortfarande behöver det i Python 3.12 och senare."

#: ../../whatsnew/3.12.rst:163
msgid ""
":gh:`95299`: Do not pre-install ``setuptools`` in virtual environments "
"created with :mod:`venv`. This means that ``distutils``, ``setuptools``, "
"``pkg_resources``, and ``easy_install`` will no longer available by default; "
"to access these run ``pip install setuptools`` in the :ref:`activated <venv-"
"explanation>` virtual environment."
msgstr ""
":gh:`95299`: Förinstallera inte ``setuptools`` i virtuella miljöer skapade "
"med :mod:`venv`. Detta innebär att ``distutils``, ``setuptools``, "
"``pkg_resources`` och ``easy_install`` inte längre kommer att vara "
"tillgängliga som standard; för att få tillgång till dessa kör ``pip install "
"setuptools`` i den virtuella miljön :ref:`activated <venv-explanation>`."

#: ../../whatsnew/3.12.rst:170
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore`, and :mod:`!imp` modules have been "
"removed, along with several :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."
msgstr ""
"Modulerna :mod:`!asynchat`, :mod:`!asyncore`, och :mod:`!imp` har tagits "
"bort, tillsammans med flera :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."

#: ../../whatsnew/3.12.rst:176 ../../whatsnew/3.12.rst:1842
msgid "New Features"
msgstr "Nya funktioner"

#: ../../whatsnew/3.12.rst:181
msgid "PEP 695: Type Parameter Syntax"
msgstr "PEP 695: Typ Parameter Syntax"

#: ../../whatsnew/3.12.rst:183
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose "
"syntax that left the scope of type parameters unclear and required explicit "
"declarations of variance."
msgstr ""
"Generiska klasser och funktioner under :pep:`484` deklarerades med en "
"mångordig syntax som lämnade omfattningen av typparametrar oklar och krävde "
"uttryckliga variansdeklarationer."

#: ../../whatsnew/3.12.rst:187
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create :ref:"
"`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""
":pep:`695` introducerar ett nytt, mer kompakt och explicit sätt att skapa :"
"ref:`generiska klasser <generic-classes>` och :ref:`funktioner <generic-"
"functions>`::"

#: ../../whatsnew/3.12.rst:190
msgid ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."
msgstr ""
"def max[T](args: Iterabel[T]) -> T:\n"
"    ...\n"
"\n"
"klass lista[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."

#: ../../whatsnew/3.12.rst:200
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""
"Dessutom introducerar PEP ett nytt sätt att deklarera :ref:`typalias <type-"
"aliases>` med hjälp av :keyword:`type`-satsen, som skapar en instans av :"
"class:`~typing.TypeAliasType`::"

#: ../../whatsnew/3.12.rst:204
msgid "type Point = tuple[float, float]"
msgstr "typ Point = tuple[float, float]"

#: ../../whatsnew/3.12.rst:206
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr "Typaliaser kan också vara :ref:`generic <generic-type-aliases>`::"

#: ../../whatsnew/3.12.rst:208
msgid "type Point[T] = tuple[T, T]"
msgstr "typ Punkt[T] = tupel[T, T]"

#: ../../whatsnew/3.12.rst:210
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and :class:"
"`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""
"Den nya syntaxen gör det möjligt att deklarera :class:`~typing.TypeVarTuple` "
"och :class:`~typing.ParamSpec` parametrar, samt :class:`~typing.TypeVar` "
"parametrar med gränser eller begränsningar::"

#: ../../whatsnew/3.12.rst:214
msgid ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with "
"constraints"
msgstr ""
"type IntFunc[**P] = Kallbar[P, int] # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts] # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T] # TypeVar med bindning\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T] # TypeVar med "
"begränsningar"

#: ../../whatsnew/3.12.rst:219
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy "
"evaluation <lazy-evaluation>`). This means type aliases are able to refer to "
"other types defined later in the file."
msgstr ""
"Värdet på typalias och bindningen och begränsningarna för typvariabler som "
"skapats med denna syntax utvärderas endast på begäran (se :ref:``lazy "
"evaluation <lazy-evaluation>``). Detta innebär att typalias kan referera "
"till andra typer som definieras senare i filen."

#: ../../whatsnew/3.12.rst:224
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods "
"of a generic class or in the class body. However, they cannot be used in the "
"module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""
"Typparametrar som deklareras via en typparameterlista är synliga inom "
"deklarationens scope och eventuella nästlade scopes, men inte i det yttre "
"scopet. De kan t.ex. användas i typannoteringarna för metoderna i en "
"generisk klass eller i klassens kropp. De kan dock inte användas i "
"modulscopet efter att klassen har definierats. Se :ref:`type-params` för en "
"detaljerad beskrivning av runtime-semantiken för typ-parametrar."

#: ../../whatsnew/3.12.rst:231
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""
"För att stödja denna scopingsemantik introduceras en ny typ av scope, :ref:"
"`annotation scope <annotation-scopes>`. Annotationsscopes beter sig för det "
"mesta som funktionsscopes, men interagerar annorlunda med omslutande "
"klasscopes. I Python 3.13 kommer :term:`annotations <annotation>` också att "
"utvärderas i annotation scopes."

#: ../../whatsnew/3.12.rst:237
msgid "See :pep:`695` for more details."
msgstr "Se :pep:`695` för mer information."

#: ../../whatsnew/3.12.rst:239
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""
"(PEP skriven av Eric Traut. Implementering av Jelle Zijlstra, Eric Traut, "
"och andra i :gh:`103764`.)"

#: ../../whatsnew/3.12.rst:245
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr "PEP 701: Syntaktisk formalisering av f-strängar"

#: ../../whatsnew/3.12.rst:247
msgid ""
":pep:`701` lifts some restrictions on the usage of :term:`f-strings <f-"
"string>`. Expression components inside f-strings can now be any valid Python "
"expression, including strings reusing the same quote as the containing f-"
"string, multi-line expressions, comments, backslashes, and unicode escape "
"sequences. Let's cover these in detail:"
msgstr ""
":pep:`701` lyfter vissa restriktioner för användningen av :term:`f-strings "
"<f-string>`. Uttryckskomponenter inuti f-strings kan nu vara vilket giltigt "
"Python-uttryck som helst, inklusive strängar som återanvänder samma citat "
"som den innehållande f-stringen, flerradiga uttryck, kommentarer, backslash "
"och unicode-escape-sekvenser. Låt oss gå igenom dessa i detalj:"

#: ../../whatsnew/3.12.rst:253
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the enclosing f-"
"string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""
"Återanvändning av citat: i Python 3.11 ger återanvändning av samma citat som "
"den omslutande f-strängen ett :exc:`SyntaxError`, vilket tvingar användaren "
"att antingen använda andra tillgängliga citat (som att använda dubbla citat "
"eller trippelcitat om f-strängen använder enkla citat). I Python 3.12 kan du "
"nu göra saker som detta:"

#: ../../whatsnew/3.12.rst:262
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be written:"
msgstr ""
"Observera att det före denna ändring inte fanns någon uttrycklig gräns för "
"hur f-strängar kan nästlas, men det faktum att strängcitat inte kan "
"återanvändas i uttryckskomponenten i f-strängar gjorde det omöjligt att "
"nästla f-strängar godtyckligt. Faktum är att detta är den mest nästlade f-"
"sträng som kan skrivas:"

#: ../../whatsnew/3.12.rst:270
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr ""
"Eftersom f-strängar nu kan innehålla alla giltiga Python-uttryck inuti "
"uttryckskomponenter är det nu möjligt att nesta f-strängar godtyckligt:"

#: ../../whatsnew/3.12.rst:276
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-string expressions "
"must be defined in a single line, even if the expression within the f-string "
"could normally span multiple lines (like literal lists being defined over "
"multiple lines), making them harder to read. In Python 3.12 you can now "
"define f-strings spanning multiple lines, and add inline comments:"
msgstr ""
"Uttryck och kommentarer på flera rader: I Python 3.11 måste f-stränguttryck "
"definieras på en enda rad, även om uttrycket i f-strängen normalt kan "
"sträcka sig över flera rader (som bokstavslistor som definieras över flera "
"rader), vilket gör dem svårare att läsa. I Python 3.12 kan du nu definiera f-"
"strängar som sträcker sig över flera rader och lägga till inline-kommentarer:"

#: ../../whatsnew/3.12.rst:290
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode :ref:"
"`escape sequences <escape-sequences>` (such as ``\\N{snowman}``) as these "
"contain the ``\\N`` part that previously could not be part of expression "
"components of f-strings. Now, you can define expressions like this:"
msgstr ""
"Backslashes och unicode-tecken: före Python 3.12 kunde f-string-uttryck inte "
"innehålla något `````-tecken. Detta påverkade även unicode :ref:`escape-"
"sekvenser <escape-sequences>` (som ``\\N{snowman}``) eftersom dessa "
"innehåller ``\\N``-delen som tidigare inte kunde vara en del av "
"uttryckskomponenter i f-strängar. Nu kan du definiera uttryck så här:"

#: ../../whatsnew/3.12.rst:303
msgid "See :pep:`701` for more details."
msgstr "Se :pep:`701` för mer information."

#: ../../whatsnew/3.12.rst:305
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with :pep:`the PEG parser <617>`), now error messages for "
"f-strings are more precise and include the exact location of the error. For "
"example, in Python 3.11, the following f-string raises a :exc:`SyntaxError`:"
msgstr ""
"Som en positiv bieffekt av hur denna funktion har implementerats (genom att "
"analysera f-strängar med :pep:`the PEG parser <617>`), är nu felmeddelanden "
"för f-strängar mer exakta och inkluderar den exakta platsen för felet. Till "
"exempel, i Python 3.11, ger följande f-sträng upphov till ett :exc:"
"`SyntaxError`:"

#: ../../whatsnew/3.12.rst:310
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
"&gt;&gt;&gt; min_sträng = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  Fil \"<stdin>\", rad 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: ogiltig syntax. Du kanske glömde ett kommatecken?"

#: ../../whatsnew/3.12.rst:318
msgid ""
"but the error message doesn't include the exact location of the error within "
"the line and also has the expression artificially surrounded by parentheses. "
"In Python 3.12, as f-strings are parsed with the PEG parser, error messages "
"can be more precise and show the entire line:"
msgstr ""
"men felmeddelandet innehåller inte den exakta platsen för felet inom raden "
"och har också uttrycket artificiellt omgivet av parenteser. I Python 3.12, "
"när f-strängar analyseras med PEG-parsern, kan felmeddelanden vara mer "
"exakta och visa hela raden:"

#: ../../whatsnew/3.12.rst:322
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
"&gt;&gt;&gt; min_sträng = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  Fil \"<stdin>\", rad 1\n"
"    min_sträng = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: ogiltig syntax. Du kanske glömde ett kommatecken?"

#: ../../whatsnew/3.12.rst:330
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""
"(Bidrag från Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes och Marta Gómez i :gh:`102856`. PEP skriven av Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou och Marta Gómez)."

#: ../../whatsnew/3.12.rst:337
msgid "PEP 684: A Per-Interpreter GIL"
msgstr "PEP 684: En per-tolk GIL"

#: ../../whatsnew/3.12.rst:339
msgid ""
":pep:`684` introduces a per-interpreter :term:`GIL <global interpreter "
"lock>`, so that sub-interpreters may now be created with a unique GIL per "
"interpreter. This allows Python programs to take full advantage of multiple "
"CPU cores. This is currently only available through the C-API, though a "
"Python API is :pep:`anticipated for 3.13 <554>`."
msgstr ""
":pep:`684` introducerar en per-tolk :term:`GIL <global interpreter lock>`, "
"så att undertolkare nu kan skapas med en unik GIL per tolk. Detta gör det "
"möjligt för Python-program att dra full nytta av flera CPU-kärnor. Detta är "
"för närvarande endast tillgängligt via C-API, men ett Python-API är :pep:"
"`förväntat till 3.13 <554>`."

#: ../../whatsnew/3.12.rst:345
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL:"
msgstr ""
"Använd den nya funktionen :c:func:`Py_NewInterpreterFromConfig` för att "
"skapa en tolk med en egen GIL:"

#: ../../whatsnew/3.12.rst:348
msgid ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* The new interpreter is now active in the current thread. */"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* Den nya tolken är nu aktiv i den aktuella tråden. */"

#: ../../whatsnew/3.12.rst:361
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see ``Modules/_xxsubinterpretersmodule.c``."
msgstr ""
"För ytterligare exempel på hur man använder C-API för undertolkar med en GIL "
"per tolk, se ``Modules/_xxsubinterpretersmodule.c``."

#: ../../whatsnew/3.12.rst:364
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr "(Bidrag från Eric Snow i :gh:`104210`, etc.)"

#: ../../whatsnew/3.12.rst:369
msgid "PEP 669: Low impact monitoring for CPython"
msgstr "PEP 669: Övervakning med låg påverkan för CPython"

#: ../../whatsnew/3.12.rst:371
msgid ""
":pep:`669` defines a new :mod:`API <sys.monitoring>` for profilers, "
"debuggers, and other tools to monitor events in CPython. It covers a wide "
"range of events, including calls, returns, lines, exceptions, jumps, and "
"more. This means that you only pay for what you use, providing support for "
"near-zero overhead debuggers and coverage tools. See  :mod:`sys.monitoring` "
"for details."
msgstr ""
":pep:`669` definierar ett nytt :mod:`API <sys.monitoring>` för profilerare, "
"debuggers och andra verktyg för att övervaka händelser i CPython. Det täcker "
"ett brett spektrum av händelser, inklusive anrop, returer, rader, undantag, "
"hopp och mer. Detta innebär att du bara betalar för det du använder, vilket "
"ger stöd för debuggar och täckningsverktyg med nästan noll overhead. Se :mod:"
"`sys.monitoring` för mer information."

#: ../../whatsnew/3.12.rst:379
msgid "(Contributed by Mark Shannon in :gh:`103082`.)"
msgstr "(Bidrag från Mark Shannon i :gh:`103082`.)"

#: ../../whatsnew/3.12.rst:384
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr "PEP 688: Att göra buffertprotokollet tillgängligt i Python"

#: ../../whatsnew/3.12.rst:386
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the :meth:`~object."
"__buffer__` method are now usable as buffer types."
msgstr ""
":pep:`688` introducerar ett sätt att använda :ref:`buffer protocol "
"<bufferobjects>` från Python-kod. Klasser som implementerar metoden :meth:"
"`~object.__buffer__` är nu användbara som bufferttyper."

#: ../../whatsnew/3.12.rst:390
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new :class:"
"`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""
"Den nya :class:`collections.abc.Buffer` ABC ger ett standardiserat sätt att "
"representera buffertobjekt, t.ex. i typannoteringar. Den nya :class:`inspect."
"BufferFlags` enum representerar de flaggor som kan användas för att anpassa "
"skapandet av buffertar. (Bidrag från Jelle Zijlstra i :gh:`102500`.)"

#: ../../whatsnew/3.12.rst:399
msgid "PEP 709: Comprehension inlining"
msgstr "PEP 709: Förståelse för inlining"

#: ../../whatsnew/3.12.rst:401
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to two "
"times. See :pep:`709` for further details."
msgstr ""
"Dictionary-, list- och set-förståelser är nu inline, i stället för att skapa "
"ett nytt funktionsobjekt för engångsbruk för varje körning av förståelsen. "
"Detta snabbar upp exekveringen av en förståelse med upp till två gånger. Se :"
"pep:`709` för ytterligare detaljer."

#: ../../whatsnew/3.12.rst:406
msgid ""
"Comprehension iteration variables remain isolated and don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the "
"comprehension. Inlining does result in a few visible behavior changes:"
msgstr ""
"Variabler för förståelseiteration förblir isolerade och skriver inte över en "
"variabel med samma namn i det yttre omfånget, och de är inte heller synliga "
"efter förståelsen. Inlining resulterar i några synliga beteendeförändringar:"

#: ../../whatsnew/3.12.rst:410
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and "
"tracing/profiling no longer shows the comprehension as a function call."
msgstr ""
"Det finns inte längre någon separat ram för förståelsen i spårningar, och "
"spårning/profilering visar inte längre förståelsen som ett funktionsanrop."

#: ../../whatsnew/3.12.rst:412
msgid ""
"The :mod:`symtable` module will no longer produce child symbol tables for "
"each comprehension; instead, the comprehension's locals will be included in "
"the parent function's symbol table."
msgstr ""
"Modulen :mod:`symtable` kommer inte längre att producera underordnade "
"symboltabeller för varje förståelse; istället kommer förståelsens lokala "
"symboler att inkluderas i den överordnade funktionens symboltabell."

#: ../../whatsnew/3.12.rst:415
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr ""
"Anrop av :func:`locals` inuti en förståelse inkluderar nu variabler från "
"utanför förståelsen, och inkluderar inte längre den syntetiska ``.0``-"
"variabeln för förståelsen \"argument\"."

#: ../../whatsnew/3.12.rst:418
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is "
"the same behavior already seen in e.g. ``for k in locals():``. To avoid the "
"error, first create a list of keys to iterate over: ``keys = list(locals()); "
"[k for k in keys]``."
msgstr ""
"En förståelse som itererar direkt över ``locals() `` (t.ex. ``[k for k in "
"locals()]``) kan se \"RuntimeError: dictionary changed size during "
"iteration\" när den körs under spårning (t.ex. mätning av kodtäckning). "
"Detta är samma beteende som redan setts i t.ex. ``for k in locals():``. För "
"att undvika felet skapar du först en lista med nycklar att iterera över: "
"``keys = list(locals()); [k for k in keys]``."

#: ../../whatsnew/3.12.rst:425
msgid "(Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`.)"
msgstr "(Bidrag från Carl Meyer och Vladimir Matveev i :pep:`709`.)"

#: ../../whatsnew/3.12.rst:428
msgid "Improved Error Messages"
msgstr "Förbättrade felmeddelanden"

#: ../../whatsnew/3.12.rst:430
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. (Contributed by Pablo Galindo in :gh:`98254`.)"
msgstr ""
"Moduler från standardbiblioteket kan nu potentiellt föreslås som en del av "
"de felmeddelanden som tolken visar när ett :exc:`NameError` lyfts till "
"högsta nivån. (Bidrag från Pablo Galindo i :gh:`98254`.)"

#: ../../whatsnew/3.12.rst:439
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. (Contributed by Pablo Galindo in :gh:`99139`.)"
msgstr ""
"Förbättra felförslaget för :exc:`NameError`-undantag för instanser. Nu om "
"ett :exc:`NameError` uppstår i en metod och instansen har ett attribut som "
"är exakt lika med namnet i undantaget, kommer förslaget att inkludera ``self."
"<NAME>`` istället för den närmaste matchningen i metodomfånget. (Bidrag från "
"Pablo Galindo i :gh:`99139`.)"

#: ../../whatsnew/3.12.rst:459
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. (Contributed by Pablo Galindo in :"
"gh:`98931`.)"
msgstr ""
"Förbättra felmeddelandet :exc:`SyntaxError` när användaren skriver ``import "
"x from y`` istället för ``from y import x``. (Bidrag från Pablo Galindo i :"
"gh:`98931`.)"

#: ../../whatsnew/3.12.rst:469
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. (Contributed by Pablo Galindo "
"in :gh:`91058`.)"
msgstr ""
":exc:`ImportError` undantag som uppstår från misslyckade ``from <module> "
"import <name>`` satser innehåller nu förslag på värdet för ``<name>`` "
"baserat på de tillgängliga namnen i ``<module>``. (Bidrag från Pablo Galindo "
"i :gh:`91058`.)"

#: ../../whatsnew/3.12.rst:480
msgid "New Features Related to Type Hints"
msgstr "Nya funktioner relaterade till typtips"

#: ../../whatsnew/3.12.rst:482
msgid ""
"This section covers major changes affecting :pep:`type hints <484>` and the :"
"mod:`typing` module."
msgstr ""
"Det här avsnittet behandlar större ändringar som påverkar :pep:`type hints "
"<484>` och modulen :mod:`typing`."

#: ../../whatsnew/3.12.rst:488
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr "PEP 692: Använda ``TypedDict`` för mer exakt ``**kwargs`` typning"

#: ../../whatsnew/3.12.rst:490
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""
"Typning av ``**kwargs`` i en funktionssignatur som introducerades av :pep:"
"`484` tillät giltiga annoteringar endast i de fall där alla ``**kwargs`` var "
"av samma typ."

#: ../../whatsnew/3.12.rst:494
msgid ""
":pep:`692` specifies a more precise way of typing ``**kwargs`` by relying on "
"typed dictionaries::"
msgstr ""
":pep:`692` specificerar ett mer exakt sätt att skriva ``**kwargs`` genom att "
"förlita sig på typade ordlistor::"

#: ../../whatsnew/3.12.rst:497
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"från typing import TypedDict, Packa upp\n"
"\n"
"klass Film(TypedDict):\n"
"  namn: str\n"
"  år: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../whatsnew/3.12.rst:505
msgid "See :pep:`692` for more details."
msgstr "Se :pep:`692` för mer information."

#: ../../whatsnew/3.12.rst:507
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr "(Bidrag från Franek Magiera i :gh:`103629`.)"

#: ../../whatsnew/3.12.rst:512
msgid "PEP 698: Override Decorator for Static Typing"
msgstr "PEP 698: Dekorator för överskrivning av statisk typning"

#: ../../whatsnew/3.12.rst:514
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""
"En ny dekorator :func:`typing.override` har lagts till i modulen :mod:"
"`typing`. Den indikerar för typkontrollanter att metoden är avsedd att "
"åsidosätta en metod i en superklass. Detta gör det möjligt för "
"typkontrollanter att upptäcka misstag där en metod som är avsedd att "
"åsidosätta något i en basklass i själva verket inte gör det."

#: ../../whatsnew/3.12.rst:520
msgid "Example::"
msgstr "Exempel::"

#: ../../whatsnew/3.12.rst:522
msgid ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # ok: overrides Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # type checker error: does not override Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""
msgstr ""
"från typning import åsidosätta\n"
"\n"
"klass Bas:\n"
"  def get_color(self) -> str:\n"
"    return \"blå\"\n"
"\n"
"klass GoodChild(Base):\n"
"  @override # ok: åsidosätter Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"gul\"\n"
"\n"
"klass BadChild(Bas):\n"
"  @override # typkontrollfel: åsidosätter inte Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"röd\""

#: ../../whatsnew/3.12.rst:538
msgid "See :pep:`698` for more details."
msgstr "Se :pep:`698` för mer information."

#: ../../whatsnew/3.12.rst:540
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr "(Bidrag från Steven Troxler i :gh:`101561`.)"

#: ../../whatsnew/3.12.rst:543
msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

#: ../../whatsnew/3.12.rst:545
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing "
"null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""
"Parsern visar nu :exc:`SyntaxError` vid parsning av källkod som innehåller "
"nollbytes. (Bidrag från Pablo Galindo i :gh:`96670`.)"

#: ../../whatsnew/3.12.rst:548
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence, use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``). In a future Python version, :"
"exc:`SyntaxError` will eventually be raised, instead of :exc:"
"`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"Ett backslash-teckenpar som inte är en giltig escape-sekvens genererar nu "
"en :exc:`SyntaxWarning`, istället för :exc:`DeprecationWarning`. Till "
"exempel, ``re.compile(\"\\d+\\.\\d+\")`` avger nu en :exc:`SyntaxWarning` "
"(``\"\\d\"`` är en ogiltig escape-sekvens, använd råa strängar för reguljärt "
"uttryck: ``re.compile(r\"\\d+\\.\\d+\")``). I en framtida Python-version "
"kommer :exc:`SyntaxError` så småningom att visas istället för :exc:"
"`SyntaxWarning`. (Bidrag från Victor Stinner i :gh:`98401`.)"

#: ../../whatsnew/3.12.rst:557
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of :"
"exc:`DeprecationWarning`. In a future Python version they will be eventually "
"a :exc:`SyntaxError`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"Oktala escapes med värde större än ``0o377`` (ex: ``\"\\477\"``), föråldrade "
"i Python 3.11, ger nu en :exc:`SyntaxWarning`, istället för :exc:"
"`DeprecationWarning`. I en framtida Python-version kommer de så småningom "
"att vara :exc:`SyntaxError`. (Bidrag från Victor Stinner i :gh:`98401`.)"

#: ../../whatsnew/3.12.rst:563
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b := "
"1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""
"Variabler som används i måldelen av förståelser som inte lagras till kan nu "
"användas i tilldelningsuttryck (``:=``). I exempelvis ``[(b := 1) for a, b."
"prop in some_iter]`` är det nu tillåtet att tilldela ``b``. Observera att "
"tilldelning till variabler som lagras i måldelen av förståelser (som ``a``) "
"fortfarande är otillåten, enligt :pep:`572`. (Bidrag från Nikita Sobolev i :"
"gh:`100581`.)"

#: ../../whatsnew/3.12.rst:570
msgid ""
"Exceptions raised in a class or type's ``__set_name__`` method are no longer "
"wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in :gh:`77757`.)"
msgstr ""
"Undantag som uppstår i en klass eller typs ``__set_name__``-metod omsluts "
"inte längre av ett :exc:`RuntimeError`. Kontextinformation läggs till "
"undantaget som en :pep:`678`-anteckning. (Bidrag från Irit Katriel i :gh:"
"`77757`.)"

#: ../../whatsnew/3.12.rst:574
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an :"
"exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""
"När en ``try-except*``-konstruktion hanterar hela :exc:`ExceptionGroup` och "
"ger upphov till ett annat undantag, är det undantaget inte längre inslaget i "
"en :exc:`ExceptionGroup`. Ändrades även i version 3.11.4. (Bidrag från Irit "
"Katriel i :gh:`103590`.)"

#: ../../whatsnew/3.12.rst:579
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in :gh:"
"`97922`.)"
msgstr ""
"Garbage Collector körs nu endast på eval breaker-mekanismen i Pythons "
"bytecode-utvärderingsloop istället för på objektallokeringar. GC kan också "
"köras när :c:func:`PyErr_CheckSignals` anropas så att C-tillägg som behöver "
"köras under lång tid utan att köra någon Python-kod också har en chans att "
"köra GC periodiskt. (Bidrag från Pablo Galindo i :gh:`97922`.)"

#: ../../whatsnew/3.12.rst:586
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""
"Alla inbyggda och utökade anrop som förväntar sig booleska parametrar "
"accepterar nu argument av alla typer istället för bara :class:`bool` och :"
"class:`int`. (Bidrag från Serhiy Storchaka i :gh:`60203`.)"

#: ../../whatsnew/3.12.rst:590
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Donghee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""
":class:`memoryview` har nu stöd för typen half-float (formatkoden \"e\"). "
"(Bidrag från Donghee Na och Antoine Pitrou i :gh:`90751`.)"

#: ../../whatsnew/3.12.rst:593
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond "
"Hettinger in :gh:`101264`.)"
msgstr ""
":class:`slice`-objekt är nu hashbara, vilket gör att de kan användas som "
"dict-nycklar och set-objekt. (Bidrag från Will Bradshaw, Furkan Onder och "
"Raymond Hettinger i :gh:`101264`.)"

#: ../../whatsnew/3.12.rst:596
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy and "
"commutativity when summing floats or mixed ints and floats. (Contributed by "
"Raymond Hettinger in :gh:`100425`.)"
msgstr ""
":func:`sum` använder nu Neumaier-summering för att förbättra noggrannhet och "
"kommutativitet vid summering av flyttal eller blandade ints och flyttal. "
"(Bidrag från Raymond Hettinger i :gh:`100425`.)"

#: ../../whatsnew/3.12.rst:600
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError` "
"when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""
":func:`ast.parse` visar nu :exc:`SyntaxError` istället för :exc:`ValueError` "
"när källkod som innehåller null bytes analyseras. (Bidrag från Pablo Galindo "
"i :gh:`96670`.)"

#: ../../whatsnew/3.12.rst:604
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile extraction filters <tarfile-extraction-filter>` "
"for details. In Python 3.14, the default will switch to ``'data'``. "
"(Contributed by Petr Viktorin in :pep:`706`.)"
msgstr ""
"Extraktionsmetoderna i :mod:`tarfile` och :func:`shutil.unpack_archive` har "
"ett nytt *filter*-argument som gör det möjligt att begränsa tar-funktioner "
"som kan vara överraskande eller farliga, t.ex. att skapa filer utanför "
"destinationskatalogen. Se :ref:``tarfile extraction filters <tarfile-"
"extraction-filter>`` för mer information. I Python 3.14 kommer "
"standardinställningen att byta till ``'data'``. (Bidrag från Petr Viktorin "
"i :pep:`706`.)"

#: ../../whatsnew/3.12.rst:612
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying "
"mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""
":class:`types.MappingProxyType`-instanser är nu hashbara om den "
"underliggande mappningen är hashbar. (Bidrag från Serhiy Storchaka i :gh:"
"`87995`.)"

#: ../../whatsnew/3.12.rst:616
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` through the new "
"environment variable :envvar:`PYTHONPERFSUPPORT` and command-line option :"
"option:`-X perf <-X>`, as well as the new :func:`sys."
"activate_stack_trampoline`, :func:`sys.deactivate_stack_trampoline`, and :"
"func:`sys.is_stack_trampoline_active` functions. (Design by Pablo Galindo. "
"Contributed by Pablo Galindo and Christian Heimes with contributions from "
"Gregory P. Smith [Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"Lägg till :ref:`stöd för perf profiler <perf_profiling>` genom den nya "
"miljövariabeln :envvar:`PYTHONPERFSUPPORT` och kommandoradsalternativet :"
"option:`-X perf <-X>`, samt de nya funktionerna :func:`sys."
"activate_stack_trampoline`, :func:`sys.deactivate_stack_trampoline` och :"
"func:`sys.is_stack_trampoline_active`. (Design av Pablo Galindo. Bidrag från "
"Pablo Galindo och Christian Heimes med bidrag från Gregory P. Smith [Google] "
"och Mark Shannon i :gh:`96123`)"

#: ../../whatsnew/3.12.rst:628
msgid "New Modules"
msgstr "Nya moduler"

#: ../../whatsnew/3.12.rst:630
msgid "None."
msgstr "Ingen."

#: ../../whatsnew/3.12.rst:634
msgid "Improved Modules"
msgstr "Förbättrade moduler"

#: ../../whatsnew/3.12.rst:637
msgid "array"
msgstr "array"

#: ../../whatsnew/3.12.rst:639
msgid ""
"The :class:`array.array` class now supports subscripting, making it a :term:"
"`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""
"Klassen :class:`array.array` har nu stöd för subskription, vilket gör den "
"till en :term:`generisk typ`. (Bidrag från Jelle Zijlstra i :gh:`98658`.)"

#: ../../whatsnew/3.12.rst:643
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.12.rst:645
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""
"Prestandan för att skriva till sockets i :mod:`asyncio` har förbättrats "
"avsevärt. ``asyncio`` undviker nu onödig kopiering när man skriver till "
"sockets och använder :meth:`~socket.socket.sendmsg` om plattformen stöder "
"det. (Bidrag från Kumar Aditya i :gh:`91166`.)"

#: ../../whatsnew/3.12.rst:650
msgid ""
"Add :func:`asyncio.eager_task_factory` and :func:`asyncio."
"create_eager_task_factory` functions to allow opting an event loop in to "
"eager task execution, making some use-cases 2x to 5x faster. (Contributed by "
"Jacob Bower & Itamar Oren in :gh:`102853`, :gh:`104140`, and :gh:`104138`)"
msgstr ""
"Lägg till funktionerna :func:`asyncio.eager_task_factory` och :func:`asyncio."
"create_eager_task_factory` för att göra det möjligt att välja en "
"händelseslinga för att utföra eager-uppgifter, vilket gör vissa "
"användningsfall 2x till 5x snabbare. (Bidrag från Jacob Bower & Itamar Oren "
"i :gh:`102853`, :gh:`104140`, och :gh:`104138`)"

#: ../../whatsnew/3.12.rst:655
msgid ""
"On Linux, :mod:`asyncio` uses :class:`!asyncio.PidfdChildWatcher` by default "
"if :func:`os.pidfd_open` is available and functional instead of :class:`!"
"asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in :gh:`98024`.)"
msgstr ""
"På Linux använder :mod:`asyncio` :class:`!asyncio.PidfdChildWatcher` som "
"standard om :func:`os.pidfd_open` är tillgänglig och fungerar istället för :"
"class:`!asyncio.ThreadedChildWatcher`. (Bidrag från Kumar Aditya i :gh:"
"`98024`.)"

#: ../../whatsnew/3.12.rst:660
msgid ""
"The event loop now uses the best available child watcher for each platform (:"
"class:`!asyncio.PidfdChildWatcher` if supported and :class:`!asyncio."
"ThreadedChildWatcher` otherwise), so manually configuring a child watcher is "
"not recommended. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Händelseslingan använder nu den bästa tillgängliga barnövervakaren för varje "
"plattform (:class:`!asyncio.PidfdChildWatcher` om den stöds och :class:`!"
"asyncio.ThreadedChildWatcher` annars), så det rekommenderas inte att "
"manuellt konfigurera en barnövervakare. (Bidrag från Kumar Aditya i :gh:"
"`94597`.)"

#: ../../whatsnew/3.12.rst:666
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""
"Lägg till parametern *loop_factory* i :func:`asyncio.run` för att tillåta "
"specificering av en anpassad fabrik för händelseslingor. (Bidrag från Kumar "
"Aditya i :gh:`99388`.)"

#: ../../whatsnew/3.12.rst:670
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Oren and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""
"Lägg till C-implementering av :func:`asyncio.current_task` för 4x-6x högre "
"hastighet. (Bidrag från Itamar Oren och Pranav Thulasiram Bhat i :gh:"
"`100344`.)"

#: ../../whatsnew/3.12.rst:673
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as :mod:"
"`asyncio` does not support legacy generator-based coroutines. (Contributed "
"by Kumar Aditya in :gh:`102748`.)"
msgstr ""
":func:`asyncio.iscoroutine` returnerar nu ``False`` för generatorer "
"eftersom :mod:`asyncio` inte stöder äldre generatorbaserade coroutines. "
"(Bidrag från Kumar Aditya i :gh:`102748`.)"

#: ../../whatsnew/3.12.rst:677
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators "
"yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""
":func:`asyncio.wait` och :func:`asyncio.as_completed` accepterar nu "
"generatorer som ger uppgifter. (Bidrag från Kumar Aditya i :gh:`78530`.)"

#: ../../whatsnew/3.12.rst:682
msgid "calendar"
msgstr "kalender"

#: ../../whatsnew/3.12.rst:684
msgid ""
"Add enums :data:`calendar.Month` and :data:`calendar.Day` defining months of "
"the year and days of the week. (Contributed by Prince Roshan in :gh:"
"`103636`.)"
msgstr ""
"Lägg till enumer :data:`calendar.Month` och :data:`calendar.Day` som "
"definierar årets månader och veckans dagar. (Bidrag från Prince Roshan i :gh:"
"`103636`.)"

#: ../../whatsnew/3.12.rst:689
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.12.rst:691
msgid ""
"Add :const:`csv.QUOTE_NOTNULL` and :const:`csv.QUOTE_STRINGS` flags to "
"provide finer grained control of ``None`` and empty strings by :class:`~csv."
"reader` and :class:`~csv.writer` objects."
msgstr ""
"Lägg till :const:`csv.QUOTE_NOTNULL` och :const:`csv.QUOTE_STRINGS` flaggor "
"för att ge finare kontroll av ``None`` och tomma strängar av :class:`~csv."
"reader` och :class:`~csv.writer` objekt."

#: ../../whatsnew/3.12.rst:696
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.12.rst:698
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear "
"in executable bytecode) are now exposed in the :mod:`dis` module. :opcode:"
"`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not useful for "
"pseudo instructions. Use the new :data:`dis.hasarg` collection instead. "
"(Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Opkoder för pseudoinstruktioner (som används av kompilatorn men som inte "
"visas i körbar bytecode) exponeras nu i modulen :mod:`dis`. :opcode:"
"`HAVE_ARGUMENT` är fortfarande relevant för riktiga opkoder, men det är inte "
"användbart för pseudoinstruktioner. Använd den nya :data:`dis.hasarg`-"
"samlingen istället. (Bidrag från Irit Katriel i :gh:`94216`.)"

#: ../../whatsnew/3.12.rst:706
msgid ""
"Add the :data:`dis.hasexc` collection to signify instructions that set an "
"exception handler. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Lägg till :data:`dis.hasexc`-samlingen för att markera instruktioner som "
"anger en undantagshanterare. (Bidrag från Irit Katriel i :gh:`94216`.)"

#: ../../whatsnew/3.12.rst:710
msgid "fractions"
msgstr "fraktioner"

#: ../../whatsnew/3.12.rst:712
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""
"Objekt av typen :class:`fractions.Fraction` stöder nu formatering i float-"
"stil. (Bidrag från Mark Dickinson i :gh:`100161`.)"

#: ../../whatsnew/3.12.rst:716
msgid "importlib.resources"
msgstr "importlib.resurser"

#: ../../whatsnew/3.12.rst:718
msgid ""
":func:`importlib.resources.as_file` now supports resource directories. "
"(Contributed by Jason R. Coombs in :gh:`97930`.)"
msgstr ""
":func:`importlib.resources.as_file` stöder nu resurskataloger. (Bidrag från "
"Jason R. Coombs i :gh:`97930`.)"

#: ../../whatsnew/3.12.rst:721
msgid ""
"Rename first parameter of :func:`importlib.resources.files` to *anchor*. "
"(Contributed by Jason R. Coombs in :gh:`100598`.)"
msgstr ""
"Byt namn på första parametern i :func:`importlib.resources.files` till "
"*anchor*. (Bidrag från Jason R. Coombs i :gh:`100598`.)"

#: ../../whatsnew/3.12.rst:725
msgid "inspect"
msgstr "inspektera"

#: ../../whatsnew/3.12.rst:727
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return "
"a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed by Carlton Gibson in :gh:`99247`.)"
msgstr ""
"Lägg till :func:`inspect.markcoroutinefunction` för att markera "
"synkfunktioner som returnerar en :term:`coroutine` för användning med :func:"
"`inspect.iscoroutinefunction`. (Bidrag från Carlton Gibson i :gh:`99247`.)"

#: ../../whatsnew/3.12.rst:731
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :gh:`79940`.)"
msgstr ""
"Lägg till :func:`inspect.getasyncgenstate` och :func:`inspect."
"getasyncgenlocals` för att bestämma det aktuella tillståndet för asynkrona "
"generatorer. (Bidrag från Thomas Krennwallner i :gh:`79940`.)"

#: ../../whatsnew/3.12.rst:735
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11. (Contributed by Alex Waygood in :gh:`103193`.)"
msgstr ""
"Prestandan för :func:`inspect.getattr_static` har förbättrats avsevärt. De "
"flesta anrop till funktionen bör vara minst 2x snabbare än de var i Python "
"3.11. (Bidrag från Alex Waygood i :gh:`103193`.)"

#: ../../whatsnew/3.12.rst:740
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.12.rst:742
msgid ""
"Add :func:`itertools.batched` for collecting into even-sized tuples where "
"the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""
"Lägg till :func:`itertools.batched` för insamling i jämnstora tupler där den "
"sista batchen kan vara kortare än resten. (Bidrag från Raymond Hettinger i :"
"gh:`98363`.)"

#: ../../whatsnew/3.12.rst:747
msgid "math"
msgstr "matematik"

#: ../../whatsnew/3.12.rst:749
msgid ""
"Add :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""
"Lägg till :func:`math.sumprod` för att beräkna en summa av produkter. "
"(Bidrag från Raymond Hettinger i :gh:`100485`.)"

#: ../../whatsnew/3.12.rst:752
msgid ""
"Extend :func:`math.nextafter` to include a *steps* argument for moving up or "
"down multiple steps at a time. (Contributed by Matthias Goergens, Mark "
"Dickinson, and Raymond Hettinger in :gh:`94906`.)"
msgstr ""
"Utöka :func:`math.nextafter` till att inkludera ett *steps*-argument för att "
"flytta upp eller ner flera steg åt gången. (Bidrag från Matthias Goergens, "
"Mark Dickinson och Raymond Hettinger i :gh:`94906`.)"

#: ../../whatsnew/3.12.rst:757
msgid "os"
msgstr "os"

#: ../../whatsnew/3.12.rst:759
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with :"
"func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in :"
"gh:`93312`.)"
msgstr ""
"Lägg till :const:`os.PIDFD_NONBLOCK` för att öppna en filbeskrivare för en "
"process med :func:`os.pidfd_open` i icke-blockerande läge. (Bidrag från "
"Kumar Aditya i :gh:`93312`.)"

#: ../../whatsnew/3.12.rst:763
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in :gh:"
"`99547`.)"
msgstr ""
":class:`os.DirEntry` innehåller nu en :meth:`os.DirEntry.is_junction`-metod "
"för att kontrollera om posten är en korsning. (Bidrag från Charles Machalow "
"i :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:767
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""
"Lägg till funktionerna :func:`os.listdrives`, :func:`os.listvolumes` och :"
"func:`os.listmounts` i Windows för att räkna upp enheter, volymer och "
"monteringspunkter. (Bidrag från Steve Dower i :gh:`102519`.)"

#: ../../whatsnew/3.12.rst:771
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in :gh:"
"`99726`.)"
msgstr ""
":func:`os.stat` och :func:`os.lstat` är nu mer exakta i Windows. Fältet "
"``st_birthtime`` kommer nu att fyllas med filens skapelsetid och "
"``st_ctime`` är föråldrat men innehåller fortfarande skapelsetiden (men "
"kommer i framtiden att returnera den senaste metadataändringen, för "
"konsistens med andra plattformar). ``st_dev`` kan vara upp till 64 bitar och "
"``st_ino`` upp till 128 bitar beroende på ditt filsystem, och ``st_rdev`` "
"sätts alltid till noll snarare än felaktiga värden. Båda funktionerna kan "
"vara betydligt snabbare på nyare versioner av Windows. (Bidrag från Steve "
"Dower i :gh:`99726`.)"

#: ../../whatsnew/3.12.rst:782
msgid "os.path"
msgstr "os.sökväg"

#: ../../whatsnew/3.12.rst:784
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"Lägg till :func:`os.path.isjunction` för att kontrollera om en given sökväg "
"är en korsning. (Bidrag från Charles Machalow i :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:787
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""
"Lägg till :func:`os.path.splitroot` för att dela upp en sökväg i en triad "
"``(drive, root, tail)``. (Bidrag från Barney Gale i :gh:`101000`.)"

#: ../../whatsnew/3.12.rst:791
msgid "pathlib"
msgstr "sökväg"

#: ../../whatsnew/3.12.rst:793
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and :class:`pathlib."
"Path`, plus their Posix- and Windows-specific variants. Subclasses may "
"override the :meth:`pathlib.PurePath.with_segments` method to pass "
"information between path instances."
msgstr ""
"Lägg till stöd för underklassning av :class:`pathlib.PurePath` och :class:"
"`pathlib.Path`, plus deras Posix- och Windows-specifika varianter. "
"Underklasser kan åsidosätta metoden :meth:`pathlib.PurePath.with_segments` "
"för att skicka information mellan sökvägsinstanser."

#: ../../whatsnew/3.12.rst:798
msgid ""
"Add :meth:`pathlib.Path.walk` for walking the directory trees and generating "
"all file or directory names within them, similar to :func:`os.walk`. "
"(Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""
"Lägg till :meth:`pathlib.Path.walk` för att gå igenom katalogträden och "
"generera alla fil- eller katalognamn i dem, liknande :func:`os.walk`. "
"(Bidrag från Stanislav Zmiev i :gh:`90385`.)"

#: ../../whatsnew/3.12.rst:802
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in :"
"gh:`84538`.)"
msgstr ""
"Lägg till *walk_up* valfri parameter till :meth:`pathlib.PurePath."
"relative_to` för att tillåta infogandet av ``..`` poster i resultatet; detta "
"beteende är mer konsekvent med :func:`os.path.relpath`. (Bidrag från "
"Domenico Ragusa i :gh:`84538`.)"

#: ../../whatsnew/3.12.rst:807
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to :func:`os.path."
"isjunction`. (Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"Lägg till :meth:`pathlib.Path.is_junction` som en proxy till :func:`os.path."
"isjunction`. (Bidrag från Charles Machalow i :gh:`99547`.)"

#: ../../whatsnew/3.12.rst:810
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, :meth:"
"`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching the "
"path's case sensitivity, allowing for more precise control over the matching "
"process."
msgstr ""
"Lägg till *case_sensitive* valfri parameter till :meth:`pathlib.Path.glob`, :"
"meth:`pathlib.Path.rglob` och :meth:`pathlib.PurePath.match` för att matcha "
"sökvägens skiftlägeskänslighet, vilket möjliggör mer exakt kontroll över "
"matchningsprocessen."

#: ../../whatsnew/3.12.rst:815
msgid "platform"
msgstr "plattform"

#: ../../whatsnew/3.12.rst:817
msgid ""
"Add support for detecting Windows 11 and Windows Server releases past 2012. "
"Previously, lookups on Windows Server platforms newer than Windows Server "
"2012 and on Windows 11 would return ``Windows-10``. (Contributed by Steve "
"Dower in :gh:`89545`.)"
msgstr ""
"Lägg till stöd för att upptäcka Windows 11 och Windows Server-versioner "
"efter 2012. Tidigare returnerade uppslagningar på Windows Server-plattformar "
"nyare än Windows Server 2012 och på Windows 11 ``Windows-10``. (Bidrag från "
"Steve Dower i :gh:`89545`.)"

#: ../../whatsnew/3.12.rst:823
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.12.rst:825
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr ""
"Lägg till bekvämlighetsvariabler för att hålla värden tillfälligt för "
"felsökningssessioner och ge snabb åtkomst till värden som den aktuella ramen "
"eller returvärdet. (Bidrag från Tian Gao i :gh:`103693`.)"

#: ../../whatsnew/3.12.rst:831
msgid "random"
msgstr "slumpvis"

#: ../../whatsnew/3.12.rst:833
msgid ""
"Add :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in :gh:"
"`81620`.)"
msgstr ""
"Lägg till :func:`random.binomialvariate`. (Bidrag från Raymond Hettinger i :"
"gh:`81620`.)"

#: ../../whatsnew/3.12.rst:836
msgid ""
"Add a default of ``lambd=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""
"Lägg till ett standardvärde på ``lambd=1.0`` till :func:`random."
"expovariate`. (Bidrag från Raymond Hettinger i :gh:`100234`.)"

#: ../../whatsnew/3.12.rst:840
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.12.rst:842
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""
":func:`shutil.make_archive` skickar nu *root_dir*-argumentet till anpassade "
"arkiverare som stöder det. I det här fallet ändras inte längre processens "
"aktuella arbetskatalog tillfälligt till *root_dir* för att utföra "
"arkivering. (Bidrag från Serhiy Storchaka i :gh:`74696`.)"

#: ../../whatsnew/3.12.rst:848
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a "
"*(typ, val, tb)* triplet. *onerror* is deprecated. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""
":func:`shutil.rmtree` accepterar nu ett nytt argument *onexc* som är en "
"felhanterare som *onerror* men som förväntar sig en undantagsinstans snarare "
"än en *(typ, val, tb)* triplett. *onerror* är föråldrad. (Bidrag från Irit "
"Katriel i :gh:`102828`.)"

#: ../../whatsnew/3.12.rst:853
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find "
"matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` använder nu miljövariabeln *PATHEXT* för att hitta "
"matchningar inom *PATH* på Windows även när den givna *cmd* innehåller en "
"katalogkomponent. (Bidrag från Charles Machalow i :gh:`103179`.)"

#: ../../whatsnew/3.12.rst:858
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` kommer att anropa ``NeedCurrentDirectoryForExePathW`` "
"vid sökning efter körbara filer i Windows för att avgöra om den aktuella "
"arbetskatalogen ska läggas till i sökvägen. (Bidrag från Charles Machalow i :"
"gh:`103179`.)"

#: ../../whatsnew/3.12.rst:863
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` kommer att returnera en sökväg som matchar *cmd* med en "
"komponent från ``PATHEXT`` före en direkt matchning någon annanstans i "
"sökvägen på Windows. (Bidrag från Charles Machalow i :gh:`103179`.)"

#: ../../whatsnew/3.12.rst:869 ../../whatsnew/3.12.rst:1546
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.12.rst:871
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E. "
"Aasland in :gh:`77617`.)"
msgstr ""
"Lägg till ett :ref:`kommandoradsgränssnitt <sqlite3-cli>`. (Bidrag från "
"Erlend E. Aasland i :gh:`77617`.)"

#: ../../whatsnew/3.12.rst:874
msgid ""
"Add the :attr:`sqlite3.Connection.autocommit` attribute to :class:`sqlite3."
"Connection` and the *autocommit* parameter to :func:`sqlite3.connect` to "
"control :pep:`249`-compliant :ref:`transaction handling <sqlite3-transaction-"
"control-autocommit>`. (Contributed by Erlend E. Aasland in :gh:`83638`.)"
msgstr ""
"Lägg till attributet :attr:`sqlite3.Connection.autocommit` till :class:"
"`sqlite3.Connection` och parametern *autocommit* till :func:`sqlite3."
"connect` för att kontrollera :pep:`249`-kompatibel :ref:"
"`transaktionshantering <sqlite3-transaction-control-autocommit>`. (Bidrag "
"från Erlend E. Aasland i :gh:`83638`.)"

#: ../../whatsnew/3.12.rst:881
msgid ""
"Add *entrypoint* keyword-only parameter to :meth:`sqlite3.Connection."
"load_extension`, for overriding the SQLite extension entry point. "
"(Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""
"Add *entrypoint* keyword-only parameter to :meth:`sqlite3.Connection."
"load_extension`, for overriding the SQLite extension entry point. (Bidrag "
"från Erlend E. Aasland i :gh:`103015`.)"

#: ../../whatsnew/3.12.rst:886
msgid ""
"Add :meth:`sqlite3.Connection.getconfig` and :meth:`sqlite3.Connection."
"setconfig` to :class:`sqlite3.Connection` to make configuration changes to a "
"database connection. (Contributed by Erlend E. Aasland in :gh:`103489`.)"
msgstr ""
"Lägg till :meth:`sqlite3.Connection.getconfig` och :meth:`sqlite3.Connection."
"setconfig` till :class:`sqlite3.Connection` för att göra "
"konfigurationsändringar i en databasanslutning. (Bidrag från Erlend E. "
"Aasland i :gh:`103489`.)"

#: ../../whatsnew/3.12.rst:892
msgid "statistics"
msgstr "statistik"

#: ../../whatsnew/3.12.rst:894
msgid ""
"Extend :func:`statistics.correlation` to include as a ``ranked`` method for "
"computing the Spearman correlation of ranked data. (Contributed by Raymond "
"Hettinger in :gh:`95861`.)"
msgstr ""
"Utöka :func:`statistics.correlation` till att inkludera som en ``rankad`` "
"metod för att beräkna Spearman-korrelationen för rankade data. (Bidrag från "
"Raymond Hettinger i :gh:`95861`.)"

#: ../../whatsnew/3.12.rst:899
msgid "sys"
msgstr "system"

#: ../../whatsnew/3.12.rst:901
msgid ""
"Add the :mod:`sys.monitoring` namespace to expose the new :ref:`PEP 669 "
"<whatsnew312-pep669>` monitoring API. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""
"Lägg till namnrymden :mod:`sys.monitoring` för att exponera det nya :ref:"
"`PEP 669 <whatsnew312-pep669>`övervaknings-API:et. (Bidrag från Mark Shannon "
"i :gh:`103082`.)"

#: ../../whatsnew/3.12.rst:905
msgid ""
"Add :func:`sys.activate_stack_trampoline` and :func:`sys."
"deactivate_stack_trampoline` for activating and deactivating stack profiler "
"trampolines, and :func:`sys.is_stack_trampoline_active` for querying if "
"stack profiler trampolines are active. (Contributed by Pablo Galindo and "
"Christian Heimes with contributions from Gregory P. Smith [Google] and Mark "
"Shannon in :gh:`96123`.)"
msgstr ""
"Lägg till :func:`sys.activate_stack_trampoline` och :func:`sys."
"deactivate_stack_trampoline` för att aktivera och avaktivera trampoliner för "
"stackprofiler, och :func:`sys.is_stack_trampoline_active` för att fråga om "
"trampoliner för stackprofiler är aktiva. (Bidrag från Pablo Galindo och "
"Christian Heimes med bidrag från Gregory P. Smith [Google] och Mark Shannon "
"i :gh:`96123`.)"

#: ../../whatsnew/3.12.rst:914
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""
"Lägg till :data:`sys.last_exc` som innehåller det senaste ohanterade "
"undantaget som togs upp (för felsökning i efterhand). Avveckla de tre fält "
"som har samma information i sin äldre form: :data:`sys.last_type`, :data:"
"`sys.last_value` och :data:`sys.last_traceback`. (Bidrag från Irit Katriel "
"i :gh:`102778`.)"

#: ../../whatsnew/3.12.rst:920 ../../whatsnew/3.12.rst:1741
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""
":func:`sys._current_exceptions` returnerar nu en mappning från thread-id "
"till en undantagsinstans, snarare än till en ``(typ, exc, tb)``-tupel. "
"(Bidrag från Irit Katriel i :gh:`103176`.)"

#: ../../whatsnew/3.12.rst:924
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""
":func:`sys.setrecursionlimit` och :func:`sys.getrecursionlimit`. "
"Rekursionsgränsen gäller nu endast för Python-kod. Inbyggda funktioner "
"använder inte rekursionsgränsen, utan skyddas av en annan mekanism som "
"förhindrar att rekursion orsakar en krasch i den virtuella maskinen."

#: ../../whatsnew/3.12.rst:930
msgid "tempfile"
msgstr "tempfil"

#: ../../whatsnew/3.12.rst:932
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""
"Funktionen :class:`tempfile.NamedTemporaryFile` har fått en ny valfri "
"parameter *delete_on_close* (Bidrag från Evgeny Zorin i :gh:`58451`.)"

#: ../../whatsnew/3.12.rst:934
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ""
":func:`tempfile.mkdtemp` returnerar nu alltid en absolut sökväg, även om "
"argumentet som anges i parametern *dir* är en relativ sökväg."

#: ../../whatsnew/3.12.rst:938
msgid "threading"
msgstr "gängning"

#: ../../whatsnew/3.12.rst:940
msgid ""
"Add :func:`threading.settrace_all_threads` and :func:`threading."
"setprofile_all_threads` that allow to set tracing and profiling functions in "
"all running threads in addition to the calling one. (Contributed by Pablo "
"Galindo in :gh:`93503`.)"
msgstr ""
"Lägg till :func:`threading.settrace_all_threads` och :func:`threading."
"setprofile_all_threads` som gör det möjligt att ställa in spårnings- och "
"profileringsfunktioner i alla trådar som körs utöver den anropande tråden. "
"(Bidrag från Pablo Galindo i :gh:`93503`.)"

#: ../../whatsnew/3.12.rst:946
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.12.rst:948
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, "
"y2), ...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka "
"in :gh:`94473`.)"
msgstr ""
"```tkinter.Canvas.coords()`` plattar nu ut sina argument. Den accepterar nu "
"inte bara koordinater som separata argument (``x1, y1, x2, y2, ...``) och en "
"sekvens av koordinater (``[x1, y1, x2, y2, ...]``), utan även koordinater "
"grupperade i par (``(x1, y1), (x2, y2), ...`` och ``[(x1, y1), (x2, "
"y2), ...]``), som ``create_*()`` metoder. (Bidrag från Serhiy Storchaka i :"
"gh:`94473`.)"

#: ../../whatsnew/3.12.rst:957
msgid "tokenize"
msgstr "tokenisera"

#: ../../whatsnew/3.12.rst:959
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"(Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See :"
"ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""
"Modulen :mod:`tokenize` innehåller de ändringar som introducerades i :pep:"
"`701`. (Bidrag från Marta Gómez Macías och Pablo Galindo i :gh:`102856`.) "
"Se :ref:`whatsnew312-porting-to-python312` för mer information om "
"ändringarna i modulen :mod:`tokenize`."

#: ../../whatsnew/3.12.rst:965
msgid "types"
msgstr "typer"

#: ../../whatsnew/3.12.rst:967
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of :"
"ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""
"Lägg till :func:`types.get_original_bases` för att möjliggöra ytterligare "
"introspektion av :ref:`user-defined-generics` när den är underklassad. "
"(Bidrag från James Hilton-Balfe och Alex Waygood i :gh:`101827`.)"

#: ../../whatsnew/3.12.rst:974
msgid "typing"
msgstr "maskinskrivning"

#: ../../whatsnew/3.12.rst:976
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols <typing."
"runtime_checkable>` now use :func:`inspect.getattr_static` rather than :func:"
"`hasattr` to lookup whether attributes exist. This means that descriptors "
"and :meth:`~object.__getattr__` methods are no longer unexpectedly evaluated "
"during ``isinstance()`` checks against runtime-checkable protocols. However, "
"it may also mean that some objects which used to be considered instances of "
"a runtime-checkable protocol may no longer be considered instances of that "
"protocol on Python 3.12+, and vice versa. Most users are unlikely to be "
"affected by this change. (Contributed by Alex Waygood in :gh:`102433`.)"
msgstr ""
":func:`isinstance`-kontroller mot :func:`runtime-checkable protocols <typing."
"runtime_checkable>` använder nu :func:`inspect.getattr_static` istället för :"
"func:`hasattr` för att kontrollera om attribut existerar. Detta innebär att "
"beskrivningar och :meth:`~object.__getattr__`-metoder inte längre oväntat "
"utvärderas under ``isinstance()``-kontroller mot runtime-checkable-"
"protokoll. Det kan dock också innebära att vissa objekt som tidigare "
"betraktades som instanser av ett runtime-checkable-protokoll inte längre "
"betraktas som instanser av det protokollet i Python 3.12+, och vice versa. "
"De flesta användare kommer troligen inte att påverkas av denna ändring. "
"(Bidrag från Alex Waygood i :gh:`102433`.)"

#: ../../whatsnew/3.12.rst:987
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For example::"
msgstr ""
"Medlemmarna i ett runtime-checkable-protokoll anses nu vara \"frysta\" vid "
"runtime så snart klassen har skapats. Att monkey-patcha attribut på ett "
"runtime-checkable protokoll kommer fortfarande att fungera, men kommer inte "
"att ha någon inverkan på :func:`isinstance`-kontroller som jämför objekt med "
"protokollet. Till exempel::"

#: ../../whatsnew/3.12.rst:992
msgid ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # unchanged, even though HasX now also has a \"y\" "
"attribute\n"
"True"
msgstr ""
">>> från typing import Protokoll, runtime_checkable\n"
">>> @runtime_checkable\n"
"... klass HasX(Protokoll):\n"
"... x = 1\n"
"...\n"
">>> klass Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"Falsk\n"
">>> f.x = 1\n"
">>> isinstans(f, HasX)\n"
"Sant\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX) # oförändrad, även om HasX nu också har ett \"y\"-"
"attribut\n"
"True"

#: ../../whatsnew/3.12.rst:1009
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr ""
"Denna ändring gjordes för att snabba upp ``isinstance()``-kontrollerna mot "
"protokoll som kan kontrolleras under körning."

#: ../../whatsnew/3.12.rst:1012
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with many members "
"may be slower than in Python 3.11. (Contributed by Alex Waygood in :gh:"
"`74690` and :gh:`103193`.)"
msgstr ""
"Prestandaprofilen för :func:`isinstance`-kontroller mot :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` har ändrats avsevärt. De "
"flesta ``isinstance()``-kontroller mot protokoll med endast ett fåtal "
"medlemmar bör vara minst 2x snabbare än i 3.11, och vissa kan vara 20x "
"snabbare eller mer. Dock kan ``isinstance()``-kontroller mot protokoll med "
"många medlemmar vara långsammare än i Python 3.11. (Bidrag från Alex Waygood "
"i :gh:`74690` och :gh:`103193`.)"

#: ../../whatsnew/3.12.rst:1020
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco "
"in :gh:`103699`.)"
msgstr ""
"Alla klasser :data:`typing.TypedDict` och :data:`typing.NamedTuple` har nu "
"attributet ``__orig_bases__``. (Bidrag från Adrian Garcia Badaracco i :gh:"
"`103699`.)"

#: ../../whatsnew/3.12.rst:1024
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""
"Lägg till parametern ``frozen_default`` till :func:`typing."
"dataclass_transform`. (Bidrag från Erik De Bonte i :gh:`99957`.)"

#: ../../whatsnew/3.12.rst:1028
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.12.rst:1030
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""
"Unicode-databasen har uppdaterats till version 15.0.0. (Bidrag från Benjamin "
"Peterson i :gh:`96734`)."

#: ../../whatsnew/3.12.rst:1034 ../../whatsnew/3.12.rst:1586
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.12.rst:1036
msgid ""
"Add a ``--durations`` command line option, showing the N slowest test cases::"
msgstr ""
"Lägg till ett kommandoradsalternativ ``--durations`` som visar de N "
"långsammaste testfallen::"

#: ../../whatsnew/3.12.rst:1038
msgid ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"
msgstr ""
"python3 -m unittest --durationer=3 lib.tests.test_threading\n"
".....\n"
"Långsammaste testdurationer\n"
"----------------------------------------------------------------------\n"
"1.210s test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0,000 varaktigheter dolda. Använd -v för att visa dessa varaktigheter)\n"
"----------------------------------------------------------------------\n"
"Körde 158 tester på 9,869 sekunder\n"
"\n"
"OK (hoppade över=3)"

#: ../../whatsnew/3.12.rst:1052
msgid "(Contributed by Giampaolo Rodola in :gh:`48330`)"
msgstr "(Bidrag från Giampaolo Rodola i :gh:`48330`)"

#: ../../whatsnew/3.12.rst:1055
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.12.rst:1057
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr ""
"Lägg till ett :ref:`kommandoradsgränssnitt <uuid-cli>`. (Bidrag från Adam "
"Chhina i :gh:`88597`.)"

#: ../../whatsnew/3.12.rst:1062
msgid "Optimizations"
msgstr "Optimeringar"

#: ../../whatsnew/3.12.rst:1064
msgid ""
"Remove ``wstr`` and ``wstr_length`` members from Unicode objects. It reduces "
"object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) (Contributed by "
"Inada Naoki in :gh:`92536`.)"
msgstr ""
"Ta bort medlemmarna ``wstr`` och ``wstr_length`` från Unicode-objekt. Det "
"minskar objektstorleken med 8 eller 16 byte på 64bitars plattformar. (:pep:"
"`623`) (Bidrag från Inada Naoki i :gh:`92536`.)"

#: ../../whatsnew/3.12.rst:1068
msgid ""
"Add experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Donghee Na in :gh:`101525`)"
msgstr ""
"Lägg till experimentellt stöd för användning av den binära optimeraren BOLT "
"i byggprocessen, vilket förbättrar prestandan med 1-5%. (Bidrag från Kevin "
"Modzelewski i :gh:`90536` och justerat av Donghee Na i :gh:`101525`)"

#: ../../whatsnew/3.12.rst:1072
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and :"
"func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""
"Snabba upp substitutionen med reguljära uttryck (funktionerna :func:`re.sub` "
"och :func:`re.subn` och motsvarande :class:`!re.Pattern`-metoder) för "
"ersättningssträngar som innehåller gruppreferenser med 2--3 gånger. (Bidrag "
"från Serhiy Storchaka i :gh:`91524`.)"

#: ../../whatsnew/3.12.rst:1077
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar Oren in :gh:`103793`.)"
msgstr ""
"Snabba upp skapandet av :class:`asyncio.Task` genom att skjuta upp dyr "
"strängformatering. (Bidrag från Itamar Oren i :gh:`103793`.)"

#: ../../whatsnew/3.12.rst:1080
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions "
"are up to 64% faster as a side effect of the changes required to cover :pep:"
"`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías and "
"Pablo Galindo in :gh:`102856`.)"
msgstr ""
"Funktionerna :func:`tokenize.tokenize` och :func:`tokenize.generate_tokens` "
"är upp till 64% faster som en bieffekt av de ändringar som krävs för att "
"täcka :pep:`701` i modulen :mod:`tokenize`. (Bidrag från Marta Gómez Macías "
"och Pablo Galindo i :gh:`102856`.)"

#: ../../whatsnew/3.12.rst:1085
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new :opcode:"
"`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and Vladimir "
"Matveev in :gh:`103497`.)"
msgstr ""
"Snabba upp :func:`super` metodanrop och attributladdningar via den nya :"
"opcode:`LOAD_SUPER_ATTR` instruktionen. (Bidrag från Carl Meyer och Vladimir "
"Matveev i :gh:`103497`.)"

#: ../../whatsnew/3.12.rst:1091
msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

#: ../../whatsnew/3.12.rst:1093
msgid ""
"Remove the :opcode:`!LOAD_METHOD` instruction. It has been merged into :"
"opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old :opcode:"
"`!LOAD_METHOD` instruction if the low bit of its oparg is set. (Contributed "
"by Ken Jin in :gh:`93429`.)"
msgstr ""
"Ta bort instruktionen :opcode:`!LOAD_METHOD`. Den har slagits samman med :"
"opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` kommer nu att bete sig som den "
"gamla :opcode:`!LOAD_METHOD`-instruktionen om den låga biten i dess oparg är "
"satt. (Bidrag från Ken Jin i :gh:`93429`.)"

#: ../../whatsnew/3.12.rst:1098
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and :opcode:`!"
"JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in :gh:"
"`102859`.)"
msgstr ""
"Ta bort instruktionerna :opcode:`!JUMP_IF_FALSE_OR_POP` och :opcode:`!"
"JUMP_IF_TRUE_OR_POP`. (Bidrag från Irit Katriel i :gh:`102859`.)"

#: ../../whatsnew/3.12.rst:1101
msgid ""
"Remove the :opcode:`!PRECALL` instruction. (Contributed by Mark Shannon in :"
"gh:`92925`.)"
msgstr ""
"Ta bort :opcode:`!PRECALL` instruktionen. (Bidrag från Mark Shannon i :gh:"
"`92925`.)"

#: ../../whatsnew/3.12.rst:1104
msgid ""
"Add the :opcode:`BINARY_SLICE` and :opcode:`STORE_SLICE` instructions. "
"(Contributed by Mark Shannon in :gh:`94163`.)"
msgstr ""
"Lägg till instruktionerna :opcode:`BINARY_SLICE` och :opcode:`STORE_SLICE`. "
"(Bidrag från Mark Shannon i :gh:`94163`.)"

#: ../../whatsnew/3.12.rst:1107
msgid ""
"Add the :opcode:`CALL_INTRINSIC_1` instructions. (Contributed by Mark "
"Shannon in :gh:`99005`.)"
msgstr ""
"Lägg till instruktionerna :opcode:`CALL_INTRINSIC_1`. (Bidrag från Mark "
"Shannon i :gh:`99005`.)"

#: ../../whatsnew/3.12.rst:1110
msgid ""
"Add the :opcode:`CALL_INTRINSIC_2` instruction. (Contributed by Irit Katriel "
"in :gh:`101799`.)"
msgstr ""
"Lägg till instruktionen :opcode:`CALL_INTRINSIC_2`. (Bidrag från Irit "
"Katriel i :gh:`101799`.)"

#: ../../whatsnew/3.12.rst:1113
msgid ""
"Add the :opcode:`CLEANUP_THROW` instruction. (Contributed by Brandt Bucher "
"in :gh:`90997`.)"
msgstr ""
"Lägg till instruktionen :opcode:`CLEANUP_THROW`. (Bidrag från Brandt Bucher "
"i :gh:`90997`.)"

#: ../../whatsnew/3.12.rst:1116
msgid ""
"Add the :opcode:`!END_SEND` instruction. (Contributed by Mark Shannon in :gh:"
"`103082`.)"
msgstr ""
"Lägg till :opcode:`!END_SEND` instruktion. (Bidrag från Mark Shannon i :gh:"
"`103082`.)"

#: ../../whatsnew/3.12.rst:1119
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""
"Lägg till instruktionen :opcode:`LOAD_FAST_AND_CLEAR` som en del av "
"implementeringen av :pep:`709`. (Bidrag från Carl Meyer i :gh:`101441`.)"

#: ../../whatsnew/3.12.rst:1122
msgid ""
"Add the :opcode:`LOAD_FAST_CHECK` instruction. (Contributed by Dennis "
"Sweeney in :gh:`93143`.)"
msgstr ""
"Lägg till instruktionen :opcode:`LOAD_FAST_CHECK`. (Bidrag från Dennis "
"Sweeney i :gh:`93143`.)"

#: ../../whatsnew/3.12.rst:1125
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as part of "
"the implementation of :pep:`695`. Remove the :opcode:`!LOAD_CLASSDEREF` "
"opcode, which can be replaced with :opcode:`LOAD_LOCALS` plus :opcode:"
"`LOAD_FROM_DICT_OR_DEREF`. (Contributed by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""
"Lägg till opkoderna :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:"
"`LOAD_FROM_DICT_OR_GLOBALS`, och :opcode:`LOAD_LOCALS` som en del av "
"implementationen av :pep:`695`. Ta bort opkoden :opcode:`!LOAD_CLASSDEREF`, "
"som kan ersättas med :opcode:`LOAD_LOCALS` plus :opcode:"
"`LOAD_FROM_DICT_OR_DEREF`. (Bidrag från Jelle Zijlstra i :gh:`103764`.)"

#: ../../whatsnew/3.12.rst:1131
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"Lägg till instruktionen :opcode:`LOAD_SUPER_ATTR`. (Bidrag från Carl Meyer "
"och Vladimir Matveev i :gh:`103497`.)"

#: ../../whatsnew/3.12.rst:1134
msgid ""
"Add the ``RETURN_CONST`` instruction. (Contributed by Wenyang Wang in :gh:"
"`101632`.)"
msgstr ""
"Lägg till instruktionen ``RETURN_CONST``. (Bidrag från Wenyang Wang i :gh:"
"`101632`.)"

#: ../../whatsnew/3.12.rst:1137
msgid "Demos and Tools"
msgstr "Demonstrationer och verktyg"

#: ../../whatsnew/3.12.rst:1139
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project <https://github.com/gvanrossum/"
"old-demos>`_. (Contributed by Victor Stinner in :gh:`97681`.)"
msgstr ""
"Ta bort katalogen ``Tools/demo/`` som innehöll gamla demoskript. En kopia "
"finns i `old-demos-projektet <https://github.com/gvanrossum/old-demos>`_. "
"(Bidrag från Victor Stinner i :gh:`97681`.)"

#: ../../whatsnew/3.12.rst:1144
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""
"Ta bort föråldrade exempelskript från katalogen ``Tools/scripts/``. En kopia "
"finns i `old-demos-projektet <https://github.com/gvanrossum/old-demos>`_. "
"(Bidrag från Victor Stinner i :gh:`97669`.)"

#: ../../whatsnew/3.12.rst:1151 ../../whatsnew/3.12.rst:2144
msgid "Deprecated"
msgstr "Föråldrat"

#: ../../whatsnew/3.12.rst:1153
#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: Parametrarna *type*, *choices* och *metavar* i :class:`!"
"argparse.BooleanOptionalAction` är föråldrade och kommer att tas bort i "
"3.14. (Bidrag från Nikita Sobolev i :gh:`92248`.)"

#: ../../whatsnew/3.12.rst:1158
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""
":mod:`ast`: Följande :mod:`ast`-funktioner har varit föråldrade i "
"dokumentationen sedan Python 3.8, orsakar nu en :exc:`DeprecationWarning` "
"som skickas ut vid körning när de nås eller används, och kommer att tas bort "
"i Python 3.14:"

#: ../../whatsnew/3.12.rst:1162
#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.12.rst:1163
#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.12.rst:1164
#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.12.rst:1165
#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NamnKonstant`"

#: ../../whatsnew/3.12.rst:1166
#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.12.rst:1168
#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""
"Använd :class:`ast.Constant` istället. (Bidrag från Serhiy Storchaka i :gh:"
"`90953`.)"

#: ../../whatsnew/3.12.rst:1171
#: ../../deprecations/pending-removal-in-3.14.rst:22
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.12.rst:1173
#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`!asyncio.MultiLoopChildWatcher`, :class:`!"
"asyncio.FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` and :class:"
"`!asyncio.SafeChildWatcher` are deprecated and will be removed in Python "
"3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Barnvaktklasserna :class:`!asyncio.MultiLoopChildWatcher`, :class:`!asyncio."
"FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` och :class:`!"
"asyncio.SafeChildWatcher` är föråldrade och kommer att tas bort i Python "
"3.14. (Bidrag från Kumar Aditya i :gh:`94597`.)"

#: ../../whatsnew/3.12.rst:1179
#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, :"
"meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`!"
"asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated and will "
"be removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, :"
"meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` och :meth:`!"
"asyncio.AbstractEventLoopPolicy.get_child_watcher` är föråldrade och kommer "
"att tas bort i Python 3.14. (Bidrag från Kumar Aditya i :gh:`94597`.)"

#: ../../whatsnew/3.12.rst:1185
#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""
"Metoden :meth:`~asyncio.get_event_loop` för standardpolicyn för "
"händelseslingor avger nu en :exc:`DeprecationWarning` om det inte finns "
"någon aktuell händelseslinga och den bestämmer sig för att skapa en. (Bidrag "
"från Serhiy Storchaka och Guido van Rossum i :gh:`100160`.)"

#: ../../whatsnew/3.12.rst:1190
#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Konstanterna ``calendar.January`` och ``calendar.February`` "
"är föråldrade och ersätts av :data:`calendar.JANUARY` och :data:`calendar."
"FEBRUARY`. (Bidrag från Prince Roshan i :gh:`103636`.)"

#: ../../whatsnew/3.12.rst:1194
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Föråldrad :class:`!collections.abc.ByteString`. "
"Föredra :class:`Sequence` eller :class:`collections.abc.Buffer`. För "
"användning vid typning, föredra en union, som ``bytes | bytearray``, eller :"
"class:`collections.abc.Buffer`. (Bidrag från Shantanu Jain i :gh:`91896`.)"

#: ../../whatsnew/3.12.rst:1199
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s :meth:`~datetime.datetime."
"utcnow` and :meth:`~datetime.datetime.utcfromtimestamp` are deprecated and "
"will be removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call :meth:`~datetime.datetime."
"now` and :meth:`~datetime.datetime.fromtimestamp`  with the *tz* parameter "
"set to :const:`datetime.UTC`. (Contributed by Paul Ganssle in :gh:`103857`.)"
msgstr ""
":mod:`datetime`: :class:`datetime.datetime`:s :meth:`~datetime.datetime."
"utcnow` och :meth:`~datetime.datetime.utcfromtimestamp` är föråldrade och "
"kommer att tas bort i en framtida version. Använd istället tidszonmedvetna "
"objekt för att representera datatider i UTC: anropa :meth:`~datetime."
"datetime.now` respektive :meth:`~datetime.datetime.fromtimestamp` med "
"parametern *tz* inställd på :const:`datetime.UTC`. (Bidrag från Paul Ganssle "
"i :gh:`103857`.)"

#: ../../whatsnew/3.12.rst:1207
msgid ""
":mod:`email`: Deprecate the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: Avveckla parametern *isdst* i :func:`email.utils.localtime`. "
"(Bidrag från Alan Williams i :gh:`72346`.)"

#: ../../whatsnew/3.12.rst:1210
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ""
":mod:`importlib.abc`: Föråldrade följande klasser, planerade att tas bort i "
"Python 3.14:"

#: ../../whatsnew/3.12.rst:1213
#: ../../deprecations/pending-removal-in-3.14.rst:52
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.12.rst:1214
#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1215
#: ../../deprecations/pending-removal-in-3.14.rst:54
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1217
#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Använd :mod:`importlib.resources.abc`-klasser istället:"

#: ../../whatsnew/3.12.rst:1219
#: ../../deprecations/pending-removal-in-3.14.rst:58
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1220
#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1222
#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "(Bidrag från Jason R. Coombs och Hugo van Kemenade i :gh:`93963`.)"

#: ../../whatsnew/3.12.rst:1224
msgid ""
":mod:`itertools`: Deprecate the support for copy, deepcopy, and pickle "
"operations, which is undocumented, inefficient, historically buggy, and "
"inconsistent. This will be removed in 3.14 for a significant reduction in "
"code volume and maintenance burden. (Contributed by Raymond Hettinger in :gh:"
"`101588`.)"
msgstr ""
":mod:`itertools`: Avveckla stödet för copy-, deepcopy- och pickle-"
"operationer, som är odokumenterade, ineffektiva, historiskt sett buggiga och "
"inkonsekventa. Detta kommer att tas bort i 3.14 för en betydande minskning "
"av kodvolymen och underhållsbördan. (Bidrag från Raymond Hettinger i :gh:"
"`101588`.)"

#: ../../whatsnew/3.12.rst:1230
msgid ""
":mod:`multiprocessing`: In Python 3.14, the default :mod:`multiprocessing` "
"start method will change to a safer one on Linux, BSDs, and other non-macOS "
"POSIX platforms where ``'fork'`` is currently the default (:gh:`84559`). "
"Adding a runtime warning about this was deemed too disruptive as the "
"majority of code is not expected to care. Use the :func:`~multiprocessing."
"get_context` or :func:`~multiprocessing.set_start_method` APIs to explicitly "
"specify when your code *requires* ``'fork'``.  See :ref:`contexts and start "
"methods <multiprocessing-start-methods>`."
msgstr ""
":mod:`multiprocessing`: I Python 3.14 kommer standardstartmetoden :mod:"
"`multiprocessing` att ändras till en säkrare metod på Linux, BSD och andra "
"icke-macOS POSIX-plattformar där ``'fork'`` för närvarande är standard (:gh:"
"`84559`). Att lägga till en körtidsvarning om detta ansågs vara alltför "
"störande eftersom majoriteten av koden inte förväntas bry sig. Använd API:"
"erna :func:`~multiprocessing.get_context` eller :func:`~multiprocessing."
"set_start_method` för att uttryckligen ange när din kod *kräver* "
"``'fork'``.  Se :ref:``kontexter och startmetoder <multiprocessing-start-"
"methods>`."

#: ../../whatsnew/3.12.rst:1240
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader` "
"are deprecated and will be removed in Python 3.14; use :func:`importlib.util."
"find_spec` instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` och :func:`!pkgutil.get_loader` "
"är föråldrade och kommer att tas bort i Python 3.14; använd :func:`importlib."
"util.find_spec` istället. (Bidrag från Nikita Sobolev i :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1245
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only "
"gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14. "
"(Contributed by Soumendra Ganguly and Gregory P. Smith in :gh:`85984`.)"
msgstr ""
":mod:`pty`: Modulen har två odokumenterade funktioner ``master_open()`` och "
"``lave_open()`` som har varit avförda sedan Python 2 men som fick en "
"korrekt :exc:`DeprecationWarning` först i 3.12. Ta bort dem i 3.14. (Bidrag "
"från Soumendra Ganguly och Gregory P. Smith i :gh:`85984`.)"

#: ../../whatsnew/3.12.rst:1250
msgid ":mod:`os`:"
msgstr ":mod:`os`:"

#: ../../whatsnew/3.12.rst:1252
msgid ""
"The ``st_ctime`` fields return by :func:`os.stat` and :func:`os.lstat` on "
"Windows are deprecated. In a future release, they will contain the last "
"metadata change time, consistent with other platforms. For now, they still "
"contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""
"Fälten ``st_ctime`` som returneras av :func:`os.stat` och :func:`os.lstat` "
"på Windows är föråldrade. I en framtida version kommer de att innehålla "
"tiden för den senaste ändringen av metadata, i enlighet med andra "
"plattformar. För närvarande innehåller de fortfarande skapelsetiden, som "
"också är tillgänglig i det nya fältet ``st_birthtime``. (Bidrag från Steve "
"Dower i :gh:`99726`.)"

#: ../../whatsnew/3.12.rst:1258
msgid ""
"On POSIX platforms, :func:`os.fork` can now raise a :exc:"
"`DeprecationWarning` when it can detect being called from a multithreaded "
"process. There has always been a fundamental incompatibility with the POSIX "
"platform when doing so. Even if such code *appeared* to work. We added the "
"warning to raise awareness as issues encountered by code doing this are "
"becoming more frequent. See the :func:`os.fork` documentation for more "
"details along with `this discussion on fork being incompatible with threads "
"<https://discuss.python.org/t/concerns-regarding-deprecation-of-fork-with-"
"alive-threads/33555>`_ for *why* we're now surfacing this longstanding "
"platform compatibility problem to developers."
msgstr ""
"På POSIX-plattformar kan :func:`os.fork` nu ge upphov till en :exc:"
"`DeprecationWarning` när den upptäcker att den anropas från en flertrådad "
"process. Det har alltid funnits en grundläggande inkompatibilitet med POSIX-"
"plattformen när man gör detta. Även om sådan kod *verkade* fungera. Vi lade "
"till varningen för att öka medvetenheten eftersom problem som uppstår med "
"kod som gör detta blir allt vanligare. Se :func:`os.fork`-dokumentationen "
"för mer information tillsammans med `den här diskussionen om att fork är "
"inkompatibel med trådar <https://discuss.python.org/t/concerns-regarding-"
"deprecation-of-fork-with-alive-threads/33555>`_ för *varför* vi nu visar "
"detta långvariga plattformskompatibilitetsproblem för utvecklare."

#: ../../whatsnew/3.12.rst:1268
msgid ""
"When this warning appears due to usage of :mod:`multiprocessing` or :mod:"
"`concurrent.futures` the fix is to use a different :mod:`multiprocessing` "
"start method such as ``\"spawn\"`` or ``\"forkserver\"``."
msgstr ""
"När denna varning visas på grund av användning av :mod:`multiprocessing` "
"eller :mod:`concurrent.futures` är lösningen att använda en annan :mod:"
"`multiprocessing`-startmetod som ``\"spawn\"`` eller ``\"forkserver\"``."

#: ../../whatsnew/3.12.rst:1272
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is "
"deprecated; use *onexc* instead. (Contributed by Irit Katriel in :gh:"
"`102828`.)"
msgstr ""
":mod:`shutil`: Argumentet *onerror* i :func:`shutil.rmtree` är föråldrat; "
"använd *onexc* istället. (Bidrag från Irit Katriel i :gh:`102828`.)"

#: ../../whatsnew/3.12.rst:1275
#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: ../../whatsnew/3.12.rst:1277
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in :gh:`90016`.)"
msgstr ""
":ref:``standardadaptrar och konverterare <sqlite3-default-converters>`` är "
"nu föråldrade. Använd istället :ref:`sqlite3-adapter-converter-recipes` och "
"skräddarsy dem efter dina behov. (Bidrag från Erlend E. Aasland i :gh:"
"`90016`.)"

#: ../../whatsnew/3.12.rst:1283
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted "
"when :ref:`named placeholders <sqlite3-placeholders>` are used together with "
"parameters supplied as a :term:`sequence` instead of as a :class:`dict`. "
"Starting from Python 3.14, using named placeholders with parameters supplied "
"as a sequence will raise a :exc:`~sqlite3.ProgrammingError`. (Contributed by "
"Erlend E. Aasland in :gh:`101698`.)"
msgstr ""
"I :meth:`~sqlite3.Cursor.execute`, skickas nu :exc:`DeprecationWarning` ut "
"när :ref:`named placeholders <sqlite3-placeholders>`` används tillsammans "
"med parametrar som levereras som en :term:`sequence` istället för som en :"
"class:`dict`. Från och med Python 3.14 kommer användning av namngivna "
"platshållare med parametrar som anges som en sekvens att ge upphov till ett :"
"exc:`~sqlite3.ProgrammingError`. (Bidrag från Erlend E. Aasland i :gh:"
"`101698`.)"

#: ../../whatsnew/3.12.rst:1290
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and :data:`sys."
"last_traceback` fields are deprecated. Use :data:`sys.last_exc` instead. "
"(Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""
":mod:`sys`: Fälten :data:`sys.last_type`, :data:`sys.last_value` och :data:"
"`sys.last_traceback` är föråldrade. Använd :data:`sys.last_exc` istället. "
"(Bidrag från Irit Katriel i :gh:`102778`.)"

#: ../../whatsnew/3.12.rst:1294
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
":mod:`tarfile`: Att extrahera tar-arkiv utan att ange *filter* är föråldrat "
"fram till Python 3.14, då filtret ``'data'`` blir standard. Se :ref:`tarfile-"
"extraction-filter` för detaljer."

#: ../../whatsnew/3.12.rst:1298
#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typning`:"

#: ../../whatsnew/3.12.rst:1300
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized`, aliases for :class:"
"`collections.abc.Hashable` and :class:`collections.abc.Sized` respectively, "
"are deprecated. (:gh:`94309`.)"
msgstr ""
":class:`typing.Hashable` och :class:`typing.Sized`, alias för :class:"
"`collections.abc.Hashable` respektive :class:`collections.abc.Sized`, är "
"avförda. (:gh:`94309`.)"

#: ../../whatsnew/3.12.rst:1304
msgid ""
":class:`!typing.ByteString`, deprecated since Python 3.9, now causes a :exc:"
"`DeprecationWarning` to be emitted when it is used. (Contributed by Alex "
"Waygood in :gh:`91896`.)"
msgstr ""
":class:`!typing.ByteString`, föråldrad sedan Python 3.9, orsakar nu att en :"
"exc:`DeprecationWarning` skickas ut när den används. (Bidrag från Alex "
"Waygood i :gh:`91896`.)"

#: ../../whatsnew/3.12.rst:1308
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning` "
"when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing. (Contributed by Jacob Walls in :gh:`83122`.)"
msgstr ""
":mod:`xml.etree.ElementTree`: Modulen avger nu :exc:`DeprecationWarning` när "
"den testar sanningsvärdet för ett :class:`xml.etree.ElementTree.Element`. "
"Tidigare gav Python-implementationen ut :exc:`FutureWarning` och C-"
"implementationen gav inte ut någonting. (Bidrag från Jacob Walls i :gh:"
"`83122`.)"

#: ../../whatsnew/3.12.rst:1314
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` and :meth:"
"`async generator throw() <agen.athrow>` are deprecated and may be removed in "
"a future version of Python. Use the single-arg versions of these functions "
"instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""
"3-arg-signaturerna (typ, värde, spårning) för :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` och :meth:"
"`async generator throw() <agen.athrow>` är föråldrade och kan tas bort i en "
"framtida version av Python. Använd single-arg-versionerna av dessa "
"funktioner istället. (Bidrag från Ofey Chan i :gh:`89874`.)"

#: ../../whatsnew/3.12.rst:1320
msgid ""
":exc:`DeprecationWarning` is now raised when :attr:`~module.__package__` on "
"a module differs from :attr:`__spec__.parent <importlib.machinery.ModuleSpec."
"parent>` (previously it was :exc:`ImportWarning`). (Contributed by Brett "
"Cannon in :gh:`65961`.)"
msgstr ""
":exc:`DeprecationWarning` visas nu när :attr:`~module.__package__` på en "
"modul skiljer sig från :attr:`__spec__.parent <importlib.machinery."
"ModuleSpec.parent>` (tidigare var det :exc:`ImportWarning`). (Bidrag från "
"Brett Cannon i :gh:`65961`.)"

#: ../../whatsnew/3.12.rst:1326
msgid ""
"Setting :attr:`~module.__package__` or :attr:`~module.__cached__` on a "
"module is deprecated, and will cease to be set or taken into consideration "
"by the import system in Python 3.14. (Contributed by Brett Cannon in :gh:"
"`65961`.)"
msgstr ""
"Att ställa in :attr:`~module.__package__` eller :attr:`~module.__cached__` "
"på en modul är föråldrat och kommer att upphöra att ställas in eller tas i "
"beaktande av importsystemet i Python 3.14. (Bidrag från Brett Cannon i :gh:"
"`65961`.)"

#: ../../whatsnew/3.12.rst:1330
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.16. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly: ``~int(x)``. (Contributed by "
"Tim Hoffmann in :gh:`103487`.)"
msgstr ""
"Den bitvisa inversionsoperatorn (``~``) på bool är föråldrad. Det kommer att "
"kasta ett fel i Python 3.16. Använd ``not`` för logisk negation av booler "
"istället. I det sällsynta fallet att du verkligen behöver den bitvisa "
"inversionen av den underliggande ``int``, konvertera till int uttryckligen: "
"``~int(x)``. (Bidrag från Tim Hoffmann i :gh:`103487`.)"

#: ../../whatsnew/3.12.rst:1336
msgid ""
"Accessing :attr:`~codeobject.co_lnotab` on code objects was deprecated in "
"Python 3.10 via :pep:`626`, but it only got a proper :exc:"
"`DeprecationWarning` in 3.12. May be removed in 3.15. (Contributed by Nikita "
"Sobolev in :gh:`101866`.)"
msgstr ""
"Åtkomst till :attr:`~codeobject.co_lnotab` på kodobjekt avförklarades i "
"Python 3.10 via :pep:`626`, men det fick en riktig :exc:`DeprecationWarning` "
"först i 3.12. Kan komma att tas bort i 3.15. (Bidrag från Nikita Sobolev i :"
"gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.13.rst:2
msgid "Pending removal in Python 3.13"
msgstr "Väntande borttagningar i Python 3.13"

#: ../../deprecations/pending-removal-in-3.13.rst:4
msgid "Modules (see :pep:`594`):"
msgstr "Moduler (se :pep:`594`):"

#: ../../deprecations/pending-removal-in-3.13.rst:6
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc``"

#: ../../deprecations/pending-removal-in-3.13.rst:7
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../deprecations/pending-removal-in-3.13.rst:8
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../deprecations/pending-removal-in-3.13.rst:9
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../deprecations/pending-removal-in-3.13.rst:10
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../deprecations/pending-removal-in-3.13.rst:11
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../deprecations/pending-removal-in-3.13.rst:12
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:13
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../deprecations/pending-removal-in-3.13.rst:14
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../deprecations/pending-removal-in-3.13.rst:15
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../deprecations/pending-removal-in-3.13.rst:16
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../deprecations/pending-removal-in-3.13.rst:17
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../deprecations/pending-removal-in-3.13.rst:18
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../deprecations/pending-removal-in-3.13.rst:19
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:20
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../deprecations/pending-removal-in-3.13.rst:21
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../deprecations/pending-removal-in-3.13.rst:22
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:23
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../deprecations/pending-removal-in-3.13.rst:24
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:26
msgid "Other modules:"
msgstr "Övriga moduler:"

#: ../../deprecations/pending-removal-in-3.13.rst:28
msgid ":mod:`!lib2to3`, and the :program:`2to3` program (:gh:`84540`)"
msgstr ":mod:`!lib2to3`, och programmet :program:`2to3` (:gh:`84540`)"

#: ../../deprecations/pending-removal-in-3.13.rst:30
msgid "APIs:"
msgstr "API:er:"

#: ../../deprecations/pending-removal-in-3.13.rst:32
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: ../../deprecations/pending-removal-in-3.13.rst:33
msgid "``locale.resetlocale()`` (:gh:`90817`)"
msgstr "``locale.resetlocale()`` (:gh:`90817`)"

#: ../../deprecations/pending-removal-in-3.13.rst:34
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:35
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:36
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:37
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:38
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: ../../deprecations/pending-removal-in-3.13.rst:39
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: ../../deprecations/pending-removal-in-3.13.rst:40
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr ":class:`classmethod` kedja av beskrivare (:gh:`89519`)"

#: ../../deprecations/pending-removal-in-3.13.rst:41
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr ":mod:`importlib.resources` föråldrade metoder:"

#: ../../deprecations/pending-removal-in-3.13.rst:43
msgid "``contents()``"
msgstr "``contents()``"

#: ../../deprecations/pending-removal-in-3.13.rst:44
msgid "``is_resource()``"
msgstr "``is_resource()``"

#: ../../deprecations/pending-removal-in-3.13.rst:45
msgid "``open_binary()``"
msgstr "``open_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:46
msgid "``open_text()``"
msgstr "``open_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:47
msgid "``path()``"
msgstr "``path()``"

#: ../../deprecations/pending-removal-in-3.13.rst:48
msgid "``read_binary()``"
msgstr "``read_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:49
msgid "``read_text()``"
msgstr "``read_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:51
msgid ""
"Use :func:`importlib.resources.files` instead.  Refer to `importlib-"
"resources: Migrating from Legacy <https://importlib-resources.readthedocs.io/"
"en/latest/using.html#migrating-from-legacy>`_ (:gh:`106531`)"
msgstr ""
"Använd :func:`importlib.resources.files` istället.  Hänvisa till `importlib-"
"resources: Migrera från Legacy <https://importlib-resources.readthedocs.io/"
"en/latest/using.html#migrating-from-legacy>`_ (:gh:`106531`)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending removal in Python 3.14"
msgstr "Väntar på borttagning i Python 3.14"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: Följande funktioner har varit föråldrade i dokumentationen sedan "
"Python 3.8, orsakar nu en :exc:`DeprecationWarning` vid körning när de nås "
"eller används, och kommer att tas bort i Python 3.14:"

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Föråldrad :class:`!collections.abc.ByteString`. "
"Föredra :class:`!Sequence` eller :class:`~collections.abc.Buffer`. För "
"användning vid typning, föredra en union, som ``bytes | bytearray``, eller :"
"class:`collections.abc.Buffer`. (Bidrag från Shantanu Jain i :gh:`91896`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: Föråldrad *isdst* parameter i :func:`email.utils.localtime`. "
"(Bidrag från Alan Williams i :gh:`72346`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` föråldrade klasser:"

#: ../../deprecations/pending-removal-in-3.14.rst:63
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` hade odokumenterat, ineffektivt, historiskt buggigt och "
"inkonsekvent stöd för copy-, deepcopy- och pickle-operationer. Detta kommer "
"att tas bort i 3.14 för en betydande minskning av kodvolymen och "
"underhållsbördan. (Bidrag från Raymond Hettinger i :gh:`101588`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:69
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: Standardstartmetoden kommer att ändras till en "
"säkrare metod på Linux, BSD och andra POSIX-plattformar som inte är MacOS "
"där ``'fork'`` för närvarande är standard (:gh:`84559`). Att lägga till en "
"körtidsvarning om detta ansågs vara alltför störande eftersom majoriteten av "
"koden inte förväntas bry sig. Använd API:erna :func:`~multiprocessing."
"get_context` eller :func:`~multiprocessing.set_start_method` för att "
"uttryckligen ange när din kod *kräver* ``'fork'``.  Se :ref:`multiprocessing-"
"start-methods`."

#: ../../deprecations/pending-removal-in-3.14.rst:77
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` och :meth:`~pathlib."
"PurePath.relative_to`: att skicka ytterligare argument är föråldrat."

#: ../../deprecations/pending-removal-in-3.14.rst:81
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` och :func:`!pkgutil.get_loader` "
"ger nu upphov till :exc:`DeprecationWarning`; använd :func:`importlib.util."
"find_spec` istället. (Bidrag från Nikita Sobolev i :gh:`97850`.)"

#: ../../deprecations/pending-removal-in-3.14.rst:86
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: ../../deprecations/pending-removal-in-3.14.rst:88
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: använd :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "```slave_open()``: använd :func:`pty.openpty`."

#: ../../deprecations/pending-removal-in-3.14.rst:93
msgid ":data:`!version` and :data:`!version_info`."
msgstr ":data:`!version` och :data:`!version_info`."

#: ../../deprecations/pending-removal-in-3.14.rst:95
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""
":meth:`~sqlite3.Cursor.execute` och :meth:`~sqlite3.Cursor.executemany` om :"
"ref:``named placeholders <sqlite3-placeholders>`` används och *parameters* "
"är en sekvens istället för en :class:`dict`."

#: ../../deprecations/pending-removal-in-3.14.rst:99
msgid ""
":mod:`typing`: :class:`!typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`: :class:`!typing.ByteString`, föråldrad sedan Python 3.9, "
"orsakar nu att en :exc:`DeprecationWarning` sänds ut när den används."

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: det var inte "
"avsett att vara ett offentligt API. (Bidrag från Gregory P. Smith i :gh:"
"`88168`.)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "Väntar på borttagning i Python 3.15"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "Importsystemet:"

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__cached__` på en modul samtidigt som man "
"misslyckas med att ställa in :attr:`__spec__.cached <importlib.machinery."
"ModuleSpec.cached>` är föråldrat. I Python 3.15 kommer :attr:`!__cached__` "
"inte längre att anges eller tas i beaktande av importsystemet eller "
"standardbiblioteket. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__package__` på en modul utan att ställa in :"
"attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` är föråldrat. "
"I Python 3.15 kommer :attr:`!__package__` inte längre att anges eller tas i "
"beaktande av importsystemet eller standardbiblioteket. (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"Den odokumenterade :func:`!ctypes.SetPointerType`-funktionen är föråldrad "
"sedan Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"Den föråldrade och sällan använda :class:`~http.server."
"CGIHTTPRequestHandler` har utgått sedan Python 3.13. Ingen direkt ersättare "
"finns. *Anything* är bättre än CGI för att koppla en webbserver till en "
"request-hanterare."

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"Flaggan :option:`!--cgi` till kommandoradsgränssnittet :program:`python -m "
"http.server` har utgått sedan Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` metod: använd ``exec_module()`` istället."

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"Funktionen :func:`~locale.getdefaultlocale` har varit föråldrad sedan Python "
"3.11. Dess borttagning var ursprungligen planerad till Python 3.13 (:gh:"
"`90817`), men har skjutits upp till Python 3.15. Använd :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, och :func:`~locale.getencoding` "
"istället. (Bidrag från Hugo van Kemenade i :gh:`111187`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` har utgått sedan Python 3.13. Använd :func:`os."
"path.isreserved` för att upptäcka reserverade sökvägar i Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`plattform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` har utgått sedan Python 3.13. Denna funktion är "
"endast användbar för Jython-stöd, har ett förvirrande API och är i stort "
"sett otestad."

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"Argumentet *check_home* i :func:`sysconfig.is_python_build` har utgått sedan "
"Python 3.12."

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` kommer inte att ta några argument i Python 3.15. "
"Att skicka några argument har varit föråldrat sedan Python 3.14, eftersom "
"Python-versionen inte tillåter några argument, men C-versionen tillåter "
"valfritt antal positionella eller nyckelordsargument och ignorerar varje "
"argument."

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. Kan komma att "
"tas bort i 3.15. (Bidrag från Nikita Sobolev i :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""
"Den odokumenterade syntaxen för nyckelordsargument för att skapa :class:"
"`~typing.NamedTuple`-klasser (till exempel ``Point = NamedTuple(\"Point\", "
"x=int, y=int)``) har utgått sedan Python 3.13. Använd den klassbaserade "
"syntaxen eller den funktionella syntaxen istället."

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"När man använder den funktionella syntaxen för :class:`~typing."
"TypedDict`\\s, att inte skicka ett värde till parametern *fields* (``TD = "
"TypedDict(\"TD\")``) eller att skicka ``None`` (``TD = TypedDict(\"TD\", "
"None)``) har varit föråldrat sedan Python 3.13. Använd ``class "
"TD(TypedDict): pass`` eller ``TD = TypedDict(\"TD\", {})`` för att skapa en "
"TypedDict med noll fält."

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"Dekoratorfunktionen :func:`typing.no_type_check_decorator` har varit "
"föråldrad sedan Python 3.13. Efter åtta år i modulen :mod:`typing` har den "
"ännu inte fått stöd av någon större typkontroll."

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`våg`:"

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Metoderna :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` och :meth:`~wave."
"Wave_read.getmarkers` i klasserna :class:`~wave.Wave_read` och :class:`~wave."
"Wave_write` har utgått sedan Python 3.13."

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` är föråldrad sedan Python 3.10. "
"Använd :meth:`~zipimport.zipimporter.exec_module` istället. (Bidrag från "
"Jiahao Li i :gh:`125746`.)"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "Väntar på borttagning i Python 3.16"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"Att ställa in :attr:`~module.__loader__` på en modul medan man misslyckas "
"med att ställa in :attr:`__spec__.loader <importlib.machinery.ModuleSpec."
"loader>` är föråldrat. I Python 3.16 kommer :attr:`!__loader__` inte längre "
"att anges eller tas i beaktande av importsystemet eller standardbiblioteket."

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"Formatkoden ``'u'`` (:c:type:`wchar_t`) har utgått i dokumentation sedan "
"Python 3.3 och vid körning sedan Python 3.13. Använd istället formatkoden "
"``'w'`` (:c:type:`Py_UCS4`) för Unicode-tecken."

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` är föråldrad och kommer att tas bort i "
"Python 3.16; använd :func:`inspect.iscoroutinefunction` istället. (Bidrag "
"från Jiahao Li och Kumar Aditya i :gh:`122875`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
":mod:`asyncio`-policysystemet är föråldrat och kommer att tas bort i Python "
"3.16. I synnerhet är följande klasser och funktioner föråldrade:"

#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"Användare bör använda :func:`asyncio.run` eller :class:`asyncio.Runner` med "
"*loop_factory* för att använda önskad implementering av händelseslingan."

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""
"Till exempel, för att använda :class:`asyncio.SelectorEventLoop` på Windows::"

#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"importera asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "(Bidrag från Kumar Aditya i :gh:`127949`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"Bitvis invertering på booleska typer, ``~True`` eller ``~False`` har varit "
"föråldrad sedan Python 3.12, eftersom det ger överraskande och ointuitiva "
"resultat (``-2`` och ``-1``). Använd ``not x`` istället för den logiska "
"negationen av en booleansk formel. I det sällsynta fallet att du behöver den "
"bitvisa inverteringen av det underliggande heltalet, konvertera till ``int`` "
"explicit (``~int(x)``)."

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`:"

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"Att anropa Python-implementationen av :func:`functools.reduce` med "
"*funktion* eller *sekvens* som nyckelordsargument är inte längre aktuellt "
"sedan Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`:"

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"Stöd för anpassade logghanterare med *strm*-argumentet är föråldrat och "
"planeras att tas bort i Python 3.16. Definiera hanterare med *stream*-"
"argumentet istället. (Bidrag från Mariusz Felisiak i :gh:`115032`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""
"Giltiga tillägg börjar med en '.' eller är tomma för :meth:`mimetypes."
"MimeTypes.add_type`. Okommenterade tillägg är föråldrade och kommer att ge "
"upphov till ett :exc:`ValueError` i Python 3.16. (Bidrag från Hugo van "
"Kemenade i :gh:`75223`.)"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"Undantaget :class:`!ExecError` har varit föråldrat sedan Python 3.14. Det "
"har inte använts av någon funktion i :mod:`!shutil` sedan Python 3.4, och är "
"nu ett alias för :exc:`RuntimeError`."

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"Metoden :meth:`Class.get_methods <symtable.Class.get_methods>` har utgått "
"sedan Python 3.14."

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"Funktionen :func:`~sys._enablelegacywindowsfsencoding` är föråldrad sedan "
"Python 3.13. Använd miljövariabeln :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"istället."

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"Funktionen :func:`!sysconfig.expand_makefile_vars` är föråldrad sedan Python "
"3.14. Använd ``vars``-argumentet i :func:`sysconfig.get_paths` istället."

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"Det odokumenterade och oanvända attributet :attr:`!TarFile.tarfile` är "
"föråldrat sedan Python 3.13."

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "Väntar på borttagning i Python 3.17"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"Före Python 3.14 implementerades gamla tiders unioner med hjälp av den "
"privata klassen ``typing._UnionGenericAlias``. Denna klass behövs inte "
"längre för implementationen, men den har behållits för bakåtkompatibilitet, "
"med borttagning planerad till Python 3.17. Användare bör använda "
"dokumenterade introspektionshjälpmedel som :func:`typing.get_origin` och :"
"func:`typing.get_args` istället för att förlita sig på privata "
"implementationsdetaljer."

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "Avser att tas bort i framtida versioner"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er kommer att tas bort i framtiden, även om det för närvarande "
"inte finns något datum för när de ska tas bort."

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`:"

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""
"Nesting av argumentgrupper och nesting av ömsesidigt uteslutande grupper är "
"avförda."

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"Att skicka det odokumenterade nyckelordsargumentet *prefix_chars* till :meth:"
"`~argparse.ArgumentParser.add_argument_group` är nu föråldrat."

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr "Typomvandlaren :class:`argparse.FileType` är föråldrad."

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Generatorer: ``throw(type, exc, tb)`` och ``athrow(type, exc, tb)`` "
"signaturen är förbrukad: använd ``throw(exc)`` och ``athrow(exc)`` istället, "
"signaturen med ett enda argument."

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"För närvarande accepterar Python numeriska literaler omedelbart följt av "
"nyckelord, till exempel ``0in x``, ``1or x``, ``0if 1else 2``.  Det tillåter "
"förvirrande och tvetydiga uttryck som ``[0x1for x in y]`` (som kan tolkas "
"som ``[0x1 for x in y]`` eller ``[0x1f or x in y]``).  En syntaxvarning "
"visas om den numeriska litteralen omedelbart följs av något av nyckelorden :"
"keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:"
"`in`, :keyword:`is` och :keyword:`or`.  I en framtida version kommer det att "
"ändras till ett syntaxfel. (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Stöd för metoderna ``__index__()`` och ``__int__()`` som returnerar icke-int-"
"typer: dessa metoder kommer att behöva returnera en instans av en strikt "
"underklass av :class:`int`."

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Stöd för metoden ``__float__()`` som returnerar en strikt underklass av :"
"class:`float`: dessa metoder måste returnera en instans av :class:`float`."

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Stöd för metoden ``__complex__()`` som returnerar en strikt underklass av :"
"class:`complex`: dessa metoder måste returnera en instans av :class:"
"`complex`."

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Delegering av ``int()`` till metoden ``__trunc__()``."

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Att skicka ett komplext tal som *real* eller *imag* argument i :func:"
"`complex`-konstruktorn är nu föråldrat; det bör endast skickas som ett enda "
"positionellt argument. (Bidrag från Serhiy Storchaka i :gh:`109218`.)"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""
":mod:`codecs`: använd :func:`open` istället för :func:`codecs.open`. (:gh:"
"`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: använd istället metoden :meth:`codeobject."
"co_lines`."

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datumtid`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: använd ``datetime.datetime."
"now(tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: använd ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: Pluralvärdet måste vara ett heltal."

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` Parametern *debug_override* är "
"föråldrad: använd parametern *optimization* istället."

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` tuple-gränssnitt."

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "Implicit ``None`` på returvärden."

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: metoden ``warn()`` har utgått sedan Python 3.3, använd :meth:"
"`~logging.warning` istället."

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: Användning av StringIO-ingång och textläge är föråldrad, "
"använd BytesIO och binärt läge istället."

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: Anropar :func:`os.register_at_fork` i flertrådad process."

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: Ett tupelvärde för parametern *exc_info* "
"är föråldrat, använd en undantagsinstans."

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: Strängare regler tillämpas nu för numeriska gruppreferenser och "
"gruppnamn i reguljära uttryck.  Endast sekvenser av ASCII-siffror accepteras "
"nu som numeriska referenser.  Gruppnamnet i bytesmönster och "
"ersättningssträngar kan nu endast innehålla ASCII-bokstäver och siffror samt "
"understreck. (Bidrag från Serhiy Storchaka i :gh:`91760`.)"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""
"modulerna :mod:`!sre_compile`, :mod:`!sre_constants` och :mod:`!sre_parse`."

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree`:s parameter *onerror* är föråldrad i "
"Python 3.12; använd istället parametern *onexc*."

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` alternativ och protokoll:"

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` utan protokollargument är föråldrad."

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` alternativ"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` alternativ"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` metoder:"

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""
":meth:`!threading.Event.isSet`: använd :meth:`~threading.Event.is_set`."

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: "
"använd attributet :attr:`threading.Thread.daemon`."

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: använd "
"attributet :attr:`threading.Thread.name`."

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"Den interna klassen ``typing._UnionGenericAlias`` används inte längre för "
"att implementera :class:`typing.Union`. För att bevara kompatibiliteten med "
"användare som använder denna privata klass, kommer en kompatibilitets-shim "
"att tillhandahållas åtminstone fram till Python 3.17. (Bidrag från Jelle "
"Zijlstra i :gh:`105499`.)"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: det är förkastligt att returnera "
"ett värde som inte är ``None`` från ett testfall."

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` föråldrade funktioner: :func:`~urllib.parse.urlparse` "
"istället"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()```"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()```"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "```splitquery()```"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "```splittype()```"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()```"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvärde()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()```"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` bör inte göra partiella "
"skrivningar."

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: Att testa sanningsvärdet för en :class:`~xml."
"etree.ElementTree.Element` är föråldrat. I en framtida version kommer det "
"alltid att returnera ``True``. Föredra istället explicita ``len(elem)`` "
"eller ``elem is not None`` tester."

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` är föråldrad: använd :func:`sys."
"_clear_internal_caches` istället."

#: ../../whatsnew/3.12.rst:1357 ../../whatsnew/3.12.rst:2241
msgid "Removed"
msgstr "Borttagen"

#: ../../whatsnew/3.12.rst:1360
msgid "asynchat and asyncore"
msgstr "asynchat och asyncore"

#: ../../whatsnew/3.12.rst:1362
msgid ""
"These two modules have been removed according to the schedule in :pep:`594`, "
"having been deprecated in Python 3.6. Use :mod:`asyncio` instead. "
"(Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""
"Dessa två moduler har tagits bort enligt schemat i :pep:`594`, efter att ha "
"blivit föråldrade i Python 3.6. Använd :mod:`asyncio` istället. (Bidrag från "
"Nikita Sobolev i :gh:`96580`.)"

#: ../../whatsnew/3.12.rst:1369
msgid "configparser"
msgstr "konfigurationsanalysator"

#: ../../whatsnew/3.12.rst:1371
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ""
"Flera namn som föråldrades i :mod:`configparser` redan i 3.2 har tagits bort "
"enligt :gh:`89336`:"

#: ../../whatsnew/3.12.rst:1374
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or "
"argument. Use the ``source`` attribute and argument instead."
msgstr ""
":class:`configparser.ParsingError` har inte längre attributet eller "
"argumentet ``filename``. Använd istället attributet och argumentet ``ource``."

#: ../../whatsnew/3.12.rst:1376
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""
":mod:`configparser` har inte längre en ``SafeConfigParser``-klass. Använd "
"det kortare namnet :class:`~configparser.ConfigParser` istället."

#: ../../whatsnew/3.12.rst:1378
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use :"
"meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""
":class:`configparser.ConfigParser` har inte längre någon metod för "
"``readfp``. Använd :meth:`~configparser.ConfigParser.read_file` istället."

#: ../../whatsnew/3.12.rst:1384
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.12.rst:1386
msgid ""
"Remove the :py:mod:`!distutils` package. It was deprecated in Python 3.10 "
"by :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""
"Ta bort paketet :py:mod:`!distutils`. Det utrangerades i Python 3.10 genom :"
"pep:`632` \"Deprecate distutils module\". För projekt som fortfarande "
"använder ``distutils`` och inte kan uppdateras till något annat, kan "
"``setuptools``-projektet installeras: det tillhandahåller fortfarande "
"``distutils``. (Bidrag från Victor Stinner i :gh:`92584`.)"

#: ../../whatsnew/3.12.rst:1393
msgid "ensurepip"
msgstr "säkerställa pip"

#: ../../whatsnew/3.12.rst:1395
msgid ""
"Remove the bundled setuptools wheel from :mod:`ensurepip`, and stop "
"installing setuptools in environments created by :mod:`venv`."
msgstr ""
"Ta bort det medföljande setuptools-hjulet från :mod:`ensurepip`, och sluta "
"installera setuptools i miljöer som skapats av :mod:`venv`."

#: ../../whatsnew/3.12.rst:1398
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in "
"the build environment it uses for building a package."
msgstr ""
"``pip (>= 22.1)`` kräver inte att setuptools installeras i miljön. "
"``setuptools``-baserade (och ``distutils``-baserade) paket kan fortfarande "
"användas med ``pip install``, eftersom pip kommer att tillhandahålla "
"``setuptools`` i den byggmiljö som används för att bygga ett paket."

#: ../../whatsnew/3.12.rst:1404
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no "
"longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""
"``easy_install``, ``pkg_resources``, ``setuptools`` och ``distutils`` "
"tillhandahålls inte längre som standard i miljöer som skapats med ``venv`` "
"eller startats upp med ``ensurepip``, eftersom de är en del av paketet "
"``setuptools``. För projekt som förlitar sig på dessa vid körning bör "
"``setuptools``-projektet deklareras som ett beroende och installeras separat "
"(vanligtvis med pip)."

#: ../../whatsnew/3.12.rst:1411
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr "(Bidrag från Pradyun Gedam i :gh:`95299`.)"

#: ../../whatsnew/3.12.rst:1414
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.12.rst:1416
msgid ""
"Remove :mod:`enum`'s ``EnumMeta.__getattr__``, which is no longer needed for "
"enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""
"Ta bort :mod:`enum`:s ``EnumMeta.__getattr__``, som inte längre behövs för "
"åtkomst till enumattribut. (Bidrag från Ethan Furman i :gh:`95083`.)"

#: ../../whatsnew/3.12.rst:1421
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.12.rst:1423
msgid ""
"Remove :mod:`ftplib`'s ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""
"Ta bort :mod:`ftplib`:s klassattribut ``FTP_TLS.ssl_version``: använd "
"parametern *context* istället. (Bidrag från Victor Stinner i :gh:`94172`.)"

#: ../../whatsnew/3.12.rst:1428
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.12.rst:1430
msgid ""
"Remove the ``filename`` attribute of :mod:`gzip`'s :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in :gh:"
"`94196`.)"
msgstr ""
"Ta bort attributet ``filename`` i :mod:`gzip`:s :class:`gzip.GzipFile`, "
"föråldrat sedan Python 2.6, använd istället attributet :attr:`~gzip.GzipFile."
"name`. I skrivläge lade attributet ``filename`` till filändelsen ``'.gz`` om "
"den inte fanns. (Bidrag från Victor Stinner i :gh:`94196`.)"

#: ../../whatsnew/3.12.rst:1437
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.12.rst:1439
msgid ""
"Remove the pure Python implementation of :mod:`hashlib`'s :func:`hashlib."
"pbkdf2_hmac`, deprecated in Python 3.10. Python 3.10 and newer requires "
"OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C implementation "
"of :func:`~hashlib.pbkdf2_hmac` which is faster. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"Ta bort den rena Python-implementationen av :mod:`hashlib`:func:`hashlib."
"pbkdf2_hmac`, som är föråldrad i Python 3.10. Python 3.10 och nyare kräver "
"OpenSSL 1.1.1 (:pep:`644`): denna OpenSSL-version tillhandahåller en C-"
"implementering av :func:`~hashlib.pbkdf2_hmac` som är snabbare. (Bidrag från "
"Victor Stinner i :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1446 ../../whatsnew/3.12.rst:1475
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.12.rst:1448
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr ""
"Många tidigare avskrivna upprensningar i :mod:`importlib` har nu slutförts:"

#: ../../whatsnew/3.12.rst:1451
msgid ""
"References to, and support for :meth:`!module_repr` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""
"Referenser till och stöd för :meth:`!module_repr` har tagits bort. (Bidrag "
"från Barry Warsaw i :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1454
msgid ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` and "
"``importlib.util.module_for_loader`` have all been removed. (Contributed by "
"Brett Cannon and Nikita Sobolev in :gh:`65961` and :gh:`97850`.)"
msgstr ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` och "
"``importlib.util.module_for_loader`` har alla tagits bort. (Bidrag från "
"Brett Cannon och Nikita Sobolev i :gh:`65961` och :gh:`97850`.)"

#: ../../whatsnew/3.12.rst:1458
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed.  "
"(Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"Stöd för API:erna ``find_loader()`` och ``find_module()`` har tagits bort.  "
"(Bidrag från Barry Warsaw i :gh:`98040`.)"

#: ../../whatsnew/3.12.rst:1461
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader`` "
"have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter`` och ``pkgutil.ImpLoader`` "
"har tagits bort.  (Bidrag från Barry Warsaw i :gh:`98040`.)"

#: ../../whatsnew/3.12.rst:1467 ../../whatsnew/3.12.rst:1475
msgid "imp"
msgstr "imp"

#: ../../whatsnew/3.12.rst:1469
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in :"
"gh:`98040`.)"
msgstr ""
"Modulen :mod:`!imp` har tagits bort.  (Bidrag från Barry Warsaw i :gh:"
"`98040`.)"

#: ../../whatsnew/3.12.rst:1472
msgid "To migrate, consult the following correspondence table:"
msgstr "För att migrera, se följande korrespondenstabell:"

#: ../../whatsnew/3.12.rst:1477
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: ../../whatsnew/3.12.rst:1477
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr "Infoga ``None`` i ```sys.path_importer_cache``"

#: ../../whatsnew/3.12.rst:1478
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: ../../whatsnew/3.12.rst:1478
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: ../../whatsnew/3.12.rst:1479
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: ../../whatsnew/3.12.rst:1479
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: ../../whatsnew/3.12.rst:1480
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: ../../whatsnew/3.12.rst:1480
msgid ":const:`importlib.util.MAGIC_NUMBER`"
msgstr ":const:`importlib.util.MAGIC_NUMBER`"

#: ../../whatsnew/3.12.rst:1481
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: ../../whatsnew/3.12.rst:1481
msgid ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, :const:`importlib.machinery."
"EXTENSION_SUFFIXES`, and :const:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, :const:`importlib.machinery."
"EXTENSION_SUFFIXES`, och :const:`importlib.machinery.BYTECODE_SUFFIXES`"

#: ../../whatsnew/3.12.rst:1482
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: ../../whatsnew/3.12.rst:1482
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: ../../whatsnew/3.12.rst:1483
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: ../../whatsnew/3.12.rst:1483
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: ../../whatsnew/3.12.rst:1484
msgid "``imp.new_module(name)``"
msgstr "``imp.ny_modul(namn)``"

#: ../../whatsnew/3.12.rst:1484
msgid "``types.ModuleType(name)``"
msgstr "``types.Modultyp(namn)``"

#: ../../whatsnew/3.12.rst:1485
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: ../../whatsnew/3.12.rst:1485
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: ../../whatsnew/3.12.rst:1486
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: ../../whatsnew/3.12.rst:1486
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: ../../whatsnew/3.12.rst:1487
msgid "``imp.load_source()``"
msgstr "``imp.ladda_källa()``"

#: ../../whatsnew/3.12.rst:1487
msgid "*See below*"
msgstr "*Se nedan*"

#: ../../whatsnew/3.12.rst:1490
msgid "Replace ``imp.load_source()`` with::"
msgstr "Ersätt ``imp.load_source()`` med::"

#: ../../whatsnew/3.12.rst:1492
msgid ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, "
"loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # The module is always executed and not cached in sys.modules.\n"
"    # Uncomment the following line to cache the module.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"
msgstr ""
"import importlib.util\n"
"importera importlib.machinery\n"
"\n"
"def load_source(modnamn, filnamn):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, "
"loader=loader)\n"
"    modul = importlib.util.module_from_spec(spec)\n"
"    # Modulen exekveras alltid och cachas inte i sys.modules.\n"
"    # Kommentera bort följande rad för att cachelagra modulen.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(modul)\n"
"    returnera modul"

#: ../../whatsnew/3.12.rst:1505
msgid "Remove :mod:`!imp` functions and attributes with no replacements:"
msgstr "Ta bort :mod:`!imp` funktioner och attribut utan ersättare:"

#: ../../whatsnew/3.12.rst:1507
msgid "Undocumented functions:"
msgstr "Odokumenterade funktioner:"

#: ../../whatsnew/3.12.rst:1509
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: ../../whatsnew/3.12.rst:1510
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: ../../whatsnew/3.12.rst:1511
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: ../../whatsnew/3.12.rst:1512
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: ../../whatsnew/3.12.rst:1514
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: "
"låsschemat har ändrats i Python 3.3 till lås per modul."

#: ../../whatsnew/3.12.rst:1516
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""
"konstanter för ``imp.find_module()``: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."

#: ../../whatsnew/3.12.rst:1521
msgid "io"
msgstr "io"

#: ../../whatsnew/3.12.rst:1523
msgid ""
"Remove :mod:`io`'s ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` (:func:`io."
"open`) function is a built-in function. Since Python 3.10, :func:`!_pyio."
"open` is also a static method. (Contributed by Victor Stinner in :gh:"
"`94169`.)"
msgstr ""
"Ta bort :mod:`io`:s ``io.OpenWrapper`` och ``_pyio.OpenWrapper``, föråldrade "
"i Python 3.10: använd bara :func:`open` istället. Funktionen :func:`open` (:"
"func:`io.open`) är en inbyggd funktion. Sedan Python 3.10 är :func:`!_pyio."
"open` också en statisk metod. (Bidrag från Victor Stinner i :gh:`94169`.)"

#: ../../whatsnew/3.12.rst:1530
msgid "locale"
msgstr "lokal"

#: ../../whatsnew/3.12.rst:1532
msgid ""
"Remove :mod:`locale`'s :func:`!locale.format` function, deprecated in Python "
"3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""
"Ta bort :mod:`locale`:s :func:`!locale.format`-funktion, föråldrad i Python "
"3.7: använd :func:`locale.format_string` istället. (Bidrag från Victor "
"Stinner i :gh:`94226`.)"

#: ../../whatsnew/3.12.rst:1537
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.12.rst:1539
msgid ""
"The ``smtpd`` module has been removed according to the schedule in :pep:"
"`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use the :pypi:"
"`aiosmtpd` PyPI module or any other :mod:`asyncio`-based server instead. "
"(Contributed by Oleg Iarygin in :gh:`93243`.)"
msgstr ""
"Modulen ``smtpd`` har tagits bort enligt schemat i :pep:`594`, efter att ha "
"blivit föråldrad i Python 3.4.7 och 3.5.4. Använd PyPI-modulen :pypi:"
"`aiosmtpd` eller någon annan :mod:`asyncio`-baserad server istället. (Bidrag "
"från Oleg Iarygin i :gh:`93243`.)"

#: ../../whatsnew/3.12.rst:1548
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr ""
"Följande odokumenterade :mod:`sqlite3`-funktioner, föråldrade i Python 3.10, "
"är nu borttagna:"

#: ../../whatsnew/3.12.rst:1551
msgid "``sqlite3.enable_shared_cache()``"
msgstr "```sqlite3.enable_shared_cache()```"

#: ../../whatsnew/3.12.rst:1552
msgid "``sqlite3.OptimizedUnicode``"
msgstr "```sqlite3.OptimizedUnicode``"

#: ../../whatsnew/3.12.rst:1554
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""
"Om en delad cache måste användas öppnar du databasen i URI-läge med "
"frågeparametern ``cache=shared``."

#: ../../whatsnew/3.12.rst:1557
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for :class:"
"`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""
"Textfabriken ``sqlite3.OptimizedUnicode`` har varit ett alias för :class:"
"`str` sedan Python 3.3. Kod som tidigare satte textfabriken till "
"``OptimizedUnicode`` kan antingen använda ``str`` explicit, eller förlita "
"sig på standardvärdet som också är ``str``."

#: ../../whatsnew/3.12.rst:1562
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr "(Bidrag från Erlend E. Aasland i :gh:`92548`.)"

#: ../../whatsnew/3.12.rst:1565
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.12.rst:1567
msgid ""
"Remove :mod:`ssl`'s :func:`!ssl.RAND_pseudo_bytes` function, deprecated in "
"Python 3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"Ta bort :mod:`ssl`:s :func:`!ssl.RAND_pseudo_bytes`-funktion, föråldrad i "
"Python 3.6: använd :func:`os.urandom` eller :func:`ssl.RAND_bytes` istället. "
"(Bidrag från Victor Stinner i :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1571
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python "
"3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"Ta bort funktionen :func:`!ssl.match_hostname`. Den var föråldrad i Python "
"3.7. OpenSSL utför matchning av värdnamn sedan Python 3.7, Python använder "
"inte längre funktionen :func:`!ssl.match_hostname`. (Bidrag från Victor "
"Stinner i :gh:`94199`.)"

#: ../../whatsnew/3.12.rst:1577
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its :class:`ssl."
"SSLContext.wrap_socket` method. Any package that still uses :func:`!ssl."
"wrap_socket` is broken and insecure. The function neither sends a SNI TLS "
"extension nor validates the server hostname. Code is subject to :cwe:`295` "
"(Improper Certificate Validation). (Contributed by Victor Stinner in :gh:"
"`94199`.)"
msgstr ""
"Ta bort funktionen :func:`!ssl.wrap_socket`, föråldrad i Python 3.7: skapa "
"istället ett :class:`ssl.SSLContext`-objekt och anropa dess :class:`ssl."
"SSLContext.wrap_socket`-metod. Alla paket som fortfarande använder :func:`!"
"ssl.wrap_socket` är trasiga och osäkra. Funktionen skickar varken ett SNI "
"TLS-tillägg eller validerar serverns värdnamn. Koden är föremål för :cwe:"
"`295` (Felaktig validering av certifikat). (Bidrag från Victor Stinner i :gh:"
"`94199`.)"

#: ../../whatsnew/3.12.rst:1588
msgid "Remove many long-deprecated :mod:`unittest` features:"
msgstr "Ta bort många sedan länge föråldrade :mod:`unittest`-funktioner:"

#: ../../whatsnew/3.12.rst:1592
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr "Ett antal :class:`~unittest.TestCase` metodalias:"

#: ../../whatsnew/3.12.rst:1595
msgid "Deprecated alias"
msgstr "Föråldrat alias"

#: ../../whatsnew/3.12.rst:1595
msgid "Method Name"
msgstr "Metod Namn"

#: ../../whatsnew/3.12.rst:1595
msgid "Deprecated in"
msgstr "Avskrivna i"

#: ../../whatsnew/3.12.rst:1597
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1604
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1598
#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1600
#: ../../whatsnew/3.12.rst:1601 ../../whatsnew/3.12.rst:1602
#: ../../whatsnew/3.12.rst:1603
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.12.rst:1598
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.12.rst:1598
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.12.rst:1599
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1605
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.12.rst:1600
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.12.rst:1600 ../../whatsnew/3.12.rst:1606
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.12.rst:1601
msgid "``failUnlessAlmostEqual``"
msgstr "\"misslyckas utan undantag nästan lika"

#: ../../whatsnew/3.12.rst:1601 ../../whatsnew/3.12.rst:1607
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.12.rst:1602
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.12.rst:1602 ../../whatsnew/3.12.rst:1608
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.12.rst:1603
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.12.rst:1603
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.12.rst:1604
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.12.rst:1604 ../../whatsnew/3.12.rst:1605
#: ../../whatsnew/3.12.rst:1606 ../../whatsnew/3.12.rst:1607
#: ../../whatsnew/3.12.rst:1608 ../../whatsnew/3.12.rst:1609
#: ../../whatsnew/3.12.rst:1610
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.12.rst:1605
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.12.rst:1606
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.12.rst:1607
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.12.rst:1608
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.12.rst:1609
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.12.rst:1609
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.12.rst:1610
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.12.rst:1610
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.12.rst:1611
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.12.rst:1611
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.12.rst:1611
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.12.rst:1614
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr ""
"Du kan använda https://github.com/isidentical/teyit för att automatiskt "
"modernisera dina enhetstester."

#: ../../whatsnew/3.12.rst:1617
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""
"Odokumenterad och trasig :class:`~unittest.TestCase`-metoden "
"``assertDictContainsSubset`` (föråldrad i Python 3.2)."

#: ../../whatsnew/3.12.rst:1620
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule <unittest.TestLoader."
"loadTestsFromModule>` parameter *use_load_tests* (deprecated and ignored "
"since Python 3.5)."
msgstr ""
"Odokumenterad :meth:`TestLoader.loadTestsFromModule <unittest.TestLoader."
"loadTestsFromModule>` parameter *use_load_tests* (föråldrad och ignorerad "
"sedan Python 3.5)."

#: ../../whatsnew/3.12.rst:1624
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult`` "
"(deprecated in Python 3.2)."
msgstr ""
"Ett alias för klassen :class:`~unittest.TextTestResult`: ``_TextTestResult`` "
"(föråldrad i Python 3.2)."

#: ../../whatsnew/3.12.rst:1627
msgid "(Contributed by Serhiy Storchaka in :gh:`89325`.)"
msgstr "(Bidrag från Serhiy Storchaka i :gh:`89325`.)"

#: ../../whatsnew/3.12.rst:1630
msgid "webbrowser"
msgstr "webbläsare"

#: ../../whatsnew/3.12.rst:1632
msgid ""
"Remove support for obsolete browsers from :mod:`webbrowser`. The removed "
"browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird, and Firefox versions 35 and below (:gh:`102871`)."
msgstr ""
"Ta bort stöd för föråldrade webbläsare från :mod:`webbrowser`. De borttagna "
"webbläsarna inkluderar: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird och Firefox version 35 och lägre (:gh:`102871`)."

#: ../../whatsnew/3.12.rst:1637
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.12.rst:1639
msgid ""
"Remove the ``ElementTree.Element.copy()`` method of the pure Python "
"implementation, deprecated in Python 3.10, use the :func:`copy.copy` "
"function instead.  The C implementation of :mod:`xml.etree.ElementTree` has "
"no ``copy()`` method, only a ``__copy__()`` method. (Contributed by Victor "
"Stinner in :gh:`94383`.)"
msgstr ""
"Ta bort metoden ``ElementTree.Element.copy()`` i den rena Python-"
"implementationen, föråldrad i Python 3.10, använd funktionen :func:`copy."
"copy` istället.  C-implementeringen av :mod:`xml.etree.ElementTree` har "
"ingen ``copy()``-metod, bara en ``__copy__()``-metod. (Bidrag från Victor "
"Stinner i :gh:`94383`.)"

#: ../../whatsnew/3.12.rst:1646
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.12.rst:1648
msgid ""
"Remove :mod:`zipimport`'s ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See :pep:"
"`451` for the rationale. (Contributed by Victor Stinner in :gh:`94379`.)"
msgstr ""
"Ta bort :mod:`zipimport`'s ``find_loader()`` och ``find_module()`` metoder, "
"föråldrade i Python 3.10: använd ``find_spec()`` metoden istället.  Se :pep:"
"`451` för motiveringen. (Bidrag från Victor Stinner i :gh:`94379`.)"

#: ../../whatsnew/3.12.rst:1654
msgid "Others"
msgstr "Andra"

#: ../../whatsnew/3.12.rst:1656
msgid ""
"Remove the ``suspicious`` rule from the documentation :file:`Makefile` and :"
"file:`Doc/tools/rstlint.py`, both in favor of `sphinx-lint <https://github."
"com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien Palard in :gh:"
"`98179`.)"
msgstr ""
"Ta bort ``misstänksam``-regeln från dokumentationen :file:`Makefile`` och :"
"file:`Doc/tools/rstlint.py``, båda till förmån för `sphinx-lint <https://"
"github.com/sphinx-contrib/sphinx-lint>`_. (Bidrag från Julien Palard i :gh:"
"`98179`.)"

#: ../../whatsnew/3.12.rst:1661
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, :mod:"
"`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the *key_file*, "
"*cert_file* and *check_hostname* parameters from the :mod:`http.client` "
"module, all deprecated since Python 3.6. Use the *context* parameter "
"(*ssl_context* in :mod:`imaplib`) instead. (Contributed by Victor Stinner "
"in :gh:`94172`.)"
msgstr ""
"Ta bort parametrarna *keyfile* och *certfile* från modulerna :mod:`ftplib`, :"
"mod:`imaplib`, :mod:`poplib` och :mod:`smtplib`, och parametrarna "
"*key_file*, *cert_file* och *check_hostname* från modulen :mod:`http."
"client`, alla föråldrade sedan Python 3.6. Använd parametern *context* "
"(*ssl_context* i :mod:`imaplib`) istället. (Bidrag från Victor Stinner i :gh:"
"`94172`.)"

#: ../../whatsnew/3.12.rst:1669
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests. "
"(Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""
"Ta bort ``Jython``-kompatibilitetshack från flera stdlib-moduler och tester. "
"(Bidrag från Nikita Sobolev i :gh:`99482`.)"

#: ../../whatsnew/3.12.rst:1672
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from :mod:"
"`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""
"Ta bort flaggan ``_use_broken_old_ctypes_structure_semantics_`` från "
"modulen :mod:`ctypes`. (Bidrag från Nikita Sobolev i :gh:`99285`.)"

#: ../../whatsnew/3.12.rst:1680 ../../whatsnew/3.12.rst:2004
msgid "Porting to Python 3.12"
msgstr "Portning till Python 3.12"

#: ../../whatsnew/3.12.rst:1682
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

#: ../../whatsnew/3.12.rst:1686
msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

#: ../../whatsnew/3.12.rst:1688
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
"Strängare regler tillämpas nu för numeriska gruppreferenser och gruppnamn i "
"reguljära uttryck. Endast en sekvens av ASCII-siffror accepteras nu som "
"numerisk referens. Gruppnamnet i bytesmönster och ersättningssträngar kan nu "
"endast innehålla ASCII-bokstäver och -siffror samt understreck. (Bidrag från "
"Serhiy Storchaka i :gh:`91760`.)"

#: ../../whatsnew/3.12.rst:1695
msgid ""
"Remove ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs "
"where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka :gh:"
"`86388`.)"
msgstr ""
"Ta bort ``randrange()`` funktionalitet som är föråldrad sedan Python 3.10.  "
"Tidigare konverterade ``randrange(10.0)`` förlustfritt till "
"``randrange(10)``. Nu ger det upphov till ett :exc:`TypeError`. Undantaget "
"för icke heltalsvärden som ``randrange(10.5)`` eller ``randrange('10')`` har "
"också ändrats från :exc:`ValueError` till :exc:`TypeError`.  Detta "
"förhindrar också buggar där ``randrange(1e25)`` tyst skulle välja från ett "
"större intervall än ``randrange(10**25)``. (Ursprungligen föreslaget av "
"Serhiy Storchaka :gh:`86388`.)"

#: ../../whatsnew/3.12.rst:1703
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage "
"on Windows."
msgstr ""
":class:`argparse.ArgumentParser` ändrade kodning och felhantering för "
"läsning av argument från fil (t.ex. alternativet ``fromfile_prefix_chars``) "
"från standardtextkodning (t.ex. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) till :term:`filsystemkodning och "
"felhantering`. Argumentfiler bör kodas i UTF-8 istället för ANSI Codepage på "
"Windows."

#: ../../whatsnew/3.12.rst:1709
msgid ""
"Remove the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based :pypi:"
"`aiosmtpd` PyPI module."
msgstr ""
"Ta bort den ``asyncore``-baserade modulen ``smtpd`` som är föråldrad i "
"Python 3.4.7 och 3.5.4.  En rekommenderad ersättning är den :mod:`asyncio`-"
"baserade :pypi:`aiosmtpd` PyPI-modulen."

#: ../../whatsnew/3.12.rst:1713
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated "
"in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""
":func:`shlex.split`: Att skicka ``None`` för *s*-argumentet ger nu upphov "
"till ett undantag, istället för att läsa :data:`sys.stdin`. Funktionen "
"utrangerades i Python 3.9. (Bidrag från Victor Stinner i :gh:`94352`.)"

#: ../../whatsnew/3.12.rst:1718
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like :class:"
"`bytearray` and :class:`memoryview` types: only the exact :class:`bytes` "
"type is accepted for bytes strings. (Contributed by Victor Stinner in :gh:"
"`98393`.)"
msgstr ""
"Modulen :mod:`os` accepterar inte längre bytesliknande sökvägar, som "
"typerna :class:`bytearray` och :class:`memoryview`: endast den exakta typen :"
"class:`bytes` accepteras för bytessträngar. (Bidrag från Victor Stinner i :"
"gh:`98393`.)"

#: ../../whatsnew/3.12.rst:1723
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters, "
"but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so "
"only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Donghee Na in :gh:`99127`.)"
msgstr ""
":func:`syslog.openlog` och :func:`syslog.closelog` misslyckas nu om de "
"används i undertolkare. :func:`syslog.syslog` kan fortfarande användas i "
"undertolkare, men nu endast om :func:`syslog.openlog` redan har anropats i "
"huvudtolkaren. Dessa nya restriktioner gäller inte för huvudtolken, så "
"endast ett mycket litet antal användare kan komma att påverkas. Den här "
"ändringen hjälper till att isolera tolkar.  Dessutom är :mod:`syslog` ett "
"omslag runt processglobala resurser, som bäst hanteras från huvudtolken. "
"(Bidrag från Donghee Na i :gh:`99127`.)"

#: ../../whatsnew/3.12.rst:1732
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For "
"most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""
"Det odokumenterade låsbeteendet för :func:`~functools.cached_property` har "
"tagits bort, eftersom det låste alla instanser av klassen, vilket ledde till "
"hög låskonkurrens. Detta innebär att en getter-funktion för en cachelagrad "
"egenskap nu kan köras mer än en gång för en enda instans om två trådar "
"tävlar. För de flesta enkla cachade egenskaper (t.ex. de som är idempotenta "
"och helt enkelt beräknar ett värde baserat på andra attribut för instansen) "
"kommer detta att fungera bra.  Om synkronisering behövs ska du implementera "
"låsning i getter-funktionen för den cachade egenskapen eller runt "
"åtkomstpunkter med flera trådar."

#: ../../whatsnew/3.12.rst:1745
msgid ""
"When extracting tar files using :mod:`tarfile` or :func:`shutil."
"unpack_archive`, pass the *filter* argument to limit features that may be "
"surprising or dangerous. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
"När du extraherar tar-filer med :mod:`tarfile` eller :func:`shutil."
"unpack_archive` kan du använda argumentet *filter* för att begränsa "
"funktioner som kan vara överraskande eller farliga. Se :ref:`tarfile-"
"extraction-filter` för mer information."

#: ../../whatsnew/3.12.rst:1750
msgid ""
"The output of the :func:`tokenize.tokenize` and :func:`tokenize."
"generate_tokens` functions is now changed due to the changes introduced in :"
"pep:`701`. This means that ``STRING`` tokens are not emitted any more for f-"
"strings and the tokens described in :pep:`701` are now produced instead: "
"``FSTRING_START``, ``FSTRING_MIDDLE`` and ``FSTRING_END`` are now emitted "
"for f-string \"string\" parts in addition to the appropriate tokens for the "
"tokenization in the expression components. For example for the f-string "
"``f\"start {1+1} end\"`` the old version of the tokenizer emitted::"
msgstr ""
"Utdata från funktionerna :func:`tokenize.tokenize` och :func:`tokenize."
"generate_tokens` har nu ändrats på grund av ändringarna som introducerades "
"i :pep:`701`. Detta innebär att ``STRING``-tokens inte längre skickas ut för "
"f-strängar och de tokens som beskrivs i :pep:`701` produceras nu istället: "
"``FSTRING_START``, ``FSTRING_MIDDLE`` och ``FSTRING_END`` emitteras nu för f-"
"strings \"string\"-delar utöver de lämpliga tokens för tokeniseringen i "
"uttryckskomponenterna. Till exempel för f-strängen ``f\"start {1+1} end\"`` "
"gav den gamla versionen av tokenizer ut::"

#: ../../whatsnew/3.12.rst:1759
msgid "1,0-1,18:           STRING         'f\"start {1+1} end\"'"
msgstr "1,0-1,18: STRING 'f\"start {1+1} slut\"'"

#: ../../whatsnew/3.12.rst:1761
msgid "while the new version emits::"
msgstr "medan den nya versionen avger::"

#: ../../whatsnew/3.12.rst:1763
msgid ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"
msgstr ""
"1,0-1,2:            FSTRING_START 'f\"'\n"
"1,2-1,8: FSTRING_MIDDLE 'start '\n"
"1,8-1,9: OP '{'\n"
"1,9-1,10: NUMMER '1'\n"
"1,10-1,11: OP '+'\n"
"1,11-1,12: NUMMER '1'\n"
"1,12-1,13: OP \"}\n"
"1,13-1,17: FSTRING_MIDDLE ' slut'\n"
"1,17-1,18: FSTRING_END '\"'"

#: ../../whatsnew/3.12.rst:1773
msgid ""
"Additionally, there may be some minor behavioral changes as a consequence of "
"the changes required to support :pep:`701`. Some of these changes include:"
msgstr ""
"Dessutom kan det förekomma vissa mindre beteendeförändringar som en följd av "
"de förändringar som krävs för att stödja :pep:`701`. Några av dessa "
"förändringar inkluderar:"

#: ../../whatsnew/3.12.rst:1776
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""
"Attributet ``type`` för de tokens som skickas ut vid tokenisering av vissa "
"ogiltiga Python-tecken som ``!`` har ändrats från ``ERRORTOKEN`` till ``OP``."

#: ../../whatsnew/3.12.rst:1779
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr ""
"Ofullständiga enradiga strängar ger nu också upphov till :exc:`tokenize."
"TokenError` på samma sätt som ofullständiga flerradiga strängar gör."

#: ../../whatsnew/3.12.rst:1782
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError` "
"instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""
"Viss ofullständig eller ogiltig Python-kod ger nu upphov till :exc:`tokenize."
"TokenError` istället för att returnera godtyckliga ``ERRORTOKEN``-tokens när "
"den tokeniseras."

#: ../../whatsnew/3.12.rst:1785
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr ""
"Att blanda tabbar och mellanslag som indrag i samma fil stöds inte längre "
"och kommer att ge upphov till ett :exc:`TabError`."

#: ../../whatsnew/3.12.rst:1788
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"Modulen :mod:`threading` förväntar sig nu att modulen :mod:`!_thread` har "
"ett attribut för ``_is_main_interpreter``.  Det är en funktion utan argument "
"som returnerar ``True`` om den aktuella tolken är huvudtolken."

#: ../../whatsnew/3.12.rst:1793
msgid ""
"Any library or application that provides a custom ``_thread`` module should "
"provide ``_is_main_interpreter()``. (See :gh:`112826`.)"
msgstr ""
"Alla bibliotek eller program som tillhandahåller en anpassad ``_thread``-"
"modul bör tillhandahålla ``_is_main_interpreter()``. (Se :gh:`112826`.)"

#: ../../whatsnew/3.12.rst:1798
msgid "Build Changes"
msgstr "Förändringar i byggning"

#: ../../whatsnew/3.12.rst:1800
msgid ""
"Python no longer uses :file:`setup.py` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by :file:`Makefile`. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes "
"in :gh:`93939`.)"
msgstr ""
"Python använder inte längre :file:`setup.py` för att bygga delade C-"
"tilläggsmoduler. Byggparametrar som rubriker och bibliotek upptäcks i "
"skriptet ``configure``. Tillägg byggs av :file:`Makefile`. De flesta tillägg "
"använder ``pkg-config`` och faller tillbaka på manuell detektering. (Bidrag "
"från Christian Heimes i :gh:`93939`.)"

#: ../../whatsnew/3.12.rst:1806
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""
"``va_start()`` med två parametrar, som ``va_start(args, format),`` krävs nu "
"för att bygga Python. ``va_start()`` anropas inte längre med en enda "
"parameter. (Bidrag från Kumar Aditya i :gh:`93207`.)"

#: ../../whatsnew/3.12.rst:1811
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Donghee Na "
"in :gh:`89536`.)"
msgstr ""
"CPython använder nu alternativet ThinLTO som standardpolicy för optimering "
"av länktid om Clang-kompilatorn accepterar flaggan. (Bidrag från Donghee Na "
"i :gh:`89536`.)"

#: ../../whatsnew/3.12.rst:1815
msgid ""
"Add ``COMPILEALL_OPTS`` variable in :file:`Makefile` to override :mod:"
"`compileall` options (default: ``-j0``) in ``make install``. Also merged the "
"3 ``compileall`` commands into a single command to build .pyc files for all "
"optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in :gh:"
"`99289`.)"
msgstr ""
"Lägg till variabeln ``COMPILEALL_OPTS`` i :file:`Makefile`` för att "
"åsidosätta :mod:`compileall``-alternativen (standard: ``-j0``) i ``make "
"install``. Sammanslog även de 3 ``compileall`` kommandona till ett enda "
"kommando för att bygga .pyc-filer för alla optimeringsnivåer (0, 1, 2) på en "
"gång. (Bidrag från Victor Stinner i :gh:`99289`.)"

#: ../../whatsnew/3.12.rst:1821
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr "Lägg till plattformstripletter för 64-bitars LoongArch:"

#: ../../whatsnew/3.12.rst:1823
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: ../../whatsnew/3.12.rst:1824
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: ../../whatsnew/3.12.rst:1825
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: ../../whatsnew/3.12.rst:1827
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr "(Bidrag från Zhang Na i :gh:`90656`.)"

#: ../../whatsnew/3.12.rst:1829
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr "``PYTHON_FOR_REGEN`` kräver nu Python 3.10 eller nyare."

#: ../../whatsnew/3.12.rst:1831
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate :file:"
"`configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""
"Autoconf 2.71 och aclocal 1.16.4 krävs nu för att regenerera :file:"
"`configure`. (Bidrag från Christian Heimes i :gh:`89886`.)"

#: ../../whatsnew/3.12.rst:1835
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""
"Windows-byggnader och macOS-installationer från python.org använder nu "
"OpenSSL 3.0."

#: ../../whatsnew/3.12.rst:1839
msgid "C API Changes"
msgstr "Ändringar i C API"

#: ../../whatsnew/3.12.rst:1846
msgid ""
":pep:`697`: Introduce the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""
":pep:`697`: Introducera :ref:``Unstable C API tier <unstable-c-api>``, "
"avsedd för lågnivåverktyg som debuggers och JIT-kompilatorer. Detta API kan "
"ändras i varje mindre utgåva av CPython utan varningar om föråldring. Dess "
"innehåll är markerat med prefixet ``PyUnstable_`` i namn."

#: ../../whatsnew/3.12.rst:1852
msgid "Code object constructors:"
msgstr "Konstruktörer för kodobjekt:"

#: ../../whatsnew/3.12.rst:1854
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr "``PyUnstable_Code_New()`` (bytt namn från ``PyCode_New``)"

#: ../../whatsnew/3.12.rst:1855
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (bytt namn från "
"``PyCode_NewWithPosOnlyArgs``)"

#: ../../whatsnew/3.12.rst:1857
msgid "Extra storage for code objects (:pep:`523`):"
msgstr "Extra lagringsutrymme för kodobjekt (:pep:`523`):"

#: ../../whatsnew/3.12.rst:1859
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (bytt namn från "
"``_PyEval_RequestCodeExtraIndex``)"

#: ../../whatsnew/3.12.rst:1860
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr "``PyUnstable_Code_GetExtra()`` (bytt namn från ``_PyCode_GetExtra``)"

#: ../../whatsnew/3.12.rst:1861
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr "``PyUnstable_Code_SetExtra()`` (bytt namn från ``_PyCode_SetExtra``)"

#: ../../whatsnew/3.12.rst:1863
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr ""
"De ursprungliga namnen kommer att fortsätta att vara tillgängliga tills "
"respektive API ändras."

#: ../../whatsnew/3.12.rst:1866
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr "(Bidrag från Petr Viktorin i :gh:`101101`.)"

#: ../../whatsnew/3.12.rst:1868
msgid ""
":pep:`697`: Add an API for extending types whose instance memory layout is "
"opaque:"
msgstr ""
":pep:`697`: Lägg till ett API för att utöka typer vars instansminneslayout "
"är opak:"

#: ../../whatsnew/3.12.rst:1871
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ""
":c:member:`PyType_Spec.basicsize` kan vara noll eller negativ för att ange "
"att basklassens storlek ärvs eller utökas."

#: ../../whatsnew/3.12.rst:1873
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to "
"allow access to subclass-specific instance data."
msgstr ""
":c:func:`PyObject_GetTypeData` och :c:func:`PyType_GetTypeDataSize` har "
"lagts till för att ge tillgång till subklassspecifika instansdata."

#: ../../whatsnew/3.12.rst:1875
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including :c:var:"
"`PyType_Type`."
msgstr ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` och :c:func:`PyObject_GetItemData` har "
"lagts till för att på ett säkert sätt kunna utöka vissa typer med variabel "
"storlek, inklusive :c:var:`PyType_Type`."

#: ../../whatsnew/3.12.rst:1878
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""
":c:macro:`Py_RELATIVE_OFFSET` tillagd för att tillåta definition av :c:type:"
"`members <PyMemberDef>` i termer av en underklass-specifik struktur."

#: ../../whatsnew/3.12.rst:1881
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr "(Bidrag från Petr Viktorin i :gh:`103509`.)"

#: ../../whatsnew/3.12.rst:1883
msgid ""
"Add the new :ref:`limited C API <limited-c-api>` function :c:func:"
"`PyType_FromMetaclass`, which generalizes the existing :c:func:"
"`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""
"Lägg till den nya :ref:``limited C API <limited-c-api>`` funktionen :c:func:"
"`PyType_FromMetaclass`, som generaliserar den befintliga :c:func:"
"`PyType_FromModuleAndSpec` med hjälp av ett extra metaklassargument. (Bidrag "
"från Wenzel Jakob i :gh:`93012`.)"

#: ../../whatsnew/3.12.rst:1888
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""
"API för att skapa objekt som kan anropas med hjälp av :ref:`the vectorcall "
"protocol <vectorcall>` lades till i :ref:`Limited API <stable>`:"

#: ../../whatsnew/3.12.rst:1892
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"

#: ../../whatsnew/3.12.rst:1893
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: ../../whatsnew/3.12.rst:1894
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: ../../whatsnew/3.12.rst:1895
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vektorcallfunc`"

#: ../../whatsnew/3.12.rst:1897
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the "
"immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do "
"not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in :gh:"
"`93274`.)"
msgstr ""
"Flaggan :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` tas nu bort från en klass när "
"klassens metod :py:meth:`~object.__call__` tilldelas på nytt. Detta gör "
"vectorcall säkert att använda med föränderliga typer (dvs. heap-typer utan "
"flaggan immutable, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutabla typer som "
"inte åsidosätter :c:member:`~PyTypeObject.tp_call` ärver nu flaggan "
"``Py_TPFLAGS_HAVE_VECTORCALL``. (Bidrag från Petr Viktorin i :gh:`93274`.)"

#: ../../whatsnew/3.12.rst:1905
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows extensions "
"classes to support object :attr:`~object.__dict__` and weakrefs with less "
"bookkeeping, using less memory and with faster access."
msgstr ""
"Flaggorna :c:macro:`Py_TPFLAGS_MANAGED_DICT` och :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` har lagts till. Detta gör att tilläggsklasser "
"kan stödja objekt :attr:`~object.__dict__` och weakrefs med mindre "
"bokföring, mindre minnesanvändning och snabbare åtkomst."

#: ../../whatsnew/3.12.rst:1910
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""
"API för att utföra anrop med :ref:`the vectorcall protocol <vectorcall>` "
"lades till i :ref:`Limited API <stable>`:"

#: ../../whatsnew/3.12.rst:1914
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../whatsnew/3.12.rst:1915
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../whatsnew/3.12.rst:1916
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ":c:makro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#: ../../whatsnew/3.12.rst:1918
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""
"Detta innebär att både den inkommande och utgående delen av vector call-"
"protokollet nu finns tillgängligt i :ref:`Limited API <stable>`. (Bidrag "
"från Wenzel Jakob i :gh:`98586`.)"

#: ../../whatsnew/3.12.rst:1922
msgid ""
"Add two new public functions, :c:func:`PyEval_SetProfileAllThreads` and :c:"
"func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling "
"functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"Lägg till två nya publika funktioner, :c:func:`PyEval_SetProfileAllThreads` "
"och :c:func:`PyEval_SetTraceAllThreads`, som gör det möjligt att ställa in "
"spårnings- och profileringsfunktioner i alla trådar som körs utöver den "
"anropande. (Bidrag från Pablo Galindo i :gh:`93503`.)"

#: ../../whatsnew/3.12.rst:1928
msgid ""
"Add new function :c:func:`PyFunction_SetVectorcall` to the C API which sets "
"the vectorcall field of a given :c:type:`PyFunctionObject`. (Contributed by "
"Andrew Frost in :gh:`92257`.)"
msgstr ""
"Lägg till ny funktion :c:func:`PyFunction_SetVectorcall` till C API som "
"ställer in vectorcall-fältet för en given :c:type:`PyFunctionObject`. "
"(Bidrag från Andrew Frost i :gh:`92257`.)"

#: ../../whatsnew/3.12.rst:1932
msgid ""
"The C API now permits registering callbacks via :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` and related APIs to be called "
"whenever a dictionary is modified. This is intended for use by optimizing "
"interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in :gh:"
"`91052`.)"
msgstr ""
"C API:et tillåter nu registrering av callbacks via :c:func:"
"`PyDict_AddWatcher`, :c:func:`PyDict_Watch` och relaterade API:er som "
"anropas när en ordbok ändras. Detta är avsett att användas av optimerande "
"tolkar, JIT-kompilatorer eller debuggar. (Bidrag från Carl Meyer i :gh:"
"`91052`.)"

#: ../../whatsnew/3.12.rst:1938
msgid ""
"Add :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl "
"Meyer in :gh:`91051`.)"
msgstr ""
"Lägg till :c:func:`PyType_AddWatcher` och :c:func:`PyType_Watch` API för att "
"registrera anrop för att få meddelanden om ändringar av en typ. (Bidrag från "
"Carl Meyer i :gh:`91051`.)"

#: ../../whatsnew/3.12.rst:1942
msgid ""
"Add :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Oren in :gh:`91054`.)"
msgstr ""
"Lägg till API:erna :c:func:`PyCode_AddWatcher` och :c:func:"
"`PyCode_ClearWatcher` för att registrera återuppringningar för att få "
"meddelanden om skapande och förstörelse av kodobjekt. (Bidrag från Itamar "
"Oren i :gh:`91054`.)"

#: ../../whatsnew/3.12.rst:1947
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to "
"get a frame variable by its name. (Contributed by Victor Stinner in :gh:"
"`91248`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyFrame_GetVar` och :c:func:"
"`PyFrame_GetVarString` för att hämta en ramvariabel med dess namn. (Bidrag "
"från Victor Stinner i :gh:`91248`.)"

#: ../../whatsnew/3.12.rst:1951
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and :c:func:"
"`PyErr_SetRaisedException` for saving and restoring the current exception. "
"These functions return and accept a single exception object, rather than the "
"triple arguments of the now-deprecated :c:func:`PyErr_Fetch` and :c:func:"
"`PyErr_Restore`. This is less error prone and a bit more efficient. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Lägg till :c:func:`PyErr_GetRaisedException` och :c:func:"
"`PyErr_SetRaisedException` för att spara och återställa det aktuella "
"undantaget. Dessa funktioner returnerar och accepterar ett enda "
"undantagsobjekt, i stället för de tre argument som finns i de numera "
"föråldrade :c:func:`PyErr_Fetch` och :c:func:`PyErr_Restore`. Detta är "
"mindre felbenäget och lite mer effektivt. (Bidrag från Mark Shannon i :gh:"
"`101578`.)"

#: ../../whatsnew/3.12.rst:1959
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Lägg till ``_PyErr_ChainExceptions1``, som tar en undantagsinstans, för att "
"ersätta legacy-API ``_PyErr_ChainExceptions``, som nu är föråldrad. (Bidrag "
"från Mark Shannon i :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:1963
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the :attr:`~BaseException."
"args` passed to the exception's constructor. (Contributed by Mark Shannon "
"in :gh:`101578`.)"
msgstr ""
"Lägg till :c:func:`PyException_GetArgs` och :c:func:`PyException_SetArgs` "
"som bekvämlighetsfunktioner för att hämta och modifiera :attr:"
"`~BaseException.args` som skickas till undantagets konstruktör. (Bidrag från "
"Mark Shannon i :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:1968
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""
"Lägg till :c:func:`PyErr_DisplayException`, som tar en undantagsinstans, för "
"att ersätta legacy-api :c:func:`!PyErr_Display`. (Bidrag från Irit Katriel "
"i :gh:`102755`)."

#: ../../whatsnew/3.12.rst:1974
msgid ""
":pep:`683`: Introduce *Immortal Objects*, which allows objects to bypass "
"reference counts, and related changes to the C-API:"
msgstr ""
":pep:`683`: Introducera *Immortal Objects*, som gör det möjligt för objekt "
"att kringgå referensräkningar, och relaterade ändringar i C-API:"

#: ../../whatsnew/3.12.rst:1977
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr "``_Py_IMMORTAL_REFCNT``: Referensantalet som definierar ett objekt"

#: ../../whatsnew/3.12.rst:1978
msgid "as immortal."
msgstr "som odödlig."

#: ../../whatsnew/3.12.rst:1979
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr ""
"``_Py_IsImmortal`` Kontrollerar om ett objekt har det odödliga "
"referensantalet."

#: ../../whatsnew/3.12.rst:1980
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr ""
"``PyObject_HEAD_INIT`` Detta kommer nu att initiera referensantalet till"

#: ../../whatsnew/3.12.rst:1981
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr "``_Py_IMMORTAL_REFCNT`` när den används med ``Py_BUILD_CORE``."

#: ../../whatsnew/3.12.rst:1982
msgid "``SSTATE_INTERNED_IMMORTAL`` An identifier for interned unicode objects"
msgstr ""
"``SSTATE_INTERNED_IMMORTAL`` En identifierare för internerade unicode-objekt"

#: ../../whatsnew/3.12.rst:1983
msgid "that are immortal."
msgstr "som är odödliga."

#: ../../whatsnew/3.12.rst:1984
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr ""
"``SSTATE_INTERNED_IMMORTAL_STATIC`` En identifierare för interned unicode"

#: ../../whatsnew/3.12.rst:1985
msgid "objects that are immortal and static"
msgstr "objekt som är odödliga och statiska"

#: ../../whatsnew/3.12.rst:1986
msgid "``sys.getunicodeinternedsize`` This returns the total number of unicode"
msgstr ""
"``sys.getunicodeinternedsize`` Detta returnerar det totala antalet unicode"

#: ../../whatsnew/3.12.rst:1987
msgid ""
"objects that have been interned. This is now needed for :file:`refleak.py` "
"to correctly track reference counts and allocated blocks"
msgstr ""
"objekt som har internaliserats. Detta behövs nu för att :file:`refleak.py` "
"korrekt ska kunna spåra referensantal och allokerade block"

#: ../../whatsnew/3.12.rst:1990
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr "(Bidrag från Eddie Elizondo i :gh:`84436`.)"

#: ../../whatsnew/3.12.rst:1992
msgid ""
":pep:`684`: Add the new :c:func:`Py_NewInterpreterFromConfig` function and :"
"c:type:`PyInterpreterConfig`, which may be used to create sub-interpreters "
"with their own GILs. (See :ref:`whatsnew312-pep684` for more info.) "
"(Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""
":pep:`684`: Lägg till den nya funktionen :c:func:"
"`Py_NewInterpreterFromConfig` och :c:type:`PyInterpreterConfig`, som kan "
"användas för att skapa undertolkar med sina egna GIL:er. (Se :ref:"
"`whatsnew312-pep684` för mer information.) (Bidrag från Eric Snow i :gh:"
"`104110`.)"

#: ../../whatsnew/3.12.rst:1998
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and :c:func:"
"`Py_DECREF` functions are now implemented as opaque function calls to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`105387`.)"
msgstr ""
"I den begränsade C API-versionen 3.12 är funktionerna :c:func:`Py_INCREF` "
"och :c:func:`Py_DECREF` nu implementerade som opaka funktionsanrop för att "
"dölja implementationsdetaljer. (Bidrag från Victor Stinner i :gh:`105387`.)"

#: ../../whatsnew/3.12.rst:2006
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""
"Äldre Unicode API:er baserade på ``Py_UNICODE*`` representation har tagits "
"bort. Vänligen migrera till API:er baserade på UTF-8 eller ``wchar_t*``."

#: ../../whatsnew/3.12.rst:2009
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""
"Argumentanalysfunktioner som :c:func:`PyArg_ParseTuple` stöder inte längre "
"``Py_UNICODE*``-baserade format (t.ex. ``u``, ``Z``). Vänligen migrera till "
"andra format för Unicode som ``s``, ``z``, ``es`` och ``U``."

#: ../../whatsnew/3.12.rst:2013
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in "
"case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""
"``tp_weaklist`` för alla statiska inbyggda typer är alltid ``NULL``. Detta "
"är ett internt fält på ``PyTypeObject`` men vi påpekar ändringen ifall någon "
"råkar komma åt fältet direkt ändå.  För att undvika avbrott, överväg att "
"använda det befintliga offentliga C-API istället, eller, om nödvändigt, det "
"(endast interna) makrot ``_PyObject_GET_WEAKREFS_LISTPTR()``."

#: ../../whatsnew/3.12.rst:2020
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""
"Denna endast interna :c:member:`PyTypeObject.tp_subclasses` kanske nu inte "
"är en giltig objektpekare.  Dess typ ändrades till :c:expr:`void *` för att "
"återspegla detta.  Vi nämner detta ifall någon råkar komma åt det interna "
"fältet direkt."

#: ../../whatsnew/3.12.rst:2025
msgid ""
"To get a list of subclasses, call the Python method :py:meth:`~type."
"__subclasses__` (using :c:func:`PyObject_CallMethod`, for example)."
msgstr ""
"För att få en lista över underklasser anropar du Python-metoden :py:meth:"
"`~type.__subclasses__` (till exempel med :c:func:`PyObject_CallMethod`)."

#: ../../whatsnew/3.12.rst:2029
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` "
"and :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in :gh:"
"`98836`.)"
msgstr ""
"Lägg till stöd för fler formateringsalternativ (vänsterjustering, oktaler, "
"hexadecimaler med versaler, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:"
"`wchar_t` C-strängar, variabel bredd och precision) i :c:func:"
"`PyUnicode_FromFormat` och :c:func:`PyUnicode_FromFormatV`. (Bidrag från "
"Serhiy Storchaka i :gh:`98836`.)"

#: ../../whatsnew/3.12.rst:2035
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and :c:"
"func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy "
"Storchaka in :gh:`95781`.)"
msgstr ""
"Ett formattecken som inte känns igen i :c:func:`PyUnicode_FromFormat` och :c:"
"func:`PyUnicode_FromFormatV` ger nu upphov till :exc:`SystemError`. I "
"tidigare versioner orsakade det att resten av formatsträngen kopierades som "
"den var till resultatsträngen och att alla extra argument kastades bort. "
"(Bidrag från Serhiy Storchaka i :gh:`95781`.)"

#: ../../whatsnew/3.12.rst:2041
msgid ""
"Fix wrong sign placement in :c:func:`PyUnicode_FromFormat` and :c:func:"
"`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in :gh:`95504`.)"
msgstr ""
"Korrigerar felaktig teckenplacering i :c:func:`PyUnicode_FromFormat` och :c:"
"func:`PyUnicode_FromFormatV`. (Bidrag från Philip Georgi i :gh:`95504`.)"

#: ../../whatsnew/3.12.rst:2045
msgid ""
"Extension classes wanting to add a :attr:`~object.__dict__` or weak "
"reference slot should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "
"declaring :c:macro:`Py_TPFLAGS_MANAGED_DICT` must call :c:func:`!"
"_PyObject_VisitManagedDict` and :c:func:`!_PyObject_ClearManagedDict` to "
"traverse and clear their instance's dictionaries. To clear weakrefs, call :c:"
"func:`PyObject_ClearWeakRefs`, as before."
msgstr ""
"Tilläggsklasser som vill lägga till en :attr:`~object.__dict__` eller svag "
"referensplats bör använda :c:macro:`Py_TPFLAGS_MANAGED_DICT` och :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` istället för ``tp_dictoffset`` respektive "
"``tp_weaklistoffset``. Användningen av ``tp_dictoffset`` och "
"``tp_weaklistoffset`` stöds fortfarande, men har inte fullt stöd för "
"multipel nedärvning (:gh:`95589`), och prestanda kan vara sämre. Klasser som "
"deklarerar :c:macro:`Py_TPFLAGS_MANAGED_DICT` måste anropa :c:func:`!"
"_PyObject_VisitManagedDict` och :c:func:`!_PyObject_ClearManagedDict` för "
"att korsa och rensa sina instansers ordlistor. För att rensa weakrefs, "
"anropa :c:func:`PyObject_ClearWeakRefs`, som tidigare."

#: ../../whatsnew/3.12.rst:2057
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the "
"exact :class:`bytes` type is accepted for bytes strings. (Contributed by "
"Victor Stinner in :gh:`98393`.)"
msgstr ""
"Funktionen :c:func:`PyUnicode_FSDecoder` accepterar inte längre "
"bytesliknande sökvägar, som typerna :class:`bytearray` och :class:"
"`memoryview`: endast den exakta typen :class:`bytes` accepteras för "
"bytessträngar. (Bidrag från Victor Stinner i :gh:`98393`.)"

#: ../../whatsnew/3.12.rst:2062
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor "
"Stinner in :gh:`98724`.)"
msgstr ""
"Makrona :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` och :c:macro:`Py_XSETREF` "
"utvärderar nu bara sina argument en gång. Om ett argument har sidoeffekter "
"dupliceras inte längre dessa sidoeffekter. (Bidrag från Victor Stinner i :gh:"
"`98724`.)"

#: ../../whatsnew/3.12.rst:2067
msgid ""
"The interpreter's error indicator is now always normalized. This means that :"
"c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions "
"that set the error indicator now normalize the exception before storing it. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Tolkens felindikator är nu alltid normaliserad. Detta innebär att :c:func:"
"`PyErr_SetObject`, :c:func:`PyErr_SetString` och de andra funktionerna som "
"anger felindikatorn nu normaliserar undantaget innan det lagras. (Bidrag "
"från Mark Shannon i :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:2072
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""
"``_Py_RefTotal`` är inte längre auktoritativt och finns bara kvar för ABI-"
"kompatibilitet.  Observera att det är en intern global och endast "
"tillgänglig på debug-byggnader.  Om du råkar använda den så måste du börja "
"använda ``_Py_GetGlobalRefTotal()``."

#: ../../whatsnew/3.12.rst:2077
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr ""
"Följande funktioner väljer nu en lämplig metaklass för den nyskapade typen:"

#: ../../whatsnew/3.12.rst:2080
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: ../../whatsnew/3.12.rst:2081
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: ../../whatsnew/3.12.rst:2082
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: ../../whatsnew/3.12.rst:2084
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""
"Att skapa klasser vars metaklass åsidosätter :c:member:`~PyTypeObject."
"tp_new` är föråldrat, och i Python 3.14+ kommer det att vara otillåtet. "
"Observera att dessa funktioner ignorerar metaklassens ``tp_new``, vilket kan "
"leda till ofullständig initialisering."

#: ../../whatsnew/3.12.rst:2089
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` (:meth:"
"`~object.__new__` in Python)."
msgstr ""
"Observera att :c:func:`PyType_FromMetaclass` (tillagd i Python 3.12) redan "
"förbjuder skapandet av klasser vars metaklass åsidosätter ``tp_new`` (:meth:"
"`~object.__new__` i Python)."

#: ../../whatsnew/3.12.rst:2093
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""
"Eftersom ``tp_new`` åsidosätter nästan allt som ``PyType_From*``-funktioner "
"gör, är de två inkompatibla med varandra. Det befintliga beteendet - att "
"ignorera metaklassen under flera steg av typskapandet - är osäkert i "
"allmänhet, eftersom (meta)klasser antar att ``tp_new`` anropades. Det finns "
"ingen enkel allmän lösning. Något av följande kan fungera för dig:"

#: ../../whatsnew/3.12.rst:2100
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr "Om du kontrollerar metaklassen, undvik att använda ``tp_new`` i den:"

#: ../../whatsnew/3.12.rst:2102
msgid ""
"If initialization can be skipped, it can be done in :c:member:`~PyTypeObject."
"tp_init` instead."
msgstr ""
"Om initialiseringen kan hoppas över kan den göras i :c:member:`~PyTypeObject."
"tp_init` istället."

#: ../../whatsnew/3.12.rst:2104
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the :c:macro:"
"`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable for "
"``PyType_From*`` functions."
msgstr ""
"Om metaklassen inte behöver instansieras från Python, sätt dess ``tp_new`` "
"till ``NULL`` med flaggan :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION`. "
"Detta gör den acceptabel för ``PyType_From*`` funktioner."

#: ../../whatsnew/3.12.rst:2109
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""
"Undvik ``PyType_From*``-funktioner: om du inte behöver C-specifika "
"funktioner (slots eller inställning av instansstorlek), skapa typer genom "
"att :ref:``kalla <call>` metaklassen."

#: ../../whatsnew/3.12.rst:2113
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""
"Om du *vet* att ``tp_new`` kan hoppas över på ett säkert sätt, filtrera bort "
"deprecation-varningen med :func:`warnings.catch_warnings` från Python."

#: ../../whatsnew/3.12.rst:2116
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""
":c:var:`PyOS_InputHook` och :c:var:`PyOS_ReadlineFunctionPointer` anropas "
"inte längre i :ref:`subinterpreters <sub-interpreter-support>`. Detta beror "
"på att klienter i allmänhet förlitar sig på processomfattande globalt "
"tillstånd (eftersom dessa återuppringningar inte har något sätt att "
"återställa tilläggsmodulens tillstånd)."

#: ../../whatsnew/3.12.rst:2121
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr ""
"Detta undviker också situationer där tillägg kan komma att köras i en "
"undertolk som de inte stöder (eller ännu inte har laddats in i). Se :gh:"
"`104668` för mer information."

#: ../../whatsnew/3.12.rst:2125
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private, "
"they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning ``PyLong_..."
"`` should be used instead. Two new *unstable* API functions are provided for "
"efficient access to the value of :c:struct:`PyLongObject`\\s which fit into "
"a single machine word:"
msgstr ""
":c:struct:`PyLongObject` har fått sina interndelar ändrade för bättre "
"prestanda. Även om de interna fälten i :c:struct:`PyLongObject` är privata "
"används de av vissa tilläggsmoduler. De interna fälten bör inte längre nås "
"direkt, istället bör API-funktionerna som börjar med ``PyLong_...`` användas "
"istället. Två nya *instabila* API-funktioner tillhandahålls för effektiv "
"åtkomst till värdet av :c:struct:`PyLongObject` som ryms i ett enda "
"maskinord:"

#: ../../whatsnew/3.12.rst:2133
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ":c:func:`PyUnstable_Long_IsCompact`"

#: ../../whatsnew/3.12.rst:2134
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ":c:func:`PyUnstable_Long_CompactValue`"

#: ../../whatsnew/3.12.rst:2136
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to "
"be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""
"Anpassade allokatorer, inställda via :c:func:`PyMem_SetAllocator`, måste nu "
"vara tråd-säkra, oavsett minnesdomän.  Allokatorer som inte har sitt eget "
"tillstånd, inklusive \"hooks\", påverkas inte. Om din anpassade allokator "
"inte redan är tråd-säker och du behöver vägledning, vänligen skapa ett nytt "
"GitHub-problem och CC ``@ericsnowcurrently``."

#: ../../whatsnew/3.12.rst:2146
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in :c:type:"
"`PyDictObject` is deprecated for extension modules. Accessing this field "
"will generate a compiler warning at compile time. This field will be removed "
"in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in :gh:`101193`. "
"PEP by Ken Jin.)"
msgstr ""
"I enlighet med :pep:`699`, är fältet ``ma_version_tag`` i :c:type:"
"`PyDictObject` föråldrat för tilläggsmoduler. Åtkomst till detta fält kommer "
"att generera en kompilatorvarning vid kompileringstiden. Detta fält kommer "
"att tas bort i Python 3.14. (Bidrag från Ramvikrams och Kumar Aditya i :gh:"
"`101193`. PEP av Ken Jin.)"

#: ../../whatsnew/3.12.rst:2151
msgid "Deprecate global configuration variable:"
msgstr "Utgå från den globala konfigurationsvariabeln:"

#: ../../whatsnew/3.12.rst:2153
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ":c:var:`Py_DebugFlag`: använda :c:medlem:`PyConfig.parser_debug`"

#: ../../whatsnew/3.12.rst:2154
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ":c:var:`Py_VerboseFlag`: använd :c:member:`PyConfig.verbose`"

#: ../../whatsnew/3.12.rst:2155
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ":c:var:`Py_QuietFlag`: använda :c:medlem:`PyConfig.quiet`"

#: ../../whatsnew/3.12.rst:2156
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ":c:var:`Py_InteractiveFlag`: använda :c:medlem:`PyConfig.interactive`"

#: ../../whatsnew/3.12.rst:2157
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ":c:var:`Py_InspectFlag`: använd :c:member:`PyConfig.inspect`"

#: ../../whatsnew/3.12.rst:2158
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""
":c:var:`Py_OptimizeFlag`: använda :c:medlem:`PyConfig.optimization_level`"

#: ../../whatsnew/3.12.rst:2159
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ":c:var:`Py_NoSiteFlag`: använd :c:member:`PyConfig.site_import`"

#: ../../whatsnew/3.12.rst:2160
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""
":c:var:`Py_BytesWarningFlag`: använda :c:medlem:`PyConfig.bytes_warning`"

#: ../../whatsnew/3.12.rst:2161
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""
":c:var:`Py_FrozenFlag`: Använd :c:member:`PyConfig.pathconfig_warnings`"

#: ../../whatsnew/3.12.rst:2162
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: använd :c:member:`PyConfig."
"use_environment`"

#: ../../whatsnew/3.12.rst:2163
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Använd :c:member:`PyConfig.write_bytecode`"

#: ../../whatsnew/3.12.rst:2164
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: använd :c:member:`PyConfig."
"user_site_directory`"

#: ../../whatsnew/3.12.rst:2165
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Använd :c:member:`PyConfig.buffered_stdio`"

#: ../../whatsnew/3.12.rst:2166
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""
":c:var:`Py_HashRandomizationFlag`: använd :c:member:`PyConfig.use_hash_seed` "
"och :c:member:`PyConfig.hash_seed`"

#: ../../whatsnew/3.12.rst:2168
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ":c:var:`Py_IsolatedFlag`: använda :c:medlem:`PyConfig.isolated`"

#: ../../whatsnew/3.12.rst:2169
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: använd :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"

#: ../../whatsnew/3.12.rst:2170
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Använd :c:member:`PyConfig."
"legacy_windows_stdio`"

#: ../../whatsnew/3.12.rst:2171
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: Använd :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2172
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: använd :c:member:`PyConfig."
"filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2173
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Använd :c:member:`PyConfig."
"filesystem_errors`"

#: ../../whatsnew/3.12.rst:2174
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: använd :c:member:`PyPreConfig.utf8_mode` (se :c:func:"
"`Py_PreInitialize`)"

#: ../../whatsnew/3.12.rst:2176
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""
"API:t :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"istället. (Bidrag från Victor Stinner i :gh:`77782`.)"

#: ../../whatsnew/3.12.rst:2180
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases is deprecated and will be disabled in Python 3.14. (:gh:`95388`)"
msgstr ""
"Att skapa :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` med mutabla "
"baser är föråldrat och kommer att inaktiveras i Python 3.14. (:gh:`95388`)"

#: ../../whatsnew/3.12.rst:2183
msgid ""
"The :file:`structmember.h` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ""
"Headern :file:`structmember.h` är föråldrad, men den är fortfarande "
"tillgänglig och det finns inga planer på att ta bort den."

#: ../../whatsnew/3.12.rst:2186
msgid ""
"Its contents are now available just by including :file:`Python.h`, with a "
"``Py`` prefix added if it was missing:"
msgstr ""
"Dess innehåll är nu tillgängligt bara genom att inkludera :file:`Python.h`, "
"med ett ``Py`` prefix tillagt om det saknades:"

#: ../../whatsnew/3.12.rst:2189
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and :c:func:"
"`PyMember_SetOne`"
msgstr ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` och :c:func:"
"`PyMember_SetOne`"

#: ../../whatsnew/3.12.rst:2191
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""
"Skriv makron som :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. (tidigare "
"``T_INT``, ``T_DOUBLE``, etc.)"

#: ../../whatsnew/3.12.rst:2193
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and :c:macro:"
"`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""
"Flaggorna :c:macro:`Py_READONLY` (tidigare ``READONLY``) och :c:macro:"
"`Py_AUDIT_READ` (tidigare alla versaler)"

#: ../../whatsnew/3.12.rst:2196
msgid "Several items are not exposed from :file:`Python.h`:"
msgstr "Flera objekt är inte exponerade från :file:`Python.h`:"

#: ../../whatsnew/3.12.rst:2198
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ":c:makro:`T_OBJECT` (använd :c:makro:`Py_T_OBJECT_EX`)"

#: ../../whatsnew/3.12.rst:2199
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ":c:macro:`T_NONE` (tidigare odokumenterad, och ganska knasig)"

#: ../../whatsnew/3.12.rst:2200
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr "Makrot ``WRITE_RESTRICTED`` som inte gör någonting."

#: ../../whatsnew/3.12.rst:2201
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of :c:macro:"
"`Py_AUDIT_READ`."
msgstr ""
"Makron ``RESTRICTED`` och ``READ_RESTRICTED``, motsvarigheter till :c:macro:"
"`Py_AUDIT_READ`."

#: ../../whatsnew/3.12.rst:2203
msgid ""
"In some configurations, ``<stddef.h>`` is not included from :file:`Python."
"h`. It should be included manually when using ``offsetof()``."
msgstr ""
"I vissa konfigurationer inkluderas inte ``<stddef.h>`` från :file:`Python."
"h`. Den bör inkluderas manuellt när du använder ``offsetof()``."

#: ../../whatsnew/3.12.rst:2206
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr ""
"Den föråldrade headern fortsätter att tillhandahålla sitt ursprungliga "
"innehåll under de ursprungliga namnen. Din gamla kod kan förbli oförändrad, "
"såvida du inte störs av extra include och makron utan namnavstånd."

#: ../../whatsnew/3.12.rst:2211
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""
"(Bidrag i :gh:`47146` av Petr Viktorin, baserat på tidigare arbete av "
"Alexander Belopolsky och Matthias Braun.)"

#: ../../whatsnew/3.12.rst:2214
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use :c:"
"func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
":c:func:`PyErr_Fetch` och :c:func:`PyErr_Restore` är föråldrade. Använd :c:"
"func:`PyErr_GetRaisedException` och :c:func:`PyErr_SetRaisedException` "
"istället. (Bidrag från Mark Shannon i :gh:`101578`.)"

#: ../../whatsnew/3.12.rst:2219
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException` "
"instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""
":c:func:`!PyErr_Display` är föråldrad. Använd :c:func:"
"`PyErr_DisplayException` istället. (Bidrag från Irit Katriel i :gh:`102755`)."

#: ../../whatsnew/3.12.rst:2222
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""
"``_PyErr_ChainExceptions`` är föråldrad. Använd ``_PyErr_ChainExceptions1`` "
"istället. (Bidrag från Irit Katriel i :gh:`102192`.)"

#: ../../whatsnew/3.12.rst:2225
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or :c:"
"func:`PyType_FromModuleAndSpec` to create a class whose metaclass overrides :"
"c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass instead."
msgstr ""
"Att använda :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` "
"eller :c:func:`PyType_FromModuleAndSpec` för att skapa en klass vars "
"metaklass åsidosätter :c:member:`~PyTypeObject.tp_new` är föråldrat. Anropa "
"metaklassen istället."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""
"Fältet ``ma_version_tag`` i :c:type:`PyDictObject` för tilläggsmoduler (:pep:"
"`699`; :gh:`101193``)."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"Skapar :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` med mutabla "
"baser (:gh:`95388`)."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: Använd :c:func:"
"`PyImport_ImportModule` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` och :c:func:`PyWeakref_GET_OBJECT`: Använd :c:"
"func:`PyWeakref_GetRef` istället. Projektet `pythoncapi-compat <https://"
"github.com/python/pythoncapi-compat/>`__ kan användas för att hämta :c:func:"
"`PyWeakref_GetRef` på Python 3.12 och äldre."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` typ och :c:macro:`!Py_UNICODE_WIDE` makro: Använd :c:"
"type:`wchar_t` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Använd :c:func:`PyCodec_Decode` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Använd :c:func:`PyCodec_Decode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`str`, t.ex. :class:`bytes`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: Använd :c:func:`PyCodec_Encode` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Använd :c:func:`PyCodec_Encode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`bytes`, t.ex. :class:`str`."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python-initialiseringsfunktioner, föråldrade i Python 3.13:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`: Använd :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`: Använd :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) istället. Använd :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) om :ref:"
"`virtuella miljöer <venv-def>` behöver hanteras."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`: Använd :c:func:"
"`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) istället. Använd :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) om :ref:`virtuella miljöer <venv-"
"def>` behöver hanteras."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Använd :c:func:"
"`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys.executable`) "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`: Använd :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Använd :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` eller miljövariabeln :envvar:`PYTHONHOME` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få :c:func:`PyConfig_Get` på Python 3.13 och äldre."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""
"Funktioner för att konfigurera Pythons initialisering, föråldrad i Python "
"3.11:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Ställ in :c:member:`PyConfig.argv` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Ställ in :c:member:`PyConfig.argv` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Ställ in :c:member:`PyConfig.program_name` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Ställ in :c:member:`PyConfig.home` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Rensa :data:`sys.warnoptions` och :data:`!"
"warnings.filters` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"API:t :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "Variabler för global konfiguration:"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Använd :c:member:`PyConfig.parser_debug` eller :c:"
"func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: Använd :c:member:`PyConfig.verbose` eller :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Använd :c:member:`PyConfig.quiet` eller :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Använd :c:member:`PyConfig.interactive` eller :"
"c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Använd :c:member:`PyConfig.inspect` eller :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Använd :c:member:`PyConfig.optimization_level` "
"eller :c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Använd :c:member:`PyConfig.site_import` eller :c:"
"func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: Använd :c:member:`PyConfig.bytes_warning` "
"eller :c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Använd :c:member:`PyConfig.pathconfig_warnings` "
"eller :c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: Använd :c:member:`PyConfig."
"use_environment` eller :c:func:`PyConfig_Get(\"use_environment\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Använd :c:member:`PyConfig."
"write_bytecode` eller :c:func:`PyConfig_Get(\"write_bytecode\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: Använd :c:member:`PyConfig."
"user_site_directory` eller :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Använd :c:member:`PyConfig.buffered_stdio` "
"eller :c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: Använd :c:member:`PyConfig.use_hash_seed` "
"och :c:member:`PyConfig.hash_seed` eller :c:func:"
"`PyConfig_Get(\"hash_seed\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Använd :c:member:`PyConfig.isolated` eller :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Använd :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` eller :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Använd :c:member:`PyConfig."
"legacy_windows_stdio` eller :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Använd :c:member:`PyConfig."
"filesystem_encoding` eller :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Använd :c:member:`PyConfig."
"filesystem_errors` eller :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` istället."

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: Använd :c:member:`PyPreConfig.utf8_mode` eller :c:"
"func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` istället. (se :c:func:"
"`Py_PreInitialize`)"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
"API:et :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"för att ställa in dessa alternativ. Eller så kan :c:func:`PyConfig_Get` "
"användas för att hämta dessa alternativ vid körning."

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr "Den medföljande kopian av ``libmpdec``."

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er är föråldrade och kommer att tas bort, även om det för "
"närvarande inte finns något datum för när de ska tas bort."

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Behövs inte sedan Python 3.8."

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Fetch`: Använd :c:func:`PyErr_GetRaisedException` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: Använd :c:func:"
"`PyErr_GetRaisedException` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Restore`: Använd :c:func:`PyErr_SetRaisedException` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: Använd :c:func:`PyModule_GetFilenameObject` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""
":c:func:`PyOS_AfterFork`: Använd :c:func:`PyOS_AfterFork_Child` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: Använd :c:func:`PySlice_Unpack` och :c:func:"
"`PySlice_AdjustIndices` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: Behövs inte sedan Python 3.12"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""
":c:func:`!PyErr_Display`: Använd :c:func:`PyErr_DisplayException` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: Använd :c:func:`!_PyErr_ChainExceptions1` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash` member: anropa :c:func:`PyObject_Hash` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "API för lokal lagring av trådar (TLS):"

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""
":c:func:`PyThread_create_key`: Använd :c:func:`PyThread_tss_alloc` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""
":c:func:`PyThread_delete_key`: Använd :c:func:`PyThread_tss_free` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""
":c:func:`PyThread_set_key_value`: Använd :c:func:`PyThread_tss_set` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""
":c:func:`PyThread_get_key_value`: Använd :c:func:`PyThread_tss_get` istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: Använd :c:func:`PyThread_tss_delete` "
"istället."

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: Behövs inte sedan Python 3.7."

#: ../../whatsnew/3.12.rst:2243
msgid ""
"Remove the :file:`token.h` header file. There was never any public tokenizer "
"C API. The :file:`token.h` header file was only designed to be used by "
"Python internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""
"Ta bort huvudfilen :file:`token.h`. Det fanns aldrig något offentligt "
"tokenizer C API. Huvudfilen :file:`token.h` var endast utformad för att "
"användas av Python-interna funktioner. (Bidrag från Victor Stinner i :gh:"
"`92651`.)"

#: ../../whatsnew/3.12.rst:2248
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr "Äldre Unicode API:er har tagits bort. Se :pep:`623` för detaljer."

#: ../../whatsnew/3.12.rst:2250
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:makro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.12.rst:2251
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.12.rst:2252
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.12.rst:2253
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.12.rst:2254
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.12.rst:2255
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.12.rst:2256
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.12.rst:2257
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.12.rst:2258
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.12.rst:2260
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""
"Ta bort funktionsmakrot ``PyUnicode_InternImmortal()``. (Bidrag från Victor "
"Stinner i :gh:`85858`.)"
