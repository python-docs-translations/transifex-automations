# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:56+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr "Compound statements"

#: ../../reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""
"Compound statements innehåller (grupper av) andra statements; de påverkar "
"eller styr utförandet av dessa andra statements på något sätt.  I allmänhet "
"sträcker sig sammansatta statements över flera rader, men i enkla varianter "
"kan en hel sammansatta statements rymmas på en rad."

#: ../../reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements, while the :keyword:"
"`with` statement allows the execution of initialization and finalization "
"code around a block of code.  Function and class definitions are also "
"syntactically compound statements."
msgstr ""
"Satserna :keyword:`if`, :keyword:`while` och :keyword:`for` implementerar "
"traditionella kontrollflödeskonstruktioner. :keyword:`try` specificerar "
"undantagshanterare och/eller uppstädningskod för en grupp satser, medan "
"satsen :keyword:`with` gör det möjligt att exekvera initialiserings- och "
"finaliseringskod runt ett kodblock.  Funktions- och klassdefinitioner är "
"också syntaktiskt sammansatta satser."

#: ../../reference/compound_stmts.rst:26
msgid ""
"A compound statement consists of one or more 'clauses.'  A clause consists "
"of a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of a suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be "
"clear to which :keyword:`if` clause a following :keyword:`else` clause would "
"belong::"
msgstr ""
"Ett sammansatt uttalande består av en eller flera \"klausuler\"  En klausul "
"består av en rubrik och en \"svit\"  Klausulrubrikerna i en viss sammansatt "
"sats har alla samma indragningsnivå. Varje klausulrubrik börjar med ett "
"unikt identifierande nyckelord och slutar med kolon.  En svit är en grupp "
"satser som styrs av en klausul.  En svit kan bestå av en eller flera "
"semikolonseparerade enkla satser på samma rad som rubriken, efter rubrikens "
"kolon, eller av en eller flera indragna satser på efterföljande rader.  "
"Endast den senare formen av en svit kan innehålla nästlade sammansatta "
"satser; följande är olagligt, mest för att det inte skulle vara tydligt till "
"vilken :keyword:`if`\\-sats en följande :keyword:`else`\\-sats skulle höra::"

#: ../../reference/compound_stmts.rst:39
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :func:`print` "
"calls are executed::"
msgstr ""
"Observera också att semikolon binder hårdare än kolon i detta sammanhang, så "
"att i följande exempel utförs antingen alla eller inga av :func:`print`\\-"
"anropen::"

#: ../../reference/compound_stmts.rst:45
msgid "Summarizing:"
msgstr "Sammanfatta:"

#: ../../reference/compound_stmts.rst:68
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``.  Also note that optional continuation clauses always begin with "
"a keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring nested :"
"keyword:`if` statements to be indented)."
msgstr ""
"Observera att satser alltid avslutas med en ``NEWLINE``, eventuellt följd av "
"en ``DEDENT``.  Observera också att valfria fortsättningssatser alltid "
"börjar med ett nyckelord som inte kan börja en sats, så det finns inga "
"tvetydigheter (problemet med \"dinglande :keyword:`else`\" löses i Python "
"genom att kräva att nästlade :keyword:`if`\\-satser är indragna)."

#: ../../reference/compound_stmts.rst:74
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr ""
"I formateringen av grammatikreglerna i följande avsnitt placeras varje sats "
"på en separat rad för tydlighetens skull."

#: ../../reference/compound_stmts.rst:83
msgid "The :keyword:`!if` statement"
msgstr "Nyckelordet: `!if`\\-satsen"

#: ../../reference/compound_stmts.rst:91
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr "Satsen :keyword:`if` används för villkorlig exekvering:"

#: ../../reference/compound_stmts.rst:98
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""
"Den väljer exakt en av sviterna genom att utvärdera uttrycken ett efter ett "
"tills ett av dem visar sig vara sant (se avsnitt :ref:`booleans` för "
"definition av true och false); då körs den sviten (och ingen annan del av :"
"keyword:`if`\\-satsen körs eller utvärderas).  Om alla uttryck är falska, "
"utförs sviten i :keyword:`else`\\-satsen, om den finns."

#: ../../reference/compound_stmts.rst:108
msgid "The :keyword:`!while` statement"
msgstr "Nyckelordet: `!while`\\-satsen"

#: ../../reference/compound_stmts.rst:116
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ""
"Satsen :keyword:`while` används för upprepad exekvering så länge som ett "
"uttryck är sant:"

#: ../../reference/compound_stmts.rst:123
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested) "
"the suite of the :keyword:`!else` clause, if present, is executed and the "
"loop terminates."
msgstr ""
"Detta testar uttrycket upprepade gånger och, om det är sant, körs den första "
"sviten; om uttrycket är falskt (vilket kan vara första gången det testas) "
"körs sviten i :keyword:`!else`\\-satsen, om den finns, och slingan avslutas."

#: ../../reference/compound_stmts.rst:132
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`!else` clause's suite.  A :keyword:"
"`continue` statement executed in the first suite skips the rest of the suite "
"and goes back to testing the expression."
msgstr ""
"En :keyword:`break`\\-sats som exekveras i den första sviten avslutar "
"slingan utan att exekvera :keyword:`!else`\\-satsens svit.  En :keyword:"
"`continue`\\-sats som exekveras i den första sviten hoppar över resten av "
"sviten och går tillbaka till att testa uttrycket."

#: ../../reference/compound_stmts.rst:141
msgid "The :keyword:`!for` statement"
msgstr ":keyword:`!for`\\-satsen"

#: ../../reference/compound_stmts.rst:152
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ""
"Satsen :keyword:`for` används för att iterera över elementen i en sekvens (t."
"ex. en sträng, tupel eller lista) eller ett annat itererbart objekt:"

#: ../../reference/compound_stmts.rst:159
msgid ""
"The expression list is evaluated once; it should yield an iterable object.  "
"An iterator is created for the result of the ``expression_list``.  The suite "
"is then executed once for each item provided by the iterator, in the order "
"returned by the iterator.  Each item in turn is assigned to the target list "
"using the standard rules for assignments (see :ref:`assignment`), and then "
"the suite is executed.  When the items are exhausted (which is immediately "
"when the sequence is empty or an iterator raises a :exc:`StopIteration` "
"exception), the suite in the :keyword:`!else` clause, if present, is "
"executed, and the loop terminates."
msgstr ""

#: ../../reference/compound_stmts.rst:172
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`!else` clause's suite.  A :keyword:"
"`continue` statement executed in the first suite skips the rest of the suite "
"and continues with the next item, or with the :keyword:`!else` clause if "
"there is no next item."
msgstr ""
"En :keyword:`break`\\-sats som exekveras i den första sviten avslutar "
"slingan utan att exekvera :keyword:`!else`\\-satsens svit.  En :keyword:"
"`continue`\\-sats som utförs i den första sviten hoppar över resten av "
"sviten och fortsätter med nästa objekt, eller med :keyword:`!else`\\-satsen "
"om det inte finns något nästa objekt."

#: ../../reference/compound_stmts.rst:178
msgid ""
"The for-loop makes assignments to the variables in the target list. This "
"overwrites all previous assignments to those variables including those made "
"in the suite of the for-loop::"
msgstr ""
"For-slingan gör tilldelningar till variablerna i mållistan. Detta skriver "
"över alla tidigare tilldelningar till dessa variabler, inklusive de som "
"gjorts i sviten av for-slingan::"

#: ../../reference/compound_stmts.rst:192
msgid ""
"Names in the target list are not deleted when the loop is finished, but if "
"the sequence is empty, they will not have been assigned to at all by the "
"loop.  Hint: the built-in function :func:`range` returns an iterator of "
"integers suitable to emulate the effect of Pascal's ``for i := a to b do``; "
"e.g., ``list(range(3))`` returns the list ``[0, 1, 2]``."
msgstr ""

#: ../../reference/compound_stmts.rst:204
msgid ""
"There is a subtlety when the sequence is being modified by the loop (this "
"can only occur for mutable sequences, e.g. lists).  An internal counter is "
"used to keep track of which item is used next, and this is incremented on "
"each iteration.  When this counter has reached the length of the sequence "
"the loop terminates.  This means that if the suite deletes the current (or a "
"previous) item from the sequence, the next item will be skipped (since it "
"gets the index of the current item which has already been treated).  "
"Likewise, if the suite inserts an item in the sequence before the current "
"item, the current item will be treated again the next time through the loop. "
"This can lead to nasty bugs that can be avoided by making a temporary copy "
"using a slice of the whole sequence, e.g., ::"
msgstr ""

#: ../../reference/compound_stmts.rst:225
msgid "The :keyword:`!try` statement"
msgstr ":keyword:`!try`\\-satsen"

#: ../../reference/compound_stmts.rst:235
msgid ""
"The :keyword:`try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ""

#: ../../reference/compound_stmts.rst:248
msgid ""
"The :keyword:`except` clause(s) specify one or more exception handlers. When "
"no exception occurs in the :keyword:`try` clause, no exception handler is "
"executed. When an exception occurs in the :keyword:`!try` suite, a search "
"for an exception handler is started.  This search inspects the except "
"clauses in turn until one is found that matches the exception.  An "
"expression-less except clause, if present, must be last; it matches any "
"exception.  For an except clause with an expression, that expression is "
"evaluated, and the clause matches the exception if the resulting object is "
"\"compatible\" with the exception.  An object is compatible with an "
"exception if the object is the class or a :term:`non-virtual base class "
"<abstract base class>` of the exception object, or a tuple containing an "
"item that is the class or a non-virtual base class of the exception object."
msgstr ""

#: ../../reference/compound_stmts.rst:261
msgid ""
"If no except clause matches the exception, the search for an exception "
"handler continues in the surrounding code and on the invocation stack.  [#]_"
msgstr ""

#: ../../reference/compound_stmts.rst:264
msgid ""
"If the evaluation of an expression in the header of an except clause raises "
"an exception, the original search for a handler is canceled and a search "
"starts for the new exception in the surrounding code and on the call stack "
"(it is treated as if the entire :keyword:`try` statement raised the "
"exception)."
msgstr ""

#: ../../reference/compound_stmts.rst:271
msgid ""
"When a matching except clause is found, the exception is assigned to the "
"target specified after the :keyword:`!as` keyword in that except clause, if "
"present, and the except clause's suite is executed.  All except clauses must "
"have an executable block.  When the end of this block is reached, execution "
"continues normally after the entire try statement.  (This means that if two "
"nested handlers exist for the same exception, and the exception occurs in "
"the try clause of the inner handler, the outer handler will not handle the "
"exception.)"
msgstr ""

#: ../../reference/compound_stmts.rst:279
msgid ""
"When an exception has been assigned using ``as target``, it is cleared at "
"the end of the except clause.  This is as if ::"
msgstr ""

#: ../../reference/compound_stmts.rst:285
msgid "was translated to ::"
msgstr "översattes till ::"

#: ../../reference/compound_stmts.rst:293
msgid ""
"This means the exception must be assigned to a different name to be able to "
"refer to it after the except clause.  Exceptions are cleared because with "
"the traceback attached to them, they form a reference cycle with the stack "
"frame, keeping all locals in that frame alive until the next garbage "
"collection occurs."
msgstr ""

#: ../../reference/compound_stmts.rst:302
msgid ""
"Before an except clause's suite is executed, details about the exception are "
"stored in the :mod:`sys` module and can be accessed via :func:`sys."
"exc_info`. :func:`sys.exc_info` returns a 3-tuple consisting of the "
"exception class, the exception instance and a traceback object (see section :"
"ref:`types`) identifying the point in the program where the exception "
"occurred.  :func:`sys.exc_info` values are restored to their previous values "
"(before the call) when returning from a function that handled an exception."
msgstr ""

#: ../../reference/compound_stmts.rst:316
msgid ""
"The optional :keyword:`!else` clause is executed if the control flow leaves "
"the :keyword:`try` suite, no exception was raised, and no :keyword:"
"`return`, :keyword:`continue`, or :keyword:`break` statement was executed.  "
"Exceptions in the :keyword:`!else` clause are not handled by the preceding :"
"keyword:`except` clauses."
msgstr ""
"Den valfria :keyword:`!else`\\-klausulen exekveras om kontrollflödet lämnar :"
"keyword:`try`\\-sviten, inget undantag har uppstått och ingen :keyword:"
"`return`\\-, :keyword:`continue`\\- eller :keyword:`break`\\-sats har "
"exekverats.  Undantag i :keyword:`!else`\\-klausulen hanteras inte av de "
"föregående :keyword:`except`\\-klausulerna."

#: ../../reference/compound_stmts.rst:324
msgid ""
"If :keyword:`finally` is present, it specifies a 'cleanup' handler.  The :"
"keyword:`try` clause is executed, including any :keyword:`except` and :"
"keyword:`!else` clauses.  If an exception occurs in any of the clauses and "
"is not handled, the exception is temporarily saved. The :keyword:`!finally` "
"clause is executed.  If there is a saved exception it is re-raised at the "
"end of the :keyword:`!finally` clause.  If the :keyword:`!finally` clause "
"raises another exception, the saved exception is set as the context of the "
"new exception. If the :keyword:`!finally` clause executes a :keyword:"
"`return`, :keyword:`break` or :keyword:`continue` statement, the saved "
"exception is discarded::"
msgstr ""

#: ../../reference/compound_stmts.rst:343
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`finally` clause."
msgstr ""

#: ../../reference/compound_stmts.rst:351
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`!try`...\\ :keyword:`!"
"finally` statement, the :keyword:`finally` clause is also executed 'on the "
"way out.'"
msgstr ""

#: ../../reference/compound_stmts.rst:355
msgid ""
"The return value of a function is determined by the last :keyword:`return` "
"statement executed.  Since the :keyword:`finally` clause always executes, a :"
"keyword:`!return` statement executed in the :keyword:`!finally` clause will "
"always be the last one executed::"
msgstr ""

#: ../../reference/compound_stmts.rst:369
msgid ""
"Additional information on exceptions can be found in section :ref:"
"`exceptions`, and information on using the :keyword:`raise` statement to "
"generate exceptions may be found in section :ref:`raise`."
msgstr ""
"Ytterligare information om undantag finns i avsnittet :ref:`exceptions`, och "
"information om hur man använder :keyword:`raise` för att generera undantag "
"finns i avsnittet :ref:`raise`."

#: ../../reference/compound_stmts.rst:373
msgid ""
"Prior to Python 3.8, a :keyword:`continue` statement was illegal in the :"
"keyword:`finally` clause due to a problem with the implementation."
msgstr ""

#: ../../reference/compound_stmts.rst:382
msgid "The :keyword:`!with` statement"
msgstr ":keyword:`!with`\\-satsen"

#: ../../reference/compound_stmts.rst:391
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`...\\ :keyword:"
"`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""
"Satsen :keyword:`with` används för att omsluta exekveringen av ett block med "
"metoder som definieras av en kontexthanterare (se avsnitt :ref:`context-"
"managers`). Detta gör att vanliga :keyword:`try`...\\ :keyword:`except`..."
"\\ :keyword:`finally` användningsmönster kan kapslas in för bekväm "
"återanvändning."

#: ../../reference/compound_stmts.rst:400
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as "
"follows:"
msgstr ""
"Exekveringen av :keyword:`with`\\-satsen med ett \"objekt\" går till på "
"följande sätt:"

#: ../../reference/compound_stmts.rst:402
msgid ""
"The context expression (the expression given in the :token:`with_item`) is "
"evaluated to obtain a context manager."
msgstr ""

#: ../../reference/compound_stmts.rst:405
msgid "The context manager's :meth:`__enter__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:407
msgid "The context manager's :meth:`__exit__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:409
msgid "The context manager's :meth:`__enter__` method is invoked."
msgstr ""

#: ../../reference/compound_stmts.rst:411
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`__enter__` is assigned to it."
msgstr ""

#: ../../reference/compound_stmts.rst:416
msgid ""
"The :keyword:`with` statement guarantees that if the :meth:`__enter__` "
"method returns without an error, then :meth:`__exit__` will always be "
"called. Thus, if an error occurs during the assignment to the target list, "
"it will be treated the same as an error occurring within the suite would be. "
"See step 6 below."
msgstr ""

#: ../../reference/compound_stmts.rst:422
msgid "The suite is executed."
msgstr "Sviten är genomförd."

#: ../../reference/compound_stmts.rst:424
msgid ""
"The context manager's :meth:`__exit__` method is invoked.  If an exception "
"caused the suite to be exited, its type, value, and traceback are passed as "
"arguments to :meth:`__exit__`. Otherwise, three :const:`None` arguments are "
"supplied."
msgstr ""

#: ../../reference/compound_stmts.rst:429
msgid ""
"If the suite was exited due to an exception, and the return value from the :"
"meth:`__exit__` method was false, the exception is reraised.  If the return "
"value was true, the exception is suppressed, and execution continues with "
"the statement following the :keyword:`with` statement."
msgstr ""

#: ../../reference/compound_stmts.rst:434
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`__exit__` is ignored, and execution proceeds at the normal "
"location for the kind of exit that was taken."
msgstr ""

#: ../../reference/compound_stmts.rst:438
#: ../../reference/compound_stmts.rst:815
#: ../../reference/compound_stmts.rst:856
msgid "The following code::"
msgstr "Följande kod::"

#: ../../reference/compound_stmts.rst:443
#: ../../reference/compound_stmts.rst:468
#: ../../reference/compound_stmts.rst:861
msgid "is semantically equivalent to::"
msgstr "är semantiskt ekvivalent med::"

#: ../../reference/compound_stmts.rst:462
msgid ""
"With more than one item, the context managers are processed as if multiple :"
"keyword:`with` statements were nested::"
msgstr ""
"Med mer än ett objekt bearbetas kontexthanterarna som om flera :keyword:"
"`with`\\-satser var nästlade:"

#: ../../reference/compound_stmts.rst:474
msgid "Support for multiple context expressions."
msgstr "Stöd för flera kontextuttryck."

#: ../../reference/compound_stmts.rst:480
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Uttalandet \"med\""

#: ../../reference/compound_stmts.rst:480
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
"Specifikation, bakgrund och exempel för Pythons :keyword:`with`\\-sats."

#: ../../reference/compound_stmts.rst:490
msgid "Function definitions"
msgstr "Definitioner av funktioner"

#: ../../reference/compound_stmts.rst:505
msgid ""
"A function definition defines a user-defined function object (see section :"
"ref:`types`):"
msgstr ""
"En funktionsdefinition definierar ett användardefinierat funktionsobjekt (se "
"avsnitt :ref:`types`):"

#: ../../reference/compound_stmts.rst:524
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper "
"around the executable code for the function).  This function object contains "
"a reference to the current global namespace as the global namespace to be "
"used when the function is called."
msgstr ""
"En funktionsdefinition är en exekverbar sats.  När den exekveras binds "
"funktionsnamnet i den aktuella lokala namnrymden till ett funktionsobjekt "
"(ett omslag runt den exekverbara koden för funktionen).  Detta "
"funktionsobjekt innehåller en referens till den aktuella globala namnrymden "
"som den globala namnrymd som ska användas när funktionen anropas."

#: ../../reference/compound_stmts.rst:530
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr ""
"Funktionsdefinitionen exekverar inte funktionens kropp; denna exekveras "
"först när funktionen anropas. [#]_"

#: ../../reference/compound_stmts.rst:536
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code ::"
msgstr ""
"En funktionsdefinition kan omslutas av ett eller flera :term:`decorator` -"
"uttryck. Dekoratoruttryck utvärderas när funktionen definieras, i det scope "
"som innehåller funktionsdefinitionen.  Resultatet måste vara en callable, "
"som anropas med funktionsobjektet som enda argument. Det returnerade värdet "
"är bundet till funktionsnamnet i stället för till funktionsobjektet.  Flera "
"dekoratorer tillämpas på ett nästlat sätt. Till exempel följande kod ::"

#: ../../reference/compound_stmts.rst:547
#: ../../reference/compound_stmts.rst:724
msgid "is roughly equivalent to ::"
msgstr "är ungefär likvärdigt med ::"

#: ../../reference/compound_stmts.rst:552
msgid ""
"except that the original function is not temporarily bound to the name "
"``func``."
msgstr ""
"förutom att den ursprungliga funktionen inte är temporärt bunden till namnet "
"``func``."

#: ../../reference/compound_stmts.rst:554
msgid ""
"Functions may be decorated with any valid :token:`assignment_expression`. "
"Previously, the grammar was much more restrictive; see :pep:`614` for "
"details."
msgstr ""

#: ../../reference/compound_stmts.rst:564
msgid ""
"When one or more :term:`parameters <parameter>` have the form *parameter* "
"``=`` *expression*, the function is said to have \"default parameter values."
"\"  For a parameter with a default value, the corresponding :term:`argument` "
"may be omitted from a call, in which case the parameter's default value is "
"substituted.  If a parameter has a default value, all following parameters "
"up until the \"``*``\" must also have a default value --- this is a "
"syntactic restriction that is not expressed by the grammar."
msgstr ""
"När en eller flera :term:`parametrar <parameter>` har formen *parameter* "
"``=`` *uttryck*, sägs funktionen ha \"default parameter values\"  För en "
"parameter med ett standardvärde kan motsvarande :term:`argument` utelämnas "
"från ett anrop, varvid parameterns standardvärde ersätts.  Om en parameter "
"har ett standardvärde måste alla följande parametrar fram till \"``*``\" "
"också ha ett standardvärde --- detta är en syntaktisk restriktion som inte "
"uttrycks av grammatiken."

#: ../../reference/compound_stmts.rst:572
msgid ""
"**Default parameter values are evaluated from left to right when the "
"function definition is executed.** This means that the expression is "
"evaluated once, when the function is defined, and that the same \"pre-"
"computed\" value is used for each call.  This is especially important to "
"understand when a default parameter is a mutable object, such as a list or a "
"dictionary: if the function modifies the object (e.g. by appending an item "
"to a list), the default value is in effect modified.  This is generally not "
"what was intended.  A way around this is to use ``None`` as the default, and "
"explicitly test for it in the body of the function, e.g.::"
msgstr ""

#: ../../reference/compound_stmts.rst:593
msgid ""
"Function call semantics are described in more detail in section :ref:"
"`calls`. A function call always assigns values to all parameters mentioned "
"in the parameter list, either from positional arguments, from keyword "
"arguments, or from default values.  If the form \"``*identifier``\" is "
"present, it is initialized to a tuple receiving any excess positional "
"parameters, defaulting to the empty tuple. If the form \"``**identifier``\" "
"is present, it is initialized to a new ordered mapping receiving any excess "
"keyword arguments, defaulting to a new empty mapping of the same type.  "
"Parameters after \"``*``\" or \"``*identifier``\" are keyword-only "
"parameters and may only be passed by keyword arguments.  Parameters before "
"\"``/``\" are positional-only parameters and may only be passed by "
"positional arguments."
msgstr ""
"Semantiken för funktionsanrop beskrivs mer i detalj i avsnitt :ref:`calls`. "
"Ett funktionsanrop tilldelar alltid värden till alla parametrar som nämns i "
"parameterlistan, antingen från positionella argument, från "
"nyckelordsargument eller från standardvärden.  Om formen \"``*identifier``\" "
"finns initialiseras den till en tupel som tar emot eventuella överflödiga "
"positionella parametrar, med den tomma tupeln som standard. Om formen "
"\"``**identifier``\" finns initieras den till en ny ordnad mappning som tar "
"emot eventuella överflödiga nyckelordsargument, med en ny tom mappning av "
"samma typ som standard.  Parametrar efter \"``*``\" eller "
"\"``*identifier``\" är endast nyckelordsparametrar och kan endast skickas "
"med nyckelordsargument.  Parametrar före \"``/``\" är endast "
"positionsparametrar och kan endast överföras med positionsargument."

#: ../../reference/compound_stmts.rst:605
msgid ""
"The ``/`` function parameter syntax may be used to indicate positional-only "
"parameters. See :pep:`570` for details."
msgstr ""
"Syntaxen ``/`` för funktionsparametrar kan användas för att ange parametrar "
"som endast är positionella. Se :pep:`570` för detaljer."

#: ../../reference/compound_stmts.rst:614
msgid ""
"Parameters may have an :term:`annotation <function annotation>` of the form "
"\"``: expression``\" following the parameter name.  Any parameter may have "
"an annotation, even those of the form ``*identifier`` or ``**identifier``.  "
"Functions may have \"return\" annotation of the form \"``-> expression``\" "
"after the parameter list.  These annotations can be any valid Python "
"expression.  The presence of annotations does not change the semantics of a "
"function.  The annotation values are available as values of a dictionary "
"keyed by the parameters' names in the :attr:`__annotations__` attribute of "
"the function object.  If the ``annotations`` import from :mod:`__future__` "
"is used, annotations are preserved as strings at runtime which enables "
"postponed evaluation.  Otherwise, they are evaluated when the function "
"definition is executed.  In this case annotations may be evaluated in a "
"different order than they appear in the source code."
msgstr ""

#: ../../reference/compound_stmts.rst:629
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda expressions, "
"described in section :ref:`lambda`.  Note that the lambda expression is "
"merely a shorthand for a simplified function definition; a function defined "
"in a \":keyword:`def`\" statement can be passed around or assigned to "
"another name just like a function defined by a lambda expression.  The \":"
"keyword:`!def`\" form is actually more powerful since it allows the "
"execution of multiple statements and annotations."
msgstr ""
"Det är också möjligt att skapa anonyma funktioner (funktioner som inte är "
"knutna till ett namn) för omedelbar användning i uttryck.  Här används "
"lambda-uttryck, som beskrivs i avsnitt :ref:`lambda`.  Observera att "
"lambdauttrycket bara är en förkortning för en förenklad funktionsdefinition; "
"en funktion som definieras i en \":keyword:`def`\"-sats kan skickas runt "
"eller tilldelas ett annat namn precis som en funktion som definieras av ett "
"lambdauttryck.  Formen \":keyword:`!def`\" är faktiskt mer kraftfull "
"eftersom den tillåter exekvering av flera satser och annoteringar."

#: ../../reference/compound_stmts.rst:637
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"statement executed inside a function definition defines a local function "
"that can be returned or passed around.  Free variables used in the nested "
"function can access the local variables of the function containing the def.  "
"See section :ref:`naming` for details."
msgstr ""
"**Programmerarens anmärkning:** Funktioner är första klassens objekt.  En "
"\"``def``\"-sats som exekveras inuti en funktionsdefinition definierar en "
"lokal funktion som kan returneras eller skickas runt.  Fria variabler som "
"används i den nästlade funktionen kan komma åt de lokala variablerna i den "
"funktion som innehåller def. Se avsnitt :ref:`naming` för detaljer."

#: ../../reference/compound_stmts.rst:646
msgid ":pep:`3107` - Function Annotations"
msgstr ":pep:`3107` - Funktionskommentarer"

#: ../../reference/compound_stmts.rst:646
msgid "The original specification for function annotations."
msgstr "Den ursprungliga specifikationen för funktionsannoteringar."

#: ../../reference/compound_stmts.rst:649
msgid ":pep:`484` - Type Hints"
msgstr ":pep:`484` - Tips om typ"

#: ../../reference/compound_stmts.rst:649
msgid "Definition of a standard meaning for annotations: type hints."
msgstr "Definition av en standardbetydelse för annotationer: typ hints."

#: ../../reference/compound_stmts.rst:653
msgid ":pep:`526` - Syntax for Variable Annotations"
msgstr ":pep:`526` - Syntax för variabelkommentarer"

#: ../../reference/compound_stmts.rst:652
msgid ""
"Ability to type hint variable declarations, including class variables and "
"instance variables"
msgstr ""

#: ../../reference/compound_stmts.rst:656
msgid ":pep:`563` - Postponed Evaluation of Annotations"
msgstr ":pep:`563` - Uppskjuten utvärdering av annoteringar"

#: ../../reference/compound_stmts.rst:656
msgid ""
"Support for forward references within annotations by preserving annotations "
"in a string form at runtime instead of eager evaluation."
msgstr ""
"Stöd för framåtriktade referenser inom annotationer genom att bevara "
"annotationer i strängform vid körning istället för ivrig utvärdering."

#: ../../reference/compound_stmts.rst:663
msgid "Class definitions"
msgstr "Klassdefinitioner"

#: ../../reference/compound_stmts.rst:678
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr ""
"En klassdefinition definierar ett klassobjekt (se avsnitt :ref:`types`):"

#: ../../reference/compound_stmts.rst:685
msgid ""
"A class definition is an executable statement.  The inheritance list usually "
"gives a list of base classes (see :ref:`metaclasses` for more advanced "
"uses), so each item in the list should evaluate to a class object which "
"allows subclassing.  Classes without an inheritance list inherit, by "
"default, from the base class :class:`object`; hence, ::"
msgstr ""
"En klassdefinition är ett körbart uttalande.  Arvslistan ger vanligtvis en "
"lista över basklasser (se :ref:`metaclasses` för mer avancerade "
"användningsområden), så varje objekt i listan bör utvärderas till ett "
"klassobjekt som tillåter underklassning.  Klasser utan en arvslista ärver, "
"som standard, från basklassen :class:`object`; därav ::"

#: ../../reference/compound_stmts.rst:694
msgid "is equivalent to ::"
msgstr "är likvärdig med ::"

#: ../../reference/compound_stmts.rst:699
msgid ""
"The class's suite is then executed in a new execution frame (see :ref:"
"`naming`), using a newly created local namespace and the original global "
"namespace. (Usually, the suite contains mostly function definitions.)  When "
"the class's suite finishes execution, its execution frame is discarded but "
"its local namespace is saved. [#]_ A class object is then created using the "
"inheritance list for the base classes and the saved local namespace for the "
"attribute dictionary.  The class name is bound to this class object in the "
"original local namespace."
msgstr ""
"Klassens svit exekveras sedan i en ny exekveringsram (se :ref:`naming`), med "
"en nyskapad lokal namnrymd och den ursprungliga globala namnrymden. "
"(Vanligtvis innehåller sviten mest funktionsdefinitioner.) När klassens svit "
"är färdig exekverad kasseras dess exekveringsram men dess lokala namnrymd "
"sparas. [#]_ Ett klassobjekt skapas sedan med hjälp av arvslistan för "
"basklasserna och det sparade lokala namnrymden för attributdictionariet.  "
"Klassnamnet är bundet till detta klassobjekt i den ursprungliga lokala "
"namnrymden."

#: ../../reference/compound_stmts.rst:708
msgid ""
"The order in which attributes are defined in the class body is preserved in "
"the new class's ``__dict__``.  Note that this is reliable only right after "
"the class is created and only for classes that were defined using the "
"definition syntax."
msgstr ""

#: ../../reference/compound_stmts.rst:713
msgid ""
"Class creation can be customized heavily using :ref:`metaclasses "
"<metaclasses>`."
msgstr ""
"Skapandet av klasser kan anpassas kraftigt med hjälp av :ref:`metaclasses "
"<metaclasses>`."

#: ../../reference/compound_stmts.rst:718
msgid "Classes can also be decorated: just like when decorating functions, ::"
msgstr ""
"Klasser kan också dekoreras: precis som när du dekorerar funktioner, ::"

#: ../../reference/compound_stmts.rst:729
msgid ""
"The evaluation rules for the decorator expressions are the same as for "
"function decorators.  The result is then bound to the class name."
msgstr ""
"Utvärderingsreglerna för dekoratoruttrycken är desamma som för "
"funktionsdekoratorer.  Resultatet binds sedan till klassnamnet."

#: ../../reference/compound_stmts.rst:732
msgid ""
"Classes may be decorated with any valid :token:`assignment_expression`. "
"Previously, the grammar was much more restrictive; see :pep:`614` for "
"details."
msgstr ""

#: ../../reference/compound_stmts.rst:737
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"attributes; they are shared by instances.  Instance attributes can be set in "
"a method with ``self.name = value``.  Both class and instance attributes are "
"accessible through the notation \"``self.name``\", and an instance attribute "
"hides a class attribute with the same name when accessed in this way.  Class "
"attributes can be used as defaults for instance attributes, but using "
"mutable values there can lead to unexpected results.  :ref:`Descriptors "
"<descriptors>` can be used to create instance variables with different "
"implementation details."
msgstr ""
"**Programmerarens anteckning:** Variabler som definieras i klassdefinitionen "
"är klassattribut; de delas av instanser.  Instansattribut kan ställas in i "
"en metod med ``self.name = value``.  Både klass- och instansattribut är "
"åtkomliga genom notationen \"``self.name``\", och ett instansattribut döljer "
"ett klassattribut med samma namn när det är åtkomligt på detta sätt.  "
"Klassattribut kan användas som standard för instansattribut, men att använda "
"föränderliga värden där kan leda till oväntade resultat. :ref:`Deskriptorer "
"<descriptors>` kan användas för att skapa instansvariabler med olika "
"implementationsdetaljer."

#: ../../reference/compound_stmts.rst:752
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Metaklasser i Python 3000"

#: ../../reference/compound_stmts.rst:750
msgid ""
"The proposal that changed the declaration of metaclasses to the current "
"syntax, and the semantics for how classes with metaclasses are constructed."
msgstr ""
"Förslaget som ändrade deklarationen av metaklasser till den nuvarande "
"syntaxen, och semantiken för hur klasser med metaklasser konstrueras."

#: ../../reference/compound_stmts.rst:755
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - Klassdekoratorer"

#: ../../reference/compound_stmts.rst:755
msgid ""
"The proposal that added class decorators.  Function and method decorators "
"were introduced in :pep:`318`."
msgstr ""
"Förslaget som lade till klassdekoratorer.  Funktions- och metoddekoratorer "
"introducerades i :pep:`318`."

#: ../../reference/compound_stmts.rst:762
msgid "Coroutines"
msgstr "Coroutines"

#: ../../reference/compound_stmts.rst:770
msgid "Coroutine function definition"
msgstr "Definition av Coroutine-funktion"

#: ../../reference/compound_stmts.rst:780
msgid ""
"Execution of Python coroutines can be suspended and resumed at many points "
"(see :term:`coroutine`).  Inside the body of a coroutine function, ``await`` "
"and ``async`` identifiers become reserved keywords; :keyword:`await` "
"expressions, :keyword:`async for` and :keyword:`async with` can only be used "
"in coroutine function bodies."
msgstr ""

#: ../../reference/compound_stmts.rst:786
msgid ""
"Functions defined with ``async def`` syntax are always coroutine functions, "
"even if they do not contain ``await`` or ``async`` keywords."
msgstr ""
"Funktioner som definieras med syntaxen ``async def`` är alltid coroutine-"
"funktioner, även om de inte innehåller nyckelorden ``await`` eller ``async``."

#: ../../reference/compound_stmts.rst:789
msgid ""
"It is a :exc:`SyntaxError` to use a ``yield from`` expression inside the "
"body of a coroutine function."
msgstr ""
"Det är ett :exc:`SyntaxError` att använda ett ``yield from``\\ -uttryck "
"inuti en coroutine-funktion."

#: ../../reference/compound_stmts.rst:792
msgid "An example of a coroutine function::"
msgstr "Ett exempel på en coroutine-funktion::"

#: ../../reference/compound_stmts.rst:803
msgid "The :keyword:`!async for` statement"
msgstr "Nyckelordet: `!async for`\\-satsen"

#: ../../reference/compound_stmts.rst:808
msgid ""
"An :term:`asynchronous iterable` provides an ``__aiter__`` method that "
"directly returns an :term:`asynchronous iterator`, which can call "
"asynchronous code in its ``__anext__`` method."
msgstr ""
"Ett :term:`asynchronous iterable` tillhandahåller en ``__aiter__``\\-metod "
"som direkt returnerar en :term:`asynchronous iterator`, som kan anropa "
"asynkron kod i sin ``__anext__``\\-metod."

#: ../../reference/compound_stmts.rst:812
msgid ""
"The ``async for`` statement allows convenient iteration over asynchronous "
"iterables."
msgstr ""
"Satsen ``async for`` möjliggör bekväm iteration över asynkrona iterabler."

#: ../../reference/compound_stmts.rst:822
msgid "Is semantically equivalent to::"
msgstr "Är semantiskt ekvivalent med::"

#: ../../reference/compound_stmts.rst:838
msgid "See also :meth:`__aiter__` and :meth:`__anext__` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:840
msgid ""
"It is a :exc:`SyntaxError` to use an ``async for`` statement outside the "
"body of a coroutine function."
msgstr ""
"Det är ett :exc:`SyntaxError` att använda en ``async for``\\-sats utanför "
"kroppen på en coroutine-funktion."

#: ../../reference/compound_stmts.rst:848
msgid "The :keyword:`!async with` statement"
msgstr "Nyckelordet: `!async with`\\-satsen"

#: ../../reference/compound_stmts.rst:853
msgid ""
"An :term:`asynchronous context manager` is a :term:`context manager` that is "
"able to suspend execution in its *enter* and *exit* methods."
msgstr ""
"En :term:`asynchronous context manager` är en :term:`context manager` som "
"kan avbryta exekveringen i sina *enter*- och *exit*-metoder."

#: ../../reference/compound_stmts.rst:880
msgid "See also :meth:`__aenter__` and :meth:`__aexit__` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:882
msgid ""
"It is a :exc:`SyntaxError` to use an ``async with`` statement outside the "
"body of a coroutine function."
msgstr ""
"Det är ett :exc:`SyntaxError` att använda en ``async with``\\-sats utanför "
"kroppen på en coroutine-funktion."

#: ../../reference/compound_stmts.rst:888
msgid ":pep:`492` - Coroutines with async and await syntax"
msgstr ":pep:`492` - Coroutines med async- och await-syntax"

#: ../../reference/compound_stmts.rst:888
msgid ""
"The proposal that made coroutines a proper standalone concept in Python, and "
"added supporting syntax."
msgstr ""
"Förslaget som gjorde coroutines till ett riktigt fristående koncept i Python "
"och lade till stödjande syntax."

#: ../../reference/compound_stmts.rst:893
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../reference/compound_stmts.rst:894
msgid ""
"The exception is propagated to the invocation stack unless there is a :"
"keyword:`finally` clause which happens to raise another exception. That new "
"exception causes the old one to be lost."
msgstr ""
"Undantaget sprids till anropsstacken om det inte finns en :keyword:"
"`finally`\\-klausul som råkar ge upphov till ett annat undantag. Det nya "
"undantaget gör att det gamla går förlorat."

#: ../../reference/compound_stmts.rst:898
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's ``__doc__`` attribute and therefore the "
"function's :term:`docstring`."
msgstr ""

#: ../../reference/compound_stmts.rst:902
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's ``__doc__`` item and therefore the class's :"
"term:`docstring`."
msgstr ""
