# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-09-16 00:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/monitoring.rst:6
msgid "Monitoring C API"
msgstr "Övervakning av C API"

#: ../../c-api/monitoring.rst:8
msgid "Added in version 3.13."
msgstr "Tillagd i version 3.13."

#: ../../c-api/monitoring.rst:10
msgid ""
"An extension may need to interact with the event monitoring system. "
"Subscribing to events and registering callbacks can be done via the Python "
"API exposed in :mod:`sys.monitoring`."
msgstr ""
"Ett tillägg kan behöva interagera med händelseövervakningssystemet. "
"Prenumeration på händelser och registrering av callbacks kan göras via "
"Python API som exponeras i :mod:`sys.monitoring`."

#: ../../c-api/monitoring.rst:15
msgid "Generating Execution Events"
msgstr "Generering av exekveringshändelser"

#: ../../c-api/monitoring.rst:17
msgid ""
"The functions below make it possible for an extension to fire monitoring "
"events as it emulates the execution of Python code. Each of these functions "
"accepts a ``PyMonitoringState`` struct which contains concise information "
"about the activation state of events, as well as the event arguments, which "
"include a ``PyObject*`` representing the code object, the instruction offset "
"and sometimes additional, event-specific arguments "
"(see :mod:`sys.monitoring` for details about the signatures of the different "
"event callbacks). The ``codelike`` argument should be an instance "
"of :class:`types.CodeType` or of a type that emulates it."
msgstr ""
"Funktionerna nedan gör det möjligt för en tilläggsfunktion att utlösa "
"övervakningshändelser när den emulerar exekveringen av Python-kod. Var och "
"en av dessa funktioner accepterar en ``PyMonitoringState`` -struktur som "
"innehåller kortfattad information om händelsernas aktiveringsstatus, samt "
"händelseargumenten, som inkluderar en ``PyObject*`` som representerar "
"kodobjektet, instruktionsförskjutningen och ibland ytterligare "
"händelsespecifika argument (se :mod:`sys.monitoring` för detaljer om "
"signaturerna för de olika händelseåteranropen). Argumentet ``codelike`` bör "
"vara en instans av :class:`types.CodeType` eller av en typ som emulerar den."

#: ../../c-api/monitoring.rst:27
msgid ""
"The VM disables tracing when firing an event, so there is no need for user "
"code to do that."
msgstr ""
"VM inaktiverar spårning när en händelse utlöses, så det finns inget behov av "
"användarkod för att göra det."

#: ../../c-api/monitoring.rst:30
msgid ""
"Monitoring functions should not be called with an exception set, except "
"those listed below as working with the current exception."
msgstr ""
"Övervakningsfunktioner ska inte anropas med ett undantag inställt, förutom "
"de som listas nedan som arbetar med det aktuella undantaget."

#: ../../c-api/monitoring.rst:35
msgid ""
"Representation of the state of an event type. It is allocated by the user "
"while its contents are maintained by the monitoring API functions described "
"below."
msgstr ""
"Representation av tillståndet för en händelsetyp. Den allokeras av "
"användaren medan dess innehåll underhålls av API-funktionerna för "
"övervakning som beskrivs nedan."

#: ../../c-api/monitoring.rst:39
msgid ""
"All of the functions below return 0 on success and -1 (with an exception "
"set) on error."
msgstr ""
"Alla funktioner nedan returnerar 0 vid framgång och -1 (med en "
"undantagsinställning) vid fel."

#: ../../c-api/monitoring.rst:41
msgid "See :mod:`sys.monitoring` for descriptions of the events."
msgstr "Se :mod:`sys.monitoring` för beskrivningar av händelserna."

#: ../../c-api/monitoring.rst:45
msgid "Fire a ``PY_START`` event."
msgstr "Starta en ``PY_START`` -händelse."

#: ../../c-api/monitoring.rst:50
msgid "Fire a ``PY_RESUME`` event."
msgstr "Starta en ``PY_RESUME`` -händelse."

#: ../../c-api/monitoring.rst:55
msgid "Fire a ``PY_RETURN`` event."
msgstr "Starta en ``PY_RETURN`` -händelse."

#: ../../c-api/monitoring.rst:60
msgid "Fire a ``PY_YIELD`` event."
msgstr "Starta en ``PY_YIELD`` -händelse."

#: ../../c-api/monitoring.rst:65
msgid "Fire a ``CALL`` event."
msgstr "Starta en ``CALL`` -händelse."

#: ../../c-api/monitoring.rst:70
msgid "Fire a ``LINE`` event."
msgstr "Starta en ``LINE`` -händelse."

#: ../../c-api/monitoring.rst:75
msgid "Fire a ``JUMP`` event."
msgstr "Starta en ``JUMP`` -händelse."

#: ../../c-api/monitoring.rst:80
msgid "Fire a ``BRANCH_LEFT`` event."
msgstr "Startar en händelse av typen ``BRANCH_LEFT``."

#: ../../c-api/monitoring.rst:85
msgid "Fire a ``BRANCH_RIGHT`` event."
msgstr "Startar en händelse av typen ``BRANCH_RIGHT``."

#: ../../c-api/monitoring.rst:90
msgid "Fire a ``C_RETURN`` event."
msgstr "Utlösa en ``C_RETURN`` -händelse."

#: ../../c-api/monitoring.rst:95
msgid ""
"Fire a ``PY_THROW`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``PY_THROW`` händelse med det aktuella undantaget (som returneras "
"av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:101
msgid ""
"Fire a ``RAISE`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``RAISE`` -händelse med det aktuella undantaget (som returneras "
"av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:107
msgid ""
"Fire a ``C_RAISE`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``C_RAISE`` -händelse med det aktuella undantaget (som returneras "
"av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:113
msgid ""
"Fire a ``RERAISE`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``RERAISE`` -händelse med det aktuella undantaget (som returneras "
"av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:119
msgid ""
"Fire an ``EXCEPTION_HANDLED`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``EXCEPTION_HANDLED`` -händelse med det aktuella undantaget (som "
"returneras av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:125
msgid ""
"Fire a ``PY_UNWIND`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Startar en ``PY_UNWIND`` -händelse med det aktuella undantaget (som "
"returneras av :c:func:`PyErr_GetRaisedException`)."

#: ../../c-api/monitoring.rst:131
msgid ""
"Fire a ``STOP_ITERATION`` event. If ``value`` is an instance "
"of :exc:`StopIteration`, it is used. Otherwise, a new :exc:`StopIteration` "
"instance is created with ``value`` as its argument."
msgstr ""
"Utlöser en ``STOP_ITERATION``\\-händelse. Om ``value`` är en instans "
"av :exc:`StopIteration`, så används den. Annars skapas en "
"ny :exc:`StopIteration`\\-instans med ``value`` som argument."

#: ../../c-api/monitoring.rst:136
msgid "Managing the Monitoring State"
msgstr "Hantering av övervakningstillståndet"

#: ../../c-api/monitoring.rst:138
msgid ""
"Monitoring states can be managed with the help of monitoring scopes. A scope "
"would typically correspond to a python function."
msgstr ""
"Övervakningstillstånd kan hanteras med hjälp av övervakningsscope. Ett scope "
"motsvarar vanligtvis en pythonfunktion."

#: ../../c-api/monitoring.rst:143
msgid ""
"Enter a monitored scope. ``event_types`` is an array of the event IDs for "
"events that may be fired from the scope. For example, the ID of a "
"``PY_START`` event is the value ``PY_MONITORING_EVENT_PY_START``, which is "
"numerically equal to the base-2 logarithm of "
"``sys.monitoring.events.PY_START``. ``state_array`` is an array with a "
"monitoring state entry for each event in ``event_types``, it is allocated by "
"the user but populated by :c:func:`!PyMonitoring_EnterScope` with "
"information about the activation state of the event. The size of "
"``event_types`` (and hence also of ``state_array``) is given in ``length``."
msgstr ""
"Ange ett övervakat scope. ``event_types`` är en array med händelse-ID:n för "
"händelser som kan avfyras från scopet. ID:t för en händelse av typen "
"``PY_START`` är till exempel värdet ``PY_MONITORING_EVENT_PY_START``, som är "
"numeriskt lika med bas-2-logaritmen för ``sys.monitoring.events.PY_START``. "
"``state_array`` är en array med en övervakningstillståndspost för varje "
"händelse i ``event_types``, den allokeras av användaren men fylls på "
"av :c:func:`!PyMonitoring_EnterScope` med information om händelsens "
"aktiveringstillstånd. Storleken på ``event_types`` (och därmed också på "
"``state_array``) anges i ``length``."

#: ../../c-api/monitoring.rst:153
msgid ""
"The ``version`` argument is a pointer to a value which should be allocated "
"by the user together with ``state_array`` and initialized to 0, and then set "
"only by :c:func:`!PyMonitoring_EnterScope` itself. It allows this function "
"to determine whether event states have changed since the previous call, and "
"to return quickly if they have not."
msgstr ""
"Argumentet ``version`` är en pekare till ett värde som bör allokeras av "
"användaren tillsammans med ``state_array`` och initialiseras till 0, och "
"sedan endast sättas av :c:func:`!PyMonitoring_EnterScope` själv. Det gör det "
"möjligt för denna funktion att avgöra om händelsetillstånd har ändrats sedan "
"föregående anrop och att snabbt återvända om så inte är fallet."

#: ../../c-api/monitoring.rst:159
msgid ""
"The scopes referred to here are lexical scopes: a function, class or "
"method. :c:func:`!PyMonitoring_EnterScope` should be called whenever the "
"lexical scope is entered. Scopes can be reentered, reusing the same "
"*state_array* and *version*, in situations like when emulating a recursive "
"Python function. When a code-like's execution is paused, such as when "
"emulating a generator, the scope needs to be exited and re-entered."
msgstr ""
"De scope som avses här är lexikala scope: en funktion, klass eller "
"metod. :c:func:`!PyMonitoring_EnterScope` bör anropas varje gång det "
"lexikala scopet skrivs in. Scopes kan skrivas in på nytt, med samma "
"*state_array* och *version*, i situationer som när man emulerar en rekursiv "
"Python-funktion. När en kodliknande exekvering pausas, t.ex. vid emulering "
"av en generator, måste scopet lämnas och återinmatas."

#: ../../c-api/monitoring.rst:166
msgid "The macros for *event_types* are:"
msgstr "Makron för *event_types* är:"

#: ../../c-api/monitoring.rst:174
msgid "Macro"
msgstr "Makro"

#: ../../c-api/monitoring.rst:174
msgid "Event"
msgstr "Händelse"

#: ../../c-api/monitoring.rst:176
msgid ":monitoring-event:`BRANCH_LEFT`"
msgstr ":monitoring-event:`BRANCH_LEFT`"

#: ../../c-api/monitoring.rst:177
msgid ":monitoring-event:`BRANCH_RIGHT`"
msgstr ":monitoring-event:`BRANCH_RIGHT`"

#: ../../c-api/monitoring.rst:178
msgid ":monitoring-event:`CALL`"
msgstr ":monitoring-event:`CALL`"

#: ../../c-api/monitoring.rst:179
msgid ":monitoring-event:`C_RAISE`"
msgstr ":monitoring-event:`C_RAISE`"

#: ../../c-api/monitoring.rst:180
msgid ":monitoring-event:`C_RETURN`"
msgstr ":monitoring-event:`C_RETURN`"

#: ../../c-api/monitoring.rst:181
msgid ":monitoring-event:`EXCEPTION_HANDLED`"
msgstr ":monitoring-event:`EXCEPTION_HANDLED`"

#: ../../c-api/monitoring.rst:182
msgid ":monitoring-event:`INSTRUCTION`"
msgstr ":monitoring-event:`INSTRUCTION`"

#: ../../c-api/monitoring.rst:183
msgid ":monitoring-event:`JUMP`"
msgstr ":monitoring-event:`JUMP`"

#: ../../c-api/monitoring.rst:184
msgid ":monitoring-event:`LINE`"
msgstr ":monitoring-event:`LINE`"

#: ../../c-api/monitoring.rst:185
msgid ":monitoring-event:`PY_RESUME`"
msgstr ":monitoring-event:`PY_RESUME`"

#: ../../c-api/monitoring.rst:186
msgid ":monitoring-event:`PY_RETURN`"
msgstr ":monitoring-event:`PY_RETURN`"

#: ../../c-api/monitoring.rst:187
msgid ":monitoring-event:`PY_START`"
msgstr ":monitoring-event:`PY_START`"

#: ../../c-api/monitoring.rst:188
msgid ":monitoring-event:`PY_THROW`"
msgstr ":monitoring-event:`PY_THROW`"

#: ../../c-api/monitoring.rst:189
msgid ":monitoring-event:`PY_UNWIND`"
msgstr ":monitoring-event:`PY_UNWIND`"

#: ../../c-api/monitoring.rst:190
msgid ":monitoring-event:`PY_YIELD`"
msgstr ":monitoring-event:`PY_YIELD`"

#: ../../c-api/monitoring.rst:191
msgid ":monitoring-event:`RAISE`"
msgstr ":monitoring-event:`RAISE`"

#: ../../c-api/monitoring.rst:192
msgid ":monitoring-event:`RERAISE`"
msgstr ":monitoring-event:`RERAISE`"

#: ../../c-api/monitoring.rst:193
msgid ":monitoring-event:`STOP_ITERATION`"
msgstr ":monitoring-event:`STOP_ITERATION`"

#: ../../c-api/monitoring.rst:198
msgid ""
"Exit the last scope that was entered with :c:func:`!PyMonitoring_EnterScope`."
msgstr ""
"Avsluta det senaste området som angavs med :c:func:`!"
"PyMonitoring_EnterScope`."

#: ../../c-api/monitoring.rst:203
msgid ""
"Return true if the event corresponding to the event ID *ev* is a :ref:`local "
"event <monitoring-event-local>`."
msgstr ""
"Returnerar true om händelsen som motsvarar händelse-ID:t *ev* är "
"en :ref:`lokal händelse <monitoring-event-local>`."

#: ../../c-api/monitoring.rst:210
msgid "This function is :term:`soft deprecated`."
msgstr "Denna funktion är :term:`soft deprecated`."
