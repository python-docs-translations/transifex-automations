# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 16:36+0000\n"
"PO-Revision-Date: 2025-09-22 16:49+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Typ av objekt"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"C-strukturen för de objekt som används för att beskriva inbyggda typer."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Detta är typobjektet för typobjekt; det är samma objekt som :class:`type` i "
"Python-lagret."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Returnerar icke-noll om objektet *o* är ett typobjekt, inklusive instanser "
"av typer som härrör från standardtypobjektet.  Returnera 0 i alla andra "
"fall. Denna funktion lyckas alltid."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Returnerar icke-noll om objektet *o* är ett typobjekt, men inte en subtyp av "
"standardtypobjektet.  Returnera 0 i alla andra fall.  Denna funktion lyckas "
"alltid."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Tömmer den interna lookup-cachen. Returnera den aktuella versionstaggen."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""
"Returnerar :c:member:`~PyTypeObject.tp_flags`\\-medlemmen av *type*. Denna "
"funktion är främst avsedd att användas med ``Py_LIMITED_API``; de enskilda "
"flaggbitarna är garanterat stabila över Python-utgåvor, men åtkomst till :c:"
"member:`~PyTypeObject.tp_flags` i sig är inte en del av :ref:`limited API "
"<limited-c-api>`."

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "Returtypen är nu ``unsigned long`` istället för ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Invalidera den interna lookup-cachen för typen och alla dess subtyper.  "
"Denna funktion måste anropas efter varje manuell ändring av typens attribut "
"eller basklasser."

#: ../../c-api/type.rst:62
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Returnerar icke-noll om typobjektet *o* anger egenskapen *feature*. "
"Typfunktioner betecknas med enbitsflaggor."

#: ../../c-api/type.rst:68
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Returnerar true om typobjektet innehåller stöd för cykeldetektorn; detta "
"testar typflaggan :c:macro:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr "Returnerar true om *a* är en subtyp av *b*."

#: ../../c-api/type.rst:76
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""

#: ../../c-api/type.rst:84
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""

#: ../../c-api/type.rst:90
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""

#: ../../c-api/type.rst:95
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Slutför ett typobjekt.  Detta bör anropas på alla typobjekt för att avsluta "
"deras initialisering.  Denna funktion är ansvarig för att lägga till ärvda "
"slots från en typs basklass.  Returnera ``0`` vid framgång, eller returnera "
"``\\-1`` och skapa ett undantag vid fel."

#: ../../c-api/type.rst:101
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :c:macro:"
"`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC protocol "
"itself by at least implementing the :c:member:`~PyTypeObject.tp_traverse` "
"handle."
msgstr ""
"Om någon av basklasserna implementerar GC-protokollet och den angivna typen "
"inte innehåller :c:macro:`Py_TPFLAGS_HAVE_GC` i sina flaggor, kommer GC-"
"protokollet automatiskt att implementeras från dess föräldrar. Tvärtom, om "
"den typ som skapas inkluderar :c:macro:`Py_TPFLAGS_HAVE_GC` i sina flaggor "
"så **måste** den implementera GC-protokollet själv genom att åtminstone "
"implementera :c:member:`~PyTypeObject.tp_traverse` -handtaget."

#: ../../c-api/type.rst:111
msgid ""
"Return the type's name. Equivalent to getting the type's ``__name__`` "
"attribute."
msgstr ""

#: ../../c-api/type.rst:117
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
"``__qualname__`` attribute."
msgstr ""

#: ../../c-api/type.rst:124
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"Returnerar den funktionspekare som finns lagrad i den angivna sloten. Om "
"resultatet är ``NULL``, indikerar detta att antingen slotten är ``NULL``, "
"eller att funktionen anropades med ogiltiga parametrar. Anropare kommer "
"vanligtvis att kasta resultatpekaren till lämplig funktionstyp."

#: ../../c-api/type.rst:130
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Se :c:member:`PyType_Slot.slot` för möjliga värden på argumentet *slot*."

#: ../../c-api/type.rst:134
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` kan nu acceptera alla typer. Tidigare var det "
"begränsat till :ref:`heap types <heap-types>`."

#: ../../c-api/type.rst:140
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Returnerar modulobjektet som associeras med den angivna typen när typen "
"skapades med :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:143 ../../c-api/type.rst:163
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Om ingen modul är associerad med den angivna typen, anger :py:class:"
"`TypeError` och returnerar ``NULL``."

#: ../../c-api/type.rst:146
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when :c:"
"type:`!PyCMethod` cannot be used."
msgstr ""
"Denna funktion används vanligtvis för att hämta den modul i vilken en metod "
"är definierad. Observera att i en sådan metod kanske inte "
"``PyType_GetModule(Py_TYPE(self))`` returnerar det avsedda resultatet. "
"``Py_TYPE(self)`` kan vara en *subklass* av den avsedda klassen, och "
"subklasser definieras inte nödvändigtvis i samma modul som deras superklass. "
"Se :c:type:`PyCMethod` för att få den klass som definierar metoden. Se :c:"
"func:`PyType_GetModuleByDef` för fall då :c:type:`!PyCMethod` inte kan "
"användas."

#: ../../c-api/type.rst:159
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"Returnerar tillståndet för modulobjektet som är associerat med den givna "
"typen. Detta är en genväg för att anropa :c:func:`PyModule_GetState()` på "
"resultatet av :c:func:`PyType_GetModule`."

#: ../../c-api/type.rst:166
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Om *typen* har en associerad modul men dess tillstånd är ``NULL``, "
"returneras ``NULL`` utan att ett undantag anges."

#: ../../c-api/type.rst:173
msgid ""
"Find the first superclass whose module was created from the given :c:type:"
"`PyModuleDef` *def*, and return that module."
msgstr ""
"Hitta den första superklassen vars modul skapades från den givna :c:type:"
"`PyModuleDef` *def*, och returnera den modulen."

#: ../../c-api/type.rst:176
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr ""
"Om ingen modul hittas genereras ett :py:class:`TypeError` och returnerar "
"``NULL``."

#: ../../c-api/type.rst:178
msgid ""
"This function is intended to be used together with :c:func:"
"`PyModule_GetState()` to get module state from slot methods (such as :c:"
"member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) and "
"other places where a method's defining class cannot be passed using the :c:"
"type:`PyCMethod` calling convention."
msgstr ""
"Den här funktionen är avsedd att användas tillsammans med :c:func:"
"`PyModule_GetState()` för att hämta modulstatus från slot-metoder (t.ex. :c:"
"member:`~PyTypeObject.tp_init` eller :c:member:`~PyNumberMethods.nb_add`) "
"och andra ställen där en metods definierande klass inte kan skickas med "
"anropskonventionen :c:type:`PyCMethod`."

#: ../../c-api/type.rst:188
msgid "Creating Heap-Allocated Types"
msgstr "Skapa Heap-allokerade typer"

#: ../../c-api/type.rst:190
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Följande funktioner och strukturer används för att skapa :ref:`heap types "
"<heap-types>`."

#: ../../c-api/type.rst:195
msgid ""
"Creates and returns a :ref:`heap type <heap-types>` from the *spec* (:c:"
"macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../../c-api/type.rst:198
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"Argumentet *bases* kan användas för att ange basklasser; det kan antingen "
"vara bara en klass eller en tupel av klasser. Om *bases* är ``NULL`` används "
"istället *Py_tp_bases* slot. Om det också är ``NULL``, används *Py_tp_base* "
"slot istället. Om det också är ``NULL``, härstammar den nya typen från :"
"class:`object`."

#: ../../c-api/type.rst:204
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"Argumentet *module* kan användas för att registrera den modul i vilken den "
"nya klassen definieras. Det måste vara ett modulobjekt eller ``NULL``. Om "
"det inte är ``NULL`` associeras modulen med den nya typen och kan senare "
"hämtas med :c:func:`PyType_GetModule`. Den associerade modulen ärvs inte av "
"underklasser utan måste anges för varje klass för sig."

#: ../../c-api/type.rst:211
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Denna funktion anropar :c:func:`PyType_Ready` på den nya typen."

#: ../../c-api/type.rst:217
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"Funktionen accepterar nu en enda klass som *bases*-argument och ``NULL`` som "
"``tp_doc``\\-plats."

#: ../../c-api/type.rst:222
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr ""

#: ../../c-api/type.rst:228
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr ""

#: ../../c-api/type.rst:232
msgid "Structure defining a type's behavior."
msgstr "Struktur som definierar en typs beteende."

#: ../../c-api/type.rst:236
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Namn på typen, används för att ställa in :c:member:`PyTypeObject.tp_name`."

#: ../../c-api/type.rst:241
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""

#: ../../c-api/type.rst:247
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Typflaggor, används för att ställa in :c:member:`PyTypeObject.tp_flags`."

#: ../../c-api/type.rst:249
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Om flaggan ``Py_TPFLAGS_HEAPTYPE`` inte är satt, sätter :c:func:"
"`PyType_FromSpecWithBases` den automatiskt."

#: ../../c-api/type.rst:254
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Array av :c:type:`PyType_Slot`\\-strukturer. Avslutas med det speciella slot-"
"värdet ``{0, NULL}``."

#: ../../c-api/type.rst:259
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Struktur som definierar valfri funktionalitet för en typ och som innehåller "
"ett slot-ID och en värdepekare."

#: ../../c-api/type.rst:264
msgid "A slot ID."
msgstr "Ett slot-ID."

#: ../../c-api/type.rst:266
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"Slot-ID:n namnges som fältnamnen i strukturerna :c:type:`PyTypeObject`, :c:"
"type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:type:"
"`PyMappingMethods` och :c:type:`PyAsyncMethods` med ett extra prefix "
"``Py_``. Använd till exempel:"

#: ../../c-api/type.rst:272
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""
"``Py_tp_dealloc`` för att ställa in :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:273
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` för att ställa in :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:274
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` för att ställa in :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:276
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr ""

#: ../../c-api/type.rst:279
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:280
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ""

#: ../../c-api/type.rst:281
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ""

#: ../../c-api/type.rst:282
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ""

#: ../../c-api/type.rst:283
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ""

#: ../../c-api/type.rst:284
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/type.rst:285
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:287
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""

#: ../../c-api/type.rst:289
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: ../../c-api/type.rst:292
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :c:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"Att ställa in :c:data:`Py_tp_bases` eller :c:data:`Py_tp_base` kan vara "
"problematiskt på vissa plattformar. För att undvika problem, använd *bases*-"
"argumentet i :c:func:`PyType_FromSpecWithBases` istället."

#: ../../c-api/type.rst:299
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""
"Slots i :c:type:`PyBufferProcs` kan ställas in i det obegränsade API:et."

#: ../../c-api/type.rst:301
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` are now available under the :ref:`limited API <limited-c-"
"api>`."
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` och :c:member:`~PyBufferProcs."
"bf_releasebuffer` är nu tillgängliga under :ref:`limited API <limited-c-"
"api>`."

#: ../../c-api/type.rst:308
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""
"Det önskade värdet på platsen. I de flesta fall är detta en pekare till en "
"funktion."

#: ../../c-api/type.rst:311
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr ""

#: ../../c-api/type.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "type"
