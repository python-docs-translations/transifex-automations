# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 15:05+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Typ av objekt"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"C-strukturen för de objekt som används för att beskriva inbyggda typer."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr ""
"Detta är typobjektet för typobjekt; det är samma objekt som :class:`type` i "
"Python-lagret."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Returnerar icke-noll om objektet *o* är ett typobjekt, inklusive instanser "
"av typer som härrör från standardtypobjektet.  Returnera 0 i alla andra "
"fall. Denna funktion lyckas alltid."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the"
" standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Returnerar icke-noll om objektet *o* är ett typobjekt, men inte en subtyp av"
" standardtypobjektet.  Returnera 0 i alla andra fall.  Denna funktion lyckas"
" alltid."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Tömmer den interna lookup-cachen. Returnera den aktuella versionstaggen."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to "
":c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""
"Returnerar :c:member:`~PyTypeObject.tp_flags`\\-medlemmen av *type*. Denna "
"funktion är främst avsedd att användas med ``Py_LIMITED_API``; de enskilda "
"flaggbitarna är garanterat stabila över Python-utgåvor, men åtkomst till "
":c:member:`~PyTypeObject.tp_flags` i sig är inte en del av :ref:`limited API"
" <limited-c-api>`."

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "Returtypen är nu ``unsigned long`` istället för ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only exposed"
" via a read-only proxy (:attr:`cls.__dict__ <type.__dict__>`). This is a "
"replacement for accessing :c:member:`~PyTypeObject.tp_dict` directly. The "
"returned dictionary must be treated as read-only."
msgstr ""
"Returnerar typobjektets interna namnrymd, som annars bara är tillgänglig via"
" en skrivskyddad proxy (:attr:`cls.__dict__ <type.__dict__>`). Detta är en "
"ersättning för direkt åtkomst till :c:member:`~PyTypeObject.tp_dict`. Den "
"returnerade ordboken måste behandlas som skrivskyddad."

#: ../../c-api/type.rst:61
msgid ""
"This function is meant for specific embedding and language-binding cases, "
"where direct access to the dict is necessary and indirect access (e.g. via "
"the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""
"Denna funktion är avsedd för specifika fall av inbäddning och språkbindning,"
" där direkt åtkomst till dict är nödvändig och indirekt åtkomst (t.ex. via "
"proxy eller :c:func:`PyObject_GetAttr`) inte är tillräcklig."

#: ../../c-api/type.rst:65
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr ""
"Tilläggsmoduler bör fortsätta att använda ``tp_dict``, direkt eller "
"indirekt, när de skapar sina egna typer."

#: ../../c-api/type.rst:73
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes"
" or base classes of the type."
msgstr ""
"Invalidera den interna lookup-cachen för typen och alla dess subtyper.  "
"Denna funktion måste anropas efter varje manuell ändring av typens attribut "
"eller basklasser."

#: ../../c-api/type.rst:80
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case of "
"error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registrera *callback* som en typövervakare. Returnera ett icke-negativt "
"heltals-ID som måste skickas till framtida anrop till "
":c:func:`PyType_Watch`. I händelse av fel (t.ex. inga fler bevaknings-IDs "
"tillgängliga), returnera ``\\-1`` och sätt ett undantag."

#: ../../c-api/type.rst:85
msgid ""
"In free-threaded builds, :c:func:`PyType_AddWatcher` is not thread-safe, so "
"it must be called at start up (before spawning the first thread)."
msgstr ""
"I fritt trådade system är :c:func:`PyType_AddWatcher` inte trådsäker, så den"
" måste anropas vid start (innan den första tråden skapas)."

#: ../../c-api/type.rst:93
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from "
":c:func:`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error (e.g."
" if *watcher_id* was never registered.)"
msgstr ""
"Rensa en övervakare som identifierats av *watcher_id* (tidigare returnerad "
"från :c:func:`PyType_AddWatcher`). Returnerar ``0`` vid framgång, ``\\-1`` "
"vid fel (t.ex. om *watcher_id* aldrig registrerades)"

#: ../../c-api/type.rst:97
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a *watcher_id* "
"that was not returned to it by a previous call to "
":c:func:`PyType_AddWatcher`."
msgstr ""
"Ett tillägg bör aldrig anropa ``PyType_ClearWatcher`` med ett *watcher_id* "
"som inte returnerades till det av ett tidigare anrop till "
":c:func:`PyType_AddWatcher`."

#: ../../c-api/type.rst:106
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by "
":c:func:`PyType_AddWatcher` will be called whenever "
":c:func:`PyType_Modified` reports a change to *type*. (The callback may be "
"called only once for a series of consecutive modifications to *type*, if "
":c:func:`!_PyType_Lookup` is not called on *type* between the modifications;"
" this is an implementation detail and subject to change.)"
msgstr ""
"Markera *type* som bevakad. Återkallelsen som tilldelats *watcher_id* av "
":c:func:`PyType_AddWatcher` kommer att anropas varje gång "
":c:func:`PyType_Modified` rapporterar en ändring av *type*. (Återkallelsen "
"kan anropas endast en gång för en serie på varandra följande ändringar av "
"*type*, om :c:func:`!_PyType_Lookup` inte anropas på *type* mellan "
"ändringarna; detta är en implementationsdetalj och kan komma att ändras)"

#: ../../c-api/type.rst:113
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that was"
" not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""
"Ett tillägg bör aldrig anropa ``PyType_Watch`` med ett *watcher_id* som inte"
" returnerades till det av ett tidigare anrop till "
":c:func:`PyType_AddWatcher`."

#: ../../c-api/type.rst:121
msgid "Type of a type-watcher callback function."
msgstr "Typ av callback-funktion för en typbevakare."

#: ../../c-api/type.rst:123
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to be"
" called on *type* or any type in its MRO; violating this rule could cause "
"infinite recursion."
msgstr ""
"Återkallelsen får inte modifiera *typ* eller orsaka att "
":c:func:`PyType_Modified` anropas på *typ* eller någon typ i dess MRO; att "
"bryta mot denna regel kan orsaka oändlig rekursion."

#: ../../c-api/type.rst:132
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Returnerar icke-noll om typobjektet *o* anger egenskapen *feature*. "
"Typfunktioner betecknas med enbitsflaggor."

#: ../../c-api/type.rst:138
msgid ""
"Return true if the type object includes support for the cycle detector; this"
" tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Returnerar true om typobjektet innehåller stöd för cykeldetektorn; detta "
"testar typflaggan :c:macro:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/type.rst:144
msgid "Return true if *a* is a subtype of *b*."
msgstr "Returnerar true om *a* är en subtyp av *b*."

#: ../../c-api/type.rst:146
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~type.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that :func:`issubclass` "
"would do."
msgstr ""
"Den här funktionen kontrollerar bara faktiska subtyper, vilket innebär att "
":meth:`~type.__subclasscheck__` inte anropas på *b*.  Anropa "
":c:func:`PyObject_IsSubclass` för att göra samma kontroll som "
":func:`issubclass` skulle göra."

#: ../../c-api/type.rst:154
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""

#: ../../c-api/type.rst:160
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""

#: ../../c-api/type.rst:165
msgid ""
"Finalize a type object.  This should be called on all type objects to finish"
" their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Slutför ett typobjekt.  Detta bör anropas på alla typobjekt för att avsluta "
"deras initialisering.  Denna funktion är ansvarig för att lägga till ärvda "
"slots från en typs basklass.  Returnera ``0`` vid framgång, eller returnera "
"``\\-1`` och skapa ett undantag vid fel."

#: ../../c-api/type.rst:171
msgid ""
"If some of the base classes implements the GC protocol and the provided type"
" does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the "
"GC protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include "
":c:macro:`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC"
" protocol itself by at least implementing the "
":c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"Om någon av basklasserna implementerar GC-protokollet och den angivna typen "
"inte innehåller :c:macro:`Py_TPFLAGS_HAVE_GC` i sina flaggor, kommer GC-"
"protokollet automatiskt att implementeras från dess föräldrar. Tvärtom, om "
"den typ som skapas inkluderar :c:macro:`Py_TPFLAGS_HAVE_GC` i sina flaggor "
"så **måste** den implementera GC-protokollet själv genom att åtminstone "
"implementera :c:member:`~PyTypeObject.tp_traverse` -handtaget."

#: ../../c-api/type.rst:181
msgid ""
"Return the type's name. Equivalent to getting the type's "
":attr:`~type.__name__` attribute."
msgstr ""
"Returnerar typens namn. Motsvarar att hämta typens attribut "
":attr:`~type.__name__`."

#: ../../c-api/type.rst:188
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
":attr:`~type.__qualname__` attribute."
msgstr ""
"Returnerar typens kvalificerade namn. Motsvarar hämtning av typens attribut "
":attr:`~type.__qualname__`."

#: ../../c-api/type.rst:195
msgid ""
"Return the type's fully qualified name. Equivalent to "
"``f\"{type.__module__}.{type.__qualname__}\"``, or :attr:`type.__qualname__`"
" if :attr:`type.__module__` is not a string or is equal to ``\"builtins\"``."
msgstr ""
"Returnerar typens fullständigt kvalificerade namn. Motsvarar "
"``f\"{type.__module__}.{type.__qualname__}\"``, eller "
":attr:`type.__qualname__` om :attr:`type.__module__` inte är en sträng eller"
" är lika med ``\"builtins\"``."

#: ../../c-api/type.rst:203
msgid ""
"Return the type's module name. Equivalent to getting the "
":attr:`type.__module__` attribute."
msgstr ""
"Returnerar typens modulnamn. Motsvarar hämtning av attributet "
":attr:`type.__module__`."

#: ../../c-api/type.rst:210
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the"
" result pointer into the appropriate function type."
msgstr ""
"Returnerar den funktionspekare som finns lagrad i den angivna sloten. Om "
"resultatet är ``NULL``, indikerar detta att antingen slotten är ``NULL``, "
"eller att funktionen anropades med ogiltiga parametrar. Anropare kommer "
"vanligtvis att kasta resultatpekaren till lämplig funktionstyp."

#: ../../c-api/type.rst:216
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Se :c:member:`PyType_Slot.slot` för möjliga värden på argumentet *slot*."

#: ../../c-api/type.rst:220
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` kan nu acceptera alla typer. Tidigare var det "
"begränsat till :ref:`heap types <heap-types>`."

#: ../../c-api/type.rst:226
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Returnerar modulobjektet som associeras med den angivna typen när typen "
"skapades med :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:229 ../../c-api/type.rst:249
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Om ingen modul är associerad med den angivna typen, anger "
":py:class:`TypeError` och returnerar ``NULL``."

#: ../../c-api/type.rst:232
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may"
" not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of "
"the intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when "
":c:type:`!PyCMethod` cannot be used."
msgstr ""
"Denna funktion används vanligtvis för att hämta den modul i vilken en metod "
"är definierad. Observera att i en sådan metod kanske inte "
"``PyType_GetModule(Py_TYPE(self))`` returnerar det avsedda resultatet. "
"``Py_TYPE(self)`` kan vara en *subklass* av den avsedda klassen, och "
"subklasser definieras inte nödvändigtvis i samma modul som deras superklass."
" Se :c:type:`PyCMethod` för att få den klass som definierar metoden. Se "
":c:func:`PyType_GetModuleByDef` för fall då :c:type:`!PyCMethod` inte kan "
"användas."

#: ../../c-api/type.rst:245
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of "
":c:func:`PyType_GetModule`."
msgstr ""
"Returnerar tillståndet för modulobjektet som är associerat med den givna "
"typen. Detta är en genväg för att anropa :c:func:`PyModule_GetState()` på "
"resultatet av :c:func:`PyType_GetModule`."

#: ../../c-api/type.rst:252
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Om *typen* har en associerad modul men dess tillstånd är ``NULL``, "
"returneras ``NULL`` utan att ett undantag anges."

#: ../../c-api/type.rst:259
msgid ""
"Find the first superclass whose module was created from the given "
":c:type:`PyModuleDef` *def*, and return that module."
msgstr ""
"Hitta den första superklassen vars modul skapades från den givna "
":c:type:`PyModuleDef` *def*, och returnera den modulen."

#: ../../c-api/type.rst:262
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr ""
"Om ingen modul hittas genereras ett :py:class:`TypeError` och returnerar "
"``NULL``."

#: ../../c-api/type.rst:264
msgid ""
"This function is intended to be used together with "
":c:func:`PyModule_GetState()` to get module state from slot methods (such as"
" :c:member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) "
"and other places where a method's defining class cannot be passed using the "
":c:type:`PyCMethod` calling convention."
msgstr ""
"Den här funktionen är avsedd att användas tillsammans med "
":c:func:`PyModule_GetState()` för att hämta modulstatus från slot-metoder "
"(t.ex. :c:member:`~PyTypeObject.tp_init` eller "
":c:member:`~PyNumberMethods.nb_add`) och andra ställen där en metods "
"definierande klass inte kan skickas med anropskonventionen "
":c:type:`PyCMethod`."

#: ../../c-api/type.rst:270
msgid ""
"The returned reference is :term:`borrowed <borrowed reference>` from *type*,"
" and will be valid as long as you hold a reference to *type*. Do not release"
" it with :c:func:`Py_DECREF` or similar."
msgstr ""
"Den returnerade referensen är :term:`borrowed <borrowed reference>` från "
"*type*, och kommer att vara giltig så länge du har en referens till *type*. "
"Frigör den inte med :c:func:`Py_DECREF` eller liknande."

#: ../../c-api/type.rst:278
msgid "Attempt to assign a version tag to the given type."
msgstr "Försök att tilldela en versionstagg till den angivna typen."

#: ../../c-api/type.rst:280
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr ""
"Returnerar 1 om typen redan har en giltig versionstagg eller om en ny har "
"tilldelats, eller 0 om en ny tagg inte kunde tilldelas."

#: ../../c-api/type.rst:287
msgid "Creating Heap-Allocated Types"
msgstr "Skapa Heap-allokerade typer"

#: ../../c-api/type.rst:289
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Följande funktioner och strukturer används för att skapa :ref:`heap types "
"<heap-types>`."

#: ../../c-api/type.rst:294
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see "
":c:macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"Skapa och returnera en :ref:`heap type <heap-types>` från *spec* (se "
":c:macro:`Py_TPFLAGS_HEAPTYPE`)."

#: ../../c-api/type.rst:297
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object. "
"When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""
"Metaklassen *metaclass* används för att konstruera det resulterande "
"typobjektet. När *metaclass* är ``NULL`` härleds metaklassen från *bases* "
"(eller *Py_tp_base[s]* slots om *bases* är ``NULL``, se nedan)."

#: ../../c-api/type.rst:301
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards compatibility, "
"other ``PyType_From*`` functions allow such metaclasses. They ignore "
"``tp_new``, which may result in incomplete initialization. This is "
"deprecated and in Python 3.14+ such metaclasses will not be supported.)"
msgstr ""

#: ../../c-api/type.rst:308
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"Argumentet *bases* kan användas för att ange basklasser; det kan antingen "
"vara bara en klass eller en tupel av klasser. Om *bases* är ``NULL`` används"
" istället *Py_tp_bases* slot. Om det också är ``NULL``, används *Py_tp_base*"
" slot istället. Om det också är ``NULL``, härstammar den nya typen från "
":class:`object`."

#: ../../c-api/type.rst:314
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with "
":c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"Argumentet *module* kan användas för att registrera den modul i vilken den "
"nya klassen definieras. Det måste vara ett modulobjekt eller ``NULL``. Om "
"det inte är ``NULL`` associeras modulen med den nya typen och kan senare "
"hämtas med :c:func:`PyType_GetModule`. Den associerade modulen ärvs inte av "
"underklasser utan måste anges för varje klass för sig."

#: ../../c-api/type.rst:321
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Denna funktion anropar :c:func:`PyType_Ready` på den nya typen."

#: ../../c-api/type.rst:323
msgid ""
"Note that this function does *not* fully match the behavior of calling "
":py:class:`type() <type>` or using the :keyword:`class` statement. With "
"user-provided base types or metaclasses, prefer :ref:`calling <capi-call>` "
":py:class:`type` (or the metaclass) over ``PyType_From*`` functions. "
"Specifically:"
msgstr ""
"Observera att den här funktionen *inte* helt matchar beteendet för att "
"anropa :py:class:`type() <type>` eller använda :keyword:`class`\\-satsen. "
"Med användartillhandahållna bastyper eller metaklasser, föredra :ref:`anrop "
"<capi-call>` :py:class:`type` (eller metaklassen) framför "
"``PyType_From*``\\-funktioner. Specifikt för detta:"

#: ../../c-api/type.rst:330
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be "
"set to ``type.__new__``)."
msgstr ""
":py:meth:`~object.__new__` anropas inte på den nya klassen (och den måste "
"sättas till ``type.__new__``)."

#: ../../c-api/type.rst:332
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ":py:meth:`~object.__init__` anropas inte på den nya klassen."

#: ../../c-api/type.rst:333
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ":py:meth:`~object.__init_subclass__` anropas inte på någon bas."

#: ../../c-api/type.rst:334
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ":py:meth:`~object.__set_name__` anropas inte på nya deskriptorer."

#: ../../c-api/type.rst:340
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr "Motsvarar ``PyType_FromMetaclass(NULL, module, spec, bases)``."

#: ../../c-api/type.rst:346
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL``"
" as the ``tp_doc`` slot."
msgstr ""
"Funktionen accepterar nu en enda klass som *bases*-argument och ``NULL`` som"
" ``tp_doc``\\-plats."

#: ../../c-api/type.rst:351 ../../c-api/type.rst:368
msgid ""
"The function now finds and uses a metaclass corresponding to the provided "
"base classes.  Previously, only :class:`type` instances were returned."
msgstr ""
"Funktionen hittar och använder nu en metaklass som motsvarar de angivna "
"basklasserna.  Tidigare returnerades endast :class:`type`\\-instanser."

#: ../../c-api/type.rst:354 ../../c-api/type.rst:371 ../../c-api/type.rst:387
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which "
"may result in incomplete initialization. Creating classes whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in Python 3.14+"
" it will be no longer allowed."
msgstr ""

#: ../../c-api/type.rst:362
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr "Motsvarar ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."

#: ../../c-api/type.rst:379
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr "Motsvarar ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."

#: ../../c-api/type.rst:383
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type` "
"instances were returned."
msgstr ""
"Funktionen hittar och använder nu en metaklass som motsvarar de basklasser "
"som finns i *Py_tp_base[s]* slots. Tidigare returnerades endast "
":class:`type`\\-instanser."

#: ../../c-api/type.rst:404
msgid "Structure defining a type's behavior."
msgstr "Struktur som definierar en typs beteende."

#: ../../c-api/type.rst:408
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Namn på typen, används för att ställa in :c:member:`PyTypeObject.tp_name`."

#: ../../c-api/type.rst:412
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to set "
":c:member:`PyTypeObject.tp_basicsize`."
msgstr ""
"Om positiv, anger storleken på instansen i bytes. Den används för att ställa"
" in :c:member:`PyTypeObject.tp_basicsize`."

#: ../../c-api/type.rst:415
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr "Om noll, anger att :c:member:`~PyTypeObject.tp_basicsize` ska ärvas."

#: ../../c-api/type.rst:418
msgid ""
"If negative, the absolute value specifies how much space instances of the "
"class need *in addition* to the superclass. Use "
":c:func:`PyObject_GetTypeData` to get a pointer to subclass-specific memory "
"reserved this way. For negative :c:member:`!basicsize`, Python will insert "
"padding when needed to meet :c:member:`~PyTypeObject.tp_basicsize`'s "
"alignment requirements."
msgstr ""
"Om det är negativt anger det absoluta värdet hur mycket utrymme instanser av"
" klassen behöver *utöver* superklassen. Använd "
":c:func:`PyObject_GetTypeData` för att få en pekare till underklassspecifikt"
" minne som reserverats på detta sätt. För negativa :c:member:`!basicsize`, "
"kommer Python att infoga utfyllnad när det behövs för att uppfylla "
":c:member:`~PyTypeObject.tp_basicsize`\\s anpassningskrav."

#: ../../c-api/type.rst:428
msgid "Previously, this field could not be negative."
msgstr "Tidigare kunde detta fält inte vara negativt."

#: ../../c-api/type.rst:432
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set "
":c:member:`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation for "
"caveats."
msgstr ""
"Storleken på ett element i en typ med variabel storlek, i byte. Används för "
"att ställa in :c:member:`PyTypeObject.tp_itemsize`. Se dokumentationen för "
"``tp_itemsize`` för förbehåll."

#: ../../c-api/type.rst:436
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a fixed "
"offset for variable-sized memory, which can then overlap fixed-sized memory "
"used by a subclass. To help prevent mistakes, inheriting ``itemsize`` is "
"only possible in the following situations:"
msgstr ""
"Om noll, ärvs :c:member:`~PyTypeObject.tp_itemsize`. Att utöka godtyckliga "
"klasser med variabel storlek är farligt, eftersom vissa typer använder en "
"fast offset för minne med variabel storlek, som sedan kan överlappa minne "
"med fast storlek som används av en underklass. För att hjälpa till att "
"förhindra misstag är det bara möjligt att ärva ``itemsize`` i följande "
"situationer:"

#: ../../c-api/type.rst:443
msgid ""
"The base is not variable-sized (its :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""
"Basen är inte variabel i storlek (dess "
":c:member:`~PyTypeObject.tp_itemsize`)."

#: ../../c-api/type.rst:445
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting that"
" the memory layout of the base class is known."
msgstr ""
"Den begärda :c:member:`PyType_Spec.basicsize` är positiv, vilket tyder på "
"att minneslayouten för basklassen är känd."

#: ../../c-api/type.rst:447
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that the"
" subclass does not access the instance's memory directly."
msgstr ""
"Den begärda :c:member:`PyType_Spec.basicsize` är noll, vilket tyder på att "
"underklassen inte har direkt åtkomst till instansens minne."

#: ../../c-api/type.rst:450
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr "Med flaggan :c:macro:`Py_TPFLAGS_ITEMS_AT_END`."

#: ../../c-api/type.rst:454
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Typflaggor, används för att ställa in :c:member:`PyTypeObject.tp_flags`."

#: ../../c-api/type.rst:456
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Om flaggan ``Py_TPFLAGS_HEAPTYPE`` inte är satt, sätter "
":c:func:`PyType_FromSpecWithBases` den automatiskt."

#: ../../c-api/type.rst:461
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Array av :c:type:`PyType_Slot`\\-strukturer. Avslutas med det speciella "
"slot-värdet ``{0, NULL}``."

#: ../../c-api/type.rst:464
msgid "Each slot ID should be specified at most once."
msgstr "Varje slot-ID får anges högst en gång."

#: ../../c-api/type.rst:474
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Struktur som definierar valfri funktionalitet för en typ och som innehåller "
"ett slot-ID och en värdepekare."

#: ../../c-api/type.rst:479
msgid "A slot ID."
msgstr "Ett slot-ID."

#: ../../c-api/type.rst:481
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"Slot-ID:n namnges som fältnamnen i strukturerna :c:type:`PyTypeObject`, "
":c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, "
":c:type:`PyMappingMethods` och :c:type:`PyAsyncMethods` med ett extra prefix"
" ``Py_``. Använd till exempel:"

#: ../../c-api/type.rst:487
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ""
"``Py_tp_dealloc`` för att ställa in :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:488
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` för att ställa in :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:489
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` för att ställa in :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:491
msgid ""
"The following “offset” fields cannot be set using :c:type:`PyType_Slot`:"
msgstr ""
"Följande \"offset\"-fält kan inte ställas in med hjälp av "
":c:type:`PyType_Slot`:"

#: ../../c-api/type.rst:493
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (använd "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` istället om möjligt)"

#: ../../c-api/type.rst:495
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (använd "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` istället om möjligt)"

#: ../../c-api/type.rst:497
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"`` in :ref:`PyMemberDef <pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (använd "
"``\"__vectorcalloffset__\"`` i :ref:`PyMemberDef <pymemberdef-offsets>`)"

#: ../../c-api/type.rst:501
msgid ""
"If it is not possible to switch to a ``MANAGED`` flag (for example, for "
"vectorcall or to support Python older than 3.12), specify the offset in "
":c:member:`Py_tp_members <PyTypeObject.tp_members>`. See :ref:`PyMemberDef "
"documentation <pymemberdef-offsets>` for details."
msgstr ""
"Om det inte är möjligt att byta till en ``MANAGED`` flagga (t.ex. för "
"vectorcall eller för att stödja Python äldre än 3.12), ange offset i "
":c:member:`Py_tp_members <PyTypeObject.tp_members>`. Se :ref:`PyMemberDef-"
"dokumentation <pymemberdef-offsets>` för detaljer."

#: ../../c-api/type.rst:507
msgid "The following fields cannot be set at all when creating a heap type:"
msgstr ""

#: ../../c-api/type.rst:509
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall` (use "
":c:member:`~PyTypeObject.tp_new` and/or :c:member:`~PyTypeObject.tp_init`)"
msgstr ""

#: ../../c-api/type.rst:513
msgid ""
"Internal fields: :c:member:`~PyTypeObject.tp_dict`, "
":c:member:`~PyTypeObject.tp_mro`, :c:member:`~PyTypeObject.tp_cache`, "
":c:member:`~PyTypeObject.tp_subclasses`, and "
":c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""

#: ../../c-api/type.rst:520
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of "
":c:func:`PyType_FromSpecWithBases` instead."
msgstr ""
"Att ställa in :c:data:`Py_tp_bases` eller :c:data:`Py_tp_base` kan vara "
"problematiskt på vissa plattformar. För att undvika problem, använd "
"*bases*-argumentet i :c:func:`PyType_FromSpecWithBases` istället."

#: ../../c-api/type.rst:525
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""
"Slots i :c:type:`PyBufferProcs` kan ställas in i det obegränsade API:et."

#: ../../c-api/type.rst:528
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` are now available under the "
":ref:`limited API <limited-c-api>`."
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` och "
":c:member:`~PyBufferProcs.bf_releasebuffer` är nu tillgängliga under "
":ref:`limited API <limited-c-api>`."

#: ../../c-api/type.rst:535
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""
"Det önskade värdet på platsen. I de flesta fall är detta en pekare till en "
"funktion."

#: ../../c-api/type.rst:538
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr ""

#: ../../c-api/type.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "type"
