# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/module.rst:6
msgid "Module Objects"
msgstr "Modulobjekt"

#: ../../c-api/module.rst:15
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""
"Denna instans av :c:type:`PyTypeObject` representerar Pythons modultyp.  "
"Detta exponeras för Python-program som ``types.ModuleType``."

#: ../../c-api/module.rst:21
msgid ""
"Return true if *p* is a module object, or a subtype of a module object. This "
"function always succeeds."
msgstr ""
"Returnerar true om *p* är ett modulobjekt eller en subtyp av ett "
"modulobjekt. Denna funktion lyckas alltid."

#: ../../c-api/module.rst:27
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`.  This function always succeeds."
msgstr ""
"Returnerar true om *p* är ett modulobjekt, men inte en subtyp av :c:data:"
"`PyModule_Type`.  Denna funktion lyckas alltid."

#: ../../c-api/module.rst:40
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. The module's :attr:`__name__`, :attr:`__doc__`, :attr:`__package__`, "
"and :attr:`__loader__` attributes are filled in (all but :attr:`__name__` "
"are set to ``None``); the caller is responsible for providing a :attr:"
"`__file__` attribute."
msgstr ""

#: ../../c-api/module.rst:48
msgid ":attr:`__package__` and :attr:`__loader__` are set to ``None``."
msgstr ""

#: ../../c-api/module.rst:54
msgid ""
"Similar to :c:func:`PyModule_NewObject`, but the name is a UTF-8 encoded "
"string instead of a Unicode object."
msgstr ""
"Liknar :c:func:`PyModule_NewObject`, men namnet är en UTF-8-kodad sträng i "
"stället för ett Unicode-objekt."

#: ../../c-api/module.rst:62
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`~object.__dict__` attribute of the module "
"object. If *module* is not a module object (or a subtype of a module "
"object), :exc:`SystemError` is raised and ``NULL`` is returned."
msgstr ""
"Returnerar det ordboksobjekt som implementerar *modul*:s namnrymd; detta "
"objekt är detsamma som :attr:`~object.__dict__`\\-attributet för "
"modulobjektet. Om *module* inte är ett modulobjekt (eller en subtyp av ett "
"modulobjekt), avges :exc:`SystemError` och ``NULL`` returneras."

#: ../../c-api/module.rst:67
msgid ""
"It is recommended extensions use other ``PyModule_*`` and ``PyObject_*`` "
"functions rather than directly manipulate a module's :attr:`~object."
"__dict__`."
msgstr ""
"Det rekommenderas att använda andra ``PyModule_*`` och ``PyObject_*`` "
"funktioner snarare än att direkt manipulera en moduls :attr:`~object."
"__dict__`."

#: ../../c-api/module.rst:78
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and ``NULL`` is "
"returned."
msgstr ""

#: ../../c-api/module.rst:86
msgid ""
"Similar to :c:func:`PyModule_GetNameObject` but return the name encoded to "
"``'utf-8'``."
msgstr ""
"Liknar :c:func:`PyModule_GetNameObject` men returnerar namnet kodat till "
"``'utf-8'``."

#: ../../c-api/module.rst:91
msgid ""
"Return the \"state\" of the module, that is, a pointer to the block of "
"memory allocated at module creation time, or ``NULL``.  See :c:member:"
"`PyModuleDef.m_size`."
msgstr ""
"Returnerar modulens \"tillstånd\", det vill säga en pekare till det "
"minnesblock som allokerades när modulen skapades, eller ``NULL``.  Se :c:"
"member:`PyModuleDef.m_size`."

#: ../../c-api/module.rst:98
msgid ""
"Return a pointer to the :c:type:`PyModuleDef` struct from which the module "
"was created, or ``NULL`` if the module wasn't created from a definition."
msgstr ""
"Returnerar en pekare till :c:type:`PyModuleDef`\\-strukturen från vilken "
"modulen skapades, eller ``NULL`` om modulen inte skapades från en definition."

#: ../../c-api/module.rst:108
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"unicode string, raise :exc:`SystemError` and return ``NULL``; otherwise "
"return a reference to a Unicode object."
msgstr ""

#: ../../c-api/module.rst:118
msgid ""
"Similar to :c:func:`PyModule_GetFilenameObject` but return the filename "
"encoded to 'utf-8'."
msgstr ""
"Liknar :c:func:`PyModule_GetFilenameObject` men returnerar filnamnet kodat "
"till 'utf-8'."

#: ../../c-api/module.rst:121
msgid ""
":c:func:`PyModule_GetFilename` raises :c:type:`UnicodeEncodeError` on "
"unencodable filenames, use :c:func:`PyModule_GetFilenameObject` instead."
msgstr ""

#: ../../c-api/module.rst:129
msgid "Initializing C modules"
msgstr ""

#: ../../c-api/module.rst:131
msgid ""
"Modules objects are usually created from extension modules (shared libraries "
"which export an initialization function), or compiled-in modules (where the "
"initialization function is added using :c:func:`PyImport_AppendInittab`). "
"See :ref:`building` or :ref:`extending-with-embedding` for details."
msgstr ""

#: ../../c-api/module.rst:136
msgid ""
"The initialization function can either pass a module definition instance to :"
"c:func:`PyModule_Create`, and return the resulting module object, or request "
"\"multi-phase initialization\" by returning the definition struct itself."
msgstr ""

#: ../../c-api/module.rst:142
msgid ""
"The module definition struct, which holds all information needed to create a "
"module object. There is usually only one statically initialized variable of "
"this type for each module."
msgstr ""

#: ../../c-api/module.rst:148
msgid "Always initialize this member to :const:`PyModuleDef_HEAD_INIT`."
msgstr ""

#: ../../c-api/module.rst:152
msgid "Name for the new module."
msgstr "Namn för den nya modulen."

#: ../../c-api/module.rst:156
msgid ""
"Docstring for the module; usually a docstring variable created with :c:macro:"
"`PyDoc_STRVAR` is used."
msgstr ""
"Docstring för modulen; vanligtvis används en docstring-variabel som skapats "
"med :c:macro:`PyDoc_STRVAR`."

#: ../../c-api/module.rst:161
msgid ""
"Module state may be kept in a per-module memory area that can be retrieved "
"with :c:func:`PyModule_GetState`, rather than in static globals. This makes "
"modules safe for use in multiple sub-interpreters."
msgstr ""
"Modulstatus kan förvaras i ett minnesområde per modul som kan hämtas med :c:"
"func:`PyModule_GetState`, i stället för i statiska globaler. Detta gör "
"moduler säkra för användning i flera undertolkare."

#: ../../c-api/module.rst:165
msgid ""
"This memory area is allocated based on *m_size* on module creation, and "
"freed when the module object is deallocated, after the :c:member:`m_free` "
"function has been called, if present."
msgstr ""

#: ../../c-api/module.rst:169
msgid ""
"Setting ``m_size`` to ``-1`` means that the module does not support sub-"
"interpreters, because it has global state."
msgstr ""

#: ../../c-api/module.rst:172
msgid ""
"Setting it to a non-negative value means that the module can be re-"
"initialized and specifies the additional amount of memory it requires for "
"its state. Non-negative ``m_size`` is required for multi-phase "
"initialization."
msgstr ""

#: ../../c-api/module.rst:177
msgid "See :PEP:`3121` for more details."
msgstr "Se :PEP:`3121` för mer information."

#: ../../c-api/module.rst:181
msgid ""
"A pointer to a table of module-level functions, described by :c:type:"
"`PyMethodDef` values.  Can be ``NULL`` if no functions are present."
msgstr ""
"En pekare till en tabell med funktioner på modulnivå, beskrivna av :c:type:"
"`PyMethodDef`\\-värden.  Kan vara ``NULL`` om inga funktioner finns."

#: ../../c-api/module.rst:186
msgid ""
"An array of slot definitions for multi-phase initialization, terminated by a "
"``{0, NULL}`` entry. When using single-phase initialization, *m_slots* must "
"be ``NULL``."
msgstr ""

#: ../../c-api/module.rst:192
msgid ""
"Prior to version 3.5, this member was always set to ``NULL``, and was "
"defined as:"
msgstr ""
"Före version 3.5 var denna medlem alltid inställd på ``NULL``, och "
"definierades som:"

#: ../../c-api/module.rst:199
msgid ""
"A traversal function to call during GC traversal of the module object, or "
"``NULL`` if not needed."
msgstr ""
"En traversalfunktion som ska anropas under GC-traversal av modulobjektet, "
"eller ``NULL`` om den inte behövs."

#: ../../c-api/module.rst:202 ../../c-api/module.rst:217
#: ../../c-api/module.rst:238
msgid ""
"This function is not called if the module state was requested but is not "
"allocated yet. This is the case immediately after the module is created and "
"before the module is executed (:c:data:`Py_mod_exec` function). More "
"precisely, this function is not called if :c:member:`m_size` is greater than "
"0 and the module state (as returned by :c:func:`PyModule_GetState`) is "
"``NULL``."
msgstr ""

#: ../../c-api/module.rst:209 ../../c-api/module.rst:230
#: ../../c-api/module.rst:245
msgid "No longer called before the module state is allocated."
msgstr "Anropas inte längre innan modultillståndet har allokerats."

#: ../../c-api/module.rst:214
msgid ""
"A clear function to call during GC clearing of the module object, or "
"``NULL`` if not needed."
msgstr ""
"En clear-funktion som ska anropas vid GC-rensning av modulobjektet, eller "
"``NULL`` om den inte behövs."

#: ../../c-api/module.rst:224
msgid ""
"Like :c:member:`PyTypeObject.tp_clear`, this function is not *always* called "
"before a module is deallocated. For example, when reference counting is "
"enough to determine that an object is no longer used, the cyclic garbage "
"collector is not involved and :c:member:`~PyModuleDef.m_free` is called "
"directly."
msgstr ""
"Precis som :c:member:`PyTypeObject.tp_clear` anropas inte den här funktionen "
"*alltid* innan en modul avallokeras. Till exempel, när referensräkning är "
"tillräckligt för att avgöra att ett objekt inte längre används, är den "
"cykliska skräpsamlaren inte inblandad och :c:member:`~PyModuleDef.m_free` "
"anropas direkt."

#: ../../c-api/module.rst:235
msgid ""
"A function to call during deallocation of the module object, or ``NULL`` if "
"not needed."
msgstr ""
"En funktion som ska anropas vid avallokering av modulobjektet, eller "
"``NULL`` om den inte behövs."

#: ../../c-api/module.rst:249
msgid "Single-phase initialization"
msgstr ""

#: ../../c-api/module.rst:251
msgid ""
"The module initialization function may create and return the module object "
"directly. This is referred to as \"single-phase initialization\", and uses "
"one of the following two module creation functions:"
msgstr ""

#: ../../c-api/module.rst:257
msgid ""
"Create a new module object, given the definition in *def*.  This behaves "
"like :c:func:`PyModule_Create2` with *module_api_version* set to :const:"
"`PYTHON_API_VERSION`."
msgstr ""

#: ../../c-api/module.rst:264
msgid ""
"Create a new module object, given the definition in *def*, assuming the API "
"version *module_api_version*.  If that version does not match the version of "
"the running interpreter, a :exc:`RuntimeWarning` is emitted."
msgstr ""
"Skapa ett nytt modulobjekt med definitionen i *def* och API-versionen "
"*module_api_version*.  Om den versionen inte stämmer överens med versionen i "
"den tolk som körs, skickas en :exc:`RuntimeWarning` ut."

#: ../../c-api/module.rst:270
msgid ""
"Most uses of this function should be using :c:func:`PyModule_Create` "
"instead; only use this if you are sure you need it."
msgstr ""
"De flesta användningar av denna funktion bör använda :c:func:"
"`PyModule_Create` istället; använd endast denna om du är säker på att du "
"behöver den."

#: ../../c-api/module.rst:273
msgid ""
"Before it is returned from in the initialization function, the resulting "
"module object is typically populated using functions like :c:func:"
"`PyModule_AddObjectRef`."
msgstr ""

#: ../../c-api/module.rst:279
msgid "Multi-phase initialization"
msgstr "Initialisering i flera faser"

#: ../../c-api/module.rst:281
msgid ""
"An alternate way to specify extensions is to request \"multi-phase "
"initialization\". Extension modules created this way behave more like Python "
"modules: the initialization is split between the *creation phase*, when the "
"module object is created, and the *execution phase*, when it is populated. "
"The distinction is similar to the :py:meth:`__new__` and :py:meth:`__init__` "
"methods of classes."
msgstr ""

#: ../../c-api/module.rst:288
msgid ""
"Unlike modules created using single-phase initialization, these modules are "
"not singletons: if the *sys.modules* entry is removed and the module is re-"
"imported, a new module object is created, and the old module is subject to "
"normal garbage collection -- as with Python modules. By default, multiple "
"modules created from the same definition should be independent: changes to "
"one should not affect the others. This means that all state should be "
"specific to the module object (using e.g. using :c:func:"
"`PyModule_GetState`), or its contents (such as the module's :attr:`__dict__` "
"or individual classes created with :c:func:`PyType_FromSpec`)."
msgstr ""

#: ../../c-api/module.rst:298
msgid ""
"All modules created using multi-phase initialization are expected to "
"support :ref:`sub-interpreters <sub-interpreter-support>`. Making sure "
"multiple modules are independent is typically enough to achieve this."
msgstr ""

#: ../../c-api/module.rst:302
msgid ""
"To request multi-phase initialization, the initialization function "
"(PyInit_modulename) returns a :c:type:`PyModuleDef` instance with non-empty :"
"c:member:`~PyModuleDef.m_slots`. Before it is returned, the ``PyModuleDef`` "
"instance must be initialized with the following function:"
msgstr ""

#: ../../c-api/module.rst:309
msgid ""
"Ensures a module definition is a properly initialized Python object that "
"correctly reports its type and reference count."
msgstr ""

#: ../../c-api/module.rst:312
msgid "Returns *def* cast to ``PyObject*``, or ``NULL`` if an error occurred."
msgstr ""

#: ../../c-api/module.rst:316
msgid ""
"The *m_slots* member of the module definition must point to an array of "
"``PyModuleDef_Slot`` structures:"
msgstr ""

#: ../../c-api/module.rst:323
msgid "A slot ID, chosen from the available values explained below."
msgstr ""
"Ett slot-ID, som väljs bland de tillgängliga värden som beskrivs nedan."

#: ../../c-api/module.rst:327
msgid "Value of the slot, whose meaning depends on the slot ID."
msgstr "Värde för slot, vars betydelse beror på slot-ID."

#: ../../c-api/module.rst:331
msgid "The *m_slots* array must be terminated by a slot with id 0."
msgstr ""

#: ../../c-api/module.rst:333
msgid "The available slot types are:"
msgstr "De tillgängliga slot-typerna är:"

#: ../../c-api/module.rst:337
msgid ""
"Specifies a function that is called to create the module object itself. The "
"*value* pointer of this slot must point to a function of the signature:"
msgstr ""
"Anger en funktion som anropas för att skapa själva modulobjektet. Poängaren "
"*value* i denna slot måste peka på en funktion med samma signatur:"

#: ../../c-api/module.rst:342
msgid ""
"The function receives a :py:class:`~importlib.machinery.ModuleSpec` "
"instance, as defined in :PEP:`451`, and the module definition. It should "
"return a new module object, or set an error and return ``NULL``."
msgstr ""
"Funktionen tar emot en instans av :py:class:`~importlib.machinery."
"ModuleSpec`, enligt definitionen i :PEP:`451`, och moduldefinitionen. Den "
"bör returnera ett nytt modulobjekt, eller ange ett fel och returnera "
"``NULL``."

#: ../../c-api/module.rst:347
msgid ""
"This function should be kept minimal. In particular, it should not call "
"arbitrary Python code, as trying to import the same module again may result "
"in an infinite loop."
msgstr ""
"Denna funktion bör hållas minimal. I synnerhet bör den inte anropa "
"godtycklig Python-kod, eftersom försök att importera samma modul igen kan "
"resultera i en oändlig loop."

#: ../../c-api/module.rst:351
msgid ""
"Multiple ``Py_mod_create`` slots may not be specified in one module "
"definition."
msgstr "Flera ``Py_mod_create``\\-platser får inte anges i en moduldefinition."

#: ../../c-api/module.rst:354
msgid ""
"If ``Py_mod_create`` is not specified, the import machinery will create a "
"normal module object using :c:func:`PyModule_New`. The name is taken from "
"*spec*, not the definition, to allow extension modules to dynamically adjust "
"to their place in the module hierarchy and be imported under different names "
"through symlinks, all while sharing a single module definition."
msgstr ""
"Om ``Py_mod_create`` inte anges kommer importmaskineriet att skapa ett "
"normalt modulobjekt med hjälp av :c:func:`PyModule_New`. Namnet är taget "
"från *spec*, inte definitionen, för att göra det möjligt för tilläggsmoduler "
"att dynamiskt anpassa sig till sin plats i modulhierarkin och importeras "
"under olika namn genom symlinks, samtidigt som de delar en enda "
"moduldefinition."

#: ../../c-api/module.rst:360
msgid ""
"There is no requirement for the returned object to be an instance of :c:type:"
"`PyModule_Type`. Any type can be used, as long as it supports setting and "
"getting import-related attributes. However, only ``PyModule_Type`` instances "
"may be returned if the ``PyModuleDef`` has non-``NULL`` ``m_traverse``, "
"``m_clear``, ``m_free``; non-zero ``m_size``; or slots other than "
"``Py_mod_create``."
msgstr ""
"Det finns inget krav på att det returnerade objektet ska vara en instans av :"
"c:type:`PyModule_Type`. Vilken typ som helst kan användas, så länge den "
"stöder inställning och hämtning av importrelaterade attribut. Dock kan "
"endast ``PyModule_Type`` instanser returneras om ``PyModuleDef`` har icke-"
"``NULL`` ``m_traverse``, ``m_clear``, ``m_free``; icke- noll ``m_size``; "
"eller andra slots än ``Py_mod_create``."

#: ../../c-api/module.rst:369
msgid ""
"Specifies a function that is called to *execute* the module. This is "
"equivalent to executing the code of a Python module: typically, this "
"function adds classes and constants to the module. The signature of the "
"function is:"
msgstr ""
"Specificerar en funktion som anropas för att *exekvera* modulen. Detta "
"motsvarar att exekvera koden i en Python-modul: vanligtvis lägger denna "
"funktion till klasser och konstanter i modulen. Funktionens signatur är:"

#: ../../c-api/module.rst:376
msgid ""
"If multiple ``Py_mod_exec`` slots are specified, they are processed in the "
"order they appear in the *m_slots* array."
msgstr ""
"Om flera ``Py_mod_exec``\\-slots anges, behandlas de i den ordning de visas "
"i *m_slots*-arrayen."

#: ../../c-api/module.rst:379
msgid "See :PEP:`489` for more details on multi-phase initialization."
msgstr ""

#: ../../c-api/module.rst:382
msgid "Low-level module creation functions"
msgstr ""

#: ../../c-api/module.rst:384
msgid ""
"The following functions are called under the hood when using multi-phase "
"initialization. They can be used directly, for example when creating module "
"objects dynamically. Note that both ``PyModule_FromDefAndSpec`` and "
"``PyModule_ExecDef`` must be called to fully initialize a module."
msgstr ""

#: ../../c-api/module.rst:391
msgid ""
"Create a new module object, given the definition in *def* and the ModuleSpec "
"*spec*.  This behaves like :c:func:`PyModule_FromDefAndSpec2` with "
"*module_api_version* set to :const:`PYTHON_API_VERSION`."
msgstr ""

#: ../../c-api/module.rst:399
msgid ""
"Create a new module object, given the definition in *def* and the ModuleSpec "
"*spec*, assuming the API version *module_api_version*. If that version does "
"not match the version of the running interpreter, a :exc:`RuntimeWarning` is "
"emitted."
msgstr ""
"Skapar ett nytt modulobjekt, givet definitionen i *def* och ModuleSpec "
"*spec*, med API-versionen *module_api_version*. Om den versionen inte "
"stämmer överens med versionen i den tolk som körs, skickas en :exc:"
"`RuntimeWarning` ut."

#: ../../c-api/module.rst:406
msgid ""
"Most uses of this function should be using :c:func:`PyModule_FromDefAndSpec` "
"instead; only use this if you are sure you need it."
msgstr ""
"De flesta användningar av denna funktion bör använda :c:func:"
"`PyModule_FromDefAndSpec` istället; använd endast denna om du är säker på "
"att du behöver den."

#: ../../c-api/module.rst:413
msgid "Process any execution slots (:c:data:`Py_mod_exec`) given in *def*."
msgstr ""
"Behandla alla exekveringsplatser (:c:data:`Py_mod_exec`) som anges i *def*."

#: ../../c-api/module.rst:419
msgid ""
"Set the docstring for *module* to *docstring*. This function is called "
"automatically when creating a module from ``PyModuleDef``, using either "
"``PyModule_Create`` or ``PyModule_FromDefAndSpec``."
msgstr ""

#: ../../c-api/module.rst:428
msgid ""
"Add the functions from the ``NULL`` terminated *functions* array to "
"*module*. Refer to the :c:type:`PyMethodDef` documentation for details on "
"individual entries (due to the lack of a shared module namespace, module "
"level \"functions\" implemented in C typically receive the module as their "
"first parameter, making them similar to instance methods on Python classes). "
"This function is called automatically when creating a module from "
"``PyModuleDef``, using either ``PyModule_Create`` or "
"``PyModule_FromDefAndSpec``."
msgstr ""

#: ../../c-api/module.rst:440
msgid "Support functions"
msgstr "Stödfunktioner"

#: ../../c-api/module.rst:442
msgid ""
"The module initialization function (if using single phase initialization) or "
"a function called from a module execution slot (if using multi-phase "
"initialization), can use the following functions to help initialize the "
"module state:"
msgstr ""

#: ../../c-api/module.rst:449
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function."
msgstr ""
"Lägg till ett objekt till *modul* som *namn*.  Detta är en "
"bekvämlighetsfunktion som kan användas från modulens initialiseringsfunktion."

#: ../../c-api/module.rst:452
msgid ""
"On success, return ``0``. On error, raise an exception and return ``-1``."
msgstr ""
"Vid framgång, returnera ``0``. Vid fel, skapa ett undantag och returnera "
"``\\-1``."

#: ../../c-api/module.rst:454
msgid ""
"Return ``NULL`` if *value* is ``NULL``. It must be called with an exception "
"raised in this case."
msgstr ""

#: ../../c-api/module.rst:457 ../../c-api/module.rst:506
msgid "Example usage::"
msgstr "Exempel på användning::"

#: ../../c-api/module.rst:471 ../../c-api/module.rst:524
msgid ""
"The example can also be written without checking explicitly if *obj* is "
"``NULL``::"
msgstr ""
"Exemplet kan också skrivas utan att uttryckligen kontrollera om *obj* är "
"``NULL``::"

#: ../../c-api/module.rst:483 ../../c-api/module.rst:540
msgid ""
"Note that ``Py_XDECREF()`` should be used instead of ``Py_DECREF()`` in this "
"case, since *obj* can be ``NULL``."
msgstr ""
"Observera att ``Py_XDECREF()`` bör användas i stället för ``Py_DECREF()`` i "
"detta fall, eftersom *obj* kan vara ``NULL``."

#: ../../c-api/module.rst:491
msgid ""
"Similar to :c:func:`PyModule_AddObjectRef`, but steals a reference to "
"*value* on success (if it returns ``0``)."
msgstr ""
"Liknar :c:func:`PyModule_AddObjectRef`, men stjäl en referens till *värde* "
"vid framgång (om den returnerar ``0``)."

#: ../../c-api/module.rst:494
msgid ""
"The new :c:func:`PyModule_AddObjectRef` function is recommended, since it is "
"easy to introduce reference leaks by misusing the :c:func:"
"`PyModule_AddObject` function."
msgstr ""

#: ../../c-api/module.rst:500
msgid ""
"Unlike other functions that steal references, ``PyModule_AddObject()`` only "
"releases the reference to *value* **on success**."
msgstr ""
"Till skillnad från andra funktioner som stjäl referenser, släpper "
"``PyModule_AddObject()`` bara referensen till *värde* **vid framgång**."

#: ../../c-api/module.rst:503
msgid ""
"This means that its return value must be checked, and calling code must :c:"
"func:`Py_DECREF` *value* manually on error."
msgstr ""

#: ../../c-api/module.rst:546
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:553
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be ``NULL``-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:560
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:568
msgid "Add a string constant to *module*."
msgstr "Lägg till en strängkonstant i *modul*."

#: ../../c-api/module.rst:572
msgid ""
"Add a type object to *module*. The type object is finalized by calling "
"internally :c:func:`PyType_Ready`. The name of the type object is taken from "
"the last component of :c:member:`~PyTypeObject.tp_name` after dot. Return "
"``-1`` on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:582
msgid "Module lookup"
msgstr ""

#: ../../c-api/module.rst:584
msgid ""
"Single-phase initialization creates singleton modules that can be looked up "
"in the context of the current interpreter. This allows the module object to "
"be retrieved later with only a reference to the module definition."
msgstr ""

#: ../../c-api/module.rst:588
msgid ""
"These functions will not work on modules created using multi-phase "
"initialization, since multiple such modules can be created from a single "
"definition."
msgstr ""
"Dessa funktioner fungerar inte på moduler som skapats med hjälp av "
"flerfasinitialisering, eftersom flera sådana moduler kan skapas från en enda "
"definition."

#: ../../c-api/module.rst:593
msgid ""
"Returns the module object that was created from *def* for the current "
"interpreter. This method requires that the module object has been attached "
"to the interpreter state with :c:func:`PyState_AddModule` beforehand. In "
"case the corresponding module object is not found or has not been attached "
"to the interpreter state yet, it returns ``NULL``."
msgstr ""
"Returnerar det modulobjekt som skapades från *def* för den aktuella tolken. "
"Denna metod kräver att modulobjektet har kopplats till tolktillståndet med :"
"c:func:`PyState_AddModule` i förväg. Om motsvarande modulobjekt inte hittas "
"eller inte har kopplats till tolktillståndet ännu, returnerar den ``NULL``."

#: ../../c-api/module.rst:600
msgid ""
"Attaches the module object passed to the function to the interpreter state. "
"This allows the module object to be accessible via :c:func:"
"`PyState_FindModule`."
msgstr ""
"Kopplar modulobjektet som skickas till funktionen till tolkens tillstånd. "
"Detta gör att modulobjektet kan nås via :c:func:`PyState_FindModule`."

#: ../../c-api/module.rst:603
msgid "Only effective on modules created using single-phase initialization."
msgstr "Gäller endast för moduler som skapats med enfasinitialisering."

#: ../../c-api/module.rst:605
msgid ""
"Python calls ``PyState_AddModule`` automatically after importing a module, "
"so it is unnecessary (but harmless) to call it from module initialization "
"code. An explicit call is needed only if the module's own init code "
"subsequently calls ``PyState_FindModule``. The function is mainly intended "
"for implementing alternative import mechanisms (either by calling it "
"directly, or by referring to its implementation for details of the required "
"state updates)."
msgstr ""

#: ../../c-api/module.rst:613 ../../c-api/module.rst:624
msgid "The caller must hold the GIL."
msgstr ""

#: ../../c-api/module.rst:615
msgid "Return 0 on success or -1 on failure."
msgstr ""

#: ../../c-api/module.rst:621
msgid ""
"Removes the module object created from *def* from the interpreter state. "
"Return 0 on success or -1 on failure."
msgstr ""
