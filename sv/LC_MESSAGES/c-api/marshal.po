# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "Stöd för datahantering"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"Dessa rutiner gör det möjligt för C-kod att arbeta med serialiserade objekt "
"som använder samma dataformat som modulen :mod:`marshal`.  Det finns "
"funktioner för att skriva data till serialiseringsformatet och ytterligare "
"funktioner som kan användas för att läsa tillbaka data.  Filer som används "
"för att lagra marshallade data måste öppnas i binärt läge."

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "Numeriska värden lagras med den minst signifikanta byten först."

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type.  *version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:28 ../../c-api/marshal.rst:36
msgid ""
"This function can fail, in which case it sets the error indicator. Use :c:"
"func:`PyErr_Occurred` to check for that."
msgstr ""
"Den här funktionen kan misslyckas, i vilket fall den anger felindikatorn. "
"Använd :c:func:`PyErr_Occurred` för att kontrollera detta."

#: ../../c-api/marshal.rst:33
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""
"Överför ett Python-objekt, *värde*, till *fil*. *version* anger filformatet."

#: ../../c-api/marshal.rst:41
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""
"Returnerar ett bytesobjekt som innehåller den marshallade representationen "
"av *värde*. *version* anger filformatet."

#: ../../c-api/marshal.rst:45
msgid "The following functions allow marshalled values to be read back in."
msgstr ""
"Följande funktioner gör det möjligt att läsa in marshallade värden igen."

#: ../../c-api/marshal.rst:50
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""

#: ../../c-api/marshal.rst:54 ../../c-api/marshal.rst:64
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""
"Vid fel, anger lämpligt undantag (:exc:`EOFError`) och returnerar ``\\-1``."

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:type:`short`."
msgstr ""

#: ../../c-api/marshal.rst:70
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE*` opened for "
"reading."
msgstr ""

#: ../../c-api/marshal.rst:73 ../../c-api/marshal.rst:87
#: ../../c-api/marshal.rst:96
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"Vid fel, anger lämpligt undantag (:exc:`EOFError`, :exc:`ValueError` eller :"
"exc:`TypeError`) och returnerar ``NULL``."

#: ../../c-api/marshal.rst:79
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"Returnerar ett Python-objekt från dataströmmen i en bytebuffert som "
"innehåller *len* bytes som pekas ut av *data*."
