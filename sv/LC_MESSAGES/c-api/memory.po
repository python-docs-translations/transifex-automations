# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/memory.rst:8
msgid "Memory Management"
msgstr "Minneshantering"

#: ../../c-api/memory.rst:17
msgid "Overview"
msgstr "Översikt"

#: ../../c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""
"Minneshantering i Python innebär en privat hög som innehåller alla Python-"
"objekt och datastrukturer. Hanteringen av denna privata hög sköts internt av"
" *Pythons minneshanterare*.  Pythons minneshanterare har olika komponenter "
"som hanterar olika aspekter av dynamisk lagringshantering, t.ex. delning, "
"segmentering, förallokering eller cachning."

#: ../../c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""
"På den lägsta nivån ser en råminnesallokerare till att det finns "
"tillräckligt med utrymme i den privata heapen för att lagra alla Python-"
"relaterade data genom att interagera med operativsystemets minneshanterare. "
"Utöver råminnesallokeringen arbetar flera objektspecifika allokeringar på "
"samma hög och implementerar olika minneshanteringspolicyer som är anpassade "
"till varje objekttyps särdrag. Exempelvis hanteras heltalsobjekt annorlunda "
"i heapen än strängar, tupler eller dictionaries eftersom heltal innebär "
"olika lagringskrav och avvägningar mellan hastighet och utrymme. Pythons "
"minneshanterare delegerar således en del av arbetet till de objektspecifika "
"allokeringarna, men ser till att de senare arbetar inom gränserna för den "
"privata heapen."

#: ../../c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if they regularly manipulate object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other"
" internal buffers is performed on demand by the Python memory manager "
"through the Python/C API functions listed in this document."
msgstr ""
"Det är viktigt att förstå att hanteringen av Pythons heap utförs av tolken "
"själv och att användaren inte har någon kontroll över den, även om de "
"regelbundet manipulerar objektpekare till minnesblock inuti heapen.  "
"Allokeringen av heaputrymme för Python-objekt och andra interna buffertar "
"utförs på begäran av Pythons minneshanterare genom de Python/C API-"
"funktioner som listas i detta dokument."

#: ../../c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate on"
" Python objects with the functions exported by the C library: "
":c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  "
"This will result in  mixed calls between the C allocator and the Python "
"memory manager with fatal consequences, because they implement different "
"algorithms and operate on different heaps.  However, one may safely allocate"
" and release memory blocks with the C library allocator for individual "
"purposes, as shown in the following example::"
msgstr ""
"För att undvika minneskorruption bör författare av tillägg aldrig försöka "
"använda Python-objekt med de funktioner som exporteras av C-biblioteket: "
":c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` och :c:func:`free`.  "
"Detta kommer att resultera i blandade anrop mellan C-allokatorn och Pythons "
"minneshanterare med fatala konsekvenser, eftersom de implementerar olika "
"algoritmer och arbetar på olika heaps.  Man kan dock på ett säkert sätt "
"allokera och frigöra minnesblock med C-bibliotekets allokator för "
"individuella ändamål, som visas i följande exempel::"

#: ../../c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the bytes object returned as a result."
msgstr ""
"I det här exemplet hanteras minnesbegäran för I/O-bufferten av "
"C-bibliotekets allokator. Pythons minneshanterare är endast involverad i "
"allokeringen av bytesobjektet som returneras som ett resultat."

#: ../../c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used"
" exclusively for internal, highly-specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

#: ../../c-api/memory.rst:88
msgid ""
"The :envvar:`PYTHONMALLOC` environment variable can be used to configure the"
" memory allocators used by Python."
msgstr ""
"Miljövariabeln :envvar:`PYTHONMALLOC` kan användas för att konfigurera de "
"minnesallokatorer som används av Python."

#: ../../c-api/memory.rst:91
msgid ""
"The :envvar:`PYTHONMALLOCSTATS` environment variable can be used to print "
"statistics of the :ref:`pymalloc memory allocator <pymalloc>` every time a "
"new pymalloc object arena is created, and on shutdown."
msgstr ""
"Miljövariabeln :envvar:`PYTHONMALLOCSTATS` kan användas för att skriva ut "
"statistik för :ref:`pymalloc memory allocator <pymalloc>` varje gång en ny "
"pymalloc-objektarena skapas och vid avstängning."

#: ../../c-api/memory.rst:97
msgid "Raw Memory Interface"
msgstr "Gränssnitt för råminne"

#: ../../c-api/memory.rst:99
msgid ""
"The following function sets are wrappers to the system allocator. These "
"functions are thread-safe, the :term:`GIL <global interpreter lock>` does "
"not need to be held."
msgstr ""

#: ../../c-api/memory.rst:103
msgid ""
"The :ref:`default raw memory allocator <default-memory-allocators>` uses the"
" following functions: :c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` "
"and :c:func:`free`; call ``malloc(1)`` (or ``calloc(1, 1)``) when requesting"
" zero bytes."
msgstr ""

#: ../../c-api/memory.rst:112 ../../c-api/memory.rst:183
#: ../../c-api/memory.rst:285
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void*` to the "
"allocated memory, or ``NULL`` if the request fails."
msgstr ""

#: ../../c-api/memory.rst:115
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_RawMalloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""
"En begäran om noll bytes returnerar en distinkt pekare som inte är ``NULL`` "
"om möjligt, som om ``PyMem_RawMalloc(1)`` hade anropats istället. Minnet "
"kommer inte att ha initialiserats på något sätt."

#: ../../c-api/memory.rst:122 ../../c-api/memory.rst:193
#: ../../c-api/memory.rst:295
msgid ""
"Allocates *nelem* elements each whose size in bytes is *elsize* and returns "
"a pointer of type :c:type:`void*` to the allocated memory, or ``NULL`` if "
"the request fails. The memory is initialized to zeros."
msgstr ""

#: ../../c-api/memory.rst:126
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_RawCalloc(1, 1)`` had been "
"called instead."
msgstr ""
"Om man begär noll element eller element med storleken noll bytes returneras "
"en distinkt icke-``NULL`` pekare om möjligt, som om ``PyMem_RawCalloc(1, "
"1)`` hade anropats istället."

#: ../../c-api/memory.rst:135 ../../c-api/memory.rst:206
#: ../../c-api/memory.rst:308
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes."
msgstr ""
"Ändrar storlek på minnesblocket som pekas ut av *p* till *n* byte. "
"Innehållet kommer att vara oförändrat till det minsta av den gamla och den "
"nya storleken."

#: ../../c-api/memory.rst:138
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_RawMalloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""
"Om *p* är ``NULL`` motsvarar anropet ``PyMem_RawMalloc(n)``; om *n* är lika "
"med noll ändras minnesblockets storlek men det frigörs inte och den "
"returnerade pekaren är inte ``NULL``."

#: ../../c-api/memory.rst:142
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or "
":c:func:`PyMem_RawCalloc`."
msgstr ""
"Om inte *p* är ``NULL`` måste den ha returnerats av ett tidigare anrop till "
":c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` eller "
":c:func:`PyMem_RawCalloc`."

#: ../../c-api/memory.rst:146
msgid ""
"If the request fails, :c:func:`PyMem_RawRealloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""
"Om begäran misslyckas returnerar :c:func:`PyMem_RawRealloc` ``NULL`` och *p*"
" förblir en giltig pekare till det föregående minnesområdet."

#: ../../c-api/memory.rst:152
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a"
" previous call to :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or "
":c:func:`PyMem_RawCalloc`.  Otherwise, or if ``PyMem_RawFree(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""
"Frigör minnesblocket som pekas ut av *p*, vilket måste ha returnerats av ett"
" tidigare anrop till :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` "
"eller :c:func:`PyMem_RawCalloc`.  Annars, eller om ``PyMem_RawFree(p)`` har "
"anropats tidigare, uppstår ett odefinierat beteende."

#: ../../c-api/memory.rst:157 ../../c-api/memory.rst:227
#: ../../c-api/memory.rst:329
msgid "If *p* is ``NULL``, no operation is performed."
msgstr "Om *p* är ``NULL`` utförs ingen åtgärd."

#: ../../c-api/memory.rst:163
msgid "Memory Interface"
msgstr "Minnesgränssnitt"

#: ../../c-api/memory.rst:165 ../../c-api/memory.rst:271
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating"
" and releasing memory from the Python heap."
msgstr ""
"Följande funktionsuppsättningar, som är modellerade efter ANSI C-standarden,"
" men som specificerar beteendet när noll byte begärs, är tillgängliga för "
"att allokera och frigöra minne från Pythons heap."

#: ../../c-api/memory.rst:169
msgid ""
"The :ref:`default memory allocator <default-memory-allocators>` uses the "
":ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""
"I :ref:`default memory allocator <default-memory-allocators>` används "
":ref:`pymalloc memory allocator <pymalloc>`."

#: ../../c-api/memory.rst:174 ../../c-api/memory.rst:280
msgid ""
"The :term:`GIL <global interpreter lock>` must be held when using these "
"functions."
msgstr ""

#: ../../c-api/memory.rst:179
msgid ""
"The default allocator is now pymalloc instead of system :c:func:`malloc`."
msgstr ""
"Standardallokeraren är nu pymalloc istället för system :c:func:`malloc`."

#: ../../c-api/memory.rst:186
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyMem_Malloc(1)`` had been called instead. The memory will not have "
"been initialized in any way."
msgstr ""
"En begäran om noll bytes returnerar en distinkt pekare som inte är ``NULL`` "
"om möjligt, som om ``PyMem_Malloc(1)`` hade anropats istället. Minnet kommer"
" inte att ha initialiserats på något sätt."

#: ../../c-api/memory.rst:197
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyMem_Calloc(1, 1)`` had been "
"called instead."
msgstr ""
"Om man begär noll element eller element med storleken noll bytes returneras "
"en distinkt icke-``NULL`` pekare om möjligt, som om ``PyMem_Calloc(1, 1)`` "
"hade anropats istället."

#: ../../c-api/memory.rst:209
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyMem_Malloc(n)``; else if "
"*n* is equal to zero, the memory block is resized but is not freed, and the "
"returned pointer is non-``NULL``."
msgstr ""
"Om *p* är ``NULL`` motsvarar anropet ``PyMem_Malloc(n)``; om *n* är lika med"
" noll ändras minnesblockets storlek men det frigörs inte och den returnerade"
" pekaren är inte ``NULL``."

#: ../../c-api/memory.rst:213
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or :c:func:`PyMem_Calloc`."
msgstr ""
"Om inte *p* är ``NULL`` måste den ha returnerats av ett tidigare anrop till "
":c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` eller "
":c:func:`PyMem_Calloc`."

#: ../../c-api/memory.rst:216
msgid ""
"If the request fails, :c:func:`PyMem_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""
"Om begäran misslyckas returnerar :c:func:`PyMem_Realloc` ``NULL`` och *p* "
"förblir en giltig pekare till det föregående minnesområdet."

#: ../../c-api/memory.rst:222
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a"
" previous call to :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` or "
":c:func:`PyMem_Calloc`.  Otherwise, or if ``PyMem_Free(p)`` has been called "
"before, undefined behavior occurs."
msgstr ""
"Frigör minnesblocket som pekas ut av *p*, vilket måste ha returnerats av ett"
" tidigare anrop till :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` eller "
":c:func:`PyMem_Calloc`.  Annars, eller om ``PyMem_Free(p)`` har anropats "
"tidigare, uppstår ett odefinierat beteende."

#: ../../c-api/memory.rst:229
msgid ""
"The following type-oriented macros are provided for convenience.  Note  that"
" *TYPE* refers to any C type."
msgstr ""
"Följande typorienterade makron tillhandahålls för enkelhetens skull.  "
"Observera att *TYPE* hänvisar till vilken C-typ som helst."

#: ../../c-api/memory.rst:235
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:type:`TYPE*`.  The memory will not "
"have been initialized in any way."
msgstr ""

#: ../../c-api/memory.rst:242
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE*`. On "
"return, *p* will be a pointer to the new memory area, or ``NULL`` in the "
"event of failure."
msgstr ""

#: ../../c-api/memory.rst:247
msgid ""
"This is a C preprocessor macro; *p* is always reassigned.  Save the original"
" value of *p* to avoid losing memory when handling errors."
msgstr ""
"Detta är ett C preprocessormakro; *p* är alltid återtilldelad.  Spara "
"originalvärdet för *p* för att undvika minnesförlust vid felhantering."

#: ../../c-api/memory.rst:253
msgid "Same as :c:func:`PyMem_Free`."
msgstr "Samma som :c:func:`PyMem_Free`."

#: ../../c-api/memory.rst:255
msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""
"Dessutom finns följande makrouppsättningar för att anropa Pythons "
"minnesallokator direkt, utan att involvera C API-funktionerna som listas "
"ovan. Observera dock att användningen av dessa inte bevarar binär "
"kompatibilitet mellan olika Python-versioner och därför inte rekommenderas i"
" tilläggsmoduler."

#: ../../c-api/memory.rst:260
msgid "``PyMem_MALLOC(size)``"
msgstr "``PyMem_MALLOC(size)``"

#: ../../c-api/memory.rst:261
msgid "``PyMem_NEW(type, size)``"
msgstr "``PyMem_NEW(type, size)``"

#: ../../c-api/memory.rst:262
msgid "``PyMem_REALLOC(ptr, size)``"
msgstr "``PyMem_REALLOC(ptr, size)``"

#: ../../c-api/memory.rst:263
msgid "``PyMem_RESIZE(ptr, type, size)``"
msgstr "``PyMem_RESIZE(ptr, type, size)``"

#: ../../c-api/memory.rst:264
msgid "``PyMem_FREE(ptr)``"
msgstr "``PyMem_FREE(ptr)``"

#: ../../c-api/memory.rst:265
msgid "``PyMem_DEL(ptr)``"
msgstr "``PyMem_DEL(ptr)``"

#: ../../c-api/memory.rst:269
msgid "Object allocators"
msgstr "Objektallokatorer"

#: ../../c-api/memory.rst:275
msgid ""
"The :ref:`default object allocator <default-memory-allocators>` uses the "
":ref:`pymalloc memory allocator <pymalloc>`."
msgstr ""
"I :ref:`default object allocator <default-memory-allocators>` används "
":ref:`pymalloc memory allocator <pymalloc>`."

#: ../../c-api/memory.rst:288
msgid ""
"Requesting zero bytes returns a distinct non-``NULL`` pointer if possible, "
"as if ``PyObject_Malloc(1)`` had been called instead. The memory will not "
"have been initialized in any way."
msgstr ""
"Om noll bytes begärs returneras en distinkt icke-``NULL`` pekare om möjligt,"
" som om ``PyObject_Malloc(1)`` hade anropats istället. Minnet kommer inte "
"att ha initialiserats på något sätt."

#: ../../c-api/memory.rst:299
msgid ""
"Requesting zero elements or elements of size zero bytes returns a distinct "
"non-``NULL`` pointer if possible, as if ``PyObject_Calloc(1, 1)`` had been "
"called instead."
msgstr ""
"Om man begär noll element eller element med storleken noll bytes returneras "
"en distinkt icke-``NULL`` pekare om möjligt, som om ``PyObject_Calloc(1, "
"1)`` hade anropats istället."

#: ../../c-api/memory.rst:311
msgid ""
"If *p* is ``NULL``, the call is equivalent to ``PyObject_Malloc(n)``; else "
"if *n* is equal to zero, the memory block is resized but is not freed, and "
"the returned pointer is non-``NULL``."
msgstr ""
"Om *p* är ``NULL`` motsvarar anropet ``PyObject_Malloc(n)``; om *n* är lika "
"med noll ändras minnesblockets storlek men det frigörs inte och den "
"returnerade pekaren är inte ``NULL``."

#: ../../c-api/memory.rst:315
msgid ""
"Unless *p* is ``NULL``, it must have been returned by a previous call to "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or "
":c:func:`PyObject_Calloc`."
msgstr ""
"Om inte *p* är ``NULL`` måste den ha returnerats av ett tidigare anrop till "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` eller "
":c:func:`PyObject_Calloc`."

#: ../../c-api/memory.rst:318
msgid ""
"If the request fails, :c:func:`PyObject_Realloc` returns ``NULL`` and *p* "
"remains a valid pointer to the previous memory area."
msgstr ""
"Om begäran misslyckas returnerar :c:func:`PyObject_Realloc` ``NULL`` och *p*"
" förblir en giltig pekare till det tidigare minnesområdet."

#: ../../c-api/memory.rst:324
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a"
" previous call to :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or "
":c:func:`PyObject_Calloc`.  Otherwise, or if ``PyObject_Free(p)`` has been "
"called before, undefined behavior occurs."
msgstr ""
"Frigör minnesblocket som pekas ut av *p*, vilket måste ha returnerats av ett"
" tidigare anrop till :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` "
"eller :c:func:`PyObject_Calloc`.  Annars, eller om ``PyObject_Free(p)`` har "
"anropats tidigare, uppstår ett odefinierat beteende."

#: ../../c-api/memory.rst:335
msgid "Default Memory Allocators"
msgstr "Standard minnesallokatorer"

#: ../../c-api/memory.rst:337
msgid "Default memory allocators:"
msgstr "Standardminnesallokatorer:"

#: ../../c-api/memory.rst:340
msgid "Configuration"
msgstr "Konfiguration"

#: ../../c-api/memory.rst:340
msgid "Name"
msgstr "Namn"

#: ../../c-api/memory.rst:340
msgid "PyMem_RawMalloc"
msgstr "PyMem_RawMalloc"

#: ../../c-api/memory.rst:340
msgid "PyMem_Malloc"
msgstr "PyMem_Malloc"

#: ../../c-api/memory.rst:340
msgid "PyObject_Malloc"
msgstr "PyObject_Malloc"

#: ../../c-api/memory.rst:342
msgid "Release build"
msgstr "Release-version"

#: ../../c-api/memory.rst:342
msgid "``\"pymalloc\"``"
msgstr "``\"pymalloc\"``"

#: ../../c-api/memory.rst:342 ../../c-api/memory.rst:344
#: ../../c-api/memory.rst:344 ../../c-api/memory.rst:344
msgid "``malloc``"
msgstr "``malloc``"

#: ../../c-api/memory.rst:342 ../../c-api/memory.rst:342
msgid "``pymalloc``"
msgstr "``pymalloc``"

#: ../../c-api/memory.rst:343
msgid "Debug build"
msgstr "Felsök byggnaden"

#: ../../c-api/memory.rst:343
msgid "``\"pymalloc_debug\"``"
msgstr "``\"pymalloc_debug\"``"

#: ../../c-api/memory.rst:343 ../../c-api/memory.rst:345
#: ../../c-api/memory.rst:345 ../../c-api/memory.rst:345
msgid "``malloc`` + debug"
msgstr "``malloc`` + felsökning"

#: ../../c-api/memory.rst:343 ../../c-api/memory.rst:343
msgid "``pymalloc`` + debug"
msgstr "``pymalloc`` + felsökning"

#: ../../c-api/memory.rst:344
msgid "Release build, without pymalloc"
msgstr "Release-version, utan pymalloc"

#: ../../c-api/memory.rst:344
msgid "``\"malloc\"``"
msgstr "``\"malloc\"``"

#: ../../c-api/memory.rst:345
msgid "Debug build, without pymalloc"
msgstr "Felsökning, utan pymalloc"

#: ../../c-api/memory.rst:345
msgid "``\"malloc_debug\"``"
msgstr "``\"malloc_debug\"``"

#: ../../c-api/memory.rst:348
msgid "Legend:"
msgstr "Legend:"

#: ../../c-api/memory.rst:350
msgid "Name: value for :envvar:`PYTHONMALLOC` environment variable"
msgstr ""

#: ../../c-api/memory.rst:351
msgid ""
"``malloc``: system allocators from the standard C library, C functions: "
":c:func:`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`"
msgstr ""

#: ../../c-api/memory.rst:353
msgid "``pymalloc``: :ref:`pymalloc memory allocator <pymalloc>`"
msgstr ""

#: ../../c-api/memory.rst:354
msgid "\"+ debug\": with debug hooks installed by :c:func:`PyMem_SetupDebugHooks`"
msgstr ""

#: ../../c-api/memory.rst:358
msgid "Customize Memory Allocators"
msgstr "Anpassa minnesfördelare"

#: ../../c-api/memory.rst:364
msgid ""
"Structure used to describe a memory block allocator. The structure has the "
"following fields:"
msgstr ""
"Struktur som används för att beskriva en minnesblocksallokering. Strukturen "
"har följande fält:"

#: ../../c-api/memory.rst:368 ../../c-api/memory.rst:513
msgid "Field"
msgstr "Fält"

#: ../../c-api/memory.rst:368 ../../c-api/memory.rst:513
msgid "Meaning"
msgstr "Betydelse"

#: ../../c-api/memory.rst:370 ../../c-api/memory.rst:515
msgid "``void *ctx``"
msgstr "``void *ctx``"

#: ../../c-api/memory.rst:370 ../../c-api/memory.rst:515
msgid "user context passed as first argument"
msgstr "användarkontext som skickas som första argument"

#: ../../c-api/memory.rst:372
msgid "``void* malloc(void *ctx, size_t size)``"
msgstr "``void* malloc(void *ctx, size_t size)``"

#: ../../c-api/memory.rst:372
msgid "allocate a memory block"
msgstr "allokera ett minnesblock"

#: ../../c-api/memory.rst:374
msgid "``void* calloc(void *ctx, size_t nelem, size_t elsize)``"
msgstr "``void* calloc(void *ctx, size_t nelem, size_t elsize)``"

#: ../../c-api/memory.rst:374
msgid "allocate a memory block initialized with zeros"
msgstr "allokera ett minnesblock som initieras med nollor"

#: ../../c-api/memory.rst:377
msgid "``void* realloc(void *ctx, void *ptr, size_t new_size)``"
msgstr "``void* realloc(void *ctx, void *ptr, size_t new_size)``"

#: ../../c-api/memory.rst:377
msgid "allocate or resize a memory block"
msgstr "allokera eller ändra storlek på ett minnesblock"

#: ../../c-api/memory.rst:379
msgid "``void free(void *ctx, void *ptr)``"
msgstr "``void free(void *ctx, void *ptr)``"

#: ../../c-api/memory.rst:379
msgid "free a memory block"
msgstr "frigöra ett minnesblock"

#: ../../c-api/memory.rst:382
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to "
":c:type:`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""

#: ../../c-api/memory.rst:389
msgid "Enum used to identify an allocator domain. Domains:"
msgstr "Enum som används för att identifiera en allokeringsdomän. Domäner:"

#: ../../c-api/memory.rst:393 ../../c-api/memory.rst:402
#: ../../c-api/memory.rst:411
msgid "Functions:"
msgstr "Funktioner:"

#: ../../c-api/memory.rst:395
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../c-api/memory.rst:396
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../c-api/memory.rst:397
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../c-api/memory.rst:398
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../c-api/memory.rst:404
msgid ":c:func:`PyMem_Malloc`,"
msgstr ":c:func:`PyMem_Malloc`,"

#: ../../c-api/memory.rst:405
msgid ":c:func:`PyMem_Realloc`"
msgstr ":c:func:`PyMem_Realloc`"

#: ../../c-api/memory.rst:406
msgid ":c:func:`PyMem_Calloc`"
msgstr ":c:func:`PyMem_Calloc`"

#: ../../c-api/memory.rst:407
msgid ":c:func:`PyMem_Free`"
msgstr ":c:func:`PyMem_Free`"

#: ../../c-api/memory.rst:413
msgid ":c:func:`PyObject_Malloc`"
msgstr ":c:func:`PyObject_Malloc`"

#: ../../c-api/memory.rst:414
msgid ":c:func:`PyObject_Realloc`"
msgstr ":c:func:`PyObject_Realloc`"

#: ../../c-api/memory.rst:415
msgid ":c:func:`PyObject_Calloc`"
msgstr ":c:func:`PyObject_Calloc`"

#: ../../c-api/memory.rst:416
msgid ":c:func:`PyObject_Free`"
msgstr ":c:func:`PyObject_Free`"

#: ../../c-api/memory.rst:420
msgid "Get the memory block allocator of the specified domain."
msgstr "Hämta minnesblockstilldelaren för den angivna domänen."

#: ../../c-api/memory.rst:425
msgid "Set the memory block allocator of the specified domain."
msgstr "Ställ in minnesblocksallokeringen för den angivna domänen."

#: ../../c-api/memory.rst:427
msgid ""
"The new allocator must return a distinct non-``NULL`` pointer when "
"requesting zero bytes."
msgstr ""
"Den nya allokeraren måste returnera en distinkt pekare som inte är ``NULL`` "
"när den begär noll bytes."

#: ../../c-api/memory.rst:430
msgid ""
"For the :c:data:`PYMEM_DOMAIN_RAW` domain, the allocator must be thread-"
"safe: the :term:`GIL <global interpreter lock>` is not held when the "
"allocator is called."
msgstr ""

#: ../../c-api/memory.rst:434
msgid ""
"If the new allocator is not a hook (does not call the previous allocator), "
"the :c:func:`PyMem_SetupDebugHooks` function must be called to reinstall the"
" debug hooks on top on the new allocator."
msgstr ""
"Om den nya allokeringsenheten inte är en hook (anropar inte den föregående "
"allokeringsenheten) måste funktionen :c:func:`PyMem_SetupDebugHooks` anropas"
" för att installera om debughooks ovanpå den nya allokeringsenheten."

#: ../../c-api/memory.rst:441
msgid "Setup hooks to detect bugs in the Python memory allocator functions."
msgstr ""

#: ../../c-api/memory.rst:443
msgid ""
"Newly allocated memory is filled with the byte ``0xCD`` (``CLEANBYTE``), "
"freed memory is filled with the byte ``0xDD`` (``DEADBYTE``). Memory blocks "
"are surrounded by \"forbidden bytes\" (``FORBIDDENBYTE``: byte ``0xFD``)."
msgstr ""

#: ../../c-api/memory.rst:447
msgid "Runtime checks:"
msgstr "Kontroll av körtid:"

#: ../../c-api/memory.rst:449
msgid ""
"Detect API violations, ex: :c:func:`PyObject_Free` called on a buffer "
"allocated by :c:func:`PyMem_Malloc`"
msgstr ""

#: ../../c-api/memory.rst:451
msgid "Detect write before the start of the buffer (buffer underflow)"
msgstr ""

#: ../../c-api/memory.rst:452
msgid "Detect write after the end of the buffer (buffer overflow)"
msgstr ""

#: ../../c-api/memory.rst:453
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and "
":c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are called"
msgstr ""

#: ../../c-api/memory.rst:458
msgid ""
"On error, the debug hooks use the :mod:`tracemalloc` module to get the "
"traceback where a memory block was allocated. The traceback is only "
"displayed if :mod:`tracemalloc` is tracing Python memory allocations and the"
" memory block was traced."
msgstr ""
"Vid fel använder debug-hooks modulen :mod:`tracemalloc` för att få en "
"spårning av var ett minnesblock allokerades. Spårningen visas bara om "
":mod:`tracemalloc` spårar Python-minnesallokeringar och minnesblocket "
"spårades."

#: ../../c-api/memory.rst:463
msgid ""
"These hooks are :ref:`installed by default <default-memory-allocators>` if "
"Python is compiled in debug mode. The :envvar:`PYTHONMALLOC` environment "
"variable can be used to install debug hooks on a Python compiled in release "
"mode."
msgstr ""

#: ../../c-api/memory.rst:468
msgid ""
"This function now also works on Python compiled in release mode. On error, "
"the debug hooks now use :mod:`tracemalloc` to get the traceback where a "
"memory block was allocated. The debug hooks now also check if the GIL is "
"held when functions of :c:data:`PYMEM_DOMAIN_OBJ` and "
":c:data:`PYMEM_DOMAIN_MEM` domains are called."
msgstr ""

#: ../../c-api/memory.rst:475
msgid ""
"Byte patterns ``0xCB`` (``CLEANBYTE``), ``0xDB`` (``DEADBYTE``) and ``0xFB``"
" (``FORBIDDENBYTE``) have been replaced with ``0xCD``, ``0xDD`` and ``0xFD``"
" to use the same values than Windows CRT debug ``malloc()`` and ``free()``."
msgstr ""

#: ../../c-api/memory.rst:485
msgid "The pymalloc allocator"
msgstr "Allokeringsverktyget pymalloc"

#: ../../c-api/memory.rst:487
msgid ""
"Python has a *pymalloc* allocator optimized for small objects (smaller or "
"equal to 512 bytes) with a short lifetime. It uses memory mappings called "
"\"arenas\" with a fixed size of 256 KiB. It falls back to "
":c:func:`PyMem_RawMalloc` and :c:func:`PyMem_RawRealloc` for allocations "
"larger than 512 bytes."
msgstr ""

#: ../../c-api/memory.rst:492
msgid ""
"*pymalloc* is the :ref:`default allocator <default-memory-allocators>` of "
"the :c:data:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) and "
":c:data:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) domains."
msgstr ""

#: ../../c-api/memory.rst:496
msgid "The arena allocator uses the following functions:"
msgstr "Arenaallokeringen använder sig av följande funktioner:"

#: ../../c-api/memory.rst:498
msgid ":c:func:`VirtualAlloc` and :c:func:`VirtualFree` on Windows,"
msgstr ""

#: ../../c-api/memory.rst:499
msgid ":c:func:`mmap` and :c:func:`munmap` if available,"
msgstr ""

#: ../../c-api/memory.rst:500
msgid ":c:func:`malloc` and :c:func:`free` otherwise."
msgstr ":c:func:`malloc` och :c:func:`free` annars."

#: ../../c-api/memory.rst:503
msgid "Customize pymalloc Arena Allocator"
msgstr "Anpassa pymalloc Arena Allocator"

#: ../../c-api/memory.rst:509
msgid ""
"Structure used to describe an arena allocator. The structure has three "
"fields:"
msgstr ""
"Struktur som används för att beskriva en arenaallokering. Strukturen har tre"
" fält:"

#: ../../c-api/memory.rst:517
msgid "``void* alloc(void *ctx, size_t size)``"
msgstr "``void* alloc(void *ctx, size_t size)``"

#: ../../c-api/memory.rst:517
msgid "allocate an arena of size bytes"
msgstr "allokera en arena av storleken bytes"

#: ../../c-api/memory.rst:519
msgid "``void free(void *ctx, void *ptr, size_t size)``"
msgstr "``void free(void *ctx, void *ptr, size_t size)``"

#: ../../c-api/memory.rst:519
msgid "free an arena"
msgstr "frigöra en arena"

#: ../../c-api/memory.rst:524
msgid "Get the arena allocator."
msgstr "Hämta arenans allokeringsenhet."

#: ../../c-api/memory.rst:528
msgid "Set the arena allocator."
msgstr "Ställ in arenaallokeringen."

#: ../../c-api/memory.rst:532
msgid "tracemalloc C API"
msgstr "tracemalloc C API"

#: ../../c-api/memory.rst:538
msgid "Track an allocated memory block in the :mod:`tracemalloc` module."
msgstr "Spåra ett allokerat minnesblock i modulen :mod:`tracemalloc`."

#: ../../c-api/memory.rst:540
msgid ""
"Return ``0`` on success, return ``-1`` on error (failed to allocate memory "
"to store the trace). Return ``-2`` if tracemalloc is disabled."
msgstr ""
"Returnera ``0`` vid framgång, returnera ``\\-1`` vid fel (misslyckades med "
"att allokera minne för att lagra spårningen). Returnerar ``\\-2`` om "
"tracemalloc är inaktiverat."

#: ../../c-api/memory.rst:543
msgid "If memory block is already tracked, update the existing trace."
msgstr ""
"Om minnesblocket redan är spårat, uppdatera den befintliga spårningen."

#: ../../c-api/memory.rst:547
msgid ""
"Untrack an allocated memory block in the :mod:`tracemalloc` module. Do "
"nothing if the block was not tracked."
msgstr ""
"Ta bort spårningen av ett allokerat minnesblock i modulen "
":mod:`tracemalloc`. Gör ingenting om blocket inte spårades."

#: ../../c-api/memory.rst:550
msgid "Return ``-2`` if tracemalloc is disabled, otherwise return ``0``."
msgstr ""
"Returnerar ``\\-2`` om tracemalloc är inaktiverat, annars returneras ``0``."

#: ../../c-api/memory.rst:556
msgid "Examples"
msgstr "Exempel"

#: ../../c-api/memory.rst:558
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function"
" set::"
msgstr ""
"Här är exemplet från avsnitt :ref:`memoryoverview`, omskrivet så att "
"I/O-bufferten allokeras från Pythons heap med hjälp av den första funktionen"
" set::"

#: ../../c-api/memory.rst:571
msgid "The same code using the type-oriented function set::"
msgstr "Samma kod med hjälp av den typorienterade funktionen set::"

#: ../../c-api/memory.rst:583
msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two"
" different allocators operating on different heaps. ::"
msgstr ""
"Observera att i de två exemplen ovan manipuleras bufferten alltid via "
"funktioner som tillhör samma uppsättning. Det är faktiskt nödvändigt att "
"använda samma minnes-API-familj för ett visst minnesblock, så att risken för"
" att blanda olika allokatorer reduceras till ett minimum. Följande "
"kodsekvens innehåller två fel, varav det ena är märkt som *dödligt* eftersom"
" det blandar två olika allokatorer som arbetar på olika heaps. ::"

#: ../../c-api/memory.rst:598
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar` and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../c-api/memory.rst:602
msgid ""
"These will be explained in the next chapter on defining and implementing new"
" object types in C."
msgstr ""
"Dessa kommer att förklaras i nästa kapitel om att definiera och implementera"
" nya objekttyper i C."
