# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objekt för komplexa tal"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs,"
" and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Pythons komplexa talobjekt implementeras som två olika typer när de "
"betraktas från C API: en är Python-objektet som exponeras för Python-"
"program, och den andra är en C-struktur som representerar det faktiska "
"komplexa talvärdet. API:et tillhandahåller funktioner för att arbeta med "
"båda."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Komplexa tal som C-strukturer"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Observera att de funktioner som accepterar dessa strukturer som parametrar "
"och returnerar dem som resultat gör det *med värde* i stället för att "
"dereferencera dem via pekare.  Detta är konsekvent i hela API:et."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Returnerar summan av två komplexa tal, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Returnerar skillnaden mellan två komplexa tal, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Returnerar negationen av det komplexa talet *num*, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Returnerar produkten av två komplexa tal, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex`"
" representation."
msgstr ""
"Returnerar kvoten av två komplexa tal, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to "
":c:data:`EDOM`."
msgstr ""

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr ""
"Returnerar exponentiering av *num* med *exp*, med C "
":c:type:`Py_complex`\\-representationen."

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Komplexa tal som Python-objekt"

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr ""
"Denna subtyp av :c:type:`PyObject` representerar ett Python-objekt med "
"komplexa tal."

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number"
" type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Denna instans av :c:type:`PyTypeObject` representerar Pythons komplexa "
"taltyp. Det är samma objekt som :class:`complex` i Python-lagret."

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of "
":c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyComplexObject` eller en "
"subtyp av :c:type:`PyComplexObject`.  Denna funktion lyckas alltid."

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyComplexObject`, men inte "
"en subtyp av :c:type:`PyComplexObject`.  Denna funktion lyckas alltid."

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr ""

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr ""

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Returnera :c:type:`Py_complex`\\-värdet för det komplexa talet *op*."

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex"
" number object.  If ``__complex__()`` is not defined then it falls back to "
":meth:`__float__`.  If ``__float__()`` is not defined then it falls back to "
":meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""

#: ../../c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr ""
