# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/typeobj.rst:6
msgid "Type Objects"
msgstr "Typ av objekt"

#: ../../c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :c:type:`PyTypeObject` structure."
"  Type objects can be handled using any of the :c:func:`PyObject_\\*` or "
":c:func:`PyType_\\*` functions, but do not offer much that's interesting to "
"most Python applications. These objects are fundamental to how objects "
"behave, so they are very important to the interpreter itself and to any "
"extension module that implements new types."
msgstr ""

#: ../../c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of"
" the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""
"Typobjekt är ganska stora jämfört med de flesta standardtyperna. Anledningen"
" till storleken är att varje typobjekt lagrar ett stort antal värden, "
"mestadels C-funktionspekare, som var och en implementerar en liten del av "
"typens funktionalitet.  Fälten i typobjektet granskas i detalj i detta "
"avsnitt.  Fälten kommer att beskrivas i den ordning de förekommer i "
"strukturen."

#: ../../c-api/typeobj.rst:23
msgid ""
"In addition to the following quick reference, the :ref:`typedef-examples` "
"section provides at-a-glance insight into the meaning and use of "
":c:type:`PyTypeObject`."
msgstr ""
"Förutom följande snabbreferens ger avsnittet :ref:`typedef-examples` en "
"snabb inblick i betydelsen och användningen av :c:type:`PyTypeObject`."

#: ../../c-api/typeobj.rst:29
msgid "Quick Reference"
msgstr "Snabbreferens"

#: ../../c-api/typeobj.rst:34
msgid "\"tp slots\""
msgstr "\"tp slots\""

#: ../../c-api/typeobj.rst:40
msgid "PyTypeObject Slot [#slots]_"
msgstr "PyTypeObject Slot [#slots]_"

#: ../../c-api/typeobj.rst:40 ../../c-api/typeobj.rst:193
msgid ":ref:`Type <slot-typedefs-table>`"
msgstr ":ref:`Typ <slot-typedefs-table>`"

#: ../../c-api/typeobj.rst:40
msgid "special methods/attrs"
msgstr "speciella metoder/attribut"

#: ../../c-api/typeobj.rst:40
msgid "Info [#cols]_"
msgstr "Info [#cols]_ _ Info"

#: ../../c-api/typeobj.rst:42
msgid "O"
msgstr "O"

#: ../../c-api/typeobj.rst:42
msgid "T"
msgstr "T"

#: ../../c-api/typeobj.rst:42
msgid "D"
msgstr "D"

#: ../../c-api/typeobj.rst:42
msgid "I"
msgstr "I"

#: ../../c-api/typeobj.rst:44
msgid "<R> :c:member:`~PyTypeObject.tp_name`"
msgstr "<R>:c:member:`~PyTypeObject.tp_name`"

#: ../../c-api/typeobj.rst:44 ../../c-api/typeobj.rst:86
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
msgid "const char *"
msgstr "konst char *"

#: ../../c-api/typeobj.rst:44
msgid "__name__"
msgstr "__name__"

#: ../../c-api/typeobj.rst:44 ../../c-api/typeobj.rst:44
#: ../../c-api/typeobj.rst:46 ../../c-api/typeobj.rst:46
#: ../../c-api/typeobj.rst:46 ../../c-api/typeobj.rst:48
#: ../../c-api/typeobj.rst:48 ../../c-api/typeobj.rst:50
#: ../../c-api/typeobj.rst:50 ../../c-api/typeobj.rst:50
#: ../../c-api/typeobj.rst:52 ../../c-api/typeobj.rst:52
#: ../../c-api/typeobj.rst:62 ../../c-api/typeobj.rst:62
#: ../../c-api/typeobj.rst:62 ../../c-api/typeobj.rst:70
#: ../../c-api/typeobj.rst:72 ../../c-api/typeobj.rst:72
#: ../../c-api/typeobj.rst:74 ../../c-api/typeobj.rst:74
#: ../../c-api/typeobj.rst:76 ../../c-api/typeobj.rst:76
#: ../../c-api/typeobj.rst:79 ../../c-api/typeobj.rst:79
#: ../../c-api/typeobj.rst:84 ../../c-api/typeobj.rst:84
#: ../../c-api/typeobj.rst:86 ../../c-api/typeobj.rst:86
#: ../../c-api/typeobj.rst:88 ../../c-api/typeobj.rst:90
#: ../../c-api/typeobj.rst:92 ../../c-api/typeobj.rst:99
#: ../../c-api/typeobj.rst:101 ../../c-api/typeobj.rst:103
#: ../../c-api/typeobj.rst:105 ../../c-api/typeobj.rst:105
#: ../../c-api/typeobj.rst:107 ../../c-api/typeobj.rst:109
#: ../../c-api/typeobj.rst:109 ../../c-api/typeobj.rst:111
#: ../../c-api/typeobj.rst:115 ../../c-api/typeobj.rst:117
#: ../../c-api/typeobj.rst:120 ../../c-api/typeobj.rst:122
#: ../../c-api/typeobj.rst:122 ../../c-api/typeobj.rst:122
#: ../../c-api/typeobj.rst:124 ../../c-api/typeobj.rst:126
#: ../../c-api/typeobj.rst:126 ../../c-api/typeobj.rst:128
#: ../../c-api/typeobj.rst:128 ../../c-api/typeobj.rst:130
#: ../../c-api/typeobj.rst:130 ../../c-api/typeobj.rst:146
msgid "X"
msgstr "X"

#: ../../c-api/typeobj.rst:46
msgid ":c:member:`~PyTypeObject.tp_basicsize`"
msgstr ":c:member:`~PyTypeObject.tp_basicsize`"

#: ../../c-api/typeobj.rst:46 ../../c-api/typeobj.rst:48
#: ../../c-api/typeobj.rst:52 ../../c-api/typeobj.rst:99
#: ../../c-api/typeobj.rst:120 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:406 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0
msgid ":c:type:`Py_ssize_t`"
msgstr ":c:type:`Py_ssize_t`"

#: ../../c-api/typeobj.rst:48
msgid ":c:member:`~PyTypeObject.tp_itemsize`"
msgstr ":c:member:`~PyTypeObject.tp_itemsize`"

#: ../../c-api/typeobj.rst:50
msgid ":c:member:`~PyTypeObject.tp_dealloc`"
msgstr ":c:member:`~PyTypeObject.tp_dealloc`"

#: ../../c-api/typeobj.rst:50 ../../c-api/typeobj.rst:142
#: ../../c-api/typeobj.rst:146 ../../c-api/typeobj.rst:336
msgid ":c:type:`destructor`"
msgstr ":c:type:`destruktor`"

#: ../../c-api/typeobj.rst:52
msgid ":c:member:`~PyTypeObject.tp_vectorcall_offset`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall_offset`"

#: ../../c-api/typeobj.rst:54
msgid "(:c:member:`~PyTypeObject.tp_getattr`)"
msgstr "(:c:member:`~PyTypeObject.tp_getattr`)"

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:360
msgid ":c:type:`getattrfunc`"
msgstr ":c:type:`getattrfunc`"

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:76
msgid "__getattribute__, __getattr__"
msgstr "__getattribut__, __getattr__"

#: ../../c-api/typeobj.rst:54 ../../c-api/typeobj.rst:57
#: ../../c-api/typeobj.rst:70 ../../c-api/typeobj.rst:76
#: ../../c-api/typeobj.rst:79 ../../c-api/typeobj.rst:88
#: ../../c-api/typeobj.rst:90 ../../c-api/typeobj.rst:92
msgid "G"
msgstr "G"

#: ../../c-api/typeobj.rst:57
msgid "(:c:member:`~PyTypeObject.tp_setattr`)"
msgstr "(:c:member:`~PyTypeObject.tp_setattr`)"

#: ../../c-api/typeobj.rst:57 ../../c-api/typeobj.rst:365
msgid ":c:type:`setattrfunc`"
msgstr ":c:type:`setattrfunc`"

#: ../../c-api/typeobj.rst:57 ../../c-api/typeobj.rst:79
msgid "__setattr__, __delattr__"
msgstr "__setattr__, __delattr__"

#: ../../c-api/typeobj.rst:60
msgid ":c:member:`~PyTypeObject.tp_as_async`"
msgstr ":c:member:`~PyTypeObject.tp_as_async`"

#: ../../c-api/typeobj.rst:60
msgid ":c:type:`PyAsyncMethods` *"
msgstr ":c:type:`PyAsyncMethods` *"

#: ../../c-api/typeobj.rst:60 ../../c-api/typeobj.rst:64
#: ../../c-api/typeobj.rst:66 ../../c-api/typeobj.rst:68
msgid ":ref:`sub-slots`"
msgstr ":ref:`sub-slots`"

#: ../../c-api/typeobj.rst:60 ../../c-api/typeobj.rst:64
#: ../../c-api/typeobj.rst:66 ../../c-api/typeobj.rst:68
#: ../../c-api/typeobj.rst:82
msgid "%"
msgstr "%"

#: ../../c-api/typeobj.rst:62
msgid ":c:member:`~PyTypeObject.tp_repr`"
msgstr ":c:member:`~PyTypeObject.tp_repr`"

#: ../../c-api/typeobj.rst:62 ../../c-api/typeobj.rst:74
#: ../../c-api/typeobj.rst:358
msgid ":c:type:`reprfunc`"
msgstr ":c:type:`reprfunc`"

#: ../../c-api/typeobj.rst:62
msgid "__repr__"
msgstr "__repr__"

#: ../../c-api/typeobj.rst:64
msgid ":c:member:`~PyTypeObject.tp_as_number`"
msgstr ":c:member:`~PyTypeObject.tp_as_number`"

#: ../../c-api/typeobj.rst:64
msgid ":c:type:`PyNumberMethods` *"
msgstr ":c:type:`PyNumberMethods` *"

#: ../../c-api/typeobj.rst:66
msgid ":c:member:`~PyTypeObject.tp_as_sequence`"
msgstr ":c:member:`~PyTypeObject.tp_as_sequence`"

#: ../../c-api/typeobj.rst:66
msgid ":c:type:`PySequenceMethods` *"
msgstr ":c:type:`PySequenceMethods` *"

#: ../../c-api/typeobj.rst:68
msgid ":c:member:`~PyTypeObject.tp_as_mapping`"
msgstr ":c:member:`~PyTypeObject.tp_as_mapping`"

#: ../../c-api/typeobj.rst:68
msgid ":c:type:`PyMappingMethods` *"
msgstr ":c:type:`PyMappingMethods` *"

#: ../../c-api/typeobj.rst:70
msgid ":c:member:`~PyTypeObject.tp_hash`"
msgstr ":c:member:`~PyTypeObject.tp_hash`"

#: ../../c-api/typeobj.rst:70 ../../c-api/typeobj.rst:394
msgid ":c:type:`hashfunc`"
msgstr ":c:type:`hashfunc`"

#: ../../c-api/typeobj.rst:70
msgid "__hash__"
msgstr "__hash__"

#: ../../c-api/typeobj.rst:72
msgid ":c:member:`~PyTypeObject.tp_call`"
msgstr ":c:member:`~PyTypeObject.tp_call`"

#: ../../c-api/typeobj.rst:72 ../../c-api/typeobj.rst:227
#: ../../c-api/typeobj.rst:230 ../../c-api/typeobj.rst:430
msgid ":c:type:`ternaryfunc`"
msgstr ":c:type:`ternaryfunc`"

#: ../../c-api/typeobj.rst:72
msgid "__call__"
msgstr "__anropa__"

#: ../../c-api/typeobj.rst:74
msgid ":c:member:`~PyTypeObject.tp_str`"
msgstr ":c:member:`~PyTypeObject.tp_str`"

#: ../../c-api/typeobj.rst:74
msgid "__str__"
msgstr "__str__"

#: ../../c-api/typeobj.rst:76
msgid ":c:member:`~PyTypeObject.tp_getattro`"
msgstr ":c:member:`~PyTypeObject.tp_getattro`"

#: ../../c-api/typeobj.rst:76 ../../c-api/typeobj.rst:371
msgid ":c:type:`getattrofunc`"
msgstr ":c:type:`getattrofunc`"

#: ../../c-api/typeobj.rst:79
msgid ":c:member:`~PyTypeObject.tp_setattro`"
msgstr ":c:member:`~PyTypeObject.tp_setattro`"

#: ../../c-api/typeobj.rst:79 ../../c-api/typeobj.rst:376
msgid ":c:type:`setattrofunc`"
msgstr ":c:type:`setattrofunc`"

#: ../../c-api/typeobj.rst:82
msgid ":c:member:`~PyTypeObject.tp_as_buffer`"
msgstr ":c:member:`~PyTypeObject.tp_as_buffer`"

#: ../../c-api/typeobj.rst:82
msgid ":c:type:`PyBufferProcs` *"
msgstr ":c:type:`PyBufferProcs` *"

#: ../../c-api/typeobj.rst:84
msgid ":c:member:`~PyTypeObject.tp_flags`"
msgstr ":c:member:`~PyTypeObject.tp_flags`"

#: ../../c-api/typeobj.rst:84
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/typeobj.rst:84 ../../c-api/typeobj.rst:99
#: ../../c-api/typeobj.rst:113 ../../c-api/typeobj.rst:120
#: ../../c-api/typeobj.rst:124 ../../c-api/typeobj.rst:124
#: ../../c-api/typeobj.rst:126 ../../c-api/typeobj.rst:126
#: ../../c-api/typeobj.rst:128 ../../c-api/typeobj.rst:128
msgid "?"
msgstr "?"

#: ../../c-api/typeobj.rst:86
msgid ":c:member:`~PyTypeObject.tp_doc`"
msgstr ":c:member:`~PyTypeObject.tp_doc`"

#: ../../c-api/typeobj.rst:86
msgid "__doc__"
msgstr "__doc__"

#: ../../c-api/typeobj.rst:88
msgid ":c:member:`~PyTypeObject.tp_traverse`"
msgstr ":c:member:`~PyTypeObject.tp_traverse`"

#: ../../c-api/typeobj.rst:88 ../../c-api/typeobj.rst:340
msgid ":c:type:`traverseproc`"
msgstr ":c:type:`traverseproc`"

#: ../../c-api/typeobj.rst:90
msgid ":c:member:`~PyTypeObject.tp_clear`"
msgstr ":c:member:`~PyTypeObject.tp_clear`"

#: ../../c-api/typeobj.rst:90 ../../c-api/typeobj.rst:130
#: ../../c-api/typeobj.rst:238 ../../c-api/typeobj.rst:419
msgid ":c:type:`inquiry`"
msgstr ":c:type:`förfrågan`"

#: ../../c-api/typeobj.rst:92
msgid ":c:member:`~PyTypeObject.tp_richcompare`"
msgstr ":c:member:`~PyTypeObject.tp_richcompare`"

#: ../../c-api/typeobj.rst:92 ../../c-api/typeobj.rst:396
msgid ":c:type:`richcmpfunc`"
msgstr ":c:type:`richcmpfunc`"

#: ../../c-api/typeobj.rst:92
msgid "__lt__, __le__, __eq__, __ne__, __gt__, __ge__"
msgstr "__lt__, __le__, __eq__, __ne__, __gt__, __ge__"

#: ../../c-api/typeobj.rst:99
msgid ":c:member:`~PyTypeObject.tp_weaklistoffset`"
msgstr ""

#: ../../c-api/typeobj.rst:101
msgid ":c:member:`~PyTypeObject.tp_iter`"
msgstr ":c:member:`~PyTypeObject.tp_iter`"

#: ../../c-api/typeobj.rst:101 ../../c-api/typeobj.rst:402
msgid ":c:type:`getiterfunc`"
msgstr ":c:type:`getiterfunc`"

#: ../../c-api/typeobj.rst:101
msgid "__iter__"
msgstr "__iter__"

#: ../../c-api/typeobj.rst:103
msgid ":c:member:`~PyTypeObject.tp_iternext`"
msgstr ":c:member:`~PyTypeObject.tp_iternext`"

#: ../../c-api/typeobj.rst:103 ../../c-api/typeobj.rst:404
msgid ":c:type:`iternextfunc`"
msgstr ":c:type:`iternextfunc`"

#: ../../c-api/typeobj.rst:103
msgid "__next__"
msgstr "nästa"

#: ../../c-api/typeobj.rst:105
msgid ":c:member:`~PyTypeObject.tp_methods`"
msgstr ":c:member:`~PyTypeObject.tp_methods`"

#: ../../c-api/typeobj.rst:105
msgid ":c:type:`PyMethodDef` []"
msgstr ":c:type:`PyMethodDef` []"

#: ../../c-api/typeobj.rst:107
msgid ":c:member:`~PyTypeObject.tp_members`"
msgstr ":c:member:`~PyTypeObject.tp_members`"

#: ../../c-api/typeobj.rst:107
msgid ":c:type:`PyMemberDef` []"
msgstr ":c:type:`PyMemberDef` []"

#: ../../c-api/typeobj.rst:109
msgid ":c:member:`~PyTypeObject.tp_getset`"
msgstr ":c:member:`~PyTypeObject.tp_getset`"

#: ../../c-api/typeobj.rst:109
msgid ":c:type:`PyGetSetDef` []"
msgstr ":c:type:`PyGetSetDef` []"

#: ../../c-api/typeobj.rst:111
msgid ":c:member:`~PyTypeObject.tp_base`"
msgstr ":c:member:`~PyTypeObject.tp_base`"

#: ../../c-api/typeobj.rst:111 ../../c-api/typeobj.rst:0
msgid ":c:type:`PyTypeObject` *"
msgstr ":c:type:`PyTypeObject` *"

#: ../../c-api/typeobj.rst:111
msgid "__base__"
msgstr "__bas"

#: ../../c-api/typeobj.rst:113
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/typeobj.rst:113 ../../c-api/typeobj.rst:132
#: ../../c-api/typeobj.rst:134 ../../c-api/typeobj.rst:136
#: ../../c-api/typeobj.rst:138 ../../c-api/typeobj.rst:140
#: ../../c-api/typeobj.rst:331 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:346 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:358 ../../c-api/typeobj.rst:358
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:360
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:371 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:382
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:394
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:396 ../../c-api/typeobj.rst:402
#: ../../c-api/typeobj.rst:402 ../../c-api/typeobj.rst:404
#: ../../c-api/typeobj.rst:404 ../../c-api/typeobj.rst:406
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:421
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:425 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:430 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:436 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0
msgid ":c:type:`PyObject` *"
msgstr ":c:type:`PyObject` *"

#: ../../c-api/typeobj.rst:113
msgid "__dict__"
msgstr "__dict__"

#: ../../c-api/typeobj.rst:115
msgid ":c:member:`~PyTypeObject.tp_descr_get`"
msgstr ":c:member:`~PyTypeObject.tp_descr_get`"

#: ../../c-api/typeobj.rst:115 ../../c-api/typeobj.rst:382
msgid ":c:type:`descrgetfunc`"
msgstr ":c:type:`descrgetfunc`"

#: ../../c-api/typeobj.rst:115
msgid "__get__"
msgstr "__get__"

#: ../../c-api/typeobj.rst:117
msgid ":c:member:`~PyTypeObject.tp_descr_set`"
msgstr ":c:member:`~PyTypeObject.tp_descr_set`"

#: ../../c-api/typeobj.rst:117 ../../c-api/typeobj.rst:388
msgid ":c:type:`descrsetfunc`"
msgstr ":c:type:`descrsetfunc`"

#: ../../c-api/typeobj.rst:117
msgid "__set__, __delete__"
msgstr "__set__, __delete__"

#: ../../c-api/typeobj.rst:120
msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
msgstr ""

#: ../../c-api/typeobj.rst:122
msgid ":c:member:`~PyTypeObject.tp_init`"
msgstr ":c:member:`~PyTypeObject.tp_init`"

#: ../../c-api/typeobj.rst:122 ../../c-api/typeobj.rst:352
msgid ":c:type:`initproc`"
msgstr ":c:type:`initproc`"

#: ../../c-api/typeobj.rst:122
msgid "__init__"
msgstr "__init__"

#: ../../c-api/typeobj.rst:124
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ":c:member:`~PyTypeObject.tp_alloc`"

#: ../../c-api/typeobj.rst:124 ../../c-api/typeobj.rst:331
msgid ":c:type:`allocfunc`"
msgstr ":c:type:`allocfunc`"

#: ../../c-api/typeobj.rst:126
msgid ":c:member:`~PyTypeObject.tp_new`"
msgstr ":c:member:`~PyTypeObject.tp_new`"

#: ../../c-api/typeobj.rst:126 ../../c-api/typeobj.rst:346
msgid ":c:type:`newfunc`"
msgstr ":c:type:`newfunc`"

#: ../../c-api/typeobj.rst:126
msgid "__new__"
msgstr "__ny"

#: ../../c-api/typeobj.rst:128
msgid ":c:member:`~PyTypeObject.tp_free`"
msgstr ":c:member:`~PyTypeObject.tp_free`"

#: ../../c-api/typeobj.rst:128 ../../c-api/typeobj.rst:338
msgid ":c:type:`freefunc`"
msgstr ":c:type:`freefunc`"

#: ../../c-api/typeobj.rst:130
msgid ":c:member:`~PyTypeObject.tp_is_gc`"
msgstr ":c:member:`~PyTypeObject.tp_is_gc`"

#: ../../c-api/typeobj.rst:132
msgid "<:c:member:`~PyTypeObject.tp_bases`>"
msgstr "<:c:member:`~PyTypeObject.tp_bases`>"

#: ../../c-api/typeobj.rst:132
msgid "__bases__"
msgstr "baser"

#: ../../c-api/typeobj.rst:132 ../../c-api/typeobj.rst:134
msgid "~"
msgstr "~"

#: ../../c-api/typeobj.rst:134
msgid "<:c:member:`~PyTypeObject.tp_mro`>"
msgstr "<:c:member:`~PyTypeObject.tp_mro`>"

#: ../../c-api/typeobj.rst:134
msgid "__mro__"
msgstr "det är inte sant"

#: ../../c-api/typeobj.rst:136
msgid "[:c:member:`~PyTypeObject.tp_cache`]"
msgstr "[:c:member:`~PyTypeObject.tp_cache`]"

#: ../../c-api/typeobj.rst:138
msgid "[:c:member:`~PyTypeObject.tp_subclasses`]"
msgstr "[:c:member:`~PyTypeObject.tp_subclasses`]"

#: ../../c-api/typeobj.rst:138
msgid "__subclasses__"
msgstr "__underklasser"

#: ../../c-api/typeobj.rst:140
msgid "[:c:member:`~PyTypeObject.tp_weaklist`]"
msgstr "[:c:member:`~PyTypeObject.tp_weaklist`]"

#: ../../c-api/typeobj.rst:142
msgid "(:c:member:`~PyTypeObject.tp_del`)"
msgstr "(:c:member:`~PyTypeObject.tp_del`)"

#: ../../c-api/typeobj.rst:144
msgid "[:c:member:`~PyTypeObject.tp_version_tag`]"
msgstr "[:c:member:`~PyTypeObject.tp_version_tag`]"

#: ../../c-api/typeobj.rst:144
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/typeobj.rst:146
msgid ":c:member:`~PyTypeObject.tp_finalize`"
msgstr ":c:member:`~PyTypeObject.tp_finalize`"

#: ../../c-api/typeobj.rst:146
msgid "__del__"
msgstr "__del__"

#: ../../c-api/typeobj.rst:148
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/typeobj.rst:148
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vektorcallfunc`"

#: ../../c-api/typeobj.rst:152
msgid ""
"A slot name in parentheses indicates it is (effectively) deprecated. Names "
"in angle brackets should be treated as read-only. Names in square brackets "
"are for internal use only. \"<R>\" (as a prefix) means the field is required"
" (must be non-``NULL``)."
msgstr ""

#: ../../c-api/typeobj.rst:156
msgid "Columns:"
msgstr "Kolumner:"

#: ../../c-api/typeobj.rst:158
msgid "**\"O\"**:  set on :c:type:`PyBaseObject_Type`"
msgstr ""

#: ../../c-api/typeobj.rst:160
msgid "**\"T\"**:  set on :c:type:`PyType_Type`"
msgstr ""

#: ../../c-api/typeobj.rst:162
msgid "**\"D\"**:  default (if slot is set to ``NULL``)"
msgstr "**\"D\"**: standard (om slot är inställd på ``NULL``)"

#: ../../c-api/typeobj.rst:172
msgid "**\"I\"**:  inheritance"
msgstr "**\"I\"**: arv"

#: ../../c-api/typeobj.rst:181
msgid ""
"Note that some slots are effectively inherited through the normal attribute "
"lookup chain."
msgstr ""
"Observera att vissa slots faktiskt ärvs genom den normala "
"attributuppslagningskedjan."

#: ../../c-api/typeobj.rst:187
msgid "sub-slots"
msgstr "underluckor"

#: ../../c-api/typeobj.rst:193
msgid "Slot"
msgstr "Tidslucka"

#: ../../c-api/typeobj.rst:193
msgid "special methods"
msgstr "särskilda metoder"

#: ../../c-api/typeobj.rst:196
msgid ":c:member:`~PyAsyncMethods.am_await`"
msgstr ":c:member:`~PyAsyncMethods.am_await`"

#: ../../c-api/typeobj.rst:196 ../../c-api/typeobj.rst:198
#: ../../c-api/typeobj.rst:200 ../../c-api/typeobj.rst:232
#: ../../c-api/typeobj.rst:234 ../../c-api/typeobj.rst:236
#: ../../c-api/typeobj.rst:240 ../../c-api/typeobj.rst:267
#: ../../c-api/typeobj.rst:271 ../../c-api/typeobj.rst:281
#: ../../c-api/typeobj.rst:421
msgid ":c:type:`unaryfunc`"
msgstr ":c:type:`unaryfunc`"

#: ../../c-api/typeobj.rst:196
msgid "__await__"
msgstr "vänta.."

#: ../../c-api/typeobj.rst:198
msgid ":c:member:`~PyAsyncMethods.am_aiter`"
msgstr ":c:member:`~PyAsyncMethods.am_aiter`"

#: ../../c-api/typeobj.rst:198
msgid "__aiter__"
msgstr "__aiter__"

#: ../../c-api/typeobj.rst:200
msgid ":c:member:`~PyAsyncMethods.am_anext`"
msgstr ":c:member:`~PyAsyncMethods.am_anext`"

#: ../../c-api/typeobj.rst:200
msgid "__anext__"
msgstr "__anext__"

#: ../../c-api/typeobj.rst:204
msgid ":c:member:`~PyNumberMethods.nb_add`"
msgstr ":c:member:`~PyNumberMethods.nb_add`"

#: ../../c-api/typeobj.rst:204 ../../c-api/typeobj.rst:207
#: ../../c-api/typeobj.rst:209 ../../c-api/typeobj.rst:212
#: ../../c-api/typeobj.rst:214 ../../c-api/typeobj.rst:217
#: ../../c-api/typeobj.rst:219 ../../c-api/typeobj.rst:222
#: ../../c-api/typeobj.rst:224 ../../c-api/typeobj.rst:242
#: ../../c-api/typeobj.rst:245 ../../c-api/typeobj.rst:247
#: ../../c-api/typeobj.rst:250 ../../c-api/typeobj.rst:252
#: ../../c-api/typeobj.rst:255 ../../c-api/typeobj.rst:257
#: ../../c-api/typeobj.rst:260 ../../c-api/typeobj.rst:262
#: ../../c-api/typeobj.rst:265 ../../c-api/typeobj.rst:273
#: ../../c-api/typeobj.rst:275 ../../c-api/typeobj.rst:277
#: ../../c-api/typeobj.rst:279 ../../c-api/typeobj.rst:283
#: ../../c-api/typeobj.rst:286 ../../c-api/typeobj.rst:292
#: ../../c-api/typeobj.rst:301 ../../c-api/typeobj.rst:312
#: ../../c-api/typeobj.rst:425
msgid ":c:type:`binaryfunc`"
msgstr ":c:type:`binaryfunc`"

#: ../../c-api/typeobj.rst:204
msgid "__add__ __radd__"
msgstr "__add__ __radd__"

#: ../../c-api/typeobj.rst:207
msgid ":c:member:`~PyNumberMethods.nb_inplace_add`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_add`"

#: ../../c-api/typeobj.rst:207 ../../c-api/typeobj.rst:312
msgid "__iadd__"
msgstr "__iadd__"

#: ../../c-api/typeobj.rst:209
msgid ":c:member:`~PyNumberMethods.nb_subtract`"
msgstr ":c:member:`~PyNumberMethods.nb_subtract`"

#: ../../c-api/typeobj.rst:209
msgid "__sub__ __rsub__"
msgstr "__sub__ __rsub__"

#: ../../c-api/typeobj.rst:212
msgid ":c:member:`~PyNumberMethods.nb_inplace_subtract`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_subtract`"

#: ../../c-api/typeobj.rst:212
msgid "__isub__"
msgstr "__isub__"

#: ../../c-api/typeobj.rst:214
msgid ":c:member:`~PyNumberMethods.nb_multiply`"
msgstr ":c:member:`~PyNumberMethods.nb_multiply`"

#: ../../c-api/typeobj.rst:214
msgid "__mul__ __rmul__"
msgstr "__mul__ __rmul__"

#: ../../c-api/typeobj.rst:217
msgid ":c:member:`~PyNumberMethods.nb_inplace_multiply`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_multiply`"

#: ../../c-api/typeobj.rst:217 ../../c-api/typeobj.rst:314
msgid "__imul__"
msgstr "__imul__"

#: ../../c-api/typeobj.rst:219
msgid ":c:member:`~PyNumberMethods.nb_remainder`"
msgstr ":c:member:`~PyNumberMethods.nb_remainder`"

#: ../../c-api/typeobj.rst:219
msgid "__mod__ __rmod__"
msgstr "__mod__ __rmod__"

#: ../../c-api/typeobj.rst:222
msgid ":c:member:`~PyNumberMethods.nb_inplace_remainder`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_remainder`"

#: ../../c-api/typeobj.rst:222
msgid "__imod__"
msgstr "__imod__"

#: ../../c-api/typeobj.rst:224
msgid ":c:member:`~PyNumberMethods.nb_divmod`"
msgstr ":c:member:`~PyNumberMethods.nb_divmod`"

#: ../../c-api/typeobj.rst:224
msgid "__divmod__ __rdivmod__"
msgstr "__divmod__ __rdivmod__"

#: ../../c-api/typeobj.rst:227
msgid ":c:member:`~PyNumberMethods.nb_power`"
msgstr ":c:member:`~PyNumberMethods.nb_power`"

#: ../../c-api/typeobj.rst:227
msgid "__pow__ __rpow__"
msgstr "__pow__ __rpow__"

#: ../../c-api/typeobj.rst:230
msgid ":c:member:`~PyNumberMethods.nb_inplace_power`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_power`"

#: ../../c-api/typeobj.rst:230
msgid "__ipow__"
msgstr "__ipow__"

#: ../../c-api/typeobj.rst:232
msgid ":c:member:`~PyNumberMethods.nb_negative`"
msgstr ":c:member:`~PyNumberMethods.nb_negative`"

#: ../../c-api/typeobj.rst:232
msgid "__neg__"
msgstr "__neg__"

#: ../../c-api/typeobj.rst:234
msgid ":c:member:`~PyNumberMethods.nb_positive`"
msgstr ":c:member:`~PyNumberMethods.nb_positive`"

#: ../../c-api/typeobj.rst:234
msgid "__pos__"
msgstr "__pos__"

#: ../../c-api/typeobj.rst:236
msgid ":c:member:`~PyNumberMethods.nb_absolute`"
msgstr ":c:member:`~PyNumberMethods.nb_absolute`"

#: ../../c-api/typeobj.rst:236
msgid "__abs__"
msgstr "det är inte sant"

#: ../../c-api/typeobj.rst:238
msgid ":c:member:`~PyNumberMethods.nb_bool`"
msgstr ":c:member:`~PyNumberMethods.nb_bool`"

#: ../../c-api/typeobj.rst:238
msgid "__bool__"
msgstr "__bool"

#: ../../c-api/typeobj.rst:240
msgid ":c:member:`~PyNumberMethods.nb_invert`"
msgstr ":c:member:`~PyNumberMethods.nb_invert`"

#: ../../c-api/typeobj.rst:240
msgid "__invert__"
msgstr "__invertera__"

#: ../../c-api/typeobj.rst:242
msgid ":c:member:`~PyNumberMethods.nb_lshift`"
msgstr ":c:member:`~PyNumberMethods.nb_lshift`"

#: ../../c-api/typeobj.rst:242
msgid "__lshift__ __rlshift__"
msgstr "__lshift__ __rlshift__"

#: ../../c-api/typeobj.rst:245
msgid ":c:member:`~PyNumberMethods.nb_inplace_lshift`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_lshift`"

#: ../../c-api/typeobj.rst:245
msgid "__ilshift__"
msgstr "__ilshift__"

#: ../../c-api/typeobj.rst:247
msgid ":c:member:`~PyNumberMethods.nb_rshift`"
msgstr ":c:member:`~PyNumberMethods.nb_rshift`"

#: ../../c-api/typeobj.rst:247
msgid "__rshift__ __rrshift__"
msgstr "__rshift__ __rshift__ __rshift__"

#: ../../c-api/typeobj.rst:250
msgid ":c:member:`~PyNumberMethods.nb_inplace_rshift`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_rshift`"

#: ../../c-api/typeobj.rst:250
msgid "__irshift__"
msgstr "jag har inte tid"

#: ../../c-api/typeobj.rst:252
msgid ":c:member:`~PyNumberMethods.nb_and`"
msgstr ":c:member:`~PyNumberMethods.nb_and`"

#: ../../c-api/typeobj.rst:252
msgid "__and__ __rand__"
msgstr "__and__ __rand__"

#: ../../c-api/typeobj.rst:255
msgid ":c:member:`~PyNumberMethods.nb_inplace_and`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_and`"

#: ../../c-api/typeobj.rst:255
msgid "__iand__"
msgstr "__iand__"

#: ../../c-api/typeobj.rst:257
msgid ":c:member:`~PyNumberMethods.nb_xor`"
msgstr ":c:member:`~PyNumberMethods.nb_xor`"

#: ../../c-api/typeobj.rst:257
msgid "__xor__ __rxor__"
msgstr "__xor__ __rxor__"

#: ../../c-api/typeobj.rst:260
msgid ":c:member:`~PyNumberMethods.nb_inplace_xor`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_xor`"

#: ../../c-api/typeobj.rst:260
msgid "__ixor__"
msgstr "__ixor__"

#: ../../c-api/typeobj.rst:262
msgid ":c:member:`~PyNumberMethods.nb_or`"
msgstr ":c:member:`~PyNumberMethods.nb_or`"

#: ../../c-api/typeobj.rst:262
msgid "__or__ __ror__"
msgstr "__eller__ __ror__"

#: ../../c-api/typeobj.rst:265
msgid ":c:member:`~PyNumberMethods.nb_inplace_or`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_or`"

#: ../../c-api/typeobj.rst:265
msgid "__ior__"
msgstr "jag är inte här"

#: ../../c-api/typeobj.rst:267
msgid ":c:member:`~PyNumberMethods.nb_int`"
msgstr ":c:member:`~PyNumberMethods.nb_int`"

#: ../../c-api/typeobj.rst:267
msgid "__int__"
msgstr "__int__"

#: ../../c-api/typeobj.rst:269
msgid ":c:member:`~PyNumberMethods.nb_reserved`"
msgstr ":c:member:`~PyNumberMethods.nb_reserved`"

#: ../../c-api/typeobj.rst:269 ../../c-api/typeobj.rst:336
#: ../../c-api/typeobj.rst:338 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:419
msgid "void *"
msgstr "tomrum *"

#: ../../c-api/typeobj.rst:271
msgid ":c:member:`~PyNumberMethods.nb_float`"
msgstr ":c:member:`~PyNumberMethods.nb_float`"

#: ../../c-api/typeobj.rst:271
msgid "__float__"
msgstr "__flödesvärde"

#: ../../c-api/typeobj.rst:273
msgid ":c:member:`~PyNumberMethods.nb_floor_divide`"
msgstr ":c:member:`~PyNumberMethods.nb_floor_divide`"

#: ../../c-api/typeobj.rst:273
msgid "__floordiv__"
msgstr "__floordiv__"

#: ../../c-api/typeobj.rst:275
msgid ":c:member:`~PyNumberMethods.nb_inplace_floor_divide`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_floor_divide`"

#: ../../c-api/typeobj.rst:275
msgid "__ifloordiv__"
msgstr "__ifloordiv__"

#: ../../c-api/typeobj.rst:277
msgid ":c:member:`~PyNumberMethods.nb_true_divide`"
msgstr ":c:member:`~PyNumberMethods.nb_true_divide`"

#: ../../c-api/typeobj.rst:277
msgid "__truediv__"
msgstr "__truediv__"

#: ../../c-api/typeobj.rst:279
msgid ":c:member:`~PyNumberMethods.nb_inplace_true_divide`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_true_divide`"

#: ../../c-api/typeobj.rst:279
msgid "__itruediv__"
msgstr "__itruediv__"

#: ../../c-api/typeobj.rst:281
msgid ":c:member:`~PyNumberMethods.nb_index`"
msgstr ":c:member:`~PyNumberMethods.nb_index`"

#: ../../c-api/typeobj.rst:281
msgid "__index__"
msgstr "__index__"

#: ../../c-api/typeobj.rst:283
msgid ":c:member:`~PyNumberMethods.nb_matrix_multiply`"
msgstr ":c:member:`~PyNumberMethods.nb_matrix_multiply`"

#: ../../c-api/typeobj.rst:283
msgid "__matmul__ __rmatmul__"
msgstr "__matmul__ __rmatmul__"

#: ../../c-api/typeobj.rst:286
msgid ":c:member:`~PyNumberMethods.nb_inplace_matrix_multiply`"
msgstr ":c:member:`~PyNumberMethods.nb_inplace_matrix_multiply`"

#: ../../c-api/typeobj.rst:286
msgid "__imatmul__"
msgstr "__imatmul__"

#: ../../c-api/typeobj.rst:290
msgid ":c:member:`~PyMappingMethods.mp_length`"
msgstr ":c:member:`~PyMappingMethods.mp_length`"

#: ../../c-api/typeobj.rst:290 ../../c-api/typeobj.rst:299
#: ../../c-api/typeobj.rst:406
msgid ":c:type:`lenfunc`"
msgstr ":c:type:`lenfunc`"

#: ../../c-api/typeobj.rst:290 ../../c-api/typeobj.rst:299
msgid "__len__"
msgstr "__len__"

#: ../../c-api/typeobj.rst:292
msgid ":c:member:`~PyMappingMethods.mp_subscript`"
msgstr ":c:member:`~PyMappingMethods.mp_subscript`"

#: ../../c-api/typeobj.rst:292 ../../c-api/typeobj.rst:305
msgid "__getitem__"
msgstr "__hämta objekt"

#: ../../c-api/typeobj.rst:294
msgid ":c:member:`~PyMappingMethods.mp_ass_subscript`"
msgstr ":c:member:`~PyMappingMethods.mp_ass_subscript`"

#: ../../c-api/typeobj.rst:294 ../../c-api/typeobj.rst:451
msgid ":c:type:`objobjargproc`"
msgstr ":c:type:`objobjargproc`"

#: ../../c-api/typeobj.rst:294
msgid "__setitem__, __delitem__"
msgstr "__sätt objekt__, __ta bort objekt"

#: ../../c-api/typeobj.rst:299
msgid ":c:member:`~PySequenceMethods.sq_length`"
msgstr ":c:member:`~PySequenceMethods.sq_length`"

#: ../../c-api/typeobj.rst:301
msgid ":c:member:`~PySequenceMethods.sq_concat`"
msgstr ":c:member:`~PySequenceMethods.sq_concat`"

#: ../../c-api/typeobj.rst:301
msgid "__add__"
msgstr "__tillägg__"

#: ../../c-api/typeobj.rst:303
msgid ":c:member:`~PySequenceMethods.sq_repeat`"
msgstr ":c:member:`~PySequenceMethods.sq_repeat`"

#: ../../c-api/typeobj.rst:303 ../../c-api/typeobj.rst:305
#: ../../c-api/typeobj.rst:314 ../../c-api/typeobj.rst:436
msgid ":c:type:`ssizeargfunc`"
msgstr ":c:type:`ssizeargfunc`"

#: ../../c-api/typeobj.rst:303
msgid "__mul__"
msgstr "__mul__"

#: ../../c-api/typeobj.rst:305
msgid ":c:member:`~PySequenceMethods.sq_item`"
msgstr ":c:member:`~PySequenceMethods.sq_item`"

#: ../../c-api/typeobj.rst:307
msgid ":c:member:`~PySequenceMethods.sq_ass_item`"
msgstr ":c:member:`~PySequenceMethods.sq_ass_item`"

#: ../../c-api/typeobj.rst:307 ../../c-api/typeobj.rst:441
msgid ":c:type:`ssizeobjargproc`"
msgstr ":c:type:`ssizeobjargproc`"

#: ../../c-api/typeobj.rst:307
msgid "__setitem__ __delitem__"
msgstr "__setitem__ __delitem__"

#: ../../c-api/typeobj.rst:310
msgid ":c:member:`~PySequenceMethods.sq_contains`"
msgstr ":c:member:`~PySequenceMethods.sq_contains`"

#: ../../c-api/typeobj.rst:310 ../../c-api/typeobj.rst:446
msgid ":c:type:`objobjproc`"
msgstr ":c:type:`objobjproc`"

#: ../../c-api/typeobj.rst:310
msgid "__contains__"
msgstr "innehåller"

#: ../../c-api/typeobj.rst:312
msgid ":c:member:`~PySequenceMethods.sq_inplace_concat`"
msgstr ":c:member:`~PySequenceMethods.sq_inplace_concat`"

#: ../../c-api/typeobj.rst:314
msgid ":c:member:`~PySequenceMethods.sq_inplace_repeat`"
msgstr ":c:member:`~PySequenceMethods.sq_inplace_repeat`"

#: ../../c-api/typeobj.rst:318
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: ../../c-api/typeobj.rst:318
msgid ":c:func:`getbufferproc`"
msgstr ":c:func:`getbufferproc`"

#: ../../c-api/typeobj.rst:320
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: ../../c-api/typeobj.rst:320
msgid ":c:func:`releasebufferproc`"
msgstr ":c:func:`releasebufferproc`"

#: ../../c-api/typeobj.rst:326
msgid "slot typedefs"
msgstr "slot typdefinitioner"

#: ../../c-api/typeobj.rst:329
msgid "typedef"
msgstr "typdefinierad"

#: ../../c-api/typeobj.rst:329
msgid "Parameter Types"
msgstr "Parametertyper"

#: ../../c-api/typeobj.rst:329
msgid "Return Type"
msgstr "Typ av retur"

#: ../../c-api/typeobj.rst:336 ../../c-api/typeobj.rst:338
#: ../../c-api/typeobj.rst:414
msgid "void"
msgstr "void"

#: ../../c-api/typeobj.rst:0
msgid ":c:type:`visitproc`"
msgstr ":c:type:`visitproc`"

#: ../../c-api/typeobj.rst:340 ../../c-api/typeobj.rst:352
#: ../../c-api/typeobj.rst:365 ../../c-api/typeobj.rst:376
#: ../../c-api/typeobj.rst:388 ../../c-api/typeobj.rst:0
#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:408
#: ../../c-api/typeobj.rst:419 ../../c-api/typeobj.rst:441
#: ../../c-api/typeobj.rst:446 ../../c-api/typeobj.rst:451
msgid "int"
msgstr "int"

#: ../../c-api/typeobj.rst:394
msgid "Py_hash_t"
msgstr "Py_hash_t"

#: ../../c-api/typeobj.rst:408
msgid ":c:type:`getbufferproc`"
msgstr ":c:type:`getbufferproc`"

#: ../../c-api/typeobj.rst:0 ../../c-api/typeobj.rst:0
msgid ":c:type:`Py_buffer` *"
msgstr ":c:type:`Py_buffer` *"

#: ../../c-api/typeobj.rst:414
msgid ":c:type:`releasebufferproc`"
msgstr ":c:type:`releasebufferproc`"

#: ../../c-api/typeobj.rst:458
msgid "See :ref:`slot-typedefs` below for more detail."
msgstr "Se :ref:`slot-typedefs` nedan för mer information."

#: ../../c-api/typeobj.rst:462
msgid "PyTypeObject Definition"
msgstr "PyTypeObject Definition"

#: ../../c-api/typeobj.rst:464
msgid ""
"The structure definition for :c:type:`PyTypeObject` can be found in "
":file:`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

#: ../../c-api/typeobj.rst:474
msgid "PyObject Slots"
msgstr "PyObject-spelautomater"

#: ../../c-api/typeobj.rst:476
msgid ""
"The type object structure extends the :c:type:`PyVarObject` structure. The "
":attr:`ob_size` field is used for dynamic types (created by "
":func:`type_new`, usually called from a class statement). Note that "
":c:data:`PyType_Type` (the metatype) initializes "
":c:member:`~PyTypeObject.tp_itemsize`, which means that its instances (i.e. "
"type objects) *must* have the :attr:`ob_size` field."
msgstr ""

#: ../../c-api/typeobj.rst:486
msgid ""
"These fields are only present when the macro ``Py_TRACE_REFS`` is defined. "
"Their initialization to ``NULL`` is taken care of by the "
"``PyObject_HEAD_INIT`` macro.  For statically allocated objects, these "
"fields always remain ``NULL``. For dynamically allocated objects, these two "
"fields are used to link the object into a doubly-linked list of *all* live "
"objects on the heap.  This could be used for various debugging purposes; "
"currently the only use is to print the objects that are still alive at the "
"end of a run when the environment variable :envvar:`PYTHONDUMPREFS` is set."
msgstr ""

#: ../../c-api/typeobj.rst:495 ../../c-api/typeobj.rst:508
#: ../../c-api/typeobj.rst:531 ../../c-api/typeobj.rst:544
#: ../../c-api/typeobj.rst:586 ../../c-api/typeobj.rst:629
#: ../../c-api/typeobj.rst:687 ../../c-api/typeobj.rst:731
#: ../../c-api/typeobj.rst:750 ../../c-api/typeobj.rst:767
#: ../../c-api/typeobj.rst:785 ../../c-api/typeobj.rst:809
#: ../../c-api/typeobj.rst:826 ../../c-api/typeobj.rst:838
#: ../../c-api/typeobj.rst:850 ../../c-api/typeobj.rst:883
#: ../../c-api/typeobj.rst:901 ../../c-api/typeobj.rst:921
#: ../../c-api/typeobj.rst:942 ../../c-api/typeobj.rst:968
#: ../../c-api/typeobj.rst:987 ../../c-api/typeobj.rst:1003
#: ../../c-api/typeobj.rst:1040 ../../c-api/typeobj.rst:1051
#: ../../c-api/typeobj.rst:1061 ../../c-api/typeobj.rst:1071
#: ../../c-api/typeobj.rst:1085 ../../c-api/typeobj.rst:1104
#: ../../c-api/typeobj.rst:1127 ../../c-api/typeobj.rst:1174
#: ../../c-api/typeobj.rst:1189 ../../c-api/typeobj.rst:1257
#: ../../c-api/typeobj.rst:1324 ../../c-api/typeobj.rst:1383
#: ../../c-api/typeobj.rst:1413 ../../c-api/typeobj.rst:1445
#: ../../c-api/typeobj.rst:1468 ../../c-api/typeobj.rst:1481
#: ../../c-api/typeobj.rst:1496 ../../c-api/typeobj.rst:1510
#: ../../c-api/typeobj.rst:1540 ../../c-api/typeobj.rst:1560
#: ../../c-api/typeobj.rst:1586 ../../c-api/typeobj.rst:1604
#: ../../c-api/typeobj.rst:1644 ../../c-api/typeobj.rst:1695
#: ../../c-api/typeobj.rst:1712 ../../c-api/typeobj.rst:1750
#: ../../c-api/typeobj.rst:1771 ../../c-api/typeobj.rst:1803
#: ../../c-api/typeobj.rst:1820 ../../c-api/typeobj.rst:1831
#: ../../c-api/typeobj.rst:1841 ../../c-api/typeobj.rst:1850
#: ../../c-api/typeobj.rst:1860 ../../c-api/typeobj.rst:1874
#: ../../c-api/typeobj.rst:1923 ../../c-api/typeobj.rst:1940
msgid "**Inheritance:**"
msgstr "**Arv:**"

#: ../../c-api/typeobj.rst:497
msgid "These fields are not inherited by subtypes."
msgstr ""

#: ../../c-api/typeobj.rst:502
msgid ""
"This is the type object's reference count, initialized to ``1`` by the "
"``PyObject_HEAD_INIT`` macro.  Note that for statically allocated type "
"objects, the type's instances (objects whose :attr:`ob_type` points back to "
"the type) do *not* count as references.  But for dynamically allocated type "
"objects, the instances *do* count as references."
msgstr ""

#: ../../c-api/typeobj.rst:510 ../../c-api/typeobj.rst:546
#: ../../c-api/typeobj.rst:588
msgid "This field is not inherited by subtypes."
msgstr "Detta fält ärvs inte av subtyper."

#: ../../c-api/typeobj.rst:515
msgid ""
"This is the type's type, in other words its metatype.  It is initialized by "
"the argument to the ``PyObject_HEAD_INIT`` macro, and its value should "
"normally be ``&PyType_Type``.  However, for dynamically loadable extension "
"modules that must be usable on Windows (at least), the compiler complains "
"that this is not a valid initializer.  Therefore, the convention is to pass "
"``NULL`` to the ``PyObject_HEAD_INIT`` macro and to initialize this field "
"explicitly at the start of the module's initialization function, before "
"doing anything else.  This is typically done like this::"
msgstr ""
"Detta är typens typ, med andra ord dess metatyp.  Den initialiseras av "
"argumentet till makrot ``PyObject_HEAD_INIT``, och dess värde bör normalt "
"vara ``&PyType_Type``.  Men för dynamiskt laddningsbara tilläggsmoduler som "
"måste kunna användas på Windows (åtminstone), klagar kompilatorn på att "
"detta inte är en giltig initierare.  Därför är konventionen att skicka "
"``NULL`` till makrot ``PyObject_HEAD_INIT`` och att initiera detta fält "
"explicit i början av modulens initialiseringsfunktion, innan något annat "
"görs.  Detta görs typiskt så här::"

#: ../../c-api/typeobj.rst:526
msgid ""
"This should be done before any instances of the type are created. "
":c:func:`PyType_Ready` checks if :attr:`ob_type` is ``NULL``, and if so, "
"initializes it to the :attr:`ob_type` field of the base class. "
":c:func:`PyType_Ready` will not change this field if it is non-zero."
msgstr ""

#: ../../c-api/typeobj.rst:533 ../../c-api/typeobj.rst:689
#: ../../c-api/typeobj.rst:811 ../../c-api/typeobj.rst:903
#: ../../c-api/typeobj.rst:923 ../../c-api/typeobj.rst:1447
#: ../../c-api/typeobj.rst:1470 ../../c-api/typeobj.rst:1588
#: ../../c-api/typeobj.rst:1606 ../../c-api/typeobj.rst:1697
#: ../../c-api/typeobj.rst:1805 ../../c-api/typeobj.rst:1925
msgid "This field is inherited by subtypes."
msgstr "Detta fält ärvs av subtyperna."

#: ../../c-api/typeobj.rst:537
msgid "PyVarObject Slots"
msgstr "PyVarObject platser"

#: ../../c-api/typeobj.rst:541
msgid ""
"For statically allocated type objects, this should be initialized to zero.  "
"For dynamically allocated type objects, this field has a special internal "
"meaning."
msgstr ""

#: ../../c-api/typeobj.rst:550
msgid "PyTypeObject Slots"
msgstr "PyTypeObject platser"

#: ../../c-api/typeobj.rst:552
msgid ""
"Each slot has a section describing inheritance.  If :c:func:`PyType_Ready` "
"may set a value when the field is set to ``NULL`` then there will also be a "
"\"Default\" section.  (Note that many fields set on "
":c:type:`PyBaseObject_Type` and :c:type:`PyType_Type` effectively act as "
"defaults.)"
msgstr ""

#: ../../c-api/typeobj.rst:559
msgid ""
"Pointer to a NUL-terminated string containing the name of the type. For "
"types that are accessible as module globals, the string should be the full "
"module name, followed by a dot, followed by the type name; for built-in "
"types, it should be just the type name.  If the module is a submodule of a "
"package, the full package name is part of the full module name.  For "
"example, a type named :class:`T` defined in module :mod:`M` in subpackage "
":mod:`Q` in package :mod:`P` should have the "
":c:member:`~PyTypeObject.tp_name` initializer ``\"P.Q.M.T\"``."
msgstr ""

#: ../../c-api/typeobj.rst:567
msgid ""
"For dynamically allocated type objects, this should just be the type name, "
"and the module name explicitly stored in the type dict as the value for key "
"``'__module__'``."
msgstr ""

#: ../../c-api/typeobj.rst:571
msgid ""
"For statically allocated type objects, the tp_name field should contain a "
"dot. Everything before the last dot is made accessible as the "
":attr:`__module__` attribute, and everything after the last dot is made "
"accessible as the :attr:`~definition.__name__` attribute."
msgstr ""

#: ../../c-api/typeobj.rst:576
msgid ""
"If no dot is present, the entire :c:member:`~PyTypeObject.tp_name` field is "
"made accessible as the :attr:`~definition.__name__` attribute, and the "
":attr:`__module__` attribute is undefined (unless explicitly set in the "
"dictionary, as explained above).  This means your type will be impossible to"
" pickle.  Additionally, it will not be listed in module documentations "
"created with pydoc."
msgstr ""

#: ../../c-api/typeobj.rst:582
msgid ""
"This field must not be ``NULL``.  It is the only required field in "
":c:func:`PyTypeObject` (other than potentially "
":c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""
"Detta fält får inte vara ``NULL``.  Det är det enda obligatoriska fältet i "
":c:func:`PyTypeObject` (förutom eventuellt "
":c:member:`~PyTypeObject.tp_itemsize`)."

#: ../../c-api/typeobj.rst:594
msgid ""
"These fields allow calculating the size in bytes of instances of the type."
msgstr ""
"Dessa fält gör det möjligt att beräkna storleken i bytes för instanser av "
"typen."

#: ../../c-api/typeobj.rst:596
msgid ""
"There are two kinds of types: types with fixed-length instances have a zero "
":c:member:`~PyTypeObject.tp_itemsize` field, types with variable-length "
"instances have a non-zero :c:member:`~PyTypeObject.tp_itemsize` field.  For "
"a type with fixed-length instances, all instances have the same size, given "
"in :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../../c-api/typeobj.rst:601
msgid ""
"For a type with variable-length instances, the instances must have an "
":attr:`ob_size` field, and the instance size is "
":c:member:`~PyTypeObject.tp_basicsize` plus N times "
":c:member:`~PyTypeObject.tp_itemsize`, where N is the \"length\" of the "
"object.  The value of N is typically stored in the instance's "
":attr:`ob_size` field.  There are exceptions:  for example, ints use a "
"negative :attr:`ob_size` to indicate a negative number, and N is "
"``abs(ob_size)`` there.  Also, the presence of an :attr:`ob_size` field in "
"the instance layout doesn't mean that the instance structure is variable-"
"length (for example, the structure for the list type has fixed-length "
"instances, yet those instances have a meaningful :attr:`ob_size` field)."
msgstr ""

#: ../../c-api/typeobj.rst:612
msgid ""
"The basic size includes the fields in the instance declared by the macro "
":c:macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is used "
"to declare the instance struct) and this in turn includes the "
":attr:`_ob_prev` and :attr:`_ob_next` fields if they are present.  This "
"means that the only correct way to get an initializer for the "
":c:member:`~PyTypeObject.tp_basicsize` is to use the ``sizeof`` operator on "
"the struct used to declare the instance layout. The basic size does not "
"include the GC header size."
msgstr ""

#: ../../c-api/typeobj.rst:620
msgid ""
"A note about alignment: if the variable items require a particular "
"alignment, this should be taken care of by the value of "
":c:member:`~PyTypeObject.tp_basicsize`.  Example: suppose a type implements "
"an array of ``double``. :c:member:`~PyTypeObject.tp_itemsize` is "
"``sizeof(double)``. It is the programmer's responsibility that "
":c:member:`~PyTypeObject.tp_basicsize` is a multiple of ``sizeof(double)`` "
"(assuming this is the alignment requirement for ``double``)."
msgstr ""

#: ../../c-api/typeobj.rst:627
msgid ""
"For any type with variable-length instances, this field must not be "
"``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:631
msgid ""
"These fields are inherited separately by subtypes.  If the base type has a "
"non-zero :c:member:`~PyTypeObject.tp_itemsize`, it is generally not safe to "
"set :c:member:`~PyTypeObject.tp_itemsize` to a different non-zero value in a"
" subtype (though this depends on the implementation of the base type)."
msgstr ""

#: ../../c-api/typeobj.rst:639
msgid ""
"A pointer to the instance destructor function.  This function must be "
"defined unless the type guarantees that its instances will never be "
"deallocated (as is the case for the singletons ``None`` and ``Ellipsis``).  "
"The function signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:645
msgid ""
"The destructor function is called by the :c:func:`Py_DECREF` and "
":c:func:`Py_XDECREF` macros when the new reference count is zero.  At this "
"point, the instance is still in existence, but there are no references to "
"it.  The destructor function should free all references which the instance "
"owns, free all memory buffers owned by the instance (using the freeing "
"function corresponding to the allocation function used to allocate the "
"buffer), and call the type's :c:member:`~PyTypeObject.tp_free` function.  If"
" the type is not subtypable (doesn't have the :const:`Py_TPFLAGS_BASETYPE` "
"flag bit set), it is permissible to call the object deallocator directly "
"instead of via :c:member:`~PyTypeObject.tp_free`.  The object deallocator "
"should be the one used to allocate the instance; this is normally "
":c:func:`PyObject_Del` if the instance was allocated using "
":c:func:`PyObject_New` or :c:func:`PyObject_VarNew`, or "
":c:func:`PyObject_GC_Del` if the instance was allocated using "
":c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

#: ../../c-api/typeobj.rst:660
msgid ""
"If the type supports garbage collection (has the :const:`Py_TPFLAGS_HAVE_GC`"
" flag bit set), the destructor should call :c:func:`PyObject_GC_UnTrack` "
"before clearing any member fields."
msgstr ""

#: ../../c-api/typeobj.rst:672
msgid ""
"Finally, if the type is heap allocated (:const:`Py_TPFLAGS_HEAPTYPE`), the "
"deallocator should decrement the reference count for its type object after "
"calling the type deallocator. In order to avoid dangling pointers, the "
"recommended way to achieve this is:"
msgstr ""

#: ../../c-api/typeobj.rst:694
msgid ""
"An optional offset to a per-instance function that implements calling the "
"object using the :ref:`vectorcall protocol <vectorcall>`, a more efficient "
"alternative of the simpler :c:member:`~PyTypeObject.tp_call`."
msgstr ""
"En valfri offset till en funktion per instans som implementerar anrop av "
"objektet med hjälp av :ref:`vectorcall-protokollet <vectorcall>`, ett "
"effektivare alternativ till den enklare :c:member:`~PyTypeObject.tp_call`."

#: ../../c-api/typeobj.rst:699
msgid ""
"This field is only used if the flag :const:`Py_TPFLAGS_HAVE_VECTORCALL` is "
"set. If so, this must be a positive integer containing the offset in the "
"instance of a :c:type:`vectorcallfunc` pointer."
msgstr ""

#: ../../c-api/typeobj.rst:703
msgid ""
"The *vectorcallfunc* pointer may be ``NULL``, in which case the instance "
"behaves as if :const:`Py_TPFLAGS_HAVE_VECTORCALL` was not set: calling the "
"instance falls back to :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../../c-api/typeobj.rst:707
msgid ""
"Any class that sets ``Py_TPFLAGS_HAVE_VECTORCALL`` must also set "
":c:member:`~PyTypeObject.tp_call` and make sure its behaviour is consistent "
"with the *vectorcallfunc* function. This can be done by setting *tp_call* to"
" :c:func:`PyVectorcall_Call`."
msgstr ""
"Alla klasser som ställer in ``Py_TPFLAGS_HAVE_VECTORCALL`` måste också "
"ställa in :c:member:`~PyTypeObject.tp_call` och se till att dess beteende är"
" förenligt med funktionen *vectorcallfunc*. Detta kan göras genom att ställa"
" in *tp_call* till :c:func:`PyVectorcall_Call`."

#: ../../c-api/typeobj.rst:714
msgid ""
"It is not recommended for :ref:`heap types <heap-types>` to implement the "
"vectorcall protocol. When a user sets :attr:`__call__` in Python code, only "
"*tp_call* is updated, likely making it inconsistent with the vectorcall "
"function."
msgstr ""

#: ../../c-api/typeobj.rst:721
msgid ""
"The semantics of the ``tp_vectorcall_offset`` slot are provisional and "
"expected to be finalized in Python 3.9. If you use vectorcall, plan for "
"updating your code for Python 3.9."
msgstr ""

#: ../../c-api/typeobj.rst:727
msgid ""
"Before version 3.8, this slot was named ``tp_print``. In Python 2.x, it was "
"used for printing to a file. In Python 3.0 to 3.7, it was unused."
msgstr ""
"Före version 3.8 hette denna slot ``tp_print``. I Python 2.x användes den "
"för utskrift till en fil. I Python 3.0 till 3.7 var den oanvänd."

#: ../../c-api/typeobj.rst:733
msgid ""
"This field is always inherited. However, the "
":const:`Py_TPFLAGS_HAVE_VECTORCALL` flag is not always inherited. If it's "
"not, then the subclass won't use :ref:`vectorcall <vectorcall>`, except when"
" :c:func:`PyVectorcall_Call` is explicitly called. This is in particular the"
" case for `heap types`_ (including subclasses defined in Python)."
msgstr ""

#: ../../c-api/typeobj.rst:744
msgid "An optional pointer to the get-attribute-string function."
msgstr "En valfri pekare till funktionen get-attribute-string."

#: ../../c-api/typeobj.rst:746
msgid ""
"This field is deprecated.  When it is defined, it should point to a function"
" that acts the same as the :c:member:`~PyTypeObject.tp_getattro` function, "
"but taking a C string instead of a Python string object to give the "
"attribute name."
msgstr ""
"Detta fält är föråldrat.  När det definieras bör det peka på en funktion som"
" fungerar på samma sätt som "
":c:member:`~PyTypeObject.tp_getattro`-funktionen, men som tar en C-sträng "
"istället för ett Python-strängobjekt för att ge attributnamnet."

#: ../../c-api/typeobj.rst:752 ../../c-api/typeobj.rst:944
msgid "Group: :attr:`tp_getattr`, :attr:`tp_getattro`"
msgstr ""

#: ../../c-api/typeobj.rst:754
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_getattro`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` from its base type when the subtype's "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_getattro`: en subtyp ärver både "
":c:member:`~PyTypeObject.tp_getattr` och "
":c:member:`~PyTypeObject.tp_getattro` från sin bastyp när subtypens "
":c:member:`~PyTypeObject.tp_getattr` och "
":c:member:`~PyTypeObject.tp_getattro` båda är ``NULL``."

#: ../../c-api/typeobj.rst:761 ../../c-api/typeobj.rst:957
msgid ""
"An optional pointer to the function for setting and deleting attributes."
msgstr ""
"En valfri pekare till funktionen för att ställa in och ta bort attribut."

#: ../../c-api/typeobj.rst:763
msgid ""
"This field is deprecated.  When it is defined, it should point to a function"
" that acts the same as the :c:member:`~PyTypeObject.tp_setattro` function, "
"but taking a C string instead of a Python string object to give the "
"attribute name."
msgstr ""
"Detta fält är föråldrat.  När det definieras bör det peka på en funktion som"
" fungerar på samma sätt som "
":c:member:`~PyTypeObject.tp_setattro`-funktionen, men som tar en C-sträng "
"istället för ett Python-strängobjekt för att ge attributnamnet."

#: ../../c-api/typeobj.rst:769 ../../c-api/typeobj.rst:970
msgid "Group: :attr:`tp_setattr`, :attr:`tp_setattro`"
msgstr ""

#: ../../c-api/typeobj.rst:771
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_setattro`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` from its base type when the subtype's "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_setattro`: en subtyp ärver både "
":c:member:`~PyTypeObject.tp_setattr` och "
":c:member:`~PyTypeObject.tp_setattro` från sin bastyp när subtypens "
":c:member:`~PyTypeObject.tp_setattr` och "
":c:member:`~PyTypeObject.tp_setattro` båda är ``NULL``."

#: ../../c-api/typeobj.rst:778
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement :term:`awaitable` and :term:`asynchronous iterator` "
"protocols at the C-level.  See :ref:`async-structs` for details."
msgstr ""
"Pekare till en ytterligare struktur som innehåller fält som endast är "
"relevanta för objekt som implementerar protokollen :term:`awaitable` och "
":term:`asynchronous iterator` på C-nivå.  Se :ref:`async-structs` för "
"detaljer."

#: ../../c-api/typeobj.rst:782
msgid "Formerly known as ``tp_compare`` and ``tp_reserved``."
msgstr "Tidigare känd som ``tp_compare`` och ``tp_reserved``."

#: ../../c-api/typeobj.rst:787
msgid ""
"The :c:member:`~PyTypeObject.tp_as_async` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""
"Fältet :c:member:`~PyTypeObject.tp_as_async` ärvs inte, men de ingående "
"fälten ärvs individuellt."

#: ../../c-api/typeobj.rst:795
msgid ""
"An optional pointer to a function that implements the built-in function "
":func:`repr`."
msgstr ""
"En valfri pekare till en funktion som implementerar den inbyggda funktionen "
":func:`repr`."

#: ../../c-api/typeobj.rst:798
msgid "The signature is the same as for :c:func:`PyObject_Repr`::"
msgstr "Signaturen är densamma som för :c:func:`PyObject_Repr`::"

#: ../../c-api/typeobj.rst:802
msgid ""
"The function must return a string or a Unicode object.  Ideally, this "
"function should return a string that, when passed to :func:`eval`, given a "
"suitable environment, returns an object with the same value.  If this is not"
" feasible, it should return a string starting with ``'<'`` and ending with "
"``'>'`` from which both the type and the value of the object can be deduced."
msgstr ""
"Funktionen måste returnera en sträng eller ett Unicode-objekt.  Helst ska "
"denna funktion returnera en sträng som, när den skickas till :func:`eval`, i"
" en lämplig miljö, returnerar ett objekt med samma värde.  Om detta inte är "
"möjligt, bör den returnera en sträng som börjar med ``'<'`` och slutar med "
"``'>'`` från vilken både typen och värdet på objektet kan härledas."

#: ../../c-api/typeobj.rst:813 ../../c-api/typeobj.rst:925
#: ../../c-api/typeobj.rst:950 ../../c-api/typeobj.rst:976
#: ../../c-api/typeobj.rst:1018 ../../c-api/typeobj.rst:1392
#: ../../c-api/typeobj.rst:1544 ../../c-api/typeobj.rst:1565
#: ../../c-api/typeobj.rst:1663 ../../c-api/typeobj.rst:1699
#: ../../c-api/typeobj.rst:1717 ../../c-api/typeobj.rst:1755
#: ../../c-api/typeobj.rst:1776 ../../c-api/typeobj.rst:1807
msgid "**Default:**"
msgstr "**Förval:**"

#: ../../c-api/typeobj.rst:815
msgid ""
"When this field is not set, a string of the form ``<%s object at %p>`` is "
"returned, where ``%s`` is replaced by the type name, and ``%p`` by the "
"object's memory address."
msgstr ""
"Om detta fält inte är inställt returneras en sträng av formen ``<%s object "
"at %p>``, där ``%s`` ersätts av typnamnet och ``%p`` av objektets "
"minnesadress."

#: ../../c-api/typeobj.rst:822
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the number protocol.  These fields are documented in"
" :ref:`number-structs`."
msgstr ""
"Pekare till en ytterligare struktur som innehåller fält som endast är "
"relevanta för objekt som implementerar nummerprotokollet.  Dessa fält är "
"dokumenterade i :ref:`number-structs`."

#: ../../c-api/typeobj.rst:828
msgid ""
"The :c:member:`~PyTypeObject.tp_as_number` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""
"Fältet :c:member:`~PyTypeObject.tp_as_number` ärvs inte, men de ingående "
"fälten ärvs individuellt."

#: ../../c-api/typeobj.rst:834
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the sequence protocol.  These fields are documented "
"in :ref:`sequence-structs`."
msgstr ""
"Pekare till en ytterligare struktur som innehåller fält som endast är "
"relevanta för objekt som implementerar sekvensprotokollet.  Dessa fält är "
"dokumenterade i :ref:`sequence-structs`."

#: ../../c-api/typeobj.rst:840
msgid ""
"The :c:member:`~PyTypeObject.tp_as_sequence` field is not inherited, but the"
" contained fields are inherited individually."
msgstr ""
"Fältet :c:member:`~PyTypeObject.tp_as_sequence` ärvs inte, men de ingående "
"fälten ärvs individuellt."

#: ../../c-api/typeobj.rst:846
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the mapping protocol.  These fields are documented "
"in :ref:`mapping-structs`."
msgstr ""
"Pekare till en ytterligare struktur som innehåller fält som endast är "
"relevanta för objekt som implementerar mappningsprotokollet.  Dessa fält är "
"dokumenterade i :ref:`mapping-structs`."

#: ../../c-api/typeobj.rst:852
msgid ""
"The :c:member:`~PyTypeObject.tp_as_mapping` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""
"Fältet :c:member:`~PyTypeObject.tp_as_mapping` ärvs inte, men de ingående "
"fälten ärvs individuellt."

#: ../../c-api/typeobj.rst:860
msgid ""
"An optional pointer to a function that implements the built-in function "
":func:`hash`."
msgstr ""
"En valfri pekare till en funktion som implementerar den inbyggda funktionen "
":func:`hash`."

#: ../../c-api/typeobj.rst:863
msgid "The signature is the same as for :c:func:`PyObject_Hash`::"
msgstr "Signaturen är densamma som för :c:func:`PyObject_Hash`::"

#: ../../c-api/typeobj.rst:867
msgid ""
"The value ``-1`` should not be returned as a normal return value; when an "
"error occurs during the computation of the hash value, the function should "
"set an exception and return ``-1``."
msgstr ""
"Värdet ``-1`` ska inte returneras som ett normalt returvärde; när ett fel "
"inträffar under beräkningen av hashvärdet ska funktionen sätta ett undantag "
"och returnera ``-1``."

#: ../../c-api/typeobj.rst:871
msgid ""
"When this field is not set (*and* :attr:`tp_richcompare` is not set), an "
"attempt to take the hash of the object raises :exc:`TypeError`. This is the "
"same as setting it to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../../c-api/typeobj.rst:875
msgid ""
"This field can be set explicitly to :c:func:`PyObject_HashNotImplemented` to"
" block inheritance of the hash method from a parent type. This is "
"interpreted as the equivalent of ``__hash__ = None`` at the Python level, "
"causing ``isinstance(o, collections.Hashable)`` to correctly return "
"``False``. Note that the converse is also true - setting ``__hash__ = None``"
" on a class at the Python level will result in the ``tp_hash`` slot being "
"set to :c:func:`PyObject_HashNotImplemented`."
msgstr ""
"Detta fält kan explicit sättas till :c:func:`PyObject_HashNotImplemented` "
"för att blockera arv av hash-metoden från en överordnad typ. Detta tolkas "
"som motsvarigheten till ``__hash__ = None`` på Python-nivå, vilket gör att "
"``isinstance(o, collections.Hashable)`` korrekt returnerar ``False``. "
"Observera att det omvända också är sant - att sätta ``__hash__ = None`` på "
"en klass på Python-nivå kommer att resultera i att ``tp_hash`` slot sätts "
"till :c:func:`PyObject_HashNotImplemented`."

#: ../../c-api/typeobj.rst:885 ../../c-api/typeobj.rst:1385
msgid "Group: :attr:`tp_hash`, :attr:`tp_richcompare`"
msgstr ""

#: ../../c-api/typeobj.rst:887
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_richcompare`: a subtype inherits both of "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash`, when the subtype's "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_richcompare`: en subtyp ärver både "
":c:member:`~PyTypeObject.tp_richcompare` och "
":c:member:`~PyTypeObject.tp_hash`, när subtypens "
":c:member:`~PyTypeObject.tp_richcompare` och "
":c:member:`~PyTypeObject.tp_hash` båda är ``NULL``."

#: ../../c-api/typeobj.rst:895
msgid ""
"An optional pointer to a function that implements calling the object.  This "
"should be ``NULL`` if the object is not callable.  The signature is the same"
" as for :c:func:`PyObject_Call`::"
msgstr ""
"En valfri pekare till en funktion som implementerar anrop av objektet.  "
"Denna bör vara ``NULL`` om objektet inte är anropsbart.  Signaturen är "
"densamma som för :c:func:`PyObject_Call`::"

#: ../../c-api/typeobj.rst:908
msgid ""
"An optional pointer to a function that implements the built-in operation "
":func:`str`.  (Note that :class:`str` is a type now, and :func:`str` calls "
"the constructor for that type.  This constructor calls "
":c:func:`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` "
"will call this handler.)"
msgstr ""
"En valfri pekare till en funktion som implementerar den inbyggda operationen"
" :func:`str`.  (Observera att :class:`str` nu är en typ och att :func:`str` "
"anropar konstruktören för den typen.  Denna konstruktör anropar "
":c:func:`PyObject_Str` för att göra det faktiska arbetet, och "
":c:func:`PyObject_Str` kommer att anropa denna hanterare)"

#: ../../c-api/typeobj.rst:913
msgid "The signature is the same as for :c:func:`PyObject_Str`::"
msgstr "Signaturen är densamma som för :c:func:`PyObject_Str`::"

#: ../../c-api/typeobj.rst:917
msgid ""
"The function must return a string or a Unicode object.  It should be a "
"\"friendly\" string representation of the object, as this is the "
"representation that will be used, among other things, by the :func:`print` "
"function."
msgstr ""
"Funktionen måste returnera en sträng eller ett Unicode-objekt.  Det bör vara"
" en \"vänlig\" strängrepresentation av objektet, eftersom det är den "
"representation som kommer att användas, bland annat, av funktionen "
":func:`print`."

#: ../../c-api/typeobj.rst:927
msgid ""
"When this field is not set, :c:func:`PyObject_Repr` is called to return a "
"string representation."
msgstr ""
"När detta fält inte är inställt anropas :c:func:`PyObject_Repr` för att "
"returnera en strängrepresentation."

#: ../../c-api/typeobj.rst:933
msgid "An optional pointer to the get-attribute function."
msgstr "En valfri pekare till funktionen get-attribute."

#: ../../c-api/typeobj.rst:935
msgid "The signature is the same as for :c:func:`PyObject_GetAttr`::"
msgstr "Signaturen är densamma som för :c:func:`PyObject_GetAttr`::"

#: ../../c-api/typeobj.rst:939
msgid ""
"It is usually convenient to set this field to "
":c:func:`PyObject_GenericGetAttr`, which implements the normal way of "
"looking for object attributes."
msgstr ""
"Det är oftast lämpligt att ställa in detta fält till "
":c:func:`PyObject_GenericGetAttr`, som implementerar det normala sättet att "
"leta efter objektattribut."

#: ../../c-api/typeobj.rst:946
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_getattr`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` from its base type when the subtype's "
":c:member:`~PyTypeObject.tp_getattr` and "
":c:member:`~PyTypeObject.tp_getattro` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_getattr`: en subtyp ärver både "
":c:member:`~PyTypeObject.tp_getattr` och "
":c:member:`~PyTypeObject.tp_getattro` från sin bastyp när subtypens "
":c:member:`~PyTypeObject.tp_getattr` och "
":c:member:`~PyTypeObject.tp_getattro` båda är ``NULL``."

#: ../../c-api/typeobj.rst:952
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../../c-api/typeobj.rst:959
msgid "The signature is the same as for :c:func:`PyObject_SetAttr`::"
msgstr "Signaturen är densamma som för :c:func:`PyObject_SetAttr`::"

#: ../../c-api/typeobj.rst:963
msgid ""
"In addition, setting *value* to ``NULL`` to delete an attribute must be "
"supported.  It is usually convenient to set this field to "
":c:func:`PyObject_GenericSetAttr`, which implements the normal way of "
"setting object attributes."
msgstr ""
"Dessutom måste det finnas stöd för att sätta *value* till ``NULL`` för att "
"ta bort ett attribut.  Det är vanligtvis bekvämt att ställa in detta fält "
"till :c:func:`PyObject_GenericSetAttr`, som implementerar det normala sättet"
" att ställa in objektattribut."

#: ../../c-api/typeobj.rst:972
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_setattr`: a subtype inherits both "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` from its base type when the subtype's "
":c:member:`~PyTypeObject.tp_setattr` and "
":c:member:`~PyTypeObject.tp_setattro` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_setattr`: en subtyp ärver både "
":c:member:`~PyTypeObject.tp_setattr` och "
":c:member:`~PyTypeObject.tp_setattro` från sin bastyp när subtypens "
":c:member:`~PyTypeObject.tp_setattr` och "
":c:member:`~PyTypeObject.tp_setattro` båda är ``NULL``."

#: ../../c-api/typeobj.rst:978
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericSetAttr`."
msgstr ""

#: ../../c-api/typeobj.rst:983
msgid ""
"Pointer to an additional structure that contains fields relevant only to "
"objects which implement the buffer interface.  These fields are documented "
"in :ref:`buffer-structs`."
msgstr ""
"Pekare till en ytterligare struktur som innehåller fält som endast är "
"relevanta för objekt som implementerar buffertgränssnittet.  Dessa fält är "
"dokumenterade i :ref:`buffer-structs`."

#: ../../c-api/typeobj.rst:989
msgid ""
"The :c:member:`~PyTypeObject.tp_as_buffer` field is not inherited, but the "
"contained fields are inherited individually."
msgstr ""
"Fältet :c:member:`~PyTypeObject.tp_as_buffer` ärvs inte, men de ingående "
"fälten ärvs individuellt."

#: ../../c-api/typeobj.rst:995
msgid ""
"This field is a bit mask of various flags.  Some flags indicate variant "
"semantics for certain situations; others are used to indicate that certain "
"fields in the type object (or in the extension structures referenced via "
":c:member:`~PyTypeObject.tp_as_number`, "
":c:member:`~PyTypeObject.tp_as_sequence`, "
":c:member:`~PyTypeObject.tp_as_mapping`, and "
":c:member:`~PyTypeObject.tp_as_buffer`) that were historically not always "
"present are valid; if such a flag bit is clear, the type fields it guards "
"must not be accessed and must be considered to have a zero or ``NULL`` value"
" instead."
msgstr ""
"Detta fält är en bitmask med olika flaggor.  Vissa flaggor anger varierande "
"semantik för vissa situationer; andra används för att ange att vissa fält i "
"typobjektet (eller i de tilläggsstrukturer som refereras via "
":c:member:`~PyTypeObject.tp_as_number`, "
":c:member:`~PyTypeObject.tp_as_sequence`, "
":c:member:`~PyTypeObject.tp_as_mapping`, och "
":c:member:`~PyTypeObject.tp_as_buffer`) som historiskt sett inte alltid "
"funnits är giltiga; om en sådan flaggbit är klar får de typfält som den "
"skyddar inte nås och måste anses ha värdet noll eller ``NULL`` istället."

#: ../../c-api/typeobj.rst:1005
msgid ""
"Inheritance of this field is complicated.  Most flag bits are inherited "
"individually, i.e. if the base type has a flag bit set, the subtype inherits"
" this flag bit.  The flag bits that pertain to extension structures are "
"strictly inherited if the extension structure is inherited, i.e. the base "
"type's value of the flag bit is copied into the subtype together with a "
"pointer to the extension structure.  The :const:`Py_TPFLAGS_HAVE_GC` flag "
"bit is inherited together with the :c:member:`~PyTypeObject.tp_traverse` and"
" :c:member:`~PyTypeObject.tp_clear` fields, i.e. if the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the "
":c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear`"
" fields in the subtype exist and have ``NULL`` values."
msgstr ""

#: ../../c-api/typeobj.rst:1020
msgid ""
":c:type:`PyBaseObject_Type` uses ``Py_TPFLAGS_DEFAULT | "
"Py_TPFLAGS_BASETYPE``."
msgstr ""

#: ../../c-api/typeobj.rst:1023
msgid "**Bit Masks:**"
msgstr "**Bitmasker:**"

#: ../../c-api/typeobj.rst:1025
msgid ""
"The following bit masks are currently defined; these can be ORed together "
"using the ``|`` operator to form the value of the "
":c:member:`~PyTypeObject.tp_flags` field.  The macro "
":c:func:`PyType_HasFeature` takes a type and a flags value, *tp* and *f*, "
"and checks whether ``tp->tp_flags & f`` is non-zero."
msgstr ""
"Följande bitmasker är för närvarande definierade; dessa kan kombineras med "
"operatorn ``|`` för att bilda värdet i fältet "
":c:member:`~PyTypeObject.tp_flags`.  Makrot :c:func:`PyType_HasFeature` tar "
"en typ och ett flaggvärde, *tp* och *f*, och kontrollerar om ``tp->tp_flags "
"& f`` är icke-noll."

#: ../../c-api/typeobj.rst:1032
msgid ""
"This bit is set when the type object itself is allocated on the heap, for "
"example, types created dynamically using :c:func:`PyType_FromSpec`.  In this"
" case, the :attr:`ob_type` field of its instances is considered a reference "
"to the type, and the type object is INCREF'ed when a new instance is "
"created, and DECREF'ed when an instance is destroyed (this does not apply to"
" instances of subtypes; only the type referenced by the instance's ob_type "
"gets INCREF'ed or DECREF'ed)."
msgstr ""

#: ../../c-api/typeobj.rst:1042 ../../c-api/typeobj.rst:1053
#: ../../c-api/typeobj.rst:1063 ../../c-api/typeobj.rst:1073
#: ../../c-api/typeobj.rst:1106
msgid "???"
msgstr "???"

#: ../../c-api/typeobj.rst:1047
msgid ""
"This bit is set when the type can be used as the base type of another type."
"  If this bit is clear, the type cannot be subtyped (similar to a \"final\" "
"class in Java)."
msgstr ""
"Denna bit är satt när typen kan användas som bastyp för en annan typ.  Om "
"denna bit är klar kan typen inte subtypas (på samma sätt som en "
"\"final\"-klass i Java)."

#: ../../c-api/typeobj.rst:1058
msgid ""
"This bit is set when the type object has been fully initialized by "
":c:func:`PyType_Ready`."
msgstr ""
"Denna bit är inställd när typobjektet har initialiserats fullständigt av "
":c:func:`PyType_Ready`."

#: ../../c-api/typeobj.rst:1068
msgid ""
"This bit is set while :c:func:`PyType_Ready` is in the process of "
"initializing the type object."
msgstr ""
"Denna bit är inställd när :c:func:`PyType_Ready` håller på att initiera "
"typobjektet."

#: ../../c-api/typeobj.rst:1078
msgid ""
"This bit is set when the object supports garbage collection.  If this bit is"
" set, instances must be created using :c:func:`PyObject_GC_New` and "
"destroyed using :c:func:`PyObject_GC_Del`.  More information in section "
":ref:`supporting-cycle-detection`.  This bit also implies that the GC-"
"related fields :c:member:`~PyTypeObject.tp_traverse` and "
":c:member:`~PyTypeObject.tp_clear` are present in the type object."
msgstr ""

#: ../../c-api/typeobj.rst:1087 ../../c-api/typeobj.rst:1259
#: ../../c-api/typeobj.rst:1326
msgid ""
"Group: :const:`Py_TPFLAGS_HAVE_GC`, :attr:`tp_traverse`, :attr:`tp_clear`"
msgstr ""

#: ../../c-api/typeobj.rst:1089
msgid ""
"The :const:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the "
":attr:`tp_traverse` and :attr:`tp_clear` fields, i.e.  if the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the "
":attr:`tp_traverse` and :attr:`tp_clear` fields in the subtype exist and "
"have ``NULL`` values."
msgstr ""

#: ../../c-api/typeobj.rst:1099
msgid ""
"This is a bitmask of all the bits that pertain to the existence of certain "
"fields in the type object and its extension structures. Currently, it "
"includes the following bits: :const:`Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`, "
":const:`Py_TPFLAGS_HAVE_VERSION_TAG`."
msgstr ""

#: ../../c-api/typeobj.rst:1111
msgid "This bit indicates that objects behave like unbound methods."
msgstr "Denna bit indikerar att objekt beter sig som obundna metoder."

#: ../../c-api/typeobj.rst:1113
msgid "If this flag is set for ``type(meth)``, then:"
msgstr "Om denna flagga är inställd för ``typ(meth)``, då:"

#: ../../c-api/typeobj.rst:1115
msgid ""
"``meth.__get__(obj, cls)(*args, **kwds)`` (with ``obj`` not None) must be "
"equivalent to ``meth(obj, *args, **kwds)``."
msgstr ""
"``meth.__get__(obj, cls)(*args, **kwds)`` (med ``obj`` inte None) måste vara"
" likvärdig med ``meth(obj, *args, **kwds)``."

#: ../../c-api/typeobj.rst:1118
msgid ""
"``meth.__get__(None, cls)(*args, **kwds)`` must be equivalent to "
"``meth(*args, **kwds)``."
msgstr ""
"``meth.__get__(None, cls)(*args, **kwds)`` måste vara likvärdig med "
"``meth(*args, **kwds)``."

#: ../../c-api/typeobj.rst:1121
msgid ""
"This flag enables an optimization for typical method calls like "
"``obj.meth()``: it avoids creating a temporary \"bound method\" object for "
"``obj.meth``."
msgstr ""
"Denna flagga möjliggör en optimering för typiska metodanrop som "
"``obj.meth()``: den undviker att skapa ett tillfälligt \"bound "
"method\"-objekt för ``obj.meth``."

#: ../../c-api/typeobj.rst:1129
msgid ""
"This flag is never inherited by heap types. For extension types, it is "
"inherited whenever :c:member:`~PyTypeObject.tp_descr_get` is inherited."
msgstr ""

#: ../../c-api/typeobj.rst:1146
msgid ""
"These flags are used by functions such as :c:func:`PyLong_Check` to quickly "
"determine if a type is a subclass of a built-in type; such specific checks "
"are faster than a generic check, like :c:func:`PyObject_IsInstance`. Custom "
"types that inherit from built-ins should have their "
":c:member:`~PyTypeObject.tp_flags` set appropriately, or the code that "
"interacts with such types will behave differently depending on what kind of "
"check is used."
msgstr ""
"Dessa flaggor används av funktioner som :c:func:`PyLong_Check` för att "
"snabbt avgöra om en typ är en underklass av en inbyggd typ; sådana specifika"
" kontroller är snabbare än en generisk kontroll, som "
":c:func:`PyObject_IsInstance`. Anpassade typer som ärver från inbyggda typer"
" bör ha sina :c:member:`~PyTypeObject.tp_flags` inställda på lämpligt sätt, "
"annars kommer koden som interagerar med sådana typer att bete sig annorlunda"
" beroende på vilken typ av kontroll som används."

#: ../../c-api/typeobj.rst:1157
msgid ""
"This bit is set when the :c:member:`~PyTypeObject.tp_finalize` slot is "
"present in the type structure."
msgstr ""
"Denna bit är inställd när :c:member:`~PyTypeObject.tp_finalize` finns i "
"typstrukturen."

#: ../../c-api/typeobj.rst:1162
msgid ""
"This flag isn't necessary anymore, as the interpreter assumes the "
":c:member:`~PyTypeObject.tp_finalize` slot is always present in the type "
"structure."
msgstr ""
"Denna flagga är inte längre nödvändig, eftersom tolken antar att "
":c:member:`~PyTypeObject.tp_finalize` alltid finns i typstrukturen."

#: ../../c-api/typeobj.rst:1170
msgid ""
"This bit is set when the class implements the :ref:`vectorcall protocol "
"<vectorcall>`. See :c:member:`~PyTypeObject.tp_vectorcall_offset` for "
"details."
msgstr ""
"Denna bit är inställd när klassen implementerar :ref:`vectorcall-protokollet"
" <vectorcall>`. Se :c:member:`~PyTypeObject.tp_vectorcall_offset` för "
"detaljer."

#: ../../c-api/typeobj.rst:1176
msgid ""
"This bit is inherited for *static* subtypes if "
":c:member:`~PyTypeObject.tp_call` is also inherited. `Heap types`_ do not "
"inherit ``Py_TPFLAGS_HAVE_VECTORCALL``."
msgstr ""

#: ../../c-api/typeobj.rst:1185
msgid ""
"An optional pointer to a NUL-terminated C string giving the docstring for "
"this type object.  This is exposed as the :attr:`__doc__` attribute on the "
"type and instances of the type."
msgstr ""

#: ../../c-api/typeobj.rst:1191
msgid "This field is *not* inherited by subtypes."
msgstr "Detta fält ärvs *inte* av subtyper."

#: ../../c-api/typeobj.rst:1196
msgid ""
"An optional pointer to a traversal function for the garbage collector.  This"
" is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The "
"signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1201 ../../c-api/typeobj.rst:1321
msgid ""
"More information about Python's garbage collection scheme can be found in "
"section :ref:`supporting-cycle-detection`."
msgstr ""
"Mer information om Pythons skräpplockningssystem finns i avsnitt "
":ref:`supporting-cycle-detection`."

#: ../../c-api/typeobj.rst:1204
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` pointer is used by the garbage "
"collector to detect reference cycles. A typical implementation of a "
":c:member:`~PyTypeObject.tp_traverse` function simply calls "
":c:func:`Py_VISIT` on each of the instance's members that are Python objects"
" that the instance owns. For example, this is function "
":c:func:`local_traverse` from the :mod:`_thread` extension module::"
msgstr ""

#: ../../c-api/typeobj.rst:1219
msgid ""
"Note that :c:func:`Py_VISIT` is called only on those members that can "
"participate in reference cycles.  Although there is also a ``self->key`` "
"member, it can only be ``NULL`` or a Python string and therefore cannot be "
"part of a reference cycle."
msgstr ""
"Observera att :c:func:`Py_VISIT` endast anropas på de medlemmar som kan "
"delta i referenscykler.  Även om det också finns en ``self->key``-medlem, "
"kan den bara vara ``NULL`` eller en Python-sträng och kan därför inte vara "
"en del av en referenscykel."

#: ../../c-api/typeobj.rst:1223
msgid ""
"On the other hand, even if you know a member can never be part of a cycle, "
"as a debugging aid you may want to visit it anyway just so the :mod:`gc` "
"module's :func:`~gc.get_referents` function will include it."
msgstr ""
"Å andra sidan, även om du vet att en medlem aldrig kan ingå i en cykel, kan "
"du som felsökningshjälp vilja besöka den ändå, bara för att "
":mod:`gc`-modulens :func:`~gc.get_referents`-funktion ska inkludera den."

#: ../../c-api/typeobj.rst:1228
msgid ""
"When implementing :c:member:`~PyTypeObject.tp_traverse`, only the members "
"that the instance *owns* (by having strong references to them) must be "
"visited. For instance, if an object supports weak references via the "
":c:member:`~PyTypeObject.tp_weaklist` slot, the pointer supporting the "
"linked list (what *tp_weaklist* points to) must **not** be visited as the "
"instance does not directly own the weak references to itself (the "
"weakreference list is there to support the weak reference machinery, but the"
" instance has no strong reference to the elements inside it, as they are "
"allowed to be removed even if the instance is still alive)."
msgstr ""

#: ../../c-api/typeobj.rst:1238
msgid ""
"Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to "
":c:func:`local_traverse` to have these specific names; don't name them just "
"anything."
msgstr ""

#: ../../c-api/typeobj.rst:1242
msgid ""
"Heap-allocated types (:const:`Py_TPFLAGS_HEAPTYPE`, such as those created "
"with :c:func:`PyType_FromSpec` and similar APIs) hold a reference to their "
"type. Their traversal function must therefore either visit "
":c:func:`Py_TYPE(self) <Py_TYPE>`, or delegate this responsibility by "
"calling ``tp_traverse`` of another heap-allocated type (such as a heap-"
"allocated superclass). If they do not, the type object may not be garbage-"
"collected."
msgstr ""

#: ../../c-api/typeobj.rst:1252
msgid ""
"Heap-allocated types are expected to visit ``Py_TYPE(self)`` in "
"``tp_traverse``.  In earlier versions of Python, due to `bug 40217 "
"<https://bugs.python.org/issue40217>`_, doing this may lead to crashes in "
"subclasses."
msgstr ""
"Heap-allokerade typer förväntas besöka ``Py_TYPE(self)`` i ``tp_traverse``."
"  I tidigare versioner av Python, på grund av `bug 40217 "
"<https://bugs.python.org/issue40217>`_, kan detta leda till krascher i "
"underklasser."

#: ../../c-api/typeobj.rst:1261
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_clear` and the :const:`Py_TPFLAGS_HAVE_GC` flag "
"bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and "
":c:member:`~PyTypeObject.tp_clear` are all inherited from the base type if "
"they are all zero in the subtype."
msgstr ""

#: ../../c-api/typeobj.rst:1269
msgid ""
"An optional pointer to a clear function for the garbage collector. This is "
"only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The signature"
" is::"
msgstr ""

#: ../../c-api/typeobj.rst:1274
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` member function is used to break "
"reference cycles in cyclic garbage detected by the garbage collector.  Taken"
" together, all :c:member:`~PyTypeObject.tp_clear` functions in the system "
"must combine to break all reference cycles.  This is subtle, and if in any "
"doubt supply a :c:member:`~PyTypeObject.tp_clear` function.  For example, "
"the tuple type does not implement a :c:member:`~PyTypeObject.tp_clear` "
"function, because it's possible to prove that no reference cycle can be "
"composed entirely of tuples. Therefore the "
":c:member:`~PyTypeObject.tp_clear` functions of other types must be "
"sufficient to break any cycle containing a tuple.  This isn't immediately "
"obvious, and there's rarely a good reason to avoid implementing "
":c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../../c-api/typeobj.rst:1284
msgid ""
"Implementations of :c:member:`~PyTypeObject.tp_clear` should drop the "
"instance's references to those of its members that may be Python objects, "
"and set its pointers to those members to ``NULL``, as in the following "
"example::"
msgstr ""
"Implementeringar av :c:member:`~PyTypeObject.tp_clear` bör ta bort "
"instansens referenser till de av dess medlemmar som kan vara Python-objekt, "
"och sätta dess pekare till dessa medlemmar till ``NULL``, som i följande "
"exempel::"

#: ../../c-api/typeobj.rst:1298
msgid ""
"The :c:func:`Py_CLEAR` macro should be used, because clearing references is "
"delicate:  the reference to the contained object must not be decremented "
"until after the pointer to the contained object is set to ``NULL``.  This is"
" because decrementing the reference count may cause the contained object to "
"become trash, triggering a chain of reclamation activity that may include "
"invoking arbitrary Python code (due to finalizers, or weakref callbacks, "
"associated with the contained object). If it's possible for such code to "
"reference *self* again, it's important that the pointer to the contained "
"object be ``NULL`` at that time, so that *self* knows the contained object "
"can no longer be used.  The :c:func:`Py_CLEAR` macro performs the operations"
" in a safe order."
msgstr ""

#: ../../c-api/typeobj.rst:1309
msgid ""
"Note that :c:member:`~PyTypeObject.tp_clear` is not *always* called before "
"an instance is deallocated. For example, when reference counting is enough "
"to determine that an object is no longer used, the cyclic garbage collector "
"is not involved and :c:member:`~PyTypeObject.tp_dealloc` is called directly."
msgstr ""

#: ../../c-api/typeobj.rst:1315
msgid ""
"Because the goal of :c:member:`~PyTypeObject.tp_clear` functions is to break"
" reference cycles, it's not necessary to clear contained objects like Python"
" strings or Python integers, which can't participate in reference cycles. On"
" the other hand, it may be convenient to clear all contained Python objects,"
" and write the type's :c:member:`~PyTypeObject.tp_dealloc` function to "
"invoke :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../../c-api/typeobj.rst:1328
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_traverse` and the :const:`Py_TPFLAGS_HAVE_GC` "
"flag bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and "
":c:member:`~PyTypeObject.tp_clear` are all inherited from the base type if "
"they are all zero in the subtype."
msgstr ""

#: ../../c-api/typeobj.rst:1336
msgid ""
"An optional pointer to the rich comparison function, whose signature is::"
msgstr ""
"En valfri pekare till den rika jämförelsefunktionen, vars signatur är::"

#: ../../c-api/typeobj.rst:1340
msgid ""
"The first parameter is guaranteed to be an instance of the type that is "
"defined by :c:type:`PyTypeObject`."
msgstr ""
"Den första parametern är garanterat en instans av den typ som definieras av "
":c:type:`PyTypeObject`."

#: ../../c-api/typeobj.rst:1343
msgid ""
"The function should return the result of the comparison (usually ``Py_True``"
" or ``Py_False``).  If the comparison is undefined, it must return "
"``Py_NotImplemented``, if another error occurred it must return ``NULL`` and"
" set an exception condition."
msgstr ""
"Funktionen ska returnera resultatet av jämförelsen (vanligtvis ``Py_True`` "
"eller ``Py_False``).  Om jämförelsen är odefinierad måste den returnera "
"``Py_NotImplemented``, om ett annat fel inträffade måste den returnera "
"``NULL`` och sätta ett undantagsvillkor."

#: ../../c-api/typeobj.rst:1348
msgid ""
"The following constants are defined to be used as the third argument for "
":c:member:`~PyTypeObject.tp_richcompare` and for "
":c:func:`PyObject_RichCompare`:"
msgstr ""
"Följande konstanter är definierade för att användas som det tredje "
"argumentet för :c:member:`~PyTypeObject.tp_richcompare` och för "
":c:func:`PyObject_RichCompare`:"

#: ../../c-api/typeobj.rst:1352
msgid "Constant"
msgstr "Konstant"

#: ../../c-api/typeobj.rst:1352
msgid "Comparison"
msgstr "Jämförelse"

#: ../../c-api/typeobj.rst:1354
msgid ":const:`Py_LT`"
msgstr ""

#: ../../c-api/typeobj.rst:1354
msgid "``<``"
msgstr "``<``"

#: ../../c-api/typeobj.rst:1356
msgid ":const:`Py_LE`"
msgstr ""

#: ../../c-api/typeobj.rst:1356
msgid "``<=``"
msgstr "``<=``"

#: ../../c-api/typeobj.rst:1358
msgid ":const:`Py_EQ`"
msgstr ""

#: ../../c-api/typeobj.rst:1358
msgid "``==``"
msgstr "``==``"

#: ../../c-api/typeobj.rst:1360
msgid ":const:`Py_NE`"
msgstr ""

#: ../../c-api/typeobj.rst:1360
msgid "``!=``"
msgstr "``!=``"

#: ../../c-api/typeobj.rst:1362
msgid ":const:`Py_GT`"
msgstr ""

#: ../../c-api/typeobj.rst:1362
msgid "``>``"
msgstr "``>``"

#: ../../c-api/typeobj.rst:1364
msgid ":const:`Py_GE`"
msgstr ""

#: ../../c-api/typeobj.rst:1364
msgid "``>=``"
msgstr "``>=``"

#: ../../c-api/typeobj.rst:1367
msgid ""
"The following macro is defined to ease writing rich comparison functions:"
msgstr ""
"Följande makro är definierat för att underlätta skrivandet av rika "
"jämförelsefunktioner:"

#: ../../c-api/typeobj.rst:1371
msgid ""
"Return ``Py_True`` or ``Py_False`` from the function, depending on the "
"result of a comparison. VAL_A and VAL_B must be orderable by C comparison "
"operators (for example, they may be C ints or floats). The third argument "
"specifies the requested operation, as for :c:func:`PyObject_RichCompare`."
msgstr ""
"Returnerar ``Py_True`` eller ``Py_False`` från funktionen, beroende på "
"resultatet av en jämförelse. VAL_A och VAL_B måste kunna ordnas av C:s "
"jämförelseoperatorer (de kan t.ex. vara C:s ints eller floats). Det tredje "
"argumentet specificerar den begärda operationen, som för "
":c:func:`PyObject_RichCompare`."

#: ../../c-api/typeobj.rst:1377
msgid "The return value's reference count is properly incremented."
msgstr ""

#: ../../c-api/typeobj.rst:1379
msgid "On error, sets an exception and returns ``NULL`` from the function."
msgstr "Vid fel, anger ett undantag och returnerar ``NULL`` från funktionen."

#: ../../c-api/typeobj.rst:1387
msgid ""
"This field is inherited by subtypes together with "
":c:member:`~PyTypeObject.tp_hash`: a subtype inherits "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` when the subtype's "
":c:member:`~PyTypeObject.tp_richcompare` and "
":c:member:`~PyTypeObject.tp_hash` are both ``NULL``."
msgstr ""
"Detta fält ärvs av subtyper tillsammans med "
":c:member:`~PyTypeObject.tp_hash`: en subtyp ärver "
":c:member:`~PyTypeObject.tp_richcompare` och "
":c:member:`~PyTypeObject.tp_hash` när subtypens "
":c:member:`~PyTypeObject.tp_richcompare` och "
":c:member:`~PyTypeObject.tp_hash` båda är ``NULL``."

#: ../../c-api/typeobj.rst:1394
msgid ""
":c:type:`PyBaseObject_Type` provides a :attr:`tp_richcompare` "
"implementation, which may be inherited.  However, if only :attr:`tp_hash` is"
" defined, not even the inherited function is used and instances of the type "
"will not be able to participate in any comparisons."
msgstr ""

#: ../../c-api/typeobj.rst:1403
msgid ""
"If the instances of this type are weakly referenceable, this field is "
"greater than zero and contains the offset in the instance structure of the "
"weak reference list head (ignoring the GC header, if present); this offset "
"is used by :c:func:`PyObject_ClearWeakRefs` and the :c:func:`PyWeakref_\\*` "
"functions.  The instance structure needs to include a field of type "
":c:type:`PyObject*` which is initialized to ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:1410
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_weaklist`; that "
"is the list head for weak references to the type object itself."
msgstr ""
"Förväxla inte detta fält med :c:member:`~PyTypeObject.tp_weaklist`; det är "
"listhuvudet för svaga referenser till typobjektet självt."

#: ../../c-api/typeobj.rst:1415
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype uses a "
"different weak reference list head than the base type.  Since the list head "
"is always found via :c:member:`~PyTypeObject.tp_weaklistoffset`, this should"
" not be a problem."
msgstr ""
"Detta fält ärvs av subtyper, men se de regler som anges nedan. En subtyp kan"
" åsidosätta denna offset; detta innebär att subtypen använder ett annat "
"listhuvud för svaga referenser än bastypen.  Eftersom listhuvudet alltid "
"hittas via :c:member:`~PyTypeObject.tp_weaklistoffset`, bör detta inte vara "
"något problem."

#: ../../c-api/typeobj.rst:1420
msgid ""
"When a type defined by a class statement has no :attr:`~object.__slots__` "
"declaration, and none of its base types are weakly referenceable, the type "
"is made weakly referenceable by adding a weak reference list head slot to "
"the instance layout and setting the "
":c:member:`~PyTypeObject.tp_weaklistoffset` of that slot's offset."
msgstr ""

#: ../../c-api/typeobj.rst:1425
msgid ""
"When a type's :attr:`__slots__` declaration contains a slot named "
":attr:`__weakref__`, that slot becomes the weak reference list head for "
"instances of the type, and the slot's offset is stored in the type's "
":c:member:`~PyTypeObject.tp_weaklistoffset`."
msgstr ""

#: ../../c-api/typeobj.rst:1430
msgid ""
"When a type's :attr:`__slots__` declaration does not contain a slot named "
":attr:`__weakref__`, the type inherits its "
":c:member:`~PyTypeObject.tp_weaklistoffset` from its base type."
msgstr ""

#: ../../c-api/typeobj.rst:1437
msgid ""
"An optional pointer to a function that returns an iterator for the object.  "
"Its presence normally signals that the instances of this type are iterable "
"(although sequences may be iterable without this function)."
msgstr ""

#: ../../c-api/typeobj.rst:1441
msgid "This function has the same signature as :c:func:`PyObject_GetIter`::"
msgstr "Denna funktion har samma signatur som :c:func:`PyObject_GetIter`::"

#: ../../c-api/typeobj.rst:1452
msgid ""
"An optional pointer to a function that returns the next item in an iterator."
" The signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1457
msgid ""
"When the iterator is exhausted, it must return ``NULL``; a "
":exc:`StopIteration` exception may or may not be set.  When another error "
"occurs, it must return ``NULL`` too.  Its presence signals that the "
"instances of this type are iterators."
msgstr ""
"När iteratorn är uttömd måste den returnera ``NULL``; ett "
":exc:`StopIteration` undantag kan eller kan inte ställas in.  När ett annat "
"fel inträffar måste den också returnera ``NULL``.  Dess närvaro signalerar "
"att förekomsterna av denna typ är iteratorer."

#: ../../c-api/typeobj.rst:1462
msgid ""
"Iterator types should also define the :c:member:`~PyTypeObject.tp_iter` "
"function, and that function should return the iterator instance itself (not "
"a new iterator instance)."
msgstr ""
"Iteratortyper bör också definiera funktionen "
":c:member:`~PyTypeObject.tp_iter`, och den funktionen bör returnera själva "
"iteratorinstansen (inte en ny iteratorinstans)."

#: ../../c-api/typeobj.rst:1466
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr "Denna funktion har samma signatur som :c:func:`PyIter_Next`."

#: ../../c-api/typeobj.rst:1475
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""
"En valfri pekare till en statisk ``NULL``-terminerad array av "
":c:type:`PyMethodDef`-strukturer, som deklarerar vanliga metoder av denna "
"typ."

#: ../../c-api/typeobj.rst:1478
msgid ""
"For each entry in the array, an entry is added to the type's dictionary (see"
" :c:member:`~PyTypeObject.tp_dict` below) containing a method descriptor."
msgstr ""
"För varje post i matrisen läggs en post till i typens dictionary (se "
":c:member:`~PyTypeObject.tp_dict` nedan) som innehåller en metoddeskriptor."

#: ../../c-api/typeobj.rst:1483
msgid ""
"This field is not inherited by subtypes (methods are inherited through a "
"different mechanism)."
msgstr ""
"Detta fält ärvs inte av subtyper (metoder ärvs genom en annan mekanism)."

#: ../../c-api/typeobj.rst:1489
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyMemberDef` structures, declaring regular data members (fields or "
"slots) of instances of this type."
msgstr ""
"En valfri pekare till en statisk ``NULL``-terminerad array av "
":c:type:`PyMemberDef`-strukturer, som deklarerar vanliga datamedlemmar (fält"
" eller slots) för instanser av denna typ."

#: ../../c-api/typeobj.rst:1493
msgid ""
"For each entry in the array, an entry is added to the type's dictionary (see"
" :c:member:`~PyTypeObject.tp_dict` below) containing a member descriptor."
msgstr ""
"För varje post i matrisen läggs en post till i typens dictionary (se "
":c:member:`~PyTypeObject.tp_dict` nedan) som innehåller en "
"medlemsdeskriptor."

#: ../../c-api/typeobj.rst:1498
msgid ""
"This field is not inherited by subtypes (members are inherited through a "
"different mechanism)."
msgstr ""
"Detta fält ärvs inte av subtyper (medlemmar ärvs genom en annan mekanism)."

#: ../../c-api/typeobj.rst:1504
msgid ""
"An optional pointer to a static ``NULL``-terminated array of "
":c:type:`PyGetSetDef` structures, declaring computed attributes of instances"
" of this type."
msgstr ""
"En valfri pekare till en statisk ``NULL``-terminerad array av "
":c:type:`PyGetSetDef`-strukturer, som deklarerar beräknade attribut för "
"instanser av denna typ."

#: ../../c-api/typeobj.rst:1507
msgid ""
"For each entry in the array, an entry is added to the type's dictionary (see"
" :c:member:`~PyTypeObject.tp_dict` below) containing a getset descriptor."
msgstr ""
"För varje post i matrisen läggs en post till i typens dictionary (se "
":c:member:`~PyTypeObject.tp_dict` nedan) som innehåller en getset-"
"descriptor."

#: ../../c-api/typeobj.rst:1512
msgid ""
"This field is not inherited by subtypes (computed attributes are inherited "
"through a different mechanism)."
msgstr ""
"Detta fält ärvs inte av subtyper (beräknade attribut ärvs genom en annan "
"mekanism)."

#: ../../c-api/typeobj.rst:1518
msgid ""
"An optional pointer to a base type from which type properties are inherited."
"  At this level, only single inheritance is supported; multiple inheritance "
"require dynamically creating a type object by calling the metatype."
msgstr ""
"En valfri pekare till en bastyp från vilken typegenskaper ärvs.  På denna "
"nivå stöds endast enkel nedärvning; multipel nedärvning kräver att ett "
"typobjekt skapas dynamiskt genom att anropa metatypen."

#: ../../c-api/typeobj.rst:1526
msgid ""
"Slot initialization is subject to the rules of initializing globals. C99 "
"requires the initializers to be \"address constants\".  Function designators"
" like :c:func:`PyType_GenericNew`, with implicit conversion to a pointer, "
"are valid C99 address constants."
msgstr ""
"Slotinitialisering är föremål för reglerna för initialisering av globaler. "
"C99 kräver att initialisatorerna är \"adresskonstanter\".  "
"Funktionsbeteckningar som :c:func:`PyType_GenericNew`, med implicit "
"konvertering till en pekare, är giltiga C99-adresskonstanter."

#: ../../c-api/typeobj.rst:1531
msgid ""
"However, the unary '&' operator applied to a non-static variable like "
":c:func:`PyBaseObject_Type` is not required to produce an address constant."
"  Compilers may support this (gcc does), MSVC does not. Both compilers are "
"strictly standard conforming in this particular behavior."
msgstr ""

#: ../../c-api/typeobj.rst:1537
msgid ""
"Consequently, :c:member:`~PyTypeObject.tp_base` should be set in the "
"extension module's init function."
msgstr ""
"Följaktligen bör :c:member:`~PyTypeObject.tp_base` anges i tilläggsmodulens "
"init-funktion."

#: ../../c-api/typeobj.rst:1542
msgid "This field is not inherited by subtypes (obviously)."
msgstr "Detta fält ärvs inte av subtyper (naturligtvis)."

#: ../../c-api/typeobj.rst:1546
msgid ""
"This field defaults to ``&PyBaseObject_Type`` (which to Python programmers "
"is known as the type :class:`object`)."
msgstr ""
"Detta fält är som standard ``&PyBaseObject_Type`` (som för Python-"
"programmerare är känt som typen :class:`object`)."

#: ../../c-api/typeobj.rst:1552
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr "Typens ordbok lagras här av :c:func:`PyType_Ready`."

#: ../../c-api/typeobj.rst:1554
msgid ""
"This field should normally be initialized to ``NULL`` before PyType_Ready is"
" called; it may also be initialized to a dictionary containing initial "
"attributes for the type.  Once :c:func:`PyType_Ready` has initialized the "
"type, extra attributes for the type may be added to this dictionary only if "
"they don't correspond to overloaded operations (like :meth:`__add__`)."
msgstr ""

#: ../../c-api/typeobj.rst:1562
msgid ""
"This field is not inherited by subtypes (though the attributes defined in "
"here are inherited through a different mechanism)."
msgstr ""
"Detta fält ärvs inte av subtyper (även om de attribut som definieras här "
"ärvs genom en annan mekanism)."

#: ../../c-api/typeobj.rst:1567
msgid ""
"If this field is ``NULL``, :c:func:`PyType_Ready` will assign a new "
"dictionary to it."
msgstr ""
"Om detta fält är ``NULL`` kommer :c:func:`PyType_Ready` att tilldela det en "
"ny ordbok."

#: ../../c-api/typeobj.rst:1572
msgid ""
"It is not safe to use :c:func:`PyDict_SetItem` on or otherwise modify "
":c:member:`~PyTypeObject.tp_dict` with the dictionary C-API."
msgstr ""
"Det är inte säkert att använda :c:func:`PyDict_SetItem` på eller på annat "
"sätt modifiera :c:member:`~PyTypeObject.tp_dict` med dictionary C-API."

#: ../../c-api/typeobj.rst:1578
msgid "An optional pointer to a \"descriptor get\" function."
msgstr "En valfri pekare till en \"descriptor get\"-funktion."

#: ../../c-api/typeobj.rst:1580 ../../c-api/typeobj.rst:1596
#: ../../c-api/typeobj.rst:1678 ../../c-api/typeobj.rst:1708
#: ../../c-api/typeobj.rst:1732
msgid "The function signature is::"
msgstr "Funktionens signatur är::"

#: ../../c-api/typeobj.rst:1593
msgid ""
"An optional pointer to a function for setting and deleting a descriptor's "
"value."
msgstr ""
"En valfri pekare till en funktion för att ställa in och ta bort en "
"descriptors värde."

#: ../../c-api/typeobj.rst:1600
msgid "The *value* argument is set to ``NULL`` to delete the value."
msgstr "Argumentet *värde* sätts till ``NULL`` för att ta bort värdet."

#: ../../c-api/typeobj.rst:1611
msgid ""
"If the instances of this type have a dictionary containing instance "
"variables, this field is non-zero and contains the offset in the instances "
"of the type of the instance variable dictionary; this offset is used by "
":c:func:`PyObject_GenericGetAttr`."
msgstr ""
"Om instanserna av denna typ har en ordbok som innehåller instansvariabler, "
"är detta fält icke-noll och innehåller offset i instanserna av typen av "
"instansvariabelordboken; denna offset används av "
":c:func:`PyObject_GenericGetAttr`."

#: ../../c-api/typeobj.rst:1616
msgid ""
"Do not confuse this field with :c:member:`~PyTypeObject.tp_dict`; that is "
"the dictionary for attributes of the type object itself."
msgstr ""
"Förväxla inte detta fält med :c:member:`~PyTypeObject.tp_dict`; det är "
"ordlistan för attribut för själva typobjektet."

#: ../../c-api/typeobj.rst:1619
msgid ""
"If the value of this field is greater than zero, it specifies the offset "
"from the start of the instance structure.  If the value is less than zero, "
"it specifies the offset from the *end* of the instance structure.  A "
"negative offset is more expensive to use, and should only be used when the "
"instance structure contains a variable-length part.  This is used for "
"example to add an instance variable dictionary to subtypes of :class:`str` "
"or :class:`tuple`. Note that the :c:member:`~PyTypeObject.tp_basicsize` "
"field should account for the dictionary added to the end in that case, even "
"though the dictionary is not included in the basic object layout.  On a "
"system with a pointer size of 4 bytes, "
":c:member:`~PyTypeObject.tp_dictoffset` should be set to ``-4`` to indicate "
"that the dictionary is at the very end of the structure."
msgstr ""

#: ../../c-api/typeobj.rst:1631
msgid ""
"The real dictionary offset in an instance can be computed from a negative "
":c:member:`~PyTypeObject.tp_dictoffset` as follows::"
msgstr ""

#: ../../c-api/typeobj.rst:1638
msgid ""
"where :c:member:`~PyTypeObject.tp_basicsize`, "
":c:member:`~PyTypeObject.tp_itemsize` and "
":c:member:`~PyTypeObject.tp_dictoffset` are taken from the type object, and "
":attr:`ob_size` is taken from the instance.  The absolute value is taken "
"because ints use the sign of :attr:`ob_size` to store the sign of the "
"number.  (There's never a need to do this calculation yourself; it is done "
"for you by :c:func:`_PyObject_GetDictPtr`.)"
msgstr ""

#: ../../c-api/typeobj.rst:1646
msgid ""
"This field is inherited by subtypes, but see the rules listed below. A "
"subtype may override this offset; this means that the subtype instances "
"store the dictionary at a difference offset than the base type.  Since the "
"dictionary is always found via :c:member:`~PyTypeObject.tp_dictoffset`, this"
" should not be a problem."
msgstr ""

#: ../../c-api/typeobj.rst:1651
msgid ""
"When a type defined by a class statement has no :attr:`~object.__slots__` "
"declaration, and none of its base types has an instance variable dictionary,"
" a dictionary slot is added to the instance layout and the "
":c:member:`~PyTypeObject.tp_dictoffset` is set to that slot's offset."
msgstr ""

#: ../../c-api/typeobj.rst:1656
msgid ""
"When a type defined by a class statement has a :attr:`__slots__` "
"declaration, the type inherits its :c:member:`~PyTypeObject.tp_dictoffset` "
"from its base type."
msgstr ""

#: ../../c-api/typeobj.rst:1659
msgid ""
"(Adding a slot named :attr:`~object.__dict__` to the :attr:`__slots__` "
"declaration does not have the expected effect, it just causes confusion.  "
"Maybe this should be added as a feature just like :attr:`__weakref__` "
"though.)"
msgstr ""

#: ../../c-api/typeobj.rst:1665
msgid ""
"This slot has no default.  For static types, if the field is ``NULL`` then "
"no :attr:`__dict__` gets created for instances."
msgstr ""

#: ../../c-api/typeobj.rst:1671
msgid "An optional pointer to an instance initialization function."
msgstr "En valfri pekare till en instansinitialiseringsfunktion."

#: ../../c-api/typeobj.rst:1673
msgid ""
"This function corresponds to the :meth:`__init__` method of classes.  Like "
":meth:`__init__`, it is possible to create an instance without calling "
":meth:`__init__`, and it is possible to reinitialize an instance by calling "
"its :meth:`__init__` method again."
msgstr ""

#: ../../c-api/typeobj.rst:1682
msgid ""
"The self argument is the instance to be initialized; the *args* and *kwds* "
"arguments represent positional and keyword arguments of the call to "
":meth:`__init__`."
msgstr ""

#: ../../c-api/typeobj.rst:1686
msgid ""
"The :c:member:`~PyTypeObject.tp_init` function, if not ``NULL``, is called "
"when an instance is created normally by calling its type, after the type's "
":c:member:`~PyTypeObject.tp_new` function has returned an instance of the "
"type.  If the :c:member:`~PyTypeObject.tp_new` function returns an instance "
"of some other type that is not a subtype of the original type, no "
":c:member:`~PyTypeObject.tp_init` function is called; if "
":c:member:`~PyTypeObject.tp_new` returns an instance of a subtype of the "
"original type, the subtype's :c:member:`~PyTypeObject.tp_init` is called."
msgstr ""
"Funktionen :c:member:`~PyTypeObject.tp_init`, om den inte är ``NULL``, "
"anropas när en instans skapas normalt genom att anropa dess typ, efter att "
"typens funktion :c:member:`~PyTypeObject.tp_new` har returnerat en instans "
"av typen.  Om funktionen :c:member:`~PyTypeObject.tp_new` returnerar en "
"instans av någon annan typ som inte är en subtyp av den ursprungliga typen "
"anropas ingen funktion :c:member:`~PyTypeObject.tp_init`; om "
":c:member:`~PyTypeObject.tp_new` returnerar en instans av en subtyp av den "
"ursprungliga typen anropas subtypens funktion "
":c:member:`~PyTypeObject.tp_init`."

#: ../../c-api/typeobj.rst:1693
msgid "Returns ``0`` on success, ``-1`` and sets an exception on error."
msgstr "Returnerar ``0`` vid framgång, ``-1`` och anger ett undantag vid fel."

#: ../../c-api/typeobj.rst:1701
msgid "For static types this field does not have a default."
msgstr ""

#: ../../c-api/typeobj.rst:1706
msgid "An optional pointer to an instance allocation function."
msgstr "En valfri pekare till en funktion för instansallokering."

#: ../../c-api/typeobj.rst:1714
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)."
msgstr ""

#: ../../c-api/typeobj.rst:1719
msgid ""
"For dynamic subtypes, this field is always set to "
":c:func:`PyType_GenericAlloc`, to force a standard heap allocation strategy."
msgstr ""

#: ../../c-api/typeobj.rst:1723
msgid ""
"For static subtypes, :c:type:`PyBaseObject_Type` uses "
":c:func:`PyType_GenericAlloc`.  That is the recommended value for all "
"statically defined types."
msgstr ""

#: ../../c-api/typeobj.rst:1730
msgid "An optional pointer to an instance creation function."
msgstr "En valfri pekare till en funktion för att skapa en instans."

#: ../../c-api/typeobj.rst:1736
msgid ""
"The *subtype* argument is the type of the object being created; the *args* "
"and *kwds* arguments represent positional and keyword arguments of the call "
"to the type.  Note that *subtype* doesn't have to equal the type whose "
":c:member:`~PyTypeObject.tp_new` function is called; it may be a subtype of "
"that type (but not an unrelated type)."
msgstr ""
"Argumentet *subtype* är typen av det objekt som skapas; argumenten *args* "
"och *kwds* representerar positions- och nyckelordsargument i anropet till "
"typen.  Observera att *subtype* inte behöver vara lika med den typ vars "
":c:member:`~PyTypeObject.tp_new`-funktion anropas; det kan vara en subtyp av"
" den typen (men inte en orelaterad typ)."

#: ../../c-api/typeobj.rst:1742
msgid ""
"The :c:member:`~PyTypeObject.tp_new` function should call "
"``subtype->tp_alloc(subtype, nitems)`` to allocate space for the object, and"
" then do only as much further initialization as is absolutely necessary.  "
"Initialization that can safely be ignored or repeated should be placed in "
"the :c:member:`~PyTypeObject.tp_init` handler.  A good rule of thumb is that"
" for immutable types, all initialization should take place in "
":c:member:`~PyTypeObject.tp_new`, while for mutable types, most "
"initialization should be deferred to :c:member:`~PyTypeObject.tp_init`."
msgstr ""
"Funktionen :c:member:`~PyTypeObject.tp_new` bör anropa "
"``subtype->tp_alloc(subtype, nitems)`` för att allokera utrymme för "
"objektet, och sedan bara göra så mycket ytterligare initialisering som är "
"absolut nödvändigt.  Initialisering som säkert kan ignoreras eller upprepas "
"bör placeras i handlaren :c:member:`~PyTypeObject.tp_init`.  En bra tumregel"
" är att för oföränderliga typer bör all initialisering ske i "
":c:member:`~PyTypeObject.tp_new`, medan för föränderliga typer bör de flesta"
" initialiseringar skjutas upp till :c:member:`~PyTypeObject.tp_init`."

#: ../../c-api/typeobj.rst:1752
msgid ""
"This field is inherited by subtypes, except it is not inherited by static "
"types whose :c:member:`~PyTypeObject.tp_base` is ``NULL`` or "
"``&PyBaseObject_Type``."
msgstr ""

#: ../../c-api/typeobj.rst:1757
msgid ""
"For static types this field has no default.  This means if the slot is "
"defined as ``NULL``, the type cannot be called to create new instances; "
"presumably there is some other way to create instances, like a factory "
"function."
msgstr ""

#: ../../c-api/typeobj.rst:1765
msgid ""
"An optional pointer to an instance deallocation function.  Its signature "
"is::"
msgstr ""
"En valfri pekare till en funktion för avallokering av instanser.  Dess "
"signatur är::"

#: ../../c-api/typeobj.rst:1769
msgid ""
"An initializer that is compatible with this signature is "
":c:func:`PyObject_Free`."
msgstr ""

#: ../../c-api/typeobj.rst:1773
msgid ""
"This field is inherited by static subtypes, but not by dynamic subtypes "
"(subtypes created by a class statement)"
msgstr ""

#: ../../c-api/typeobj.rst:1778
msgid ""
"In dynamic subtypes, this field is set to a deallocator suitable to match "
":c:func:`PyType_GenericAlloc` and the value of the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

#: ../../c-api/typeobj.rst:1782
msgid "For static subtypes, :c:type:`PyBaseObject_Type` uses PyObject_Del."
msgstr ""

#: ../../c-api/typeobj.rst:1787
msgid "An optional pointer to a function called by the garbage collector."
msgstr "En valfri pekare till en funktion som anropas av skräpsamlaren."

#: ../../c-api/typeobj.rst:1789
msgid ""
"The garbage collector needs to know whether a particular object is "
"collectible or not.  Normally, it is sufficient to look at the object's "
"type's :c:member:`~PyTypeObject.tp_flags` field, and check the "
":const:`Py_TPFLAGS_HAVE_GC` flag bit.  But some types have a mixture of "
"statically and dynamically allocated instances, and the statically allocated"
" instances are not collectible.  Such types should define this function; it "
"should return ``1`` for a collectible instance, and ``0`` for a non-"
"collectible instance. The signature is::"
msgstr ""

#: ../../c-api/typeobj.rst:1799
msgid ""
"(The only example of this are types themselves.  The metatype, "
":c:data:`PyType_Type`, defines this function to distinguish between "
"statically and dynamically allocated types.)"
msgstr ""

#: ../../c-api/typeobj.rst:1809
msgid ""
"This slot has no default.  If this field is ``NULL``, "
":const:`Py_TPFLAGS_HAVE_GC` is used as the functional equivalent."
msgstr ""

#: ../../c-api/typeobj.rst:1815
msgid "Tuple of base types."
msgstr "Tupel av bastyper."

#: ../../c-api/typeobj.rst:1817
msgid ""
"This is set for types created by a class statement.  It should be ``NULL`` "
"for statically defined types."
msgstr ""

#: ../../c-api/typeobj.rst:1822 ../../c-api/typeobj.rst:1843
#: ../../c-api/typeobj.rst:1852 ../../c-api/typeobj.rst:1862
#: ../../c-api/typeobj.rst:1876
msgid "This field is not inherited."
msgstr "Detta fält är inte ärftligt."

#: ../../c-api/typeobj.rst:1827
msgid ""
"Tuple containing the expanded set of base types, starting with the type "
"itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""
"Tupel som innehåller den utökade uppsättningen bastyper, som börjar med "
"typen själv och slutar med :class:`object`, i Method Resolution Order."

#: ../../c-api/typeobj.rst:1833
msgid ""
"This field is not inherited; it is calculated fresh by "
":c:func:`PyType_Ready`."
msgstr "Detta fält är inte ärftligt, utan beräknas av :c:func:`PyType_Ready`."

#: ../../c-api/typeobj.rst:1839
msgid "Unused.  Internal use only."
msgstr "Oanvänd.  Endast för internt bruk."

#: ../../c-api/typeobj.rst:1848
msgid "List of weak references to subclasses.  Internal use only."
msgstr ""

#: ../../c-api/typeobj.rst:1857
msgid ""
"Weak reference list head, for weak references to this type object.  Not "
"inherited.  Internal use only."
msgstr ""
"Svag referenslistans huvud, för svaga referenser till detta typobjekt.  Ärvs"
" inte.  Endast för internt bruk."

#: ../../c-api/typeobj.rst:1867
msgid ""
"This field is deprecated.  Use :c:member:`~PyTypeObject.tp_finalize` "
"instead."
msgstr ""
"Detta fält är föråldrat.  Använd :c:member:`~PyTypeObject.tp_finalize` "
"istället."

#: ../../c-api/typeobj.rst:1872
msgid "Used to index into the method cache.  Internal use only."
msgstr "Används för att indexera till metodcachen.  Endast för internt bruk."

#: ../../c-api/typeobj.rst:1881
msgid ""
"An optional pointer to an instance finalization function.  Its signature "
"is::"
msgstr ""

#: ../../c-api/typeobj.rst:1885
msgid ""
"If :c:member:`~PyTypeObject.tp_finalize` is set, the interpreter calls it "
"once when finalizing an instance.  It is called either from the garbage "
"collector (if the instance is part of an isolated reference cycle) or just "
"before the object is deallocated.  Either way, it is guaranteed to be called"
" before attempting to break reference cycles, ensuring that it finds the "
"object in a sane state."
msgstr ""

#: ../../c-api/typeobj.rst:1892
msgid ""
":c:member:`~PyTypeObject.tp_finalize` should not mutate the current "
"exception status; therefore, a recommended way to write a non-trivial "
"finalizer is::"
msgstr ""

#: ../../c-api/typeobj.rst:1909
msgid ""
"For this field to be taken into account (even through inheritance), you must"
" also set the :const:`Py_TPFLAGS_HAVE_FINALIZE` flags bit."
msgstr ""

#: ../../c-api/typeobj.rst:1912
msgid ""
"Also, note that, in a garbage collected Python, "
":c:member:`~PyTypeObject.tp_dealloc` may be called from any Python thread, "
"not just the thread which created the object (if the object becomes part of "
"a refcount cycle, that cycle might be collected by a garbage collection on "
"any thread).  This is not a problem for Python API calls, since the thread "
"on which tp_dealloc is called will own the Global Interpreter Lock (GIL). "
"However, if the object being destroyed in turn destroys objects from some "
"other C or C++ library, care should be taken to ensure that destroying those"
" objects on the thread which called tp_dealloc will not violate any "
"assumptions of the library."
msgstr ""

#: ../../c-api/typeobj.rst:1929
msgid "\"Safe object finalization\" (:pep:`442`)"
msgstr ""

#: ../../c-api/typeobj.rst:1934
msgid ""
"Vectorcall function to use for calls of this type object. In other words, it"
" is used to implement :ref:`vectorcall <vectorcall>` for ``type.__call__``. "
"If ``tp_vectorcall`` is ``NULL``, the default call implementation using "
":attr:`__new__` and :attr:`__init__` is used."
msgstr ""

#: ../../c-api/typeobj.rst:1942
msgid "This field is never inherited."
msgstr "Detta fält är aldrig ärftligt."

#: ../../c-api/typeobj.rst:1944
msgid "(the field exists since 3.8 but it's only used since 3.9)"
msgstr "(fältet har funnits sedan 3.8 men det används bara sedan 3.9)"

#: ../../c-api/typeobj.rst:1950
msgid "Heap Types"
msgstr "Typer av högar"

#: ../../c-api/typeobj.rst:1952
msgid ""
"Traditionally, types defined in C code are *static*, that is, a static "
":c:type:`PyTypeObject` structure is defined directly in code and initialized"
" using :c:func:`PyType_Ready`."
msgstr ""
"Traditionellt är typer som definieras i C-kod *statiska*, det vill säga en "
"statisk :c:type:`PyTypeObject`-struktur definieras direkt i koden och "
"initieras med :c:func:`PyType_Ready`."

#: ../../c-api/typeobj.rst:1956
msgid ""
"This results in types that are limited relative to types defined in Python:"
msgstr ""
"Detta resulterar i typer som är begränsade i förhållande till de typer som "
"definieras i Python:"

#: ../../c-api/typeobj.rst:1958
msgid ""
"Static types are limited to one base, i.e. they cannot use multiple "
"inheritance."
msgstr ""
"Statiska typer är begränsade till en bas, dvs. de kan inte använda multipel "
"nedärvning."

#: ../../c-api/typeobj.rst:1960
msgid ""
"Static type objects (but not necessarily their instances) are immutable. It "
"is not possible to add or modify the type object's attributes from Python."
msgstr ""
"Statiska typobjekt (men inte nödvändigtvis deras instanser) är "
"oföränderliga. Det är inte möjligt att lägga till eller ändra typobjektets "
"attribut från Python."

#: ../../c-api/typeobj.rst:1962
msgid ""
"Static type objects are shared across :ref:`sub-interpreters <sub-"
"interpreter-support>`, so they should not include any subinterpreter-"
"specific state."
msgstr ""
"Statiska typobjekt delas mellan :ref:`undertolkare <sub-interpreter-"
"support>`, så de bör inte innehålla något undertolkarspecifikt tillstånd."

#: ../../c-api/typeobj.rst:1966
msgid ""
"Also, since :c:type:`PyTypeObject` is not part of the :ref:`stable ABI "
"<stable>`, any extension modules using static types must be compiled for a "
"specific Python minor version."
msgstr ""

#: ../../c-api/typeobj.rst:1970
msgid ""
"An alternative to static types is *heap-allocated types*, or *heap types* "
"for short, which correspond closely to classes created by Python's ``class``"
" statement."
msgstr ""

#: ../../c-api/typeobj.rst:1974
msgid ""
"This is done by filling a :c:type:`PyType_Spec` structure and calling "
":c:func:`PyType_FromSpecWithBases`."
msgstr ""

#: ../../c-api/typeobj.rst:1981
msgid "Number Object Structures"
msgstr "Strukturer för nummerobjekt"

#: ../../c-api/typeobj.rst:1988
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the number protocol.  Each function is used by the function of "
"similar name documented in the :ref:`number` section."
msgstr ""
"Denna struktur innehåller pekare till de funktioner som ett objekt använder "
"för att implementera nummerprotokollet.  Varje funktion används av "
"funktionen med liknande namn som dokumenteras i avsnittet :ref:`number`."

#: ../../c-api/typeobj.rst:1994 ../../c-api/typeobj.rst:2318
msgid "Here is the structure definition::"
msgstr "Här är strukturdefinitionen::"

#: ../../c-api/typeobj.rst:2041
msgid ""
"Binary and ternary functions must check the type of all their operands, and "
"implement the necessary conversions (at least one of the operands is an "
"instance of the defined type).  If the operation is not defined for the "
"given operands, binary and ternary functions must return "
"``Py_NotImplemented``, if another error occurred they must return ``NULL`` "
"and set an exception."
msgstr ""
"Binära och ternära funktioner måste kontrollera typen av alla sina operander"
" och implementera nödvändiga konverteringar (minst en av operanderna är en "
"instans av den definierade typen).  Om operationen inte är definierad för de"
" givna operanderna måste binära och ternära funktioner returnera "
"``Py_NotImplemented``, om ett annat fel inträffade måste de returnera "
"``NULL`` och ange ett undantag."

#: ../../c-api/typeobj.rst:2050
msgid ""
"The :c:data:`nb_reserved` field should always be ``NULL``.  It was "
"previously called :c:data:`nb_long`, and was renamed in Python 3.0.1."
msgstr ""

#: ../../c-api/typeobj.rst:2095
msgid "Mapping Object Structures"
msgstr "Mappning av objektstrukturer"

#: ../../c-api/typeobj.rst:2102
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the mapping protocol.  It has three members:"
msgstr ""
"Denna struktur innehåller pekare till de funktioner som ett objekt använder "
"för att implementera mappningsprotokollet.  Den har tre medlemmar:"

#: ../../c-api/typeobj.rst:2107
msgid ""
"This function is used by :c:func:`PyMapping_Size` and "
":c:func:`PyObject_Size`, and has the same signature.  This slot may be set "
"to ``NULL`` if the object has no defined length."
msgstr ""
"Denna funktion används av :c:func:`PyMapping_Size` och "
":c:func:`PyObject_Size`, och har samma signatur.  Denna slot kan sättas till"
" ``NULL`` om objektet inte har någon definierad längd."

#: ../../c-api/typeobj.rst:2113
msgid ""
"This function is used by :c:func:`PyObject_GetItem` and "
":c:func:`PySequence_GetSlice`, and has the same signature as "
":c:func:`!PyObject_GetItem`.  This slot must be filled for the "
":c:func:`PyMapping_Check` function to return ``1``, it can be ``NULL`` "
"otherwise."
msgstr ""
"Denna funktion används av :c:func:`PyObject_GetItem` och "
":c:func:`PySequence_GetSlice`, och har samma signatur som "
":c:func:`!PyObject_GetItem`.  Denna slot måste vara fylld för att funktionen"
" :c:func:`PyMapping_Check` ska returnera ``1``, annars kan den vara "
"``NULL``."

#: ../../c-api/typeobj.rst:2121
msgid ""
"This function is used by :c:func:`PyObject_SetItem`, "
":c:func:`PyObject_DelItem`, :c:func:`PyObject_SetSlice` and "
":c:func:`PyObject_DelSlice`.  It has the same signature as "
":c:func:`!PyObject_SetItem`, but *v* can also be set to ``NULL`` to delete "
"an item.  If this slot is ``NULL``, the object does not support item "
"assignment and deletion."
msgstr ""

#: ../../c-api/typeobj.rst:2132
msgid "Sequence Object Structures"
msgstr "Strukturer för sekvensobjekt"

#: ../../c-api/typeobj.rst:2139
msgid ""
"This structure holds pointers to the functions which an object uses to "
"implement the sequence protocol."
msgstr ""
"Denna struktur innehåller pekare till de funktioner som ett objekt använder "
"för att implementera sekvensprotokollet."

#: ../../c-api/typeobj.rst:2144
msgid ""
"This function is used by :c:func:`PySequence_Size` and "
":c:func:`PyObject_Size`, and has the same signature.  It is also used for "
"handling negative indices via the :c:member:`~PySequenceMethods.sq_item` and"
" the :c:member:`~PySequenceMethods.sq_ass_item` slots."
msgstr ""
"Denna funktion används av :c:func:`PySequence_Size` och "
":c:func:`PyObject_Size`, och har samma signatur.  Den används också för att "
"hantera negativa index via :c:member:`~PySequenceMethods.sq_item` och "
":c:member:`~PySequenceMethods.sq_ass_item`."

#: ../../c-api/typeobj.rst:2151
msgid ""
"This function is used by :c:func:`PySequence_Concat` and has the same "
"signature.  It is also used by the ``+`` operator, after trying the numeric "
"addition via the :c:member:`~PyNumberMethods.nb_add` slot."
msgstr ""
"Denna funktion används av :c:func:`PySequence_Concat` och har samma "
"signatur.  Den används också av operatorn ``+``, efter att ha försökt "
"numerisk addition via :c:member:`~PyNumberMethods.nb_add` slot."

#: ../../c-api/typeobj.rst:2157
msgid ""
"This function is used by :c:func:`PySequence_Repeat` and has the same "
"signature.  It is also used by the ``*`` operator, after trying numeric "
"multiplication via the :c:member:`~PyNumberMethods.nb_multiply` slot."
msgstr ""
"Denna funktion används av :c:func:`PySequence_Repeat` och har samma "
"signatur.  Den används också av operatorn ``*``, efter att ha försökt "
"numerisk multiplikation via :c:member:`~PyNumberMethods.nb_multiply` slot."

#: ../../c-api/typeobj.rst:2163
msgid ""
"This function is used by :c:func:`PySequence_GetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_GetItem`, after trying the "
"subscription via the :c:member:`~PyMappingMethods.mp_subscript` slot. This "
"slot must be filled for the :c:func:`PySequence_Check` function to return "
"``1``, it can be ``NULL`` otherwise."
msgstr ""
"Denna funktion används av :c:func:`PySequence_GetItem` och har samma "
"signatur.  Den används också av :c:func:`PyObject_GetItem`, efter att ha "
"provat prenumerationen via :c:member:`~PyMappingMethods.mp_subscript` slot. "
"Denna slot måste vara fylld för att funktionen :c:func:`PySequence_Check` "
"skall returnera ``1``, annars kan den vara ``NULL``."

#: ../../c-api/typeobj.rst:2169
msgid ""
"Negative indexes are handled as follows: if the :attr:`sq_length` slot is "
"filled, it is called and the sequence length is used to compute a positive "
"index which is passed to :attr:`sq_item`.  If :attr:`sq_length` is ``NULL``,"
" the index is passed as is to the function."
msgstr ""

#: ../../c-api/typeobj.rst:2176
msgid ""
"This function is used by :c:func:`PySequence_SetItem` and has the same "
"signature.  It is also used by :c:func:`PyObject_SetItem` and "
":c:func:`PyObject_DelItem`, after trying the item assignment and deletion "
"via the :c:member:`~PyMappingMethods.mp_ass_subscript` slot. This slot may "
"be left to ``NULL`` if the object does not support item assignment and "
"deletion."
msgstr ""
"Denna funktion används av :c:func:`PySequence_SetItem` och har samma "
"signatur.  Den används också av :c:func:`PyObject_SetItem` och "
":c:func:`PyObject_DelItem`, efter att ha försökt tilldelning och borttagning"
" av objekt via :c:member:`~PyMappingMethods.mp_ass_subscript` slot. Denna "
"slot kan lämnas till ``NULL`` om objektet inte stöder tilldelning och "
"borttagning av objekt."

#: ../../c-api/typeobj.rst:2185
msgid ""
"This function may be used by :c:func:`PySequence_Contains` and has the same "
"signature.  This slot may be left to ``NULL``, in this case "
":c:func:`!PySequence_Contains` simply traverses the sequence until it finds "
"a match."
msgstr ""
"Denna funktion kan användas av :c:func:`PySequence_Contains` och har samma "
"signatur.  Denna plats kan lämnas till ``NULL``, i detta fall kommer "
":c:func:`!PySequence_Contains` helt enkelt att korsa sekvensen tills den "
"hittar en matchning."

#: ../../c-api/typeobj.rst:2192
msgid ""
"This function is used by :c:func:`PySequence_InPlaceConcat` and has the same"
" signature.  It should modify its first operand, and return it.  This slot "
"may be left to ``NULL``, in this case :c:func:`!PySequence_InPlaceConcat` "
"will fall back to :c:func:`PySequence_Concat`.  It is also used by the "
"augmented assignment ``+=``, after trying numeric in-place addition via the "
":c:member:`~PyNumberMethods.nb_inplace_add` slot."
msgstr ""
"Denna funktion används av :c:func:`PySequence_InPlaceConcat` och har samma "
"signatur.  Den bör modifiera sin första operand och returnera den.  Denna "
"plats kan lämnas till ``NULL``, i detta fall kommer "
":c:func:`!PySequence_InPlaceConcat` att falla tillbaka till "
":c:func:`PySequence_Concat`.  Den används också av den utökade tilldelningen"
" ``+=``, efter att ha försökt numerisk in-place addition via "
":c:member:`~PyNumberMethods.nb_inplace_add` slot."

#: ../../c-api/typeobj.rst:2201
msgid ""
"This function is used by :c:func:`PySequence_InPlaceRepeat` and has the same"
" signature.  It should modify its first operand, and return it.  This slot "
"may be left to ``NULL``, in this case :c:func:`!PySequence_InPlaceRepeat` "
"will fall back to :c:func:`PySequence_Repeat`.  It is also used by the "
"augmented assignment ``*=``, after trying numeric in-place multiplication "
"via the :c:member:`~PyNumberMethods.nb_inplace_multiply` slot."
msgstr ""
"Denna funktion används av :c:func:`PySequence_InPlaceRepeat` och har samma "
"signatur.  Den bör modifiera sin första operand och returnera den.  Denna "
"plats kan lämnas till ``NULL``, i detta fall kommer "
":c:func:`!PySequence_InPlaceRepeat` att falla tillbaka till "
":c:func:`PySequence_Repeat`.  Den används också av den utökade tilldelningen"
" ``*=``, efter att ha försökt numerisk multiplikation på plats via "
":c:member:`~PyNumberMethods.nb_inplace_multiply` slot."

#: ../../c-api/typeobj.rst:2212
msgid "Buffer Object Structures"
msgstr "Strukturer för buffertobjekt"

#: ../../c-api/typeobj.rst:2220
msgid ""
"This structure holds pointers to the functions required by the :ref:`Buffer "
"protocol <bufferobjects>`. The protocol defines how an exporter object can "
"expose its internal data to consumer objects."
msgstr ""
"Denna struktur innehåller pekare till de funktioner som krävs enligt "
":ref:`Buffer protocol <bufferobjects>`. Protokollet definierar hur ett "
"exportobjekt kan exponera sina interna data till konsumentobjekt."

#: ../../c-api/typeobj.rst:2226 ../../c-api/typeobj.rst:2275
#: ../../c-api/typeobj.rst:2328 ../../c-api/typeobj.rst:2339
#: ../../c-api/typeobj.rst:2351
msgid "The signature of this function is::"
msgstr "Signaturen för denna funktion är::"

#: ../../c-api/typeobj.rst:2230
msgid ""
"Handle a request to *exporter* to fill in *view* as specified by *flags*. "
"Except for point (3), an implementation of this function MUST take these "
"steps:"
msgstr ""
"Hantera en begäran till *exporter* om att fylla i *view* enligt "
"specifikationen i *flags*. Med undantag för punkt (3) MÅSTE en "
"implementering av denna funktion vidta följande steg:"

#: ../../c-api/typeobj.rst:2234
msgid ""
"Check if the request can be met. If not, raise :c:data:`PyExc_BufferError`, "
"set :c:data:`view->obj` to ``NULL`` and return ``-1``."
msgstr ""

#: ../../c-api/typeobj.rst:2237
msgid "Fill in the requested fields."
msgstr "Fyll i de begärda fälten."

#: ../../c-api/typeobj.rst:2239
msgid "Increment an internal counter for the number of exports."
msgstr "Öka en intern räknare för antalet exporter."

#: ../../c-api/typeobj.rst:2241
msgid ""
"Set :c:data:`view->obj` to *exporter* and increment :c:data:`view->obj`."
msgstr ""

#: ../../c-api/typeobj.rst:2243
msgid "Return ``0``."
msgstr "Returnera ``0``."

#: ../../c-api/typeobj.rst:2245
msgid ""
"If *exporter* is part of a chain or tree of buffer providers, two main "
"schemes can be used:"
msgstr ""
"Om *exporter* är en del av en kedja eller ett träd av buffertleverantörer "
"kan två huvudsakliga system användas:"

#: ../../c-api/typeobj.rst:2248
msgid ""
"Re-export: Each member of the tree acts as the exporting object and sets "
":c:data:`view->obj` to a new reference to itself."
msgstr ""

#: ../../c-api/typeobj.rst:2251
msgid ""
"Redirect: The buffer request is redirected to the root object of the tree. "
"Here, :c:data:`view->obj` will be a new reference to the root object."
msgstr ""

#: ../../c-api/typeobj.rst:2255
msgid ""
"The individual fields of *view* are described in section :ref:`Buffer "
"structure <buffer-structure>`, the rules how an exporter must react to "
"specific requests are in section :ref:`Buffer request types <buffer-request-"
"types>`."
msgstr ""
"De enskilda fälten i *view* beskrivs i avsnitt :ref:`Buffertstruktur "
"<buffer-structure>`, reglerna för hur en exportör måste reagera på specifika"
" förfrågningar finns i avsnitt :ref:`Buffertförfrågningstyper <buffer-"
"request-types>`."

#: ../../c-api/typeobj.rst:2260
msgid ""
"All memory pointed to in the :c:type:`Py_buffer` structure belongs to the "
"exporter and must remain valid until there are no consumers left. "
":c:member:`~Py_buffer.format`, :c:member:`~Py_buffer.shape`, "
":c:member:`~Py_buffer.strides`, :c:member:`~Py_buffer.suboffsets` and "
":c:member:`~Py_buffer.internal` are read-only for the consumer."
msgstr ""
"Allt minne som pekas ut i :c:type:`Py_buffer`-strukturen tillhör exportören "
"och måste förbli giltigt tills det inte finns några konsumenter kvar. "
":c:member:`~Py_buffer.format`, :c:member:`~Py_buffer.shape`, "
":c:member:`~Py_buffer.strides`, :c:member:`~Py_buffer.suboffsets` och "
":c:member:`~Py_buffer.internal` är skrivskyddade för konsumenten."

#: ../../c-api/typeobj.rst:2267
msgid ""
":c:func:`PyBuffer_FillInfo` provides an easy way of exposing a simple bytes "
"buffer while dealing correctly with all request types."
msgstr ""
":c:func:`PyBuffer_FillInfo` ger ett enkelt sätt att exponera en enkel "
"bytesbuffert samtidigt som alla typer av förfrågningar hanteras korrekt."

#: ../../c-api/typeobj.rst:2270
msgid ""
":c:func:`PyObject_GetBuffer` is the interface for the consumer that wraps "
"this function."
msgstr ""
":c:func:`PyObject_GetBuffer` är gränssnittet för den konsument som omsluter "
"denna funktion."

#: ../../c-api/typeobj.rst:2279
msgid ""
"Handle a request to release the resources of the buffer. If no resources "
"need to be released, :c:member:`PyBufferProcs.bf_releasebuffer` may be "
"``NULL``. Otherwise, a standard implementation of this function will take "
"these optional steps:"
msgstr ""
"Hanterar en begäran om att frigöra buffertens resurser. Om inga resurser "
"behöver frigöras kan :c:member:`PyBufferProcs.bf_releasebuffer` vara "
"``NULL``. Annars kommer en standardimplementering av denna funktion att "
"vidta dessa valfria steg:"

#: ../../c-api/typeobj.rst:2284
msgid "Decrement an internal counter for the number of exports."
msgstr "Minskar en intern räknare för antalet exporter."

#: ../../c-api/typeobj.rst:2286
msgid "If the counter is ``0``, free all memory associated with *view*."
msgstr "Om räknaren är ``0``, frigör allt minne som är associerat med *view*."

#: ../../c-api/typeobj.rst:2288
msgid ""
"The exporter MUST use the :c:member:`~Py_buffer.internal` field to keep "
"track of buffer-specific resources. This field is guaranteed to remain "
"constant, while a consumer MAY pass a copy of the original buffer as the "
"*view* argument."
msgstr ""
"Exportören MÅSTE använda fältet :c:member:`~Py_buffer.internal` för att "
"hålla reda på buffertspecifika resurser. Detta fält är garanterat konstant, "
"medan en konsument KAN skicka en kopia av den ursprungliga bufferten som "
"*view*-argument."

#: ../../c-api/typeobj.rst:2294
msgid ""
"This function MUST NOT decrement :c:data:`view->obj`, since that is done "
"automatically in :c:func:`PyBuffer_Release` (this scheme is useful for "
"breaking reference cycles)."
msgstr ""

#: ../../c-api/typeobj.rst:2299
msgid ""
":c:func:`PyBuffer_Release` is the interface for the consumer that wraps this"
" function."
msgstr ""
":c:func:`PyBuffer_Release` är gränssnittet för den konsument som omsluter "
"denna funktion."

#: ../../c-api/typeobj.rst:2307
msgid "Async Object Structures"
msgstr "Strukturer för asynkrona objekt"

#: ../../c-api/typeobj.rst:2315
msgid ""
"This structure holds pointers to the functions required to implement "
":term:`awaitable` and :term:`asynchronous iterator` objects."
msgstr ""
"Denna struktur innehåller pekare till de funktioner som krävs för att "
"implementera objekten :term:`awaitable` och :term:`asynchronous iterator`."

#: ../../c-api/typeobj.rst:2332
msgid ""
"The returned object must be an iterator, i.e. :c:func:`PyIter_Check` must "
"return ``1`` for it."
msgstr ""

#: ../../c-api/typeobj.rst:2335
msgid ""
"This slot may be set to ``NULL`` if an object is not an :term:`awaitable`."
msgstr ""
"Denna slot kan sättas till ``NULL`` om ett objekt inte är en "
":term:`awaitable`."

#: ../../c-api/typeobj.rst:2343
msgid ""
"Must return an :term:`asynchronous iterator` object. See :meth:`__anext__` "
"for details."
msgstr ""

#: ../../c-api/typeobj.rst:2346
msgid ""
"This slot may be set to ``NULL`` if an object does not implement "
"asynchronous iteration protocol."
msgstr ""
"Denna slot kan sättas till ``NULL`` om ett objekt inte implementerar "
"asynkront iterationsprotokoll."

#: ../../c-api/typeobj.rst:2355
msgid ""
"Must return an :term:`awaitable` object.  See :meth:`__anext__` for details."
" This slot may be set to ``NULL``."
msgstr ""

#: ../../c-api/typeobj.rst:2362
msgid "Slot Type typedefs"
msgstr "Slotstyp typedef"

#: ../../c-api/typeobj.rst:2366
msgid ""
"The purpose of this function is to separate memory allocation from memory "
"initialization.  It should return a pointer to a block of memory of adequate"
" length for the instance, suitably aligned, and initialized to zeros, but "
"with :attr:`ob_refcnt` set to ``1`` and :attr:`ob_type` set to the type "
"argument.  If the type's :c:member:`~PyTypeObject.tp_itemsize` is non-zero, "
"the object's :attr:`ob_size` field should be initialized to *nitems* and the"
" length of the allocated memory block should be ``tp_basicsize + "
"nitems*tp_itemsize``, rounded up to a multiple of ``sizeof(void*)``; "
"otherwise, *nitems* is not used and the length of the block should be "
":c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../../c-api/typeobj.rst:2376
msgid ""
"This function should not do any other instance initialization, not even to "
"allocate additional memory; that should be done by "
":c:member:`~PyTypeObject.tp_new`."
msgstr ""
"Denna funktion bör inte göra någon annan instansinitialisering, inte ens för"
" att allokera ytterligare minne; det bör göras av "
":c:member:`~PyTypeObject.tp_new`."

#: ../../c-api/typeobj.rst:2383
msgid "See :c:member:`~PyTypeObject.tp_free`."
msgstr "Se :c:member:`~PyTypeObject.tp_free`."

#: ../../c-api/typeobj.rst:2387
msgid "See :c:member:`~PyTypeObject.tp_new`."
msgstr "Se :c:member:`~PyTypeObject.tp_new`."

#: ../../c-api/typeobj.rst:2391
msgid "See :c:member:`~PyTypeObject.tp_init`."
msgstr "Se :c:member:`~PyTypeObject.tp_init`."

#: ../../c-api/typeobj.rst:2395
msgid "See :c:member:`~PyTypeObject.tp_repr`."
msgstr "Se :c:member:`~PyTypeObject.tp_repr`."

#: ../../c-api/typeobj.rst:2399 ../../c-api/typeobj.rst:2408
msgid "Return the value of the named attribute for the object."
msgstr "Returnerar värdet på det namngivna attributet för objektet."

#: ../../c-api/typeobj.rst:2403 ../../c-api/typeobj.rst:2414
msgid ""
"Set the value of the named attribute for the object. The value argument is "
"set to ``NULL`` to delete the attribute."
msgstr ""
"Ställ in värdet på det namngivna attributet för objektet. Argumentet value "
"sätts till ``NULL`` för att ta bort attributet."

#: ../../c-api/typeobj.rst:2410
msgid "See :c:member:`~PyTypeObject.tp_getattro`."
msgstr "Se :c:member:`~PyTypeObject.tp_getattro`."

#: ../../c-api/typeobj.rst:2417
msgid "See :c:member:`~PyTypeObject.tp_setattro`."
msgstr "Se :c:member:`~PyTypeObject.tp_setattro`."

#: ../../c-api/typeobj.rst:2421
msgid "See :c:member:`~PyTypeObject.tp_descrget`."
msgstr ""

#: ../../c-api/typeobj.rst:2425
msgid "See :c:member:`~PyTypeObject.tp_descrset`."
msgstr ""

#: ../../c-api/typeobj.rst:2429
msgid "See :c:member:`~PyTypeObject.tp_hash`."
msgstr "Se :c:member:`~PyTypeObject.tp_hash`."

#: ../../c-api/typeobj.rst:2433
msgid "See :c:member:`~PyTypeObject.tp_richcompare`."
msgstr "Se :c:member:`~PyTypeObject.tp_richcompare`."

#: ../../c-api/typeobj.rst:2437
msgid "See :c:member:`~PyTypeObject.tp_iter`."
msgstr "Se :c:member:`~PyTypeObject.tp_iter`."

#: ../../c-api/typeobj.rst:2441
msgid "See :c:member:`~PyTypeObject.tp_iternext`."
msgstr "Se :c:member:`~PyTypeObject.tp_iternext`."

#: ../../c-api/typeobj.rst:2467
msgid "Examples"
msgstr "Exempel"

#: ../../c-api/typeobj.rst:2469
msgid ""
"The following are simple examples of Python type definitions.  They include "
"common usage you may encounter.  Some demonstrate tricky corner cases.  For "
"more examples, practical info, and a tutorial, see :ref:`defining-new-types`"
" and :ref:`new-types-topics`."
msgstr ""
"Följande är enkla exempel på Python-typdefinitioner.  De inkluderar vanlig "
"användning som du kan stöta på.  Några demonstrerar knepiga hörnfall.  För "
"fler exempel, praktisk information och en handledning, se :ref:`defining-"
"new-types` och :ref:`new-types-topics`."

#: ../../c-api/typeobj.rst:2474
msgid "A basic static type::"
msgstr ""

#: ../../c-api/typeobj.rst:2491
msgid ""
"You may also find older code (especially in the CPython code base) with a "
"more verbose initializer::"
msgstr ""
"Du kan också hitta äldre kod (särskilt i CPython-kodbasen) med en mer "
"utförlig initialiserare::"

#: ../../c-api/typeobj.rst:2535
msgid "A type that supports weakrefs, instance dicts, and hashing::"
msgstr "En typ som stöder weakrefs, instance dicts och hashing::"

#: ../../c-api/typeobj.rst:2562
msgid ""
"A str subclass that cannot be subclassed and cannot be called to create "
"instances (e.g. uses a separate factory func)::"
msgstr ""

#: ../../c-api/typeobj.rst:2581
msgid "The simplest static type (with fixed-length instances)::"
msgstr ""

#: ../../c-api/typeobj.rst:2592
msgid "The simplest static type (with variable-length instances)::"
msgstr ""
