# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Heltalsobjekt"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Alla heltal är implementerade som \"långa\" heltalsobjekt av godtycklig "
"storlek."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Vid fel returnerar de flesta ``PyLong_As*`` API:er ``(return type)-1`` som "
"inte kan särskiljas från ett tal.  Använd :c:func:`PyErr_Occurred` för att "
"särskilja."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Denna subtyp av :c:type:`PyObject` representerar ett Python-objekt med "
"heltal."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Denna instans av :c:type:`PyTypeObject` representerar Pythons heltalstyp. "
"Detta är samma objekt som :class:`int` i Python-lagret."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyLongObject` eller en "
"subtyp av :c:type:`PyLongObject`.  Denna funktion lyckas alltid."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyLongObject`, men inte en "
"subtyp av :c:type:`PyLongObject`.  Denna funktion lyckas alltid."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från *v*, eller ``NULL`` "
"om det misslyckas."

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från ett C :c:expr:"
"`unsigned long`, eller ``NULL`` om det misslyckas."

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från en C :c:type:"
"`Py_ssize_t`, eller ``NULL`` vid fel."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från en C :c:type:"
"`size_t`, eller ``NULL`` om det misslyckas."

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från ett C :c:expr:`long "
"long`, eller ``NULL`` om det misslyckas."

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från ett C :c:expr:"
"`unsigned long long`, eller ``NULL`` om det misslyckas."

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Returnerar ett nytt :c:type:`PyLongObject`\\-objekt från heltalsdelen av "
"*v*, eller ``NULL`` om det misslyckas."

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"``NULL``, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, *str* is interpreted "
"using the :ref:`integers` definition; in this case, leading zeros in a non-"
"zero decimal number raises a :exc:`ValueError`. If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading spaces and single "
"underscores after a base specifier and between digits are ignored.  If there "
"are no digits, :exc:`ValueError` will be raised."
msgstr ""

#: ../../c-api/long.rst:96
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""

#: ../../c-api/long.rst:103
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Konverterar en sekvens av Unicode-siffror i strängen *u* till ett "
"heltalsvärde i Python."

#: ../../c-api/long.rst:111
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Skapar ett Python heltal från pekaren *p*. Pekarens värde kan hämtas från "
"det resulterande värdet med hjälp av :c:func:`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:122 ../../c-api/long.rst:140
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:126
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *obj* är utanför intervallet för en :"
"c:expr:`long`."

#: ../../c-api/long.rst:129 ../../c-api/long.rst:149 ../../c-api/long.rst:170
#: ../../c-api/long.rst:190 ../../c-api/long.rst:213
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Returnerar ``\\-1`` vid fel.  Använd :c:func:`PyErr_Occurred` för att "
"särskilja."

#: ../../c-api/long.rst:131 ../../c-api/long.rst:151 ../../c-api/long.rst:172
#: ../../c-api/long.rst:194 ../../c-api/long.rst:278 ../../c-api/long.rst:298
msgid "Use :meth:`__index__` if available."
msgstr ""

#: ../../c-api/long.rst:134 ../../c-api/long.rst:154 ../../c-api/long.rst:175
#: ../../c-api/long.rst:197 ../../c-api/long.rst:281 ../../c-api/long.rst:301
msgid "This function will no longer use :meth:`__int__`."
msgstr ""

#: ../../c-api/long.rst:144
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than :const:"
"`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:163 ../../c-api/long.rst:181
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:167
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *obj* är utanför intervallet för "
"ett :c:expr:`long long`."

#: ../../c-api/long.rst:185
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than :const:"
"`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and return "
"``-1``; otherwise, set *\\*overflow* to ``0``.  If any other exception "
"occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:207
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Returnerar en C :c:type:`Py_ssize_t`\\-representation av *pylong*.  *pylong* "
"måste vara en instans av :c:type:`PyLongObject`."

#: ../../c-api/long.rst:210
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *pylong* är utanför intervallet för "
"en :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:222
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Returnerar en C :c:expr:`unsigned long`\\-representation av *pylong*.  "
"*pylong* måste vara en instans av :c:type:`PyLongObject`."

#: ../../c-api/long.rst:225
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *pylong* är utanför intervallet för "
"en :c:expr:`unsigned long`."

#: ../../c-api/long.rst:228
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Returnerar ``(unsigned long)-1`` vid fel. Använd :c:func:`PyErr_Occurred` "
"för att särskilja."

#: ../../c-api/long.rst:238
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Returnerar en C :c:type:`size_t`\\-representation av *pylong*.  *pylong* "
"måste vara en instans av :c:type:`PyLongObject`."

#: ../../c-api/long.rst:241
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *pylong* är utanför intervallet för "
"en :c:type:`size_t`."

#: ../../c-api/long.rst:244
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Returnerar ``(size_t)-1`` vid fel. Använd :c:func:`PyErr_Occurred` för att "
"särskilja."

#: ../../c-api/long.rst:253
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Returnerar en C :c:expr:`unsigned long long`\\-representation av *pylong*.  "
"*pylong* måste vara en instans av :c:type:`PyLongObject`."

#: ../../c-api/long.rst:256
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *pylong* är utanför intervallet för "
"en :c:expr:`unsigned long long`."

#: ../../c-api/long.rst:259
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Returnerar ``(unsigned long long)-1`` vid fel. Använd :c:func:"
"`PyErr_Occurred` för att särskilja."

#: ../../c-api/long.rst:262
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"En negativ *pylong* ger nu upphov till :exc:`OverflowError`, inte :exc:"
"`TypeError`."

#: ../../c-api/long.rst:268
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:272
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Om värdet på *obj* är utanför intervallet för en :c:expr:`unsigned long`, "
"returneras minskningen av värdet modulo ``ULONG_MAX + 1``."

#: ../../c-api/long.rst:275
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Returnerar ``(unsigned long)-1`` vid fel.  Använd :c:func:`PyErr_Occurred` "
"för att särskilja."

#: ../../c-api/long.rst:287
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:"
"`__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:292
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Om värdet på *obj* är utanför intervallet för en :c:expr:`unsigned long "
"long`, returneras reduktionen av värdet modulo ``ULLONG_MAX + 1``."

#: ../../c-api/long.rst:295
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Returnerar ``(unsigned long long)-1`` vid fel.  Använd :c:func:"
"`PyErr_Occurred` för att särskilja."

#: ../../c-api/long.rst:307
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Returnerar en C :c:expr:`double`\\-representation av *pylong*.  *pylong* "
"måste vara en instans av :c:type:`PyLongObject`."

#: ../../c-api/long.rst:310
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"Utlös :exc:`OverflowError` om värdet på *pylong* är utanför intervallet för "
"en :c:expr:`double`."

#: ../../c-api/long.rst:313
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Returnerar ``\\-1.0`` vid fel.  Använd :c:func:`PyErr_Occurred` för att "
"undvika tvetydighet."

#: ../../c-api/long.rst:318
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Konverterar ett Python-heltal *pylong* till en C :c:expr:`void`\\-pekare. Om "
"*pylong* inte kan konverteras, kommer ett :exc:`OverflowError` att uppstå.  "
"Detta är endast säkerställt för att producera en användbar :c:expr:`void`\\-"
"pekare för värden som skapats med :c:func:`PyLong_FromVoidPtr`."

#: ../../c-api/long.rst:323
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Returnerar ``NULL`` vid fel.  Använd :c:func:`PyErr_Occurred` för att "
"särskilja."
