# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../extending/newtypes.rst:7
msgid "Defining Extension Types: Assorted Topics"
msgstr "Definiera utökningstyper: Blandade ämnen"

#: ../../extending/newtypes.rst:11
msgid ""
"This section aims to give a quick fly-by on the various type methods you can "
"implement and what they do."
msgstr ""
"Detta avsnitt syftar till att ge en snabb genomgång av de olika typmetoder "
"som du kan implementera och vad de gör."

#: ../../extending/newtypes.rst:14
msgid ""
"Here is the definition of :c:type:`PyTypeObject`, with some fields only used "
"in debug builds omitted:"
msgstr ""

#: ../../extending/newtypes.rst:20
msgid ""
"Now that's a *lot* of methods.  Don't worry too much though -- if you have a "
"type you want to define, the chances are very good that you will only "
"implement a handful of these."
msgstr ""
"Nu är det en *mängd* metoder.  Oroa dig dock inte för mycket - om du har en "
"typ som du vill definiera är chansen mycket stor att du bara kommer att "
"implementera en handfull av dessa."

#: ../../extending/newtypes.rst:24
msgid ""
"As you probably expect by now, we're going to go over this and give more "
"information about the various handlers.  We won't go in the order they are "
"defined in the structure, because there is a lot of historical baggage that "
"impacts the ordering of the fields.  It's often easiest to find an example "
"that includes the fields you need and then change the values to suit your "
"new type. ::"
msgstr ""
"Som du förmodligen förväntar dig vid det här laget kommer vi att gå igenom "
"detta och ge mer information om de olika hanterarna.  Vi kommer inte att gå "
"igenom dem i den ordning de definieras i strukturen, eftersom det finns en "
"hel del historiskt bagage som påverkar ordningen på fälten.  Det är ofta "
"enklast att hitta ett exempel som innehåller de fält du behöver och sedan "
"ändra värdena så att de passar din nya typ:"

#: ../../extending/newtypes.rst:33
msgid ""
"The name of the type -- as mentioned in the previous chapter, this will "
"appear in various places, almost entirely for diagnostic purposes. Try to "
"choose something that will be helpful in such a situation! ::"
msgstr ""
"Typens namn - som nämndes i föregående kapitel kommer detta att visas på "
"olika ställen, nästan uteslutande för diagnostiska ändamål. Försök att välja "
"något som kan vara till hjälp i en sådan situation! ::"

#: ../../extending/newtypes.rst:39
msgid ""
"These fields tell the runtime how much memory to allocate when new objects "
"of this type are created.  Python has some built-in support for variable "
"length structures (think: strings, tuples) which is where the :c:member:"
"`~PyTypeObject.tp_itemsize` field comes in.  This will be dealt with "
"later. ::"
msgstr ""
"Dessa fält talar om för runtime hur mycket minne som ska allokeras när nya "
"objekt av den här typen skapas.  Python har en del inbyggt stöd för "
"strukturer med variabel längd (tänk: strängar, tupler) och det är här "
"fältet :c:member:`~PyTypeObject.tp_itemsize` kommer in i bilden.  Detta "
"kommer att behandlas senare. ::"

#: ../../extending/newtypes.rst:46
msgid ""
"Here you can put a string (or its address) that you want returned when the "
"Python script references ``obj.__doc__`` to retrieve the doc string."
msgstr ""
"Här kan du lägga in en sträng (eller dess adress) som du vill ska returneras "
"när Python-skriptet refererar till ``obj.__doc__`` för att hämta doc-"
"strängen."

#: ../../extending/newtypes.rst:49
msgid ""
"Now we come to the basic type methods -- the ones most extension types will "
"implement."
msgstr ""
"Nu kommer vi till de grundläggande typmetoderna - de som de flesta "
"extensionstyper kommer att implementera."

#: ../../extending/newtypes.rst:54
msgid "Finalization and De-allocation"
msgstr "Slutförande och avyttring"

#: ../../extending/newtypes.rst:66
msgid ""
"This function is called when the reference count of the instance of your "
"type is reduced to zero and the Python interpreter wants to reclaim it.  If "
"your type has memory to free or other clean-up to perform, you can put it "
"here.  The object itself needs to be freed here as well.  Here is an example "
"of this function::"
msgstr ""
"Denna funktion anropas när referensantalet för instansen av din typ har "
"reducerats till noll och Python-tolken vill återta den.  Om din typ har "
"minne att frigöra eller annan upprensning att utföra, kan du lägga det här.  "
"Själva objektet måste också frigöras här.  Här är ett exempel på denna "
"funktion::"

#: ../../extending/newtypes.rst:79
msgid ""
"If your type supports garbage collection, the destructor should call :c:func:"
"`PyObject_GC_UnTrack` before clearing any member fields::"
msgstr ""
"Om din typ stöder sopsortering bör destruktorn anropa :c:func:"
"`PyObject_GC_UnTrack` innan den rensar alla medlemsfält::"

#: ../../extending/newtypes.rst:95
msgid ""
"One important requirement of the deallocator function is that it leaves any "
"pending exceptions alone.  This is important since deallocators are "
"frequently called as the interpreter unwinds the Python stack; when the "
"stack is unwound due to an exception (rather than normal returns), nothing "
"is done to protect the deallocators from seeing that an exception has "
"already been set.  Any actions which a deallocator performs which may cause "
"additional Python code to be executed may detect that an exception has been "
"set.  This can lead to misleading errors from the interpreter.  The proper "
"way to protect against this is to save a pending exception before performing "
"the unsafe action, and restoring it when done.  This can be done using the :"
"c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` functions::"
msgstr ""
"Ett viktigt krav på deallocator-funktionen är att den lämnar alla väntande "
"undantag i fred.  Detta är viktigt eftersom deallokatorer ofta anropas när "
"tolken rullar upp Python-stacken; när stacken rullas upp på grund av ett "
"undantag (snarare än normala returer) görs ingenting för att skydda "
"deallokatorerna från att se att ett undantag redan har ställts in.  Alla "
"åtgärder som en deallokator utför som kan orsaka att ytterligare Python-kod "
"exekveras kan upptäcka att ett undantag har satts.  Detta kan leda till "
"missvisande fel från tolken.  Det korrekta sättet att skydda sig mot detta "
"är att spara ett väntande undantag innan man utför den osäkra åtgärden och "
"återställa det när man är klar.  Detta kan göras med hjälp av funktionerna :"
"c:func:`PyErr_Fetch` och :c:func:`PyErr_Restore`::"

#: ../../extending/newtypes.rst:134
msgid ""
"There are limitations to what you can safely do in a deallocator function. "
"First, if your type supports garbage collection (using :c:member:"
"`~PyTypeObject.tp_traverse` and/or :c:member:`~PyTypeObject.tp_clear`), some "
"of the object's members can have been cleared or finalized by the time :c:"
"member:`~PyTypeObject.tp_dealloc` is called.  Second, in :c:member:"
"`~PyTypeObject.tp_dealloc`, your object is in an unstable state: its "
"reference count is equal to zero.  Any call to a non-trivial object or API "
"(as in the example above) might end up calling :c:member:`~PyTypeObject."
"tp_dealloc` again, causing a double free and a crash."
msgstr ""
"Det finns begränsningar för vad du säkert kan göra i en "
"deallokeringsfunktion. För det första, om din typ stöder garbage collection "
"(med :c:member:`~PyTypeObject.tp_traverse` och/eller :c:member:"
"`~PyTypeObject.tp_clear`), kan några av objektets medlemmar ha rensats eller "
"slutförts när :c:member:`~PyTypeObject.tp_dealloc` anropas.  För det andra, "
"i :c:member:`~PyTypeObject.tp_dealloc` är ditt objekt i ett instabilt "
"tillstånd: dess referensantal är lika med noll.  Varje anrop till ett icke-"
"trivialt objekt eller API (som i exemplet ovan) kan sluta med att :c:member:"
"`~PyTypeObject.tp_dealloc` anropas igen, vilket orsakar en dubbel free och "
"en krasch."

#: ../../extending/newtypes.rst:143
msgid ""
"Starting with Python 3.4, it is recommended not to put any complex "
"finalization code in :c:member:`~PyTypeObject.tp_dealloc`, and instead use "
"the new :c:member:`~PyTypeObject.tp_finalize` type method."
msgstr ""
"Från och med Python 3.4 rekommenderas det att inte lägga in någon komplex "
"avslutningskod i :c:member:`~PyTypeObject.tp_dealloc`, utan istället använda "
"den nya typmetoden :c:member:`~PyTypeObject.tp_finalize`."

#: ../../extending/newtypes.rst:148
msgid ":pep:`442` explains the new finalization scheme."
msgstr ":pep:`442` förklarar det nya finaliseringsschemat."

#: ../../extending/newtypes.rst:155
msgid "Object Presentation"
msgstr "Presentation av objekt"

#: ../../extending/newtypes.rst:157
msgid ""
"In Python, there are two ways to generate a textual representation of an "
"object: the :func:`repr` function, and the :func:`str` function.  (The :func:"
"`print` function just calls :func:`str`.)  These handlers are both optional."
msgstr ""
"I Python finns det två sätt att generera en textuell representation av ett "
"objekt: funktionen :func:`repr` och funktionen :func:`str`.  (Funktionen :"
"func:`print` anropar bara :func:`str`.) Dessa hanterare är båda valfria."

#: ../../extending/newtypes.rst:166
msgid ""
"The :c:member:`~PyTypeObject.tp_repr` handler should return a string object "
"containing a representation of the instance for which it is called.  Here is "
"a simple example::"
msgstr ""
"Hanteraren :c:member:`~PyTypeObject.tp_repr` bör returnera ett strängobjekt "
"som innehåller en representation av den instans för vilken den anropas.  Här "
"är ett enkelt exempel::"

#: ../../extending/newtypes.rst:177
msgid ""
"If no :c:member:`~PyTypeObject.tp_repr` handler is specified, the "
"interpreter will supply a representation that uses the type's :c:member:"
"`~PyTypeObject.tp_name` and a uniquely-identifying value for the object."
msgstr ""

#: ../../extending/newtypes.rst:181
msgid ""
"The :c:member:`~PyTypeObject.tp_str` handler is to :func:`str` what the :c:"
"member:`~PyTypeObject.tp_repr` handler described above is to :func:`repr`; "
"that is, it is called when Python code calls :func:`str` on an instance of "
"your object.  Its implementation is very similar to the :c:member:"
"`~PyTypeObject.tp_repr` function, but the resulting string is intended for "
"human consumption.  If :c:member:`~PyTypeObject.tp_str` is not specified, "
"the :c:member:`~PyTypeObject.tp_repr` handler is used instead."
msgstr ""
"Hanteraren :c:member:`~PyTypeObject.tp_str` är för :func:`str` vad "
"hanteraren :c:member:`~PyTypeObject.tp_repr` som beskrivs ovan är för :func:"
"`repr`; det vill säga den anropas när Python-kod anropar :func:`str` på en "
"instans av ditt objekt.  Dess implementering är mycket lik :c:member:"
"`~PyTypeObject.tp_repr`-funktionen, men den resulterande strängen är avsedd "
"för mänsklig konsumtion.  Om :c:member:`~PyTypeObject.tp_str` inte "
"specificeras används istället :c:member:`~PyTypeObject.tp_repr`."

#: ../../extending/newtypes.rst:188
msgid "Here is a simple example::"
msgstr "Här är ett enkelt exempel::"

#: ../../extending/newtypes.rst:200
msgid "Attribute Management"
msgstr "Hantering av attribut"

#: ../../extending/newtypes.rst:202
msgid ""
"For every object which can support attributes, the corresponding type must "
"provide the functions that control how the attributes are resolved.  There "
"needs to be a function which can retrieve attributes (if any are defined), "
"and another to set attributes (if setting attributes is allowed).  Removing "
"an attribute is a special case, for which the new value passed to the "
"handler is ``NULL``."
msgstr ""
"För varje objekt som kan stödja attribut måste motsvarande typ "
"tillhandahålla de funktioner som styr hur attributen löses.  Det måste "
"finnas en funktion som kan hämta attribut (om några är definierade) och en "
"annan för att ställa in attribut (om det är tillåtet att ställa in "
"attribut).  Att ta bort ett attribut är ett specialfall, för vilket det nya "
"värdet som skickas till hanteraren är ``NULL``."

#: ../../extending/newtypes.rst:208
msgid ""
"Python supports two pairs of attribute handlers; a type that supports "
"attributes only needs to implement the functions for one pair.  The "
"difference is that one pair takes the name of the attribute as a :c:type:"
"`char\\*`, while the other accepts a :c:type:`PyObject\\*`.  Each type can "
"use whichever pair makes more sense for the implementation's convenience. ::"
msgstr ""

#: ../../extending/newtypes.rst:220
msgid ""
"If accessing attributes of an object is always a simple operation (this will "
"be explained shortly), there are generic implementations which can be used "
"to provide the :c:type:`PyObject\\*` version of the attribute management "
"functions. The actual need for type-specific attribute handlers almost "
"completely disappeared starting with Python 2.2, though there are many "
"examples which have not been updated to use some of the new generic "
"mechanism that is available."
msgstr ""

#: ../../extending/newtypes.rst:231
msgid "Generic Attribute Management"
msgstr "Generisk attributhantering"

#: ../../extending/newtypes.rst:233
msgid ""
"Most extension types only use *simple* attributes.  So, what makes the "
"attributes simple?  There are only a couple of conditions that must be met:"
msgstr ""
"De flesta tilläggstyper använder bara *enkla* attribut.  Vad är det då som "
"gör attributen enkla?  Det finns bara ett par villkor som måste uppfyllas:"

#: ../../extending/newtypes.rst:236
msgid ""
"The name of the attributes must be known when :c:func:`PyType_Ready` is "
"called."
msgstr ""
"Namnet på attributen måste vara känt när :c:func:`PyType_Ready` anropas."

#: ../../extending/newtypes.rst:239
msgid ""
"No special processing is needed to record that an attribute was looked up or "
"set, nor do actions need to be taken based on the value."
msgstr ""
"Ingen särskild behandling behövs för att registrera att ett attribut har "
"sökts upp eller ställts in, och inga åtgärder behöver vidtas baserat på "
"värdet."

#: ../../extending/newtypes.rst:242
msgid ""
"Note that this list does not place any restrictions on the values of the "
"attributes, when the values are computed, or how relevant data is stored."
msgstr ""
"Observera att denna lista inte innehåller några restriktioner för "
"attributens värden, när värdena beräknas eller hur relevanta data lagras."

#: ../../extending/newtypes.rst:245
msgid ""
"When :c:func:`PyType_Ready` is called, it uses three tables referenced by "
"the type object to create :term:`descriptor`\\s which are placed in the "
"dictionary of the type object.  Each descriptor controls access to one "
"attribute of the instance object.  Each of the tables is optional; if all "
"three are ``NULL``, instances of the type will only have attributes that are "
"inherited from their base type, and should leave the :c:member:"
"`~PyTypeObject.tp_getattro` and :c:member:`~PyTypeObject.tp_setattro` fields "
"``NULL`` as well, allowing the base type to handle attributes."
msgstr ""
"När :c:func:`PyType_Ready` anropas används tre tabeller som refereras av "
"typobjektet för att skapa :term:`descriptor` som placeras i typobjektets "
"dictionary.  Varje deskriptor kontrollerar åtkomst till ett attribut hos "
"instansobjektet.  Var och en av tabellerna är valfri; om alla tre är "
"``NULL`` kommer instanser av typen endast att ha attribut som ärvs från "
"deras bastyp, och bör lämna fälten :c:member:`~PyTypeObject.tp_getattro` "
"och :c:member:`~PyTypeObject.tp_setattro` ``NULL`` också, så att bastypen "
"kan hantera attribut."

#: ../../extending/newtypes.rst:253
msgid "The tables are declared as three fields of the type object::"
msgstr "Tabellerna deklareras som tre fält av typen object::"

#: ../../extending/newtypes.rst:259
msgid ""
"If :c:member:`~PyTypeObject.tp_methods` is not ``NULL``, it must refer to an "
"array of :c:type:`PyMethodDef` structures.  Each entry in the table is an "
"instance of this structure::"
msgstr ""
"Om :c:member:`~PyTypeObject.tp_methods` inte är ``NULL``, måste den referera "
"till en array av :c:type:`PyMethodDef`-strukturer.  Varje post i tabellen är "
"en instans av denna struktur::"

#: ../../extending/newtypes.rst:270
msgid ""
"One entry should be defined for each method provided by the type; no entries "
"are needed for methods inherited from a base type.  One additional entry is "
"needed at the end; it is a sentinel that marks the end of the array.  The :"
"attr:`ml_name` field of the sentinel must be ``NULL``."
msgstr ""

#: ../../extending/newtypes.rst:275
msgid ""
"The second table is used to define attributes which map directly to data "
"stored in the instance.  A variety of primitive C types are supported, and "
"access may be read-only or read-write.  The structures in the table are "
"defined as::"
msgstr ""
"Den andra tabellen används för att definiera attribut som är direkt kopplade "
"till data som lagras i instansen.  En mängd olika primitiva C-typer stöds "
"och åtkomsten kan vara skrivskyddad eller skrivskyddad.  Strukturerna i "
"tabellen definieras enligt följande::"

#: ../../extending/newtypes.rst:287
msgid ""
"For each entry in the table, a :term:`descriptor` will be constructed and "
"added to the type which will be able to extract a value from the instance "
"structure.  The :attr:`type` field should contain one of the type codes "
"defined in the :file:`structmember.h` header; the value will be used to "
"determine how to convert Python values to and from C values.  The :attr:"
"`flags` field is used to store flags which control how the attribute can be "
"accessed."
msgstr ""

#: ../../extending/newtypes.rst:294
msgid ""
"The following flag constants are defined in :file:`structmember.h`; they may "
"be combined using bitwise-OR."
msgstr ""

#: ../../extending/newtypes.rst:298
msgid "Constant"
msgstr "Konstant"

#: ../../extending/newtypes.rst:298
msgid "Meaning"
msgstr "Betydelse"

#: ../../extending/newtypes.rst:300
msgid ":const:`READONLY`"
msgstr ""

#: ../../extending/newtypes.rst:300
msgid "Never writable."
msgstr ""

#: ../../extending/newtypes.rst:302
msgid ":const:`READ_RESTRICTED`"
msgstr ""

#: ../../extending/newtypes.rst:302
msgid "Not readable in restricted mode."
msgstr ""

#: ../../extending/newtypes.rst:304
msgid ":const:`WRITE_RESTRICTED`"
msgstr ""

#: ../../extending/newtypes.rst:304
msgid "Not writable in restricted mode."
msgstr ""

#: ../../extending/newtypes.rst:306
msgid ":const:`RESTRICTED`"
msgstr ""

#: ../../extending/newtypes.rst:306
msgid "Not readable or writable in restricted mode."
msgstr ""

#: ../../extending/newtypes.rst:315
msgid ""
"An interesting advantage of using the :c:member:`~PyTypeObject.tp_members` "
"table to build descriptors that are used at runtime is that any attribute "
"defined this way can have an associated doc string simply by providing the "
"text in the table.  An application can use the introspection API to retrieve "
"the descriptor from the class object, and get the doc string using its :attr:"
"`__doc__` attribute."
msgstr ""

#: ../../extending/newtypes.rst:321
msgid ""
"As with the :c:member:`~PyTypeObject.tp_methods` table, a sentinel entry "
"with a :attr:`name` value of ``NULL`` is required."
msgstr ""

#: ../../extending/newtypes.rst:335
msgid "Type-specific Attribute Management"
msgstr "Typspecifik attributhantering"

#: ../../extending/newtypes.rst:337
msgid ""
"For simplicity, only the :c:type:`char\\*` version will be demonstrated "
"here; the type of the name parameter is the only difference between the :c:"
"type:`char\\*` and :c:type:`PyObject\\*` flavors of the interface. This "
"example effectively does the same thing as the generic example above, but "
"does not use the generic support added in Python 2.2.  It explains how the "
"handler functions are called, so that if you do need to extend their "
"functionality, you'll understand what needs to be done."
msgstr ""

#: ../../extending/newtypes.rst:345
msgid ""
"The :c:member:`~PyTypeObject.tp_getattr` handler is called when the object "
"requires an attribute look-up.  It is called in the same situations where "
"the :meth:`__getattr__` method of a class would be called."
msgstr ""

#: ../../extending/newtypes.rst:349
msgid "Here is an example::"
msgstr "Här är ett exempel::"

#: ../../extending/newtypes.rst:365
msgid ""
"The :c:member:`~PyTypeObject.tp_setattr` handler is called when the :meth:"
"`__setattr__` or :meth:`__delattr__` method of a class instance would be "
"called.  When an attribute should be deleted, the third parameter will be "
"``NULL``.  Here is an example that simply raises an exception; if this were "
"really all you wanted, the :c:member:`~PyTypeObject.tp_setattr` handler "
"should be set to ``NULL``. ::"
msgstr ""

#: ../../extending/newtypes.rst:379
msgid "Object Comparison"
msgstr "Jämförelse av objekt"

#: ../../extending/newtypes.rst:385
msgid ""
"The :c:member:`~PyTypeObject.tp_richcompare` handler is called when "
"comparisons are needed.  It is analogous to the :ref:`rich comparison "
"methods <richcmpfuncs>`, like :meth:`__lt__`, and also called by :c:func:"
"`PyObject_RichCompare` and :c:func:`PyObject_RichCompareBool`."
msgstr ""

#: ../../extending/newtypes.rst:390
msgid ""
"This function is called with two Python objects and the operator as "
"arguments, where the operator is one of ``Py_EQ``, ``Py_NE``, ``Py_LE``, "
"``Py_GE``, ``Py_LT`` or ``Py_GT``.  It should compare the two objects with "
"respect to the specified operator and return ``Py_True`` or ``Py_False`` if "
"the comparison is successful, ``Py_NotImplemented`` to indicate that "
"comparison is not implemented and the other object's comparison method "
"should be tried, or ``NULL`` if an exception was set."
msgstr ""
"Denna funktion anropas med två Python-objekt och operatorn som argument, där "
"operatorn är en av ``Py_EQ``, ``Py_NE``, ``Py_LE``, ``Py_GE``, ``Py_LT`` "
"eller ``Py_GT``.  Den bör jämföra de två objekten med avseende på den "
"angivna operatorn och returnera ``Py_True`` eller ``Py_False`` om "
"jämförelsen lyckas, ``Py_NotImplemented`` för att indikera att jämförelsen "
"inte är implementerad och att det andra objektets jämförelsemetod bör "
"prövas, eller ``NULL`` om ett undantag har angetts."

#: ../../extending/newtypes.rst:398
msgid ""
"Here is a sample implementation, for a datatype that is considered equal if "
"the size of an internal pointer is equal::"
msgstr ""
"Här är ett exempel på implementering, för en datatyp som anses vara lika om "
"storleken på en intern pekare är lika::"

#: ../../extending/newtypes.rst:428
msgid "Abstract Protocol Support"
msgstr "Stöd för abstrakta protokoll"

#: ../../extending/newtypes.rst:430
msgid ""
"Python supports a variety of *abstract* 'protocols;' the specific interfaces "
"provided to use these interfaces are documented in :ref:`abstract`."
msgstr ""
"Python stöder en mängd olika *abstrakta* \"protokoll\"; de specifika "
"gränssnitt som tillhandahålls för att använda dessa gränssnitt dokumenteras "
"i :ref:`abstract`."

#: ../../extending/newtypes.rst:434
msgid ""
"A number of these abstract interfaces were defined early in the development "
"of the Python implementation.  In particular, the number, mapping, and "
"sequence protocols have been part of Python since the beginning.  Other "
"protocols have been added over time.  For protocols which depend on several "
"handler routines from the type implementation, the older protocols have been "
"defined as optional blocks of handlers referenced by the type object.  For "
"newer protocols there are additional slots in the main type object, with a "
"flag bit being set to indicate that the slots are present and should be "
"checked by the interpreter.  (The flag bit does not indicate that the slot "
"values are non-``NULL``. The flag may be set to indicate the presence of a "
"slot, but a slot may still be unfilled.) ::"
msgstr ""
"Ett antal av dessa abstrakta gränssnitt definierades tidigt i utvecklingen "
"av Python-implementeringen.  I synnerhet har nummer-, mappnings- och "
"sekvensprotokollen varit en del av Python sedan början.  Andra protokoll har "
"lagts till över tiden.  För protokoll som är beroende av flera "
"hanterarrutiner från typimplementationen har de äldre protokollen "
"definierats som valfria block av hanterare som refereras av typobjektet.  "
"För nyare protokoll finns det ytterligare slots i huvudtypobjektet, med en "
"flaggbit som sätts för att indikera att slots finns och bör kontrolleras av "
"tolken.  (Flaggbiten anger inte att slotvärdena är icke-``NULL``. Flaggan "
"kan vara satt för att ange att en slot finns, men en slot kan fortfarande "
"vara ofylld) ::"

#: ../../extending/newtypes.rst:449
msgid ""
"If you wish your object to be able to act like a number, a sequence, or a "
"mapping object, then you place the address of a structure that implements "
"the C type :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, or :c:"
"type:`PyMappingMethods`, respectively. It is up to you to fill in this "
"structure with appropriate values. You can find examples of the use of each "
"of these in the :file:`Objects` directory of the Python source "
"distribution. ::"
msgstr ""
"Om du vill att ditt objekt ska kunna fungera som ett nummer, en sekvens "
"eller ett mappningsobjekt, så placerar du adressen till en struktur som "
"implementerar C-typen :c:type:`PyNumberMethods`, :c:type:"
"`PySequenceMethods`, eller :c:type:`PyMappingMethods`, respektive. Det är "
"upp till dig att fylla i denna struktur med lämpliga värden. Du kan hitta "
"exempel på användningen av var och en av dessa i :file:`Objects`-katalogen i "
"Python-källdistributionen. ::"

#: ../../extending/newtypes.rst:458
msgid ""
"This function, if you choose to provide it, should return a hash number for "
"an instance of your data type. Here is a simple example::"
msgstr ""
"Denna funktion, om du väljer att tillhandahålla den, ska returnera ett "
"hashnummer för en instans av din datatyp. Här är ett enkelt exempel::"

#: ../../extending/newtypes.rst:471
msgid ""
":c:type:`Py_hash_t` is a signed integer type with a platform-varying width. "
"Returning ``-1`` from :c:member:`~PyTypeObject.tp_hash` indicates an error, "
"which is why you should be careful to avoid returning it when hash "
"computation is successful, as seen above."
msgstr ""
":c:type:`Py_hash_t` är en signerad heltalstyp med plattformsvarierande "
"bredd. Att returnera ``-1`` från :c:member:`~PyTypeObject.tp_hash` indikerar "
"ett fel, vilket är anledningen till att du bör vara noga med att undvika att "
"returnera det när hashberäkningen lyckas, som ovan."

#: ../../extending/newtypes.rst:480
msgid ""
"This function is called when an instance of your data type is \"called\", "
"for example, if ``obj1`` is an instance of your data type and the Python "
"script contains ``obj1('hello')``, the :c:member:`~PyTypeObject.tp_call` "
"handler is invoked."
msgstr ""
"Denna funktion anropas när en instans av din datatyp \"anropas\", t.ex. om "
"``obj1`` är en instans av din datatyp och Python-skriptet innehåller "
"``obj1('hello')``, anropas hanteraren :c:member:`~PyTypeObject.tp_call`."

#: ../../extending/newtypes.rst:484
msgid "This function takes three arguments:"
msgstr "Denna funktion tar tre argument:"

#: ../../extending/newtypes.rst:486
msgid ""
"*self* is the instance of the data type which is the subject of the call. If "
"the call is ``obj1('hello')``, then *self* is ``obj1``."
msgstr ""
"*self* är instansen av den datatyp som är föremål för anropet. Om anropet är "
"``obj1('hello')``, så är *self* ``obj1``."

#: ../../extending/newtypes.rst:489
msgid ""
"*args* is a tuple containing the arguments to the call.  You can use :c:func:"
"`PyArg_ParseTuple` to extract the arguments."
msgstr ""
"*args* är en tupel som innehåller argumenten till anropet.  Du kan använda :"
"c:func:`PyArg_ParseTuple` för att extrahera argumenten."

#: ../../extending/newtypes.rst:492
msgid ""
"*kwds* is a dictionary of keyword arguments that were passed. If this is non-"
"``NULL`` and you support keyword arguments, use :c:func:"
"`PyArg_ParseTupleAndKeywords` to extract the arguments.  If you do not want "
"to support keyword arguments and this is non-``NULL``, raise a :exc:"
"`TypeError` with a message saying that keyword arguments are not supported."
msgstr ""
"*kwds* är en ordbok med nyckelordsargument som skickades. Om detta är icke-"
"``NULL`` och du stöder nyckelordsargument, använd :c:func:"
"`PyArg_ParseTupleAndKeywords` för att extrahera argumenten.  Om du inte vill "
"stödja nyckelordsargument och detta är icke-``NULL``, skapa ett :exc:"
"`TypeError` med ett meddelande som säger att nyckelordsargument inte stöds."

#: ../../extending/newtypes.rst:498
msgid "Here is a toy ``tp_call`` implementation::"
msgstr "Här är en leksaksimplementation av ``tp_call``::"

#: ../../extending/newtypes.rst:524
msgid ""
"These functions provide support for the iterator protocol.  Both handlers "
"take exactly one parameter, the instance for which they are being called, "
"and return a new reference.  In the case of an error, they should set an "
"exception and return ``NULL``.  :c:member:`~PyTypeObject.tp_iter` "
"corresponds to the Python :meth:`__iter__` method, while :c:member:"
"`~PyTypeObject.tp_iternext` corresponds to the Python :meth:`~iterator."
"__next__` method."
msgstr ""

#: ../../extending/newtypes.rst:531
msgid ""
"Any :term:`iterable` object must implement the :c:member:`~PyTypeObject."
"tp_iter` handler, which must return an :term:`iterator` object.  Here the "
"same guidelines apply as for Python classes:"
msgstr ""
"Alla :term:`iterable`-objekt måste implementera :c:member:`~PyTypeObject."
"tp_iter`-hanteraren, som måste returnera ett :term:`iterator`-objekt.  Här "
"gäller samma riktlinjer som för Python-klasser:"

#: ../../extending/newtypes.rst:535
msgid ""
"For collections (such as lists and tuples) which can support multiple "
"independent iterators, a new iterator should be created and returned by each "
"call to :c:member:`~PyTypeObject.tp_iter`."
msgstr ""
"För samlingar (t.ex. listor och tupler) som kan stödja flera oberoende "
"iteratorer bör en ny iterator skapas och returneras vid varje anrop till :c:"
"member:`~PyTypeObject.tp_iter`."

#: ../../extending/newtypes.rst:538
msgid ""
"Objects which can only be iterated over once (usually due to side effects of "
"iteration, such as file objects) can implement :c:member:`~PyTypeObject."
"tp_iter` by returning a new reference to themselves -- and should also "
"therefore implement the :c:member:`~PyTypeObject.tp_iternext`  handler."
msgstr ""
"Objekt som bara kan itereras över en gång (vanligtvis på grund av bieffekter "
"av iteration, t.ex. filobjekt) kan implementera :c:member:`~PyTypeObject."
"tp_iter` genom att returnera en ny referens till sig själva -- och bör "
"därför också implementera :c:member:`~PyTypeObject.tp_iternext`-hanteraren."

#: ../../extending/newtypes.rst:543
msgid ""
"Any :term:`iterator` object should implement both :c:member:`~PyTypeObject."
"tp_iter` and :c:member:`~PyTypeObject.tp_iternext`.  An iterator's :c:member:"
"`~PyTypeObject.tp_iter` handler should return a new reference to the "
"iterator.  Its :c:member:`~PyTypeObject.tp_iternext` handler should return a "
"new reference to the next object in the iteration, if there is one. If the "
"iteration has reached the end, :c:member:`~PyTypeObject.tp_iternext` may "
"return ``NULL`` without setting an exception, or it may set :exc:"
"`StopIteration` *in addition* to returning ``NULL``; avoiding the exception "
"can yield slightly better performance.  If an actual error occurs, :c:member:"
"`~PyTypeObject.tp_iternext` should always set an exception and return "
"``NULL``."
msgstr ""
"Varje :term:`iterator`-objekt bör implementera både :c:member:`~PyTypeObject."
"tp_iter` och :c:member:`~PyTypeObject.tp_iternext`.  En iterators :c:member:"
"`~PyTypeObject.tp_iter`-hanterare bör returnera en ny referens till "
"iteratorn.  Dess :c:member:`~PyTypeObject.tp_iternext`-hanterare bör "
"returnera en ny referens till nästa objekt i iterationen, om det finns ett "
"sådant. Om iterationen har nått slutet kan :c:member:`~PyTypeObject."
"tp_iternext` returnera ``NULL`` utan att ställa in ett undantag, eller så "
"kan den ställa in :exc:`StopIteration` *i tillägg* till att returnera "
"``NULL``; att undvika undantaget kan ge något bättre prestanda.  Om ett "
"faktiskt fel inträffar bör :c:member:`~PyTypeObject.tp_iternext` alltid "
"sätta ett undantag och returnera ``NULL``."

#: ../../extending/newtypes.rst:559
msgid "Weak Reference Support"
msgstr "Svagt referensstöd"

#: ../../extending/newtypes.rst:561
msgid ""
"One of the goals of Python's weak reference implementation is to allow any "
"type to participate in the weak reference mechanism without incurring the "
"overhead on performance-critical objects (such as numbers)."
msgstr ""
"Ett av målen med Pythons implementering av svaga referenser är att låta alla "
"typer delta i mekanismen för svaga referenser utan att det uppstår overhead "
"på prestandakritiska objekt (t.ex. tal)."

#: ../../extending/newtypes.rst:566
msgid "Documentation for the :mod:`weakref` module."
msgstr "Dokumentation för modulen :mod:`weakref`."

#: ../../extending/newtypes.rst:568
msgid ""
"For an object to be weakly referencable, the extension type must do two "
"things:"
msgstr ""

#: ../../extending/newtypes.rst:570
msgid ""
"Include a :c:type:`PyObject\\*` field in the C object structure dedicated to "
"the weak reference mechanism.  The object's constructor should leave it "
"``NULL`` (which is automatic when using the default :c:member:`~PyTypeObject."
"tp_alloc`)."
msgstr ""

#: ../../extending/newtypes.rst:575
msgid ""
"Set the :c:member:`~PyTypeObject.tp_weaklistoffset` type member to the "
"offset of the aforementioned field in the C object structure, so that the "
"interpreter knows how to access and modify that field."
msgstr ""

#: ../../extending/newtypes.rst:579
msgid ""
"Concretely, here is how a trivial object structure would be augmented with "
"the required field::"
msgstr ""

#: ../../extending/newtypes.rst:587
msgid "And the corresponding member in the statically-declared type object::"
msgstr ""

#: ../../extending/newtypes.rst:595
msgid ""
"The only further addition is that ``tp_dealloc`` needs to clear any weak "
"references (by calling :c:func:`PyObject_ClearWeakRefs`) if the field is non-"
"``NULL``::"
msgstr ""

#: ../../extending/newtypes.rst:611
msgid "More Suggestions"
msgstr "Fler förslag"

#: ../../extending/newtypes.rst:613
msgid ""
"In order to learn how to implement any specific method for your new data "
"type, get the :term:`CPython` source code.  Go to the :file:`Objects` "
"directory, then search the C source files for ``tp_`` plus the function you "
"want (for example, ``tp_richcompare``).  You will find examples of the "
"function you want to implement."
msgstr ""
"För att lära dig hur du implementerar en specifik metod för din nya datatyp, "
"hämta :term:`CPython` källkod.  Gå till katalogen :file:`Objects` och sök "
"sedan i C-källfilerna efter ``tp_`` plus den funktion du vill ha (t.ex. "
"``tp_richcompare``).  Där hittar du exempel på den funktion som du vill "
"implementera."

#: ../../extending/newtypes.rst:619
msgid ""
"When you need to verify that an object is a concrete instance of the type "
"you are implementing, use the :c:func:`PyObject_TypeCheck` function.  A "
"sample of its use might be something like the following::"
msgstr ""
"När du behöver verifiera att ett objekt är en konkret instans av den typ du "
"implementerar, använd funktionen :c:func:`PyObject_TypeCheck`.  Ett exempel "
"på dess användning kan vara något i stil med följande::"

#: ../../extending/newtypes.rst:630
msgid "Download CPython source releases."
msgstr "Ladda ner CPython källversioner."

#: ../../extending/newtypes.rst:630
msgid "https://www.python.org/downloads/source/"
msgstr "https://www.python.org/downloads/source/"

#: ../../extending/newtypes.rst:632
msgid ""
"The CPython project on GitHub, where the CPython source code is developed."
msgstr "CPython-projektet på GitHub, där källkoden för CPython utvecklas."

#: ../../extending/newtypes.rst:633
msgid "https://github.com/python/cpython"
msgstr "https://github.com/python/cpython"
