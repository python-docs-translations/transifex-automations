# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../extending/extending.rst:8
msgid "Extending Python with C or C++"
msgstr "Utöka Python med C eller C++"

#: ../../extending/extending.rst:10
msgid ""
"It is quite easy to add new built-in modules to Python, if you know how to "
"program in C.  Such :dfn:`extension modules` can do two things that can't be"
" done directly in Python: they can implement new built-in object types, and "
"they can call C library functions and system calls."
msgstr ""
"Det är ganska enkelt att lägga till nya inbyggda moduler till Python, om du "
"vet hur man programmerar i C. Sådana :dfn:`extension modules` kan göra två "
"saker som inte kan göras direkt i Python: de kan implementera nya inbyggda "
"objekttyper, och de kan anropa C-biblioteksfunktioner och systemanrop."

#: ../../extending/extending.rst:15
msgid ""
"To support extensions, the Python API (Application Programmers Interface) "
"defines a set of functions, macros and variables that provide access to most"
" aspects of the Python run-time system.  The Python API is incorporated in a"
" C source file by including the header ``\"Python.h\"``."
msgstr ""
"För att stödja tillägg definierar Python API (Application Programmers "
"Interface) en uppsättning funktioner, makron och variabler som ger tillgång "
"till de flesta aspekter av Pythons runtime-system.  Python API införlivas i "
"en C-källfil genom att inkludera rubriken ``\"Python.h\"``."

#: ../../extending/extending.rst:20
msgid ""
"The compilation of an extension module depends on its intended use as well "
"as on your system setup; details are given in later chapters."
msgstr ""
"Sammanställningen av en tilläggsmodul beror på hur den ska användas och på "
"hur systemet är uppbyggt; mer information om detta finns i senare kapitel."

#: ../../extending/extending.rst:25
msgid ""
"The C extension interface is specific to CPython, and extension modules do "
"not work on other Python implementations.  In many cases, it is possible to "
"avoid writing C extensions and preserve portability to other "
"implementations. For example, if your use case is calling C library "
"functions or system calls, you should consider using the :mod:`ctypes` "
"module or the `cffi <https://cffi.readthedocs.io/>`_ library rather than "
"writing custom C code. These modules let you write Python code to interface "
"with C code and are more portable between implementations of Python than "
"writing and compiling a C extension module."
msgstr ""
"Gränssnittet för C-tillägg är specifikt för CPython, och tilläggsmoduler "
"fungerar inte på andra Python-implementeringar.  I många fall är det möjligt"
" att undvika att skriva C-tillägg och bevara portabiliteten till andra "
"implementationer. Om ditt användningsområde till exempel är att anropa "
"C-biblioteksfunktioner eller systemanrop, bör du överväga att använda "
":mod:`ctypes`\\-modulen eller biblioteket `cffi "
"<https://cffi.readthedocs.io/>`_ i stället för att skriva egen C-kod. Med "
"dessa moduler kan du skriva Python-kod för gränssnitt med C-kod och de är "
"mer portabla mellan olika implementationer av Python än att skriva och "
"kompilera en C-tilläggsmodul."

#: ../../extending/extending.rst:40
msgid "A Simple Example"
msgstr "Ett enkelt exempel"

#: ../../extending/extending.rst:42
msgid ""
"Let's create an extension module called ``spam`` (the favorite food of Monty"
" Python fans...) and let's say we want to create a Python interface to the C"
" library function :c:func:`system` [#]_. This function takes a null-"
"terminated character string as argument and returns an integer.  We want "
"this function to be callable from Python as follows:"
msgstr ""
"Låt oss skapa en tilläggsmodul som heter ``spam`` (Monty Python-fansens "
"favoritmat...) och låt oss säga att vi vill skapa ett Python-gränssnitt till"
" C-bibliotekets funktion :c:func:`system` [#]_. Denna funktion tar en "
"nollavslutad teckensträng som argument och returnerar ett heltal.  Vi vill "
"att denna funktion ska kunna anropas från Python enligt följande:"

#: ../../extending/extending.rst:53
msgid ""
"Begin by creating a file :file:`spammodule.c`.  (Historically, if a module "
"is called ``spam``, the C file containing its implementation is called "
":file:`spammodule.c`; if the module name is very long, like ``spammify``, "
"the module name can be just :file:`spammify.c`.)"
msgstr ""
"Börja med att skapa en fil :file:`spammodule.c`.  (Historiskt sett, om en "
"modul heter ``spam``, heter C-filen som innehåller dess implementation "
":file:`spammodule.c`; om modulnamnet är mycket långt, som ``spammify``, kan "
"modulnamnet bara vara :file:`spammify.c`)"

#: ../../extending/extending.rst:58
msgid "The first two lines of our file can be::"
msgstr "De två första raderna i vår fil kan vara::"

#: ../../extending/extending.rst:63
msgid ""
"which pulls in the Python API (you can add a comment describing the purpose "
"of the module and a copyright notice if you like)."
msgstr ""
"som hämtar Python API (du kan lägga till en kommentar som beskriver syftet "
"med modulen och ett upphovsrättsmeddelande om du vill)."

#: ../../extending/extending.rst:68
msgid ""
"Since Python may define some pre-processor definitions which affect the "
"standard headers on some systems, you *must* include :file:`Python.h` before"
" any standard headers are included."
msgstr ""
"Eftersom Python kan definiera vissa preprocessordefinitioner som påverkar "
"standardrubrikerna på vissa system, måste du *inkludera* :file:`Python.h` "
"innan några standardrubriker inkluderas."

#: ../../extending/extending.rst:72
msgid ""
"It is recommended to always define ``PY_SSIZE_T_CLEAN`` before including "
"``Python.h``.  See :ref:`parsetuple` for a description of this macro."
msgstr ""

#: ../../extending/extending.rst:75
msgid ""
"All user-visible symbols defined by :file:`Python.h` have a prefix of ``Py``"
" or ``PY``, except those defined in standard header files. For convenience, "
"and since they are used extensively by the Python interpreter, "
"``\"Python.h\"`` includes a few standard header files: ``<stdio.h>``, "
"``<string.h>``, ``<errno.h>``, and ``<stdlib.h>``.  If the latter header "
"file does not exist on your system, it declares the functions "
":c:func:`malloc`, :c:func:`free` and :c:func:`realloc` directly."
msgstr ""
"Alla användarsynliga symboler som definieras av :file:`Python.h` har "
"prefixet ``Py`` eller ``PY``, utom de som definieras i standardhuvudfiler. "
"För enkelhetens skull, och eftersom de används flitigt av Python-tolken, "
"innehåller ``\"Python.h\"`` några standardheaderfiler: ``<stdio.h>``, "
"``<string.h>``, ``<errno.h>`` och ``<stdlib.h>``.  Om den senare huvudfilen "
"inte finns på ditt system, deklarerar den funktionerna :c:func:`malloc`, "
":c:func:`free` och :c:func:`realloc` direkt."

#: ../../extending/extending.rst:83
msgid ""
"The next thing we add to our module file is the C function that will be "
"called when the Python expression ``spam.system(string)`` is evaluated "
"(we'll see shortly how it ends up being called)::"
msgstr ""
"Nästa sak vi lägger till i vår modulfil är den C-funktion som kommer att "
"anropas när Python-uttrycket ``spam.system(string)`` utvärderas (vi ska "
"snart se hur den kommer att anropas)::"

#: ../../extending/extending.rst:99
msgid ""
"There is a straightforward translation from the argument list in Python (for"
" example, the single expression ``\"ls -l\"``) to the arguments passed to "
"the C function.  The C function always has two arguments, conventionally "
"named *self* and *args*."
msgstr ""
"Det finns en enkel översättning från argumentlistan i Python (t.ex. det "
"enkla uttrycket ``\"ls -l\"``) till de argument som skickas till "
"C-funktionen.  C-funktionen har alltid två argument, konventionellt benämnda"
" *self* och *args*."

#: ../../extending/extending.rst:104
msgid ""
"The *self* argument points to the module object for module-level functions; "
"for a method it would point to the object instance."
msgstr ""
"Argumentet *self* pekar på modulobjektet för funktioner på modulnivå; för en"
" metod skulle det peka på objektinstansen."

#: ../../extending/extending.rst:107
msgid ""
"The *args* argument will be a pointer to a Python tuple object containing "
"the arguments.  Each item of the tuple corresponds to an argument in the "
"call's argument list.  The arguments are Python objects --- in order to do "
"anything with them in our C function we have to convert them to C values.  "
"The function :c:func:`PyArg_ParseTuple` in the Python API checks the "
"argument types and converts them to C values.  It uses a template string to "
"determine the required types of the arguments as well as the types of the C "
"variables into which to store the converted values.  More about this later."
msgstr ""
"Argumentet *args* kommer att vara en pekare till ett Python-tuple-objekt som"
" innehåller argumenten.  Varje post i tupeln motsvarar ett argument i "
"anropets argumentlista.  Argumenten är Python-objekt --- för att kunna göra "
"något med dem i vår C-funktion måste vi konvertera dem till C-värden.  "
"Funktionen :c:func:`PyArg_ParseTuple` i Python API kontrollerar "
"argumenttyperna och konverterar dem till C-värden.  Den använder en "
"mallsträng för att bestämma de nödvändiga typerna av argumenten samt typerna"
" av de C-variabler som de konverterade värdena ska lagras i.  Mer om detta "
"senare."

#: ../../extending/extending.rst:116
msgid ""
":c:func:`PyArg_ParseTuple` returns true (nonzero) if all arguments have the "
"right type and its components have been stored in the variables whose "
"addresses are passed.  It returns false (zero) if an invalid argument list "
"was passed.  In the latter case it also raises an appropriate exception so "
"the calling function can return ``NULL`` immediately (as we saw in the "
"example)."
msgstr ""
":c:func:`PyArg_ParseTuple` returnerar true (icke-noll) om alla argument har "
"rätt typ och dess komponenter har lagrats i de variabler vars adresser "
"skickas.  Den returnerar false (noll) om en ogiltig argumentlista har "
"skickats.  I det senare fallet ger den också upphov till ett lämpligt "
"undantag så att den anropande funktionen kan returnera ``NULL`` omedelbart "
"(som vi såg i exemplet)."

#: ../../extending/extending.rst:126
msgid "Intermezzo: Errors and Exceptions"
msgstr "Intermezzo: Fel och undantag"

#: ../../extending/extending.rst:128
msgid ""
"An important convention throughout the Python interpreter is the following: "
"when a function fails, it should set an exception condition and return an "
"error value (usually ``-1`` or a ``NULL`` pointer).  Exception information "
"is stored in three members of the interpreter's thread state.  These are "
"``NULL`` if there is no exception.  Otherwise they are the C equivalents of "
"the members of the Python tuple returned by :meth:`sys.exc_info`.  These are"
" the exception type, exception instance, and a traceback object.  It is "
"important to know about them to understand how errors are passed around."
msgstr ""
"En viktig konvention i hela Python-tolken är följande: när en funktion "
"misslyckas ska den sätta ett undantagstillstånd och returnera ett felvärde "
"(vanligtvis ``\\-1`` eller en ``NULL``\\-pekare). Undantagsinformation "
"lagras i tre medlemmar av tolkens trådstatus. Dessa är ``NULL`` om det inte "
"finns något undantag. I annat fall är de C-motsvarigheterna till medlemmarna"
" i Python-tuplen som returneras av :meth:`sys.exc_info`. Dessa är "
"undantagstyp, undantagsinstans och ett spårningsobjekt. Det är viktigt att "
"känna till dem för att förstå hur fel vidarebefordras."

#: ../../extending/extending.rst:137
msgid ""
"The Python API defines a number of functions to set various types of "
"exceptions."
msgstr ""
"Python API definierar ett antal funktioner för att ställa in olika typer av "
"undantag."

#: ../../extending/extending.rst:139
msgid ""
"The most common one is :c:func:`PyErr_SetString`.  Its arguments are an "
"exception object and a C string.  The exception object is usually a "
"predefined object like :c:data:`PyExc_ZeroDivisionError`.  The C string "
"indicates the cause of the error and is converted to a Python string object "
"and stored as the \"associated value\" of the exception."
msgstr ""
"Den vanligaste är :c:func:`PyErr_SetString`.  Dess argument är ett "
"undantagsobjekt och en C-sträng.  Undantagsobjektet är vanligtvis ett "
"fördefinierat objekt som :c:data:`PyExc_ZeroDivisionError`.  C-strängen "
"anger orsaken till felet och konverteras till ett Python-strängobjekt och "
"lagras som det \"associerade värdet\" för undantaget."

#: ../../extending/extending.rst:145
msgid ""
"Another useful function is :c:func:`PyErr_SetFromErrno`, which only takes an"
" exception argument and constructs the associated value by inspection of the"
" global variable :c:data:`errno`.  The most general function is "
":c:func:`PyErr_SetObject`, which takes two object arguments, the exception "
"and its associated value.  You don't need to :c:func:`Py_INCREF` the objects"
" passed to any of these functions."
msgstr ""
"En annan användbar funktion är :c:func:`PyErr_SetFromErrno`, som bara tar "
"ett undantagsargument och konstruerar det associerade värdet genom "
"inspektion av den globala variabeln :c:data:`errno`.  Den mest allmänna "
"funktionen är :c:func:`PyErr_SetObject`, som tar två objektargument, "
"undantaget och dess associerade värde.  Du behöver inte :c:func:`Py_INCREF` "
"de objekt som skickas till någon av dessa funktioner."

#: ../../extending/extending.rst:152
msgid ""
"You can test non-destructively whether an exception has been set with "
":c:func:`PyErr_Occurred`.  This returns the current exception object, or "
"``NULL`` if no exception has occurred.  You normally don't need to call "
":c:func:`PyErr_Occurred` to see whether an error occurred in a function "
"call, since you should be able to tell from the return value."
msgstr ""
"Du kan testa icke-destruktivt om ett undantag har ställts in med "
":c:func:`PyErr_Occurred`.  Detta returnerar det aktuella undantagsobjektet, "
"eller ``NULL`` om inget undantag har inträffat.  Du behöver normalt inte "
"anropa :c:func:`PyErr_Occurred` för att se om ett fel inträffade i ett "
"funktionsanrop, eftersom du bör kunna se det från returvärdet."

#: ../../extending/extending.rst:158
msgid ""
"When a function *f* that calls another function *g* detects that the latter "
"fails, *f* should itself return an error value (usually ``NULL`` or ``-1``)."
"  It should *not* call one of the ``PyErr_*`` functions --- one has already "
"been called by *g*. *f*'s caller is then supposed to also return an error "
"indication to *its* caller, again *without* calling ``PyErr_*``, and so on "
"--- the most detailed cause of the error was already reported by the "
"function that first detected it.  Once the error reaches the Python "
"interpreter's main loop, this aborts the currently executing Python code and"
" tries to find an exception handler specified by the Python programmer."
msgstr ""
"När en funktion *f* som anropar en annan funktion *g* upptäcker att den "
"senare misslyckas, bör *f* själv returnera ett felvärde (vanligtvis ``NULL``"
" eller ``\\-1``).  Den ska *inte* anropa någon av funktionerna ``PyErr_*`` "
"--- en sådan har redan anropats av *g*. *f*:s anropare ska sedan också "
"returnera en felindikation till *sin* anropare, återigen *utan* att anropa "
"``PyErr_*``, och så vidare --- den mest detaljerade orsaken till felet "
"rapporterades redan av den funktion som först upptäckte det.  När felet når "
"Python-tolkens huvudslinga avbryter denna den Python-kod som för närvarande "
"körs och försöker hitta en undantagshanterare som specificerats av Python-"
"programmeraren."

#: ../../extending/extending.rst:168
msgid ""
"(There are situations where a module can actually give a more detailed error"
" message by calling another ``PyErr_*`` function, and in such cases it is "
"fine to do so.  As a general rule, however, this is not necessary, and can "
"cause information about the cause of the error to be lost: most operations "
"can fail for a variety of reasons.)"
msgstr ""
"(Det finns situationer där en modul faktiskt kan ge ett mer detaljerat "
"felmeddelande genom att anropa en annan ``PyErr_*``\\-funktion, och i sådana"
" fall är det bra att göra det.  Som en allmän regel är detta dock inte "
"nödvändigt och kan leda till att information om orsaken till felet går "
"förlorad: de flesta operationer kan misslyckas av olika skäl)"

#: ../../extending/extending.rst:174
msgid ""
"To ignore an exception set by a function call that failed, the exception "
"condition must be cleared explicitly by calling :c:func:`PyErr_Clear`.  The "
"only time C code should call :c:func:`PyErr_Clear` is if it doesn't want to "
"pass the error on to the interpreter but wants to handle it completely by "
"itself (possibly by trying something else, or pretending nothing went "
"wrong)."
msgstr ""
"Om du vill ignorera ett undantag som skapats av ett funktionsanrop som "
"misslyckades måste undantagsvillkoret rensas explicit genom att anropa "
":c:func:`PyErr_Clear`.  Den enda gången C-kod bör anropa "
":c:func:`PyErr_Clear` är om den inte vill skicka felet vidare till tolken "
"utan vill hantera det helt själv (eventuellt genom att prova något annat "
"eller låtsas att inget gick fel)."

#: ../../extending/extending.rst:180
msgid ""
"Every failing :c:func:`malloc` call must be turned into an exception --- the"
" direct caller of :c:func:`malloc` (or :c:func:`realloc`) must call "
":c:func:`PyErr_NoMemory` and return a failure indicator itself.  All the "
"object-creating functions (for example, :c:func:`PyLong_FromLong`) already "
"do this, so this note is only relevant to those who call :c:func:`malloc` "
"directly."
msgstr ""
"Varje misslyckat anrop av :c:func:`malloc` måste förvandlas till ett "
"undantag --- den som direkt anropar :c:func:`malloc` (eller "
":c:func:`realloc`) måste anropa :c:func:`PyErr_NoMemory` och själv returnera"
" en felindikator.  Alla objektskapande funktioner (t.ex. "
":c:func:`PyLong_FromLong`) gör redan detta, så denna anmärkning är bara "
"relevant för dem som anropar :c:func:`malloc` direkt."

#: ../../extending/extending.rst:186
msgid ""
"Also note that, with the important exception of :c:func:`PyArg_ParseTuple` "
"and friends, functions that return an integer status usually return a "
"positive value or zero for success and ``-1`` for failure, like Unix system "
"calls."
msgstr ""
"Observera också att, med det viktiga undantaget :c:func:`PyArg_ParseTuple` "
"och vänner, funktioner som returnerar en heltalsstatus vanligtvis returnerar"
" ett positivt värde eller noll för framgång och ``\\-1`` för misslyckande, "
"som Unix systemanrop."

#: ../../extending/extending.rst:190
msgid ""
"Finally, be careful to clean up garbage (by making :c:func:`Py_XDECREF` or "
":c:func:`Py_DECREF` calls for objects you have already created) when you "
"return an error indicator!"
msgstr ""
"Slutligen, var noga med att rensa bort skräp (genom att göra "
":c:func:`Py_XDECREF` eller :c:func:`Py_DECREF` anrop för objekt som du redan"
" har skapat) när du returnerar en felindikator!"

#: ../../extending/extending.rst:194
msgid ""
"The choice of which exception to raise is entirely yours.  There are "
"predeclared C objects corresponding to all built-in Python exceptions, such "
"as :c:data:`PyExc_ZeroDivisionError`, which you can use directly. Of course,"
" you should choose exceptions wisely --- don't use :c:data:`PyExc_TypeError`"
" to mean that a file couldn't be opened (that should probably be "
":c:data:`PyExc_IOError`). If something's wrong with the argument list, the "
":c:func:`PyArg_ParseTuple` function usually raises "
":c:data:`PyExc_TypeError`.  If you have an argument whose value must be in a"
" particular range or must satisfy other conditions, "
":c:data:`PyExc_ValueError` is appropriate."
msgstr ""

#: ../../extending/extending.rst:204
msgid ""
"You can also define a new exception that is unique to your module. For this,"
" you usually declare a static object variable at the beginning of your "
"file::"
msgstr ""

#: ../../extending/extending.rst:209
msgid ""
"and initialize it in your module's initialization function "
"(:c:func:`PyInit_spam`) with an exception object::"
msgstr ""

#: ../../extending/extending.rst:233
msgid ""
"Note that the Python name for the exception object is :exc:`spam.error`.  "
"The :c:func:`PyErr_NewException` function may create a class with the base "
"class being :exc:`Exception` (unless another class is passed in instead of "
"``NULL``), described in :ref:`bltin-exceptions`."
msgstr ""

#: ../../extending/extending.rst:238
msgid ""
"Note also that the :c:data:`SpamError` variable retains a reference to the "
"newly created exception class; this is intentional!  Since the exception "
"could be removed from the module by external code, an owned reference to the"
" class is needed to ensure that it will not be discarded, causing "
":c:data:`SpamError` to become a dangling pointer. Should it become a "
"dangling pointer, C code which raises the exception could cause a core dump "
"or other unintended side effects."
msgstr ""

#: ../../extending/extending.rst:245
msgid ""
"We discuss the use of ``PyMODINIT_FUNC`` as a function return type later in "
"this sample."
msgstr ""

#: ../../extending/extending.rst:248
msgid ""
"The :exc:`spam.error` exception can be raised in your extension module using"
" a call to :c:func:`PyErr_SetString` as shown below::"
msgstr ""

#: ../../extending/extending.rst:271
msgid "Back to the Example"
msgstr "Tillbaka till exemplet"

#: ../../extending/extending.rst:273
msgid ""
"Going back to our example function, you should now be able to understand "
"this statement::"
msgstr ""
"Om vi går tillbaka till vår exempelfunktion bör du nu kunna förstå detta "
"uttalande::"

#: ../../extending/extending.rst:279
msgid ""
"It returns ``NULL`` (the error indicator for functions returning object "
"pointers) if an error is detected in the argument list, relying on the "
"exception set by :c:func:`PyArg_ParseTuple`.  Otherwise the string value of "
"the argument has been copied to the local variable :c:data:`command`.  This "
"is a pointer assignment and you are not supposed to modify the string to "
"which it points (so in Standard C, the variable :c:data:`command` should "
"properly be declared as ``const char *command``)."
msgstr ""

#: ../../extending/extending.rst:287
msgid ""
"The next statement is a call to the Unix function :c:func:`system`, passing "
"it the string we just got from :c:func:`PyArg_ParseTuple`::"
msgstr ""
"Nästa sats är ett anrop till Unix-funktionen :c:func:`system` och skickar "
"den strängen som vi just fick från :c:func:`PyArg_ParseTuple`::"

#: ../../extending/extending.rst:292
msgid ""
"Our :func:`spam.system` function must return the value of :c:data:`sts` as a"
" Python object.  This is done using the function :c:func:`PyLong_FromLong`. "
"::"
msgstr ""

#: ../../extending/extending.rst:297
msgid ""
"In this case, it will return an integer object.  (Yes, even integers are "
"objects on the heap in Python!)"
msgstr ""
"I det här fallet kommer det att returnera ett heltalsobjekt.  (Ja, även "
"heltal är objekt på heapen i Python!)"

#: ../../extending/extending.rst:300
msgid ""
"If you have a C function that returns no useful argument (a function "
"returning :c:expr:`void`), the corresponding Python function must return "
"``None``.   You need this idiom to do so (which is implemented by the "
":c:macro:`Py_RETURN_NONE` macro)::"
msgstr ""
"Om du har en C-funktion som inte returnerar något användbart argument (en "
"funktion som returnerar :c:expr:`void`), måste motsvarande Python-funktion "
"returnera ``None``.   Du behöver detta idiom för att göra det (som "
"implementeras av :c:macro:`Py_RETURN_NONE` macro)::"

#: ../../extending/extending.rst:308
msgid ""
":c:data:`Py_None` is the C name for the special Python object ``None``.  It "
"is a genuine Python object rather than a ``NULL`` pointer, which means "
"\"error\" in most contexts, as we have seen."
msgstr ""
":c:data:`Py_None` är C-namnet för det speciella Python-objektet ``None``.  "
"Det är ett äkta Python-objekt snarare än en ``NULL``\\-pekare, som betyder "
"\"fel\" i de flesta sammanhang, som vi har sett."

#: ../../extending/extending.rst:316
msgid "The Module's Method Table and Initialization Function"
msgstr "Modulens metodtabell och initialiseringsfunktion"

#: ../../extending/extending.rst:318
msgid ""
"I promised to show how :c:func:`spam_system` is called from Python programs."
" First, we need to list its name and address in a \"method table\"::"
msgstr ""

#: ../../extending/extending.rst:329
msgid ""
"Note the third entry (``METH_VARARGS``).  This is a flag telling the "
"interpreter the calling convention to be used for the C function.  It should"
" normally always be ``METH_VARARGS`` or ``METH_VARARGS | METH_KEYWORDS``; a "
"value of ``0`` means that an obsolete variant of :c:func:`PyArg_ParseTuple` "
"is used."
msgstr ""
"Lägg märke till den tredje posten (``METH_VARARGS``).  Detta är en flagga "
"som talar om för tolken vilken anropskonvention som ska användas för "
"C-funktionen.  Den bör normalt alltid vara ``METH_VARARGS`` eller "
"``METH_VARARGS | METH_KEYWORDS``; ett värde på ``0`` betyder att en "
"föråldrad variant av :c:func:`PyArg_ParseTuple` används."

#: ../../extending/extending.rst:334
msgid ""
"When using only ``METH_VARARGS``, the function should expect the Python-"
"level parameters to be passed in as a tuple acceptable for parsing via "
":c:func:`PyArg_ParseTuple`; more information on this function is provided "
"below."
msgstr ""
"När endast ``METH_VARARGS`` används bör funktionen förvänta sig att "
"parametrarna på Python-nivå skickas in som en tupel som kan tolkas via "
":c:func:`PyArg_ParseTuple`; mer information om denna funktion finns nedan."

#: ../../extending/extending.rst:338
msgid ""
"The :const:`METH_KEYWORDS` bit may be set in the third field if keyword "
"arguments should be passed to the function.  In this case, the C function "
"should accept a third ``PyObject *`` parameter which will be a dictionary of"
" keywords. Use :c:func:`PyArg_ParseTupleAndKeywords` to parse the arguments "
"to such a function."
msgstr ""

#: ../../extending/extending.rst:344
msgid ""
"The method table must be referenced in the module definition structure::"
msgstr "Metodtabellen måste refereras till i modulens definitionsstruktur::"

#: ../../extending/extending.rst:355
msgid ""
"This structure, in turn, must be passed to the interpreter in the module's "
"initialization function.  The initialization function must be named "
":c:func:`PyInit_name`, where *name* is the name of the module, and should be"
" the only non-\\ ``static`` item defined in the module file::"
msgstr ""

#: ../../extending/extending.rst:366
msgid ""
"Note that PyMODINIT_FUNC declares the function as ``PyObject *`` return "
"type, declares any special linkage declarations required by the platform, "
"and for C++ declares the function as ``extern \"C\"``."
msgstr ""

#: ../../extending/extending.rst:370
msgid ""
"When the Python program imports module :mod:`spam` for the first time, "
":c:func:`PyInit_spam` is called. (See below for comments about embedding "
"Python.) It calls :c:func:`PyModule_Create`, which returns a module object, "
"and inserts built-in function objects into the newly created module based "
"upon the table (an array of :c:type:`PyMethodDef` structures) found in the "
"module definition. :c:func:`PyModule_Create` returns a pointer to the module"
" object that it creates.  It may abort with a fatal error for certain "
"errors, or return ``NULL`` if the module could not be initialized "
"satisfactorily. The init function must return the module object to its "
"caller, so that it then gets inserted into ``sys.modules``."
msgstr ""

#: ../../extending/extending.rst:381
msgid ""
"When embedding Python, the :c:func:`PyInit_spam` function is not called "
"automatically unless there's an entry in the :c:data:`PyImport_Inittab` "
"table. To add the module to the initialization table, use "
":c:func:`PyImport_AppendInittab`, optionally followed by an import of the "
"module::"
msgstr ""

#: ../../extending/extending.rst:425
msgid ""
"Removing entries from ``sys.modules`` or importing compiled modules into "
"multiple interpreters within a process (or following a :c:func:`fork` "
"without an intervening :c:func:`exec`) can create problems for some "
"extension modules. Extension module authors should exercise caution when "
"initializing internal data structures."
msgstr ""

#: ../../extending/extending.rst:431
msgid ""
"A more substantial example module is included in the Python source "
"distribution as :file:`Modules/xxmodule.c`.  This file may be used as a  "
"template or simply read as an example."
msgstr ""

#: ../../extending/extending.rst:437
msgid ""
"Unlike our ``spam`` example, ``xxmodule`` uses *multi-phase initialization* "
"(new in Python 3.5), where a PyModuleDef structure is returned from "
"``PyInit_spam``, and creation of the module is left to the import machinery."
" For details on multi-phase initialization, see :PEP:`489`."
msgstr ""

#: ../../extending/extending.rst:446
msgid "Compilation and Linkage"
msgstr "Sammanställning och länkning"

#: ../../extending/extending.rst:448
msgid ""
"There are two more things to do before you can use your new extension: "
"compiling and linking it with the Python system.  If you use dynamic "
"loading, the details may depend on the style of dynamic loading your system "
"uses; see the chapters about building extension modules (chapter "
":ref:`building`) and additional information that pertains only to building "
"on Windows (chapter :ref:`building-on-windows`) for more information about "
"this."
msgstr ""
"Det finns ytterligare två saker att göra innan du kan använda ditt nya "
"tillägg: att kompilera och länka det med Python-systemet.  Om du använder "
"dynamisk laddning kan detaljerna bero på vilken typ av dynamisk laddning "
"ditt system använder; se kapitlen om att bygga tilläggsmoduler (kapitel "
":ref:`building`) och ytterligare information som endast gäller för att bygga"
" på Windows (kapitel :ref:`building-on-windows`) för mer information om "
"detta."

#: ../../extending/extending.rst:455
msgid ""
"If you can't use dynamic loading, or if you want to make your module a "
"permanent part of the Python interpreter, you will have to change the "
"configuration setup and rebuild the interpreter.  Luckily, this is very "
"simple on Unix: just place your file (:file:`spammodule.c` for example) in "
"the :file:`Modules/` directory of an unpacked source distribution, add a "
"line to the file :file:`Modules/Setup.local` describing your file:"
msgstr ""
"Om du inte kan använda dynamisk laddning, eller om du vill göra din modul "
"till en permanent del av Python-tolken, måste du ändra "
"konfigurationsinställningarna och bygga om tolken.  Lyckligtvis är detta "
"mycket enkelt på Unix: placera bara din fil (:file:`spammodule.c` till "
"exempel) i katalogen :file:`Modules/` i en uppackad källkodsdistribution, "
"lägg till en rad i filen :file:`Modules/Setup.local` som beskriver din fil:"

#: ../../extending/extending.rst:466
msgid ""
"and rebuild the interpreter by running :program:`make` in the toplevel "
"directory.  You can also run :program:`make` in the :file:`Modules/` "
"subdirectory, but then you must first rebuild :file:`Makefile` there by "
"running ':program:`make` Makefile'.  (This is necessary each time you change"
" the :file:`Setup` file.)"
msgstr ""
"och bygga om tolken genom att köra :program:`make` i toplevel-katalogen.  Du"
" kan också köra :program:`make` i underkatalogen :file:`Modules/`, men då "
"måste du först bygga om :file:`Makefile` där genom att köra ':program:`make`"
" Makefile'.  (Detta är nödvändigt varje gång du ändrar filen :file:`Setup`)"

#: ../../extending/extending.rst:472
msgid ""
"If your module requires additional libraries to link with, these can be "
"listed on the line in the configuration file as well, for instance:"
msgstr ""
"Om din modul kräver ytterligare bibliotek att länka med kan dessa också "
"anges på raden i konfigurationsfilen, till exempel:"

#: ../../extending/extending.rst:483
msgid "Calling Python Functions from C"
msgstr "Anropa Python-funktioner från C"

#: ../../extending/extending.rst:485
msgid ""
"So far we have concentrated on making C functions callable from Python.  The"
" reverse is also useful: calling Python functions from C. This is especially"
" the case for libraries that support so-called \"callback\" functions.  If a"
" C interface makes use of callbacks, the equivalent Python often needs to "
"provide a callback mechanism to the Python programmer; the implementation "
"will require calling the Python callback functions from a C callback.  Other"
" uses are also imaginable."
msgstr ""
"Hittills har vi koncentrerat oss på att göra C-funktioner anropsbara från "
"Python.  Det omvända är också användbart: att anropa Python-funktioner från "
"C. Detta är särskilt fallet för bibliotek som stöder så kallade "
"\"callback\"-funktioner.  Om ett C-gränssnitt använder sig av callbacks "
"behöver motsvarande Python ofta tillhandahålla en callback-mekanism till "
"Python-programmeraren; implementeringen kräver att Pythons callback-"
"funktioner anropas från en C-callback.  Andra användningsområden är också "
"tänkbara."

#: ../../extending/extending.rst:493
msgid ""
"Fortunately, the Python interpreter is easily called recursively, and there "
"is a standard interface to call a Python function.  (I won't dwell on how to"
" call the Python parser with a particular string as input --- if you're "
"interested, have a look at the implementation of the :option:`-c` command "
"line option in :file:`Modules/main.c` from the Python source code.)"
msgstr ""
"Lyckligtvis är det lätt att anropa Python-tolken rekursivt och det finns ett"
" standardgränssnitt för att anropa en Python-funktion.  (Jag ska inte "
"uppehålla mig vid hur man anropar Python-parsern med en viss sträng som "
"indata --- om du är intresserad kan du titta på implementeringen av "
"kommandoradsalternativet :option:`\\-c` i :file:`Modules/main.c` från "
"Pythons källkod)"

#: ../../extending/extending.rst:499
msgid ""
"Calling a Python function is easy.  First, the Python program must somehow "
"pass you the Python function object.  You should provide a function (or some"
" other interface) to do this.  When this function is called, save a pointer "
"to the Python function object (be careful to :c:func:`Py_INCREF` it!) in a "
"global variable --- or wherever you see fit. For example, the following "
"function might be part of a module definition::"
msgstr ""
"Att anropa en Python-funktion är enkelt.  Först måste Python-programmet på "
"något sätt skicka Python-funktionsobjektet till dig.  Du bör tillhandahålla "
"en funktion (eller något annat gränssnitt) för att göra detta.  När denna "
"funktion anropas sparar du en pekare till Python-funktionsobjektet (var noga"
" med att :c:func:`Py_INCREF` det!) i en global variabel --- eller var du "
"vill. Till exempel kan följande funktion vara en del av en moduldefinition::"

#: ../../extending/extending.rst:529
msgid ""
"This function must be registered with the interpreter using the "
":const:`METH_VARARGS` flag; this is described in section :ref:`methodtable`."
"  The :c:func:`PyArg_ParseTuple` function and its arguments are documented "
"in section :ref:`parsetuple`."
msgstr ""

#: ../../extending/extending.rst:534
msgid ""
"The macros :c:func:`Py_XINCREF` and :c:func:`Py_XDECREF` increment/decrement"
" the reference count of an object and are safe in the presence of ``NULL`` "
"pointers (but note that *temp* will not be  ``NULL`` in this context).  More"
" info on them in section :ref:`refcounts`."
msgstr ""
"Makrot :c:func:`Py_XINCREF` och :c:func:`Py_XDECREF` ökar/de minskar "
"referensantalet för ett objekt och är säkra i närvaro av ``NULL``\\ -pekare "
"(men observera att *temp* inte kommer att vara ``NULL`` i detta sammanhang)."
"  Mer information om dem finns i avsnittet :ref:`refcounts`."

#: ../../extending/extending.rst:541
msgid ""
"Later, when it is time to call the function, you call the C function "
":c:func:`PyObject_CallObject`.  This function has two arguments, both "
"pointers to arbitrary Python objects: the Python function, and the argument "
"list.  The argument list must always be a tuple object, whose length is the "
"number of arguments.  To call the Python function with no arguments, pass in"
" ``NULL``, or an empty tuple; to call it with one argument, pass a singleton"
" tuple. :c:func:`Py_BuildValue` returns a tuple when its format string "
"consists of zero or more format codes between parentheses.  For example::"
msgstr ""
"Senare, när det är dags att anropa funktionen, anropar du C-funktionen "
":c:func:`PyObject_CallObject`.  Denna funktion har två argument, båda pekare"
" till godtyckliga Python-objekt: Python-funktionen och argumentlistan.  "
"Argumentlistan måste alltid vara ett tuple-objekt, vars längd är antalet "
"argument.  För att anropa Python-funktionen utan argument, skicka in "
"``NULL``, eller en tom tupel; för att anropa den med ett argument, skicka en"
" singleton-tupel. :c:func:`Py_BuildValue` returnerar en tupel när dess "
"formatsträng består av noll eller flera formatkoder mellan parenteser.  Till"
" exempel::"

#: ../../extending/extending.rst:561
msgid ""
":c:func:`PyObject_CallObject` returns a Python object pointer: this is the "
"return value of the Python function.  :c:func:`PyObject_CallObject` is "
"\"reference-count-neutral\" with respect to its arguments.  In the example a"
" new tuple was created to serve as the argument list, which is "
":c:func:`Py_DECREF`\\ -ed immediately after the "
":c:func:`PyObject_CallObject` call."
msgstr ""
":c:func:`PyObject_CallObject` returnerar en Python-objektpekare: detta är "
"Python-funktionens returvärde. :c:func:`PyObject_CallObject` är "
"\"referensräkningsneutral\" med avseende på sina argument.  I exemplet "
"skapades en ny tupel för att fungera som argumentlista, som "
":c:func:`Py_DECREF` -ed omedelbart efter anropet av "
":c:func:`PyObject_CallObject`."

#: ../../extending/extending.rst:568
msgid ""
"The return value of :c:func:`PyObject_CallObject` is \"new\": either it is a"
" brand new object, or it is an existing object whose reference count has "
"been incremented.  So, unless you want to save it in a global variable, you "
"should somehow :c:func:`Py_DECREF` the result, even (especially!) if you are"
" not interested in its value."
msgstr ""
"Returvärdet för :c:func:`PyObject_CallObject` är \"nytt\": antingen är det "
"ett helt nytt objekt, eller så är det ett befintligt objekt vars "
"referensantal har ökats.  Så om du inte vill spara det i en global variabel "
"bör du på något sätt :c:func:`Py_DECREF` resultatet, även (särskilt!) om du "
"inte är intresserad av dess värde."

#: ../../extending/extending.rst:574
msgid ""
"Before you do this, however, it is important to check that the return value "
"isn't ``NULL``.  If it is, the Python function terminated by raising an "
"exception. If the C code that called :c:func:`PyObject_CallObject` is called"
" from Python, it should now return an error indication to its Python caller,"
" so the interpreter can print a stack trace, or the calling Python code can "
"handle the exception. If this is not possible or desirable, the exception "
"should be cleared by calling :c:func:`PyErr_Clear`.  For example::"
msgstr ""
"Innan du gör detta är det dock viktigt att kontrollera att returvärdet inte "
"är ``NULL``.  Om det är det, avslutas Python-funktionen med ett undantag. Om"
" C-koden som anropade :c:func:`PyObject_CallObject` anropas från Python, bör"
" den nu returnera en felindikation till sin Python-anropare, så att tolken "
"kan skriva ut en stack trace, eller så att den anropande Python-koden kan "
"hantera undantaget. Om detta inte är möjligt eller önskvärt, bör undantaget "
"rensas genom att anropa :c:func:`PyErr_Clear`.  Till exempel::"

#: ../../extending/extending.rst:587
msgid ""
"Depending on the desired interface to the Python callback function, you may "
"also have to provide an argument list to :c:func:`PyObject_CallObject`.  In "
"some cases the argument list is also provided by the Python program, through"
" the same interface that specified the callback function.  It can then be "
"saved and used in the same manner as the function object.  In other cases, "
"you may have to construct a new tuple to pass as the argument list.  The "
"simplest way to do this is to call :c:func:`Py_BuildValue`.  For example, if"
" you want to pass an integral event code, you might use the following code::"
msgstr ""
"Beroende på det önskade gränssnittet till Pythons återuppringningsfunktion "
"kan du också behöva tillhandahålla en argumentlista till "
":c:func:`PyObject_CallObject`.  I vissa fall tillhandahålls argumentlistan "
"också av Python-programmet, genom samma gränssnitt som specificerade "
"callback-funktionen.  Den kan då sparas och användas på samma sätt som "
"funktionsobjektet.  I andra fall kan du behöva konstruera en ny tupel att "
"skicka som argumentlista.  Det enklaste sättet att göra detta är att anropa "
":c:func:`Py_BuildValue`.  Om du t.ex. vill skicka en integrerad händelsekod "
"kan du använda följande kod::"

#: ../../extending/extending.rst:606
msgid ""
"Note the placement of ``Py_DECREF(arglist)`` immediately after the call, "
"before the error check!  Also note that strictly speaking this code is not "
"complete: :c:func:`Py_BuildValue` may run out of memory, and this should be "
"checked."
msgstr ""
"Notera placeringen av ``Py_DECREF(arglist)`` omedelbart efter anropet, före "
"felkontrollen!  Observera också att denna kod inte är komplett i strikt "
"mening: :c:func:`Py_BuildValue` kan få slut på minne, och detta bör "
"kontrolleras."

#: ../../extending/extending.rst:610
msgid ""
"You may also call a function with keyword arguments by using "
":c:func:`PyObject_Call`, which supports arguments and keyword arguments.  As"
" in the above example, we use :c:func:`Py_BuildValue` to construct the "
"dictionary. ::"
msgstr ""
"Du kan också anropa en funktion med nyckelordsargument genom att använda "
":c:func:`PyObject_Call`, som stöder argument och nyckelordsargument.  Som i "
"exemplet ovan använder vi :c:func:`Py_BuildValue` för att konstruera "
"ordlistan. ::"

#: ../../extending/extending.rst:628
msgid "Extracting Parameters in Extension Functions"
msgstr "Extrahera parametrar i tilläggsfunktioner"

#: ../../extending/extending.rst:632
msgid "The :c:func:`PyArg_ParseTuple` function is declared as follows::"
msgstr "Funktionen :c:func:`PyArg_ParseTuple` deklareras enligt följande::"

#: ../../extending/extending.rst:636
msgid ""
"The *arg* argument must be a tuple object containing an argument list passed"
" from Python to a C function.  The *format* argument must be a format "
"string, whose syntax is explained in :ref:`arg-parsing` in the Python/C API "
"Reference Manual.  The remaining arguments must be addresses of variables "
"whose type is determined by the format string."
msgstr ""
"Argumentet *arg* måste vara ett tuple-objekt som innehåller en argumentlista"
" som skickas från Python till en C-funktion.  Argumentet *format* måste vara"
" en formatsträng, vars syntax förklaras i :ref:`arg-parsing` i Python/C API "
"Reference Manual.  De återstående argumenten måste vara adresser till "
"variabler vars typ bestäms av formatsträngen."

#: ../../extending/extending.rst:642
msgid ""
"Note that while :c:func:`PyArg_ParseTuple` checks that the Python arguments "
"have the required types, it cannot check the validity of the addresses of C "
"variables passed to the call: if you make mistakes there, your code will "
"probably crash or at least overwrite random bits in memory.  So be careful!"
msgstr ""
"Observera att medan :c:func:`PyArg_ParseTuple` kontrollerar att Python-"
"argumenten har de nödvändiga typerna, kan den inte kontrollera giltigheten "
"av adresserna för C-variabler som skickas till anropet: om du gör misstag "
"där kommer din kod förmodligen att krascha eller åtminstone skriva över "
"slumpmässiga bitar i minnet.  Så var försiktig!"

#: ../../extending/extending.rst:647
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not decrement their reference count!"
msgstr ""
"Observera att alla Python-objektreferenser som tillhandahålls till den som "
"anropar är *lånade* referenser; minska inte deras referensantal!"

#: ../../extending/extending.rst:650
msgid "Some example calls::"
msgstr "Några exempel på samtal::"

#: ../../extending/extending.rst:720
msgid "Keyword Parameters for Extension Functions"
msgstr "Nyckelordsparametrar för tilläggsfunktioner"

#: ../../extending/extending.rst:724
msgid ""
"The :c:func:`PyArg_ParseTupleAndKeywords` function is declared as follows::"
msgstr ""
"Funktionen :c:func:`PyArg_ParseTupleAndKeywords` deklareras enligt "
"följande::"

#: ../../extending/extending.rst:729
msgid ""
"The *arg* and *format* parameters are identical to those of the "
":c:func:`PyArg_ParseTuple` function.  The *kwdict* parameter is the "
"dictionary of keywords received as the third parameter from the Python "
"runtime.  The *kwlist* parameter is a ``NULL``-terminated list of strings "
"which identify the parameters; the names are matched with the type "
"information from *format* from left to right.  On success, "
":c:func:`PyArg_ParseTupleAndKeywords` returns true, otherwise it returns "
"false and raises an appropriate exception."
msgstr ""
"Parametrarna *arg* och *format* är identiska med dem i funktionen "
":c:func:`PyArg_ParseTuple`.  Parametern *kwdict* är den ordbok med nyckelord"
" som tas emot som tredje parameter från Pythons runtime.  Parametern "
"*kwlist* är en ``NULL``\\-avslutad lista med strängar som identifierar "
"parametrarna; namnen matchas med typinformationen från *format* från vänster"
" till höger.  Vid framgång returnerar :c:func:`PyArg_ParseTupleAndKeywords` "
"true, annars returnerar den false och ger upphov till ett lämpligt undantag."

#: ../../extending/extending.rst:739
msgid ""
"Nested tuples cannot be parsed when using keyword arguments!  Keyword "
"parameters passed in which are not present in the *kwlist* will cause "
":exc:`TypeError` to be raised."
msgstr ""
"Nästlade tupler kan inte analyseras när nyckelordsargument används!  "
"Nyckelordsparametrar som skickas in och som inte finns i *kwlist* kommer att"
" orsaka :exc:`TypeError`."

#: ../../extending/extending.rst:745
msgid ""
"Here is an example module which uses keywords, based on an example by Geoff "
"Philbrick (philbrick@hks.com)::"
msgstr ""
"Här är ett exempel på en modul som använder nyckelord, baserat på ett "
"exempel av Geoff Philbrick (philbrick@hks.com)::"

#: ../../extending/extending.rst:800
msgid "Building Arbitrary Values"
msgstr "Att bygga godtyckliga värden"

#: ../../extending/extending.rst:802
msgid ""
"This function is the counterpart to :c:func:`PyArg_ParseTuple`.  It is "
"declared as follows::"
msgstr ""
"Denna funktion är motsvarigheten till :c:func:`PyArg_ParseTuple`.  Den "
"deklareras på följande sätt::"

#: ../../extending/extending.rst:807
msgid ""
"It recognizes a set of format units similar to the ones recognized by "
":c:func:`PyArg_ParseTuple`, but the arguments (which are input to the "
"function, not output) must not be pointers, just values.  It returns a new "
"Python object, suitable for returning from a C function called from Python."
msgstr ""
"Den känner igen en uppsättning formatenheter som liknar dem som känns igen "
"av :c:func:`PyArg_ParseTuple`, men argumenten (som är indata till "
"funktionen, inte utdata) får inte vara pekare, bara värden.  Den returnerar "
"ett nytt Python-objekt, lämpligt för att returnera från en C-funktion som "
"anropas från Python."

#: ../../extending/extending.rst:812
msgid ""
"One difference with :c:func:`PyArg_ParseTuple`: while the latter requires "
"its first argument to be a tuple (since Python argument lists are always "
"represented as tuples internally), :c:func:`Py_BuildValue` does not always "
"build a tuple.  It builds a tuple only if its format string contains two or "
"more format units. If the format string is empty, it returns ``None``; if it"
" contains exactly one format unit, it returns whatever object is described "
"by that format unit.  To force it to return a tuple of size 0 or one, "
"parenthesize the format string."
msgstr ""
"En skillnad med :c:func:`PyArg_ParseTuple`: medan den senare kräver att dess"
" första argument är en tupel (eftersom Python-argumentlistor alltid "
"representeras som tuplar internt), bygger :c:func:`Py_BuildValue` inte "
"alltid en tupel.  Den bygger en tupel endast om dess formatsträng innehåller"
" två eller fler formatenheter. Om formatsträngen är tom returnerar den "
"``None``; om den innehåller exakt en formatenhet returnerar den det objekt "
"som beskrivs av den formatenheten.  Om du vill tvinga den att returnera en "
"tupel av storlek 0 eller ett, sätter du formatsträngen i parentes."

#: ../../extending/extending.rst:820
msgid ""
"Examples (to the left the call, to the right the resulting Python value):"
msgstr ""
"Exempel (till vänster anropet, till höger det resulterande Python-värdet):"

#: ../../extending/extending.rst:846
msgid "Reference Counts"
msgstr "Referensräkningar"

#: ../../extending/extending.rst:848
msgid ""
"In languages like C or C++, the programmer is responsible for dynamic "
"allocation and deallocation of memory on the heap.  In C, this is done using"
" the functions :c:func:`malloc` and :c:func:`free`.  In C++, the operators "
"``new`` and ``delete`` are used with essentially the same meaning and we'll "
"restrict the following discussion to the C case."
msgstr ""
"I språk som C eller C++ är programmeraren ansvarig för dynamisk allokering "
"och avallokering av minne på heapen.  I C görs detta med hjälp av "
"funktionerna :c:func:`malloc` och :c:func:`free`.  I C++ används "
"operatorerna ``new`` och ``delete`` med i stort sett samma innebörd och vi "
"kommer att begränsa följande diskussion till C-fallet."

#: ../../extending/extending.rst:854
msgid ""
"Every block of memory allocated with :c:func:`malloc` should eventually be "
"returned to the pool of available memory by exactly one call to "
":c:func:`free`. It is important to call :c:func:`free` at the right time.  "
"If a block's address is forgotten but :c:func:`free` is not called for it, "
"the memory it occupies cannot be reused until the program terminates.  This "
"is called a :dfn:`memory leak`.  On the other hand, if a program calls "
":c:func:`free` for a block and then continues to use the block, it creates a"
" conflict with re-use of the block through another :c:func:`malloc` call.  "
"This is called :dfn:`using freed memory`. It has the same bad consequences "
"as referencing uninitialized data --- core dumps, wrong results, mysterious "
"crashes."
msgstr ""

#: ../../extending/extending.rst:865
msgid ""
"Common causes of memory leaks are unusual paths through the code.  For "
"instance, a function may allocate a block of memory, do some calculation, "
"and then free the block again.  Now a change in the requirements for the "
"function may add a test to the calculation that detects an error condition "
"and can return prematurely from the function.  It's easy to forget to free "
"the allocated memory block when taking this premature exit, especially when "
"it is added later to the code.  Such leaks, once introduced, often go "
"undetected for a long time: the error exit is taken only in a small fraction"
" of all calls, and most modern machines have plenty of virtual memory, so "
"the leak only becomes apparent in a long-running process that uses the "
"leaking function frequently.  Therefore, it's important to prevent leaks "
"from happening by having a coding convention or strategy that minimizes this"
" kind of errors."
msgstr ""
"Vanliga orsaker till minnesläckage är ovanliga vägar genom koden.  En "
"funktion kan t.ex. allokera ett minnesblock, göra en beräkning och sedan "
"frigöra blocket igen.  Nu kan en ändring i kraven för funktionen lägga till "
"ett test i beräkningen som upptäcker ett feltillstånd och kan återvända i "
"förtid från funktionen.  Det är lätt att glömma att frigöra det allokerade "
"minnesblocket när man gör denna för tidiga exit, särskilt när det läggs till"
" senare i koden.  När sådana läckor väl har uppstått går de ofta oupptäckta "
"under lång tid: felreturen sker bara i en liten del av alla anrop, och de "
"flesta moderna maskiner har gott om virtuellt minne, så läckan blir bara "
"uppenbar i en långvarig process som använder den läckande funktionen ofta.  "
"Därför är det viktigt att förhindra att läckor uppstår genom att ha en "
"kodningskonvention eller strategi som minimerar den här typen av fel."

#: ../../extending/extending.rst:878
msgid ""
"Since Python makes heavy use of :c:func:`malloc` and :c:func:`free`, it "
"needs a strategy to avoid memory leaks as well as the use of freed memory.  "
"The chosen method is called :dfn:`reference counting`.  The principle is "
"simple: every object contains a counter, which is incremented when a "
"reference to the object is stored somewhere, and which is decremented when a"
" reference to it is deleted. When the counter reaches zero, the last "
"reference to the object has been deleted and the object is freed."
msgstr ""
"Eftersom Python använder sig mycket av :c:func:`malloc` och :c:func:`free`, "
"behöver det en strategi för att undvika minnesläckor och användning av "
"frigjort minne.  Den valda metoden kallas :dfn:`referensräkning`.  Principen"
" är enkel: varje objekt innehåller en räknare, som ökas när en referens till"
" objektet lagras någonstans, och som minskas när en referens till det tas "
"bort. När räknaren når noll har den sista referensen till objektet raderats "
"och objektet är frigjort."

#: ../../extending/extending.rst:886
msgid ""
"An alternative strategy is called :dfn:`automatic garbage collection`. "
"(Sometimes, reference counting is also referred to as a garbage collection "
"strategy, hence my use of \"automatic\" to distinguish the two.)  The big "
"advantage of automatic garbage collection is that the user doesn't need to "
"call :c:func:`free` explicitly.  (Another claimed advantage is an "
"improvement in speed or memory usage --- this is no hard fact however.)  The"
" disadvantage is that for C, there is no truly portable automatic garbage "
"collector, while reference counting can be implemented portably (as long as "
"the functions :c:func:`malloc` and :c:func:`free` are available --- which "
"the C Standard guarantees). Maybe some day a sufficiently portable automatic"
" garbage collector will be available for C. Until then, we'll have to live "
"with reference counts."
msgstr ""
"En alternativ strategi kallas :dfn:`automatic garbage collection`. (Ibland "
"kallas referensräkning också för en skräpinsamlingsstrategi, därav min "
"användning av \"automatisk\" för att skilja de två åt)  Den stora fördelen "
"med automatisk garbage collection är att användaren inte behöver anropa "
":c:func:`free` explicit.  (En annan påstådd fördel är en förbättring av "
"hastighet eller minnesanvändning --- detta är dock inget hårt faktum.)  "
"Nackdelen är att det för C inte finns någon verkligt portabel automatisk "
"garbage collector, medan referensräkning kan implementeras portabelt (så "
"länge funktionerna :c:func:`malloc` och :c:func:`free` är tillgängliga --- "
"vilket C-standarden garanterar). Kanske kommer en dag en tillräckligt "
"portabel automatisk skräpsamlare att finnas tillgänglig för C. Till dess får"
" vi leva med referensräkning."

#: ../../extending/extending.rst:898
msgid ""
"While Python uses the traditional reference counting implementation, it also"
" offers a cycle detector that works to detect reference cycles.  This allows"
" applications to not worry about creating direct or indirect circular "
"references; these are the weakness of garbage collection implemented using "
"only reference counting.  Reference cycles consist of objects which contain "
"(possibly indirect) references to themselves, so that each object in the "
"cycle has a reference count which is non-zero.  Typical reference counting "
"implementations are not able to reclaim the memory belonging to any objects "
"in a reference cycle, or referenced from the objects in the cycle, even "
"though there are no further references to the cycle itself."
msgstr ""
"Python använder den traditionella referensräkningsimplementeringen, men "
"erbjuder också en cykeldetektor som upptäcker referenscykler.  Detta gör att"
" applikationer inte behöver oroa sig för att skapa direkta eller indirekta "
"cirkulära referenser; dessa är svagheten hos skräpsamling som implementeras "
"med endast referensräkning.  Referenscykler består av objekt som innehåller "
"(eventuellt indirekta) referenser till sig själva, så att varje objekt i "
"cykeln har ett referensantal som inte är noll.  Typiska implementationer av "
"referensräkning kan inte återta det minne som tillhör något objekt i en "
"referenscykel, eller som refereras från objekten i cykeln, även om det inte "
"finns några ytterligare referenser till själva cykeln."

#: ../../extending/extending.rst:909
msgid ""
"The cycle detector is able to detect garbage cycles and can reclaim them. "
"The :mod:`gc` module exposes a way to run the detector (the "
":func:`~gc.collect` function), as well as configuration interfaces and the "
"ability to disable the detector at runtime."
msgstr ""
"Cykeldetektorn kan upptäcka skräpcykler och kan återta dem. Modulen "
":mod:`gc` exponerar ett sätt att köra detektorn (funktionen "
":func:`~gc.collect`), samt konfigurationsgränssnitt och möjligheten att "
"inaktivera detektorn vid körning."

#: ../../extending/extending.rst:918
msgid "Reference Counting in Python"
msgstr "Referensräkning i Python"

#: ../../extending/extending.rst:920
msgid ""
"There are two macros, ``Py_INCREF(x)`` and ``Py_DECREF(x)``, which handle "
"the incrementing and decrementing of the reference count. "
":c:func:`Py_DECREF` also frees the object when the count reaches zero. For "
"flexibility, it doesn't call :c:func:`free` directly --- rather, it makes a "
"call through a function pointer in the object's :dfn:`type object`.  For "
"this purpose (and others), every object also contains a pointer to its type "
"object."
msgstr ""
"Det finns två makron, ``Py_INCREF(x)`` och ``Py_DECREF(x)``, som hanterar "
"inkrementering och dekrementering av referensantalet. :c:func:`Py_DECREF` "
"frigör också objektet när antalet når noll. För flexibilitetens skull "
"anropar den inte :c:func:`free` direkt --- utan den gör ett anrop via en "
"funktionspekare i objektets :dfn:`type object`.  För detta ändamål (och "
"andra) innehåller varje objekt också en pekare till sitt typobjekt."

#: ../../extending/extending.rst:927
msgid ""
"The big question now remains: when to use ``Py_INCREF(x)`` and "
"``Py_DECREF(x)``? Let's first introduce some terms.  Nobody \"owns\" an "
"object; however, you can :dfn:`own a reference` to an object.  An object's "
"reference count is now defined as the number of owned references to it.  The"
" owner of a reference is responsible for calling :c:func:`Py_DECREF` when "
"the reference is no longer needed.  Ownership of a reference can be "
"transferred.  There are three ways to dispose of an owned reference: pass it"
" on, store it, or call :c:func:`Py_DECREF`. Forgetting to dispose of an "
"owned reference creates a memory leak."
msgstr ""
"Nu återstår den stora frågan: när ska man använda ``Py_INCREF(x)`` och "
"``Py_DECREF(x)``? Låt oss först introducera några termer.  Ingen \"äger\" "
"ett objekt, men du kan :dfn:`äga en referens` till ett objekt.  Ett objekts "
"referensantal definieras nu som antalet ägda referenser till det.  Ägaren "
"till en referens är ansvarig för att anropa :c:func:`Py_DECREF` när "
"referensen inte längre behövs.  Äganderätten till en referens kan överföras."
"  Det finns tre sätt att göra sig av med en ägd referens: skicka den vidare,"
" lagra den eller anropa :c:func:`Py_DECREF`. Om man glömmer att göra sig av "
"med en ägd referens uppstår en minnesläcka."

#: ../../extending/extending.rst:936
msgid ""
"It is also possible to :dfn:`borrow` [#]_ a reference to an object.  The "
"borrower of a reference should not call :c:func:`Py_DECREF`.  The borrower "
"must not hold on to the object longer than the owner from which it was "
"borrowed. Using a borrowed reference after the owner has disposed of it "
"risks using freed memory and should be avoided completely [#]_."
msgstr ""
"Det är också möjligt att :dfn:`låna` [#]_ en referens till ett objekt.  "
"Låntagaren av en referens bör inte anropa :c:func:`Py_DECREF`.  Låntagaren "
"får inte behålla objektet längre än ägaren från vilken det lånades. Att "
"använda en lånad referens efter att ägaren har gjort sig av med den riskerar"
" att använda frigjort minne och bör undvikas helt [#]_."

#: ../../extending/extending.rst:942
msgid ""
"The advantage of borrowing over owning a reference is that you don't need to"
" take care of disposing of the reference on all possible paths through the "
"code --- in other words, with a borrowed reference you don't run the risk of"
" leaking when a premature exit is taken.  The disadvantage of borrowing over"
" owning is that there are some subtle situations where in seemingly correct "
"code a borrowed reference can be used after the owner from which it was "
"borrowed has in fact disposed of it."
msgstr ""
"Fördelen med att låna en referens jämfört med att äga den är att du inte "
"behöver ta hand om referensen på alla möjliga vägar genom koden --- med "
"andra ord, med en lånad referens löper du inte risken att läcka när en för "
"tidig exit tas.  Nackdelen med att låna i stället för att äga är att det "
"finns vissa subtila situationer där en lånad referens i till synes korrekt "
"kod kan användas efter att ägaren som den lånades från i själva verket har "
"gjort sig av med den."

#: ../../extending/extending.rst:950
msgid ""
"A borrowed reference can be changed into an owned reference by calling "
":c:func:`Py_INCREF`.  This does not affect the status of the owner from "
"which the reference was borrowed --- it creates a new owned reference, and "
"gives full owner responsibilities (the new owner must dispose of the "
"reference properly, as well as the previous owner)."
msgstr ""
"En lånad referens kan ändras till en ägd referens genom att anropa "
":c:func:`Py_INCREF`.  Detta påverkar inte statusen för den ägare från vilken"
" referensen lånades --- det skapar en ny ägd referens och ger ägaren fullt "
"ansvar (den nya ägaren måste göra sig av med referensen på rätt sätt, liksom"
" den tidigare ägaren)."

#: ../../extending/extending.rst:960
msgid "Ownership Rules"
msgstr "Regler för ägande"

#: ../../extending/extending.rst:962
msgid ""
"Whenever an object reference is passed into or out of a function, it is part"
" of the function's interface specification whether ownership is transferred "
"with the reference or not."
msgstr ""
"När en objektreferens skickas in i eller ut ur en funktion är det en del av "
"funktionens gränssnittsspecifikation om äganderätten överförs med referensen"
" eller inte."

#: ../../extending/extending.rst:966
msgid ""
"Most functions that return a reference to an object pass on ownership with "
"the reference.  In particular, all functions whose function it is to create "
"a new object, such as :c:func:`PyLong_FromLong` and :c:func:`Py_BuildValue`,"
" pass ownership to the receiver.  Even if the object is not actually new, "
"you still receive ownership of a new reference to that object.  For "
"instance, :c:func:`PyLong_FromLong` maintains a cache of popular values and "
"can return a reference to a cached item."
msgstr ""
"De flesta funktioner som returnerar en referens till ett objekt skickar "
"äganderätten vidare med referensen.  I synnerhet alla funktioner vars "
"funktion är att skapa ett nytt objekt, till exempel "
":c:func:`PyLong_FromLong` och :c:func:`Py_BuildValue`, överför äganderätten "
"till mottagaren.  Även om objektet egentligen inte är nytt, får du ändå "
"äganderätten till en ny referens till objektet.  Till exempel upprätthåller "
":c:func:`PyLong_FromLong` en cache av populära värden och kan returnera en "
"referens till ett cachat objekt."

#: ../../extending/extending.rst:974
msgid ""
"Many functions that extract objects from other objects also transfer "
"ownership with the reference, for instance :c:func:`PyObject_GetAttrString`."
"  The picture is less clear, here, however, since a few common routines are "
"exceptions: :c:func:`PyTuple_GetItem`, :c:func:`PyList_GetItem`, "
":c:func:`PyDict_GetItem`, and :c:func:`PyDict_GetItemString` all return "
"references that you borrow from the tuple, list or dictionary."
msgstr ""
"Många funktioner som extraherar objekt från andra objekt överför också "
"äganderätten med referensen, till exempel :c:func:`PyObject_GetAttrString`."
"  Här är bilden dock inte lika tydlig eftersom några vanliga rutiner utgör "
"undantag: :c:func:`PyTuple_GetItem`, :c:func:`PyList_GetItem`, "
":c:func:`PyDict_GetItem` och :c:func:`PyDict_GetItemString` returnerar alla "
"referenser som du lånar från tupeln, listan eller ordboken."

#: ../../extending/extending.rst:981
msgid ""
"The function :c:func:`PyImport_AddModule` also returns a borrowed reference,"
" even though it may actually create the object it returns: this is possible "
"because an owned reference to the object is stored in ``sys.modules``."
msgstr ""
"Funktionen :c:func:`PyImport_AddModule` returnerar också en lånad referens, "
"även om den faktiskt kan skapa det objekt den returnerar: detta är möjligt "
"eftersom en ägd referens till objektet lagras i ``sys.modules``."

#: ../../extending/extending.rst:985
msgid ""
"When you pass an object reference into another function, in general, the "
"function borrows the reference from you --- if it needs to store it, it will"
" use :c:func:`Py_INCREF` to become an independent owner.  There are exactly "
"two important exceptions to this rule: :c:func:`PyTuple_SetItem` and "
":c:func:`PyList_SetItem`.  These functions take over ownership of the item "
"passed to them --- even if they fail!  (Note that :c:func:`PyDict_SetItem` "
"and friends don't take over ownership --- they are \"normal.\")"
msgstr ""
"När du skickar en objektreferens till en annan funktion lånar funktionen i "
"allmänhet referensen från dig --- om den behöver lagra den kommer den att "
"använda :c:func:`Py_INCREF` för att bli en oberoende ägare.  Det finns exakt"
" två viktiga undantag från denna regel: :c:func:`PyTuple_SetItem` och "
":c:func:`PyList_SetItem`.  Dessa funktioner tar över ägandet av det objekt "
"som skickas till dem --- även om de misslyckas!  (Observera att "
":c:func:`PyDict_SetItem` och vänner inte tar över ägandet --- de är "
"\"normala.\")"

#: ../../extending/extending.rst:993
msgid ""
"When a C function is called from Python, it borrows references to its "
"arguments from the caller.  The caller owns a reference to the object, so "
"the borrowed reference's lifetime is guaranteed until the function returns."
"  Only when such a borrowed reference must be stored or passed on, it must "
"be turned into an owned reference by calling :c:func:`Py_INCREF`."
msgstr ""
"När en C-funktion anropas från Python lånar den referenser till sina "
"argument från den som anropar.  Den som anropar äger en referens till "
"objektet, så den lånade referensens livstid är garanterad tills funktionen "
"returneras.  Endast när en sådan lånad referens måste lagras eller skickas "
"vidare, måste den omvandlas till en ägd referens genom att anropa "
":c:func:`Py_INCREF`."

#: ../../extending/extending.rst:999
msgid ""
"The object reference returned from a C function that is called from Python "
"must be an owned reference --- ownership is transferred from the function to"
" its caller."
msgstr ""
"Den objektreferens som returneras från en C-funktion som anropas från Python"
" måste vara en ägd referens --- ägandet överförs från funktionen till den "
"som anropar."

#: ../../extending/extending.rst:1007
msgid "Thin Ice"
msgstr "Tunn is"

#: ../../extending/extending.rst:1009
msgid ""
"There are a few situations where seemingly harmless use of a borrowed "
"reference can lead to problems.  These all have to do with implicit "
"invocations of the interpreter, which can cause the owner of a reference to "
"dispose of it."
msgstr ""
"Det finns några situationer där en till synes harmlös användning av en lånad"
" referens kan leda till problem.  Dessa har alla att göra med implicita "
"anrop av tolken, vilket kan leda till att ägaren av en referens gör sig av "
"med den."

#: ../../extending/extending.rst:1013
msgid ""
"The first and most important case to know about is using :c:func:`Py_DECREF`"
" on an unrelated object while borrowing a reference to a list item.  For "
"instance::"
msgstr ""
"Det första och viktigaste fallet att känna till är att använda "
":c:func:`Py_DECREF` på ett orelaterat objekt medan man lånar en referens "
"till ett listobjekt.  Till exempel::"

#: ../../extending/extending.rst:1025
msgid ""
"This function first borrows a reference to ``list[0]``, then replaces "
"``list[1]`` with the value ``0``, and finally prints the borrowed reference."
" Looks harmless, right?  But it's not!"
msgstr ""
"Den här funktionen lånar först en referens till ``list[0]``, ersätter sedan "
"``list[1]`` med värdet ``0`` och skriver slutligen ut den lånade referensen."
" Ser ofarligt ut, eller hur?  Men det är det inte!"

#: ../../extending/extending.rst:1029
msgid ""
"Let's follow the control flow into :c:func:`PyList_SetItem`.  The list owns "
"references to all its items, so when item 1 is replaced, it has to dispose "
"of the original item 1.  Now let's suppose the original item 1 was an "
"instance of a user-defined class, and let's further suppose that the class "
"defined a :meth:`__del__` method.  If this class instance has a reference "
"count of 1, disposing of it will call its :meth:`__del__` method."
msgstr ""

#: ../../extending/extending.rst:1036
msgid ""
"Since it is written in Python, the :meth:`__del__` method can execute "
"arbitrary Python code.  Could it perhaps do something to invalidate the "
"reference to ``item`` in :c:func:`bug`?  You bet!  Assuming that the list "
"passed into :c:func:`bug` is accessible to the :meth:`__del__` method, it "
"could execute a statement to the effect of ``del list[0]``, and assuming "
"this was the last reference to that object, it would free the memory "
"associated with it, thereby invalidating ``item``."
msgstr ""

#: ../../extending/extending.rst:1044
msgid ""
"The solution, once you know the source of the problem, is easy: temporarily "
"increment the reference count.  The correct version of the function reads::"
msgstr ""
"Lösningen, när du väl känner till källan till problemet, är enkel: öka "
"referensantalet tillfälligt.  Den korrekta versionen av funktionen lyder::"

#: ../../extending/extending.rst:1058
msgid ""
"This is a true story.  An older version of Python contained variants of this"
" bug and someone spent a considerable amount of time in a C debugger to "
"figure out why his :meth:`__del__` methods would fail..."
msgstr ""

#: ../../extending/extending.rst:1062
msgid ""
"The second case of problems with a borrowed reference is a variant involving"
" threads.  Normally, multiple threads in the Python interpreter can't get in"
" each other's way, because there is a global lock protecting Python's entire"
" object space.  However, it is possible to temporarily release this lock "
"using the macro :c:macro:`Py_BEGIN_ALLOW_THREADS`, and to re-acquire it "
"using :c:macro:`Py_END_ALLOW_THREADS`.  This is common around blocking I/O "
"calls, to let other threads use the processor while waiting for the I/O to "
"complete. Obviously, the following function has the same problem as the "
"previous one::"
msgstr ""

#: ../../extending/extending.rst:1085
msgid "NULL Pointers"
msgstr "NULL-pekare"

#: ../../extending/extending.rst:1087
msgid ""
"In general, functions that take object references as arguments do not expect"
" you to pass them ``NULL`` pointers, and will dump core (or cause later core"
" dumps) if you do so.  Functions that return object references generally "
"return ``NULL`` only to indicate that an exception occurred.  The reason for"
" not testing for ``NULL`` arguments is that functions often pass the objects"
" they receive on to other function --- if each function were to test for "
"``NULL``, there would be a lot of redundant tests and the code would run "
"more slowly."
msgstr ""
"I allmänhet förväntar sig funktioner som tar objektreferenser som argument "
"inte att du skickar dem ``NULL`` -pekare, och kommer att dumpa kärnan (eller"
" orsaka senare kärndumpar) om du gör det. Funktioner som returnerar "
"objektreferenser returnerar vanligtvis ``NULL`` endast för att indikera att "
"ett undantag har inträffat. Anledningen till att man inte testar för "
"``NULL`` -argument är att funktioner ofta vidarebefordrar de objekt de tar "
"emot till andra funktioner --- om varje funktion skulle testa för ``NULL`` "
"skulle det bli många överflödiga tester och koden skulle köras långsammare."

#: ../../extending/extending.rst:1095
msgid ""
"It is better to test for ``NULL`` only at the \"source:\" when a pointer "
"that may be ``NULL`` is received, for example, from :c:func:`malloc` or from"
" a function that may raise an exception."
msgstr ""
"Det är bättre att testa för ``NULL`` endast vid \"källan:\" när en pekare "
"som kan vara ``NULL`` tas emot, till exempel från :c:func:`malloc` eller "
"från en funktion som kan ge upphov till ett undantag."

#: ../../extending/extending.rst:1099
msgid ""
"The macros :c:func:`Py_INCREF` and :c:func:`Py_DECREF` do not check for "
"``NULL`` pointers --- however, their variants :c:func:`Py_XINCREF` and "
":c:func:`Py_XDECREF` do."
msgstr ""
"Makron :c:func:`Py_INCREF` och :c:func:`Py_DECREF` kontrollerar inte för "
"``NULL`` pekare --- men det gör däremot deras varianter :c:func:`Py_XINCREF`"
" och :c:func:`Py_XDECREF`."

#: ../../extending/extending.rst:1103
msgid ""
"The macros for checking for a particular object type (``Pytype_Check()``) "
"don't check for ``NULL`` pointers --- again, there is much code that calls "
"several of these in a row to test an object against various different "
"expected types, and this would generate redundant tests.  There are no "
"variants with ``NULL`` checking."
msgstr ""
"Makron för att kontrollera en viss objekttyp (``Pytype_Check()``) "
"kontrollerar inte för ``NULL`` pekare --- återigen, det finns mycket kod som"
" anropar flera av dessa i rad för att testa ett objekt mot olika olika "
"förväntade typer, och detta skulle generera överflödiga tester.  Det finns "
"inga varianter med ``NULL`` kontroll."

#: ../../extending/extending.rst:1109
msgid ""
"The C function calling mechanism guarantees that the argument list passed to"
" C functions (``args`` in the examples) is never ``NULL`` --- in fact it "
"guarantees that it is always a tuple [#]_."
msgstr ""
"C-funktionens anropsmekanism garanterar att den argumentlista som skickas "
"till C-funktioner (``args`` i exemplen) aldrig är ``NULL`` --- i själva "
"verket garanterar den att den alltid är en tupel [#]_."

#: ../../extending/extending.rst:1113
msgid ""
"It is a severe error to ever let a ``NULL`` pointer \"escape\" to the Python"
" user."
msgstr ""
"Det är ett allvarligt fel att någonsin låta en ``NULL``\\-pekare \"fly\" "
"till Python-användaren."

#: ../../extending/extending.rst:1124
msgid "Writing Extensions in C++"
msgstr "Skriva tillägg i C++"

#: ../../extending/extending.rst:1126
msgid ""
"It is possible to write extension modules in C++.  Some restrictions apply."
"  If the main program (the Python interpreter) is compiled and linked by the"
" C compiler, global or static objects with constructors cannot be used.  "
"This is not a problem if the main program is linked by the C++ compiler.  "
"Functions that will be called by the Python interpreter (in particular, "
"module initialization functions) have to be declared using ``extern \"C\"``."
" It is unnecessary to enclose the Python header files in ``extern \"C\" "
"{...}`` --- they use this form already if the symbol ``__cplusplus`` is "
"defined (all recent C++ compilers define this symbol)."
msgstr ""
"Det är möjligt att skriva tilläggsmoduler i C++.  Vissa begränsningar "
"gäller.  Om huvudprogrammet (Python-tolken) kompileras och länkas av en "
"C-kompilator kan globala eller statiska objekt med konstruktörer inte "
"användas.  Detta är inte ett problem om huvudprogrammet länkas av "
"C++-kompilatorn.  Funktioner som kommer att anropas av Python-tolken (i "
"synnerhet modulinitialiseringsfunktioner) måste deklareras med hjälp av "
"``extern \"C\"``. Det är onödigt att bifoga Pythons headerfiler i ``extern "
"\"C\" {...}`` --- de använder denna form redan om symbolen ``__cplusplus`` "
"är definierad (alla nyare C++-kompilatorer definierar denna symbol)."

#: ../../extending/extending.rst:1140
msgid "Providing a C API for an Extension Module"
msgstr "Tillhandahålla ett C API för en tilläggsmodul"

#: ../../extending/extending.rst:1145
msgid ""
"Many extension modules just provide new functions and types to be used from "
"Python, but sometimes the code in an extension module can be useful for "
"other extension modules. For example, an extension module could implement a "
"type \"collection\" which works like lists without order. Just like the "
"standard Python list type has a C API which permits extension modules to "
"create and manipulate lists, this new collection type should have a set of C"
" functions for direct manipulation from other extension modules."
msgstr ""
"Många tilläggsmoduler tillhandahåller bara nya funktioner och typer som kan "
"användas från Python, men ibland kan koden i en tilläggsmodul vara användbar"
" för andra tilläggsmoduler. Till exempel kan en tilläggsmodul implementera "
"en typ \"collection\" som fungerar som listor utan ordning. Precis som "
"Pythons standardtyp list har ett C-API som tillåter tilläggsmoduler att "
"skapa och manipulera listor, bör denna nya samlingstyp ha en uppsättning "
"C-funktioner för direkt manipulation från andra tilläggsmoduler."

#: ../../extending/extending.rst:1153
msgid ""
"At first sight this seems easy: just write the functions (without declaring "
"them ``static``, of course), provide an appropriate header file, and "
"document the C API. And in fact this would work if all extension modules "
"were always linked statically with the Python interpreter. When modules are "
"used as shared libraries, however, the symbols defined in one module may not"
" be visible to another module. The details of visibility depend on the "
"operating system; some systems use one global namespace for the Python "
"interpreter and all extension modules (Windows, for example), whereas others"
" require an explicit list of imported symbols at module link time (AIX is "
"one example), or offer a choice of different strategies (most Unices). And "
"even if symbols are globally visible, the module whose functions one wishes "
"to call might not have been loaded yet!"
msgstr ""
"Vid första anblicken verkar detta enkelt: skriv bara funktionerna "
"(naturligtvis utan att deklarera dem som \"statiska\"), tillhandahåll en "
"lämplig header-fil och dokumentera C API. Och det skulle faktiskt fungera om"
" alla tilläggsmoduler alltid länkades statiskt med Python-tolken. När "
"moduler används som delade bibliotek kan det dock hända att de symboler som "
"definieras i en modul inte är synliga för en annan modul. Detaljerna kring "
"synlighet beror på operativsystemet; vissa system använder ett globalt "
"namnrymd för Python-tolken och alla tilläggsmoduler (Windows, till exempel),"
" medan andra kräver en explicit lista över importerade symboler vid "
"modullänkning (AIX är ett exempel), eller erbjuder ett urval av olika "
"strategier (de flesta Unices). Och även om symbolerna är globalt synliga är "
"det inte säkert att den modul vars funktioner man vill anropa har laddats in"
" än!"

#: ../../extending/extending.rst:1165
msgid ""
"Portability therefore requires not to make any assumptions about symbol "
"visibility. This means that all symbols in extension modules should be "
"declared ``static``, except for the module's initialization function, in "
"order to avoid name clashes with other extension modules (as discussed in "
"section :ref:`methodtable`). And it means that symbols that *should* be "
"accessible from other extension modules must be exported in a different way."
msgstr ""
"Portabilitet kräver därför att man inte gör några antaganden om symbolers "
"synlighet. Detta innebär att alla symboler i tilläggsmoduler bör deklareras "
"``static``, med undantag för modulens initialiseringsfunktion, för att "
"undvika namnkrockar med andra tilläggsmoduler (vilket diskuteras i avsnitt "
":ref:`methodtable`). Och det innebär att symboler som *bör* vara åtkomliga "
"från andra tilläggsmoduler måste exporteras på ett annat sätt."

#: ../../extending/extending.rst:1172
msgid ""
"Python provides a special mechanism to pass C-level information (pointers) "
"from one extension module to another one: Capsules. A Capsule is a Python "
"data type which stores a pointer (:c:expr:`void \\*`).  Capsules can only be"
" created and accessed via their C API, but they can be passed around like "
"any other Python object. In particular,  they can be assigned to a name in "
"an extension module's namespace. Other extension modules can then import "
"this module, retrieve the value of this name, and then retrieve the pointer "
"from the Capsule."
msgstr ""
"Python tillhandahåller en speciell mekanism för att skicka information på "
"C-nivå (pekare) från en tilläggsmodul till en annan: Kapslar. En Capsule är "
"en Python-datatyp som lagrar en pekare (:c:expr:`void \\*`).  Kapslar kan "
"bara skapas och nås via deras C API, men de kan skickas runt som vilket "
"annat Python-objekt som helst. I synnerhet kan de tilldelas ett namn i en "
"tilläggsmoduls namnrymd. Andra tilläggsmoduler kan sedan importera den här "
"modulen, hämta värdet på det här namnet och sedan hämta pekaren från "
"Capsule."

#: ../../extending/extending.rst:1180
msgid ""
"There are many ways in which Capsules can be used to export the C API of an "
"extension module. Each function could get its own Capsule, or all C API "
"pointers could be stored in an array whose address is published in a "
"Capsule. And the various tasks of storing and retrieving the pointers can be"
" distributed in different ways between the module providing the code and the"
" client modules."
msgstr ""
"Det finns många sätt att använda kapslar för att exportera C API för en "
"tilläggsmodul. Varje funktion kan få sin egen Capsule, eller så kan alla C "
"API-pekare lagras i en array vars adress publiceras i en Capsule. Och de "
"olika uppgifterna för att lagra och hämta pekarna kan fördelas på olika sätt"
" mellan modulen som tillhandahåller koden och klientmodulerna."

#: ../../extending/extending.rst:1186
msgid ""
"Whichever method you choose, it's important to name your Capsules properly. "
"The function :c:func:`PyCapsule_New` takes a name parameter (:c:expr:`const "
"char \\*`); you're permitted to pass in a ``NULL`` name, but we strongly "
"encourage you to specify a name.  Properly named Capsules provide a degree "
"of runtime type-safety; there is no feasible way to tell one unnamed Capsule"
" from another."
msgstr ""
"Oavsett vilken metod du väljer är det viktigt att namnge dina kapslar på "
"rätt sätt. Funktionen :c:func:`PyCapsule_New` tar emot en namnparameter "
"(:c:expr:`const char \\*`); du får skicka in ett ``NULL`` namn, men vi "
"uppmuntrar dig starkt att ange ett namn.  Korrekt namngivna kapslar ger en "
"viss grad av typsäkerhet under körning; det finns inget genomförbart sätt "
"att skilja en namnlös kapsel från en annan."

#: ../../extending/extending.rst:1193
msgid ""
"In particular, Capsules used to expose C APIs should be given a name "
"following this convention::"
msgstr ""
"I synnerhet bör kapslar som används för att exponera C API:er ges ett namn "
"enligt följande konvention::"

#: ../../extending/extending.rst:1198
msgid ""
"The convenience function :c:func:`PyCapsule_Import` makes it easy to load a "
"C API provided via a Capsule, but only if the Capsule's name matches this "
"convention.  This behavior gives C API users a high degree of certainty that"
" the Capsule they load contains the correct C API."
msgstr ""
"Bekvämlighetsfunktionen :c:func:`PyCapsule_Import` gör det enkelt att ladda "
"ett C API som tillhandahålls via en Capsule, men bara om Capsulens namn "
"matchar denna konvention.  Detta beteende ger C API-användare en hög grad av"
" säkerhet att den Capsule de laddar innehåller rätt C API."

#: ../../extending/extending.rst:1203
msgid ""
"The following example demonstrates an approach that puts most of the burden "
"on the writer of the exporting module, which is appropriate for commonly "
"used library modules. It stores all C API pointers (just one in the "
"example!) in an array of :c:expr:`void` pointers which becomes the value of "
"a Capsule. The header file corresponding to the module provides a macro that"
" takes care of importing the module and retrieving its C API pointers; "
"client modules only have to call this macro before accessing the C API."
msgstr ""
"Följande exempel visar ett tillvägagångssätt som lägger det mesta av bördan "
"på författaren av den exporterande modulen, vilket är lämpligt för vanliga "
"biblioteksmoduler. Den lagrar alla C API-pekare (bara en i exemplet!) i en "
"array av :c:expr:`void`\\-pekare som blir värdet på en Capsule. Headerfilen "
"som motsvarar modulen innehåller ett makro som tar hand om att importera "
"modulen och hämta dess C API-pekare; klientmoduler behöver bara anropa detta"
" makro innan de får tillgång till C API."

#: ../../extending/extending.rst:1211
msgid ""
"The exporting module is a modification of the :mod:`spam` module from "
"section :ref:`extending-simpleexample`. The function :func:`spam.system` "
"does not call the C library function :c:func:`system` directly, but a "
"function :c:func:`PySpam_System`, which would of course do something more "
"complicated in reality (such as adding \"spam\" to every command). This "
"function :c:func:`PySpam_System` is also exported to other extension "
"modules."
msgstr ""

#: ../../extending/extending.rst:1218
msgid ""
"The function :c:func:`PySpam_System` is a plain C function, declared "
"``static`` like everything else::"
msgstr ""

#: ../../extending/extending.rst:1227
msgid "The function :c:func:`spam_system` is modified in a trivial way::"
msgstr ""

#: ../../extending/extending.rst:1241
msgid "In the beginning of the module, right after the line ::"
msgstr "I början av modulen, direkt efter raden ::"

#: ../../extending/extending.rst:1245
msgid "two more lines must be added::"
msgstr "ytterligare två rader måste läggas till::"

#: ../../extending/extending.rst:1250
msgid ""
"The ``#define`` is used to tell the header file that it is being included in"
" the exporting module, not a client module. Finally, the module's "
"initialization function must take care of initializing the C API pointer "
"array::"
msgstr ""

#: ../../extending/extending.rst:1280
msgid ""
"Note that ``PySpam_API`` is declared ``static``; otherwise the pointer array"
" would disappear when :func:`PyInit_spam` terminates!"
msgstr ""

#: ../../extending/extending.rst:1283
msgid ""
"The bulk of the work is in the header file :file:`spammodule.h`, which looks"
" like this::"
msgstr ""
"Huvuddelen av arbetet ligger i header-filen :file:`spammodule.h`, som ser ut"
" så här::"

#: ../../extending/extending.rst:1334
msgid ""
"All that a client module must do in order to have access to the function "
":c:func:`PySpam_System` is to call the function (or rather macro) "
":c:func:`import_spam` in its initialization function::"
msgstr ""

#: ../../extending/extending.rst:1352
msgid ""
"The main disadvantage of this approach is that the file :file:`spammodule.h`"
" is rather complicated. However, the basic structure is the same for each "
"function that is exported, so it has to be learned only once."
msgstr ""
"Den största nackdelen med detta tillvägagångssätt är att filen "
":file:`spammodule.h` är ganska komplicerad. Grundstrukturen är dock densamma"
" för varje funktion som exporteras, så den behöver bara läras in en gång."

#: ../../extending/extending.rst:1356
msgid ""
"Finally it should be mentioned that Capsules offer additional functionality,"
" which is especially useful for memory allocation and deallocation of the "
"pointer stored in a Capsule. The details are described in the Python/C API "
"Reference Manual in the section :ref:`capsules` and in the implementation of"
" Capsules (files :file:`Include/pycapsule.h` and :file:`Objects/pycapsule.c`"
" in the Python source code distribution)."
msgstr ""
"Slutligen bör det nämnas att Capsules erbjuder ytterligare funktionalitet, "
"som är särskilt användbar för minnesallokering och deallokering av pekaren "
"som lagras i en Capsule. Detaljerna beskrivs i Python/C API Reference Manual"
" i avsnittet :ref:`capsules` och i implementationen av Capsules (filerna "
":file:`Include/pycapsule.h` och :file:`Objects/pycapsule.c` i Pythons "
"källkodsdistribution)."

#: ../../extending/extending.rst:1364
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../extending/extending.rst:1365
msgid ""
"An interface for this function already exists in the standard module "
":mod:`os` --- it was chosen as a simple and straightforward example."
msgstr ""
"Ett gränssnitt för denna funktion finns redan i standardmodulen :mod:`os` "
"--- den valdes som ett enkelt och okomplicerat exempel."

#: ../../extending/extending.rst:1368
msgid ""
"The metaphor of \"borrowing\" a reference is not completely correct: the "
"owner still has a copy of the reference."
msgstr ""
"Metaforen med att \"låna\" en referens är inte helt korrekt: ägaren har "
"fortfarande en kopia av referensen."

#: ../../extending/extending.rst:1371
msgid ""
"Checking that the reference count is at least 1 **does not work** --- the "
"reference count itself could be in freed memory and may thus be reused for "
"another object!"
msgstr ""
"Att kontrollera att referensantalet är minst 1 **fungerar inte** --- själva "
"referensantalet kan finnas i det frigjorda minnet och kan därmed "
"återanvändas för ett annat objekt!"

#: ../../extending/extending.rst:1375
msgid ""
"These guarantees don't hold when you use the \"old\" style calling "
"convention --- this is still found in much existing code."
msgstr ""
"Dessa garantier gäller inte när du använder den \"gamla\" anropskonventionen"
" --- detta finns fortfarande i mycket befintlig kod."
