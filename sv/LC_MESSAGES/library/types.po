# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/types.rst:2
msgid ":mod:`types` --- Dynamic type creation and names for built-in types"
msgstr ""

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**Källkod:** :source:`Lib/types.py`"

#: ../../library/types.rst:11
msgid ""
"This module defines utility functions to assist in dynamic creation of new "
"types."
msgstr ""
"Denna modul definierar verktygsfunktioner för att underlätta dynamiskt "
"skapande av nya typer."

#: ../../library/types.rst:14
msgid ""
"It also defines names for some object types that are used by the standard "
"Python interpreter, but not exposed as builtins like :class:`int` or "
":class:`str` are."
msgstr ""
"Den definierar också namn för vissa objekttyper som används av Pythons "
"standardtolk, men som inte exponeras som inbyggda objekt som :class:`int` "
"eller :class:`str`."

#: ../../library/types.rst:18
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr ""
"Slutligen innehåller den några ytterligare typrelaterade verktygsklasser och"
" funktioner som inte är tillräckligt grundläggande för att vara inbyggda."

#: ../../library/types.rst:23
msgid "Dynamic Type Creation"
msgstr "Skapande av dynamisk typ"

#: ../../library/types.rst:27
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr "Skapar ett klassobjekt dynamiskt med hjälp av lämplig metaklass."

#: ../../library/types.rst:29
msgid ""
"The first three arguments are the components that make up a class definition"
" header: the class name, the base classes (in order), the keyword arguments "
"(such as ``metaclass``)."
msgstr ""
"De tre första argumenten är de komponenter som utgör ett "
"klassdefinitionshuvud: klassnamnet, basklasserna (i ordning), "
"nyckelordsargumenten (t.ex. ``metaclass``)."

#: ../../library/types.rst:33
msgid ""
"The *exec_body* argument is a callback that is used to populate the freshly "
"created class namespace. It should accept the class namespace as its sole "
"argument and update the namespace directly with the class contents. If no "
"callback is provided, it has the same effect as passing in ``lambda ns: "
"None``."
msgstr ""
"Argumentet *exec_body* är en callback som används för att fylla på den nyss "
"skapade klassnamnrymden. Den bör acceptera klassens namnrymd som sitt enda "
"argument och uppdatera namnrymden direkt med klassens innehåll. Om ingen "
"återuppringning anges har det samma effekt som att skicka in ``lambda ns: "
"None``."

#: ../../library/types.rst:43
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr "Beräknar lämplig metaklass och skapar klassens namnrymd."

#: ../../library/types.rst:45
msgid ""
"The arguments are the components that make up a class definition header: the"
" class name, the base classes (in order) and the keyword arguments (such as "
"``metaclass``)."
msgstr ""
"Argumenten är de komponenter som ingår i ett klassdefinitionshuvud: "
"klassnamnet, basklasserna (i ordning) och nyckelordsargumenten (t.ex. "
"``metaclass``)."

#: ../../library/types.rst:49
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr "Returvärdet är en 3-tupel: ``metaclass, namespace, kwds``"

#: ../../library/types.rst:51
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared class "
"namespace and *kwds* is an updated copy of the passed in *kwds* argument "
"with any ``'metaclass'`` entry removed. If no *kwds* argument is passed in, "
"this will be an empty dict."
msgstr ""
"*metaclass* är den lämpliga metaklassen, *namespace* är det förberedda "
"klassnamnrymden och *kwds* är en uppdaterad kopia av det passerade "
"*kwds*-argumentet med alla ``'metaclass'``\\-poster borttagna. Om inget "
"*kwds*-argument skickas in kommer detta att vara en tom dict."

#: ../../library/types.rst:60
msgid ""
"The default value for the ``namespace`` element of the returned tuple has "
"changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method."
msgstr ""
"Standardvärdet för elementet ``namespace`` i den returnerade tuplen har "
"ändrats. Nu används en mappning som bevarar infogningsordningen när "
"metaklassen inte har en ``__prepare__``\\-metod."

#: ../../library/types.rst:67
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
msgid ""
"Full details of the class creation process supported by these functions"
msgstr ""
"Fullständiga detaljer om processen för att skapa klasser med stöd av dessa "
"funktioner"

#: ../../library/types.rst:69
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Metaklasser i Python 3000"

#: ../../library/types.rst:70
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "Införde namnrymdshaken ``__prepare__``"

#: ../../library/types.rst:74
msgid "Resolve MRO entries dynamically as specified by :pep:`560`."
msgstr "Löser MRO-poster dynamiskt enligt specifikationen i :pep:`560`."

#: ../../library/types.rst:76
msgid ""
"This function looks for items in *bases* that are not instances of "
":class:`type`, and returns a tuple where each such object that has an "
":meth:`~object.__mro_entries__` method is replaced with an unpacked result "
"of calling this method.  If a *bases* item is an instance of :class:`type`, "
"or it doesn't have an :meth:`!__mro_entries__` method, then it is included "
"in the return tuple unchanged."
msgstr ""
"Den här funktionen letar efter objekt i *bases* som inte är instanser av "
":class:`type` och returnerar en tupel där varje sådant objekt som har en "
":meth:`~object.__mro_entries__`\\-metod ersätts med ett uppackat resultat av"
" anropet av den här metoden.  Om ett *bases*-objekt är en instans av "
":class:`type`, eller om det inte har en :meth:`!__mro_entries__`\\-metod, "
"ingår det oförändrat i retur-tupeln."

#: ../../library/types.rst:87
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ":pep:`560` - Kärnstöd för typning av moduler och generiska typer"

#: ../../library/types.rst:91
msgid "Standard Interpreter Types"
msgstr "Standardtolktyper"

#: ../../library/types.rst:93
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of the"
" types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"Denna modul ger namn på många av de typer som krävs för att implementera en "
"Python-tolk. Den undviker avsiktligt att inkludera några av de typer som "
"bara uppstår av en slump under bearbetningen, till exempel typen "
"``listiterator``."

#: ../../library/types.rst:98
msgid ""
"Typical use of these names is for :func:`isinstance` or :func:`issubclass` "
"checks."
msgstr ""
"Typisk användning av dessa namn är för :func:`isinstance` eller "
":func:`issubclass` kontroller."

#: ../../library/types.rst:102
msgid ""
"If you instantiate any of these types, note that signatures may vary between"
" Python versions."
msgstr ""
"Om du instansierar någon av dessa typer, observera att signaturerna kan "
"variera mellan olika Python-versioner."

#: ../../library/types.rst:104
msgid "Standard names are defined for the following types:"
msgstr "Standardnamn har definierats för följande typer:"

#: ../../library/types.rst:108
msgid "The type of :data:`None`."
msgstr "Typ av :data:`None`."

#: ../../library/types.rst:116
msgid ""
"The type of user-defined functions and functions created by "
":keyword:`lambda`  expressions."
msgstr ""
"Typ av användardefinierade funktioner och funktioner som skapas av "
":keyword:`lambda`\\-uttryck."

#: ../../library/types.rst:119
msgid ""
"Raises an :ref:`auditing event <auditing>` ``function.__new__`` with "
"argument ``code``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``function.__new__`` med "
"argumentet ``code``."

#: ../../library/types.rst:121
msgid ""
"The audit event only occurs for direct instantiation of function objects, "
"and is not raised for normal compilation."
msgstr ""
"Revisionshändelsen inträffar endast vid direkt instansiering av "
"funktionsobjekt och inte vid normal kompilering."

#: ../../library/types.rst:127
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr ""
"Typ av :term:`generator`\\-iteratorobjekt som skapas av generatorfunktioner."

#: ../../library/types.rst:133
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ""
"Typ av :term:`coroutine`\\-objekt, skapade av :keyword:`async "
"def`\\-funktioner."

#: ../../library/types.rst:141
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr ""
"Typ av :term:`asynkron generator`\\-iteratorobjekt, skapade av asynkrona "
"generatorfunktioner."

#: ../../library/types.rst:151
msgid ""
"The type of :ref:`code objects <code-objects>` such as returned by "
":func:`compile`."
msgstr ""
"Typen av :ref:`code objects <code-objects>` som t.ex. returneras av "
":func:`compile`."

#: ../../library/types.rst:153
msgid ""
"Raises an :ref:`auditing event <auditing>` ``code.__new__`` with arguments "
"``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount``, "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``."
msgstr ""
"Utlöser en :ref:`auditing-händelse <auditing>` ``code.__new__`` med "
"argumenten ``code``, ``filnamn``, ``namn``, ``argcount``, "
"``posonlyargcount``, ``kwonlyargcount``, ``nlocals``, ``stacksize``, "
"``flags``."

#: ../../library/types.rst:155
msgid ""
"Note that the audited arguments may not match the names or positions "
"required by the initializer.  The audit event only occurs for direct "
"instantiation of code objects, and is not raised for normal compilation."
msgstr ""
"Observera att de granskade argumenten kanske inte matchar de namn eller "
"positioner som krävs av initieraren.  Granskningshändelsen inträffar endast "
"vid direkt instansiering av kodobjekt och inte vid normal kompilering."

#: ../../library/types.rst:161
msgid ""
"The type for cell objects: such objects are used as containers for a "
"function's free variables."
msgstr ""

#: ../../library/types.rst:169
msgid "The type of methods of user-defined class instances."
msgstr "Typen av metoder för användardefinierade klassinstanser."

#: ../../library/types.rst:175
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means \"written "
"in C\".)"
msgstr ""
"Typen av inbyggda funktioner som :func:`len` eller :func:`sys.exit`, och "
"metoder för inbyggda klasser.  (Här betyder termen \"inbyggd\" \"skriven i "
"C\")"

#: ../../library/types.rst:182
msgid ""
"The type of methods of some built-in data types and base classes such as "
":meth:`object.__init__` or :meth:`object.__lt__`."
msgstr ""
"Typen av metoder för vissa inbyggda datatyper och basklasser, t.ex. "
":meth:`object.__init__` eller :meth:`object.__lt__`."

#: ../../library/types.rst:190
msgid ""
"The type of *bound* methods of some built-in data types and base classes. "
"For example it is the type of :code:`object().__str__`."
msgstr ""
"Typen av *bundna* metoder för vissa inbyggda datatyper och basklasser. Det "
"är t.ex. typen av :code:`object().__str__`."

#: ../../library/types.rst:198
msgid "The type of :data:`NotImplemented`."
msgstr "Typen av :data:`NotImplemented`."

#: ../../library/types.rst:205
msgid ""
"The type of methods of some built-in data types such as :meth:`str.join`."
msgstr ""
"Typen av metoder för vissa inbyggda datatyper, t.ex. :meth:`str.join`."

#: ../../library/types.rst:212
msgid ""
"The type of *unbound* class methods of some built-in data types such as "
"``dict.__dict__['fromkeys']``."
msgstr ""
"Typen av *obundna* klassmetoder för vissa inbyggda datatyper, t.ex. "
"``dict.__dict__['fromkeys']``."

#: ../../library/types.rst:220
msgid ""
"The type of :term:`modules <module>`. The constructor takes the name of the "
"module to be created and optionally its :term:`docstring`."
msgstr ""
"Typen av :term:`moduler <module>`. Konstruktören tar namnet på den modul som"
" ska skapas och eventuellt dess :term:`docstring`."

#: ../../library/types.rst:224
msgid ""
"Use :func:`importlib.util.module_from_spec` to create a new module if you "
"wish to set the various import-controlled attributes."
msgstr ""

#: ../../library/types.rst:229
msgid "The :term:`docstring` of the module. Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:233
msgid "The :term:`loader` which loaded the module. Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:235
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.loader` as "
"stored in the :attr:`__spec__` object."
msgstr ""

#: ../../library/types.rst:239
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the "
":attr:`__spec__` attribute instead or use ``getattr(module, \"__loader__\", "
"None)`` if you explicitly need to use this attribute."
msgstr ""

#: ../../library/types.rst:245 ../../library/types.rst:270
msgid "Defaults to ``None``. Previously the attribute was optional."
msgstr ""

#: ../../library/types.rst:250
msgid ""
"The name of the module. Expected to match "
":attr:`importlib.machinery.ModuleSpec.name`."
msgstr ""

#: ../../library/types.rst:255
msgid ""
"Which :term:`package` a module belongs to. If the module is top-level (i.e. "
"not a part of any specific package) then the attribute should be set to "
"``''``, else it should be set to the name of the package (which can be "
":attr:`__name__` if the module is a package itself). Defaults to ``None``."
msgstr ""

#: ../../library/types.rst:260
msgid ""
"This attribute is to match :attr:`importlib.machinery.ModuleSpec.parent` as "
"stored in the :attr:`__spec__` object."
msgstr ""

#: ../../library/types.rst:264
msgid ""
"A future version of Python may stop setting this attribute by default. To "
"guard against this potential change, preferably read from the "
":attr:`__spec__` attribute instead or use ``getattr(module, \"__package__\","
" None)`` if you explicitly need to use this attribute."
msgstr ""

#: ../../library/types.rst:275
msgid ""
"A record of the module's import-system-related state. Expected to be an "
"instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""

#: ../../library/types.rst:283
msgid "The type of :data:`Ellipsis`."
msgstr "Typ av :data:`Ellipsis`."

#: ../../library/types.rst:289
msgid ""
"The type of :ref:`parameterized generics <types-genericalias>` such as "
"``list[int]``."
msgstr ""
"Typen av :ref:`parameteriserade generiska <types-genericalias>` såsom "
"``list[int]``."

#: ../../library/types.rst:292
msgid ""
"``t_origin`` should be a non-parameterized generic class, such as ``list``, "
"``tuple`` or ``dict``.  ``t_args`` should be a :class:`tuple` (possibly of "
"length 1) of types which parameterize ``t_origin``::"
msgstr ""
"``t_origin`` skall vara en icke-parameteriserad generisk klass, t.ex. "
"``list``, ``tuple`` eller ``dict``.  ``t_args`` skall vara en :class:`tuple`"
" (eventuellt av längd 1) av typer som parametriserar ``t_origin``::"

#: ../../library/types.rst:305
msgid "This type can now be subclassed."
msgstr "Denna typ kan nu underklassificeras."

#: ../../library/types.rst:311
msgid ":ref:`Generic Alias Types<types-genericalias>`"
msgstr ":ref:`Generiska alias-typer<types-genericalias>`"

#: ../../library/types.rst:311
msgid "In-depth documentation on instances of :class:`!types.GenericAlias`"
msgstr "Fördjupad dokumentation av instanser av :class:`!types.GenericAlias`"

#: ../../library/types.rst:313
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ":pep:`585` - Typhintning av generiska i standardsamlingar"

#: ../../library/types.rst:314
msgid "Introducing the :class:`!types.GenericAlias` class"
msgstr "Vi introducerar :class:`!types.GenericAlias`\\-klassen"

#: ../../library/types.rst:318
msgid "The type of :ref:`union type expressions<types-union>`."
msgstr "Typen av :ref:`unionstyputtryck<types-union>`."

#: ../../library/types.rst:324
msgid ""
"The type of traceback objects such as found in "
"``sys.exception().__traceback__``."
msgstr ""
"Typen av spårningsobjekt som finns i ``sys.exception().__traceback__``."

#: ../../library/types.rst:326
msgid ""
"See :ref:`the language reference <traceback-objects>` for details of the "
"available attributes and operations, and guidance on creating tracebacks "
"dynamically."
msgstr ""
"Se :ref:`språkreferensen <traceback-objects>` för mer information om "
"tillgängliga attribut och operationer samt vägledning om hur man skapar "
"dynamiska spårningar."

#: ../../library/types.rst:333
msgid ""
"The type of :ref:`frame objects <frame-objects>` such as found in "
":attr:`tb.tb_frame <traceback.tb_frame>` if ``tb`` is a traceback object."
msgstr ""
"Typen av :ref:`frame objects <frame-objects>` som finns i :attr:`tb.tb_frame"
" <traceback.tb_frame>` om ``tb`` är ett traceback-objekt."

#: ../../library/types.rst:339
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, such "
"as :attr:`FrameType.f_locals <frame.f_locals>` or ``array.array.typecode``. "
"This type is used as descriptor for object attributes; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"Typen av objekt som definieras i tilläggsmoduler med ``PyGetSetDef``, t.ex. "
":attr:`FrameType.f_locals <frame.f_locals>` eller ``array.array.typecode``. "
"Den här typen används som deskriptor för objektattribut; den har samma syfte"
" som typen :class:`property`, men för klasser som definieras i "
"tilläggsmoduler."

#: ../../library/types.rst:348
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, such "
"as ``datetime.timedelta.days``.  This type is used as descriptor for simple "
"C data members which use standard conversion functions; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"Typen av objekt som definieras i tilläggsmoduler med ``PyMemberDef``, t.ex. "
"``datetime.timedelta.days``.  Den här typen används som deskriptor för enkla"
" C-datamedlemmar som använder standardkonverteringsfunktioner; den har samma"
" syfte som typen :class:`property`, men för klasser som definieras i "
"tilläggsmoduler."

#: ../../library/types.rst:353
msgid ""
"In addition, when a class is defined with a :attr:`~object.__slots__` "
"attribute, then for each slot, an instance of :class:`!MemberDescriptorType`"
" will be added as an attribute on the class. This allows the slot to appear "
"in the class's :attr:`~object.__dict__`."
msgstr ""

#: ../../library/types.rst:359
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr ""
"I andra implementationer av Python kan denna typ vara identisk med "
"``GetSetDescriptorType``."

#: ../../library/types.rst:364
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's "
"entries, which means that when the mapping changes, the view reflects these "
"changes."
msgstr ""
"Skrivskyddad proxy för en mappning. Den ger en dynamisk vy över mappningens "
"poster, vilket innebär att när mappningen ändras återspeglas dessa ändringar"
" i vyn."

#: ../../library/types.rst:372
msgid ""
"Updated to support the new union (``|``) operator from :pep:`584`, which "
"simply delegates to the underlying mapping."
msgstr ""
"Uppdaterad för att stödja den nya operatorn union (``|``) från :pep:`584`, "
"som helt enkelt delegerar till den underliggande mappningen."

#: ../../library/types.rst:377
msgid ""
"Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr ""
"Returnerar ``True`` om den underliggande mappningen har en nyckel *key*, "
"annars ``False``."

#: ../../library/types.rst:382
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a "
":exc:`KeyError` if *key* is not in the underlying mapping."
msgstr ""
"Returnerar objektet i den underliggande mappningen med nyckel *key*.  "
"Utlöser ett :exc:`KeyError` om *key* inte finns i den underliggande "
"mappningen."

#: ../../library/types.rst:387
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr ""
"Returnerar en iterator över nycklarna i den underliggande mappningen.  Detta"
" är en genväg till ``iter(proxy.keys())``."

#: ../../library/types.rst:392
msgid "Return the number of items in the underlying mapping."
msgstr "Returnerar antalet objekt i den underliggande mappningen."

#: ../../library/types.rst:396
msgid "Return a shallow copy of the underlying mapping."
msgstr "Returnerar en ytlig kopia av den underliggande mappningen."

#: ../../library/types.rst:400
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that this"
" method never raises a :exc:`KeyError`."
msgstr ""
"Returnerar värdet för *key* om *key* finns i den underliggande mappningen, "
"annars *default*.  Om *default* inte anges är standardvärdet ``None``, så "
"att den här metoden aldrig ger upphov till ett :exc:`KeyError`."

#: ../../library/types.rst:406
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` "
"pairs)."
msgstr ""
"Returnerar en ny vy av den underliggande mappningens objekt (par av typen "
"``(nyckel, värde)``)."

#: ../../library/types.rst:411
msgid "Return a new view of the underlying mapping's keys."
msgstr "Returnerar en ny vy av den underliggande mappningens nycklar."

#: ../../library/types.rst:415
msgid "Return a new view of the underlying mapping's values."
msgstr "Returnerar en ny vy av den underliggande mappningens värden."

#: ../../library/types.rst:419
msgid "Return a reverse iterator over the keys of the underlying mapping."
msgstr ""
"Returnerar en omvänd iterator över nycklarna i den underliggande mappningen."

#: ../../library/types.rst:425
msgid "Additional Utility Classes and Functions"
msgstr "Ytterligare verktygsklasser och funktioner"

#: ../../library/types.rst:429
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr ""
"En enkel :class:`object`\\-underklass som ger attributåtkomst till dess "
"namnrymd, samt en meningsfull repr."

#: ../../library/types.rst:432
msgid ""
"Unlike :class:`object`, with ``SimpleNamespace`` you can add and remove "
"attributes.  If a ``SimpleNamespace`` object is initialized with keyword "
"arguments, those are directly added to the underlying namespace."
msgstr ""

#: ../../library/types.rst:436
msgid "The type is roughly equivalent to the following code::"
msgstr "Typen motsvarar ungefär följande kod::"

#: ../../library/types.rst:451
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: pass``. "
"However, for a structured record type use :func:`~collections.namedtuple` "
"instead."
msgstr ""
"``SimpleNamespace`` kan vara användbart som ersättning för ``class NS: "
"pass``. Men för en strukturerad posttyp använd "
":func:`~collections.namedtuple` istället."

#: ../../library/types.rst:457
msgid ""
"Attribute order in the repr changed from alphabetical to insertion (like "
"``dict``)."
msgstr ""
"Attributordningen i repr ändrades från alfabetisk till insertion (som "
"``dict``)."

#: ../../library/types.rst:463
msgid "Route attribute access on a class to __getattr__."
msgstr "Dirigera attributåtkomst för en klass till __getattr__."

#: ../../library/types.rst:465
msgid ""
"This is a descriptor, used to define attributes that act differently when "
"accessed through an instance and through a class.  Instance access remains "
"normal, but access to an attribute through a class will be routed to the "
"class's __getattr__ method; this is done by raising AttributeError."
msgstr ""
"Detta är en deskriptor som används för att definiera attribut som fungerar "
"olika när de nås via en instans och via en klass.  Instansåtkomst förblir "
"normal, men åtkomst till ett attribut via en klass kommer att dirigeras till"
" klassens __getattr__-metod; detta görs genom att AttributeError utlöses."

#: ../../library/types.rst:470
msgid ""
"This allows one to have properties active on an instance, and have virtual "
"attributes on the class with the same name (see :class:`enum.Enum` for an "
"example)."
msgstr ""
"Detta gör att man kan ha egenskaper aktiva på en instans och ha virtuella "
"attribut på klassen med samma namn (se :class:`enum.Enum` för ett exempel)."

#: ../../library/types.rst:477
msgid "Coroutine Utility Functions"
msgstr "Verktygsfunktioner för Coroutine"

#: ../../library/types.rst:481
msgid ""
"This function transforms a :term:`generator` function into a "
":term:`coroutine function` which returns a generator-based coroutine. The "
"generator-based coroutine is still a :term:`generator iterator`, but is also"
" considered to be a :term:`coroutine` object and is :term:`awaitable`.  "
"However, it may not necessarily implement the :meth:`~object.__await__` "
"method."
msgstr ""
"Denna funktion omvandlar en :term:`generator`\\-funktion till en "
":term:`coroutine-funktion` som returnerar en generatorbaserad coroutine. Den"
" generatorbaserade coroutinen är fortfarande en :term:`generator iterator`, "
"men anses också vara ett :term:`coroutine`\\-objekt och är "
":term:`awaitable`.  Den behöver dock inte nödvändigtvis implementera metoden"
" :meth:`~object.__await__`."

#: ../../library/types.rst:488
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr ""
"Om *gen_func* är en generatorfunktion kommer den att modifieras på plats."

#: ../../library/types.rst:490
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it returns"
" an instance of :class:`collections.abc.Generator`, the instance will be "
"wrapped in an *awaitable* proxy object.  All other types of objects will be "
"returned as is."
msgstr ""
"Om *gen_func* inte är en generatorfunktion kommer den att paketeras. Om den "
"returnerar en instans av :class:`collections.abc.Generator`, kommer "
"instansen att packas in i ett *awaitable* proxyobjekt.  Alla andra typer av "
"objekt kommer att returneras som de är."

#: ../../library/types.rst:149
msgid "built-in function"
msgstr "inbyggd funktion"

#: ../../library/types.rst:149
msgid "compile"
msgstr "sammanställa"
