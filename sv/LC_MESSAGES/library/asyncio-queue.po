# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/asyncio-queue.rst:7
msgid "Queues"
msgstr "Köer"

#: ../../library/asyncio-queue.rst:9
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**Källkod:** :source:`Lib/asyncio/queues.py`"

#: ../../library/asyncio-queue.rst:13
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""
"asyncio-köer är utformade för att likna klasser i modulen :mod:`queue`.  "
"Även om asyncio-köer inte är trådsäkra är de utformade för att användas "
"specifikt i async/await-kod."

#: ../../library/asyncio-queue.rst:17
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""
"Observera att metoder för asyncioköer inte har en *timeout*-parameter; "
"använd :func:`asyncio.wait_for`\\-funktionen för att göra köoperationer med "
"en timeout."

#: ../../library/asyncio-queue.rst:21
msgid "See also the `Examples`_ section below."
msgstr "Se även avsnittet `Examples`_ nedan."

#: ../../library/asyncio-queue.rst:24
msgid "Queue"
msgstr "Köa"

#: ../../library/asyncio-queue.rst:28
msgid "A first in, first out (FIFO) queue."
msgstr "En FIFO-kö (först in, först ut)."

#: ../../library/asyncio-queue.rst:30
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""
"Om *maxsize* är mindre än eller lika med noll är köns storlek oändlig.  Om "
"det är ett heltal större än ``0``, blockerar ``await put()`` när kön når "
"*maxsize* tills ett objekt tas bort med :meth:`get`."

#: ../../library/asyncio-queue.rst:35
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""
"Till skillnad från standardbibliotekets trådning :mod:`queue` är storleken "
"på kön alltid känd och kan returneras genom att anropa metoden :meth:`qsize`."

#: ../../library/asyncio-queue.rst:42
msgid "The *loop* parameter."
msgstr ""

#: ../../library/asyncio-queue.rst:43
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "Den här klassen är :ref:`inte trådsäker <asyncio-multithreading>`."

#: ../../library/asyncio-queue.rst:47
msgid "Number of items allowed in the queue."
msgstr "Antal objekt som tillåts i kön."

#: ../../library/asyncio-queue.rst:51
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "Returnerar ``True`` om kön är tom, annars ``False``."

#: ../../library/asyncio-queue.rst:55
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "Returnerar ``True`` om det finns :attr:`maxsize` objekt i kön."

#: ../../library/asyncio-queue.rst:57
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` never returns ``True``."
msgstr ""

#: ../../library/asyncio-queue.rst:62
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""
"Ta bort och returnera ett objekt från kön. Om kön är tom, vänta tills ett "
"objekt är tillgängligt."

#: ../../library/asyncio-queue.rst:67
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""
"Returnera ett objekt om det finns ett omedelbart tillgängligt, annars "
"uppstår :exc:`QueueEmpty`."

#: ../../library/asyncio-queue.rst:72
msgid "Block until all items in the queue have been received and processed."
msgstr "Blockera tills alla artiklar i kön har tagits emot och behandlats."

#: ../../library/asyncio-queue.rst:74
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""
"Antalet oavslutade uppgifter ökar varje gång ett objekt läggs till i kön. "
"Antalet sjunker när en consumer coroutine anropar :meth:`task_done` för att "
"ange att objektet har hämtats och att allt arbete med det är slutfört.  När "
"antalet oavslutade uppgifter sjunker till noll avblockeras :meth:`join`."

#: ../../library/asyncio-queue.rst:82
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""
"Lägg till ett objekt i kön. Om kön är full väntar du tills en ledig plats "
"finns tillgänglig innan du lägger till objektet."

#: ../../library/asyncio-queue.rst:87
msgid "Put an item into the queue without blocking."
msgstr "Lägg in ett objekt i kön utan att blockera."

#: ../../library/asyncio-queue.rst:89
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""
"Om ingen ledig plats finns omedelbart tillgänglig, uppstår :exc:`QueueFull`."

#: ../../library/asyncio-queue.rst:93
msgid "Return the number of items in the queue."
msgstr "Returnerar antalet objekt i kön."

#: ../../library/asyncio-queue.rst:97
msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

#: ../../library/asyncio-queue.rst:99
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""

#: ../../library/asyncio-queue.rst:103
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
"Om en :meth:`join` för närvarande blockeras, kommer den att återupptas när "
"alla objekt har bearbetats (vilket innebär att ett :meth:`task_done`\\-anrop "
"mottogs för varje objekt som hade :meth:`~Queue.put` i kön)."

#: ../../library/asyncio-queue.rst:108
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""
"Utlöser :exc:`ValueError` om den anropas fler gånger än det finns objekt i "
"kön."

#: ../../library/asyncio-queue.rst:113
msgid "Priority Queue"
msgstr "Prioriterad kö"

#: ../../library/asyncio-queue.rst:117
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""
"En variant av :class:`Queue`; hämtar poster i prioritetsordning (lägst "
"först)."

#: ../../library/asyncio-queue.rst:120
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr "Posterna är vanligtvis tupler av formen ``(priority_number, data)``."

#: ../../library/asyncio-queue.rst:125
msgid "LIFO Queue"
msgstr "LIFO-kö"

#: ../../library/asyncio-queue.rst:129
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""
"En variant av :class:`Queue` som hämtar de senast tillagda posterna först "
"(sist in, först ut)."

#: ../../library/asyncio-queue.rst:134
msgid "Exceptions"
msgstr "Undantag"

#: ../../library/asyncio-queue.rst:138
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""
"Detta undantag uppstår när metoden :meth:`~Queue.get_nowait` anropas på en "
"tom kö."

#: ../../library/asyncio-queue.rst:144
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""
"Exception som uppstår när metoden :meth:`~Queue.put_nowait` anropas på en kö "
"som har nått sin *maxsize*."

#: ../../library/asyncio-queue.rst:149
msgid "Examples"
msgstr "Exempel"

#: ../../library/asyncio-queue.rst:153
msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""
"Köer kan användas för att fördela arbetsbelastningen mellan flera samtidiga "
"uppgifter::"
