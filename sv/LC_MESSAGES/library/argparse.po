# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`argparse` --- Parser for command-line options, arguments and sub-"
"commands"
msgstr ""

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Källkod:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rstNone
msgid "Tutorial"
msgstr "Handledning"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the "
":ref:`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Den här sidan innehåller API-referensinformation. För en mer skonsam "
"introduktion till Python kommandoradsanalys, ta en titt på :ref:`argparse "
"tutorial <argparse-tutorial>`."

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`argparse` module makes it easy to write user-friendly command-line"
" interfaces. The program defines what arguments it requires, and "
":mod:`argparse` will figure out how to parse those out of :data:`sys.argv`."
"  The :mod:`argparse` module also automatically generates help and usage "
"messages and issues errors when users give the program invalid arguments."
msgstr ""

#: ../../library/argparse.rst:30
msgid "Example"
msgstr "Exempel"

#: ../../library/argparse.rst:32
msgid ""
"The following code is a Python program that takes a list of integers and "
"produces either the sum or the max::"
msgstr ""

#: ../../library/argparse.rst:47
msgid ""
"Assuming the Python code above is saved into a file called ``prog.py``, it "
"can be run at the command line and provides useful help messages:"
msgstr ""

#: ../../library/argparse.rst:64
msgid ""
"When run with the appropriate arguments, it prints either the sum or the max"
" of the command-line integers:"
msgstr ""

#: ../../library/argparse.rst:75
msgid "If invalid arguments are passed in, it will issue an error:"
msgstr ""

#: ../../library/argparse.rst:83
msgid "The following sections walk you through this example."
msgstr ""

#: ../../library/argparse.rst:87
msgid "Creating a parser"
msgstr ""

#: ../../library/argparse.rst:89
msgid ""
"The first step in using the :mod:`argparse` is creating an "
":class:`ArgumentParser` object::"
msgstr ""

#: ../../library/argparse.rst:94
msgid ""
"The :class:`ArgumentParser` object will hold all the information necessary "
"to parse the command line into Python data types."
msgstr ""

#: ../../library/argparse.rst:99
msgid "Adding arguments"
msgstr ""

#: ../../library/argparse.rst:101
msgid ""
"Filling an :class:`ArgumentParser` with information about program arguments "
"is done by making calls to the :meth:`~ArgumentParser.add_argument` method. "
"Generally, these calls tell the :class:`ArgumentParser` how to take the "
"strings on the command line and turn them into objects.  This information is"
" stored and used when :meth:`~ArgumentParser.parse_args` is called. For "
"example::"
msgstr ""

#: ../../library/argparse.rst:113
msgid ""
"Later, calling :meth:`~ArgumentParser.parse_args` will return an object with"
" two attributes, ``integers`` and ``accumulate``.  The ``integers`` "
"attribute will be a list of one or more ints, and the ``accumulate`` "
"attribute will be either the :func:`sum` function, if ``--sum`` was "
"specified at the command line, or the :func:`max` function if it was not."
msgstr ""

#: ../../library/argparse.rst:121
msgid "Parsing arguments"
msgstr "Tolkning av argument"

#: ../../library/argparse.rst:123
msgid ""
":class:`ArgumentParser` parses arguments through the "
":meth:`~ArgumentParser.parse_args` method.  This will inspect the command "
"line, convert each argument to the appropriate type and then invoke the "
"appropriate action. In most cases, this means a simple :class:`Namespace` "
"object will be built up from attributes parsed out of the command line::"
msgstr ""

#: ../../library/argparse.rst:132
msgid ""
"In a script, :meth:`~ArgumentParser.parse_args` will typically be called "
"with no arguments, and the :class:`ArgumentParser` will automatically "
"determine the command-line arguments from :data:`sys.argv`."
msgstr ""

#: ../../library/argparse.rst:138
msgid "ArgumentParser objects"
msgstr "ArgumentParser-objekt"

#: ../../library/argparse.rst:147
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed"
" as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Skapa ett nytt :class:`ArgumentParser`-objekt. Alla parametrar ska skickas "
"som nyckelordsargument. Varje parameter har sin egen mer detaljerade "
"beskrivning nedan, men i korthet är de:"

#: ../../library/argparse.rst:151
msgid "prog_ - The name of the program (default: ``sys.argv[0]``)"
msgstr ""

#: ../../library/argparse.rst:153
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"usage_ - Sträng som beskriver hur programmet används (standard: genereras "
"från argument som läggs till i parsern)"

#: ../../library/argparse.rst:156
msgid ""
"description_ - Text to display before the argument help (default: none)"
msgstr ""

#: ../../library/argparse.rst:158
msgid "epilog_ - Text to display after the argument help (default: none)"
msgstr ""

#: ../../library/argparse.rst:160
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"parents_ - En lista över :class:`ArgumentParser`-objekt vars argument också "
"ska inkluderas"

#: ../../library/argparse.rst:163
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - En klass för att anpassa hjälputmatningen"

#: ../../library/argparse.rst:165
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr ""
"prefix_chars_ - Uppsättningen av tecken som prefixar valfria argument "
"(standard: '-')"

#: ../../library/argparse.rst:168
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ - Uppsättningen tecken som prefixar filer från vilka "
"ytterligare argument ska läsas (standard: ``None``)"

#: ../../library/argparse.rst:171
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"argument_default_ - Det globala standardvärdet för argument (standard: "
"``None``)"

#: ../../library/argparse.rst:174
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"conflict_handler_ - Strategi för att lösa motstridiga tillval (vanligtvis "
"onödig)"

#: ../../library/argparse.rst:177
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ - Lägg till ett ``-h/--help``-alternativ till parsern (standard: "
"``True``)"

#: ../../library/argparse.rst:179
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is"
" unambiguous. (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:182
msgid ""
"exit_on_error_ - Determines whether or not ArgumentParser exits with error "
"info when an error occurs. (default: ``True``)"
msgstr ""

#: ../../library/argparse.rst:185
msgid "*allow_abbrev* parameter was added."
msgstr "*parametern allow_abbrev* har lagts till."

#: ../../library/argparse.rst:188
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"I tidigare versioner avaktiverade *allow_abbrev* också gruppering av korta "
"flaggor som ``-vv`` för att betyda ``-v -v``."

#: ../../library/argparse.rst:192
msgid "*exit_on_error* parameter was added."
msgstr "*parametern exit_on_error* har lagts till."

#: ../../library/argparse.rst:195 ../../library/argparse.rst:715
msgid "The following sections describe how each of these are used."
msgstr "I följande avsnitt beskrivs hur de olika funktionerna används."

#: ../../library/argparse.rst:199
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:201
msgid ""
"By default, :class:`ArgumentParser` objects use ``sys.argv[0]`` to determine"
" how to display the name of the program in help messages.  This default is "
"almost always desirable because it will make the help messages match how the"
" program was invoked on the command line.  For example, consider a file "
"named ``myprogram.py`` with the following code::"
msgstr ""

#: ../../library/argparse.rst:212
msgid ""
"The help for this program will display ``myprogram.py`` as the program name "
"(regardless of where the program was invoked from):"
msgstr ""

#: ../../library/argparse.rst:231
msgid ""
"To change this default behavior, another value can be supplied using the "
"``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""

#: ../../library/argparse.rst:241
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s``"
" format specifier."
msgstr ""

#: ../../library/argparse.rst:258
msgid "usage"
msgstr "användning"

#: ../../library/argparse.rst:260
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains::"
msgstr ""

#: ../../library/argparse.rst:276
msgid ""
"The default message can be overridden with the ``usage=`` keyword argument::"
msgstr ""

#: ../../library/argparse.rst:291
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"Formatangivelsen ``%(prog)s`` är tillgänglig för att fylla i programnamnet i"
" dina användningsmeddelanden."

#: ../../library/argparse.rst:296
msgid "description"
msgstr "beskrivning"

#: ../../library/argparse.rst:298
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments::"
msgstr ""

#: ../../library/argparse.rst:313
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"Som standard kommer beskrivningen att radbrytas så att den ryms inom det "
"angivna utrymmet.  För att ändra detta beteende, se argumentet "
"formatter_class_."

#: ../../library/argparse.rst:318
msgid "epilog"
msgstr "epilog"

#: ../../library/argparse.rst:320
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Vissa program vill visa ytterligare en beskrivning av programmet efter "
"beskrivningen av argumenten.  Sådan text kan anges med hjälp av argumentet "
"``epilog=`` till :class:`ArgumentParser`::"

#: ../../library/argparse.rst:337
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Precis som med argumentet description_ är texten ``epilog=`` som standard "
"radbrytande, men detta beteende kan justeras med argumentet formatter_class_"
" till :class:`ArgumentParser`."

#: ../../library/argparse.rst:343
msgid "parents"
msgstr "föräldrar"

#: ../../library/argparse.rst:345
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to "
":class:`ArgumentParser` can be used.  The ``parents=`` argument takes a list"
" of :class:`ArgumentParser` objects, collects all the positional and "
"optional actions from them, and adds these actions to the "
":class:`ArgumentParser` object being constructed::"
msgstr ""
"Ibland delar flera parsers en gemensam uppsättning argument. Istället för "
"att upprepa definitionerna av dessa argument, kan en enda parser med alla de"
" delade argumenten och som skickas till ``parents=`` argumentet till "
":class:`ArgumentParser` användas.  Argumentet ``parents=`` tar en lista med "
":class:`ArgumentParser`-objekt, samlar in alla positionella och valfria "
"åtgärder från dem och lägger till dessa åtgärder till "
":class:`ArgumentParser`-objektet som konstrueras::"

#: ../../library/argparse.rst:365
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Observera att de flesta överordnade parsers kommer att ange "
"``add_help=False``.  Annars kommer :class:`ArgumentParser` att se två "
"``-h/--help``-alternativ (ett i den överordnade och ett i den underordnade) "
"och ge upphov till ett fel."

#: ../../library/argparse.rst:370
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Du måste initialisera parsarna fullständigt innan du skickar dem via "
"``parents=``. Om du ändrar de överordnade parsarna efter den underordnade "
"parsern kommer dessa ändringar inte att återspeglas i den underordnade "
"parsern."

#: ../../library/argparse.rst:376
msgid "formatter_class"
msgstr "formatter_klass"

#: ../../library/argparse.rst:378
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such"
" classes:"
msgstr ""
":class:`ArgumentParser`-objekt gör det möjligt att anpassa "
"hjälpformateringen genom att ange en alternativ formateringsklass.  För "
"närvarande finns det fyra sådana klasser:"

#: ../../library/argparse.rst:387
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, "
":class:`ArgumentParser` objects line-wrap the description_ and epilog_ texts"
" in command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` och :class:`RawTextHelpFormatter` ger "
"mer kontroll över hur textbeskrivningar visas. Som standard radbryter "
":class:`ArgumentParser`-objekten texten description_ och epilog_ i "
"kommandoradshjälpmeddelanden::"

#: ../../library/argparse.rst:412
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Om du anger :class:`RawDescriptionHelpFormatter` som ``formatter_class=`` "
"indikerar det att description_ och epilog_ redan är korrekt formaterade och "
"inte ska radbrytas:"

#: ../../library/argparse.rst:438
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple new lines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""

#: ../../library/argparse.rst:443
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` lägger automatiskt till information "
"om standardvärden till varje argumenthjälpmeddelande::"

#: ../../library/argparse.rst:461
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` använder namnet på typ_argumentet för "
"varje argument som visningsnamn för dess värden (i stället för att använda "
"dest_ som den vanliga formateraren gör)::"

#: ../../library/argparse.rst:482
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:484
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g."
" for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""

#: ../../library/argparse.rst:496
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be"
" disallowed."
msgstr ""
"Argumentet ``prefix_chars=`` är som standard ``'-'``. Om du anger en "
"uppsättning tecken som inte innehåller ``-`` kommer alternativen "
"``-f/--foo`` inte att tillåtas."

#: ../../library/argparse.rst:502
msgid "fromfile_prefix_chars"
msgstr "frånfil_prefix_chars"

#: ../../library/argparse.rst:504
msgid ""
"Sometimes, for example when dealing with a particularly long argument list, "
"it may make sense to keep the list of arguments in a file rather than typing"
" it out at the command line.  If the ``fromfile_prefix_chars=`` argument is "
"given to the :class:`ArgumentParser` constructor, then arguments that start "
"with any of the specified characters will be treated as files, and will be "
"replaced by the arguments they contain.  For example::"
msgstr ""

#: ../../library/argparse.rst:518
msgid ""
"Arguments read from a file must by default be one per line (but see also "
":meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they"
" were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', "
"'-f', 'bar']``."
msgstr ""

#: ../../library/argparse.rst:524
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"Argumentet ``fromfile_prefix_chars=`` har standardvärdet ``None``, vilket "
"innebär att argument aldrig kommer att behandlas som filreferenser."

#: ../../library/argparse.rst:529
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:531
msgid ""
"Generally, argument defaults are specified either by passing a default to "
":meth:`~ArgumentParser.add_argument` or by calling the "
":meth:`~ArgumentParser.set_defaults` methods with a specific set of name-"
"value pairs.  Sometimes however, it may be useful to specify a single "
"parser-wide default for arguments.  This can be accomplished by passing the "
"``argument_default=`` keyword argument to :class:`ArgumentParser`.  For "
"example, to globally suppress attribute creation on "
":meth:`~ArgumentParser.parse_args` calls, we supply "
"``argument_default=SUPPRESS``::"
msgstr ""
"I allmänhet anges standardvärden för argument antingen genom att skicka ett "
"standardvärde till :meth:`~ArgumentParser.add_argument` eller genom att "
"anropa metoderna :meth:`~ArgumentParser.set_defaults` med en specifik "
"uppsättning namn-värde-par.  Ibland kan det dock vara användbart att ange en"
" enda parser-omfattande standard för argument.  Detta kan åstadkommas genom "
"att skicka nyckelordsargumentet ``argument_default=`` till "
":class:`ArgumentParser`.  Till exempel, för att globalt undertrycka "
"skapandet av attribut vid :meth:`~ArgumentParser.parse_args`-anrop, anger vi"
" ``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:551
msgid "allow_abbrev"
msgstr "tillåt_abbrev"

#: ../../library/argparse.rst:553
msgid ""
"Normally, when you pass an argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
":ref:`recognizes abbreviations <prefix-matching>` of long options."
msgstr ""
"Normalt, när du skickar en argumentlista till metoden "
":meth:`~ArgumentParser.parse_args` i en :class:`ArgumentParser`, "
":ref:``känner den igen förkortningar <prefix-matching>` av långa alternativ."

#: ../../library/argparse.rst:557
msgid ""
"This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Denna funktion kan avaktiveras genom att ställa in ``allow_abbrev`` till "
"``False``::"

#: ../../library/argparse.rst:570
msgid "conflict_handler"
msgstr "konflikt_hanterare"

#: ../../library/argparse.rst:572
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
":class:`ArgumentParser`-objekt tillåter inte två åtgärder med samma "
"alternativsträng.  Som standard gör :class:`ArgumentParser`-objekt ett "
"undantag om ett försök görs att skapa ett argument med en alternativsträng "
"som redan används::"

#: ../../library/argparse.rst:584
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any"
" older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument of"
" :class:`ArgumentParser`::"
msgstr ""
"Ibland (t.ex. när man använder parents_) kan det vara användbart att helt "
"enkelt åsidosätta äldre argument med samma alternativsträng.  För att få "
"detta beteende kan värdet ``'resolve'`` anges till argumentet "
"``conflict_handler=`` i :class:`ArgumentParser`::"

#: ../../library/argparse.rst:600
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old "
"``-f/--foo`` action is retained as the ``-f`` action, because only the "
"``--foo`` option string was overridden."
msgstr ""
"Observera att :class:`ArgumentParser`-objekt endast tar bort en åtgärd om "
"alla dess alternativsträngar är åsidosatta.  Så i exemplet ovan behålls den "
"gamla åtgärden ``-f/--foo`` som åtgärden ``-f``, eftersom endast "
"alternativsträngen ``--foo`` åsidosattes."

#: ../../library/argparse.rst:607
msgid "add_help"
msgstr "lägg till_hjälp"

#: ../../library/argparse.rst:609
msgid ""
"By default, ArgumentParser objects add an option which simply displays the "
"parser's help message. For example, consider a file named ``myprogram.py`` "
"containing the following code::"
msgstr ""

#: ../../library/argparse.rst:618
msgid ""
"If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser "
"help will be printed:"
msgstr ""

#: ../../library/argparse.rst:630
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to "
":class:`ArgumentParser`::"
msgstr ""
"Ibland kan det vara bra att avaktivera tillägget av detta hjälpalternativ. "
"Detta kan göras genom att ange ``False`` som argument för ``add_help=`` till"
" :class:`ArgumentParser`::"

#: ../../library/argparse.rst:642
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case "
"``-h`` and ``--help`` are not valid options.  In this case, the first "
"character in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"Hjälpalternativet är vanligtvis ``-h/--help``. Undantaget är om "
"``prefix_chars=`` anges och inte inkluderar ``-``, i vilket fall ``-h`` och "
"``--help`` inte är giltiga alternativ.  I detta fall används det första "
"tecknet i ``prefix_chars`` som prefix för hjälpalternativen::"

#: ../../library/argparse.rst:657
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:659
msgid ""
"Normally, when you pass an invalid argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
"will exit with error info."
msgstr ""

#: ../../library/argparse.rst:662
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr ""
"Om användaren vill fånga upp fel manuellt kan funktionen aktiveras genom att"
" ställa in ``exit_on_error`` till ``False``::"

#: ../../library/argparse.rst:679
msgid "The add_argument() method"
msgstr "Metoden add_argument()"

#: ../../library/argparse.rst:685
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Definiera hur ett enskilt kommandoradsargument ska tolkas.  Varje parameter "
"har sin egen mer detaljerade beskrivning nedan, men i korthet är de "
"följande:"

#: ../../library/argparse.rst:688
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` "
"or ``-f, --foo``."
msgstr ""

#: ../../library/argparse.rst:691
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ - Den grundläggande typ av åtgärd som ska vidtas när detta argument "
"påträffas på kommandoraden."

#: ../../library/argparse.rst:694
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr "nargs_ - Antalet kommandoradsargument som ska användas."

#: ../../library/argparse.rst:696
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ - Ett konstant värde som krävs för vissa action_- och nargs_-val."

#: ../../library/argparse.rst:698
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr ""
"default_ - Det värde som produceras om argumentet inte finns på "
"kommandoraden och om det inte finns i namnrymdsobjektet."

#: ../../library/argparse.rst:701
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr "type_ - Den typ som kommandoradsargumentet ska konverteras till."

#: ../../library/argparse.rst:703
msgid "choices_ - A container of the allowable values for the argument."
msgstr ""

#: ../../library/argparse.rst:705
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals"
" only)."
msgstr ""
"required_ - Om kommandoradsalternativet kan utelämnas eller inte (endast "
"optioner)."

#: ../../library/argparse.rst:708
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - En kort beskrivning av vad argumentet gör."

#: ../../library/argparse.rst:710
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - Ett namn för argumentet i användningsmeddelanden."

#: ../../library/argparse.rst:712
msgid ""
"dest_ - The name of the attribute to be added to the object returned by "
":meth:`parse_args`."
msgstr ""
"dest_ - Namnet på det attribut som ska läggas till i det objekt som "
"returneras av :meth:`parse_args`."

#: ../../library/argparse.rst:719
msgid "name or flags"
msgstr "namn eller flaggor"

#: ../../library/argparse.rst:721
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to "
":meth:`~ArgumentParser.add_argument` must therefore be either a series of "
"flags, or a simple argument name.  For example, an optional argument could "
"be created like::"
msgstr ""

#: ../../library/argparse.rst:730
msgid "while a positional argument could be created like::"
msgstr "medan ett positionellt argument kan skapas som::"

#: ../../library/argparse.rst:734
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"När :meth:`~ArgumentParser.parse_args` anropas kommer valfria argument att "
"identifieras med prefixet ``-``, och de återstående argumenten kommer att "
"antas vara positionella::"

#: ../../library/argparse.rst:751
msgid "action"
msgstr "åtgärd"

#: ../../library/argparse.rst:753
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
":class:`ArgumentParser`-objekt associerar kommandoradsargument med åtgärder."
"  Dessa åtgärder kan göra nästan vad som helst med de kommandoradsargument "
"som associeras med dem, även om de flesta åtgärder helt enkelt lägger till "
"ett attribut till det objekt som returneras av "
":meth:`~ArgumentParser.parse_args`.  Nyckelordsargumentet ``action`` anger "
"hur kommandoradsargumenten ska hanteras. De medföljande åtgärderna är:"

#: ../../library/argparse.rst:759
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action. For example::"
msgstr ""

#: ../../library/argparse.rst:767
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument.  The ``'store_const'`` action is most commonly used with optional "
"arguments that specify some sort of flag.  For example::"
msgstr ""

#: ../../library/argparse.rst:776
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively.  For example::"
msgstr ""

#: ../../library/argparse.rst:788
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list.  This is useful to allow an option to be specified multiple times. "
"Example usage::"
msgstr ""

#: ../../library/argparse.rst:797
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list.  (Note that the const_ keyword "
"argument defaults to ``None``.)  The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For"
" example::"
msgstr ""

#: ../../library/argparse.rst:809
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For"
" example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` - Detta räknar antalet gånger ett nyckelordsargument förekommer."
" Detta är t.ex. användbart för att öka ordrikedomen::"

#: ../../library/argparse.rst:817
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Observera att *standard* kommer att vara ``None`` om det inte uttryckligen "
"sätts till *0*."

#: ../../library/argparse.rst:819
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - Detta skriver ut ett komplett hjälpmeddelande för alla "
"alternativ i den aktuella parsern och avslutar sedan. Som standard läggs en "
"hjälpåtgärd automatiskt till i parsern. Se :class:`ArgumentParser` för "
"detaljer om hur utdata skapas."

#: ../../library/argparse.rst:824
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the "
":meth:`~ArgumentParser.add_argument` call, and prints version information "
"and exits when invoked::"
msgstr ""
"``'version'`` - Detta förväntar sig ett ``version=`` nyckelordsargument i "
":meth:`~ArgumentParser.add_argument`-anropet, och skriver ut "
"versionsinformation och avslutas när det anropas::"

#: ../../library/argparse.rst:834
msgid ""
"``'extend'`` - This stores a list, and extends each argument value to the "
"list. Example usage::"
msgstr ""

#: ../../library/argparse.rst:845
msgid ""
"You may also specify an arbitrary action by passing an Action subclass or "
"other object that implements the same interface. The "
"``BooleanOptionalAction`` is available in ``argparse`` and adds support for "
"boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""

#: ../../library/argparse.rst:858
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the ``__call__`` method and optionally the ``__init__`` and "
"``format_usage`` methods."
msgstr ""

#: ../../library/argparse.rst:862
msgid "An example of a custom action::"
msgstr "Ett exempel på en anpassad åtgärd::"

#: ../../library/argparse.rst:882
msgid "For more details, see :class:`Action`."
msgstr "För mer information, se :class:`Action`."

#: ../../library/argparse.rst:885
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:887
msgid ""
"ArgumentParser objects usually associate a single command-line argument with"
" a single action to be taken.  The ``nargs`` keyword argument associates a "
"different number of command-line arguments with a single action.  The "
"supported values are:"
msgstr ""

#: ../../library/argparse.rst:892
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (ett heltal).  ``N`` argument från kommandoraden kommer att samlas "
"ihop till en lista.  Till exempel::"

#: ../../library/argparse.rst:901
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Observera att ``nargs=1`` producerar en lista med ett objekt.  Detta skiljer"
" sig från standardinställningen, där varje objekt produceras för sig."

#: ../../library/argparse.rst:906
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Ett argument hämtas från kommandoraden om möjligt och produceras "
"som ett enda objekt.  Om det inte finns något argument på kommandoraden "
"produceras värdet från default_.  Observera att för valfria argument finns "
"det ytterligare ett fall - alternativsträngen finns men följs inte av ett "
"kommandoradsargument.  I detta fall kommer värdet från const_ att "
"produceras.  Några exempel för att illustrera detta::"

#: ../../library/argparse.rst:923
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"En av de vanligaste användningarna av ``nargs='?'`` är att tillåta valfria "
"inmatnings- och utdatafiler::"

#: ../../library/argparse.rst:940
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note"
" that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``.  Alla kommandoradsargument som finns samlas i en lista.  Observera "
"att det i allmänhet inte är särskilt meningsfullt att ha mer än ett "
"positionellt argument med ``nargs='*'``, men det är möjligt att ha flera "
"valfria argument med ``nargs='*'``.  Till exempel::"

#: ../../library/argparse.rst:954
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at"
" least one command-line argument present.  For example::"
msgstr ""

#: ../../library/argparse.rst:966
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced."
msgstr ""

#: ../../library/argparse.rst:972
msgid "const"
msgstr "konst"

#: ../../library/argparse.rst:974
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"Argumentet ``const`` i :meth:`~ArgumentParser.add_argument` används för att "
"hålla konstanta värden som inte läses från kommandoraden men som krävs för "
"de olika :class:`ArgumentParser`-åtgärderna.  De två vanligaste "
"användningarna av den är:"

#: ../../library/argparse.rst:978
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by "
":meth:`~ArgumentParser.parse_args`. See the action_ description for "
"examples."
msgstr ""

#: ../../library/argparse.rst:983
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"instead. See the nargs_ description for examples."
msgstr ""

#: ../../library/argparse.rst:990
msgid ""
"With the ``'store_const'`` and ``'append_const'`` actions, the ``const`` "
"keyword argument must be given.  For other actions, it defaults to ``None``."
msgstr ""

#: ../../library/argparse.rst:995
msgid "default"
msgstr "standard"

#: ../../library/argparse.rst:997
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of "
":meth:`~ArgumentParser.add_argument`, whose value defaults to ``None``, "
"specifies what value should be used if the command-line argument is not "
"present. For optional arguments, the ``default`` value is used when the "
"option string was not present at the command line::"
msgstr ""
"Alla valfria argument och vissa positionella argument kan utelämnas på "
"kommandoraden.  Nyckelordsargumentet ``default`` i "
":meth:`~ArgumentParser.add_argument`, vars standardvärde är ``None``, anger "
"vilket värde som ska användas om kommandoradsargumentet inte finns med. För "
"valfria argument används ``default``-värdet när alternativsträngen inte "
"fanns på kommandoraden::"

#: ../../library/argparse.rst:1011
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not over write it::"
msgstr ""

#: ../../library/argparse.rst:1019
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the "
":class:`Namespace` return value.  Otherwise, the parser uses the value as "
"is::"
msgstr ""
"Om ``default``-värdet är en sträng, analyserar parsern värdet som om det "
"vore ett kommandoradsargument.  I synnerhet tillämpar parsern ett typ_-"
"konverteringsargument, om det tillhandahålls, innan attributet ställs in på "
"returvärdet för :class:`Namespace`.  Annars använder parsern värdet som det "
"är::"

#: ../../library/argparse.rst:1030
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"För positionella argument med nargs_ lika med ``?`` eller ``*`` används "
"``default``-värdet om inget kommandoradsargument fanns::"

#: ../../library/argparse.rst:1041
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Om du anger ``default=argparse.SUPPRESS`` läggs inget attribut till om "
"kommandoradsargumentet inte fanns::"

#: ../../library/argparse.rst:1053
msgid "type"
msgstr "type"

#: ../../library/argparse.rst:1055
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"Som standard läser parsern in kommandoradsargument som enkla strängar. Men "
"ofta bör kommandoradssträngen istället tolkas som en annan typ, t.ex. en "
":class:`float` eller :class:`int`.  Nyckelordet ``type`` för "
":meth:`~ArgumentParser.add_argument` gör att alla nödvändiga typkontroller "
"och typkonverteringar kan utföras."

#: ../../library/argparse.rst:1061
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr ""
"Om nyckelordet type_ används tillsammans med nyckelordet default_ tillämpas "
"typomvandlaren endast om default är en sträng."

#: ../../library/argparse.rst:1064
msgid ""
"The argument to ``type`` can be any callable that accepts a single string. "
"If the function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or "
":exc:`ValueError`, the exception is caught and a nicely formatted error "
"message is displayed.  No other exception types are handled."
msgstr ""

#: ../../library/argparse.rst:1069
msgid "Common built-in types and functions can be used as type converters:"
msgstr "Vanliga inbyggda typer och funktioner kan användas som typomvandlare:"

#: ../../library/argparse.rst:1085
msgid "User defined functions can be used as well:"
msgstr "Användardefinierade funktioner kan också användas:"

#: ../../library/argparse.rst:1097
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"Funktionen :func:`bool` rekommenderas inte som typomvandlare.  Allt den gör "
"är att konvertera tomma strängar till ``False`` och icke-tomma strängar till"
" ``True``. Detta är vanligtvis inte vad som önskas."

#: ../../library/argparse.rst:1101
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"I allmänhet är nyckelordet ``type`` en bekvämlighet som bara bör användas "
"för enkla konverteringar som bara kan ge upphov till ett av de tre undantag "
"som stöds. Allt med mer intressant felhantering eller resurshantering bör "
"göras nedströms efter att argumenten har analyserats."

#: ../../library/argparse.rst:1106
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A "
":exc:`~json.JSONDecodeError` would not be well formatted and a "
":exc:`FileNotFound` exception would not be handled at all."
msgstr ""

#: ../../library/argparse.rst:1111
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses *FileType* and then a subsequent "
"argument fails, an error is reported but the file is not automatically "
"closed.  In this case, it would be better to wait until after the parser has"
" run and then use the :keyword:`with`-statement to manage the files."
msgstr ""

#: ../../library/argparse.rst:1117
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr ""
"För typkontrollprogram som bara kontrollerar mot en fast uppsättning värden "
"kan du överväga att använda nyckelordet choices_ i stället."

#: ../../library/argparse.rst:1122
msgid "choices"
msgstr "val"

#: ../../library/argparse.rst:1124
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a container object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""

#: ../../library/argparse.rst:1139
msgid ""
"Note that inclusion in the *choices* container is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices*"
" container should match the type_ specified::"
msgstr ""

#: ../../library/argparse.rst:1151
msgid ""
"Any container can be passed as the *choices* value, so :class:`list` "
"objects, :class:`set` objects, and custom containers are all supported."
msgstr ""

#: ../../library/argparse.rst:1154
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr ""
"Användning av :class:`enum.Enum` rekommenderas inte eftersom det är svårt "
"att kontrollera dess utseende i användnings-, hjälp- och felmeddelanden."

#: ../../library/argparse.rst:1157
msgid ""
"Formatted choices overrides the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""

#: ../../library/argparse.rst:1164
msgid "required"
msgstr "obligatoriskt"

#: ../../library/argparse.rst:1166
msgid ""
"In general, the :mod:`argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""

#: ../../library/argparse.rst:1179
msgid ""
"As the example shows, if an option is marked as ``required``, "
":meth:`~ArgumentParser.parse_args` will report an error if that option is "
"not present at the command line."
msgstr ""
"Som exemplet visar, om ett alternativ är markerat som ``required``, kommer "
":meth:`~ArgumentParser.parse_args` att rapportera ett fel om det "
"alternativet inte finns på kommandoraden."

#: ../../library/argparse.rst:1185
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Obligatoriska alternativ anses i allmänhet vara dålig form eftersom "
"användare förväntar sig att *alternativ* ska vara *valbara*, och därför bör "
"de undvikas när det är möjligt."

#: ../../library/argparse.rst:1190
msgid "help"
msgstr "hjälp"

#: ../../library/argparse.rst:1192
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument::"
msgstr ""

#: ../../library/argparse.rst:1212
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword"
" arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"Strängarna ``help`` kan innehålla olika formatspecifikatorer för att undvika"
" upprepning av t.ex. programnamnet eller argumentet default_.  De "
"tillgängliga specifikatorerna inkluderar programnamnet, ``%(prog)s`` och de "
"flesta nyckelordsargument till :meth:`~ArgumentParser.add_argument`, t.ex. "
"``%(default)s``, ``%(type)s``, etc:"

#: ../../library/argparse.rst:1229
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Eftersom hjälpsträngen stöder %-f-matrisering måste du, om du vill att en "
"bokstavlig ``%`` ska visas i hjälpsträngen, escapen den som ``%%``."

#: ../../library/argparse.rst:1232
msgid ""
":mod:`argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""

#: ../../library/argparse.rst:1245
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1247
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, ArgumentParser objects use the"
" dest_ value as the \"name\" of each object.  By default, for positional "
"argument actions, the dest_ value is used directly, and for optional "
"argument actions, the dest_ value is uppercased.  So, a single positional "
"argument with ``dest='bar'`` will be referred to as ``bar``. A single "
"optional argument ``--foo`` that should be followed by a single command-line"
" argument will be referred to as ``FOO``.  An example::"
msgstr ""

#: ../../library/argparse.rst:1271
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Ett alternativt namn kan anges med ``metavar``::"

#: ../../library/argparse.rst:1288
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Observera att ``metavar`` endast ändrar det *visade* namnet - attributets "
"namn på :meth:`~ArgumentParser.parse_args`-objektet bestäms fortfarande av "
"dest_-värdet."

#: ../../library/argparse.rst:1292
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Olika värden på ``nargs`` kan göra att metavar används flera gånger. Om man "
"ger en tupel till ``metavar`` anges en annan visning för vart och ett av "
"argumenten::"

#: ../../library/argparse.rst:1309
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1311
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of "
":meth:`~ArgumentParser.add_argument`.  For positional argument actions, "
"``dest`` is normally supplied as the first argument to "
":meth:`~ArgumentParser.add_argument`::"
msgstr ""
"De flesta :class:`ArgumentParser`-åtgärder lägger till ett värde som ett "
"attribut för det objekt som returneras av "
":meth:`~ArgumentParser.parse_args`.  Namnet på detta attribut bestäms av "
"nyckelordsargumentet ``dest`` i :meth:`~ArgumentParser.add_argument`.  För "
"åtgärder med positionella argument anges ``dest`` normalt som det första "
"argumentet till :meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1323
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"För valfria argumentåtgärder härleds värdet av ``dest`` normalt från "
"alternativsträngarna. :class:`ArgumentParser` genererar värdet av ``dest`` "
"genom att ta den första långa alternativsträngen och ta bort den inledande "
"``--``-strängen.  Om inga långa alternativsträngar har angetts, kommer "
"``dest`` att härledas från den första korta alternativsträngen genom att ta "
"bort det inledande tecknet ``-``.  Alla interna ``-``-tecken konverteras "
"till ``_``-tecken för att säkerställa att strängen är ett giltigt "
"attributnamn.  Exemplen nedan illustrerar detta beteende::"

#: ../../library/argparse.rst:1340
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` tillåter att ett anpassat attributnamn anges::"

#: ../../library/argparse.rst:1348
msgid "Action classes"
msgstr "Åtgärdsklasser"

#: ../../library/argparse.rst:1350
msgid ""
"Action classes implement the Action API, a callable which returns a callable"
" which processes arguments from the command-line. Any object which follows "
"this API may be passed as the ``action`` parameter to :meth:`add_argument`."
msgstr ""

#: ../../library/argparse.rst:1359
msgid ""
"Action objects are used by an ArgumentParser to represent the information "
"needed to parse a single argument from one or more strings from the command "
"line. The Action class must accept the two positional arguments plus any "
"keyword arguments passed to :meth:`ArgumentParser.add_argument` except for "
"the ``action`` itself."
msgstr ""

#: ../../library/argparse.rst:1365
msgid ""
"Instances of Action (or return value of any callable to the ``action`` "
"parameter) should have attributes \"dest\", \"option_strings\", \"default\","
" \"type\", \"required\", \"help\", etc. defined. The easiest way to ensure "
"these attributes are defined is to call ``Action.__init__``."
msgstr ""

#: ../../library/argparse.rst:1370
msgid ""
"Action instances should be callable, so subclasses must override the "
"``__call__`` method, which should accept four parameters:"
msgstr ""

#: ../../library/argparse.rst:1373
msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr ""

#: ../../library/argparse.rst:1375
msgid ""
"``namespace`` - The :class:`Namespace` object that will be returned by "
":meth:`~ArgumentParser.parse_args`.  Most actions add an attribute to this "
"object using :func:`setattr`."
msgstr ""

#: ../../library/argparse.rst:1379
msgid ""
"``values`` - The associated command-line arguments, with any type "
"conversions applied.  Type conversions are specified with the type_ keyword "
"argument to :meth:`~ArgumentParser.add_argument`."
msgstr ""

#: ../../library/argparse.rst:1383
msgid ""
"``option_string`` - The option string that was used to invoke this action. "
"The ``option_string`` argument is optional, and will be absent if the action"
" is associated with a positional argument."
msgstr ""

#: ../../library/argparse.rst:1387
msgid ""
"The ``__call__`` method may perform arbitrary actions, but will typically "
"set attributes on the ``namespace`` based on ``dest`` and ``values``."
msgstr ""

#: ../../library/argparse.rst:1390
msgid ""
"Action subclasses can define a ``format_usage`` method that takes no "
"argument and return a string which will be used when printing the usage of "
"the program. If such method is not provided, a sensible default will be "
"used."
msgstr ""

#: ../../library/argparse.rst:1395
msgid "The parse_args() method"
msgstr "Metoden parse_args()"

#: ../../library/argparse.rst:1399
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""
"Konverterar argumentsträngar till objekt och tilldelar dem som attribut för "
"namnrymden.  Returnera det ifyllda namnområdet."

#: ../../library/argparse.rst:1402
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for "
":meth:`add_argument` for details."
msgstr ""

#: ../../library/argparse.rst:1406
msgid ""
"args_ - List of strings to parse.  The default is taken from "
":data:`sys.argv`."
msgstr ""
"args_ - Lista över strängar som ska analyseras.  Standardvärdet hämtas från "
":data:`sys.argv`."

#: ../../library/argparse.rst:1409
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty "
":class:`Namespace` object."
msgstr ""
"namespace_ - Ett objekt som tar emot attributen.  Standard är ett nytt tomt "
":class:`Namespace`-objekt."

#: ../../library/argparse.rst:1414
msgid "Option value syntax"
msgstr "Syntax för optionsvärde"

#: ../../library/argparse.rst:1416
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
"Metoden :meth:`~ArgumentParser.parse_args` stöder flera sätt att ange värdet"
" på ett alternativ (om det tar ett sådant).  I det enklaste fallet skickas "
"alternativet och dess värde som två separata argument::"

#: ../../library/argparse.rst:1428
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using"
" ``=`` to separate them::"
msgstr ""
"För långa alternativ (alternativ med namn som är längre än ett enda tecken) "
"kan alternativet och värdet också skickas som ett enda argument på "
"kommandoraden, med ``=`` för att separera dem::"

#: ../../library/argparse.rst:1435
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""
"För korta alternativ (alternativ som bara är ett tecken långa) kan "
"alternativet och dess värde sammankopplas::"

#: ../../library/argparse.rst:1441
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"Flera korta alternativ kan sammanfogas med hjälp av ett enda prefix ``-``, "
"så länge som endast det sista alternativet (eller inget av dem) kräver ett "
"värde::"

#: ../../library/argparse.rst:1453
msgid "Invalid arguments"
msgstr "Ogiltiga argument"

#: ../../library/argparse.rst:1455
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid"
" options, wrong number of positional arguments, etc.  When it encounters "
"such an error, it exits and prints the error along with a usage message::"
msgstr ""
"När kommandoraden analyseras kontrollerar :meth:`~ArgumentParser.parse_args`"
" en mängd olika fel, inklusive tvetydiga alternativ, ogiltiga typer, "
"ogiltiga alternativ, fel antal positionella argument, etc.  När den stöter "
"på ett sådant fel avslutas den och skriver ut felet tillsammans med ett "
"användningsmeddelande::"

#: ../../library/argparse.rst:1481
msgid "Arguments containing ``-``"
msgstr "Argument som innehåller ``-``"

#: ../../library/argparse.rst:1483
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
"Metoden :meth:`~ArgumentParser.parse_args` försöker ge felmeddelanden när "
"det är uppenbart att användaren har gjort ett misstag, men vissa situationer"
" är i sig tvetydiga.  Till exempel kan kommandoradsargumentet ``-1`` "
"antingen vara ett försök att ange ett alternativ eller ett försök att ange "
"ett positionsargument. Metoden :meth:`~ArgumentParser.parse_args` är "
"försiktig här: positionella argument får endast börja med ``-`` om de ser ut"
" som negativa tal och det inte finns några alternativ i parsern som ser ut "
"som negativa tal::"

#: ../../library/argparse.rst:1521
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"Om du har positionella argument som måste börja med ``-`` och inte ser ut "
"som negativa tal, kan du infoga pseudoargumentet ``'--'`` som talar om för "
":meth:`~ArgumentParser.parse_args` att allt efter det är ett positionellt "
"argument::"

#: ../../library/argparse.rst:1532
msgid "Argument abbreviations (prefix matching)"
msgstr "Argumentförkortningar (prefixmatchning)"

#: ../../library/argparse.rst:1534
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
"Metoden :meth:`~ArgumentParser.parse_args` :ref:``by default <allow_abbrev>`"
" tillåter att långa alternativ förkortas till ett prefix, om förkortningen "
"är otvetydig (prefixet matchar ett unikt alternativ)::"

#: ../../library/argparse.rst:1549
msgid ""
"An error is produced for arguments that could produce more than one options."
" This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""
"Ett felmeddelande visas för argument som kan ge mer än ett alternativ. Denna"
" funktion kan avaktiveras genom att ställa in :ref:`allow_abbrev` till "
"``False``."

#: ../../library/argparse.rst:1555
msgid "Beyond ``sys.argv``"
msgstr "Bortom ``sys.argv``"

#: ../../library/argparse.rst:1557
msgid ""
"Sometimes it may be useful to have an ArgumentParser parse arguments other "
"than those of :data:`sys.argv`.  This can be accomplished by passing a list "
"of strings to :meth:`~ArgumentParser.parse_args`.  This is useful for "
"testing at the interactive prompt::"
msgstr ""

#: ../../library/argparse.rst:1577
msgid "The Namespace object"
msgstr "Namespace-objektet"

#: ../../library/argparse.rst:1581
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create"
" an object holding attributes and return it."
msgstr ""
"Enkel klass som används som standard av :meth:`~ArgumentParser.parse_args` "
"för att skapa ett objekt som innehåller attribut och returnera det."

#: ../../library/argparse.rst:1584
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"Den här klassen är avsiktligt enkel, bara en :class:`object`-underklass med "
"en läsbar strängrepresentation. Om du föredrar att ha en diktliknande vy "
"över attributen kan du använda Pythons standardidiom, :func:`vars`::"

#: ../../library/argparse.rst:1594
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object."
"  This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"Det kan också vara användbart att låta en :class:`ArgumentParser` tilldela "
"attribut till ett redan existerande objekt, snarare än ett nytt "
":class:`Namespace`-objekt.  Detta kan uppnås genom att ange nyckelordet "
"``namespace=`` argument::"

#: ../../library/argparse.rst:1610
msgid "Other utilities"
msgstr "Andra verktyg"

#: ../../library/argparse.rst:1613
msgid "Sub-commands"
msgstr "Underkommandon"

#: ../../library/argparse.rst:1620
msgid ""
"Many programs split up their functionality into a number of sub-commands, "
"for example, the ``svn`` program can invoke sub-commands like ``svn "
"checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality "
"this way can be a particularly good idea when a program performs several "
"different functions which require different kinds of command-line arguments."
" :class:`ArgumentParser` supports the creation of such sub-commands with the"
" :meth:`add_subparsers` method.  The :meth:`add_subparsers` method is "
"normally called with no arguments and returns a special action object.  This"
" object has a single method, :meth:`~ArgumentParser.add_parser`, which takes"
" a command name and any :class:`ArgumentParser` constructor arguments, and "
"returns an :class:`ArgumentParser` object that can be modified as usual."
msgstr ""

#: ../../library/argparse.rst:1632
msgid "Description of parameters:"
msgstr "Beskrivning av parametrar:"

#: ../../library/argparse.rst:1634
msgid ""
"title - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""

#: ../../library/argparse.rst:1638
msgid ""
"description - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""

#: ../../library/argparse.rst:1641
msgid ""
"prog - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""

#: ../../library/argparse.rst:1645
msgid ""
"parser_class - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. ArgumentParser)"
msgstr ""

#: ../../library/argparse.rst:1648
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""
"action_ - den grundläggande typ av åtgärd som ska vidtas när detta argument "
"påträffas på kommandoraden"

#: ../../library/argparse.rst:1651
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""
"dest_ - namnet på det attribut under vilket namnet på underkommandot lagras;"
" som standard ``None`` och inget värde lagras"

#: ../../library/argparse.rst:1654
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""
"required_ - Huruvida ett underkommando måste anges eller inte, som standard "
"``False`` (tillagd i 3.7)"

#: ../../library/argparse.rst:1657
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""
"help_ - hjälp för sub-parser-gruppen i hjälputmatningen, som standard "
"``None``"

#: ../../library/argparse.rst:1659
msgid ""
"metavar_ - string presenting available sub-commands in help; by default it "
"is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}"
msgstr ""

#: ../../library/argparse.rst:1662
msgid "Some example usage::"
msgstr "Några exempel på användning::"

#: ../../library/argparse.rst:1683
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"Observera att det objekt som returneras av :meth:`parse_args` endast "
"innehåller attribut för huvudparsern och den underparser som valdes på "
"kommandoraden (och inte några andra underparsers).  Så i exemplet ovan, när "
"kommandot ``a`` anges, är det bara attributen ``foo`` och ``bar`` som finns,"
" och när kommandot ``b`` anges, är det bara attributen ``foo`` och ``baz`` "
"som finns."

#: ../../library/argparse.rst:1690
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument"
" to :meth:`add_parser` as above.)"
msgstr ""

#: ../../library/argparse.rst:1726
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
"Metoden :meth:`add_subparsers` har även stöd för nyckelordsargumenten "
"``title`` och ``description``.  När något av dem finns med visas kommandona "
"för underparsaren i en egen grupp i hjälputmatningen.  Till exempel::"

#: ../../library/argparse.rst:1747
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""

#: ../../library/argparse.rst:1758
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""

#: ../../library/argparse.rst:1795
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"På så sätt kan du låta :meth:`parse_args` göra jobbet att anropa lämplig "
"funktion efter att parsningen av argumenten är klar.  Att associera "
"funktioner med åtgärder på det här sättet är vanligtvis det enklaste sättet "
"att hantera olika åtgärder för var och en av dina subparsers.  Men om det är"
" nödvändigt att kontrollera namnet på den subparsare som anropades, fungerar"
" nyckelordsargumentet ``dest`` till :meth:`add_subparsers`-anropet::"

#: ../../library/argparse.rst:1811
msgid "New *required* keyword argument."
msgstr ""

#: ../../library/argparse.rst:1816
msgid "FileType objects"
msgstr "FileType-objekt"

#: ../../library/argparse.rst:1820
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type"
" argument of :meth:`ArgumentParser.add_argument`.  Arguments that have "
":class:`FileType` objects as their type will open command-line arguments as "
"files with the requested modes, buffer sizes, encodings and error handling "
"(see the :func:`open` function for more details)::"
msgstr ""
"Fabriken :class:`FileType` skapar objekt som kan skickas till typargumentet "
"i :meth:`ArgumentParser.add_argument`.  Argument som har "
":class:`FileType`-objekt som typ kommer att öppna kommandoradsargument som "
"filer med de begärda lägena, buffertstorlekarna, kodningarna och "
"felhanteringen (se funktionen :func:`open` för mer information)::"

#: ../../library/argparse.rst:1832
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into ``sys.stdin`` for readable :class:`FileType` objects and "
"``sys.stdout`` for writable :class:`FileType` objects::"
msgstr ""

#: ../../library/argparse.rst:1841
msgid "The *encodings* and *errors* keyword arguments."
msgstr ""

#: ../../library/argparse.rst:1846
msgid "Argument groups"
msgstr "Argumentgrupper"

#: ../../library/argparse.rst:1850
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"optional arguments\" when displaying help "
"messages. When there is a better conceptual grouping of arguments than this "
"default one, appropriate groups can be created using the "
":meth:`add_argument_group` method::"
msgstr ""

#: ../../library/argparse.rst:1867
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which"
" has an :meth:`~ArgumentParser.add_argument` method just like a regular "
":class:`ArgumentParser`.  When an argument is added to the group, the parser"
" treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""

#: ../../library/argparse.rst:1893
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Observera att alla argument som inte finns i dina användardefinierade "
"grupper hamnar tillbaka i de vanliga avsnitten \"positionella argument\" och"
" \"valfria argument\"."

#: ../../library/argparse.rst:1898
msgid "Mutual exclusion"
msgstr "Ömsesidigt uteslutande"

#: ../../library/argparse.rst:1902
msgid ""
"Create a mutually exclusive group. :mod:`argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""

#: ../../library/argparse.rst:1918
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
"Metoden :meth:`add_mutually_exclusive_group` accepterar också ett "
"*required*-argument, för att ange att minst ett av de ömsesidigt uteslutande"
" argumenten krävs::"

#: ../../library/argparse.rst:1930
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of "
":meth:`~ArgumentParser.add_argument_group`."
msgstr ""

#: ../../library/argparse.rst:1936
msgid "Parser defaults"
msgstr "Standardvärden för parser"

#: ../../library/argparse.rst:1940
msgid ""
"Most of the time, the attributes of the object returned by "
":meth:`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"För det mesta kommer attributen för det objekt som returneras av "
":meth:`parse_args` att vara helt bestämda genom att inspektera "
"kommandoradsargumenten och argumentåtgärderna. :meth:`set_defaults` gör att "
"några ytterligare attribut som bestäms utan någon inspektion av "
"kommandoraden kan läggas till::"

#: ../../library/argparse.rst:1952
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Observera att standardvärden på parsernivå alltid åsidosätter standardvärden"
" på argumentnivå::"

#: ../../library/argparse.rst:1960
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"Standardvärden på parser-nivå kan vara särskilt användbara när man arbetar "
"med flera parsers.  Se metoden :meth:`~ArgumentParser.add_subparsers` för "
"ett exempel på denna typ."

#: ../../library/argparse.rst:1966
msgid ""
"Get the default value for a namespace attribute, as set by either "
":meth:`~ArgumentParser.add_argument` or by "
":meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Hämta standardvärdet för ett namnrymdsattribut, som anges antingen av "
":meth:`~ArgumentParser.add_argument` eller av "
":meth:`~ArgumentParser.set_defaults`::"

#: ../../library/argparse.rst:1977
msgid "Printing help"
msgstr "Hjälp med utskrift"

#: ../../library/argparse.rst:1979
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"I de flesta typiska applikationer kommer :meth:`~ArgumentParser.parse_args` "
"att ta hand om formateringen och skriva ut eventuella användnings- eller "
"felmeddelanden.  Det finns dock flera formateringsmetoder tillgängliga:"

#: ../../library/argparse.rst:1985
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"Skriv ut en kort beskrivning av hur :class:`ArgumentParser` ska anropas på "
"kommandoraden.  Om *file* är ``None``, antas :data:`sys.stdout`."

#: ../../library/argparse.rst:1991
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"Skriv ut ett hjälpmeddelande, inklusive programanvändning och information om"
" de argument som registrerats med :class:`ArgumentParser`.  Om *file* är "
"``None``, antas :data:`sys.stdout`."

#: ../../library/argparse.rst:1995
msgid ""
"There are also variants of these methods that simply return a string instead"
" of printing it:"
msgstr ""
"Det finns också varianter av dessa metoder som helt enkelt returnerar en "
"sträng i stället för att skriva ut den:"

#: ../../library/argparse.rst:2000
msgid ""
"Return a string containing a brief description of how the "
":class:`ArgumentParser` should be invoked on the command line."
msgstr ""
"Returnerar en sträng som innehåller en kort beskrivning av hur "
":class:`ArgumentParser` ska anropas på kommandoraden."

#: ../../library/argparse.rst:2005
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Returnerar en sträng som innehåller ett hjälpmeddelande, inklusive "
"programanvändning och information om de argument som registrerats med "
":class:`ArgumentParser`."

#: ../../library/argparse.rst:2010
msgid "Partial parsing"
msgstr "Partiell parsning"

#: ../../library/argparse.rst:2014
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""

#: ../../library/argparse.rst:2030
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to "
":meth:`parse_known_args`. The parser may consume an option even if it's just"
" a prefix of one of its known options, instead of leaving it in the "
"remaining arguments list."
msgstr ""

#: ../../library/argparse.rst:2037
msgid "Customizing file parsing"
msgstr "Anpassa filparsning"

#: ../../library/argparse.rst:2041
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword"
" argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"Argument som läses från en fil (se nyckelordsargumentet "
"*fromfile_prefix_chars* till konstruktören :class:`ArgumentParser`) läses "
"ett argument per rad. :meth:`convert_arg_line_to_args` kan åsidosättas för "
"mer avancerad läsning."

#: ../../library/argparse.rst:2046
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"Denna metod tar ett enda argument *arg_line* som är en sträng som läses från"
" argumentfilen.  Den returnerar en lista med argument som tolkats från denna"
" sträng. Metoden anropas en gång per rad som läses från argumentfilen, i "
"ordning."

#: ../../library/argparse.rst:2050
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""
"En användbar överstyrning av denna metod är en som behandlar varje "
"mellanslagsseparerat ord som ett argument.  Följande exempel visar hur man "
"gör detta::"

#: ../../library/argparse.rst:2059
msgid "Exiting methods"
msgstr "Spännande metoder"

#: ../../library/argparse.rst:2063
msgid ""
"This method terminates the program, exiting with the specified *status* and,"
" if given, it prints a *message* before that. The user can override this "
"method to handle these steps differently::"
msgstr ""

#: ../../library/argparse.rst:2075
msgid ""
"This method prints a usage message including the *message* to the standard "
"error and terminates the program with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:2080
msgid "Intermixed parsing"
msgstr "Intermixad parsning"

#: ../../library/argparse.rst:2085
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with"
" positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this"
" parsing style."
msgstr ""
"Ett antal Unix-kommandon tillåter användaren att blanda valfria argument med"
" positionella argument.  Metoderna "
":meth:`~ArgumentParser.parse_intermixed_args` och "
":meth:`~ArgumentParser.parse_known_intermixed_args` stöder denna "
"parsningsstil."

#: ../../library/argparse.rst:2090
msgid ""
"These parsers do not support all the argparse features, and will raise "
"exceptions if unsupported features are used.  In particular, subparsers, "
"``argparse.REMAINDER``, and mutually exclusive groups that include both "
"optionals and positionals are not supported."
msgstr ""

#: ../../library/argparse.rst:2095
msgid ""
"The following example shows the difference between "
":meth:`~ArgumentParser.parse_known_args` and "
":meth:`~ArgumentParser.parse_intermixed_args`: the former returns ``['2', "
"'3']`` as unparsed arguments, while the latter collects all the positionals "
"into ``rest``.  ::"
msgstr ""
"Följande exempel visar skillnaden mellan "
":meth:`~ArgumentParser.parse_known_args` och "
":meth:`~ArgumentParser.parse_intermixed_args`: den förra returnerar ``['2', "
"'3']`` som oanalyserade argument, medan den senare samlar alla positionaler "
"i ``rest``. ::"

#: ../../library/argparse.rst:2110
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple"
" containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returnerar en tupel med "
"två objekt som innehåller den fyllda namnrymden och listan över återstående "
"argumentsträngar. :meth:`~ArgumentParser.parse_intermixed_args` ger upphov "
"till ett fel om det finns några återstående oanalyserade argumentsträngar."

#: ../../library/argparse.rst:2120
msgid "Upgrading optparse code"
msgstr ""

#: ../../library/argparse.rst:2122
msgid ""
"Originally, the :mod:`argparse` module had attempted to maintain "
"compatibility with :mod:`optparse`.  However, :mod:`optparse` was difficult "
"to extend transparently, particularly with the changes required to support "
"the new ``nargs=`` specifiers and better usage messages.  When most "
"everything in :mod:`optparse` had either been copy-pasted over or monkey-"
"patched, it no longer seemed practical to try to maintain the backwards "
"compatibility."
msgstr ""

#: ../../library/argparse.rst:2129
msgid ""
"The :mod:`argparse` module improves on the standard library :mod:`optparse` "
"module in a number of ways including:"
msgstr ""

#: ../../library/argparse.rst:2132
msgid "Handling positional arguments."
msgstr "Hantering av positionella argument."

#: ../../library/argparse.rst:2133
msgid "Supporting sub-commands."
msgstr ""

#: ../../library/argparse.rst:2134
msgid "Allowing alternative option prefixes like ``+`` and ``/``."
msgstr "Tillåter alternativa optionsprefix som ``+`` och ``/``."

#: ../../library/argparse.rst:2135
msgid "Handling zero-or-more and one-or-more style arguments."
msgstr "Hantering av noll-eller-mer- och ett-eller-mer-stilargument."

#: ../../library/argparse.rst:2136
msgid "Producing more informative usage messages."
msgstr "Producera mer informativa användningsmeddelanden."

#: ../../library/argparse.rst:2137
msgid "Providing a much simpler interface for custom ``type`` and ``action``."
msgstr ""
"Tillhandahåller ett mycket enklare gränssnitt för anpassade ``type`` och "
"``action``."

#: ../../library/argparse.rst:2139
msgid "A partial upgrade path from :mod:`optparse` to :mod:`argparse`:"
msgstr ""

#: ../../library/argparse.rst:2141
msgid ""
"Replace all :meth:`optparse.OptionParser.add_option` calls with "
":meth:`ArgumentParser.add_argument` calls."
msgstr ""
"Ersätt alla :meth:`optparse.OptionParser.add_option`\\-anrop med "
":meth:`ArgumentParser.add_argument`\\-anrop."

#: ../../library/argparse.rst:2144
msgid ""
"Replace ``(options, args) = parser.parse_args()`` with ``args = "
"parser.parse_args()`` and add additional :meth:`ArgumentParser.add_argument`"
" calls for the positional arguments. Keep in mind that what was previously "
"called ``options``, now in the :mod:`argparse` context is called ``args``."
msgstr ""
"Ersätt ``(options, args) = parser.parse_args()`` med ``args = "
"parser.parse_args()`` och lägg till ytterligare "
":meth:`ArgumentParser.add_argument`\\-anrop för de positionella argumenten. "
"Tänk på att det som tidigare kallades ``options`` nu i "
":mod:`argparse`\\-kontexten kallas ``args``."

#: ../../library/argparse.rst:2149
msgid ""
"Replace :meth:`optparse.OptionParser.disable_interspersed_args` by using "
":meth:`~ArgumentParser.parse_intermixed_args` instead of "
":meth:`~ArgumentParser.parse_args`."
msgstr ""
"Ersätt :meth:`optparse.OptionParser.disable_interspersed_args` genom att "
"använda :meth:`~ArgumentParser.parse_intermixed_args` istället för "
":meth:`~ArgumentParser.parse_args`."

#: ../../library/argparse.rst:2153
msgid ""
"Replace callback actions and the ``callback_*`` keyword arguments with "
"``type`` or ``action`` arguments."
msgstr ""
"Ersätt callback-åtgärder och nyckelordsargumenten ``callback_*`` med "
"argumenten ``type`` eller ``action``."

#: ../../library/argparse.rst:2156
msgid ""
"Replace string names for ``type`` keyword arguments with the corresponding "
"type objects (e.g. int, float, complex, etc)."
msgstr ""
"Ersätt strängnamn för ``type`` nyckelordsargument med motsvarande typobjekt "
"(t.ex. int, float, complex, etc)."

#: ../../library/argparse.rst:2159
msgid ""
"Replace :class:`optparse.Values` with :class:`Namespace` and "
":exc:`optparse.OptionError` and :exc:`optparse.OptionValueError` with "
":exc:`ArgumentError`."
msgstr ""
"Ersätt :class:`optparse.Values` med :class:`Namespace` och "
":exc:`optparse.OptionError` och :exc:`optparse.OptionValueError` med "
":exc:`ArgumentError`."

#: ../../library/argparse.rst:2163
msgid ""
"Replace strings with implicit arguments such as ``%default`` or ``%prog`` "
"with the standard Python syntax to use dictionaries to format strings, that "
"is, ``%(default)s`` and ``%(prog)s``."
msgstr ""
"Ersätt strängar med implicita argument som ``%default`` eller ``%prog`` med "
"Pythons standardsyntax för att använda lexikon för att formatera strängar, "
"det vill säga ``%(default)s`` och ``%(prog)s``."

#: ../../library/argparse.rst:2167
msgid ""
"Replace the OptionParser constructor ``version`` argument with a call to "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``."
msgstr ""
"Ersätt OptionParser-konstruktorns argument ``version`` med ett anrop till "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``"
