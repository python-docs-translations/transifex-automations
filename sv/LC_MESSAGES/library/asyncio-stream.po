# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr "Streams"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**Källkod:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""
"Streams är async/await-ready-primitiver på hög nivå för att arbeta med "
"nätverksanslutningar.  Streams gör det möjligt att skicka och ta emot data "
"utan att använda callbacks eller lågnivåprotokoll och transporter."

#: ../../library/asyncio-stream.rst:19
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""
"Här är ett exempel på en TCP-ekoklient som skrivits med hjälp av asyncio-"
"strömmar::"

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr "Se även avsnittet `Examples`_ nedan."

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr "Strömfunktioner"

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""
"Följande asynciofunktioner på högsta nivå kan användas för att skapa och "
"arbeta med strömmar:"

#: ../../library/asyncio-stream.rst:57
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""
"Upprätta en nätverksanslutning och returnera ett par objekt av typen "
"``(reader, writer)``."

#: ../../library/asyncio-stream.rst:60
msgid ""
"The returned *reader* and *writer* objects are instances of :class:"
"`StreamReader` and :class:`StreamWriter` classes."
msgstr ""
"De returnerade *reader*- och *writer*-objekten är instanser av klasserna :"
"class:`StreamReader` och :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:63
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this function is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:66 ../../library/asyncio-stream.rst:103
msgid ""
"*limit* determines the buffer size limit used by the returned :class:"
"`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""
"*limit* bestämmer den buffertstorleksgräns som används av den returnerade :"
"class:`StreamReader`\\-instansen.  Som standard är *limit* inställd på 64 "
"KiB."

#: ../../library/asyncio-stream.rst:70
msgid ""
"The rest of the arguments are passed directly to :meth:`loop."
"create_connection`."
msgstr ""
"Resten av argumenten skickas direkt till :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:75 ../../library/asyncio-stream.rst:132
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:79
msgid "Added *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:89
msgid "Start a socket server."
msgstr "Starta en socket-server."

#: ../../library/asyncio-stream.rst:91
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""
"Callbacken *client_connected_cb* anropas när en ny klientanslutning "
"upprättas.  Den får ett par ``(reader, writer)`` som två argument, instanser "
"av klasserna :class:`StreamReader` och :class:`StreamWriter`."

#: ../../library/asyncio-stream.rst:96
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""
"*client_connected_cb* kan vara en vanlig callable eller en :ref:`coroutine-"
"funktion <coroutine>`; om det är en coroutine-funktion kommer den "
"automatiskt att schemaläggas som en :class:`Task`."

#: ../../library/asyncio-stream.rst:100
msgid ""
"The *loop* argument is optional and can always be determined automatically "
"when this method is awaited from a coroutine."
msgstr ""

#: ../../library/asyncio-stream.rst:107
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr "Resten av argumenten skickas direkt till :meth:`loop.create_server`."

#: ../../library/asyncio-stream.rst:112 ../../library/asyncio-stream.rst:154
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:116
msgid "Unix Sockets"
msgstr "Unix Sockets"

#: ../../library/asyncio-stream.rst:121
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""
"Upprätta en Unix-socketanslutning och returnera ett par ``(reader, writer)``."

#: ../../library/asyncio-stream.rst:124
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr "Liknar :func:`open_connection` men fungerar på Unix-sockets."

#: ../../library/asyncio-stream.rst:126
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr "Se även dokumentationen av :meth:`loop.create_unix_connection`."

#: ../../library/asyncio-stream.rst:129 ../../library/asyncio-stream.rst:151
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: ../../library/asyncio-stream.rst:136
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:144
msgid "Start a Unix socket server."
msgstr "Starta en Unix-socket-server."

#: ../../library/asyncio-stream.rst:146
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr "Liknar :func:`start_server` men fungerar med Unix-sockets."

#: ../../library/asyncio-stream.rst:148
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr "Se även dokumentationen av :meth:`loop.create_unix_server`."

#: ../../library/asyncio-stream.rst:158
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:162
msgid "StreamReader"
msgstr "Strömläsare"

#: ../../library/asyncio-stream.rst:166
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream."
msgstr ""

#: ../../library/asyncio-stream.rst:169
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Det är inte rekommenderat att instansiera *StreamReader*-objekt direkt; "
"använd istället :func:`open_connection` och :func:`start_server`."

#: ../../library/asyncio-stream.rst:175
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:178
msgid ""
"If EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:183
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr "Läs en rad, där \"rad\" är en sekvens av bytes som slutar med ``\\n``."

#: ../../library/asyncio-stream.rst:186
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""
"Om EOF tas emot och ``\\n`` inte hittades, returnerar metoden delvis lästa "
"data."

#: ../../library/asyncio-stream.rst:189
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""
"Om EOF tas emot och den interna bufferten är tom, returneras ett tomt "
"``bytes``\\ -objekt."

#: ../../library/asyncio-stream.rst:194
msgid "Read exactly *n* bytes."
msgstr "Läs exakt *n* byte."

#: ../../library/asyncio-stream.rst:196
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""
"Skapa ett :exc:`IncompleteReadError` om EOF nås innan *n* kan läsas.  Använd "
"attributet :attr:`IncompleteReadError.partial` för att hämta delvis lästa "
"data."

#: ../../library/asyncio-stream.rst:202
msgid "Read data from the stream until *separator* is found."
msgstr "Läs data från strömmen tills *separator* hittas."

#: ../../library/asyncio-stream.rst:204
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"Vid framgång kommer data och separator att tas bort från den interna "
"bufferten (konsumeras). Returnerade data kommer att innehålla separatorn i "
"slutet."

#: ../../library/asyncio-stream.rst:208
msgid ""
"If the amount of data read exceeds the configured stream limit, a :exc:"
"`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""
"Om mängden data som läses överskrider den konfigurerade streamgränsen, "
"uppstår ett :exc:`LimitOverrunError`\\-undantag och data lämnas kvar i den "
"interna bufferten och kan läsas igen."

#: ../../library/asyncio-stream.rst:212
msgid ""
"If EOF is reached before the complete separator is found, an :exc:"
"`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""
"Om EOF nås innan den fullständiga separatorn hittats, uppstår ett :exc:"
"`IncompleteReadError` undantag och den interna bufferten nollställs.  "
"Attributet :attr:`IncompleteReadError.partial` kan innehålla en del av "
"separatorn."

#: ../../library/asyncio-stream.rst:221
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""
"Returnerar ``True`` om bufferten är tom och :meth:`feed_eof` anropades."

#: ../../library/asyncio-stream.rst:226
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:230
msgid ""
"Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""
"Representerar ett writer-objekt som tillhandahåller API:er för att skriva "
"data till IO-strömmen."

#: ../../library/asyncio-stream.rst:233
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use :"
"func:`open_connection` and :func:`start_server` instead."
msgstr ""
"Det är inte rekommenderat att instansiera *StreamWriter*-objekt direkt; "
"använd istället :func:`open_connection` och :func:`start_server`."

#: ../../library/asyncio-stream.rst:239
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Metoden försöker skriva *data* till det underliggande uttaget omedelbart. Om "
"det misslyckas köas data i en intern skrivbuffert tills det kan skickas."

#: ../../library/asyncio-stream.rst:243 ../../library/asyncio-stream.rst:255
msgid "The method should be used along with the ``drain()`` method::"
msgstr "Metoden bör användas tillsammans med metoden ``drain()``::"

#: ../../library/asyncio-stream.rst:250
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""
"Metoden skriver en lista (eller en iterabel) med bytes till den "
"underliggande sockeln omedelbart. Om det misslyckas köas data i en intern "
"skrivbuffert tills den kan skickas."

#: ../../library/asyncio-stream.rst:262
msgid "The method closes the stream and the underlying socket."
msgstr "Metoden stänger strömmen och det underliggande uttaget."

#: ../../library/asyncio-stream.rst:264
msgid "The method should be used along with the ``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:271
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""
"Returnerar ``True`` om den underliggande transporten stöder metoden :meth:"
"`write_eof`, annars ``False``."

#: ../../library/asyncio-stream.rst:276
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""
"Stäng skrivänden av strömmen efter att den buffrade skrivdatan har spolats."

#: ../../library/asyncio-stream.rst:281
msgid "Return the underlying asyncio transport."
msgstr "Returnerar den underliggande asynciotransporten."

#: ../../library/asyncio-stream.rst:285
msgid ""
"Access optional transport information; see :meth:`BaseTransport."
"get_extra_info` for details."
msgstr ""
"Tillgång till valfri transportinformation; se :meth:`BaseTransport."
"get_extra_info` för detaljer."

#: ../../library/asyncio-stream.rst:290
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""
"Vänta tills det är lämpligt att återuppta skrivningen till strömmen. "
"Exempel::"

#: ../../library/asyncio-stream.rst:296
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and "
"writing can be resumed.  When there is nothing to wait for, the :meth:"
"`drain` returns immediately."
msgstr ""
"Detta är en metod för flödeskontroll som interagerar med den underliggande "
"IO-skrivbufferten.  När storleken på bufferten når den höga vattenstämpeln "
"blockerar *drain()* tills storleken på bufferten har tömts ner till den låga "
"vattenstämpeln och skrivningen kan återupptas.  När det inte finns något att "
"vänta på återgår :meth:`drain` omedelbart."

#: ../../library/asyncio-stream.rst:305
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr "Returnerar ``True`` om strömmen är stängd eller håller på att stängas."

#: ../../library/asyncio-stream.rst:312
msgid "Wait until the stream is closed."
msgstr "Vänta tills strömmen är stängd."

#: ../../library/asyncio-stream.rst:314
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection "
"is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:321
msgid "Examples"
msgstr "Exempel"

#: ../../library/asyncio-stream.rst:326
msgid "TCP echo client using streams"
msgstr "TCP-ekoklient som använder strömmar"

#: ../../library/asyncio-stream.rst:328
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""
"TCP-ekoklient som använder funktionen :func:`asyncio.open_connection`::"

#: ../../library/asyncio-stream.rst:350
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:"
"`loop.create_connection` method."
msgstr ""
"I exemplet :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` används lågnivåmetoden :meth:"
"`loop.create_connection`."

#: ../../library/asyncio-stream.rst:357
msgid "TCP echo server using streams"
msgstr "TCP-ekoserver med hjälp av strömmar"

#: ../../library/asyncio-stream.rst:359
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr "TCP-ekoserver med hjälp av funktionen :func:`asyncio.start_server`::"

#: ../../library/asyncio-stream.rst:392
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop."
"create_server` method."
msgstr ""
"I exemplet :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` används metoden :meth:`loop."
"create_server`."

#: ../../library/asyncio-stream.rst:397
msgid "Get HTTP headers"
msgstr "Hämta HTTP-rubriker"

#: ../../library/asyncio-stream.rst:399
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""
"Enkelt exempel på en fråga om HTTP-rubriker för den URL som skickas på "
"kommandoraden::"

#: ../../library/asyncio-stream.rst:437
msgid "Usage::"
msgstr "Användning::"

#: ../../library/asyncio-stream.rst:441
msgid "or with HTTPS::"
msgstr "eller med HTTPS::"

#: ../../library/asyncio-stream.rst:449
msgid "Register an open socket to wait for data using streams"
msgstr "Registrera ett öppet uttag för att vänta på data med hjälp av strömmar"

#: ../../library/asyncio-stream.rst:451
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""
"Coroutine som väntar tills ett uttag tar emot data med hjälp av funktionen :"
"func:`open_connection`::"

#: ../../library/asyncio-stream.rst:485
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""
"Exemplet :ref:`registrera ett öppet uttag för att vänta på data med hjälp av "
"ett protokoll <asyncio_example_create_connection>` använder ett protokoll på "
"låg nivå och metoden :meth:`loop.create_connection`."

#: ../../library/asyncio-stream.rst:489
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level :meth:`loop."
"add_reader` method to watch a file descriptor."
msgstr ""
"I exemplet :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` används lågnivåmetoden :meth:`loop.add_reader` "
"för att bevaka en filbeskrivare."
