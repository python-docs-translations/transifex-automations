# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 16:36+0000\n"
"PO-Revision-Date: 2025-09-22 16:49+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/configparser.rst:2
msgid ":mod:`configparser` --- Configuration file parser"
msgstr ""

#: ../../library/configparser.rst:14
msgid "**Source code:** :source:`Lib/configparser.py`"
msgstr "**Källkod:** :source:`Lib/configparser.py`"

#: ../../library/configparser.rst:24
msgid ""
"This module provides the :class:`ConfigParser` class which implements a "
"basic configuration language which provides a structure similar to what's "
"found in Microsoft Windows INI files.  You can use this to write Python "
"programs which can be customized by end users easily."
msgstr ""
"Denna modul tillhandahåller :class:`ConfigParser`\\-klassen som "
"implementerar ett grundläggande konfigurationsspråk som ger en struktur som "
"liknar den som finns i Microsoft Windows INI-filer.  Du kan använda detta "
"för att skriva Python-program som enkelt kan anpassas av slutanvändare."

#: ../../library/configparser.rst:31
msgid ""
"This library does *not* interpret or write the value-type prefixes used in "
"the Windows Registry extended version of INI syntax."
msgstr ""
"Det här biblioteket tolkar eller skriver *inte* de prefix för värdetyper som "
"används i Windows-registrets utökade version av INI-syntax."

#: ../../library/configparser.rst:38
msgid "Module :mod:`tomllib`"
msgstr "Modul :mod:`tomllib`"

#: ../../library/configparser.rst:37
msgid ""
"TOML is a well-specified format for application configuration files. It is "
"specifically designed to be an improved version of INI."
msgstr ""
"TOML är ett väl specificerat format för konfigurationsfiler för program. Det "
"är särskilt utformat för att vara en förbättrad version av INI."

#: ../../library/configparser.rst:42
msgid "Module :mod:`shlex`"
msgstr "Modul :mod:`shlex`"

#: ../../library/configparser.rst:41
msgid ""
"Support for creating Unix shell-like mini-languages which can also be used "
"for application configuration files."
msgstr ""
"Stöd för att skapa Unix shell-liknande minispråk som också kan användas för "
"konfigurationsfiler för applikationer."

#: ../../library/configparser.rst:45
msgid "Module :mod:`json`"
msgstr "Modul :mod:`json`"

#: ../../library/configparser.rst:45
msgid ""
"The ``json`` module implements a subset of JavaScript syntax which is "
"sometimes used for configuration, but does not support comments."
msgstr ""
"Modulen ``json`` implementerar en delmängd av JavaScript-syntax som ibland "
"används för konfiguration, men stöder inte kommentarer."

#: ../../library/configparser.rst:60
msgid "Quick Start"
msgstr "Snabbstart"

#: ../../library/configparser.rst:62
msgid "Let's take a very basic configuration file that looks like this:"
msgstr ""
"Låt oss ta en mycket grundläggande konfigurationsfil som ser ut så här:"

#: ../../library/configparser.rst:79
msgid ""
"The structure of INI files is described `in the following section "
"<#supported-ini-file-structure>`_.  Essentially, the file consists of "
"sections, each of which contains keys with values. :mod:`configparser` "
"classes can read and write such files.  Let's start by creating the above "
"configuration file programmatically."
msgstr ""
"INI-filernas struktur beskrivs `i följande avsnitt <#supported-ini-file-"
"structure>`_.  I huvudsak består filen av sektioner, som var och en "
"innehåller nycklar med värden. :mod:`configparser`\\-klasser kan läsa och "
"skriva sådana filer.  Låt oss börja med att skapa ovanstående "
"konfigurationsfil programmatiskt."

#: ../../library/configparser.rst:103
msgid ""
"As you can see, we can treat a config parser much like a dictionary. There "
"are differences, `outlined later <#mapping-protocol-access>`_, but the "
"behavior is very close to what you would expect from a dictionary."
msgstr ""
"Som du kan se kan vi behandla en config-parser ungefär som en ordbok. Det "
"finns skillnader, \"beskrivs senare <#mapping-protocol-access>\", men "
"beteendet ligger mycket nära vad du kan förvänta dig av en ordbok."

#: ../../library/configparser.rst:107
msgid ""
"Now that we have created and saved a configuration file, let's read it back "
"and explore the data it holds."
msgstr ""
"Nu när vi har skapat och sparat en konfigurationsfil ska vi läsa upp den och "
"utforska vilka data den innehåller."

#: ../../library/configparser.rst:142
msgid ""
"As we can see above, the API is pretty straightforward.  The only bit of "
"magic involves the ``DEFAULT`` section which provides default values for all "
"other sections [1]_.  Note also that keys in sections are case-insensitive "
"and stored in lowercase [1]_."
msgstr ""
"Som vi kan se ovan är API:et ganska okomplicerat.  Det enda magiska är "
"avsnittet ``DEFAULT`` som innehåller standardvärden för alla andra avsnitt "
"[1]_.  Observera också att nycklar i sektioner är skiftlägesokänsliga och "
"lagras med gemener [1]_."

#: ../../library/configparser.rst:147
msgid ""
"It is possible to read several configurations into a single :class:"
"`ConfigParser`, where the most recently added configuration has the highest "
"priority. Any conflicting keys are taken from the more recent configuration "
"while the previously existing keys are retained."
msgstr ""

#: ../../library/configparser.rst:168
msgid ""
"This behaviour is equivalent to a :meth:`ConfigParser.read` call with "
"several files passed to the *filenames* parameter."
msgstr ""
"Detta beteende motsvarar ett anrop av :meth:`ConfigParser.read` med flera "
"filer som skickas till parametern *filnamn*."

#: ../../library/configparser.rst:173
msgid "Supported Datatypes"
msgstr "Datatyper som stöds"

#: ../../library/configparser.rst:175
msgid ""
"Config parsers do not guess datatypes of values in configuration files, "
"always storing them internally as strings.  This means that if you need "
"other datatypes, you should convert on your own:"
msgstr ""
"Config-parsers gissar inte datatyperna för värden i konfigurationsfiler, "
"utan lagrar dem alltid internt som strängar.  Detta innebär att om du "
"behöver andra datatyper bör du konvertera på egen hand:"

#: ../../library/configparser.rst:186
msgid ""
"Since this task is so common, config parsers provide a range of handy getter "
"methods to handle integers, floats and booleans.  The last one is the most "
"interesting because simply passing the value to ``bool()`` would do no good "
"since ``bool('False')`` is still ``True``.  This is why config parsers also "
"provide :meth:`~ConfigParser.getboolean`.  This method is case-insensitive "
"and recognizes Boolean values from ``'yes'``/``'no'``, ``'on'``/``'off'``, "
"``'true'``/``'false'`` and ``'1'``/``'0'`` [1]_.  For example:"
msgstr ""
"Eftersom den här uppgiften är så vanlig tillhandahåller config-parsers en "
"rad praktiska getter-metoder för att hantera heltal, flottörer och "
"booleaner.  Den sista är den mest intressanta eftersom det inte skulle vara "
"bra att bara skicka värdet till ``bool()`` eftersom ``bool('False')`` "
"fortfarande är ``True``.  Det är därför som config-parsers också "
"tillhandahåller :meth:`~ConfigParser.getboolean`.  Denna metod är "
"skiftlägesokänslig och känner igen booleska värden från ``'yes'``/``'no'``, "
"``'on'``/``'off'``, ``'true'``/``'false'`` och ``'1'``/``'0'`` [1]_.  Till "
"exempel:"

#: ../../library/configparser.rst:203
msgid ""
"Apart from :meth:`~ConfigParser.getboolean`, config parsers also provide "
"equivalent :meth:`~ConfigParser.getint` and :meth:`~ConfigParser.getfloat` "
"methods.  You can register your own converters and customize the provided "
"ones. [1]_"
msgstr ""
"Förutom :meth:`~ConfigParser.getboolean` tillhandahåller config-parser också "
"motsvarande metoder :meth:`~ConfigParser.getint` och :meth:`~ConfigParser."
"getfloat`.  Du kan registrera dina egna omvandlare och anpassa de som "
"tillhandahålls. [1]_"

#: ../../library/configparser.rst:209
msgid "Fallback Values"
msgstr "Reservvärden"

#: ../../library/configparser.rst:211
msgid ""
"As with a dictionary, you can use a section's :meth:`~ConfigParser.get` "
"method to provide fallback values:"
msgstr ""
"Precis som med en ordbok kan du använda en sektions :meth:`~ConfigParser."
"get`\\-metod för att tillhandahålla reservvärden:"

#: ../../library/configparser.rst:224
msgid ""
"Please note that default values have precedence over fallback values. For "
"instance, in our example the ``'CompressionLevel'`` key was specified only "
"in the ``'DEFAULT'`` section.  If we try to get it from the section "
"``'topsecret.server.example'``, we will always get the default, even if we "
"specify a fallback:"
msgstr ""
"Observera att standardvärden har företräde framför reservvärden. I vårt "
"exempel har nyckeln ``'CompressionLevel'`` endast angetts i avsnittet "
"``'DEFAULT'``.  Om vi försöker hämta den från avsnittet ``'topsecret.server."
"example'`` får vi alltid standardvärdet, även om vi anger ett reservvärde:"

#: ../../library/configparser.rst:235
msgid ""
"One more thing to be aware of is that the parser-level :meth:`~ConfigParser."
"get` method provides a custom, more complex interface, maintained for "
"backwards compatibility.  When using this method, a fallback value can be "
"provided via the ``fallback`` keyword-only argument:"
msgstr ""
"Ytterligare en sak att vara medveten om är att metoden :meth:`~ConfigParser."
"get` på parser-nivå ger ett anpassat, mer komplext gränssnitt, som bibehålls "
"för bakåtkompatibilitet.  När du använder den här metoden kan ett "
"reservvärde anges via det enda nyckelordsargumentet ``fallback``:"

#: ../../library/configparser.rst:246
msgid ""
"The same ``fallback`` argument can be used with the :meth:`~ConfigParser."
"getint`, :meth:`~ConfigParser.getfloat` and :meth:`~ConfigParser.getboolean` "
"methods, for example:"
msgstr ""
"Samma ``fallback``\\-argument kan t.ex. användas med metoderna :meth:"
"`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat` och :meth:"
"`~ConfigParser.getboolean`:"

#: ../../library/configparser.rst:262
msgid "Supported INI File Structure"
msgstr "INI-filstruktur som stöds"

#: ../../library/configparser.rst:264
msgid ""
"A configuration file consists of sections, each led by a ``[section]`` "
"header, followed by key/value entries separated by a specific string (``=`` "
"or ``:`` by default [1]_).  By default, section names are case sensitive but "
"keys are not [1]_.  Leading and trailing whitespace is removed from keys and "
"values. Values can be omitted if the parser is configured to allow it [1]_, "
"in which case the key/value delimiter may also be left out.  Values can also "
"span multiple lines, as long as they are indented deeper than the first line "
"of the value.  Depending on the parser's mode, blank lines may be treated as "
"parts of multiline values or ignored."
msgstr ""
"En konfigurationsfil består av sektioner, var och en inledd med en rubrik "
"``[section]``, följt av nyckel-/värdeposter åtskilda av en specifik sträng "
"(``=`` eller ``:`` som standard [1]_).  Som standard är avsnittsnamn "
"skiftlägeskänsliga, men nycklar är det inte [1]_.  Ledande och efterföljande "
"blanksteg tas bort från nycklar och värden. Värden kan utelämnas om parsern "
"är konfigurerad att tillåta det [1]_, i vilket fall avgränsaren för nyckel/"
"värde också kan utelämnas.  Värden kan också sträcka sig över flera rader, "
"så länge de är indragna djupare än den första raden i värdet.  Beroende på "
"parserns läge kan tomma rader behandlas som delar av värden på flera rader "
"eller ignoreras."

#: ../../library/configparser.rst:274
msgid ""
"By default, a valid section name can be any string that does not contain '\\"
"\\n'. To change this, see :attr:`ConfigParser.SECTCRE`."
msgstr ""
"Som standard kan ett giltigt sektionsnamn vara en sträng som inte innehåller "
"\"\\\\n\". För att ändra detta, se :attr:`ConfigParser.SECTCRE`."

#: ../../library/configparser.rst:277
msgid ""
"Configuration files may include comments, prefixed by specific characters "
"(``#`` and ``;`` by default [1]_).  Comments may appear on their own on an "
"otherwise empty line, possibly indented. [1]_"
msgstr ""
"Konfigurationsfiler kan innehålla kommentarer, som inleds med specifika "
"tecken (``#`` och ``;`` som standard [1]_).  Kommentarer kan visas separat "
"på en i övrigt tom rad, eventuellt indragna. [1]_"

#: ../../library/configparser.rst:281 ../../library/configparser.rst:344
msgid "For example:"
msgstr "Till exempel:"

#: ../../library/configparser.rst:329
msgid "Interpolation of values"
msgstr "Interpolering av värden"

#: ../../library/configparser.rst:331
msgid ""
"On top of the core functionality, :class:`ConfigParser` supports "
"interpolation.  This means values can be preprocessed before returning them "
"from ``get()`` calls."
msgstr ""
"Utöver kärnfunktionaliteten har :class:`ConfigParser` stöd för "
"interpolering.  Detta innebär att värden kan förbehandlas innan de "
"returneras från ``get()``\\-anrop."

#: ../../library/configparser.rst:339
msgid ""
"The default implementation used by :class:`ConfigParser`.  It enables values "
"to contain format strings which refer to other values in the same section, "
"or values in the special default section [1]_.  Additional default values "
"can be provided on initialization."
msgstr ""
"Standardimplementationen som används av :class:`ConfigParser`.  Den gör det "
"möjligt för värden att innehålla formatsträngar som hänvisar till andra "
"värden i samma avsnitt, eller värden i det speciella standardavsnittet "
"[1]_.  Ytterligare standardvärden kan anges vid initiering."

#: ../../library/configparser.rst:357
msgid ""
"In the example above, :class:`ConfigParser` with *interpolation* set to "
"``BasicInterpolation()`` would resolve ``%(home_dir)s`` to the value of "
"``home_dir`` (``/Users`` in this case).  ``%(my_dir)s`` in effect would "
"resolve to ``/Users/lumberjack``.  All interpolations are done on demand so "
"keys used in the chain of references do not have to be specified in any "
"specific order in the configuration file."
msgstr ""
"I exemplet ovan skulle :class:`ConfigParser` med *interpolation* inställd på "
"``BasicInterpolation()`` lösa ``%(home_dir)s`` till värdet av ``home_dir`` "
"(``/Users`` i det här fallet).  ``%(my_dir)s`` skulle i praktiken motsvara "
"``/Users/lumberjack``.  Alla interpoleringar görs på begäran så nycklar som "
"används i kedjan av referenser behöver inte anges i någon specifik ordning i "
"konfigurationsfilen."

#: ../../library/configparser.rst:364
msgid ""
"With ``interpolation`` set to ``None``, the parser would simply return "
"``%(my_dir)s/Pictures`` as the value of ``my_pictures`` and ``%(home_dir)s/"
"lumberjack`` as the value of ``my_dir``."
msgstr ""
"Med ``interpolation`` inställd på ``None`` skulle parsern helt enkelt "
"returnera ``%(my_dir)s/Pictures`` som värdet på ``my_pictures`` och "
"``%(home_dir)s/lumberjack`` som värdet på ``my_dir``."

#: ../../library/configparser.rst:372
msgid ""
"An alternative handler for interpolation which implements a more advanced "
"syntax, used for instance in ``zc.buildout``.  Extended interpolation is "
"using ``${section:option}`` to denote a value from a foreign section. "
"Interpolation can span multiple levels.  For convenience, if the ``section:"
"`` part is omitted, interpolation defaults to the current section (and "
"possibly the default values from the special section)."
msgstr ""
"En alternativ hanterare för interpolering som implementerar en mer avancerad "
"syntax, som t.ex. används i ``zc.buildout``.  Utökad interpolering är att "
"använda ``${section:option}`` för att beteckna ett värde från en utländsk "
"sektion. Interpolering kan sträcka sig över flera nivåer.  För enkelhetens "
"skull, om ``section:`` utelämnas, blir standardvärdet för interpolering det "
"aktuella avsnittet (och eventuellt standardvärdena från specialavsnittet)."

#: ../../library/configparser.rst:379
msgid ""
"For example, the configuration specified above with basic interpolation, "
"would look like this with extended interpolation:"
msgstr ""
"Den konfiguration som anges ovan med grundläggande interpolering skulle t."
"ex. se ut så här med utökad interpolering:"

#: ../../library/configparser.rst:393
msgid "Values from other sections can be fetched as well:"
msgstr "Värden från andra sektioner kan också hämtas:"

#: ../../library/configparser.rst:415
msgid "Mapping Protocol Access"
msgstr "Mappning Protokoll Åtkomst"

#: ../../library/configparser.rst:419
msgid ""
"Mapping protocol access is a generic name for functionality that enables "
"using custom objects as if they were dictionaries.  In case of :mod:"
"`configparser`, the mapping interface implementation is using the "
"``parser['section']['option']`` notation."
msgstr ""
"Mappningsprotokollåtkomst är ett generiskt namn för funktionalitet som gör "
"det möjligt att använda anpassade objekt som om de vore lexikon.  I fallet "
"med :mod:`configparser` använder implementationen av mappningsgränssnittet "
"notationen ``parser['section']['option']``."

#: ../../library/configparser.rst:424
msgid ""
"``parser['section']`` in particular returns a proxy for the section's data "
"in the parser.  This means that the values are not copied but they are taken "
"from the original parser on demand.  What's even more important is that when "
"values are changed on a section proxy, they are actually mutated in the "
"original parser."
msgstr ""
"``parser['section']`` returnerar i synnerhet en proxy för sektionens data i "
"parsern.  Detta innebär att värdena inte kopieras utan hämtas från den "
"ursprungliga parsern på begäran.  Vad som är ännu viktigare är att när "
"värden ändras på en sektionsproxy, så ändras de faktiskt i den ursprungliga "
"parsern."

#: ../../library/configparser.rst:430
msgid ""
":mod:`configparser` objects behave as close to actual dictionaries as "
"possible. The mapping interface is complete and adheres to the :class:"
"`~collections.abc.MutableMapping` ABC. However, there are a few differences "
"that should be taken into account:"
msgstr ""
":mod:`configparser`\\-objekt beter sig så nära faktiska ordböcker som "
"möjligt. Mappningsgränssnittet är komplett och följer :class:`~collections."
"abc.MutableMapping` ABC. Det finns dock några skillnader som bör tas med i "
"beräkningen:"

#: ../../library/configparser.rst:435
msgid ""
"By default, all keys in sections are accessible in a case-insensitive manner "
"[1]_.  E.g. ``for option in parser[\"section\"]`` yields only "
"``optionxform``'ed option key names.  This means lowercased keys by "
"default.  At the same time, for a section that holds the key ``'a'``, both "
"expressions return ``True``::"
msgstr ""
"Som standard är alla nycklar i sektioner tillgängliga på ett "
"skiftlägesokänsligt sätt [1]_.  T.ex. ``for option in parser[\"section\"]`` "
"ger endast ``optionxform``'ed alternativnyckelnamn.  Detta innebär att "
"nycklarna som standard har gemener.  Samtidigt, för ett avsnitt som "
"innehåller nyckeln ``'a'``, returnerar båda uttrycken ``True``::"

#: ../../library/configparser.rst:443
msgid ""
"All sections include ``DEFAULTSECT`` values as well which means that ``."
"clear()`` on a section may not leave the section visibly empty.  This is "
"because default values cannot be deleted from the section (because "
"technically they are not there).  If they are overridden in the section, "
"deleting causes the default value to be visible again.  Trying to delete a "
"default value causes a :exc:`KeyError`."
msgstr ""
"Alla sektioner innehåller även ``DEFAULTSECT`` -värden, vilket innebär att "
"``.clear()`` på en sektion inte nödvändigtvis gör sektionen synligt tom. "
"Detta beror på att standardvärden inte kan raderas från sektionen (eftersom "
"de tekniskt sett inte finns där). Om de åsidosätts i sektionen blir "
"standardvärdet synligt igen när de raderas. Om du försöker radera ett "
"standardvärde uppstår ett :exc:`KeyError`."

#: ../../library/configparser.rst:450
msgid "``DEFAULTSECT`` cannot be removed from the parser:"
msgstr "``DEFAULTSECT`` kan inte tas bort från parsern:"

#: ../../library/configparser.rst:452
msgid "trying to delete it raises :exc:`ValueError`,"
msgstr "försök att ta bort det ger :exc:`ValueError`,"

#: ../../library/configparser.rst:454
msgid "``parser.clear()`` leaves it intact,"
msgstr "``parser.clear()`` lämnar den intakt,"

#: ../../library/configparser.rst:456
msgid "``parser.popitem()`` never returns it."
msgstr "``parser.popitem()`` returnerar den aldrig."

#: ../../library/configparser.rst:458
msgid ""
"``parser.get(section, option, **kwargs)`` - the second argument is **not** a "
"fallback value.  Note however that the section-level ``get()`` methods are "
"compatible both with the mapping protocol and the classic configparser API."
msgstr ""
"``parser.get(section, option, **kwargs)`` - det andra argumentet är **inte** "
"ett fallback-värde.  Observera dock att metoderna ``get()`` på sektionsnivå "
"är kompatibla både med mappningsprotokollet och det klassiska configparser-"
"API:et."

#: ../../library/configparser.rst:462
msgid ""
"``parser.items()`` is compatible with the mapping protocol (returns a list "
"of *section_name*, *section_proxy* pairs including the DEFAULTSECT).  "
"However, this method can also be invoked with arguments: ``parser."
"items(section, raw, vars)``.  The latter call returns a list of *option*, "
"*value* pairs for a specified ``section``, with all interpolations expanded "
"(unless ``raw=True`` is provided)."
msgstr ""
"``parser.items()`` är kompatibel med mappningsprotokollet (returnerar en "
"lista med paren *section_name*, *section_proxy* inklusive DEFAULTSECT).  Den "
"här metoden kan dock också anropas med argument: ``parser.items(section, "
"raw, vars)``.  Det senare anropet returnerar en lista med paren *option*, "
"*value* för en angiven ``section``, med alla interpoleringar expanderade (om "
"inte ``raw=True`` anges)."

#: ../../library/configparser.rst:469
msgid ""
"The mapping protocol is implemented on top of the existing legacy API so "
"that subclasses overriding the original interface still should have mappings "
"working as expected."
msgstr ""
"Mappningsprotokollet implementeras ovanpå det befintliga äldre API:et så att "
"subklasser som åsidosätter det ursprungliga gränssnittet fortfarande bör ha "
"mappningar som fungerar som förväntat."

#: ../../library/configparser.rst:475
msgid "Customizing Parser Behaviour"
msgstr "Anpassa parserns beteende"

#: ../../library/configparser.rst:477
msgid ""
"There are nearly as many INI format variants as there are applications using "
"it. :mod:`configparser` goes a long way to provide support for the largest "
"sensible set of INI styles available.  The default functionality is mainly "
"dictated by historical background and it's very likely that you will want to "
"customize some of the features."
msgstr ""
"Det finns nästan lika många INI-formatvarianter som det finns applikationer "
"som använder det. :mod:`configparser` gör mycket för att ge stöd för den "
"största möjliga uppsättningen INI-stilar som finns tillgängliga.  "
"Standardfunktionaliteten dikteras huvudsakligen av historisk bakgrund och "
"det är mycket troligt att du kommer att vilja anpassa några av funktionerna."

#: ../../library/configparser.rst:483
msgid ""
"The most common way to change the way a specific config parser works is to "
"use the :meth:`!__init__` options:"
msgstr ""
"Det vanligaste sättet att ändra hur en specifik konfigurationsparser "
"fungerar är att använda :meth:`!__init__`\\-alternativen:"

#: ../../library/configparser.rst:486
msgid "*defaults*, default value: ``None``"
msgstr "*defaults*, standardvärde: ``None``"

#: ../../library/configparser.rst:488
msgid ""
"This option accepts a dictionary of key-value pairs which will be initially "
"put in the ``DEFAULT`` section.  This makes for an elegant way to support "
"concise configuration files that don't specify values which are the same as "
"the documented default."
msgstr ""
"Detta alternativ accepterar en ordlista med nyckel-värdepar som initialt "
"kommer att placeras i avsnittet ``DEFAULT``.  Detta är ett elegant sätt att "
"stödja kortfattade konfigurationsfiler som inte anger värden som är desamma "
"som den dokumenterade standardinställningen."

#: ../../library/configparser.rst:493
msgid ""
"Hint: if you want to specify default values for a specific section, use :"
"meth:`~ConfigParser.read_dict` before you read the actual file."
msgstr ""
"Tips: Om du vill ange standardvärden för ett visst avsnitt använder du :meth:"
"`~ConfigParser.read_dict` innan du läser den faktiska filen."

#: ../../library/configparser.rst:496
msgid "*dict_type*, default value: :class:`dict`"
msgstr "*dict_type*, standardvärde: :class:`dict`"

#: ../../library/configparser.rst:498
msgid ""
"This option has a major impact on how the mapping protocol will behave and "
"how the written configuration files look.  With the standard dictionary, "
"every section is stored in the order they were added to the parser.  Same "
"goes for options within sections."
msgstr ""
"Detta alternativ har stor inverkan på hur mappningsprotokollet kommer att "
"bete sig och hur de skrivna konfigurationsfilerna ser ut.  Med "
"standardordboken lagras varje avsnitt i den ordning som de lades till i "
"parsern.  Detsamma gäller för alternativ inom avsnitt."

#: ../../library/configparser.rst:503
msgid ""
"An alternative dictionary type can be used for example to sort sections and "
"options on write-back."
msgstr ""
"En alternativ ordbokstyp kan t.ex. användas för att sortera sektioner och "
"alternativ på write-back."

#: ../../library/configparser.rst:506
msgid ""
"Please note: there are ways to add a set of key-value pairs in a single "
"operation.  When you use a regular dictionary in those operations, the order "
"of the keys will be ordered.  For example:"
msgstr ""
"Observera: Det finns sätt att lägga till en uppsättning nyckel-värdepar i en "
"enda operation.  När du använder en vanlig ordbok i dessa operationer kommer "
"ordningen på nycklarna att vara ordnad.  Till exempel:"

#: ../../library/configparser.rst:528
msgid "*allow_no_value*, default value: ``False``"
msgstr "*allow_no_value*, standardvärde: ``False``"

#: ../../library/configparser.rst:530
msgid ""
"Some configuration files are known to include settings without values, but "
"which otherwise conform to the syntax supported by :mod:`configparser`.  The "
"*allow_no_value* parameter to the constructor can be used to indicate that "
"such values should be accepted:"
msgstr ""
"Det är känt att vissa konfigurationsfiler innehåller inställningar utan "
"värden, men som i övrigt överensstämmer med den syntax som stöds av :mod:"
"`configparser`.  Parametern *allow_no_value* till konstruktören kan användas "
"för att ange att sådana värden ska accepteras:"

#: ../../library/configparser.rst:565
msgid "*delimiters*, default value: ``('=', ':')``"
msgstr "*avgränsningstecken*, standardvärde: ``('=', ':')``"

#: ../../library/configparser.rst:567
msgid ""
"Delimiters are substrings that delimit keys from values within a section. "
"The first occurrence of a delimiting substring on a line is considered a "
"delimiter.  This means values (but not keys) can contain the delimiters."
msgstr ""
"Avgränsare är substrängar som avgränsar nycklar från värden inom ett "
"avsnitt. Den första förekomsten av en avgränsande substräng på en rad "
"betraktas som en avgränsare.  Detta innebär att värden (men inte nycklar) "
"kan innehålla avgränsare."

#: ../../library/configparser.rst:571
msgid ""
"See also the *space_around_delimiters* argument to :meth:`ConfigParser."
"write`."
msgstr ""
"Se även argumentet *space_around_delimiters* till :meth:`ConfigParser.write`."

#: ../../library/configparser.rst:574
msgid "*comment_prefixes*, default value: ``('#', ';')``"
msgstr "*comment_prefixes*, standardvärde: ``('#', ';')``"

#: ../../library/configparser.rst:576
msgid "*inline_comment_prefixes*, default value: ``None``"
msgstr "*inline_comment_prefixes*, standardvärde: ``None``"

#: ../../library/configparser.rst:578
msgid ""
"Comment prefixes are strings that indicate the start of a valid comment "
"within a config file. *comment_prefixes* are used only on otherwise empty "
"lines (optionally indented) whereas *inline_comment_prefixes* can be used "
"after every valid value (e.g. section names, options and empty lines as "
"well).  By default inline comments are disabled and ``'#'`` and ``';'`` are "
"used as prefixes for whole line comments."
msgstr ""
"Comment prefixes är strängar som anger början på en giltig kommentar i en "
"konfigurationsfil. *comment_prefixes* används endast på annars tomma rader "
"(eventuellt indragna) medan *inline_comment_prefixes* kan användas efter "
"varje giltigt värde (t.ex. sektionsnamn, alternativ och även tomma rader).  "
"Som standard är inline-kommentarer inaktiverade och ``'#'`` och ``';'`` "
"används som prefix för kommentarer på hela rader."

#: ../../library/configparser.rst:585
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``comment_prefixes=('#',';')`` and ``inline_comment_prefixes=(';',)``."
msgstr ""
"I tidigare versioner av :mod:`configparser` matchade beteendet "
"``comment_prefixes=('#',';')`` och ``inline_comment_prefixes=(';',)``."

#: ../../library/configparser.rst:589
msgid ""
"Please note that config parsers don't support escaping of comment prefixes "
"so using *inline_comment_prefixes* may prevent users from specifying option "
"values with characters used as comment prefixes.  When in doubt, avoid "
"setting *inline_comment_prefixes*.  In any circumstances, the only way of "
"storing comment prefix characters at the beginning of a line in multiline "
"values is to interpolate the prefix, for example::"
msgstr ""
"Observera att konfigurationsanalysatorer inte stöder escaping av "
"kommentarprefix, så om du använder *inline_comment_prefixes* kan det hindra "
"användare från att ange alternativvärden med tecken som används som "
"kommentarprefix.  Undvik att ange *inline_comment_prefixes* när du är "
"osäker.  Under alla omständigheter är det enda sättet att lagra prefixtecken "
"för kommentarer i början av en rad i flerradiga värden att interpolera "
"prefixet, t.ex.::"

#: ../../library/configparser.rst:635
msgid "*strict*, default value: ``True``"
msgstr "*strict*, standardvärde: ``True``"

#: ../../library/configparser.rst:637
msgid ""
"When set to ``True``, the parser will not allow for any section or option "
"duplicates while reading from a single source (using :meth:`~ConfigParser."
"read_file`, :meth:`~ConfigParser.read_string` or :meth:`~ConfigParser."
"read_dict`).  It is recommended to use strict parsers in new applications."
msgstr ""
"När inställningen är ``True`` tillåter inte parsern att avsnitt eller "
"alternativ dupliceras när den läser från en enda källa (med :meth:"
"`~ConfigParser.read_file`, :meth:`~ConfigParser.read_string` eller :meth:"
"`~ConfigParser.read_dict`).  Det rekommenderas att använda strikta parsers i "
"nya applikationer."

#: ../../library/configparser.rst:642
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``strict=False``."
msgstr ""
"I tidigare versioner av :mod:`configparser` matchade beteendet "
"``strict=False``."

#: ../../library/configparser.rst:646
msgid "*empty_lines_in_values*, default value: ``True``"
msgstr "*empty_lines_in_values*, standardvärde: ``True``"

#: ../../library/configparser.rst:648
msgid ""
"In config parsers, values can span multiple lines as long as they are "
"indented more than the key that holds them.  By default parsers also let "
"empty lines to be parts of values.  At the same time, keys can be "
"arbitrarily indented themselves to improve readability.  In consequence, "
"when configuration files get big and complex, it is easy for the user to "
"lose track of the file structure.  Take for instance:"
msgstr ""
"I config-parsers kan värden sträcka sig över flera rader så länge de är "
"indragna mer än den nyckel som innehåller dem.  Som standard låter parsers "
"även tomma rader vara delar av värden.  Samtidigt kan nycklarna själva vara "
"godtyckligt indragna för att förbättra läsbarheten.  När konfigurationsfiler "
"blir stora och komplexa är det därför lätt för användaren att tappa bort "
"filstrukturen.  Ta till exempel:"

#: ../../library/configparser.rst:663
msgid ""
"This can be especially problematic for the user to see if she's using a "
"proportional font to edit the file.  That is why when your application does "
"not need values with empty lines, you should consider disallowing them.  "
"This will make empty lines split keys every time.  In the example above, it "
"would produce two keys, ``key`` and ``this``."
msgstr ""
"Detta kan vara särskilt problematiskt för användaren att se om hon använder "
"ett proportionellt teckensnitt för att redigera filen.  Det är därför du bör "
"överväga att inte tillåta värden med tomma rader när din applikation inte "
"behöver dem.  Detta kommer att göra att tomma rader delar tangenter varje "
"gång.  I exemplet ovan skulle det ge två nycklar, ``key`` och ``this``."

#: ../../library/configparser.rst:669
msgid ""
"*default_section*, default value: ``configparser.DEFAULTSECT`` (that is: "
"``\"DEFAULT\"``)"
msgstr ""
"*default_section*, standardvärde: ``configparser.DEFAULTSECT`` (det vill "
"säga: ``\"DEFAULT\"``)"

#: ../../library/configparser.rst:672
msgid ""
"The convention of allowing a special section of default values for other "
"sections or interpolation purposes is a powerful concept of this library, "
"letting users create complex declarative configurations.  This section is "
"normally called ``\"DEFAULT\"`` but this can be customized to point to any "
"other valid section name.  Some typical values include: ``\"general\"`` or "
"``\"common\"``.  The name provided is used for recognizing default sections "
"when reading from any source and is used when writing configuration back to "
"a file.  Its current value can be retrieved using the ``parser_instance."
"default_section`` attribute and may be modified at runtime (i.e. to convert "
"files from one format to another)."
msgstr ""
"Konventionen att tillåta ett speciellt avsnitt med standardvärden för andra "
"avsnitt eller interpoleringsändamål är ett kraftfullt koncept i detta "
"bibliotek, vilket gör det möjligt för användare att skapa komplexa "
"deklarativa konfigurationer.  Detta avsnitt kallas normalt ``\"DEFAULT\"`` "
"men det kan anpassas så att det pekar på vilket annat giltigt avsnittsnamn "
"som helst.  Några typiska värden är t.ex: ``\"general\"`` eller "
"``\"common\"``.  Det angivna namnet används för att känna igen "
"standardavsnitt när man läser från en källa och används när man skriver "
"tillbaka konfigurationen till en fil.  Dess aktuella värde kan hämtas med "
"hjälp av attributet ``parser_instance.default_section`` och kan ändras under "
"körning (t.ex. för att konvertera filer från ett format till ett annat)."

#: ../../library/configparser.rst:683
msgid "*interpolation*, default value: ``configparser.BasicInterpolation``"
msgstr "*interpolation*, standardvärde: ``configparser.BasicInterpolation``"

#: ../../library/configparser.rst:685
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_. :class:"
"`RawConfigParser` has a default value of ``None``."
msgstr ""
"Interpolationsbeteendet kan anpassas genom att tillhandahålla en anpassad "
"hanterare via argumentet *interpolation*. ``None`` kan användas för att "
"stänga av interpolering helt, ``ExtendedInterpolation()`` ger en mer "
"avancerad variant inspirerad av ``zc.buildout``.  Mer om ämnet i det "
"`dedikerade dokumentationsavsnittet <#interpolation-av-värden>`_. :class:"
"`RawConfigParser` har ett standardvärde på ``None``."

#: ../../library/configparser.rst:692
msgid "*converters*, default value: not set"
msgstr "*omvandlare*, standardvärde: inte inställt"

#: ../../library/configparser.rst:694
msgid ""
"Config parsers provide option value getters that perform type conversion.  "
"By default :meth:`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat`, "
"and :meth:`~ConfigParser.getboolean` are implemented.  Should other getters "
"be desirable, users may define them in a subclass or pass a dictionary where "
"each key is a name of the converter and each value is a callable "
"implementing said conversion.  For instance, passing ``{'decimal': decimal."
"Decimal}`` would add :meth:`!getdecimal` on both the parser object and all "
"section proxies.  In other words, it will be possible to write both "
"``parser_instance.getdecimal('section', 'key', fallback=0)`` and "
"``parser_instance['section'].getdecimal('key', 0)``."
msgstr ""
"Config-parsers tillhandahåller getters för alternativvärden som utför "
"typkonvertering.  Som standard implementeras :meth:`~ConfigParser.getint`, :"
"meth:`~ConfigParser.getfloat` och :meth:`~ConfigParser.getboolean`.  Om "
"andra getters är önskvärda kan användare definiera dem i en subklass eller "
"skicka en dictionary där varje nyckel är ett namn på omvandlaren och varje "
"värde är en anropsbar som implementerar omvandlingen.  Till exempel, om man "
"skickar ``{'decimal': decimal.Decimal}`` skulle man lägga till :meth:`!"
"getdecimal` på både parserobjektet och alla sektionsproxies.  Med andra ord "
"kommer det att vara möjligt att skriva både ``parser_instance."
"getdecimal('section', 'key', fallback=0)`` och ``parser_instance['section']."
"getdecimal('key', 0)``."

#: ../../library/configparser.rst:705
msgid ""
"If the converter needs to access the state of the parser, it can be "
"implemented as a method on a config parser subclass.  If the name of this "
"method starts with ``get``, it will be available on all section proxies, in "
"the dict-compatible form (see the ``getdecimal()`` example above)."
msgstr ""
"Om omvandlaren behöver komma åt parserns tillstånd kan det implementeras som "
"en metod i en config parser-underklass.  Om namnet på denna metod börjar med "
"``get`` kommer den att vara tillgänglig på alla sektionsproxyer, i den dict-"
"kompatibla formen (se exemplet ``getdecimal()`` ovan)."

#: ../../library/configparser.rst:710
msgid ""
"More advanced customization may be achieved by overriding default values of "
"these parser attributes.  The defaults are defined on the classes, so they "
"may be overridden by subclasses or by attribute assignment."
msgstr ""
"Mer avancerad anpassning kan uppnås genom att åsidosätta standardvärdena för "
"dessa parserattribut.  Standardvärdena definieras för klasserna, så de kan "
"åsidosättas av subklasser eller genom attributtilldelning."

#: ../../library/configparser.rst:716
msgid ""
"By default when using :meth:`~ConfigParser.getboolean`, config parsers "
"consider the following values ``True``: ``'1'``, ``'yes'``, ``'true'``, "
"``'on'`` and the following values ``False``: ``'0'``, ``'no'``, ``'false'``, "
"``'off'``.  You can override this by specifying a custom dictionary of "
"strings and their Boolean outcomes. For example:"
msgstr ""
"Som standard när :meth:`~ConfigParser.getboolean` används, beaktar config-"
"parser följande värden ``True``: ``'1'``, ``'yes'``, ``'true'``, ``'on'`` "
"och följande värden ``False``: ``'0'``, ``'no'``, ``'false'``, ``'off'``.  "
"Du kan åsidosätta detta genom att ange en anpassad ordlista med strängar och "
"deras booleska resultat. Till exempel:"

#: ../../library/configparser.rst:734
msgid ""
"Other typical Boolean pairs include ``accept``/``reject`` or ``enabled``/"
"``disabled``."
msgstr ""
"Andra typiska booleska par är ``accept``/``reject`` eller ``enabled``/"
"``disabled``."

#: ../../library/configparser.rst:740
msgid ""
"This method transforms option names on every read, get, or set operation.  "
"The default converts the name to lowercase.  This also means that when a "
"configuration file gets written, all keys will be lowercase.  Override this "
"method if that's unsuitable. For example:"
msgstr ""
"Denna metod omvandlar optionsnamn vid varje read-, get- eller set-"
"operation.  Som standard konverteras namnet till gemener.  Detta innebär "
"också att när en konfigurationsfil skrivs kommer alla nycklar att vara "
"gemener.  Åsidosätt denna metod om det är olämpligt. Till exempel:"

#: ../../library/configparser.rst:770
msgid ""
"The optionxform function transforms option names to a canonical form. This "
"should be an idempotent function: if the name is already in canonical form, "
"it should be returned unchanged."
msgstr ""
"Funktionen optionxform omvandlar optionsnamn till en kanonisk form. Detta "
"bör vara en idempotent funktion: om namnet redan är i kanonisk form bör det "
"returneras oförändrat."

#: ../../library/configparser.rst:777
msgid ""
"A compiled regular expression used to parse section headers.  The default "
"matches ``[section]`` to the name ``\"section\"``.  Whitespace is considered "
"part of the section name, thus ``[  larch  ]`` will be read as a section of "
"name ``\"  larch  \"``.  Override this attribute if that's unsuitable.  For "
"example:"
msgstr ""
"Ett kompilerat reguljärt uttryck som används för att analysera "
"sektionsrubriker.  Standardvärdet matchar ``[section]`` till namnet "
"``\"section\"``.  Whitespace anses vara en del av sektionsnamnet, så "
"``[ larch ]`` kommer att läsas som en sektion med namnet ``\" larch\"``.  "
"Åsidosätt detta attribut om det är olämpligt.  Exempelvis:"

#: ../../library/configparser.rst:805
msgid ""
"While ConfigParser objects also use an ``OPTCRE`` attribute for recognizing "
"option lines, it's not recommended to override it because that would "
"interfere with constructor options *allow_no_value* and *delimiters*."
msgstr ""
"Även om ConfigParser-objekt också använder ett ``OPTCRE``\\-attribut för att "
"känna igen optionsrader rekommenderas det inte att åsidosätta det eftersom "
"det skulle störa konstruktoralternativen *allow_no_value* och *delimiters*."

#: ../../library/configparser.rst:811
msgid "Legacy API Examples"
msgstr "Exempel på äldre API"

#: ../../library/configparser.rst:813
msgid ""
"Mainly because of backwards compatibility concerns, :mod:`configparser` "
"provides also a legacy API with explicit ``get``/``set`` methods.  While "
"there are valid use cases for the methods outlined below, mapping protocol "
"access is preferred for new projects.  The legacy API is at times more "
"advanced, low-level and downright counterintuitive."
msgstr ""
"Främst på grund av bakåtkompatibilitet tillhandahåller :mod:`configparser` "
"också ett äldre API med explicita ``get``/``set``\\-metoder.  Även om det "
"finns giltiga användningsfall för de metoder som beskrivs nedan, föredras "
"åtkomst via mappningsprotokoll för nya projekt.  Det äldre API:et är ibland "
"mer avancerat, på låg nivå och rent av kontraintuitivt."

#: ../../library/configparser.rst:819
msgid "An example of writing to a configuration file::"
msgstr "Ett exempel på hur man skriver till en konfigurationsfil::"

#: ../../library/configparser.rst:842
msgid "An example of reading the configuration file again::"
msgstr "Ett exempel på att läsa konfigurationsfilen igen::"

#: ../../library/configparser.rst:860
msgid "To get interpolation, use :class:`ConfigParser`::"
msgstr "För att få interpolation, använd :class:`ConfigParser`::"

#: ../../library/configparser.rst:893
msgid ""
"Default values are available in both types of ConfigParsers.  They are used "
"in interpolation if an option used is not defined elsewhere. ::"
msgstr ""
"Standardvärden finns tillgängliga i båda typerna av ConfigParsers.  De "
"används vid interpolering om ett alternativ som används inte är definierat "
"någon annanstans. ::"

#: ../../library/configparser.rst:911
msgid "ConfigParser Objects"
msgstr "ConfigParser-objekt"

#: ../../library/configparser.rst:915
msgid ""
"The main configuration parser.  When *defaults* is given, it is initialized "
"into the dictionary of intrinsic defaults.  When *dict_type* is given, it "
"will be used to create the dictionary objects for the list of sections, for "
"the options within a section, and for the default values."
msgstr ""
"Den huvudsakliga konfigurationsparsern.  När *defaults* anges initialiseras "
"den till en ordbok med inneboende standardvärden.  När *dict_type* anges "
"kommer den att användas för att skapa ordboksobjekt för listan över avsnitt, "
"för alternativen inom ett avsnitt och för standardvärdena."

#: ../../library/configparser.rst:920
msgid ""
"When *delimiters* is given, it is used as the set of substrings that divide "
"keys from values.  When *comment_prefixes* is given, it will be used as the "
"set of substrings that prefix comments in otherwise empty lines. Comments "
"can be indented.  When *inline_comment_prefixes* is given, it will be used "
"as the set of substrings that prefix comments in non-empty lines."
msgstr ""
"När *delimiters* anges används det som den uppsättning substrängar som "
"skiljer nycklar från värden.  När *comment_prefixes* anges kommer det att "
"användas som en uppsättning substrängar som prefixar kommentarer i annars "
"tomma rader. Kommentarer kan vara indragna.  När *inline_comment_prefixes* "
"anges kommer det att användas som den uppsättning substrängar som prefixar "
"kommentarer på icke-tomma rader."

#: ../../library/configparser.rst:926
msgid ""
"When *strict* is ``True`` (the default), the parser won't allow for any "
"section or option duplicates while reading from a single source (file, "
"string or dictionary), raising :exc:`DuplicateSectionError` or :exc:"
"`DuplicateOptionError`.  When *empty_lines_in_values* is ``False`` (default: "
"``True``), each empty line marks the end of an option.  Otherwise, internal "
"empty lines of a multiline option are kept as part of the value. When "
"*allow_no_value* is ``True`` (default: ``False``), options without values "
"are accepted; the value held for these is ``None`` and they are serialized "
"without the trailing delimiter."
msgstr ""
"När *strict* är ``True`` (standard) kommer parsern inte att tillåta "
"dubbletter av avsnitt eller alternativ när den läser från en enda källa "
"(fil, sträng eller ordbok), vilket ger :exc:`DuplicateSectionError` eller :"
"exc:`DuplicateOptionError`.  När *empty_lines_in_values* är ``False`` "
"(standard: ``True``) markerar varje tom rad slutet på ett alternativ.  "
"Annars behålls interna tomma rader i ett flerradigt alternativ som en del av "
"värdet. När *allow_no_value* är ``True`` (standard: ``False``) accepteras "
"alternativ utan värden; värdet för dessa är ``None`` och de serialiseras "
"utan den efterföljande avgränsaren."

#: ../../library/configparser.rst:936
msgid ""
"When *default_section* is given, it specifies the name for the special "
"section holding default values for other sections and interpolation purposes "
"(normally named ``\"DEFAULT\"``).  This value can be retrieved and changed "
"at runtime using the ``default_section`` instance attribute. This won't re-"
"evaluate an already parsed config file, but will be used when writing parsed "
"settings to a new config file."
msgstr ""
"När *default_section* anges, specificeras namnet på det speciella avsnitt "
"som innehåller standardvärden för andra avsnitt och för "
"interpoleringsändamål (normalt benämnt ``\"DEFAULT\"``).  Detta värde kan "
"hämtas och ändras vid körning med hjälp av instansattributet "
"``default_section``. Detta kommer inte att omvärdera en redan analyserad "
"konfigurationsfil, men kommer att användas när du skriver analyserade "
"inställningar till en ny konfigurationsfil."

#: ../../library/configparser.rst:943
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_."
msgstr ""
"Interpolationsbeteendet kan anpassas genom att tillhandahålla en anpassad "
"hanterare via argumentet *interpolation*. ``None`` kan användas för att "
"stänga av interpolering helt, ``ExtendedInterpolation()`` ger en mer "
"avancerad variant inspirerad av ``zc.buildout``.  Mer om ämnet i det "
"`dedikerade dokumentationsavsnittet <#interpolation-av-värden>`_."

#: ../../library/configparser.rst:949
msgid ""
"All option names used in interpolation will be passed through the :meth:"
"`optionxform` method just like any other option name reference.  For "
"example, using the default implementation of :meth:`optionxform` (which "
"converts option names to lower case), the values ``foo %(bar)s`` and ``foo "
"%(BAR)s`` are equivalent."
msgstr ""
"Alla alternativnamn som används i interpoleringen skickas genom metoden :"
"meth:`optionxform` precis som alla andra referenser till alternativnamn.  "
"Till exempel, med standardimplementeringen av :meth:`optionxform` (som "
"konverterar alternativnamn till gemener), är värdena ``foo %(bar)s`` och "
"``foo %(BAR)s`` likvärdiga."

#: ../../library/configparser.rst:955
msgid ""
"When *converters* is given, it should be a dictionary where each key "
"represents the name of a type converter and each value is a callable "
"implementing the conversion from string to the desired datatype.  Every "
"converter gets its own corresponding :meth:`!get*()` method on the parser "
"object and section proxies."
msgstr ""

#: ../../library/configparser.rst:961
msgid "The default *dict_type* is :class:`collections.OrderedDict`."
msgstr "Standardvärdet för *dict_type* är :class:`collections.OrderedDict`."

#: ../../library/configparser.rst:964
msgid ""
"*allow_no_value*, *delimiters*, *comment_prefixes*, *strict*, "
"*empty_lines_in_values*, *default_section* and *interpolation* were added."
msgstr ""
"*allow_no_value*, *delimiters*, *comment_prefixes*, *strict*, "
"*empty_lines_in_values*, *default_section* och *interpolation* har lagts "
"till."

#: ../../library/configparser.rst:969
msgid "The *converters* argument was added."
msgstr "Argumentet *konverterare* har lagts till."

#: ../../library/configparser.rst:972
msgid ""
"The *defaults* argument is read with :meth:`read_dict()`, providing "
"consistent behavior across the parser: non-string keys and values are "
"implicitly converted to strings."
msgstr ""

#: ../../library/configparser.rst:977 ../../library/configparser.rst:1262
msgid ""
"The default *dict_type* is :class:`dict`, since it now preserves insertion "
"order."
msgstr ""
"Standard *dict_type* är :class:`dict`, eftersom den nu bevarar "
"inmatningsordningen."

#: ../../library/configparser.rst:983
msgid "Return a dictionary containing the instance-wide defaults."
msgstr ""
"Returnerar en ordbok som innehåller de instansövergripande standardvärdena."

#: ../../library/configparser.rst:988
msgid ""
"Return a list of the sections available; the *default section* is not "
"included in the list."
msgstr ""
"Returnerar en lista över tillgängliga sektioner; *standardsektionen* ingår "
"inte i listan."

#: ../../library/configparser.rst:994
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised.  If the "
"*default section* name is passed, :exc:`ValueError` is raised.  The name of "
"the section must be a string; if not, :exc:`TypeError` is raised."
msgstr ""
"Lägger till en sektion med namnet *section* till instansen.  Om en sektion "
"med det angivna namnet redan existerar, :exc:`DuplicateSectionError` tas "
"upp.  Om *default section*-namnet anges, genereras :exc:`ValueError`.  "
"Namnet på sektionen måste vara en sträng, annars visas :exc:`TypeError`."

#: ../../library/configparser.rst:999
msgid "Non-string section names raise :exc:`TypeError`."
msgstr "Icke-strängade sektionsnamn ger upphov till :exc:`TypeError`."

#: ../../library/configparser.rst:1005
msgid ""
"Indicates whether the named *section* is present in the configuration. The "
"*default section* is not acknowledged."
msgstr ""
"Indikerar om den namngivna *sektionen* finns i konfigurationen. "
"Standardavsnittet *default section* bekräftas inte."

#: ../../library/configparser.rst:1011
msgid "Return a list of options available in the specified *section*."
msgstr ""
"Returnerar en lista över alternativ som är tillgängliga i den angivna "
"*sektionen*."

#: ../../library/configparser.rst:1016
msgid ""
"If the given *section* exists, and contains the given *option*, return :"
"const:`True`; otherwise return :const:`False`.  If the specified *section* "
"is :const:`None` or an empty string, DEFAULT is assumed."
msgstr ""
"Om den angivna *sektionen* finns och innehåller den angivna *optionen*, "
"returneras :const:`True`; annars returneras :const:`False`.  Om den angivna "
"*sektionen* är :const:`None` eller en tom sträng, antas DEFAULT."

#: ../../library/configparser.rst:1023
msgid ""
"Attempt to read and parse an iterable of filenames, returning a list of "
"filenames which were successfully parsed."
msgstr ""
"Försöker läsa och analysera en iterabel med filnamn och returnerar en lista "
"med filnamn som analyserats framgångsrikt."

#: ../../library/configparser.rst:1026
msgid ""
"If *filenames* is a string, a :class:`bytes` object or a :term:`path-like "
"object`, it is treated as a single filename.  If a file named in *filenames* "
"cannot be opened, that file will be ignored.  This is designed so that you "
"can specify an iterable of potential configuration file locations (for "
"example, the current directory, the user's home directory, and some system-"
"wide directory), and all existing configuration files in the iterable will "
"be read."
msgstr ""
"Om *filnamn* är en sträng, ett :class:`bytes`\\-objekt eller ett :term:`path-"
"like object`, behandlas det som ett enda filnamn.  Om en fil som anges i "
"*filnamn* inte kan öppnas ignoreras den filen.  Detta är utformat så att du "
"kan ange en iterabel av potentiella platser för konfigurationsfiler (till "
"exempel den aktuella katalogen, användarens hemkatalog och någon "
"systemomfattande katalog), och alla befintliga konfigurationsfiler i den "
"iterabla kommer att läsas."

#: ../../library/configparser.rst:1035
msgid ""
"If none of the named files exist, the :class:`ConfigParser` instance will "
"contain an empty dataset.  An application which requires initial values to "
"be loaded from a file should load the required file or files using :meth:"
"`read_file` before calling :meth:`read` for any optional files::"
msgstr ""
"Om ingen av de namngivna filerna finns, kommer :class:`ConfigParser`\\-"
"instansen att innehålla en tom dataset.  En applikation som kräver att "
"initiala värden laddas från en fil bör ladda den eller de filer som krävs "
"med hjälp av :meth:`read_file` innan den anropar :meth:`read` för eventuella "
"valfria filer:"

#: ../../library/configparser.rst:1048
msgid ""
"Added the *encoding* parameter. Previously, all files were read using the "
"default encoding for :func:`open`."
msgstr ""
"Parametern *encoding* har lagts till. Tidigare lästes alla filer med hjälp "
"av standardkodningen för :func:`open`."

#: ../../library/configparser.rst:1052
msgid "The *filenames* parameter accepts a :term:`path-like object`."
msgstr "Parametern *filnamn* accepterar en :term:`path-like object`."

#: ../../library/configparser.rst:1055
msgid "The *filenames* parameter accepts a :class:`bytes` object."
msgstr "Parametern *filnamn* accepterar ett :class:`bytes`\\-objekt."

#: ../../library/configparser.rst:1061
msgid ""
"Read and parse configuration data from *f* which must be an iterable "
"yielding Unicode strings (for example files opened in text mode)."
msgstr ""
"Läser och analyserar konfigurationsdata från *f* som måste vara en iterabel "
"som ger Unicode-strängar (t.ex. filer som öppnas i textläge)."

#: ../../library/configparser.rst:1064
msgid ""
"Optional argument *source* specifies the name of the file being read.  If "
"not given and *f* has a :attr:`!name` attribute, that is used for *source*; "
"the default is ``'<???>'``."
msgstr ""
"Det valfria argumentet *källa* anger namnet på den fil som läses.  Om det "
"inte anges och *f* har attributet :attr:`!name`, används det för *source*; "
"standardvärdet är ``'<???>'``."

#: ../../library/configparser.rst:1068
msgid "Replaces :meth:`!readfp`."
msgstr "Ersätter :meth:`!readfp`."

#: ../../library/configparser.rst:1073
msgid "Parse configuration data from a string."
msgstr "Analyserar konfigurationsdata från en sträng."

#: ../../library/configparser.rst:1075
msgid ""
"Optional argument *source* specifies a context-specific name of the string "
"passed.  If not given, ``'<string>'`` is used.  This should commonly be a "
"filesystem path or a URL."
msgstr ""
"Det valfria argumentet *source* anger ett kontextspecifikt namn på den "
"sträng som skickas.  Om det inte anges används ``'<string>'``.  Detta bör "
"vanligtvis vara en filsystemssökväg eller en URL."

#: ../../library/configparser.rst:1084
msgid ""
"Load configuration from any object that provides a dict-like ``items()`` "
"method.  Keys are section names, values are dictionaries with keys and "
"values that should be present in the section.  If the used dictionary type "
"preserves order, sections and their keys will be added in order. Values are "
"automatically converted to strings."
msgstr ""
"Ladda konfiguration från ett objekt som tillhandahåller en diktliknande "
"metod ``items()``.  Nycklar är namn på sektioner, värden är ordböcker med "
"nycklar och värden som ska finnas i sektionen.  Om den använda ordbokstypen "
"bevarar ordningen kommer sektioner och deras nycklar att läggas till i "
"ordning. Värden konverteras automatiskt till strängar."

#: ../../library/configparser.rst:1090
msgid ""
"Optional argument *source* specifies a context-specific name of the "
"dictionary passed.  If not given, ``<dict>`` is used."
msgstr ""
"Det valfria argumentet *source* anger ett kontextspecifikt namn på den "
"ordbok som skickas.  Om det inte anges används ``<dict>``."

#: ../../library/configparser.rst:1093
msgid "This method can be used to copy state between parsers."
msgstr "Denna metod kan användas för att kopiera tillstånd mellan parsers."

#: ../../library/configparser.rst:1100
msgid ""
"Get an *option* value for the named *section*.  If *vars* is provided, it "
"must be a dictionary.  The *option* is looked up in *vars* (if provided), "
"*section*, and in *DEFAULTSECT* in that order.  If the key is not found and "
"*fallback* is provided, it is used as a fallback value.  ``None`` can be "
"provided as a *fallback* value."
msgstr ""
"Hämta ett *option*-värde för den namngivna *section*.  Om *vars* anges måste "
"det vara en ordbok.  *Alternativet* söks upp i *vars* (om det finns), "
"*section* och *DEFAULTSECT* i den ordningen.  Om nyckeln inte hittas och "
"*fallback* anges, används den som ett reservvärde.  ``None`` kan anges som "
"ett *fallback*-värde."

#: ../../library/configparser.rst:1106
msgid ""
"All the ``'%'`` interpolations are expanded in the return values, unless the "
"*raw* argument is true.  Values for interpolation keys are looked up in the "
"same manner as the option."
msgstr ""
"Alla ``'%'``\\-interpoleringar expanderas i returvärdena, såvida inte "
"argumentet *raw* är true.  Värden för interpolationsnycklar söks upp på "
"samma sätt som för alternativet."

#: ../../library/configparser.rst:1110
msgid ""
"Arguments *raw*, *vars* and *fallback* are keyword only to protect users "
"from trying to use the third argument as the *fallback* fallback (especially "
"when using the mapping protocol)."
msgstr ""
"Argumenten *raw*, *vars* och *fallback* är nyckelord endast för att skydda "
"användare från att försöka använda det tredje argumentet som *fallback*-"
"fallback (särskilt vid användning av mappningsprotokollet)."

#: ../../library/configparser.rst:1118
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to an integer.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""
"En praktisk metod som omvandlar *alternativet* i den angivna *sektionen* "
"till ett heltal.  Se :meth:`get` för förklaring av *raw*, *vars* och "
"*fallback*."

#: ../../library/configparser.rst:1125
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a floating point number.  See :meth:`get` for explanation of *raw*, "
"*vars* and *fallback*."
msgstr ""

#: ../../library/configparser.rst:1132
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a Boolean value.  Note that the accepted values for the option are "
"``'1'``, ``'yes'``, ``'true'``, and ``'on'``, which cause this method to "
"return ``True``, and ``'0'``, ``'no'``, ``'false'``, and ``'off'``, which "
"cause it to return ``False``.  These string values are checked in a case-"
"insensitive manner.  Any other value will cause it to raise :exc:"
"`ValueError`.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""
"En bekvämlighetsmetod som tvingar *alternativet* i den angivna *sektionen* "
"till ett booleskt värde.  Observera att de accepterade värdena för "
"alternativet är ``'1'``, ``'yes'``, ``'true'`` och ``'on'``, som gör att "
"denna metod returnerar ``True``, och ``'0'``, ``'no'``, ``'false'`` och "
"``'off'``, som gör att den returnerar ``False``.  Dessa strängvärden "
"kontrolleras på ett sätt som inte tar hänsyn till skiftlägesskillnader.  "
"Alla andra värden kommer att ge upphov till :exc:`ValueError`.  Se :meth:"
"`get` för förklaring av *raw*, *vars* och *fallback*."

#: ../../library/configparser.rst:1145
msgid ""
"When *section* is not given, return a list of *section_name*, "
"*section_proxy* pairs, including DEFAULTSECT."
msgstr ""
"Om *section* inte anges, returneras en lista med paren *section_name*, "
"*section_proxy*, inklusive DEFAULTSECT."

#: ../../library/configparser.rst:1148
msgid ""
"Otherwise, return a list of *name*, *value* pairs for the options in the "
"given *section*.  Optional arguments have the same meaning as for the :meth:"
"`get` method."
msgstr ""
"I annat fall returneras en lista med paren *namn*, *värde* för alternativen "
"i den angivna *sektionen*.  Valfria argument har samma betydelse som för "
"metoden :meth:`get`."

#: ../../library/configparser.rst:1152
msgid ""
"Items present in *vars* no longer appear in the result.  The previous "
"behaviour mixed actual parser options with variables provided for "
"interpolation."
msgstr ""
"Objekt som finns i *vars* visas inte längre i resultatet.  Det tidigare "
"beteendet blandade faktiska parseralternativ med variabler som "
"tillhandahölls för interpolering."

#: ../../library/configparser.rst:1160
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  *option* and *value* must be "
"strings; if not, :exc:`TypeError` is raised."
msgstr ""
"Om det givna avsnittet finns, sätt det givna alternativet till det angivna "
"värdet; annars uppstår :exc:`NoSectionError`.  *option* och *value* måste "
"vara strängar; om inte, uppstår :exc:`TypeError`."

#: ../../library/configparser.rst:1167
msgid ""
"Write a representation of the configuration to the specified :term:`file "
"object`, which must be opened in text mode (accepting strings).  This "
"representation can be parsed by a future :meth:`read` call.  If "
"*space_around_delimiters* is true, delimiters between keys and values are "
"surrounded by spaces."
msgstr ""
"Skriver en representation av konfigurationen till det angivna :term:`file "
"object`, som måste öppnas i textläge (accepterar strängar).  Denna "
"representation kan analyseras av ett framtida :meth:`read`\\-anrop.  Om "
"*space_around_delimiters* är true, omges avgränsningar mellan nycklar och "
"värden av mellanslag."

#: ../../library/configparser.rst:1175
msgid ""
"Comments in the original configuration file are not preserved when writing "
"the configuration back. What is considered a comment, depends on the given "
"values for *comment_prefix* and *inline_comment_prefix*."
msgstr ""
"Kommentarer i den ursprungliga konfigurationsfilen bevaras inte när "
"konfigurationen skrivs tillbaka. Vad som betraktas som en kommentar beror på "
"de angivna värdena för *comment_prefix* och *inline_comment_prefix*."

#: ../../library/configparser.rst:1183
msgid ""
"Remove the specified *option* from the specified *section*.  If the section "
"does not exist, raise :exc:`NoSectionError`.  If the option existed to be "
"removed, return :const:`True`; otherwise return :const:`False`."
msgstr ""
"Tar bort det angivna *alternativet* från det angivna *avsnittet*.  Om "
"sektionen inte finns, returneras :exc:`NoSectionError`.  Om alternativet "
"existerade för att tas bort, returneras :const:`True`; annars returneras :"
"const:`False`."

#: ../../library/configparser.rst:1191
msgid ""
"Remove the specified *section* from the configuration.  If the section in "
"fact existed, return ``True``.  Otherwise return ``False``."
msgstr ""
"Tar bort den angivna *sektionen* från konfigurationen.  Om avsnittet "
"faktiskt existerade returneras ``True``.  Annars returneras ``False``."

#: ../../library/configparser.rst:1197
msgid ""
"Transforms the option name *option* as found in an input file or as passed "
"in by client code to the form that should be used in the internal "
"structures.  The default implementation returns a lower-case version of "
"*option*; subclasses may override this or client code can set an attribute "
"of this name on instances to affect this behavior."
msgstr ""
"Transformerar optionsnamnet *option* som finns i en indatafil eller som "
"skickas in av klientkod till den form som ska användas i de interna "
"strukturerna.  Standardimplementeringen returnerar en version av *option* "
"med små bokstäver; subklasser kan åsidosätta detta eller så kan klientkoden "
"ange ett attribut med detta namn på instanser för att påverka detta beteende."

#: ../../library/configparser.rst:1203
msgid ""
"You don't need to subclass the parser to use this method, you can also set "
"it on an instance, to a function that takes a string argument and returns a "
"string.  Setting it to ``str``, for example, would make option names case "
"sensitive::"
msgstr ""
"Du behöver inte underklassa parsern för att använda den här metoden, du kan "
"också ställa in den på en instans, till en funktion som tar ett "
"strängargument och returnerar en sträng.  Att ställa in den till ``str``, "
"till exempel, skulle göra alternativnamn skiftlägeskänsliga::"

#: ../../library/configparser.rst:1211
msgid ""
"Note that when reading configuration files, whitespace around the option "
"names is stripped before :meth:`optionxform` is called."
msgstr ""
"Observera att vid läsning av konfigurationsfiler tas blanksteg runt "
"alternativnamnen bort innan :meth:`optionxform` anropas."

#: ../../library/configparser.rst:1217
msgid "Use :meth:`read_file` instead."
msgstr ""

#: ../../library/configparser.rst:1220
msgid ""
":meth:`readfp` now iterates on *fp* instead of calling ``fp.readline()``."
msgstr ""

#: ../../library/configparser.rst:1223
msgid ""
"For existing code calling :meth:`readfp` with arguments which don't support "
"iteration, the following generator may be used as a wrapper around the file-"
"like object::"
msgstr ""

#: ../../library/configparser.rst:1233
msgid ""
"Instead of ``parser.readfp(fp)`` use ``parser."
"read_file(readline_generator(fp))``."
msgstr ""

#: ../../library/configparser.rst:1239
msgid ""
"The maximum depth for recursive interpolation for :meth:`~configparser."
"ConfigParser.get` when the *raw* parameter is false.  This is relevant only "
"when the default *interpolation* is used."
msgstr ""
"Det maximala djupet för rekursiv interpolation för :meth:`~configparser."
"ConfigParser.get` när parametern *raw* är false.  Detta är endast relevant "
"när standardvärdet *interpolation* används."

#: ../../library/configparser.rst:1247
msgid "RawConfigParser Objects"
msgstr "RawConfigParser-objekt"

#: ../../library/configparser.rst:1257
msgid ""
"Legacy variant of the :class:`ConfigParser`.  It has interpolation disabled "
"by default and allows for non-string section names, option names, and values "
"via its unsafe ``add_section`` and ``set`` methods, as well as the legacy "
"``defaults=`` keyword argument handling."
msgstr ""
"Äldre variant av :class:`ConfigParser`.  Den har interpolering inaktiverad "
"som standard och tillåter icke-strängade sektionsnamn, alternativnamn och "
"värden via dess osäkra metoder ``add_section`` och ``set``, samt den äldre "
"``defaults=`` nyckelordsargumenthanteringen."

#: ../../library/configparser.rst:1267
msgid ""
"Consider using :class:`ConfigParser` instead which checks types of the "
"values to be stored internally.  If you don't want interpolation, you can "
"use ``ConfigParser(interpolation=None)``."
msgstr ""
"Överväg att använda :class:`ConfigParser` istället, som kontrollerar typerna "
"för de värden som ska lagras internt.  Om du inte vill ha interpolering kan "
"du använda ``ConfigParser(interpolation=None)``."

#: ../../library/configparser.rst:1274
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised.  If the "
"*default section* name is passed, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/configparser.rst:1278
msgid ""
"Type of *section* is not checked which lets users create non-string named "
"sections.  This behaviour is unsupported and may cause internal errors."
msgstr ""
"Type of *section* kontrolleras inte, vilket gör det möjligt för användare "
"att skapa avsnitt med namn som inte är strängnamn.  Detta beteende stöds "
"inte och kan orsaka interna fel."

#: ../../library/configparser.rst:1284
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  While it is possible to use :class:"
"`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters set to "
"true) for *internal* storage of non-string values, full functionality "
"(including interpolation and output to files) can only be achieved using "
"string values."
msgstr ""
"Om den givna sektionen finns, sätt det givna alternativet till det angivna "
"värdet; annars uppstår :exc:`NoSectionError`.  Det är möjligt att använda :"
"class:`RawConfigParser` (eller :class:`ConfigParser` med *raw*-parametrar "
"inställda på true) för *intern* lagring av värden som inte är strängvärden, "
"men full funktionalitet (inklusive interpolering och utmatning till filer) "
"kan endast uppnås med strängvärden."

#: ../../library/configparser.rst:1291
msgid ""
"This method lets users assign non-string values to keys internally.  This "
"behaviour is unsupported and will cause errors when attempting to write to a "
"file or get it in non-raw mode.  **Use the mapping protocol API** which does "
"not allow such assignments to take place."
msgstr ""
"Med den här metoden kan användare tilldela icke-strängvärden till nycklar "
"internt.  Detta beteende stöds inte och kommer att orsaka fel när man "
"försöker skriva till en fil eller hämta den i icke-rått läge.  **Använd "
"mappningsprotokollets API** som inte tillåter att sådana tilldelningar sker."

#: ../../library/configparser.rst:1298
msgid "Exceptions"
msgstr "Undantag"

#: ../../library/configparser.rst:1302
msgid "Base class for all other :mod:`configparser` exceptions."
msgstr "Basklass för alla andra :mod:`configparser`\\-undantag."

#: ../../library/configparser.rst:1307
msgid "Exception raised when a specified section is not found."
msgstr "Undantag som uppstår när ett angivet avsnitt inte hittas."

#: ../../library/configparser.rst:1312
msgid ""
"Exception raised if :meth:`~ConfigParser.add_section` is called with the "
"name of a section that is already present or in strict parsers when a "
"section if found more than once in a single input file, string or dictionary."
msgstr ""
"Undantag om :meth:`~ConfigParser.add_section` anropas med namnet på ett "
"avsnitt som redan finns eller i strikta parsers när ett avsnitt hittas mer "
"än en gång i en enda indatafil, sträng eller ordbok."

#: ../../library/configparser.rst:1316
msgid ""
"Added the optional *source* and *lineno* attributes and parameters to :meth:"
"`!__init__`."
msgstr ""
"Lagt till de valfria attributen och parametrarna *source* och *lineno* till :"
"meth:`!__init__`."

#: ../../library/configparser.rst:1323
msgid ""
"Exception raised by strict parsers if a single option appears twice during "
"reading from a single file, string or dictionary. This catches misspellings "
"and case sensitivity-related errors, e.g. a dictionary may have two keys "
"representing the same case-insensitive configuration key."
msgstr ""
"Undantag som tas upp av strikta parsers om ett enda alternativ visas två "
"gånger under läsning från en enda fil, sträng eller ordbok. Detta fångar upp "
"felstavningar och fel relaterade till skiftlägeskänslighet, t.ex. kan en "
"ordbok ha två nycklar som representerar samma skiftlägesokänsliga "
"konfigurationsnyckel."

#: ../../library/configparser.rst:1331
msgid ""
"Exception raised when a specified option is not found in the specified "
"section."
msgstr ""
"Undantag som uppstår när ett angivet alternativ inte finns i det angivna "
"avsnittet."

#: ../../library/configparser.rst:1337
msgid ""
"Base class for exceptions raised when problems occur performing string "
"interpolation."
msgstr ""
"Basklass för undantag som uppstår när det uppstår problem vid "
"stränginterpolering."

#: ../../library/configparser.rst:1343
msgid ""
"Exception raised when string interpolation cannot be completed because the "
"number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`.  Subclass of :"
"exc:`InterpolationError`."
msgstr ""
"Undantag som uppstår när stränginterpolering inte kan slutföras eftersom "
"antalet iterationer överstiger :const:`MAX_INTERPOLATION_DEPTH`.  Underklass "
"till :exc:`InterpolationError`."

#: ../../library/configparser.rst:1350
msgid ""
"Exception raised when an option referenced from a value does not exist. "
"Subclass of :exc:`InterpolationError`."
msgstr ""
"Undantag som uppstår när ett alternativ som refereras från ett värde inte "
"finns. Underklass till :exc:`InterpolationError`."

#: ../../library/configparser.rst:1356
msgid ""
"Exception raised when the source text into which substitutions are made does "
"not conform to the required syntax.  Subclass of :exc:`InterpolationError`."
msgstr ""
"Undantag som uppstår när källtexten i vilken substitutioner görs inte "
"överensstämmer med den syntax som krävs.  Underklass till :exc:"
"`InterpolationError`."

#: ../../library/configparser.rst:1362
msgid ""
"Exception raised when attempting to parse a file which has no section "
"headers."
msgstr ""
"Exception vid försök att analysera en fil som inte har några "
"avsnittsrubriker."

#: ../../library/configparser.rst:1368
msgid "Exception raised when errors occur attempting to parse a file."
msgstr ""
"Undantag som uppstår när fel inträffar vid försök att analysera en fil."

#: ../../library/configparser.rst:1370
msgid ""
"The ``filename`` attribute and :meth:`!__init__` argument were renamed to "
"``source`` for consistency."
msgstr ""

#: ../../library/configparser.rst:1376
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../library/configparser.rst:1377
msgid ""
"Config parsers allow for heavy customization.  If you are interested in "
"changing the behaviour outlined by the footnote reference, consult the "
"`Customizing Parser Behaviour`_ section."
msgstr ""
"Config-parsers tillåter omfattande anpassningar.  Om du är intresserad av "
"att ändra det beteende som beskrivs i fotnotens referens, se avsnittet "
"`Customizing Parser Behaviour`_."

#: ../../library/configparser.rst:16
msgid ".ini"
msgstr ".ini"

#: ../../library/configparser.rst:16
msgid "file"
msgstr "fil"

#: ../../library/configparser.rst:16
msgid "configuration"
msgstr "konfiguration"

#: ../../library/configparser.rst:16
msgid "ini file"
msgstr "ini-fil"

#: ../../library/configparser.rst:16
msgid "Windows ini file"
msgstr "Windows ini-fil"

#: ../../library/configparser.rst:335
msgid "% (percent)"
msgstr "% (procent)"

#: ../../library/configparser.rst:335 ../../library/configparser.rst:368
msgid "interpolation in configuration files"
msgstr "interpolation i konfigurationsfiler"

#: ../../library/configparser.rst:368
msgid "$ (dollar)"
msgstr "$ (dollar)"
