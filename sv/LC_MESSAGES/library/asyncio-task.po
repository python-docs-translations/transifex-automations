# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr "Coroutines och Tasks"

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""
"Detta avsnitt beskriver asyncio-API:er på hög nivå för att arbeta med "
"coroutines och Tasks."

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:121
msgid "Coroutines"
msgstr "Coroutines"

#: ../../library/asyncio-task.rst:21
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints \"world\"::"
msgstr ""
":term:`Coroutines <coroutine>` deklarerade med async/await-syntaxen är det "
"föredragna sättet att skriva asyncio-applikationer.  Följande kodavsnitt "
"skriver till exempel ut \"hello\", väntar 1 sekund och skriver sedan ut "
"\"world\"::"

#: ../../library/asyncio-task.rst:37
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""
"Observera att det inte räcker med att anropa en coroutine för att den ska "
"exekveras::"

#: ../../library/asyncio-task.rst:43
msgid "To actually run a coroutine, asyncio provides three main mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:45
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\" "
"function (see the above example.)"
msgstr ""
"Funktionen :func:`asyncio.run` för att köra funktionen \"main()\" på den "
"högsta nivån (se exemplet ovan)"

#: ../../library/asyncio-task.rst:48
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\" "
"after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""
"Väntar på en coroutine.  Följande kodavsnitt kommer att skriva ut \"hello\" "
"efter att ha väntat i 1 sekund, och sedan skriva ut \"world\" efter att ha "
"väntat i *ytterligare* 2 sekunder::"

#: ../../library/asyncio-task.rst:69
msgid "Expected output::"
msgstr "Förväntad utgång::"

#: ../../library/asyncio-task.rst:76
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""
"Funktionen :func:`asyncio.create_task` för att köra coroutines samtidigt som "
"asyncio :class:`Tasks <Task>`."

#: ../../library/asyncio-task.rst:79
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""
"Låt oss modifiera exemplet ovan och köra två ``say_after`` coroutines "
"*samtidigt*::"

#: ../../library/asyncio-task.rst:98
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""
"Observera att den förväntade utdata nu visar att utdraget körs 1 sekund "
"snabbare än tidigare::"

#: ../../library/asyncio-task.rst:110
msgid "Awaitables"
msgstr "Förväntansfulla"

#: ../../library/asyncio-task.rst:112
msgid ""
"We say that an object is an **awaitable** object if it can be used in an :"
"keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""
"Vi säger att ett objekt är ett **awaitable**-objekt om det kan användas i "
"ett :keyword:`await`\\-uttryck.  Många asyncio API:er är utformade för att "
"acceptera awaitables."

#: ../../library/asyncio-task.rst:116
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""
"Det finns tre huvudtyper av *awaitable*-objekt: **Koroutiner**, "
"**Uppgifter** och **Futures**."

#: ../../library/asyncio-task.rst:122
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""
"Python coroutines är *awaitables* och kan därför väntas från andra "
"coroutines::"

#: ../../library/asyncio-task.rst:143
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""
"I den här dokumentationen kan termen \"coroutine\" användas för två "
"närbesläktade begrepp:"

#: ../../library/asyncio-task.rst:146
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr "en *coroutine-funktion*: en :keyword:`async def`\\-funktion;"

#: ../../library/asyncio-task.rst:148
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""
"ett *koroutinobjekt*: ett objekt som returneras genom anrop av en "
"*koroutinfunktion*."

#: ../../library/asyncio-task.rst:151
msgid ""
"asyncio also supports legacy :ref:`generator-based "
"<asyncio_generator_based_coro>` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:156
msgid "Tasks"
msgstr "Uppgifter"

#: ../../library/asyncio-task.rst:157
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr "*Tasks* används för att schemalägga coroutines *samtidigt*."

#: ../../library/asyncio-task.rst:159
msgid ""
"When a coroutine is wrapped into a *Task* with functions like :func:`asyncio."
"create_task` the coroutine is automatically scheduled to run soon::"
msgstr ""
"När en coroutine paketeras in i en *Task* med funktioner som :func:`asyncio."
"create_task` schemaläggs coroutinen automatiskt för att köras snart::"

#: ../../library/asyncio-task.rst:181
msgid "Futures"
msgstr "Terminskontrakt"

#: ../../library/asyncio-task.rst:182
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""
"En :class:`Future` är ett speciellt **lågnivå** väntande objekt som "
"representerar ett **eventuellt resultat** av en asynkron operation."

#: ../../library/asyncio-task.rst:185
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""
"När ett Future-objekt är *awaited* betyder det att coroutinen kommer att "
"vänta tills Future-objektet har lösts upp på något annat ställe."

#: ../../library/asyncio-task.rst:188
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used "
"with async/await."
msgstr ""
"Framtida objekt i asyncio behövs för att göra det möjligt att använda "
"callback-baserad kod med async/await."

#: ../../library/asyncio-task.rst:191
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""
"Normalt **finns det inget behov** av att skapa Future-objekt på "
"applikationsnivå."

#: ../../library/asyncio-task.rst:194
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be "
"awaited::"
msgstr ""
"Framtida objekt, som ibland exponeras av bibliotek och vissa asyncio API:er, "
"kan inväntas::"

#: ../../library/asyncio-task.rst:206
msgid ""
"A good example of a low-level function that returns a Future object is :meth:"
"`loop.run_in_executor`."
msgstr ""
"Ett bra exempel på en lågnivåfunktion som returnerar ett Future-objekt är :"
"meth:`loop.run_in_executor`."

#: ../../library/asyncio-task.rst:211
msgid "Running an asyncio Program"
msgstr "Kör ett asyncioprogram"

#: ../../library/asyncio-task.rst:215
msgid "Execute the :term:`coroutine` *coro* and return the result."
msgstr ""

#: ../../library/asyncio-task.rst:217
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio "
"event loop, *finalizing asynchronous generators*, and closing the threadpool."
msgstr ""

#: ../../library/asyncio-task.rst:221
msgid ""
"This function cannot be called when another asyncio event loop is running in "
"the same thread."
msgstr ""
"Denna funktion kan inte anropas när en annan asyncio-händelseslinga körs i "
"samma tråd."

#: ../../library/asyncio-task.rst:224
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../../library/asyncio-task.rst:226
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr ""

#: ../../library/asyncio-task.rst:230 ../../library/asyncio-task.rst:350
#: ../../library/asyncio-task.rst:471 ../../library/asyncio-task.rst:603
msgid "Example::"
msgstr "Exempel::"

#: ../../library/asyncio-task.rst:240
msgid "Updated to use :meth:`loop.shutdown_default_executor`."
msgstr "Uppdaterad för att använda :meth:`loop.shutdown_default_executor`."

#: ../../library/asyncio-task.rst:244
msgid ""
"The source code for ``asyncio.run()`` can be found in :source:`Lib/asyncio/"
"runners.py`."
msgstr ""

#: ../../library/asyncio-task.rst:248
msgid "Creating Tasks"
msgstr "Skapa uppgifter"

#: ../../library/asyncio-task.rst:252
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""
"Packa in *coro* :ref:`coroutine <coroutine>` i en :class:`Task` och "
"schemalägg dess exekvering.  Returnera Task-objektet."

#: ../../library/asyncio-task.rst:255
msgid ""
"If *name* is not ``None``, it is set as the name of the task using :meth:"
"`Task.set_name`."
msgstr ""

#: ../../library/asyncio-task.rst:258
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, :exc:"
"`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""
"Uppgiften utförs i den loop som returneras av :func:`get_running_loop`, :exc:"
"`RuntimeError` uppstår om det inte finns någon loop i den aktuella tråden."

#: ../../library/asyncio-task.rst:264
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid execution."
msgstr ""

#: ../../library/asyncio-task.rst:269 ../../library/asyncio-task.rst:785
msgid "Added the ``name`` parameter."
msgstr ""

#: ../../library/asyncio-task.rst:274
msgid "Sleeping"
msgstr "Sovande"

#: ../../library/asyncio-task.rst:278
msgid "Block for *delay* seconds."
msgstr "Blockera i *fördröjning* sekunder."

#: ../../library/asyncio-task.rst:280
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""
"Om *result* anges returneras det till den som anropar när coroutinen "
"avslutas."

#: ../../library/asyncio-task.rst:283
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""
"``sleep()`` avbryter alltid den aktuella uppgiften, så att andra uppgifter "
"kan köras."

#: ../../library/asyncio-task.rst:286
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr ""
"Om du ställer in fördröjningen till 0 får du en optimerad väg så att andra "
"uppgifter kan köras. Detta kan användas av funktioner som körs under lång "
"tid för att undvika att blockera händelseslingan under hela funktionsanropet."

#: ../../library/asyncio-task.rst:292 ../../library/asyncio-task.rst:347
#: ../../library/asyncio-task.rst:437 ../../library/asyncio-task.rst:468
#: ../../library/asyncio-task.rst:555 ../../library/asyncio-task.rst:602
#: ../../library/asyncio-task.rst:790
msgid "The *loop* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:295
msgid ""
"Example of coroutine displaying the current date every second for 5 seconds::"
msgstr ""
"Exempel på coroutine som visar aktuellt datum varannan sekund i 5 sekunder::"

#: ../../library/asyncio-task.rst:314
msgid "Running Tasks Concurrently"
msgstr "Köra uppgifter samtidigt"

#: ../../library/asyncio-task.rst:318
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""
"Kör :ref:`awaitable objects <asyncio-awaitables>` i *aws*-sekvensen "
"*samtidigt*."

#: ../../library/asyncio-task.rst:321
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task."
msgstr ""
"Om någon awaitable i *aws* är en coroutine schemaläggs den automatiskt som "
"en Task."

#: ../../library/asyncio-task.rst:324
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""
"Om alla awaitables har slutförts framgångsrikt är resultatet en aggregerad "
"lista över returnerade värden.  Ordningen på resultatvärdena motsvarar "
"ordningen på awaitables i *aws*."

#: ../../library/asyncio-task.rst:328
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is "
"immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to "
"run."
msgstr ""
"Om *return_exceptions* är ``False`` (standard), kommer det första undantaget "
"som uppstår omedelbart att överföras till den uppgift som väntar på "
"``gather()``.  Andra awaitables i *aws*-sekvensen **avbryts inte** och "
"fortsätter att köras."

#: ../../library/asyncio-task.rst:333
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""
"Om *return_exceptions* är ``True``, behandlas undantag på samma sätt som "
"lyckade resultat och sammanställs i resultatlistan."

#: ../../library/asyncio-task.rst:336
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""
"Om ``gather()`` är *avbruten*, är alla inskickade awaitables (som inte har "
"slutförts ännu) också *avbrutna*."

#: ../../library/asyncio-task.rst:339
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""
"Om någon uppgift eller framtid från *aws*-sekvensen *annulleras*, behandlas "
"den som om den gav upphov till :exc:`CancelledError` -- anropet ``gather()`` "
"annulleras **inte** i detta fall.  Detta för att förhindra att avbrytandet "
"av en inskickad Task/Future orsakar avbrytande av andra Tasks/Futures."

#: ../../library/asyncio-task.rst:388
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:395
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""
"Om *gather* själv avbryts, sprids avbrottet oavsett *return_exceptions*."

#: ../../library/asyncio-task.rst:401
msgid "Shielding From Cancellation"
msgstr "Avskärmning från annullering"

#: ../../library/asyncio-task.rst:405
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being :meth:"
"`cancelled <Task.cancel>`."
msgstr ""
"Skydda ett :ref:`awaitable object <asyncio-awaitables>` från att bli :meth:"
"`cancelled <Task.cancel>`."

#: ../../library/asyncio-task.rst:408 ../../library/asyncio-task.rst:448
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr "Om *aw* är en coroutine schemaläggs den automatiskt som en Task."

#: ../../library/asyncio-task.rst:410
msgid "The statement::"
msgstr "Uttalandet::"

#: ../../library/asyncio-task.rst:414
msgid "is equivalent to::"
msgstr "är likvärdig med::"

#: ../../library/asyncio-task.rst:418
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a :exc:"
"`CancelledError`."
msgstr ""
"*utom* att om coroutinen som innehåller den avbryts, avbryts inte den Task "
"som körs i ``något()``.  Ur ``något()`` synvinkel skedde inte avbrytandet. "
"Även om dess anropare fortfarande avbryts, så ger \"await\"-uttrycket "
"fortfarande upphov till ett :exc:`CancelledError`."

#: ../../library/asyncio-task.rst:424
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""
"Om ``något()`` upphävs på annat sätt (dvs. inifrån sig själv) skulle det "
"också upphäva ``sköld()``."

#: ../../library/asyncio-task.rst:427
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""
"Om man vill ignorera annulleringen helt (rekommenderas inte) bör funktionen "
"``shield()`` kombineras med en try/except-sats enligt följande::"

#: ../../library/asyncio-task.rst:441
msgid "Timeouts"
msgstr "Tidsfrister"

#: ../../library/asyncio-task.rst:445
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""
"Vänta på att *aw* :ref:`awaitable <asyncio-awaitables>` ska slutföras med en "
"timeout."

#: ../../library/asyncio-task.rst:450
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait "
"for.  If *timeout* is ``None``, block until the future completes."
msgstr ""
"*timeout* kan antingen vara ``None`` eller ett float eller int antal "
"sekunder att vänta på.  Om *timeout* är ``None``, blockeras tills framtiden "
"är klar."

#: ../../library/asyncio-task.rst:454
msgid ""
"If a timeout occurs, it cancels the task and raises :exc:`asyncio."
"TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:457
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in :func:"
"`shield`."
msgstr ""
"För att undvika uppgiften :meth:`cancellation <Task.cancel>`, linda in den "
"i :func:`shield`."

#: ../../library/asyncio-task.rst:460
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr ""
"Funktionen kommer att vänta tills framtiden faktiskt avbryts, så den totala "
"väntetiden kan överstiga *timeout*. Om ett undantag inträffar under "
"annulleringen sprids det."

#: ../../library/asyncio-task.rst:464
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr "Om väntan avbryts, avbryts också den framtida *aw*."

#: ../../library/asyncio-task.rst:491
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:498
msgid "Waiting Primitives"
msgstr "Primitiva väntetider"

#: ../../library/asyncio-task.rst:503
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:507
msgid "The *aws* iterable must not be empty."
msgstr "*aws*-iterabeln får inte vara tom."

#: ../../library/asyncio-task.rst:509
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr "Returnerar två uppsättningar av Tasks/Futures: ``(utförd, väntande)``."

#: ../../library/asyncio-task.rst:511
msgid "Usage::"
msgstr "Användning::"

#: ../../library/asyncio-task.rst:515
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum "
"number of seconds to wait before returning."
msgstr ""
"*timeout* (en float eller int), om den anges, kan användas för att styra det "
"maximala antalet sekunder som ska väntas innan återgång."

#: ../../library/asyncio-task.rst:518
msgid ""
"Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures "
"or Tasks that aren't done when the timeout occurs are simply returned in the "
"second set."
msgstr ""

#: ../../library/asyncio-task.rst:522
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""
"*return_when* anger när denna funktion ska returnera.  Den måste vara en av "
"följande konstanter:"

#: ../../library/asyncio-task.rst:528
msgid "Constant"
msgstr "Konstant"

#: ../../library/asyncio-task.rst:528
msgid "Description"
msgstr "Beskrivning"

#: ../../library/asyncio-task.rst:530
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:530
msgid "The function will return when any future finishes or is cancelled."
msgstr ""
"Funktionen kommer att återkomma när någon framtid avslutas eller avbryts."

#: ../../library/asyncio-task.rst:533
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../library/asyncio-task.rst:533
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:539
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:539
msgid "The function will return when all futures finish or are cancelled."
msgstr "Funktionen återkommer när alla terminer är avslutade eller avbrutna."

#: ../../library/asyncio-task.rst:543
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""
"Till skillnad från :func:`~asyncio.wait_for` avbryter inte ``wait()`` "
"futures när en timeout inträffar."

#: ../../library/asyncio-task.rst:548
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a "
"Task.  Passing coroutines objects to ``wait()`` directly is deprecated as it "
"leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:560
msgid ""
"``wait()`` schedules coroutines as Tasks automatically and later returns "
"those implicitly created Task objects in ``(done, pending)`` sets.  "
"Therefore the following code won't work as expected::"
msgstr ""

#: ../../library/asyncio-task.rst:573
msgid "Here is how the above snippet can be fixed::"
msgstr ""

#: ../../library/asyncio-task.rst:586
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr ""

#: ../../library/asyncio-task.rst:592
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently.  Return an iterator of coroutines. Each coroutine returned can "
"be awaited to get the earliest next result from the iterable of the "
"remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:597
msgid ""
"Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures "
"are done."
msgstr ""

#: ../../library/asyncio-task.rst:611
msgid "Running in Threads"
msgstr "Löpande i trådar"

#: ../../library/asyncio-task.rst:615
msgid "Asynchronously run function *func* in a separate thread."
msgstr "Asynkron körning av funktionen *func* i en separat tråd."

#: ../../library/asyncio-task.rst:617
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""
"Alla \\*args och \\*\\*kwargs som anges för denna funktion skickas direkt "
"till *func*. Dessutom sprids den aktuella :class:`contextvars.Context`, "
"vilket gör att kontextvariabler från händelseslingans tråd kan nås i den "
"separata tråden."

#: ../../library/asyncio-task.rst:622
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr ""
"Returnera en coroutine som kan inväntas för att få det slutliga resultatet "
"av *func*."

#: ../../library/asyncio-task.rst:624
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were ran in the main thread. For example::"
msgstr ""

#: ../../library/asyncio-task.rst:654
msgid ""
"Directly calling `blocking_io()` in any coroutine would block the event loop "
"for its duration, resulting in an additional 1 second of run time. Instead, "
"by using `asyncio.to_thread()`, we can run it in a separate thread without "
"blocking the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:661
msgid ""
"Due to the :term:`GIL`, `asyncio.to_thread()` can typically only be used to "
"make IO-bound functions non-blocking. However, for extension modules that "
"release the GIL or alternative Python implementations that don't have one, "
"`asyncio.to_thread()` can also be used for CPU-bound functions."
msgstr ""

#: ../../library/asyncio-task.rst:670
msgid "Scheduling From Other Threads"
msgstr "Schemaläggning från andra trådar"

#: ../../library/asyncio-task.rst:674
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr "Skicka en coroutine till den angivna händelseslingan.  Tråd-säker."

#: ../../library/asyncio-task.rst:676
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""
"Returnera en :class:`concurrent.futures.Future` för att vänta på resultatet "
"från en annan OS-tråd."

#: ../../library/asyncio-task.rst:679
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""
"Denna funktion är avsedd att anropas från en annan OS-tråd än den där "
"händelseslingan körs.  Exempel::"

#: ../../library/asyncio-task.rst:691
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""
"Om ett undantag inträffar i coroutinen kommer den returnerade Future att "
"meddelas.  Den kan också användas för att avbryta uppgiften i "
"händelseslingan::"

#: ../../library/asyncio-task.rst:705
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"Se :ref:`concurrency and multithreading <asyncio-multithreading>` i "
"dokumentationen."

#: ../../library/asyncio-task.rst:708
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to "
"be passed explicitly."
msgstr ""
"Till skillnad från andra asynciofunktioner kräver den här funktionen att "
"argumentet *loop* skickas explicit."

#: ../../library/asyncio-task.rst:715
msgid "Introspection"
msgstr "Introspektion"

#: ../../library/asyncio-task.rst:720
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""
"Returnerar den instans av :class:`Task` som körs för tillfället, eller "
"``None`` om ingen uppgift körs."

#: ../../library/asyncio-task.rst:723
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""
"Om *loop* är ``None`` används :func:`get_running_loop` för att hämta den "
"aktuella loopen."

#: ../../library/asyncio-task.rst:731
msgid "Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""
"Returnerar en uppsättning ännu inte avslutade :class:`Task`\\-objekt som "
"körs av slingan."

#: ../../library/asyncio-task.rst:734
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""
"Om *loop* är ``None``, används :func:`get_running_loop` för att hämta "
"aktuell loop."

#: ../../library/asyncio-task.rst:741
msgid "Task Object"
msgstr "Uppgiftsobjekt"

#: ../../library/asyncio-task.rst:745
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""
"Ett :class:`Future-liknande <Future>`\\-objekt som kör en Python :ref:"
"`coroutine <coroutine>`.  Inte tråd-säkert."

#: ../../library/asyncio-task.rst:748
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""
"Tasks används för att köra coroutines i händelseslingor. Om en coroutine "
"väntar på en Future, avbryter Task exekveringen av coroutinen och väntar på "
"att Future ska slutföras.  När framtiden är *färdig* återupptas exekveringen "
"av den omslutna coroutinen."

#: ../../library/asyncio-task.rst:754
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""
"Eventloops använder kooperativ schemaläggning: en eventloop kör en Task åt "
"gången.  Medan en Task väntar på att en Future ska slutföras, kör "
"eventloopen andra Tasks, callbacks eller utför IO-operationer."

#: ../../library/asyncio-task.rst:759
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""
"Använd högnivåfunktionen :func:`asyncio.create_task` för att skapa Tasks, "
"eller lågnivåfunktionerna :meth:`loop.create_task` eller :func:"
"`ensure_future`.  Manuell instansiering av Tasks avråds."

#: ../../library/asyncio-task.rst:764
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""
"För att avbryta en pågående Task används metoden :meth:`cancel`.  Om du "
"anropar den kommer uppgiften att kasta ett :exc:`CancelledError` undantag i "
"den omslutna coroutinen.  Om en coroutine väntar på ett Future-objekt under "
"avbrytandet, kommer Future-objektet att avbrytas."

#: ../../library/asyncio-task.rst:769
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method "
"returns ``True`` if the wrapped coroutine did not suppress the :exc:"
"`CancelledError` exception and was actually cancelled."
msgstr ""
":meth:`cancelled` kan användas för att kontrollera om uppgiften avbröts. "
"Metoden returnerar ``True`` om den inlindade coroutinen inte undertryckte :"
"exc:`CancelledError` undantaget och faktiskt avbröts."

#: ../../library/asyncio-task.rst:774
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except :"
"meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""
":class:`asyncio.Task` ärver från :class:`Future` alla dess API:er utom :meth:"
"`Future.set_result` och :meth:`Future.set_exception`."

#: ../../library/asyncio-task.rst:778
msgid ""
"Tasks support the :mod:`contextvars` module.  When a Task is created it "
"copies the current context and later runs its coroutine in the copied "
"context."
msgstr ""

#: ../../library/asyncio-task.rst:782
msgid "Added support for the :mod:`contextvars` module."
msgstr "Lagt till stöd för modulen :mod:`contextvars`."

#: ../../library/asyncio-task.rst:793
msgid "Request the Task to be cancelled."
msgstr "Begär att uppgiften ska avbrytas."

#: ../../library/asyncio-task.rst:795
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:798
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike :meth:"
"`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task will "
"be cancelled, although suppressing cancellation completely is not common and "
"is actively discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:806
msgid "Added the ``msg`` parameter."
msgstr ""

#: ../../library/asyncio-task.rst:811
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""
"Följande exempel illustrerar hur coroutines kan fånga upp begäran om "
"annullering::"

#: ../../library/asyncio-task.rst:850
msgid "Return ``True`` if the Task is *cancelled*."
msgstr "Returnerar ``True`` om uppgiften är *annullerad*."

#: ../../library/asyncio-task.rst:852
msgid ""
"The Task is *cancelled* when the cancellation was requested with :meth:"
"`cancel` and the wrapped coroutine propagated the :exc:`CancelledError` "
"exception thrown into it."
msgstr ""
"Uppgiften är *avbruten* när avbrytandet begärdes med :meth:`cancel` och den "
"omslutna coroutinen spred undantaget :exc:`CancelledError` som kastades in i "
"den."

#: ../../library/asyncio-task.rst:858
msgid "Return ``True`` if the Task is *done*."
msgstr "Returnerar ``True`` om uppgiften är *done*."

#: ../../library/asyncio-task.rst:860
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""
"En Task är *färdig* när den omslutna coroutinen antingen returnerade ett "
"värde, utlöste ett undantag eller när Task avbröts."

#: ../../library/asyncio-task.rst:865
msgid "Return the result of the Task."
msgstr "Returnera resultatet av uppgiften."

#: ../../library/asyncio-task.rst:867
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""
"Om uppgiften är *utförd* returneras resultatet av den omslutna coroutinen "
"(eller om coroutinen gav upphov till ett undantag, ges det undantaget upp "
"igen)"

#: ../../library/asyncio-task.rst:871 ../../library/asyncio-task.rst:885
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError` "
"exception."
msgstr ""
"Om uppgiften har *avbrutits* ger den här metoden upphov till ett :exc:"
"`CancelledError`\\-undantag."

#: ../../library/asyncio-task.rst:874
msgid ""
"If the Task's result isn't yet available, this method raises a :exc:"
"`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:879
msgid "Return the exception of the Task."
msgstr "Returnera undantaget för uppgiften."

#: ../../library/asyncio-task.rst:881
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If "
"the wrapped coroutine returned normally this method returns ``None``."
msgstr ""
"Om den inkapslade coroutinen gav upphov till ett undantag returneras "
"undantaget.  Om den inkapslade coroutinen returnerades normalt returnerar "
"denna metod ``None``."

#: ../../library/asyncio-task.rst:888
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError` "
"exception."
msgstr ""
"Om uppgiften inte är *färdig* ännu, ger denna metod upphov till ett :exc:"
"`InvalidStateError`\\-undantag."

#: ../../library/asyncio-task.rst:893
msgid "Add a callback to be run when the Task is *done*."
msgstr "Lägg till en återuppringning som ska köras när uppgiften är *klar*."

#: ../../library/asyncio-task.rst:895 ../../library/asyncio-task.rst:904
msgid "This method should only be used in low-level callback-based code."
msgstr ""
"Denna metod bör endast användas i kod som bygger på återuppringning på låg "
"nivå."

#: ../../library/asyncio-task.rst:897
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""
"Se dokumentationen av :meth:`Future.add_done_callback` för mer information."

#: ../../library/asyncio-task.rst:902
msgid "Remove *callback* from the callbacks list."
msgstr "Ta bort *callback* från listan över callbacks."

#: ../../library/asyncio-task.rst:906
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""
"Se dokumentationen av :meth:`Future.remove_done_callback` för mer "
"information."

#: ../../library/asyncio-task.rst:911
msgid "Return the list of stack frames for this Task."
msgstr "Returnera listan med stapelramar för denna Task."

#: ../../library/asyncio-task.rst:913
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception, "
"this returns the list of traceback frames."
msgstr ""
"Om den inkapslade coroutinen inte är klar returneras den stack där den är "
"avbruten.  Om coroutinen har slutförts framgångsrikt eller avbrutits, "
"returneras en tom lista. Om coroutinen avslutades av ett undantag returneras "
"listan med spårningsramar."

#: ../../library/asyncio-task.rst:919
msgid "The frames are always ordered from oldest to newest."
msgstr "Ramarna är alltid sorterade från äldst till nyast."

#: ../../library/asyncio-task.rst:921
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr "Endast en stackram returneras för en avbruten coroutine."

#: ../../library/asyncio-task.rst:923
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""
"Det valfria argumentet *limit* anger det maximala antalet ramar som ska "
"returneras; som standard returneras alla tillgängliga ramar. Ordningen på "
"listan som returneras skiljer sig åt beroende på om en stack eller en "
"traceback returneras: de nyaste ramarna i en stack returneras, men de äldsta "
"ramarna i en traceback returneras.  (Detta motsvarar beteendet hos traceback-"
"modulen)"

#: ../../library/asyncio-task.rst:932
msgid "Print the stack or traceback for this Task."
msgstr "Skriv ut stacken eller traceback för den här uppgiften."

#: ../../library/asyncio-task.rst:934
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""
"Detta ger liknande utdata som traceback-modulen för de ramar som hämtas av :"
"meth:`get_stack`."

#: ../../library/asyncio-task.rst:937
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr "Argumentet *limit* skickas direkt till :meth:`get_stack`."

#: ../../library/asyncio-task.rst:939
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stderr`."
msgstr ""

#: ../../library/asyncio-task.rst:944
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr "Returnerar coroutine-objektet som omsluts av :class:`Task`."

#: ../../library/asyncio-task.rst:950
msgid "Return the name of the Task."
msgstr "Returnera namnet på uppgiften."

#: ../../library/asyncio-task.rst:952
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr ""
"Om inget namn uttryckligen har tilldelats uppgiften genererar "
"standardimplementeringen av asyncio-uppgiften ett standardnamn under "
"instantiering."

#: ../../library/asyncio-task.rst:960
msgid "Set the name of the Task."
msgstr "Ange namnet på uppgiften."

#: ../../library/asyncio-task.rst:962
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr ""
"Argumentet *value* kan vara vilket objekt som helst, som sedan konverteras "
"till en sträng."

#: ../../library/asyncio-task.rst:965
msgid ""
"In the default Task implementation, the name will be visible in the :func:"
"`repr` output of a task object."
msgstr ""
"I standardimplementeringen av Task kommer namnet att synas i :func:`repr`\\-"
"utmatningen från ett Task-objekt."

#: ../../library/asyncio-task.rst:974
msgid "Generator-based Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:978
msgid ""
"Support for generator-based coroutines is **deprecated** and is removed in "
"Python 3.11."
msgstr ""

#: ../../library/asyncio-task.rst:981
msgid ""
"Generator-based coroutines predate async/await syntax.  They are Python "
"generators that use ``yield from`` expressions to await on Futures and other "
"coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:985
msgid ""
"Generator-based coroutines should be decorated with :func:`@asyncio."
"coroutine <asyncio.coroutine>`, although this is not enforced."
msgstr ""

#: ../../library/asyncio-task.rst:992
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:994
msgid ""
"This decorator enables legacy generator-based coroutines to be compatible "
"with async/await code::"
msgstr ""

#: ../../library/asyncio-task.rst:1004
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1009
msgid "Use :keyword:`async def` instead."
msgstr ""

#: ../../library/asyncio-task.rst:1013
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1015
msgid ""
"This method is different from :func:`inspect.iscoroutine` because it returns "
"``True`` for generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1020
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1023
msgid ""
"This method is different from :func:`inspect.iscoroutinefunction` because it "
"returns ``True`` for generator-based coroutine functions decorated with :"
"func:`@coroutine <coroutine>`."
msgstr ""
