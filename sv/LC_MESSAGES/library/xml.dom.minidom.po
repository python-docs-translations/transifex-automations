# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-13 14:14+0000\n"
"PO-Revision-Date: 2025-08-15 19:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/xml.dom.minidom.rst:2
msgid ":mod:`!xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`!xml.dom.minidom` --- Minimal DOM-implementering"

#: ../../library/xml.dom.minidom.rst:11
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**Källkod:** :source:`Lib/xml/dom/minidom.py`"

#: ../../library/xml.dom.minidom.rst:15
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the :"
"mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""
":mod:`xml.dom.minidom` är en minimal implementation av Document Object Model-"
"gränssnittet, med ett API som liknar det i andra språk.  Den är avsedd att "
"vara enklare än den fullständiga DOM och också betydligt mindre.  Användare "
"som inte redan är bekanta med DOM bör överväga att använda modulen :mod:`xml."
"etree.ElementTree` för sin XML-bearbetning istället."

#: ../../library/xml.dom.minidom.rst:24
msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr ""
"Om du behöver analysera otillförlitliga eller oautentiserade data, se :ref:"
"`xml-security`."

#: ../../library/xml.dom.minidom.rst:28
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With :mod:"
"`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""
"DOM-applikationer börjar vanligtvis med att parsa XML till en DOM.  Med :mod:"
"`xml.dom.minidom` görs detta genom parse-funktionerna::"

#: ../../library/xml.dom.minidom.rst:31
msgid ""
"from xml.dom.minidom import parse, parseString\n"
"\n"
"dom1 = parse('c:\\\\temp\\\\mydata.xml')  # parse an XML file by name\n"
"\n"
"datasource = open('c:\\\\temp\\\\mydata.xml')\n"
"dom2 = parse(datasource)  # parse an open file\n"
"\n"
"dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"
msgstr ""
"from xml.dom.minidom import parse, parseString\n"
"\n"
"dom1 = parse('c:\\\\temp\\\\mydata.xml')  # parse an XML file by name\n"
"\n"
"datasource = open('c:\\\\temp\\\\mydata.xml')\n"
"dom2 = parse(datasource)  # parse an open file\n"
"\n"
"dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"

#: ../../library/xml.dom.minidom.rst:40
msgid ""
"The :func:`parse` function can take either a filename or an open file object."
msgstr ""
"Funktionen :func:`parse` kan ta emot antingen ett filnamn eller ett objekt "
"med en öppen fil."

#: ../../library/xml.dom.minidom.rst:45
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""
"Returnerar ett :class:`Document` från den angivna indata. *filename_or_file* "
"kan vara antingen ett filnamn eller ett filliknande objekt. *parser*, om det "
"anges, måste vara ett SAX2-parserobjekt. Denna funktion kommer att ändra "
"dokumenthanteraren i parsern och aktivera namnrymdsstöd; annan "
"parserkonfiguration (som att ställa in en entitetsresolver) måste ha gjorts "
"i förväg."

#: ../../library/xml.dom.minidom.rst:51
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""
"Om du har XML i en sträng kan du använda funktionen :func:`parseString` "
"istället:"

#: ../../library/xml.dom.minidom.rst:57
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates "
"an :class:`io.StringIO` object for the string and passes that on to :func:"
"`parse`."
msgstr ""
"Returnerar ett :class:`Document` som representerar *strängen*. Den här "
"metoden skapar ett :class:`io.StringIO`\\-objekt för strängen och skickar "
"det vidare till :func:`parse`."

#: ../../library/xml.dom.minidom.rst:60
msgid ""
"Both functions return a :class:`Document` object representing the content of "
"the document."
msgstr ""
"Båda funktionerna returnerar ett :class:`Document`\\-objekt som "
"representerar innehållet i dokumentet."

#: ../../library/xml.dom.minidom.rst:63
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The "
"parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""
"Funktionerna :func:`parse` och :func:`parseString` kopplar samman en XML-"
"parser med en \"DOM-byggare\" som kan ta emot parse-händelser från vilken "
"SAX-parser som helst och konvertera dem till ett DOM-träd.  Namnet på "
"funktionerna är kanske missvisande, men är lätta att förstå när man lär sig "
"gränssnitten.  Parsningen av dokumentet kommer att vara klar innan dessa "
"funktioner returneras; det är helt enkelt så att dessa funktioner inte "
"själva tillhandahåller en parserimplementation."

#: ../../library/xml.dom.minidom.rst:70
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the :"
"func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :"
"mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""
"Du kan också skapa en :class:`Document` genom att anropa en metod på ett "
"\"DOM Implementation\"-objekt.  Du kan få detta objekt antingen genom att "
"anropa funktionen :func:`getDOMImplementation` i paketet :mod:`xml.dom` "
"eller modulen :mod:`xml.dom.minidom`.  När du har en :class:`Document`, kan "
"du lägga till underordnade noder till den för att fylla DOM::"

#: ../../library/xml.dom.minidom.rst:76
msgid ""
"from xml.dom.minidom import getDOMImplementation\n"
"\n"
"impl = getDOMImplementation()\n"
"\n"
"newdoc = impl.createDocument(None, \"some_tag\", None)\n"
"top_element = newdoc.documentElement\n"
"text = newdoc.createTextNode('Some textual content.')\n"
"top_element.appendChild(text)"
msgstr ""
"från xml.dom.minidom import getDOMImplementation\n"
"\n"
"impl = getDOMImplementation()\n"
"\n"
"newdoc = impl.createDocument(None, \"some_tag\", None)\n"
"top_element = newdoc.documentElement\n"
"text = newdoc.createTextNode(\"Något textinnehåll.\")\n"
"top_element.appendChild(text)"

#: ../../library/xml.dom.minidom.rst:85
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the :"
"attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""
"När du har ett DOM-dokumentobjekt kan du komma åt delarna av ditt XML-"
"dokument genom dess egenskaper och metoder.  Dessa egenskaper definieras i "
"DOM-specifikationen.  Den viktigaste egenskapen hos dokumentobjektet är "
"egenskapen :attr:`documentElement`.  Den ger dig huvudelementet i XML-"
"dokumentet: det som innehåller alla andra.  Här är ett exempel på ett "
"program::"

#: ../../library/xml.dom.minidom.rst:91
msgid ""
"dom3 = parseString(\"<myxml>Some data</myxml>\")\n"
"assert dom3.documentElement.tagName == \"myxml\""
msgstr ""
"dom3 = parseString(<myxml>\"Några data</myxml>\")\n"
"assert dom3.documentElement.tagName == \"myxml\""

#: ../../library/xml.dom.minidom.rst:94
msgid ""
"When you are finished with a DOM tree, you may optionally call the :meth:"
"`unlink` method to encourage early cleanup of the now-unneeded objects.  :"
"meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension to the DOM "
"API that renders the node and its descendants essentially useless.  "
"Otherwise, Python's garbage collector will eventually take care of the "
"objects in the tree."
msgstr ""
"När du är klar med ett DOM-träd kan du eventuellt anropa metoden :meth:"
"`unlink` för att uppmuntra tidig upprensning av de nu obehövliga objekten. :"
"meth:`unlink` är ett :mod:`xml.dom.minidom`\\-specifikt tillägg till DOM API "
"som gör noden och dess ättlingar i huvudsak värdelösa.  Annars kommer "
"Pythons skräpsamlare så småningom att ta hand om objekten i trädet."

#: ../../library/xml.dom.minidom.rst:103
msgid ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"
msgstr ""
"`Dokumentobjektmodell (DOM) Nivå 1-specifikation <https://www.w3.org/TR/REC-"
"DOM-Level-1/>`_"

#: ../../library/xml.dom.minidom.rst:104
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr "W3C:s rekommendation för DOM som stöds av :mod:`xml.dom.minidom`."

#: ../../library/xml.dom.minidom.rst:110
msgid "DOM Objects"
msgstr "DOM-objekt"

#: ../../library/xml.dom.minidom.rst:112
msgid ""
"The definition of the DOM API for Python is given as part of the :mod:`xml."
"dom` module documentation.  This section lists the differences between the "
"API and :mod:`xml.dom.minidom`."
msgstr ""
"Definitionen av DOM API för Python ges som en del av moduldokumentationen "
"för :mod:`xml.dom`.  I detta avsnitt listas skillnaderna mellan API:et och :"
"mod:`xml.dom.minidom`."

#: ../../library/xml.dom.minidom.rst:119
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but "
"may be called on child nodes to discard children of that node."
msgstr ""
"Bryter interna referenser inom DOM så att det kommer att samlas in på "
"versioner av Python utan cyklisk GC.  Även när cyklisk GC är tillgänglig kan "
"användningen av detta göra stora mängder minne tillgängligt tidigare, så att "
"anropa detta på DOM-objekt så snart de inte längre behövs är god praxis.  "
"Detta behöver bara anropas på :class:`Document`\\-objektet, men kan anropas "
"på underordnade noder för att kasta bort barn till den noden."

#: ../../library/xml.dom.minidom.rst:126
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the :"
"keyword:`!with` block is exited::"
msgstr ""
"Du kan undvika att anropa denna metod explicit genom att använda :keyword:"
"`with`\\-satsen. Följande kod kommer automatiskt att avlänka *dom* när :"
"keyword:`!with`\\-blocket avslutas::"

#: ../../library/xml.dom.minidom.rst:130
msgid ""
"with xml.dom.minidom.parse(datasource) as dom:\n"
"    ... # Work with dom."
msgstr ""
"med xml.dom.minidom.parse(datasource) som dom:\n"
"    ... # Arbeta med dom."

#: ../../library/xml.dom.minidom.rst:137
msgid ""
"Write XML to the writer object.  The writer receives texts but not bytes as "
"input, it should have a :meth:`write` method which matches that of the file "
"object interface.  The *indent* parameter is the indentation of the current "
"node. The *addindent* parameter is the incremental indentation to use for "
"subnodes of the current one.  The *newl* parameter specifies the string to "
"use to terminate newlines."
msgstr ""
"Skriv XML till writer-objektet.  Skrivaren tar emot texter men inte bytes "
"som indata, den bör ha en :meth:`write`\\-metod som matchar den för "
"filobjektets gränssnitt.  Parametern *indent* är indenteringen för den "
"aktuella noden. Parametern *addindent* är den inkrementella indragning som "
"ska användas för undernoder till den aktuella noden.  Parametern *newl* "
"anger den sträng som ska användas för att avsluta nya linjer."

#: ../../library/xml.dom.minidom.rst:144
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr ""
"För :class:`Document`\\-noden kan ett ytterligare nyckelordsargument "
"*encoding* användas för att ange kodningsfältet i XML-huvudet."

#: ../../library/xml.dom.minidom.rst:147
msgid ""
"Similarly, explicitly stating the *standalone* argument causes the "
"standalone document declarations to be added to the prologue of the XML "
"document. If the value is set to ``True``, ``standalone=\"yes\"`` is added, "
"otherwise it is set to ``\"no\"``. Not stating the argument will omit the "
"declaration from the document."
msgstr ""
"På samma sätt leder en explicit angivelse av argumentet *standalone* till "
"att deklarationerna för det fristående dokumentet läggs till i XML-"
"dokumentets prolog. Om värdet är satt till ``True``, läggs "
"``standalone=\"yes\"`` till, annars sätts det till ``\"no\"``. Om argumentet "
"inte anges kommer deklarationen att utelämnas från dokumentet."

#: ../../library/xml.dom.minidom.rst:154
msgid ""
"The :meth:`writexml` method now preserves the attribute order specified by "
"the user."
msgstr ""
"Metoden :meth:`writexml` bevarar nu den attributordning som anges av "
"användaren."

#: ../../library/xml.dom.minidom.rst:158 ../../library/xml.dom.minidom.rst:179
#: ../../library/xml.dom.minidom.rst:198
msgid "The *standalone* parameter was added."
msgstr "Parametern *standalone* har lagts till."

#: ../../library/xml.dom.minidom.rst:163
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr ""
"Returnerar en sträng eller byte-sträng som innehåller den XML som "
"representeras av DOM-noden."

#: ../../library/xml.dom.minidom.rst:166
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode "
"string, and the XML declaration in the resulting string does not specify an "
"encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""
"Med ett explicit *encoding* [1]_-argument blir resultatet en byte-sträng i "
"den angivna kodningen. Utan argumentet *encoding* blir resultatet en Unicode-"
"sträng och XML-deklarationen i den resulterande strängen anger inte någon "
"kodning. Att koda denna sträng i en annan kodning än UTF-8 är troligen "
"felaktigt, eftersom UTF-8 är standardkodningen för XML."

#: ../../library/xml.dom.minidom.rst:173 ../../library/xml.dom.minidom.rst:192
msgid "The *standalone* argument behaves exactly as in :meth:`writexml`."
msgstr "Argumentet *standalone* beter sig exakt som i :meth:`writexml`."

#: ../../library/xml.dom.minidom.rst:175
msgid ""
"The :meth:`toxml` method now preserves the attribute order specified by the "
"user."
msgstr ""
"Metoden :meth:`toxml` bevarar nu den attributordning som anges av användaren."

#: ../../library/xml.dom.minidom.rst:185
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr ""
"Returnerar en vackert utskriven version av dokumentet. *indent* anger "
"indragningssträngen och standardvärdet är en tabulator; *newl* anger "
"strängen som visas i slutet av varje rad och standardvärdet är ``n``."

#: ../../library/xml.dom.minidom.rst:189
msgid ""
"The *encoding* argument behaves like the corresponding argument of :meth:"
"`toxml`."
msgstr ""
"Argumentet *encoding* beter sig som motsvarande argument i :meth:`toxml`."

#: ../../library/xml.dom.minidom.rst:194
msgid ""
"The :meth:`toprettyxml` method now preserves the attribute order specified "
"by the user."
msgstr ""
"Metoden :meth:`toprettyxml` bevarar nu den attributordning som anges av "
"användaren."

#: ../../library/xml.dom.minidom.rst:204
msgid "DOM Example"
msgstr "DOM-exempel"

#: ../../library/xml.dom.minidom.rst:206
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr ""
"Detta exempelprogram är ett ganska realistiskt exempel på ett enkelt "
"program. I det här fallet utnyttjar vi inte DOM:s flexibilitet särskilt "
"mycket."

#: ../../library/xml.dom.minidom.rst:209
msgid ""
"import xml.dom.minidom\n"
"\n"
"document = \"\"\"\\\n"
"<slideshow>\n"
"<title>Demo slideshow</title>\n"
"<slide><title>Slide title</title>\n"
"<point>This is a demo</point>\n"
"<point>Of a program for processing slides</point>\n"
"</slide>\n"
"\n"
"<slide><title>Another demo slide</title>\n"
"<point>It is important</point>\n"
"<point>To have more than</point>\n"
"<point>one slide</point>\n"
"</slide>\n"
"</slideshow>\n"
"\"\"\"\n"
"\n"
"dom = xml.dom.minidom.parseString(document)\n"
"\n"
"def getText(nodelist):\n"
"    rc = []\n"
"    for node in nodelist:\n"
"        if node.nodeType == node.TEXT_NODE:\n"
"            rc.append(node.data)\n"
"    return ''.join(rc)\n"
"\n"
"def handleSlideshow(slideshow):\n"
"    print(\"<html>\")\n"
"    handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])\n"
"    slides = slideshow.getElementsByTagName(\"slide\")\n"
"    handleToc(slides)\n"
"    handleSlides(slides)\n"
"    print(\"</html>\")\n"
"\n"
"def handleSlides(slides):\n"
"    for slide in slides:\n"
"        handleSlide(slide)\n"
"\n"
"def handleSlide(slide):\n"
"    handleSlideTitle(slide.getElementsByTagName(\"title\")[0])\n"
"    handlePoints(slide.getElementsByTagName(\"point\"))\n"
"\n"
"def handleSlideshowTitle(title):\n"
"    print(f\"<title>{getText(title.childNodes)}</title>\")\n"
"\n"
"def handleSlideTitle(title):\n"
"    print(f\"<h2>{getText(title.childNodes)}</h2>\")\n"
"\n"
"def handlePoints(points):\n"
"    print(\"<ul>\")\n"
"    for point in points:\n"
"        handlePoint(point)\n"
"    print(\"</ul>\")\n"
"\n"
"def handlePoint(point):\n"
"    print(f\"<li>{getText(point.childNodes)}</li>\")\n"
"\n"
"def handleToc(slides):\n"
"    for slide in slides:\n"
"        title = slide.getElementsByTagName(\"title\")[0]\n"
"        print(f\"<p>{getText(title.childNodes)}</p>\")\n"
"\n"
"handleSlideshow(dom)\n"
msgstr ""
"import xml.dom.minidom\n"
"\n"
"document = \"\"\"\\\n"
"<slideshow>\n"
"<title>Demo slideshow</title>\n"
"<slide><title>Slide title</title>\n"
"<point>This is a demo</point>\n"
"<point>Of a program for processing slides</point>\n"
"</slide>\n"
"\n"
"<slide><title>Another demo slide</title>\n"
"<point>It is important</point>\n"
"<point>To have more than</point>\n"
"<point>one slide</point>\n"
"</slide>\n"
"</slideshow>\n"
"\"\"\"\n"
"\n"
"dom = xml.dom.minidom.parseString(document)\n"
"\n"
"def getText(nodelist):\n"
"    rc = []\n"
"    for node in nodelist:\n"
"        if node.nodeType == node.TEXT_NODE:\n"
"            rc.append(node.data)\n"
"    return ''.join(rc)\n"
"\n"
"def handleSlideshow(slideshow):\n"
"    print(\"<html>\")\n"
"    handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])\n"
"    slides = slideshow.getElementsByTagName(\"slide\")\n"
"    handleToc(slides)\n"
"    handleSlides(slides)\n"
"    print(\"</html>\")\n"
"\n"
"def handleSlides(slides):\n"
"    for slide in slides:\n"
"        handleSlide(slide)\n"
"\n"
"def handleSlide(slide):\n"
"    handleSlideTitle(slide.getElementsByTagName(\"title\")[0])\n"
"    handlePoints(slide.getElementsByTagName(\"point\"))\n"
"\n"
"def handleSlideshowTitle(title):\n"
"    print(f\"<title>{getText(title.childNodes)}</title>\")\n"
"\n"
"def handleSlideTitle(title):\n"
"    print(f\"<h2>{getText(title.childNodes)}</h2>\")\n"
"\n"
"def handlePoints(points):\n"
"    print(\"<ul>\")\n"
"    for point in points:\n"
"        handlePoint(point)\n"
"    print(\"</ul>\")\n"
"\n"
"def handlePoint(point):\n"
"    print(f\"<li>{getText(point.childNodes)}</li>\")\n"
"\n"
"def handleToc(slides):\n"
"    for slide in slides:\n"
"        title = slide.getElementsByTagName(\"title\")[0]\n"
"        print(f\"<p>{getText(title.childNodes)}</p>\")\n"
"\n"
"handleSlideshow(dom)\n"

#: ../../library/xml.dom.minidom.rst:215
msgid "minidom and the DOM standard"
msgstr "minidom och DOM-standarden"

#: ../../library/xml.dom.minidom.rst:217
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""
"Modulen :mod:`xml.dom.minidom` är i huvudsak en DOM 1.0-kompatibel DOM med "
"vissa DOM 2-egenskaper (främst namnrymdsfunktioner)."

#: ../../library/xml.dom.minidom.rst:220
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr ""
"Användningen av DOM-gränssnittet i Python är enkel.  Följande "
"mappningsregler gäller:"

#: ../../library/xml.dom.minidom.rst:223
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""
"Gränssnitt nås via instansobjekt. Program bör inte instansiera klasserna "
"själva, utan använda de skapande funktioner som finns tillgängliga på :class:"
"`Document`\\-objektet. Härledda gränssnitt stöder alla operationer (och "
"attribut) från basgränssnitten, plus eventuella nya operationer."

#: ../../library/xml.dom.minidom.rst:228
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""
"Operationer används som metoder. Eftersom DOM endast använder :keyword:"
"`in`\\-parametrar, skickas argumenten i normal ordning (från vänster till "
"höger). Det finns inga valfria argument. ``void`` operationer returnerar "
"``None``."

#: ../../library/xml.dom.minidom.rst:232
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""
"IDL-attribut mappas till instansattribut. För kompatibilitet med OMG IDL-"
"språkmappningen för Python kan ett attribut ``foo`` också nås via "
"accessormetoderna :meth:`_get_foo` och :meth:`_set_foo`.  ``Readonly``\\-"
"attribut får inte ändras; detta verkställs inte vid körning."

#: ../../library/xml.dom.minidom.rst:237
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""
"Typerna ``short int``, ``unsigned int``, ``unsigned long long`` och "
"``boolean`` mappar alla till Python integer-objekt."

#: ../../library/xml.dom.minidom.rst:240
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""
"Typen ``DOMString`` mappar till Python-strängar. :mod:`xml.dom.minidom` "
"stöder antingen bytes eller strängar, men kommer normalt att producera "
"strängar. Värden av typen ``DOMString`` kan också vara ``None`` om det är "
"tillåtet att ha IDL-värdet ``null`` enligt DOM-specifikationen från W3C."

#: ../../library/xml.dom.minidom.rst:245
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""
"``const``\\-deklarationer mappar till variabler i deras respektive "
"omfattning (t.ex. ``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); de "
"får inte ändras."

#: ../../library/xml.dom.minidom.rst:248
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:"
"`TypeError` and :exc:`AttributeError`."
msgstr ""
"``DOMException`` stöds för närvarande inte i :mod:`xml.dom.minidom`. "
"Istället använder :mod:`xml.dom.minidom` standard Python-undantag som :exc:"
"`TypeError` och :exc:`AttributeError`."

#: ../../library/xml.dom.minidom.rst:252
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type. "
"These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""
":class:`NodeList`\\-objekt implementeras med hjälp av Pythons inbyggda "
"listtyp. Dessa objekt tillhandahåller det gränssnitt som definieras i DOM-"
"specifikationen, men med tidigare versioner av Python stöder de inte det "
"officiella API:et.  De är dock mycket mer \"Pythonic\" än det gränssnitt som "
"definieras i W3C:s rekommendationer."

#: ../../library/xml.dom.minidom.rst:258
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr "Följande gränssnitt har ingen implementation i :mod:`xml.dom.minidom`:"

#: ../../library/xml.dom.minidom.rst:260
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: ../../library/xml.dom.minidom.rst:262
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: ../../library/xml.dom.minidom.rst:264
msgid ""
"Most of these reflect information in the XML document that is not of general "
"utility to most DOM users."
msgstr ""
"De flesta av dessa återspeglar information i XML-dokumentet som inte är till "
"allmän nytta för de flesta DOM-användare."

#: ../../library/xml.dom.minidom.rst:268
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../library/xml.dom.minidom.rst:269
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""
"Kodningsnamnet som ingår i XML-utdata bör överensstämma med lämpliga "
"standarder. Till exempel är \"UTF-8\" giltigt, men \"UTF8\" är inte giltigt "
"i ett XML-dokuments deklaration, även om Python accepterar det som ett "
"kodningsnamn. Se https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl och https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
