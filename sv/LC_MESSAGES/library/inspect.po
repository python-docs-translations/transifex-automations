# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 15:05+0000\n"
"PO-Revision-Date: 2025-09-15 01:04+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/inspect.rst:2
msgid ":mod:`!inspect` --- Inspect live objects"
msgstr ":mod:`!inspect` --- Inspektera live-objekt"

#: ../../library/inspect.rst:15
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Källkod:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:19
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions,"
" tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
"Modulen :mod:`inspect` innehåller flera användbara funktioner som hjälper "
"dig att få information om aktiva objekt som moduler, klasser, metoder, "
"funktioner, spårningar, ramobjekt och kodobjekt.  Den kan till exempel "
"hjälpa dig att undersöka innehållet i en klass, hämta källkoden för en "
"metod, extrahera och formatera argumentlistan för en funktion eller få all "
"information du behöver för att visa en detaljerad spårning."

#: ../../library/inspect.rst:26
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""
"Det finns fyra huvudtyper av tjänster som tillhandahålls av denna modul: "
"typkontroll, hämtning av källkod, inspektion av klasser och funktioner samt "
"undersökning av tolkens stack."

#: ../../library/inspect.rst:34
msgid "Types and members"
msgstr "Typer och medlemmar"

#: ../../library/inspect.rst:36
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a"
" class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to "
":func:`getmembers`. They also help you determine when you can expect to find"
" the following special attributes (see :ref:`import-mod-attrs` for module "
"attributes):"
msgstr ""
"Funktionen :func:`getmembers` hämtar medlemmarna i ett objekt, t.ex. en "
"klass eller en modul. De funktioner vars namn börjar med \"is\" är "
"huvudsakligen praktiska val för det andra argumentet till "
":func:`getmembers`. De hjälper dig också att avgöra när du kan förvänta dig "
"att hitta följande specialattribut (se :ref:`import-mod-attrs` för "
"modulattribut):"

#: ../../library/inspect.rst:46
msgid "Type"
msgstr "Typ"

#: ../../library/inspect.rst:46
msgid "Attribute"
msgstr "Attribut"

#: ../../library/inspect.rst:46
msgid "Description"
msgstr "Beskrivning"

#: ../../library/inspect.rst:48
msgid "class"
msgstr "class"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:264
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:264
msgid "documentation string"
msgstr "dokumentationssträng"

#: ../../library/inspect.rst:50 ../../library/inspect.rst:65
#: ../../library/inspect.rst:83 ../../library/inspect.rst:217
#: ../../library/inspect.rst:234 ../../library/inspect.rst:247
#: ../../library/inspect.rst:266
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:50
msgid "name with which this class was defined"
msgstr "namn med vilket denna klass definierades"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:219
#: ../../library/inspect.rst:236 ../../library/inspect.rst:249
#: ../../library/inspect.rst:269
msgid "__qualname__"
msgstr "__qualname__"

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:219
#: ../../library/inspect.rst:236 ../../library/inspect.rst:249
#: ../../library/inspect.rst:269
msgid "qualified name"
msgstr "kvalificerat namn"

#: ../../library/inspect.rst:55 ../../library/inspect.rst:78
#: ../../library/inspect.rst:116
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr "namnet på den modul där denna klass definierades"

#: ../../library/inspect.rst:58 ../../library/inspect.rst:111
msgid "__type_params__"
msgstr "__type_params__"

#: ../../library/inspect.rst:58
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"class"
msgstr ""
"En tupel som innehåller :ref:`typ-parametrar <type-params>` för en generisk "
"klass"

#: ../../library/inspect.rst:63
msgid "method"
msgstr "metod"

#: ../../library/inspect.rst:65
msgid "name with which this method was defined"
msgstr "namn med vilket denna metod definierades"

#: ../../library/inspect.rst:70
msgid "__func__"
msgstr "__func__"

#: ../../library/inspect.rst:70
msgid "function object containing implementation of method"
msgstr "funktionsobjekt som innehåller implementering av metod"

#: ../../library/inspect.rst:74 ../../library/inspect.rst:271
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:74
msgid "instance to which this method is bound, or ``None``"
msgstr "instans som denna metod är bunden till, eller ``None``"

#: ../../library/inspect.rst:78
msgid "name of module in which this method was defined"
msgstr "namn på modul där denna metod definierades"

#: ../../library/inspect.rst:81
msgid "function"
msgstr "function"

#: ../../library/inspect.rst:83
msgid "name with which this function was defined"
msgstr "namn med vilket denna funktion definierades"

#: ../../library/inspect.rst:88
msgid "__code__"
msgstr "__code__"

#: ../../library/inspect.rst:88
msgid "code object containing compiled function :term:`bytecode`"
msgstr "kodobjekt som innehåller kompilerad funktion :term:`bytecode`"

#: ../../library/inspect.rst:92
msgid "__defaults__"
msgstr "__defaults__"

#: ../../library/inspect.rst:92
msgid "tuple of any default values for positional or keyword parameters"
msgstr ""
"tupel av eventuella standardvärden för positions- eller nyckelordsparametrar"

#: ../../library/inspect.rst:96
msgid "__kwdefaults__"
msgstr "__kwdefaults__"

#: ../../library/inspect.rst:96
msgid "mapping of any default values for keyword-only parameters"
msgstr ""
"mappning av eventuella standardvärden för parametrar som endast innehåller "
"nyckelord"

#: ../../library/inspect.rst:100
msgid "__globals__"
msgstr "__globals__"

#: ../../library/inspect.rst:100
msgid "global namespace in which this function was defined"
msgstr "global namnrymd där denna funktion definierades"

#: ../../library/inspect.rst:103
msgid "__builtins__"
msgstr "__builtins__"

#: ../../library/inspect.rst:103
msgid "builtins namespace"
msgstr "namnrymd för inbyggda komponenter"

#: ../../library/inspect.rst:105
msgid "__annotations__"
msgstr "__annotations__"

#: ../../library/inspect.rst:105
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""
"mappning av parameternamn till annoteringar; ``\"return\"`` nyckel är "
"reserverad för return-annoteringar."

#: ../../library/inspect.rst:111
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"function"
msgstr ""
"En tupel som innehåller :ref:`typ-parametrarna <type-params>` för en "
"generisk funktion"

#: ../../library/inspect.rst:116
msgid "name of module in which this function was defined"
msgstr "namn på modul där denna funktion definierades"

#: ../../library/inspect.rst:119
msgid "traceback"
msgstr "spårning"

#: ../../library/inspect.rst:119
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:119
msgid "frame object at this level"
msgstr "ramobjekt på denna nivå"

#: ../../library/inspect.rst:122
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:122 ../../library/inspect.rst:144
msgid "index of last attempted instruction in bytecode"
msgstr "index för det senaste försöket till instruktion i bytecode"

#: ../../library/inspect.rst:125
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:125 ../../library/inspect.rst:147
msgid "current line number in Python source code"
msgstr "aktuellt radnummer i Python-källkoden"

#: ../../library/inspect.rst:128
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:128
msgid "next inner traceback object (called by this level)"
msgstr "nästa inre traceback-objekt (anropas av denna nivå)"

#: ../../library/inspect.rst:132 ../../library/inspect.rst:221
#: ../../library/inspect.rst:241 ../../library/inspect.rst:254
msgid "frame"
msgstr "frame"

#: ../../library/inspect.rst:132
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:132
msgid "next outer frame object (this frame's caller)"
msgstr "nästa yttre ramobjekt (den här ramens anropare)"

#: ../../library/inspect.rst:135
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:135
msgid "builtins namespace seen by this frame"
msgstr "builtins namnrymd som ses av denna ram"

#: ../../library/inspect.rst:138
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:138
msgid "code object being executed in this frame"
msgstr "kodobjekt som exekveras i denna bildruta"

#: ../../library/inspect.rst:141
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:141
msgid "global namespace seen by this frame"
msgstr "global namnrymd som ses av denna ram"

#: ../../library/inspect.rst:144
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:147
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:150
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:150
msgid "local namespace seen by this frame"
msgstr "lokalt namnrymd som ses av denna ram"

#: ../../library/inspect.rst:153
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:153
msgid "tracing function for this frame, or ``None``"
msgstr "spårningsfunktion för denna ram, eller ``None``"

#: ../../library/inspect.rst:156 ../../library/inspect.rst:228
#: ../../library/inspect.rst:245 ../../library/inspect.rst:258
msgid "code"
msgstr "kod"

#: ../../library/inspect.rst:156
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:156
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""
"antal argument (inkluderar inte argument med endast nyckelord, \\* eller "
"\\*\\* args)"

#: ../../library/inspect.rst:161
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:161
msgid "string of raw compiled bytecode"
msgstr "sträng av rå kompilerad bytecode"

#: ../../library/inspect.rst:164
msgid "co_cellvars"
msgstr "co_cellvars"

#: ../../library/inspect.rst:164
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr "tupel av namn på cellvariabler (refererade av innehållande scopes)"

#: ../../library/inspect.rst:168
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:168
msgid "tuple of constants used in the bytecode"
msgstr "tuple av konstanter som används i bytekoden"

#: ../../library/inspect.rst:171
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:171
msgid "name of file in which this code object was created"
msgstr "namn på filen där detta kodobjekt skapades"

#: ../../library/inspect.rst:175
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:175
msgid "number of first line in Python source code"
msgstr "nummer på första raden i Python-källkod"

#: ../../library/inspect.rst:178
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:178
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""
"bitmapp av ``CO_*`` flaggor, läs mer :ref:`här <inspect-module-co-flags>`"

#: ../../library/inspect.rst:182
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:182
msgid "encoded mapping of line numbers to bytecode indices"
msgstr "kodad mappning av radnummer till bytecode-index"

#: ../../library/inspect.rst:186
msgid "co_freevars"
msgstr "co_freevars"

#: ../../library/inspect.rst:186
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr "tupel av namn på fria variabler (refereras via en funktions closure)"

#: ../../library/inspect.rst:190
msgid "co_posonlyargcount"
msgstr "co_posonlyargcount"

#: ../../library/inspect.rst:190
msgid "number of positional only arguments"
msgstr "antal positionella argument"

#: ../../library/inspect.rst:193
msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

#: ../../library/inspect.rst:193
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr "antal argument för endast nyckelord (ej inkluderande \\*\\* argument)"

#: ../../library/inspect.rst:197
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:197
msgid "name with which this code object was defined"
msgstr "namn med vilket detta kodobjekt definierades"

#: ../../library/inspect.rst:200
msgid "co_qualname"
msgstr "co_qualname"

#: ../../library/inspect.rst:200
msgid "fully qualified name with which this code object was defined"
msgstr ""
"fullständigt kvalificerat namn med vilket detta kodobjekt definierades"

#: ../../library/inspect.rst:204
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:204
msgid "tuple of names other than arguments and function locals"
msgstr "tupel av namn som inte är argument och funktionslokaler"

#: ../../library/inspect.rst:208
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:208
msgid "number of local variables"
msgstr "antal lokala variabler"

#: ../../library/inspect.rst:210
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:210
msgid "virtual machine stack space required"
msgstr "stackutrymme för virtuell maskin krävs"

#: ../../library/inspect.rst:213
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:213
msgid "tuple of names of arguments and local variables"
msgstr "tupel av namn på argument och lokala variabler"

#: ../../library/inspect.rst:217
msgid "generator"
msgstr "generator"

#: ../../library/inspect.rst:217 ../../library/inspect.rst:234
#: ../../library/inspect.rst:247
msgid "name"
msgstr "namn"

#: ../../library/inspect.rst:221
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:223
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:223 ../../library/inspect.rst:243
msgid "is the generator running?"
msgstr "är generatorn igång?"

#: ../../library/inspect.rst:225
msgid "gi_suspended"
msgstr ""

#: ../../library/inspect.rst:225
msgid "is the generator suspended?"
msgstr ""

#: ../../library/inspect.rst:228
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:230
msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

#: ../../library/inspect.rst:230
msgid "object being iterated by ``yield from``, or ``None``"
msgstr "objekt som itereras av ``yield from``, eller ``None``"

#: ../../library/inspect.rst:234
msgid "async generator"
msgstr "asynkron generator"

#: ../../library/inspect.rst:238
msgid "ag_await"
msgstr "ag_await"

#: ../../library/inspect.rst:238 ../../library/inspect.rst:251
msgid "object being awaited on, or ``None``"
msgstr "objektet som väntar på, eller ``None``"

#: ../../library/inspect.rst:241
msgid "ag_frame"
msgstr "ag_frame"

#: ../../library/inspect.rst:243
msgid "ag_running"
msgstr "ag_running"

#: ../../library/inspect.rst:245
msgid "ag_code"
msgstr "ag_code"

#: ../../library/inspect.rst:247
msgid "coroutine"
msgstr "coroutine"

#: ../../library/inspect.rst:251
msgid "cr_await"
msgstr "cr_await"

#: ../../library/inspect.rst:254
msgid "cr_frame"
msgstr "cr_frame"

#: ../../library/inspect.rst:256
msgid "cr_running"
msgstr "cr_running"

#: ../../library/inspect.rst:256
msgid "is the coroutine running?"
msgstr "är coroutinen igång?"

#: ../../library/inspect.rst:258
msgid "cr_code"
msgstr "cr_code"

#: ../../library/inspect.rst:260
msgid "cr_origin"
msgstr "cr_origin"

#: ../../library/inspect.rst:260
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr "där coroutine skapades, eller ``None``. Se |coroutine-origin-link|"

#: ../../library/inspect.rst:264
msgid "builtin"
msgstr "inbyggd"

#: ../../library/inspect.rst:266
msgid "original name of this function or method"
msgstr "ursprungliga namnet på denna funktion eller metod"

#: ../../library/inspect.rst:271
msgid "instance to which a method is bound, or ``None``"
msgstr "instans som en metod är bunden till, eller ``None``"

#: ../../library/inspect.rst:278
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""
"Lägg till attributen ``__qualname__`` och ``gi_yieldfrom`` till generatorer."

#: ../../library/inspect.rst:280
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""
"Attributet ``__name__`` för generatorer sätts nu utifrån funktionsnamnet, "
"istället för kodnamnet, och det kan nu ändras."

#: ../../library/inspect.rst:285
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr "Lägg till attributet ``cr_origin`` för coroutines."

#: ../../library/inspect.rst:289
msgid "Add ``__builtins__`` attribute to functions."
msgstr "Lägg till attributet ``__builtins__`` för funktioner."

#: ../../library/inspect.rst:293
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which"
" the predicate returns a true value are included."
msgstr ""
"Returnera alla medlemmar i ett objekt i en lista med par av ``(name, "
"value)`` sorterade efter namn. Om det valfria argumentet *predicate* anges, "
"som kommer att anropas med objektet ``value`` för varje medlem, inkluderas "
"endast medlemmar för vilka predikatet returnerar ett sant värde."

#: ../../library/inspect.rst:300
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed"
" in the metaclass' custom :meth:`~object.__dir__`."
msgstr ""
":func:`getmembers` returnerar endast klassattribut som definieras i "
"metaklassen när argumentet är en klass och dessa attribut har listats i "
"metaklassens anpassade :meth:`~object.__dir__`."

#: ../../library/inspect.rst:307
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""
"Returnerar alla medlemmar i ett objekt i en lista med ``(namn, "
"värde)``\\-par sorterade efter namn utan att utlösa dynamisk sökning via "
"deskriptorprotokollet, __getattr__ eller __getattribute__. Alternativt kan "
"du bara returnera medlemmar som uppfyller ett givet predikat."

#: ../../library/inspect.rst:314
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""
":func:`getmembers_static` kanske inte kan hämta alla medlemmar som "
"getmembers kan hämta (som dynamiskt skapade attribut) och kan hitta "
"medlemmar som getmembers inte kan (som deskriptorer som ger upphov till "
"AttributeError). Den kan också returnera deskriptorobjekt i stället för "
"instansmedlemmar i vissa fall."

#: ../../library/inspect.rst:325
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""
"Returnerar namnet på modulen som namnges av filen *path*, utan att inkludera"
" namnen på omslutande paket. Filtillägget kontrolleras mot alla poster i "
":func:`importlib.machinery.all_suffixes`. Om det matchar returneras den "
"slutliga sökvägskomponenten med tillägget borttaget. I annat fall returneras"
" ``None``."

#: ../../library/inspect.rst:331
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""
"Observera att denna funktion *endast* returnerar ett meningsfullt namn för "
"faktiska Python-moduler - sökvägar som potentiellt hänvisar till Python-"
"paket kommer fortfarande att returnera ``None``."

#: ../../library/inspect.rst:335
msgid "The function is based directly on :mod:`importlib`."
msgstr "Funktionen är direkt baserad på :mod:`importlib`."

#: ../../library/inspect.rst:341
msgid "Return ``True`` if the object is a module."
msgstr "Returnerar ``True`` om objektet är en modul."

#: ../../library/inspect.rst:346
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""
"Returnerar ``True`` om objektet är en klass, oavsett om den är inbyggd eller"
" skapad i Python-kod."

#: ../../library/inspect.rst:352
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr "Returnerar ``True`` om objektet är en bunden metod skriven i Python."

#: ../../library/inspect.rst:357
msgid ""
"Return ``True`` if the object is a Python function, which includes functions"
" created by a :term:`lambda` expression."
msgstr ""
"Returnerar ``True`` om objektet är en Python-funktion, vilket inkluderar "
"funktioner som skapats av ett :term:`lambda`\\-uttryck."

#: ../../library/inspect.rst:363
msgid "Return ``True`` if the object is a Python generator function."
msgstr "Returnerar ``True`` om objektet är en Python-generatorfunktion."

#: ../../library/inspect.rst:365
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en Python-generatorfunktion."

#: ../../library/inspect.rst:369
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a Python generator function."
msgstr ""
"Funktioner inlindade i :func:`functools.partialmethod` returnerar nu "
"``True`` om den inlindade funktionen är en Python-generatorfunktion."

#: ../../library/inspect.rst:375
msgid "Return ``True`` if the object is a generator."
msgstr "Returnerar ``True`` om objektet är en generator."

#: ../../library/inspect.rst:380
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax), a :func:`functools.partial` "
"wrapping a :term:`coroutine function`, or a sync function marked with "
":func:`markcoroutinefunction`."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`coroutine function` (en "
"funktion definierad med en :keyword:`async def` syntax), en "
":func:`functools.partial` som omsluter en :term:`coroutine function`, eller "
"en sync-funktion markerad med :func:`markcoroutinefunction`."

#: ../../library/inspect.rst:387
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en :term:`coroutine function`."

#: ../../library/inspect.rst:391
msgid ""
"Sync functions marked with :func:`markcoroutinefunction` now return "
"``True``."
msgstr ""
"Synkroniseringsfunktioner markerade med :func:`markcoroutinefunction` "
"returnerar nu ``True``."

#: ../../library/inspect.rst:395 ../../library/inspect.rst:465
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a :term:`coroutine function`."
msgstr ""
"Funktioner inlindade i :func:`functools.partialmethod` returnerar nu "
"``True`` om den inlindade funktionen är en :term:`coroutine function`."

#: ../../library/inspect.rst:402
msgid ""
"Decorator to mark a callable as a :term:`coroutine function` if it would not"
" otherwise be detected by :func:`iscoroutinefunction`."
msgstr ""
"Dekorator för att markera en anropbar funktion som en :term:`coroutine "
"function` om den annars inte skulle upptäckas av "
":func:`iscoroutinefunction`."

#: ../../library/inspect.rst:405
msgid ""
"This may be of use for sync functions that return a :term:`coroutine`, if "
"the function is passed to an API that requires :func:`iscoroutinefunction`."
msgstr ""
"Detta kan vara användbart för sync-funktioner som returnerar en "
":term:`coroutine`, om funktionen skickas till ett API som kräver "
":func:`iscoroutinefunction`."

#: ../../library/inspect.rst:408
msgid ""
"When possible, using an :keyword:`async def` function is preferred. Also "
"acceptable is calling the function and testing the return with "
":func:`iscoroutine`."
msgstr ""
"När det är möjligt är det att föredra att använda en :keyword:`async "
"def`\\-funktion. Det är också acceptabelt att anropa funktionen och testa "
"returen med :func:`iscoroutine`."

#: ../../library/inspect.rst:417
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an "
":keyword:`async def` function."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`coroutine` som skapats av en "
":keyword:`async def`\\-funktion."

#: ../../library/inspect.rst:425
msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""
"Returnerar ``True`` om objektet kan användas i :keyword:`await`\\-uttryck."

#: ../../library/inspect.rst:427
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators:"
msgstr ""
"Kan också användas för att skilja generatorbaserade coroutines från vanliga "
"generatorer:"

#: ../../library/inspect.rst:430
msgid ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"
msgstr ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"

#: ../../library/inspect.rst:448
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function,"
" for example:"
msgstr ""
"Returnerar ``True`` om objektet är en :term:`asynkron generator`\\-funktion,"
" till exempel:"

#: ../../library/inspect.rst:451
msgid ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"
msgstr ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"

#: ../../library/inspect.rst:461
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is an :term:`asynchronous generator` function."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en :term:`asynkron generator`\\-funktion."

#: ../../library/inspect.rst:471
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`asynkron generator iterator` "
"skapad av en :term:`asynkron generator` funktion."

#: ../../library/inspect.rst:478
msgid "Return ``True`` if the object is a traceback."
msgstr "Returnerar ``True`` om objektet är en traceback."

#: ../../library/inspect.rst:483
msgid "Return ``True`` if the object is a frame."
msgstr "Returnerar ``True`` om objektet är en ram."

#: ../../library/inspect.rst:488
msgid "Return ``True`` if the object is a code."
msgstr "Returnerar ``True`` om objektet är en kod."

#: ../../library/inspect.rst:493
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""
"Returnerar ``True`` om objektet är en inbyggd funktion eller en bunden "
"inbyggd metod."

#: ../../library/inspect.rst:498
msgid ""
"Return ``True`` if the type of object is a "
":class:`~types.MethodWrapperType`."
msgstr ""
"Returnerar ``True`` om objekttypen är en :class:`~types.MethodWrapperType`."

#: ../../library/inspect.rst:500
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as "
":meth:`~object.__str__`, :meth:`~object.__eq__` and "
":meth:`~object.__repr__`."
msgstr ""
"Dessa är instanser av :class:`~types.MethodWrapperType`, till exempel "
":meth:`~object.__str__`, :meth:`~object.__eq__` och "
":meth:`~object.__repr__`."

#: ../../library/inspect.rst:508
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""
"Returnerar ``True`` om objektet är en användardefinierad eller inbyggd "
"funktion eller metod."

#: ../../library/inspect.rst:513
msgid "Return ``True`` if the object is an abstract base class."
msgstr "Returnerar ``True`` om objektet är en abstrakt basklass."

#: ../../library/inspect.rst:518
msgid ""
"Return ``True`` if the object is a method descriptor, but not if "
":func:`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` "
"are true."
msgstr ""
"Returnerar ``True`` om objektet är en metodbeskrivare, men inte om "
":func:`ismethod`, :func:`isclass`, :func:`isfunction` eller "
":func:`isbuiltin` är true."

#: ../../library/inspect.rst:522
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method, but not a :meth:`~object.__set__` "
"method or a :meth:`~object.__delete__` method.  Beyond that, the set of "
"attributes varies.  A :attr:`~definition.__name__` attribute is usually "
"sensible, and :attr:`~definition.__doc__` often is."
msgstr ""
"Detta är till exempel sant för ``int.__add__``.  Ett objekt som klarar detta"
" test har en :meth:`~object.__get__`\\-metod, men inte en "
":meth:`~object.__set__`\\-metod eller en :meth:`~object.__delete__`\\-metod."
"  Utöver detta varierar uppsättningen attribut.  Ett "
":attr:`~definition.__name__`\\-attribut är vanligtvis förnuftigt, och "
":attr:`~definition.__doc__` är det ofta."

#: ../../library/inspect.rst:528
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having the "
":attr:`~method.__func__` attribute (etc) when an object passes "
":func:`ismethod`."
msgstr ""
"Metoder som implementeras via deskriptorer som också klarar något av de "
"andra testerna returnerar ``False`` från "
":func:`ismethoddescriptor`\\-testet, helt enkelt för att de andra testerna "
"lovar mer -- du kan t.ex. räkna med att ha attributet "
":attr:`~method.__func__` (etc) när ett objekt klarar :func:`ismethod`."

#: ../../library/inspect.rst:534
msgid ""
"This function no longer incorrectly reports objects with "
":meth:`~object.__get__` and :meth:`~object.__delete__`, but not "
":meth:`~object.__set__`, as being method descriptors (such objects are data "
"descriptors, not method descriptors)."
msgstr ""
"Denna funktion rapporterar inte längre felaktigt objekt med "
":meth:`~object.__get__` och :meth:`~object.__delete__`, men inte "
":meth:`~object.__set__`, som metoddeskriptorer (sådana objekt är "
"databeskriptorer, inte metoddeskriptorer)."

#: ../../library/inspect.rst:542
msgid "Return ``True`` if the object is a data descriptor."
msgstr "Returnerar ``True`` om objektet är en databeskrivare."

#: ../../library/inspect.rst:544
msgid ""
"Data descriptors have a :attr:`~object.__set__` or a "
":attr:`~object.__delete__` method. Examples are properties (defined in "
"Python), getsets, and members.  The latter two are defined in C and there "
"are more specific tests available for those types, which is robust across "
"Python implementations.  Typically, data descriptors will also have "
":attr:`~definition.__name__` and :attr:`!__doc__` attributes (properties, "
"getsets, and members have both of these attributes), but this is not "
"guaranteed."
msgstr ""
"Databeskrivare har en :attr:`~object.__set__` eller en "
":attr:`~object.__delete__` metod. Exempel är properties (definierade i "
"Python), getsets och members.  De två sistnämnda definieras i C och det "
"finns mer specifika tester tillgängliga för dessa typer, som är robusta över"
" Python-implementationer.  Vanligtvis har databeskrivare också attributen "
":attr:`~definition.__name__` och :attr:`!__doc__` (properties, getsets och "
"members har båda dessa attribut), men detta är inte garanterat."

#: ../../library/inspect.rst:555
msgid "Return ``True`` if the object is a getset descriptor."
msgstr "Returnerar ``True`` om objektet är en getset-descriptor."

#: ../../library/inspect.rst:559
msgid ""
"getsets are attributes defined in extension modules via "
":c:type:`PyGetSetDef` structures.  For Python implementations without such "
"types, this method will always return ``False``."
msgstr ""
"getsets är attribut som definieras i tilläggsmoduler via "
":c:type:`PyGetSetDef`\\-strukturer.  För Python-implementationer utan sådana"
" typer kommer denna metod alltid att returnera ``False``."

#: ../../library/inspect.rst:566
msgid "Return ``True`` if the object is a member descriptor."
msgstr "Returnerar ``True`` om objektet är en member descriptor."

#: ../../library/inspect.rst:570
msgid ""
"Member descriptors are attributes defined in extension modules via "
":c:type:`PyMemberDef` structures.  For Python implementations without such "
"types, this method will always return ``False``."
msgstr ""
"Medlemsdeskriptorer är attribut som definieras i tilläggsmoduler via "
":c:type:`PyMemberDef`\\-strukturer.  För Python-implementationer utan sådana"
" typer kommer denna metod alltid att returnera ``False``."

#: ../../library/inspect.rst:578
msgid "Retrieving source code"
msgstr "Hämtning av källkod"

#: ../../library/inspect.rst:582
msgid ""
"Get the documentation string for an object, cleaned up with "
":func:`cleandoc`. If the documentation string for an object is not provided "
"and the object is a class, a method, a property or a descriptor, retrieve "
"the documentation string from the inheritance hierarchy. Return ``None`` if "
"the documentation string is invalid or missing."
msgstr ""
"Hämtar dokumentationssträngen för ett objekt, rensad med :func:`cleandoc`. "
"Om dokumentationssträngen för ett objekt inte anges och objektet är en "
"klass, en metod, en egenskap eller en deskriptor, hämtas "
"dokumentationssträngen från arvshierarkin. Returnerar ``None`` om "
"dokumentationssträngen är ogiltig eller saknas."

#: ../../library/inspect.rst:588
msgid "Documentation strings are now inherited if not overridden."
msgstr "Dokumentationssträngar ärvs nu om de inte åsidosätts."

#: ../../library/inspect.rst:594
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""
"Returnerar i en enda sträng alla rader med kommentarer som omedelbart "
"föregår objektets källkod (för en klass, funktion eller metod), eller högst "
"upp i Python-källfilen (om objektet är en modul).  Om objektets källkod inte"
" är tillgänglig returneras ``None``.  Detta kan hända om objektet har "
"definierats i C eller i det interaktiva skalet."

#: ../../library/inspect.rst:603
msgid ""
"Return the name of the (text or binary) file in which an object was defined."
" This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"Returnerar namnet på den fil (text eller binär) i vilken ett objekt "
"definierades. Detta kommer att misslyckas med ett :exc:`TypeError` om "
"objektet är en inbyggd modul, klass eller funktion."

#: ../../library/inspect.rst:610
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr ""
"Försök att gissa vilken modul ett objekt definierades i. Returnerar ``None``"
" om modulen inte kan bestämmas."

#: ../../library/inspect.rst:616
msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with"
" a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""
"Returnerar namnet på Python-källfilen där ett objekt definierades eller "
"``None`` om inget sätt kan identifieras för att hämta källan.  Detta kommer "
"att misslyckas med ett :exc:`TypeError` om objektet är en inbyggd modul, "
"klass eller funktion."

#: ../../library/inspect.rst:624
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code"
" object.  The source code is returned as a list of the lines corresponding "
"to the object and the line number indicates where in the original source "
"file the first line of code was found.  An :exc:`OSError` is raised if the "
"source code cannot be retrieved. A :exc:`TypeError` is raised if the object "
"is a built-in module, class, or function."
msgstr ""
"Returnerar en lista med källrader och startradnummer för ett objekt. "
"Argumentet kan vara en modul, klass, metod, funktion, traceback, frame eller"
" kodobjekt.  Källkoden returneras som en lista över de rader som motsvarar "
"objektet och radnumret anger var i den ursprungliga källfilen den första "
"kodraden hittades.  Ett :exc:`OSError` genereras om källkoden inte kan "
"hämtas. Ett :exc:`TypeError` visas om objektet är en inbyggd modul, klass "
"eller funktion."

#: ../../library/inspect.rst:633 ../../library/inspect.rst:647
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""
":exc:`OSError` tas upp i stället för :exc:`IOError`, som nu är ett alias för"
" det förra."

#: ../../library/inspect.rst:640
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved. A :exc:`TypeError` is raised if the "
"object is a built-in module, class, or function."
msgstr ""
"Returnerar texten i källkoden för ett objekt. Argumentet kan vara en modul, "
"en klass, en metod, en funktion, en spårning, en ram eller ett kodobjekt.  "
"Källkoden returneras som en enda sträng.  Ett :exc:`OSError` uppstår om "
"källkoden inte kan hämtas. Ett :exc:`TypeError` visas om objektet är en "
"inbyggd modul, klass eller funktion."

#: ../../library/inspect.rst:654
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""
"Städa upp indrag från dokumentsträngar som är indragna för att stämma "
"överens med kodblock."

#: ../../library/inspect.rst:657
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""
"Alla inledande blanksteg tas bort från den första raden.  Alla inledande "
"blanksteg som kan tas bort på ett enhetligt sätt från den andra raden och "
"framåt tas bort.  Tomma rader i början och slutet tas därefter bort.  "
"Dessutom expanderas alla tabbar till mellanslag."

#: ../../library/inspect.rst:666
msgid "Introspecting callables with the Signature object"
msgstr "Introspektering av anropsbara objekt med signaturobjektet"

#: ../../library/inspect.rst:670
msgid ""
"The :class:`Signature` object represents the call signature of a callable "
"object and its return annotation. To retrieve a :class:`!Signature` object, "
"use the :func:`!signature` function."
msgstr ""
"Objektet :class:`Signature` representerar anropssignaturen för ett "
"anropsbart objekt och dess returannotation. För att hämta ett "
":class:`!Signature`\\-objekt, använd funktionen :func:`!signature`."

#: ../../library/inspect.rst:677
msgid "Return a :class:`Signature` object for the given *callable*:"
msgstr "Returnerar ett :class:`Signature`\\-objekt för den givna *callable*:"

#: ../../library/inspect.rst:679
msgid ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"
msgstr ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"

#: ../../library/inspect.rst:696
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""
"Accepterar ett brett utbud av Python-anropsbara, från vanliga funktioner och"
" klasser till :func:`functools.partial`\\-objekt."

#: ../../library/inspect.rst:699
msgid ""
"For objects defined in modules using stringized annotations (``from "
"__future__ import annotations``), :func:`signature` will attempt to "
"automatically un-stringize the annotations using :func:`get_annotations`.  "
"The *globals*, *locals*, and *eval_str* parameters are passed into "
":func:`get_annotations` when resolving the annotations; see the "
"documentation for :func:`get_annotations` for instructions on how to use "
"these parameters."
msgstr ""

#: ../../library/inspect.rst:708
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and "
":exc:`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and *eval_str* is not false, the ``eval()`` "
"call(s) to un-stringize the annotations in :func:`get_annotations` could "
"potentially raise any kind of exception."
msgstr ""

#: ../../library/inspect.rst:714
msgid ""
"A slash(/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""

#: ../../library/inspect.rst:718
msgid ""
"The *follow_wrapped* parameter was added. Pass ``False`` to get a signature "
"of *callable* specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""
"Parametern *follow_wrapped* har lagts till. Passera ``False`` för att få en "
"signatur av *callable* specifikt (``callable.__wrapped__`` kommer inte att "
"användas för att packa upp dekorerade callables)"

#: ../../library/inspect.rst:724 ../../library/inspect.rst:848
msgid "The *globals*, *locals*, and *eval_str* parameters were added."
msgstr "Parametrarna *globals*, *locals* och *eval_str* har lagts till."

#: ../../library/inspect.rst:729
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"Vissa callables kanske inte är introspekterbara i vissa implementationer av "
"Python.  I CPython tillhandahåller till exempel vissa inbyggda funktioner "
"som definieras i C inga metadata om sina argument."

#: ../../library/inspect.rst:735
msgid ""
"If the passed object has a :attr:`!__signature__` attribute, we may use it "
"to create the signature. The exact semantics are an implementation detail "
"and are subject to unannounced changes. Consult the source code for current "
"semantics."
msgstr ""
"Om det objekt som skickas har ett attribut :attr:`!__signature__` kan vi "
"använda det för att skapa signaturen. Den exakta semantiken är en "
"implementationsdetalj och kan komma att ändras utan förvarning. Se källkoden"
" för aktuell semantik."

#: ../../library/inspect.rst:743
msgid ""
"A :class:`!Signature` object represents the call signature of a function and"
" its return annotation.  For each parameter accepted by the function it "
"stores a :class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""
"Ett :class:`!Signature`\\-objekt representerar anropssignaturen för en "
"funktion och dess returannotation.  För varje parameter som accepteras av "
"funktionen lagras ett :class:`Parameter`\\-objekt i dess "
":attr:`parameters`\\-samling."

#: ../../library/inspect.rst:748
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""
"Det valfria argumentet *parameters* är en sekvens av "
":class:`Parameter`\\-objekt, som valideras för att kontrollera att det inte "
"finns några parametrar med duplicerade namn, och att parametrarna är i rätt "
"ordning, dvs. först positional-only, sedan positional-or-keyword, och att "
"parametrar med standardvärden följer parametrar utan standardvärden."

#: ../../library/inspect.rst:754
msgid ""
"The optional *return_annotation* argument can be an arbitrary Python object."
" It represents the \"return\" annotation of the callable."
msgstr ""
"Det valfria *return_annotation*-argumentet kan vara ett godtyckligt Python-"
"objekt. Det representerar \"return\"-annoteringen för den anropbara "
"funktionen."

#: ../../library/inspect.rst:757
msgid ""
":class:`!Signature` objects are *immutable*.  Use :meth:`Signature.replace` "
"or :func:`copy.replace` to make a modified copy."
msgstr ""
":class:`!Signature`\\-objekt är *föränderliga*.  Använd "
":meth:`Signature.replace` eller :func:`copy.replace` för att göra en "
"modifierad kopia."

#: ../../library/inspect.rst:760
msgid ":class:`!Signature` objects are now picklable and :term:`hashable`."
msgstr ":class:`!Signature`\\-objekt är nu plockbara och :term:`hashable`."

#: ../../library/inspect.rst:765
msgid ""
"A special class-level marker to specify absence of a return annotation."
msgstr ""
"En speciell markör på klassnivå för att ange avsaknad av en returannotation."

#: ../../library/inspect.rst:769
msgid ""
"An ordered mapping of parameters' names to the corresponding "
":class:`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr ""
"En ordnad mappning av parameternamn till motsvarande "
":class:`Parameter`\\-objekt.  Parametrar visas i strikt definitionsordning, "
"inklusive parametrar som endast innehåller nyckelord."

#: ../../library/inspect.rst:773 ../../library/inspect.rst:1128
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of"
" keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""
"Python garanterade endast uttryckligen att deklarationsordningen för "
"parametrar som endast innehåller nyckelord skulle bevaras från och med "
"version 3.7, även om denna ordning i praktiken alltid hade bevarats i Python"
" 3."

#: ../../library/inspect.rst:780
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""
"\"Return\"-annoteringen för den anropbara funktionen.  Om anropsbarheten "
"inte har någon \"return\"-annotation, sätts detta attribut till "
":attr:`Signature.empty`."

#: ../../library/inspect.rst:785
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"Skapar en mappning från positions- och nyckelordsargument till parametrar. "
"Returnerar :class:`BoundArguments` om ``*args`` och ``**kwargs`` matchar "
"signaturen, eller ger upphov till ett :exc:`TypeError`."

#: ../../library/inspect.rst:791
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) Returns"
" :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""
"Fungerar på samma sätt som :meth:`Signature.bind`, men tillåter utelämnande "
"av vissa nödvändiga argument (efterliknar :func:`functools.partial` "
"beteende.) Returnerar :class:`BoundArguments`, eller ger upphov till ett "
":exc:`TypeError` om de passerade argumenten inte matchar signaturen."

#: ../../library/inspect.rst:798
msgid ""
"Create a new :class:`Signature` instance based on the instance "
":meth:`replace` was invoked on. It is possible to pass different "
"*parameters* and/or *return_annotation* to override the corresponding "
"properties of the base signature.  To remove ``return_annotation`` from the "
"copied :class:`!Signature`, pass in :attr:`Signature.empty`."
msgstr ""
"Skapar en ny :class:`Signature`\\-instans baserat på den instans som "
":meth:`replace` anropades på. Det är möjligt att skicka olika *parametrar* "
"och/eller *return_annotation* för att åsidosätta motsvarande egenskaper hos "
"bassignaturen.  För att ta bort ``return_annotation`` från den kopierade "
":class:`!Signature`, skicka in :attr:`Signature.empty`."

#: ../../library/inspect.rst:806
msgid ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""
msgstr ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""

#: ../../library/inspect.rst:816
msgid ""
":class:`Signature` objects are also supported by the generic function "
":func:`copy.replace`."
msgstr ""
":class:`Signature`\\-objekt stöds också av den generiska funktionen "
":func:`copy.replace`."

#: ../../library/inspect.rst:821
msgid "Create a string representation of the :class:`Signature` object."
msgstr "Skapa en strängrepresentation av objektet :class:`Signature`."

#: ../../library/inspect.rst:823
msgid ""
"If *max_width* is passed, the method will attempt to fit the signature into "
"lines of at most *max_width* characters. If the signature is longer than "
"*max_width*, all parameters will be on separate lines."
msgstr ""
"Om *max_width* anges kommer metoden att försöka passa in signaturen på rader"
" med högst *max_width* tecken. Om signaturen är längre än *max_width* kommer"
" alla parametrar att stå på separata rader."

#: ../../library/inspect.rst:832
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"*obj*."
msgstr ""
"Returnera ett :class:`Signature`\\-objekt (eller dess underklass) för en "
"given anropbar *obj*."

#: ../../library/inspect.rst:835
msgid "This method simplifies subclassing of :class:`Signature`:"
msgstr "Denna metod förenklar underklassning av :class:`Signature`:"

#: ../../library/inspect.rst:837
msgid ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"
msgstr ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"

#: ../../library/inspect.rst:844
msgid "Its behavior is otherwise identical to that of :func:`signature`."
msgstr "Dess beteende är i övrigt identiskt med det för :func:`signature`."

#: ../../library/inspect.rst:854
msgid ""
":class:`!Parameter` objects are *immutable*. Instead of modifying a "
":class:`!Parameter` object, you can use :meth:`Parameter.replace` or "
":func:`copy.replace` to create a modified copy."
msgstr ""
":class:`!Parameter`\\-objekt är *föränderliga*. Istället för att modifiera "
"ett :class:`!Parameter`\\-objekt kan du använda :meth:`Parameter.replace` "
"eller :func:`copy.replace` för att skapa en modifierad kopia."

#: ../../library/inspect.rst:858
msgid "Parameter objects are now picklable and :term:`hashable`."
msgstr "Parameterobjekt är nu picklbara och :term:`hashable`."

#: ../../library/inspect.rst:863
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""
"En särskild markör på klassnivå för att ange avsaknad av standardvärden och "
"annoteringar."

#: ../../library/inspect.rst:868
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""
"Namnet på parametern som en sträng.  Namnet måste vara en giltig Python-"
"identifierare."

#: ../../library/inspect.rst:873
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""
"CPython genererar implicita parameternamn av formen ``.0`` på de kodobjekt "
"som används för att implementera förståelser och generatoruttryck."

#: ../../library/inspect.rst:877
msgid ""
"These parameter names are now exposed by this module as names like "
"``implicit0``."
msgstr ""
"Dessa parameternamn exponeras nu av denna modul som namn som ``implicit0``."

#: ../../library/inspect.rst:883
msgid ""
"The default value for the parameter.  If the parameter has no default value,"
" this attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Standardvärdet för parametern.  Om parametern inte har något standardvärde, "
"sätts detta attribut till :attr:`Parameter.empty`."

#: ../../library/inspect.rst:888
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Annotationen för parametern.  Om parametern inte har någon annotation, sätts"
" detta attribut till :attr:`Parameter.empty`."

#: ../../library/inspect.rst:893
msgid ""
"Describes how argument values are bound to the parameter.  The possible "
"values are accessible via :class:`Parameter` (like "
"``Parameter.KEYWORD_ONLY``), and support comparison and ordering, in the "
"following order:"
msgstr ""
"Beskriver hur argumentvärden binds till parametern.  De möjliga värdena är "
"tillgängliga via :class:`Parameter` (som ``Parameter.KEYWORD_ONLY``), och "
"stöder jämförelse och ordning, i följande ordning:"

#: ../../library/inspect.rst:900
msgid "Name"
msgstr "Namn"

#: ../../library/inspect.rst:900
msgid "Meaning"
msgstr "Betydelse"

#: ../../library/inspect.rst:902
msgid "*POSITIONAL_ONLY*"
msgstr "*POSITIONAL_ONLY*"

#: ../../library/inspect.rst:902
msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr ""
"Värdet måste anges som ett positionellt argument. Endast positionella "
"parametrar är de som visas före en ``/``\\-post (om sådan finns) i en "
"Python-funktionsdefinition."

#: ../../library/inspect.rst:907
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

#: ../../library/inspect.rst:907
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""
"Värdet kan anges som antingen ett nyckelord eller ett positionellt argument "
"(detta är standardbindningsbeteendet för funktioner som implementeras i "
"Python)"

#: ../../library/inspect.rst:912
msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

#: ../../library/inspect.rst:912
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""
"En tupel av positionella argument som inte är bundna till någon annan "
"parameter. Detta motsvarar en ``*args``\\-parameter i en Python-"
"funktionsdefinition."

#: ../../library/inspect.rst:917
msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

#: ../../library/inspect.rst:917
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""
"Värdet måste anges som ett nyckelordsargument. Parametrar som endast "
"innehåller nyckelord är de som visas efter en ``*`` eller ``*args`` post i "
"en Python-funktionsdefinition."

#: ../../library/inspect.rst:922
msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

#: ../../library/inspect.rst:922
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""
"Ett dict med nyckelordsargument som inte är bundna till någon annan "
"parameter. Detta motsvarar en ``**kwargs``\\-parameter i en Python-"
"funktionsdefinition."

#: ../../library/inspect.rst:928
msgid "Example: print all keyword-only arguments without default values:"
msgstr ""
"Exempel: Skriv ut alla argument som bara innehåller nyckelord utan "
"standardvärden:"

#: ../../library/inspect.rst:930
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"
msgstr ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"

#: ../../library/inspect.rst:944
msgid "Describes an enum value of :attr:`Parameter.kind`."
msgstr "Beskriver ett enumvärde av :attr:`Parameter.kind`."

#: ../../library/inspect.rst:948
msgid "Example: print all descriptions of arguments:"
msgstr "Exempel: Skriv ut alla beskrivningar av argument:"

#: ../../library/inspect.rst:950
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"
msgstr ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"

#: ../../library/inspect.rst:965
msgid ""
"Create a new :class:`Parameter` instance based on the instance replaced was "
"invoked on.  To override a :class:`!Parameter` attribute, pass the "
"corresponding argument.  To remove a default value or/and an annotation from"
" a :class:`!Parameter`, pass :attr:`Parameter.empty`."
msgstr ""
"Skapar en ny :class:`Parameter`\\-instans baserat på den instans som "
"replaced anropades på.  För att åsidosätta ett "
":class:`!Parameter`\\-attribut, skicka motsvarande argument.  För att ta "
"bort ett standardvärde eller/och en annotering från en :class:`!Parameter`, "
"skicka :attr:`Parameter.empty`."

#: ../../library/inspect.rst:970
msgid ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""
msgstr ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""

#: ../../library/inspect.rst:983
msgid ""
":class:`Parameter` objects are also supported by the generic function "
":func:`copy.replace`."
msgstr ""
":class:`Parameter`\\-objekt stöds också av den generiska funktionen "
":func:`copy.replace`."

#: ../../library/inspect.rst:986
msgid ""
"In Python 3.3 :class:`Parameter` objects were allowed to have ``name`` set "
"to ``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no "
"longer permitted."
msgstr ""
"I Python 3.3 tilläts :class:`Parameter`\\-objekt att ha ``name`` satt till "
"``None`` om deras ``kind`` var satt till ``POSITIONAL_ONLY``. Detta är inte "
"längre tillåtet."

#: ../../library/inspect.rst:993
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""
"Resultatet av ett anrop av :meth:`Signature.bind` eller "
":meth:`Signature.bind_partial`. Innehåller mappningen av argument till "
"funktionens parametrar."

#: ../../library/inspect.rst:998
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect in "
":attr:`args` and :attr:`kwargs`."
msgstr ""
"En föränderlig mappning av parameternamn till argumentvärden. Innehåller "
"endast explicit bundna argument.  Ändringar i :attr:`arguments` kommer att "
"återspeglas i :attr:`args` och :attr:`kwargs`."

#: ../../library/inspect.rst:1002
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""
"Bör användas tillsammans med :attr:`Signature.parameters` för eventuell "
"bearbetning av argument."

#: ../../library/inspect.rst:1007
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial`"
" relied on a default value are skipped. However, if needed, use "
":meth:`BoundArguments.apply_defaults` to add them."
msgstr ""
"Argument för vilka :meth:`Signature.bind` eller "
":meth:`Signature.bind_partial` förlitade sig på ett standardvärde hoppas "
"över. Om det behövs kan du dock använda "
":meth:`BoundArguments.apply_defaults` för att lägga till dem."

#: ../../library/inspect.rst:1012
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type "
":class:`collections.OrderedDict`."
msgstr ""
":attr:`arguments` är nu av typen :class:`dict`. Tidigare var den av typen "
":class:`collections.OrderedDict`."

#: ../../library/inspect.rst:1018
msgid ""
"A tuple of positional arguments values.  Dynamically computed from the "
":attr:`arguments` attribute."
msgstr ""
"En tupel av positionella argumentvärden.  Dynamiskt beräknad från attributet"
" :attr:`arguments`."

#: ../../library/inspect.rst:1023
msgid ""
"A dict of keyword arguments values.  Dynamically computed from the "
":attr:`arguments` attribute.  Arguments that can be passed positionally are "
"included in :attr:`args` instead."
msgstr ""
"Ett dict av nyckelordsargumentvärden.  Beräknas dynamiskt från attributet "
":attr:`arguments`.  Argument som kan skickas positionellt inkluderas i "
":attr:`args` istället."

#: ../../library/inspect.rst:1029
msgid "A reference to the parent :class:`Signature` object."
msgstr "En referens till det överordnade :class:`Signature`\\-objektet."

#: ../../library/inspect.rst:1033
msgid "Set default values for missing arguments."
msgstr "Ange standardvärden för saknade argument."

#: ../../library/inspect.rst:1035
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""
"För variable-positional argument (``*args``) är standardvärdet en tom tupel."

#: ../../library/inspect.rst:1038
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""
"För argument med nyckelord för variabler (``**kwargs``) är standardvärdet en"
" tom dict."

#: ../../library/inspect.rst:1041
msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"
msgstr ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"

#: ../../library/inspect.rst:1051
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions:"
msgstr ""
"Egenskaperna :attr:`args` och :attr:`kwargs` kan användas för att anropa "
"funktioner:"

#: ../../library/inspect.rst:1054
msgid ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"
msgstr ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"

#: ../../library/inspect.rst:1066
msgid ":pep:`362` - Function Signature Object."
msgstr ":pep:`362` - Funktion Signatur Objekt."

#: ../../library/inspect.rst:1067
msgid "The detailed specification, implementation details and examples."
msgstr "Den detaljerade specifikationen, implementeringsdetaljer och exempel."

#: ../../library/inspect.rst:1073
msgid "Classes and functions"
msgstr "Klasser och funktioner"

#: ../../library/inspect.rst:1077
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"Ordna den angivna listan över klasser i en hierarki av nästlade listor. Där "
"en nästlad lista visas innehåller den klasser som härrör från den klass vars"
" post omedelbart föregår listan.  Varje post är en 2-tupel som innehåller en"
" klass och en tupel av dess basklasser.  Om argumentet *unique* är sant, "
"visas exakt en post i den returnerade strukturen för varje klass i den "
"angivna listan.  I annat fall kommer klasser som använder multipel "
"nedärvning och deras ättlingar att visas flera gånger."

#: ../../library/inspect.rst:1088
msgid ""
"Get the names and default values of a Python function's parameters.  A "
":term:`named tuple` is returned:"
msgstr ""
"Hämta namn och standardvärden för en Python-funktions parametrar.  En "
":term:`namngiven tupel` returneras:"

#: ../../library/inspect.rst:1091
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"

#: ../../library/inspect.rst:1094
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of"
" the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters,"
" or ``None`` if there are no such defaults defined. *kwonlyargs* is a list "
"of keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""
"*args* är en lista med namn på positionella parametrar. *varargs* är namnet "
"på parametern ``*`` eller ``None`` om godtyckliga positionella argument inte"
" accepteras. *varkw* är namnet på parametern ``**`` eller ``None`` om "
"godtyckliga nyckelordsargument inte accepteras. *defaults* är en *n*-tupel "
"av standardargumentvärden som motsvarar de sista *n* positionella "
"parametrarna, eller ``None`` om inga sådana standardvärden har definierats. "
"*kwonlyargs* är en lista med parameternamn som endast innehåller nyckelord i"
" deklarationsordning. *kwonlydefaults* är en ordbok som mappar parameternamn"
" från *kwonlyargs* till de standardvärden som används om inget argument "
"anges. *annotations* är en ordbok som mappar parameternamn till annotations."
" Den speciella nyckeln ``\"return\"`` används för att rapportera funktionens"
" returvärde (om någon)."

#: ../../library/inspect.rst:1109
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support"
" additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""
"Notera att :func:`signature` och :ref:`Signature Object <inspect-signature-"
"object>` tillhandahåller det rekommenderade API:et för anropsbar "
"introspektion och stödjer ytterligare beteenden (som enbart positionella "
"argument) som ibland påträffas i API:er för tilläggsmoduler. Denna funktion "
"behålls främst för användning i kod som behöver upprätthålla kompatibilitet "
"med Python 2 ``inspect`` modul API."

#: ../../library/inspect.rst:1116
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in"
" the signature output for bound methods."
msgstr ""
"Denna funktion är nu baserad på :func:`signature`, men ignorerar fortfarande"
" ``__wrapped__``\\-attribut och inkluderar den redan bundna första "
"parametern i signaturutmatningen för bundna metoder."

#: ../../library/inspect.rst:1121
msgid ""
"This method was previously documented as deprecated in favour of "
":func:`signature` in Python 3.5, but that decision has been reversed in "
"order to restore a clearly supported standard interface for single-source "
"Python 2/3 code migrating away from the legacy :func:`getargspec` API."
msgstr ""

#: ../../library/inspect.rst:1136
msgid ""
"Get information about arguments passed into a particular frame.  A "
":term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is "
"returned. *args* is a list of the argument names.  *varargs* and *keywords* "
"are the names of the ``*`` and ``**`` arguments or ``None``.  *locals* is "
"the locals dictionary of the given frame."
msgstr ""
"Hämta information om argument som skickas in i en viss frame.  En "
":term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` returneras."
" *args* är en lista över argumentens namn.  *varargs* och *keywords* är "
"namnen på argumenten ``*`` och ``**`` eller ``None``.  *locals* är locals-"
"ordlistan för den givna ramen."

#: ../../library/inspect.rst:1143 ../../library/inspect.rst:1153
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr "Denna funktion markerades oavsiktligt som föråldrad i Python 3.5."

#: ../../library/inspect.rst:1148
msgid ""
"Format a pretty argument spec from the four values returned by "
":func:`getargvalues`.  The format\\* arguments are the corresponding "
"optional formatting functions that are called to turn names and values into "
"strings."
msgstr ""
"Formaterar en vacker argumentspecifikation från de fyra värden som "
"returneras av :func:`getargvalues`.  Argumenten format\\* är motsvarande "
"valfria formateringsfunktioner som anropas för att omvandla namn och värden "
"till strängar."

#: ../../library/inspect.rst:1158
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"Returnerar en tupel av klass cls basklasser, inklusive cls, i "
"metodupplösningsordning.  Ingen klass förekommer mer än en gång i denna "
"tupel. Observera att metodupplösningsordningen beror på cls:s typ.  Om inte "
"en mycket märklig användardefinierad metatyp används, kommer cls att vara "
"det första elementet i tupeln."

#: ../../library/inspect.rst:1166
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example:"
msgstr ""
"Bind *args* och *kwds* till argumentnamnen i Python-funktionen eller "
"-metoden *func*, som om den anropades med dem. För bundna metoder binds även"
" det första argumentet (vanligtvis kallat ``self``) till den associerade "
"instansen. En dict returneras, som mappar argumentnamnen (inklusive namnen "
"på argumenten ``*`` och ``**``, om sådana finns) till deras värden från "
"*args* och *kwds*. Om *func* anropas på fel sätt, dvs. när ``func(*args, "
"**kwds)`` skulle ge upphov till ett undantag på grund av inkompatibel "
"signatur, ges ett undantag av samma typ och med samma eller liknande "
"meddelande. Ett exempel:"

#: ../../library/inspect.rst:1175
msgid ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"
msgstr ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"

#: ../../library/inspect.rst:1192
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""
"Använd :meth:`Signature.bind` och :meth:`Signature.bind_partial` istället."

#: ../../library/inspect.rst:1198
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to"
" the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""
"Hämta mappningen av externa namnreferenser i en Python-funktion eller -metod"
" *func* till deras aktuella värden. En :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` returneras. "
"*nonlocals* mappar refererade namn till lexikala stängningsvariabler, "
"*globals* till funktionens modulglobaler och *builtins* till de builtins som"
" är synliga från funktionens kropp. *unbound* är den uppsättning namn som "
"refereras till i funktionen och som inte kunde lösas alls med tanke på de "
"aktuella modulglobalerna och builtins."

#: ../../library/inspect.rst:1207
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""
":exc:`TypeError` uppstår om *func* inte är en Python-funktion eller -metod."

#: ../../library/inspect.rst:1214
msgid ""
"Get the object wrapped by *func*. It follows the chain of "
":attr:`__wrapped__` attributes returning the last object in the chain."
msgstr ""
"Hämta objektet som är inlindat av *func*. Den följer kedjan av "
":attr:`__wrapped__`\\-attribut och returnerar det sista objektet i kedjan."

#: ../../library/inspect.rst:1217
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, "
":func:`signature` uses this to stop unwrapping if any object in the chain "
"has a ``__signature__`` attribute defined."
msgstr ""
"*stop* är en valfri callback som accepterar ett objekt i omslagskedjan som "
"sitt enda argument och som gör att uppackningen kan avslutas i förtid om "
"callbacken returnerar ett sant värde. Om callbacken aldrig returnerar ett "
"sant värde returneras det sista objektet i kedjan som vanligt. Till exempel "
"använder :func:`signature` detta för att stoppa uppackningen om något objekt"
" i kedjan har ett ``__signature__``\\-attribut definierat."

#: ../../library/inspect.rst:1224
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ":exc:`ValueError` utlöses om en cykel påträffas."

#: ../../library/inspect.rst:1231
msgid "Compute the annotations dict for an object."
msgstr "Beräkna annoteringsdikten för ett objekt."

#: ../../library/inspect.rst:1233
msgid ""
"``obj`` may be a callable, class, or module. Passing in an object of any "
"other type raises :exc:`TypeError`."
msgstr ""

#: ../../library/inspect.rst:1236
msgid ""
"Returns a dict.  ``get_annotations()`` returns a new dict every time it's "
"called; calling it twice on the same object will return two different but "
"equivalent dicts."
msgstr ""

#: ../../library/inspect.rst:1240
msgid "This function handles several details for you:"
msgstr "Denna funktion hanterar flera detaljer åt dig:"

#: ../../library/inspect.rst:1242
msgid ""
"If ``eval_str`` is true, values of type ``str`` will be un-stringized using "
":func:`eval`.  This is intended for use with stringized annotations (``from "
"__future__ import annotations``)."
msgstr ""

#: ../../library/inspect.rst:1246
msgid ""
"If ``obj`` doesn't have an annotations dict, returns an empty dict.  "
"(Functions and methods always have an annotations dict; classes, modules, "
"and other types of callables may not.)"
msgstr ""

#: ../../library/inspect.rst:1250
msgid ""
"Ignores inherited annotations on classes.  If a class doesn't have its own "
"annotations dict, returns an empty dict."
msgstr ""

#: ../../library/inspect.rst:1252
msgid ""
"All accesses to object members and dict values are done using ``getattr()`` "
"and ``dict.get()`` for safety."
msgstr ""
"Alla åtkomster till objektmedlemmar och dict-värden görs med hjälp av "
"``getattr()`` och ``dict.get()`` för säkerhets skull."

#: ../../library/inspect.rst:1254
msgid "Always, always, always returns a freshly created dict."
msgstr ""

#: ../../library/inspect.rst:1256
msgid ""
"``eval_str`` controls whether or not values of type ``str`` are replaced "
"with the result of calling :func:`eval` on those values:"
msgstr ""

#: ../../library/inspect.rst:1259
msgid ""
"If eval_str is true, :func:`eval` is called on values of type ``str``. (Note"
" that ``get_annotations`` doesn't catch exceptions; if :func:`eval` raises "
"an exception, it will unwind the stack past the ``get_annotations`` call.)"
msgstr ""

#: ../../library/inspect.rst:1263
msgid ""
"If eval_str is false (the default), values of type ``str`` are unchanged."
msgstr ""

#: ../../library/inspect.rst:1265
msgid ""
"``globals`` and ``locals`` are passed in to :func:`eval`; see the "
"documentation for :func:`eval` for more information.  If ``globals`` or "
"``locals`` is ``None``, this function may replace that value with a context-"
"specific default, contingent on ``type(obj)``:"
msgstr ""

#: ../../library/inspect.rst:1270
msgid "If ``obj`` is a module, ``globals`` defaults to ``obj.__dict__``."
msgstr ""

#: ../../library/inspect.rst:1271
msgid ""
"If ``obj`` is a class, ``globals`` defaults to "
"``sys.modules[obj.__module__].__dict__`` and ``locals`` defaults to the "
"``obj`` class namespace."
msgstr ""

#: ../../library/inspect.rst:1274
msgid ""
"If ``obj`` is a callable, ``globals`` defaults to :attr:`obj.__globals__ "
"<function.__globals__>`, although if ``obj`` is a wrapped function (using "
":func:`functools.update_wrapper`) it is first unwrapped."
msgstr ""

#: ../../library/inspect.rst:1279
msgid ""
"Calling ``get_annotations`` is best practice for accessing the annotations "
"dict of any object.  See :ref:`annotations-howto` for more information on "
"annotations best practices."
msgstr ""

#: ../../library/inspect.rst:1289
msgid "The interpreter stack"
msgstr "Tolkens stack"

#: ../../library/inspect.rst:1291
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""
"Några av följande funktioner returnerar :class:`FrameInfo`\\-objekt. För "
"bakåtkompatibilitet tillåter dessa objekt tuple-liknande operationer på alla"
" attribut utom ``positions``. Detta beteende anses vara föråldrat och kan "
"komma att tas bort i framtiden."

#: ../../library/inspect.rst:1300
msgid ""
"The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr "Den :ref:`ramobjekt <frame-objects>` som posten motsvarar."

#: ../../library/inspect.rst:1304
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""
"Filnamnet som associeras med den kod som körs av den ram som denna post "
"motsvarar."

#: ../../library/inspect.rst:1309
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr ""
"Radnumret på den aktuella raden som är kopplad till den kod som körs av den "
"ram som denna post motsvarar."

#: ../../library/inspect.rst:1314
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr ""
"Namnet på den funktion som utförs av den ram som denna post motsvarar."

#: ../../library/inspect.rst:1318
msgid ""
"A list of lines of context from the source code that's being executed by the"
" frame this record corresponds to."
msgstr ""
"En lista med kontextrader från källkoden som exekveras av den ram som den "
"här posten motsvarar."

#: ../../library/inspect.rst:1323 ../../library/inspect.rst:1362
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr "Index för den aktuella raden som körs i listan :attr:`code_context`."

#: ../../library/inspect.rst:1327
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""
"Ett :class:`dis.Positions`\\-objekt som innehåller startradenummer, "
"slutradenummer, startkolumnförskjutning och slutkolumnförskjutning som är "
"associerade med den instruktion som utförs av den ram som denna post "
"motsvarar."

#: ../../library/inspect.rst:1331
msgid "Return a :term:`named tuple` instead of a :class:`tuple`."
msgstr "Returnera en :term:`named tuple` istället för en :class:`tuple`."

#: ../../library/inspect.rst:1334
msgid ""
":class:`!FrameInfo` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""
":class:`!FrameInfo` är nu en klassinstans (som är bakåtkompatibel med den "
"tidigare :term:`named tuple`)."

#: ../../library/inspect.rst:1343
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""
"Filnamnet som är associerat med koden som körs av den ram som denna "
"traceback motsvarar."

#: ../../library/inspect.rst:1348
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr ""
"Radnumret för den aktuella raden som är kopplad till den kod som körs av den"
" ram som denna traceback motsvarar."

#: ../../library/inspect.rst:1353
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""
"Funktionsnamnet som exekveras av den ram som denna traceback motsvarar."

#: ../../library/inspect.rst:1357
msgid ""
"A list of lines of context from the source code that's being executed by the"
" frame this traceback corresponds to."
msgstr ""
"En lista med kontextrader från källkoden som exekveras av den ram som denna "
"traceback motsvarar."

#: ../../library/inspect.rst:1366
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""
"Ett :class:`dis.Positions`\\-objekt som innehåller startradnummer, "
"slutradnummer, startkolumnförskjutning och slutkolumnförskjutning som är "
"associerade med den instruktion som utförs av den ram som denna traceback "
"motsvarar."

#: ../../library/inspect.rst:1371
msgid ""
":class:`!Traceback` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""
":class:`!Traceback` är nu en klassinstans (som är bakåtkompatibel med den "
"tidigare :term:`named tuple`)."

#: ../../library/inspect.rst:1378
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"Om man behåller referenser till ramobjekt, som finns i det första elementet "
"i de ramposter som dessa funktioner returnerar, kan det leda till att "
"programmet skapar referenscykler.  När en referenscykel har skapats kan "
"livslängden för alla objekt som kan nås från de objekt som bildar cykeln bli"
" mycket längre, även om Pythons valfria cykeldetektor är aktiverad.  Om "
"sådana cykler måste skapas är det viktigt att se till att de uttryckligen "
"bryts för att undvika den fördröjda förstörelsen av objekt och den ökade "
"minnesförbrukning som uppstår."

#: ../../library/inspect.rst:1386
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a "
":keyword:`finally` clause.  This is also important if the cycle detector was"
" disabled when Python was compiled or using :func:`gc.disable`.  For "
"example::"
msgstr ""
"Även om cykeldetektorn kommer att fånga upp dessa, kan förstörelsen av "
"ramarna (och lokala variabler) göras deterministisk genom att ta bort cykeln"
" i en :keyword:`finally`\\-sats.  Detta är också viktigt om cykeldetektorn "
"var inaktiverad när Python kompilerades eller med :func:`gc.disable`.  Till "
"exempel::"

#: ../../library/inspect.rst:1391
msgid ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"
msgstr ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"

#: ../../library/inspect.rst:1398
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear`"
" method."
msgstr ""
"Om du vill behålla ramen (t.ex. för att skriva ut en traceback senare) kan "
"du också bryta referenscykler genom att använda metoden :meth:`frame.clear`."

#: ../../library/inspect.rst:1402
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""
"Det valfria argumentet *context* som stöds av de flesta av dessa funktioner "
"anger antalet rader med kontext som ska returneras, vilka är centrerade runt"
" den aktuella raden."

#: ../../library/inspect.rst:1409
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""
"Hämta information om en ram eller ett traceback-objekt.  Ett "
":class:`Traceback`\\-objekt returneras."

#: ../../library/inspect.rst:1412
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""
"Ett :class:`Traceback`\\-objekt returneras istället för en namngiven tupel."

#: ../../library/inspect.rst:1417
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""
"Hämta en lista med :class:`FrameInfo`\\-objekt för en ram och alla yttre "
"ramar. Dessa ramar representerar de anrop som leder till skapandet av "
"*frame*. Den första posten i den returnerade listan representerar *frame*; "
"den sista posten representerar det yttersta anropet på *frame*:s stack."

#: ../../library/inspect.rst:1422 ../../library/inspect.rst:1437
#: ../../library/inspect.rst:1463 ../../library/inspect.rst:1478
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""
"En lista med :term:`namngivna tupler <named tuple>` ``FrameInfo(frame, "
"filename, lineno, function, code_context, index)`` returneras."

#: ../../library/inspect.rst:1427 ../../library/inspect.rst:1442
#: ../../library/inspect.rst:1468 ../../library/inspect.rst:1483
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr "En lista med :class:`FrameInfo`\\-objekt returneras."

#: ../../library/inspect.rst:1432
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""
"Hämta en lista med :class:`FrameInfo`\\-objekt för en tracebacks ram och "
"alla inre ramar.  Dessa ramar representerar anrop som görs som en konsekvens"
" av *frame*. Den första posten i listan representerar *traceback*; den sista"
" posten representerar var undantaget uppstod."

#: ../../library/inspect.rst:1447
msgid "Return the frame object for the caller's stack frame."
msgstr "Returnerar ramobjektet för anroparens stackram."

#: ../../library/inspect.rst:1451
msgid ""
"This function relies on Python stack frame support in the interpreter, which"
" isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"Denna funktion förlitar sig på Python stack frame-stöd i tolken, vilket inte"
" garanterat finns i alla implementationer av Python.  Om den körs i en "
"implementering utan stöd för Python stack frame returnerar denna funktion "
"``None``."

#: ../../library/inspect.rst:1459
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""
"Returnerar en lista med :class:`FrameInfo`\\-objekt för anroparens stack.  "
"Den första posten i den returnerade listan representerar anroparen; den "
"sista posten representerar det yttersta anropet på stacken."

#: ../../library/inspect.rst:1473
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""
"Returnerar en lista med :class:`FrameInfo`\\-objekt för stacken mellan den "
"aktuella ramen och den ram i vilken ett undantag som för närvarande hanteras"
" uppstod.  Den första posten i listan representerar anroparen; den sista "
"posten representerar var undantaget uppstod."

#: ../../library/inspect.rst:1487
msgid "Fetching attributes statically"
msgstr "Hämta attribut statiskt"

#: ../../library/inspect.rst:1489
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`~object.__getattr__` and "
":meth:`~object.__getattribute__` may be called."
msgstr ""
"Både :func:`getattr` och :func:`hasattr` kan utlösa kodexekvering när de "
"hämtar eller kontrollerar om attribut finns. Deskriptorer, som egenskaper, "
"kommer att anropas och :meth:`~object.__getattr__` och "
":meth:`~object.__getattribute__` kan anropas."

#: ../../library/inspect.rst:1495
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as "
":func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""
"För fall där du vill ha passiv introspektion, som dokumentationsverktyg, kan"
" detta vara obekvämt. :func:`getattr_static` har samma signatur som "
":func:`getattr` men undviker att exekvera kod när den hämtar attribut."

#: ../../library/inspect.rst:1501
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`~object.__getattr__` or :meth:`~object.__getattribute__`."
msgstr ""
"Hämta attribut utan att utlösa dynamisk uppslagning via descriptor-"
"protokollet, :meth:`~object.__getattr__` eller "
":meth:`~object.__getattribute__`."

#: ../../library/inspect.rst:1505
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that"
" getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""
"Observera: den här funktionen kanske inte kan hämta alla attribut som "
"getattr kan hämta (t.ex. dynamiskt skapade attribut) och kan hitta attribut "
"som getattr inte kan (t.ex. beskrivningar som ger AttributeError). Den kan "
"också returnera deskriptorobjekt i stället för instansmedlemmar."

#: ../../library/inspect.rst:1511
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""
"Om instansen :attr:`~object.__dict__` skuggas av en annan medlem (t.ex. en "
"egenskap) kommer denna funktion inte att kunna hitta instansmedlemmar."

#: ../../library/inspect.rst:1517
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""
":func:`getattr_static` löser inte deskriptorer, t.ex. slotdeskriptorer eller"
" getsetdeskriptorer på objekt som implementerats i C. Deskriptorobjektet "
"returneras i stället för det underliggande attributet."

#: ../../library/inspect.rst:1521
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""
"Du kan hantera dessa med kod som följande. Observera att för godtyckliga "
"getset-beskrivare kan anrop av dessa utlösa kodkörning::"

#: ../../library/inspect.rst:1525
msgid ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"
msgstr ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"

#: ../../library/inspect.rst:1547
msgid "Current State of Generators, Coroutines, and Asynchronous Generators"
msgstr "Aktuellt läge för generatorer, coroutines och asynkrona generatorer"

#: ../../library/inspect.rst:1549
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""
"När man implementerar coroutine-schemaläggare och för andra avancerade "
"användningar av generatorer är det användbart att avgöra om en generator "
"körs för närvarande, väntar på att starta eller återuppta körningen eller "
"redan har avslutats. :func:`getgeneratorstate` gör det enkelt att avgöra en "
"generators aktuella tillstånd."

#: ../../library/inspect.rst:1557
msgid "Get current state of a generator-iterator."
msgstr "Hämta aktuellt tillstånd för en generator-iterator."

#: ../../library/inspect.rst:1559 ../../library/inspect.rst:1575
#: ../../library/inspect.rst:1592
msgid "Possible states are:"
msgstr "Möjliga tillstånd är:"

#: ../../library/inspect.rst:1561
msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED: Väntar på att starta exekvering."

#: ../../library/inspect.rst:1562
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING: Exekveras för närvarande av tolken."

#: ../../library/inspect.rst:1563
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED: För närvarande suspenderad vid ett yield-uttryck."

#: ../../library/inspect.rst:1564
msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED: Exekveringen har slutförts."

#: ../../library/inspect.rst:1570
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""
"Hämta aktuellt tillstånd för ett coroutine-objekt.  Funktionen är avsedd att"
" användas med coroutine-objekt som skapats av :keyword:`async "
"def`\\-funktioner, men accepterar alla coroutine-liknande objekt som har "
"attributen ``cr_running`` och ``cr_frame``."

#: ../../library/inspect.rst:1577
msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED: Väntar på att starta exekvering."

#: ../../library/inspect.rst:1578
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING: Exekveras för närvarande av tolken."

#: ../../library/inspect.rst:1579
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED: För närvarande avbruten vid ett await-uttryck."

#: ../../library/inspect.rst:1580
msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED: Exekveringen har slutförts."

#: ../../library/inspect.rst:1586
msgid ""
"Get current state of an asynchronous generator object.  The function is "
"intended to be used with asynchronous iterator objects created by "
":keyword:`async def` functions which use the :keyword:`yield` statement, but"
" will accept any asynchronous generator-like object that has ``ag_running`` "
"and ``ag_frame`` attributes."
msgstr ""
"Hämta aktuellt tillstånd för ett asynkront generatorobjekt.  Funktionen är "
"avsedd att användas med asynkrona iteratorobjekt som skapats av "
":keyword:`async def`\\-funktioner som använder :keyword:`yield`\\-satsen, "
"men accepterar alla asynkrona generatorliknande objekt som har attributen "
"``ag_running`` och ``ag_frame``."

#: ../../library/inspect.rst:1594
msgid "AGEN_CREATED: Waiting to start execution."
msgstr "AGEN_CREATED: Väntar på att starta körning."

#: ../../library/inspect.rst:1595
msgid "AGEN_RUNNING: Currently being executed by the interpreter."
msgstr "AGEN_RUNNING: Exekveras för närvarande av tolken."

#: ../../library/inspect.rst:1596
msgid "AGEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "AGEN_SUSPENDED: För närvarande suspenderad vid ett yield-uttryck."

#: ../../library/inspect.rst:1597
msgid "AGEN_CLOSED: Execution has completed."
msgstr "AGEN_CLOSED: Exekveringen har slutförts."

#: ../../library/inspect.rst:1601
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""
"Generatorns aktuella interna tillstånd kan också efterfrågas. Detta är mest "
"användbart för teständamål, för att säkerställa att det interna tillståndet "
"uppdateras som förväntat:"

#: ../../library/inspect.rst:1607
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""
"Hämta mappningen av live lokala variabler i *generator* till deras aktuella "
"värden.  En ordbok returneras som mappar från variabelnamn till värden. "
"Detta är likvärdigt med att anropa :func:`locals` i generatorns kropp, och "
"alla samma varningar gäller."

#: ../../library/inspect.rst:1612
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""
"Om *generator* är en :term:`generator` utan någon associerad ram returneras "
"en tom ordbok. :exc:`TypeError` uppstår om *generator* inte är ett Python "
"generator-objekt."

#: ../../library/inspect.rst:1618
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""
"Denna funktion förlitar sig på att generatorn exponerar en Python-stackram "
"för introspektion, vilket inte garanterat är fallet i alla implementationer "
"av Python. I sådana fall kommer denna funktion alltid att returnera en tom "
"ordbok."

#: ../../library/inspect.rst:1627
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works"
" for coroutine objects created by :keyword:`async def` functions."
msgstr ""
"Denna funktion är analog med :func:`~inspect.getgeneratorlocals`, men "
"fungerar för coroutine-objekt som skapats av :keyword:`async "
"def`\\-funktioner."

#: ../../library/inspect.rst:1634
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works"
" for asynchronous generator objects created by :keyword:`async def` "
"functions which use the :keyword:`yield` statement."
msgstr ""
"Denna funktion är analog med :func:`~inspect.getgeneratorlocals`, men "
"fungerar för asynkrona generatorobjekt som skapats av :keyword:`async "
"def`\\-funktioner som använder :keyword:`yield`\\-satsen."

#: ../../library/inspect.rst:1644
msgid "Code Objects Bit Flags"
msgstr "Kodobjekt Bit Flaggor"

#: ../../library/inspect.rst:1646
msgid ""
"Python code objects have a :attr:`~codeobject.co_flags` attribute, which is "
"a bitmap of the following flags:"
msgstr ""
"Python-kodobjekt har ett :attr:`~codeobject.co_flags`\\-attribut, som är en "
"bitmapp av följande flaggor:"

#: ../../library/inspect.rst:1651
msgid "The code object is optimized, using fast locals."
msgstr "Kodobjektet är optimerat och använder snabba lokala enheter."

#: ../../library/inspect.rst:1655
msgid ""
"If set, a new dict will be created for the frame's :attr:`~frame.f_locals` "
"when the code object is executed."
msgstr ""
"Om den är inställd kommer en ny dict att skapas för ramens "
":attr:`~frame.f_locals` när kodobjektet exekveras."

#: ../../library/inspect.rst:1660
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""
"Kodobjektet har en variabel positionell parameter (``*args``\\-liknande)."

#: ../../library/inspect.rst:1664
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""
"Kodobjektet har en variabel nyckelordsparameter (``**kwargs``\\-liknande)."

#: ../../library/inspect.rst:1668
msgid "The flag is set when the code object is a nested function."
msgstr "Flaggan sätts när kodobjektet är en nästlad funktion."

#: ../../library/inspect.rst:1672
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""
"Flaggan sätts när kodobjektet är en generatorfunktion, d.v.s. ett "
"generatorobjekt returneras när kodobjektet exekveras."

#: ../../library/inspect.rst:1677
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""
"Flaggan sätts när kodobjektet är en coroutine-funktion. När kodobjektet "
"exekveras returnerar det ett coroutine-objekt. Se :pep:`492` för mer "
"information."

#: ../../library/inspect.rst:1685
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""
"Flaggan används för att omvandla generatorer till generatorbaserade "
"coroutines.  Generatorobjekt med denna flagga kan användas i ``await``\\ "
"-uttryck och kan ``yield from`` coroutine-objekt. Se :pep:`492` för mer "
"information."

#: ../../library/inspect.rst:1694
msgid ""
"The flag is set when the code object is an asynchronous generator function."
"  When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""
"Flaggan sätts när kodobjektet är en asynkron generatorfunktion.  När "
"kodobjektet exekveras returnerar det ett asynkront generatorobjekt.  Se "
":pep:`525` för mer information."

#: ../../library/inspect.rst:1701
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""
"Flaggorna är specifika för CPython och kanske inte definieras i andra "
"Python-implementationer.  Dessutom är flaggorna en implementationsdetalj och"
" kan tas bort eller föråldras i framtida Python-utgåvor. Det rekommenderas "
"att använda offentliga API:er från modulen :mod:`inspect` för alla "
"introspektionsbehov."

#: ../../library/inspect.rst:1709
msgid "Buffer flags"
msgstr "Buffertflaggor"

#: ../../library/inspect.rst:1713
msgid ""
"This is an :class:`enum.IntFlag` that represents the flags that can be "
"passed to the :meth:`~object.__buffer__` method of objects implementing the "
":ref:`buffer protocol <bufferobjects>`."
msgstr ""
"Detta är en :class:`enum.IntFlag` som representerar de flaggor som kan "
"skickas till :meth:`~object.__buffer__`\\-metoden för objekt som "
"implementerar :ref:`buffer protocol <bufferobjects>`."

#: ../../library/inspect.rst:1717
msgid "The meaning of the flags is explained at :ref:`buffer-request-types`."
msgstr "Betydelsen av flaggorna förklaras i :ref:`buffer-request-types`."

#: ../../library/inspect.rst:1744
msgid "Command Line Interface"
msgstr "Kommandoradsgränssnitt"

#: ../../library/inspect.rst:1746
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""
"Modulen :mod:`inspect` ger också en grundläggande möjlighet till "
"introspektion från kommandoraden."

#: ../../library/inspect.rst:1751
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""
"Accepterar som standard namnet på en modul och skriver ut källan till den "
"modulen. En klass eller funktion inom modulen kan skrivas ut istället genom "
"att lägga till ett kolon och det kvalificerade namnet på målobjektet."

#: ../../library/inspect.rst:1757
msgid ""
"Print information about the specified object rather than the source code"
msgstr "Skriv ut information om det angivna objektet i stället för källkoden"
