# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 15:08+0000\n"
"PO-Revision-Date: 2025-09-15 01:04+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/random.rst:2
msgid ":mod:`!random` --- Generate pseudo-random numbers"
msgstr ":mod:`!random` --- Generera pseudoslumpmässiga tal"

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**Källkod:** :source:`Lib/random.py`"

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""
"Denna modul implementerar pseudoslumpmässiga nummergeneratorer för olika "
"distributioner."

#: ../../library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""
"För heltal finns ett enhetligt urval från ett intervall. För sekvenser finns "
"det ett enhetligt urval av ett slumpmässigt element, en funktion för att "
"generera en slumpmässig permutation av en lista på plats och en funktion för "
"slumpmässigt urval utan ersättning."

#: ../../library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"På den reella linjen finns det funktioner för att beräkna uniforma, normala "
"(gaussiska), lognormala, negativa exponentiella, gamma- och "
"betafördelningar. För att generera fördelningar av vinklar finns von Mises-"
"fördelningen tillgänglig."

#: ../../library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the half-open range ``0.0 <= X < "
"1.0``. Python uses the Mersenne Twister as the core generator.  It produces "
"53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"Nästan alla modulfunktioner är beroende av den grundläggande funktionen :"
"func:`.random`, som genererar en slumpmässig flottör enhetligt i det "
"halvöppna intervallet ``0,0 <= X < 1,0``. Python använder Mersenne Twister "
"som kärngenerator.  Den producerar flyttal med 53-bitars precision och har "
"en period på 2\\*\\*19937-1.  Den underliggande implementationen i C är både "
"snabb och trådsäker.  Mersenne Twister är en av de mest omfattande "
"slumptalsgeneratorer som finns.  Eftersom den är helt deterministisk är den "
"dock inte lämplig för alla ändamål, och den är helt olämplig för "
"kryptografiska ändamål."

#: ../../library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""
"De funktioner som tillhandahålls av denna modul är faktiskt bundna metoder "
"för en dold instans av klassen :class:`random.Random`.  Du kan instansiera "
"dina egna instanser av :class:`Random` för att få generatorer som inte delar "
"tillstånd."

#: ../../library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: see the documentation on that class "
"for more details."
msgstr ""
"Klassen :class:`Random` kan också underklassificeras om du vill använda en "
"annan grundläggande generator som du själv har skapat: se dokumentationen "
"för den klassen för mer information."

#: ../../library/random.rst:40
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""
"Modulen :mod:`random` innehåller även klassen :class:`SystemRandom` som "
"använder systemfunktionen :func:`os.urandom` för att generera slumptal från "
"källor som tillhandahålls av operativsystemet."

#: ../../library/random.rst:46
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` module."
msgstr ""
"Pseudoslumpgeneratorerna i denna modul bör inte användas för "
"säkerhetsändamål.  För säkerhet eller kryptografisk användning, se modulen :"
"mod:`secrets`."

#: ../../library/random.rst:52
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""
"M. Matsumoto och T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."

#: ../../library/random.rst:57
msgid ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707-long-period-random-number-generator/>`_ for a compatible "
"alternative random number generator with a long period and comparatively "
"simple update operations."
msgstr ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707-long-period-random-number-generator/>`_ för en kompatibel "
"alternativ slumptalsgenerator med lång period och jämförelsevis enkla "
"uppdateringsoperationer."

#: ../../library/random.rst:63
msgid ""
"The global random number generator and instances of :class:`Random` are "
"thread-safe. However, in the free-threaded build, concurrent calls to the "
"global generator or to the same instance of :class:`Random` may encounter "
"contention and poor performance. Consider using separate instances of :class:"
"`Random` per thread instead."
msgstr ""
"Den globala slumptalsgeneratorn och instanser av :class:`Random` är "
"trådsäkra. I den frittrådade versionen kan dock samtidiga anrop till den "
"globala generatorn eller till samma instans av :class:`Random` leda till "
"konflikter och dålig prestanda. Överväg att använda separata instanser av :"
"class:`Random` per tråd istället."

#: ../../library/random.rst:70
msgid "Bookkeeping functions"
msgstr "Bokföringsfunktioner"

#: ../../library/random.rst:74
msgid "Initialize the random number generator."
msgstr "Initialisera slumptalsgeneratorn."

#: ../../library/random.rst:76
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"Om *a* utelämnas eller ``None``, används den aktuella systemtiden.  Om "
"slumpmässiga källor tillhandahålls av operativsystemet används de i stället "
"för systemtiden (se funktionen :func:`os.urandom` för information om "
"tillgänglighet)."

#: ../../library/random.rst:81
msgid "If *a* is an int, it is used directly."
msgstr "Om *a* är en int används den direkt."

#: ../../library/random.rst:83
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:"
"`bytearray` object gets converted to an :class:`int` and all of its bits are "
"used."
msgstr ""
"Med version 2 (standard) konverteras ett :class:`str`\\-, :class:`bytes`\\- "
"eller :class:`bytearray`\\-objekt till ett :class:`int`\\-objekt och alla "
"dess bitar används."

#: ../../library/random.rst:86
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"Med version 1 (som tillhandahålls för att återskapa slumpmässiga sekvenser "
"från äldre versioner av Python) genererar algoritmen för :class:`str` och :"
"class:`bytes` ett smalare urval av frön."

#: ../../library/random.rst:90
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr "Flyttat till version 2-schemat som använder alla bitar i en strängfrö."

#: ../../library/random.rst:93
msgid ""
"The *seed* must be one of the following types: ``None``, :class:`int`, :"
"class:`float`, :class:`str`, :class:`bytes`, or :class:`bytearray`."
msgstr ""
"*Seed* måste vara en av följande typer: ``None``, :class:`int`, :class:"
"`float`, :class:`str`, :class:`bytes`, eller :class:`bytearray`."

#: ../../library/random.rst:100
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""
"Returnerar ett objekt som fångar generatorns nuvarande interna tillstånd.  "
"Detta objekt kan skickas till :func:`setstate` för att återställa "
"tillståndet."

#: ../../library/random.rst:106
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""
"*state* bör ha erhållits från ett tidigare anrop till :func:`getstate`, och :"
"func:`setstate` återställer generatorns interna tillstånd till vad det var "
"när :func:`getstate` anropades."

#: ../../library/random.rst:112
msgid "Functions for bytes"
msgstr "Funktioner för bytes"

#: ../../library/random.rst:116
msgid "Generate *n* random bytes."
msgstr "Generera *n* slumpmässiga byte."

#: ../../library/random.rst:118
msgid ""
"This method should not be used for generating security tokens. Use :func:"
"`secrets.token_bytes` instead."
msgstr ""
"Denna metod bör inte användas för att generera säkerhetstoken. Använd :func:"
"`secrets.token_bytes` istället."

#: ../../library/random.rst:125
msgid "Functions for integers"
msgstr "Funktioner för heltal"

#: ../../library/random.rst:130
msgid "Return a randomly selected element from ``range(start, stop, step)``."
msgstr ""
"Returnerar ett slumpmässigt valt element från ``range(start, stop, step)``."

#: ../../library/random.rst:132
msgid ""
"This is roughly equivalent to ``choice(range(start, stop, step))`` but "
"supports arbitrarily large ranges and is optimized for common cases."
msgstr ""
"Detta motsvarar i stort sett ``choice(range(start, stop, step))`` men stöder "
"godtyckligt stora intervall och är optimerat för vanliga fall."

#: ../../library/random.rst:135
msgid "The positional argument pattern matches the :func:`range` function."
msgstr "Det positionella argumentmönstret matchar funktionen :func:`range`."

#: ../../library/random.rst:137
msgid ""
"Keyword arguments should not be used because they can be interpreted in "
"unexpected ways. For example ``randrange(start=100)`` is interpreted as "
"``randrange(0, 100, 1)``."
msgstr ""
"Nyckelord som argument bör inte användas eftersom de kan tolkas på oväntade "
"sätt. Till exempel tolkas ``randrange(start=100)`` som ``randrange(0, 100, "
"1)``."

#: ../../library/random.rst:141
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
":meth:`randrange` är mer sofistikerad när det gäller att producera jämnt "
"fördelade värden.  Tidigare användes en stil som ``int(random()*n)`` som "
"kunde ge något ojämna fördelningar."

#: ../../library/random.rst:146
msgid ""
"Automatic conversion of non-integer types is no longer supported. Calls such "
"as ``randrange(10.0)`` and ``randrange(Fraction(10, 1))`` now raise a :exc:"
"`TypeError`."
msgstr ""
"Automatisk konvertering av typer som inte är heltal stöds inte längre. Anrop "
"som ``randrange(10.0)`` och ``randrange(Fraction(10, 1))`` ger nu upphov "
"till ett :exc:`TypeError`."

#: ../../library/random.rst:153
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""
"Returnerar ett slumpmässigt heltal *N* så att ``a <= N <= b``.  Alias för "
"``randrange(a, b+1)``."

#: ../../library/random.rst:158
msgid ""
"Returns a non-negative Python integer with *k* random bits. This method is "
"supplied with the Mersenne Twister generator and some other generators may "
"also provide it as an optional part of the API. When available, :meth:"
"`getrandbits` enables :meth:`randrange` to handle arbitrarily large ranges."
msgstr ""
"Returnerar ett icke-negativt Python-heltal med *k* slumpmässiga bitar. Denna "
"metod levereras med Mersenne Twister-generatorn och vissa andra generatorer "
"kan också tillhandahålla den som en valfri del av API:et. När den är "
"tillgänglig gör :meth:`getrandbits` det möjligt för :meth:`randrange` att "
"hantera godtyckligt stora intervall."

#: ../../library/random.rst:164
msgid "This method now accepts zero for *k*."
msgstr "Denna metod accepterar nu noll för *k*."

#: ../../library/random.rst:169
msgid "Functions for sequences"
msgstr "Funktioner för sekvenser"

#: ../../library/random.rst:173
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""
"Returnerar ett slumpmässigt element från den icke-tomma sekvensen *seq*. Om "
"*seq* är tom, uppstår :exc:`IndexError`."

#: ../../library/random.rst:178
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""
"Returnerar en *k* stor lista med element som valts från *populationen* med "
"ersättning. Om *populationen* är tom, uppstår :exc:`IndexError`."

#: ../../library/random.rst:181
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights "
"before making selections, so supplying the cumulative weights saves work."
msgstr ""
"Om en *weights*-sekvens anges görs urvalen enligt de relativa vikterna.  "
"Alternativt, om en *cum_weights*-sekvens anges, görs urvalen enligt de "
"kumulativa vikterna (kanske beräknade med :func:`itertools.accumulate`).  "
"Till exempel är de relativa vikterna ``[10, 5, 30, 5]`` likvärdiga med de "
"kumulativa vikterna ``[10, 15, 45, 50]``.  Internt konverteras de relativa "
"vikterna till kumulativa vikter innan urval görs, så det sparar arbete att "
"ange de kumulativa vikterna."

#: ../../library/random.rst:190
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""
"Om varken *weights* eller *cum_weights* anges görs urvalen med lika stor "
"sannolikhet.  Om en sekvens med vikter anges måste den vara lika lång som "
"sekvensen *population*.  Det är ett :exc:`TypeError` att ange både *weights* "
"och *cum_weights*."

#: ../../library/random.rst:195
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals).  Weights are assumed "
"to be non-negative and finite.  A :exc:`ValueError` is raised if all weights "
"are zero."
msgstr ""
"I *weights* eller *cum_weights* kan du använda vilken numerisk typ som helst "
"som fungerar med :class:`float`\\-värdena som returneras av :func:`random` "
"(vilket inkluderar heltal, flyttal och fraktioner men inte decimaler).  "
"Vikter antas vara icke-negativa och ändliga.  Ett :exc:`ValueError` uppstår "
"om alla vikter är noll."

#: ../../library/random.rst:201
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to :func:"
"`choice`.  The algorithm used by :func:`choices` uses floating-point "
"arithmetic for internal consistency and speed.  The algorithm used by :func:"
"`choice` defaults to integer arithmetic with repeated selections to avoid "
"small biases from round-off error."
msgstr ""
"För ett visst frö ger funktionen :func:`choices` med lika viktning "
"vanligtvis en annan sekvens än upprepade anrop till :func:`choice`.  "
"Algoritmen som används av :func:`choices` använder flyttalsaritmetik för "
"intern konsistens och snabbhet.  Algoritmen som används av :func:`choice` "
"använder som standard heltalsaritmetik med upprepade val för att undvika små "
"förskjutningar från avrundningsfel."

#: ../../library/random.rst:210
msgid "Raises a :exc:`ValueError` if all weights are zero."
msgstr "Utlöser ett :exc:`ValueError` om alla vikter är noll."

#: ../../library/random.rst:216
msgid "Shuffle the sequence *x* in place."
msgstr "Blanda sekvensen *x* på plats."

#: ../../library/random.rst:218
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr ""
"Om du vill blanda en oföränderlig sekvens och returnera en ny blandad lista "
"använder du ``sample(x, k=len(x))`` istället."

#: ../../library/random.rst:221
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x* "
"can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""
"Observera att även för små ``len(x)`` kan det totala antalet permutationer "
"av *x* snabbt bli större än perioden för de flesta slumptalsgeneratorer. "
"Detta innebär att de flesta permutationer av en lång sekvens aldrig kan "
"genereras.  Till exempel är en sekvens med längden 2080 den största som kan "
"rymmas inom perioden för slumptalsgeneratorn Mersenne Twister."

#: ../../library/random.rst:227
msgid "Removed the optional parameter *random*."
msgstr "Den valfria parametern *random* har tagits bort."

#: ../../library/random.rst:233
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence.  Used for random sampling without replacement."
msgstr ""
"Returnerar en *k* lång lista med unika element som valts från "
"populationssekvensen.  Används för slumpmässig provtagning utan ersättning."

#: ../../library/random.rst:236
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"Returnerar en ny lista som innehåller element från populationen medan den "
"ursprungliga populationen lämnas oförändrad.  Den resulterande listan är i "
"urvalsordning så att alla delskivor också kommer att vara giltiga "
"slumpmässiga urval.  Detta gör det möjligt att dela upp lotterivinnare "
"(urvalet) i vinnare av förstapriset och andraplatsen (underskivorna)."

#: ../../library/random.rst:242
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""
"Medlemmarna i populationen behöver inte vara :term:`hashable` eller unika.  "
"Om populationen innehåller upprepningar är varje förekomst ett möjligt urval "
"i urvalet."

#: ../../library/random.rst:245
msgid ""
"Repeated elements can be specified one at a time or with the optional "
"keyword-only *counts* parameter.  For example, ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` is equivalent to ``sample(['red', 'red', 'red', 'red', "
"'blue', 'blue'], k=5)``."
msgstr ""
"Upprepade element kan anges ett i taget eller med den valfria parametern "
"*counts* som endast innehåller nyckelord.  Exempelvis är ``sample(['red', "
"'blue'], counts=[4, 2], k=5)`` likvärdigt med ``sample(['red', 'red', 'red', "
"'red', 'blue', 'blue'], k=5)``."

#: ../../library/random.rst:250
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""
"Om du vill välja ett urval från ett intervall av heltal använder du ett :"
"func:`range`\\-objekt som argument.  Detta är särskilt snabbt och "
"utrymmeseffektivt för provtagning från en stor population: "
"``sample(range(10000000), k=60)``."

#: ../../library/random.rst:254
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""
"Om urvalsstorleken är större än populationsstorleken uppstår ett :exc:"
"`ValueError`."

#: ../../library/random.rst:257
msgid "Added the *counts* parameter."
msgstr "Lagt till parametern *counts*."

#: ../../library/random.rst:262
msgid ""
"The *population* must be a sequence.  Automatic conversion of sets to lists "
"is no longer supported."
msgstr ""
"*Population* måste vara en sekvens.  Automatisk konvertering av sets till "
"listor stöds inte längre."

#: ../../library/random.rst:266
msgid "Discrete distributions"
msgstr "Diskreta fördelningar"

#: ../../library/random.rst:268
msgid "The following function generates a discrete distribution."
msgstr "Följande funktion genererar en diskret fördelning."

#: ../../library/random.rst:272
msgid ""
"`Binomial distribution <https://mathworld.wolfram.com/BinomialDistribution."
"html>`_. Return the number of successes for *n* independent trials with the "
"probability of success in each trial being *p*:"
msgstr ""
"`Binomialfördelning <https://mathworld.wolfram.com/BinomialDistribution."
"html>`_. Returnera antalet lyckade försök för *n* oberoende försök där "
"sannolikheten för att lyckas i varje försök är *p*:"

#: ../../library/random.rst:277
msgid "Mathematically equivalent to::"
msgstr "Matematiskt likvärdig med::"

#: ../../library/random.rst:279
msgid "sum(random() < p for i in range(n))"
msgstr "sum(random() < p för i i intervallet(n))"

#: ../../library/random.rst:281
msgid ""
"The number of trials *n* should be a non-negative integer. The probability "
"of success *p* should be between ``0.0 <= p <= 1.0``. The result is an "
"integer in the range ``0 <= X <= n``."
msgstr ""
"Antalet försök *n* ska vara ett icke-negativt heltal. Sannolikheten för "
"framgång *p* ska ligga mellan ``0,0 <= p <= 1,0``. Resultatet är ett heltal "
"i intervallet ``0 <= X <= n``."

#: ../../library/random.rst:291
msgid "Real-valued distributions"
msgstr "Realvärdesdistributioner"

#: ../../library/random.rst:293
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"Följande funktioner genererar specifika realvärdesfördelningar. "
"Funktionsparametrarna är namngivna efter motsvarande variabler i "
"fördelningens ekvation, som används i vanlig matematisk praxis; de flesta av "
"dessa ekvationer kan hittas i vilken statistiktext som helst."

#: ../../library/random.rst:301
msgid ""
"Return the next random floating-point number in the range ``0.0 <= X < 1.0``"
msgstr "Returnerar nästa slumpmässiga flyttal i intervallet ``0,0 <= X < 1,0``"

#: ../../library/random.rst:306
msgid ""
"Return a random floating-point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"Returnerar ett slumpmässigt flyttal *N* så att ``a <= N <= b`` för ``a <= "
"b`` och ``b <= N <= a`` för ``b < a``."

#: ../../library/random.rst:309
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the expression ``a + (b-a) * random()``."
msgstr ""
"Slutpunktsvärdet ``b`` kan ingå eller inte ingå i intervallet beroende på "
"avrundningen av flyttal i uttrycket ``a + (b-a) * random()``."

#: ../../library/random.rst:316
msgid ""
"Return a random floating-point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""
"Returnerar ett slumpmässigt flyttal *N* så att ``låg <= N <= hög`` och med "
"det angivna *läget* mellan dessa gränser.  Gränserna *low* och *high* är som "
"standard noll och ett.  Argumentet *mode* är som standard mittpunkten mellan "
"gränserna, vilket ger en symmetrisk fördelning."

#: ../../library/random.rst:324
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""
"Betafördelning.  Villkoren för parametrarna är ``alpha > 0`` och ``beta > "
"0``. Returnerade värden varierar mellan 0 och 1."

#: ../../library/random.rst:330
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""
"Exponentiell fördelning.  *lambd* är 1,0 dividerat med önskat medelvärde.  "
"Det bör vara ett värde som inte är noll.  (Parametern skulle kallas "
"\"lambda\", men det är ett reserverat ord i Python)  Returnerade värden "
"sträcker sig från 0 till positiv oändlighet om *lambd* är positiv, och från "
"negativ oändlighet till 0 om *lambd* är negativ."

#: ../../library/random.rst:336
msgid "Added the default value for ``lambd``."
msgstr "Lagt till standardvärde för ``lambd``."

#: ../../library/random.rst:342
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  The shape and scale "
"parameters, *alpha* and *beta*, must have positive values. (Calling "
"conventions vary and some sources define 'beta' as the inverse of the scale)."
msgstr ""
"Gammafördelning.  (*Inte* gammafunktionen!) Parametrarna för form och skala, "
"*alpha* och *beta*, måste ha positiva värden. (Benämningskonventionerna "
"varierar och vissa källor definierar \"beta\" som skalans invers)."

#: ../../library/random.rst:347
msgid "The probability distribution function is::"
msgstr "Sannolikhetsfördelningsfunktionen är::"

#: ../../library/random.rst:349
msgid ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"
msgstr ""
"          x ** (alfa - 1) * math.exp(-x / beta)\n"
"pdf(x) = --------------------------------------\n"
"            math.gamma(alfa) * beta ** alfa"

#: ../../library/random.rst:356
msgid ""
"Normal distribution, also called the Gaussian distribution. *mu* is the "
"mean, and *sigma* is the standard deviation.  This is slightly faster than "
"the :func:`normalvariate` function defined below."
msgstr ""
"Normalfördelning, även kallad gaussisk fördelning. *mu* är medelvärdet och "
"*sigma* är standardavvikelsen.  Detta är något snabbare än funktionen :func:"
"`normalvariate` som definieras nedan."

#: ../../library/random.rst:361
msgid ""
"Multithreading note:  When two threads call this function simultaneously, it "
"is possible that they will receive the same return value.  This can be "
"avoided in three ways. 1) Have each thread use a different instance of the "
"random number generator. 2) Put locks around all calls. 3) Use the slower, "
"but thread-safe :func:`normalvariate` function instead."
msgstr ""
"Notering om multithreading: När två trådar anropar denna funktion samtidigt "
"är det möjligt att de får samma returvärde.  Detta kan undvikas på tre sätt. "
"1) Låt varje tråd använda en annan instans av slumptalsgeneratorn. 2) Sätt "
"lås runt alla anrop. 3) Använd den långsammare men trådsäkra funktionen :"
"func:`normalvariate` istället."

#: ../../library/random.rst:368 ../../library/random.rst:384
msgid "*mu* and *sigma* now have default arguments."
msgstr "*mu* och *sigma* har nu standardargument."

#: ../../library/random.rst:374
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"Logaritmisk normalfördelning.  Om du tar den naturliga logaritmen av den här "
"fördelningen får du en normalfördelning med medelvärde *mu* och "
"standardavvikelse *sigma*.  *mu* kan ha vilket värde som helst och *sigma* "
"måste vara större än noll."

#: ../../library/random.rst:382
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""
"Normalfördelning.  *mu* är medelvärdet och *sigma* är standardavvikelsen."

#: ../../library/random.rst:390
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"*mu* är medelvinkeln, uttryckt i radianer mellan 0 och 2\\*\\ *pi*, och "
"*kappa* är koncentrationsparametern, som måste vara större än eller lika med "
"noll.  Om *kappa* är lika med noll reduceras denna fördelning till en "
"enhetlig slumpmässig vinkel över intervallet 0 till 2\\*\\ *pi*."

#: ../../library/random.rst:398
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "Pareto-fördelning.  *alpha* är formparametern."

#: ../../library/random.rst:403
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""
"Weibullfördelning.  *alpha* är skalparametern och *beta* är formparametern."

#: ../../library/random.rst:408
msgid "Alternative Generator"
msgstr "Alternativ generator"

#: ../../library/random.rst:412
msgid ""
"Class that implements the default pseudo-random number generator used by "
"the :mod:`random` module."
msgstr ""
"Klass som implementerar standardgeneratorn för pseudoslumptal som används av "
"modulen :mod:`random`."

#: ../../library/random.rst:415
msgid ""
"Formerly the *seed* could be any hashable object.  Now it is limited to: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, or :"
"class:`bytearray`."
msgstr ""
"Tidigare kunde *seed* vara vilket hashbart objekt som helst.  Nu är det "
"begränsat till: ``None``, :class:`int`, :class:`float`, :class:`str`, :class:"
"`bytes`, eller :class:`bytearray`."

#: ../../library/random.rst:420
msgid ""
"Subclasses of :class:`!Random` should override the following methods if they "
"wish to make use of a different basic generator:"
msgstr ""
"Subklasser av :class:`!Random` bör åsidosätta följande metoder om de vill "
"använda en annan grundläggande generator:"

#: ../../library/random.rst:425
msgid ""
"Override this method in subclasses to customise the :meth:`~random.seed` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random.seed`\\-"
"beteendet för :class:`!Random`\\-instanser."

#: ../../library/random.rst:430
msgid ""
"Override this method in subclasses to customise the :meth:`~random.getstate` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random."
"getstate`\\-beteendet för :class:`!Random`\\-instanser."

#: ../../library/random.rst:435
msgid ""
"Override this method in subclasses to customise the :meth:`~random.setstate` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random."
"setstate`\\-beteendet för :class:`!Random`\\-instanser."

#: ../../library/random.rst:440
msgid ""
"Override this method in subclasses to customise the :meth:`~random.random` "
"behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random."
"random`\\-beteendet för :class:`!Random`\\-instanser."

#: ../../library/random.rst:443
msgid ""
"Optionally, a custom generator subclass can also supply the following method:"
msgstr ""
"Alternativt kan en underklass till en anpassad generator också "
"tillhandahålla följande metod:"

#: ../../library/random.rst:447
msgid ""
"Override this method in subclasses to customise the :meth:`~random."
"getrandbits` behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random."
"getrandbits`\\-beteendet för :class:`!Random`\\-instanser."

#: ../../library/random.rst:452
msgid ""
"Override this method in subclasses to customise the :meth:`~random."
"randbytes` behaviour of :class:`!Random` instances."
msgstr ""
"Åsidosätt denna metod i underklasser för att anpassa :meth:`~random."
"randbytes`\\-beteendet hos :class:`!Random`\\-instanser."

#: ../../library/random.rst:458
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:"
"`NotImplementedError` if called."
msgstr ""
"Klass som använder funktionen :func:`os.urandom` för att generera slumptal "
"från källor som tillhandahålls av operativsystemet. Finns inte tillgänglig "
"på alla system. Förlitar sig inte på programvarutillstånd och sekvenser är "
"inte reproducerbara. Följaktligen har metoden :meth:`seed` ingen effekt och "
"ignoreras. Metoderna :meth:`getstate` och :meth:`setstate` ger upphov till :"
"exc:`NotImplementedError` om de anropas."

#: ../../library/random.rst:467
msgid "Notes on Reproducibility"
msgstr "Anteckningar om reproducerbarhet"

#: ../../library/random.rst:469
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo-random number generator.  By reusing a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""
"Ibland är det bra att kunna reproducera de sekvenser som ges av en "
"pseudoslumpmässig nummergenerator.  Genom att återanvända ett seed-värde bör "
"samma sekvens kunna reproduceras från körning till körning så länge inte "
"flera trådar körs."

#: ../../library/random.rst:473
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""
"De flesta av slumpmodulens algoritmer och såddfunktioner kan ändras i olika "
"Python-versioner, men två aspekter kommer garanterat inte att ändras:"

#: ../../library/random.rst:476
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""
"Om en ny såningsmetod läggs till kommer en bakåtkompatibel såmaskin att "
"erbjudas."

#: ../../library/random.rst:479
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""
"Generatorns metod :meth:`~Random.random` kommer att fortsätta att producera "
"samma sekvens när den kompatibla såningsmaskinen får samma frö."

#: ../../library/random.rst:485
msgid "Examples"
msgstr "Exempel"

#: ../../library/random.rst:487
msgid "Basic examples::"
msgstr "Grundläggande exempel::"

#: ../../library/random.rst:489
msgid ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging "
"5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 "
"inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a "
"sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"
msgstr ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging "
"5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 "
"inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a "
"sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"

#: ../../library/random.rst:515
msgid "Simulations::"
msgstr "Simuleringar::"

#: ../../library/random.rst:517
msgid ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"
msgstr ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"

#: ../../library/random.rst:540
msgid ""
"Example of `statistical bootstrapping <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ using resampling with replacement to estimate "
"a confidence interval for the mean of a sample::"
msgstr ""
"Exempel på `statistisk bootstrapping <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ där man använder omsampling med ersättning för "
"att skatta ett konfidensintervall för medelvärdet i ett urval::"

#: ../../library/random.rst:544
msgid ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"
msgstr ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"

#: ../../library/random.rst:553
msgid ""
"Example of a `resampling permutation test <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ to determine the statistical "
"significance or `p-value <https://en.wikipedia.org/wiki/P-value>`_ of an "
"observed difference between the effects of a drug versus a placebo::"
msgstr ""
"Exempel på ett `resampling permutationstest <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ för att fastställa den "
"statistiska signifikansen eller `p-värdet <https://en.wikipedia.org/wiki/P-"
"value>`_ för en observerad skillnad mellan effekterna av ett läkemedel och "
"placebo::"

#: ../../library/random.rst:559
msgid ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a "
"difference')\n"
"print(f'at least as extreme as the observed difference of "
"{observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the "
"null')\n"
"print(f'hypothesis that there is no difference between the drug and the "
"placebo.')"
msgstr ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a "
"difference')\n"
"print(f'at least as extreme as the observed difference of "
"{observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the "
"null')\n"
"print(f'hypothesis that there is no difference between the drug and the "
"placebo.')"

#: ../../library/random.rst:580
msgid ""
"Simulation of arrival times and service deliveries for a multiserver queue::"
msgstr ""
"Simulering av ankomsttider och serviceleveranser för en multiserver-kö::"

#: ../../library/random.rst:582
msgid ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, "
"stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"
msgstr ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, "
"stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"

#: ../../library/random.rst:609
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas <https://us.pycon.org/2016/speaker/"
"profile/295/>`_ on statistical analysis using just a few fundamental "
"concepts including simulation, sampling, shuffling, and cross-validation."
msgstr ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ en "
"videohandledning av `Jake Vanderplas <https://us.pycon.org/2016/speaker/"
"profile/295/>`_ om statistisk analys med hjälp av några få grundläggande "
"begrepp, bland annat simulering, provtagning, blandning och korsvalidering."

#: ../../library/random.rst:615
msgid ""
"`Economics Simulation <https://nbviewer.org/url/norvig.com/ipython/Economics."
"ipynb>`_ a simulation of a marketplace by `Peter Norvig <https://norvig.com/"
"bio.html>`_ that shows effective use of many of the tools and distributions "
"provided by this module (gauss, uniform, sample, betavariate, choice, "
"triangular, and randrange)."
msgstr ""
"`Economics Simulation <https://nbviewer.org/url/norvig.com/ipython/Economics."
"ipynb>`_ en simulering av en marknadsplats av `Peter Norvig <https://norvig."
"com/bio.html>`_ som visar effektiv användning av många av de verktyg och "
"fördelningar som tillhandahålls av denna modul (gauss, uniform, sample, "
"betavariate, choice, triangular och randrange)."

#: ../../library/random.rst:622
msgid ""
"`A Concrete Introduction to Probability (using Python) <https://nbviewer.org/"
"url/norvig.com/ipython/Probability.ipynb>`_ a tutorial by `Peter Norvig "
"<https://norvig.com/bio.html>`_ covering the basics of probability theory, "
"how to write simulations, and how to perform data analysis using Python."
msgstr ""
"`A Concrete Introduction to Probability (using Python) <https://nbviewer.org/"
"url/norvig.com/ipython/Probability.ipynb>`_ en handledning av `Peter Norvig "
"<https://norvig.com/bio.html>`_ som täcker grunderna i sannolikhetsteori, "
"hur man skriver simuleringar och hur man utför dataanalys med Python."

#: ../../library/random.rst:630
msgid "Recipes"
msgstr "Recept"

#: ../../library/random.rst:632
msgid ""
"These recipes show how to efficiently make random selections from the "
"combinatoric iterators in the :mod:`itertools` module:"
msgstr ""
"Dessa recept visar hur man på ett effektivt sätt gör slumpmässiga urval från "
"de kombinatoriska iteratorerna i modulen :mod:`itertools`:"

#: ../../library/random.rst:635
msgid ""
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Choose r elements with replacement.  Order the result to match the "
"iterable.\"\n"
"    # Result will be in set(itertools."
"combinations_with_replacement(iterable, r)).\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"
msgstr ""
"def random_product(*args, repeat=1):\n"
"    \"Slumpmässigt urval från itertools.product(*args, **kwds)\"\n"
"    pooler = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(slumpmässigt.val, pooler))\n"
"\n"
"def random_permutation(iterabel, r=None):\n"
"    \"Slumpmässigt urval från itertools.permutations(iterable, r)\"\n"
"    pool = tupel(iterabel)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(slumpmässigt.urval(pool, r))\n"
"\n"
"def slumpmässig_kombination(iterabel, r):\n"
"    \"Slumpmässigt urval från itertools.combinations(iterable, r)\"\n"
"    pool = tupel(iterabel)\n"
"    n = len(pool)\n"
"    index = sorterad(slumpmässigt.urval(intervall(n), r))\n"
"    return tuple(pool[i] for i in index)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Välj r element med ersättning.  Ordna resultatet så att det matchar "
"iterabeln.\"\n"
"    # Resultatet kommer att finnas i set(itertools."
"combinations_with_replacement(iterable, r)).\n"
"    pool = tupel(iterabel)\n"
"    n = len(pool)\n"
"    index = sorterad(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in index)"

#: ../../library/random.rst:664
msgid ""
"The default :func:`.random` returns multiples of 2⁻⁵³ in the range *0.0 ≤ x "
"< 1.0*.  All such numbers are evenly spaced and are exactly representable as "
"Python floats.  However, many other representable floats in that interval "
"are not possible selections.  For example, ``0.05954861408025609`` isn't an "
"integer multiple of 2⁻⁵³."
msgstr ""
"Standardvärdet :func:`.random` returnerar multiplar av 2-⁵³ i intervallet "
"*0,0 ≤ x < 1,0*.  Alla sådana tal är jämnt fördelade och är exakt "
"representerbara som Python-flottor.  Många andra representativa flyttal i "
"det intervallet är dock inte möjliga val.  Till exempel är "
"``0,05954861408025609`` inte en heltalsmultipel av 2-⁵³."

#: ../../library/random.rst:670
msgid ""
"The following recipe takes a different approach.  All floats in the interval "
"are possible selections.  The mantissa comes from a uniform distribution of "
"integers in the range *2⁵² ≤ mantissa < 2⁵³*.  The exponent comes from a "
"geometric distribution where exponents smaller than *-53* occur half as "
"often as the next larger exponent."
msgstr ""
"I följande recept används ett annat tillvägagångssätt.  Alla flyttal i "
"intervallet är möjliga val.  Mantissan kommer från en enhetlig fördelning av "
"heltal i intervallet *2⁵² ≤ mantissa < 2⁵³*.  Exponenten kommer från en "
"geometrisk fördelning där exponenter som är mindre än *-53* förekommer "
"hälften så ofta som den nästa större exponenten."

#: ../../library/random.rst:678
msgid ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"
msgstr ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"

#: ../../library/random.rst:692
msgid ""
"All :ref:`real valued distributions <real-valued-distributions>` in the "
"class will use the new method::"
msgstr ""
"Alla :ref:`realvärdesdistributioner <real-valued-distributions>` i klassen "
"kommer att använda den nya metoden::"

#: ../../library/random.rst:695
msgid ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"
msgstr ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"

#: ../../library/random.rst:701
msgid ""
"The recipe is conceptually equivalent to an algorithm that chooses from all "
"the multiples of 2⁻¹⁰⁷⁴ in the range *0.0 ≤ x < 1.0*.  All such numbers are "
"evenly spaced, but most have to be rounded down to the nearest representable "
"Python float.  (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float "
"and is equal to ``math.ulp(0.0)``.)"
msgstr ""
"Receptet är konceptuellt likvärdigt med en algoritm som väljer bland alla "
"multiplar av 2-¹⁰⁷⁴ i intervallet *0,0 ≤ x < 1,0*.  Alla sådana tal är jämnt "
"fördelade, men de flesta måste avrundas nedåt till närmaste representativa "
"Python-flat.  (Värdet 2-¹⁰⁷⁴ är den minsta positiva onormaliserade flottören "
"och är lika med ``math.ulp(0.0)``.)"

#: ../../library/random.rst:710
msgid ""
"`Generating Pseudo-random Floating-Point Values <https://allendowney.com/"
"research/rand/downey07randfloat.pdf>`_ a paper by Allen B. Downey describing "
"ways to generate more fine-grained floats than normally generated by :func:`."
"random`."
msgstr ""
"`Generating Pseudo-random Floating-Point Values <https://allendowney.com/"
"research/rand/downey07randfloat.pdf>`_ en artikel av Allen B. Downey som "
"beskriver sätt att generera mer finkorniga flyttal än vad som normalt "
"genereras av :func:`.random`."

#: ../../library/random.rst:718
msgid "Command-line usage"
msgstr "Användning av kommandoraden"

#: ../../library/random.rst:722
msgid "The :mod:`!random` module can be executed from the command line."
msgstr "Modulen :mod:`!random` kan köras från kommandoraden."

#: ../../library/random.rst:724
msgid ""
"python -m random [-h] [-c CHOICE [CHOICE ...] | -i N | -f N] [input ...]"
msgstr ""
"python -m random [-h] [-c CHOICE [CHOICE ...] | -i N | -f N] [inmatning ...]"

#: ../../library/random.rst:728
msgid "The following options are accepted:"
msgstr "Följande alternativ accepteras:"

#: ../../library/random.rst:734
msgid "Show the help message and exit."
msgstr "Visa hjälpmeddelandet och avsluta."

#: ../../library/random.rst:739
msgid "Print a random choice, using :meth:`choice`."
msgstr "Skriv ut ett slumpmässigt val med hjälp av :meth:`choice`."

#: ../../library/random.rst:744
msgid ""
"Print a random integer between 1 and N inclusive, using :meth:`randint`."
msgstr ""
"Skriv ut ett slumpmässigt heltal mellan 1 och N inklusive, med :meth:"
"`randint`."

#: ../../library/random.rst:749
msgid ""
"Print a random floating-point number between 0 and N inclusive, using :meth:"
"`uniform`."
msgstr ""
"Skriv ut ett slumpmässigt flyttal mellan 0 och N inklusive, med hjälp av :"
"meth:`uniform`."

#: ../../library/random.rst:752
msgid "If no options are given, the output depends on the input:"
msgstr "Om inga alternativ anges beror utdata på indata:"

#: ../../library/random.rst:754
msgid "String or multiple: same as :option:`--choice`."
msgstr "Sträng eller multipel: samma som :option:`\\--choice`."

#: ../../library/random.rst:755
msgid "Integer: same as :option:`--integer`."
msgstr "Integer: samma som :option:`\\--integer`."

#: ../../library/random.rst:756
msgid "Float: same as :option:`--float`."
msgstr "Float: samma som :option:`\\--float`."

#: ../../library/random.rst:761
msgid "Command-line example"
msgstr "Exempel på kommandorad"

#: ../../library/random.rst:763
msgid "Here are some examples of the :mod:`!random` command-line interface:"
msgstr "Här följer några exempel på kommandoradsgränssnittet :mod:`!random`:"

#: ../../library/random.rst:765
msgid ""
"$ # Choose one at random\n"
"$ python -m random egg bacon sausage spam \"Lobster Thermidor aux crevettes "
"with a Mornay sauce\"\n"
"Lobster Thermidor aux crevettes with a Mornay sauce\n"
"\n"
"$ # Random integer\n"
"$ python -m random 6\n"
"6\n"
"\n"
"$ # Random floating-point number\n"
"$ python -m random 1.8\n"
"1.7080016272295635\n"
"\n"
"$ # With explicit arguments\n"
"$ python  -m random --choice egg bacon sausage spam \"Lobster Thermidor aux "
"crevettes with a Mornay sauce\"\n"
"egg\n"
"\n"
"$ python -m random --integer 6\n"
"3\n"
"\n"
"$ python -m random --float 1.8\n"
"1.5666339105010318\n"
"\n"
"$ python -m random --integer 6\n"
"5\n"
"\n"
"$ python -m random --float 6\n"
"3.1942323316565915"
msgstr ""
"$ # Välj en slumpmässigt\n"
"$ python -m slumpmässigt ägg bacon korv spam \"Hummer Thermidor aux "
"crevettes med en Mornay-sås\"\n"
"Hummer Thermidor aux crevettes med Mornay-sås\n"
"\n"
"$ # Slumpmässigt heltal\n"
"$ python -m slumpmässigt 6\n"
"6\n"
"\n"
"$ # Slumpmässigt flyttal\n"
"$ python -m slumpmässigt 1,8\n"
"1.7080016272295635\n"
"\n"
"$ # Med uttryckliga argument\n"
"$ python -m random --choice ägg bacon korv spam \"Hummer Thermidor aux "
"crevettes med en Mornay-sås\"\n"
"ägg\n"
"\n"
"$ python -m slumpmässig --integer 6\n"
"3\n"
"\n"
"$ python -m slumpmässig -flata 1,8\n"
"1.5666339105010318\n"
"\n"
"$ python -m slumpmässig --integer 6\n"
"5\n"
"\n"
"$ python -m slumpmässig -flata 6\n"
"3.1942323316565915"
