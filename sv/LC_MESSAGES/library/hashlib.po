# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ""

#: ../../library/hashlib.rst:10
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**Källkod:** :source:`Lib/hashlib.py`"

#: ../../library/hashlib.rst:23
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in internet :rfc:`1321`).  The terms \"secure "
"hash\" and \"message digest\" are interchangeable.  Older algorithms were "
"called message digests.  The modern term is secure hash."
msgstr ""

#: ../../library/hashlib.rst:32
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the :"
"mod:`zlib` module."
msgstr ""
"Om du vill ha hashfunktionerna adler32 eller crc32 finns de tillgängliga i "
"modulen :mod:`zlib`."

#: ../../library/hashlib.rst:37
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See "
"also\" section at the end."
msgstr ""

#: ../../library/hashlib.rst:44
msgid "Hash algorithms"
msgstr "Hash-algoritmer"

#: ../../library/hashlib.rst:46
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use :func:"
"`sha256` to create a SHA-256 hash object. You can now feed this object with :"
"term:`bytes-like objects <bytes-like object>` (normally :class:`bytes`) "
"using the :meth:`update` method. At any point you can ask it for the :dfn:"
"`digest` of the concatenation of the data fed to it so far using the :meth:"
"`digest` or :meth:`hexdigest` methods."
msgstr ""

#: ../../library/hashlib.rst:56
msgid ""
"For better multithreading performance, the Python :term:`GIL` is released "
"for data larger than 2047 bytes at object creation or on update."
msgstr ""

#: ../../library/hashlib.rst:61
msgid ""
"Feeding string objects into :meth:`update` is not supported, as hashes work "
"on bytes, not on characters."
msgstr ""

#: ../../library/hashlib.rst:66
msgid ""
"Constructors for hash algorithms that are always present in this module are :"
"func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, :func:"
"`sha512`, :func:`blake2b`, and :func:`blake2s`. :func:`md5` is normally "
"available as well, though it may be missing or blocked if you are using a "
"rare \"FIPS compliant\" build of Python. Additional algorithms may also be "
"available depending upon the OpenSSL library that Python uses on your "
"platform. On most platforms the :func:`sha3_224`, :func:`sha3_256`, :func:"
"`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256` are also "
"available."
msgstr ""

#: ../../library/hashlib.rst:76
msgid ""
"SHA3 (Keccak) and SHAKE constructors :func:`sha3_224`, :func:`sha3_256`, :"
"func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256`."
msgstr ""

#: ../../library/hashlib.rst:80
msgid ":func:`blake2b` and :func:`blake2s` were added."
msgstr ""

#: ../../library/hashlib.rst:85
msgid ""
"All hashlib constructors take a keyword-only argument *usedforsecurity* with "
"default value ``True``. A false value allows the use of insecure and blocked "
"hashing algorithms in restricted environments. ``False`` indicates that the "
"hashing algorithm is not used in a security context, e.g. as a non-"
"cryptographic one-way compression function."
msgstr ""
"Alla hashlib-konstruktörer tar ett nyckelordsargument *usedforsecurity* med "
"standardvärdet ``True``. Ett falskt värde gör det möjligt att använda osäkra "
"och blockerade hashalgoritmer i begränsade miljöer. ``False`` anger att "
"hashingalgoritmen inte används i säkerhetssammanhang, t.ex. som en icke-"
"kryptografisk envägskomprimeringsfunktion."

#: ../../library/hashlib.rst:92
msgid "Hashlib now uses SHA3 and SHAKE from OpenSSL 1.1.1 and newer."
msgstr ""

#: ../../library/hashlib.rst:94
msgid ""
"For example, to obtain the digest of the byte string ``b'Nobody inspects the "
"spammish repetition'``::"
msgstr ""

#: ../../library/hashlib.rst:108
msgid "More condensed:"
msgstr "Mer komprimerad:"

#: ../../library/hashlib.rst:115
msgid ""
"Is a generic constructor that takes the string *name* of the desired "
"algorithm as its first parameter.  It also exists to allow access to the "
"above listed hashes as well as any other algorithms that your OpenSSL "
"library may offer.  The named constructors are much faster than :func:`new` "
"and should be preferred."
msgstr ""

#: ../../library/hashlib.rst:121
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ""

#: ../../library/hashlib.rst:128
msgid "Hashlib provides the following constant attributes:"
msgstr ""

#: ../../library/hashlib.rst:132
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported "
"by this module on all platforms.  Note that 'md5' is in this list despite "
"some upstream vendors offering an odd \"FIPS compliant\" Python build that "
"excludes it."
msgstr ""
"En uppsättning som innehåller namnen på de hashalgoritmer som garanterat "
"stöds av denna modul på alla plattformar.  Observera att 'md5' finns med i "
"denna lista trots att vissa uppströmsleverantörer erbjuder en udda \"FIPS-"
"kompatibel\" Python-byggnad som utesluter den."

#: ../../library/hashlib.rst:141
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to :"
"func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""
"En uppsättning som innehåller namnen på de hashalgoritmer som är "
"tillgängliga i den Python-tolk som körs.  Dessa namn kommer att kännas igen "
"när de skickas till :func:`new`. :attr:`algorithms_guaranteed` kommer alltid "
"att vara en delmängd.  Samma algoritm kan förekomma flera gånger i denna "
"uppsättning under olika namn (tack vare OpenSSL)."

#: ../../library/hashlib.rst:149
msgid ""
"The following values are provided as constant attributes of the hash objects "
"returned by the constructors:"
msgstr ""
"Följande värden tillhandahålls som konstanta attribut för de hash-objekt som "
"returneras av konstruktörerna:"

#: ../../library/hashlib.rst:155
msgid "The size of the resulting hash in bytes."
msgstr "Storleken på den resulterande hashen i bytes."

#: ../../library/hashlib.rst:159
msgid "The internal block size of the hash algorithm in bytes."
msgstr "Den interna blockstorleken för hashalgoritmen i bytes."

#: ../../library/hashlib.rst:161
msgid "A hash object has the following attributes:"
msgstr "Ett hash-objekt har följande attribut:"

#: ../../library/hashlib.rst:165
msgid ""
"The canonical name of this hash, always lowercase and always suitable as a "
"parameter to :func:`new` to create another hash of this type."
msgstr ""
"Det kanoniska namnet på denna hash, alltid gemener och alltid lämpligt som "
"parameter till :func:`new` för att skapa en annan hash av denna typ."

#: ../../library/hashlib.rst:168
msgid ""
"The name attribute has been present in CPython since its inception, but "
"until Python 3.4 was not formally specified, so may not exist on some "
"platforms."
msgstr ""
"Namnattributet har funnits i CPython sedan starten, men fram till Python 3.4 "
"var det inte formellt specificerat, så det kanske inte finns på vissa "
"plattformar."

#: ../../library/hashlib.rst:173
msgid "A hash object has the following methods:"
msgstr "Ett hash-objekt har följande metoder:"

#: ../../library/hashlib.rst:178
msgid ""
"Update the hash object with the :term:`bytes-like object`. Repeated calls "
"are equivalent to a single call with the concatenation of all the arguments: "
"``m.update(a); m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""
"Uppdaterar hash-objektet med :term:`bytesliknande objekt`. Upprepade anrop "
"är likvärdiga med ett enda anrop med en sammankoppling av alla argument: ``m."
"update(a); m.update(b)`` är likvärdigt med ``m.update(a+b)``."

#: ../../library/hashlib.rst:183
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2047 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr ""

#: ../../library/hashlib.rst:191
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size :attr:`digest_size` which may contain bytes "
"in the whole range from 0 to 255."
msgstr ""
"Returnerar sammanfattningen av de data som hittills skickats till :meth:"
"`update`\\-metoden. Detta är ett bytesobjekt av storleken :attr:"
"`digest_size` som kan innehålla bytes i hela intervallet 0 till 255."

#: ../../library/hashlib.rst:198 ../../library/hashlib.rst:226
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value safely in email or other non-binary environments."
msgstr ""
"Som :meth:`digest` förutom att digestet returneras som ett strängobjekt med "
"dubbel längd, som endast innehåller hexadecimala siffror.  Detta kan "
"användas för att utbyta värdet på ett säkert sätt i e-post eller andra icke-"
"binära miljöer."

#: ../../library/hashlib.rst:205
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of data sharing a common initial substring."
msgstr ""
"Returnerar en kopia (\"klon\") av hash-objektet.  Detta kan användas för att "
"effektivt beräkna digests av data som delar en gemensam initial substring."

#: ../../library/hashlib.rst:210
msgid "SHAKE variable length digests"
msgstr "SHAKE-digitaliseringar med variabel längd"

#: ../../library/hashlib.rst:212
msgid ""
"The :func:`shake_128` and :func:`shake_256` algorithms provide variable "
"length digests with length_in_bits//2 up to 128 or 256 bits of security. As "
"such, their digest methods require a length. Maximum length is not limited "
"by the SHAKE algorithm."
msgstr ""
"Algoritmerna :func:`shake_128` och :func:`shake_256` ger digests av "
"varierande längd med length_in_bits//2 upp till 128 eller 256 bitars "
"säkerhet. Därför kräver deras digest-metoder en längd. Den maximala längden "
"begränsas inte av SHAKE-algoritmen."

#: ../../library/hashlib.rst:219
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size *length* which may contain bytes in the whole "
"range from 0 to 255."
msgstr ""

#: ../../library/hashlib.rst:232
msgid "Key derivation"
msgstr "Härledning av nycklar"

#: ../../library/hashlib.rst:234
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must "
"be tunable, slow, and include a `salt <https://en.wikipedia.org/wiki/"
"Salt_%28cryptography%29>`_."
msgstr ""
"Algoritmer för nyckelderivation och nyckelsträckning är utformade för säker "
"hashing av lösenord. Naiva algoritmer som ``sha1(lösenord)`` är inte "
"motståndskraftiga mot brute-force-attacker. En bra hashfunktion för lösenord "
"måste vara inställbar, långsam och innehålla en `salt <https://en.wikipedia."
"org/wiki/Salt_%28cryptography%29>`_."

#: ../../library/hashlib.rst:242
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr ""
"Funktionen tillhandahåller PKCS#5 lösenordsbaserad nyckelavledningsfunktion "
"2. Den använder HMAC som pseudorandomfunktion."

#: ../../library/hashlib.rst:245
msgid ""
"The string *hash_name* is the desired name of the hash digest algorithm for "
"HMAC, e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as "
"buffers of bytes. Applications and libraries should limit *password* to a "
"sensible length (e.g. 1024). *salt* should be about 16 or more bytes from a "
"proper source, e.g. :func:`os.urandom`."
msgstr ""
"Strängen *hash_name* är det önskade namnet på hashdigestalgoritmen för HMAC, "
"t.ex. \"sha1\" eller \"sha256\". *password* och *salt* tolkas som buffertar "
"av bytes. Program och bibliotek bör begränsa *password* till en vettig längd "
"(t.ex. 1024). *salt* bör vara cirka 16 eller fler byte från en lämplig "
"källa, t.ex. :func:`os.urandom`."

#: ../../library/hashlib.rst:251
msgid ""
"The number of *iterations* should be chosen based on the hash algorithm and "
"computing power. As of 2022, hundreds of thousands of iterations of SHA-256 "
"are suggested. For rationale as to why and how to choose what is best for "
"your application, read *Appendix A.2.2* of NIST-SP-800-132_. The answers on "
"the `stackexchange pbkdf2 iterations question`_ explain in detail."
msgstr ""
"Antalet *iterationer* bör väljas baserat på hashalgoritmen och datorkraften. "
"Från och med 2022 föreslås hundratusentals iterationer av SHA-256. För "
"motivering till varför och hur man väljer vad som är bäst för din "
"applikation, läs *Appendix A.2.2* i NIST-SP-800-132_. Svaren på "
"`stackexchange pbkdf2 iterations question`_ förklarar i detalj."

#: ../../library/hashlib.rst:257
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *hash_name* is used, e.g. 64 for SHA-512."
msgstr ""

#: ../../library/hashlib.rst:270
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr ""

#: ../../library/hashlib.rst:276
msgid ""
"Slow Python implementation of *pbkdf2_hmac* is deprecated. In the future the "
"function will only be available when Python is compiled with OpenSSL."
msgstr ""

#: ../../library/hashlib.rst:282
msgid ""
"The function provides scrypt password-based key derivation function as "
"defined in :rfc:`7914`."
msgstr ""
"Funktionen tillhandahåller en lösenordsbaserad nyckelavledningsfunktion för "
"scrypt enligt definitionen i :rfc:`7914`."

#: ../../library/hashlib.rst:285
msgid ""
"*password* and *salt* must be :term:`bytes-like objects <bytes-like "
"object>`.  Applications and libraries should limit *password* to a sensible "
"length (e.g. 1024).  *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""
"*password* och *salt* måste vara :term:`bytesliknande objekt <bytes-like "
"object>`.  Program och bibliotek bör begränsa *password* till en rimlig "
"längd (t.ex. 1024).  *salt* bör vara cirka 16 eller fler byte från en "
"lämplig källa, t.ex. :func:`os.urandom`."

#: ../../library/hashlib.rst:290
msgid ""
"*n* is the CPU/Memory cost factor, *r* the block size, *p* parallelization "
"factor and *maxmem* limits memory (OpenSSL 1.1.0 defaults to 32 MiB). "
"*dklen* is the length of the derived key."
msgstr ""

#: ../../library/hashlib.rst:298
msgid "BLAKE2"
msgstr "BLAKE2"

#: ../../library/hashlib.rst:305
msgid ""
"BLAKE2_ is a cryptographic hash function defined in :rfc:`7693` that comes "
"in two flavors:"
msgstr ""
"BLAKE2_ är en kryptografisk hashfunktion som definieras i :rfc:`7693` och "
"finns i två varianter:"

#: ../../library/hashlib.rst:308
msgid ""
"**BLAKE2b**, optimized for 64-bit platforms and produces digests of any size "
"between 1 and 64 bytes,"
msgstr ""
"**BLAKE2b**, optimerad för 64-bitars plattformar och producerar digests i "
"alla storlekar mellan 1 och 64 byte,"

#: ../../library/hashlib.rst:311
msgid ""
"**BLAKE2s**, optimized for 8- to 32-bit platforms and produces digests of "
"any size between 1 and 32 bytes."
msgstr ""
"**BLAKE2s**, optimerad för 8- till 32-bitars plattformar och producerar "
"digests i alla storlekar mellan 1 och 32 byte."

#: ../../library/hashlib.rst:314
msgid ""
"BLAKE2 supports **keyed mode** (a faster and simpler replacement for HMAC_), "
"**salted hashing**, **personalization**, and **tree hashing**."
msgstr ""
"BLAKE2 stöder **keyed mode** (en snabbare och enklare ersättning för HMAC_), "
"**salted hashing**, **personalization** och **tree hashing**."

#: ../../library/hashlib.rst:317
msgid ""
"Hash objects from this module follow the API of standard library's :mod:"
"`hashlib` objects."
msgstr ""
"Hash-objekt från den här modulen följer API:et för standardbibliotekets :mod:"
"`hashlib`\\-objekt."

#: ../../library/hashlib.rst:322
msgid "Creating hash objects"
msgstr "Skapa hash-objekt"

#: ../../library/hashlib.rst:324
msgid "New hash objects are created by calling constructor functions:"
msgstr "Nya hash-objekt skapas genom att anropa konstruktörsfunktioner:"

#: ../../library/hashlib.rst:338
msgid ""
"These functions return the corresponding hash objects for calculating "
"BLAKE2b or BLAKE2s. They optionally take these general parameters:"
msgstr ""
"Dessa funktioner returnerar motsvarande hash-objekt för beräkning av BLAKE2b "
"eller BLAKE2s. De tar valfritt dessa allmänna parametrar:"

#: ../../library/hashlib.rst:341
msgid ""
"*data*: initial chunk of data to hash, which must be :term:`bytes-like "
"object`.  It can be passed only as positional argument."
msgstr ""
"*data*: den första delen av data som ska hashas, som måste vara :term:"
"`bytesliknande objekt`.  Det kan endast skickas som ett positionellt "
"argument."

#: ../../library/hashlib.rst:344
msgid "*digest_size*: size of output digest in bytes."
msgstr "*digest_size*: storlek på utmatad digest i byte."

#: ../../library/hashlib.rst:346
msgid ""
"*key*: key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for "
"BLAKE2s)."
msgstr ""
"*key*: nyckel för hashing med nyckel (upp till 64 byte för BLAKE2b, upp till "
"32 byte för BLAKE2s)."

#: ../../library/hashlib.rst:349
msgid ""
"*salt*: salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8 "
"bytes for BLAKE2s)."
msgstr ""
"*salt*: salt för randomiserad hashing (upp till 16 byte för BLAKE2b, upp "
"till 8 byte för BLAKE2s)."

#: ../../library/hashlib.rst:352
msgid ""
"*person*: personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes "
"for BLAKE2s)."
msgstr ""
"*person*: personaliseringssträng (upp till 16 byte för BLAKE2b, upp till 8 "
"byte för BLAKE2s)."

#: ../../library/hashlib.rst:355
msgid "The following table shows limits for general parameters (in bytes):"
msgstr "I följande tabell visas gränser för allmänna parametrar (i byte):"

#: ../../library/hashlib.rst:358
msgid "Hash"
msgstr "Hash"

#: ../../library/hashlib.rst:358
msgid "digest_size"
msgstr "digest_size"

#: ../../library/hashlib.rst:358
msgid "len(key)"
msgstr "len(key)"

#: ../../library/hashlib.rst:358
msgid "len(salt)"
msgstr "len(salt)"

#: ../../library/hashlib.rst:358
msgid "len(person)"
msgstr "len(person)"

#: ../../library/hashlib.rst:360
msgid "BLAKE2b"
msgstr "BLAKE2b"

#: ../../library/hashlib.rst:360
msgid "64"
msgstr "64"

#: ../../library/hashlib.rst:360
msgid "16"
msgstr "16"

#: ../../library/hashlib.rst:361
msgid "BLAKE2s"
msgstr "BLAKE2s"

#: ../../library/hashlib.rst:361
msgid "32"
msgstr "32"

#: ../../library/hashlib.rst:361
msgid "8"
msgstr "8"

#: ../../library/hashlib.rst:366
msgid ""
"BLAKE2 specification defines constant lengths for salt and personalization "
"parameters, however, for convenience, this implementation accepts byte "
"strings of any size up to the specified length. If the length of the "
"parameter is less than specified, it is padded with zeros, thus, for "
"example, ``b'salt'`` and ``b'salt\\x00'`` is the same value. (This is not "
"the case for *key*.)"
msgstr ""
"BLAKE2-specifikationen definierar konstanta längder för salt- och "
"personaliseringsparametrar, men för enkelhetens skull accepterar den här "
"implementationen bytesträngar av valfri storlek upp till den angivna "
"längden. Om parameterns längd är mindre än den angivna fylls den på med "
"nollor, vilket innebär att till exempel ``b'salt'`` och ``b'salt\\x00'`` är "
"samma värde. (Detta är inte fallet för *key*.)"

#: ../../library/hashlib.rst:373
msgid "These sizes are available as module `constants`_ described below."
msgstr ""
"Dessa storlekar finns tillgängliga som modul `konstanter`_ som beskrivs "
"nedan."

#: ../../library/hashlib.rst:375
msgid ""
"Constructor functions also accept the following tree hashing parameters:"
msgstr ""
"Konstruktörsfunktionerna accepterar även följande parametrar för "
"trädhashning:"

#: ../../library/hashlib.rst:377
msgid "*fanout*: fanout (0 to 255, 0 if unlimited, 1 in sequential mode)."
msgstr "*fanout*: fanout (0 till 255, 0 om obegränsad, 1 i sekventiellt läge)."

#: ../../library/hashlib.rst:379
msgid ""
"*depth*: maximal depth of tree (1 to 255, 255 if unlimited, 1 in sequential "
"mode)."
msgstr ""
"*depth*: trädets maximala djup (1 till 255, 255 om det är obegränsat, 1 i "
"sekventiellt läge)."

#: ../../library/hashlib.rst:382
msgid ""
"*leaf_size*: maximal byte length of leaf (0 to ``2**32-1``, 0 if unlimited "
"or in sequential mode)."
msgstr ""
"*leaf_size*: maximal byte-längd för bladet (0 till ``2**32-1``, 0 om "
"obegränsat eller i sekventiellt läge)."

#: ../../library/hashlib.rst:385
msgid ""
"*node_offset*: node offset (0 to ``2**64-1`` for BLAKE2b, 0 to ``2**48-1`` "
"for BLAKE2s, 0 for the first, leftmost, leaf, or in sequential mode)."
msgstr ""
"*node_offset*: nodoffset (0 till ``2**64-1`` för BLAKE2b, 0 till ``2**48-1`` "
"för BLAKE2s, 0 för den första, längst till vänster, blad eller i "
"sekventiellt läge)."

#: ../../library/hashlib.rst:388
msgid ""
"*node_depth*: node depth (0 to 255, 0 for leaves, or in sequential mode)."
msgstr ""
"*node_depth*: noddjup (0 till 255, 0 för blad eller i sekventiellt läge)."

#: ../../library/hashlib.rst:390
msgid ""
"*inner_size*: inner digest size (0 to 64 for BLAKE2b, 0 to 32 for BLAKE2s, 0 "
"in sequential mode)."
msgstr ""
"*inner_size*: inner digest size (0 till 64 för BLAKE2b, 0 till 32 för "
"BLAKE2s, 0 i sekventiellt läge)."

#: ../../library/hashlib.rst:393
msgid ""
"*last_node*: boolean indicating whether the processed node is the last one "
"(``False`` for sequential mode)."
msgstr ""
"*last_node*: boolean som anger om den bearbetade noden är den sista "
"(``False`` för sekventiellt läge)."

#: ../../library/hashlib.rst:399
msgid ""
"See section 2.10 in `BLAKE2 specification <https://blake2.net/"
"blake2_20130129.pdf>`_ for comprehensive review of tree hashing."
msgstr ""

#: ../../library/hashlib.rst:405
msgid "Constants"
msgstr "Konstanter"

#: ../../library/hashlib.rst:410
msgid "Salt length (maximum length accepted by constructors)."
msgstr "Saltlängd (maximal längd som accepteras av konstruktörer)."

#: ../../library/hashlib.rst:416
msgid ""
"Personalization string length (maximum length accepted by constructors)."
msgstr ""
"Längd på personaliseringssträngen (maximal längd som accepteras av "
"konstruktörerna)."

#: ../../library/hashlib.rst:422
msgid "Maximum key size."
msgstr "Maximal nyckelstorlek."

#: ../../library/hashlib.rst:428
msgid "Maximum digest size that the hash function can output."
msgstr "Maximal digest-storlek som hashfunktionen kan mata ut."

#: ../../library/hashlib.rst:432
msgid "Examples"
msgstr "Exempel"

#: ../../library/hashlib.rst:435
msgid "Simple hashing"
msgstr "Enkel hashing"

#: ../../library/hashlib.rst:437
msgid ""
"To calculate hash of some data, you should first construct a hash object by "
"calling the appropriate constructor function (:func:`blake2b` or :func:"
"`blake2s`), then update it with the data by calling :meth:`update` on the "
"object, and, finally, get the digest out of the object by calling :meth:"
"`digest` (or :meth:`hexdigest` for hex-encoded string)."
msgstr ""

#: ../../library/hashlib.rst:450
msgid ""
"As a shortcut, you can pass the first chunk of data to update directly to "
"the constructor as the positional argument:"
msgstr ""
"Som en genväg kan du skicka den första delen av data som ska uppdateras "
"direkt till konstruktören som positionsargument:"

#: ../../library/hashlib.rst:457
msgid ""
"You can call :meth:`hash.update` as many times as you need to iteratively "
"update the hash:"
msgstr ""
"Du kan anropa :meth:`hash.update` så många gånger som du behöver för att "
"iterativt uppdatera hashen:"

#: ../../library/hashlib.rst:470
msgid "Using different digest sizes"
msgstr "Använda olika digest-storlekar"

#: ../../library/hashlib.rst:472
msgid ""
"BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to "
"32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without "
"changing the size of output, we can tell BLAKE2b to produce 20-byte digests:"
msgstr ""
"BLAKE2 har konfigurerbar storlek på sammanställningar upp till 64 byte för "
"BLAKE2b och upp till 32 byte för BLAKE2s. Om vi till exempel vill ersätta "
"SHA-1 med BLAKE2b utan att ändra storleken på utdata kan vi säga till "
"BLAKE2b att producera 20-byte-sammanställningar:"

#: ../../library/hashlib.rst:486
msgid ""
"Hash objects with different digest sizes have completely different outputs "
"(shorter hashes are *not* prefixes of longer hashes); BLAKE2b and BLAKE2s "
"produce different outputs even if the output length is the same:"
msgstr ""
"Hashobjekt med olika digeststorlekar har helt olika utdata (kortare hash är "
"*inte* prefix av längre hash); BLAKE2b och BLAKE2s ger olika utdata även om "
"utdatalängden är densamma:"

#: ../../library/hashlib.rst:502
msgid "Keyed hashing"
msgstr "Hashtagning med nyckel"

#: ../../library/hashlib.rst:504
msgid ""
"Keyed hashing can be used for authentication as a faster and simpler "
"replacement for `Hash-based message authentication code <https://en."
"wikipedia.org/wiki/HMAC>`_ (HMAC). BLAKE2 can be securely used in prefix-MAC "
"mode thanks to the indifferentiability property inherited from BLAKE."
msgstr ""
"Keyed hashing kan användas för autentisering som en snabbare och enklare "
"ersättning för `Hash-based message authentication code <https://en.wikipedia."
"org/wiki/HMAC>`_ (HMAC). BLAKE2 kan användas på ett säkert sätt i prefix-MAC-"
"läge tack vare egenskapen indifferentiability som ärvs från BLAKE."

#: ../../library/hashlib.rst:510
msgid ""
"This example shows how to get a (hex-encoded) 128-bit authentication code "
"for message ``b'message data'`` with key ``b'pseudorandom key'``::"
msgstr ""
"Detta exempel visar hur man får en (hex-kodad) 128-bitars autentiseringskod "
"för meddelande ``b'meddelandedata'`` med nyckel ``b'pseudorandomnyckel'``::"

#: ../../library/hashlib.rst:520
msgid ""
"As a practical example, a web application can symmetrically sign cookies "
"sent to users and later verify them to make sure they weren't tampered with::"
msgstr ""
"Som ett praktiskt exempel kan en webbapplikation symmetriskt signera cookies "
"som skickas till användare och senare verifiera dem för att säkerställa att "
"de inte har manipulerats:"

#: ../../library/hashlib.rst:549
msgid ""
"Even though there's a native keyed hashing mode, BLAKE2 can, of course, be "
"used in HMAC construction with :mod:`hmac` module::"
msgstr ""
"Även om det finns ett inbyggt hashningsläge med nyckel kan BLAKE2 "
"naturligtvis användas i HMAC-konstruktion med :mod:`hmac` module::"

#: ../../library/hashlib.rst:560
msgid "Randomized hashing"
msgstr "Slumpmässig hashing"

#: ../../library/hashlib.rst:562
msgid ""
"By setting *salt* parameter users can introduce randomization to the hash "
"function. Randomized hashing is useful for protecting against collision "
"attacks on the hash function used in digital signatures."
msgstr ""
"Genom att ställa in parametern *salt* kan användare införa randomisering i "
"hashfunktionen. Randomiserad hashfunktion är användbar för att skydda mot "
"kollisionsattacker på den hashfunktion som används i digitala signaturer."

#: ../../library/hashlib.rst:566
msgid ""
"Randomized hashing is designed for situations where one party, the message "
"preparer, generates all or part of a message to be signed by a second party, "
"the message signer. If the message preparer is able to find cryptographic "
"hash function collisions (i.e., two messages producing the same hash value), "
"then they might prepare meaningful versions of the message that would "
"produce the same hash value and digital signature, but with different "
"results (e.g., transferring $1,000,000 to an account, rather than $10). "
"Cryptographic hash functions have been designed with collision resistance as "
"a major goal, but the current concentration on attacking cryptographic hash "
"functions may result in a given cryptographic hash function providing less "
"collision resistance than expected. Randomized hashing offers the signer "
"additional protection by reducing the likelihood that a preparer can "
"generate two or more messages that ultimately yield the same hash value "
"during the digital signature generation process --- even if it is practical "
"to find collisions for the hash function. However, the use of randomized "
"hashing may reduce the amount of security provided by a digital signature "
"when all portions of the message are prepared by the signer."
msgstr ""
"Slumpmässig hashfunktion är avsedd för situationer där en part, den som "
"förbereder meddelandet, genererar hela eller delar av ett meddelande som ska "
"signeras av en annan part, den som signerar meddelandet. Om den som "
"förbereder meddelandet kan hitta kollisioner mellan kryptografiska "
"hashfunktioner (dvs. två meddelanden som ger samma hashvärde) kan han eller "
"hon förbereda meningsfulla versioner av meddelandet som ger samma hashvärde "
"och digitala signatur, men med olika resultat (t.ex. överföring av 1 000 000 "
"USD till ett konto i stället för 10 USD). Kryptografiska hashfunktioner har "
"utformats med kollisionsmotstånd som ett huvudmål, men den nuvarande "
"koncentrationen på att attackera kryptografiska hashfunktioner kan leda till "
"att en viss kryptografisk hashfunktion ger mindre kollisionsmotstånd än "
"förväntat. Slumpmässig hashning ger undertecknaren ytterligare skydd genom "
"att minska sannolikheten för att en förberedare kan generera två eller flera "
"meddelanden som i slutändan ger samma hashvärde under processen för "
"generering av digitala signaturer --- även om det är praktiskt att hitta "
"kollisioner för hashfunktionen. Användningen av randomiserad hashning kan "
"dock minska den säkerhet som en digital signatur ger när alla delar av "
"meddelandet förbereds av undertecknaren."

#: ../../library/hashlib.rst:585
msgid ""
"(`NIST SP-800-106 \"Randomized Hashing for Digital Signatures\" <https://"
"csrc.nist.gov/publications/detail/sp/800-106/final>`_)"
msgstr ""

#: ../../library/hashlib.rst:588
msgid ""
"In BLAKE2 the salt is processed as a one-time input to the hash function "
"during initialization, rather than as an input to each compression function."
msgstr ""
"I BLAKE2 behandlas saltet som en engångsingång till hashfunktionen under "
"initialiseringen, i stället för som en ingång till varje "
"komprimeringsfunktion."

#: ../../library/hashlib.rst:593
msgid ""
"*Salted hashing* (or just hashing) with BLAKE2 or any other general-purpose "
"cryptographic hash function, such as SHA-256, is not suitable for hashing "
"passwords.  See `BLAKE2 FAQ <https://blake2.net/#qa>`_ for more information."
msgstr ""

#: ../../library/hashlib.rst:616
msgid "Personalization"
msgstr "Anpassning"

#: ../../library/hashlib.rst:618
msgid ""
"Sometimes it is useful to force hash function to produce different digests "
"for the same input for different purposes. Quoting the authors of the Skein "
"hash function:"
msgstr ""
"Ibland är det användbart att tvinga hashfunktionen att producera olika "
"sammanställningar för samma indata för olika ändamål. Citerar författarna "
"till Skein-hashfunktionen:"

#: ../../library/hashlib.rst:622
msgid ""
"We recommend that all application designers seriously consider doing this; "
"we have seen many protocols where a hash that is computed in one part of the "
"protocol can be used in an entirely different part because two hash "
"computations were done on similar or related data, and the attacker can "
"force the application to make the hash inputs the same. Personalizing each "
"hash function used in the protocol summarily stops this type of attack."
msgstr ""
"Vi rekommenderar att alla applikationsdesigners allvarligt överväger att "
"göra detta; vi har sett många protokoll där en hash som beräknas i en del av "
"protokollet kan användas i en helt annan del eftersom två hashberäkningar "
"gjordes på liknande eller relaterade data, och angriparen kan tvinga "
"applikationen att göra hashingångarna desamma. Genom att anpassa varje "
"hashfunktion som används i protokollet stoppas den här typen av angrepp."

#: ../../library/hashlib.rst:629
msgid ""
"(`The Skein Hash Function Family <https://www.schneier.com/wp-content/"
"uploads/2016/02/skein.pdf>`_, p. 21)"
msgstr ""
"(`The Skein Hash Function Family <https://www.schneier.com/wp-content/"
"uploads/2016/02/skein.pdf>`_, p. 21)"

#: ../../library/hashlib.rst:633
msgid "BLAKE2 can be personalized by passing bytes to the *person* argument::"
msgstr "BLAKE2 kan anpassas genom att skicka bytes till *person*-argumentet::"

#: ../../library/hashlib.rst:647
msgid ""
"Personalization together with the keyed mode can also be used to derive "
"different keys from a single one."
msgstr ""
"Personalisering tillsammans med keyed mode kan också användas för att "
"härleda olika nycklar från en enda."

#: ../../library/hashlib.rst:661
msgid "Tree mode"
msgstr "Trädläge"

#: ../../library/hashlib.rst:663
msgid "Here's an example of hashing a minimal tree with two leaf nodes::"
msgstr "Här är ett exempel på hashing av ett minimalt träd med två bladnoder::"

#: ../../library/hashlib.rst:669
msgid ""
"This example uses 64-byte internal digests, and returns the 32-byte final "
"digest::"
msgstr ""
"I det här exemplet används 64-bytes interna sammanställningar och den "
"slutliga sammanställningen på 32 byte returneras::"

#: ../../library/hashlib.rst:699
msgid "Credits"
msgstr "Tack till"

#: ../../library/hashlib.rst:701
msgid ""
"BLAKE2_ was designed by *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko "
"Wilcox-O'Hearn*, and *Christian Winnerlein* based on SHA-3_ finalist BLAKE_ "
"created by *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi Meier*, and "
"*Raphael C.-W. Phan*."
msgstr ""
"BLAKE2_ designades av *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko "
"Wilcox-O'Hearn* och *Christian Winnerlein* baserat på SHA-3_-finalisten "
"BLAKE_ skapad av *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi Meier* och "
"*Raphael C.-W. Phan*."

#: ../../library/hashlib.rst:706
msgid ""
"It uses core algorithm from ChaCha_ cipher designed by *Daniel J.  "
"Bernstein*."
msgstr ""
"Den använder kärnalgoritmen från ChaCha_-chiffer som designats av *Daniel J. "
"Bernstein*."

#: ../../library/hashlib.rst:708
msgid ""
"The stdlib implementation is based on pyblake2_ module. It was written by "
"*Dmitry Chestnykh* based on C implementation written by *Samuel Neves*. The "
"documentation was copied from pyblake2_ and written by *Dmitry Chestnykh*."
msgstr ""
"Stdlib-implementeringen är baserad på modulen pyblake2_. Den skrevs av "
"*Dmitry Chestnykh* baserat på C-implementering skriven av *Samuel Neves*. "
"Dokumentationen kopierades från pyblake2_ och skrevs av *Dmitry Chestnykh*."

#: ../../library/hashlib.rst:712
msgid "The C code was partly rewritten for Python by *Christian Heimes*."
msgstr "C-koden har delvis skrivits om för Python av *Christian Heimes*."

#: ../../library/hashlib.rst:714
msgid ""
"The following public domain dedication applies for both C hash function "
"implementation, extension code, and this documentation:"
msgstr ""
"Följande public domain-dedikation gäller för både implementeringen av C-"
"hashfunktionen, tilläggskoden och denna dokumentation:"

#: ../../library/hashlib.rst:717
msgid ""
"To the extent possible under law, the author(s) have dedicated all copyright "
"and related and neighboring rights to this software to the public domain "
"worldwide. This software is distributed without any warranty."
msgstr ""
"I den utsträckning det är möjligt enligt lag har författaren/författarna "
"tillägnat all upphovsrätt och alla närstående rättigheter till denna "
"programvara till den offentliga domänen över hela världen. Denna programvara "
"distribueras utan någon garanti."

#: ../../library/hashlib.rst:721
msgid ""
"You should have received a copy of the CC0 Public Domain Dedication along "
"with this software. If not, see https://creativecommons.org/publicdomain/"
"zero/1.0/."
msgstr ""
"Du bör ha fått en kopia av CC0 Public Domain Dedication tillsammans med den "
"här programvaran. Om inte, se https://creativecommons.org/publicdomain/"
"zero/1.0/."

#: ../../library/hashlib.rst:725
msgid ""
"The following people have helped with development or contributed their "
"changes to the project and the public domain according to the Creative "
"Commons Public Domain Dedication 1.0 Universal:"
msgstr ""
"Följande personer har hjälpt till med utvecklingen eller bidragit med sina "
"ändringar till projektet och den offentliga domänen enligt Creative Commons "
"Public Domain Dedication 1.0 Universal:"

#: ../../library/hashlib.rst:729
msgid "*Alexandr Sokolovskiy*"
msgstr "*Alexandr Sokolovskiy*"

#: ../../library/hashlib.rst:744
msgid "Module :mod:`hmac`"
msgstr "Modul :mod:`hmac`"

#: ../../library/hashlib.rst:744
msgid "A module to generate message authentication codes using hashes."
msgstr ""
"En modul för att generera autentiseringskoder för meddelanden med hjälp av "
"hash."

#: ../../library/hashlib.rst:747
msgid "Module :mod:`base64`"
msgstr "Modul :mod:`base64`"

#: ../../library/hashlib.rst:747
msgid "Another way to encode binary hashes for non-binary environments."
msgstr "Ett annat sätt att koda binära hashar för icke-binära miljöer."

#: ../../library/hashlib.rst:750
msgid "https://blake2.net"
msgstr ""

#: ../../library/hashlib.rst:750
msgid "Official BLAKE2 website."
msgstr "Officiell webbplats för BLAKE2."

#: ../../library/hashlib.rst:753
msgid ""
"https://csrc.nist.gov/csrc/media/publications/fips/180/2/archive/2002-08-01/"
"documents/fips180-2.pdf"
msgstr ""

#: ../../library/hashlib.rst:753
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr ""

#: ../../library/hashlib.rst:757
msgid ""
"https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr ""

#: ../../library/hashlib.rst:756
msgid ""
"Wikipedia article with information on which algorithms have known issues and "
"what that means regarding their use."
msgstr ""
"Wikipedia-artikel med information om vilka algoritmer som har kända problem "
"och vad det innebär för användningen av dem."

#: ../../library/hashlib.rst:760
msgid "https://www.ietf.org/rfc/rfc8018.txt"
msgstr "https://www.ietf.org/rfc/rfc8018.txt"

#: ../../library/hashlib.rst:760
msgid "PKCS #5: Password-Based Cryptography Specification Version 2.1"
msgstr "PKCS #5: Specifikation för lösenordsbaserad kryptografi version 2.1"

#: ../../library/hashlib.rst:762
msgid ""
"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"
msgstr ""
"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"

#: ../../library/hashlib.rst:763
msgid "NIST Recommendation for Password-Based Key Derivation."
msgstr "NIST:s rekommendation för lösenordsbaserad nyckelavledning."
