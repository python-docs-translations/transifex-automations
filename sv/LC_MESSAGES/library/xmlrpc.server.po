# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:56+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`xmlrpc.server` --- Basic XML-RPC servers"
msgstr ""

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr "**Källkod:** :source:`Lib/xmlrpc/server.py`"

#: ../../library/xmlrpc.server.rst:14
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using :"
"class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`CGIXMLRPCRequestHandler`."
msgstr ""
"Modulen :mod:`xmlrpc.server` tillhandahåller ett grundläggande serverramverk "
"för XML-RPC-servrar skrivna i Python.  Servrar kan antingen vara fristående, "
"med :class:`SimpleXMLRPCServer`, eller inbäddade i en CGI-miljö, med :class:"
"`CGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:22
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../library/xmlrpc.server.rst:31
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`socketserver."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"Skapa en ny serverinstans.  Denna klass tillhandahåller metoder för "
"registrering av funktioner som kan anropas av XML-RPC-protokollet.  "
"Parametern *requestHandler* bör vara en fabrik för requesthandler-instanser; "
"standardvärdet är :class:`SimpleXMLRPCRequestHandler`.  Parametrarna *addr* "
"och *requestHandler* skickas till konstruktören för :class:`socketserver."
"TCPServer`.  Om *logRequests* är true (standard) kommer förfrågningar att "
"loggas; om parametern är false stängs loggning av.   Parametrarna "
"*allow_none* och *encoding* skickas vidare till :mod:`xmlrpc.client` och "
"styr de XML-RPC-svar som kommer att returneras från servern. Parametern "
"*bind_and_activate* styr om :meth:`server_bind` och :meth:`server_activate` "
"anropas omedelbart av konstruktören; standardvärdet är true. Om den sätts "
"till false kan koden manipulera klassvariabeln *allow_reuse_address* innan "
"adressen är bunden. Parametern *use_builtin_types* skickas till funktionen :"
"func:`~xmlrpc.client.loads` och styr vilka typer som bearbetas när datum-/"
"tidsvärden eller binära data tas emot; standardvärdet är false."

#: ../../library/xmlrpc.server.rst:47 ../../library/xmlrpc.server.rst:61
#: ../../library/xmlrpc.server.rst:373
msgid "The *use_builtin_types* flag was added."
msgstr "Flaggan *use_builtin_types* har lagts till."

#: ../../library/xmlrpc.server.rst:54
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"Skapa en ny instans för att hantera XML-RPC-förfrågningar i en CGI-miljö.  "
"Parametrarna *allow_none* och *encoding* skickas vidare till :mod:`xmlrpc."
"client` och styr de XML-RPC-svar som returneras från servern. Parametern "
"*use_builtin_types* skickas till funktionen :func:`~xmlrpc.client.loads` och "
"styr vilka typer som behandlas när datum-/tidsvärden eller binära data tas "
"emot; standardvärdet är false."

#: ../../library/xmlrpc.server.rst:67
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""
"Skapa en ny instans av request handler.  Denna request handler stöder "
"``POST`` requests och modifierar loggningen så att parametern *logRequests* "
"till :class:`SimpleXMLRPCServer` constructor parameter respekteras."

#: ../../library/xmlrpc.server.rst:75
msgid "SimpleXMLRPCServer Objects"
msgstr "SimpleXMLRPCServer-objekt"

#: ../../library/xmlrpc.server.rst:77
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on :class:`socketserver."
"TCPServer` and provides a means of creating simple, stand alone XML-RPC "
"servers."
msgstr ""
"Klassen :class:`SimpleXMLRPCServer` är baserad på :class:`socketserver."
"TCPServer` och gör det möjligt att skapa enkla, fristående XML-RPC-servrar."

#: ../../library/xmlrpc.server.rst:84 ../../library/xmlrpc.server.rst:298
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* is a string, and may contain "
"characters not legal in Python identifiers, including the period character."
msgstr ""

#: ../../library/xmlrpc.server.rst:89 ../../library/xmlrpc.server.rst:303
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, ``function.__name__`` will be used."
msgstr ""

#: ../../library/xmlrpc.server.rst:93 ../../library/xmlrpc.server.rst:307
msgid ":meth:`register_function` can be used as a decorator."
msgstr ":meth:`register_function` kan användas som dekorator."

#: ../../library/xmlrpc.server.rst:99
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"Registrera ett objekt som används för att exponera metodnamn som inte har "
"registrerats med hjälp av :meth:`register_function`.  Om *instance* "
"innehåller en :meth:`_dispatch`\\-metod, anropas den med det begärda "
"metodnamnet och parametrarna från begäran.  Dess API är ``def "
"_dispatch(self, method, params)`` (observera att *params* inte representerar "
"en variabel argumentlista).  Om den anropar en underliggande funktion för "
"att utföra sin uppgift, kallas den funktionen som ``func(*params)`` och "
"utökar parameterlistan. Returvärdet från :meth:`_dispatch` returneras till "
"klienten som resultat.  Om *instance* inte har någon :meth:`_dispatch`\\-"
"metod, söks den efter ett attribut som matchar namnet på den begärda metoden."

#: ../../library/xmlrpc.server.rst:110
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"Om det valfria argumentet *allow_dotted_names* är true och instansen inte "
"har någon :meth:`_dispatch`\\-metod, och det begärda metodnamnet innehåller "
"punkter, söks varje komponent i metodnamnet individuellt, vilket innebär att "
"en enkel hierarkisk sökning utförs.  Det värde som hittas vid denna sökning "
"anropas sedan med parametrarna från begäran och returvärdet skickas tillbaka "
"till klienten."

#: ../../library/xmlrpc.server.rst:119
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"Om du aktiverar alternativet *allow_dotted_names* får inkräktare tillgång "
"till modulens globala variabler och kan köra godtycklig kod på din dator.  "
"Använd endast det här alternativet i ett säkert, slutet nätverk."

#: ../../library/xmlrpc.server.rst:126
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"Registrerar XML-RPC introspektionsfunktionerna ``system.listMethods``, "
"``system.methodHelp`` och ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:132
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr "Registrerar XML-RPC multicall-funktionen system.multicall."

#: ../../library/xmlrpc.server.rst:137
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"Ett attributvärde som måste vara en tupel som listar giltiga sökvägsdelar av "
"URL:en för mottagning av XML-RPC-förfrågningar.  Förfrågningar som skickas "
"till andra sökvägar kommer att resultera i ett HTTP-fel 404 \"no such "
"page\".  Om denna tupel är tom kommer alla sökvägar att betraktas som "
"giltiga. Standardvärdet är ``('/', '/RPC2')``."

#: ../../library/xmlrpc.server.rst:146
msgid "SimpleXMLRPCServer Example"
msgstr "Exempel på SimpleXMLRPCServer"

#: ../../library/xmlrpc.server.rst:147
msgid "Server code::"
msgstr "Serverkod::"

#: ../../library/xmlrpc.server.rst:181
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""
"Följande klientkod anropar de metoder som görs tillgängliga av den "
"föregående servern::"

#: ../../library/xmlrpc.server.rst:194
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ""
":meth:`register_function` kan också användas som en dekorator. Det "
"föregående serverexemplet kan registrera funktioner på ett dekorativt sätt::"

#: ../../library/xmlrpc.server.rst:225
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ""
"Följande exempel som ingår i modulen :file:`Lib/xmlrpc/server.py` visar en "
"server som tillåter prickade namn och registrerar en multicall-funktion."

#: ../../library/xmlrpc.server.rst:230
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed network."
msgstr ""
"Om du aktiverar alternativet *allow_dotted_names* får inkräktare tillgång "
"till modulens globala variabler och kan köra godtycklig kod på din dator.  "
"Använd detta exempel endast inom ett säkert, slutet nätverk."

#: ../../library/xmlrpc.server.rst:259
msgid "This ExampleService demo can be invoked from the command line::"
msgstr "Denna ExampleService-demo kan startas från kommandoraden::"

#: ../../library/xmlrpc.server.rst:264
msgid ""
"The client that interacts with the above server is included in `Lib/xmlrpc/"
"client.py`::"
msgstr ""

#: ../../library/xmlrpc.server.rst:284
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr "Denna klient som interagerar med demo XMLRPC-servern kan anropas som::"

#: ../../library/xmlrpc.server.rst:290
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCFörfrågningshanterare"

#: ../../library/xmlrpc.server.rst:292
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""
"Klassen :class:`CGIXMLRPCRequestHandler` kan användas för att hantera XML-"
"RPC-förfrågningar som skickas till Python CGI-skript."

#: ../../library/xmlrpc.server.rst:313
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"Registrera ett objekt som används för att exponera metodnamn som inte har "
"registrerats med hjälp av :meth:`register_function`. Om instance innehåller "
"en :meth:`_dispatch`\\-metod anropas den med det begärda metodnamnet och "
"parametrarna från begäran; returvärdet returneras till klienten som "
"resultat. Om instance inte har någon :meth:`_dispatch`\\-metod söks den "
"efter ett attribut som matchar namnet på den begärda metoden; om det begärda "
"metodnamnet innehåller perioder söks varje komponent i metodnamnet "
"individuellt, vilket innebär att en enkel hierarkisk sökning utförs. Det "
"värde som hittas vid denna sökning anropas sedan med parametrarna från "
"begäran, och returvärdet skickas tillbaka till klienten."

#: ../../library/xmlrpc.server.rst:327
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"Registrera XML-RPC introspektionsfunktionerna ``system.listMethods``, "
"``system.methodHelp`` och ``system.methodSignature``."

#: ../../library/xmlrpc.server.rst:333
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "Registrera XML-RPC multicall-funktionen ``system.multicall``."

#: ../../library/xmlrpc.server.rst:338
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"Hantera en XML-RPC-begäran. Om *request_text* anges bör det vara POST-data "
"som tillhandahålls av HTTP-servern, annars kommer innehållet i stdin att "
"användas."

#: ../../library/xmlrpc.server.rst:341
msgid "Example::"
msgstr "Exempel::"

#: ../../library/xmlrpc.server.rst:357
msgid "Documenting XMLRPC server"
msgstr "Dokumentation av XMLRPC-server"

#: ../../library/xmlrpc.server.rst:359
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using :"
"class:`DocXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`DocCGIXMLRPCRequestHandler`."
msgstr ""
"Dessa klasser utökar ovanstående klasser för att servera HTML-dokumentation "
"som svar på HTTP GET-begäranden.  Servrar kan antingen vara fristående, med :"
"class:`DocXMLRPCServer`, eller inbäddade i en CGI-miljö, med :class:"
"`DocCGIXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:369
msgid ""
"Create a new server instance. All parameters have the same meaning as for :"
"class:`SimpleXMLRPCServer`; *requestHandler* defaults to :class:"
"`DocXMLRPCRequestHandler`."
msgstr ""
"Skapa en ny serverinstans. Alla parametrar har samma betydelse som för :"
"class:`SimpleXMLRPCServer`; *requestHandler* är standard för :class:"
"`DocXMLRPCRequestHandler`."

#: ../../library/xmlrpc.server.rst:379
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr "Skapa en ny instans för att hantera XML-RPC-begäranden i en CGI-miljö."

#: ../../library/xmlrpc.server.rst:384
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC "
"POST requests, documentation GET requests, and modifies logging so that the "
"*logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""
"Skapa en ny instans av request handler. Denna request handler stöder XML-RPC "
"POST requests, documentation GET requests och modifierar loggning så att "
"parametern *logRequests* till :class:`DocXMLRPCServer` constructor parameter "
"respekteras."

#: ../../library/xmlrpc.server.rst:393
msgid "DocXMLRPCServer Objects"
msgstr "DocXMLRPCServer-objekt"

#: ../../library/xmlrpc.server.rst:395
msgid ""
"The :class:`DocXMLRPCServer` class is derived from :class:"
"`SimpleXMLRPCServer` and provides a means of creating self-documenting, "
"stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
"Klassen :class:`DocXMLRPCServer` är härledd från :class:`SimpleXMLRPCServer` "
"och gör det möjligt att skapa självdokumenterande, fristående XML-RPC-"
"servrar. HTTP POST-förfrågningar hanteras som XML-RPC-metodanrop. HTTP GET-"
"förfrågningar hanteras genom att generera HTML-dokumentation i pydoc-stil. "
"Detta gör att en server kan tillhandahålla sin egen webbaserade "
"dokumentation."

#: ../../library/xmlrpc.server.rst:404 ../../library/xmlrpc.server.rst:432
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr ""
"Ange den titel som används i den genererade HTML-dokumentationen. Denna "
"titel kommer att användas inuti HTML-elementet \"title\"."

#: ../../library/xmlrpc.server.rst:410 ../../library/xmlrpc.server.rst:438
msgid ""
"Set the name used in the generated HTML documentation. This name will appear "
"at the top of the generated documentation inside a \"h1\" element."
msgstr ""
"Ange det namn som används i den genererade HTML-dokumentationen. Detta namn "
"kommer att visas högst upp i den genererade dokumentationen i ett \"h1\"-"
"element."

#: ../../library/xmlrpc.server.rst:416 ../../library/xmlrpc.server.rst:444
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr ""
"Ange den beskrivning som används i den genererade HTML-dokumentationen. "
"Beskrivningen kommer att visas som ett stycke under servernamnet i "
"dokumentationen."

#: ../../library/xmlrpc.server.rst:421
msgid "DocCGIXMLRPCRequestHandler"
msgstr "DocCGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:423
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from :class:"
"`CGIXMLRPCRequestHandler` and provides a means of creating self-documenting, "
"XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. "
"HTTP GET requests are handled by generating pydoc-style HTML documentation. "
"This allows a server to provide its own web-based documentation."
msgstr ""
"Klassen :class:`DocCGIXMLRPCRequestHandler` är härledd från :class:"
"`CGIXMLRPCRequestHandler` och gör det möjligt att skapa självdokumenterande "
"XML-RPC CGI-skript. HTTP POST-förfrågningar hanteras som XML-RPC-metodanrop. "
"HTTP GET-begäranden hanteras genom att generera HTML-dokumentation i pydoc-"
"stil. Detta gör att en server kan tillhandahålla sin egen webbaserade "
"dokumentation."
