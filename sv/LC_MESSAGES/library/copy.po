# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/copy.rst:2
msgid ":mod:`copy` --- Shallow and deep copy operations"
msgstr ""

#: ../../library/copy.rst:7
msgid "**Source code:** :source:`Lib/copy.py`"
msgstr "**Källkod:** :source:`Lib/copy.py`"

#: ../../library/copy.rst:11
msgid ""
"Assignment statements in Python do not copy objects, they create bindings "
"between a target and an object. For collections that are mutable or contain "
"mutable items, a copy is sometimes needed so one can change one copy without"
" changing the other. This module provides generic shallow and deep copy "
"operations (explained below)."
msgstr ""
"Tilldelningssatser i Python kopierar inte objekt, de skapar bindningar "
"mellan ett mål och ett objekt. För samlingar som är föränderliga eller "
"innehåller föränderliga objekt behövs ibland en kopia så att man kan ändra "
"den ena kopian utan att ändra den andra. Denna modul tillhandahåller "
"generiska ytliga och djupa kopieringsoperationer (förklaras nedan)."

#: ../../library/copy.rst:18
msgid "Interface summary:"
msgstr "Sammanfattning av gränssnittet:"

#: ../../library/copy.rst:22
msgid "Return a shallow copy of *x*."
msgstr ""

#: ../../library/copy.rst:27
msgid "Return a deep copy of *x*."
msgstr ""

#: ../../library/copy.rst:32
msgid "Raised for module specific errors."
msgstr "Utlöses för modulspecifika fel."

#: ../../library/copy.rst:36
msgid ""
"The difference between shallow and deep copying is only relevant for "
"compound objects (objects that contain other objects, like lists or class "
"instances):"
msgstr ""
"Skillnaden mellan ytlig och djup kopiering är endast relevant för "
"sammansatta objekt (objekt som innehåller andra objekt, t.ex. listor eller "
"klassinstanser):"

#: ../../library/copy.rst:39
msgid ""
"A *shallow copy* constructs a new compound object and then (to the extent "
"possible) inserts *references* into it to the objects found in the original."
msgstr ""
"En *ytlig kopia* konstruerar ett nytt sammansatt objekt och infogar sedan (i"
" den mån det är möjligt) *referenser* till de objekt som finns i originalet."

#: ../../library/copy.rst:42
msgid ""
"A *deep copy* constructs a new compound object and then, recursively, "
"inserts *copies* into it of the objects found in the original."
msgstr ""
"En *djup kopia* konstruerar ett nytt sammansatt objekt och infogar sedan "
"rekursivt *kopior* i det av de objekt som finns i originalet."

#: ../../library/copy.rst:45
msgid ""
"Two problems often exist with deep copy operations that don't exist with "
"shallow copy operations:"
msgstr ""
"Det finns ofta två problem med djupa kopieringsoperationer som inte finns "
"med ytliga kopieringsoperationer:"

#: ../../library/copy.rst:48
msgid ""
"Recursive objects (compound objects that, directly or indirectly, contain a "
"reference to themselves) may cause a recursive loop."
msgstr ""
"Rekursiva objekt (sammansatta objekt som, direkt eller indirekt, innehåller "
"en referens till sig själva) kan orsaka en rekursiv loop."

#: ../../library/copy.rst:51
msgid ""
"Because deep copy copies everything it may copy too much, such as data which"
" is intended to be shared between copies."
msgstr ""
"Eftersom djup kopia kopierar allt kan den kopiera för mycket, t.ex. data som"
" är avsedd att delas mellan kopior."

#: ../../library/copy.rst:54
msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr "Funktionen :func:`deepcopy` undviker dessa problem genom att:"

#: ../../library/copy.rst:56
msgid ""
"keeping a ``memo`` dictionary of objects already copied during the current "
"copying pass; and"
msgstr ""
"hålla en \"memo\"-ordbok över objekt som redan kopierats under det aktuella "
"kopieringstillfället; och"

#: ../../library/copy.rst:59
msgid ""
"letting user-defined classes override the copying operation or the set of "
"components copied."
msgstr ""
"genom att låta användardefinierade klasser åsidosätta kopieringsoperationen "
"eller uppsättningen av kopierade komponenter."

#: ../../library/copy.rst:62
msgid ""
"This module does not copy types like module, method, stack trace, stack "
"frame, file, socket, window, or any similar types.  It does \"copy\" "
"functions and classes (shallow and deeply), by returning the original object"
" unchanged; this is compatible with the way these are treated by the "
":mod:`pickle` module."
msgstr ""
"Den här modulen kopierar inte typer som modul, metod, stack trace, stack "
"frame, fil, socket, fönster eller några liknande typer.  Den \"kopierar\" "
"funktioner och klasser (ytligt och djupt) genom att returnera det "
"ursprungliga objektet oförändrat; detta är kompatibelt med hur dessa "
"behandlas av :mod:`pickle`\\-modulen."

#: ../../library/copy.rst:67
msgid ""
"Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of "
"lists by assigning a slice of the entire list, for example, ``copied_list = "
"original_list[:]``."
msgstr ""
"Ytliga kopior av ordböcker kan göras med :meth:`dict.copy`, och av listor "
"genom att tilldela en bit av hela listan, till exempel ``copied_list = "
"original_list[:]``."

#: ../../library/copy.rst:73
msgid ""
"Classes can use the same interfaces to control copying that they use to "
"control pickling.  See the description of module :mod:`pickle` for "
"information on these methods.  In fact, the :mod:`copy` module uses the "
"registered pickle functions from the :mod:`copyreg` module."
msgstr ""
"Klasser kan använda samma gränssnitt för att styra kopiering som de använder"
" för att styra betning.  Se beskrivningen av modulen :mod:`pickle` för "
"information om dessa metoder.  Faktum är att modulen :mod:`copy` använder de"
" registrerade pickle-funktionerna från modulen :mod:`copyreg`."

#: ../../library/copy.rst:82
msgid ""
"In order for a class to define its own copy implementation, it can define "
"special methods :meth:`__copy__` and :meth:`__deepcopy__`.  The former is "
"called to implement the shallow copy operation; no additional arguments are "
"passed. The latter is called to implement the deep copy operation; it is "
"passed one argument, the ``memo`` dictionary.  If the :meth:`__deepcopy__` "
"implementation needs to make a deep copy of a component, it should call the "
":func:`deepcopy` function with the component as first argument and the memo "
"dictionary as second argument. The memo dictionary should be treated as an "
"opaque object."
msgstr ""

#: ../../library/copy.rst:95
msgid "Module :mod:`pickle`"
msgstr "Modul :mod:`pickle`"

#: ../../library/copy.rst:95
msgid ""
"Discussion of the special methods used to support object state retrieval and"
" restoration."
msgstr ""
"Diskussion om de speciella metoder som används för att stödja hämtning och "
"återställning av objektstatus."
