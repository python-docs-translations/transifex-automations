# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/asyncio-sync.rst:7
msgid "Synchronization Primitives"
msgstr "Synkroniseringsprimitiver"

#: ../../library/asyncio-sync.rst:9
msgid "**Source code:** :source:`Lib/asyncio/locks.py`"
msgstr "**Källkod:** :source:`Lib/asyncio/locks.py`"

#: ../../library/asyncio-sync.rst:13
msgid ""
"asyncio synchronization primitives are designed to be similar to those of "
"the :mod:`threading` module with two important caveats:"
msgstr ""
"asyncios synkroniseringsprimitiver är utformade för att likna dem i modulen "
":mod:`threading` med två viktiga förbehåll:"

#: ../../library/asyncio-sync.rst:16
msgid ""
"asyncio primitives are not thread-safe, therefore they should not be used "
"for OS thread synchronization (use :mod:`threading` for that);"
msgstr ""
"asyncioprimitiver är inte trådsäkra, därför bör de inte användas för "
"synkronisering av OS-trådar (använd :mod:`threading` för det);"

#: ../../library/asyncio-sync.rst:20
msgid ""
"methods of these synchronization primitives do not accept the *timeout* "
"argument; use the :func:`asyncio.wait_for` function to perform operations "
"with timeouts."
msgstr ""
"metoderna för dessa synkroniseringsprimitiver accepterar inte argumentet "
"*timeout*; använd funktionen :func:`asyncio.wait_for` för att utföra "
"operationer med timeouts."

#: ../../library/asyncio-sync.rst:24
msgid "asyncio has the following basic synchronization primitives:"
msgstr "asyncio har följande grundläggande synkroniseringsprimitiver:"

#: ../../library/asyncio-sync.rst:26
msgid ":class:`Lock`"
msgstr ":class:`Lock`"

#: ../../library/asyncio-sync.rst:27
msgid ":class:`Event`"
msgstr ":class:`Event`"

#: ../../library/asyncio-sync.rst:28
msgid ":class:`Condition`"
msgstr ":class:`Condition`"

#: ../../library/asyncio-sync.rst:29
msgid ":class:`Semaphore`"
msgstr ":class:`Semaphore`"

#: ../../library/asyncio-sync.rst:30
msgid ":class:`BoundedSemaphore`"
msgstr ":class:`BoundedSemaphore`"

#: ../../library/asyncio-sync.rst:37
msgid "Lock"
msgstr "Lås"

#: ../../library/asyncio-sync.rst:41
msgid "Implements a mutex lock for asyncio tasks.  Not thread-safe."
msgstr "Implementerar ett mutex-lås för asyncio-uppgifter.  Inte tråd-säker."

#: ../../library/asyncio-sync.rst:43
msgid ""
"An asyncio lock can be used to guarantee exclusive access to a shared "
"resource."
msgstr ""
"Ett asynciolås kan användas för att garantera exklusiv tillgång till en "
"delad resurs."

#: ../../library/asyncio-sync.rst:46
msgid ""
"The preferred way to use a Lock is an :keyword:`async with` statement::"
msgstr ""
"Det föredragna sättet att använda ett Lock är en :keyword:`async "
"with`\\-sats::"

#: ../../library/asyncio-sync.rst:55 ../../library/asyncio-sync.rst:200
#: ../../library/asyncio-sync.rst:300
msgid "which is equivalent to::"
msgstr "vilket är likvärdigt med::"

#: ../../library/asyncio-sync.rst:68 ../../library/asyncio-sync.rst:114
#: ../../library/asyncio-sync.rst:190 ../../library/asyncio-sync.rst:290
#: ../../library/asyncio-sync.rst:345
msgid "The *loop* parameter."
msgstr ""

#: ../../library/asyncio-sync.rst:71
msgid "Acquire the lock."
msgstr "Förvärva låset."

#: ../../library/asyncio-sync.rst:73
msgid ""
"This method waits until the lock is *unlocked*, sets it to *locked* and "
"returns ``True``."
msgstr ""
"Den här metoden väntar tills låset är *unlocked*, sätter det till *locked* "
"och returnerar ``True``."

#: ../../library/asyncio-sync.rst:76
msgid ""
"When more than one coroutine is blocked in :meth:`acquire` waiting for the "
"lock to be unlocked, only one coroutine eventually proceeds."
msgstr ""
"När mer än en coroutine blockeras i :meth:`acquire` i väntan på att låset "
"ska låsas upp, fortsätter bara en coroutine till slut."

#: ../../library/asyncio-sync.rst:80
msgid ""
"Acquiring a lock is *fair*: the coroutine that proceeds will be the first "
"coroutine that started waiting on the lock."
msgstr ""
"Att förvärva ett lås är *rättvist*: den coroutine som fortsätter kommer att "
"vara den första coroutine som började vänta på låset."

#: ../../library/asyncio-sync.rst:85
msgid "Release the lock."
msgstr "Lossa låset."

#: ../../library/asyncio-sync.rst:87
msgid "When the lock is *locked*, reset it to *unlocked* and return."
msgstr "När låset är *locked*, återställ det till *unlocked* och returnera."

#: ../../library/asyncio-sync.rst:89
msgid "If the lock is *unlocked*, a :exc:`RuntimeError` is raised."
msgstr "Om låset är *olåst* uppstår ett :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:93
msgid "Return ``True`` if the lock is *locked*."
msgstr "Returnerar ``True`` om låset är *locked*."

#: ../../library/asyncio-sync.rst:97
msgid "Event"
msgstr "Event"

#: ../../library/asyncio-sync.rst:101
msgid "An event object.  Not thread-safe."
msgstr "Ett händelseobjekt.  Inte tråd-säkert."

#: ../../library/asyncio-sync.rst:103
msgid ""
"An asyncio event can be used to notify multiple asyncio tasks that some "
"event has happened."
msgstr ""
"En asynciohändelse kan användas för att meddela flera asynciouppgifter att "
"en händelse har inträffat."

#: ../../library/asyncio-sync.rst:106
msgid ""
"An Event object manages an internal flag that can be set to *true* with the "
":meth:`~Event.set` method and reset to *false* with the :meth:`clear` "
"method.  The :meth:`~Event.wait` method blocks until the flag is set to "
"*true*.  The flag is set to *false* initially."
msgstr ""
"Ett Event-objekt hanterar en intern flagga som kan sättas till *true* med "
"metoden :meth:`~Event.set` och återställas till *false* med metoden "
":meth:`clear`.  Metoden :meth:`~Event.wait` blockerar tills flaggan är satt "
"till *true*.  Flaggan är initialt satt till *false*."

#: ../../library/asyncio-sync.rst:117
msgid "Example::"
msgstr "Exempel::"

#: ../../library/asyncio-sync.rst:142
msgid "Wait until the event is set."
msgstr "Vänta tills händelsen är inställd."

#: ../../library/asyncio-sync.rst:144
msgid ""
"If the event is set, return ``True`` immediately. Otherwise block until "
"another task calls :meth:`~Event.set`."
msgstr ""
"Om händelsen är inställd, returnera ``True`` omedelbart. Annars blockeras "
"tills en annan uppgift anropar :meth:`~Event.set`."

#: ../../library/asyncio-sync.rst:149
msgid "Set the event."
msgstr "Ställ in händelsen."

#: ../../library/asyncio-sync.rst:151
msgid "All tasks waiting for event to be set will be immediately awakened."
msgstr ""
"Alla uppgifter som väntar på att händelsen ska aktiveras kommer omedelbart "
"att väckas."

#: ../../library/asyncio-sync.rst:156
msgid "Clear (unset) the event."
msgstr "Rensa (avmarkera) händelsen."

#: ../../library/asyncio-sync.rst:158
msgid ""
"Tasks awaiting on :meth:`~Event.wait` will now block until the "
":meth:`~Event.set` method is called again."
msgstr ""

#: ../../library/asyncio-sync.rst:163
msgid "Return ``True`` if the event is set."
msgstr "Returnerar ``True`` om händelsen är inställd."

#: ../../library/asyncio-sync.rst:167
msgid "Condition"
msgstr "Villkor"

#: ../../library/asyncio-sync.rst:171
msgid "A Condition object.  Not thread-safe."
msgstr "Ett Condition-objekt.  Inte tråd-säkert."

#: ../../library/asyncio-sync.rst:173
msgid ""
"An asyncio condition primitive can be used by a task to wait for some event "
"to happen and then get exclusive access to a shared resource."
msgstr ""
"En asyncio-villkorsprimitiv kan användas av en uppgift för att vänta på att "
"en händelse ska inträffa och sedan få exklusiv tillgång till en delad "
"resurs."

#: ../../library/asyncio-sync.rst:177
msgid ""
"In essence, a Condition object combines the functionality of an "
":class:`Event` and a :class:`Lock`.  It is possible to have multiple "
"Condition objects share one Lock, which allows coordinating exclusive access"
" to a shared resource between different tasks interested in particular "
"states of that shared resource."
msgstr ""
"I huvudsak kombinerar ett Condition-objekt funktionaliteten hos en "
":class:`Event` och en :class:`Lock`.  Det är möjligt att låta flera "
"Condition-objekt dela ett Lock, vilket gör det möjligt att samordna exklusiv"
" tillgång till en delad resurs mellan olika uppgifter som är intresserade av"
" särskilda tillstånd för den delade resursen."

#: ../../library/asyncio-sync.rst:183
msgid ""
"The optional *lock* argument must be a :class:`Lock` object or ``None``.  In"
" the latter case a new Lock object is created automatically."
msgstr ""
"Det valfria *lock*-argumentet måste vara ett :class:`Lock`\\-objekt eller "
"``None``.  I det senare fallet skapas ett nytt Lock-objekt automatiskt."

#: ../../library/asyncio-sync.rst:191
msgid ""
"The preferred way to use a Condition is an :keyword:`async with` statement::"
msgstr ""
"Det föredragna sättet att använda ett villkor är en :keyword:`async "
"with`\\-sats::"

#: ../../library/asyncio-sync.rst:213
msgid "Acquire the underlying lock."
msgstr "Förvärva det underliggande låset."

#: ../../library/asyncio-sync.rst:215
msgid ""
"This method waits until the underlying lock is *unlocked*, sets it to "
"*locked* and returns ``True``."
msgstr ""
"Denna metod väntar tills det underliggande låset är *unlocked*, sätter det "
"till *locked* och returnerar ``True``."

#: ../../library/asyncio-sync.rst:220
msgid ""
"Wake up at most *n* tasks (1 by default) waiting on this condition.  The "
"method is no-op if no tasks are waiting."
msgstr ""

#: ../../library/asyncio-sync.rst:223 ../../library/asyncio-sync.rst:238
msgid ""
"The lock must be acquired before this method is called and released shortly "
"after.  If called with an *unlocked* lock a :exc:`RuntimeError` error is "
"raised."
msgstr ""
"Låset måste förvärvas innan denna metod anropas och släppas kort därefter.  "
"Om metoden anropas med ett *olåst* lås kommer ett :exc:`RuntimeError`\\-fel "
"att uppstå."

#: ../../library/asyncio-sync.rst:229
msgid "Return ``True`` if the underlying lock is acquired."
msgstr "Returnerar ``True`` om det underliggande låset är förvärvat."

#: ../../library/asyncio-sync.rst:233
msgid "Wake up all tasks waiting on this condition."
msgstr "Väck alla uppgifter som väntar på detta villkor."

#: ../../library/asyncio-sync.rst:235
msgid "This method acts like :meth:`notify`, but wakes up all waiting tasks."
msgstr ""
"Den här metoden fungerar som :meth:`notify`, men väcker alla väntande "
"uppgifter."

#: ../../library/asyncio-sync.rst:244
msgid "Release the underlying lock."
msgstr "Lossa det underliggande låset."

#: ../../library/asyncio-sync.rst:246
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr "När den anropas på ett olåst lås uppstår ett :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:251
msgid "Wait until notified."
msgstr "Vänta tills du får besked."

#: ../../library/asyncio-sync.rst:253
msgid ""
"If the calling task has not acquired the lock when this method is called, a "
":exc:`RuntimeError` is raised."
msgstr ""
"Om den anropande uppgiften inte har förvärvat låset när denna metod anropas,"
" uppstår ett :exc:`RuntimeError`."

#: ../../library/asyncio-sync.rst:256
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call. Once awakened, the "
"Condition re-acquires its lock and this method returns ``True``."
msgstr ""
"Den här metoden frigör det underliggande låset och blockerar sedan tills den"
" väcks av ett anrop från :meth:`notify` eller :meth:`notify_all`. När den "
"har väckts återtar Condition sitt lås och denna metod returnerar ``True``."

#: ../../library/asyncio-sync.rst:263
msgid "Wait until a predicate becomes *true*."
msgstr "Vänta tills ett predikat blir *sant*."

#: ../../library/asyncio-sync.rst:265
msgid ""
"The predicate must be a callable which result will be interpreted as a "
"boolean value.  The final value is the return value."
msgstr ""

#: ../../library/asyncio-sync.rst:271
msgid "Semaphore"
msgstr "Semafor"

#: ../../library/asyncio-sync.rst:275
msgid "A Semaphore object.  Not thread-safe."
msgstr "Ett semaforobjekt.  Inte tråd-säkert."

#: ../../library/asyncio-sync.rst:277
msgid ""
"A semaphore manages an internal counter which is decremented by each "
":meth:`acquire` call and incremented by each :meth:`release` call. The "
"counter can never go below zero; when :meth:`acquire` finds that it is zero,"
" it blocks, waiting until some task calls :meth:`release`."
msgstr ""
"En semafor hanterar en intern räknare som decimeras vid varje anrop av "
":meth:`acquire` och ökas vid varje anrop av :meth:`release`. Räknaren kan "
"aldrig gå under noll; när :meth:`acquire` upptäcker att den är noll "
"blockeras den och väntar tills någon uppgift anropar :meth:`release`."

#: ../../library/asyncio-sync.rst:283
msgid ""
"The optional *value* argument gives the initial value for the internal "
"counter (``1`` by default). If the given value is less than ``0`` a "
":exc:`ValueError` is raised."
msgstr ""
"Det valfria argumentet *value* anger det initiala värdet för den interna "
"räknaren (``1`` som standard). Om det angivna värdet är mindre än ``0`` "
"uppstår ett :exc:`ValueError`."

#: ../../library/asyncio-sync.rst:291
msgid ""
"The preferred way to use a Semaphore is an :keyword:`async with` statement::"
msgstr ""
"Det föredragna sättet att använda en semafor är en :keyword:`async "
"with`\\-sats::"

#: ../../library/asyncio-sync.rst:313
msgid "Acquire a semaphore."
msgstr "Förvärva en semafor."

#: ../../library/asyncio-sync.rst:315
msgid ""
"If the internal counter is greater than zero, decrement it by one and return"
" ``True`` immediately.  If it is zero, wait until a :meth:`release` is "
"called and return ``True``."
msgstr ""
"Om den interna räknaren är större än noll, decimera den med ett och "
"returnera ``True`` omedelbart.  Om den är noll, vänta tills en "
":meth:`release` anropas och returnera ``True``."

#: ../../library/asyncio-sync.rst:321
msgid "Returns ``True`` if semaphore can not be acquired immediately."
msgstr "Returnerar ``True`` om semaforen inte kan förvärvas omedelbart."

#: ../../library/asyncio-sync.rst:325
msgid ""
"Release a semaphore, incrementing the internal counter by one. Can wake up a"
" task waiting to acquire the semaphore."
msgstr ""
"Frigör en semafor, vilket ökar den interna räknaren med ett steg. Kan väcka "
"en uppgift som väntar på att förvärva semaforen."

#: ../../library/asyncio-sync.rst:328
msgid ""
"Unlike :class:`BoundedSemaphore`, :class:`Semaphore` allows making more "
"``release()`` calls than ``acquire()`` calls."
msgstr ""
"Till skillnad från :class:`BoundedSemaphore` tillåter :class:`Semaphore` "
"fler ``release()`` -anrop än ``acquire()`` -anrop."

#: ../../library/asyncio-sync.rst:333
msgid "BoundedSemaphore"
msgstr "BoundedSemaphore"

#: ../../library/asyncio-sync.rst:337
msgid "A bounded semaphore object.  Not thread-safe."
msgstr "Ett avgränsat semaforobjekt.  Inte tråd-säkert."

#: ../../library/asyncio-sync.rst:339
msgid ""
"Bounded Semaphore is a version of :class:`Semaphore` that raises a "
":exc:`ValueError` in :meth:`~Semaphore.release` if it increases the internal"
" counter above the initial *value*."
msgstr ""
"Bounded Semaphore är en version av :class:`Semaphore` som ger upphov till "
"ett :exc:`ValueError` i :meth:`~Semaphore.release` om den ökar den interna "
"räknaren över det ursprungliga *värdet*."

#: ../../library/asyncio-sync.rst:352
msgid ""
"Acquiring a lock using ``await lock`` or ``yield from lock`` and/or "
":keyword:`with` statement (``with await lock``, ``with (yield from lock)``) "
"was removed.  Use ``async with lock`` instead."
msgstr ""
"Att förvärva ett lås med hjälp av ``await lock`` eller ``yield from lock`` "
"och/eller :keyword:`with`\\-satsen (``with await lock``, ``with (yield from "
"lock)``) togs bort.  Använd ``async with lock`` istället."
