# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 16:36+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ""

#: ../../library/functools.rst:14
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**Källkod:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:23
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
"Modulen :mod:`functools` är avsedd för funktioner av högre ordning: "
"funktioner som agerar på eller returnerar andra funktioner. I allmänhet kan "
"alla anropsbara objekt behandlas som en funktion i den här modulen."

#: ../../library/functools.rst:27
msgid "The :mod:`functools` module defines the following functions:"
msgstr "Modulen :mod:`functools` definierar följande funktioner:"

#: ../../library/functools.rst:31
msgid ""
"Simple lightweight unbounded function cache.  Sometimes called `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."
msgstr ""
"Enkel lättviktig obegränsad funktionscache.  Kallas ibland för \"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."

#: ../../library/functools.rst:34
msgid ""
"Returns the same as ``lru_cache(maxsize=None)``, creating a thin wrapper "
"around a dictionary lookup for the function arguments.  Because it never "
"needs to evict old values, this is smaller and faster than :func:"
"`lru_cache()` with a size limit."
msgstr ""

#: ../../library/functools.rst:39 ../../library/functools.rst:276
msgid "For example::"
msgstr "Till exempel::"

#: ../../library/functools.rst:52 ../../library/functools.rst:143
msgid ""
"The cache is threadsafe so that the wrapped function can be used in multiple "
"threads.  This means that the underlying data structure will remain coherent "
"during concurrent updates."
msgstr ""
"Cachen är trådsäker så att den omslutna funktionen kan användas i flera "
"trådar.  Detta innebär att den underliggande datastrukturen förblir "
"sammanhängande under samtidiga uppdateringar."

#: ../../library/functools.rst:56 ../../library/functools.rst:147
msgid ""
"It is possible for the wrapped function to be called more than once if "
"another thread makes an additional call before the initial call has been "
"completed and cached."
msgstr ""
"Det är möjligt att den inkapslade funktionen anropas mer än en gång om en "
"annan tråd gör ett ytterligare anrop innan det första anropet har slutförts "
"och cachats."

#: ../../library/functools.rst:65
msgid ""
"Transform a method of a class into a property whose value is computed once "
"and then cached as a normal attribute for the life of the instance. Similar "
"to :func:`property`, with the addition of caching. Useful for expensive "
"computed properties of instances that are otherwise effectively immutable."
msgstr ""
"Omvandlar en metod i en klass till en egenskap vars värde beräknas en gång "
"och sedan cachelagras som ett normalt attribut under instansens livstid. "
"Liknar :func:`property`, med tillägg av cachelagring. Användbar för dyra "
"beräknade egenskaper hos instanser som annars är effektivt oföränderliga."

#: ../../library/functools.rst:70 ../../library/functools.rst:127
#: ../../library/functools.rst:368
msgid "Example::"
msgstr "Exempel::"

#: ../../library/functools.rst:81
msgid ""
"The mechanics of :func:`cached_property` are somewhat different from :func:"
"`property`.  A regular property blocks attribute writes unless a setter is "
"defined. In contrast, a *cached_property* allows writes."
msgstr ""
"Mekaniken i :func:`cached_property` är något annorlunda än i :func:"
"`property`.  En vanlig property blockerar skrivningar av attribut om inte en "
"setter är definierad. Däremot tillåter en *cached_property* skrivningar."

#: ../../library/functools.rst:85
msgid ""
"The *cached_property* decorator only runs on lookups and only when an "
"attribute of the same name doesn't exist.  When it does run, the "
"*cached_property* writes to the attribute with the same name. Subsequent "
"attribute reads and writes take precedence over the *cached_property* method "
"and it works like a normal attribute."
msgstr ""
"Dekoratorn *cached_property* körs endast vid uppslagningar och endast när "
"ett attribut med samma namn inte existerar.  När den körs skriver "
"*cached_property* till attributet med samma namn. Efterföljande läsningar "
"och skrivningar av attribut har företräde framför metoden *cached_property* "
"och den fungerar som ett vanligt attribut."

#: ../../library/functools.rst:91
msgid ""
"The cached value can be cleared by deleting the attribute.  This allows the "
"*cached_property* method to run again."
msgstr ""
"Det cachade värdet kan rensas genom att attributet tas bort.  Detta gör att "
"metoden *cached_property* kan köras igen."

#: ../../library/functools.rst:94
msgid ""
"Note, this decorator interferes with the operation of :pep:`412` key-sharing "
"dictionaries.  This means that instance dictionaries can take more space "
"than usual."
msgstr ""
"Observera att denna dekorator stör funktionen hos :pep:`412` "
"nyckeldelningsordböcker.  Detta innebär att instansordböcker kan ta mer "
"utrymme än vanligt."

#: ../../library/functools.rst:98
msgid ""
"Also, this decorator requires that the ``__dict__`` attribute on each "
"instance be a mutable mapping. This means it will not work with some types, "
"such as metaclasses (since the ``__dict__`` attributes on type instances are "
"read-only proxies for the class namespace), and those that specify "
"``__slots__`` without including ``__dict__`` as one of the defined slots (as "
"such classes don't provide a ``__dict__`` attribute at all)."
msgstr ""
"Den här dekoratorn kräver också att attributet ``__dict__`` på varje instans "
"är en muterbar mappning. Detta innebär att den inte kommer att fungera med "
"vissa typer, till exempel metaklasser (eftersom attributen ``__dict__`` på "
"typinstanser är skrivskyddade proxyer för klassens namnrymd) och de som "
"anger ``__slots__`` utan att inkludera ``__dict__`` som en av de definierade "
"slottarna (eftersom sådana klasser inte tillhandahåller ett attribut "
"``__dict__`` alls)."

#: ../../library/functools.rst:105
msgid ""
"If a mutable mapping is not available or if space-efficient key sharing is "
"desired, an effect similar to :func:`cached_property` can also be achieved "
"by stacking :func:`property` on top of :func:`lru_cache`. See :ref:`faq-"
"cache-method-calls` for more details on how this differs from :func:"
"`cached_property`."
msgstr ""
"Om en mutabel mappning inte är tillgänglig eller om utrymmeseffektiv "
"nyckeldelning önskas, kan en effekt som liknar :func:`cached_property` också "
"uppnås genom att stapla :func:`property` ovanpå :func:`lru_cache`. Se :ref:"
"`faq-cache-method-calls` för mer information om hur detta skiljer sig från :"
"func:`cached_property`."

#: ../../library/functools.rst:115
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, :"
"func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:"
"`itertools.groupby`).  This function is primarily used as a transition tool "
"for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"Omvandlar en gammaldags jämförelsefunktion till en :term:`nyckelfunktion`.  "
"Används med verktyg som accepterar nyckelfunktioner (t.ex. :func:`sorted`, :"
"func:`min`, :func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :"
"func:`itertools.groupby`).  Denna funktion används främst som ett "
"övergångsverktyg för program som konverteras från Python 2 som stödde "
"användningen av jämförelsefunktioner."

#: ../../library/functools.rst:122
msgid ""
"A comparison function is any callable that accepts two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts "
"one argument and returns another value to be used as the sort key."
msgstr ""
"En jämförelsefunktion är en anropsbar funktion som tar emot två argument, "
"jämför dem och returnerar ett negativt tal för mindre än, noll för likhet "
"eller ett positivt tal för större än.  En nyckelfunktion är en anropsbar "
"funktion som tar emot ett argument och returnerar ett annat värde som "
"används som sorteringsnyckel."

#: ../../library/functools.rst:131
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"För sorteringsexempel och en kort sorteringshandledning, se :ref:"
"`sortinghowto`."

#: ../../library/functools.rst:139
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"Dekorator för att omsluta en funktion med en memoizing callable som sparar "
"upp till *maxsize* senaste anrop.  Det kan spara tid när en dyr eller I/O-"
"bunden funktion anropas med jämna mellanrum med samma argument."

#: ../../library/functools.rst:151
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be :term:`hashable`."
msgstr ""
"Eftersom en ordbok används för att cacha resultat måste positionella "
"argument och nyckelordsargument till funktionen vara :term:`hashable`."

#: ../../library/functools.rst:154
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, ``f(a=1, b=2)`` and ``f(b=2, a=1)`` "
"differ in their keyword argument order and may have two separate cache "
"entries."
msgstr ""
"Olika argumentmönster kan betraktas som olika anrop med olika cacheposter.  "
"Till exempel skiljer sig ``f(a=1, b=2)`` och ``f(b=2, a=1)`` åt i "
"ordningsföljden på nyckelordets argument och kan ha två separata cacheposter."

#: ../../library/functools.rst:159
msgid ""
"If *user_function* is specified, it must be a callable. This allows the "
"*lru_cache* decorator to be applied directly to a user function, leaving the "
"*maxsize* at its default value of 128::"
msgstr ""
"Om *user_function* specificeras måste den vara en callable. Detta gör att "
"*lru_cache*-dekoratorn kan tillämpas direkt på en användarfunktion, och "
"*maxsize* behåller sitt standardvärde på 128::"

#: ../../library/functools.rst:167
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound."
msgstr ""
"Om *maxsize* är satt till ``None`` inaktiveras LRU-funktionen och "
"cacheminnet kan växa obegränsat."

#: ../../library/functools.rst:170
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  If *typed* is false, the implementation will usually "
"regard them as equivalent calls and only cache a single result. (Some types "
"such as *str* and *int* may be cached separately even when *typed* is false.)"
msgstr ""
"Om *typed* är satt till true kommer funktionsargument av olika typer att "
"cachas separat.  Om *typed* är false kommer implementationen vanligtvis att "
"betrakta dem som likvärdiga anrop och bara cacha ett enda resultat. (Vissa "
"typer som *str* och *int* kan cachelagras separat även när *typed* är false.)"

#: ../../library/functools.rst:176
msgid ""
"Note, type specificity applies only to the function's immediate arguments "
"rather than their contents.  The scalar arguments, ``Decimal(42)`` and "
"``Fraction(42)`` are be treated as distinct calls with distinct results. In "
"contrast, the tuple arguments ``('answer', Decimal(42))`` and ``('answer', "
"Fraction(42))`` are treated as equivalent."
msgstr ""
"Observera att typspecificitet endast gäller funktionens omedelbara argument "
"och inte deras innehåll.  De skalära argumenten ``Decimal(42))`` och "
"``Fraction(42))`` behandlas som distinkta anrop med distinkta resultat. "
"Däremot behandlas tupelargumenten ``('answer', Decimal(42))`` och "
"``('answer', Fraction(42))`` som likvärdiga."

#: ../../library/functools.rst:182
msgid ""
"The wrapped function is instrumented with a :func:`!cache_parameters` "
"function that returns a new :class:`dict` showing the values for *maxsize* "
"and *typed*.  This is for information purposes only.  Mutating the values "
"has no effect."
msgstr ""
"Den omslutna funktionen är utrustad med en :func:`!cache_parameters`-"
"funktion som returnerar en ny :class:`dict` som visar värdena för *maxsize* "
"och *typed*.  Detta är endast för informationsändamål.  Mutation av värdena "
"har ingen effekt."

#: ../../library/functools.rst:187
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*."
msgstr ""

#: ../../library/functools.rst:192
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr ""

#: ../../library/functools.rst:195
msgid ""
"The original underlying function is accessible through the :attr:"
"`__wrapped__` attribute.  This is useful for introspection, for bypassing "
"the cache, or for rewrapping the function with a different cache."
msgstr ""
"Den underliggande originalfunktionen är tillgänglig via attributet :attr:"
"`__wrapped__`.  Detta är användbart för introspektion, för att kringgå "
"cacheminnet eller för att återpacka funktionen med ett annat cacheminne."

#: ../../library/functools.rst:199
msgid ""
"The cache keeps references to the arguments and return values until they age "
"out of the cache or until the cache is cleared."
msgstr ""
"Cachen behåller referenser till argumenten och returvärdena tills de åldras "
"ut ur cachen eller tills cachen rensas."

#: ../../library/functools.rst:202
msgid ""
"If a method is cached, the ``self`` instance argument is included in the "
"cache.  See :ref:`faq-cache-method-calls`"
msgstr ""
"Om en metod cachelagras inkluderas instansargumentet ``self`` i "
"cacheminnet.  Se :ref:`faq-cache-metod-anrop`"

#: ../../library/functools.rst:205
msgid ""
"An `LRU (least recently used) cache <https://en.wikipedia.org/wiki/"
"Cache_replacement_policies#Least_recently_used_(LRU)>`_ works best when the "
"most recent calls are the best predictors of upcoming calls (for example, "
"the most popular articles on a news server tend to change each day).  The "
"cache's size limit assures that the cache does not grow without bound on "
"long-running processes such as web servers."
msgstr ""

#: ../../library/functools.rst:212
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call (such as generators and async functions), or impure "
"functions such as time() or random()."
msgstr ""
"I allmänhet bör LRU-cachen endast användas när du vill återanvända tidigare "
"beräknade värden.  Följaktligen är det inte meningsfullt att cachelagra "
"funktioner med bieffekter, funktioner som måste skapa distinkta föränderliga "
"objekt vid varje anrop (t.ex. generatorer och asynkrona funktioner) eller "
"orena funktioner som time() eller random()."

#: ../../library/functools.rst:218
msgid "Example of an LRU cache for static web content::"
msgstr "Exempel på en LRU-cache för statiskt webbinnehåll::"

#: ../../library/functools.rst:237
msgid ""
"Example of efficiently computing `Fibonacci numbers <https://en.wikipedia."
"org/wiki/Fibonacci_number>`_ using a cache to implement a `dynamic "
"programming <https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"Exempel på effektiv beräkning av Fibonacci-tal <https://en.wikipedia.org/"
"wiki/Fibonacci_number>`_ med hjälp av en cache för att implementera en "
"teknik för dynamisk programmering <https://en.wikipedia.org/wiki/"
"Dynamic_programming>`_::"

#: ../../library/functools.rst:257
msgid "Added the *typed* option."
msgstr "Alternativet *typed* har lagts till."

#: ../../library/functools.rst:260
msgid "Added the *user_function* option."
msgstr "Lagt till alternativet *user_function*."

#: ../../library/functools.rst:263
msgid "Added the function :func:`!cache_parameters`"
msgstr "Lagt till funktionen :func:`!cache_parameters`"

#: ../../library/functools.rst:268
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""
"Om en klass definierar en eller flera ordningsmetoder för rik jämförelse, "
"tillhandahåller denna klassdekorator resten.  Detta förenklar arbetet med "
"att specificera alla möjliga operationer för rik jämförelse:"

#: ../../library/functools.rst:272
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, "
"or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""

#: ../../library/functools.rst:296
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack "
"traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six "
"rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""
"Den här dekoratorn gör det enkelt att skapa välfungerande, helt ordnade "
"typer, men det sker på bekostnad av långsammare exekvering och mer komplexa "
"stackspår för de härledda jämförelsemetoderna. Om prestandajämförelser visar "
"att detta är en flaskhals för en viss applikation, är det troligt att det är "
"enkelt att öka hastigheten genom att implementera alla sex rika "
"jämförelsemetoderna istället."

#: ../../library/functools.rst:305
msgid ""
"This decorator makes no attempt to override methods that have been declared "
"in the class *or its superclasses*. Meaning that if a superclass defines a "
"comparison operator, *total_ordering* will not implement it again, even if "
"the original method is abstract."
msgstr ""
"Denna dekorator gör inga försök att åsidosätta metoder som har deklarerats i "
"klassen *eller dess superklasser*. Det betyder att om en superklass "
"definierar en jämförelseoperator, kommer *total_ordering* inte att "
"implementera den igen, även om den ursprungliga metoden är abstrakt."

#: ../../library/functools.rst:312
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr ""

#: ../../library/functools.rst:318
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"Returnerar ett nytt :ref:`partial object<partial-objects>` som när det "
"anropas kommer att bete sig som *func* anropat med de positionella "
"argumenten *args* och nyckelordsargumenten *keywords*. Om fler argument "
"anges vid anropet läggs de till *args*. Om ytterligare nyckelordsargument "
"anges utökar och åsidosätter de *keywords*. Ungefär likvärdig med::"

#: ../../library/functools.rst:334
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""

#: ../../library/functools.rst:349
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like :class:"
"`partial` except that it is designed to be used as a method definition "
"rather than being directly callable."
msgstr ""
"Returnerar en ny :class:`partialmethod` deskriptor som beter sig som :class:"
"`partial` förutom att den är utformad för att användas som en "
"metoddefinition snarare än att vara direkt anropsbar."

#: ../../library/functools.rst:353
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr ""
"*func* måste vara en :term:`descriptor` eller en callable (objekt som är "
"både och, som vanliga funktioner, hanteras som descriptors)."

#: ../../library/functools.rst:356
msgid ""
"When *func* is a descriptor (such as a normal Python function, :func:"
"`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another "
"instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""

#: ../../library/functools.rst:362
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as "
"a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the :class:"
"`partialmethod` constructor."
msgstr ""
"När *func* är en non-descriptor callable, skapas en lämplig bunden metod "
"dynamiskt. Detta beter sig som en vanlig Python-funktion när den används som "
"en metod: argumentet *self* kommer att infogas som det första positionella "
"argumentet, till och med före de *args* och *keywords* som anges i :class:"
"`partialmethod`-konstruktören."

#: ../../library/functools.rst:393
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item, "
"the first item is returned."
msgstr ""

#: ../../library/functools.rst:402
msgid "Roughly equivalent to::"
msgstr "Ungefär motsvarande::"

#: ../../library/functools.rst:414
msgid ""
"See :func:`itertools.accumulate` for an iterator that yields all "
"intermediate values."
msgstr ""
"Se :func:`itertools.accumulate` för en iterator som ger alla mellanliggande "
"värden."

#: ../../library/functools.rst:419
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"Omvandla en funktion till en :term:`single-dispatch <single dispatch>` :term:"
"`generisk funktion`."

#: ../../library/functools.rst:422
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. When defining a function using ``@singledispatch``, note that the "
"dispatch happens on the type of the first argument::"
msgstr ""
"För att definiera en generisk funktion, dekorera den med dekoratorn "
"``@singledispatch``. När du definierar en funktion med hjälp av "
"``@singledispatch``, observera att dispatch sker på typen av det första "
"argumentet::"

#: ../../library/functools.rst:433
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function, which can be used as a decorator.  For "
"functions annotated with types, the decorator will infer the type of the "
"first argument automatically::"
msgstr ""

#: ../../library/functools.rst:451
msgid ":data:`types.UnionType` and :data:`typing.Union` can also be used::"
msgstr ""

#: ../../library/functools.rst:468
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr ""
"För kod som inte använder typannoteringar kan det lämpliga typargumentet "
"skickas explicit till själva dekoratorn::"

#: ../../library/functools.rst:479
msgid ""
"To enable registering :term:`lambdas<lambda>` and pre-existing functions, "
"the :func:`register` attribute can also be used in a functional form::"
msgstr ""

#: ../../library/functools.rst:487
msgid ""
"The :func:`register` attribute returns the undecorated function. This "
"enables decorator stacking, :mod:`pickling<pickle>`, and the creation of "
"unit tests for each variant independently::"
msgstr ""

#: ../../library/functools.rst:501
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr ""
"När den generiska funktionen anropas dispatchas den utifrån typen av det "
"första argumentet::"

#: ../../library/functools.rst:521
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original "
"function decorated with ``@singledispatch`` is registered for the base :"
"class:`object` type, which means it is used if no better implementation is "
"found."
msgstr ""
"Om det inte finns någon registrerad implementation för en viss typ används "
"dess metodupplösningsordning för att hitta en mer generisk implementation. "
"Den ursprungliga funktionen dekorerad med ``@singledispatch`` är registrerad "
"för bastypen :class:`object`, vilket innebär att den används om ingen bättre "
"implementation hittas."

#: ../../library/functools.rst:527
msgid ""
"If an implementation is registered to an :term:`abstract base class`, "
"virtual subclasses of the base class will be dispatched to that "
"implementation::"
msgstr ""
"Om en implementation är registrerad för en :term:`abstrakt basklass`, kommer "
"virtuella subklasser av basklassen att skickas till denna implementation::"

#: ../../library/functools.rst:542
msgid ""
"To check which implementation the generic function will choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr ""
"För att kontrollera vilken implementering den generiska funktionen kommer "
"att välja för en viss typ, använd attributet ``dispatch()``::"

#: ../../library/functools.rst:550
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr ""
"För att få tillgång till alla registrerade implementationer, använd det "
"skrivskyddade attributet ``registry``::"

#: ../../library/functools.rst:564
msgid "The :func:`register` attribute now supports using type annotations."
msgstr ""

#: ../../library/functools.rst:567
msgid ""
"The :func:`register` attribute now supports :data:`types.UnionType` and :"
"data:`typing.Union` as type annotations."
msgstr ""

#: ../../library/functools.rst:574
msgid ""
"Transform a method into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"Omvandla en metod till en :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."

#: ../../library/functools.rst:577
msgid ""
"To define a generic method, decorate it with the ``@singledispatchmethod`` "
"decorator. When defining a function using ``@singledispatchmethod``, note "
"that the dispatch happens on the type of the first non-*self* or non-*cls* "
"argument::"
msgstr ""
"För att definiera en generisk metod, dekorera den med dekoratorn "
"``@singledispatchmethod``. När du definierar en funktion med hjälp av "
"``@singledispatchmethod``, observera att dispatch sker på typen av det "
"första argumentet som inte är *self* eller *cls*::"

#: ../../library/functools.rst:595
msgid ""
"``@singledispatchmethod`` supports nesting with other decorators such as :"
"func:`@classmethod<classmethod>`. Note that to allow for ``dispatcher."
"register``, ``singledispatchmethod`` must be the *outer most* decorator. "
"Here is the ``Negator`` class with the ``neg`` methods bound to the class, "
"rather than an instance of the class::"
msgstr ""
"``@singledispatchmethod`` stöder nestning med andra dekoratorer som :func:"
"`@classmethod<classmethod>`. Notera att för att tillåta ``dispatcher."
"register`` måste ``singledispatchmethod`` vara den *yttersta* dekoratorn. "
"Här är ``Negator`` klassen med ``neg`` metoderna bundna till klassen, "
"snarare än en instans av klassen::"

#: ../../library/functools.rst:617
msgid ""
"The same pattern can be used for other similar decorators: :func:"
"`@staticmethod<staticmethod>`, :func:`@abstractmethod<abc.abstractmethod>`, "
"and others."
msgstr ""
"Samma mönster kan användas för andra liknande dekoratorer: :func:"
"`@staticmethod<staticmethod>`, :func:`@abstractmethod<abc.abstractmethod>`, "
"och andra."

#: ../../library/functools.rst:626
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""

#: ../../library/functools.rst:636
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""
"För att tillåta åtkomst till originalfunktionen för introspektion och andra "
"ändamål (t.ex. kringgå en cachningsdekorator som :func:`lru_cache`), lägger "
"denna funktion automatiskt till ett ``__wrapped__``-attribut till omslaget "
"som refererar till den funktion som omslaget avser."

#: ../../library/functools.rst:641
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"Den här funktionen är främst avsedd att användas i :term:`decorator`-"
"funktioner som omsluter den dekorerade funktionen och returnerar omslaget. "
"Om omslutningsfunktionen inte uppdateras kommer metadata för den returnerade "
"funktionen att återspegla omslutningsdefinitionen snarare än den "
"ursprungliga funktionsdefinitionen, vilket vanligtvis inte är till någon "
"större hjälp."

#: ../../library/functools.rst:647
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object "
"being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""
":func:`update_wrapper` kan användas med andra anropbara objekt än "
"funktioner. Alla attribut som namnges i *assigned* eller *updated* som "
"saknas från objektet som omsluts ignoreras (dvs. denna funktion kommer inte "
"att försöka ställa in dem på omslutningsfunktionen). :exc:`AttributeError` "
"utlöses fortfarande om omslutningsfunktionen själv saknar några attribut som "
"namnges i *updated*."

#: ../../library/functools.rst:653
msgid ""
"The ``__wrapped__`` attribute is now automatically added. The "
"``__annotations__`` attribute is now copied by default. Missing attributes "
"no longer trigger an :exc:`AttributeError`."
msgstr ""

#: ../../library/functools.rst:658
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see :issue:"
"`17482`)"
msgstr ""
"Attributet ``__wrapped__`` hänvisar nu alltid till den inkapslade "
"funktionen, även om den funktionen definierade attributet ``__wrapped__``. "
"(se :issue:`17482`)"

#: ../../library/functools.rst:666
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"Detta är en bekvämlighetsfunktion för att anropa :func:`update_wrapper` som "
"en funktionsdekorator när man definierar en omslagsfunktion.  Den är "
"likvärdig med ``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. Till exempel::"

#: ../../library/functools.rst:692
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""

#: ../../library/functools.rst:700
msgid ":class:`partial` Objects"
msgstr ":class:`partial` Objekt"

#: ../../library/functools.rst:702
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""
":class:`partial`-objekt är anropsbara objekt som skapas av :func:`partial`. "
"De har tre skrivskyddade attribut:"

#: ../../library/functools.rst:708
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""
"Ett anropsbart objekt eller en funktion.  Anrop till objektet :class:"
"`partial` kommer att vidarebefordras till :attr:`func` med nya argument och "
"nyckelord."

#: ../../library/functools.rst:714
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""
"De positionella argument längst till vänster som kommer att läggas till de "
"positionella argument som anges i ett :class:`partial`-objektanrop."

#: ../../library/functools.rst:720
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""
"De nyckelordsargument som kommer att anges när objektet :class:`partial` "
"anropas."

#: ../../library/functools.rst:723
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referenceable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes are not created automatically.  Also, :class:"
"`partial` objects defined in classes behave like static methods and do not "
"transform into bound methods during instance attribute look-up."
msgstr ""
