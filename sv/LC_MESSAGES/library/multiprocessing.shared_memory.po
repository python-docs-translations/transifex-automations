# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/multiprocessing.shared_memory.rst:2
msgid ""
":mod:`multiprocessing.shared_memory` --- Shared memory for direct access "
"across processes"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/shared_memory.py`"
msgstr "**Källkod:** :source:`Lib/multiprocessing/shared_memory.py`"

#: ../../library/multiprocessing.shared_memory.rst:18
msgid ""
"This module provides a class, :class:`SharedMemory`, for the allocation and "
"management of shared memory to be accessed by one or more processes on a "
"multicore or symmetric multiprocessor (SMP) machine.  To assist with the "
"life-cycle management of shared memory especially across distinct processes,"
" a :class:`~multiprocessing.managers.BaseManager` subclass, "
":class:`~multiprocessing.managers.SharedMemoryManager`, is also provided in "
"the :mod:`multiprocessing.managers` module."
msgstr ""
"Den här modulen innehåller en klass, :class:`SharedMemory`, för allokering "
"och hantering av delat minne som kan användas av en eller flera processer på"
" en flerkärnig eller symmetrisk multiprocessormaskin (SMP).  För att "
"underlätta livscykelhanteringen av delat minne, särskilt mellan olika "
"processer, finns också en underklass till "
":class:`~multiprocessing.managers.BaseManager`, "
":class:`~multiprocessing.managers.SharedMemoryManager`, i modulen "
":mod:`multiprocessing.managers`."

#: ../../library/multiprocessing.shared_memory.rst:26
msgid ""
"In this module, shared memory refers to \"POSIX style\" shared memory blocks"
" (though is not necessarily implemented explicitly as such) and does not "
"refer to \"distributed shared memory\".  This style of shared memory permits"
" distinct processes to potentially read and write to a common (or shared) "
"region of volatile memory.  Processes are conventionally limited to only "
"have access to their own process memory space but shared memory permits the "
"sharing of data between processes, avoiding the need to instead send "
"messages between processes containing that data.  Sharing data directly via "
"memory can provide significant performance benefits compared to sharing data"
" via disk or socket or other communications requiring the "
"serialization/deserialization and copying of data."
msgstr ""
"I den här modulen avser delat minne delade minnesblock i POSIX-stil (även om"
" de inte nödvändigtvis implementeras explicit som sådana) och inte "
"\"distribuerat delat minne\".  Denna typ av delat minne gör det möjligt för "
"olika processer att potentiellt läsa och skriva till en gemensam (eller "
"delad) region i det flyktiga minnet.  Processer är normalt begränsade till "
"att bara ha tillgång till sitt eget processminnesutrymme, men med delat "
"minne kan data delas mellan processer, vilket gör att man inte behöver "
"skicka meddelanden mellan processerna som innehåller dessa data.  Att dela "
"data direkt via minnet kan ge betydande prestandafördelar jämfört med att "
"dela data via disk eller socket eller annan kommunikation som kräver "
"serialisering/deserialisering och kopiering av data."

#: ../../library/multiprocessing.shared_memory.rst:41
msgid ""
"Create an instance of the :class:`!SharedMemory` class for either creating a"
" new shared memory block or attaching to an existing shared memory block.  "
"Each shared memory block is assigned a unique name. In this way, one process"
" can create a shared memory block with a particular name and a different "
"process can attach to that same shared memory block using that same name."
msgstr ""
"Skapa en instans av :class:`!SharedMemory`\\-klassen för att antingen skapa "
"ett nytt delat minnesblock eller koppla till ett befintligt delat "
"minnesblock.  Varje delat minnesblock tilldelas ett unikt namn. På så sätt "
"kan en process skapa ett shared memory-block med ett visst namn och en annan"
" process kan koppla till samma shared memory-block med samma namn."

#: ../../library/multiprocessing.shared_memory.rst:48
msgid ""
"As a resource for sharing data across processes, shared memory blocks may "
"outlive the original process that created them.  When one process no longer "
"needs access to a shared memory block that might still be needed by other "
"processes, the :meth:`close` method should be called. When a shared memory "
"block is no longer needed by any process, the :meth:`unlink` method should "
"be called to ensure proper cleanup."
msgstr ""
"Som en resurs för att dela data mellan processer kan delade minnesblock "
"överleva den ursprungliga processen som skapade dem.  När en process inte "
"längre behöver tillgång till ett delat minnesblock som fortfarande kan "
"behövas av andra processer, bör metoden :meth:`close` anropas. När ett delat"
" minnesblock inte längre behövs av någon process bör metoden :meth:`unlink` "
"anropas för att säkerställa korrekt upprensning."

#: ../../library/multiprocessing.shared_memory.rst:0
msgid "Parameters"
msgstr "Parametrar"

#: ../../library/multiprocessing.shared_memory.rst:55
msgid ""
"The unique name for the requested shared memory, specified as a string. When"
" creating a new shared memory block, if ``None`` (the default) is supplied "
"for the name, a novel name will be generated."
msgstr ""
"Det unika namnet för det begärda delade minnet, angivet som en sträng. Om "
"``None`` (standard) anges för namnet när ett nytt block med delat minne "
"skapas, kommer ett nytt namn att genereras."

#: ../../library/multiprocessing.shared_memory.rst:61
msgid ""
"Control whether a new shared memory block is created (``True``) or an "
"existing shared memory block is attached (``False``)."
msgstr ""
"Styr om ett nytt delat minnesblock ska skapas (``True``) eller om ett "
"befintligt delat minnesblock ska kopplas till (``False``)."

#: ../../library/multiprocessing.shared_memory.rst:65
msgid ""
"The requested number of bytes when creating a new shared memory block. "
"Because some platforms choose to allocate chunks of memory based upon that "
"platform's memory page size, the exact size of the shared memory block may "
"be larger or equal to the size requested. When attaching to an existing "
"shared memory block, the *size* parameter is ignored."
msgstr ""
"Det begärda antalet byte när ett nytt delat minnesblock skapas. Eftersom "
"vissa plattformar väljer att allokera minnesbitar baserat på plattformens "
"minnessidstorlek, kan den exakta storleken på det delade minnesblocket vara "
"större eller lika med den begärda storleken. När du ansluter till ett "
"befintligt delat minnesblock ignoreras parametern *size*."

#: ../../library/multiprocessing.shared_memory.rst:75
msgid ""
"Close access to the shared memory from this instance.  In order to ensure "
"proper cleanup of resources, all instances should call :meth:`close` once "
"the instance is no longer needed.  Note that calling :meth:`!close` does not"
" cause the shared memory block itself to be destroyed."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:83
msgid ""
"Request that the underlying shared memory block be destroyed.  In order to "
"ensure proper cleanup of resources, :meth:`unlink` should be called once "
"(and only once) across all processes which have need for the shared memory "
"block.  After requesting its destruction, a shared memory block may or may "
"not be immediately destroyed and this behavior may differ across platforms."
"  Attempts to access data inside the shared memory block after "
":meth:`!unlink` has been called may result in memory access errors.  Note: "
"the last process relinquishing its hold on a shared memory block may call "
":meth:`!unlink` and :meth:`close` in either order."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:96
msgid "A memoryview of contents of the shared memory block."
msgstr "En minnesvy av innehållet i det delade minnesblocket."

#: ../../library/multiprocessing.shared_memory.rst:100
msgid "Read-only access to the unique name of the shared memory block."
msgstr ""
"Skrivskyddad åtkomst till det unika namnet på det delade minnesblocket."

#: ../../library/multiprocessing.shared_memory.rst:104
msgid "Read-only access to size in bytes of the shared memory block."
msgstr ""
"Skrivskyddad åtkomst till storleken i bytes på det delade minnesblocket."

#: ../../library/multiprocessing.shared_memory.rst:107
msgid ""
"The following example demonstrates low-level use of :class:`SharedMemory` "
"instances::"
msgstr ""
"Följande exempel demonstrerar lågnivåanvändning av "
":class:`SharedMemory`\\-instanser::"

#: ../../library/multiprocessing.shared_memory.rst:133
msgid ""
"The following example demonstrates a practical use of the "
":class:`SharedMemory` class with `NumPy arrays <https://numpy.org/>`_, "
"accessing the same :class:`!numpy.ndarray` from two distinct Python shells:"
msgstr ""
"Följande exempel visar en praktisk användning av klassen "
":class:`SharedMemory` med `NumPy matriser <https://numpy.org/>`_, med "
"åtkomst till samma :class:`!numpy.ndarray` från två olika Python-skal:"

#: ../../library/multiprocessing.shared_memory.rst:187
msgid ""
"A subclass of :class:`multiprocessing.managers.BaseManager` which can be "
"used for the management of shared memory blocks across processes."
msgstr ""
"En underklass till :class:`multiprocessing.managers.BaseManager` som kan "
"användas för hantering av delade minnesblock mellan processer."

#: ../../library/multiprocessing.shared_memory.rst:190
msgid ""
"A call to :meth:`~multiprocessing.managers.BaseManager.start` on a "
":class:`!SharedMemoryManager` instance causes a new process to be started. "
"This new process's sole purpose is to manage the life cycle of all shared "
"memory blocks created through it.  To trigger the release of all shared "
"memory blocks managed by that process, call "
":meth:`~multiprocessing.managers.BaseManager.shutdown` on the instance. This"
" triggers a :meth:`~multiprocessing.shared_memory.SharedMemory.unlink` call "
"on all of the :class:`SharedMemory` objects managed by that process and then"
" stops the process itself.  By creating :class:`!SharedMemory` instances "
"through a :class:`!SharedMemoryManager`, we avoid the need to manually track"
" and trigger the freeing of shared memory resources."
msgstr ""
"Ett anrop till :meth:`~multiprocessing.managers.BaseManager.start` på en "
"instans av :class:`!SharedMemoryManager` gör att en ny process startas. Den "
"nya processens enda syfte är att hantera livscykeln för alla delade "
"minnesblock som skapas genom den.  För att utlösa frisläppandet av alla "
"delade minnesblock som hanteras av den processen, anropa "
":meth:`~multiprocessing.managers.BaseManager.shutdown` på instansen. Detta "
"utlöser ett "
":meth:`~multiprocessing.shared_memory.SharedMemory.unlink`\\-anrop på alla "
":class:`SharedMemory`\\-objekt som hanteras av den processen och stoppar "
"sedan själva processen.  Genom att skapa :class:`!SharedMemory`\\-instanser "
"genom en :class:`!SharedMemoryManager` slipper vi manuellt spåra och utlösa "
"frigörandet av delade minnesresurser."

#: ../../library/multiprocessing.shared_memory.rst:202
msgid ""
"This class provides methods for creating and returning :class:`SharedMemory`"
" instances and for creating a list-like object (:class:`ShareableList`) "
"backed by shared memory."
msgstr ""
"Den här klassen innehåller metoder för att skapa och returnera "
":class:`SharedMemory`\\-instanser och för att skapa ett listliknande objekt "
"(:class:`ShareableList`) som stöds av delat minne."

#: ../../library/multiprocessing.shared_memory.rst:206
msgid ""
"Refer to :class:`~multiprocessing.managers.BaseManager` for a description of"
" the inherited *address* and *authkey* optional input arguments and how they"
" may be used to connect to an existing :class:`!SharedMemoryManager` service"
" from other processes."
msgstr ""
"Se :class:`~multiprocessing.managers.BaseManager` för en beskrivning av de "
"ärvda valfria inmatningsargumenten *address* och *authkey* och hur de kan "
"användas för att ansluta till en befintlig tjänst "
":class:`!SharedMemoryManager` från andra processer."

#: ../../library/multiprocessing.shared_memory.rst:213
msgid ""
"Create and return a new :class:`SharedMemory` object with the specified "
"*size* in bytes."
msgstr ""
"Skapar och returnerar ett nytt :class:`SharedMemory`\\-objekt med den "
"angivna *storleken* i byte."

#: ../../library/multiprocessing.shared_memory.rst:218
msgid ""
"Create and return a new :class:`ShareableList` object, initialized by the "
"values from the input *sequence*."
msgstr ""
"Skapar och returnerar ett nytt :class:`ShareableList`\\-objekt, initierat "
"med värdena från indatans *sekvens*."

#: ../../library/multiprocessing.shared_memory.rst:222
msgid ""
"The following example demonstrates the basic mechanisms of a "
":class:`~multiprocessing.managers.SharedMemoryManager`:"
msgstr ""
"Följande exempel visar de grundläggande mekanismerna i en "
":class:`~multiprocessing.managers.SharedMemoryManager`:"

#: ../../library/multiprocessing.shared_memory.rst:240
msgid ""
"The following example depicts a potentially more convenient pattern for "
"using :class:`~multiprocessing.managers.SharedMemoryManager` objects via the"
" :keyword:`with` statement to ensure that all shared memory blocks are "
"released after they are no longer needed:"
msgstr ""
"I följande exempel visas ett potentiellt mer praktiskt mönster för "
"användning av "
":class:`~multiprocessing.managers.SharedMemoryManager`\\-objekt via "
":keyword:`with`\\-satsen för att säkerställa att alla delade minnesblock "
"frigörs när de inte längre behövs:"

#: ../../library/multiprocessing.shared_memory.rst:259
msgid ""
"When using a :class:`~multiprocessing.managers.SharedMemoryManager` in a "
":keyword:`with` statement, the shared memory blocks created using that "
"manager are all released when the :keyword:`!with` statement's code block "
"finishes execution."
msgstr ""
"När du använder en :class:`~multiprocessing.managers.SharedMemoryManager` i "
"en :keyword:`with`\\-sats, frigörs alla delade minnesblock som skapats med "
"den hanteraren när :keyword:`!with`\\-satsens kodblock är färdigt exekverat."

#: ../../library/multiprocessing.shared_memory.rst:267
msgid ""
"Provide a mutable list-like object where all values stored within are stored"
" in a shared memory block. This constrains storable values to the following "
"built-in data types:"
msgstr ""
"Tillhandahåller ett föränderligt listliknande objekt där alla värden som "
"lagras i objektet lagras i ett delat minnesblock. Detta begränsar "
"lagringsbara värden till följande inbyggda datatyper:"

#: ../../library/multiprocessing.shared_memory.rst:271
msgid ":class:`int` (signed 64-bit)"
msgstr ":class:`int` (signerad 64-bitars)"

#: ../../library/multiprocessing.shared_memory.rst:272
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/multiprocessing.shared_memory.rst:273
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/multiprocessing.shared_memory.rst:274
msgid ":class:`str` (less than 10M bytes each when encoded as UTF-8)"
msgstr ":class:`str` (mindre än 10M byte vardera när de kodas som UTF-8)"

#: ../../library/multiprocessing.shared_memory.rst:275
msgid ":class:`bytes` (less than 10M bytes each)"
msgstr ":class:`bytes` (mindre än 10M bytes vardera)"

#: ../../library/multiprocessing.shared_memory.rst:276
msgid "``None``"
msgstr "``Ingen``"

#: ../../library/multiprocessing.shared_memory.rst:278
msgid ""
"It also notably differs from the built-in :class:`list` type in that these "
"lists can not change their overall length (i.e. no :meth:`!append`, "
":meth:`!insert`, etc.) and do not support the dynamic creation of new "
":class:`!ShareableList` instances via slicing."
msgstr ""
"Den skiljer sig också markant från den inbyggda :class:`list`\\-typen genom "
"att dessa listor inte kan ändra sin totala längd (dvs. ingen "
":meth:`!append`, :meth:`!insert`, etc.) och inte stöder det dynamiska "
"skapandet av nya :class:`!ShareableList`\\-instanser via slicing."

#: ../../library/multiprocessing.shared_memory.rst:284
msgid ""
"*sequence* is used in populating a new :class:`!ShareableList` full of "
"values. Set to ``None`` to instead attach to an already existing "
":class:`!ShareableList` by its unique shared memory name."
msgstr ""
"*sequence* används för att fylla en ny :class:`!ShareableList` full med "
"värden. Sätt till ``None`` för att istället koppla till en redan existerande"
" :class:`!ShareableList` med dess unika namn i det delade minnet."

#: ../../library/multiprocessing.shared_memory.rst:288
msgid ""
"*name* is the unique name for the requested shared memory, as described in "
"the definition for :class:`SharedMemory`.  When attaching to an existing "
":class:`!ShareableList`, specify its shared memory block's unique name while"
" leaving *sequence* set to ``None``."
msgstr ""
"*name* är det unika namnet för det begärda delade minnet, enligt "
"beskrivningen i definitionen för :class:`SharedMemory`.  När du ansluter "
"till en befintlig :class:`!ShareableList`, ange det unika namnet på det "
"delade minnesblocket medan *sequence* är satt till ``None``."

#: ../../library/multiprocessing.shared_memory.rst:295
msgid ""
"A known issue exists for :class:`bytes` and :class:`str` values. If they end"
" with ``\\x00`` nul bytes or characters, those may be *silently stripped* "
"when fetching them by index from the :class:`!ShareableList`. This "
"``.rstrip(b'\\x00')`` behavior is considered a bug and may go away in the "
"future. See :gh:`106939`."
msgstr ""
"Ett känt problem finns för :class:`bytes` och :class:`str`\\-värden. Om de "
"slutar med ``\\x00`` nollbytes eller tecken, kan dessa *tyst avlägsnas* när "
"de hämtas med index från :class:`!ShareableList`. Detta "
"``.rstrip(b'\\x00')``\\-beteende anses vara en bugg och kan försvinna i "
"framtiden. Se :gh:`106939`."

#: ../../library/multiprocessing.shared_memory.rst:301
msgid ""
"For applications where rstripping of trailing nulls is a problem, work "
"around it by always unconditionally appending an extra non-0 byte to the end"
" of such values when storing and unconditionally removing it when fetching:"
msgstr ""
"För applikationer där rstripping av efterföljande nollor är ett problem, kan"
" du kringgå det genom att alltid ovillkorligen lägga till en extra "
"icke-0-byte i slutet av sådana värden vid lagring och ovillkorligen ta bort "
"den vid hämtning:"

#: ../../library/multiprocessing.shared_memory.rst:324
msgid "Return the number of occurrences of *value*."
msgstr "Returnera antalet förekomster av *value*."

#: ../../library/multiprocessing.shared_memory.rst:328
msgid ""
"Return first index position of *value*. Raise :exc:`ValueError` if *value* "
"is not present."
msgstr ""
"Returnerar första indexpositionen för *value*. Utlöser :exc:`ValueError` om "
"*value* inte finns."

#: ../../library/multiprocessing.shared_memory.rst:333
msgid ""
"Read-only attribute containing the :mod:`struct` packing format used by all "
"currently stored values."
msgstr ""
"Skrivskyddat attribut som innehåller förpackningsformatet :mod:`struct` som "
"används av alla aktuella lagrade värden."

#: ../../library/multiprocessing.shared_memory.rst:338
msgid "The :class:`SharedMemory` instance where the values are stored."
msgstr "Den :class:`SharedMemory`\\-instans där värdena lagras."

#: ../../library/multiprocessing.shared_memory.rst:341
msgid ""
"The following example demonstrates basic use of a :class:`ShareableList` "
"instance:"
msgstr ""
"Följande exempel visar grundläggande användning av en "
":class:`ShareableList`\\-instans:"

#: ../../library/multiprocessing.shared_memory.rst:374
msgid ""
"The following example depicts how one, two, or many processes may access the"
" same :class:`ShareableList` by supplying the name of the shared memory "
"block behind it:"
msgstr ""
"Följande exempel visar hur en, två eller många processer kan komma åt samma "
":class:`ShareableList` genom att ange namnet på det bakomliggande delade "
"minnesblocket:"

#: ../../library/multiprocessing.shared_memory.rst:389
msgid ""
"The following examples demonstrates that :class:`ShareableList` (and "
"underlying :class:`SharedMemory`) objects can be pickled and unpickled if "
"needed. Note, that it will still be the same shared object. This happens, "
"because the deserialized object has the same unique name and is just "
"attached to an existing object with the same name (if the object is still "
"alive):"
msgstr ""
"Följande exempel visar att :class:`ShareableList` (och underliggande "
":class:`SharedMemory`) objekt kan picklas och unpicklas vid behov. Notera, "
"att det fortfarande kommer att vara samma delade objekt. Detta händer "
"eftersom det deserialiserade objektet har samma unika namn och bara är "
"kopplat till ett befintligt objekt med samma namn (om objektet fortfarande "
"är vid liv):"

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Shared Memory"
msgstr "Delat minne"

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "POSIX Shared Memory"
msgstr "POSIX delat minne"

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Named Shared Memory"
msgstr "Namngivet delat minne"
