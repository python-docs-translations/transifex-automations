# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/contextlib.rst:2
msgid ""
":mod:`!contextlib` --- Utilities for :keyword:`!with`\\ -statement contexts"
msgstr ":mod:`!contextlib` --- Verktyg för :keyword:`!with` -satskontexter"

#: ../../library/contextlib.rst:7
msgid "**Source code:** :source:`Lib/contextlib.py`"
msgstr "**Källkod:** :source:`Lib/contextlib.py`"

#: ../../library/contextlib.rst:11
msgid ""
"This module provides utilities for common tasks involving the :keyword:"
"`with` statement. For more information see also :ref:`typecontextmanager` "
"and :ref:`context-managers`."
msgstr ""
"Denna modul tillhandahåller verktyg för vanliga uppgifter som involverar :"
"keyword:`with`\\-satsen. För mer information se även :ref:"
"`typecontextmanager` och :ref:`context-managers`."

#: ../../library/contextlib.rst:17
msgid "Utilities"
msgstr "Verktyg"

#: ../../library/contextlib.rst:19
msgid "Functions and classes provided:"
msgstr "Funktioner och klasser som tillhandahålls:"

#: ../../library/contextlib.rst:23
msgid ""
"An :term:`abstract base class` for classes that implement :meth:`object."
"__enter__` and :meth:`object.__exit__`. A default implementation for :meth:"
"`object.__enter__` is provided which returns ``self`` while :meth:`object."
"__exit__` is an abstract method which by default returns ``None``. See also "
"the definition of :ref:`typecontextmanager`."
msgstr ""
"En :term:`abstract base class` för klasser som implementerar :meth:`object."
"__enter__` och :meth:`object.__exit__`. En standard implementation för :meth:"
"`object.__enter__` tillhandahålls som returnerar ``self`` medan :meth:"
"`object.__exit__` är en abstrakt metod som som standard returnerar ``None``. "
"Se även definitionen av :ref:`typecontextmanager`."

#: ../../library/contextlib.rst:34
msgid ""
"An :term:`abstract base class` for classes that implement :meth:`object."
"__aenter__` and :meth:`object.__aexit__`. A default implementation for :meth:"
"`object.__aenter__` is provided which returns ``self`` while :meth:`object."
"__aexit__` is an abstract method which by default returns ``None``. See also "
"the definition of :ref:`async-context-managers`."
msgstr ""
"En :term:`abstract base class` för klasser som implementerar :meth:`object."
"__aenter__` och :meth:`object.__aexit__`. En standard implementation för :"
"meth:`object.__aenter__` tillhandahålls som returnerar ``self`` medan :meth:"
"`object.__aexit__` är en abstrakt metod som som standard returnerar "
"``None``. Se även definitionen av :ref:`async-context-managers`."

#: ../../library/contextlib.rst:46
msgid ""
"This function is a :term:`decorator` that can be used to define a factory "
"function for :keyword:`with` statement context managers, without needing to "
"create a class or separate :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""

#: ../../library/contextlib.rst:50
msgid ""
"While many objects natively support use in with statements, sometimes a "
"resource needs to be managed that isn't a context manager in its own right, "
"and doesn't implement a ``close()`` method for use with ``contextlib."
"closing``"
msgstr ""

#: ../../library/contextlib.rst:54
msgid ""
"An abstract example would be the following to ensure correct resource "
"management::"
msgstr ""
"Ett abstrakt exempel skulle kunna vara följande för att säkerställa korrekt "
"resurshantering::"

#: ../../library/contextlib.rst:69
msgid "The function can then be used like this::"
msgstr "Funktionen kan sedan användas på följande sätt::"

#: ../../library/contextlib.rst:75
msgid ""
"The function being decorated must return a :term:`generator`-iterator when "
"called. This iterator must yield exactly one value, which will be bound to "
"the targets in the :keyword:`with` statement's :keyword:`!as` clause, if any."
msgstr ""
"Den funktion som dekoreras måste returnera en :term:`generator`\\-iterator "
"när den anropas. Denna iterator måste ge exakt ett värde, som kommer att "
"bindas till målen i :keyword:`with`\\-satsens :keyword:`!as`\\-klausul, om "
"någon."

#: ../../library/contextlib.rst:79
msgid ""
"At the point where the generator yields, the block nested in the :keyword:"
"`with` statement is executed.  The generator is then resumed after the block "
"is exited. If an unhandled exception occurs in the block, it is reraised "
"inside the generator at the point where the yield occurred.  Thus, you can "
"use a :keyword:`try`...\\ :keyword:`except`...\\ :keyword:`finally` "
"statement to trap the error (if any), or ensure that some cleanup takes "
"place. If an exception is trapped merely in order to log it or to perform "
"some action (rather than to suppress it entirely), the generator must "
"reraise that exception. Otherwise the generator context manager will "
"indicate to the :keyword:`!with` statement that the exception has been "
"handled, and execution will resume with the statement immediately following "
"the :keyword:`!with` statement."
msgstr ""
"Vid den punkt där generatorn ger upp, körs det block som är inbäddat i :"
"keyword:`with`\\-satsen.  Generatorn återupptas sedan efter att blocket har "
"avslutats. Om ett ohanterat undantag inträffar i blocket, återupprepas det "
"inuti generatorn vid den punkt där yield inträffade.  Du kan alltså använda "
"en :keyword:`try`...\\ :keyword:`except`...\\ :keyword:`finally`\\-sats för "
"att fånga upp felet (om det finns något) eller se till att en viss "
"upprensning sker. Om ett undantag fångas enbart för att logga det eller för "
"att utföra någon åtgärd (snarare än att undertrycka det helt), måste "
"generatorn göra om undantaget. I annat fall kommer generatorns "
"kontexthanterare att indikera för :keyword:`!with`\\-satsen att undantaget "
"har hanterats, och exekveringen kommer att återupptas med den sats som "
"följer omedelbart efter :keyword:`!with`\\-satsen."

#: ../../library/contextlib.rst:91
msgid ""
":func:`contextmanager` uses :class:`ContextDecorator` so the context "
"managers it creates can be used as decorators as well as in :keyword:`with` "
"statements. When used as a decorator, a new generator instance is implicitly "
"created on each function call (this allows the otherwise \"one-shot\" "
"context managers created by :func:`contextmanager` to meet the requirement "
"that context managers support multiple invocations in order to be used as "
"decorators)."
msgstr ""
":func:`contextmanager` använder :class:`ContextDecorator` så att de "
"kontexthanterare som skapas kan användas som dekoratorer såväl som i :"
"keyword:`with`\\-satser. När den används som en dekorator skapas en ny "
"generatorinstans implicit vid varje funktionsanrop (detta gör att de annars "
"\"enstaka\" kontexthanterare som skapas av :func:`contextmanager` uppfyller "
"kravet på att kontexthanterare stöder flera anrop för att kunna användas som "
"dekoratorer)."

#: ../../library/contextlib.rst:98
msgid "Use of :class:`ContextDecorator`."
msgstr "Användning av :class:`ContextDecorator`."

#: ../../library/contextlib.rst:104
msgid ""
"Similar to :func:`~contextlib.contextmanager`, but creates an :ref:"
"`asynchronous context manager <async-context-managers>`."
msgstr ""
"Liknar :func:`~contextlib.contextmanager`, men skapar en :ref:`asynkron "
"kontexthanterare <async-context-managers>`."

#: ../../library/contextlib.rst:107
msgid ""
"This function is a :term:`decorator` that can be used to define a factory "
"function for :keyword:`async with` statement asynchronous context managers, "
"without needing to create a class or separate :meth:`__aenter__` and :meth:"
"`__aexit__` methods. It must be applied to an :term:`asynchronous generator` "
"function."
msgstr ""

#: ../../library/contextlib.rst:113
msgid "A simple example::"
msgstr "Ett enkelt exempel::"

#: ../../library/contextlib.rst:131
msgid ""
"Context managers defined with :func:`asynccontextmanager` can be used either "
"as decorators or with :keyword:`async with` statements::"
msgstr ""
"Kontexthanterare som definieras med :func:`asynccontextmanager` kan användas "
"antingen som dekoratorer eller med :keyword:`async with`\\-satser::"

#: ../../library/contextlib.rst:149
msgid ""
"When used as a decorator, a new generator instance is implicitly created on "
"each function call. This allows the otherwise \"one-shot\" context managers "
"created by :func:`asynccontextmanager` to meet the requirement that context "
"managers support multiple invocations in order to be used as decorators."
msgstr ""
"När den används som en dekorator skapas en ny generatorinstans implicit vid "
"varje funktionsanrop. Detta gör att de annars \"one-shot\" kontexthanterare "
"som skapas av :func:`asynccontextmanager` uppfyller kravet på att "
"kontexthanterare stöder flera anrop för att kunna användas som dekoratorer."

#: ../../library/contextlib.rst:154
msgid ""
"Async context managers created with :func:`asynccontextmanager` can be used "
"as decorators."
msgstr ""
"Asynkrona kontexthanterare som skapats med :func:`asynccontextmanager` kan "
"användas som dekoratorer."

#: ../../library/contextlib.rst:161
msgid ""
"Return a context manager that closes *thing* upon completion of the block.  "
"This is basically equivalent to::"
msgstr ""
"Returnerar en kontexthanterare som stänger *något* när blocket har "
"slutförts.  Detta är i princip likvärdigt med::"

#: ../../library/contextlib.rst:173
msgid "And lets you write code like this::"
msgstr "Och låter dig skriva kod så här::"

#: ../../library/contextlib.rst:182
msgid ""
"without needing to explicitly close ``page``.  Even if an error occurs, "
"``page.close()`` will be called when the :keyword:`with` block is exited."
msgstr ""
"utan att uttryckligen behöva stänga ``page``.  Även om ett fel inträffar "
"kommer ``page.close()`` att anropas när :keyword:`with`\\-blocket avslutas."

#: ../../library/contextlib.rst:188
msgid ""
"Return an async context manager that calls the ``aclose()`` method of "
"*thing* upon completion of the block.  This is basically equivalent to::"
msgstr ""
"Returnerar en asynkron kontexthanterare som anropar ``aclose()``\\-metoden "
"för *ting* när blocket har slutförts.  Detta är i princip likvärdigt med::"

#: ../../library/contextlib.rst:200
msgid ""
"Significantly, ``aclosing()`` supports deterministic cleanup of async "
"generators when they happen to exit early by :keyword:`break` or an "
"exception.  For example::"
msgstr ""
"Det är viktigt att ``aclosing()`` stöder deterministisk rensning av async-"
"generatorer när de råkar avslutas tidigt genom :keyword:`break` eller ett "
"undantag.  Till exempel::"

#: ../../library/contextlib.rst:211
msgid ""
"This pattern ensures that the generator's async exit code is executed in the "
"same context as its iterations (so that exceptions and context variables "
"work as expected, and the exit code isn't run after the lifetime of some "
"task it depends on)."
msgstr ""
"Detta mönster säkerställer att generatorns asynkrona exitkod exekveras i "
"samma kontext som dess iterationer (så att undantag och kontextvariabler "
"fungerar som förväntat och exitkoden inte körs efter livstiden för någon "
"uppgift som den är beroende av)."

#: ../../library/contextlib.rst:223
msgid ""
"Return a context manager that returns *enter_result* from ``__enter__``, but "
"otherwise does nothing. It is intended to be used as a stand-in for an "
"optional context manager, for example::"
msgstr ""
"Returnerar en kontexthanterare som returnerar *enter_result* från "
"``__enter__``, men som i övrigt inte gör någonting. Den är avsedd att "
"användas som en ersättare för en valfri kontexthanterare, till exempel::"

#: ../../library/contextlib.rst:237
msgid "An example using *enter_result*::"
msgstr "Ett exempel på användning av *enter_result*::"

#: ../../library/contextlib.rst:250
msgid ""
"It can also be used as a stand-in for :ref:`asynchronous context managers "
"<async-context-managers>`::"
msgstr ""
"Det kan också användas som en ersättare för :ref:`asynkrona kontexthanterare "
"<async-context-managers>`::"

#: ../../library/contextlib.rst:266
msgid ":term:`asynchronous context manager` support was added."
msgstr "Stöd för :term:`asynchronous context manager` har lagts till."

#: ../../library/contextlib.rst:273
msgid ""
"Return a context manager that suppresses any of the specified exceptions if "
"they occur in the body of a :keyword:`!with` statement and then resumes "
"execution with the first statement following the end of the :keyword:`!with` "
"statement."
msgstr ""
"Returnerar en kontexthanterare som undertrycker något av de angivna "
"undantagen om de förekommer i en :keyword:`!with`\\-sats och sedan "
"återupptar exekveringen med den första satsen efter slutet av :keyword:`!"
"with`\\-satsen."

#: ../../library/contextlib.rst:278
msgid ""
"As with any other mechanism that completely suppresses exceptions, this "
"context manager should be used only to cover very specific errors where "
"silently continuing with program execution is known to be the right thing to "
"do."
msgstr ""
"Som med alla andra mekanismer som helt undertrycker undantag, bör denna "
"kontexthanterare endast användas för att täcka mycket specifika fel där det "
"är känt att det är rätt att fortsätta att exekvera programmet i tysthet."

#: ../../library/contextlib.rst:283
msgid "For example::"
msgstr "Till exempel::"

#: ../../library/contextlib.rst:293
msgid "This code is equivalent to::"
msgstr "Denna kod är likvärdig med::"

#: ../../library/contextlib.rst:305 ../../library/contextlib.rst:345
#: ../../library/contextlib.rst:355
msgid "This context manager is :ref:`reentrant <reentrant-cms>`."
msgstr "Denna kontexthanterare är :ref:`reentrant <reentrant-cms>`."

#: ../../library/contextlib.rst:312
msgid ""
"Context manager for temporarily redirecting :data:`sys.stdout` to another "
"file or file-like object."
msgstr ""
"Kontexthanterare för tillfällig omdirigering av :data:`sys.stdout` till en "
"annan fil eller ett annat filliknande objekt."

#: ../../library/contextlib.rst:315
msgid ""
"This tool adds flexibility to existing functions or classes whose output is "
"hardwired to stdout."
msgstr ""
"Detta verktyg ger flexibilitet till befintliga funktioner eller klasser vars "
"utdata är kopplad till stdout."

#: ../../library/contextlib.rst:318
msgid ""
"For example, the output of :func:`help` normally is sent to *sys.stdout*. "
"You can capture that output in a string by redirecting the output to an :"
"class:`io.StringIO` object. The replacement stream is returned from the "
"``__enter__`` method and so is available as the target of the :keyword:"
"`with` statement::"
msgstr ""
"Till exempel skickas utdata från :func:`help` normalt till *sys.stdout*. Du "
"kan fånga utdata i en sträng genom att omdirigera utdata till ett :class:`io."
"StringIO`\\-objekt. Ersättningsströmmen returneras från metoden "
"``__enter__`` och är därför tillgänglig som mål för :keyword:`with`\\-"
"satsen::"

#: ../../library/contextlib.rst:328
msgid ""
"To send the output of :func:`help` to a file on disk, redirect the output to "
"a regular file::"
msgstr ""
"För att skicka utdata från :func:`help` till en fil på disken, omdirigera "
"utdata till en vanlig fil::"

#: ../../library/contextlib.rst:335
msgid "To send the output of :func:`help` to *sys.stderr*::"
msgstr "För att skicka utdata från :func:`help` till *sys.stderr*::"

#: ../../library/contextlib.rst:340
msgid ""
"Note that the global side effect on :data:`sys.stdout` means that this "
"context manager is not suitable for use in library code and most threaded "
"applications. It also has no effect on the output of subprocesses. However, "
"it is still a useful approach for many utility scripts."
msgstr ""
"Observera att den globala bieffekten på :data:`sys.stdout` innebär att denna "
"kontexthanterare inte är lämplig att använda i bibliotekskod och de flesta "
"trådade applikationer. Den har inte heller någon effekt på utdata från "
"underprocesser. Det är dock fortfarande ett användbart tillvägagångssätt för "
"många verktygsskript."

#: ../../library/contextlib.rst:352
msgid ""
"Similar to :func:`~contextlib.redirect_stdout` but redirecting :data:`sys."
"stderr` to another file or file-like object."
msgstr ""
"Liknar :func:`~contextlib.redirect_stdout` men omdirigerar :data:`sys."
"stderr` till en annan fil eller ett annat filliknande objekt."

#: ../../library/contextlib.rst:362
msgid ""
"A base class that enables a context manager to also be used as a decorator."
msgstr ""
"En basklass som gör att en kontexthanterare också kan användas som dekorator."

#: ../../library/contextlib.rst:364
msgid ""
"Context managers inheriting from ``ContextDecorator`` have to implement "
"``__enter__`` and ``__exit__`` as normal. ``__exit__`` retains its optional "
"exception handling even when used as a decorator."
msgstr ""
"Kontexthanterare som ärver från ``ContextDecorator`` måste implementera "
"``__enter__`` och ``__exit__`` som vanligt. ``__exit__`` behåller sin "
"valfria undantagshantering även när den används som en dekorator."

#: ../../library/contextlib.rst:368
msgid ""
"``ContextDecorator`` is used by :func:`contextmanager`, so you get this "
"functionality automatically."
msgstr ""
"``ContextDecorator`` används av :func:`contextmanager`, så du får denna "
"funktionalitet automatiskt."

#: ../../library/contextlib.rst:371
msgid "Example of ``ContextDecorator``::"
msgstr "Exempel på ``ContextDecorator``::"

#: ../../library/contextlib.rst:384 ../../library/contextlib.rst:456
msgid "The class can then be used like this::"
msgstr "Klassen kan sedan användas på följande sätt::"

#: ../../library/contextlib.rst:402
msgid ""
"This change is just syntactic sugar for any construct of the following form::"
msgstr ""
"Denna ändring är bara syntaktiskt socker för alla konstruktioner av följande "
"form::"

#: ../../library/contextlib.rst:408
msgid "``ContextDecorator`` lets you instead write::"
msgstr "``ContextDecorator`` låter dig istället skriva::"

#: ../../library/contextlib.rst:414
msgid ""
"It makes it clear that the ``cm`` applies to the whole function, rather than "
"just a piece of it (and saving an indentation level is nice, too)."
msgstr ""
"Det gör det tydligt att ``cm`` gäller hela funktionen, snarare än bara en "
"del av den (och att spara en indragningsnivå är också trevligt)."

#: ../../library/contextlib.rst:417
msgid ""
"Existing context managers that already have a base class can be extended by "
"using ``ContextDecorator`` as a mixin class::"
msgstr ""
"Befintliga kontexthanterare som redan har en basklass kan utökas genom att "
"använda ``ContextDecorator`` som en mixin-klass::"

#: ../../library/contextlib.rst:430
msgid ""
"As the decorated function must be able to be called multiple times, the "
"underlying context manager must support use in multiple :keyword:`with` "
"statements. If this is not the case, then the original construct with the "
"explicit :keyword:`!with` statement inside the function should be used."
msgstr ""
"Eftersom den dekorerade funktionen måste kunna anropas flera gånger måste "
"den underliggande kontexthanteraren stödja användning i flera :keyword:"
"`with`\\-satser. Om så inte är fallet ska den ursprungliga konstruktionen "
"med den explicita :keyword:`!with`\\-satsen inuti funktionen användas."

#: ../../library/contextlib.rst:440
msgid ""
"Similar to :class:`ContextDecorator` but only for asynchronous functions."
msgstr "Liknar :class:`ContextDecorator` men endast för asynkrona funktioner."

#: ../../library/contextlib.rst:442
msgid "Example of ``AsyncContextDecorator``::"
msgstr "Exempel på ``AsyncContextDecorator``::"

#: ../../library/contextlib.rst:481
msgid ""
"A context manager that is designed to make it easy to programmatically "
"combine other context managers and cleanup functions, especially those that "
"are optional or otherwise driven by input data."
msgstr ""
"En kontexthanterare som är utformad för att göra det enkelt att "
"programmatiskt kombinera andra kontexthanterare och rensningsfunktioner, "
"särskilt sådana som är valfria eller på annat sätt styrs av indata."

#: ../../library/contextlib.rst:485
msgid ""
"For example, a set of files may easily be handled in a single with statement "
"as follows::"
msgstr ""
"En uppsättning filer kan t.ex. enkelt hanteras i en enda with-sats enligt "
"följande::"

#: ../../library/contextlib.rst:494
msgid ""
"The :meth:`__enter__` method returns the :class:`ExitStack` instance, and "
"performs no additional operations."
msgstr ""

#: ../../library/contextlib.rst:497
msgid ""
"Each instance maintains a stack of registered callbacks that are called in "
"reverse order when the instance is closed (either explicitly or implicitly "
"at the end of a :keyword:`with` statement). Note that callbacks are *not* "
"invoked implicitly when the context stack instance is garbage collected."
msgstr ""
"Varje instans upprätthåller en stack med registrerade callbacks som anropas "
"i omvänd ordning när instansen stängs (antingen explicit eller implicit i "
"slutet av en :keyword:`with`\\-sats). Observera att återanrop *inte* anropas "
"implicit när context stack-instansen garbage collected."

#: ../../library/contextlib.rst:502
msgid ""
"This stack model is used so that context managers that acquire their "
"resources in their ``__init__`` method (such as file objects) can be handled "
"correctly."
msgstr ""
"Denna stackmodell används för att kontexthanterare som förvärvar sina "
"resurser i metoden ``__init__`` (t.ex. filobjekt) ska kunna hanteras korrekt."

#: ../../library/contextlib.rst:506
msgid ""
"Since registered callbacks are invoked in the reverse order of registration, "
"this ends up behaving as if multiple nested :keyword:`with` statements had "
"been used with the registered set of callbacks. This even extends to "
"exception handling - if an inner callback suppresses or replaces an "
"exception, then outer callbacks will be passed arguments based on that "
"updated state."
msgstr ""
"Eftersom registrerade återuppringningar anropas i omvänd ordning efter "
"registreringen, fungerar det som om flera nästlade :keyword:`with`\\-satser "
"hade använts med den registrerade uppsättningen återuppringningar. Detta "
"gäller även undantagshantering - om en inre anropssignal undertrycker eller "
"ersätter ett undantag, kommer yttre anropssignaler att få argument baserade "
"på det uppdaterade tillståndet."

#: ../../library/contextlib.rst:513
msgid ""
"This is a relatively low level API that takes care of the details of "
"correctly unwinding the stack of exit callbacks. It provides a suitable "
"foundation for higher level context managers that manipulate the exit stack "
"in application specific ways."
msgstr ""
"Detta är ett API på relativt låg nivå som tar hand om detaljerna kring "
"korrekt avrullning av stacken med exit callbacks. Det utgör en lämplig grund "
"för kontexthanterare på högre nivå som manipulerar exitstacken på "
"applikationsspecifika sätt."

#: ../../library/contextlib.rst:522
msgid ""
"Enters a new context manager and adds its :meth:`__exit__` method to the "
"callback stack. The return value is the result of the context manager's own :"
"meth:`__enter__` method."
msgstr ""

#: ../../library/contextlib.rst:526
msgid ""
"These context managers may suppress exceptions just as they normally would "
"if used directly as part of a :keyword:`with` statement."
msgstr ""
"Dessa kontexthanterare kan undertrycka undantag precis som de normalt skulle "
"göra om de användes direkt som en del av en :keyword:`with`\\-sats."

#: ../../library/contextlib.rst:531
msgid "Adds a context manager's :meth:`__exit__` method to the callback stack."
msgstr ""

#: ../../library/contextlib.rst:533
msgid ""
"As ``__enter__`` is *not* invoked, this method can be used to cover part of "
"an :meth:`__enter__` implementation with a context manager's own :meth:"
"`__exit__` method."
msgstr ""

#: ../../library/contextlib.rst:537
msgid ""
"If passed an object that is not a context manager, this method assumes it is "
"a callback with the same signature as a context manager's :meth:`__exit__` "
"method and adds it directly to the callback stack."
msgstr ""

#: ../../library/contextlib.rst:541
msgid ""
"By returning true values, these callbacks can suppress exceptions the same "
"way context manager :meth:`__exit__` methods can."
msgstr ""

#: ../../library/contextlib.rst:544
msgid ""
"The passed in object is returned from the function, allowing this method to "
"be used as a function decorator."
msgstr ""
"Det objekt som skickas in returneras från funktionen, vilket gör att denna "
"metod kan användas som en funktionsdekorator."

#: ../../library/contextlib.rst:549
msgid ""
"Accepts an arbitrary callback function and arguments and adds it to the "
"callback stack."
msgstr ""
"Accepterar en godtycklig återuppringningsfunktion och argument och lägger "
"till den i återuppringningsstacken."

#: ../../library/contextlib.rst:552
msgid ""
"Unlike the other methods, callbacks added this way cannot suppress "
"exceptions (as they are never passed the exception details)."
msgstr ""
"Till skillnad från de andra metoderna kan callbacks som läggs till på det "
"här sättet inte undertrycka undantag (eftersom de aldrig får information om "
"undantaget)."

#: ../../library/contextlib.rst:555
msgid ""
"The passed in callback is returned from the function, allowing this method "
"to be used as a function decorator."
msgstr ""
"Den överlämnade återkallelsen returneras från funktionen, vilket gör att den "
"här metoden kan användas som en funktionsdekorator."

#: ../../library/contextlib.rst:560
msgid ""
"Transfers the callback stack to a fresh :class:`ExitStack` instance and "
"returns it. No callbacks are invoked by this operation - instead, they will "
"now be invoked when the new stack is closed (either explicitly or implicitly "
"at the end of a :keyword:`with` statement)."
msgstr ""
"Överför återkallelsestacken till en ny :class:`ExitStack`\\-instans och "
"returnerar den. Inga återuppringningar anropas av denna operation - istället "
"kommer de nu att anropas när den nya stacken stängs (antingen explicit eller "
"implicit i slutet av en :keyword:`with`\\-sats)."

#: ../../library/contextlib.rst:565
msgid ""
"For example, a group of files can be opened as an \"all or nothing\" "
"operation as follows::"
msgstr ""
"En grupp filer kan t.ex. öppnas som en \"allt eller inget\"-operation på "
"följande sätt::"

#: ../../library/contextlib.rst:579
msgid ""
"Immediately unwinds the callback stack, invoking callbacks in the reverse "
"order of registration. For any context managers and exit callbacks "
"registered, the arguments passed in will indicate that no exception occurred."
msgstr ""
"Avvecklar omedelbart återkallelsestacken och anropar återkallelser i omvänd "
"registreringsordning. För alla kontexthanterare och exit callbacks som "
"registrerats, kommer de argument som skickas in att ange att inget undantag "
"inträffade."

#: ../../library/contextlib.rst:586
msgid ""
"An :ref:`asynchronous context manager <async-context-managers>`, similar to :"
"class:`ExitStack`, that supports combining both synchronous and asynchronous "
"context managers, as well as having coroutines for cleanup logic."
msgstr ""
"En :ref:`asynkron kontexthanterare <async-context-managers>`, liknande :"
"class:`ExitStack`, som stöder kombination av både synkrona och asynkrona "
"kontexthanterare, samt har coroutines för rensningslogik."

#: ../../library/contextlib.rst:591
msgid ""
"The :meth:`close` method is not implemented, :meth:`aclose` must be used "
"instead."
msgstr ""

#: ../../library/contextlib.rst:596
msgid ""
"Similar to :meth:`enter_context` but expects an asynchronous context manager."
msgstr ""

#: ../../library/contextlib.rst:601
msgid ""
"Similar to :meth:`push` but expects either an asynchronous context manager "
"or a coroutine function."
msgstr ""

#: ../../library/contextlib.rst:606
msgid "Similar to :meth:`callback` but expects a coroutine function."
msgstr ""

#: ../../library/contextlib.rst:610
msgid "Similar to :meth:`close` but properly handles awaitables."
msgstr ""

#: ../../library/contextlib.rst:612
msgid "Continuing the example for :func:`asynccontextmanager`::"
msgstr "Fortsätter exemplet för :func:`asynccontextmanager`::"

#: ../../library/contextlib.rst:624
msgid "Examples and Recipes"
msgstr "Exempel och recept"

#: ../../library/contextlib.rst:626
msgid ""
"This section describes some examples and recipes for making effective use of "
"the tools provided by :mod:`contextlib`."
msgstr ""
"I det här avsnittet beskrivs några exempel och recept på hur du effektivt "
"kan använda de verktyg som tillhandahålls av :mod:`contextlib`."

#: ../../library/contextlib.rst:631
msgid "Supporting a variable number of context managers"
msgstr "Stöd för ett varierande antal kontextansvariga"

#: ../../library/contextlib.rst:633
msgid ""
"The primary use case for :class:`ExitStack` is the one given in the class "
"documentation: supporting a variable number of context managers and other "
"cleanup operations in a single :keyword:`with` statement. The variability "
"may come from the number of context managers needed being driven by user "
"input (such as opening a user specified collection of files), or from some "
"of the context managers being optional::"
msgstr ""
"Det primära användningsområdet för :class:`ExitStack` är det som anges i "
"klassdokumentationen: att stödja ett varierande antal kontexthanterare och "
"andra rensningsoperationer i en enda :keyword:`with`\\-sats. Variationen kan "
"bero på att antalet kontexthanterare som behövs styrs av användarens indata "
"(t.ex. att öppna en användardefinierad samling filer) eller att vissa av "
"kontexthanterarna är valfria:"

#: ../../library/contextlib.rst:648
msgid ""
"As shown, :class:`ExitStack` also makes it quite easy to use :keyword:`with` "
"statements to manage arbitrary resources that don't natively support the "
"context management protocol."
msgstr ""
"Som framgår gör :class:`ExitStack` det också ganska enkelt att använda :"
"keyword:`with`\\-satser för att hantera godtyckliga resurser som inte har "
"inbyggt stöd för kontexthanteringsprotokollet."

#: ../../library/contextlib.rst:654
msgid "Catching exceptions from ``__enter__`` methods"
msgstr "Fånga upp undantag från ``__enter__``\\-metoder"

#: ../../library/contextlib.rst:656
msgid ""
"It is occasionally desirable to catch exceptions from an ``__enter__`` "
"method implementation, *without* inadvertently catching exceptions from the :"
"keyword:`with` statement body or the context manager's ``__exit__`` method. "
"By using :class:`ExitStack` the steps in the context management protocol can "
"be separated slightly in order to allow this::"
msgstr ""
"Det är ibland önskvärt att fånga upp undantag från en metodimplementation av "
"``__enter__``, *utan* att oavsiktligt fånga upp undantag från :keyword:"
"`with`\\-satsens kropp eller kontexthanterarens ``__exit__``\\ -metod. Genom "
"att använda :class:`ExitStack` kan stegen i protokollet för kontexthantering "
"separeras något för att möjliggöra detta::"

#: ../../library/contextlib.rst:671
msgid ""
"Actually needing to do this is likely to indicate that the underlying API "
"should be providing a direct resource management interface for use with :"
"keyword:`try`/:keyword:`except`/:keyword:`finally` statements, but not all "
"APIs are well designed in that regard. When a context manager is the only "
"resource management API provided, then :class:`ExitStack` can make it easier "
"to handle various situations that can't be handled directly in a :keyword:"
"`with` statement."
msgstr ""
"Att faktiskt behöva göra det här tyder sannolikt på att det underliggande "
"API:et borde tillhandahålla ett direkt resurshanteringsgränssnitt för "
"användning med :keyword:`try`/:keyword:`except`/:keyword:`finally`\\-satser, "
"men inte alla API:er är väl utformade i det avseendet. När en "
"kontexthanterare är det enda API för resurshantering som tillhandahålls kan :"
"class:`ExitStack` göra det lättare att hantera olika situationer som inte "
"kan hanteras direkt i en :keyword:`with`\\-sats."

#: ../../library/contextlib.rst:681
msgid "Cleaning up in an ``__enter__`` implementation"
msgstr "Städa upp i en ``__enter__``\\-implementering"

#: ../../library/contextlib.rst:683
msgid ""
"As noted in the documentation of :meth:`ExitStack.push`, this method can be "
"useful in cleaning up an already allocated resource if later steps in the :"
"meth:`__enter__` implementation fail."
msgstr ""

#: ../../library/contextlib.rst:687
msgid ""
"Here's an example of doing this for a context manager that accepts resource "
"acquisition and release functions, along with an optional validation "
"function, and maps them to the context management protocol::"
msgstr ""
"Här är ett exempel på hur man gör detta för en kontexthanterare som "
"accepterar funktioner för resursförvärv och frigöring, tillsammans med en "
"valfri valideringsfunktion, och mappar dem till "
"kontexthanteringsprotokollet::"

#: ../../library/contextlib.rst:727
msgid "Replacing any use of ``try-finally`` and flag variables"
msgstr "Ersätter all användning av ``try-finally`` och flaggvariabler"

#: ../../library/contextlib.rst:729
msgid ""
"A pattern you will sometimes see is a ``try-finally`` statement with a flag "
"variable to indicate whether or not the body of the ``finally`` clause "
"should be executed. In its simplest form (that can't already be handled just "
"by using an ``except`` clause instead), it looks something like this::"
msgstr ""
"Ett mönster som du ibland kommer att se är ett ``try-finally``\\ -uttryck "
"med en flaggvariabel som anger om kroppen i ``finally``\\ -satsen ska "
"exekveras eller inte. I sin enklaste form (som inte kan hanteras genom att "
"istället använda en ``except``\\ -sats) ser det ungefär så här ut::"

#: ../../library/contextlib.rst:743
msgid ""
"As with any ``try`` statement based code, this can cause problems for "
"development and review, because the setup code and the cleanup code can end "
"up being separated by arbitrarily long sections of code."
msgstr ""
"Som med all kod som bygger på ``try``\\ -satser kan detta orsaka problem vid "
"utveckling och granskning, eftersom installationskoden och upprensningskoden "
"kan komma att separeras av godtyckligt långa kodavsnitt."

#: ../../library/contextlib.rst:747
msgid ""
":class:`ExitStack` makes it possible to instead register a callback for "
"execution at the end of a ``with`` statement, and then later decide to skip "
"executing that callback::"
msgstr ""
":class:`ExitStack` gör det möjligt att istället registrera en callback för "
"exekvering i slutet av en ``with``\\-sats, och sedan senare bestämma sig för "
"att hoppa över att exekvera den callbacken::"

#: ../../library/contextlib.rst:759
msgid ""
"This allows the intended cleanup up behaviour to be made explicit up front, "
"rather than requiring a separate flag variable."
msgstr ""

#: ../../library/contextlib.rst:762
msgid ""
"If a particular application uses this pattern a lot, it can be simplified "
"even further by means of a small helper class::"
msgstr ""
"Om en viss applikation använder detta mönster ofta kan det förenklas "
"ytterligare med hjälp av en liten hjälpklass::"

#: ../../library/contextlib.rst:780
msgid ""
"If the resource cleanup isn't already neatly bundled into a standalone "
"function, then it is still possible to use the decorator form of :meth:"
"`ExitStack.callback` to declare the resource cleanup in advance::"
msgstr ""
"Om resursrensningen inte redan har paketerats i en fristående funktion är "
"det fortfarande möjligt att använda dekoratorformen av :meth:`ExitStack."
"callback` för att deklarera resursrensningen i förväg::"

#: ../../library/contextlib.rst:795
msgid ""
"Due to the way the decorator protocol works, a callback function declared "
"this way cannot take any parameters. Instead, any resources to be released "
"must be accessed as closure variables."
msgstr ""
"På grund av hur dekoratorprotokollet fungerar kan en callback-funktion som "
"deklareras på detta sätt inte ta emot några parametrar. Istället måste alla "
"resurser som ska frigöras nås som stängningsvariabler."

#: ../../library/contextlib.rst:801
msgid "Using a context manager as a function decorator"
msgstr "Använda en kontexthanterare som funktionsdekorator"

#: ../../library/contextlib.rst:803
msgid ""
":class:`ContextDecorator` makes it possible to use a context manager in both "
"an ordinary ``with`` statement and also as a function decorator."
msgstr ""
":class:`ContextDecorator` gör det möjligt att använda en kontexthanterare "
"både i en vanlig ``with``\\-sats och som en funktionsdekorator."

#: ../../library/contextlib.rst:806
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of exit.  "
"Rather than writing both a function decorator and a context manager for the "
"task, inheriting from :class:`ContextDecorator` provides both capabilities "
"in a single definition::"
msgstr ""
"Till exempel är det ibland användbart att paketera funktioner eller grupper "
"av satser med en logger som kan spåra tidpunkten för inmatning och "
"tidpunkten för avslutning.  I stället för att skriva både en "
"funktionsdekorator och en kontexthanterare för uppgiften, ger ett arv från :"
"class:`ContextDecorator` båda funktionerna i en enda definition::"

#: ../../library/contextlib.rst:827
msgid "Instances of this class can be used as both a context manager::"
msgstr "Instanser av denna klass kan användas som både en kontexthanterare::"

#: ../../library/contextlib.rst:833
msgid "And also as a function decorator::"
msgstr "Och även som funktionsinredare::"

#: ../../library/contextlib.rst:840
msgid ""
"Note that there is one additional limitation when using context managers as "
"function decorators: there's no way to access the return value of :meth:"
"`__enter__`. If that value is needed, then it is still necessary to use an "
"explicit ``with`` statement."
msgstr ""

#: ../../library/contextlib.rst:848
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Uttalandet \"med\""

#: ../../library/contextlib.rst:848
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
"Specifikation, bakgrund och exempel för Pythons :keyword:`with`\\-sats."

#: ../../library/contextlib.rst:854
msgid "Single use, reusable and reentrant context managers"
msgstr "Kontexthanterare för engångsbruk, återanvändbara och återcentrerade"

#: ../../library/contextlib.rst:856
msgid ""
"Most context managers are written in a way that means they can only be used "
"effectively in a :keyword:`with` statement once. These single use context "
"managers must be created afresh each time they're used - attempting to use "
"them a second time will trigger an exception or otherwise not work correctly."
msgstr ""
"De flesta kontexthanterare är skrivna på ett sätt som innebär att de bara "
"kan användas effektivt i en :keyword:`with`\\-sats en gång. Dessa "
"kontexthanterare för engångsbruk måste skapas på nytt varje gång de används "
"- om du försöker använda dem en andra gång kommer de att utlösa ett undantag "
"eller på annat sätt inte fungera korrekt."

#: ../../library/contextlib.rst:862
msgid ""
"This common limitation means that it is generally advisable to create "
"context managers directly in the header of the :keyword:`with` statement "
"where they are used (as shown in all of the usage examples above)."
msgstr ""
"Denna vanliga begränsning innebär att det i allmänhet är tillrådligt att "
"skapa kontexthanterare direkt i rubriken till :keyword:`with`\\-satsen där "
"de används (som visas i alla användningsexempel ovan)."

#: ../../library/contextlib.rst:866
msgid ""
"Files are an example of effectively single use context managers, since the "
"first :keyword:`with` statement will close the file, preventing any further "
"IO operations using that file object."
msgstr ""
"Filer är ett exempel på kontexthanterare med effektiv engångsanvändning, "
"eftersom den första :keyword:`with`\\-satsen stänger filen och förhindrar "
"ytterligare IO-operationer med det filobjektet."

#: ../../library/contextlib.rst:870
msgid ""
"Context managers created using :func:`contextmanager` are also single use "
"context managers, and will complain about the underlying generator failing "
"to yield if an attempt is made to use them a second time::"
msgstr ""
"Kontexthanterare som skapas med :func:`contextmanager` är också "
"kontexthanterare för engångsbruk och kommer att klaga på att den "
"underliggande generatorn inte ger något om man försöker använda dem en andra "
"gång::"

#: ../../library/contextlib.rst:898
msgid "Reentrant context managers"
msgstr "Reentranta kontexthanterare"

#: ../../library/contextlib.rst:900
msgid ""
"More sophisticated context managers may be \"reentrant\". These context "
"managers can not only be used in multiple :keyword:`with` statements, but "
"may also be used *inside* a :keyword:`!with` statement that is already using "
"the same context manager."
msgstr ""
"Mer sofistikerade kontexthanterare kan vara \"reentranta\". Dessa "
"kontexthanterare kan inte bara användas i flera :keyword:`with`\\-satser, "
"utan kan också användas *inom* en :keyword:`!with`\\-sats som redan använder "
"samma kontexthanterare."

#: ../../library/contextlib.rst:905
msgid ""
":class:`threading.RLock` is an example of a reentrant context manager, as "
"are :func:`suppress` and :func:`redirect_stdout`. Here's a very simple "
"example of reentrant use::"
msgstr ""

#: ../../library/contextlib.rst:924
msgid ""
"Real world examples of reentrancy are more likely to involve multiple "
"functions calling each other and hence be far more complicated than this "
"example."
msgstr ""
"Verkliga exempel på reentrancy är mer benägna att involvera flera funktioner "
"som anropar varandra och är därför mycket mer komplicerade än det här "
"exemplet."

#: ../../library/contextlib.rst:928
msgid ""
"Note also that being reentrant is *not* the same thing as being thread "
"safe. :func:`redirect_stdout`, for example, is definitely not thread safe, "
"as it makes a global modification to the system state by binding :data:`sys."
"stdout` to a different stream."
msgstr ""
"Observera också att reentrant *inte* är samma sak som trådsäkert. :func:"
"`redirect_stdout` är till exempel definitivt inte trådsäkert, eftersom det "
"gör en global ändring av systemtillståndet genom att binda :data:`sys."
"stdout` till en annan ström."

#: ../../library/contextlib.rst:937
msgid "Reusable context managers"
msgstr "Återanvändbara kontexthanterare"

#: ../../library/contextlib.rst:939
msgid ""
"Distinct from both single use and reentrant context managers are "
"\"reusable\" context managers (or, to be completely explicit, \"reusable, "
"but not reentrant\" context managers, since reentrant context managers are "
"also reusable). These context managers support being used multiple times, "
"but will fail (or otherwise not work correctly) if the specific context "
"manager instance has already been used in a containing with statement."
msgstr ""
"Till skillnad från både engångs- och återcentrerande kontexthanterare finns "
"det \"återanvändbara\" kontexthanterare (eller, för att vara helt tydlig, "
"\"återanvändbara, men inte återcentrerande\" kontexthanterare, eftersom "
"återcentrerande kontexthanterare också är återanvändbara). Dessa "
"kontexthanterare kan användas flera gånger, men kommer att misslyckas (eller "
"på annat sätt inte fungera korrekt) om den specifika kontexthanteraren redan "
"har använts i en containing with-sats."

#: ../../library/contextlib.rst:946
msgid ""
":class:`threading.Lock` is an example of a reusable, but not reentrant, "
"context manager (for a reentrant lock, it is necessary to use :class:"
"`threading.RLock` instead)."
msgstr ""
":class:`threading.Lock` är ett exempel på en återanvändbar, men inte "
"reentrant, kontexthanterare (för ett reentrant lås är det nödvändigt att "
"använda :class:`threading.RLock` istället)."

#: ../../library/contextlib.rst:950
msgid ""
"Another example of a reusable, but not reentrant, context manager is :class:"
"`ExitStack`, as it invokes *all* currently registered callbacks when leaving "
"any with statement, regardless of where those callbacks were added::"
msgstr ""
"Ett annat exempel på en återanvändbar, men inte reentrant, kontexthanterare "
"är :class:`ExitStack`, eftersom den anropar *alla* för närvarande "
"registrerade anrop när man lämnar en with-sats, oavsett var dessa anrop "
"lades till::"

#: ../../library/contextlib.rst:981
msgid ""
"As the output from the example shows, reusing a single stack object across "
"multiple with statements works correctly, but attempting to nest them will "
"cause the stack to be cleared at the end of the innermost with statement, "
"which is unlikely to be desirable behaviour."
msgstr ""
"Som framgår av exemplet fungerar det korrekt att återanvända ett enda "
"stackobjekt i flera with-satser, men om man försöker nesta dem kommer "
"stacken att rensas i slutet av den innersta with-satsen, vilket sannolikt "
"inte är ett önskvärt beteende."

#: ../../library/contextlib.rst:986
msgid ""
"Using separate :class:`ExitStack` instances instead of reusing a single "
"instance avoids that problem::"
msgstr ""
"Genom att använda separata :class:`ExitStack`\\-instanser istället för att "
"återanvända en enda instans undviker man det problemet::"
