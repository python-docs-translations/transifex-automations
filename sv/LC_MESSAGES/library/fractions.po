# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-15 16:36+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ""

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Källkod:** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr "Modulen :mod:`fractions` ger stöd för aritmetik med rationella tal."

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"En Fraction-instans kan konstrueras från ett par heltal, från ett annat "
"rationellt tal eller från en sträng."

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is ``0``, it raises "
"a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"där det valfria ``tecknet`` kan vara antingen '+' eller '-' och "
"``numerator`` och ``denominator`` (om de finns) är strängar av decimala "
"siffror (understrykningar kan användas för att avgränsa siffror som med "
"integrerade literaler i kod).  Dessutom kan alla strängar som representerar "
"ett ändligt värde och som accepteras av :class:`float`\\-konstruktören också "
"accepteras av :class:`Fraction`\\-konstruktören.  I båda formerna kan "
"indatasträngen också ha inledande och/eller avslutande blanksteg. Här är "
"några exempel::"

#: ../../library/fractions.rst:78
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are :term:`hashable`, and should be "
"treated as immutable.  In addition, :class:`Fraction` has the following "
"properties and methods:"
msgstr ""
"Klassen :class:`Fraction` ärver från den abstrakta basklassen :class:"
"`numbers.Rational`, och implementerar alla metoder och operationer från den "
"klassen. :class:`Fraction`\\-instanser är :term:`hashable`, och bör "
"behandlas som oföränderliga.  Dessutom har :class:`Fraction` följande "
"egenskaper och metoder:"

#: ../../library/fractions.rst:84
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
"Konstruktorn :class:`Fraction` accepterar nu instanser av :class:`float` "
"och :class:`decimal.Decimal`."

#: ../../library/fractions.rst:88
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always return a :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""

#: ../../library/fractions.rst:93
msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr ""
"Underscores är nu tillåtna när man skapar en :class:`Fraction`\\-instans "
"från en sträng, enligt :PEP:`515`\\-reglerna."

#: ../../library/fractions.rst:97
msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy ``typing."
"SupportsInt`` instance checks."
msgstr ""
":class:`Fraction` implementerar ``__int__`` nu för att uppfylla ``typing."
"SupportsInt`` instans kontroller."

#: ../../library/fractions.rst:103
msgid "Numerator of the Fraction in lowest term."
msgstr "Täljaren i fraktionen i den lägsta termen."

#: ../../library/fractions.rst:107
msgid "Denominator of the Fraction in lowest term."
msgstr "Nämnaren i bråket i lägsta termen."

#: ../../library/fractions.rst:112
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr ""

#: ../../library/fractions.rst:119
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or :"
"class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"Alternativ konstruktör som endast accepterar instanser av :class:`float` "
"eller :class:`numbers.Integral`. Tänk på att ``Fraction.from_float(0.3)`` "
"inte är samma värde som ``Fraction(3, 10)``."

#: ../../library/fractions.rst:125
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"Från Python 3.2 och framåt kan du också konstruera en :class:`Fraction`\\-"
"instans direkt från en :class:`float`."

#: ../../library/fractions.rst:131
msgid ""
"Alternative constructor which only accepts instances of :class:`decimal."
"Decimal` or :class:`numbers.Integral`."
msgstr ""
"Alternativ konstruktor som endast accepterar instanser av :class:`decimal."
"Decimal` eller :class:`numbers.Integral`."

#: ../../library/fractions.rst:136
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"Från Python 3.2 och framåt kan du också konstruera en :class:`Fraction`\\-"
"instans direkt från en :class:`decimal.Decimal`\\-instans."

#: ../../library/fractions.rst:143
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"Hittar och returnerar den närmaste :class:`Fraction` till ``self`` som har "
"högst max_denominator som nämnare.  Denna metod är användbar för att hitta "
"rationella approximationer till ett givet flyttal:"

#: ../../library/fractions.rst:151
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""
"eller för att återskapa ett rationellt tal som representeras som en float:"

#: ../../library/fractions.rst:164
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"Returnerar det största :class:`int` ``<= self``.  Denna metod kan också nås "
"via funktionen :func:`math.floor`:"

#: ../../library/fractions.rst:174
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"Returnerar det minsta :class:`int` ``>= self``.  Denna metod kan också nås "
"via funktionen :func:`math.ceil`."

#: ../../library/fractions.rst:181
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"Den första versionen returnerar närmaste :class:`int` till ``self`` och "
"avrundar hälften till jämnt. Den andra versionen avrundar ``self`` till "
"närmaste multipel av ``Fraction(1, 10**ndigits)`` (logiskt, om ``ndigits`` "
"är negativt), och avrundar återigen hälften mot jämnt.  Denna metod kan "
"också nås genom funktionen :func:`round`."

#: ../../library/fractions.rst:190
msgid "Module :mod:`numbers`"
msgstr "Modul :mod:`numbers`"

#: ../../library/fractions.rst:191
msgid "The abstract base classes making up the numeric tower."
msgstr "De abstrakta basklasserna som utgör det numeriska tornet."
