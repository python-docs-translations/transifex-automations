# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Källkod:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"Pythons runtime tvingar inte fram funktions- och variabeltypsannoteringar. "
"De kan användas av tredjepartsverktyg som :term:`typkontroll <static type "
"checker>`, IDE:er, linters, etc."

#: ../../library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. For the original "
"specification of the typing system, see :pep:`484`. For a simplified "
"introduction to type hints, see :pep:`483`."
msgstr ""

#: ../../library/typing.rst:31
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""

#: ../../library/typing.rst:36
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as"
" arguments."
msgstr ""

#: ../../library/typing.rst:40
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""

#: ../../library/typing.rst:44
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""

#: ../../library/typing.rst:50
msgid ""
"`\"Typing cheat sheet\" "
"<https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html>`_"
msgstr ""

#: ../../library/typing.rst:50
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr "En snabb översikt över typtips (värd på mypy-dokumenten)"

#: ../../library/typing.rst:55
msgid ""
"\"Type System Reference\" section of `the mypy docs "
"<https://mypy.readthedocs.io/en/stable/index.html>`_"
msgstr ""

#: ../../library/typing.rst:53
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"Pythons typsystem är standardiserat via PEPs, så denna referens bör i stort "
"sett gälla för de flesta Python-typkontrollörer. (Vissa delar kan "
"fortfarande vara specifika för mypy.)"

#: ../../library/typing.rst:59
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../../library/typing.rst:58
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"Typkontrollagnostisk dokumentation skriven av gemenskapen som beskriver "
"typsystemets funktioner, användbara typrelaterade verktyg och bästa praxis "
"för typning."

#: ../../library/typing.rst:65
msgid "Relevant PEPs"
msgstr ""

#: ../../library/typing.rst:67
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a"
" number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""

#: ../../library/typing.rst:77
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ""

#: ../../library/typing.rst:77
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""

#: ../../library/typing.rst:80
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../library/typing.rst:80
msgid ""
"*Introducing* :class:`Protocol` and the "
":func:`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""

#: ../../library/typing.rst:83
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/typing.rst:83
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../library/typing.rst:85
msgid ":pep:`586`: Literal Types"
msgstr ""

#: ../../library/typing.rst:86
msgid "*Introducing* :data:`Literal`"
msgstr ""

#: ../../library/typing.rst:87
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../library/typing.rst:88
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../library/typing.rst:89
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ""

#: ../../library/typing.rst:90
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../library/typing.rst:91
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:92
msgid "*Introducing* :data:`Annotated`"
msgstr ""

#: ../../library/typing.rst:95
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ""

#: ../../library/typing.rst:94
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""

#: ../../library/typing.rst:97
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ""

#: ../../library/typing.rst:98
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ""

#: ../../library/typing.rst:99
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ""

#: ../../library/typing.rst:100
msgid "*Introducing* :data:`TypeAlias`"
msgstr ""

#: ../../library/typing.rst:101
msgid ":pep:`646`: Variadic Generics"
msgstr ""

#: ../../library/typing.rst:102
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr ""

#: ../../library/typing.rst:103
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ""

#: ../../library/typing.rst:104
msgid "*Introducing* :data:`TypeGuard`"
msgstr ""

#: ../../library/typing.rst:105
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ""

#: ../../library/typing.rst:106
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr ""

#: ../../library/typing.rst:107
msgid ":pep:`673`: Self type"
msgstr ""

#: ../../library/typing.rst:108
msgid "*Introducing* :data:`Self`"
msgstr ""

#: ../../library/typing.rst:109
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ""

#: ../../library/typing.rst:110
msgid "*Introducing* :data:`LiteralString`"
msgstr ""

#: ../../library/typing.rst:112
msgid ":pep:`681`: Data Class Transforms"
msgstr ""

#: ../../library/typing.rst:112
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` "
"decorator"
msgstr ""

#: ../../library/typing.rst:122
msgid "Type aliases"
msgstr "Typ av alias"

#: ../../library/typing.rst:124
msgid ""
"A type alias is defined by assigning the type to the alias. In this example,"
" ``Vector`` and ``list[float]`` will be treated as interchangeable "
"synonyms::"
msgstr ""

#: ../../library/typing.rst:135
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Typaliaser är användbara för att förenkla komplexa typsignaturer. Till "
"exempel::"

#: ../../library/typing.rst:153
msgid ""
"Type aliases may be marked with :data:`TypeAlias` to make it explicit that "
"the statement is a type alias declaration, not a normal variable "
"assignment::"
msgstr ""

#: ../../library/typing.rst:163
msgid "NewType"
msgstr "NyTyp"

#: ../../library/typing.rst:165
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Använd hjälpen :class:`NewType` för att skapa distinkta typer::"

#: ../../library/typing.rst:172
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"Den statiska typkontrollen behandlar den nya typen som om den vore en "
"subklass av den ursprungliga typen. Detta är användbart för att hjälpa till "
"att fånga logiska fel::"

#: ../../library/typing.rst:184
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent"
" you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Du kan fortfarande utföra alla ``int``\\-operationer på en variabel av typen"
" ``UserId``, men resultatet kommer alltid att vara av typen ``int``. Detta "
"gör att du kan skicka in ett ``UserId`` överallt där ett ``int`` kan "
"förväntas, men förhindrar att du av misstag skapar ett ``UserId`` på ett "
"ogiltigt sätt::"

#: ../../library/typing.rst:192
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Observera att dessa kontroller endast verkställs av den statiska "
"typkontrollen. Vid körning kommer uttalandet ``Derived = NewType('Derived', "
"Base)`` att göra ``Derived`` till en callable som omedelbart returnerar "
"vilken parameter du än ger den. Det betyder att uttrycket "
"``Derived(some_value)`` inte skapar en ny klass eller introducerar mycket "
"overhead utöver det som ett vanligt funktionsanrop gör."

#: ../../library/typing.rst:198
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Mer exakt är uttrycket ``något_värde är Derived(något_värde)`` alltid sant "
"vid körning."

#: ../../library/typing.rst:201
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "Det är ogiltigt att skapa en subtyp av ``Derived``::"

#: ../../library/typing.rst:210
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"Det är dock möjligt att skapa en :class:`NewType` baserad på en 'härledd' "
"``NewType``::"

#: ../../library/typing.rst:218
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "och typkontroll för ``ProUserId`` kommer att fungera som förväntat."

#: ../../library/typing.rst:220
msgid "See :pep:`484` for more details."
msgstr "Se :pep:`484` för mer information."

#: ../../library/typing.rst:224
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to"
" one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:229
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"Däremot förklarar ``NewType`` att en typ är en *subtyp* av en annan. Om du "
"gör ``Derived = NewType('Derived', Original)`` kommer den statiska "
"typkontrollen att behandla ``Derived`` som en *subklass* av ``Original``, "
"vilket innebär att ett värde av typen ``Original`` inte kan användas på "
"platser där ett värde av typen ``Derived`` förväntas. Detta är användbart "
"när du vill förhindra logiska fel med minimal körtidskostnad."

#: ../../library/typing.rst:238
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``NewType`` är nu en klass snarare än en funktion.  Som ett resultat av "
"detta finns det en viss extra körtidskostnad när man anropar ``NewType`` "
"över en vanlig funktion."

#: ../../library/typing.rst:243
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"Prestandan för att anropa ``NewType`` har återställts till samma nivå som i "
"Python 3.9."

#: ../../library/typing.rst:250
msgid "Annotating callable objects"
msgstr "Annotering av anropsbara objekt"

#: ../../library/typing.rst:252
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using "
":class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""

#: ../../library/typing.rst:257 ../../library/typing.rst:2726
msgid "For example:"
msgstr "Till exempel:"

#: ../../library/typing.rst:275
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return"
" type must be a single type."
msgstr ""

#: ../../library/typing.rst:280
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Om en bokstavlig ellips ``...`` anges som argumentlista, indikerar det att "
"en callable med godtycklig parameterlista skulle vara acceptabel:"

#: ../../library/typing.rst:292
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a"
" variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a "
":meth:`~object.__call__` method:"
msgstr ""
"``Callable`` kan inte uttrycka komplexa signaturer som funktioner som tar "
"ett variabelt antal argument, :ref:`overloaded functions <overload>`,  eller"
" funktioner som har parametrar som endast innehåller nyckelord. Dessa "
"signaturer kan dock uttryckas genom att definiera en :class:`Protocol` "
"-klass med en :meth:`~object.__call__`\\-metod:"

#: ../../library/typing.rst:319
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form"
" ``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Anropsbara filer som tar andra anropsbara filer som argument kan ange att "
"deras parametertyper är beroende av varandra med hjälp av "
":class:`ParamSpec`. Dessutom, om denna anropsbarhet lägger till eller tar "
"bort argument från andra anropsbara objekt, kan operatorn "
":data:`Concatenate` användas.  De har formen ``Callable[ParamSpecVariable, "
"ReturnType]`` respektive ``Callable[Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable], ReturnType]``."

#: ../../library/typing.rst:327 ../../library/typing.rst:3250
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See "
":pep:`612` for more details."
msgstr ""
"``Callable`` stöder nu :class:`ParamSpec` och :data:`Concatenate`. Se "
":pep:`612` för mer information."

#: ../../library/typing.rst:332
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"Dokumentationen för :class:`ParamSpec` och :class:`Concatenate` ger exempel "
"på användning i ``Callable``."

#: ../../library/typing.rst:338
msgid "Generics"
msgstr "Generiska läkemedel"

#: ../../library/typing.rst:340
msgid ""
"Since type information about objects kept in containers cannot be statically"
" inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Eftersom typinformation om objekt som förvaras i containrar inte kan "
"härledas statiskt på ett generiskt sätt, stöder många containerklasser i "
"standardbiblioteket subscription för att ange de förväntade typerna av "
"containerelement."

#: ../../library/typing.rst:357
msgid ""
"Generics can be parameterized by using a factory available in typing called "
":class:`TypeVar`."
msgstr ""

#: ../../library/typing.rst:373
msgid "Annotating tuples"
msgstr "Annotering av tuples"

#: ../../library/typing.rst:375
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"För de flesta behållare i Python förutsätter typningssystemet att alla "
"element i behållaren är av samma typ. Till exempel::"

#: ../../library/typing.rst:390
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, "
":class:`~collections.abc.Mapping` only accepts two type arguments: the first"
" indicates the type of the keys, and the second indicates the type of the "
"values."
msgstr ""
":class:`list` accepterar bara ett typargument, så en typkontroll skulle ge "
"ett felmeddelande om ``y``\\-tilldelningen ovan. På samma sätt accepterar "
":class:`~collections.abc.Mapping` bara två typargument: det första anger "
"typen av nycklar och det andra anger typen av värden."

#: ../../library/typing.rst:396
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. "
":class:`tuple` accepts *any number* of type arguments::"
msgstr ""
"Till skillnad från de flesta andra Python-containrar är det dock vanligt i "
"idiomatisk Python-kod att tupler har element som inte alla är av samma typ. "
"Av denna anledning är tupler specialklassade i Pythons typsystem. "
":class:`tuple` accepterar *valfritt antal* typargument::"

#: ../../library/typing.rst:412
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple,"
" use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""

#: ../../library/typing.rst:435
msgid "The type of class objects"
msgstr "Typ av klassobjekt"

#: ../../library/typing.rst:437
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""

#: ../../library/typing.rst:447
msgid "Note that ``type[C]`` is covariant::"
msgstr "Observera att ``type[C]`` är kovariant::"

#: ../../library/typing.rst:463
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr ""
"De enda lagliga parametrarna för :class:`type` är klasser, :data:`Any`, "
":ref:`type variables <generics>` och unioner av någon av dessa typer. Till "
"exempel::"

#: ../../library/typing.rst:475
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's "
":ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` är ekvivalent med :class:`type`, som är roten till Pythons "
":ref:`metaklasshierarki <metaclasses>`."

#: ../../library/typing.rst:481
msgid "User-defined generic types"
msgstr "Användardefinierade generiska typer"

#: ../../library/typing.rst:483
msgid "A user-defined class can be defined as a generic class."
msgstr "En användardefinierad klass kan definieras som en generisk klass."

#: ../../library/typing.rst:509
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../library/typing.rst:513
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so"
" that ``LoggedVar[T]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:522
msgid ""
"A generic type can have any number of type variables. All varieties of "
":class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"En generisk typ kan ha ett valfritt antal typvariabler. Alla varianter av "
":class:`TypeVar` är tillåtna som parametrar för en generisk typ::"

#: ../../library/typing.rst:534
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Varje typvariabelargument till :class:`Generic` måste vara distinkt. Detta "
"är alltså ogiltigt:"

#: ../../library/typing.rst:545
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../library/typing.rst:555
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""
"När man ärvde från generiska klasser kunde vissa typparametrar fixas::"

#: ../../library/typing.rst:565
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "I det här fallet har ``MyDict`` en enda parameter, ``T``."

#: ../../library/typing.rst:567
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any`"
" for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"Om man använder en generisk klass utan att ange typparametrar antas "
":data:`Any` för varje position. I följande exempel är ``MyIterable`` inte "
"generisk utan ärver implicit från ``Iterable[Any]``:"

#: ../../library/typing.rst:578
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr "Användardefinierade alias för generiska typer stöds också. Exempel::"

#: ../../library/typing.rst:595
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` har inte längre någon egen metaklass."

#: ../../library/typing.rst:598
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:614
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:626
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Observera att generiker med :class:`ParamSpec` kanske inte har korrekta "
"``__parametrar__`` efter substitution i vissa fall eftersom de främst är "
"avsedda för statisk typkontroll."

#: ../../library/typing.rst:630
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See "
":class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` kan nu parametriseras över parameteruttryck. Se "
":class:`ParamSpec` och :pep:`612` för mer information."

#: ../../library/typing.rst:634
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
":term:`hashable` and comparable for equality."
msgstr ""

#: ../../library/typing.rst:641
msgid "The :data:`Any` type"
msgstr "Typen :data:`Any`"

#: ../../library/typing.rst:643
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"En speciell typ av typ är :data:`Any`. En statisk typkontroll kommer att "
"behandla varje typ som kompatibel med :data:`Any` och :data:`Any` som "
"kompatibel med varje typ."

#: ../../library/typing.rst:647
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Detta innebär att det är möjligt att utföra valfri operation eller "
"metodanrop på ett värde av typen :data:`Any` och tilldela det till valfri "
"variabel::"

#: ../../library/typing.rst:665
msgid ""
"Notice that no type checking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker did"
" not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Observera att ingen typkontroll utförs när ett värde av typen :data:`Any` "
"tilldelas till en mer exakt typ. Till exempel rapporterade den statiska "
"typkontrollen inte ett fel när ``a`` tilldelades ``s`` trots att ``s`` "
"deklarerades vara av typen :class:`str` och får ett värde av typen "
":class:`int` vid körning!"

#: ../../library/typing.rst:671
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Dessutom kommer alla funktioner utan returtyp eller parametertyper att "
"implicit använda :data:`Any`::"

#: ../../library/typing.rst:684
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Detta beteende gör att :data:`Any` kan användas som en *escape-lucka* när du"
" behöver blanda dynamiskt och statiskt typad kod."

#: ../../library/typing.rst:687
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However,"
" unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Kontrastera beteendet hos :data:`Any` med beteendet hos :class:`object`. I "
"likhet med :data:`Any` är varje typ en subtyp av :class:`object`. Men till "
"skillnad från :data:`Any` är det omvända inte sant: :class:`object` är "
"*inte* en subtyp av alla andra typer."

#: ../../library/typing.rst:692
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using"
" it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Det innebär att när typen av ett värde är :class:`object`, kommer en "
"typkontroll att avvisa nästan alla operationer på det, och att tilldela det "
"till en variabel (eller använda det som ett returvärde) av en mer "
"specialiserad typ är ett typfel. Till exempel::"

#: ../../library/typing.rst:714
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe"
" manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Använd :class:`object` för att ange att ett värde kan vara av vilken typ som"
" helst på ett typsäkert sätt. Använd :data:`Any` för att ange att ett värde "
"är dynamiskt typat."

#: ../../library/typing.rst:719
msgid "Nominal vs structural subtyping"
msgstr "Nominell kontra strukturell subtypning"

#: ../../library/typing.rst:721
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal"
" subtyping*. This means that a class ``A`` is allowed where a class ``B`` is"
" expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Ursprungligen definierade :pep:`484` Pythons statiska typsystem som att det "
"använder *nominal subtyping*. Detta innebär att en klass ``A`` är tillåten "
"där en klass ``B`` förväntas om och endast om ``A`` är en subklass av ``B``."

#: ../../library/typing.rst:725
msgid ""
"This requirement previously also applied to abstract base classes, such as "
":class:`~collections.abc.Iterable`. The problem with this approach is that a"
" class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Detta krav gällde tidigare även för abstrakta basklasser, såsom "
":class:`~collections.abc.Iterable`. Problemet med detta tillvägagångssätt är"
" att en klass måste markeras explicit för att stödja dem, vilket är "
"opythoniskt och olikt vad man normalt skulle göra i idiomatisk dynamiskt "
"typad Python-kod. Till exempel överensstämmer detta med :pep:`484`::"

#: ../../library/typing.rst:738
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above"
" code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` löser detta problem genom att tillåta användare att skriva "
"ovanstående kod utan explicita basklasser i klassdefinitionen, vilket gör "
"att ``Bucket`` implicit kan betraktas som en subtyp av både ``Sized`` och "
"``Iterable[int]`` av statiska typkontroller. Detta är känt som *strukturell "
"subtypning* (eller statisk duck-typning)::"

#: ../../library/typing.rst:754
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Genom att subklassa en speciell klass :class:`Protocol` kan en användare "
"dessutom definiera nya anpassade protokoll för att fullt ut utnyttja "
"strukturell subtypning (se exempel nedan)."

#: ../../library/typing.rst:759
msgid "Module contents"
msgstr "Modulens innehåll"

#: ../../library/typing.rst:761
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""
"Modulen ``typing`` definierar följande klasser, funktioner och dekoratorer."

#: ../../library/typing.rst:764
msgid "Special typing primitives"
msgstr "Särskilda typningsprimitiver"

#: ../../library/typing.rst:767
msgid "Special types"
msgstr "Särskilda typer"

#: ../../library/typing.rst:769
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Dessa kan användas som typer i annoteringar. De stöder inte prenumeration "
"med hjälp av ``[]``."

#: ../../library/typing.rst:774
msgid "Special type indicating an unconstrained type."
msgstr "Särskild typ som anger en obegränsad typ."

#: ../../library/typing.rst:776
msgid "Every type is compatible with :data:`Any`."
msgstr "Varje typ är kompatibel med :data:`Any`."

#: ../../library/typing.rst:777
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` är kompatibel med alla typer."

#: ../../library/typing.rst:779
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding"
" type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` kan nu användas som basklass. Detta kan vara användbart för att "
"undvika fel i typkontrollerna för klasser som kan få typ var som helst eller"
" som är mycket dynamiska."

#: ../../library/typing.rst:786
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "En :ref:`begränsad typvariabel <typing-constrained-typevar>`."

#: ../../library/typing.rst:788
msgid "Definition::"
msgstr "Definition::"

#: ../../library/typing.rst:792
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` or"
" :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` är avsedd att användas för funktioner som kan acceptera "
":class:`str` eller :class:`bytes` argument men som inte kan tillåta att de "
"två blandas."

#: ../../library/typing.rst:795 ../../library/typing.rst:886
#: ../../library/typing.rst:905 ../../library/typing.rst:962
#: ../../library/typing.rst:1121 ../../library/typing.rst:1178
#: ../../library/typing.rst:1386 ../../library/typing.rst:2566
msgid "For example::"
msgstr "Till exempel::"

#: ../../library/typing.rst:804
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the "
":class:`Any` type, nor does it mean \"any string\". In particular, "
"``AnyStr`` and ``str | bytes`` are different from each other and have "
"different use cases::"
msgstr ""
"Observera att trots sitt namn har ``AnyStr`` inget att göra med typen "
":class:`Any`` och betyder inte heller \"vilken sträng som helst\". I "
"synnerhet skiljer sig ``AnyStr`` och ``str | bytes`` från varandra och har "
"olika användningsområden::"

#: ../../library/typing.rst:821
msgid "Special type that includes only literal strings."
msgstr "Speciell typ som endast innehåller bokstavliga strängar."

#: ../../library/typing.rst:823
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string"
" created by composing ``LiteralString``-typed objects is also acceptable as "
"a ``LiteralString``."
msgstr ""
"Alla bokstavliga strängar är kompatibla med ``LiteralString``, liksom en "
"annan ``LiteralString``. Men ett objekt typat som bara ``str`` är inte det. "
"En sträng som skapas genom att komponera ``LiteralString``\\-typade objekt "
"är också acceptabel som en ``LiteralString``."

#: ../../library/typing.rst:829
msgid "Example:"
msgstr "Exempel:"

#: ../../library/typing.rst:845
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` är användbart för känsliga API:er där godtyckliga "
"användargenererade strängar kan skapa problem. Till exempel kan de två "
"fallen ovan som genererar typkontrollfel vara sårbara för en SQL-"
"injektionsattack."

#: ../../library/typing.rst:850
msgid "See :pep:`675` for more details."
msgstr "Se :pep:`675` för mer information."

#: ../../library/typing.rst:856
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""

#: ../../library/typing.rst:859
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""

#: ../../library/typing.rst:879
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""

#: ../../library/typing.rst:884
msgid "Special type indicating that a function never returns."
msgstr ""

#: ../../library/typing.rst:893
msgid ""
"``NoReturn`` can also be used as a `bottom type "
"<https://en.wikipedia.org/wiki/Bottom_type>`_, a type that has no values. "
"Starting in Python 3.11, the :data:`Never` type should be used for this "
"concept instead. Type checkers should treat the two equivalently."
msgstr ""

#: ../../library/typing.rst:903
msgid "Special type to represent the current enclosed class."
msgstr "Speciell typ för att representera den aktuella inneslutna klassen."

#: ../../library/typing.rst:919
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Denna annotation är semantiskt likvärdig med följande, om än på ett mer "
"kortfattat sätt::"

#: ../../library/typing.rst:931
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"I allmänhet, om något returnerar ``self``, som i exemplen ovan, bör du "
"använda ``Self`` som returannotering. Om ``Foo.return_self`` annoterades som"
" att returnera ``\"Foo\"``, skulle typkontrollen härleda objektet som "
"returneras från ``SubclassOfFoo.return_self`` som att vara av typen ``Foo`` "
"snarare än ``SubclassOfFoo``."

#: ../../library/typing.rst:937
msgid "Other common use cases include:"
msgstr "Andra vanliga användningsområden är t.ex:"

#: ../../library/typing.rst:939
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return"
" instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod` som används som alternativa konstruktörer och "
"returnerar instanser av parametern ``cls``."

#: ../../library/typing.rst:941
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "Anteckna en :meth:`~object.__enter__`\\-metod som returnerar self."

#: ../../library/typing.rst:943
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is "
"subclassed::"
msgstr ""
"Du bör inte använda ``Self`` som returannotering om metoden inte garanterat "
"returnerar en instans av en underklass när klassen är underklassad::"

#: ../../library/typing.rst:954
msgid "See :pep:`673` for more details."
msgstr "Se :pep:`673` för mer information."

#: ../../library/typing.rst:960
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Särskild annotering för att explicit deklarera en :ref:`typ alias <type-"
"aliases>`."

#: ../../library/typing.rst:968
msgid ""
"``TypeAlias`` is particularly useful for annotating aliases that make use of"
" forward references, as it can be hard for type checkers to distinguish "
"these from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:988
msgid "See :pep:`613` for more details."
msgstr "Se :pep:`613` för mer information."

#: ../../library/typing.rst:993
msgid "Special forms"
msgstr "Särskilda formulär"

#: ../../library/typing.rst:995
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Dessa kan användas som typer i annoteringar. De stöder alla prenumeration "
"med hjälp av ``[]``, men varje har en unik syntax."

#: ../../library/typing.rst:1000
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or"
" Y."
msgstr ""
"Unionstyp; ``Union[X, Y]`` är ekvivalent med ``X | Y`` och betyder antingen "
"X eller Y."

#: ../../library/typing.rst:1002
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"För att definiera en union, använd t.ex. ``Union[int, str]`` eller "
"kortformen ``int | str``. Det är rekommenderat att använda den kortformen. "
"Mer information:"

#: ../../library/typing.rst:1004
msgid "The arguments must be types and there must be at least one."
msgstr "Argumenten måste vara typer och det måste finnas minst ett."

#: ../../library/typing.rst:1006
msgid "Unions of unions are flattened, e.g.::"
msgstr "Unioner av unioner är tillplattade, t.ex.::"

#: ../../library/typing.rst:1010
msgid "Unions of a single argument vanish, e.g.::"
msgstr "Sammanslutningar av ett enda argument försvinner, t.ex.::"

#: ../../library/typing.rst:1014
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Överflödiga argument hoppas över, t.ex.::"

#: ../../library/typing.rst:1018
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "Vid jämförelse av unioner ignoreras argumentordningen, t.ex.::"

#: ../../library/typing.rst:1022
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "Du kan inte underklassa eller instansiera en ``Union``."

#: ../../library/typing.rst:1024
msgid "You cannot write ``Union[X][Y]``."
msgstr "Du kan inte skriva ``Union[X][Y]``."

#: ../../library/typing.rst:1026
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "Ta inte bort explicita underklasser från unioner vid körning."

#: ../../library/typing.rst:1029
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Unioner kan nu skrivas som ``X | Y``. Se :ref:`unionstyputtryck<types-"
"union>`."

#: ../../library/typing.rst:1035
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""
"``Optional[X]`` är ekvivalent med ``X | None`` (eller ``Union[X, None]``)."

#: ../../library/typing.rst:1037
msgid ""
"Note that this is not the same concept as an optional argument, which is one"
" that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Observera att detta inte är samma koncept som ett optionellt argument, "
"vilket är ett argument som har en default.  Ett valfritt argument med en "
"standard kräver inte ``Optional`` kvalifieraren på sin typannotering bara "
"för att det är valfritt. Till exempel::"

#: ../../library/typing.rst:1045
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Å andra sidan, om ett explicit värde av ``None`` är tillåtet, är "
"användningen av ``Optional`` lämplig, oavsett om argumentet är valfritt "
"eller inte. Till exempel::"

#: ../../library/typing.rst:1052
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional kan nu skrivas som ``X | None``. Se :ref:`unionstyputtryck<types-"
"union>`."

#: ../../library/typing.rst:1058
msgid "Special form for annotating higher-order functions."
msgstr "Särskilt formulär för annotering av funktioner av högre ordning."

#: ../../library/typing.rst:1060
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which"
" adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to a"
" :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` kan användas tillsammans med :ref:`Callable <annotating-"
"callables>` och :class:`ParamSpec` för att kommentera en högre ordningens "
"anropbar som lägger till, tar bort eller omvandlar parametrar i en annan "
"anropbar. Användningen är i form av ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` är för närvarande endast giltigt när "
"det används som det första argumentet till en :ref:`Callable <annotating-"
"callables>`. Den sista parametern till ``Concatenate`` måste vara en "
":class:`ParamSpec` eller ellips (``...``)."

#: ../../library/typing.rst:1069
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a "
":class:`threading.Lock` to the decorated function,  ``Concatenate`` can be "
"used to indicate that ``with_lock`` expects a callable which takes in a "
"``Lock`` as the first argument, and returns a callable with a different type"
" signature.  In this case, the :class:`ParamSpec` indicates that the "
"returned callable's parameter types are dependent on the parameter types of "
"the callable being passed in::"
msgstr ""
"Till exempel, för att annotera en dekorator ``with_lock`` som "
"tillhandahåller en :class:`threading.Lock` till den dekorerade funktionen, "
"kan ``Concatenate`` användas för att indikera att ``with_lock`` förväntar "
"sig en anropbar som tar in en ``Lock`` som första argument, och returnerar "
"en anropbar med en annan typsignatur.  I detta fall indikerar "
":class:`ParamSpec` att parametertyperna för den returnerade anropbara är "
"beroende av parametertyperna för den anropbara som skickas in::"

#: ../../library/typing.rst:1108 ../../library/typing.rst:1769
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""
":pep:`612` -- Variabler för parameterspecifikation (PEP:n som introducerade "
"``ParamSpec`` och ``Concatenate``)"

#: ../../library/typing.rst:1110
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../../library/typing.rst:1111 ../../library/typing.rst:1772
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1115
msgid "Special typing form to define \"literal types\"."
msgstr "Särskild typform för att definiera \"bokstavstyper\"."

#: ../../library/typing.rst:1117
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""
"``Literal`` kan användas för att indikera för typkontrollanter att det "
"annoterade objektet har ett värde som motsvarar en av de angivna "
"litteralerna."

#: ../../library/typing.rst:1133
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` kan inte underklassas. Vid körning tillåts ett godtyckligt "
"värde som typargument till ``Literal[...]``, men typkontrollanter kan införa"
" restriktioner. Se :pep:`586` för mer information om litterala typer."

#: ../../library/typing.rst:1139
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of"
" their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` avduplicerar nu parametrar.  Jämlikhetsjämförelser av "
"``Literal``\\ -objekt är inte längre beroende av ordning. ``Literal`` objekt"
" kommer nu att ge upphov till ett :exc:`TypeError` undantag under "
"jämlikhetsjämförelser om en av deras parametrar inte är :term:`hashable`."

#: ../../library/typing.rst:1147
msgid "Special type construct to mark class variables."
msgstr "Särskild typkonstruktion för att markera klassvariabler."

#: ../../library/typing.rst:1149
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Som introducerades i :pep:`526`, anger en variabelannotation omsluten av "
"ClassVar att ett visst attribut är avsett att användas som en klassvariabel "
"och inte bör ställas in på instanser av den klassen. Användning::"

#: ../../library/typing.rst:1157
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` accepterar endast typer och kan inte tecknas ytterligare."

#: ../../library/typing.rst:1159
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change "
"Python runtime behavior, but it can be used by third-party type checkers. "
"For example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` är inte en klass i sig, och bör inte användas med "
":func:`isinstance` eller :func:`issubclass`. :data:`ClassVar` ändrar inte "
"Pythons körtidsbeteende, men kan användas av tredjeparts typkontrollanter. "
"Till exempel kan en typkontrollant flagga följande kod som ett fel::"

#: ../../library/typing.rst:1173
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""
"Särskild typkonstruktion för att ange slutliga namn till typkontrollanter."

#: ../../library/typing.rst:1175
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class"
" scopes cannot be overridden in subclasses."
msgstr ""
"Slutnamn kan inte omfördelas i något scope. Slutnamn som deklareras i "
"klassens scope kan inte åsidosättas i underklasser."

#: ../../library/typing.rst:1189 ../../library/typing.rst:2582
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"Det finns ingen körtidskontroll av dessa egenskaper. Se :pep:`591` för mer "
"information."

#: ../../library/typing.rst:1196
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""
"Speciell typningskonstruktion för att markera en :class:`TypedDict`\\-nyckel"
" som nödvändig."

#: ../../library/typing.rst:1198
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict`"
" and :pep:`655` for more details."
msgstr ""
"Detta är främst användbart för ``total=False`` TypedDicts. Se "
":class:`TypedDict` och :pep:`655` för mer information."

#: ../../library/typing.rst:1205
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""
"Speciell typningskonstruktion för att markera en :class:`TypedDict`\\-nyckel"
" som potentiellt saknad."

#: ../../library/typing.rst:1208
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "Se :class:`TypedDict` och :pep:`655` för mer information."

#: ../../library/typing.rst:1214
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""
"Särskilt skrivformulär för att lägga till kontextspecifika metadata i en "
"annotering."

#: ../../library/typing.rst:1216
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in a"
" :attr:`!__metadata__` attribute."
msgstr ""
"Lägg till metadata ``x`` till en given typ ``T`` genom att använda "
"annotationen ``Annotated[T, x]``. Metadata som läggs till med ``Annotated`` "
"kan användas av statiska analysverktyg eller vid körning. Vid körning lagras"
" metadata i ett :attr:`!__metadata__`\\-attribut."

#: ../../library/typing.rst:1221
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no"
" special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code"
" that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"Om ett bibliotek eller verktyg stöter på en annotation ``Annotated[T, x]`` "
"och inte har någon speciell logik för metadata, bör det ignorera metadata "
"och helt enkelt behandla annotationen som ``T``. Som sådan kan ``Annotated``"
" vara användbar för kod som vill använda annotationer för ändamål utanför "
"Pythons statiska typningssystem."

#: ../../library/typing.rst:1227
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking"
" for a function or class."
msgstr ""
"Att använda ``Annotated[T, x]`` som en annotation tillåter fortfarande "
"statisk typkontroll av ``T``, eftersom typkontrollerna helt enkelt ignorerar"
" metadata ``x``. På så sätt skiljer sig ``Annotated`` från dekoratorn "
":func:`@no_type_check <no_type_check>`, som också kan användas för att lägga"
" till annotationer utanför typsystemets räckvidd, men som helt inaktiverar "
"typkontroll för en funktion eller klass."

#: ../../library/typing.rst:1234
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to"
" determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"Ansvaret för hur metadata ska tolkas ligger hos det verktyg eller bibliotek "
"som stöter på en ``Annotated``\\-annotation. Ett verktyg eller bibliotek som"
" stöter på en ``Annotated``\\-typ kan söka igenom metadataelementen för att "
"avgöra om de är av intresse (t.ex. med hjälp av :func:`isinstance`)."

#: ../../library/typing.rst:1242
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""
"Här är ett exempel på hur du kan använda ``Annotated`` för att lägga till "
"metadata till typannoteringar om du gör intervallanalys:"

#: ../../library/typing.rst:1255
msgid "Details of the syntax:"
msgstr ""

#: ../../library/typing.rst:1257
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:1259
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1268
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""
"Det är upp till det verktyg som konsumerar annotationerna att avgöra om "
"klienten får lägga till flera metadataelement i en annotation och hur dessa "
"annotationer ska slås samman."

#: ../../library/typing.rst:1272
msgid ""
"``Annotated`` must be subscripted with at least two arguments ( "
"``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1275
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../library/typing.rst:1282
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements"
" starts with the innermost annotation::"
msgstr ""
"Nästlade ``Annotated``\\-typer plattas ut. Ordningen på metadataelementen "
"börjar med den innersta annotationen::"

#: ../../library/typing.rst:1289
msgid "Duplicated metadata elements are not removed::"
msgstr "Duplicerade metadataelement tas inte bort:"

#: ../../library/typing.rst:1295
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr "``Annotated`` kan användas med nästlade och generiska alias:"

#: ../../library/typing.rst:1308
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""
"``Annotated`` kan inte användas med en uppackad :class:`TypeVarTuple`::"

#: ../../library/typing.rst:1312
msgid "This would be equivalent to::"
msgstr ""

#: ../../library/typing.rst:1316
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""

#: ../../library/typing.rst:1319
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"Som standard tar :func:`get_type_hints` bort metadata från annoteringar. "
"Passera ``include_extras=True`` för att få metadata bevarade:"

#: ../../library/typing.rst:1332
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""
"Vid körning kan de metadata som är associerade med en ``Annotated``\\-typ "
"hämtas via attributet :attr:`!__metadata__`:"

#: ../../library/typing.rst:1346
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - Flexibla funktions- och variabelannoteringar"

#: ../../library/typing.rst:1347
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "PEP som introducerar ``Annotated`` till standardbiblioteket."

#: ../../library/typing.rst:1354
msgid ""
"Special typing construct for marking user-defined type guard functions."
msgstr ""

#: ../../library/typing.rst:1356
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type"
" guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:1360
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static"
" type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1375
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a"
" type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1379
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"Att använda ``\\-> TypeGuard`` säger till den statiska typkontrollen att för"
" en given funktion:"

#: ../../library/typing.rst:1382
msgid "The return value is a boolean."
msgstr "Returvärdet är en boolean."

#: ../../library/typing.rst:1383
msgid ""
"If the return value is ``True``, the type of its argument is the type inside"
" ``TypeGuard``."
msgstr ""
"Om returvärdet är ``True``, är typen av dess argument den typ som finns i "
"``TypeGuard``."

#: ../../library/typing.rst:1400
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1404
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1410
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider"
" form. The main reason is to allow for things like narrowing "
"``list[object]`` to ``list[str]`` even though the latter is not a subtype of"
" the former, since ``list`` is invariant. The responsibility of writing "
"type-safe type guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1416
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""
"``TypeGuard`` fungerar även med typvariabler.  Se :pep:`647` för mer "
"information."

#: ../../library/typing.rst:1423
msgid ""
"Typing operator to conceptually mark an object as having been unpacked."
msgstr ""
"Typoperator för att konceptuellt markera att ett objekt har packats upp."

#: ../../library/typing.rst:1425
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""
"Om du till exempel använder uppackningsoperatorn ``*`` på en "
":ref:`typvariabel-tupel <typevartuple>` är det likvärdigt med att använda "
"``Unpack`` för att markera att typvariabel-tupeln har packats upp::"

#: ../../library/typing.rst:1434
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context of"
" :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"I själva verket kan ``Unpack`` användas omväxlande med ``*`` i samband med "
":class:`typing.TypeVarTuple <TypeVarTuple>` och :class:`builtins.tuple "
"<tuple>` typer. Du kan se ``Unpack`` användas explicit i äldre versioner av "
"Python, där ``*`` inte kunde användas på vissa ställen::"

#: ../../library/typing.rst:1451
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1453
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types."
msgstr ""

#: ../../library/typing.rst:1459
msgid "Abstract base class for generic types."
msgstr "Abstrakt basklass för generiska typer."

#: ../../library/typing.rst:1461
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:1470
msgid "This class can then be used as follows::"
msgstr "Denna klass kan sedan användas på följande sätt::"

#: ../../library/typing.rst:1485
msgid "Type variable."
msgstr "Typ av variabel."

#: ../../library/typing.rst:1487 ../../library/typing.rst:1584
#: ../../library/typing.rst:1694 ../../library/typing.rst:1808
#: ../../library/typing.rst:1879 ../../library/typing.rst:2766
msgid "Usage::"
msgstr "Användning::"

#: ../../library/typing.rst:1493
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""
"Typvariabler är främst till för att underlätta för statiska "
"typkontrollanter.  De fungerar som parametrar för generiska typer samt för "
"generiska funktions- och typaliasdefinitioner. Se :class:`Generic` för mer "
"information om generiska typer.  Generiska funktioner fungerar på följande "
"sätt::"

#: ../../library/typing.rst:1514
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1517
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1521
msgid ""
"Bound type variables and constrained type variables have different semantics"
" in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1536
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1544
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can"
" only ever be solved as being exactly one of the constraints given::"
msgstr ""
"Att använda en *begränsad* typvariabel innebär dock att ``TypVar`` bara "
"någonsin kan lösas som exakt en av de begränsningar som anges::"

#: ../../library/typing.rst:1555
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""
"Vid körning kommer ``isinstance(x, T)`` att ge upphov till :exc:`TypeError`."

#: ../../library/typing.rst:1559
msgid "The name of the type variable."
msgstr "Namnet på typvariabeln."

#: ../../library/typing.rst:1563
msgid "Whether the type var has been marked as covariant."
msgstr ""

#: ../../library/typing.rst:1567
msgid "Whether the type var has been marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1571
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1575
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""
"En tupel som innehåller begränsningarna för typvariabeln, om sådana finns."

#: ../../library/typing.rst:1581
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""
"Typvariabel-tupel. En specialiserad form av :ref:`typvariabel <typevar>` som"
" möjliggör *variadisk* generik."

#: ../../library/typing.rst:1592
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"En normal typvariabel möjliggör parametrisering med en enda typ. En "
"typvariabel-tupel, däremot, tillåter parameterisering med ett *viljilöst* "
"antal typer genom att fungera som ett *viljilöst* antal typvariabler som är "
"förpackade i en tupel. Till exempel::"

#: ../../library/typing.rst:1614
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, T2, "
"...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"Notera användningen av uppackningsoperatorn ``*`` i ``tuple[T, *Ts]``. "
"Konceptuellt kan du tänka på ``Ts`` som en tupel av typvariabler ``(T1, T2, "
"...)``. ``tuple[T, *Ts]`` skulle då bli ``tuple[T, *(T1, T2, ...)]``, vilket"
" är likvärdigt med ``tuple[T, T1, T2, ...]``. (Observera att i äldre "
"versioner av Python kan du se detta skrivet med :data:`Unpack <Unpack>` "
"istället, som ``Unpack[Ts]``.)"

#: ../../library/typing.rst:1622
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""
"Typvariabeltuples måste *alltid* vara uppackade. Detta hjälper till att "
"skilja typvariabeltuples från vanliga typvariabler::"

#: ../../library/typing.rst:1629
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""
"Typvariabeltuples kan användas i samma sammanhang som vanliga typvariabler. "
"Till exempel i klassdefinitioner, argument och returtyper::"

#: ../../library/typing.rst:1638
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr "Typvariabeltuples kan kombineras med vanliga typvariabler:"

#: ../../library/typing.rst:1657
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""
"Observera dock att högst en typvariabel-tupel kan förekomma i en enda lista "
"med typargument eller typparametrar::"

#: ../../library/typing.rst:1664
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""
"Slutligen kan en uppackad typvariabel-tupel användas som typannotering för "
"``*args``::"

#: ../../library/typing.rst:1674
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"I motsats till icke-uppackade annoteringar av ``*args`` - t.ex. ``*args: "
"int``, som skulle ange att *alla* argument är ``int`` - ``*args: *Ts`` "
"möjliggör referens till typerna av de *individuella* argumenten i ``*args``."
" Här tillåter detta oss att säkerställa att typerna av ``*args`` som skickas"
" till ``call_soon`` matchar typerna av (positionella) argument i "
"``callback``."

#: ../../library/typing.rst:1681
msgid "See :pep:`646` for more details on type variable tuples."
msgstr "Se :pep:`646` för mer information om typvariabeltuples."

#: ../../library/typing.rst:1685
msgid "The name of the type variable tuple."
msgstr "Namnet på typvariabeln tuple."

#: ../../library/typing.rst:1691
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""
"Variabel för parameterspecifikation.  En specialiserad version av "
":ref:`typvariabler <typevar>`."

#: ../../library/typing.rst:1698
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable"
" to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the"
" first argument to ``Callable``, or as parameters for user-defined Generics."
"  See :class:`Generic` for more information on generic types."
msgstr ""
"Parameterspecifikationsvariabler är främst till för att underlätta för "
"statiska typkontrollanter.  De används för att vidarebefordra "
"parametertyperna för en anropbar till en annan anropbar -- ett mönster som "
"är vanligt förekommande i högre ordningens funktioner och dekoratorer.  De "
"är endast giltiga när de används i ``Concatenate``, eller som det första "
"argumentet till ``Callable``, eller som parametrar för användardefinierade "
"Generics.  Se :class:`Generic` för mer information om generiska typer."

#: ../../library/typing.rst:1705
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable"
" tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Om man t.ex. vill lägga till grundläggande loggning i en funktion kan man "
"skapa en dekorator ``add_logging`` för att logga funktionsanrop.  "
"Parameterspecifikationsvariabeln talar om för typkontrollen att den "
"anropsbarhet som skickas till dekoratorn och den nya anropsbarhet som "
"returneras av den har typparametrar som är beroende av varandra::"

#: ../../library/typing.rst:1729
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1733
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"Typkontrollen kan inte typkontrollera funktionen ``inner`` eftersom "
"``*args`` och ``**kwargs`` måste vara typade :data:`Any`."

#: ../../library/typing.rst:1735
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` kan krävas i kroppen av ``add_logging`` dekoratorn när den "
"returnerar ``inner`` funktionen, eller så måste den statiska typkontrollen "
"sägas att ignorera ``return inner``."

#: ../../library/typing.rst:1742
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, "
"``P.args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and "
":class:`ParamSpecKwargs`."
msgstr ""
"Eftersom ``ParamSpec`` fångar både positionella parametrar och "
"nyckelordsparametrar kan ``P.args`` och ``P.kwargs`` användas för att dela "
"upp en ``ParamSpec`` i dess komponenter.  ``P.args`` representerar tupeln av"
" positionella parametrar i ett givet anrop och bör endast användas för att "
"annotera ``*args``.  ``P.kwargs`` representerar mappningen av "
"nyckelordsparametrar till deras värden i ett givet anrop och bör endast "
"användas för att annotera ``**kwargs``.  Båda attributen kräver att den "
"annoterade parametern är i scope. Vid körning är ``P.args`` och ``P.kwargs``"
" instanser av :class:`ParamSpecArgs` respektive :class:`ParamSpecKwargs`."

#: ../../library/typing.rst:1754
msgid "The name of the parameter specification."
msgstr "Namnet på parameterspecifikationen."

#: ../../library/typing.rst:1756
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to "
":class:`TypeVar`.  However the actual semantics of these keywords are yet to"
" be decided."
msgstr ""
"Parameterspecifikationsvariabler skapade med ``covariant=True`` eller "
"``contravariant=True`` kan användas för att deklarera kovarianta eller "
"kontravarianta generiska typer.  Argumentet ``bound`` accepteras också, på "
"samma sätt som för :class:`TypeVar`.  Den faktiska semantiken för dessa "
"nyckelord är dock ännu inte fastställd."

#: ../../library/typing.rst:1765
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Endast parameterspecifika variabler som definieras i global omfattning kan "
"picklas."

#: ../../library/typing.rst:1771
msgid ":data:`Concatenate`"
msgstr ":data:`Koncatenate`"

#: ../../library/typing.rst:1777
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The "
"``P.args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``,"
" and ``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended "
"for runtime introspection and have no special meaning to static type "
"checkers."
msgstr ""
"Attribut för argument och nyckelordsargument för en :class:`ParamSpec`. "
"Attributet ``P.args`` för en ``ParamSpec`` är en instans av "
"``ParamSpecArgs``, och ``P.kwargs`` är en instans av ``ParamSpecKwargs``. De"
" är avsedda för introspektion under körning och har ingen särskild betydelse"
" för statiska typkontroller."

#: ../../library/typing.rst:1782
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""
"Anrop av :func:`get_origin` på något av dessa objekt kommer att returnera "
"den ursprungliga ``ParamSpec``:"

#: ../../library/typing.rst:1798
msgid "Other special directives"
msgstr "Andra särskilda direktiv"

#: ../../library/typing.rst:1800
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""
"Dessa funktioner och klasser ska inte användas direkt som annotationer. "
"Deras avsedda syfte är att vara byggstenar för att skapa och deklarera "
"typer."

#: ../../library/typing.rst:1806
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Typad version av :func:`collections.namedtuple`."

#: ../../library/typing.rst:1814
msgid "This is equivalent to::"
msgstr "Detta är likvärdigt med::"

#: ../../library/typing.rst:1818
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"För att ge ett fält ett standardvärde kan du tilldela det i klassen body::"

#: ../../library/typing.rst:1827
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Fält med ett standardvärde måste komma efter alla fält utan standardvärde."

#: ../../library/typing.rst:1829
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict"
" that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"Den resulterande klassen har ett extra attribut ``__annotations__`` som ger "
"en dict som mappar fältnamnen till fälttyperna.  (Fältnamnen finns i "
"attributet ``_fields`` och standardvärdena finns i attributet "
"``_field_defaults``, som båda är en del av :func:`~collections.namedtuple` "
"API)"

#: ../../library/typing.rst:1835
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` subklasser kan också ha docstrings och metoder::"

#: ../../library/typing.rst:1845
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "``NamedTuple`` subklasser kan vara generiska::"

#: ../../library/typing.rst:1851
msgid "Backward-compatible usage::"
msgstr "Bakåtkompatibel användning::"

#: ../../library/typing.rst:1855
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "Lagt till stöd för :pep:`526` variabelannotationssyntax."

#: ../../library/typing.rst:1858
msgid "Added support for default values, methods, and docstrings."
msgstr "Stöd för standardvärden, metoder och docstrings har lagts till."

#: ../../library/typing.rst:1861
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Attributen ``_field_types`` och ``__annotations__`` är nu vanliga ordböcker "
"istället för instanser av ``OrderedDict``."

#: ../../library/typing.rst:1865
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Attributet ``_field_types`` har tagits bort till förmån för det mer "
"standardiserade attributet ``__annotations__`` som innehåller samma "
"information."

#: ../../library/typing.rst:1869
msgid "Added support for generic namedtuples."
msgstr "Lagt till stöd för generiska namntuples."

#: ../../library/typing.rst:1874
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""
"Hjälpklass för att skapa låga kostnader :ref:`distinct types <distinct>`."

#: ../../library/typing.rst:1876
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""
"En ``NewType`` betraktas som en distinkt typ av en typkontrollör. Vid "
"körning returnerar dock anrop av en ``NewType`` dess argument oförändrat."

#: ../../library/typing.rst:1886
msgid "The module in which the new type is defined."
msgstr "Den modul i vilken den nya typen definieras."

#: ../../library/typing.rst:1890
msgid "The name of the new type."
msgstr "Namnet på den nya typen."

#: ../../library/typing.rst:1894
msgid "The type that the new type is based on."
msgstr "Den typ som den nya typen är baserad på."

#: ../../library/typing.rst:1898
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` är nu en klass snarare än en funktion."

#: ../../library/typing.rst:1903
msgid "Base class for protocol classes."
msgstr "Basklass för protokollklasser."

#: ../../library/typing.rst:1905
msgid "Protocol classes are defined like this::"
msgstr "Protokollklasserna definieras på följande sätt::"

#: ../../library/typing.rst:1911
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Sådana klasser används främst med statiska typkontrollprogram som känner "
"igen strukturell subtypning (statisk duck-typning), t.ex:"

#: ../../library/typing.rst:1923
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with "
":func:`runtime_checkable` (described later) act as simple-minded runtime "
"protocols that check only the presence of given attributes, ignoring their "
"type signatures."
msgstr ""

#: ../../library/typing.rst:1928
msgid "Protocol classes can be generic, for example::"
msgstr "Protokollklasserna kan vara generiska, till exempel::"

#: ../../library/typing.rst:1940
msgid "Mark a protocol class as a runtime protocol."
msgstr "Markera en protokollklass som ett runtime-protokoll."

#: ../../library/typing.rst:1942
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as "
":class:`~collections.abc.Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:1962
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, "
":class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass`"
" check against :ref:`Callable <annotating-callables>`. However, the "
"``ssl.SSLObject.__init__`` method exists only to raise a :exc:`TypeError` "
"with a more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` kontrollerar endast förekomsten av de nödvändiga "
"metoderna eller attributen, inte deras typsignaturer eller typer. Till "
"exempel är :class:`ssl.SSLObject` en klass, därför klarar den en "
":func:`issubclass`\\-kontroll mot :ref:`Callable <annotating-callables>`. "
"Men metoden ``ssl.SSLObject.__init__`` existerar bara för att ge upphov till"
" ett :exc:`TypeError` med ett mer informativt meddelande, vilket gör det "
"omöjligt att anropa (instansiera) :class:`ssl.SSLObject`."

#: ../../library/typing.rst:1973
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"En :func:`isinstance`\\-kontroll mot ett protokoll som kan kontrolleras "
"under körtiden kan vara förvånansvärt långsam jämfört med en "
"``isinstance()``\\-kontroll mot en icke-protokollklass. Överväg att använda "
"alternativa idiom som :func:`hasattr`\\-anrop för strukturella kontroller i "
"prestandakänslig kod."

#: ../../library/typing.rst:1984
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Specialkonstruktion för att lägga till typtips i en ordbok. Vid körning är "
"det en vanlig :class:`dict`."

#: ../../library/typing.rst:1987
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` deklarerar en ordbokstyp som förväntar sig att alla dess "
"instanser ska ha en viss uppsättning nycklar, där varje nyckel är associerad"
" med ett värde av en konsekvent typ. Denna förväntan kontrolleras inte vid "
"körning utan verkställs endast av typkontrollanter. Användning::"

#: ../../library/typing.rst:2003
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../library/typing.rst:2007
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../library/typing.rst:2011
msgid "Using keyword arguments::"
msgstr ""

#: ../../library/typing.rst:2018
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""

#: ../../library/typing.rst:2019
msgid ""
"The functional syntax should also be used when any of the keys are not valid"
" :ref:`identifiers <identifiers>`, for example because they are keywords or "
"contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:2031
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"Som standard måste alla nycklar finnas i en ``TypedDict``. Det är möjligt "
"att markera enskilda nycklar som icke-obligatoriska med "
":data:`NotRequired`::"

#: ../../library/typing.rst:2042
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""
"Detta innebär att en ``Point2D`` ``TypedDict`` kan ha nyckeln ``label`` "
"utelämnad."

#: ../../library/typing.rst:2045
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""
"Det är också möjligt att markera alla nycklar som icke nödvändiga som "
"standard genom att ange ett antal ``False``::"

#: ../../library/typing.rst:2055
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Detta innebär att en ``Point2D`` ``TypedDict`` kan ha någon av nycklarna "
"utelämnad. En typkontroll förväntas endast stödja en bokstavlig ``False`` "
"eller ``True`` som värdet av ``total`` argumentet. ``True`` är standard och "
"gör att alla objekt som definieras i klassens kropp är obligatoriska."

#: ../../library/typing.rst:2060
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required"
" using :data:`Required`::"
msgstr ""
"Enskilda nycklar i en ``TypedDict`` med ``total=False`` kan markeras som "
"obligatoriska med :data:`Required`::"

#: ../../library/typing.rst:2075
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"Det är möjligt för en typ av ``TypedDict`` att ärva från en eller flera "
"andra typer av ``TypedDict`` med hjälp av den klassbaserade syntaxen. "
"Användning::"

#: ../../library/typing.rst:2082
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""
"``Point3D`` har tre objekt: ``x``, ``y`` och ``z``. Den är ekvivalent med "
"denna definition::"

#: ../../library/typing.rst:2090
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except for"
" :class:`Generic`. For example::"
msgstr ""
"En ``TypedDict`` kan inte ärva från en icke ``TypedDict``\\-klass, förutom "
":class:`Generic``. Till exempel::"

#: ../../library/typing.rst:2105
msgid "A ``TypedDict`` can be generic:"
msgstr ""

#: ../../library/typing.rst:2115
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see "
":ref:`annotations-howto` for more information on annotations best "
"practices), :attr:`__total__`, :attr:`__required_keys__`, and "
":attr:`__optional_keys__`."
msgstr ""
"En ``TypedDict`` kan introspekteras via annotationsdict (se "
":ref:`annotations-howto` för mer information om bästa praxis för "
"annotationer), :attr:`__total__`, :attr:`__required_keys__` och "
":attr:`__optional_keys__`."

#: ../../library/typing.rst:2121
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr "``Point2D.__total__`` ger värdet av argumentet ``total``. Exempel:"

#: ../../library/typing.rst:2137
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to True may have keys "
"marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to use"
" :attr:`__required_keys__` and :attr:`__optional_keys__` for introspection."
msgstr ""

#: ../../library/typing.rst:2150
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return "
":class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` och ``Point2D.__optional_keys__`` returnerar "
":class:`frozenset`\\-objekt som innehåller obligatoriska respektive icke-"
"obligatoriska nycklar."

#: ../../library/typing.rst:2153
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"Nycklar som är markerade med :data:`Required` kommer alltid att visas i "
"``__required_keys__`` och nycklar som är markerade med :data:`NotRequired`` "
"kommer alltid att visas i ``__optional_keys__``."

#: ../../library/typing.rst:2156
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""
"För bakåtkompatibilitet med Python 3.10 och lägre är det också möjligt att "
"använda arv för att deklarera både obligatoriska och icke-obligatoriska "
"nycklar i samma ``TypedDict``. Detta görs genom att deklarera en "
"``TypedDict`` med ett värde för argumentet ``total`` och sedan ärva från den"
" i en annan ``TypedDict`` med ett annat värde för ``total``:"

#: ../../library/typing.rst:2181
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and"
" ``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""
"Om ``from __future__ import annotations`` används eller om annoteringar "
"anges som strängar, utvärderas inte annoteringarna när ``TypedDict`` "
"definieras. Därför kan det hända att den introspektion under körning som "
"``__required_keys__`` och ``__optional_keys__`` förlitar sig på inte "
"fungerar korrekt, och attributens värden kan vara felaktiga."

#: ../../library/typing.rst:2187
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:2191
msgid ""
"Added support for marking individual keys as :data:`Required` or "
":data:`NotRequired`. See :pep:`655`."
msgstr ""
"Lagt till stöd för att markera enskilda nycklar som :data:`Required` eller "
":data:`NotRequired`. Se :pep:`655`."

#: ../../library/typing.rst:2195
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "Lagt till stöd för generiska ``TypedDict``."

#: ../../library/typing.rst:2199
msgid "Protocols"
msgstr "Protokoll"

#: ../../library/typing.rst:2201
msgid ""
"The following protocols are provided by the typing module. All are decorated"
" with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

#: ../../library/typing.rst:2206
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"En ABC med en abstrakt metod ``__abs__`` som är kovariant i sin returtyp."

#: ../../library/typing.rst:2211
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "En ABC med en abstrakt metod ``__bytes__``."

#: ../../library/typing.rst:2215
msgid "An ABC with one abstract method ``__complex__``."
msgstr "En ABC med en abstrakt metod ``__complex__``."

#: ../../library/typing.rst:2219
msgid "An ABC with one abstract method ``__float__``."
msgstr "En ABC med en abstrakt metod ``__float__``."

#: ../../library/typing.rst:2223
msgid "An ABC with one abstract method ``__index__``."
msgstr "En ABC med en abstrakt metod ``__index__``."

#: ../../library/typing.rst:2229
msgid "An ABC with one abstract method ``__int__``."
msgstr "En ABC med en abstrakt metod ``__int__``."

#: ../../library/typing.rst:2233
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"En ABC med en abstrakt metod ``__round__`` som är kovariant i sin returtyp."

#: ../../library/typing.rst:2237
msgid "ABCs for working with IO"
msgstr ""

#: ../../library/typing.rst:2243
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../library/typing.rst:2249
msgid "Functions and decorators"
msgstr "Funktioner och dekoratorer"

#: ../../library/typing.rst:2253
msgid "Cast a value to a type."
msgstr "Kasta ett värde till en typ."

#: ../../library/typing.rst:2255
msgid ""
"This returns the value unchanged.  To the type checker this signals that the"
" return value has the designated type, but at runtime we intentionally don't"
" check anything (we want this to be as fast as possible)."
msgstr ""
"Detta returnerar värdet oförändrat.  För typkontrollanten signalerar detta "
"att returvärdet har den angivna typen, men vid körning kontrollerar vi "
"avsiktligt ingenting (vi vill att det ska gå så snabbt som möjligt)."

#: ../../library/typing.rst:2262
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""
"Be en statisk typkontrollör att bekräfta att *val* har en härledd typ av "
"*typ*."

#: ../../library/typing.rst:2264
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""
"Vid körning gör detta ingenting: det returnerar det första argumentet "
"oförändrat utan kontroller eller sidoeffekter, oavsett argumentets faktiska "
"typ."

#: ../../library/typing.rst:2267
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""
"När en statisk typkontrollör stöter på ett anrop till ``assert_type()``, "
"avger den ett fel om värdet inte är av den angivna typen::"

#: ../../library/typing.rst:2274
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""
"Denna funktion är användbar för att säkerställa att typkontrollantens "
"förståelse av ett skript är i linje med utvecklarens avsikter::"

#: ../../library/typing.rst:2288
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr "Be en statisk typkontroll att bekräfta att en kodrad är oåtkomlig."

#: ../../library/typing.rst:2290
msgid "Example::"
msgstr "Exempel::"

#: ../../library/typing.rst:2301
msgid ""
"Here, the annotations allow the type checker to infer that the last case can"
" never execute, because ``arg`` is either an :class:`int` or a :class:`str`,"
" and both options are covered by earlier cases."
msgstr ""
"Här gör annotationerna det möjligt för typkontrollen att dra slutsatsen att "
"det sista fallet aldrig kan utföras, eftersom ``arg`` antingen är en "
":class:`int` eller en :class:`str`, och båda alternativen täcks av tidigare "
"fall."

#: ../../library/typing.rst:2306
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing"
" out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""
"Om en typkontrollör upptäcker att ett anrop till ``assert_never()`` är "
"nåbart, kommer den att avge ett felmeddelande. Till exempel, om "
"typannoteringen för ``arg`` istället var ``int | str | float``, skulle "
"typkontrollen avge ett felmeddelande som påpekar att ``unreachable`` är av "
"typen :class:`float`. För att ett anrop till ``assert_never`` ska klara "
"typkontrollen måste den härledda typen av argumentet som skickas in vara "
"bottentypen, :data:`Never`, och inget annat."

#: ../../library/typing.rst:2314
msgid "At runtime, this throws an exception when called."
msgstr "Vid körning kastar detta ett undantag när det anropas."

#: ../../library/typing.rst:2317
msgid ""
"`Unreachable Code and Exhaustiveness Checking "
"<https://typing.readthedocs.io/en/latest/source/unreachable.html>`__ has "
"more information about exhaustiveness checking with static typing."
msgstr ""

#: ../../library/typing.rst:2325
msgid ""
"Ask a static type checker to reveal the inferred type of an expression."
msgstr ""
"Be en statisk typkontrollör att avslöja den härledda typen för ett uttryck."

#: ../../library/typing.rst:2327
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""
"När en statisk typkontrollör stöter på ett anrop till denna funktion avger "
"den en diagnostik med den härledda typen av argumentet. Till exempel::"

#: ../../library/typing.rst:2333
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""
"Detta kan vara användbart när du vill felsöka hur din typkontroll hanterar "
"en viss kod."

#: ../../library/typing.rst:2336
msgid ""
"At runtime, this function prints the runtime type of its argument to "
":data:`sys.stderr` and returns the argument unchanged (allowing the call to "
"be used within an expression)::"
msgstr ""
"Vid körning skriver denna funktion ut körtidstypen för sitt argument till "
":data:`sys.stderr` och returnerar argumentet oförändrat (vilket gör att "
"anropet kan användas inom ett uttryck)::"

#: ../../library/typing.rst:2343
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""
"Observera att körtidstypen kan skilja sig från (mer eller mindre specifik "
"än) den typ som statiskt härleds av en typkontroll."

#: ../../library/typing.rst:2346
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""
"De flesta typkontrollprogram stöder ``reveal_type()`` var som helst, även om"
" namnet inte importeras från ``typing``. Att importera namnet från "
"``typing`` gör dock att din kod kan köras utan körtidsfel och kommunicerar "
"avsikten tydligare."

#: ../../library/typing.rst:2357
msgid ""
"Decorator to mark an object as providing :func:`dataclass "
"<dataclasses.dataclass>`-like behavior."
msgstr ""
"Dekorator för att markera att ett objekt har ett :func:`dataklass "
"<dataclasses.dataclass>`\\-liknande beteende."

#: ../../library/typing.rst:2360
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""
"``dataclass_transform`` kan användas för att dekorera en klass, metaklass "
"eller en funktion som i sig är en dekorator. Närvaron av "
"``@dataclass_transform()`` talar om för en statisk typkontrollant att det "
"dekorerade objektet utför \"magi\" under körning som transformerar en klass "
"på ett liknande sätt som :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>`."

#: ../../library/typing.rst:2367
msgid "Example usage with a decorator function:"
msgstr "Exempel på användning med en dekoratorfunktion:"

#: ../../library/typing.rst:2383
msgid "On a base class::"
msgstr "På en basklass::"

#: ../../library/typing.rst:2392
msgid "On a metaclass::"
msgstr "På en metaklass::"

#: ../../library/typing.rst:2403
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers"
" similarly to classes created with :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>`. For example, type checkers will assume these "
"classes have ``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"Klasserna ``CustomerModel`` som definieras ovan kommer att behandlas av "
"typkontrollprogram på samma sätt som klasser som skapats med "
":func:`@dataclasses.dataclass <dataclasses.dataclass>`. Exempelvis kommer "
"typkontrollerna att anta att dessa klasser har ``__init__``\\-metoder som "
"accepterar ``id`` och ``name``."

#: ../../library/typing.rst:2409
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would"
" have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` "
"decorator: ``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, "
"``match_args``, ``kw_only``, and ``slots``. It must be possible for the "
"value of these arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"Den dekorerade klassen, metaklassen eller funktionen kan acceptera följande "
"bool-argument som typkontrollanter kommer att anta har samma effekt som de "
"skulle ha på "
":func:`@dataclasses.dataclass<dataclasses.dataclass>`\\-dekoratorn: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only`` och ``slots``. Det måste vara möjligt att statiskt utvärdera "
"värdet av dessa argument (``True`` eller ``False``)."

#: ../../library/typing.rst:2417
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""
"Argumenten till dekoratorn ``dataclass_transform`` kan användas för att "
"anpassa standardbeteendena för den dekorerade klassen, metaklassen eller "
"funktionen:"

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "Parametrar"

#: ../../library/typing.rst:2421
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""
"Anger om parametern ``eq`` ska antas vara ``True`` eller ``False`` om den "
"utelämnas av anroparen. Standardvärdet är ``True``."

#: ../../library/typing.rst:2426
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Anger om parametern ``order`` ska antas vara ``True`` eller ``False`` om den"
" utelämnas av den som anropar. Standardvärdet är ``False``."

#: ../../library/typing.rst:2431
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Anger om parametern ``kw_only`` ska antas vara ``True`` eller ``False`` om "
"den utelämnas av den som anropar. Standardvärdet är ``False``."

#: ../../library/typing.rst:2436
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""
"Anger en statisk lista över klasser eller funktioner som stöds och som "
"beskriver fält, liknande :func:`dataclasses.field`. Standardvärdet är "
"``()``."

#: ../../library/typing.rst:2442
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""
"Godtyckliga andra nyckelordsargument accepteras för att möjliggöra "
"eventuella framtida tillägg."

#: ../../library/typing.rst:2446
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""
"Typkontroller känner igen följande valfria parametrar på fältspecifikatorer:"

#: ../../library/typing.rst:2449
msgid "**Recognised parameters for field specifiers**"
msgstr "**Erkända parametrar för fältangivelser**"

#: ../../library/typing.rst:2453
msgid "Parameter name"
msgstr "Parameternamn"

#: ../../library/typing.rst:2454
msgid "Description"
msgstr "Beskrivning"

#: ../../library/typing.rst:2455
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:2456
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""
"Anger om fältet ska ingå i den syntetiserade metoden ``__init__``. Om inget "
"anges är ``init`` standardvärdet ``True``."

#: ../../library/typing.rst:2459
msgid "``default``"
msgstr "``standard``"

#: ../../library/typing.rst:2460
msgid "Provides the default value for the field."
msgstr "Anger standardvärdet för fältet."

#: ../../library/typing.rst:2461
msgid "``default_factory``"
msgstr "``standard_fabrik``"

#: ../../library/typing.rst:2462
msgid ""
"Provides a runtime callback that returns the default value for the field. If"
" neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class"
" is instantiated."
msgstr ""
"Tillhandahåller ett runtime callback som returnerar standardvärdet för "
"fältet. Om varken ``default`` eller ``default_factory`` anges, antas fältet "
"inte ha något standardvärde och måste förses med ett värde när klassen "
"instansieras."

#: ../../library/typing.rst:2467
msgid "``factory``"
msgstr "\"fabrik"

#: ../../library/typing.rst:2468
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr "Ett alias för parametern ``default_factory`` på fältspecifikatorer."

#: ../../library/typing.rst:2469
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:2470
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"Anger om fältet ska markeras som endast nyckelord. Om ``True``, kommer "
"fältet att vara nyckelordsskyddat. Om ``False``, kommer det inte att vara "
"nyckelordsskyddat. Om det är ospecificerat, kommer värdet på parametern "
"``kw_only`` på objektet som dekorerats med ``dataclass_transform`` att "
"användas, eller om det är ospecificerat, kommer värdet på "
"``kw_only_default`` på ``dataclass_transform`` att användas."

#: ../../library/typing.rst:2476
msgid "``alias``"
msgstr "``alias``"

#: ../../library/typing.rst:2477
msgid ""
"Provides an alternative name for the field. This alternative name is used in"
" the synthesized ``__init__`` method."
msgstr ""
"Anger ett alternativt namn för fältet. Detta alternativa namn används i den "
"syntetiserade metoden ``__init__``."

#: ../../library/typing.rst:2480
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""
"Vid körning registrerar denna dekorator sina argument i attributet "
"``__dataclass_transform__`` på det dekorerade objektet. Den har ingen annan "
"effekt under körning."

#: ../../library/typing.rst:2484
msgid "See :pep:`681` for more details."
msgstr "Se :pep:`681` för mer information."

#: ../../library/typing.rst:2492
msgid "Decorator for creating overloaded functions and methods."
msgstr "Dekorator för att skapa överladdade funktioner och metoder."

#: ../../library/typing.rst:2494
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method)."
msgstr ""
"Dekoratorn ``@overload`` gör det möjligt att beskriva funktioner och metoder"
" som stöder flera olika kombinationer av argumenttyper. En serie "
"definitioner med dekoratorn ``@overload`` måste följas av exakt en "
"definition utan dekoratorn ``@overload`` (för samma funktion/metod)."

#: ../../library/typing.rst:2499
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise "
":exc:`NotImplementedError`."
msgstr ""
"Definitioner med `@overload`\\-dekoration är endast till för typkontroll, "
"eftersom de kommer att skrivas över av definitioner utan "
"`@overload`\\-dekoration. Definitioner utan `@overload`\\-dekoration kommer "
"däremot att användas vid körning, men bör ignoreras av typkontrollen. Vid "
"körning kommer ett direkt anrop av en funktion med `@overload`\\-dekoration "
"att generera :exc:`NotImplementedError`."

#: ../../library/typing.rst:2507
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""
"Ett exempel på överbelastning som ger en mer exakt typ än vad som kan "
"uttryckas med hjälp av en union eller en typvariabel:"

#: ../../library/typing.rst:2524
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""
"Se :pep:`484` för mer information och jämförelse med annan typningssemantik."

#: ../../library/typing.rst:2526
msgid ""
"Overloaded functions can now be introspected at runtime using "
":func:`get_overloads`."
msgstr ""
"Överladdade funktioner kan nu introspekteras vid körning med "
":func:`get_overloads`."

#: ../../library/typing.rst:2533
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""
"Returnerar en sekvens av :func:`@overload <overload>`\\ -dekorerade "
"definitioner för *func*."

#: ../../library/typing.rst:2536
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"*func* är funktionsobjektet för implementeringen av den överladdade "
"funktionen. Till exempel, givet definitionen av ``process`` i "
"dokumentationen för :func:`@overload <overload>`, kommer "
"``get_overloads(process)`` att returnera en sekvens av tre funktionsobjekt "
"för de tre definierade överbelastningarna. Om den anropas på en funktion "
"utan överbelastningar returnerar ``get_overloads()`` en tom sekvens."

#: ../../library/typing.rst:2543
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""
"``get_overloads()`` kan användas för att introspektera en överbelastad "
"funktion under körning."

#: ../../library/typing.rst:2551
msgid "Clear all registered overloads in the internal registry."
msgstr "Rensa alla registrerade överbelastningar i det interna registret."

#: ../../library/typing.rst:2553
msgid "This can be used to reclaim the memory used by the registry."
msgstr "Detta kan användas för att återta det minne som används av registret."

#: ../../library/typing.rst:2560
msgid "Decorator to indicate final methods and final classes."
msgstr "Dekorator för att ange slutgiltiga metoder och slutgiltiga klasser."

#: ../../library/typing.rst:2562
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""
"Att dekorera en metod med ``@final`` indikerar för en typkontrollant att "
"metoden inte kan åsidosättas i en underklass. Att dekorera en klass med "
"``@final`` indikerar att den inte kan subklassas."

#: ../../library/typing.rst:2587
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\","
" False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"Dekoratorn kommer nu att försöka sätta attributet ``__final__`` till "
"``True`` på det dekorerade objektet. Således kan en kontroll som ``if "
"getattr(obj, \"__final__\", False)`` användas vid runtime för att avgöra om "
"ett objekt ``obj`` har markerats som final. Om det dekorerade objektet inte "
"har stöd för att sätta attribut, returnerar dekoratorn objektet oförändrat "
"utan att skapa ett undantag."

#: ../../library/typing.rst:2598
msgid "Decorator to indicate that annotations are not type hints."
msgstr "Dekorator för att ange att annotationer inte är typtips."

#: ../../library/typing.rst:2600
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""
"Detta fungerar som en klass eller funktion :term:`decorator`.  För en klass "
"gäller den rekursivt för alla metoder och klasser som definieras i den "
"klassen (men inte för metoder som definieras i dess superklasser eller "
"subklasser). Typkontrollanter ignorerar alla annoteringar i en funktion "
"eller klass med denna dekorator."

#: ../../library/typing.rst:2606
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr "``@no_type_check`` muterar det dekorerade objektet på plats."

#: ../../library/typing.rst:2610
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""
"Dekorator för att ge en annan dekorator :func:`no_type_check`\\-effekten."

#: ../../library/typing.rst:2612
msgid ""
"This wraps the decorator with something that wraps the decorated function in"
" :func:`no_type_check`."
msgstr ""
"Detta omsluter dekoratorn med något som omsluter den dekorerade funktionen i"
" :func:`no_type_check`."

#: ../../library/typing.rst:2617
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""
"Dekorator för att markera att en klass eller funktion inte är tillgänglig "
"vid körning."

#: ../../library/typing.rst:2619
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"Denna dekorator är i sig inte tillgänglig vid körning. Den är främst avsedd "
"att markera klasser som definieras i typstub-filer om en implementation "
"returnerar en instans av en privat klass::"

#: ../../library/typing.rst:2630
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Observera att det inte är rekommenderat att returnera instanser av privata "
"klasser. Det är oftast att föredra att göra sådana klasser publika."

#: ../../library/typing.rst:2634
msgid "Introspection helpers"
msgstr "Hjälpmedel för introspektion"

#: ../../library/typing.rst:2638
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Returnerar en dictionary som innehåller typtips för en funktion, metod, "
"modul eller klassobjekt."

#: ../../library/typing.rst:2641
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along "
"``C.__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:2647
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:2664
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2669
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"Lade till parametern ``include_extras`` som en del av :pep:`593`. Se "
"dokumentationen för :data:`Annotated` för mer information."

#: ../../library/typing.rst:2673
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if"
" a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""
"Tidigare lades ``Optional[t]`` till för funktions- och metodannoteringar om "
"ett standardvärde som var lika med ``None`` angavs. Nu returneras "
"annoteringen oförändrad."

#: ../../library/typing.rst:2680
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""
"Hämta den osubscripterade versionen av en typ: för ett typobjekt av formen "
"``X[Y, Z, ...]`` returneras ``X``."

#: ../../library/typing.rst:2683
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class,"
" it will be normalized to the original class. If ``X`` is an instance of "
":class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying "
":class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""
"Om ``X`` är ett typing-module alias för en inbyggd klass eller "
":mod:`collections` klass, kommer den att normaliseras till den ursprungliga "
"klassen. Om ``X`` är en instans av :class:`ParamSpecArgs` eller "
":class:`ParamSpecKwargs`, returneras den underliggande :class:`ParamSpec`. "
"Returnerar ``None`` för objekt som inte stöds."

#: ../../library/typing.rst:2689 ../../library/typing.rst:2712
msgid "Examples:"
msgstr "Exempel:"

#: ../../library/typing.rst:2704
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""
"Hämta typargument med alla substitutioner utförda: för ett typobjekt av "
"formen ``X[Y, Z, ...]`` returneras ``(Y, Z, ...)``."

#: ../../library/typing.rst:2707
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original"
" arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for "
"unsupported objects."
msgstr ""
"Om ``X`` är en union eller :class:`Literal` som ingår i en annan generisk "
"typ, kan ordningen på ``(Y, Z, ...)`` skilja sig från ordningen på de "
"ursprungliga argumenten ``[Y, Z, ...]`` på grund av typcaching. Returnera "
"``()`` för objekt som inte stöds."

#: ../../library/typing.rst:2724
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Kontrollera om en typ är en :class:`TypedDict`."

#: ../../library/typing.rst:2745
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""
"Klass som används för intern typningsrepresentation av strängens "
"framåtriktade referenser."

#: ../../library/typing.rst:2747
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:2752
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` generiska typer som ``list[\"SomeClass\"]`` kommer inte att "
"implicit transformeras till ``list[ForwardRef(\"SomeClass\")]`` och kommer "
"därför inte automatiskt att lösas upp till ``list[SomeClass]``."

#: ../../library/typing.rst:2759
msgid "Constant"
msgstr "Konstant"

#: ../../library/typing.rst:2763
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""

#: ../../library/typing.rst:2774
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:2781
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""

#: ../../library/typing.rst:2793
msgid "Deprecated aliases"
msgstr "Föråldrade alias"

#: ../../library/typing.rst:2795
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However,"
" the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

#: ../../library/typing.rst:2802
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""
"De överflödiga typerna är föråldrade från och med Python 3.9. Men även om "
"alias kan tas bort vid någon tidpunkt, är det för närvarande inte planerat "
"att ta bort dessa alias. Därför utfärdas för närvarande inga deprecation-"
"varningar av tolken för dessa alias."

#: ../../library/typing.rst:2807
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""

#: ../../library/typing.rst:2812
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""
"Typkontrollanter uppmanas att flagga användningar av de föråldrade typerna "
"om programmet de kontrollerar riktar sig till en minsta Python-version av "
"3.9 eller nyare."

#: ../../library/typing.rst:2818
msgid "Aliases to built-in types"
msgstr "Aliaser till inbyggda typer"

#: ../../library/typing.rst:2822
msgid "Deprecated alias to :class:`dict`."
msgstr "Föråldrat alias till :class:`dict`."

#: ../../library/typing.rst:2824
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` or"
" :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:2828 ../../library/typing.rst:3065
msgid "This type can be used as follows::"
msgstr ""

#: ../../library/typing.rst:2833
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
" :class:`builtins.dict <dict>` stöder nu subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2839
msgid "Deprecated alias to :class:`list`."
msgstr "Föråldrat alias till :class:`list`."

#: ../../library/typing.rst:2841
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:2845
msgid "This type may be used as follows::"
msgstr ""

#: ../../library/typing.rst:2855
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` stöder nu subskription (``[]``). Se :pep:`585`"
" och :ref:`types-genericalias`."

#: ../../library/typing.rst:2861
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr "Föråldrat alias till :class:`builtins.set <set>`."

#: ../../library/typing.rst:2863
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set`"
" or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:2867
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
" :class:`builtins.set <set>` stöder nu subskription (``[]``). Se :pep:`585` "
"och :ref:`types-genericalias`."

#: ../../library/typing.rst:2873
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr "Föråldrat alias till :class:`builtins.frozenset <frozenset>`."

#: ../../library/typing.rst:2875
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2882
msgid "Deprecated alias for :class:`tuple`."
msgstr "Föråldrat alias för :class:`tuple`."

#: ../../library/typing.rst:2884
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see "
":ref:`annotating-tuples` for more details."
msgstr ""
":class:`tuple` och ``Tuple`` är specialfall i typsystemet; se "
":ref:`annotating-tuples` för mer information."

#: ../../library/typing.rst:2887
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
" :class:`builtins.tuple <tuple>` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2893
msgid "Deprecated alias to :class:`type`."
msgstr "Föråldrat alias till :class:`type`."

#: ../../library/typing.rst:2895
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""
"Se :ref:`type-of-class-objects` för detaljer om hur man använder "
":class:`type` eller ``typing.Type`` i typannoteringar."

#: ../../library/typing.rst:2900
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` stöder nu subskription (``[]``). Se :pep:`585`"
" och :ref:`types-genericalias`."

#: ../../library/typing.rst:2907
msgid "Aliases to types in :mod:`collections`"
msgstr "Alias till typer i :mod:`samlingar`"

#: ../../library/typing.rst:2911
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr "Föråldrat alias till :class:`collections.defaultdict`."

#: ../../library/typing.rst:2915
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2921
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr "Föråldrat alias till :class:`collections.OrderedDict`."

#: ../../library/typing.rst:2925
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2931
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr "Föråldrat alias till :class:`collections.ChainMap`."

#: ../../library/typing.rst:2935
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2941
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr "Föråldrat alias till :class:`collections.Counter`."

#: ../../library/typing.rst:2945
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2951
msgid "Deprecated alias to :class:`collections.deque`."
msgstr "Föråldrat alias till :class:`collections.deque`."

#: ../../library/typing.rst:2955
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2962
msgid "Aliases to other concrete types"
msgstr "Alias till andra konkreta typer"

#: ../../library/typing.rst:2967
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile`"
" and :func:`re.match`."
msgstr ""
"Föråldrade alias som motsvarar returtyperna från :func:`re.compile` och "
":func:`re.match`."

#: ../../library/typing.rst:2970
msgid ""
"These types (and the corresponding functions) are generic over "
":data:`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""
"Dessa typer (och motsvarande funktioner) är generiska över :data:`AnyStr`. "
"``Pattern`` kan specialiseras som ``Pattern[str]`` eller ``Pattern[bytes]``;"
" ``Match`` kan specialiseras som ``Match[str]`` eller ``Match[bytes]``."

#: ../../library/typing.rst:2978
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:2979
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Klasserna ``Pattern`` och ``Match`` från :mod:`re` har nu stöd för ``[]``. "
"Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:2985
msgid "Deprecated alias for :class:`str`."
msgstr "Föråldrat alias för :class:`str`."

#: ../../library/typing.rst:2987
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""
"``Text`` tillhandahålls för att tillhandahålla en framåtkompatibel sökväg "
"för Python 2-kod: i Python 2 är ``Text`` ett alias för ``unicode``."

#: ../../library/typing.rst:2991
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Använd ``Text`` för att ange att ett värde måste innehålla en unicode-sträng"
" på ett sätt som är kompatibelt med både Python 2 och Python 3::"

#: ../../library/typing.rst:2999
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 stöds inte längre, och de flesta typkontrollprogram stöder inte "
"heller längre typkontroll av Python 2-kod. Det är för närvarande inte "
"planerat att ta bort aliaset, men användare uppmuntras att använda "
":class:`str` istället för ``Text``."

#: ../../library/typing.rst:3009
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr "Alias till container ABC i :mod:`collections.abc`"

#: ../../library/typing.rst:3013
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr "Föråldrat alias till :class:`collections.abc.Set`."

#: ../../library/typing.rst:3015
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3021
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and "
":class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:3025
msgid ""
"Prefer ``typing_extensions.Buffer``, or a union like ``bytes | bytearray | "
"memoryview``."
msgstr ""

#: ../../library/typing.rst:3029
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr "Föråldrat alias till :class:`collections.abc.Collection`."

#: ../../library/typing.rst:3033
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` har nu stöd för subskription (``[]``). "
"Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3039
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr "Föråldrat alias till :class:`collections.abc.Container`."

#: ../../library/typing.rst:3041
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` har nu stöd för subscripting (``[]``). Se"
" :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3047
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr "Föråldrat alias till :class:`collections.abc.ItemsView`."

#: ../../library/typing.rst:3049
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` stöder nu subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3055
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr "Föråldrat alias till :class:`collections.abc.KeysView`."

#: ../../library/typing.rst:3057
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` har nu stöd för subscripting (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3063
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr "Föråldrat alias till :class:`collections.abc.Mapping`."

#: ../../library/typing.rst:3070
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3076
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr "Föråldrat alias till :class:`collections.abc.MappingView`."

#: ../../library/typing.rst:3078
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). See"
" :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` stöder nu subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3084
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr "Föråldrat alias till :class:`collections.abc.MutableMapping`."

#: ../../library/typing.rst:3086
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3093
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr "Föråldrat alias till :class:`collections.abc.MutableSequence`."

#: ../../library/typing.rst:3095
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``)."
" See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3102
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr "Föråldrat alias till :class:`collections.abc.MutableSet`."

#: ../../library/typing.rst:3104
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` har nu stöd för subscripting (``[]``). "
"Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3110
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr "Föråldrat alias till :class:`collections.abc.Sequence`."

#: ../../library/typing.rst:3112
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` har nu stöd för subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3118
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr "Föråldrat alias till :class:`collections.abc.ValuesView`."

#: ../../library/typing.rst:3120
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` stöder nu subskription (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3127
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr "Aliaser till asynkrona ABC i :mod:`collections.abc`"

#: ../../library/typing.rst:3131
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr "Föråldrat alias till :class:`collections.abc.Coroutine`."

#: ../../library/typing.rst:3133
msgid ""
"The variance and order of type variables correspond to those of "
":class:`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:3144
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` har nu stöd för subscripting (``[]``). Se"
" :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3150
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr "Föråldrat alias till :class:`collections.abc.AsyncGenerator`."

#: ../../library/typing.rst:3152
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3161
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:3165
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3173
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3183
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3190
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr "Föråldrat alias till :class:`collections.abc.AsyncIterable`."

#: ../../library/typing.rst:3194
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3200
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr "Föråldrat alias till :class:`collections.abc.AsyncIterator`."

#: ../../library/typing.rst:3204
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3210
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr "Föråldrat alias till :class:`collections.abc.Awaitable`."

#: ../../library/typing.rst:3214
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` har nu stöd för subscripting (``[]``). Se"
" :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3221
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr "Alias till andra ABC i :mod:`collections.abc`"

#: ../../library/typing.rst:3225
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr "Föråldrat alias till :class:`collections.abc.Iterable`."

#: ../../library/typing.rst:3227
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` har nu stöd för subscripting (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3233
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr "Föråldrat alias till :class:`collections.abc.Iterator`."

#: ../../library/typing.rst:3235
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` har nu stöd för subscripting (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3241
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr "Föråldrat alias till :class:`collections.abc.Callable`."

#: ../../library/typing.rst:3243
msgid ""
"See :ref:`annotating-callables` for details on how to use "
":class:`collections.abc.Callable` and ``typing.Callable`` in type "
"annotations."
msgstr ""
"Se :ref:`annotating-callables` för detaljer om hur man använder "
":class:`collections.abc.Callable` och ``typing.Callable`` i typannoteringar."

#: ../../library/typing.rst:3246
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` har nu stöd för subscripting (``[]``). Se "
":pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3256
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr "Föråldrat alias till :class:`collections.abc.Generator`."

#: ../../library/typing.rst:3258
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:3267
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:3271
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:3279
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:3287
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` har nu stöd för subskription (``[]``). Se"
" :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3293
msgid "Alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:3297
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr "Föråldrat alias till :class:`collections.abc.Reversible`."

#: ../../library/typing.rst:3299
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` har nu stöd för subscripting (``[]``). "
"Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3305
msgid "Alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:3310
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr "Aliaser till :mod:`contextlib` ABC"

#: ../../library/typing.rst:3314
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr "Föråldrat alias till :class:`contextlib.AbstractContextManager`."

#: ../../library/typing.rst:3318
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` har nu stöd för subscripting "
"(``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3325
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr "Föråldrat alias till :class:`contextlib.AbstractAsyncContextManager`."

#: ../../library/typing.rst:3329
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` har nu stöd för subscripting"
" (``[]``). Se :pep:`585` och :ref:`types-genericalias`."

#: ../../library/typing.rst:3335
msgid "Deprecation Timeline of Major Features"
msgstr "Tidslinje för utfasning av viktiga funktioner"

#: ../../library/typing.rst:3337
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future"
" version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"Vissa funktioner i ``typing`` är föråldrade och kan tas bort i en framtida "
"version av Python. Följande tabell sammanfattar större föråldringar för din "
"bekvämlighet. Detta kan komma att ändras, och alla föråldringar är inte "
"listade."

#: ../../library/typing.rst:3344
msgid "Feature"
msgstr "Funktion"

#: ../../library/typing.rst:3345
msgid "Deprecated in"
msgstr "Avskrivna i"

#: ../../library/typing.rst:3346
msgid "Projected removal"
msgstr "Förväntat borttagande"

#: ../../library/typing.rst:3347
msgid "PEP/issue"
msgstr "PEP/fråga"

#: ../../library/typing.rst:3348
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr ""

#: ../../library/typing.rst:3349
msgid "3.8"
msgstr ""

#: ../../library/typing.rst:3350
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3351
msgid ":issue:`38291`"
msgstr ""

#: ../../library/typing.rst:3352
msgid "``typing`` versions of standard collections"
msgstr "``typning`` av versioner av standardsamlingar"

#: ../../library/typing.rst:3353 ../../library/typing.rst:3357
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3354
msgid "Undecided (see :ref:`deprecated-typing-aliases` for more information)"
msgstr ""

#: ../../library/typing.rst:3355
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3356
msgid ":class:`typing.ByteString`"
msgstr ""

#: ../../library/typing.rst:3358
msgid "3.14"
msgstr "3.14"

#: ../../library/typing.rst:3359
msgid ":gh:`91896`"
msgstr ""

#: ../../library/typing.rst:3360
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../../library/typing.rst:3361
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3362
msgid "Undecided"
msgstr "Väntande"

#: ../../library/typing.rst:3363
msgid ":gh:`92332`"
msgstr ":gh:`92332`"
