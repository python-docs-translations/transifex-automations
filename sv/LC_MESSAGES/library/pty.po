# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:55+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ""

#: ../../library/pty.rst:11
msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Källkod:** :source:`Lib/pty.py`"

#: ../../library/pty.rst:15
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Modulen :mod:`pty` definierar operationer för hantering av "
"pseudoterminalbegreppet: att starta en annan process och kunna skriva till "
"och läsa från dess kontrollterminal programmatiskt."

#: ../../library/pty.rst:19
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""

#: ../../library/pty.rst:23
msgid "The :mod:`pty` module defines the following functions:"
msgstr "Modulen :mod:`pty` definierar följande funktioner:"

#: ../../library/pty.rst:28
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"Fork. Anslut underliggande kontrollterminal till en pseudoterminal. "
"Returvärdet är ``(pid, fd)``. Observera att barnet får *pid* 0 och att *fd* "
"är *invalid*. Förälderns returvärde är barnets *pid* och *fd* är en "
"filbeskrivare som är ansluten till barnets kontrollterminal (och även till "
"barnets standardinmatning och -utmatning)."

#: ../../library/pty.rst:37
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Öppna ett nytt pseudoterminalpar, med :func:`os.openpty` om möjligt, eller "
"emuleringskod för generiska Unix-system. Returnera ett par filbeskrivare "
"``(master, slave)``, för master- respektive slave-änden."

#: ../../library/pty.rst:44
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Starta en process och anslut dess kontrollterminal till den aktuella "
"processens standard io. Detta används ofta för att förvirra program som "
"insisterar på att läsa från den kontrollerande terminalen. Det förväntas att "
"processen som startas bakom pty så småningom kommer att avslutas, och när "
"den gör det kommer *spawn* att returneras."

#: ../../library/pty.rst:50
msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an :exc:"
"`OSError` should be thrown."
msgstr ""

#: ../../library/pty.rst:55
msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"Standardimplementeringen för båda funktionerna läser och returnerar upp till "
"1024 byte varje gång funktionen anropas. Återuppringningen *master_read* får "
"pseudoterminalens master file descriptor för att läsa utdata från "
"barnprocessen, och *stdin_read* får file descriptor 0 för att läsa från den "
"överordnade processens standardinmatning."

#: ../../library/pty.rst:61
msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"Om en tom bytesträng returneras från något av återuppringningsprogrammen "
"tolkas det som ett EOF-villkor (end-of-file) och det "
"återuppringningsprogrammet kommer inte att anropas efter det. Om "
"*stdin_read* signalerar EOF kan den kontrollerande terminalen inte längre "
"kommunicera med moderprocessen eller barnprocessen. Om inte barnprocessen "
"kommer att avslutas utan någon indata kommer *spawn* att loopa för evigt. Om "
"*master_read* signalerar EOF blir resultatet detsamma (åtminstone på Linux)."

#: ../../library/pty.rst:68
msgid ""
"If both callbacks signal EOF then *spawn* will probably never return, unless "
"*select* throws an error on your platform when passed three empty lists. "
"This is a bug, documented in `issue 26228 <https://bugs.python.org/"
"issue26228>`_."
msgstr ""

#: ../../library/pty.rst:72
msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
"Returnerar utgångsstatusvärdet från :func:`os.waitpid` på underordnad "
"process."

#: ../../library/pty.rst:74
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr ""
":func:`waitstatus_to_exitcode` kan användas för att konvertera utgångsstatus "
"till en utgångskod."

#: ../../library/pty.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``pty.spawn`` med argumentet "
"``argv``."

#: ../../library/pty.rst:79
msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` returnerar nu statusvärdet från :func:`os.waitpid` på "
"barnprocessen."

#: ../../library/pty.rst:84
msgid "Example"
msgstr "Exempel"

#: ../../library/pty.rst:88
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"Följande program fungerar som Unix-kommandot :manpage:`script(1)` och "
"använder en pseudoterminal för att registrera alla in- och utdata i en "
"terminalsession i ett \"typescript\". ::"
