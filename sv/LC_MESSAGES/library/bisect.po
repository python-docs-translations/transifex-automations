# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/bisect.rst:2
msgid ":mod:`bisect` --- Array bisection algorithm"
msgstr ""

#: ../../library/bisect.rst:10
msgid "**Source code:** :source:`Lib/bisect.py`"
msgstr "**Källkod:** :source:`Lib/bisect.py`"

#: ../../library/bisect.rst:14
msgid ""
"This module provides support for maintaining a list in sorted order without "
"having to sort the list after each insertion.  For long lists of items with "
"expensive comparison operations, this can be an improvement over the more "
"common approach.  The module is called :mod:`bisect` because it uses a basic"
" bisection algorithm to do its work.  The source code may be most useful as "
"a working example of the algorithm (the boundary conditions are already "
"right!)."
msgstr ""

#: ../../library/bisect.rst:21
msgid "The following functions are provided:"
msgstr "Följande funktioner finns tillgängliga:"

#: ../../library/bisect.rst:26
msgid ""
"Locate the insertion point for *x* in *a* to maintain sorted order. The "
"parameters *lo* and *hi* may be used to specify a subset of the list which "
"should be considered; by default the entire list is used.  If *x* is already"
" present in *a*, the insertion point will be before (to the left of) any "
"existing entries.  The return value is suitable for use as the first "
"parameter to ``list.insert()`` assuming that *a* is already sorted."
msgstr ""
"Placera insättningspunkten för *x* i *a* för att bibehålla den sorterade "
"ordningen. Parametrarna *lo* och *hi* kan användas för att ange en delmängd "
"av listan som ska beaktas; som standard används hela listan.  Om *x* redan "
"finns i *a* kommer inmatningspunkten att ligga före (till vänster om) alla "
"befintliga poster.  Returvärdet är lämpligt att använda som första parameter"
" i ``list.insert()`` förutsatt att *a* redan är sorterad."

#: ../../library/bisect.rst:33
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so"
" that ``all(val < x for val in a[lo : i])`` for the left side and ``all(val "
">= x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:37 ../../library/bisect.rst:58
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each element in the array.  To support "
"searching complex records, the key function is not applied to the *x* value."
msgstr ""
"*key* anger en :term:`key function` med ett argument som används för att "
"extrahera en jämförelsenyckel från varje element i matrisen.  För att "
"underlätta sökning i komplexa poster tillämpas inte nyckelfunktionen på "
"*x*-värdet."

#: ../../library/bisect.rst:41 ../../library/bisect.rst:62
msgid ""
"If *key* is ``None``, the elements are compared directly with no intervening"
" function call."
msgstr ""

#: ../../library/bisect.rst:44 ../../library/bisect.rst:65
#: ../../library/bisect.rst:83 ../../library/bisect.rst:103
msgid "Added the *key* parameter."
msgstr "Lagt till parametern *key*."

#: ../../library/bisect.rst:51
msgid ""
"Similar to :func:`bisect_left`, but returns an insertion point which comes "
"after (to the right of) any existing entries of *x* in *a*."
msgstr ""

#: ../../library/bisect.rst:54
msgid ""
"The returned insertion point *i* partitions the array *a* into two halves so"
" that ``all(val <= x for val in a[lo : i])`` for the left side and ``all(val"
" > x for val in a[i : hi])`` for the right side."
msgstr ""

#: ../../library/bisect.rst:71
msgid "Insert *x* in *a* in sorted order."
msgstr "Infoga *x* i *a* i sorterad ordning."

#: ../../library/bisect.rst:73
msgid ""
"This function first runs :func:`bisect_left` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:77 ../../library/bisect.rst:97
msgid ""
"To support inserting records in a table, the *key* function (if any) is "
"applied to *x* for the search step but not for the insertion step."
msgstr ""
"För att stödja infogning av poster i en tabell tillämpas *key*-funktionen "
"(om sådan finns) på *x* för söksteget men inte för infogningssteget."

#: ../../library/bisect.rst:80 ../../library/bisect.rst:100
msgid ""
"Keep in mind that the ``O(log n)`` search is dominated by the slow O(n) "
"insertion step."
msgstr ""

#: ../../library/bisect.rst:90
msgid ""
"Similar to :func:`insort_left`, but inserting *x* in *a* after any existing "
"entries of *x*."
msgstr ""

#: ../../library/bisect.rst:93
msgid ""
"This function first runs :func:`bisect_right` to locate an insertion point. "
"Next, it runs the :meth:`insert` method on *a* to insert *x* at the "
"appropriate position to maintain sort order."
msgstr ""

#: ../../library/bisect.rst:108
msgid "Performance Notes"
msgstr "Anteckningar om prestanda"

#: ../../library/bisect.rst:110
msgid ""
"When writing time sensitive code using *bisect()* and *insort()*, keep these"
" thoughts in mind:"
msgstr ""
"När du skriver tidskänslig kod med hjälp av *bisect()* och *insort()* ska du"
" tänka på följande:"

#: ../../library/bisect.rst:113
msgid ""
"Bisection is effective for searching ranges of values. For locating specific"
" values, dictionaries are more performant."
msgstr ""
"Bisektion är effektivt för sökning av värdeintervall. För att hitta "
"specifika värden är ordböcker mer effektiva."

#: ../../library/bisect.rst:116
msgid ""
"The *insort()* functions are ``O(n)`` because the logarithmic search step is"
" dominated by the linear time insertion step."
msgstr ""

#: ../../library/bisect.rst:119
msgid ""
"The search functions are stateless and discard key function results after "
"they are used.  Consequently, if the search functions are used in a loop, "
"the key function may be called again and again on the same array elements. "
"If the key function isn't fast, consider wrapping it with "
":func:`functools.cache` to avoid duplicate computations.  Alternatively, "
"consider searching an array of precomputed keys to locate the insertion "
"point (as shown in the examples section below)."
msgstr ""

#: ../../library/bisect.rst:129
msgid ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ is a "
"high performance module that uses *bisect* to managed sorted collections of "
"data."
msgstr ""
"`Sorted Collections <https://grantjenks.com/docs/sortedcollections/>`_ är en"
" högpresterande modul som använder *bisect* för att hantera sorterade "
"samlingar av data."

#: ../../library/bisect.rst:133
msgid ""
"The `SortedCollection recipe "
"<https://code.activestate.com/recipes/577197-sortedcollection/>`_ uses "
"bisect to build a full-featured collection class with straight-forward "
"search methods and support for a key-function.  The keys are precomputed to "
"save unnecessary calls to the key function during searches."
msgstr ""
"Receptet `SortedCollection "
"<https://code.activestate.com/recipes/577197-sortedcollection/>`_ använder "
"bisect för att bygga en fullfjädrad samlingsklass med enkla sökmetoder och "
"stöd för en nyckelfunktion.  Nycklarna är förberäknade för att spara onödiga"
" anrop till nyckelfunktionen under sökningar."

#: ../../library/bisect.rst:141
msgid "Searching Sorted Lists"
msgstr "Söka i sorterade listor"

#: ../../library/bisect.rst:143
msgid ""
"The above :func:`bisect` functions are useful for finding insertion points "
"but can be tricky or awkward to use for common searching tasks. The "
"following five functions show how to transform them into the standard "
"lookups for sorted lists::"
msgstr ""

#: ../../library/bisect.rst:185
msgid "Examples"
msgstr "Exempel"

#: ../../library/bisect.rst:189
msgid ""
"The :func:`bisect` function can be useful for numeric table lookups. This "
"example uses :func:`bisect` to look up a letter grade for an exam score "
"(say) based on a set of ordered numeric breakpoints: 90 and up is an 'A', 80"
" to 89 is a 'B', and so on::"
msgstr ""

#: ../../library/bisect.rst:201
msgid ""
"The :func:`bisect` and :func:`insort` functions also work with lists of "
"tuples.  The *key* argument can serve to extract the field used for ordering"
" records in a table::"
msgstr ""

#: ../../library/bisect.rst:235
msgid ""
"If the key function is expensive, it is possible to avoid repeated function "
"calls by searching a list of precomputed keys to find the index of a "
"record::"
msgstr ""
"Om nyckelfunktionen är dyr är det möjligt att undvika upprepade "
"funktionsanrop genom att söka i en lista med förberäknade nycklar för att "
"hitta indexet för en post::"
