# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:50+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**Källkod:** :source:`Lib/traceback.py`"

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack"
" traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""

#: ../../library/traceback.rst:19
msgid ""
"The module uses :ref:`traceback objects <traceback-objects>` --- these are "
"objects of type :class:`types.TracebackType`, which are assigned to the "
":attr:`~BaseException.__traceback__` field of :class:`BaseException` "
"instances."
msgstr ""
"Modulen använder :ref:`traceback-objekt <traceback-objects>` --- dessa är "
"objekt av typen :class:`types.TracebackType`, som tilldelas fältet "
":attr:`~BaseException.__traceback__` i :class:`BaseException`\\-instanser."

#: ../../library/traceback.rst:27
msgid "Module :mod:`faulthandler`"
msgstr "Modul :mod:`faulthandler`"

#: ../../library/traceback.rst:27
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""
"Används för att dumpa Python-spårningar explicit, vid ett fel, efter en "
"timeout eller vid en användarsignal."

#: ../../library/traceback.rst:29
msgid "Module :mod:`pdb`"
msgstr "Modul :mod:`pdb`"

#: ../../library/traceback.rst:30
msgid "Interactive source code debugger for Python programs."
msgstr "Interaktiv källkodsfelsökare för Python-program."

#: ../../library/traceback.rst:32
msgid "The module defines the following functions:"
msgstr "Modulen definierar följande funktioner:"

#: ../../library/traceback.rst:36
msgid ""
"Print up to *limit* stack trace entries from :ref:`traceback object "
"<traceback-objects>` *tb* (starting from the caller's frame) if *limit* is "
"positive.  Otherwise, print the last ``abs(limit)`` entries.  If *limit* is "
"omitted or ``None``, all entries are printed.  If *file* is omitted or "
"``None``, the output goes to :data:`sys.stderr`; otherwise it should be an "
"open :term:`file <file object>` or :term:`file-like object` to receive the "
"output."
msgstr ""
"Skriv ut upp till *limit* stacktrace-poster från :ref:`traceback object "
"<traceback-objects>` *tb* (med början från anroparens frame) om *limit* är "
"positivt. Annars skrivs de senaste ``abs(limit)``\\-posterna ut. Om *limit* "
"utelämnas eller är ``None``, skrivs alla poster ut. Om *file* utelämnas "
"eller är ``None``, går utdata till :data:`sys.stderr`; annars ska det vara "
"en öppen :term:`fil <file object>` eller :term:`file-like object` som tar "
"emot utdata."

#: ../../library/traceback.rst:45 ../../library/traceback.rst:111
msgid "Added negative *limit* support."
msgstr "Stöd för negativ *limit* har lagts till."

#: ../../library/traceback.rst:52
msgid ""
"Print exception information and stack trace entries from :ref:`traceback "
"object <traceback-objects>` *tb* to *file*. This differs from "
":func:`print_tb` in the following ways:"
msgstr ""
"Skriver ut undantagsinformation och stackspårningsposter från "
":ref:`traceback object <traceback-objects>` *tb* till *file*. Detta skiljer "
"sig från :func:`print_tb` på följande sätt:"

#: ../../library/traceback.rst:57
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""
"om *tb* inte är ``None``, skrivs en rubrik ut ``Traceback (senaste anropet "
"senast):``"

#: ../../library/traceback.rst:60
msgid "it prints the exception type and *value* after the stack trace"
msgstr "den skriver ut undantagstypen och *värdet* efter stackspårningen"

#: ../../library/traceback.rst:64
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"om *typ(värde)* är :exc:`SyntaxError` och *värde* har rätt format, skrivs "
"den rad ut där syntaxfelet inträffade med en caret som anger felets "
"ungefärliga position."

#: ../../library/traceback.rst:68
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""
"Sedan Python 3.10, istället för att skicka *value* och *tb*, kan ett "
"exception-objekt skickas som det första argumentet. Om *value* och *tb* "
"anges ignoreras det första argumentet för att ge bakåtkompatibilitet."

#: ../../library/traceback.rst:72
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the "
":attr:`~BaseException.__cause__` or :attr:`~BaseException.__context__` "
"attributes of the exception) will be printed as well, like the interpreter "
"itself does when printing an unhandled exception."
msgstr ""
"Det valfria argumentet *limit* har samma betydelse som för :func:`print_tb`."
" Om *chain* är true (standard) kommer även kedjade undantag (attributen "
":attr:`~BaseException.__cause__` eller :attr:`~BaseException.__context__` "
"för undantaget) att skrivas ut, precis som tolken själv gör när den skriver "
"ut ett ohanterat undantag."

#: ../../library/traceback.rst:79 ../../library/traceback.rst:177
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "Argumentet *etype* ignoreras och härleds från typen av *value*."

#: ../../library/traceback.rst:82 ../../library/traceback.rst:160
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr ""
"Parametern *etype* har bytt namn till *exc* och är nu endast positionell."

#: ../../library/traceback.rst:89
msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit, file, "
"chain)``."
msgstr ""

#: ../../library/traceback.rst:95
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, "
"sys.last_traceback, limit, file, chain)``.  In general it will work only "
"after an exception has reached an interactive prompt (see "
":data:`sys.last_type`)."
msgstr ""

#: ../../library/traceback.rst:103
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point)"
" if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries."
"  If *limit* is omitted or ``None``, all entries are printed. The optional "
"*f* argument can be used to specify an alternate :ref:`stack frame <frame-"
"objects>` to start.  The optional *file* argument has the same meaning as "
"for :func:`print_tb`."
msgstr ""
"Skriv ut upp till *limit* stacktrace-poster (med början från anropspunkten) "
"om *limit* är positivt. Annars skrivs de senaste ``abs(limit)``\\-posterna "
"ut. Om *limit* utelämnas eller är ``None`` skrivs alla poster ut. Det "
"valfria argumentet *f* kan användas för att ange en alternativ "
":ref:`stackruta <frame-objects>` att börja med. Det valfria argumentet "
"*file* har samma betydelse som för :func:`print_tb`."

#: ../../library/traceback.rst:117
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the :ref:`traceback object "
"<traceback-objects>` *tb*.  It is useful for alternate formatting of stack "
"traces.  The optional *limit* argument has the same meaning as for "
":func:`print_tb`.  A \"pre-processed\" stack trace entry is a "
":class:`FrameSummary` object containing attributes "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace."
msgstr ""
"Returnerar ett :class:`StackSummary`\\-objekt som representerar en lista med"
" \"förbehandlade\" stackspårningsposter som extraherats från "
":ref:`traceback-objektet <traceback-objects>` *tb*.  Det är användbart för "
"alternativ formatering av stackspårningar.  Det valfria argumentet *limit* "
"har samma betydelse som för :func:`print_tb`.  En \"förbehandlad\" "
"stackspårningspost är ett :class:`FrameSummary`\\-objekt som innehåller "
"attributen :attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name` och :attr:`~FrameSummary.line` som representerar "
"den information som vanligtvis skrivs ut för en stackspårning."

#: ../../library/traceback.rst:130
msgid ""
"Extract the raw traceback from the current :ref:`stack frame <frame-"
"objects>`.  The return value has the same format as for :func:`extract_tb`."
"  The optional *f* and *limit* arguments have the same meaning as for "
":func:`print_stack`."
msgstr ""
"Extraherar den råa tracebacken från den aktuella :ref:`stack frame <frame-"
"objects>`.  Returvärdet har samma format som för :func:`extract_tb`.  De "
"valfria argumenten *f* och *limit* har samma betydelse som för "
":func:`print_stack`."

#: ../../library/traceback.rst:138
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by "
":func:`extract_tb` or :func:`extract_stack`, return a list of strings ready "
"for printing.  Each string in the resulting list corresponds to the item "
"with the same index in the argument list.  Each string ends in a newline; "
"the strings may contain internal newlines as well, for those items whose "
"source text line is not ``None``."
msgstr ""
"Ger en lista med tupler eller :class:`FrameSummary`\\-objekt som returneras "
"av :func:`extract_tb` eller :func:`extract_stack`, returnerar en lista med "
"strängar redo för utskrift.  Varje sträng i den resulterande listan "
"motsvarar objektet med samma index i argumentlistan.  Varje sträng slutar "
"med en ny rad; strängarna kan även innehålla interna nya rader för de objekt"
" vars källtextrad inte är ``None``."

#: ../../library/traceback.rst:148
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by :data:`sys.last_value`.  The return value is a list of strings, "
"each ending in a newline.  The list contains the exception's message, which "
"is normally a single string; however, for :exc:`SyntaxError` exceptions, it "
"contains several lines that (when printed) display detailed information "
"about where the syntax error occurred. Following the message, the list "
"contains the exception's :attr:`notes <BaseException.__notes__>`."
msgstr ""
"Formatera undantagsdelen av en spårning med hjälp av ett undantagsvärde som "
"anges av :data:`sys.last_value`.  Returvärdet är en lista med strängar som "
"var och en slutar med en ny rad.  Listan innehåller undantagets meddelande, "
"som normalt är en enda sträng, men för :exc:`SyntaxError`\\-undantag "
"innehåller den flera rader som (när de skrivs ut) visar detaljerad "
"information om var syntaxfelet inträffade. Efter meddelandet innehåller "
"listan undantagets :attr:`notes <BaseException.__notes__>`."

#: ../../library/traceback.rst:156
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is"
" ignored in order to provide backwards compatibility."
msgstr ""
"Sedan Python 3.10 kan ett exception-objekt skickas som första argument "
"istället för *value*.  Om *value* anges ignoreras det första argumentet för "
"att ge bakåtkompatibilitet."

#: ../../library/traceback.rst:164
msgid ""
"The returned list now includes any :attr:`notes <BaseException.__notes__>` "
"attached to the exception."
msgstr ""
"Den returnerade listan innehåller nu alla :attr:`notes "
"<BaseException.__notes__>` som är kopplade till undantaget."

#: ../../library/traceback.rst:171
msgid ""
"Format a stack trace and the exception information.  The arguments  have the"
" same meaning as the corresponding arguments to :func:`print_exception`.  "
"The return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"Formaterar en stackspårning och information om undantaget.  Argumenten har "
"samma betydelse som motsvarande argument i :func:`print_exception`.  "
"Returvärdet är en lista med strängar som var och en slutar med en ny rad och"
" vissa innehåller interna nya rader.  När dessa rader sammanfogas och skrivs"
" ut, skrivs exakt samma text ut som i :func:`print_exception`."

#: ../../library/traceback.rst:180
msgid ""
"This function's behavior and signature were modified to match "
":func:`print_exception`."
msgstr ""
"Den här funktionens beteende och signatur har ändrats för att matcha "
":func:`print_exception`."

#: ../../library/traceback.rst:187
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""
"Detta är som ``print_exc(limit)`` men returnerar en sträng istället för att "
"skriva ut till en fil."

#: ../../library/traceback.rst:193
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "En förkortning för ``format_list(extract_tb(tb, limit))``."

#: ../../library/traceback.rst:198
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "En förkortning för ``format_list(extract_stack(f, limit))``."

#: ../../library/traceback.rst:202
msgid ""
"Clears the local variables of all the stack frames in a :ref:`traceback "
"<traceback-objects>` *tb* by calling the :meth:`~frame.clear` method of each"
" :ref:`frame object <frame-objects>`."
msgstr ""
"Rensar de lokala variablerna för alla stackramar i en :ref:`traceback "
"<traceback-objects>` *tb* genom att anropa metoden :meth:`~frame.clear` för "
"varje :ref:`frame-objekt <frame-objects>`."

#: ../../library/traceback.rst:211
msgid ""
"Walk a stack following :attr:`f.f_back <frame.f_back>` from the given frame,"
" yielding the frame and line number for each frame. If *f* is ``None``, the "
"current stack is used. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"Går igenom en stack enligt :attr:`f.f_back <frame.f_back>` från den angivna "
"ramen, vilket ger ram- och radnummer för varje ram. Om *f* är ``None`` "
"används den aktuella stacken. Denna hjälp används med "
":meth:`StackSummary.extract`."

#: ../../library/traceback.rst:220
msgid ""
"Walk a traceback following :attr:`~traceback.tb_next` yielding the frame and"
" line number for each frame. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"Går igenom en spårning enligt :attr:`~traceback.tb_next` och ger bildrutan "
"och radnumret för varje bildruta. Detta hjälpmedel används med "
":meth:`StackSummary.extract`."

#: ../../library/traceback.rst:226
msgid "The module also defines the following classes:"
msgstr ""

#: ../../library/traceback.rst:229
msgid ":class:`!TracebackException` Objects"
msgstr ":class:`!TracebackException`\\-objekt"

#: ../../library/traceback.rst:233
msgid ""
":class:`!TracebackException` objects are created from actual exceptions to "
"capture data for later printing in a lightweight fashion."
msgstr ""

#: ../../library/traceback.rst:238 ../../library/traceback.rst:337
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"Fånga ett undantag för senare rendering. *limit*, *lookup_lines* och "
"*capture_locals* är som för klassen :class:`StackSummary`."

#: ../../library/traceback.rst:241
msgid ""
"If *compact* is true, only data that is required by "
":class:`!TracebackException`'s :meth:`format` method is saved in the class "
"attributes. In particular, the :attr:`__context__` field is calculated only "
"if :attr:`__cause__` is ``None`` and :attr:`__suppress_context__` is false."
msgstr ""
"Om *compact* är true, sparas endast data som krävs av "
":class:`!TracebackException`\\:s :meth:`format`\\-metod i klassens attribut."
" I synnerhet beräknas fältet :attr:`__context__` endast om :attr:`__cause__`"
" är ``None`` och :attr:`__suppress_context__` är false."

#: ../../library/traceback.rst:247 ../../library/traceback.rst:340
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""
"Observera att när lokala funktioner fångas upp visas de också i traceback."

#: ../../library/traceback.rst:249
msgid ""
"*max_group_width* and *max_group_depth* control the formatting of exception "
"groups (see :exc:`BaseExceptionGroup`). The depth refers to the nesting "
"level of the group, and the width refers to the size of a single exception "
"group's exceptions array. The formatted output is truncated when either "
"limit is exceeded."
msgstr ""
"*max_group_width* och *max_group_depth* styr formateringen av "
"undantagsgrupper (se :exc:`BaseExceptionGroup`). Djupet avser gruppens "
"nestningsnivå och bredden avser storleken på en enskild undantagsgrupps "
"undantagsarray. Den formaterade utdata trunkeras när någon av gränserna "
"överskrids."

#: ../../library/traceback.rst:255
msgid "Added the *compact* parameter."
msgstr "Parametern *kompakt* har lagts till."

#: ../../library/traceback.rst:258
msgid "Added the *max_group_width* and *max_group_depth* parameters."
msgstr "Parametrarna *max_group_width* och *max_group_depth* har lagts till."

#: ../../library/traceback.rst:263
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__cause__`."
msgstr ""
"En :class:`!TracebackException` av den ursprungliga "
":attr:`~BaseException.__cause__`."

#: ../../library/traceback.rst:268
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__context__`."
msgstr ""
"En :class:`!TracebackException` av den ursprungliga "
":attr:`~BaseException.__context__`."

#: ../../library/traceback.rst:273
msgid ""
"If ``self`` represents an :exc:`ExceptionGroup`, this field holds a list of "
":class:`!TracebackException` instances representing the nested exceptions. "
"Otherwise it is ``None``."
msgstr ""
"Om ``self`` representerar en :exc:`ExceptionGroup`, innehåller detta fält en"
" lista av :class:`!TracebackException`\\-instanser som representerar de "
"nästlade undantagen. Annars är det ``None``."

#: ../../library/traceback.rst:281
msgid ""
"The :attr:`~BaseException.__suppress_context__` value from the original "
"exception."
msgstr ""
"Värdet :attr:`~BaseException.__suppress_context__` från det ursprungliga "
"undantaget."

#: ../../library/traceback.rst:286
msgid ""
"The :attr:`~BaseException.__notes__` value from the original exception, or "
"``None`` if the exception does not have any notes. If it is not ``None`` is "
"it formatted in the traceback after the exception string."
msgstr ""
"Värdet :attr:`~BaseException.__notes__` från det ursprungliga undantaget, "
"eller ``None`` om undantaget inte har några anteckningar. Om det inte är "
"``None`` formateras det i tracebacken efter undantagssträngen."

#: ../../library/traceback.rst:295
msgid "A :class:`StackSummary` representing the traceback."
msgstr "En :class:`StackSummary` som representerar spårningen."

#: ../../library/traceback.rst:299
msgid "The class of the original traceback."
msgstr "Klassen för den ursprungliga spårningen."

#: ../../library/traceback.rst:303
msgid "For syntax errors - the file name where the error occurred."
msgstr "För syntaxfel - filnamnet där felet uppstod."

#: ../../library/traceback.rst:307
msgid "For syntax errors - the line number where the error occurred."
msgstr "För syntaxfel - radnumret där felet uppstod."

#: ../../library/traceback.rst:311
msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr ""
"För syntaxfel - numret på slutraden där felet inträffade. Kan vara ``None`` "
"om det inte finns."

#: ../../library/traceback.rst:318
msgid "For syntax errors - the text where the error occurred."
msgstr "För syntaxfel - den text där felet inträffade."

#: ../../library/traceback.rst:322
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "För syntaxfel - den offset i texten där felet uppstod."

#: ../../library/traceback.rst:326
msgid ""
"For syntax errors - the end offset into the text where the error occurred. "
"Can be ``None`` if not present."
msgstr ""
"För syntaxfel - slutoffset i texten där felet uppstod. Kan vara ``None`` om "
"det inte finns."

#: ../../library/traceback.rst:333
msgid "For syntax errors - the compiler error message."
msgstr "För syntaxfel - kompilatorns felmeddelande."

#: ../../library/traceback.rst:344
msgid ""
"Print to *file* (default ``sys.stderr``) the exception information returned "
"by :meth:`format`."
msgstr ""
"Skriv ut undantagsinformationen som returneras av :meth:`format` till *fil* "
"(standard ``sys.stderr``)."

#: ../../library/traceback.rst:351
msgid "Format the exception."
msgstr "Formatera undantaget."

#: ../../library/traceback.rst:353
msgid ""
"If *chain* is not ``True``, :attr:`__cause__` and :attr:`__context__` will "
"not be formatted."
msgstr ""
"Om *chain* inte är ``True``, kommer :attr:`__cause__` och "
":attr:`__context__` inte att formateras."

#: ../../library/traceback.rst:356
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""
"Returvärdet är en generator av strängar, var och en slutar med en ny rad och"
" vissa innehåller interna nya rader. :func:`~traceback.print_exception` är "
"ett omslag runt denna metod som bara skriver ut raderna till en fil."

#: ../../library/traceback.rst:362
msgid "Format the exception part of the traceback."
msgstr "Formatera undantagsdelen av tracebacken."

#: ../../library/traceback.rst:364
msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""
"Returvärdet är en generator av strängar som var och en slutar med en ny rad."

#: ../../library/traceback.rst:366
msgid ""
"The generator emits the exception's message followed by its notes (if it has"
" any). The exception message is normally a single string; however, for "
":exc:`SyntaxError` exceptions, it consists of several lines that (when "
"printed) display detailed information about where the syntax error occurred."
msgstr ""

#: ../../library/traceback.rst:372
msgid ""
"The exception's :attr:`notes <BaseException.__notes__>` are now included in "
"the output."
msgstr ""
"Undantagets :attr:`notes <BaseException.__notes__>` inkluderas nu i utdata."

#: ../../library/traceback.rst:378
msgid ":class:`!StackSummary` Objects"
msgstr ":class:`!StackSummary` Objekt"

#: ../../library/traceback.rst:382
msgid ""
":class:`!StackSummary` objects represent a call stack ready for formatting."
msgstr ""
":class:`!StackSummary`\\-objekt representerar en anropsstack som är redo för"
" formatering."

#: ../../library/traceback.rst:388
msgid ""
"Construct a :class:`!StackSummary` object from a frame generator (such as is"
" returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""
"Konstruera ett :class:`!StackSummary`\\-objekt från en ramgenerator (t.ex. "
"den som returneras av :func:`~traceback.walk_stack` eller "
":func:`~traceback.walk_tb`)."

#: ../../library/traceback.rst:392
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If"
" *lookup_lines* is ``False``, the returned :class:`FrameSummary` objects "
"will not have read their lines in yet, making the cost of creating the "
":class:`!StackSummary` cheaper (which may be valuable if it may not actually"
" get formatted). If *capture_locals* is ``True`` the local variables in each"
" :class:`!FrameSummary` are captured as object representations."
msgstr ""
"Om *limit* anges kommer endast så många ramar att hämtas från *frame_gen*. "
"Om *lookup_lines* är ``False``, kommer de returnerade "
":class:`FrameSummary`\\-objekten inte att ha läst in sina rader ännu, vilket"
" gör kostnaden för att skapa :class:`!StackSummary` billigare (vilket kan "
"vara värdefullt om det kanske inte faktiskt formateras). Om *capture_locals*"
" är ``True`` fångas de lokala variablerna i varje :class:`!FrameSummary` som"
" objektrepresentationer."

#: ../../library/traceback.rst:402
msgid ""
"Construct a :class:`!StackSummary` object from a supplied list of "
":class:`FrameSummary` objects or old-style list of tuples.  Each tuple "
"should be a 4-tuple with *filename*, *lineno*, *name*, *line* as the "
"elements."
msgstr ""
"Konstruerar ett :class:`!StackSummary`\\-objekt från en medföljande lista av"
" :class:`FrameSummary`\\-objekt eller en gammaldags lista av tuplar.  Varje "
"tupel bör vara en 4-tupel med *filnamn*, *lineno*, *namn*, *linje* som "
"element."

#: ../../library/traceback.rst:409
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single :ref:`frame <frame-objects>` from the stack. "
"Each string ends in a newline; the strings may contain internal newlines as "
"well, for those items with source text lines."
msgstr ""
"Returnerar en lista med strängar som är klara för utskrift.  Varje sträng i "
"den resulterande listan motsvarar en enda :ref:`frame <frame-objects>` från "
"stacken. Varje sträng slutar med en ny rad; strängarna kan även innehålla "
"interna nya rader, för de objekt som har källtextrader."

#: ../../library/traceback.rst:415
msgid ""
"For long sequences of the same frame and line, the first few repetitions are"
" shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""
"För långa sekvenser med samma ram och linje visas de första repetitionerna, "
"följt av en sammanfattande rad som anger det exakta antalet ytterligare "
"repetitioner."

#: ../../library/traceback.rst:419
msgid "Long sequences of repeated frames are now abbreviated."
msgstr "Långa sekvenser av upprepade bildrutor förkortas nu."

#: ../../library/traceback.rst:424
msgid ""
"Returns a string for printing one of the :ref:`frames <frame-objects>` "
"involved in the stack. This method is called for each :class:`FrameSummary` "
"object to be printed by :meth:`StackSummary.format`. If it returns ``None``,"
" the frame is omitted from the output."
msgstr ""
"Returnerar en sträng för utskrift av en av de :ref:`frames <frame-objects>` "
"som ingår i stacken. Denna metod anropas för varje "
":class:`FrameSummary`\\-objekt som ska skrivas ut med "
":meth:`StackSummary.format`. Om den returnerar ``None``, utelämnas ramen "
"från utskriften."

#: ../../library/traceback.rst:434
msgid ":class:`!FrameSummary` Objects"
msgstr ":class:`!FrameSummary` Objekt"

#: ../../library/traceback.rst:438
msgid ""
"A :class:`!FrameSummary` object represents a single :ref:`frame <frame-"
"objects>` in a :ref:`traceback <traceback-objects>`."
msgstr ""
"Ett :class:`!FrameSummary`\\-objekt representerar en enda :ref:`frame "
"<frame-objects>` i en :ref:`traceback <traceback-objects>`."

#: ../../library/traceback.rst:443
msgid ""
"Represents a single :ref:`frame <frame-objects>` in the :ref:`traceback "
"<traceback-objects>` or stack that is being formatted or printed. It may "
"optionally have a stringified version of the frame's locals included in it. "
"If *lookup_line* is ``False``, the source code is not looked up until the "
":class:`!FrameSummary` has the :attr:`~FrameSummary.line` attribute accessed"
" (which also happens when casting it to a :class:`tuple`). "
":attr:`~FrameSummary.line` may be directly provided, and will prevent line "
"lookups happening at all. *locals* is an optional local variable dictionary,"
" and if supplied the variable representations are stored in the summary for "
"later display."
msgstr ""

#: ../../library/traceback.rst:454
msgid ":class:`!FrameSummary` instances have the following attributes:"
msgstr ":class:`!FrameSummary`\\-instanser har följande attribut:"

#: ../../library/traceback.rst:458
msgid ""
"The filename of the source code for this frame. Equivalent to accessing "
":attr:`f.f_code.co_filename <codeobject.co_filename>` on a :ref:`frame "
"object <frame-objects>` *f*."
msgstr ""
"Filnamnet på källkoden för den här ramen. Motsvarar åtkomst till "
":attr:`f.f_code.co_filename <codeobject.co_filename>` på en :ref:`frame "
"object <frame-objects>` *f*."

#: ../../library/traceback.rst:464
msgid "The line number of the source code for this frame."
msgstr "Radnumret i källkoden för den här ramen."

#: ../../library/traceback.rst:468
msgid ""
"Equivalent to accessing :attr:`f.f_code.co_name <codeobject.co_name>` on a "
":ref:`frame object <frame-objects>` *f*."
msgstr ""
"Motsvarar åtkomst till :attr:`f.f_code.co_name <codeobject.co_name>` på en "
":ref:`frame object <frame-objects>` *f*."

#: ../../library/traceback.rst:473
msgid ""
"A string representing the source code for this frame, with leading and "
"trailing whitespace stripped. If the source is not available, it is "
"``None``."
msgstr ""
"En sträng som representerar källkoden för den här ramen, med inledande och "
"avslutande blanksteg borttagna. Om källan inte är tillgänglig är den "
"``None``."

#: ../../library/traceback.rst:480
msgid "Traceback Examples"
msgstr ""

#: ../../library/traceback.rst:482
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but"
" less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the "
":mod:`code` module. ::"
msgstr ""
"Detta enkla exempel implementerar en grundläggande read-eval-print-loop, som"
" liknar (men är mindre användbar än) Pythons interaktiva interpreter-loop.  "
"För en mer komplett implementering av tolkslingan, se modulen :mod:`code`. "
"::"

#: ../../library/traceback.rst:504
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr ""
"Följande exempel visar de olika sätten att skriva ut och formatera undantag "
"och spårning:"

#: ../../library/traceback.rst:539
msgid "The output for the example would look similar to this:"
msgstr "Utdata för exemplet skulle se ut ungefär så här:"

#: ../../library/traceback.rst:581
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""
"Följande exempel visar de olika sätten att skriva ut och formatera stacken::"

#: ../../library/traceback.rst:607
msgid "This last example demonstrates the final few formatting functions:"
msgstr "I det sista exemplet visas de sista formateringsfunktionerna:"

#: ../../library/traceback.rst:17
msgid "object"
msgstr "object"

#: ../../library/traceback.rst:17
msgid "traceback"
msgstr "spårning"

#: ../../library/traceback.rst:62
msgid "^ (caret)"
msgstr "^ (caret)"

#: ../../library/traceback.rst:62
msgid "marker"
msgstr "markör"
