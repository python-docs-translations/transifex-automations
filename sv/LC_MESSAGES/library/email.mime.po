# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:57+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`email.mime`: Creating email and MIME objects from scratch"
msgstr ""

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**Källkod:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""
"Denna modul är en del av det äldre (``Compat32``) e-post-API:et.  Dess "
"funktionalitet ersätts delvis av :mod:`~email.contentmanager` i det nya "
"API:et, men i vissa tillämpningar kan dessa klasser fortfarande vara "
"användbara, även i icke-legacy-kod."

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message object."
"  However you can also build a complete message structure from scratch, or "
"even individual :class:`~email.message.Message` objects by hand.  In fact, "
"you can also take an existing structure and add new "
":class:`~email.message.Message` objects, move them around, etc.  This makes "
"a very convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"Vanligtvis får du en meddelandeobjektstruktur genom att skicka en fil eller "
"lite text till en parser, som tolkar texten och returnerar "
"rotmeddelandeobjektet.  Men du kan också bygga en komplett "
"meddelandestruktur från grunden, eller till och med enskilda "
":class:`~email.message.Message`\\-objekt för hand.  Faktum är att du också "
"kan ta en befintlig struktur och lägga till nya "
":class:`~email.message.Message`\\-objekt, flytta runt dem osv.  Detta är ett"
" mycket praktiskt gränssnitt för att dela upp MIME-meddelanden."

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating "
":class:`~email.message.Message` instances, adding attachments and all the "
"appropriate headers manually.  For MIME messages though, the :mod:`email` "
"package provides some convenient subclasses to make things easier."
msgstr ""
"Du kan skapa en ny objektstruktur genom att skapa "
":class:`~email.message.Message`\\-instanser, lägga till bilagor och alla "
"lämpliga rubriker manuellt.  För MIME-meddelanden tillhandahåller dock "
"paketet :mod:`email` några praktiska underklasser för att göra saker och "
"ting enklare."

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "Här är klasserna:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "Modul: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of "
":class:`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is"
" provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"Detta är basklassen för alla MIME-specifika underklasser av "
":class:`~email.message.Message`.  Vanligtvis kommer du inte att skapa "
"instanser specifikt av :class:`MIMEBase`, även om du kan. :class:`MIMEBase` "
"tillhandahålls främst som en bekväm basklass för mer specifika MIME-medvetna"
" underklasser."

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. "
":mimetype:`text` or :mimetype:`image`), and *_subtype* is the "
":mailheader:`Content-Type` minor type  (e.g. :mimetype:`plain` or "
":mimetype:`gif`).  *_params* is a parameter key/value dictionary and is "
"passed directly to :meth:`Message.add_header "
"<email.message.Message.add_header>`."
msgstr ""
"*_maintype* är huvudtypen för :mailheader:`Content-Type` (t.ex. "
":mimetype:`text` eller :mimetype:`image`), och *_subtype* är den mindre "
"typen för :mailheader:`Content-Type` (t.ex. :mimetype:`plain` eller "
":mimetype:`gif`).  *_params* är en nyckel/värde-ordbok för en parameter och "
"skickas direkt till :meth:`Message.add_header "
"<email.message.Message.add_header>`."

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 "
"<email.policy.Compat32>` policy) it will be passed to "
":class:`~email.message.Message`."
msgstr ""
"Om *policy* anges (standard är policyn :class:`compat32 "
"<email.policy.Compat32>`) kommer den att skickas till "
":class:`~email.message.Message`."

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
"Klassen :class:`MIMEBase` lägger alltid till ett :mailheader:`Content-"
"Type`\\-huvud (baserat på *_maintype*, *_subtype* och *_params*) och ett "
":mailheader:`MIME-Version`\\-huvud (alltid inställt på ``1.0``)."

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:204 ../../library/email.mime.rst:224
#: ../../library/email.mime.rst:258
msgid "Added *policy* keyword-only parameter."
msgstr "Lagt till *policy* parameter för endast nyckelord."

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "Modul: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the "
":meth:`~email.message.Message.attach` method, which only makes sense for "
":mimetype:`multipart` messages.  If :meth:`~email.message.Message.attach` is"
" called, a :exc:`~email.errors.MultipartConversionError` exception is "
"raised."
msgstr ""
"Detta är en underklass till :class:`~email.mime.base.MIMEBase` och är en "
"mellanliggande basklass för MIME-meddelanden som inte är "
":mimetype:`multipart`.  Det primära syftet med denna klass är att förhindra "
"användningen av metoden :meth:`~email.message.Message.attach`, som bara är "
"meningsfull för :mimetype:`multipart`\\-meddelanden.  Om "
":meth:`~email.message.Message.attach` anropas, uppstår ett "
":exc:`~email.errors.MultipartConversionError` undantag."

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "Modul: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of "
":mimetype:`multipart/_subtype` will be added to the message object.  A "
":mailheader:`MIME-Version` header will also be added."
msgstr ""
"Detta är en underklass till :class:`~email.mime.base.MIMEBase` och är en "
"mellanliggande basklass för MIME-meddelanden som är :mimetype:`multipart`.  "
"Det valfria *_subtype* är standardvärdet för :mimetype:`mixed`, men kan "
"användas för att ange meddelandets subtyp.  Ett :mailheader:`Content-"
"Type`\\-huvud av :mimetype:`multipart/_subtype` läggs till i "
"meddelandeobjektet.  En rubrik av typen :mailheader:`MIME-Version` kommer "
"också att läggas till."

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"Valfritt *boundary* är strängen för flerpartsbegränsningen.  Om ``None`` "
"(standard) används beräknas gränsen vid behov (t.ex. när meddelandet "
"serialiseras)."

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach "
"<email.message.Message.attach>` method."
msgstr ""
"*_subparts* är en sekvens av initiala subparts för nyttolasten.  Det måste "
"vara möjligt att konvertera denna sekvens till en lista.  Du kan alltid "
"bifoga nya subparts till meddelandet genom att använda metoden "
":meth:`Message.attach <email.message.Message.attach>`."

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:199
#: ../../library/email.mime.rst:222 ../../library/email.mime.rst:253
msgid ""
"Optional *policy* argument defaults to :class:`compat32 "
"<email.policy.Compat32>`."
msgstr ""
"Det valfria *policy*-argumentet är som standard :class:`compat32 "
"<email.policy.Compat32>`."

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
"Ytterligare parametrar för rubriken :mailheader:`Content-Type` hämtas från "
"nyckelordsargumenten eller skickas till argumentet *_params*, som är en "
"nyckelordsordbok."

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "Modul: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEApplication` class is used to represent MIME message objects of "
"major type :mimetype:`application`.  *_data* contains the bytes for the raw "
"application data.  Optional *_subtype* specifies the MIME subtype and "
"defaults to :mimetype:`octet-stream`."
msgstr ""
"Klassen :class:`MIMEApplication` är en underklass till "
":class:`~email.mime.nonmultipart.MIMENonMultipart` och används för att "
"representera MIME-meddelandeobjekt av huvudtypen :mimetype:`application`.  "
"*_data* innehåller bytes för de råa applikationsdata.  Den valfria "
"*_subtype* anger MIME-subtypen och standardvärdet är :mimetype:`octet-"
"stream`."

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Valfri *_encoder* är en anropsbar (dvs. funktion) som utför den faktiska "
"kodningen av data för transport.  Denna anropsbarhet tar ett argument, "
"vilket är :class:`MIMEApplication`\\-instansen. Den bör använda "
":meth:`~email.message.Message.get_payload` och "
":meth:`~email.message.Message.set_payload` för att ändra payload till kodad "
"form.  Det bör också lägga till eventuella :mailheader:`Content-Transfer-"
"Encoding` eller andra rubriker till meddelandeobjektet vid behov.  "
"Standardkodningen är base64.  Se modulen :mod:`email.encoders` för en lista "
"över de inbyggda kodarna."

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* skickas rakt igenom till basklassens konstruktör."

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "Modul: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEAudio` class is used to create MIME message objects of major "
"type :mimetype:`audio`. *_audiodata* contains the bytes for the raw audio "
"data.  If this data can be decoded by the standard Python module "
":mod:`sndhdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"audio subtype via the *_subtype* argument.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Valfri *_encoder* är en anropsbar (dvs. funktion) som utför den faktiska "
"kodningen av ljuddata för transport.  Denna anropsbarhet tar ett argument, "
"vilket är :class:`MIMEAudio`\\-instansen. Den bör använda "
":meth:`~email.message.Message.get_payload` och "
":meth:`~email.message.Message.set_payload` för att ändra payload till kodad "
"form.  Det bör också lägga till eventuella :mailheader:`Content-Transfer-"
"Encoding` eller andra rubriker till meddelandeobjektet vid behov.  "
"Standardkodningen är base64.  Se modulen :mod:`email.encoders` för en lista "
"över de inbyggda kodarna."

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "Modul: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEImage` class is used to create MIME message objects of major "
"type :mimetype:`image`. *_imagedata* contains the bytes for the raw image "
"data.  If this data can be decoded by the standard Python module "
":mod:`imghdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"image subtype via the *_subtype* argument.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:189
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""
"Valfri *_encoder* är en anropsbar (dvs. funktion) som utför den faktiska "
"kodningen av bilddata för transport.  Denna anropsbarhet tar ett argument, "
"vilket är :class:`MIMEImage`\\-instansen. Den bör använda "
":meth:`~email.message.Message.get_payload` och "
":meth:`~email.message.Message.set_payload` för att ändra payload till kodad "
"form.  Det bör också lägga till eventuella :mailheader:`Content-Transfer-"
"Encoding` eller andra rubriker till meddelandeobjektet vid behov.  "
"Standardkodningen är base64.  Se modulen :mod:`email.encoders` för en lista "
"över de inbyggda kodarna."

#: ../../library/email.mime.rst:201
msgid ""
"*_params* are passed straight through to the "
":class:`~email.mime.base.MIMEBase` constructor."
msgstr ""
"*_params* skickas direkt till "
":class:`~email.mime.base.MIMEBase`\\-konstruktören."

#: ../../library/email.mime.rst:211
msgid "Module: :mod:`email.mime.message`"
msgstr "Modul: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:213
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEMessage` class is used to create MIME objects of main type "
":mimetype:`message`. *_msg* is used as the payload, and must be an instance "
"of class :class:`~email.message.Message` (or a subclass thereof), otherwise "
"a :exc:`TypeError` is raised."
msgstr ""
"Klassen :class:`MIMEMessage` är en underklass till "
":class:`~email.mime.nonmultipart.MIMENonMultipart` och används för att skapa"
" MIME-objekt av huvudtypen :mimetype:`message`. *_msg* används som nyttolast"
" och måste vara en instans av klassen :class:`~email.message.Message` (eller"
" en underklass av denna), annars uppstår ett :exc:`TypeError`."

#: ../../library/email.mime.rst:219
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to "
":mimetype:`rfc822`."
msgstr ""
"Valfri *_subtype* anger meddelandets subtyp; standardvärdet är "
":mimetype:`rfc822`."

#: ../../library/email.mime.rst:231
msgid "Module: :mod:`email.mime.text`"
msgstr "Modul: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:233
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEText` class is used to create MIME objects of major type "
":mimetype:`text`. *_text* is the string for the payload.  *_subtype* is the "
"minor type and defaults to :mimetype:`plain`.  *_charset* is the character "
"set of the text and is passed as an argument to the "
":class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it defaults "
"to ``us-ascii`` if the string contains only ``ascii`` code points, and "
"``utf-8`` otherwise.  The *_charset* parameter accepts either a string or a "
":class:`~email.charset.Charset` instance."
msgstr ""
"Klassen :class:`MIMEText` är en underklass till "
":class:`~email.mime.nonmultipart.MIMENonMultipart` och används för att skapa"
" MIME-objekt av huvudtypen :mimetype:`text`. *_text* är strängen för "
"nyttolasten.  *_subtype* är den mindre typen och standardvärdet är "
":mimetype:`plain`.  *_charset* är textens teckenuppsättning och skickas som "
"ett argument till "
":class:`~email.mime.nonmultipart.MIMENonMultipart`\\-konstruktören; "
"standardvärdet är ``us-ascii`` om strängen endast innehåller "
"``ascii``\\-kodpunkter och annars ``utf-8``.  Parametern *_charset* "
"accepterar antingen en sträng eller en instans av "
":class:`~email.charset.Charset`."

#: ../../library/email.mime.rst:243
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` header."
"  This means that a subsequent ``set_payload`` call will not result in an "
"encoded payload, even if a charset is passed in the ``set_payload`` command."
"  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"Om inte argumentet *_charset* uttryckligen sätts till ``None``, kommer det "
"MIMEText-objekt som skapas att ha både en :mailheader:`Content-Type` header "
"med en ``charset`` parameter och en :mailheader:`Content-Transfer-Encoding` "
"header.  Detta innebär att ett efterföljande anrop av ``set_payload`` inte "
"kommer att resultera i en kodad nyttolast, även om en teckenuppsättning "
"anges i kommandot ``set_payload``.  Du kan \"återställa\" detta beteende "
"genom att ta bort rubriken ``Content-Transfer-Encoding``, varefter ett anrop"
" av ``set_payload`` automatiskt kodar den nya nyttolasten (och lägger till "
"en ny rubrik :mailheader:`Content-Transfer-Encoding``)."

#: ../../library/email.mime.rst:255
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr "*_charset* accepterar även :class:`~email.charset.Charset`\\-instanser."
