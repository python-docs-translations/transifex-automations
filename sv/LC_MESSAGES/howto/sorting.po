# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 18:07+0000\n"
"PO-Revision-Date: 2025-09-22 17:54+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../howto/sorting.rst:4
msgid "Sorting HOW TO"
msgstr ""

#: ../../howto/sorting.rst:0
msgid "Author"
msgstr "Författare"

#: ../../howto/sorting.rst:6
msgid "Andrew Dalke and Raymond Hettinger"
msgstr "Andrew Dalke och Raymond Hettinger"

#: ../../howto/sorting.rst:0
msgid "Release"
msgstr "Release"

#: ../../howto/sorting.rst:7
msgid "0.1"
msgstr ""

#: ../../howto/sorting.rst:10
msgid ""
"Python lists have a built-in :meth:`list.sort` method that modifies the list "
"in-place.  There is also a :func:`sorted` built-in function that builds a "
"new sorted list from an iterable."
msgstr ""
"Python-listor har en inbyggd :meth:`list.sort`\\-metod som modifierar listan "
"på plats.  Det finns också en inbyggd funktion :func:`sorted` som bygger en "
"ny sorterad lista från en iterabel."

#: ../../howto/sorting.rst:14
msgid ""
"In this document, we explore the various techniques for sorting data using "
"Python."
msgstr ""
"I det här dokumentet utforskar vi olika tekniker för att sortera data med "
"hjälp av Python."

#: ../../howto/sorting.rst:18
msgid "Sorting Basics"
msgstr "Sortering - grunderna"

#: ../../howto/sorting.rst:20
msgid ""
"A simple ascending sort is very easy: just call the :func:`sorted` function. "
"It returns a new sorted list::"
msgstr ""

#: ../../howto/sorting.rst:26
msgid ""
"You can also use the :meth:`list.sort` method. It modifies the list in-place "
"(and returns ``None`` to avoid confusion). Usually it's less convenient "
"than :func:`sorted` - but if you don't need the original list, it's slightly "
"more efficient."
msgstr ""
"Du kan också använda metoden :meth:`list.sort`. Den ändrar listan på plats "
"(och returnerar ``None`` för att undvika förvirring). Vanligtvis är det "
"mindre bekvämt än :func:`sorted` - men om du inte behöver den ursprungliga "
"listan är det något mer effektivt."

#: ../../howto/sorting.rst:36
msgid ""
"Another difference is that the :meth:`list.sort` method is only defined for "
"lists. In contrast, the :func:`sorted` function accepts any iterable."
msgstr ""
"En annan skillnad är att metoden :meth:`list.sort` endast är definierad för "
"listor. Däremot accepterar funktionen :func:`sorted` vilken iterabel som "
"helst."

#: ../../howto/sorting.rst:43
msgid "Key Functions"
msgstr "Viktiga funktioner"

#: ../../howto/sorting.rst:45
msgid ""
"Both :meth:`list.sort` and :func:`sorted` have a *key* parameter to specify "
"a function (or other callable) to be called on each list element prior to "
"making comparisons."
msgstr ""

#: ../../howto/sorting.rst:49
msgid "For example, here's a case-insensitive string comparison:"
msgstr ""

#: ../../howto/sorting.rst:54
msgid ""
"The value of the *key* parameter should be a function (or other callable) "
"that takes a single argument and returns a key to use for sorting purposes. "
"This technique is fast because the key function is called exactly once for "
"each input record."
msgstr ""
"Värdet på parametern *key* bör vara en funktion (eller annan anropsbar "
"funktion) som tar ett enda argument och returnerar en nyckel som kan "
"användas för sortering. Den här tekniken är snabb eftersom nyckelfunktionen "
"anropas exakt en gång för varje inmatad post."

#: ../../howto/sorting.rst:59
msgid ""
"A common pattern is to sort complex objects using some of the object's "
"indices as keys. For example:"
msgstr ""
"Ett vanligt mönster är att sortera komplexa objekt med hjälp av några av "
"objektets index som nycklar. Ett exempel:"

#: ../../howto/sorting.rst:70
msgid ""
"The same technique works for objects with named attributes. For example:"
msgstr "Samma teknik fungerar för objekt med namngivna attribut. Till exempel:"

#: ../../howto/sorting.rst:89
msgid "Operator Module Functions"
msgstr ""

#: ../../howto/sorting.rst:91
msgid ""
"The key-function patterns shown above are very common, so Python provides "
"convenience functions to make accessor functions easier and faster. The :mod:"
"`operator` module has :func:`~operator.itemgetter`, :func:`~operator."
"attrgetter`, and a :func:`~operator.methodcaller` function."
msgstr ""

#: ../../howto/sorting.rst:96
msgid "Using those functions, the above examples become simpler and faster:"
msgstr "Med hjälp av dessa funktioner blir exemplen ovan enklare och snabbare:"

#: ../../howto/sorting.rst:106
msgid ""
"The operator module functions allow multiple levels of sorting. For example, "
"to sort by *grade* then by *age*:"
msgstr ""
"Operatormodulens funktioner tillåter flera sorteringsnivåer. Du kan till "
"exempel sortera efter *grad* och sedan efter *ålder*:"

#: ../../howto/sorting.rst:116
msgid "Ascending and Descending"
msgstr "Stigande och fallande"

#: ../../howto/sorting.rst:118
msgid ""
"Both :meth:`list.sort` and :func:`sorted` accept a *reverse* parameter with "
"a boolean value. This is used to flag descending sorts. For example, to get "
"the student data in reverse *age* order:"
msgstr ""
"Både :meth:`list.sort` och :func:`sorted` accepterar en *reverse* parameter "
"med ett booleskt värde. Detta används för att flagga nedåtgående "
"sorteringar. Till exempel för att få studentdata i omvänd *ålders* ordning:"

#: ../../howto/sorting.rst:129
msgid "Sort Stability and Complex Sorts"
msgstr "Sorteringsstabilitet och komplexa sorteringar"

#: ../../howto/sorting.rst:131
msgid ""
"Sorts are guaranteed to be `stable <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. That means that when multiple records have "
"the same key, their original order is preserved."
msgstr ""
"Sorteringar är garanterat `stabila <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. Det innebär att när flera poster har samma "
"nyckel bevaras deras ursprungliga ordning."

#: ../../howto/sorting.rst:139
msgid ""
"Notice how the two records for *blue* retain their original order so that "
"``('blue', 1)`` is guaranteed to precede ``('blue', 2)``."
msgstr ""
"Lägg märke till hur de två posterna för *blue* behåller sin ursprungliga "
"ordning så att ``('blue', 1)`` garanterat kommer före ``('blue', 2)``."

#: ../../howto/sorting.rst:142
msgid ""
"This wonderful property lets you build complex sorts in a series of sorting "
"steps. For example, to sort the student data by descending *grade* and then "
"ascending *age*, do the *age* sort first and then sort again using *grade*:"
msgstr ""
"Med denna underbara egenskap kan du bygga upp komplexa sorteringar i en "
"serie sorteringssteg. Om du t.ex. vill sortera elevdata efter fallande "
"*grad* och sedan stigande *ålder*, gör du först *ålder*-sorteringen och "
"sedan sorterar du igen med *grad*:"

#: ../../howto/sorting.rst:150
msgid ""
"This can be abstracted out into a wrapper function that can take a list and "
"tuples of field and order to sort them on multiple passes."
msgstr ""
"Detta kan abstraheras till en omslagsfunktion som kan ta en lista och tupler "
"av fält och ordning för att sortera dem i flera omgångar."

#: ../../howto/sorting.rst:161
msgid ""
"The `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ algorithm used in "
"Python does multiple sorts efficiently because it can take advantage of any "
"ordering already present in a dataset."
msgstr ""
"Algoritmen `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ som används i "
"Python gör multipla sorteringar på ett effektivt sätt eftersom den kan dra "
"nytta av all ordning som redan finns i en dataset."

#: ../../howto/sorting.rst:166
msgid "The Old Way Using Decorate-Sort-Undecorate"
msgstr ""

#: ../../howto/sorting.rst:168
msgid "This idiom is called Decorate-Sort-Undecorate after its three steps:"
msgstr "Detta idiom kallas Decorate-Sort-Undecorate efter sina tre steg:"

#: ../../howto/sorting.rst:170
msgid ""
"First, the initial list is decorated with new values that control the sort "
"order."
msgstr ""
"Först dekoreras den ursprungliga listan med nya värden som styr "
"sorteringsordningen."

#: ../../howto/sorting.rst:172
msgid "Second, the decorated list is sorted."
msgstr "För det andra sorteras den dekorerade listan."

#: ../../howto/sorting.rst:174
msgid ""
"Finally, the decorations are removed, creating a list that contains only the "
"initial values in the new order."
msgstr ""
"Slutligen tas dekorationerna bort, vilket skapar en lista som endast "
"innehåller de ursprungliga värdena i den nya ordningen."

#: ../../howto/sorting.rst:177
msgid ""
"For example, to sort the student data by *grade* using the DSU approach:"
msgstr ""
"Till exempel för att sortera studentdata efter *klass* med DSU-metoden:"

#: ../../howto/sorting.rst:184
msgid ""
"This idiom works because tuples are compared lexicographically; the first "
"items are compared; if they are the same then the second items are compared, "
"and so on."
msgstr ""
"Detta idiom fungerar eftersom tupler jämförs lexikografiskt; de första "
"objekten jämförs; om de är desamma jämförs de andra objekten, och så vidare."

#: ../../howto/sorting.rst:188
msgid ""
"It is not strictly necessary in all cases to include the index *i* in the "
"decorated list, but including it gives two benefits:"
msgstr ""
"Det är inte alltid nödvändigt att inkludera index *i* i den dekorerade "
"listan, men det finns två fördelar med att inkludera det:"

#: ../../howto/sorting.rst:191
msgid ""
"The sort is stable -- if two items have the same key, their order will be "
"preserved in the sorted list."
msgstr ""
"Sorteringen är stabil - om två objekt har samma nyckel kommer deras ordning "
"att bevaras i den sorterade listan."

#: ../../howto/sorting.rst:194
msgid ""
"The original items do not have to be comparable because the ordering of the "
"decorated tuples will be determined by at most the first two items. So for "
"example the original list could contain complex numbers which cannot be "
"sorted directly."
msgstr ""
"De ursprungliga posterna behöver inte vara jämförbara eftersom ordningen på "
"de dekorerade tuplerna kommer att bestämmas av högst de två första posterna. "
"Den ursprungliga listan kan t.ex. innehålla komplexa tal som inte kan "
"sorteras direkt."

#: ../../howto/sorting.rst:199
msgid ""
"Another name for this idiom is `Schwartzian transform <https://en.wikipedia."
"org/wiki/Schwartzian_transform>`_\\, after Randal L. Schwartz, who "
"popularized it among Perl programmers."
msgstr ""
"Ett annat namn för detta idiom är `Schwartzian transform <https://en."
"wikipedia.org/wiki/Schwartzian_transform>`_\\, efter Randal L. Schwartz, som "
"populariserade det bland Perl-programmerare."

#: ../../howto/sorting.rst:203
msgid ""
"Now that Python sorting provides key-functions, this technique is not often "
"needed."
msgstr ""
"Nu när Python-sortering tillhandahåller nyckelfunktioner behövs inte denna "
"teknik så ofta."

#: ../../howto/sorting.rst:207
msgid "The Old Way Using the *cmp* Parameter"
msgstr ""

#: ../../howto/sorting.rst:209
msgid ""
"Many constructs given in this HOWTO assume Python 2.4 or later. Before that, "
"there was no :func:`sorted` builtin and :meth:`list.sort` took no keyword "
"arguments. Instead, all of the Py2.x versions supported a *cmp* parameter to "
"handle user specified comparison functions."
msgstr ""

#: ../../howto/sorting.rst:214
msgid ""
"In Py3.0, the *cmp* parameter was removed entirely (as part of a larger "
"effort to simplify and unify the language, eliminating the conflict between "
"rich comparisons and the :meth:`__cmp__` magic method)."
msgstr ""

#: ../../howto/sorting.rst:218
msgid ""
"In Py2.x, sort allowed an optional function which can be called for doing "
"the comparisons. That function should take two arguments to be compared and "
"then return a negative value for less-than, return zero if they are equal, "
"or return a positive value for greater-than. For example, we can do:"
msgstr ""

#: ../../howto/sorting.rst:228
msgid "Or you can reverse the order of comparison with:"
msgstr ""

#: ../../howto/sorting.rst:235
msgid ""
"When porting code from Python 2.x to 3.x, the situation can arise when you "
"have the user supplying a comparison function and you need to convert that "
"to a key function. The following wrapper makes that easy to do::"
msgstr ""

#: ../../howto/sorting.rst:258
msgid "To convert to a key function, just wrap the old comparison function:"
msgstr ""

#: ../../howto/sorting.rst:269
msgid ""
"In Python 3.2, the :func:`functools.cmp_to_key` function was added to the :"
"mod:`functools` module in the standard library."
msgstr ""

#: ../../howto/sorting.rst:273
msgid "Odd and Ends"
msgstr ""

#: ../../howto/sorting.rst:275
msgid ""
"For locale aware sorting, use :func:`locale.strxfrm` for a key function or :"
"func:`locale.strcoll` for a comparison function."
msgstr ""

#: ../../howto/sorting.rst:278
msgid ""
"The *reverse* parameter still maintains sort stability (so that records with "
"equal keys retain the original order). Interestingly, that effect can be "
"simulated without the parameter by using the builtin :func:`reversed` "
"function twice:"
msgstr ""
"Parametern *reverse* upprätthåller fortfarande sorteringsstabiliteten (så "
"att poster med lika nycklar behåller den ursprungliga ordningen). Intressant "
"nog kan denna effekt simuleras utan parametern genom att använda den "
"inbyggda funktionen :func:`reversed` två gånger:"

#: ../../howto/sorting.rst:290
msgid ""
"The sort routines use ``<`` when making comparisons between two objects. So, "
"it is easy to add a standard sort order to a class by defining an :meth:"
"`__lt__` method::"
msgstr ""

#: ../../howto/sorting.rst:298
msgid ""
"However, note that ``<`` can fall back to using :meth:`__gt__` if :meth:"
"`__lt__` is not implemented (see :func:`object.__lt__`)."
msgstr ""

#: ../../howto/sorting.rst:301
msgid ""
"Key functions need not depend directly on the objects being sorted. A key "
"function can also access external resources. For instance, if the student "
"grades are stored in a dictionary, they can be used to sort a separate list "
"of student names:"
msgstr ""
"Nyckelfunktioner behöver inte vara direkt beroende av de objekt som "
"sorteras. En nyckelfunktion kan också komma åt externa resurser. Om t.ex. "
"elevbetygen lagras i en ordbok kan de användas för att sortera en separat "
"lista med elevnamn:"
