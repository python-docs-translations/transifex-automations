# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 16:33+0000\n"
"PO-Revision-Date: 2025-09-22 16:49+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../howto/logging-cookbook.rst:5
msgid "Logging Cookbook"
msgstr "Kokbok för loggning"

#: ../../howto/logging-cookbook.rst:0
msgid "Author"
msgstr "Författare"

#: ../../howto/logging-cookbook.rst:7
msgid "Vinay Sajip <vinay_sajip at red-dove dot com>"
msgstr "Vinay Sajip <vinay_sajip at red-dove dot com>"

#: ../../howto/logging-cookbook.rst:9
msgid ""
"This page contains a number of recipes related to logging, which have been "
"found useful in the past. For links to tutorial and reference information, "
"please see :ref:`cookbook-ref-links`."
msgstr ""
"Denna sida innehåller ett antal recept relaterade till loggning, som har "
"visat sig vara användbara i det förflutna. För länkar till handledning och "
"referensinformation, se :ref:`cookbook-ref-links`."

#: ../../howto/logging-cookbook.rst:16
msgid "Using logging in multiple modules"
msgstr "Använda loggning i flera moduler"

#: ../../howto/logging-cookbook.rst:18
msgid ""
"Multiple calls to ``logging.getLogger('someLogger')`` return a reference to "
"the same logger object.  This is true not only within the same module, but "
"also across modules as long as it is in the same Python interpreter process."
"  It is true for references to the same object; additionally, application "
"code can define and configure a parent logger in one module and create (but "
"not configure) a child logger in a separate module, and all logger calls to "
"the child will pass up to the parent.  Here is a main module::"
msgstr ""
"Flera anrop till ``logging.getLogger('someLogger')`` returnerar en referens "
"till samma loggerobjekt.  Detta gäller inte bara inom samma modul, utan även"
" över moduler så länge som det är i samma Python-tolkningsprocess.  Det "
"gäller för referenser till samma objekt; dessutom kan programkod definiera "
"och konfigurera en överordnad logger i en modul och skapa (men inte "
"konfigurera) en underordnad logger i en separat modul, och alla loggeranrop "
"till den underordnade kommer att passera upp till den överordnade.  Här är "
"en huvudmodul::"

#: ../../howto/logging-cookbook.rst:56
msgid "Here is the auxiliary module::"
msgstr "Här är hjälpmodulen::"

#: ../../howto/logging-cookbook.rst:76
msgid "The output looks like this:"
msgstr "Utmatningen ser ut så här:"

#: ../../howto/logging-cookbook.rst:102
msgid "Logging from multiple threads"
msgstr "Loggning från flera trådar"

#: ../../howto/logging-cookbook.rst:104
msgid ""
"Logging from multiple threads requires no special effort. The following "
"example shows logging from the main (initial) thread and another thread::"
msgstr ""
"Loggning från flera trådar kräver ingen särskild ansträngning. Följande "
"exempel visar loggning från huvudtråden (den ursprungliga tråden) och en "
"annan tråd::"

#: ../../howto/logging-cookbook.rst:133
msgid "When run, the script should print something like the following:"
msgstr "När skriptet körs ska det skriva ut något i stil med följande:"

#: ../../howto/logging-cookbook.rst:155
msgid ""
"This shows the logging output interspersed as one might expect. This "
"approach works for more threads than shown here, of course."
msgstr ""
"Detta visar loggningsutmatningen utspridd som man kan förvänta sig. Det här "
"tillvägagångssättet fungerar naturligtvis för fler trådar än vad som visas "
"här."

#: ../../howto/logging-cookbook.rst:159
msgid "Multiple handlers and formatters"
msgstr "Flera hanterare och formatterare"

#: ../../howto/logging-cookbook.rst:161
msgid ""
"Loggers are plain Python objects.  The :meth:`~Logger.addHandler` method has"
" no minimum or maximum quota for the number of handlers you may add.  "
"Sometimes it will be beneficial for an application to log all messages of "
"all severities to a text file while simultaneously logging errors or above "
"to the console.  To set this up, simply configure the appropriate handlers."
"  The logging calls in the application code will remain unchanged.  Here is "
"a slight modification to the previous simple module-based configuration "
"example::"
msgstr ""
"Loggar är vanliga Python-objekt.  Metoden :meth:`~Logger.addHandler` har "
"ingen minimi- eller maximikvot för antalet hanterare du kan lägga till.  "
"Ibland kan det vara fördelaktigt för en applikation att logga alla "
"meddelanden av alla allvarlighetsgrader till en textfil samtidigt som fel "
"eller över loggas till konsolen.  För att konfigurera detta konfigurerar du "
"helt enkelt lämpliga hanterare.  Loggningsanropen i applikationskoden "
"förblir oförändrade.  Här är en liten modifiering av det tidigare enkla "
"modulbaserade konfigurationsexemplet::"

#: ../../howto/logging-cookbook.rst:194
msgid ""
"Notice that the 'application' code does not care about multiple handlers.  "
"All that changed was the addition and configuration of a new handler named "
"*fh*."
msgstr ""
"Observera att \"applikationskoden\" inte bryr sig om flera hanterare.  Det "
"enda som ändrades var att en ny hanterare med namnet *fh* lades till och "
"konfigurerades."

#: ../../howto/logging-cookbook.rst:197
msgid ""
"The ability to create new handlers with higher- or lower-severity filters "
"can be very helpful when writing and testing an application.  Instead of "
"using many ``print`` statements for debugging, use ``logger.debug``: Unlike "
"the print statements, which you will have to delete or comment out later, "
"the logger.debug statements can remain intact in the source code and remain "
"dormant until you need them again.  At that time, the only change that needs"
" to happen is to modify the severity level of the logger and/or handler to "
"debug."
msgstr ""
"Möjligheten att skapa nya hanterare med filter av högre eller lägre "
"allvarlighetsgrad kan vara till stor hjälp när man skriver och testar en "
"applikation.  Istället för att använda många ``print``-satser för "
"felsökning, använd ``logger.debug``: Till skillnad från print-satserna, som "
"du måste ta bort eller kommentera senare, kan logger.debug-satserna förbli "
"intakta i källkoden och förbli vilande tills du behöver dem igen.  Då är den"
" enda förändring som behöver göras att ändra loggarens och/eller hanterarens"
" allvarlighetsgrad till debug."

#: ../../howto/logging-cookbook.rst:208
msgid "Logging to multiple destinations"
msgstr "Loggning till flera destinationer"

#: ../../howto/logging-cookbook.rst:210
msgid ""
"Let's say you want to log to console and file with different message formats"
" and in differing circumstances. Say you want to log messages with levels of"
" DEBUG and higher to file, and those messages at level INFO and higher to "
"the console. Let's also assume that the file should contain timestamps, but "
"the console messages should not. Here's how you can achieve this::"
msgstr ""
"Låt oss säga att du vill logga till konsol och fil med olika "
"meddelandeformat och under olika omständigheter. Låt oss säga att du vill "
"logga meddelanden med nivå DEBUG och högre till filen, och de meddelanden "
"som har nivå INFO och högre till konsolen. Låt oss också anta att filen ska "
"innehålla tidsstämplar, men att konsolmeddelandena inte ska göra det. Så här"
" kan du uppnå detta::"

#: ../../howto/logging-cookbook.rst:248
msgid "When you run this, on the console you will see"
msgstr "När du kör detta kommer du att se följande på konsolen"

#: ../../howto/logging-cookbook.rst:257
msgid "and in the file you will see something like"
msgstr "och i filen kommer du att se något liknande"

#: ../../howto/logging-cookbook.rst:267
msgid ""
"As you can see, the DEBUG message only shows up in the file. The other "
"messages are sent to both destinations."
msgstr ""
"Som du kan se dyker bara DEBUG-meddelandet upp i filen. De andra "
"meddelandena skickas till båda destinationerna."

#: ../../howto/logging-cookbook.rst:270
msgid ""
"This example uses console and file handlers, but you can use any number and "
"combination of handlers you choose."
msgstr ""
"I det här exemplet används konsol- och filhanterare, men du kan använda "
"valfritt antal och valfri kombination av hanterare."

#: ../../howto/logging-cookbook.rst:273
msgid ""
"Note that the above choice of log filename ``/tmp/myapp.log`` implies use of"
" a standard location for temporary files on POSIX systems. On Windows, you "
"may need to choose a different directory name for the log - just ensure that"
" the directory exists and that you have the permissions to create and update"
" files in it."
msgstr ""
"Observera att ovanstående val av loggfilnamn ``/tmp/myapp.log`` innebär att "
"en standardplats för temporära filer används på POSIX-system. I Windows kan "
"du behöva välja ett annat katalognamn för loggen - se bara till att "
"katalogen finns och att du har behörighet att skapa och uppdatera filer i "
"den."

#: ../../howto/logging-cookbook.rst:282
msgid "Custom handling of levels"
msgstr "Anpassad hantering av nivåer"

#: ../../howto/logging-cookbook.rst:284
msgid ""
"Sometimes, you might want to do something slightly different from the "
"standard handling of levels in handlers, where all levels above a threshold "
"get processed by a handler. To do this, you need to use filters. Let's look "
"at a scenario where you want to arrange things as follows:"
msgstr ""
"Ibland kanske du vill göra något som skiljer sig något från "
"standardhanteringen av nivåer i hanterare, där alla nivåer över ett "
"tröskelvärde bearbetas av en hanterare. För att göra detta måste du använda "
"filter. Låt oss titta på ett scenario där du vill ordna saker på följande "
"sätt:"

#: ../../howto/logging-cookbook.rst:289
msgid "Send messages of severity ``INFO`` and ``WARNING`` to ``sys.stdout``"
msgstr ""
"Skicka meddelanden av allvarlighetsgrad ``INFO`` och ``WARNING`` till "
"``sys.stdout``"

#: ../../howto/logging-cookbook.rst:290
msgid "Send messages of severity ``ERROR`` and above to ``sys.stderr``"
msgstr ""
"Skicka meddelanden med allvarlighetsgrad ``ERROR`` och högre till "
"``sys.stderr``"

#: ../../howto/logging-cookbook.rst:291
msgid "Send messages of severity ``DEBUG`` and above to file ``app.log``"
msgstr ""
"Skicka meddelanden av allvarlighetsgrad ``DEBUG`` och högre till filen "
"``app.log``"

#: ../../howto/logging-cookbook.rst:293
msgid "Suppose you configure logging with the following JSON:"
msgstr "Anta att du konfigurerar loggning med följande JSON:"

#: ../../howto/logging-cookbook.rst:335
msgid ""
"This configuration does *almost* what we want, except that ``sys.stdout`` "
"would show messages of severity ``ERROR`` and above as well as ``INFO`` and "
"``WARNING`` messages. To prevent this, we can set up a filter which excludes"
" those messages and add it to the relevant handler. This can be configured "
"by adding a ``filters`` section parallel to ``formatters`` and ``handlers``:"
msgstr ""

#: ../../howto/logging-cookbook.rst:352
msgid "and changing the section on the ``stdout`` handler to add it:"
msgstr "och ändra avsnittet om ``stdout`` hanteraren för att lägga till det:"

#: ../../howto/logging-cookbook.rst:366
msgid ""
"A filter is just a function, so we can define the ``filter_maker`` (a "
"factory function) as follows:"
msgstr ""
"Ett filter är bara en funktion, så vi kan definiera ``filter_maker`` (en "
"fabriksfunktion) på följande sätt:"

#: ../../howto/logging-cookbook.rst:379
msgid ""
"This converts the string argument passed in to a numeric level, and returns "
"a function which only returns ``True`` if the level of the passed in record "
"is at or below the specified level. Note that in this example I have defined"
" the ``filter_maker`` in a test script ``main.py`` that I run from the "
"command line, so its module will be ``__main__`` - hence the "
"``__main__.filter_maker`` in the filter configuration. You will need to "
"change that if you define it in a different module."
msgstr ""
"Detta konverterar strängargumentet som skickas in till en numerisk nivå och "
"returnerar en funktion som endast returnerar ``True`` om nivån på den "
"skickade posten är på eller under den angivna nivån. Observera att jag i det"
" här exemplet har definierat ``filter_maker`` i ett testskript ``main.py`` "
"som jag kör från kommandoraden, så dess modul kommer att vara ``__main__`` -"
" därav ``__main__.filter_maker`` i filterkonfigurationen. Du måste ändra det"
" om du definierar det i en annan modul."

#: ../../howto/logging-cookbook.rst:387
msgid "With the filter added, we can run ``main.py``, which in full is:"
msgstr "Med filtret tillagt kan vi köra ``main.py``, som i sin helhet är:"

#: ../../howto/logging-cookbook.rst:457
msgid "And after running it like this:"
msgstr "Och efter att ha kört det så här:"

#: ../../howto/logging-cookbook.rst:463
msgid "We can see the results are as expected:"
msgstr "Vi kan se att resultaten är som förväntat:"

#: ../../howto/logging-cookbook.rst:489
msgid "Configuration server example"
msgstr "Exempel på konfigurationsserver"

#: ../../howto/logging-cookbook.rst:491
msgid ""
"Here is an example of a module using the logging configuration server::"
msgstr ""
"Här följer ett exempel på en modul som använder konfigurationsservern för "
"loggning::"

#: ../../howto/logging-cookbook.rst:522
msgid ""
"And here is a script that takes a filename and sends that file to the "
"server, properly preceded with the binary-encoded length, as the new logging"
" configuration::"
msgstr ""
"Och här är ett skript som tar ett filnamn och skickar den filen till "
"servern, korrekt föregången av den binärt kodade längden, som den nya "
"loggningskonfigurationen::"

#: ../../howto/logging-cookbook.rst:547
msgid "Dealing with handlers that block"
msgstr "Hantering av handläggare som blockerar"

#: ../../howto/logging-cookbook.rst:551
msgid ""
"Sometimes you have to get your logging handlers to do their work without "
"blocking the thread you're logging from. This is common in web applications,"
" though of course it also occurs in other scenarios."
msgstr ""
"Ibland måste man få sina logghanterare att göra sitt jobb utan att blockera "
"den tråd man loggar från. Detta är vanligt i webbapplikationer, men det "
"förekommer naturligtvis även i andra scenarier."

#: ../../howto/logging-cookbook.rst:555
msgid ""
"A common culprit which demonstrates sluggish behaviour is the "
":class:`SMTPHandler`: sending emails can take a long time, for a number of "
"reasons outside the developer's control (for example, a poorly performing "
"mail or network infrastructure). But almost any network-based handler can "
"block: Even a :class:`SocketHandler` operation may do a DNS query under the "
"hood which is too slow (and this query can be deep in the socket library "
"code, below the Python layer, and outside your control)."
msgstr ""
"En vanlig bov som uppvisar ett trögt beteende är :class:`SMTPHandler`: det "
"kan ta lång tid att skicka e-post av ett antal anledningar som ligger "
"utanför utvecklarens kontroll (till exempel en dåligt fungerande e-post- "
"eller nätverksinfrastruktur). Men nästan alla nätverksbaserade hanterare kan"
" blockera: Även en :class:`SocketHandler`-operation kan göra en DNS-fråga "
"under huven som är för långsam (och den här frågan kan vara djupt inne i "
"socketbibliotekskoden, under Python-lagret och utanför din kontroll)."

#: ../../howto/logging-cookbook.rst:563
msgid ""
"One solution is to use a two-part approach. For the first part, attach only "
"a :class:`QueueHandler` to those loggers which are accessed from "
"performance-critical threads. They simply write to their queue, which can be"
" sized to a large enough capacity or initialized with no upper bound to "
"their size. The write to the queue will typically be accepted quickly, "
"though you will probably need to catch the :exc:`queue.Full` exception as a "
"precaution in your code. If you are a library developer who has performance-"
"critical threads in their code, be sure to document this (together with a "
"suggestion to attach only ``QueueHandlers`` to your loggers) for the benefit"
" of other developers who will use your code."
msgstr ""
"En lösning är att använda ett tvådelat tillvägagångssätt. I den första delen"
" kopplar man bara en :class:`QueueHandler` till de loggrar som nås från "
"prestandakritiska trådar. De skriver helt enkelt till sin kö, som kan "
"dimensioneras till en tillräckligt stor kapacitet eller initialiseras utan "
"någon övre gräns för deras storlek. Skrivningen till kön kommer vanligtvis "
"att accepteras snabbt, men du kommer förmodligen att behöva fånga "
":exc:`queue.Full`-undantaget som en försiktighetsåtgärd i din kod. Om du är "
"en biblioteksutvecklare som har prestandakritiska trådar i sin kod, se till "
"att dokumentera detta (tillsammans med ett förslag att endast bifoga "
"``QueueHandlers`` till dina loggrar) till förmån för andra utvecklare som "
"kommer att använda din kod."

#: ../../howto/logging-cookbook.rst:574
msgid ""
"The second part of the solution is :class:`QueueListener`, which has been "
"designed as the counterpart to :class:`QueueHandler`.  A "
":class:`QueueListener` is very simple: it's passed a queue and some "
"handlers, and it fires up an internal thread which listens to its queue for "
"LogRecords sent from ``QueueHandlers`` (or any other source of "
"``LogRecords``, for that matter). The ``LogRecords`` are removed from the "
"queue and passed to the handlers for processing."
msgstr ""
"Den andra delen av lösningen är :class:`QueueListener`, som har utformats "
"som motsvarigheten till :class:`QueueHandler`.  En :class:`QueueListener` är"
" mycket enkel: den får en kö och några handlers, och startar en intern tråd "
"som lyssnar på sin kö efter LogRecords som skickas från ``QueueHandlers`` "
"(eller någon annan källa till ``LogRecords``, för den delen). ``LogRecords``"
" tas bort från kön och skickas till handläggarna för bearbetning."

#: ../../howto/logging-cookbook.rst:582
msgid ""
"The advantage of having a separate :class:`QueueListener` class is that you "
"can use the same instance to service multiple ``QueueHandlers``. This is "
"more resource-friendly than, say, having threaded versions of the existing "
"handler classes, which would eat up one thread per handler for no particular"
" benefit."
msgstr ""
"Fördelen med att ha en separat :class:`QueueListener`-klass är att du kan "
"använda samma instans för att betjäna flera ``QueueHandlers``. Detta är mer "
"resursvänligt än att till exempel ha trådade versioner av de befintliga "
"hanterarklasserna, som skulle äta upp en tråd per hanterare utan någon "
"särskild fördel."

#: ../../howto/logging-cookbook.rst:587
msgid "An example of using these two classes follows (imports omitted)::"
msgstr ""
"Ett exempel på användning av dessa två klasser följer (import utelämnad)::"

#: ../../howto/logging-cookbook.rst:605
msgid "which, when run, will produce:"
msgstr "som, när den körs, kommer att producera:"

#: ../../howto/logging-cookbook.rst:611
msgid ""
"Although the earlier discussion wasn't specifically talking about async "
"code, but rather about slow logging handlers, it should be noted that when "
"logging from async code, network and even file handlers could lead to "
"problems (blocking the event loop) because some logging is done from "
":mod:`asyncio` internals. It might be best, if any async code is used in an "
"application, to use the above approach for logging, so that any blocking "
"code runs only in the ``QueueListener`` thread."
msgstr ""
"Även om den tidigare diskussionen inte specifikt handlade om asynkron kod, "
"utan snarare om långsamma logghanterare, bör det noteras att vid loggning "
"från asynkron kod kan nätverks- och till och med filhanterare leda till "
"problem (blockering av händelseslingan) eftersom viss loggning görs från "
":mod:`asyncio` internals. Det kan vara bäst, om någon asynkron kod används i"
" en applikation, att använda ovanstående tillvägagångssätt för loggning, så "
"att all blockerande kod endast körs i ``QueueListener``-tråden."

#: ../../howto/logging-cookbook.rst:619
msgid ""
"Prior to Python 3.5, the :class:`QueueListener` always passed every message "
"received from the queue to every handler it was initialized with. (This was "
"because it was assumed that level filtering was all done on the other side, "
"where the queue is filled.) From 3.5 onwards, this behaviour can be changed "
"by passing a keyword argument ``respect_handler_level=True`` to the "
"listener's constructor. When this is done, the listener compares the level "
"of each message with the handler's level, and only passes a message to a "
"handler if it's appropriate to do so."
msgstr ""
"Före Python 3.5 skickade :class:`QueueListener` alltid varje meddelande som "
"togs emot från kön till varje hanterare som den initialiserades med. (Detta "
"berodde på att det antogs att nivåfiltreringen gjordes på andra sidan, där "
"kön fylls på) Från och med 3.5 kan detta beteende ändras genom att skicka "
"ett nyckelordsargument ``respect_handler_level=True`` till lyssnarens "
"konstruktör. När detta görs jämför lyssnaren nivån på varje meddelande med "
"hanterarens nivå och skickar bara ett meddelande till en hanterare om det är"
" lämpligt att göra det."

#: ../../howto/logging-cookbook.rst:632
msgid "Sending and receiving logging events across a network"
msgstr "Skicka och ta emot loggningshändelser över ett nätverk"

#: ../../howto/logging-cookbook.rst:634
msgid ""
"Let's say you want to send logging events across a network, and handle them "
"at the receiving end. A simple way of doing this is attaching a "
":class:`SocketHandler` instance to the root logger at the sending end::"
msgstr ""
"Låt oss säga att du vill skicka loggningshändelser över ett nätverk och "
"hantera dem i mottagaränden. Ett enkelt sätt att göra detta är att koppla en"
" :class:`SocketHandler`-instans till rotloggaren i den sändande änden::"

#: ../../howto/logging-cookbook.rst:662
msgid ""
"At the receiving end, you can set up a receiver using the "
":mod:`socketserver` module. Here is a basic working example::"
msgstr ""
"På mottagarsidan kan du sätta upp en mottagare med hjälp av modulen "
":mod:`socketserver`. Här är ett grundläggande arbetsexempel::"

#: ../../howto/logging-cookbook.rst:750
msgid ""
"First run the server, and then the client. On the client side, nothing is "
"printed on the console; on the server side, you should see something like:"
msgstr ""
"Kör först servern och sedan klienten. På klientsidan skrivs ingenting ut på "
"konsolen, men på serversidan bör du se något i stil med:"

#: ../../howto/logging-cookbook.rst:762
msgid ""
"Note that there are some security issues with pickle in some scenarios. If "
"these affect you, you can use an alternative serialization scheme by "
"overriding the :meth:`~SocketHandler.makePickle` method and implementing "
"your alternative there, as well as adapting the above script to use your "
"alternative serialization."
msgstr ""
"Observera att det finns vissa säkerhetsproblem med pickle i vissa scenarier."
" Om dessa påverkar dig kan du använda ett alternativt serialiseringsschema "
"genom att åsidosätta :meth:`~SocketHandler.makePickle`-metoden och "
"implementera ditt alternativ där, samt anpassa ovanstående skript för att "
"använda din alternativa serialisering."

#: ../../howto/logging-cookbook.rst:770
msgid "Running a logging socket listener in production"
msgstr "Kör en socketlyssnare för loggning i produktion"

#: ../../howto/logging-cookbook.rst:774
msgid ""
"To run a logging listener in production, you may need to use a process-"
"management tool such as `Supervisor <http://supervisord.org/>`_. `Here is a "
"Gist <socket-listener-gist_>`__ which provides the bare-bones files to run "
"the above functionality using Supervisor. It consists of the following "
"files:"
msgstr ""
"För att köra en loggningslyssnare i produktion kan du behöva använda ett "
"processhanteringsverktyg som `Supervisor <http://supervisord.org/>`_. `Här "
"är en Gist <socket-listener-gist_>`__ som innehåller de grundläggande "
"filerna för att köra ovanstående funktionalitet med Supervisor. Den består "
"av följande filer:"

#: ../../howto/logging-cookbook.rst:781
msgid "File"
msgstr "Fil"

#: ../../howto/logging-cookbook.rst:781
msgid "Purpose"
msgstr "Syfte"

#: ../../howto/logging-cookbook.rst:783
msgid ":file:`prepare.sh`"
msgstr ":fil:`prepare.sh`"

#: ../../howto/logging-cookbook.rst:783
msgid "A Bash script to prepare the environment for testing"
msgstr "Ett Bash-skript för att förbereda miljön för testning"

#: ../../howto/logging-cookbook.rst:786
msgid ":file:`supervisor.conf`"
msgstr ":file:`supervisor.conf` (fil:`supervisor.conf`)"

#: ../../howto/logging-cookbook.rst:786
msgid ""
"The Supervisor configuration file, which has entries for the listener and a "
"multi-process web application"
msgstr ""
"Konfigurationsfilen för Supervisor, som innehåller poster för lyssnaren och "
"en webbapplikation med flera processer"

#: ../../howto/logging-cookbook.rst:790
msgid ":file:`ensure_app.sh`"
msgstr ":fil:`ensure_app.sh`"

#: ../../howto/logging-cookbook.rst:790
msgid ""
"A Bash script to ensure that Supervisor is running with the above "
"configuration"
msgstr ""
"Ett Bash-skript för att säkerställa att Supervisor körs med ovanstående "
"konfiguration"

#: ../../howto/logging-cookbook.rst:793
msgid ":file:`log_listener.py`"
msgstr ":fil:`log_listener.py`"

#: ../../howto/logging-cookbook.rst:793
msgid ""
"The socket listener program which receives log events and records them to a "
"file"
msgstr ""
"Socket-lyssnarprogrammet som tar emot logghändelser och registrerar dem i en"
" fil"

#: ../../howto/logging-cookbook.rst:796
msgid ":file:`main.py`"
msgstr ":fil:`main.py`"

#: ../../howto/logging-cookbook.rst:796
msgid ""
"A simple web application which performs logging via a socket connected to "
"the listener"
msgstr ""
"En enkel webbapplikation som utför loggning via ett uttag som är anslutet "
"till lyssnaren"

#: ../../howto/logging-cookbook.rst:799
msgid ":file:`webapp.json`"
msgstr ":fil:`webapp.json`"

#: ../../howto/logging-cookbook.rst:799
msgid "A JSON configuration file for the web application"
msgstr "En JSON-konfigurationsfil för webbapplikationen"

#: ../../howto/logging-cookbook.rst:801
msgid ":file:`client.py`"
msgstr ":fil:`klient.py`"

#: ../../howto/logging-cookbook.rst:801
msgid "A Python script to exercise the web application"
msgstr "Ett Python-skript för att träna webbapplikationen"

#: ../../howto/logging-cookbook.rst:804
msgid ""
"The web application uses `Gunicorn <https://gunicorn.org/>`_, which is a "
"popular web application server that starts multiple worker processes to "
"handle requests. This example setup shows how the workers can write to the "
"same log file without conflicting with one another --- they all go through "
"the socket listener."
msgstr ""
"Webbapplikationen använder `Gunicorn <https://gunicorn.org/>`_, som är en "
"populär webbapplikationsserver som startar flera arbetsprocesser för att "
"hantera förfrågningar. Den här exempelkonfigurationen visar hur "
"arbetsprocesserna kan skriva till samma loggfil utan att hamna i konflikt "
"med varandra --- de går alla via socketlyssnaren."

#: ../../howto/logging-cookbook.rst:809
msgid "To test these files, do the following in a POSIX environment:"
msgstr "För att testa dessa filer gör du följande i en POSIX-miljö:"

#: ../../howto/logging-cookbook.rst:811
msgid ""
"Download `the Gist <socket-listener-gist_>`__ as a ZIP archive using the "
":guilabel:`Download ZIP` button."
msgstr ""
"Ladda ner `the Gist <socket-listener-gist_>`__ som ett ZIP-arkiv med hjälp "
"av :guilabel:`Download ZIP`-knappen."

#: ../../howto/logging-cookbook.rst:814
msgid "Unzip the above files from the archive into a scratch directory."
msgstr "Packa upp ovanstående filer från arkivet till en scratch-katalog."

#: ../../howto/logging-cookbook.rst:816
msgid ""
"In the scratch directory, run ``bash prepare.sh`` to get things ready. This "
"creates a :file:`run` subdirectory to contain Supervisor-related and log "
"files, and a :file:`venv` subdirectory to contain a virtual environment into"
" which ``bottle``, ``gunicorn`` and ``supervisor`` are installed."
msgstr ""
"I scratch-katalogen kör du ``bash prepare.sh`` för att göra allting klart. "
"Detta skapar en :file:`run`-underkatalog som innehåller Supervisor-"
"relaterade filer och loggfiler, och en :file:`venv`-underkatalog som "
"innehåller en virtuell miljö i vilken ``bottle``, ``gunicorn`` och "
"``supervisor`` installeras."

#: ../../howto/logging-cookbook.rst:821
msgid ""
"Run ``bash ensure_app.sh`` to ensure that Supervisor is running with the "
"above configuration."
msgstr ""
"Kör ``bash ensure_app.sh`` för att säkerställa att Supervisor körs med "
"ovanstående konfiguration."

#: ../../howto/logging-cookbook.rst:824
msgid ""
"Run ``venv/bin/python client.py`` to exercise the web application, which "
"will lead to records being written to the log."
msgstr ""
"Kör ``venv/bin/python client.py`` för att träna webbapplikationen, vilket "
"kommer att leda till att poster skrivs till loggen."

#: ../../howto/logging-cookbook.rst:827
msgid ""
"Inspect the log files in the :file:`run` subdirectory. You should see the "
"most recent log lines in files matching the pattern :file:`app.log*`. They "
"won't be in any particular order, since they have been handled concurrently "
"by different worker processes in a non-deterministic way."
msgstr ""
"Inspektera loggfilerna i underkatalogen :file:`run`. Du bör se de senaste "
"loggraderna i filer som matchar mönstret :file:`app.log*`. De kommer inte "
"att vara i någon särskild ordning, eftersom de har hanterats samtidigt av "
"olika arbetsprocesser på ett icke-deterministiskt sätt."

#: ../../howto/logging-cookbook.rst:832
msgid ""
"You can shut down the listener and the web application by running "
"``venv/bin/supervisorctl -c supervisor.conf shutdown``."
msgstr ""
"Du kan stänga av lyssnaren och webbapplikationen genom att köra "
"``venv/bin/supervisorctl -c supervisor.conf shutdown``."

#: ../../howto/logging-cookbook.rst:835
msgid ""
"You may need to tweak the configuration files in the unlikely event that the"
" configured ports clash with something else in your test environment."
msgstr ""
"Du kan behöva justera konfigurationsfilerna i den osannolika händelsen att "
"de konfigurerade portarna krockar med något annat i din testmiljö."

#: ../../howto/logging-cookbook.rst:843
msgid "Adding contextual information to your logging output"
msgstr "Lägga till kontextuell information till din loggningsutdata"

#: ../../howto/logging-cookbook.rst:845
msgid ""
"Sometimes you want logging output to contain contextual information in "
"addition to the parameters passed to the logging call. For example, in a "
"networked application, it may be desirable to log client-specific "
"information in the log (e.g. remote client's username, or IP address). "
"Although you could use the *extra* parameter to achieve this, it's not "
"always convenient to pass the information in this way. While it might be "
"tempting to create :class:`Logger` instances on a per-connection basis, this"
" is not a good idea because these instances are not garbage collected. While"
" this is not a problem in practice, when the number of :class:`Logger` "
"instances is dependent on the level of granularity you want to use in "
"logging an application, it could be hard to manage if the number of "
":class:`Logger` instances becomes effectively unbounded."
msgstr ""
"Ibland vill du att loggningsutdata ska innehålla kontextuell information "
"utöver de parametrar som skickas till loggningsanropet. I en "
"nätverksansluten applikation kan det t.ex. vara önskvärt att logga "
"klientspecifik information i loggen (t.ex. fjärrklientens användarnamn eller"
" IP-adress). Även om du kan använda *extra*-parametern för att uppnå detta "
"är det inte alltid bekvämt att skicka informationen på det här sättet. Även "
"om det kan vara frestande att skapa :class:`Logger`-instanser per "
"anslutning, är det inte en bra idé eftersom dessa instanser inte är garbage "
"collected. Även om detta inte är ett problem i praktiken, när antalet "
":class:`Logger`-instanser är beroende av den detaljnivå du vill använda för "
"att logga en applikation, kan det vara svårt att hantera om antalet "
":class:`Logger`-instanser i praktiken blir obegränsat."

#: ../../howto/logging-cookbook.rst:860
msgid "Using LoggerAdapters to impart contextual information"
msgstr "Använda LoggerAdapters för att förmedla kontextuell information"

#: ../../howto/logging-cookbook.rst:862
msgid ""
"An easy way in which you can pass contextual information to be output along "
"with logging event information is to use the :class:`LoggerAdapter` class. "
"This class is designed to look like a :class:`Logger`, so that you can call "
":meth:`debug`, :meth:`info`, :meth:`warning`, :meth:`error`, "
":meth:`exception`, :meth:`critical` and :meth:`log`. These methods have the "
"same signatures as their counterparts in :class:`Logger`, so you can use the"
" two types of instances interchangeably."
msgstr ""
"Ett enkelt sätt att skicka kontextuell information som ska matas ut "
"tillsammans med loggningshändelseinformation är att använda klassen "
":class:`LoggerAdapter`. Denna klass är utformad för att se ut som en "
":class:`Logger`, så att du kan anropa :meth:`debug`, :meth:`info`, "
":meth:`warning`, :meth:`error`, :meth:`exception`, :meth:`critical` och "
":meth:`log`. Dessa metoder har samma signaturer som sina motsvarigheter i "
":class:`Logger`, så du kan använda de två typerna av instanser omväxlande."

#: ../../howto/logging-cookbook.rst:870
msgid ""
"When you create an instance of :class:`LoggerAdapter`, you pass it a "
":class:`Logger` instance and a dict-like object which contains your "
"contextual information. When you call one of the logging methods on an "
"instance of :class:`LoggerAdapter`, it delegates the call to the underlying "
"instance of :class:`Logger` passed to its constructor, and arranges to pass "
"the contextual information in the delegated call. Here's a snippet from the "
"code of :class:`LoggerAdapter`::"
msgstr ""
"När du skapar en instans av :class:`LoggerAdapter`, skickar du en instans av"
" :class:`Logger` och ett diktliknande objekt som innehåller din kontextuella"
" information. När du anropar en av loggningsmetoderna på en instans av "
":class:`LoggerAdapter` delegerar den anropet till den underliggande "
"instansen av :class:`Logger` som skickats till dess konstruktör och ser till"
" att skicka den kontextuella informationen i det delegerade anropet. Här är "
"ett utdrag från koden för :class:`LoggerAdapter`::"

#: ../../howto/logging-cookbook.rst:886
msgid ""
"The :meth:`~LoggerAdapter.process` method of :class:`LoggerAdapter` is where"
" the contextual information is added to the logging output. It's passed the "
"message and keyword arguments of the logging call, and it passes back "
"(potentially) modified versions of these to use in the call to the "
"underlying logger. The default implementation of this method leaves the "
"message alone, but inserts an 'extra' key in the keyword argument whose "
"value is the dict-like object passed to the constructor. Of course, if you "
"had passed an 'extra' keyword argument in the call to the adapter, it will "
"be silently overwritten."
msgstr ""
"Metoden :meth:`~LoggerAdapter.process` i :class:`LoggerAdapter` är där den "
"kontextuella informationen läggs till i loggningsutdata. Den passerar "
"meddelande- och nyckelordsargumenten i loggningsanropet och skickar tillbaka"
" (potentiellt) modifierade versioner av dessa för att användas i anropet "
"till den underliggande loggern. Standardimplementeringen av den här metoden "
"lämnar meddelandet ifred, men infogar en \"extra\" nyckel i keyword-"
"argumentet vars värde är det diktliknande objekt som skickas till "
"konstruktören. Om du hade skickat ett \"extra\" nyckelordsargument i anropet"
" till adaptern, kommer det naturligtvis att skrivas över i tysthet."

#: ../../howto/logging-cookbook.rst:895
msgid ""
"The advantage of using 'extra' is that the values in the dict-like object "
"are merged into the :class:`LogRecord` instance's __dict__, allowing you to "
"use customized strings with your :class:`Formatter` instances which know "
"about the keys of the dict-like object. If you need a different method, e.g."
" if you want to prepend or append the contextual information to the message "
"string, you just need to subclass :class:`LoggerAdapter` and override "
":meth:`~LoggerAdapter.process` to do what you need. Here is a simple "
"example::"
msgstr ""
"Fördelen med att använda \"extra\" är att värdena i det diktliknande "
"objektet slås samman till :class:`LogRecord`-instansens __dict__, vilket gör"
" att du kan använda anpassade strängar med dina :class:`Formatter`-instanser"
" som känner till nycklarna i det diktliknande objektet. Om du behöver en "
"annan metod, t.ex. om du vill prependla eller appendla den kontextuella "
"informationen till meddelandesträngen, behöver du bara underordna dig "
":class:`LoggerAdapter` och åsidosätta :meth:`~LoggerAdapter.process` för att"
" göra vad du behöver. Här är ett enkelt exempel::"

#: ../../howto/logging-cookbook.rst:911
msgid "which you can use like this::"
msgstr "som du kan använda så här::"

#: ../../howto/logging-cookbook.rst:916
msgid ""
"Then any events that you log to the adapter will have the value of "
"``some_conn_id`` prepended to the log messages."
msgstr ""
"Då kommer alla händelser som du loggar till adaptern att ha värdet "
"``some_conn_id`` prependlat till loggmeddelandena."

#: ../../howto/logging-cookbook.rst:920
msgid "Using objects other than dicts to pass contextual information"
msgstr "Använda andra objekt än dikter för att skicka kontextuell information"

#: ../../howto/logging-cookbook.rst:922
msgid ""
"You don't need to pass an actual dict to a :class:`LoggerAdapter` - you "
"could pass an instance of a class which implements ``__getitem__`` and "
"``__iter__`` so that it looks like a dict to logging. This would be useful "
"if you want to generate values dynamically (whereas the values in a dict "
"would be constant)."
msgstr ""
"Du behöver inte skicka en faktisk dict till en :class:`LoggerAdapter` - du "
"kan skicka en instans av en klass som implementerar ``__getitem__`` och "
"``__iter__`` så att den ser ut som en dict för loggning. Detta skulle vara "
"användbart om du vill generera värden dynamiskt (medan värdena i en dict "
"skulle vara konstanta)."

#: ../../howto/logging-cookbook.rst:931
msgid "Using Filters to impart contextual information"
msgstr "Använda filter för att ge kontextuell information"

#: ../../howto/logging-cookbook.rst:933
msgid ""
"You can also add contextual information to log output using a user-defined "
":class:`Filter`. ``Filter`` instances are allowed to modify the "
"``LogRecords`` passed to them, including adding additional attributes which "
"can then be output using a suitable format string, or if needed a custom "
":class:`Formatter`."
msgstr ""
"Du kan också lägga till kontextuell information i loggutdata med hjälp av en"
" användardefinierad :class:`Filter`. ``Filter``-instanser får ändra de "
"``LogRecords`` som skickas till dem, inklusive att lägga till ytterligare "
"attribut som sedan kan matas ut med en lämplig formatsträng, eller om det "
"behövs en anpassad :class:`Formatter`."

#: ../../howto/logging-cookbook.rst:938
msgid ""
"For example in a web application, the request being processed (or at least, "
"the interesting parts of it) can be stored in a threadlocal "
"(:class:`threading.local`) variable, and then accessed from a ``Filter`` to "
"add, say, information from the request - say, the remote IP address and "
"remote user's username - to the ``LogRecord``, using the attribute names "
"'ip' and 'user' as in the ``LoggerAdapter`` example above. In that case, the"
" same format string can be used to get similar output to that shown above. "
"Here's an example script::"
msgstr ""
"Till exempel i en webbapplikation kan den begäran som behandlas (eller "
"åtminstone de intressanta delarna av den) lagras i en threadlocal "
"(:class:`threading.local`) variabel, och sedan nås från ett ``Filter`` för "
"att lägga till, säg, information från begäran - säg, fjärr-IP-adressen och "
"fjärr-användarens användarnamn - till ``LogRecord``, med hjälp av "
"attributnamnen 'ip' och 'user' som i ``LoggerAdapter`` exemplet ovan. I så "
"fall kan samma formatsträng användas för att få liknande utdata som visas "
"ovan. Här är ett exempel på ett skript::"

#: ../../howto/logging-cookbook.rst:984
msgid "which, when run, produces something like:"
msgstr "som, när den körs, producerar något liknande:"

#: ../../howto/logging-cookbook.rst:1002
msgid "Use of ``contextvars``"
msgstr "Användning av ``contextvars``"

#: ../../howto/logging-cookbook.rst:1004
msgid ""
"Since Python 3.7, the :mod:`contextvars` module has provided context-local "
"storage which works for both :mod:`threading` and :mod:`asyncio` processing "
"needs. This type of storage may thus be generally preferable to thread-"
"locals. The following example shows how, in a multi-threaded environment, "
"logs can populated with contextual information such as, for example, request"
" attributes handled by web applications."
msgstr ""
"Sedan Python 3.7 har modulen :mod:`contextvars` tillhandahållit kontextlokal"
" lagring som fungerar för både :mod:`threading` och :mod:`asyncio` "
"bearbetningsbehov. Den här typen av lagring kan därför vara att föredra "
"framför trådlokal lagring. Följande exempel visar hur loggar i en flertrådad"
" miljö kan fyllas med kontextuell information som t.ex. attribut för "
"förfrågningar som hanteras av webbapplikationer."

#: ../../howto/logging-cookbook.rst:1010
msgid ""
"For the purposes of illustration, say that you have different web "
"applications, each independent of the other but running in the same Python "
"process and using a library common to them. How can each of these "
"applications have their own log, where all logging messages from the library"
" (and other request processing code) are directed to the appropriate "
"application's log file, while including in the log additional contextual "
"information such as client IP, HTTP request method and client username?"
msgstr ""
"Låt oss säga att du har olika webbapplikationer som är oberoende av varandra"
" men som körs i samma Python-process och använder ett bibliotek som är "
"gemensamt för dem. Hur kan var och en av dessa applikationer ha sin egen "
"logg, där alla loggmeddelanden från biblioteket (och annan kod för "
"behandling av förfrågningar) riktas till den lämpliga applikationens "
"loggfil, samtidigt som loggen innehåller ytterligare kontextuell information"
" som klientens IP, HTTP-förfrågningsmetod och klientens användarnamn?"

#: ../../howto/logging-cookbook.rst:1017
msgid "Let's assume that the library can be simulated by the following code:"
msgstr "Låt oss anta att biblioteket kan simuleras med hjälp av följande kod:"

#: ../../howto/logging-cookbook.rst:1033
msgid ""
"We can simulate the multiple web applications by means of two simple "
"classes, ``Request`` and ``WebApp``. These simulate how real threaded web "
"applications work - each request is handled by a thread:"
msgstr ""
"Vi kan simulera flera webbapplikationer med hjälp av två enkla klasser, "
"``Request`` och ``WebApp``. Dessa simulerar hur riktiga trådade "
"webbapplikationer fungerar - varje förfrågan hanteras av en tråd:"

#: ../../howto/logging-cookbook.rst:1177
msgid ""
"If you run the above, you should find that roughly half the requests go into"
" :file:`app1.log` and the rest into :file:`app2.log`, and the all the "
"requests are logged to :file:`app.log`. Each webapp-specific log will "
"contain only log entries for only that webapp, and the request information "
"will be displayed consistently in the log (i.e. the information in each "
"dummy request will always appear together in a log line). This is "
"illustrated by the following shell output:"
msgstr ""
"Om du kör ovanstående bör du upptäcka att ungefär hälften av förfrågningarna"
" hamnar i :file:`app1.log` och resten i :file:`app2.log`, och att alla "
"förfrågningar loggas i :file:`app.log`. Varje webbappsspecifik logg kommer "
"endast att innehålla loggposter för den webbappen och informationen om "
"förfrågningar kommer att visas konsekvent i loggen (dvs. informationen i "
"varje dummyförfrågan kommer alltid att visas tillsammans i en loggrad). "
"Detta illustreras av följande shell-utdata:"

#: ../../howto/logging-cookbook.rst:1224
msgid "Imparting contextual information in handlers"
msgstr "Förmedling av kontextuell information till handläggare"

#: ../../howto/logging-cookbook.rst:1226
msgid ""
"Each :class:`~Handler` has its own chain of filters. If you want to add "
"contextual information to a :class:`LogRecord` without leaking it to other "
"handlers, you can use a filter that returns a new :class:`~LogRecord` "
"instead of modifying it in-place, as shown in the following script::"
msgstr ""
"Varje :class:`~Handler` har sin egen kedja av filter. Om du vill lägga till "
"kontextuell information till en :class:`LogRecord` utan att läcka den till "
"andra handlers kan du använda ett filter som returnerar en ny "
":class:`~LogRecord` istället för att modifiera den på plats, som visas i "
"följande skript::"

#: ../../howto/logging-cookbook.rst:1253
msgid "Logging to a single file from multiple processes"
msgstr "Loggning till en enda fil från flera processer"

#: ../../howto/logging-cookbook.rst:1255
msgid ""
"Although logging is thread-safe, and logging to a single file from multiple "
"threads in a single process *is* supported, logging to a single file from "
"*multiple processes* is *not* supported, because there is no standard way to"
" serialize access to a single file across multiple processes in Python. If "
"you need to log to a single file from multiple processes, one way of doing "
"this is to have all the processes log to a :class:`~handlers.SocketHandler`,"
" and have a separate process which implements a socket server which reads "
"from the socket and logs to file. (If you prefer, you can dedicate one "
"thread in one of the existing processes to perform this function.) "
":ref:`This section <network-logging>` documents this approach in more detail"
" and includes a working socket receiver which can be used as a starting "
"point for you to adapt in your own applications."
msgstr ""
"Även om loggning är trådsäker och loggning till en enda fil från flera "
"trådar i en enda process *stödjs*, stöds *inte* loggning till en enda fil "
"från *flera processer*, eftersom det inte finns något standardiserat sätt "
"att serialisera åtkomst till en enda fil över flera processer i Python. Om "
"du behöver logga till en enda fil från flera processer, är ett sätt att göra"
" detta att låta alla processer logga till en "
":class:`~handlers.SocketHandler`, och ha en separat process som "
"implementerar en socket-server som läser från sockeln och loggar till filen."
" (Om du föredrar det kan du dedikera en tråd i en av de befintliga "
"processerna för att utföra denna funktion) :ref:`Detta avsnitt <network-"
"logging>` dokumenterar detta tillvägagångssätt mer i detalj och innehåller "
"en fungerande socketmottagare som kan användas som utgångspunkt för att "
"anpassa i dina egna applikationer."

#: ../../howto/logging-cookbook.rst:1268
msgid ""
"You could also write your own handler which uses the "
":class:`~multiprocessing.Lock` class from the :mod:`multiprocessing` module "
"to serialize access to the file from your processes. The existing "
":class:`FileHandler` and subclasses do not make use of "
":mod:`multiprocessing` at present, though they may do so in the future. Note"
" that at present, the :mod:`multiprocessing` module does not provide working"
" lock functionality on all platforms (see "
"https://bugs.python.org/issue3770)."
msgstr ""

#: ../../howto/logging-cookbook.rst:1278
msgid ""
"Alternatively, you can use a ``Queue`` and a :class:`QueueHandler` to send "
"all logging events to one of the processes in your multi-process "
"application. The following example script demonstrates how you can do this; "
"in the example a separate listener process listens for events sent by other "
"processes and logs them according to its own logging configuration. Although"
" the example only demonstrates one way of doing it (for example, you may "
"want to use a listener thread rather than a separate listener process -- the"
" implementation would be analogous) it does allow for completely different "
"logging configurations for the listener and the other processes in your "
"application, and can be used as the basis for code meeting your own specific"
" requirements::"
msgstr ""
"Alternativt kan du använda en ``Queue`` och en :class:`QueueHandler` för att"
" skicka alla loggningshändelser till en av processerna i din "
"multiprocessapplikation. Följande exempelskript visar hur du kan göra detta;"
" i exemplet lyssnar en separat lyssnarprocess på händelser som skickas av "
"andra processer och loggar dem enligt sin egen loggningskonfiguration. Även "
"om exemplet bara visar ett sätt att göra det på (du kanske till exempel vill"
" använda en lyssnartråd i stället för en separat lyssnarprocess - "
"implementeringen skulle vara analog) tillåter det helt olika "
"loggningskonfigurationer för lyssnaren och de andra processerna i din "
"applikation, och kan användas som grund för kod som uppfyller dina egna "
"specifika krav::"

#: ../../howto/logging-cookbook.rst:1394
msgid ""
"A variant of the above script keeps the logging in the main process, in a "
"separate thread::"
msgstr ""
"En variant av ovanstående skript håller loggningen i huvudprocessen, i en "
"separat tråd::"

#: ../../howto/logging-cookbook.rst:1489
msgid ""
"This variant shows how you can e.g. apply configuration for particular "
"loggers - e.g. the ``foo`` logger has a special handler which stores all "
"events in the ``foo`` subsystem in a file ``mplog-foo.log``. This will be "
"used by the logging machinery in the main process (even though the logging "
"events are generated in the worker processes) to direct the messages to the "
"appropriate destinations."
msgstr ""
"Den här varianten visar hur du t.ex. kan tillämpa konfiguration för "
"särskilda loggrar - t.ex. har loggern ``foo`` en speciell hanterare som "
"lagrar alla händelser i delsystemet ``foo`` i en fil ``mplog-foo.log``. "
"Detta kommer att användas av loggningssystemet i huvudprocessen (även om "
"loggningshändelserna genereras i arbetsprocesserna) för att styra "
"meddelandena till lämpliga destinationer."

#: ../../howto/logging-cookbook.rst:1496
msgid "Using concurrent.futures.ProcessPoolExecutor"
msgstr "Använda concurrent.futures.ProcessPoolExecutor"

#: ../../howto/logging-cookbook.rst:1498
msgid ""
"If you want to use :class:`concurrent.futures.ProcessPoolExecutor` to start "
"your worker processes, you need to create the queue slightly differently. "
"Instead of"
msgstr ""
"Om du vill använda :class:`concurrent.futures.ProcessPoolExecutor` för att "
"starta dina arbetsprocesser måste du skapa kön på ett lite annorlunda sätt. "
"Istället för"

#: ../../howto/logging-cookbook.rst:1506
msgid "you should use"
msgstr "du bör använda"

#: ../../howto/logging-cookbook.rst:1512
msgid "and you can then replace the worker creation from this::"
msgstr "och du kan sedan ersätta arbetstagarens skapelse från detta::"

#: ../../howto/logging-cookbook.rst:1523
msgid "to this (remembering to first import :mod:`concurrent.futures`)::"
msgstr "till detta (kom ihåg att först importera :mod:`concurrent.futures`)::"

#: ../../howto/logging-cookbook.rst:1530
msgid "Deploying Web applications using Gunicorn and uWSGI"
msgstr "Driftsättning av webbapplikationer med hjälp av Gunicorn och uWSGI"

#: ../../howto/logging-cookbook.rst:1532
msgid ""
"When deploying Web applications using `Gunicorn <https://gunicorn.org/>`_ or"
" `uWSGI <https://uwsgi-docs.readthedocs.io/en/latest/>`_ (or similar), "
"multiple worker processes are created to handle client requests. In such "
"environments, avoid creating file-based handlers directly in your web "
"application. Instead, use a :class:`SocketHandler` to log from the web "
"application to a listener in a separate process. This can be set up using a "
"process management tool such as Supervisor - see `Running a logging socket "
"listener in production`_ for more details."
msgstr ""
"När du distribuerar webbapplikationer med hjälp av `Gunicorn "
"<https://gunicorn.org/>`_ eller `uWSGI <https://uwsgi-"
"docs.readthedocs.io/en/latest/>`_ (eller liknande) skapas flera "
"arbetsprocesser för att hantera klientförfrågningar. I sådana miljöer bör du"
" undvika att skapa filbaserade hanterare direkt i din webbapplikation. "
"Använd istället en :class:`SocketHandler` för att logga från "
"webbapplikationen till en lyssnare i en separat process. Detta kan ställas "
"in med hjälp av ett processhanteringsverktyg som Supervisor - se `Köra en "
"loggningssocketlyssnare i produktion`_ för mer information."

#: ../../howto/logging-cookbook.rst:1542
msgid "Using file rotation"
msgstr "Använda filrotation"

#: ../../howto/logging-cookbook.rst:1547
msgid ""
"Sometimes you want to let a log file grow to a certain size, then open a new"
" file and log to that. You may want to keep a certain number of these files,"
" and when that many files have been created, rotate the files so that the "
"number of files and the size of the files both remain bounded. For this "
"usage pattern, the logging package provides a :class:`RotatingFileHandler`::"
msgstr ""
"Ibland vill man låta en loggfil växa till en viss storlek och sedan öppna en"
" ny fil och logga i den. Du kanske vill behålla ett visst antal av dessa "
"filer, och när så många filer har skapats, rotera filerna så att antalet "
"filer och storleken på filerna båda förblir begränsade. För detta "
"användningsmönster tillhandahåller loggningspaketet en "
":class:`RotatingFileHandler`::"

#: ../../howto/logging-cookbook.rst:1579
msgid ""
"The result should be 6 separate files, each with part of the log history for"
" the application:"
msgstr ""
"Resultatet bör bli 6 separata filer, var och en med en del av logghistoriken"
" för programmet:"

#: ../../howto/logging-cookbook.rst:1591
msgid ""
"The most current file is always :file:`logging_rotatingfile_example.out`, "
"and each time it reaches the size limit it is renamed with the suffix "
"``.1``. Each of the existing backup files is renamed to increment the suffix"
" (``.1`` becomes ``.2``, etc.)  and the ``.6`` file is erased."
msgstr ""
"Den mest aktuella filen är alltid :file:`logging_rotatingfile_example.out`, "
"och varje gång den når storleksgränsen döps den om med suffixet ``.1``. Var "
"och en av de befintliga säkerhetskopiorna byter namn så att suffixet ökar "
"(``.1`` blir ``.2`` osv.) och filen ``.6`` raderas."

#: ../../howto/logging-cookbook.rst:1596
msgid ""
"Obviously this example sets the log length much too small as an extreme "
"example.  You would want to set *maxBytes* to an appropriate value."
msgstr ""
"I det här exemplet är logglängden naturligtvis alldeles för liten, som ett "
"extremt exempel.  Du bör ställa in *maxBytes* till ett lämpligt värde."

#: ../../howto/logging-cookbook.rst:1604
msgid "Use of alternative formatting styles"
msgstr "Användning av alternativa formateringsstilar"

#: ../../howto/logging-cookbook.rst:1606
msgid ""
"When logging was added to the Python standard library, the only way of "
"formatting messages with variable content was to use the %-formatting "
"method. Since then, Python has gained two new formatting approaches: "
":class:`string.Template` (added in Python 2.4) and :meth:`str.format` (added"
" in Python 2.6)."
msgstr ""
"När loggning lades till i Pythons standardbibliotek var det enda sättet att "
"formatera meddelanden med variabelt innehåll att använda metoden "
"%-formatting. Sedan dess har Python fått två nya formateringsmetoder: "
":class:`string.Template` (tillagd i Python 2.4) och :meth:`str.format` "
"(tillagd i Python 2.6)."

#: ../../howto/logging-cookbook.rst:1612
msgid ""
"Logging (as of 3.2) provides improved support for these two additional "
"formatting styles. The :class:`Formatter` class been enhanced to take an "
"additional, optional keyword parameter named ``style``. This defaults to "
"``'%'``, but other possible values are ``'{'`` and ``'$'``, which correspond"
" to the other two formatting styles. Backwards compatibility is maintained "
"by default (as you would expect), but by explicitly specifying a style "
"parameter, you get the ability to specify format strings which work with "
":meth:`str.format` or :class:`string.Template`. Here's an example console "
"session to show the possibilities:"
msgstr ""
"Loggning (från och med 3.2) ger förbättrat stöd för dessa två ytterligare "
"formateringsstilar. Klassen :class:`Formatter` har förbättrats så att den "
"kan ta emot en ytterligare, valfri nyckelordsparameter med namnet ``style``."
" Standardvärdet är ``'%'``, men andra möjliga värden är ``'{'`` och ``'$'``,"
" vilket motsvarar de två andra formateringsstilarna. Bakåtkompatibilitet "
"upprätthålls som standard (som du kan förvänta dig), men genom att "
"uttryckligen ange en stilparameter får du möjlighet att ange formatsträngar "
"som fungerar med :meth:`str.format` eller :class:`string.Template`. Här är "
"ett exempel på en konsolsession för att visa möjligheterna:"

#: ../../howto/logging-cookbook.rst:1646
msgid ""
"Note that the formatting of logging messages for final output to logs is "
"completely independent of how an individual logging message is constructed. "
"That can still use %-formatting, as shown here::"
msgstr ""
"Observera att formateringen av loggade meddelanden för slutlig utmatning "
"till loggar är helt oberoende av hur ett enskilt loggat meddelande är "
"konstruerat. Det kan fortfarande använda %-fellermatting, som visas här::"

#: ../../howto/logging-cookbook.rst:1654
msgid ""
"Logging calls (``logger.debug()``, ``logger.info()`` etc.) only take "
"positional parameters for the actual logging message itself, with keyword "
"parameters used only for determining options for how to handle the actual "
"logging call (e.g. the ``exc_info`` keyword parameter to indicate that "
"traceback information should be logged, or the ``extra`` keyword parameter "
"to indicate additional contextual information to be added to the log). So "
"you cannot directly make logging calls using :meth:`str.format` or "
":class:`string.Template` syntax, because internally the logging package uses"
" %-formatting to merge the format string and the variable arguments. There "
"would be no changing this while preserving backward compatibility, since all"
" logging calls which are out there in existing code will be using %-format "
"strings."
msgstr ""
"Loggningsanrop (``logger.debug()``, ``logger.info()`` etc.) tar endast "
"positionsparametrar för själva loggningsmeddelandet, med "
"nyckelordsparametrar som endast används för att bestämma alternativ för hur "
"det faktiska loggningsanropet ska hanteras (t.ex. nyckelordsparametern "
"``exc_info`` för att ange att spårningsinformation ska loggas, eller "
"nyckelordsparametern ``extra`` för att ange ytterligare kontextuell "
"information som ska läggas till i loggen). Så du kan inte direkt göra "
"loggningsanrop med :meth:`str.format` eller :class:`string.Template` syntax,"
" eftersom loggningspaketet internt använder %-formatting för att slå samman "
"formatsträngen och variabelargumenten. Det skulle inte gå att ändra detta "
"och samtidigt bevara bakåtkompatibilitet, eftersom alla loggningsanrop som "
"finns i befintlig kod kommer att använda %-format-strängar."

#: ../../howto/logging-cookbook.rst:1667
msgid ""
"There is, however, a way that you can use {}- and $- formatting to construct"
" your individual log messages. Recall that for a message you can use an "
"arbitrary object as a message format string, and that the logging package "
"will call ``str()`` on that object to get the actual format string. Consider"
" the following two classes::"
msgstr ""
"Det finns dock ett sätt att använda {}- och $-formatering för att konstruera"
" dina individuella loggmeddelanden. Kom ihåg att du för ett meddelande kan "
"använda ett godtyckligt objekt som en formatsträng för meddelandet och att "
"loggningspaketet anropar ``str()`` på det objektet för att få den faktiska "
"formatsträngen. Betrakta följande två klasser::"

#: ../../howto/logging-cookbook.rst:1691
msgid ""
"Either of these can be used in place of a format string, to allow {}- or "
"$-formatting to be used to build the actual \"message\" part which appears "
"in the formatted log output in place of \"%(message)s\" or \"{message}\" or "
"\"$message\". It's a little unwieldy to use the class names whenever you "
"want to log something, but it's quite palatable if you use an alias such as "
"__ (double underscore --- not to be confused with _, the single underscore "
"used as a synonym/alias for :func:`gettext.gettext` or its brethren)."
msgstr ""
"Båda dessa kan användas i stället för en formatsträng, så att {}- eller "
"$-formatering kan användas för att skapa den faktiska \"meddelande\"-delen "
"som visas i den formaterade loggutmatningen i stället för \"%(message)s\" "
"eller \"{message}\" eller \"$message\". Det är lite otympligt att använda "
"klassnamnen varje gång man vill logga något, men det är ganska smidigt om "
"man använder ett alias som __ (dubbelt understreck --- inte att förväxla med"
" _, det enkla understreck som används som synonym/alias för "
":func:`gettext.gettext` eller dess bröder)."

#: ../../howto/logging-cookbook.rst:1699
msgid ""
"The above classes are not included in Python, though they're easy enough to "
"copy and paste into your own code. They can be used as follows (assuming "
"that they're declared in a module called ``wherever``):"
msgstr ""
"Ovanstående klasser ingår inte i Python, men de är lätta att kopiera och "
"klistra in i din egen kod. De kan användas på följande sätt (förutsatt att "
"de deklareras i en modul som heter ``wherever``):"

#: ../../howto/logging-cookbook.rst:1721
msgid ""
"While the above examples use ``print()`` to show how the formatting works, "
"you would of course use ``logger.debug()`` or similar to actually log using "
"this approach."
msgstr ""
"I exemplen ovan används ``print()`` för att visa hur formateringen fungerar,"
" men du skulle naturligtvis använda ``logger.debug()`` eller liknande för "
"att faktiskt logga på det här sättet."

#: ../../howto/logging-cookbook.rst:1725
msgid ""
"One thing to note is that you pay no significant performance penalty with "
"this approach: the actual formatting happens not when you make the logging "
"call, but when (and if) the logged message is actually about to be output to"
" a log by a handler. So the only slightly unusual thing which might trip you"
" up is that the parentheses go around the format string and the arguments, "
"not just the format string. That's because the __ notation is just syntax "
"sugar for a constructor call to one of the :samp:`{XXX}Message` classes."
msgstr ""
"En sak att notera är att du inte betalar någon betydande prestandaförlust "
"med det här tillvägagångssättet: den faktiska formateringen sker inte när du"
" gör loggningsanropet, utan när (och om) det loggade meddelandet faktiskt är"
" på väg att matas ut till en logg av en hanterare. Så det enda lite ovanliga"
" som kan göra dig förvirrad är att parenteserna går runt formatsträngen och "
"argumenten, inte bara formatsträngen. Det beror på att __-notationen bara är"
" syntaxsocker för ett konstruktoranrop till en av klasserna "
":samp:`{XXX}Message`."

#: ../../howto/logging-cookbook.rst:1733
msgid ""
"If you prefer, you can use a :class:`LoggerAdapter` to achieve a similar "
"effect to the above, as in the following example::"
msgstr ""
"Om du föredrar det kan du använda en :class:`LoggerAdapter` för att uppnå en"
" liknande effekt som ovan, som i följande exempel::"

#: ../../howto/logging-cookbook.rst:1762
msgid ""
"The above script should log the message ``Hello, world!`` when run with "
"Python 3.8 or later."
msgstr ""
"Ovanstående skript bör logga meddelandet ``Hello, world!`` när det körs med "
"Python 3.8 eller senare."

#: ../../howto/logging-cookbook.rst:1771
msgid "Customizing ``LogRecord``"
msgstr "Anpassning av ``LogRecord``"

#: ../../howto/logging-cookbook.rst:1773
msgid ""
"Every logging event is represented by a :class:`LogRecord` instance. When an"
" event is logged and not filtered out by a logger's level, a "
":class:`LogRecord` is created, populated with information about the event "
"and then passed to the handlers for that logger (and its ancestors, up to "
"and including the logger where further propagation up the hierarchy is "
"disabled). Before Python 3.2, there were only two places where this creation"
" was done:"
msgstr ""
"Varje loggningshändelse representeras av en :class:`LogRecord`-instans. När "
"en händelse loggas och inte filtreras bort av en loggers nivå, skapas en "
":class:`LogRecord`, fylls på med information om händelsen och skickas sedan "
"till hanterarna för den loggern (och dess förfäder, upp till och inklusive "
"den logger där ytterligare spridning uppåt i hierarkin är inaktiverad). Före"
" Python 3.2 fanns det bara två ställen där detta skapande gjordes:"

#: ../../howto/logging-cookbook.rst:1780
msgid ""
":meth:`Logger.makeRecord`, which is called in the normal process of logging "
"an event. This invoked :class:`LogRecord` directly to create an instance."
msgstr ""
":meth:`Logger.makeRecord`, som anropas i den normala processen för loggning "
"av en händelse. Detta anropade :class:`LogRecord` direkt för att skapa en "
"instans."

#: ../../howto/logging-cookbook.rst:1783
msgid ""
":func:`makeLogRecord`, which is called with a dictionary containing "
"attributes to be added to the LogRecord. This is typically invoked when a "
"suitable dictionary has been received over the network (e.g. in pickle form "
"via a :class:`~handlers.SocketHandler`, or in JSON form via an "
":class:`~handlers.HTTPHandler`)."
msgstr ""
":func:`makeLogRecord`, som anropas med en ordbok som innehåller attribut som"
" ska läggas till i LogRecord. Detta anropas vanligtvis när en lämplig "
"ordlista har tagits emot över nätverket (t.ex. i pickle-form via en "
":class:`~handlers.SocketHandler`, eller i JSON-form via en "
":class:`~handlers.HTTPHandler`)."

#: ../../howto/logging-cookbook.rst:1789
msgid ""
"This has usually meant that if you need to do anything special with a "
":class:`LogRecord`, you've had to do one of the following."
msgstr ""
"Detta har vanligtvis inneburit att om du behöver göra något speciellt med en"
" :class:`LogRecord`, har du varit tvungen att göra något av följande."

#: ../../howto/logging-cookbook.rst:1792
msgid ""
"Create your own :class:`Logger` subclass, which overrides "
":meth:`Logger.makeRecord`, and set it using :func:`~logging.setLoggerClass` "
"before any loggers that you care about are instantiated."
msgstr ""
"Skapa din egen :class:`Logger`-underklass, som åsidosätter "
":meth:`Logger.makeRecord`, och ange den med :func:`~logging.setLoggerClass` "
"innan alla loggar som du bryr dig om instansieras."

#: ../../howto/logging-cookbook.rst:1795
msgid ""
"Add a :class:`Filter` to a logger or handler, which does the necessary "
"special manipulation you need when its :meth:`~Filter.filter` method is "
"called."
msgstr ""
"Lägg till en :class:`Filter` till en logger eller hanterare, som gör den "
"nödvändiga speciella manipuleringen du behöver när dess "
":meth:`~Filter.filter`-metod anropas."

#: ../../howto/logging-cookbook.rst:1799
msgid ""
"The first approach would be a little unwieldy in the scenario where (say) "
"several different libraries wanted to do different things. Each would "
"attempt to set its own :class:`Logger` subclass, and the one which did this "
"last would win."
msgstr ""
"Det första tillvägagångssättet skulle vara lite otympligt i ett scenario där"
" (säg) flera olika bibliotek ville göra olika saker. Alla skulle försöka "
"skapa sin egen :class:`Logger`-underklass, och den som gjorde det sist "
"skulle vinna."

#: ../../howto/logging-cookbook.rst:1804
msgid ""
"The second approach works reasonably well for many cases, but does not allow"
" you to e.g. use a specialized subclass of :class:`LogRecord`. Library "
"developers can set a suitable filter on their loggers, but they would have "
"to remember to do this every time they introduced a new logger (which they "
"would do simply by adding new packages or modules and doing ::"
msgstr ""
"Det andra tillvägagångssättet fungerar ganska bra i många fall, men gör det "
"inte möjligt att t.ex. använda en specialiserad underklass av "
":class:`LogRecord`. Biblioteksutvecklare kan ställa in ett lämpligt filter "
"på sina loggrar, men de skulle behöva komma ihåg att göra detta varje gång "
"de introducerade en ny logger (vilket de skulle göra helt enkelt genom att "
"lägga till nya paket eller moduler och göra ::"

#: ../../howto/logging-cookbook.rst:1812
msgid ""
"at module level). It's probably one too many things to think about. "
"Developers could also add the filter to a :class:`~logging.NullHandler` "
"attached to their top-level logger, but this would not be invoked if an "
"application developer attached a handler to a lower-level library logger ---"
" so output from that handler would not reflect the intentions of the library"
" developer."
msgstr ""
"på modulnivå). Det är förmodligen en sak för mycket att tänka på. Utvecklare"
" skulle också kunna lägga till filtret i en :class:`~logging.NullHandler` "
"som är kopplad till deras logger på högsta nivån, men detta skulle inte "
"aktiveras om en applikationsutvecklare kopplade en hanterare till en logger "
"på lägre biblioteksnivå --- så utdata från den hanteraren skulle inte "
"återspegla biblioteksutvecklarens avsikter."

#: ../../howto/logging-cookbook.rst:1818
msgid ""
"In Python 3.2 and later, :class:`~logging.LogRecord` creation is done "
"through a factory, which you can specify. The factory is just a callable you"
" can set with :func:`~logging.setLogRecordFactory`, and interrogate with "
":func:`~logging.getLogRecordFactory`. The factory is invoked with the same "
"signature as the :class:`~logging.LogRecord` constructor, as "
":class:`LogRecord` is the default setting for the factory."
msgstr ""
"I Python 3.2 och senare skapas :class:`~logging.LogRecord` genom en fabrik, "
"som du kan ange. Fabriken är bara en anropsbar som du kan ställa in med "
":func:`~logging.setLogRecordFactory` och fråga med "
":func:`~logging.getLogRecordFactory`. Fabriken anropas med samma signatur "
"som konstruktören :class:`~logging.LogRecord`, eftersom :class:`LogRecord` "
"är standardinställningen för fabriken."

#: ../../howto/logging-cookbook.rst:1825
msgid ""
"This approach allows a custom factory to control all aspects of LogRecord "
"creation. For example, you could return a subclass, or just add some "
"additional attributes to the record once created, using a pattern similar to"
" this::"
msgstr ""
"Detta tillvägagångssätt gör det möjligt för en anpassad fabrik att "
"kontrollera alla aspekter av LogRecord-skapandet. Du kan till exempel "
"returnera en underklass, eller bara lägga till några ytterligare attribut "
"till posten när den har skapats, med ett mönster som liknar detta::"

#: ../../howto/logging-cookbook.rst:1838
msgid ""
"This pattern allows different libraries to chain factories together, and as "
"long as they don't overwrite each other's attributes or unintentionally "
"overwrite the attributes provided as standard, there should be no surprises."
" However, it should be borne in mind that each link in the chain adds run-"
"time overhead to all logging operations, and the technique should only be "
"used when the use of a :class:`Filter` does not provide the desired result."
msgstr ""
"Detta mönster gör det möjligt för olika bibliotek att kedja ihop fabriker, "
"och så länge de inte skriver över varandras attribut eller oavsiktligt "
"skriver över de attribut som tillhandahålls som standard, bör det inte bli "
"några överraskningar. Man bör dock komma ihåg att varje länk i kedjan lägger"
" till run-time overhead till alla loggningsoperationer, och tekniken bör "
"endast användas när användningen av en :class:`Filter` inte ger det önskade "
"resultatet."

#: ../../howto/logging-cookbook.rst:1850
msgid "Subclassing QueueHandler and QueueListener- a ZeroMQ example"
msgstr "Subklassning av QueueHandler och QueueListener - ett ZeroMQ-exempel"

#: ../../howto/logging-cookbook.rst:1853 ../../howto/logging-cookbook.rst:1985
msgid "Subclass ``QueueHandler``"
msgstr "Underklass ``QueueHandler``"

#: ../../howto/logging-cookbook.rst:1855
msgid ""
"You can use a :class:`QueueHandler` subclass to send messages to other kinds"
" of queues, for example a ZeroMQ 'publish' socket. In the example below,the "
"socket is created separately and passed to the handler (as its 'queue')::"
msgstr ""
"Du kan använda en :class:`QueueHandler` subklass för att skicka meddelanden "
"till andra typer av köer, till exempel en ZeroMQ 'publish' socket. I "
"exemplet nedan skapas sockeln separat och skickas till hanteraren (som dess "
"'queue')::"

#: ../../howto/logging-cookbook.rst:1874
msgid ""
"Of course there are other ways of organizing this, for example passing in "
"the data needed by the handler to create the socket::"
msgstr ""
"Det finns naturligtvis andra sätt att organisera detta, till exempel att "
"skicka in de data som behövs av hanteraren för att skapa socket::"

#: ../../howto/logging-cookbook.rst:1892 ../../howto/logging-cookbook.rst:1922
msgid "Subclass ``QueueListener``"
msgstr "Underklass ``QueueListener``"

#: ../../howto/logging-cookbook.rst:1894
msgid ""
"You can also subclass :class:`QueueListener` to get messages from other "
"kinds of queues, for example a ZeroMQ 'subscribe' socket. Here's an "
"example::"
msgstr ""
"Du kan också subklassa :class:`QueueListener` för att få meddelanden från "
"andra typer av köer, till exempel en ZeroMQ 'subscribe' socket. Här är ett "
"exempel::"

#: ../../howto/logging-cookbook.rst:1912
msgid "Subclassing QueueHandler and QueueListener- a ``pynng`` example"
msgstr ""
"Subklassning av QueueHandler och QueueListener - ett exempel från ``pynng"

#: ../../howto/logging-cookbook.rst:1914
msgid ""
"In a similar way to the above section, we can implement a listener and "
"handler using `pynng <https://pypi.org/project/pynng/>`_, which is a Python "
"binding to `NNG <https://nng.nanomsg.org/>`_, billed as a spiritual "
"successor to ZeroMQ. The following snippets illustrate -- you can test them "
"in an environment which has ``pynng`` installed. Juat for variety, we "
"present the listener first."
msgstr ""

#: ../../howto/logging-cookbook.rst:2034
msgid "You can run the above two snippets in separate command shells."
msgstr ""

#: ../../howto/logging-cookbook.rst:2038
msgid "An example dictionary-based configuration"
msgstr "Ett exempel på ordboksbaserad konfiguration"

#: ../../howto/logging-cookbook.rst:2040
msgid ""
"Below is an example of a logging configuration dictionary - it's taken from "
"the `documentation on the Django project "
"<https://docs.djangoproject.com/en/stable/topics/logging/#configuring-"
"logging>`_. This dictionary is passed to :func:`~config.dictConfig` to put "
"the configuration into effect::"
msgstr ""
"Nedan följer ett exempel på en konfigurationsordbok för loggning - den är "
"hämtad från `dokumentationen om Django-projektet "
"<https://docs.djangoproject.com/en/stable/topics/logging/#configuring-"
"logging>`_. Denna ordbok skickas till :func:`~config.dictConfig` för att "
"konfigurationen ska träda i kraft::"

#: ../../howto/logging-cookbook.rst:2093
msgid ""
"For more information about this configuration, you can see the `relevant "
"section "
"<https://docs.djangoproject.com/en/stable/topics/logging/#configuring-"
"logging>`_ of the Django documentation."
msgstr ""
"För mer information om den här konfigurationen kan du se det relevanta "
"avsnittet "
"<https://docs.djangoproject.com/en/stable/topics/logging/#configuring-"
"logging>`_ i Django-dokumentationen."

#: ../../howto/logging-cookbook.rst:2100
msgid "Using a rotator and namer to customize log rotation processing"
msgstr ""
"Använda en rotator och en namer för att anpassa bearbetningen av "
"loggrotation"

#: ../../howto/logging-cookbook.rst:2102
msgid ""
"An example of how you can define a namer and rotator is given in the "
"following runnable script, which shows gzip compression of the log file::"
msgstr ""
"Ett exempel på hur du kan definiera en namer och rotator ges i följande "
"runnable-skript, som visar gzip-komprimering av loggfilen::"

#: ../../howto/logging-cookbook.rst:2133
msgid ""
"After running this, you will see six new files, five of which are "
"compressed:"
msgstr ""
"När du har kört detta kommer du att se sex nya filer, varav fem är "
"komprimerade:"

#: ../../howto/logging-cookbook.rst:2146
msgid "A more elaborate multiprocessing example"
msgstr "Ett mer avancerat exempel på multiprocessing"

#: ../../howto/logging-cookbook.rst:2148
msgid ""
"The following working example shows how logging can be used with "
"multiprocessing using configuration files. The configurations are fairly "
"simple, but serve to illustrate how more complex ones could be implemented "
"in a real multiprocessing scenario."
msgstr ""
"Följande arbetsexempel visar hur loggning kan användas med multiprocessing "
"med hjälp av konfigurationsfiler. Konfigurationerna är ganska enkla, men "
"tjänar till att illustrera hur mer komplexa konfigurationer kan "
"implementeras i ett verkligt multiprocessing-scenario."

#: ../../howto/logging-cookbook.rst:2153
msgid ""
"In the example, the main process spawns a listener process and some worker "
"processes. Each of the main process, the listener and the workers have three"
" separate configurations (the workers all share the same configuration). We "
"can see logging in the main process, how the workers log to a QueueHandler "
"and how the listener implements a QueueListener and a more complex logging "
"configuration, and arranges to dispatch events received via the queue to the"
" handlers specified in the configuration. Note that these configurations are"
" purely illustrative, but you should be able to adapt this example to your "
"own scenario."
msgstr ""
"I exemplet skapar huvudprocessen en lyssnarprocess och några "
"arbetsprocesser. Var och en av huvudprocessen, lyssnaren och arbetarna har "
"tre separata konfigurationer (arbetarna delar alla samma konfiguration). Vi "
"kan se loggning i huvudprocessen, hur arbetarna loggar till en QueueHandler "
"och hur lyssnaren implementerar en QueueListener och en mer komplex "
"loggningskonfiguration, och ordnar så att händelser som tas emot via kön "
"skickas till de hanterare som anges i konfigurationen. Observera att dessa "
"konfigurationer är rent illustrativa, men du bör kunna anpassa detta exempel"
" till ditt eget scenario."

#: ../../howto/logging-cookbook.rst:2163
msgid ""
"Here's the script - the docstrings and the comments hopefully explain how it"
" works::"
msgstr ""
"Här är skriptet - dokumentationen och kommentarerna förklarar "
"förhoppningsvis hur det fungerar::"

#: ../../howto/logging-cookbook.rst:2375
msgid "Inserting a BOM into messages sent to a SysLogHandler"
msgstr "Infoga en BOM i meddelanden som skickas till en SysLogHandler"

#: ../../howto/logging-cookbook.rst:2377
msgid ""
":rfc:`5424` requires that a Unicode message be sent to a syslog daemon as a "
"set of bytes which have the following structure: an optional pure-ASCII "
"component, followed by a UTF-8 Byte Order Mark (BOM), followed by Unicode "
"encoded using UTF-8. (See the :rfc:`relevant section of the specification "
"<5424#section-6>`.)"
msgstr ""
":rfc:`5424` kräver att ett Unicode-meddelande skickas till en syslog-daemon "
"som en uppsättning byte som har följande struktur: en valfri ren ASCII-"
"komponent, följt av en UTF-8 Byte Order Mark (BOM), följt av Unicode kodad "
"med UTF-8. (Se :rfc:`relevant avsnitt i specifikationen <5424#section-6>`.)"

#: ../../howto/logging-cookbook.rst:2383
msgid ""
"In Python 3.1, code was added to :class:`~logging.handlers.SysLogHandler` to"
" insert a BOM into the message, but unfortunately, it was implemented "
"incorrectly, with the BOM appearing at the beginning of the message and "
"hence not allowing any pure-ASCII component to appear before it."
msgstr ""
"I Python 3.1 lades kod till i :class:`~logging.handlers.SysLogHandler` för "
"att infoga en BOM i meddelandet, men tyvärr implementerades den felaktigt, "
"så att BOM:en kom i början av meddelandet och därmed inte tillät någon ren "
"ASCII-komponent att komma före den."

#: ../../howto/logging-cookbook.rst:2389
msgid ""
"As this behaviour is broken, the incorrect BOM insertion code is being "
"removed from Python 3.2.4 and later. However, it is not being replaced, and "
"if you want to produce :rfc:`5424`-compliant messages which include a BOM, "
"an optional pure-ASCII sequence before it and arbitrary Unicode after it, "
"encoded using UTF-8, then you need to do the following:"
msgstr ""
"Eftersom detta beteende är trasigt, kommer den felaktiga BOM-"
"insättningskoden att tas bort från Python 3.2.4 och senare. Den ersätts dock"
" inte, och om du vill producera :rfc:`5424`-kompatibla meddelanden som "
"innehåller en BOM, en valfri ren ASCII-sekvens före den och godtycklig "
"Unicode efter den, kodad med UTF-8, måste du göra följande:"

#: ../../howto/logging-cookbook.rst:2395
msgid ""
"Attach a :class:`~logging.Formatter` instance to your "
":class:`~logging.handlers.SysLogHandler` instance, with a format string such"
" as::"
msgstr ""
"Bifoga en :class:`~logging.Formatter`-instans till din "
":class:`~logging.handlers.SysLogHandler`-instans, med en formatsträng som::"

#: ../../howto/logging-cookbook.rst:2401
msgid ""
"The Unicode code point U+FEFF, when encoded using UTF-8, will be encoded as "
"a UTF-8 BOM -- the byte-string ``b'\\xef\\xbb\\xbf'``."
msgstr ""
"Unicode-kodpunkten U+FEFF, när den kodas med UTF-8, kommer att kodas som en "
"UTF-8 BOM -- byte-strängen ``b'\\xef\\xbb\\xbf'``."

#: ../../howto/logging-cookbook.rst:2404
msgid ""
"Replace the ASCII section with whatever placeholders you like, but make sure"
" that the data that appears in there after substitution is always ASCII "
"(that way, it will remain unchanged after UTF-8 encoding)."
msgstr ""
"Ersätt ASCII-avsnittet med de platshållare du vill, men se till att de data "
"som visas där efter substitutionen alltid är ASCII (på så sätt förblir de "
"oförändrade efter UTF-8-kodning)."

#: ../../howto/logging-cookbook.rst:2408
msgid ""
"Replace the Unicode section with whatever placeholders you like; if the data"
" which appears there after substitution contains characters outside the "
"ASCII range, that's fine -- it will be encoded using UTF-8."
msgstr ""
"Ersätt Unicode-avsnittet med de platshållare du vill; om de data som visas "
"där efter substitutionen innehåller tecken utanför ASCII-området är det okej"
" - de kommer att kodas med UTF-8."

#: ../../howto/logging-cookbook.rst:2412
msgid ""
"The formatted message *will* be encoded using UTF-8 encoding by "
"``SysLogHandler``. If you follow the above rules, you should be able to "
"produce :rfc:`5424`-compliant messages. If you don't, logging may not "
"complain, but your messages will not be RFC 5424-compliant, and your syslog "
"daemon may complain."
msgstr ""
"Det formaterade meddelandet *kommer* att kodas med UTF-8-kodning av "
"``SysLogHandler``. Om du följer ovanstående regler bör du kunna producera "
"meddelanden som överensstämmer med :rfc:`5424`. Om du inte gör det, kanske "
"loggningen inte klagar, men dina meddelanden kommer inte att vara RFC "
"5424-kompatibla och din syslog-daemon kan klaga."

#: ../../howto/logging-cookbook.rst:2419
msgid "Implementing structured logging"
msgstr "Implementering av strukturerad loggning"

#: ../../howto/logging-cookbook.rst:2421
msgid ""
"Although most logging messages are intended for reading by humans, and thus "
"not readily machine-parseable, there might be circumstances where you want "
"to output messages in a structured format which *is* capable of being parsed"
" by a program (without needing complex regular expressions to parse the log "
"message). This is straightforward to achieve using the logging package. "
"There are a number of ways in which this could be achieved, but the "
"following is a simple approach which uses JSON to serialise the event in a "
"machine-parseable manner::"
msgstr ""
"Även om de flesta loggmeddelanden är avsedda att läsas av människor och "
"därmed inte är maskinellt analyserbara, kan det finnas omständigheter där du"
" vill mata ut meddelanden i ett strukturerat format som *kan* analyseras av "
"ett program (utan att behöva komplexa reguljära uttryck för att analysera "
"loggmeddelandet). Detta är enkelt att åstadkomma med hjälp av paketet "
"logging. Det finns ett antal sätt att göra detta på, men följande är ett "
"enkelt tillvägagångssätt som använder JSON för att serialisera händelsen på "
"ett maskinparserbart sätt::"

#: ../../howto/logging-cookbook.rst:2445
msgid "If the above script is run, it prints:"
msgstr "Om ovanstående skript körs skrivs det ut:"

#: ../../howto/logging-cookbook.rst:2451 ../../howto/logging-cookbook.rst:2493
msgid ""
"Note that the order of items might be different according to the version of "
"Python used."
msgstr ""
"Observera att ordningen på objekten kan variera beroende på vilken version "
"av Python som används."

#: ../../howto/logging-cookbook.rst:2454
msgid ""
"If you need more specialised processing, you can use a custom JSON encoder, "
"as in the following complete example::"
msgstr ""
"Om du behöver mer specialiserad bearbetning kan du använda en anpassad JSON-"
"kodare, som i följande kompletta exempel::"

#: ../../howto/logging-cookbook.rst:2487
msgid "When the above script is run, it prints:"
msgstr "När ovanstående skript körs skrivs det ut:"

#: ../../howto/logging-cookbook.rst:2502
msgid "Customizing handlers with :func:`dictConfig`"
msgstr "Anpassa handläggare med :func:`dictConfig`"

#: ../../howto/logging-cookbook.rst:2504
msgid ""
"There are times when you want to customize logging handlers in particular "
"ways, and if you use :func:`dictConfig` you may be able to do this without "
"subclassing. As an example, consider that you may want to set the ownership "
"of a log file. On POSIX, this is easily done using :func:`shutil.chown`, but"
" the file handlers in the stdlib don't offer built-in support. You can "
"customize handler creation using a plain function such as::"
msgstr ""
"Det finns tillfällen då du vill anpassa logghanterare på särskilda sätt, och"
" om du använder :func:`dictConfig` kan du kanske göra detta utan att "
"underklassa. Som ett exempel kan du tänka dig att du kanske vill ange "
"ägandeskapet för en loggfil. På POSIX görs detta enkelt med hjälp av "
":func:`shutil.chown`, men filhanterarna i stdlib har inget inbyggt stöd. Du "
"kan anpassa skapandet av hanterare med hjälp av en vanlig funktion som::"

#: ../../howto/logging-cookbook.rst:2518
msgid ""
"You can then specify, in a logging configuration passed to "
":func:`dictConfig`, that a logging handler be created by calling this "
"function::"
msgstr ""
"Du kan sedan ange, i en loggningskonfiguration som skickas till "
":func:`dictConfig`, att en loggningshanterare ska skapas genom att anropa "
"denna funktion::"

#: ../../howto/logging-cookbook.rst:2551
msgid ""
"In this example I am setting the ownership using the ``pulse`` user and "
"group, just for the purposes of illustration. Putting it together into a "
"working script, ``chowntest.py``::"
msgstr ""
"I det här exemplet ställer jag in ägandeskapet med hjälp av användaren och "
"gruppen ``pulse``, bara för illustrationens skull. Sätter ihop det till ett "
"fungerande skript, ``chowntest.py``::"

#: ../../howto/logging-cookbook.rst:2598
msgid "To run this, you will probably need to run as ``root``:"
msgstr "För att köra detta måste du förmodligen köra som ``root``:"

#: ../../howto/logging-cookbook.rst:2608
msgid ""
"Note that this example uses Python 3.3 because that's where "
":func:`shutil.chown` makes an appearance. This approach should work with any"
" Python version that supports :func:`dictConfig` - namely, Python 2.7, 3.2 "
"or later. With pre-3.3 versions, you would need to implement the actual "
"ownership change using e.g. :func:`os.chown`."
msgstr ""
"Observera att det här exemplet använder Python 3.3 eftersom det är där "
":func:`shutil.chown` dyker upp. Detta tillvägagångssätt bör fungera med alla"
" Python-versioner som stöder :func:`dictConfig` - nämligen Python 2.7, 3.2 "
"eller senare. Med versioner före 3.3 skulle du behöva implementera den "
"faktiska ägarförändringen med hjälp av t.ex. :func:`os.chown`."

#: ../../howto/logging-cookbook.rst:2614
msgid ""
"In practice, the handler-creating function may be in a utility module "
"somewhere in your project. Instead of the line in the configuration::"
msgstr ""
"I praktiken kan den funktion som skapar hanteraren finnas i en verktygsmodul"
" någonstans i projektet. Istället för raden i konfigurationen::"

#: ../../howto/logging-cookbook.rst:2619
msgid "you could use e.g.::"
msgstr "kan du använda t.ex.::"

#: ../../howto/logging-cookbook.rst:2623
msgid ""
"where ``project.util`` can be replaced with the actual name of the package "
"where the function resides. In the above working script, using "
"``'ext://__main__.owned_file_handler'`` should work. Here, the actual "
"callable is resolved by :func:`dictConfig` from the ``ext://`` "
"specification."
msgstr ""
"där ``project.util`` kan ersättas med det faktiska namnet på det paket där "
"funktionen finns. I ovanstående fungerande skript bör det fungera att "
"använda ``'ext://__main__.owned_file_handler'``. Här löses den faktiska "
"anropbara funktionen av :func:`dictConfig` från ``ext://``-specifikationen."

#: ../../howto/logging-cookbook.rst:2628
msgid ""
"This example hopefully also points the way to how you could implement other "
"types of file change - e.g. setting specific POSIX permission bits - in the "
"same way, using :func:`os.chmod`."
msgstr ""
"Detta exempel visar förhoppningsvis också vägen till hur du kan implementera"
" andra typer av filändringar - t.ex. inställning av specifika POSIX-"
"behörighetsbitar - på samma sätt, med hjälp av :func:`os.chmod`."

#: ../../howto/logging-cookbook.rst:2632
msgid ""
"Of course, the approach could also be extended to types of handler other "
"than a :class:`~logging.FileHandler` - for example, one of the rotating file"
" handlers, or a different type of handler altogether."
msgstr ""
"Naturligtvis kan metoden också utvidgas till andra typer av hanterare än en "
":class:`~logging.FileHandler` - till exempel en av de roterande "
"filhanterarna eller en helt annan typ av hanterare."

#: ../../howto/logging-cookbook.rst:2642
msgid "Using particular formatting styles throughout your application"
msgstr "Använda särskilda formateringsstilar i hela din ansökan"

#: ../../howto/logging-cookbook.rst:2644
msgid ""
"In Python 3.2, the :class:`~logging.Formatter` gained a ``style`` keyword "
"parameter which, while defaulting to ``%`` for backward compatibility, "
"allowed the specification of ``{`` or ``$`` to support the formatting "
"approaches supported by :meth:`str.format` and :class:`string.Template`. "
"Note that this governs the formatting of logging messages for final output "
"to logs, and is completely orthogonal to how an individual logging message "
"is constructed."
msgstr ""
"I Python 3.2 fick :class:`~logging.Formatter` en ``style`` "
"nyckelordsparameter som, även om standardvärdet är ``%`` för "
"bakåtkompatibilitet, tillät specifikationen av ``{`` eller ``$`` för att "
"stödja formateringsmetoderna som stöds av :meth:`str.format` och "
":class:`string.Template`. Observera att detta styr formateringen av "
"loggmeddelanden för slutlig utmatning till loggar, och är helt ortogonalt "
"till hur ett enskilt loggmeddelande konstrueras."

#: ../../howto/logging-cookbook.rst:2651
msgid ""
"Logging calls (:meth:`~Logger.debug`, :meth:`~Logger.info` etc.) only take "
"positional parameters for the actual logging message itself, with keyword "
"parameters used only for determining options for how to handle the logging "
"call (e.g. the ``exc_info`` keyword parameter to indicate that traceback "
"information should be logged, or the ``extra`` keyword parameter to indicate"
" additional contextual information to be added to the log). So you cannot "
"directly make logging calls using :meth:`str.format` or "
":class:`string.Template` syntax, because internally the logging package uses"
" %-formatting to merge the format string and the variable arguments. There "
"would be no changing this while preserving backward compatibility, since all"
" logging calls which are out there in existing code will be using %-format "
"strings."
msgstr ""
"Loggningsanrop (:meth:`~Logger.debug`, :meth:`~Logger.info` etc.) tar endast"
" positionella parametrar för själva loggningsmeddelandet, med "
"nyckelordsparametrar som endast används för att bestämma alternativ för hur "
"loggningsanropet ska hanteras (t.ex. nyckelordsparametern ``exc_info`` för "
"att ange att spårningsinformation ska loggas, eller nyckelordsparametern "
"``extra`` för att ange ytterligare kontextuell information som ska läggas "
"till i loggen). Så du kan inte direkt göra loggningsanrop med "
":meth:`str.format` eller :class:`string.Template` syntax, eftersom "
"loggningspaketet internt använder %-formatting för att slå samman "
"formatsträngen och variabelargumenten. Det skulle inte gå att ändra detta "
"och samtidigt bevara bakåtkompatibilitet, eftersom alla loggningsanrop som "
"finns i befintlig kod kommer att använda %-format-strängar."

#: ../../howto/logging-cookbook.rst:2663
msgid ""
"There have been suggestions to associate format styles with specific "
"loggers, but that approach also runs into backward compatibility problems "
"because any existing code could be using a given logger name and using "
"%-formatting."
msgstr ""
"Det har funnits förslag på att associera formatstilar med specifika loggrar,"
" men det tillvägagångssättet leder också till problem med "
"bakåtkompatibilitet eftersom all befintlig kod kan använda ett visst "
"loggernamn och använda %-formatting."

#: ../../howto/logging-cookbook.rst:2667
msgid ""
"For logging to work interoperably between any third-party libraries and your"
" code, decisions about formatting need to be made at the level of the "
"individual logging call. This opens up a couple of ways in which alternative"
" formatting styles can be accommodated."
msgstr ""
"För att loggning ska fungera interoperabelt mellan tredjepartsbibliotek och "
"din kod måste beslut om formatering fattas på nivån för det enskilda "
"loggningsanropet. Detta öppnar upp för ett par sätt på vilka alternativa "
"formateringsstilar kan tillgodoses."

#: ../../howto/logging-cookbook.rst:2674
msgid "Using LogRecord factories"
msgstr "Använda LogRecord-fabriker"

#: ../../howto/logging-cookbook.rst:2676
msgid ""
"In Python 3.2, along with the :class:`~logging.Formatter` changes mentioned "
"above, the logging package gained the ability to allow users to set their "
"own :class:`LogRecord` subclasses, using the :func:`setLogRecordFactory` "
"function. You can use this to set your own subclass of :class:`LogRecord`, "
"which does the Right Thing by overriding the :meth:`~LogRecord.getMessage` "
"method. The base class implementation of this method is where the ``msg % "
"args`` formatting happens, and where you can substitute your alternate "
"formatting; however, you should be careful to support all formatting styles "
"and allow %-formatting as the default, to ensure interoperability with other"
" code. Care should also be taken to call ``str(self.msg)``, just as the base"
" implementation does."
msgstr ""
"I Python 3.2, tillsammans med :class:`~logging.Formatter` ändringarna som "
"nämns ovan, fick loggningspaketet möjligheten att låta användare ställa in "
"sina egna :class:`LogRecord` underklasser, med hjälp av "
":func:`setLogRecordFactory` funktionen. Du kan använda detta för att skapa "
"din egen underklass av :class:`LogRecord`, som gör det rätta genom att "
"åsidosätta :meth:`~LogRecord.getMessage`-metoden. Basklassens implementering"
" av denna metod är där formateringen av ``msg % args`` sker, och där du kan "
"ersätta din alternativa formatering; du bör dock vara noga med att stödja "
"alla formateringsstilar och tillåta %-formatting som standard, för att "
"säkerställa interoperabilitet med annan kod. Man bör också vara noga med att"
" anropa ``str(self.msg)``, precis som basimplementationen gör."

#: ../../howto/logging-cookbook.rst:2687
msgid ""
"Refer to the reference documentation on :func:`setLogRecordFactory` and "
":class:`LogRecord` for more information."
msgstr ""
"Se referensdokumentationen för :func:`setLogRecordFactory` och "
":class:`LogRecord` för mer information."

#: ../../howto/logging-cookbook.rst:2692
msgid "Using custom message objects"
msgstr "Använda anpassade meddelandeobjekt"

#: ../../howto/logging-cookbook.rst:2694
msgid ""
"There is another, perhaps simpler way that you can use {}- and $- formatting"
" to construct your individual log messages. You may recall (from "
":ref:`arbitrary-object-messages`) that when logging you can use an arbitrary"
" object as a message format string, and that the logging package will call "
":func:`str` on that object to get the actual format string. Consider the "
"following two classes::"
msgstr ""
"Det finns ett annat, kanske enklare sätt att använda {}- och $-formatering "
"för att konstruera dina individuella loggmeddelanden. Du kanske minns (från "
":ref:`arbitrary-object-messages`) att när du loggar kan du använda ett "
"godtyckligt objekt som formatsträng för meddelandet, och att "
"loggningspaketet anropar :func:`str` på det objektet för att få den faktiska"
" formatsträngen. Betrakta följande två klasser::"

#: ../../howto/logging-cookbook.rst:2719
msgid ""
"Either of these can be used in place of a format string, to allow {}- or "
"$-formatting to be used to build the actual \"message\" part which appears "
"in the formatted log output in place of “%(message)s” or “{message}” or "
"“$message”. If you find it a little unwieldy to use the class names whenever"
" you want to log something, you can make it more palatable if you use an "
"alias such as ``M`` or ``_`` for the message (or perhaps ``__``, if you are "
"using ``_`` for localization)."
msgstr ""
"Båda dessa kan användas i stället för en formatsträng, så att {}- eller "
"$-formatering kan användas för att skapa den faktiska \"message\"-delen som "
"visas i den formaterade loggutmatningen i stället för \"%(message)s\" eller "
"\"{message}\" eller \"$message\". Om du tycker att det är lite krångligt att"
" använda klassnamnen varje gång du vill logga något kan du göra det mer "
"lätthanterligt genom att använda ett alias som ``M`` eller ``_`` för "
"meddelandet (eller kanske ``__``, om du använder ``_`` för lokalisering)."

#: ../../howto/logging-cookbook.rst:2727
msgid ""
"Examples of this approach are given below. Firstly, formatting with "
":meth:`str.format`::"
msgstr ""
"Exempel på detta tillvägagångssätt ges nedan. För det första, formatering "
"med :meth:`str.format`::"

#: ../../howto/logging-cookbook.rst:2741
msgid "Secondly, formatting with :class:`string.Template`::"
msgstr "För det andra, formatering med :class:`string.Template`::"

#: ../../howto/logging-cookbook.rst:2748
msgid ""
"One thing to note is that you pay no significant performance penalty with "
"this approach: the actual formatting happens not when you make the logging "
"call, but when (and if) the logged message is actually about to be output to"
" a log by a handler. So the only slightly unusual thing which might trip you"
" up is that the parentheses go around the format string and the arguments, "
"not just the format string. That’s because the __ notation is just syntax "
"sugar for a constructor call to one of the :samp:`{XXX}Message` classes "
"shown above."
msgstr ""
"En sak att notera är att du inte betalar någon betydande prestandaförlust "
"med det här tillvägagångssättet: den faktiska formateringen sker inte när du"
" gör loggningsanropet, utan när (och om) det loggade meddelandet faktiskt är"
" på väg att matas ut till en logg av en hanterare. Så det enda lite ovanliga"
" som kan göra dig förvirrad är att parenteserna går runt formatsträngen och "
"argumenten, inte bara formatsträngen. Det beror på att __-notationen bara är"
" syntaxsocker för ett anrop av en konstruktor till en av "
":samp:`{XXX}Message`-klasserna som visas ovan."

#: ../../howto/logging-cookbook.rst:2762
msgid "Configuring filters with :func:`dictConfig`"
msgstr "Konfigurera filter med :func:`dictConfig`"

#: ../../howto/logging-cookbook.rst:2764
msgid ""
"You *can* configure filters using :func:`~logging.config.dictConfig`, though"
" it might not be obvious at first glance how to do it (hence this recipe). "
"Since :class:`~logging.Filter` is the only filter class included in the "
"standard library, and it is unlikely to cater to many requirements (it's "
"only there as a base class), you will typically need to define your own "
":class:`~logging.Filter` subclass with an overridden "
":meth:`~logging.Filter.filter` method. To do this, specify the ``()`` key in"
" the configuration dictionary for the filter, specifying a callable which "
"will be used to create the filter (a class is the most obvious, but you can "
"provide any callable which returns a :class:`~logging.Filter` instance). "
"Here is a complete example::"
msgstr ""
"Du *kan* konfigurera filter med hjälp av :func:`~logging.config.dictConfig`,"
" även om det kanske inte är uppenbart vid första anblicken hur du gör det "
"(därav detta recept). Eftersom :class:`~logging.Filter` är den enda "
"filterklassen som ingår i standardbiblioteket, och det är osannolikt att den"
" kommer att tillgodose många krav (den finns bara där som en basklass), "
"kommer du vanligtvis att behöva definiera din egen "
":class:`~logging.Filter`-underklass med en åsidosatt "
":meth:`~logging.Filter.filter`-metod. För att göra detta anger du nyckeln "
"``()`` i konfigurationsordlistan för filtret och anger en anropsbar som ska "
"användas för att skapa filtret (en klass är det mest uppenbara, men du kan "
"ange vilken anropsbar som helst som returnerar en "
":class:`~logging.Filter`-instans). Här är ett fullständigt exempel::"

#: ../../howto/logging-cookbook.rst:2817
msgid ""
"This example shows how you can pass configuration data to the callable which"
" constructs the instance, in the form of keyword parameters. When run, the "
"above script will print:"
msgstr ""
"Det här exemplet visar hur du kan skicka konfigurationsdata till den "
"callable som konstruerar instansen, i form av nyckelordsparametrar. När "
"skriptet ovan körs kommer det att skrivas ut:"

#: ../../howto/logging-cookbook.rst:2825
msgid "which shows that the filter is working as configured."
msgstr "vilket visar att filtret fungerar som det ska."

#: ../../howto/logging-cookbook.rst:2827
msgid "A couple of extra points to note:"
msgstr "Ett par extra punkter att notera:"

#: ../../howto/logging-cookbook.rst:2829
msgid ""
"If you can't refer to the callable directly in the configuration (e.g. if it"
" lives in a different module, and you can't import it directly where the "
"configuration dictionary is), you can use the form ``ext://...`` as "
"described in :ref:`logging-config-dict-externalobj`. For example, you could "
"have used the text ``'ext://__main__.MyFilter'`` instead of ``MyFilter`` in "
"the above example."
msgstr ""
"Om du inte kan hänvisa till den anropbara direkt i konfigurationen (t.ex. om"
" den finns i en annan modul och du inte kan importera den direkt där "
"konfigurationsordlistan finns) kan du använda formen ``ext://...`` som "
"beskrivs i :ref:`logging-config-dict-externalobj`. Du kunde till exempel ha "
"använt texten ```'ext://__main__.MyFilter'`` i stället för ``MyFilter`` i "
"exemplet ovan."

#: ../../howto/logging-cookbook.rst:2836
msgid ""
"As well as for filters, this technique can also be used to configure custom "
"handlers and formatters. See :ref:`logging-config-dict-userdef` for more "
"information on how logging supports using user-defined objects in its "
"configuration, and see the other cookbook recipe :ref:`custom-handlers` "
"above."
msgstr ""
"Förutom för filter kan den här tekniken också användas för att konfigurera "
"anpassade hanterare och formaterare. Se :ref:`logging-config-dict-userdef` "
"för mer information om hur loggning stöder användning av användardefinierade"
" objekt i sin konfiguration, och se det andra kokboksreceptet :ref:`custom-"
"handlers` ovan."

#: ../../howto/logging-cookbook.rst:2845
msgid "Customized exception formatting"
msgstr "Anpassad formatering av undantag"

#: ../../howto/logging-cookbook.rst:2847
msgid ""
"There might be times when you want to do customized exception formatting - "
"for argument's sake, let's say you want exactly one line per logged event, "
"even when exception information is present. You can do this with a custom "
"formatter class, as shown in the following example::"
msgstr ""
"Det kan finnas tillfällen då du vill göra en anpassad formatering av "
"undantag - låt oss säga att du vill ha exakt en rad per loggad händelse, "
"även när det finns information om undantag. Du kan göra detta med en "
"anpassad formatteringsklass, som visas i följande exempel::"

#: ../../howto/logging-cookbook.rst:2888
msgid "When run, this produces a file with exactly two lines:"
msgstr "När detta körs produceras en fil med exakt två rader:"

#: ../../howto/logging-cookbook.rst:2895
msgid ""
"While the above treatment is simplistic, it points the way to how exception "
"information can be formatted to your liking. The :mod:`traceback` module may"
" be helpful for more specialized needs."
msgstr ""
"Även om ovanstående behandling är förenklad, visar den vägen för hur "
"information om undantag kan formateras efter eget tycke och smak. Modulen "
":mod:`traceback` kan vara till hjälp för mer specialiserade behov."

#: ../../howto/logging-cookbook.rst:2902
msgid "Speaking logging messages"
msgstr "Tala om loggade meddelanden"

#: ../../howto/logging-cookbook.rst:2904
msgid ""
"There might be situations when it is desirable to have logging messages "
"rendered in an audible rather than a visible format. This is easy to do if "
"you have text-to-speech (TTS) functionality available in your system, even "
"if it doesn't have a Python binding. Most TTS systems have a command line "
"program you can run, and this can be invoked from a handler using "
":mod:`subprocess`. It's assumed here that TTS command line programs won't "
"expect to interact with users or take a long time to complete, and that the "
"frequency of logged messages will be not so high as to swamp the user with "
"messages, and that it's acceptable to have the messages spoken one at a time"
" rather than concurrently, The example implementation below waits for one "
"message to be spoken before the next is processed, and this might cause "
"other handlers to be kept waiting. Here is a short example showing the "
"approach, which assumes that the ``espeak`` TTS package is available::"
msgstr ""
"Det kan finnas situationer när det är önskvärt att loggmeddelanden återges i"
" ett hörbart snarare än ett synligt format. Detta är lätt att göra om du har"
" text-till-tal-funktionalitet (TTS) tillgänglig i ditt system, även om den "
"inte har en Python-bindning. De flesta TTS-system har ett "
"kommandoradsprogram som du kan köra, och detta kan anropas från en hanterare"
" med :mod:`subprocess`. Det antas här att TTS-kommandoradsprogram inte "
"förväntar sig att interagera med användare eller tar lång tid att slutföra, "
"och att frekvensen av loggade meddelanden inte kommer att vara så hög att "
"användaren översköljs av meddelanden, och att det är acceptabelt att "
"meddelandena läses upp ett i taget snarare än samtidigt, "
"Exempelimplementeringen nedan väntar på att ett meddelande ska läsas upp "
"innan nästa behandlas, och detta kan leda till att andra hanterare får "
"vänta. Här är ett kort exempel som visar tillvägagångssättet, som "
"förutsätter att TTS-paketet ``espeak`` är tillgängligt::"

#: ../../howto/logging-cookbook.rst:2946
msgid ""
"When run, this script should say \"Hello\" and then \"Goodbye\" in a female "
"voice."
msgstr ""
"När skriptet körs ska det säga \"Hej\" och sedan \"Hej då\" med en kvinnlig "
"röst."

#: ../../howto/logging-cookbook.rst:2948
msgid ""
"The above approach can, of course, be adapted to other TTS systems and even "
"other systems altogether which can process messages via external programs "
"run from a command line."
msgstr ""
"Ovanstående metod kan naturligtvis anpassas till andra TTS-system och till "
"och med till andra system som kan behandla meddelanden via externa program "
"som körs från en kommandorad."

#: ../../howto/logging-cookbook.rst:2956
msgid "Buffering logging messages and outputting them conditionally"
msgstr "Buffra loggade meddelanden och skicka ut dem villkorligt"

#: ../../howto/logging-cookbook.rst:2958
msgid ""
"There might be situations where you want to log messages in a temporary area"
" and only output them if a certain condition occurs. For example, you may "
"want to start logging debug events in a function, and if the function "
"completes without errors, you don't want to clutter the log with the "
"collected debug information, but if there is an error, you want all the "
"debug information to be output as well as the error."
msgstr ""
"Det kan finnas situationer där du vill logga meddelanden i ett tillfälligt "
"område och bara mata ut dem om ett visst villkor inträffar. Du kanske t.ex. "
"vill börja logga felsökningshändelser i en funktion, och om funktionen "
"slutförs utan fel vill du inte fylla loggen med den samlade "
"felsökningsinformationen, men om det uppstår ett fel vill du att all "
"felsökningsinformation ska matas ut tillsammans med felet."

#: ../../howto/logging-cookbook.rst:2965
msgid ""
"Here is an example which shows how you could do this using a decorator for "
"your functions where you want logging to behave this way. It makes use of "
"the :class:`logging.handlers.MemoryHandler`, which allows buffering of "
"logged events until some condition occurs, at which point the buffered "
"events are ``flushed`` - passed to another handler (the ``target`` handler) "
"for processing. By default, the ``MemoryHandler`` flushed when its buffer "
"gets filled up or an event whose level is greater than or equal to a "
"specified threshold is seen. You can use this recipe with a more specialised"
" subclass of ``MemoryHandler`` if you want custom flushing behavior."
msgstr ""
"Här är ett exempel som visar hur du kan göra detta med hjälp av en dekorator"
" för dina funktioner där du vill att loggning ska bete sig på detta sätt. "
"Det använder sig av :class:`logging.handlers.MemoryHandler`, som tillåter "
"buffring av loggade händelser tills något villkor inträffar, vid vilken "
"tidpunkt de buffrade händelserna ``flushed`` - skickas till en annan "
"hanterare (``target`` hanteraren) för bearbetning. Som standard spolas "
"``MemoryHandler`` när dess buffert fylls upp eller en händelse vars nivå är "
"större än eller lika med ett angivet tröskelvärde ses. Du kan använda detta "
"recept med en mer specialiserad subklass av ``MemoryHandler`` om du vill ha "
"ett anpassat spolningsbeteende."

#: ../../howto/logging-cookbook.rst:2975
msgid ""
"The example script has a simple function, ``foo``, which just cycles through"
" all the logging levels, writing to ``sys.stderr`` to say what level it's "
"about to log at, and then actually logging a message at that level. You can "
"pass a parameter to ``foo`` which, if true, will log at ERROR and CRITICAL "
"levels - otherwise, it only logs at DEBUG, INFO and WARNING levels."
msgstr ""
"Exempelskriptet har en enkel funktion, ``foo``, som bara cyklar genom alla "
"loggningsnivåer, skriver till ``sys.stderr`` för att tala om vilken nivå den"
" ska logga på och sedan faktiskt loggar ett meddelande på den nivån. Du kan "
"skicka en parameter till ``foo`` som, om den är sann, loggar på nivåerna "
"ERROR och CRITICAL - annars loggar den bara på nivåerna DEBUG, INFO och "
"WARNING."

#: ../../howto/logging-cookbook.rst:2981
msgid ""
"The script just arranges to decorate ``foo`` with a decorator which will do "
"the conditional logging that's required. The decorator takes a logger as a "
"parameter and attaches a memory handler for the duration of the call to the "
"decorated function. The decorator can be additionally parameterised using a "
"target handler, a level at which flushing should occur, and a capacity for "
"the buffer (number of records buffered). These default to a "
":class:`~logging.StreamHandler` which writes to ``sys.stderr``, "
"``logging.ERROR`` and ``100`` respectively."
msgstr ""
"Skriptet ordnar bara så att ``foo`` dekoreras med en dekorator som gör den "
"villkorliga loggning som krävs. Dekoratorn tar en logger som en parameter "
"och kopplar en minneshanterare under hela anropet till den dekorerade "
"funktionen. Dekoratorn kan dessutom parametriseras med hjälp av en "
"målhanterare, en nivå vid vilken rensning ska ske och en kapacitet för "
"bufferten (antal poster som buffras). Dessa är som standard en "
":class:`~logging.StreamHandler` som skriver till ``sys.stderr``, "
"``logging.ERROR`` respektive ``100``."

#: ../../howto/logging-cookbook.rst:2989
msgid "Here's the script::"
msgstr "Här är skriptet::"

#: ../../howto/logging-cookbook.rst:3052
msgid "When this script is run, the following output should be observed:"
msgstr "När detta skript körs bör följande utdata observeras:"

#: ../../howto/logging-cookbook.rst:3082
msgid ""
"As you can see, actual logging output only occurs when an event is logged "
"whose severity is ERROR or greater, but in that case, any previous events at"
" lower severities are also logged."
msgstr ""
"Som du kan se sker den faktiska loggningen endast när en händelse loggas "
"vars allvarlighetsgrad är ERROR eller högre, men i så fall loggas även alla "
"tidigare händelser med lägre allvarlighetsgrad."

#: ../../howto/logging-cookbook.rst:3086
msgid "You can of course use the conventional means of decoration::"
msgstr "Du kan naturligtvis använda de konventionella dekorationsmedlen::"

#: ../../howto/logging-cookbook.rst:3096
msgid "Sending logging messages to email, with buffering"
msgstr "Skicka loggade meddelanden till e-post, med buffring"

#: ../../howto/logging-cookbook.rst:3098
msgid ""
"To illustrate how you can send log messages via email, so that a set number "
"of messages are sent per email, you can subclass "
":class:`~logging.handlers.BufferingHandler`. In the following  example, "
"which you can adapt to suit your specific needs, a simple test harness is "
"provided which allows you to run the script with command line arguments "
"specifying what you typically need to send things via SMTP. (Run the "
"downloaded script with the ``-h`` argument to see the required and optional "
"arguments.)"
msgstr ""
"För att illustrera hur du kan skicka loggmeddelanden via e-post, så att ett "
"visst antal meddelanden skickas per e-post, kan du underordna dig "
":class:`~logging.handlers.BufferingHandler`. I följande exempel, som du kan "
"anpassa efter dina specifika behov, tillhandahålls ett enkelt testprogram "
"som gör att du kan köra skriptet med kommandoradsargument som anger vad du "
"vanligtvis behöver för att skicka saker via SMTP. (Kör det nedladdade "
"skriptet med argumentet ``-h`` för att se vilka argument som krävs och vilka"
" som är valfria)"

#: ../../howto/logging-cookbook.rst:3170
msgid ""
"If you run this script and your SMTP server is correctly set up, you should "
"find that it sends eleven emails to the addressee you specify. The first ten"
" emails will each have ten log messages, and the eleventh will have two "
"messages. That makes up 102 messages as specified in the script."
msgstr ""
"Om du kör det här skriptet och din SMTP-server är korrekt konfigurerad, bör "
"du upptäcka att det skickar elva e-postmeddelanden till den adressat du "
"anger. De första tio e-postmeddelandena kommer att innehålla tio "
"loggmeddelanden vardera och det elfte meddelandet kommer att innehålla två "
"meddelanden. Det blir 102 meddelanden enligt vad som anges i skriptet."

#: ../../howto/logging-cookbook.rst:3178
msgid "Formatting times using UTC (GMT) via configuration"
msgstr "Formatering av tider med UTC (GMT) via konfiguration"

#: ../../howto/logging-cookbook.rst:3180
msgid ""
"Sometimes you want to format times using UTC, which can be done using a "
"class such as ``UTCFormatter``, shown below::"
msgstr ""
"Ibland vill du formatera tider med UTC, vilket kan göras med hjälp av en "
"klass som ``UTCFormatter``, som visas nedan::"

#: ../../howto/logging-cookbook.rst:3189
msgid ""
"and you can then use the ``UTCFormatter`` in your code instead of "
":class:`~logging.Formatter`. If you want to do that via configuration, you "
"can use the :func:`~logging.config.dictConfig` API with an approach "
"illustrated by the following complete example::"
msgstr ""
"och du kan sedan använda ``UTCFormatter`` i din kod istället för "
":class:`~logging.Formatter`. Om du vill göra det via konfiguration kan du "
"använda API:et :func:`~logging.config.dictConfig` med ett tillvägagångssätt "
"som illustreras av följande fullständiga exempel::"

#: ../../howto/logging-cookbook.rst:3232
msgid "When this script is run, it should print something like:"
msgstr "När detta skript körs bör det skriva ut något liknande:"

#: ../../howto/logging-cookbook.rst:3239
msgid ""
"showing how the time is formatted both as local time and UTC, one for each "
"handler."
msgstr ""
"som visar hur tiden formateras både som lokal tid och UTC, en för varje "
"hanterare."

#: ../../howto/logging-cookbook.rst:3246
msgid "Using a context manager for selective logging"
msgstr "Använda en kontexthanterare för selektiv loggning"

#: ../../howto/logging-cookbook.rst:3248
msgid ""
"There are times when it would be useful to temporarily change the logging "
"configuration and revert it back after doing something. For this, a context "
"manager is the most obvious way of saving and restoring the logging context."
" Here is a simple example of such a context manager, which allows you to "
"optionally change the logging level and add a logging handler purely in the "
"scope of the context manager::"
msgstr ""
"Det finns tillfällen då det skulle vara användbart att tillfälligt ändra "
"loggningskonfigurationen och återgå till den efter att ha gjort något. För "
"detta ändamål är en kontexthanterare det mest uppenbara sättet att spara och"
" återställa loggningskontexten. Här är ett enkelt exempel på en sådan "
"kontexthanterare, som gör att du kan ändra loggningsnivån och lägga till en "
"loggningshanterare enbart i kontexthanterarens omfattning::"

#: ../../howto/logging-cookbook.rst:3281
msgid ""
"If you specify a level value, the logger's level is set to that value in the"
" scope of the with block covered by the context manager. If you specify a "
"handler, it is added to the logger on entry to the block and removed on exit"
" from the block. You can also ask the manager to close the handler for you "
"on block exit - you could do this if you don't need the handler any more."
msgstr ""
"Om du anger ett nivåvärde sätts loggarens nivå till det värdet inom ramen "
"för det with-block som omfattas av kontexthanteraren. Om du anger en "
"hanterare läggs den till i loggern när den kommer in i blocket och tas bort "
"när den lämnar blocket. Du kan också be hanteraren att stänga hanteraren åt "
"dig när du lämnar blocket - det kan du göra om du inte behöver hanteraren "
"längre."

#: ../../howto/logging-cookbook.rst:3287
msgid ""
"To illustrate how it works, we can add the following block of code to the "
"above::"
msgstr ""
"För att illustrera hur det fungerar kan vi lägga till följande kodblock till"
" ovanstående::"

#: ../../howto/logging-cookbook.rst:3305
msgid ""
"We initially set the logger's level to ``INFO``, so message #1 appears and "
"message #2 doesn't. We then change the level to ``DEBUG`` temporarily in the"
" following ``with`` block, and so message #3 appears. After the block exits,"
" the logger's level is restored to ``INFO`` and so message #4 doesn't "
"appear. In the next ``with`` block, we set the level to ``DEBUG`` again but "
"also add a handler writing to ``sys.stdout``. Thus, message #5 appears twice"
" on the console (once via ``stderr`` and once via ``stdout``). After the "
"``with`` statement's completion, the status is as it was before so message "
"#6 appears (like message #1) whereas message #7 doesn't (just like message "
"#2)."
msgstr ""
"Vi sätter initialt loggarens nivå till ``INFO``, så meddelande #1 visas och "
"meddelande #2 inte. Vi ändrar sedan nivån till ``DEBUG`` tillfälligt i "
"följande ``with``-block, och så visas meddelande #3. Efter att blocket "
"avslutats återställs loggarens nivå till ``INFO`` och så visas inte "
"meddelande #4. I nästa ``with``-block sätter vi nivån till ``DEBUG`` igen "
"men lägger också till en hanterare som skriver till ``sys.stdout``. Således "
"visas meddelande #5 två gånger på konsolen (en gång via ``stderr`` och en "
"gång via ``stdout``). Efter att ``with``-satsen har slutförts är statusen "
"som den var tidigare, så meddelande #6 visas (som meddelande #1) medan "
"meddelande #7 inte gör det (precis som meddelande #2)."

#: ../../howto/logging-cookbook.rst:3315
msgid "If we run the resulting script, the result is as follows:"
msgstr "Om vi kör det resulterande skriptet blir resultatet som följer:"

#: ../../howto/logging-cookbook.rst:3326
msgid ""
"If we run it again, but pipe ``stderr`` to ``/dev/null``, we see the "
"following, which is the only message written to ``stdout``:"
msgstr ""
"Om vi kör det igen, men pipar ``stderr`` till ``/dev/null``, ser vi "
"följande, vilket är det enda meddelandet som skrivs till ``stdout``:"

#: ../../howto/logging-cookbook.rst:3334
msgid "Once again, but piping ``stdout`` to ``/dev/null``, we get:"
msgstr "Återigen, men genom att pipa ``stdout`` till ``/dev/null`` får vi:"

#: ../../howto/logging-cookbook.rst:3344
msgid ""
"In this case, the message #5 printed to ``stdout`` doesn't appear, as "
"expected."
msgstr ""
"I det här fallet visas inte meddelandet #5 som skrivs ut till ``stdout``, "
"som förväntat."

#: ../../howto/logging-cookbook.rst:3346
msgid ""
"Of course, the approach described here can be generalised, for example to "
"attach logging filters temporarily. Note that the above code works in Python"
" 2 as well as Python 3."
msgstr ""
"Naturligtvis kan den metod som beskrivs här generaliseras, till exempel för "
"att koppla loggningsfilter temporärt. Observera att ovanstående kod fungerar"
" i Python 2 såväl som Python 3."

#: ../../howto/logging-cookbook.rst:3354
msgid "A CLI application starter template"
msgstr "En startmall för CLI-applikationer"

#: ../../howto/logging-cookbook.rst:3356
msgid "Here's an example which shows how you can:"
msgstr "Här är ett exempel som visar hur du kan göra det:"

#: ../../howto/logging-cookbook.rst:3358
msgid "Use a logging level based on command-line arguments"
msgstr "Använd en loggningsnivå som baseras på kommandoradsargument"

#: ../../howto/logging-cookbook.rst:3359
msgid ""
"Dispatch to multiple subcommands in separate files, all logging at the same "
"level in a consistent way"
msgstr ""
"Utskick till flera underkommandon i separata filer, alla loggar på samma "
"nivå på ett konsekvent sätt"

#: ../../howto/logging-cookbook.rst:3361
msgid "Make use of simple, minimal configuration"
msgstr "Använd enkel och minimal konfiguration"

#: ../../howto/logging-cookbook.rst:3363
msgid ""
"Suppose we have a command-line application whose job is to stop, start or "
"restart some services. This could be organised for the purposes of "
"illustration as a file ``app.py`` that is the main script for the "
"application, with individual commands implemented in ``start.py``, "
"``stop.py`` and ``restart.py``. Suppose further that we want to control the "
"verbosity of the application via a command-line argument, defaulting to "
"``logging.INFO``. Here's one way that ``app.py`` could be written::"
msgstr ""
"Anta att vi har en kommandoradsapplikation vars uppgift är att stoppa, "
"starta eller starta om vissa tjänster. Detta skulle kunna organiseras som en"
" fil ``app.py`` som är huvudskriptet för applikationen, med individuella "
"kommandon implementerade i ``start.py``, ``stop.py`` och ``restart.py``. "
"Anta vidare att vi vill kontrollera programmets ordrikedom via ett "
"kommandoradsargument, som standard till ``logging.INFO``. Här är ett sätt "
"som ``app.py`` skulle kunna skrivas på::"

#: ../../howto/logging-cookbook.rst:3412
msgid ""
"And the ``start``, ``stop`` and ``restart`` commands can be implemented in "
"separate modules, like so for starting::"
msgstr ""
"Och kommandona ``start``, ``stop`` och ``restart`` kan implementeras i "
"separata moduler, så här för att starta::"

#: ../../howto/logging-cookbook.rst:3425
msgid "and thus for stopping::"
msgstr "och därmed för att stoppa::"

#: ../../howto/logging-cookbook.rst:3446
msgid "and similarly for restarting::"
msgstr "och på samma sätt för omstart::"

#: ../../howto/logging-cookbook.rst:3467
msgid ""
"If we run this application with the default log level, we get output like "
"this:"
msgstr ""
"Om vi kör den här applikationen med standardloggnivån får vi utdata som "
"denna:"

#: ../../howto/logging-cookbook.rst:3480
msgid ""
"The first word is the logging level, and the second word is the module or "
"package name of the place where the event was logged."
msgstr ""
"Det första ordet är loggningsnivån och det andra ordet är modul- eller "
"paketnamnet på den plats där händelsen loggades."

#: ../../howto/logging-cookbook.rst:3483
msgid ""
"If we change the logging level, then we can change the information sent to "
"the log. For example, if we want more information:"
msgstr ""
"Om vi ändrar loggningsnivån kan vi ändra den information som skickas till "
"loggen. Till exempel om vi vill ha mer information:"

#: ../../howto/logging-cookbook.rst:3500
msgid "And if we want less:"
msgstr "Och om vi vill ha mindre:"

#: ../../howto/logging-cookbook.rst:3508
msgid ""
"In this case, the commands don't print anything to the console, since "
"nothing at ``WARNING`` level or above is logged by them."
msgstr ""
"I det här fallet skriver kommandona inte ut något till konsolen, eftersom "
"inget på nivån ``WARNING`` eller högre loggas av dem."

#: ../../howto/logging-cookbook.rst:3514
msgid "A Qt GUI for logging"
msgstr "Ett Qt GUI för loggning"

#: ../../howto/logging-cookbook.rst:3516
msgid ""
"A question that comes up from time to time is about how to log to a GUI "
"application. The `Qt <https://www.qt.io/>`_ framework is a popular cross-"
"platform UI framework with Python bindings using `PySide2 "
"<https://pypi.org/project/PySide2/>`_ or `PyQt5 "
"<https://pypi.org/project/PyQt5/>`_ libraries."
msgstr ""

#: ../../howto/logging-cookbook.rst:3522
msgid ""
"The following example shows how to log to a Qt GUI. This introduces a simple"
" ``QtHandler`` class which takes a callable, which should be a slot in the "
"main thread that does GUI updates. A worker thread is also created to show "
"how you can log to the GUI from both the UI itself (via a button for manual "
"logging) as well as a worker thread doing work in the background (here, just"
" logging messages at random levels with random short delays in between)."
msgstr ""
"Följande exempel visar hur man loggar till ett Qt GUI. Detta introducerar en"
" enkel ``QtHandler`` klass som tar en callable, som bör vara en slot i "
"huvudtråden som gör GUI uppdateringar. En arbetstråd skapas också för att "
"visa hur du kan logga till GUI:t från både själva GUI:t (via en knapp för "
"manuell loggning) och en arbetstråd som gör arbete i bakgrunden (här loggas "
"bara meddelanden på slumpmässiga nivåer med slumpmässiga korta fördröjningar"
" däremellan)."

#: ../../howto/logging-cookbook.rst:3529
msgid ""
"The worker thread is implemented using Qt's ``QThread`` class rather than "
"the :mod:`threading` module, as there are circumstances where one has to use"
" ``QThread``, which offers better integration with other ``Qt`` components."
msgstr ""
"Arbetstråden implementeras med hjälp av Qts klass ``QThread`` snarare än "
"modulen :mod:`threading``, eftersom det finns omständigheter där man måste "
"använda ``QThread``, som erbjuder bättre integration med andra "
"``Qt``-komponenter."

#: ../../howto/logging-cookbook.rst:3533
msgid ""
"The code should work with recent releases of any of ``PySide6``, ``PyQt6``, "
"``PySide2`` or ``PyQt5``. You should be able to adapt the approach to "
"earlier versions of Qt. Please refer to the comments in the code snippet for"
" more detailed information."
msgstr ""
"Koden ska fungera med de senaste versionerna av någon av ``PySide6``, "
"``PyQt6``, ``PySide2`` eller ``PyQt5``. Du bör kunna anpassa "
"tillvägagångssättet till tidigare versioner av Qt. För mer detaljerad "
"information hänvisas till kommentarerna i kodavsnittet."

#: ../../howto/logging-cookbook.rst:3770
msgid "Logging to syslog with RFC5424 support"
msgstr "Loggning till syslog med stöd för RFC5424"

#: ../../howto/logging-cookbook.rst:3772
msgid ""
"Although :rfc:`5424` dates from 2009, most syslog servers are configured by "
"detault to use the older :rfc:`3164`, which hails from 2001. When "
"``logging`` was added to Python in 2003, it supported the earlier (and only "
"existing) protocol at the time. Since RFC5424 came out, as there has not "
"been widespread deployment of it in syslog servers, the "
":class:`~logging.handlers.SysLogHandler` functionality has not been updated."
msgstr ""

#: ../../howto/logging-cookbook.rst:3779
msgid ""
"RFC 5424 contains some useful features such as support for structured data, "
"and if you need to be able to log to a syslog server with support for it, "
"you can do so with a subclassed handler which looks something like this::"
msgstr ""
"RFC 5424 innehåller en del användbara funktioner som t.ex. stöd för "
"strukturerad data, och om man behöver kunna logga till en syslog-server med "
"stöd för detta kan man göra det med en underklassad hanterare som ser ut "
"ungefär så här::"

#: ../../howto/logging-cookbook.rst:3845
msgid ""
"You'll need to be familiar with RFC 5424 to fully understand the above code,"
" and it may be that you have slightly different needs (e.g. for how you pass"
" structural data to the log). Nevertheless, the above should be adaptable to"
" your speciric needs. With the above handler, you'd pass structured data "
"using something like this::"
msgstr ""
"Du måste känna till RFC 5424 för att förstå ovanstående kod fullt ut, och "
"det kan hända att du har något annorlunda behov (t.ex. för hur du skickar "
"strukturella data till loggen). Ovanstående bör dock vara anpassningsbart "
"till dina specifika behov. Med ovanstående hanterare skulle du skicka "
"strukturerad data med något liknande detta::"

#: ../../howto/logging-cookbook.rst:3859
msgid "How to treat a logger like an output stream"
msgstr "Så här behandlar du en logger som en utdataström"

#: ../../howto/logging-cookbook.rst:3861
msgid ""
"Sometimes, you need to interface to a third-party API which expects a file-"
"like object to write to, but you want to direct the API's output to a "
"logger. You can do this using a class which wraps a logger with a file-like "
"API. Here's a short script illustrating such a class:"
msgstr ""
"Ibland behöver du ett gränssnitt mot ett API från tredje part som förväntar "
"sig ett filliknande objekt att skriva till, men du vill rikta API:ets utdata"
" till en logger. Du kan göra detta med hjälp av en klass som omsluter en "
"logger med ett filliknande API. Här är ett kort skript som illustrerar en "
"sådan klass:"

#: ../../howto/logging-cookbook.rst:3901
msgid "When this script is run, it prints"
msgstr "När detta skript körs skriver det ut"

#: ../../howto/logging-cookbook.rst:3908
msgid ""
"You could also use ``LoggerWriter`` to redirect ``sys.stdout`` and "
"``sys.stderr`` by doing something like this:"
msgstr ""
"Du kan också använda ``LoggerWriter`` för att omdirigera ```sys.stdout`` och"
" ``ys.stderr`` genom att göra något liknande:"

#: ../../howto/logging-cookbook.rst:3918
msgid ""
"You should do this *after* configuring logging for your needs. In the above "
"example, the :func:`~logging.basicConfig` call does this (using the "
"``sys.stderr`` value *before* it is overwritten by a ``LoggerWriter`` "
"instance). Then, you'd get this kind of result:"
msgstr ""
"Du bör göra detta *efter* att du har konfigurerat loggning för dina behov. I"
" exemplet ovan gör anropet :func:`~logging.basicConfig` detta (genom att "
"använda värdet ``sys.stderr`` *innan* det skrivs över av en "
"``LoggerWriter``-instans). Då skulle du få den här typen av resultat:"

#: ../../howto/logging-cookbook.rst:3931
msgid ""
"Of course, the examples above show output according to the format used by "
":func:`~logging.basicConfig`, but you can use a different formatter when you"
" configure logging."
msgstr ""
"Exemplen ovan visar naturligtvis utdata enligt det format som används av "
":func:`~logging.basicConfig`, men du kan använda ett annat format när du "
"konfigurerar loggning."

#: ../../howto/logging-cookbook.rst:3935
msgid ""
"Note that with the above scheme, you are somewhat at the mercy of buffering "
"and the sequence of write calls which you are intercepting. For example, "
"with the definition of ``LoggerWriter`` above, if you have the snippet"
msgstr ""
"Observera att med ovanstående schema är du något utlämnad till buffring och "
"sekvensen av skrivanrop som du fångar upp. Till exempel, med definitionen av"
" ``LoggerWriter`` ovan, om du har utdraget"

#: ../../howto/logging-cookbook.rst:3944
msgid "then running the script results in"
msgstr "och sedan kör skriptet resulterar i"

#: ../../howto/logging-cookbook.rst:3962
msgid ""
"As you can see, this output isn't ideal. That's because the underlying code "
"which writes to ``sys.stderr`` makes mutiple writes, each of which results "
"in a separate logged line (for example, the last three lines above). To get "
"around this problem, you need to buffer things and only output log lines "
"when newlines are seen. Let's use a slghtly better implementation of "
"``LoggerWriter``:"
msgstr ""

#: ../../howto/logging-cookbook.rst:3987
msgid ""
"This just buffers up stuff until a newline is seen, and then logs complete "
"lines. With this approach, you get better output:"
msgstr ""
"Detta buffrar bara upp saker tills en ny rad ses och loggar sedan hela "
"rader. Med det här tillvägagångssättet får du bättre utdata:"

#: ../../howto/logging-cookbook.rst:4003
msgid "Patterns to avoid"
msgstr "Mönster att undvika"

#: ../../howto/logging-cookbook.rst:4005
msgid ""
"Although the preceding sections have described ways of doing things you "
"might need to do or deal with, it is worth mentioning some usage patterns "
"which are *unhelpful*, and which should therefore be avoided in most cases. "
"The following sections are in no particular order."
msgstr ""
"Även om de föregående avsnitten har beskrivit olika sätt att göra saker som "
"du kan behöva göra eller hantera, är det värt att nämna några "
"användningsmönster som är *onyttiga* och som därför bör undvikas i de flesta"
" fall. Följande avsnitt är inte i någon särskild ordning."

#: ../../howto/logging-cookbook.rst:4011
msgid "Opening the same log file multiple times"
msgstr "Öppna samma loggfil flera gånger"

#: ../../howto/logging-cookbook.rst:4013
msgid ""
"On Windows, you will generally not be able to open the same file multiple "
"times as this will lead to a \"file is in use by another process\" error. "
"However, on POSIX platforms you'll not get any errors if you open the same "
"file multiple times. This could be done accidentally, for example by:"
msgstr ""
"På Windows kan du i allmänhet inte öppna samma fil flera gånger eftersom det"
" leder till felet \"filen används av en annan process\". På POSIX-"
"plattformar får du dock inga felmeddelanden om du öppnar samma fil flera "
"gånger. Detta kan göras av misstag, till exempel genom att:"

#: ../../howto/logging-cookbook.rst:4018
msgid ""
"Adding a file handler more than once which references the same file (e.g. by"
" a copy/paste/forget-to-change error)."
msgstr ""
"Lägga till en filhanterare mer än en gång som refererar till samma fil "
"(t.ex. genom ett kopiera/klistra in/glöm-att-ändra-fel)."

#: ../../howto/logging-cookbook.rst:4021
msgid ""
"Opening two files that look different, as they have different names, but are"
" the same because one is a symbolic link to the other."
msgstr ""
"Öppnar två filer som ser olika ut eftersom de har olika namn, men som är "
"likadana eftersom den ena är en symbolisk länk till den andra."

#: ../../howto/logging-cookbook.rst:4024
msgid ""
"Forking a process, following which both parent and child have a reference to"
" the same file. This might be through use of the :mod:`multiprocessing` "
"module, for example."
msgstr ""
"Förgrening av en process, varefter både förälder och barn har en referens "
"till samma fil. Detta kan till exempel ske genom användning av modulen "
":mod:`multiprocessing`."

#: ../../howto/logging-cookbook.rst:4028
msgid ""
"Opening a file multiple times might *appear* to work most of the time, but "
"can lead to a number of problems in practice:"
msgstr ""
"Att öppna en fil flera gånger kan *se ut* att fungera för det mesta, men kan"
" leda till ett antal problem i praktiken:"

#: ../../howto/logging-cookbook.rst:4031
msgid ""
"Logging output can be garbled because multiple threads or processes try to "
"write to the same file. Although logging guards against concurrent use of "
"the same handler instance by multiple threads, there is no such protection "
"if concurrent writes are attempted by two different threads using two "
"different handler instances which happen to point to the same file."
msgstr ""
"Loggningsutdata kan bli förvrängda om flera trådar eller processer försöker "
"skriva till samma fil. Även om loggning skyddar mot samtidig användning av "
"samma hanterarinstans av flera trådar, finns det inget sådant skydd om "
"samtidiga skrivförsök görs av två olika trådar som använder två olika "
"hanterarinstanser som råkar peka på samma fil."

#: ../../howto/logging-cookbook.rst:4037
msgid ""
"An attempt to delete a file (e.g. during file rotation) silently fails, "
"because there is another reference pointing to it. This can lead to "
"confusion and wasted debugging time - log entries end up in unexpected "
"places, or are lost altogether. Or a file that was supposed to be moved "
"remains in place, and grows in size unexpectedly despite size-based rotation"
" being supposedly in place."
msgstr ""
"Ett försök att radera en fil (t.ex. under filrotation) misslyckas i tysthet,"
" eftersom det finns en annan referens som pekar på den. Detta kan leda till "
"förvirring och bortkastad felsökningstid - loggposter hamnar på oväntade "
"ställen eller försvinner helt och hållet. Eller så blir en fil som skulle ha"
" flyttats kvar på sin plats och växer oväntat i storlek trots att "
"storleksbaserad rotation skulle ha varit på plats."

#: ../../howto/logging-cookbook.rst:4044
msgid ""
"Use the techniques outlined in :ref:`multiple-processes` to circumvent such "
"issues."
msgstr ""
"Använd de tekniker som beskrivs i :ref:`multiple-processes` för att kringgå "
"sådana problem."

#: ../../howto/logging-cookbook.rst:4048
msgid "Using loggers as attributes in a class or passing them as parameters"
msgstr ""
"Använda loggrar som attribut i en klass eller skicka dem som parametrar"

#: ../../howto/logging-cookbook.rst:4050
msgid ""
"While there might be unusual cases where you'll need to do this, in general "
"there is no point because loggers are singletons. Code can always access a "
"given logger instance by name using ``logging.getLogger(name)``, so passing "
"instances around and holding them as instance attributes is pointless. Note "
"that in other languages such as Java and C#, loggers are often static class "
"attributes. However, this pattern doesn't make sense in Python, where the "
"module (and not the class) is the unit of software decomposition."
msgstr ""
"Även om det kan finnas ovanliga fall där du behöver göra detta, är det i "
"allmänhet ingen mening eftersom loggar är singletons. Koden kan alltid komma"
" åt en viss loggarinstans med namn med hjälp av ``logging.getLogger(name)``,"
" så det är meningslöst att skicka runt instanser och hålla dem som "
"instansattribut. Observera att i andra språk som Java och C# är loggar ofta "
"statiska klassattribut. Det här mönstret är dock inte meningsfullt i Python,"
" där modulen (och inte klassen) är enheten för nedbrytning av programvara."

#: ../../howto/logging-cookbook.rst:4059
msgid ""
"Adding handlers other than :class:`~logging.NullHandler` to a logger in a "
"library"
msgstr ""
"Lägga till andra hanterare än :class:`~logging.NullHandler` till en logger i"
" ett bibliotek"

#: ../../howto/logging-cookbook.rst:4061
msgid ""
"Configuring logging by adding handlers, formatters and filters is the "
"responsibility of the application developer, not the library developer. If "
"you are maintaining a library, ensure that you don't add handlers to any of "
"your loggers other than a :class:`~logging.NullHandler` instance."
msgstr ""
"Ansvaret för att konfigurera loggning genom att lägga till hanterare, "
"formaterare och filter ligger hos programutvecklaren, inte hos "
"biblioteksutvecklaren. Om du underhåller ett bibliotek ska du se till att du"
" inte lägger till hanterare till någon av dina loggrar annat än en "
":class:`~logging.NullHandler`-instans."

#: ../../howto/logging-cookbook.rst:4067
msgid "Creating a lot of loggers"
msgstr "Skapar en hel del loggers"

#: ../../howto/logging-cookbook.rst:4069
msgid ""
"Loggers are singletons that are never freed during a script execution, and "
"so creating lots of loggers will use up memory which can't then be freed. "
"Rather than create a logger per e.g. file processed or network connection "
"made, use the :ref:`existing mechanisms <context-info>` for passing "
"contextual information into your logs and restrict the loggers created to "
"those describing areas within your application (generally modules, but "
"occasionally slightly more fine-grained than that)."
msgstr ""
"Loggrar är singletons som aldrig frigörs under en skriptexekvering, och om "
"du skapar många loggrar kommer det att ta upp minne som sedan inte kan "
"frigöras. I stället för att skapa en logger per t.ex. fil som bearbetas "
"eller nätverksanslutning som görs, använd :ref:``existerande mekanismer "
"<context-info>`` för att skicka kontextuell information till dina loggar och"
" begränsa de loggar som skapas till de som beskriver områden inom din "
"applikation (i allmänhet moduler, men ibland något mer finkornigt än så)."

#: ../../howto/logging-cookbook.rst:4080
msgid "Other resources"
msgstr "Övriga resurser"

#: ../../howto/logging-cookbook.rst:4085
msgid "Module :mod:`logging`"
msgstr "Modul :mod:`logging`"

#: ../../howto/logging-cookbook.rst:4085
msgid "API reference for the logging module."
msgstr "API-referens för loggningsmodulen."

#: ../../howto/logging-cookbook.rst:4088
msgid "Module :mod:`logging.config`"
msgstr "Modul :mod:`logging.config`"

#: ../../howto/logging-cookbook.rst:4088
msgid "Configuration API for the logging module."
msgstr "Konfigurations-API för loggningsmodulen."

#: ../../howto/logging-cookbook.rst:4091
msgid "Module :mod:`logging.handlers`"
msgstr "Modul :mod:`logging.handlers`"

#: ../../howto/logging-cookbook.rst:4091
msgid "Useful handlers included with the logging module."
msgstr "Användbara hanterare som ingår i loggningsmodulen."

#: ../../howto/logging-cookbook.rst:4093
msgid ":ref:`Basic Tutorial <logging-basic-tutorial>`"
msgstr ":ref:`Grundläggande handledning <logging-basic-tutorial>`"

#: ../../howto/logging-cookbook.rst:4095
msgid ":ref:`Advanced Tutorial <logging-advanced-tutorial>`"
msgstr ":ref:`Avancerad handledning <logging-advanced-tutorial>`"
