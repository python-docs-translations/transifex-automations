# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 18:05+0000\n"
"PO-Revision-Date: 2025-09-22 17:56+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/modules.rst:5
msgid "Modules"
msgstr "Moduler"

#: ../../tutorial/modules.rst:7
msgid ""
"If you quit from the Python interpreter and enter it again, the definitions "
"you have made (functions and variables) are lost. Therefore, if you want to "
"write a somewhat longer program, you are better off using a text editor to "
"prepare the input for the interpreter and running it with that file as input"
" instead.  This is known as creating a *script*.  As your program gets "
"longer, you may want to split it into several files for easier maintenance."
"  You may also want to use a handy function that you've written in several "
"programs without copying its definition into each program."
msgstr ""
"Om du avslutar Python-tolken och öppnar den igen går de definitioner du har "
"gjort (funktioner och variabler) förlorade. Om du vill skriva ett lite "
"längre program är det därför bättre att använda en textredigerare för att "
"förbereda indata till tolken och köra den med den filen som indata istället."
"  Detta kallas att skapa ett *skript*.  När programmet blir längre kan det "
"vara bra att dela upp det i flera filer för att underlätta underhållet.  Du "
"kanske också vill använda en praktisk funktion som du har skrivit i flera "
"program utan att kopiera dess definition till varje program."

#: ../../tutorial/modules.rst:16
msgid ""
"To support this, Python has a way to put definitions in a file and use them "
"in a script or in an interactive instance of the interpreter. Such a file is"
" called a *module*; definitions from a module can be *imported* into other "
"modules or into the *main* module (the collection of variables that you have"
" access to in a script executed at the top level and in calculator mode)."
msgstr ""
"För att stödja detta har Python ett sätt att lägga definitioner i en fil och"
" använda dem i ett skript eller i en interaktiv instans av tolken. En sådan "
"fil kallas för en *modul*; definitioner från en modul kan *importeras* till "
"andra moduler eller till *huvudmodulen* (den samling variabler som du har "
"tillgång till i ett skript som körs på toppnivå och i kalkylatorläge)."

#: ../../tutorial/modules.rst:22
msgid ""
"A module is a file containing Python definitions and statements.  The file "
"name is the module name with the suffix :file:`.py` appended.  Within a "
"module, the module's name (as a string) is available as the value of the "
"global variable ``__name__``.  For instance, use your favorite text editor "
"to create a file called :file:`fibo.py` in the current directory with the "
"following contents::"
msgstr ""
"En modul är en fil som innehåller Python-definitioner och -satser.  "
"Filnamnet är modulnamnet med suffixet :file:`.py` tillagt.  Inom en modul är"
" modulens namn (som en sträng) tillgängligt som värdet på den globala "
"variabeln ``__name__``.  Använd till exempel din favorittextredigerare för "
"att skapa en fil med namnet :file:`fibo.py` i den aktuella katalogen med "
"följande innehåll::"

#: ../../tutorial/modules.rst:45
msgid ""
"Now enter the Python interpreter and import this module with the following "
"command::"
msgstr ""
"Gå nu in i Python-tolken och importera denna modul med följande kommando::"

#: ../../tutorial/modules.rst:50
msgid ""
"This does not enter the names of the functions defined in ``fibo``  directly"
" in the current symbol table; it only enters the module name ``fibo`` there."
" Using the module name you can access the functions::"
msgstr ""

#: ../../tutorial/modules.rst:61
msgid ""
"If you intend to use a function often you can assign it to a local name::"
msgstr ""
"Om du tänker använda en funktion ofta kan du tilldela den ett lokalt namn::"

#: ../../tutorial/modules.rst:71
msgid "More on Modules"
msgstr "Mer om moduler"

#: ../../tutorial/modules.rst:73
msgid ""
"A module can contain executable statements as well as function definitions. "
"These statements are intended to initialize the module. They are executed "
"only the *first* time the module name is encountered in an import statement."
" [#]_ (They are also run if the file is executed as a script.)"
msgstr ""
"En modul kan innehålla såväl körbara satser som funktionsdefinitioner. Dessa"
" satser är avsedda att initiera modulen. De körs endast *första* gången "
"modulnamnet påträffas i en importsats. (De körs också om filen exekveras som"
" ett skript.)"

#: ../../tutorial/modules.rst:78
msgid ""
"Each module has its own private symbol table, which is used as the global "
"symbol table by all functions defined in the module. Thus, the author of a "
"module can use global variables in the module without worrying about "
"accidental clashes with a user's global variables. On the other hand, if you"
" know what you are doing you can touch a module's global variables with the "
"same notation used to refer to its functions, ``modname.itemname``."
msgstr ""

#: ../../tutorial/modules.rst:85
msgid ""
"Modules can import other modules.  It is customary but not required to place"
" all :keyword:`import` statements at the beginning of a module (or script, "
"for that matter).  The imported module names are placed in the importing "
"module's global symbol table."
msgstr ""

#: ../../tutorial/modules.rst:90
msgid ""
"There is a variant of the :keyword:`import` statement that imports names "
"from a module directly into the importing module's symbol table.  For "
"example::"
msgstr ""

#: ../../tutorial/modules.rst:97
msgid ""
"This does not introduce the module name from which the imports are taken in "
"the local symbol table (so in the example, ``fibo`` is not defined)."
msgstr ""

#: ../../tutorial/modules.rst:100
msgid "There is even a variant to import all names that a module defines::"
msgstr ""
"Det finns till och med en variant för att importera alla namn som en modul "
"definierar::"

#: ../../tutorial/modules.rst:106
msgid ""
"This imports all names except those beginning with an underscore (``_``). In"
" most cases Python programmers do not use this facility since it introduces "
"an unknown set of names into the interpreter, possibly hiding some things "
"you have already defined."
msgstr ""
"Detta importerar alla namn utom de som börjar med ett understreck (``_``). I"
" de flesta fall använder Python-programmerare inte denna funktion eftersom "
"den introducerar en okänd uppsättning namn i tolken, vilket kan dölja vissa "
"saker som du redan har definierat."

#: ../../tutorial/modules.rst:111
msgid ""
"Note that in general the practice of importing ``*`` from a module or "
"package is frowned upon, since it often causes poorly readable code. "
"However, it is okay to use it to save typing in interactive sessions."
msgstr ""
"Observera att det i allmänhet är ogillat att importera ``*`` från en modul "
"eller ett paket, eftersom det ofta leder till dåligt läsbar kod. Det är dock"
" okej att använda det för att spara in på skrivandet i interaktiva "
"sessioner."

#: ../../tutorial/modules.rst:115
msgid ""
"If the module name is followed by :keyword:`!as`, then the name following "
":keyword:`!as` is bound directly to the imported module."
msgstr ""
"Om modulnamnet följs av :keyword:`!as`, så är namnet som följer efter "
":keyword:`!as` bundet direkt till den importerade modulen."

#: ../../tutorial/modules.rst:124
msgid ""
"This is effectively importing the module in the same way that ``import "
"fibo`` will do, with the only difference of it being available as ``fib``."
msgstr ""
"Detta innebär att modulen importeras på samma sätt som ``import fibo``, med "
"den enda skillnaden att den är tillgänglig som ``fib``."

#: ../../tutorial/modules.rst:127
msgid ""
"It can also be used when utilising :keyword:`from` with similar effects::"
msgstr ""
"Det kan också användas när man använder :keyword:`from` med liknande "
"effekter::"

#: ../../tutorial/modules.rst:136
msgid ""
"For efficiency reasons, each module is only imported once per interpreter "
"session.  Therefore, if you change your modules, you must restart the "
"interpreter -- or, if it's just one module you want to test interactively, "
"use :func:`importlib.reload`, e.g. ``import importlib; "
"importlib.reload(modulename)``."
msgstr ""
"Av effektivitetsskäl importeras varje modul bara en gång per tolksession.  "
"Om du ändrar dina moduler måste du därför starta om tolken -- eller, om det "
"bara är en modul som du vill testa interaktivt, använda "
":func:`importlib.reload`, t.ex. ``import importlib; "
"importlib.reload(modulename)``."

#: ../../tutorial/modules.rst:146
msgid "Executing modules as scripts"
msgstr "Exekvera moduler som skript"

#: ../../tutorial/modules.rst:148
msgid "When you run a Python module with ::"
msgstr "När du kör en Python-modul med ::"

#: ../../tutorial/modules.rst:152
msgid ""
"the code in the module will be executed, just as if you imported it, but "
"with the ``__name__`` set to ``\"__main__\"``.  That means that by adding "
"this code at the end of your module::"
msgstr ""
"kommer koden i modulen att exekveras, precis som om du importerade den, men "
"med ``__name__`` satt till ``\"__main__\"``.  Det betyder att genom att "
"lägga till den här koden i slutet av din modul::"

#: ../../tutorial/modules.rst:160
msgid ""
"you can make the file usable as a script as well as an importable module, "
"because the code that parses the command line only runs if the module is "
"executed as the \"main\" file:"
msgstr ""
"kan du göra filen användbar både som ett skript och som en importerbar "
"modul, eftersom koden som analyserar kommandoraden bara körs om modulen körs"
" som \"huvudfilen\":"

#: ../../tutorial/modules.rst:169
msgid "If the module is imported, the code is not run::"
msgstr "Om modulen är importerad körs inte koden::"

#: ../../tutorial/modules.rst:174
msgid ""
"This is often used either to provide a convenient user interface to a "
"module, or for testing purposes (running the module as a script executes a "
"test suite)."
msgstr ""
"Detta används ofta antingen för att ge ett bekvämt användargränssnitt till "
"en modul eller för teständamål (om modulen körs som ett skript körs en "
"testsvit)."

#: ../../tutorial/modules.rst:181
msgid "The Module Search Path"
msgstr "Sökvägen för moduler"

#: ../../tutorial/modules.rst:185
msgid ""
"When a module named :mod:`spam` is imported, the interpreter first searches "
"for a built-in module with that name. These module names are listed in "
":data:`sys.builtin_module_names`. If not found, it then searches for a file "
"named :file:`spam.py` in a list of directories given by the variable "
":data:`sys.path`.  :data:`sys.path` is initialized from these locations:"
msgstr ""

#: ../../tutorial/modules.rst:191
msgid ""
"The directory containing the input script (or the current directory when no "
"file is specified)."
msgstr ""
"Den katalog som innehåller inmatningsskriptet (eller den aktuella katalogen "
"om ingen fil har angetts)."

#: ../../tutorial/modules.rst:193
msgid ""
":envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the"
" shell variable :envvar:`PATH`)."
msgstr ""
":envvar:`PYTHONPATH` (en lista med katalognamn, med samma syntax som "
"skalvariabeln :envvar:`PATH`)."

#: ../../tutorial/modules.rst:195
msgid ""
"The installation-dependent default (by convention including a ``site-"
"packages`` directory, handled by the :mod:`site` module)."
msgstr ""
"Den installationsberoende standardinställningen (enligt konvention inklusive"
" en katalog med ``site-packages``, som hanteras av modulen :mod:`site`)."

#: ../../tutorial/modules.rst:199
msgid ""
"On file systems which support symlinks, the directory containing the input "
"script is calculated after the symlink is followed. In other words the "
"directory containing the symlink is **not** added to the module search path."
msgstr ""
"På filsystem som stöder symbollänkar beräknas katalogen som innehåller "
"indataskriptet efter att symbollänken har följts. Med andra ord läggs "
"katalogen som innehåller symbollänken **inte** till i sökvägen för modulen."

#: ../../tutorial/modules.rst:203
msgid ""
"After initialization, Python programs can modify :data:`sys.path`.  The "
"directory containing the script being run is placed at the beginning of the "
"search path, ahead of the standard library path. This means that scripts in "
"that directory will be loaded instead of modules of the same name in the "
"library directory. This is an error unless the replacement is intended.  See"
" section :ref:`tut-standardmodules` for more information."
msgstr ""
"Efter initialisering kan Python-program ändra :data:`sys.path`.  Den katalog"
" som innehåller det skript som körs placeras i början av sökvägen, före "
"standardbibliotekets sökväg. Detta innebär att skript i den katalogen kommer"
" att laddas istället för moduler med samma namn i bibliotekskatalogen. Detta"
" är ett fel om inte ersättningen är avsedd.  Se avsnitt :ref:`tut-"
"standardmodules` för mer information."

#: ../../tutorial/modules.rst:214
msgid "\"Compiled\" Python files"
msgstr "\"Kompilerade\" Python-filer"

#: ../../tutorial/modules.rst:216
msgid ""
"To speed up loading modules, Python caches the compiled version of each "
"module in the ``__pycache__`` directory under the name "
":file:`module.{version}.pyc`, where the version encodes the format of the "
"compiled file; it generally contains the Python version number.  For "
"example, in CPython release 3.3 the compiled version of spam.py would be "
"cached as ``__pycache__/spam.cpython-33.pyc``.  This naming convention "
"allows compiled modules from different releases and different versions of "
"Python to coexist."
msgstr ""
"För att påskynda laddning av moduler cachar Python den kompilerade versionen"
" av varje modul i katalogen ``__pycache__`` under namnet "
":file:`module.{version}.pyc``, där versionen kodar formatet för den "
"kompilerade filen; den innehåller vanligtvis Pythons versionsnummer.  Till "
"exempel, i CPython version 3.3 skulle den kompilerade versionen av spam.py "
"cachelagras som ``__pycache__/spam.cpython-33.pyc``.  Denna "
"namngivningskonvention gör det möjligt för kompilerade moduler från olika "
"utgåvor och olika versioner av Python att samexistera."

#: ../../tutorial/modules.rst:224
msgid ""
"Python checks the modification date of the source against the compiled "
"version to see if it's out of date and needs to be recompiled.  This is a "
"completely automatic process.  Also, the compiled modules are platform-"
"independent, so the same library can be shared among systems with different "
"architectures."
msgstr ""
"Python kontrollerar källans ändringsdatum mot den kompilerade versionen för "
"att se om den är föråldrad och behöver kompileras om.  Detta är en helt "
"automatisk process.  De kompilerade modulerna är dessutom "
"plattformsoberoende, så samma bibliotek kan delas mellan system med olika "
"arkitekturer."

#: ../../tutorial/modules.rst:229
msgid ""
"Python does not check the cache in two circumstances.  First, it always "
"recompiles and does not store the result for the module that's loaded "
"directly from the command line.  Second, it does not check the cache if "
"there is no source module.  To support a non-source (compiled only) "
"distribution, the compiled module must be in the source directory, and there"
" must not be a source module."
msgstr ""
"Python kontrollerar inte cacheminnet under två omständigheter.  För det "
"första kompilerar den alltid om och lagrar inte resultatet för den modul som"
" laddas direkt från kommandoraden.  För det andra kontrolleras inte "
"cacheminnet om det inte finns någon källmodul.  För att stödja en "
"distribution utan källkod (endast kompilerad) måste den kompilerade modulen "
"finnas i källkatalogen och det får inte finnas någon källkodsmodul."

#: ../../tutorial/modules.rst:236
msgid "Some tips for experts:"
msgstr "Några tips för experter:"

#: ../../tutorial/modules.rst:238
msgid ""
"You can use the :option:`-O` or :option:`-OO` switches on the Python command"
" to reduce the size of a compiled module.  The ``-O`` switch removes assert "
"statements, the ``-OO`` switch removes both assert statements and __doc__ "
"strings.  Since some programs may rely on having these available, you should"
" only use this option if you know what you're doing.  \"Optimized\" modules "
"have an ``opt-`` tag and are usually smaller.  Future releases may change "
"the effects of optimization."
msgstr ""
"Du kan använda switcharna :option:`-O` eller :option:`-OO` på Python-"
"kommandot för att minska storleken på en kompilerad modul.  Med ``-O`` tas "
"assert-satser bort, med ``-OO`` tas både assert-satser och __doc__-strängar "
"bort.  Eftersom vissa program kan vara beroende av att ha dessa "
"tillgängliga, bör du bara använda det här alternativet om du vet vad du gör."
"  \"Optimerade\" moduler har taggen ``opt-`` och är vanligtvis mindre.  "
"Framtida utgåvor kan ändra effekterna av optimeringen."

#: ../../tutorial/modules.rst:246
msgid ""
"A program doesn't run any faster when it is read from a ``.pyc`` file than "
"when it is read from a ``.py`` file; the only thing that's faster about "
"``.pyc`` files is the speed with which they are loaded."
msgstr ""
"Ett program körs inte snabbare när det läses från en ``.pyc``-fil än när det"
" läses från en ``.py``-fil; det enda som är snabbare med ``.pyc``-filer är "
"den hastighet med vilken de laddas."

#: ../../tutorial/modules.rst:250
msgid ""
"The module :mod:`compileall` can create .pyc files for all modules in a "
"directory."
msgstr ""
"Modulen :mod:`compileall` kan skapa .pyc-filer för alla moduler i en "
"katalog."

#: ../../tutorial/modules.rst:253
msgid ""
"There is more detail on this process, including a flow chart of the "
"decisions, in :pep:`3147`."
msgstr ""
"Det finns mer information om denna process, inklusive ett flödesschema över "
"besluten, i :pep:`3147`."

#: ../../tutorial/modules.rst:260
msgid "Standard Modules"
msgstr "Standardmoduler"

#: ../../tutorial/modules.rst:264
msgid ""
"Python comes with a library of standard modules, described in a separate "
"document, the Python Library Reference (\"Library Reference\" hereafter).  "
"Some modules are built into the interpreter; these provide access to "
"operations that are not part of the core of the language but are "
"nevertheless built in, either for efficiency or to provide access to "
"operating system primitives such as system calls.  The set of such modules "
"is a configuration option which also depends on the underlying platform.  "
"For example, the :mod:`winreg` module is only provided on Windows systems. "
"One particular module deserves some attention: :mod:`sys`, which is built "
"into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` "
"define the strings used as primary and secondary prompts::"
msgstr ""
"Python levereras med ett bibliotek av standardmoduler, som beskrivs i ett "
"separat dokument, Python Library Reference (\"Library Reference\" "
"hädanefter).  Vissa moduler är inbyggda i tolken; dessa ger tillgång till "
"operationer som inte är en del av kärnan i språket men som ändå är inbyggda,"
" antingen för effektivitet eller för att ge tillgång till operativsystemets "
"primitiver såsom systemanrop.  Uppsättningen av sådana moduler är ett "
"konfigurationsalternativ som också beror på den underliggande plattformen.  "
"Modulen :mod:`winreg` finns till exempel bara på Windows-system. En särskild"
" modul förtjänar lite uppmärksamhet: :mod:`sys`, som är inbyggd i alla "
"Python-tolkar.  Variablerna ``sys.ps1`` och ``sys.ps2`` definierar de "
"strängar som används som primär och sekundär uppmaning::"

#: ../../tutorial/modules.rst:287
msgid ""
"These two variables are only defined if the interpreter is in interactive "
"mode."
msgstr ""
"Dessa två variabler definieras endast om tolken befinner sig i interaktivt "
"läge."

#: ../../tutorial/modules.rst:289
msgid ""
"The variable ``sys.path`` is a list of strings that determines the "
"interpreter's search path for modules. It is initialized to a default path "
"taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in"
" default if :envvar:`PYTHONPATH` is not set.  You can modify it using "
"standard list operations::"
msgstr ""
"Variabeln ``sys.path`` är en lista med strängar som bestämmer tolkens sökväg"
" för moduler. Den initialiseras till en standardsökväg som hämtas från "
"miljövariabeln :envvar:`PYTHONPATH`, eller från en inbyggd standardsökväg om"
" :envvar:`PYTHONPATH` inte är angiven.  Du kan ändra den med hjälp av "
"standard listoperationer::"

#: ../../tutorial/modules.rst:302
msgid "The :func:`dir` Function"
msgstr "Funktionen :func:`dir"

#: ../../tutorial/modules.rst:304
msgid ""
"The built-in function :func:`dir` is used to find out which names a module "
"defines.  It returns a sorted list of strings::"
msgstr ""
"Den inbyggda funktionen :func:`dir` används för att ta reda på vilka namn en"
" modul definierar.  Den returnerar en sorterad lista med strängar::"

#: ../../tutorial/modules.rst:333
msgid ""
"Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr ""
"Utan argument listar :func:`dir` de namn som du har definierat för "
"närvarande::"

#: ../../tutorial/modules.rst:341
msgid ""
"Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""
"Observera att den listar alla typer av namn: variabler, moduler, funktioner "
"etc."

#: ../../tutorial/modules.rst:345
msgid ""
":func:`dir` does not list the names of built-in functions and variables.  If"
" you want a list of those, they are defined in the standard module "
":mod:`builtins`::"
msgstr ""
":func:`dir` listar inte namnen på inbyggda funktioner och variabler.  Om du "
"vill ha en lista över dessa finns de definierade i standardmodulen "
":mod:`builtins`::"

#: ../../tutorial/modules.rst:384
msgid "Packages"
msgstr "Paket"

#: ../../tutorial/modules.rst:386
msgid ""
"Packages are a way of structuring Python's module namespace by using "
"\"dotted module names\".  For example, the module name :mod:`A.B` designates"
" a submodule named ``B`` in a package named ``A``.  Just like the use of "
"modules saves the authors of different modules from having to worry about "
"each other's global variable names, the use of dotted module names saves the"
" authors of multi-module packages like NumPy or Pillow from having to worry "
"about each other's module names."
msgstr ""

#: ../../tutorial/modules.rst:394
msgid ""
"Suppose you want to design a collection of modules (a \"package\") for the "
"uniform handling of sound files and sound data.  There are many different "
"sound file formats (usually recognized by their extension, for example: "
":file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and "
"maintain a growing collection of modules for the conversion between the "
"various file formats. There are also many different operations you might "
"want to perform on sound data (such as mixing, adding echo, applying an "
"equalizer function, creating an artificial stereo effect), so in addition "
"you will be writing a never-ending stream of modules to perform these "
"operations.  Here's a possible structure for your package (expressed in "
"terms of a hierarchical filesystem):"
msgstr ""
"Anta att du vill utforma en samling moduler (ett \"paket\") för enhetlig "
"hantering av ljudfiler och ljuddata.  Det finns många olika ljudfilformat "
"(som vanligtvis känns igen på filtillägget, t.ex. :file:`.wav`, "
":file:`.aiff`, :file:`.au`), så du kan behöva skapa och underhålla en "
"växande samling moduler för konvertering mellan olika filformat. Det finns "
"också många olika operationer som du kan vilja utföra på ljuddata (t.ex. "
"mixa, lägga till eko, använda en equalizerfunktion, skapa en artificiell "
"stereoeffekt), så du kommer dessutom att skriva en aldrig sinande ström av "
"moduler för att utföra dessa operationer.  Här är en möjlig struktur för "
"ditt paket (uttryckt i termer av ett hierarkiskt filsystem):"

#: ../../tutorial/modules.rst:431
msgid ""
"When importing the package, Python searches through the directories on "
"``sys.path`` looking for the package subdirectory."
msgstr ""
"Vid import av paketet söker Python igenom katalogerna på ``sys.path`` och "
"letar efter paketets underkatalog."

#: ../../tutorial/modules.rst:434
msgid ""
"The :file:`__init__.py` files are required to make Python treat directories "
"containing the file as packages.  This prevents directories with a common "
"name, such as ``string``, unintentionally hiding valid modules that occur "
"later on the module search path. In the simplest case, :file:`__init__.py` "
"can just be an empty file, but it can also execute initialization code for "
"the package or set the ``__all__`` variable, described later."
msgstr ""

#: ../../tutorial/modules.rst:441
msgid ""
"Users of the package can import individual modules from the package, for "
"example::"
msgstr ""
"Användare av paketet kan importera enskilda moduler från paketet, till "
"exempel::"

#: ../../tutorial/modules.rst:446
msgid ""
"This loads the submodule :mod:`sound.effects.echo`.  It must be referenced "
"with its full name. ::"
msgstr ""

#: ../../tutorial/modules.rst:451
msgid "An alternative way of importing the submodule is::"
msgstr "Ett alternativt sätt att importera undermodulen är::"

#: ../../tutorial/modules.rst:455
msgid ""
"This also loads the submodule :mod:`echo`, and makes it available without "
"its package prefix, so it can be used as follows::"
msgstr ""

#: ../../tutorial/modules.rst:460
msgid ""
"Yet another variation is to import the desired function or variable "
"directly::"
msgstr ""
"Ytterligare en variant är att importera den önskade funktionen eller "
"variabeln direkt::"

#: ../../tutorial/modules.rst:464
msgid ""
"Again, this loads the submodule :mod:`echo`, but this makes its function "
":func:`echofilter` directly available::"
msgstr ""

#: ../../tutorial/modules.rst:469
msgid ""
"Note that when using ``from package import item``, the item can be either a "
"submodule (or subpackage) of the package, or some  other name defined in the"
" package, like a function, class or variable.  The ``import`` statement "
"first tests whether the item is defined in the package; if not, it assumes "
"it is a module and attempts to load it.  If it fails to find it, an "
":exc:`ImportError` exception is raised."
msgstr ""
"Observera att när du använder ``from package import item`` kan objektet vara"
" antingen en undermodul (eller ett underpaket) i paketet eller något annat "
"namn som definieras i paketet, t.ex. en funktion, klass eller variabel.  "
"Satsen ``import`` testar först om objektet är definierat i paketet; om inte,"
" antar den att det är en modul och försöker ladda den.  Om den inte hittar "
"den, utlöses ett :exc:`ImportError`-undantag."

#: ../../tutorial/modules.rst:476
msgid ""
"Contrarily, when using syntax like ``import item.subitem.subsubitem``, each "
"item except for the last must be a package; the last item can be a module or"
" a package but can't be a class or function or variable defined in the "
"previous item."
msgstr ""
"Om man däremot använder en syntax som ``import item.subitem.subsubitem`` "
"måste varje objekt utom det sista vara ett paket; det sista objektet kan "
"vara en modul eller ett paket men kan inte vara en klass, funktion eller "
"variabel som definieras i det föregående objektet."

#: ../../tutorial/modules.rst:485
msgid "Importing \\* From a Package"
msgstr "Importera \\* från ett paket"

#: ../../tutorial/modules.rst:489
msgid ""
"Now what happens when the user writes ``from sound.effects import *``?  "
"Ideally, one would hope that this somehow goes out to the filesystem, finds "
"which submodules are present in the package, and imports them all.  This "
"could take a long time and importing sub-modules might have unwanted side-"
"effects that should only happen when the sub-module is explicitly imported."
msgstr ""
"Vad händer nu när användaren skriver ``from sound.effects import *``?  "
"Idealiskt sett skulle man hoppas att detta på något sätt går ut i "
"filsystemet, hittar vilka undermoduler som finns i paketet och importerar "
"dem alla.  Detta kan ta lång tid och import av undermoduler kan ha oönskade "
"bieffekter som bara bör ske när undermodulen uttryckligen importeras."

#: ../../tutorial/modules.rst:495
msgid ""
"The only solution is for the package author to provide an explicit index of "
"the package.  The :keyword:`import` statement uses the following convention:"
" if a package's :file:`__init__.py` code defines a list named ``__all__``, "
"it is taken to be the list of module names that should be imported when "
"``from package import *`` is encountered.  It is up to the package author to"
" keep this list up-to-date when a new version of the package is released.  "
"Package authors may also decide not to support it, if they don't see a use "
"for importing \\* from their package.  For example, the file "
":file:`sound/effects/__init__.py` could contain the following code::"
msgstr ""
"Den enda lösningen är att paketets författare tillhandahåller ett explicit "
"index för paketet.  Satsen :keyword:`import` använder följande konvention: "
"om ett pakets kod :file:`__init__.py` definierar en lista med namnet "
"``__all__``, anses den vara listan över modulnamn som ska importeras när "
"``from package import *`` påträffas.  Det är upp till paketets författare "
"att hålla denna lista uppdaterad när en ny version av paketet släpps.  "
"Paketförfattare kan också besluta att inte stödja det, om de inte ser någon "
"användning för att importera \\* från sitt paket.  Till exempel kan filen "
":file:`sound/effects/__init__.py` innehålla följande kod::"

#: ../../tutorial/modules.rst:507
msgid ""
"This would mean that ``from sound.effects import *`` would import the three "
"named submodules of the :mod:`sound.effects` package."
msgstr ""

#: ../../tutorial/modules.rst:510
msgid ""
"If ``__all__`` is not defined, the statement ``from sound.effects import *``"
" does *not* import all submodules from the package :mod:`sound.effects` into"
" the current namespace; it only ensures that the package "
":mod:`sound.effects` has been imported (possibly running any initialization "
"code in :file:`__init__.py`) and then imports whatever names are defined in "
"the package.  This includes any names defined (and submodules explicitly "
"loaded) by :file:`__init__.py`.  It also includes any submodules of the "
"package that were explicitly loaded by previous :keyword:`import` "
"statements.  Consider this code::"
msgstr ""

#: ../../tutorial/modules.rst:523
msgid ""
"In this example, the :mod:`echo` and :mod:`surround` modules are imported in"
" the current namespace because they are defined in the :mod:`sound.effects` "
"package when the ``from...import`` statement is executed.  (This also works "
"when ``__all__`` is defined.)"
msgstr ""

#: ../../tutorial/modules.rst:528
msgid ""
"Although certain modules are designed to export only names that follow "
"certain patterns when you use ``import *``, it is still considered bad "
"practice in production code."
msgstr ""
"Även om vissa moduler är utformade för att endast exportera namn som följer "
"vissa mönster när du använder ``import *``, anses det fortfarande vara dålig"
" praxis i produktionskod."

#: ../../tutorial/modules.rst:532
msgid ""
"Remember, there is nothing wrong with using ``from package import "
"specific_submodule``!  In fact, this is the recommended notation unless the "
"importing module needs to use submodules with the same name from different "
"packages."
msgstr ""
"Kom ihåg att det inte är något fel med att använda ``from package import "
"specific_submodule``!  I själva verket är detta den rekommenderade "
"notationen om inte den importerande modulen behöver använda undermoduler med"
" samma namn från olika paket."

#: ../../tutorial/modules.rst:539
msgid "Intra-package References"
msgstr "Referenser inom förpackningen"

#: ../../tutorial/modules.rst:541
msgid ""
"When packages are structured into subpackages (as with the :mod:`sound` "
"package in the example), you can use absolute imports to refer to submodules"
" of siblings packages.  For example, if the module "
":mod:`sound.filters.vocoder` needs to use the :mod:`echo` module in the "
":mod:`sound.effects` package, it can use ``from sound.effects import echo``."
msgstr ""

#: ../../tutorial/modules.rst:547
msgid ""
"You can also write relative imports, with the ``from module import name`` "
"form of import statement.  These imports use leading dots to indicate the "
"current and parent packages involved in the relative import.  From the "
":mod:`surround` module for example, you might use::"
msgstr ""

#: ../../tutorial/modules.rst:556
msgid ""
"Note that relative imports are based on the name of the current module.  "
"Since the name of the main module is always ``\"__main__\"``, modules "
"intended for use as the main module of a Python application must always use "
"absolute imports."
msgstr ""

#: ../../tutorial/modules.rst:562
msgid "Packages in Multiple Directories"
msgstr "Paket i flera kataloger"

#: ../../tutorial/modules.rst:564
msgid ""
"Packages support one more special attribute, :attr:`__path__`.  This is "
"initialized to be a list containing the name of the directory holding the "
"package's :file:`__init__.py` before the code in that file is executed.  "
"This variable can be modified; doing so affects future searches for modules "
"and subpackages contained in the package."
msgstr ""

#: ../../tutorial/modules.rst:570
msgid ""
"While this feature is not often needed, it can be used to extend the set of "
"modules found in a package."
msgstr ""
"Den här funktionen behövs inte ofta, men den kan användas för att utöka "
"uppsättningen moduler i ett paket."

#: ../../tutorial/modules.rst:575
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../tutorial/modules.rst:576
msgid ""
"In fact function definitions are also 'statements' that are 'executed'; the "
"execution of a module-level function definition enters the function name in "
"the module's global symbol table."
msgstr ""
