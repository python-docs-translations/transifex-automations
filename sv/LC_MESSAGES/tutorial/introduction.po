# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-25 17:21+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "En informell introduktion till Python"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears;"
" lines that do not begin with a prompt are output from the interpreter. Note"
" that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears;"
" lines that do not begin with a prompt are output from the interpreter. Note"
" that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."

#: ../../tutorial/introduction.rst:16
msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""

#: ../../tutorial/introduction.rst:23
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character,"
" ``#``, and extend to the end of the physical line.  A comment may appear at"
" the start of a line or following whitespace or code, but not within a "
"string literal.  A hash character within a string literal is just a hash "
"character. Since comments are to clarify code and are not interpreted by "
"Python, they may be omitted when typing in examples."
msgstr ""
"Många av exemplen i den här handboken, även de som skrivs in i den "
"interaktiva prompten, innehåller kommentarer.  Kommentarer i Python börjar "
"med hashtecknet, ``#``, och sträcker sig till slutet av den fysiska raden.  "
"En kommentar kan förekomma i början av en rad eller efter blanksteg eller "
"kod, men inte inom en stränglitteral.  Ett hash-tecken inom en stränglitual "
"är bara ett hash-tecken. Eftersom kommentarer är till för att förtydliga "
"koden och inte tolkas av Python, kan de utelämnas när du skriver in exempel."

#: ../../tutorial/introduction.rst:31
msgid "Some examples::"
msgstr "Några exempel::"

#: ../../tutorial/introduction.rst:42
msgid "Using Python as a Calculator"
msgstr "Använda Python som kalkylator"

#: ../../tutorial/introduction.rst:44
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"

#: ../../tutorial/introduction.rst:51
msgid "Numbers"
msgstr "Nummer"

#: ../../tutorial/introduction.rst:53
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""

#: ../../tutorial/introduction.rst:68
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type "
":class:`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Heltalen (t.ex. ``2``, ``4``, ``20``) har typen :class:`int`, de med en "
"bråkdel (t.ex. ``5,0``, ``1,6``) har typen :class:`float`.  Vi kommer att se"
" mer om numeriska typer senare i handledningen."

#: ../../tutorial/introduction.rst:72
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"Division (``/``) returnerar alltid en float.  För att göra :term:`floor "
"division` och få ett heltalsresultat kan du använda operatorn ``//``; för "
"att beräkna resten kan du använda ``%``::"

#: ../../tutorial/introduction.rst:86
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"Med Python är det möjligt att använda operatorn ``**`` för att beräkna "
"potenser [#]_::"

#: ../../tutorial/introduction.rst:93
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"Likhetstecknet (``=``) används för att tilldela en variabel ett värde. "
"Därefter visas inget resultat före nästa interaktiva prompt::"

#: ../../tutorial/introduction.rst:101
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Om en variabel inte är \"definierad\" (tilldelad ett värde) får du ett "
"felmeddelande när du försöker använda den::"

#: ../../tutorial/introduction.rst:109
msgid ""
"There is full support for floating point; operators with mixed type operands"
" convert the integer operand to floating point::"
msgstr ""
"Det finns fullt stöd för flyttal; operatorer med operander av blandad typ "
"konverterar heltalsoperanden till flyttal::"

#: ../../tutorial/introduction.rst:115
msgid ""
"In interactive mode, the last printed expression is assigned to the variable"
" ``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"I interaktivt läge tilldelas det senast utskrivna uttrycket till variabeln "
"``_``.  Detta innebär att när du använder Python som en skrivbordsräknare, "
"är det något lättare att fortsätta beräkningar, till exempel::"

#: ../../tutorial/introduction.rst:128
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with"
" the same name masking the built-in variable with its magic behavior."
msgstr ""
"Denna variabel bör behandlas som skrivskyddad av användaren.  Tilldela inte "
"uttryckligen ett värde till den --- du skulle skapa en oberoende lokal "
"variabel med samma namn som maskerar den inbyggda variabeln med sitt magiska"
" beteende."

#: ../../tutorial/introduction.rst:132
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`. Python also has built-in support for "
":ref:`complex numbers <typesnumeric>`, and uses the ``j`` or ``J`` suffix to"
" indicate the imaginary part (e.g. ``3+5j``)."
msgstr ""
"Förutom :class:`int` och :class:`float` har Python stöd för andra typer av "
"tal, till exempel :class:`~decimal.Decimal` och "
":class:`~fractions.Fraction`. Python har också inbyggt stöd för "
":ref:`komplexa tal <typesnumeric>`, och använder suffixet ``j`` eller ``J`` "
"för att ange den imaginära delen (t.ex. ``3+5j``)."

#: ../../tutorial/introduction.rst:142
msgid "Strings"
msgstr "Strängar"

#: ../../tutorial/introduction.rst:144
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""

#: ../../tutorial/introduction.rst:162
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes"
" look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""

#: ../../tutorial/introduction.rst:182
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special"
" characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Om du inte vill att tecken som inleds med ``\\`` ska tolkas som "
"specialtecken kan du använda *raw strings* genom att lägga till ett ``r`` "
"före det första citatet::"

#: ../../tutorial/introduction.rst:192
msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""
"Det finns en subtil aspekt av råa strängar: en rå sträng får inte sluta med "
"ett udda antal ``\\``\\-tecken; se :ref:`Frågor och svar-artikeln <faq-"
"programming-raw-string-backslash>` för mer information och lösningar."

#: ../../tutorial/introduction.rst:197
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\``"
" at the end of the line.  The following example::"
msgstr ""

#: ../../tutorial/introduction.rst:208
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""

#: ../../tutorial/introduction.rst:216
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"Strängar kan konkateneras (sammanfogas) med operatorn ``+`` och upprepas med"
" ``*``::"

#: ../../tutorial/introduction.rst:223
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Två eller flera *stränglitteraler* (dvs. de som är inneslutna mellan "
"citattecken) bredvid varandra konkateneras automatiskt. ::"

#: ../../tutorial/introduction.rst:229
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"Denna funktion är särskilt användbar när du vill bryta långa strängar::"

#: ../../tutorial/introduction.rst:236
msgid ""
"This only works with two literals though, not with variables or "
"expressions::"
msgstr ""
"Detta fungerar dock bara med två literaler, inte med variabler eller "
"uttryck::"

#: ../../tutorial/introduction.rst:250
msgid ""
"If you want to concatenate variables or a variable and a literal, use "
"``+``::"
msgstr ""
"Om du vill sammanfoga variabler eller en variabel och en bokstav, använd "
"``+``::"

#: ../../tutorial/introduction.rst:255
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string"
" of size one::"
msgstr ""
"Strängar kan *indexeras* (subskriberas), varvid det första tecknet har index"
" 0. Det finns ingen separat teckentyp, utan ett tecken är helt enkelt en "
"sträng av storleken ett::"

#: ../../tutorial/introduction.rst:265
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr "Index kan också vara negativa tal, för att börja räkna från höger::"

#: ../../tutorial/introduction.rst:274
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Observera att eftersom -0 är samma sak som 0, börjar negativa index från -1."

#: ../../tutorial/introduction.rst:276
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""

#: ../../tutorial/introduction.rst:284
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero,"
" an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Slice-index har användbara standardvärden; ett utelämnat första index har "
"standardvärdet noll, ett utelämnat andra index har standardvärdet storleken "
"på den sträng som ska skivas:"

#: ../../tutorial/introduction.rst:294
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Notera att början alltid är inkluderad och slutet alltid exkluderat.  Detta "
"säkerställer att ``s[:i] + s[i:]`` alltid är lika med ``s``::"

#: ../../tutorial/introduction.rst:302
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Ett sätt att komma ihåg hur skivorna fungerar är att tänka på indexen som "
"pekande *mellan* tecken, med vänsterkanten på det första tecknet numrerat 0."
" Sedan har högerkanten på det sista tecknet i en sträng med *n* tecken index"
" *n*, till exempel::"

#: ../../tutorial/introduction.rst:313
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and"
" *j*, respectively."
msgstr ""
"Den första talraden anger positionen för indexen 0...6 i strängen; den andra"
" talraden anger motsvarande negativa index. Skivan från *i* till *j* består "
"av alla tecken mellan kanterna märkta *i* respektive *j*."

#: ../../tutorial/introduction.rst:318
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"För icke-negativa index är längden på en skiva skillnaden mellan indexen, om"
" båda är inom gränserna.  Till exempel är längden på ``ord[1:3]`` 2."

#: ../../tutorial/introduction.rst:322
msgid "Attempting to use an index that is too large will result in an error::"
msgstr ""
"Försök att använda ett index som är för stort kommer att resultera i ett "
"felmeddelande::"

#: ../../tutorial/introduction.rst:329
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"Slice-index som ligger utanför intervallet hanteras dock på ett elegant sätt"
" när de används för slicing::"

#: ../../tutorial/introduction.rst:337
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"Python-strängar kan inte ändras --- de är :term:`immutable`. Därför "
"resulterar tilldelning till en indexerad position i strängen i ett fel::"

#: ../../tutorial/introduction.rst:349
msgid "If you need a different string, you should create a new one::"
msgstr "Om du behöver en annan sträng ska du skapa en ny::"

#: ../../tutorial/introduction.rst:356
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "Den inbyggda funktionen :func:`len` returnerar längden på en sträng::"

#: ../../tutorial/introduction.rst:367
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../tutorial/introduction.rst:366
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"Strängar är exempel på *sekvenstyper* och stöder de vanliga operationer som "
"stöds av sådana typer."

#: ../../tutorial/introduction.rst:371
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../tutorial/introduction.rst:370
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"Strängar har stöd för ett stort antal metoder för grundläggande omvandlingar"
" och sökning."

#: ../../tutorial/introduction.rst:374
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: ../../tutorial/introduction.rst:374
msgid "String literals that have embedded expressions."
msgstr "Stränglitteraler som har inbäddade uttryck."

#: ../../tutorial/introduction.rst:377
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../tutorial/introduction.rst:377
msgid "Information about string formatting with :meth:`str.format`."
msgstr "Information om strängformatering med :meth:`str.format`."

#: ../../tutorial/introduction.rst:380
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

#: ../../tutorial/introduction.rst:380
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"De gamla formateringsoperationerna som används när strängar är den vänstra "
"operanden i operatorn ``%`` beskrivs mer i detalj här."

#: ../../tutorial/introduction.rst:387
msgid "Lists"
msgstr "Listor"

#: ../../tutorial/introduction.rst:389
msgid ""
"Python knows a number of *compound* data types, used to group together other"
" values.  The most versatile is the *list*, which can be written as a list "
"of comma-separated values (items) between square brackets.  Lists might "
"contain items of different types, but usually the items all have the same "
"type. ::"
msgstr ""
"Python känner till ett antal *compound*-datatyper, som används för att "
"gruppera andra värden.  Den mest mångsidiga är *list*, som kan skrivas som "
"en lista med kommaseparerade värden (objekt) mellan hakparenteser.  Listor "
"kan innehålla objekt av olika typer, men vanligtvis har alla objekt samma "
"typ. ::"

#: ../../tutorial/introduction.rst:398
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"Precis som strängar (och alla andra inbyggda :term:`sequence`\\-typer) kan "
"listor indexeras och skivas:"

#: ../../tutorial/introduction.rst:408
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"Alla slice-operationer returnerar en ny lista som innehåller de begärda "
"elementen.  Detta innebär att följande slice returnerar en :ref:`skallig "
"kopia <shallow_vs_deep_copy>` av listan::"

#: ../../tutorial/introduction.rst:415
msgid "Lists also support operations like concatenation::"
msgstr "Listor stöder också operationer som konkatenering::"

#: ../../tutorial/introduction.rst:420
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"Till skillnad från strängar, som är :term:`immutable`, är listor en "
":term:`mutable` typ, dvs. det är möjligt att ändra deras innehåll::"

#: ../../tutorial/introduction.rst:430
msgid ""
"You can also add new items at the end of the list, by using the "
":meth:`~list.append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:438
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"Tilldelning till skivor är också möjlig, och detta kan till och med ändra "
"listans storlek eller rensa den helt::"

#: ../../tutorial/introduction.rst:457
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "Den inbyggda funktionen :func:`len` gäller även för listor::"

#: ../../tutorial/introduction.rst:463
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"Det är möjligt att nesta listor (skapa listor som innehåller andra listor), "
"till exempel::"

#: ../../tutorial/introduction.rst:479
msgid "First Steps Towards Programming"
msgstr "Första stegen mot programmering"

#: ../../tutorial/introduction.rst:481
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""

#: ../../tutorial/introduction.rst:501
msgid "This example introduces several new features."
msgstr "I detta exempel introduceras flera nya funktioner."

#: ../../tutorial/introduction.rst:503
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"Den första raden innehåller en *multipeltilldelning*: variablerna ``a`` och "
"``b`` får samtidigt de nya värdena 0 och 1. På den sista raden används detta"
" igen, vilket visar att uttrycken på höger sida alla utvärderas först innan "
"någon av tilldelningarna äger rum.  Uttrycken på höger sida utvärderas från "
"vänster till höger."

#: ../../tutorial/introduction.rst:509
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"Slingan :keyword:`while` körs så länge villkoret (här: ``a < 10``) förblir "
"sant.  I Python, precis som i C, är alla heltalsvärden som inte är noll "
"sanna; noll är falskt.  Villkoret kan också vara en sträng eller ett "
"listvärde, i själva verket vilken sekvens som helst; allt med en längd som "
"inte är noll är sant, tomma sekvenser är falska.  Testet som används i "
"exemplet är en enkel jämförelse.  Standardoperatorerna för jämförelser "
"skrivs på samma sätt som i C: ``<`` (mindre än), ``>`` (större än), ``==`` "
"(lika med), ``<=`` (mindre än eller lika med), ``>=`` (större än eller lika "
"med) och ``!=`` (inte lika med)."

#: ../../tutorial/introduction.rst:518
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"Slingans *brödtext* är *indragen*: indrag är Pythons sätt att gruppera "
"satser.  Vid den interaktiva prompten måste du skriva en tabb eller ett "
"mellanslag för varje indragen rad.  I praktiken kommer du att förbereda mer "
"komplicerad inmatning för Python med en textredigerare; alla anständiga "
"textredigerare har en automatisk indenteringsfunktion.  När en sammansatt "
"sats skrivs in interaktivt måste den följas av en tom rad för att visa att "
"den är klar (eftersom parsern inte kan gissa när du har skrivit den sista "
"raden).  Observera att varje rad inom ett basblock måste vara indragen lika "
"mycket."

#: ../../tutorial/introduction.rst:527
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""

#: ../../tutorial/introduction.rst:538
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"Nyckelordsargumentet *end* kan användas för att undvika ny rad efter utdata,"
" eller avsluta utdata med en annan sträng::"

#: ../../tutorial/introduction.rst:550
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../tutorial/introduction.rst:551
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted"
" as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you"
" can use ``(-3)**2``."
msgstr ""
"Eftersom ``**`` har högre prioritet än ``\\-`` kommer ``\\-3**2`` att tolkas"
" som ``\\-(3**2)`` och därmed resultera i ``\\-9``.  För att undvika detta "
"och få ``9`` kan du använda ``(-3)**2``."

#: ../../tutorial/introduction.rst:555
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"Till skillnad från andra språk har specialtecken som ``\\n`` samma betydelse"
" med både enkla (``'...'``) och dubbla (``\"...'``) citattecken. Den enda "
"skillnaden mellan de två är att inom enkla citattecken behöver du inte "
"undkomma ``\"`` (men du måste undkomma ``\\'``) och vice versa."
