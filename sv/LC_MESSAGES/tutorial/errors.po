# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 17:19+0000\n"
"PO-Revision-Date: 2025-09-22 15:58+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Fel och undantag"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Hittills har felmeddelanden inte mer än nämnts, men om du har provat "
"exemplen har du förmodligen sett några.  Det finns (minst) två typer av fel "
"som kan särskiljas: *syntaxfel* och *undantag*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Syntaxfel"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Syntaxfel, även kända som parsingfel, är kanske den vanligaste typen av "
"klagomål du får medan du fortfarande lär dig Python::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Undantag"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Även om en sats eller ett uttryck är syntaktiskt korrekt kan det orsaka ett "
"fel när man försöker exekvera det. Fel som upptäcks under exekveringen "
"kallas *undantag* och är inte ovillkorligen fatala: du kommer snart att lära "
"dig hur du hanterar dem i Python-program.  De flesta undantag hanteras dock "
"inte av program, utan resulterar i felmeddelanden som visas här::"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"Den sista raden i felmeddelandet anger vad som hände. Undantag finns i olika "
"typer och typen skrivs ut som en del av meddelandet: typerna i exemplet är :"
"exc:`ZeroDivisionError`, :exc:`NameError` och :exc:`TypeError`. Den sträng "
"som skrivs ut som undantagstyp är namnet på det inbyggda undantag som "
"inträffade.  Detta gäller för alla inbyggda undantag, men behöver inte gälla "
"för användardefinierade undantag (även om det är en användbar konvention). "
"Standardnamn på undantag är inbyggda identifierare (inte reserverade "
"nyckelord)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"Resten av raden innehåller detaljer som baseras på typen av undantag och vad "
"som orsakade det."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"Den föregående delen av felmeddelandet visar det sammanhang där undantaget "
"inträffade, i form av en stack traceback. I allmänhet innehåller det en "
"stack traceback som listar källrader, men det kommer inte att visa rader som "
"läses från standardinmatningen."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` listar de inbyggda undantagen och deras innebörd."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Hantering av undantag"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"Det är möjligt att skriva program som hanterar utvalda undantag. Titta på "
"följande exempel, som ber användaren om inmatning tills ett giltigt heltal "
"har matats in, men tillåter användaren att avbryta programmet (med hjälp av :"
"kbd:`Control-C` eller vad operativsystemet stöder); notera att ett "
"användargenererat avbrott signaleras genom att lyfta :exc:"
"`KeyboardInterrupt` undantaget. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "Satsen :keyword:`try` fungerar på följande sätt."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Först utförs *försöksklausulen* (satsen eller satserna mellan nyckelorden :"
"keyword:`try` och :keyword:`except`)."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Om inget undantag inträffar hoppas *except-klausulen* över och körningen av :"
"keyword:`try`\\-satsen avslutas."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"Om ett undantag inträffar under exekveringen av :keyword:`try`\\-satsen, "
"hoppas resten av satsen över.  Om dess typ matchar undantaget som anges "
"efter nyckelordet :keyword:`except`, exekveras *except-satsen*, och sedan "
"fortsätter exekveringen efter try/except-blocket."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""

#: ../../tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"En :keyword:`try`\\-sats kan ha mer än en *except-klausul* för att ange "
"hanterare för olika undantag.  Högst en hanterare kommer att exekveras. "
"Hanterarna hanterar bara undantag som förekommer i motsvarande *try-sats*, "
"inte i andra hanterare av samma :keyword:`!try`\\-sats.  En *except-sats* "
"kan namnge flera undantag som en parentesförsedd tupel, till exempel::"

#: ../../tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""

#: ../../tutorial/errors.rst:147
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"Observera att om *except-klausulerna* hade varit omvända (med ``except B`` "
"först), skulle det ha skrivit ut B, B, B --- den första matchande *except-"
"klausulen* utlöses."

#: ../../tutorial/errors.rst:150
msgid ""
"All exceptions inherit from :exc:`BaseException`, and so it can be used to "
"serve as a wildcard. Use this with extreme caution, since it is easy to mask "
"a real programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""

#: ../../tutorial/errors.rst:169
msgid ""
"Alternatively the last except clause may omit the exception name(s), however "
"the exception value must then be retrieved from ``sys.exc_info()[1]``."
msgstr ""

#: ../../tutorial/errors.rst:172
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"Satsen :keyword:`try` ... :keyword:`except` har en valfri *else-klausul* "
"som, när den finns, måste följa efter alla *except-klausuler*.  Den är "
"användbar för kod som måste köras om *try-satsen* inte ger upphov till ett "
"undantag. Till exempel::"

#: ../../tutorial/errors.rst:186
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"Användningen av :keyword:`!else`\\-satsen är bättre än att lägga till "
"ytterligare kod till :keyword:`try`\\-satsen eftersom den undviker att av "
"misstag fånga ett undantag som inte uppstod av koden som skyddas av :keyword:"
"`!try` ... :keyword:`!except`\\-satsen."

#: ../../tutorial/errors.rst:191
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""

#: ../../tutorial/errors.rst:195
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""

#: ../../tutorial/errors.rst:219
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""

#: ../../tutorial/errors.rst:222
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the *try clause*, but also if they occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""

#: ../../tutorial/errors.rst:240
msgid "Raising Exceptions"
msgstr "Utredning av undantag"

#: ../../tutorial/errors.rst:242
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"Med :keyword:`raise` kan programmeraren tvinga ett specificerat undantag att "
"inträffa. Till exempel::"

#: ../../tutorial/errors.rst:250
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""

#: ../../tutorial/errors.rst:257
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Om du behöver avgöra om ett undantag har uppstått, men inte tänker hantera "
"det, kan du använda en enklare form av :keyword:`raise` för att upprepa "
"undantaget::"

#: ../../tutorial/errors.rst:276
msgid "Exception Chaining"
msgstr "Kedjning av undantag"

#: ../../tutorial/errors.rst:278
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""
"Om ett ohanterat undantag inträffar i ett avsnitt med :keyword:`except`, "
"kommer det undantag som hanteras att kopplas till det och inkluderas i "
"felmeddelandet::"

#: ../../tutorial/errors.rst:297
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""
"För att indikera att ett undantag är en direkt följd av ett annat, tillåter :"
"keyword:`raise`\\-satsen en valfri :keyword:`from<raise>`\\-klausul::"

#: ../../tutorial/errors.rst:303
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr ""
"Detta kan vara användbart när du transformerar undantag. Till exempel::"

#: ../../tutorial/errors.rst:324
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""
"Det gör det också möjligt att inaktivera automatisk undantagskedja med hjälp "
"av idiomet ``from None``::"

#: ../../tutorial/errors.rst:336
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr "För mer information om kedjemekanik, se :ref:`bltin-exceptions`."

#: ../../tutorial/errors.rst:342
msgid "User-defined Exceptions"
msgstr "Användardefinierade undantag"

#: ../../tutorial/errors.rst:344
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Program kan namnge sina egna undantag genom att skapa en ny undantagsklass "
"(se :ref:`tut-classes` för mer information om Python-klasser).  Undantag bör "
"typiskt härledas från klassen :exc:`Exception`, antingen direkt eller "
"indirekt."

#: ../../tutorial/errors.rst:348
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"Undantagsklasser kan definieras som gör allt som andra klasser kan göra, men "
"de är vanligtvis enkla och erbjuder ofta bara ett antal attribut som gör att "
"information om felet kan extraheras av hanterare för undantaget."

#: ../../tutorial/errors.rst:352
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"De flesta undantag definieras med namn som slutar på \"Error\", vilket "
"liknar namngivningen av standardundantagen."

#: ../../tutorial/errors.rst:355
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""

#: ../../tutorial/errors.rst:363
msgid "Defining Clean-up Actions"
msgstr "Definiera saneringsåtgärder"

#: ../../tutorial/errors.rst:365
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"Satsen :keyword:`try` har en annan valfri klausul som är avsedd att "
"definiera rensningsåtgärder som måste utföras under alla omständigheter.  "
"Till exempel::"

#: ../../tutorial/errors.rst:379
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"Om en :keyword:`finally`\\-klausul finns, kommer :keyword:`!finally`\\-"
"klausulen att utföras som den sista uppgiften innan :keyword:`try`\\-satsen "
"avslutas. Klausulen :keyword:`!finally` körs oavsett om satsen :keyword:`!"
"try` ger upphov till ett undantag eller inte. I följande punkter diskuteras "
"mer komplexa fall när ett undantag inträffar:"

#: ../../tutorial/errors.rst:385
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"Om ett undantag inträffar under exekveringen av :keyword:`!try`\\-satsen, "
"kan undantaget hanteras av en :keyword:`except`\\-sats. Om undantaget inte "
"hanteras av en :keyword:`!except`\\-sats, kommer undantaget att tas upp igen "
"efter att :keyword:`!finally`\\-satsen har exekverats."

#: ../../tutorial/errors.rst:391
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"Ett undantag kan inträffa under exekvering av en :keyword:`!except` eller :"
"keyword:`!else` klausul. Återigen, undantaget tas upp igen efter att :"
"keyword:`!finally`\\-satsen har exekverats."

#: ../../tutorial/errors.rst:395
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""

#: ../../tutorial/errors.rst:399
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"Om :keyword:`!try`\\-satsen når en :keyword:`break`\\-, :keyword:"
"`continue`\\- eller :keyword:`return`\\-sats, kommer :keyword:`!finally`\\-"
"satsen att exekveras strax före :keyword:`!break`\\-, :keyword:`!"
"continue`\\- eller :keyword:`!return`\\-satsens exekvering."

#: ../../tutorial/errors.rst:405
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""

#: ../../tutorial/errors.rst:411
msgid "For example::"
msgstr "Till exempel::"

#: ../../tutorial/errors.rst:422
msgid "A more complicated example::"
msgstr "Ett mer komplicerat exempel::"

#: ../../tutorial/errors.rst:447
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Som du kan se utförs :keyword:`finally`\\-satsen i vilket fall som helst.  "
"Det :exc:`TypeError` som uppstår när två strängar delas upp hanteras inte "
"av :keyword:`except`\\-satsen och uppstår därför igen efter att :keyword:`!"
"finally`\\-satsen har exekverats."

#: ../../tutorial/errors.rst:452
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"I verkliga tillämpningar är klausulen :keyword:`finally` användbar för att "
"frigöra externa resurser (t.ex. filer eller nätverksanslutningar), oavsett "
"om användningen av resursen var framgångsrik eller inte."

#: ../../tutorial/errors.rst:460
msgid "Predefined Clean-up Actions"
msgstr "Fördefinierade saneringsåtgärder"

#: ../../tutorial/errors.rst:462
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Vissa objekt definierar standardstädningsåtgärder som ska vidtas när "
"objektet inte längre behövs, oavsett om operationen som använder objektet "
"lyckades eller misslyckades. Titta på följande exempel, som försöker öppna "
"en fil och skriva ut dess innehåll på skärmen. ::"

#: ../../tutorial/errors.rst:470
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"Problemet med den här koden är att den lämnar filen öppen under en obestämd "
"tid efter att den här delen av koden har exekverats. Detta är inte ett "
"problem i enkla skript, men kan vara ett problem för större applikationer. "
"Med :keyword:`with` kan objekt som filer användas på ett sätt som "
"säkerställer att de alltid rensas upp snabbt och korrekt. ::"

#: ../../tutorial/errors.rst:480
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Efter att satsen har utförts stängs alltid filen *f*, även om det uppstod "
"ett problem under bearbetningen av raderna. Objekt som, i likhet med filer, "
"har fördefinierade rensningsåtgärder kommer att ange detta i sin "
"dokumentation."
