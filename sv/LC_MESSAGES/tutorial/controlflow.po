# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-25 18:09+0000\n"
"PO-Revision-Date: 2025-09-22 17:56+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Fler verktyg för kontrollflöde"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr ":keyword:`!if`-satser"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Den kanske mest välkända typen av uttalande är :keyword:`if`-satsen.  Till "
"exempel::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Det kan finnas noll eller fler :keyword:`elif`-delar, och :keyword:`else`-"
"delen är valfri.  Nyckelordet ':keyword:`!elif`' är en förkortning för 'else "
"if', och är användbart för att undvika överdriven indragning.  En :keyword:`!"
"if` ... :keyword:`!elif` ... :keyword:`!elif` ... sekvens är ett substitut "
"för ``switch`` eller ``case``-satser som finns i andra språk."

#: ../../tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr ":keyword:`!for`-satser"

#: ../../tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Satsen :keyword:`for` i Python skiljer sig lite från vad du kanske är van "
"vid i C eller Pascal.  I stället för att alltid iterera över en aritmetisk "
"progression av tal (som i Pascal), eller ge användaren möjlighet att "
"definiera både iterationssteget och stoppvillkoret (som i C), itererar "
"Pythons :keyword:`!for`-sats över objekten i en sekvens (en lista eller en "
"sträng), i den ordning som de förekommer i sekvensen.  Till exempel (ingen "
"ordvits avsedd):"

#: ../../tutorial/controlflow.rst:69
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Kod som ändrar en samling samtidigt som den itererar över samma samling kan "
"vara knepig att få rätt.  Istället är det vanligtvis enklare att loopa över "
"en kopia av samlingen eller att skapa en ny samling::"

#: ../../tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr "Funktionen :func:`range"

#: ../../tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Om du behöver iterera över en sekvens av tal är den inbyggda funktionen :"
"func:`range` praktisk.  Den genererar aritmetiska progressioner::"

#: ../../tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Den angivna slutpunkten är aldrig en del av den genererade sekvensen; "
"``range(10)`` genererar 10 värden, de lagliga indexen för objekt i en "
"sekvens med längden 10.  Det är möjligt att låta intervallet börja vid ett "
"annat tal, eller att ange ett annat steg (även negativt; ibland kallas detta "
"för \"steg\")::"

#: ../../tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"För att iterera över indexen i en sekvens kan du kombinera :func:`range` "
"och :func:`len` på följande sätt::"

#: ../../tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"I de flesta sådana fall är det dock lämpligt att använda funktionen :func:"
"`enumerate`, se :ref:`tut-loopidioms`."

#: ../../tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "En märklig sak händer om man bara skriver ut ett range::"

#: ../../tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"På många sätt beter sig objektet som returneras av :func:`range` som om det "
"vore en lista, men det är det faktiskt inte. Det är ett objekt som "
"returnerar de successiva objekten i den önskade sekvensen när du itererar "
"över det, men det gör inte listan, vilket sparar utrymme."

#: ../../tutorial/controlflow.rst:142
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Vi säger att ett sådant objekt är :term:`iterable`, det vill säga lämpligt "
"som mål för funktioner och konstruktioner som förväntar sig något från "
"vilket de kan få successiva objekt tills tillgången är uttömd.  Vi har sett "
"att :keyword:`for`-satsen är en sådan konstruktion, medan ett exempel på en "
"funktion som tar en iterabel är :func:`sum`::"

#: ../../tutorial/controlflow.rst:151
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Senare kommer vi att se fler funktioner som returnerar iterabler och tar "
"iterabler som argument.  I kapitel :ref:`tut-structures`, kommer vi att "
"diskutera mer i detalj om :func:`list`."

#: ../../tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""

#: ../../tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""

#: ../../tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the iterable (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""

#: ../../tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""

#: ../../tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: ../../tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""

#: ../../tutorial/controlflow.rst:218
msgid ":keyword:`!pass` Statements"
msgstr ":keyword:`!pass`-satser"

#: ../../tutorial/controlflow.rst:220
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Satsen :keyword:`pass` gör ingenting. Det kan användas när ett uttalande "
"krävs syntaktiskt men programmet inte kräver någon åtgärd. Till exempel::"

#: ../../tutorial/controlflow.rst:227
msgid "This is commonly used for creating minimal classes::"
msgstr "Detta används ofta för att skapa minimala klasser::"

#: ../../tutorial/controlflow.rst:233
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Ett annat ställe där :keyword:`pass` kan användas är som en platshållare för "
"en funktion eller en villkorlig kropp när du arbetar med ny kod, så att du "
"kan fortsätta tänka på en mer abstrakt nivå.  Nyckelordet:`!pass` ignoreras "
"i tysthet:"

#: ../../tutorial/controlflow.rst:244
msgid "Defining Functions"
msgstr "Definiera funktioner"

#: ../../tutorial/controlflow.rst:246
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Vi kan skapa en funktion som skriver Fibonacci-serien till en godtycklig "
"gräns::"

#: ../../tutorial/controlflow.rst:266
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Nyckelordet :keyword:`def` introducerar en funktions *definition*.  Det "
"måste följas av funktionsnamnet och den parentesförsedda listan med formella "
"parametrar. De satser som bildar funktionens kropp börjar på nästa rad och "
"måste vara indragna."

#: ../../tutorial/controlflow.rst:271
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Den första satsen i funktionens kropp kan eventuellt vara en stränglitteral; "
"denna stränglitteral är funktionens dokumentationssträng, eller :dfn:"
"`docstring`. (Mer om docstrings finns i avsnittet :ref:`tut-docstrings`.) "
"Det finns verktyg som använder docstrings för att automatiskt producera "
"dokumentation på nätet eller i tryck, eller för att låta användaren "
"interaktivt bläddra igenom kod; det är god praxis att inkludera docstrings i "
"kod som du skriver, så gör det till en vana."

#: ../../tutorial/controlflow.rst:278
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"När en funktion *exekveras* introduceras en ny symboltabell som används för "
"funktionens lokala variabler.  Närmare bestämt lagrar alla "
"variabeltilldelningar i en funktion värdet i den lokala symboltabellen, "
"medan variabelreferenser först letar i den lokala symboltabellen, sedan i de "
"lokala symboltabellerna för omslutande funktioner, sedan i den globala "
"symboltabellen och slutligen i tabellen med inbyggda namn. Globala variabler "
"och variabler i inneslutande funktioner kan alltså inte direkt tilldelas ett "
"värde inom en funktion (såvida inte globala variabler namnges i en :keyword:"
"`global`-sats eller variabler i inneslutande funktioner namnges i en :"
"keyword:`nonlocal`-sats), men de kan refereras."

#: ../../tutorial/controlflow.rst:289
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"De faktiska parametrarna (argumenten) till ett funktionsanrop introduceras i "
"den lokala symboltabellen för den anropade funktionen när den anropas; "
"argument skickas alltså med *call by value* (där *värdet* alltid är en "
"*referens* till ett objekt, inte objektets värde). [När en funktion anropar "
"en annan funktion, eller anropar sig själv rekursivt, skapas en ny lokal "
"symboltabell för det anropet."

#: ../../tutorial/controlflow.rst:296
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"En funktionsdefinition associerar funktionsnamnet med funktionsobjektet i "
"den aktuella symboltabellen.  Tolken känner igen det objekt som pekas ut av "
"namnet som en användardefinierad funktion.  Andra namn kan också peka på "
"samma funktionsobjekt och kan också användas för att komma åt funktionen::"

#: ../../tutorial/controlflow.rst:307
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Om du kommer från andra språk kanske du invänder att ``fib`` inte är en "
"funktion utan en procedur eftersom den inte returnerar något värde.  Faktum "
"är att även funktioner utan :keyword:`return`-sats returnerar ett värde, om "
"än ett ganska tråkigt sådant.  Detta värde kallas ``None`` (det är ett "
"inbyggt namn).  Att skriva värdet ``None`` undertrycks normalt av tolken om "
"det skulle vara det enda värde som skrivs. Du kan se det om du verkligen "
"vill med hjälp av :func:`print`::"

#: ../../tutorial/controlflow.rst:318
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Det är enkelt att skriva en funktion som returnerar en lista med siffrorna i "
"Fibonacci-serien, istället för att skriva ut den::"

#: ../../tutorial/controlflow.rst:334
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""
"I det här exemplet demonstreras som vanligt några nya Python-funktioner:"

#: ../../tutorial/controlflow.rst:336
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Satsen :keyword:`return` returnerar med ett värde från en funktion. :keyword:"
"`!return` utan ett uttrycksargument returnerar ``None``. Att falla av i "
"slutet av en funktion returnerar också ``None``."

#: ../../tutorial/controlflow.rst:340
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""

#: ../../tutorial/controlflow.rst:355
msgid "More on Defining Functions"
msgstr "Mer om att definiera funktioner"

#: ../../tutorial/controlflow.rst:357
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Det är också möjligt att definiera funktioner med ett variabelt antal "
"argument. Det finns tre former som kan kombineras."

#: ../../tutorial/controlflow.rst:364
msgid "Default Argument Values"
msgstr "Standardargumentvärden"

#: ../../tutorial/controlflow.rst:366
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Den mest användbara formen är att ange ett standardvärde för ett eller flera "
"argument. Detta skapar en funktion som kan anropas med färre argument än vad "
"den är definierad att tillåta.  Till exempel::"

#: ../../tutorial/controlflow.rst:382
msgid "This function can be called in several ways:"
msgstr "Denna funktion kan anropas på flera olika sätt:"

#: ../../tutorial/controlflow.rst:384
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"ger bara det obligatoriska argumentet: ``ask_ok('Vill du verkligen sluta?')``"

#: ../../tutorial/controlflow.rst:386
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"som ger ett av de valfria argumenten: ``ask_ok('OK att skriva över filen?', "
"2)```"

#: ../../tutorial/controlflow.rst:388
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"eller till och med ge alla argument: ``ask_ok('OK att skriva över filen?', "
"2, 'Kom igen, bara ja eller nej!')``"

#: ../../tutorial/controlflow.rst:391
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"I detta exempel introduceras också nyckelordet :keyword:`in`. Detta testar "
"om en sekvens innehåller ett visst värde eller inte."

#: ../../tutorial/controlflow.rst:394
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Standardvärdena utvärderas vid tidpunkten för funktionsdefinitionen i det "
"*definierande* omfånget, så att ::"

#: ../../tutorial/controlflow.rst:405
msgid "will print ``5``."
msgstr "kommer att skriva ut ``5``."

#: ../../tutorial/controlflow.rst:407
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Viktig varning:** Standardvärdet utvärderas bara en gång. Detta gör "
"skillnad när standardvärdet är ett föränderligt objekt, t.ex. en lista, en "
"ordbok eller instanser av de flesta klasser.  Följande funktion ackumulerar "
"t.ex. de argument som skickas till den vid efterföljande anrop::"

#: ../../tutorial/controlflow.rst:420
msgid "This will print ::"
msgstr "Detta kommer att skrivas ut ::"

#: ../../tutorial/controlflow.rst:426
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Om du inte vill att standardvärdet ska delas mellan efterföljande anrop kan "
"du istället skriva funktionen så här::"

#: ../../tutorial/controlflow.rst:439
msgid "Keyword Arguments"
msgstr "Argument för nyckelord"

#: ../../tutorial/controlflow.rst:441
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Funktioner kan också anropas med :term:`nyckelordsargument <keyword "
"argument>` av formen ``kwarg=värde``.  Till exempel kan följande funktion::"

#: ../../tutorial/controlflow.rst:450
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"accepterar ett obligatoriskt argument (``voltage``) och tre valfria argument "
"(``state``, ``action`` och ``type``).  Denna funktion kan anropas på något "
"av följande sätt::"

#: ../../tutorial/controlflow.rst:461
msgid "but all the following calls would be invalid::"
msgstr "men alla följande anrop skulle vara ogiltiga::"

#: ../../tutorial/controlflow.rst:468
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"I ett funktionsanrop måste nyckelordsargument följa efter positionsargument. "
"Alla nyckelordsargument som skickas måste matcha ett av de argument som "
"accepteras av funktionen (t.ex. ``actor`` är inte ett giltigt argument för "
"funktionen ``parrot``), och deras ordning är inte viktig.  Detta inkluderar "
"även icke valfria argument (t.ex. ``parrot(voltage=1000)`` är också "
"giltigt). Inget argument får ta emot ett värde mer än en gång. Här är ett "
"exempel som misslyckas på grund av denna begränsning::"

#: ../../tutorial/controlflow.rst:484
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"När en slutlig formell parameter av formen ``**name`` finns, får den en "
"dictionary (se :ref:`typesmapping`) som innehåller alla nyckelordsargument "
"utom de som motsvarar en formell parameter.  Detta kan kombineras med en "
"formell parameter av formen ``*name`` (beskrivs i nästa underavsnitt) som "
"tar emot en :ref:`tuple <tut-tuples>` som innehåller de positionella "
"argumenten utöver den formella parameterlistan.  (``*name`` måste förekomma "
"före ``**name``.) Om vi t.ex. definierar en funktion så här::"

#: ../../tutorial/controlflow.rst:501
msgid "It could be called like this::"
msgstr "Det skulle kunna kallas så här::"

#: ../../tutorial/controlflow.rst:509
msgid "and of course it would print:"
msgstr "och naturligtvis skulle det tryckas:"

#: ../../tutorial/controlflow.rst:522
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Observera att den ordning i vilken nyckelordsargumenten skrivs ut garanterat "
"kommer att överensstämma med den ordning i vilken de angavs i "
"funktionsanropet."

#: ../../tutorial/controlflow.rst:526
msgid "Special parameters"
msgstr "Särskilda parametrar"

#: ../../tutorial/controlflow.rst:528
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"Som standard kan argument skickas till en Python-funktion antingen genom "
"position eller uttryckligen genom nyckelord. För läsbarhet och prestanda är "
"det vettigt att begränsa hur argument kan skickas så att en utvecklare bara "
"behöver titta på funktionsdefinitionen för att avgöra om objekt skickas med "
"position, med position eller nyckelord eller med nyckelord."

#: ../../tutorial/controlflow.rst:534
msgid "A function definition may look like:"
msgstr "En funktionsdefinition kan se ut på följande sätt:"

#: ../../tutorial/controlflow.rst:545
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"där ``/`` och ``*`` är valfria. Om dessa symboler används anger de vilken "
"typ av parameter som argumenten kan skickas till funktionen med: endast "
"positionell, positionell-eller-nyckelord och endast nyckelord. "
"Nyckelordsparametrar kallas också namngivna parametrar."

#: ../../tutorial/controlflow.rst:552
msgid "Positional-or-Keyword Arguments"
msgstr "Positionerings- eller nyckelordsargument"

#: ../../tutorial/controlflow.rst:554
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Om ``/`` och ``*`` inte finns med i funktionsdefinitionen kan argument "
"skickas till en funktion genom position eller nyckelord."

#: ../../tutorial/controlflow.rst:559
msgid "Positional-Only Parameters"
msgstr "Endast positionella parametrar"

#: ../../tutorial/controlflow.rst:561
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Om man tittar på detta lite mer i detalj är det möjligt att markera vissa "
"parametrar som *positional-only*. Om *positional-only*, spelar parametrarnas "
"ordning roll, och parametrarna kan inte skickas med nyckelord. Positional-"
"only-parametrar placeras före ett ``/`` (framåtriktat snedstreck). ``/`` "
"används för att logiskt separera parametrar som endast är positionella från "
"resten av parametrarna. Om det inte finns någon ``/`` i "
"funktionsdefinitionen, finns det inga enbart positionella parametrar."

#: ../../tutorial/controlflow.rst:569
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Parametrar efter ``/`` kan vara *positionella-eller-nyckelord* eller *endast "
"nyckelord*."

#: ../../tutorial/controlflow.rst:573
msgid "Keyword-Only Arguments"
msgstr "Argument som endast innehåller nyckelord"

#: ../../tutorial/controlflow.rst:575
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"För att markera parametrar som *keyword-only*, vilket indikerar att "
"parametrarna måste skickas med nyckelordsargument, placera en ``*`` i "
"argumentlistan precis före den första *keyword-only*-parametern."

#: ../../tutorial/controlflow.rst:581
msgid "Function Examples"
msgstr "Funktion Exempel"

#: ../../tutorial/controlflow.rst:583
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Tänk på följande exempel på funktionsdefinitioner och var uppmärksam på "
"markörerna ``/`` och ``*``::"

#: ../../tutorial/controlflow.rst:599
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"Den första funktionsdefinitionen, ``standard_arg``, den mest bekanta formen, "
"lägger inga restriktioner på anropskonventionen och argument kan skickas med "
"position eller nyckelord::"

#: ../../tutorial/controlflow.rst:609
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"Den andra funktionen ``pos_only_arg`` är begränsad till att endast använda "
"positionella parametrar eftersom det finns en ``/`` i funktionsdefinitionen::"

#: ../../tutorial/controlflow.rst:620
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:631
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"Och den sista använder alla tre anropskonventionerna i samma "
"funktionsdefinition::"

#: ../../tutorial/controlflow.rst:651
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Slutligen, betrakta denna funktionsdefinition som har en potentiell "
"kollision mellan det positionella argumentet ``name`` och ``**kwds`` som har "
"``name`` som nyckel::"

#: ../../tutorial/controlflow.rst:656
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Det finns inget möjligt anrop som får den att returnera ``True`` eftersom "
"nyckelordet ``'name'`` alltid kommer att bindas till den första parametern. "
"Till exempel::"

#: ../../tutorial/controlflow.rst:665
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Men med ``/`` (endast positionella argument) är det möjligt eftersom det "
"tillåter ``namn`` som ett positionellt argument och ``'namn'`` som en nyckel "
"i nyckelordet arguments::"

#: ../../tutorial/controlflow.rst:672
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Med andra ord kan namnen på parametrar som endast är positionella användas i "
"``**kwds`` utan tvetydighet."

#: ../../tutorial/controlflow.rst:677
msgid "Recap"
msgstr "Sammanfattning"

#: ../../tutorial/controlflow.rst:679
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"Användningsfallet avgör vilka parametrar som ska användas i "
"funktionsdefinitionen::"

#: ../../tutorial/controlflow.rst:683
msgid "As guidance:"
msgstr "Som vägledning:"

#: ../../tutorial/controlflow.rst:685
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Använd positional-only om du vill att namnet på parametrarna inte ska vara "
"tillgängligt för användaren. Detta är användbart när parameternamn inte har "
"någon verklig betydelse, om du vill tvinga fram ordningen på argumenten när "
"funktionen anropas eller om du behöver ta några positionella parametrar och "
"godtyckliga nyckelord."

#: ../../tutorial/controlflow.rst:690
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Använd endast nyckelord när namnen har betydelse och funktionsdefinitionen "
"blir mer begriplig genom att vara explicit med namn eller om du vill "
"förhindra att användare förlitar sig på positionen för det argument som "
"skickas."

#: ../../tutorial/controlflow.rst:693
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"För ett API, använd endast positionell för att förhindra att API-ändringar "
"bryts om parameterns namn ändras i framtiden."

#: ../../tutorial/controlflow.rst:699
msgid "Arbitrary Argument Lists"
msgstr "Listor med godtyckliga argument"

#: ../../tutorial/controlflow.rst:704
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Slutligen, det minst använda alternativet, är att ange att en funktion kan "
"anropas med ett godtyckligt antal argument.  Dessa argument kommer att "
"paketeras i en tupel (se :ref:`tut-tuples`).  Före det variabla antalet "
"argument kan noll eller fler normala argument förekomma. ::"

#: ../../tutorial/controlflow.rst:713
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Normalt kommer dessa *variadiska* argument sist i listan över formella "
"parametrar, eftersom de samlar upp alla återstående inmatningsargument som "
"skickas till funktionen. Alla formella parametrar som förekommer efter "
"parametern ``*args`` är \"keyword-only\"-argument, vilket innebär att de "
"endast kan användas som nyckelord och inte som positionsargument. ::"

#: ../../tutorial/controlflow.rst:730
msgid "Unpacking Argument Lists"
msgstr "Uppackning av argumentlistor"

#: ../../tutorial/controlflow.rst:732
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"Den omvända situationen uppstår när argumenten redan finns i en lista eller "
"tupel men måste packas upp för ett funktionsanrop som kräver separata "
"positionsargument.  Till exempel förväntar sig den inbyggda funktionen :func:"
"`range` separata *start*- och *stop*-argument.  Om de inte finns "
"tillgängliga separat, skriv funktionsanropet med ``*`` -operatorn för att "
"packa upp argumenten ur en lista eller tupel::"

#: ../../tutorial/controlflow.rst:748
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"På samma sätt kan ordböcker leverera nyckelordsargument med ``**`` -"
"operatorn::"

#: ../../tutorial/controlflow.rst:764
msgid "Lambda Expressions"
msgstr "Lambda-uttryck"

#: ../../tutorial/controlflow.rst:766
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Små anonyma funktioner kan skapas med nyckelordet :keyword:`lambda`. Denna "
"funktion returnerar summan av sina två argument: ``lambda a, b: a+b``. "
"Lambda-funktioner kan användas överallt där funktionsobjekt krävs.  De är "
"syntaktiskt begränsade till ett enda uttryck.  Semantiskt sett är de bara "
"syntaktiskt socker för en normal funktionsdefinition.  Precis som nästlade "
"funktionsdefinitioner kan lambdafunktioner referera till variabler från det "
"scope som innehåller dem::"

#: ../../tutorial/controlflow.rst:783
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""

#: ../../tutorial/controlflow.rst:795
msgid "Documentation Strings"
msgstr "Dokumentation Strängar"

#: ../../tutorial/controlflow.rst:802
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Här följer några konventioner om innehåll och formatering av "
"dokumentationssträngar."

#: ../../tutorial/controlflow.rst:805
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Den första raden bör alltid vara en kort och koncis sammanfattning av "
"objektets syfte.  För korthetens skull bör inte objektets namn eller typ "
"anges explicit, eftersom dessa finns tillgängliga på annat sätt (utom om "
"namnet råkar vara ett verb som beskriver en funktions funktion).  Denna rad "
"ska inledas med en versal och avslutas med en punkt."

#: ../../tutorial/controlflow.rst:811
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Om det finns fler rader i dokumentationssträngen bör den andra raden vara "
"tom, så att sammanfattningen visuellt skiljs från resten av beskrivningen.  "
"De följande raderna bör vara ett eller flera stycken som beskriver objektets "
"anropskonventioner, dess bieffekter etc."

#: ../../tutorial/controlflow.rst:816
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Python-parsern tar inte bort indrag från flerradiga stränglitteraler i "
"Python, så verktyg som bearbetar dokumentation måste ta bort indrag om så "
"önskas.  Detta görs med hjälp av följande konvention. Den första icke-tomma "
"raden *efter* den första raden i strängen avgör hur mycket indrag som ska "
"göras i hela dokumentationssträngen.  (Vi kan inte använda den första raden "
"eftersom den i allmänhet ligger intill strängens inledande citattecken och "
"dess indragning därför inte syns i strängens bokstavstext)  Whitespace som "
"\"motsvarar\" detta indrag tas sedan bort från början av alla rader i "
"strängen.  Rader som är mindre indragna ska inte förekomma, men om de "
"förekommer ska alla deras ledande blanksteg tas bort.  Ekvivalens av "
"blanksteg bör testas efter expansion av tabbar (till 8 blanksteg, normalt)."

#: ../../tutorial/controlflow.rst:828
msgid "Here is an example of a multi-line docstring::"
msgstr "Här är ett exempel på en dokumentsträng med flera rader::"

#: ../../tutorial/controlflow.rst:846
msgid "Function Annotations"
msgstr "Funktionskommentarer"

#: ../../tutorial/controlflow.rst:854
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Function annotations <function>` är helt valfri metadatainformation om "
"de typer som används av användardefinierade funktioner (se :pep:`3107` och :"
"pep:`484` för mer information)."

#: ../../tutorial/controlflow.rst:858
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:880
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Kodningsstil"

#: ../../tutorial/controlflow.rst:885
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Nu när du är på väg att skriva längre, mer komplexa stycken Python är det "
"ett bra tillfälle att prata om *kodningsstil*.  De flesta språk kan skrivas "
"(eller mer kortfattat, *formateras*) i olika stilar; vissa är mer läsbara än "
"andra. Att göra det lätt för andra att läsa din kod är alltid en bra idé, "
"och att använda en trevlig kodningsstil hjälper enormt mycket för det."

#: ../../tutorial/controlflow.rst:891
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"För Python har :pep:`8` vuxit fram som den stilguide som de flesta projekt "
"följer; den främjar en mycket läsbar och tilltalande kodningsstil.  Varje "
"Python-utvecklare bör läsa den vid något tillfälle; här är de viktigaste "
"punkterna extraherade för dig:"

#: ../../tutorial/controlflow.rst:896
msgid "Use 4-space indentation, and no tabs."
msgstr "Använd 4 spaltmeters indrag och inga tabbar."

#: ../../tutorial/controlflow.rst:898
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 mellanslag är en bra kompromiss mellan litet indrag (ger större "
"häckningsdjup) och stort indrag (lättare att läsa).  Tabbar skapar "
"förvirring och är bäst att utesluta."

#: ../../tutorial/controlflow.rst:902
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Radbryt raderna så att de inte överstiger 79 tecken."

#: ../../tutorial/controlflow.rst:904
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Detta underlättar för användare med små skärmar och gör det möjligt att ha "
"flera kodfiler sida vid sida på större skärmar."

#: ../../tutorial/controlflow.rst:907
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Använd tomma rader för att separera funktioner och klasser, och större "
"kodblock inuti funktioner."

#: ../../tutorial/controlflow.rst:910
msgid "When possible, put comments on a line of their own."
msgstr "När det är möjligt, placera kommentarer på en egen rad."

#: ../../tutorial/controlflow.rst:912
msgid "Use docstrings."
msgstr "Använd docstrings."

#: ../../tutorial/controlflow.rst:914
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Använd mellanslag runt operatorer och efter kommatecken, men inte direkt "
"inuti parenteser: ``a = f(1, 2) + g(3, 4)``."

#: ../../tutorial/controlflow.rst:917
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Namnge dina klasser och funktioner på ett konsekvent sätt; konventionen är "
"att använda ``UpperCamelCase`` för klasser och "
"``lowercase_with_underscores`` för funktioner och metoder.  Använd alltid "
"``self`` som namn på det första metodargumentet (se :ref:`tut-firstclasses` "
"för mer information om klasser och metoder)."

#: ../../tutorial/controlflow.rst:922
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Använd inte avancerade kodningar om din kod är avsedd att användas i "
"internationella miljöer.  Pythons standard, UTF-8, eller till och med vanlig "
"ASCII fungerar bäst i alla fall."

#: ../../tutorial/controlflow.rst:926
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Använd inte heller icke-ASCII-tecken i identifierare om det bara finns en "
"liten risk för att personer som talar ett annat språk kommer att läsa eller "
"underhålla koden."

#: ../../tutorial/controlflow.rst:932
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../tutorial/controlflow.rst:933
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Egentligen skulle *anrop genom objektreferens* vara en bättre beskrivning, "
"eftersom om ett föränderligt objekt skickas kommer den som anropar att se "
"alla ändringar som den som anropar gör på det (objekt som infogas i en "
"lista)."
