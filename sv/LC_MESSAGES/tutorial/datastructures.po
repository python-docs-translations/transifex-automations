# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 16:35+0000\n"
"PO-Revision-Date: 2025-09-22 16:51+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr "Datastrukturer"

#: ../../tutorial/datastructures.rst:7
msgid ""
"This chapter describes some things you've learned about already in more "
"detail, and adds some new things as well."
msgstr ""
"I det här kapitlet beskrivs vissa saker som du redan har lärt dig mer "
"ingående, och några nya saker läggs till."

#: ../../tutorial/datastructures.rst:13
msgid "More on Lists"
msgstr "Mer om listor"

#: ../../tutorial/datastructures.rst:15
msgid ""
"The list data type has some more methods.  Here are all of the methods of "
"list objects:"
msgstr ""
"Datatypen list har några fler metoder.  Här är alla metoder för listobjekt:"

#: ../../tutorial/datastructures.rst:22
msgid ""
"Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``."
msgstr ""

#: ../../tutorial/datastructures.rst:28
msgid ""
"Extend the list by appending all the items from the iterable.  Equivalent to "
"``a[len(a):] = iterable``."
msgstr ""

#: ../../tutorial/datastructures.rst:35
msgid ""
"Insert an item at a given position.  The first argument is the index of the "
"element before which to insert, so ``a.insert(0, x)`` inserts at the front "
"of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""
"Infoga ett element på en given position.  Det första argumentet är indexet "
"för det element som ska infogas före, så ``a.insert(0, x)`` infogar längst "
"fram i listan, och ``a.insert(len(a), x)`` är likvärdigt med ``a.append(x)``."

#: ../../tutorial/datastructures.rst:43
msgid ""
"Remove the first item from the list whose value is equal to *x*.  It raises "
"a :exc:`ValueError` if there is no such item."
msgstr ""
"Tar bort det första objektet från listan vars värde är lika med *x*.  Det "
"ger upphov till ett :exc:`ValueError` om det inte finns något sådant objekt."

#: ../../tutorial/datastructures.rst:50
msgid ""
"Remove the item at the given position in the list, and return it.  If no "
"index is specified, ``a.pop()`` removes and returns the last item in the "
"list. It raises an :exc:`IndexError` if the list is empty or the index is "
"outside the list range."
msgstr ""
"Tar bort objektet på den angivna positionen i listan och returnerar det.  Om "
"inget index anges, tar ``a.pop()`` bort och returnerar det sista objektet i "
"listan. Den ger upphov till ett :exc:`IndexError` om listan är tom eller om "
"indexet ligger utanför listintervallet."

#: ../../tutorial/datastructures.rst:59
msgid "Remove all items from the list.  Equivalent to ``del a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:65
msgid ""
"Return zero-based index in the list of the first item whose value is equal "
"to *x*. Raises a :exc:`ValueError` if there is no such item."
msgstr ""

#: ../../tutorial/datastructures.rst:68
msgid ""
"The optional arguments *start* and *end* are interpreted as in the slice "
"notation and are used to limit the search to a particular subsequence of the "
"list.  The returned index is computed relative to the beginning of the full "
"sequence rather than the *start* argument."
msgstr ""
"De valfria argumenten *start* och *end* tolkas som i slice-notationen och "
"används för att begränsa sökningen till en viss delsekvens av listan.  Det "
"returnerade indexet beräknas i förhållande till början av den fullständiga "
"sekvensen i stället för argumentet *start*."

#: ../../tutorial/datastructures.rst:77
msgid "Return the number of times *x* appears in the list."
msgstr "Returnera antalet gånger *x* förekommer i listan."

#: ../../tutorial/datastructures.rst:83
msgid ""
"Sort the items of the list in place (the arguments can be used for sort "
"customization, see :func:`sorted` for their explanation)."
msgstr ""
"Sortera objekten i listan på plats (argumenten kan användas för att anpassa "
"sorteringen, se :func:`sorted` för deras förklaring)."

#: ../../tutorial/datastructures.rst:90
msgid "Reverse the elements of the list in place."
msgstr "Backa tillbaka elementen i listan på plats."

#: ../../tutorial/datastructures.rst:96
msgid "Return a shallow copy of the list.  Equivalent to ``a[:]``."
msgstr ""

#: ../../tutorial/datastructures.rst:99
msgid "An example that uses most of the list methods::"
msgstr "Ett exempel som använder de flesta av listans metoder::"

#: ../../tutorial/datastructures.rst:122
msgid ""
"You might have noticed that methods like ``insert``, ``remove`` or ``sort`` "
"that only modify the list have no return value printed -- they return the "
"default ``None``. [#]_  This is a design principle for all mutable data "
"structures in Python."
msgstr ""
"Du kanske har märkt att metoder som ``insert``, ``remove`` eller ``sort`` "
"som bara ändrar listan inte har något returvärde utskrivet - de returnerar "
"standardvärdet ``None``. [#]_ Detta är en designprincip för alla "
"föränderliga datastrukturer i Python."

#: ../../tutorial/datastructures.rst:127
msgid ""
"Another thing you might notice is that not all data can be sorted or "
"compared.  For instance, ``[None, 'hello', 10]`` doesn't sort because "
"integers can't be compared to strings and *None* can't be compared to other "
"types.  Also, there are some types that don't have a defined ordering "
"relation.  For example, ``3+4j < 5+7j`` isn't a valid comparison."
msgstr ""

#: ../../tutorial/datastructures.rst:138
msgid "Using Lists as Stacks"
msgstr "Använda listor som staplar"

#: ../../tutorial/datastructures.rst:143
msgid ""
"The list methods make it very easy to use a list as a stack, where the last "
"element added is the first element retrieved (\"last-in, first-out\").  To "
"add an item to the top of the stack, use :meth:`~list.append`.  To retrieve "
"an item from the top of the stack, use :meth:`~list.pop` without an explicit "
"index.  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:168
msgid "Using Lists as Queues"
msgstr "Använda listor som köer"

#: ../../tutorial/datastructures.rst:172
msgid ""
"It is also possible to use a list as a queue, where the first element added "
"is the first element retrieved (\"first-in, first-out\"); however, lists are "
"not efficient for this purpose.  While appends and pops from the end of list "
"are fast, doing inserts or pops from the beginning of a list is slow "
"(because all of the other elements have to be shifted by one)."
msgstr ""
"Det är också möjligt att använda en lista som en kö, där det första "
"elementet som läggs till är det första elementet som hämtas (\"först in, "
"först ut\"); listor är dock inte effektiva för detta ändamål.  Det går "
"snabbt att lägga till och ta bort element från slutet av en lista, men det "
"går långsamt att lägga till eller ta bort element från början av en lista "
"(eftersom alla andra element måste flyttas med ett)."

#: ../../tutorial/datastructures.rst:178
msgid ""
"To implement a queue, use :class:`collections.deque` which was designed to "
"have fast appends and pops from both ends.  For example::"
msgstr ""
"För att implementera en kö, använd :class:`collections.deque` som är "
"utformad för att ha snabba appends och pops från båda ändar.  Till exempel::"

#: ../../tutorial/datastructures.rst:196
msgid "List Comprehensions"
msgstr "Listförståelse"

#: ../../tutorial/datastructures.rst:198
msgid ""
"List comprehensions provide a concise way to create lists. Common "
"applications are to make new lists where each element is the result of some "
"operations applied to each member of another sequence or iterable, or to "
"create a subsequence of those elements that satisfy a certain condition."
msgstr ""
"List Comprehensions ger ett kortfattat sätt att skapa listor. Vanliga "
"tillämpningar är att skapa nya listor där varje element är resultatet av "
"vissa operationer som tillämpas på varje medlem i en annan sekvens eller "
"iterabel, eller att skapa en undersekvens av de element som uppfyller ett "
"visst villkor."

#: ../../tutorial/datastructures.rst:203
msgid "For example, assume we want to create a list of squares, like::"
msgstr ""
"Anta till exempel att vi vill skapa en lista med kvadrater, till exempel::"

#: ../../tutorial/datastructures.rst:212
msgid ""
"Note that this creates (or overwrites) a variable named ``x`` that still "
"exists after the loop completes.  We can calculate the list of squares "
"without any side effects using::"
msgstr ""
"Observera att detta skapar (eller skriver över) en variabel med namnet ``x`` "
"som fortfarande existerar efter att slingan har avslutats.  Vi kan beräkna "
"listan med kvadrater utan några bieffekter med::"

#: ../../tutorial/datastructures.rst:218
msgid "or, equivalently::"
msgstr "eller, på motsvarande sätt::"

#: ../../tutorial/datastructures.rst:222
msgid "which is more concise and readable."
msgstr "som är mer kortfattad och läsbar."

#: ../../tutorial/datastructures.rst:224
msgid ""
"A list comprehension consists of brackets containing an expression followed "
"by a :keyword:`!for` clause, then zero or more :keyword:`!for` or :keyword:`!"
"if` clauses.  The result will be a new list resulting from evaluating the "
"expression in the context of the :keyword:`!for` and :keyword:`!if` clauses "
"which follow it. For example, this listcomp combines the elements of two "
"lists if they are not equal::"
msgstr ""
"En list comprehension består av parenteser som innehåller ett uttryck följt "
"av en :keyword:`!for`\\-klausul, sedan noll eller fler :keyword:`!for`\\- "
"eller :keyword:`!if`\\-klausuler.  Resultatet blir en ny lista som är "
"resultatet av utvärderingen av uttrycket i kontexten av :keyword:`!for`\\- "
"och :keyword:`!if`\\-klausulerna som följer efter det. Till exempel "
"kombinerar denna listcomp elementen i två listor om de inte är lika::"

#: ../../tutorial/datastructures.rst:234
msgid "and it's equivalent to::"
msgstr "och det är likvärdigt med::"

#: ../../tutorial/datastructures.rst:245
msgid ""
"Note how the order of the :keyword:`for` and :keyword:`if` statements is the "
"same in both these snippets."
msgstr ""
"Observera att ordningen på :keyword:`for`\\- och :keyword:`if`\\-satserna är "
"densamma i båda dessa utdrag."

#: ../../tutorial/datastructures.rst:248
msgid ""
"If the expression is a tuple (e.g. the ``(x, y)`` in the previous example), "
"it must be parenthesized. ::"
msgstr ""
"Om uttrycket är en tupel (t.ex. ``(x, y)`` i föregående exempel) måste det "
"vara inom parentes. ::"

#: ../../tutorial/datastructures.rst:279
msgid ""
"List comprehensions can contain complex expressions and nested functions::"
msgstr ""
"Listförståelser kan innehålla komplexa uttryck och nästlade funktioner::"

#: ../../tutorial/datastructures.rst:286
msgid "Nested List Comprehensions"
msgstr "Förståelse av nästlade listor"

#: ../../tutorial/datastructures.rst:288
msgid ""
"The initial expression in a list comprehension can be any arbitrary "
"expression, including another list comprehension."
msgstr ""
"Det första uttrycket i en listkomprehension kan vara vilket godtyckligt "
"uttryck som helst, inklusive en annan listkomprehension."

#: ../../tutorial/datastructures.rst:291
msgid ""
"Consider the following example of a 3x4 matrix implemented as a list of 3 "
"lists of length 4::"
msgstr ""
"Betrakta följande exempel på en 3x4-matris som implementerats som en lista "
"med 3 listor med längden 4::"

#: ../../tutorial/datastructures.rst:300
msgid "The following list comprehension will transpose rows and columns::"
msgstr "Följande listförståelse kommer att transponera rader och kolumner::"

#: ../../tutorial/datastructures.rst:305
msgid ""
"As we saw in the previous section, the inner list comprehension is evaluated "
"in the context of the :keyword:`for` that follows it, so this example is "
"equivalent to::"
msgstr ""
"Som vi såg i föregående avsnitt utvärderas den inre listförståelsen i "
"kontexten för det :keyword:`for` som följer efter den, så det här exemplet "
"är likvärdigt med::"

#: ../../tutorial/datastructures.rst:316
msgid "which, in turn, is the same as::"
msgstr "vilket i sin tur är detsamma som::"

#: ../../tutorial/datastructures.rst:329
msgid ""
"In the real world, you should prefer built-in functions to complex flow "
"statements. The :func:`zip` function would do a great job for this use case::"
msgstr ""
"I den verkliga världen bör du föredra inbyggda funktioner framför komplexa "
"flödesbeskrivningar. Funktionen :func:`zip` skulle göra ett bra jobb för "
"detta användningsfall::"

#: ../../tutorial/datastructures.rst:335
msgid ""
"See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr ""
"Se :ref:`tut-unpacking-arguments` för detaljer om asterisken i den här raden."

#: ../../tutorial/datastructures.rst:340
msgid "The :keyword:`!del` statement"
msgstr ":keyword:`!del`\\-satsen"

#: ../../tutorial/datastructures.rst:342
msgid ""
"There is a way to remove an item from a list given its index instead of its "
"value: the :keyword:`del` statement.  This differs from the :meth:`~list."
"pop` method which returns a value.  The :keyword:`!del` statement can also "
"be used to remove slices from a list or clear the entire list (which we did "
"earlier by assignment of an empty list to the slice).  For example::"
msgstr ""

#: ../../tutorial/datastructures.rst:359
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ":keyword:`del` kan också användas för att radera hela variabler::"

#: ../../tutorial/datastructures.rst:363
msgid ""
"Referencing the name ``a`` hereafter is an error (at least until another "
"value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""
"Att referera till namnet ``a`` i fortsättningen är ett fel (åtminstone tills "
"ett annat värde tilldelas det).  Vi kommer att hitta andra "
"användningsområden för :keyword:`del` senare."

#: ../../tutorial/datastructures.rst:370
msgid "Tuples and Sequences"
msgstr "Tupler och sekvenser"

#: ../../tutorial/datastructures.rst:372
msgid ""
"We saw that lists and strings have many common properties, such as indexing "
"and slicing operations.  They are two examples of *sequence* data types "
"(see :ref:`typesseq`).  Since Python is an evolving language, other sequence "
"data types may be added.  There is also another standard sequence data type: "
"the *tuple*."
msgstr ""
"Vi såg att listor och strängar har många gemensamma egenskaper, t.ex. "
"indexerings- och skivningsoperationer.  De är två exempel på *sekvens*-"
"datatyper (se :ref:`typesseq`).  Eftersom Python är ett språk under "
"utveckling kan andra sekvensdatatyper komma att läggas till.  Det finns "
"också en annan standardsekvensdatatyp: *tuple*."

#: ../../tutorial/datastructures.rst:378
msgid ""
"A tuple consists of a number of values separated by commas, for instance::"
msgstr ""
"En tuple består av ett antal värden som separeras med kommatecken, till "
"exempel::"

#: ../../tutorial/datastructures.rst:400
msgid ""
"As you see, on output tuples are always enclosed in parentheses, so that "
"nested tuples are interpreted correctly; they may be input with or without "
"surrounding parentheses, although often parentheses are necessary anyway (if "
"the tuple is part of a larger expression).  It is not possible to assign to "
"the individual items of a tuple, however it is possible to create tuples "
"which contain mutable objects, such as lists."
msgstr ""
"Som du ser är tupler alltid inneslutna i parenteser vid utmatning, så att "
"nästlade tupler tolkas korrekt; de kan matas in med eller utan omgivande "
"parenteser, även om parenteser ofta är nödvändiga ändå (om tupeln är en del "
"av ett större uttryck).  Det är inte möjligt att tilldela de enskilda "
"objekten i en tupel, men det är möjligt att skapa tuplar som innehåller "
"föränderliga objekt, t.ex. listor."

#: ../../tutorial/datastructures.rst:407
msgid ""
"Though tuples may seem similar to lists, they are often used in different "
"situations and for different purposes. Tuples are :term:`immutable`, and "
"usually contain a heterogeneous sequence of elements that are accessed via "
"unpacking (see later in this section) or indexing (or even by attribute in "
"the case of :func:`namedtuples <collections.namedtuple>`). Lists are :term:"
"`mutable`, and their elements are usually homogeneous and are accessed by "
"iterating over the list."
msgstr ""
"Även om tupler kan tyckas likna listor används de ofta i olika situationer "
"och för olika syften. Tuples är :term:`immutable`, och innehåller vanligtvis "
"en heterogen sekvens av element som nås via uppackning (se senare i detta "
"avsnitt) eller indexering (eller till och med via attribut i fallet :func:"
"`namedtuples <collections.namedtuple>`). Listor är :term:`mutable`, och "
"deras element är vanligtvis homogena och nås genom att iterera över listan."

#: ../../tutorial/datastructures.rst:415
msgid ""
"A special problem is the construction of tuples containing 0 or 1 items: the "
"syntax has some extra quirks to accommodate these.  Empty tuples are "
"constructed by an empty pair of parentheses; a tuple with one item is "
"constructed by following a value with a comma (it is not sufficient to "
"enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""
"Ett speciellt problem är konstruktionen av tupler som innehåller 0 eller 1 "
"objekt: syntaxen har några extra finesser för att hantera dessa.  Tomma "
"tupler konstrueras med ett tomt par parenteser; en tupel med ett objekt "
"konstrueras genom att följa ett värde med ett kommatecken (det räcker inte "
"att omsluta ett enda värde med parenteser). Fult, men effektivt.  Till "
"exempel::"

#: ../../tutorial/datastructures.rst:430
msgid ""
"The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple "
"packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed "
"together in a tuple. The reverse operation is also possible::"
msgstr ""
"Satsen ``t = 12345, 54321, 'hello!'`` är ett exempel på *tuple packing*: "
"värdena ``12345``, ``54321`` och ``'hello!'`` packas ihop till en tuple. Den "
"omvända operationen är också möjlig::"

#: ../../tutorial/datastructures.rst:436
msgid ""
"This is called, appropriately enough, *sequence unpacking* and works for any "
"sequence on the right-hand side.  Sequence unpacking requires that there are "
"as many variables on the left side of the equals sign as there are elements "
"in the sequence.  Note that multiple assignment is really just a combination "
"of tuple packing and sequence unpacking."
msgstr ""
"Detta kallas, passande nog, *sequence unpacking* och fungerar för alla "
"sekvenser på höger sida.  Sekvensuppackning kräver att det finns lika många "
"variabler på vänster sida om likhetstecknet som det finns element i "
"sekvensen.  Observera att multipel tilldelning egentligen bara är en "
"kombination av tupelpackning och sekvensuppackning."

#: ../../tutorial/datastructures.rst:446
msgid "Sets"
msgstr "Uppsättningar"

#: ../../tutorial/datastructures.rst:448
msgid ""
"Python also includes a data type for *sets*.  A set is an unordered "
"collection with no duplicate elements.  Basic uses include membership "
"testing and eliminating duplicate entries.  Set objects also support "
"mathematical operations like union, intersection, difference, and symmetric "
"difference."
msgstr ""
"Python innehåller också en datatyp för *sets*.  En set är en oordnad samling "
"utan duplicerade element.  Grundläggande användningsområden inkluderar "
"medlemskapstestning och eliminering av dubbla poster.  Set-objekt stöder "
"också matematiska operationer som union, intersektion, differens och "
"symmetrisk differens."

#: ../../tutorial/datastructures.rst:453
msgid ""
"Curly braces or the :func:`set` function can be used to create sets.  Note: "
"to create an empty set you have to use ``set()``, not ``{}``; the latter "
"creates an empty dictionary, a data structure that we discuss in the next "
"section."
msgstr ""
"Curly braces eller funktionen :func:`set` kan användas för att skapa "
"uppsättningar.  Observera: för att skapa en tom uppsättning måste du använda "
"``set()``, inte ``{}``; den senare skapar en tom ordbok, en datastruktur som "
"vi diskuterar i nästa avsnitt."

#: ../../tutorial/datastructures.rst:457
msgid "Here is a brief demonstration::"
msgstr "Här är en kort demonstration::"

#: ../../tutorial/datastructures.rst:482
msgid ""
"Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions "
"are also supported::"
msgstr ""
"På samma sätt som :ref:`listförståelse <tut-listcomps>`, stöds även "
"setförståelse::"

#: ../../tutorial/datastructures.rst:493
msgid "Dictionaries"
msgstr "Ordböcker"

#: ../../tutorial/datastructures.rst:495
msgid ""
"Another useful data type built into Python is the *dictionary* (see :ref:"
"`typesmapping`). Dictionaries are sometimes found in other languages as "
"\"associative memories\" or \"associative arrays\".  Unlike sequences, which "
"are indexed by a range of numbers, dictionaries are indexed by *keys*, which "
"can be any immutable type; strings and numbers can always be keys.  Tuples "
"can be used as keys if they contain only strings, numbers, or tuples; if a "
"tuple contains any mutable object either directly or indirectly, it cannot "
"be used as a key. You can't use lists as keys, since lists can be modified "
"in place using index assignments, slice assignments, or methods like :meth:"
"`~list.append` and :meth:`~list.extend`."
msgstr ""

#: ../../tutorial/datastructures.rst:506
msgid ""
"It is best to think of a dictionary as a set of *key: value* pairs, with the "
"requirement that the keys are unique (within one dictionary). A pair of "
"braces creates an empty dictionary: ``{}``. Placing a comma-separated list "
"of key:value pairs within the braces adds initial key:value pairs to the "
"dictionary; this is also the way dictionaries are written on output."
msgstr ""
"Det är bäst att tänka på en ordbok som en uppsättning *nyckel: värde*-par, "
"med kravet att nycklarna är unika (inom en ordbok). Ett par hakparenteser "
"skapar en tom ordbok: ``{}``. Om du placerar en kommaseparerad lista med "
"nyckel:värde-par inom hakparenteserna läggs de första nyckel:värde-paren "
"till i ordboken; det är också så ordböcker skrivs på utdatasidan."

#: ../../tutorial/datastructures.rst:512
msgid ""
"The main operations on a dictionary are storing a value with some key and "
"extracting the value given the key.  It is also possible to delete a key:"
"value pair with ``del``. If you store using a key that is already in use, "
"the old value associated with that key is forgotten.  It is an error to "
"extract a value using a non-existent key."
msgstr ""
"De viktigaste operationerna i en ordbok är att lagra ett värde med en nyckel "
"och att extrahera värdet med hjälp av nyckeln.  Det är också möjligt att ta "
"bort ett nyckel:värde-par med ``del``. Om du lagrar med en nyckel som redan "
"används, glöms det gamla värdet som är associerat med den nyckeln bort.  Det "
"är ett fel att extrahera ett värde med en icke-existerande nyckel."

#: ../../tutorial/datastructures.rst:518
msgid ""
"Performing ``list(d)`` on a dictionary returns a list of all the keys used "
"in the dictionary, in insertion order (if you want it sorted, just use "
"``sorted(d)`` instead). To check whether a single key is in the dictionary, "
"use the :keyword:`in` keyword."
msgstr ""
"Om du utför ``list(d)`` på en ordbok returneras en lista över alla nycklar "
"som används i ordboken, i inmatningsordning (om du vill ha den sorterad "
"använder du ``sorted(d)`` istället). Om du vill kontrollera om en enskild "
"nyckel finns i ordlistan använder du nyckelordet :keyword:`in`."

#: ../../tutorial/datastructures.rst:523
msgid "Here is a small example using a dictionary::"
msgstr "Här är ett litet exempel med hjälp av en ordbok::"

#: ../../tutorial/datastructures.rst:544
msgid ""
"The :func:`dict` constructor builds dictionaries directly from sequences of "
"key-value pairs::"
msgstr ""
"Konstruktören :func:`dict` bygger upp lexikon direkt från sekvenser av "
"nyckel-värde-par::"

#: ../../tutorial/datastructures.rst:550
msgid ""
"In addition, dict comprehensions can be used to create dictionaries from "
"arbitrary key and value expressions::"
msgstr ""
"Dessutom kan dict comprehensions användas för att skapa ordböcker från "
"godtyckliga nyckel- och värdeuttryck::"

#: ../../tutorial/datastructures.rst:556
msgid ""
"When the keys are simple strings, it is sometimes easier to specify pairs "
"using keyword arguments::"
msgstr ""
"När nycklarna är enkla strängar är det ibland enklare att ange par med hjälp "
"av nyckelordsargument::"

#: ../../tutorial/datastructures.rst:566
msgid "Looping Techniques"
msgstr "Looping-tekniker"

#: ../../tutorial/datastructures.rst:568
msgid ""
"When looping through dictionaries, the key and corresponding value can be "
"retrieved at the same time using the :meth:`~dict.items` method. ::"
msgstr ""
"Vid loopning genom lexikon kan nyckeln och motsvarande värde hämtas "
"samtidigt med hjälp av metoden :meth:`~dict.items`. ::"

#: ../../tutorial/datastructures.rst:578
msgid ""
"When looping through a sequence, the position index and corresponding value "
"can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""
"Vid loopning genom en sekvens kan positionsindex och motsvarande värde "
"hämtas samtidigt med hjälp av funktionen :func:`enumerate`. ::"

#: ../../tutorial/datastructures.rst:588
msgid ""
"To loop over two or more sequences at the same time, the entries can be "
"paired with the :func:`zip` function. ::"
msgstr ""
"För att loopa över två eller flera sekvenser samtidigt kan posterna kopplas "
"ihop med funktionen :func:`zip`. ::"

#: ../../tutorial/datastructures.rst:600
msgid ""
"To loop over a sequence in reverse, first specify the sequence in a forward "
"direction and then call the :func:`reversed` function. ::"
msgstr ""
"För att loopa över en sekvens i omvänd riktning anger du först sekvensen i "
"framåtriktad riktning och anropar sedan funktionen :func:`reversed`. ::"

#: ../../tutorial/datastructures.rst:612
msgid ""
"To loop over a sequence in sorted order, use the :func:`sorted` function "
"which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""
"För att loopa över en sekvens i sorterad ordning, använd funktionen :func:"
"`sorted` som returnerar en ny sorterad lista medan källan lämnas "
"oförändrad. ::"

#: ../../tutorial/datastructures.rst:626
msgid ""
"Using :func:`set` on a sequence eliminates duplicate elements. The use of :"
"func:`sorted` in combination with :func:`set` over a sequence is an "
"idiomatic way to loop over unique elements of the sequence in sorted "
"order. ::"
msgstr ""
"Genom att använda :func:`set` på en sekvens elimineras duplicerade element. "
"Användningen av :func:`sorted` i kombination med :func:`set` över en sekvens "
"är ett idiomatiskt sätt att loopa över unika element i sekvensen i sorterad "
"ordning. ::"

#: ../../tutorial/datastructures.rst:639
msgid ""
"It is sometimes tempting to change a list while you are looping over it; "
"however, it is often simpler and safer to create a new list instead. ::"
msgstr ""
"Det är ibland frestande att ändra i en lista medan man går igenom den, men "
"det är ofta enklare och säkrare att skapa en ny lista istället:"

#: ../../tutorial/datastructures.rst:656
msgid "More on Conditions"
msgstr "Mer om villkor"

#: ../../tutorial/datastructures.rst:658
msgid ""
"The conditions used in ``while`` and ``if`` statements can contain any "
"operators, not just comparisons."
msgstr ""
"De villkor som används i ``while`` och ``if``\\-satser kan innehålla alla "
"operatorer, inte bara jämförelser."

#: ../../tutorial/datastructures.rst:662
msgid ""
"The comparison operators ``in`` and ``not in`` are membership tests that "
"determine whether a value is in (or not in) a container.  The operators "
"``is`` and ``is not`` compare whether two objects are really the same "
"object.  All comparison operators have the same priority, which is lower "
"than that of all numerical operators."
msgstr ""
"Jämförelseoperatorerna ``in`` och ``not in`` är medlemskapstester som avgör "
"om ett värde finns i (eller inte finns i) en container.  Operatorerna ``is`` "
"och ``is not`` jämför om två objekt verkligen är samma objekt.  Alla "
"jämförelseoperatorer har samma prioritet, som är lägre än för alla numeriska "
"operatorer."

#: ../../tutorial/datastructures.rst:668
msgid ""
"Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a`` "
"is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""
"Jämförelser kan kedjas.  Till exempel testar ``a < b == c`` om ``a`` är "
"mindre än ``b`` och dessutom om ``b`` är lika med ``c``."

#: ../../tutorial/datastructures.rst:671
msgid ""
"Comparisons may be combined using the Boolean operators ``and`` and ``or``, "
"and the outcome of a comparison (or of any other Boolean expression) may be "
"negated with ``not``.  These have lower priorities than comparison "
"operators; between them, ``not`` has the highest priority and ``or`` the "
"lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or "
"C``. As always, parentheses can be used to express the desired composition."
msgstr ""
"Jämförelser kan kombineras med hjälp av de booleska operatorerna ``and`` och "
"``or``, och resultatet av en jämförelse (eller av något annat booleskt "
"uttryck) kan negeras med ``not``.  Dessa har lägre prioritet än "
"jämförelseoperatorer; mellan dem har ``not`` högst prioritet och ``or`` "
"lägst, så att ``A and not B or C`` är ekvivalent med ``(A and (not B)) or "
"C``. Som alltid kan parenteser användas för att uttrycka den önskade "
"sammansättningen."

#: ../../tutorial/datastructures.rst:678
msgid ""
"The Boolean operators ``and`` and ``or`` are so-called *short-circuit* "
"operators: their arguments are evaluated from left to right, and evaluation "
"stops as soon as the outcome is determined.  For example, if ``A`` and ``C`` "
"are true but ``B`` is false, ``A and B and C`` does not evaluate the "
"expression ``C``.  When used as a general value and not as a Boolean, the "
"return value of a short-circuit operator is the last evaluated argument."
msgstr ""
"De booleska operatorerna ``and`` och ``or`` är så kallade "
"*kortslutningsoperatorer*: deras argument utvärderas från vänster till "
"höger, och utvärderingen avslutas så snart resultatet har bestämts.  Om t."
"ex. ``A`` och ``C`` är sanna men ``B`` är falsk, utvärderar ``A and B and "
"C`` inte uttrycket ``C``.  När en kortslutningsoperator används som ett "
"allmänt värde och inte som en booleansk operator, är returvärdet det senast "
"utvärderade argumentet."

#: ../../tutorial/datastructures.rst:685
msgid ""
"It is possible to assign the result of a comparison or other Boolean "
"expression to a variable.  For example, ::"
msgstr ""
"Det är möjligt att tilldela resultatet av en jämförelse eller ett annat "
"booleskt uttryck till en variabel.  Till exempel ::"

#: ../../tutorial/datastructures.rst:693
msgid ""
"Note that in Python, unlike C, assignment inside expressions must be done "
"explicitly with the :ref:`walrus operator <why-can-t-i-use-an-assignment-in-"
"an-expression>` ``:=``. This avoids a common class of problems encountered "
"in C programs: typing ``=`` in an expression when ``==`` was intended."
msgstr ""
"Observera att i Python, till skillnad från C, måste tilldelning inuti "
"uttryck göras explicit med :ref:`walrus-operatorn <why-can-t-i-use-an-"
"assignment-in-an-expression>` ``:=``. Detta undviker en vanlig typ av "
"problem som uppstår i C-program: att skriva ``=`` i ett uttryck när ``==`` "
"var avsett."

#: ../../tutorial/datastructures.rst:703
msgid "Comparing Sequences and Other Types"
msgstr "Jämförelse mellan sekvenser och andra typer"

#: ../../tutorial/datastructures.rst:704
msgid ""
"Sequence objects typically may be compared to other objects with the same "
"sequence type. The comparison uses *lexicographical* ordering: first the "
"first two items are compared, and if they differ this determines the outcome "
"of the comparison; if they are equal, the next two items are compared, and "
"so on, until either sequence is exhausted. If two items to be compared are "
"themselves sequences of the same type, the lexicographical comparison is "
"carried out recursively.  If all items of two sequences compare equal, the "
"sequences are considered equal. If one sequence is an initial sub-sequence "
"of the other, the shorter sequence is the smaller (lesser) one.  "
"Lexicographical ordering for strings uses the Unicode code point number to "
"order individual characters. Some examples of comparisons between sequences "
"of the same type::"
msgstr ""
"Sekvensobjekt kan typiskt sett jämföras med andra objekt av samma "
"sekvenstyp. Jämförelsen använder *lexikografisk* ordning: först jämförs de "
"två första objekten, och om de skiljer sig åt avgör detta resultatet av "
"jämförelsen; om de är lika jämförs nästa två objekt, och så vidare tills "
"någon av sekvenserna är uttömd. Om två objekt som ska jämföras själva är "
"sekvenser av samma typ, utförs den lexikografiska jämförelsen rekursivt.  Om "
"alla element i två sekvenser jämförs lika, anses sekvenserna vara lika. Om "
"den ena sekvensen är en initial subsekvens av den andra, är den kortare "
"sekvensen den mindre (lesser).  Lexikografisk ordning för strängar använder "
"Unicodes kodpunktsnummer för att ordna enskilda tecken. Några exempel på "
"jämförelser mellan sekvenser av samma typ::"

#: ../../tutorial/datastructures.rst:724
msgid ""
"Note that comparing objects of different types with ``<`` or ``>`` is legal "
"provided that the objects have appropriate comparison methods.  For example, "
"mixed numeric types are compared according to their numeric value, so 0 "
"equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, "
"the interpreter will raise a :exc:`TypeError` exception."
msgstr ""
"Observera att det är lagligt att jämföra objekt av olika typer med ``<`` "
"eller ``>``, förutsatt att objekten har lämpliga jämförelsemetoder.  Till "
"exempel jämförs blandade numeriska typer enligt deras numeriska värde, så 0 "
"är lika med 0,0 osv.  Annars kommer tolken, i stället för att tillhandahålla "
"en godtycklig ordning, att ge upphov till ett :exc:`TypeError`\\-undantag."

#: ../../tutorial/datastructures.rst:732
msgid "Footnotes"
msgstr "Fotnoter"

#: ../../tutorial/datastructures.rst:733
msgid ""
"Other languages may return the mutated object, which allows method chaining, "
"such as ``d->insert(\"a\")->remove(\"b\")->sort();``."
msgstr ""
"Andra språk kan returnera det muterade objektet, vilket möjliggör "
"metodkedjor, till exempel ``d->insert(\"a\")->remove(\"b\")->sort();``."
