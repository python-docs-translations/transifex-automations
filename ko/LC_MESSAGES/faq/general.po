# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/general.rst:5
msgid "General Python FAQ"
msgstr "자주묻는 질문"

#: ../../faq/general.rst:8
msgid "Contents"
msgstr ""

#: ../../faq/general.rst:13
msgid "General Information"
msgstr "일반적인 질문들"

#: ../../faq/general.rst:16
msgid "What is Python?"
msgstr "Python이 무엇입니까?"

#: ../../faq/general.rst:18
msgid ""
"Python is an interpreted, interactive, object-oriented programming "
"language.  It incorporates modules, exceptions, dynamic typing, very high "
"level dynamic data types, and classes.  It supports multiple programming "
"paradigms beyond object-oriented programming, such as procedural and "
"functional programming. Python combines remarkable power with very clear "
"syntax. It has interfaces to many system calls and libraries, as well as to "
"various window systems, and is extensible in C or C++.  It is also usable as "
"an extension language for applications that need a programmable interface. "
"Finally, Python is portable: it runs on many Unix variants including Linux "
"and macOS, and on Windows."
msgstr ""

#: ../../faq/general.rst:28
msgid ""
"To find out more, start with :ref:`tutorial-index`.  The `Beginner's Guide "
"to Python <https://wiki.python.org/moin/BeginnersGuide>`_ links to other "
"introductory tutorials and resources for learning Python."
msgstr ""

#: ../../faq/general.rst:34
msgid "What is the Python Software Foundation?"
msgstr "Python 소프트웨어 재단이 무엇입니까?"

#: ../../faq/general.rst:36
msgid ""
"The Python Software Foundation is an independent non-profit organization "
"that holds the copyright on Python versions 2.1 and newer.  The PSF's "
"mission is to advance open source technology related to the Python "
"programming language and to publicize the use of Python.  The PSF's home "
"page is at https://www.python.org/psf/."
msgstr ""
"Python 소프트웨어 재단은 Python 2.1 이상 버전의 저작권을 소유하고 있는 비영"
"리 독립 단체입니다. 이 재단의 임무는 Python 프로그래밍 언어와 관련된 오픈소"
"스 기술을 발전시키고 Python을 널리 사용되게 하는 것입니다. 재단의 홈페이지는 "
"https://www.python.org/psf/ 입니다."

#: ../../faq/general.rst:42
msgid ""
"Donations to the PSF are tax-exempt in the US.  If you use Python and find "
"it helpful, please contribute via `the PSF donation page <https://www.python."
"org/psf/donations/>`_."
msgstr ""
"미국에서의 Python 소프트웨어 재단을 위한 기부는 면세됩니다. 만약 Python을 사"
"용하고 도움이 되었다고 생각된다면, `Python 소프트웨어 재단 기부 페이지 "
"<https://www.python.org/psf/donations/>`_에서 기부해주세요."

#: ../../faq/general.rst:48
msgid "Are there copyright restrictions on the use of Python?"
msgstr "Python 사용에 대한 저작권 제한이 있나요?"

#: ../../faq/general.rst:50
msgid ""
"You can do anything you want with the source, as long as you leave the "
"copyrights in and display those copyrights in any documentation about Python "
"that you produce.  If you honor the copyright rules, it's OK to use Python "
"for commercial use, to sell copies of Python in source or binary form "
"(modified or unmodified), or to sell products that incorporate Python in "
"some form.  We would still like to know about all commercial use of Python, "
"of course."
msgstr ""
"당신이 작성하는 Python에 관한 문서에 저작권을 남기고 표시하는 한, 소스코드를 "
"어떻게 다루셔도 괜찮습니다. 저작권을 지키는 한 Python을 상업적인 용도로 소스 "
"또는 바이너리 형태(변경의 유무와 상관없이)로 판매하거나 Python을 포함해 판매"
"해도 됩니다. 물론 Python의 모든 상업 용도에 대해서도 마찬가지입니다."

#: ../../faq/general.rst:57
msgid ""
"See `the license page <https://docs.python.org/3/license.html>`_ to find "
"further explanations and the full text of the PSF License."
msgstr ""

#: ../../faq/general.rst:60
msgid ""
"The Python logo is trademarked, and in certain cases permission is required "
"to use it.  Consult `the Trademark Usage Policy <https://www.python.org/psf/"
"trademarks/>`__ for more information."
msgstr ""
"Python 로고는 상표로 등록되어 있으며 특정 상황에서는 사용을 위해 허가가 필요"
"합니다. 자세한 정보는 `상표 사용 정책 <https://www.python.org/psf/trademarks/"
">`__을 확인해주세요."

#: ../../faq/general.rst:66
msgid "Why was Python created in the first place?"
msgstr "우선 Python은 왜 만들었습니까?"

#: ../../faq/general.rst:68
msgid ""
"Here's a *very* brief summary of what started it all, written by Guido van "
"Rossum:"
msgstr "Guido van Rossum에 따르면 모든 것은 매우 짧게 시작됐습니다:"

#: ../../faq/general.rst:71
msgid ""
"I had extensive experience with implementing an interpreted language in the "
"ABC group at CWI, and from working with this group I had learned a lot about "
"language design.  This is the origin of many Python features, including the "
"use of indentation for statement grouping and the inclusion of very-high-"
"level data types (although the details are all different in Python)."
msgstr ""
"나는 CWI의 ABC 그룹에서 인터프리터 언어를 구현하는데 폭넓은 경험을 갖고 있었"
"고 이 그룹과 함께 일하며 언어 디자인에 대해 많은 것을 배웠습니다. 이것은 구"
"문 문법에 들여쓰기를 사용하고 매우 높은 레벨의 자료형을 지원하는 것을 포함해"
"(자세한 것들은 Python과 많이 다르지만) Python의 수많은 특징의 근원이 되었습니"
"다."

#: ../../faq/general.rst:78
msgid ""
"I had a number of gripes about the ABC language, but also liked many of its "
"features.  It was impossible to extend the ABC language (or its "
"implementation) to remedy my complaints -- in fact its lack of extensibility "
"was one of its biggest problems.  I had some experience with using Modula-2+ "
"and talked with the designers of Modula-3 and read the Modula-3 report. "
"Modula-3 is the origin of the syntax and semantics used for exceptions, and "
"some other Python features."
msgstr ""
"나는 ABC 언어에 대해 수많은 불만을 가지고 있었지만 그 언어의 많은 부분을 좋아"
"하기도 했습니다. ABC 언어(또는 구현)는 확장하는 것이 불가능했고 이로인해 내 "
"불만은 해소되지 않았습니다. 사실, ABC 언어의 확장성 부족은 그 언어의 가장 큰 "
"문제중 하나였습니다. 나는 Modula-2+를 사용한 경험이 있었고 Modula-3의 디자이"
"너와 이야기하여 Modula-3 보고서를 읽었습니다. Modula-3는 예외 처리에 사용되"
"는 구문과 그 외 몇가지 Python 기능의 근원이 되었습니다."

#: ../../faq/general.rst:86
msgid ""
"I was working in the Amoeba distributed operating system group at CWI.  We "
"needed a better way to do system administration than by writing either C "
"programs or Bourne shell scripts, since Amoeba had its own system call "
"interface which wasn't easily accessible from the Bourne shell.  My "
"experience with error handling in Amoeba made me acutely aware of the "
"importance of exceptions as a programming language feature."
msgstr ""
"나는 CWI에서 Amoeba 분산 운영 시스템 팀에서 일했었습니다. 우리는 Amoeba가 "
"Bourne 셸에서 쉽게 접근할 수 없는 시스템 호출 인터페이스를 갖고있었기 때문에 "
"C 프로그램을 작성하거나 Bourne 셸 스크립트를 작성하는 것보다 더 나은 시스템 "
"관리 방법이 필요했습니다. Amoeba 오류 처리 경험에서 프로그래밍 언어의 기능으"
"로서 예외의 중요성을 강하게 인식하게 되었습니다."

#: ../../faq/general.rst:93
msgid ""
"It occurred to me that a scripting language with a syntax like ABC but with "
"access to the Amoeba system calls would fill the need.  I realized that it "
"would be foolish to write an Amoeba-specific language, so I decided that I "
"needed a language that was generally extensible."
msgstr ""
"나는 ABC 언어와 같은 문법을 가지면서 Amoeba 시스템 호출을 갖춘 스크립트 언어"
"가 필요할 것이라 생각했습니다. Amoeba 전용 언어를 만드는 것은 어리석은 일이"
"라 깨닫고 일반적으로 확장이 가능한 언어를 만들기로 했습니다."

#: ../../faq/general.rst:98
msgid ""
"During the 1989 Christmas holidays, I had a lot of time on my hand, so I "
"decided to give it a try.  During the next year, while still mostly working "
"on it in my own time, Python was used in the Amoeba project with increasing "
"success, and the feedback from colleagues made me add many early "
"improvements."
msgstr ""
"1989년 크리스마스 연휴 기간 동안 많은 시간이 있었기에 언어를 실제로 만들어보"
"기로 했습니다. 그다음 해에 나의 자유시간 동안 이것에 시간을 투자했고, Python"
"은 빠른 성장과 함께 Amoeba 프로젝트에 사용되었고 동료의 의견은 많은 개선을 하"
"는데 도움이 되었습니다."

#: ../../faq/general.rst:104
msgid ""
"In February 1991, after just over a year of development, I decided to post "
"to USENET.  The rest is in the ``Misc/HISTORY`` file."
msgstr ""
"1년이 넘는 개발 기간이 지나 1991년 2월, 나는 USENET에 Python을 올리기로 했습"
"니다. 그 흔적은 ``Misc/HISTORY`` 파일에 남아있습니다."

#: ../../faq/general.rst:109
msgid "What is Python good for?"
msgstr "Python은 무엇에 알맞습니까?"

#: ../../faq/general.rst:111
msgid ""
"Python is a high-level general-purpose programming language that can be "
"applied to many different classes of problems."
msgstr ""
"Python은 많은 다양한 문제에 적용될 수 있는 높은 수준의 범용 프로그래밍 언어입"
"니다."

#: ../../faq/general.rst:114
msgid ""
"The language comes with a large standard library that covers areas such as "
"string processing (regular expressions, Unicode, calculating differences "
"between files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP), "
"software engineering (unit testing, logging, profiling, parsing Python "
"code), and operating system interfaces (system calls, filesystems, TCP/IP "
"sockets).  Look at the table of contents for :ref:`library-index` to get an "
"idea of what's available.  A wide variety of third-party extensions are also "
"available.  Consult `the Python Package Index <https://pypi.org>`_ to find "
"packages of interest to you."
msgstr ""

#: ../../faq/general.rst:126
msgid "How does the Python version numbering scheme work?"
msgstr ""

#: ../../faq/general.rst:128
msgid "Python versions are numbered \"A.B.C\" or \"A.B\":"
msgstr ""

#: ../../faq/general.rst:130
msgid ""
"*A* is the major version number -- it is only incremented for really major "
"changes in the language."
msgstr ""

#: ../../faq/general.rst:132
msgid ""
"*B* is the minor version number -- it is incremented for less earth-"
"shattering changes."
msgstr ""

#: ../../faq/general.rst:134
msgid ""
"*C* is the micro version number -- it is incremented for each bugfix release."
msgstr ""

#: ../../faq/general.rst:136
msgid ""
"Not all releases are bugfix releases.  In the run-up to a new feature "
"release, a series of development releases are made, denoted as alpha, beta, "
"or release candidate.  Alphas are early releases in which interfaces aren't "
"yet finalized; it's not unexpected to see an interface change between two "
"alpha releases. Betas are more stable, preserving existing interfaces but "
"possibly adding new modules, and release candidates are frozen, making no "
"changes except as needed to fix critical bugs."
msgstr ""

#: ../../faq/general.rst:144
msgid "Alpha, beta and release candidate versions have an additional suffix:"
msgstr ""

#: ../../faq/general.rst:146
msgid "The suffix for an alpha version is \"aN\" for some small number *N*."
msgstr ""

#: ../../faq/general.rst:147
msgid "The suffix for a beta version is \"bN\" for some small number *N*."
msgstr ""

#: ../../faq/general.rst:148
msgid ""
"The suffix for a release candidate version is \"rcN\" for some small number "
"*N*."
msgstr ""

#: ../../faq/general.rst:150
msgid ""
"In other words, all versions labeled *2.0aN* precede the versions labeled "
"*2.0bN*, which precede versions labeled *2.0rcN*, and *those* precede 2.0."
msgstr ""

#: ../../faq/general.rst:153
msgid ""
"You may also find version numbers with a \"+\" suffix, e.g. \"2.2+\".  These "
"are unreleased versions, built directly from the CPython development "
"repository.  In practice, after a final minor release is made, the version "
"is incremented to the next minor version, which becomes the \"a0\" version, "
"e.g. \"2.4a0\"."
msgstr ""

#: ../../faq/general.rst:158
msgid ""
"See the `Developer's Guide <https://devguide.python.org/developer-workflow/"
"development-cycle/>`__ for more information about the development cycle, "
"and :pep:`387` to learn more about Python's backward compatibility policy.  "
"See also the documentation for :data:`sys.version`, :data:`sys.hexversion`, "
"and :data:`sys.version_info`."
msgstr ""

#: ../../faq/general.rst:167
msgid "How do I obtain a copy of the Python source?"
msgstr ""

#: ../../faq/general.rst:169
msgid ""
"The latest Python source distribution is always available from python.org, "
"at https://www.python.org/downloads/.  The latest development sources can be "
"obtained at https://github.com/python/cpython/."
msgstr ""

#: ../../faq/general.rst:173
msgid ""
"The source distribution is a gzipped tar file containing the complete C "
"source, Sphinx-formatted documentation, Python library modules, example "
"programs, and several useful pieces of freely distributable software.  The "
"source will compile and run out of the box on most UNIX platforms."
msgstr ""

#: ../../faq/general.rst:178
msgid ""
"Consult the `Getting Started section of the Python Developer's Guide "
"<https://devguide.python.org/setup/>`__ for more information on getting the "
"source code and compiling it."
msgstr ""

#: ../../faq/general.rst:184
msgid "How do I get documentation on Python?"
msgstr ""

#: ../../faq/general.rst:188
msgid ""
"The standard documentation for the current stable version of Python is "
"available at https://docs.python.org/3/.  PDF, plain text, and downloadable "
"HTML versions are also available at https://docs.python.org/3/download.html."
msgstr ""

#: ../../faq/general.rst:192
msgid ""
"The documentation is written in reStructuredText and processed by `the "
"Sphinx documentation tool <https://www.sphinx-doc.org/>`__.  The "
"reStructuredText source for the documentation is part of the Python source "
"distribution."
msgstr ""

#: ../../faq/general.rst:198
msgid "I've never programmed before. Is there a Python tutorial?"
msgstr ""

#: ../../faq/general.rst:200
msgid ""
"There are numerous tutorials and books available.  The standard "
"documentation includes :ref:`tutorial-index`."
msgstr ""

#: ../../faq/general.rst:203
msgid ""
"Consult `the Beginner's Guide <https://wiki.python.org/moin/"
"BeginnersGuide>`_ to find information for beginning Python programmers, "
"including lists of tutorials."
msgstr ""

#: ../../faq/general.rst:208
msgid "Is there a newsgroup or mailing list devoted to Python?"
msgstr ""

#: ../../faq/general.rst:210
msgid ""
"There is a newsgroup, :newsgroup:`comp.lang.python`, and a mailing list, "
"`python-list <https://mail.python.org/mailman/listinfo/python-list>`_.  The "
"newsgroup and mailing list are gatewayed into each other -- if you can read "
"news it's unnecessary to subscribe to the mailing list. :newsgroup:`comp."
"lang.python` is high-traffic, receiving hundreds of postings every day, and "
"Usenet readers are often more able to cope with this volume."
msgstr ""

#: ../../faq/general.rst:217
msgid ""
"Announcements of new software releases and events can be found in comp.lang."
"python.announce, a low-traffic moderated list that receives about five "
"postings per day.  It's available as `the python-announce mailing list "
"<https://mail.python.org/mailman3/lists/python-announce-list.python.org/>`_."
msgstr ""

#: ../../faq/general.rst:222
msgid ""
"More info about other mailing lists and newsgroups can be found at https://"
"www.python.org/community/lists/."
msgstr ""

#: ../../faq/general.rst:227
msgid "How do I get a beta test version of Python?"
msgstr ""

#: ../../faq/general.rst:229
msgid ""
"Alpha and beta releases are available from https://www.python.org/"
"downloads/.  All releases are announced on the comp.lang.python and comp."
"lang.python.announce newsgroups and on the Python home page at https://www."
"python.org/; an RSS feed of news is available."
msgstr ""

#: ../../faq/general.rst:234
msgid ""
"You can also access the development version of Python through Git.  See `The "
"Python Developer's Guide <https://devguide.python.org/>`_ for details."
msgstr ""

#: ../../faq/general.rst:239
msgid "How do I submit bug reports and patches for Python?"
msgstr ""

#: ../../faq/general.rst:241
msgid ""
"To report a bug or submit a patch, use the issue tracker at https://github."
"com/python/cpython/issues."
msgstr ""

#: ../../faq/general.rst:244
msgid ""
"For more information on how Python is developed, consult `the Python "
"Developer's Guide <https://devguide.python.org/>`_."
msgstr ""

#: ../../faq/general.rst:249
msgid "Are there any published articles about Python that I can reference?"
msgstr ""

#: ../../faq/general.rst:251
msgid "It's probably best to cite your favorite book about Python."
msgstr ""

#: ../../faq/general.rst:253
msgid ""
"The `very first article <https://ir.cwi.nl/pub/18204>`_ about Python was "
"written in 1991 and is now quite outdated."
msgstr ""

#: ../../faq/general.rst:256
msgid ""
"Guido van Rossum and Jelke de Boer, \"Interactively Testing Remote Servers "
"Using the Python Programming Language\", CWI Quarterly, Volume 4, Issue 4 "
"(December 1991), Amsterdam, pp 283--303."
msgstr ""

#: ../../faq/general.rst:262
msgid "Are there any books on Python?"
msgstr ""

#: ../../faq/general.rst:264
msgid ""
"Yes, there are many, and more are being published.  See the python.org wiki "
"at https://wiki.python.org/moin/PythonBooks for a list."
msgstr ""

#: ../../faq/general.rst:267
msgid ""
"You can also search online bookstores for \"Python\" and filter out the "
"Monty Python references; or perhaps search for \"Python\" and \"language\"."
msgstr ""

#: ../../faq/general.rst:272
msgid "Where in the world is www.python.org located?"
msgstr ""

#: ../../faq/general.rst:274
msgid ""
"The Python project's infrastructure is located all over the world and is "
"managed by the Python Infrastructure Team. Details `here <https://infra.psf."
"io>`__."
msgstr ""

#: ../../faq/general.rst:279
msgid "Why is it called Python?"
msgstr ""

#: ../../faq/general.rst:281
msgid ""
"When he began implementing Python, Guido van Rossum was also reading the "
"published scripts from `\"Monty Python's Flying Circus\" <https://en."
"wikipedia.org/wiki/Monty_Python>`__, a BBC comedy series from the 1970s.  "
"Van Rossum thought he needed a name that was short, unique, and slightly "
"mysterious, so he decided to call the language Python."
msgstr ""

#: ../../faq/general.rst:289
msgid "Do I have to like \"Monty Python's Flying Circus\"?"
msgstr ""

#: ../../faq/general.rst:291
msgid "No, but it helps.  :)"
msgstr ""

#: ../../faq/general.rst:295
msgid "Python in the real world"
msgstr ""

#: ../../faq/general.rst:298
msgid "How stable is Python?"
msgstr ""

#: ../../faq/general.rst:300
msgid ""
"Very stable.  New, stable releases have been coming out roughly every 6 to "
"18 months since 1991, and this seems likely to continue.  As of version 3.9, "
"Python will have a new feature release every 12 months (:pep:`602`)."
msgstr ""

#: ../../faq/general.rst:304
msgid ""
"The developers issue bugfix releases of older versions, so the stability of "
"existing releases gradually improves.  Bugfix releases, indicated by a third "
"component of the version number (e.g. 3.5.3, 3.6.2), are managed for "
"stability; only fixes for known problems are included in a bugfix release, "
"and it's guaranteed that interfaces will remain the same throughout a series "
"of bugfix releases."
msgstr ""

#: ../../faq/general.rst:311
msgid ""
"The latest stable releases can always be found on the `Python download page "
"<https://www.python.org/downloads/>`_.  There are two production-ready "
"versions of Python: 2.x and 3.x. The recommended version is 3.x, which is "
"supported by most widely used libraries.  Although 2.x is still widely used, "
"`it is not maintained anymore <https://peps.python.org/pep-0373/>`_."
msgstr ""

#: ../../faq/general.rst:318
msgid "How many people are using Python?"
msgstr ""

#: ../../faq/general.rst:320
msgid ""
"There are probably millions of users, though it's difficult to obtain an "
"exact count."
msgstr ""

#: ../../faq/general.rst:323
msgid ""
"Python is available for free download, so there are no sales figures, and "
"it's available from many different sites and packaged with many Linux "
"distributions, so download statistics don't tell the whole story either."
msgstr ""

#: ../../faq/general.rst:327
msgid ""
"The comp.lang.python newsgroup is very active, but not all Python users post "
"to the group or even read it."
msgstr ""

#: ../../faq/general.rst:332
msgid "Have any significant projects been done in Python?"
msgstr ""

#: ../../faq/general.rst:334
msgid ""
"See https://www.python.org/about/success for a list of projects that use "
"Python. Consulting the proceedings for `past Python conferences <https://www."
"python.org/community/workshops/>`_ will reveal contributions from many "
"different companies and organizations."
msgstr ""

#: ../../faq/general.rst:339
msgid ""
"High-profile Python projects include `the Mailman mailing list manager "
"<https://www.list.org>`_ and `the Zope application server <https://www.zope."
"dev>`_.  Several Linux distributions, most notably `Red Hat <https://www."
"redhat.com>`_, have written part or all of their installer and system "
"administration software in Python.  Companies that use Python internally "
"include Google, Yahoo, and Lucasfilm Ltd."
msgstr ""

#: ../../faq/general.rst:348
msgid "What new developments are expected for Python in the future?"
msgstr ""

#: ../../faq/general.rst:350
msgid ""
"See https://peps.python.org/ for the Python Enhancement Proposals (PEPs). "
"PEPs are design documents describing a suggested new feature for Python, "
"providing a concise technical specification and a rationale.  Look for a PEP "
"titled \"Python X.Y Release Schedule\", where X.Y is a version that hasn't "
"been publicly released yet."
msgstr ""

#: ../../faq/general.rst:356
msgid ""
"New development is discussed on `the python-dev mailing list <https://mail."
"python.org/mailman3/lists/python-dev.python.org/>`_."
msgstr ""

#: ../../faq/general.rst:361
msgid "Is it reasonable to propose incompatible changes to Python?"
msgstr ""

#: ../../faq/general.rst:363
msgid ""
"In general, no.  There are already millions of lines of Python code around "
"the world, so any change in the language that invalidates more than a very "
"small fraction of existing programs has to be frowned upon.  Even if you can "
"provide a conversion program, there's still the problem of updating all "
"documentation; many books have been written about Python, and we don't want "
"to invalidate them all at a single stroke."
msgstr ""

#: ../../faq/general.rst:370
msgid ""
"Providing a gradual upgrade path is necessary if a feature has to be "
"changed. :pep:`5` describes the procedure followed for introducing backward-"
"incompatible changes while minimizing disruption for users."
msgstr ""

#: ../../faq/general.rst:376
msgid "Is Python a good language for beginning programmers?"
msgstr ""

#: ../../faq/general.rst:378
msgid "Yes."
msgstr ""

#: ../../faq/general.rst:380
msgid ""
"It is still common to start students with a procedural and statically typed "
"language such as Pascal, C, or a subset of C++ or Java.  Students may be "
"better served by learning Python as their first language.  Python has a very "
"simple and consistent syntax and a large standard library and, most "
"importantly, using Python in a beginning programming course lets students "
"concentrate on important programming skills such as problem decomposition "
"and data type design.  With Python, students can be quickly introduced to "
"basic concepts such as loops and procedures.  They can probably even work "
"with user-defined objects in their very first course."
msgstr ""

#: ../../faq/general.rst:390
msgid ""
"For a student who has never programmed before, using a statically typed "
"language seems unnatural.  It presents additional complexity that the "
"student must master and slows the pace of the course.  The students are "
"trying to learn to think like a computer, decompose problems, design "
"consistent interfaces, and encapsulate data.  While learning to use a "
"statically typed language is important in the long term, it is not "
"necessarily the best topic to address in the students' first programming "
"course."
msgstr ""

#: ../../faq/general.rst:398
msgid ""
"Many other aspects of Python make it a good first language.  Like Java, "
"Python has a large standard library so that students can be assigned "
"programming projects very early in the course that *do* something.  "
"Assignments aren't restricted to the standard four-function calculator and "
"check balancing programs.  By using the standard library, students can gain "
"the satisfaction of working on realistic applications as they learn the "
"fundamentals of programming. Using the standard library also teaches "
"students about code reuse.  Third-party modules such as PyGame are also "
"helpful in extending the students' reach."
msgstr ""

#: ../../faq/general.rst:407
msgid ""
"Python's interactive interpreter enables students to test language features "
"while they're programming.  They can keep a window with the interpreter "
"running while they enter their program's source in another window.  If they "
"can't remember the methods for a list, they can do something like this::"
msgstr ""

#: ../../faq/general.rst:436
msgid ""
"With the interpreter, documentation is never far from the student as they "
"are programming."
msgstr ""

#: ../../faq/general.rst:439
msgid ""
"There are also good IDEs for Python.  IDLE is a cross-platform IDE for "
"Python that is written in Python using Tkinter. Emacs users will be happy to "
"know that there is a very good Python mode for Emacs.  All of these "
"programming environments provide syntax highlighting, auto-indenting, and "
"access to the interactive interpreter while coding.  Consult `the Python "
"wiki <https://wiki.python.org/moin/PythonEditors>`_ for a full list of "
"Python editing environments."
msgstr ""

#: ../../faq/general.rst:447
msgid ""
"If you want to discuss Python's use in education, you may be interested in "
"joining `the edu-sig mailing list <https://www.python.org/community/sigs/"
"current/edu-sig>`_."
msgstr ""
