# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Argparse 사용 지침서"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr "작성자"

#: ../../howto/argparse.rst:7
msgid "Tshepang Lekhonkhobe"
msgstr "Tshepang Lekhonkhobe"

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""

#: ../../howto/argparse.rst:16
msgid ""
"There are two other modules that fulfill the same task, namely :mod:`getopt` "
"(an equivalent for ``getopt()`` from the C language) and the deprecated :mod:"
"`optparse`. Note also that :mod:`argparse` is based on :mod:`optparse`, and "
"therefore very similar in terms of usage."
msgstr ""

#: ../../howto/argparse.rst:24
msgid "Concepts"
msgstr "개념"

#: ../../howto/argparse.rst:26
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr ""
":command:`ls` 명령을 사용하여 입문 사용 지침서에서 탐색할 기능의 종류를 보겠"
"습니다:"

#: ../../howto/argparse.rst:48
msgid "A few concepts we can learn from the four commands:"
msgstr "일부 개념은 4가지 명령어를 통해 배울 수 있습니다:"

#: ../../howto/argparse.rst:50
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
":command:`ls` 명령은 옵션없이 실행될 때 유용합니다. 이 명령어는 기본적으로 현"
"재 디렉토리의  내용을 표시합니다. "

#: ../../howto/argparse.rst:53
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because "
"the program should know what to do with the value, solely based on where it "
"appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"우리는 기본적으로 제공하는 것을 넘기를 원해서, 조금 더 부가적인걸 합니다. 여"
"기서는 다른 디렉토리인 ``pypy``를 표시하기를 원합니다. 우리가 했던 것은 위치"
"와 관련된 인자를 명시하는 것이었습니다. 인자는 명령 줄에 표시되는 위치를 기준"
"으로 프로그램이 값을 어떻게 처리해야 하는지를 알아야하기 때문에 이름이 지정되"
"어 있습니다. 이 개념은  :command:`cp`의 가장 기본적인 사용법인 ``cp SRC "
"DEST``와 같은 명령어와 더욱 연관이 있습니다. 첫 번째 위치는 *복사할 대상*이"
"고, 두 번째 위치는 *복사할 위치*입니다."

#: ../../howto/argparse.rst:62
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"이제 우리는 프로그램의 동작을 바꾸고 싶다고 합시다. 이 예에서 파일 이름을 표"
"시하는 대신 각 파일에 대한 정보를 더 많이 표시합니다. 여기서 ``-l``은 옵션 인"
"자라고 합니다. "

#: ../../howto/argparse.rst:66
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works "
"simply by reading its help text."
msgstr ""
"저것은 도움말의 스니펫입니다. 스니펫은 이전에 사용하지 않았던 프로그램을 접했"
"을때, 도움말을 읽는 것만으로 간단하게 동작하는 방식을 이해할수 있다는 점에서 "
"매우 유용합니다. "

#: ../../howto/argparse.rst:72
msgid "The basics"
msgstr "기본"

#: ../../howto/argparse.rst:74
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "(거의)아무것도 하지 않는 매우 간단한 예제를 시작해 보겠습니다:"

#: ../../howto/argparse.rst:80 ../../howto/argparse.rst:188
#: ../../howto/argparse.rst:209
msgid "Following is a result of running the code:"
msgstr "다음은 코드를 실행한 결과입니다:"

#: ../../howto/argparse.rst:97 ../../howto/argparse.rst:254
#: ../../howto/argparse.rst:298
msgid "Here is what is happening:"
msgstr "여기에서 무슨 일이 일어난걸까요:"

#: ../../howto/argparse.rst:99
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"옵션 없이 스크립트를 실행하면 표준출력에 아무것도 표시되지 않습니다. 별로 쓸"
"모있지 않습니다."

#: ../../howto/argparse.rst:102
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"두 번째에서는  :mod:`argparse` 모듈의 유용성을 보여주기 시작합니다. 우리는 아"
"무것도 하지 않았지만, 벌써 멋진 도움말을 얻었습니다. "

#: ../../howto/argparse.rst:105
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"``-h``로 축약할 수 있는 ``--help`` 옵션은 공짜로 얻을 수 있는 유일한 옵션입니"
"다(즉, 아무것도 명시할 필요가 없습니다).\n"
"다른 것을 명시하면 에러가 발생합니다. 그러나 그때조차도 공짜료 유용한 사용법 "
"메시지를 얻을 수 있습니다."

#: ../../howto/argparse.rst:112
msgid "Introducing Positional arguments"
msgstr "위치와 관련된 인자 소개하기"

#: ../../howto/argparse.rst:114
msgid "An example::"
msgstr "예제:"

#: ../../howto/argparse.rst:122
msgid "And running the code:"
msgstr "그리고 코드 실행하기:"

#: ../../howto/argparse.rst:140
msgid "Here is what's happening:"
msgstr "여기에서 무슨 일이 일어난걸까요:"

#: ../../howto/argparse.rst:142
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""

#: ../../howto/argparse.rst:146
msgid "Calling our program now requires us to specify an option."
msgstr "이제 프로그램 호출을 위해 옵션을 지정해야 합니다. "

#: ../../howto/argparse.rst:148
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""

#: ../../howto/argparse.rst:151
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""

#: ../../howto/argparse.rst:156
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more "
"useful::"
msgstr ""

#: ../../howto/argparse.rst:167
msgid "And we get:"
msgstr ""

#: ../../howto/argparse.rst:180
msgid "Now, how about doing something even more useful::"
msgstr ""

#: ../../howto/argparse.rst:198
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we "
"give it as strings, unless we tell it otherwise. So, let's tell :mod:"
"`argparse` to treat that input as an integer::"
msgstr ""

#: ../../howto/argparse.rst:219
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""

#: ../../howto/argparse.rst:224
msgid "Introducing Optional arguments"
msgstr ""

#: ../../howto/argparse.rst:226
msgid ""
"So far we have been playing with positional arguments. Let us have a look on "
"how to add optional ones::"
msgstr ""

#: ../../howto/argparse.rst:236 ../../howto/argparse.rst:282
#: ../../howto/argparse.rst:398 ../../howto/argparse.rst:432
msgid "And the output:"
msgstr ""

#: ../../howto/argparse.rst:256
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""

#: ../../howto/argparse.rst:259
msgid ""
"To show that the option is actually optional, there is no error when running "
"the program without it. Note that by default, if an optional argument isn't "
"used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the :"
"keyword:`if` statement."
msgstr ""

#: ../../howto/argparse.rst:265
msgid "The help message is a bit different."
msgstr ""

#: ../../howto/argparse.rst:267
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any "
"value."
msgstr ""

#: ../../howto/argparse.rst:270
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""

#: ../../howto/argparse.rst:300
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``. "
"This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""

#: ../../howto/argparse.rst:307
msgid ""
"It complains when you specify a value, in true spirit of what flags actually "
"are."
msgstr ""

#: ../../howto/argparse.rst:310
msgid "Notice the different help text."
msgstr ""

#: ../../howto/argparse.rst:314
msgid "Short options"
msgstr ""

#: ../../howto/argparse.rst:316
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""

#: ../../howto/argparse.rst:328
msgid "And here goes:"
msgstr ""

#: ../../howto/argparse.rst:341
msgid "Note that the new ability is also reflected in the help text."
msgstr ""

#: ../../howto/argparse.rst:345
msgid "Combining Positional and Optional arguments"
msgstr ""

#: ../../howto/argparse.rst:347
msgid "Our program keeps growing in complexity::"
msgstr ""

#: ../../howto/argparse.rst:362
msgid "And now the output:"
msgstr ""

#: ../../howto/argparse.rst:376
msgid "We've brought back a positional argument, hence the complaint."
msgstr ""

#: ../../howto/argparse.rst:378
msgid "Note that the order does not matter."
msgstr ""

#: ../../howto/argparse.rst:380
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""

#: ../../howto/argparse.rst:414
msgid ""
"These all look good except the last one, which exposes a bug in our program. "
"Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""

#: ../../howto/argparse.rst:450
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""

#: ../../howto/argparse.rst:453
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""

#: ../../howto/argparse.rst:472
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""

#: ../../howto/argparse.rst:501
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""

#: ../../howto/argparse.rst:504
msgid "It also behaves similar to \"store_true\" action."
msgstr ""

#: ../../howto/argparse.rst:506
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""

#: ../../howto/argparse.rst:509
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr ""

#: ../../howto/argparse.rst:512
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr ""

#: ../../howto/argparse.rst:515
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""

#: ../../howto/argparse.rst:519
msgid "That last output exposes a bug in our program."
msgstr ""

#: ../../howto/argparse.rst:522
msgid "Let's fix::"
msgstr ""

#: ../../howto/argparse.rst:541
msgid "And this is what it gives:"
msgstr ""

#: ../../howto/argparse.rst:556
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""

#: ../../howto/argparse.rst:559
msgid "Third output not so good."
msgstr ""

#: ../../howto/argparse.rst:561
msgid "Let's fix that bug::"
msgstr ""

#: ../../howto/argparse.rst:578
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the :exc:"
"`TypeError` exception)."
msgstr ""

#: ../../howto/argparse.rst:585
msgid "And:"
msgstr ""

#: ../../howto/argparse.rst:592
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""

#: ../../howto/argparse.rst:599
msgid "Getting a little more advanced"
msgstr ""

#: ../../howto/argparse.rst:601
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""

#: ../../howto/argparse.rst:618 ../../howto/argparse.rst:656
msgid "Output:"
msgstr ""

#: ../../howto/argparse.rst:639
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""

#: ../../howto/argparse.rst:670
msgid "Conflicting options"
msgstr ""

#: ../../howto/argparse.rst:672
msgid ""
"So far, we have been working with two methods of an :class:`argparse."
"ArgumentParser` instance. Let's introduce a third one, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to specify "
"options that conflict with each other. Let's also change the rest of the "
"program so that the new functionality makes more sense: we'll introduce the "
"``--quiet`` option, which will be the opposite of the ``--verbose`` one::"
msgstr ""

#: ../../howto/argparse.rst:698
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""

#: ../../howto/argparse.rst:716
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""

#: ../../howto/argparse.rst:720
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of "
"your program, just in case they don't know::"
msgstr ""

#: ../../howto/argparse.rst:741
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which "
"tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""

#: ../../howto/argparse.rst:763
msgid "How to translate the argparse output"
msgstr ""

#: ../../howto/argparse.rst:765
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`. "
"See also :ref:`i18n-howto`."
msgstr ""

#: ../../howto/argparse.rst:770
msgid "For instance, in this :mod:`argparse` output:"
msgstr ""

#: ../../howto/argparse.rst:788
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""

#: ../../howto/argparse.rst:791
msgid ""
"In order to translate these strings, they must first be extracted into a ``."
"po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run this "
"command:"
msgstr ""

#: ../../howto/argparse.rst:799
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""

#: ../../howto/argparse.rst:803
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""

#: ../../howto/argparse.rst:809
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""

#: ../../howto/argparse.rst:813
msgid ""
"To translate your own strings in the :mod:`argparse` output, use :mod:"
"`gettext`."
msgstr ""

#: ../../howto/argparse.rst:816
msgid "Conclusion"
msgstr ""

#: ../../howto/argparse.rst:818
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
