# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-17 14:51+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "파일 객체"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Python의 스트림들은 버퍼링을 위한 레이어를 가지고 있기 때문에, 운영체제 등급 "
"파일 디스크립터들과 섞어서 사용하는 것은 다양한 이슈들을 만들어낼 수 있습니"
"다.(예를 들어, 예상하지 못한 데이터의 정렬상태 등)"

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "*name* 속성은 무시 하면 됩니다."

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"``p.readline([n])`` 와 동일하게, 이 함수는 *p*객체에서 한 라인 만을 읽어들입"
"니다. *p*는 파일 객체 이거나 :meth:`~io.IOBase.readline 와 관련된 객체 입니"
"다. 만약 *n* 이 0이라면, 라인의 길이에 상관없이 1개의 라인이 읽힙니다. 만약 "
"*n*이 0보다 크다면, *n* 바이트 이하의 글자 만이 읽힐 것 입니다; 라인의 일부"
"분 만이 읽힐 수 있습니다. 앞의 두 경우 모두, 파일의 끝에 다다르면 빈 문자열"
"이 반환 됩니다. 하지만 만약 *n*이 0보다 작다면, 길이에 상관 없이 한개의 라인"
"이 반환 되며, 파일의 끝이라면 :exc:`EOFError`가 발생 됩니다."

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr ""

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"문자열 *s*을 파일 객체 *p* 에 쓰십시오. 성공 시 ``0``가 반환되며 실패 시에는 "
"``-1``가 반환 됩니다; 적절한 예외처리가 적용 될 것입니다."

#: ../../c-api/file.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/file.rst:8
msgid "file"
msgstr ""

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr ""

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr ""
