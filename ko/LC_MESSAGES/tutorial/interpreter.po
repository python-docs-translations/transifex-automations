# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Joshua Huh <mr.saint@gmail.com>, 2021
# Billy Billy <sangmo.gu@gmail.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 14:22+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "Python 인터프리터 사용법"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "인터프리터 실행하기"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as |"
"usr_local_bin_python_x_dot_y_literal| on those machines where it is "
"available; putting :file:`/usr/local/bin` in your Unix shell's search path "
"makes it possible to start it by typing the command:"
msgstr ""

#: ../../tutorial/interpreter.rst:17
msgid "python3.14"
msgstr ""

#: ../../tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python` "
"is a popular alternative location.)"
msgstr ""
"인터프리터를 설치할 디렉터리 경로는 설치할 때 변경할 수 있으므로 다른 디렉터"
"리에 있을 수도 있습니다. 그럴 때엔 가까운 Python 전문가나 시스템 관리자에게 "
"문의하십시오(예를 들어 :file:`/usr/local/python`도 많이 사용하는 대안 경로입"
"니다)."

#: ../../tutorial/interpreter.rst:26
msgid ""
"On Windows machines where you have installed Python from the :ref:`Microsoft "
"Store <windows-store>`, the |python_x_dot_y_literal| command will be "
"available. If you have the :ref:`py.exe launcher <launcher>` installed, you "
"can use the :file:`py` command. See :ref:`setting-envvars` for other ways to "
"launch Python."
msgstr ""

#: ../../tutorial/interpreter.rst:31
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero "
"exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr ""
"기본 프롬프트에서 EOF 문자(Unix에서 :kbd:`Control-D`, Windows에서 :kbd:"
"`Control-Z`)를 입력하면 0을 종료 상태로 리턴하고 인터프리터를 종료합니다. 종"
"료되지 않으면 ``quit()`` 명령을 입력해 종료할 수 있습니다."

#: ../../tutorial/interpreter.rst:36
msgid ""
"The interpreter's line-editing features include interactive editing, history "
"substitution and code completion on systems that support the `GNU Readline "
"<https://tiswww.case.edu/php/chet/readline/rltop.html>`_ library. Perhaps "
"the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr ""
"Funkcje edycji linii interpretera obejmują interaktywną edycję, zastępowanie "
"historii i uzupełnianie kodu w systemach wspierających bibliotekę `GNU "
"Readline <https://tiswww.case.edu/php/chet/readline/rltop.html>`_. "
"Prawdopodobnie najszybszym sposobem sprawdzenia, czy posiadasz rozszerzone "
"właściwości linii poleceń, jest naciśnięcie :kbd:`Control-P` za pierwszym "
"znakiem zachęty Pythona, który zobaczysz po jego uruchomieniu. Jeżeli "
"zabrzęczy, masz edycję linii poleceń; zobacz wprowadzenie do klawiszy w "
"dodatku :ref:`tut-interacting`. Jeśli nic się nie zdarzy lub pojawi się "
"``^P``, to edycja linii poleceń nie jest dostępna; będziesz mógł tylko "
"używać klawisza backspace, aby usuwać znaki z bieżącego wiersza."

#: ../../tutorial/interpreter.rst:46
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"Interpreter działa podobnie do uniksowej powłoki: kiedy jest wywołany ze "
"standardowym wejściem połączonym z urządzeniem tty, czyta i wykonuje komendy "
"interaktywnie. Gdy zostanie wywołany z argumentem w postaci nazwy pliku lub "
"z plikiem jako standardowym wejściem, czyta i wykonuje *skrypt* z tego pliku."

#: ../../tutorial/interpreter.rst:51
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``, "
"which executes the statement(s) in *command*, analogous to the shell's :"
"option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety."
msgstr ""

#: ../../tutorial/interpreter.rst:57
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr ""
"Niektóre moduły Pythona są też przydatne jako skrypty. Mogą być one wywołane "
"przy użyciu ``python -m moduł [arg] …``, co wykonuje plik źródłowy dla "
"*modułu* tak jakbyś wpisał jego pełną nazwę w linii komend."

#: ../../tutorial/interpreter.rst:61
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing :"
"option:`-i` before the script."
msgstr ""
"Kiedy używa się pliku skryptu, czasami przydatne jest móc uruchomić skrypt i "
"następnie wejść w interaktywny. Można to zrobić przekazując :option:`-i` "
"przed skryptem."

#: ../../tutorial/interpreter.rst:65
msgid "All command line options are described in :ref:`using-on-general`."
msgstr "모든 명령 행 옵션은 :ref:`using-on-general`에서 설명합니다."

#: ../../tutorial/interpreter.rst:71
msgid "Argument Passing"
msgstr "인수 전달"

#: ../../tutorial/interpreter.rst:73
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script "
"name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or "
"module to handle."
msgstr ""
"Nazwa skryptu i dodatkowe argumenty, gdy są znane interpreterowi, są "
"zamieniane w listę ciągów znaków i przypisywane zmiennej ``argv`` w module "
"``sys``. Możesz dostać się do tej listy wykonując ``import sys``. Długość "
"listy jest przynajmniej równa jeden; gdy nie podano nazwy skryptu i żadnych "
"argumentów wywołania, ``sys.argv[0]``, jest pustym ciągiem. Gdy nazwa "
"skryptu przekazana jest w postaci ``'-'`` (co oznacza standardowe wejście), "
"``sys.argv[0]`` przyjmuje wartość ``'-'``. Gdy zostanie użyte :option:`-c` "
"*komenda*, ``sys.argv[0]``, przyjmuje wartość ``'-c'``. Gdy zostanie użyte :"
"option:`-m` *moduł*, ``sys.argv[0]`` przyjmie wartość pełnej nazwy "
"znalezionego modułu. Opcje znalezione za :option:`-c` *komenda* lub :option:"
"`-m` *moduł* nie są konsumowane przez przetwarzanie opcji interpretera "
"Pythona, lecz pozostawiane w ``sys.argv`` do obsłużenia przez komendę lub "
"moduł."

#: ../../tutorial/interpreter.rst:89
msgid "Interactive Mode"
msgstr "인터랙티브 모드"

#: ../../tutorial/interpreter.rst:91
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version "
"number and a copyright notice before printing the first prompt:"
msgstr ""
"Jeżeli instrukcje są wczytywane z urządzenia tty, mówi się wtedy, że "
"interpreter jest w *trybie interaktywnym*. Interpreter zachęca wtedy do "
"podania kolejnej instrukcji wyświetlając tzw. znak zachęty, zwykle w postaci "
"trzech znaków większości (``>>>``). Gdy wymaga kontynuacji instrukcji, w "
"następnej linii wyświetla *drugi znak zachęty*, domyślnie trzy kropki (``..."
"``). Interpreter wyświetla wiadomość powitania zawierającą jego wersję i "
"notatkę o prawach autorskich przed wyświetleniem pierwszego znaku zachęty:"

#: ../../tutorial/interpreter.rst:98
msgid ""
"$ python3.14\n"
"Python 3.14 (default, April 4 2024, 09:25:04)\n"
"[GCC 10.2.0] on linux\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more "
"information.\n"
">>>"
msgstr ""

#: ../../tutorial/interpreter.rst:108
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr ""
"Linie kontynuacji są potrzebne przy wejściu w wielowierszową konstrukcję. "
"Jako przykład, spójrzmy na to wyrażenie :keyword:`if`::"

#: ../../tutorial/interpreter.rst:111
msgid ""
">>> the_world_is_flat = True\n"
">>> if the_world_is_flat:\n"
"...     print(\"Be careful not to fall off!\")\n"
"...\n"
"Be careful not to fall off!"
msgstr ""

#: ../../tutorial/interpreter.rst:118
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"인터랙티브 모드를 자세히 알고 싶으면 :ref:`tut-interac`를 참조하십시오."

#: ../../tutorial/interpreter.rst:124
msgid "The Interpreter and Its Environment"
msgstr "인터프리터와 실행 환경"

#: ../../tutorial/interpreter.rst:130
msgid "Source Code Encoding"
msgstr "소스 코드 인코딩"

#: ../../tutorial/interpreter.rst:132
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the "
"standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use "
"a font that supports all the characters in the file."
msgstr ""
"Domyślnie pliki źródłowe Pythona są traktowane jako zakodowane w UTF-8. W "
"tym kodowaniu znaki większości języków na świecie mogą być użyte "
"jednocześnie w literałach ciągów znaków, identyfikatorach i komentarzach – "
"jednak biblioteka standardowa używa jedynie znaków ASCII dla "
"identyfikatorów, tej konwencji powinien przestrzegać każdy przenośny kod. "
"Aby wyświetlić odpowiednio wszystkie te znaki, twój edytor musi rozpoznawać, "
"że plik jest UTF-8 i musi używać fontu, który wspiera wszystkie znaki w tym "
"pliku."

#: ../../tutorial/interpreter.rst:140
msgid ""
"To declare an encoding other than the default one, a special comment line "
"should be added as the *first* line of the file.  The syntax is as follows::"
msgstr ""
"Aby zadeklarować kodowanie inne niż domyślne, powinno się dodać specjalną "
"linię komentarza jako *pierwszą* linię pliku. Składnia jest następująca::"

#: ../../tutorial/interpreter.rst:143
msgid "# -*- coding: encoding -*-"
msgstr ""

#: ../../tutorial/interpreter.rst:145
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr ""
"gdzie *encoding* jest jednym z poprawnych :mod:`codecs` wspieranych przez "
"Pythona."

#: ../../tutorial/interpreter.rst:147
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the first "
"line of your source code file should be::"
msgstr ""
"Na przykład aby zadeklarować używanie kodowania Windows-1252, pierwszą linią "
"twojego kodu źródłowego powinno być::"

#: ../../tutorial/interpreter.rst:150
msgid "# -*- coding: cp1252 -*-"
msgstr ""

#: ../../tutorial/interpreter.rst:152
msgid ""
"One exception to the *first line* rule is when the source code starts with "
"a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the encoding "
"declaration should be added as the second line of the file.  For example::"
msgstr ""
"Jedynym wyjątkiem dla reguły *pierwszej linii* jest, kiedy kod źródłowy "
"zaczyna się :ref:`uniksową linią „shebang” <tut-scripts>`. W tym przypadku "
"deklaracja kodowania powinna być dodana jako druga linia pliku. Na przykład::"

#: ../../tutorial/interpreter.rst:156
msgid ""
"#!/usr/bin/env python3\n"
"# -*- coding: cp1252 -*-"
msgstr ""

#: ../../tutorial/interpreter.rst:160
msgid "Footnotes"
msgstr "각주"

#: ../../tutorial/interpreter.rst:161
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
"Na Uniksie, interpreter Pythona 3.x nie jest domyślnie zainstalowany z "
"plikiem wykonywalnym o nazwie ``python``, aby nie konfliktował on z "
"jednocześnie zainstalowanym plikiem wykonywalnym Pythona 2.x."
