# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/appetite.rst:5
msgid "Whetting Your Appetite"
msgstr "입맛 자극하기"

#: ../../tutorial/appetite.rst:7
msgid ""
"If you do much work on computers, eventually you find that there's some task "
"you'd like to automate.  For example, you may wish to perform a search-and-"
"replace over a large number of text files, or rename and rearrange a bunch "
"of photo files in a complicated way. Perhaps you'd like to write a small "
"custom database, or a specialized GUI application, or a simple game."
msgstr ""
"컴퓨터 앞에서 많은 일을 하다보면 자동화하고 싶은 작업들을  마주치게 됩니다. "
"많은 텍스트 파일에서 찾기 & 바꾸기를 한다던가, 사진 파일 더미들을 이런 저런 "
"방법으로 재정렬하거나 이름을 바꾸는 것과 같은 작업들 말입니다. 어쩌면 작은 전"
"용 데이터베이스나 좀 전문화된 GUI 애플리케이션, 아니면 간단한 게임을 작성하"
"고 싶을지도 모르죠."

#: ../../tutorial/appetite.rst:13
msgid ""
"If you're a professional software developer, you may have to work with "
"several C/C++/Java libraries but find the usual write/compile/test/re-"
"compile cycle is too slow.  Perhaps you're writing a test suite for such a "
"library and find writing the testing code a tedious task.  Or maybe you've "
"written a program that could use an extension language, and you don't want "
"to design and implement a whole new language for your application."
msgstr ""
"전문적인 소프트웨어 개발자라면 C/C++/Java 라이브러리를 사용하는 코드 작성, 컴"
"파일, 테스트, 그리고 다시 컴파일하는 일상적인 순환 작업이 너무 느리다고 느낄"
"지도 모릅니다. 어쩌면 그런 라이브러리를 위한 시험 도구를 작성하다가 테스트 코"
"드 작업이 지루하게 느껴질 수도 있습니다. 혹은 확장 언어를 사용할 수 있도록 프"
"로그램을 작성하고 있지만, 애플리케이션에서 사용할 전혀 새로운 언어를 설계하"
"고 구현하고 싶지 않을 겁니다."

#: ../../tutorial/appetite.rst:20
msgid "Python is just the language for you."
msgstr "Python은 바로 그런 분들을 위한 언어입니다."

#: ../../tutorial/appetite.rst:22
msgid ""
"You could write a Unix shell script or Windows batch files for some of these "
"tasks, but shell scripts are best at moving around files and changing text "
"data, not well-suited for GUI applications or games. You could write a C/C++/"
"Java program, but it can take a lot of development time to get even a first-"
"draft program.  Python is simpler to use, available on Windows, macOS, and "
"Unix operating systems, and will help you get the job done more quickly."
msgstr ""

#: ../../tutorial/appetite.rst:29
msgid ""
"Python is simple to use, but it is a real programming language, offering "
"much more structure and support for large programs than shell scripts or "
"batch files can offer.  On the other hand, Python also offers much more "
"error checking than C, and, being a *very-high-level language*, it has high-"
"level data types built in, such as flexible arrays and dictionaries.  "
"Because of its more general data types Python is applicable to a much larger "
"problem domain than Awk or even Perl, yet many things are at least as easy "
"in Python as in those languages."
msgstr ""
"Python은 사용하기 쉬우면서도, 그 자체로 하나의 프로그래밍 언어로서 셸 스크립"
"트나 배치 파일과 달리 큰 프로그램에서 필요한 구조와 지원을 제공합니다. 한편으"
"로는, Python이 C보다 더 많은 오류 검사를 수행하면서 동시에 *고수준 언어*적 특"
"징인 유연한 배열과 딕셔너리와 같은 고수준의 내장 자료형을 제공합니다. 범용성"
"이 넓은 자료형은 Awk나 Perl을 적용하기 어려운 문제 영역에 Python을 쉽게 적용"
"할 수 있습니다. 대체로 Python이 Awk와 Perl과 같은 언어보다 쉽습니다."

#: ../../tutorial/appetite.rst:37
msgid ""
"Python allows you to split your program into modules that can be reused in "
"other Python programs.  It comes with a large collection of standard modules "
"that you can use as the basis of your programs --- or as examples to start "
"learning to program in Python.  Some of these modules provide things like "
"file I/O, system calls, sockets, and even interfaces to graphical user "
"interface toolkits like Tk."
msgstr ""
"Python에서는 프로그램을 다른 Python 프로그램에서 재사용이 가능한 모듈로 나눌 "
"수 있습니다. 함께 제공되는 수많은 표준 모듈들을 사용자가 작성하는 프로그램의 "
"기초로 사용하거나 Python 프로그래밍을 배우는 시작 예제로써 사용할 수 있습니"
"다. 모듈에 따라 파일 I/O, 시스템 콜, 소켓과 같은 기능을 제공하고, Tk와 같은 "
"그래픽 사용자 인터페이스에 대한 인터페이스를 제공하는 모듈도 있습니다."

#: ../../tutorial/appetite.rst:44
msgid ""
"Python is an interpreted language, which can save you considerable time "
"during program development because no compilation and linking is necessary.  "
"The interpreter can be used interactively, which makes it easy to experiment "
"with features of the language, to write throw-away programs, or to test "
"functions during bottom-up program development. It is also a handy desk "
"calculator."
msgstr ""
"Python은 인터프리터 언어이므로 프로그램을 개발하는 동안 컴파일이나 링킹이 필"
"요 없어 상당한 시간을 절약할 수 있습니다. 인터프리터와의 상호작용을 통해 언어"
"가 제공하는 기능을 확인하거나, 그때그때 필요한 코드를 임의로 작성해 실행해보"
"거나, 상향식 프로그램 개발 과정에서 함수를 시험하는 과정이 쉽습니다. 또한 탁"
"상용 계산기이기도 합니다."

#: ../../tutorial/appetite.rst:50
msgid ""
"Python enables programs to be written compactly and readably.  Programs "
"written in Python are typically much shorter than equivalent C,  C++, or "
"Java programs, for several reasons:"
msgstr ""
"Python으로 작성한 프로그램은 가독성이 좋고 간결합니다. 다음과 같은 몇가지 이"
"유로 Python 프로그램은 C, C++ 혹은 Java 프로그램보다 코드가 짧습니다."

#: ../../tutorial/appetite.rst:54
msgid ""
"the high-level data types allow you to express complex operations in a "
"single statement;"
msgstr ""
"고수준의 자료형을 사용하므로 단 한 줄의 구문만으로 복잡한 연산 표현이 가능합"
"니다."

#: ../../tutorial/appetite.rst:57
msgid ""
"statement grouping is done by indentation instead of beginning and ending "
"brackets;"
msgstr ""
"여는 중괄호와 닫는 중괄호 대신에 들여쓰기를 사용해 구문을 그룹핑합니다."

#: ../../tutorial/appetite.rst:60
msgid "no variable or argument declarations are necessary."
msgstr "변수나 매개변수 선언이 필요없습니다."

#: ../../tutorial/appetite.rst:62
msgid ""
"Python is *extensible*: if you know how to program in C it is easy to add a "
"new built-in function or module to the interpreter, either to perform "
"critical operations at maximum speed, or to link Python programs to "
"libraries that may only be available in binary form (such as a vendor-"
"specific graphics library). Once you are really hooked, you can link the "
"Python interpreter into an application written in C and use it as an "
"extension or command language for that application."
msgstr ""
"Python은 *확장* 언어입니다. C 프로그래밍을 할 줄 안다면 빠른 속도로 중요한 연"
"산을 수행해야 한다거나, (특정한 그래픽 제조사 라이브러리처럼) 바이너리 형태"
"의 라이브러리에 Python 프로그램을 링킹해야 할 때 인터프리터에 새로운 내장 함"
"수나 모듈을 쉽게 추가할 수 있습니다. 일단 후킹이 가능해지면 Python 인터프리터"
"를 C 언어로 작성한 애플리케이션에 연결하여 확장하거나, 애플리케이션 명령 언어"
"로 사용할 수 있습니다."

#: ../../tutorial/appetite.rst:70
msgid ""
"By the way, the language is named after the BBC show \"Monty Python's Flying "
"Circus\" and has nothing to do with reptiles.  Making references to Monty "
"Python skits in documentation is not only allowed, it is encouraged!"
msgstr ""
"그런데말이죠, 이 언어는 BBC의 \"Monty Python's Flying Circus\" 쇼에서 이름을 "
"따왔습니다. 파충류와는 아무 상관이 없습니다. 문서에 Monty Python을 참조해두세"
"요. 이건 매우 바라는 바입니다!"

#: ../../tutorial/appetite.rst:74
msgid ""
"Now that you are all excited about Python, you'll want to examine it in some "
"more detail.  Since the best way to learn a language is to use it, the "
"tutorial invites you to play with the Python interpreter as you read."
msgstr ""
"이제 Pyhon에 대한 흥미가 생겼을테니 좀 더 알아보고 싶을 겁니다. 언어를 익히"
"는 가장 좋은 방법은 언어를 사용해보는 것입니다. 이 문서를 읽다보면 Python을 "
"만지작거리게 될 겁니다."

#: ../../tutorial/appetite.rst:78
msgid ""
"In the next chapter, the mechanics of using the interpreter are explained.  "
"This is rather mundane information, but essential for trying out the "
"examples shown later."
msgstr ""
"다음 장에서는 인터프리터를 사용하는 방법을 설명합니다. 다소 지루할 수 있지"
"만, 나중에 보게될 예제를 따라할 때 필요합니다."

#: ../../tutorial/appetite.rst:82
msgid ""
"The rest of the tutorial introduces various features of the Python language "
"and system through examples, beginning with simple expressions, statements "
"and data types, through functions and modules, and finally touching upon "
"advanced concepts like exceptions and user-defined classes."
msgstr ""
"이 문서의 나머지 부분에서는 예제를 통해 Python 언어와 구조가 갖는 여러 기능"
"을 다룹니다. 간단한 표현식, 구문, 자료형부터 시작해 함수와 모듈, 그리고 마지"
"막으로 예외와 사용자 정의 클래스와 같은 고급 개념에 접근해보도록 하겠습니다."
