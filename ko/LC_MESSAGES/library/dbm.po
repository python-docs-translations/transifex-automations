# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-21 15:15+0000\n"
"PO-Revision-Date: 2025-07-18 19:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`!dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr ""

#: ../../library/dbm.rst:11
msgid ":mod:`dbm` is a generic interface to variants of the DBM database:"
msgstr ""

#: ../../library/dbm.rst:13
msgid ":mod:`dbm.sqlite3`"
msgstr ""

#: ../../library/dbm.rst:14
msgid ":mod:`dbm.gnu`"
msgstr ""

#: ../../library/dbm.rst:15
msgid ":mod:`dbm.ndbm`"
msgstr ""

#: ../../library/dbm.rst:17
msgid ""
"If none of these modules are installed, the slow-but-simple implementation "
"in module :mod:`dbm.dumb` will be used.  There is a `third party interface "
"<https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley DB."
msgstr ""

#: ../../library/dbm.rst:24
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../../library/dbm.rst:31
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, :mod:`dbm.ndbm`, or :mod:"
"`dbm.dumb` --- should be used to open a given file."
msgstr ""

#: ../../library/dbm.rst:35
msgid "Return one of the following values:"
msgstr ""

#: ../../library/dbm.rst:37
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: ../../library/dbm.rst:38
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: ../../library/dbm.rst:39
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""

#: ../../library/dbm.rst:41 ../../library/dbm.rst:270 ../../library/dbm.rst:471
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:65
msgid "Open a database and return the corresponding database object."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr "parametry"

#: ../../library/dbm.rst:67
msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""

#: ../../library/dbm.rst:68 ../../library/dbm.rst:242
msgid "The database file to open."
msgstr ""

#: ../../library/dbm.rst:70
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""

#: ../../library/dbm.rst:75 ../../library/dbm.rst:182 ../../library/dbm.rst:374
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:76 ../../library/dbm.rst:184 ../../library/dbm.rst:247
#: ../../library/dbm.rst:375
msgid "``'r'`` (default): |flag_r|"
msgstr ""

#: ../../library/dbm.rst:77 ../../library/dbm.rst:185 ../../library/dbm.rst:248
#: ../../library/dbm.rst:376 ../../library/dbm.rst:452
msgid "``'w'``: |flag_w|"
msgstr ""

#: ../../library/dbm.rst:78 ../../library/dbm.rst:186 ../../library/dbm.rst:249
#: ../../library/dbm.rst:377
msgid "``'c'``: |flag_c|"
msgstr ""

#: ../../library/dbm.rst:79 ../../library/dbm.rst:187 ../../library/dbm.rst:250
#: ../../library/dbm.rst:378 ../../library/dbm.rst:454
msgid "``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:81 ../../library/dbm.rst:264 ../../library/dbm.rst:380
#: ../../library/dbm.rst:456
msgid "|mode_param_doc|"
msgstr ""

#: ../../library/dbm.rst:84
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:87
msgid ""
"The object returned by :func:`~dbm.open` supports the basic functionality of "
"mutable :term:`mappings <mapping>`; keys and their corresponding values can "
"be stored, retrieved, and deleted, and iteration, the :keyword:`in` operator "
"and methods :meth:`!keys`, :meth:`!get`, :meth:`!setdefault` and :meth:`!"
"clear` are available. The :meth:`!keys` method returns a list instead of a "
"view object. The :meth:`!setdefault` method requires two arguments."
msgstr ""

#: ../../library/dbm.rst:95
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""

#: ../../library/dbm.rst:99
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""

#: ../../library/dbm.rst:102
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""

#: ../../library/dbm.rst:106
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""

#: ../../library/dbm.rst:110
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""

#: ../../library/dbm.rst:114
msgid ":meth:`!clear` methods are now available for all :mod:`dbm` backends."
msgstr ""

#: ../../library/dbm.rst:118
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: ../../library/dbm.rst:121
msgid ""
"import dbm\n"
"\n"
"# Open database, creating it if necessary.\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # Record some values\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # Note that the keys are considered bytes now.\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # Notice how the value is now in bytes.\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # Often-used methods of the dict interface work too.\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # Storing a non-string key or value will raise an exception (most\n"
"    # likely a TypeError).\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# db is automatically closed when leaving the with statement."
msgstr ""

#: ../../library/dbm.rst:148
msgid "Module :mod:`shelve`"
msgstr "Модуль :mod:`shelve`"

#: ../../library/dbm.rst:149
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../../library/dbm.rst:152
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../../library/dbm.rst:155
msgid ":mod:`dbm.sqlite3` --- SQLite backend for dbm"
msgstr ""

#: ../../library/dbm.rst:163
msgid "**Source code:** :source:`Lib/dbm/sqlite3.py`"
msgstr ""

#: ../../library/dbm.rst:167
msgid ""
"This module uses the standard library :mod:`sqlite3` module to provide an "
"SQLite backend for the :mod:`dbm` module. The files created by :mod:`dbm."
"sqlite3` can thus be opened by :mod:`sqlite3`, or any other SQLite browser, "
"including the SQLite CLI."
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:3 ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Dostępność"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"Этот модуль не работает или недоступен в WebAssembly. См. :ref:`wasm-"
"availability` для получения дополнительной информации."

#: ../../library/dbm.rst:176
msgid "Open an SQLite database."
msgstr ""

#: ../../library/dbm.rst:178
msgid "The path to the database to be opened."
msgstr ""

#: ../../library/dbm.rst:189
msgid ""
"The Unix file access mode of the file (default: octal ``0o666``), used only "
"when the database has to be created."
msgstr ""

#: ../../library/dbm.rst:193
msgid ""
"The returned database object behaves similar to a mutable :term:`mapping`, "
"but the :meth:`!keys` method returns a list, and the :meth:`!setdefault` "
"method requires two arguments. It also supports a \"closing\" context "
"manager via the :keyword:`with` keyword."
msgstr ""

#: ../../library/dbm.rst:198 ../../library/dbm.rst:399
msgid "The following method is also provided:"
msgstr ""

#: ../../library/dbm.rst:202
msgid "Close the SQLite database."
msgstr ""

#: ../../library/dbm.rst:206
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: ../../library/dbm.rst:212
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr ""

#: ../../library/dbm.rst:216
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""

#: ../../library/dbm.rst:222 ../../library/dbm.rst:342
msgid ""
"The file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible and can not be used interchangeably."
msgstr ""

#: ../../includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"Этот модуль не поддерживается на :ref:`мобильных платформах <mobile-"
"availability>` или :ref:`платформах WebAssembly <wasm-availability>`."

#: ../../library/dbm.rst:229
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:235
msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr ""

#: ../../library/dbm.rst:240
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr ""

#: ../../library/dbm.rst:246
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""

#: ../../library/dbm.rst:252
msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr ""

#: ../../library/dbm.rst:255
msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr ""

#: ../../library/dbm.rst:257
msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr ""

#: ../../library/dbm.rst:259
msgid "``'u'``: Do not lock database."
msgstr ""

#: ../../library/dbm.rst:261
msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags` "
"member for a list of supported flag characters."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Raises"
msgstr "Поднимает"

#: ../../library/dbm.rst:267
msgid "If an invalid *flag* argument is passed."
msgstr ""

#: ../../library/dbm.rst:273
msgid ""
":class:`!gdbm` objects behave similar to mutable :term:`mappings <mapping>`, "
"but methods :meth:`!items`, :meth:`!values`, :meth:`!pop`, :meth:`!popitem`, "
"and :meth:`!update` are not supported, the :meth:`!keys` method returns a "
"list, and the :meth:`!setdefault` method requires two arguments. It also "
"supports a \"closing\" context manager via the :keyword:`with` keyword."
msgstr ""

#: ../../library/dbm.rst:280 ../../library/dbm.rst:393
msgid "Added the :meth:`!get` and :meth:`!setdefault` methods."
msgstr ""

#: ../../library/dbm.rst:283 ../../library/dbm.rst:396
msgid "Added the :meth:`!clear` method."
msgstr ""

#: ../../library/dbm.rst:286 ../../library/dbm.rst:479
msgid "The following methods are also provided:"
msgstr ""

#: ../../library/dbm.rst:290
msgid "Close the GDBM database."
msgstr ""

#: ../../library/dbm.rst:294
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../../library/dbm.rst:301
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""

#: ../../library/dbm.rst:305
msgid ""
"k = db.firstkey()\n"
"while k is not None:\n"
"    print(k)\n"
"    k = db.nextkey(k)"
msgstr ""

#: ../../library/dbm.rst:312
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../../library/dbm.rst:320
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: ../../library/dbm.rst:325
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: ../../library/dbm.rst:331
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr ""

#: ../../library/dbm.rst:335
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. This module can be used with the \"classic\" "
"NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: ../../library/dbm.rst:347
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""

#: ../../library/dbm.rst:356
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:362
msgid "Name of the NDBM implementation library used."
msgstr ""

#: ../../library/dbm.rst:367
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr ""

#: ../../library/dbm.rst:369
msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""

#: ../../library/dbm.rst:383
msgid "Accepts :term:`path-like object` for filename."
msgstr "Принимает :term:`путеподобный объект` в качестве имени файла."

#: ../../library/dbm.rst:386
msgid ""
":class:`!ndbm` objects behave similar to mutable :term:`mappings <mapping>`, "
"but methods :meth:`!items`, :meth:`!values`, :meth:`!pop`, :meth:`!popitem`, "
"and :meth:`!update` are not supported, the :meth:`!keys` method returns a "
"list, and the :meth:`!setdefault` method requires two arguments. It also "
"supports a \"closing\" context manager via the :keyword:`with` keyword."
msgstr ""

#: ../../library/dbm.rst:403
msgid "Close the NDBM database."
msgstr ""

#: ../../library/dbm.rst:407
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: ../../library/dbm.rst:412
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr ""

#: ../../library/dbm.rst:418
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""

#: ../../library/dbm.rst:425
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""

#: ../../library/dbm.rst:430
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr ""

#: ../../library/dbm.rst:434
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../library/dbm.rst:440
msgid "Open a :mod:`!dbm.dumb` database."
msgstr ""

#: ../../library/dbm.rst:442
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""

#: ../../library/dbm.rst:443
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""

#: ../../library/dbm.rst:446
msgid ":file:`{filename}.dat`"
msgstr ""

#: ../../library/dbm.rst:447
msgid ":file:`{filename}.dir`"
msgstr ""

#: ../../library/dbm.rst:450
msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:451
msgid "``'r'``: |flag_r|"
msgstr ""

#: ../../library/dbm.rst:453
msgid "``'c'`` (default): |flag_c|"
msgstr ""

#: ../../library/dbm.rst:460
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""

#: ../../library/dbm.rst:464
msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""

#: ../../library/dbm.rst:467
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""

#: ../../library/dbm.rst:474
msgid ""
"The returned database object behaves similar to a mutable :term:`mapping`, "
"but the :meth:`!keys` and :meth:`!items` methods return lists, and the :meth:"
"`!setdefault` method requires two arguments. It also supports a \"closing\" "
"context manager via the :keyword:`with` keyword."
msgstr ""

#: ../../library/dbm.rst:483
msgid "Close the database."
msgstr ""

#: ../../library/dbm.rst:487
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`shelve.Shelf.sync` method."
msgstr ""

#: ../../library/dbm.rst:414
msgid "databases"
msgstr ""
