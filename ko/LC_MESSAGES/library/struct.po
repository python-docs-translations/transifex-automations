# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
# Billy Billy <sangmo.gu@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Billy Billy <sangmo.gu@gmail.com>, 2023\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ":mod:`struct` --- 바이트열을 포장된 이진 데이터로 해석한다."

#: ../../library/struct.rst:7
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr "**소스코드:** :source:`Lib/struct.py`"

#: ../../library/struct.rst:15
msgid ""
"This module converts between Python values and C structs represented as "
"Python :class:`bytes` objects.  Compact :ref:`format strings <struct-format-"
"strings>` describe the intended conversions to/from Python values. The "
"module's functions and objects can be used for two largely distinct "
"applications, data exchange with external sources (files or network "
"connections), or data transfer between the Python application and the C "
"layer."
msgstr ""

#: ../../library/struct.rst:25
msgid ""
"When no prefix character is given, native mode is the default. It packs or "
"unpacks data based on the platform and compiler on which the Python "
"interpreter was built. The result of packing a given C struct includes pad "
"bytes which maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  In contrast, when "
"communicating data between external sources, the programmer is responsible "
"for defining byte ordering and padding between elements. See :ref:`struct-"
"alignment` for details."
msgstr ""

#: ../../library/struct.rst:35
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the :ref:"
"`bufferobjects` and provide either a readable or read-writable buffer.  The "
"most common types used for that purpose are :class:`bytes` and :class:"
"`bytearray`, but many other types that can be viewed as an array of bytes "
"implement the buffer protocol, so that they can be read/filled without "
"additional copying from a :class:`bytes` object."
msgstr ""
"몇몇 :mod:`struct` 함수(그리고 :class:`Struct`의 메소드)는 인수로 *buffer*를 "
"취한다. 이것은 :ref:`bufferobjects`를 구현한 객체의 참조로, 읽을 수 있는 또"
"는 읽고-쓸 수 있는 버퍼를 제공한다.  이 목적으로 가장 흔히 사용되는 자료형"
"은 :class:`bytes`와 :class:`bytearray`다. 그러나 바이트의 배열로 보여지는 다"
"른 많은 자료형들도 버퍼 프로토콜이 구현되어서 :class:`bytes` 객체로부터 추가"
"적인 복사없이 읽거나 채울 수 있다."

#: ../../library/struct.rst:44
msgid "Functions and Exceptions"
msgstr "함수와 예외"

#: ../../library/struct.rst:46
msgid "The module defines the following exception and functions:"
msgstr "모듈은 뒤따라 나오는 예외와 함수를 정의한다:"

#: ../../library/struct.rst:51
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""
"다양한 원인으로 발생되는 예외: 인수는 뭐가 문제인지를 설명하는 문자열이다."

#: ../../library/struct.rst:57
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according "
"to the format string *format*.  The arguments must match the values required "
"by the format exactly."
msgstr ""

#: ../../library/struct.rst:64
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""

#: ../../library/struct.rst:71
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``) "
"according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:79
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at "
"least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:87
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:93
msgid "Each iteration yields a tuple as specified by the format string."
msgstr "매 열거는 형식 문자열에 명시된 것과 같은 튜플을 내 놓는다."

#: ../../library/struct.rst:100
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""

#: ../../library/struct.rst:107
msgid "Format Strings"
msgstr "형식 문자열"

#: ../../library/struct.rst:109
msgid ""
"Format strings describe the data layout when packing and unpacking data.  "
"They are built up from :ref:`format characters<format-characters>`, which "
"specify the type of data being packed/unpacked.  In addition, special "
"characters control the :ref:`byte order, size and alignment<struct-"
"alignment>`. Each format string consists of an optional prefix character "
"which describes the overall properties of the data and one or more format "
"characters which describe the actual data values and padding."
msgstr ""

#: ../../library/struct.rst:121
msgid "Byte Order, Size, and Alignment"
msgstr "바이트 순서, 크기 그리고 정렬"

#: ../../library/struct.rst:123
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to "
"the rules used by the C compiler). This behavior is chosen so that the bytes "
"of a packed struct correspond exactly to the memory layout of the "
"corresponding C struct. Whether to use native byte ordering and padding or "
"standard formats depends on the application."
msgstr ""

#: ../../library/struct.rst:139
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to "
"the following table:"
msgstr ""
"그렇지 않으면, 형식 문자열의 첫번째 문자가 다음 표에 따라 포장된 데이터의 바"
"이트 순서, 크기 그리고 정렬를 가리키는데 사용될 수 있다:"

#: ../../library/struct.rst:144
msgid "Character"
msgstr "문자"

#: ../../library/struct.rst:144
msgid "Byte order"
msgstr "바이트 순서"

#: ../../library/struct.rst:144
msgid "Size"
msgstr "크기"

#: ../../library/struct.rst:144
msgid "Alignment"
msgstr "정렬"

#: ../../library/struct.rst:146
msgid "``@``"
msgstr "``@``"

#: ../../library/struct.rst:146 ../../library/struct.rst:148
msgid "native"
msgstr "현지"

#: ../../library/struct.rst:148
msgid "``=``"
msgstr "``=``"

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "standard"
msgstr "표준"

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "none"
msgstr "없음"

#: ../../library/struct.rst:150
msgid "``<``"
msgstr "``<``"

#: ../../library/struct.rst:150
msgid "little-endian"
msgstr "리틀-엔디안"

#: ../../library/struct.rst:152
msgid "``>``"
msgstr "``>``"

#: ../../library/struct.rst:152
msgid "big-endian"
msgstr "빅-엔디안"

#: ../../library/struct.rst:154
msgid "``!``"
msgstr "``!``"

#: ../../library/struct.rst:154
msgid "network (= big-endian)"
msgstr "네트워크 (= 빅-엔디안)"

#: ../../library/struct.rst:157
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr "첫번째 문자가 이들 중의 하나가 아니면, ``'@'``라고 본다."

#: ../../library/struct.rst:159
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-"
"endian; IBM z and many legacy architectures are big-endian. Use :data:`sys."
"byteorder` to check the endianness of your system."
msgstr ""

#: ../../library/struct.rst:164
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""
"현지 크기와 정렬은 C 컴파일러의 ``sizeof`` 수식을 이용해서 결정된다. 이것은 "
"항상 현지 바이트 순서와 결부된다."

#: ../../library/struct.rst:167
msgid ""
"Standard size depends only on the format character;  see the table in the :"
"ref:`format-characters` section."
msgstr ""
"표준 크기는 오직 형식 문자에 달렸다; :ref:`format-characters` 절의 표를 봐라."

#: ../../library/struct.rst:170
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order, "
"but the size and alignment of the latter is standardized."
msgstr ""
"``'@'``와 ``'='`` 사이의 차이에 주의: 둘 다 현지 바이트 순서에 사용된다, 그러"
"나 후자의 크기와 정렬은 표준을 따른다. "

#: ../../library/struct.rst:173
msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""

#: ../../library/struct.rst:176
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use "
"the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""
"비-현지 바이트 순서를 가리키는 방법은 없다 (강제로 바이트-바꿔치기); ``'<'``"
"나 ``'>'`` 중에서 적절한 것을 선택해서 사용하라."

#: ../../library/struct.rst:179 ../../library/struct.rst:258
msgid "Notes:"
msgstr "주의:"

#: ../../library/struct.rst:181
msgid ""
"Padding is only automatically added between successive structure members. No "
"padding is added at the beginning or the end of the encoded struct."
msgstr ""
"채움은 연속된 구조체 구성원들 사이에 자동으로 끼워진다. 부호화된 구조체의 시"
"작과 끝에는 채움이 없다."

#: ../../library/struct.rst:184
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<', "
"'>', '=', and '!'."
msgstr ""
"비-현지 크기와 정렬을 사용할 때는 채움이 없다. 예를 들어, '<', '>', '='나 "
"'!'와 함께일 때."

#: ../../library/struct.rst:187
msgid ""
"To align the end of a structure to the alignment requirement of a particular "
"type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""
"구조체의 끝을 특정한 자료형의 정렬에 필요한데로 정렬하려면 끝에 그 자료형을 "
"위한 코드를 0번 반복하는 형식을 넣는다. :ref:`struct-examples`를 봐라."

#: ../../library/struct.rst:195
msgid "Format Characters"
msgstr "형식 문자들"

#: ../../library/struct.rst:197
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is "
"platform-dependent."
msgstr ""
"형식 문자들은 다음과 같은 의미를 가진다; C와 Python 사이의 변환에서 값들은 부"
"여된 자료형이 분명해야 한다. '표준 크기' 칸은 표준 크기를 사용할 때 포장된 값"
"의 바이트 단위의 크기를 나타낸다; 이것은 형식 문자열이 ``'<'``, ``'>'``, "
"``'!'`` 또는 ``'='`` 중의 하나로 시작할 때 그렇다. 현지 크기를 사용할 때, 포"
"장된 값의 크기는 플랫폼-의존적이다."

#: ../../library/struct.rst:205
msgid "Format"
msgstr "형식"

#: ../../library/struct.rst:205
msgid "C Type"
msgstr "C 자료형"

#: ../../library/struct.rst:205
msgid "Python type"
msgstr "Python 자료형"

#: ../../library/struct.rst:205
msgid "Standard size"
msgstr "표준 크기"

#: ../../library/struct.rst:205
msgid "Notes"
msgstr "주석"

#: ../../library/struct.rst:207
msgid "``x``"
msgstr "``x``"

#: ../../library/struct.rst:207
msgid "pad byte"
msgstr "채움 바이트"

#: ../../library/struct.rst:207
msgid "no value"
msgstr "해당 없음"

#: ../../library/struct.rst:207
msgid "\\(7)"
msgstr "\\(7)"

#: ../../library/struct.rst:209
msgid "``c``"
msgstr "``c``"

#: ../../library/struct.rst:209
msgid ":c:expr:`char`"
msgstr ""

#: ../../library/struct.rst:209
msgid "bytes of length 1"
msgstr "길이 1인 bytes"

#: ../../library/struct.rst:209 ../../library/struct.rst:211
#: ../../library/struct.rst:213 ../../library/struct.rst:215
msgid "1"
msgstr "1"

#: ../../library/struct.rst:211
msgid "``b``"
msgstr "``b``"

#: ../../library/struct.rst:211
msgid ":c:expr:`signed char`"
msgstr ""

#: ../../library/struct.rst:211 ../../library/struct.rst:213
#: ../../library/struct.rst:217 ../../library/struct.rst:219
#: ../../library/struct.rst:221 ../../library/struct.rst:223
#: ../../library/struct.rst:225 ../../library/struct.rst:227
#: ../../library/struct.rst:229 ../../library/struct.rst:231
#: ../../library/struct.rst:234 ../../library/struct.rst:236
#: ../../library/struct.rst:248
msgid "integer"
msgstr "integer"

#: ../../library/struct.rst:211
msgid "\\(1), \\(2)"
msgstr ""

#: ../../library/struct.rst:213
msgid "``B``"
msgstr "``B``"

#: ../../library/struct.rst:213
msgid ":c:expr:`unsigned char`"
msgstr ""

#: ../../library/struct.rst:213 ../../library/struct.rst:217
#: ../../library/struct.rst:219 ../../library/struct.rst:221
#: ../../library/struct.rst:223 ../../library/struct.rst:225
#: ../../library/struct.rst:227 ../../library/struct.rst:229
#: ../../library/struct.rst:231
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/struct.rst:215
msgid "``?``"
msgstr "``?``"

#: ../../library/struct.rst:215
msgid ":c:expr:`_Bool`"
msgstr ""

#: ../../library/struct.rst:215
msgid "bool"
msgstr "bool"

#: ../../library/struct.rst:215
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/struct.rst:217
msgid "``h``"
msgstr "``h``"

#: ../../library/struct.rst:217
msgid ":c:expr:`short`"
msgstr ""

#: ../../library/struct.rst:217 ../../library/struct.rst:219
#: ../../library/struct.rst:238
msgid "2"
msgstr "2"

#: ../../library/struct.rst:219
msgid "``H``"
msgstr "``H``"

#: ../../library/struct.rst:219
msgid ":c:expr:`unsigned short`"
msgstr ""

#: ../../library/struct.rst:221
msgid "``i``"
msgstr "``i``"

#: ../../library/struct.rst:221
msgid ":c:expr:`int`"
msgstr ""

#: ../../library/struct.rst:221 ../../library/struct.rst:223
#: ../../library/struct.rst:225 ../../library/struct.rst:227
#: ../../library/struct.rst:240
msgid "4"
msgstr "4"

#: ../../library/struct.rst:223
msgid "``I``"
msgstr "``I``"

#: ../../library/struct.rst:223
msgid ":c:expr:`unsigned int`"
msgstr ""

#: ../../library/struct.rst:225
msgid "``l``"
msgstr "``l``"

#: ../../library/struct.rst:225
msgid ":c:expr:`long`"
msgstr ""

#: ../../library/struct.rst:227
msgid "``L``"
msgstr "``L``"

#: ../../library/struct.rst:227
msgid ":c:expr:`unsigned long`"
msgstr ""

#: ../../library/struct.rst:229
msgid "``q``"
msgstr "``q``"

#: ../../library/struct.rst:229
msgid ":c:expr:`long long`"
msgstr ""

#: ../../library/struct.rst:229 ../../library/struct.rst:231
#: ../../library/struct.rst:242
msgid "8"
msgstr "8"

#: ../../library/struct.rst:231
msgid "``Q``"
msgstr "``Q``"

#: ../../library/struct.rst:231
msgid ":c:expr:`unsigned long long`"
msgstr ""

#: ../../library/struct.rst:234
msgid "``n``"
msgstr "``n``"

#: ../../library/struct.rst:234
msgid ":c:expr:`ssize_t`"
msgstr ""

#: ../../library/struct.rst:234 ../../library/struct.rst:236
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/struct.rst:236
msgid "``N``"
msgstr "``N``"

#: ../../library/struct.rst:236
msgid ":c:expr:`size_t`"
msgstr ""

#: ../../library/struct.rst:238
msgid "``e``"
msgstr "``e``"

#: ../../library/struct.rst:238
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242
msgid "float"
msgstr "float"

#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/struct.rst:240
msgid "``f``"
msgstr "``f``"

#: ../../library/struct.rst:240
msgid ":c:expr:`float`"
msgstr ""

#: ../../library/struct.rst:242
msgid "``d``"
msgstr "``d``"

#: ../../library/struct.rst:242
msgid ":c:expr:`double`"
msgstr ""

#: ../../library/struct.rst:244
msgid "``s``"
msgstr "``s``"

#: ../../library/struct.rst:244 ../../library/struct.rst:246
msgid ":c:expr:`char[]`"
msgstr ""

#: ../../library/struct.rst:244 ../../library/struct.rst:246
msgid "bytes"
msgstr "bytes"

#: ../../library/struct.rst:244
msgid "\\(9)"
msgstr ""

#: ../../library/struct.rst:246
msgid "``p``"
msgstr "``p``"

#: ../../library/struct.rst:246
msgid "\\(8)"
msgstr ""

#: ../../library/struct.rst:248
msgid "``P``"
msgstr "``P``"

#: ../../library/struct.rst:248
msgid ":c:expr:`void \\*`"
msgstr ""

#: ../../library/struct.rst:248
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/struct.rst:251
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr "``'n'``과 ``'N'`` 형식에 대한 지원이 추가되었다."

#: ../../library/struct.rst:254
msgid "Added support for the ``'e'`` format."
msgstr "``'e'`` 형식 지원 추가."

#: ../../library/struct.rst:263
msgid ""
"The ``'?'`` conversion code corresponds to the :c:expr:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a :c:expr:"
"`char`. In standard mode, it is always represented by one byte."
msgstr ""

#: ../../library/struct.rst:268
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`__index__` method then that method is "
"called to convert the argument to an integer before packing."
msgstr ""
"정수 변환 코드 중의 하나로 정수가 아닌 것을 포장하려고 시도할 때, 정수가 아"
"닌 그것이 :meth:`__index__`  메소드를 가졌다면 포장 전에 인수를 정수로 바꾸"
"기 위해 그 메소드가 호출된다."

#: ../../library/struct.rst:272
msgid "Added use of the :meth:`__index__` method for non-integers."
msgstr ""

#: ../../library/struct.rst:276
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For "
"the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""
"``'n'``과 ``'N'`` 변환 코드는 현지 방식에서만 사용할 수 있다(바이트 순서 문자"
"로 아무것도 지정하지 않거나``'@'`` 선택 ). 표준 방식에 대해서는 다른 정수 형"
"식 중에서 응용프로그램에 맞는 것을 사용할 수 있다."

#: ../../library/struct.rst:282
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""
"변환 코드 ``'f'``, ``'d'`` 그리고 ``'e'``의 함축 표현은 각각 IEEE 754 "
"binary32, binary64 그리고 binary16을 따른다. 이건 플랫폼에 무관하다."

#: ../../library/struct.rst:288
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte "
"order character ``'='`` chooses to use little- or big-endian ordering based "
"on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""
"``'P'`` 형식 문자는 오직 현지 방식(바이트 순서 문자로 아무것도 지정하지 않거"
"나 ``'@'`` 선택)에서만 이용할 수 있다. 바이트 순서 문자 ``'='``는 호스트 시스"
"템에 기반하는 리틀- 또는 빅-엔디언를 결정한다. struct 모듈은 이것을 현지 방식"
"으로 해석하지 않는다. 그래서 ``'P'`` 형식은 이용할 수 없다."

#: ../../library/struct.rst:295
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored), "
"and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04`` "
"at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math "
"operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""
"The IEEE 754 binary16 \"half precision\" 형은 `IEEE 754 standard <ieee 754 "
"standard_>`_ IEEE 745 표준 2008 수정안에서 도입되었다. 이것은 부호 비트, 지"
"수 5-비트, 정밀도 11-비트 (실제 저장은 10비트)를 사용해서 거의 ``6.1e-05`` "
"와 ``6.5e+04`` 사이의 수를 표현할 수 있다. 이 형은 대부분의 C 컴파일러가 지원"
"하지 않는다: 보통의 기계에서 저장용으로 쓸 수는 있겠지만 계산용으로는 아니"
"다. 더 필요한 정보는 위키백과 `half-precision floating-point format <half "
"precision format_>`_ 에서 볼수 있다."

#: ../../library/struct.rst:305
msgid "When packing, ``'x'`` inserts one NUL byte."
msgstr ""

#: ../../library/struct.rst:308
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to :"
"func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all "
"are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""
"``'p'`` 형식 문자는 \"Pascal 문자열\"을 부호화한다. 이것은 횟수로 주어진 확정"
"된 수의 바이트에 저장된 가변-길이의 문자열를 말한다. 저장된 첫번째 바이트는 "
"문자열의 길이이거나 255 중 어느 쪽이든 더 작은 값이다. 문자열 바이트들은 그 "
"뒤에 이어진다. :func:`pack`에 주어진 문자열이 너무 길면(횟수 - 1보다 긴) 문자"
"열의 앞 쪽  ``횟수-1`` 바이트만 저장된다. 문자열이 ``횟수-1``보다 짧으면 정확"
"하게 횟수만큼의 바이트가 사용되도록 null 바이트가 채워진다. :func:`unpack`에"
"서 ``'p'`` 형식 문자는 `` 횟수``만큼의 바이트들을 다 소모한다. 그러나 반환된 "
"문자열은 결코 255바이트 이상을 담지 않는다는 것에 주의해야 한다."

#: ../../library/struct.rst:320
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string mapping to or from a single "
"Python byte string, while ``'10c'`` means 10 separate one byte character "
"elements (e.g., ``cccccccccc``) mapping to or from ten different Python byte "
"objects. (See :ref:`struct-examples` for a concrete demonstration of the "
"difference.) If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit. "
"For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""

#: ../../library/struct.rst:333
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""
"형식 문자에는 필수적인 항목인 반복 회수가 앞설 수 있다. 예를 들어, ``'4h'``라"
"는 형식 문자열은 정확하게 ``'hhhh'``와 같은 의미다."

#: ../../library/struct.rst:336
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""
"형식들 사이의 공백문자는 무시된다; 그렇지만 회수와 형식 사이에는 공백이 없어"
"야 한다."

#: ../../library/struct.rst:339
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then :exc:"
"`struct.error` is raised."
msgstr ""
"``x``라는 값을 정수 형식(``'b'``, ``'B'``, ``'h'``, ``'H'``, ``'i'``, "
"``'I'``, ``'l'``, ``'L'``, ``'q'``, ``'Q'``) 중의 하나로 포장할 때, ``x`` 값"
"이 사용하려는 형식의 범위를 벗어난다면  :exc:`struct.error` 예외가 발생한다."

#: ../../library/struct.rst:344
msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

#: ../../library/struct.rst:350
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""
"``'?'`` 형식 문자에서 반환값은 :const:`True`이거나 :const:`False`이다. 포장"
"할 때는 인수 객체의 논리값이 사용된다. 현지에서의 0 또는 1이거나  표준의 "
"bool 표현이 포장된다, 그리고 풀 때는 뭐든 0이 아닌 값이 ``True``가 된다."

#: ../../library/struct.rst:360
msgid "Examples"
msgstr "예제"

#: ../../library/struct.rst:363
msgid ""
"Native byte order examples (designated by the ``'@'`` format prefix or lack "
"of any prefix character) may not match what the reader's machine produces as "
"that depends on the platform and compiler."
msgstr ""

#: ../../library/struct.rst:368
msgid ""
"Pack and unpack integers of three different sizes, using big endian "
"ordering::"
msgstr ""

#: ../../library/struct.rst:379
msgid "Attempt to pack an integer which is too large for the defined field::"
msgstr ""

#: ../../library/struct.rst:386
msgid ""
"Demonstrate the difference between ``'s'`` and ``'c'`` format characters::"
msgstr ""

#: ../../library/struct.rst:394
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""
"풀린 필드는 변수에 할당하거나 이름있는 튜플로 감쌈으로써 이름을 부여할 수 있"
"다."

#: ../../library/struct.rst:405
msgid ""
"The ordering of format characters may have an impact on size in native mode "
"since padding is implicit. In standard mode, the user is responsible for "
"inserting any desired padding. Note in the first ``pack`` call below that "
"three NUL bytes were added after the packed ``'#'`` to align the following "
"integer on a four-byte boundary. In this example, the output was produced on "
"a little endian machine::"
msgstr ""

#: ../../library/struct.rst:422
msgid ""
"The following format ``'llh0l'`` results in two pad bytes being added at the "
"end, assuming the platform's longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../../library/struct.rst:432
msgid "Module :mod:`array`"
msgstr "모듈 :mod:`array`"

#: ../../library/struct.rst:432
msgid "Packed binary storage of homogeneous data."
msgstr "같은 종류의 데이터를 포장한 바이너리 저장소 "

#: ../../library/struct.rst:435
msgid "Module :mod:`json`"
msgstr ""

#: ../../library/struct.rst:435
msgid "JSON encoder and decoder."
msgstr ""

#: ../../library/struct.rst:437
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` 모듈"

#: ../../library/struct.rst:438
msgid "Python object serialization."
msgstr ""

#: ../../library/struct.rst:444
msgid "Applications"
msgstr ""

#: ../../library/struct.rst:446
msgid ""
"Two main applications for the :mod:`struct` module exist, data interchange "
"between Python and C code within an application or another application "
"compiled using the same compiler (:ref:`native formats<struct-native-"
"formats>`), and data interchange between applications using agreed upon data "
"layout (:ref:`standard formats<struct-standard-formats>`).  Generally "
"speaking, the format strings constructed for these two domains are distinct."
msgstr ""

#: ../../library/struct.rst:457
msgid "Native Formats"
msgstr ""

#: ../../library/struct.rst:459
msgid ""
"When constructing format strings which mimic native layouts, the compiler "
"and machine architecture determine byte ordering and padding. In such cases, "
"the ``@`` format character should be used to specify native byte ordering "
"and data sizes.  Internal pad bytes are normally inserted automatically.  It "
"is possible that a zero-repeat format code will be needed at the end of a "
"format string to round up to the correct byte boundary for proper alignment "
"of consective chunks of data."
msgstr ""

#: ../../library/struct.rst:467
msgid ""
"Consider these two simple examples (on a 64-bit, little-endian machine)::"
msgstr ""

#: ../../library/struct.rst:475
msgid ""
"Data is not padded to an 8-byte boundary at the end of the second format "
"string without the use of extra padding.  A zero-repeat format code solves "
"that problem::"
msgstr ""

#: ../../library/struct.rst:482
msgid ""
"The ``'x'`` format code can be used to specify the repeat, but for native "
"formats it is better to use a zero-repeat format like ``'0l'``."
msgstr ""

#: ../../library/struct.rst:485
msgid ""
"By default, native byte ordering and alignment is used, but it is better to "
"be explicit and use the ``'@'`` prefix character."
msgstr ""

#: ../../library/struct.rst:492
msgid "Standard Formats"
msgstr ""

#: ../../library/struct.rst:494
msgid ""
"When exchanging data beyond your process such as networking or storage, be "
"precise.  Specify the exact byte order, size, and alignment.  Do not assume "
"they match the native order of a particular machine. For example, network "
"byte order is big-endian, while many popular CPUs are little-endian.  By "
"defining this explicitly, the user need not care about the specifics of the "
"platform their code is running on. The first character should typically be "
"``<`` or ``>`` (or ``!``).  Padding is the responsibility of the "
"programmer.  The zero-repeat format character won't work.  Instead, the user "
"must explicitly add ``'x'`` pad bytes where needed.  Revisiting the examples "
"from the previous section, we have::"
msgstr ""

#: ../../library/struct.rst:521
msgid ""
"The above results (executed on a 64-bit machine) aren't guaranteed to match "
"when executed on different machines.  For example, the examples below were "
"executed on a 32-bit machine::"
msgstr ""

#: ../../library/struct.rst:536
msgid "Classes"
msgstr "클래스들"

#: ../../library/struct.rst:538
msgid "The :mod:`struct` module also defines the following type:"
msgstr ":mod:`struct` 모듈은 또한 다음의 자료형도 정의한다."

#: ../../library/struct.rst:543
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a ``Struct`` object once and calling "
"its methods is more efficient than calling module-level functions with the "
"same format since the format string is only compiled once."
msgstr ""

#: ../../library/struct.rst:550
msgid ""
"The compiled versions of the most recent format strings passed to :class:"
"`Struct` and the module-level functions are cached, so programs that use "
"only a few format strings needn't worry about reusing a single :class:"
"`Struct` instance."
msgstr ""

#: ../../library/struct.rst:555
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr "컴파일된 Struct 객체는 다음의 메소드와 속성을 지원한다."

#: ../../library/struct.rst:559
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""
"컴파일된 형식을 사용할 뿐 :func:`pack` 함수와 동일하다. (``len(result)``은 :"
"attr:`size`와 같을 것이다.)"

#: ../../library/struct.rst:565
msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr "컴파일된 형식을 사용할 뿐 :func:`pack_into` 함수와 동일하다."

#: ../../library/struct.rst:570
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""
"컴파일된 형식을 사용할 뿐 :func:`unpack` 함수와 동일하다. 바이트 단위 버퍼 크"
"기는 :attr:`size`와 같아야 한다."

#: ../../library/struct.rst:576
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least :"
"attr:`size`."
msgstr ""

#: ../../library/struct.rst:583
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""
"컴파일된 형식을 사용할 뿐 :func:`iter_unpack` 함수와 동일하다. 바이트 단위 버"
"퍼 크기는 :attr:`size`의 배수여야 한다."

#: ../../library/struct.rst:590
msgid "The format string used to construct this Struct object."
msgstr "Struct 객체를 생성할 때 사용한 형식 문자열이다."

#: ../../library/struct.rst:592
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

#: ../../library/struct.rst:597
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by "
"the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""
":attr:`format`에 상응하는 구조체의 (그리고 그런 이유로 :meth:`pack` 메소드로 "
"만들어진 bytes 객체의) 계산된 크기."
