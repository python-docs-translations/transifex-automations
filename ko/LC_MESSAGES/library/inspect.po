# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-17 14:21+0000\n"
"PO-Revision-Date: 2025-09-16 00:01+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Korean (https://app.transifex.com/python-doc/teams/5390/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/inspect.rst:2
msgid ":mod:`!inspect` --- Inspect live objects"
msgstr ""

#: ../../library/inspect.rst:15
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr ""

#: ../../library/inspect.rst:19
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""

#: ../../library/inspect.rst:26
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""

#: ../../library/inspect.rst:34
msgid "Types and members"
msgstr ""

#: ../../library/inspect.rst:36
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument "
"to :func:`getmembers`. They also help you determine when you can expect to "
"find the following special attributes (see :ref:`import-mod-attrs` for "
"module attributes):"
msgstr ""

#: ../../library/inspect.rst:46
msgid "Type"
msgstr "타입"

#: ../../library/inspect.rst:46
msgid "Attribute"
msgstr ""

#: ../../library/inspect.rst:46
msgid "Description"
msgstr ""

#: ../../library/inspect.rst:48
msgid "class"
msgstr "클래스"

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:295
msgid "__doc__"
msgstr ""

#: ../../library/inspect.rst:48 ../../library/inspect.rst:63
#: ../../library/inspect.rst:81 ../../library/inspect.rst:295
msgid "documentation string"
msgstr ""

#: ../../library/inspect.rst:50 ../../library/inspect.rst:65
#: ../../library/inspect.rst:83 ../../library/inspect.rst:248
#: ../../library/inspect.rst:265 ../../library/inspect.rst:278
#: ../../library/inspect.rst:297
msgid "__name__"
msgstr ""

#: ../../library/inspect.rst:50
msgid "name with which this class was defined"
msgstr ""

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:250
#: ../../library/inspect.rst:267 ../../library/inspect.rst:280
#: ../../library/inspect.rst:300
msgid "__qualname__"
msgstr ""

#: ../../library/inspect.rst:53 ../../library/inspect.rst:68
#: ../../library/inspect.rst:86 ../../library/inspect.rst:250
#: ../../library/inspect.rst:267 ../../library/inspect.rst:280
#: ../../library/inspect.rst:300
msgid "qualified name"
msgstr ""

#: ../../library/inspect.rst:55 ../../library/inspect.rst:78
#: ../../library/inspect.rst:116
msgid "__module__"
msgstr ""

#: ../../library/inspect.rst:55
msgid "name of module in which this class was defined"
msgstr ""

#: ../../library/inspect.rst:58 ../../library/inspect.rst:111
msgid "__type_params__"
msgstr ""

#: ../../library/inspect.rst:58
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"class"
msgstr ""

#: ../../library/inspect.rst:63
msgid "method"
msgstr "메서드"

#: ../../library/inspect.rst:65
msgid "name with which this method was defined"
msgstr ""

#: ../../library/inspect.rst:70
msgid "__func__"
msgstr ""

#: ../../library/inspect.rst:70
msgid "function object containing implementation of method"
msgstr ""

#: ../../library/inspect.rst:74 ../../library/inspect.rst:302
msgid "__self__"
msgstr ""

#: ../../library/inspect.rst:74
msgid "instance to which this method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:78
msgid "name of module in which this method was defined"
msgstr ""

#: ../../library/inspect.rst:81
msgid "function"
msgstr "함수"

#: ../../library/inspect.rst:83
msgid "name with which this function was defined"
msgstr ""

#: ../../library/inspect.rst:88
msgid "__code__"
msgstr ""

#: ../../library/inspect.rst:88
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

#: ../../library/inspect.rst:92
msgid "__defaults__"
msgstr ""

#: ../../library/inspect.rst:92
msgid "tuple of any default values for positional or keyword parameters"
msgstr ""

#: ../../library/inspect.rst:96
msgid "__kwdefaults__"
msgstr ""

#: ../../library/inspect.rst:96
msgid "mapping of any default values for keyword-only parameters"
msgstr ""

#: ../../library/inspect.rst:100
msgid "__globals__"
msgstr ""

#: ../../library/inspect.rst:100
msgid "global namespace in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:103
msgid "__builtins__"
msgstr ""

#: ../../library/inspect.rst:103
msgid "builtins namespace"
msgstr ""

#: ../../library/inspect.rst:105
msgid "__annotations__"
msgstr ""

#: ../../library/inspect.rst:105
msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""

#: ../../library/inspect.rst:111
msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"function"
msgstr ""

#: ../../library/inspect.rst:116
msgid "name of module in which this function was defined"
msgstr ""

#: ../../library/inspect.rst:119
msgid "traceback"
msgstr ""

#: ../../library/inspect.rst:119
msgid "tb_frame"
msgstr ""

#: ../../library/inspect.rst:119
msgid "frame object at this level"
msgstr ""

#: ../../library/inspect.rst:122
msgid "tb_lasti"
msgstr ""

#: ../../library/inspect.rst:122 ../../library/inspect.rst:144
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../../library/inspect.rst:125
msgid "tb_lineno"
msgstr ""

#: ../../library/inspect.rst:125 ../../library/inspect.rst:147
msgid "current line number in Python source code"
msgstr ""

#: ../../library/inspect.rst:128
msgid "tb_next"
msgstr ""

#: ../../library/inspect.rst:128
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../../library/inspect.rst:132 ../../library/inspect.rst:252
#: ../../library/inspect.rst:272 ../../library/inspect.rst:285
msgid "frame"
msgstr ""

#: ../../library/inspect.rst:132
msgid "f_back"
msgstr ""

#: ../../library/inspect.rst:132
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../../library/inspect.rst:135
msgid "f_builtins"
msgstr ""

#: ../../library/inspect.rst:135
msgid "builtins namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:138
msgid "f_code"
msgstr ""

#: ../../library/inspect.rst:138
msgid "code object being executed in this frame"
msgstr ""

#: ../../library/inspect.rst:141
msgid "f_globals"
msgstr ""

#: ../../library/inspect.rst:141
msgid "global namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:144
msgid "f_lasti"
msgstr ""

#: ../../library/inspect.rst:147
msgid "f_lineno"
msgstr ""

#: ../../library/inspect.rst:150
msgid "f_locals"
msgstr ""

#: ../../library/inspect.rst:150
msgid "local namespace seen by this frame"
msgstr ""

#: ../../library/inspect.rst:153
msgid "f_generator"
msgstr ""

#: ../../library/inspect.rst:153
msgid ""
"returns the generator or coroutine object that owns this frame, or ``None`` "
"if the frame is of a regular function"
msgstr ""

#: ../../library/inspect.rst:159
msgid "f_trace"
msgstr ""

#: ../../library/inspect.rst:159
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../../library/inspect.rst:162
msgid "f_trace_lines"
msgstr ""

#: ../../library/inspect.rst:162
msgid ""
"indicate whether a tracing event is triggered for each source source line"
msgstr ""

#: ../../library/inspect.rst:167
msgid "f_trace_opcodes"
msgstr ""

#: ../../library/inspect.rst:167
msgid "indicate whether per-opcode events are requested"
msgstr ""

#: ../../library/inspect.rst:171
msgid "clear()"
msgstr ""

#: ../../library/inspect.rst:171
msgid "used to clear all references to local variables"
msgstr ""

#: ../../library/inspect.rst:175 ../../library/inspect.rst:259
#: ../../library/inspect.rst:276 ../../library/inspect.rst:289
msgid "code"
msgstr ""

#: ../../library/inspect.rst:175
msgid "co_argcount"
msgstr ""

#: ../../library/inspect.rst:175
msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""

#: ../../library/inspect.rst:180
msgid "co_code"
msgstr ""

#: ../../library/inspect.rst:180
msgid "string of raw compiled bytecode"
msgstr ""

#: ../../library/inspect.rst:183
msgid "co_cellvars"
msgstr ""

#: ../../library/inspect.rst:183
msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr ""

#: ../../library/inspect.rst:187
msgid "co_consts"
msgstr ""

#: ../../library/inspect.rst:187
msgid "tuple of constants used in the bytecode"
msgstr ""

#: ../../library/inspect.rst:190
msgid "co_filename"
msgstr ""

#: ../../library/inspect.rst:190
msgid "name of file in which this code object was created"
msgstr ""

#: ../../library/inspect.rst:194
msgid "co_firstlineno"
msgstr ""

#: ../../library/inspect.rst:194
msgid "number of first line in Python source code"
msgstr ""

#: ../../library/inspect.rst:197
msgid "co_flags"
msgstr ""

#: ../../library/inspect.rst:197
msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""

#: ../../library/inspect.rst:201
msgid "co_lnotab"
msgstr ""

#: ../../library/inspect.rst:201
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

#: ../../library/inspect.rst:205
msgid "co_freevars"
msgstr ""

#: ../../library/inspect.rst:205
msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr ""

#: ../../library/inspect.rst:209
msgid "co_posonlyargcount"
msgstr ""

#: ../../library/inspect.rst:209
msgid "number of positional only arguments"
msgstr ""

#: ../../library/inspect.rst:212
msgid "co_kwonlyargcount"
msgstr ""

#: ../../library/inspect.rst:212
msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr ""

#: ../../library/inspect.rst:216
msgid "co_name"
msgstr ""

#: ../../library/inspect.rst:216
msgid "name with which this code object was defined"
msgstr ""

#: ../../library/inspect.rst:219
msgid "co_qualname"
msgstr ""

#: ../../library/inspect.rst:219
msgid "fully qualified name with which this code object was defined"
msgstr ""

#: ../../library/inspect.rst:223
msgid "co_names"
msgstr ""

#: ../../library/inspect.rst:223
msgid "tuple of names other than arguments and function locals"
msgstr ""

#: ../../library/inspect.rst:227
msgid "co_nlocals"
msgstr ""

#: ../../library/inspect.rst:227
msgid "number of local variables"
msgstr ""

#: ../../library/inspect.rst:229
msgid "co_stacksize"
msgstr ""

#: ../../library/inspect.rst:229
msgid "virtual machine stack space required"
msgstr ""

#: ../../library/inspect.rst:232
msgid "co_varnames"
msgstr ""

#: ../../library/inspect.rst:232
msgid "tuple of names of arguments and local variables"
msgstr ""

#: ../../library/inspect.rst:236
msgid "co_lines()"
msgstr ""

#: ../../library/inspect.rst:236
msgid "returns an iterator that yields successive bytecode ranges"
msgstr ""

#: ../../library/inspect.rst:240
msgid "co_positions()"
msgstr ""

#: ../../library/inspect.rst:240
msgid ""
"returns an iterator of source code positions for each bytecode instruction"
msgstr ""

#: ../../library/inspect.rst:244
msgid "replace()"
msgstr ""

#: ../../library/inspect.rst:244
msgid "returns a copy of the code object with new values"
msgstr ""

#: ../../library/inspect.rst:248
msgid "generator"
msgstr "제너레이터"

#: ../../library/inspect.rst:248 ../../library/inspect.rst:265
#: ../../library/inspect.rst:278
msgid "name"
msgstr ""

#: ../../library/inspect.rst:252
msgid "gi_frame"
msgstr ""

#: ../../library/inspect.rst:254
msgid "gi_running"
msgstr ""

#: ../../library/inspect.rst:254 ../../library/inspect.rst:274
msgid "is the generator running?"
msgstr ""

#: ../../library/inspect.rst:256
msgid "gi_suspended"
msgstr ""

#: ../../library/inspect.rst:256
msgid "is the generator suspended?"
msgstr ""

#: ../../library/inspect.rst:259
msgid "gi_code"
msgstr ""

#: ../../library/inspect.rst:261
msgid "gi_yieldfrom"
msgstr ""

#: ../../library/inspect.rst:261
msgid "object being iterated by ``yield from``, or ``None``"
msgstr ""

#: ../../library/inspect.rst:265
msgid "async generator"
msgstr ""

#: ../../library/inspect.rst:269
msgid "ag_await"
msgstr ""

#: ../../library/inspect.rst:269 ../../library/inspect.rst:282
msgid "object being awaited on, or ``None``"
msgstr ""

#: ../../library/inspect.rst:272
msgid "ag_frame"
msgstr ""

#: ../../library/inspect.rst:274
msgid "ag_running"
msgstr ""

#: ../../library/inspect.rst:276
msgid "ag_code"
msgstr ""

#: ../../library/inspect.rst:278
msgid "coroutine"
msgstr "코루틴"

#: ../../library/inspect.rst:282
msgid "cr_await"
msgstr ""

#: ../../library/inspect.rst:285
msgid "cr_frame"
msgstr ""

#: ../../library/inspect.rst:287
msgid "cr_running"
msgstr ""

#: ../../library/inspect.rst:287
msgid "is the coroutine running?"
msgstr ""

#: ../../library/inspect.rst:289
msgid "cr_code"
msgstr ""

#: ../../library/inspect.rst:291
msgid "cr_origin"
msgstr ""

#: ../../library/inspect.rst:291
msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr ""

#: ../../library/inspect.rst:295
msgid "builtin"
msgstr ""

#: ../../library/inspect.rst:297
msgid "original name of this function or method"
msgstr ""

#: ../../library/inspect.rst:302
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../../library/inspect.rst:309
msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""

#: ../../library/inspect.rst:311
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""

#: ../../library/inspect.rst:316
msgid "Add ``cr_origin`` attribute to coroutines."
msgstr ""

#: ../../library/inspect.rst:320
msgid "Add ``__builtins__`` attribute to functions."
msgstr ""

#: ../../library/inspect.rst:324
msgid "Add ``f_generator`` attribute to frames."
msgstr ""

#: ../../library/inspect.rst:328
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which "
"the predicate returns a true value are included."
msgstr ""

#: ../../library/inspect.rst:335
msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`~object.__dir__`."
msgstr ""

#: ../../library/inspect.rst:342
msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""

#: ../../library/inspect.rst:349
msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""

#: ../../library/inspect.rst:360
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""

#: ../../library/inspect.rst:366
msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""

#: ../../library/inspect.rst:370
msgid "The function is based directly on :mod:`importlib`."
msgstr ""

#: ../../library/inspect.rst:376
msgid "Return ``True`` if the object is a module."
msgstr ""

#: ../../library/inspect.rst:381
msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""

#: ../../library/inspect.rst:387
msgid "Return ``True`` if the object is a bound method written in Python."
msgstr ""

#: ../../library/inspect.rst:392
msgid "Return ``True`` if the object is a :term:`package`."
msgstr ""

#: ../../library/inspect.rst:399
msgid ""
"Return ``True`` if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""

#: ../../library/inspect.rst:405
msgid "Return ``True`` if the object is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:407
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:411
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a Python generator function."
msgstr ""

#: ../../library/inspect.rst:417
msgid "Return ``True`` if the object is a generator."
msgstr ""

#: ../../library/inspect.rst:422
msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax), a :func:`functools.partial` "
"wrapping a :term:`coroutine function`, or a sync function marked "
"with :func:`markcoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:429
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr ""

#: ../../library/inspect.rst:433
msgid ""
"Sync functions marked with :func:`markcoroutinefunction` now return ``True``."
msgstr ""

#: ../../library/inspect.rst:437 ../../library/inspect.rst:507
msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a :term:`coroutine function`."
msgstr ""

#: ../../library/inspect.rst:444
msgid ""
"Decorator to mark a callable as a :term:`coroutine function` if it would not "
"otherwise be detected by :func:`iscoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:447
msgid ""
"This may be of use for sync functions that return a :term:`coroutine`, if "
"the function is passed to an API that requires :func:`iscoroutinefunction`."
msgstr ""

#: ../../library/inspect.rst:450
msgid ""
"When possible, using an :keyword:`async def` function is preferred. Also "
"acceptable is calling the function and testing the return "
"with :func:`iscoroutine`."
msgstr ""

#: ../../library/inspect.rst:459
msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by "
"an :keyword:`async def` function."
msgstr ""

#: ../../library/inspect.rst:467
msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""

#: ../../library/inspect.rst:469
msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators:"
msgstr ""

#: ../../library/inspect.rst:472
msgid ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"
msgstr ""

#: ../../library/inspect.rst:490
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function, "
"for example:"
msgstr ""

#: ../../library/inspect.rst:493
msgid ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"
msgstr ""

#: ../../library/inspect.rst:503
msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is an :term:`asynchronous generator` function."
msgstr ""

#: ../../library/inspect.rst:513
msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""

#: ../../library/inspect.rst:520
msgid "Return ``True`` if the object is a traceback."
msgstr ""

#: ../../library/inspect.rst:525
msgid "Return ``True`` if the object is a frame."
msgstr ""

#: ../../library/inspect.rst:530
msgid "Return ``True`` if the object is a code."
msgstr ""

#: ../../library/inspect.rst:535
msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""

#: ../../library/inspect.rst:540
msgid ""
"Return ``True`` if the type of object is a :class:`~types.MethodWrapperType`."
msgstr ""

#: ../../library/inspect.rst:542
msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such "
"as :meth:`~object.__str__`, :meth:`~object.__eq__` "
"and :meth:`~object.__repr__`."
msgstr ""

#: ../../library/inspect.rst:550
msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""

#: ../../library/inspect.rst:555
msgid "Return ``True`` if the object is an abstract base class."
msgstr ""

#: ../../library/inspect.rst:560
msgid ""
"Return ``True`` if the object is a method descriptor, but not "
"if :func:`ismethod`, :func:`isclass`, :func:`isfunction` "
"or :func:`isbuiltin` are true."
msgstr ""

#: ../../library/inspect.rst:564
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method, but not a :meth:`~object.__set__` "
"method or a :meth:`~object.__delete__` method.  Beyond that, the set of "
"attributes varies.  A :attr:`~definition.__name__` attribute is usually "
"sensible, and :attr:`~definition.__doc__` often is."
msgstr ""

#: ../../library/inspect.rst:570
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having "
"the :attr:`~method.__func__` attribute (etc) when an object "
"passes :func:`ismethod`."
msgstr ""

#: ../../library/inspect.rst:576
msgid ""
"This function no longer incorrectly reports objects "
"with :meth:`~object.__get__` and :meth:`~object.__delete__`, but "
"not :meth:`~object.__set__`, as being method descriptors (such objects are "
"data descriptors, not method descriptors)."
msgstr ""

#: ../../library/inspect.rst:584
msgid "Return ``True`` if the object is a data descriptor."
msgstr ""

#: ../../library/inspect.rst:586
msgid ""
"Data descriptors have a :attr:`~object.__set__` or "
"a :attr:`~object.__delete__` method. Examples are properties (defined in "
"Python), getsets, and members.  The latter two are defined in C and there "
"are more specific tests available for those types, which is robust across "
"Python implementations.  Typically, data descriptors will also "
"have :attr:`~definition.__name__` and :attr:`!__doc__` attributes "
"(properties, getsets, and members have both of these attributes), but this "
"is not guaranteed."
msgstr ""

#: ../../library/inspect.rst:597
msgid "Return ``True`` if the object is a getset descriptor."
msgstr ""

#: ../../library/inspect.rst:601
msgid ""
"getsets are attributes defined in extension modules "
"via :c:type:`PyGetSetDef` structures.  For Python implementations without "
"such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:608
msgid "Return ``True`` if the object is a member descriptor."
msgstr ""

#: ../../library/inspect.rst:612
msgid ""
"Member descriptors are attributes defined in extension modules "
"via :c:type:`PyMemberDef` structures.  For Python implementations without "
"such types, this method will always return ``False``."
msgstr ""

#: ../../library/inspect.rst:620
msgid "Retrieving source code"
msgstr ""

#: ../../library/inspect.rst:624
msgid ""
"Get the documentation string for an object, cleaned up "
"with :func:`cleandoc`. If the documentation string for an object is not "
"provided and the object is a class, a method, a property or a descriptor, "
"retrieve the documentation string from the inheritance hierarchy. Return "
"``None`` if the documentation string is invalid or missing."
msgstr ""

#: ../../library/inspect.rst:630
msgid "Documentation strings are now inherited if not overridden."
msgstr ""

#: ../../library/inspect.rst:636
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""

#: ../../library/inspect.rst:645
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../../library/inspect.rst:652
msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr ""

#: ../../library/inspect.rst:658
msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with "
"a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:666
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved. A :exc:`TypeError` is raised if the object is a "
"built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:675 ../../library/inspect.rst:689
msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""

#: ../../library/inspect.rst:682
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved. A :exc:`TypeError` is raised if the "
"object is a built-in module, class, or function."
msgstr ""

#: ../../library/inspect.rst:696
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""

#: ../../library/inspect.rst:699
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""

#: ../../library/inspect.rst:708
msgid "Introspecting callables with the Signature object"
msgstr ""

#: ../../library/inspect.rst:712
msgid ""
"The :class:`Signature` object represents the call signature of a callable "
"object and its return annotation. To retrieve a :class:`!Signature` object, "
"use the :func:`!signature` function."
msgstr ""

#: ../../library/inspect.rst:719
msgid "Return a :class:`Signature` object for the given *callable*:"
msgstr ""

#: ../../library/inspect.rst:721
msgid ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"
msgstr ""

#: ../../library/inspect.rst:738
msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""

#: ../../library/inspect.rst:741
msgid ""
"If some of the annotations are strings (e.g., because ``from __future__ "
"import annotations`` was used), :func:`signature` will attempt to "
"automatically un-stringize the annotations "
"using :func:`annotationlib.get_annotations`.  The *globals*, *locals*, and "
"*eval_str* parameters are passed into :func:`!annotationlib.get_annotations` "
"when resolving the annotations; see the documentation for :func:`!"
"annotationlib.get_annotations` for instructions on how to use these "
"parameters. A member of the :class:`annotationlib.Format` enum can be passed "
"to the *annotation_format* parameter to control the format of the returned "
"annotations. For example, use "
"``annotation_format=annotationlib.Format.STRING`` to return annotations in "
"string format."
msgstr ""

#: ../../library/inspect.rst:755
msgid ""
"Raises :exc:`ValueError` if no signature can be provided, "
"and :exc:`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and *eval_str* is not false, the ``eval()`` "
"call(s) to un-stringize the annotations "
"in :func:`annotationlib.get_annotations` could potentially raise any kind of "
"exception."
msgstr ""

#: ../../library/inspect.rst:761
msgid ""
"A slash (/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""

#: ../../library/inspect.rst:765
msgid ""
"The *follow_wrapped* parameter was added. Pass ``False`` to get a signature "
"of *callable* specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""

#: ../../library/inspect.rst:771 ../../library/inspect.rst:907
msgid "The *globals*, *locals*, and *eval_str* parameters were added."
msgstr ""

#: ../../library/inspect.rst:774
msgid "The *annotation_format* parameter was added."
msgstr ""

#: ../../library/inspect.rst:779
msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""

#: ../../library/inspect.rst:785
msgid ""
"If the passed object has a :attr:`!__signature__` attribute, we may use it "
"to create the signature. The exact semantics are an implementation detail "
"and are subject to unannounced changes. Consult the source code for current "
"semantics."
msgstr ""

#: ../../library/inspect.rst:793
msgid ""
"A :class:`!Signature` object represents the call signature of a function and "
"its return annotation.  For each parameter accepted by the function it "
"stores a :class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""

#: ../../library/inspect.rst:798
msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""

#: ../../library/inspect.rst:804
msgid ""
"The optional *return_annotation* argument can be an arbitrary Python object. "
"It represents the \"return\" annotation of the callable."
msgstr ""

#: ../../library/inspect.rst:807
msgid ""
":class:`!Signature` objects are *immutable*.  Use :meth:`Signature.replace` "
"or :func:`copy.replace` to make a modified copy."
msgstr ""

#: ../../library/inspect.rst:810
msgid ":class:`!Signature` objects are now picklable and :term:`hashable`."
msgstr ""

#: ../../library/inspect.rst:815
msgid "A special class-level marker to specify absence of a return annotation."
msgstr ""

#: ../../library/inspect.rst:819
msgid ""
"An ordered mapping of parameters' names to the "
"corresponding :class:`Parameter` objects.  Parameters appear in strict "
"definition order, including keyword-only parameters."
msgstr ""

#: ../../library/inspect.rst:823 ../../library/inspect.rst:1187
msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""

#: ../../library/inspect.rst:830
msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""

#: ../../library/inspect.rst:835
msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""

#: ../../library/inspect.rst:841
msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""

#: ../../library/inspect.rst:848
msgid ""
"Create a new :class:`Signature` instance based on the "
"instance :meth:`replace` was invoked on. It is possible to pass different "
"*parameters* and/or *return_annotation* to override the corresponding "
"properties of the base signature.  To remove ``return_annotation`` from the "
"copied :class:`!Signature`, pass in :attr:`Signature.empty`."
msgstr ""

#: ../../library/inspect.rst:856
msgid ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""
msgstr ""

#: ../../library/inspect.rst:866
msgid ""
":class:`Signature` objects are also supported by the generic "
"function :func:`copy.replace`."
msgstr ""

#: ../../library/inspect.rst:871
msgid "Create a string representation of the :class:`Signature` object."
msgstr ""

#: ../../library/inspect.rst:873
msgid ""
"If *max_width* is passed, the method will attempt to fit the signature into "
"lines of at most *max_width* characters. If the signature is longer than "
"*max_width*, all parameters will be on separate lines."
msgstr ""

#: ../../library/inspect.rst:878
msgid ""
"If *quote_annotation_strings* is False, :term:`annotations <annotation>` in "
"the signature are displayed without opening and closing quotation marks if "
"they are strings. This is useful if the signature was created with "
"the :attr:`~annotationlib.Format.STRING` format or if ``from __future__ "
"import annotations`` was used."
msgstr ""

#: ../../library/inspect.rst:886
msgid "The *unquote_annotations* parameter was added."
msgstr ""

#: ../../library/inspect.rst:891
msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"*obj*."
msgstr ""

#: ../../library/inspect.rst:894
msgid "This method simplifies subclassing of :class:`Signature`:"
msgstr ""

#: ../../library/inspect.rst:896
msgid ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"
msgstr ""

#: ../../library/inspect.rst:903
msgid "Its behavior is otherwise identical to that of :func:`signature`."
msgstr ""

#: ../../library/inspect.rst:913
msgid ""
":class:`!Parameter` objects are *immutable*. Instead of modifying a :class:`!"
"Parameter` object, you can use :meth:`Parameter.replace` "
"or :func:`copy.replace` to create a modified copy."
msgstr ""

#: ../../library/inspect.rst:917
msgid "Parameter objects are now picklable and :term:`hashable`."
msgstr ""

#: ../../library/inspect.rst:922
msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""

#: ../../library/inspect.rst:927
msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""

#: ../../library/inspect.rst:932
msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""

#: ../../library/inspect.rst:936
msgid ""
"These parameter names are now exposed by this module as names like "
"``implicit0``."
msgstr ""

#: ../../library/inspect.rst:942
msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr ""

#: ../../library/inspect.rst:947
msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""

#: ../../library/inspect.rst:952
msgid ""
"Describes how argument values are bound to the parameter.  The possible "
"values are accessible via :class:`Parameter` (like "
"``Parameter.KEYWORD_ONLY``), and support comparison and ordering, in the "
"following order:"
msgstr ""

#: ../../library/inspect.rst:959
msgid "Name"
msgstr ""

#: ../../library/inspect.rst:959
msgid "Meaning"
msgstr "의미"

#: ../../library/inspect.rst:961
msgid "*POSITIONAL_ONLY*"
msgstr ""

#: ../../library/inspect.rst:961
msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr ""

#: ../../library/inspect.rst:966
msgid "*POSITIONAL_OR_KEYWORD*"
msgstr ""

#: ../../library/inspect.rst:966
msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""

#: ../../library/inspect.rst:971
msgid "*VAR_POSITIONAL*"
msgstr ""

#: ../../library/inspect.rst:971
msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""

#: ../../library/inspect.rst:976
msgid "*KEYWORD_ONLY*"
msgstr ""

#: ../../library/inspect.rst:976
msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""

#: ../../library/inspect.rst:981
msgid "*VAR_KEYWORD*"
msgstr ""

#: ../../library/inspect.rst:981
msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""

#: ../../library/inspect.rst:987
msgid "Example: print all keyword-only arguments without default values:"
msgstr ""

#: ../../library/inspect.rst:989
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"
msgstr ""

#: ../../library/inspect.rst:1003
msgid "Describes an enum value of :attr:`Parameter.kind`."
msgstr ""

#: ../../library/inspect.rst:1007
msgid "Example: print all descriptions of arguments:"
msgstr ""

#: ../../library/inspect.rst:1009
msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"
msgstr ""

#: ../../library/inspect.rst:1024
msgid ""
"Create a new :class:`Parameter` instance based on the instance replaced was "
"invoked on.  To override a :class:`!Parameter` attribute, pass the "
"corresponding argument.  To remove a default value or/and an annotation from "
"a :class:`!Parameter`, pass :attr:`Parameter.empty`."
msgstr ""

#: ../../library/inspect.rst:1029
msgid ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""
msgstr ""

#: ../../library/inspect.rst:1042
msgid ""
":class:`Parameter` objects are also supported by the generic "
"function :func:`copy.replace`."
msgstr ""

#: ../../library/inspect.rst:1045
msgid ""
"In Python 3.3 :class:`Parameter` objects were allowed to have ``name`` set "
"to ``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no "
"longer permitted."
msgstr ""

#: ../../library/inspect.rst:1052
msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""

#: ../../library/inspect.rst:1057
msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect "
"in :attr:`args` and :attr:`kwargs`."
msgstr ""

#: ../../library/inspect.rst:1061
msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""

#: ../../library/inspect.rst:1066
msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, "
"use :meth:`BoundArguments.apply_defaults` to add them."
msgstr ""

#: ../../library/inspect.rst:1071
msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of "
"type :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/inspect.rst:1077
msgid ""
"A tuple of positional arguments values.  Dynamically computed from "
"the :attr:`arguments` attribute."
msgstr ""

#: ../../library/inspect.rst:1082
msgid ""
"A dict of keyword arguments values.  Dynamically computed from "
"the :attr:`arguments` attribute.  Arguments that can be passed positionally "
"are included in :attr:`args` instead."
msgstr ""

#: ../../library/inspect.rst:1088
msgid "A reference to the parent :class:`Signature` object."
msgstr ""

#: ../../library/inspect.rst:1092
msgid "Set default values for missing arguments."
msgstr ""

#: ../../library/inspect.rst:1094
msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""

#: ../../library/inspect.rst:1097
msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""

#: ../../library/inspect.rst:1100
msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"
msgstr ""

#: ../../library/inspect.rst:1110
msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions:"
msgstr ""

#: ../../library/inspect.rst:1113
msgid ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"
msgstr ""

#: ../../library/inspect.rst:1125
msgid ":pep:`362` - Function Signature Object."
msgstr ""

#: ../../library/inspect.rst:1126
msgid "The detailed specification, implementation details and examples."
msgstr ""

#: ../../library/inspect.rst:1132
msgid "Classes and functions"
msgstr ""

#: ../../library/inspect.rst:1136
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""

#: ../../library/inspect.rst:1147
msgid ""
"Get the names and default values of a Python function's parameters.  "
"A :term:`named tuple` is returned:"
msgstr ""

#: ../../library/inspect.rst:1150
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""

#: ../../library/inspect.rst:1153
msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""

#: ../../library/inspect.rst:1168
msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""

#: ../../library/inspect.rst:1175
msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""

#: ../../library/inspect.rst:1180
msgid ""
"This method was previously documented as deprecated in favour "
"of :func:`signature` in Python 3.5, but that decision has been reversed in "
"order to restore a clearly supported standard interface for single-source "
"Python 2/3 code migrating away from the legacy :func:`!getargspec` API."
msgstr ""

#: ../../library/inspect.rst:1195
msgid ""
"Get information about arguments passed into a particular frame.  "
"A :term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is "
"returned. *args* is a list of the argument names.  *varargs* and *keywords* "
"are the names of the ``*`` and ``**`` arguments or ``None``.  *locals* is "
"the locals dictionary of the given frame."
msgstr ""

#: ../../library/inspect.rst:1202 ../../library/inspect.rst:1212
msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr ""

#: ../../library/inspect.rst:1207
msgid ""
"Format a pretty argument spec from the four values returned "
"by :func:`getargvalues`.  The format\\* arguments are the corresponding "
"optional formatting functions that are called to turn names and values into "
"strings."
msgstr ""

#: ../../library/inspect.rst:1217
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

#: ../../library/inspect.rst:1225
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example:"
msgstr ""

#: ../../library/inspect.rst:1234
msgid ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': "
"()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"
msgstr ""

#: ../../library/inspect.rst:1251
msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""

#: ../../library/inspect.rst:1257
msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""

#: ../../library/inspect.rst:1266
msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""

#: ../../library/inspect.rst:1273
msgid ""
"Get the object wrapped by *func*. It follows the chain "
"of :attr:`__wrapped__` attributes returning the last object in the chain."
msgstr ""

#: ../../library/inspect.rst:1276
msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For "
"example, :func:`signature` uses this to stop unwrapping if any object in the "
"chain has a ``__signature__`` attribute defined."
msgstr ""

#: ../../library/inspect.rst:1283
msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ""

#: ../../library/inspect.rst:1290
msgid "Compute the annotations dict for an object."
msgstr ""

#: ../../library/inspect.rst:1292
msgid ""
"This is an alias for :func:`annotationlib.get_annotations`; see the "
"documentation of that function for more information."
msgstr ""

#: ../../library/inspect.rst:1297
msgid ""
"This function may execute arbitrary code contained in annotations. "
"See :ref:`annotationlib-security` for more information."
msgstr ""

#: ../../library/inspect.rst:1302
msgid ""
"This function is now an alias for :func:`annotationlib.get_annotations`. "
"Calling it as ``inspect.get_annotations`` will continue to work."
msgstr ""

#: ../../library/inspect.rst:1310
msgid "The interpreter stack"
msgstr ""

#: ../../library/inspect.rst:1312
msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""

#: ../../library/inspect.rst:1321
msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1325
msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1330
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1335
msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1339
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1344 ../../library/inspect.rst:1383
msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr ""

#: ../../library/inspect.rst:1348
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""

#: ../../library/inspect.rst:1352
msgid "Return a :term:`named tuple` instead of a :class:`tuple`."
msgstr ""

#: ../../library/inspect.rst:1355
msgid ""
":class:`!FrameInfo` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""

#: ../../library/inspect.rst:1364
msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1369
msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1374
msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""

#: ../../library/inspect.rst:1378
msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1387
msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""

#: ../../library/inspect.rst:1392
msgid ""
":class:`!Traceback` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""

#: ../../library/inspect.rst:1399
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""

#: ../../library/inspect.rst:1407
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in "
"a :keyword:`finally` clause.  This is also important if the cycle detector "
"was disabled when Python was compiled or using :func:`gc.disable`.  For "
"example::"
msgstr ""

#: ../../library/inspect.rst:1412
msgid ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"
msgstr ""

#: ../../library/inspect.rst:1419
msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr ""

#: ../../library/inspect.rst:1423
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""

#: ../../library/inspect.rst:1430
msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""

#: ../../library/inspect.rst:1433
msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""

#: ../../library/inspect.rst:1438
msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""

#: ../../library/inspect.rst:1443 ../../library/inspect.rst:1458
#: ../../library/inspect.rst:1484 ../../library/inspect.rst:1499
msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../../library/inspect.rst:1448 ../../library/inspect.rst:1463
#: ../../library/inspect.rst:1489 ../../library/inspect.rst:1504
msgid "A list of :class:`FrameInfo` objects is returned."
msgstr ""

#: ../../library/inspect.rst:1453
msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1468
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../../library/inspect.rst:1472
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""

#: ../../library/inspect.rst:1480
msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""

#: ../../library/inspect.rst:1494
msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""

#: ../../library/inspect.rst:1508
msgid "Fetching attributes statically"
msgstr ""

#: ../../library/inspect.rst:1510
msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`~object.__getattr__` "
"and :meth:`~object.__getattribute__` may be called."
msgstr ""

#: ../../library/inspect.rst:1516
msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature "
"as :func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""

#: ../../library/inspect.rst:1522
msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`~object.__getattr__` or :meth:`~object.__getattribute__`."
msgstr ""

#: ../../library/inspect.rst:1526
msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""

#: ../../library/inspect.rst:1532
msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""

#: ../../library/inspect.rst:1538
msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""

#: ../../library/inspect.rst:1542
msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""

#: ../../library/inspect.rst:1546
msgid ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"
msgstr ""

#: ../../library/inspect.rst:1568
msgid "Current State of Generators, Coroutines, and Asynchronous Generators"
msgstr ""

#: ../../library/inspect.rst:1570
msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""

#: ../../library/inspect.rst:1578
msgid "Get current state of a generator-iterator."
msgstr ""

#: ../../library/inspect.rst:1580 ../../library/inspect.rst:1596
#: ../../library/inspect.rst:1613
msgid "Possible states are:"
msgstr ""

#: ../../library/inspect.rst:1582
msgid "GEN_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1583
msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1584
msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr ""

#: ../../library/inspect.rst:1585
msgid "GEN_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1591
msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""

#: ../../library/inspect.rst:1598
msgid "CORO_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1599
msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1600
msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr ""

#: ../../library/inspect.rst:1601
msgid "CORO_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1607
msgid ""
"Get current state of an asynchronous generator object.  The function is "
"intended to be used with asynchronous iterator objects created "
"by :keyword:`async def` functions which use the :keyword:`yield` statement, "
"but will accept any asynchronous generator-like object that has "
"``ag_running`` and ``ag_frame`` attributes."
msgstr ""

#: ../../library/inspect.rst:1615
msgid "AGEN_CREATED: Waiting to start execution."
msgstr ""

#: ../../library/inspect.rst:1616
msgid "AGEN_RUNNING: Currently being executed by the interpreter."
msgstr ""

#: ../../library/inspect.rst:1617
msgid "AGEN_SUSPENDED: Currently suspended at a yield expression."
msgstr ""

#: ../../library/inspect.rst:1618
msgid "AGEN_CLOSED: Execution has completed."
msgstr ""

#: ../../library/inspect.rst:1622
msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""

#: ../../library/inspect.rst:1628
msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""

#: ../../library/inspect.rst:1633
msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""

#: ../../library/inspect.rst:1639
msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""

#: ../../library/inspect.rst:1648
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""

#: ../../library/inspect.rst:1655
msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for asynchronous generator objects created by :keyword:`async def` functions "
"which use the :keyword:`yield` statement."
msgstr ""

#: ../../library/inspect.rst:1665
msgid "Code Objects Bit Flags"
msgstr ""

#: ../../library/inspect.rst:1667
msgid ""
"Python code objects have a :attr:`~codeobject.co_flags` attribute, which is "
"a bitmap of the following flags:"
msgstr ""

#: ../../library/inspect.rst:1672
msgid "The code object is optimized, using fast locals."
msgstr ""

#: ../../library/inspect.rst:1676
msgid ""
"If set, a new dict will be created for the frame's :attr:`~frame.f_locals` "
"when the code object is executed."
msgstr ""

#: ../../library/inspect.rst:1681
msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""

#: ../../library/inspect.rst:1685
msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""

#: ../../library/inspect.rst:1689
msgid "The flag is set when the code object is a nested function."
msgstr ""

#: ../../library/inspect.rst:1693
msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""

#: ../../library/inspect.rst:1698
msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""

#: ../../library/inspect.rst:1706
msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""

#: ../../library/inspect.rst:1715
msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""

#: ../../library/inspect.rst:1723
msgid ""
"The flag is set when there is a docstring for the code object in the source "
"code. If set, it will be the first item in :attr:`~codeobject.co_consts`."
msgstr ""

#: ../../library/inspect.rst:1731
msgid ""
"The flag is set when the code object is a function defined in class scope."
msgstr ""

#: ../../library/inspect.rst:1737
msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""

#: ../../library/inspect.rst:1745
msgid "Buffer flags"
msgstr ""

#: ../../library/inspect.rst:1749
msgid ""
"This is an :class:`enum.IntFlag` that represents the flags that can be "
"passed to the :meth:`~object.__buffer__` method of objects implementing "
"the :ref:`buffer protocol <bufferobjects>`."
msgstr ""

#: ../../library/inspect.rst:1753
msgid "The meaning of the flags is explained at :ref:`buffer-request-types`."
msgstr ""

#: ../../library/inspect.rst:1780
msgid "Command Line Interface"
msgstr "명령 줄 인터페이스"

#: ../../library/inspect.rst:1782
msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""

#: ../../library/inspect.rst:1787
msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""

#: ../../library/inspect.rst:1793
msgid ""
"Print information about the specified object rather than the source code"
msgstr ""
