# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:11+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../howto/regex.rst:5
msgid "Regular Expression HOWTO"
msgstr "CÓMO de expresiones regulares"

#: ../../howto/regex.rst:0
msgid "Author"
msgstr "Autor"

#: ../../howto/regex.rst:7
msgid "A.M. Kuchling <amk@amk.ca>"
msgstr "A.M. Kuchling <amk@amk.ca>"

#: ../../howto/regex.rst-1
msgid "Abstract"
msgstr "Resumen"

#: ../../howto/regex.rst:18
msgid ""
"This document is an introductory tutorial to using regular expressions in "
"Python with the :mod:`re` module.  It provides a gentler introduction than "
"the corresponding section in the Library Reference."
msgstr ""
"Este documento es un tutorial de introducción al uso de expresiones "
"regulares en Python con el módulo :mod:`re`.  Proporciona una introducción "
"más suave que la sección correspondiente en la Referencia de la Biblioteca."

#: ../../howto/regex.rst:24
msgid "Introduction"
msgstr "Introducción"

#: ../../howto/regex.rst:26
msgid ""
"Regular expressions (called REs, or regexes, or regex patterns) are "
"essentially a tiny, highly specialized programming language embedded inside "
"Python and made available through the :mod:`re` module. Using this little "
"language, you specify the rules for the set of possible strings that you "
"want to match; this set might contain English sentences, or e-mail "
"addresses, or TeX commands, or anything you like.  You can then ask "
"questions such as \"Does this string match the pattern?\", or \"Is there a "
"match for the pattern anywhere in this string?\".  You can also use REs to "
"modify a string or to split it apart in various ways."
msgstr ""
"Las expresiones regulares (llamadas REs, o regexes, o patrones regex) son "
"esencialmente un pequeño lenguaje de programación altamente especializado "
"incrustado dentro de Python y disponible a través del módulo :mod:`re`. Con "
"este pequeño lenguaje, se especifican las reglas para el conjunto de "
"posibles cadenas que se desea comparar; este conjunto puede contener frases "
"en inglés, direcciones de correo electrónico, comandos TeX o lo que se "
"desee.  A continuación, puede hacer preguntas como \"¿Coincide esta cadena "
"con el patrón?\", o \"¿Coincide el patrón en alguna parte de esta cadena?"
"\".  También puede utilizar los RE para modificar una cadena o dividirla de "
"varias formas."

#: ../../howto/regex.rst:35
msgid ""
"Regular expression patterns are compiled into a series of bytecodes which "
"are then executed by a matching engine written in C.  For advanced use, it "
"may be necessary to pay careful attention to how the engine will execute a "
"given RE, and write the RE in a certain way in order to produce bytecode "
"that runs faster. Optimization isn't covered in this document, because it "
"requires that you have a good understanding of the matching engine's "
"internals."
msgstr ""
"Los patrones de expresiones regulares se compilan en una serie de bytecodes "
"que luego son ejecutados por un motor de comparación escrito en C. Para un "
"uso avanzado, puede ser necesario prestar mucha atención a cómo el motor "
"ejecutará una RE dada, y escribir la RE de cierta manera para producir un "
"bytecode que se ejecute más rápido. La optimización no está cubierta en este "
"documento, porque requiere que usted tenga una buena comprensión de las "
"interioridades del motor de emparejamiento."

#: ../../howto/regex.rst:42
msgid ""
"The regular expression language is relatively small and restricted, so not "
"all possible string processing tasks can be done using regular expressions.  "
"There are also tasks that *can* be done with regular expressions, but the "
"expressions turn out to be very complicated.  In these cases, you may be "
"better off writing Python code to do the processing; while Python code will "
"be slower than an elaborate regular expression, it will also probably be "
"more understandable."
msgstr ""
"El lenguaje de expresiones regulares es relativamente pequeño y restringido, "
"por lo que no todas las tareas posibles de procesamiento de cadenas pueden "
"realizarse mediante expresiones regulares.  También hay tareas que *pueden* "
"realizarse con expresiones regulares, pero las expresiones resultan ser muy "
"complicadas.  En estos casos, puede que sea mejor escribir código Python "
"para realizar el procesamiento; aunque el código Python será más lento que "
"una expresión regular elaborada, también será probablemente más comprensible."

#: ../../howto/regex.rst:51
msgid "Simple Patterns"
msgstr "Patrones sencillos"

#: ../../howto/regex.rst:53
msgid ""
"We'll start by learning about the simplest possible regular expressions.  "
"Since regular expressions are used to operate on strings, we'll begin with "
"the most common task: matching characters."
msgstr ""
"Empezaremos por conocer las expresiones regulares más sencillas posibles.  "
"Dado que las expresiones regulares se utilizan para operar con cadenas, "
"empezaremos por la tarea más común: buscar caracteres."

#: ../../howto/regex.rst:57
msgid ""
"For a detailed explanation of the computer science underlying regular "
"expressions (deterministic and non-deterministic finite automata), you can "
"refer to almost any textbook on writing compilers."
msgstr ""
"Para una explicación detallada de la informática subyacente a las "
"expresiones regulares (autómatas finitos deterministas y no deterministas), "
"puede consultar casi cualquier libro de texto sobre escritura de "
"compiladores."

#: ../../howto/regex.rst:63
msgid "Matching Characters"
msgstr "Coincidencia de caracteres"

#: ../../howto/regex.rst:65
msgid ""
"Most letters and characters will simply match themselves.  For example, the "
"regular expression ``test`` will match the string ``test`` exactly.  (You "
"can enable a case-insensitive mode that would let this RE match ``Test`` or "
"``TEST`` as well; more about this later.)"
msgstr ""
"La mayoría de las letras y caracteres simplemente coinciden entre sí.  Por "
"ejemplo, la expresión regular ``test`` coincidirá exactamente con la cadena "
"``test``.  (Puede activar un modo que no distinga entre mayúsculas y "
"minúsculas y que permitiría que esta RE coincidiera también con ``Test`` o "
"``TEST``; más sobre esto más adelante)."

#: ../../howto/regex.rst:70
msgid ""
"There are exceptions to this rule; some characters are special :dfn:"
"`metacharacters`, and don't match themselves.  Instead, they signal that "
"some out-of-the-ordinary thing should be matched, or they affect other "
"portions of the RE by repeating them or changing their meaning.  Much of "
"this document is devoted to discussing various metacharacters and what they "
"do."
msgstr ""
"Hay excepciones a esta regla; algunos caracteres son special :dfn:"
"`metacharacters`, especiales, y no coinciden por sí mismos.  En su lugar, "
"señalan que alguna cosa fuera de lo común debe ser emparejada, o afectan a "
"otras partes del RE repitiéndolos o cambiando su significado.  Gran parte de "
"este documento está dedicado a discutir varios metacaracteres y lo que hacen."

#: ../../howto/regex.rst:76
msgid ""
"Here's a complete list of the metacharacters; their meanings will be "
"discussed in the rest of this HOWTO."
msgstr ""
"Esta es una lista completa de los metacaracteres; sus significados se "
"discutirán en el resto de este CÓMO."

#: ../../howto/regex.rst:83
msgid ""
"The first metacharacters we'll look at are ``[`` and ``]``. They're used for "
"specifying a character class, which is a set of characters that you wish to "
"match.  Characters can be listed individually, or a range of characters can "
"be indicated by giving two characters and separating them by a ``'-'``.  For "
"example, ``[abc]`` will match any of the characters ``a``, ``b``, or ``c``; "
"this is the same as ``[a-c]``, which uses a range to express the same set of "
"characters.  If you wanted to match only lowercase letters, your RE would be "
"``[a-z]``."
msgstr ""
"Los primeros metacaracteres que veremos son ``[`` y ``]``. Sirven para "
"especificar una clase de caracteres, es decir, un conjunto de caracteres con "
"los que se desea establecer una correspondencia.  Los caracteres se pueden "
"enumerar individualmente, o se puede indicar un rango de caracteres dando "
"dos caracteres y separándolos por un ``'-'``. Por ejemplo, ``[abc]`` "
"coincidirá con cualquiera de los caracteres ``a``, ``b``, o ``c``; esto es "
"lo mismo que ``[a-c]``, que utiliza un rango para expresar el mismo conjunto "
"de caracteres.  Si sólo desea buscar letras minúsculas, el RE sería ``[a-"
"z]``."

#: ../../howto/regex.rst:92
msgid ""
"Metacharacters (except ``\\``) are not active inside classes.  For example, "
"``[akm$]`` will match any of the characters ``'a'``, ``'k'``, ``'m'``, or "
"``'$'``; ``'$'`` is usually a metacharacter, but inside a character class "
"it's stripped of its special nature."
msgstr ""
"Los metacaracteres (excepto ``\\``) no están activos dentro de las clases.  "
"Por ejemplo, ``[akm$]`` coincidirá con cualquiera de los caracteres ``'a'``, "
"``'k'``, ``'m'``, o ``'$'``; ``'$'`` suele ser un metacarácter, pero dentro "
"de una clase de caracteres se le quita su naturaleza especial."

#: ../../howto/regex.rst:97
msgid ""
"You can match the characters not listed within the class by :dfn:"
"`complementing` the set.  This is indicated by including a ``'^'`` as the "
"first character of the class. For example, ``[^5]`` will match any character "
"except ``'5'``.  If the caret appears elsewhere in a character class, it "
"does not have special meaning. For example: ``[5^]`` will match either a "
"``'5'`` or a ``'^'``."
msgstr ""
"Puede hacer coincidir los caracteres no enumerados dentro de la clase :dfn:"
"`complementing` el conjunto.  Esto se indica incluyendo un ``'^'`` como "
"primer carácter de la clase. Por ejemplo, ``[^5]`` coincidirá con cualquier "
"carácter excepto ``'5'``.  Si el signo de intercalación aparece en otra "
"parte de una clase de caracteres, no tiene ningún significado especial. Por "
"ejemplo: ``[5^]`` coincidirá tanto con ``'5'`` como con ``'^'``."

#: ../../howto/regex.rst:103
msgid ""
"Perhaps the most important metacharacter is the backslash, ``\\``.   As in "
"Python string literals, the backslash can be followed by various characters "
"to signal various special sequences.  It's also used to escape all the "
"metacharacters so you can still match them in patterns; for example, if you "
"need to match a ``[`` or  ``\\``, you can precede them with a backslash to "
"remove their special meaning: ``\\[`` or ``\\\\``."
msgstr ""
"Quizás el metacarácter más importante sea la barra invertida, ``\\``.   Como "
"en los literales de cadena de Python, la barra invertida puede ir seguida de "
"varios caracteres para indicar diversas secuencias especiales.  También se "
"utiliza para escapar de todos los metacaracteres, de modo que pueda seguir "
"emparejándolos en patrones; por ejemplo, si necesita emparejar un ``[`` o "
"``\\``, puede precederlos de una barra invertida para eliminar su "
"significado especial: ``\\[`` o ``\\\\``."

#: ../../howto/regex.rst:110
msgid ""
"Some of the special sequences beginning with ``'\\'`` represent predefined "
"sets of characters that are often useful, such as the set of digits, the set "
"of letters, or the set of anything that isn't whitespace."
msgstr ""
"Algunas de las secuencias especiales que empiezan por ``'\\'`` representan "
"conjuntos predefinidos de caracteres que suelen ser útiles, como el conjunto "
"de dígitos, el conjunto de letras o el conjunto de todo lo que no sean "
"espacios en blanco."

#: ../../howto/regex.rst:115
msgid ""
"Let's take an example: ``\\w`` matches any alphanumeric character.  If the "
"regex pattern is expressed in bytes, this is equivalent to the class ``[a-zA-"
"Z0-9_]``.  If the regex pattern is a string, ``\\w`` will match all the "
"characters marked as letters in the Unicode database provided by the :mod:"
"`unicodedata` module.  You can use the more restricted definition of ``\\w`` "
"in a string pattern by supplying the :const:`re.ASCII` flag when compiling "
"the regular expression."
msgstr ""
"Tomemos un ejemplo: ``\\w`` coincide con cualquier carácter alfanumérico.  "
"Si el patrón regex se expresa en bytes, equivale a la clase ``[a-zA-"
"Z0-9_]``.  Si el patrón regex es una cadena, ``\\w`` coincidirá con todos "
"los caracteres marcados como letras en la base de datos Unicode "
"proporcionada por el módulo :mod:`unicodedata`.  Puede utilizar la "
"definición más restringida de ``\\w`` en un patrón de cadena proporcionando "
"el indicador :const:`re.ASCII` al compilar la expresión regular."

#: ../../howto/regex.rst:123
msgid ""
"The following list of special sequences isn't complete. For a complete list "
"of sequences and expanded class definitions for Unicode string patterns, see "
"the last part of :ref:`Regular Expression Syntax <re-syntax>` in the "
"Standard Library reference.  In general, the Unicode versions match any "
"character that's in the appropriate category in the Unicode database."
msgstr ""
"La siguiente lista de secuencias especiales no está completa. Para obtener "
"una lista completa de secuencias y definiciones de clases expandidas para "
"patrones de cadenas Unicode, consulte la última parte de :ref:`Regular "
"Expression Syntax <re-syntax>` en la referencia de la Biblioteca Estándar.  "
"En general, las versiones Unicode coinciden con cualquier carácter que esté "
"en la categoría apropiada en la base de datos Unicode."

#: ../../howto/regex.rst:131
msgid "``\\d``"
msgstr "``\\d``"

#: ../../howto/regex.rst:131
msgid "Matches any decimal digit; this is equivalent to the class ``[0-9]``."
msgstr "Coincide con cualquier dígito decimal; equivale a la clase ``[0-9]``."

#: ../../howto/regex.rst:134
msgid "``\\D``"
msgstr "``\\D``"

#: ../../howto/regex.rst:134
msgid ""
"Matches any non-digit character; this is equivalent to the class ``[^0-9]``."
msgstr ""
"Coincide con cualquier carácter que no sea un dígito; equivale a la clase "
"``[^0-9]``."

#: ../../howto/regex.rst:138
msgid "``\\s``"
msgstr "``\\s``"

#: ../../howto/regex.rst:137
msgid ""
"Matches any whitespace character; this is equivalent to the class "
"``[ \\t\\n\\r\\f\\v]``."
msgstr ""
"Coincide con cualquier carácter de espacio en blanco; equivale a la clase "
"``[ \\t\\n\\r\\f\\v]``."

#: ../../howto/regex.rst:142
msgid "``\\S``"
msgstr "``\\S``"

#: ../../howto/regex.rst:141
msgid ""
"Matches any non-whitespace character; this is equivalent to the class ``[^ "
"\\t\\n\\r\\f\\v]``."
msgstr ""
"Coincide con cualquier carácter que no sea un espacio en blanco; equivale a "
"la clase ``[^ \\t\\n\\r\\f\\v]``."

#: ../../howto/regex.rst:146
msgid "``\\w``"
msgstr "``\\w``"

#: ../../howto/regex.rst:145
msgid ""
"Matches any alphanumeric character; this is equivalent to the class ``[a-zA-"
"Z0-9_]``."
msgstr ""
"Coincide con cualquier carácter alfanumérico; equivale a la clase ``[a-zA-"
"Z0-9_]``."

#: ../../howto/regex.rst:150
msgid "``\\W``"
msgstr "``\\W``"

#: ../../howto/regex.rst:149
msgid ""
"Matches any non-alphanumeric character; this is equivalent to the class "
"``[^a-zA-Z0-9_]``."
msgstr ""
"Coincide con cualquier carácter no alfanumérico; equivale a la clase ``[^a-"
"zA-Z0-9_]``."

#: ../../howto/regex.rst:152
msgid ""
"These sequences can be included inside a character class.  For example, "
"``[\\s,.]`` is a character class that will match any whitespace character, "
"or ``','`` or ``'.'``."
msgstr ""
"Estas secuencias pueden incluirse dentro de una clase de caracteres.  Por "
"ejemplo, ``[\\s,.]`` es una clase de caracteres que coincidirá con cualquier "
"carácter de espacio en blanco, o ``','`` o ``'.'``."

#: ../../howto/regex.rst:156
msgid ""
"The final metacharacter in this section is ``.``.  It matches anything "
"except a newline character, and there's an alternate mode (:const:`re."
"DOTALL`) where it will match even a newline.  ``.`` is often used where you "
"want to match \"any character\"."
msgstr ""
"El último metacarácter de esta sección es ``.``. Coincide con cualquier cosa "
"excepto con un carácter de nueva línea, y existe un modo alternativo (:const:"
"`re.DOTALL`) en el que coincidirá incluso con una nueva línea. ``.`` se "
"utiliza a menudo cuando se desea que coincida con \"cualquier carácter\"."

#: ../../howto/regex.rst:163
msgid "Repeating Things"
msgstr "Repetir las cosas"

#: ../../howto/regex.rst:165
msgid ""
"Being able to match varying sets of characters is the first thing regular "
"expressions can do that isn't already possible with the methods available on "
"strings.  However, if that was the only additional capability of regexes, "
"they wouldn't be much of an advance. Another capability is that you can "
"specify that portions of the RE must be repeated a certain number of times."
msgstr ""
"Lo primero que pueden hacer las expresiones regulares que no sea ya posible "
"con los métodos disponibles para las cadenas es ser capaces de emparejar "
"distintos conjuntos de caracteres.  Sin embargo, si ésa fuera la única "
"capacidad adicional de las expresiones regulares, no supondrían un gran "
"avance. Otra capacidad es que puede especificar que partes de la RE deben "
"repetirse un determinado número de veces."

#: ../../howto/regex.rst:171
msgid ""
"The first metacharacter for repeating things that we'll look at is ``*``.  "
"``*`` doesn't match the literal character ``'*'``; instead, it specifies "
"that the previous character can be matched zero or more times, instead of "
"exactly once."
msgstr ""
"El primer metacarácter para repetir cosas que veremos es ``*``. ``*`` no "
"coincide con el carácter literal ``'*'``; en su lugar, especifica que el "
"carácter anterior puede coincidir cero o más veces, en lugar de exactamente "
"una vez."

#: ../../howto/regex.rst:175
msgid ""
"For example, ``ca*t`` will match ``'ct'`` (0 ``'a'`` characters), ``'cat'`` "
"(1 ``'a'``), ``'caaat'`` (3 ``'a'`` characters), and so forth."
msgstr ""
"Por ejemplo, ``ca*t`` coincidirá con ``'ct'`` (0 ``'a'`` caracteres), "
"``'cat'`` (1 ``'a'``), ``'caaat'`` (3 ``'a'`` caracteres), y así "
"sucesivamente."

#: ../../howto/regex.rst:178
msgid ""
"Repetitions such as ``*`` are :dfn:`greedy`; when repeating a RE, the "
"matching engine will try to repeat it as many times as possible. If later "
"portions of the pattern don't match, the matching engine will then back up "
"and try again with fewer repetitions."
msgstr ""
"Las repeticiones como ``*`` son :dfn:`greedy`; al repetir un RE, el motor de "
"comparación intentará repetirlo tantas veces como sea posible. Si partes "
"posteriores del patrón no coinciden, el motor de comparación retrocederá y "
"volverá a intentarlo con menos repeticiones."

#: ../../howto/regex.rst:183
msgid ""
"A step-by-step example will make this more obvious.  Let's consider the "
"expression ``a[bcd]*b``.  This matches the letter ``'a'``, zero or more "
"letters from the class ``[bcd]``, and finally ends with a ``'b'``.  Now "
"imagine matching this RE against the string ``'abcbd'``."
msgstr ""
"Un ejemplo paso a paso lo hará más evidente.  Consideremos la expresión "
"``a[bcd]*b``.  Ésta coincide con la letra ``'a'``, cero o más letras de la "
"clase ``[bcd]``, y finalmente termina con una ``'b'``. Ahora imagine que "
"compara esta RE con la cadena ``'abcbd'``."

#: ../../howto/regex.rst:189
msgid "Step"
msgstr "Paso"

#: ../../howto/regex.rst:189
msgid "Matched"
msgstr "Emparejado"

#: ../../howto/regex.rst:189
msgid "Explanation"
msgstr "Explicación"

#: ../../howto/regex.rst:191
msgid "1"
msgstr "1"

#: ../../howto/regex.rst:191
msgid "``a``"
msgstr "``a``"

#: ../../howto/regex.rst:191
msgid "The ``a`` in the RE matches."
msgstr "El ``a`` en los emparejados RE."

#: ../../howto/regex.rst:193
msgid "2"
msgstr "2"

#: ../../howto/regex.rst:193
msgid "``abcbd``"
msgstr "``abcbd``"

#: ../../howto/regex.rst:193
msgid ""
"The engine matches ``[bcd]*``, going as far as it can, which is to the end "
"of the string."
msgstr ""
"El motor hace coincidir ``[bcd]*``, yendo tan lejos como puede, que es hasta "
"el final de la cadena."

#: ../../howto/regex.rst:197
msgid "3"
msgstr "3"

#: ../../howto/regex.rst:197 ../../howto/regex.rst:205
msgid "*Failure*"
msgstr "*Fallo*"

#: ../../howto/regex.rst:197
msgid ""
"The engine tries to match ``b``, but the current position is at the end of "
"the string, so it fails."
msgstr ""
"El motor intenta hacer coincidir ``b``, pero la posición actual está al "
"final de la cadena, por lo que falla."

#: ../../howto/regex.rst:202
msgid "4"
msgstr "4"

#: ../../howto/regex.rst:202 ../../howto/regex.rst:213
msgid "``abcb``"
msgstr "``abcb``"

#: ../../howto/regex.rst:202
msgid "Back up, so that  ``[bcd]*`` matches one less character."
msgstr "Retrocede, para que ``[bcd]*`` coincida con un carácter menos."

#: ../../howto/regex.rst:205
msgid "5"
msgstr "5"

#: ../../howto/regex.rst:205
msgid ""
"Try ``b`` again, but the current position is at the last character, which is "
"a ``'d'``."
msgstr ""
"Intente ``b`` de nuevo, pero la posición actual está en el último carácter, "
"que es un ``'d'``."

#: ../../howto/regex.rst:209 ../../howto/regex.rst:213
msgid "6"
msgstr "6"

#: ../../howto/regex.rst:209
msgid "``abc``"
msgstr "``abc``"

#: ../../howto/regex.rst:209
msgid "Back up again, so that ``[bcd]*`` is only matching ``bc``."
msgstr "Retrocede de nuevo, de modo que ``[bcd]*`` sólo coincida con ``bc``."

#: ../../howto/regex.rst:213
msgid ""
"Try ``b`` again.  This time the character at the current position is "
"``'b'``, so it succeeds."
msgstr ""
"Prueba de nuevo con ``b``.  Esta vez el carácter en la posición actual es "
"``'b'``, por lo que tiene éxito."

#: ../../howto/regex.rst:219
msgid ""
"The end of the RE has now been reached, and it has matched ``'abcb'``.  This "
"demonstrates how the matching engine goes as far as it can at first, and if "
"no match is found it will then progressively back up and retry the rest of "
"the RE again and again.  It will back up until it has tried zero matches for "
"``[bcd]*``, and if that subsequently fails, the engine will conclude that "
"the string doesn't match the RE at all."
msgstr ""
"Se ha llegado al final de la RE, y ha coincidido con ``'abcb'``.  Esto "
"demuestra cómo el motor de búsqueda llega tan lejos como puede al principio "
"y, si no encuentra ninguna coincidencia, retrocede progresivamente y vuelve "
"a intentar el resto de la RE una y otra vez.  Retrocederá hasta que haya "
"intentado cero coincidencias para ``[bcd]*``, y si posteriormente falla, el "
"motor concluirá que la cadena no coincide en absoluto con el RE."

#: ../../howto/regex.rst:226
msgid ""
"Another repeating metacharacter is ``+``, which matches one or more times.  "
"Pay careful attention to the difference between ``*`` and ``+``; ``*`` "
"matches *zero* or more times, so whatever's being repeated may not be "
"present at all, while ``+`` requires at least *one* occurrence.  To use a "
"similar example, ``ca+t`` will match ``'cat'`` (1 ``'a'``), ``'caaat'`` (3 "
"``'a'``\\ s), but won't match ``'ct'``."
msgstr ""
"Otro metacarácter repetitivo es ``+``, que coincide una o más veces.  Preste "
"especial atención a la diferencia entre ``*`` y ``+``; ``*`` coincide *cero* "
"o más veces, por lo que lo que se repite puede no estar presente en "
"absoluto, mientras que ``+`` requiere al menos *una* ocurrencia.  Para usar "
"un ejemplo similar, ``ca+t`` coincidirá con ``'cat'`` (1 ``'a'``), "
"``'caaat'`` (3 ``'a'``\\ s), pero no coincidirá con ``'ct'``."

#: ../../howto/regex.rst:233
msgid ""
"There are two more repeating operators or quantifiers.  The question mark "
"character, ``?``, matches either once or zero times; you can think of it as "
"marking something as being optional.  For example, ``home-?brew`` matches "
"either ``'homebrew'`` or ``'home-brew'``."
msgstr ""
"Existen otros dos operadores de repetición o cuantificadores.  El signo de "
"interrogación, ``?``, coincide una o cero veces; puede considerarse que "
"marca algo como opcional.  Por ejemplo, ``home-?brew`` coincide con "
"``'homebrew'`` o ``'home-brew'``."

#: ../../howto/regex.rst:238
msgid ""
"The most complicated quantifier is ``{m,n}``, where *m* and *n* are decimal "
"integers.  This quantifier means there must be at least *m* repetitions, and "
"at most *n*.  For example, ``a/{1,3}b`` will match ``'a/b'``, ``'a//b'``, "
"and ``'a///b'``.  It won't match ``'ab'``, which has no slashes, or ``'a////"
"b'``, which has four."
msgstr ""
"El cuantificador más complicado es ``{m,n}``, donde *m* y *n* son números "
"enteros decimales.  Este cuantificador significa que debe haber al menos *m* "
"repeticiones y como máximo *n*.  Por ejemplo, ``a/{1,3}b`` coincidirá con "
"``'a/b'``, ``'a//b'`` y ``'a///b'``. No coincidirá con ``'ab'``, que no "
"tiene barras, ni con ``'a////b'``, que tiene cuatro."

#: ../../howto/regex.rst:244
msgid ""
"You can omit either *m* or *n*; in that case, a reasonable value is assumed "
"for the missing value.  Omitting *m* is interpreted as a lower limit of 0, "
"while omitting *n* results in an upper bound of infinity."
msgstr ""
"Puede omitir *m* o *n*; en ese caso, se asume un valor razonable para el "
"valor que falta.  Omitir *m* se interpreta como un límite inferior de 0, "
"mientras que omitir *n* da como resultado un límite superior de infinito."

#: ../../howto/regex.rst:248
msgid ""
"The simplest case ``{m}`` matches the preceding item exactly *m* times. For "
"example, ``a/{2}b`` will only match ``'a//b'``."
msgstr ""
"El caso más sencillo ``{m}`` coincide exactamente *m* veces con el elemento "
"precedente. Por ejemplo, ``a/{2}b`` sólo coincidirá con ``'a//b'``."

#: ../../howto/regex.rst:251
msgid ""
"Readers of a reductionist bent may notice that the three other quantifiers "
"can all be expressed using this notation.  ``{0,}`` is the same as ``*``, "
"``{1,}`` is equivalent to ``+``, and ``{0,1}`` is the same as ``?``.  It's "
"better to use ``*``, ``+``, or ``?`` when you can, simply because they're "
"shorter and easier to read."
msgstr ""
"Los lectores de inclinación reduccionista pueden notar que los otros tres "
"cuantificadores pueden expresarse utilizando esta notación. ``{0,}`` es lo "
"mismo que ``*``, ``{1,}`` es equivalente a ``+``, y ``{0,1}`` es lo mismo "
"que ``?``.  Es mejor utilizar ``*``, ``+``, o ``?`` siempre que se pueda, "
"simplemente porque son más cortos y fáciles de leer."

#: ../../howto/regex.rst:259
msgid "Using Regular Expressions"
msgstr "Uso de expresiones regulares"

#: ../../howto/regex.rst:261
msgid ""
"Now that we've looked at some simple regular expressions, how do we actually "
"use them in Python?  The :mod:`re` module provides an interface to the "
"regular expression engine, allowing you to compile REs into objects and then "
"perform matches with them."
msgstr ""
"Ahora que hemos visto algunas expresiones regulares simples, ¿cómo las "
"usamos en Python?  El módulo :mod:`re` proporciona una interfaz para el "
"motor de expresiones regulares, permitiéndote compilar REs en objetos y "
"luego realizar coincidencias con ellos."

#: ../../howto/regex.rst:268
msgid "Compiling Regular Expressions"
msgstr "Compilación de expresiones regulares"

#: ../../howto/regex.rst:270
msgid ""
"Regular expressions are compiled into pattern objects, which have methods "
"for various operations such as searching for pattern matches or performing "
"string substitutions. ::"
msgstr ""
"Las expresiones regulares se compilan en objetos patrón, que disponen de "
"métodos para diversas operaciones, como la búsqueda de coincidencias de "
"patrones o la realización de sustituciones de cadenas. ::"

#: ../../howto/regex.rst:279
msgid ""
":func:`re.compile` also accepts an optional *flags* argument, used to enable "
"various special features and syntax variations.  We'll go over the available "
"settings later, but for now a single example will do::"
msgstr ""
":func:`re.compile` también acepta un argumento opcional *flags*, utilizado "
"para activar diversas características especiales y variaciones sintácticas.  "
"Revisaremos las opciones disponibles más adelante, pero por ahora basta con "
"un ejemplo::"

#: ../../howto/regex.rst:285
msgid ""
"The RE is passed to :func:`re.compile` as a string.  REs are handled as "
"strings because regular expressions aren't part of the core Python language, "
"and no special syntax was created for expressing them.  (There are "
"applications that don't need REs at all, so there's no need to bloat the "
"language specification by including them.) Instead, the :mod:`re` module is "
"simply a C extension module included with Python, just like the :mod:"
"`socket` or :mod:`zlib` modules."
msgstr ""
"La RE se pasa a :func:`re.compile` como una cadena.  Las REs se manejan como "
"cadenas porque las expresiones regulares no son parte del núcleo del "
"lenguaje Python, y no se ha creado una sintaxis especial para expresarlas.  "
"(Hay aplicaciones que no necesitan REs en absoluto, así que no hay necesidad "
"de hinchar la especificación del lenguaje incluyéndolas). En su lugar, el "
"módulo :mod:`re` es simplemente un módulo de extensión C incluido con "
"Python, al igual que los módulos :mod:`socket` o :mod:`zlib`."

#: ../../howto/regex.rst:292
msgid ""
"Putting REs in strings keeps the Python language simpler, but has one "
"disadvantage which is the topic of the next section."
msgstr ""
"Poner las REs en cadenas hace que el lenguaje Python sea más simple, pero "
"tiene una desventaja que es el tema de la siguiente sección."

#: ../../howto/regex.rst:299
msgid "The Backslash Plague"
msgstr "La Backslash Plague"

#: ../../howto/regex.rst:301
msgid ""
"As stated earlier, regular expressions use the backslash character "
"(``'\\'``) to indicate special forms or to allow special characters to be "
"used without invoking their special meaning. This conflicts with Python's "
"usage of the same character for the same purpose in string literals."
msgstr ""
"Como ya se ha dicho, las expresiones regulares utilizan el carácter de barra "
"invertida (``'\\'``) para indicar formas especiales o para permitir el uso "
"de caracteres especiales sin invocar su significado especial. Esto entra en "
"conflicto con el uso que hace Python del mismo carácter para el mismo "
"propósito en los literales de cadena."

#: ../../howto/regex.rst:306
msgid ""
"Let's say you want to write a RE that matches the string ``\\section``, "
"which might be found in a LaTeX file.  To figure out what to write in the "
"program code, start with the desired string to be matched.  Next, you must "
"escape any backslashes and other metacharacters by preceding them with a "
"backslash, resulting in the string ``\\\\section``.  The resulting string "
"that must be passed to :func:`re.compile` must be ``\\\\section``.  However, "
"to express this as a Python string literal, both backslashes must be escaped "
"*again*."
msgstr ""
"Supongamos que desea escribir un RE que coincida con la cadena "
"``\\section``, que podría encontrarse en un archivo LaTeX.  Para saber qué "
"escribir en el código del programa, comience con la cadena que desea "
"comparar.  Luego, debe escapar cualquier barra invertida y otros "
"metacaracteres precediéndolos con una barra invertida, resultando en la "
"cadena ``\\\\section``.  La cadena resultante que debe pasarse a :func:`re."
"compile` debe ser ``\\\\section``.  Sin embargo, para expresar esto como una "
"cadena literal de Python, ambas barras invertidas deben ser escapadas *otra "
"vez*."

#: ../../howto/regex.rst:315
msgid "Characters"
msgstr "Caracteres"

#: ../../howto/regex.rst:315
msgid "Stage"
msgstr "Proceso"

#: ../../howto/regex.rst:317
msgid "``\\section``"
msgstr "``\\section``"

#: ../../howto/regex.rst:317
msgid "Text string to be matched"
msgstr "Cadena de texto a buscar"

#: ../../howto/regex.rst:319
msgid "``\\\\section``"
msgstr "``\\\\section``"

#: ../../howto/regex.rst:319
msgid "Escaped backslash for :func:`re.compile`"
msgstr "Barra diagonal inversa desaparecida para :func:`re.compile`"

#: ../../howto/regex.rst:321 ../../howto/regex.rst:348
msgid "``\"\\\\\\\\section\"``"
msgstr "``\"\\\\\\\\section\"``"

#: ../../howto/regex.rst:321
msgid "Escaped backslashes for a string literal"
msgstr "Evitar la barra invertida para una cadena literal"

#: ../../howto/regex.rst:324
msgid ""
"In short, to match a literal backslash, one has to write ``'\\\\\\\\'`` as "
"the RE string, because the regular expression must be ``\\\\``, and each "
"backslash must be expressed as ``\\\\`` inside a regular Python string "
"literal.  In REs that feature backslashes repeatedly, this leads to lots of "
"repeated backslashes and makes the resulting strings difficult to understand."
msgstr ""
"En resumen, para que coincida con una barra invertida literal, uno tiene que "
"escribir ``'\\\\\\\\'`` como la cadena RE, porque la expresión regular debe "
"ser ``\\\\``, y cada barra invertida debe expresarse como ``\\\\`` dentro de "
"un literal de cadena regular de Python.  En REs que presentan barras "
"invertidas repetidamente, esto lleva a muchas barras invertidas repetidas y "
"hace que las cadenas resultantes sean difíciles de entender."

#: ../../howto/regex.rst:330
msgid ""
"The solution is to use Python's raw string notation for regular expressions; "
"backslashes are not handled in any special way in a string literal prefixed "
"with ``'r'``, so ``r\"\\n\"`` is a two-character string containing ``'\\'`` "
"and ``'n'``, while ``\"\\n\"`` is a one-character string containing a "
"newline. Regular expressions will often be written in Python code using this "
"raw string notation."
msgstr ""
"La solución es utilizar la notación de cadena sin procesar de Python para "
"las expresiones regulares; las barras invertidas no se manejan de ninguna "
"manera especial en una cadena literal prefijada con ``'r'``, por lo que "
"``r\"\\n\"`` es una cadena de dos caracteres que contiene ``'\\'`` y "
"``'n'``, mientras que ``\"\\n\"`` es una cadena de un carácter que contiene "
"una nueva línea. Las expresiones regulares se escriben a menudo en código "
"Python utilizando esta notación de cadena sin procesar."

#: ../../howto/regex.rst:336
msgid ""
"In addition, special escape sequences that are valid in regular expressions, "
"but not valid as Python string literals, now result in a :exc:"
"`DeprecationWarning` and will eventually become a :exc:`SyntaxError`, which "
"means the sequences will be invalid if raw string notation or escaping the "
"backslashes isn't used."
msgstr ""
"Además, las secuencias de escape especiales que son válidas en expresiones "
"regulares, pero no como literales de cadena de Python, ahora resultan en un :"
"exc:`DeprecationWarning` y eventualmente se convertirán en un :exc:"
"`SyntaxError`, lo que significa que las secuencias no serán válidas si no se "
"utiliza la notación de cadena sin procesar o el escape de las barras "
"invertidas."

#: ../../howto/regex.rst:344
msgid "Regular String"
msgstr "Cadena normal"

#: ../../howto/regex.rst:344
msgid "Raw string"
msgstr "Cadena bruta"

#: ../../howto/regex.rst:346
msgid "``\"ab*\"``"
msgstr "``\"ab*\"``"

#: ../../howto/regex.rst:346
msgid "``r\"ab*\"``"
msgstr "``r\"ab*\"``"

#: ../../howto/regex.rst:348
msgid "``r\"\\\\section\"``"
msgstr "``r\"\\\\section\"``"

#: ../../howto/regex.rst:350
msgid "``\"\\\\w+\\\\s+\\\\1\"``"
msgstr "``\"\\\\w+\\\\s+\\\\1\"``"

#: ../../howto/regex.rst:350
msgid "``r\"\\w+\\s+\\1\"``"
msgstr "``r\"\\w+\\s+\\1\"``"

#: ../../howto/regex.rst:355
msgid "Performing Matches"
msgstr "Realización de combinaciones"

#: ../../howto/regex.rst:357
msgid ""
"Once you have an object representing a compiled regular expression, what do "
"you do with it?  Pattern objects have several methods and attributes. Only "
"the most significant ones will be covered here; consult the :mod:`re` docs "
"for a complete listing."
msgstr ""
"Una vez que se tiene un objeto que representa una expresión regular "
"compilada, ¿qué se hace con él?  Los objetos patrón tienen varios métodos y "
"atributos. Aquí sólo trataremos los más importantes; consultar la "
"documentación de :mod:`re` para obtener una lista completa."

#: ../../howto/regex.rst:363 ../../howto/regex.rst:421
#: ../../howto/regex.rst:1069
msgid "Method/Attribute"
msgstr "Método/Atributo"

#: ../../howto/regex.rst:363 ../../howto/regex.rst:421
#: ../../howto/regex.rst:1069
msgid "Purpose"
msgstr "Propósito"

#: ../../howto/regex.rst:365
msgid "``match()``"
msgstr "``match()``"

#: ../../howto/regex.rst:365
msgid "Determine if the RE matches at the beginning of the string."
msgstr "Determina si el RE coincide al principio de la cadena."

#: ../../howto/regex.rst:368
msgid "``search()``"
msgstr "``search()``"

#: ../../howto/regex.rst:368
msgid "Scan through a string, looking for any location where this RE matches."
msgstr ""
"Escanea a través de una cadena, buscando cualquier lugar donde coincida este "
"RE."

#: ../../howto/regex.rst:371
msgid "``findall()``"
msgstr "``findall()``"

#: ../../howto/regex.rst:371
msgid "Find all substrings where the RE matches, and returns them as a list."
msgstr ""
"Encuentra todas las subcadenas en las que coincide el RE y las devuelve como "
"una lista."

#: ../../howto/regex.rst:374
msgid "``finditer()``"
msgstr "``finditer()``"

#: ../../howto/regex.rst:374
msgid ""
"Find all substrings where the RE matches, and returns them as an :term:"
"`iterator`."
msgstr ""
"Busca todas las subcadenas en las que coincide el RE y las devuelve como un :"
"term:`iterator`."

#: ../../howto/regex.rst:378
msgid ""
":meth:`~re.Pattern.match` and :meth:`~re.Pattern.search` return ``None`` if "
"no match can be found.  If they're successful, a :ref:`match object <match-"
"objects>` instance is returned, containing information about the match: "
"where it starts and ends, the substring it matched, and more."
msgstr ""
":meth:`~re.Pattern.match` y :meth:`~re.Pattern.search` devuelven ``None`` si "
"no se encuentra ninguna coincidencia.  Si tienen éxito, devuelven una "
"instancia :ref:`match object <match-objects>`, que contiene información "
"sobre la coincidencia: dónde empieza y termina, la subcadena con la que "
"coincidió, etc."

#: ../../howto/regex.rst:383
msgid ""
"You can learn about this by interactively experimenting with the :mod:`re` "
"module.  If you have :mod:`tkinter` available, you may also want to look at :"
"source:`Tools/demo/redemo.py`, a demonstration program included with the "
"Python distribution.  It allows you to enter REs and strings, and displays "
"whether the RE matches or fails. :file:`redemo.py` can be quite useful when "
"trying to debug a complicated RE."
msgstr ""

#: ../../howto/regex.rst:390
msgid ""
"This HOWTO uses the standard Python interpreter for its examples. First, run "
"the Python interpreter, import the :mod:`re` module, and compile a RE::"
msgstr ""
"Este CÓMO utiliza el intérprete estándar de Python para sus ejemplos. En "
"primer lugar, ejecute el intérprete de Python, importe el módulo :mod:`re` y "
"compile un archivo RE::"

#: ../../howto/regex.rst:398
msgid ""
"Now, you can try matching various strings against the RE ``[a-z]+``.  An "
"empty string shouldn't match at all, since ``+`` means 'one or more "
"repetitions'. :meth:`~re.Pattern.match` should return ``None`` in this case, "
"which will cause the interpreter to print no output.  You can explicitly "
"print the result of :meth:`!match` to make this clear. ::"
msgstr ""
"Ahora, puede intentar comparar varias cadenas con el RE ``[a-z]+``.  Una "
"cadena vacía no debería coincidir en absoluto, ya que ``+`` significa 'una o "
"más repeticiones'. :meth:`~re.Pattern.match` debería devolver ``None`` en "
"este caso, lo que hará que el intérprete no imprima ninguna salida.  Puede "
"imprimir explícitamente el resultado de :meth:`!match` para dejar esto "
"claro. ::"

#: ../../howto/regex.rst:408
msgid ""
"Now, let's try it on a string that it should match, such as ``tempo``.  In "
"this case, :meth:`~re.Pattern.match` will return a :ref:`match object <match-"
"objects>`, so you should store the result in a variable for later use. ::"
msgstr ""
"Ahora, probémoslo con una cadena que debería coincidir, como ``tempo``.  En "
"este caso, :meth:`~re.Pattern.match` devolverá un objeto :ref:`match <match-"
"objects>`, por lo que debes almacenar el resultado en una variable para su "
"uso posterior. ::"

#: ../../howto/regex.rst:416
msgid ""
"Now you can query the :ref:`match object <match-objects>` for information "
"about the matching string.  Match object instances also have several methods "
"and attributes; the most important ones are:"
msgstr ""
"Ahora puede consultar el objeto :ref:`match <match-objects>` para obtener "
"información sobre la cadena coincidente.  Las instancias del objeto Match "
"también tienen varios métodos y atributos; los más importantes son:"

#: ../../howto/regex.rst:423
msgid "``group()``"
msgstr "``group()``"

#: ../../howto/regex.rst:423
msgid "Return the string matched by the RE"
msgstr "Devuelve la cadena coincidente con el RE"

#: ../../howto/regex.rst:425
msgid "``start()``"
msgstr "``start()``"

#: ../../howto/regex.rst:425
msgid "Return the starting position of the match"
msgstr "Devuelve la posición inicial del partido"

#: ../../howto/regex.rst:427
msgid "``end()``"
msgstr "``end()``"

#: ../../howto/regex.rst:427
msgid "Return the ending position of the match"
msgstr "Devuelve la posición final del partido"

#: ../../howto/regex.rst:429
msgid "``span()``"
msgstr "``span()``"

#: ../../howto/regex.rst:429
msgid "Return a tuple containing the (start, end) positions  of the match"
msgstr ""
"Devuelve una tupla que contiene las posiciones (inicial, final) de la "
"coincidencia"

#: ../../howto/regex.rst:433
msgid "Trying these methods will soon clarify their meaning::"
msgstr "Probar estos métodos pronto aclarará su significado::"

#: ../../howto/regex.rst:442
msgid ""
":meth:`~re.Match.group` returns the substring that was matched by the RE.  :"
"meth:`~re.Match.start` and :meth:`~re.Match.end` return the starting and "
"ending index of the match. :meth:`~re.Match.span` returns both start and end "
"indexes in a single tuple.  Since the :meth:`~re.Pattern.match` method only "
"checks if the RE matches at the start of a string, :meth:`!start` will "
"always be zero.  However, the :meth:`~re.Pattern.search` method of patterns "
"scans through the string, so  the match may not start at zero in that "
"case. ::"
msgstr ""
":meth:`~re.Match.group` devuelve la subcadena coincidente con la RE. :meth:"
"`~re.Match.start` y :meth:`~re.Match.end` devuelven el índice inicial y "
"final de la coincidencia. :meth:`~re.Match.span` devuelve los índices "
"inicial y final en una única tupla.  Dado que el método :meth:`~re.Pattern."
"match` sólo comprueba si la RE coincide al principio de una cadena, :meth:`!"
"start` siempre será cero.  Sin embargo, el método :meth:`~re.Pattern.search` "
"de patrones escanea a través de la cadena, por lo que la coincidencia puede "
"no empezar en cero en ese caso. ::"

#: ../../howto/regex.rst:459
msgid ""
"In actual programs, the most common style is to store the :ref:`match object "
"<match-objects>` in a variable, and then check if it was ``None``.  This "
"usually looks like::"
msgstr ""
"En los programas reales, el estilo más común es almacenar :ref:`match object "
"<match-objects>` en una variable, y luego comprobar si se ``None``. Esto por "
"lo general se parece a::"

#: ../../howto/regex.rst:470
msgid ""
"Two pattern methods return all of the matches for a pattern. :meth:`~re."
"Pattern.findall` returns a list of matching strings::"
msgstr ""
"Dos métodos de patrón devuelven todas las coincidencias de un patrón. :meth:"
"`~re.Pattern.findall` devuelve una lista de cadenas coincidentes::"

#: ../../howto/regex.rst:477
msgid ""
"The ``r`` prefix, making the literal a raw string literal, is needed in this "
"example because escape sequences in a normal \"cooked\" string literal that "
"are not recognized by Python, as opposed to regular expressions, now result "
"in a :exc:`DeprecationWarning` and will eventually become a :exc:"
"`SyntaxError`.  See :ref:`the-backslash-plague`."
msgstr ""
"El prefijo ``r``, que convierte el literal en un literal de cadena "
"\"cocinado\", es necesario en este ejemplo porque las secuencias de escape "
"en un literal de cadena \"cocinado\" normal que no son reconocidas por "
"Python, a diferencia de las expresiones regulares, ahora resultan en un :exc:"
"`DeprecationWarning` y eventualmente se convertirán en un :exc:"
"`SyntaxError`. Ver :ref:`the-backslash-plague`."

#: ../../howto/regex.rst:483
msgid ""
":meth:`~re.Pattern.findall` has to create the entire list before it can be "
"returned as the result.  The :meth:`~re.Pattern.finditer` method returns a "
"sequence of :ref:`match object <match-objects>` instances as an :term:"
"`iterator`::"
msgstr ""
":meth:`~re.Pattern.findall` tiene que crear la lista completa antes de que "
"pueda ser devuelta como resultado.  El método :meth:`~re.Pattern.finditer` "
"devuelve una secuencia de instancias :ref:`match object <match-objects>` "
"como un :term:`iterator`::"

#: ../../howto/regex.rst:499
msgid "Module-Level Functions"
msgstr "Funciones a nivel de módulo"

#: ../../howto/regex.rst:501
msgid ""
"You don't have to create a pattern object and call its methods; the :mod:"
"`re` module also provides top-level functions called :func:`~re.match`, :"
"func:`~re.search`, :func:`~re.findall`, :func:`~re.sub`, and so forth.  "
"These functions take the same arguments as the corresponding pattern method "
"with the RE string added as the first argument, and still return either "
"``None`` or a :ref:`match object <match-objects>` instance. ::"
msgstr ""
"No es necesario crear un objeto patrón y llamar a sus métodos; el módulo :"
"mod:`re` también proporciona funciones de nivel superior denominadas :func:"
"`~re.match`, :func:`~re.search`, :func:`~re.findall`, :func:`~re.sub`, "
"etcétera.  Estas funciones toman los mismos argumentos que el método de "
"patrón correspondiente con la cadena RE añadida como primer argumento, y "
"siguen devolviendo ``None`` o una instancia de :ref:`objeto coincidente "
"<match-objects>`. ::"

#: ../../howto/regex.rst:513
msgid ""
"Under the hood, these functions simply create a pattern object for you and "
"call the appropriate method on it.  They also store the compiled object in a "
"cache, so future calls using the same RE won't need to parse the pattern "
"again and again."
msgstr ""
"De forma encubierta, estas funciones simplemente crean un objeto patrón para "
"ti y llaman al método apropiado sobre él.  También almacenan el objeto "
"compilado en una caché, para que las futuras llamadas que utilicen el mismo "
"RE no tengan que analizar el patrón una y otra vez."

#: ../../howto/regex.rst:518
msgid ""
"Should you use these module-level functions, or should you get the pattern "
"and call its methods yourself?  If you're accessing a regex within a loop, "
"pre-compiling it will save a few function calls. Outside of loops, there's "
"not much difference thanks to the internal cache."
msgstr ""
"¿Se deberían utilizar estas funciones a nivel de módulo, o se deberían "
"obtener el patrón y llamar a sus métodos uno mismo?  Si se está accediendo a "
"un regex dentro de un bucle, precompilarlo ahorrará unas cuantas llamadas a "
"funciones. Fuera de los bucles, no hay mucha diferencia gracias a la caché "
"interna."

#: ../../howto/regex.rst:526
msgid "Compilation Flags"
msgstr "Banderas de compilación"

#: ../../howto/regex.rst:530
msgid ""
"Compilation flags let you modify some aspects of how regular expressions "
"work. Flags are available in the :mod:`re` module under two names, a long "
"name such as :const:`IGNORECASE` and a short, one-letter form such as :const:"
"`I`.  (If you're familiar with Perl's pattern modifiers, the one-letter "
"forms use the same letters; the short form of :const:`re.VERBOSE` is :const:"
"`re.X`, for example.) Multiple flags can be specified by bitwise OR-ing "
"them; ``re.I | re.M`` sets both the :const:`I` and :const:`M` flags, for "
"example."
msgstr ""
"Los indicadores de compilación permiten modificar algunos aspectos del "
"funcionamiento de las expresiones regulares. Los indicadores están "
"disponibles en el módulo :mod:`re` bajo dos nombres, un nombre largo como :"
"const:`IGNORECASE` y una forma corta de una letra como :const:`I`. (Si se "
"está familiarizado con los modificadores de patrones de Perl, las formas de "
"una letra utilizan las mismas letras; la forma corta de :const:`re.VERBOSE` "
"es :const:`re.X`, por ejemplo). Se pueden especificar varias banderas "
"combinándolas entre sí; por ejemplo, ``re.I | re.M`` activa las banderas :"
"const:`I` y :const:`M`."

#: ../../howto/regex.rst:538
msgid ""
"Here's a table of the available flags, followed by a more detailed "
"explanation of each one."
msgstr ""
"He aquí una tabla con las banderas disponibles, seguida de una explicación "
"más detallada de cada una."

#: ../../howto/regex.rst:542
msgid "Flag"
msgstr "Bandera"

#: ../../howto/regex.rst:542
msgid "Meaning"
msgstr "Significado"

#: ../../howto/regex.rst:544
msgid ":const:`ASCII`, :const:`A`"
msgstr ":const:`ASCII`, :const:`A`"

#: ../../howto/regex.rst:544
msgid ""
"Makes several escapes like ``\\w``, ``\\b``, ``\\s`` and ``\\d`` match only "
"on ASCII characters with the respective property."
msgstr ""
"Hace que varios escapes como ``\\w``, ``\\b``, ``\\s`` y ``\\d`` coincidan "
"sólo con caracteres ASCII con la propiedad respectiva."

#: ../../howto/regex.rst:548
msgid ":const:`DOTALL`, :const:`S`"
msgstr ":const:`DOTALL`, :const:`S`"

#: ../../howto/regex.rst:548
msgid "Make ``.`` match any character, including newlines."
msgstr ""
"Hacer que ``.`` coincida con cualquier carácter, incluidas las nuevas líneas."

#: ../../howto/regex.rst:551
msgid ":const:`IGNORECASE`, :const:`I`"
msgstr ":const:`IGNORECASE`, :const:`I`"

#: ../../howto/regex.rst:551
msgid "Do case-insensitive matches."
msgstr "No distingue entre mayúsculas y minúsculas."

#: ../../howto/regex.rst:553
msgid ":const:`LOCALE`, :const:`L`"
msgstr ":const:`LOCALE`, :const:`L`"

#: ../../howto/regex.rst:553
msgid "Do a locale-aware match."
msgstr "Realizar una coincidencia local."

#: ../../howto/regex.rst:555
msgid ":const:`MULTILINE`, :const:`M`"
msgstr ":const:`MULTILINE`, :const:`M`"

#: ../../howto/regex.rst:555
msgid "Multi-line matching, affecting ``^`` and ``$``."
msgstr "Coincidencia multilínea, que afecta a ``^`` y ``$``."

#: ../../howto/regex.rst:558
msgid ":const:`VERBOSE`, :const:`X` (for 'extended')"
msgstr ":const:`VERBOSE`, :const:`X` (para \"ampliado\")"

#: ../../howto/regex.rst:558
msgid ""
"Enable verbose REs, which can be organized more cleanly and understandably."
msgstr ""
"Habilita las expresiones regulares REs, que pueden organizarse de forma más "
"limpia y comprensible."

#: ../../howto/regex.rst:567
msgid ""
"Perform case-insensitive matching; character class and literal strings will "
"match letters by ignoring case.  For example, ``[A-Z]`` will match lowercase "
"letters, too. Full Unicode matching also works unless the :const:`ASCII` "
"flag is used to disable non-ASCII matches.  When the Unicode patterns ``[a-"
"z]`` or ``[A-Z]`` are used in combination with the :const:`IGNORECASE` flag, "
"they will match the 52 ASCII letters and 4 additional non-ASCII letters: "
"'İ' (U+0130, Latin capital letter I with dot above), 'ı' (U+0131, Latin "
"small letter dotless i), 'ſ' (U+017F, Latin small letter long s) and "
"'K' (U+212A, Kelvin sign).  ``Spam`` will match ``'Spam'``, ``'spam'``, "
"``'spAM'``, or ``'ſpam'`` (the latter is matched only in Unicode mode). This "
"lowercasing doesn't take the current locale into account; it will if you "
"also set the :const:`LOCALE` flag."
msgstr ""
"Realiza coincidencias insensibles a mayúsculas y minúsculas; la clase de "
"caracteres y las cadenas literales coincidirán con letras ignorando "
"mayúsculas y minúsculas.  Por ejemplo, ``[A-Z]`` también coincidirá con "
"letras minúsculas. Las coincidencias Unicode completas también funcionan a "
"menos que se utilice el indicador :const:`ASCII` para desactivar las "
"coincidencias no ASCII.  Cuando los patrones Unicode ``[a-z]`` o ``[A-Z]`` "
"se utilizan en combinación con la bandera :const:`IGNORECASE`, coincidirán "
"con las 52 letras ASCII y 4 letras no ASCII adicionales: 'İ' (U+0130, letra "
"mayúscula latina I con punto arriba), 'ı' (U+0131, letra minúscula latina i "
"sin punto), 'ſ' (U+017F, letra minúscula latina s larga) y 'K' (U+212A, "
"signo Kelvin).  ``Spam`` coincidirá con ``'Spam'``, ``'spam'``, ``'spAM'``, "
"o ``'ſpam'`` (esta última sólo coincide en modo Unicode). Este tipo de "
"minúsculas no tiene en cuenta la configuración regional actual; sí lo hará "
"si también activa el indicador :const:`LOCALE`."

#: ../../howto/regex.rst:585
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B`` and case-insensitive matching "
"dependent on the current locale instead of the Unicode database."
msgstr ""
"Hacer que ``\\w``, ``\\W``, ``\\b``, ``\\B`` y la coincidencia entre "
"mayúsculas y minúsculas dependan de la configuración regional actual en "
"lugar de la base de datos Unicode."

#: ../../howto/regex.rst:588
msgid ""
"Locales are a feature of the C library intended to help in writing programs "
"that take account of language differences.  For example, if you're "
"processing encoded French text, you'd want to be able to write ``\\w+`` to "
"match words, but ``\\w`` only matches the character class ``[A-Za-z]`` in "
"bytes patterns; it won't match bytes corresponding to ``é`` or ``ç``. If "
"your system is configured properly and a French locale is selected, certain "
"C functions will tell the program that the byte corresponding to ``é`` "
"should also be considered a letter. Setting the :const:`LOCALE` flag when "
"compiling a regular expression will cause the resulting compiled object to "
"use these C functions for ``\\w``; this is slower, but also enables ``\\w+`` "
"to match French words as you'd expect. The use of this flag is discouraged "
"in Python 3 as the locale mechanism is very unreliable, it only handles one "
"\"culture\" at a time, and it only works with 8-bit locales.  Unicode "
"matching is already enabled by default in Python 3 for Unicode (str) "
"patterns, and it is able to handle different locales/languages."
msgstr ""
"Las localizaciones son una característica de la biblioteca C pensada para "
"ayudar a escribir programas que tengan en cuenta las diferencias "
"lingüísticas.  Por ejemplo, si está procesando texto francés codificado, "
"querrá poder escribir ``\\w+`` para que coincida con palabras, pero ``\\w`` "
"sólo coincide con la clase de caracteres ``[A-Za-z]`` en patrones de bytes; "
"no coincidirá con bytes correspondientes a ``é`` o ``ç``. Si su sistema está "
"configurado correctamente y se selecciona una configuración regional "
"francesa, ciertas funciones de C indicarán al programa que el byte "
"correspondiente a ``é`` también debe considerarse una letra. Si activa la "
"opción :const:`LOCALE` al compilar una expresión regular, el objeto "
"compilado resultante utilizará estas funciones de C para ``\\w``; esto es "
"más lento, pero también permite que ``\\w+`` coincida con palabras francesas "
"como cabría esperar. Se desaconseja el uso de esta opción en Python 3 ya que "
"el mecanismo de configuración regional es muy poco fiable, sólo maneja una "
"\"cultura\" a la vez, y sólo funciona con configuraciones regionales de 8 "
"bits.  La concordancia Unicode ya está activada por defecto en Python 3 para "
"patrones Unicode (str), y es capaz de manejar diferentes configuraciones "
"regionales/idiomas."

#: ../../howto/regex.rst:610
msgid ""
"(``^`` and ``$`` haven't been explained yet;  they'll be introduced in "
"section :ref:`more-metacharacters`.)"
msgstr ""
"(``^`` y ``$`` aún no se han explicado; se presentarán en la sección :ref:"
"`more-metacharacters`.)"

#: ../../howto/regex.rst:613
msgid ""
"Usually ``^`` matches only at the beginning of the string, and ``$`` matches "
"only at the end of the string and immediately before the newline (if any) at "
"the end of the string. When this flag is specified, ``^`` matches at the "
"beginning of the string and at the beginning of each line within the string, "
"immediately following each newline.  Similarly, the ``$`` metacharacter "
"matches either at the end of the string and at the end of each line "
"(immediately preceding each newline)."
msgstr ""
"Normalmente ``^`` sólo coincide al principio de la cadena, y ``$`` sólo "
"coincide al final de la cadena e inmediatamente antes de la nueva línea (si "
"existe) al final de la cadena. Cuando se especifica esta bandera, ``^`` "
"coincide al principio de la cadena y al principio de cada línea dentro de la "
"cadena, inmediatamente después de cada nueva línea.  Del mismo modo, el "
"metacarácter ``$`` coincide al final de la cadena y al final de cada línea "
"(inmediatamente antes de cada nueva línea)."

#: ../../howto/regex.rst:626
msgid ""
"Makes the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr ""
"Hace que el carácter especial ``'.'`` coincida con cualquier carácter, "
"incluida una nueva línea; sin esta opción, ``'.'`` coincidirá con cualquier "
"carácter *excepto* una nueva línea."

#: ../../howto/regex.rst:634
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` and ``\\S`` perform ASCII-"
"only matching instead of full Unicode matching. This is only meaningful for "
"Unicode patterns, and is ignored for byte patterns."
msgstr ""
"Hacer que ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\s`` y ``\\S`` realicen "
"coincidencias sólo ASCII en lugar de coincidencias Unicode completas. Esto "
"sólo tiene sentido para patrones Unicode, y se ignora para patrones de bytes."

#: ../../howto/regex.rst:643
msgid ""
"This flag allows you to write regular expressions that are more readable by "
"granting you more flexibility in how you can format them.  When this flag "
"has been specified, whitespace within the RE string is ignored, except when "
"the whitespace is in a character class or preceded by an unescaped "
"backslash; this lets you organize and indent the RE more clearly.  This flag "
"also lets you put comments within a RE that will be ignored by the engine; "
"comments are marked by a ``'#'`` that's neither in a character class or "
"preceded by an unescaped backslash."
msgstr ""
"Esta opción le permite escribir expresiones regulares más legibles, ya que "
"le da más flexibilidad a la hora de formatearlas.  Cuando se ha especificado "
"esta opción, se ignoran los espacios en blanco dentro de la cadena RE, "
"excepto cuando el espacio en blanco está en una clase de caracteres o "
"precedido por una barra invertida sin ocultar; esto le permite organizar y "
"sangrar la RE de forma más clara.  Esta bandera también le permite poner "
"comentarios dentro de un RE que serán ignorados por el motor; los "
"comentarios están marcados por un ``'#'`` que no está ni en una clase de "
"caracteres ni precedido por una barra invertida."

#: ../../howto/regex.rst:652
msgid ""
"For example, here's a RE that uses :const:`re.VERBOSE`; see how much easier "
"it is to read? ::"
msgstr ""
"Por ejemplo, aquí tienes un RE que utiliza :const:`re.VERBOSE`; ¿ves cómo es "
"más fácil de leer? ::"

#: ../../howto/regex.rst:665
msgid "Without the verbose setting, the RE would look like this::"
msgstr "Sin la configuración verbose, el RE tendría este aspecto::"

#: ../../howto/regex.rst:671
msgid ""
"In the above example, Python's automatic concatenation of string literals "
"has been used to break up the RE into smaller pieces, but it's still more "
"difficult to understand than the version using :const:`re.VERBOSE`."
msgstr ""
"En el ejemplo anterior, se ha utilizado la concatenación automática de "
"literales de cadena de Python para dividir el RE en trozos más pequeños, "
"pero sigue siendo más difícil de entender que la versión que utiliza :const:"
"`re.VERBOSE`."

#: ../../howto/regex.rst:677
msgid "More Pattern Power"
msgstr "Más potencia de patrón"

#: ../../howto/regex.rst:679
msgid ""
"So far we've only covered a part of the features of regular expressions.  In "
"this section, we'll cover some new metacharacters, and how to use groups to "
"retrieve portions of the text that was matched."
msgstr ""
"Hasta ahora sólo hemos cubierto una parte de las características de las "
"expresiones regulares.  En esta sección, cubriremos algunos metacaracteres "
"nuevos, y cómo usar grupos para recuperar porciones del texto que coincidió."

#: ../../howto/regex.rst:687
msgid "More Metacharacters"
msgstr "Más metacaracteres"

#: ../../howto/regex.rst:689
msgid ""
"There are some metacharacters that we haven't covered yet.  Most of them "
"will be covered in this section."
msgstr ""
"Hay algunos metacaracteres que aún no hemos tratado.  La mayoría de ellos se "
"tratarán en esta sección."

#: ../../howto/regex.rst:692
msgid ""
"Some of the remaining metacharacters to be discussed are :dfn:`zero-width "
"assertions`.  They don't cause the engine to advance through the string; "
"instead, they consume no characters at all, and simply succeed or fail.  For "
"example, ``\\b`` is an assertion that the current position is located at a "
"word boundary; the position isn't changed by the ``\\b`` at all.  This means "
"that zero-width assertions should never be repeated, because if they match "
"once at a given location, they can obviously be matched an infinite number "
"of times."
msgstr ""
"Algunos de los metacaracteres que quedan por discutir son las aserciones :"
"dfn:`zero-width assertions`.  No hacen que el motor avance por la cadena, "
"sino que no consumen ningún carácter y simplemente tienen éxito o fallan.  "
"Por ejemplo, ``\\b`` es una afirmación de que la posición actual se "
"encuentra en el límite de una palabra; la posición no cambia en absoluto con "
"``\\b``.  Esto significa que las aserciones de ancho cero nunca deben "
"repetirse, porque si coinciden una vez en una posición dada, obviamente "
"pueden coincidir un número infinito de veces."

#: ../../howto/regex.rst:708
msgid "``|``"
msgstr "``|``"

#: ../../howto/regex.rst:701
msgid ""
"Alternation, or the \"or\" operator.   If *A* and *B* are regular "
"expressions, ``A|B`` will match any string that matches either *A* or *B*. "
"``|`` has very low precedence in order to make it work reasonably when "
"you're alternating multi-character strings. ``Crow|Servo`` will match either "
"``'Crow'`` or ``'Servo'``, not ``'Cro'``, a ``'w'`` or an ``'S'``, and "
"``'ervo'``."
msgstr ""
"Alternancia, o el operador \"o\".   Si *A* y *B* son expresiones regulares, "
"``A|B`` coincidirá con cualquier cadena que coincida con *A* o *B*. ``|`` "
"tiene una precedencia muy baja para que funcione razonablemente cuando se "
"alternan cadenas de varios caracteres. ``Crow|Servo`` coincidirá con "
"``'Crow'`` o ``'Servo'``, no con ``'Cro'``, un ``'w'`` o un ``'S'``, y "
"``'ervo'``."

#: ../../howto/regex.rst:707
msgid ""
"To match a literal ``'|'``, use ``\\|``, or enclose it inside a character "
"class, as in ``[|]``."
msgstr ""
"Para que coincida con un literal ``'|'``, utilice ``\\|``, o enciérrelo "
"dentro de una clase de caracteres, como en ``[|]``."

#: ../../howto/regex.rst:723
msgid "``^``"
msgstr "``^``"

#: ../../howto/regex.rst:711
msgid ""
"Matches at the beginning of lines.  Unless the :const:`MULTILINE` flag has "
"been set, this will only match at the beginning of the string.  In :const:"
"`MULTILINE` mode, this also matches immediately after each newline within "
"the string."
msgstr ""
"Coincide con el principio de las líneas.  A menos que se haya activado la "
"opción :const:`MULTILINE`, sólo coincidirá con el principio de la cadena.  "
"En el modo :const:`MULTILINE`, también coincide inmediatamente después de "
"cada nueva línea dentro de la cadena."

#: ../../howto/regex.rst:715
msgid ""
"For example, if you wish to match the word ``From`` only at the beginning of "
"a line, the RE to use is ``^From``. ::"
msgstr ""
"Por ejemplo, si desea que la palabra ``From`` coincida sólo al principio de "
"una línea, el RE que debe utilizar es ``^From``. ::"

#: ../../howto/regex.rst:723
msgid "To match a literal ``'^'``, use ``\\^``."
msgstr "Para que coincida con un literal ``'^'``, utilice ``\\^``."

#: ../../howto/regex.rst:737
msgid "``$``"
msgstr "``$``"

#: ../../howto/regex.rst:726
msgid ""
"Matches at the end of a line, which is defined as either the end of the "
"string, or any location followed by a newline character.     ::"
msgstr ""
"Coincide con el final de una línea, que se define como el final de la cadena "
"o cualquier posición seguida de un carácter de nueva línea. ::"

#: ../../howto/regex.rst:736
msgid ""
"To match a literal ``'$'``, use ``\\$`` or enclose it inside a character "
"class, as in  ``[$]``."
msgstr ""
"Para que coincida con un literal ``'$'``, utilice ``\\$`` o enciérrelo "
"dentro de una clase de caracteres, como en ``[$]``."

#: ../../howto/regex.rst:743
msgid "``\\A``"
msgstr "``\\A``"

#: ../../howto/regex.rst:740
msgid ""
"Matches only at the start of the string.  When not in :const:`MULTILINE` "
"mode, ``\\A`` and ``^`` are effectively the same.  In :const:`MULTILINE` "
"mode, they're different: ``\\A`` still matches only at the beginning of the "
"string, but ``^`` may match at any location inside the string that follows a "
"newline character."
msgstr ""
"Coincide sólo con el principio de la cadena.  Cuando no están en modo :const:"
"`MULTILINE`, ``\\A`` y ``^`` son iguales.  En el modo :const:`MULTILINE`, "
"son diferentes: ``\\A`` sigue coincidiendo sólo al principio de la cadena, "
"pero ``^`` puede coincidir en cualquier posición dentro de la cadena que "
"siga a un carácter de nueva línea."

#: ../../howto/regex.rst:746
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../howto/regex.rst:746
msgid "Matches only at the end of the string."
msgstr "Coincide sólo con el final de la cadena."

#: ../../howto/regex.rst:781
msgid "``\\b``"
msgstr "``\\b``"

#: ../../howto/regex.rst:749
msgid ""
"Word boundary.  This is a zero-width assertion that matches only at the "
"beginning or end of a word.  A word is defined as a sequence of alphanumeric "
"characters, so the end of a word is indicated by whitespace or a non-"
"alphanumeric character."
msgstr ""
"Límite de palabra.  Se trata de una aserción de ancho cero que sólo coincide "
"con el principio o el final de una palabra.  Una palabra se define como una "
"secuencia de caracteres alfanuméricos, por lo que el final de una palabra se "
"indica mediante un espacio en blanco o un carácter no alfanumérico."

#: ../../howto/regex.rst:754
msgid ""
"The following example matches ``class`` only when it's a complete word; it "
"won't match when it's contained inside another word. ::"
msgstr ""
"El siguiente ejemplo coincide con ``class`` sólo cuando es una palabra "
"completa; no coincidirá cuando esté contenida dentro de otra palabra. ::"

#: ../../howto/regex.rst:765
msgid ""
"There are two subtleties you should remember when using this special "
"sequence. First, this is the worst collision between Python's string "
"literals and regular expression sequences.  In Python's string literals, "
"``\\b`` is the backspace character, ASCII value 8.  If you're not using raw "
"strings, then Python will convert the ``\\b`` to a backspace, and your RE "
"won't match as you expect it to. The following example looks the same as our "
"previous RE, but omits the ``'r'`` in front of the RE string. ::"
msgstr ""
"Hay dos sutilezas que debes recordar cuando uses esta secuencia especial. "
"Primero, esta es la peor colisión entre los literales de cadena de Python y "
"las secuencias de expresiones regulares.  En los literales de cadena de "
"Python, ``\\b`` es el carácter de retroceso, valor 8 de ASCII.  Si no estás "
"usando cadenas en bruto, entonces Python convertirá ``\\b`` en un retroceso, "
"y tu RE no coincidirá como esperabas. El siguiente ejemplo tiene el mismo "
"aspecto que nuestro RE anterior, pero omite el ``'r'`` delante de la cadena "
"RE. ::"

#: ../../howto/regex.rst:779
msgid ""
"Second, inside a character class, where there's no use for this assertion, "
"``\\b`` represents the backspace character, for compatibility with Python's "
"string literals."
msgstr ""
"Segundo, dentro de una clase carácter, donde no hay uso para esta aserción, "
"``\\b`` representa el carácter de retroceso, por compatibilidad con los "
"literales de cadena de Python."

#: ../../howto/regex.rst:786
msgid "``\\B``"
msgstr "``\\B``"

#: ../../howto/regex.rst:784
msgid ""
"Another zero-width assertion, this is the opposite of ``\\b``, only matching "
"when the current position is not at a word boundary."
msgstr ""
"Otra aserción de ancho cero, es lo contrario de ``\\b``, sólo coincide "
"cuando la posición actual no está en un límite de palabra."

#: ../../howto/regex.rst:789
msgid "Grouping"
msgstr "Agrupación"

#: ../../howto/regex.rst:791
msgid ""
"Frequently you need to obtain more information than just whether the RE "
"matched or not.  Regular expressions are often used to dissect strings by "
"writing a RE divided into several subgroups which match different components "
"of interest. For example, an RFC-822 header line is divided into a header "
"name and a value, separated by a ``':'``, like this:"
msgstr ""
"Con frecuencia se necesita obtener más información que simplemente si la ER "
"coincide o no.  Las expresiones regulares se utilizan a menudo para "
"diseccionar cadenas escribiendo una RE dividida en varios subgrupos que "
"coinciden con diferentes componentes de interés. Por ejemplo, una línea de "
"encabezado RFC-822 se divide en un nombre de encabezado y un valor, "
"separados por un ``':'``, así:"

#: ../../howto/regex.rst:804
msgid ""
"This can be handled by writing a regular expression which matches an entire "
"header line, and has one group which matches the header name, and another "
"group which matches the header's value."
msgstr ""
"Esto puede solucionarse escribiendo una expresión regular que coincida con "
"una línea de cabecera completa, y que tenga un grupo que coincida con el "
"nombre de la cabecera, y otro grupo que coincida con el valor de la cabecera."

#: ../../howto/regex.rst:808
msgid ""
"Groups are marked by the ``'('``, ``')'`` metacharacters. ``'('`` and "
"``')'`` have much the same meaning as they do in mathematical expressions; "
"they group together the expressions contained inside them, and you can "
"repeat the contents of a group with a quantifier, such as ``*``, ``+``, ``?"
"``, or ``{m,n}``.  For example, ``(ab)*`` will match zero or more "
"repetitions of ``ab``. ::"
msgstr ""
"Los grupos se marcan con los metacaracteres ``'('``, ``')'``. ``'('`` y "
"``')'`` tienen un significado muy similar al de las expresiones matemáticas; "
"agrupan las expresiones contenidas en su interior, y puede repetir el "
"contenido de un grupo con un cuantificador, como ``*``, ``+``, ``?`` o ``{m,"
"n}``.  Por ejemplo, ``(ab)*`` coincidirá con cero o más repeticiones de "
"``ab``. ::"

#: ../../howto/regex.rst:819
msgid ""
"Groups indicated with ``'('``, ``')'`` also capture the starting and ending "
"index of the text that they match; this can be retrieved by passing an "
"argument to :meth:`~re.Match.group`, :meth:`~re.Match.start`, :meth:`~re."
"Match.end`, and :meth:`~re.Match.span`.  Groups are numbered starting with "
"0.  Group 0 is always present; it's the whole RE, so :ref:`match object "
"<match-objects>` methods all have group 0 as their default argument.  Later "
"we'll see how to express groups that don't capture the span of text that "
"they match. ::"
msgstr ""
"Los grupos indicados con ``'('``, ``')'`` también capturan el índice inicial "
"y final del texto con el que coinciden; esto se puede recuperar pasando un "
"argumento a :meth:`~re.Match.group`, :meth:`~re.Match.start`, :meth:`~re."
"Match.end`, y :meth:`~re.Match.span`.  Los grupos se numeran empezando por "
"0. El grupo 0 siempre está presente; es todo el RE, así que todos los "
"métodos :ref:`match object <match-objects>` tienen el grupo 0 como argumento "
"por defecto.  Más adelante veremos cómo expresar grupos que no capturan el "
"tramo de texto con el que coinciden ::"

#: ../../howto/regex.rst:835
msgid ""
"Subgroups are numbered from left to right, from 1 upward.  Groups can be "
"nested; to determine the number, just count the opening parenthesis "
"characters, going from left to right. ::"
msgstr ""
"Los subgrupos se numeran de izquierda a derecha, de 1 en adelante.  Los "
"grupos pueden estar anidados; para determinar el número, basta con contar "
"los caracteres de apertura del paréntesis, de izquierda a derecha. ::"

#: ../../howto/regex.rst:848
msgid ""
":meth:`~re.Match.group` can be passed multiple group numbers at a time, in "
"which case it will return a tuple containing the corresponding values for "
"those groups. ::"
msgstr ""
":meth:`~re.Match.group` se le pueden pasar varios números de grupo a la vez, "
"en cuyo caso devolverá una tupla con los valores correspondientes a esos "
"grupos. ::"

#: ../../howto/regex.rst:854
msgid ""
"The :meth:`~re.Match.groups` method returns a tuple containing the strings "
"for all the subgroups, from 1 up to however many there are. ::"
msgstr ""
"El método :meth:`~re.Match.groups` devuelve una tupla que contiene las "
"cadenas de todos los subgrupos, desde 1 hasta el número que haya. ::"

#: ../../howto/regex.rst:860
msgid ""
"Backreferences in a pattern allow you to specify that the contents of an "
"earlier capturing group must also be found at the current location in the "
"string.  For example, ``\\1`` will succeed if the exact contents of group 1 "
"can be found at the current position, and fails otherwise.  Remember that "
"Python's string literals also use a backslash followed by numbers to allow "
"including arbitrary characters in a string, so be sure to use a raw string "
"when incorporating backreferences in a RE."
msgstr ""
"Las referencias retrospectivas en un patrón permiten especificar que el "
"contenido de un grupo de captura anterior también debe encontrarse en la "
"posición actual de la cadena.  Por ejemplo, ``\\1`` tendrá éxito si el "
"contenido exacto del grupo 1 se encuentra en la posición actual, y fallará "
"en caso contrario.  Recuerde que los literales de cadena de Python también "
"utilizan una barra invertida seguida de números para permitir la inclusión "
"de caracteres arbitrarios en una cadena, así que asegúrese de utilizar una "
"cadena sin procesar cuando incorpore retro-referencias en un RE."

#: ../../howto/regex.rst:868
msgid "For example, the following RE detects doubled words in a string. ::"
msgstr ""
"Por ejemplo, el siguiente RE detecta palabras duplicadas en una cadena ::"

#: ../../howto/regex.rst:874
msgid ""
"Backreferences like this aren't often useful for just searching through a "
"string --- there are few text formats which repeat data in this way --- but "
"you'll soon find out that they're *very* useful when performing string "
"substitutions."
msgstr ""
"Las referencias retrospectivas de este tipo no suelen ser útiles para buscar "
"en una cadena - hay pocos formatos de texto que repitan los datos de este "
"modo-, pero pronto descubrirás que son *muy* útiles para realizar "
"sustituciones de cadenas."

#: ../../howto/regex.rst:880
msgid "Non-capturing and Named Groups"
msgstr "Grupos no capturados y nombrados"

#: ../../howto/regex.rst:882
msgid ""
"Elaborate REs may use many groups, both to capture substrings of interest, "
"and to group and structure the RE itself.  In complex REs, it becomes "
"difficult to keep track of the group numbers.  There are two features which "
"help with this problem.  Both of them use a common syntax for regular "
"expression extensions, so we'll look at that first."
msgstr ""
"Los RE elaborados pueden utilizar muchos grupos, tanto para capturar "
"subcadenas de interés como para agrupar y estructurar el propio RE.  En los "
"RE complejos, resulta difícil hacer un seguimiento de los números de grupo.  "
"Hay dos funciones que ayudan a resolver este problema.  Ambas usan una "
"sintaxis común para las extensiones de expresiones regulares, así que "
"veremos eso primero."

#: ../../howto/regex.rst:888
msgid ""
"Perl 5 is well known for its powerful additions to standard regular "
"expressions. For these new features the Perl developers couldn't choose new "
"single-keystroke metacharacters or new special sequences beginning with "
"``\\`` without making Perl's regular expressions confusingly different from "
"standard REs.  If they chose ``&`` as a new metacharacter, for example, old "
"expressions would be assuming that ``&`` was a regular character and "
"wouldn't have escaped it by writing ``\\&`` or ``[&]``."
msgstr ""
"Perl 5 es bien conocido por sus potentes adiciones a las expresiones "
"regulares estándar. Para estas nuevas características, los desarrolladores "
"de Perl no podían elegir nuevos metacaracteres de una sola pulsación o "
"nuevas secuencias especiales que empezaran por ``\\`` sin hacer que las "
"expresiones regulares de Perl fueran confusamente diferentes de las ER "
"estándar.  Si elegían ``&`` como nuevo metacarácter, por ejemplo, las "
"expresiones antiguas estarían asumiendo que ``&`` era un carácter regular y "
"no lo habrían escapado escribiendo ``\\&`` o ``[&]``."

#: ../../howto/regex.rst:895
msgid ""
"The solution chosen by the Perl developers was to use ``(?...)`` as the "
"extension syntax.  ``?`` immediately after a parenthesis was a syntax error "
"because the ``?`` would have nothing to repeat, so this didn't introduce any "
"compatibility problems.  The characters immediately after the ``?``  "
"indicate what extension is being used, so ``(?=foo)`` is one thing (a "
"positive lookahead assertion) and ``(?:foo)`` is something else (a non-"
"capturing group containing the subexpression ``foo``)."
msgstr ""
"La solución elegida por los desarrolladores de Perl fue utilizar ``(?...)`` "
"como sintaxis de extensión. ``?`` inmediatamente después de un paréntesis "
"era un error de sintaxis porque ``?`` no tendría nada que repetir, así que "
"esto no introdujo ningún problema de compatibilidad.  Los caracteres que "
"aparecen inmediatamente después de ``?`` indican qué extensión se está "
"utilizando, de modo que ``(?=foo)`` es una cosa (una aserción lookahead "
"positiva) y ``(?:foo)`` es otra cosa (un grupo no capturador que contiene la "
"subexpresión ``foo``)."

#: ../../howto/regex.rst:903
msgid ""
"Python supports several of Perl's extensions and adds an extension syntax to "
"Perl's extension syntax.  If the first character after the question mark is "
"a ``P``, you know that it's an extension that's specific to Python."
msgstr ""
"Python soporta varias de las extensiones de Perl y añade una sintaxis de "
"extensión a la sintaxis de extensión de Perl.  Si el primer carácter después "
"del signo de interrogación es ``P``, sabrás que se trata de una extensión "
"específica de Python."

#: ../../howto/regex.rst:908
msgid ""
"Now that we've looked at the general extension syntax, we can return to the "
"features that simplify working with groups in complex REs."
msgstr ""
"Ahora que hemos visto la sintaxis general de la extensión, podemos volver a "
"las características que simplifican el trabajo con grupos en REs complejos."

#: ../../howto/regex.rst:911
msgid ""
"Sometimes you'll want to use a group to denote a part of a regular "
"expression, but aren't interested in retrieving the group's contents. You "
"can make this fact explicit by using a non-capturing group: ``(?:...)``, "
"where you can replace the ``...`` with any other regular expression. ::"
msgstr ""
"A veces querrá utilizar un grupo para denotar una parte de una expresión "
"regular, pero no estará interesado en recuperar el contenido del grupo. "
"Puede hacer explícito este hecho utilizando un grupo no capturador: "
"``(?:...)`` donde puede sustituir ``...`` por cualquier otra expresión "
"regular. ::"

#: ../../howto/regex.rst:923
msgid ""
"Except for the fact that you can't retrieve the contents of what the group "
"matched, a non-capturing group behaves exactly the same as a capturing "
"group; you can put anything inside it, repeat it with a repetition "
"metacharacter such as ``*``, and nest it within other groups (capturing or "
"non-capturing). ``(?:...)`` is particularly useful when modifying an "
"existing pattern, since you can add new groups without changing how all the "
"other groups are numbered.  It should be mentioned that there's no "
"performance difference in searching between capturing and non-capturing "
"groups; neither form is any faster than the other."
msgstr ""
"Excepto por el hecho de que no se puede recuperar el contenido de lo que el "
"grupo coincidió, un grupo de no captura se comporta exactamente igual que un "
"grupo de captura; se puede poner cualquier cosa dentro de él, repetirlo con "
"un metacarácter de repetición como ``*``, y anidarlo dentro de otros grupos "
"(de captura o de no captura). ``(?:...)`` es particularmente útil cuando se "
"modifica un patrón existente, ya que se pueden añadir nuevos grupos sin "
"cambiar cómo se numeran todos los demás grupos.  Cabe mencionar que no hay "
"diferencia de rendimiento en la búsqueda entre grupos de captura y de no "
"captura; ninguna de las dos formas es más rápida que la otra."

#: ../../howto/regex.rst:932
msgid ""
"A more significant feature is named groups: instead of referring to them by "
"numbers, groups can be referenced by a name."
msgstr ""
"Una característica más significativa son los grupos con nombre: en lugar de "
"referirse a ellos por números, se puede hacer referencia a los grupos por un "
"nombre."

#: ../../howto/regex.rst:935
msgid ""
"The syntax for a named group is one of the Python-specific extensions: ``(?"
"P<name>...)``.  *name* is, obviously, the name of the group.  Named groups "
"behave exactly like capturing groups, and additionally associate a name with "
"a group.  The :ref:`match object <match-objects>` methods that deal with "
"capturing groups all accept either integers that refer to the group by "
"number or strings that contain the desired group's name.  Named groups are "
"still given numbers, so you can retrieve information about a group in two "
"ways::"
msgstr ""
"La sintaxis para un grupo con nombre es una de las extensiones específicas "
"de Python: ``(?P<name>...)``.  *nombre* es, obviamente, el nombre del "
"grupo.  Los grupos con nombre se comportan exactamente igual que los grupos "
"de captura, y además asocian un nombre a un grupo.  Los métodos :ref:`match "
"object <match-objects>` que se ocupan de capturar grupos aceptan enteros que "
"se refieren al grupo por su número o cadenas que contienen el nombre del "
"grupo deseado.  Los grupos con nombre siguen recibiendo números, por lo que "
"se puede recuperar información sobre un grupo de dos formas::"

#: ../../howto/regex.rst:950
msgid ""
"Additionally, you can retrieve named groups as a dictionary with :meth:`~re."
"Match.groupdict`::"
msgstr ""
"Además, puede recuperar grupos con nombre como diccionario con :meth:`~re."
"Match.groupdict`::"

#: ../../howto/regex.rst:957
msgid ""
"Named groups are handy because they let you use easily remembered names, "
"instead of having to remember numbers.  Here's an example RE from the :mod:"
"`imaplib` module::"
msgstr ""
"Los grupos con nombre son útiles porque permiten utilizar nombres fáciles de "
"recordar, en lugar de tener que recordar números.  He aquí un ejemplo RE del "
"módulo :mod:`imaplib`::"

#: ../../howto/regex.rst:968
msgid ""
"It's obviously much easier to retrieve ``m.group('zonem')``, instead of "
"having to remember to retrieve group 9."
msgstr ""
"Obviamente, es mucho más fácil recuperar ``m.group('zonem')``, en lugar de "
"tener que acordarse de recuperar el grupo 9."

#: ../../howto/regex.rst:971
msgid ""
"The syntax for backreferences in an expression such as ``(...)\\1`` refers "
"to the number of the group.  There's naturally a variant that uses the group "
"name instead of the number. This is another Python extension: ``(?P=name)`` "
"indicates that the contents of the group called *name* should again be "
"matched at the current point.  The regular expression for finding doubled "
"words, ``\\b(\\w+)\\s+\\1\\b`` can also be written as ``\\b(?"
"P<word>\\w+)\\s+(?P=word)\\b``::"
msgstr ""
"La sintaxis para backreferences en una expresión como ``(...)\\1`` se "
"refiere al número del grupo.  Naturalmente, existe una variante que utiliza "
"el nombre del grupo en lugar del número. Se trata de otra extensión de "
"Python: ``(?P=name)`` indica que el contenido del grupo llamado *nombre* "
"debe volver a coincidir en el punto actual.  La expresión regular para "
"encontrar palabras duplicadas, ``\\b(\\w+)\\s+\\1\\b`` también puede "
"escribirse como ``\\b(?P<word>\\w+)\\s+(?P=word)\\b``::"

#: ../../howto/regex.rst:984
msgid "Lookahead Assertions"
msgstr "Afirmaciones anticipadas"

#: ../../howto/regex.rst:986
msgid ""
"Another zero-width assertion is the lookahead assertion.  Lookahead "
"assertions are available in both positive and negative form, and  look like "
"this:"
msgstr ""
"Otra aserción de ancho cero es la aserción lookahead.  Las aserciones "
"lookahead están disponibles tanto en forma positiva como negativa, y tienen "
"este aspecto:"

#: ../../howto/regex.rst:994
msgid "``(?=...)``"
msgstr "``(?=...)``"

#: ../../howto/regex.rst:990
msgid ""
"Positive lookahead assertion.  This succeeds if the contained regular "
"expression, represented here by ``...``, successfully matches at the current "
"location, and fails otherwise. But, once the contained expression has been "
"tried, the matching engine doesn't advance at all; the rest of the pattern "
"is tried right where the assertion started."
msgstr ""
"Afirmación de búsqueda positiva.  Tiene éxito si la expresión regular "
"contenida, representada aquí por ``...``, coincide con éxito en la ubicación "
"actual, y falla en caso contrario. Pero, una vez que se ha probado la "
"expresión contenida, el motor de comparación no avanza en absoluto; el resto "
"del patrón se prueba justo donde comenzó la aserción."

#: ../../howto/regex.rst:999
msgid "``(?!...)``"
msgstr "``(?!...)``"

#: ../../howto/regex.rst:997
msgid ""
"Negative lookahead assertion.  This is the opposite of the positive "
"assertion; it succeeds if the contained expression *doesn't* match at the "
"current position in the string."
msgstr ""
"Aserción de búsqueda negativa.  Es lo contrario de la aserción positiva; "
"tiene éxito si la expresión contenida *no* coincide en la posición actual de "
"la cadena."

#: ../../howto/regex.rst:1001
msgid ""
"To make this concrete, let's look at a case where a lookahead is useful. "
"Consider a simple pattern to match a filename and split it apart into a base "
"name and an extension, separated by a ``.``.  For example, in ``news.rc``, "
"``news`` is the base name, and ``rc`` is the filename's extension."
msgstr ""
"Para concretar, veamos un caso en el que un lookahead es útil. Considere un "
"patrón simple que coincida con un nombre de archivo y lo divida en un nombre "
"base y una extensión, separados por un ``.``. Por ejemplo, en ``news.rc``, "
"``news`` es el nombre base, y ``rc`` es la extensión del nombre de archivo."

#: ../../howto/regex.rst:1006
msgid "The pattern to match this is quite simple:"
msgstr "El patrón para que coincida con esto es bastante simple:"

#: ../../howto/regex.rst:1008
msgid "``.*[.].*$``"
msgstr "``.*[.].*$``"

#: ../../howto/regex.rst:1010
msgid ""
"Notice that the ``.`` needs to be treated specially because it's a "
"metacharacter, so it's inside a character class to only match that specific "
"character.  Also notice the trailing ``$``; this is added to ensure that all "
"the rest of the string must be included in the extension.  This regular "
"expression matches ``foo.bar`` and ``autoexec.bat`` and ``sendmail.cf`` and "
"``printers.conf``."
msgstr ""
"Observe que ``.`` necesita un tratamiento especial porque es un "
"metacarácter, por lo que está dentro de una clase de caracteres para que "
"sólo coincida con ese carácter específico.  Observe también el final ``$``; "
"se añade para garantizar que todo el resto de la cadena debe incluirse en la "
"extensión.  Esta expresión regular coincide con ``foo.bar`` y ``autoexec."
"bat`` y ``sendmail.cf`` y ``printers.conf``."

#: ../../howto/regex.rst:1017
msgid ""
"Now, consider complicating the problem a bit; what if you want to match "
"filenames where the extension is not ``bat``? Some incorrect attempts:"
msgstr ""
"Ahora, considere la posibilidad de complicar un poco el problema; ¿qué "
"ocurre si desea buscar coincidencias con nombres de archivo cuya extensión "
"no sea ``bat``? Algunos intentos incorrectos:"

#: ../../howto/regex.rst:1020
msgid ""
"``.*[.][^b].*$``  The first attempt above tries to exclude ``bat`` by "
"requiring that the first character of the extension is not a ``b``.  This is "
"wrong, because the pattern also doesn't match ``foo.bar``."
msgstr ""
"``.*[.][^b].*$`` El primer intento anterior intenta excluir ``bat`` "
"exigiendo que el primer carácter de la extensión no sea ``b``. Esto es "
"erróneo, porque el patrón tampoco coincide con ``foo.bar``."

#: ../../howto/regex.rst:1024
msgid "``.*[.]([^b]..|.[^a].|..[^t])$``"
msgstr "``.*[.]([^b]..|.[^a].|..[^t])$``"

#: ../../howto/regex.rst:1026
msgid ""
"The expression gets messier when you try to patch up the first solution by "
"requiring one of the following cases to match: the first character of the "
"extension isn't ``b``; the second character isn't ``a``; or the third "
"character isn't ``t``.  This accepts ``foo.bar`` and rejects ``autoexec."
"bat``, but it requires a three-letter extension and won't accept a filename "
"with a two-letter extension such as ``sendmail.cf``.  We'll complicate the "
"pattern again in an effort to fix it."
msgstr ""
"La expresión se complica cuando se intenta corregir la primera solución "
"exigiendo que coincida uno de los siguientes casos: que el primer carácter "
"de la extensión no sea ``b``; que el segundo carácter no sea ``a``; o que el "
"tercer carácter no sea ``t``.  Esto acepta ``foo.bar`` y rechaza ``autoexec."
"bat``, pero requiere una extensión de tres letras y no aceptará un nombre de "
"archivo con una extensión de dos letras como ``sendmail.cf``.  Volveremos a "
"complicar el patrón para intentar solucionarlo."

#: ../../howto/regex.rst:1034
msgid "``.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$``"
msgstr "``.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$``"

#: ../../howto/regex.rst:1036
msgid ""
"In the third attempt, the second and third letters are all made optional in "
"order to allow matching extensions shorter than three characters, such as "
"``sendmail.cf``."
msgstr ""
"En el tercer intento, la segunda y tercera letras se convierten en "
"opcionales para permitir la coincidencia de extensiones de menos de tres "
"caracteres, como ``sendmail.cf``."

#: ../../howto/regex.rst:1040
msgid ""
"The pattern's getting really complicated now, which makes it hard to read "
"and understand.  Worse, if the problem changes and you want to exclude both "
"``bat`` and ``exe`` as extensions, the pattern would get even more "
"complicated and confusing."
msgstr ""
"El patrón se está volviendo muy complicado ahora, lo que lo hace difícil de "
"leer y entender.  Peor aún, si el problema cambia y se quiere excluir tanto "
"``bat`` como ``exe`` como extensiones, el patrón se volvería aún más "
"complicado y confuso."

#: ../../howto/regex.rst:1045
msgid "A negative lookahead cuts through all this confusion:"
msgstr "Una visión de futuro negativa evita toda esta confusión:"

#: ../../howto/regex.rst:1047
msgid ""
"``.*[.](?!bat$)[^.]*$``  The negative lookahead means: if the expression "
"``bat`` doesn't match at this point, try the rest of the pattern; if "
"``bat$`` does match, the whole pattern will fail.  The trailing ``$`` is "
"required to ensure that something like ``sample.batch``, where the extension "
"only starts with ``bat``, will be allowed.  The ``[^.]*`` makes sure that "
"the pattern works when there are multiple dots in the filename."
msgstr ""
"``.*[.](?!bat$)[^.]*$`` La anticipación negativa significa: si la expresión "
"``bat`` no coincide en este punto, pruebe con el resto del patrón; si "
"``bat$`` coincide, el patrón completo fallará.  El final ``$`` es necesario "
"para asegurar que algo como ``sample.batch``, donde la extensión sólo "
"empieza por ``bat``, sea permitido.  El ``[^.]*`` asegura que el patrón "
"funcione cuando hay varios puntos en el nombre del archivo."

#: ../../howto/regex.rst:1054
msgid ""
"Excluding another filename extension is now easy; simply add it as an "
"alternative inside the assertion.  The following pattern excludes filenames "
"that end in either ``bat`` or ``exe``:"
msgstr ""
"Ahora es fácil excluir otra extensión de nombre de archivo; basta con "
"añadirla como alternativa dentro de la aserción.  El siguiente patrón "
"excluye los nombres de archivo que terminan en ``bat`` o ``exe``:"

#: ../../howto/regex.rst:1058
msgid "``.*[.](?!bat$|exe$)[^.]*$``"
msgstr "``.*[.](?!bat$|exe$)[^.]*$``"

#: ../../howto/regex.rst:1062
msgid "Modifying Strings"
msgstr "Modificación de cadenas"

#: ../../howto/regex.rst:1064
msgid ""
"Up to this point, we've simply performed searches against a static string. "
"Regular expressions are also commonly used to modify strings in various "
"ways, using the following pattern methods:"
msgstr ""
"Hasta ahora, nos hemos limitado a realizar búsquedas en una cadena estática. "
"Las expresiones regulares también se utilizan habitualmente para modificar "
"cadenas de varias maneras, utilizando los siguientes métodos de patrones:"

#: ../../howto/regex.rst:1071
msgid "``split()``"
msgstr "``split()``"

#: ../../howto/regex.rst:1071
msgid "Split the string into a list, splitting it wherever the RE matches"
msgstr "Divide la cadena en una lista, dividiéndola siempre que el RE coincida"

#: ../../howto/regex.rst:1074
msgid "``sub()``"
msgstr "``sub()``"

#: ../../howto/regex.rst:1074
msgid ""
"Find all substrings where the RE matches, and replace them with a different "
"string"
msgstr ""
"Busca todas las subcadenas en las que coincida el RE y sustitúyelas por una "
"cadena diferente"

#: ../../howto/regex.rst:1077
msgid "``subn()``"
msgstr "``subn()``"

#: ../../howto/regex.rst:1077
msgid ""
"Does the same thing as :meth:`!sub`,  but returns the new string and the "
"number of replacements"
msgstr ""
"Hace lo mismo que :meth:`!sub`, pero devuelve la nueva cadena y el número de "
"sustituciones"

#: ../../howto/regex.rst:1084
msgid "Splitting Strings"
msgstr "Dividir cadenas"

#: ../../howto/regex.rst:1086
msgid ""
"The :meth:`~re.Pattern.split` method of a pattern splits a string apart "
"wherever the RE matches, returning a list of the pieces. It's similar to "
"the :meth:`~str.split` method of strings but provides much more generality "
"in the delimiters that you can split by; string :meth:`!split` only supports "
"splitting by whitespace or by a fixed string.  As you'd expect, there's a "
"module-level :func:`re.split` function, too."
msgstr ""
"El método :meth:`~re.Pattern.split` de un patrón divide una cadena siempre "
"que el RE coincida, devolviendo una lista de los trozos. Es similar al "
"método :meth:`~str.split` de cadenas, pero proporciona mucha más generalidad "
"en los delimitadores por los que se puede dividir; la cadena :meth:`!split` "
"sólo admite la división por espacios en blanco o por una cadena fija.  Como "
"era de esperar, también existe una función :func:`re.split` a nivel de "
"módulo."

#: ../../howto/regex.rst:1097
msgid ""
"Split *string* by the matches of the regular expression.  If capturing "
"parentheses are used in the RE, then their contents will also be returned as "
"part of the resulting list.  If *maxsplit* is nonzero, at most *maxsplit* "
"splits are performed."
msgstr ""
"Dividir *cadena* por las coincidencias de la expresión regular.  Si se "
"utilizan paréntesis de captura en la RE, su contenido también se devolverá "
"como parte de la lista resultante.  Si *maxsplit* es distinto de cero, se "
"realizarán como máximo *maxsplit* divisiones."

#: ../../howto/regex.rst:1102
msgid ""
"You can limit the number of splits made, by passing a value for *maxsplit*. "
"When *maxsplit* is nonzero, at most *maxsplit* splits will be made, and the "
"remainder of the string is returned as the final element of the list.  In "
"the following example, the delimiter is any sequence of non-alphanumeric "
"characters. ::"
msgstr ""
"Puede limitar el número de divisiones pasándole un valor a *maxsplit*. "
"Cuando *maxsplit* es distinto de cero, se realiza un máximo de *maxsplit* "
"divisiones, y el resto de la cadena se devuelve como elemento final de la "
"lista.  En el siguiente ejemplo, el delimitador es cualquier secuencia de "
"caracteres no alfanuméricos. ::"

#: ../../howto/regex.rst:1114
msgid ""
"Sometimes you're not only interested in what the text between delimiters is, "
"but also need to know what the delimiter was.  If capturing parentheses are "
"used in the RE, then their values are also returned as part of the list.  "
"Compare the following calls::"
msgstr ""
"A veces no sólo interesa saber cuál es el texto entre delimitadores, sino "
"que también se necesita saber cuál era el delimitador.  Si se utilizan "
"paréntesis de captura en el RE, sus valores también se devuelven como parte "
"de la lista.  Comparar las siguientes llamadas::"

#: ../../howto/regex.rst:1126
msgid ""
"The module-level function :func:`re.split` adds the RE to be used as the "
"first argument, but is otherwise the same.   ::"
msgstr ""
"La función a nivel de módulo :func:`re.split` añade el RE que se utilizará "
"como primer argumento, pero por lo demás es igual. ::"

#: ../../howto/regex.rst:1138
msgid "Search and Replace"
msgstr "Buscar y reemplazar"

#: ../../howto/regex.rst:1140
msgid ""
"Another common task is to find all the matches for a pattern, and replace "
"them with a different string.  The :meth:`~re.Pattern.sub` method takes a "
"replacement value, which can be either a string or a function, and the "
"string to be processed."
msgstr ""
"Otra tarea común es encontrar todas las coincidencias de un patrón y "
"sustituirlas por una cadena diferente.  El método :meth:`~re.Pattern.sub` "
"toma un valor de sustitución, que puede ser una cadena o una función, y la "
"cadena que se va a procesar."

#: ../../howto/regex.rst:1147
msgid ""
"Returns the string obtained by replacing the leftmost non-overlapping "
"occurrences of the RE in *string* by the replacement *replacement*.  If the "
"pattern isn't found, *string* is returned unchanged."
msgstr ""
"Devuelve la cadena obtenida reemplazando las ocurrencias no solapadas más a "
"la izquierda del RE en *cadena* por el reemplazo *reemplazo*.  Si no se "
"encuentra el patrón, *cadena* se devuelve sin cambios."

#: ../../howto/regex.rst:1151
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  The default value "
"of 0 means to replace all occurrences."
msgstr ""
"El argumento opcional *count* es el número máximo de ocurrencias del patrón "
"a reemplazar; *count* debe ser un número entero no negativo.  El valor "
"predeterminado 0 significa que se reemplazan todas las ocurrencias."

#: ../../howto/regex.rst:1155
msgid ""
"Here's a simple example of using the :meth:`~re.Pattern.sub` method.  It "
"replaces colour names with the word ``colour``::"
msgstr ""
"He aquí un ejemplo sencillo de utilización del método :meth:`~re.Pattern."
"sub`.  Sustituye los nombres de los colores por la palabra ``colour``::"

#: ../../howto/regex.rst:1164
msgid ""
"The :meth:`~re.Pattern.subn` method does the same work, but returns a 2-"
"tuple containing the new string value and the number of replacements  that "
"were performed::"
msgstr ""
"El método :meth:`~re.Pattern.subn` hace el mismo trabajo, pero devuelve una "
"2-tupla que contiene el nuevo valor de cadena y el número de sustituciones "
"que se realizaron::"

#: ../../howto/regex.rst:1173
msgid ""
"Empty matches are replaced only when they're not adjacent to a previous "
"empty match. ::"
msgstr ""
"Las coincidencias vacías sólo se sustituyen cuando no son adyacentes a una "
"coincidencia vacía anterior. ::"

#: ../../howto/regex.rst:1180
msgid ""
"If *replacement* is a string, any backslash escapes in it are processed.  "
"That is, ``\\n`` is converted to a single newline character, ``\\r`` is "
"converted to a carriage return, and so forth. Unknown escapes such as "
"``\\&`` are left alone. Backreferences, such as ``\\6``, are replaced with "
"the substring matched by the corresponding group in the RE.  This lets you "
"incorporate portions of the original text in the resulting replacement "
"string."
msgstr ""
"Si *reemplazo* es una cadena, se procesa cualquier escape de barra invertida "
"que contenga.  Es decir, ``\\n`` se convierte en un carácter de nueva línea, "
"``\\r`` se convierte en un retorno de carro, y así sucesivamente. Los "
"escapes desconocidos, como ``\\&``, se dejan como están. Las referencias "
"retrospectivas, como ``\\6``, se sustituyen por la subcadena coincidente con "
"el grupo correspondiente en el RE.  Esto le permite incorporar partes del "
"texto original en la cadena de sustitución resultante."

#: ../../howto/regex.rst:1187
msgid ""
"This example matches the word ``section`` followed by a string enclosed in "
"``{``, ``}``, and changes ``section`` to ``subsection``::"
msgstr ""
"Este ejemplo coincide con la palabra ``section`` seguida de una cadena "
"encerrada en ``{``, ``}``, y cambia ``section`` por ``subsection``::"

#: ../../howto/regex.rst:1194
msgid ""
"There's also a syntax for referring to named groups as defined by the ``(?"
"P<name>...)`` syntax.  ``\\g<name>`` will use the substring matched by the "
"group named ``name``, and  ``\\g<number>``  uses the corresponding group "
"number. ``\\g<2>`` is therefore equivalent to ``\\2``,  but isn't ambiguous "
"in a replacement string such as ``\\g<2>0``.  (``\\20`` would be interpreted "
"as a reference to group 20, not a reference to group 2 followed by the "
"literal character ``'0'``.)  The following substitutions are all equivalent, "
"but use all three variations of the replacement string. ::"
msgstr ""
"También existe una sintaxis para hacer referencia a grupos con nombre, tal "
"como se define en la sintaxis ``(?P<name>...)``. ``\\g<name>`` utilizará la "
"subcadena coincidente con el grupo llamado ``name``, y ``\\g<number>`` "
"utiliza el número de grupo correspondiente. ``\\g<2>`` es, por tanto, "
"equivalente a ``\\2``, pero no es ambigua en una cadena de sustitución como "
"``\\g<2>0``. (``\\20`` se interpretaría como una referencia al grupo 20, no "
"como una referencia al grupo 2 seguida del carácter literal ``'0'``).  Las "
"siguientes sustituciones son todas equivalentes, pero utilizan las tres "
"variantes de la cadena de sustitución. ::"

#: ../../howto/regex.rst:1211
msgid ""
"*replacement* can also be a function, which gives you even more control.  If "
"*replacement* is a function, the function is called for every non-"
"overlapping occurrence of *pattern*.  On each call, the function is passed "
"a :ref:`match object <match-objects>` argument for the match and can use "
"this information to compute the desired replacement string and return it."
msgstr ""
"*replacement* también puede ser una función, lo que le da aún más control.  "
"Si *replacement* es una función, se llama a la función por cada ocurrencia "
"no solapada de *pattern*.  En cada llamada, a la función se le pasa un "
"argumento :ref:`match object <match-objects>` para la coincidencia y puede "
"usar esta información para calcular la cadena de sustitución deseada y "
"devolverla."

#: ../../howto/regex.rst:1217
msgid ""
"In the following example, the replacement function translates decimals into "
"hexadecimal::"
msgstr ""
"En el siguiente ejemplo, la función de sustitución convierte los decimales "
"en hexadecimales::"

#: ../../howto/regex.rst:1229
msgid ""
"When using the module-level :func:`re.sub` function, the pattern is passed "
"as the first argument.  The pattern may be provided as an object or as a "
"string; if you need to specify regular expression flags, you must either use "
"a pattern object as the first parameter, or use embedded modifiers in the "
"pattern string, e.g. ``sub(\"(?i)b+\", \"x\", \"bbbb BBBB\")`` returns ``'x "
"x'``."
msgstr ""
"Cuando se utiliza la función :func:`re.sub` a nivel de módulo, el patrón se "
"pasa como primer argumento.  El patrón puede proporcionarse como un objeto o "
"como una cadena; si necesita especificar indicadores de expresión regular, "
"debe utilizar un objeto de patrón como primer parámetro o utilizar "
"modificadores incrustados en la cadena del patrón, por ejemplo, ``sub(\"(?"
"i)b+\", \"x\", \"bbbb BBBB\")`` devuelve ``'x x'``."

#: ../../howto/regex.rst:1237
msgid "Common Problems"
msgstr "Problemas comunes"

#: ../../howto/regex.rst:1239
msgid ""
"Regular expressions are a powerful tool for some applications, but in some "
"ways their behaviour isn't intuitive and at times they don't behave the way "
"you may expect them to.  This section will point out some of the most common "
"pitfalls."
msgstr ""
"Las expresiones regulares son una potente herramienta para algunas "
"aplicaciones, pero en algunos aspectos su comportamiento no es intuitivo y a "
"veces no se comportan como cabría esperar.  En esta sección se señalan "
"algunos de los escollos más comunes."

#: ../../howto/regex.rst:1245
msgid "Use String Methods"
msgstr "Utilizar métodos de cadena"

#: ../../howto/regex.rst:1247
msgid ""
"Sometimes using the :mod:`re` module is a mistake.  If you're matching a "
"fixed string, or a single character class, and you're not using any :mod:"
"`re` features such as the :const:`~re.IGNORECASE` flag, then the full power "
"of regular expressions may not be required. Strings have several methods for "
"performing operations with fixed strings and they're usually much faster, "
"because the implementation is a single small C loop that's been optimized "
"for the purpose, instead of the large, more generalized regular expression "
"engine."
msgstr ""
"A veces, utilizar el módulo :mod:`re` es un error.  Si estás comparando una "
"cadena fija, o una clase de carácter único, y no estás usando ninguna "
"característica de :mod:`re` como la bandera :const:`~re.IGNORECASE`, "
"entonces puede que no sea necesaria toda la potencia de las expresiones "
"regulares. Las cadenas tienen varios métodos para realizar operaciones con "
"cadenas fijas y normalmente son mucho más rápidas, porque la implementación "
"es un único pequeño bucle en C que ha sido optimizado para el propósito, en "
"lugar del gran y más generalizado motor de expresiones regulares."

#: ../../howto/regex.rst:1255
msgid ""
"One example might be replacing a single fixed string with another one; for "
"example, you might replace ``word`` with ``deed``.  :func:`re.sub` seems "
"like the function to use for this, but consider the :meth:`~str.replace` "
"method.  Note that :meth:`!replace` will also replace ``word`` inside words, "
"turning ``swordfish`` into ``sdeedfish``, but the  naive RE ``word`` would "
"have done that, too.  (To avoid performing the substitution on parts of "
"words, the pattern would have to be ``\\bword\\b``, in order to require that "
"``word`` have a word boundary on either side.  This takes the job beyond  :"
"meth:`!replace`'s abilities.)"
msgstr ""
"Un ejemplo podría ser reemplazar una cadena fija por otra; por ejemplo, "
"podría reemplazar ``word`` por ``deed``. :func:`re.sub` parece la función a "
"utilizar para esto, pero considere el método :meth:`~str.replace`.  Tenga en "
"cuenta que :meth:`!replace` también sustituirá ``word`` dentro de las "
"palabras, convirtiendo ``swordfish`` en ``sdeedfish``, pero el ingenuo RE "
"``word`` también lo habría hecho.  (Para evitar realizar la sustitución en "
"partes de palabras, el patrón tendría que ser ``\\bword\\b``, para requerir "
"que ``word`` tenga un límite de palabra a cada lado.  Esto lleva el trabajo "
"más allá de las capacidades de :meth:`!replace`)."

#: ../../howto/regex.rst:1264
msgid ""
"Another common task is deleting every occurrence of a single character from "
"a string or replacing it with another single character.  You might do this "
"with something like ``re.sub('\\n', ' ', S)``, but :meth:`~str.translate` is "
"capable of doing both tasks and will be faster than any regular expression "
"operation can be."
msgstr ""
"Otra tarea común es borrar cada ocurrencia de un único carácter de una "
"cadena o reemplazarlo por otro único carácter.  Puede hacer esto con algo "
"como ``re.sub('\\n', ' ', S)``, pero :meth:`~str.translate` es capaz de "
"hacer ambas tareas y será más rápido que cualquier operación de expresión "
"regular."

#: ../../howto/regex.rst:1270
msgid ""
"In short, before turning to the :mod:`re` module, consider whether your "
"problem can be solved with a faster and simpler string method."
msgstr ""
"En resumen, antes de recurrir al módulo :mod:`re`, considere si su problema "
"puede resolverse con un método de cadenas más rápido y sencillo."

#: ../../howto/regex.rst:1275
msgid "match() versus search()"
msgstr "match() versus search()"

#: ../../howto/regex.rst:1277
msgid ""
"The :func:`~re.match` function only checks if the RE matches at the "
"beginning of the string while :func:`~re.search` will scan forward through "
"the string for a match. It's important to keep this distinction in mind.  "
"Remember,  :func:`!match` will only report a successful match which will "
"start at 0; if the match wouldn't start at zero,  :func:`!match` will *not* "
"report it. ::"
msgstr ""
"La función :func:`~re.match` sólo comprueba si el RE coincide al principio "
"de la cadena, mientras que :func:`~re.search` escaneará la cadena hacia "
"delante en busca de una coincidencia. Es importante tener en cuenta esta "
"distinción.  Recuerde, :func:`!match` sólo reportará una coincidencia "
"exitosa que comenzará en 0; si la coincidencia no comenzara en cero, :func:`!"
"match` *no* la reportará. ::"

#: ../../howto/regex.rst:1288
msgid ""
"On the other hand, :func:`~re.search` will scan forward through the string, "
"reporting the first match it finds. ::"
msgstr ""
"Por otro lado, :func:`~re.search` escaneará hacia delante a través de la "
"cadena, informando de la primera coincidencia que encuentre. ::"

#: ../../howto/regex.rst:1296
msgid ""
"Sometimes you'll be tempted to keep using :func:`re.match`, and just add ``."
"*`` to the front of your RE.  Resist this temptation and use :func:`re."
"search` instead.  The regular expression compiler does some analysis of REs "
"in order to speed up the process of looking for a match.  One such analysis "
"figures out what the first character of a match must be; for example, a "
"pattern starting with ``Crow`` must match starting with a ``'C'``.  The "
"analysis lets the engine quickly scan through the string looking for the "
"starting character, only trying the full match if a ``'C'`` is found."
msgstr ""
"A veces tendrás la tentación de seguir utilizando :func:`re.match`, y añadir "
"simplemente ``.*`` al principio de tu RE.  Resista esta tentación y use :"
"func:`re.search` en su lugar.  El compilador de expresiones regulares "
"realiza algunos análisis de las ER para acelerar el proceso de búsqueda de "
"coincidencias.  Uno de estos análisis calcula cuál debe ser el primer "
"carácter de una coincidencia; por ejemplo, un patrón que empiece por "
"``Crow`` debe coincidir a partir de ``'C'``. El análisis permite al motor "
"escanear rápidamente la cadena en busca del carácter inicial, intentando la "
"coincidencia completa sólo si se encuentra un ``'C'``."

#: ../../howto/regex.rst:1305
msgid ""
"Adding ``.*`` defeats this optimization, requiring scanning to the end of "
"the string and then backtracking to find a match for the rest of the RE.  "
"Use :func:`re.search` instead."
msgstr ""
"Si se añade ``.*``, se pierde esta optimización, ya que es necesario "
"escanear hasta el final de la cadena y luego retroceder para encontrar una "
"coincidencia para el resto de la RE.  Utilice :func:`re.search` en su lugar."

#: ../../howto/regex.rst:1311
msgid "Greedy versus Non-Greedy"
msgstr "Codicioso frente a no codicioso"

#: ../../howto/regex.rst:1313
msgid ""
"When repeating a regular expression, as in ``a*``, the resulting action is "
"to consume as much of the pattern as possible.  This fact often bites you "
"when you're trying to match a pair of balanced delimiters, such as the angle "
"brackets surrounding an HTML tag.  The naive pattern for matching a single "
"HTML tag doesn't work because of the greedy nature of ``.*``. ::"
msgstr ""
"Cuando se repite una expresión regular, como en ``a*``, la acción resultante "
"es consumir la mayor parte posible del patrón.  Este hecho a menudo resulta "
"molesto cuando se trata de hacer coincidir un par de delimitadores "
"equilibrados, como los corchetes angulares que rodean una etiqueta HTML.  El "
"patrón ingenuo para que coincida con una sola etiqueta HTML no funciona "
"debido a la naturaleza codiciosa de ``.*``. ::"

#: ../../howto/regex.rst:1327
msgid ""
"The RE matches the ``'<'`` in ``'<html>'``, and the ``.*`` consumes the rest "
"of the string.  There's still more left in the RE, though, and the ``>`` "
"can't match at the end of the string, so the regular expression engine has "
"to backtrack character by character until it finds a match for the ``>``.   "
"The final match extends from the ``'<'`` in ``'<html>'`` to the ``'>'`` in "
"``'</title>'``, which isn't what you want."
msgstr ""
"La RE coincide con ``'<'`` en ``'<html>'``, y ``.*`` consume el resto de la "
"cadena.  Aún queda más en el RE, sin embargo, y el ``>`` no puede coincidir "
"al final de la cadena, por lo que el motor de expresión regular tiene que "
"retroceder carácter por carácter hasta que encuentra una coincidencia para "
"el ``>``. La coincidencia final se extiende desde el ``'<'`` en ``'<html>'`` "
"hasta el ``'>'`` en ``'</title>'``, que no es lo que usted quiere."

#: ../../howto/regex.rst:1334
msgid ""
"In this case, the solution is to use the non-greedy quantifiers ``*?``, ``+?"
"``, ``??``, or ``{m,n}?``, which match as *little* text as possible.  In the "
"above example, the ``'>'`` is tried immediately after the first ``'<'`` "
"matches, and when it fails, the engine advances a character at a time, "
"retrying the ``'>'`` at every step.  This produces just the right result::"
msgstr ""
"En este caso, la solución es utilizar los cuantificadores no codiciosos ``*?"
"``, ``+?``, ``??``, o ``{m,n}?``, que coinciden con el *menor* texto "
"posible.  En el ejemplo anterior, ``'>'`` se prueba inmediatamente después "
"de la primera coincidencia con ``'<'`` y, cuando falla, el motor avanza un "
"carácter cada vez, volviendo a probar ``'>'`` en cada paso.  Esto produce el "
"resultado justo::"

#: ../../howto/regex.rst:1343
msgid ""
"(Note that parsing HTML or XML with regular expressions is painful. Quick-"
"and-dirty patterns will handle common cases, but HTML and XML have special "
"cases that will break the obvious regular expression; by the time you've "
"written a regular expression that handles all of the possible cases, the "
"patterns will be *very* complicated.  Use an HTML or XML parser module for "
"such tasks.)"
msgstr ""
"(Tener en cuenta que analizar HTML o XML con expresiones regulares es "
"penoso. Los patrones rápidos manejarán los casos comunes, pero HTML y XML "
"tienen casos especiales que romperán la expresión regular obvia; para cuando "
"se escriba una expresión regular que maneje todos los casos posibles, los "
"patrones serán *muy* complicados.  Utilizar un módulo analizador HTML o XML "
"para estas tareas)."

#: ../../howto/regex.rst:1351
msgid "Using re.VERBOSE"
msgstr "Uso de re.VERBOSE"

#: ../../howto/regex.rst:1353
msgid ""
"By now you've probably noticed that regular expressions are a very compact "
"notation, but they're not terribly readable.  REs of moderate complexity can "
"become lengthy collections of backslashes, parentheses, and metacharacters, "
"making them difficult to read and understand."
msgstr ""
"Probablemente ya te habrás dado cuenta de que las expresiones regulares son "
"una notación muy compacta, pero no son terriblemente legibles.  Las "
"expresiones regulares de complejidad moderada pueden convertirse en largas "
"colecciones de barras invertidas, paréntesis y metacaracteres, lo que "
"dificulta su lectura y comprensión."

#: ../../howto/regex.rst:1358
msgid ""
"For such REs, specifying the :const:`re.VERBOSE` flag when compiling the "
"regular expression can be helpful, because it allows you to format the "
"regular expression more clearly."
msgstr ""
"Para este tipo de expresiones regulares, puede ser útil especificar el "
"indicador :const:`re.VERBOSE` al compilar la expresión regular, ya que "
"permite formatearla con mayor claridad."

#: ../../howto/regex.rst:1362
msgid ""
"The ``re.VERBOSE`` flag has several effects.  Whitespace in the regular "
"expression that *isn't* inside a character class is ignored.  This means "
"that an expression such as ``dog | cat`` is equivalent to the less readable "
"``dog|cat``, but ``[a b]`` will still match the characters ``'a'``, ``'b'``, "
"or a space.  In addition, you can also put comments inside a RE; comments "
"extend from a ``#`` character to the next newline.  When used with triple-"
"quoted strings, this enables REs to be formatted more neatly::"
msgstr ""
"El indicador ``re.VERBOSE`` tiene varios efectos.  Se ignoran los espacios "
"en blanco de la expresión regular que *no* estén dentro de una clase de "
"caracteres.  Esto significa que una expresión como ``dog | cat`` es "
"equivalente a la menos legible ``dog|cat``, pero ``[a b]`` seguirá "
"coincidiendo con los caracteres ``'a'``, ``'b'``, o un espacio.  Además, "
"también puede poner comentarios dentro de una RE; los comentarios se "
"extienden desde un carácter ``#`` hasta la siguiente nueva línea.  Cuando se "
"utilizan con cadenas entre comillas triples, esto permite formatear los RE "
"de forma más ordenada::"

#: ../../howto/regex.rst:1379
msgid "This is far more readable than::"
msgstr "Esto es mucho más legible que::"

#: ../../howto/regex.rst:1385
msgid "Feedback"
msgstr "Comentarios"

#: ../../howto/regex.rst:1387
msgid ""
"Regular expressions are a complicated topic.  Did this document help you "
"understand them?  Were there parts that were unclear, or Problems you "
"encountered that weren't covered here?  If so, please send suggestions for "
"improvements to the author."
msgstr ""
"Las expresiones regulares son un tema complicado.  ¿Le ha ayudado este "
"documento a entenderlas?  ¿Hubo partes que no quedaron claras, o problemas "
"que encontró que no se trataron aquí?  Si es así, por favor envíe "
"sugerencias de mejora al autor."

#: ../../howto/regex.rst:1392
msgid ""
"The most complete book on regular expressions is almost certainly Jeffrey "
"Friedl's Mastering Regular Expressions, published by O'Reilly.  "
"Unfortunately, it exclusively concentrates on Perl and Java's flavours of "
"regular expressions, and doesn't contain any Python material at all, so it "
"won't be useful as a reference for programming in Python.  (The first "
"edition covered Python's now-removed :mod:`!regex` module, which won't help "
"you much.)  Consider checking it out from your library."
msgstr ""
"El libro más completo sobre expresiones regulares es sin duda Mastering "
"Regular Expressions, de Jeffrey Friedl, publicado por O'Reilly.  "
"Desafortunadamente, se concentra exclusivamente en las expresiones regulares "
"de Perl y Java, y no contiene ningún material sobre Python, por lo que no "
"será útil como referencia para programar en Python.  (La primera edición "
"cubría el ahora eliminado módulo :mod:`!regex` de Python, que no le ayudará "
"mucho).  Considera sacarlo de tu biblioteca."
