# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-28 14:56+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../howto/functional.rst:5
msgid "Functional Programming HOWTO"
msgstr "Programación funcional CÓMO"

#: ../../howto/functional.rst:0
msgid "Author"
msgstr "Autor"

#: ../../howto/functional.rst:7
msgid "A. M. Kuchling"
msgstr "A. M. Kuchling"

#: ../../howto/functional.rst:0
msgid "Release"
msgstr "Publique"

#: ../../howto/functional.rst:8
msgid "0.32"
msgstr "0.32"

#: ../../howto/functional.rst:10
msgid ""
"In this document, we'll take a tour of Python's features suitable for "
"implementing programs in a functional style.  After an introduction to the "
"concepts of functional programming, we'll look at language features such as :"
"term:`iterator`\\s and :term:`generator`\\s and relevant library modules "
"such as :mod:`itertools` and :mod:`functools`."
msgstr ""
"En este documento, haremos un recorrido por las características de Python "
"adecuadas para implementar programas en un estilo funcional.  Después de una "
"introducción a los conceptos de programación funcional, veremos "
"características del lenguaje como :term:`iterator`s y :term:`generator`s y "
"módulos de librerías relevantes como :mod:`itertools` y :mod:`functools`."

#: ../../howto/functional.rst:18
msgid "Introduction"
msgstr "Introducción"

#: ../../howto/functional.rst:20
msgid ""
"This section explains the basic concept of functional programming; if you're "
"just interested in learning about Python language features, skip to the next "
"section on :ref:`functional-howto-iterators`."
msgstr ""
"Esta sección explica el concepto básico de programación funcional; si sólo "
"estás interesado en conocer las características del lenguaje Python, pasa a "
"la siguiente sección en :ref:`functional-howto-iterators`."

#: ../../howto/functional.rst:24
msgid ""
"Programming languages support decomposing problems in several different ways:"
msgstr ""
"Los lenguajes de programación permiten descomponer los problemas de "
"distintas maneras:"

#: ../../howto/functional.rst:26
msgid ""
"Most programming languages are **procedural**: programs are lists of "
"instructions that tell the computer what to do with the program's input.  C, "
"Pascal, and even Unix shells are procedural languages."
msgstr ""
"La mayoría de los lenguajes de programación son **procedimentales**: los "
"programas son listas de instrucciones que indican al ordenador qué hacer con "
"la entrada del programa.  C, Pascal e incluso los shells de Unix son "
"lenguajes procedimentales."

#: ../../howto/functional.rst:30
msgid ""
"In **declarative** languages, you write a specification that describes the "
"problem to be solved, and the language implementation figures out how to "
"perform the computation efficiently.  SQL is the declarative language you're "
"most likely to be familiar with; a SQL query describes the data set you want "
"to retrieve, and the SQL engine decides whether to scan tables or use "
"indexes, which subclauses should be performed first, etc."
msgstr ""
"En los lenguajes **declarativos**, se escribe una especificación que "
"describe el problema que hay que resolver y la implementación del lenguaje "
"determina cómo realizar el cálculo de forma eficiente.  SQL es el lenguaje "
"declarativo con el que probablemente estés más familiarizado; una consulta "
"SQL describe el conjunto de datos que quieres recuperar, y el motor SQL "
"decide si escanear tablas o utilizar índices, qué subcláusulas deben "
"ejecutarse primero, etc."

#: ../../howto/functional.rst:37
msgid ""
"**Object-oriented** programs manipulate collections of objects.  Objects "
"have internal state and support methods that query or modify this internal "
"state in some way. Smalltalk and Java are object-oriented languages.  C++ "
"and Python are languages that support object-oriented programming, but don't "
"force the use of object-oriented features."
msgstr ""
"**Los programas orientados a objetos** manipulan colecciones de objetos.  "
"Los objetos tienen un estado interno y admiten métodos que consultan o "
"modifican este estado interno de alguna manera. Smalltalk y Java son "
"lenguajes orientados a objetos.  C++ y Python son lenguajes que soportan la "
"programación orientada a objetos, pero no fuerzan el uso de características "
"orientadas a objetos."

#: ../../howto/functional.rst:43
msgid ""
"**Functional** programming decomposes a problem into a set of functions. "
"Ideally, functions only take inputs and produce outputs, and don't have any "
"internal state that affects the output produced for a given input.  Well-"
"known functional languages include the ML family (Standard ML, OCaml, and "
"other variants) and Haskell."
msgstr ""
"**La programación funcional** descompone un problema en un conjunto de "
"funciones. Idealmente, las funciones sólo reciben entradas y producen "
"salidas, y no tienen ningún estado interno que afecte a la salida producida "
"para una entrada dada.  Los lenguajes funcionales más conocidos son la "
"familia ML (Standard ML, OCaml y otras variantes) y Haskell."

#: ../../howto/functional.rst:49
msgid ""
"The designers of some computer languages choose to emphasize one particular "
"approach to programming.  This often makes it difficult to write programs "
"that use a different approach.  Other languages are multi-paradigm languages "
"that support several different approaches. Lisp, C++, and Python are multi-"
"paradigm; you can write programs or libraries that are largely procedural, "
"object-oriented, or functional in all of these languages.  In a large "
"program, different sections might be written using different approaches; the "
"GUI might be object-oriented while the processing logic is procedural or "
"functional, for example."
msgstr ""
"Los diseñadores de algunos lenguajes informáticos optan por hacer hincapié "
"en un enfoque concreto de la programación.  Esto suele dificultar la "
"escritura de programas que utilicen un enfoque diferente.  Otros lenguajes "
"son multiparadigma y admiten varios enfoques diferentes. Lisp, C++ y Python "
"son multiparadigma; puede escribir programas o bibliotecas que sean en gran "
"medida procedimentales, orientados a objetos o funcionales en todos estos "
"lenguajes.  En un programa grande, las diferentes secciones pueden estar "
"escritas con diferentes enfoques; la interfaz gráfica de usuario puede estar "
"orientada a objetos, mientras que la lógica de procesamiento es "
"procedimental o funcional, por ejemplo."

#: ../../howto/functional.rst:60
msgid ""
"In a functional program, input flows through a set of functions. Each "
"function operates on its input and produces some output.  Functional style "
"discourages functions with side effects that modify internal state or make "
"other changes that aren't visible in the function's return value.  Functions "
"that have no side effects at all are called **purely functional**.  Avoiding "
"side effects means not using data structures that get updated as a program "
"runs; every function's output must only depend on its input."
msgstr ""
"En un programa funcional, la entrada fluye a través de un conjunto de "
"funciones. Cada función opera sobre su entrada y produce una salida.  El "
"estilo funcional desaconseja las funciones con efectos secundarios que "
"modifican el estado interno o realizan otros cambios que no son visibles en "
"el valor de retorno de la función.  Las funciones que no tienen ningún "
"efecto secundario se denominan **puramente funcionales**.  Evitar los "
"efectos secundarios significa no utilizar estructuras de datos que se "
"actualizan a medida que se ejecuta un programa; la salida de cada función "
"sólo debe depender de su entrada."

#: ../../howto/functional.rst:68
msgid ""
"Some languages are very strict about purity and don't even have assignment "
"statements such as ``a=3`` or ``c = a + b``, but it's difficult to avoid all "
"side effects, such as printing to the screen or writing to a disk file. "
"Another example is a call to the :func:`print` or :func:`time.sleep` "
"function, neither of which returns a useful value. Both are called only for "
"their side effects of sending some text to the screen or pausing execution "
"for a second."
msgstr ""
"Algunos lenguajes son muy estrictos con la pureza y ni siquiera tienen "
"sentencias de asignación como ``a=3`` o ``c = a + b``, pero es difícil "
"evitar todos los efectos secundarios, como imprimir en la pantalla o "
"escribir en un archivo de disco. Otro ejemplo es una llamada a la función :"
"func:`print` o :func:`time.sleep`, ninguna de las cuales devuelve un valor "
"útil. Ambas son llamadas sólo por sus efectos secundarios de enviar algún "
"texto a la pantalla o pausar la ejecución por un segundo."

#: ../../howto/functional.rst:75
msgid ""
"Python programs written in functional style usually won't go to the extreme "
"of avoiding all I/O or all assignments; instead, they'll provide a "
"functional-appearing interface but will use non-functional features "
"internally. For example, the implementation of a function will still use "
"assignments to local variables, but won't modify global variables or have "
"other side effects."
msgstr ""
"Los programas Python escritos en estilo funcional normalmente no irán al "
"extremo de evitar todas las E/S o todas las asignaciones; en su lugar, "
"proporcionarán una interfaz de apariencia funcional pero usarán "
"características no funcionales internamente. Por ejemplo, la implementación "
"de una función seguirá usando asignaciones a variables locales, pero no "
"modificará variables globales ni tendrá otros efectos secundarios."

#: ../../howto/functional.rst:81
msgid ""
"Functional programming can be considered the opposite of object-oriented "
"programming.  Objects are little capsules containing some internal state "
"along with a collection of method calls that let you modify this state, and "
"programs consist of making the right set of state changes.  Functional "
"programming wants to avoid state changes as much as possible and works with "
"data flowing between functions.  In Python you might combine the two "
"approaches by writing functions that take and return instances representing "
"objects in your application (e-mail messages, transactions, etc.)."
msgstr ""
"La programación funcional puede considerarse lo contrario de la programación "
"orientada a objetos.  Los objetos son pequeñas cápsulas que contienen cierto "
"estado interno junto con una colección de llamadas a métodos que permiten "
"modificar este estado, y los programas consisten en realizar el conjunto "
"adecuado de cambios de estado.  La programación funcional quiere evitar los "
"cambios de estado tanto como sea posible y trabaja con datos que fluyen "
"entre funciones.  En Python puedes combinar los dos enfoques escribiendo "
"funciones que toman y devuelven instancias que representan objetos en tu "
"aplicación (mensajes de correo electrónico, transacciones, etc.)."

#: ../../howto/functional.rst:90
msgid ""
"Functional design may seem like an odd constraint to work under.  Why should "
"you avoid objects and side effects?  There are theoretical and practical "
"advantages to the functional style:"
msgstr ""
"El diseño funcional puede parecer una restricción extraña con la que "
"trabajar.  ¿Por qué evitar los objetos y los efectos secundarios?  El estilo "
"funcional tiene ventajas teóricas y prácticas:"

#: ../../howto/functional.rst:94
msgid "Formal provability."
msgstr "Probabilidad formal."

#: ../../howto/functional.rst:95
msgid "Modularity."
msgstr "Modularidad."

#: ../../howto/functional.rst:96
msgid "Composability."
msgstr "Composibilidad."

#: ../../howto/functional.rst:97
msgid "Ease of debugging and testing."
msgstr "Facilidad de depuración y comprobación."

#: ../../howto/functional.rst:101
msgid "Formal provability"
msgstr "Probabilidad formal"

#: ../../howto/functional.rst:103
msgid ""
"A theoretical benefit is that it's easier to construct a mathematical proof "
"that a functional program is correct."
msgstr ""
"Una ventaja teórica es que es más fácil construir una prueba matemática de "
"que un programa funcional es correcto."

#: ../../howto/functional.rst:106
msgid ""
"For a long time researchers have been interested in finding ways to "
"mathematically prove programs correct.  This is different from testing a "
"program on numerous inputs and concluding that its output is usually "
"correct, or reading a program's source code and concluding that the code "
"looks right; the goal is instead a rigorous proof that a program produces "
"the right result for all possible inputs."
msgstr ""
"Desde hace mucho tiempo, los investigadores se interesan por demostrar "
"matemáticamente que los programas son correctos.  No se trata de probar un "
"programa con numerosas entradas y concluir que su salida suele ser correcta, "
"o de leer el código fuente de un programa y concluir que el código parece "
"correcto; el objetivo es una prueba rigurosa de que un programa produce el "
"resultado correcto para todas las entradas posibles."

#: ../../howto/functional.rst:113
msgid ""
"The technique used to prove programs correct is to write down "
"**invariants**, properties of the input data and of the program's variables "
"that are always true.  For each line of code, you then show that if "
"invariants X and Y are true **before** the line is executed, the slightly "
"different invariants X' and Y' are true **after** the line is executed.  "
"This continues until you reach the end of the program, at which point the "
"invariants should match the desired conditions on the program's output."
msgstr ""
"La técnica utilizada para demostrar que los programas son correctos consiste "
"en escribir **invariantes**, propiedades de los datos de entrada y de las "
"variables del programa que siempre son ciertas.  Para cada línea de código, "
"se demuestra que si las invariantes X e Y son verdaderas **antes** de que se "
"ejecute la línea, las invariantes X' e Y', ligeramente diferentes, son "
"verdaderas **después** de que se ejecute la línea.  Esto continúa hasta "
"llegar al final del programa, momento en el que los invariantes deben "
"coincidir con las condiciones deseadas en la salida del programa."

#: ../../howto/functional.rst:121
msgid ""
"Functional programming's avoidance of assignments arose because assignments "
"are difficult to handle with this technique; assignments can break "
"invariants that were true before the assignment without producing any new "
"invariants that can be propagated onward."
msgstr ""
"La programación funcional evita las asignaciones porque son difíciles de "
"manejar con esta técnica; las asignaciones pueden romper invariantes que "
"eran verdaderas antes de la asignación sin producir nuevas invariantes que "
"puedan propagarse."

#: ../../howto/functional.rst:126
msgid ""
"Unfortunately, proving programs correct is largely impractical and not "
"relevant to Python software. Even trivial programs require proofs that are "
"several pages long; the proof of correctness for a moderately complicated "
"program would be enormous, and few or none of the programs you use daily "
"(the Python interpreter, your XML parser, your web browser) could be proven "
"correct.  Even if you wrote down or generated a proof, there would then be "
"the question of verifying the proof; maybe there's an error in it, and you "
"wrongly believe you've proved the program correct."
msgstr ""
"Desafortunadamente, probar la corrección de los programas es poco práctico y "
"no es relevante para el software Python. Incluso los programas triviales "
"requieren demostraciones de varias páginas; la demostración de la corrección "
"de un programa medianamente complicado sería enorme, y pocos o ninguno de "
"los programas que usas a diario (el intérprete de Python, tu analizador XML, "
"tu navegador web) podrían demostrarse correctos.  Incluso si escribiera o "
"generara una prueba, luego estaría la cuestión de verificar la prueba; tal "
"vez haya un error en ella, y usted crea erróneamente que ha demostrado que "
"el programa es correcto."

#: ../../howto/functional.rst:137
msgid "Modularity"
msgstr "Modularidad"

#: ../../howto/functional.rst:139
msgid ""
"A more practical benefit of functional programming is that it forces you to "
"break apart your problem into small pieces.  Programs are more modular as a "
"result.  It's easier to specify and write a small function that does one "
"thing than a large function that performs a complicated transformation.  "
"Small functions are also easier to read and to check for errors."
msgstr ""
"Una ventaja más práctica de la programación funcional es que obliga a "
"dividir el problema en pequeños fragmentos.  Como resultado, los programas "
"son más modulares.  Es más fácil especificar y escribir una función pequeña "
"que haga una cosa que una función grande que realice una transformación "
"complicada.  Las funciones pequeñas también son más fáciles de leer y de "
"comprobar en busca de errores."

#: ../../howto/functional.rst:147
msgid "Ease of debugging and testing"
msgstr "Facilidad de depuración y pruebas"

#: ../../howto/functional.rst:149
msgid "Testing and debugging a functional-style program is easier."
msgstr "Probar y depurar un programa de estilo funcional es más fácil."

#: ../../howto/functional.rst:151
msgid ""
"Debugging is simplified because functions are generally small and clearly "
"specified.  When a program doesn't work, each function is an interface point "
"where you can check that the data are correct.  You can look at the "
"intermediate inputs and outputs to quickly isolate the function that's "
"responsible for a bug."
msgstr ""
"La depuración se simplifica porque las funciones suelen ser pequeñas y estar "
"claramente especificadas.  Cuando un programa no funciona, cada función es "
"un punto de interfaz en el que puedes comprobar que los datos son "
"correctos.  Puedes mirar las entradas y salidas intermedias para aislar "
"rápidamente la función responsable de un fallo."

#: ../../howto/functional.rst:156
msgid ""
"Testing is easier because each function is a potential subject for a unit "
"test. Functions don't depend on system state that needs to be replicated "
"before running a test; instead you only have to synthesize the right input "
"and then check that the output matches expectations."
msgstr ""
"Probar es más fácil porque cada función es un tema potencial para una prueba "
"unitaria. Las funciones no dependen de un estado del sistema que haya que "
"replicar antes de ejecutar una prueba, sino que basta con sintetizar la "
"entrada correcta y comprobar que la salida coincide con las expectativas."

#: ../../howto/functional.rst:163
msgid "Composability"
msgstr "Composibilidad"

#: ../../howto/functional.rst:165
msgid ""
"As you work on a functional-style program, you'll write a number of "
"functions with varying inputs and outputs.  Some of these functions will be "
"unavoidably specialized to a particular application, but others will be "
"useful in a wide variety of programs.  For example, a function that takes a "
"directory path and returns all the XML files in the directory, or a function "
"that takes a filename and returns its contents, can be applied to many "
"different situations."
msgstr ""
"A medida que trabaje en un programa de estilo funcional, escribirá una serie "
"de funciones con entradas y salidas variables.  Algunas de estas funciones "
"serán inevitablemente especializadas para una aplicación particular, pero "
"otras serán útiles en una amplia variedad de programas.  Por ejemplo, una "
"función que toma una ruta de directorio y devuelve todos los archivos XML "
"del directorio, o una función que toma un nombre de archivo y devuelve su "
"contenido, pueden aplicarse a muchas situaciones diferentes."

#: ../../howto/functional.rst:172
msgid ""
"Over time you'll form a personal library of utilities.  Often you'll "
"assemble new programs by arranging existing functions in a new configuration "
"and writing a few functions specialized for the current task."
msgstr ""
"Con el tiempo formarás una biblioteca personal de utilidades.  A menudo "
"montarás nuevos programas organizando las funciones existentes en una nueva "
"configuración y escribiendo unas cuantas funciones especializadas para la "
"tarea actual."

#: ../../howto/functional.rst:180
msgid "Iterators"
msgstr "Iteradores"

#: ../../howto/functional.rst:182
msgid ""
"I'll start by looking at a Python language feature that's an important "
"foundation for writing functional-style programs: iterators."
msgstr ""
"Empezaré analizando una característica del lenguaje Python que es una base "
"importante para escribir programas de estilo funcional: los iteradores."

#: ../../howto/functional.rst:185
msgid ""
"An iterator is an object representing a stream of data; this object returns "
"the data one element at a time.  A Python iterator must support a method "
"called :meth:`~iterator.__next__` that takes no arguments and always returns "
"the next element of the stream.  If there are no more elements in the "
"stream, :meth:`~iterator.__next__` must raise the :exc:`StopIteration` "
"exception. Iterators don't have to be finite, though; it's perfectly "
"reasonable to write an iterator that produces an infinite stream of data."
msgstr ""
"Un iterador es un objeto que representa un flujo de datos; este objeto "
"devuelve los datos de uno en uno.  Un iterador de Python debe soportar un "
"método llamado :meth:`~iterator.__next__` que no toma argumentos y siempre "
"devuelve el siguiente elemento del flujo.  Si no hay más elementos en el "
"flujo, :meth:`~iterator.__next__` debe lanzar la excepción :exc:"
"`StopIteration`. Sin embargo, los iteradores no tienen que ser finitos; es "
"perfectamente razonable escribir un iterador que produzca un flujo infinito "
"de datos."

#: ../../howto/functional.rst:193
msgid ""
"The built-in :func:`iter` function takes an arbitrary object and tries to "
"return an iterator that will return the object's contents or elements, "
"raising :exc:`TypeError` if the object doesn't support iteration.  Several "
"of Python's built-in data types support iteration, the most common being "
"lists and dictionaries.  An object is called :term:`iterable` if you can get "
"an iterator for it."
msgstr ""
"La función incorporada :func:`iter` toma un objeto arbitrario e intenta "
"devolver un iterador que devolverá los contenidos o elementos del objeto, "
"mostrando :exc:`TypeError` si el objeto no soporta iteración.  Varios de los "
"tipos de datos incorporados en Python soportan la iteración, siendo los más "
"comunes las listas y los diccionarios.  Un objeto se llama :term:`iterable` "
"si puedes obtener un iterador para él."

#: ../../howto/functional.rst:200
msgid "You can experiment with the iteration interface manually:"
msgstr "Puede experimentar con la interfaz de iteración manualmente:"

#: ../../howto/functional.rst:218
msgid ""
"Python expects iterable objects in several different contexts, the most "
"important being the :keyword:`for` statement.  In the statement ``for X in "
"Y``, Y must be an iterator or some object for which :func:`iter` can create "
"an iterator.  These two statements are equivalent::"
msgstr ""
"Python espera objetos iterables en varios contextos diferentes, siendo el "
"más importante la sentencia :keyword:`for`.  En la sentencia ``for X in Y``, "
"Y debe ser un iterador o algún objeto para el que :func:`iter` pueda crear "
"un iterador.  Estas dos sentencias son equivalentes::"

#: ../../howto/functional.rst:224
msgid ""
"for i in iter(obj):\n"
"    print(i)\n"
"\n"
"for i in obj:\n"
"    print(i)"
msgstr ""
"for i in iter(obj):\n"
"    print(i)\n"
"\n"
"for i in obj:\n"
"    print(i)"

#: ../../howto/functional.rst:230
msgid ""
"Iterators can be materialized as lists or tuples by using the :func:`list` "
"or :func:`tuple` constructor functions:"
msgstr ""
"Los iteradores pueden materializarse como listas o tuplas utilizando las "
"funciones constructoras :func:`list` o :func:`tuple`:"

#: ../../howto/functional.rst:239
msgid ""
"Sequence unpacking also supports iterators: if you know an iterator will "
"return N elements, you can unpack them into an N-tuple:"
msgstr ""
"El desempaquetado de secuencias también admite iteradores: si sabe que un "
"iterador devolverá N elementos, puede desempaquetarlos en una N-tupla:"

#: ../../howto/functional.rst:248
msgid ""
"Built-in functions such as :func:`max` and :func:`min` can take a single "
"iterator argument and will return the largest or smallest element.  The "
"``\"in\"`` and ``\"not in\"`` operators also support iterators: ``X in "
"iterator`` is true if X is found in the stream returned by the iterator.  "
"You'll run into obvious problems if the iterator is infinite; :func:`max`, :"
"func:`min` will never return, and if the element X never appears in the "
"stream, the ``\"in\"`` and ``\"not in\"`` operators won't return either."
msgstr ""
"Las funciones incorporadas como :func:`max` y :func:`min` pueden tomar un "
"único argumento iterador y devolverán el elemento mayor o menor.  Los "
"operadores ``\"in\"`` y ``\"not in\"`` también admiten iteradores: ``X in "
"iterator`` es verdadero si X se encuentra en el flujo devuelto por el "
"iterador.  Se encontrará con problemas obvios si el iterador es infinito; :"
"func:`max`, :func:`min` nunca devolverán, y si el elemento X nunca aparece "
"en el flujo, los operadores ``\"in\"`` y ``\"not in\"`` tampoco devolverán."

#: ../../howto/functional.rst:256
msgid ""
"Note that you can only go forward in an iterator; there's no way to get the "
"previous element, reset the iterator, or make a copy of it.  Iterator "
"objects can optionally provide these additional capabilities, but the "
"iterator protocol only specifies the :meth:`~iterator.__next__` method.  "
"Functions may therefore consume all of the iterator's output, and if you "
"need to do something different with the same stream, you'll have to create a "
"new iterator."
msgstr ""
"Ten en cuenta que sólo puedes avanzar en un iterador; no hay forma de "
"obtener el elemento anterior, reiniciar el iterador o hacer una copia de "
"él.  Los objetos iteradores pueden proporcionar opcionalmente estas "
"capacidades adicionales, pero el protocolo de iteradores sólo especifica el "
"método :meth:`~iterator.__next__`.  Por lo tanto, las funciones pueden "
"consumir toda la salida del iterador, y si necesitas hacer algo diferente "
"con el mismo flujo, tendrás que crear un nuevo iterador."

#: ../../howto/functional.rst:266
msgid "Data Types That Support Iterators"
msgstr "Tipos de datos que admiten iteradores"

#: ../../howto/functional.rst:268
msgid ""
"We've already seen how lists and tuples support iterators.  In fact, any "
"Python sequence type, such as strings, will automatically support creation "
"of an iterator."
msgstr ""
"Ya hemos visto cómo las listas y las tuplas soportan iteradores.  De hecho, "
"cualquier tipo de secuencia de Python, como las cadenas, soportará "
"automáticamente la creación de un iterador."

#: ../../howto/functional.rst:272
msgid ""
"Calling :func:`iter` on a dictionary returns an iterator that will loop over "
"the dictionary's keys::"
msgstr ""
"Al llamar a :func:`iter` sobre un diccionario se obtiene un iterador que "
"recorrerá las claves del diccionario::"

#: ../../howto/functional.rst:275
msgid ""
">>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n"
"...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\n"
">>> for key in m:\n"
"...     print(key, m[key])\n"
"Jan 1\n"
"Feb 2\n"
"Mar 3\n"
"Apr 4\n"
"May 5\n"
"Jun 6\n"
"Jul 7\n"
"Aug 8\n"
"Sep 9\n"
"Oct 10\n"
"Nov 11\n"
"Dec 12"
msgstr ""
">>> m = {'Ene': 1, 'Feb': 2, 'Mar': 3, 'Abr': 4, 'May': 5, 'Jun': 6,\n"
"...      'Jul': 7, 'Ago': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dic': 12}\n"
">>> for clave en m:\n"
"... print(clave, m[clave])\n"
"Ene 1\n"
"Feb 2\n"
"Mar 3\n"
"Abr 4\n"
"May 5\n"
"Jun 6\n"
"Jul 7\n"
"Ago 8\n"
"Sep 9\n"
"Oct 10\n"
"Nov 11\n"
"Dic 12"

#: ../../howto/functional.rst:292
msgid ""
"Note that starting with Python 3.7, dictionary iteration order is guaranteed "
"to be the same as the insertion order. In earlier versions, the behaviour "
"was unspecified and could vary between implementations."
msgstr ""
"Ten en cuenta que a partir de Python 3.7, se garantiza que el orden de "
"iteración del diccionario es el mismo que el orden de inserción. En "
"versiones anteriores, el comportamiento no estaba especificado y podía "
"variar entre implementaciones."

#: ../../howto/functional.rst:296
msgid ""
"Applying :func:`iter` to a dictionary always loops over the keys, but "
"dictionaries have methods that return other iterators.  If you want to "
"iterate over values or key/value pairs, you can explicitly call the :meth:"
"`~dict.values` or :meth:`~dict.items` methods to get an appropriate iterator."
msgstr ""
"La aplicación de :func:`iter` a un diccionario siempre itera sobre las "
"claves, pero los diccionarios tienen métodos que devuelven otros "
"iteradores.  Si desea iterar sobre valores o pares clave/valor, puede llamar "
"explícitamente a los métodos :meth:`~dict.values` o :meth:`~dict.items` para "
"obtener un iterador apropiado."

#: ../../howto/functional.rst:302
msgid ""
"The :func:`dict` constructor can accept an iterator that returns a finite "
"stream of ``(key, value)`` tuples:"
msgstr ""
"El constructor :func:`dict` puede aceptar un iterador que devuelva un flujo "
"finito de tuplas ``(key, value)``:"

#: ../../howto/functional.rst:309
msgid ""
"Files also support iteration by calling the :meth:`~io.TextIOBase.readline` "
"method until there are no more lines in the file.  This means you can read "
"each line of a file like this::"
msgstr ""
"Los archivos también admiten la iteración llamando al método :meth:`~io."
"TextIOBase.readline` hasta que no haya más líneas en el archivo.  Esto "
"significa que puede leer cada línea de un archivo de la siguiente manera::"

#: ../../howto/functional.rst:313
msgid ""
"for line in file:\n"
"    # do something for each line\n"
"    ..."
msgstr ""
"for line in file:\n"
"    # hacer algo para cada línea\n"
"    ..."

#: ../../howto/functional.rst:317
msgid ""
"Sets can take their contents from an iterable and let you iterate over the "
"set's elements::"
msgstr ""
"Los conjuntos pueden tomar su contenido de un iterable y te permiten iterar "
"sobre los elementos del conjunto::"

#: ../../howto/functional.rst:320
msgid ""
">>> S = {2, 3, 5, 7, 11, 13}\n"
">>> for i in S:\n"
"...     print(i)\n"
"2\n"
"3\n"
"5\n"
"7\n"
"11\n"
"13"
msgstr ""
">>> S = {2, 3, 5, 7, 11, 13}\n"
">>> for i in S:\n"
"...     print(i)\n"
"2\n"
"3\n"
"5\n"
"7\n"
"11\n"
"13"

#: ../../howto/functional.rst:333
msgid "Generator expressions and list comprehensions"
msgstr "Expresiones generadoras y comprensión de listas"

#: ../../howto/functional.rst:335
msgid ""
"Two common operations on an iterator's output are 1) performing some "
"operation for every element, 2) selecting a subset of elements that meet "
"some condition. For example, given a list of strings, you might want to "
"strip off trailing whitespace from each line or extract all the strings "
"containing a given substring."
msgstr ""
"Dos operaciones comunes en la salida de un iterador son 1) realizar alguna "
"operación para cada elemento, 2) seleccionar un subconjunto de elementos que "
"cumplan alguna condición. Por ejemplo, dada una lista de cadenas, es posible "
"que desee eliminar los espacios en blanco al final de cada línea o extraer "
"todas las cadenas que contengan una subcadena determinada."

#: ../../howto/functional.rst:341
msgid ""
"List comprehensions and generator expressions (short form: \"listcomps\" and "
"\"genexps\") are a concise notation for such operations, borrowed from the "
"functional programming language Haskell (https://www.haskell.org/).  You can "
"strip all the whitespace from a stream of strings with the following code::"
msgstr ""
"Las comprensiones de listas y las expresiones generadoras (abreviadas: "
"\"listcomps\" y \"genexps\") son una notación concisa para este tipo de "
"operaciones, tomada del lenguaje de programación funcional Haskell (https://"
"www.haskell.org/).  Puede eliminar todos los espacios en blanco de un flujo "
"de cadenas con el siguiente código::"

#: ../../howto/functional.rst:346
msgid ""
">>> line_list = ['  line 1\\n', 'line 2  \\n', ' \\n', '']\n"
"\n"
">>> # Generator expression -- returns iterator\n"
">>> stripped_iter = (line.strip() for line in line_list)\n"
"\n"
">>> # List comprehension -- returns list\n"
">>> stripped_list = [line.strip() for line in line_list]"
msgstr ""
">>> line_list = [' línea 1\\n', 'línea 2 \\n', ' \\n', '']\n"
"\n"
">>> # Expresión generadora -- devuelve un iterador\n"
">>> stripped_iter = (line.strip() for line in line_list)\n"
"\n"
">>> # Comprensión de lista -- devuelve lista\n"
">>>  stripped_list = [line.strip() for line in line_list]"

#: ../../howto/functional.rst:354
msgid ""
"You can select only certain elements by adding an ``\"if\"`` condition::"
msgstr ""
"Puede seleccionar sólo determinados elementos añadiendo una condición "
"``\"if\"``::"

#: ../../howto/functional.rst:356
msgid ""
">>> stripped_list = [line.strip() for line in line_list\n"
"...                  if line != \"\"]"
msgstr ""
">>> stripped_list = [line.strip() for line in line_list\n"
"...                  if line != \"\"]"

#: ../../howto/functional.rst:359
msgid ""
"With a list comprehension, you get back a Python list; ``stripped_list`` is "
"a list containing the resulting lines, not an iterator.  Generator "
"expressions return an iterator that computes the values as necessary, not "
"needing to materialize all the values at once.  This means that list "
"comprehensions aren't useful if you're working with iterators that return an "
"infinite stream or a very large amount of data.  Generator expressions are "
"preferable in these situations."
msgstr ""
"Con una comprensión de lista, se devuelve una lista de Python; "
"``stripped_list`` es una lista que contiene las líneas resultantes, no un "
"iterador.  Las expresiones generadoras devuelven un iterador que computa los "
"valores según sea necesario, sin necesidad de materializar todos los valores "
"a la vez.  Esto significa que las comprensiones de lista no son útiles si se "
"trabaja con iteradores que devuelven un flujo infinito o una cantidad muy "
"grande de datos.  En estas situaciones son preferibles las expresiones "
"generadoras."

#: ../../howto/functional.rst:366
msgid ""
"Generator expressions are surrounded by parentheses (\"()\") and list "
"comprehensions are surrounded by square brackets (\"[]\").  Generator "
"expressions have the form::"
msgstr ""
"Las expresiones generadoras van entre paréntesis (\"()\") y las "
"comprensiones de listas van entre corchetes (\"[]\").  Las expresiones "
"generadas tienen la forma::"

#: ../../howto/functional.rst:370
msgid ""
"( expression for expr in sequence1\n"
"             if condition1\n"
"             for expr2 in sequence2\n"
"             if condition2\n"
"             for expr3 in sequence3\n"
"             ...\n"
"             if condition3\n"
"             for exprN in sequenceN\n"
"             if conditionN )"
msgstr ""
"( expression for expr in sequence1\n"
"             if condition1\n"
"             for expr2 in sequence2\n"
"             if condition2\n"
"             for expr3 in sequence3\n"
"             ...\n"
"             if condition3\n"
"             for exprN in sequenceN\n"
"             if conditionN )"

#: ../../howto/functional.rst:380
msgid ""
"Again, for a list comprehension only the outside brackets are different "
"(square brackets instead of parentheses)."
msgstr ""
"De nuevo, para una comprensión de lista sólo los paréntesis exteriores son "
"diferentes (corchetes en lugar de paréntesis)."

#: ../../howto/functional.rst:383
msgid ""
"The elements of the generated output will be the successive values of "
"``expression``.  The ``if`` clauses are all optional; if present, "
"``expression`` is only evaluated and added to the result when ``condition`` "
"is true."
msgstr ""
"Los elementos de la salida generada serán los valores sucesivos de "
"``expression``. Las cláusulas de ``if`` son todas opcionales; si están "
"presentes, ``expression`` sólo se evalúa y se añade al resultado cuando "
"``condition`` es verdadero."

#: ../../howto/functional.rst:387
msgid ""
"Generator expressions always have to be written inside parentheses, but the "
"parentheses signalling a function call also count.  If you want to create an "
"iterator that will be immediately passed to a function you can write::"
msgstr ""
"Las expresiones del generador siempre deben escribirse dentro de paréntesis, "
"pero los paréntesis que indican una llamada a función también cuentan.  Si "
"quieres crear un iterador que será pasado inmediatamente a una función "
"puedes escribir::"

#: ../../howto/functional.rst:391
msgid "obj_total = sum(obj.count for obj in list_all_objects())"
msgstr "obj_total = sum(obj.count for obj in list_all_objects())"

#: ../../howto/functional.rst:393
msgid ""
"The ``for...in`` clauses contain the sequences to be iterated over.  The "
"sequences do not have to be the same length, because they are iterated over "
"from left to right, **not** in parallel.  For each element in ``sequence1``, "
"``sequence2`` is looped over from the beginning.  ``sequence3`` is then "
"looped over for each resulting pair of elements from ``sequence1`` and "
"``sequence2``."
msgstr ""
"Las cláusulas ``for...in`` contienen las secuencias sobre las que se va a "
"iterar.  No es necesario que las secuencias tengan la misma longitud, ya que "
"se itera sobre ellas de izquierda a derecha, **no** en paralelo.  Para cada "
"elemento de ``sequence1``, se repite ``sequence2`` desde el principio. A "
"continuación, se repite ``sequence3`` para cada par de elementos resultantes "
"de ``sequence1`` y ``sequence2``."

#: ../../howto/functional.rst:399
msgid ""
"To put it another way, a list comprehension or generator expression is "
"equivalent to the following Python code::"
msgstr ""
"Dicho de otro modo, una expresión de comprensión de lista o generador "
"equivale al siguiente código Python::"

#: ../../howto/functional.rst:402
msgid ""
"for expr1 in sequence1:\n"
"    if not (condition1):\n"
"        continue   # Skip this element\n"
"    for expr2 in sequence2:\n"
"        if not (condition2):\n"
"            continue   # Skip this element\n"
"        ...\n"
"        for exprN in sequenceN:\n"
"            if not (conditionN):\n"
"                continue   # Skip this element\n"
"\n"
"            # Output the value of\n"
"            # the expression."
msgstr ""
"for expr1 in sequence1:\n"
"    if not (condition1):\n"
"        continue   # Saltar este elemento\n"
"    for expr2 in sequence2:\n"
"        if not (condition2):\n"
"            continue   #Saltar este elemento\n"
"        ...\n"
"        for exprN in sequenceN:\n"
"            if not (conditionN):\n"
"                continue   # Saltar este elemento\n"
"\n"
"            # Generar el valor de\n"
"            # la expresión . "

#: ../../howto/functional.rst:416
msgid ""
"This means that when there are multiple ``for...in`` clauses but no ``if`` "
"clauses, the length of the resulting output will be equal to the product of "
"the lengths of all the sequences.  If you have two lists of length 3, the "
"output list is 9 elements long:"
msgstr ""
"Esto significa que cuando hay varias cláusulas ``for...in`` pero ninguna "
"``if``, la longitud de la salida resultante será igual al producto de las "
"longitudes de todas las secuencias.  Si tiene dos listas de longitud 3, la "
"lista de salida tendrá 9 elementos:"

#: ../../howto/functional.rst:428
msgid ""
"To avoid introducing an ambiguity into Python's grammar, if ``expression`` "
"is creating a tuple, it must be surrounded with parentheses.  The first list "
"comprehension below is a syntax error, while the second one is correct::"
msgstr ""
"Para evitar introducir una ambigüedad en la gramática de Python, si "
"``expression`` está creando una tupla, debe ir rodeada de paréntesis.  La "
"primera comprensión de lista a continuación es un error de sintaxis, "
"mientras que la segunda es correcta::"

#: ../../howto/functional.rst:432
msgid ""
"# Syntax error\n"
"[x, y for x in seq1 for y in seq2]\n"
"# Correct\n"
"[(x, y) for x in seq1 for y in seq2]"
msgstr ""
"# Error de sintaxis\n"
"[x, y for x in seq1 for y in seq2]\n"
"# Correcto\n"
"[(x, y) for x in seq1 for y in seq2]"

#: ../../howto/functional.rst:439
msgid "Generators"
msgstr "Generadores"

#: ../../howto/functional.rst:441
msgid ""
"Generators are a special class of functions that simplify the task of "
"writing iterators.  Regular functions compute a value and return it, but "
"generators return an iterator that returns a stream of values."
msgstr ""
"Los generadores son una clase especial de funciones que simplifican la tarea "
"de escribir iteradores.  Las funciones normales calculan un valor y lo "
"devuelven, pero los generadores devuelven un iterador que retorna un flujo "
"de valores."

#: ../../howto/functional.rst:445
msgid ""
"You're doubtless familiar with how regular function calls work in Python or "
"C. When you call a function, it gets a private namespace where its local "
"variables are created.  When the function reaches a ``return`` statement, "
"the local variables are destroyed and the value is returned to the caller.  "
"A later call to the same function creates a new private namespace and a "
"fresh set of local variables. But, what if the local variables weren't "
"thrown away on exiting a function?  What if you could later resume the "
"function where it left off?  This is what generators provide; they can be "
"thought of as resumable functions."
msgstr ""
"Sin duda estás familiarizado con cómo funcionan las llamadas a funciones "
"normales en Python o C. Cuando llamas a una función, ésta obtiene un espacio "
"de nombres privado donde se crean sus variables locales.  Cuando la función "
"llega a una sentencia ``return``, las variables locales se destruyen y el "
"valor se devuelve a quien la llamó.  Una llamada posterior a la misma "
"función crea un nuevo espacio de nombres privado y un nuevo conjunto de "
"variables locales. Pero, ¿qué pasaría si las variables locales no se "
"eliminaran al salir de una función?  ¿Qué pasaría si pudieras reanudar la "
"función donde la dejaste?  Esto es lo que proporcionan los generadores; se "
"puede pensar en ellos como funciones reanudables."

#: ../../howto/functional.rst:454
msgid "Here's the simplest example of a generator function:"
msgstr "He aquí el ejemplo más sencillo de una función generadora:"

#: ../../howto/functional.rst:460
msgid ""
"Any function containing a :keyword:`yield` keyword is a generator function; "
"this is detected by Python's :term:`bytecode` compiler which compiles the "
"function specially as a result."
msgstr ""
"Cualquier función que contenga una palabra clave :keyword:`yield` es una "
"función generadora; esto es detectado por el compilador :term:`bytecode` de "
"Python que compila la función especialmente como resultado."

#: ../../howto/functional.rst:464
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the ``yield`` expression, the generator outputs the value of "
"``i``, similar to a ``return`` statement.  The big difference between "
"``yield`` and a ``return`` statement is that on reaching a ``yield`` the "
"generator's state of execution is suspended and local variables are "
"preserved.  On the next call to the generator's :meth:`~generator.__next__` "
"method, the function will resume executing."
msgstr ""
"Cuando se llama a una función generadora, ésta no devuelve un único valor, "
"sino un objeto generador compatible con el protocolo iterador.  Al ejecutar "
"la expresión ``yield``, el generador devuelve el valor de ``i``, de forma "
"similar a una sentencia ``return``.  La gran diferencia entre ``yield`` y "
"una sentencia ``return`` es que al llegar a ``yield`` se suspende el estado "
"de ejecución del generador y se conservan las variables locales.  En la "
"siguiente llamada al método :meth:`~generator.__next__` del generador, la "
"función reanudará su ejecución."

#: ../../howto/functional.rst:473
msgid "Here's a sample usage of the ``generate_ints()`` generator:"
msgstr "He aquí un ejemplo de utilización del generador ``generate_ints()``:"

#: ../../howto/functional.rst:490
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a, b, c = "
"generate_ints(3)``."
msgstr ""
"También podría escribir ``for i in generate_ints(5)``, o ``a, b, c = "
"generate_ints(3)``."

#: ../../howto/functional.rst:493
msgid ""
"Inside a generator function, ``return value`` causes "
"``StopIteration(value)`` to be raised from the :meth:`~generator.__next__` "
"method.  Once this happens, or the bottom of the function is reached, the "
"procession of values ends and the generator cannot yield any further values."
msgstr ""
"Dentro de una función generadora, ``return value`` hace que "
"``StopIteration(value)`` se eleve desde el método :meth:`~generator."
"__next__`.  Una vez que esto sucede, o se alcanza el fondo de la función, la "
"procesión de valores termina y el generador no puede producir más valores."

#: ../../howto/functional.rst:498
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`~iterator.__next__` "
"method increment ``self.count`` and return it. However, for a moderately "
"complicated generator, writing a corresponding class can be much messier."
msgstr ""
"Puedes conseguir el efecto de los generadores manualmente escribiendo tu "
"propia clase y almacenando todas las variables locales del generador como "
"variables de instancia.  Por ejemplo, devolver una lista de enteros podría "
"hacerse estableciendo ``self.count`` a 0, y haciendo que el método :meth:"
"`~iterator.__next__` incremente ``self.count`` y lo devuelva. Sin embargo, "
"para un generador moderadamente complicado, escribir la clase "
"correspondiente puede ser mucho más complicado."

#: ../../howto/functional.rst:506
msgid ""
"The test suite included with Python's library, :source:`Lib/test/"
"test_generators.py`, contains a number of more interesting examples.  Here's "
"one generator that implements an in-order traversal of a tree using "
"generators recursively. ::"
msgstr ""
"El conjunto de pruebas incluido con la biblioteca de Python, :source:`Lib/"
"test/test_generators.py`, contiene varios ejemplos más interesantes.  Aquí "
"hay un generador que implementa un recorrido en-orden de un árbol usando "
"generadores recursivamente. ::"

#: ../../howto/functional.rst:511
msgid ""
"# A recursive generator that generates Tree leaves in in-order.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"\n"
"        yield t.label\n"
"\n"
"        for x in inorder(t.right):\n"
"            yield x"
msgstr ""
"# Un generador recursivo que genera hojas de Árbol en orden.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"\n"
"        yield t.label\n"
"\n"
"        for x in inorder(t.right):\n"
"            yield x"

#: ../../howto/functional.rst:522
msgid ""
"Two other examples in ``test_generators.py`` produce solutions for the N-"
"Queens problem (placing N queens on an NxN chess board so that no queen "
"threatens another) and the Knight's Tour (finding a route that takes a "
"knight to every square of an NxN chessboard without visiting any square "
"twice)."
msgstr ""
"Otros dos ejemplos en ``test_generators.py`` producen soluciones para el "
"problema de las N reinas (colocar N reinas en un tablero de ajedrez NxN de "
"forma que ninguna reina amenace a otra) y el recorrido del caballo "
"(encontrar una ruta que lleve a un caballo a cada casilla de un tablero de "
"ajedrez NxN sin visitar ninguna casilla dos veces)."

#: ../../howto/functional.rst:530
msgid "Passing values into a generator"
msgstr "Pasar valores a un generador"

#: ../../howto/functional.rst:532
msgid ""
"In Python 2.4 and earlier, generators only produced output.  Once a "
"generator's code was invoked to create an iterator, there was no way to pass "
"any new information into the function when its execution is resumed.  You "
"could hack together this ability by making the generator look at a global "
"variable or by passing in some mutable object that callers then modify, but "
"these approaches are messy."
msgstr ""
"En Python 2.4 y anteriores, los generadores sólo producían salida.  Una vez "
"que el código de un generador era invocado para crear un iterador, no había "
"forma de pasar nueva información a la función cuando se reanudaba su "
"ejecución.  Se podía piratear esta capacidad haciendo que el generador "
"mirara una variable global o pasando algún objeto mutable que los "
"invocadores modificaran, pero estos enfoques son complicados."

#: ../../howto/functional.rst:539
msgid ""
"In Python 2.5 there's a simple way to pass values into a generator. :keyword:"
"`yield` became an expression, returning a value that can be assigned to a "
"variable or otherwise operated on::"
msgstr ""
"En Python 2.5 hay una forma sencilla de pasar valores a un generador. :"
"keyword:`yield` se convirtió en una expresión, devolviendo un valor que se "
"puede asignar a una variable u operar de otra forma::"

#: ../../howto/functional.rst:543
msgid "val = (yield i)"
msgstr "val = (yield i)"

#: ../../howto/functional.rst:545
msgid ""
"I recommend that you **always** put parentheses around a ``yield`` "
"expression when you're doing something with the returned value, as in the "
"above example. The parentheses aren't always necessary, but it's easier to "
"always add them instead of having to remember when they're needed."
msgstr ""
"Te recomiendo que **siempre** pongas paréntesis alrededor de una expresión "
"``yield`` cuando estés haciendo algo con el valor devuelto, como en el "
"ejemplo anterior. Los paréntesis no siempre son necesarios, pero es más "
"fácil añadirlos siempre en lugar de tener que recordar cuándo son necesarios."

#: ../../howto/functional.rst:550
msgid ""
"(:pep:`342` explains the exact rules, which are that a ``yield``-expression "
"must always be parenthesized except when it occurs at the top-level "
"expression on the right-hand side of an assignment.  This means you can "
"write ``val = yield i`` but have to use parentheses when there's an "
"operation, as in ``val = (yield i) + 12``.)"
msgstr ""
"(:pep:`342` explica las reglas exactas, que son que un ``yield``-expression "
"must always be parenthesized except when it occurs at the top-level "
"expression on the right-hand side of an assignment.  This means you can "
"write ``val = yield i`` pero tiene que usar paréntesis cuando hay una "
"operación, como en ``val = (yield i) + 12``.)"

#: ../../howto/functional.rst:556
msgid ""
"Values are sent into a generator by calling its :meth:`send(value) "
"<generator.send>` method.  This method resumes the generator's code and the "
"``yield`` expression returns the specified value.  If the regular :meth:"
"`~generator.__next__` method is called, the ``yield`` returns ``None``."
msgstr ""
"Los valores se envían a un generador llamando a su método :meth:`send(value) "
"<generator.send>`.  Este método reanuda el código del generador y la "
"expresión ``yield`` devuelve el valor especificado.  Si se llama al método :"
"meth:`~generator.__next__` regular, el ``yield`` devuelve ``None``."

#: ../../howto/functional.rst:561
msgid ""
"Here's a simple counter that increments by 1 and allows changing the value "
"of the internal counter."
msgstr ""
"Aquí hay un contador simple que se incrementa en 1 y permite cambiar el "
"valor del contador interno."

#: ../../howto/functional.rst:564
msgid ""
"def counter(maximum):\n"
"    i = 0\n"
"    while i < maximum:\n"
"        val = (yield i)\n"
"        # If value provided, change counter\n"
"        if val is not None:\n"
"            i = val\n"
"        else:\n"
"            i += 1"
msgstr ""
"def counter(maximum):\n"
"    i = 0\n"
"    while i < maximum:\n"
"        val = (yield i)\n"
"        # Si se proporciona el valor, cambia el contador\n"
"        if val is not None:\n"
"            i = val\n"
"        else:\n"
"            i += 1"

#: ../../howto/functional.rst:576
msgid "And here's an example of changing the counter:"
msgstr "Y aquí tienes un ejemplo de cambio de contador:"

#: ../../howto/functional.rst:593
msgid ""
"Because ``yield`` will often be returning ``None``, you should always check "
"for this case.  Don't just use its value in expressions unless you're sure "
"that the :meth:`~generator.send` method will be the only method used to "
"resume your generator function."
msgstr ""
"Debido a que ``yield`` a menudo devolverá ``None``, siempre debes comprobar "
"este caso.  No utilices su valor sin más en expresiones a menos que estés "
"seguro de que el método :meth:`~generator.send` será el único utilizado para "
"reanudar tu función generadora."

#: ../../howto/functional.rst:598
msgid ""
"In addition to :meth:`~generator.send`, there are two other methods on "
"generators:"
msgstr ""
"Además de :meth:`~generator.send`, existen otros dos métodos sobre "
"generadores:"

#: ../../howto/functional.rst:601
msgid ""
":meth:`throw(value) <generator.throw>` is used to raise an exception inside "
"the generator; the exception is raised by the ``yield`` expression where the "
"generator's execution is paused."
msgstr ""
":meth:`throw(value) <generator.throw>` se utiliza para lanzar una excepción "
"dentro del generador; la excepción es lanzada por la expresión ``yield`` "
"donde se pausa la ejecución del generador."

#: ../../howto/functional.rst:605
msgid ""
":meth:`~generator.close` raises a :exc:`GeneratorExit` exception inside the "
"generator to terminate the iteration.  On receiving this exception, the "
"generator's code must either raise :exc:`GeneratorExit` or :exc:"
"`StopIteration`; catching the exception and doing anything else is illegal "
"and will trigger a :exc:`RuntimeError`.  :meth:`~generator.close` will also "
"be called by Python's garbage collector when the generator is garbage-"
"collected."
msgstr ""
":meth:`~generator.close` lanza una excepción :exc:`GeneratorExit` dentro del "
"generador para terminar la iteración.  Al recibir esta excepción, el código "
"del generador debe lanzar :exc:`GeneratorExit` o :exc:`StopIteration`; "
"capturar la excepción y hacer cualquier otra cosa es ilegal y provocará una :"
"exc:`RuntimeError`. :meth:`~generator.close` también será llamada por el "
"recolector de basura de Python cuando el generador sea recolectado."

#: ../../howto/functional.rst:613
msgid ""
"If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I "
"suggest using a ``try: ... finally:`` suite instead of catching :exc:"
"`GeneratorExit`."
msgstr ""
"Si necesita ejecutar código de limpieza cuando se produce un :exc:"
"`GeneratorExit`, le sugiero que utilice un conjunto ``try: ... finally:`` en "
"lugar de capturar :exc:`GeneratorExit`."

#: ../../howto/functional.rst:616
msgid ""
"The cumulative effect of these changes is to turn generators from one-way "
"producers of information into both producers and consumers."
msgstr ""
"El efecto acumulativo de estos cambios es que los generadores pasan de ser "
"productores unidireccionales de información a ser a la vez productores y "
"consumidores."

#: ../../howto/functional.rst:619
msgid ""
"Generators also become **coroutines**, a more generalized form of "
"subroutines. Subroutines are entered at one point and exited at another "
"point (the top of the function, and a ``return`` statement), but coroutines "
"can be entered, exited, and resumed at many different points (the ``yield`` "
"statements)."
msgstr ""
"Los generadores también se convierten en **corrutinas**, una forma más "
"generalizada de subrutinas. Las subrutinas se introducen en un punto y se "
"salen en otro (la parte superior de la función y una sentencia ``return`` ), "
"pero las corrutinas pueden introducirse, salirse y reanudarse en muchos "
"puntos diferentes (las sentencias ``yield`` )."

#: ../../howto/functional.rst:626
msgid "Built-in functions"
msgstr "Funciones integradas"

#: ../../howto/functional.rst:628
msgid ""
"Let's look in more detail at built-in functions often used with iterators."
msgstr ""
"Veamos con más detalle las funciones incorporadas que se utilizan a menudo "
"con los iteradores."

#: ../../howto/functional.rst:630
msgid ""
"Two of Python's built-in functions, :func:`map` and :func:`filter` duplicate "
"the features of generator expressions:"
msgstr ""
"Dos de las funciones incorporadas de Python, :func:`map` y :func:`filter` "
"duplican las características de las expresiones generadoras:"

#: ../../howto/functional.rst:633
msgid ""
":func:`map(f, iterA, iterB, ...) <map>` returns an iterator over the sequence"
msgstr ""
":func:`map(f, iterA, iterB, ...) <map>` devuelve un iterador sobre la "
"secuencia"

#: ../../howto/functional.rst:634
msgid ""
"``f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ...``."
msgstr ""
"``f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ...``."

#: ../../howto/functional.rst:644
msgid "You can of course achieve the same effect with a list comprehension."
msgstr ""
"Por supuesto, puede conseguir el mismo efecto con la comprensión de una "
"lista."

#: ../../howto/functional.rst:646
msgid ""
":func:`filter(predicate, iter) <filter>` returns an iterator over all the "
"sequence elements that meet a certain condition, and is similarly duplicated "
"by list comprehensions.  A **predicate** is a function that returns the "
"truth value of some condition; for use with :func:`filter`, the predicate "
"must take a single value."
msgstr ""
":func:`filter(predicate, iter) <filter>` devuelve un iterador sobre todos "
"los elementos de la secuencia que cumplen una determinada condición, y es "
"duplicado de forma similar por las comprensiones de listas.  Un "
"**predicado** es una función que devuelve el valor de verdad de alguna "
"condición; para su uso con :func:`filter`, el predicado debe tomar un único "
"valor."

#: ../../howto/functional.rst:659
msgid "This can also be written as a list comprehension:"
msgstr "También se puede escribir como comprensión de una lista:"

#: ../../howto/functional.rst:665
msgid ""
":func:`enumerate(iter, start=0) <enumerate>` counts off the elements in the "
"iterable returning 2-tuples containing the count (from *start*) and each "
"element. ::"
msgstr ""
":func:`enumerate(iter, start=0) <enumerate>` cuenta los elementos del "
"iterable devolviendo 2-tuplas que contienen la cuenta (desde *start*) y cada "
"elemento. ::"

#: ../../howto/functional.rst:669
msgid ""
">>> for item in enumerate(['subject', 'verb', 'object']):\n"
"...     print(item)\n"
"(0, 'subject')\n"
"(1, 'verb')\n"
"(2, 'object')"
msgstr ""
">>> for item in enumerate(['subject', 'verb', 'object']):\n"
"...     print(item)\n"
"(0, 'subject')\n"
"(1, 'verb')\n"
"(2, 'object')"

#: ../../howto/functional.rst:675
msgid ""
":func:`enumerate` is often used when looping through a list and recording "
"the indexes at which certain conditions are met::"
msgstr ""
":func:`enumerate` se utiliza a menudo para recorrer una lista y registrar "
"los índices en los que se cumplen determinadas condiciones::"

#: ../../howto/functional.rst:678
msgid ""
"f = open('data.txt', 'r')\n"
"for i, line in enumerate(f):\n"
"    if line.strip() == '':\n"
"        print('Blank line at line #%i' % i)"
msgstr ""
"f = open('data.txt', 'r')\n"
"for i, line in enumerate(f):\n"
"    if line.strip() == '':\n"
"        print('Blank line at line #%i' % i)"

#: ../../howto/functional.rst:683
msgid ""
":func:`sorted(iterable, key=None, reverse=False) <sorted>` collects all the "
"elements of the iterable into a list, sorts the list, and returns the sorted "
"result.  The *key* and *reverse* arguments are passed through to the "
"constructed list's :meth:`~list.sort` method. ::"
msgstr ""
":func:`sorted(iterable, key=None, reverse=False) <sorted>` recoge todos los "
"elementos del iterable en una lista, ordena la lista y devuelve el resultado "
"ordenado.  Los argumentos *key* y *reverse* se pasan al método :meth:`~list."
"sort` de la lista construida. ::"

#: ../../howto/functional.rst:688
msgid ""
">>> import random\n"
">>> # Generate 8 random numbers between [0, 10000)\n"
">>> rand_list = random.sample(range(10000), 8)\n"
">>> rand_list\n"
"[769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]\n"
">>> sorted(rand_list)\n"
"[769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]\n"
">>> sorted(rand_list, reverse=True)\n"
"[9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]"
msgstr ""
">>> import random\n"
">>> # Genera 8 números aleatorios entre [0, 10000)\n"
">>> rand_list = random.sample(range(10000), 8)\n"
">>> rand_list\n"
"[769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]\n"
">>> sorted(rand_list)\n"
"[769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]\n"
">>> sorted(rand_list, reverse=True)\n"
"[9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]"

#: ../../howto/functional.rst:698
msgid ""
"(For a more detailed discussion of sorting, see the :ref:`sortinghowto`.)"
msgstr ""
"(Para un análisis más detallado de la clasificación, ver :ref:"
"`sortinghowto`.)"

#: ../../howto/functional.rst:701
msgid ""
"The :func:`any(iter) <any>` and :func:`all(iter) <all>` built-ins look at "
"the truth values of an iterable's contents.  :func:`any` returns ``True`` if "
"any element in the iterable is a true value, and :func:`all` returns "
"``True`` if all of the elements are true values:"
msgstr ""
"Las funciones :func:`any(iter) <any>` y :func:`all(iter) <all>` buscan los "
"valores verdaderos del contenido de un iterable. :func:`any` devuelve "
"``True`` si cualquier elemento del iterable es un valor verdadero, y :func:"
"`all` devuelve ``True`` si todos los elementos son valores verdaderos:"

#: ../../howto/functional.rst:720
msgid ""
":func:`zip(iterA, iterB, ...) <zip>` takes one element from each iterable "
"and returns them in a tuple::"
msgstr ""
":func:`zip(iterA, iterB, ...) <zip>` toma un elemento de cada iterable y los "
"devuelve en una tupla::"

#: ../../howto/functional.rst:723
msgid ""
"zip(['a', 'b', 'c'], (1, 2, 3)) =>\n"
"  ('a', 1), ('b', 2), ('c', 3)"
msgstr ""
"zip(['a', 'b', 'c'], (1, 2, 3)) =>\n"
"  ('a', 1), ('b', 2), ('c', 3)"

#: ../../howto/functional.rst:726
msgid ""
"It doesn't construct an in-memory list and exhaust all the input iterators "
"before returning; instead tuples are constructed and returned only if "
"they're requested.  (The technical term for this behaviour is `lazy "
"evaluation <https://en.wikipedia.org/wiki/Lazy_evaluation>`__.)"
msgstr ""
"No construye una lista en memoria y agota todos los iteradores de entrada "
"antes de devolver; en su lugar, las tuplas se construyen y devuelven sólo si "
"se solicitan.  (El término técnico para este comportamiento es `lazy "
"evaluation <https://en.wikipedia.org/wiki/Lazy_evaluation>`__.)"

#: ../../howto/functional.rst:731
msgid ""
"This iterator is intended to be used with iterables that are all of the same "
"length.  If the iterables are of different lengths, the resulting stream "
"will be the same length as the shortest iterable. ::"
msgstr ""
"Este iterador está pensado para ser utilizado con iterables que tengan todos "
"la misma longitud.  Si los iterables tienen longitudes diferentes, el flujo "
"resultante tendrá la misma longitud que el iterable más corto. ::"

#: ../../howto/functional.rst:735
msgid ""
"zip(['a', 'b'], (1, 2, 3)) =>\n"
"  ('a', 1), ('b', 2)"
msgstr ""
"zip(['a', 'b'], (1, 2, 3)) =>\n"
"  ('a', 1), ('b', 2)"

#: ../../howto/functional.rst:738
msgid ""
"You should avoid doing this, though, because an element may be taken from "
"the longer iterators and discarded.  This means you can't go on to use the "
"iterators further because you risk skipping a discarded element."
msgstr ""
"Sin embargo, debes evitar hacer esto, porque un elemento puede ser tomado de "
"los iteradores más largos y descartado.  Esto significa que no puedes seguir "
"utilizando los iteradores porque corres el riesgo de saltarte un elemento "
"descartado."

#: ../../howto/functional.rst:744
msgid "The itertools module"
msgstr "El módulo itertools"

#: ../../howto/functional.rst:746
msgid ""
"The :mod:`itertools` module contains a number of commonly used iterators as "
"well as functions for combining several iterators.  This section will "
"introduce the module's contents by showing small examples."
msgstr ""
"El módulo :mod:`itertools` contiene una serie de iteradores de uso común, "
"así como funciones para combinar varios iteradores.  Esta sección "
"introducirá el contenido del módulo mostrando pequeños ejemplos."

#: ../../howto/functional.rst:750
msgid "The module's functions fall into a few broad classes:"
msgstr "Las funciones del módulo se dividen en varias clases generales:"

#: ../../howto/functional.rst:752
msgid "Functions that create a new iterator based on an existing iterator."
msgstr "Funciones que crean un nuevo iterador basado en un iterador existente."

#: ../../howto/functional.rst:753
msgid "Functions for treating an iterator's elements as function arguments."
msgstr ""
"Funciones para tratar los elementos de un iterador como argumentos de "
"función."

#: ../../howto/functional.rst:754
msgid "Functions for selecting portions of an iterator's output."
msgstr "Funciones para seleccionar partes de la salida de un iterador."

#: ../../howto/functional.rst:755
msgid "A function for grouping an iterator's output."
msgstr "Función para agrupar la salida de un iterador."

#: ../../howto/functional.rst:758
msgid "Creating new iterators"
msgstr "Creación de nuevos iteradores"

#: ../../howto/functional.rst:760
msgid ""
":func:`itertools.count(start, step) <itertools.count>` returns an infinite "
"stream of evenly spaced values.  You can optionally supply the starting "
"number, which defaults to 0, and the interval between numbers, which "
"defaults to 1::"
msgstr ""
":func:`itertools.count(start, step) <itertools.count>` devuelve un flujo "
"infinito de valores espaciados uniformemente.  Puede proporcionar "
"opcionalmente el número inicial, que por defecto es 0, y el intervalo entre "
"números, que por defecto es 1::"

#: ../../howto/functional.rst:764
msgid ""
"itertools.count() =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\n"
"itertools.count(10) =>\n"
"  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\n"
"itertools.count(10, 5) =>\n"
"  10, 15, 20, 25, 30, 35, 40, 45, 50, 55, ..."
msgstr ""
"itertools.count() =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\n"
"itertools.count(10) =>\n"
"  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\n"
"itertools.count(10, 5) =>\n"
"  10, 15, 20, 25, 30, 35, 40, 45, 50, 55, ..."

#: ../../howto/functional.rst:771
msgid ""
":func:`itertools.cycle(iter) <itertools.cycle>` saves a copy of the contents "
"of a provided iterable and returns a new iterator that returns its elements "
"from first to last.  The new iterator will repeat these elements "
"infinitely. ::"
msgstr ""
":func:`itertools.cycle(iter) <itertools.cycle>` guarda una copia del "
"contenido de un iterable proporcionado y devuelve un nuevo iterador que "
"devuelve sus elementos del primero al último.  El nuevo iterador repetirá "
"estos elementos infinitamente. ::"

#: ../../howto/functional.rst:775
msgid ""
"itertools.cycle([1, 2, 3, 4, 5]) =>\n"
"  1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ..."
msgstr ""
"itertools.cycle([1, 2, 3, 4, 5]) =>\n"
"  1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ..."

#: ../../howto/functional.rst:778
msgid ""
":func:`itertools.repeat(elem, [n]) <itertools.repeat>` returns the provided "
"element *n* times, or returns the element endlessly if *n* is not "
"provided. ::"
msgstr ""
":func:`itertools.repeat(elem, [n]) <itertools.repeat>` devuelve el elemento "
"proporcionado *n* veces, o devuelve el elemento sin fin si *n* no se "
"proporciona. ::"

#: ../../howto/functional.rst:781
msgid ""
"itertools.repeat('abc') =>\n"
"  abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...\n"
"itertools.repeat('abc', 5) =>\n"
"  abc, abc, abc, abc, abc"
msgstr ""
"itertools.repeat('abc') =>\n"
"  abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...\n"
"itertools.repeat('abc', 5) =>\n"
"  abc, abc, abc, abc, abc"

#: ../../howto/functional.rst:786
msgid ""
":func:`itertools.chain(iterA, iterB, ...) <itertools.chain>` takes an "
"arbitrary number of iterables as input, and returns all the elements of the "
"first iterator, then all the elements of the second, and so on, until all of "
"the iterables have been exhausted. ::"
msgstr ""
":func:`itertools.chain(iterA, iterB, ...) <itertools.chain>` toma un número "
"arbitrario de iterables como entrada, y devuelve todos los elementos del "
"primer iterador, luego todos los elementos del segundo, y así sucesivamente, "
"hasta agotar todos los iterables. ::"

#: ../../howto/functional.rst:791
msgid ""
"itertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>\n"
"  a, b, c, 1, 2, 3"
msgstr ""
"itertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>\n"
"  a, b, c, 1, 2, 3"

#: ../../howto/functional.rst:794
msgid ""
":func:`itertools.islice(iter, [start], stop, [step]) <itertools.islice>` "
"returns a stream that's a slice of the iterator.  With a single *stop* "
"argument, it will return the first *stop* elements.  If you supply a "
"starting index, you'll get *stop-start* elements, and if you supply a value "
"for *step*, elements will be skipped accordingly.  Unlike Python's string "
"and list slicing, you can't use negative values for *start*, *stop*, or "
"*step*. ::"
msgstr ""
":func:`itertools.islice(iter, [start], stop, [step]) <itertools.islice>` "
"devuelve un flujo que es un corte del iterador.  Con un único argumento "
"*stop*, devolverá los primeros elementos *stop*.  Si proporcionas un índice "
"inicial, obtendrás los elementos *stop-start*, y si proporcionas un valor "
"para *step*, los elementos se saltarán en consecuencia.  A diferencia del "
"corte de cadenas y listas de Python, no se pueden usar valores negativos "
"para *start*, *stop* o *step*. ::"

#: ../../howto/functional.rst:801
msgid ""
"itertools.islice(range(10), 8) =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7\n"
"itertools.islice(range(10), 2, 8) =>\n"
"  2, 3, 4, 5, 6, 7\n"
"itertools.islice(range(10), 2, 8, 2) =>\n"
"  2, 4, 6"
msgstr ""
"itertools.islice(range(10), 8) =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7\n"
"itertools.islice(range(10), 2, 8) =>\n"
"  2, 3, 4, 5, 6, 7\n"
"itertools.islice(range(10), 2, 8, 2) =>\n"
"  2, 4, 6"

#: ../../howto/functional.rst:808
msgid ""
":func:`itertools.tee(iter, [n]) <itertools.tee>` replicates an iterator; it "
"returns *n* independent iterators that will all return the contents of the "
"source iterator. If you don't supply a value for *n*, the default is 2.  "
"Replicating iterators requires saving some of the contents of the source "
"iterator, so this can consume significant memory if the iterator is large "
"and one of the new iterators is consumed more than the others. ::"
msgstr ""
":func:`itertools.tee(iter, [n]) <itertools.tee>` replica un iterador; "
"devuelve *n* iteradores independientes que devolverán todos el contenido del "
"iterador fuente. Si no se proporciona un valor para *n*, el valor por "
"defecto es 2. Replicar iteradores requiere guardar algunos de los contenidos "
"del iterador fuente, por lo que puede consumir bastante memoria si el "
"iterador es grande y uno de los nuevos iteradores se consume más que los "
"otros. ::"

#: ../../howto/functional.rst:816
msgid ""
"itertools.tee( itertools.count() ) =>\n"
"   iterA, iterB\n"
"\n"
"where iterA ->\n"
"   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\n"
"\n"
"and   iterB ->\n"
"   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..."
msgstr ""
"itertools.tee( itertools.count() ) =>\n"
"   iterA, iterB\n"
"\n"
"donde iterA ->\n"
"   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\n"
"\n"
"e iterB ->\n"
"   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ..."

#: ../../howto/functional.rst:827
msgid "Calling functions on elements"
msgstr "Llamada a funciones sobre elementos"

#: ../../howto/functional.rst:829
msgid ""
"The :mod:`operator` module contains a set of functions corresponding to "
"Python's operators.  Some examples are :func:`operator.add(a, b) <operator."
"add>` (adds two values), :func:`operator.ne(a, b)  <operator.ne>` (same as "
"``a != b``), and :func:`operator.attrgetter('id') <operator.attrgetter>` "
"(returns a callable that fetches the ``.id`` attribute)."
msgstr ""
"El módulo :mod:`operator` contiene un conjunto de funciones correspondientes "
"a los operadores de Python.  Algunos ejemplos son :func:`operator.add(a, b) "
"<operator.add>` (añade dos valores), :func:`operator.ne(a, b) <operator.ne>` "
"(igual que ``a != b``), y :func:`operator.attrgetter('id') <operator."
"attrgetter>` (devuelve una llamada que obtiene el atributo ``.id`` )."

#: ../../howto/functional.rst:835
msgid ""
":func:`itertools.starmap(func, iter) <itertools.starmap>` assumes that the "
"iterable will return a stream of tuples, and calls *func* using these tuples "
"as the arguments::"
msgstr ""
":func:`itertools.starmap(func, iter) <itertools.starmap>` asume que el "
"iterable devolverá un flujo de tuplas, y llama a *func* usando estas tuplas "
"como argumentos::"

#: ../../howto/functional.rst:839
msgid ""
"itertools.starmap(os.path.join,\n"
"                  [('/bin', 'python'), ('/usr', 'bin', 'java'),\n"
"                   ('/usr', 'bin', 'perl'), ('/usr', 'bin', 'ruby')])\n"
"=>\n"
"  /bin/python, /usr/bin/java, /usr/bin/perl, /usr/bin/ruby"
msgstr ""
"itertools.starmap(os.path.join,\n"
"                  [('/bin', 'python'), ('/usr', 'bin', 'java'),\n"
"                   ('/usr', 'bin', 'perl'), ('/usr', 'bin', 'ruby')])\n"
"=>\n"
"  /bin/python, /usr/bin/java, /usr/bin/perl, /usr/bin/ruby"

#: ../../howto/functional.rst:847
msgid "Selecting elements"
msgstr "Seleccionar elementos"

#: ../../howto/functional.rst:849
msgid ""
"Another group of functions chooses a subset of an iterator's elements based "
"on a predicate."
msgstr ""
"Otro grupo de funciones elige un subconjunto de elementos de un iterador "
"basándose en un predicado."

#: ../../howto/functional.rst:852
msgid ""
":func:`itertools.filterfalse(predicate, iter) <itertools.filterfalse>` is "
"the opposite of :func:`filter`, returning all elements for which the "
"predicate returns false::"
msgstr ""
":func:`itertools.filterfalse(predicate, iter) <itertools.filterfalse>` es lo "
"contrario de :func:`filter`, devolviendo todos los elementos para los que el "
"predicado devuelve falso::"

#: ../../howto/functional.rst:856
msgid ""
"itertools.filterfalse(is_even, itertools.count()) =>\n"
"  1, 3, 5, 7, 9, 11, 13, 15, ..."
msgstr ""
"itertools.filterfalse(is_even, itertools.count()) =>\n"
"  1, 3, 5, 7, 9, 11, 13, 15, ..."

#: ../../howto/functional.rst:859
msgid ""
":func:`itertools.takewhile(predicate, iter) <itertools.takewhile>` returns "
"elements for as long as the predicate returns true.  Once the predicate "
"returns false, the iterator will signal the end of its results. ::"
msgstr ""
":func:`itertools.takewhile(predicado, iter) <itertools.takewhile>` devuelve "
"elementos mientras el predicado sea verdadero.  Una vez que el predicado "
"devuelva falso, el iterador señalará el final de sus resultados. ::"

#: ../../howto/functional.rst:863
msgid ""
"def less_than_10(x):\n"
"    return x < 10\n"
"\n"
"itertools.takewhile(less_than_10, itertools.count()) =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n"
"\n"
"itertools.takewhile(is_even, itertools.count()) =>\n"
"  0"
msgstr ""
"def menor_que_10(x):\n"
"    return x < 10\n"
"\n"
"itertools.takewhile(less_than_10, itertools.count()) =>\n"
"  0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n"
"\n"
"itertools.takewhile(is_even, itertools.count()) =>\n"
"  0"

#: ../../howto/functional.rst:872
msgid ""
":func:`itertools.dropwhile(predicate, iter) <itertools.dropwhile>` discards "
"elements while the predicate returns true, and then returns the rest of the "
"iterable's results. ::"
msgstr ""
":func:`itertools.dropwhile(predicate, iter) <itertools.dropwhile>` descarta "
"elementos mientras el predicado devuelva verdadero, y luego devuelve el "
"resto de resultados del iterable. ::"

#: ../../howto/functional.rst:876
msgid ""
"itertools.dropwhile(less_than_10, itertools.count()) =>\n"
"  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\n"
"\n"
"itertools.dropwhile(is_even, itertools.count()) =>\n"
"  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ..."
msgstr ""
"itertools.dropwhile(less_than_10, itertools.count()) =>\n"
"  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\n"
"\n"
"itertools.dropwhile(is_even, itertools.count()) =>\n"
"  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ..."

#: ../../howto/functional.rst:882
msgid ""
":func:`itertools.compress(data, selectors) <itertools.compress>` takes two "
"iterators and returns only those elements of *data* for which the "
"corresponding element of *selectors* is true, stopping whenever either one "
"is exhausted::"
msgstr ""
":func:`itertools.compress(data, selectors) <itertools.compress>` toma dos "
"iteradores y devuelve sólo aquellos elementos de *data* para los que el "
"elemento correspondiente de *selectors* es verdadero, deteniéndose cuando "
"cualquiera de ellos se agota::"

#: ../../howto/functional.rst:886
msgid ""
"itertools.compress([1, 2, 3, 4, 5], [True, True, False, False, True]) =>\n"
"   1, 2, 5"
msgstr ""
"itertools.compress([1, 2, 3, 4, 5], [True, True, False, False, True]) =>\n"
"   1, 2, 5"

#: ../../howto/functional.rst:891
msgid "Combinatoric functions"
msgstr "Funciones combinatorias"

#: ../../howto/functional.rst:893
msgid ""
"The :func:`itertools.combinations(iterable, r) <itertools.combinations>` "
"returns an iterator giving all possible *r*-tuple combinations of the "
"elements contained in *iterable*.  ::"
msgstr ""
"La función :func:`itertools.combinations(iterable, r) <itertools."
"combinations>` devuelve un iterador con todas las combinaciones posibles de "
"*r*-tuplas de los elementos contenidos en *iterable*. ::"

#: ../../howto/functional.rst:897
msgid ""
"itertools.combinations([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 3), (2, 4), (2, 5),\n"
"  (3, 4), (3, 5),\n"
"  (4, 5)\n"
"\n"
"itertools.combinations([1, 2, 3, 4, 5], 3) =>\n"
"  (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5),\n"
"  (2, 3, 4), (2, 3, 5), (2, 4, 5),\n"
"  (3, 4, 5)"
msgstr ""
"itertools.combinations([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 3), (2, 4), (2, 5),\n"
"  (3, 4), (3, 5),\n"
"  (4, 5)\n"
"\n"
"itertools.combinations([1, 2, 3, 4, 5], 3) =>\n"
"  (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5),\n"
"  (2, 3, 4), (2, 3, 5), (2, 4, 5),\n"
"  (3, 4, 5)"

#: ../../howto/functional.rst:908
msgid ""
"The elements within each tuple remain in the same order as *iterable* "
"returned them.  For example, the number 1 is always before 2, 3, 4, or 5 in "
"the examples above.  A similar function, :func:`itertools."
"permutations(iterable, r=None) <itertools.permutations>`, removes this "
"constraint on the order, returning all possible arrangements of length *r*::"
msgstr ""
"Los elementos dentro de cada tupla permanecen en el mismo orden en que "
"*iterable* los devolvió.  Por ejemplo, el número 1 siempre está antes que 2, "
"3, 4 o 5 en los ejemplos anteriores.  Una función similar, :func:`itertools."
"permutations(iterable, r=None) <itertools.permutations>`, elimina esta "
"restricción en el orden, devolviendo todos los posibles arreglos de longitud "
"*r*::"

#: ../../howto/functional.rst:915
msgid ""
"itertools.permutations([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 1), (2, 3), (2, 4), (2, 5),\n"
"  (3, 1), (3, 2), (3, 4), (3, 5),\n"
"  (4, 1), (4, 2), (4, 3), (4, 5),\n"
"  (5, 1), (5, 2), (5, 3), (5, 4)\n"
"\n"
"itertools.permutations([1, 2, 3, 4, 5]) =>\n"
"  (1, 2, 3, 4, 5), (1, 2, 3, 5, 4), (1, 2, 4, 3, 5),\n"
"  ...\n"
"  (5, 4, 3, 2, 1)"
msgstr ""
"itertools.permutations([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 1), (2, 3), (2, 4), (2, 5),\n"
"  (3, 1), (3, 2), (3, 4), (3, 5),\n"
"  (4, 1), (4, 2), (4, 3), (4, 5),\n"
"  (5, 1), (5, 2), (5, 3), (5, 4)\n"
"\n"
"itertools.permutations([1, 2, 3, 4, 5]) =>\n"
"  (1, 2, 3, 4, 5), (1, 2, 3, 5, 4), (1, 2, 4, 3, 5),\n"
"  ...\n"
"  (5, 4, 3, 2, 1)"

#: ../../howto/functional.rst:927
msgid ""
"If you don't supply a value for *r* the length of the iterable is used, "
"meaning that all the elements are permuted."
msgstr ""
"Si no proporciona un valor para *r* se utiliza la longitud del iterable, lo "
"que significa que todos los elementos se permutan."

#: ../../howto/functional.rst:930
msgid ""
"Note that these functions produce all of the possible combinations by "
"position and don't require that the contents of *iterable* are unique::"
msgstr ""
"Tenga en cuenta que estas funciones producen todas las combinaciones "
"posibles por posición y no requieren que el contenido de *iterable* sea "
"único::"

#: ../../howto/functional.rst:933
msgid ""
"itertools.permutations('aba', 3) =>\n"
"  ('a', 'b', 'a'), ('a', 'a', 'b'), ('b', 'a', 'a'),\n"
"  ('b', 'a', 'a'), ('a', 'a', 'b'), ('a', 'b', 'a')"
msgstr ""
"itertools.permutations('aba', 3) =>\n"
"  ('a', 'b', 'a'), ('a', 'a', 'b'), ('b', 'a', 'a'),\n"
"  ('b', 'a', 'a'), ('a', 'a', 'b'), ('a', 'b', 'a')"

#: ../../howto/functional.rst:937
msgid ""
"The identical tuple ``('a', 'a', 'b')`` occurs twice, but the two 'a' "
"strings came from different positions."
msgstr ""
"La misma tupla ``('a', 'a', 'b')`` aparece dos veces, pero las dos cadenas "
"\"a\" proceden de posiciones diferentes."

#: ../../howto/functional.rst:940
msgid ""
"The :func:`itertools.combinations_with_replacement(iterable, r) <itertools."
"combinations_with_replacement>` function relaxes a different constraint: "
"elements can be repeated within a single tuple.  Conceptually an element is "
"selected for the first position of each tuple and then is replaced before "
"the second element is selected.  ::"
msgstr ""
"La función :func:`itertools.combinations_with_replacement(iterable, r) "
"<itertools.combinations_with_replacement>` relaja una restricción diferente: "
"los elementos pueden repetirse dentro de una misma tupla.  Conceptualmente "
"se selecciona un elemento para la primera posición de cada tupla y luego se "
"sustituye antes de seleccionar el segundo elemento. ::"

#: ../../howto/functional.rst:946
msgid ""
"itertools.combinations_with_replacement([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 2), (2, 3), (2, 4), (2, 5),\n"
"  (3, 3), (3, 4), (3, 5),\n"
"  (4, 4), (4, 5),\n"
"  (5, 5)"
msgstr ""
"itertools.combinations_with_replacement([1, 2, 3, 4, 5], 2) =>\n"
"  (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),\n"
"  (2, 2), (2, 3), (2, 4), (2, 5),\n"
"  (3, 3), (3, 4), (3, 5),\n"
"  (4, 4), (4, 5),\n"
"  (5, 5)"

#: ../../howto/functional.rst:955
msgid "Grouping elements"
msgstr "Agrupación de elementos"

#: ../../howto/functional.rst:957
msgid ""
"The last function I'll discuss, :func:`itertools.groupby(iter, "
"key_func=None) <itertools.groupby>`, is the most complicated.  "
"``key_func(elem)`` is a function that can compute a key value for each "
"element returned by the iterable.  If you don't supply a key function, the "
"key is simply each element itself."
msgstr ""
"La última función que voy a discutir, :func:`itertools.groupby(iter, "
"key_func=None) <itertools.groupby>`, es la más complicada. "
"``key_func(elem)`` es una función que puede calcular un valor clave para "
"cada elemento devuelto por el iterable.  Si no se proporciona una función "
"clave, la clave es simplemente cada elemento."

#: ../../howto/functional.rst:962
msgid ""
":func:`~itertools.groupby` collects all the consecutive elements from the "
"underlying iterable that have the same key value, and returns a stream of 2-"
"tuples containing a key value and an iterator for the elements with that key."
msgstr ""
":func:`~itertools.groupby` recoge todos los elementos consecutivos del "
"iterable subyacente que tienen el mismo valor clave, y devuelve un flujo de "
"2-tuplas que contiene un valor clave y un iterador para los elementos con "
"esa clave."

#: ../../howto/functional.rst:968
msgid ""
"city_list = [('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL'),\n"
"             ('Anchorage', 'AK'), ('Nome', 'AK'),\n"
"             ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ'),\n"
"             ...\n"
"            ]\n"
"\n"
"def get_state(city_state):\n"
"    return city_state[1]\n"
"\n"
"itertools.groupby(city_list, get_state) =>\n"
"  ('AL', iterator-1),\n"
"  ('AK', iterator-2),\n"
"  ('AZ', iterator-3), ...\n"
"\n"
"where\n"
"iterator-1 =>\n"
"  ('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL')\n"
"iterator-2 =>\n"
"  ('Anchorage', 'AK'), ('Nome', 'AK')\n"
"iterator-3 =>\n"
"  ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ')"
msgstr ""
"city_list = [('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL'),\n"
"             ('Anchorage', 'AK'), ('Nome', 'AK'),\n"
"             ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ'),\n"
"             ...\n"
"            ]\n"
"\n"
"def get_state(city_state):\n"
"    return city_state[1]\n"
"\n"
"itertools.groupby(city_list, get_state) =>\n"
"  ('AL', iterator-1),\n"
"  ('AK', iterator-2),\n"
"  ('AZ', iterator-3), ...\n"
"\n"
"where\n"
"iterator-1 =>\n"
"  ('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL')\n"
"iterator-2 =>\n"
"  ('Anchorage', 'AK'), ('Nome', 'AK')\n"
"iterator-3 =>\n"
"  ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ')"

#: ../../howto/functional.rst:990
msgid ""
":func:`~itertools.groupby` assumes that the underlying iterable's contents "
"will already be sorted based on the key.  Note that the returned iterators "
"also use the underlying iterable, so you have to consume the results of "
"iterator-1 before requesting iterator-2 and its corresponding key."
msgstr ""
":func:`~itertools.groupby` asume que el contenido del iterable subyacente ya "
"estará ordenado en base a la clave.  Ten en cuenta que los iteradores "
"devueltos también utilizan el iterable subyacente, por lo que tienes que "
"consumir los resultados del iterador-1 antes de solicitar el iterador-2 y su "
"clave correspondiente."

#: ../../howto/functional.rst:997
msgid "The functools module"
msgstr "El módulo functools"

#: ../../howto/functional.rst:999
msgid ""
"The :mod:`functools` module contains some higher-order functions. A **higher-"
"order function** takes one or more functions as input and returns a new "
"function.  The most useful tool in this module is the :func:`functools."
"partial` function."
msgstr ""
"El módulo :mod:`functools` contiene algunas funciones de orden superior. Una "
"**función de orden superior** toma una o más funciones como entrada y "
"devuelve una nueva función.  La herramienta más útil de este módulo es la "
"función :func:`functools.partial`."

#: ../../howto/functional.rst:1004
msgid ""
"For programs written in a functional style, you'll sometimes want to "
"construct variants of existing functions that have some of the parameters "
"filled in. Consider a Python function ``f(a, b, c)``; you may wish to create "
"a new function ``g(b, c)`` that's equivalent to ``f(1, b, c)``; you're "
"filling in a value for one of ``f()``'s parameters.  This is called "
"\"partial function application\"."
msgstr ""
"Para programas escritos en un estilo funcional, a veces querrá construir "
"variantes de funciones existentes que tengan algunos de los parámetros "
"rellenados. Considere una función de Python ``f(a, b, c)``; puede que desee "
"crear una nueva función ``g(b, c)`` que sea equivalente a ``f(1, b, c)``; "
"está rellenando un valor para uno de los parámetros de ``f()``.  Esto se "
"llama \"aplicación parcial de la función\"."

#: ../../howto/functional.rst:1010
msgid ""
"The constructor for :func:`~functools.partial` takes the arguments "
"``(function, arg1, arg2, ..., kwarg1=value1, kwarg2=value2)``.  The "
"resulting object is callable, so you can just call it to invoke ``function`` "
"with the filled-in arguments."
msgstr ""
"El constructor de :func:`~functools.partial` toma los argumentos "
"``(function, arg1, arg2, ..., kwarg1=value1, kwarg2=value2)``.  El objeto "
"resultante es invocable, por lo que puede llamarlo para invocar ``function`` "
"con los argumentos introducidos."

#: ../../howto/functional.rst:1015
msgid "Here's a small but realistic example::"
msgstr "He aquí un ejemplo pequeño pero realista::"

#: ../../howto/functional.rst:1017
msgid ""
"import functools\n"
"\n"
"def log(message, subsystem):\n"
"    \"\"\"Write the contents of 'message' to the specified subsystem.\"\"\"\n"
"    print('%s: %s' % (subsystem, message))\n"
"    ...\n"
"\n"
"server_log = functools.partial(log, subsystem='server')\n"
"server_log('Unable to open socket')"
msgstr ""
"import functools\n"
"\n"
"def log(message, subsystem):\n"
"    \"\"\"Escribe el contenido de 'mensaje' en el subsistema especificado."
"\"\"\"\n"
"    print('%s: %s' % (subsistema, mensaje))\n"
"    ...\n"
"\n"
"server_log = functools.partial(log, subsystem='server')\n"
"server_log('No se pudo abrir el socket')"

#: ../../howto/functional.rst:1027
msgid ""
":func:`functools.reduce(func, iter, [initial_value]) <functools.reduce>` "
"cumulatively performs an operation on all the iterable's elements and, "
"therefore, can't be applied to infinite iterables. *func* must be a function "
"that takes two elements and returns a single value.  :func:`functools."
"reduce` takes the first two elements A and B returned by the iterator and "
"calculates ``func(A, B)``.  It then requests the third element, C, "
"calculates ``func(func(A, B), C)``, combines this result with the fourth "
"element returned, and continues until the iterable is exhausted.  If the "
"iterable returns no values at all, a :exc:`TypeError` exception is raised.  "
"If the initial value is supplied, it's used as a starting point and "
"``func(initial_value, A)`` is the first calculation. ::"
msgstr ""
":func:`functools.reduce(func, iter, [valor_inicial]) <functools.reduce>` "
"realiza acumulativamente una operación sobre todos los elementos del "
"iterable y, por tanto, no puede aplicarse a iterables infinitos. *func* debe "
"ser una función que tome dos elementos y devuelva un único valor. :func:"
"`functools.reduce` toma los dos primeros elementos A y B devueltos por el "
"iterador y calcula ``func(A, B)``.  A continuación, solicita el tercer "
"elemento, C, calcula ``func(func(A, B), C)``, combina este resultado con el "
"cuarto elemento devuelto, y continúa hasta agotar el iterable.  Si el "
"iterable no devuelve ningún valor, se lanza una excepción :exc:`TypeError`.  "
"Si se proporciona el valor inicial, se utiliza como punto de partida y "
"``func(initial_value, A)`` es el primer cálculo. ::"

#: ../../howto/functional.rst:1039
msgid ""
">>> import operator, functools\n"
">>> functools.reduce(operator.concat, ['A', 'BB', 'C'])\n"
"'ABBC'\n"
">>> functools.reduce(operator.concat, [])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: reduce() of empty sequence with no initial value\n"
">>> functools.reduce(operator.mul, [1, 2, 3], 1)\n"
"6\n"
">>> functools.reduce(operator.mul, [], 1)\n"
"1"
msgstr ""
">>> import operator, functools\n"
">>> functools.reduce(operator.concat, ['A', 'BB', 'C'])\n"
"'ABBC'\n"
">>> functools.reduce(operator.concat, [])\n"
"Traceback (última llamada más reciente):\n"
"  ...\n"
"TypeError: reduce() de secuencia vacía sin valor inicial\n"
">>> functools.reduce(operator.mul, [1, 2, 3], 1)\n"
"6\n"
">>> functools.reduce(operator.mul, [], 1)\n"
"1"

#: ../../howto/functional.rst:1051
msgid ""
"If you use :func:`operator.add` with :func:`functools.reduce`, you'll add up "
"all the elements of the iterable.  This case is so common that there's a "
"special built-in called :func:`sum` to compute it:"
msgstr ""
"Si utiliza :func:`operator.add` con :func:`functools.reduce`, sumará todos "
"los elementos del iterable.  Este caso es tan común que existe un built-in "
"especial llamado :func:`sum` para calcularlo:"

#: ../../howto/functional.rst:1063
msgid ""
"For many uses of :func:`functools.reduce`, though, it can be clearer to just "
"write the obvious :keyword:`for` loop::"
msgstr ""
"Para muchos usos de :func:`functools.reduce`, sin embargo, puede ser más "
"claro escribir simplemente el bucle obvio :keyword:`for`::"

#: ../../howto/functional.rst:1066
msgid ""
"import functools\n"
"# Instead of:\n"
"product = functools.reduce(operator.mul, [1, 2, 3], 1)\n"
"\n"
"# You can write:\n"
"product = 1\n"
"for i in [1, 2, 3]:\n"
"    product *= i"
msgstr ""
"import functools\n"
"# En lugar de\n"
"product = functools.reduce(operator.mul, [1, 2, 3], 1)\n"
"\n"
"# se puede escribir:\n"
"product = 1\n"
"for i in [1, 2, 3]:\n"
"    product *= i"

#: ../../howto/functional.rst:1075
msgid ""
"A related function is :func:`itertools.accumulate(iterable, func=operator."
"add) <itertools.accumulate>`.  It performs the same calculation, but instead "
"of returning only the final result, :func:`~itertools.accumulate` returns an "
"iterator that also yields each partial result::"
msgstr ""
"Una función relacionada es :func:`itertools.accumulate(iterable, "
"func=operator.add) <itertools.accumulate>`.  Realiza el mismo cálculo, pero "
"en lugar de devolver sólo el resultado final, :func:`~itertools.accumulate` "
"devuelve un iterador que también devuelve cada resultado parcial::"

#: ../../howto/functional.rst:1080
msgid ""
"itertools.accumulate([1, 2, 3, 4, 5]) =>\n"
"  1, 3, 6, 10, 15\n"
"\n"
"itertools.accumulate([1, 2, 3, 4, 5], operator.mul) =>\n"
"  1, 2, 6, 24, 120"
msgstr ""
"itertools.accumulate([1, 2, 3, 4, 5]) =>\n"
"  1, 3, 6, 10, 15\n"
"\n"
"itertools.accumulate([1, 2, 3, 4, 5], operator.mul) =>\n"
"  1, 2, 6, 24, 120"

#: ../../howto/functional.rst:1088
msgid "The operator module"
msgstr "El módulo operador"

#: ../../howto/functional.rst:1090
msgid ""
"The :mod:`operator` module was mentioned earlier.  It contains a set of "
"functions corresponding to Python's operators.  These functions are often "
"useful in functional-style code because they save you from writing trivial "
"functions that perform a single operation."
msgstr ""
"Ya se ha mencionado el módulo :mod:`operator`.  Contiene un conjunto de "
"funciones correspondientes a los operadores de Python.  Estas funciones "
"suelen ser útiles en el código de estilo funcional porque te ahorran "
"escribir funciones triviales que realizan una única operación."

#: ../../howto/functional.rst:1095
msgid "Some of the functions in this module are:"
msgstr "Algunas de las funciones de este módulo son:"

#: ../../howto/functional.rst:1097
msgid ""
"Math operations: ``add()``, ``sub()``, ``mul()``, ``floordiv()``, "
"``abs()``, ..."
msgstr ""
"Operaciones matemáticas: ``add()``, ``sub()``, ``mul()``, ``floordiv()``, "
"``abs()``, ..."

#: ../../howto/functional.rst:1098
msgid "Logical operations: ``not_()``, ``truth()``."
msgstr "Operaciones lógicas: ``not_()``, ``truth()``."

#: ../../howto/functional.rst:1099
msgid "Bitwise operations: ``and_()``, ``or_()``, ``invert()``."
msgstr "Operaciones bit a bit: ``and_()``, ``or_()``, ``invert()``."

#: ../../howto/functional.rst:1100
msgid ""
"Comparisons: ``eq()``, ``ne()``, ``lt()``, ``le()``, ``gt()``, and ``ge()``."
msgstr ""
"Comparaciones: ``eq()``, ``ne()``, ``lt()``, ``le()``, ``gt()``, y ``ge()``."

#: ../../howto/functional.rst:1101
msgid "Object identity: ``is_()``, ``is_not()``."
msgstr "Identidad del objeto: ``is_()``, ``is_not()``."

#: ../../howto/functional.rst:1103
msgid "Consult the operator module's documentation for a complete list."
msgstr ""
"Consulte la documentación del módulo operador para obtener una lista "
"completa."

#: ../../howto/functional.rst:1107
msgid "Small functions and the lambda expression"
msgstr "Pequeñas funciones y la expresión lambda"

#: ../../howto/functional.rst:1109
msgid ""
"When writing functional-style programs, you'll often need little functions "
"that act as predicates or that combine elements in some way."
msgstr ""
"Al escribir programas de estilo funcional, a menudo necesitarás pequeñas "
"funciones que actúen como predicados o que combinen elementos de alguna "
"manera."

#: ../../howto/functional.rst:1112
msgid ""
"If there's a Python built-in or a module function that's suitable, you don't "
"need to define a new function at all::"
msgstr ""
"Si existe una función incorporada en Python o en un módulo que sea adecuada, "
"no es necesario definir una nueva función::"

#: ../../howto/functional.rst:1115
msgid ""
"stripped_lines = [line.strip() for line in lines]\n"
"existing_files = filter(os.path.exists, file_list)"
msgstr ""
"stripped_lines = [line.strip() for line in lines]\n"
"existing_files = filter(os.path.exists, file_list)"

#: ../../howto/functional.rst:1118
msgid ""
"If the function you need doesn't exist, you need to write it.  One way to "
"write small functions is to use the :keyword:`lambda` expression.  "
"``lambda`` takes a number of parameters and an expression combining these "
"parameters, and creates an anonymous function that returns the value of the "
"expression::"
msgstr ""
"Si la función que necesitas no existe, tienes que escribirla.  Una forma de "
"escribir pequeñas funciones es utilizar la expresión :keyword:`lambda`. "
"``lambda`` toma una serie de parámetros y una expresión que combina estos "
"parámetros, y crea una función anónima que devuelve el valor de la "
"expresión::"

#: ../../howto/functional.rst:1123
msgid ""
"adder = lambda x, y: x+y\n"
"\n"
"print_assign = lambda name, value: name + '=' + str(value)"
msgstr ""
"adder = lambda x, y: x+y\n"
"\n"
"print_assign = lambda name, value: name + '=' + str(value)"

#: ../../howto/functional.rst:1127
msgid ""
"An alternative is to just use the ``def`` statement and define a function in "
"the usual way::"
msgstr ""
"Una alternativa es utilizar simplemente la sentencia ``def`` y definir una "
"función de la forma habitual::"

#: ../../howto/functional.rst:1130
msgid ""
"def adder(x, y):\n"
"    return x + y\n"
"\n"
"def print_assign(name, value):\n"
"    return name + '=' + str(value)"
msgstr ""
"def adder(x, y):\n"
"    return x + y\n"
"\n"
"def print_assign(name, value):\n"
"    return name + '=' + str(value)"

#: ../../howto/functional.rst:1136
msgid ""
"Which alternative is preferable?  That's a style question; my usual course "
"is to avoid using ``lambda``."
msgstr ""
"¿Qué alternativa es preferible?  Es una cuestión de estilo; yo suelo evitar "
"el uso de ``lambda``."

#: ../../howto/functional.rst:1139
msgid ""
"One reason for my preference is that ``lambda`` is quite limited in the "
"functions it can define.  The result has to be computable as a single "
"expression, which means you can't have multiway ``if... elif... else`` "
"comparisons or ``try... except`` statements.  If you try to do too much in a "
"``lambda`` statement, you'll end up with an overly complicated expression "
"that's hard to read.  Quick, what's the following code doing? ::"
msgstr ""
"Una de las razones de mi preferencia es que ``lambda`` está bastante "
"limitado en las funciones que puede definir.  El resultado tiene que ser "
"computable como una única expresión, lo que significa que no se pueden hacer "
"comparaciones multidireccionales en ``if... elif... else`` o sentencias "
"``try... except``.  Si intentas hacer demasiado en una sentencia ``lambda``, "
"acabarás con una expresión demasiado complicada y difícil de leer.  Rápido, "
"¿qué está haciendo el siguiente código? ::"

#: ../../howto/functional.rst:1146
msgid ""
"import functools\n"
"total = functools.reduce(lambda a, b: (0, a[1] + b[1]), items)[1]"
msgstr ""
"import functools\n"
"total = functools.reduce(lambda a, b: (0, a[1] + b[1]), items)[1]"

#: ../../howto/functional.rst:1149
msgid ""
"You can figure it out, but it takes time to disentangle the expression to "
"figure out what's going on.  Using a short nested ``def`` statements makes "
"things a little bit better::"
msgstr ""
"Puedes averiguarlo, pero lleva tiempo desentrañar la expresión para saber "
"qué está pasando.  El uso de un corto anidada ``def`` declaraciones hace las "
"cosas un poco mejor::"

#: ../../howto/functional.rst:1153
msgid ""
"import functools\n"
"def combine(a, b):\n"
"    return 0, a[1] + b[1]\n"
"\n"
"total = functools.reduce(combine, items)[1]"
msgstr ""
"import functools\n"
"def combine(a, b):\n"
"    return 0, a[1] + b[1]\n"
"\n"
"total = functools.reduce(combine, items)[1]"

#: ../../howto/functional.rst:1159
msgid "But it would be best of all if I had simply used a ``for`` loop::"
msgstr ""
"Pero lo mejor de todo sería que hubiera utilizado simplemente un bucle "
"``for``::"

#: ../../howto/functional.rst:1161
msgid ""
"total = 0\n"
"for a, b in items:\n"
"    total += b"
msgstr ""
"total = 0\n"
"for a, b in items:\n"
"    total += b"

#: ../../howto/functional.rst:1165
msgid "Or the :func:`sum` built-in and a generator expression::"
msgstr "O el :func:`sum` incorporado y una expresión generadora::"

#: ../../howto/functional.rst:1167
msgid "total = sum(b for a, b in items)"
msgstr "total = sum(b for a, b in items)"

#: ../../howto/functional.rst:1169
msgid ""
"Many uses of :func:`functools.reduce` are clearer when written as ``for`` "
"loops."
msgstr ""
"Muchos usos de :func:`functools.reduce` son más claros cuando se escriben "
"como bucles ``for``."

#: ../../howto/functional.rst:1171
msgid ""
"Fredrik Lundh once suggested the following set of rules for refactoring uses "
"of ``lambda``:"
msgstr ""
"Fredrik Lundh sugirió en una ocasión el siguiente conjunto de reglas para "
"refactorizar los usos de ``lambda``:"

#: ../../howto/functional.rst:1174
msgid "Write a lambda function."
msgstr "Escribe una función lambda."

#: ../../howto/functional.rst:1175
msgid "Write a comment explaining what the heck that lambda does."
msgstr "Escribe un comentario explicando qué demonios hace esa lambda."

#: ../../howto/functional.rst:1176
msgid ""
"Study the comment for a while, and think of a name that captures the essence "
"of the comment."
msgstr ""
"Estudia el comentario durante un rato y piensa en un nombre que capte la "
"esencia del comentario."

#: ../../howto/functional.rst:1178
msgid "Convert the lambda to a def statement, using that name."
msgstr "Convierte la lambda en una sentencia def, utilizando ese nombre."

#: ../../howto/functional.rst:1179
msgid "Remove the comment."
msgstr "Elimina el comentario."

#: ../../howto/functional.rst:1181
msgid ""
"I really like these rules, but you're free to disagree about whether this "
"lambda-free style is better."
msgstr ""
"A mí me gustan mucho estas reglas, pero eres libre de discrepar sobre si "
"este estilo sin lambda es mejor."

#: ../../howto/functional.rst:1186
msgid "Revision History and Acknowledgements"
msgstr "Historial de revisiones y agradecimientos"

#: ../../howto/functional.rst:1188
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Ian Bicking, Nick Coghlan, Nick Efford, Raymond Hettinger, Jim Jewett, Mike "
"Krell, Leandro Lameiro, Jussi Salmela, Collin Winter, Blake Winton."
msgstr ""
"El autor desea agradecer a las siguientes personas sus sugerencias, "
"correcciones y ayuda en varios borradores de este artículo: Ian Bicking, "
"Nick Coghlan, Nick Efford, Raymond Hettinger, Jim Jewett, Mike Krell, "
"Leandro Lameiro, Jussi Salmela, Collin Winter, Blake Winton."

#: ../../howto/functional.rst:1193
msgid "Version 0.1: posted June 30 2006."
msgstr "Versión 0.1: publicada el 30 de junio de 2006."

#: ../../howto/functional.rst:1195
msgid "Version 0.11: posted July 1 2006.  Typo fixes."
msgstr "Versión 0.11: publicada el 1 de julio de 2006.  Corrección de erratas."

#: ../../howto/functional.rst:1197
msgid ""
"Version 0.2: posted July 10 2006.  Merged genexp and listcomp sections into "
"one. Typo fixes."
msgstr ""
"Versión 0.2: publicada el 10 de julio de 2006.  Fusionadas las secciones "
"genexp y listcomp en una sola. Corrección de erratas."

#: ../../howto/functional.rst:1200
msgid ""
"Version 0.21: Added more references suggested on the tutor mailing list."
msgstr ""
"Versión 0.21: Añadidas más referencias sugeridas en la lista de correo de "
"tutores."

#: ../../howto/functional.rst:1202
msgid ""
"Version 0.30: Adds a section on the ``functional`` module written by Collin "
"Winter; adds short section on the operator module; a few other edits."
msgstr ""
"Versión 0.30: Añade una sección sobre el módulo ``functional`` escrita por "
"Collin Winter; añade una breve sección sobre el módulo operador; algunas "
"otras modificaciones."

#: ../../howto/functional.rst:1207
msgid "References"
msgstr "Referencias"

#: ../../howto/functional.rst:1210
msgid "General"
msgstr "General"

#: ../../howto/functional.rst:1212
msgid ""
"**Structure and Interpretation of Computer Programs**, by Harold Abelson and "
"Gerald Jay Sussman with Julie Sussman.  The book can be found at https://"
"mitpress.mit.edu/sicp.  In this classic textbook of computer science, "
"chapters 2 and 3 discuss the use of sequences and streams to organize the "
"data flow inside a program.  The book uses Scheme for its examples, but many "
"of the design approaches described in these chapters are applicable to "
"functional-style Python code."
msgstr ""
"**Estructura e interpretación de programas informáticos**, de Harold Abelson "
"y Gerald Jay Sussman con Julie Sussman.  El libro puede encontrarse en "
"https://mitpress.mit.edu/sicp.  En este libro de texto clásico de "
"informática, los capítulos 2 y 3 tratan sobre el uso de secuencias y flujos "
"para organizar el flujo de datos dentro de un programa.  El libro utiliza "
"Scheme para sus ejemplos, pero muchos de los enfoques de diseño descritos en "
"estos capítulos son aplicables al código Python de estilo funcional."

#: ../../howto/functional.rst:1220
msgid ""
"https://www.defmacro.org/ramblings/fp.html: A general introduction to "
"functional programming that uses Java examples and has a lengthy historical "
"introduction."
msgstr ""
"https://www.defmacro.org/ramblings/fp.html: Una introducción general a la "
"programación funcional que utiliza ejemplos de Java y tiene una larga "
"introducción histórica."

#: ../../howto/functional.rst:1223
msgid ""
"https://en.wikipedia.org/wiki/Functional_programming: General Wikipedia "
"entry describing functional programming."
msgstr ""
"https://en.wikipedia.org/wiki/Functional_programming: Entrada general de "
"Wikipedia que describe la programación funcional."

#: ../../howto/functional.rst:1226
msgid "https://en.wikipedia.org/wiki/Coroutine: Entry for coroutines."
msgstr "https://en.wikipedia.org/wiki/Coroutine: Entrada para coroutines."

#: ../../howto/functional.rst:1228
msgid ""
"https://en.wikipedia.org/wiki/Partial_application: Entry for the concept of "
"partial function application."
msgstr ""
"https://en.wikipedia.org/wiki/Partial_application: Entrada para el concepto "
"de aplicación parcial de funciones."

#: ../../howto/functional.rst:1230
msgid ""
"https://en.wikipedia.org/wiki/Currying: Entry for the concept of currying."
msgstr ""
"https://en.wikipedia.org/wiki/Currying: Entrada para el concepto de "
"currificación."

#: ../../howto/functional.rst:1233
msgid "Python-specific"
msgstr "Python-specific"

#: ../../howto/functional.rst:1235
msgid ""
"https://gnosis.cx/TPiP/: The first chapter of David Mertz's book :title-"
"reference:`Text Processing in Python` discusses functional programming for "
"text processing, in the section titled \"Utilizing Higher-Order Functions in "
"Text Processing\"."
msgstr ""
"https://gnosis.cx/TPiP/: El primer capítulo del libro de David Mertz :title-"
"reference:`Text Processing in Python` trata sobre la programación funcional "
"para el procesamiento de textos, en la sección titulada \"Utilizing Higher-"
"Order Functions in Text Processing\"."

#: ../../howto/functional.rst:1240
msgid ""
"Mertz also wrote a 3-part series of articles on functional programming for "
"IBM's DeveloperWorks site; see `part 1 <https://developer.ibm.com/articles/l-"
"prog/>`__, `part 2 <https://developer.ibm.com/tutorials/l-prog2/>`__, and "
"`part 3 <https://developer.ibm.com/tutorials/l-prog3/>`__,"
msgstr ""
"Mertz también escribió una serie de 3 artículos sobre programación funcional "
"para el sitio DeveloperWorks de IBM; véase `part 1 <https://developer.ibm."
"com/articles/l-prog/>`__, `part 2 <https://developer.ibm.com/tutorials/l-"
"prog2/>`__, y `part 3 <https://developer.ibm.com/tutorials/l-prog3/>`__,"

#: ../../howto/functional.rst:1248
msgid "Python documentation"
msgstr "Documentación sobre Python"

#: ../../howto/functional.rst:1250
msgid "Documentation for the :mod:`itertools` module."
msgstr "Documentación del módulo :mod:`itertools`."

#: ../../howto/functional.rst:1252
msgid "Documentation for the :mod:`functools` module."
msgstr "Documentación del módulo :mod:`functools`."

#: ../../howto/functional.rst:1254
msgid "Documentation for the :mod:`operator` module."
msgstr "Documentación del módulo :mod:`operator`."

#: ../../howto/functional.rst:1256
msgid ":pep:`289`: \"Generator Expressions\""
msgstr ":pep:`289`: \"Expresiones del generador\""

#: ../../howto/functional.rst:1258
msgid ""
":pep:`342`: \"Coroutines via Enhanced Generators\" describes the new "
"generator features in Python 2.5."
msgstr ""
":pep:`342`: \"Coroutines via Enhanced Generators\" describe las nuevas "
"características de los generadores en Python 2.5."
