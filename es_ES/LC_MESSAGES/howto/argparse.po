# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-09 14:15+0000\n"
"PO-Revision-Date: 2025-08-15 19:00+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Argparse Tutorial"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr "autor"

#: ../../howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr ""

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""
"Este tutorial pretende ser una introducción suave a :mod:`argparse`, el "
"módulo de análisis sintáctico de línea de comandos recomendado en la "
"biblioteca estándar de Python."

#: ../../howto/argparse.rst:16
msgid ""
"The standard library includes two other libraries directly related to "
"command-line parameter processing: the lower level :mod:`optparse` module "
"(which may require more code to configure for a given application, but also "
"allows an application to request behaviors that ``argparse`` doesn't "
"support), and the very low level :mod:`getopt` (which specifically serves as "
"an equivalent to the :c:func:`!getopt` family of functions available to C "
"programmers). While neither of those modules is covered directly in this "
"guide, many of the core concepts in ``argparse`` first originated in "
"``optparse``, so some aspects of this tutorial will also be relevant to "
"``optparse`` users."
msgstr ""

#: ../../howto/argparse.rst:29
msgid "Concepts"
msgstr "Conceptos"

#: ../../howto/argparse.rst:31
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr ""
"Vamos a mostrar el tipo de funcionalidad que vamos a explorar en este "
"tutorial introductorio haciendo uso del comando :command:`ls`:"

#: ../../howto/argparse.rst:34
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""

#: ../../howto/argparse.rst:53
msgid "A few concepts we can learn from the four commands:"
msgstr "De las cuatro órdenes podemos aprender algunos conceptos:"

#: ../../howto/argparse.rst:55
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
"El comando :command:`ls` es útil cuando se ejecuta sin ninguna opción. Por "
"defecto, muestra el contenido del directorio actual."

#: ../../howto/argparse.rst:58
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because "
"the program should know what to do with the value, solely based on where it "
"appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"Si queremos algo más de lo que proporciona por defecto, le decimos algo más. "
"En este caso, queremos que muestre un directorio diferente, ``pypy``. Lo que "
"hemos hecho es especificar lo que se conoce como argumento posicional. Se "
"llama así porque el programa debe saber qué hacer con el valor, basándose "
"únicamente en dónde aparece en la línea de comandos. Este concepto es más "
"relevante para un comando como :command:`cp`, cuyo uso más básico es ``cp "
"SRC DEST``. La primera posición es *lo que quieres copiar*, y la segunda "
"posición es *donde quieres copiarlo*."

#: ../../howto/argparse.rst:67
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"Ahora, digamos que queremos cambiar el comportamiento del programa. En "
"nuestro ejemplo, mostramos más información para cada archivo en lugar de "
"mostrar sólo los nombres de los archivos. El ``-l`` en ese caso se conoce "
"como un argumento opcional."

#: ../../howto/argparse.rst:71
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works "
"simply by reading its help text."
msgstr ""
"Es un fragmento del texto de ayuda. Es muy útil porque puedes encontrarte "
"con un programa que nunca has usado antes y averiguar cómo funciona "
"simplemente leyendo su texto de ayuda."

#: ../../howto/argparse.rst:77
msgid "The basics"
msgstr "Aspectos básicos"

#: ../../howto/argparse.rst:79
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "Empecemos con un ejemplo muy sencillo que no hace (casi) nada::"

#: ../../howto/argparse.rst:81
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""

#: ../../howto/argparse.rst:85 ../../howto/argparse.rst:193
#: ../../howto/argparse.rst:214
msgid "Following is a result of running the code:"
msgstr "A continuación se muestra el resultado de ejecutar el código:"

#: ../../howto/argparse.rst:87
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""

#: ../../howto/argparse.rst:102 ../../howto/argparse.rst:259
#: ../../howto/argparse.rst:303
msgid "Here is what is happening:"
msgstr "Esto es lo que ocurre:"

#: ../../howto/argparse.rst:104
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"Si ejecuta el script sin ninguna opción, no se mostrará nada en la salida "
"estándar. No es tan útil."

#: ../../howto/argparse.rst:107
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"La segunda empieza a mostrar la utilidad del módulo :mod:`argparse`. No "
"hemos hecho casi nada, pero ya obtenemos un bonito mensaje de ayuda."

#: ../../howto/argparse.rst:110
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"La opción ``--help``, que también puede abreviarse como``-h``, es la única "
"que nos sale por su cuenta (es decir, no es necesario especificarla). Si se "
"especifica cualquier otra opción, se produce un error. Pero incluso "
"entonces, obtenemos un útil mensaje de uso, también independiente."

#: ../../howto/argparse.rst:117
msgid "Introducing Positional arguments"
msgstr "Introducción a los argumentos posicionales"

#: ../../howto/argparse.rst:119
msgid "An example::"
msgstr "Un ejemplo::"

#: ../../howto/argparse.rst:121
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:127
msgid "And running the code:"
msgstr "Y ejecutando el código:"

#: ../../howto/argparse.rst:129
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""

#: ../../howto/argparse.rst:145
msgid "Here is what's happening:"
msgstr "Esto es lo que ocurre:"

#: ../../howto/argparse.rst:147
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""

#: ../../howto/argparse.rst:151
msgid "Calling our program now requires us to specify an option."
msgstr ""
"Llamar a nuestro programa ahora requiere que especifiquemos una opción."

#: ../../howto/argparse.rst:153
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""

#: ../../howto/argparse.rst:156
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""
"La variable es alguna forma de \"magia\" que :mod:`argparse` realiza "
"libremente (es decir, no es necesario especificar en qué variable se "
"almacena ese valor). También observará que su nombre coincide con el "
"argumento de cadena dado al método, ``echo``."

#: ../../howto/argparse.rst:161
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more "
"useful::"
msgstr ""
"Tenga en cuenta, sin embargo, que, aunque la pantalla de ayuda es bonita y "
"todo eso, actualmente no es todo lo útil que podría ser. Por ejemplo, vemos "
"que tenemos ``echo`` como argumento posicional, pero no sabemos lo que hace, "
"aparte de adivinarlo o leer el código fuente. Así que, hagámoslo un poco más "
"útil::"

#: ../../howto/argparse.rst:166
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:172
msgid "And we get:"
msgstr "Y lo conseguimos:"

#: ../../howto/argparse.rst:174
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../howto/argparse.rst:185
msgid "Now, how about doing something even more useful::"
msgstr "Ahora, ¿qué tal hacer algo aún más útil?::"

#: ../../howto/argparse.rst:187
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:195
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:203
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we "
"give it as strings, unless we tell it otherwise. So, let's tell :mod:"
"`argparse` to treat that input as an integer::"
msgstr ""
"Eso no fue tan bien. Eso es porque :mod:`argparse` trata las opciones que le "
"damos como cadenas, a menos que le digamos lo contrario. Así que, digámosle "
"a :mod:`argparse` que trate esa entrada como un entero::"

#: ../../howto/argparse.rst:207
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:216
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""

#: ../../howto/argparse.rst:224
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""
"Ha ido bien. El programa ahora incluso se detiene si la entrada ilegal es "
"incorrecta antes de continuar."

#: ../../howto/argparse.rst:229
msgid "Introducing Optional arguments"
msgstr "Introducción de argumentos opcionales"

#: ../../howto/argparse.rst:231
msgid ""
"So far we have been playing with positional arguments. Let us have a look on "
"how to add optional ones::"
msgstr ""
"Hasta ahora hemos jugado con argumentos posicionales. Veamos cómo añadir "
"argumentos opcionales::"

#: ../../howto/argparse.rst:234
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:241 ../../howto/argparse.rst:287
#: ../../howto/argparse.rst:403 ../../howto/argparse.rst:437
msgid "And the output:"
msgstr "Y la salida:"

#: ../../howto/argparse.rst:243
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""

#: ../../howto/argparse.rst:261
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""
"El programa está escrito de forma que muestre algo cuando se especifica ``--"
"verbosity`` y no muestre nada cuando no."

#: ../../howto/argparse.rst:264
msgid ""
"To show that the option is actually optional, there is no error when running "
"the program without it. Note that by default, if an optional argument isn't "
"used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the :"
"keyword:`if` statement."
msgstr ""

#: ../../howto/argparse.rst:270
msgid "The help message is a bit different."
msgstr "El mensaje de ayuda es un poco diferente."

#: ../../howto/argparse.rst:272
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any "
"value."
msgstr ""
"Cuando se utiliza la opción ``--verbosity``, también hay que especificar "
"algún valor, cualquier valor."

#: ../../howto/argparse.rst:275
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"El ejemplo anterior acepta valores enteros arbitrarios para``--verbosity``, "
"pero para nuestro sencillo programa, sólo dos valores son realmente útiles, "
"``True`` o ``False``. Modifiquemos el código en consecuencia::"

#: ../../howto/argparse.rst:279
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:289
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:305
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``. "
"This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""

#: ../../howto/argparse.rst:312
msgid ""
"It complains when you specify a value, in true spirit of what flags actually "
"are."
msgstr ""
"Se queja cuando se especifica un valor, en verdadero espíritu de lo que son "
"realmente las banderas."

#: ../../howto/argparse.rst:315
msgid "Notice the different help text."
msgstr "Fíjate en el texto de ayuda diferente."

#: ../../howto/argparse.rst:319
msgid "Short options"
msgstr "Opciones cortas"

#: ../../howto/argparse.rst:321
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""
"Si estás familiarizado con el uso de la línea de comandos, te darás cuenta "
"de que aún no he tocado el tema de las versiones cortas de las opciones. Es "
"bastante simple::"

#: ../../howto/argparse.rst:325
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output "
"verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:333
msgid "And here goes:"
msgstr "Y aquí va:"

#: ../../howto/argparse.rst:335
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:346
msgid "Note that the new ability is also reflected in the help text."
msgstr ""
"Tenga en cuenta que la nueva habilidad también se refleja en el texto de "
"ayuda."

#: ../../howto/argparse.rst:350
msgid "Combining Positional and Optional arguments"
msgstr "Combinación de argumentos posicionales y opcionales"

#: ../../howto/argparse.rst:352
msgid "Our program keeps growing in complexity::"
msgstr "Nuestro programa sigue creciendo en complejidad::"

#: ../../howto/argparse.rst:354
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:367
msgid "And now the output:"
msgstr "Y ahora la salida:"

#: ../../howto/argparse.rst:369
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""

#: ../../howto/argparse.rst:381
msgid "We've brought back a positional argument, hence the complaint."
msgstr "Hemos vuelto a traer un argumento posicional, de ahí la queja."

#: ../../howto/argparse.rst:383
msgid "Note that the order does not matter."
msgstr "Tenga en cuenta que el orden no importa."

#: ../../howto/argparse.rst:385
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""
"Qué tal si le devolvemos a este programa nuestro la capacidad de tener "
"múltiples valores de verbosidad, y realmente llegamos a usarlos::"

#: ../../howto/argparse.rst:388
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:405
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:419
msgid ""
"These all look good except the last one, which exposes a bug in our program. "
"Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""
"Todo esto se ve bien excepto el último, que expone un error en nuestro "
"programa. Arreglémoslo restringiendo los valores que puede aceptar la opción "
"``--verbosity``::"

#: ../../howto/argparse.rst:422
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:439
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, "
"1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:455
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""
"Tenga en cuenta que el cambio también se refleja tanto en el mensaje de "
"error como en la cadena de ayuda."

#: ../../howto/argparse.rst:458
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""
"Ahora, vamos a utilizar un enfoque diferente de jugar con la verbosidad, que "
"es bastante común. También coincide con la forma en que el ejecutable "
"CPython maneja su propio argumento de verbosidad (compruebe la salida de "
"``python --help``)::"

#: ../../howto/argparse.rst:462
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:477
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""

#: ../../howto/argparse.rst:481
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:506
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""
"Sí, ahora es más una bandera (similar a ``action=\"store_true\"``) en la "
"versión anterior de nuestro script. Eso debería explicar la queja."

#: ../../howto/argparse.rst:509
msgid "It also behaves similar to \"store_true\" action."
msgstr "También se comporta de forma similar a la acción \"store_true\"."

#: ../../howto/argparse.rst:511
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""
"He aquí una demostración de lo que da de sí la acción \"count\". "
"Probablemente hayas visto este tipo de uso antes."

#: ../../howto/argparse.rst:514
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr ""
"Y si no especifica la bandera ``-v``, Se considera que tiene el valor "
"``None``."

#: ../../howto/argparse.rst:517
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr ""
"Como era de esperar, especificando la forma larga de la bandera, deberíamos "
"obtener la misma salida."

#: ../../howto/argparse.rst:520
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""
"Lamentablemente, nuestra salida de ayuda no es muy informativa sobre la "
"nueva capacidad que ha adquirido nuestro script, pero eso siempre se puede "
"arreglar mejorando la documentación de nuestro script (por ejemplo, mediante "
"el argumento de la palabra clave ``help`` )."

#: ../../howto/argparse.rst:524
msgid "That last output exposes a bug in our program."
msgstr "Esta última salida expone un error en nuestro programa."

#: ../../howto/argparse.rst:527
msgid "Let's fix::"
msgstr "Vamos a arreglar::"

#: ../../howto/argparse.rst:529
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:546
msgid "And this is what it gives:"
msgstr "Y esto es lo que da:"

#: ../../howto/argparse.rst:548
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:561
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""
"La primera salida ha ido bien, y corrige el error que teníamos antes. Es "
"decir, queremos que cualquier valor >= 2 sea lo más verboso posible."

#: ../../howto/argparse.rst:564
msgid "Third output not so good."
msgstr "La tercera salida no es tan buena."

#: ../../howto/argparse.rst:566
msgid "Let's fix that bug::"
msgstr "Vamos a fijar ese error::"

#: ../../howto/argparse.rst:568
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:583
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the :exc:"
"`TypeError` exception)."
msgstr ""
"Acabamos de introducir una palabra clave más, ``default``. La hemos fijado "
"en ``0`` para hacerla comparable a los otros valores int. Recuerde que, por "
"defecto, si un argumento opcional no se especifica, se obtiene el valor "
"``None``, y que no se puede comparar con un valor int (de ahí la excepción :"
"exc:`TypeError` )."

#: ../../howto/argparse.rst:590
msgid "And:"
msgstr "Y:"

#: ../../howto/argparse.rst:592
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:597
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""
"Puedes llegar bastante lejos sólo con lo que hemos aprendido hasta ahora, y "
"sólo hemos arañado la superficie. El módulo :mod:`argparse` es muy potente, "
"y vamos a explorar un poco más de él antes de terminar este tutorial."

#: ../../howto/argparse.rst:604
msgid "Getting a little more advanced"
msgstr "Un poco más avanzado"

#: ../../howto/argparse.rst:606
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""
"¿Y si quisiéramos ampliar nuestro minúsculo programa para realizar otras "
"potencias, no sólo cuadrados::"

#: ../../howto/argparse.rst:609
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:623 ../../howto/argparse.rst:661
#: ../../howto/argparse.rst:877
msgid "Output:"
msgstr "Salida:"

#: ../../howto/argparse.rst:625
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:644
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""
"Observe que hasta ahora hemos utilizado el nivel de verbosidad para "
"*cambiar* el texto que se muestra. El siguiente ejemplo utiliza el nivel de "
"verbosidad para mostrar *más* texto::"

#: ../../howto/argparse.rst:648
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""

#: ../../howto/argparse.rst:663
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:677
msgid "Specifying ambiguous arguments"
msgstr ""

#: ../../howto/argparse.rst:679
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for "
"an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""

#: ../../howto/argparse.rst:683
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""

#: ../../howto/argparse.rst:704
msgid "Conflicting options"
msgstr "Opciones contradictorias"

#: ../../howto/argparse.rst:706
msgid ""
"So far, we have been working with two methods of an :class:`argparse."
"ArgumentParser` instance. Let's introduce a third one, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to specify "
"options that conflict with each other. Let's also change the rest of the "
"program so that the new functionality makes more sense: we'll introduce the "
"``--quiet`` option, which will be the opposite of the ``--verbose`` one::"
msgstr ""

#: ../../howto/argparse.rst:714
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:732
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""
"Nuestro programa es ahora más simple, y hemos perdido algo de funcionalidad "
"en aras de la demostración. De todos modos, aquí está la salida:"

#: ../../howto/argparse.rst:735
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""

#: ../../howto/argparse.rst:750
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""
"Eso debería ser fácil de seguir. He añadido la última salida para que pueda "
"ver el tipo de flexibilidad que se obtiene, es decir, la mezcla de opciones "
"de forma larga con las de forma corta."

#: ../../howto/argparse.rst:754
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of "
"your program, just in case they don't know::"
msgstr ""
"Antes de terminar, probablemente quieras explicar a tus usuarios el objetivo "
"principal de tu programa, por si acaso no lo saben::"

#: ../../howto/argparse.rst:757
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of "
"Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:775
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which "
"tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""
"Nótese esa ligera diferencia en el texto de uso. Fíjese en ``[-v | -q]``, "
"que nos indica que podemos utilizar ``-v`` or ``-q``, pero no ambos a la vez:"

#: ../../howto/argparse.rst:779 ../../howto/argparse.rst:806
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""

#: ../../howto/argparse.rst:797
msgid "How to translate the argparse output"
msgstr ""

#: ../../howto/argparse.rst:799
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`. "
"See also :ref:`i18n-howto`."
msgstr ""

#: ../../howto/argparse.rst:804
msgid "For instance, in this :mod:`argparse` output:"
msgstr ""

#: ../../howto/argparse.rst:822
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""

#: ../../howto/argparse.rst:825
msgid ""
"In order to translate these strings, they must first be extracted into a ``."
"po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run this "
"command:"
msgstr ""

#: ../../howto/argparse.rst:829
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr ""

#: ../../howto/argparse.rst:833
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""

#: ../../howto/argparse.rst:837
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""

#: ../../howto/argparse.rst:840
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""

#: ../../howto/argparse.rst:843
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""

#: ../../howto/argparse.rst:847
msgid ""
"To translate your own strings in the :mod:`argparse` output, use :mod:"
"`gettext`."
msgstr ""

#: ../../howto/argparse.rst:850
msgid "Custom type converters"
msgstr ""

#: ../../howto/argparse.rst:852
msgid ""
"The :mod:`argparse` module allows you to specify custom type converters for "
"your command-line arguments. This allows you to modify user input before "
"it's stored in the :class:`argparse.Namespace`. This can be useful when you "
"need to pre-process the input before it is used in your program."
msgstr ""

#: ../../howto/argparse.rst:857
msgid ""
"When using a custom type converter, you can use any callable that takes a "
"single string argument (the argument value) and returns the converted value. "
"However, if you need to handle more complex scenarios, you can use a custom "
"action class with the **action** parameter instead."
msgstr ""

#: ../../howto/argparse.rst:862
msgid ""
"For example, let's say you want to handle arguments with different prefixes "
"and process them accordingly::"
msgstr ""

#: ../../howto/argparse.rst:865
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(prefix_chars='-+')\n"
"\n"
"parser.add_argument('-a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('-', x))\n"
"parser.add_argument('+a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('+', x))\n"
"\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""

#: ../../howto/argparse.rst:879
msgid ""
"$ python prog.py -a value1 +a value2\n"
"Namespace(a=[('-', 'value1'), ('+', 'value2')])"
msgstr ""

#: ../../howto/argparse.rst:884
msgid "In this example, we:"
msgstr ""

#: ../../howto/argparse.rst:886
msgid ""
"Created a parser with custom prefix characters using the ``prefix_chars`` "
"parameter."
msgstr ""

#: ../../howto/argparse.rst:889
msgid ""
"Defined two arguments, ``-a`` and ``+a``, which used the ``type`` parameter "
"to create custom type converters to store the value in a tuple with the "
"prefix."
msgstr ""

#: ../../howto/argparse.rst:892
msgid ""
"Without the custom type converters, the arguments would have treated the ``-"
"a`` and ``+a`` as the same argument, which would have been undesirable. By "
"using custom type converters, we were able to differentiate between the two "
"arguments."
msgstr ""

#: ../../howto/argparse.rst:897
msgid "Conclusion"
msgstr "Conclusión"

#: ../../howto/argparse.rst:899
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
"El módulo :mod:`argparse` ofrece mucho más de lo que se muestra aquí. Sus "
"documentos son bastante detallados y completos, y están llenos de ejemplos. "
"Después de haber pasado por este tutorial, usted debe digerir fácilmente sin "
"sentirse abrumado."
