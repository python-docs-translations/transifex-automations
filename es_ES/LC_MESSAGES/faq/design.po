# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:53+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../faq/design.rst:3
msgid "Design and History FAQ"
msgstr "FAQ sobre diseño e historia"

#: ../../faq/design.rst:6
msgid "Contents"
msgstr "Contenido"

#: ../../faq/design.rst:11
msgid "Why does Python use indentation for grouping of statements?"
msgstr "¿Por qué Python utiliza la sangría para agrupar sentencias?"

#: ../../faq/design.rst:13
msgid ""
"Guido van Rossum believes that using indentation for grouping is extremely "
"elegant and contributes a lot to the clarity of the average Python program. "
"Most people learn to love this feature after a while."
msgstr ""
"Guido van Rossum cree que usar la sangría para agrupar es extremadamente "
"elegante y contribuye mucho a la claridad del programa Python. La mayoría de "
"la gente aprende a amar esta característica después de un tiempo."

#: ../../faq/design.rst:17
msgid ""
"Since there are no begin/end brackets there cannot be a disagreement between "
"grouping perceived by the parser and the human reader.  Occasionally C "
"programmers will encounter a fragment of code like this::"
msgstr ""
"Como no hay corchetes de inicio/fin, no puede haber desacuerdo entre la "
"agrupación percibida por el analizador sintáctico y el lector humano.  "
"Ocasionalmente los programadores de C se encontrarán con un fragmento de "
"código como este::"

#: ../../faq/design.rst:26
msgid ""
"Only the ``x++`` statement is executed if the condition is true, but the "
"indentation leads many to believe otherwise.  Even experienced C programmers "
"will sometimes stare at it a long time wondering as to why ``y`` is being "
"decremented even for ``x > y``."
msgstr ""
"Sólo se ejecuta la sentencia ``x++`` si la condición es verdadera, pero la "
"sangría lleva a muchos a creer lo contrario.  Incluso los programadores de C "
"experimentados a veces se quedan mirándola mucho tiempo preguntándose por "
"qué ``y`` se decrementa incluso para ``x > y``."

#: ../../faq/design.rst:31
msgid ""
"Because there are no begin/end brackets, Python is much less prone to coding-"
"style conflicts.  In C there are many different ways to place the braces. "
"After becoming used to reading and writing code using a particular style, it "
"is normal to feel somewhat uneasy when reading (or being required to write) "
"in a different one."
msgstr ""
"Porque no hay corchetes de inicio/fin, Python es mucho menos propenso a "
"conflictos de estilo de codificación. En C hay muchas formas diferentes de "
"colocar las llaves. Después de acostumbrarse a leer y escribir código usando "
"un estilo particular, es normal sentirse algo incómodo al leer (o ser "
"requerido para escribir) en uno diferente."

#: ../../faq/design.rst:38
msgid ""
"Many coding styles place begin/end brackets on a line by themselves.  This "
"makes programs considerably longer and wastes valuable screen space, making "
"it harder to get a good overview of a program.  Ideally, a function should "
"fit on one screen (say, 20--30 lines).  20 lines of Python can do a lot more "
"work than 20 lines of C.  This is not solely due to the lack of begin/end "
"brackets -- the lack of declarations and the high-level data types are also "
"responsible -- but the indentation-based syntax certainly helps."
msgstr ""
"Muchos estilos de codificación colocan los corchetes de inicio/fin en una "
"línea aparte. Esto hace que los programas sean considerablemente más largos "
"y desperdicia espacio en la pantalla, dificultando obtener una buena visión "
"general de un programa. Idealmente, una función debería caber en una "
"pantalla (digamos, 20-30 líneas). 20 líneas de Python pueden hacer mucho más "
"trabajo que 20 líneas de C. Esto no se debe únicamente a la falta de "
"corchetes de inicio/fin, sino que también se debe a la falta de "
"declaraciones y a los tipos de datos de alto nivel, pero la sintaxis basada "
"en la indentación ciertamente ayuda."

#: ../../faq/design.rst:48
msgid "Why am I getting strange results with simple arithmetic operations?"
msgstr ""
"¿Por qué obtengo resultados extraños con operaciones aritméticas simples?"

#: ../../faq/design.rst:50
msgid "See the next question."
msgstr "Ver la siguiente pregunta."

#: ../../faq/design.rst:54
msgid "Why are floating-point calculations so inaccurate?"
msgstr "¿Por qué los cálculos de punto flotante son tan inexactos?"

#: ../../faq/design.rst:56
msgid "Users are often surprised by results like this::"
msgstr "Los usuarios a menudo se sorprenden por resultados como este:"

#: ../../faq/design.rst:61
msgid ""
"and think it is a bug in Python.  It's not.  This has little to do with "
"Python, and much more to do with how the underlying platform handles "
"floating-point numbers."
msgstr ""
"y piensa que es un error en Python. No lo es. Esto tiene poco que ver con "
"Python y mucho más que ver con cómo la plataforma subyacente maneja los "
"números de punto flotante."

#: ../../faq/design.rst:65
msgid ""
"The :class:`float` type in CPython uses a C ``double`` for storage.  A :"
"class:`float` object's value is stored in binary floating-point with a fixed "
"precision (typically 53 bits) and Python uses C operations, which in turn "
"rely on the hardware implementation in the processor, to perform floating-"
"point operations. This means that as far as floating-point operations are "
"concerned, Python behaves like many popular languages including C and Java."
msgstr ""
"El tipo :class:`float` en CPython utiliza un C ``double`` para el "
"almacenamiento.  El valor de un objeto :class:`float` se almacena en coma "
"flotante binaria con una precisión fija (normalmente 53 bits) y Python "
"utiliza operaciones C, que a su vez dependen de la implementación hardware "
"en el procesador, para realizar operaciones en coma flotante. Esto significa "
"que, en lo que respecta a las operaciones de coma flotante, Python se "
"comporta como muchos lenguajes populares, incluidos C y Java."

#: ../../faq/design.rst:72
msgid ""
"Many numbers that can be written easily in decimal notation cannot be "
"expressed exactly in binary floating-point.  For example, after::"
msgstr ""
"Muchos números que pueden ser escritos fácilmente en notación decimal no "
"pueden ser expresados exactamente en punto flotante binario. Por ejemplo, "
"después:"

#: ../../faq/design.rst:77
msgid ""
"the value stored for ``x`` is a (very good) approximation to the decimal "
"value ``1.2``, but is not exactly equal to it.  On a typical machine, the "
"actual stored value is::"
msgstr ""
"El valor almacenado para ``x`` es una (muy buena) aproximación al valor "
"decimal ``1.2``, pero no es exactamente igual. En una máquina típica, el "
"valor almacenado real es:"

#: ../../faq/design.rst:83
msgid "which is exactly::"
msgstr "que es exactamente::"

#: ../../faq/design.rst:87
msgid ""
"The typical precision of 53 bits provides Python floats with 15--16 decimal "
"digits of accuracy."
msgstr ""
"La precisión típica de 53 bits proporciona flotantes Python con 15-16 "
"dígitos decimales de precisión."

#: ../../faq/design.rst:90
msgid ""
"For a fuller explanation, please see the :ref:`floating point arithmetic "
"<tut-fp-issues>` chapter in the Python tutorial."
msgstr ""
"Para una explicación más completa, consulte el capítulo :ref:`aritmética de "
"punto flotante <tut-fp-issues>` del tutorial de Python."

#: ../../faq/design.rst:95
msgid "Why are Python strings immutable?"
msgstr "¿Por qué las cadenas de Python son inmutables?"

#: ../../faq/design.rst:97
msgid "There are several advantages."
msgstr "Hay varias ventajas."

#: ../../faq/design.rst:99
msgid ""
"One is performance: knowing that a string is immutable means we can allocate "
"space for it at creation time, and the storage requirements are fixed and "
"unchanging.  This is also one of the reasons for the distinction between "
"tuples and lists."
msgstr ""
"Una es el rendimiento: saber que una cadena es inmutable significa que "
"podemos asignarle espacio en el momento de la creación, y los requisitos de "
"almacenamiento son fijos e invariables.  Esta es también una de las razones "
"de la distinción entre tuplas y listas."

#: ../../faq/design.rst:104
msgid ""
"Another advantage is that strings in Python are considered as \"elemental\" "
"as numbers.  No amount of activity will change the value 8 to anything else, "
"and in Python, no amount of activity will change the string \"eight\" to "
"anything else."
msgstr ""
"Otra ventaja es que las cadenas de texto en Python se consideran tan "
"\"elementales\" como los números. Ninguna cantidad de actividad cambiará el "
"valor 8 a cualquier otra cosa, y en Python, ninguna cantidad de actividad "
"cambiará la cadena \"eight\" a cualquier otra cosa."

#: ../../faq/design.rst:112
msgid "Why must 'self' be used explicitly in method definitions and calls?"
msgstr ""
"¿Por qué se debe usar 'self' explícitamente en las definiciones y llamadas "
"de métodos?"

#: ../../faq/design.rst:114
msgid ""
"The idea was borrowed from Modula-3.  It turns out to be very useful, for a "
"variety of reasons."
msgstr ""
"La idea fue tomada prestada de Modula-3. Resulta ser muy útil, por diversas "
"razones."

#: ../../faq/design.rst:117
msgid ""
"First, it's more obvious that you are using a method or instance attribute "
"instead of a local variable.  Reading ``self.x`` or ``self.meth()`` makes it "
"absolutely clear that an instance variable or method is used even if you "
"don't know the class definition by heart.  In C++, you can sort of tell by "
"the lack of a local variable declaration (assuming globals are rare or "
"easily recognizable) -- but in Python, there are no local variable "
"declarations, so you'd have to look up the class definition to be sure.  "
"Some C++ and Java coding standards call for instance attributes to have an "
"``m_`` prefix, so this explicitness is still useful in those languages, too."
msgstr ""
"Primero, es más obvio que estás usando un método o atributo de instancia en "
"lugar de una variable local.  Leyendo ``self.x`` o ``self.meth()`` queda "
"absolutamente claro que se utiliza una variable de instancia o un método, "
"incluso si no te sabes la definición de la clase de memoria.  En C++, puedes "
"darte cuenta por la falta de una declaración de variable local (asumiendo "
"que las globales son raras o fácilmente reconocibles) -- pero en Python, no "
"hay declaraciones de variables locales, así que tendrías que buscar la "
"definición de la clase para estar seguro.  Algunos estándares de "
"codificación de C++ y Java exigen que los atributos de instancia tengan un "
"prefijo ``m_``, por lo que esta explicitud también es útil en esos lenguajes."

#: ../../faq/design.rst:127
msgid ""
"Second, it means that no special syntax is necessary if you want to "
"explicitly reference or call the method from a particular class.  In C++, if "
"you want to use a method from a base class which is overridden in a derived "
"class, you have to use the ``::`` operator -- in Python you can write "
"``baseclass.methodname(self, <argument list>)``.  This is particularly "
"useful for :meth:`__init__` methods, and in general in cases where a derived "
"class method wants to extend the base class method of the same name and thus "
"has to call the base class method somehow."
msgstr ""
"En segundo lugar, significa que no es necesaria una sintaxis especial si "
"quieres referenciar o llamar explícitamente al método de una clase en "
"particular.  En C++, si se quiere usar un método de una clase base que está "
"sobreescrito en una clase derivada, hay que usar el operador ``::`` -- en "
"Python se puede escribir ``baseclass.methodname(self, <argument list>)``.  "
"Esto es particularmente útil para los métodos :meth:`__init__`, y en general "
"en los casos en que un método de una clase derivada quiere extender el "
"método de la clase base del mismo nombre y por lo tanto tiene que llamar al "
"método de la clase base de alguna manera."

#: ../../faq/design.rst:136
msgid ""
"Finally, for instance variables it solves a syntactic problem with "
"assignment: since local variables in Python are (by definition!) those "
"variables to which a value is assigned in a function body (and that aren't "
"explicitly declared global), there has to be some way to tell the "
"interpreter that an assignment was meant to assign to an instance variable "
"instead of to a local variable, and it should preferably be syntactic (for "
"efficiency reasons).  C++ does this through declarations, but Python doesn't "
"have declarations and it would be a pity having to introduce them just for "
"this purpose.  Using the explicit ``self.var`` solves this nicely.  "
"Similarly, for using instance variables, having to write ``self.var`` means "
"that references to unqualified names inside a method don't have to search "
"the instance's directories.  To put it another way, local variables and "
"instance variables live in two different namespaces, and you need to tell "
"Python which namespace to use."
msgstr ""
"Finalmente, para las variables de instancia resuelve un problema sintáctico "
"con las asignaciones: dado que las variables locales en Python son (¡por "
"definición!) aquellas variables a las que se asigna un valor en el cuerpo de "
"una función (y que no están explícitamente declaradas globales), tiene que "
"haber alguna forma de decirle al intérprete que una asignación debía "
"asignarse a una variable de instancia en lugar de a una variable local, y "
"preferiblemente debería ser sintáctica (por razones de eficiencia).  C++ "
"hace esto mediante declaraciones, pero Python no tiene declaraciones y sería "
"una pena tener que introducirlas sólo para este propósito.  El uso explícito "
"de ``self.var`` resuelve esto muy bien.  De forma similar, para usar "
"variables de instancia, tener que escribir ``self.var`` significa que las "
"referencias a nombres no cualificados dentro de un método no tienen que "
"buscar en los directorios de la instancia.  Para decirlo de otra manera, las "
"variables locales y las variables de instancia viven en dos espacios de "
"nombres diferentes, y necesitas decirle a Python qué espacio de nombres usar."

#: ../../faq/design.rst:154
msgid "Why can't I use an assignment in an expression?"
msgstr "¿Por qué no puedo usar una asignación en una expresión?"

#: ../../faq/design.rst:156
msgid "Starting in Python 3.8, you can!"
msgstr "¡A partir de Python 3.8, puedes hacerlo!"

#: ../../faq/design.rst:158
msgid ""
"Assignment expressions using the walrus operator ``:=`` assign a variable in "
"an expression::"
msgstr ""
"Expresiones de asignación utilizando el operador morsa ``:=`` asignar una "
"variable en una expresión::"

#: ../../faq/design.rst:164
msgid "See :pep:`572` for more information."
msgstr "Ver :pep:`572` para más información."

#: ../../faq/design.rst:169
msgid ""
"Why does Python use methods for some functionality (e.g. list.index()) but "
"functions for other (e.g. len(list))?"
msgstr ""
"¿Por qué Python utiliza métodos para algunas funcionalidades (por ejemplo, "
"list.index()) pero funciones para otras (por ejemplo, len(list))?"

#: ../../faq/design.rst:171
msgid "As Guido said:"
msgstr "Como dijo Guido:"

#: ../../faq/design.rst:173
msgid ""
"(a) For some operations, prefix notation just reads better than postfix -- "
"prefix (and infix!) operations have a long tradition in mathematics which "
"likes notations where the visuals help the mathematician thinking about a "
"problem. Compare the easy with which we rewrite a formula like x*(a+b) into "
"x*a + x*b to the clumsiness of doing the same thing using a raw OO notation."
msgstr ""
"(a) Para algunas operaciones, la notación prefija simplemente se lee mejor "
"que la posfija: las operaciones prefijas (¡e infijas!) tienen una larga "
"tradición en las matemáticas, que prefieren notaciones donde lo visual ayuda "
"al matemático a pensar en un problema. Compara lo fácil que es reescribir "
"una fórmula como x*(a+b) en x*a + x*b con la torpeza de hacer lo mismo "
"usando una notación de programación orientada a objetos sin procesar."

#: ../../faq/design.rst:180
msgid ""
"(b) When I read code that says len(x) I *know* that it is asking for the "
"length of something. This tells me two things: the result is an integer, and "
"the argument is some kind of container. To the contrary, when I read x."
"len(), I have to already know that x is some kind of container implementing "
"an interface or inheriting from a class that has a standard len(). Witness "
"the confusion we occasionally have when a class that is not implementing a "
"mapping has a get() or keys() method, or something that isn't a file has a "
"write() method."
msgstr ""
"(b) Cuando leo código que dice len(x) *sé* que está pidiendo la longitud de "
"algo. Esto me dice dos cosas: el resultado es un entero y el argumento es "
"algún tipo de contenedor. Por el contrario, cuando leo x.len(), ya tengo que "
"saber que x es algún tipo de contenedor que implementa una interfaz o hereda "
"de una clase que tiene un len() estándar. Observa la confusión que "
"ocasionalmente tenemos cuando una clase que no implementa un mapeo tiene un "
"método get() o keys(), o cuando algo que no es un archivo tiene un método "
"write()."

#: ../../faq/design.rst:207
msgid "https://mail.python.org/pipermail/python-3000/2006-November/004643.html"
msgstr ""
"https://mail.python.org/pipermail/python-3000/2006-November/004643.html"

#: ../../faq/design.rst:193
msgid "Why is join() a string method instead of a list or tuple method?"
msgstr ""
"¿Por qué join() es un método de cadena en lugar de un método de lista o "
"tupla?"

#: ../../faq/design.rst:195
msgid ""
"Strings became much more like other standard types starting in Python 1.6, "
"when methods were added which give the same functionality that has always "
"been available using the functions of the string module.  Most of these new "
"methods have been widely accepted, but the one which appears to make some "
"programmers feel uncomfortable is::"
msgstr ""
"Las cadenas se volvieron mucho más parecidas a otros tipos estándar a partir "
"de Python 1.6, cuando se añadieron métodos que proporcionan la misma "
"funcionalidad que siempre ha estado disponible utilizando las funciones del "
"módulo string.  La mayoría de estos nuevos métodos han sido ampliamente "
"aceptados, pero el que parece incomodar a algunos programadores es::"

#: ../../faq/design.rst:203
msgid "which gives the result::"
msgstr "que da el resultado::"

#: ../../faq/design.rst:207
msgid "There are two common arguments against this usage."
msgstr "Hay dos argumentos comunes en contra de este uso."

#: ../../faq/design.rst:209
msgid ""
"The first runs along the lines of: \"It looks really ugly using a method of "
"a string literal (string constant)\", to which the answer is that it might, "
"but a string literal is just a fixed value. If the methods are to be allowed "
"on names bound to strings there is no logical reason to make them "
"unavailable on literals."
msgstr ""
"La primera se ejecuta a lo largo de las líneas de: \"Se ve realmente feo "
"usando un método de un literal de cadena (constante de cadena)\", a lo que "
"la respuesta es que podría ser, pero un literal de cadena es solo un valor "
"fijo. Si se permite que los métodos estén disponibles en los nombres "
"vinculados a cadenas, no hay una razón lógica para hacerlos no disponibles "
"en literales."

#: ../../faq/design.rst:215
msgid ""
"The second objection is typically cast as: \"I am really telling a sequence "
"to join its members together with a string constant\".  Sadly, you aren't.  "
"For some reason there seems to be much less difficulty with having :meth:"
"`~str.split` as a string method, since in that case it is easy to see that ::"
msgstr ""
"La segunda objeción se suele presentar como: \"Realmente estoy diciendo a "
"una secuencia que una sus miembros con una constante de cadena\". "
"Lamentablemente, no lo estás haciendo. Por alguna razón parece haber mucha "
"menos dificultad con tener :meth:`~str.split` como un método de cadena, ya "
"que en ese caso es fácil ver que ::"

#: ../../faq/design.rst:222
msgid ""
"is an instruction to a string literal to return the substrings delimited by "
"the given separator (or, by default, arbitrary runs of white space)."
msgstr ""
"es una instrucción a un literal de cadena para que devuelva las subcadenas "
"delimitadas por el separador dado (o, por defecto, tramos arbitrarios de "
"espacio en blanco)."

#: ../../faq/design.rst:225
msgid ""
":meth:`~str.join` is a string method because in using it you are telling the "
"separator string to iterate over a sequence of strings and insert itself "
"between adjacent elements.  This method can be used with any argument which "
"obeys the rules for sequence objects, including any new classes you might "
"define yourself. Similar methods exist for bytes and bytearray objects."
msgstr ""
":meth:`~str.join` es un método de cadena porque al usarlo estás indicando a "
"la cadena separadora que itere sobre una secuencia de cadenas e inserte "
"entre sí misma entre elementos adyacentes. Este método se puede utilizar con "
"cualquier argumento que cumpla las reglas para objetos de secuencia, "
"incluyendo cualquier nueva clase que puedas definir tú mismo. Métodos "
"similares existen para objetos de bytes y bytearray."

#: ../../faq/design.rst:233
msgid "How fast are exceptions?"
msgstr "¿Cómo de rápidas son las excepciones?"

#: ../../faq/design.rst:235
msgid ""
"A try/except block is extremely efficient if no exceptions are raised.  "
"Actually catching an exception is expensive.  In versions of Python prior to "
"2.0 it was common to use this idiom::"
msgstr ""
"Un bloque try/except es extremadamente eficiente si no se producen "
"excepciones. En realidad, capturar una excepción es costoso. En versiones de "
"Python anteriores a 2.0 era común utilizar esta idiomática:"

#: ../../faq/design.rst:245
msgid ""
"This only made sense when you expected the dict to have the key almost all "
"the time.  If that wasn't the case, you coded it like this::"
msgstr ""
"Esto solo tenía sentido cuando esperabas que el diccionario tuviera la clave "
"casi todo el tiempo. Si ese no era el caso, lo codificaste así:"

#: ../../faq/design.rst:253
msgid ""
"For this specific case, you could also use ``value = dict.setdefault(key, "
"getvalue(key))``, but only if the ``getvalue()`` call is cheap enough "
"because it is evaluated in all cases."
msgstr ""
"Para este caso concreto, también podría utilizar ``value = dict."
"setdefault(key, getvalue(key))``, pero sólo si la llamada a ``getvalue()`` "
"es lo suficientemente barata, ya que se evalúa en todos los casos."

#: ../../faq/design.rst:259
msgid "Why isn't there a switch or case statement in Python?"
msgstr "¿Por qué no existe la sentencia switch o case en Python?"

#: ../../faq/design.rst:261
msgid ""
"You can do this easily enough with a sequence of ``if... elif... elif... "
"else``. For literal values, or constants within a namespace, you can also "
"use a ``match ... case`` statement."
msgstr ""
"Puede hacerlo fácilmente con una secuencia de ``if... elif... elif... "
"else``. Para valores literales, o constantes dentro de un espacio de "
"nombres, también puede utilizar una sentencia ``match ... case``."

#: ../../faq/design.rst:265
msgid ""
"For cases where you need to choose from a very large number of "
"possibilities, you can create a dictionary mapping case values to functions "
"to call.  For example::"
msgstr ""
"Para los casos en los que tenga que elegir entre un gran número de "
"posibilidades, puede crear un diccionario que asigne los valores de los "
"casos a las funciones a las que hay que llamar.  Por ejemplo::"

#: ../../faq/design.rst:276
msgid ""
"For calling methods on objects, you can simplify yet further by using the :"
"func:`getattr` built-in to retrieve methods with a particular name::"
msgstr ""
"Para llamar a los métodos de los objetos, puede simplificar aún más el uso "
"de la :func:`getattr` incorporado para recuperar los métodos con un nombre "
"en particular::"

#: ../../faq/design.rst:288
msgid ""
"It's suggested that you use a prefix for the method names, such as "
"``visit_`` in this example.  Without such a prefix, if values are coming "
"from an untrusted source, an attacker would be able to call any method on "
"your object."
msgstr ""
"Se sugiere utilizar un prefijo para los nombres de los métodos, como "
"``visit_`` en este ejemplo.  Sin este prefijo, si los valores proceden de "
"una fuente no fiable, un atacante podría llamar a cualquier método de tu "
"objeto."

#: ../../faq/design.rst:294
msgid ""
"Can't you emulate threads in the interpreter instead of relying on an OS-"
"specific thread implementation?"
msgstr ""
"¿No se pueden emular hilos en el intérprete en lugar de depender de una "
"implementación de hilos específica del sistema operativo?"

#: ../../faq/design.rst:296
msgid ""
"Answer 1: Unfortunately, the interpreter pushes at least one C stack frame "
"for each Python stack frame.  Also, extensions can call back into Python at "
"almost random moments.  Therefore, a complete threads implementation "
"requires thread support for C."
msgstr ""
"Respuesta 1: Desafortunadamente, el intérprete empuja al menos un marco de "
"pila de C por cada marco de pila de Python.  Además, las extensiones pueden "
"volver a llamar a Python en momentos casi aleatorios.  Por lo tanto, una "
"implementación completa de hilos requiere soporte de hilos para C."

#: ../../faq/design.rst:301
msgid ""
"Answer 2: Fortunately, there is `Stackless Python <https://github.com/"
"stackless-dev/stackless/wiki>`_, which has a completely redesigned "
"interpreter loop that avoids the C stack."
msgstr ""
"Respuesta 2: Afortunadamente, existe `Stackless Python <https://github.com/"
"stackless-dev/stackless/wiki>`_,  que tiene un bucle de interpretación "
"completamente rediseñado que evita la pila C."

#: ../../faq/design.rst:306
msgid "Why can't lambda expressions contain statements?"
msgstr "¿Por qué las expresiones lambda no pueden contener declaraciones?"

#: ../../faq/design.rst:308
msgid ""
"Python lambda expressions cannot contain statements because Python's "
"syntactic framework can't handle statements nested inside expressions.  "
"However, in Python, this is not a serious problem.  Unlike lambda forms in "
"other languages, where they add functionality, Python lambdas are only a "
"shorthand notation if you're too lazy to define a function."
msgstr ""
"Las expresiones lambda de Python no pueden contener declaraciones porque el "
"marco sintáctico de Python no puede manejar declaraciones anidadas dentro de "
"expresiones. Sin embargo, en Python, esto no es un problema grave. A "
"diferencia de las formas lambda en otros lenguajes, donde agregan "
"funcionalidad, las lambdas de Python son solo una notación abreviada si eres "
"demasiado perezoso para definir una función."

#: ../../faq/design.rst:314
msgid ""
"Functions are already first class objects in Python, and can be declared in "
"a local scope.  Therefore the only advantage of using a lambda instead of a "
"locally defined function is that you don't need to invent a name for the "
"function -- but that's just a local variable to which the function object "
"(which is exactly the same type of object that a lambda expression yields) "
"is assigned!"
msgstr ""
"Las funciones ya son objetos de primera clase en Python, y pueden declararse "
"en un ámbito local.  Por tanto, la única ventaja de usar una lambda en lugar "
"de una función definida localmente es que no necesitas inventar un nombre "
"para la función -- ¡pero eso es sólo una variable local a la que se asigna "
"el objeto función (que es exactamente el mismo tipo de objeto que produce "
"una expresión lambda)!"

#: ../../faq/design.rst:322
msgid "Can Python be compiled to machine code, C or some other language?"
msgstr "¿Se puede compilar Python a código máquina, C o algún otro lenguaje?"

#: ../../faq/design.rst:324
msgid ""
"`Cython <https://cython.org/>`_ compiles a modified version of Python with "
"optional annotations into C extensions.  `Nuitka <https://www.nuitka.net/>`_ "
"is an up-and-coming compiler of Python into C++ code, aiming to support the "
"full Python language."
msgstr ""
"Cython <https://cython.org/>`_ compila una versión modificada de Python con "
"anotaciones opcionales en extensiones C.  Nuitka <https://www.nuitka.net/>`_ "
"es un prometedor compilador de Python en código C++, cuyo objetivo es "
"soportar el lenguaje Python completo."

#: ../../faq/design.rst:331
msgid "How does Python manage memory?"
msgstr "¿Cómo gestiona Python la memoria?"

#: ../../faq/design.rst:333
msgid ""
"The details of Python memory management depend on the implementation.  The "
"standard implementation of Python, :term:`CPython`, uses reference counting "
"to detect inaccessible objects, and another mechanism to collect reference "
"cycles, periodically executing a cycle detection algorithm which looks for "
"inaccessible cycles and deletes the objects involved. The :mod:`gc` module "
"provides functions to perform a garbage collection, obtain debugging "
"statistics, and tune the collector's parameters."
msgstr ""
"Los detalles de la gestión de memoria de Python dependen de la "
"implementación.  La implementación estándar de Python, :term:`CPython`, "
"utiliza el recuento de referencias para detectar objetos inaccesibles, y "
"otro mecanismo para recoger ciclos de referencia, ejecutando periódicamente "
"un algoritmo de detección de ciclos que busca ciclos inaccesibles y borra "
"los objetos implicados. El módulo :mod:`gc` proporciona funciones para "
"realizar una recolección de basura, obtener estadísticas de depuración y "
"ajustar los parámetros del recolector."

#: ../../faq/design.rst:341
msgid ""
"Other implementations (such as `Jython <https://www.jython.org>`_ or `PyPy "
"<https://www.pypy.org>`_), however, can rely on a different mechanism such "
"as a full-blown garbage collector.  This difference can cause some subtle "
"porting problems if your Python code depends on the behavior of the "
"reference counting implementation."
msgstr ""
"Otras implementaciones (como `Jython <https://www.jython.org>`_ o `PyPy "
"<https://www.pypy.org>`_), sin embargo, pueden confiar en un mecanismo "
"diferente como un recolector de basura completo.  Esta diferencia puede "
"causar algunos problemas sutiles de portabilidad si tu código Python depende "
"del comportamiento de la implementación del conteo de referencias."

#: ../../faq/design.rst:347
msgid ""
"In some Python implementations, the following code (which is fine in "
"CPython) will probably run out of file descriptors::"
msgstr ""
"En algunas implementaciones de Python, el siguiente código (que está bien en "
"CPython) probablemente se quedará sin descriptores de archivo::"

#: ../../faq/design.rst:354
msgid ""
"Indeed, using CPython's reference counting and destructor scheme, each new "
"assignment to *f* closes the previous file.  With a traditional GC, however, "
"those file objects will only get collected (and closed) at varying and "
"possibly long intervals."
msgstr ""
"De hecho, usando el esquema de conteo de referencias y destructor de "
"CPython, cada nueva asignación a *f* cierra el archivo anterior.  Con un GC "
"tradicional, sin embargo, esos objetos de archivo sólo serán recogidos (y "
"cerrados) en intervalos variables y posiblemente largos."

#: ../../faq/design.rst:359
msgid ""
"If you want to write code that will work with any Python implementation, you "
"should explicitly close the file or use the :keyword:`with` statement; this "
"will work regardless of memory management scheme::"
msgstr ""
"Si quieres escribir código que funcione con cualquier implementación de "
"Python, debes cerrar explícitamente el archivo o utilizar la sentencia :"
"keyword:`with`; esto funcionará independientemente del esquema de gestión de "
"memoria::"

#: ../../faq/design.rst:369
msgid "Why doesn't CPython use a more traditional garbage collection scheme?"
msgstr ""
"¿Por qué CPython no utiliza un esquema de recolección de basura más "
"tradicional?"

#: ../../faq/design.rst:371
msgid ""
"For one thing, this is not a C standard feature and hence it's not portable. "
"(Yes, we know about the Boehm GC library.  It has bits of assembler code for "
"*most* common platforms, not for all of them, and although it is mostly "
"transparent, it isn't completely transparent; patches are required to get "
"Python to work with it.)"
msgstr ""
"Por un lado, no es una característica estándar de C y, por tanto, no es "
"portable. (Sí, conocemos la biblioteca Boehm GC.  Tiene trozos de código "
"ensamblador para *la mayoría* de las plataformas comunes, no para todas, y "
"aunque es transparente en su mayor parte, no lo es del todo; se necesitan "
"parches para que Python funcione con ella)."

#: ../../faq/design.rst:377
msgid ""
"Traditional GC also becomes a problem when Python is embedded into other "
"applications.  While in a standalone Python it's fine to replace the "
"standard malloc() and free() with versions provided by the GC library, an "
"application embedding Python may want to have its *own* substitute for "
"malloc() and free(), and may not want Python's.  Right now, CPython works "
"with anything that implements malloc() and free() properly."
msgstr ""
"La GC tradicional también se convierte en un problema cuando Python se "
"incrusta en otras aplicaciones.  Mientras que en un Python autónomo está "
"bien reemplazar las funciones estándar malloc() y free() con versiones "
"provistas por la librería GC, una aplicación que incruste Python puede "
"querer tener su *propio* sustituto para malloc() y free(), y puede no querer "
"el de Python.  Ahora mismo, CPython funciona con cualquier cosa que "
"implemente malloc() y free() correctamente."

#: ../../faq/design.rst:386
msgid "Why isn't all memory freed when CPython exits?"
msgstr "¿Por qué no se libera toda la memoria cuando CPython se cierra?"

#: ../../faq/design.rst:388
msgid ""
"Objects referenced from the global namespaces of Python modules are not "
"always deallocated when Python exits.  This may happen if there are circular "
"references.  There are also certain bits of memory that are allocated by the "
"C library that are impossible to free (e.g. a tool like Purify will complain "
"about these).  Python is, however, aggressive about cleaning up memory on "
"exit and does try to destroy every single object."
msgstr ""
"Los objetos referenciados desde los espacios de nombres globales de los "
"módulos de Python no siempre se liberan cuando Python se cierra. Esto puede "
"ocurrir si hay referencias circulares. También hay ciertos fragmentos de "
"memoria que son asignados por la biblioteca C siendo imposibles de liberar "
"(por ejemplo, una herramienta como Purify se quejará de esto). Sin embargo, "
"Python es agresivo en la limpieza de memoria al salir e intenta destruir "
"cada objeto individual."

#: ../../faq/design.rst:395
msgid ""
"If you want to force Python to delete certain things on deallocation use "
"the :mod:`atexit` module to run a function that will force those deletions."
msgstr ""
"Si quieres forzar a Python a eliminar ciertas cosas en la desasignación, "
"utiliza el módulo :mod:`atexit` para ejecutar una función que fuerce esas "
"eliminaciones."

#: ../../faq/design.rst:400
msgid "Why are there separate tuple and list data types?"
msgstr "¿Por qué existen tipos de datos separados para tuplas y listas?"

#: ../../faq/design.rst:402
msgid ""
"Lists and tuples, while similar in many respects, are generally used in "
"fundamentally different ways.  Tuples can be thought of as being similar to "
"Pascal records or C structs; they're small collections of related data which "
"may be of different types which are operated on as a group.  For example, a "
"Cartesian coordinate is appropriately represented as a tuple of two or three "
"numbers."
msgstr ""
"Las listas y las tuplas, aunque similares en muchos aspectos, se utilizan de "
"manera fundamentalmente diferente. Las tuplas pueden considerarse similares "
"a los registros de Pascal o a las estructuras de C; son pequeñas colecciones "
"de datos relacionados que pueden ser de diferentes tipos y se operan como un "
"grupo. Por ejemplo, una coordenada cartesiana se representa adecuadamente "
"como una tupla de dos o tres números."

#: ../../faq/design.rst:409
msgid ""
"Lists, on the other hand, are more like arrays in other languages.  They "
"tend to hold a varying number of objects all of which have the same type and "
"which are operated on one-by-one.  For example, ``os.listdir('.')`` returns "
"a list of strings representing the files in the current directory.  "
"Functions which operate on this output would generally not break if you "
"added another file or two to the directory."
msgstr ""
"En cambio, las listas se parecen más a las matrices de otros lenguajes.  "
"Suelen contener un número variable de objetos, todos del mismo tipo, sobre "
"los que se opera uno a uno.  Por ejemplo, ``os.listdir('.')`` devuelve una "
"lista de cadenas que representan los archivos del directorio actual.  Las "
"funciones que operan sobre esta salida generalmente no se romperían si "
"añadieras uno o dos archivos más al directorio."

#: ../../faq/design.rst:416
msgid ""
"Tuples are immutable, meaning that once a tuple has been created, you can't "
"replace any of its elements with a new value.  Lists are mutable, meaning "
"that you can always change a list's elements.  Only immutable elements can "
"be used as dictionary keys, and hence only tuples and not lists can be used "
"as keys."
msgstr ""
"Las tuplas son inmutables, es decir, una vez creada una tupla, no puedes "
"sustituir ninguno de sus elementos por un nuevo valor.  Las listas son "
"mutables, lo que significa que siempre puedes cambiar los elementos de una "
"lista.  Sólo los elementos inmutables pueden usarse como claves del "
"diccionario, y por lo tanto sólo las tuplas y no las listas pueden usarse "
"como claves."

#: ../../faq/design.rst:423
msgid "How are lists implemented in CPython?"
msgstr "¿Cómo se implementan las listas en CPython?"

#: ../../faq/design.rst:425
msgid ""
"CPython's lists are really variable-length arrays, not Lisp-style linked "
"lists. The implementation uses a contiguous array of references to other "
"objects, and keeps a pointer to this array and the array's length in a list "
"head structure."
msgstr ""
"Las listas de CPython son realmente matrices de longitud variable, no listas "
"enlazadas al estilo Lisp. La implementación utiliza un array contiguo de "
"referencias a otros objetos, y mantiene un puntero a este array y la "
"longitud del array en una estructura de cabecera de lista."

#: ../../faq/design.rst:429
msgid ""
"This makes indexing a list ``a[i]`` an operation whose cost is independent "
"of the size of the list or the value of the index."
msgstr ""
"Esto hace que indexar una lista ``a[i]`` sea una operación cuyo coste es "
"independiente del tamaño de la lista o del valor del índice."

#: ../../faq/design.rst:432
msgid ""
"When items are appended or inserted, the array of references is resized.  "
"Some cleverness is applied to improve the performance of appending items "
"repeatedly; when the array must be grown, some extra space is allocated so "
"the next few times don't require an actual resize."
msgstr ""
"Cuando se añaden o insertan elementos, se redimensiona la matriz de "
"referencias.  Para mejorar el rendimiento de la adición repetida de "
"elementos, se aplican algunas técnicas inteligentes: cuando la matriz debe "
"crecer, se asigna espacio adicional para que las siguientes veces no sea "
"necesario redimensionarla."

#: ../../faq/design.rst:439
msgid "How are dictionaries implemented in CPython?"
msgstr "¿Cómo se implementan los diccionarios en CPython?"

#: ../../faq/design.rst:441
msgid ""
"CPython's dictionaries are implemented as resizable hash tables.  Compared "
"to B-trees, this gives better performance for lookup (the most common "
"operation by far) under most circumstances, and the implementation is "
"simpler."
msgstr ""
"Los diccionarios de CPython se implementan como tablas hash "
"redimensionables. En comparación con los árboles B, esto proporciona un "
"mejor rendimiento para la búsqueda (la operación más común con diferencia) "
"en la mayoría de las circunstancias, y la implementación es más sencilla."

#: ../../faq/design.rst:445
msgid ""
"Dictionaries work by computing a hash code for each key stored in the "
"dictionary using the :func:`hash` built-in function.  The hash code varies "
"widely depending on the key and a per-process seed; for example, \"Python\" "
"could hash to -539294296 while \"python\", a string that differs by a single "
"bit, could hash to 1142331976.  The hash code is then used to calculate a "
"location in an internal array where the value will be stored.  Assuming that "
"you're storing keys that all have different hash values, this means that "
"dictionaries take constant time -- O(1), in Big-O notation -- to retrieve a "
"key."
msgstr ""
"Los diccionarios funcionan calculando un código hash para cada clave "
"almacenada en el diccionario utilizando la función incorporada :func:"
"`hash`.  El código hash varía ampliamente dependiendo de la clave y de una "
"semilla por proceso; por ejemplo, \"Python\" podría tener el hash -539294296 "
"mientras que \"python\", una cadena que difiere en un solo bit, podría tener "
"el hash 1142331976. El código hash se utiliza entonces para calcular una "
"ubicación en una matriz interna donde se almacenará el valor. Suponiendo que "
"se almacenen claves con valores hash diferentes, los diccionarios tardan un "
"tiempo constante -- O(1), en notación Big-O -- en recuperar una clave."

#: ../../faq/design.rst:456
msgid "Why must dictionary keys be immutable?"
msgstr "¿Por qué deben ser inmutables las claves de un diccionario?"

#: ../../faq/design.rst:458
msgid ""
"The hash table implementation of dictionaries uses a hash value calculated "
"from the key value to find the key.  If the key were a mutable object, its "
"value could change, and thus its hash could also change.  But since whoever "
"changes the key object can't tell that it was being used as a dictionary "
"key, it can't move the entry around in the dictionary.  Then, when you try "
"to look up the same object in the dictionary it won't be found because its "
"hash value is different. If you tried to look up the old value it wouldn't "
"be found either, because the value of the object found in that hash bin "
"would be different."
msgstr ""
"La implementación de tablas hash de los diccionarios utiliza un valor hash "
"calculado a partir del valor clave para encontrar la clave. Si la clave "
"fuera un objeto mutable, su valor podría cambiar y, por lo tanto, su hash "
"también podría cambiar. Pero dado que quien cambia el objeto clave no puede "
"saber que se está utilizando como clave de diccionario, no puede mover la "
"entrada en el diccionario. Entonces, cuando intentas buscar el mismo objeto "
"en el diccionario, no se encontrará porque su valor hash es diferente. Si "
"intentaras buscar el valor antiguo, tampoco se encontraría, porque el valor "
"del objeto encontrado en ese contenedor hash sería diferente."

#: ../../faq/design.rst:467
msgid ""
"If you want a dictionary indexed with a list, simply convert the list to a "
"tuple first; the function ``tuple(L)`` creates a tuple with the same entries "
"as the list ``L``.  Tuples are immutable and can therefore be used as "
"dictionary keys."
msgstr ""
"Si desea un diccionario indexado con una lista, simplemente convierta "
"primero la lista en una tupla; la función ``tuple(L)`` crea una tupla con "
"las mismas entradas que la lista ``L``.  Las tuplas son inmutables y, por "
"tanto, pueden utilizarse como claves de diccionario."

#: ../../faq/design.rst:471
msgid "Some unacceptable solutions that have been proposed:"
msgstr "Se han propuesto algunas soluciones inaceptables:"

#: ../../faq/design.rst:473
msgid ""
"Hash lists by their address (object ID).  This doesn't work because if you "
"construct a new list with the same value it won't be found; e.g.::"
msgstr ""
"Listas hash por su dirección (ID de objeto).  Esto no funciona porque si "
"construyes una nueva lista con el mismo valor no se encontrará; por ejemplo::"

#: ../../faq/design.rst:479
msgid ""
"would raise a :exc:`KeyError` exception because the id of the ``[1, 2]`` "
"used in the second line differs from that in the first line.  In other "
"words, dictionary keys should be compared using ``==``, not using :keyword:"
"`is`."
msgstr ""
"lanzaría una excepción :exc:`KeyError` porque el id del ``[1, 2]`` utilizado "
"en la segunda línea difiere del de la primera línea.  En otras palabras, las "
"claves del diccionario deben compararse utilizando ``==``, no utilizando :"
"keyword:`is`."

#: ../../faq/design.rst:483
msgid ""
"Make a copy when using a list as a key.  This doesn't work because the list, "
"being a mutable object, could contain a reference to itself, and then the "
"copying code would run into an infinite loop."
msgstr ""
"Hacer una copia cuando se utiliza una lista como clave.  Esto no funciona "
"porque la lista, al ser un objeto mutable, podría contener una referencia a "
"sí misma, y entonces el código de copia entraría en un bucle infinito."

#: ../../faq/design.rst:487
msgid ""
"Allow lists as keys but tell the user not to modify them.  This would allow "
"a class of hard-to-track bugs in programs when you forgot or modified a list "
"by accident. It also invalidates an important invariant of dictionaries: "
"every value in ``d.keys()`` is usable as a key of the dictionary."
msgstr ""
"Permitir listas como claves pero decirle al usuario que no las modifique.  "
"Esto permitiría una clase de errores difíciles de rastrear en los programas "
"cuando se olvida o modifica una lista por accidente. También invalida una "
"invariante importante de los diccionarios: cada valor en ``d.keys()`` es "
"utilizable como clave del diccionario."

#: ../../faq/design.rst:492
msgid ""
"Mark lists as read-only once they are used as a dictionary key.  The problem "
"is that it's not just the top-level object that could change its value; you "
"could use a tuple containing a list as a key.  Entering anything as a key "
"into a dictionary would require marking all objects reachable from there as "
"read-only -- and again, self-referential objects could cause an infinite "
"loop."
msgstr ""
"Marcar las listas como de solo lectura una vez que se utilizan como clave de "
"un diccionario. El problema es que no solo el objeto de nivel superior "
"podría cambiar su valor; se podría utilizar una tupla que contenga una lista "
"como clave. Ingresar cualquier cosa como clave en un diccionario requeriría "
"marcar todos los objetos alcanzables desde allí como de solo lectura, y "
"nuevamente, los objetos autorreferenciales podrían causar un bucle infinito."

#: ../../faq/design.rst:498
msgid ""
"There is a trick to get around this if you need to, but use it at your own "
"risk: You can wrap a mutable structure inside a class instance which has "
"both a :meth:`__eq__` and a :meth:`__hash__` method.  You must then make "
"sure that the hash value for all such wrapper objects that reside in a "
"dictionary (or other hash based structure), remain fixed while the object is "
"in the dictionary (or other structure). ::"
msgstr ""
"Hay un truco para evitar esto si es necesario, pero úsalo bajo tu propio "
"riesgo: puedes envolver una estructura mutable dentro de una instancia de "
"clase que tenga tanto un método :meth:`__eq__` como un método :meth:"
"`__hash__`. Luego debes asegurarte de que el valor hash para todos los "
"objetos envoltorio que residen en un diccionario (u otra estructura basada "
"en hash), permanezca fijo mientras el objeto esté en el diccionario (u otra "
"estructura). ::"

#: ../../faq/design.rst:522
msgid ""
"Note that the hash computation is complicated by the possibility that some "
"members of the list may be unhashable and also by the possibility of "
"arithmetic overflow."
msgstr ""
"Tenga en cuenta que el cálculo del hash se complica por la posibilidad de "
"que algunos miembros de la lista no sean hashables y también por la "
"posibilidad de desbordamiento aritmético."

#: ../../faq/design.rst:526
msgid ""
"Furthermore it must always be the case that if ``o1 == o2`` (ie ``o1."
"__eq__(o2) is True``) then ``hash(o1) == hash(o2)`` (ie, ``o1.__hash__() == "
"o2.__hash__()``), regardless of whether the object is in a dictionary or "
"not.  If you fail to meet these restrictions dictionaries and other hash "
"based structures will misbehave."
msgstr ""
"Además, siempre debe darse el caso de que si ``o1 == o2`` (es decir, ``o1."
"__eq__(o2) is True``) entonces ``hash(o1) == hash(o2)`` (es decir, ``o1."
"__hash__() == o2.__hash__()``), independientemente de si el objeto está en "
"un diccionario o no.  Si no se cumplen estas restricciones, los diccionarios "
"y otras estructuras basadas en hash se comportarán mal."

#: ../../faq/design.rst:531
msgid ""
"In the case of ListWrapper, whenever the wrapper object is in a dictionary "
"the wrapped list must not change to avoid anomalies.  Don't do this unless "
"you are prepared to think hard about the requirements and the consequences "
"of not meeting them correctly.  Consider yourself warned."
msgstr ""
"En el caso de ListWrapper, cada vez que el objeto envoltorio esté en un "
"diccionario, la lista envuelta no debe cambiar para evitar anomalías. No "
"hagas esto a menos que estés preparado para pensar detenidamente en los "
"requisitos y las consecuencias de no cumplirlos correctamente. Date por "
"avisado."

#: ../../faq/design.rst:538
msgid "Why doesn't list.sort() return the sorted list?"
msgstr "¿Por qué list.sort() no devuelve la lista ordenada?"

#: ../../faq/design.rst:540
msgid ""
"In situations where performance matters, making a copy of the list just to "
"sort it would be wasteful. Therefore, :meth:`list.sort` sorts the list in "
"place. In order to remind you of that fact, it does not return the sorted "
"list.  This way, you won't be fooled into accidentally overwriting a list "
"when you need a sorted copy but also need to keep the unsorted version "
"around."
msgstr ""
"En situaciones donde el rendimiento es importante, hacer una copia de la "
"lista solo para ordenarla sería un desperdicio. Por lo tanto, :meth:`list."
"sort` ordena la lista en su lugar. Para recordarte ese hecho, no devuelve la "
"lista ordenada. De esta manera, no te engañarás al sobrescribir "
"accidentalmente una lista cuando necesites una copia ordenada pero también "
"necesites mantener la versión desordenada."

#: ../../faq/design.rst:546
msgid ""
"If you want to return a new list, use the built-in :func:`sorted` function "
"instead.  This function creates a new list from a provided iterable, sorts "
"it and returns it.  For example, here's how to iterate over the keys of a "
"dictionary in sorted order::"
msgstr ""
"Si quieres devolver una nueva lista, utiliza la función incorporada :func:"
"`sorted` en su lugar. Esta función crea una nueva lista a partir de un "
"iterable proporcionado, la ordena y la devuelve. Por ejemplo, así es como se "
"itera sobre las claves de un diccionario en orden ordenado:"

#: ../../faq/design.rst:556
msgid "How do you specify and enforce an interface spec in Python?"
msgstr ""
"¿Cómo se especifica y se hace cumplir una especificación de interfaz en "
"Python?"

#: ../../faq/design.rst:558
msgid ""
"An interface specification for a module as provided by languages such as C++ "
"and Java describes the prototypes for the methods and functions of the "
"module.  Many feel that compile-time enforcement of interface specifications "
"helps in the construction of large programs."
msgstr ""
"Una especificación de interfaz para un módulo, tal como se proporciona en "
"lenguajes como C++ y Java, describe los prototipos de los métodos y "
"funciones del módulo. Muchos consideran que la aplicación de la "
"especificación de interfaz en tiempo de compilación ayuda en la construcción "
"de programas grandes."

#: ../../faq/design.rst:563
msgid ""
"Python 2.6 adds an :mod:`abc` module that lets you define Abstract Base "
"Classes (ABCs).  You can then use :func:`isinstance` and :func:`issubclass` "
"to check whether an instance or a class implements a particular ABC.  The :"
"mod:`collections.abc` module defines a set of useful ABCs such as :class:"
"`~collections.abc.Iterable`, :class:`~collections.abc.Container`, and :class:"
"`~collections.abc.MutableMapping`."
msgstr ""
"Python 2.6 añade un módulo :mod:`abc` que te permite definir Clases Base "
"Abstractas (ABCs). Luego puedes usar :func:`isinstance` y :func:`issubclass` "
"para comprobar si una instancia o una clase implementa una determinada ABC. "
"El módulo :mod:`collections.abc` define un conjunto de útiles ABCs como :"
"class:`~collections.abc.Iterable`, :class:`~collections.abc.Container` y :"
"class:`~collections.abc.MutableMapping`."

#: ../../faq/design.rst:570
msgid ""
"For Python, many of the advantages of interface specifications can be "
"obtained by an appropriate test discipline for components."
msgstr ""
"Para Python, muchos de los beneficios de las especificaciones de interfaz se "
"pueden obtener mediante una disciplina de prueba adecuada para los "
"componentes."

#: ../../faq/design.rst:573
msgid ""
"A good test suite for a module can both provide a regression test and serve "
"as a module interface specification and a set of examples.  Many Python "
"modules can be run as a script to provide a simple \"self test.\"  Even "
"modules which use complex external interfaces can often be tested in "
"isolation using trivial \"stub\" emulations of the external interface.  The :"
"mod:`doctest` and :mod:`unittest` modules or third-party test frameworks can "
"be used to construct exhaustive test suites that exercise every line of code "
"in a module."
msgstr ""
"Un buen conjunto de pruebas para un módulo puede proporcionar tanto una "
"prueba de regresión como servir como una especificación de interfaz de "
"módulo y un conjunto de ejemplos. Muchos módulos de Python se pueden "
"ejecutar como un script para proporcionar una \"auto prueba\" simple. "
"Incluso los módulos que utilizan interfaces externas complejas a menudo se "
"pueden probar de forma aislada utilizando emulaciones triviales de \"stub\" "
"de la interfaz externa. Los módulos :mod:`doctest` y :mod:`unittest` o "
"marcos de pruebas de terceros se pueden utilizar para construir conjuntos de "
"pruebas exhaustivos que ejerciten cada línea de código en un módulo."

#: ../../faq/design.rst:581
msgid ""
"An appropriate testing discipline can help build large complex applications "
"in Python as well as having interface specifications would.  In fact, it can "
"be better because an interface specification cannot test certain properties "
"of a program.  For example, the :meth:`append` method is expected to add new "
"elements to the end of some internal list; an interface specification cannot "
"test that your :meth:`append` implementation will actually do this "
"correctly, but it's trivial to check this property in a test suite."
msgstr ""
"Una disciplina de pruebas adecuada puede ayudar a construir aplicaciones "
"grandes y complejas en Python, al igual que tener especificaciones de "
"interfaz. De hecho, puede ser mejor porque una especificación de interfaz no "
"puede probar ciertas propiedades de un programa. Por ejemplo, se espera que "
"el método :meth:`append` agregue nuevos elementos al final de una lista "
"interna; una especificación de interfaz no puede probar que tu "
"implementación de :meth:`append` realmente haga esto correctamente, pero es "
"trivial verificar esta propiedad en un conjunto de pruebas."

#: ../../faq/design.rst:589
msgid ""
"Writing test suites is very helpful, and you might want to design your code "
"to make it easily tested. One increasingly popular technique, test-driven "
"development, calls for writing parts of the test suite first, before you "
"write any of the actual code.  Of course Python allows you to be sloppy and "
"not write test cases at all."
msgstr ""
"Escribir conjuntos de pruebas es muy útil, y es posible que desees diseñar "
"tu código para que sea fácilmente probado. Una técnica cada vez más popular, "
"el desarrollo guiado por pruebas, consiste en escribir partes del conjunto "
"de pruebas primero, antes de escribir cualquier código real. Por supuesto, "
"Python te permite ser descuidado y no escribir casos de prueba en absoluto."

#: ../../faq/design.rst:597
msgid "Why is there no goto?"
msgstr "¿Por qué no hay goto?"

#: ../../faq/design.rst:599
msgid ""
"In the 1970s people realized that unrestricted goto could lead to messy "
"\"spaghetti\" code that was hard to understand and revise. In a high-level "
"language, it is also unneeded as long as there are ways to branch (in "
"Python, with ``if`` statements and ``or``, ``and``, and ``if-else`` "
"expressions) and loop (with ``while`` and ``for`` statements, possibly "
"containing ``continue`` and ``break``)."
msgstr ""
"En los años 1970, la gente se dio cuenta de que un goto sin restricciones "
"podía dar lugar a un código \"espagueti\" desordenado y difícil de entender "
"y revisar. En un lenguaje de alto nivel, tampoco es necesario siempre que "
"haya formas de bifurcarse (en Python, con sentencias ``if`` y expresiones "
"``or``, ``and``, y ``if-else`` ) y hacer bucles (con sentencias ``while`` y "
"``for``, que posiblemente contengan ``continue`` y ``break``)."

#: ../../faq/design.rst:606
msgid ""
"One can also use exceptions to provide a \"structured goto\" that works even "
"across function calls.  Many feel that exceptions can conveniently emulate "
"all reasonable uses of the \"go\" or \"goto\" constructs of C, Fortran, and "
"other languages.  For example::"
msgstr ""
"Uno también puede usar excepciones para proporcionar un \"goto "
"estructurado\" que funcione incluso a través de llamadas de función. Muchos "
"consideran que las excepciones pueden emular convenientemente todos los usos "
"razonables de las construcciones \"go\" o \"goto\" de C, Fortran y otros "
"lenguajes. Por ejemplo:"

#: ../../faq/design.rst:622
msgid ""
"This doesn't allow you to jump into the middle of a loop, but that's usually "
"considered an abuse of goto anyway.  Use sparingly."
msgstr ""
"Esto no te permite saltar al medio de un bucle, pero eso generalmente se "
"considera un abuso de goto de todos modos. Úsalo con moderación."

#: ../../faq/design.rst:627
msgid "Why can't raw strings (r-strings) end with a backslash?"
msgstr ""
"¿Por qué las cadenas sin formato (r-strings) no pueden terminar con una "
"barra invertida?"

#: ../../faq/design.rst:629
msgid ""
"More precisely, they can't end with an odd number of backslashes: the "
"unpaired backslash at the end escapes the closing quote character, leaving "
"an unterminated string."
msgstr ""
"Más precisamente, no pueden terminar con un número impar de barras "
"invertidas: la barra invertida sin pareja al final escapa al carácter de "
"comillas de cierre, dejando una cadena no terminada."

#: ../../faq/design.rst:633
msgid ""
"Raw strings were designed to ease creating input for processors (chiefly "
"regular expression engines) that want to do their own backslash escape "
"processing. Such processors consider an unmatched trailing backslash to be "
"an error anyway, so raw strings disallow that.  In return, they allow you to "
"pass on the string quote character by escaping it with a backslash.  These "
"rules work well when r-strings are used for their intended purpose."
msgstr ""
"Las cadenas sin procesar fueron diseñadas para facilitar la creación de "
"entradas para procesadores (principalmente motores de expresiones regulares) "
"que desean realizar su propio procesamiento de escape de barra invertida. "
"Dichos procesadores consideran que una barra invertida final sin "
"coincidencia es un error de todos modos, por lo que las cadenas sin procesar "
"no lo permiten. A cambio, te permiten pasar el carácter de comillas de la "
"cadena escapándolo con una barra invertida. Estas reglas funcionan bien "
"cuando se utilizan cadenas sin procesar para su propósito previsto."

#: ../../faq/design.rst:640
msgid ""
"If you're trying to build Windows pathnames, note that all Windows system "
"calls accept forward slashes too::"
msgstr ""
"Si estás intentando construir nombres de ruta de Windows, ten en cuenta que "
"todas las llamadas del sistema de Windows también aceptan barras diagonales "
"hacia adelante::"

#: ../../faq/design.rst:645
msgid ""
"If you're trying to build a pathname for a DOS command, try e.g. one of ::"
msgstr ""
"Si estás intentando construir una ruta de acceso para un comando de DOS, "
"prueba por ejemplo uno de ::"

#: ../../faq/design.rst:653
msgid "Why doesn't Python have a \"with\" statement for attribute assignments?"
msgstr ""
"¿Por qué Python no tiene una declaración \"with\" para asignaciones de "
"atributos?"

#: ../../faq/design.rst:655
msgid ""
"Python has a 'with' statement that wraps the execution of a block, calling "
"code on the entrance and exit from the block.  Some languages have a "
"construct that looks like this::"
msgstr ""
"Python tiene una declaración 'with' que envuelve la ejecución de un bloque, "
"llamando al código en la entrada y salida del bloque. Algunos lenguajes "
"tienen una construcción que se ve así::"

#: ../../faq/design.rst:663
msgid "In Python, such a construct would be ambiguous."
msgstr "En Python, tal construcción sería ambigua."

#: ../../faq/design.rst:665
msgid ""
"Other languages, such as Object Pascal, Delphi, and C++, use static types, "
"so it's possible to know, in an unambiguous way, what member is being "
"assigned to. This is the main point of static typing -- the compiler "
"*always* knows the scope of every variable at compile time."
msgstr ""
"Otros lenguajes, como Object Pascal, Delphi y C++, utilizan tipos estáticos, "
"por lo que es posible saber, de manera inequívoca, a qué miembro se está "
"asignando. Este es el punto principal de la tipificación estática: el "
"compilador siempre conoce el ámbito de cada variable en tiempo de "
"compilación."

#: ../../faq/design.rst:670
msgid ""
"Python uses dynamic types. It is impossible to know in advance which "
"attribute will be referenced at runtime. Member attributes may be added or "
"removed from objects on the fly. This makes it impossible to know, from a "
"simple reading, what attribute is being referenced: a local one, a global "
"one, or a member attribute?"
msgstr ""
"Python utiliza tipos dinámicos. Es imposible saber de antemano qué atributo "
"se referenciará en tiempo de ejecución. Los atributos de los miembros pueden "
"ser agregados o eliminados de los objetos sobre la marcha. Esto hace "
"imposible saber, a simple vista, qué atributo se está referenciando: uno "
"local, uno global o un atributo de miembro?"

#: ../../faq/design.rst:676
msgid "For instance, take the following incomplete snippet::"
msgstr "Por ejemplo, toma el siguiente fragmento incompleto:"

#: ../../faq/design.rst:682
msgid ""
"The snippet assumes that \"a\" must have a member attribute called \"x\".  "
"However, there is nothing in Python that tells the interpreter this. What "
"should happen if \"a\" is, let us say, an integer?  If there is a global "
"variable named \"x\", will it be used inside the with block?  As you see, "
"the dynamic nature of Python makes such choices much harder."
msgstr ""
"El fragmento asume que \"a\" debe tener un atributo de miembro llamado "
"\"x\". Sin embargo, no hay nada en Python que le indique al intérprete esto. "
"¿Qué debería suceder si \"a\" es, digamos, un entero? Si hay una variable "
"global llamada \"x\", ¿se usará dentro del bloque with? Como puedes ver, la "
"naturaleza dinámica de Python hace que estas elecciones sean mucho más "
"difíciles."

#: ../../faq/design.rst:688
msgid ""
"The primary benefit of \"with\" and similar language features (reduction of "
"code volume) can, however, easily be achieved in Python by assignment.  "
"Instead of::"
msgstr ""
"El beneficio principal de \"with\" y características similares (reducción "
"del volumen de código) puede, sin embargo, lograrse fácilmente en Python "
"mediante asignación. En lugar de::"

#: ../../faq/design.rst:695
msgid "write this::"
msgstr "escribe esto::"

#: ../../faq/design.rst:702
msgid ""
"This also has the side-effect of increasing execution speed because name "
"bindings are resolved at run-time in Python, and the second version only "
"needs to perform the resolution once."
msgstr ""
"Esto también tiene el efecto secundario de aumentar la velocidad de "
"ejecución porque las asignaciones de nombres se resuelven en tiempo de "
"ejecución en Python, y la segunda versión solo necesita realizar la "
"resolución una vez."

#: ../../faq/design.rst:708
msgid "Why don't generators support the with statement?"
msgstr "¿Por qué los generadores no admiten la declaración \"with\"?"

#: ../../faq/design.rst:710
msgid ""
"For technical reasons, a generator used directly as a context manager would "
"not work correctly.  When, as is most common, a generator is used as an "
"iterator run to completion, no closing is needed.  When it is, wrap it as "
"\"contextlib.closing(generator)\" in the 'with' statement."
msgstr ""
"Por razones técnicas, un generador utilizado directamente como un gestor de "
"contexto no funcionaría correctamente. Cuando, como es más común, un "
"generador se utiliza como un iterador que se ejecuta hasta el final, no se "
"necesita cerrarlo. Cuando se necesita, envuélvelo como \"contextlib."
"closing(generator)\" en la declaración 'with'."

#: ../../faq/design.rst:717
msgid "Why are colons required for the if/while/def/class statements?"
msgstr ""
"¿Por qué se requieren dos puntos para las declaraciones if/while/def/class?"

#: ../../faq/design.rst:719
msgid ""
"The colon is required primarily to enhance readability (one of the results "
"of the experimental ABC language).  Consider this::"
msgstr ""
"Los dos puntos son necesarios principalmente para mejorar la legibilidad "
"(uno de los resultados del lenguaje experimental ABC). Considera esto::"

#: ../../faq/design.rst:725
msgid "versus ::"
msgstr "versus ::"

#: ../../faq/design.rst:730
msgid ""
"Notice how the second one is slightly easier to read.  Notice further how a "
"colon sets off the example in this FAQ answer; it's a standard usage in "
"English."
msgstr ""
"Fíjate cómo el segundo es un poco más fácil de leer. Observa además cómo dos "
"puntos separan el ejemplo en esta respuesta del FAQ; es un uso estándar en "
"inglés."

#: ../../faq/design.rst:733
msgid ""
"Another minor reason is that the colon makes it easier for editors with "
"syntax highlighting; they can look for colons to decide when indentation "
"needs to be increased instead of having to do a more elaborate parsing of "
"the program text."
msgstr ""
"Otra razón menor es que los dos puntos facilitan el trabajo de los editores "
"con resaltado de sintaxis; pueden buscar los dos puntos para decidir cuándo "
"se debe aumentar la indentación en lugar de tener que realizar un análisis "
"más elaborado del texto del programa."

#: ../../faq/design.rst:739
msgid "Why does Python allow commas at the end of lists and tuples?"
msgstr "¿Por qué Python permite comas al final de las listas y tuplas?"

#: ../../faq/design.rst:741
msgid ""
"Python lets you add a trailing comma at the end of lists, tuples, and "
"dictionaries::"
msgstr ""
"Python te permite agregar una coma final al final de las listas, tuplas y "
"diccionarios::"

#: ../../faq/design.rst:752
msgid "There are several reasons to allow this."
msgstr "Hay varias razones para permitir esto."

#: ../../faq/design.rst:754
msgid ""
"When you have a literal value for a list, tuple, or dictionary spread across "
"multiple lines, it's easier to add more elements because you don't have to "
"remember to add a comma to the previous line.  The lines can also be "
"reordered without creating a syntax error."
msgstr ""
"Cuando tienes un valor literal para una lista, tupla o diccionario "
"distribuido en varias líneas, es más fácil agregar más elementos porque no "
"tienes que recordar agregar una coma a la línea anterior. Las líneas también "
"se pueden reordenar sin crear un error de sintaxis."

#: ../../faq/design.rst:759
msgid ""
"Accidentally omitting the comma can lead to errors that are hard to "
"diagnose. For example::"
msgstr ""
"Omitir accidentalmente la coma puede llevar a errores difíciles de "
"diagnosticar. Por ejemplo::"

#: ../../faq/design.rst:769
msgid ""
"This list looks like it has four elements, but it actually contains three: "
"\"fee\", \"fiefoo\" and \"fum\".  Always adding the comma avoids this source "
"of error."
msgstr ""
"Esta lista parece tener cuatro elementos, pero en realidad contiene tres: "
"\"fee\", \"fiefoo\" y \"fum\". Siempre agregar la coma evita esta fuente de "
"error."

#: ../../faq/design.rst:772
msgid ""
"Allowing the trailing comma may also make programmatic code generation "
"easier."
msgstr ""
"Permitir la coma final también puede facilitar la generación de código "
"programático."
