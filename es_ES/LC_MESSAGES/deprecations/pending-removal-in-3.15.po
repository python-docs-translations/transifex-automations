# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-01 15:59+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr "Pendiente de eliminación en Python 3.15"

#: ../../deprecations/pending-removal-in-3.15.rst:4
msgid ""
":class:`http.server.CGIHTTPRequestHandler` will be removed along with its "
"related ``--cgi`` flag to ``python -m http.server``.  It was obsolete and "
"rarely used.  No direct replacement exists.  *Anything* is better than CGI "
"to interface a web server with a request handler."
msgstr ""
":class:`http.server.CGIHTTPRequestHandler` se eliminará junto con su "
"indicador ``--cgi`` relacionado a ``python -m http.server``. Era obsoleto y "
"raramente utilizado.  No existe un sustituto directo.  *Cualquier cosa* es "
"mejor que CGI para interconectar un servidor web con un gestor de peticiones."

#: ../../deprecations/pending-removal-in-3.15.rst:9
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` utilice ``exec_module()``."

#: ../../deprecations/pending-removal-in-3.15.rst:13
msgid ""
":class:`locale`: :func:`locale.getdefaultlocale` was deprecated in Python "
"3.11 and originally planned for removal in Python 3.13 (:gh:`90817`), but "
"removal has been postponed to Python 3.15. Use :func:`locale.setlocale`, :"
"func:`locale.getencoding` and :func:`locale.getlocale` instead. (Contributed "
"by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
":class:`locale` :func:`locale.getdefaultlocale` fue obsoleto en Python 3.11 "
"y originalmente planeado para quitarlo en Python 3.13 ( ), pero se ha "
"pospuesto esto a Python 3.15. Usar , y en su lugar. (Contribución de Hugo "
"van Kemenade en .):gh:`90817` :func:`locale.setlocale` :func:`locale."
"getencoding` :func:`locale.getlocale` :gh:`111187`"

#: ../../deprecations/pending-removal-in-3.15.rst:20
msgid ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` is deprecated and "
"scheduled for removal in Python 3.15. From Python 3.13 onwards, use ``os."
"path.isreserved`` to detect reserved paths on Windows."
msgstr ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` está obsoleto y su "
"eliminación está prevista para Python 3.15. A partir de Python 3.13, utilice "
"``os.path.isreserved`` para detectar rutas reservadas en Windows."

#: ../../deprecations/pending-removal-in-3.15.rst:25
msgid ""
":mod:`platform`: :func:`~platform.java_ver` is deprecated and will be "
"removed in 3.15. It was largely untested, had a confusing API, and was only "
"useful for Jython support. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
":mod:`platform`: :func:`~platform.java_ver` está obsoleto y será eliminado "
"en 3.15. Era en gran parte no probado, tenía una API confusa, y sólo era "
"útil para el apoyo Jython. (Contribución de Nikita Sobolev en :gh:`116349`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:31
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:33
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"El argumento *check_home* de :func:`sysconfig.is_python_build` está obsoleto "
"desde Python 3.12."

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ""
":mod:`threading`: Passing any arguments to :func:`threading.RLock` is now "
"deprecated. C version allows any numbers of args and kwargs, but they are "
"just ignored. Python version does not allow any arguments. All arguments "
"will be removed from :func:`threading.RLock` in Python 3.15. (Contributed by "
"Nikita Sobolev in :gh:`102029`.)"
msgstr ""
":mod:`threading`: Pasar cualquier argumento a :func:`threading.RLock` está "
"obsoleto. La versión C permite cualquier número de args y kwargs, pero se "
"ignoran. La versión Python no permite argumentos. Todos los argumentos serán "
"eliminados de :func:`threading.RLock` en Python 3.15. (Contribuido por "
"Nikita Sobolev en :gh:`102029`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:43
msgid ":class:`typing.NamedTuple`:"
msgstr ":class:`typing.NamedTuple`:"

#: ../../deprecations/pending-removal-in-3.15.rst:45
msgid ""
"The undocumented keyword argument syntax for creating :class:`!NamedTuple` "
"classes (``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be "
"disallowed in 3.15. Use the class-based syntax or the functional syntax "
"instead."
msgstr ""
"La sintaxis de argumento de palabra clave no documentada para crear clases :"
"class:`!NamedTuple` (``NT = NamedTuple(\"NT\", x=int)``) está obsoleta, y no "
"se permitirá en 3.15. Utilice en su lugar la sintaxis basada en clases o la "
"sintaxis funcional."

#: ../../deprecations/pending-removal-in-3.15.rst:49
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:51
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: El acceso a :attr:`~codeobject.co_lnotab` estaba "
"obsoleto en :pep:`626` desde la versión 3.10 y se planeó eliminarlo en la "
"3.12, pero sólo obtuvo un :exc:`DeprecationWarning` apropiado en la 3.12. "
"(Contribuido por Nikita Sobolev en . Puede que se elimine en 3.15. "
"(Contribución de Nikita Sobolev en :gh:`101866`.)"

#: ../../deprecations/pending-removal-in-3.15.rst:58
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"When using the functional syntax to create a :class:`!NamedTuple` class, "
"failing to pass a value to the *fields* parameter (``NT = "
"NamedTuple(\"NT\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``NT = NamedTuple(\"NT\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!NamedTuple` class with 0 "
"fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"[])``."
msgstr ""
"Cuando se utiliza la sintaxis funcional para crear una clase :class:`!"
"NamedTuple`, no pasar un valor al parámetro *fields* (``NT = "
"NamedTuple(\"NT\")``) está obsoleto. Pasar ``None`` al parámetro *fields* "
"(``NT = NamedTuple(\"NT\", None)``) también está obsoleto. Ambos serán "
"prohibidos en Python 3.15. Para crear una clase :class:`!NamedTuple` con 0 "
"campos, utilice ``class NT(NamedTuple): pass`` o ``NT = NamedTuple(\"NT\", "
"[])``."

#: ../../deprecations/pending-removal-in-3.15.rst:67
msgid ""
":class:`typing.TypedDict`: When using the functional syntax to create a :"
"class:`!TypedDict` class, failing to pass a value to the *fields* parameter "
"(``TD = TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``TD = TypedDict(\"TD\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!TypedDict` class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""
":class:`typing.TypedDict`: Cuando se utiliza la sintaxis funcional para "
"crear una clase :class:`!TypedDict`, no pasar un valor al parámetro *fields* "
"(``TD = TypedDict(\"TD\")``) está obsoleto. Pasar ``None`` al parámetro "
"*fields* (``TD = TypedDict(\"TD\", None)``) también está obsoleto. Ambos "
"serán prohibidos en Python 3.15. Para crear una clase :class:`!TypedDict` "
"con 0 campos, utilice ``class TD(TypedDict): pass`` o ``TD = "
"TypedDict(\"TD\", {})``."

#: ../../deprecations/pending-removal-in-3.15.rst:74
msgid ""
":mod:`wave`: Deprecate the ``getmark()``, ``setmark()`` and ``getmarkers()`` "
"methods of the :class:`wave.Wave_read` and :class:`wave.Wave_write` classes. "
"They will be removed in Python 3.15. (Contributed by Victor Stinner in :gh:"
"`105096`.)"
msgstr ""
":mod:`wave`: Deprecia los métodos ``getmark()``, ``setmark()`` y "
"``getmarkers()`` de las clases :class:`wave.Wave_read` y :class:`wave."
"Wave_write`. Se eliminarán en Python 3.15. (Contribución de Victor Stinner "
"en :gh:`105096`.)"
