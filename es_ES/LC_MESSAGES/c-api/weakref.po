# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objetos de referencia débil"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python admite *referencias débiles* como objetos de primera clase. Hay dos "
"tipos de objetos específicos que implementan directamente referencias "
"débiles. El primero es un objeto de referencia simple y el segundo actúa "
"como un proxy para el objeto original tanto como sea posible."

#: ../../c-api/weakref.rst:16
msgid ""
"Return true if *ob* is either a reference or proxy object.  This function "
"always succeeds."
msgstr ""
"Devuelve verdadero si *ob* es un objeto de referencia o proxy. Esta función "
"siempre tiene éxito."

#: ../../c-api/weakref.rst:22
msgid ""
"Return true if *ob* is a reference object.  This function always succeeds."
msgstr ""
"Devuelve verdadero si *ob* es un objeto de referencia. Esta función siempre "
"tiene éxito."

#: ../../c-api/weakref.rst:27
msgid "Return true if *ob* is a proxy object.  This function always succeeds."
msgstr ""
"Devuelve true si *ob* es un objeto proxy. Esta función siempre tiene éxito."

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referencable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:56
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns ``Py_None``."
msgstr ""
"Devuelve el objeto referenciado de una referencia débil, *ref*.  Si el "
"referente ya no está vivo, devuelve ``Py_None``."

#: ../../c-api/weakref.rst:61
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Esta función devuelve :term:`borrowed reference` al objeto referenciado. "
"Esto significa que siempre se debe llamar a :c:func:`Py_INCREF` sobre el "
"objeto excepto cuando no se pueda destruir antes del último uso de la "
"referencia prestada."

#: ../../c-api/weakref.rst:69
msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr "Similar a :c:func:`PyWeakref_GetObject`, pero no comprueba errores."

#: ../../c-api/weakref.rst:74
msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""
"Esta función es llamada por el manejador :c:member:`~PyTypeObject."
"tp_dealloc` para borrar referencias débiles."

#: ../../c-api/weakref.rst:77
msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""
"Recorre las referencias débiles de *objeto* y llama a las retrollamadas de "
"las referencias que tienen una. Devuelve cuando se han intentado todas las "
"retrollamadas."
