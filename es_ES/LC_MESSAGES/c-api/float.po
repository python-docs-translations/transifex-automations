# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/float.rst:6
msgid "Floating Point Objects"
msgstr "Objetos de coma flotante"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un objeto de coma flotante de "
"Python."

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo de punto "
"flotante de Python.  Es el mismo objeto que :class:`float` en la capa Python."

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Devuelve true si su argumento es un :c:type:`PyFloatObject` o un subtipo de :"
"c:type:`PyFloatObject`. Esta función siempre tiene éxito."

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Devuelve true si su argumento es un :c:type:`PyFloatObject`, pero no un "
"subtipo de :c:type:`PyFloatObject`. Esta función siempre tiene éxito."

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Crea un objeto :c:type:`PyFloatObject` basado en el valor de la cadena "
"*str*, o ``NULL`` en caso de fallo."

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Crea un objeto :c:type:`PyFloatObject` a partir de *v*, o ``NULL`` en caso "
"de fallo."

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating point object but has a :meth:`~object."
"__float__` method, this method will first be called to convert *pyfloat* "
"into a float. If :meth:`!__float__` is not defined then it falls back to :"
"meth:`~object.__index__`. This method returns ``-1.0`` upon failure, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"Devuelve una representación en C :c:expr:`double` del contenido de*py "
"float*.  Si *pyfloat* no es un objeto de coma flotante de Python pero tiene "
"un método :meth:`~object.__float__`, primero se llamará a este método para "
"convertir *py float* en un float. Si :meth:`!__float__` no está definido, "
"vuelve a caer:meth:`~object.__index__`. Este método devuelve ``-1.0`` al "
"fallar, por lo que se debe llamar :c:func:`PyErr_Occurred` para verificar si "
"hay errores."

#: ../../c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr "Utilice :meth:`~object.__index__` si está disponible."

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""
"Devuelve una representación de C :c:expr:`double` del contenido de * py "
"float*, pero sin comprobación de errores."

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Devuelve una instancia de structseq que contiene información sobre la "
"precisión y los valores mínimo y máximo de un float. Es una fina envoltura "
"alrededor del archivo de cabecera :file:`float.h`."

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""
"Devuelve el máximo flotante finito representable * DBL_MAX * como C :c:expr:"
"`double`."

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""
"Devuelve el mínimo flotante positivo normalizado *DBL_MAX* como C :c:expr:"
"`double`."

#: ../../c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr "Funciones de Empaquetado y Desempaquetado"

#: ../../c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"Las funciones de empaquetar y desempaquetar proporcionan una forma eficiente "
"independiente de la plataforma de almacenar valores de coma flotante como "
"cadenas de bytes. Las rutinas de empaquetado producen una cadena de bytes a "
"partir de un C :c:expr:`double`, y la rutina Desempaquetado produce un C :c:"
"expr:`double` de dicha cadena de bytes. El sufijo (2, 4 u 8) especifica el "
"número de bytes en la cadena de bytes."

#: ../../c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""
"En plataformas que parecen usar formatos IEEE 754, estas funciones funcionan "
"copiando bits. En otras plataformas, el formato de 2 bytes es idéntico al "
"formato de precisión media binary16 IEEE 754, el formato de 4 bytes (32 "
"bits) es idéntico al formato de precisión simple binary32 IEEE 754 y el "
"formato de 8 bytes al formato de precisión doble binary64 IEEE 754, aunque "
"el empaquetado de INF y NAN (si tales cosas existen en la plataforma) no se "
"maneja correctamente, e intentar descomprimir una cadena de bytes que "
"contenga un INF o NaN IEEE generará una excepción."

#: ../../c-api/float.rst:99
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"En plataformas que no son IEEE con más precisión o mayor rango dinámico que "
"el que admite IEEE 754, no se pueden empaquetar todos los valores; en "
"plataformas que no son IEEE con menos precisión o menor rango dinámico, no "
"se pueden desempaquetar todos los valores. Lo que sucede en tales casos es "
"en parte accidental (ay)."

#: ../../c-api/float.rst:107
msgid "Pack functions"
msgstr "Funciones del paquete"

#: ../../c-api/float.rst:109
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:macro:"
"`PY_BIG_ENDIAN` constant can be used to use the native endian: it is equal "
"to ``1`` on big endian processor, or ``0`` on little endian processor."
msgstr ""
"Las rutinas de paquete escriben 2, 4 u 8 bytes, comenzando en *p*. * le* es "
"un argumento:c:expr:`int`, distinto de cero si desea la cadena de bytes en "
"formato little-endian (exponente último, en ``p+1``, ``p+3``, o ``p+6`` "
"``p+7``), cero si desea formato big-endian (exponente primero, en * p*). La "
"constante:c:macro:`PY_BIG_ENDIAN` se puede usar para usar el endian nativo: "
"es igual a ``1`` en el procesador big endian, o ``0`` en el procesador "
"little endian."

#: ../../c-api/float.rst:116
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"Valor de retorno: ``0`` si todo está bien, ``-1`` si hay un error (y se "
"establece una excepción, lo más probable :exc:`OverflowError`)."

#: ../../c-api/float.rst:119
msgid "There are two problems on non-IEEE platforms:"
msgstr "Hay dos problemas en plataformas que no son IEEE:"

#: ../../c-api/float.rst:121
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr "Lo que esto hace es no definir si *x * es un NaN o infinito."

#: ../../c-api/float.rst:122
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0.0`` y ``+0.0`` producen la misma cadena de bytes."

#: ../../c-api/float.rst:126
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""
"Empaqueta un doble C como el formato IEEE 754 binary16 de media precisión."

#: ../../c-api/float.rst:130
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr ""
"Empaqueta un doble C como el formato IEEE 754 binary32 de precisión simple."

#: ../../c-api/float.rst:134
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr ""
"Empaqueta un doble C como el formato de doble precisión binario64 IEEE 754."

#: ../../c-api/float.rst:138
msgid "Unpack functions"
msgstr "Desempaquetar funciones"

#: ../../c-api/float.rst:140
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant can "
"be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""
"Las rutinas de desempaquetado leen 2, 4 u 8 bytes, empezando en *p*.  *le* "
"es un argumento :c:expr:`int`, distinto de cero si la cadena de bytes está "
"en formato little-endian (exponente último, en ``p+1``, ``p+3`` o ``p+6`` y "
"``p+7``), cero si es big-endian (exponente primero, en *p*). La constante :c:"
"macro:`PY_BIG_ENDIAN` puede utilizarse para utilizar el formato endian "
"nativo: es igual a ``1`` en un procesador big endian, o ``0`` en un "
"procesador little endian."

#: ../../c-api/float.rst:147
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""
"Valor de retorno: El doble desempaquetado.  En caso de error, es ``-1.0`` y :"
"c:func:`PyErr_Occurred` es verdadero (y se establece una excepción, "
"probablemente :exc:`OverflowError`)."

#: ../../c-api/float.rst:151
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""
"Tenga en cuenta que en una plataforma no IEEE esto se negará a descomprimir "
"una cadena de bytes que representa un NaN o infinito."

#: ../../c-api/float.rst:156
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr ""
"Desempaqueta el formato IEEE 754 binary16 de media precisión como un double "
"C."

#: ../../c-api/float.rst:160
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""
"Desempaqueta el formato IEEE 754 binary32 de precisión simple como un double "
"C."

#: ../../c-api/float.rst:164
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr ""
"Desempaqueta el formato IEEE 754 binary64 de doble precisión como un double "
"C."

#: ../../c-api/float.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/float.rst:8
msgid "floating point"
msgstr "coma flotante"
