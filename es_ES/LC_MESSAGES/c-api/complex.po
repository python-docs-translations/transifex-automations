# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objetos de números complejos"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Los objetos de números complejos de Python se implementan como dos tipos "
"distintos cuando se ven desde la API de C: uno es el objeto de Python "
"expuesto a los programas de Python y el otro es una estructura de C que "
"representa el valor de número complejo real. La API proporciona funciones "
"para trabajar con ambos."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Números complejos como estructuras C"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Tener en cuenta que las funciones que aceptan estas estructuras como "
"parámetros y las devuelven como resultados lo hacen *by value* en lugar de "
"desreferenciarlas mediante punteros. Esto es consistente en toda la API."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""
"La estructura C que corresponde a la parte de valor de un objeto numérico "
"complejo de Python.  La mayoría de las funciones para tratar con objetos "
"numéricos complejos utilizan estructuras de este tipo como valores de "
"entrada o salida, según corresponda."

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr "La estructura se define como::"

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Devuelve la suma de dos números complejos, usando la representación C:c:type:"
"`Py_complex`."

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Devuelve la diferencia entre dos números complejos, usando la representación "
"C :c:type:`Py_complex`."

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Devuelve la negación del número complejo *num*, usando la representación C:c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Devuelve el producto de dos números complejos, usando la representación C:c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Devuelve el cociente de dos números complejos, usando la representación C:c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:macro:`!EDOM`."
msgstr ""
"Si *divisor* es nulo, este método devuelve cero y establece :c:data:`errno` "
"en :c:macro:`!EDOM`."

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Devuelve la exponenciación de *num* por *exp*, usando la representación C:c:"
"type:`Py_complex`."

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"Si *num* es nulo y *exp* no es un número real positivo, este método devuelve "
"cero y establece :c:data:`errno` en :c:macro:`!EDOM`."

#: ../../c-api/complex.rst:84
msgid "Complex Numbers as Python Objects"
msgstr "Números complejos como objetos de Python"

#: ../../c-api/complex.rst:89
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un objeto de número complejo "
"de Python."

#: ../../c-api/complex.rst:94
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo de número "
"complejo de Python. es el mismo objeto que :class:`complex` en la capa de "
"Python."

#: ../../c-api/complex.rst:100
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Devuelve verdadero si su argumento es un :c:type:`PyComplexObject` o un "
"subtipo de :c:type:`PyComplexObject`.  Esta función siempre tiene éxito."

#: ../../c-api/complex.rst:106
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Devuelve verdadero si su argumento es un :c:type:`PyComplexObject`, pero no "
"un subtipo de :c:type:`PyComplexObject`.  Esta función siempre tiene éxito."

#: ../../c-api/complex.rst:112
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""
"Crea un nuevo objeto numérico complejo Python a partir de un valor C :c:type:"
"`Py_complex`. Devuelve ``NULL`` con una excepción establecida en caso de "
"error."

#: ../../c-api/complex.rst:118
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return "
"``NULL`` with an exception set on error."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyComplexObject` a partir de *real* e "
"*imag*. Devuelve ``NULL`` con una excepción establecida en caso de error."

#: ../../c-api/complex.rst:124
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "Devuelve la parte real de *op* como un C :c:expr:`double`."

#: ../../c-api/complex.rst:126
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"En caso de fallo, este método devuelve ``-1.0`` con un conjunto de "
"excepciones, por lo que se debe llamar a :c:func:`PyErr_Occurred` para "
"comprobar si hay errores."

#: ../../c-api/complex.rst:132
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "Devuelve la parte imaginaria de *op* como un C :c:expr:`double`."

#: ../../c-api/complex.rst:137
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Devuelve el valor :c:type:`Py_complex`del número complejo *op*."

#: ../../c-api/complex.rst:139
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""
"Si *op* no es un objeto numérico complejo de Python pero tiene un método :"
"meth:`~object.__complex__`, este método será llamado primero para convertir "
"*op* en un objeto numérico complejo de Python.  Si :meth:`!__complex__` no "
"está definido, se vuelve a :meth:`~object.__float__`. Si :meth:`!__float__` "
"no está definido, se vuelve a :meth:`~object.__index__`."

#: ../../c-api/complex.rst:145
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with :c:member:"
"`~Py_complex.real` set to ``-1.0`` and with an exception set, so one should "
"call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"En caso de fallo, este método devuelve :c:type:`Py_complex` con :c:member:"
"`~Py_complex.real` establecido en ``-1.0`` y con una excepción establecida, "
"por lo que se debe llamar a :c:func:`PyErr_Occurred` para comprobar si hay "
"errores."

#: ../../c-api/complex.rst:149
msgid "Use :meth:`~object.__index__` if available."
msgstr "Utilice :meth:`~object.__index__` si está disponible."

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "número complejo"
