# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr "Utilidades del sistema operativo"

#: ../../c-api/sys.rst:11
msgid ""
"Return the file system representation for *path*. If the object is a :class:"
"`str` or :class:`bytes` object, then a new :term:`strong reference` is "
"returned. If the object implements the :class:`os.PathLike` interface, then :"
"meth:`~os.PathLike.__fspath__` is returned as long as it is a :class:`str` "
"or :class:`bytes` object. Otherwise :exc:`TypeError` is raised and ``NULL`` "
"is returned."
msgstr ""
"Devuelve la representación del sistema de ficheros para *ruta*. Si el objeto "
"es un objeto :class:`str` o :class:`bytes`, entonces se devuelve una nueva "
"referencia :term:`strong`. Si el objeto implementa la interfaz :class:`os."
"PathLike`, entonces se devuelve :meth:`~os.PathLike.__fspath__` siempre que "
"sea un objeto :class:`str` o :class:`bytes`. En caso contrario, se invoca :"
"exc:`TypeError` y se devuelve ``NULL``."

#: ../../c-api/sys.rst:24
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the :c:member:`PyConfig.interactive` is "
"non-zero, this function also returns true if the *filename* pointer is "
"``NULL`` or if the name is equal to one of the strings ``'<stdin>'`` or "
"``'???'``."
msgstr ""
"Devuelve verdadero (distinto de cero) si el archivo de E/S estándar *fp* con "
"nombre *nombredearchivo* se considera interactivo.  Este es el caso de los "
"ficheros para los que ``isatty(fileno(fp))`` es verdadero.  Si :c:member:"
"`PyConfig.interactive` es distinto de cero, esta función también devuelve "
"true si el puntero *filename* es ``NULL`` o si el nombre es igual a una de "
"las cadenas ``'<stdin>'`` o ``'???'``."

#: ../../c-api/sys.rst:30
msgid "This function must not be called before Python is initialized."
msgstr "Esta función no debe ser llamada antes de que Python sea inicializado."

#: ../../c-api/sys.rst:35
msgid ""
"Function to prepare some internal state before a process fork.  This should "
"be called before calling :c:func:`fork` or any similar function that clones "
"the current process. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""
"Función para preparar un estado interno antes de realizar una bifurcación de "
"proceso. Esto debería ser llamado antes de llamar a :c:func:`fork` o "
"cualquier función similar que clone el proceso actual. Solo disponible en "
"sistemas donde :c:func:`fork` está definido."

#: ../../c-api/sys.rst:41
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_BeforeFork()``."
msgstr ""
"La llamada C :c:func:`fork` solo debe realizarse desde el hilo :ref:"
"`\"main\" <fork-and-threads>` (del intérprete :ref:`\"main\" <sub-"
"interpreter-support>`). Lo mismo ocurre con ``PyOS_BeforeFork()``."

#: ../../c-api/sys.rst:51
msgid ""
"Function to update some internal state after a process fork.  This should be "
"called from the parent process after calling :c:func:`fork` or any similar "
"function that clones the current process, regardless of whether process "
"cloning was successful. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""
"Función para actualizar algún estado interno después de un proceso de "
"bifurcación. Esto se debería llamar desde el proceso padre después de llamar "
"a :c:func:`fork` o cualquier función similar que clone el proceso actual, "
"independientemente de si la clonación del proceso fue exitosa. Solo "
"disponible en sistemas donde :c:func:`fork` está definido."

#: ../../c-api/sys.rst:58
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Parent()``."
msgstr ""
"La llamada C :c:func:`fork` solo debe realizarse desde el hilo :ref:"
"`\"main\" <fork-and-threads>` (del intérprete :ref:`\"main\" <sub-"
"interpreter-support>`). Lo mismo ocurre con ``PyOS_AfterFork_Parent()``."

#: ../../c-api/sys.rst:68
msgid ""
"Function to update internal interpreter state after a process fork. This "
"must be called from the child process after calling :c:func:`fork`, or any "
"similar function that clones the current process, if there is any chance the "
"process will call back into the Python interpreter. Only available on "
"systems where :c:func:`fork` is defined."
msgstr ""
"Función para actualizar el estado interno del intérprete después de un "
"proceso de bifurcación. Este se debe llamar desde el proceso hijo después de "
"llamar a :c:func:`fork`, o cualquier función similar que clone el proceso "
"actual, si existe alguna posibilidad de que el proceso llame de vuelta al "
"intérprete de Python. Solo disponible en sistemas donde :c:func:`fork` está "
"definido."

#: ../../c-api/sys.rst:75
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Child()``."
msgstr ""
"La llamada C :c:func:`fork` solo se debe realizar desde el hilo :ref:"
"`\"main\"  <fork-and-threads>` (del intérprete ::ref:`\"main\"  <sub-"
"interpreter-support>`). Lo mismo ocurre con ``PyOS_AfterFork_Child()``."

#: ../../c-api/sys.rst:83
msgid ""
":func:`os.register_at_fork` allows registering custom Python functions to be "
"called by :c:func:`PyOS_BeforeFork()`, :c:func:`PyOS_AfterFork_Parent` and  :"
"c:func:`PyOS_AfterFork_Child`."
msgstr ""
":func:`os.register_at_fork` permite registrar funciones personalizadas de "
"Python para que sea llamada por :c:func:`PyOS_BeforeFork()`, :c:func:"
"`PyOS_AfterFork_Parent` y :c:func:`PyOS_AfterFork_Child`."

#: ../../c-api/sys.rst:90
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""
"Función para actualizar algún estado interno después de un proceso de "
"bifurcación; esta se debería llamar en el nuevo proceso si se va a seguir "
"utilizando el intérprete de Python. Si se carga un nuevo ejecutable en el "
"nuevo proceso, no es necesario llamar a esta función."

#: ../../c-api/sys.rst:95
msgid "This function is superseded by :c:func:`PyOS_AfterFork_Child()`."
msgstr "Esta función es reemplazada por :c:func:`PyOS_AfterFork_Child()`."

#: ../../c-api/sys.rst:103
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :c:macro:`!USE_STACKCHECK` is "
"defined (currently on certain versions of Windows using the Microsoft Visual "
"C++ compiler). :c:macro:`!USE_STACKCHECK` will be defined automatically; you "
"should never change the definition in your own code."
msgstr ""
"Devuelve true cuando el intérprete se queda sin espacio en la pila.  Se "
"trata de una comprobación fiable, pero sólo está disponible cuando :c:macro:"
"`!USE_STACKCHECK` está definido (actualmente en ciertas versiones de Windows "
"que utilizan el compilador Microsoft Visual C++). :c:macro:`!USE_STACKCHECK` "
"se definirá automáticamente; nunca debe cambiar la definición en su propio "
"código."

#: ../../c-api/sys.rst:115
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`!sigaction` or :c:func:`!signal`.  Do not call those "
"functions directly!"
msgstr ""
"Devuelve el manejador de señal actual para la señal *i*.  Esta es una fina "
"envoltura alrededor de :c:func:`!sigaction` o :c:func:`!signal`.  No llame a "
"esas funciones directamente."

#: ../../c-api/sys.rst:122
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`!sigaction` or :c:"
"func:`!signal`.  Do not call those functions directly!"
msgstr ""
"Establece el manejador de señales para que la señal *i* sea *h*; devuelve el "
"manejador de señales antiguo. Esta es una fina envoltura alrededor de :c:"
"func:`!sigaction` o :c:func:`!signal`.  No llame a esas funciones "
"directamente."

#: ../../c-api/sys.rst:129
msgid ""
"This function should not be called directly: use the :c:type:`PyConfig` API "
"with the :c:func:`PyConfig_SetBytesString` function which ensures that :ref:"
"`Python is preinitialized <c-preinit>`."
msgstr ""
"Esta función no debe llamarse directamente: utilice la API :c:type:"
"`PyConfig` con la función :c:func:`PyConfig_SetBytesString` que garantiza "
"que :ref:`Python is preinitialized <c-preinit>`."

#: ../../c-api/sys.rst:133 ../../c-api/sys.rst:200
msgid ""
"This function must not be called before :ref:`Python is preinitialized <c-"
"preinit>` and so that the LC_CTYPE locale is properly configured: see the :c:"
"func:`Py_PreInitialize` function."
msgstr ""
"Esta función no debe llamarse antes de que :ref:`Python is preinitialized <c-"
"preinit>` y para que la configuración regional LC_CTYPE esté correctamente "
"configurada: véase la función :c:func:`Py_PreInitialize`."

#: ../../c-api/sys.rst:137
msgid ""
"Decode a byte string from the :term:`filesystem encoding and error handler`. "
"If the error handler is :ref:`surrogateescape error handler "
"<surrogateescape>`, undecodable bytes are decoded as characters in range "
"U+DC80..U+DCFF; and if a byte sequence can be decoded as a surrogate "
"character, the bytes are escaped using the surrogateescape error handler "
"instead of decoding them."
msgstr ""
"Decodifica una cadena de bytes a partir del :term:`filesystem encoding and "
"error handler`. Si el gestor de errores es :ref:`surrogateescape error "
"handler <surrogateescape>`, los bytes no decodificables se decodifican como "
"caracteres en el rango U+DC80..U+DCFF; y si una secuencia de bytes puede "
"decodificarse como un carácter sustituto, los bytes se escapan utilizando el "
"gestor de errores surrogateescape en lugar de decodificarlos."

#: ../../c-api/sys.rst:144
msgid ""
"Return a pointer to a newly allocated wide character string, use :c:func:"
"`PyMem_RawFree` to free the memory. If size is not ``NULL``, write the "
"number of wide characters excluding the null character into ``*size``"
msgstr ""
"Devuelve un puntero a una cadena de caracteres anchos recién asignada, usa :"
"c:func:`PyMem_RawFree` para liberar la memoria. Si size no es ``NULL``, "
"escribe el número de caracteres anchos excluyendo el carácter nulo en "
"``*size``."

#: ../../c-api/sys.rst:148
msgid ""
"Return ``NULL`` on decoding error or memory allocation error. If *size* is "
"not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or set to "
"``(size_t)-2`` on decoding error."
msgstr ""
"Devolver ``NULL`` en caso de error de decodificación o error de asignación "
"de memoria. Si *size* no es ``NULL``, ``*size`` se establece en "
"``(size_t)-1`` en caso de error de memoria o se establece en ``(size_t)-2`` "
"en caso de error de decodificación."

#: ../../c-api/sys.rst:152 ../../c-api/sys.rst:192
msgid ""
"The :term:`filesystem encoding and error handler` are selected by :c:func:"
"`PyConfig_Read`: see :c:member:`~PyConfig.filesystem_encoding` and :c:member:"
"`~PyConfig.filesystem_errors` members of :c:type:`PyConfig`."
msgstr ""
"El :término:`filesystem encoding and error handler` es seleccionado por :c:"
"func:`PyConfig_Read`: ver :c:member:`~PyConfig.filesystem_encoding` y :c:"
"member:`~PyConfig.filesystem_errors` miembros de :c:type:`PyConfig`."

#: ../../c-api/sys.rst:156
msgid ""
"Decoding errors should never happen, unless there is a bug in the C library."
msgstr ""
"Los errores de decodificación nunca deberían ocurrir, a menos que haya un "
"error en la biblioteca C."

#: ../../c-api/sys.rst:159
msgid ""
"Use the :c:func:`Py_EncodeLocale` function to encode the character string "
"back to a byte string."
msgstr ""
"Usar la función :c:func:`Py_EncodeLocale` para codificar la cadena de "
"caracteres de nuevo a una cadena de bytes."

#: ../../c-api/sys.rst:164
msgid ""
"The :c:func:`PyUnicode_DecodeFSDefaultAndSize` and :c:func:"
"`PyUnicode_DecodeLocaleAndSize` functions."
msgstr ""
"Las funciones :c:func:`PyUnicode_DecodeFSDefaultAndSize` y :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."

#: ../../c-api/sys.rst:169 ../../c-api/sys.rst:211
msgid ""
"The function now uses the UTF-8 encoding in the :ref:`Python UTF-8 Mode "
"<utf8-mode>`."
msgstr ""
"La función utiliza ahora la codificación UTF-8 en el :ref:`Python UTF-8 Mode "
"<utf8-mode>`."

#: ../../c-api/sys.rst:173
msgid ""
"The function now uses the UTF-8 encoding on Windows if :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding` is zero;"
msgstr ""
"La función utiliza ahora la codificación UTF-8 en Windows si :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding` es cero;"

#: ../../c-api/sys.rst:180
msgid ""
"Encode a wide character string to the :term:`filesystem encoding and error "
"handler`. If the error handler is :ref:`surrogateescape error handler "
"<surrogateescape>`, surrogate characters in the range U+DC80..U+DCFF are "
"converted to bytes 0x80..0xFF."
msgstr ""
"Codifica una cadena de caracteres anchos según :term:`filesystem encoding "
"and error handler`. Si el gestor de errores es :ref:`surrogateescape error "
"handler <surrogateescape>`, los caracteres sustituidos en el rango U+DC80.."
"U+DCFF se convierten en bytes 0x80..0xFF."

#: ../../c-api/sys.rst:185
msgid ""
"Return a pointer to a newly allocated byte string, use :c:func:`PyMem_Free` "
"to free the memory. Return ``NULL`` on encoding error or memory allocation "
"error."
msgstr ""
"Devuelve un puntero a una cadena de bytes recién asignada, usa :c:func:"
"`PyMem_Free` para liberar la memoria. Devuelve ``NULL`` en caso de error de "
"codificación o error de asignación de memoria."

#: ../../c-api/sys.rst:189
msgid ""
"If error_pos is not ``NULL``, ``*error_pos`` is set to ``(size_t)-1`` on "
"success,  or set to the index of the invalid character on encoding error."
msgstr ""
"Si error_pos no es ``NULL``, ``*error_pos`` se establece en ``(size_t)-1`` "
"en caso de éxito, o en el índice del carácter no válido en caso de error de "
"codificación."

#: ../../c-api/sys.rst:196
msgid ""
"Use the :c:func:`Py_DecodeLocale` function to decode the bytes string back "
"to a wide character string."
msgstr ""
"Utilice la función :c:func:`Py_DecodeLocale` para decodificar la cadena de "
"bytes de nuevo a una cadena de caracteres amplia."

#: ../../c-api/sys.rst:206
msgid ""
"The :c:func:`PyUnicode_EncodeFSDefault` and :c:func:`PyUnicode_EncodeLocale` "
"functions."
msgstr ""
"Las funciones :c:func:`PyUnicode_EncodeFSDefault` y :c:func:"
"`PyUnicode_EncodeLocale`."

#: ../../c-api/sys.rst:215
msgid ""
"The function now uses the UTF-8 encoding on Windows if :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding` is zero."
msgstr ""
"La función utiliza ahora la codificación UTF-8 en Windows si :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding` es cero."

#: ../../c-api/sys.rst:223
msgid "System Functions"
msgstr "Funciones del sistema"

#: ../../c-api/sys.rst:225
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""
"Estas son funciones de utilidad que hacen que la funcionalidad del módulo :"
"mod:`sys` sea accesible al código C.  Todas ellas trabajan con el dict del "
"módulo :mod:`sys` del hilo del intérprete actual, que está contenido en la "
"estructura de estado del hilo interno."

#: ../../c-api/sys.rst:231
msgid ""
"Return the object *name* from the :mod:`sys` module or ``NULL`` if it does "
"not exist, without setting an exception."
msgstr ""
"Devuelve el objeto *name* del módulo :mod:`sys` o ``NULL`` si no existe, sin "
"generar una excepción."

#: ../../c-api/sys.rst:236
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is ``NULL``, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""
"Establece *name* en el módulo :mod:`sys` a *v* a menos que *v* sea ``NULL``, "
"en cuyo caso se elimina *name* del módulo sys. Devuelve ``0`` en caso de "
"éxito, ``-1`` en caso de error."

#: ../../c-api/sys.rst:242
msgid ""
"Reset :data:`sys.warnoptions` to an empty list. This function may be called "
"prior to :c:func:`Py_Initialize`."
msgstr ""
"Restablecer :data:`sys.warnoptions` a una lista vacía. Se puede llamar esta "
"función antes de :c:func:`Py_Initialize`."

#: ../../c-api/sys.rst:247 ../../c-api/sys.rst:258
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"warnoptions` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API se mantiene por compatibilidad con versiones anteriores: en su "
"lugar debe utilizarse la configuración :c:member:`PyConfig.warnoptions`, "
"ver :ref:`Python Initialization Configuration <init-config>`."

#: ../../c-api/sys.rst:251
msgid ""
"Append *s* to :data:`sys.warnoptions`. This function must be called prior "
"to :c:func:`Py_Initialize` in order to affect the warnings filter list."
msgstr ""
"Añade *s* a :data:`sys.warnoptions`. Se debe llamar esta función antes de :c:"
"func:`Py_Initialize` para afectar la lista de filtros de advertencias."

#: ../../c-api/sys.rst:262
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr "Añade *unicode* a :data:`sys.warnoptions`."

#: ../../c-api/sys.rst:264
msgid ""
"Note: this function is not currently usable from outside the CPython "
"implementation, as it must be called prior to the implicit import of :mod:"
"`warnings` in :c:func:`Py_Initialize` to be effective, but can't be called "
"until enough of the runtime has been initialized to permit the creation of "
"Unicode objects."
msgstr ""
"Nota: esta función no se puede utilizar actualmente desde fuera de la "
"implementación de CPython, ya que se debe llamar antes de la importación "
"implícita de :mod:`warnings` en :c:func:`Py_Initialize` para que sea "
"efectiva, pero no se puede llamar hasta que se haya inicializado "
"suficientemente el tiempo de ejecución para permitir la creación de objetos "
"Unicode."

#: ../../c-api/sys.rst:274
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"module_search_paths` and :c:member:`PyConfig.module_search_paths_set` should "
"be used instead, see :ref:`Python Initialization Configuration <init-"
"config>`."
msgstr ""
"Esta API se mantiene por compatibilidad con versiones anteriores: en su "
"lugar debe utilizarse la configuración de :c:member:`PyConfig."
"module_search_paths` y :c:member:`PyConfig.module_search_paths_set`, ver :"
"ref:`Python Initialization Configuration <init-config>`."

#: ../../c-api/sys.rst:279
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""
"Establecer :data:`sys.path` en un objeto de lista de rutas encontradas en "
"*path*, que debería ser una lista de rutas separadas por el delimitador de "
"búsqueda de la plataforma (``:`` en Unix, ``;`` en Windows)."

#: ../../c-api/sys.rst:287
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""
"Escribir la cadena de salida descrita por *format* en :data:`sys.stdout`. No "
"se generan excepciones, incluso si se produce truncamiento (ver más abajo)."

#: ../../c-api/sys.rst:290
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""
"*format* debería limitar el tamaño total de la cadena de salida formateada a "
"1000 bytes o menos; después de 1000 bytes, la cadena de salida se truncará. "
"En particular, esto significa que no deben ocurrir formatos \"%s\" sin "
"restricciones; estos deben limitarse usando \"%.<N>s\" donde <N> es un "
"número decimal calculado de manera que <N> más el tamaño máximo de otro "
"texto formateado no exceda los 1000 bytes. También tener cuidado con \"%f\", "
"que puede imprimir cientos de dígitos para números muy grandes."

#: ../../c-api/sys.rst:298
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""
"Si ocurre un problema, o :data:`sys.stdout` no está configurado, el mensaje "
"formateado se escribe en el *stdout* real (nivel C)."

#: ../../c-api/sys.rst:303
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""
"Como :c:func:`PySys_WriteStdout`, pero escribe en :data:`sys.stderr` o "
"*stderr* en su lugar."

#: ../../c-api/sys.rst:308
msgid ""
"Function similar to PySys_WriteStdout() but format the message using :c:func:"
"`PyUnicode_FromFormatV` and don't truncate the message to an arbitrary "
"length."
msgstr ""
"Función similar a PySys_WriteStdout() pero formatea el mensaje utilizando :c:"
"func:`PyUnicode_FromFormatV` y no trunca el mensaje a una longitud "
"arbitraria."

#: ../../c-api/sys.rst:316
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""
"Como :c:func:`PySys_FormatStdout`, pero escribe en :data:`sys.stderr` o "
"*stderr* en su lugar."

#: ../../c-api/sys.rst:323
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"xoptions` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Esta API se mantiene por compatibilidad con versiones anteriores: en su "
"lugar debe utilizarse la configuración :c:member:`PyConfig.xoptions`, ver :"
"ref:`Python Initialization Configuration <init-config>`."

#: ../../c-api/sys.rst:327
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`. This function "
"may be called prior to :c:func:`Py_Initialize`."
msgstr ""
"Analizar *s* como un conjunto de opciones :option:`-X` y añadirlas al mapeo "
"de opciones actual devuelto por :c:func:`PySys_GetXOptions`. Esta función se "
"puede llamar antes de :c:func:`Py_Initialize`."

#: ../../c-api/sys.rst:337
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to :data:"
"`sys._xoptions`.  On error, ``NULL`` is returned and an exception is set."
msgstr ""
"Devuelve el diccionario actual de opciones :option:`-X`, de manera similar "
"a :data:`sys._xoptions`. En caso de error, se devuelve ``NULL`` y se "
"establece una excepción."

#: ../../c-api/sys.rst:346
msgid ""
"Raise an auditing event with any active hooks. Return zero for success and "
"non-zero with an exception set on failure."
msgstr ""
"Elevar un acto de auditoría con cualquier gancho activo. Devolver cero en "
"caso de éxito y un número distinto de cero con una excepción establecida en "
"caso de fallo."

#: ../../c-api/sys.rst:349
msgid ""
"If any hooks have been added, *format* and other arguments will be used to "
"construct a tuple to pass. Apart from ``N``, the same format characters as "
"used in :c:func:`Py_BuildValue` are available. If the built value is not a "
"tuple, it will be added into a single-element tuple. (The ``N`` format "
"option consumes a reference, but since there is no way to know whether "
"arguments to this function will be consumed, using it may cause reference "
"leaks.)"
msgstr ""
"Si se han añadido ganchos, *format* y otros argumentos se utilizarán para "
"construir una tupla que se pasará. Aparte de ``N``, están disponibles los "
"mismos caracteres de formato que se utilizan en :c:func:`Py_BuildValue`. Si "
"el valor construido no es una tupla, se añadirá a una tupla de un solo "
"elemento. (La opción de formato ``N`` consume una referencia, pero dado que "
"no hay forma de saber si los argumentos de esta función se consumirán, su "
"uso puede causar fugas de referencia.)"

#: ../../c-api/sys.rst:357
msgid ""
"Note that ``#`` format characters should always be treated as :c:type:"
"`Py_ssize_t`, regardless of whether ``PY_SSIZE_T_CLEAN`` was defined."
msgstr ""
"Tener en cuenta que los caracteres de formato ``#`` siempre deben tratarse "
"como :c:type:`Py_ssize_t`, independientemente de si se definió "
"``PY_SSIZE_T_CLEAN``."

#: ../../c-api/sys.rst:360
msgid ":func:`sys.audit` performs the same function from Python code."
msgstr ":func:`sys.audit` realiza la misma función desde el código de Python."

#: ../../c-api/sys.rst:366
msgid ""
"Require :c:type:`Py_ssize_t` for ``#`` format characters. Previously, an "
"unavoidable deprecation warning was raised."
msgstr ""
"Requiere :c:type:`Py_ssize_t` para los caracteres de formato ``#``. "
"Anteriormente, se generaba una advertencia de deprecación inevitable."

#: ../../c-api/sys.rst:372
msgid ""
"Append the callable *hook* to the list of active auditing hooks. Return zero "
"on success and non-zero on failure. If the runtime has been initialized, "
"also set an error on failure. Hooks added through this API are called for "
"all interpreters created by the runtime."
msgstr ""
"Añade el *hook* llamable a la lista de ganchos de auditoría activos. "
"Devuelve cero en caso de éxito y distinto de cero en caso de fallo. Si se ha "
"inicializado el tiempo de ejecución, también establece un error en caso de "
"fallo. Se llaman los ganchos añadidos a través de esta API para todos los "
"intérpretes creados por el tiempo de ejecución."

#: ../../c-api/sys.rst:378
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"El puntero *userData* se pasa a la función gancho. Dado que las funciones "
"gancho se pueden llamar en diferentes tiempos de ejecución, este puntero no "
"debe referirse directamente al estado de Python."

#: ../../c-api/sys.rst:382
msgid ""
"This function is safe to call before :c:func:`Py_Initialize`. When called "
"after runtime initialization, existing audit hooks are notified and may "
"silently abort the operation by raising an error subclassed from :class:"
"`Exception` (other errors will not be silenced)."
msgstr ""
"Esta función es segura de llamar antes de :c:func:`Py_Initialize`. Cuando se "
"llama después de la inicialización en tiempo de ejecución, se notifican los "
"ganchos de auditoría existentes y pueden abortar silenciosamente la "
"operación al generar un error subclasificado de :class:`Exception` (no se "
"silenciarán otros errores)."

#: ../../c-api/sys.rst:387
msgid ""
"The hook function is always called with the GIL held by the Python "
"interpreter that raised the event."
msgstr ""
"La función hook siempre se llama con el GIL que tiene el intérprete de "
"Python que lanzó el evento."

#: ../../c-api/sys.rst:390
msgid ""
"See :pep:`578` for a detailed description of auditing.  Functions in the "
"runtime and standard library that raise events are listed in the :ref:`audit "
"events table <audit-events>`. Details are in each function's documentation."
msgstr ""
"Ver :pep:`578` para una descripción detallada de la auditoría. Las funciones "
"en tiempo de ejecución y la biblioteca estándar que generan eventos se "
"enumeran en la :ref:`audit events table <audit-events>`. Los detalles se "
"encuentran en la documentación de cada función."

#: ../../c-api/sys.rst:395 ../../c-api/sys.rst:397
msgid ""
"If the interpreter is initialized, this function raises an auditing event "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`Exception`, the new hook will not be added "
"and the exception is cleared. As a result, callers cannot assume that their "
"hook has been added unless they control all existing hooks."
msgstr ""
"Si se inicializa el intérprete, esta función lanza un evento de auditoría "
"``sys.addaudithook`` sin argumentos. Si cualquier gancho existente lanza una "
"excepción derivada de :class:`Exception`, el nuevo gancho no se añadirá y la "
"excepción se borrará. Como resultado, los llamantes no pueden asumir que su "
"gancho ha sido añadido a menos que controlen todos los ganchos existentes."

#: ../../c-api/sys.rst:406
msgid ""
"The type of the hook function. *event* is the C string event argument passed "
"to :c:func:`PySys_Audit`. *args* is guaranteed to be a :c:type:"
"`PyTupleObject`. *userData* is the argument passed to PySys_AddAuditHook()."
msgstr ""
"El tipo de la función gancho. *event* es el argumento de evento de cadena C "
"pasado a :c:func:`PySys_Audit`. *args* se garantiza que es un :c:type:"
"`PyTupleObject`. *userData* es el argumento pasado a PySys_AddAuditHook()."

#: ../../c-api/sys.rst:417
msgid "Process Control"
msgstr "Control de Procesos"

#: ../../c-api/sys.rst:424
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`!abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""
"Imprime un mensaje de error fatal y mata el proceso.  No se realiza ninguna "
"limpieza. Esta función sólo debe invocarse cuando se detecta una condición "
"que haría peligroso continuar utilizando el intérprete de Python; por "
"ejemplo, cuando la administración de objetos parece estar corrupta.  En "
"Unix, se llama a la función estándar de la biblioteca C :c:func:`!abort` que "
"intentará producir un archivo :file:`core`."

#: ../../c-api/sys.rst:431
msgid ""
"The ``Py_FatalError()`` function is replaced with a macro which logs "
"automatically the name of the current function, unless the "
"``Py_LIMITED_API`` macro is defined."
msgstr ""
"La función ``Py_FatalError()`` se sustituye por una macro que registra "
"automáticamente el nombre de la función actual, a menos que esté definida la "
"macro ``Py_LIMITED_API``."

#: ../../c-api/sys.rst:435
msgid "Log the function name automatically."
msgstr "Registrar automáticamente el nombre de la función."

#: ../../c-api/sys.rst:445
msgid ""
"Exit the current process.  This calls :c:func:`Py_FinalizeEx` and then calls "
"the standard C library function ``exit(status)``.  If :c:func:"
"`Py_FinalizeEx` indicates an error, the exit status is set to 120."
msgstr ""
"Salir del proceso actual. Esto llama a :c:func:`Py_FinalizeEx` y luego llama "
"a la función de la biblioteca estándar de C ``exit(status)``. Si :c:func:"
"`Py_FinalizeEx` indica un error, el estado de salida se establece en 120."

#: ../../c-api/sys.rst:449
msgid "Errors from finalization no longer ignored."
msgstr "Errores de finalización ya no ignorados."

#: ../../c-api/sys.rst:459
msgid ""
"Register a cleanup function to be called by :c:func:`Py_FinalizeEx`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""
"Registrar una función de limpieza para ser llamada por :c:func:"
"`Py_FinalizeEx`. La función de limpieza será llamada sin argumentos y no "
"deberá devolver ningún valor. Se pueden registrar como máximo 32 funciones "
"de limpieza. Cuando el registro sea exitoso, :c:func:`Py_AtExit` devuelve "
"``0``; en caso de fallo, devuelve ``-1``. La última función de limpieza "
"registrada es la primera en ser llamada. Cada función de limpieza será "
"llamada como máximo una vez. Dado que la finalización interna de Python se "
"habrá completado antes de la función de limpieza, no se deben llamar a las "
"API de Python por *func*."

#: ../../c-api/sys.rst:101
msgid "USE_STACKCHECK (C macro)"
msgstr "USE_STACKCHECK (macro C)"

#: ../../c-api/sys.rst:422
msgid "abort (C function)"
msgstr "abortar (función C)"

#: ../../c-api/sys.rst:441 ../../c-api/sys.rst:455
msgid "Py_FinalizeEx (C function)"
msgstr "Py_FinalizeEx (función C)"

#: ../../c-api/sys.rst:441
msgid "exit (C function)"
msgstr "exit (función C)"

#: ../../c-api/sys.rst:455
msgid "cleanup functions"
msgstr "funciones de limpieza"
