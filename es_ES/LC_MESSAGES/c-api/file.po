# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "Objetos de archivo"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""
"Эти API представляют собой минимальную эмуляцию Python 2 C API для "
"встроенных файловых объектов, которые раньше полагались на поддержку "
"буферизованного ввода-вывода (:c:expr:`FILE*`) из стандартной библиотеки C. "
"В Python 3 файлы и потоки используют новый модуль :mod:`io`, который "
"определяет несколько уровней над низкоуровневым не буферизованным вводом-"
"выводом операционной системы. Функции, описанные ниже, являются удобными "
"оболочками на языке Си для этих новых API и предназначены в основном для "
"сообщения о внутренних ошибках в интерпретаторе; стороннему коду "
"рекомендуется вместо этого обращаться к API :mod:`io`."

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"Crea un objeto archivo Python a partir del descriptor de archivo de un "
"archivo *fd* ya abierto.  Los argumentos *name*, *encoding*, *errors* y "
"*newline* pueden ser ``NULL`` para usar los valores por defecto; *buffering* "
"puede ser *-1* para usar el valor por defecto. *name* se ignora y se "
"mantiene por compatibilidad con versiones anteriores. Devuelve ``NULL`` en "
"caso de fallo. Para una descripción más completa de los argumentos, "
"consultar la documentación de la función :func:`io.open`."

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Dado que los flujos de Python tienen su propia capa de almacenamiento en "
"búfer, mezclarlos con descriptores de archivo a nivel de sistema operativo "
"puede producir varios problemas (como el ordenamiento inesperado de los "
"datos)."

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "Ignora el atributo *name*."

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""
"Возвращает файловый дескриптор, связанный с *p*, в виде :c:expr:`int`. Если "
"объект является целым числом, возвращается его значение. Если нет, то "
"вызывается метод объекта :meth:`~io.IOBase.fileno`, если он существует; "
"метод должен возвращать целое число, которое возвращается в качестве "
"значения файлового дескриптора. Устанавливает исключение и возвращает ``-1`` "
"в случае сбоя."

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"Equivalente a ``p.readline([n])``, esta función lee una línea del objeto "
"*p*.  *p* puede ser un objeto fichero o cualquier objeto con un método :meth:"
"`~io.IOBase.readline`.  Si *n* es ``0``, se lee exactamente una línea, "
"independientemente de la longitud de la línea.  Si *n* es mayor que ``0``, "
"no se leerán más de *n* bytes del fichero; se puede devolver una línea "
"parcial.  En ambos casos, se devuelve una cadena vacía si se alcanza "
"inmediatamente el final del fichero.  Si *n* es menor que ``0``, sin "
"embargo, se lee una línea independientemente de la longitud, pero se "
"devuelve :exc:`EOFError` si se alcanza el final del fichero inmediatamente."

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""
"Anula el comportamiento normal de :func:`io.open_code` para pasar su "
"parámetro a través del manejador proporcionado."

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr "*Обработчик* — это функция типа:"

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""
"Эквивалент :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, где "
"*path* гарантированно будет :c:type:`PyUnicodeObject`."

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"El puntero *userData* se pasa a la función gancho. Dado que las funciones "
"gancho se pueden llamar en diferentes tiempos de ejecución, este puntero no "
"debe referirse directamente al estado de Python."

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""
"Dado que este hook se utiliza intencionadamente durante la importación, "
"evite importar nuevos módulos durante su ejecución a menos que se sepa que "
"están congelados o disponibles en ``sys.modules``."

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""
"Una vez que se ha establecido un gancho, no puede ser eliminado o "
"reemplazado, y las llamadas posteriores a :c:func:`PyFile_SetOpenCodeHook` "
"fallarán. En caso de fallo, la función devuelve -1 y lanza una excepción si "
"se ha inicializado el intérprete."

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "Es seguro llamar a esta función antes de :c:func:`Py_Initialize`."

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""
"Lanza un evento :ref:`auditing <auditing>` ``setopencodehook`` sin "
"argumentos."

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Записывает объект *obj* в файл object *p*. Единственным поддерживаемым "
"флагом для *flags* является :c:macro:`Py_PRINT_RAW`; если он задан, то "
"вместо :func:`repr` записывается :func:`str` объекта. Верните ``0`` в случае "
"успеха или ``-1`` в случае сбоя; будет установлено соответствующее "
"исключение."

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Escribe la cadena *s* en el objeto de archivo *p*.  Devuelve ``0`` en caso "
"de éxito o ``-1`` en caso de fallo; se establecerá la excepción apropiada."

#: ../../c-api/file.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/file.rst:8
msgid "file"
msgstr "plik"

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr "EOFError (встроенное исключение)"

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr "Py_PRINT_RAW (C макрос)"
