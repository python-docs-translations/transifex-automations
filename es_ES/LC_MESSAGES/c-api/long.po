# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-28 14:58+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "Objetos enteros"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""
"Todos los números enteros se implementan como objetos enteros \"long\" de "
"tamaño arbitrario."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"En caso de error, la mayoría de las API ``PyLong_As*`` devuelven ``(return "
"type)-1``, que no puede distinguirse de un número.  Utilizar :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa un objeto entero de Python."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo entero de "
"Python. Es el mismo objeto que :class:`int` en la capa Python."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Devuelve true si su argumento es un :c:type:`PyLongObject` o un subtipo de :"
"c:type:`PyLongObject`. Esta función siempre tiene éxito."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"Devuelve true si su argumento es un :c:type:`PyLongObject`, pero no un "
"subtipo de :c:type:`PyLongObject`. Esta función siempre tiene éxito."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` de *v*, o ``NULL`` en caso "
"de fallo."

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"La implementación actual mantiene un array de objetos enteros para todos los "
"enteros entre ``-5`` y ``256``. Cuando se crea un int en ese rango, en "
"realidad sólo se obtiene una referencia al objeto existente."

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de un C :c:expr:"
"`unsigned long`, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de un objeto C :c:"
"type:`Py_ssize_t`, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de un objeto C :c:"
"type:`size_t`, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de un C :c:expr:"
"`long long`, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de un C :c:expr:"
"`unsigned long long`, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"Devuelve un nuevo objeto :c:type:`PyLongObject` a partir de la parte entera "
"de *v*, o ``NULL`` en caso de fallo."

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""
"Devuelve un nuevo :c:type:`PyLongObject` basado en el valor de la cadena en "
"*str*, que se interpreta según el radix en *base*, o ``NULL`` en caso de "
"fallo.  Si *pend* no es``NULL``, *\\*pend* apuntará al final de *str* en "
"caso de éxito o al primer carácter que no pudo ser procesado en caso de "
"error.  Si *base* es ``0``, *str* se interpreta utilizando la definición de :"
"ref:`integers`; en este caso, los ceros a la izquierda en un número decimal "
"distinto de cero provocan un :exc:`ValueError`. Si *base* no es ``0``, debe "
"estar entre ``2`` y ``36``, ambos inclusive.  Se ignoran los espacios en "
"blanco iniciales y finales y los guiones bajos simples después de un "
"especificador de base y entre dígitos.  Si no hay dígitos o *str* no termina "
"en NULL después de los dígitos y los espacios en blanco, se producirá :exc:"
"`ValueError`."

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""
"Métodos de Python :meth:`int.to_bytes` y :meth:`int.from_bytes` para "
"convertir un :c:type:`PyLongObject` a/desde una matriz de bytes en base "
"``256``. Puedes llamarlos desde C usando :c:func:`PyObject_CallMethod`."

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr ""
"Convierte una secuencia de dígitos Unicode de la cadena *u* en un valor "
"entero de Python."

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"Crea un entero Python a partir del puntero *p*. El valor del puntero se "
"puede recuperar a partir del valor resultante utilizando :c:func:"
"`PyLong_AsVoidPtr`."

#: ../../c-api/long.rst:123 ../../c-api/long.rst:151
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`long` de *obj*.  Si *obj* no es una "
"instancia de :c:type:`PyLongObject`, llame primero a su método :meth:"
"`~object.__index__` (si existe) para convertirlo en :c:type:`PyLongObject`."

#: ../../c-api/long.rst:127
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
":exc:`OverflowError` si el valor de *obj* está fuera del rango de :c:expr:"
"`long`."

#: ../../c-api/long.rst:130 ../../c-api/long.rst:160 ../../c-api/long.rst:181
#: ../../c-api/long.rst:201 ../../c-api/long.rst:224
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Devuelve ``-1`` en caso de error.  Utilizar :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:132 ../../c-api/long.rst:162 ../../c-api/long.rst:183
#: ../../c-api/long.rst:205 ../../c-api/long.rst:289 ../../c-api/long.rst:309
msgid "Use :meth:`~object.__index__` if available."
msgstr "Utilice :meth:`~object.__index__` si está disponible."

#: ../../c-api/long.rst:135 ../../c-api/long.rst:165 ../../c-api/long.rst:186
#: ../../c-api/long.rst:208 ../../c-api/long.rst:292 ../../c-api/long.rst:312
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "Esta función ya no utilizará :meth:`~object.__int__`."

#: ../../c-api/long.rst:142
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` or "
"another exception."
msgstr ""
"Un alias :term:`soft deprecated`. Exactamente equivalente al preferido "
"``PyLong_AsLong``. En particular, puede fallar con :exc:`OverflowError` u "
"otra excepción."

#: ../../c-api/long.rst:146
msgid "The function is soft deprecated."
msgstr "La función está en desuso."

#: ../../c-api/long.rst:155
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Si el valor de *obj* es mayor que :c:macro:`LONG_MAX` o menor que :c:macro:"
"`LONG_MIN`, ponga *\\*overflow* a ``1`` o ``-1``, respectivamente, y "
"devuelva ``-1``; de lo contrario, ponga *\\*overflow* a ``0``. Si ocurre "
"cualquier otra excepción ponga *\\*overflow* a ``0`` y devuelva ``-1`` como "
"de costumbre."

#: ../../c-api/long.rst:174 ../../c-api/long.rst:192
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`long long` de *obj*.  Si *obj* no es "
"una instancia de :c:type:`PyLongObject`, llame primero a su método :meth:"
"`~object.__index__` (si existe) para convertirlo en :c:type:`PyLongObject`."

#: ../../c-api/long.rst:178
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *obj* está fuera de rango para un :"
"c:expr:`long long`."

#: ../../c-api/long.rst:196
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"Si el valor de *obj* es mayor que :c:macro:`LLONG_MAX` o menor que :c:macro:"
"`LLONG_MIN`, ponga *\\*overflow* a ``1`` o ``-1``, respectivamente, y "
"devuelva ``-1``; de lo contrario, ponga *\\*overflow* a ``0``. Si ocurre "
"cualquier otra excepción ponga *\\*overflow* a ``0`` y devuelva ``-1`` como "
"de costumbre."

#: ../../c-api/long.rst:218
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"Devolver una representación C :c:type:`Py_ssize_t` de *pylong*.  *pylong* "
"debe ser una instancia de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:221
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"Lanzar :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`Py_ssize_t`."

#: ../../c-api/long.rst:233
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`unsigned long` de *pylong*.  *pylong* "
"debe ser una instancia de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:236
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:expr:`unsigned long`."

#: ../../c-api/long.rst:239
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Devuelve ``(unsigned long)-1`` en caso de error. Utilizar :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:type:`size_t` de *pylong*.  *pylong* debe "
"ser una instancia de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:type:`size_t`."

#: ../../c-api/long.rst:255
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Devuelve ``(size_t)-1`` en caso de error. Usar :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:264
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`unsigned long long` de *pylong*.  "
"*pylong* debe ser una instancia de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:267
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:expr:`unsigned long long`."

#: ../../c-api/long.rst:270
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Devuelve ``(unsigned long long)-1`` en caso de error. Usar :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:273
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"Un *pylong* negativo ahora sube :exc:`OverflowError`, no :exc:`TypeError`."

#: ../../c-api/long.rst:279
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`unsigned long` de *obj*.  Si *obj* no "
"es una instancia de :c:type:`PyLongObject`, llame primero a su método :meth:"
"`~object.__index__` (si existe) para convertirlo en :c:type:`PyLongObject`."

#: ../../c-api/long.rst:283
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"Si el valor de *obj* está fuera de rango para un :c:expr:`unsigned long`, "
"devuelve la reducción de ese valor módulo ``ULONG_MAX + 1``."

#: ../../c-api/long.rst:286
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"Devuelve ``(unsigned long)-1`` en caso de error.  Utilice :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:298
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`unsigned long long` de *obj*.  Si "
"*obj* no es una instancia de :c:type:`PyLongObject`, llame primero a su "
"método :meth:`~object.__index__` (si existe) para convertirlo en :c:type:"
"`PyLongObject`."

#: ../../c-api/long.rst:303
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"Si el valor de *obj* está fuera de rango para un :c:expr:`unsigned long "
"long`, devuelve la reducción de ese valor módulo ``ULLONG_MAX + 1``."

#: ../../c-api/long.rst:306
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"Devuelve ``(unsigned long long)-1`` en caso de error.  Usar :c:func:"
"`PyErr_Occurred` para desambiguar."

#: ../../c-api/long.rst:318
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"Devuelve una representación C :c:expr:`double` de *pylong*.  *pylong* debe "
"ser una instancia de :c:type:`PyLongObject`."

#: ../../c-api/long.rst:321
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"Lanza :exc:`OverflowError` si el valor de *pylong* está fuera de rango para "
"un :c:expr:`double`."

#: ../../c-api/long.rst:324
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Devuelve ``-1.0`` en caso de error.  Usar :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:329
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Convierte un entero Python *pylong* en un puntero C :c:expr:`void`. Si "
"*pylong* no puede convertirse, se producirá un error :exc:`OverflowError`.  "
"Esto sólo se asegura para producir un puntero :c:expr:`void` utilizable para "
"valores creados con :c:func:`PyLong_FromVoidPtr`."

#: ../../c-api/long.rst:334
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"Devuelve ``NULL`` en caso de error.  Usar :c:func:`PyErr_Occurred` para "
"desambiguar."

#: ../../c-api/long.rst:339
msgid ""
"On success, return a read only :term:`named tuple`, that holds information "
"about Python's internal representation of integers. See :data:`sys.int_info` "
"for description of individual fields."
msgstr ""
"En caso de éxito, devuelve :term:`named tuple` de sólo lectura, que contiene "
"información sobre la representación interna de Python de los enteros. Ver :"
"data:`sys.int_info` para una descripción de los campos individuales."

#: ../../c-api/long.rst:343
msgid "On failure, return ``NULL`` with an exception set."
msgstr "En caso de fallo, devuelve ``NULL`` con un conjunto de excepciones."

#: ../../c-api/long.rst:350
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr "Devuelve 1 si *op* es compacto, 0 en caso contrario."

#: ../../c-api/long.rst:352
msgid ""
"This function makes it possible for performance-critical code to implement a "
"“fast path” for small integers. For compact values use :c:func:"
"`PyUnstable_Long_CompactValue`; for others fall back to a :c:func:"
"`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`calling "
"<PyObject_CallMethod>` :meth:`int.to_bytes`."
msgstr ""
"Esta función hace posible que el código de rendimiento crítico implemente "
"una “fast path” para enteros pequeños. Para valores compactos utilice :c:"
"func:`PyUnstable_Long_CompactValue`; para otros recurra a una función :c:"
"func:`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`calling "
"<PyObject_CallMethod>` :meth:`int.to_bytes` ."

#: ../../c-api/long.rst:358
msgid "The speedup is expected to be negligible for most users."
msgstr ""
"Se espera que el aumento de velocidad sea insignificante para la mayoría de "
"los usuarios."

#: ../../c-api/long.rst:360
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr ""
"Qué valores se consideran compactos es un detalle de implementación y está "
"sujeto a cambios."

#: ../../c-api/long.rst:368
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr ""
"Si *op* es compacto, tal y como determina :c:func:"
"`PyUnstable_Long_IsCompact`, devuelve su valor."

#: ../../c-api/long.rst:371
msgid "Otherwise, the return value is undefined."
msgstr "En caso contrario, el valor de retorno es indefinido."

#: ../../c-api/long.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "entero largo"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "entero"

#: ../../c-api/long.rst:119
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (macro C)"

#: ../../c-api/long.rst:119 ../../c-api/long.rst:171 ../../c-api/long.rst:214
#: ../../c-api/long.rst:229 ../../c-api/long.rst:245 ../../c-api/long.rst:261
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (excepción incorporada)"

#: ../../c-api/long.rst:214
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (macro C)"

#: ../../c-api/long.rst:229
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (macro C)"

#: ../../c-api/long.rst:245
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (macro C)"
