# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/perfmaps.rst:6
msgid "Support for Perf Maps"
msgstr "Soporte para Perf Maps"

#: ../../c-api/perfmaps.rst:8
msgid ""
"On supported platforms (as of this writing, only Linux), the runtime can "
"take advantage of *perf map files* to make Python functions visible to an "
"external profiling tool (such as `perf <https://perf.wiki.kernel.org/index."
"php/Main_Page>`_). A running process may create a file in the ``/tmp`` "
"directory, which contains entries that can map a section of executable code "
"to a name. This interface is described in the `documentation of the Linux "
"Perf tool <https://git.kernel.org/pub/scm/linux/ kernel/git/torvalds/linux."
"git/tree/tools/perf/Documentation/jit-interface.txt>`_."
msgstr ""
"En las plataformas soportadas (en el momento de escribir esto, sólo Linux), "
"el tiempo de ejecución puede aprovecharse de *perf map files* para hacer "
"visibles las funciones de Python a una herramienta externa de perfilado "
"(como `perf <https://perf.wiki.kernel.org/index.php/Main_Page>`_). Un "
"proceso en ejecución puede crear un fichero en el directorio ``/tmp``, que "
"contiene entradas que pueden mapear una sección de código ejecutable a un "
"nombre. Esta interfaz se describe en la `documentación de la herramienta "
"Perf de Linux <https://git.kernel.org/pub/scm/linux/ kernel/git/torvalds/"
"linux.git/tree/tools/perf/Documentation/jit-interface.txt>`_."

#: ../../c-api/perfmaps.rst:16
msgid ""
"In Python, these helper APIs can be used by libraries and features that rely "
"on generating machine code on the fly."
msgstr ""
"En Python, estas API de ayuda pueden ser utilizadas por bibliotecas y "
"funciones que dependen de la generación de código máquina sobre la marcha."

#: ../../c-api/perfmaps.rst:19
msgid ""
"Note that holding the Global Interpreter Lock (GIL) is not required for "
"these APIs."
msgstr ""
"Tenga en cuenta que para estas APIs no es necesario mantener el Bloqueo "
"Global del Intérprete (GIL)."

#: ../../c-api/perfmaps.rst:23
msgid ""
"Open the ``/tmp/perf-$pid.map`` file, unless it's already opened, and create "
"a lock to ensure thread-safe writes to the file (provided the writes are "
"done through :c:func:`PyUnstable_WritePerfMapEntry`). Normally, there's no "
"need to call this explicitly; just use :c:func:"
"`PyUnstable_WritePerfMapEntry` and it will initialize the state on first "
"call."
msgstr ""
"Abre el archivo ``/tmp/perf-$pid.map``, a menos que ya esté abierto, y crea "
"un bloqueo para garantizar que las escrituras en el archivo sean seguras "
"(siempre que las escrituras se realicen a través de :c:func:"
"`PyUnstable_WritePerfMapEntry`). Normalmente, no hay necesidad de llamar a "
"esto explícitamente; sólo tiene que utilizar :c:func:"
"`PyUnstable_WritePerfMapEntry` y se inicializará el estado en la primera "
"llamada."

#: ../../c-api/perfmaps.rst:29
msgid ""
"Returns ``0`` on success, ``-1`` on failure to create/open the perf map "
"file, or ``-2`` on failure to create a lock. Check ``errno`` for more "
"information about the cause of a failure."
msgstr ""
"Devuelve ``0`` en caso de éxito, ``-1`` en caso de fallo al crear/abrir el "
"archivo de mapa de rendimiento, o ``-2`` en caso de fallo al crear un "
"bloqueo. Consulte ``errno`` para obtener más información sobre la causa de "
"un fallo."

#: ../../c-api/perfmaps.rst:35
msgid ""
"Write one single entry to the ``/tmp/perf-$pid.map`` file. This function is "
"thread safe. Here is what an example entry looks like::"
msgstr ""
"Escribe una única entrada en el archivo ``/tmp/perf-$pid.map``. Esta función "
"es thread safe. Aquí está lo que una entrada de ejemplo parece::"

#: ../../c-api/perfmaps.rst:38
msgid ""
"# address      size  name\n"
"7f3529fcf759 b     py::bar:/run/t.py"
msgstr ""
"# dirección    tamaño nombre\n"
"7f3529fcf759 b     py::bar:/run/t.py"

#: ../../c-api/perfmaps.rst:41
msgid ""
"Will call :c:func:`PyUnstable_PerfMapState_Init` before writing the entry, "
"if the perf map file is not already opened. Returns ``0`` on success, or the "
"same error codes as :c:func:`PyUnstable_PerfMapState_Init` on failure."
msgstr ""
"Llamará a :c:func:`PyUnstable_PerfMapState_Init` antes de escribir la "
"entrada, si el archivo de mapa de perf no está ya abierto. Devuelve ``0`` en "
"caso de éxito, o los mismos códigos de error que :c:func:"
"`PyUnstable_PerfMapState_Init` en caso de fallo."

#: ../../c-api/perfmaps.rst:47
msgid ""
"Close the perf map file opened by :c:func:`PyUnstable_PerfMapState_Init`. "
"This is called by the runtime itself during interpreter shut-down. In "
"general, there shouldn't be a reason to explicitly call this, except to "
"handle specific scenarios such as forking."
msgstr ""
"Cierra el archivo de mapa de rendimiento abierto por :c:func:"
"`PyUnstable_PerfMapState_Init`. Esto es llamado por el propio runtime "
"durante el cierre del intérprete. En general, no debería haber una razón "
"para llamar explícitamente a esto, excepto para manejar escenarios "
"específicos como la bifurcación."
