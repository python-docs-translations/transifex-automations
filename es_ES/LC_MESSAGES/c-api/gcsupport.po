# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr "Recogida de basura cíclica"

#: ../../c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types which "
"do not store references to other objects, or which only store references to "
"atomic types (such as numbers or strings), do not need to provide any "
"explicit support for garbage collection."
msgstr ""
"El soporte de Python para detectar y recoger basura que implique referencias "
"circulares requiere el soporte de tipos de objetos que son \"containers\" de "
"otros objetos que también pueden ser contenedores.  Los tipos que no "
"almacenan referencias a otros objetos, o que sólo almacenan referencias a "
"tipos atómicos (como números o cadenas), no necesitan proporcionar ningún "
"soporte explícito para la recolección de basura."

#: ../../c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :c:member:`~PyTypeObject.tp_flags` field of "
"the type object must include the :c:macro:`Py_TPFLAGS_HAVE_GC` and provide "
"an implementation of the :c:member:`~PyTypeObject.tp_traverse` handler.  If "
"instances of the type are mutable, a :c:member:`~PyTypeObject.tp_clear` "
"implementation must also be provided."
msgstr ""
"Para crear un tipo contenedor, el campo :c:member:`~PyTypeObject.tp_flags` "
"del objeto de tipo debe incluir el :c:macro:`Py_TPFLAGS_HAVE_GC` y "
"proporcionar una implementación del manejador :c:member:`~PyTypeObject."
"tp_traverse`.  Si las instancias del tipo son mutables, también debe "
"proporcionarse una implementación de :c:member:`~PyTypeObject.tp_clear`."

#: ../../c-api/gcsupport.rst:21
msgid ":c:macro:`Py_TPFLAGS_HAVE_GC`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_GC`"

#: ../../c-api/gcsupport.rst:22
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""
"Los objetos con un tipo con esta bandera establecida deben ajustarse a las "
"reglas documentadas aquí.  Por comodidad, estos objetos se denominarán "
"objetos contenedores."

#: ../../c-api/gcsupport.rst:26
msgid "Constructors for container types must conform to two rules:"
msgstr "Los constructores de tipos contenedores deben cumplir dos reglas:"

#: ../../c-api/gcsupport.rst:28
msgid ""
"The memory for the object must be allocated using :c:macro:`PyObject_GC_New` "
"or :c:macro:`PyObject_GC_NewVar`."
msgstr ""
"La memoria para el objeto debe asignarse utilizando :c:macro:"
"`PyObject_GC_New` o :c:macro:`PyObject_GC_NewVar`."

#: ../../c-api/gcsupport.rst:31
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr ""
"Una vez inicializados todos los campos que puedan contener referencias a "
"otros contenedores, hay que llamar a :c:func:`PyObject_GC_Track`."

#: ../../c-api/gcsupport.rst:34
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr ""
"Del mismo modo, el desasignador del objeto debe ajustarse a un par de reglas "
"similares:"

#: ../../c-api/gcsupport.rst:37
msgid ""
"Before fields which refer to other containers are invalidated, :c:func:"
"`PyObject_GC_UnTrack` must be called."
msgstr ""
"Antes de invalidar los campos que hacen referencia a otros contenedores, se "
"debe llamar a :c:func:`PyObject_GC_UnTrack`."

#: ../../c-api/gcsupport.rst:40
msgid ""
"The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr ""
"La memoria del objeto debe ser liberada mediante :c:func:`PyObject_GC_Del`."

#: ../../c-api/gcsupport.rst:43
msgid ""
"If a type adds the Py_TPFLAGS_HAVE_GC, then it *must* implement at least a :"
"c:member:`~PyTypeObject.tp_traverse` handler or explicitly use one from its "
"subclass or subclasses."
msgstr ""
"Si un tipo añade el Py_TPFLAGS_HAVE_GC, entonces *debe* implementar al menos "
"un manejador :c:member:`~PyTypeObject.tp_traverse` o usar explícitamente uno "
"de su subclase o subclases."

#: ../../c-api/gcsupport.rst:47
msgid ""
"When calling :c:func:`PyType_Ready` or some of the APIs that indirectly call "
"it like :c:func:`PyType_FromSpecWithBases` or :c:func:`PyType_FromSpec` the "
"interpreter will automatically populate the :c:member:`~PyTypeObject."
"tp_flags`, :c:member:`~PyTypeObject.tp_traverse` and :c:member:"
"`~PyTypeObject.tp_clear` fields if the type inherits from a class that "
"implements the garbage collector protocol and the child class does *not* "
"include the :c:macro:`Py_TPFLAGS_HAVE_GC` flag."
msgstr ""
"Cuando se llama a :c:func:`PyType_Ready` o a algunas de las APIs que lo "
"llaman indirectamente como :c:func:`PyType_FromSpecWithBases` o :c:func:"
"`PyType_FromSpec` el intérprete rellenará automáticamente los campos :c:"
"member:`~PyTypeObject.tp_flags`, :c:member:`~PyTypeObject.tp_traverse` y :c:"
"member:`~PyTypeObject.tp_clear` si el tipo hereda de una clase que "
"implementa el protocolo del recolector de basura y la clase hija *no* "
"incluye la bandera :c:macro:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/gcsupport.rst:57
msgid ""
"Analogous to :c:macro:`PyObject_New` but for container objects with the :c:"
"macro:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
"Análogo a :c:macro:`PyObject_New` pero para objetos contenedores con la "
"bandera :c:macro:`Py_TPFLAGS_HAVE_GC` activada."

#: ../../c-api/gcsupport.rst:62
msgid ""
"Analogous to :c:macro:`PyObject_NewVar` but for container objects with the :"
"c:macro:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
"Análogo a :c:macro:`PyObject_NewVar` pero para objetos contenedores con la "
"bandera :c:macro:`Py_TPFLAGS_HAVE_GC` activada."

#: ../../c-api/gcsupport.rst:67
msgid ""
"Analogous to :c:macro:`PyObject_GC_New` but allocates *extra_size* bytes at "
"the end of the object (at offset :c:member:`~PyTypeObject.tp_basicsize`). "
"The allocated memory is initialized to zeros, except for the :c:type:`Python "
"object header <PyObject>`."
msgstr ""
"Análogo a :c:macro:`PyObject_GC_New` pero asigna *extra_size* bytes al final "
"del objeto (en el offset :c:member:`~PyTypeObject.tp_basicsize`). La memoria "
"asignada se inicializa a ceros, excepto para la cabecera del objeto :c:type:"
"`Python <PyObject>`."

#: ../../c-api/gcsupport.rst:73
msgid ""
"The extra data will be deallocated with the object, but otherwise it is not "
"managed by Python."
msgstr ""
"Los datos extra serán reasignados con el objeto, pero por lo demás no son "
"gestionados por Python."

#: ../../c-api/gcsupport.rst:77
msgid ""
"The function is marked as unstable because the final mechanism for reserving "
"extra data after an instance is not yet decided. For allocating a variable "
"number of fields, prefer using :c:type:`PyVarObject` and :c:member:"
"`~PyTypeObject.tp_itemsize` instead."
msgstr ""
"La función está marcada como inestable porque aún no se ha decidido el "
"mecanismo definitivo para reservar datos adicionales después de una "
"instancia. Para asignar un número variable de campos, prefiera utilizar :c:"
"type:`PyVarObject` y :c:member:`~PyTypeObject.tp_itemsize` en su lugar."

#: ../../c-api/gcsupport.rst:88
msgid ""
"Resize an object allocated by :c:macro:`PyObject_NewVar`. Returns the "
"resized object of type ``TYPE*`` (refers to any C type) or ``NULL`` on "
"failure."
msgstr ""
"Redimensiona un objeto asignado por :c:macro:`PyObject_NewVar`. Devuelve el "
"objeto redimensionado de tipo ``TYPE*`` (se refiere a cualquier tipo C) o "
"``NULL`` en caso de fallo."

#: ../../c-api/gcsupport.rst:92
msgid ""
"*op* must be of type :c:expr:`PyVarObject *` and must not be tracked by the "
"collector yet. *newsize* must be of type :c:type:`Py_ssize_t`."
msgstr ""
"*op* debe ser del tipo :c:expr:`PyVarObject *` y aún no debe ser rastreado "
"por el recolector. *newsize* debe ser del tipo :c:type:`Py_ssize_t`."

#: ../../c-api/gcsupport.rst:99
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :c:member:`~PyTypeObject.tp_traverse` handler become valid, "
"usually near the end of the constructor."
msgstr ""
"Añade el objeto *op* al conjunto de objetos contenedores rastreados por el "
"recopilador.  El recolector puede ejecutarse en momentos inesperados, por lo "
"que los objetos han de ser válidos mientras se rastrean.  Debe llamarse una "
"vez que todos los campos seguidos por el manejador :c:member:`~PyTypeObject."
"tp_traverse` sean válidos, normalmente cerca del final del constructor."

#: ../../c-api/gcsupport.rst:108
msgid ""
"Returns non-zero if the object implements the garbage collector protocol, "
"otherwise returns 0."
msgstr ""
"Devuelve un valor distinto de cero si el objeto implementa el protocolo del "
"recolector de basura; en caso contrario, devuelve 0."

#: ../../c-api/gcsupport.rst:111
msgid ""
"The object cannot be tracked by the garbage collector if this function "
"returns 0."
msgstr ""
"Si esta función devuelve 0, el objeto no se puede rastrear por el recolector "
"de basura."

#: ../../c-api/gcsupport.rst:116
msgid ""
"Returns 1 if the object type of *op* implements the GC protocol and *op* is "
"being currently tracked by the garbage collector and 0 otherwise."
msgstr ""
"Devuelve 1 si el tipo de objeto de *op* implementa el protocolo GC y *op* "
"está siendo actualmente rastreado por el recolector de basura y 0 en caso "
"contrario."

#: ../../c-api/gcsupport.rst:119
msgid "This is analogous to the Python function :func:`gc.is_tracked`."
msgstr "Esto es análogo a la función de Python :func:`gc.is_tracked`."

#: ../../c-api/gcsupport.rst:126
msgid ""
"Returns 1 if the object type of *op* implements the GC protocol and *op* has "
"been already finalized by the garbage collector and 0 otherwise."
msgstr ""
"Devuelve 1 si el tipo de objeto de *op* implementa el protocolo GC y *op* ya "
"ha sido finalizado por el recolector de basura y 0 en caso contrario."

#: ../../c-api/gcsupport.rst:129
msgid "This is analogous to the Python function :func:`gc.is_finalized`."
msgstr "Esto es análogo a la función de Python :func:`gc.is_finalized`."

#: ../../c-api/gcsupport.rst:136
msgid ""
"Releases memory allocated to an object using :c:macro:`PyObject_GC_New` or :"
"c:macro:`PyObject_GC_NewVar`."
msgstr ""
"Libera la memoria asignada a un objeto mediante :c:macro:`PyObject_GC_New` "
"o :c:macro:`PyObject_GC_NewVar`."

#: ../../c-api/gcsupport.rst:142
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The deallocator (:"
"c:member:`~PyTypeObject.tp_dealloc` handler) should call this for the object "
"before any of the fields used by the :c:member:`~PyTypeObject.tp_traverse` "
"handler become invalid."
msgstr ""
"Elimina el objeto *op* del conjunto de objetos contenedores rastreados por "
"el recolector.  Tener en cuenta que :c:func:`PyObject_GC_Track` se puede "
"llamar de nuevo a este objeto para añadirlo de nuevo al conjunto de objetos "
"rastreados.  El no asignador (gestor de:c:member:`~PyTypeObject."
"tp_dealloc` ) debe llamar a esto para el objeto antes de que cualquiera de "
"los campos utilizados por el gestor de :c:member:`~PyTypeObject.tp_traverse` "
"deje de ser válido."

#: ../../c-api/gcsupport.rst:151
msgid ""
"The :c:func:`!_PyObject_GC_TRACK` and :c:func:`!_PyObject_GC_UNTRACK` macros "
"have been removed from the public C API."
msgstr ""
"Las macros :c:func:`!_PyObject_GC_TRACK` y :c:func:`!_PyObject_GC_UNTRACK` "
"se han eliminado de la API pública de C."

#: ../../c-api/gcsupport.rst:154
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler accepts a function "
"parameter of this type:"
msgstr ""
"El manejador :c:member:`~PyTypeObject.tp_traverse` acepta un parámetro de "
"función de este tipo:"

#: ../../c-api/gcsupport.rst:159
msgid ""
"Type of the visitor function passed to the :c:member:`~PyTypeObject."
"tp_traverse` handler. The function should be called with an object to "
"traverse as *object* and the third parameter to the :c:member:`~PyTypeObject."
"tp_traverse` handler as *arg*.  The Python core uses several visitor "
"functions to implement cyclic garbage detection; it's not expected that "
"users will need to write their own visitor functions."
msgstr ""
"Tipo de la función visitante pasada al manejador :c:member:`~PyTypeObject."
"tp_traverse`. La función debe llamarse con un objeto a recorrer como "
"*object* y el tercer parámetro al manejador :c:member:`~PyTypeObject."
"tp_traverse` como *arg*.  El núcleo de Python utiliza varias funciones de "
"visitante para implementar la detección cíclica de basura; no se espera que "
"los usuarios tengan que escribir sus propias funciones de visitante."

#: ../../c-api/gcsupport.rst:166
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler must have the following "
"type:"
msgstr ""
"El manejador :c:member:`~PyTypeObject.tp_traverse` debe tener el siguiente "
"tipo:"

#: ../../c-api/gcsupport.rst:171
msgid ""
"Traversal function for a container object.  Implementations must call the "
"*visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value passed "
"to the handler.  The *visit* function must not be called with a ``NULL`` "
"object argument.  If *visit* returns a non-zero value that value should be "
"returned immediately."
msgstr ""
"Función transversal para un objeto contenedor..  Las implementaciones deben "
"llamar a la función *visit* para cada objeto contenido directamente por "
"*self*, siendo los parámetros de *visit* el objeto contenido y el valor "
"*arg* pasado al manejador.  La función *visit* no se debe llamar con un "
"argumento de objeto ``NULL``.  Si *visit* devuelve un valor distinto de "
"cero, dicho valor debe devolverse inmediatamente."

#: ../../c-api/gcsupport.rst:178
msgid ""
"To simplify writing :c:member:`~PyTypeObject.tp_traverse` handlers, a :c:"
"func:`Py_VISIT` macro is provided.  In order to use this macro, the :c:"
"member:`~PyTypeObject.tp_traverse` implementation must name its arguments "
"exactly *visit* and *arg*:"
msgstr ""
"Para simplificar la escritura de los manejadores de :c:member:`~PyTypeObject."
"tp_traverse`, se proporciona una macro :c:func:`Py_VISIT`.  Para poder "
"utilizar esta macro, la implementación de :c:member:`~PyTypeObject."
"tp_traverse` debe nombrar sus argumentos exactamente *visit* y *arg*:"

#: ../../c-api/gcsupport.rst:185
msgid ""
"If *o* is not ``NULL``, call the *visit* callback, with arguments *o* and "
"*arg*.  If *visit* returns a non-zero value, then return it. Using this "
"macro, :c:member:`~PyTypeObject.tp_traverse` handlers look like::"
msgstr ""
"Si *o* no es ``NULL``, llama a la llamada de retorno *visit*, con los "
"argumentos *o* y *arg*.  Si *visit* devuelve un valor distinto de cero, "
"devuélvalo. Usando esta macro, los manejadores de :c:member:`~PyTypeObject."
"tp_traverse` se ven como::"

#: ../../c-api/gcsupport.rst:190
msgid ""
"static int\n"
"my_traverse(Noddy *self, visitproc visit, void *arg)\n"
"{\n"
"    Py_VISIT(self->foo);\n"
"    Py_VISIT(self->bar);\n"
"    return 0;\n"
"}"
msgstr ""
"static int\n"
"my_traverse(Noddy *self, visitproc visit, void *arg)\n"
"{\n"
"    Py_VISIT(self->foo);\n"
"    Py_VISIT(self->bar);\n"
"    return 0;\n"
"}"

#: ../../c-api/gcsupport.rst:198
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` handler must be of the :c:type:"
"`inquiry` type, or ``NULL`` if the object is immutable."
msgstr ""
"El manejador :c:member:`~PyTypeObject.tp_clear` debe ser del tipo :c:type:"
"`inquiry`, o ``NULL`` si el objeto es inmutable."

#: ../../c-api/gcsupport.rst:204
msgid ""
"Drop references that may have created reference cycles.  Immutable objects "
"do not have to define this method since they can never directly create "
"reference cycles.  Note that the object must still be valid after calling "
"this method (don't just call :c:func:`Py_DECREF` on a reference).  The "
"collector will call this method if it detects that this object is involved "
"in a reference cycle."
msgstr ""
"Elimina las referencias que puedan haber creado ciclos de referencia.  Los "
"objetos inmutables no tienen que definir este método ya que nunca pueden "
"crear directamente ciclos de referencia.  Tener en cuenta que el objeto debe "
"seguir siendo válido después de llamar a este método (no llamar simplemente "
"a :c:func:`Py_DECREF` en una referencia).  El recolector llamará a este "
"método si detecta que este objeto está involucrado en un ciclo de referencia."

#: ../../c-api/gcsupport.rst:213
msgid "Controlling the Garbage Collector State"
msgstr "Control del estado del recolector de basura"

#: ../../c-api/gcsupport.rst:215
msgid ""
"The C-API provides the following functions for controlling garbage "
"collection runs."
msgstr ""
"La C-API proporciona las siguientes funciones para controlar las ejecuciones "
"de recolección de basura."

#: ../../c-api/gcsupport.rst:220
msgid ""
"Perform a full garbage collection, if the garbage collector is enabled. "
"(Note that :func:`gc.collect` runs it unconditionally.)"
msgstr ""
"Realiza una recolección de basura completa, si el recolector de basura está "
"habilitado. (Tenga en cuenta que :func:`gc.collect` lo ejecuta "
"incondicionalmente)."

#: ../../c-api/gcsupport.rst:223
msgid ""
"Returns the number of collected + unreachable objects which cannot be "
"collected. If the garbage collector is disabled or already collecting, "
"returns ``0`` immediately. Errors during garbage collection are passed to :"
"data:`sys.unraisablehook`. This function does not raise exceptions."
msgstr ""
"Devuelve el número de objetos recogidos + no alcanzables que no se pueden "
"recoger. Si el recolector de basura está deshabilitado o ya está "
"recolectando, devuelve ``0`` inmediatamente. Los errores durante la "
"recolección de basura se pasan a :data:`sys.unraisablehook`. Esta función no "
"lanza excepciones."

#: ../../c-api/gcsupport.rst:233
msgid ""
"Enable the garbage collector: similar to :func:`gc.enable`. Returns the "
"previous state, 0 for disabled and 1 for enabled."
msgstr ""
"Habilitar el recolector de basura: similar a :func:`gc.enable`. Devuelve el "
"estado anterior, 0 para desactivado y 1 para activado."

#: ../../c-api/gcsupport.rst:241
msgid ""
"Disable the garbage collector: similar to :func:`gc.disable`. Returns the "
"previous state, 0 for disabled and 1 for enabled."
msgstr ""
"Desactivar el recolector de basura: similar a :func:`gc.disable`. Devuelve "
"el estado anterior, 0 para desactivado y 1 para activado."

#: ../../c-api/gcsupport.rst:249
msgid ""
"Query the state of the garbage collector: similar to :func:`gc.isenabled`. "
"Returns the current state, 0 for disabled and 1 for enabled."
msgstr ""
"Consulta el estado del recolector de basura: similar a :func:`gc.isenabled`. "
"Devuelve el estado actual, 0 para desactivado y 1 para activado."

#: ../../c-api/gcsupport.rst:256
msgid "Querying Garbage Collector State"
msgstr "Consulta del estado del recolector de basura"

#: ../../c-api/gcsupport.rst:258
msgid ""
"The C-API provides the following interface for querying information about "
"the garbage collector."
msgstr ""
"La C-API proporciona la siguiente interfaz para consultar información sobre "
"el recolector de basura."

#: ../../c-api/gcsupport.rst:263
msgid ""
"Run supplied *callback* on all live GC-capable objects. *arg* is passed "
"through to all invocations of *callback*."
msgstr ""
"Ejecuta el *callback* suministrado en todos los objetos vivos con GC. *arg* "
"se pasa a través de todas las invocaciones de *callback*."

#: ../../c-api/gcsupport.rst:267
msgid ""
"If new objects are (de)allocated by the callback it is undefined if they "
"will be visited."
msgstr ""
"Si los nuevos objetos son (de)asignados por la llamada de retorno, no está "
"definido si serán visitados."

#: ../../c-api/gcsupport.rst:270
msgid ""
"Garbage collection is disabled during operation. Explicitly running a "
"collection in the callback may lead to undefined behaviour e.g. visiting the "
"same objects multiple times or not at all."
msgstr ""
"La recogida de basura está desactivada durante el funcionamiento. Ejecutar "
"explícitamente una recolección en la devolución de llamada puede conducir a "
"un comportamiento indefinido, por ejemplo, visitar los mismos objetos varias "
"veces o no visitarlos en absoluto."

#: ../../c-api/gcsupport.rst:278
msgid ""
"Type of the visitor function to be passed to :c:func:"
"`PyUnstable_GC_VisitObjects`. *arg* is the same as the *arg* passed to "
"``PyUnstable_GC_VisitObjects``. Return ``0`` to continue iteration, return "
"``1`` to stop iteration. Other return values are reserved for now so "
"behavior on returning anything else is undefined."
msgstr ""
"Tipo de la función visitante que se pasa a :c:func:"
"`PyUnstable_GC_VisitObjects`. *arg* es el mismo que el *arg* pasado a "
"``PyUnstable_GC_VisitObjects``. Devuelve ``0`` para continuar la iteración, "
"devuelve ``1`` para detener la iteración. Otros valores de retorno están "
"reservados por ahora, por lo que el comportamiento al devolver cualquier "
"otra cosa no está definido."
