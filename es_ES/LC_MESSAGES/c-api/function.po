# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-28 14:56+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/function.rst:6
msgid "Function Objects"
msgstr "Objetos funcionales"

#: ../../c-api/function.rst:10
msgid "There are a few functions specific to Python functions."
msgstr "Existen algunas funciones específicas de Python."

#: ../../c-api/function.rst:15
msgid "The C structure used for functions."
msgstr "La estructura C utilizada para las funciones."

#: ../../c-api/function.rst:22
msgid ""
"This is an instance of :c:type:`PyTypeObject` and represents the Python "
"function type.  It is exposed to Python programmers as ``types."
"FunctionType``."
msgstr ""
"Es una instancia de :c:type:`PyTypeObject` y representa el tipo de función "
"de Python.  Se presenta a los programadores de Python como ``types."
"FunctionType``."

#: ../../c-api/function.rst:28
msgid ""
"Return true if *o* is a function object (has type :c:data:"
"`PyFunction_Type`). The parameter must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"Devuelve true si *o* es un objeto función (tiene el tipo :c:data:"
"`PyFunction_Type`). El parámetro no debe ser ``NULL``.  Esta función siempre "
"tiene éxito."

#: ../../c-api/function.rst:34
msgid ""
"Return a new function object associated with the code object *code*. "
"*globals* must be a dictionary with the global variables accessible to the "
"function."
msgstr ""
"Devuelve un nuevo objeto función asociado al objeto código *code*. *globals* "
"debe ser un diccionario con las variables globales accesibles a la función."

#: ../../c-api/function.rst:37
msgid ""
"The function's docstring and name are retrieved from the code object. :attr:"
"`~function.__module__` is retrieved from *globals*. The argument defaults, "
"annotations and closure are set to ``NULL``. :attr:`~function.__qualname__` "
"is set to the same value as the code object's :attr:`~codeobject."
"co_qualname` field."
msgstr ""
"El docstring y el nombre de la función se obtienen del objeto de código. :"
"attr:`~function.__module__` se obtiene de *globals*. Los argumentos por "
"defecto, las anotaciones y el cierre se establecen en ``NULL``. :attr:"
"`~function.__qualname__` se establece en el mismo valor que el campo :attr:"
"`~codeobject.co_qualname` del objeto de código."

#: ../../c-api/function.rst:46
msgid ""
"As :c:func:`PyFunction_New`, but also allows setting the function object's :"
"attr:`~function.__qualname__` attribute. *qualname* should be a unicode "
"object or ``NULL``; if ``NULL``, the :attr:`!__qualname__` attribute is set "
"to the same value as the code object's :attr:`~codeobject.co_qualname` field."
msgstr ""
"Como :c:func:`PyFunction_New`, pero también permite establecer el atributo :"
"attr:`~function.__qualname__` del objeto de función. *qualname* debe ser un "
"objeto unicode o ``NULL``; si es ``NULL``, el atributo :attr:`!__qualname__` "
"se establece con el mismo valor que el campo :attr:`~codeobject.co_qualname` "
"del objeto de código."

#: ../../c-api/function.rst:57
msgid "Return the code object associated with the function object *op*."
msgstr "Devuelve el objeto código asociado al objeto función *op*."

#: ../../c-api/function.rst:62
msgid "Return the globals dictionary associated with the function object *op*."
msgstr "Devuelve el diccionario globals asociado al objeto función *op*."

#: ../../c-api/function.rst:67
msgid ""
"Return a :term:`borrowed reference` to the :attr:`~function.__module__` "
"attribute of the :ref:`function object <user-defined-funcs>` *op*. It can be "
"*NULL*."
msgstr ""
"Devuelve una :term:`prestada reference` al atributo :attr:`~function."
"__module__` del :ref:`function object <user-defined-funcs>` *op*. Puede ser "
"*NULL*."

#: ../../c-api/function.rst:71
msgid ""
"This is normally a :class:`string <str>` containing the module name, but can "
"be set to any other object by Python code."
msgstr ""
"Normalmente es una :class:`string <str>` que contiene el nombre del módulo, "
"pero puede ser establecido a cualquier otro objeto por código Python."

#: ../../c-api/function.rst:77
msgid ""
"Return the argument default values of the function object *op*. This can be "
"a tuple of arguments or ``NULL``."
msgstr ""
"Devuelve los valores por defecto de los argumentos del objeto función *op*. "
"Puede ser una tupla de argumentos o ``NULL``."

#: ../../c-api/function.rst:83
msgid ""
"Set the argument default values for the function object *op*. *defaults* "
"must be ``Py_None`` or a tuple."
msgstr ""
"Establece los valores por defecto de los argumentos para el objeto función "
"*op*. *defaults* debe ser ``Py_None`` o una tupla."

#: ../../c-api/function.rst:86 ../../c-api/function.rst:109
#: ../../c-api/function.rst:123
msgid "Raises :exc:`SystemError` and returns ``-1`` on failure."
msgstr "Levanta :exc:`SystemError` y devuelve ``-1`` en caso de fallo."

#: ../../c-api/function.rst:91
msgid "Set the vectorcall field of a given function object *func*."
msgstr "Establece el campo vectorcall de un objeto función dado *func*."

#: ../../c-api/function.rst:93
msgid ""
"Warning: extensions using this API must preserve the behavior of the "
"unaltered (default) vectorcall function!"
msgstr ""
"Advertencia: ¡las extensiones que utilicen esta API deben conservar el "
"comportamiento de la función vectorcall inalterada (por defecto)!"

#: ../../c-api/function.rst:100
msgid ""
"Return the closure associated with the function object *op*. This can be "
"``NULL`` or a tuple of cell objects."
msgstr ""
"Devuelve el cierre asociado con el objeto de función *op*. Puede ser "
"``NULL`` o una tupla de objetos de celda."

#: ../../c-api/function.rst:106
msgid ""
"Set the closure associated with the function object *op*. *closure* must be "
"``Py_None`` or a tuple of cell objects."
msgstr ""
"Establece el cierre asociado al objeto de función *op*. *closure* debe ser "
"``Py_None`` o una tupla de objetos de celda."

#: ../../c-api/function.rst:114
msgid ""
"Return the annotations of the function object *op*. This can be a mutable "
"dictionary or ``NULL``."
msgstr ""
"Devuelve las anotaciones del objeto función *op*. Puede ser un diccionario "
"cambiable o ``NULL``."

#: ../../c-api/function.rst:120
msgid ""
"Set the annotations for the function object *op*. *annotations* must be a "
"dictionary or ``Py_None``."
msgstr ""
"Establece las anotaciones para el objeto función *op*. *annotations* debe "
"ser un diccionario o ``Py_None``."

#: ../../c-api/function.rst:128
msgid ""
"Register *callback* as a function watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyFunction_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registrar *callback* como observador de funciones para el intérprete actual. "
"Devuelve un ID que puede pasarse a :c:func:`PyFunction_ClearWatcher`. En "
"caso de error (por ejemplo, no hay más ID de observador disponibles), "
"devuelve ``-1`` y establece una excepción."

#: ../../c-api/function.rst:138
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyFunction_AddWatcher` for the current interpreter. Return ``0`` on "
"success, or ``-1`` and set an exception on error (e.g.  if the given "
"*watcher_id* was never registered.)"
msgstr ""
"Borra el observador identificado por *watcher_id* devuelto previamente por :"
"c:func:`PyFunction_AddWatcher` para el intérprete actual. Devuelve ``0`` en "
"caso de éxito, o ``-1`` y establece una excepción en caso de error (por "
"ejemplo, si el *watcher_id* dado nunca fue registrado)."

#: ../../c-api/function.rst:148
msgid "Enumeration of possible function watcher events:"
msgstr "Enumeración de posibles sucesos del observador de funciones:"

#: ../../c-api/function.rst:150
msgid "``PyFunction_EVENT_CREATE``"
msgstr "``PyFunction_EVENT_CREATE``"

#: ../../c-api/function.rst:151
msgid "``PyFunction_EVENT_DESTROY``"
msgstr "``PyFunction_EVENT_DESTROY``"

#: ../../c-api/function.rst:152
msgid "``PyFunction_EVENT_MODIFY_CODE``"
msgstr "``PyFunction_EVENT_MODIFY_CODE``"

#: ../../c-api/function.rst:153
msgid "``PyFunction_EVENT_MODIFY_DEFAULTS``"
msgstr "``PyFunction_EVENT_MODIFY_DEFAULTS``"

#: ../../c-api/function.rst:154
msgid "``PyFunction_EVENT_MODIFY_KWDEFAULTS``"
msgstr "``PyFunction_EVENT_MODIFY_KWDEFAULTS``"

#: ../../c-api/function.rst:161
msgid "Type of a function watcher callback function."
msgstr ""
"Tipo de una función de devolución de llamada del observador de funciones."

#: ../../c-api/function.rst:163
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE`` or ``PyFunction_EVENT_DESTROY`` "
"then *new_value* will be ``NULL``. Otherwise, *new_value* will hold a :term:"
"`borrowed reference` to the new value that is about to be stored in *func* "
"for the attribute that is being modified."
msgstr ""
"Si *event* es ``PyFunction_EVENT_CREATE`` o ``PyFunction_EVENT_DESTROY`` "
"entonces *new_value* será ``NULL``. De lo contrario, *new_value* contendrá "
"una referencia :term:`borrowed reference` al nuevo valor que está a punto de "
"ser almacenado en *func* para el atributo que está siendo modificado."

#: ../../c-api/function.rst:168
msgid ""
"The callback may inspect but must not modify *func*; doing so could have "
"unpredictable effects, including infinite recursion."
msgstr ""
"La llamada de retorno puede inspeccionar pero no debe modificar *func*; "
"hacerlo podría tener efectos impredecibles, incluyendo recursión infinita."

#: ../../c-api/function.rst:171
msgid ""
"If *event* is ``PyFunction_EVENT_CREATE``, then the callback is invoked "
"after `func` has been fully initialized. Otherwise, the callback is invoked "
"before the modification to *func* takes place, so the prior state of *func* "
"can be inspected. The runtime is permitted to optimize away the creation of "
"function objects when possible. In such cases no event will be emitted. "
"Although this creates the possibility of an observable difference of runtime "
"behavior depending on optimization decisions, it does not change the "
"semantics of the Python code being executed."
msgstr ""
"Si *event* es ``PyFunction_EVENT_CREATE``, entonces la llamada de retorno es "
"invocada después de que `func` haya sido completamente inicializado. En otro "
"caso, la llamada de retorno se invoca antes de que tenga lugar la "
"modificación de *func*, por lo que el estado previo de *func* puede ser "
"inspeccionado. El tiempo de ejecución puede optimizar la creación de objetos "
"función cuando sea posible. En tales casos no se emitirá ningún evento. "
"Aunque esto crea la posibilidad de una diferencia observable de "
"comportamiento en tiempo de ejecución dependiendo de las decisiones de "
"optimización, no cambia la semántica del código Python que se ejecuta."

#: ../../c-api/function.rst:180
msgid ""
"If *event* is ``PyFunction_EVENT_DESTROY``,  Taking a reference in the "
"callback to the about-to-be-destroyed function will resurrect it, preventing "
"it from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Si *event* es ``PyFunction_EVENT_DESTROY``, Tomar una referencia en la "
"llamada de retorno a la función a punto de ser destruida lo resucitará, "
"impidiendo que sea liberado en ese momento. Cuando el objeto resucitado sea "
"destruido más tarde, cualquier llamada de retorno activa en ese momento será "
"llamada de nuevo."

#: ../../c-api/function.rst:185
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Si la llamada de retorno establece una excepción, debe devolver ``-1``; esta "
"excepción se imprimirá como una excepción no calificable utilizando :c:func:"
"`PyErr_WriteUnraisable`. En caso contrario, debe devolver ``0``."

#: ../../c-api/function.rst:189
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"Puede que ya haya una excepción pendiente al entrar en la llamada de "
"retorno. En este caso, la llamada de retorno debe volver a ``0`` con la "
"misma excepción todavía establecida. Esto significa que la llamada de "
"retorno no puede llamar a ninguna otra API que pueda establecer una "
"excepción a menos que guarde y borre el estado de excepción primero, y lo "
"restaure antes de regresar."

#: ../../c-api/function.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/function.rst:8
msgid "function"
msgstr "función"

#: ../../c-api/function.rst:20
msgid "MethodType (in module types)"
msgstr "MethodType (en tipos de módulo)"
