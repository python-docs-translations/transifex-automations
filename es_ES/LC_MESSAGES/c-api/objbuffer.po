# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:53+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2023\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr "Protocolo de búfer antiguo"

#: ../../c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In "
"Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""
"Estas funciones formaban parte de la API del \"antiguo protocolo de búfer\" "
"en Python 2. En Python 3, este protocolo ya no existe, pero las funciones "
"siguen expuestas para facilitar la portabilidad de código 2.x.  Actúan como "
"una envoltura de compatibilidad alrededor del :ref:`nuevo protocolo de "
"buffer <bufferobjects>`, pero no te dan control sobre el tiempo de vida de "
"los recursos adquiridos cuando se exporta un buffer."

#: ../../c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the :c:func:"
"`PyArg_ParseTuple` family of functions) to get a buffer view over an object, "
"and :c:func:`PyBuffer_Release` when the buffer view can be released."
msgstr ""
"Por lo tanto, se recomienda llamar a :c:func:`PyObject_GetBuffer` (o a "
"``y*`` o ``w*``:ref:`format codes <arg-parsing>` con la familia de "
"funciones :c:func:`PyArg_ParseTuple` ) para obtener una vista de buffer "
"sobre un objeto, y a :c:func:`PyBuffer_Release` cuando la vista de buffer "
"pueda ser liberada."

#: ../../c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Devuelve un puntero a una posición de memoria de sólo lectura utilizable "
"como entrada basada en caracteres.  El argumento *obj* debe soportar la "
"interfaz de búfer de caracteres de segmento único.  En caso de éxito, "
"devuelve ``0``, establece *buffer* en la posición de memoria y *buffer_len* "
"en la longitud del buffer.  En caso de error, devuelve ``-1`` y establece :"
"exc:`TypeError`."

#: ../../c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a :exc:"
"`TypeError` on error."
msgstr ""
"Devuelve un puntero a una posición de memoria de sólo lectura que contiene "
"datos arbitrarios. El argumento *obj* debe soportar la interfaz de búfer "
"legible de segmento único.  En caso de éxito, devuelve ``0``, establece "
"*buffer* en la posición de memoria y *buffer_len* en la longitud del "
"buffer.  En caso de error, devuelve ``-1`` y establece :exc:`TypeError`."

#: ../../c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``.  This function always succeeds."
msgstr ""
"Devuelve ``1`` si *o* soporta la interfaz de búfer legible de segmento "
"único. En caso contrario devuelve ``0``.  Esta función siempre tiene éxito."

#: ../../c-api/objbuffer.rst:44
msgid ""
"Note that this function tries to get and release a buffer, and exceptions "
"which occur while calling corresponding functions will get suppressed. To "
"get error reporting use :c:func:`PyObject_GetBuffer()` instead."
msgstr ""
"Tenga en cuenta que esta función intenta obtener y liberar un búfer, y las "
"excepciones que se produzcan al llamar a las funciones correspondientes se "
"suprimirán. Para obtener un informe de errores, utilice :c:func:"
"`PyObject_GetBuffer()`."

#: ../../c-api/objbuffer.rst:51
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns "
"``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""
"Devuelve un puntero a una posición de memoria escribible.  El argumento "
"*obj* debe soportar la interfaz de búfer de caracteres de segmento único.  "
"En caso de éxito, devuelve ``0``, establece *buffer* en la posición de "
"memoria y *buffer_len* en la longitud del buffer.  En caso de error, "
"devuelve ``-1`` y establece :exc:`TypeError`."
