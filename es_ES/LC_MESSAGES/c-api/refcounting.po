# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "Recuento de referencias"

#: ../../c-api/refcounting.rst:10
msgid ""
"The functions and macros in this section are used for managing reference "
"counts of Python objects."
msgstr ""
"Las funciones y macros de esta sección se utilizan para gestionar el "
"recuento de referencias de objetos Python."

#: ../../c-api/refcounting.rst:16
msgid "Get the reference count of the Python object *o*."
msgstr "Obtiene el recuento de referencias del objeto Python *o*."

#: ../../c-api/refcounting.rst:18
msgid ""
"Note that the returned value may not actually reflect how many references to "
"the object are actually held.  For example, some objects are \"immortal\" "
"and have a very high refcount that does not reflect the actual number of "
"references.  Consequently, do not rely on the returned value to be accurate, "
"other than a value of 0 or 1."
msgstr ""
"Tener en cuenta que el valor devuelto puede no reflejar realmente cuántas "
"referencias al objeto se tienen en realidad.  Por ejemplo, algunos objetos "
"son \"inmortales\" y tienen un refcount muy alto que no refleja el número "
"real de referencias.  En consecuencia, no confíe en que el valor devuelto "
"sea exacto, aparte de un valor de 0 o 1."

#: ../../c-api/refcounting.rst:24
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference count."
msgstr ""
"Usar la función :c:func:`Py_SET_REFCNT()` para establecer un recuento de "
"referencias a objetos."

#: ../../c-api/refcounting.rst:26
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ":c:func:`Py_REFCNT()` se cambia a la función estática en línea."

#: ../../c-api/refcounting.rst:29
msgid "The parameter type is no longer :c:expr:`const PyObject*`."
msgstr "El tipo de parámetro ya no es :c:expr:`const PyObject*`."

#: ../../c-api/refcounting.rst:35
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "Establecer el contador de referencia del objeto *o* a *refcnt*."

#: ../../c-api/refcounting.rst:37
msgid ""
"Note that this function has no effect on `immortal <https://peps.python.org/"
"pep-0683/>`_ objects."
msgstr ""
"Tener en cuenta que esta función no tiene ningún efecto sobre los objetos "
"`immortal  <https://peps.python.org/pep-0683/>`_."

#: ../../c-api/refcounting.rst:43 ../../c-api/refcounting.rst:65
#: ../../c-api/refcounting.rst:142
msgid "Immortal objects are not modified."
msgstr "Los objetos inmortales no se modifican."

#: ../../c-api/refcounting.rst:49
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"Indica la toma de una nueva :term:`strong reference` al objeto *o*, "
"indicando que está en uso y no debe ser destruido."

#: ../../c-api/refcounting.rst:52
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"Esta función se utiliza normalmente para convertir un :término:`referencia "
"prestada` en un :término:`referencia fuerte`. La función :c:func:`Py_NewRef` "
"puede utilizarse para crear una nueva  :term:`strong reference`."

#: ../../c-api/refcounting.rst:56
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""
"Cuando termine de utilizar el objeto, libérelo llamando a :c:func:"
"`Py_DECREF`."

#: ../../c-api/refcounting.rst:58
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"El objeto no debe ser ``NULL``; si no está seguro de que no es ``NULL``, "
"utilice :c:func:`Py_XINCREF`."

#: ../../c-api/refcounting.rst:61
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <0683>`, this function has no effect."
msgstr ""
"No espere que esta función modifique realmente *o* de ninguna manera. Para "
"al menos :pep:`algunos objetos <0683>`, esta función no tiene ningún efecto."

#: ../../c-api/refcounting.rst:71
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""
"Similar a :c:func:`Py_INCREF`, pero el objeto *o* puede ser ``NULL``, en "
"cuyo caso no tiene efecto."

#: ../../c-api/refcounting.rst:74
msgid "See also :c:func:`Py_XNewRef`."
msgstr "Véase también :c:func:`Py_XNewRef`."

#: ../../c-api/refcounting.rst:79
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""
"Crea una nueva  :term:`strong reference` a un objeto: llama a :c:func:"
"`Py_INCREF` sobre *o* y devuelve el objeto *o*."

#: ../../c-api/refcounting.rst:82
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""
"Cuando  :term:`strong reference` ya no es necesaria, se debe llamar a :c:"
"func:`Py_DECREF` para liberar la referencia."

#: ../../c-api/refcounting.rst:85
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""
"El objeto *o* no debe ser ``NULL``; utilice :c:func:`Py_XNewRef` si *o* "
"puede ser ``NULL``."

#: ../../c-api/refcounting.rst:88
msgid "For example::"
msgstr "Por ejemplo::"

#: ../../c-api/refcounting.rst:90
msgid ""
"Py_INCREF(obj);\n"
"self->attr = obj;"
msgstr ""
"Py_INCREF(obj);\n"
"self->attr = obj;"

#: ../../c-api/refcounting.rst:93
msgid "can be written as::"
msgstr "puede escribirse como::"

#: ../../c-api/refcounting.rst:95
msgid "self->attr = Py_NewRef(obj);"
msgstr "self->attr = Py_NewRef(obj);"

#: ../../c-api/refcounting.rst:97
msgid "See also :c:func:`Py_INCREF`."
msgstr "Ver también :c:func:`Py_INCREF`."

#: ../../c-api/refcounting.rst:104
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr "Similar a :c:func:`Py_NewRef`, pero el objeto *o* puede ser NULL."

#: ../../c-api/refcounting.rst:106
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr "Si el objeto *o* es ``NULL``, la función sólo devuelve ``NULL``."

#: ../../c-api/refcounting.rst:113
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""
"Libera una :term:`strong reference` al objeto *o*, indicando que la "
"referencia ya no se utiliza."

#: ../../c-api/refcounting.rst:116
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""
"Una vez que la última :term:`strong reference` se libera (es decir, el "
"recuento de referencias del objeto llega a 0), se invoca la función de "
"liberación del tipo del objeto (que no debe ser ``NULL``)."

#: ../../c-api/refcounting.rst:121
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""
"Esta función se utiliza normalmente para borrar una :term:`strong reference` "
"antes de salir de su ámbito."

#: ../../c-api/refcounting.rst:124
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"El objeto no debe ser ``NULL``; si no está seguro de que no es ``NULL``, "
"utilice :c:func:`Py_XDECREF`."

#: ../../c-api/refcounting.rst:127
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <683>`, this function has no effect."
msgstr ""
"No espere que esta función modifique realmente *o* de ninguna manera. Para "
"al menos :pep:`algunos objetos <683>`, esta función no tiene ningún efecto."

#: ../../c-api/refcounting.rst:133
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`~object.__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means "
"that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, code "
"to delete an object from a list should copy a reference to the deleted "
"object in a temporary variable, update the list data structure, and then "
"call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""
"La función deallocation puede provocar la invocación de código Python "
"arbitrario (por ejemplo, cuando una instancia de clase con un método :meth:"
"`~object.__del__` es deallocated).  Mientras que las excepciones en dicho "
"código no se propagan, el código ejecutado tiene libre acceso a todas las "
"variables globales de Python.  Esto significa que cualquier objeto "
"alcanzable desde una variable global debe estar en un estado consistente "
"antes de invocar :c:func:`Py_DECREF`.  Por ejemplo, el código para borrar un "
"objeto de una lista debería copiar una referencia al objeto borrado en una "
"variable temporal, actualizar la estructura de datos de la lista, y luego "
"llamar a :c:func:`Py_DECREF` para la variable temporal."

#: ../../c-api/refcounting.rst:148
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""
"Similar a :c:func:`Py_DECREF`, pero el objeto *o* puede ser ``NULL``, en "
"cuyo caso no tiene efecto. La misma advertencia de :c:func:`Py_DECREF` se "
"aplica aquí también."

#: ../../c-api/refcounting.rst:155
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""
"Libera una  :term:`strong reference` para el objeto *o*. El objeto puede ser "
"``NULL``, en cuyo caso la macro no tiene efecto; de lo contrario, el efecto "
"es el mismo que para :c:func:`Py_DECREF`, excepto que el argumento también "
"se establece en ``NULL``. La advertencia para :c:func:`Py_DECREF` no se "
"aplica con respecto al objeto pasado porque la macro utiliza cuidadosamente "
"una variable temporal y establece el argumento en ``NULL`` antes de liberar "
"la referencia."

#: ../../c-api/refcounting.rst:163
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""
"Es una buena idea utilizar esta macro siempre que se libere una referencia a "
"un objeto que pueda ser recorrido durante la recolección de basura."

#: ../../c-api/refcounting.rst:166
msgid ""
"The macro argument is now only evaluated once. If the argument has side "
"effects, these are no longer duplicated."
msgstr ""
"Ahora el argumento de la macro sólo se evalúa una vez. Si el argumento tiene "
"efectos secundarios, éstos ya no se duplican."

#: ../../c-api/refcounting.rst:173
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""
"Indica tomar una nueva  :term:`strong reference` al objeto *o*. Una versión "
"de función de :c:func:`Py_XINCREF`. Se puede utilizar para la incrustación "
"dinámica en tiempo de ejecución de Python."

#: ../../c-api/refcounting.rst:180
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""
"Libera una :term:`strong reference` al objeto *o*. Una versión de función "
"de :c:func:`Py_XDECREF`. Se puede utilizar para la incrustación dinámica en "
"tiempo de ejecución de Python."

#: ../../c-api/refcounting.rst:187
msgid ""
"Macro safely releasing a :term:`strong reference` to object *dst* and "
"setting *dst* to *src*."
msgstr ""
"Macro que libera de forma segura una referencia :term:`strong` al objeto "
"*dst* y establece *dst* en *src*."

#: ../../c-api/refcounting.rst:190
msgid "As in case of :c:func:`Py_CLEAR`, \"the obvious\" code can be deadly::"
msgstr ""
"Como en el caso de :c:func:`Py_CLEAR`, el código \"obvio\" puede ser mortal::"

#: ../../c-api/refcounting.rst:192
msgid ""
"Py_DECREF(dst);\n"
"dst = src;"
msgstr ""
"Py_DECREF(dst);\n"
"dst = src;"

#: ../../c-api/refcounting.rst:195
msgid "The safe way is::"
msgstr "La forma segura es::"

#: ../../c-api/refcounting.rst:197
msgid "Py_SETREF(dst, src);"
msgstr "Py_SETREF(dst, src);"

#: ../../c-api/refcounting.rst:199
msgid ""
"That arranges to set *dst* to *src* _before_ releasing the reference to the "
"old value of *dst*, so that any code triggered as a side-effect of *dst* "
"getting torn down no longer believes *dst* points to a valid object."
msgstr ""
"Eso arregla establecer *dst* a *src* _before_  de liberar la referencia al "
"antiguo valor de *dst*, de modo que cualquier código disparado como efecto "
"secundario de que *dst* sea derribado ya no crea que *dst* apunta a un "
"objeto válido."

#: ../../c-api/refcounting.rst:206 ../../c-api/refcounting.rst:218
msgid ""
"The macro arguments are now only evaluated once. If an argument has side "
"effects, these are no longer duplicated."
msgstr ""
"Ahora los argumentos de las macros sólo se evalúan una vez. Si un argumento "
"tiene efectos secundarios, éstos ya no se duplican."

#: ../../c-api/refcounting.rst:213
msgid ""
"Variant of :c:macro:`Py_SETREF` macro that uses :c:func:`Py_XDECREF` instead "
"of :c:func:`Py_DECREF`."
msgstr ""
"Variante de la macro :c:macro:`Py_SETREF` que utiliza :c:func:`Py_XDECREF` "
"en lugar de :c:func:`Py_DECREF`."
