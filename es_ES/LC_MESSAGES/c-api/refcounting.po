# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "Recuento de referencias"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""
"Las macros de esta sección se utilizan para gestionar el recuento de "
"referencias de objetos Python."

#: ../../c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use :c:func:"
"`Py_XINCREF`."
msgstr ""

#: ../../c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use :c:func:"
"`Py_XDECREF`.  If the reference count reaches zero, the object's type's "
"deallocation function (which must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""
"La función desasignación puede provocar la invocación de código Python "
"arbitrario (por ejemplo, cuando una instancia de clase con un método :meth:"
"`__del__` es desasignado).  Mientras que las excepciones en dicho código no "
"se propagan, el código ejecutado tiene libre acceso a todas las variables "
"globales de Python.  Esto significa que cualquier objeto alcanzable desde "
"una variable global debe estar en un estado consistente antes de invocar :c:"
"func:`Py_DECREF`.  Por ejemplo, el código para borrar un objeto de una lista "
"debería copiar una referencia al objeto borrado en una variable temporal, "
"actualizar la estructura de datos de la lista, y luego llamar a :c:func:"
"`Py_DECREF` para la variable temporal."

#: ../../c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, and the same warning applies."
msgstr ""

#: ../../c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, except that the argument is also set to ``NULL``.  "
"The warning for :c:func:`Py_DECREF` does not apply with respect to the "
"object passed because the macro carefully uses a temporary variable and sets "
"the argument to ``NULL`` before decrementing its reference count."
msgstr ""

#: ../../c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the reference "
"count of an object that might be traversed during garbage collection."
msgstr ""

#: ../../c-api/refcounting.rst:65
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and :c:func:`Py_XDECREF`, "
"respectively."
msgstr ""

#: ../../c-api/refcounting.rst:70
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""
"Las siguientes funciones o macros sólo pueden utilizarse dentro del núcleo "
"del intérprete: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:"
"func:`_Py_NewReference`, así como la variable global :c:data:`_Py_RefTotal`."
