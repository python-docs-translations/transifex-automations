# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "Recuento de referencias"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr ""
"Las macros de esta sección se utilizan para gestionar el recuento de "
"referencias de objetos Python."

#: ../../c-api/refcounting.rst:16
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"Indica la toma de una nueva :term:`strong reference` al objeto *o*, "
"indicando que está en uso y no debe ser destruido."

#: ../../c-api/refcounting.rst:19
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"Esta función se utiliza normalmente para convertir un :término:`referencia "
"prestada` en un :término:`referencia fuerte`. La función :c:func:`Py_NewRef` "
"puede utilizarse para crear una nueva  :term:`strong reference`."

#: ../../c-api/refcounting.rst:23
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""
"Cuando termine de utilizar el objeto, libérelo llamando a :c:func:"
"`Py_DECREF`."

#: ../../c-api/refcounting.rst:25
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"El objeto no debe ser ``NULL``; si no está seguro de que no es ``NULL``, "
"utilice :c:func:`Py_XINCREF`."

#: ../../c-api/refcounting.rst:28 ../../c-api/refcounting.rst:89
msgid "Do not expect this function to actually modify *o* in any way."
msgstr "No espere que esta función modifique *o* en modo alguno."

#: ../../c-api/refcounting.rst:33
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""
"Similar a :c:func:`Py_INCREF`, pero el objeto *o* puede ser ``NULL``, en "
"cuyo caso no tiene efecto."

#: ../../c-api/refcounting.rst:36
msgid "See also :c:func:`Py_XNewRef`."
msgstr "Véase también :c:func:`Py_XNewRef`."

#: ../../c-api/refcounting.rst:41
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""
"Crea una nueva  :term:`strong reference` a un objeto: llama a :c:func:"
"`Py_INCREF` sobre *o* y devuelve el objeto *o*."

#: ../../c-api/refcounting.rst:44
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""
"Cuando  :term:`strong reference` ya no es necesaria, se debe llamar a :c:"
"func:`Py_DECREF` para liberar la referencia."

#: ../../c-api/refcounting.rst:47
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""
"El objeto *o* no debe ser ``NULL``; utilice :c:func:`Py_XNewRef` si *o* "
"puede ser ``NULL``."

#: ../../c-api/refcounting.rst:50
msgid "For example::"
msgstr "Por ejemplo::"

#: ../../c-api/refcounting.rst:55
msgid "can be written as::"
msgstr "puede escribirse como::"

#: ../../c-api/refcounting.rst:59
msgid "See also :c:func:`Py_INCREF`."
msgstr "Ver también :c:func:`Py_INCREF`."

#: ../../c-api/refcounting.rst:66
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr "Similar a :c:func:`Py_NewRef`, pero el objeto *o* puede ser NULL."

#: ../../c-api/refcounting.rst:68
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr "Si el objeto *o* es ``NULL``, la función sólo devuelve ``NULL``."

#: ../../c-api/refcounting.rst:75
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""
"Libera una :term:`strong reference` al objeto *o*, indicando que la "
"referencia ya no se utiliza."

#: ../../c-api/refcounting.rst:78
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""
"Una vez que la última :term:`strong reference` se libera (es decir, el "
"recuento de referencias del objeto llega a 0), se invoca la función de "
"liberación del tipo del objeto (que no debe ser ``NULL``)."

#: ../../c-api/refcounting.rst:83
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""
"Esta función se utiliza normalmente para borrar una :term:`strong reference` "
"antes de salir de su ámbito."

#: ../../c-api/refcounting.rst:86
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"El objeto no debe ser ``NULL``; si no está seguro de que no es ``NULL``, "
"utilice :c:func:`Py_XDECREF`."

#: ../../c-api/refcounting.rst:93
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free "
"access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before :c:"
"func:`Py_DECREF` is invoked.  For example, code to delete an object from a "
"list should copy a reference to the deleted object in a temporary variable, "
"update the list data structure, and then call :c:func:`Py_DECREF` for the "
"temporary variable."
msgstr ""
"La función desasignación puede provocar la invocación de código Python "
"arbitrario (por ejemplo, cuando una instancia de clase con un método :meth:"
"`__del__` es desasignado).  Mientras que las excepciones en dicho código no "
"se propagan, el código ejecutado tiene libre acceso a todas las variables "
"globales de Python.  Esto significa que cualquier objeto alcanzable desde "
"una variable global debe estar en un estado consistente antes de invocar :c:"
"func:`Py_DECREF`.  Por ejemplo, el código para borrar un objeto de una lista "
"debería copiar una referencia al objeto borrado en una variable temporal, "
"actualizar la estructura de datos de la lista, y luego llamar a :c:func:"
"`Py_DECREF` para la variable temporal."

#: ../../c-api/refcounting.rst:105
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""
"Similar a :c:func:`Py_DECREF`, pero el objeto *o* puede ser ``NULL``, en "
"cuyo caso no tiene efecto. La misma advertencia de :c:func:`Py_DECREF` se "
"aplica aquí también."

#: ../../c-api/refcounting.rst:112
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""
"Libera una  :term:`strong reference` para el objeto *o*. El objeto puede ser "
"``NULL``, en cuyo caso la macro no tiene efecto; de lo contrario, el efecto "
"es el mismo que para :c:func:`Py_DECREF`, excepto que el argumento también "
"se establece en ``NULL``. La advertencia para :c:func:`Py_DECREF` no se "
"aplica con respecto al objeto pasado porque la macro utiliza cuidadosamente "
"una variable temporal y establece el argumento en ``NULL`` antes de liberar "
"la referencia."

#: ../../c-api/refcounting.rst:120
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""
"Es una buena idea utilizar esta macro siempre que se libere una referencia a "
"un objeto que pueda ser recorrido durante la recolección de basura."

#: ../../c-api/refcounting.rst:125
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""
"Indica tomar una nueva  :term:`strong reference` al objeto *o*. Una versión "
"de función de :c:func:`Py_XINCREF`. Se puede utilizar para la incrustación "
"dinámica en tiempo de ejecución de Python."

#: ../../c-api/refcounting.rst:132
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""
"Libera una :term:`strong reference` al objeto *o*. Una versión de función "
"de :c:func:`Py_XDECREF`. Se puede utilizar para la incrustación dinámica en "
"tiempo de ejecución de Python."

#: ../../c-api/refcounting.rst:137
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""
"Las siguientes funciones o macros sólo pueden utilizarse dentro del núcleo "
"del intérprete: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:"
"func:`_Py_NewReference`, así como la variable global :c:data:`_Py_RefTotal`."
