# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-14 14:53+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/arg.rst:6
msgid "Parsing arguments and building values"
msgstr "Analizar argumentos y construir valores"

#: ../../c-api/arg.rst:8
msgid ""
"These functions are useful when creating your own extension functions and "
"methods.  Additional information and examples are available in :ref:"
"`extending-index`."
msgstr ""
"Estas funciones son útiles a la hora de crear sus propias funciones y "
"métodos de extensión.  Encontrará más información y ejemplos en :ref:"
"`extending-index`."

#: ../../c-api/arg.rst:12
msgid ""
"The first three of these functions described, :c:func:`PyArg_ParseTuple`, :c:"
"func:`PyArg_ParseTupleAndKeywords`, and :c:func:`PyArg_Parse`, all use "
"*format strings* which are used to tell the function about the expected "
"arguments.  The format strings use the same syntax for each of these "
"functions."
msgstr ""
"Las tres primeras de estas funciones descritas,:c:func:`PyArg_ParseTuple`, :"
"c:func:`PyArg_ParseTupleAndKeywords`, y :c:func:`PyArg_Parse`, todas usan "
"*cadenas de formato* que se usan para informar a la función sobre los "
"argumentos esperados. Las cadenas de formato utilizan la misma sintaxis para "
"cada una de estas funciones."

#: ../../c-api/arg.rst:19
msgid "Parsing arguments"
msgstr "Analizando argumentos"

#: ../../c-api/arg.rst:21
msgid ""
"A format string consists of zero or more \"format units.\"  A format unit "
"describes one Python object; it is usually a single character or a "
"parenthesized sequence of format units.  With a few exceptions, a format "
"unit that is not a parenthesized sequence normally corresponds to a single "
"address argument to these functions.  In the following description, the "
"quoted form is the format unit; the entry in (round) parentheses is the "
"Python object type that matches the format unit; and the entry in [square] "
"brackets is the type of the C variable(s) whose address should be passed."
msgstr ""
"Un string de formato consta de cero o mas \"unidades de formato\". Una "
"unidad de formato describe un objeto de Python; habitualmente un sólo "
"carácter o una secuencia parentesizada de unidades de formato. Con algunas "
"excepciones, una unidad de formato que no es una secuencia parentesizada, "
"señala normalmente un solo argumento a esas funciones. En la siguiente "
"descripción, la forma \"entrecomillada\" es la unidad de formato; la entrada "
"entre (paréntesis) es el objeto tipo de Python que corresponde a la unidad "
"de formato; y la entrada entre [corchetes]  es el tipo de variables C cuyas "
"direcciones deben ser pasadas."

#: ../../c-api/arg.rst:31
msgid "Strings and buffers"
msgstr "Strings y buffers"

#: ../../c-api/arg.rst:33
msgid ""
"These formats allow accessing an object as a contiguous chunk of memory. You "
"don't have to provide raw storage for the returned unicode or bytes area."
msgstr ""
"Estos formatos permiten acceder a un objeto como una porción contigua de "
"memoria. No es necesario proporcionar almacenamiento sin formato para el "
"área unicode o bytes devuelta."

#: ../../c-api/arg.rst:37
msgid "Unless otherwise stated, buffers are not NUL-terminated."
msgstr "A menos que se declare otra cosa, los buffers no son NUL-terminated."

#: ../../c-api/arg.rst:39
msgid "There are three ways strings and buffers can be converted to C:"
msgstr "Hay tres formas de convertir cadenas y buffers a C:"

#: ../../c-api/arg.rst:41
msgid ""
"Formats such as ``y*`` and ``s*`` fill a :c:type:`Py_buffer` structure. This "
"locks the underlying buffer so that the caller can subsequently use the "
"buffer even inside a :c:type:`Py_BEGIN_ALLOW_THREADS` block without the risk "
"of mutable data being resized or destroyed. As a result, **you have to "
"call** :c:func:`PyBuffer_Release` after you have finished processing the "
"data (or in any early abort case)."
msgstr ""
"Formatos como ``y*`` y ``s*`` llenan una estructura :c:type:`Py_buffer`. "
"Esto bloquea el búfer subyacente para que el llamante pueda utilizar "
"posteriormente el búfer incluso dentro de un bloque :c:type:"
"`Py_BEGIN_ALLOW_THREADS` sin riesgo de que los datos mutables cambien de "
"tamaño o se destruyan. Como resultado, **hay que llamar** a :c:func:"
"`PyBuffer_Release` después de haber terminado de procesar los datos (o en "
"cualquier caso de cancelación anticipada)."

#: ../../c-api/arg.rst:48
msgid ""
"The ``es``, ``es#``, ``et`` and ``et#`` formats allocate the result buffer. "
"**You have to call** :c:func:`PyMem_Free` after you have finished processing "
"the data (or in any early abort case)."
msgstr ""
"Los formatos ``es``, ``es#``, ``et`` y ``et#`` asignan el búfer de "
"resultados. **Hay que llamar** :c:func:`PyMem_Free` después de haber "
"terminado de procesar los datos (o en cualquier caso de aborto anticipado)."

#: ../../c-api/arg.rst:54
msgid ""
"Other formats take a :class:`str` or a read-only :term:`bytes-like object`, "
"such as :class:`bytes`, and provide a ``const char *`` pointer to its "
"buffer. In this case the buffer is \"borrowed\": it is managed by the "
"corresponding Python object, and shares the lifetime of this object. You "
"won't have to release any memory yourself."
msgstr ""
"Otros formatos toman un :class:`str` o un objeto :term:`bytes-like` de sólo "
"lectura, como :class:`bytes`, y proporcionan un puntero ``const char *`` a "
"su búfer. En este caso, el búfer es \"prestado\": es gestionado por el "
"objeto Python correspondiente, y comparte el tiempo de vida de este objeto. "
"No tendrás que liberar ninguna memoria tú mismo."

#: ../../c-api/arg.rst:61
msgid ""
"To ensure that the underlying buffer may be safely borrowed, the object's :c:"
"member:`PyBufferProcs.bf_releasebuffer` field must be ``NULL``. This "
"disallows common mutable objects such as :class:`bytearray`, but also some "
"read-only objects such as :class:`memoryview` of :class:`bytes`."
msgstr ""
"Para garantizar que el búfer subyacente pueda tomarse prestado de forma "
"segura, el campo :c:member:`PyBufferProcs.bf_releasebuffer` del objeto debe "
"ser ``NULL``. Esto excluye objetos mutables comunes como :class:`bytearray`, "
"pero también algunos objetos de sólo lectura como :class:`memoryview` de :"
"class:`bytes`."

#: ../../c-api/arg.rst:67
msgid ""
"Besides this ``bf_releasebuffer`` requirement, there is no check to verify "
"whether the input object is immutable (e.g. whether it would honor a request "
"for a writable buffer, or whether another thread can mutate the data)."
msgstr ""
"Además de este requisito de ``bf_releasebuffer``, no hay ninguna "
"comprobación para verificar si el objeto de entrada es inmutable (por "
"ejemplo, si respetaría una solicitud de un búfer escribible, o si otro hilo "
"puede mutar los datos)."

#: ../../c-api/arg.rst:73
msgid ""
"For all ``#`` variants of formats (``s#``, ``y#``, etc.), the macro :c:macro:"
"`PY_SSIZE_T_CLEAN` must be defined before including :file:`Python.h`. On "
"Python 3.9 and older, the type of the length argument is :c:type:"
"`Py_ssize_t` if the :c:macro:`PY_SSIZE_T_CLEAN` macro is defined, or int "
"otherwise."
msgstr ""
"Para todas las variantes de formatos ``#`` (``s#``, ``y#``, etc.), la macro :"
"c:macro:`PY_SSIZE_T_CLEAN` debe estar definida antes de incluir :file:"
"`Python.h`. En Python 3.9 y versiones anteriores, el tipo del argumento de "
"longitud es :c:type:`Py_ssize_t` si la macro :c:macro:`PY_SSIZE_T_CLEAN` "
"está definida, o int en caso contrario."

#: ../../c-api/arg.rst:80
msgid "``s`` (:class:`str`) [const char \\*]"
msgstr "``s`` (:class:`str`) [const char \\*]"

#: ../../c-api/arg.rst:81
msgid ""
"Convert a Unicode object to a C pointer to a character string. A pointer to "
"an existing string is stored in the character pointer variable whose address "
"you pass.  The C string is NUL-terminated. The Python string must not "
"contain embedded null code points; if it does, a :exc:`ValueError` exception "
"is raised. Unicode objects are converted to C strings using ``'utf-8'`` "
"encoding. If this conversion fails, a :exc:`UnicodeError` is raised."
msgstr ""
"Convierta un objeto Unicode en un puntero C en una cadena de caracteres. Un "
"puntero a una cadena existente se almacena en la variable de puntero de "
"caracteres cuya dirección pasa. La cadena C es NUL-terminated. La cadena de "
"Python no debe contener puntos de código nulos incrustados; si lo hace, se "
"genera una excepción:exc:`ValueError`. Los objetos Unicode se convierten a "
"cadenas C utilizando la codificación ``'utf-8'``. Si esta conversión "
"falla,,  se genera una:exc:`UnicodeError`."

#: ../../c-api/arg.rst:90
msgid ""
"This format does not accept :term:`bytes-like objects <bytes-like object>`.  "
"If you want to accept filesystem paths and convert them to C character "
"strings, it is preferable to use the ``O&`` format with :c:func:"
"`PyUnicode_FSConverter` as *converter*."
msgstr ""
"Este formato no acepta :term:`bytes-like-objects <bytes-like object>`. Si "
"deseas aceptar las rutas del sistema de archivos y convertirlas a strings C, "
"es preferible que utilices el formato``O&`` con  :c:func:"
"`PyUnicode_FSConverter` como *converter*."

#: ../../c-api/arg.rst:96
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null code points were "
"encountered in the Python string."
msgstr ""
"Anteriormente, se generaba :exc:`TypeError` cuando se encontraban puntos de "
"código nulos incrustados en la cadena de Python."

#: ../../c-api/arg.rst:100
msgid "``s*`` (:class:`str` or :term:`bytes-like object`) [Py_buffer]"
msgstr "``s*`` (:class:`str` o :term:`bytes-like object`) [Py_buffer]"

#: ../../c-api/arg.rst:101
msgid ""
"This format accepts Unicode objects as well as bytes-like objects. It fills "
"a :c:type:`Py_buffer` structure provided by the caller. In this case the "
"resulting C string may contain embedded NUL bytes. Unicode objects are "
"converted to C strings using ``'utf-8'`` encoding."
msgstr ""
"Este formato acepta objetos Unicode, así como objetos similares a bytes. "
"Llena una estructura :c:type:`Py_buffer` proporcionada por caller. En este "
"caso, la cadena C resultante puede contener bytes NULOS incrustados. Los "
"objetos Unicode se convierten a cadenas C utilizando la codificación "
"``'utf-8'``."

#: ../../c-api/arg.rst:106
msgid ""
"``s#`` (:class:`str`, read-only :term:`bytes-like object`) [const char \\*, :"
"c:type:`Py_ssize_t`]"
msgstr ""
"``s#`` (:class:`str`, sólo lectura :term:`bytes-like object`) [const char "
"\\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:107
msgid ""
"Like ``s*``, except that it provides a :ref:`borrowed buffer <c-arg-borrowed-"
"buffer>`. The result is stored into two C variables, the first one a pointer "
"to a C string, the second one its length. The string may contain embedded "
"null bytes. Unicode objects are converted to C strings using ``'utf-8'`` "
"encoding."
msgstr ""
"Como ``s*``, excepto que proporciona un búfer :ref:`prestado <c-arg-borrowed-"
"buffer>`. El resultado se almacena en dos variables C, la primera un puntero "
"a una cadena C, la segunda su longitud. La cadena puede contener bytes nulos "
"incrustados. Los objetos Unicode se convierten en cadenas C utilizando la "
"codificación ``'utf-8'``."

#: ../../c-api/arg.rst:113 ../../c-api/arg.rst:558
msgid "``z`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``z`` (:class:`str` o ``None``) [const char \\*]"

#: ../../c-api/arg.rst:114
msgid ""
"Like ``s``, but the Python object may also be ``None``, in which case the C "
"pointer is set to ``NULL``."
msgstr ""
"Como ``s``, pero el objeto Python también puede ser ``None``, en cuyo caso "
"el puntero C se establece en ``NULL``."

#: ../../c-api/arg.rst:117
msgid ""
"``z*`` (:class:`str`, :term:`bytes-like object` or ``None``) [Py_buffer]"
msgstr ""
"``z*`` (:class:`str`, :term:`bytes-like object` o ``None``) [Py_buffer]"

#: ../../c-api/arg.rst:118
msgid ""
"Like ``s*``, but the Python object may also be ``None``, in which case the "
"``buf`` member of the :c:type:`Py_buffer` structure is set to ``NULL``."
msgstr ""
"Como ``s*``, pero el objeto Python también puede ser ``None``, en cuyo caso "
"el miembro ``buf`` de la estructura :c:type:`Py_buffer` se  configura a "
"``NULL``."

#: ../../c-api/arg.rst:121
msgid ""
"``z#`` (:class:`str`, read-only :term:`bytes-like object` or ``None``) "
"[const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``z#`` (:class:`str`, sólo lectura :term:`bytes-like object` o ``None``) "
"[const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:122
msgid ""
"Like ``s#``, but the Python object may also be ``None``, in which case the C "
"pointer is set to ``NULL``."
msgstr ""
"Como ``s#``, pero el objeto Python también puede ser ``None``, en cuyo caso "
"el puntero C se establece en ``NULL``."

#: ../../c-api/arg.rst:125
msgid "``y`` (read-only :term:`bytes-like object`) [const char \\*]"
msgstr "``y`` (read-only :term:`bytes-like object`) [const char \\*]"

#: ../../c-api/arg.rst:126
msgid ""
"This format converts a bytes-like object to a C pointer to a :ref:`borrowed "
"<c-arg-borrowed-buffer>` character string; it does not accept Unicode "
"objects.  The bytes buffer must not contain embedded null bytes; if it does, "
"a :exc:`ValueError` exception is raised."
msgstr ""
"Este formato convierte un objeto tipo bytes en un puntero C a una cadena de "
"caracteres :ref:`borrowed <c-arg-borrowed-buffer>`; no acepta objetos "
"Unicode.  El búfer bytes no debe contener bytes nulos incrustados; si los "
"contiene, se lanza una excepción :exc:`ValueError`."

#: ../../c-api/arg.rst:132
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes buffer."
msgstr ""
"Anteriormente, se generaba :exc:`TypeError` cuando se encontraban bytes "
"nulos incrustados en el búfer de bytes."

#: ../../c-api/arg.rst:136
msgid "``y*`` (:term:`bytes-like object`) [Py_buffer]"
msgstr "``y*`` (:term:`bytes-like object`) [Py_buffer]"

#: ../../c-api/arg.rst:137
msgid ""
"This variant on ``s*`` doesn't accept Unicode objects, only bytes-like "
"objects.  **This is the recommended way to accept binary data.**"
msgstr ""
"Esta variante en ``s*`` no acepta objetos Unicode, sólo objetos similares a "
"bytes. **Esta es la forma recomendada de aceptar datos binarios. **"

#: ../../c-api/arg.rst:141
msgid ""
"``y#`` (read-only :term:`bytes-like object`) [const char \\*, :c:type:"
"`Py_ssize_t`]"
msgstr ""
"``y#`` (sólo lectura :term:`bytes-like object`) [const char \\*, :c:type:"
"`Py_ssize_t`]"

#: ../../c-api/arg.rst:142
msgid ""
"This variant on ``s#`` doesn't accept Unicode objects, only bytes-like "
"objects."
msgstr ""
"Esta variante en ``s#`` no acepta objetos Unicode, sólo objetos similares a "
"bytes."

#: ../../c-api/arg.rst:145
msgid "``S`` (:class:`bytes`) [PyBytesObject \\*]"
msgstr "``S`` (:class:`bytes`) [PyBytesObject \\*]"

#: ../../c-api/arg.rst:146
msgid ""
"Requires that the Python object is a :class:`bytes` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a "
"bytes object.  The C variable may also be declared as :c:expr:`PyObject*`."
msgstr ""
"Requiere que el objeto Python sea un objeto :class:`bytes`, sin intentar "
"ninguna conversión.  Lanza :exc:`TypeError` si el objeto no es un objeto "
"bytes.  La variable C también puede declararse como :c:expr:`PyObject*`."

#: ../../c-api/arg.rst:150
msgid "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"
msgstr "``Y`` (:class:`bytearray`) [PyByteArrayObject \\*]"

#: ../../c-api/arg.rst:151
msgid ""
"Requires that the Python object is a :class:`bytearray` object, without "
"attempting any conversion.  Raises :exc:`TypeError` if the object is not a :"
"class:`bytearray` object. The C variable may also be declared as :c:expr:"
"`PyObject*`."
msgstr ""
"Requiere que el objeto Python sea un objeto :class:`bytearray`, sin intentar "
"ninguna conversión.  Lanza :exc:`TypeError` si el objeto no es un objeto :"
"class:`bytearray`. La variable C también puede declararse como :c:expr:"
"`PyObject*`."

#: ../../c-api/arg.rst:155
msgid "``U`` (:class:`str`) [PyObject \\*]"
msgstr "``U`` (:class:`str`) [PyObject \\*]"

#: ../../c-api/arg.rst:156
msgid ""
"Requires that the Python object is a Unicode object, without attempting any "
"conversion.  Raises :exc:`TypeError` if the object is not a Unicode object.  "
"The C variable may also be declared as :c:expr:`PyObject*`."
msgstr ""
"Requiere que el objeto Python sea un objeto Unicode, sin intentar ninguna "
"conversión.  Lanza :exc:`TypeError` si el objeto no es un objeto Unicode.  "
"La variable C también puede declararse como :c:expr:`PyObject*`."

#: ../../c-api/arg.rst:160
msgid "``w*`` (read-write :term:`bytes-like object`) [Py_buffer]"
msgstr "``w*`` (read-write :term:`bytes-like object`) [Py_buffer]"

#: ../../c-api/arg.rst:161
msgid ""
"This format accepts any object which implements the read-write buffer "
"interface. It fills a :c:type:`Py_buffer` structure provided by the caller. "
"The buffer may contain embedded null bytes. The caller have to call :c:func:"
"`PyBuffer_Release` when it is done with the buffer."
msgstr ""
"Este formato acepta cualquier objeto que implemente la interfaz de búfer de "
"lectura y escritura. Llena una estructura :c:type:`Py_buffer` proporcionada "
"por caller. El búfer puede contener bytes nulos incrustados. Caller tiene "
"que llamar a :c:func:`PyBuffer_Release` cuando termina con el búfer."

#: ../../c-api/arg.rst:166
msgid "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"
msgstr "``es`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer]"

#: ../../c-api/arg.rst:167
msgid ""
"This variant on ``s`` is used for encoding Unicode into a character buffer. "
"It only works for encoded data without embedded NUL bytes."
msgstr ""
"Se usa esta variante en ``s`` para codificar Unicode en un búfer de "
"caracteres. Solo funciona para datos codificados sin bytes NUL incrustados."

#: ../../c-api/arg.rst:170
msgid ""
"This format requires two arguments.  The first is only used as input, and "
"must be a :c:expr:`const char*` which points to the name of an encoding as a "
"NUL-terminated string, or ``NULL``, in which case ``'utf-8'`` encoding is "
"used. An exception is raised if the named encoding is not known to Python.  "
"The second argument must be a :c:expr:`char**`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text. "
"The text will be encoded in the encoding specified by the first argument."
msgstr ""
"Este formato requiere dos argumentos.  El primero sólo se utiliza como "
"entrada, y debe ser un :c:expr:`const char*` que apunte al nombre de una "
"codificación como cadena terminada en NUL, o ``NULL``, en cuyo caso se "
"utiliza la codificación ``'utf-8'``. Se produce una excepción si Python no "
"conoce la codificación nombrada.  El segundo argumento debe ser un :c:expr:"
"`char**`; el valor del puntero al que hace referencia se establecerá en un "
"búfer con el contenido del texto del argumento. El texto se codificará en la "
"codificación especificada por el primer argumento."

#: ../../c-api/arg.rst:178
msgid ""
":c:func:`PyArg_ParseTuple` will allocate a buffer of the needed size, copy "
"the encoded data into this buffer and adjust *\\*buffer* to reference the "
"newly allocated storage.  The caller is responsible for calling :c:func:"
"`PyMem_Free` to free the allocated buffer after use."
msgstr ""
":c:func:`PyArg_ParseTuple` asignará un búfer del tamaño necesario, copiará "
"los datos codificados en este búfer y ajustará *\\*búfer* para hacer "
"referencia al almacenamiento recién asignado. Caller es responsable de "
"llamar :c:func:`PyMem_Free` para liberar el búfer asignado después de su uso."

#: ../../c-api/arg.rst:183
msgid ""
"``et`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer]"
msgstr ""
"``et`` (:class:`str`, :class:`bytes` o :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer]"

#: ../../c-api/arg.rst:184
msgid ""
"Same as ``es`` except that byte string objects are passed through without "
"recoding them.  Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr ""
"Igual que ``es`` excepto que los objetos de cadena de bytes se pasan sin "
"recodificarlos. En cambio, la implementación asume que el objeto de cadena "
"de bytes usa la codificación pasada como parámetro."

#: ../../c-api/arg.rst:188
msgid ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, :c:type:"
"`Py_ssize_t` \\*buffer_length]"
msgstr ""
"``es#`` (:class:`str`) [const char \\*encoding, char \\*\\*buffer, :c:type:"
"`Py_ssize_t` \\*buffer_length]"

#: ../../c-api/arg.rst:189
msgid ""
"This variant on ``s#`` is used for encoding Unicode into a character buffer. "
"Unlike the ``es`` format, this variant allows input data which contains NUL "
"characters."
msgstr ""
"Esta variante de ``s#``se utiliza para codificar Unicode en un búfer de "
"caracteres. A diferencia del formato ``es``, esta variante permite la "
"entrada de datos que contienen caracteres NUL."

#: ../../c-api/arg.rst:193
msgid ""
"It requires three arguments.  The first is only used as input, and must be "
"a :c:expr:`const char*` which points to the name of an encoding as a NUL-"
"terminated string, or ``NULL``, in which case ``'utf-8'`` encoding is used. "
"An exception is raised if the named encoding is not known to Python.  The "
"second argument must be a :c:expr:`char**`; the value of the pointer it "
"references will be set to a buffer with the contents of the argument text. "
"The text will be encoded in the encoding specified by the first argument. "
"The third argument must be a pointer to an integer; the referenced integer "
"will be set to the number of bytes in the output buffer."
msgstr ""
"Requiere tres argumentos.  El primero sólo se utiliza como entrada, y debe "
"ser un :c:expr:`const char*` que apunte al nombre de una codificación como "
"cadena terminada en NUL, o ``NULL``, en cuyo caso se utiliza la codificación "
"``'utf-8'``. Se produce una excepción si Python no conoce la codificación "
"nombrada.  El segundo argumento debe ser un :c:expr:`char**`; el valor del "
"puntero al que hace referencia se establecerá en un búfer con el contenido "
"del texto del argumento. El texto se codificará en la codificación "
"especificada por el primer argumento. El tercer argumento debe ser un "
"puntero a un entero; el entero referenciado se establecerá en el número de "
"bytes del búfer de salida."

#: ../../c-api/arg.rst:203
msgid "There are two modes of operation:"
msgstr "Existen dos modos de operación:"

#: ../../c-api/arg.rst:205
msgid ""
"If *\\*buffer* points a ``NULL`` pointer, the function will allocate a "
"buffer of the needed size, copy the encoded data into this buffer and set "
"*\\*buffer* to reference the newly allocated storage.  The caller is "
"responsible for calling :c:func:`PyMem_Free` to free the allocated buffer "
"after usage."
msgstr ""
"Si *\\*buffer* apunta a un puntero ``NULL`` , la función asignará un búfer "
"del tamaño necesario, copiará los datos codificados en este búfer y "
"establecerá *\\*buffer * para referenciar al almacenamiento recién "
"asignado.  Calleres responsable de llamar a :c:func:`PyMem_Free`para liberar "
"el búfer asignado después del uso."

#: ../../c-api/arg.rst:210
msgid ""
"If *\\*buffer* points to a non-``NULL`` pointer (an already allocated "
"buffer), :c:func:`PyArg_ParseTuple` will use this location as the buffer and "
"interpret the initial value of *\\*buffer_length* as the buffer size.  It "
"will then copy the encoded data into the buffer and NUL-terminate it.  If "
"the buffer is not large enough, a :exc:`ValueError` will be set."
msgstr ""
"Si *\\*buffer* apunta a un puntero no-``NULL`` (un búfer ya asignado), :c:"
"func:`PyArg_ParseTuple` usará esta ubicación como búfer e interpretará el "
"valor inicial de * \\ * buffer_length * como el tamaño del búfer. A "
"continuación, copiará los datos codificados en el búfer y los terminará en "
"NULL. .Si el búfer no es lo suficientemente grande, se fijará a :exc:"
"`ValueError`."

#: ../../c-api/arg.rst:216
msgid ""
"In both cases, *\\*buffer_length* is set to the length of the encoded data "
"without the trailing NUL byte."
msgstr ""
"En ambos casos, *\\*buffer_length * se establece en la longitud de los datos "
"codificados sin el byte NUL final."

#: ../../c-api/arg.rst:219
msgid ""
"``et#`` (:class:`str`, :class:`bytes` or :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer, :c:type:`Py_ssize_t` \\*buffer_length]"
msgstr ""
"``et#`` (:class:`str`, :class:`bytes` o :class:`bytearray`) [const char "
"\\*encoding, char \\*\\*buffer, :c:type:`Py_ssize_t` \\*buffer_length]"

#: ../../c-api/arg.rst:220
msgid ""
"Same as ``es#`` except that byte string objects are passed through without "
"recoding them. Instead, the implementation assumes that the byte string "
"object uses the encoding passed in as parameter."
msgstr ""
"Igual que ``es#`` excepto que los objetos de cadena de bytes se pasan sin "
"recodificarlos, la implementación supone que el objeto de cadena de bytes "
"utiliza la codificación pasada como parámetro."

#: ../../c-api/arg.rst:224
msgid ""
"``u``, ``u#``, ``Z``, and ``Z#`` are removed because they used a legacy "
"``Py_UNICODE*`` representation."
msgstr ""
"``u``, ``u#``, ``Z``, y ``Z#`` se eliminan porque utilizaban una "
"representación heredada de ``Py_UNICODE*``."

#: ../../c-api/arg.rst:230
msgid "Numbers"
msgstr "Numeros"

#: ../../c-api/arg.rst:232
msgid ""
"These formats allow representing Python numbers or single characters as C "
"numbers. Formats that require :class:`int`, :class:`float` or :class:"
"`complex` can also use the corresponding special methods :meth:`~object."
"__index__`, :meth:`~object.__float__` or :meth:`~object.__complex__` to "
"convert the Python object to the required type."
msgstr ""
"Estos formatos permiten representar números Python o caracteres simples como "
"números C. Los formatos que requieren :class:`int`, :class:`float` o :class:"
"`complex` también pueden utilizar los métodos especiales correspondientes :"
"meth:`~object.__index__`, :meth:`~object.__float__` o :meth:`~object."
"__complex__` para convertir el objeto Python al tipo requerido."

#: ../../c-api/arg.rst:238
msgid ""
"For signed integer formats, :exc:`OverflowError` is raised if the value is "
"out of range for the C type. For unsigned integer formats, no range checking "
"is done --- the most significant bits are silently truncated when the "
"receiving field is too small to receive the value."
msgstr ""
"Para formatos enteros con signo, :exc:`OverflowError` se activa si el valor "
"está fuera del rango para el tipo C. Para formatos enteros sin signo, no se "
"comprueba el rango --- los bits más significativos se truncan "
"silenciosamente cuando el campo receptor es demasiado pequeño para recibir "
"el valor."

#: ../../c-api/arg.rst:244
msgid "``b`` (:class:`int`) [unsigned char]"
msgstr "``b`` (:class:`int`) [caracteres sin firmar]"

#: ../../c-api/arg.rst:245
msgid ""
"Convert a nonnegative Python integer to an unsigned tiny integer, stored in "
"a C :c:expr:`unsigned char`."
msgstr ""
"Convierte un entero Python no negativo en un entero minúsculo sin signo, "
"almacenado en un fichero C :c:expr:`unsigned char`."

#: ../../c-api/arg.rst:248 ../../c-api/arg.rst:592
msgid "``B`` (:class:`int`) [unsigned char]"
msgstr "``B`` (:class:`int`) [unsigned char]"

#: ../../c-api/arg.rst:249
msgid ""
"Convert a Python integer to a tiny integer without overflow checking, stored "
"in a C :c:expr:`unsigned char`."
msgstr ""
"Convierte un entero Python en un entero minúsculo sin comprobación de "
"desbordamiento, almacenado en un C :c:expr:`unsigned char`."

#: ../../c-api/arg.rst:252 ../../c-api/arg.rst:586
msgid "``h`` (:class:`int`) [short int]"
msgstr "``h`` (:class:`int`) [short int]"

#: ../../c-api/arg.rst:253
msgid "Convert a Python integer to a C :c:expr:`short int`."
msgstr "Convierte un entero Python en un entero C :c:expr:`short int`."

#: ../../c-api/arg.rst:255 ../../c-api/arg.rst:595
msgid "``H`` (:class:`int`) [unsigned short int]"
msgstr "``H`` (:class:`int`) [unsigned short int]"

#: ../../c-api/arg.rst:256
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned short int`, without "
"overflow checking."
msgstr ""
"Convierte un entero Python en un entero C :c:expr:`unsigned short int`, sin "
"comprobación de desbordamiento."

#: ../../c-api/arg.rst:259 ../../c-api/arg.rst:580
msgid "``i`` (:class:`int`) [int]"
msgstr "``i`` (:class:`int`) [int]"

#: ../../c-api/arg.rst:260
msgid "Convert a Python integer to a plain C :c:expr:`int`."
msgstr "Convierte un entero Python en un entero C :c:expr:`int`."

#: ../../c-api/arg.rst:262 ../../c-api/arg.rst:598
msgid "``I`` (:class:`int`) [unsigned int]"
msgstr "``I`` (:class:`int`) [unsigned int]"

#: ../../c-api/arg.rst:263
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned int`, without overflow "
"checking."
msgstr ""
"Convierte un entero Python en un entero C :c:expr:`unsigned int`, sin "
"comprobación de desbordamiento."

#: ../../c-api/arg.rst:266 ../../c-api/arg.rst:589
msgid "``l`` (:class:`int`) [long int]"
msgstr "``l`` (:class:`int`) [long int]"

#: ../../c-api/arg.rst:267
msgid "Convert a Python integer to a C :c:expr:`long int`."
msgstr "Convierte un entero Python en un entero C :c:expr:`long int`."

#: ../../c-api/arg.rst:269 ../../c-api/arg.rst:601
msgid "``k`` (:class:`int`) [unsigned long]"
msgstr "``k`` (:class:`int`) [unsigned long]"

#: ../../c-api/arg.rst:270
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned long` without overflow "
"checking."
msgstr ""
"Convierte un entero Python en un C :c:expr:`unsigned long` sin comprobación "
"de desbordamiento."

#: ../../c-api/arg.rst:273 ../../c-api/arg.rst:604
msgid "``L`` (:class:`int`) [long long]"
msgstr "``L`` (:class:`int`) [long long]"

#: ../../c-api/arg.rst:274
msgid "Convert a Python integer to a C :c:expr:`long long`."
msgstr "Convierte un entero Python en un C :c:expr:`long long`."

#: ../../c-api/arg.rst:276 ../../c-api/arg.rst:607
msgid "``K`` (:class:`int`) [unsigned long long]"
msgstr "``K`` (:class:`int`) [unsigned long long]"

#: ../../c-api/arg.rst:277
msgid ""
"Convert a Python integer to a C :c:expr:`unsigned long long` without "
"overflow checking."
msgstr ""
"Convierte un entero Python en un entero C :c:expr:`unsigned long long` sin "
"comprobación de desbordamiento."

#: ../../c-api/arg.rst:280 ../../c-api/arg.rst:610
msgid "``n`` (:class:`int`) [:c:type:`Py_ssize_t`]"
msgstr "``n`` (:class:`int`) [:c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:281
msgid "Convert a Python integer to a C :c:type:`Py_ssize_t`."
msgstr "Convertir un entero de Python en un C :c:type:`Py_ssize_t`."

#: ../../c-api/arg.rst:283
msgid "``c`` (:class:`bytes` or :class:`bytearray` of length 1) [char]"
msgstr "``c`` (:class:`bytes` o :class:`bytearray` de longitud 1) [char]"

#: ../../c-api/arg.rst:284
msgid ""
"Convert a Python byte, represented as a :class:`bytes` or :class:`bytearray` "
"object of length 1, to a C :c:expr:`char`."
msgstr ""
"Convierte un byte Python, representado como un objeto :class:`bytes` o :"
"class:`bytearray` de longitud 1, en un objeto C :c:expr:`char`."

#: ../../c-api/arg.rst:287
msgid "Allow :class:`bytearray` objects."
msgstr "Permitir objetos :class:`bytearray`."

#: ../../c-api/arg.rst:290 ../../c-api/arg.rst:617
msgid "``C`` (:class:`str` of length 1) [int]"
msgstr "``C`` (:class:`str` de longitud 1) [int]"

#: ../../c-api/arg.rst:291
msgid ""
"Convert a Python character, represented as a :class:`str` object of length "
"1, to a C :c:expr:`int`."
msgstr ""
"Convierte un carácter Python, representado como un objeto :class:`str` de "
"longitud 1, en un carácter C :c:expr:`int`."

#: ../../c-api/arg.rst:294 ../../c-api/arg.rst:624
msgid "``f`` (:class:`float`) [float]"
msgstr "``f`` (:class:`float`) [float]"

#: ../../c-api/arg.rst:295
msgid "Convert a Python floating-point number to a C :c:expr:`float`."
msgstr ""
"Convierta un número de coma flotante de Python en un número de C :c:expr:"
"`float`."

#: ../../c-api/arg.rst:297 ../../c-api/arg.rst:621
msgid "``d`` (:class:`float`) [double]"
msgstr "``d`` (:class:`float`) [double]"

#: ../../c-api/arg.rst:298
msgid "Convert a Python floating-point number to a C :c:expr:`double`."
msgstr ""
"Convierta un número de coma flotante de Python en un número de C :c:expr:"
"`double`."

#: ../../c-api/arg.rst:300
msgid "``D`` (:class:`complex`) [Py_complex]"
msgstr "``D`` (:class:`complex`) [Py_complex]"

#: ../../c-api/arg.rst:301
msgid "Convert a Python complex number to a C :c:type:`Py_complex` structure."
msgstr ""
"Convertir un entero de Python en una estructura C :c:type:`Py_complex`."

#: ../../c-api/arg.rst:304
msgid "Other objects"
msgstr "Otros objetos"

#: ../../c-api/arg.rst:306 ../../c-api/arg.rst:630
msgid "``O`` (object) [PyObject \\*]"
msgstr "``O`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:307
msgid ""
"Store a Python object (without any conversion) in a C object pointer.  The C "
"program thus receives the actual object that was passed.  A new :term:"
"`strong reference` to the object is not created (i.e. its reference count is "
"not increased). The pointer stored is not ``NULL``."
msgstr ""
"Almacenar un objeto Python (sin ninguna conversión) en un puntero de objeto "
"C.  El programa C recibe así el objeto real que se le pasó.  No se crea una "
"nueva referencia :term:`strong` al objeto (es decir, no se incrementa su "
"número de referencias). El puntero almacenado no es ``NULL``."

#: ../../c-api/arg.rst:313
msgid "``O!`` (object) [*typeobject*, PyObject \\*]"
msgstr "``O!`` (object) [*typeobject*, PyObject \\*]"

#: ../../c-api/arg.rst:314
msgid ""
"Store a Python object in a C object pointer.  This is similar to ``O``, but "
"takes two C arguments: the first is the address of a Python type object, the "
"second is the address of the C variable (of type :c:expr:`PyObject*`) into "
"which the object pointer is stored.  If the Python object does not have the "
"required type, :exc:`TypeError` is raised."
msgstr ""
"Almacena un objeto Python en un puntero a objeto C.  Esto es similar a "
"``O``, pero toma dos argumentos C: el primero es la dirección de un objeto "
"de tipo Python, el segundo es la dirección de la variable C (de tipo :c:expr:"
"`PyObject*`) en la que se almacena el puntero a objeto.  Si el objeto Python "
"no tiene el tipo requerido, aparece :exc:`TypeError`."

#: ../../c-api/arg.rst:322
msgid "``O&`` (object) [*converter*, *address*]"
msgstr "``O&`` (objeto) [*converter*, *address*]"

#: ../../c-api/arg.rst:323
msgid ""
"Convert a Python object to a C variable through a *converter* function.  "
"This takes two arguments: the first is a function, the second is the address "
"of a C variable (of arbitrary type), converted to :c:expr:`void *`.  The "
"*converter* function in turn is called as follows::"
msgstr ""
"Convierte un objeto Python en una variable C mediante una función "
"*converter*.  Ésta toma dos argumentos: el primero es una función, el "
"segundo es la dirección de una variable C (de tipo arbitrario), convertida "
"a :c:expr:`void *`.  La función *converter* a su vez se llama de la "
"siguiente manera::"

#: ../../c-api/arg.rst:328
msgid "status = converter(object, address);"
msgstr "status = converter(object, address);"

#: ../../c-api/arg.rst:330
msgid ""
"where *object* is the Python object to be converted and *address* is the :c:"
"expr:`void*` argument that was passed to the ``PyArg_Parse*`` function. The "
"returned *status* should be ``1`` for a successful conversion and ``0`` if "
"the conversion has failed.  When the conversion fails, the *converter* "
"function should raise an exception and leave the content of *address* "
"unmodified."
msgstr ""
"donde *object* es el objeto Python a convertir y *address* es el argumento :"
"c:expr:`void*` que se pasó a la función ``PyArg_Parse*``. El *status* "
"devuelto debería ser ``1`` para una conversión exitosa y ``0`` si la "
"conversión ha fallado.  Cuando la conversión falla, la función *converter* "
"debe lanzar una excepción y dejar el contenido de *address* sin modificar."

#: ../../c-api/arg.rst:339
msgid ""
"If the *converter* returns :c:macro:`!Py_CLEANUP_SUPPORTED`, it may get "
"called a second time if the argument parsing eventually fails, giving the "
"converter a chance to release any memory that it had already allocated. In "
"this second call, the *object* parameter will be ``NULL``; *address* will "
"have the same value as in the original call."
msgstr ""
"Si el *converter* devuelve :c:macro:`!Py_CLEANUP_SUPPORTED`, se puede llamar "
"una segunda vez si el análisis del argumento finalmente falla, dando al "
"convertidor la oportunidad de liberar cualquier memoria que ya hubiera "
"asignado. En esta segunda llamada, el parámetro *object* será ``NULL``; "
"*address* tendrá el mismo valor que en la llamada original."

#: ../../c-api/arg.rst:345
msgid ""
"Examples of converters: :c:func:`PyUnicode_FSConverter` and :c:func:"
"`PyUnicode_FSDecoder`."
msgstr ""
"Ejemplos de convertidores: :c:func:`PyUnicode_FSConverter` y :c:func:"
"`PyUnicode_FSDecoder`."

#: ../../c-api/arg.rst:348
msgid ":c:macro:`!Py_CLEANUP_SUPPORTED` was added."
msgstr "Se añadió :c:macro:`!Py_CLEANUP_SUPPORTED`."

#: ../../c-api/arg.rst:351
msgid "``p`` (:class:`bool`) [int]"
msgstr "``p`` (:class:`bool`) [int]"

#: ../../c-api/arg.rst:352
msgid ""
"Tests the value passed in for truth (a boolean **p**\\ redicate) and "
"converts the result to its equivalent C true/false integer value. Sets the "
"int to ``1`` if the expression was true and ``0`` if it was false. This "
"accepts any valid Python value.  See :ref:`truth` for more information about "
"how Python tests values for truth."
msgstr ""
"Comprueba la verdad del valor pasado (un redicado booleano **p**\\) y "
"convierte el resultado en su valor entero C verdadero/falso equivalente. "
"Fija el int en ``1`` si la expresxión es verdadera y ``0`` si es falsa. Esto "
"acepta cualquier valor de Python válido. Ver :ref:`truth`para obtener más "
"información sobre cómo Python prueba los valores verdaderos."

#: ../../c-api/arg.rst:360 ../../c-api/arg.rst:654
msgid "``(items)`` (:class:`tuple`) [*matching-items*]"
msgstr "``(items)`` (:class:`tuple`) [*matching-items*]"

#: ../../c-api/arg.rst:361
msgid ""
"The object must be a Python sequence whose length is the number of format "
"units in *items*.  The C arguments must correspond to the individual format "
"units in *items*.  Format units for sequences may be nested."
msgstr ""
"El objeto debe ser una secuencia de Python cuya longitud es el número de "
"unidades formateadas en *items*. Los argumentos de C deben corresponder a "
"las unidades de formato individuales en *items*. Las unidades de formato "
"para secuencias pueden estar anidadas."

#: ../../c-api/arg.rst:365
msgid ""
"A few other characters have a meaning in a format string.  These may not "
"occur inside nested parentheses.  They are:"
msgstr ""
"Algunos otros caracteres tienen un significado en una cadena de formato. Es "
"posible que no aparezcan dentro de paréntesis anidados. Son:"

#: ../../c-api/arg.rst:368
msgid "``|``"
msgstr "``|``"

#: ../../c-api/arg.rst:369
msgid ""
"Indicates that the remaining arguments in the Python argument list are "
"optional. The C variables corresponding to optional arguments should be "
"initialized to their default value --- when an optional argument is not "
"specified, :c:func:`PyArg_ParseTuple` does not touch the contents of the "
"corresponding C variable(s)."
msgstr ""
"Indica que los argumentos restantes en la lista de argumentos de Python son "
"opcionales. Las variables C correspondientes a los argumentos opcionales "
"deben inicializarse a su valor predeterminado --- cuando no se especifica un "
"argumento opcional, :c:func:`PyArg_ParseTuple` no toca el contenido de la-s "
"variable-s C correspondiente(s)."

#: ../../c-api/arg.rst:375
msgid "``$``"
msgstr "``$``"

#: ../../c-api/arg.rst:376
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` only: Indicates that the remaining "
"arguments in the Python argument list are keyword-only.  Currently, all "
"keyword-only arguments must also be optional arguments, so ``|`` must always "
"be specified before ``$`` in the format string."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` only: indica que los argumentos "
"restantes en la lista de argumentos de Python son solo palabras clave. "
"Actualmente, todos los argumentos de solo palabras clave también deben ser "
"argumentos opcionales., así ``|`` siempre debe especificarse antes de ``$`` "
"en la cadena de formato."

#: ../../c-api/arg.rst:384
msgid "``:``"
msgstr "``:``"

#: ../../c-api/arg.rst:385
msgid ""
"The list of format units ends here; the string after the colon is used as "
"the function name in error messages (the \"associated value\" of the "
"exception that :c:func:`PyArg_ParseTuple` raises)."
msgstr ""
"La lista de unidades de formato termina aquí; la cadena después de los dos "
"puntos se usa como el nombre de la función en los mensajes de error (el "
"\"valor asociado\" de la excepción que gener :c:func:`PyArg_ParseTuple`)."

#: ../../c-api/arg.rst:389
msgid "``;``"
msgstr "``;``"

#: ../../c-api/arg.rst:390
msgid ""
"The list of format units ends here; the string after the semicolon is used "
"as the error message *instead* of the default error message.  ``:`` and ``;"
"`` mutually exclude each other."
msgstr ""
"La lista de unidades de formato termina aquí; la cadena después del punto y "
"coma se usa como mensaje de error *en lugar* del mensaje de error "
"predeterminad  ``:`` y ``;``se excluyen mutuamente."

#: ../../c-api/arg.rst:394
msgid ""
"Note that any Python object references which are provided to the caller are "
"*borrowed* references; do not release them (i.e. do not decrement their "
"reference count)!"
msgstr ""
"Tenga en cuenta que cualquier referencia a objetos Python que se proporcione "
"a la persona que llama son referencias *prestadas*; ¡no las libere (es "
"decir, no disminuya su recuento de referencias)!"

#: ../../c-api/arg.rst:398
msgid ""
"Additional arguments passed to these functions must be addresses of "
"variables whose type is determined by the format string; these are used to "
"store values from the input tuple.  There are a few cases, as described in "
"the list of format units above, where these parameters are used as input "
"values; they should match what is specified for the corresponding format "
"unit in that case."
msgstr ""
"Los argumentos adicionales pasados ​​a estas funciones deben ser direcciones "
"de variables cuyo tipo esté determinado por la cadena de formato; estos se "
"utilizan para almacenar valores de la tupla de entrada. Hay algunos casos, "
"como se describe en la lista de unidades de formato anterior, donde estos "
"parámetros se usan como valores de entrada; deben coincidir con lo "
"especificado para la unidad de formato correspondiente en ese caso."

#: ../../c-api/arg.rst:404
msgid ""
"For the conversion to succeed, the *arg* object must match the format and "
"the format must be exhausted.  On success, the ``PyArg_Parse*`` functions "
"return true, otherwise they return false and raise an appropriate exception. "
"When the ``PyArg_Parse*`` functions fail due to conversion failure in one of "
"the format units, the variables at the addresses corresponding to that and "
"the following format units are left untouched."
msgstr ""
"Para que la conversión tenga éxito, el objeto *arg* debe coincidir con el "
"formato y éste debe estar agotado.  En caso de éxito, las funciones "
"``PyArg_Parse*`` devuelven true, en caso contrario devuelven false y lanzan "
"una excepción apropiada. Cuando las funciones ``PyArg_Parse*`` fallan debido "
"a un fallo de conversión en una de las unidades de formato, las variables en "
"las direcciones correspondientes a esa unidad de formato y a las siguientes "
"se dejan intactas."

#: ../../c-api/arg.rst:413
msgid "API Functions"
msgstr "Funciones API"

#: ../../c-api/arg.rst:417
msgid ""
"Parse the parameters of a function that takes only positional parameters "
"into local variables.  Returns true on success; on failure, it returns false "
"and raises the appropriate exception."
msgstr ""
"Analizar los parámetros de una función que solo toma parámetros posicionales "
"en variables locales. Devuelve verdadero en caso de éxito; en caso de error, "
"devuelve falso y genera la excepción adecuada."

#: ../../c-api/arg.rst:424
msgid ""
"Identical to :c:func:`PyArg_ParseTuple`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""
"Idéntico a :c:func:`PyArg_ParseTuple`, excepto que acepta va_list en lugar "
"de un número variable de argumentos."

#: ../../c-api/arg.rst:430
msgid ""
"Parse the parameters of a function that takes both positional and keyword "
"parameters into local variables.  The *keywords* argument is a ``NULL``-"
"terminated array of keyword parameter names.  Empty names denote :ref:"
"`positional-only parameters <positional-only_parameter>`. Returns true on "
"success; on failure, it returns false and raises the appropriate exception."
msgstr ""
"Analizar los parámetros de una función que toma tanto los parámetros "
"posicionales como los de palabras clave en variables locales. El argumento "
"*palabras clave* es una matriz terminada en  ``NULL``-de nombres de "
"parámetros de palabras clave.  Los nombres vacíos denotan :ref:`parámetros "
"solo posicionales <positional-only_parameter>`. Devuelve verdadero en caso "
"de éxito; en caso de error, devuelve falso y genera la excepción adecuada."

#: ../../c-api/arg.rst:437
msgid ""
"Added support for :ref:`positional-only parameters <positional-"
"only_parameter>`."
msgstr ""
"Se agregó soporte para :ref:`parámetros solo posicionales <positional-"
"only_parameter>`."

#: ../../c-api/arg.rst:444
msgid ""
"Identical to :c:func:`PyArg_ParseTupleAndKeywords`, except that it accepts a "
"va_list rather than a variable number of arguments."
msgstr ""
"Idéntico a :c:func:`PyArg_ParseTupleAndKeywords`,excepto que acepta va_list "
"en lugar de un número variable de argumentos."

#: ../../c-api/arg.rst:450
msgid ""
"Ensure that the keys in the keywords argument dictionary are strings.  This "
"is only needed if :c:func:`PyArg_ParseTupleAndKeywords` is not used, since "
"the latter already does this check."
msgstr ""
"Asegúrese de que las claves en el diccionario de argumentos de palabras "
"clave sean cadenas. Esto solo es necesario si:c:func:"
"`PyArg_ParseTupleAndKeywords` no se usa, ya que este último ya hace esta "
"verificación."

#: ../../c-api/arg.rst:460
msgid ""
"Function used to deconstruct the argument lists of \"old-style\" functions "
"--- these are functions which use the :const:`METH_OLDARGS` parameter "
"parsing method, which has been removed in Python 3.  This is not recommended "
"for use in parameter parsing in new code, and most code in the standard "
"interpreter has been modified to no longer use this for that purpose.  It "
"does remain a convenient way to decompose other tuples, however, and may "
"continue to be used for that purpose."
msgstr ""
"Función utilizada para deconstruir las listas de argumentos de las funciones "
"de \"old-style\", estas son funciones que utilizan el método de análisis de "
"parámetros:const:`METH_OLDARGS` que se eliminó en Python 3.  No se "
"recomienda su uso en el análisis de parámetros en código nuevo, y la mayoría "
"del código en el intérprete estándar se ha modificado para que ya no se use "
"con ese propósito. Sin embargo, sigue siendo una forma conveniente de "
"descomponer otras tuplas y puede continuar usándose para ese propósito."

#: ../../c-api/arg.rst:471
msgid ""
"A simpler form of parameter retrieval which does not use a format string to "
"specify the types of the arguments.  Functions which use this method to "
"retrieve their parameters should be declared as :c:macro:`METH_VARARGS` in "
"function or method tables.  The tuple containing the actual parameters "
"should be passed as *args*; it must actually be a tuple.  The length of the "
"tuple must be at least *min* and no more than *max*; *min* and *max* may be "
"equal.  Additional arguments must be passed to the function, each of which "
"should be a pointer to a :c:expr:`PyObject*` variable; these will be filled "
"in with the values from *args*; they will contain :term:`borrowed references "
"<borrowed reference>`. The variables which correspond to optional parameters "
"not given by *args* will not be filled in; these should be initialized by "
"the caller. This function returns true on success and false if *args* is not "
"a tuple or contains the wrong number of elements; an exception will be set "
"if there was a failure."
msgstr ""
"Una forma más sencilla de recuperación de parámetros que no utiliza una "
"cadena de formato para especificar los tipos de los argumentos.  Las "
"funciones que utilicen este método para recuperar sus parámetros deben "
"declararse como :c:macro:`METH_VARARGS` en las tablas de funciones o "
"métodos.  La tupla que contiene los parámetros reales debe pasarse como "
"*args*; debe ser realmente una tupla.  La longitud de la tupla debe ser como "
"mínimo *min* y como máximo *max*; *min* y *max* pueden ser iguales.  Deben "
"pasarse argumentos adicionales a la función, cada uno de los cuales debe ser "
"un puntero a una variable :c:expr:`PyObject*`; éstos se rellenarán con los "
"valores de *args*; contendrán :term:`referencias prestadas <borrowed "
"reference>`. Las variables que corresponden a parámetros opcionales no dados "
"por *args* no serán rellenadas; éstas deben ser inicializadas por el "
"llamador. Esta función devuelve verdadero en caso de éxito y falso si *args* "
"no es una tupla o contiene un número incorrecto de elementos; se establecerá "
"una excepción si se ha producido un fallo."

#: ../../c-api/arg.rst:486
msgid ""
"This is an example of the use of this function, taken from the sources for "
"the :mod:`!_weakref` helper module for weak references::"
msgstr ""
"Este es un ejemplo del uso de esta función, tomado de las fuentes del módulo "
"de ayuda :mod:`!_weakref` para referencias débiles::"

#: ../../c-api/arg.rst:489
msgid ""
"static PyObject *\n"
"weakref_ref(PyObject *self, PyObject *args)\n"
"{\n"
"    PyObject *object;\n"
"    PyObject *callback = NULL;\n"
"    PyObject *result = NULL;\n"
"\n"
"    if (PyArg_UnpackTuple(args, \"ref\", 1, 2, &object, &callback)) {\n"
"        result = PyWeakref_NewRef(object, callback);\n"
"    }\n"
"    return result;\n"
"}"
msgstr ""
"static PyObject *\n"
"weakref_ref(PyObject *self, PyObject *args)\n"
"{\n"
"    PyObject *object;\n"
"    PyObject *callback = NULL;\n"
"    PyObject *result = NULL;\n"
"\n"
"    if (PyArg_UnpackTuple(args, \"ref\", 1, 2, &object, &callback)) {\n"
"        result = PyWeakref_NewRef(object, callback);\n"
"    }\n"
"    return result;\n"
"}"

#: ../../c-api/arg.rst:502
msgid ""
"The call to :c:func:`PyArg_UnpackTuple` in this example is entirely "
"equivalent to this call to :c:func:`PyArg_ParseTuple`::"
msgstr ""
"La llamada :c:func:`PyArg_UnpackTuple` en este ejemplo es totalmente "
"equivalente a esta llamada a :c:func:`PyArg_ParseTuple`::"

#: ../../c-api/arg.rst:505
msgid "PyArg_ParseTuple(args, \"O|O:ref\", &object, &callback)"
msgstr "PyArg_ParseTuple(args, \"O|O:ref\", &object, &callback)"

#: ../../c-api/arg.rst:510
msgid "Building values"
msgstr "Estableciendo valores"

#: ../../c-api/arg.rst:514
msgid ""
"Create a new value based on a format string similar to those accepted by the "
"``PyArg_Parse*`` family of functions and a sequence of values.  Returns the "
"value or ``NULL`` in the case of an error; an exception will be raised if "
"``NULL`` is returned."
msgstr ""
"Crea un nuevo valor basado en una cadena de formato similar a las aceptadas "
"por la familia de funciones ``PyArg_Parse*`` y una secuencia de valores.  "
"Devuelve el valor o ``NULL`` en caso de error; se lanzará una excepción si "
"se devuelve ``NULL``."

#: ../../c-api/arg.rst:519
msgid ""
":c:func:`Py_BuildValue` does not always build a tuple.  It builds a tuple "
"only if its format string contains two or more format units.  If the format "
"string is empty, it returns ``None``; if it contains exactly one format "
"unit, it returns whatever object is described by that format unit.  To force "
"it to return a tuple of size 0 or one, parenthesize the format string."
msgstr ""
":c:func:`Py_BuildValue` no siempre construye una tupla. Construye una tupla "
"solo si su cadena de formato contiene dos o más unidades de formato. Si la "
"cadena de formato está vacía, devuelve ``None``; si contiene exactamente una "
"unidad de formato, devuelve cualquier objeto descrito por esa unidad de "
"formato. Para obligarlo a devolver una tupla de tamaño 0 o uno, poner entre "
"paréntesis la cadena de formato."

#: ../../c-api/arg.rst:525
msgid ""
"When memory buffers are passed as parameters to supply data to build "
"objects, as for the ``s`` and ``s#`` formats, the required data is copied.  "
"Buffers provided by the caller are never referenced by the objects created "
"by :c:func:`Py_BuildValue`.  In other words, if your code invokes :c:func:"
"`malloc` and passes the allocated memory to :c:func:`Py_BuildValue`, your "
"code is responsible for calling :c:func:`free` for that memory once :c:func:"
"`Py_BuildValue` returns."
msgstr ""
"Cuando los búferes de memoria se pasan como parámetros para proporcionar "
"datos para construir objetos, como en los formatos  ``s`` y ``s#``, se "
"copian los datos requeridos. Los objetos creados por caller nunca hacen "
"referencia a los búfer proporcionados por :c:func:`Py_BuildValue`.  En otras "
"palabras, si el código llama a :c:func:`malloc` y pasa la memoria asignada "
"a :c:func:`Py_BuildValue`, su código es responsable de llamar a :c:func:"
"`free` para esa memoria una vez que devuelve :c:func:`Py_BuildValue`."

#: ../../c-api/arg.rst:533
msgid ""
"In the following description, the quoted form is the format unit; the entry "
"in (round) parentheses is the Python object type that the format unit will "
"return; and the entry in [square] brackets is the type of the C value(s) to "
"be passed."
msgstr ""
"En la siguiente descripción, la forma citada es la unidad de formato; la "
"entrada entre paréntesis (redondos) es el tipo de objeto de Python que "
"devolverá la unidad de formato; y la entrada entre corchetes [cuadrados] es "
"el tipo de valor(es) de C a pasar."

#: ../../c-api/arg.rst:537
msgid ""
"The characters space, tab, colon and comma are ignored in format strings "
"(but not within format units such as ``s#``).  This can be used to make long "
"format strings a tad more readable."
msgstr ""
"Los caracteres de espacio, tabulador, dos puntos y coma se ignoran en "
"cadenas de formato (pero no dentro de unidades de formato como ``s#``).  "
"Esto se puede usar para hacer que las cadenas de formato largo sean un poco "
"más legibles."

#: ../../c-api/arg.rst:541
msgid "``s`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``s`` (:class:`str` o ``None``) [const char \\*]"

#: ../../c-api/arg.rst:542
msgid ""
"Convert a null-terminated C string to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, ``None`` is used."
msgstr ""
"Convertir una cadena C terminada en nulo en un objeto Python  :class:`str` "
"usando la codificación ``'utf-8'``. Si el puntero de la cadena C es "
"``NULL``, se usa ``None``."

#: ../../c-api/arg.rst:545
msgid ""
"``s#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``s#`` (:class:`str` o ``None``) [const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:546
msgid ""
"Convert a C string and its length to a Python :class:`str` object using "
"``'utf-8'`` encoding. If the C string pointer is ``NULL``, the length is "
"ignored and ``None`` is returned."
msgstr ""
"Convertir una cadena C y su longitud en un objeto Python  :class:`str` "
"usando la codificación ``'utf-8'``. Si el puntero de la cadena C es "
"``NULL``, la longitud se ignora y se devuelve ``None``."

#: ../../c-api/arg.rst:550
msgid "``y`` (:class:`bytes`) [const char \\*]"
msgstr "``y`` (:class:`bytes`) [const char \\*]"

#: ../../c-api/arg.rst:551
msgid ""
"This converts a C string to a Python :class:`bytes` object.  If the C string "
"pointer is ``NULL``, ``None`` is returned."
msgstr ""
"Esto convierte una cadena C en un objeto Python :class:`bytes`.  Si el "
"puntero de la cadena C es ``NULL``,  se devuelve``None``."

#: ../../c-api/arg.rst:554
msgid "``y#`` (:class:`bytes`) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr "``y#`` (:class:`bytes`) [const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:555
msgid ""
"This converts a C string and its lengths to a Python object.  If the C "
"string pointer is ``NULL``, ``None`` is returned."
msgstr ""
"Esto convierte una cadena C y sus longitudes en un objeto de Python. Si el "
"puntero de la cadena C es ``NULL``, se devuelve ``None``."

#: ../../c-api/arg.rst:559 ../../c-api/arg.rst:575
msgid "Same as ``s``."
msgstr "Igual que ``s``."

#: ../../c-api/arg.rst:561
msgid ""
"``z#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``z#`` (:class:`str` o ``None``) [const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:562 ../../c-api/arg.rst:578
msgid "Same as ``s#``."
msgstr "Igual que ``s#``."

#: ../../c-api/arg.rst:564
msgid "``u`` (:class:`str`) [const wchar_t \\*]"
msgstr "``u`` (:class:`str`) [const wchar_t \\*]"

#: ../../c-api/arg.rst:565
msgid ""
"Convert a null-terminated :c:type:`wchar_t` buffer of Unicode (UTF-16 or "
"UCS-4) data to a Python Unicode object.  If the Unicode buffer pointer is "
"``NULL``, ``None`` is returned."
msgstr ""
"Convierte un búfer :c:type:`wchar_t` terminado en cero de datos Unicode "
"(UTF-16 o UCS-4) en un objeto Python Unicode.  Si el puntero del búfer "
"Unicode es ``NULL``, se devuelve ``None``."

#: ../../c-api/arg.rst:569
msgid "``u#`` (:class:`str`) [const wchar_t \\*, :c:type:`Py_ssize_t`]"
msgstr "``u#`` (:class:`str`) [const wchar_t \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:570
msgid ""
"Convert a Unicode (UTF-16 or UCS-4) data buffer and its length to a Python "
"Unicode object.   If the Unicode buffer pointer is ``NULL``, the length is "
"ignored and ``None`` is returned."
msgstr ""
"Convertir un búfer de datos Unicode (UTF-16 o UCS-4) y su longitud en un "
"objeto Python Unicode. Si el puntero del búfer Unicode es``NULL``, ignora la "
"longitud y se devuelve ``None``."

#: ../../c-api/arg.rst:574
msgid "``U`` (:class:`str` or ``None``) [const char \\*]"
msgstr "``U`` (:class:`str` o ``None``) [const char \\*]"

#: ../../c-api/arg.rst:577
msgid ""
"``U#`` (:class:`str` or ``None``) [const char \\*, :c:type:`Py_ssize_t`]"
msgstr ""
"``U#`` (:class:`str` o ``None``) [const char \\*, :c:type:`Py_ssize_t`]"

#: ../../c-api/arg.rst:581
msgid "Convert a plain C :c:expr:`int` to a Python integer object."
msgstr "Convierte un C simple :c:expr:`int` en un objeto entero de Python."

#: ../../c-api/arg.rst:583
msgid "``b`` (:class:`int`) [char]"
msgstr "``b`` (:class:`int`) [char]"

#: ../../c-api/arg.rst:584
msgid "Convert a plain C :c:expr:`char` to a Python integer object."
msgstr "Convierte un C :c:expr:`char` simple en un objeto entero de Python."

#: ../../c-api/arg.rst:587
msgid "Convert a plain C :c:expr:`short int` to a Python integer object."
msgstr ""
"Convierte un C :c:expr:`short int` simple en un objeto entero de Python."

#: ../../c-api/arg.rst:590
msgid "Convert a C :c:expr:`long int` to a Python integer object."
msgstr "Convierte un C :c:expr:`long int` en un objeto entero de Python."

#: ../../c-api/arg.rst:593
msgid "Convert a C :c:expr:`unsigned char` to a Python integer object."
msgstr "Convierte un C :c:expr:`unsigned char` en un objeto entero de Python."

#: ../../c-api/arg.rst:596
msgid "Convert a C :c:expr:`unsigned short int` to a Python integer object."
msgstr ""
"Convierte un C :c:expr:`unsigned short int` en un objeto entero de Python."

#: ../../c-api/arg.rst:599
msgid "Convert a C :c:expr:`unsigned int` to a Python integer object."
msgstr "Convierte un C :c:expr:`unsigned int` en un objeto entero de Python."

#: ../../c-api/arg.rst:602
msgid "Convert a C :c:expr:`unsigned long` to a Python integer object."
msgstr "Convierte un C :c:expr:`unsigned long` en un objeto entero de Python."

#: ../../c-api/arg.rst:605
msgid "Convert a C :c:expr:`long long` to a Python integer object."
msgstr "Convierte un C :c:expr:`long long` en un objeto entero de Python."

#: ../../c-api/arg.rst:608
msgid "Convert a C :c:expr:`unsigned long long` to a Python integer object."
msgstr ""
"Convierte un C :c:expr:`unsigned long long` en un objeto entero de Python."

#: ../../c-api/arg.rst:611
msgid "Convert a C :c:type:`Py_ssize_t` to a Python integer."
msgstr "Convertir un C :c:type:`Py_ssize_t` en un entero de Python."

#: ../../c-api/arg.rst:613
msgid "``c`` (:class:`bytes` of length 1) [char]"
msgstr "``c`` (:class:`bytes` de longitud 1) [char]"

#: ../../c-api/arg.rst:614
msgid ""
"Convert a C :c:expr:`int` representing a byte to a Python :class:`bytes` "
"object of length 1."
msgstr ""
"Convierte un C :c:expr:`int` que representa un byte en un objeto Python :"
"class:`bytes` de longitud 1."

#: ../../c-api/arg.rst:618
msgid ""
"Convert a C :c:expr:`int` representing a character to Python :class:`str` "
"object of length 1."
msgstr ""
"Convierte un C :c:expr:`int` que representa un carácter en un objeto Python :"
"class:`str` de longitud 1."

#: ../../c-api/arg.rst:622
msgid "Convert a C :c:expr:`double` to a Python floating-point number."
msgstr ""
"Convierte un número C :c:expr:`double` en un número Python de coma flotante."

#: ../../c-api/arg.rst:625
msgid "Convert a C :c:expr:`float` to a Python floating-point number."
msgstr ""
"Convierte un número C :c:expr:`float` en un número Python de coma flotante."

#: ../../c-api/arg.rst:627
msgid "``D`` (:class:`complex`) [Py_complex \\*]"
msgstr "``D`` (:class:`complex`) [Py_complex \\*]"

#: ../../c-api/arg.rst:628
msgid "Convert a C :c:type:`Py_complex` structure to a Python complex number."
msgstr ""
"Convertir una estructura C :c:type:`Py_complex` en un número complejo de "
"Python."

#: ../../c-api/arg.rst:631
msgid ""
"Pass a Python object untouched but create a new :term:`strong reference` to "
"it (i.e. its reference count is incremented by one). If the object passed in "
"is a ``NULL`` pointer, it is assumed that this was caused because the call "
"producing the argument found an error and set an exception. Therefore, :c:"
"func:`Py_BuildValue` will return ``NULL`` but won't raise an exception.  If "
"no exception has been raised yet, :exc:`SystemError` is set."
msgstr ""
"Pasa un objeto Python intacto pero crea una nueva referencia :term:`strong` "
"a él (es decir, su cuenta de referencias se incrementa en uno). Si el objeto "
"pasado es un puntero ``NULL``, se asume que esto se originó porque la "
"llamada que produjo el argumento encontró un error y estableció una "
"excepción. Por lo tanto, :c:func:`Py_BuildValue` devolverá ``NULL`` pero no "
"lanzará una excepción.  Si todavía no se ha lanzado ninguna excepción, se "
"establece :exc:`SystemError`."

#: ../../c-api/arg.rst:640
msgid "``S`` (object) [PyObject \\*]"
msgstr "``S`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:641
msgid "Same as ``O``."
msgstr "Igual que ``O``."

#: ../../c-api/arg.rst:643
msgid "``N`` (object) [PyObject \\*]"
msgstr "``N`` (object) [PyObject \\*]"

#: ../../c-api/arg.rst:644
msgid ""
"Same as ``O``, except it doesn't create a new :term:`strong reference`. "
"Useful when the object is created by a call to an object constructor in the "
"argument list."
msgstr ""
"Igual que ``O``, excepto que no crea una nueva referencia :term:`strong`. "
"Útil cuando el objeto se crea mediante una llamada a un constructor de "
"objetos en la lista de argumentos."

#: ../../c-api/arg.rst:648
msgid "``O&`` (object) [*converter*, *anything*]"
msgstr "``O&`` (object) [*converter*, *anything*]"

#: ../../c-api/arg.rst:649
msgid ""
"Convert *anything* to a Python object through a *converter* function.  The "
"function is called with *anything* (which should be compatible with :c:expr:"
"`void*`) as its argument and should return a \"new\" Python object, or "
"``NULL`` if an error occurred."
msgstr ""
"Convierte *cualquier cosa* en un objeto Python mediante una función "
"*converter*.  La función se llama con *cualquier cosa* (que debe ser "
"compatible con :c:expr:`void*`) como argumento y debe devolver un \"nuevo\" "
"objeto Python, o ``NULL`` si se ha producido un error."

#: ../../c-api/arg.rst:655
msgid ""
"Convert a sequence of C values to a Python tuple with the same number of "
"items."
msgstr ""
"Convertir una secuencia de valores de C en una tupla de Python con la misma "
"cantidad de elementos."

#: ../../c-api/arg.rst:657
msgid "``[items]`` (:class:`list`) [*matching-items*]"
msgstr "``[items]`` (:class:`list`) [*matching-items*]"

#: ../../c-api/arg.rst:658
msgid ""
"Convert a sequence of C values to a Python list with the same number of "
"items."
msgstr ""
"Convertir una secuencia de valores de C en una lista de Python con el mismo "
"número de elementos."

#: ../../c-api/arg.rst:660
msgid "``{items}`` (:class:`dict`) [*matching-items*]"
msgstr "``{items}`` (:class:`dict`) [*matching-items*]"

#: ../../c-api/arg.rst:661
msgid ""
"Convert a sequence of C values to a Python dictionary.  Each pair of "
"consecutive C values adds one item to the dictionary, serving as key and "
"value, respectively."
msgstr ""
"Convertir una secuencia de valores de C en un diccionario de Python. Cada "
"par de valores C consecutivos agrega un elemento al diccionario, sirviendo "
"como clave y valor, respectivamente."

#: ../../c-api/arg.rst:665
msgid ""
"If there is an error in the format string, the :exc:`SystemError` exception "
"is set and ``NULL`` returned."
msgstr ""
"Si hay un error en la cadena de formato, se establece la excepción :exc:"
"`SystemError` y se devuelve ``NULL``."

#: ../../c-api/arg.rst:670
msgid ""
"Identical to :c:func:`Py_BuildValue`, except that it accepts a va_list "
"rather than a variable number of arguments."
msgstr ""
"Idéntico a :c:func:`Py_BuildValue`, excepto que acepta va_list en lugar de "
"un número variable de argumentos."
