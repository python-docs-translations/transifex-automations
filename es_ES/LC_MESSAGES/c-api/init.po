# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-27 15:16+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/init.rst:8
msgid "Initialization, Finalization, and Threads"
msgstr "Inicialización, finalización y subprocesos"

#: ../../c-api/init.rst:10
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for details on "
"how to configure the interpreter prior to initialization."
msgstr ""
"См. :ref:`Конфигурация инициализации Python <init-config>` для получения "
"подробной информации о том, как настроить интерпретатор перед инициализацией."

#: ../../c-api/init.rst:16
msgid "Before Python Initialization"
msgstr "Antes de la inicialización de Python"

#: ../../c-api/init.rst:18
msgid ""
"In an application embedding  Python, the :c:func:`Py_Initialize` function "
"must be called before using any other Python/C API functions; with the "
"exception of a few functions and the :ref:`global configuration variables "
"<global-conf-vars>`."
msgstr ""
"En una aplicación que incluya Python, se debe llamar a la función :c:func:"
"`Py_Initialize` antes de utilizar cualquier otra función de la API Python/C; "
"con la excepción de unas pocas funciones y las :ref:`variables de "
"configuración global <global-conf-vars>`."

#: ../../c-api/init.rst:23
msgid ""
"The following functions can be safely called before Python is initialized:"
msgstr ""
"Las siguientes funciones se pueden llamar con seguridad antes de que Python "
"sea inicializado:"

#: ../../c-api/init.rst:25
msgid "Functions that initialize the interpreter:"
msgstr "Функции, инициализирующие интерпретатор:"

#: ../../c-api/init.rst:27
msgid ":c:func:`Py_Initialize`"
msgstr ":c:func:`Py_Initialize`"

#: ../../c-api/init.rst:28
msgid ":c:func:`Py_InitializeEx`"
msgstr ":c:func:`Py_InitializeEx`"

#: ../../c-api/init.rst:29
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../c-api/init.rst:30
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../c-api/init.rst:31
msgid ":c:func:`Py_Main`"
msgstr ":c:func:`Py_Main`"

#: ../../c-api/init.rst:32
msgid "the runtime pre-initialization functions covered in :ref:`init-config`"
msgstr ""
"функции предварительной инициализации во время выполнения, описанные в :ref:"
"`init-config`"

#: ../../c-api/init.rst:34
msgid "Configuration functions:"
msgstr "Funciones de configuración:"

#: ../../c-api/init.rst:36
msgid ":c:func:`PyImport_AppendInittab`"
msgstr ":c:func:`PyImport_AppendInittab`"

#: ../../c-api/init.rst:37
msgid ":c:func:`PyImport_ExtendInittab`"
msgstr ":c:func:`PyImport_ExtendInittab`"

#: ../../c-api/init.rst:38
msgid ":c:func:`!PyInitFrozenExtensions`"
msgstr ":c:func:`!PyInitFrozenExtensions`"

#: ../../c-api/init.rst:39
msgid ":c:func:`PyMem_SetAllocator`"
msgstr ":c:func:`PyMem_SetAllocator`"

#: ../../c-api/init.rst:40
msgid ":c:func:`PyMem_SetupDebugHooks`"
msgstr ":c:func:`PyMem_SetupDebugHooks`"

#: ../../c-api/init.rst:41
msgid ":c:func:`PyObject_SetArenaAllocator`"
msgstr ":c:func:`PyObject_SetArenaAllocator`"

#: ../../c-api/init.rst:42
msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

#: ../../c-api/init.rst:43
msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

#: ../../c-api/init.rst:44
msgid ":c:func:`PySys_ResetWarnOptions`"
msgstr ":c:func:`PySys_ResetWarnOptions`"

#: ../../c-api/init.rst:45
msgid "the configuration functions covered in :ref:`init-config`"
msgstr "функции конфигурации, описанные в :ref:`init-config`"

#: ../../c-api/init.rst:47
msgid "Informative functions:"
msgstr "Funciones informativas:"

#: ../../c-api/init.rst:49 ../../c-api/init.rst:57
msgid ":c:func:`Py_IsInitialized`"
msgstr ":c:func:`Py_IsInitialized`"

#: ../../c-api/init.rst:50
msgid ":c:func:`PyMem_GetAllocator`"
msgstr ":c:func:`PyMem_GetAllocator`"

#: ../../c-api/init.rst:51
msgid ":c:func:`PyObject_GetArenaAllocator`"
msgstr ":c:func:`PyObject_GetArenaAllocator`"

#: ../../c-api/init.rst:52
msgid ":c:func:`Py_GetBuildInfo`"
msgstr ":c:func:`Py_GetBuildInfo`"

#: ../../c-api/init.rst:53
msgid ":c:func:`Py_GetCompiler`"
msgstr ":c:func:`Py_GetCompiler`"

#: ../../c-api/init.rst:54
msgid ":c:func:`Py_GetCopyright`"
msgstr ":c:func:`Py_GetCopyright`"

#: ../../c-api/init.rst:55
msgid ":c:func:`Py_GetPlatform`"
msgstr ":c:func:`Py_GetPlatform`"

#: ../../c-api/init.rst:56
msgid ":c:func:`Py_GetVersion`"
msgstr ":c:func:`Py_GetVersion`"

#: ../../c-api/init.rst:59
msgid "Utilities:"
msgstr "Utilidades:"

#: ../../c-api/init.rst:61
msgid ":c:func:`Py_DecodeLocale`"
msgstr ":c:func:`Py_DecodeLocale`"

#: ../../c-api/init.rst:62
msgid ""
"the status reporting and utility functions covered in :ref:`init-config`"
msgstr "отчеты о состоянии и служебные функции, описанные в :ref:`init-config`"

#: ../../c-api/init.rst:64
msgid "Memory allocators:"
msgstr "Asignadores de memoria:"

#: ../../c-api/init.rst:66
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../c-api/init.rst:67
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../c-api/init.rst:68
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../c-api/init.rst:69
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../c-api/init.rst:71
msgid "Synchronization:"
msgstr "Синхронизация:"

#: ../../c-api/init.rst:73
msgid ":c:func:`PyMutex_Lock`"
msgstr ":c:func:`PyMutex_Lock`"

#: ../../c-api/init.rst:74
msgid ":c:func:`PyMutex_Unlock`"
msgstr ":c:func:`PyMutex_Unlock`"

#: ../../c-api/init.rst:78
msgid ""
"Despite their apparent similarity to some of the functions listed above, the "
"following functions **should not be called** before the interpreter has been "
"initialized: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName`, :c:func:`PyEval_InitThreads`, and :c:func:`Py_RunMain`."
msgstr ""
"Несмотря на их очевидное сходство с некоторыми функциями, перечисленными "
"выше, следующие функции **не следует вызывать** до инициализации "
"интерпретатора: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c :func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName`, :c:func:`PyEval_InitThreads ` и :c:func:`Py_RunMain`."

#: ../../c-api/init.rst:90
msgid "Global configuration variables"
msgstr "Variables de configuración global"

#: ../../c-api/init.rst:92
msgid ""
"Python has variables for the global configuration to control different "
"features and options. By default, these flags are controlled by :ref:"
"`command line options <using-on-interface-options>`."
msgstr ""
"Python tiene variables para la configuración global para controlar "
"diferentes características y opciones. Por defecto, estas banderas son "
"controladas por :ref:`command line options <using-on-interface-options>`."

#: ../../c-api/init.rst:96
msgid ""
"When a flag is set by an option, the value of the flag is the number of "
"times that the option was set. For example, ``-b`` sets :c:data:"
"`Py_BytesWarningFlag` to 1 and ``-bb`` sets :c:data:`Py_BytesWarningFlag` to "
"2."
msgstr ""
"Cuando una opción establece una bandera, el valor de la bandera es el número "
"de veces que se ha establecido la opción. Por ejemplo, ``-b`` establece :c:"
"data:`Py_BytesWarningFlag` en 1 y ``-bb`` establece :c:data:"
"`Py_BytesWarningFlag` en 2."

#: ../../c-api/init.rst:102
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"bytes_warning` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.bytes_warning`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:106
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error if greater "
"or equal to ``2``."
msgstr ""
"Emitir una advertencia al comparar :class:`bytes` o :class:`bytearray` con :"
"class:`str` o :class:`bytes` con :class:`int`. Emitir un error si es mayor o "
"igual que ``2``."

#: ../../c-api/init.rst:110
msgid "Set by the :option:`-b` option."
msgstr "Fijado por la opción :option:`-b`."

#: ../../c-api/init.rst:116
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"parser_debug` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.parser_debug`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:120
msgid ""
"Turn on parser debugging output (for expert only, depending on compilation "
"options)."
msgstr ""
"Activar la salida de depuración del analizador sintáctico (sólo para "
"expertos, dependiendo de las opciones de compilación)."

#: ../../c-api/init.rst:123
msgid ""
"Set by the :option:`-d` option and the :envvar:`PYTHONDEBUG` environment "
"variable."
msgstr ""
"Establecido por la opción :option:`-d` y la variable de entorno :envvar:"
"`PYTHONDEBUG`."

#: ../../c-api/init.rst:130
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"write_bytecode` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.write_bytecode`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:134
msgid ""
"If set to non-zero, Python won't try to write ``.pyc`` files on the import "
"of source modules."
msgstr ""
"Si se establece a un valor distinto de cero, Python no intentará escribir "
"archivos ``.pyc`` en la importación de módulos fuente."

#: ../../c-api/init.rst:137
msgid ""
"Set by the :option:`-B` option and the :envvar:`PYTHONDONTWRITEBYTECODE` "
"environment variable."
msgstr ""
"Establecido por la opción :option:`-B` y la variable de entorno :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

#: ../../c-api/init.rst:144
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"pathconfig_warnings` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.pathconfig_warnings`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:148
msgid ""
"Suppress error messages when calculating the module search path in :c:func:"
"`Py_GetPath`."
msgstr ""
"Supresión de los mensajes de error al calcular la ruta de búsqueda de "
"módulos en :c:func:`Py_GetPath`."

#: ../../c-api/init.rst:151
msgid "Private flag used by ``_freeze_module`` and ``frozenmain`` programs."
msgstr ""
"Частный флаг, используемый программами ``_freeze_module`` и ``frozenmain``."

#: ../../c-api/init.rst:157
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"hash_seed` and :c:member:`PyConfig.use_hash_seed` should be used instead, "
"see :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо этого следует "
"использовать настройки :c:member:`PyConfig.hash_seed` и :c:member:`PyConfig."
"use_hash_seed`, см. :ref:`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:162
msgid ""
"Set to ``1`` if the :envvar:`PYTHONHASHSEED` environment variable is set to "
"a non-empty string."
msgstr ""
"Se establece en ``1`` si la variable de entorno :envvar:`PYTHONHASHSEED` se "
"establece en una cadena no vacía."

#: ../../c-api/init.rst:165
msgid ""
"If the flag is non-zero, read the :envvar:`PYTHONHASHSEED` environment "
"variable to initialize the secret hash seed."
msgstr ""
"Si el indicador es distinto de cero, leer la variable de entorno :envvar:"
"`PYTHONHASHSEED` para inicializar la semilla secreta hash."

#: ../../c-api/init.rst:172
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"use_environment` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.use_environment`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:176
msgid ""
"Ignore all :envvar:`!PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"Игнорируйте все переменные среды :envvar:`!PYTHON*`, например :envvar:"
"`PYTHONPATH` и :envvar:`PYTHONHOME`, которые могут быть установлены."

#: ../../c-api/init.rst:179
msgid "Set by the :option:`-E` and :option:`-I` options."
msgstr "Fijado por las opciones :option:`-E` y :option:`-I`."

#: ../../c-api/init.rst:185
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"inspect` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.inspect`, см. :ref:`Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:189
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""
"Cuando se pasa un script como primer argumento o se utiliza la opción :"
"option:`-c`, entra en modo interactivo después de ejecutar el script o el "
"comando, incluso cuando :data:`sys.stdin` no parece ser un terminal."

#: ../../c-api/init.rst:193
msgid ""
"Set by the :option:`-i` option and the :envvar:`PYTHONINSPECT` environment "
"variable."
msgstr ""
"Establecido por la opción :option:`-i` y la variable de entorno :envvar:"
"`PYTHONINSPECT`."

#: ../../c-api/init.rst:200
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"interactive` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.interactive`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:204
msgid "Set by the :option:`-i` option."
msgstr "Fijado por la opción :option:`-i`."

#: ../../c-api/init.rst:210
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"isolated` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.isolated`, см. :ref:`Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:214
msgid ""
"Run Python in isolated mode. In isolated mode :data:`sys.path` contains "
"neither the script's directory nor the user's site-packages directory."
msgstr ""
"Ejecutar Python en modo aislado. En modo aislado :data:`sys.path` no "
"contiene ni el directorio del script ni el directorio site-packages del "
"usuario."

#: ../../c-api/init.rst:217
msgid "Set by the :option:`-I` option."
msgstr "Fijado por la opción :option:`-I`."

#: ../../c-api/init.rst:225
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyPreConfig.legacy_windows_fs_encoding`, "
"см. :ref:`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:229
msgid ""
"If the flag is non-zero, use the ``mbcs`` encoding with ``replace`` error "
"handler, instead of the UTF-8 encoding with ``surrogatepass`` error handler, "
"for the :term:`filesystem encoding and error handler`."
msgstr ""
"Якщо прапорець відмінний від нуля, використовуйте кодування ``mbcs`` із "
"обробником помилок ``replace``, замість кодування UTF-8 із ``surrogatepass`` "
"обробником помилок, для :term:`filesystem encoding and error handler`."

#: ../../c-api/init.rst:233
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable is set to a non-empty string."
msgstr ""
"Se establece en ``1`` si la variable de entorno :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` se establece en una cadena no vacía."

#: ../../c-api/init.rst:236
msgid "See :pep:`529` for more details."
msgstr "Ver :pep:`529` para más detalles."

#: ../../c-api/init.rst:238 ../../c-api/init.rst:256
msgid "Availability"
msgstr "Dostępność"

#: ../../c-api/init.rst:244
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"legacy_windows_stdio` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.legacy_windows_stdio`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:248
msgid ""
"If the flag is non-zero, use :class:`io.FileIO` instead of :class:`!io."
"_WindowsConsoleIO` for :mod:`sys` standard streams."
msgstr ""
"Если флаг ненулевой, используйте :class:`io.FileIO` вместо :class:`!io."
"_WindowsConsoleIO` для стандартных потоков :mod:`sys`."

#: ../../c-api/init.rst:251
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Se establece en ``1`` si la variable de entorno :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO` se establece en una cadena no vacía."

#: ../../c-api/init.rst:254
msgid "See :pep:`528` for more details."
msgstr "Ver :pep:`528` para más detalles."

#: ../../c-api/init.rst:262
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"site_import` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.site_import`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:266
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Desactiva la importación del módulo :mod:`site` y las manipulaciones "
"dependientes del sitio de :data:`sys.path` que conlleva.  Desactiva también "
"estas manipulaciones si :mod:`site` se importa explícitamente más tarde "
"(llama a :func:`site.main` si quieres que se activen)."

#: ../../c-api/init.rst:271
msgid "Set by the :option:`-S` option."
msgstr "Fijado por la opción :option:`-S`."

#: ../../c-api/init.rst:277
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"user_site_directory` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.user_site_directory`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:281
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"No añadir el directorio :data:`user site-packages <site.USER_SITE>` a :data:"
"`sys.path`."

#: ../../c-api/init.rst:284
msgid ""
"Set by the :option:`-s` and :option:`-I` options, and the :envvar:"
"`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Establecido por las opciones :option:`-s` y :option:`-I`, y la variable de "
"entorno :envvar:`PYTHONNOUSERSITE`."

#: ../../c-api/init.rst:291
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"optimization_level` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.optimization_level`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:295
msgid ""
"Set by the :option:`-O` option and the :envvar:`PYTHONOPTIMIZE` environment "
"variable."
msgstr ""
"Establecido por la opción :option:`-O` y la variable de entorno :envvar:"
"`PYTHONOPTIMIZE`."

#: ../../c-api/init.rst:302
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"quiet` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.quiet`, см. :ref:`Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:306
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"No mostrar los mensajes de copyright y versión ni siquiera en modo "
"interactivo."

#: ../../c-api/init.rst:308
msgid "Set by the :option:`-q` option."
msgstr "Fijado por la opción :option:`-q`."

#: ../../c-api/init.rst:316
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"buffered_stdio` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.buffered_stdio`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:320
msgid "Force the stdout and stderr streams to be unbuffered."
msgstr "Fuerza que los flujos stdout y stderr no tengan búfer."

#: ../../c-api/init.rst:322
msgid ""
"Set by the :option:`-u` option and the :envvar:`PYTHONUNBUFFERED` "
"environment variable."
msgstr ""
"Establecido por la opción :option:`-u` y la variable de entorno :envvar:"
"`PYTHONUNBUFFERED`."

#: ../../c-api/init.rst:329
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"verbose` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.verbose`, см. :ref:`Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:333
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  If greater or equal "
"to ``2``, print a message for each file that is checked for when searching "
"for a module. Also provides information on module cleanup at exit."
msgstr ""
"Imprime un mensaje cada vez que se inicializa un módulo, mostrando el lugar "
"(nombre de archivo o módulo incorporado) desde el que se carga.  Si es mayor "
"o igual que ``2``, imprime un mensaje por cada archivo que se comprueba al "
"buscar un módulo. También proporciona información sobre la limpieza del "
"módulo al salir."

#: ../../c-api/init.rst:338
msgid ""
"Set by the :option:`-v` option and the :envvar:`PYTHONVERBOSE` environment "
"variable."
msgstr ""
"Establecido por la opción :option:`-v` y la variable de entorno :envvar:"
"`PYTHONVERBOSE`."

#: ../../c-api/init.rst:345
msgid "Initializing and finalizing the interpreter"
msgstr "Inicialización y finalización del intérprete"

#: ../../c-api/init.rst:360
msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; see :"
"ref:`Before Python Initialization <pre-init-safe>` for the few exceptions."
msgstr ""
"Inicializa el intérprete de Python.  En una aplicación que incruste Python, "
"esto debería ser llamado antes de usar cualquier otra función de la API "
"Python/C; ver :ref:`Before Python Initialization  <pre-init-safe>` para las "
"pocas excepciones."

#: ../../c-api/init.rst:364
msgid ""
"This initializes the table of loaded modules (``sys.modules``), and creates "
"the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:`sys`. It "
"also initializes the module search path (``sys.path``). It does not set "
"``sys.argv``; use the :ref:`Python Initialization Configuration <init-"
"config>` API for that. This is a no-op when called for a second time "
"(without calling :c:func:`Py_FinalizeEx` first).  There is no return value; "
"it is a fatal error if the initialization fails."
msgstr ""
"Это инициализирует таблицу загруженных модулей (``sys.modules``) и создает "
"основные модули :mod:`builtins`, :mod:`__main__` и :mod:`sys`. Он также "
"инициализирует путь поиска модуля (``sys.path``). Он не устанавливает ``sys."
"argv``; для этого используйте API конфигурации инициализации Python <init-"
"config>`. Это пустая операция при втором вызове (без первого вызова :c:func:"
"`Py_FinalizeEx`). Возвращаемого значения нет; это фатальная ошибка, если "
"инициализация не удалась."

#: ../../c-api/init.rst:372 ../../c-api/init.rst:386
msgid ""
"Use :c:func:`Py_InitializeFromConfig` to customize the :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Используйте :c:func:`Py_InitializeFromConfig` для настройки :ref:"
"`Конфигурации инициализации Python <init-config>`."

#: ../../c-api/init.rst:376
msgid ""
"On Windows, changes the console mode from ``O_TEXT`` to ``O_BINARY``, which "
"will also affect non-Python uses of the console using the C Runtime."
msgstr ""
"En Windows, cambia el modo de la consola de ``O_TEXT`` a ``O_BINARY``, lo "
"que también afectará a los usos de la consola no basados en Python que "
"utilicen el C Runtime."

#: ../../c-api/init.rst:382
msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is ``1``. If "
"*initsigs* is ``0``, it skips initialization registration of signal "
"handlers, which may be useful when CPython is embedded as part of a larger "
"application."
msgstr ""
"Эта функция работает как :c:func:`Py_Initialize`, если *initsigs* равен "
"``1``. Если *initsigs* равен ``0``, он пропускает регистрацию инициализации "
"обработчиков сигналов, что может быть полезно, когда CPython встроен как "
"часть более крупного приложения."

#: ../../c-api/init.rst:392
msgid ""
"Initialize Python from *config* configuration, as described in :ref:`init-"
"from-config`."
msgstr ""
"Инициализируйте Python из конфигурации *config*, как описано в :ref:`init-"
"from-config`."

#: ../../c-api/init.rst:395
msgid ""
"See the :ref:`init-config` section for details on pre-initializing the "
"interpreter, populating the runtime configuration structure, and querying "
"the returned status structure."
msgstr ""
"См. раздел :ref:`init-config` для получения подробной информации о "
"предварительной инициализации интерпретатора, заполнении структуры "
"конфигурации времени выполнения и запросе возвращаемой структуры состояния."

#: ../../c-api/init.rst:402
msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_FinalizeEx` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""
"Devuelve true (distinto de cero) cuando el intérprete de Python ha sido "
"inicializado, false (cero) en caso contrario.  Después de llamar a :c:func:"
"`Py_FinalizeEx`, devuelve false hasta que se vuelva a llamar a :c:func:"
"`Py_Initialize`."

#: ../../c-api/init.rst:409
msgid ""
"Return true (non-zero) if the main Python interpreter is :term:`shutting "
"down <interpreter shutdown>`. Return false (zero) otherwise."
msgstr ""
"Возвращает true (не ноль), если основной интерпретатор Python :term:"
"`завершает работу <интерпретатор завершение работы>`. В противном случае "
"верните false (ноль)."

#: ../../c-api/init.rst:417
msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  Ideally, this frees all memory "
"allocated by the Python interpreter.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first)."
msgstr ""

#: ../../c-api/init.rst:424
msgid ""
"Since this is the reverse of :c:func:`Py_Initialize`, it should be called in "
"the same thread with the same interpreter active.  That means the main "
"thread and the main interpreter. This should never be called while :c:func:"
"`Py_RunMain` is running."
msgstr ""
"Поскольку это противоположно :c:func:`Py_Initialize`, его следует вызывать в "
"том же потоке с тем же активным интерпретатором. Это означает основной поток "
"и главный интерпретатор. Это никогда не следует вызывать во время работы :c:"
"func:`Py_RunMain`."

#: ../../c-api/init.rst:429
msgid ""
"Normally the return value is ``0``. If there were errors during finalization "
"(flushing buffered data), ``-1`` is returned."
msgstr ""
"Обычно возвращаемое значение равно ``0``. Если во время финализации (очистки "
"буферизованных данных) возникли ошибки, возвращается ``-1``."

#: ../../c-api/init.rst:433
msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""
"Esta función se proporciona por varias razones.  Una aplicación incrustada "
"puede querer reiniciar Python sin tener que reiniciar la propia aplicación. "
"Una aplicación que ha cargado el intérprete de Python desde una librería "
"cargable dinámicamente (o DLL) puede querer liberar toda la memoria asignada "
"por Python antes de descargar la DLL. Durante la búsqueda de fugas de "
"memoria en una aplicación, un desarrollador puede querer liberar toda la "
"memoria asignada por Python antes de salir de la aplicación."

#: ../../c-api/init.rst:441
msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`~object.__del__` "
"methods) to fail when they depend on other objects (even functions) or "
"modules.  Dynamically loaded extension modules loaded by Python are not "
"unloaded.  Small amounts of memory allocated by the Python interpreter may "
"not be freed (if you find a leak, please report it).  Memory tied up in "
"circular references between objects is not freed.  Some memory allocated by "
"extension modules may not be freed.  Some extensions may not work properly "
"if their initialization routine is called more than once; this can happen if "
"an application calls :c:func:`Py_Initialize` and :c:func:`Py_FinalizeEx` "
"more than once.  :c:func:`Py_FinalizeEx` must not be called recursively from "
"within itself.  Therefore, it must not be called by any code that may be run "
"as part of the interpreter shutdown process, such as :py:mod:`atexit` "
"handlers, object finalizers, or any code that may be run while flushing the "
"stdout and stderr files."
msgstr ""

#: ../../c-api/init.rst:456
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` with no arguments."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``cpython._PySys_ClearAuditHooks`` "
"sin argumentos."

#: ../../c-api/init.rst:463
msgid ""
"This is a backwards-compatible version of :c:func:`Py_FinalizeEx` that "
"disregards the return value."
msgstr ""
"Se trata de una versión de :c:func:`Py_FinalizeEx` compatible con versiones "
"anteriores que no tiene en cuenta el valor de retorno."

#: ../../c-api/init.rst:469
msgid ""
"Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings, "
"allowing the calling application to delegate the text decoding step to the "
"CPython runtime."
msgstr ""
"Аналогично :c:func:`Py_Main`, но *argv* представляет собой массив строк "
"байтов, позволяющий вызывающему приложению делегировать этап декодирования "
"текста среде выполнения CPython."

#: ../../c-api/init.rst:478
msgid ""
"The main program for the standard interpreter, encapsulating a full "
"initialization/finalization cycle, as well as additional behaviour to "
"implement reading configurations settings from the environment and command "
"line, and then executing ``__main__`` in accordance with :ref:`using-on-"
"cmdline`."
msgstr ""
"Основная программа для стандартного интерпретатора, инкапсулирующая полный "
"цикл инициализации/финализации, а также дополнительное поведение для "
"реализации чтения настроек конфигурации из окружения и командной строки, а "
"затем выполнения ``__main__`` в соответствии с :ref:`using- on-cmdline`."

#: ../../c-api/init.rst:484
msgid ""
"This is made available for programs which wish to support the full CPython "
"command line interface, rather than just embedding a Python runtime in a "
"larger application."
msgstr ""
"Это доступно для программ, которые хотят поддерживать полный интерфейс "
"командной строки CPython, а не просто встраивать среду выполнения Python в "
"более крупное приложение."

#: ../../c-api/init.rst:488
msgid ""
"The *argc* and *argv* parameters are similar to those which are passed to a "
"C program's :c:func:`main` function, except that the *argv* entries are "
"first converted to ``wchar_t`` using :c:func:`Py_DecodeLocale`. It is also "
"important to note that the argument list entries may be modified to point to "
"strings other than those passed in (however, the contents of the strings "
"pointed to by the argument list are not modified)."
msgstr ""
"Параметры *argc* и *argv* аналогичны тем, которые передаются в функцию :c:"
"func:`main` программы C, за исключением того, что записи *argv* сначала "
"преобразуются в ``wchar_t`` с помощью :c: func:`Py_DecodeLocale`. Также "
"важно отметить, что записи списка аргументов могут быть изменены, чтобы "
"указывать на строки, отличные от переданных (однако содержимое строк, на "
"которые указывает список аргументов, не изменяется)."

#: ../../c-api/init.rst:495
msgid ""
"The return value is ``2`` if the argument list does not represent a valid "
"Python command line, and otherwise the same as :c:func:`Py_RunMain`."
msgstr ""
"如果参数列表不是表示一个有效的 Python 命令行则返回值为 ``2``，否则将与 :c:"
"func:`Py_RunMain` 相同。"

#: ../../c-api/init.rst:498
msgid ""
"In terms of the CPython runtime configuration APIs documented in the :ref:"
"`runtime configuration <init-config>` section (and without accounting for "
"error handling), ``Py_Main`` is approximately equivalent to::"
msgstr ""
"С точки зрения API-интерфейсов конфигурации среды выполнения CPython, "
"описанных в разделе конфигурации среды выполнения <init-config> (и без учета "
"обработки ошибок), Py_Main примерно эквивалентен:"

#: ../../c-api/init.rst:502
msgid ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"
msgstr ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"

#: ../../c-api/init.rst:510
msgid ""
"In normal usage, an embedding application will call this function *instead* "
"of calling :c:func:`Py_Initialize`, :c:func:`Py_InitializeEx` or :c:func:"
"`Py_InitializeFromConfig` directly, and all settings will be applied as "
"described elsewhere in this documentation. If this function is instead "
"called *after* a preceding runtime initialization API call, then exactly "
"which environmental and command line configuration settings will be updated "
"is version dependent (as it depends on which settings correctly support "
"being modified after they have already been set once when the runtime was "
"first initialized)."
msgstr ""
"При обычном использовании приложение для внедрения будет вызывать эту "
"функцию *вместо* прямого вызова :c:func:`Py_Initialize`, :c:func:"
"`Py_InitializeEx` или :c:func:`Py_InitializeFromConfig`, и все настройки "
"будут применены. как описано в других разделах этой документации. Если "
"вместо этого эта функция вызывается *после* предыдущего вызова API "
"инициализации среды выполнения, то какие именно параметры конфигурации среды "
"и командной строки будут обновлены, зависит от версии (так как это зависит "
"от того, какие параметры правильно поддерживают изменение после того, как "
"они уже были установлены один раз, когда среда выполнения была впервые "
"инициализирована)."

#: ../../c-api/init.rst:523
msgid "Executes the main module in a fully configured CPython runtime."
msgstr ""
"Выполняет основной модуль в полностью настроенной среде выполнения CPython."

#: ../../c-api/init.rst:525
msgid ""
"Executes the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration. If none "
"of these values are set, runs the interactive Python prompt (REPL) using the "
"``__main__`` module's global namespace."
msgstr ""
"Выполняет команду (:c:member:`PyConfig.run_command`), сценарий (:c:member:"
"`PyConfig.run_filename`) или модуль (:c:member:`PyConfig.run_module`), "
"указанный в командной строке. или в конфигурации. Если ни одно из этих "
"значений не установлено, запускается интерактивная подсказка Python (REPL), "
"используя глобальное пространство имен модуля ``__main__``."

#: ../../c-api/init.rst:531
msgid ""
"If :c:member:`PyConfig.inspect` is not set (the default), the return value "
"will be ``0`` if the interpreter exits normally (that is, without raising an "
"exception), the exit status of an unhandled :exc:`SystemExit`, or ``1`` for "
"any other unhandled exception."
msgstr ""
"如果 :c:member:`PyConfig.inspect` 未设置（默认），则当解释器正常退出（也就是"
"说未引发异常）时返回值将为 ``0``，未处理的 :exc:`SystemExit` 的退出状态，或者"
"对于任何其他未处理异常则为 ``1``。"

#: ../../c-api/init.rst:536
msgid ""
"If :c:member:`PyConfig.inspect` is set (such as when the :option:`-i` option "
"is used), rather than returning when the interpreter exits, execution will "
"instead resume in an interactive Python prompt (REPL) using the ``__main__`` "
"module's global namespace. If the interpreter exited with an exception, it "
"is immediately raised in the REPL session. The function return value is then "
"determined by the way the *REPL session* terminates: ``0``, ``1``, or the "
"status of a :exc:`SystemExit`, as specified above."
msgstr ""
"如果 :c:member:`PyConfig.inspect` 已设置（例如当使用了 :option:`-i` 选项"
"时），则当解释器退出时执行将不会返回，而是会使用 ``__main__`` 模块的全局命名"
"空间在交互式 Python 提示符 (REPL) 中恢复。 如果解释器附带异常退出，该异常将"
"在 REPL 会话中被立即引发。 随后函数的返回值将由 *REPL 会话* 的终结方式来决"
"定: ``0``, ``1`` 或者 :exc:`SystemExit` 的状态，如上文所指明的。"

#: ../../c-api/init.rst:544
msgid ""
"This function always finalizes the Python interpreter before it returns."
msgstr "此函数总是会在它返回之前最终化 Python 解释器。"

#: ../../c-api/init.rst:546
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of a "
"customized Python that always runs in isolated mode using :c:func:"
"`Py_RunMain`."
msgstr ""
"См. :ref:`Конфигурация Python <init-python-config>` для примера настроенного "
"Python, который всегда работает в изолированном режиме с использованием :c:"
"func:`Py_RunMain`."

#: ../../c-api/init.rst:552
msgid ""
"Register an :mod:`atexit` callback for the target interpreter *interp*. This "
"is similar to :c:func:`Py_AtExit`, but takes an explicit interpreter and "
"data pointer for the callback."
msgstr ""
"Зарегистрируйте обратный вызов :mod:`atexit` для целевого интерпретатора "
"*interp*. Это похоже на :c:func:`Py_AtExit`, но для обратного вызова "
"требуется явный интерпретатор и указатель данных."

#: ../../c-api/init.rst:556
msgid "The :term:`GIL` must be held for *interp*."
msgstr ""

#: ../../c-api/init.rst:561
msgid "Process-wide parameters"
msgstr "Parámetros de todo el proceso"

#: ../../c-api/init.rst:571
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"program_name` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.program_name`, см. :ref:"
"`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:575
msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program "
"(converted to wide characters). This is used by :c:func:`Py_GetPath` and "
"some other functions below to find the Python run-time libraries relative to "
"the interpreter executable.  The default value is ``'python'``.  The "
"argument should point to a zero-terminated wide character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"Esta función debe invocarse antes de llamar a :c:func:`Py_Initialize` por "
"primera vez, si es que se llama.  Indica al intérprete el valor del "
"argumento ``argv[0]`` a la función :c:func:`main` del programa (convertido a "
"caracteres anchos). Esto es usado por :c:func:`Py_GetPath` y algunas otras "
"funciones a continuación para encontrar las bibliotecas de tiempo de "
"ejecución de Python relativas al ejecutable del intérprete.  El valor por "
"defecto es ``'python'``.  El argumento debe apuntar a una cadena de "
"caracteres anchos terminada en cero en almacenamiento estático cuyo "
"contenido no cambiará mientras dure la ejecución del programa.  Ningún "
"código del intérprete de Python cambiará el contenido de este almacenamiento."

#: ../../c-api/init.rst:586 ../../c-api/init.rst:828 ../../c-api/init.rst:864
#: ../../c-api/init.rst:890
msgid ""
"Use :c:func:`Py_DecodeLocale` to decode a bytes string to get a :c:expr:"
"`wchar_t*` string."
msgstr ""
"Используйте :c:func:`Py_DecodeLocale` для декодирования строки байтов и "
"получения строки :c:expr:`wchar_t*`."

#: ../../c-api/init.rst:594
msgid ""
"Return the program name set with :c:member:`PyConfig.program_name`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""
"Возвращает имя программы, установленное с помощью :c:member:`PyConfig."
"program_name`, или значение по умолчанию. Возвращенная строка указывает на "
"статическое хранилище; вызывающий абонент не должен изменять его значение."

#: ../../c-api/init.rst:598 ../../c-api/init.rst:620 ../../c-api/init.rst:666
#: ../../c-api/init.rst:688 ../../c-api/init.rst:714 ../../c-api/init.rst:902
msgid ""
"This function should not be called before :c:func:`Py_Initialize`, otherwise "
"it returns ``NULL``."
msgstr ""
"Цю функцію не слід викликати перед :c:func:`Py_Initialize`, інакше вона "
"повертає ``NULL``."

#: ../../c-api/init.rst:601 ../../c-api/init.rst:623 ../../c-api/init.rst:669
#: ../../c-api/init.rst:691 ../../c-api/init.rst:719 ../../c-api/init.rst:905
msgid "It now returns ``NULL`` if called before :c:func:`Py_Initialize`."
msgstr ""
"Тепер він повертає ``NULL``, якщо викликаний перед :c:func:`Py_Initialize`."

#: ../../c-api/init.rst:604 ../../c-api/init.rst:694
msgid "Get :data:`sys.executable` instead."
msgstr ""

#: ../../c-api/init.rst:610
msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the :option:`--prefix` "
"argument to the :program:`configure` script at build time.  The value is "
"available to Python code as ``sys.base_prefix``. It is only useful on Unix.  "
"See also the next function."
msgstr ""
"Верните *префикс* для установленных файлов, независимых от платформы. Это "
"получается с помощью ряда сложных правил из имени программы, заданного с "
"помощью :c:member:`PyConfig.program_name` и некоторых переменных среды; "
"например, если имя программы ``'/usr/local/bin/python'``, префикс будет ``'/"
"usr/local'``. Возвращенная строка указывает на статическое хранилище; "
"вызывающая сторона не должна изменять его значение. Это соответствует "
"переменной :makevar:`prefix` в :file:`Makefile` верхнего уровня и аргументу :"
"option:`--prefix` скрипта :program:`configure` во время сборки. Это значение "
"доступно для кода Python как ``sys.base_prefix``. Это полезно только в Unix. "
"См. также следующую функцию."

#: ../../c-api/init.rst:626
msgid ""
"Get :data:`sys.base_prefix` instead, or :data:`sys.prefix` if :ref:`virtual "
"environments <venv-def>` need to be handled."
msgstr ""

#: ../../c-api/init.rst:633
msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.base_exec_prefix``.  It is only "
"useful on Unix."
msgstr ""
"Верните *exec-префикс* для установленных *зависимых* от платформы файлов. "
"Это получается с помощью ряда сложных правил из имени программы, заданного с "
"помощью :c:member:`PyConfig.program_name` и некоторых переменных среды; "
"например, если имя программы ``'/usr/local/bin/python'``, префикс exec будет "
"``'/usr/local'``. Возвращенная строка указывает на статическое хранилище; "
"вызывающая сторона не должна изменять его значение. Это соответствует "
"переменной :makevar:`exec_prefix` в :file:`Makefile` верхнего уровня и "
"аргументу ``--exec-prefix`` сценария :program:`configure` во время сборки. "
"Это значение доступно для кода Python как ``sys.base_exec_prefix``. Это "
"полезно только в Unix."

#: ../../c-api/init.rst:644
msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""
"Antecedentes: exec-prefix difiere del prefijo cuando los archivos "
"dependientes de la plataforma (como los ejecutables y las bibliotecas "
"compartidas) se instalan en un árbol de directorios diferente.  En una "
"instalación típica, los archivos dependientes de la plataforma pueden "
"instalarse en el subárbol :file:`/usr/local/plat`, mientras que los "
"independientes de la plataforma pueden instalarse en :file:`/usr/local`."

#: ../../c-api/init.rst:650
msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""
"En términos generales, una plataforma es una combinación de familias de "
"hardware y software, por ejemplo, las máquinas Sparc que ejecutan el sistema "
"operativo Solaris 2.x se consideran la misma plataforma, pero las máquinas "
"Intel que ejecutan Solaris 2.x son otra plataforma, y las máquinas Intel que "
"ejecutan Linux son otra plataforma más.  Las diferentes revisiones "
"principales del mismo sistema operativo también suelen formar plataformas "
"diferentes.  Los sistemas operativos no-Unix son una historia diferente; las "
"estrategias de instalación en esos sistemas son tan diferentes que el "
"prefijo y exec-prefix no tienen sentido, y se establecen en la cadena vacía. "
"Tener en cuenta que los archivos bytecode de Python compilados son "
"independientes de la plataforma (¡pero no independientes de la versión de "
"Python con la que se compilaron!)."

#: ../../c-api/init.rst:661
msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""
"Los administradores de sistemas sabrán cómo configurar los programas :"
"program:`mount` o :program:`automount` para compartir :file:`/usr/local` "
"entre plataformas y que :file:`/usr/local/plat` sea un sistema de archivos "
"diferente para cada plataforma."

#: ../../c-api/init.rst:672
msgid ""
"Get :data:`sys.base_exec_prefix` instead, or :data:`sys.exec_prefix` if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../c-api/init.rst:682
msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:member:`PyConfig.program_name`). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""
"Вернуть полное имя исполняемого файла Python; это вычисляется как побочный "
"эффект получения пути поиска модуля по умолчанию из имени программы "
"(установленного :c:member:`PyConfig.program_name`). Возвращенная строка "
"указывает на статическое хранилище; вызывающий абонент не должен изменять "
"его значение. Это значение доступно для кода Python как ``sys.executable``."

#: ../../c-api/init.rst:704
msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:member:`PyConfig.program_name`) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and macOS, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""
"Вернуть путь поиска модуля по умолчанию; это вычисляется на основе имени "
"программы (заданного :c:member:`PyConfig.program_name`) и некоторых "
"переменных среды. Возвращенная строка состоит из серии имен каталогов, "
"разделенных символом-разделителем, зависящим от платформы. Символом-"
"разделителем является ``':'`` в Unix и macOS, ``';'`` в Windows. "
"Возвращенная строка указывает на статическое хранилище; вызывающий абонент "
"не должен изменять его значение. Список :data:`sys.path` инициализируется "
"этим значением при запуске интерпретатора; его можно (и обычно это делают) "
"изменить позже, чтобы изменить путь поиска для загрузки модулей."

#: ../../c-api/init.rst:722
msgid "Get :data:`sys.path` instead."
msgstr ""

#: ../../c-api/init.rst:728
msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""
"Devuelve la versión de este intérprete de Python.  Se trata de una cadena "
"con un aspecto similar a ::"

#: ../../c-api/init.rst:731
msgid "\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\""
msgstr "\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\""

#: ../../c-api/init.rst:735
msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first characters are the major and minor version separated by a "
"period.  The returned string points into static storage; the caller should "
"not modify its value.  The value is available to Python code as :data:`sys."
"version`."
msgstr ""
"La primera palabra (hasta el primer carácter de espacio) es la versión "
"actual de Python; los primeros caracteres son la versión mayor y menor "
"separadas por un punto.  La cadena devuelta apunta a un almacenamiento "
"estático; el invocador no debe modificar su valor.  El valor está disponible "
"para el código Python como :data:`sys.version`."

#: ../../c-api/init.rst:740
msgid "See also the :c:var:`Py_Version` constant."
msgstr "См. также константу :c:var:`Py_Version`."

#: ../../c-api/init.rst:747
msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On macOS, it "
"is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.platform``."
msgstr ""
"Devuelve el identificador de la plataforma actual.  En Unix, se forma a "
"partir del nombre \"oficial\" del sistema operativo, convertido a "
"minúsculas, seguido del número de revisión principal; por ejemplo, para "
"Solaris 2.x, que también se conoce como SunOS 5.x, el valor es "
"``'sunos5'``.  En macOS, es ``'darwin'``.  En Windows, es ``'win'``.  La "
"cadena devuelta apunta a un almacenamiento estático; el invocador no debe "
"modificar su valor.  El valor está disponible para el código Python como "
"``sys.platform``."

#: ../../c-api/init.rst:758
msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""
"Devuelve la cadena de copyright oficial de la versión actual de Python, por "
"ejemplo"

#: ../../c-api/init.rst:760
msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"

#: ../../c-api/init.rst:764
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""
"La cadena devuelta apunta a un almacenamiento estático; el invocador no debe "
"modificar su valor.  El valor está disponible para el código Python como "
"``sys.copyright``."

#: ../../c-api/init.rst:770
msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""
"Devuelve una indicación del compilador utilizado para compilar la versión "
"actual de Python, entre corchetes, por ejemplo::"

#: ../../c-api/init.rst:773
msgid "\"[GCC 2.7.2.2]\""
msgstr "\"[GCC 2.7.2.2]\""

#: ../../c-api/init.rst:777 ../../c-api/init.rst:791
msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""
"La cadena devuelta apunta a un almacenamiento estático; el invocador no debe "
"modificar su valor.  El valor está disponible para el código Python como "
"parte de la variable ``sys.version``."

#: ../../c-api/init.rst:784
msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""
"Devuelve información sobre el número de secuencia y la fecha y hora de "
"compilación de la instancia actual del intérprete de Python, por ejemplo ::"

#: ../../c-api/init.rst:787
msgid "\"#67, Aug  1 1997, 22:34:28\""
msgstr "\"#67, Aug  1 1997, 22:34:28\""

#: ../../c-api/init.rst:803
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv`, :c:member:`PyConfig.parse_argv` and :c:member:`PyConfig.safe_path` "
"should be used instead, see :ref:`Python Initialization Configuration <init-"
"config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо этого следует "
"использовать настройки :c:member:`PyConfig.argv`, :c:member:`PyConfig."
"parse_argv` и :c:member:`PyConfig.safe_path`, см. :ref: `Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:808
msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""
"Establece :data:`sys.argv` basándose en *argc* y *argv*.  Estos parámetros "
"son similares a los que se pasan a la función :c:func:`main` del programa, "
"con la diferencia de que la primera entrada debe hacer referencia al archivo "
"de script que se va a ejecutar en lugar del ejecutable que aloja el "
"intérprete de Python.  Si no hay un script que se ejecute, la primera "
"entrada en *argv* puede ser una cadena vacía.  Si esta función falla al "
"inicializar :data:`sys.argv`, se señala una condición fatal usando :c:func:"
"`Py_FatalError`."

#: ../../c-api/init.rst:816
msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""
"Si *updatepath* es cero, esto es todo lo que hace la función.  Si "
"*updatepath* es distinto de cero, la función también modifica :data:`sys."
"path` según el siguiente algoritmo:"

#: ../../c-api/init.rst:820
msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""
"Si se pasa el nombre de un script existente en ``argv[0]``, la ruta absoluta "
"del directorio donde se encuentra el script se añade a :data:`sys.path`."

#: ../../c-api/init.rst:823
msgid ""
"Otherwise (that is, if *argc* is ``0`` or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""
"En caso contrario (es decir, si *argc* es ``0`` o ``argv[0]`` no apunta a un "
"nombre de archivo existente), se antepone una cadena vacía a :data:`sys."
"path`, que es lo mismo que anteponer el directorio de trabajo actual (``\"."
"\"``)."

#: ../../c-api/init.rst:831 ../../c-api/init.rst:867
msgid ""
"See also :c:member:`PyConfig.orig_argv` and :c:member:`PyConfig.argv` "
"members of the :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"См. также члены :c:member:`PyConfig.orig_argv` и :c:member:`PyConfig.argv` "
"в :ref:`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:835
msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass ``0`` as *updatepath*, "
"and update :data:`sys.path` themselves if desired. See :cve:`2008-5983`."
msgstr ""
"Приложениям, встраивающим интерпретатор Python для целей, отличных от "
"выполнения отдельного сценария, рекомендуется передавать ``0`` в качестве "
"*updatepath* и при необходимости обновлять :data:`sys.path` самостоятельно. "
"См.:cve:`2008-5983`."

#: ../../c-api/init.rst:840
msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""
"En versiones anteriores a la 3.1.3, puede conseguir el mismo efecto haciendo "
"saltar manualmente el primer elemento :data:`sys.path` después de haber "
"llamado a :c:func:`PySys_SetArgv`, por ejemplo utilizando"

#: ../../c-api/init.rst:844
msgid "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"
msgstr "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"

#: ../../c-api/init.rst:856
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv` and :c:member:`PyConfig.parse_argv` should be used instead, see :ref:"
"`Python Initialization Configuration <init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройки :c:member:`PyConfig.argv` и :c:member:`PyConfig."
"parse_argv`, см. :ref:`Конфигурация инициализации Python <init-config>`."

#: ../../c-api/init.rst:860
msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"``1`` unless the :program:`python` interpreter was started with the :option:"
"`-I`."
msgstr ""
"Esta función funciona como :c:func:`PySys_SetArgvEx` con *updatepath* "
"establecido en ``1`` a menos que el intérprete :program:`python` se haya "
"iniciado con la opción :option:`-I`."

#: ../../c-api/init.rst:870
msgid "The *updatepath* value depends on :option:`-I`."
msgstr "El valor de *updatepath* depende de :option:`-I`."

#: ../../c-api/init.rst:877
msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"home` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Этот API сохранен для обратной совместимости: вместо него следует "
"использовать настройку :c:member:`PyConfig.home`, см. :ref:`Конфигурация "
"инициализации Python <init-config>`."

#: ../../c-api/init.rst:881
msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""
"Establece el directorio \"home\" por defecto, es decir, la ubicación de las "
"bibliotecas estándar de Python.  Ver  :envvar:`PYTHONHOME` para conocer el "
"significado de la cadena de argumentos."

#: ../../c-api/init.rst:885
msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"El argumento debe apuntar a una cadena de caracteres terminada en cero en un "
"almacenamiento estático cuyo contenido no cambiará mientras dure la "
"ejecución del programa.  Ningún código del intérprete de Python cambiará el "
"contenido de este almacenamiento."

#: ../../c-api/init.rst:898
msgid ""
"Return the default \"home\", that is, the value set by :c:member:`PyConfig."
"home`, or the value of the :envvar:`PYTHONHOME` environment variable if it "
"is set."
msgstr ""
"Возвращает «домой» по умолчанию, то есть значение, установленное :c:member:"
"`PyConfig.home`, или значение переменной среды :envvar:`PYTHONHOME`, если "
"она установлена."

#: ../../c-api/init.rst:908
msgid ""
"Get :c:member:`PyConfig.home` or :envvar:`PYTHONHOME` environment variable "
"instead."
msgstr ""

#: ../../c-api/init.rst:916
msgid "Thread State and the Global Interpreter Lock"
msgstr "Estado del hilo y bloqueo global del intérprete"

#: ../../c-api/init.rst:923
msgid ""
"The Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""
"El intérprete de Python no es completamente seguro para hilos.  Para "
"soportar programas Python multihilo, existe un bloqueo global, llamado :term:"
"`bloqueo global del intérprete` o :term:`GIL`, que debe mantenerse por el "
"hilo actual antes de que pueda acceder con seguridad a los objetos Python. "
"Sin el bloqueo, incluso las operaciones más simples podrían causar problemas "
"en un programa multihilo: por ejemplo, cuando dos hilos incrementan "
"simultáneamente la cuenta de referencias del mismo objeto, la cuenta de "
"referencias podría incrementarse sólo una vez en lugar de dos."

#: ../../c-api/init.rst:933
msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setswitchinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""
"Por lo tanto, existe la regla de que sólo el hilo que ha adquirido el :term:"
"`GIL` puede operar sobre objetos Python o llamar a funciones de Python/C "
"API. Para emular la concurrencia de la ejecución, el intérprete intenta "
"regularmente cambiar de hilo (ver :func:`sys.setswitchinterval`).  El "
"bloqueo también se libera alrededor de operaciones de E/S potencialmente "
"bloqueantes, como la lectura o escritura de un archivo, para que otros hilos "
"de Python puedan ejecutarse mientras tanto."

#: ../../c-api/init.rst:943
msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`.  There's also one "
"global variable pointing to the current :c:type:`PyThreadState`: it can be "
"retrieved using :c:func:`PyThreadState_Get`."
msgstr ""
"El intérprete de Python guarda información específica de cada hilo en una "
"estructura de datos llamada :c:type:`PyThreadState`.  También hay una "
"variable global que apunta a la actual :c:type:`PyThreadState`: se puede "
"recuperar usando :c:func:`PyThreadState_Get`."

#: ../../c-api/init.rst:949
msgid "Releasing the GIL from extension code"
msgstr "Liberación del GIL del código de extensión"

#: ../../c-api/init.rst:951
msgid ""
"Most extension code manipulating the :term:`GIL` has the following simple "
"structure::"
msgstr ""
"La mayor parte del código de extensión que manipula el :term:`GIL` tiene la "
"siguiente estructura simple::"

#: ../../c-api/init.rst:954
msgid ""
"Save the thread state in a local variable.\n"
"Release the global interpreter lock.\n"
"... Do some blocking I/O operation ...\n"
"Reacquire the global interpreter lock.\n"
"Restore the thread state from the local variable."
msgstr ""

#: ../../c-api/init.rst:960
msgid "This is so common that a pair of macros exists to simplify it::"
msgstr "Esto es tan común que existe un par de macros para simplificarlo::"

#: ../../c-api/init.rst:962
msgid ""
"Py_BEGIN_ALLOW_THREADS\n"
"... Do some blocking I/O operation ...\n"
"Py_END_ALLOW_THREADS"
msgstr ""
"Py_BEGIN_ALLOW_THREADS ... Выполните некоторую блокирующую операцию ввода-"
"вывода... Py_END_ALLOW_THREADS"

#: ../../c-api/init.rst:970
msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block."
msgstr ""
"La macro :c:macro:`Py_BEGIN_ALLOW_THREADS` abre un nuevo bloque y declara "
"una variable local oculta; la macro :c:macro:`Py_END_ALLOW_THREADS` cierra "
"el bloque."

#: ../../c-api/init.rst:974
msgid "The block above expands to the following code::"
msgstr "El bloque anterior se expande al siguiente código::"

#: ../../c-api/init.rst:976
msgid ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Do some blocking I/O operation ...\n"
"PyEval_RestoreThread(_save);"
msgstr ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Do some blocking I/O operation ...\n"
"PyEval_RestoreThread(_save);"

#: ../../c-api/init.rst:986
msgid ""
"Here is how these functions work: the global interpreter lock is used to "
"protect the pointer to the current thread state.  When releasing the lock "
"and saving the thread state, the current thread state pointer must be "
"retrieved before the lock is released (since another thread could "
"immediately acquire the lock and store its own thread state in the global "
"variable). Conversely, when acquiring the lock and restoring the thread "
"state, the lock must be acquired before storing the thread state pointer."
msgstr ""
"Estas funciones funcionan de la siguiente manera: el bloqueo global del "
"intérprete se utiliza para proteger el puntero al estado actual del hilo.  "
"Cuando se libera el bloqueo y se guarda el estado del hilo, el puntero al "
"estado actual del hilo debe recuperarse antes de liberar el bloqueo (ya que "
"otro hilo podría adquirir inmediatamente el bloqueo y almacenar su propio "
"estado del hilo en la variable global). Por el contrario, al adquirir el "
"bloqueo y restaurar el estado del hilo, el bloqueo debe adquirirse antes de "
"almacenar el puntero del estado del hilo."

#: ../../c-api/init.rst:995
msgid ""
"Calling system I/O functions is the most common use case for releasing the "
"GIL, but it can also be useful before calling long-running computations "
"which don't need access to Python objects, such as compression or "
"cryptographic functions operating over memory buffers.  For example, the "
"standard :mod:`zlib` and :mod:`hashlib` modules release the GIL when "
"compressing or hashing data."
msgstr ""
"Llamar a funciones de E/S del sistema es el caso de uso más común para "
"liberar el GIL, pero también puede ser útil antes de llamar a cálculos de "
"larga duración que no necesitan acceso a objetos Python, como funciones de "
"compresión o criptográficas que operan sobre buffers de memoria.  Por "
"ejemplo, los módulos estándar :mod:`zlib` y :mod:`hashlib` liberan el GIL al "
"comprimir o aplicar hash a los datos."

#: ../../c-api/init.rst:1006
msgid "Non-Python created threads"
msgstr "Hilos creados sin Python"

#: ../../c-api/init.rst:1008
msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the GIL, nor is there a thread state structure "
"for them."
msgstr ""
"Cuando los hilos se crean usando las APIs dedicadas de Python (como el "
"módulo :mod:`threading` ), se les asocia automáticamente un estado de hilo "
"y, por tanto, el código mostrado arriba es correcto.  Sin embargo, cuando "
"los hilos se crean desde C (por ejemplo, por una biblioteca de terceros con "
"su propia gestión de hilos), no mantienen el GIL, ni hay una estructura de "
"estado de hilo para ellos."

#: ../../c-api/init.rst:1015
msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating a thread "
"state data structure, then acquiring the GIL, and finally storing their "
"thread state pointer, before you can start using the Python/C API.  When you "
"are done, you should reset the thread state pointer, release the GIL, and "
"finally free the thread state data structure."
msgstr ""
"Si necesitas llamar código Python desde estos hilos (a menudo esto será "
"parte de una API de callback proporcionada por la biblioteca de terceros "
"mencionada anteriormente), primero debes registrar estos hilos con el "
"intérprete creando una estructura de datos de estado de hilo, luego "
"adquiriendo el GIL, y finalmente almacenando su puntero de estado de hilo, "
"antes de que puedas empezar a usar la API Python/C.  Cuando hayas terminado, "
"debes restablecer el puntero de estado del hilo, liberar el GIL, y "
"finalmente liberar la estructura de datos de estado del hilo."

#: ../../c-api/init.rst:1023
msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""
"Las funciones :c:func:`PyGILState_Ensure` y :c:func:`PyGILState_Release` "
"hacen todo lo anterior automáticamente.  El lenguaje típico para llamar a "
"Python desde un hilo C es::"

#: ../../c-api/init.rst:1027
msgid ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Release the thread. No Python API allowed beyond this point. */\n"
"PyGILState_Release(gstate);"
msgstr ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Release the thread. No Python API allowed beyond this point. */\n"
"PyGILState_Release(gstate);"

#: ../../c-api/init.rst:1037
msgid ""
"Note that the ``PyGILState_*`` functions assume there is only one global "
"interpreter (created automatically by :c:func:`Py_Initialize`).  Python "
"supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the "
"``PyGILState_*`` API is unsupported."
msgstr ""

#: ../../c-api/init.rst:1047
msgid "Cautions about fork()"
msgstr "Precauciones sobre fork()"

#: ../../c-api/init.rst:1049
msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist.  This has a "
"concrete impact both on how locks must be handled and on all stored state in "
"CPython's runtime."
msgstr ""
"Otra cosa importante a tener en cuenta sobre los hilos es su comportamiento "
"frente a la llamada C :c:func:`fork`. En la mayoría de los sistemas con :c:"
"func:`fork`, después de que un proceso se bifurque sólo existirá el hilo que "
"emitió la bifurcación.  Esto tiene un impacto concreto tanto en cómo deben "
"manejarse los bloqueos como en todo el estado almacenado en el tiempo de "
"ejecución de CPython."

#: ../../c-api/init.rst:1055
msgid ""
"The fact that only the \"current\" thread remains means any locks held by "
"other threads will never be released. Python solves this for :func:`os.fork` "
"by acquiring the locks it uses internally before the fork, and releasing "
"them afterwards. In addition, it resets any :ref:`lock-objects` in the "
"child. When extending or embedding Python, there is no way to inform Python "
"of additional (non-Python) locks that need to be acquired before or reset "
"after a fork. OS facilities such as :c:func:`!pthread_atfork` would need to "
"be used to accomplish the same thing. Additionally, when extending or "
"embedding Python, calling :c:func:`fork` directly rather than through :func:"
"`os.fork` (and returning to or calling into Python) may result in a deadlock "
"by one of Python's internal locks being held by a thread that is defunct "
"after the fork. :c:func:`PyOS_AfterFork_Child` tries to reset the necessary "
"locks, but is not always able to."
msgstr ""
"Тот факт, что остается только «текущий» поток, означает, что любые "
"блокировки, удерживаемые другими потоками, никогда не будут сняты. Python "
"решает эту проблему для :func:`os.fork`, получая внутренние блокировки, "
"которые он использует перед разветвлением, и освобождая их после этого. "
"Кроме того, он сбрасывает любые :ref:`lock-objects` в дочернем объекте. При "
"расширении или внедрении Python невозможно сообщить Python о дополнительных "
"(не Python) блокировках, которые необходимо получить до или сбросить после "
"разветвления. Для достижения той же цели необходимо будет использовать такие "
"средства ОС, как :c:func:`!pthread_atfork`. Кроме того, при расширении или "
"встраивании Python вызов :c:func:`fork` напрямую, а не через :func:`os.fork` "
"(и возврат или вызов Python) может привести к взаимоблокировке из-за того, "
"что одна из внутренних блокировок Python удерживается потоком, который "
"прекратил свое существование после разветвления. :c:func:"
"`PyOS_AfterFork_Child` пытается сбросить необходимые блокировки, но не "
"всегда это удается."

#: ../../c-api/init.rst:1070
msgid ""
"The fact that all other threads go away also means that CPython's runtime "
"state there must be cleaned up properly, which :func:`os.fork` does.  This "
"means finalizing all other :c:type:`PyThreadState` objects belonging to the "
"current interpreter and all other :c:type:`PyInterpreterState` objects.  Due "
"to this and the special nature of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`, :c:func:`fork` should only be called in that "
"interpreter's \"main\" thread, where the CPython global runtime was "
"originally initialized. The only exception is if :c:func:`exec` will be "
"called immediately after."
msgstr ""
"El hecho de que todos los otros hilos desaparezcan también significa que el "
"estado de ejecución de CPython se debe limpiar de forma adecuada, lo que "
"hace :func:`os.fork`.  Esto significa finalizar todos los demás objetos :c:"
"type:`PyThreadState` pertenecientes al intérprete actual y todos los demás "
"objetos :c:type:`PyInterpreterState`.  Debido a esto y a la naturaleza "
"especial del intérprete :ref:`\"main\" <sub-interpreter-support>`, :c:func:"
"`fork` sólo se debería llamar en el hilo \"main\" de ese intérprete, donde "
"el tiempo de ejecución global de CPython se inicializó originalmente. La "
"única excepción es si se llamará :c:func:`exec` inmediatamente después."

#: ../../c-api/init.rst:1084
msgid "Cautions regarding runtime finalization"
msgstr ""

#: ../../c-api/init.rst:1086
msgid ""
"In the late stage of :term:`interpreter shutdown`, after attempting to wait "
"for non-daemon threads to exit (though this can be interrupted by :class:"
"`KeyboardInterrupt`) and running the :mod:`atexit` functions, the runtime is "
"marked as *finalizing*: :c:func:`Py_IsFinalizing` and :func:`sys."
"is_finalizing` return true.  At this point, only the *finalization thread* "
"that initiated finalization (typically the main thread) is allowed to "
"acquire the :term:`GIL`."
msgstr ""

#: ../../c-api/init.rst:1094
msgid ""
"If any thread, other than the finalization thread, attempts to acquire the "
"GIL during finalization, either explicitly via :c:func:`PyGILState_Ensure`, :"
"c:macro:`Py_END_ALLOW_THREADS`, :c:func:`PyEval_AcquireThread`, or :c:func:"
"`PyEval_AcquireLock`, or implicitly when the interpreter attempts to "
"reacquire it after having yielded it, the thread enters **a permanently "
"blocked state** where it remains until the program exits.  In most cases "
"this is harmless, but this can result in deadlock if a later stage of "
"finalization attempts to acquire a lock owned by the blocked thread, or "
"otherwise waits on the blocked thread."
msgstr ""

#: ../../c-api/init.rst:1104
msgid ""
"Gross? Yes. This prevents random crashes and/or unexpectedly skipped C++ "
"finalizations further up the call stack when such threads were forcibly "
"exited here in CPython 3.13.7 and earlier. The CPython runtime GIL acquiring "
"C APIs have never had any error reporting or handling expectations at GIL "
"acquisition time that would've allowed for graceful exit from this "
"situation. Changing that would require new stable C APIs and rewriting the "
"majority of C code in the CPython ecosystem to use those with error handling."
msgstr ""

#: ../../c-api/init.rst:1114
msgid "High-level API"
msgstr "API de alto nivel"

#: ../../c-api/init.rst:1116
msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""
"Estos son los tipos y funciones más utilizados cuando se escribe código de "
"extensión C, o cuando se incrusta el intérprete Python:"

#: ../../c-api/init.rst:1121
msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""
"Esta estructura de datos representa el estado compartido por un número de "
"hilos cooperantes.  Los hilos que pertenecen al mismo intérprete comparten "
"la administración de sus módulos y algunos otros elementos internos. No hay "
"miembros públicos en esta estructura."

#: ../../c-api/init.rst:1126
msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""
"Los hilos que pertenecen a diferentes intérpretes inicialmente no comparten "
"nada, excepto el estado del proceso como la memoria disponible, los "
"descriptores de archivo abiertos y similares.  También se comparte el "
"bloqueo global del intérprete entre todos los hilos, independientemente del "
"intérprete al que pertenezcan."

#: ../../c-api/init.rst:1134
msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is:"
msgstr ""
"Эта структура данных представляет состояние одного потока. Единственный "
"общедоступный элемент данных:"

#: ../../c-api/init.rst:1139
msgid "This thread's interpreter state."
msgstr "Состояние интерпретатора этого потока."

#: ../../c-api/init.rst:1150
msgid "Deprecated function which does nothing."
msgstr "Función obsoleta que no hace nada."

#: ../../c-api/init.rst:1152
msgid ""
"In Python 3.6 and older, this function created the GIL if it didn't exist."
msgstr "En Python 3.6 y anteriores, esta función creaba el GIL si no existía."

#: ../../c-api/init.rst:1154
msgid "The function now does nothing."
msgstr "La función ahora no hace nada."

#: ../../c-api/init.rst:1157
msgid ""
"This function is now called by :c:func:`Py_Initialize()`, so you don't have "
"to call it yourself anymore."
msgstr ""
"Esta función ahora es llamada por :c:func:`Py_Initialize()`, así que ya no "
"tienes que llamarla tú mismo."

#: ../../c-api/init.rst:1161
msgid ""
"This function cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr "Esta función ya no se puede llamar antes de :c:func:`Py_Initialize()`."

#: ../../c-api/init.rst:1171
msgid ""
"Release the global interpreter lock (if it has been created) and reset the "
"thread state to ``NULL``, returning the previous thread state (which is not "
"``NULL``).  If the lock has been created, the current thread must have "
"acquired it."
msgstr ""
"Libera el bloqueo global del intérprete (si se ha creado) y restablece el "
"estado del subproceso a ``NULL``, devolviendo el estado anterior del "
"subproceso (que no es ``NULL``).  Si el bloqueo ha sido creado, el hilo "
"actual debe haberlo adquirido."

#: ../../c-api/init.rst:1179
msgid ""
"Acquire the global interpreter lock (if it has been created) and set the "
"thread state to *tstate*, which must not be ``NULL``.  If the lock has been "
"created, the current thread must not have acquired it, otherwise deadlock "
"ensues."
msgstr ""
"Adquiere el bloqueo global del intérprete (si se ha creado) y establece el "
"estado del hilo a *tstate*, que no debe ser ``NULL``.  Si el bloqueo ha sido "
"creado, el hilo actual no debe haberlo adquirido, de lo contrario se produce "
"un bloqueo."

#: ../../c-api/init.rst:1185 ../../c-api/init.rst:1248
#: ../../c-api/init.rst:1547
msgid ""
"Calling this function from a thread when the runtime is finalizing will hang "
"the thread until the program exits, even if the thread was not created by "
"Python.  Refer to :ref:`cautions-regarding-runtime-finalization` for more "
"details."
msgstr ""

#: ../../c-api/init.rst:1190 ../../c-api/init.rst:1253
#: ../../c-api/init.rst:1557
msgid ""
"Hangs the current thread, rather than terminating it, if called while the "
"interpreter is finalizing."
msgstr ""

#: ../../c-api/init.rst:1196
msgid ""
"Return the current thread state.  The global interpreter lock must be held. "
"When the current thread state is ``NULL``, this issues a fatal error (so "
"that the caller needn't check for ``NULL``)."
msgstr ""
"Devuelve el estado actual del hilo.  El bloqueo global del intérprete debe "
"mantenerse. Cuando el estado actual del hilo es ``NULL``, esto emite un "
"error fatal (para que el llamador no necesite comprobar ``NULL``)."

#: ../../c-api/init.rst:1200
msgid "See also :c:func:`PyThreadState_GetUnchecked`."
msgstr "См. также :c:func:`PyThreadState_GetUnchecked`."

#: ../../c-api/init.rst:1205
msgid ""
"Similar to :c:func:`PyThreadState_Get`, but don't kill the process with a "
"fatal error if it is NULL. The caller is responsible to check if the result "
"is NULL."
msgstr ""
"Аналогично :c:func:`PyThreadState_Get`, но не завершайте процесс с фатальной "
"ошибкой, если он равен NULL. Вызывающая сторона несет ответственность за "
"проверку того, является ли результат NULL."

#: ../../c-api/init.rst:1209
msgid ""
"In Python 3.5 to 3.12, the function was private and known as "
"``_PyThreadState_UncheckedGet()``."
msgstr ""
"В версиях Python 3.5–3.12 эта функция была частной и называлась "
"``_PyThreadState_UncheckedGet()``."

#: ../../c-api/init.rst:1216
msgid ""
"Swap the current thread state with the thread state given by the argument "
"*tstate*, which may be ``NULL``."
msgstr ""

#: ../../c-api/init.rst:1219
msgid ""
"The :term:`GIL` does not need to be held, but will be held upon returning if "
"*tstate* is non-``NULL``."
msgstr ""

#: ../../c-api/init.rst:1222
msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""
"Las siguientes funciones utilizan almacenamiento local de subprocesos y no "
"son compatibles con subintérpretes:"

#: ../../c-api/init.rst:1227
msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the global interpreter lock. This may "
"be called as many times as desired by a thread as long as each call is "
"matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""
"Asegura que el hilo actual está preparado para llamar a la API de Python C "
"independientemente del estado actual de Python, o del bloqueo global del "
"intérprete. Se puede llamar esto tantas veces como se desee por un hilo "
"siempre que cada llamada coincida con una llamada a :c:func:"
"`PyGILState_Release`. En general, se pueden usar otras APIs relacionadas con "
"hilos entre las llamadas a :c:func:`PyGILState_Ensure` y :c:func:"
"`PyGILState_Release` siempre que el estado del hilo se restaure a su estado "
"previo antes de Release().  Por ejemplo, es aceptable el uso normal de las "
"macros :c:macro:`Py_BEGIN_ALLOW_THREADS` y :c:macro:`Py_END_ALLOW_THREADS`."

#: ../../c-api/init.rst:1237
msgid ""
"The return value is an opaque \"handle\" to the thread state when :c:func:"
"`PyGILState_Ensure` was called, and must be passed to :c:func:"
"`PyGILState_Release` to ensure Python is left in the same state. Even though "
"recursive calls are allowed, these handles *cannot* be shared - each unique "
"call to :c:func:`PyGILState_Ensure` must save the handle for its call to :c:"
"func:`PyGILState_Release`."
msgstr ""
"El valor de retorno es un \"handle\" opaco del estado del hilo cuando se "
"llamó a :c:func:`PyGILState_Ensure`, y debe pasarse a :c:func:"
"`PyGILState_Release` para asegurar que Python se queda en el mismo estado. "
"Aunque las llamadas recursivas están permitidas, estos handles *no* se "
"pueden compartir - cada llamada única a :c:func:`PyGILState_Ensure` debe "
"guardar el handle para su llamada a :c:func:`PyGILState_Release`."

#: ../../c-api/init.rst:1244
msgid ""
"When the function returns, the current thread will hold the GIL and be able "
"to call arbitrary Python code.  Failure is a fatal error."
msgstr ""
"Cuando la función retorna, el hilo actual mantendrá el GIL y podrá llamar a "
"código Python arbitrario.  El fallo es un error fatal."

#: ../../c-api/init.rst:1259
msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""
"Liberar cualquier recurso adquirido previamente.  Después de esta llamada, "
"el estado de Python será el mismo que antes de la correspondiente llamada a :"
"c:func:`PyGILState_Ensure` (pero generalmente este estado será desconocido "
"para el llamante, de ahí el uso de la API GILState)."

#: ../../c-api/init.rst:1264
msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""
"Cada llamada a :c:func:`PyGILState_Ensure` debe coincidir con una llamada a :"
"c:func:`PyGILState_Release` en el mismo hilo."

#: ../../c-api/init.rst:1270
msgid ""
"Get the current thread state for this thread.  May return ``NULL`` if no "
"GILState API has been used on the current thread.  Note that the main thread "
"always has such a thread-state, even if no auto-thread-state call has been "
"made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""
"Obtiene el estado actual del subproceso.  Puede devolver ``NULL`` si no se "
"ha utilizado la API GILState en el subproceso actual.  Tener en cuenta que "
"el hilo principal siempre tiene este estado, incluso si no se ha realizado "
"ninguna llamada al estado automático del hilo en el hilo principal.  Esta es "
"principalmente una función de ayuda/diagnóstico."

#: ../../c-api/init.rst:1278
msgid ""
"Return ``1`` if the current thread is holding the GIL and ``0`` otherwise. "
"This function can be called from any thread at any time. Only if it has had "
"its Python thread state initialized and currently is holding the GIL will it "
"return ``1``. This is mainly a helper/diagnostic function.  It can be useful "
"for example in callback contexts or memory allocation functions when knowing "
"that the GIL is locked can allow the caller to perform sensitive actions or "
"otherwise behave differently."
msgstr ""
"Devuelve ``1`` si el subproceso actual mantiene el GIL y ``0`` en caso "
"contrario. Se puede llamar esta función desde cualquier hilo en cualquier "
"momento. Sólo devolverá ``1`` si se ha inicializado el estado de la hebra de "
"Python y está manteniendo el GIL. Esta es principalmente una función de "
"ayuda/diagnóstico.  Puede ser útil, por ejemplo, en contextos de devolución "
"de llamada o funciones de asignación de memoria, cuando saber que el GIL "
"está bloqueado puede permitir a quien llama realizar acciones sensibles o "
"comportarse de otra manera."

#: ../../c-api/init.rst:1290
msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""
"Las siguientes macros se utilizan normalmente sin punto y coma al final; "
"busque ejemplos de uso en la distribución del código fuente de Python."

#: ../../c-api/init.rst:1296
msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro."
msgstr ""
"Esta macro se expande a ``{ PyThreadState *_save; _save = "
"PyEval_SaveThread();``. Tener en cuenta que contiene una llave de apertura; "
"debe coincidir con una macro :c:macro:`Py_END_ALLOW_THREADS` siguiente.  "
"Para más información sobre esta macro, ver más arriba."

#: ../../c-api/init.rst:1304
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro."
msgstr ""
"Esta macro se expande a ``PyEval_RestoreThread(_save); }``. Tener en cuenta "
"que contiene una llave de cierre; debe coincidir con una macro :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` anterior.  Para más información sobre esta macro, "
"ver más arriba."

#: ../../c-api/init.rst:1312
msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace."
msgstr ""
"Esta macro se expande a ``PyEval_RestoreThread(_save);``: equivale a :c:"
"macro:`Py_END_ALLOW_THREADS` sin el corchete de cierre."

#: ../../c-api/init.rst:1318
msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration."
msgstr ""
"Esta macro se expande a ``_save = PyEval_SaveThread();``: es equivalente a :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` sin la llave de apertura y la declaración "
"de variables."

#: ../../c-api/init.rst:1324
msgid "Low-level API"
msgstr "API de bajo nivel"

#: ../../c-api/init.rst:1326
msgid ""
"All of the following functions must be called after :c:func:`Py_Initialize`."
msgstr ""
"Todas las funciones siguientes deben llamarse después de :c:func:"
"`Py_Initialize`."

#: ../../c-api/init.rst:1328
msgid ":c:func:`Py_Initialize()` now initializes the :term:`GIL`."
msgstr ":c:func:`Py_Initialize()` inicializa ahora el :término:`GIL`."

#: ../../c-api/init.rst:1334
msgid ""
"Create a new interpreter state object.  The global interpreter lock need not "
"be held, but may be held if it is necessary to serialize calls to this "
"function."
msgstr ""
"Crea un nuevo objeto de estado de intérprete.  No es necesario mantener el "
"bloqueo global del intérprete, pero puede mantenerse si es necesario "
"serializar las llamadas a esta función."

#: ../../c-api/init.rst:1338
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_New`` with no arguments."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``cpython.PyInterpreterState_New`` "
"sin argumentos."

#: ../../c-api/init.rst:1343
msgid ""
"Reset all information in an interpreter state object.  The global "
"interpreter lock must be held."
msgstr ""
"Restablece toda la información de un objeto de estado de intérprete.  Se "
"debe mantener el bloqueo global del intérprete."

#: ../../c-api/init.rst:1346
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` with no arguments."
msgstr ""
"Lanza un :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` sin argumentos."

#: ../../c-api/init.rst:1351
msgid ""
"Destroy an interpreter state object.  The global interpreter lock need not "
"be held.  The interpreter state must have been reset with a previous call "
"to :c:func:`PyInterpreterState_Clear`."
msgstr ""
"Destruye un objeto de estado de intérprete.  No es necesario mantener el "
"bloqueo global del intérprete.  Se debe de haber reiniciado el estado del "
"intérprete con una llamada previa a :c:func:`PyInterpreterState_Clear`."

#: ../../c-api/init.rst:1358
msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"The global interpreter lock need not be held, but may be held if it is "
"necessary to serialize calls to this function."
msgstr ""
"Crea un nuevo objeto de estado de hilo perteneciente al objeto intérprete "
"dado. No es necesario mantener el bloqueo global del intérprete, pero puede "
"mantenerse si es necesario serializar las llamadas a esta función."

#: ../../c-api/init.rst:1365
msgid ""
"Reset all information in a thread state object.  The global interpreter lock "
"must be held."
msgstr ""
"Restablece toda la información de un objeto de estado de hilo.  Se debe "
"mantener el bloqueo global del intérprete."

#: ../../c-api/init.rst:1368
msgid ""
"This function now calls the :c:member:`PyThreadState.on_delete` callback. "
"Previously, that happened in :c:func:`PyThreadState_Delete`."
msgstr ""
"Esta función llama ahora a la llamada de retorno :c:member:`PyThreadState."
"on_delete`. Anteriormente, esto ocurría en :c:func:`PyThreadState_Delete`."

#: ../../c-api/init.rst:1372
msgid "The :c:member:`PyThreadState.on_delete` callback was removed."
msgstr "Обратный вызов :c:member:`PyThreadState.on_delete` был удален."

#: ../../c-api/init.rst:1378
msgid ""
"Destroy a thread state object.  The global interpreter lock need not be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""
"Destruye un objeto de estado de hilo.  No es necesario mantener el bloqueo "
"global del intérprete. El estado del hilo se debe haber reiniciado con una "
"llamada previa a :c:func:`PyThreadState_Clear`."

#: ../../c-api/init.rst:1385
msgid ""
"Destroy the current thread state and release the global interpreter lock. "
"Like :c:func:`PyThreadState_Delete`, the global interpreter lock must be "
"held. The thread state must have been reset with a previous call to :c:func:"
"`PyThreadState_Clear`."
msgstr ""

#: ../../c-api/init.rst:1393
msgid "Get the current frame of the Python thread state *tstate*."
msgstr "Obtiene la trama actual del estado del hilo de Python *tstate*."

#: ../../c-api/init.rst:1395
msgid ""
"Return a :term:`strong reference`. Return ``NULL`` if no frame is currently "
"executing."
msgstr ""
"Повертає :term:`strong reference`. Повертає ``NULL``, якщо наразі не "
"виконується жоден кадр."

#: ../../c-api/init.rst:1398
msgid "See also :c:func:`PyEval_GetFrame`."
msgstr "Ver también :c:func:`PyEval_GetFrame`."

#: ../../c-api/init.rst:1400 ../../c-api/init.rst:1409
#: ../../c-api/init.rst:1418
msgid "*tstate* must not be ``NULL``."
msgstr "*tstate* no debe ser ``NULL``."

#: ../../c-api/init.rst:1407
msgid ""
"Get the unique thread state identifier of the Python thread state *tstate*."
msgstr "Obtener el identificador único del estado del hilo de Python *tstate*."

#: ../../c-api/init.rst:1416
msgid "Get the interpreter of the Python thread state *tstate*."
msgstr "Obtiene el intérprete del estado del hilo de Python *tstate*."

#: ../../c-api/init.rst:1425
msgid "Suspend tracing and profiling in the Python thread state *tstate*."
msgstr ""
"Приостановить трассировку и профилирование в состоянии потока Python "
"*tstate*."

#: ../../c-api/init.rst:1427
msgid "Resume them using the :c:func:`PyThreadState_LeaveTracing` function."
msgstr ""
"Возобновите их, используя функцию :c:func:`PyThreadState_LeaveTracing`."

#: ../../c-api/init.rst:1434
msgid ""
"Resume tracing and profiling in the Python thread state *tstate* suspended "
"by the :c:func:`PyThreadState_EnterTracing` function."
msgstr ""
"Возобновите трассировку и профилирование в состоянии потока Python *tstate*, "
"приостановленном функцией :c:func:`PyThreadState_EnterTracing`."

#: ../../c-api/init.rst:1437
msgid ""
"See also :c:func:`PyEval_SetTrace` and :c:func:`PyEval_SetProfile` functions."
msgstr ""
"См. также функции :c:func:`PyEval_SetTrace` и :c:func:`PyEval_SetProfile`."

#: ../../c-api/init.rst:1445
msgid "Get the current interpreter."
msgstr "Obtener el intérprete actual."

#: ../../c-api/init.rst:1447
msgid ""
"Issue a fatal error if there no current Python thread state or no current "
"interpreter. It cannot return NULL."
msgstr ""
"Emite un error fatal si no hay un estado de hilo Python actual o no hay un "
"intérprete actual. No puede devolver NULL."

#: ../../c-api/init.rst:1450 ../../c-api/init.rst:1460
#: ../../c-api/init.rst:1482
msgid "The caller must hold the GIL."
msgstr "Caller debe mantener el GIL."

#: ../../c-api/init.rst:1457
msgid ""
"Return the interpreter's unique ID.  If there was any error in doing so then "
"``-1`` is returned and an error is set."
msgstr ""
"Devuelve el ID único del intérprete.  Si hubo algún error al hacerlo "
"entonces se devuelve ``-1`` y se establece un error."

#: ../../c-api/init.rst:1467
msgid ""
"Return a dictionary in which interpreter-specific data may be stored. If "
"this function returns ``NULL`` then no exception has been raised and the "
"caller should assume no interpreter-specific dict is available."
msgstr ""
"Devuelve un diccionario en el que se pueden almacenar datos específicos del "
"intérprete. Si esta función devuelve ``NULL`` entonces no se ha lanzado "
"ninguna excepción y caller debería asumir que no hay disponible ningún dict "
"específico del intérprete."

#: ../../c-api/init.rst:1471
msgid ""
"This is not a replacement for :c:func:`PyModule_GetState()`, which "
"extensions should use to store interpreter-specific state information."
msgstr ""
"No sustituye a :c:func:`PyModule_GetState()`, que las extensiones deberían "
"utilizar para almacenar información de estado específica del intérprete."

#: ../../c-api/init.rst:1479
msgid ""
"Return a :term:`strong reference` to the ``__main__`` :ref:`module object "
"<moduleobjects>` for the given interpreter."
msgstr ""

#: ../../c-api/init.rst:1489
msgid "Type of a frame evaluation function."
msgstr "Tipo de función de evaluación de un marco."

#: ../../c-api/init.rst:1491
msgid ""
"The *throwflag* parameter is used by the ``throw()`` method of generators: "
"if non-zero, handle the current exception."
msgstr ""
"El parámetro *throwflag* se usa por el método ``throw()`` de los "
"generadores: si es distinto de cero, maneja la excepción actual."

#: ../../c-api/init.rst:1494
msgid "The function now takes a *tstate* parameter."
msgstr "La función toma ahora un parámetro *tstate*."

#: ../../c-api/init.rst:1497
msgid ""
"The *frame* parameter changed from ``PyFrameObject*`` to "
"``_PyInterpreterFrame*``."
msgstr ""
"Параметр *frame* изменен с ``PyFrameObject*`` на ``_PyInterpreterFrame*``."

#: ../../c-api/init.rst:1502
msgid "Get the frame evaluation function."
msgstr "Obtener la función de evaluación del marco."

#: ../../c-api/init.rst:1504 ../../c-api/init.rst:1512
msgid "See the :pep:`523` \"Adding a frame evaluation API to CPython\"."
msgstr "Ver :pep:`523` \"Agregar una API de evaluación de marcos a CPython\"."

#: ../../c-api/init.rst:1510
msgid "Set the frame evaluation function."
msgstr "Configura la función de evaluación de estructuras."

#: ../../c-api/init.rst:1519
msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no current thread "
"state is available. If this function returns ``NULL``, no exception has been "
"raised and the caller should assume no current thread state is available."
msgstr ""
"Devuelve un diccionario en el que las extensiones pueden almacenar "
"información de estado específica del hilo.  Cada extensión debe usar una "
"clave única para almacenar el estado en el diccionario.  Está bien llamar a "
"esta función cuando no se dispone del estado actual del subproceso. Si esta "
"función devuelve ``NULL``, no se ha lanzado ninguna excepción y caller debe "
"asumir que no hay disponible ningún estado de subproceso."

#: ../../c-api/init.rst:1528
msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with the GIL held. Returns the number of thread states modified; this is "
"normally one, but will be zero if the thread id isn't found.  If *exc* is "
"``NULL``, the pending exception (if any) for the thread is cleared. This "
"raises no exceptions."
msgstr ""

#: ../../c-api/init.rst:1536
msgid ""
"The type of the *id* parameter changed from :c:expr:`long` to :c:expr:"
"`unsigned long`."
msgstr ""
"Тип параметра *id* изменен с :c:expr:`long` на :c:expr:`unsigned long`."

#: ../../c-api/init.rst:1542
msgid ""
"Acquire the global interpreter lock and set the current thread state to "
"*tstate*, which must not be ``NULL``.  The lock must have been created "
"earlier. If this thread already has the lock, deadlock ensues."
msgstr ""
"Adquiere el bloqueo global del intérprete y establece el estado actual del "
"hilo en *tstate*, que no debe ser ``NULL``.  El bloqueo debe haber sido "
"creado anteriormente. Si este hilo ya tiene el bloqueo, se produce un punto "
"muerto."

#: ../../c-api/init.rst:1552
msgid ""
"Updated to be consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`, and terminate the "
"current thread if called while the interpreter is finalizing."
msgstr ""
"Actualizado para ser consistente con :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, y :c:func:`PyGILState_Ensure`, y terminar el hilo "
"actual si se llama mientras el intérprete está finalizando."

#: ../../c-api/init.rst:1561
msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_RestoreThread` es una función de nivel superior que siempre "
"está disponible (incluso cuando los hilos no se han inicializado)."

#: ../../c-api/init.rst:1567
msgid ""
"Reset the current thread state to ``NULL`` and release the global "
"interpreter lock.  The lock must have been created earlier and must be held "
"by the current thread.  The *tstate* argument, which must not be ``NULL``, "
"is only used to check that it represents the current thread state --- if it "
"isn't, a fatal error is reported."
msgstr ""
"Restablece el estado del subproceso actual a ``NULL`` y libera el bloqueo "
"global del intérprete.  El bloqueo se debe haber creado con anterioridad y "
"se debe mantener por el hilo actual.  El argumento *tstate*, que no debe ser "
"``NULL``, sólo se usa para comprobar que representa el estado actual del "
"hilo --- si no lo es, se informa de un error fatal."

#: ../../c-api/init.rst:1573
msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_SaveThread` es una función de nivel superior que siempre "
"está disponible (incluso cuando los hilos no se han inicializado)."

#: ../../c-api/init.rst:1580
msgid "Sub-interpreter support"
msgstr "Soporte para subintérpretes"

#: ../../c-api/init.rst:1582
msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread. Sub-interpreters allow you "
"to do that."
msgstr ""
"Mientras que en la mayoría de los usos, sólo incrustarás un único intérprete "
"de Python, hay casos en los que se necesita crear varios intérpretes "
"independientes en el mismo proceso y quizás incluso en el mismo hilo. Los "
"subintérpretes te permiten hacerlo."

#: ../../c-api/init.rst:1587
msgid ""
"The \"main\" interpreter is the first one created when the runtime "
"initializes. It is usually the only Python interpreter in a process.  Unlike "
"sub-interpreters, the main interpreter has unique process-global "
"responsibilities like signal handling.  It is also responsible for execution "
"during runtime initialization and is usually the active interpreter during "
"runtime finalization.  The :c:func:`PyInterpreterState_Main` function "
"returns a pointer to its state."
msgstr ""
"El intérprete \"main\" es el primero que se crea cuando se inicializa el "
"tiempo de ejecución. Normalmente es el único intérprete de Python en un "
"proceso.  A diferencia de los sub-intérpretes, el intérprete principal tiene "
"responsabilidades únicas a nivel de proceso, como el manejo de señales.  "
"También es responsable de la ejecución durante la inicialización del tiempo "
"de ejecución y es normalmente el intérprete activo durante la finalización "
"del tiempo de ejecución.  La función :c:func:`PyInterpreterState_Main` "
"devuelve un puntero a su estado."

#: ../../c-api/init.rst:1594
msgid ""
"You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function. You can create and destroy them using the "
"following functions:"
msgstr ""
"Puede cambiar entre subinterpretadores utilizando la función :c:func:"
"`PyThreadState_Swap`. Puede crearlos y destruirlos utilizando las siguientes "
"funciones:"

#: ../../c-api/init.rst:1600
msgid ""
"Structure containing most parameters to configure a sub-interpreter. Its "
"values are used only in :c:func:`Py_NewInterpreterFromConfig` and never "
"modified by the runtime."
msgstr ""
"Структура, содержащая большинство параметров для настройки "
"субинтерпретатора. Его значения используются только в :c:func:"
"`Py_NewInterpreterFromConfig` и никогда не изменяются во время выполнения."

#: ../../c-api/init.rst:1606
msgid "Structure fields:"
msgstr "Campos de estructura:"

#: ../../c-api/init.rst:1610
msgid ""
"If this is ``0`` then the sub-interpreter will use its own \"object\" "
"allocator state. Otherwise it will use (share) the main interpreter's."
msgstr ""
"Если это ``0``, то субинтерпретатор будет использовать свое собственное "
"состояние распределителя «объекта». В противном случае он будет использовать "
"(разделять) основной интерпретатор."

#: ../../c-api/init.rst:1614
msgid ""
"If this is ``0`` then :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` must be ``1`` (non-zero). If this is ``1`` "
"then :c:member:`~PyInterpreterConfig.gil` must not be :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."
msgstr ""
"Если это ``0``, то :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` должен быть ``1`` (не ноль). Если это ``1``, "
"то :c:member:`~PyInterpreterConfig.gil` не должен быть :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."

#: ../../c-api/init.rst:1622
msgid ""
"If this is ``0`` then the runtime will not support forking the process in "
"any thread where the sub-interpreter is currently active. Otherwise fork is "
"unrestricted."
msgstr ""
"Если это ``0``, то среда выполнения не будет поддерживать разветвление "
"процесса в любом потоке, где субинтерпретатор в данный момент активен. В "
"противном случае форк не имеет ограничений."

#: ../../c-api/init.rst:1626
msgid ""
"Note that the :mod:`subprocess` module still works when fork is disallowed."
msgstr ""
"Обратите внимание, что модуль :mod:`subprocess` по-прежнему работает, когда "
"fork запрещен."

#: ../../c-api/init.rst:1631
msgid ""
"If this is ``0`` then the runtime will not support replacing the current "
"process via exec (e.g. :func:`os.execv`) in any thread where the sub-"
"interpreter is currently active. Otherwise exec is unrestricted."
msgstr ""
"Если это ``0``, то среда выполнения не будет поддерживать замену текущего "
"процесса через exec (например, :func:`os.execv`) в любом потоке, где "
"субинтерпретатор в данный момент активен. В противном случае exec не имеет "
"ограничений."

#: ../../c-api/init.rst:1636
msgid ""
"Note that the :mod:`subprocess` module still works when exec is disallowed."
msgstr ""
"Обратите внимание, что модуль :mod:`subprocess` по-прежнему работает, даже "
"если exec запрещен."

#: ../../c-api/init.rst:1641
msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create threads. Otherwise threads are allowed."
msgstr ""
"Если это ``0``, то модуль субинтерпретатора :mod:`threading` не будет "
"создавать потоки. В противном случае потоки разрешены."

#: ../../c-api/init.rst:1647
msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create daemon threads. Otherwise daemon threads are allowed (as long as :c:"
"member:`~PyInterpreterConfig.allow_threads` is non-zero)."
msgstr ""
"Если это ``0``, то модуль :mod:`threading` субинтерпретатора не будет "
"создавать потоки демона. В противном случае потоки демона разрешены (если :c:"
"member:`~PyInterpreterConfig.allow_threads` не равно нулю)."

#: ../../c-api/init.rst:1654
msgid ""
"If this is ``0`` then all extension modules may be imported, including "
"legacy (single-phase init) modules, in any thread where the sub-interpreter "
"is currently active. Otherwise only multi-phase init extension modules (see :"
"pep:`489`) may be imported. (Also see :c:macro:"
"`Py_mod_multiple_interpreters`.)"
msgstr ""
"Если это ``0``, то все модули расширения могут быть импортированы, включая "
"устаревшие модули (однофазная инициализация), в любом потоке, где "
"субинтерпретатор в данный момент активен. В противном случае можно "
"импортировать только модули расширения многофазной инициализации (см. :pep:"
"`489`). (См. также :c:macro:`Py_mod_multiple_interpreters`.)"

#: ../../c-api/init.rst:1661
msgid ""
"This must be ``1`` (non-zero) if :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` is ``0``."
msgstr ""
"Это должно быть ``1`` (не ноль), если :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` равно ``0``."

#: ../../c-api/init.rst:1666
msgid ""
"This determines the operation of the GIL for the sub-interpreter. It may be "
"one of the following:"
msgstr ""
"Это определяет работу GIL для субинтерпретатора. Это может быть одно из "
"следующих:"

#: ../../c-api/init.rst:1673
msgid "Use the default selection (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."
msgstr ""
"Используйте выбор по умолчанию (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."

#: ../../c-api/init.rst:1677
msgid "Use (share) the main interpreter's GIL."
msgstr "Используйте (делитесь) GIL основного интерпретатора."

#: ../../c-api/init.rst:1681
msgid "Use the sub-interpreter's own GIL."
msgstr "Используйте собственный GIL субинтерпретатора."

#: ../../c-api/init.rst:1683
msgid ""
"If this is :c:macro:`PyInterpreterConfig_OWN_GIL` then :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` must be ``0``."
msgstr ""
"Если это :c:macro:`PyInterpreterConfig_OWN_GIL`, то :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` должен быть ``0``."

#: ../../c-api/init.rst:1697
msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""
"Crear un nuevo sub-intérprete.  Se trata de un entorno (casi) totalmente "
"independiente para la ejecución de código Python.  En particular, el nuevo "
"intérprete tiene versiones separadas e independientes de todos los módulos "
"importados, incluyendo los módulos fundamentales :mod:`builtins`, :mod:"
"`__main__` y :mod:`sys`.  La tabla de módulos cargados (``sys.modules``) y "
"la ruta de búsqueda de módulos (``sys.path``) también están separadas.  El "
"nuevo entorno no tiene la variable ``sys.argv``.  Tiene nuevos objetos de "
"archivo de flujo de E/S estándar ``sys.stdin``, ``sys.stdout`` y ``sys."
"stderr`` (sin embargo, éstos se refieren a los mismos descriptores de "
"archivo subyacentes)."

#: ../../c-api/init.rst:1707
msgid ""
"The given *config* controls the options with which the interpreter is "
"initialized."
msgstr ""
"Данная *config* управляет опциями, с которыми инициализируется интерпретатор."

#: ../../c-api/init.rst:1710
msgid ""
"Upon success, *tstate_p* will be set to the first thread state created in "
"the new sub-interpreter.  This thread state is made in the current thread "
"state. Note that no actual thread is created; see the discussion of thread "
"states below.  If creation of the new interpreter is unsuccessful, "
"*tstate_p* is set to ``NULL``; no exception is set since the exception state "
"is stored in the current thread state and there may not be a current thread "
"state."
msgstr ""

#: ../../c-api/init.rst:1719
msgid ""
"Like all other Python/C API functions, the global interpreter lock must be "
"held before calling this function and is still held when it returns.  "
"Likewise a current thread state must be set on entry.  On success, the "
"returned thread state will be set as current.  If the sub-interpreter is "
"created with its own GIL then the GIL of the calling interpreter will be "
"released.  When the function returns, the new interpreter's GIL will be held "
"by the current thread and the previously interpreter's GIL will remain "
"released here."
msgstr ""

#: ../../c-api/init.rst:1730
msgid ""
"Sub-interpreters are most effective when isolated from each other, with "
"certain functionality restricted::"
msgstr ""
"Субинтерпретаторы наиболее эффективны, когда они изолированы друг от друга с "
"ограничением определенных функций:"

#: ../../c-api/init.rst:1733
msgid ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"

#: ../../c-api/init.rst:1748
msgid ""
"Note that the config is used only briefly and does not get modified. During "
"initialization the config's values are converted into various :c:type:"
"`PyInterpreterState` values.  A read-only copy of the config may be stored "
"internally on the :c:type:`PyInterpreterState`."
msgstr ""
"Обратите внимание, что конфигурация используется недолго и не изменяется. Во "
"время инициализации значения конфигурации преобразуются в различные "
"значения :c:type:`PyInterpreterState`. Копия конфигурации, доступная только "
"для чтения, может храниться внутри :c:type:`PyInterpreterState`."

#: ../../c-api/init.rst:1757
msgid "Extension modules are shared between (sub-)interpreters as follows:"
msgstr ""
"Los módulos de ampliación se comparten entre (sub)intérpretes del siguiente "
"modo:"

#: ../../c-api/init.rst:1759
msgid ""
"For modules using multi-phase initialization, e.g. :c:func:"
"`PyModule_FromDefAndSpec`, a separate module object is created and "
"initialized for each interpreter. Only C-level static and global variables "
"are shared between these module objects."
msgstr ""
"Para los módulos que utilizan la inicialización multifase, por ejemplo :c:"
"func:`PyModule_FromDefAndSpec`, se crea e inicializa un objeto de módulo "
"independiente para cada intérprete. Sólo las variables estáticas y globales "
"de nivel C se comparten entre estos objetos de módulo."

#: ../../c-api/init.rst:1765
msgid ""
"For modules using single-phase initialization, e.g. :c:func:"
"`PyModule_Create`, the first time a particular extension is imported, it is "
"initialized normally, and a (shallow) copy of its module's dictionary is "
"squirreled away. When the same extension is imported by another "
"(sub-)interpreter, a new module is initialized and filled with the contents "
"of this copy; the extension's ``init`` function is not called. Objects in "
"the module's dictionary thus end up shared across (sub-)interpreters, which "
"might cause unwanted behavior (see `Bugs and caveats`_ below)."
msgstr ""
"Para los módulos que utilizan la inicialización en una sola fase, por "
"ejemplo :c:func:`PyModule_Create`, la primera vez que se importa una "
"extensión concreta, se inicializa normalmente y se guarda una copia "
"(superficial) del diccionario de su módulo. Cuando otro (sub)intérprete "
"importa la misma extensión, se inicializa un nuevo módulo y se llena con el "
"contenido de esta copia; no se llama a la función ``init`` de la extensión. "
"Los objetos en el diccionario del módulo terminan compartidos entre "
"(sub)intérpretes, lo que puede causar comportamientos no deseados (ver `Bugs "
"y advertencias`_ más abajo)."

#: ../../c-api/init.rst:1776
msgid ""
"Note that this is different from what happens when an extension is imported "
"after the interpreter has been completely re-initialized by calling :c:func:"
"`Py_FinalizeEx` and :c:func:`Py_Initialize`; in that case, the extension's "
"``initmodule`` function *is* called again. As with multi-phase "
"initialization, this means that only C-level static and global variables are "
"shared between these modules."
msgstr ""
"Nótese que esto es distinto de lo que ocurre cuando se importa una extensión "
"después de que el intérprete haya sido completamente reinicializado llamando "
"a :c:func:`Py_FinalizeEx` y :c:func:`Py_Initialize`; en ese caso, la función "
"``initmodule`` de la extensión *se* llama de nuevo. Al igual que con la "
"inicialización multifase, esto significa que sólo las variables estáticas y "
"globales de nivel C se comparten entre estos módulos."

#: ../../c-api/init.rst:1796
msgid ""
"Create a new sub-interpreter.  This is essentially just a wrapper around :c:"
"func:`Py_NewInterpreterFromConfig` with a config that preserves the existing "
"behavior.  The result is an unisolated sub-interpreter that shares the main "
"interpreter's GIL, allows fork/exec, allows daemon threads, and allows "
"single-phase init modules."
msgstr ""
"Создайте нового субинтерпретатора. По сути, это просто оболочка :c:func:"
"`Py_NewInterpreterFromConfig` с конфигурацией, сохраняющей существующее "
"поведение. В результате получается неизолированный подинтерпретатор, который "
"использует GIL основного интерпретатора, допускает fork/exec, разрешает "
"потоки демона и допускает однофазные модули инициализации."

#: ../../c-api/init.rst:1808
msgid ""
"Destroy the (sub-)interpreter represented by the given thread state. The "
"given thread state must be the current thread state.  See the discussion of "
"thread states below.  When the call returns, the current thread state is "
"``NULL``.  All thread states associated with this interpreter are "
"destroyed.  The global interpreter lock used by the target interpreter must "
"be held before calling this function.  No GIL is held when it returns."
msgstr ""

#: ../../c-api/init.rst:1816
msgid ""
":c:func:`Py_FinalizeEx` will destroy all sub-interpreters that haven't been "
"explicitly destroyed at that point."
msgstr ""
":c:func:`Py_FinalizeEx` уничтожит все субинтерпретаторы, которые не были "
"явно уничтожены на данный момент."

#: ../../c-api/init.rst:1821
msgid "A Per-Interpreter GIL"
msgstr "GIL для каждого интерпретатора"

#: ../../c-api/init.rst:1823
msgid ""
"Using :c:func:`Py_NewInterpreterFromConfig` you can create a sub-interpreter "
"that is completely isolated from other interpreters, including having its "
"own GIL.  The most important benefit of this isolation is that such an "
"interpreter can execute Python code without being blocked by other "
"interpreters or blocking any others.  Thus a single Python process can truly "
"take advantage of multiple CPU cores when running Python code.  The "
"isolation also encourages a different approach to concurrency than that of "
"just using threads. (See :pep:`554`.)"
msgstr ""
"Используя :c:func:`Py_NewInterpreterFromConfig`, вы можете создать "
"субинтерпретатор, полностью изолированный от других интерпретаторов, в том "
"числе имеющий собственный GIL. Самым важным преимуществом этой изоляции "
"является то, что такой интерпретатор может выполнять код Python, не "
"блокируясь другими интерпретаторами и не блокируя других. Таким образом, "
"один процесс Python действительно может использовать преимущества нескольких "
"ядер ЦП при выполнении кода Python. Изоляция также поощряет другой подход к "
"параллелизму, чем просто использование потоков. (См. :pep:`554`.)"

#: ../../c-api/init.rst:1833
msgid ""
"Using an isolated interpreter requires vigilance in preserving that "
"isolation.  That especially means not sharing any objects or mutable state "
"without guarantees about thread-safety.  Even objects that are otherwise "
"immutable (e.g. ``None``, ``(1, 5)``) can't normally be shared because of "
"the refcount.  One simple but less-efficient approach around this is to use "
"a global lock around all use of some state (or object). Alternately, "
"effectively immutable objects (like integers or strings) can be made safe in "
"spite of their refcounts by making them :term:`immortal`. In fact, this has "
"been done for the builtin singletons, small integers, and a number of other "
"builtin objects."
msgstr ""
"Использование изолированного переводчика требует бдительности и сохранения "
"этой изоляции. Это особенно означает, что нельзя совместно использовать "
"какие-либо объекты или изменяемое состояние без гарантий потокобезопасности. "
"Даже объекты, которые в противном случае являются неизменяемыми (например, "
"``None``, ``(1, 5)``), обычно не могут быть разделены из-за счетчика ссылок. "
"Один простой, но менее эффективный подход заключается в использовании "
"глобальной блокировки для любого использования некоторого состояния (или "
"объекта). С другой стороны, фактически неизменяемые объекты (например, целые "
"числа или строки) можно сделать безопасными, несмотря на их счетчики ссылок, "
"сделав их :term:`бессмертными`. Фактически, это было сделано для встроенных "
"одиночных объектов, малых целых чисел и ряда других встроенных объектов."

#: ../../c-api/init.rst:1844
msgid ""
"If you preserve isolation then you will have access to proper multi-core "
"computing without the complications that come with free-threading. Failure "
"to preserve isolation will expose you to the full consequences of free-"
"threading, including races and hard-to-debug crashes."
msgstr ""
"Если вы сохраните изоляцию, у вас будет доступ к полноценным многоядерным "
"вычислениям без сложностей, связанных со свободной многопоточностью. "
"Неспособность сохранить изоляцию подвергнет вас всем последствиям свободной "
"многопоточности, включая гонки и трудноотлаживаемые сбои."

#: ../../c-api/init.rst:1849
msgid ""
"Aside from that, one of the main challenges of using multiple isolated "
"interpreters is how to communicate between them safely (not break isolation) "
"and efficiently.  The runtime and stdlib do not provide any standard "
"approach to this yet.  A future stdlib module would help mitigate the effort "
"of preserving isolation and expose effective tools for communicating (and "
"sharing) data between interpreters."
msgstr ""
"Помимо этого, одна из основных проблем использования нескольких "
"изолированных переводчиков заключается в том, как безопасно и эффективно "
"общаться между ними (не нарушая изоляцию). Среда выполнения и стандартная "
"библиотека пока не предоставляют стандартного подхода к этому. Будущий "
"модуль stdlib поможет смягчить усилия по сохранению изоляции и предоставит "
"эффективные инструменты для передачи (и совместного использования) данных "
"между интерпретаторами."

#: ../../c-api/init.rst:1860
msgid "Bugs and caveats"
msgstr "Errores y advertencias"

#: ../../c-api/init.rst:1862
msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when using single-phase initialization "
"or (static) global variables. It is possible to insert objects created in "
"one sub-interpreter into a namespace of another (sub-)interpreter; this "
"should be avoided if possible."
msgstr ""
"Debido a que los sub-intérpretes (y el intérprete principal) son parte del "
"mismo proceso, el aislamiento entre ellos no es perfecto --- por ejemplo, "
"usando operaciones de archivo de bajo nivel como :func:`os.close` pueden "
"(accidental o maliciosamente) afectar a los archivos abiertos del otro.  "
"Debido a la forma en que se comparten las extensiones entre "
"(sub)intérpretes, algunas extensiones pueden no funcionar correctamente; "
"esto es especialmente probable cuando se utiliza inicialización monofásica o "
"variables globales (estáticas). Es posible insertar objetos creados en un "
"subintérprete en un espacio de nombres de otro (sub)intérprete; esto debe "
"evitarse si es posible."

#: ../../c-api/init.rst:1872
msgid ""
"Special care should be taken to avoid sharing user-defined functions, "
"methods, instances or classes between sub-interpreters, since import "
"operations executed by such objects may affect the wrong (sub-)interpreter's "
"dictionary of loaded modules. It is equally important to avoid sharing "
"objects from which the above are reachable."
msgstr ""
"Debe tenerse especial cuidado en evitar compartir funciones, métodos, "
"instancias o clases definidas por el usuario entre subinterpretadores, ya "
"que las operaciones de importación ejecutadas por dichos objetos pueden "
"afectar al diccionario de módulos cargados del (sub)intérprete equivocado. "
"Es igualmente importante evitar compartir objetos desde los que se pueda "
"acceder a los anteriores."

#: ../../c-api/init.rst:1878
msgid ""
"Also note that combining this functionality with ``PyGILState_*`` APIs is "
"delicate, because these APIs assume a bijection between Python thread states "
"and OS-level threads, an assumption broken by the presence of sub-"
"interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""
"Также обратите внимание, что объединение этой функциональности с API "
"PyGILState_*`` является деликатным, поскольку эти API предполагают биекцию "
"между состояниями потоков Python и потоками уровня ОС, что нарушается "
"наличием субинтерпретаторов. Настоятельно рекомендуется не переключать "
"подинтерпретаторы между парой совпадающих вызовов :c:func:"
"`PyGILState_Ensure` и :c:func:`PyGILState_Release`. Более того, расширения "
"(такие как :mod:`ctypes`), использующие эти API для разрешения вызова кода "
"Python из потоков, созданных не на Python, вероятно, будут нарушены при "
"использовании субинтерпретаторов."

#: ../../c-api/init.rst:1889
msgid "Asynchronous Notifications"
msgstr "Notificaciones asíncronas"

#: ../../c-api/init.rst:1891
msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void pointer argument."
msgstr ""
"Se proporciona un mecanismo para realizar notificaciones asíncronas al hilo "
"principal del intérprete.  Estas notificaciones toman la forma de un puntero "
"de función y un argumento de puntero void."

#: ../../c-api/init.rst:1898
msgid ""
"Schedule a function to be called from the main interpreter thread.  On "
"success, ``0`` is returned and *func* is queued for being called in the main "
"thread.  On failure, ``-1`` is returned without setting any exception."
msgstr ""
"Programa una función para llamarla desde el hilo principal del intérprete.  "
"En caso de éxito, se devuelve ``0`` y *func* se pone en cola para que la "
"llamen en el hilo principal.  En caso de fallo, se devuelve ``-1`` sin "
"establecer ninguna excepción."

#: ../../c-api/init.rst:1902
msgid ""
"When successfully queued, *func* will be *eventually* called from the main "
"interpreter thread with the argument *arg*.  It will be called "
"asynchronously with respect to normally running Python code, but with both "
"these conditions met:"
msgstr ""
"Cuando se pone en cola con éxito, *func* será *eventualmente* llamada desde "
"el hilo principal del intérprete con el argumento *arg*.  Será llamada "
"asíncronamente con respecto al código Python que se ejecuta normalmente, "
"pero con ambas condiciones cumplidas:"

#: ../../c-api/init.rst:1907
msgid "on a :term:`bytecode` boundary;"
msgstr "en un límite :term:`bytecode`;"

#: ../../c-api/init.rst:1908
msgid ""
"with the main thread holding the :term:`global interpreter lock` (*func* can "
"therefore use the full C API)."
msgstr ""
"con el hilo principal manteniendo el :term:`global interpreter lock` (*func* "
"puede por tanto usar la API C completa)."

#: ../../c-api/init.rst:1911
msgid ""
"*func* must return ``0`` on success, or ``-1`` on failure with an exception "
"set.  *func* won't be interrupted to perform another asynchronous "
"notification recursively, but it can still be interrupted to switch threads "
"if the global interpreter lock is released."
msgstr ""
"*func* debe devolver ``0`` en caso de éxito, o ``-1`` en caso de fallo con "
"una excepción establecida.  *func* no se interrumpirá para realizar otra "
"notificación asíncrona de forma recursiva, pero aún se puede interrumpir "
"para cambiar de hilo si se libera el bloqueo global del intérprete."

#: ../../c-api/init.rst:1916
msgid ""
"This function doesn't need a current thread state to run, and it doesn't "
"need the global interpreter lock."
msgstr ""
"Esta función no necesita un estado de hilo actual para ejecutarse, y no "
"necesita el bloqueo global del intérprete."

#: ../../c-api/init.rst:1919
msgid ""
"To call this function in a subinterpreter, the caller must hold the GIL. "
"Otherwise, the function *func* can be scheduled to be called from the wrong "
"interpreter."
msgstr ""
"Para llamar a esta función en un subinterpretador, caller debe poseer el "
"GIL. De lo contrario, la función *func* se puede programar para llamarla "
"desde el intérprete equivocado."

#: ../../c-api/init.rst:1924
msgid ""
"This is a low-level function, only useful for very special cases. There is "
"no guarantee that *func* will be called as quick as possible.  If the main "
"thread is busy executing a system call, *func* won't be called before the "
"system call returns.  This function is generally **not** suitable for "
"calling Python code from arbitrary C threads.  Instead, use the :ref:"
"`PyGILState API<gilstate>`."
msgstr ""
"Esta es una función de bajo nivel, sólo útil para casos muy especiales. No "
"hay garantía de que *func* se llame tan rápido como sea posible. Si el hilo "
"principal está ocupado ejecutando una llamada al sistema, *func* no se "
"llamará antes de que la llamada al sistema retorne. Esta función "
"generalmente **no** es adecuada para llamar código Python desde hilos C "
"arbitrarios. En su lugar, usa :ref:`PyGILState API<gilstate>`."

#: ../../c-api/init.rst:1933
msgid ""
"If this function is called in a subinterpreter, the function *func* is now "
"scheduled to be called from the subinterpreter, rather than being called "
"from the main interpreter. Each subinterpreter now has its own list of "
"scheduled calls."
msgstr ""
"Si se llama a esta función en un subinterpretador, la función *func* está "
"ahora programada para llamarse desde el subinterpretador, en lugar de "
"llamarse desde el intérprete principal. Cada subintérprete tiene ahora su "
"propia lista de llamadas programadas."

#: ../../c-api/init.rst:1942
msgid "Profiling and Tracing"
msgstr "Perfiles y seguimiento"

#: ../../c-api/init.rst:1947
msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""
"El intérprete de Python proporciona soporte de bajo nivel para adjuntar "
"facilidades de perfilado y rastreo de ejecución.  Se utilizan para "
"herramientas de perfilado, depuración y análisis de cobertura."

#: ../../c-api/init.rst:1951
msgid ""
"This C interface allows the profiling or tracing code to avoid the overhead "
"of calling through Python-level callable objects, making a direct C function "
"call instead.  The essential attributes of the facility have not changed; "
"the interface allows trace functions to be installed per-thread, and the "
"basic events reported to the trace function are the same as had been "
"reported to the Python-level trace functions in previous versions."
msgstr ""
"Esta interfaz C permite que el código de perfilado o rastreo evite la "
"sobrecarga de llamar a través de objetos invocables a nivel de Python, "
"realizando en su lugar una llamada directa a una función C.  Los atributos "
"esenciales de la instalación no han cambiado; la interfaz permite que las "
"funciones de rastreo se instalen por hilo, y los eventos básicos reportados "
"a la función de rastreo son los mismos que se habían informado a las "
"funciones de rastreo a nivel de Python en versiones anteriores."

#: ../../c-api/init.rst:1961
msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :c:data:`PyTrace_CALL`, :c:"
"data:`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:data:`PyTrace_RETURN`, :"
"c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION`, :c:data:"
"`PyTrace_C_RETURN`, or :c:data:`PyTrace_OPCODE`, and *arg* depends on the "
"value of *what*:"
msgstr ""
"Тип функции трассировки, зарегистрированной с помощью :c:func:"
"`PyEval_SetProfile` и :c:func:`PyEval_SetTrace`. Первый параметр — это "
"объект, передаваемый в функцию регистрации как *obj*, *frame* — объект "
"кадра, к которому относится событие, *what* — одна из констант :c:data:"
"`PyTrace_CALL`, :c:data :`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:"
"data:`PyTrace_RETURN`, :c:data:`PyTrace_C_CALL`, :c:data:"
"`PyTrace_C_EXCEPTION`, :c:data:`PyTrace_C_RETURN`, или :c:data:"
"`PyTrace_OPCODE`, а *arg* зависит от значения *what*:"

#: ../../c-api/init.rst:1970
msgid "Value of *what*"
msgstr "Valor de *what*"

#: ../../c-api/init.rst:1970
msgid "Meaning of *arg*"
msgstr "Significado de *arg*"

#: ../../c-api/init.rst:1972
msgid ":c:data:`PyTrace_CALL`"
msgstr ":c:data:`PyTrace_CALL`"

#: ../../c-api/init.rst:1972 ../../c-api/init.rst:1977
#: ../../c-api/init.rst:1988
msgid "Always :c:data:`Py_None`."
msgstr "Siempre :c:data:`Py_None`."

#: ../../c-api/init.rst:1974
msgid ":c:data:`PyTrace_EXCEPTION`"
msgstr ":c:data:`PyTrace_EXCEPTION`"

#: ../../c-api/init.rst:1974
msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr "Información de excepción devuelta por :func:`sys.exc_info`."

#: ../../c-api/init.rst:1977
msgid ":c:data:`PyTrace_LINE`"
msgstr ":c:data:`PyTrace_LINE`"

#: ../../c-api/init.rst:1979
msgid ":c:data:`PyTrace_RETURN`"
msgstr ":c:data:`PyTrace_RETURN`"

#: ../../c-api/init.rst:1979
msgid ""
"Value being returned to the caller, or ``NULL`` if caused by an exception."
msgstr "Valor que se devuelve al caller, o ``NULL`` si lo causa una excepción."

#: ../../c-api/init.rst:1982
msgid ":c:data:`PyTrace_C_CALL`"
msgstr ":c:data:`PyTrace_C_CALL`"

#: ../../c-api/init.rst:1982 ../../c-api/init.rst:1984
#: ../../c-api/init.rst:1986
msgid "Function object being called."
msgstr "Objeto de función al que se llama."

#: ../../c-api/init.rst:1984
msgid ":c:data:`PyTrace_C_EXCEPTION`"
msgstr ":c:data:`PyTrace_C_EXCEPTION`"

#: ../../c-api/init.rst:1986
msgid ":c:data:`PyTrace_C_RETURN`"
msgstr ":c:data:`PyTrace_C_RETURN`"

#: ../../c-api/init.rst:1988
msgid ":c:data:`PyTrace_OPCODE`"
msgstr ":c:data:`PyTrace_OPCODE`"

#: ../../c-api/init.rst:1993
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""
"El valor del parámetro *what* a una función :c:type:`Py_tracefunc` cuando se "
"informa de una nueva llamada a una función o método, o de una nueva entrada "
"en un generador. Tener en cuenta que la creación del iterador para una "
"función generadora no se notifica, ya que no hay transferencia de control al "
"código de bytes de Python en el marco correspondiente."

#: ../../c-api/init.rst:2002
msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""
"El valor del parámetro *what* a una función :c:type:`Py_tracefunc` cuando se "
"ha lanzado una excepción.  Se llama la función callback con este valor para "
"*what* cuando después de que cualquier bytecode se procese después de lo "
"cual la excepción se establece dentro del frame que está siendo ejecutado.  "
"El efecto de esto es que como la propagación de la excepción causa que la "
"pila de Python se desenrolle, la llamada de retorno es llamada al volver a "
"cada frame mientras la excepción se propaga.  Sólo las funciones de rastreo "
"reciben estos sucesos; no son necesarios para el perfilador."

#: ../../c-api/init.rst:2013
msgid ""
"The value passed as the *what* parameter to a :c:type:`Py_tracefunc` "
"function (but not a profiling function) when a line-number event is being "
"reported. It may be disabled for a frame by setting :attr:`~frame."
"f_trace_lines` to *0* on that frame."
msgstr ""
"Значение передается как параметр *what* в функцию :c:type:`Py_tracefunc` (но "
"не в функцию профилирования), когда сообщается о событии с номером строки. "
"Его можно отключить для кадра, установив для :attr:`~frame.f_trace_lines` "
"значение *0* в этом кадре."

#: ../../c-api/init.rst:2021
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is about to return."
msgstr ""
"El valor del parámetro *what* para las funciones :c:type:`Py_tracefunc` "
"cuando una llamada está a punto de regresar."

#: ../../c-api/init.rst:2027
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""
"El valor para el parámetro *what* a las funciones :c:type:`Py_tracefunc` "
"cuando una función C está a punto de ser llamada."

#: ../../c-api/init.rst:2033
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""
"El valor del parámetro *what* para las funciones :c:type:`Py_tracefunc` "
"cuando una función C ha lanzado una excepción."

#: ../../c-api/init.rst:2039
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""
"El valor del parámetro *what* para las funciones :c:type:`Py_tracefunc` "
"cuando una función C ha devuelto."

#: ../../c-api/init.rst:2045
msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions (but "
"not profiling functions) when a new opcode is about to be executed.  This "
"event is not emitted by default: it must be explicitly requested by setting :"
"attr:`~frame.f_trace_opcodes` to *1* on the frame."
msgstr ""
"Значение параметра *what* для функций :c:type:`Py_tracefunc` (но не для "
"функций профилирования), когда новый код операции должен быть выполнен. Это "
"событие не генерируется по умолчанию: его необходимо явно запросить, "
"установив для :attr:`~frame.f_trace_opcodes` значение *1* в кадре."

#: ../../c-api/init.rst:2053
msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or ``NULL``.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except :c:data:"
"`PyTrace_LINE` :c:data:`PyTrace_OPCODE` and :c:data:`PyTrace_EXCEPTION`."
msgstr ""
"Установите для функции профилировщика значение *func*. Параметр *obj* "
"передается функции в качестве первого параметра и может быть любым объектом "
"Python или ``NULL``. Если функции профиля необходимо сохранять состояние, "
"использование разных значений *obj* для каждого потока обеспечивает удобное "
"и потокобезопасное место для его хранения. Функция профиля вызывается для "
"всех отслеживаемых событий, кроме :c:data:`PyTrace_LINE` :c:data:"
"`PyTrace_OPCODE` и :c:data:`PyTrace_EXCEPTION`."

#: ../../c-api/init.rst:2060
msgid "See also the :func:`sys.setprofile` function."
msgstr "См. также функцию :func:`sys.setprofile`."

#: ../../c-api/init.rst:2062 ../../c-api/init.rst:2069
#: ../../c-api/init.rst:2088 ../../c-api/init.rst:2095
msgid "The caller must hold the :term:`GIL`."
msgstr "Caller debe poseer el :término:`GIL`."

#: ../../c-api/init.rst:2066
msgid ""
"Like :c:func:`PyEval_SetProfile` but sets the profile function in all "
"running threads belonging to the current interpreter instead of the setting "
"it only on the current thread."
msgstr ""
"Подобно :c:func:`PyEval_SetProfile`, но устанавливает функцию профиля во "
"всех запущенных потоках, принадлежащих текущему интерпретатору, а не "
"устанавливает ее только в текущем потоке."

#: ../../c-api/init.rst:2071
msgid ""
"As :c:func:`PyEval_SetProfile`, this function ignores any exceptions raised "
"while setting the profile functions in all threads."
msgstr ""
"Как и :c:func:`PyEval_SetProfile`, эта функция игнорирует любые исключения, "
"возникающие при настройке функций профиля во всех потоках."

#: ../../c-api/init.rst:2079
msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events and per-opcode events, but does not receive any event related to C "
"function objects being called.  Any trace function registered using :c:func:"
"`PyEval_SetTrace` will not receive :c:data:`PyTrace_C_CALL`, :c:data:"
"`PyTrace_C_EXCEPTION` or :c:data:`PyTrace_C_RETURN` as a value for the "
"*what* parameter."
msgstr ""
"Установите для функции трассировки значение *func*. Это похоже на :c:func:"
"`PyEval_SetProfile`, за исключением того, что функция трассировки получает "
"события номера строки и события для каждого кода операции, но не получает "
"никаких событий, связанных с вызываемыми объектами функции C. Любая функция "
"трассировки, зарегистрированная с использованием :c:func:`PyEval_SetTrace`, "
"не получит :c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION` или :c:"
"data:`PyTrace_C_RETURN` в качестве значения для *what* параметр."

#: ../../c-api/init.rst:2086
msgid "See also the :func:`sys.settrace` function."
msgstr "См. также функцию :func:`sys.settrace`."

#: ../../c-api/init.rst:2092
msgid ""
"Like :c:func:`PyEval_SetTrace` but sets the tracing function in all running "
"threads belonging to the current interpreter instead of the setting it only "
"on the current thread."
msgstr ""
"Подобно :c:func:`PyEval_SetTrace`, но устанавливает функцию трассировки во "
"всех запущенных потоках, принадлежащих текущему интерпретатору, а не только "
"в текущем потоке."

#: ../../c-api/init.rst:2097
msgid ""
"As :c:func:`PyEval_SetTrace`, this function ignores any exceptions raised "
"while setting the trace functions in all threads."
msgstr ""
"Как и :c:func:`PyEval_SetTrace`, эта функция игнорирует любые исключения, "
"возникающие при установке функций трассировки во всех потоках."

#: ../../c-api/init.rst:2103
msgid "Reference tracing"
msgstr "Отслеживание ссылок"

#: ../../c-api/init.rst:2109
msgid ""
"The type of the trace function registered using :c:func:"
"`PyRefTracer_SetTracer`. The first parameter is a Python object that has "
"been just created (when **event** is set to :c:data:`PyRefTracer_CREATE`) or "
"about to be destroyed (when **event** is set to :c:data:"
"`PyRefTracer_DESTROY`). The **data** argument is the opaque pointer that was "
"provided when :c:func:`PyRefTracer_SetTracer` was called."
msgstr ""
"Тип функции трассировки, зарегистрированной с помощью :c:func:"
"`PyRefTracer_SetTracer`. Первый параметр — это объект Python, который только "
"что был создан (когда для **event** установлено значение :c:data:"
"`PyRefTracer_CREATE`) или собирается быть уничтоженным (когда для **event** "
"установлено значение :c:data). :`PyRefTracer_DESTROY`). Аргумент **data** — "
"это непрозрачный указатель, который был предоставлен при вызове :c:func:"
"`PyRefTracer_SetTracer`."

#: ../../c-api/init.rst:2119
msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been created."
msgstr ""
"Значение параметра *event* для функции :c:type:`PyRefTracer` при создании "
"объекта Python."

#: ../../c-api/init.rst:2124
msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been destroyed."
msgstr ""
"Значение параметра *event* для функции :c:type:`PyRefTracer`, когда объект "
"Python был уничтожен."

#: ../../c-api/init.rst:2129
msgid ""
"Register a reference tracer function. The function will be called when a new "
"Python has been created or when an object is going to be destroyed. If "
"**data** is provided it must be an opaque pointer that will be provided when "
"the tracer function is called. Return ``0`` on success. Set an exception and "
"return ``-1`` on error."
msgstr ""
"Зарегистрируйте функцию трассировки ссылок. Функция будет вызываться, когда "
"будет создан новый Python или когда объект будет уничтожен. Если указаны "
"**данные**, это должен быть непрозрачный указатель, который будет "
"предоставлен при вызове функции трассировки. Верните ``0`` в случае успеха. "
"Установите исключение и возвращайте ``-1`` в случае ошибки."

#: ../../c-api/init.rst:2135
msgid ""
"Not that tracer functions **must not** create Python objects inside or "
"otherwise the call will be re-entrant. The tracer also **must not** clear "
"any existing exception or set an exception.  The GIL will be held every time "
"the tracer function is called."
msgstr ""

#: ../../c-api/init.rst:2140 ../../c-api/init.rst:2151
msgid "The GIL must be held when calling this function."
msgstr ""

#: ../../c-api/init.rst:2146
msgid ""
"Get the registered reference tracer function and the value of the opaque "
"data pointer that was registered when :c:func:`PyRefTracer_SetTracer` was "
"called. If no tracer was registered this function will return NULL and will "
"set the **data** pointer to NULL."
msgstr ""
"Получите зарегистрированную функцию трассировки ссылок и значение "
"непрозрачного указателя данных, который был зарегистрирован при вызове :c:"
"func:`PyRefTracer_SetTracer`. Если трассировщик не был зарегистрирован, эта "
"функция вернет NULL и установит указатель **data** в NULL."

#: ../../c-api/init.rst:2158
msgid "Advanced Debugger Support"
msgstr "Depurador avanzado"

#: ../../c-api/init.rst:2163
msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""
"Estas funciones sólo están pensadas para ser utilizadas por herramientas de "
"depuración avanzadas."

#: ../../c-api/init.rst:2168
msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""
"Devuelve el objeto de estado del intérprete que encabeza la lista de todos "
"los objetos de este tipo."

#: ../../c-api/init.rst:2173
msgid "Return the main interpreter state object."
msgstr "Devuelve el objeto de estado del intérprete principal."

#: ../../c-api/init.rst:2178
msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""
"Devuelve el siguiente objeto de estado del intérprete después de *interp* de "
"la lista de todos esos objetos."

#: ../../c-api/init.rst:2184
msgid ""
"Return the pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""
"Devuelve el puntero al primer objeto :c:type:`PyThreadState` de la lista de "
"hilos asociados al intérprete *interp*."

#: ../../c-api/init.rst:2190
msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""
"Devuelve el siguiente objeto de estado del hilo después de *tstate* de la "
"lista de todos los objetos pertenecientes al mismo objeto :c:type:"
"`PyInterpreterState`."

#: ../../c-api/init.rst:2197
msgid "Thread Local Storage Support"
msgstr "Soporte de almacenamiento local de hilos"

#: ../../c-api/init.rst:2201
msgid ""
"The Python interpreter provides low-level support for thread-local storage "
"(TLS) which wraps the underlying native TLS implementation to support the "
"Python-level thread local storage API (:class:`threading.local`).  The "
"CPython C level APIs are similar to those offered by pthreads and Windows: "
"use a thread key and functions to associate a :c:expr:`void*` value per "
"thread."
msgstr ""
"Интерпретатор Python обеспечивает низкоуровневую поддержку локального "
"хранилища потоков (TLS), которое оборачивает базовую собственную реализацию "
"TLS для поддержки API локального хранилища потоков уровня Python (:class:"
"`threading.local`). API-интерфейсы уровня C CPython аналогичны API-"
"интерфейсам, предлагаемым pthreads и Windows: используйте ключ потока и "
"функции для связывания значения :c:expr:`void*` с каждым потоком."

#: ../../c-api/init.rst:2208
msgid ""
"The GIL does *not* need to be held when calling these functions; they supply "
"their own locking."
msgstr ""
"El GIL *no* necesita mantenerse cuando se llama a estas funciones; ellas "
"proveen su propio bloqueo."

#: ../../c-api/init.rst:2211
msgid ""
"Note that :file:`Python.h` does not include the declaration of the TLS APIs, "
"you need to include :file:`pythread.h` to use thread-local storage."
msgstr ""
"Tener en cuenta que :file:`Python.h` no incluye la declaración de las APIs "
"TLS, se necesita incluir :file:`pythread.h` para usar el almacenamiento "
"thread-local."

#: ../../c-api/init.rst:2215
msgid ""
"None of these API functions handle memory management on behalf of the :c:"
"expr:`void*` values.  You need to allocate and deallocate them yourself. If "
"the :c:expr:`void*` values happen to be :c:expr:`PyObject*`, these functions "
"don't do refcount operations on them either."
msgstr ""
"Ни одна из этих функций API не обрабатывает управление памятью от имени "
"значений :c:expr:`void*`. Вам нужно выделить и освободить их самостоятельно. "
"Если значения :c:expr:`void*` оказались :c:expr:`PyObject*`, эти функции "
"также не выполняют над ними операции подсчета ссылок."

#: ../../c-api/init.rst:2223
msgid "Thread Specific Storage (TSS) API"
msgstr "API de almacenamiento específico de subprocesos (TSS)"

#: ../../c-api/init.rst:2225
msgid ""
"TSS API is introduced to supersede the use of the existing TLS API within "
"the CPython interpreter.  This API uses a new type :c:type:`Py_tss_t` "
"instead of :c:expr:`int` to represent thread keys."
msgstr ""
"TSS API заменяет использование существующего TLS API в интерпретаторе "
"CPython. Этот API использует новый тип :c:type:`Py_tss_t` вместо :c:expr:"
"`int` для представления ключей потока."

#: ../../c-api/init.rst:2231
msgid "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"
msgstr "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"

#: ../../c-api/init.rst:2236
msgid ""
"This data structure represents the state of a thread key, the definition of "
"which may depend on the underlying TLS implementation, and it has an "
"internal field representing the key's initialization state.  There are no "
"public members in this structure."
msgstr ""
"Esta estructura de datos representa el estado de una clave de hilo, cuya "
"definición puede depender de la implementación TLS subyacente, y tiene un "
"campo interno que representa el estado de inicialización de la clave.  No "
"hay miembros públicos en esta estructura."

#: ../../c-api/init.rst:2241
msgid ""
"When :ref:`Py_LIMITED_API <stable>` is not defined, static allocation of "
"this type by :c:macro:`Py_tss_NEEDS_INIT` is allowed."
msgstr ""
"Cuando :ref:`Py_LIMITED_API <stable>` no está definido, se permite la "
"asignación estática de este tipo por :c:macro:`Py_tss_NEEDS_INIT`."

#: ../../c-api/init.rst:2247
msgid ""
"This macro expands to the initializer for :c:type:`Py_tss_t` variables. Note "
"that this macro won't be defined with :ref:`Py_LIMITED_API <stable>`."
msgstr ""
"Esta macro se expande al inicializador para variables :c:type:`Py_tss_t`. "
"Tener en cuenta que esta macro no se definirá con :ref:`Py_LIMITED_API "
"<stable>`."

#: ../../c-api/init.rst:2252
msgid "Dynamic Allocation"
msgstr "Asignación dinámica"

#: ../../c-api/init.rst:2254
msgid ""
"Dynamic allocation of the :c:type:`Py_tss_t`, required in extension modules "
"built with :ref:`Py_LIMITED_API <stable>`, where static allocation of this "
"type is not possible due to its implementation being opaque at build time."
msgstr ""
"Asignación dinámica de :c:type:`Py_tss_t`, necesaria en módulos de extensión "
"construidos con :ref:`Py_LIMITED_API <stable>`, donde la asignación estática "
"de este tipo no es posible debido a que su implementación es opaca en tiempo "
"de construcción."

#: ../../c-api/init.rst:2261
msgid ""
"Return a value which is the same state as a value initialized with :c:macro:"
"`Py_tss_NEEDS_INIT`, or ``NULL`` in the case of dynamic allocation failure."
msgstr ""
"Devuelve un valor que es el mismo estado que un valor inicializado con :c:"
"macro:`Py_tss_NEEDS_INIT`, o ``NULL`` en caso de fallo de asignación "
"dinámica."

#: ../../c-api/init.rst:2268
msgid ""
"Free the given *key* allocated by :c:func:`PyThread_tss_alloc`, after first "
"calling :c:func:`PyThread_tss_delete` to ensure any associated thread locals "
"have been unassigned. This is a no-op if the *key* argument is ``NULL``."
msgstr ""
"Освободите данный *ключ*, выделенный :c:func:`PyThread_tss_alloc`, после "
"первого вызова :c:func:`PyThread_tss_delete`, чтобы убедиться, что все "
"связанные локальные переменные потока не назначены. Это пустая операция, "
"если аргумент *key* равен ``NULL``."

#: ../../c-api/init.rst:2274
msgid ""
"A freed key becomes a dangling pointer. You should reset the key to ``NULL``."
msgstr ""
"Освобожденная клавиша становится висячим указателем. Вам следует сбросить "
"ключ на ``NULL``."

#: ../../c-api/init.rst:2279
msgid "Methods"
msgstr "Métodos"

#: ../../c-api/init.rst:2281
msgid ""
"The parameter *key* of these functions must not be ``NULL``.  Moreover, the "
"behaviors of :c:func:`PyThread_tss_set` and :c:func:`PyThread_tss_get` are "
"undefined if the given :c:type:`Py_tss_t` has not been initialized by :c:"
"func:`PyThread_tss_create`."
msgstr ""
"El parámetro *key* de estas funciones no debe ser ``NULL``.  Además, los "
"comportamientos de :c:func:`PyThread_tss_set` y :c:func:`PyThread_tss_get` "
"son indefinidos si el :c:type:`Py_tss_t` dado no se ha inicializado por :c:"
"func:`PyThread_tss_create`."

#: ../../c-api/init.rst:2289
msgid ""
"Return a non-zero value if the given :c:type:`Py_tss_t` has been initialized "
"by :c:func:`PyThread_tss_create`."
msgstr ""
"Devuelve un valor distinto de cero si el :c:type:`Py_tss_t` dado se ha "
"inicializado por :c:func:`PyThread_tss_create`."

#: ../../c-api/init.rst:2295
msgid ""
"Return a zero value on successful initialization of a TSS key.  The behavior "
"is undefined if the value pointed to by the *key* argument is not "
"initialized by :c:macro:`Py_tss_NEEDS_INIT`.  This function can be called "
"repeatedly on the same key -- calling it on an already initialized key is a "
"no-op and immediately returns success."
msgstr ""
"Devuelve un valor cero en la inicialización correcta de una clave TSS.  El "
"comportamiento es indefinido si el valor apuntado por el argumento *key* no "
"se inicializa por :c:macro:`Py_tss_NEEDS_INIT`.  Se puede llamar esta "
"función de forma repetida sobre la misma clave -- llamarla sobre una clave "
"ya inicializada es un no-op e inmediatamente devuelve éxito."

#: ../../c-api/init.rst:2304
msgid ""
"Destroy a TSS key to forget the values associated with the key across all "
"threads, and change the key's initialization state to uninitialized.  A "
"destroyed key is able to be initialized again by :c:func:"
"`PyThread_tss_create`. This function can be called repeatedly on the same "
"key -- calling it on an already destroyed key is a no-op."
msgstr ""
"Destruir una clave TSS para olvidar los valores asociados a la clave en "
"todos los subprocesos y cambiar el estado de inicialización de la clave a no "
"inicializado.  Se puede reinicializar una clave destruida por :c:func:"
"`PyThread_tss_create`. Esta función se puede llamar repetidamente sobre la "
"misma clave -- llamarla sobre una clave ya destruida es un no-op."

#: ../../c-api/init.rst:2313
msgid ""
"Return a zero value to indicate successfully associating a :c:expr:`void*` "
"value with a TSS key in the current thread.  Each thread has a distinct "
"mapping of the key to a :c:expr:`void*` value."
msgstr ""
"Возвращает нулевое значение, чтобы указать успешное связывание значения :c:"
"expr:`void*` с ключом TSS в текущем потоке. Каждый поток имеет отдельное "
"сопоставление ключа со значением :c:expr:`void*`."

#: ../../c-api/init.rst:2320
msgid ""
"Return the :c:expr:`void*` value associated with a TSS key in the current "
"thread.  This returns ``NULL`` if no value is associated with the key in the "
"current thread."
msgstr ""
"Возвращает значение :c:expr:`void*`, связанное с ключом TSS в текущем "
"потоке. Это возвращает NULL, если с ключом в текущем потоке не связано "
"никакое значение."

#: ../../c-api/init.rst:2328
msgid "Thread Local Storage (TLS) API"
msgstr "API de almacenamiento local de hilos (TLS)"

#: ../../c-api/init.rst:2330
msgid ""
"This API is superseded by :ref:`Thread Specific Storage (TSS) API <thread-"
"specific-storage-api>`."
msgstr ""
"Esta API ha sido sustituida por :ref:`Thread Specific Storage (TSS) API "
"<thread-specific-storage-api>`."

#: ../../c-api/init.rst:2335
msgid ""
"This version of the API does not support platforms where the native TLS key "
"is defined in a way that cannot be safely cast to ``int``.  On such "
"platforms, :c:func:`PyThread_create_key` will return immediately with a "
"failure status, and the other TLS functions will all be no-ops on such "
"platforms."
msgstr ""
"Esta versión de la API no es compatible con plataformas en las que la clave "
"TLS nativa está definida de tal forma que no se puede convertir de forma "
"segura a ``int``.  En dichas plataformas, :c:func:`PyThread_create_key` "
"devolverá inmediatamente un estado de fallo, y las demás funciones TLS serán "
"todas no-ops en dichas plataformas."

#: ../../c-api/init.rst:2340
msgid ""
"Due to the compatibility problem noted above, this version of the API should "
"not be used in new code."
msgstr ""
"Debido al problema de compatibilidad señalado anteriormente, esta versión de "
"la API no debe utilizarse en un código nuevo."

#: ../../c-api/init.rst:2351
msgid "Synchronization Primitives"
msgstr "Примітиви синхронізації"

#: ../../c-api/init.rst:2353
msgid "The C-API provides a basic mutual exclusion lock."
msgstr "C-API обеспечивает базовую блокировку взаимного исключения."

#: ../../c-api/init.rst:2357
msgid ""
"A mutual exclusion lock.  The :c:type:`!PyMutex` should be initialized to "
"zero to represent the unlocked state.  For example::"
msgstr ""
"Блокировка взаимного исключения. :c:type:`!PyMutex` должен быть "
"инициализирован нулем, чтобы представлять разблокированное состояние. "
"Например::"

#: ../../c-api/init.rst:2360
msgid "PyMutex mutex = {0};"
msgstr "PyMutex mutex = {0};"

#: ../../c-api/init.rst:2362
msgid ""
"Instances of :c:type:`!PyMutex` should not be copied or moved.  Both the "
"contents and address of a :c:type:`!PyMutex` are meaningful, and it must "
"remain at a fixed, writable location in memory."
msgstr ""
"Экземпляры :c:type:`!PyMutex` не следует копировать или перемещать. И "
"содержимое, и адрес :c:type:`!PyMutex` имеют смысл, и они должны оставаться "
"в фиксированном, доступном для записи месте в памяти."

#: ../../c-api/init.rst:2368
msgid ""
"A :c:type:`!PyMutex` currently occupies one byte, but the size should be "
"considered unstable.  The size may change in future Python releases without "
"a deprecation period."
msgstr ""
"A :c:type:`!PyMutex` в настоящее время занимает один байт, но размер следует "
"считать нестабильным. Размер может измениться в будущих выпусках Python без "
"периода устаревания."

#: ../../c-api/init.rst:2376
msgid ""
"Lock mutex *m*.  If another thread has already locked it, the calling thread "
"will block until the mutex is unlocked.  While blocked, the thread will "
"temporarily release the :term:`GIL` if it is held."
msgstr ""

#: ../../c-api/init.rst:2384
msgid ""
"Unlock mutex *m*. The mutex must be locked --- otherwise, the function will "
"issue a fatal error."
msgstr ""
"Разблокировать мьютекс *m*. Мьютекс должен быть заблокирован — в противном "
"случае функция выдаст фатальную ошибку."

#: ../../c-api/init.rst:2392
msgid "Python Critical Section API"
msgstr "API критической секции Python"

#: ../../c-api/init.rst:2394
msgid ""
"The critical section API provides a deadlock avoidance layer on top of per-"
"object locks for :term:`free-threaded <free threading>` CPython.  They are "
"intended to replace reliance on the :term:`global interpreter lock`, and are "
"no-ops in versions of Python with the global interpreter lock."
msgstr ""
"API критической секции обеспечивает уровень предотвращения взаимоблокировок "
"поверх блокировок для каждого объекта для :term:`free-threaded <free "
"threading>` CPython. Они предназначены для замены использования :term:"
"`глобальной блокировки интерпретатора` и не используются в версиях Python с "
"глобальной блокировкой интерпретатора."

#: ../../c-api/init.rst:2399
msgid ""
"Critical sections are intended to be used for custom types implemented in C-"
"API extensions. They should generally not be used with built-in types like :"
"class:`list` and :class:`dict` because their public C-APIs already use "
"critical sections internally, with the notable exception of :c:func:"
"`PyDict_Next`, which requires critical section to be acquired externally."
msgstr ""

#: ../../c-api/init.rst:2406
msgid ""
"Critical sections avoid deadlocks by implicitly suspending active critical "
"sections, hence, they do not provide exclusive access such as provided by "
"traditional locks like :c:type:`PyMutex`.  When a critical section is "
"started, the per-object lock for the object is acquired. If the code "
"executed inside the critical section calls C-API functions then it can "
"suspend the critical section thereby releasing the per-object lock, so other "
"threads can acquire the per-object lock for the same object."
msgstr ""

#: ../../c-api/init.rst:2414
msgid ""
"The functions and structs used by the macros are exposed for cases where C "
"macros are not available. They should only be used as in the given macro "
"expansions. Note that the sizes and contents of the structures may change in "
"future Python versions."
msgstr ""
"Функции и структуры, используемые макросами, доступны в тех случаях, когда "
"макросы C недоступны. Их следует использовать только так, как в данных "
"макрорасширениях. Обратите внимание, что размеры и содержимое структур могут "
"измениться в будущих версиях Python."

#: ../../c-api/init.rst:2421
msgid ""
"Operations that need to lock two objects at once must use :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION2`.  You *cannot* use nested critical sections to "
"lock more than one object at once, because the inner critical section may "
"suspend the outer critical sections.  This API does not provide a way to "
"lock more than two objects at once."
msgstr ""
"Операции, которым необходимо заблокировать два объекта одновременно, должны "
"использовать :c:macro:`Py_BEGIN_CRITICAL_SECTION2`. Вы *не можете* "
"использовать вложенные критические секции для одновременной блокировки более "
"чем одного объекта, поскольку внутренняя критическая секция может "
"приостановить работу внешних критических секций. Этот API не предоставляет "
"возможности заблокировать более двух объектов одновременно."

#: ../../c-api/init.rst:2427
msgid "Example usage::"
msgstr "Ejemplo de uso::"

#: ../../c-api/init.rst:2429
msgid ""
"static PyObject *\n"
"set_field(MyObject *self, PyObject *value)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"
msgstr ""
"static PyObject *\n"
"set_field(MyObject *self, PyObject *value)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"

#: ../../c-api/init.rst:2438
msgid ""
"In the above example, :c:macro:`Py_SETREF` calls :c:macro:`Py_DECREF`, which "
"can call arbitrary code through an object's deallocation function.  The "
"critical section API avoids potential deadlocks due to reentrancy and lock "
"ordering by allowing the runtime to temporarily suspend the critical section "
"if the code triggered by the finalizer blocks and calls :c:func:"
"`PyEval_SaveThread`."
msgstr ""
"В приведенном выше примере :c:macro:`Py_SETREF` вызывает :c:macro:"
"`Py_DECREF`, который может вызывать произвольный код через функцию "
"освобождения объекта. API критической секции позволяет избежать "
"потенциальных взаимоблокировок из-за повторного входа и порядка блокировок, "
"позволяя среде выполнения временно приостанавливать критическую секцию, если "
"код, запущенный финализатором, блокируется и вызывает :c:func:"
"`PyEval_SaveThread`."

#: ../../c-api/init.rst:2446
msgid ""
"Acquires the per-object lock for the object *op* and begins a critical "
"section."
msgstr ""
"Получает блокировку для каждого объекта *op* и начинает критическую секцию."

#: ../../c-api/init.rst:2449 ../../c-api/init.rst:2463
#: ../../c-api/init.rst:2478 ../../c-api/init.rst:2492
msgid "In the free-threaded build, this macro expands to::"
msgstr "В свободнопоточной сборке этот макрос расширяется до:"

#: ../../c-api/init.rst:2451
msgid ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"
msgstr ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"

#: ../../c-api/init.rst:2455 ../../c-api/init.rst:2484
msgid "In the default build, this macro expands to ``{``."
msgstr "В сборке по умолчанию этот макрос расширяется до ``{``."

#: ../../c-api/init.rst:2461
msgid "Ends the critical section and releases the per-object lock."
msgstr "Завершает критическую секцию и снимает блокировку каждого объекта."

#: ../../c-api/init.rst:2465
msgid ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"
msgstr ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"

#: ../../c-api/init.rst:2468 ../../c-api/init.rst:2497
msgid "In the default build, this macro expands to ``}``."
msgstr "В сборке по умолчанию этот макрос расширяется до ``}``."

#: ../../c-api/init.rst:2474
msgid ""
"Acquires the per-objects locks for the objects *a* and *b* and begins a "
"critical section.  The locks are acquired in a consistent order (lowest "
"address first) to avoid lock ordering deadlocks."
msgstr ""
"Получает блокировки для объектов *a* и *b* и начинает критическую секцию. "
"Блокировки устанавливаются в последовательном порядке (сначала наименьший "
"адрес), чтобы избежать взаимоблокировок в порядке блокировок."

#: ../../c-api/init.rst:2480
msgid ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"
msgstr ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"

#: ../../c-api/init.rst:2490
msgid "Ends the critical section and releases the per-object locks."
msgstr "Завершает критическую секцию и снимает блокировки для каждого объекта."

#: ../../c-api/init.rst:2494
msgid ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"
msgstr ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"

#: ../../c-api/init.rst:350
msgid "PyEval_InitThreads()"
msgstr "PyEval_InitThreads()"

#: ../../c-api/init.rst:350
msgid "modules (in module sys)"
msgstr "modules (in module sys)"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:700
msgid "path (in module sys)"
msgstr "path (в модуле sys)"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:700 ../../c-api/init.rst:1166
#: ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "module"
msgstr "módulo"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "builtins"
msgstr "builtins"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "__main__"
msgstr "__main__"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "sys"
msgstr "sys"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:700
msgid "search"
msgstr "wyszukiwanie"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:700
msgid "path"
msgstr "ścieżka"

#: ../../c-api/init.rst:350 ../../c-api/init.rst:1753 ../../c-api/init.rst:1806
msgid "Py_FinalizeEx (C function)"
msgstr "Py_FinalizeEx (C функция)"

#: ../../c-api/init.rst:566
msgid "Py_Initialize()"
msgstr "Py_Initialize()"

#: ../../c-api/init.rst:566 ../../c-api/init.rst:798
msgid "main()"
msgstr "main()"

#: ../../c-api/init.rst:566
msgid "Py_GetPath()"
msgstr "Py_GetPath()"

#: ../../c-api/init.rst:679
msgid "executable (in module sys)"
msgstr "executable (in module sys)"

#: ../../c-api/init.rst:733 ../../c-api/init.rst:775 ../../c-api/init.rst:789
msgid "version (in module sys)"
msgstr "version (in module sys)"

#: ../../c-api/init.rst:745
msgid "platform (in module sys)"
msgstr "platform (in module sys)"

#: ../../c-api/init.rst:762
msgid "copyright (in module sys)"
msgstr "copyright (in module sys)"

#: ../../c-api/init.rst:798
msgid "Py_FatalError()"
msgstr "Py_FatalError()"

#: ../../c-api/init.rst:798
msgid "argv (in module sys)"
msgstr "argv (in module sys)"

#: ../../c-api/init.rst:918
msgid "global interpreter lock"
msgstr "bloqueo global del intérprete"

#: ../../c-api/init.rst:918
msgid "interpreter lock"
msgstr "interpreter lock"

#: ../../c-api/init.rst:918
msgid "lock, interpreter"
msgstr "lock, interpreter"

#: ../../c-api/init.rst:931
msgid "setswitchinterval (in module sys)"
msgstr "setswitchinterval (in module sys)"

#: ../../c-api/init.rst:940
msgid "PyThreadState (C type)"
msgstr "PyThreadState (тип C)"

#: ../../c-api/init.rst:966
msgid "Py_BEGIN_ALLOW_THREADS (C macro)"
msgstr "Py_BEGIN_ALLOW_THREADS (C макрос)"

#: ../../c-api/init.rst:966
msgid "Py_END_ALLOW_THREADS (C macro)"
msgstr "Py_END_ALLOW_THREADS (C макрос)"

#: ../../c-api/init.rst:982
msgid "PyEval_RestoreThread (C function)"
msgstr "PyEval_RestoreThread (C функция)"

#: ../../c-api/init.rst:982
msgid "PyEval_SaveThread (C function)"
msgstr "PyEval_SaveThread (C функция)"

#: ../../c-api/init.rst:1144
msgid "PyEval_AcquireThread()"
msgstr "PyEval_AcquireThread()"

#: ../../c-api/init.rst:1144
msgid "PyEval_ReleaseThread()"
msgstr "PyEval_ReleaseThread()"

#: ../../c-api/init.rst:1144
msgid "PyEval_SaveThread()"
msgstr "PyEval_SaveThread()"

#: ../../c-api/init.rst:1144
msgid "PyEval_RestoreThread()"
msgstr "PyEval_RestoreThread()"

#: ../../c-api/init.rst:1166
msgid "_thread"
msgstr "_thread"

#: ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "stdout (in module sys)"
msgstr "stdout (in module sys)"

#: ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "stderr (in module sys)"
msgstr "stderr (in module sys)"

#: ../../c-api/init.rst:1689 ../../c-api/init.rst:1788
msgid "stdin (in module sys)"
msgstr "stdin (in module sys)"

#: ../../c-api/init.rst:1753
msgid "Py_Initialize (C function)"
msgstr "Py_Initialize (C функция)"

#: ../../c-api/init.rst:1783
msgid "close (in module os)"
msgstr "close (in module os)"
