# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/exceptions.rst:8
msgid "Exception Handling"
msgstr "Gestión de excepciones"

#: ../../c-api/exceptions.rst:10
msgid ""
"The functions described in this chapter will let you handle and raise Python "
"exceptions.  It is important to understand some of the basics of Python "
"exception handling.  It works somewhat like the POSIX :c:data:`errno` "
"variable: there is a global indicator (per thread) of the last error that "
"occurred.  Most C API functions don't clear this on success, but will set it "
"to indicate the cause of the error on failure.  Most C API functions also "
"return an error indicator, usually ``NULL`` if they are supposed to return a "
"pointer, or ``-1`` if they return an integer (exception: the ``PyArg_*`` "
"functions return ``1`` for success and ``0`` for failure)."
msgstr ""
"Las funciones descritas en este capítulo te permitirán manejar y lanzar "
"excepciones de Python.  Es importante entender algunos de los fundamentos "
"del manejo de excepciones en Python.  Funciona algo así como la variable "
"POSIX :c:data:`errno`: hay un indicador global (por hilo) del último error "
"que ocurrió.  La mayoría de las funciones de la API de C no lo borran en "
"caso de éxito, pero lo activan para indicar la causa del error en caso de "
"fallo.  La mayoría de las funciones de la API de C también devuelven un "
"indicador de error, normalmente ``NULL`` si se supone que devuelven un "
"puntero, o ``-1`` si devuelven un entero (excepción: las funciones "
"``PyArg_*`` devuelven ``1`` en caso de éxito y ``0`` en caso de fallo)."

#: ../../c-api/exceptions.rst:20
msgid ""
"Concretely, the error indicator consists of three object pointers: the "
"exception's type, the exception's value, and the traceback object.  Any of "
"those pointers can be ``NULL`` if non-set (although some combinations are "
"forbidden, for example you can't have a non-``NULL`` traceback if the "
"exception type is ``NULL``)."
msgstr ""
"Concretamente, el indicador de error consta de tres punteros a objetos: el "
"tipo de la excepción, el valor de la excepción y el objeto traceback.  "
"Cualquiera de esos punteros puede ser ``NULL`` si no está establecido "
"(aunque algunas combinaciones están prohibidas, por ejemplo, no se puede "
"tener un traceback que no sea``NULL`` si el tipo de excepción es ``NULL``)."

#: ../../c-api/exceptions.rst:26
msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already "
"set it.  It is responsible for either handling the error and clearing the "
"exception or returning after cleaning up any resources it holds (such as "
"object references or memory allocations); it should *not* continue normally "
"if it is not prepared to handle the error.  If returning due to an error, it "
"is important to indicate to the caller that an error has been set.  If the "
"error is not handled or carefully propagated, additional calls into the "
"Python/C API may not behave as intended and may fail in mysterious ways."
msgstr ""
"Cuando una función debe fallar porque alguna función a la que llamó falló, "
"generalmente no establece el indicador de error; la función a la que llamó "
"ya lo estableció.  Es responsable de manejar el error y borrar la excepción "
"o volver después de limpiar cualquier recurso que tenga (como referencias a "
"objetos o asignaciones de memoria); \"no\" debería continuar normalmente si "
"no está preparada para manejar el error.  Si devuelve debido a un error, es "
"importante indicar a caller que se ha producido un error.  Si el error no es "
"manejado o propagado cuidadosamente, las llamadas adicionales a la API de "
"Python/C pueden no comportarse como se pretendía y pueden fallar de forma "
"misteriosa."

#: ../../c-api/exceptions.rst:37
msgid ""
"The error indicator is **not** the result of :func:`sys.exc_info`. The "
"former corresponds to an exception that is not yet caught (and is therefore "
"still propagating), while the latter returns an exception after it is caught "
"(and has therefore stopped propagating)."
msgstr ""
"El indicador de error **no** es el resultado de:func:`sys.exc_info`. El "
"primero corresponde a una excepción que aún no se detecta (y, por lo tanto, "
"aún se propaga), mientras que el segundo devuelve una excepción después de "
"que se detecta (y, por lo tanto, ha dejado de propagarse)."

#: ../../c-api/exceptions.rst:44
msgid "Printing and clearing"
msgstr "Impresión y limpieza"

#: ../../c-api/exceptions.rst:49
msgid ""
"Clear the error indicator.  If the error indicator is not set, there is no "
"effect."
msgstr ""
"Borre el indicador de error.  Si el indicador de error no está activado, no "
"se produce ningún efecto."

#: ../../c-api/exceptions.rst:55
msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error indicator. "
"**Unless** the error is a ``SystemExit``, in that case no traceback is "
"printed and the Python process will exit with the error code specified by "
"the ``SystemExit`` instance."
msgstr ""
"Imprime un rastreo estándar en ``sys.stderr`` y borra el indicador de error. "
"**A menos que** el error sea un ``SystemExit``, en ese caso no se imprime "
"ningún rastreo y el proceso Python saldrá con el código de error "
"especificado por la instancia ``SystemExit``."

#: ../../c-api/exceptions.rst:60
msgid ""
"Call this function **only** when the error indicator is set.  Otherwise it "
"will cause a fatal error!"
msgstr ""
"Llame a esta función **only** cuando el indicador de error esté activado.  "
"De lo contrario, provocará un error fatal."

#: ../../c-api/exceptions.rst:63
msgid ""
"If *set_sys_last_vars* is nonzero, the variable :data:`sys.last_exc` is set "
"to the printed exception. For backwards compatibility, the deprecated "
"variables :data:`sys.last_type`, :data:`sys.last_value` and :data:`sys."
"last_traceback` are also set to the type, value and traceback of this "
"exception, respectively."
msgstr ""
"Si *set_sys_last_vars* es distinto de cero, la variable :data:`sys.last_exc` "
"se asigna a la excepción impresa. Por compatibilidad con versiones "
"anteriores, las variables obsoletas :data:`sys.last_type`, :data:`sys."
"last_value` y :data:`sys.last_traceback` también se establecen al tipo, "
"valor y traza de esta excepción, respectivamente."

#: ../../c-api/exceptions.rst:69
msgid "The setting of :data:`sys.last_exc` was added."
msgstr "Se ha añadido la configuración de :data:`sys.last_exc`."

#: ../../c-api/exceptions.rst:75
msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr "Alias para ``PyErr_PrintEx(1)``."

#: ../../c-api/exceptions.rst:80
msgid ""
"Call :func:`sys.unraisablehook` using the current exception and *obj* "
"argument."
msgstr ""
"Llama a :func:`sys.unraisablehook` usando la excepción actual y el argumento "
"*obj*."

#: ../../c-api/exceptions.rst:83
msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to actually "
"raise the exception.  It is used, for example, when an exception occurs in "
"an :meth:`~object.__del__` method."
msgstr ""
"Esta función de utilidad imprime un mensaje de advertencia a ``sys.stderr`` "
"cuando se ha establecido una excepción pero es imposible que el intérprete "
"lance realmente la excepción.  Se utiliza, por ejemplo, cuando se produce "
"una excepción en un método de :meth:`~object.__del__`."

#: ../../c-api/exceptions.rst:88
msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. If possible, the repr of "
"*obj* will be printed in the warning message. If *obj* is ``NULL``, only the "
"traceback is printed."
msgstr ""
"La función se llama con un único argumento *obj* que identifica el contexto "
"en el que se produjo la excepción no calificable. Si es posible, la repr de "
"*obj* se imprimirá en el mensaje de advertencia. Si *obj* es ``NULL``, sólo "
"se imprime el rastreo."

#: ../../c-api/exceptions.rst:93
msgid "An exception must be set when calling this function."
msgstr "Debe establecerse una excepción al llamar a esta función."

#: ../../c-api/exceptions.rst:95
msgid "Print a traceback. Print only traceback if *obj* is ``NULL``."
msgstr "Imprime un traceback. Imprime sólo un traceback si *obj* es ``NULL``."

#: ../../c-api/exceptions.rst:98
msgid "Use :func:`sys.unraisablehook`."
msgstr "Utilice :func:`sys.unraisablehook`."

#: ../../c-api/exceptions.rst:104
msgid ""
"Print the standard traceback display of ``exc`` to ``sys.stderr``, including "
"chained exceptions and notes."
msgstr ""
"Imprime el rastreo estándar de ``exc`` a ``sys.stderr``, incluyendo "
"excepciones encadenadas y notas."

#: ../../c-api/exceptions.rst:110
msgid "Raising exceptions"
msgstr "Planteamiento de excepciones"

#: ../../c-api/exceptions.rst:112
msgid ""
"These functions help you set the current thread's error indicator. For "
"convenience, some of these functions will always return a ``NULL`` pointer "
"for use in a ``return`` statement."
msgstr ""
"Estas funciones le ayudan a establecer el indicador de error del subproceso "
"actual. Por comodidad, algunas de estas funciones devolverán siempre un "
"puntero ``NULL`` para su uso en una sentencia ``return``."

#: ../../c-api/exceptions.rst:119
msgid ""
"This is the most common way to set the error indicator.  The first argument "
"specifies the exception type; it is normally one of the standard exceptions, "
"e.g. :c:data:`PyExc_RuntimeError`.  You need not create a new :term:`strong "
"reference` to it (e.g. with :c:func:`Py_INCREF`). The second argument is an "
"error message; it is decoded from ``'utf-8'``."
msgstr ""
"Esta es la forma más común de establecer el indicador de error.  El primer "
"argumento especifica el tipo de excepción; normalmente es una de las "
"excepciones estándar, por ejemplo :c:data:`PyExc_RuntimeError`.  No es "
"necesario crear una nueva referencia :term:`strong` a ella (por ejemplo, "
"con :c:func:`Py_INCREF`). El segundo argumento es un mensaje de error; se "
"decodifica de ``'utf-8'``."

#: ../../c-api/exceptions.rst:128
msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you specify "
"an arbitrary Python object for the \"value\" of the exception."
msgstr ""
"Esta función es similar a :c:func:`PyErr_SetString` pero permite especificar "
"un objeto Python arbitrario para el \"valor\" de la excepción."

#: ../../c-api/exceptions.rst:134
msgid ""
"This function sets the error indicator and returns ``NULL``.  *exception* "
"should be a Python exception class.  The *format* and subsequent parameters "
"help format the error message; they have the same meaning and values as in :"
"c:func:`PyUnicode_FromFormat`. *format* is an ASCII-encoded string."
msgstr ""
"Esta función establece el indicador de error y devuelve ``NULL``.  "
"*exception* debe ser una clase de excepción de Python.  Los parámetros "
"*format* y siguientes ayudan a formatear el mensaje de error; tienen el "
"mismo significado y valores que en :c:func:`PyUnicode_FromFormat`. *format* "
"es una cadena codificada en ASCII."

#: ../../c-api/exceptions.rst:143
msgid ""
"Same as :c:func:`PyErr_Format`, but taking a :c:type:`va_list` argument "
"rather than a variable number of arguments."
msgstr ""
"Igual que :c:func:`PyErr_Format`, pero tomando un argumento :c:type:"
"`va_list` en lugar de un número variable de argumentos."

#: ../../c-api/exceptions.rst:151
msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr "Se trata de una abreviatura de ``PyErr_SetObject(type, Py_None)``."

#: ../../c-api/exceptions.rst:156
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, where "
"*message* indicates that a built-in operation was invoked with an illegal "
"argument.  It is mostly for internal use."
msgstr ""
"Esta es una abreviatura de ``PyErr_SetString(PyExc_TypeError, message)``, "
"donde *message* indica que una operación incorporada fue invocada con un "
"argumento ilegal.  Es principalmente para uso interno."

#: ../../c-api/exceptions.rst:163
msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"``NULL`` so an object allocation function can write ``return "
"PyErr_NoMemory();`` when it runs out of memory."
msgstr ""
"Es una abreviatura de ``PyErr_SetNone(PyExc_MemoryError)``; devuelve "
"``NULL`` para que una función de asignación de objetos pueda escribir "
"``return PyErr_NoMemory();`` cuando se quede sin memoria."

#: ../../c-api/exceptions.rst:172
msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  It "
"constructs a tuple object whose first item is the integer :c:data:`errno` "
"value and whose second item is the corresponding error message (gotten from :"
"c:func:`!strerror`), and then calls ``PyErr_SetObject(type, object)``.  On "
"Unix, when the :c:data:`errno` value is :c:macro:`!EINTR`, indicating an "
"interrupted system call, this calls :c:func:`PyErr_CheckSignals`, and if "
"that set the error indicator, leaves it set to that.  The function always "
"returns ``NULL``, so a wrapper function around a system call can write "
"``return PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""
"Esta es una función conveniente para lanzar una excepción cuando una función "
"de la biblioteca C ha devuelto un error y establece la variable C :c:data:"
"`errno`.  Construye un objeto tupla cuyo primer elemento es el valor entero :"
"c:data:`errno` y cuyo segundo elemento es el mensaje de error "
"correspondiente (obtenido de :c:func:`!strerror`), y luego llama a "
"``PyErr_SetObject(type, object)``.  En Unix, cuando el valor de :c:data:"
"`errno` es :c:macro:`!EINTR`, indicando una llamada al sistema interrumpida, "
"esto llama a :c:func:`PyErr_CheckSignals`, y si eso fija el indicador de "
"error, lo deja fijado a eso.  La función siempre devuelve ``NULL``, por lo "
"que una función envolvente alrededor de una llamada al sistema puede "
"escribir ``return PyErr_SetFromErrno(type);`` cuando la llamada al sistema "
"devuelve un error."

#: ../../c-api/exceptions.rst:186
msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior that "
"if *filenameObject* is not ``NULL``, it is passed to the constructor of "
"*type* as a third parameter.  In the case of :exc:`OSError` exception, this "
"is used to define the :attr:`!filename` attribute of the exception instance."
msgstr ""
"Similar a :c:func:`PyErr_SetFromErrno`, con el comportamiento adicional de "
"que si *filenameObject* no es ``NULL``, se pasa al constructor de *type* "
"como tercer parámetro.  En el caso de la excepción :exc:`OSError`, se "
"utiliza para definir el atributo :attr:`!filename` de la instancia de "
"excepción."

#: ../../c-api/exceptions.rst:195
msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but takes a "
"second filename object, for raising errors when a function that takes two "
"filenames fails."
msgstr ""
"Similar a :c:func:`PyErr_SetFromErrnoWithFilenameObject`, pero toma un "
"segundo objeto nombre de fichero, para lanzar errores cuando una función que "
"toma dos nombres de fichero falla."

#: ../../c-api/exceptions.rst:204
msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but the filename "
"is given as a C string.  *filename* is decoded from the :term:`filesystem "
"encoding and error handler`."
msgstr ""
"Similar a :c:func:`PyErr_SetFromErrnoWithFilenameObject`, pero el nombre de "
"fichero se da como una cadena C.  *filename* se decodifica a partir del :"
"term:`filesystem encoding and error handler`."

#: ../../c-api/exceptions.rst:211
msgid ""
"This is a convenience function to raise :exc:`OSError`. If called with "
"*ierr* of ``0``, the error code returned by a call to :c:func:`!"
"GetLastError` is used instead.  It calls the Win32 function :c:func:`!"
"FormatMessage` to retrieve the Windows description of error code given by "
"*ierr* or :c:func:`!GetLastError`, then it constructs a :exc:`OSError` "
"object with the :attr:`~OSError.winerror` attribute set to the error code, "
"the :attr:`~OSError.strerror` attribute set to the corresponding error "
"message (gotten from :c:func:`!FormatMessage`), and then calls "
"``PyErr_SetObject(PyExc_OSError, object)``. This function always returns "
"``NULL``."
msgstr ""
"Esta es una función de conveniencia para levantar :exc:`OSError`. Si se "
"llama con *ierr* de ``0``, se utiliza en su lugar el código de error "
"devuelto por una llamada a :c:func:`!GetLastError`.  Llama a la función "
"Win32 :c:func:`!FormatMessage` para recuperar la descripción de Windows del "
"código de error dado por *ierr* o :c:func:`!GetLastError`, luego construye "
"un objeto :exc:`OSError` con el atributo :attr:`~OSError.winerror` fijado al "
"código de error, el atributo :attr:`~OSError.strerror` fijado al mensaje de "
"error correspondiente (obtenido de :c:func:`!FormatMessage`), y luego llama "
"a ``PyErr_SetObject(PyExc_OSError, object)``. Esta función siempre devuelve "
"``NULL``."

#: ../../c-api/exceptions.rst:221 ../../c-api/exceptions.rst:229
#: ../../c-api/exceptions.rst:240 ../../c-api/exceptions.rst:250
#: ../../c-api/exceptions.rst:258 ../../c-api/exceptions.rst:268
msgid "Availability"
msgstr "Disponibilidad"

#: ../../c-api/exceptions.rst:226
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional parameter "
"specifying the exception type to be raised."
msgstr ""
"Similar a :c:func:`PyErr_SetFromWindowsErr`, con un parámetro adicional que "
"especifica el tipo de excepción a lanzar."

#: ../../c-api/exceptions.rst:234
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with the additional behavior "
"that if *filename* is not ``NULL``, it is decoded from the filesystem "
"encoding (:func:`os.fsdecode`) and passed to the constructor of :exc:"
"`OSError` as a third parameter to be used to define the :attr:`!filename` "
"attribute of the exception instance."
msgstr ""
"Similar a :c:func:`PyErr_SetFromWindowsErr`, con el comportamiento adicional "
"de que si *filename* no es ``NULL``, se descodifica de la codificación del "
"sistema de archivos (:func:`os.fsdecode`) y se pasa al constructor de :exc:"
"`OSError` como tercer parámetro que se utilizará para definir el atributo :"
"attr:`!filename` de la instancia de excepción."

#: ../../c-api/exceptions.rst:245
msgid ""
"Similar to :c:func:`PyErr_SetExcFromWindowsErr`, with the additional "
"behavior that if *filename* is not ``NULL``, it is passed to the constructor "
"of :exc:`OSError` as a third parameter to be used to define the :attr:`!"
"filename` attribute of the exception instance."
msgstr ""
"Similar a :c:func:`PyErr_SetExcFromWindowsErr`, con el comportamiento "
"adicional de que si *filename* no es ``NULL``, se pasa al constructor de :"
"exc:`OSError` como un tercer parámetro que se utilizará para definir el "
"atributo :attr:`!filename` de la instancia de excepción."

#: ../../c-api/exceptions.rst:255
msgid ""
"Similar to :c:func:`PyErr_SetExcFromWindowsErrWithFilenameObject`, but "
"accepts a second filename object."
msgstr ""
"Similar a :c:func:`PyErr_SetExcFromWindowsErrWithFilenameObject`, pero "
"acepta un segundo objeto filename."

#: ../../c-api/exceptions.rst:265
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an additional "
"parameter specifying the exception type to be raised."
msgstr ""
"Similar a :c:func:`PyErr_SetFromWindowsErrWithFilename`, con un parámetro "
"adicional que especifica el tipo de excepción a lanzar."

#: ../../c-api/exceptions.rst:273
msgid ""
"This is a convenience function to raise :exc:`ImportError`. *msg* will be "
"set as the exception's message string. *name* and *path*, both of which can "
"be ``NULL``, will be set as the :exc:`ImportError`'s respective ``name`` and "
"``path`` attributes."
msgstr ""
"Esta es una función práctica para lanzar :exc:`ImportError`. *msg* se "
"establecerá como la cadena de mensaje de la excepción. *name* y *path*, que "
"pueden ser ``NULL``, se establecerán como los atributos respectivos de :exc:"
"`ImportError` ``name`` y ``path``."

#: ../../c-api/exceptions.rst:283
msgid ""
"Much like :c:func:`PyErr_SetImportError` but this function allows for "
"specifying a subclass of :exc:`ImportError` to raise."
msgstr ""
"Muy similar a :c:func:`PyErr_SetImportError` pero esta función permite "
"especificar una subclase de :exc:`ImportError` para que se active."

#: ../../c-api/exceptions.rst:291
msgid ""
"Set file, line, and offset information for the current exception.  If the "
"current exception is not a :exc:`SyntaxError`, then it sets additional "
"attributes, which make the exception printing subsystem think the exception "
"is a :exc:`SyntaxError`."
msgstr ""
"Establece la información de archivo, línea y offset para la excepción "
"actual.  Si la excepción actual no es una :exc:`SyntaxError`, entonces "
"establece atributos adicionales, que hacen que el subsistema de impresión de "
"excepciones piense que la excepción es una :exc:`SyntaxError`."

#: ../../c-api/exceptions.rst:301
msgid ""
"Like :c:func:`PyErr_SyntaxLocationObject`, but *filename* is a byte string "
"decoded from the :term:`filesystem encoding and error handler`."
msgstr ""
"Como :c:func:`PyErr_SyntaxLocationObject`, pero *filename* es una cadena de "
"bytes decodificada a partir del :term:`filesystem encoding and error "
"handler`."

#: ../../c-api/exceptions.rst:309
msgid ""
"Like :c:func:`PyErr_SyntaxLocationEx`, but the *col_offset* parameter is "
"omitted."
msgstr ""
"Como :c:func:`PyErr_SyntaxLocationEx`, pero se omite el parámetro "
"*col_offset*."

#: ../../c-api/exceptions.rst:315
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API "
"function) was invoked with an illegal argument.  It is mostly for internal "
"use."
msgstr ""
"Esta es una abreviatura de ``PyErr_SetString(PyExc_SystemError, message)``, "
"donde *message* indica que una operación interna (por ejemplo, una función "
"de la API de Python/C) se llamó con un argumento ilegal.  Es principalmente "
"para uso interno."

#: ../../c-api/exceptions.rst:322
msgid "Issuing warnings"
msgstr "Advertencias"

#: ../../c-api/exceptions.rst:324
msgid ""
"Use these functions to issue warnings from C code.  They mirror similar "
"functions exported by the Python :mod:`warnings` module.  They normally "
"print a warning message to *sys.stderr*; however, it is also possible that "
"the user has specified that warnings are to be turned into errors, and in "
"that case they will raise an exception.  It is also possible that the "
"functions raise an exception because of a problem with the warning "
"machinery. The return value is ``0`` if no exception is raised, or ``-1`` if "
"an exception is raised.  (It is not possible to determine whether a warning "
"message is actually printed, nor what the reason is for the exception; this "
"is intentional.)  If an exception is raised, the caller should do its normal "
"exception handling (for example, :c:func:`Py_DECREF` owned references and "
"return an error value)."
msgstr ""
"Utilizar estas funciones para emitir advertencias desde código C.  Reflejan "
"funciones similares exportadas por el módulo de Python :mod:`warnings`.  "
"Normalmente imprimen un mensaje de advertencia en *sys.stderr*; sin embargo, "
"también es posible que el usuario haya especificado que las advertencias se "
"conviertan en errores, y en ese caso lanzarán una excepción.  También es "
"posible que las funciones lancen una excepción debido a un problema con la "
"maquinaria de avisos. El valor de retorno es ``0`` si no se produce ninguna "
"excepción, o ``-1`` si se produce una excepción.  (No es posible determinar "
"si realmente se imprime un mensaje de advertencia, ni cuál es el motivo de "
"la excepción; esto es intencionado).  Si se produce una excepción, el "
"invocador debe hacer su manejo normal de excepciones (por ejemplo, :c:func:"
"`Py_DECREF` referencias propias y devolver un valor de error)."

#: ../../c-api/exceptions.rst:339
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or ``NULL``; the *message* argument is a UTF-8 encoded string.  "
"*stack_level* is a positive number giving a number of stack frames; the "
"warning will be issued from the  currently executing line of code in that "
"stack frame.  A *stack_level* of 1 is the function calling :c:func:"
"`PyErr_WarnEx`, 2 is  the function above that, and so forth."
msgstr ""
"Emitir un mensaje de advertencia.  El argumento *category* es una categoría "
"de advertencia (ver más abajo) o ``NULL``; el argumento *message* es una "
"cadena codificada en UTF-8.  *stack_level* es un número positivo que da un "
"número de marcos de pila; la advertencia se emitirá desde la línea de código "
"actualmente en ejecución en ese marco de pila.  Un *stack_level* de 1 es la "
"función que llama a :c:func:`PyErr_WarnEx`, 2 es la función por encima de "
"ésta, y así sucesivamente."

#: ../../c-api/exceptions.rst:346
msgid ""
"Warning categories must be subclasses of :c:data:`PyExc_Warning`; :c:data:"
"`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the default "
"warning category is :c:data:`PyExc_RuntimeWarning`. The standard Python "
"warning categories are available as global variables whose names are "
"enumerated at :ref:`standardwarningcategories`."
msgstr ""
"Las categorías de advertencia deben ser subclases de :c:data:"
"`PyExc_Warning`; :c:data:`PyExc_Warning` es una subclase de :c:data:"
"`PyExc_Exception`; la categoría de advertencia por defecto es :c:data:"
"`PyExc_RuntimeWarning`. Las categorías de advertencia estándar de Python "
"están disponibles como variables globales cuyos nombres se enumeran en :ref:"
"`standardwarningcategories`."

#: ../../c-api/exceptions.rst:352
msgid ""
"For information about warning control, see the documentation for the :mod:"
"`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""
"Para obtener información sobre el control de avisos, ver la documentación "
"del módulo :mod:`warnings` y la opción :option:`-W` en la documentación de "
"la línea de comandos.  No existe una API en C para el control de avisos."

#: ../../c-api/exceptions.rst:359
msgid ""
"Issue a warning message with explicit control over all warning attributes.  "
"This is a straightforward wrapper around the Python function :func:`warnings."
"warn_explicit`; see there for more information.  The *module* and *registry* "
"arguments may be set to ``NULL`` to get the default effect described there."
msgstr ""
"Emitir un mensaje de advertencia con control explícito sobre todos los "
"atributos de advertencia.  Esta es una envoltura directa alrededor de la "
"función de Python :func:`warnings.warn_explicit`; ver eso para más "
"información.  Los argumentos *module* y *registry* pueden establecerse a "
"``NULL`` para obtener el efecto por defecto allí descrito."

#: ../../c-api/exceptions.rst:370
msgid ""
"Similar to :c:func:`PyErr_WarnExplicitObject` except that *message* and "
"*module* are UTF-8 encoded strings, and *filename* is decoded from the :term:"
"`filesystem encoding and error handler`."
msgstr ""
"Similar a :c:func:`PyErr_WarnExplicitObject` excepto en que *message* y "
"*module* son cadenas codificadas en UTF-8, y *filename* se decodifica a "
"partir del :term:`filesystem encoding and error handler`."

#: ../../c-api/exceptions.rst:377
msgid ""
"Function similar to :c:func:`PyErr_WarnEx`, but use :c:func:"
"`PyUnicode_FromFormat` to format the warning message.  *format* is an ASCII-"
"encoded string."
msgstr ""
"Función similar a :c:func:`PyErr_WarnEx`, pero utiliza :c:func:"
"`PyUnicode_FromFormat` para dar formato al mensaje de advertencia.  *format* "
"es una cadena codificada en ASCII."

#: ../../c-api/exceptions.rst:386
msgid ""
"Function similar to :c:func:`PyErr_WarnFormat`, but *category* is :exc:"
"`ResourceWarning` and it passes *source* to :class:`!warnings."
"WarningMessage`."
msgstr ""
"Función similar a :c:func:`PyErr_WarnFormat`, pero *category* es :exc:"
"`ResourceWarning` y pasa *source* a :class:`!warnings.WarningMessage`."

#: ../../c-api/exceptions.rst:393
msgid "Querying the error indicator"
msgstr "Consultar del indicador de error"

#: ../../c-api/exceptions.rst:397
msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the ``PyErr_Set*`` "
"functions or to :c:func:`PyErr_Restore`).  If not set, return ``NULL``.  You "
"do not own a reference to the return value, so you do not need to :c:func:"
"`Py_DECREF` it."
msgstr ""
"Comprueba si el indicador de error está activado.  Si lo está, devuelve el "
"*tipo* de excepción (el primer argumento de la última llamada a una de las "
"funciones ``PyErr_Set*`` o a :c:func:`PyErr_Restore`).  Si no lo está, "
"devuelve ``NULL``.  Usted no posee una referencia al valor de retorno, por "
"lo que no necesita :c:func:`Py_DECREF`."

#: ../../c-api/exceptions.rst:403
msgid "The caller must hold the GIL."
msgstr "Caller debe mantener el GIL."

#: ../../c-api/exceptions.rst:407
msgid ""
"Do not compare the return value to a specific exception; use :c:func:"
"`PyErr_ExceptionMatches` instead, shown below.  (The comparison could easily "
"fail since the exception may be an instance instead of a class, in the case "
"of a class exception, or it may be a subclass of the expected exception.)"
msgstr ""
"No comparar el valor de retorno con una excepción específica; usar :c:func:"
"`PyErr_ExceptionMatches` en su lugar, como se muestra a continuación.  (La "
"comparación podría fallar fácilmente ya que la excepción puede ser una "
"instancia en lugar de una clase, en el caso de una excepción de clase, o "
"puede ser una subclase de la excepción esperada)."

#: ../../c-api/exceptions.rst:415
msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  This "
"should only be called when an exception is actually set; a memory access "
"violation will occur if no exception has been raised."
msgstr ""
"Equivale a ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``. Sólo debe "
"invocarse cuando se produce una excepción; se producirá una violación de "
"acceso a memoria si no se ha lanzado ninguna excepción."

#: ../../c-api/exceptions.rst:422
msgid ""
"Return true if the *given* exception matches the exception type in *exc*.  "
"If *exc* is a class object, this also returns true when *given* is an "
"instance of a subclass.  If *exc* is a tuple, all exception types in the "
"tuple (and recursively in subtuples) are searched for a match."
msgstr ""
"Devuelve verdadero si la excepción *given* coincide con el tipo de excepción "
"en *exc*.  Si *exc* es un objeto de clase, también devuelve true cuando "
"*given* es una instancia de una subclase.  Si *exc* es una tupla, se buscan "
"todos los tipos de excepción en la tupla (y recursivamente en las subtuplas)."

#: ../../c-api/exceptions.rst:430
msgid ""
"Return the exception currently being raised, clearing the error indicator at "
"the same time. Return ``NULL`` if the error indicator is not set."
msgstr ""
"Devuelve la excepción que se está lanzando actualmente, borrando el "
"indicador de error al mismo tiempo. Devuelve ``NULL`` si el indicador de "
"error no está activado."

#: ../../c-api/exceptions.rst:433
msgid ""
"This function is used by code that needs to catch exceptions, or code that "
"needs to save and restore the error indicator temporarily."
msgstr ""
"Esta función es utilizada por código que necesita atrapar excepciones, o "
"código que necesita guardar y restaurar el indicador de error temporalmente."

#: ../../c-api/exceptions.rst:436 ../../c-api/exceptions.rst:480
msgid "For example::"
msgstr "Por ejemplo::"

#: ../../c-api/exceptions.rst:438
msgid ""
"{\n"
"   PyObject *exc = PyErr_GetRaisedException();\n"
"\n"
"   /* ... code that might produce other errors ... */\n"
"\n"
"   PyErr_SetRaisedException(exc);\n"
"}"
msgstr ""
"{\n"
"   PyObject *exc = PyErr_GetRaisedException();\n"
"\n"
"   /* ... código que podría producir otros errores ... */\n"
"\n"
"   PyErr_SetRaisedException(exc);\n"
"}"

#: ../../c-api/exceptions.rst:446
msgid ""
":c:func:`PyErr_GetHandledException`, to save the exception currently being "
"handled."
msgstr ""
":c:func:`PyErr_GetHandledException`para guardar la excepción que se está "
"gestionando en ese momento."

#: ../../c-api/exceptions.rst:454
msgid ""
"Set *exc* as the exception currently being raised, clearing the existing "
"exception if one is set."
msgstr ""
"Establece *exc* como la excepción que se está lanzando actualmente, borrando "
"la excepción existente si se ha establecido una."

#: ../../c-api/exceptions.rst:459
msgid "This call steals a reference to *exc*, which must be a valid exception."
msgstr ""
"Esta llamada roba una referencia a *exc*, que debe ser una excepción válida."

#: ../../c-api/exceptions.rst:468
msgid "Use :c:func:`PyErr_GetRaisedException` instead."
msgstr "Utilice :c:func:`PyErr_GetRaisedException` en su lugar."

#: ../../c-api/exceptions.rst:470
msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"``NULL``.  If it is set, it will be cleared and you own a reference to each "
"object retrieved.  The value and traceback object may be ``NULL`` even when "
"the type object is not."
msgstr ""
"Recuperar el indicador de error en tres variables cuyas direcciones se "
"pasan. Si el indicador de error no está establecido, establece las tres "
"variables en ``NULL``. Si está establecido, se borrará y poseerá una "
"referencia a cada objeto recuperado.  El objeto value y traceback pueden ser "
"``NULL`` incluso cuando el objeto type no lo sea."

#: ../../c-api/exceptions.rst:477
msgid ""
"This function is normally only used by legacy code that needs to catch "
"exceptions or save and restore the error indicator temporarily."
msgstr ""
"Esta función normalmente sólo es utilizada por código heredado que necesita "
"atrapar excepciones o guardar y restaurar el indicador de error "
"temporalmente."

#: ../../c-api/exceptions.rst:482
msgid ""
"{\n"
"   PyObject *type, *value, *traceback;\n"
"   PyErr_Fetch(&type, &value, &traceback);\n"
"\n"
"   /* ... code that might produce other errors ... */\n"
"\n"
"   PyErr_Restore(type, value, traceback);\n"
"}"
msgstr ""
"{\n"
"   PyObject *type, *value, *traceback;\n"
"   PyErr_Fetch(&type, &value, &traceback);\n"
"\n"
"   /* ... código que podría producir otros errores ... */\n"
"\n"
"   PyErr_Restore(type, value, traceback);\n"
"}"

#: ../../c-api/exceptions.rst:496
msgid "Use :c:func:`PyErr_SetRaisedException` instead."
msgstr "Utilice :c:func:`PyErr_SetRaisedException` en su lugar."

#: ../../c-api/exceptions.rst:498
msgid ""
"Set the error indicator from the three objects, *type*, *value*, and "
"*traceback*, clearing the existing exception if one is set. If the objects "
"are ``NULL``, the error indicator is cleared.  Do not pass a ``NULL`` type "
"and non-``NULL`` value or traceback.  The exception type should be a class.  "
"Do not pass an invalid exception type or value. (Violating these rules will "
"cause subtle problems later.)  This call takes away a reference to each "
"object: you must own a reference to each object before the call and after "
"the call you no longer own these references.  (If you don't understand this, "
"don't use this function.  I warned you.)"
msgstr ""
"Establece el indicador de error de los tres objetos, *type*, *value* y "
"*traceback*, borrando la excepción existente si hay una establecida. Si los "
"objetos son ``NULL``, el indicador de error se borra.  No pase un ``NULL`` "
"tipo y no``NULL`` valor o traceback.  El tipo de excepción debe ser una "
"clase.  No pase un tipo o valor de excepción inválido. (Violar estas reglas "
"causará problemas sutiles más adelante.) Esta llamada quita una referencia a "
"cada objeto: debes poseer una referencia a cada objeto antes de la llamada y "
"después de la llamada ya no posees estas referencias.  (Si no entiendes "
"esto, no uses esta función. Te lo advertí)."

#: ../../c-api/exceptions.rst:512
msgid ""
"This function is normally only used by legacy code that needs to save and "
"restore the error indicator temporarily. Use :c:func:`PyErr_Fetch` to save "
"the current error indicator."
msgstr ""
"Esta función normalmente sólo es utilizada por código heredado que necesita "
"guardar y restaurar el indicador de error temporalmente. Utilice :c:func:"
"`PyErr_Fetch` para guardar el indicador de error actual."

#: ../../c-api/exceptions.rst:521
msgid ""
"Use :c:func:`PyErr_GetRaisedException` instead, to avoid any possible de-"
"normalization."
msgstr ""
"Utilice :c:func:`PyErr_GetRaisedException` en su lugar, para evitar "
"cualquier posible desnormalización."

#: ../../c-api/exceptions.rst:524
msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch` "
"below can be \"unnormalized\", meaning that ``*exc`` is a class object but "
"``*val`` is not an instance of the  same class.  This function can be used "
"to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""
"En determinadas circunstancias, los valores devueltos por :c:func:"
"`PyErr_Fetch` a continuación pueden ser \"unnormalized\", lo que significa "
"que ``*exc`` es un objeto de clase pero ``*val`` no es una instancia de la "
"misma clase.  Esta función puede utilizarse para instanciar la clase en ese "
"caso.  Si los valores ya están normalizados, no ocurre nada. La "
"normalización retardada se implementa para mejorar el rendimiento."

#: ../../c-api/exceptions.rst:532
msgid ""
"This function *does not* implicitly set the :attr:`~BaseException."
"__traceback__` attribute on the exception value. If setting the traceback "
"appropriately is desired, the following additional snippet is needed::"
msgstr ""
"Esta función *no* establece implícitamente el atributo :attr:`~BaseException."
"__traceback__` en el valor de la excepción. Si se desea establecer el "
"rastreo de forma apropiada, se necesita el siguiente fragmento adicional::"

#: ../../c-api/exceptions.rst:537
msgid ""
"if (tb != NULL) {\n"
"  PyException_SetTraceback(val, tb);\n"
"}"
msgstr ""
"if (tb != NULL) {\n"
"  PyException_SetTraceback(val, tb);\n"
"}"

#: ../../c-api/exceptions.rst:544
msgid ""
"Retrieve the active exception instance, as would be returned by :func:`sys."
"exception`. This refers to an exception that was *already caught*, not to an "
"exception that was freshly raised. Returns a new reference to the exception "
"or ``NULL``. Does not modify the interpreter's exception state."
msgstr ""
"Recupera la instancia de excepción activa, como la que devolvería :func:`sys."
"exception`. Se refiere a una excepción *ya capturada*, no a una excepción "
"recién lanzada. Devuelve una nueva referencia a la excepción o ``NULL``. No "
"modifica el estado de excepción del intérprete."

#: ../../c-api/exceptions.rst:551
msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_SetHandledException` to restore or "
"clear the exception state."
msgstr ""
"Esta función no es utilizada normalmente por código que quiera manejar "
"excepciones. Más bien, se puede utilizar cuando el código necesita guardar y "
"restaurar el estado de excepción temporalmente.  Utilice :c:func:"
"`PyErr_SetHandledException` para restaurar o borrar el estado de excepción."

#: ../../c-api/exceptions.rst:560
msgid ""
"Set the active exception, as known from ``sys.exception()``.  This refers to "
"an exception that was *already caught*, not to an exception that was freshly "
"raised. To clear the exception state, pass ``NULL``."
msgstr ""
"Establece la excepción activa, como se conoce en ``sys.exception()``. Esto "
"se refiere a una excepción que fue *ya capturada*, no a una excepción que "
"fue recién lanzada. Para borrar el estado de excepción, pase ``NULL``."

#: ../../c-api/exceptions.rst:567
msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_GetHandledException` to get the "
"exception state."
msgstr ""
"Esta función no es utilizada normalmente por código que quiera manejar "
"excepciones. Más bien, se puede utilizar cuando el código necesita guardar y "
"restaurar el estado de excepción temporalmente.  Utilice :c:func:"
"`PyErr_GetHandledException` para obtener el estado de excepción."

#: ../../c-api/exceptions.rst:576
msgid ""
"Retrieve the old-style representation of the exception info, as known from :"
"func:`sys.exc_info`.  This refers to an exception that was *already caught*, "
"not to an exception that was freshly raised.  Returns new references for the "
"three objects, any of which may be ``NULL``.  Does not modify the exception "
"info state.  This function is kept for backwards compatibility. Prefer "
"using :c:func:`PyErr_GetHandledException`."
msgstr ""
"Recupera la representación antigua de la información de la excepción, tal y "
"como se conoce en :func:`sys.exc_info`. Esto se refiere a una excepción que "
"ya ha sido *capturada*, no a una excepción recién lanzada.  Devuelve nuevas "
"referencias para los tres objetos, cualquiera de los cuales puede ser "
"``NULL``.  No modifica el estado de información de la excepción.  Esta "
"función se mantiene por compatibilidad con versiones anteriores. Es "
"preferible utilizar :c:func:`PyErr_GetHandledException`."

#: ../../c-api/exceptions.rst:585
msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_SetExcInfo` to restore or clear the "
"exception state."
msgstr ""
"Esta función no se utiliza normalmente por código que quiera manejar "
"excepciones. Más bien, se puede utilizar cuando el código necesita guardar y "
"restaurar el estado de excepción temporalmente.  Usar :c:func:"
"`PyErr_SetExcInfo` para restaurar o borrar el estado de excepción."

#: ../../c-api/exceptions.rst:595
msgid ""
"Set the exception info, as known from ``sys.exc_info()``.  This refers to an "
"exception that was *already caught*, not to an exception that was freshly "
"raised.  This function steals the references of the arguments. To clear the "
"exception state, pass ``NULL`` for all three arguments. This function is "
"kept for backwards compatibility. Prefer using :c:func:"
"`PyErr_SetHandledException`."
msgstr ""
"Establece la información de la excepción, como se conoce en ``sys."
"exc_info()``. Esto se refiere a una excepción que fue *ya capturada*, no a "
"una excepción que fue recién lanzada.  Esta función roba las referencias de "
"los argumentos. Para borrar el estado de excepción, pase ``NULL`` para los "
"tres argumentos. Esta función se mantiene por compatibilidad con versiones "
"anteriores. Es preferible utilizar :c:func:`PyErr_SetHandledException`."

#: ../../c-api/exceptions.rst:604
msgid ""
"This function is not normally used by code that wants to handle exceptions. "
"Rather, it can be used when code needs to save and restore the exception "
"state temporarily.  Use :c:func:`PyErr_GetExcInfo` to read the exception "
"state."
msgstr ""
"Esta función no se utiliza normalmente por código que quiera manejar "
"excepciones. Más bien, se puede utilizar cuando el código necesita guardar y "
"restaurar el estado de excepción temporalmente.  Usar :c:func:"
"`PyErr_GetExcInfo` para leer el estado de excepción."

#: ../../c-api/exceptions.rst:611
msgid ""
"The ``type`` and ``traceback`` arguments are no longer used and can be NULL. "
"The interpreter now derives them from the exception instance (the ``value`` "
"argument). The function still steals references of all three arguments."
msgstr ""
"Los argumentos ``type`` y ``traceback`` ya no se utilizan y pueden ser NULL. "
"El intérprete los deriva ahora de la instancia de excepción (el argumento "
"``value`` ). La función sigue robando referencias de los tres argumentos."

#: ../../c-api/exceptions.rst:619
msgid "Signal Handling"
msgstr "Tratamiento de señales"

#: ../../c-api/exceptions.rst:629
msgid "This function interacts with Python's signal handling."
msgstr "Esta función interactúa con el manejo de señales de Python."

#: ../../c-api/exceptions.rst:631
msgid ""
"If the function is called from the main thread and under the main Python "
"interpreter, it checks whether a signal has been sent to the processes and "
"if so, invokes the corresponding signal handler.  If the :mod:`signal` "
"module is supported, this can invoke a signal handler written in Python."
msgstr ""
"Si la función se llama desde el hilo principal y bajo el intérprete "
"principal de Python, comprueba si se ha enviado una señal a los procesos y, "
"en caso afirmativo, invoca al manejador de señales correspondiente.  Si el "
"módulo :mod:`signal` está soportado, esto puede invocar un manejador de "
"señales escrito en Python."

#: ../../c-api/exceptions.rst:636
msgid ""
"The function attempts to handle all pending signals, and then returns ``0``. "
"However, if a Python signal handler raises an exception, the error indicator "
"is set and the function returns ``-1`` immediately (such that other pending "
"signals may not have been handled yet: they will be on the next :c:func:"
"`PyErr_CheckSignals()` invocation)."
msgstr ""
"La función intenta manejar todas las señales pendientes y luego devuelve "
"``0``. Sin embargo, si un manejador de señales de Python lanza una "
"excepción, se establece el indicador de error y la función devuelve ``-1`` "
"inmediatamente (de forma que otras señales pendientes pueden no haber sido "
"manejadas todavía: lo serán en la siguiente invocación :c:func:"
"`PyErr_CheckSignals()` )."

#: ../../c-api/exceptions.rst:642
msgid ""
"If the function is called from a non-main thread, or under a non-main Python "
"interpreter, it does nothing and returns ``0``."
msgstr ""
"Si la función se llama desde un hilo no principal, o bajo un intérprete de "
"Python no principal, no hace nada y devuelve ``0``."

#: ../../c-api/exceptions.rst:645
msgid ""
"This function can be called by long-running C code that wants to be "
"interruptible by user requests (such as by pressing Ctrl-C)."
msgstr ""
"Esta función puede ser llamada por código C de larga ejecución que quiera "
"ser interrumpible por peticiones del usuario (como pulsar Ctrl-C)."

#: ../../c-api/exceptions.rst:649
msgid ""
"The default Python signal handler for :c:macro:`!SIGINT` raises the :exc:"
"`KeyboardInterrupt` exception."
msgstr ""
"El manejador de señales por defecto de Python para :c:macro:`!SIGINT` lanza "
"la excepción :exc:`KeyboardInterrupt`."

#: ../../c-api/exceptions.rst:660
msgid ""
"Simulate the effect of a :c:macro:`!SIGINT` signal arriving. This is "
"equivalent to ``PyErr_SetInterruptEx(SIGINT)``."
msgstr ""
"Simule el efecto de la llegada de una señal :c:macro:`!SIGINT`. Esto "
"equivale a ``PyErr_SetInterruptEx(SIGINT)``."

#: ../../c-api/exceptions.rst:664 ../../c-api/exceptions.rst:691
msgid ""
"This function is async-signal-safe.  It can be called without the :term:"
"`GIL` and from a C signal handler."
msgstr ""
"Esta función es async-signal-safe.  Se puede llamar sin el :term:`GIL` y "
"desde un manejador de señales C."

#: ../../c-api/exceptions.rst:674
msgid ""
"Simulate the effect of a signal arriving. The next time :c:func:"
"`PyErr_CheckSignals` is called,  the Python signal handler for the given "
"signal number will be called."
msgstr ""
"Simula el efecto de la llegada de una señal. La próxima vez que se llame a :"
"c:func:`PyErr_CheckSignals`, se llamará al manejador de señales de Python "
"para el número de señal dado."

#: ../../c-api/exceptions.rst:678
msgid ""
"This function can be called by C code that sets up its own signal handling "
"and wants Python signal handlers to be invoked as expected when an "
"interruption is requested (for example when the user presses Ctrl-C to "
"interrupt an operation)."
msgstr ""
"Esta función se puede llamar con código C que configura su propio manejo de "
"señales y quiere que los manejadores de señales de Python se llamen como se "
"espera cuando se solicita una interrupción (por ejemplo cuando el usuario "
"presiona Ctrl-C para interrumpir una operación)."

#: ../../c-api/exceptions.rst:683
msgid ""
"If the given signal isn't handled by Python (it was set to :py:const:`signal."
"SIG_DFL` or :py:const:`signal.SIG_IGN`), it will be ignored."
msgstr ""
"Si la señal dada no es manejada por Python (fue establecida a :py:const:"
"`signal.SIG_DFL` o :py:const:`signal.SIG_IGN`), se ignorará."

#: ../../c-api/exceptions.rst:686
msgid ""
"If *signum* is outside of the allowed range of signal numbers, ``-1`` is "
"returned.  Otherwise, ``0`` is returned.  The error indicator is never "
"changed by this function."
msgstr ""
"Si *signum* está fuera del rango permitido de números de señal, devuelve "
"``-1``.  De otra manera devuelve ``0``.  El indicador de error nunca es "
"modificado por esta función."

#: ../../c-api/exceptions.rst:699
msgid ""
"This utility function specifies a file descriptor to which the signal number "
"is written as a single byte whenever a signal is received. *fd* must be non-"
"blocking. It returns the previous such file descriptor."
msgstr ""
"Esta función de utilidad especifica un descriptor de archivo en el que el "
"número de señal se escribe como un único byte cada vez que se recibe una "
"señal. *fd* debe ser no bloqueante. Devuelve el descriptor de archivo "
"anterior."

#: ../../c-api/exceptions.rst:703
msgid ""
"The value ``-1`` disables the feature; this is the initial state. This is "
"equivalent to :func:`signal.set_wakeup_fd` in Python, but without any error "
"checking.  *fd* should be a valid file descriptor.  The function should only "
"be called from the main thread."
msgstr ""
"El valor ``-1`` desactiva la función; éste es el estado inicial. Es "
"equivalente a :func:`signal.set_wakeup_fd` en Python, pero sin comprobación "
"de errores.  *fd* debe ser un descriptor de fichero válido.  La función sólo "
"debe ser llamada desde el hilo principal."

#: ../../c-api/exceptions.rst:708
msgid "On Windows, the function now also supports socket handles."
msgstr "En Windows, la función también admite ahora los manejadores de socket."

#: ../../c-api/exceptions.rst:713
msgid "Exception Classes"
msgstr "Clases de excepción"

#: ../../c-api/exceptions.rst:717
msgid ""
"This utility function creates and returns a new exception class. The *name* "
"argument must be the name of the new exception, a C string of the form "
"``module.classname``.  The *base* and *dict* arguments are normally "
"``NULL``. This creates a class object derived from :exc:`Exception` "
"(accessible in C as :c:data:`PyExc_Exception`)."
msgstr ""
"Esta función de utilidad crea y devuelve una nueva clase de excepción. El "
"argumento *name* debe ser el nombre de la nueva excepción, una cadena C de "
"la forma ``module.classname``.  Los argumentos *base* y *dict* son "
"normalmente ``NULL``. Esto crea un objeto de clase derivado de :exc:"
"`Exception` (accesible en C como :c:data:`PyExc_Exception`)."

#: ../../c-api/exceptions.rst:723
msgid ""
"The :attr:`~type.__module__` attribute of the new class is set to the first "
"part (up to the last dot) of the *name* argument, and the class name is set "
"to the last part (after the last dot).  The *base* argument can be used to "
"specify alternate base classes; it can either be only one class or a tuple "
"of classes. The *dict* argument can be used to specify a dictionary of class "
"variables and methods."
msgstr ""
"El atributo :attr:`~type.__module__` de la nueva clase se establece en la "
"primera parte (hasta el último punto) del argumento *name*, y el nombre de "
"la clase se establece en la última parte (después del último punto).  El "
"argumento *base* puede utilizarse para especificar clases base alternativas; "
"puede ser una sola clase o una tupla de clases. El argumento *dict* puede "
"utilizarse para especificar un diccionario de variables y métodos de clase."

#: ../../c-api/exceptions.rst:732
msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class "
"can easily be given a docstring: If *doc* is non-``NULL``, it will be used "
"as the docstring for the exception class."
msgstr ""
"Igual que :c:func:`PyErr_NewException`, excepto que a la nueva clase de "
"excepción se le puede dar fácilmente un docstring: Si *doc* no es``NULL``, "
"se utilizará como docstring para la clase de excepción."

#: ../../c-api/exceptions.rst:740
msgid "Exception Objects"
msgstr "Objetos de excepción"

#: ../../c-api/exceptions.rst:744
msgid ""
"Return the traceback associated with the exception as a new reference, as "
"accessible from Python through the :attr:`~BaseException.__traceback__` "
"attribute. If there is no traceback associated, this returns ``NULL``."
msgstr ""
"Devuelve el traceback asociado a la excepción como una nueva referencia, "
"accesible desde Python a través del atributo :attr:`~BaseException."
"__traceback__`. Si no hay ninguna traza asociada, devuelve ``NULL``."

#: ../../c-api/exceptions.rst:752
msgid ""
"Set the traceback associated with the exception to *tb*.  Use ``Py_None`` to "
"clear it."
msgstr ""
"Establece el rastreo asociado a la excepción en *tb*.  Utilice ``Py_None`` "
"para borrarlo."

#: ../../c-api/exceptions.rst:758
msgid ""
"Return the context (another exception instance during whose handling *ex* "
"was raised) associated with the exception as a new reference, as accessible "
"from Python through the :attr:`~BaseException.__context__` attribute. If "
"there is no context associated, this returns ``NULL``."
msgstr ""
"Devuelve el contexto (otra instancia de excepción durante cuyo manejo se "
"lanzó *ex*) asociado con la excepción como una nueva referencia, accesible "
"desde Python a través del atributo :attr:`~BaseException.__context__`. Si no "
"hay contexto asociado, devuelve ``NULL``."

#: ../../c-api/exceptions.rst:766
msgid ""
"Set the context associated with the exception to *ctx*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *ctx* is an exception "
"instance. This steals a reference to *ctx*."
msgstr ""
"Establece el contexto asociado a la excepción en *ctx*.  Utilice ``NULL`` "
"para borrarlo.  No hay comprobación de tipo para asegurarse de que *ctx* es "
"una instancia de excepción. Esto roba una referencia a *ctx*."

#: ../../c-api/exceptions.rst:773
msgid ""
"Return the cause (either an exception instance, or ``None``, set by "
"``raise ... from ...``) associated with the exception as a new reference, as "
"accessible from Python through the :attr:`~BaseException.__cause__` "
"attribute."
msgstr ""
"Devuelve la causa (ya sea una instancia de excepción, o ``None``, "
"establecida por ``raise ... from ...``) asociada con la excepción como una "
"nueva referencia, accesible desde Python a través del atributo :attr:"
"`~BaseException.__cause__`."

#: ../../c-api/exceptions.rst:781
msgid ""
"Set the cause associated with the exception to *cause*.  Use ``NULL`` to "
"clear it.  There is no type check to make sure that *cause* is either an "
"exception instance or ``None``.  This steals a reference to *cause*."
msgstr ""
"Establece la causa asociada a la excepción en *causa*.  Usa ``NULL`` para "
"borrarla.  No hay comprobación de tipo para asegurarse de que *cause* es una "
"instancia de excepción o ``None``. Esto roba una referencia a *cause*."

#: ../../c-api/exceptions.rst:785
msgid ""
"The :attr:`~BaseException.__suppress_context__` attribute is implicitly set "
"to ``True`` by this function."
msgstr ""
"Esta función establece implícitamente el atributo :attr:`~BaseException."
"__suppress_context__` en ``True``."

#: ../../c-api/exceptions.rst:791
msgid "Return :attr:`~BaseException.args` of exception *ex*."
msgstr "Devuelve :attr:`~BaseException.args` de excepción *ex*."

#: ../../c-api/exceptions.rst:796
msgid "Set :attr:`~BaseException.args` of exception *ex* to *args*."
msgstr "Establece :attr:`~BaseException.args` de excepción *ex* a *args*."

#: ../../c-api/exceptions.rst:800
msgid ""
"Implement part of the interpreter's implementation of :keyword:`!except*`. "
"*orig* is the original exception that was caught, and *excs* is the list of "
"the exceptions that need to be raised. This list contains the unhandled part "
"of *orig*, if any, as well as the exceptions that were raised from the :"
"keyword:`!except*` clauses (so they have a different traceback from *orig*) "
"and those that were reraised (and have the same traceback as *orig*). Return "
"the :exc:`ExceptionGroup` that needs to be reraised in the end, or ``None`` "
"if there is nothing to reraise."
msgstr ""
"Implementa parte de la implementación del intérprete de :keyword:`!except*`. "
"*orig* es la excepción original que fue capturada, y *excs* es la lista de "
"las excepciones que necesitan ser levantadas. Esta lista contiene la parte "
"no tratada de *orig*, si la hay, así como las excepciones que se lanzaron "
"desde las cláusulas :keyword:`!except*` (por lo que tienen un seguimiento "
"diferente de *orig*) y las que se volvieron a lanzar (y tienen el mismo "
"seguimiento que *orig*). Devuelve el :exc:`ExceptionGroup` que necesita ser "
"renumerado al final, o ``None`` si no hay nada que renumerar."

#: ../../c-api/exceptions.rst:814
msgid "Unicode Exception Objects"
msgstr "Objetos de excepción Unicode"

#: ../../c-api/exceptions.rst:816
msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""
"Las siguientes funciones se utilizan para crear y modificar excepciones "
"Unicode desde C."

#: ../../c-api/exceptions.rst:820
msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*. *encoding* and *reason* are "
"UTF-8 encoded strings."
msgstr ""
"Crea un objeto :class:`UnicodeDecodeError` con los atributos *encoding*, "
"*object*, *length*, *start*, *end* y *reason*. *encoding* y *reason* son "
"cadenas codificadas en UTF-8."

#: ../../c-api/exceptions.rst:827
msgid "Return the *encoding* attribute of the given exception object."
msgstr "Devuelve el atributo *encoding* del objeto de excepción dado."

#: ../../c-api/exceptions.rst:833
msgid "Return the *object* attribute of the given exception object."
msgstr "Devuelve el atributo *object* del objeto de excepción dado."

#: ../../c-api/exceptions.rst:839
msgid ""
"Get the *start* attribute of the given exception object and place it into "
"*\\*start*.  *start* must not be ``NULL``.  Return ``0`` on success, ``-1`` "
"on failure."
msgstr ""
"Obtiene el atributo *start* del objeto de excepción dado y lo coloca en "
"*\\*start*.  *start* no debe ser ``NULL``.  Devuelve ``0`` en caso de éxito, "
"``-1`` en caso de fallo."

#: ../../c-api/exceptions.rst:847
msgid ""
"Set the *start* attribute of the given exception object to *start*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""
"Establece el atributo *start* del objeto de excepción dado a *start*.  "
"Devuelve ``0`` en caso de éxito, ``-1`` en caso de fallo."

#: ../../c-api/exceptions.rst:854
msgid ""
"Get the *end* attribute of the given exception object and place it into "
"*\\*end*.  *end* must not be ``NULL``.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""
"Obtiene el atributo *end* del objeto de excepción dado y lo coloca en "
"*\\*end*.  *end* no debe ser ``NULL``.  Devuelve ``0`` en caso de éxito, "
"``-1`` en caso de fallo."

#: ../../c-api/exceptions.rst:862
msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""
"Establece el atributo *end* del objeto de excepción dado a *end*.  Devuelve "
"``0`` en caso de éxito, ``-1`` en caso de fallo."

#: ../../c-api/exceptions.rst:869
msgid "Return the *reason* attribute of the given exception object."
msgstr "Devuelve el atributo *reason* del objeto de excepción dado."

#: ../../c-api/exceptions.rst:875
msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""
"Establece el atributo *reason* del objeto de excepción dado a *reason*.  "
"Devuelve ``0`` en caso de éxito, ``-1`` en caso de fallo."

#: ../../c-api/exceptions.rst:882
msgid "Recursion Control"
msgstr "Control de recursividad"

#: ../../c-api/exceptions.rst:884
msgid ""
"These two functions provide a way to perform safe recursive calls at the C "
"level, both in the core and in extension modules.  They are needed if the "
"recursive code does not necessarily invoke Python code (which tracks its "
"recursion depth automatically). They are also not needed for *tp_call* "
"implementations because the :ref:`call protocol <call>` takes care of "
"recursion handling."
msgstr ""
"Estas dos funciones proporcionan una forma de realizar llamadas recursivas "
"seguras a nivel de C, tanto en el núcleo como en los módulos de extensión.  "
"Son necesarias si el código recursivo no invoca necesariamente código Python "
"(que rastrea su profundidad de recursión automáticamente). Tampoco son "
"necesarias para implementaciones *tp_call* porque el protocolo :ref:`call "
"<call>` se encarga de la gestión de la recursividad."

#: ../../c-api/exceptions.rst:893
msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr ""
"Marca un punto en el que se va a realizar una llamada recursiva de nivel C."

#: ../../c-api/exceptions.rst:895
msgid ""
"If :c:macro:`!USE_STACKCHECK` is defined, this function checks if the OS "
"stack overflowed using :c:func:`PyOS_CheckStack`.  If this is the case, it "
"sets a :exc:`MemoryError` and returns a nonzero value."
msgstr ""
"Si :c:macro:`!USE_STACKCHECK` está definido, esta función comprueba si la "
"pila del sistema operativo se desbordó usando :c:func:`PyOS_CheckStack`.  Si "
"es así, establece un :exc:`MemoryError` y devuelve un valor distinto de cero."

#: ../../c-api/exceptions.rst:899
msgid ""
"The function then checks if the recursion limit is reached.  If this is the "
"case, a :exc:`RecursionError` is set and a nonzero value is returned. "
"Otherwise, zero is returned."
msgstr ""
"A continuación, la función comprueba si se ha alcanzado el límite de "
"recursividad.  Si es así, se establece un :exc:`RecursionError` y se "
"devuelve un valor distinto de cero. En caso contrario, se devuelve cero."

#: ../../c-api/exceptions.rst:903
msgid ""
"*where* should be a UTF-8 encoded string such as ``\" in instance check\"`` "
"to be concatenated to the :exc:`RecursionError` message caused by the "
"recursion depth limit."
msgstr ""
"*where* debe ser una cadena codificada en UTF-8 como ``\" in instance "
"check\"`` para concatenadarse al mensaje :exc:`RecursionError` causado por "
"el límite de profundidad de recursión."

#: ../../c-api/exceptions.rst:907 ../../c-api/exceptions.rst:915
msgid ""
"This function is now also available in the :ref:`limited API <limited-c-"
"api>`."
msgstr ""
"Esta función ahora también está disponible en la API :ref:`limited <limited-"
"c-api>`."

#: ../../c-api/exceptions.rst:912
msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""
"Finaliza :c:func:`Py_EnterRecursiveCall`. Debe invocarse una vez por cada "
"invocación *con éxito* de :c:func:`Py_EnterRecursiveCall`."

#: ../../c-api/exceptions.rst:918
msgid ""
"Properly implementing :c:member:`~PyTypeObject.tp_repr` for container types "
"requires special recursion handling.  In addition to protecting the stack, :"
"c:member:`~PyTypeObject.tp_repr` also needs to track objects to prevent "
"cycles.  The following two functions facilitate this functionality.  "
"Effectively, these are the C equivalent to :func:`reprlib.recursive_repr`."
msgstr ""
"La correcta implementación de :c:member:`~PyTypeObject.tp_repr` para tipos "
"contenedores requiere un manejo especial de la recursividad.  Además de "
"proteger la pila, :c:member:`~PyTypeObject.tp_repr` también necesita "
"rastrear objetos para evitar ciclos.  Las dos funciones siguientes facilitan "
"esta funcionalidad.  De hecho, son el equivalente en C a :func:`reprlib."
"recursive_repr`."

#: ../../c-api/exceptions.rst:926
msgid ""
"Called at the beginning of the :c:member:`~PyTypeObject.tp_repr` "
"implementation to detect cycles."
msgstr ""
"Llamada al principio de la implementación de :c:member:`~PyTypeObject."
"tp_repr` para detectar ciclos."

#: ../../c-api/exceptions.rst:929
msgid ""
"If the object has already been processed, the function returns a positive "
"integer.  In that case the :c:member:`~PyTypeObject.tp_repr` implementation "
"should return a string object indicating a cycle.  As examples, :class:"
"`dict` objects return ``{...}`` and :class:`list` objects return ``[...]``."
msgstr ""
"Si el objeto ya ha sido procesado, la función devuelve un número entero "
"positivo.  En ese caso, la implementación de :c:member:`~PyTypeObject."
"tp_repr` debe devolver un objeto de cadena que indique un ciclo.  Como "
"ejemplos, los objetos :class:`dict` devuelven ``{...}`` y los objetos :class:"
"`list` devuelven ``[...]``."

#: ../../c-api/exceptions.rst:935
msgid ""
"The function will return a negative integer if the recursion limit is "
"reached.  In that case the :c:member:`~PyTypeObject.tp_repr` implementation "
"should typically return ``NULL``."
msgstr ""
"La función devolverá un entero negativo si se alcanza el límite de "
"recursión.  En ese caso, la implementación de :c:member:`~PyTypeObject."
"tp_repr` debería devolver ``NULL``."

#: ../../c-api/exceptions.rst:939
msgid ""
"Otherwise, the function returns zero and the :c:member:`~PyTypeObject."
"tp_repr` implementation can continue normally."
msgstr ""
"En caso contrario, la función devuelve cero y la aplicación :c:member:"
"`~PyTypeObject.tp_repr` puede continuar normalmente."

#: ../../c-api/exceptions.rst:944
msgid ""
"Ends a :c:func:`Py_ReprEnter`.  Must be called once for each invocation of :"
"c:func:`Py_ReprEnter` that returns zero."
msgstr ""
"Finaliza un :c:func:`Py_ReprEnter`. Debe llamarse una vez por cada "
"invocación de :c:func:`Py_ReprEnter` que devuelva cero."

#: ../../c-api/exceptions.rst:951
msgid "Standard Exceptions"
msgstr "Excepciones estándar"

#: ../../c-api/exceptions.rst:953
msgid ""
"All standard Python exceptions are available as global variables whose names "
"are ``PyExc_`` followed by the Python exception name.  These have the type :"
"c:expr:`PyObject*`; they are all class objects.  For completeness, here are "
"all the variables:"
msgstr ""
"Todas las excepciones estándar de Python están disponibles como variables "
"globales cuyos nombres son ``PyExc_`` seguido del nombre de la excepción de "
"Python.  Éstas tienen el tipo :c:expr:`PyObject*`; todas son objetos de "
"clase.  Para completar, aquí están todas las variables:"

#: ../../c-api/exceptions.rst:1014 ../../c-api/exceptions.rst:1147
#: ../../c-api/exceptions.rst:1192
msgid "C Name"
msgstr "C Nombre"

#: ../../c-api/exceptions.rst:1014 ../../c-api/exceptions.rst:1192
msgid "Python Name"
msgstr "Nombre Python"

#: ../../c-api/exceptions.rst:1014 ../../c-api/exceptions.rst:1147
#: ../../c-api/exceptions.rst:1192
msgid "Notes"
msgstr "Notas"

#: ../../c-api/exceptions.rst:1016
msgid ":c:data:`PyExc_BaseException`"
msgstr ":c:data:`PyExc_BaseException`"

#: ../../c-api/exceptions.rst:1016
msgid ":exc:`BaseException`"
msgstr ":exc:`BaseException`"

#: ../../c-api/exceptions.rst:1016 ../../c-api/exceptions.rst:1018
#: ../../c-api/exceptions.rst:1020 ../../c-api/exceptions.rst:1066
#: ../../c-api/exceptions.rst:1078
msgid "[1]_"
msgstr "[1]_"

#: ../../c-api/exceptions.rst:1018
msgid ":c:data:`PyExc_Exception`"
msgstr ":c:data:`PyExc_Exception`"

#: ../../c-api/exceptions.rst:1018
msgid ":exc:`Exception`"
msgstr ":exc:`Exception`"

#: ../../c-api/exceptions.rst:1020
msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ":c:data:`PyExc_ArithmeticError`"

#: ../../c-api/exceptions.rst:1020
msgid ":exc:`ArithmeticError`"
msgstr ":exc:`ArithmeticError`"

#: ../../c-api/exceptions.rst:1022
msgid ":c:data:`PyExc_AssertionError`"
msgstr ":c:data:`PyExc_AssertionError`"

#: ../../c-api/exceptions.rst:1022
msgid ":exc:`AssertionError`"
msgstr ":exc:`AssertionError`"

#: ../../c-api/exceptions.rst:1024
msgid ":c:data:`PyExc_AttributeError`"
msgstr ":c:data:`PyExc_AttributeError`"

#: ../../c-api/exceptions.rst:1024
msgid ":exc:`AttributeError`"
msgstr ":exc:`AttributeError`"

#: ../../c-api/exceptions.rst:1026
msgid ":c:data:`PyExc_BlockingIOError`"
msgstr ":c:data:`PyExc_BlockingIOError`"

#: ../../c-api/exceptions.rst:1026
msgid ":exc:`BlockingIOError`"
msgstr ":exc:`BlockingIOError`"

#: ../../c-api/exceptions.rst:1028
msgid ":c:data:`PyExc_BrokenPipeError`"
msgstr ":c:data:`PyExc_BrokenPipeError`"

#: ../../c-api/exceptions.rst:1028
msgid ":exc:`BrokenPipeError`"
msgstr ":exc:`BrokenPipeError`"

#: ../../c-api/exceptions.rst:1030
msgid ":c:data:`PyExc_BufferError`"
msgstr ":c:data:`PyExc_BufferError`"

#: ../../c-api/exceptions.rst:1030
msgid ":exc:`BufferError`"
msgstr ":exc:`BufferError`"

#: ../../c-api/exceptions.rst:1032
msgid ":c:data:`PyExc_ChildProcessError`"
msgstr ":c:data:`PyExc_ChildProcessError`"

#: ../../c-api/exceptions.rst:1032
msgid ":exc:`ChildProcessError`"
msgstr ":exc:`ChildProcessError`"

#: ../../c-api/exceptions.rst:1034
msgid ":c:data:`PyExc_ConnectionAbortedError`"
msgstr ":c:data:`PyExc_ConnectionAbortedError`"

#: ../../c-api/exceptions.rst:1034
msgid ":exc:`ConnectionAbortedError`"
msgstr ":exc:`ConnectionAbortedError`"

#: ../../c-api/exceptions.rst:1036
msgid ":c:data:`PyExc_ConnectionError`"
msgstr ":c:data:`PyExc_ConnectionError`"

#: ../../c-api/exceptions.rst:1036
msgid ":exc:`ConnectionError`"
msgstr ":exc:`ConnectionError`"

#: ../../c-api/exceptions.rst:1038
msgid ":c:data:`PyExc_ConnectionRefusedError`"
msgstr ":c:data:`PyExc_ConnectionRefusedError`"

#: ../../c-api/exceptions.rst:1038
msgid ":exc:`ConnectionRefusedError`"
msgstr ":exc:`ConnectionRefusedError`"

#: ../../c-api/exceptions.rst:1040
msgid ":c:data:`PyExc_ConnectionResetError`"
msgstr ":c:data:`PyExc_ConnectionResetError`"

#: ../../c-api/exceptions.rst:1040
msgid ":exc:`ConnectionResetError`"
msgstr ":exc:`ConnectionResetError`"

#: ../../c-api/exceptions.rst:1042
msgid ":c:data:`PyExc_EOFError`"
msgstr ":c:data:`PyExc_EOFError`"

#: ../../c-api/exceptions.rst:1042
msgid ":exc:`EOFError`"
msgstr ":exc:`EOFError`"

#: ../../c-api/exceptions.rst:1044
msgid ":c:data:`PyExc_FileExistsError`"
msgstr ":c:data:`PyExc_FileExistsError`"

#: ../../c-api/exceptions.rst:1044
msgid ":exc:`FileExistsError`"
msgstr ":exc:`FileExistsError`"

#: ../../c-api/exceptions.rst:1046
msgid ":c:data:`PyExc_FileNotFoundError`"
msgstr ":c:data:`PyExc_FileNotFoundError`"

#: ../../c-api/exceptions.rst:1046
msgid ":exc:`FileNotFoundError`"
msgstr ":exc:`FileNotFoundError`"

#: ../../c-api/exceptions.rst:1048
msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ":c:data:`PyExc_FloatingPointError`"

#: ../../c-api/exceptions.rst:1048
msgid ":exc:`FloatingPointError`"
msgstr ":exc:`FloatingPointError`"

#: ../../c-api/exceptions.rst:1050
msgid ":c:data:`PyExc_GeneratorExit`"
msgstr ":c:data:`PyExc_GeneratorExit`"

#: ../../c-api/exceptions.rst:1050
msgid ":exc:`GeneratorExit`"
msgstr ":exc:`GeneratorExit`"

#: ../../c-api/exceptions.rst:1052
msgid ":c:data:`PyExc_ImportError`"
msgstr ":c:data:`PyExc_ImportError`"

#: ../../c-api/exceptions.rst:1052
msgid ":exc:`ImportError`"
msgstr ":exc:`ImportError`"

#: ../../c-api/exceptions.rst:1054
msgid ":c:data:`PyExc_IndentationError`"
msgstr ":c:data:`PyExc_IndentationError`"

#: ../../c-api/exceptions.rst:1054
msgid ":exc:`IndentationError`"
msgstr ":exc:`IndentationError`"

#: ../../c-api/exceptions.rst:1056
msgid ":c:data:`PyExc_IndexError`"
msgstr ":c:data:`PyExc_IndexError`"

#: ../../c-api/exceptions.rst:1056
msgid ":exc:`IndexError`"
msgstr ":exc:`IndexError`"

#: ../../c-api/exceptions.rst:1058
msgid ":c:data:`PyExc_InterruptedError`"
msgstr ":c:data:`PyExc_InterruptedError`"

#: ../../c-api/exceptions.rst:1058
msgid ":exc:`InterruptedError`"
msgstr ":exc:`InterruptedError`"

#: ../../c-api/exceptions.rst:1060
msgid ":c:data:`PyExc_IsADirectoryError`"
msgstr ":c:data:`PyExc_IsADirectoryError`"

#: ../../c-api/exceptions.rst:1060
msgid ":exc:`IsADirectoryError`"
msgstr ":exc:`IsADirectoryError`"

#: ../../c-api/exceptions.rst:1062
msgid ":c:data:`PyExc_KeyError`"
msgstr ":c:data:`PyExc_KeyError`"

#: ../../c-api/exceptions.rst:1062
msgid ":exc:`KeyError`"
msgstr ":exc:`KeyError`"

#: ../../c-api/exceptions.rst:1064
msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ":c:data:`PyExc_KeyboardInterrupt`"

#: ../../c-api/exceptions.rst:1064
msgid ":exc:`KeyboardInterrupt`"
msgstr ":exc:`KeyboardInterrupt`"

#: ../../c-api/exceptions.rst:1066
msgid ":c:data:`PyExc_LookupError`"
msgstr ":c:data:`PyExc_LookupError`"

#: ../../c-api/exceptions.rst:1066
msgid ":exc:`LookupError`"
msgstr ":exc:`LookupError`"

#: ../../c-api/exceptions.rst:1068
msgid ":c:data:`PyExc_MemoryError`"
msgstr ":c:data:`PyExc_MemoryError`"

#: ../../c-api/exceptions.rst:1068
msgid ":exc:`MemoryError`"
msgstr ":exc:`MemoryError`"

#: ../../c-api/exceptions.rst:1070
msgid ":c:data:`PyExc_ModuleNotFoundError`"
msgstr ":c:data:`PyExc_ModuleNotFoundError`"

#: ../../c-api/exceptions.rst:1070
msgid ":exc:`ModuleNotFoundError`"
msgstr ":exc:`ModuleNotFoundError`"

#: ../../c-api/exceptions.rst:1072
msgid ":c:data:`PyExc_NameError`"
msgstr ":c:data:`PyExc_NameError`"

#: ../../c-api/exceptions.rst:1072
msgid ":exc:`NameError`"
msgstr ":exc:`NameError`"

#: ../../c-api/exceptions.rst:1074
msgid ":c:data:`PyExc_NotADirectoryError`"
msgstr ":c:data:`PyExc_NotADirectoryError`"

#: ../../c-api/exceptions.rst:1074
msgid ":exc:`NotADirectoryError`"
msgstr ":exc:`NotADirectoryError`"

#: ../../c-api/exceptions.rst:1076
msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ":c:data:`PyExc_NotImplementedError`"

#: ../../c-api/exceptions.rst:1076
msgid ":exc:`NotImplementedError`"
msgstr ":exc:`NotImplementedError`"

#: ../../c-api/exceptions.rst:1078
msgid ":c:data:`PyExc_OSError`"
msgstr ":c:data:`PyExc_OSError`"

#: ../../c-api/exceptions.rst:1078
msgid ":exc:`OSError`"
msgstr ":exc:`OSError`"

#: ../../c-api/exceptions.rst:1080
msgid ":c:data:`PyExc_OverflowError`"
msgstr ":c:data:`PyExc_OverflowError`"

#: ../../c-api/exceptions.rst:1080
msgid ":exc:`OverflowError`"
msgstr ":exc:`OverflowError`"

#: ../../c-api/exceptions.rst:1082
msgid ":c:data:`PyExc_PermissionError`"
msgstr ":c:data:`PyExc_PermissionError`"

#: ../../c-api/exceptions.rst:1082
msgid ":exc:`PermissionError`"
msgstr ":exc:`PermissionError`"

#: ../../c-api/exceptions.rst:1084
msgid ":c:data:`PyExc_ProcessLookupError`"
msgstr ":c:data:`PyExc_ProcessLookupError`"

#: ../../c-api/exceptions.rst:1084
msgid ":exc:`ProcessLookupError`"
msgstr ":exc:`ProcessLookupError`"

#: ../../c-api/exceptions.rst:1086
msgid ":c:data:`PyExc_RecursionError`"
msgstr ":c:data:`PyExc_RecursionError`"

#: ../../c-api/exceptions.rst:1086
msgid ":exc:`RecursionError`"
msgstr ":exc:`RecursionError`"

#: ../../c-api/exceptions.rst:1088
msgid ":c:data:`PyExc_ReferenceError`"
msgstr ":c:data:`PyExc_ReferenceError`"

#: ../../c-api/exceptions.rst:1088
msgid ":exc:`ReferenceError`"
msgstr ":exc:`ReferenceError`"

#: ../../c-api/exceptions.rst:1090
msgid ":c:data:`PyExc_RuntimeError`"
msgstr ":c:data:`PyExc_RuntimeError`"

#: ../../c-api/exceptions.rst:1090
msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

#: ../../c-api/exceptions.rst:1092
msgid ":c:data:`PyExc_StopAsyncIteration`"
msgstr ":c:data:`PyExc_StopAsyncIteration`"

#: ../../c-api/exceptions.rst:1092
msgid ":exc:`StopAsyncIteration`"
msgstr ":exc:`StopAsyncIteration`"

#: ../../c-api/exceptions.rst:1094
msgid ":c:data:`PyExc_StopIteration`"
msgstr ":c:data:`PyExc_StopIteration`"

#: ../../c-api/exceptions.rst:1094
msgid ":exc:`StopIteration`"
msgstr ":exc:`StopIteration`"

#: ../../c-api/exceptions.rst:1096
msgid ":c:data:`PyExc_SyntaxError`"
msgstr ":c:data:`PyExc_SyntaxError`"

#: ../../c-api/exceptions.rst:1096
msgid ":exc:`SyntaxError`"
msgstr ":exc:`SyntaxError`"

#: ../../c-api/exceptions.rst:1098
msgid ":c:data:`PyExc_SystemError`"
msgstr ":c:data:`PyExc_SystemError`"

#: ../../c-api/exceptions.rst:1098
msgid ":exc:`SystemError`"
msgstr ":exc:`SystemError`"

#: ../../c-api/exceptions.rst:1100
msgid ":c:data:`PyExc_SystemExit`"
msgstr ":c:data:`PyExc_SystemExit`"

#: ../../c-api/exceptions.rst:1100
msgid ":exc:`SystemExit`"
msgstr ":exc:`SystemExit`"

#: ../../c-api/exceptions.rst:1102
msgid ":c:data:`PyExc_TabError`"
msgstr ":c:data:`PyExc_TabError`"

#: ../../c-api/exceptions.rst:1102
msgid ":exc:`TabError`"
msgstr ":exc:`TabError`"

#: ../../c-api/exceptions.rst:1104
msgid ":c:data:`PyExc_TimeoutError`"
msgstr ":c:data:`PyExc_TimeoutError`"

#: ../../c-api/exceptions.rst:1104
msgid ":exc:`TimeoutError`"
msgstr ":exc:`TimeoutError`"

#: ../../c-api/exceptions.rst:1106
msgid ":c:data:`PyExc_TypeError`"
msgstr ":c:data:`PyExc_TypeError`"

#: ../../c-api/exceptions.rst:1106
msgid ":exc:`TypeError`"
msgstr ":exc:`TypeError`"

#: ../../c-api/exceptions.rst:1108
msgid ":c:data:`PyExc_UnboundLocalError`"
msgstr ":c:data:`PyExc_UnboundLocalError`"

#: ../../c-api/exceptions.rst:1108
msgid ":exc:`UnboundLocalError`"
msgstr ":exc:`UnboundLocalError`"

#: ../../c-api/exceptions.rst:1110
msgid ":c:data:`PyExc_UnicodeDecodeError`"
msgstr ":c:data:`PyExc_UnicodeDecodeError`"

#: ../../c-api/exceptions.rst:1110
msgid ":exc:`UnicodeDecodeError`"
msgstr ":exc:`UnicodeDecodeError`"

#: ../../c-api/exceptions.rst:1112
msgid ":c:data:`PyExc_UnicodeEncodeError`"
msgstr ":c:data:`PyExc_UnicodeEncodeError`"

#: ../../c-api/exceptions.rst:1112
msgid ":exc:`UnicodeEncodeError`"
msgstr ":exc:`UnicodeEncodeError`"

#: ../../c-api/exceptions.rst:1114
msgid ":c:data:`PyExc_UnicodeError`"
msgstr ":c:data:`PyExc_UnicodeError`"

#: ../../c-api/exceptions.rst:1114
msgid ":exc:`UnicodeError`"
msgstr ":exc:`UnicodeError`"

#: ../../c-api/exceptions.rst:1116
msgid ":c:data:`PyExc_UnicodeTranslateError`"
msgstr ":c:data:`PyExc_UnicodeTranslateError`"

#: ../../c-api/exceptions.rst:1116
msgid ":exc:`UnicodeTranslateError`"
msgstr ":exc:`UnicodeTranslateError`"

#: ../../c-api/exceptions.rst:1118
msgid ":c:data:`PyExc_ValueError`"
msgstr ":c:data:`PyExc_ValueError`"

#: ../../c-api/exceptions.rst:1118
msgid ":exc:`ValueError`"
msgstr ":exc:`ValueError`"

#: ../../c-api/exceptions.rst:1120
msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ":c:data:`PyExc_ZeroDivisionError`"

#: ../../c-api/exceptions.rst:1120
msgid ":exc:`ZeroDivisionError`"
msgstr ":exc:`ZeroDivisionError`"

#: ../../c-api/exceptions.rst:1123
msgid ""
":c:data:`PyExc_BlockingIOError`, :c:data:`PyExc_BrokenPipeError`, :c:data:"
"`PyExc_ChildProcessError`, :c:data:`PyExc_ConnectionError`, :c:data:"
"`PyExc_ConnectionAbortedError`, :c:data:`PyExc_ConnectionRefusedError`, :c:"
"data:`PyExc_ConnectionResetError`, :c:data:`PyExc_FileExistsError`, :c:data:"
"`PyExc_FileNotFoundError`, :c:data:`PyExc_InterruptedError`, :c:data:"
"`PyExc_IsADirectoryError`, :c:data:`PyExc_NotADirectoryError`, :c:data:"
"`PyExc_PermissionError`, :c:data:`PyExc_ProcessLookupError` and :c:data:"
"`PyExc_TimeoutError` were introduced following :pep:`3151`."
msgstr ""
":c:data:`PyExc_BlockingIOError`, :c:data:`PyExc_BrokenPipeError`, :c:data:"
"`PyExc_ChildProcessError`, :c:data:`PyExc_ConnectionError`, :c:data:"
"`PyExc_ConnectionAbortedError`, :c:data:`PyExc_ConnectionRefusedError`, :c:"
"data:`PyExc_ConnectionResetError`, :c:data:`PyExc_FileExistsError`, :c:data:"
"`PyExc_FileNotFoundError`, :c:data:`PyExc_InterruptedError`, :c:data:"
"`PyExc_IsADirectoryError`, :c:data:`PyExc_NotADirectoryError`, :c:data:"
"`PyExc_PermissionError`, :c:data:`PyExc_ProcessLookupError` y :c:data:"
"`PyExc_TimeoutError` se introdujeron a continuación de :pep:`3151`."

#: ../../c-api/exceptions.rst:1133
msgid ":c:data:`PyExc_StopAsyncIteration` and :c:data:`PyExc_RecursionError`."
msgstr ":c:data:`PyExc_StopAsyncIteration` y :c:data:`PyExc_RecursionError`."

#: ../../c-api/exceptions.rst:1136
msgid ":c:data:`PyExc_ModuleNotFoundError`."
msgstr ":c:data:`PyExc_ModuleNotFoundError`."

#: ../../c-api/exceptions.rst:1139
msgid "These are compatibility aliases to :c:data:`PyExc_OSError`:"
msgstr "Se trata de alias de compatibilidad de :c:data:`PyExc_OSError`:"

#: ../../c-api/exceptions.rst:1149
msgid ":c:data:`!PyExc_EnvironmentError`"
msgstr ":c:data:`!PyExc_EnvironmentError`"

#: ../../c-api/exceptions.rst:1151
msgid ":c:data:`!PyExc_IOError`"
msgstr ":c:data:`!PyExc_IOError`"

#: ../../c-api/exceptions.rst:1153
msgid ":c:data:`!PyExc_WindowsError`"
msgstr ":c:data:`!PyExc_WindowsError`"

#: ../../c-api/exceptions.rst:1153
msgid "[2]_"
msgstr "[2]_"

#: ../../c-api/exceptions.rst:1156
msgid "These aliases used to be separate exception types."
msgstr "Estos alias solían ser tipos de excepción independientes."

#: ../../c-api/exceptions.rst:1159 ../../c-api/exceptions.rst:1220
msgid "Notes:"
msgstr "Notas:"

#: ../../c-api/exceptions.rst:1162
msgid "This is a base class for other standard exceptions."
msgstr "Se trata de una clase base para otras excepciones estándar."

#: ../../c-api/exceptions.rst:1165
msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""
"Sólo definida en Windows; proteja el código que la utiliza comprobando que "
"la macro de preprocesador ``MS_WINDOWS`` está definida."

#: ../../c-api/exceptions.rst:1171
msgid "Standard Warning Categories"
msgstr "Categorías de advertencia estándar"

#: ../../c-api/exceptions.rst:1173
msgid ""
"All standard Python warning categories are available as global variables "
"whose names are ``PyExc_`` followed by the Python exception name. These have "
"the type :c:expr:`PyObject*`; they are all class objects. For completeness, "
"here are all the variables:"
msgstr ""
"Todas las categorías de advertencia estándar de Python están disponibles "
"como variables globales cuyos nombres son ``PyExc_`` seguido del nombre de "
"excepción de Python. Éstas tienen el tipo :c:expr:`PyObject*`; todas son "
"objetos de clase. Para completar, aquí están todas las variables:"

#: ../../c-api/exceptions.rst:1194
msgid ":c:data:`PyExc_Warning`"
msgstr ":c:data:`PyExc_Warning`"

#: ../../c-api/exceptions.rst:1194
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../c-api/exceptions.rst:1194
msgid "[3]_"
msgstr "[3]_"

#: ../../c-api/exceptions.rst:1196
msgid ":c:data:`PyExc_BytesWarning`"
msgstr ":c:data:`PyExc_BytesWarning`"

#: ../../c-api/exceptions.rst:1196
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../c-api/exceptions.rst:1198
msgid ":c:data:`PyExc_DeprecationWarning`"
msgstr ":c:data:`PyExc_DeprecationWarning`"

#: ../../c-api/exceptions.rst:1198
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../c-api/exceptions.rst:1200
msgid ":c:data:`PyExc_FutureWarning`"
msgstr ":c:data:`PyExc_FutureWarning`"

#: ../../c-api/exceptions.rst:1200
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../c-api/exceptions.rst:1202
msgid ":c:data:`PyExc_ImportWarning`"
msgstr ":c:data:`PyExc_ImportWarning`"

#: ../../c-api/exceptions.rst:1202
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../c-api/exceptions.rst:1204
msgid ":c:data:`PyExc_PendingDeprecationWarning`"
msgstr ":c:data:`PyExc_PendingDeprecationWarning`"

#: ../../c-api/exceptions.rst:1204
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../c-api/exceptions.rst:1206
msgid ":c:data:`PyExc_ResourceWarning`"
msgstr ":c:data:`PyExc_ResourceWarning`"

#: ../../c-api/exceptions.rst:1206
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../c-api/exceptions.rst:1208
msgid ":c:data:`PyExc_RuntimeWarning`"
msgstr ":c:data:`PyExc_RuntimeWarning`"

#: ../../c-api/exceptions.rst:1208
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../c-api/exceptions.rst:1210
msgid ":c:data:`PyExc_SyntaxWarning`"
msgstr ":c:data:`PyExc_SyntaxWarning`"

#: ../../c-api/exceptions.rst:1210
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../c-api/exceptions.rst:1212
msgid ":c:data:`PyExc_UnicodeWarning`"
msgstr ":c:data:`PyExc_UnicodeWarning`"

#: ../../c-api/exceptions.rst:1212
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../c-api/exceptions.rst:1214
msgid ":c:data:`PyExc_UserWarning`"
msgstr ":c:data:`PyExc_UserWarning`"

#: ../../c-api/exceptions.rst:1214
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../c-api/exceptions.rst:1217
msgid ":c:data:`PyExc_ResourceWarning`."
msgstr ":c:data:`PyExc_ResourceWarning`."

#: ../../c-api/exceptions.rst:1223
msgid "This is a base class for other standard warning categories."
msgstr "Se trata de una clase base para otras categorías de aviso estándar."

#: ../../c-api/exceptions.rst:170
msgid "strerror (C function)"
msgstr "strerror (función C)"

#: ../../c-api/exceptions.rst:624 ../../c-api/exceptions.rst:655
#: ../../c-api/exceptions.rst:670
msgid "module"
msgstr "módulo"

#: ../../c-api/exceptions.rst:624 ../../c-api/exceptions.rst:655
#: ../../c-api/exceptions.rst:670
msgid "signal"
msgstr "señal"

#: ../../c-api/exceptions.rst:624 ../../c-api/exceptions.rst:655
msgid "SIGINT (C macro)"
msgstr "SIGINT (macro C)"

#: ../../c-api/exceptions.rst:624 ../../c-api/exceptions.rst:655
#: ../../c-api/exceptions.rst:670
msgid "KeyboardInterrupt (built-in exception)"
msgstr "KeyboardInterrupt (excepción incorporada)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_BaseException (C var)"
msgstr "PyExc_BaseException (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_Exception (C var)"
msgstr "PyExc_Exception (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ArithmeticError (C var)"
msgstr "PyExc_ArithmeticError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_AssertionError (C var)"
msgstr "PyExc_AssertionError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_AttributeError (C var)"
msgstr "PyExc_AttributeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_BlockingIOError (C var)"
msgstr "PyExc_BlockingIOError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_BrokenPipeError (C var)"
msgstr "PyExc_BrokenPipeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_BufferError (C var)"
msgstr "PyExc_BufferError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ChildProcessError (C var)"
msgstr "PyExc_ChildProcessError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ConnectionAbortedError (C var)"
msgstr "PyExc_ConnectionAbortedError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ConnectionError (C var)"
msgstr "PyExc_ConnectionError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ConnectionRefusedError (C var)"
msgstr "PyExc_ConnectionRefusedError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ConnectionResetError (C var)"
msgstr "PyExc_ConnectionResetError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_EOFError (C var)"
msgstr "PyExc_EOFError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_FileExistsError (C var)"
msgstr "PyExc_FileExistsError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_FileNotFoundError (C var)"
msgstr "PyExc_FileNotFoundError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_FloatingPointError (C var)"
msgstr "PyExc_FloatingPointError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_GeneratorExit (C var)"
msgstr "PyExc_GeneratorExit (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ImportError (C var)"
msgstr "PyExc_ImportError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_IndentationError (C var)"
msgstr "PyExc_IndentationError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_IndexError (C var)"
msgstr "PyExc_IndexError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_InterruptedError (C var)"
msgstr "PyExc_InterruptedError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_IsADirectoryError (C var)"
msgstr "PyExc_IsADirectoryError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_KeyError (C var)"
msgstr "PyExc_KeyError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_KeyboardInterrupt (C var)"
msgstr "PyExc_KeyboardInterrupt (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_LookupError (C var)"
msgstr "PyExc_LookupError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_MemoryError (C var)"
msgstr "PyExc_MemoryError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ModuleNotFoundError (C var)"
msgstr "PyExc_ModuleNotFoundError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_NameError (C var)"
msgstr "PyExc_NameError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_NotADirectoryError (C var)"
msgstr "PyExc_NotADirectoryError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_NotImplementedError (C var)"
msgstr "PyExc_NotImplementedError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_OSError (C var)"
msgstr "PyExc_OSError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_OverflowError (C var)"
msgstr "PyExc_OverflowError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_PermissionError (C var)"
msgstr "PyExc_PermissionError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ProcessLookupError (C var)"
msgstr "PyExc_ProcessLookupError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_RecursionError (C var)"
msgstr "PyExc_RecursionError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ReferenceError (C var)"
msgstr "PyExc_ReferenceError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_RuntimeError (C var)"
msgstr "PyExc_RuntimeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_StopAsyncIteration (C var)"
msgstr "PyExc_StopAsyncIteration (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_StopIteration (C var)"
msgstr "PyExc_StopIteration (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_SyntaxError (C var)"
msgstr "PyExc_SyntaxError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_SystemError (C var)"
msgstr "PyExc_SystemError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_SystemExit (C var)"
msgstr "PyExc_SystemExit (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_TabError (C var)"
msgstr "PyExc_TabError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_TimeoutError (C var)"
msgstr "PyExc_TimeoutError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_TypeError (C var)"
msgstr "PyExc_TypeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_UnboundLocalError (C var)"
msgstr "PyExc_UnboundLocalError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_UnicodeDecodeError (C var)"
msgstr "PyExc_UnicodeDecodeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_UnicodeEncodeError (C var)"
msgstr "PyExc_UnicodeEncodeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_UnicodeError (C var)"
msgstr "PyExc_UnicodeError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_UnicodeTranslateError (C var)"
msgstr "PyExc_UnicodeTranslateError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ValueError (C var)"
msgstr "PyExc_ValueError (C var)"

#: ../../c-api/exceptions.rst:958
msgid "PyExc_ZeroDivisionError (C var)"
msgstr "PyExc_ZeroDivisionError (C var)"

#: ../../c-api/exceptions.rst:1141
msgid "PyExc_EnvironmentError (C var)"
msgstr "PyExc_EnvironmentError (C var)"

#: ../../c-api/exceptions.rst:1141
msgid "PyExc_IOError (C var)"
msgstr "PyExc_IOError (C var)"

#: ../../c-api/exceptions.rst:1141
msgid "PyExc_WindowsError (C var)"
msgstr "PyExc_WindowsError (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_Warning (C var)"
msgstr "PyExc_Warning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_BytesWarning (C var)"
msgstr "PyExc_BytesWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_DeprecationWarning (C var)"
msgstr "PyExc_DeprecationWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_FutureWarning (C var)"
msgstr "PyExc_FutureWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_ImportWarning (C var)"
msgstr "PyExc_ImportWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_PendingDeprecationWarning (C var)"
msgstr "PyExc_PendingDeprecationWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_ResourceWarning (C var)"
msgstr "PyExc_ResourceWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_RuntimeWarning (C var)"
msgstr "PyExc_RuntimeWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_SyntaxWarning (C var)"
msgstr "PyExc_SyntaxWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_UnicodeWarning (C var)"
msgstr "PyExc_UnicodeWarning (C var)"

#: ../../c-api/exceptions.rst:1178
msgid "PyExc_UserWarning (C var)"
msgstr "PyExc_UserWarning (C var)"
