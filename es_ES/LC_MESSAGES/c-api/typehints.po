# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "Objetos para Type Hinting"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"Se proporcionan varios tipos incorporados para la sugerencia de tipos.  "
"Actualmente, existen dos tipos -- :ref:`GenericAlias <types-genericalias>` "
"y :ref:`Union <types-union>`.  Sólo ``GenericAlias`` está expuesto a C."

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a :c:expr:"
"`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any "
"``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically "
"constructed and ``__args__`` is set to ``(args,)``. Minimal checking is done "
"for the arguments, so the function will succeed even if *origin* is not a "
"type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is constructed "
"lazily from ``__args__``.  On failure, an exception is raised and ``NULL`` "
"is returned."
msgstr ""
"Crea un objeto :ref:`GenericAlias <types-genericalias>`. Equivale a llamar a "
"la clase de Python :class:`types.GenericAlias`.  Los argumentos *origin* y "
"*args* establecen los atributos ``__origin__`` y ``__args__`` de "
"``GenericAlias`` respectivamente. *origin* debe ser un :c:expr:"
"`PyTypeObject*`, y *args* puede ser un :c:expr:`PyTupleObject*` o cualquier "
"``PyObject*``.  Si *args* no es una tupla, se construye automáticamente una "
"tupla 1 y ``__args__`` se establece en ``(args,)``. Se realiza una "
"comprobación mínima de los argumentos, por lo que la función tendrá éxito "
"incluso si *origin* no es un tipo. El atributo ``__parameters__`` de "
"``GenericAlias`` se construye perezosamente a partir de ``__args__``.  Si "
"falla, se lanza una excepción y se devuelve ``NULL``."

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr ""
"Aquí tienes un ejemplo de cómo hacer que un tipo de extensión sea genérico::"

#: ../../c-api/typehints.rst:30
msgid ""
"...\n"
"static PyMethodDef my_obj_methods[] = {\n"
"    // Other methods.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP "
"585\"}\n"
"    ...\n"
"}"
msgstr ""
"...\n"
"static PyMethodDef mis_métodos_obj[] = {\n"
"    // Otros métodos.\n"
"    ...\n"
"    {\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"Ver PEP "
"585\"}\n"
"    ...\n"
"}"

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr "El método del modelo de datos :meth:`~object.__class_getitem__`."

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"El tipo C del objeto devuelto por :c:func:`Py_GenericAlias`. Equivalente a :"
"class:`types.GenericAlias` en Python."
