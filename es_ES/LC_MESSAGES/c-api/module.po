# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-25 15:01+0000\n"
"PO-Revision-Date: 2025-09-15 01:03+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/module.rst:6
msgid "Module Objects"
msgstr "Objetos del módulo"

#: ../../c-api/module.rst:15
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo de módulo de "
"Python.  Se expone a los programas Python como ``types.ModuleType``."

#: ../../c-api/module.rst:21
msgid ""
"Return true if *p* is a module object, or a subtype of a module object. This "
"function always succeeds."
msgstr ""
"Devuelve true si *p* es un objeto módulo, o un subtipo de un objeto módulo. "
"Esta función siempre tiene éxito."

#: ../../c-api/module.rst:27
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`.  This function always succeeds."
msgstr ""
"Devuelve true si *p* es un objeto módulo, pero no un subtipo de :c:data:"
"`PyModule_Type`. Esta función siempre tiene éxito."

#: ../../c-api/module.rst:40
msgid ""
"Return a new module object with :attr:`module.__name__` set to *name*. The "
"module's :attr:`!__name__`, :attr:`~module.__doc__`, :attr:`~module."
"__package__` and :attr:`~module.__loader__` attributes are filled in (all "
"but :attr:`!__name__` are set to ``None``). The caller is responsible for "
"setting a :attr:`~module.__file__` attribute."
msgstr ""
"Devuelve un nuevo objeto módulo con :attr:`module.__name__` como *nombre*. "
"Los atributos :attr:`!__name__`, :attr:`~module.__doc__`, :attr:`~module."
"__package__` y :attr:`~module.__loader__` del módulo se rellenan (todos "
"menos :attr:`!__name__` se establecen en ``None``). La persona que llama es "
"responsable de establecer un atributo :attr:`~module.__file__`."

#: ../../c-api/module.rst:46 ../../c-api/module.rst:276
#: ../../c-api/module.rst:496
msgid "Return ``NULL`` with an exception set on error."
msgstr "Devuelve ``NULL`` con una excepción en caso de error."

#: ../../c-api/module.rst:50
msgid ""
":attr:`~module.__package__` and :attr:`~module.__loader__` are now set to "
"``None``."
msgstr ""
":attr:`~module.__package__` y :attr:`~module.__loader__` están ahora en "
"``None``."

#: ../../c-api/module.rst:57
msgid ""
"Similar to :c:func:`PyModule_NewObject`, but the name is a UTF-8 encoded "
"string instead of a Unicode object."
msgstr ""
"Similar a :c:func:`PyModule_NewObject`, pero el nombre es una cadena "
"codificada en UTF-8 en lugar de un objeto Unicode."

#: ../../c-api/module.rst:65
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`~object.__dict__` attribute of the module "
"object. If *module* is not a module object (or a subtype of a module "
"object), :exc:`SystemError` is raised and ``NULL`` is returned."
msgstr ""
"Devuelve el objeto diccionario que implementa el espacio de nombres de "
"*module*; este objeto es el mismo que el atributo :attr:`~object.__dict__` "
"del objeto módulo. Si *module* no es un objeto módulo (o un subtipo de un "
"objeto módulo), se lanza :exc:`SystemError` y se devuelve ``NULL``."

#: ../../c-api/module.rst:70
msgid ""
"It is recommended extensions use other ``PyModule_*`` and ``PyObject_*`` "
"functions rather than directly manipulate a module's :attr:`~object."
"__dict__`."
msgstr ""
"Se recomienda que las extensiones utilicen otras funciones de ``PyModule_*`` "
"y ``PyObject_*`` en lugar de manipular directamente :attr:`~object.__dict__` "
"de un módulo."

#: ../../c-api/module.rst:81
msgid ""
"Return *module*'s :attr:`~module.__name__` value.  If the module does not "
"provide one, or if it is not a string, :exc:`SystemError` is raised and "
"``NULL`` is returned."
msgstr ""
"Devuelve el valor :attr:`~module.__name__` del *módulo*.  Si el módulo no "
"proporciona uno, o si no es una cadena, se levanta :exc:`SystemError` y se "
"devuelve ``NULL``."

#: ../../c-api/module.rst:90
msgid ""
"Similar to :c:func:`PyModule_GetNameObject` but return the name encoded to "
"``'utf-8'``."
msgstr ""
"Similar a :c:func:`PyModule_GetNameObject` pero devuelve el nombre "
"codificado en ``'utf-8'``."

#: ../../c-api/module.rst:95
msgid ""
"Return the \"state\" of the module, that is, a pointer to the block of "
"memory allocated at module creation time, or ``NULL``.  See :c:member:"
"`PyModuleDef.m_size`."
msgstr ""
"Devuelve el \"estado\" del módulo, es decir, un puntero al bloque de memoria "
"asignado en el momento de la creación del módulo, o ``NULL``. Ver :c:member:"
"`PyModuleDef.m_size`."

#: ../../c-api/module.rst:102
msgid ""
"Return a pointer to the :c:type:`PyModuleDef` struct from which the module "
"was created, or ``NULL`` if the module wasn't created from a definition."
msgstr ""
"Devuelve un puntero a la estructura :c:type:`PyModuleDef` a partir de la "
"cual se creó el módulo, o ``NULL`` si el módulo no se creó a partir de una "
"definición."

#: ../../c-api/module.rst:105
msgid ""
"On error, return ``NULL`` with an exception set. Use :c:func:"
"`PyErr_Occurred` to tell this case apart from a mising :c:type:`!"
"PyModuleDef`."
msgstr ""

#: ../../c-api/module.rst:116
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`~module.__file__` attribute.  If this is not defined, or if it is not "
"a string, raise :exc:`SystemError` and return ``NULL``; otherwise return a "
"reference to a Unicode object."
msgstr ""
"Devuelve el nombre del fichero desde el que se cargó *module* usando el "
"atributo :attr:`~module.__file__` de *module*.  Si éste no está definido, o "
"si no es una cadena, lanza :exc:`SystemError` y devuelve ``NULL``; de lo "
"contrario devuelve una referencia a un objeto Unicode."

#: ../../c-api/module.rst:126
msgid ""
"Similar to :c:func:`PyModule_GetFilenameObject` but return the filename "
"encoded to 'utf-8'."
msgstr ""
"Similar a :c:func:`PyModule_GetFilenameObject` pero devuelve el nombre de "
"archivo codificado en 'utf-8'."

#: ../../c-api/module.rst:129
msgid ""
":c:func:`PyModule_GetFilename` raises :exc:`UnicodeEncodeError` on "
"unencodable filenames, use :c:func:`PyModule_GetFilenameObject` instead."
msgstr ""
":c:func:`PyModule_GetFilename` aumenta :exc:`UnicodeEncodeError` en caso de "
"nombres de archivo no codificables, utilice :c:func:"
"`PyModule_GetFilenameObject` en su lugar."

#: ../../c-api/module.rst:137
msgid "Initializing C modules"
msgstr "Inicialización de módulos C"

#: ../../c-api/module.rst:139
msgid ""
"Modules objects are usually created from extension modules (shared libraries "
"which export an initialization function), or compiled-in modules (where the "
"initialization function is added using :c:func:`PyImport_AppendInittab`). "
"See :ref:`building` or :ref:`extending-with-embedding` for details."
msgstr ""
"Los objetos Modules se crean normalmente a partir de módulos de extensión "
"(bibliotecas compartidas que exportan una función de inicialización), o "
"módulos compilados (donde la función de inicialización se añade utilizando :"
"c:func:`PyImport_AppendInittab`). Ver para más detalles :ref:`building` o :"
"ref:`extending-with-embedding`."

#: ../../c-api/module.rst:144
msgid ""
"The initialization function can either pass a module definition instance to :"
"c:func:`PyModule_Create`, and return the resulting module object, or request "
"\"multi-phase initialization\" by returning the definition struct itself."
msgstr ""
"La función de inicialización puede pasar una instancia de definición de "
"módulo a :c:func:`PyModule_Create`, y devolver el objeto de módulo "
"resultante, o solicitar una \"inicialización multifase\" devolviendo la "
"propia estructura de definición."

#: ../../c-api/module.rst:150
msgid ""
"The module definition struct, which holds all information needed to create a "
"module object. There is usually only one statically initialized variable of "
"this type for each module."
msgstr ""
"La estructura de definición del módulo, que contiene toda la información "
"necesaria para crear un objeto módulo. Normalmente sólo hay una variable de "
"este tipo inicializada estáticamente para cada módulo."

#: ../../c-api/module.rst:156
msgid "Always initialize this member to :c:macro:`PyModuleDef_HEAD_INIT`."
msgstr "Inicialice siempre este miembro en :c:macro:`PyModuleDef_HEAD_INIT`."

#: ../../c-api/module.rst:160
msgid "Name for the new module."
msgstr "Nombre del nuevo módulo."

#: ../../c-api/module.rst:164
msgid ""
"Docstring for the module; usually a docstring variable created with :c:macro:"
"`PyDoc_STRVAR` is used."
msgstr ""
"Docstring para el módulo; normalmente se utiliza una variable docstring "
"creada con :c:macro:`PyDoc_STRVAR`."

#: ../../c-api/module.rst:169
msgid ""
"Module state may be kept in a per-module memory area that can be retrieved "
"with :c:func:`PyModule_GetState`, rather than in static globals. This makes "
"modules safe for use in multiple sub-interpreters."
msgstr ""
"El estado del módulo puede guardarse en un área de memoria por módulo que "
"puede recuperarse con :c:func:`PyModule_GetState`, en lugar de en globales "
"estáticos. Esto hace que los módulos sean seguros para su uso en múltiples "
"subinterpretadores."

#: ../../c-api/module.rst:173
msgid ""
"This memory area is allocated based on *m_size* on module creation, and "
"freed when the module object is deallocated, after the :c:member:"
"`~PyModuleDef.m_free` function has been called, if present."
msgstr ""
"Esta zona de memoria se asigna en función de *m_size* en la creación del "
"módulo, y se libera cuando se desasigna el objeto del módulo, después de que "
"se haya llamado a la función :c:member:`~PyModuleDef.m_free`, si está "
"presente."

#: ../../c-api/module.rst:177
msgid ""
"Setting ``m_size`` to ``-1`` means that the module does not support sub-"
"interpreters, because it has global state."
msgstr ""
"Establecer ``m_size`` a ``-1`` significa que el módulo no admite "
"subinterpretadores, porque tiene estado global."

#: ../../c-api/module.rst:180
msgid ""
"Setting it to a non-negative value means that the module can be re-"
"initialized and specifies the additional amount of memory it requires for "
"its state. Non-negative ``m_size`` is required for multi-phase "
"initialization."
msgstr ""
"Establecerlo a un valor no negativo significa que el módulo puede ser "
"reinicializado y especifica la cantidad adicional de memoria que requiere "
"para su estado. Se requiere ``m_size`` no negativo para la inicialización "
"multifase."

#: ../../c-api/module.rst:185
msgid "See :PEP:`3121` for more details."
msgstr "Ver :PEP:`3121` para más detalles."

#: ../../c-api/module.rst:189
msgid ""
"A pointer to a table of module-level functions, described by :c:type:"
"`PyMethodDef` values.  Can be ``NULL`` if no functions are present."
msgstr ""
"Un puntero a una tabla de funciones a nivel de módulo, descritas por "
"valores :c:type:`PyMethodDef`.  Puede ser ``NULL`` si no hay funciones "
"presentes."

#: ../../c-api/module.rst:194
msgid ""
"An array of slot definitions for multi-phase initialization, terminated by a "
"``{0, NULL}`` entry. When using single-phase initialization, *m_slots* must "
"be ``NULL``."
msgstr ""
"Una matriz de definiciones de ranuras para la inicialización multifase, "
"terminada por una entrada ``{0, NULL}``. Cuando se utiliza la inicialización "
"monofásica, *m_slots* debe ser ``NULL``."

#: ../../c-api/module.rst:200
msgid ""
"Prior to version 3.5, this member was always set to ``NULL``, and was "
"defined as:"
msgstr ""
"Antes de la versión 3.5, este miembro siempre se establecía en ``NULL``, y "
"se definía como:"

#: ../../c-api/module.rst:207
msgid ""
"A traversal function to call during GC traversal of the module object, or "
"``NULL`` if not needed."
msgstr ""
"Una función transversal a llamar durante el recorrido GC del objeto módulo, "
"o ``NULL`` si no es necesario."

#: ../../c-api/module.rst:210 ../../c-api/module.rst:225
#: ../../c-api/module.rst:246
msgid ""
"This function is not called if the module state was requested but is not "
"allocated yet. This is the case immediately after the module is created and "
"before the module is executed (:c:data:`Py_mod_exec` function). More "
"precisely, this function is not called if :c:member:`~PyModuleDef.m_size` is "
"greater than 0 and the module state (as returned by :c:func:"
"`PyModule_GetState`) is ``NULL``."
msgstr ""
"Esta función no se llama si se ha solicitado el estado del módulo pero aún "
"no se ha asignado. Este es el caso inmediatamente después de crear el módulo "
"y antes de ejecutarlo (función:c:data:`Py_mod_exec` ). Más concretamente, no "
"se llama a esta función si :c:member:`~PyModuleDef.m_size` es mayor que 0 y "
"el estado del módulo (devuelto por :c:func:`PyModule_GetState`) es ``NULL``."

#: ../../c-api/module.rst:217 ../../c-api/module.rst:238
#: ../../c-api/module.rst:253
msgid "No longer called before the module state is allocated."
msgstr "Ya no se llama antes de asignar el estado del módulo."

#: ../../c-api/module.rst:222
msgid ""
"A clear function to call during GC clearing of the module object, or "
"``NULL`` if not needed."
msgstr ""
"Una función de limpieza para llamar durante la limpieza GC del objeto "
"módulo, o ``NULL`` si no es necesario."

#: ../../c-api/module.rst:232
msgid ""
"Like :c:member:`PyTypeObject.tp_clear`, this function is not *always* called "
"before a module is deallocated. For example, when reference counting is "
"enough to determine that an object is no longer used, the cyclic garbage "
"collector is not involved and :c:member:`~PyModuleDef.m_free` is called "
"directly."
msgstr ""
"Al igual que :c:member:`PyTypeObject.tp_clear`, esta función no se llama "
"*siempre* antes de que se designe un módulo. Por ejemplo, cuando el recuento "
"de referencias es suficiente para determinar que un objeto ya no se utiliza, "
"el recolector de basura cíclico no interviene y se llama directamente a :c:"
"member:`~PyModuleDef.m_free`."

#: ../../c-api/module.rst:243
msgid ""
"A function to call during deallocation of the module object, or ``NULL`` if "
"not needed."
msgstr ""
"Una función a llamar durante la liberación del objeto módulo, o ``NULL`` si "
"no es necesario."

#: ../../c-api/module.rst:257
msgid "Single-phase initialization"
msgstr "Inicialización monofásica"

#: ../../c-api/module.rst:259
msgid ""
"The module initialization function may create and return the module object "
"directly. This is referred to as \"single-phase initialization\", and uses "
"one of the following two module creation functions:"
msgstr ""
"La función de inicialización del módulo puede crear y devolver el objeto "
"módulo directamente. Esto se denomina \"inicialización monofásica\" y "
"utiliza una de las dos funciones de creación de módulos siguientes:"

#: ../../c-api/module.rst:265
msgid ""
"Create a new module object, given the definition in *def*.  This behaves "
"like :c:func:`PyModule_Create2` with *module_api_version* set to :c:macro:"
"`PYTHON_API_VERSION`."
msgstr ""
"Crea un nuevo objeto módulo, dada la definición en *def*.  Esto se comporta "
"como :c:func:`PyModule_Create2` con *module_api_version* establecido en :c:"
"macro:`PYTHON_API_VERSION`."

#: ../../c-api/module.rst:272
msgid ""
"Create a new module object, given the definition in *def*, assuming the API "
"version *module_api_version*.  If that version does not match the version of "
"the running interpreter, a :exc:`RuntimeWarning` is emitted."
msgstr ""
"Crea un nuevo objeto módulo, dada la definición en *def*, asumiendo la "
"versión de la API *module_api_version*.  Si esa versión no coincide con la "
"versión del intérprete en ejecución, se emite un :exc:`RuntimeWarning`."

#: ../../c-api/module.rst:280
msgid ""
"Most uses of this function should be using :c:func:`PyModule_Create` "
"instead; only use this if you are sure you need it."
msgstr ""
"La mayoría de los usos de esta función deberían utilizar :c:func:"
"`PyModule_Create` en su lugar; utilícela sólo si está seguro de que la "
"necesita."

#: ../../c-api/module.rst:283
msgid ""
"Before it is returned from in the initialization function, the resulting "
"module object is typically populated using functions like :c:func:"
"`PyModule_AddObjectRef`."
msgstr ""
"Antes de devolverse en la función de inicialización, el objeto módulo "
"resultante se rellena normalmente utilizando funciones como :c:func:"
"`PyModule_AddObjectRef`."

#: ../../c-api/module.rst:289
msgid "Multi-phase initialization"
msgstr "Inicialización multifase"

#: ../../c-api/module.rst:291
msgid ""
"An alternate way to specify extensions is to request \"multi-phase "
"initialization\". Extension modules created this way behave more like Python "
"modules: the initialization is split between the *creation phase*, when the "
"module object is created, and the *execution phase*, when it is populated. "
"The distinction is similar to the :py:meth:`~object.__new__` and :py:meth:"
"`~object.__init__` methods of classes."
msgstr ""

#: ../../c-api/module.rst:298
msgid ""
"Unlike modules created using single-phase initialization, these modules are "
"not singletons. For example, if the :py:attr:`sys.modules` entry is removed "
"and the module is re-imported, a new module object is created, and typically "
"populated with fresh method and type objects. The old module is subject to "
"normal garbage collection. This mirrors the behavior of pure-Python modules."
msgstr ""

#: ../../c-api/module.rst:306
msgid ""
"Additional module instances may be created in :ref:`sub-interpreters <sub-"
"interpreter-support>` or after after Python runtime reinitialization (:c:"
"func:`Py_Finalize` and :c:func:`Py_Initialize`). In these cases, sharing "
"Python objects between module instances would likely cause crashes or "
"undefined behavior."
msgstr ""

#: ../../c-api/module.rst:313
msgid ""
"To avoid such issues, each instance of an extension module should be "
"*isolated*: changes to one instance should not implicitly affect the others, "
"and all state, including references to Python objects, should be specific to "
"a particular module instance. See :ref:`isolating-extensions-howto` for more "
"details and a practical guide."
msgstr ""

#: ../../c-api/module.rst:319
msgid ""
"A simpler way to avoid these issues is :ref:`raising an error on repeated "
"initialization <isolating-extensions-optout>`."
msgstr ""

#: ../../c-api/module.rst:322
msgid ""
"All modules created using multi-phase initialization are expected to "
"support :ref:`sub-interpreters <sub-interpreter-support>`, or otherwise "
"explicitly signal a lack of support. This is usually achieved by isolation "
"or blocking repeated initialization, as above. A module may also be limited "
"to the main interpreter using the :c:data:`Py_mod_multiple_interpreters` "
"slot."
msgstr ""

#: ../../c-api/module.rst:330
msgid ""
"To request multi-phase initialization, the initialization function "
"(PyInit_modulename) returns a :c:type:`PyModuleDef` instance with non-empty :"
"c:member:`~PyModuleDef.m_slots`. Before it is returned, the ``PyModuleDef`` "
"instance must be initialized with the following function:"
msgstr ""
"Para solicitar la inicialización multifase, la función de inicialización "
"(PyInit_modulename) devuelve una instancia :c:type:`PyModuleDef` con :c:"
"member:`~PyModuleDef.m_slots` no vacía. Antes de que se devuelva, la "
"instancia ``PyModuleDef`` se debe inicializar con la siguiente función:"

#: ../../c-api/module.rst:337
msgid ""
"Ensures a module definition is a properly initialized Python object that "
"correctly reports its type and reference count."
msgstr ""
"Asegura que la definición de un módulo es un objeto Python inicializado "
"correctamente que informa correctamente de su tipo y número de referencias."

#: ../../c-api/module.rst:340
msgid "Returns *def* cast to ``PyObject*``, or ``NULL`` if an error occurred."
msgstr ""
"Devuelve *def* convertido a ``PyObject*``, o ``NULL`` si se ha producido un "
"error."

#: ../../c-api/module.rst:344
msgid ""
"The *m_slots* member of the module definition must point to an array of "
"``PyModuleDef_Slot`` structures:"
msgstr ""
"El miembro *m_slots* de la definición del módulo debe apuntar a una matriz "
"de estructuras ``PyModuleDef_Slot``:"

#: ../../c-api/module.rst:351
msgid "A slot ID, chosen from the available values explained below."
msgstr ""
"Un ID de ranura, elegido entre los valores disponibles que se explican a "
"continuación."

#: ../../c-api/module.rst:355
msgid "Value of the slot, whose meaning depends on the slot ID."
msgstr "Valor de la ranura, cuyo significado depende del ID de la ranura."

#: ../../c-api/module.rst:359
msgid "The *m_slots* array must be terminated by a slot with id 0."
msgstr "La matriz *m_slots* debe estar terminada por una ranura con id 0."

#: ../../c-api/module.rst:361
msgid "The available slot types are:"
msgstr "Los tipos de ranura disponibles son:"

#: ../../c-api/module.rst:365
msgid ""
"Specifies a function that is called to create the module object itself. The "
"*value* pointer of this slot must point to a function of the signature:"
msgstr ""
"Especifica una función a la que se llama para crear el propio objeto del "
"módulo. El puntero *value* de esta ranura debe apuntar a una función de la "
"firma:"

#: ../../c-api/module.rst:372
msgid ""
"The function receives a :py:class:`~importlib.machinery.ModuleSpec` "
"instance, as defined in :PEP:`451`, and the module definition. It should "
"return a new module object, or set an error and return ``NULL``."
msgstr ""
"La función recibe una instancia de :py:class:`~importlib.machinery."
"ModuleSpec`, como se define en :PEP:`451`, y la definición del módulo. Debe "
"devolver un nuevo objeto módulo, o establecer un error y devolver ``NULL``."

#: ../../c-api/module.rst:377
msgid ""
"This function should be kept minimal. In particular, it should not call "
"arbitrary Python code, as trying to import the same module again may result "
"in an infinite loop."
msgstr ""
"Esta función debe ser mínima. En particular, no debe llamar a código Python "
"arbitrario, ya que intentar importar el mismo módulo de nuevo puede resultar "
"en un bucle infinito."

#: ../../c-api/module.rst:381
msgid ""
"Multiple ``Py_mod_create`` slots may not be specified in one module "
"definition."
msgstr ""
"No se pueden especificar varias ranuras ``Py_mod_create`` en una definición "
"de módulo."

#: ../../c-api/module.rst:384
msgid ""
"If ``Py_mod_create`` is not specified, the import machinery will create a "
"normal module object using :c:func:`PyModule_New`. The name is taken from "
"*spec*, not the definition, to allow extension modules to dynamically adjust "
"to their place in the module hierarchy and be imported under different names "
"through symlinks, all while sharing a single module definition."
msgstr ""
"Si no se especifica ``Py_mod_create``, la maquinaria de importación creará "
"un objeto módulo normal utilizando :c:func:`PyModule_New`. El nombre se toma "
"de *spec*, no de la definición, para permitir que los módulos de extensión "
"se ajusten dinámicamente a su lugar en la jerarquía de módulos y se importen "
"con diferentes nombres a través de enlaces simbólicos, todo ello "
"compartiendo una única definición de módulo."

#: ../../c-api/module.rst:390
msgid ""
"There is no requirement for the returned object to be an instance of :c:type:"
"`PyModule_Type`. Any type can be used, as long as it supports setting and "
"getting import-related attributes. However, only ``PyModule_Type`` instances "
"may be returned if the ``PyModuleDef`` has non-``NULL`` ``m_traverse``, "
"``m_clear``, ``m_free``; non-zero ``m_size``; or slots other than "
"``Py_mod_create``."
msgstr ""
"No es necesario que el objeto devuelto sea una instancia de :c:type:"
"`PyModule_Type`. Se puede utilizar cualquier tipo, siempre y cuando admita "
"establecer y obtener atributos relacionados con la importación. Sin embargo, "
"sólo pueden devolverse instancias de ``PyModule_Type`` si el ``PyModuleDef`` "
"no tiene``NULL`` ``m_traverse`` , ``m_clear``, ``m_free``; ``m_size`` no "
"nulo ; o ranuras distintas de ``Py_mod_create``."

#: ../../c-api/module.rst:399
msgid ""
"Specifies a function that is called to *execute* the module. This is "
"equivalent to executing the code of a Python module: typically, this "
"function adds classes and constants to the module. The signature of the "
"function is:"
msgstr ""
"Especifica una función que se llama para *ejecutar* el módulo. Esto equivale "
"a ejecutar el código de un módulo de Python: normalmente, esta función añade "
"clases y constantes al módulo. La firma de la función es:"

#: ../../c-api/module.rst:408
msgid ""
"If multiple ``Py_mod_exec`` slots are specified, they are processed in the "
"order they appear in the *m_slots* array."
msgstr ""
"Si se especifican varias ranuras ``Py_mod_exec``, se procesan en el orden en "
"que aparecen en la matriz *m_slots*."

#: ../../c-api/module.rst:413 ../../c-api/module.rst:446
msgid "Specifies one of the following values:"
msgstr "Especifica uno de los siguientes valores:"

#: ../../c-api/module.rst:419
msgid "The module does not support being imported in subinterpreters."
msgstr "El módulo no admite ser importado en subinterpretadores."

#: ../../c-api/module.rst:423
msgid ""
"The module supports being imported in subinterpreters, but only when they "
"share the main interpreter's GIL. (See :ref:`isolating-extensions-howto`.)"
msgstr ""
"El módulo admite ser importado en subinterpretes, pero sólo cuando comparten "
"el GIL del intérprete principal. (Ver :ref:`isolating-extensions-howto`.)"

#: ../../c-api/module.rst:429
msgid ""
"The module supports being imported in subinterpreters, even when they have "
"their own GIL. (See :ref:`isolating-extensions-howto`.)"
msgstr ""
"El módulo soporta ser importado en subinterpretadores, incluso cuando tienen "
"su propio GIL. (Ver :ref:`isolating-extensions-howto`.)"

#: ../../c-api/module.rst:433
msgid ""
"This slot determines whether or not importing this module in a "
"subinterpreter will fail."
msgstr ""
"Esta ranura determina si la importación de este módulo en un subinterprete "
"fallará o no."

#: ../../c-api/module.rst:436
msgid ""
"Multiple ``Py_mod_multiple_interpreters`` slots may not be specified in one "
"module definition."
msgstr ""
"No se pueden especificar varias ranuras ``Py_mod_multiple_interpreters`` en "
"una definición de módulo."

#: ../../c-api/module.rst:439
msgid ""
"If ``Py_mod_multiple_interpreters`` is not specified, the import machinery "
"defaults to ``Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED``."
msgstr ""
"Si no se especifica ``Py_mod_multiple_interpreters``, la maquinaria de "
"importación pasa por defecto a ``Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED``."

#: ../../c-api/module.rst:452
msgid ""
"The module depends on the presence of the global interpreter lock (GIL), and "
"may access global state without synchronization."
msgstr ""

#: ../../c-api/module.rst:457
msgid "The module is safe to run without an active GIL."
msgstr ""

#: ../../c-api/module.rst:459
msgid ""
"This slot is ignored by Python builds not configured with :option:`--disable-"
"gil`.  Otherwise, it determines whether or not importing this module will "
"cause the GIL to be automatically enabled. See :ref:`whatsnew313-free-"
"threaded-cpython` for more detail."
msgstr ""

#: ../../c-api/module.rst:464
msgid ""
"Multiple ``Py_mod_gil`` slots may not be specified in one module definition."
msgstr ""

#: ../../c-api/module.rst:466
msgid ""
"If ``Py_mod_gil`` is not specified, the import machinery defaults to "
"``Py_MOD_GIL_USED``."
msgstr ""

#: ../../c-api/module.rst:471
msgid "See :PEP:`489` for more details on multi-phase initialization."
msgstr "Ver :PEP:`489` para más detalles sobre la inicialización multifase."

#: ../../c-api/module.rst:474
msgid "Low-level module creation functions"
msgstr "Funciones de creación de módulos de bajo nivel"

#: ../../c-api/module.rst:476
msgid ""
"The following functions are called under the hood when using multi-phase "
"initialization. They can be used directly, for example when creating module "
"objects dynamically. Note that both ``PyModule_FromDefAndSpec`` and "
"``PyModule_ExecDef`` must be called to fully initialize a module."
msgstr ""
"Se llaman las siguientes funciones bajo la capucha cuando se utiliza la "
"inicialización multifase. Se pueden utilizar directamente, por ejemplo, al "
"crear objetos de módulo de forma dinámica. Tener en cuenta que tanto "
"``PyModule_FromDefAndSpec`` y ``PyModule_ExecDef`` se deben llamar para "
"inicializar completamente un módulo."

#: ../../c-api/module.rst:483
msgid ""
"Create a new module object, given the definition in *def* and the ModuleSpec "
"*spec*.  This behaves like :c:func:`PyModule_FromDefAndSpec2` with "
"*module_api_version* set to :c:macro:`PYTHON_API_VERSION`."
msgstr ""
"Crea un nuevo objeto módulo, dada la definición en *def* y el ModuleSpec "
"*spec*.  Esto se comporta como :c:func:`PyModule_FromDefAndSpec2` con "
"*module_api_version* establecido a :c:macro:`PYTHON_API_VERSION`."

#: ../../c-api/module.rst:491
msgid ""
"Create a new module object, given the definition in *def* and the ModuleSpec "
"*spec*, assuming the API version *module_api_version*. If that version does "
"not match the version of the running interpreter, a :exc:`RuntimeWarning` is "
"emitted."
msgstr ""
"Crea un nuevo objeto módulo, dada la definición en *def* y el ModuleSpec "
"*spec*, asumiendo la versión de la API *module_api_version*. Si esa versión "
"no coincide con la versión del intérprete en ejecución, se emite un :exc:"
"`RuntimeWarning`."

#: ../../c-api/module.rst:500
msgid ""
"Most uses of this function should be using :c:func:`PyModule_FromDefAndSpec` "
"instead; only use this if you are sure you need it."
msgstr ""
"La mayoría de los usos de esta función deberían utilizar :c:func:"
"`PyModule_FromDefAndSpec` en su lugar; utilizarse sólo si se está seguro de "
"que se necesita."

#: ../../c-api/module.rst:507
msgid "Process any execution slots (:c:data:`Py_mod_exec`) given in *def*."
msgstr ""
"Procesa cualquier ranura de ejecución (:c:data:`Py_mod_exec`) dada en *def*."

#: ../../c-api/module.rst:513
msgid ""
"Set the docstring for *module* to *docstring*. This function is called "
"automatically when creating a module from ``PyModuleDef``, using either "
"``PyModule_Create`` or ``PyModule_FromDefAndSpec``."
msgstr ""
"Establece el docstring para *module* en *docstring*. Esta función se ejecuta "
"automáticamente al crear un módulo a partir de ``PyModuleDef``, utilizando "
"``PyModule_Create`` o ``PyModule_FromDefAndSpec``."

#: ../../c-api/module.rst:522
msgid ""
"Add the functions from the ``NULL`` terminated *functions* array to "
"*module*. Refer to the :c:type:`PyMethodDef` documentation for details on "
"individual entries (due to the lack of a shared module namespace, module "
"level \"functions\" implemented in C typically receive the module as their "
"first parameter, making them similar to instance methods on Python classes). "
"This function is called automatically when creating a module from "
"``PyModuleDef``, using either ``PyModule_Create`` or "
"``PyModule_FromDefAndSpec``."
msgstr ""
"Añadir las funciones del array *functions* terminado en ``NULL`` a *module*. "
"Consultar la documentación de :c:type:`PyMethodDef` para obtener más "
"información sobre las entradas individuales (debido a la falta de un espacio "
"de nombres de módulo compartido, las \"funciones\" de nivel de módulo "
"implementadas en C suelen recibir el módulo como primer parámetro, lo que "
"las hace similares a los métodos de instancia de las clases de Python). Esta "
"función se llama automáticamente cuando se crea un módulo desde "
"``PyModuleDef``, usando ``PyModule_Create`` o ``PyModule_FromDefAndSpec``."

#: ../../c-api/module.rst:534
msgid "Support functions"
msgstr "Funciones de apoyo"

#: ../../c-api/module.rst:536
msgid ""
"The module initialization function (if using single phase initialization) or "
"a function called from a module execution slot (if using multi-phase "
"initialization), can use the following functions to help initialize the "
"module state:"
msgstr ""
"La función de inicialización del módulo (si se utiliza la inicialización "
"monofásica) o una función llamada desde una ranura de ejecución del módulo "
"(si se utiliza la inicialización multifásica), puede utilizar las siguientes "
"funciones para ayudar a inicializar el estado del módulo:"

#: ../../c-api/module.rst:543
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function."
msgstr ""
"Añade un objeto a *module* como *name*.  Esta es una función de conveniencia "
"que se puede utilizar desde la función de inicialización del módulo."

#: ../../c-api/module.rst:546
msgid ""
"On success, return ``0``. On error, raise an exception and return ``-1``."
msgstr ""
"En caso de éxito, devuelve ``0``. En caso de error, lanza una excepción y "
"devuelve ``-1``."

#: ../../c-api/module.rst:548 ../../c-api/module.rst:599
#: ../../c-api/module.rst:626
msgid "Example usage::"
msgstr "Ejemplo de uso::"

#: ../../c-api/module.rst:550
msgid ""
"static int\n"
"add_spam(PyObject *module, int value)\n"
"{\n"
"    PyObject *obj = PyLong_FromLong(value);\n"
"    if (obj == NULL) {\n"
"        return -1;\n"
"    }\n"
"    int res = PyModule_AddObjectRef(module, \"spam\", obj);\n"
"    Py_DECREF(obj);\n"
"    return res;\n"
" }"
msgstr ""
"static int\n"
"add_spam(PyObject *module, int value)\n"
"{\n"
"    PyObject *obj = PyLong_FromLong(value);\n"
"    if (obj == NULL) {\n"
"        return -1;\n"
"    }\n"
"    int res = PyModule_AddObjectRef(module, \"spam\", obj);\n"
"    Py_DECREF(obj);\n"
"    return res;\n"
" }"

#: ../../c-api/module.rst:562
msgid ""
"To be convenient, the function accepts ``NULL`` *value* with an exception "
"set. In this case, return ``-1`` and just leave the raised exception "
"unchanged."
msgstr ""
"Para ser conveniente, la función acepta ``NULL`` *valor* con una excepción "
"planteada. En este caso, devuelve ``-1`` y simplemente deja la excepción "
"planteada sin cambios."

#: ../../c-api/module.rst:566
msgid ""
"The example can also be written without checking explicitly if *obj* is "
"``NULL``::"
msgstr ""
"El ejemplo también puede escribirse sin comprobar explícitamente si *obj* es "
"``NULL``::"

#: ../../c-api/module.rst:569
msgid ""
"static int\n"
"add_spam(PyObject *module, int value)\n"
"{\n"
"    PyObject *obj = PyLong_FromLong(value);\n"
"    int res = PyModule_AddObjectRef(module, \"spam\", obj);\n"
"    Py_XDECREF(obj);\n"
"    return res;\n"
" }"
msgstr ""
"static int\n"
"add_spam(PyObject *module, int value)\n"
"{\n"
"    PyObject *obj = PyLong_FromLong(value);\n"
"    int res = PyModule_AddObjectRef(module, \"spam\", obj);\n"
"    Py_XDECREF(obj);\n"
"    return res;\n"
" }"

#: ../../c-api/module.rst:578
msgid ""
"Note that ``Py_XDECREF()`` should be used instead of ``Py_DECREF()`` in this "
"case, since *obj* can be ``NULL``."
msgstr ""
"Tenga en cuenta que en este caso debe utilizarse ``Py_XDECREF()`` en lugar "
"de ``Py_DECREF()``, ya que *obj* puede ser ``NULL``."

#: ../../c-api/module.rst:581
msgid ""
"The number of different *name* strings passed to this function should be "
"kept small, usually by only using statically allocated strings as *name*. "
"For names that aren't known at compile time, prefer calling :c:func:"
"`PyUnicode_FromString` and :c:func:`PyObject_SetAttr` directly. For more "
"details, see :c:func:`PyUnicode_InternFromString`, which may be used "
"internally to create a key object."
msgstr ""
"El número de cadenas *nombre* diferentes pasadas a esta función debe "
"mantenerse pequeño, normalmente utilizando sólo cadenas asignadas "
"estáticamente como *nombre*. Para nombres que no se conocen en tiempo de "
"compilación, prefiera llamar directamente a :c:func:`PyUnicode_FromString` "
"y :c:func:`PyObject_SetAttr`. Para más detalles, ver :c:func:"
"`PyUnicode_InternFromString`, que puede utilizarse internamente para crear "
"un objeto clave."

#: ../../c-api/module.rst:594
msgid ""
"Similar to :c:func:`PyModule_AddObjectRef`, but \"steals\" a reference to "
"*value*. It can be called with a result of function that returns a new "
"reference without bothering to check its result or even saving it to a "
"variable."
msgstr ""

#: ../../c-api/module.rst:601
msgid ""
"if (PyModule_Add(module, \"spam\", PyBytes_FromString(value)) < 0) {\n"
"    goto error;\n"
"}"
msgstr ""

#: ../../c-api/module.rst:610
msgid ""
"Similar to :c:func:`PyModule_AddObjectRef`, but steals a reference to "
"*value* on success (if it returns ``0``)."
msgstr ""
"Similar a :c:func:`PyModule_AddObjectRef`, pero roba una referencia a "
"*value* en caso de éxito (si devuelve ``0``)."

#: ../../c-api/module.rst:613
msgid ""
"The new :c:func:`PyModule_Add` or :c:func:`PyModule_AddObjectRef` functions "
"are recommended, since it is easy to introduce reference leaks by misusing "
"the :c:func:`PyModule_AddObject` function."
msgstr ""

#: ../../c-api/module.rst:620
msgid ""
"Unlike other functions that steal references, ``PyModule_AddObject()`` only "
"releases the reference to *value* **on success**."
msgstr ""
"A diferencia de otras funciones que roban referencias, "
"``PyModule_AddObject()`` sólo libera la referencia a *value* **on success**."

#: ../../c-api/module.rst:623
msgid ""
"This means that its return value must be checked, and calling code must :c:"
"func:`Py_XDECREF` *value* manually on error."
msgstr ""

#: ../../c-api/module.rst:628
msgid ""
"PyObject *obj = PyBytes_FromString(value);\n"
"if (PyModule_AddObject(module, \"spam\", obj) < 0) {\n"
"    // If 'obj' is not NULL and PyModule_AddObject() failed,\n"
"    // 'obj' strong reference must be deleted with Py_XDECREF().\n"
"    // If 'obj' is NULL, Py_XDECREF() does nothing.\n"
"    Py_XDECREF(obj);\n"
"    goto error;\n"
"}\n"
"// PyModule_AddObject() stole a reference to obj:\n"
"// Py_XDECREF(obj) is not needed here."
msgstr ""

#: ../../c-api/module.rst:641
msgid ":c:func:`PyModule_AddObject` is :term:`soft deprecated`."
msgstr ""

#: ../../c-api/module.rst:646
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` with an "
"exception set on error, ``0`` on success."
msgstr ""
"Añade una constante entera a *module* como *name*.  Esta función puede "
"usarse desde la función de inicialización del módulo. Devuelve ``-1`` con "
"una excepción en caso de error, ``0`` en caso de éxito."

#: ../../c-api/module.rst:650
msgid ""
"This is a convenience function that calls :c:func:`PyLong_FromLong` and :c:"
"func:`PyModule_AddObjectRef`; see their documentation for details."
msgstr ""
"Esta es una función de conveniencia que llama a :c:func:`PyLong_FromLong` y :"
"c:func:`PyModule_AddObjectRef`; ver su documentación para más detalles."

#: ../../c-api/module.rst:656
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be ``NULL``-terminated. Return ``-1`` with an exception set on error, ``0`` "
"on success."
msgstr ""
"Añade una constante de cadena a *module* como *name*.  Esta función puede "
"usarse desde la función de inicialización del módulo.  La cadena *value* "
"debe ser ``NULL``-terminated. Return ``-1`` con una excepción en caso de "
"error, ``0`` en caso de éxito."

#: ../../c-api/module.rst:661
msgid ""
"This is a convenience function that calls :c:func:"
"`PyUnicode_InternFromString` and :c:func:`PyModule_AddObjectRef`; see their "
"documentation for details."
msgstr ""
"Esta es una función de conveniencia que llama a :c:func:"
"`PyUnicode_InternFromString` y :c:func:`PyModule_AddObjectRef`; ver "
"documentación para más detalles."

#: ../../c-api/module.rst:668
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` "
"with an exception set on error, ``0`` on success."
msgstr ""
"Añade una constante int a *module*. El nombre y el valor se toman de "
"*macro*. Por ejemplo ``PyModule_AddIntMacro(module, AF_INET)`` añade la "
"constante int *AF_INET* con el valor *AF_INET* a *module*. Devuelve ``-1`` "
"con una excepción en caso de error, ``0`` en caso de éxito."

#: ../../c-api/module.rst:676
msgid "Add a string constant to *module*."
msgstr "Añadir una constante de cadena a *module*."

#: ../../c-api/module.rst:680
msgid ""
"Add a type object to *module*. The type object is finalized by calling "
"internally :c:func:`PyType_Ready`. The name of the type object is taken from "
"the last component of :c:member:`~PyTypeObject.tp_name` after dot. Return "
"``-1`` with an exception set on error, ``0`` on success."
msgstr ""
"Añade un objeto de tipo a *module*. El objeto de tipo se finaliza llamando "
"internamente a :c:func:`PyType_Ready`. El nombre del objeto de tipo se toma "
"del último componente de :c:member:`~PyTypeObject.tp_name` después del "
"punto. Devuelve ``-1`` con una excepción en caso de error, ``0`` en caso de "
"éxito."

#: ../../c-api/module.rst:690
msgid ""
"Indicate that *module* does or does not support running without the global "
"interpreter lock (GIL), using one of the values from :c:macro:`Py_mod_gil`. "
"It must be called during *module*'s initialization function. If this "
"function is not called during module initialization, the import machinery "
"assumes the module does not support running without the GIL. This function "
"is only available in Python builds configured with :option:`--disable-gil`. "
"Return ``-1`` with an exception set on error, ``0`` on success."
msgstr ""

#: ../../c-api/module.rst:703
msgid "Module lookup"
msgstr "Búsqueda de módulos"

#: ../../c-api/module.rst:705
msgid ""
"Single-phase initialization creates singleton modules that can be looked up "
"in the context of the current interpreter. This allows the module object to "
"be retrieved later with only a reference to the module definition."
msgstr ""
"La inicialización monofásica crea módulos singleton que pueden buscarse en "
"el contexto del intérprete actual. Esto permite recuperar posteriormente el "
"objeto módulo con sólo una referencia a la definición del módulo."

#: ../../c-api/module.rst:709
msgid ""
"These functions will not work on modules created using multi-phase "
"initialization, since multiple such modules can be created from a single "
"definition."
msgstr ""
"Estas funciones no funcionarán en módulos creados mediante inicialización "
"multifase, ya que pueden crearse varios módulos de este tipo a partir de una "
"única definición."

#: ../../c-api/module.rst:714
msgid ""
"Returns the module object that was created from *def* for the current "
"interpreter. This method requires that the module object has been attached "
"to the interpreter state with :c:func:`PyState_AddModule` beforehand. In "
"case the corresponding module object is not found or has not been attached "
"to the interpreter state yet, it returns ``NULL``."
msgstr ""
"Devuelve el objeto módulo que se creó a partir de *def* para el intérprete "
"actual. Este método requiere que el objeto módulo haya sido adjuntado al "
"estado del intérprete con :c:func:`PyState_AddModule` de antemano. En caso "
"de que no se encuentre el objeto módulo correspondiente o aún no se haya "
"adjuntado al estado del intérprete, devuelve ``NULL``."

#: ../../c-api/module.rst:721
msgid ""
"Attaches the module object passed to the function to the interpreter state. "
"This allows the module object to be accessible via :c:func:"
"`PyState_FindModule`."
msgstr ""
"Adjunta el objeto módulo pasado a la función al estado del intérprete. Esto "
"permite que el objeto de módulo sea accesible a través de :c:func:"
"`PyState_FindModule`."

#: ../../c-api/module.rst:724
msgid "Only effective on modules created using single-phase initialization."
msgstr ""
"Sólo es efectivo en módulos creados mediante inicialización monofásica."

#: ../../c-api/module.rst:726
msgid ""
"Python calls ``PyState_AddModule`` automatically after importing a module, "
"so it is unnecessary (but harmless) to call it from module initialization "
"code. An explicit call is needed only if the module's own init code "
"subsequently calls ``PyState_FindModule``. The function is mainly intended "
"for implementing alternative import mechanisms (either by calling it "
"directly, or by referring to its implementation for details of the required "
"state updates)."
msgstr ""
"Python llama a ``PyState_AddModule`` automáticamente después de importar un "
"módulo, por lo que es innecesario (pero inofensivo) llamarlo desde el código "
"de inicialización del módulo. Sólo es necesaria una llamada explícita si el "
"propio código de inicialización del módulo llama posteriormente a "
"``PyState_FindModule``. La función está pensada principalmente para "
"implementar mecanismos de importación alternativos (ya sea llamándola "
"directamente o remitiéndose a su implementación para obtener detalles de las "
"actualizaciones de estado necesarias)."

#: ../../c-api/module.rst:734 ../../c-api/module.rst:745
msgid "The caller must hold the GIL."
msgstr "Caller debe mantener el GIL."

#: ../../c-api/module.rst:736
msgid "Return ``-1`` with an exception set on error, ``0`` on success."
msgstr ""
"Devuelve ``-1`` con una excepción en caso de error, ``0`` en caso de éxito."

#: ../../c-api/module.rst:742
msgid ""
"Removes the module object created from *def* from the interpreter state. "
"Return ``-1`` with an exception set on error, ``0`` on success."
msgstr ""
"Elimina el objeto módulo creado a partir de *def* del estado del intérprete. "
"Devuelve ``-1`` con una excepción establecida en caso de error, ``0`` en "
"caso de éxito."

#: ../../c-api/module.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/module.rst:8
msgid "module"
msgstr "módulo"

#: ../../c-api/module.rst:13
msgid "ModuleType (in module types)"
msgstr "ModuleType (en tipos de módulo)"

#: ../../c-api/module.rst:33 ../../c-api/module.rst:77
msgid "__name__ (module attribute)"
msgstr "__name__ (atributo del módulo)"

#: ../../c-api/module.rst:33
msgid "__doc__ (module attribute)"
msgstr "__doc__ (atributo del módulo)"

#: ../../c-api/module.rst:33 ../../c-api/module.rst:112
msgid "__file__ (module attribute)"
msgstr "__file__ (atributo del módulo)"

#: ../../c-api/module.rst:33
msgid "__package__ (module attribute)"
msgstr "__package__ (atributo del módulo)"

#: ../../c-api/module.rst:33
msgid "__loader__ (module attribute)"
msgstr "__loader__ (atributo del módulo)"

#: ../../c-api/module.rst:63
msgid "__dict__ (module attribute)"
msgstr "__dict__ (atributo del módulo)"

#: ../../c-api/module.rst:77 ../../c-api/module.rst:112
msgid "SystemError (built-in exception)"
msgstr "SystemError (excepción incorporada)"
