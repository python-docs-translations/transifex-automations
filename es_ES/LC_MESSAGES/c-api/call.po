# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/call.rst:6
msgid "Call Protocol"
msgstr "Protocolo de llamada"

#: ../../c-api/call.rst:8
msgid ""
"CPython supports two different calling protocols: *tp_call* and vectorcall."
msgstr ""
"CPython admite dos protocolos de llamadas diferentes: *tp_call* y vectorcall."

#: ../../c-api/call.rst:12
msgid "The *tp_call* Protocol"
msgstr "El Protocolo *tp_call*"

#: ../../c-api/call.rst:14
msgid ""
"Instances of classes that set :c:member:`~PyTypeObject.tp_call` are "
"callable. The signature of the slot is::"
msgstr ""
"Las instancias de clases que configuran  :c:member:`~PyTypeObject.tp_call` "
"son vocables. La firma del slot es::"

#: ../../c-api/call.rst:17
msgid ""
"PyObject *tp_call(PyObject *callable, PyObject *args, PyObject *kwargs);"
msgstr ""
"PyObject *tp_call(PyObject *callable, PyObject *args, PyObject *kwargs);"

#: ../../c-api/call.rst:19
msgid ""
"A call is made using a tuple for the positional arguments and a dict for the "
"keyword arguments, similarly to ``callable(*args, **kwargs)`` in Python "
"code. *args* must be non-NULL (use an empty tuple if there are no arguments) "
"but *kwargs* may be *NULL* if there are no keyword arguments."
msgstr ""
"Se realiza una llamada usando una tupla para los argumentos posicionales y "
"un dict para los argumentos de palabras clave, de manera similar a "
"``callable(*args, **kwargs)`` en código Python. *args* no debe ser NULL "
"(usar una tupla vacía si no hay argumentos) pero *kwargs* puede ser *NULL* "
"si no hay argumentos de palabras clave."

#: ../../c-api/call.rst:25
msgid ""
"This convention is not only used by *tp_call*: :c:member:`~PyTypeObject."
"tp_new` and :c:member:`~PyTypeObject.tp_init` also pass arguments this way."
msgstr ""
"Esta convención no sólo se utiliza por *tp_call*: :c:member:`~PyTypeObject."
"tp_new` y :c:member:`~PyTypeObject.tp_init` también se pasan argumentos de "
"esta manera."

#: ../../c-api/call.rst:29
msgid ""
"To call an object, use :c:func:`PyObject_Call` or another :ref:`call API "
"<capi-call>`."
msgstr ""
"Para llamar a un objeto, usar  :c:func:`PyObject_Call` u otra :ref:`call API "
"<capi-call>`."

#: ../../c-api/call.rst:36
msgid "The Vectorcall Protocol"
msgstr "El protocolo Vectorcall"

#: ../../c-api/call.rst:40
msgid ""
"The vectorcall protocol was introduced in :pep:`590` as an additional "
"protocol for making calls more efficient."
msgstr ""
"El protocolo vectorcall se introdujo en :pep:`590` como un protocolo "
"adicional para hacer que las llamadas sean mos eficientes."

#: ../../c-api/call.rst:43
msgid ""
"As rule of thumb, CPython will prefer the vectorcall for internal calls if "
"the callable supports it. However, this is not a hard rule. Additionally, "
"some third-party extensions use *tp_call* directly (rather than using :c:"
"func:`PyObject_Call`). Therefore, a class supporting vectorcall must also "
"implement :c:member:`~PyTypeObject.tp_call`. Moreover, the callable must "
"behave the same regardless of which protocol is used. The recommended way to "
"achieve this is by setting :c:member:`~PyTypeObject.tp_call` to :c:func:"
"`PyVectorcall_Call`. This bears repeating:"
msgstr ""
"Como regla general, CPython preferirá vectorcall para llamadas internas si "
"el invocable lo admite. Sin embargo, esta no es una regla estricta. Además, "
"algunas extensiones de terceros usan *tp_call* directamente (en lugar de "
"usar :c:func:`PyObject_Call`). Por lo tanto, una clase que admita vectorcall "
"también debe implementar:c:member:`~PyTypeObject.tp_call`. Además, el "
"invocable debe comportarse de la misma manera independientemente del "
"protocolo que se utilice. La forma recomendada de lograr esto es "
"estableciendo:c:member:`~PyTypeObject.tp_call` a :c:func:"
"`PyVectorcall_Call`. Esto vale la pena repetir:"

#: ../../c-api/call.rst:57
msgid ""
"A class supporting vectorcall **must** also implement :c:member:"
"`~PyTypeObject.tp_call` with the same semantics."
msgstr ""
"Una clase que soporte vectorcall **debe** también implementar :c:member:"
"`~PyTypeObject.tp_call` con la misma semántica."

#: ../../c-api/call.rst:62
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. (This "
"internally sets :c:member:`~PyTypeObject.tp_call` only, and thus may make it "
"behave differently than the vectorcall function.) In earlier Python "
"versions, vectorcall should only be used with :c:macro:`immutable "
"<Py_TPFLAGS_IMMUTABLETYPE>` or static types."
msgstr ""
"Флаг :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` теперь удаляется из класса, когда "
"метод :py:meth:`~object.__call__` класса переназначается. (Это внутренне "
"устанавливает только :c:member:`~PyTypeObject.tp_call` и, таким образом, "
"может привести к тому, что она будет вести себя иначе, чем функция "
"Vectorcall.) В более ранних версиях Python Vectorcall следует использовать "
"только с :c:macro:`immutable <Py_TPFLAGS_IMMUTABLETYPE >` или статические "
"типы."

#: ../../c-api/call.rst:69
msgid ""
"A class should not implement vectorcall if that would be slower than "
"*tp_call*. For example, if the callee needs to convert the arguments to an "
"args tuple and kwargs dict anyway, then there is no point in implementing "
"vectorcall."
msgstr ""
"Una clase no debe implementar vectorcall si eso fuera más lento que "
"*tp_call*. Por ejemplo, si el destinatario necesita convertir los argumentos "
"en una tupla args y dictar kwargs de todos modos, entonces no tiene sentido "
"implementar vectorcall."

#: ../../c-api/call.rst:74
msgid ""
"Classes can implement the vectorcall protocol by enabling the :c:macro:"
"`Py_TPFLAGS_HAVE_VECTORCALL` flag and setting :c:member:`~PyTypeObject."
"tp_vectorcall_offset` to the offset inside the object structure where a "
"*vectorcallfunc* appears. This is a pointer to a function with the following "
"signature:"
msgstr ""
"Классы могут реализовать протокол векторного вызова, включив флаг :c:macro:"
"`Py_TPFLAGS_HAVE_VECTORCALL` и установив :c:member:`~PyTypeObject."
"tp_vectorcall_offset` на смещение внутри структуры объекта, где появляется "
"*vectorcallfunc*. Это указатель на функцию со следующей сигнатурой:"

#: ../../c-api/call.rst:82
msgid "*callable* is the object being called."
msgstr "*callable* es el objeto que se llama."

#: ../../c-api/call.rst:83
msgid ""
"*args* is a C array consisting of the positional arguments followed by the"
msgstr ""
"*args* es una matriz C que consiste en los argumentos posicionales seguidos "
"por el"

#: ../../c-api/call.rst:84
msgid ""
"values of the keyword arguments. This can be *NULL* if there are no "
"arguments."
msgstr ""
"valores de los argumentos de palabra clave. Esto puede ser *NULL* si no hay "
"argumentos."

#: ../../c-api/call.rst:86
msgid "*nargsf* is the number of positional arguments plus possibly the"
msgstr ""
"*nargsf* es el número de argumentos posicionales más posiblemente el "
"indicador"

#: ../../c-api/call.rst:87
msgid ""
":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET` flag. To get the actual number of "
"positional arguments from *nargsf*, use :c:func:`PyVectorcall_NARGS`."
msgstr ""
":c:macro:`PY_VETORCALL_ARGUMENTS_OFFSET` флаг. Чтобы получить фактическое "
"количество позиционных аргументов из *nargsf*, используйте :c:func:"
"`PyVectorcall_NARGS`."

#: ../../c-api/call.rst:90
msgid "*kwnames* is a tuple containing the names of the keyword arguments;"
msgstr ""
"*kwnames* es una tupla que contiene los nombres de los argumentos de "
"palabras clave;"

#: ../../c-api/call.rst:91
msgid ""
"in other words, the keys of the kwargs dict. These names must be strings "
"(instances of ``str`` or a subclass) and they must be unique. If there are "
"no keyword arguments, then *kwnames* can instead be *NULL*."
msgstr ""
"en otras palabras, las claves de los kwargs dict. Estos nombres deben ser "
"cadenas (instancias de  ``str`` o una subclase) y deben ser únicos. Si no "
"hay argumentos de palabra clave, entonces *kwnames* puede ser *NULL*."

#: ../../c-api/call.rst:98
msgid ""
"If this flag is set in a vectorcall *nargsf* argument, the callee is allowed "
"to temporarily change ``args[-1]``. In other words, *args* points to "
"argument 1 (not 0) in the allocated vector. The callee must restore the "
"value of ``args[-1]`` before returning."
msgstr ""
"Si este indicador se establece en un argumento vectorcall *nargsf*, el "
"destinatario puede cambiar temporalmente  ``args[-1]``. En otras palabras, "
"*args* apunta al argumento 1 (no 0) en el vector asignado. El receptor de la "
"llamada debe restaurar el valor de ``args[-1]`` antes de regresar."

#: ../../c-api/call.rst:103
msgid ""
"For :c:func:`PyObject_VectorcallMethod`, this flag means instead that "
"``args[0]`` may be changed."
msgstr ""
"Para :c:func:`PyObject_VectorcallMethod`, esta señal indica que se puede "
"cambiar ``args[0]``."

#: ../../c-api/call.rst:106
msgid ""
"Whenever they can do so cheaply (without additional allocation), callers are "
"encouraged to use :c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`. Doing so will "
"allow callables such as bound methods to make their onward calls (which "
"include a prepended *self* argument) very efficiently."
msgstr ""
"Всякий раз, когда они могут сделать это дешево (без дополнительного "
"выделения), вызывающим программам рекомендуется использовать :c:macro:"
"`PY_VECTORCALL_ARGUMENTS_OFFSET`. Это позволит вызываемым объектам, таким "
"как связанные методы, очень эффективно выполнять свои последующие вызовы "
"(которые включают в себя добавленный аргумент *self*)."

#: ../../c-api/call.rst:113
msgid ""
"To call an object that implements vectorcall, use a :ref:`call API <capi-"
"call>` function as with any other callable. :c:func:`PyObject_Vectorcall` "
"will usually be most efficient."
msgstr ""
"Para llamar a un objeto que implementa vectorcall, usar una función a :ref:"
"`call API <capi-call>` como con cualquier otro invocable. :c:func:"
"`PyObject_Vectorcall` generalmente será más eficiente."

#: ../../c-api/call.rst:119
msgid "Recursion Control"
msgstr "Control de recursividad"

#: ../../c-api/call.rst:121
msgid ""
"When using *tp_call*, callees do not need to worry about :ref:`recursion "
"<recursion>`: CPython uses :c:func:`Py_EnterRecursiveCall` and :c:func:"
"`Py_LeaveRecursiveCall` for calls made using *tp_call*."
msgstr ""
"Al usar *tp_call*, callees no necesita preocuparse por <recursion>`: CPython "
"usa :c:func:`Py_EnterRecursiveCall` y :c:func:`Py_LeaveRecursiveCall` para "
"llamadas realizadas usando  *tp_call*."

#: ../../c-api/call.rst:126
msgid ""
"For efficiency, this is not the case for calls done using vectorcall: the "
"callee should use *Py_EnterRecursiveCall* and *Py_LeaveRecursiveCall* if "
"needed."
msgstr ""
"Para mayor eficiencia, este no es el caso de las llamadas realizadas usando "
"vectorcall: callee debe usar *Py_EnterRecursiveCall* y "
"*Py_LeaveRecursiveCall* si fuera necesario."

#: ../../c-api/call.rst:132
msgid "Vectorcall Support API"
msgstr "API de soporte de vectorcall"

#: ../../c-api/call.rst:136
msgid ""
"Given a vectorcall *nargsf* argument, return the actual number of arguments. "
"Currently equivalent to::"
msgstr ""
"Dado un argumento vectorcall *nargsf*, devuelve el número real de "
"argumentos. Actualmente equivalente a::"

#: ../../c-api/call.rst:140
msgid "(Py_ssize_t)(nargsf & ~PY_VECTORCALL_ARGUMENTS_OFFSET)"
msgstr "(Py_ssize_t)(nargsf & ~PY_VECTORCALL_ARGUMENTS_OFFSET)"

#: ../../c-api/call.rst:142
msgid ""
"However, the function ``PyVectorcall_NARGS`` should be used to allow for "
"future extensions."
msgstr ""
"Sin embargo, la función  ``PyVectorcall_NARGS``debe usarse para permitir "
"futuras extensiones."

#: ../../c-api/call.rst:149
msgid ""
"If *op* does not support the vectorcall protocol (either because the type "
"does not or because the specific instance does not), return *NULL*. "
"Otherwise, return the vectorcall function pointer stored in *op*. This "
"function never raises an exception."
msgstr ""
"Si *op* no admite el protocolo vectorcall (ya sea porque el tipo no lo "
"admite o porque la instancia específica no lo admite), devolver *NULL*. De "
"lo contrario, devuelve el puntero de función vectorcall almacenado en *op*. "
"Esta función nunca genera una excepción."

#: ../../c-api/call.rst:154
msgid ""
"This is mostly useful to check whether or not *op* supports vectorcall, "
"which can be done by checking ``PyVectorcall_Function(op) != NULL``."
msgstr ""
"Esto es muy útil para comprobar si *op* admite o no vectorcall, lo que se "
"puede hacer comprobando``PyVectorcall_Function(op) != NULL``."

#: ../../c-api/call.rst:161
msgid ""
"Call *callable*'s :c:type:`vectorcallfunc` with positional and keyword "
"arguments given in a tuple and dict, respectively."
msgstr ""
"Llamar *callable*'s :c:type:`vectorcallfunc` con argumentos posicionales y "
"de palabras clave dados en una tupla y un dict, respectivamente."

#: ../../c-api/call.rst:164
msgid ""
"This is a specialized function, intended to be put in the :c:member:"
"`~PyTypeObject.tp_call` slot or be used in an implementation of ``tp_call``. "
"It does not check the :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag and it does "
"not fall back to ``tp_call``."
msgstr ""
"Это специализированная функция, предназначенная для размещения в слоте :c:"
"member:`~PyTypeObject.tp_call` или для использования в реализации "
"``tp_call``. Он не проверяет флаг :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` и не "
"возвращается к ``tp_call``."

#: ../../c-api/call.rst:175
msgid "Object Calling API"
msgstr "API de llamada de objetos"

#: ../../c-api/call.rst:177
msgid ""
"Various functions are available for calling a Python object. Each converts "
"its arguments to a convention supported by the called object – either "
"*tp_call* or vectorcall. In order to do as little conversion as possible, "
"pick one that best fits the format of data you have available."
msgstr ""
"Hay varias funciones disponibles para llamar a un objeto Python. Cada uno "
"convierte sus argumentos a una convención soportada por el objeto llamado – "
"ya sea *tp_call* o vectorcall. Para realizar la menor conversión posible, "
"elegir la que mejor se ajuste al formato de datos que hay disponible."

#: ../../c-api/call.rst:183
msgid ""
"The following table summarizes the available functions; please see "
"individual documentation for details."
msgstr ""
"La siguiente tabla resume las funciones disponibles; consultar la "
"documentación individual para tener más detalles."

#: ../../c-api/call.rst:187
msgid "Function"
msgstr "Función"

#: ../../c-api/call.rst:187
msgid "callable"
msgstr "invocable"

#: ../../c-api/call.rst:187
msgid "args"
msgstr "argumentos"

#: ../../c-api/call.rst:187
msgid "kwargs"
msgstr "kwargs"

#: ../../c-api/call.rst:189
msgid ":c:func:`PyObject_Call`"
msgstr ":c:func:`PyObject_Call`"

#: ../../c-api/call.rst:189 ../../c-api/call.rst:191 ../../c-api/call.rst:193
#: ../../c-api/call.rst:195 ../../c-api/call.rst:197 ../../c-api/call.rst:201
#: ../../c-api/call.rst:209 ../../c-api/call.rst:211
msgid "``PyObject *``"
msgstr "``PyObject *``"

#: ../../c-api/call.rst:189
msgid "tuple"
msgstr "tupla"

#: ../../c-api/call.rst:189 ../../c-api/call.rst:211
msgid "dict/``NULL``"
msgstr "dict/``NULL``"

#: ../../c-api/call.rst:191
msgid ":c:func:`PyObject_CallNoArgs`"
msgstr ":c:func:`PyObject_CallNoArgs`"

#: ../../c-api/call.rst:191 ../../c-api/call.rst:193 ../../c-api/call.rst:195
#: ../../c-api/call.rst:197 ../../c-api/call.rst:199 ../../c-api/call.rst:201
#: ../../c-api/call.rst:203 ../../c-api/call.rst:205 ../../c-api/call.rst:207
msgid "---"
msgstr "---"

#: ../../c-api/call.rst:193
msgid ":c:func:`PyObject_CallOneArg`"
msgstr ":c:func:`PyObject_CallOneArg`"

#: ../../c-api/call.rst:193 ../../c-api/call.rst:207
msgid "1 object"
msgstr "1 objeto"

#: ../../c-api/call.rst:195
msgid ":c:func:`PyObject_CallObject`"
msgstr ":c:func:`PyObject_CallObject`"

#: ../../c-api/call.rst:195
msgid "tuple/``NULL``"
msgstr "tupla/``NULL``"

#: ../../c-api/call.rst:197
msgid ":c:func:`PyObject_CallFunction`"
msgstr ":c:func:`PyObject_CallFunction`"

#: ../../c-api/call.rst:197 ../../c-api/call.rst:199
msgid "format"
msgstr "formato"

#: ../../c-api/call.rst:199
msgid ":c:func:`PyObject_CallMethod`"
msgstr ":c:func:`PyObject_CallMethod`"

#: ../../c-api/call.rst:199
msgid "obj + ``char*``"
msgstr "obj + ``char*``"

#: ../../c-api/call.rst:201
msgid ":c:func:`PyObject_CallFunctionObjArgs`"
msgstr ":c:func:`PyObject_CallFunctionObjArgs`"

#: ../../c-api/call.rst:201 ../../c-api/call.rst:203
msgid "variadic"
msgstr "variado"

#: ../../c-api/call.rst:203
msgid ":c:func:`PyObject_CallMethodObjArgs`"
msgstr ":c:func:`PyObject_CallMethodObjArgs`"

#: ../../c-api/call.rst:203 ../../c-api/call.rst:205 ../../c-api/call.rst:207
msgid "obj + name"
msgstr "obj + nombre"

#: ../../c-api/call.rst:205
msgid ":c:func:`PyObject_CallMethodNoArgs`"
msgstr ":c:func:`PyObject_CallMethodNoArgs`"

#: ../../c-api/call.rst:207
msgid ":c:func:`PyObject_CallMethodOneArg`"
msgstr ":c:func:`PyObject_CallMethodOneArg`"

#: ../../c-api/call.rst:209
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../c-api/call.rst:209 ../../c-api/call.rst:211 ../../c-api/call.rst:213
msgid "vectorcall"
msgstr "vectorcall"

#: ../../c-api/call.rst:211
msgid ":c:func:`PyObject_VectorcallDict`"
msgstr ":c:func:`PyObject_VectorcallDict`"

#: ../../c-api/call.rst:213
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../c-api/call.rst:213
msgid "arg + name"
msgstr "arg + nombre"

#: ../../c-api/call.rst:219
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*, and named arguments given by the dictionary *kwargs*."
msgstr ""
"Llame a un objeto Python invocable **callable*, con argumentos dados por la "
"tupla *args* y ​​argumentos con nombre dados por el diccionario *kwargs*."

#: ../../c-api/call.rst:222
msgid ""
"*args* must not be *NULL*; use an empty tuple if no arguments are needed. If "
"no named arguments are needed, *kwargs* can be *NULL*."
msgstr ""
"*args* no debe ser *NULL*; utilice una tupla vacía si no se necesitan "
"argumentos. Si no se necesitan argumentos con nombre, *kwargs* puede ser "
"*NULL*."

#: ../../c-api/call.rst:225 ../../c-api/call.rst:237 ../../c-api/call.rst:248
#: ../../c-api/call.rst:259 ../../c-api/call.rst:271 ../../c-api/call.rst:291
#: ../../c-api/call.rst:310 ../../c-api/call.rst:324 ../../c-api/call.rst:333
#: ../../c-api/call.rst:345 ../../c-api/call.rst:358 ../../c-api/call.rst:392
msgid ""
"Return the result of the call on success, or raise an exception and return "
"*NULL* on failure."
msgstr ""
"Devuelve el resultado de la llamada en caso de éxito, o genera una excepción "
"y devuelve *NULL* en caso de error."

#: ../../c-api/call.rst:228
msgid ""
"This is the equivalent of the Python expression: ``callable(*args, "
"**kwargs)``."
msgstr ""
"Este es el equivalente de la expresión de Python:``callable(*args, "
"**kwargs)``."

#: ../../c-api/call.rst:234
msgid ""
"Call a callable Python object *callable* without any arguments. It is the "
"most efficient way to call a callable Python object without any argument."
msgstr ""
"Llame a un objeto Python invocable *callable* sin ningún argumento. Es la "
"forma más eficaz de llamar a un objeto Python invocable sin ningún argumento."

#: ../../c-api/call.rst:245
msgid ""
"Call a callable Python object *callable* with exactly 1 positional argument "
"*arg* and no keyword arguments."
msgstr ""
"Llame a un objeto Python invocable *callable* con exactamente 1 argumento "
"posicional *arg* y sin argumentos de palabras clave."

#: ../../c-api/call.rst:256
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*.  If no arguments are needed, then *args* can be *NULL*."
msgstr ""
"Llame a un objeto Python invocable *callable*, con argumentos dados por la "
"tupla *args*. Si no se necesitan argumentos, entonces *args* puede ser "
"*NULL*."

#: ../../c-api/call.rst:262 ../../c-api/call.rst:274
msgid "This is the equivalent of the Python expression: ``callable(*args)``."
msgstr "Este es el equivalente de la expresión de Python: ``callable(*args)``."

#: ../../c-api/call.rst:267
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format can be *NULL*, indicating that no arguments "
"are provided."
msgstr ""
"Llamar a un objeto Python invocable *callable*, con un número variable de "
"argumentos C. Los argumentos de C se describen utilizando una cadena de "
"formato de estilo :c:func:`Py_BuildValue`.  El formato puede ser *NULL*, lo "
"que indica que no se proporcionan argumentos."

#: ../../c-api/call.rst:276
msgid ""
"Note that if you only pass :c:expr:`PyObject *` args, :c:func:"
"`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""
"Обратите внимание: если вы передаете только :c:expr:` PyObj ect *` args, :c:"
"func:` PyObj ect_CallFunctionObjArgs` будет более быстрой альтернативой."

#: ../../c-api/call.rst:279
msgid "The type of *format* was changed from ``char *``."
msgstr "El tipo de *format* se cambió de ``char *``."

#: ../../c-api/call.rst:285
msgid ""
"Call the method named *name* of object *obj* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should produce a tuple."
msgstr ""
"Llamar al método denominado *name* del objeto *obj* con un número variable "
"de argumentos C. Los argumentos de C se describen mediante una cadena de "
"formato :c:func:`Py_BuildValue` que debería producir una tupla."

#: ../../c-api/call.rst:289
msgid "The format can be *NULL*, indicating that no arguments are provided."
msgstr ""
"El formato puede ser *NULL*, lo que indica que no se proporcionan argumentos."

#: ../../c-api/call.rst:294
msgid ""
"This is the equivalent of the Python expression: ``obj.name(arg1, "
"arg2, ...)``."
msgstr ""
"Este es el equivalente de la expresión de Python: ``obj.name(arg1, "
"arg2, ...)``."

#: ../../c-api/call.rst:297
msgid ""
"Note that if you only pass :c:expr:`PyObject *` args, :c:func:"
"`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""
"Обратите внимание: если вы передаете только :c:expr:` PyObj ect *` args, :c:"
"func:` PyObj ect_CallMethodObjArgs` будет более быстрой альтернативой."

#: ../../c-api/call.rst:300
msgid "The types of *name* and *format* were changed from ``char *``."
msgstr "Los tipos de *name* se cambiaron de ``char *``."

#: ../../c-api/call.rst:306
msgid ""
"Call a callable Python object *callable*, with a variable number of :c:expr:"
"`PyObject *` arguments.  The arguments are provided as a variable number of "
"parameters followed by *NULL*."
msgstr ""
"Вызовите вызываемый объект Python *callable* с переменным числом аргументов :"
"c:expr:` PyObject *`. Аргументы предоставляются в виде переменного числа "
"параметров, за которыми следует *NULL*."

#: ../../c-api/call.rst:313
msgid ""
"This is the equivalent of the Python expression: ``callable(arg1, "
"arg2, ...)``."
msgstr ""
"Este es el equivalente de la expresión de Python: ``callable(arg1, "
"arg2, ...)``."

#: ../../c-api/call.rst:319
msgid ""
"Call a method of the Python object *obj*, where the name of the method is "
"given as a Python string object in *name*.  It is called with a variable "
"number of :c:expr:`PyObject *` arguments.  The arguments are provided as a "
"variable number of parameters followed by *NULL*."
msgstr ""
"Вызовите метод объекта Python *obj*, где имя метода задается как строковый "
"объект Python в *name*. Он вызывается с переменным количеством аргументов :c:"
"expr:` PyObject *`. Аргументы предоставляются в виде переменного числа "
"параметров, за которыми следует *NULL*."

#: ../../c-api/call.rst:330
msgid ""
"Call a method of the Python object *obj* without arguments, where the name "
"of the method is given as a Python string object in *name*."
msgstr ""
"Llama a un método del objeto Python *obj* sin argumentos, donde el nombre "
"del método se da como un objeto Python string en *name*."

#: ../../c-api/call.rst:341
msgid ""
"Call a method of the Python object *obj* with a single positional argument "
"*arg*, where the name of the method is given as a Python string object in "
"*name*."
msgstr ""
"Llama a un método del objeto Python *obj* con un único argumento posicional "
"*arg*, donde el nombre del método se da como un objeto de cadena Python en "
"*name*."

#: ../../c-api/call.rst:353
msgid ""
"Call a callable Python object *callable*. The arguments are the same as for :"
"c:type:`vectorcallfunc`. If *callable* supports vectorcall_, this directly "
"calls the vectorcall function stored in *callable*."
msgstr ""
"Llama a un objeto Python *callable*. Los argumentos son los mismos que para :"
"c:type:`vectorcallfunc`. Si *callable* soporta vectorcall_, esto llama "
"directamente a la función vectorcall almacenada en *callable*."

#: ../../c-api/call.rst:365
msgid ""
"Call *callable* with positional arguments passed exactly as in the "
"vectorcall_ protocol, but with keyword arguments passed as a dictionary "
"*kwdict*. The *args* array contains only the positional arguments."
msgstr ""
"Llama a *callable* con argumentos posicionales pasados exactamente como en "
"el protocolo vectorcall_, pero con argumentos de palabra clave pasados como "
"un diccionario *kwdict*. El array *args* contiene sólo los argumentos "
"posicionales."

#: ../../c-api/call.rst:369
msgid ""
"Regardless of which protocol is used internally, a conversion of arguments "
"needs to be done. Therefore, this function should only be used if the caller "
"already has a dictionary ready to use for the keyword arguments, but not a "
"tuple for the positional arguments."
msgstr ""
"Independientemente del protocolo que se utilice internamente, es necesario "
"realizar una conversión de los argumentos. Por lo tanto, esta función sólo "
"debe utilizarse si caller ya tiene un diccionario listo para usar para los "
"argumentos de palabra clave, pero no una tupla para los argumentos "
"posicionales."

#: ../../c-api/call.rst:379
msgid ""
"Call a method using the vectorcall calling convention. The name of the "
"method is given as a Python string *name*. The object whose method is called "
"is *args[0]*, and the *args* array starting at *args[1]* represents the "
"arguments of the call. There must be at least one positional argument. "
"*nargsf* is the number of positional arguments including *args[0]*, plus :c:"
"macro:`PY_VECTORCALL_ARGUMENTS_OFFSET` if the value of ``args[0]`` may "
"temporarily be changed. Keyword arguments can be passed just like in :c:func:"
"`PyObject_Vectorcall`."
msgstr ""
"Вызовите метод, используя соглашение о вызовах VectorCall. Имя метода "
"задается в виде строки Python *name*. Объект, метод которого вызывается, — "
"это *args[0]*, а массив *args*, начинающийся с *args[1]*, представляет "
"аргументы вызова. Должен быть хотя бы один позиционный аргумент. *nargsf* — "
"это количество позиционных аргументов, включая *args[0]* плюс :c:macro:"
"`PY_VECTORCALL_ARGUMENTS_OFFSET`, если значение ``args[0]`` может быть "
"временно изменено. Аргументы ключевого слова можно передавать так же, как в :"
"c:func:` PyObj ect_Vectorcall`."

#: ../../c-api/call.rst:388
msgid ""
"If the object has the :c:macro:`Py_TPFLAGS_METHOD_DESCRIPTOR` feature, this "
"will call the unbound method object with the full *args* vector as arguments."
msgstr ""
"Если объект имеет функцию :c:macro:`Py_TPFLAGS_METHOD_DESCRIPTOR`, это "
"вызовет несвязанный объект метода с полным вектором *args* в качестве "
"аргументов."

#: ../../c-api/call.rst:399
msgid "Call Support API"
msgstr "API de soporte de llamada"

#: ../../c-api/call.rst:403
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Determinar si el objeto *o* es invocable.  Devuelve ``1`` si el objeto es "
"invocable y ``0`` en caso contrario.  Esta función siempre tiene éxito."
