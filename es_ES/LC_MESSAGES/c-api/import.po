# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/import.rst:6
msgid "Importing Modules"
msgstr "Importación de módulos"

#: ../../c-api/import.rst:16
msgid ""
"This is a wrapper around :c:func:`PyImport_Import()` which takes a :c:expr:"
"`const char *` as an argument instead of a :c:expr:`PyObject *`."
msgstr ""
"Это оболочка вокруг :c:func:`PyImport_Import()`, которая принимает в "
"качестве аргумента :c:expr:`const char *` вместо :c:expr:`PyObject *`."

#: ../../c-api/import.rst:21
msgid "This function is a deprecated alias of :c:func:`PyImport_ImportModule`."
msgstr "Esta función es un alias obsoleto de :c:func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:23
msgid ""
"This function used to fail immediately when the import lock was held by "
"another thread.  In Python 3.3 though, the locking scheme switched to per-"
"module locks for most purposes, so this function's special behaviour isn't "
"needed anymore."
msgstr ""
"Esta función solía fallar inmediatamente cuando el bloqueo de importación "
"estaba en manos de otro hilo.  Sin embargo, en Python 3.3, el esquema de "
"bloqueo cambió a bloqueos por módulo para la mayoría de los propósitos, así "
"ya no es necesaria la conducta especial de esta función."

#: ../../c-api/import.rst:29
msgid "Use :c:func:`PyImport_ImportModule` instead."
msgstr "Вместо этого используйте :c:func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:37
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`."
msgstr ""
"Importar un módulo.  Esto se describe mejor haciendo referencia a la función "
"incorporada de Python :func:`__import__`."

#: ../../c-api/import.rst:40 ../../c-api/import.rst:56
msgid ""
"The return value is a new reference to the imported module or top-level "
"package, or ``NULL`` with an exception set on failure.  Like for :func:"
"`__import__`, the return value when a submodule of a package was requested "
"is normally the top-level package, unless a non-empty *fromlist* was given."
msgstr ""
"El valor de retorno es una nueva referencia al módulo importado o al paquete "
"de nivel superior, o ``NULL`` con una excepción en caso de fallo.  Al igual "
"que para :func:`__import__`, el valor de retorno cuando se solicita un "
"submódulo de un paquete es normalmente el paquete de nivel superior, a menos "
"que se proporcione una *fromlist* no vacía."

#: ../../c-api/import.rst:46
msgid ""
"Failing imports remove incomplete module objects, like with :c:func:"
"`PyImport_ImportModule`."
msgstr ""
"Las importaciones fallidas eliminan objetos de módulo incompletos, como "
"ocurre con :c:func:`PyImport_ImportModule`."

#: ../../c-api/import.rst:52
msgid ""
"Import a module.  This is best described by referring to the built-in Python "
"function :func:`__import__`, as the standard :func:`__import__` function "
"calls this function directly."
msgstr ""
"Importar un módulo.  Esto se describe mejor haciendo referencia a la función "
"incorporada de Python :func:`__import__`, ya que la función estándar :func:"
"`__import__` llama directamente a esta función."

#: ../../c-api/import.rst:66
msgid ""
"Similar to :c:func:`PyImport_ImportModuleLevelObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Similar a :c:func:`PyImport_ImportModuleLevelObject`, pero el nombre es una "
"cadena codificada en UTF-8 en lugar de un objeto Unicode."

#: ../../c-api/import.rst:69
msgid "Negative values for *level* are no longer accepted."
msgstr "Ya no se aceptan valores negativos para *level*."

#: ../../c-api/import.rst:74
msgid ""
"This is a higher-level interface that calls the current \"import hook "
"function\" (with an explicit *level* of 0, meaning absolute import).  It "
"invokes the :func:`__import__` function from the ``__builtins__`` of the "
"current globals.  This means that the import is done using whatever import "
"hooks are installed in the current environment."
msgstr ""
"Se trata de una interfaz de nivel superior que llama a la \"función gancho "
"de importación\" actual (con un *nivel* explícito de 0, que significa "
"importación absoluta).  Invoca la función :func:`__import__` desde "
"``__builtins__`` de los globales actuales.  Esto significa que la "
"importación se realiza utilizando cualquier gancho de importación instalado "
"en el entorno actual."

#: ../../c-api/import.rst:80
msgid "This function always uses absolute imports."
msgstr "Esta función utiliza siempre importaciones absolutas."

#: ../../c-api/import.rst:85
msgid ""
"Reload a module.  Return a new reference to the reloaded module, or ``NULL`` "
"with an exception set on failure (the module still exists in this case)."
msgstr ""
"Recarga un módulo.  Devuelve una nueva referencia al módulo recargado, o "
"``NULL`` con una excepción establecida en caso de fallo (el módulo sigue "
"existiendo en este caso)."

#: ../../c-api/import.rst:91
msgid "Return the module object corresponding to a module name."
msgstr "Верните объект модуля, соответствующий имени модуля."

#: ../../c-api/import.rst:93
msgid ""
"The *name* argument may be of the form ``package.module``. First check the "
"modules dictionary if there's one there, and if not, create a new one and "
"insert it in the modules dictionary."
msgstr ""
"Аргумент *name* может иметь форму ``package.module``. Сначала проверьте "
"словарь модулей, если он там есть, а если нет, создайте новый и вставьте его "
"в словарь модулей."

#: ../../c-api/import.rst:97
msgid ""
"Return a :term:`strong reference` to the module on success. Return ``NULL`` "
"with an exception set on failure."
msgstr ""
"В случае успеха вернуть :term:`строгую ссылку` на модуль. Возвращает NULL с "
"исключением, установленным в случае сбоя."

#: ../../c-api/import.rst:100
msgid "The module name *name* is decoded from UTF-8."
msgstr "Имя модуля *name* декодируется из UTF-8."

#: ../../c-api/import.rst:102
msgid ""
"This function does not load or import the module; if the module wasn't "
"already loaded, you will get an empty module object. Use :c:func:"
"`PyImport_ImportModule` or one of its variants to import a module. Package "
"structures implied by a dotted name for *name* are not created if not "
"already present."
msgstr ""
"Эта функция не загружает и не импортирует модуль; если модуль еще не был "
"загружен, вы получите пустой объект модуля. Используйте :c:func:"
"`PyImport_ImportModule` или один из его вариантов для импорта модуля. "
"Структуры пакетов, обозначенные через точку для *name*, не создаются, если "
"они еще не присутствуют."

#: ../../c-api/import.rst:113
msgid ""
"Similar to :c:func:`PyImport_AddModuleRef`, but return a :term:`borrowed "
"reference` and *name* is a Python :class:`str` object."
msgstr ""
"Аналогично :c:func:`PyImport_AddModuleRef`, но возвращает :term:"
"`заимствованную ссылку`, а *name* является объектом :class:`str` Python."

#: ../../c-api/import.rst:121
msgid ""
"Similar to :c:func:`PyImport_AddModuleRef`, but return a :term:`borrowed "
"reference`."
msgstr ""
"Аналогично :c:func:`PyImport_AddModuleRef`, но возвращает :term:"
"`заимствованную ссылку`."

#: ../../c-api/import.rst:129
msgid ""
"Given a module name (possibly of the form ``package.module``) and a code "
"object read from a Python bytecode file or obtained from the built-in "
"function :func:`compile`, load the module.  Return a new reference to the "
"module object, or ``NULL`` with an exception set if an error occurred.  "
"*name* is removed from :data:`sys.modules` in error cases, even if *name* "
"was already in :data:`sys.modules` on entry to :c:func:"
"`PyImport_ExecCodeModule`.  Leaving incompletely initialized modules in :"
"data:`sys.modules` is dangerous, as imports of such modules have no way to "
"know that the module object is an unknown (and probably damaged with respect "
"to the module author's intents) state."
msgstr ""
"Учитывая имя модуля (возможно, в форме ``package.module``) и объект кода, "
"считанный из файла байт-кода Python или полученный из встроенной функции :"
"func:`compile`, загрузите модуль. Вернуть новую ссылку на объект модуля или "
"``NULL`` с установленным исключением, если произошла ошибка. *name* "
"удаляется из :data:`sys.modules` в случае ошибок, даже если *name* уже было "
"в :data:`sys.modules` при входе в :c:func:`PyImport_ExecCodeModule`. "
"Оставлять не полностью инициализированные модули в :data:`sys.modules` "
"опасно, поскольку при импорте таких модулей нет возможности узнать, что "
"объект модуля находится в неизвестном (и, вероятно, поврежденном с точки "
"зрения намерений автора модуля) состоянии."

#: ../../c-api/import.rst:139
msgid ""
"The module's :attr:`~module.__spec__` and :attr:`~module.__loader__` will be "
"set, if not set already, with the appropriate values.  The spec's loader "
"will be set to the module's :attr:`!__loader__` (if set) and to an instance "
"of :class:`~importlib.machinery.SourceFileLoader` otherwise."
msgstr ""
":attr:`~module.__spec__` и :attr:`~module.__loader__` модуля будут "
"установлены, если еще не установлены, с соответствующими значениями. "
"Загрузчик спецификации будет установлен на :attr:`!__loader__` модуля (если "
"установлен) и на экземпляр :class:`~importlib.machinery.SourceFileLoader` в "
"противном случае."

#: ../../c-api/import.rst:144
msgid ""
"The module's :attr:`~module.__file__` attribute will be set to the code "
"object's :attr:`~codeobject.co_filename`.  If applicable, :attr:`~module."
"__cached__` will also be set."
msgstr ""
"Атрибуту :attr:`~module.__file__` модуля будет присвоен атрибут :attr:"
"`~codeobject.co_filename` объекта кода. Если применимо, также будет "
"установлен :attr:`~module.__cached__`."

#: ../../c-api/import.rst:148
msgid ""
"This function will reload the module if it was already imported.  See :c:"
"func:`PyImport_ReloadModule` for the intended way to reload a module."
msgstr ""
"Esta función recargará el módulo si ya fue importado.  Consultar :c:func:"
"`PyImport_ReloadModule` para conocer la forma prevista de recargar un módulo."

#: ../../c-api/import.rst:151
msgid ""
"If *name* points to a dotted name of the form ``package.module``, any "
"package structures not already created will still not be created."
msgstr ""
"Si *name* apunta a un nombre con puntos de la forma ``package.module``, "
"cualquier estructura de paquete que no esté ya creada seguirá sin crearse."

#: ../../c-api/import.rst:154
msgid ""
"See also :c:func:`PyImport_ExecCodeModuleEx` and :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."
msgstr ""
"Ver también :c:func:`PyImport_ExecCodeModuleEx` y :c:func:"
"`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:157
msgid ""
"The setting of :attr:`~module.__cached__` and :attr:`~module.__loader__` is "
"deprecated. See :class:`~importlib.machinery.ModuleSpec` for alternatives."
msgstr ""
"Настройка :attr:`~module.__cached__` и :attr:`~module.__loader__` устарела. "
"См. альтернативы в :class:`~importlib.machinery.ModuleSpec`."

#: ../../c-api/import.rst:165
msgid ""
"Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`~module.__file__` "
"attribute of the module object is set to *pathname* if it is non-``NULL``."
msgstr ""
"Подобно :c:func:`PyImport_ExecCodeModule`, но атрибут :attr:`~module."
"__file__` объекта модуля устанавливается в *pathname*, если он не равен "
"``NULL``."

#: ../../c-api/import.rst:168
msgid "See also :c:func:`PyImport_ExecCodeModuleWithPathnames`."
msgstr "Ver también :c:func:`PyImport_ExecCodeModuleWithPathnames`."

#: ../../c-api/import.rst:173
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`~module.__cached__` "
"attribute of the module object is set to *cpathname* if it is non-``NULL``.  "
"Of the three functions, this is the preferred one to use."
msgstr ""
"Подобно :c:func:`PyImport_ExecCodeModuleEx`, но атрибут :attr:`~module."
"__cached__` объекта модуля устанавливается в *cpathname*, если он не равен "
"``NULL``. Из трех функций эту предпочтительнее использовать."

#: ../../c-api/import.rst:179
msgid ""
"Setting :attr:`~module.__cached__` is deprecated. See :class:`~importlib."
"machinery.ModuleSpec` for alternatives."
msgstr ""
"Настройка :attr:`~module.__cached__` устарела. См. альтернативы в :class:"
"`~importlib.machinery.ModuleSpec`."

#: ../../c-api/import.rst:186
msgid ""
"Like :c:func:`PyImport_ExecCodeModuleObject`, but *name*, *pathname* and "
"*cpathname* are UTF-8 encoded strings. Attempts are also made to figure out "
"what the value for *pathname* should be from *cpathname* if the former is "
"set to ``NULL``."
msgstr ""
"Como :c:func:`PyImport_ExecCodeModuleObject`, pero *name*, *pathname* y "
"*cpathname* son cadenas codificadas en UTF-8. También se intenta averiguar "
"cuál debería ser el valor de *pathname* a partir de *cpathname* si el "
"primero se establece en ``NULL``."

#: ../../c-api/import.rst:192
msgid ""
"Uses :func:`!imp.source_from_cache` in calculating the source path if only "
"the bytecode path is provided."
msgstr ""
"Использует :func:`!imp.source_from_cache` при вычислении исходного пути, "
"если указан только путь к байт-коду."

#: ../../c-api/import.rst:195
msgid "No longer uses the removed :mod:`!imp` module."
msgstr "Больше не использует удаленный модуль :mod:`!imp`."

#: ../../c-api/import.rst:201
msgid ""
"Return the magic number for Python bytecode files (a.k.a. :file:`.pyc` "
"file). The magic number should be present in the first four bytes of the "
"bytecode file, in little-endian byte order. Returns ``-1`` on error."
msgstr ""
"Devuelve el número mágico de los archivos de código de bytes de Python "
"(también conocido como archivo :file:`.pyc` ). El número mágico debe estar "
"presente en los primeros cuatro bytes del archivo bytecode, en orden little-"
"endian. Devuelve ``-1`` en caso de error."

#: ../../c-api/import.rst:205
msgid "Return value of ``-1`` upon failure."
msgstr "Valor de retorno de ``-1`` en caso de fallo."

#: ../../c-api/import.rst:211
msgid ""
"Return the magic tag string for :pep:`3147` format Python bytecode file "
"names.  Keep in mind that the value at ``sys.implementation.cache_tag`` is "
"authoritative and should be used instead of this function."
msgstr ""
"Devuelve la cadena de etiquetas mágicas para nombres de archivos de código "
"de bytes de Python con formato :pep:`3147`.  Tener en cuenta que el valor en "
"``sys.implementation.cache_tag`` es autoritativo y debe utilizarse en lugar "
"de esta función."

#: ../../c-api/import.rst:219
msgid ""
"Return the dictionary used for the module administration (a.k.a. ``sys."
"modules``).  Note that this is a per-interpreter variable."
msgstr ""
"Devuelve el diccionario utilizado para la administración del módulo (también "
"conocido como ``sys.modules``).  Tener en cuenta que se trata de una "
"variable por intérprete."

#: ../../c-api/import.rst:224
msgid ""
"Return the already imported module with the given name.  If the module has "
"not been imported yet then returns ``NULL`` but does not set an error.  "
"Returns ``NULL`` and sets an error if the lookup failed."
msgstr ""
"Devuelve el módulo ya importado con el nombre dado.  Si el módulo aún no se "
"ha importado, devuelve ``NULL`` pero no genera ningún error.  Si la búsqueda "
"falla, devuelve ``NULL`` y genera un error."

#: ../../c-api/import.rst:232
msgid ""
"Return a finder object for a :data:`sys.path`/:attr:`!pkg.__path__` item "
"*path*, possibly by fetching it from the :data:`sys.path_importer_cache` "
"dict.  If it wasn't yet cached, traverse :data:`sys.path_hooks` until a hook "
"is found that can handle the path item.  Return ``None`` if no hook could; "
"this tells our caller that the :term:`path based finder` could not find a "
"finder for this path item. Cache the result in :data:`sys."
"path_importer_cache`. Return a new reference to the finder object."
msgstr ""
"Возвращает объект поиска для элемента :data:`sys.path`/:attr:`!pkg.__path__` "
"*path*, возможно, извлекая его из словаря :data:`sys.path_importer_cache`. "
"Если он еще не кэширован, просматривайте :data:`sys.path_hooks`, пока не "
"будет найден перехватчик, способный обработать элемент пути. Верните None, "
"если ни один крючок не может; это сообщает нашему вызывающему объекту, что "
"средство поиска на основе пути не смогло найти средство поиска для этого "
"элемента пути. Кэшируйте результат в :data:`sys.path_importer_cache`. "
"Верните новую ссылку на объект поиска."

#: ../../c-api/import.rst:243
msgid ""
"Load a frozen module named *name*.  Return ``1`` for success, ``0`` if the "
"module is not found, and ``-1`` with an exception set if the initialization "
"failed.  To access the imported module on a successful load, use :c:func:"
"`PyImport_ImportModule`.  (Note the misnomer --- this function would reload "
"the module if it was already imported.)"
msgstr ""
"Carga un módulo congelado llamado *name*.  Devuelve ``1`` en caso de éxito, "
"``0`` si el módulo no se encuentra, y ``-1`` con una excepción si la "
"inicialización falló.  Para acceder al módulo importado en una carga con "
"éxito, usar :c:func:`PyImport_ImportModule`. (Notar el nombre equivocado --- "
"esta función recargaría el módulo si ya estuviera importado)."

#: ../../c-api/import.rst:251
msgid "The ``__file__`` attribute is no longer set on the module."
msgstr "El atributo ``__file__`` ya no se establece en el módulo."

#: ../../c-api/import.rst:257
msgid ""
"Similar to :c:func:`PyImport_ImportFrozenModuleObject`, but the name is a "
"UTF-8 encoded string instead of a Unicode object."
msgstr ""
"Similar a :c:func:`PyImport_ImportFrozenModuleObject`, pero el nombre es una "
"cadena codificada en UTF-8 en lugar de un objeto Unicode."

#: ../../c-api/import.rst:265
msgid ""
"This is the structure type definition for frozen module descriptors, as "
"generated by the :program:`freeze` utility (see :file:`Tools/freeze/` in the "
"Python source distribution).  Its definition, found in :file:`Include/import."
"h`, is::"
msgstr ""
"Esta es la definición del tipo de estructura para los descriptores de "
"módulos congelados, generada por la utilidad :program:`freeze` (ver :file:"
"`Tools/freeze/` en la distribución del código fuente de Python).  Su "
"definición, que se encuentra en :file:`Include/import.h`, es::"

#: ../../c-api/import.rst:270
msgid ""
"struct _frozen {\n"
"    const char *name;\n"
"    const unsigned char *code;\n"
"    int size;\n"
"    bool is_package;\n"
"};"
msgstr ""
"struct _frozen {\n"
"    const char *name;\n"
"    const unsigned char *code;\n"
"    int size;\n"
"    bool is_package;\n"
"};"

#: ../../c-api/import.rst:277
msgid ""
"The new ``is_package`` field indicates whether the module is a package or "
"not. This replaces setting the ``size`` field to a negative value."
msgstr ""
"Новое поле is_package указывает, является ли модуль пакетом или нет. Это "
"заменяет установку отрицательного значения поля ``size``."

#: ../../c-api/import.rst:283
msgid ""
"This pointer is initialized to point to an array of :c:struct:`_frozen` "
"records, terminated by one whose members are all ``NULL`` or zero.  When a "
"frozen module is imported, it is searched in this table.  Third-party code "
"could play tricks with this to provide a dynamically created collection of "
"frozen modules."
msgstr ""
"Этот указатель инициализируется, чтобы указать на массив записей :c:struct:"
"`_frozen`, заканчивающийся записью, все элементы которой имеют значение "
"``NULL`` или ноль. Когда импортируется замороженный модуль, он ищется в этой "
"таблице. Сторонний код может сыграть с этим злую шутку, предоставляя "
"динамически создаваемую коллекцию замороженных модулей."

#: ../../c-api/import.rst:291
msgid ""
"Add a single module to the existing table of built-in modules.  This is a "
"convenience wrapper around :c:func:`PyImport_ExtendInittab`, returning "
"``-1`` if the table could not be extended.  The new module can be imported "
"by the name *name*, and uses the function *initfunc* as the initialization "
"function called on the first attempted import.  This should be called "
"before :c:func:`Py_Initialize`."
msgstr ""
"Añade un único módulo a la tabla existente de módulos incorporados.  Esta es "
"una envoltura de conveniencia alrededor de :c:func:`PyImport_ExtendInittab`, "
"devolviendo ``-1`` si la tabla no pudo ser extendida.  El nuevo módulo se "
"puede importar por el nombre *name*, y utiliza la función *initfunc* como "
"función de inicialización llamada en el primer intento de importación.  Esta "
"se debe llamar antes de :c:func:`Py_Initialize`."

#: ../../c-api/import.rst:301
msgid ""
"Structure describing a single entry in the list of built-in modules. "
"Programs which embed Python may use an array of these structures in "
"conjunction with :c:func:`PyImport_ExtendInittab` to provide additional "
"built-in modules. The structure consists of two members:"
msgstr ""
"Структура, описывающая одну запись в списке встроенных модулей. Программы, "
"встраиваемые в Python, могут использовать массив этих структур в сочетании "
"с :c:func:`PyImport_ExtendInittab` для предоставления дополнительных "
"встроенных модулей. Структура состоит из двух участников:"

#: ../../c-api/import.rst:309
msgid "The module name, as an ASCII encoded string."
msgstr "Имя модуля в виде строки в кодировке ASCII."

#: ../../c-api/import.rst:313
msgid "Initialization function for a module built into the interpreter."
msgstr "Функция инициализации модуля, встроенная в интерпретатор."

#: ../../c-api/import.rst:318
msgid ""
"Add a collection of modules to the table of built-in modules.  The *newtab* "
"array must end with a sentinel entry which contains ``NULL`` for the :c:"
"member:`~_inittab.name` field; failure to provide the sentinel value can "
"result in a memory fault. Returns ``0`` on success or ``-1`` if insufficient "
"memory could be allocated to extend the internal table.  In the event of "
"failure, no modules are added to the internal table.  This must be called "
"before :c:func:`Py_Initialize`."
msgstr ""
"Добавьте коллекцию модулей в таблицу встроенных модулей. Массив *newtab* "
"должен заканчиваться контрольной записью, которая содержит ``NULL`` для "
"поля :c:member:`~_inittab.name`; непредоставление контрольного значения "
"может привести к сбою памяти. Возвращает ``0`` в случае успеха или ``-1``, "
"если для расширения внутренней таблицы было выделено недостаточно памяти. В "
"случае сбоя во внутреннюю таблицу модули не добавляются. Это должно быть "
"вызвано до :c:func:`Py_Initialize`."

#: ../../c-api/import.rst:325
msgid ""
"If Python is initialized multiple times, :c:func:`PyImport_AppendInittab` "
"or :c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"Si Python se inicializa varias veces, se debe llamar a :c:func:"
"`PyImport_AppendInittab` o :c:func:`PyImport_ExtendInittab` antes de cada "
"inicialización de Python."

#: ../../c-api/import.rst:11
msgid "package variable"
msgstr "переменная пакета"

#: ../../c-api/import.rst:11
msgid "__all__"
msgstr "__all__"

#: ../../c-api/import.rst:11
msgid "__all__ (package variable)"
msgstr "__all__ (переменная пакета)"

#: ../../c-api/import.rst:11
msgid "modules (in module sys)"
msgstr "modules (in module sys)"

#: ../../c-api/import.rst:35 ../../c-api/import.rst:127
msgid "built-in function"
msgstr "funkcja wbudowana"

#: ../../c-api/import.rst:35
msgid "__import__"
msgstr "__import__"

#: ../../c-api/import.rst:127
msgid "compile"
msgstr "скомпилировать"

#: ../../c-api/import.rst:263
msgid "freeze utility"
msgstr "заморозить утилиту"
