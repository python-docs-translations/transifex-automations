# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 16:06+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Objetos tipo "

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"La estructura C de los objetos utilizados para describir los tipos "
"incorporados."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Este es el objeto de tipo para los objetos de tipo; es el mismo objeto que :"
"class:`type` en la capa de Python."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Devolver un valor distinto de cero si el objeto *o* es un objeto de tipo, "
"incluyendo instancias de tipos derivados del objeto de tipo estándar. "
"Devolver 0 en todos los demás casos. Esta función siempre tiene éxito."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Devuelve un valor distinto de cero si el objeto *o* es un objeto de tipo, "
"pero no un subtipo del objeto de tipo estándar.  Devuelve 0 en todos los "
"demás casos.  Esta función siempre tiene éxito."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Borrar la caché interna de búsqueda. Devolver la etiqueta de la versión "
"actual."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"Devuelve el miembro :c:member:`~PyTypeObject.tp_flags` de *type*. Esta "
"función está principalmente destinada para su uso con ``Py_LIMITED_API``; "
"los bits de indicador individuales están garantizados para ser estables en "
"las versiones de Python, pero el acceso a :c:member:`~PyTypeObject.tp_flags` "
"en sí no es parte de la API limitada."

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "El tipo de retorno ahora es ``unsigned long`` en lugar de ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Invalida la caché de búsqueda interna para el tipo y todos sus subtipos.  "
"Esta función debe invocarse después de cualquier modificación manual de los "
"atributos o clases base del tipo."

#: ../../c-api/type.rst:62
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Devuelve un valor distinto de cero si el objeto de tipo *o* establece la "
"característica *feature*. Las características de tipo se indican mediante "
"banderas de bits individuales."

#: ../../c-api/type.rst:68
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Devuelve verdadero si el objeto de tipo incluye soporte para el detector de "
"ciclos; esto prueba la bandera de tipo :const:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr "Devuelve true si *a* es un subtipo de *b*."

#: ../../c-api/type.rst:76
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"Esta función solo verifica los subtipos reales, lo que significa que no se "
"llama a :meth:`~class.__subclasscheck__` en *b*. Llama a :c:func:"
"`PyObject_IsSubclass` para hacer la misma verificación que haría :func:"
"`issubclass`."

#: ../../c-api/type.rst:84
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"Manejador genérico para la ranura :c:member:`~PyTypeObject.tp_alloc` de un "
"objeto de tipo. Utilizar el mecanismo de asignación de memoria "
"predeterminado de Python para asignar una nueva instancia e inicializar "
"todos sus contenidos a ``NULL``."

#: ../../c-api/type.rst:90
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"Manejador genérico para la ranura :c:member:`~PyTypeObject.tp_new` de un "
"objeto de tipo. Crea una nueva instancia utilizando la ranura :c:member:"
"`~PyTypeObject.tp_alloc` del tipo."

#: ../../c-api/type.rst:95
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Finaliza un objeto de tipo.  Se debe llamar en todos los objetos de tipo "
"para finalizar su inicialización.  Esta función es responsable de añadir las "
"ranuras heredadas de la clase base de un tipo.  Devuelve ``0`` en caso de "
"éxito, o devuelve ``-1`` y establece una excepción en caso de error."

#: ../../c-api/type.rst:101
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :const:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :const:`Py_TPFLAGS_HAVE_GC` "
"in its flags then it **must** implement the GC protocol itself by at least "
"implementing the :c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"Si algunas de las clases base implementa el protocolo GC y el tipo "
"proporcionado no incluye el :const:`Py_TPFLAGS_HAVE_GC` en sus indicadores, "
"entonces el protocolo GC se implementará automáticamente a partir de sus "
"padres. Por el contrario, si el tipo que se está creando incluye :const:"
"`Py_TPFLAGS_HAVE_GC` en sus indicadores, entonces **debe** implementar el "
"protocolo GC por sí mismo, al menos implementando el controlador :c:member:"
"`~PyTypeObject.tp_traverse`."

#: ../../c-api/type.rst:111
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"Devuelve el puntero de la función almacenada en la ranura dada. Si el "
"resultado es ``NULL``, esto indica que la ranura es ``NULL``, o que se llamó "
"la función con parámetros inválidos. Quienes llaman a la función normalmente "
"convertirán el puntero resultante en el tipo de función apropiado."

#: ../../c-api/type.rst:117
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Ver :c:member:`PyType_Slot.slot` para los posibles valores del argumento "
"*slot*."

#: ../../c-api/type.rst:121
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` ahora puede aceptar todos los tipos. Anteriormente, "
"se limitaba a :ref:`heap types <heap-types>`."

#: ../../c-api/type.rst:127
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Devuelve el objeto módulo asociado con el tipo dado cuando el tipo fue "
"creado usando :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:130 ../../c-api/type.rst:148
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Si no hay ningún módulo asociado al tipo dado, establece :py:class:"
"`TypeError` y devuelve ``NULL``."

#: ../../c-api/type.rst:133
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method."
msgstr ""
"Esta función se utiliza normalmente para obtener el módulo en el que está "
"definido un método. Tener en cuenta que en un método de este tipo, "
"``PyType_GetModule(Py_TYPE(self))`` puede no devolver el resultado previsto. "
"``Py_TYPE(self)`` puede ser una *subclase* de la clase prevista, y las "
"subclases no están necesariamente definidas en el mismo módulo que su "
"superclase. Consultar :c:type:`PyCMethod` para obtener la clase que define "
"el método."

#: ../../c-api/type.rst:144
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"Devuelve el estado del objeto módulo asociado al tipo dado. Es un atajo para "
"llamar a :c:func:`PyModule_GetState()` sobre el resultado de :c:func:"
"`PyType_GetModule`."

#: ../../c-api/type.rst:151
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Si el *type* tiene un módulo asociado pero su estado es ``NULL``, devuelve "
"``NULL`` sin establecer una excepción."

#: ../../c-api/type.rst:158
msgid "Creating Heap-Allocated Types"
msgstr "Crear Tipos Asignados en el Montón"

#: ../../c-api/type.rst:160
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Las siguientes funciones y estructuras se utilizan para crear tipos :ref:"
"`heap <heap-types>`."

#: ../../c-api/type.rst:165
msgid ""
"Creates and returns a :ref:`heap type <heap-types>` from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"Crea y devuelve un tipo :ref:`heap <heap-types>` a partir del *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."

#: ../../c-api/type.rst:168
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"El argumento *bases* se puede usar para especificar clases base; puede ser "
"una sola clase o una tupla de clases. Si *bases* es ``NULL``, se utiliza el "
"espacio *Py_tp_bases*. Si también es ``NULL``, se utiliza *Py_tp_base*. Si "
"también es ``NULL``, el nuevo tipo deriva de :class:`object`."

#: ../../c-api/type.rst:174
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"El argumento *module* puede utilizarse para registrar el módulo en el que se "
"define la nueva clase. Debe ser un objeto de módulo o ``NULL``. Si no es "
"``NULL``, el módulo se asocia al nuevo tipo y puede recuperarse "
"posteriormente con :c:func:`PyType_GetModule`. El módulo asociado no se "
"hereda por las subclases; debe especificarse para cada clase individualmente."

#: ../../c-api/type.rst:181
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Esta función llama a :c:func:`PyType_Ready` en el nuevo tipo."

#: ../../c-api/type.rst:187
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"La función acepta ahora una única clase como argumento *bases* y ``NULL`` "
"como ranura ``tp_doc``."

#: ../../c-api/type.rst:192
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr "Equivalente a ``PyType_FromModuleAndSpec(NULL, spec, bases)``."

#: ../../c-api/type.rst:198
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "Equivalente a ``PyType_FromSpecWithBases(spec, NULL)``."

#: ../../c-api/type.rst:202
msgid "Structure defining a type's behavior."
msgstr "Estructura que define el comportamiento de un tipo."

#: ../../c-api/type.rst:206
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Nombre del tipo, utilizado para establecer :c:member:`PyTypeObject.tp_name`."

#: ../../c-api/type.rst:211
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"Tamaño de la instancia en bytes, utilizado para establecer :c:member:"
"`PyTypeObject.tp_basicsize` y :c:member:`PyTypeObject.tp_itemsize`."

#: ../../c-api/type.rst:217
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Banderas de tipo, utilizadas para establecer :c:member:`PyTypeObject."
"tp_flags`."

#: ../../c-api/type.rst:219
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Si la bandera ``Py_TPFLAGS_HEAPTYPE`` no está activada, :c:func:"
"`PyType_FromSpecWithBases` la activa automáticamente."

#: ../../c-api/type.rst:224
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Matriz de estructuras :c:type:`PyType_Slot`. Terminado por el valor de "
"ranura especial ``{0, NULL}``."

#: ../../c-api/type.rst:229
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Estructura que define la funcionalidad opcional de un tipo, que contiene un "
"ID de ranura y un puntero de valor."

#: ../../c-api/type.rst:234
msgid "A slot ID."
msgstr "Un ID de ranura."

#: ../../c-api/type.rst:236
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"Los IDs de las ranuras se nombran como los nombres de campo de las "
"estructuras :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:"
"`PySequenceMethods`, :c:type:`PyMappingMethods` y :c:type:`PyAsyncMethods` "
"con un prefijo ``Py_`` añadido. Por ejemplo, utiliza:"

#: ../../c-api/type.rst:242
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` para establecer :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:243
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` para establecer :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:244
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` para establecer :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:246
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and :c:"
"type:`PyType_Slot`:"
msgstr ""
"Los siguientes campos no se pueden establecer en absoluto utilizando :c:type:"
"`PyType_Spec` y :c:type:`PyType_Slot`:"

#: ../../c-api/type.rst:249
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:250
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../../c-api/type.rst:251
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../../c-api/type.rst:252
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../../c-api/type.rst:253
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../../c-api/type.rst:254
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/type.rst:255
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (ver :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:257
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (ver :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"

#: ../../c-api/type.rst:259
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (ver :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:262
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and :c:type:"
"`PyType_Slot` under the limited API:"
msgstr ""
"Los siguientes campos no pueden establecerse utilizando :c:type:"
"`PyType_Spec` y :c:type:`PyType_Slot` bajo la API limitada:"

#: ../../c-api/type.rst:265
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: ../../c-api/type.rst:266
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: ../../c-api/type.rst:268
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :py:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"Establecer :c:data:`Py_tp_bases` o :c:data:`Py_tp_base` puede ser "
"problemático en algunas plataformas. Para evitar problemas, utilizar en su "
"lugar el argumento *bases* de :py:func:`PyType_FromSpecWithBases`."

#: ../../c-api/type.rst:275
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""
"Las ranuras en :c:type:`PyBufferProcs` pueden configurarse en la API "
"ilimitada."

#: ../../c-api/type.rst:279
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""
"El valor deseado de la ranura. En la mayoría de los casos, se trata de un "
"puntero a una función."

#: ../../c-api/type.rst:282
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "Las ranuras que no sean ``Py_tp_doc`` no pueden ser ``NULL``."
