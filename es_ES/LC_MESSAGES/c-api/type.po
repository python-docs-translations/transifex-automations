# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-28 14:58+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2025\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "Objetos tipo "

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"La estructura C de los objetos utilizados para describir los tipos "
"incorporados."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Este es el objeto de tipo para los objetos de tipo; es el mismo objeto que :"
"class:`type` en la capa de Python."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr ""
"Devolver un valor distinto de cero si el objeto *o* es un objeto de tipo, "
"incluyendo instancias de tipos derivados del objeto de tipo estándar. "
"Devolver 0 en todos los demás casos. Esta función siempre tiene éxito."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr ""
"Devuelve un valor distinto de cero si el objeto *o* es un objeto de tipo, "
"pero no un subtipo del objeto de tipo estándar.  Devuelve 0 en todos los "
"demás casos.  Esta función siempre tiene éxito."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Borrar la caché interna de búsqueda. Devolver la etiqueta de la versión "
"actual."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""
"Devuelve el miembro :c:member:`~PyTypeObject.tp_flags` de *tipo*. Esta "
"función está pensada principalmente para su uso con ``Py_LIMITED_API``; se "
"garantiza que los bits de bandera individuales son estables en todas las "
"versiones de Python, pero el acceso a :c:member:`~PyTypeObject.tp_flags` en "
"sí no forma parte de la :ref:`limited API <limited-c-api>`."

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "El tipo de retorno ahora es ``unsigned long`` en lugar de ``long``."

#: ../../c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only exposed "
"via a read-only proxy (:attr:`cls.__dict__ <type.__dict__>`). This is a "
"replacement for accessing :c:member:`~PyTypeObject.tp_dict` directly. The "
"returned dictionary must be treated as read-only."
msgstr ""
"Devuelve el espacio de nombres interno del objeto de tipo, que de otro modo "
"sólo se expone a través de un proxy de sólo lectura (:attr:`cls.__dict__ "
"<type.__dict__>`). Esto sustituye el acceso directo a :c:member:"
"`~PyTypeObject.tp_dict`. El diccionario devuelto debe tratarse como de sólo "
"lectura."

#: ../../c-api/type.rst:61
msgid ""
"This function is meant for specific embedding and language-binding cases, "
"where direct access to the dict is necessary and indirect access (e.g. via "
"the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""
"Esta función está pensada para casos específicos de incrustación y "
"vinculación lingüística, en los que es necesario el acceso directo al dict y "
"el acceso indirecto (por ejemplo, a través del proxy o :c:func:"
"`PyObject_GetAttr`) no es adecuado."

#: ../../c-api/type.rst:65
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr ""
"Los módulos de ampliación deben seguir utilizando ``tp_dict``, directa o "
"indirectamente, al configurar sus propios tipos."

#: ../../c-api/type.rst:73
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Invalida la caché de búsqueda interna para el tipo y todos sus subtipos.  "
"Esta función debe invocarse después de cualquier modificación manual de los "
"atributos o clases base del tipo."

#: ../../c-api/type.rst:80
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case of "
"error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registrar *callback* como observador de tipos. Devuelve un ID entero no "
"negativo que debe pasarse a futuras llamadas a :c:func:`PyType_Watch`. En "
"caso de error (por ejemplo, no hay más ID de observador disponibles), "
"devuelve ``-1`` y establece una excepción."

#: ../../c-api/type.rst:90
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from :c:func:"
"`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error (e.g. if "
"*watcher_id* was never registered.)"
msgstr ""
"Borra el observador identificado por *watcher_id* (previamente devuelto por :"
"c:func:`PyType_AddWatcher`). Devuelve ``0`` en caso de éxito, ``-1`` en caso "
"de error (por ejemplo, si *watcher_id* nunca se registró.)"

#: ../../c-api/type.rst:94
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a *watcher_id* "
"that was not returned to it by a previous call to :c:func:"
"`PyType_AddWatcher`."
msgstr ""
"Nunca debe llamar una extensión a ``PyType_ClearWatcher`` con un "
"*watcher_id* que no le haya sido devuelto por una llamada previa a :c:func:"
"`PyType_AddWatcher`."

#: ../../c-api/type.rst:103
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by :c:func:"
"`PyType_AddWatcher` will be called whenever :c:func:`PyType_Modified` "
"reports a change to *type*. (The callback may be called only once for a "
"series of consecutive modifications to *type*, if :c:func:`!_PyType_Lookup` "
"is not called on *type* between the modifications; this is an implementation "
"detail and subject to change.)"
msgstr ""
"Marca *type* como vigilado. La llamada de retorno concedida a *watcher_id* "
"por :c:func:`PyType_AddWatcher` se llamará cada vez que :c:func:"
"`PyType_Modified` informe de un cambio en *type*. (El callback se puede "
"llamar sólo una vez para una serie de modificaciones consecutivas a *type*, "
"si :c:func:`!_PyType_Lookup` no es llamado en *type* entre las "
"modificaciones; esto es un detalle de implementación y está sujeto a "
"cambios)."

#: ../../c-api/type.rst:110
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that was "
"not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""
"Una extensión nunca debe llamar a ``PyType_Watch`` con un *watcher_id* que "
"no le haya sido devuelto por una llamada previa a :c:func:"
"`PyType_AddWatcher`."

#: ../../c-api/type.rst:118
msgid "Type of a type-watcher callback function."
msgstr "Tipo de una función de devolución de llamada del observador de tipos."

#: ../../c-api/type.rst:120
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to be "
"called on *type* or any type in its MRO; violating this rule could cause "
"infinite recursion."
msgstr ""
"La llamada de retorno no debe modificar *type* o causar que :c:func:"
"`PyType_Modified` sea llamado en *type* o cualquier tipo en su MRO; violar "
"esta regla podría causar recursión infinita."

#: ../../c-api/type.rst:129
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr ""
"Devuelve un valor distinto de cero si el objeto de tipo *o* establece la "
"característica *feature*. Las características de tipo se indican mediante "
"banderas de bits individuales."

#: ../../c-api/type.rst:135
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Devuelve true si el objeto de tipo incluye soporte para el detector de "
"ciclos; esto comprueba la bandera de tipo :c:macro:`Py_TPFLAGS_HAVE_GC`."

#: ../../c-api/type.rst:141
msgid "Return true if *a* is a subtype of *b*."
msgstr "Devuelve true si *a* es un subtipo de *b*."

#: ../../c-api/type.rst:143
msgid ""
"This function only checks for actual subtypes, which means that :meth:`~type."
"__subclasscheck__` is not called on *b*.  Call :c:func:`PyObject_IsSubclass` "
"to do the same check that :func:`issubclass` would do."
msgstr ""
"Esta función sólo comprueba los subtipos reales, lo que significa que no se "
"llama a :meth:`~type.__subclasscheck__` en *b*.  Llame a :c:func:"
"`PyObject_IsSubclass` para hacer la misma comprobación que haría :func:"
"`issubclass`."

#: ../../c-api/type.rst:151
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"Manejador genérico para la ranura :c:member:`~PyTypeObject.tp_alloc` de un "
"objeto de tipo. Utilizar el mecanismo de asignación de memoria "
"predeterminado de Python para asignar una nueva instancia e inicializar "
"todos sus contenidos a ``NULL``."

#: ../../c-api/type.rst:157
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"Manejador genérico para la ranura :c:member:`~PyTypeObject.tp_new` de un "
"objeto de tipo. Crea una nueva instancia utilizando la ranura :c:member:"
"`~PyTypeObject.tp_alloc` del tipo."

#: ../../c-api/type.rst:162
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"Finaliza un objeto de tipo.  Se debe llamar en todos los objetos de tipo "
"para finalizar su inicialización.  Esta función es responsable de añadir las "
"ranuras heredadas de la clase base de un tipo.  Devuelve ``0`` en caso de "
"éxito, o devuelve ``-1`` y establece una excepción en caso de error."

#: ../../c-api/type.rst:168
msgid ""
"If some of the base classes implements the GC protocol and the provided type "
"does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :c:macro:"
"`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC protocol "
"itself by at least implementing the :c:member:`~PyTypeObject.tp_traverse` "
"handle."
msgstr ""
"Si alguna de las clases base implementa el protocolo GC y el tipo "
"proporcionado no incluye :c:macro:`Py_TPFLAGS_HAVE_GC` en sus banderas, "
"entonces el protocolo GC será implementado automáticamente desde sus padres. "
"Por el contrario, si el tipo que se está creando incluye :c:macro:"
"`Py_TPFLAGS_HAVE_GC` en sus banderas entonces **debe** implementar el "
"protocolo GC por sí mismo implementando al menos el manejador :c:member:"
"`~PyTypeObject.tp_traverse`."

#: ../../c-api/type.rst:178
msgid ""
"Return the type's name. Equivalent to getting the type's :attr:`~type."
"__name__` attribute."
msgstr ""
"Devuelve el nombre del tipo. Equivale a obtener el atributo :attr:`~type."
"__name__` del tipo."

#: ../../c-api/type.rst:185
msgid ""
"Return the type's qualified name. Equivalent to getting the type's :attr:"
"`~type.__qualname__` attribute."
msgstr ""
"Devuelve el nombre cualificado del tipo. Equivale a obtener el atributo :"
"attr:`~type.__qualname__` del tipo."

#: ../../c-api/type.rst:192
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"Devuelve el puntero de la función almacenada en la ranura dada. Si el "
"resultado es ``NULL``, esto indica que la ranura es ``NULL``, o que se llamó "
"la función con parámetros inválidos. Quienes llaman a la función normalmente "
"convertirán el puntero resultante en el tipo de función apropiado."

#: ../../c-api/type.rst:198
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr ""
"Ver :c:member:`PyType_Slot.slot` para los posibles valores del argumento "
"*slot*."

#: ../../c-api/type.rst:202
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` ahora puede aceptar todos los tipos. Anteriormente, "
"se limitaba a :ref:`heap types <heap-types>`."

#: ../../c-api/type.rst:208
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
"Devuelve el objeto módulo asociado con el tipo dado cuando el tipo fue "
"creado usando :c:func:`PyType_FromModuleAndSpec`."

#: ../../c-api/type.rst:211 ../../c-api/type.rst:231
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr ""
"Si no hay ningún módulo asociado al tipo dado, establece :py:class:"
"`TypeError` y devuelve ``NULL``."

#: ../../c-api/type.rst:214
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may "
"not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of the "
"intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when :c:"
"type:`!PyCMethod` cannot be used."
msgstr ""
"Esta función se utiliza normalmente para obtener el módulo en el que está "
"definido un método. Tenga en cuenta que en un método de este tipo, "
"``PyType_GetModule(Py_TYPE(self))`` puede no devolver el resultado previsto. "
"``Py_TYPE(self)`` puede ser una *subclase* de la clase prevista, y las "
"subclases no están necesariamente definidas en el mismo módulo que su "
"superclase. Consulte :c:type:`PyCMethod` para obtener la clase que define el "
"método. Consulte :c:func:`PyType_GetModuleByDef` para los casos en los que "
"no se puede utilizar :c:type:`!PyCMethod`."

#: ../../c-api/type.rst:227
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of :c:"
"func:`PyType_GetModule`."
msgstr ""
"Devuelve el estado del objeto módulo asociado al tipo dado. Es un atajo para "
"llamar a :c:func:`PyModule_GetState()` sobre el resultado de :c:func:"
"`PyType_GetModule`."

#: ../../c-api/type.rst:234
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr ""
"Si el *type* tiene un módulo asociado pero su estado es ``NULL``, devuelve "
"``NULL`` sin establecer una excepción."

#: ../../c-api/type.rst:241
msgid ""
"Find the first superclass whose module was created from the given :c:type:"
"`PyModuleDef` *def*, and return that module."
msgstr ""
"Encuentra la primera superclase cuyo módulo fue creado a partir de la :c:"
"type:`PyModuleDef` *def* dada, y devuelve ese módulo."

#: ../../c-api/type.rst:244
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr ""
"Si no se encuentra ningún módulo, lanza un :py:class:`TypeError` y devuelve "
"``NULL``."

#: ../../c-api/type.rst:246
msgid ""
"This function is intended to be used together with :c:func:"
"`PyModule_GetState()` to get module state from slot methods (such as :c:"
"member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) and "
"other places where a method's defining class cannot be passed using the :c:"
"type:`PyCMethod` calling convention."
msgstr ""
"Esta función está pensada para ser utilizada junto con :c:func:"
"`PyModule_GetState()` para obtener el estado del módulo de métodos de ranura "
"(como :c:member:`~PyTypeObject.tp_init` o :c:member:`~PyNumberMethods."
"nb_add`) y otros lugares donde la clase definidora de un método no puede ser "
"pasada utilizando la convención de llamada :c:type:`PyCMethod`."

#: ../../c-api/type.rst:256
msgid "Attempt to assign a version tag to the given type."
msgstr "Intenta asignar una etiqueta de versión al tipo dado."

#: ../../c-api/type.rst:258
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr ""
"Devuelve 1 si el tipo ya tenía una etiqueta de versión válida o se asignó "
"una nueva, o 0 si no se pudo asignar una nueva etiqueta."

#: ../../c-api/type.rst:265
msgid "Creating Heap-Allocated Types"
msgstr "Crear Tipos Asignados en el Montón"

#: ../../c-api/type.rst:267
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr ""
"Las siguientes funciones y estructuras se utilizan para crear tipos :ref:"
"`heap <heap-types>`."

#: ../../c-api/type.rst:272
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see :c:"
"macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"Crea y devuelve :ref:`heap type <heap-types>` a partir del *spec* (ver :c:"
"macro:`Py_TPFLAGS_HEAPTYPE`)."

#: ../../c-api/type.rst:275
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object. "
"When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""
"La metaclase *metaclass* se utiliza para construir el objeto de tipo "
"resultante. Cuando *metaclass* es ``NULL``, la metaclase se deriva de "
"*bases* (o de *Py_tp_base[s]* slots si *bases* es ``NULL``, ver más abajo)."

#: ../../c-api/type.rst:279
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards compatibility, "
"other ``PyType_From*`` functions allow such metaclasses. They ignore "
"``tp_new``, which may result in incomplete initialization. This is "
"deprecated and in Python 3.14+ such metaclasses will not be supported.)"
msgstr ""
"Las metaclases que anulan :c:member:`~PyTypeObject.tp_new` no están "
"soportadas, excepto si ``tp_new`` es ``NULL``. (Por compatibilidad con "
"versiones anteriores, otras funciones ``PyType_From*`` permiten tales "
"metaclases. Ignoran ``tp_new``, lo que puede resultar en una inicialización "
"incompleta. Esto está obsoleto y en Python 3.14+ tales metaclases no serán "
"soportadas)."

#: ../../c-api/type.rst:286
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"El argumento *bases* se puede usar para especificar clases base; puede ser "
"una sola clase o una tupla de clases. Si *bases* es ``NULL``, se utiliza el "
"espacio *Py_tp_bases*. Si también es ``NULL``, se utiliza *Py_tp_base*. Si "
"también es ``NULL``, el nuevo tipo deriva de :class:`object`."

#: ../../c-api/type.rst:292
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with :"
"c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"El argumento *module* puede utilizarse para registrar el módulo en el que se "
"define la nueva clase. Debe ser un objeto de módulo o ``NULL``. Si no es "
"``NULL``, el módulo se asocia al nuevo tipo y puede recuperarse "
"posteriormente con :c:func:`PyType_GetModule`. El módulo asociado no se "
"hereda por las subclases; debe especificarse para cada clase individualmente."

#: ../../c-api/type.rst:299
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "Esta función llama a :c:func:`PyType_Ready` en el nuevo tipo."

#: ../../c-api/type.rst:301
msgid ""
"Note that this function does *not* fully match the behavior of calling :py:"
"class:`type() <type>` or using the :keyword:`class` statement. With user-"
"provided base types or metaclasses, prefer :ref:`calling <capi-call>` :py:"
"class:`type` (or the metaclass) over ``PyType_From*`` functions. "
"Specifically:"
msgstr ""
"Tenga en cuenta que esta función *no* coincide completamente con el "
"comportamiento de llamar a :py:class:`type() <type>` o usar la sentencia :"
"keyword:`class`. Con tipos base proporcionados por el usuario o metaclases, "
"prefiera  :ref:`calling <capi-call>` :py:class:`type` (o a la metaclase) "
"antes que a las funciones ``PyType_From*``. Específicamente:"

#: ../../c-api/type.rst:308
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be "
"set to ``type.__new__``)."
msgstr ""
":py:meth:`~object.__new__` no se llama a la nueva clase (y debe establecerse "
"en ``type.__new__``)."

#: ../../c-api/type.rst:310
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ":py:meth:`~object.__init__` no se llama a la nueva clase."

#: ../../c-api/type.rst:311
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ":py:meth:`~object.__init_subclass__` no se convoca en ninguna base."

#: ../../c-api/type.rst:312
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ""
":py:meth:`~object.__set_name__` no se invoca en los nuevos descriptores."

#: ../../c-api/type.rst:318
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr "Equivalente a ``PyType_FromMetaclass(NULL, module, spec, bases)``."

#: ../../c-api/type.rst:324
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL`` "
"as the ``tp_doc`` slot."
msgstr ""
"La función acepta ahora una única clase como argumento *bases* y ``NULL`` "
"como ranura ``tp_doc``."

#: ../../c-api/type.rst:329 ../../c-api/type.rst:346
msgid ""
"The function now finds and uses a metaclass corresponding to the provided "
"base classes.  Previously, only :class:`type` instances were returned."
msgstr ""
"La función ahora encuentra y utiliza una metaclase correspondiente a las "
"clases base proporcionadas.  Anteriormente, sólo se devolvían instancias de :"
"class:`type`."

#: ../../c-api/type.rst:332 ../../c-api/type.rst:349 ../../c-api/type.rst:365
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which "
"may result in incomplete initialization. Creating classes whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in Python 3.14+ "
"it will be no longer allowed."
msgstr ""
"La :c:member:`~PyTypeObject.tp_new` de la metaclase es *ignored*. lo que "
"puede resultar en una inicialización incompleta. Crear clases cuya metaclase "
"ignore :c:member:`~PyTypeObject.tp_new` está obsoleto y en Python 3.14+ ya "
"no estará permitido."

#: ../../c-api/type.rst:340
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr "Equivalente a ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."

#: ../../c-api/type.rst:357
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr "Equivalente a ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."

#: ../../c-api/type.rst:361
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type` "
"instances were returned."
msgstr ""
"La función ahora encuentra y utiliza una metaclase correspondiente a las "
"clases base proporcionadas en los slots *Py_tp_base[s]*. Anteriormente, sólo "
"se devolvían instancias de :class:`type`."

#: ../../c-api/type.rst:382
msgid "Structure defining a type's behavior."
msgstr "Estructura que define el comportamiento de un tipo."

#: ../../c-api/type.rst:386
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr ""
"Nombre del tipo, utilizado para establecer :c:member:`PyTypeObject.tp_name`."

#: ../../c-api/type.rst:390
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to set :"
"c:member:`PyTypeObject.tp_basicsize`."
msgstr ""
"Si es positivo, especifica el tamaño de la instancia en bytes. Se utiliza "
"para establecer :c:member:`PyTypeObject.tp_basicsize`."

#: ../../c-api/type.rst:393
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr ""
"Si es cero, especifica que :c:member:`~PyTypeObject.tp_basicsize` debe "
"heredarse."

#: ../../c-api/type.rst:396
msgid ""
"If negative, the absolute value specifies how much space instances of the "
"class need *in addition* to the superclass. Use :c:func:"
"`PyObject_GetTypeData` to get a pointer to subclass-specific memory reserved "
"this way. For negative :c:member:`!basicsize`, Python will insert padding "
"when needed to meet :c:member:`~PyTypeObject.tp_basicsize`'s alignment "
"requirements."
msgstr ""
"Si es negativo, el valor absoluto especifica cuánto espacio necesitan las "
"instancias de la clase *además* de la superclase. Usar :c:func:"
"`PyObject_GetTypeData` para obtener un puntero a la memoria específica de la "
"subclase reservada de esta manera. Para :c:member:`!basicsize` negativo, "
"Python insertará lo que sea necesario para cumplir los requisitos de "
"alineación de :c:member:`~PyTypeObject.tp_basicsize`."

#: ../../c-api/type.rst:406
msgid "Previously, this field could not be negative."
msgstr "Antes, este campo no podía ser negativo."

#: ../../c-api/type.rst:410
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set :c:member:"
"`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation for caveats."
msgstr ""
"Tamaño de un elemento de un tipo de tamaño variable, en bytes. Se utiliza "
"para configurar :c:member:`PyTypeObject.tp_itemsize`. Consulte la "
"documentación de ``tp_itemsize`` para conocer las advertencias."

#: ../../c-api/type.rst:414
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a fixed "
"offset for variable-sized memory, which can then overlap fixed-sized memory "
"used by a subclass. To help prevent mistakes, inheriting ``itemsize`` is "
"only possible in the following situations:"
msgstr ""
"Si es cero, :c:member:`~PyTypeObject.tp_itemsize` se hereda. Extender clases "
"arbitrarias de tamaño variable es peligroso, ya que algunos tipos utilizan "
"un offset fijo para la memoria de tamaño variable, que puede solaparse con "
"la memoria de tamaño fijo utilizada por una subclase. Para ayudar a prevenir "
"errores, heredar ``itemsize`` sólo es posible en las siguientes situaciones:"

#: ../../c-api/type.rst:421
msgid ""
"The base is not variable-sized (its :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""
"La base no es de tamaño variable (su :c:member:`~PyTypeObject.tp_itemsize`)."

#: ../../c-api/type.rst:423
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting that "
"the memory layout of the base class is known."
msgstr ""
"La dirección :c:member:`PyType_Spec.basicsize` solicitada es positiva, lo "
"que sugiere que se conoce la disposición en memoria de la clase base."

#: ../../c-api/type.rst:425
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that the "
"subclass does not access the instance's memory directly."
msgstr ""
"El :c:member:`PyType_Spec.basicsize` solicitado es cero, lo que sugiere que "
"la subclase no accede directamente a la memoria de la instancia."

#: ../../c-api/type.rst:428
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr "Con la bandera :c:macro:`Py_TPFLAGS_ITEMS_AT_END`."

#: ../../c-api/type.rst:432
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr ""
"Banderas de tipo, utilizadas para establecer :c:member:`PyTypeObject."
"tp_flags`."

#: ../../c-api/type.rst:434
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"Si la bandera ``Py_TPFLAGS_HEAPTYPE`` no está activada, :c:func:"
"`PyType_FromSpecWithBases` la activa automáticamente."

#: ../../c-api/type.rst:439
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
"Matriz de estructuras :c:type:`PyType_Slot`. Terminado por el valor de "
"ranura especial ``{0, NULL}``."

#: ../../c-api/type.rst:442
msgid "Each slot ID should be specified at most once."
msgstr "Cada ID de ranura debe especificarse como máximo una vez."

#: ../../c-api/type.rst:452
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr ""
"Estructura que define la funcionalidad opcional de un tipo, que contiene un "
"ID de ranura y un puntero de valor."

#: ../../c-api/type.rst:457
msgid "A slot ID."
msgstr "Un ID de ranura."

#: ../../c-api/type.rst:459
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"Los IDs de las ranuras se nombran como los nombres de campo de las "
"estructuras :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:"
"`PySequenceMethods`, :c:type:`PyMappingMethods` y :c:type:`PyAsyncMethods` "
"con un prefijo ``Py_`` añadido. Por ejemplo, utiliza:"

#: ../../c-api/type.rst:465
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` para establecer :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:466
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` para establecer :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:467
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ""
"``Py_sq_length`` para establecer :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:469
msgid ""
"The following “offset” fields cannot be set using :c:type:`PyType_Slot`:"
msgstr ""
"Los siguientes campos \"offset\" no pueden configurarse mediante :c:type:"
"`PyType_Slot`:"

#: ../../c-api/type.rst:471
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (si es posible, utilice :c:macro:"
"`Py_TPFLAGS_MANAGED_WEAKREF` en su lugar)"

#: ../../c-api/type.rst:473
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use :c:macro:"
"`Py_TPFLAGS_MANAGED_DICT` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (si es posible, utilice :c:macro:"
"`Py_TPFLAGS_MANAGED_DICT` en su lugar)"

#: ../../c-api/type.rst:475
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"`` in :ref:`PyMemberDef <pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"``en :ref:`PyMemberDef <pymemberdef-offsets>`)"

#: ../../c-api/type.rst:479
msgid ""
"If it is not possible to switch to a ``MANAGED`` flag (for example, for "
"vectorcall or to support Python older than 3.12), specify the offset in :c:"
"member:`Py_tp_members <PyTypeObject.tp_members>`. See :ref:`PyMemberDef "
"documentation <pymemberdef-offsets>` for details."
msgstr ""
"Si no es posible cambiar a una bandera ``MANAGED`` (por ejemplo, para "
"vectorcall o para soportar Python anterior a 3.12), especifique el "
"desplazamiento en :c:member:`Py_tp_members <PyTypeObject.tp_members>`. Ver :"
"ref:`PyMemberDef documentation <pymemberdef-offsets>` para más detalles."

#: ../../c-api/type.rst:485
msgid "The following fields cannot be set at all when creating a heap type:"
msgstr ""
"Los siguientes campos no se pueden establecer en absoluto al crear un tipo "
"de montón:"

#: ../../c-api/type.rst:487
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall` (use :c:member:`~PyTypeObject."
"tp_new` and/or :c:member:`~PyTypeObject.tp_init`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall` (utilice :c:member:`~PyTypeObject."
"tp_new` y/o :c:member:`~PyTypeObject.tp_init`)"

#: ../../c-api/type.rst:491
msgid ""
"Internal fields: :c:member:`~PyTypeObject.tp_dict`, :c:member:`~PyTypeObject."
"tp_mro`, :c:member:`~PyTypeObject.tp_cache`, :c:member:`~PyTypeObject."
"tp_subclasses`, and :c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""
"Campos internos: :c:member:`~PyTypeObject.tp_dict`, :c:member:`~PyTypeObject."
"tp_mro`, :c:member:`~PyTypeObject.tp_cache`, :c:member:`~PyTypeObject."
"tp_subclasses`, y :c:member:`~PyTypeObject.tp_weaklist`."

#: ../../c-api/type.rst:498
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :c:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"Establecer :c:data:`Py_tp_bases` o :c:data:`Py_tp_base` puede ser "
"problemático en algunas plataformas. Para evitar problemas, utilice en su "
"lugar el argumento *bases* de :c:func:`PyType_FromSpecWithBases`."

#: ../../c-api/type.rst:503
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ""
"Las ranuras en :c:type:`PyBufferProcs` pueden configurarse en la API "
"ilimitada."

#: ../../c-api/type.rst:506
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and :c:member:`~PyBufferProcs."
"bf_releasebuffer` are now available under the :ref:`limited API <limited-c-"
"api>`."
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` y :c:member:`~PyBufferProcs."
"bf_releasebuffer` ya están disponibles bajo la :ref:`limited API <limited-c-"
"api>`."

#: ../../c-api/type.rst:513
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr ""
"El valor deseado de la ranura. En la mayoría de los casos, se trata de un "
"puntero a una función."

#: ../../c-api/type.rst:516
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "Las ranuras que no sean ``Py_tp_doc`` no pueden ser ``NULL``."

#: ../../c-api/type.rst:8
msgid "object"
msgstr "objeto"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "tipo"
