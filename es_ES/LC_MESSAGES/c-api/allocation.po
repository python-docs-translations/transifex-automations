# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-03 15:28+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Asignación de objetos en el montículo"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Inicialice un objeto * op * recién asignado con su tipo y referencia "
"inicial. Devuelve el objeto inicializado. Si *type* indica que el objeto "
"participa en el detector de basura cíclico, se agrega al conjunto de objetos "
"observados del detector. Otros campos del objeto no se ven afectados."

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Esto hace todo :c:func:`PyObject_Init`, y también inicializa la información "
"de longitud para un objeto de tamaño variable."

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized. The caller will own the only "
"reference to the object (i.e. its reference count will be one). The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Asigna un nuevo objeto Python utilizando el tipo de estructura C *TYPE* y el "
"objeto de tipo Python *typeobj* (``PyTypeObject*``). Los campos no definidos "
"por la cabecera del objeto Python no se inicializan. El invocador poseerá la "
"única referencia al objeto (es decir, su recuento de referencias será uno). "
"El tamaño de la asignación de memoria se determina a partir del campo :c:"
"member:`~PyTypeObject.tp_basicsize` del objeto tipo."

#: ../../c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized.  The allocated memory allows for "
"the *TYPE* structure plus *size* (``Py_ssize_t``) fields of the size given "
"by the :c:member:`~PyTypeObject.tp_itemsize` field of *typeobj*.  This is "
"useful for implementing objects like tuples, which are able to determine "
"their size at construction time.  Embedding the array of fields into the "
"same allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""
"Asigna un nuevo objeto Python utilizando el tipo de estructura C *TYPE* y el "
"objeto de tipo Python *typeobj* (``PyTypeObject*``). Los campos no definidos "
"por la cabecera del objeto Python no se inicializan.  La memoria asignada "
"permite la estructura *TYPE* más los campos *size* (``Py_ssize_t``) del "
"tamaño dado por el campo :c:member:`~PyTypeObject.tp_itemsize` de "
"*typeobj*.  Esto es útil para implementar objetos como tuplas, que son "
"capaces de determinar su tamaño en el momento de la construcción.  Incrustar "
"la matriz de campos en la misma asignación disminuye el número de "
"asignaciones, mejorando la eficiencia de la gestión de memoria."

#: ../../c-api/allocation.rst:57
msgid ""
"Releases memory allocated to an object using :c:macro:`PyObject_New` or :c:"
"macro:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Libera la memoria asignada a un objeto usando :c:macro:`PyObject_New` o :c:"
"macro:`PyObject_NewVar`. Normalmente se llama desde el manejador :c:member:"
"`~PyTypeObject.tp_dealloc` especificado en el tipo del objeto.  No se debe "
"acceder a los campos del objeto después de esta llamada, ya que la memoria "
"ya no es un objeto Python válido."

#: ../../c-api/allocation.rst:66
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Objeto que es visible en Python como ``None``.  Solo se debe acceder a esto "
"usando la macro:c:macro:`Py_None`, que se evalúa como un puntero a este "
"objeto."

#: ../../c-api/allocation.rst:73
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:74
msgid "To allocate and create extension modules."
msgstr "Asignar y crear módulos de extensión."
