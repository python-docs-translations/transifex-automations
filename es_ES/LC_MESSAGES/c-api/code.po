# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# eulalio barbero espinosa <eulalio@disroot.org>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: 2024-05-11 00:32+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr "Objetos código"

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Los objetos de código son un detalle de bajo nivel de la implementación de "
"CPython. Cada uno representa un fragmento de código ejecutable que aún no se "
"ha vinculado a una función."

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"La estructura C de los objetos utilizados para describir objetos de código. "
"Los campos de este tipo están sujetos a cambios en cualquier momento."

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Se trata de una instancia de :c:type:`PyTypeObject` que representa el "
"objeto :ref:`code <code-objects>` de Python."

#: ../../c-api/code.rst:30
msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Devuelve verdadero si *co* es un objeto :ref:`code <code-objects>`. Esta "
"función siempre tiene éxito."

#: ../../c-api/code.rst:35
msgid "Return the number of free variables in a code object."
msgstr "Devuelve el número de variables libres en un objeto de código."

#: ../../c-api/code.rst:39
msgid "Return the position of the first free variable in a code object."
msgstr ""
"Devuelve la posición de la primera variable libre en un objeto de código."

#: ../../c-api/code.rst:43
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead."
msgstr ""
"Devuelve un nuevo objeto de código.  Si necesita un objeto de código "
"ficticio para crear un marco, utilice :c:func:`PyCode_NewEmpty` en su lugar."

#: ../../c-api/code.rst:46
msgid ""
"Since the definition of the bytecode changes often, calling :c:func:"
"`PyUnstable_Code_New` directly can bind you to a precise Python version."
msgstr ""
"Dado que la definición del código de bytes cambia a menudo, llamar "
"directamente a :c:func:`PyUnstable_Code_New` puede vincularte a una versión "
"precisa de Python."

#: ../../c-api/code.rst:49
msgid ""
"The many arguments of this function are inter-dependent in complex ways, "
"meaning that subtle changes to values are likely to result in incorrect "
"execution or VM crashes. Use this function only with extreme care."
msgstr ""
"Los numerosos argumentos de esta función son interdependientes de forma "
"compleja, lo que significa que cambios sutiles en los valores pueden "
"provocar una ejecución incorrecta o fallos de la máquina virtual. Utilice "
"esta función sólo con extremo cuidado."

#: ../../c-api/code.rst:53
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Añadidos los parámetros ``qualname`` y ``exceptiontable``."

#: ../../c-api/code.rst:60
msgid ""
"Renamed from ``PyCode_New`` as part of :ref:`unstable-c-api`. The old name "
"is deprecated, but will remain available until the signature changes again."
msgstr ""
"Renombrado de ``PyCode_New`` como parte de :ref:`unstable-c-api`. El nombre "
"antiguo está obsoleto, pero seguirá disponible hasta que la firma vuelva a "
"cambiar."

#: ../../c-api/code.rst:66
msgid ""
"Similar to :c:func:`PyUnstable_Code_New`, but with an extra "
"\"posonlyargcount\" for positional-only arguments. The same caveats that "
"apply to ``PyUnstable_Code_New`` also apply to this function."
msgstr ""
"Similar a :c:func:`PyUnstable_Code_New`, pero con un \"posonlyargcount\" "
"extra para argumentos de sólo posición. Las mismas advertencias que se "
"aplican a ``PyUnstable_Code_New`` también se aplican a esta función."

#: ../../c-api/code.rst:71
msgid "as ``PyCode_NewWithPosOnlyArgs``"
msgstr "como ``PyCode_NewWithPosOnlyArgs``"

#: ../../c-api/code.rst:73
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Añadidos los parámetros ``qualname`` y ``exceptiontable``."

#: ../../c-api/code.rst:78
msgid ""
"Renamed to ``PyUnstable_Code_NewWithPosOnlyArgs``. The old name is "
"deprecated, but will remain available until the signature changes again."
msgstr ""
"Se ha cambiado el nombre a ``PyUnstable_Code_NewWithPosOnlyArgs``. El nombre "
"antiguo está obsoleto, pero seguirá disponible hasta que la firma vuelva a "
"cambiar."

#: ../../c-api/code.rst:84
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Devuelve un nuevo objeto de código vacío con el nombre de archivo, el nombre "
"de la función y el número de la primera línea especificados. El objeto de "
"código resultante generará un ``Exception`` si se ejecuta."

#: ../../c-api/code.rst:90
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Devuelve el número de línea de la instrucción que ocurre en o antes de "
"``byte_offset`` y termina después de ella. Si sólo necesita el número de "
"línea de una trama, utilice :c:func:`PyFrame_GetLineNumber` en su lugar."

#: ../../c-api/code.rst:93
msgid ""
"For efficiently iterating over the line numbers in a code object, use :pep:"
"`the API described in PEP 626 <0626#out-of-process-debuggers-and-profilers>`."
msgstr ""
"Para iterar eficientemente sobre los números de línea en un objeto de "
"código, utilice :pep:`la API descrita en PEP 626 <0626#out-of-process-"
"debuggers-and-profilers>`."

#: ../../c-api/code.rst:98
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Establece los punteros ``int`` pasados a los números de línea y columna del "
"código fuente para la instrucción en ``byte_offset``. Establece el valor a "
"``0`` cuando no hay información disponible para algún elemento en particular."

#: ../../c-api/code.rst:102
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr "Devuelve ``1`` si la función tiene éxito y 0 en caso contrario."

#: ../../c-api/code.rst:108
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código de Python ``getattr(co, 'co_code')``. Devuelve una "
"referencia fuerte a un :c:type:`PyBytesObject` que representa el bytecode en "
"un objeto de código. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:113
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Este ``PyBytesObject`` puede ser creado bajo demanda por el intérprete y no "
"representa necesariamente el bytecode realmente ejecutado por CPython. El "
"principal caso de uso de esta función son los depuradores y perfiladores."

#: ../../c-api/code.rst:121
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_varnames')``. Devuelve una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables locales. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:130
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_cellvars')``. Devuelve una "
"nueva referencia a :c:type:`PyTupleObject` que contiene los nombres de las "
"variables locales a las que hacen referencia las funciones anidadas. En caso "
"de error, se devuelve ``NULL`` y se lanza una excepción."

#: ../../c-api/code.rst:139
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_freevars')``. Devuelve una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables libres. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:147
msgid ""
"Register *callback* as a code object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyCode_ClearWatcher`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registrar *callback* como observador de objetos de código para el intérprete "
"actual. Devuelve un ID que puede pasarse a :c:func:`PyCode_ClearWatcher`. En "
"caso de error (por ejemplo, no hay más IDs de observador disponibles), "
"devuelve ``-1`` y establece una excepción."

#: ../../c-api/code.rst:156
msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyCode_AddWatcher` for the current interpreter. Return ``0`` on success, or "
"``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""
"Borra el observador identificado por *watcher_id* devuelto previamente por :"
"c:func:`PyCode_AddWatcher` para el intérprete actual. Devuelve ``0`` en caso "
"de éxito, o ``-1`` y establece una excepción en caso de error (por ejemplo, "
"si el *watcher_id* dado nunca fue registrado)."

#: ../../c-api/code.rst:165
msgid ""
"Enumeration of possible code object watcher events: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"
msgstr ""
"Enumeración de posibles eventos del vigilante de objetos de código: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"

#: ../../c-api/code.rst:173
msgid "Type of a code object watcher callback function."
msgstr ""
"Tipo de una función de devolución de llamada del observador de objetos de "
"código."

#: ../../c-api/code.rst:175
msgid ""
"If *event* is ``PY_CODE_EVENT_CREATE``, then the callback is invoked after "
"`co` has been fully initialized. Otherwise, the callback is invoked before "
"the destruction of *co* takes place, so the prior state of *co* can be "
"inspected."
msgstr ""
"Si *event* es ``PY_CODE_EVENT_CREATE``, entonces la llamada de retorno es "
"invocada después de que `co` haya sido completamente inicializado. En caso "
"contrario, la llamada de retorno se invoca antes de que tenga lugar la "
"destrucción de *co*, por lo que el estado previo de *co* puede ser "
"inspeccionado."

#: ../../c-api/code.rst:180
msgid ""
"If *event* is ``PY_CODE_EVENT_DESTROY``, taking a reference in the callback "
"to the about-to-be-destroyed code object will resurrect it and prevent it "
"from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Si *event* es ``PY_CODE_EVENT_DESTROY``, tomar una referencia en la llamada "
"de retorno al objeto de código a punto de ser destruido lo resucitará y "
"evitará que sea liberado en ese momento. Cuando el objeto resucitado sea "
"destruido más tarde, cualquier llamada de retorno activa en ese momento será "
"llamada de nuevo."

#: ../../c-api/code.rst:185
msgid ""
"Users of this API should not rely on internal runtime implementation "
"details. Such details may include, but are not limited to, the exact order "
"and timing of creation and destruction of code objects. While changes in "
"these details may result in differences observable by watchers (including "
"whether a callback is invoked or not), it does not change the semantics of "
"the Python code being executed."
msgstr ""
"Los usuarios de esta API no deben confiar en los detalles internos de "
"implementación en tiempo de ejecución. Dichos detalles pueden incluir, entre "
"otros, el orden y el momento exactos de creación y destrucción de objetos de "
"código. Mientras que los cambios en estos detalles pueden resultar en "
"diferencias observables por los observadores (incluyendo si una llamada de "
"retorno es invocada o no), esto no cambia la semántica del código Python que "
"está siendo ejecutado."

#: ../../c-api/code.rst:192
msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Si la llamada de retorno establece una excepción, debe devolver  ``-1``; "
"esta excepción se imprimirá como una excepción no calificable utilizando :c:"
"func:`PyErr_WriteUnraisable`. En caso contrario, debe devolver ``0``."

#: ../../c-api/code.rst:196
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"Puede que ya haya una excepción pendiente al entrar en la llamada de "
"retorno. En este caso, la llamada de retorno debe volver a ``0`` con la "
"misma excepción todavía establecida. Esto significa que la llamada de "
"retorno no puede llamar a ninguna otra API que pueda establecer una "
"excepción a menos que guarde y borre el estado de excepción primero, y lo "
"restaure antes de regresar."

#: ../../c-api/code.rst:206
msgid "Extra information"
msgstr "Información adicional"

#: ../../c-api/code.rst:208
msgid ""
"To support low-level extensions to frame evaluation, such as external just-"
"in-time compilers, it is possible to attach arbitrary extra data to code "
"objects."
msgstr ""
"Para soportar extensiones de bajo nivel en la evaluación de tramas, como "
"compiladores externos just-in-time, es posible adjuntar datos extra "
"arbitrarios a los objetos de código."

#: ../../c-api/code.rst:212
msgid ""
"These functions are part of the unstable C API tier: this functionality is a "
"CPython implementation detail, and the API may change without deprecation "
"warnings."
msgstr ""
"Estas funciones forman parte del nivel inestable de la API de C: esta "
"funcionalidad es un detalle de implementación de CPython, y la API puede "
"cambiar sin advertencias de desaprobación."

#: ../../c-api/code.rst:218
msgid "Return a new an opaque index value used to adding data to code objects."
msgstr ""
"Devuelve un nuevo valor de índice opaco utilizado para añadir datos a los "
"objetos de código."

#: ../../c-api/code.rst:220
msgid ""
"You generally call this function once (per interpreter) and use the result "
"with ``PyCode_GetExtra`` and ``PyCode_SetExtra`` to manipulate data on "
"individual code objects."
msgstr ""
"Generalmente se llama a esta función una vez (por intérprete) y se utiliza "
"el resultado con ``PyCode_GetExtra`` y ``PyCode_SetExtra`` para manipular "
"datos en objetos de código individuales."

#: ../../c-api/code.rst:224
msgid ""
"If *free* is not ``NULL``: when a code object is deallocated, *free* will be "
"called on non-``NULL`` data stored under the new index. Use :c:func:"
"`Py_DecRef` when storing :c:type:`PyObject`."
msgstr ""
"Si *free* no es ``NULL``: cuando un objeto de código es desasignado, *free* "
"será llamado sobre datos no``NULL`` almacenados bajo el nuevo índice. "
"Utilice :c:func:`Py_DecRef` cuando almacene :c:type:`PyObject`."

#: ../../c-api/code.rst:230
msgid "as ``_PyEval_RequestCodeExtraIndex``"
msgstr "como ``_PyEval_RequestCodeExtraIndex``"

#: ../../c-api/code.rst:234
msgid ""
"Renamed to ``PyUnstable_Eval_RequestCodeExtraIndex``. The old private name "
"is deprecated, but will be available until the API changes."
msgstr ""
"Renombrado a ``PyUnstable_Eval_RequestCodeExtraIndex``. El antiguo nombre "
"privado está obsoleto, pero estará disponible hasta que cambie la API."

#: ../../c-api/code.rst:240
msgid ""
"Set *extra* to the extra data stored under the given index. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Establece *extra* a los datos extra almacenados bajo el índice dado. "
"Devuelve 0 en caso de éxito. Establece una excepción y devuelve -1 en caso "
"de fallo."

#: ../../c-api/code.rst:243
msgid ""
"If no data was set under the index, set *extra* to ``NULL`` and return 0 "
"without setting an exception."
msgstr ""
"Si no se ha establecido ningún dato bajo el índice, establece *extra* en "
"``NULL`` y devuelve 0 sin establecer una excepción."

#: ../../c-api/code.rst:248
msgid "as ``_PyCode_GetExtra``"
msgstr "como ``_PyCode_GetExtra``"

#: ../../c-api/code.rst:252
msgid ""
"Renamed to ``PyUnstable_Code_GetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Renombrado a ``PyUnstable_Code_GetExtra``. El antiguo nombre privado está "
"obsoleto, pero estará disponible hasta que cambie la API."

#: ../../c-api/code.rst:258
msgid ""
"Set the extra data stored under the given index to *extra*. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Establece los datos extra almacenados bajo el índice dado a *extra*. "
"Devuelve 0 en caso de éxito. Establece una excepción y devuelve -1 en caso "
"de fallo."

#: ../../c-api/code.rst:263
msgid "as ``_PyCode_SetExtra``"
msgstr "como ``_PyCode_SetExtra``"

#: ../../c-api/code.rst:267
msgid ""
"Renamed to ``PyUnstable_Code_SetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Renombrado a ``PyUnstable_Code_SetExtra``. El antiguo nombre privado está "
"obsoleto, pero estará disponible hasta que cambie la API."

#: ../../c-api/code.rst:3
msgid "object"
msgstr "objeto"

#: ../../c-api/code.rst:3
msgid "code"
msgstr "código"

#: ../../c-api/code.rst:3
msgid "code object"
msgstr "objeto de código"

#: ../../c-api/code.rst:56
msgid "PyCode_New (C function)"
msgstr "PyCode_New (función C)"

#: ../../c-api/code.rst:69
msgid "PyCode_NewWithPosOnlyArgs (C function)"
msgstr "PyCode_NewWithPosOnlyArgs (función C)"

#: ../../c-api/code.rst:228
msgid "_PyEval_RequestCodeExtraIndex (C function)"
msgstr "_PyEval_RequestCodeExtraIndex (función C)"

#: ../../c-api/code.rst:246
msgid "_PyCode_GetExtra (C function)"
msgstr "PyCode_GetExtra (función C)"

#: ../../c-api/code.rst:261
msgid "_PyCode_SetExtra (C function)"
msgstr "_PyCode_SetExtra (función C)"
