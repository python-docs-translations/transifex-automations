# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:20+0000\n"
"PO-Revision-Date: 2023-05-24 02:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/code.rst:8
msgid "Code Objects"
msgstr "Objetos código"

#: ../../c-api/code.rst:12
msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Los objetos de código son un detalle de bajo nivel de la implementación de "
"CPython. Cada uno representa un fragmento de código ejecutable que aún no se "
"ha vinculado a una función."

#: ../../c-api/code.rst:18
msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"La estructura C de los objetos utilizados para describir objetos de código. "
"Los campos de este tipo están sujetos a cambios en cualquier momento."

#: ../../c-api/code.rst:24
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Se trata de una instancia de :c:type:`PyTypeObject` que representa el "
"objeto :ref:`code <code-objects>` de Python."

#: ../../c-api/code.rst:30
msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Devuelve verdadero si *co* es un objeto :ref:`code <code-objects>`. Esta "
"función siempre tiene éxito."

#: ../../c-api/code.rst:35
msgid "Return the number of free variables in *co*."
msgstr ""

#: ../../c-api/code.rst:39
msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead.  Calling :c:func:`PyCode_New` "
"directly will bind you to a precise Python version since the definition of "
"the bytecode changes often. The many arguments of this function are inter-"
"dependent in complex ways, meaning that subtle changes to values are likely "
"to result in incorrect execution or VM crashes. Use this function only with "
"extreme care."
msgstr ""

#: ../../c-api/code.rst:46
msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Añadidos los parámetros ``qualname`` y ``exceptiontable``."

#: ../../c-api/code.rst:51
msgid ""
"Similar to :c:func:`PyCode_New`, but with an extra \"posonlyargcount\" for "
"positional-only arguments. The same caveats that apply to ``PyCode_New`` "
"also apply to this function."
msgstr ""

#: ../../c-api/code.rst:56
msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Añadidos los parámetros ``qualname`` y ``exceptiontable``."

#: ../../c-api/code.rst:61
msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Devuelve un nuevo objeto de código vacío con el nombre de archivo, el nombre "
"de la función y el número de la primera línea especificados. El objeto de "
"código resultante generará un ``Exception`` si se ejecuta."

#: ../../c-api/code.rst:67
msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Devuelve el número de línea de la instrucción que ocurre en o antes de "
"``byte_offset`` y termina después de ella. Si sólo necesita el número de "
"línea de una trama, utilice :c:func:`PyFrame_GetLineNumber` en su lugar."

#: ../../c-api/code.rst:70
msgid ""
"For efficiently iterating over the line numbers in a code object, use `the "
"API described in PEP 626 <https://peps.python.org/pep-0626/#out-of-process-"
"debuggers-and-profilers>`_."
msgstr ""
"Para iterar eficientemente sobre los números de línea en un objeto de "
"código, utilice `la API descrita en PEP 626 <https://peps.python.org/"
"pep-0626/#out-of-process-debuggers-and-profilers>`_."

#: ../../c-api/code.rst:75
msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Establece los punteros ``int`` pasados a los números de línea y columna del "
"código fuente para la instrucción en ``byte_offset``. Establece el valor a "
"``0`` cuando no hay información disponible para algún elemento en particular."

#: ../../c-api/code.rst:79
msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr "Devuelve ``1`` si la función tiene éxito y 0 en caso contrario."

#: ../../c-api/code.rst:85
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código de Python ``getattr(co, 'co_code')``. Devuelve una "
"referencia fuerte a un :c:type:`PyBytesObject` que representa el bytecode en "
"un objeto de código. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:90
msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Este ``PyBytesObject`` puede ser creado bajo demanda por el intérprete y no "
"representa necesariamente el bytecode realmente ejecutado por CPython. El "
"principal caso de uso de esta función son los depuradores y perfiladores."

#: ../../c-api/code.rst:98
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_varnames')``. Devuelve una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables locales. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:107
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_cellvars')``. Devuelve una "
"nueva referencia a :c:type:`PyTupleObject` que contiene los nombres de las "
"variables locales a las que hacen referencia las funciones anidadas. En caso "
"de error, se devuelve ``NULL`` y se lanza una excepción."

#: ../../c-api/code.rst:116
msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the free "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Equivalente al código Python ``getattr(co, 'co_freevars')``. Devuelve una "
"nueva referencia a un :c:type:`PyTupleObject` que contiene los nombres de "
"las variables libres. En caso de error, se devuelve ``NULL`` y se lanza una "
"excepción."

#: ../../c-api/code.rst:3
msgid "object"
msgstr "objeto"

#: ../../c-api/code.rst:3
msgid "code"
msgstr "código"

#: ../../c-api/code.rst:3
msgid "code object"
msgstr "objeto de código"
