# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-21 22:53+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr "Protocolo de iteración"

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr "Existen dos funciones específicas para trabajar con iteradores."

#: ../../c-api/iter.rst:12
msgid ""
"Return non-zero if the object *o* can be safely passed to :c:func:"
"`PyIter_Next`, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Devuelve un valor distinto de cero si el objeto *o* puede pasarse con "
"seguridad a :c:func:`PyIter_Next`, y ``0`` en caso contrario.  Esta función "
"siempre tiene éxito."

#: ../../c-api/iter.rst:17
msgid ""
"Return non-zero if the object *o* provides the :class:`AsyncIterator` "
"protocol, and ``0`` otherwise.  This function always succeeds."
msgstr ""
"Devuelve un valor distinto de cero si el objeto *o* proporciona el "
"protocolo :class:`AsyncIterator`, y ``0`` en caso contrario.  Esta función "
"siempre tiene éxito."

#: ../../c-api/iter.rst:24
msgid ""
"Return the next value from the iterator *o*.  The object must be an iterator "
"according to :c:func:`PyIter_Check` (it is up to the caller to check this). "
"If there are no remaining values, returns ``NULL`` with no exception set. If "
"an error occurs while retrieving the item, returns ``NULL`` and passes along "
"the exception."
msgstr ""
"Devuelve el siguiente valor del iterador *o*.  El objeto debe ser un "
"iterador de acuerdo con :c:func:`PyIter_Check` (es responsabilidad del "
"llamante comprobarlo). Si no hay valores restantes, devuelve ``NULL`` sin "
"establecer ninguna excepción. Si se produce un error al recuperar el "
"elemento, devuelve ``NULL`` y pasa la excepción."

#: ../../c-api/iter.rst:30
msgid ""
"To write a loop which iterates over an iterator, the C code should look "
"something like this::"
msgstr ""
"Para escribir un bucle que itere sobre un iterador, el código C debería ser "
"algo como esto::"

#: ../../c-api/iter.rst:59
msgid ""
"The enum value used to represent different results of :c:func:`PyIter_Send`."
msgstr ""
"El valor enum utilizado para representar diferentes resultados de :c:func:"
"`PyIter_Send`."

#: ../../c-api/iter.rst:66
msgid "Sends the *arg* value into the iterator *iter*. Returns:"
msgstr "Envía el valor *arg* al iterador *iter*. Devuelve:"

#: ../../c-api/iter.rst:68
msgid ""
"``PYGEN_RETURN`` if iterator returns. Return value is returned via *presult*."
msgstr ""
"``PYGEN_RETURN`` si vuelve el iterador. El valor de retorno se devuelve "
"mediante *presult*."

#: ../../c-api/iter.rst:69
msgid ""
"``PYGEN_NEXT`` if iterator yields. Yielded value is returned via *presult*."
msgstr ""
"``PYGEN_NEXT`` si el iterador cede. El valor obtenido se devuelve mediante "
"*presult*."

#: ../../c-api/iter.rst:70
msgid ""
"``PYGEN_ERROR`` if iterator has raised and exception. *presult* is set to "
"``NULL``."
msgstr ""
"``PYGEN_ERROR`` si el iterador ha lanzado una excepción. *presult* se "
"establece en ``NULL``."
